- en: Change log
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变更日志
- en: 原文：[`jax.readthedocs.io/en/latest/changelog.html`](https://jax.readthedocs.io/en/latest/changelog.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[`jax.readthedocs.io/en/latest/changelog.html`](https://jax.readthedocs.io/en/latest/changelog.html)
- en: Best viewed [here](https://jax.readthedocs.io/en/latest/changelog.html).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 最佳查看[此处](https://jax.readthedocs.io/en/latest/changelog.html)。
- en: jax 0.4.31
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.4.31
- en: jaxlib 0.4.31
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.4.31
- en: Bug fixes
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bug修复
- en: Fixed a bug that meant that negative static_argnums to a jit were mishandled
    by the jit dispatch fast path.
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复了一个bug，导致jit在快速路径中错误处理负的静态参数。
- en: jax 0.4.30 (June 18, 2024)
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.4.30（2024年6月18日）
- en: Changes
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变更
- en: JAX supports ml_dtypes >= 0.2\. In 0.4.29 release, the ml_dtypes version was
    bumped to 0.4.0 but this has been rolled back in this release to give users of
    both TensorFlow and JAX more time to migrate to a newer TensorFlow release.
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: JAX支持ml_dtypes >= 0.2。在0.4.29版本中，ml_dtypes版本已提升到0.4.0，但此次发布已回滚，以便TensorFlow和JAX的用户有足够时间迁移到更新的TensorFlow版本。
- en: '`jax.experimental.mesh_utils` can now create an efficient mesh for TPU v5e.'
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.experimental.mesh_utils`现在可以为TPU v5e创建高效的网格。'
- en: 'jax now depends on jaxlib directly. This change was enabled by the CUDA plugin
    switch: there are no longer multiple jaxlib variants. You can install a CPU-only
    jax with `pip install jax`, no extras required.'
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在，jax直接依赖于jaxlib。这一变更由CUDA插件开关驱动：不再存在多个jaxlib变体。您可以通过`pip install jax`安装仅支持CPU的jax，无需额外的内容。
- en: Added an API for exporting and serializing JAX functions. This used to exist
    in `jax.experimental.export` (which is being deprecated), and will now live in
    `jax.export`. See the [documentation](https://jax.readthedocs.io/en/latest/export/index.html).
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了导出和序列化JAX函数的API。此功能曾存在于`jax.experimental.export`中（正在弃用），现在将位于`jax.export`中。请参阅[文档](https://jax.readthedocs.io/en/latest/export/index.html)。
- en: Deprecations
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弃用信息
- en: Internal pretty-printing tools `jax.core.pp_*` are deprecated, and will be removed
    in a future release.
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内部漂亮打印工具`jax.core.pp_*`已弃用，并将在将来的版本中移除。
- en: Hashing of tracers is deprecated, and will lead to a `TypeError` in a future
    JAX release. This previously was the case, but there was an inadvertent regression
    in the last several JAX releases.
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对追踪器的哈希化已弃用，并将在未来的JAX版本中导致`TypeError`。这在先前的JAX版本中是一种情况，但在最近几个JAX版本中出现了意外的退化。
- en: '`jax.experimental.export` is deprecated. Use `jax.export` instead. See the
    [migration guide](https://jax.readthedocs.io/en/latest/export/export.html#migration-guide-from-jax-experimental-export).'
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.experimental.export`已弃用。请改用`jax.export`。参见[迁移指南](https://jax.readthedocs.io/en/latest/export/export.html#migration-guide-from-jax-experimental-export)。'
- en: Passing an array in place of a dtype is now deprecated in most cases; e.g. for
    arrays `x` and `y`, `x.astype(y)` will raise a warning. To silence it use `x.astype(y.dtype)`.
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在大多数情况下，现在已弃用将数组作为dtype的传递方式；例如，对于数组`x`和`y`，`x.astype(y)`将引发警告。要消除警告，请使用`x.astype(y.dtype)`。
- en: '`jax.xla_computation` is deprecated and will be removed in a future release.
    Please use the AOT APIs to get the same functionality as `jax.xla_computation`.'
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.xla_computation`已弃用，并将在将来的版本中移除。请使用AOT API以获得与`jax.xla_computation`相同的功能。'
- en: '`jax.xla_computation(fn)(*args, **kwargs)` can be replaced with `jax.jit(fn).lower(*args,
    **kwargs).compiler_ir(''hlo'')`.'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.xla_computation(fn)(*args, **kwargs)`可以替换为`jax.jit(fn).lower(*args, **kwargs).compiler_ir(''hlo'')`。'
- en: You can also use `.out_info` property of `jax.stages.Lowered` to get the output
    information (like tree structure, shape and dtype).
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您还可以使用`jax.stages.Lowered`的`.out_info`属性来获取输出信息（例如树结构、形状和dtype）。
- en: For cross-backend lowering, you can replace `jax.xla_computation(fn, backend='tpu')(*args,
    **kwargs)` with `jax.jit(fn).trace(*args, **kwargs).lower(lowering_platforms=('tpu',)).compiler_ir('hlo')`.
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于跨后端的降低，您可以将`jax.xla_computation(fn, backend='tpu')(*args, **kwargs)`替换为`jax.jit(fn).trace(*args,
    **kwargs).lower(lowering_platforms=('tpu',)).compiler_ir('hlo')`。
- en: jaxlib 0.4.30 (June 18, 2024)
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.4.30（2024年6月18日）
- en: Support for monolithic CUDA jaxlibs has been dropped. You must use the plugin-based
    installation (`pip install jax[cuda12]` or `pip install jax[cuda12_local]`).
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不再支持单片CUDA jaxlibs。您必须使用基于插件的安装方式（`pip install jax[cuda12]`或`pip install jax[cuda12_local]`）。
- en: jax 0.4.29 (June 10, 2024)
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.4.29（2024年6月10日）
- en: Changes
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变更
- en: We anticipate that this will be the last release of JAX and jaxlib supporting
    a monolithic CUDA jaxlib. Future releases will use the CUDA plugin jaxlib (e.g.
    `pip install jax[cuda12]`).
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们预计这将是支持单片CUDA jaxlib的JAX和jaxlib的最后一个版本发布。未来的版本将使用基于插件的CUDA jaxlib（例如`pip install
    jax[cuda12]`）。
- en: JAX now requires ml_dtypes version 0.4.0 or newer.
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: JAX现在要求ml_dtypes版本为0.4.0或更新。
- en: Removed backwards-compatibility support for old usage of the `jax.experimental.export`
    API. It is not possible anymore to use `from jax.experimental.export import export`,
    and instead you should use `from jax.experimental import export`. The removed
    functionality has been deprecated since 0.4.24.
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除了对旧版 `jax.experimental.export` API 的向后兼容支持。不再可以使用 `from jax.experimental.export
    import export`，而应改为 `from jax.experimental import export`。已自 0.4.24 版本起弃用该功能。
- en: Added `is_leaf` argument to `jax.tree.all()` & `jax.tree_util.tree_all()`.
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `jax.tree.all()` 和 `jax.tree_util.tree_all()` 中添加了 `is_leaf` 参数。
- en: Deprecations
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弃用
- en: '`jax.sharding.XLACompatibleSharding` is deprecated. Please use `jax.sharding.Sharding`.'
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弃用了 `jax.sharding.XLACompatibleSharding`。请使用 `jax.sharding.Sharding`。
- en: '`jax.experimental.Exported.in_shardings` has been renamed as `jax.experimental.Exported.in_shardings_hlo`.
    Same for `out_shardings`. The old names will be removed after 3 months.'
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.experimental.Exported.in_shardings` 已重命名为 `jax.experimental.Exported.in_shardings_hlo`。`out_shardings`
    也是如此。旧名称将在 3 个月后移除。'
- en: 'Removed a number of previously-deprecated APIs:'
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除了一些先前弃用的 API：
- en: 'from `jax.core`: `non_negative_dim`, `DimSize`, `Shape`'
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自 `jax.core`：`non_negative_dim`，`DimSize`，`Shape`
- en: 'from `jax.lax`: `tie_in`'
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自 `jax.lax`：`tie_in`
- en: 'from `jax.nn`: `normalize`'
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自 `jax.nn`：`normalize`
- en: 'from `jax.interpreters.xla`: `backend_specific_translations`, `translations`,
    `register_translation`, `xla_destructure`, `TranslationRule`, `TranslationContext`,
    `XlaOp`.'
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自 `jax.interpreters.xla`：`backend_specific_translations`，`translations`，`register_translation`，`xla_destructure`，`TranslationRule`，`TranslationContext`，`XlaOp`。
- en: The `tol` argument of `jax.numpy.linalg.matrix_rank()` is being deprecated and
    will soon be removed. Use `rtol` instead.
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.numpy.linalg.matrix_rank()` 的 `tol` 参数即将弃用并很快将被移除。请改用 `rtol`。'
- en: The `rcond` argument of `jax.numpy.linalg.pinv()` is being deprecated and will
    soon be removed. Use `rtol` instead.
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.numpy.linalg.pinv()` 的 `rcond` 参数即将弃用并很快将被移除。请改用 `rtol`。'
- en: The deprecated `jax.config` submodule has been removed. To configure JAX use
    `import jax` and then reference the config object via `jax.config`.
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已移除不推荐使用的 `jax.config` 子模块。要配置 JAX，请使用 `import jax`，然后通过 `jax.config` 引用配置对象。
- en: '`jax.random` APIs no longer accept batched keys, where previously some did
    unintentionally. Going forward, we recommend explicit use of `jax.vmap()` in such
    cases.'
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.random` API 现在不再接受批量键，先前一些 API 无意中接受了。未来建议在这些情况下显式使用 `jax.vmap()`。'
- en: In `jax.scipy.special.beta()`, the `x` and `y` parameters have been renamed
    to `a` and `b` for consistency with other `beta` APIs.
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `jax.scipy.special.beta()` 中，为了与其他 `beta` API 保持一致性，已将 `x` 和 `y` 参数重命名为 `a`
    和 `b`。
- en: New Functionality
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新功能
- en: Added `jax.experimental.Exported.in_shardings_jax()` to construct shardings
    that can be used with the JAX APIs from the HloShardings that are stored in the
    `Exported` objects.
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了 `jax.experimental.Exported.in_shardings_jax()` 来构建可以与存储在 `Exported` 对象中的
    HloShardings 在 JAX API 中使用的 shardings。
- en: jaxlib 0.4.29 (June 10, 2024)
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.4.29（2024 年 6 月 10 日）
- en: Bug fixes
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bug 修复
- en: Fixed a bug where XLA sharded some concatenation operations incorrectly, which
    manifested as an incorrect output for cumulative reductions (#21403).
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复了 XLA 不正确分片某些连接操作的 bug，表现为累积归约输出不正确（#21403）。
- en: Fixed a bug where XLA:CPU miscompiled certain matmul fusions (https://github.com/openxla/xla/pull/13301).
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复了 XLA:CPU 错误编译某些矩阵乘法融合的 bug（https://github.com/openxla/xla/pull/13301）。
- en: Fixes a compiler crash on GPU (https://github.com/google/jax/issues/21396).
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复了 GPU 上的编译器崩溃（https://github.com/google/jax/issues/21396）。
- en: Deprecations
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弃用
- en: '`jax.tree.map(f, None, non-None)` now emits a `DeprecationWarning`, and will
    raise an error in a future version of jax. `None` is only a tree-prefix of itself.
    To preserve the current behavior, you can ask `jax.tree.map` to treat `None` as
    a leaf value by writing: `jax.tree.map(lambda x, y: None if x is None else f(x,
    y), a, b, is_leaf=lambda x: x is None)`.'
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.tree.map(f, None, non-None)` 现在会发出 `DeprecationWarning`，并且在未来的 jax 版本中将引发错误。`None`
    只是其自身的树前缀。为保留当前行为，您可以请求 `jax.tree.map` 将 `None` 视为叶子值，方法是写：`jax.tree.map(lambda
    x, y: None if x is None else f(x, y), a, b, is_leaf=lambda x: x is None)`。'
- en: jax 0.4.28 (May 9, 2024)
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.4.28（2024 年 5 月 9 日）
- en: Bug fixes
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bug 修复
- en: Reverted a change to `make_jaxpr` that was breaking Equinox (#21116).
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 撤销了导致 Equinox 失效的 `make_jaxpr` 更改（#21116）。
- en: Deprecations & removals
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弃用与移除
- en: The `kind` argument to `jax.numpy.sort()` and `jax.numpy.argsort()` is now removed.
    Use `stable=True` or `stable=False` instead.
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.numpy.sort()` 和 `jax.numpy.argsort()` 的 `kind` 参数现已移除。请改用 `stable=True`
    或 `stable=False`。'
- en: Removed `get_compute_capability` from the `jax.experimental.pallas.gpu` module.
    Use the `compute_capability` attribute of a GPU device, returned by `jax.devices()`
    or `jax.local_devices()`, instead.
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 `jax.experimental.pallas.gpu` 模块中移除了 `get_compute_capability`。请改用由 `jax.devices()`
    或 `jax.local_devices()` 返回的 GPU 设备的 `compute_capability` 属性。
- en: The `newshape` argument to `jax.numpy.reshape()`is being deprecated and will
    soon be removed. Use `shape` instead.
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.numpy.reshape()` 的 `newshape` 参数已被弃用，并将很快移除。请改用 `shape`。'
- en: Changes
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变更
- en: The minimum jaxlib version of this release is 0.4.27.
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本版本 jaxlib 的最低版本为 0.4.27。
- en: jaxlib 0.4.28 (May 9, 2024)
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.4.28 (2024年5月9日)
- en: Bug fixes
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bug 修复
- en: Fixes a memory corruption bug in the type name of Array and JIT Python objects
    in Python 3.10 or earlier.
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复了在 Python 3.10 或更早版本中的数组和 JIT Python 对象类型名称中的内存损坏 bug。
- en: Fixed a warning `'+ptx84' is not a recognized feature for this target` under
    CUDA 12.4.
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复了在 CUDA 12.4 下的警告 `'+ptx84' is not a recognized feature for this target`。
- en: Fixed a slow compilation problem on CPU.
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复了 CPU 上的缓慢编译问题。
- en: Changes
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变更
- en: The Windows build is now built with Clang instead of MSVC.
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在的 Windows 构建使用 Clang 而不是 MSVC。
- en: jax 0.4.27 (May 7, 2024)
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.4.27 (2024年5月7日)
- en: New Functionality
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新功能
- en: Added `jax.numpy.unstack()` and `jax.numpy.cumulative_sum()`, following their
    addition in the array API 2023 standard, soon to be adopted by NumPy.
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新增了 `jax.numpy.unstack()` 和 `jax.numpy.cumulative_sum()`，遵循其在 2023 年标准的数组 API
    中的添加，这很快将被 NumPy 采纳。
- en: Added a new config option `jax_cpu_collectives_implementation` to select the
    implementation of cross-process collective operations used by the CPU backend.
    Choices available are `'none'`(default), `'gloo'` and `'mpi'` (requires jaxlib
    0.4.26). If set to `'none'`, cross-process collective operations are disabled.
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新增了一个新的配置选项 `jax_cpu_collectives_implementation`，用于选择 CPU 后端使用的跨进程集合操作的实现。可用选项为
    `'none'`（默认）、`'gloo'` 和 `'mpi'`（需要 jaxlib 0.4.26）。如果设置为 `'none'`，则禁用跨进程集合操作。
- en: Changes
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变更
- en: '`jax.pure_callback()`, `jax.experimental.io_callback()` and `jax.debug.callback()`
    now use `jax.Array` instead of `np.ndarray`. You can recover the old behavior
    by transforming the arguments via `jax.tree.map(np.asarray, args)` before passing
    them to the callback.'
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.pure_callback()`、`jax.experimental.io_callback()` 和 `jax.debug.callback()`
    现在使用 `jax.Array` 而不是 `np.ndarray`。您可以通过在传递给回调之前通过 `jax.tree.map(np.asarray, args)`
    转换参数来恢复旧的行为。'
- en: '`complex_arr.astype(bool)` now follows the same semantics as NumPy, returning
    False where `complex_arr` is equal to `0 + 0j`, and True otherwise.'
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`complex_arr.astype(bool)` 现在遵循与 NumPy 相同的语义，当 `complex_arr` 等于 `0 + 0j` 时返回
    False，否则返回 True。'
- en: '`core.Token` now is a non-trivial class which wraps a `jax.Array`. It could
    be created and threaded in and out of computations to build up dependency. The
    singleton object `core.token` has been removed, users now should create and use
    fresh `core.Token` objects instead.'
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`core.Token` 现在是一个包装 `jax.Array` 的非平凡类。可以创建并将其传递到计算中，以建立依赖关系。已移除了单例对象 `core.token`，现在用户应该创建和使用新的
    `core.Token` 对象。'
- en: On GPU, the Threefry PRNG implementation no longer lowers to a kernel call by
    default. This choice can improve runtime memory usage at a compile-time cost.
    Prior behavior, which produces a kernel call, can be recovered with `jax.config.update('jax_threefry_gpu_kernel_lowering',
    True)`. If the new default causes issues, please file a bug. Otherwise, we intend
    to remove this flag in a future release.
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 GPU 上，默认情况下，Threefry PRNG 实现不再降低为内核调用。这种选择可以在编译时减少运行时内存使用。可以通过 `jax.config.update('jax_threefry_gpu_kernel_lowering',
    True)` 恢复先前的行为，即产生内核调用。如果新的默认行为导致问题，请报告 bug。否则，我们计划在未来的版本中移除此标志。
- en: Deprecations & Removals
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 废弃和移除
- en: Pallas now exclusively uses XLA for compiling kernels on GPU. The old lowering
    pass via Triton Python APIs has been removed and the `JAX_TRITON_COMPILE_VIA_XLA`
    environment variable no longer has any effect.
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pallas 现在完全采用 XLA 编译 GPU 上的内核。通过 Triton Python API 的旧降低通路已被移除，`JAX_TRITON_COMPILE_VIA_XLA`
    环境变量不再起作用。
- en: '`jax.numpy.clip()` has a new argument signature: `a`, `a_min`, and `a_max`
    are deprecated in favor of `x` (positional only), `min`, and `max` ([#20550](https://github.com/google/jax/issues/20550)).'
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.numpy.clip()` 现在具有新的参数签名：`a`、`a_min` 和 `a_max` 已被弃用，改用 `x`（仅位置参数）、`min`
    和 `max`（[#20550](https://github.com/google/jax/issues/20550)）。'
- en: The `device()` method of JAX arrays has been removed, after being deprecated
    since JAX v0.4.21\. Use `arr.devices()` instead.
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: JAX 数组的 `device()` 方法已被移除，自 JAX v0.4.21 弃用后。请改用 `arr.devices()`。
- en: The `initial` argument to `jax.nn.softmax()` and `jax.nn.log_softmax()` is deprecated;
    empty inputs to softmax are now supported without setting this.
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于`jax.nn.softmax()`和`jax.nn.log_softmax()`，`initial`参数已弃用；现在支持不设置softmax的空输入。
- en: In `jax.jit()`, passing invalid `static_argnums` or `static_argnames` now leads
    to an error rather than a warning.
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`jax.jit()`中，传递无效的`static_argnums`或`static_argnames`现在会导致错误，而不是警告。
- en: The minimum jaxlib version is now 0.4.23.
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最低的jaxlib版本现在是0.4.23。
- en: The `jax.numpy.hypot()` function now issues a deprecation warning when passing
    complex-valued inputs to it. This will raise an error when the deprecation is
    completed.
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.numpy.hypot()`函数现在在传递复数输入时会发出弃用警告。在弃用完成时，将会引发错误。'
- en: Scalar arguments to `jax.numpy.nonzero()`, `jax.numpy.where()`, and related
    functions now raise an error, following a similar change in NumPy.
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标量参数传递给`jax.numpy.nonzero()`、`jax.numpy.where()`及其相关函数现在会引发错误，这与NumPy中的类似变更一致。
- en: The config option `jax_cpu_enable_gloo_collectives` is deprecated. Use `jax.config.update('jax_cpu_collectives_implementation',
    'gloo')` instead.
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置选项`jax_cpu_enable_gloo_collectives`已不推荐使用。请改用`jax.config.update('jax_cpu_collectives_implementation',
    'gloo')`。
- en: The `jax.Array.device_buffer` and `jax.Array.device_buffers` methods have been
    removed after being deprecated in JAX v0.4.22\. Instead use `jax.Array.addressable_shards`
    and `jax.Array.addressable_data()`.
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在JAX v0.4.22中弃用并移除了`jax.Array.device_buffer`和`jax.Array.device_buffers`方法。改用`jax.Array.addressable_shards`和`jax.Array.addressable_data()`。
- en: The `condition`, `x`, and `y` parameters of `jax.numpy.where` are now positional-only,
    following deprecation of the keywords in JAX v0.4.21.
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.numpy.where`的`condition`、`x`和`y`参数现在只能按位置传递，这是在JAX v0.4.21中关键字被弃用后的变更。'
- en: Non-array arguments to functions in `jax.lax.linalg` now must be specified by
    keyword. Previously, this raised a DeprecationWarning.
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在在`jax.lax.linalg`中函数的非数组参数必须通过关键字指定。之前会引发DeprecationWarning。
- en: Array-like arguments are now required in several :func:`jax.numpy` APIs, including
    `apply_along_axis()`, `apply_over_axes()`, `inner()`, `outer()`, `cross()`, `kron()`,
    and `lexsort()`.
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在在几个`jax.numpy`的API中（包括`apply_along_axis()`、`apply_over_axes()`、`inner()`、`outer()`、`cross()`、`kron()`和`lexsort()`），需要使用类似数组的参数。
- en: Bug fixes
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bug修复
- en: '`jax.numpy.astype()` will now always return a copy when `copy=True`. Previously,
    no copy would be made when the output array would have the same dtype as the input
    array. This may result in some increased memory usage. The default value is set
    to `copy=False` to preserve backwards compatibility.'
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当`copy=True`时，`jax.numpy.astype()`现在总是返回一个副本。之前当输出数组的dtype与输入数组相同时，不会进行复制。这可能会导致一些内存使用增加。默认值设置为`copy=False`以保持向后兼容性。
- en: jaxlib 0.4.27 (May 7, 2024)
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.4.27 (2024年5月7日)
- en: jax 0.4.26 (April 3, 2024)
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.4.26 (2024年4月3日)
- en: New Functionality
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新功能
- en: Added `jax.numpy.trapezoid()`, following the addition of this function in NumPy
    2.0.
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了`jax.numpy.trapezoid()`，跟随NumPy 2.0中此函数的添加。
- en: Changes
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变更
- en: Complex-valued `jax.numpy.geomspace()` now chooses the logarithmic spiral branch
    consistent with that of NumPy 2.0.
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复数值`jax.numpy.geomspace()`现在选择与NumPy 2.0一致的对数螺旋分支。
- en: The behavior of `lax.rng_bit_generator`, and in turn the `'rbg'` and `'unsafe_rbg'`
    PRNG implementations, under `jax.vmap` [has changed](https://github.com/google/jax/issues/19085)
    so that mapping over keys results in random generation only from the first key
    in the batch.
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`jax.vmap`下，`lax.rng_bit_generator`的行为，以及`'rbg'`和`'unsafe_rbg'`的PRNG实现，已发生变化，使得在密钥上进行映射只会从批处理中的第一个密钥生成随机数。
- en: Docs now use `jax.random.key` for construction of PRNG key arrays rather than
    `jax.random.PRNGKey`.
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文档现在使用`jax.random.key`构造PRNG密钥数组，而不是`jax.random.PRNGKey`。
- en: Deprecations & Removals
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弃用和移除
- en: '`jax.tree_map()` is deprecated; use `jax.tree.map` instead, or for backward
    compatibility with older JAX versions, use `jax.tree_util.tree_map()`.'
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.tree_map()`已弃用；请改用`jax.tree.map`，或者为了与旧版JAX向后兼容性，请使用`jax.tree_util.tree_map()`。'
- en: '`jax.clear_backends()` is deprecated as it does not necessarily do what its
    name suggests and can lead to unexpected consequences, e.g., it will not destroy
    existing backends and release corresponding owned resources. Use `jax.clear_caches()`
    if you only want to clean up compilation caches. For backward compatibility or
    you really need to switch/reinitialize the default backend, use `jax.extend.backend.clear_backends()`.'
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.clear_backends()`因其名字不确保做其名义暗示的操作，可能导致意外后果而被弃用，例如，它不会销毁现有的后端或释放相应的资源。如果只想清理编译缓存，请使用`jax.clear_caches()`。为了向后兼容性或者确实需要切换/重新初始化默认后端，请使用`jax.extend.backend.clear_backends()`。'
- en: The `jax.experimental.maps` module and `jax.experimental.maps.xmap` are deprecated.
    Use `jax.experimental.shard_map` or `jax.vmap` with the `spmd_axis_name` argument
    for expressing SPMD device-parallel computations.
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 废弃了 `jax.experimental.maps` 模块和 `jax.experimental.maps.xmap`。请使用 `jax.experimental.shard_map`
    或在表达 SPMD 设备并行计算时使用带有 `spmd_axis_name` 参数的 `jax.vmap`。
- en: The `jax.experimental.host_callback` module is deprecated. Use instead the [new
    JAX external callbacks](https://jax.readthedocs.io/en/latest/notebooks/external_callbacks.html).
    Added `JAX_HOST_CALLBACK_LEGACY` flag to assist in the transition to the new callbacks.
    See [#20385](https://github.com/google/jax/issues/20385) for a discussion.
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 废弃了 `jax.experimental.host_callback` 模块。请改用[新的 JAX 外部回调](https://jax.readthedocs.io/en/latest/notebooks/external_callbacks.html)。添加了
    `JAX_HOST_CALLBACK_LEGACY` 标志以帮助过渡到新的回调。参见 [#20385](https://github.com/google/jax/issues/20385)
    进行讨论。
- en: Passing arguments to `jax.numpy.array_equal()` and `jax.numpy.array_equiv()`
    that cannot be converted to a JAX array now results in an exception.
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将无法转换为 JAX 数组的参数传递给 `jax.numpy.array_equal()` 和 `jax.numpy.array_equiv()` 现在会导致异常。
- en: The deprecated flag `jax_parallel_functions_output_gda` has been removed. This
    flag was long deprecated and did nothing; its use was a no-op.
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除了废弃标志 `jax_parallel_functions_output_gda`。该标志早已废弃且无效；其使用对操作无影响。
- en: The previously-deprecated imports `jax.interpreters.ad.config` and `jax.interpreters.ad.source_info_util`
    have now been removed. Use `jax.config` and `jax.extend.source_info_util` instead.
  id: totrans-108
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 先前弃用的导入 `jax.interpreters.ad.config` 和 `jax.interpreters.ad.source_info_util`
    现已移除。请改用 `jax.config` 和 `jax.extend.source_info_util`。
- en: JAX export does not support older serialization versions anymore. Version 9
    has been supported since October 27th, 2023 and has become the default since February
    1, 2024. See [a description of the versions](https://github.com/google/jax/blob/main/jax/experimental/jax2tf/README.md#native-serialization-versions).
    This change could break clients that set a specific JAX serialization version
    lower than 9.
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: JAX 导出不再支持旧的序列化版本。自 2023 年 10 月 27 日起支持版本 9，并自 2024 年 2 月 1 日起成为默认版本。详见[版本描述](https://github.com/google/jax/blob/main/jax/experimental/jax2tf/README.md#native-serialization-versions)。此更改可能会影响将
    JAX 序列化版本设置为低于 9 的客户端。
- en: jaxlib 0.4.26 (April 3, 2024)
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.4.26（2024 年 4 月 3 日）
- en: Changes
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改
- en: JAX now supports CUDA 12.1 or newer only. Support for CUDA 11.8 has been dropped.
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: JAX 现在仅支持 CUDA 12.1 或更新版本。不再支持 CUDA 11.8。
- en: JAX now supports NumPy 2.0.
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: JAX 现在支持 NumPy 2.0。
- en: jax 0.4.25 (Feb 26, 2024)
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.4.25（2024 年 2 月 26 日）
- en: New Features
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新功能
- en: Added [CUDA Array Interface](https://numba.readthedocs.io/en/stable/cuda/cuda_array_interface.html)
    import support (requires jaxlib 0.4.24).
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增加了对 [CUDA 数组接口](https://numba.readthedocs.io/en/stable/cuda/cuda_array_interface.html)
    的导入支持（需要 jaxlib 0.4.24）。
- en: JAX arrays now support NumPy-style scalar boolean indexing, e.g. `x[True]` or
    `x[False]`.
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: JAX 数组现在支持 NumPy 风格的标量布尔索引，例如 `x[True]` 或 `x[False]`。
- en: Added `jax.tree` module, with a more convenient interface for referencing functions
    in `jax.tree_util`.
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新增了 `jax.tree` 模块，提供了更便捷的接口来引用 `jax.tree_util` 中的函数。
- en: '`jax.tree.transpose()` (i.e. `jax.tree_util.tree_transpose()`) now accepts
    `inner_treedef=None`, in which case the inner treedef will be automatically inferred.'
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.tree.transpose()`（即 `jax.tree_util.tree_transpose()`）现在接受 `inner_treedef=None`，在这种情况下，内部
    treedef 将自动推断。'
- en: Changes
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改
- en: Pallas now uses XLA instead of the Triton Python APIs to compile Triton kernels.
    You can revert to the old behavior by setting the `JAX_TRITON_COMPILE_VIA_XLA`
    environment variable to `"0"`.
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pallas 现在使用 XLA 而不是 Triton Python API 来编译 Triton 内核。您可以通过将 `JAX_TRITON_COMPILE_VIA_XLA`
    环境变量设置为 `"0"` 来恢复到旧行为。
- en: Several deprecated APIs in `jax.interpreters.xla` that were removed in v0.4.24
    have been re-added in v0.4.25, including `backend_specific_translations`, `translations`,
    `register_translation`, `xla_destructure`, `TranslationRule`, `TranslationContext`,
    and `XLAOp`. These are still considered deprecated, and will be removed again
    in the future when better replacements are available. Refer to [#19816](https://github.com/google/jax/issues/19816)
    for discussion.
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.interpreters.xla` 中几个在 v0.4.24 中移除的废弃 API 在 v0.4.25 中重新添加，包括 `backend_specific_translations`、`translations`、`register_translation`、`xla_destructure`、`TranslationRule`、`TranslationContext`
    和 `XLAOp`。这些仍被视为废弃，将来会在更好的替代品可用时再次移除。参见 [#19816](https://github.com/google/jax/issues/19816)
    进行讨论。'
- en: Deprecations & Removals
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 废弃与移除
- en: '`jax.numpy.linalg.solve()` now shows a deprecation warning for batched 1D solves
    with `b.ndim > 1`. In the future these will be treated as batched 2D solves.'
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.numpy.linalg.solve()` 现在对于批处理的 1D 解法（`b.ndim > 1`）显示废弃警告。将来将将这些视为批处理的
    2D 解法。'
- en: Conversion of a non-scalar array to a Python scalar now raises an error, regardless
    of the size of the array. Previously a deprecation warning was raised in the case
    of non-scalar arrays of size 1\. This follows a similar deprecation in NumPy.
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将非标量数组转换为Python标量现在会引发错误，无论数组的大小如何。在非标量大小为1的数组的情况下，之前会引发弃用警告。这与NumPy中的类似弃用相似。
- en: The previously deprecated configuration APIs have been removed following a standard
    3 months deprecation cycle (see API compatibility). These include
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 先前弃用的配置API已经根据标准的3个月弃用周期被移除（请参见API兼容性）。这些包括
- en: the `jax.config.config` object and
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.config.config`对象和'
- en: the `define_*_state` and `DEFINE_*` methods of `jax.config`.
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.config`的`define_*_state`和`DEFINE_*`方法。'
- en: Importing the `jax.config` submodule via `import jax.config` is deprecated.
    To configure JAX use `import jax` and then reference the config object via `jax.config`.
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过`import jax.config`导入`jax.config`子模块已经被弃用。配置JAX请使用`import jax`，然后通过`jax.config`引用配置对象。
- en: The minimum jaxlib version is now 0.4.20.
  id: totrans-130
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最低的jaxlib版本现在是0.4.20。
- en: jaxlib 0.4.25 (Feb 26, 2024)
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.4.25（2024年2月26日）
- en: jax 0.4.24 (Feb 6, 2024)
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.4.24（2024年2月6日）
- en: Changes
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变更
- en: JAX lowering to StableHLO does not depend on physical devices anymore. If your
    primitive wraps custom_partitioning or JAX callbacks in the lowering rule i.e.
    function passed to `rule` parameter of `mlir.register_lowering` then add your
    primitive to `jax._src.dispatch.prim_requires_devices_during_lowering` set. This
    is needed because custom_partitioning and JAX callbacks need physical devices
    to create `Sharding`s during lowering. This is a temporary state until we can
    create `Sharding`s without physical devices.
  id: totrans-134
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: JAX降级到StableHLO不再依赖于物理设备。如果您的原语在降级规则中使用`custom_partitioning`或JAX回调，即传递给`mlir.register_lowering`的`rule`参数的函数，则将原语添加到`jax._src.dispatch.prim_requires_devices_during_lowering`集合中。这是因为`custom_partitioning`和JAX回调需要物理设备在降级过程中创建`Sharding`。这是一个临时状态，直到我们可以在没有物理设备的情况下创建`Sharding`。
- en: '`jax.numpy.argsort()` and `jax.numpy.sort()` now support the `stable` and `descending`
    arguments.'
  id: totrans-135
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.numpy.argsort()`和`jax.numpy.sort()`现在支持`stable`和`descending`参数。'
- en: 'Several changes to the handling of shape polymorphism (used in `jax.experimental.jax2tf`
    and `jax.experimental.export`):'
  id: totrans-136
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对形状多态性处理的若干更改（用于`jax.experimental.jax2tf`和`jax.experimental.export`中）：
- en: cleaner pretty-printing of symbolic expressions ([#19227](https://github.com/google/jax/issues/19227))
  id: totrans-137
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更清晰地打印符号表达式（[#19227](https://github.com/google/jax/issues/19227)）
- en: added the ability to specify symbolic constraints on the dimension variables.
    This makes shape polymorphism more expressive, and gives a way to workaround limitations
    in the reasoning about inequalities. See https://github.com/google/jax/blob/main/jax/experimental/jax2tf/README.md#user-specified-symbolic-constraints.
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增加了在维度变量上指定符号约束的功能。这使得形状多态性更加表达，并且提供了一个方法来解决不等式推理中的限制。参见https://github.com/google/jax/blob/main/jax/experimental/jax2tf/README.md#user-specified-symbolic-constraints。
- en: with the addition of symbolic constraints ([#19235](https://github.com/google/jax/issues/19235))
    we now consider dimension variables from different scopes to be different, even
    if they have the same name. Symbolic expressions from different scopes cannot
    interact, e.g., in arithmetic operations. Scopes are introduced by `jax.experimental.jax2tf.convert()`,
    `jax.experimental.export.symbolic_shape()`, `jax.experimental.export.symbolic_args_specs()`.
    The scope of a symbolic expression `e` can be read with `e.scope` and passed into
    the above functions to direct them to construct symbolic expressions in a given
    scope. See https://github.com/google/jax/blob/main/jax/experimental/jax2tf/README.md#user-specified-symbolic-constraints.
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随着符号约束的增加（[#19235](https://github.com/google/jax/issues/19235)），我们现在认为来自不同作用域的维度变量是不同的，即使它们具有相同的名称。来自不同作用域的符号表达式不能相互作用，例如，在算术操作中。作用域由`jax.experimental.jax2tf.convert()`，`jax.experimental.export.symbolic_shape()`，`jax.experimental.export.symbolic_args_specs()`引入。符号表达式`e`的作用域可以通过`e.scope`读取，并传递给上述函数以指导它们在给定作用域中构建符号表达式。请参阅https://github.com/google/jax/blob/main/jax/experimental/jax2tf/README.md#user-specified-symbolic-constraints。
- en: simplified and faster equality comparisons, where we consider two symbolic dimensions
    to be equal if the normalized form of their difference reduces to 0 ([#19231](https://github.com/google/jax/issues/19231);
    note that this may result in user-visible behavior changes)
  id: totrans-140
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简化和加快等式比较，如果它们的差异的标准化形式减少为0，则认为两个符号维度相等（[#19231](https://github.com/google/jax/issues/19231)；请注意，这可能导致用户可见的行为变化）
- en: improved the error messages for inconclusive inequality comparisons ([#19235](https://github.com/google/jax/issues/19235)).
  id: totrans-141
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改进了不确定的不等式比较的错误消息 ([#19235](https://github.com/google/jax/issues/19235))。
- en: the `core.non_negative_dim` API (introduced recently) was deprecated and `core.max_dim`
    and `core.min_dim` were introduced ([#18953](https://github.com/google/jax/issues/18953))
    to express `max` and `min` for symbolic dimensions. You can use `core.max_dim(d,
    0)` instead of `core.non_negative_dim(d)`.
  id: totrans-142
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`core.non_negative_dim` API（最近引入）已弃用，引入了 `core.max_dim` 和 `core.min_dim` ([#18953](https://github.com/google/jax/issues/18953))
    用于表示符号维度的 `max` 和 `min`。您可以使用 `core.max_dim(d, 0)` 代替 `core.non_negative_dim(d)`。'
- en: the `shape_poly.is_poly_dim` is deprecated in favor of `export.is_symbolic_dim`
    ([#19282](https://github.com/google/jax/issues/19282)).
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`shape_poly.is_poly_dim` 已弃用，改为使用 `export.is_symbolic_dim` ([#19282](https://github.com/google/jax/issues/19282))。'
- en: the `export.args_specs` is deprecated in favor of `export.symbolic_args_specs
    ({jax-issue}`#19283`).
  id: totrans-144
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`export.args_specs` 已弃用，应使用 `export.symbolic_args_specs ({jax-issue}`#19283`)`。'
- en: the `shape_poly.PolyShape` and `jax2tf.PolyShape` are deprecated, use strings
    for polymorphic shapes specifications ([#19284](https://github.com/google/jax/issues/19284)).
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`shape_poly.PolyShape` 和 `jax2tf.PolyShape` 已弃用，应使用字符串来指定多态形状 ([#19284](https://github.com/google/jax/issues/19284))。'
- en: JAX default native serialization version is now 9\. This is relevant for `jax.experimental.jax2tf`
    and `jax.experimental.export`. See [description of version numbers](https://github.com/google/jax/blob/main/jax/experimental/jax2tf/README.md#native-serialization-versions).
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: JAX 默认的本地序列化版本现在是 9。这对 `jax.experimental.jax2tf` 和 `jax.experimental.export`
    非常重要。请参阅 [版本号说明](https://github.com/google/jax/blob/main/jax/experimental/jax2tf/README.md#native-serialization-versions)。
- en: Refactored the API for `jax.experimental.export`. Instead of `from jax.experimental.export
    import export` you should use now `from jax.experimental import export`. The old
    way of importing will continue to work for a deprecation period of 3 months.
  id: totrans-147
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重构了 `jax.experimental.export` 的 API。现在应使用 `from jax.experimental import export`
    而不是 `from jax.experimental.export import export`。旧的导入方式将在 3 个月的弃用期后停止支持。
- en: Added `jax.scipy.stats.sem()`.
  id: totrans-148
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了 `jax.scipy.stats.sem()`。
- en: '`jax.numpy.unique()` with `return_inverse = True` returns inverse indices reshaped
    to the dimension of the input, following a similar change to [`numpy.unique()`](https://numpy.org/doc/stable/reference/generated/numpy.unique.html#numpy.unique
    "(in NumPy v2.0)") in NumPy 2.0.'
  id: totrans-149
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有 `return_inverse = True` 的 `jax.numpy.unique()` 返回重塑为输入维度的反向索引，遵循 NumPy 2.0
    中类似的更改 [`numpy.unique()`](https://numpy.org/doc/stable/reference/generated/numpy.unique.html#numpy.unique
    "(in NumPy v2.0)")。
- en: '`jax.numpy.sign()` now returns `x / abs(x)` for nonzero complex inputs. This
    is consistent with the behavior of `numpy.sign()` in NumPy version 2.0.'
  id: totrans-150
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.numpy.sign()` 现在对非零复数输入返回 `x / abs(x)`。这与 NumPy 2.0 版本中 `numpy.sign()`
    的行为一致。'
- en: '`jax.scipy.special.logsumexp()` with `return_sign=True` now uses the NumPy
    2.0 convention for the complex sign, `x / abs(x)`. This is consistent with the
    behavior of [`scipy.special.logsumexp()`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.logsumexp.html#scipy.special.logsumexp
    "(in SciPy v1.13.1)") in SciPy v1.13.'
  id: totrans-151
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有 `return_sign=True` 的 `jax.scipy.special.logsumexp()` 现在使用 NumPy 2.0 中的复数符号约定
    `x / abs(x)`。这与 SciPy v1.13 中的 [`scipy.special.logsumexp()`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.logsumexp.html#scipy.special.logsumexp
    "(in SciPy v1.13.1)") 的行为一致。
- en: JAX now supports the bool DLPack type for both import and export. Previously
    bool values could not be imported and were exported as integers.
  id: totrans-152
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: JAX 现在支持布尔型 DLPack 类型的导入和导出。之前布尔值无法导入，并且以整数形式导出。
- en: Deprecations & Removals
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弃用和移除：
- en: 'A number of previously deprecated functions have been removed, following a
    standard 3+ month deprecation cycle (see API compatibility). This includes:'
  id: totrans-154
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除了许多先前弃用的函数，遵循标准的 3+ 个月弃用周期（请参阅 API 兼容性）。
- en: 'From `jax.core`: `TracerArrayConversionError`, `TracerIntegerConversionError`,
    `UnexpectedTracerError`, `as_hashable_function`, `collections`, `dtypes`, `lu`,
    `map`, `namedtuple`, `partial`, `pp`, `ref`, `safe_zip`, `safe_map`, `source_info_util`,
    `total_ordering`, `traceback_util`, `tuple_delete`, `tuple_insert`, and `zip`.'
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 `jax.core` 中移除：`TracerArrayConversionError`、`TracerIntegerConversionError`、`UnexpectedTracerError`、`as_hashable_function`、`collections`、`dtypes`、`lu`、`map`、`namedtuple`、`partial`、`pp`、`ref`、`safe_zip`、`safe_map`、`source_info_util`、`total_ordering`、`traceback_util`、`tuple_delete`、`tuple_insert`
    和 `zip`。
- en: 'From `jax.lax`: `dtypes`, `itertools`, `naryop`, `naryop_dtype_rule`, `standard_abstract_eval`,
    `standard_naryop`, `standard_primitive`, `standard_unop`, `unop`, and `unop_dtype_rule`.'
  id: totrans-156
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 `jax.lax` 中移除：`dtypes`、`itertools`、`naryop`、`naryop_dtype_rule`、`standard_abstract_eval`、`standard_naryop`、`standard_primitive`、`standard_unop`、`unop`
    和 `unop_dtype_rule`。
- en: The `jax.linear_util` submodule and all its contents.
  id: totrans-157
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.linear_util` 子模块及其所有内容。'
- en: The `jax.prng` submodule and all its contents.
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.prng` 子模块及其所有内容。'
- en: 'From `jax.random`: `PRNGKeyArray`, `KeyArray`, `default_prng_impl`, `threefry_2x32`,
    `threefry2x32_key`, `threefry2x32_p`, `rbg_key`, and `unsafe_rbg_key`.'
  id: totrans-159
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自 `jax.random`：`PRNGKeyArray`、`KeyArray`、`default_prng_impl`、`threefry_2x32`、`threefry2x32_key`、`threefry2x32_p`、`rbg_key`
    和 `unsafe_rbg_key`。
- en: 'From `jax.tree_util`: `register_keypaths`, `AttributeKeyPathEntry`, and `GetItemKeyPathEntry`.'
  id: totrans-160
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自 `jax.tree_util`：`register_keypaths`、`AttributeKeyPathEntry` 和 `GetItemKeyPathEntry`。
- en: 'from `jax.interpreters.xla`: `backend_specific_translations`, `translations`,
    `register_translation`, `xla_destructure`, `TranslationRule`, `TranslationContext`,
    `axis_groups`, `ShapedArray`, `ConcreteArray`, `AxisEnv`, `backend_compile`, and
    `XLAOp`.'
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自 `jax.interpreters.xla`：`backend_specific_translations`、`translations`、`register_translation`、`xla_destructure`、`TranslationRule`、`TranslationContext`、`axis_groups`、`ShapedArray`、`ConcreteArray`、`AxisEnv`、`backend_compile`
    和 `XLAOp`。
- en: 'from `jax.numpy`: `NINF`, `NZERO`, `PZERO`, `row_stack`, `issubsctype`, `trapz`,
    and `in1d`.'
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自 `jax.numpy`：`NINF`、`NZERO`、`PZERO`、`row_stack`、`issubsctype`、`trapz` 和 `in1d`。
- en: 'from `jax.scipy.linalg`: `tril` and `triu`.'
  id: totrans-163
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自 `jax.scipy.linalg`：`tril` 和 `triu`。
- en: The previously-deprecated method `PRNGKeyArray.unsafe_raw_array` has been removed.
    Use `jax.random.key_data()` instead.
  id: totrans-164
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已弃用的方法 `PRNGKeyArray.unsafe_raw_array` 已被移除。请使用 `jax.random.key_data()` 替代。
- en: '`bool(empty_array)` now raises an error rather than returning `False`. This
    previously raised a deprecation warning, and follows a similar change in NumPy.'
  id: totrans-165
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bool(empty_array)` 现在引发错误，而不是返回 `False`。这之前会引发弃用警告，并遵循NumPy中类似的更改。'
- en: Support for the mhlo MLIR dialect has been deprecated. JAX no longer uses the
    mhlo dialect, in favor of stablehlo. APIs that refer to “mhlo” will be removed
    in the future. Use the “stablehlo” dialect instead.
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弃用了对mhlo MLIR方言的支持。JAX不再使用mhlo方言，而是改用stablehlo。将来将删除指称“mhlo”的API。请改用“stablehlo”方言。
- en: '`jax.random`: passing batched keys directly to random number generation functions,
    such as `bits()`, `gamma()`, and others, is deprecated and will emit a `FutureWarning`.
    Use `jax.vmap` for explicit batching.'
  id: totrans-167
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.random`：直接将批处理密钥传递给随机数生成函数（如 `bits()`、`gamma()` 等）已弃用，并将发出 `FutureWarning`。请使用
    `jax.vmap` 进行显式批处理。'
- en: '`jax.lax.tie_in()` is deprecated: it has been a no-op since JAX v0.2.0.'
  id: totrans-168
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弃用了 `jax.lax.tie_in()`：自JAX v0.2.0以来已成为无操作。
- en: jaxlib 0.4.24 (Feb 6, 2024)
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.4.24（2024年2月6日）
- en: Changes
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变更
- en: JAX now supports CUDA 12.3 and CUDA 11.8\. Support for CUDA 12.2 has been dropped.
  id: totrans-171
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: JAX 现在支持 CUDA 12.3 和 CUDA 11.8。不再支持 CUDA 12.2。
- en: '`cost_analysis` now works with cross-compiled `Compiled` objects (i.e. when
    using `.lower().compile()` with a topology object, e.g., to compile for Cloud
    TPU from a non-TPU computer).'
  id: totrans-172
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cost_analysis` 现在可以与交叉编译的 `Compiled` 对象一起使用（例如，在非 TPU 计算机上使用 `.lower().compile()`
    编译为云TPU时使用拓扑对象）。'
- en: Added [CUDA Array Interface](https://numba.readthedocs.io/en/stable/cuda/cuda_array_interface.html)
    import support (requires jax 0.4.25).
  id: totrans-173
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了[CUDA数组接口](https://numba.readthedocs.io/en/stable/cuda/cuda_array_interface.html)导入支持（需要
    jax 0.4.25）。
- en: jax 0.4.23 (Dec 13, 2023)
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.4.23（2023年12月13日）
- en: jaxlib 0.4.23 (Dec 13, 2023)
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.4.23（2023年12月13日）
- en: Fixed a bug that caused verbose logging from the GPU compiler during compilation.
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复了导致GPU编译器在编译期间产生冗长日志的错误。
- en: jax 0.4.22 (Dec 13, 2023)
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.4.22（2023年12月13日）
- en: Deprecations
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弃用内容
- en: 'The `device_buffer` and `device_buffers` properties of JAX arrays are deprecated.
    Explicit buffers have been replaced by the more flexible array sharding interface,
    but the previous outputs can be recovered this way:'
  id: totrans-179
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: JAX数组的 `device_buffer` 和 `device_buffers` 属性已弃用。显式缓冲区已被更灵活的数组分片接口取代，但以前的输出可以通过以下方式恢复：
- en: '`arr.device_buffer` becomes `arr.addressable_data(0)`'
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`arr.device_buffer` 变为 `arr.addressable_data(0)`'
- en: '`arr.device_buffers` becomes `[x.data for x in arr.addressable_shards]`'
  id: totrans-181
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`arr.device_buffers` 变为 `[x.data for x in arr.addressable_shards]`'
- en: jaxlib 0.4.22 (Dec 13, 2023)
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.4.22（2023年12月13日）
- en: jax 0.4.21 (Dec 4 2023)
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.4.21（2023年12月4日）
- en: New Features
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新特性
- en: Added `jax.nn.squareplus`.
  id: totrans-185
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了 `jax.nn.squareplus`。
- en: Changes
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变更
- en: The minimum jaxlib version is now 0.4.19.
  id: totrans-187
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最低 jaxlib 版本现在为 0.4.19。
- en: Released wheels are built now with clang instead of gcc.
  id: totrans-188
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在发布的Wheels使用clang而不是gcc构建。
- en: Enforce that the device backend has not been initialized prior to calling `jax.distributed.initialize()`.
  id: totrans-189
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在调用 `jax.distributed.initialize()` 之前，强制确保设备后端未初始化。
- en: Automate arguments to `jax.distributed.initialize()` in cloud TPU environments.
  id: totrans-190
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在云TPU环境中自动化 `jax.distributed.initialize()` 的参数。
- en: Deprecations
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弃用内容
- en: The previously-deprecated `sym_pos` argument has been removed from `jax.scipy.linalg.solve()`.
    Use `assume_a='pos'` instead.
  id: totrans-192
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 `jax.scipy.linalg.solve()` 中删除了先前弃用的 `sym_pos` 参数。请改用 `assume_a='pos'`。
- en: Passing `None` to `jax.array()` or `jax.asarray()`, either directly or within
    a list or tuple, is deprecated and now raises a [`FutureWarning`](https://docs.python.org/3/library/exceptions.html#FutureWarning
    "(in Python v3.12)"). It currently is converted to NaN, and in the future will
    raise a [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError
    "(in Python v3.12)").
  id: totrans-193
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `None` 传递给 `jax.array()` 或 `jax.asarray()`，无论是直接传递还是在列表或元组中传递，已被弃用并现在引发 [`FutureWarning`](https://docs.python.org/3/library/exceptions.html#FutureWarning
    "(在 Python v3.12) ")。当前转换为 NaN，在将来将引发 [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError
    "(在 Python v3.12)")。
- en: Passing the `condition`, `x`, and `y` parameters to `jax.numpy.where` by keyword
    arguments has been deprecated, to match `numpy.where`.
  id: totrans-194
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过关键字参数传递 `condition`、`x` 和 `y` 参数给 `jax.numpy.where` 已被弃用，以匹配 `numpy.where`。
- en: Passing arguments to `jax.numpy.array_equal()` and `jax.numpy.array_equiv()`
    that cannot be converted to a JAX array is deprecated and now raises a `DeprecationWaning`.
    Currently the functions return False, in the future this will raise an exception.
  id: totrans-195
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 传递给 `jax.numpy.array_equal()` 和 `jax.numpy.array_equiv()` 的参数如果不能转换为 JAX 数组，则已被弃用并现在引发
    `DeprecationWaning`。当前函数返回 False，在将来将引发异常。
- en: 'The `device()` method of JAX arrays is deprecated. Depending on the context,
    it may be replaced with one of the following:'
  id: totrans-196
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: JAX 数组的 `device()` 方法已被弃用。根据上下文，可能替换为以下之一：
- en: '`jax.Array.devices()` returns the set of all devices used by the array.'
  id: totrans-197
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.Array.devices()` 返回数组使用的所有设备集。'
- en: '`jax.Array.sharding` gives the sharding configuration used by the array.'
  id: totrans-198
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.Array.sharding` 给出了数组使用的分片配置。'
- en: jaxlib 0.4.21 (Dec 4 2023)
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.4.21 (2023年12月4日)
- en: Changes
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变更
- en: 'In preparation for adding distributed CPU support, JAX now treats CPU devices
    identically to GPU and TPU devices, that is:'
  id: totrans-201
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了添加分布式 CPU 支持的准备工作，JAX 现在将 CPU 设备与 GPU 和 TPU 设备相同对待，即：
- en: '`jax.devices()` includes all devices present in a distributed job, even those
    not local to the current process. `jax.local_devices()` still only includes devices
    local to the current process, so if the change to `jax.devices()` breaks you,
    you most likely want to use `jax.local_devices()` instead.'
  id: totrans-202
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.devices()` 包括分布式作业中所有设备，即使这些设备不在当前进程中也包括在内。`jax.local_devices()` 仍然只包括当前进程中的设备，因此如果对
    `jax.devices()` 的更改影响到您，您可能更希望使用 `jax.local_devices()`。'
- en: CPU devices now receive a globally unique ID number within a distributed job;
    previously CPU devices would receive a process-local ID number.
  id: totrans-203
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: CPU 设备现在在分布式作业中接收全局唯一的 ID 号码；以前 CPU 设备将接收进程本地的 ID 号码。
- en: The `process_index` of each CPU device will now match any GPU or TPU devices
    within the same process; previously the `process_index` of a CPU device was always
    0.
  id: totrans-204
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个 CPU 设备的 `process_index` 现在将与同一进程中的任何 GPU 或 TPU 设备匹配；以前 CPU 设备的 `process_index`
    总是 0。
- en: On NVIDIA GPU, JAX now prefers a Jacobi SVD solver for matrices up to 1024x1024\.
    The Jacobi solver appears faster than the non-Jacobi version.
  id: totrans-205
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 NVIDIA GPU 上，JAX 现在优先选择 Jacobi SVD 求解器用于大小不超过 1024x1024 的矩阵。与非 Jacobi 版本相比，Jacobi
    求解器似乎更快。
- en: Bug fixes
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bug 修复
- en: Fixed error/hang when an array with non-finite values is passed to a non-symmetric
    eigendecomposition (#18226). Arrays with non-finite values now produce arrays
    full of NaNs as outputs.
  id: totrans-207
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当传递具有非有限值的数组给非对称特征分解时发生错误/挂起（#18226）。现在，具有非有限值的数组将产生由 NaN 组成的输出数组。
- en: jax 0.4.20 (Nov 2, 2023)
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.4.20 (2023年11月2日)
- en: jaxlib 0.4.20 (Nov 2, 2023)
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.4.20 (2023年11月2日)
- en: Bug fixes
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bug 修复
- en: Fixed some type confusion between E4M3 and E5M2 float8 types.
  id: totrans-211
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复了 E4M3 和 E5M2 float8 类型之间的一些类型混淆。
- en: jax 0.4.19 (Oct 19, 2023)
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.4.19 (2023年10月19日)
- en: New Features
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新功能
- en: Added `jax.typing.DTypeLike`, which can be used to annotate objects that are
    convertible to JAX dtypes.
  id: totrans-214
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了 `jax.typing.DTypeLike`，可用于注释可转换为 JAX 数据类型的对象。
- en: Added `jax.numpy.fill_diagonal`.
  id: totrans-215
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了 `jax.numpy.fill_diagonal`。
- en: Changes
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变更
- en: JAX now requires SciPy 1.9 or newer.
  id: totrans-217
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在 JAX 要求 SciPy 1.9 或更新版本。
- en: Bug fixes
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bug 修复
- en: Only process 0 in a multicontroller distributed JAX program will write persistent
    compilation cache entries. This fixes write contention if the cache is placed
    on a network file system such as GCS.
  id: totrans-219
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在多控制器分布式 JAX 程序中，只有进程 0 将写入持久编译缓存条目。如果缓存放置在网络文件系统（如 GCS）上，则修复了写入争用问题。
- en: The version check for cusolver and cufft no longer considers the patch versions
    when determining if the installed version of these libraries is at least as new
    as the versions against which JAX was built.
  id: totrans-220
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当决定已安装的 cusolver 和 cufft 版本是否至少与 JAX 构建的版本一样新时，版本检查现在不再考虑补丁版本。
- en: jaxlib 0.4.19 (Oct 19, 2023)
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.4.19 (2023年10月19日)
- en: Changes
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变更
- en: jaxlib will now always prefer pip-installed NVIDIA CUDA libraries (nvidia-…
    packages) over any other CUDA installation if they are installed, including installations
    named in `LD_LIBRARY_PATH`. If this causes problems and the intent is to use a
    system-installed CUDA, the fix is to remove the pip installed CUDA library packages.
  id: totrans-223
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: jaxlib 现在始终优先使用通过 pip 安装的 NVIDIA CUDA 库（nvidia-... packages），而不管 `LD_LIBRARY_PATH`
    中命名的其他 CUDA 安装。如果因此导致问题且意图是使用系统安装的 CUDA，则解决方法是移除 pip 安装的 CUDA 库包。
- en: jax 0.4.18 (Oct 6, 2023)
  id: totrans-224
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.4.18（2023年10月6日）
- en: jaxlib 0.4.18 (Oct 6, 2023)
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.4.18（2023年10月6日）
- en: Changes
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变更：
- en: CUDA jaxlibs now depend on the user to install a compatible NCCL version. If
    using the recommended `cuda12_pip` installation, NCCL should be installed automatically.
    Currently, NCCL 2.16 or newer is required.
  id: totrans-227
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: CUDA jaxlibs 现在依赖于用户安装兼容的 NCCL 版本。如果使用推荐的 `cuda12_pip` 安装，NCCL 应会自动安装。目前需要 NCCL
    2.16 或更新版本。
- en: We now provide Linux aarch64 wheels, both with and without NVIDIA GPU support.
  id: totrans-228
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在我们提供 Linux aarch64 wheels，包括带有和不带有 NVIDIA GPU 支持的版本。
- en: '`jax.Array.item()` now supports optional index arguments.'
  id: totrans-229
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.Array.item()` 现在支持可选的索引参数。'
- en: Deprecations
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弃用：
- en: A number of internal utilities and inadvertent exports in `jax.lax` have been
    deprecated, and will be removed in a future release.
  id: totrans-231
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些`jax.lax`中的内部实用程序和无意导出已被弃用，并将在将来的版本中移除。
- en: '`jax.lax.dtypes`: use `jax.dtypes` instead.'
  id: totrans-232
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.lax.dtypes`: 使用 `jax.dtypes` 替代。'
- en: '`jax.lax.itertools`: use `itertools` instead.'
  id: totrans-233
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.lax.itertools`：使用 `itertools` 替代。'
- en: '`naryop`, `naryop_dtype_rule`, `standard_abstract_eval`, `standard_naryop`,
    `standard_primitive`, `standard_unop`, `unop`, and `unop_dtype_rule` are internal
    utilities, now deprecated without replacement.'
  id: totrans-234
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`naryop`、`naryop_dtype_rule`、`standard_abstract_eval`、`standard_naryop`、`standard_primitive`、`standard_unop`、`unop`
    和 `unop_dtype_rule` 是内部实用程序，现在已弃用且没有替代。'
- en: Bug fixes
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bug修复
- en: Fixed Cloud TPU regression where compilation would OOM due to smem.
  id: totrans-236
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复了云 TPU 回归，因 smem 导致编译 OOM。
- en: jax 0.4.17 (Oct 3, 2023)
  id: totrans-237
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.4.17（2023年10月3日）
- en: New features
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新功能
- en: Added new `jax.numpy.bitwise_count()` function, matching the API of the similar
    function recently added to NumPy.
  id: totrans-239
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新增了 `jax.numpy.bitwise_count()` 函数，与最近添加到 NumPy 的类似函数的API匹配。
- en: Deprecations
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弃用：
- en: Removed the deprecated module `jax.abstract_arrays` and all its contents.
  id: totrans-241
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除了弃用的模块 `jax.abstract_arrays` 及其所有内容。
- en: 'Named key constructors in `jax.random` are deprecated. Pass the `impl` argument
    to `jax.random.PRNGKey()` or `jax.random.key()` instead:'
  id: totrans-242
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.random` 中的命名键构造函数已被弃用。改为向 `jax.random.PRNGKey()` 或 `jax.random.key()`
    传递 `impl` 参数：'
- en: '`random.threefry2x32_key(seed)` becomes `random.PRNGKey(seed, impl=''threefry2x32'')`'
  id: totrans-243
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`random.threefry2x32_key(seed)` 变为 `random.PRNGKey(seed, impl=''threefry2x32'')`'
- en: '`random.rbg_key(seed)` becomes `random.PRNGKey(seed, impl=''rbg'')`'
  id: totrans-244
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`random.rbg_key(seed)` 变为 `random.PRNGKey(seed, impl=''rbg'')`'
- en: '`random.unsafe_rbg_key(seed)` becomes `random.PRNGKey(seed, impl=''unsafe_rbg'')`'
  id: totrans-245
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`random.unsafe_rbg_key(seed)` 变为 `random.PRNGKey(seed, impl=''unsafe_rbg'')`'
- en: 'Changes:'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变更：
- en: 'CUDA: JAX now verifies that the CUDA libraries it finds are at least as new
    as the CUDA libraries that JAX was built against. If older libraries are found,
    JAX raises an exception since that is preferable to mysterious failures and crashes.'
  id: totrans-247
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: CUDA：JAX 现在会验证其找到的 CUDA 库是否至少与 JAX 构建时使用的 CUDA 库一样新。如果发现较旧的库，JAX 将引发异常，因为这比神秘的故障和崩溃更可取。
- en: Removed the “No GPU/TPU” found warning. Instead warn if, on Linux, an NVIDIA
    GPU or a Google TPU are found but not used and `--jax_platforms` was not specified.
  id: totrans-248
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除了“未找到 GPU/TPU”的警告。而是在 Linux 上，如果发现但未使用 NVIDIA GPU 或 Google TPU，并且未指定 `--jax_platforms`，则发出警告。
- en: '`jax.scipy.stats.mode()` now returns a 0 count if the mode is taken across
    a size-0 axis, matching the behavior of `scipy.stats.mode` in SciPy 1.11.'
  id: totrans-249
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.scipy.stats.mode()` 现在在跨尺寸为0的轴上取模时返回0计数，与 SciPy 1.11 中 `scipy.stats.mode`
    的行为相匹配。'
- en: Most `jax.numpy` functions and attributes now have fully-defined type stubs.
    Previously many of these were treated as `Any` by static type checkers like `mypy`
    and `pytype`.
  id: totrans-250
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大多数 `jax.numpy` 函数和属性现在都具有完全定义的类型存根。以前，这些函数中的许多被静态类型检查器（如 `mypy` 和 `pytype`）视为
    `Any`。
- en: jaxlib 0.4.17 (Oct 3, 2023)
  id: totrans-251
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.4.17（2023年10月3日）
- en: 'Changes:'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变更：
- en: Python 3.12 wheels were added in this release.
  id: totrans-253
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 3.12 wheels 已添加到此版本中。
- en: The CUDA 12 wheels now require CUDA 12.2 or newer and cuDNN 8.9.4 or newer.
  id: totrans-254
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: CUDA 12 wheels 现在需要 CUDA 12.2 或更新版本以及 cuDNN 8.9.4 或更新版本。
- en: 'Bug fixes:'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bug修复：
- en: Fixed log spam from ABSL when the JAX CPU backend was initialized.
  id: totrans-256
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复了当 JAX CPU 后端初始化时，ABSL 输出大量日志的问题。
- en: jax 0.4.16 (Sept 18, 2023)
  id: totrans-257
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.4.16（2023年9月18日）
- en: Changes
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变更：
- en: Added `jax.numpy.ufunc`, as well as `jax.numpy.frompyfunc()`, which can convert
    any scalar-valued function into a `numpy.ufunc()`-like object, with methods such
    as `outer()`, `reduce()`, `accumulate()`, `at()`, and `reduceat()` ([#17054](https://github.com/google/jax/issues/17054)).
  id: totrans-259
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了 `jax.numpy.ufunc`，以及 `jax.numpy.frompyfunc()`，它可以将任何标量值函数转换为类似于 `numpy.ufunc()`
    的对象，具有 `outer()`、`reduce()`、`accumulate()`、`at()` 和 `reduceat()` 等方法（[#17054](https://github.com/google/jax/issues/17054)）。
- en: Added `jax.scipy.integrate.trapezoid()`.
  id: totrans-260
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了 `jax.scipy.integrate.trapezoid()`。
- en: 'When not running under IPython: when an exception is raised, JAX now filters
    out the entirety of its internal frames from tracebacks. (Without the “unfiltered
    stack trace” that previously appeared.) This should produce much friendlier-looking
    tracebacks. See [here](https://github.com/google/jax/pull/16949) for an example.
    This behavior can be changed by setting `JAX_TRACEBACK_FILTERING=remove_frames`
    (for two separate unfiltered/filtered tracebacks, which was the old behavior)
    or `JAX_TRACEBACK_FILTERING=off` (for one unfiltered traceback).'
  id: totrans-261
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在非 IPython 环境下：当引发异常时，JAX 现在会从回溯中过滤掉其内部帧的整体。（之前会出现“未过滤堆栈跟踪”）。这应该会产生更友好的堆栈跟踪。详见
    [此处](https://github.com/google/jax/pull/16949) 的示例。此行为可以通过设置 `JAX_TRACEBACK_FILTERING=remove_frames`（用于两个单独的未过滤/过滤后的堆栈跟踪，即旧的行为）或
    `JAX_TRACEBACK_FILTERING=off`（用于一个未过滤的堆栈跟踪）来改变。
- en: jax2tf default serialization version is now 7, which introduces new shape [safety
    assertions](https://github.com/google/jax/blob/main/jax/experimental/jax2tf/README.md#errors-in-presence-of-shape-polymorphism).
  id: totrans-262
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: jax2tf 默认序列化版本现在是 7，引入了新的形状 [安全断言](https://github.com/google/jax/blob/main/jax/experimental/jax2tf/README.md#errors-in-presence-of-shape-polymorphism)。
- en: Devices passed to `jax.sharding.Mesh` should be hashable. This specifically
    applies to mock devices or user created devices. `jax.devices()` are already hashable.
  id: totrans-263
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 传递给 `jax.sharding.Mesh` 的设备应该是可哈希的。这特别适用于模拟设备或用户创建的设备。`jax.devices()` 已经是可哈希的。
- en: 'Breaking changes:'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 破坏性变更：
- en: jax2tf now uses native serialization by default. See the [jax2tf documentation](https://github.com/google/jax/blob/main/jax/experimental/jax2tf/README.md)
    for details and for mechanisms to override the default.
  id: totrans-265
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: jax2tf 现在默认使用本地序列化。请查阅 [jax2tf 文档](https://github.com/google/jax/blob/main/jax/experimental/jax2tf/README.md)
    获取详细信息以及覆盖默认设置的机制。
- en: The option `--jax_coordination_service` has been removed. It is now always `True`.
  id: totrans-266
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选项 `--jax_coordination_service` 已被移除。现在总是 `True`。
- en: '`jax.jaxpr_util` has been removed from the public JAX namespace.'
  id: totrans-267
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.jaxpr_util` 已从公共 JAX 命名空间中移除。'
- en: '`JAX_USE_PJRT_C_API_ON_TPU` no longer has an effect (i.e. it always defaults
    to true).'
  id: totrans-268
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`JAX_USE_PJRT_C_API_ON_TPU` 不再生效（即它总是默认为 true）。'
- en: The backwards compatibility flag `--jax_host_callback_ad_transforms` introduced
    in December 2021, has been removed.
  id: totrans-269
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自 2021 年 12 月引入的兼容性标志 `--jax_host_callback_ad_transforms` 已被移除。
- en: 'Deprecations:'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弃用：
- en: 'Several `jax.numpy` APIs have been deprecated following [NumPy NEP-52](https://numpy.org/neps/nep-0052-python-api-cleanup.html):'
  id: totrans-271
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据 [NumPy NEP-52](https://numpy.org/neps/nep-0052-python-api-cleanup.html)，几个
    `jax.numpy` API 已经被弃用：
- en: '`jax.numpy.NINF` has been deprecated. Use `-jax.numpy.inf` instead.'
  id: totrans-272
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.numpy.NINF` 已经被弃用。请改用 `-jax.numpy.inf`。'
- en: '`jax.numpy.PZERO` has been deprecated. Use `0.0` instead.'
  id: totrans-273
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.numpy.PZERO` 已经被弃用。请改用 `0.0`。'
- en: '`jax.numpy.NZERO` has been deprecated. Use `-0.0` instead.'
  id: totrans-274
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.numpy.NZERO` 已经被弃用。请改用 `-0.0`。'
- en: '`jax.numpy.issubsctype(x, t)` has been deprecated. Use `jax.numpy.issubdtype(x.dtype,
    t)`.'
  id: totrans-275
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.numpy.issubsctype(x, t)` 已经被弃用。请改用 `jax.numpy.issubdtype(x.dtype, t)`。'
- en: '`jax.numpy.row_stack` has been deprecated. Use `jax.numpy.vstack` instead.'
  id: totrans-276
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.numpy.row_stack` 已经被弃用。请改用 `jax.numpy.vstack`。'
- en: '`jax.numpy.in1d` has been deprecated. Use `jax.numpy.isin` instead.'
  id: totrans-277
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.numpy.in1d` 已经被弃用。请改用 `jax.numpy.isin`。'
- en: '`jax.numpy.trapz` has been deprecated. Use `jax.scipy.integrate.trapezoid`
    instead.'
  id: totrans-278
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.numpy.trapz` 已经被弃用。请改用 `jax.scipy.integrate.trapezoid`。'
- en: '`jax.scipy.linalg.tril` and `jax.scipy.linalg.triu` have been deprecated, following
    SciPy. Use `jax.numpy.tril` and `jax.numpy.triu` instead.'
  id: totrans-279
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.scipy.linalg.tril` 和 `jax.scipy.linalg.triu` 已经被弃用，遵循 SciPy 的做法。请改用 `jax.numpy.tril`
    和 `jax.numpy.triu`。'
- en: '`jax.lax.prod` has been removed after being deprecated in JAX v0.4.11. Use
    the built-in `math.prod` instead.'
  id: totrans-280
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.lax.prod` 已经在 JAX v0.4.11 中被移除，之前已被弃用。请改用内置的 `math.prod`。'
- en: A number of exports from `jax.interpreters.xla` related to defining HLO lowering
    rules for custom JAX primitives have been deprecated. Custom primitives should
    be defined using the StableHLO lowering utilities in `jax.interpreters.mlir` instead.
  id: totrans-281
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 `jax.interpreters.xla` 导出的一些与为自定义 JAX 原语定义 HLO 降低规则有关的内容已经被弃用。应该使用 `jax.interpreters.mlir`
    中的 StableHLO 降低实用工具来定义自定义原语。
- en: 'The following previously-deprecated functions have been removed after a three-month
    deprecation period:'
  id: totrans-282
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在经过三个月的弃用期后，以下先前弃用的函数已被移除：
- en: '`jax.abstract_arrays.ShapedArray`: use `jax.core.ShapedArray`.'
  id: totrans-283
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.abstract_arrays.ShapedArray`: 使用 `jax.core.ShapedArray`。'
- en: '`jax.abstract_arrays.raise_to_shaped`: use `jax.core.raise_to_shaped`.'
  id: totrans-284
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.abstract_arrays.raise_to_shaped`: 使用 `jax.core.raise_to_shaped`。'
- en: '`jax.numpy.alltrue`: use `jax.numpy.all`.'
  id: totrans-285
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.numpy.alltrue`: 使用 `jax.numpy.all`。'
- en: '`jax.numpy.sometrue`: use `jax.numpy.any`.'
  id: totrans-286
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.numpy.sometrue`: 使用 `jax.numpy.any`。'
- en: '`jax.numpy.product`: use `jax.numpy.prod`.'
  id: totrans-287
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.numpy.product`: 使用 `jax.numpy.prod`。'
- en: '`jax.numpy.cumproduct`: use `jax.numpy.cumprod`.'
  id: totrans-288
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.numpy.cumproduct`: 使用 `jax.numpy.cumprod`。'
- en: 'Deprecations/removals:'
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弃用/移除：
- en: The internal submodule `jax.prng` is now deprecated. Its contents are available
    at `jax.extend.random`.
  id: totrans-290
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内部子模块 `jax.prng` 现已弃用。其内容可在 `jax.extend.random` 中找到。
- en: 'The internal submodule path `jax.linear_util` has been deprecated. Use `jax.extend.linear_util`
    instead (Part of jax.extend: a module for extensions)'
  id: totrans-291
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内部子模块路径 `jax.linear_util` 已被弃用。请使用 `jax.extend.linear_util` 替代（jax.extend 的一部分：扩展模块）。
- en: '`jax.random.PRNGKeyArray` and `jax.random.KeyArray` are deprecated. Use `jax.Array`
    for type annotations, and `jax.dtypes.issubdtype(arr.dtype, jax.dtypes.prng_key)`
    for runtime detection of typed prng keys.'
  id: totrans-292
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.random.PRNGKeyArray` 和 `jax.random.KeyArray` 已弃用。请在类型注释中使用 `jax.Array`，并在运行时使用
    `jax.dtypes.issubdtype(arr.dtype, jax.dtypes.prng_key)` 来检测类型化的 PRNG 密钥。'
- en: The method `PRNGKeyArray.unsafe_raw_array` is deprecated. Use `jax.random.key_data()`
    instead.
  id: totrans-293
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方法 `PRNGKeyArray.unsafe_raw_array` 已弃用。请改用 `jax.random.key_data()`。
- en: '`jax.experimental.pjit.with_sharding_constraint` is deprecated. Use `jax.lax.with_sharding_constraint`
    instead.'
  id: totrans-294
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.experimental.pjit.with_sharding_constraint` 已弃用。请使用 `jax.lax.with_sharding_constraint`
    替代。'
- en: The internal utilities `jax.core.is_opaque_dtype` and `jax.core.has_opaque_dtype`
    have been removed. Opaque dtypes have been renamed to Extended dtypes; use `jnp.issubdtype(dtype,
    jax.dtypes.extended)` instead (available since jax v0.4.14).
  id: totrans-295
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内部工具函数 `jax.core.is_opaque_dtype` 和 `jax.core.has_opaque_dtype` 已被移除。不透明数据类型已重命名为扩展数据类型；请使用
    `jnp.issubdtype(dtype, jax.dtypes.extended)` 替代（自 jax v0.4.14 起可用）。
- en: The utility `jax.interpreters.xla.register_collective_primitive` has been removed.
    This utility did nothing useful in recent JAX releases and calls to it can be
    safely removed.
  id: totrans-296
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实用工具函数 `jax.interpreters.xla.register_collective_primitive` 已被移除。在最新的 JAX 发行版中，此实用工具无任何作用，可以安全移除其调用。
- en: 'The internal submodule path `jax.linear_util` has been deprecated. Use `jax.extend.linear_util`
    instead (Part of jax.extend: a module for extensions)'
  id: totrans-297
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内部子模块路径 `jax.linear_util` 已被弃用。请使用 `jax.extend.linear_util` 替代（jax.extend 的一部分：扩展模块）。
- en: jaxlib 0.4.16 (Sept 18, 2023)
  id: totrans-298
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.4.16（2023年9月18日）
- en: 'Changes:'
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变更：
- en: Sparse CSR matrix multiplications via the experimental jax sparse APIs no longer
    uses a deterministic algorithm on NVIDIA GPUs. This change was made to improve
    compatibility with CUDA 12.2.1.
  id: totrans-300
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 NVIDIA GPU 上，通过实验性的 jax 稀疏 API 进行的稀疏 CSR 矩阵乘法不再使用确定性算法。此更改是为了与 CUDA 12.2.1
    兼容性而进行的。
- en: 'Bug fixes:'
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bug 修复：
- en: Fixed a crash on Windows due to a fatal LLVM error related to out-of-order sections
    and IMAGE_REL_AMD64_ADDR32NB relocations (https://github.com/openxla/xla/commit/cb732a921f0c4184995cbed82394931011d12bd4).
  id: totrans-302
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复了由于关于乱序段和 IMAGE_REL_AMD64_ADDR32NB 重定位的致命 LLVM 错误而在 Windows 上崩溃的问题（https://github.com/openxla/xla/commit/cb732a921f0c4184995cbed82394931011d12bd4）。
- en: jax 0.4.14 (July 27, 2023)
  id: totrans-303
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.4.14（2023年7月27日）
- en: Changes
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变更：
- en: '`jax.jit` takes `donate_argnames` as an argument. It’s semantics are similar
    to `static_argnames`. If neither donate_argnums nor donate_argnames is provided,
    no arguments are donated. If donate_argnums is not provided but donate_argnames
    is, or vice versa, JAX uses `inspect.signature(fun)` to find any positional arguments
    that correspond to donate_argnames (or vice versa). If both donate_argnums and
    donate_argnames are provided, inspect.signature is not used, and only actual parameters
    listed in either donate_argnums or donate_argnames will be donated.'
  id: totrans-305
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.jit` 接受 `donate_argnames` 作为参数。其语义类似于 `static_argnames`。如果既不提供 `donate_argnums`
    也不提供 `donate_argnames`，则不会捐赠任何参数。如果不提供 `donate_argnums` 但提供了 `donate_argnames`，或者反之，则
    JAX 使用 `inspect.signature(fun)` 来查找与 `donate_argnames`（或其反向）相对应的任何位置参数。如果同时提供了
    `donate_argnums` 和 `donate_argnames`，则不使用 `inspect.signature`，并且只有实际参数列在 `donate_argnums`
    或 `donate_argnames` 中将被捐赠。'
- en: '`jax.random.gamma()` has been re-factored to a more efficient algorithm with
    more robust endpoint behavior ([#16779](https://github.com/google/jax/issues/16779)).
    This means that the sequence of values returned for a given `key` will change
    between JAX v0.4.13 and v0.4.14 for `gamma` and related samplers (including `jax.random.ball()`,
    `jax.random.beta()`, `jax.random.chisquare()`, `jax.random.dirichlet()`, `jax.random.generalized_normal()`,
    `jax.random.loggamma()`, `jax.random.t()`).'
  id: totrans-306
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.random.gamma()` 已重新设计为更高效的算法，具有更健壮的端点行为（[#16779](https://github.com/google/jax/issues/16779)）。这意味着给定
    `key` 的值序列在 JAX v0.4.13 和 v0.4.14 之间的 `gamma` 和相关抽样器（包括 `jax.random.ball()`、`jax.random.beta()`、`jax.random.chisquare()`、`jax.random.dirichlet()`、`jax.random.generalized_normal()`、`jax.random.loggamma()`、`jax.random.t()`）将发生变化。'
- en: Deletions
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除项：
- en: '`in_axis_resources` and `out_axis_resources` have been deleted from pjit since
    it has been more than 3 months since their deprecation. Please use `in_shardings`
    and `out_shardings` as the replacement. This is a safe and trivial name replacement.
    It does not change any of the current pjit semantics and doesn’t break any code.
    You can still pass in `PartitionSpecs` to in_shardings and out_shardings.'
  id: totrans-308
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自弃用以来已超过 3 个月的 `in_axis_resources` 和 `out_axis_resources` 已从 pjit 中删除。请使用 `in_shardings`
    和 `out_shardings` 进行替换。这是一个安全和简单的名称替换。它不会改变任何当前的 pjit 语义，也不会破坏任何代码。您仍然可以将 `PartitionSpecs`
    传递给 `in_shardings` 和 `out_shardings`。
- en: Deprecations
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弃用项：
- en: Python 3.8 support has been dropped as per https://jax.readthedocs.io/en/latest/deprecation.html
  id: totrans-310
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据 https://jax.readthedocs.io/en/latest/deprecation.html，已删除对 Python 3.8 的支持。
- en: JAX now requires NumPy 1.22 or newer as per https://jax.readthedocs.io/en/latest/deprecation.html
  id: totrans-311
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据 https://jax.readthedocs.io/en/latest/deprecation.html，JAX 现在要求 NumPy 1.22
    或更新版本。
- en: Passing optional arguments to `jax.numpy.ndarray.at()` by position is no longer
    supported, after being deprecated in JAX version 0.4.7. For example, instead of
    `x.at[i].get(True)`, use `x.at[i].get(indices_are_sorted=True)`
  id: totrans-312
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不再支持通过位置向 `jax.numpy.ndarray.at()` 传递可选参数，已在 JAX 版本 0.4.7 中被弃用。例如，不再使用 `x.at[i].get(True)`，而是使用
    `x.at[i].get(indices_are_sorted=True)`。
- en: 'The following `jax.Array` methods have been removed, after being deprecated
    in JAX v0.4.5:'
  id: totrans-313
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下 `jax.Array` 方法在 JAX v0.4.5 中被弃用后已被移除：
- en: '`jax.Array.broadcast`: use `jax.lax.broadcast()` instead.'
  id: totrans-314
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.Array.broadcast`: 改用 `jax.lax.broadcast()`。'
- en: '`jax.Array.broadcast_in_dim`: use `jax.lax.broadcast_in_dim()` instead.'
  id: totrans-315
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.Array.broadcast_in_dim`: 改用 `jax.lax.broadcast_in_dim()`。'
- en: '`jax.Array.split`: use `jax.numpy.split()` instead.'
  id: totrans-316
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.Array.split`: 使用 `jax.numpy.split()` 替代。'
- en: 'The following APIs have been removed after previous deprecation:'
  id: totrans-317
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在之前的弃用之后，以下 API 已被移除：
- en: '`jax.ad`: use `jax.interpreters.ad`.'
  id: totrans-318
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.ad`: 使用 `jax.interpreters.ad`。'
- en: '`jax.curry`: use `curry = lambda f: partial(partial, f)`.'
  id: totrans-319
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.curry`: 使用 `curry = lambda f: partial(partial, f)`。'
- en: '`jax.partial_eval`: use `jax.interpreters.partial_eval`.'
  id: totrans-320
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.partial_eval`: 使用 `jax.interpreters.partial_eval`。'
- en: '`jax.pxla`: use `jax.interpreters.pxla`.'
  id: totrans-321
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.pxla`: 使用 `jax.interpreters.pxla`。'
- en: '`jax.xla`: use `jax.interpreters.xla`.'
  id: totrans-322
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.xla`: 使用 `jax.interpreters.xla`。'
- en: '`jax.ShapedArray`: use `jax.core.ShapedArray`.'
  id: totrans-323
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.ShapedArray`: 使用 `jax.core.ShapedArray`。'
- en: '`jax.interpreters.pxla.device_put`: use `jax.device_put()`.'
  id: totrans-324
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.interpreters.pxla.device_put`: 使用 `jax.device_put()`。'
- en: '`jax.interpreters.pxla.make_sharded_device_array`: use `jax.make_array_from_single_device_arrays()`.'
  id: totrans-325
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.interpreters.pxla.make_sharded_device_array`: 使用 `jax.make_array_from_single_device_arrays()`。'
- en: '`jax.interpreters.pxla.ShardedDeviceArray`: use `jax.Array`.'
  id: totrans-326
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.interpreters.pxla.ShardedDeviceArray`: 使用 `jax.Array`。'
- en: '`jax.numpy.DeviceArray`: use `jax.Array`.'
  id: totrans-327
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.numpy.DeviceArray`: 使用 `jax.Array`。'
- en: '`jax.stages.Compiled.compiler_ir`: use `jax.stages.Compiled.as_text()`.'
  id: totrans-328
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.stages.Compiled.compiler_ir`: 使用 `jax.stages.Compiled.as_text()`。'
- en: Breaking changes
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 破坏性变更：
- en: JAX now requires ml_dtypes version 0.2.0 or newer.
  id: totrans-330
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: JAX 现在要求 ml_dtypes 版本 0.2.0 或更新版本。
- en: To fix a corner case, calls to `jax.lax.cond()` with five arguments will always
    resolve to the “common operands” `cond` behavior (as documented) if the second
    and third arguments are callable, even if other operands are callable as well.
    See [#16413](https://github.com/google/jax/issues/16413).
  id: totrans-331
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了修复一个边缘情况，调用 `jax.lax.cond()` 时，如果第二个和第三个参数是可调用的，则使用五个参数总是解析为文档中记录的 “common
    operands” `cond` 行为，即使其他操作数也是可调用的。参见 [#16413](https://github.com/google/jax/issues/16413)。
- en: The deprecated config options `jax_array` and `jax_jit_pjit_api_merge`, which
    did nothing, have been removed. These options have been true by default for many
    releases.
  id: totrans-332
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已删除无效配置选项 `jax_array` 和 `jax_jit_pjit_api_merge`。这些选项默认情况下自许多版本以来都为 true。
- en: New features
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新功能：
- en: JAX now supports a configuration flag –jax_serialization_version and a JAX_SERIALIZATION_VERSION
    environment variable to control the serialization version ([#16746](https://github.com/google/jax/issues/16746)).
  id: totrans-334
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: JAX 现在支持配置标志 `--jax_serialization_version` 和环境变量 `JAX_SERIALIZATION_VERSION`
    来控制序列化版本（[#16746](https://github.com/google/jax/issues/16746)）。
- en: jax2tf in presence of shape polymorphism now generates code that checks certain
    shape constraints, if the serialization version is at least 7. See https://github.com/google/jax/blob/main/jax/experimental/jax2tf/README.md#errors-in-presence-of-shape-polymorphism.
  id: totrans-335
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在形状多态性存在的情况下，jax2tf 现在生成检查某些形状约束的代码，如果序列化版本至少为 7。详见 https://github.com/google/jax/blob/main/jax/experimental/jax2tf/README.md#errors-in-presence-of-shape-polymorphism。
- en: jaxlib 0.4.14 (July 27, 2023)
  id: totrans-336
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.4.14（2023 年 7 月 27 日）
- en: Deprecations
  id: totrans-337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弃用
- en: Python 3.8 support has been dropped as per https://jax.readthedocs.io/en/latest/deprecation.html
  id: totrans-338
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据 https://jax.readthedocs.io/en/latest/deprecation.html，不再支持 Python 3.8。
- en: jax 0.4.13 (June 22, 2023)
  id: totrans-339
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.4.13（2023 年 6 月 22 日）
- en: Changes
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改
- en: '`jax.jit` now allows `None` to be passed to `in_shardings` and `out_shardings`.
    The semantics are as follows:'
  id: totrans-341
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.jit` 现在允许将 `None` 传递给 `in_shardings` 和 `out_shardings`。语义如下：'
- en: For in_shardings, JAX will mark is as replicated but this behavior can change
    in the future.
  id: totrans-342
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 `in_shardings`，JAX 将其标记为复制，但这种行为可能会在将来更改。
- en: For out_shardings, we will rely on the XLA GSPMD partitioner to determine the
    output shardings.
  id: totrans-343
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 `out_shardings`，我们将依赖于 XLA GSPMD 分区器来确定输出的分片。
- en: '`jax.experimental.pjit.pjit` also allows `None` to be passed to `in_shardings`
    and `out_shardings`. The semantics are as follows:'
  id: totrans-344
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.experimental.pjit.pjit` 也允许将 `None` 传递给 `in_shardings` 和 `out_shardings`。语义如下：'
- en: If the mesh context manager is *not* provided, JAX has the freedom to choose
    whatever sharding it wants.
  id: totrans-345
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果未提供网格上下文管理器，则 JAX 可自由选择所需的分片方式。
- en: For in_shardings, JAX will mark is as replicated but this behavior can change
    in the future.
  id: totrans-346
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 `in_shardings`，JAX 将其标记为复制，但这种行为可能会在将来更改。
- en: For out_shardings, we will rely on the XLA GSPMD partitioner to determine the
    output shardings.
  id: totrans-347
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 `out_shardings`，我们将依赖于 XLA GSPMD 分区器来确定输出的分片。
- en: If the mesh context manager is provided, None will imply that the value will
    be replicated on all devices of the mesh.
  id: totrans-348
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果提供了网格上下文管理器，`None` 将意味着该值将在网格的所有设备上复制。
- en: Executable.cost_analysis() works on Cloud TPU
  id: totrans-349
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Executable.cost_analysis() 在 Cloud TPU 上可用
- en: Added a warning if a non-allowlisted `jaxlib` plugin is in use.
  id: totrans-350
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果正在使用非允许的 `jaxlib` 插件，则添加了警告。
- en: Added `jax.tree_util.tree_leaves_with_path`.
  id: totrans-351
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了 `jax.tree_util.tree_leaves_with_path`。
- en: '`None` is not a valid input to `jax.experimental.multihost_utils.host_local_array_to_global_array`
    or `jax.experimental.multihost_utils.global_array_to_host_local_array`. Please
    use `jax.sharding.PartitionSpec()` if you wanted to replicate your input.'
  id: totrans-352
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`None` 不是 `jax.experimental.multihost_utils.host_local_array_to_global_array`
    或 `jax.experimental.multihost_utils.global_array_to_host_local_array` 的有效输入。如果您希望复制您的输入，请使用
    `jax.sharding.PartitionSpec()`。'
- en: Bug fixes
  id: totrans-353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bug 修复
- en: Fixed incorrect wheel name in CUDA 12 releases (#16362); the correct wheel is
    named `cudnn89` instead of `cudnn88`.
  id: totrans-354
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 CUDA 12 发布中修复了错误的轮子名称（#16362）；正确的轮子名称为 `cudnn89` 而不是 `cudnn88`。
- en: Deprecations
  id: totrans-355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弃用
- en: The `native_serialization_strict_checks` parameter to `jax.experimental.jax2tf.convert()`
    is deprecated in favor of the new `native_serializaation_disabled_checks` ([#16347](https://github.com/google/jax/issues/16347)).
  id: totrans-356
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.experimental.jax2tf.convert()` 的 `native_serialization_strict_checks`
    参数已被弃用，推荐使用新的 `native_serializaation_disabled_checks`（[#16347](https://github.com/google/jax/issues/16347)）。'
- en: jaxlib 0.4.13 (June 22, 2023)
  id: totrans-357
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.4.13（2023 年 6 月 22 日）
- en: Changes
  id: totrans-358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改
- en: Added Windows CPU-only wheels to the `jaxlib` Pypi release.
  id: totrans-359
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 Windows 仅CPU轮子添加到 `jaxlib` Pypi 发布中。
- en: Bug fixes
  id: totrans-360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bug 修复
- en: '`__cuda_array_interface__` was broken in previous jaxlib versions and is now
    fixed ([#16440](https://github.com/google/jax/issues/16440)).'
  id: totrans-361
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`__cuda_array_interface__` 在之前的 jaxlib 版本中出现问题，现已修复（[#16440](https://github.com/google/jax/issues/16440)）。'
- en: Concurrent CUDA kernel tracing is now enabled by default on NVIDIA GPUs.
  id: totrans-362
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并行 CUDA 内核跟踪现在默认启用于 NVIDIA GPU。
- en: jax 0.4.12 (June 8, 2023)
  id: totrans-363
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.4.12（2023 年 6 月 8 日）
- en: Changes
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改
- en: Added [`scipy.spatial.transform.Rotation`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.html#scipy.spatial.transform.Rotation
    "(in SciPy v1.13.1)") and [`scipy.spatial.transform.Slerp`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Slerp.html#scipy.spatial.transform.Slerp
    "(in SciPy v1.13.1)")
  id: totrans-365
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了 [`scipy.spatial.transform.Rotation`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.html#scipy.spatial.transform.Rotation
    "(在 SciPy v1.13.1 中)") 和 [`scipy.spatial.transform.Slerp`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Slerp.html#scipy.spatial.transform.Slerp
    "(在 SciPy v1.13.1 中)")
- en: Deprecations
  id: totrans-366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弃用
- en: '`jax.abstract_arrays` and its contents are now deprecated. See related functionality
    in :mod:`jax.core`.'
  id: totrans-367
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.abstract_arrays`及其内容已被弃用。请参阅:mod:`jax.core`中的相关功能。'
- en: '`jax.numpy.alltrue`: use `jax.numpy.all`. This follows the deprecation of `numpy.alltrue`
    in NumPy version 1.25.0.'
  id: totrans-368
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.numpy.alltrue`：使用`jax.numpy.all`。这遵循了NumPy版本1.25.0中`numpy.alltrue`的弃用。'
- en: '`jax.numpy.sometrue`: use `jax.numpy.any`. This follows the deprecation of
    `numpy.sometrue` in NumPy version 1.25.0.'
  id: totrans-369
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.numpy.sometrue`：使用`jax.numpy.any`。这遵循了NumPy版本1.25.0中`numpy.sometrue`的弃用。'
- en: '`jax.numpy.product`: use `jax.numpy.prod`. This follows the deprecation of
    `numpy.product` in NumPy version 1.25.0.'
  id: totrans-370
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.numpy.product`：使用`jax.numpy.prod`。这遵循了NumPy版本1.25.0中`numpy.product`的弃用。'
- en: '`jax.numpy.cumproduct`: use `jax.numpy.cumprod`. This follows the deprecation
    of `numpy.cumproduct` in NumPy version 1.25.0.'
  id: totrans-371
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.numpy.cumproduct`：使用`jax.numpy.cumprod`。这遵循了NumPy版本1.25.0中`numpy.cumproduct`的弃用。'
- en: '`jax.sharding.OpShardingSharding` has been removed since it has been 3 months
    since it was deprecated.'
  id: totrans-372
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.sharding.OpShardingSharding`已被移除，因为它已经弃用了3个月。'
- en: jaxlib 0.4.12 (June 8, 2023)
  id: totrans-373
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.4.12 (2023年6月8日)
- en: Changes
  id: totrans-374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变更
- en: Includes PTX/SASS for Hopper (SM version 9.0+) GPUs. Previous versions of jaxlib
    should work on Hopper but would have a long JIT-compilation delay the first time
    a JAX operation was executed.
  id: totrans-375
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含了Hopper（SM版本9.0+）GPU的PTX/SASS。之前的jaxlib版本应该可以在Hopper上工作，但第一次执行JAX操作时可能会有较长的JIT编译延迟。
- en: Bug fixes
  id: totrans-376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bug修复
- en: Fixes incorrect source line information in JAX-generated Python tracebacks under
    Python 3.11.
  id: totrans-377
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复了在Python 3.11下JAX生成的Python回溯中源代码行信息不正确的问题。
- en: Fixes crash when printing local variables of frames in JAX-generated Python
    tracebacks (#16027).
  id: totrans-378
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复了在JAX生成的Python回溯的帧中打印本地变量时崩溃的问题（#16027）。
- en: jax 0.4.11 (May 31, 2023)
  id: totrans-379
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.4.11 (2023年5月31日)
- en: Deprecations
  id: totrans-380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弃用
- en: 'The following APIs have been removed after a 3 month deprecation period, in
    accordance with the API compatibility policy:'
  id: totrans-381
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据API兼容性政策，在3个月的弃用期后，已移除以下API：
- en: '`jax.experimental.PartitionSpec`: use `jax.sharding.PartitionSpec`.'
  id: totrans-382
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.experimental.PartitionSpec`：使用`jax.sharding.PartitionSpec`。'
- en: '`jax.experimental.maps.Mesh`: use `jax.sharding.Mesh`'
  id: totrans-383
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.experimental.maps.Mesh`：使用`jax.sharding.Mesh`。'
- en: '`jax.experimental.pjit.NamedSharding`: use `jax.sharding.NamedSharding`.'
  id: totrans-384
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.experimental.pjit.NamedSharding`：使用`jax.sharding.NamedSharding`。'
- en: '`jax.experimental.pjit.PartitionSpec`: use `jax.sharding.PartitionSpec`.'
  id: totrans-385
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.experimental.pjit.PartitionSpec`：使用`jax.sharding.PartitionSpec`。'
- en: '`jax.experimental.pjit.FROM_GDA`. Instead pass sharded `jax.Array` objects
    as input and remove the optional `in_shardings` argument to `pjit`.'
  id: totrans-386
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.experimental.pjit.FROM_GDA`。请将分片的`jax.Array`对象作为输入传递，并删除`pjit`的可选`in_shardings`参数。'
- en: '`jax.interpreters.pxla.PartitionSpec`: use `jax.sharding.PartitionSpec`.'
  id: totrans-387
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.interpreters.pxla.PartitionSpec`：使用`jax.sharding.PartitionSpec`。'
- en: '`jax.interpreters.pxla.Mesh`: use `jax.sharding.Mesh`'
  id: totrans-388
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.interpreters.pxla.Mesh`：使用`jax.sharding.Mesh`。'
- en: '`jax.interpreters.xla.Buffer`: use `jax.Array`.'
  id: totrans-389
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.interpreters.xla.Buffer`：使用`jax.Array`。'
- en: '`jax.interpreters.xla.Device`: use `jax.Device`.'
  id: totrans-390
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.interpreters.xla.Device`：使用`jax.Device`。'
- en: '`jax.interpreters.xla.DeviceArray`: use `jax.Array`.'
  id: totrans-391
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.interpreters.xla.DeviceArray`：使用`jax.Array`。'
- en: '`jax.interpreters.xla.device_put`: use `jax.device_put`.'
  id: totrans-392
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.interpreters.xla.device_put`：使用`jax.device_put`。'
- en: '`jax.interpreters.xla.xla_call_p`: use `jax.experimental.pjit.pjit_p`.'
  id: totrans-393
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.interpreters.xla.xla_call_p`：使用`jax.experimental.pjit.pjit_p`。'
- en: '`axis_resources` argument of `with_sharding_constraint` is removed. Please
    use `shardings` instead.'
  id: totrans-394
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`with_sharding_constraint`的`axis_resources`参数已被移除。请改用`shardings`。'
- en: jaxlib 0.4.11 (May 31, 2023)
  id: totrans-395
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.4.11 (2023年5月31日)
- en: Changes
  id: totrans-396
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变更
- en: Added `memory_stats()` method to `Device`s. If supported, this returns a dict
    of string stat names with int values, e.g. `"bytes_in_use"`, or None if the platform
    doesn’t support memory statistics. The exact stats returned may vary across platforms.
    Currently only implemented on Cloud TPU.
  id: totrans-397
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向`Device`添加了`memory_stats()`方法。如果支持，它将返回一个包含字符串统计名称和整数值的字典，例如`"bytes_in_use"`，如果平台不支持内存统计，则返回None。具体的统计数据可能因平台而异。目前仅在Cloud
    TPU上实现。
- en: Readded support for the Python buffer protocol (`memoryview`) on CPU devices.
  id: totrans-398
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重新添加了对CPU设备上Python缓冲协议（`memoryview`）的支持。
- en: jax 0.4.10 (May 11, 2023)
  id: totrans-399
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.4.10 (2023年5月11日)
- en: jaxlib 0.4.10 (May 11, 2023)
  id: totrans-400
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.4.10 (2023年5月11日)
- en: Changes
  id: totrans-401
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变更
- en: Fixed `'apple-m1' is not a recognized processor for this target (ignoring processor)`
    issue that prevented previous release from running on Mac M1.
  id: totrans-402
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复了阻止上一个版本在Mac M1上运行的`'apple-m1' is not a recognized processor for this target
    (ignoring processor)`问题。
- en: jax 0.4.9 (May 9, 2023)
  id: totrans-403
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.4.9 (2023年5月9日)
- en: Changes
  id: totrans-404
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变更
- en: The flags experimental_cpp_jit, experimental_cpp_pjit and experimental_cpp_pmap
    have been removed. They are now always on.
  id: totrans-405
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`experimental_cpp_jit`、`experimental_cpp_pjit`和`experimental_cpp_pmap`标志已被移除。它们现在始终开启。'
- en: Accuracy of singular value decomposition (SVD) on TPU has been improved (requires
    jaxlib 0.4.9).
  id: totrans-406
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: TPU上奇异值分解（SVD）的准确性已经提高（需要jaxlib 0.4.9）。
- en: Deprecations
  id: totrans-407
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 废弃功能
- en: '`jax.experimental.gda_serialization` is deprecated and has been renamed to
    `jax.experimental.array_serialization`. Please change your imports to use `jax.experimental.array_serialization`.'
  id: totrans-408
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.experimental.gda_serialization`已废弃，并已重命名为`jax.experimental.array_serialization`。请更改您的导入以使用`jax.experimental.array_serialization`。'
- en: The `in_axis_resources` and `out_axis_resources` arguments of pjit have been
    deprecated. Please use `in_shardings` and `out_shardings` respectively.
  id: totrans-409
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pjit`的`in_axis_resources`和`out_axis_resources`参数已废弃。请分别使用`in_shardings`和`out_shardings`。'
- en: The function `jax.numpy.msort` has been removed. It has been deprecated since
    JAX v0.4.1\. Use `jnp.sort(a, axis=0)` instead.
  id: totrans-410
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数`jax.numpy.msort`已被移除。自JAX v0.4.1起已被废弃。请使用`jnp.sort(a, axis=0)`代替。
- en: '`in_parts` and `out_parts` arguments have been removed from `jax.xla_computation`
    since they were only used with sharded_jit and sharded_jit is long gone.'
  id: totrans-411
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`in_parts`和`out_parts`参数已从`jax.xla_computation`中移除，因为它们只与`sharded_jit`一起使用，并且`sharded_jit`已不再使用。'
- en: '`instantiate_const_outputs` argument has been removed from `jax.xla_computation`
    since it has been unused for a very long time.'
  id: totrans-412
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自从很久以来未被使用，`instantiate_const_outputs`参数已从`jax.xla_computation`中移除。
- en: jaxlib 0.4.9 (May 9, 2023)
  id: totrans-413
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.4.9（2023年5月9日）
- en: jax 0.4.8 (March 29, 2023)
  id: totrans-414
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.4.8（2023年3月29日）
- en: Breaking changes
  id: totrans-415
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 破坏性变更
- en: 'A major component of the Cloud TPU runtime has been upgraded. This enables
    the following new features on Cloud TPU:'
  id: totrans-416
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cloud TPU运行时的一个重要组件已升级。这使得以下新功能在Cloud TPU上可用：
- en: '`jax.debug.print()`, `jax.debug.callback()`, and `jax.debug.breakpoint()` now
    work on Cloud TPU'
  id: totrans-417
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.debug.print()`、`jax.debug.callback()`和`jax.debug.breakpoint()`现在在Cloud
    TPU上可用。'
- en: Automatic TPU memory defragmentation
  id: totrans-418
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动TPU内存碎片整理
- en: '`jax.experimental.host_callback()` is no longer supported on Cloud TPU with
    the new runtime component. Please file an issue on the [JAX issue tracker](https://github.com/google/jax/issues)
    if the new `jax.debug` APIs are insufficient for your use case.'
  id: totrans-419
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在新的运行时组件上，不再支持`jax.experimental.host_callback()`在Cloud TPU上的使用。如果新的`jax.debug`
    API不能满足您的需求，请在[JAX问题跟踪器](https://github.com/google/jax/issues)上提出问题。
- en: The old runtime component will be available for at least the next three months
    by setting the environment variable `JAX_USE_PJRT_C_API_ON_TPU=false`. If you
    find you need to disable the new runtime for any reason, please let us know on
    the [JAX issue tracker](https://github.com/google/jax/issues).
  id: totrans-420
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 旧的运行时组件将通过设置环境变量`JAX_USE_PJRT_C_API_ON_TPU=false`至少在接下来的三个月内可用。如果您发现需要出于任何原因禁用新的运行时，请在[JAX问题跟踪器](https://github.com/google/jax/issues)上告知我们。
- en: Changes
  id: totrans-421
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变更
- en: The minimum jaxlib version has been bumped from 0.4.6 to 0.4.7.
  id: totrans-422
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最低jaxlib版本已从0.4.6提升至0.4.7。
- en: Deprecations
  id: totrans-423
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 废弃功能
- en: CUDA 11.4 support has been dropped. JAX GPU wheels only support CUDA 11.8 and
    CUDA 12\. Older CUDA versions may work if jaxlib is built from source.
  id: totrans-424
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持CUDA 11.4已被移除。JAX GPU版本仅支持CUDA 11.8和CUDA 12。如果使用旧版CUDA构建jaxlib可能会正常工作。
- en: '`global_arg_shapes` argument of pmap only worked with sharded_jit and has been
    removed from pmap. Please migrate to pjit and remove global_arg_shapes from pmap.'
  id: totrans-425
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pmap`的`global_arg_shapes`参数仅适用于`sharded_jit`，已从`pmap`中移除。请迁移到`pjit`并从`pmap`中移除`global_arg_shapes`。'
- en: jax 0.4.7 (March 27, 2023)
  id: totrans-426
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.4.7（2023年3月27日）
- en: Changes
  id: totrans-427
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变更
- en: As per https://jax.readthedocs.io/en/latest/jax_array_migration.html#jax-array-migration
    `jax.config.jax_array` cannot be disabled anymore.
  id: totrans-428
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据https://jax.readthedocs.io/en/latest/jax_array_migration.html#jax-array-migration，不再支持禁用`jax.config.jax_array`。
- en: '`jax.config.jax_jit_pjit_api_merge` cannot be disabled anymore.'
  id: totrans-429
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不再支持禁用`jax.config.jax_jit_pjit_api_merge`。
- en: '`jax.experimental.jax2tf.convert()` now supports the `native_serialization`
    parameter to use JAX’s native lowering to StableHLO to obtain a StableHLO module
    for the entire JAX function instead of lowering each JAX primitive to a TensorFlow
    op. This simplifies the internals and increases the confidence that what you serialize
    matches the JAX native semantics. See [documentation](https://github.com/google/jax/blob/main/jax/experimental/jax2tf/README.md).
    As part of this change the config flag `--jax2tf_default_experimental_native_lowering`
    has been renamed to `--jax2tf_native_serialization`.'
  id: totrans-430
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.experimental.jax2tf.convert()`现在支持`native_serialization`参数，使用JAX的本机降级到StableHLO以获取整个JAX函数的StableHLO模块，而不是将每个JAX原语降级到TensorFlow操作。这简化了内部操作，并增加了您序列化内容与JAX本机语义匹配的信心。详见[文档](https://github.com/google/jax/blob/main/jax/experimental/jax2tf/README.md)。作为这一变更的一部分，配置标志`--jax2tf_default_experimental_native_lowering`已重命名为`--jax2tf_native_serialization`。'
- en: JAX now depends on `ml_dtypes`, which contains definitions of NumPy types like
    bfloat16\. These definitions were previously internal to JAX, but have been split
    into a separate package to facilitate sharing them with other projects.
  id: totrans-431
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: JAX 现在依赖于 `ml_dtypes`，其中包含类似于 bfloat16 的 NumPy 类型的定义。这些定义以前是 JAX 的内部部分，但已拆分为一个单独的包，以便与其他项目共享。
- en: JAX now requires NumPy 1.21 or newer and SciPy 1.7 or newer.
  id: totrans-432
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: JAX 现在要求使用 NumPy 1.21 或更新版本以及 SciPy 1.7 或更新版本。
- en: Deprecations
  id: totrans-433
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弃用信息
- en: The type `jax.numpy.DeviceArray` is deprecated. Use `jax.Array` instead, for
    which it is an alias.
  id: totrans-434
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类型 `jax.numpy.DeviceArray` 已弃用。请改用 `jax.Array`，它是其别名。
- en: The type `jax.interpreters.pxla.ShardedDeviceArray` is deprecated. Use `jax.Array`
    instead.
  id: totrans-435
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类型 `jax.interpreters.pxla.ShardedDeviceArray` 已弃用。请改用 `jax.Array`。
- en: Passing additional arguments to `jax.numpy.ndarray.at()` by position is deprecated.
    For example, instead of `x.at[i].get(True)`, use `x.at[i].get(indices_are_sorted=True)`
  id: totrans-436
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过位置传递额外参数给 `jax.numpy.ndarray.at()` 已被弃用。例如，不要使用 `x.at[i].get(True)`，而是使用 `x.at[i].get(indices_are_sorted=True)`
- en: '`jax.interpreters.xla.device_put` is deprecated. Please use `jax.device_put`.'
  id: totrans-437
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.interpreters.xla.device_put` 已被弃用。请使用 `jax.device_put`。'
- en: '`jax.interpreters.pxla.device_put` is deprecated. Please use `jax.device_put`.'
  id: totrans-438
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.interpreters.pxla.device_put` 已被弃用。请使用 `jax.device_put`。'
- en: '`jax.experimental.pjit.FROM_GDA` is deprecated. Please pass in sharded jax.Arrays
    as input and remove the `in_shardings` argument to pjit since it is optional.'
  id: totrans-439
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.experimental.pjit.FROM_GDA` 已被弃用。请将分片的 jax.Arrays 作为输入，并移除 pjit 中的 `in_shardings`
    参数，因为它是可选的。'
- en: jaxlib 0.4.7 (March 27, 2023)
  id: totrans-440
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.4.7（2023年3月27日）
- en: 'Changes:'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 变更：
- en: jaxlib now depends on `ml_dtypes`, which contains definitions of NumPy types
    like bfloat16\. These definitions were previously internal to JAX, but have been
    split into a separate package to facilitate sharing them with other projects.
  id: totrans-442
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: jaxlib 现在依赖于 `ml_dtypes`，其中包含类似于 bfloat16 的 NumPy 类型的定义。这些定义以前是 JAX 的内部部分，但已拆分为一个单独的包，以便与其他项目共享。
- en: jax 0.4.6 (Mar 9, 2023)
  id: totrans-443
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.4.6（2023年3月9日）
- en: Changes
  id: totrans-444
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变更
- en: '`jax.tree_util` now contain a set of APIs that allow user to define keys for
    their custom pytree node. This includes:'
  id: totrans-445
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.tree_util` 现在包含一组允许用户为其自定义 pytree 节点定义键的 API。'
- en: '`tree_flatten_with_path` that flattens a tree and return not only each leaf
    but also their key paths.'
  id: totrans-446
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tree_flatten_with_path` 可以展平树并返回每个叶子及其键路径。'
- en: '`tree_map_with_path` that can map a function that takes the key path as an
    argument.'
  id: totrans-447
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tree_map_with_path` 可以映射一个接受键路径作为参数的函数。'
- en: '`register_pytree_with_keys` to register how the key path and leaves should
    looks like in a custom pytree node.'
  id: totrans-448
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`register_pytree_with_keys` 用于注册自定义 pytree 节点中键路径和叶子的外观。'
- en: '`keystr` that pretty-prints a key path.'
  id: totrans-449
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`keystr` 用于漂亮地打印键路径。'
- en: '`jax2tf.call_tf()` has a new parameter `output_shape_dtype` (default `None`)
    that can be used to declare the output shape and type of the result. This enables
    `jax2tf.call_tf()` to work in the presence of shape polymorphism. ([#14734](https://github.com/google/jax/issues/14734)).'
  id: totrans-450
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax2tf.call_tf()` 现在有一个新参数 `output_shape_dtype`（默认为 `None`），可用于声明结果的输出形状和类型。这使得
    `jax2tf.call_tf()` 能够在形状多态性存在的情况下工作。([#14734](https://github.com/google/jax/issues/14734))'
- en: Deprecations
  id: totrans-451
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弃用信息
- en: 'The old key-path APIs in `jax.tree_util` are deprecated and will be removed
    3 months from Mar 10 2023:'
  id: totrans-452
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.tree_util` 中的旧键路径 API 已被弃用，并将在2023年3月10日后的3个月内移除：'
- en: '`register_keypaths`: use `jax.tree_util.register_pytree_with_keys()` instead.'
  id: totrans-453
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`register_keypaths`：请使用 `jax.tree_util.register_pytree_with_keys()` 替代。'
- en: '`AttributeKeyPathEntry` : use `GetAttrKey` instead.'
  id: totrans-454
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AttributeKeyPathEntry`：请改用 `GetAttrKey`。'
- en: '`GetitemKeyPathEntry` : use `SequenceKey` or `DictKey` instead.'
  id: totrans-455
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GetitemKeyPathEntry`：请改用 `SequenceKey` 或 `DictKey`。'
- en: jaxlib 0.4.6 (Mar 9, 2023)
  id: totrans-456
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.4.6（2023年3月9日）
- en: jax 0.4.5 (Mar 2, 2023)
  id: totrans-457
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.4.5（2023年3月2日）
- en: Deprecations
  id: totrans-458
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弃用信息
- en: '`jax.sharding.OpShardingSharding` has been renamed to `jax.sharding.GSPMDSharding`.
    `jax.sharding.OpShardingSharding` will be removed in 3 months from Feb 17, 2023.'
  id: totrans-459
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.sharding.OpShardingSharding` 已重命名为 `jax.sharding.GSPMDSharding`。`jax.sharding.OpShardingSharding`
    将在2023年2月17日后的3个月内移除。'
- en: 'The following `jax.Array` methods are deprecated and will be removed 3 months
    from Feb 23 2023:'
  id: totrans-460
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下列 `jax.Array` 方法已被弃用，并将在2023年2月23日后的3个月内移除：
- en: '`jax.Array.broadcast`: use `jax.lax.broadcast()` instead.'
  id: totrans-461
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.Array.broadcast`：请使用 `jax.lax.broadcast()` 替代。'
- en: '`jax.Array.broadcast_in_dim`: use `jax.lax.broadcast_in_dim()` instead.'
  id: totrans-462
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.Array.broadcast_in_dim`：请使用 `jax.lax.broadcast_in_dim()` 替代。'
- en: '`jax.Array.split`: use `jax.numpy.split()` instead.'
  id: totrans-463
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.Array.split`：请使用 `jax.numpy.split()` 替代。'
- en: jax 0.4.4 (Feb 16, 2023)
  id: totrans-464
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.4.4（2023年2月16日）
- en: Changes
  id: totrans-465
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变更
- en: The implementation of `jit` and `pjit` has been merged. Merging jit and pjit
    changes the internals of JAX without affecting the public API of JAX. Before,
    `jit` was a final style primitive. Final style means that the creation of jaxpr
    was delayed as much as possible and transformations were stacked on top of each
    other. With the `jit`-`pjit` implementation merge, `jit` becomes an initial style
    primitive which means that we trace to jaxpr as early as possible. For more information
    see [this section in autodidax](https://jax.readthedocs.io/en/latest/autodidax.html#on-the-fly-final-style-and-staged-initial-style-processing).
    Moving to initial style should simplify JAX’s internals and make development of
    features like dynamic shapes, etc easier. You can disable it only via the environment
    variable i.e. `os.environ['JAX_JIT_PJIT_API_MERGE'] = '0'`. The merge must be
    disabled via an environment variable since it affects JAX at import time so it
    needs to be disabled before jax is imported.
  id: totrans-466
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jit` 和 `pjit` 的实现已合并。合并 jit 和 pjit 改变了 JAX 的内部实现，但不影响 JAX 的公共 API。之前，`jit`
    是一种最终风格的原语。最终风格意味着尽可能延迟创建 jaxpr 并将变换堆叠在一起。随着 `jit`-`pjit` 实现的合并，`jit` 变成了一种初始风格的原语，这意味着我们尽早追踪到
    jaxpr。更多信息请参见 [autodidax 中的这一部分](https://jax.readthedocs.io/en/latest/autodidax.html#on-the-fly-final-style-and-staged-initial-style-processing)。转移到初始风格应该简化
    JAX 的内部实现，并使得动态形状等功能的开发更加容易。你只能通过环境变量来禁用它，即 `os.environ[''JAX_JIT_PJIT_API_MERGE'']
    = ''0''`。由于它影响到 JAX 的导入时机，因此必须通过环境变量禁用它，在导入 jax 之前就需要禁用它。'
- en: '`axis_resources` argument of `with_sharding_constraint` is deprecated. Please
    use `shardings` instead. There is no change needed if you were using `axis_resources`
    as an arg. If you were using it as a kwarg, then please use `shardings` instead.
    `axis_resources` will be removed after 3 months from Feb 13, 2023.'
  id: totrans-467
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`with_sharding_constraint` 的 `axis_resources` 参数已弃用。请改用 `shardings`。如果你将其作为参数使用，则无需更改。如果你将其作为关键字参数使用，请改用
    `shardings`。`axis_resources` 将在 2023 年2月13日后的3个月内删除。'
- en: added the `jax.typing` module, with tools for type annotations of JAX functions.
  id: totrans-468
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了 `jax.typing` 模块，用于 JAX 函数的类型注解工具。
- en: 'The following names have been deprecated:'
  id: totrans-469
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下列名称已被弃用：
- en: '`jax.xla.Device` and `jax.interpreters.xla.Device`: use `jax.Device`.'
  id: totrans-470
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.xla.Device` 和 `jax.interpreters.xla.Device`: 使用 `jax.Device`。'
- en: '`jax.experimental.maps.Mesh`. Use `jax.sharding.Mesh` instead.'
  id: totrans-471
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.experimental.maps.Mesh`. 使用 `jax.sharding.Mesh` 替代。'
- en: '`jax.experimental.pjit.NamedSharding`: use `jax.sharding.NamedSharding`.'
  id: totrans-472
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.experimental.pjit.NamedSharding`: 使用 `jax.sharding.NamedSharding`。'
- en: '`jax.experimental.pjit.PartitionSpec`: use `jax.sharding.PartitionSpec`.'
  id: totrans-473
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.experimental.pjit.PartitionSpec`: 使用 `jax.sharding.PartitionSpec`。'
- en: '`jax.interpreters.pxla.Mesh`: use `jax.sharding.Mesh`.'
  id: totrans-474
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.interpreters.pxla.Mesh`: 使用 `jax.sharding.Mesh`。'
- en: '`jax.interpreters.pxla.PartitionSpec`: use `jax.sharding.PartitionSpec`.'
  id: totrans-475
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.interpreters.pxla.PartitionSpec`: 使用 `jax.sharding.PartitionSpec`。'
- en: Breaking Changes
  id: totrans-476
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Breaking Changes
- en: the `initial` argument to reduction functions like :func:`jax.numpy.sum` is
    now required to be a scalar, consistent with the corresponding NumPy API. The
    previous behavior of broadcasting the output against non-scalar `initial` values
    was an unintentional implementation detail ([#14446](https://github.com/google/jax/issues/14446)).
  id: totrans-477
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.numpy.sum` 等的 `initial` 参数现在要求是一个标量，与对应的 NumPy API 保持一致。以前的行为是对非标量 `initial`
    值进行广播，这是一个意外的实现细节（[#14446](https://github.com/google/jax/issues/14446)）。'
- en: jaxlib 0.4.4 (Feb 16, 2023)
  id: totrans-478
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.4.4（2023年2月16日）
- en: Breaking changes
  id: totrans-479
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Breaking changes
- en: Support for NVIDIA Kepler series GPUs has been removed from the default `jaxlib`
    builds. If Kepler support is needed, it is still possible to build `jaxlib` from
    source with Kepler support (via the `--cuda_compute_capabilities=sm_35` option
    to `build.py`), however note that CUDA 12 has completely dropped support for Kepler
    GPUs.
  id: totrans-480
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认的 `jaxlib` 构建中已移除对 NVIDIA Kepler 系列 GPU 的支持。如果需要 Kepler 支持，可以通过使用 Kepler 支持的源码构建
    `jaxlib`（通过 `build.py` 的 `--cuda_compute_capabilities=sm_35` 选项），不过请注意 CUDA 12
    已完全停止支持 Kepler GPU。
- en: jax 0.4.3 (Feb 8, 2023)
  id: totrans-481
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.4.3（2023年2月8日）
- en: Breaking changes
  id: totrans-482
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Breaking changes
- en: Deleted `jax.scipy.linalg.polar_unitary()`, which was a deprecated JAX extension
    to the scipy API. Use `jax.scipy.linalg.polar()` instead.
  id: totrans-483
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除了 `jax.scipy.linalg.polar_unitary()`，这是一个已弃用的 JAX 扩展到 scipy API 的函数。请改用 `jax.scipy.linalg.polar()`。
- en: Changes
  id: totrans-484
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Changes
- en: Added `jax.scipy.stats.rankdata()`.
  id: totrans-485
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了 `jax.scipy.stats.rankdata()`。
- en: jaxlib 0.4.3 (Feb 8, 2023)
  id: totrans-486
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.4.3（2023年2月8日）
- en: '`jax.Array` now has the non-blocking `is_ready()` method, which returns `True`
    if the array is ready (see also `jax.block_until_ready()`).'
  id: totrans-487
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.Array` 现在具有非阻塞的 `is_ready()` 方法，如果数组已准备就绪则返回 `True`（参见 `jax.block_until_ready()`）。'
- en: jax 0.4.2 (Jan 24, 2023)
  id: totrans-488
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.4.2（2023年1月24日）
- en: Breaking changes
  id: totrans-489
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Breaking changes
- en: Deleted `jax.experimental.callback`
  id: totrans-490
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除了 `jax.experimental.callback`
- en: Operations with dimensions in presence of jax2tf shape polymorphism have been
    generalized to work in more scenarios, by converting the symbolic dimension to
    JAX arrays. Operations involving symbolic dimensions and `np.ndarray` now can
    raise errors when the result is used as a shape value ([#14106](https://github.com/google/jax/issues/14106)).
  id: totrans-491
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在存在 `jax2tf` 形状多态性的情况下，对带有维度的操作进行了泛化处理，通过将符号维度转换为 JAX 数组来在更多场景下工作。现在，涉及符号维度和
    `np.ndarray` 的操作在结果用作形状值时可能会引发错误（[#14106](https://github.com/google/jax/issues/14106)）。
- en: jaxpr objects now raise an error on attribute setting in order to avoid problematic
    mutations ([#14102](https://github.com/google/jax/issues/14102))
  id: totrans-492
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在，`jaxpr` 对象在设置属性时会引发错误，以避免问题变异（[#14102](https://github.com/google/jax/issues/14102)）
- en: Changes
  id: totrans-493
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变更
- en: '`jax2tf.call_tf()` has a new parameter `has_side_effects` (default `True`)
    that can be used to declare whether an instance can be removed or replicated by
    JAX optimizations such as dead-code elimination ([#13980](https://github.com/google/jax/issues/13980)).'
  id: totrans-494
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax2tf.call_tf()` 现在有一个新参数 `has_side_effects`（默认为 `True`），可用于声明实例是否可以被 JAX
    优化（如死代码消除）删除或复制（[#13980](https://github.com/google/jax/issues/13980)）。'
- en: Added more support for floordiv and mod for jax2tf shape polymorphism. Previously,
    certain division operations resulted in errors in presence of symbolic dimensions
    ([#14108](https://github.com/google/jax/issues/14108)).
  id: totrans-495
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了支持 `jax2tf` 形状多态性的 `floordiv` 和 `mod`，我们增加了更多支持。之前，存在符号维度时某些除法操作会导致错误（[#14108](https://github.com/google/jax/issues/14108)）。
- en: jaxlib 0.4.2 (Jan 24, 2023)
  id: totrans-496
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.4.2（2023年1月24日）
- en: Changes
  id: totrans-497
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变更
- en: Set JAX_USE_PJRT_C_API_ON_TPU=1 to enable new Cloud TPU runtime, featuring automatic
    device memory defragmentation.
  id: totrans-498
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 `JAX_USE_PJRT_C_API_ON_TPU=1` 可启用新的 Cloud TPU 运行时，具备自动设备内存碎片整理功能。
- en: jax 0.4.1 (Dec 13, 2022)
  id: totrans-499
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.4.1（2022年12月13日）
- en: Changes
  id: totrans-500
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变更
- en: Support for Python 3.7 has been dropped, in accordance with JAX’s Python and
    NumPy version support policy.
  id: totrans-501
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据 JAX 的 Python 和 NumPy 版本支持政策，不再支持 Python 3.7。
- en: We introduce `jax.Array` which is a unified array type that subsumes `DeviceArray`,
    `ShardedDeviceArray`, and `GlobalDeviceArray` types in JAX. The `jax.Array` type
    helps make parallelism a core feature of JAX, simplifies and unifies JAX internals,
    and allows us to unify `jit` and `pjit`. `jax.Array` has been enabled by default
    in JAX 0.4 and makes some breaking change to the `pjit` API. The [jax.Array migration
    guide](https://jax.readthedocs.io/en/latest/jax_array_migration.html) can help
    you migrate your codebase to `jax.Array`. You can also look at the [Distributed
    arrays and automatic parallelization](https://jax.readthedocs.io/en/latest/notebooks/Distributed_arrays_and_automatic_parallelization.html)
    tutorial to understand the new concepts.
  id: totrans-502
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们引入了 `jax.Array`，它是 JAX 中的统一数组类型，涵盖了 `DeviceArray`、`ShardedDeviceArray` 和 `GlobalDeviceArray`
    类型。`jax.Array` 类型有助于使并行成为 JAX 的核心特性，简化和统一 JAX 内部结构，并允许我们统一 `jit` 和 `pjit`。`jax.Array`
    已在 JAX 0.4 中默认启用，并对 `pjit` API 进行了一些破坏性更改。[jax.Array 迁移指南](https://jax.readthedocs.io/en/latest/jax_array_migration.html)
    可帮助您将代码库迁移到 `jax.Array`。您还可以查看[Distributed arrays and automatic parallelization](https://jax.readthedocs.io/en/latest/notebooks/Distributed_arrays_and_automatic_parallelization.html)
    教程，以理解新概念。
- en: '`PartitionSpec` and `Mesh` are now out of experimental. The new API endpoints
    are `jax.sharding.PartitionSpec` and `jax.sharding.Mesh`. `jax.experimental.maps.Mesh`
    and `jax.experimental.PartitionSpec` are deprecated and will be removed in 3 months.'
  id: totrans-503
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PartitionSpec` 和 `Mesh` 现在不再处于实验阶段。新的 API 端点是 `jax.sharding.PartitionSpec`
    和 `jax.sharding.Mesh`。`jax.experimental.maps.Mesh` 和 `jax.experimental.PartitionSpec`
    已被弃用，并将在三个月内移除。'
- en: '`with_sharding_constraint`s new public endpoint is `jax.lax.with_sharding_constraint`.'
  id: totrans-504
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`with_sharding_constraint` 的新公共端点是 `jax.lax.with_sharding_constraint`。'
- en: If using ABSL flags together with `jax.config`, the ABSL flag values are no
    longer read or written after the JAX configuration options are initially populated
    from the ABSL flags. This change improves performance of reading `jax.config`
    options, which are used pervasively in JAX.
  id: totrans-505
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果与 `jax.config` 一起使用 ABSL 标志，那么在最初从 ABSL 标志填充 JAX 配置选项后，就不再读取或写入 ABSL 标志值。此更改改进了读取
    `jax.config` 选项的性能，这些选项在 JAX 中广泛使用。
- en: The jax2tf.call_tf function now uses for TF lowering the first TF device of
    the same platform as used by the embedding JAX computation. Before, it was using
    the 0th device for the JAX-default backend.
  id: totrans-506
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax2tf.call_tf` 函数现在使用与嵌入 JAX 计算相同平台的第一个 TF 设备进行 TF 降级。以前，它使用的是 JAX 默认后端的第
    0 个设备。'
- en: A number of `jax.numpy` functions now have their arguments marked as positional-only,
    matching NumPy.
  id: totrans-507
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在，一些 `jax.numpy` 函数的参数已标记为仅限位置参数，与 NumPy 匹配。
- en: '`jnp.msort` is now deprecated, following the deprecation of `np.msort` in numpy
    1.24. It will be removed in a future release, in accordance with the API compatibility
    policy. It can be replaced with `jnp.sort(a, axis=0)`.'
  id: totrans-508
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jnp.msort`现已废弃，遵循numpy 1.24中`np.msort`的废弃。它将在未来的版本中移除，符合API兼容性策略。可以用`jnp.sort(a,
    axis=0)`替换。'
- en: jaxlib 0.4.1 (Dec 13, 2022)
  id: totrans-509
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.4.1 (2022年12月13日)
- en: Changes
  id: totrans-510
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变更
- en: Support for Python 3.7 has been dropped, in accordance with JAX’s Python and
    NumPy version support policy.
  id: totrans-511
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持Python 3.7已被放弃，符合JAX的Python和NumPy版本支持政策。
- en: The behavior of `XLA_PYTHON_CLIENT_MEM_FRACTION=.XX` has been changed to allocate
    XX% of the total GPU memory instead of the previous behavior of using currently
    available GPU memory to calculate preallocation. Please refer to [GPU memory allocation](https://jax.readthedocs.io/en/latest/gpu_memory_allocation.html)
    for more details.
  id: totrans-512
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`XLA_PYTHON_CLIENT_MEM_FRACTION=.XX`的行为已更改，现在分配总GPU内存的XX%来预分配，而不是以前使用当前可用GPU内存来计算预分配。有关更多详情，请参阅[GPU
    memory allocation](https://jax.readthedocs.io/en/latest/gpu_memory_allocation.html)。'
- en: The deprecated method `.block_host_until_ready()` has been removed. Use `.block_until_ready()`
    instead.
  id: totrans-513
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 废弃的方法`.block_host_until_ready()`已被移除。请改用`.block_until_ready()`。
- en: jax 0.4.0 (Dec 12, 2022)
  id: totrans-514
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.4.0 (2022年12月12日)
- en: The release was yanked.
  id: totrans-515
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此版本已被撤回。
- en: jaxlib 0.4.0 (Dec 12, 2022)
  id: totrans-516
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.4.0 (2022年12月12日)
- en: The release was yanked.
  id: totrans-517
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此版本已被撤回。
- en: jax 0.3.25 (Nov 15, 2022)
  id: totrans-518
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.3.25 (2022年11月15日)
- en: Changes
  id: totrans-519
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变更
- en: '`jax.numpy.linalg.pinv()` now supports the `hermitian` option.'
  id: totrans-520
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.numpy.linalg.pinv()`现在支持`hermitian`选项。'
- en: '`jax.scipy.linalg.hessenberg()` is now supported on CPU only. Requires jaxlib
    > 0.3.24.'
  id: totrans-521
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.scipy.linalg.hessenberg()`现在仅在CPU上支持。需要jaxlib > 0.3.24。'
- en: New functions `jax.lax.linalg.hessenberg()`, `jax.lax.linalg.tridiagonal()`,
    and `jax.lax.linalg.householder_product()` were added. Householder reduction is
    currently CPU-only and tridiagonal reductions are supported on CPU and GPU only.
  id: totrans-522
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新函数`jax.lax.linalg.hessenberg()`，`jax.lax.linalg.tridiagonal()`和`jax.lax.linalg.householder_product()`已添加。Householder约简目前仅支持CPU，三对角约简支持CPU和GPU。
- en: The gradients of `svd` and `jax.numpy.linalg.pinv` are now computed more economically
    for non-square matrices.
  id: totrans-523
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在更经济地计算非方阵的`svd`和`jax.numpy.linalg.pinv`的梯度。
- en: Breaking Changes
  id: totrans-524
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 突破性变更
- en: Deleted the `jax_experimental_name_stack` config option.
  id: totrans-525
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除了`jax_experimental_name_stack`配置选项。
- en: Convert a string `axis_names` arguments to the `jax.experimental.maps.Mesh`
    constructor into a singleton tuple instead of unpacking the string into a sequence
    of character axis names.
  id: totrans-526
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将字符串`axis_names`参数转换为`jax.experimental.maps.Mesh`构造函数的单例元组，而不是将字符串解包为字符轴名称序列。
- en: jaxlib 0.3.25 (Nov 15, 2022)
  id: totrans-527
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.3.25 (2022年11月15日)
- en: Changes
  id: totrans-528
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变更
- en: Added support for tridiagonal reductions on CPU and GPU.
  id: totrans-529
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了对CPU和GPU上三对角约简的支持。
- en: Added support for upper Hessenberg reductions on CPU.
  id: totrans-530
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了对CPU上上Hessenberg约简的支持。
- en: Bugs
  id: totrans-531
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bug修复
- en: Fixed a bug that meant that frames in tracebacks captured by JAX were incorrectly
    mapped to source lines under Python 3.10+
  id: totrans-532
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复了一个bug，导致JAX捕获的回溯中的帧被错误地映射到Python 3.10+下的源行。
- en: jax 0.3.24 (Nov 4, 2022)
  id: totrans-533
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.3.24 (2022年11月4日)
- en: Changes
  id: totrans-534
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变更
- en: JAX should be faster to import. We now import scipy lazily, which accounted
    for a significant fraction of JAX’s import time.
  id: totrans-535
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: JAX导入速度应更快。现在我们懒惰地导入scipy，这在JAX的导入时间中占据了相当大的部分。
- en: Setting the env var `JAX_PERSISTENT_CACHE_MIN_COMPILE_TIME_SECS=$N` can be used
    to limit the number of cache entries written to the persistent cache. By default,
    computations that take 1 second or more to compile will be cached.
  id: totrans-536
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置环境变量`JAX_PERSISTENT_CACHE_MIN_COMPILE_TIME_SECS=$N`可以用于限制写入持久缓存的缓存条目数量。默认情况下，编译时间超过1秒的计算将被缓存。
- en: Added `jax.scipy.stats.mode()`.
  id: totrans-537
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了 `jax.scipy.stats.mode()`。
- en: The default device order used by `pmap` on TPU if no order is specified now
    matches `jax.devices()` for single-process jobs. Previously the two orderings
    differed, which could lead to unnecessary copies or out-of-memory errors. Requiring
    the orderings to agree simplifies matters.
  id: totrans-538
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果在TPU上未指定顺序，则`pmap`的默认设备顺序现在与单进程作业的`jax.devices()`匹配。以前两种排序不同，可能导致不必要的复制或内存不足错误。要求排序一致简化了问题。
- en: Breaking Changes
  id: totrans-539
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 突破性变更
- en: '`jax.numpy.gradient()` now behaves like most other functions in `jax.numpy`,
    and forbids passing lists or tuples in place of arrays ([#12958](https://github.com/google/jax/issues/12958))'
  id: totrans-540
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.numpy.gradient()`现在像`jax.numpy`中的大多数其他函数一样，禁止传递列表或元组以替代数组（[#12958](https://github.com/google/jax/issues/12958)）。'
- en: 'Functions in `jax.numpy.linalg` and `jax.numpy.fft` now uniformly require inputs
    to be array-like: i.e. lists and tuples cannot be used in place of arrays. Part
    of [#7737](https://github.com/google/jax/issues/7737).'
  id: totrans-541
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.numpy.linalg`和`jax.numpy.fft`中的函数现在统一要求输入为数组形式：即不能使用列表和元组代替数组。部分属于[#7737](https://github.com/google/jax/issues/7737)。'
- en: Deprecations
  id: totrans-542
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弃用
- en: '`jax.sharding.MeshPspecSharding` has been renamed to `jax.sharding.NamedSharding`.
    `jax.sharding.MeshPspecSharding` name will be removed in 3 months.'
  id: totrans-543
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.sharding.MeshPspecSharding`已重命名为`jax.sharding.NamedSharding`。`jax.sharding.MeshPspecSharding`名称将在
    3 个月内删除。'
- en: jaxlib 0.3.24 (Nov 4, 2022)
  id: totrans-544
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.3.24（2022 年 11 月 4 日）
- en: Changes
  id: totrans-545
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改
- en: Buffer donation now works on CPU. This may break code that marked buffers for
    donation on CPU but relied on donation not being implemented.
  id: totrans-546
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在在 CPU 上可以使用缓冲器捐赠。这可能会破坏在 CPU 上标记缓冲区进行捐赠但依赖捐赠未实现的代码。
- en: jax 0.3.23 (Oct 12, 2022)
  id: totrans-547
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.3.23（2022 年 10 月 12 日）
- en: Changes
  id: totrans-548
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改
- en: Update Colab TPU driver version for new jaxlib release.
  id: totrans-549
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新 Colab TPU 驱动程序版本以支持新的 jaxlib 发布。
- en: jax 0.3.22 (Oct 11, 2022)
  id: totrans-550
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.3.22（2022 年 10 月 11 日）
- en: Changes
  id: totrans-551
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改
- en: Add `JAX_PLATFORMS=tpu,cpu` as default setting in TPU initialization, so JAX
    will raise an error if TPU cannot be initialized instead of falling back to CPU.
    Set `JAX_PLATFORMS=''` to override this behavior and automatically choose an available
    backend (the original default), or set `JAX_PLATFORMS=cpu` to always use CPU regardless
    of if the TPU is available.
  id: totrans-552
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 TPU 初始化中添加`JAX_PLATFORMS=tpu,cpu`作为默认设置，因此如果无法初始化 TPU，JAX 将引发错误而不是回退到 CPU。设置`JAX_PLATFORMS=''`以覆盖此行为并自动选择可用的后端（原始默认），或设置`JAX_PLATFORMS=cpu`以始终使用
    CPU，而不管 TPU 是否可用。
- en: Deprecations
  id: totrans-553
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弃用
- en: Several test utilities deprecated in JAX v0.3.8 are now removed from `jax.test_util`.
  id: totrans-554
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: JAX v0.3.8 中弃用的几个测试工具现已从`jax.test_util`中移除。
- en: jaxlib 0.3.22 (Oct 11, 2022)
  id: totrans-555
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.3.22（2022 年 10 月 11 日）
- en: jax 0.3.21 (Sep 30, 2022)
  id: totrans-556
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.3.21（2022 年 9 月 30 日）
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.3.20...jax-v0.3.21).'
  id: totrans-557
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交记录](https://github.com/google/jax/compare/jax-v0.3.20...jax-v0.3.21)。'
- en: Changes
  id: totrans-558
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改
- en: The persistent compilation cache will now warn instead of raising an exception
    on error ([#12582](https://github.com/google/jax/issues/12582)), so program execution
    can continue if something goes wrong with the cache. Set `JAX_RAISE_PERSISTENT_CACHE_ERRORS=true`
    to revert this behavior.
  id: totrans-559
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持久化编译缓存现在在出错时会发出警告而不是抛出异常（[#12582](https://github.com/google/jax/issues/12582)），所以如果缓存出现问题，程序可以继续执行。设置`JAX_RAISE_PERSISTENT_CACHE_ERRORS=true`可以恢复此行为。
- en: jax 0.3.20 (Sep 28, 2022)
  id: totrans-560
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.3.20（2022 年 9 月 28 日）
- en: 'Bug fixes:'
  id: totrans-561
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bug 修复：
- en: Adds missing `.pyi` files that were missing from the previous release ([#12536](https://github.com/google/jax/issues/12536)).
  id: totrans-562
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了上一个发布版本中缺失的`.pyi`文件（[#12536](https://github.com/google/jax/issues/12536)）。
- en: Fixes an incompatibility between `jax` 0.3.19 and the libtpu version it pinned
    ([#12550](https://github.com/google/jax/issues/12550)). Requires jaxlib 0.3.20.
  id: totrans-563
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复了`jax` 0.3.19与其固定的 libtpu 版本之间的不兼容性（[#12550](https://github.com/google/jax/issues/12550)）。需要
    jaxlib 0.3.20。
- en: Fix incorrect `pip` url in `setup.py` comment ([#12528](https://github.com/google/jax/issues/12528)).
  id: totrans-564
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复了`setup.py`注释中`pip`的错误网址（[#12528](https://github.com/google/jax/issues/12528)）。
- en: jaxlib 0.3.20 (Sep 28, 2022)
  id: totrans-565
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.3.20（2022 年 9 月 28 日）
- en: '[GitHub commits](https://github.com/google/jax/compare/jaxlib-v0.3.15...jaxlib-v0.3.20).'
  id: totrans-566
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交记录](https://github.com/google/jax/compare/jaxlib-v0.3.15...jaxlib-v0.3.20)。'
- en: Bug fixes
  id: totrans-567
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bug 修复
- en: Fixes support for limiting the visible CUDA devices via `jax_cuda_visible_devices`
    in distributed jobs. This functionality is needed for the JAX/SLURM integration
    on GPU ([#12533](https://github.com/google/jax/issues/12533)).
  id: totrans-568
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复通过`jax_cuda_visible_devices`在分布式作业中限制可见 CUDA 设备的支持。此功能对于 GPU 上的 JAX/SLURM
    集成非常重要（[#12533](https://github.com/google/jax/issues/12533)）。
- en: jax 0.3.19 (Sep 27, 2022)
  id: totrans-569
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.3.19（2022 年 9 月 27 日）
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.3.18...jax-v0.3.19).'
  id: totrans-570
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交记录](https://github.com/google/jax/compare/jax-v0.3.18...jax-v0.3.19)。'
- en: Fixes required jaxlib version.
  id: totrans-571
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要的 jaxlib 版本修复。
- en: jax 0.3.18 (Sep 26, 2022)
  id: totrans-572
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.3.18（2022 年 9 月 26 日）
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.3.17...jax-v0.3.18).'
  id: totrans-573
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交记录](https://github.com/google/jax/compare/jax-v0.3.17...jax-v0.3.18)。'
- en: Changes
  id: totrans-574
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改
- en: Ahead-of-time lowering and compilation functionality (tracked in [#7733](https://github.com/google/jax/issues/7733))
    is stable and public. See [the overview](https://jax.readthedocs.io/en/latest/aot.html)
    and the API docs for `jax.stages`.
  id: totrans-575
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提前编译和编译功能（在[#7733](https://github.com/google/jax/issues/7733)中跟踪）是稳定和公开的。查看[概述](https://jax.readthedocs.io/en/latest/aot.html)和`jax.stages`的
    API 文档。
- en: Introduced `jax.Array`, intended to be used for both `isinstance` checks and
    type annotations for array types in JAX. Notice that this included some subtle
    changes to how `isinstance` works for `jax.numpy.ndarray` for jax-internal objects,
    as `jax.numpy.ndarray` is now a simple alias of `jax.Array`.
  id: totrans-576
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引入了`jax.Array`，用于JAX中数组类型的`isinstance`检查和类型注释。请注意，这包括了对`jax.numpy.ndarray`在JAX内部对象中如何工作的一些微妙更改，因为`jax.numpy.ndarray`现在是`jax.Array`的简单别名。
- en: Breaking changes
  id: totrans-577
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 破坏性变更
- en: '`jax._src` is no longer imported into the public `jax` namespace. This may
    break users that were using JAX internals.'
  id: totrans-578
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax._src`不再导入公共`jax`命名空间。这可能会打破使用JAX内部功能的用户。'
- en: '`jax.soft_pmap` has been deleted. Please use `pjit` or `xmap` instead. `jax.soft_pmap`
    is undocumented. If it were documented, a deprecation period would have been provided.'
  id: totrans-579
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已删除`jax.soft_pmap`。请改用`pjit`或`xmap`。`jax.soft_pmap`未记录文档。如果有文档记录，将提供弃用期。
- en: jax 0.3.17 (Aug 31, 2022)
  id: totrans-580
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.3.17（2022年8月31日）
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.3.16...jax-v0.3.17).'
  id: totrans-581
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交记录](https://github.com/google/jax/compare/jax-v0.3.16...jax-v0.3.17)。'
- en: Bugs
  id: totrans-582
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误修复
- en: Fix corner case issue in gradient of `lax.pow` with an exponent of zero ([#12041](https://github.com/google/jax/issues/12041))
  id: totrans-583
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复了`lax.pow`的梯度在指数为零时的特殊情况问题（[#12041](https://github.com/google/jax/issues/12041)）
- en: Breaking changes
  id: totrans-584
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 破坏性变更
- en: '`jax.checkpoint()`, also known as `jax.remat()`, no longer supports the `concrete`
    option, following the previous version’s deprecation; see [JEP 11830](https://jax.readthedocs.io/en/latest/jep/11830-new-remat-checkpoint.html).'
  id: totrans-585
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.checkpoint()`，又称`jax.remat()`，不再支持`concrete`选项，遵循前一个版本的弃用；请参阅[JEP 11830](https://jax.readthedocs.io/en/latest/jep/11830-new-remat-checkpoint.html)。'
- en: Changes
  id: totrans-586
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变更
- en: Added `jax.pure_callback()` that enables calling back to pure Python functions
    from compiled functions (e.g. functions decorated with `jax.jit` or `jax.pmap`).
  id: totrans-587
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了`jax.pure_callback()`，允许从编译函数（例如用`jax.jit`或`jax.pmap`装饰的函数）调用纯Python函数。
- en: 'Deprecations:'
  id: totrans-588
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弃用：
- en: The deprecated `DeviceArray.tile()` method has been removed. Use `jax.numpy.tile()`
    ([#11944](https://github.com/google/jax/issues/11944)).
  id: totrans-589
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已移除不推荐使用的`DeviceArray.tile()`方法。使用`jax.numpy.tile()`代替（[#11944](https://github.com/google/jax/issues/11944)）。
- en: '`DeviceArray.to_py()` has been deprecated. Use `np.asarray(x)` instead.'
  id: totrans-590
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已弃用`DeviceArray.to_py()`。请改用`np.asarray(x)`。
- en: jax 0.3.16
  id: totrans-591
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.3.16
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.3.15...main).'
  id: totrans-592
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交记录](https://github.com/google/jax/compare/jax-v0.3.15...main)。'
- en: Breaking changes
  id: totrans-593
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 破坏性变更
- en: Support for NumPy 1.19 has been dropped, per the [deprecation policy](https://jax.readthedocs.io/en/latest/deprecation.html).
    Please upgrade to NumPy 1.20 or newer.
  id: totrans-594
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持NumPy 1.19已被移除，根据[弃用政策](https://jax.readthedocs.io/en/latest/deprecation.html)。请升级到NumPy
    1.20或更新版本。
- en: Changes
  id: totrans-595
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变更
- en: Added `jax.debug` that includes utilities for runtime value debugging such at
    `jax.debug.print()` and `jax.debug.breakpoint()`.
  id: totrans-596
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了`jax.debug`，包括用于运行时值调试的实用程序，如`jax.debug.print()`和`jax.debug.breakpoint()`。
- en: Added new documentation for runtime value debugging
  id: totrans-597
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了用于运行时值调试的新文档
- en: Deprecations
  id: totrans-598
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弃用
- en: '`jax.mask()` `jax.shapecheck()` APIs have been removed. See [#11557](https://github.com/google/jax/issues/11557).'
  id: totrans-599
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除了`jax.mask()`和`jax.shapecheck()` API。详见[#11557](https://github.com/google/jax/issues/11557)。
- en: '`jax.experimental.loops` has been removed. See [#10278](https://github.com/google/jax/issues/10278)
    for an alternative API.'
  id: totrans-600
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除了`jax.experimental.loops`。可查看[#10278](https://github.com/google/jax/issues/10278)获取替代API。
- en: '`jax.tree_util.tree_multimap()` has been removed. It has been deprecated since
    JAX release 0.3.5, and `jax.tree_util.tree_map()` is a direct replacement.'
  id: totrans-601
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.tree_util.tree_multimap()`已移除。自JAX版本0.3.5起已被弃用，`jax.tree_util.tree_map()`是直接替换。'
- en: Removed `jax.experimental.stax`; it has long been a deprecated alias of `jax.example_libraries.stax`.
  id: totrans-602
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除了`jax.experimental.stax`；它长期以来一直是`jax.example_libraries.stax`的弃用别名。
- en: Removed `jax.experimental.optimizers`; it has long been a deprecated alias of
    `jax.example_libraries.optimizers`.
  id: totrans-603
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除了`jax.experimental.optimizers`；它长期以来一直是`jax.example_libraries.optimizers`的弃用别名。
- en: '`jax.checkpoint()`, also known as `jax.remat()`, has a new implementation switched
    on by default, meaning the old implementation is deprecated; see [JEP 11830](https://jax.readthedocs.io/en/latest/jep/11830-new-remat-checkpoint.html).'
  id: totrans-604
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.checkpoint()`，又称`jax.remat()`，有了一个新的默认实现，意味着旧的实现已被弃用；请参阅[JEP 11830](https://jax.readthedocs.io/en/latest/jep/11830-new-remat-checkpoint.html)。'
- en: jax 0.3.15 (July 22, 2022)
  id: totrans-605
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.3.15（2022年7月22日）
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.3.14...jax-v0.3.15).'
  id: totrans-606
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交记录](https://github.com/google/jax/compare/jax-v0.3.14...jax-v0.3.15)。'
- en: Changes
  id: totrans-607
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变更
- en: '`JaxTestCase` and `JaxTestLoader` have been removed from `jax.test_util`. These
    classes have been deprecated since v0.3.1 ([#11248](https://github.com/google/jax/issues/11248)).'
  id: totrans-608
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.test_util` 中已移除 `JaxTestCase` 和 `JaxTestLoader` 类，自 v0.3.1 起已弃用（[#11248](https://github.com/google/jax/issues/11248)）。'
- en: Added `jax.scipy.gaussian_kde` ([#11237](https://github.com/google/jax/issues/11237)).
  id: totrans-609
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了 `jax.scipy.gaussian_kde`（[#11237](https://github.com/google/jax/issues/11237)）。
- en: Binary operations between JAX arrays and built-in collections (`dict`, `list`,
    `set`, `tuple`) now raise a `TypeError` in all cases. Previously some cases (particularly
    equality and inequality) would return boolean scalars inconsistent with similar
    operations in NumPy ([#11234](https://github.com/google/jax/issues/11234)).
  id: totrans-610
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: JAX 数组与内置集合（`dict`、`list`、`set`、`tuple`）之间的二元操作现在在所有情况下都会引发 `TypeError`。以前的某些情况（特别是相等性和不等式）会返回与
    NumPy 中类似操作不一致的布尔标量（[#11234](https://github.com/google/jax/issues/11234)）。
- en: 'Several `jax.tree_util` routines accessed as top-level JAX package imports
    are now deprecated, and will be removed in a future JAX release in accordance
    with the API compatibility policy:'
  id: totrans-611
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 几个作为顶级 JAX 包导入的 `jax.tree_util` 例程现已弃用，并将根据 API 兼容性政策在未来的 JAX 发布版本中移除。
- en: '`jax.treedef_is_leaf()` is deprecated in favor of `jax.tree_util.treedef_is_leaf()`'
  id: totrans-612
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.treedef_is_leaf()` 已弃用，推荐使用 `jax.tree_util.treedef_is_leaf()`。'
- en: '`jax.tree_flatten()` is deprecated in favor of `jax.tree_util.tree_flatten()`'
  id: totrans-613
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.tree_flatten()` 已弃用，推荐使用 `jax.tree_util.tree_flatten()`。'
- en: '`jax.tree_leaves()` is deprecated in favor of `jax.tree_util.tree_leaves()`'
  id: totrans-614
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.tree_leaves()` 已弃用，推荐使用 `jax.tree_util.tree_leaves()`。'
- en: '`jax.tree_structure()` is deprecated in favor of `jax.tree_util.tree_structure()`'
  id: totrans-615
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.tree_structure()` 已弃用，推荐使用 `jax.tree_util.tree_structure()`。'
- en: '`jax.tree_transpose()` is deprecated in favor of `jax.tree_util.tree_transpose()`'
  id: totrans-616
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.tree_transpose()` 已弃用，推荐使用 `jax.tree_util.tree_transpose()`。'
- en: '`jax.tree_unflatten()` is deprecated in favor of `jax.tree_util.tree_unflatten()`'
  id: totrans-617
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.tree_unflatten()` 已弃用，推荐使用 `jax.tree_util.tree_unflatten()`。'
- en: The `sym_pos` argument of `jax.scipy.linalg.solve()` is deprecated in favor
    of `assume_a='pos'`, following a similar deprecation in [`scipy.linalg.solve()`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.solve.html#scipy.linalg.solve
    "(in SciPy v1.13.1)").
  id: totrans-618
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.scipy.linalg.solve()` 的 `sym_pos` 参数已弃用，推荐使用 `assume_a=''pos''`，遵循 [`scipy.linalg.solve()`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.solve.html#scipy.linalg.solve
    "(在 SciPy v1.13.1)") 中类似的弃用。'
- en: jaxlib 0.3.15 (July 22, 2022)
  id: totrans-619
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.3.15（2022年7月22日）
- en: '[GitHub commits](https://github.com/google/jax/compare/jaxlib-v0.3.14...jaxlib-v0.3.15).'
  id: totrans-620
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交](https://github.com/google/jax/compare/jaxlib-v0.3.14...jaxlib-v0.3.15)。'
- en: jax 0.3.14 (June 27, 2022)
  id: totrans-621
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.3.14（2022年6月27日）
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.3.13...jax-v0.3.14).'
  id: totrans-622
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交](https://github.com/google/jax/compare/jax-v0.3.13...jax-v0.3.14)。'
- en: Breaking changes
  id: totrans-623
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 破坏性变更
- en: '`jax.experimental.compilation_cache.initialize_cache()` does not support `max_cache_size_ 
    bytes` anymore and will not get that as an input.'
  id: totrans-624
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.experimental.compilation_cache.initialize_cache()` 现在不再支持 `max_cache_size_ 
    bytes`，并且不会将其作为输入。'
- en: '`JAX_PLATFORMS` now raises an exception when platform initialization fails.'
  id: totrans-625
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当平台初始化失败时，`JAX_PLATFORMS` 现在会引发异常。
- en: Changes
  id: totrans-626
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变更
- en: Fixed compatibility problems with NumPy 1.23.
  id: totrans-627
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解决了与 NumPy 1.23 的兼容性问题。
- en: '`jax.numpy.linalg.slogdet()` now accepts an optional `method` argument that
    allows selection between an LU-decomposition based implementation and an implementation
    based on QR decomposition.'
  id: totrans-628
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.numpy.linalg.slogdet()` 现在接受一个可选的 `method` 参数，允许选择基于 LU 分解或基于 QR 分解的实现。'
- en: '`jax.numpy.linalg.qr()` now supports `mode="raw"`.'
  id: totrans-629
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.numpy.linalg.qr()` 现在支持 `mode="raw"`。'
- en: '`pickle`, `copy.copy`, and `copy.deepcopy` now have more complete support when
    used on jax arrays ([#10659](https://github.com/google/jax/issues/10659)). In
    particular:'
  id: totrans-630
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在对 JAX 数组使用 `pickle`、`copy.copy` 和 `copy.deepcopy` 时，现在支持更完整的支持（[#10659](https://github.com/google/jax/issues/10659)）。特别是：
- en: '`pickle` and `deepcopy` previously returned `np.ndarray` objects when used
    on a `DeviceArray`; now `DeviceArray` objects are returned. For `deepcopy`, the
    copied array is on the same device as the original. For `pickle` the deserialized
    array will be on the default device.'
  id: totrans-631
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当对 `DeviceArray` 使用 `pickle` 和 `deepcopy` 时，以前返回 `np.ndarray` 对象，现在返回 `DeviceArray`
    对象。对于 `deepcopy`，复制的数组位于与原始数组相同的设备上。对于 `pickle`，反序列化的数组将位于默认设备上。
- en: Within function transformations (i.e. traced code), `deepcopy` and `copy` previously
    were no-ops. Now they use the same mechanism as `DeviceArray.copy()`.
  id: totrans-632
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在函数转换（即跟踪代码）内部，`deepcopy` 和 `copy` 以前是空操作。现在它们使用与 `DeviceArray.copy()` 相同的机制。
- en: Calling `pickle` on a traced array now results in an explicit `ConcretizationTypeError`.
  id: totrans-633
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对跟踪数组进行 `pickle` 操作现在会导致显式的 `ConcretizationTypeError`。
- en: The implementation of singular value decomposition (SVD) and symmetric/Hermitian
    eigendecomposition should be significantly faster on TPU, especially for matrices
    above 1000x1000 or so. Both now use a spectral divide-and-conquer algorithm for
    eigendecomposition (QDWH-eig).
  id: totrans-634
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 TPU 上，奇异值分解（SVD）和对称/Hermitian 特征分解的实现应显著更快，特别是对于超过 1000x1000 大小的矩阵。现在都使用了谱分裂与征算法进行特征分解（QDWH-eig）。
- en: '`jax.numpy.ldexp()` no longer silently promotes all inputs to float64, instead
    it promotes to float32 for integer inputs of size int32 or smaller ([#10921](https://github.com/google/jax/issues/10921)).'
  id: totrans-635
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.numpy.ldexp()` 现在不再将所有输入默认提升为 float64，而是对于 int32 或更小的整数输入，提升为 float32
    ([#10921](https://github.com/google/jax/issues/10921))。'
- en: Add a `create_perfetto_link` option to `jax.profiler.start_trace()` and `jax.profiler.start_trace()`.
    When used, the profiler will generate a link to the Perfetto UI to view the trace.
  id: totrans-636
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了一个 `create_perfetto_link` 选项到 `jax.profiler.start_trace()` 和 `jax.profiler.start_trace()`。使用时，分析器将生成一个链接到
    Perfetto UI 以查看跟踪信息。
- en: Changed the semantics of `jax.profiler.start_server(...)()` to store the keepalive
    globally, rather than requiring the user to keep a reference to it.
  id: totrans-637
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改了 `jax.profiler.start_server(...)()` 的语义，将 keepalive 全局存储，而不再要求用户保留引用。
- en: Added `jax.random.generalized_normal()`.
  id: totrans-638
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了 `jax.random.generalized_normal()`。
- en: Added `jax.random.ball()`.
  id: totrans-639
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了 `jax.random.ball()`。
- en: Added `jax.default_device()`.
  id: totrans-640
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了 `jax.default_device()`。
- en: Added a `python -m jax.collect_profile` script to manually capture program traces
    as an alternative to the TensorBoard UI.
  id: totrans-641
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了一个 `python -m jax.collect_profile` 脚本，手动捕获程序跟踪，作为 TensorBoard UI 的替代方法。
- en: Added a `jax.named_scope` context manager that adds profiler metadata to Python
    programs (similar to `jax.named_call`).
  id: totrans-642
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了一个 `jax.named_scope` 上下文管理器，向 Python 程序添加分析器元数据（类似于 `jax.named_call`）。
- en: In scatter-update operations (i.e. :attr:`jax.numpy.ndarray.at`), unsafe implicit
    dtype casts are deprecated, and now result in a `FutureWarning`. In a future release,
    this will become an error. An example of an unsafe implicit cast is `jnp.zeros(4,
    dtype=int).at[0].set(1.5)`, in which `1.5` previously was silently truncated to
    `1`.
  id: totrans-643
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 scatter-update 操作（即 :attr:`jax.numpy.ndarray.at`）中，不安全的隐式 dtype 转换已弃用，现在会产生
    `FutureWarning`。在将来的版本中，这将变成一个错误。一个不安全的隐式转换的例子是 `jnp.zeros(4, dtype=int).at[0].set(1.5)`，其中
    `1.5` 之前会被静默截断为 `1`。
- en: '`jax.experimental.compilation_cache.initialize_cache()` now supports gcs bucket
    path as input.'
  id: totrans-644
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.experimental.compilation_cache.initialize_cache()` 现在支持 gcs 存储桶路径作为输入。'
- en: Added `jax.scipy.stats.gennorm()`.
  id: totrans-645
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了 `jax.scipy.stats.gennorm()`。
- en: '`jax.numpy.roots()` is now better behaved when `strip_zeros=False` when coefficients
    have leading zeros ([#11215](https://github.com/google/jax/issues/11215)).'
  id: totrans-646
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.numpy.roots()` 现在在 `strip_zeros=False` 时，在系数有前导零时行为更佳 ([#11215](https://github.com/google/jax/issues/11215))。'
- en: jaxlib 0.3.14 (June 27, 2022)
  id: totrans-647
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.3.14（2022年6月27日）。
- en: '[GitHub commits](https://github.com/google/jax/compare/jaxlib-v0.3.10...jaxlib-v0.3.14).'
  id: totrans-648
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交记录](https://github.com/google/jax/compare/jaxlib-v0.3.10...jaxlib-v0.3.14)。'
- en: x86-64 Mac wheels now require Mac OS 10.14 (Mojave) or newer. Mac OS 10.14 was
    released in 2018, so this should not be a very onerous requirement.
  id: totrans-649
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: x86-64 Mac wheels 现在要求 Mac OS 10.14（Mojave）或更新版本。Mac OS 10.14 发布于2018年，因此这不应该是一个非常繁重的要求。
- en: The bundled version of NCCL was updated to 2.12.12, fixing some deadlocks.
  id: totrans-650
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 捆绑的 NCCL 版本更新到 2.12.12，修复了一些死锁问题。
- en: The Python flatbuffers package is no longer a dependency of jaxlib.
  id: totrans-651
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python flatbuffers 包不再是 jaxlib 的依赖项。
- en: jax 0.3.13 (May 16, 2022)
  id: totrans-652
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.3.13（2022年5月16日）。
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.3.12...jax-v0.3.13).'
  id: totrans-653
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交记录](https://github.com/google/jax/compare/jax-v0.3.12...jax-v0.3.13)。'
- en: jax 0.3.12 (May 15, 2022)
  id: totrans-654
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.3.12（2022年5月15日）。
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.3.11...jax-v0.3.12).'
  id: totrans-655
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交记录](https://github.com/google/jax/compare/jax-v0.3.11...jax-v0.3.12)。'
- en: Changes
  id: totrans-656
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变更：
- en: Fixes [#10717](https://github.com/google/jax/issues/10717).
  id: totrans-657
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复了 [#10717](https://github.com/google/jax/issues/10717)。
- en: jax 0.3.11 (May 15, 2022)
  id: totrans-658
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.3.11（2022年5月15日）。
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.3.10...jax-v0.3.11).'
  id: totrans-659
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交记录](https://github.com/google/jax/compare/jax-v0.3.10...jax-v0.3.11)。'
- en: Changes
  id: totrans-660
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变更：
- en: '`jax.lax.eigh()` now accepts an optional `sort_eigenvalues` argument that allows
    users to opt out of eigenvalue sorting on TPU.'
  id: totrans-661
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.lax.eigh()` 现在接受一个可选的 `sort_eigenvalues` 参数，允许用户在 TPU 上选择不排序特征值。'
- en: Deprecations
  id: totrans-662
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弃用：
- en: Non-array arguments to functions in `jax.lax.linalg` are now marked keyword-only.
    As a backward-compatibility step passing keyword-only arguments positionally yields
    a warning, but in a future JAX release passing keyword-only arguments positionally
    will fail. However, most users should prefer to use `jax.numpy.linalg` instead.
  id: totrans-663
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.lax.linalg` 中的函数现在要求非数组参数必须作为关键字参数传递。为了向后兼容，将关键字参数作为位置参数传递将会得到警告，但在未来的
    JAX 发布中，将会导致失败。大多数用户应该优先考虑使用 `jax.numpy.linalg`。'
- en: '`jax.scipy.linalg.polar_unitary()`, which was a JAX extension to the scipy
    API, is deprecated. Use `jax.scipy.linalg.polar()` instead.'
  id: totrans-664
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.scipy.linalg.polar_unitary()`，这是 JAX 对 scipy API 的扩展，已被弃用。请改用 `jax.scipy.linalg.polar()`。'
- en: jax 0.3.10 (May 3, 2022)
  id: totrans-665
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.3.10 (2022年5月3日)
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.3.9...jax-v0.3.10).'
  id: totrans-666
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交记录](https://github.com/google/jax/compare/jax-v0.3.9...jax-v0.3.10).'
- en: jaxlib 0.3.10 (May 3, 2022)
  id: totrans-667
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.3.10 (2022年5月3日)
- en: '[GitHub commits](https://github.com/google/jax/compare/jaxlib-v0.3.7...jaxlib-v0.3.10).'
  id: totrans-668
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交记录](https://github.com/google/jax/compare/jaxlib-v0.3.7...jaxlib-v0.3.10).'
- en: Changes
  id: totrans-669
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变更
- en: '[TF commit](https://github.com/tensorflow/tensorflow/commit/207d50d253e11c3a3430a700af478a1d524a779a)
    fixes an issue in the MHLO canonicalizer that caused constant folding to take
    a long time or crash for certain programs.'
  id: totrans-670
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[TF 提交记录](https://github.com/tensorflow/tensorflow/commit/207d50d253e11c3a3430a700af478a1d524a779a)
    修复了 MHLO 规范化器中的问题，该问题导致某些程序的常量折叠花费很长时间或崩溃。'
- en: jax 0.3.9 (May 2, 2022)
  id: totrans-671
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.3.9 (2022年5月2日)
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.3.8...jax-v0.3.9).'
  id: totrans-672
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交记录](https://github.com/google/jax/compare/jax-v0.3.8...jax-v0.3.9).'
- en: Changes
  id: totrans-673
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变更
- en: Added support for fully asynchronous checkpointing for GlobalDeviceArray.
  id: totrans-674
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增加了对 GlobalDeviceArray 的完全异步检查点支持。
- en: jax 0.3.8 (April 29 2022)
  id: totrans-675
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.3.8 (2022年4月29日)
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.3.7...jax-v0.3.8).'
  id: totrans-676
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交记录](https://github.com/google/jax/compare/jax-v0.3.7...jax-v0.3.8).'
- en: Changes
  id: totrans-677
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变更
- en: '`jax.numpy.linalg.svd()` on TPUs uses a qdwh-svd solver.'
  id: totrans-678
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 TPU 上，`jax.numpy.linalg.svd()` 现在使用 qdwh-svd 求解器。
- en: '`jax.numpy.linalg.cond()` on TPUs now accepts complex input.'
  id: totrans-679
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 TPU 上，`jax.numpy.linalg.cond()` 现在接受复数输入。
- en: '`jax.numpy.linalg.pinv()` on TPUs now accepts complex input.'
  id: totrans-680
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 TPU 上，`jax.numpy.linalg.pinv()` 现在接受复数输入。
- en: '`jax.numpy.linalg.matrix_rank()` on TPUs now accepts complex input.'
  id: totrans-681
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 TPU 上，`jax.numpy.linalg.matrix_rank()` 现在接受复数输入。
- en: '`jax.scipy.cluster.vq.vq()` has been added.'
  id: totrans-682
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已添加 `jax.scipy.cluster.vq.vq()`。
- en: '`jax.experimental.maps.mesh` has been deleted. Please use `jax.experimental.maps.Mesh`.
    Please see https://jax.readthedocs.io/en/latest/_autosummary/jax.experimental.maps.Mesh.html#jax.experimental.maps.Mesh
    for more information.'
  id: totrans-683
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.experimental.maps.mesh` 已删除。请使用 `jax.experimental.maps.Mesh`。请参阅 [此处](https://jax.readthedocs.io/en/latest/_autosummary/jax.experimental.maps.Mesh.html#jax.experimental.maps.Mesh)
    获取更多信息。'
- en: '`jax.scipy.linalg.qr()` now returns a length-1 tuple rather than the raw array
    when `mode=''r''`, in order to match the behavior of `scipy.linalg.qr` ([#10452](https://github.com/google/jax/issues/10452))'
  id: totrans-684
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当 `mode='r'` 时，`jax.scipy.linalg.qr()` 现在返回一个长度为1的元组，而不是原始数组，以匹配 `scipy.linalg.qr`
    的行为（[#10452](https://github.com/google/jax/issues/10452)）
- en: '`jax.numpy.take_along_axis()` now takes an optional `mode` parameter that specifies
    the behavior of out-of-bounds indexing. By default, invalid values (e.g., NaN)
    will be returned for out-of-bounds indices. In previous versions of JAX, invalid
    indices were clamped into range. The previous behavior can be restored by passing
    `mode="clip"`.'
  id: totrans-685
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.numpy.take_along_axis()` 现在接受一个可选的 `mode` 参数，用于指定超出边界索引的行为。默认情况下，超出边界的索引会返回无效值（例如
    NaN）。在 JAX 的早期版本中，无效的索引会被夹在范围内。可以通过传递 `mode="clip"` 恢复先前的行为。'
- en: '`jax.numpy.take()` now defaults to `mode="fill"`, which returns invalid values
    (e.g., NaN) for out-of-bounds indices.'
  id: totrans-686
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.numpy.take()` 现在默认为 `mode="fill"`，这会对超出索引范围的位置返回无效值（例如 NaN）。'
- en: Scatter operations, such as `x.at[...].set(...)`, now have `"drop"` semantics.
    This has no effect on the scatter operation itself, but it means that when differentiated
    the gradient of a scatter will yield zero cotangents for out-of-bounds indices.
    Previously out-of-bounds indices were clamped into range for the gradient, which
    was not mathematically correct.
  id: totrans-687
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 散点操作，例如 `x.at[...].set(...)`，现在具有 `"drop"` 语义。这对散点操作本身没有影响，但这意味着在进行微分时，散点的梯度对超出边界的索引的余切为零。以前超出边界的索引在梯度中被夹在范围内，这在数学上是不正确的。
- en: '`jax.numpy.take_along_axis()` now raises a `TypeError` if its indices are not
    of an integer type, matching the behavior of [`numpy.take_along_axis()`](https://numpy.org/doc/stable/reference/generated/numpy.take_along_axis.html#numpy.take_along_axis
    "(in NumPy v2.0)"). Previously non-integer indices were silently cast to integers.'
  id: totrans-688
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.numpy.take_along_axis()` 现在如果其索引不是整数类型将会引发 `TypeError`，与 [`numpy.take_along_axis()`](https://numpy.org/doc/stable/reference/generated/numpy.take_along_axis.html#numpy.take_along_axis
    "(in NumPy v2.0)") 的行为一致。先前非整数索引会被静默转换为整数。'
- en: '`jax.numpy.ravel_multi_index()` now raises a `TypeError` if its `dims` argument
    is not of an integer type, matching the behavior of [`numpy.ravel_multi_index()`](https://numpy.org/doc/stable/reference/generated/numpy.ravel_multi_index.html#numpy.ravel_multi_index
    "(in NumPy v2.0)"). Previously non-integer `dims` was silently cast to integers.'
  id: totrans-689
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.numpy.ravel_multi_index()` 现在如果其 `dims` 参数不是整数类型将会引发 `TypeError`，与 [`numpy.ravel_multi_index()`](https://numpy.org/doc/stable/reference/generated/numpy.ravel_multi_index.html#numpy.ravel_multi_index
    "(in NumPy v2.0)") 的行为一致。先前非整数 `dims` 参数会被静默转换为整数。'
- en: '`jax.numpy.split()` now raises a `TypeError` if its `axis` argument is not
    of an integer type, matching the behavior of [`numpy.split()`](https://numpy.org/doc/stable/reference/generated/numpy.split.html#numpy.split
    "(in NumPy v2.0)"). Previously non-integer `axis` was silently cast to integers.'
  id: totrans-690
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.numpy.split()` 现在如果其 `axis` 参数不是整数类型将会引发 `TypeError`，与 [`numpy.split()`](https://numpy.org/doc/stable/reference/generated/numpy.split.html#numpy.split
    "(in NumPy v2.0)") 的行为一致。先前非整数 `axis` 参数会被静默转换为整数。'
- en: '`jax.numpy.indices()` now raises a `TypeError` if its dimensions are not of
    an integer type, matching the behavior of [`numpy.indices()`](https://numpy.org/doc/stable/reference/generated/numpy.indices.html#numpy.indices
    "(in NumPy v2.0)"). Previously non-integer dimensions were silently cast to integers.'
  id: totrans-691
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.numpy.indices()` 现在如果其维度不是整数类型将会引发 `TypeError`，与 [`numpy.indices()`](https://numpy.org/doc/stable/reference/generated/numpy.indices.html#numpy.indices
    "(in NumPy v2.0)") 的行为一致。先前非整数维度会被静默转换为整数。'
- en: '`jax.numpy.diag()` now raises a `TypeError` if its `k` argument is not of an
    integer type, matching the behavior of [`numpy.diag()`](https://numpy.org/doc/stable/reference/generated/numpy.diag.html#numpy.diag
    "(in NumPy v2.0)"). Previously non-integer `k` was silently cast to integers.'
  id: totrans-692
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.numpy.diag()` 现在如果其 `k` 参数不是整数类型将会引发 `TypeError`，与 [`numpy.diag()`](https://numpy.org/doc/stable/reference/generated/numpy.diag.html#numpy.diag
    "(in NumPy v2.0)") 的行为一致。先前非整数 `k` 参数会被静默转换为整数。'
- en: Added `jax.random.orthogonal()`.
  id: totrans-693
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了 `jax.random.orthogonal()`。
- en: Deprecations
  id: totrans-694
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已过时：
- en: Many functions and objects available in `jax.test_util` are now deprecated and
    will raise a warning on import. This includes `cases_from_list`, `check_close`,
    `check_eq`, `device_under_test`, `format_shape_dtype_string`, `rand_uniform`,
    `skip_on_devices`, `with_config`, `xla_bridge`, and `_default_tolerance` ([#10389](https://github.com/google/jax/issues/10389)).
    These, along with previously-deprecated `JaxTestCase`, `JaxTestLoader`, and `BufferDonationTestCase`,
    will be removed in a future JAX release. Most of these utilities can be replaced
    by calls to standard python & numpy testing utilities found in e.g. [`unittest`](https://docs.python.org/3/library/unittest.html#module-unittest
    "(in Python v3.12)"), `absl.testing`, [`numpy.testing`](https://numpy.org/doc/stable/reference/routines.testing.html#module-numpy.testing
    "(in NumPy v2.0)"), etc. JAX-specific functionality such as device checking can
    be replaced through the use of public APIs such as `jax.devices()`. Many of the
    deprecated utilities will still exist in `jax._src.test_util`, but these are not
    public APIs and as such may be changed or removed without notice in future releases.
  id: totrans-695
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 许多 `jax.test_util` 中可用的函数和对象现已过时，并将在导入时引发警告。包括 `cases_from_list`、`check_close`、`check_eq`、`device_under_test`、`format_shape_dtype_string`、`rand_uniform`、`skip_on_devices`、`with_config`、`xla_bridge`
    和 `_default_tolerance`（[#10389](https://github.com/google/jax/issues/10389)）。这些以及先前过时的
    `JaxTestCase`、`JaxTestLoader` 和 `BufferDonationTestCase` 将在未来的 JAX 发布中移除。大多数这些实用程序可以通过调用标准的
    Python 和 NumPy 测试实用程序来替换，如 [`unittest`](https://docs.python.org/3/library/unittest.html#module-unittest
    "(in Python v3.12)")、`absl.testing`、[`numpy.testing`](https://numpy.org/doc/stable/reference/routines.testing.html#module-numpy.testing
    "(in NumPy v2.0)") 等。可以通过公共 API（例如 `jax.devices()`）来替换 JAX 特定的功能，如设备检查。许多已过时的实用程序仍然存在于
    `jax._src.test_util` 中，但这些不是公共 API，因此可能在未来的发布中更改或移除，而不另行通知。
- en: jax 0.3.7 (April 15, 2022)
  id: totrans-696
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.3.7（2022年4月15日）
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.3.6...jax-v0.3.7).'
  id: totrans-697
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交记录](https://github.com/google/jax/compare/jax-v0.3.6...jax-v0.3.7)。'
- en: 'Changes:'
  id: totrans-698
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变更：
- en: Fixed a performance problem if the indices passed to `jax.numpy.take_along_axis()`
    were broadcasted ([#10281](https://github.com/google/jax/issues/10281)).
  id: totrans-699
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复了当传递给 `jax.numpy.take_along_axis()` 的索引广播时的性能问题（[#10281](https://github.com/google/jax/issues/10281)）。
- en: '`jax.scipy.special.expit()` and `jax.scipy.special.logit()` now require their
    arguments to be scalars or JAX arrays. They also now promote integer arguments
    to floating point.'
  id: totrans-700
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.scipy.special.expit()` 和 `jax.scipy.special.logit()` 现在要求其参数为标量或 JAX 数组。它们现在还将整数参数提升为浮点数。'
- en: The `DeviceArray.tile()` method is deprecated, because numpy arrays do not have
    a `tile()` method. As a replacement for this, use `jax.numpy.tile()` ([#10266](https://github.com/google/jax/issues/10266)).
  id: totrans-701
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DeviceArray.tile()` 方法已弃用，因为 numpy 数组没有 `tile()` 方法。作为替代，请使用 `jax.numpy.tile()`（[#10266](https://github.com/google/jax/issues/10266)）。'
- en: jaxlib 0.3.7 (April 15, 2022)
  id: totrans-702
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.3.7（2022年4月15日）
- en: 'Changes:'
  id: totrans-703
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变更：
- en: Linux wheels are now built conforming to the `manylinux2014` standard, instead
    of `manylinux2010`.
  id: totrans-704
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux 版本现在符合 `manylinux2014` 标准，而不是 `manylinux2010`。
- en: jax 0.3.6 (April 12, 2022)
  id: totrans-705
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.3.6（2022年4月12日）
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.3.5...jax-v0.3.6).'
  id: totrans-706
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交记录](https://github.com/google/jax/compare/jax-v0.3.5...jax-v0.3.6)。'
- en: 'Changes:'
  id: totrans-707
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变更：
- en: Upgraded libtpu wheel to a version that fixes a hang when initializing a TPU
    pod. Fixes [#10218](https://github.com/google/jax/issues/10218).
  id: totrans-708
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 libtpu 轮子升级到修复初始化 TPU pod 时挂起的版本。修复了 [#10218](https://github.com/google/jax/issues/10218)。
- en: 'Deprecations:'
  id: totrans-709
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弃用：
- en: '`jax.experimental.loops` is being deprecated. See [#10278](https://github.com/google/jax/issues/10278)
    for an alternative API.'
  id: totrans-710
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.experimental.loops` 将被弃用。参见 [#10278](https://github.com/google/jax/issues/10278)
    了解替代 API。'
- en: jax 0.3.5 (April 7, 2022)
  id: totrans-711
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.3.5（2022年4月7日）
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.3.4...jax-v0.3.5).'
  id: totrans-712
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交记录](https://github.com/google/jax/compare/jax-v0.3.4...jax-v0.3.5)。'
- en: 'Changes:'
  id: totrans-713
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变更：
- en: added `jax.random.loggamma()` & improved behavior of `jax.random.beta()` and
    `jax.random.dirichlet()` for small parameter values ([#9906](https://github.com/google/jax/issues/9906)).
  id: totrans-714
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了 `jax.random.loggamma()` 并改进了对小参数值的 `jax.random.beta()` 和 `jax.random.dirichlet()`
    的行为（[#9906](https://github.com/google/jax/issues/9906)）。
- en: the private `lax_numpy` submodule is no longer exposed in the `jax.numpy` namespace
    ([#10029](https://github.com/google/jax/issues/10029)).
  id: totrans-715
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lax_numpy` 私有子模块不再暴露在 `jax.numpy` 命名空间中（[#10029](https://github.com/google/jax/issues/10029)）。'
- en: added array creation routines `jax.numpy.frombuffer()`, `jax.numpy.fromfunction()`,
    and `jax.numpy.fromstring()` ([#10049](https://github.com/google/jax/issues/10049)).
  id: totrans-716
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了数组创建例程 `jax.numpy.frombuffer()`、`jax.numpy.fromfunction()` 和 `jax.numpy.fromstring()`（[#10049](https://github.com/google/jax/issues/10049)）。
- en: '`DeviceArray.copy()` now returns a `DeviceArray` rather than a `np.ndarray`
    ([#10069](https://github.com/google/jax/issues/10069))'
  id: totrans-717
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DeviceArray.copy()` 现在返回 `DeviceArray` 而不是 `np.ndarray`（[#10069](https://github.com/google/jax/issues/10069)）'
- en: added `jax.scipy.linalg.rsf2csf()`
  id: totrans-718
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了 `jax.scipy.linalg.rsf2csf()`
- en: '`jax.experimental.sharded_jit` has been deprecated and will be removed soon.'
  id: totrans-719
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.experimental.sharded_jit` 已被弃用，并将很快移除。'
- en: 'Deprecations:'
  id: totrans-720
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弃用：
- en: '`jax.nn.normalize()` is being deprecated. Use `jax.nn.standardize()` instead
    ([#9899](https://github.com/google/jax/issues/9899)).'
  id: totrans-721
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.nn.normalize()` 将被弃用。请使用 `jax.nn.standardize()` 替代（[#9899](https://github.com/google/jax/issues/9899)）。'
- en: '`jax.tree_util.tree_multimap()` is deprecated. Use `jax.tree_util.tree_map()`
    instead ([#5746](https://github.com/google/jax/issues/5746)).'
  id: totrans-722
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.tree_util.tree_multimap()` 已弃用。请使用 `jax.tree_util.tree_map()` 替代（[#5746](https://github.com/google/jax/issues/5746)）。'
- en: '`jax.experimental.sharded_jit` is deprecated. Use `pjit` instead.'
  id: totrans-723
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.experimental.sharded_jit` 已弃用。请使用 `pjit` 替代。'
- en: jaxlib 0.3.5 (April 7, 2022)
  id: totrans-724
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.3.5（2022年4月7日）
- en: Bug fixes
  id: totrans-725
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复了 bug
- en: Fixed a bug where double-precision complex-to-real IRFFTs would mutate their
    input buffers on GPU ([#9946](https://github.com/google/jax/issues/9946)).
  id: totrans-726
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复了一个 bug，双精度复杂到实数 IRFFT 在 GPU 上会改变其输入缓冲区（[#9946](https://github.com/google/jax/issues/9946)）。
- en: Fixed incorrect constant-folding of complex scatters ([#10159](https://github.com/google/jax/issues/10159))
  id: totrans-727
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复了复杂散布常量折叠错误（[#10159](https://github.com/google/jax/issues/10159)）
- en: jax 0.3.4 (March 18, 2022)
  id: totrans-728
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.3.4（2022年3月18日）
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.3.3...jax-v0.3.4).'
  id: totrans-729
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交记录](https://github.com/google/jax/compare/jax-v0.3.3...jax-v0.3.4)。'
- en: jax 0.3.3 (March 17, 2022)
  id: totrans-730
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.3.3（2022年3月17日）
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.3.2...jax-v0.3.3).'
  id: totrans-731
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交记录](https://github.com/google/jax/compare/jax-v0.3.2...jax-v0.3.3)。'
- en: jax 0.3.2 (March 16, 2022)
  id: totrans-732
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.3.2（2022年3月16日）
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.3.1...jax-v0.3.2).'
  id: totrans-733
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交记录](https://github.com/google/jax/compare/jax-v0.3.1...jax-v0.3.2)。'
- en: 'Changes:'
  id: totrans-734
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变更：
- en: The functions `jax.ops.index_update`, `jax.ops.index_add`, which were deprecated
    in 0.2.22, have been removed. Please use [the `.at` property on JAX arrays](https://jax.readthedocs.io/en/latest/_autosummary/jax.numpy.ndarray.at.html)
    instead, e.g., `x.at[idx].set(y)`.
  id: totrans-735
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数 `jax.ops.index_update`、`jax.ops.index_add` 在 0.2.22 中已弃用。请使用[JAX 数组上的 `.at`
    属性](https://jax.readthedocs.io/en/latest/_autosummary/jax.numpy.ndarray.at.html)，例如，`x.at[idx].set(y)`。
- en: Moved `jax.experimental.ann.approx_*_k` into `jax.lax`. These functions are
    optimized alternatives to `jax.lax.top_k`.
  id: totrans-736
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `jax.experimental.ann.approx_*_k` 移至 `jax.lax`。这些函数是 `jax.lax.top_k` 的优化替代品。
- en: '`jax.numpy.broadcast_arrays()` and `jax.numpy.broadcast_to()` now require scalar
    or array-like inputs, and will fail if they are passed lists (part of [#7737](https://github.com/google/jax/issues/7737)).'
  id: totrans-737
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.numpy.broadcast_arrays()` 和 `jax.numpy.broadcast_to()` 现在要求标量或类数组输入，并在传递列表时将失败（部分
    [#7737](https://github.com/google/jax/issues/7737)）。'
- en: The standard jax[tpu] install can now be used with Cloud TPU v4 VMs.
  id: totrans-738
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准的 `jax[tpu]` 安装现在可以与 Cloud TPU v4 VMs 一起使用。
- en: '`pjit` now works on CPU (in addition to previous TPU and GPU support).'
  id: totrans-739
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pjit` 现在支持在 CPU 上运行（除了之前的 TPU 和 GPU 支持）。'
- en: jaxlib 0.3.2 (March 16, 2022)
  id: totrans-740
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.3.2 (2022年3月16日)
- en: Changes
  id: totrans-741
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改
- en: '`XlaComputation.as_hlo_text()` now supports printing large constants by passing
    boolean flag `print_large_constants=True`.'
  id: totrans-742
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`XlaComputation.as_hlo_text()` 现在支持通过传递布尔标志 `print_large_constants=True` 打印大常量。'
- en: 'Deprecations:'
  id: totrans-743
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弃用：
- en: The `.block_host_until_ready()` method on JAX arrays has been deprecated. Use
    `.block_until_ready()` instead.
  id: totrans-744
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`JAX` 数组上的 `.block_host_until_ready()` 方法已弃用。请改用 `.block_until_ready()`。'
- en: jax 0.3.1 (Feb 18, 2022)
  id: totrans-745
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.3.1 (2022年2月18日)
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.3.0...jax-v0.3.1).'
  id: totrans-746
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交记录](https://github.com/google/jax/compare/jax-v0.3.0...jax-v0.3.1)。'
- en: 'Changes:'
  id: totrans-747
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改：
- en: '`jax.test_util.JaxTestCase` and `jax.test_util.JaxTestLoader` are now deprecated.
    The suggested replacement is to use `parametrized.TestCase` directly. For tests
    that rely on custom asserts such as `JaxTestCase.assertAllClose()`, the suggested
    replacement is to use standard numpy testing utilities such as [`numpy.testing.assert_allclose()`](https://numpy.org/doc/stable/reference/generated/numpy.testing.assert_allclose.html#numpy.testing.assert_allclose
    "(in NumPy v2.0)"), which work directly with JAX arrays ([#9620](https://github.com/google/jax/issues/9620)).'
  id: totrans-748
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.test_util.JaxTestCase` 和 `jax.test_util.JaxTestLoader` 现在已弃用。建议直接使用 `parametrized.TestCase`
    进行替换。对于依赖于自定义断言（如 `JaxTestCase.assertAllClose()`）的测试，请使用标准的 numpy 测试工具，如[`numpy.testing.assert_allclose()`](https://numpy.org/doc/stable/reference/generated/numpy.testing.assert_allclose.html#numpy.testing.assert_allclose
    "(在 NumPy v2.0 中)")，它们直接与 JAX 数组一起工作（[#9620](https://github.com/google/jax/issues/9620)）。'
- en: '`jax.test_util.JaxTestCase` now sets `jax_numpy_rank_promotion=''raise''` by
    default ([#9562](https://github.com/google/jax/issues/9562)). To recover the previous
    behavior, use the new `jax.test_util.with_config` decorator:'
  id: totrans-749
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.test_util.JaxTestCase` 现在默认设置 `jax_numpy_rank_promotion=''raise''`（[#9562](https://github.com/google/jax/issues/9562)）。要恢复以前的行为，请使用新的
    `jax.test_util.with_config` 装饰器：'
- en: '[PRE0]'
  id: totrans-750
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Added `jax.scipy.linalg.schur()`, `jax.scipy.linalg.sqrtm()`, `jax.scipy.signal.csd()`,
    `jax.scipy.signal.stft()`, `jax.scipy.signal.welch()`.
  id: totrans-751
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了 `jax.scipy.linalg.schur()`、`jax.scipy.linalg.sqrtm()`、`jax.scipy.signal.csd()`、`jax.scipy.signal.stft()`、`jax.scipy.signal.welch()`。
- en: jax 0.3.0 (Feb 10, 2022)
  id: totrans-752
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.3.0 (2022年2月10日)
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.2.28...jax-v0.3.0).'
  id: totrans-753
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交记录](https://github.com/google/jax/compare/jax-v0.2.28...jax-v0.3.0)。'
- en: Changes
  id: totrans-754
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改
- en: jax version has been bumped to 0.3.0\. Please see the [design doc](https://jax.readthedocs.io/en/latest/design_notes/jax_versioning.html)
    for the explanation.
  id: totrans-755
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: jax 版本已升级至 0.3.0\. 请参阅[设计文档](https://jax.readthedocs.io/en/latest/design_notes/jax_versioning.html)以获取说明。
- en: jaxlib 0.3.0 (Feb 10, 2022)
  id: totrans-756
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.3.0 (2022年2月10日)
- en: Changes
  id: totrans-757
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改
- en: Bazel 5.0.0 is now required to build jaxlib.
  id: totrans-758
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在需要 Bazel 5.0.0 来构建 jaxlib。
- en: jaxlib version has been bumped to 0.3.0\. Please see the [design doc](https://jax.readthedocs.io/en/latest/design_notes/jax_versioning.html)
    for the explanation.
  id: totrans-759
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: jaxlib 版本已升级至 0.3.0\. 请参阅[设计文档](https://jax.readthedocs.io/en/latest/design_notes/jax_versioning.html)以获取说明。
- en: jax 0.2.28 (Feb 1, 2022)
  id: totrans-760
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.2.28 (2022年2月1日)
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.2.27...jax-v0.2.28).'
  id: totrans-761
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交记录](https://github.com/google/jax/compare/jax-v0.2.27...jax-v0.2.28)。'
- en: '`jax.jit(f).lower(...).compiler_ir()` now defaults to the MHLO dialect if no
    `dialect=` is passed.'
  id: totrans-762
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果未传递 `dialect=`，`jax.jit(f).lower(...).compiler_ir()` 现在默认为 MHLO 方言。
- en: The `jax.jit(f).lower(...).compiler_ir(dialect='mhlo')` now returns an MLIR
    `ir.Module` object instead of its string representation.
  id: totrans-763
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.jit(f).lower(...).compiler_ir(dialect=''mhlo'')` 现在返回 MLIR `ir.Module`
    对象，而不是其字符串表示。'
- en: jaxlib 0.1.76 (Jan 27, 2022)
  id: totrans-764
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.1.76 (2022年1月27日)
- en: New features
  id: totrans-765
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新功能
- en: 'Includes precompiled SASS for NVidia compute capability 8.0 GPUS (e.g. A100).
    Removes precompiled SASS for compute capability 6.1 so as not to increase the
    number of compute capabilities: GPUs with compute capability 6.1 can use the 6.0
    SASS.'
  id: totrans-766
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包括为 NVidia 计算能力 8.0 的 GPU（例如 A100）预编译的 SASS。删除了计算能力 6.1 的预编译 SASS，以避免增加计算能力的数量：具有计算能力
    6.1 的 GPU 可以使用 6.0 的 SASS。
- en: With jaxlib 0.1.76, JAX uses the MHLO MLIR dialect as its primary target compiler
    IR by default.
  id: totrans-767
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 jaxlib 0.1.76，JAX 默认使用 MHLO MLIR 方言作为其主要目标编译器 IR。
- en: Breaking changes
  id: totrans-768
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Breaking changes
- en: Support for NumPy 1.18 has been dropped, per the [deprecation policy](https://jax.readthedocs.io/en/latest/deprecation.html).
    Please upgrade to a supported NumPy version.
  id: totrans-769
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不再支持 NumPy 1.18，根据[弃用策略](https://jax.readthedocs.io/en/latest/deprecation.html)。请升级到支持的
    NumPy 版本。
- en: Bug fixes
  id: totrans-770
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bug 修复
- en: Fixed a bug where apparently identical pytreedef objects constructed by different
    routes do not compare as equal (#9066).
  id: totrans-771
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即由不同路径构造的表面相同的 pytreedef 对象不会被视为相等（#9066）。
- en: The JAX jit cache requires two static arguments to have identical types for
    a cache hit (#9311).
  id: totrans-772
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: JAX jit 缓存要求两个静态参数具有相同的类型以进行缓存命中（#9311）。
- en: jax 0.2.27 (Jan 18 2022)
  id: totrans-773
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.2.27（2022 年 1 月 18 日）
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.2.26...jax-v0.2.27).'
  id: totrans-774
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交](https://github.com/google/jax/compare/jax-v0.2.26...jax-v0.2.27)。'
- en: 'Breaking changes:'
  id: totrans-775
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Breaking changes：
- en: Support for NumPy 1.18 has been dropped, per the [deprecation policy](https://jax.readthedocs.io/en/latest/deprecation.html).
    Please upgrade to a supported NumPy version.
  id: totrans-776
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不再支持 NumPy 1.18，根据[弃用策略](https://jax.readthedocs.io/en/latest/deprecation.html)。请升级到支持的
    NumPy 版本。
- en: The host_callback primitives have been simplified to drop the special autodiff
    handling for hcb.id_tap and id_print. From now on, only the primals are tapped.
    The old behavior can be obtained (for a limited time) by setting the `JAX_HOST_CALLBACK_AD_TRANSFORMS`
    environment variable, or the `--jax_host_callback_ad_transforms` flag. Additionally,
    added documentation for how to implement the old behavior using JAX custom AD
    APIs ([#8678](https://github.com/google/jax/issues/8678)).
  id: totrans-777
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: host_callback 原语已简化，取消了 hcb.id_tap 和 id_print 的特殊自动微分处理。从现在开始，只有原始值被 tap。可以通过设置
    `JAX_HOST_CALLBACK_AD_TRANSFORMS` 环境变量或 `--jax_host_callback_ad_transforms` 标志来获取旧的行为（在有限时间内）。此外，增加了如何使用
    JAX 自定义 AD API 实现旧行为的文档（[#8678](https://github.com/google/jax/issues/8678)）。
- en: Sorting now matches the behavior of NumPy for `0.0` and `NaN` regardless of
    the bit representation. In particular, `0.0` and `-0.0` are now treated as equivalent,
    where previously `-0.0` was treated as less than `0.0`. Additionally all `NaN`
    representations are now treated as equivalent and sorted to the end of the array.
    Previously negative `NaN` values were sorted to the front of the array, and `NaN`
    values with different internal bit representations were not treated as equivalent,
    and were sorted according to those bit patterns ([#9178](https://github.com/google/jax/issues/9178)).
  id: totrans-778
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 排序现在与 NumPy 的行为匹配，无论位表示如何，对于 `0.0` 和 `NaN` 都是如此。特别是，现在 `0.0` 和 `-0.0` 被视为等价，而之前
    `-0.0` 被视为小于 `0.0`。此外，所有的 `NaN` 表示现在都被视为等价，并且按照这些位模式排序到数组的末尾。以前，负数的 `NaN` 值被排序到数组的前面，并且具有不同内部位表示的
    `NaN` 值不被视为等价，根据这些位模式排序（[#9178](https://github.com/google/jax/issues/9178)）。
- en: '`jax.numpy.unique()` now treats `NaN` values in the same way as `np.unique`
    in NumPy versions 1.21 and newer: at most one `NaN` value will appear in the uniquified
    output ([#9184](https://github.com/google/jax/issues/9184)).'
  id: totrans-779
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.numpy.unique()` 现在在处理 `NaN` 值时与 NumPy 版本 1.21 及更新版本的 `np.unique` 一样：在唯一化的输出中最多只会出现一个
    `NaN` 值（[#9184](https://github.com/google/jax/issues/9184)）。'
- en: 'Bug fixes:'
  id: totrans-780
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bug 修复：
- en: host_callback now supports ad_checkpoint.checkpoint ([#8907](https://github.com/google/jax/issues/8907)).
  id: totrans-781
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在 host_callback 支持 ad_checkpoint.checkpoint（[#8907](https://github.com/google/jax/issues/8907)）。
- en: 'New features:'
  id: totrans-782
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新功能：
- en: add `jax.block_until_ready` ({jax-issue}`#8941)
  id: totrans-783
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了 `jax.block_until_ready`（{jax-issue}`#8941）。
- en: Added a new debugging flag/environment variable `JAX_DUMP_IR_TO=/path`. If set,
    JAX dumps the MHLO/HLO IR it generates for each computation to a file under the
    given path.
  id: totrans-784
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了一个新的调试标志/环境变量 `JAX_DUMP_IR_TO=/path`。如果设置了，JAX 会将它为每个计算生成的 MHLO/HLO IR 转储到给定路径下的文件。
- en: Added `jax.ensure_compile_time_eval` to the public api ([#7987](https://github.com/google/jax/issues/7987)).
  id: totrans-785
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了 `jax.ensure_compile_time_eval` 到公共 API（[#7987](https://github.com/google/jax/issues/7987)）。
- en: jax2tf now supports a flag jax2tf_associative_scan_reductions to change the
    lowering for associative reductions, e.g., jnp.cumsum, to behave like JAX on CPU
    and GPU (to use an associative scan). See the jax2tf README for more details ([#9189](https://github.com/google/jax/issues/9189)).
  id: totrans-786
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: jax2tf 现在支持一个标志 jax2tf_associative_scan_reductions，用于改变关联约简的降低，例如 jnp.cumsum，在
    CPU 和 GPU 上的行为（使用关联扫描）。更多细节请参见 jax2tf README（[#9189](https://github.com/google/jax/issues/9189)）。
- en: jaxlib 0.1.75 (Dec 8, 2021)
  id: totrans-787
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.1.75（2021 年 12 月 8 日）
- en: 'New features:'
  id: totrans-788
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新功能：
- en: Support for python 3.10.
  id: totrans-789
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持 python 3.10。
- en: jax 0.2.26 (Dec 8, 2021)
  id: totrans-790
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.2.26（2021 年 12 月 8 日）
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.2.25...jax-v0.2.26).'
  id: totrans-791
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交记录](https://github.com/google/jax/compare/jax-v0.2.25...jax-v0.2.26)。'
- en: 'Bug fixes:'
  id: totrans-792
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误修复：
- en: Out-of-bounds indices to `jax.ops.segment_sum` will now be handled with `FILL_OR_DROP`
    semantics, as documented. This primarily affects the reverse-mode derivative,
    where gradients corresponding to out-of-bounds indices will now be returned as
    0\. (#8634).
  id: totrans-793
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对 `jax.ops.segment_sum` 的越界索引现在将使用 `FILL_OR_DROP` 语义处理，如文档中所述。这主要影响反向模式导数，其中与越界索引对应的梯度现在将返回为
    0。(#8634)。
- en: jax2tf will force the converted code to use XLA for the code fragments under
    jax.jit, e.g., most jax.numpy functions ([#7839](https://github.com/google/jax/issues/7839)).
  id: totrans-794
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: jax2tf 现在会强制转换代码，使其在 jax.jit 下的代码片段使用 XLA，例如大多数 jax.numpy 函数（[#7839](https://github.com/google/jax/issues/7839)）。
- en: jaxlib 0.1.74 (Nov 17, 2021)
  id: totrans-795
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.1.74（2021 年 11 月 17 日）
- en: Enabled peer-to-peer copies between GPUs. Previously, GPU copies were bounced
    via the host, which is usually slower.
  id: totrans-796
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 GPU 之间启用点对点复制。以前，GPU 复制通过主机反弹，这通常更慢。
- en: Added experimental MLIR Python bindings for use by JAX.
  id: totrans-797
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增加了实验性的 MLIR Python 绑定，供 JAX 使用。
- en: jax 0.2.25 (Nov 10, 2021)
  id: totrans-798
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.2.25（2021 年 11 月 10 日）
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.2.24...jax-v0.2.25).'
  id: totrans-799
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交记录](https://github.com/google/jax/compare/jax-v0.2.24...jax-v0.2.25)。'
- en: 'New features:'
  id: totrans-800
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新功能：
- en: (Experimental) `jax.distributed.initialize` exposes multi-host GPU backend.
  id: totrans-801
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: （实验性）`jax.distributed.initialize` 暴露多主机 GPU 后端。
- en: '`jax.random.permutation` supports new `independent` keyword argument ([#8430](https://github.com/google/jax/issues/8430))'
  id: totrans-802
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.random.permutation` 支持新的 `independent` 关键字参数（[#8430](https://github.com/google/jax/issues/8430)）'
- en: Breaking changes
  id: totrans-803
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 破坏性更改
- en: Moved `jax.experimental.stax` to `jax.example_libraries.stax`
  id: totrans-804
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `jax.experimental.stax` 移至 `jax.example_libraries.stax`
- en: Moved `jax.experimental.optimizers` to `jax.example_libraries.optimizers`
  id: totrans-805
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `jax.experimental.optimizers` 移至 `jax.example_libraries.optimizers`
- en: 'New features:'
  id: totrans-806
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新功能：
- en: Added `jax.lax.linalg.qdwh`.
  id: totrans-807
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了 `jax.lax.linalg.qdwh`。
- en: jax 0.2.24 (Oct 19, 2021)
  id: totrans-808
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.2.24（2021 年 10 月 19 日）
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.2.22...jax-v0.2.24).'
  id: totrans-809
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交记录](https://github.com/google/jax/compare/jax-v0.2.22...jax-v0.2.24)。'
- en: 'New features:'
  id: totrans-810
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新功能：
- en: '`jax.random.choice` and `jax.random.permutation` now support multidimensional
    arrays and an optional `axis` argument ([#8158](https://github.com/google/jax/issues/8158))'
  id: totrans-811
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.random.choice` 和 `jax.random.permutation` 现在支持多维数组和可选的 `axis` 参数（[#8158](https://github.com/google/jax/issues/8158)）。'
- en: 'Breaking changes:'
  id: totrans-812
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 破坏性更改：
- en: '`jax.numpy.take` and `jax.numpy.take_along_axis` now require array-like inputs
    (see [#7737](https://github.com/google/jax/issues/7737))'
  id: totrans-813
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在 `jax.numpy.take` 和 `jax.numpy.take_along_axis` 要求数组样式的输入（参见 [#7737](https://github.com/google/jax/issues/7737)）。
- en: jaxlib 0.1.73 (Oct 18, 2021)
  id: totrans-814
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.1.73（2021 年 10 月 18 日）
- en: Multiple cuDNN versions are now supported for jaxlib GPU `cuda11` wheels.
  id: totrans-815
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在支持多个 cuDNN 版本的 jaxlib GPU `cuda11` 轮。
- en: cuDNN 8.2 or newer. We recommend using the cuDNN 8.2 wheel if your cuDNN installation
    is new enough, since it supports additional functionality.
  id: totrans-816
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: cuDNN 8.2 或更新版本。如果您的 cuDNN 安装足够新，请使用 cuDNN 8.2 轮，因为它支持额外的功能。
- en: cuDNN 8.0.5 or newer.
  id: totrans-817
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: cuDNN 8.0.5 或更新版本。
- en: 'Breaking changes:'
  id: totrans-818
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 破坏性更改：
- en: 'The install commands for GPU jaxlib are as follows:'
  id: totrans-819
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: GPU jaxlib 的安装命令如下：
- en: '[PRE1]'
  id: totrans-820
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: jax 0.2.22 (Oct 12, 2021)
  id: totrans-821
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.2.22（2021 年 10 月 12 日）
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.2.21...jax-v0.2.22).'
  id: totrans-822
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交记录](https://github.com/google/jax/compare/jax-v0.2.21...jax-v0.2.22)。'
- en: Breaking Changes
  id: totrans-823
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 破坏性更改
- en: Static arguments to `jax.pmap` must now be hashable.
  id: totrans-824
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.pmap` 的静态参数现在必须是可哈希的。'
- en: Unhashable static arguments have long been disallowed on `jax.jit`, but they
    were still permitted on `jax.pmap`; `jax.pmap` compared unhashable static arguments
    using object identity.
  id: totrans-825
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 `jax.jit` 上长期不允许非哈希静态参数，但在 `jax.pmap` 上仍然允许；`jax.pmap` 使用对象标识比较非哈希静态参数。
- en: 'This behavior is a footgun, since comparing arguments using object identity
    leads to recompilation each time the object identity changes. Instead, we now
    ban unhashable arguments: if a user of `jax.pmap` wants to compare static arguments
    by object identity, they can define `__hash__` and `__eq__` methods on their objects
    that do that, or wrap their objects in an object that has those operations with
    object identity semantics. Another option is to use `functools.partial` to encapsulate
    the unhashable static arguments into the function object.'
  id: totrans-826
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这种行为可能会导致一些问题，因为使用对象身份比较来比较参数会导致每次对象身份变化时重新编译。现在我们禁止非可哈希参数：如果 `jax.pmap` 的用户希望通过对象身份比较静态参数，他们可以在其对象上定义
    `__hash__` 和 `__eq__` 方法，或者将其对象包装在具有对象身份语义的对象中。另一种选择是使用 `functools.partial` 将非可哈希的静态参数封装到函数对象中。
- en: '`jax.util.partial` was an accidental export that has now been removed. Use
    `functools.partial` from the Python standard library instead.'
  id: totrans-827
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.util.partial` 是一个意外导出的内容，已被移除。请使用 Python 标准库中的 `functools.partial` 替代。'
- en: Deprecations
  id: totrans-828
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Deprecations
- en: The functions `jax.ops.index_update`, `jax.ops.index_add` etc. are deprecated
    and will be removed in a future JAX release. Please use [the `.at` property on
    JAX arrays](https://jax.readthedocs.io/en/latest/_autosummary/jax.numpy.ndarray.at.html)
    instead, e.g., `x.at[idx].set(y)`. For now, these functions produce a `DeprecationWarning`.
  id: totrans-829
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数 `jax.ops.index_update`、`jax.ops.index_add` 等已被弃用，并将在未来的 JAX 版本中移除。请改用 [JAX
    数组上的 `.at` 属性](https://jax.readthedocs.io/en/latest/_autosummary/jax.numpy.ndarray.at.html)，例如
    `x.at[idx].set(y)`。目前，这些函数会产生 `DeprecationWarning`。
- en: 'New features:'
  id: totrans-830
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'New features:'
- en: An optimized C++ code-path improving the dispatch time for `pmap` is now the
    default when using jaxlib 0.1.72 or newer. The feature can be disabled using the
    `--experimental_cpp_pmap` flag (or `JAX_CPP_PMAP` environment variable).
  id: totrans-831
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优化的 C++ 代码路径现在是使用 jaxlib 0.1.72 或更新版本时的默认设置，用于提高 `pmap` 的调度时间。可以使用 `--experimental_cpp_pmap`
    标志（或 `JAX_CPP_PMAP` 环境变量）禁用该功能。
- en: '`jax.numpy.unique` now supports an optional `fill_value` argument ([#8121](https://github.com/google/jax/issues/8121))'
  id: totrans-832
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.numpy.unique` 现在支持一个可选的 `fill_value` 参数（[#8121](https://github.com/google/jax/issues/8121)）。'
- en: jaxlib 0.1.72 (Oct 12, 2021)
  id: totrans-833
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.1.72 (Oct 12, 2021)
- en: 'Breaking changes:'
  id: totrans-834
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Breaking changes:'
- en: Support for CUDA 10.2 and CUDA 10.1 has been dropped. Jaxlib now supports CUDA
    11.1+.
  id: totrans-835
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: CUDA 10.2 和 CUDA 10.1 的支持已被移除。Jaxlib 现在支持 CUDA 11.1+。
- en: 'Bug fixes:'
  id: totrans-836
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Bug fixes:'
- en: Fixes https://github.com/google/jax/issues/7461, which caused wrong outputs
    on all platforms due to incorrect buffer aliasing inside the XLA compiler.
  id: totrans-837
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复了 https://github.com/google/jax/issues/7461，在所有平台上由于 XLA 编译器内部的错误缓冲区别名而导致错误的输出。
- en: jax 0.2.21 (Sept 23, 2021)
  id: totrans-838
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.2.21 (Sept 23, 2021)
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.2.20...jax-v0.2.21).'
  id: totrans-839
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.2.20...jax-v0.2.21).'
- en: Breaking Changes
  id: totrans-840
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Breaking Changes
- en: '`jax.api` has been removed. Functions that were available as `jax.api.*` were
    aliases for functions in `jax.*`; please use the functions in `jax.*` instead.'
  id: totrans-841
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.api` 已被移除。之前作为 `jax.api.*` 可用的函数现在被别名为 `jax.*` 中的函数；请直接使用 `jax.*` 中的函数。'
- en: '`jax.partial`, and `jax.lax.partial` were accidental exports that have now
    been removed. Use `functools.partial` from the Python standard library instead.'
  id: totrans-842
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.partial` 和 `jax.lax.partial` 是意外导出的内容，已被移除。请使用 Python 标准库中的 `functools.partial`
    替代。'
- en: Boolean scalar indices now raise a `TypeError`; previously this silently returned
    wrong results ([#7925](https://github.com/google/jax/issues/7925)).
  id: totrans-843
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 布尔标量索引现在会引发 `TypeError`；之前这些操作会静默返回错误的结果（[#7925](https://github.com/google/jax/issues/7925)）。
- en: Many more `jax.numpy` functions now require array-like inputs, and will error
    if passed a list ([#7747](https://github.com/google/jax/issues/7747) [#7802](https://github.com/google/jax/issues/7802)
    [#7907](https://github.com/google/jax/issues/7907)). See [#7737](https://github.com/google/jax/issues/7737)
    for a discussion of the rationale behind this change.
  id: totrans-844
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 许多 `jax.numpy` 函数现在要求数组样式的输入，如果传递列表将会报错（[#7747](https://github.com/google/jax/issues/7747)
    [#7802](https://github.com/google/jax/issues/7802) [#7907](https://github.com/google/jax/issues/7907)）。查看
    [#7737](https://github.com/google/jax/issues/7737) 以了解此更改背后的原因讨论。
- en: When inside a transformation such as `jax.jit`, `jax.numpy.array` always stages
    the array it produces into the traced computation. Previously `jax.numpy.array`
    would sometimes produce a on-device array, even under a `jax.jit` decorator. This
    change may break code that used JAX arrays to perform shape or index computations
    that must be known statically; the workaround is to perform such computations
    using classic NumPy arrays instead.
  id: totrans-845
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当在 `jax.jit` 等转换内部时，`jax.numpy.array` 总是将其生成的数组分阶段到跟踪的计算中。以前的 `jax.numpy.array`
    有时会在 `jax.jit` 装饰器下生成一个设备上的数组。这种变化可能会破坏使用 JAX 数组执行必须静态知道形状或索引计算的代码；解决方法是改用经典的
    NumPy 数组执行这些计算。
- en: '`jnp.ndarray` is now a true base-class for JAX arrays. In particular, this
    means that for a standard numpy array `x`, `isinstance(x, jnp.ndarray)` will now
    return `False` ([#7927](https://github.com/google/jax/issues/7927)).'
  id: totrans-846
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jnp.ndarray` 现在是 JAX 数组的真正基类。特别地，对于标准的 numpy 数组 `x`，`isinstance(x, jnp.ndarray)`
    现在会返回 `False` ([#7927](https://github.com/google/jax/issues/7927))。'
- en: 'New features:'
  id: totrans-847
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新特性：
- en: Added `jax.numpy.insert()` implementation ([#7936](https://github.com/google/jax/issues/7936)).
  id: totrans-848
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了 `jax.numpy.insert()` 的实现 ([#7936](https://github.com/google/jax/issues/7936))。
- en: jax 0.2.20 (Sept 2, 2021)
  id: totrans-849
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.2.20 (2021年9月2日)
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.2.19...jax-v0.2.20).'
  id: totrans-850
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交记录](https://github.com/google/jax/compare/jax-v0.2.19...jax-v0.2.20)。'
- en: Breaking Changes
  id: totrans-851
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Breaking Changes
- en: '`jnp.poly*` functions now require array-like inputs ([#7732](https://github.com/google/jax/issues/7732))'
  id: totrans-852
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jnp.poly*` 函数现在要求数组样式的输入 ([#7732](https://github.com/google/jax/issues/7732))。'
- en: '`jnp.unique` and other set-like operations now require array-like inputs ([#7662](https://github.com/google/jax/issues/7662))'
  id: totrans-853
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jnp.unique` 和其他类似集合的操作现在要求数组样式的输入 ([#7662](https://github.com/google/jax/issues/7662))。'
- en: jaxlib 0.1.71 (Sep 1, 2021)
  id: totrans-854
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.1.71 (2021年9月1日)
- en: 'Breaking changes:'
  id: totrans-855
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Breaking changes:'
- en: Support for CUDA 11.0 and CUDA 10.1 has been dropped. Jaxlib now supports CUDA
    10.2 and CUDA 11.1+.
  id: totrans-856
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不再支持 CUDA 11.0 和 CUDA 10.1。Jaxlib 现在支持 CUDA 10.2 和 CUDA 11.1+。
- en: jax 0.2.19 (Aug 12, 2021)
  id: totrans-857
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.2.19 (2021年8月12日)
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.2.18...jax-v0.2.19).'
  id: totrans-858
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交记录](https://github.com/google/jax/compare/jax-v0.2.18...jax-v0.2.19)。'
- en: 'Breaking changes:'
  id: totrans-859
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Breaking changes:'
- en: Support for NumPy 1.17 has been dropped, per the [deprecation policy](https://jax.readthedocs.io/en/latest/deprecation.html).
    Please upgrade to a supported NumPy version.
  id: totrans-860
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持 NumPy 1.17 已经被废弃，按照[弃用政策](https://jax.readthedocs.io/en/latest/deprecation.html)。请升级到支持的
    NumPy 版本。
- en: The `jit` decorator has been added around the implementation of a number of
    operators on JAX arrays. This speeds up dispatch times for common operators such
    as `+`.
  id: totrans-861
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 JAX 数组的多个操作的实现周围添加了 `jit` 装饰器。这加快了常见操作如 `+` 的调度时间。
- en: This change should largely be transparent to most users. However, there is one
    known behavioral change, which is that large integer constants may now produce
    an error when passed directly to a JAX operator (e.g., `x + 2**40`). The workaround
    is to cast the constant to an explicit type (e.g., `np.float64(2**40)`).
  id: totrans-862
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个变化对大多数用户基本上是透明的。但是，有一个已知的行为变化，即直接传递给 JAX 操作符的大整数常数现在可能会产生错误（例如 `x + 2**40`）。解决方法是将常数转换为显式类型（例如
    `np.float64(2**40)`）。
- en: 'New features:'
  id: totrans-863
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新特性：
- en: Improved the support for shape polymorphism in jax2tf for operations that need
    to use a dimension size in array computation, e.g., `jnp.mean`. ([#7317](https://github.com/google/jax/issues/7317))
  id: totrans-864
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改进了对需要在数组计算中使用维度大小的操作在 jax2tf 中的形状多态支持，例如 `jnp.mean`。 ([#7317](https://github.com/google/jax/issues/7317))。
- en: 'Bug fixes:'
  id: totrans-865
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bug 修复：
- en: Some leaked trace errors from the previous release ([#7613](https://github.com/google/jax/issues/7613))
  id: totrans-866
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上一个版本的泄漏的追踪错误 ([#7613](https://github.com/google/jax/issues/7613))。
- en: jaxlib 0.1.70 (Aug 9, 2021)
  id: totrans-867
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.1.70 (2021年8月9日)
- en: 'Breaking changes:'
  id: totrans-868
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Breaking changes:'
- en: Support for Python 3.6 has been dropped, per the [deprecation policy](https://jax.readthedocs.io/en/latest/deprecation.html).
    Please upgrade to a supported Python version.
  id: totrans-869
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持 Python 3.6 已经被废弃，按照[弃用政策](https://jax.readthedocs.io/en/latest/deprecation.html)。请升级到支持的
    Python 版本。
- en: Support for NumPy 1.17 has been dropped, per the [deprecation policy](https://jax.readthedocs.io/en/latest/deprecation.html).
    Please upgrade to a supported NumPy version.
  id: totrans-870
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持 NumPy 1.17 已经被废弃，按照[弃用政策](https://jax.readthedocs.io/en/latest/deprecation.html)。请升级到支持的
    NumPy 版本。
- en: The host_callback mechanism now uses one thread per local device for making
    the calls to the Python callbacks. Previously there was a single thread for all
    devices. This means that the callbacks may now be called interleaved. The callbacks
    corresponding to one device will still be called in sequence.
  id: totrans-871
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在主机回调机制每个本地设备使用一个线程来调用Python回调。以前所有设备共用一个线程。这意味着现在回调可能交错调用。仍然会按顺序调用一个设备对应的所有回调。
- en: jax 0.2.18 (July 21 2021)
  id: totrans-872
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.2.18（2021年7月21日）
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.2.17...jax-v0.2.18).'
  id: totrans-873
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交记录](https://github.com/google/jax/compare/jax-v0.2.17...jax-v0.2.18)。'
- en: 'Breaking changes:'
  id: totrans-874
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Breaking 变更：
- en: Support for Python 3.6 has been dropped, per the [deprecation policy](https://jax.readthedocs.io/en/latest/deprecation.html).
    Please upgrade to a supported Python version.
  id: totrans-875
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据[弃用策略](https://jax.readthedocs.io/en/latest/deprecation.html)，不再支持Python 3.6。请升级到支持的Python版本。
- en: The minimum jaxlib version is now 0.1.69.
  id: totrans-876
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: jaxlib最低版本现在是0.1.69。
- en: The `backend` argument to `jax.dlpack.from_dlpack()` has been removed.
  id: totrans-877
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.dlpack.from_dlpack()` 的 `backend` 参数已移除。'
- en: 'New features:'
  id: totrans-878
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新功能：
- en: Added a polar decomposition (`jax.scipy.linalg.polar()`).
  id: totrans-879
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了极分解（`jax.scipy.linalg.polar()`）。
- en: 'Bug fixes:'
  id: totrans-880
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bug 修复：
- en: Tightened the checks for lax.argmin and lax.argmax to ensure they are not used
    with an invalid `axis` value, or with an empty reduction dimension. ([#7196](https://github.com/google/jax/issues/7196))
  id: totrans-881
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加强了对lax.argmin和lax.argmax的检查，以确保它们不会使用无效的 `axis` 值或空的减少维度。 （[#7196](https://github.com/google/jax/issues/7196)）
- en: jaxlib 0.1.69 (July 9 2021)
  id: totrans-882
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.1.69（2021年7月9日）
- en: Fix bugs in TFRT CPU backend that results in incorrect results.
  id: totrans-883
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复了TFRT CPU后端中导致结果不正确的错误。
- en: jax 0.2.17 (July 9 2021)
  id: totrans-884
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.2.17（2021年7月9日）
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.2.16...jax-v0.2.17).'
  id: totrans-885
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交记录](https://github.com/google/jax/compare/jax-v0.2.16...jax-v0.2.17)。'
- en: 'Bug fixes:'
  id: totrans-886
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bug 修复：
- en: 'Default to the older “stream_executor” CPU runtime for jaxlib <= 0.1.68 to
    work around #7229, which caused wrong outputs on CPU due to a concurrency problem.'
  id: totrans-887
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于jaxlib <= 0.1.68，默认使用较旧的“stream_executor” CPU运行时，以解决#7229，这导致CPU上由于并发问题输出错误结果。
- en: 'New features:'
  id: totrans-888
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新功能：
- en: New SciPy function `jax.scipy.special.sph_harm()`.
  id: totrans-889
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的SciPy函数`jax.scipy.special.sph_harm()`。
- en: Reverse-mode autodiff functions (`jax.grad()`, `jax.value_and_grad()`, `jax.vjp()`,
    and `jax.linear_transpose()`) support a parameter that indicates which named axes
    should be summed over in the backward pass if they were broadcasted over in the
    forward pass. This enables use of these APIs in a non-per-example way inside maps
    (initially only `jax.experimental.maps.xmap()`) ([#6950](https://github.com/google/jax/issues/6950)).
  id: totrans-890
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 反向模式自动微分函数（`jax.grad()`，`jax.value_and_grad()`，`jax.vjp()` 和 `jax.linear_transpose()`）支持一个参数，指示在后向传递中应该对哪些命名轴进行求和，如果它们在前向传递中被广播。这使得可以在maps内部以非每个示例的方式使用这些API（最初仅
    `jax.experimental.maps.xmap()`）（[#6950](https://github.com/google/jax/issues/6950)）。
- en: jax 0.2.16 (June 23 2021)
  id: totrans-891
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.2.16（2021年6月23日）
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.2.15...jax-v0.2.16).'
  id: totrans-892
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交记录](https://github.com/google/jax/compare/jax-v0.2.15...jax-v0.2.16)。'
- en: jax 0.2.15 (June 23 2021)
  id: totrans-893
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.2.15（2021年6月23日）
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.2.14...jax-v0.2.15).'
  id: totrans-894
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交记录](https://github.com/google/jax/compare/jax-v0.2.14...jax-v0.2.15)。'
- en: 'New features:'
  id: totrans-895
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新功能：
- en: '[#7042](https://github.com/google/jax/pull/7042) Turned on TFRT CPU backend
    with significant dispatch performance improvements on CPU.'
  id: totrans-896
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[#7042](https://github.com/google/jax/pull/7042) 使用了TFRT CPU后端，在CPU上显著提升了分派性能。'
- en: The `jax2tf.convert()` supports inequalities and min/max for booleans ([#6956](https://github.com/google/jax/issues/6956)).
  id: totrans-897
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax2tf.convert()` 支持布尔型不等式和min/max函数（[#6956](https://github.com/google/jax/issues/6956)）。'
- en: New SciPy function `jax.scipy.special.lpmn_values()`.
  id: totrans-898
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的SciPy函数`jax.scipy.special.lpmn_values()`。
- en: 'Breaking changes:'
  id: totrans-899
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Breaking 变更：
- en: Support for NumPy 1.16 has been dropped, per the [deprecation policy](https://jax.readthedocs.io/en/latest/deprecation.html).
  id: totrans-900
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据[弃用策略](https://jax.readthedocs.io/en/latest/deprecation.html)，不再支持NumPy 1.16。
- en: 'Bug fixes:'
  id: totrans-901
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bug 修复：
- en: 'Fixed bug that prevented round-tripping from JAX to TF and back: `jax2tf.call_tf(jax2tf.convert)`
    ([#6947](https://github.com/google/jax/issues/6947)).'
  id: totrans-902
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复了阻止从JAX到TF再到JAX回传的错误：`jax2tf.call_tf(jax2tf.convert)`（[#6947](https://github.com/google/jax/issues/6947)）。
- en: jaxlib 0.1.68 (June 23 2021)
  id: totrans-903
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.1.68（2021年6月23日）
- en: 'Bug fixes:'
  id: totrans-904
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bug 修复：
- en: Fixed bug in TFRT CPU backend that gets nans when transfer TPU buffer to CPU.
  id: totrans-905
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复了TFRT CPU后端中将TPU缓冲区传输到CPU时出现NaN的错误。
- en: jax 0.2.14 (June 10 2021)
  id: totrans-906
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.2.14（2021年6月10日）
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.2.13...jax-v0.2.14).'
  id: totrans-907
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交记录](https://github.com/google/jax/compare/jax-v0.2.13...jax-v0.2.14)。'
- en: 'New features:'
  id: totrans-908
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新功能：
- en: The `jax2tf.convert()` now has support for `pjit` and `sharded_jit`.
  id: totrans-909
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax2tf.convert()` 现在支持 `pjit` 和 `sharded_jit`。'
- en: A new configuration option JAX_TRACEBACK_FILTERING controls how JAX filters
    tracebacks.
  id: totrans-910
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的配置选项 JAX_TRACEBACK_FILTERING 控制 JAX 如何过滤回溯信息。
- en: A new traceback filtering mode using `__tracebackhide__` is now enabled by default
    in sufficiently recent versions of IPython.
  id: totrans-911
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在足够新的 IPython 版本中，默认启用了使用 `__tracebackhide__` 的新的回溯过滤模式。
- en: The `jax2tf.convert()` supports shape polymorphism even when the unknown dimensions
    are used in arithmetic operations, e.g., `jnp.reshape(-1)` ([#6827](https://github.com/google/jax/issues/6827)).
  id: totrans-912
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax2tf.convert()` 在算术操作中使用未知维度时，即使在形状多态性中，也支持形状多态性，例如 `jnp.reshape(-1)`（[#6827](https://github.com/google/jax/issues/6827)）。'
- en: The `jax2tf.convert()` generates custom attributes with location information
    in TF ops. The code that XLA generates after jax2tf has the same location information
    as JAX/XLA.
  id: totrans-913
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax2tf.convert()` 现在在 TF 操作中生成具有位置信息的自定义属性。在 jax2tf 之后 XLA 生成的代码具有与 JAX/XLA
    相同的位置信息。'
- en: New SciPy function `jax.scipy.special.lpmn()`.
  id: totrans-914
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的 SciPy 函数 `jax.scipy.special.lpmn()`。
- en: 'Bug fixes:'
  id: totrans-915
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Bug fixes:'
- en: The `jax2tf.convert()` now ensures that it uses the same typing rules for Python
    scalars and for choosing 32-bit vs. 64-bit computations as JAX ([#6883](https://github.com/google/jax/issues/6883)).
  id: totrans-916
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax2tf.convert()` 现在确保对于 Python 标量和选择 32 位 vs. 64 位计算时使用相同的类型规则，如 JAX（[#6883](https://github.com/google/jax/issues/6883)）。'
- en: The `jax2tf.convert()` now scopes the `enable_xla` conversion parameter properly
    to apply only during the just-in-time conversion ([#6720](https://github.com/google/jax/issues/6720)).
  id: totrans-917
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax2tf.convert()` 现在正确地将 `enable_xla` 转换参数限定范围到仅在即时转换期间应用（[#6720](https://github.com/google/jax/issues/6720)）。'
- en: The `jax2tf.convert()` now converts `lax.dot_general` using the `XlaDot` TensorFlow
    op, for better fidelity w.r.t. JAX numerical precision ([#6717](https://github.com/google/jax/issues/6717)).
  id: totrans-918
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax2tf.convert()` 现在使用 `XlaDot` TensorFlow 操作来转换 `lax.dot_general`，以提高与 JAX
    数值精度的一致性（[#6717](https://github.com/google/jax/issues/6717)）。'
- en: The `jax2tf.convert()` now has support for inequality comparisons and min/max
    for complex numbers ([#6892](https://github.com/google/jax/issues/6892)).
  id: totrans-919
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax2tf.convert()` 现在支持复数的不等式比较和最小/最大值（[#6892](https://github.com/google/jax/issues/6892)）。'
- en: jaxlib 0.1.67 (May 17 2021)
  id: totrans-920
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.1.67（2021年5月17日）
- en: jaxlib 0.1.66 (May 11 2021)
  id: totrans-921
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.1.66（2021年5月11日）
- en: 'New features:'
  id: totrans-922
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '新特性:'
- en: CUDA 11.1 wheels are now supported on all CUDA 11 versions 11.1 or higher.
  id: totrans-923
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在支持在所有 CUDA 11 版本（11.1 或更高版本）上使用 CUDA 11.1 wheels。
- en: NVidia now promises compatibility between CUDA minor releases starting with
    CUDA 11.1\. This means that JAX can release a single CUDA 11.1 wheel that is compatible
    with CUDA 11.2 and 11.3.
  id: totrans-924
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: NVIDIA 现在承诺从 CUDA 11.1 开始兼容 CUDA 小版本更新。这意味着 JAX 可以发布一个兼容 CUDA 11.2 和 11.3 的单个
    CUDA 11.1 wheel。
- en: There is no longer a separate jaxlib release for CUDA 11.2 (or higher); use
    the CUDA 11.1 wheel for those versions (cuda111).
  id: totrans-925
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不再为 CUDA 11.2（或更高版本）发布单独的 jaxlib 版本；对于这些版本，请使用 CUDA 11.1 wheel（cuda111）。
- en: Jaxlib now bundles `libdevice.10.bc` in CUDA wheels. There should be no need
    to point JAX to a CUDA installation to find this file.
  id: totrans-926
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jaxlib 现在在 CUDA wheels 中捆绑 `libdevice.10.bc`。不需要指定 CUDA 安装路径来查找此文件。
- en: Added automatic support for static keyword arguments to the `jit()` implementation.
  id: totrans-927
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jit()` 实现自动支持静态关键字参数。'
- en: Added support for pretransformation exception traces.
  id: totrans-928
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了对预转换异常跟踪的支持。
- en: Initial support for pruning unused arguments from `jit()` -transformed computations.
    Pruning is still a work in progress.
  id: totrans-929
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初步支持从 `jit()` 转换的计算中剪枝未使用的参数。剪枝仍在进行中。
- en: Improved the string representation of `PyTreeDef` objects.
  id: totrans-930
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改进了 `PyTreeDef` 对象的字符串表示。
- en: Added support for XLA’s variadic ReduceWindow.
  id: totrans-931
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了对 XLA 可变 ReduceWindow 的支持。
- en: 'Bug fixes:'
  id: totrans-932
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Bug fixes:'
- en: Fixed a bug in the remote cloud TPU support when large numbers of arguments
    are passed to a computation.
  id: totrans-933
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复了在远程云 TPU 支持中传递大量参数时的 bug。
- en: Fix a bug that meant that JAX garbage collection was not triggered by `jit()`
    transformed functions.
  id: totrans-934
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复了一个问题，即 `jit()` 转换的函数未触发 JAX 垃圾回收。
- en: jax 0.2.13 (May 3 2021)
  id: totrans-935
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.2.13（2021年5月3日）
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.2.12...jax-v0.2.13).'
  id: totrans-936
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交](https://github.com/google/jax/compare/jax-v0.2.12...jax-v0.2.13)。'
- en: 'New features:'
  id: totrans-937
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '新特性:'
- en: When combined with jaxlib 0.1.66, `jax.jit()` now supports static keyword arguments.
    A new `static_argnames` option has been added to specify keyword arguments as
    static.
  id: totrans-938
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结合 jaxlib 0.1.66 使用时，`jax.jit()` 现在支持静态关键字参数。新增了 `static_argnames` 选项以指定关键字参数为静态。
- en: '`jax.nonzero()` has a new optional `size` argument that allows it to be used
    within `jit` ([#6501](https://github.com/google/jax/issues/6501))'
  id: totrans-939
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.nonzero()` 现在有一个新的可选参数 `size`，允许在 `jit` 内使用 ([#6501](https://github.com/google/jax/issues/6501))。'
- en: '`jax.numpy.unique()` now supports the `axis` argument ([#6532](https://github.com/google/jax/issues/6532)).'
  id: totrans-940
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.numpy.unique()` 现在支持 `axis` 参数 ([#6532](https://github.com/google/jax/issues/6532))。'
- en: '`jax.experimental.host_callback.call()` now supports `pjit.pjit` ([#6569](https://github.com/google/jax/issues/6569)).'
  id: totrans-941
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.experimental.host_callback.call()` 现在支持 `pjit.pjit` ([#6569](https://github.com/google/jax/issues/6569))。'
- en: Added `jax.scipy.linalg.eigh_tridiagonal()` that computes the eigenvalues of
    a tridiagonal matrix. Only eigenvalues are supported at present.
  id: totrans-942
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了 `jax.scipy.linalg.eigh_tridiagonal()`，用于计算三对角矩阵的特征值。目前仅支持特征值。
- en: The order of the filtered and unfiltered stack traces in exceptions has been
    changed. The traceback attached to an exception thrown from JAX-transformed code
    is now filtered, with an `UnfilteredStackTrace` exception containing the original
    trace as the `__cause__` of the filtered exception. Filtered stack traces now
    also work with Python 3.6.
  id: totrans-943
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 异常中筛选和未筛选的堆栈跟踪顺序已更改。从 JAX 转换代码中抛出的异常现在附带有过滤后的回溯，`UnfilteredStackTrace` 异常包含原始跟踪作为过滤异常的
    `__cause__`。现在，筛选的堆栈跟踪也适用于 Python 3.6。
- en: If an exception is thrown by code that has been transformed by reverse-mode
    automatic differentiation, JAX now attempts to attach as a `__cause__` of the
    exception a `JaxStackTraceBeforeTransformation` object that contains the stack
    trace that created the original operation in the forward pass. Requires jaxlib
    0.1.66.
  id: totrans-944
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果由反向模式自动微分转换的代码引发异常，JAX 现在尝试附加一个 `JaxStackTraceBeforeTransformation` 对象作为异常的
    `__cause__`，该对象包含在正向传递中创建原始操作的堆栈跟踪。需要 jaxlib 0.1.66。
- en: 'Breaking changes:'
  id: totrans-945
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 破坏性变更：
- en: The following function names have changed. There are still aliases, so this
    should not break existing code, but the aliases will eventually be removed so
    please change your code.
  id: totrans-946
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下列函数名称已更改。仍然存在别名，因此不应该破坏现有代码，但别名最终将被移除，请更改您的代码。
- en: '`host_id` –> `process_index()`'
  id: totrans-947
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`host_id` –> `process_index()`'
- en: '`host_count` –> `process_count()`'
  id: totrans-948
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`host_count` –> `process_count()`'
- en: '`host_ids` –> `range(jax.process_count())`'
  id: totrans-949
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`host_ids` –> `range(jax.process_count())`'
- en: Similarly, the argument to `local_devices()` has been renamed from `host_id`
    to `process_index`.
  id: totrans-950
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 同样地，`local_devices()` 的参数已从 `host_id` 重命名为 `process_index`。
- en: Arguments to `jax.jit()` other than the function are now marked as keyword-only.
    This change is to prevent accidental breakage when arguments are added to `jit`.
  id: totrans-951
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 除了函数之外的 `jax.jit()` 参数现在标记为仅限关键字。此更改旨在防止在向 `jit` 添加参数时意外破坏代码。
- en: 'Bug fixes:'
  id: totrans-952
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bug 修复：
- en: The `jax2tf.convert()` now works in presence of gradients for functions with
    integer inputs ([#6360](https://github.com/google/jax/issues/6360)).
  id: totrans-953
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在 `jax2tf.convert()` 在带有整数输入的函数梯度存在时能正常工作 ([#6360](https://github.com/google/jax/issues/6360))。
- en: Fixed assertion failure in `jax2tf.call_tf()` when used with captured `tf.Variable`
    ([#6572](https://github.com/google/jax/issues/6572)).
  id: totrans-954
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复了 `jax2tf.call_tf()` 在与捕获的 `tf.Variable` 结合使用时的断言失败 ([#6572](https://github.com/google/jax/issues/6572))。
- en: jaxlib 0.1.65 (April 7 2021)
  id: totrans-955
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.1.65（2021 年 4 月 7 日）
- en: jax 0.2.12 (April 1 2021)
  id: totrans-956
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.2.12（2021 年 4 月 1 日）
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.2.11...v0.2.12).'
  id: totrans-957
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交记录](https://github.com/google/jax/compare/jax-v0.2.11...v0.2.12)。'
- en: New features
  id: totrans-958
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新功能
- en: 'New profiling APIs: `jax.profiler.start_trace()`, `jax.profiler.stop_trace()`,
    and `jax.profiler.trace()`'
  id: totrans-959
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的分析 API：`jax.profiler.start_trace()`，`jax.profiler.stop_trace()` 和 `jax.profiler.trace()`
- en: '`jax.lax.reduce()` is now differentiable.'
  id: totrans-960
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.lax.reduce()` 现在可微分。'
- en: 'Breaking changes:'
  id: totrans-961
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 破坏性变更：
- en: The minimum jaxlib version is now 0.1.64.
  id: totrans-962
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最低的 jaxlib 版本现在是 0.1.64。
- en: Some profiler APIs names have been changed. There are still aliases, so this
    should not break existing code, but the aliases will eventually be removed so
    please change your code.
  id: totrans-963
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些分析器 API 名称已更改。仍然存在别名，因此不应该破坏现有代码，但别名最终将被移除，请更改您的代码。
- en: '`TraceContext` –> `TraceAnnotation()`'
  id: totrans-964
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TraceContext` –> `TraceAnnotation()`'
- en: '`StepTraceContext` –> `StepTraceAnnotation()`'
  id: totrans-965
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`StepTraceContext` –> `StepTraceAnnotation()`'
- en: '`trace_function` –> `annotate_function()`'
  id: totrans-966
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`trace_function` –> `annotate_function()`'
- en: Omnistaging can no longer be disabled. See [omnistaging](https://github.com/google/jax/blob/main/docs/design_notes/omnistaging.md)
    for more information.
  id: totrans-967
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无法禁用全局分析。有关更多信息，请参阅 [omnistaging](https://github.com/google/jax/blob/main/docs/design_notes/omnistaging.md)。
- en: Python integers larger than the maximum `int64` value will now lead to an overflow
    in all cases, rather than being silently converted to `uint64` in some cases ([#6047](https://github.com/google/jax/issues/6047)).
  id: totrans-968
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python整数大于最大的`int64`值现在在所有情况下都会导致溢出，而不是在某些情况下静默转换为`uint64`（[#6047](https://github.com/google/jax/issues/6047)）。
- en: Outside X64 mode, Python integers outside the range representable by `int32`
    will now lead to an `OverflowError` rather than having their value silently truncated.
  id: totrans-969
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在非X64模式下，超出`int32`可表示范围的Python整数现在将导致`OverflowError`，而不是静默截断其值。
- en: 'Bug fixes:'
  id: totrans-970
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bug 修复：
- en: '`host_callback` now supports empty arrays in arguments and results ([#6262](https://github.com/google/jax/issues/6262)).'
  id: totrans-971
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`host_callback`现在支持参数和结果中的空数组（[#6262](https://github.com/google/jax/issues/6262)）。'
- en: '`jax.random.randint()` clips rather than wraps of out-of-bounds limits, and
    can now generate integers in the full range of the specified dtype ([#5868](https://github.com/google/jax/issues/5868))'
  id: totrans-972
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.random.randint()`在超出限制范围时会剪切而不是包裹，现在可以生成指定dtype的整数的全部范围（[#5868](https://github.com/google/jax/issues/5868)）。'
- en: jax 0.2.11 (March 23 2021)
  id: totrans-973
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.2.11（2021年3月23日）
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.2.10...jax-v0.2.11).'
  id: totrans-974
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交记录](https://github.com/google/jax/compare/jax-v0.2.10...jax-v0.2.11)。'
- en: 'New features:'
  id: totrans-975
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新特性：
- en: '[#6112](https://github.com/google/jax/pull/6112) added context managers: `jax.enable_checks`,
    `jax.check_tracer_leaks`, `jax.debug_nans`, `jax.debug_infs`, `jax.log_compiles`.'
  id: totrans-976
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[#6112](https://github.com/google/jax/pull/6112) 添加了上下文管理器：`jax.enable_checks`，`jax.check_tracer_leaks`，`jax.debug_nans`，`jax.debug_infs`，`jax.log_compiles`。'
- en: '[#6085](https://github.com/google/jax/pull/6085) added `jnp.delete`'
  id: totrans-977
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[#6085](https://github.com/google/jax/pull/6085) 添加了`jnp.delete`'
- en: 'Bug fixes:'
  id: totrans-978
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bug 修复：
- en: '[#6136](https://github.com/google/jax/pull/6136) generalized `jax.flatten_util.ravel_pytree`
    to handle integer dtypes.'
  id: totrans-979
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[#6136](https://github.com/google/jax/pull/6136) 泛化了`jax.flatten_util.ravel_pytree`以处理整数dtype。'
- en: '[#6129](https://github.com/google/jax/issues/6129) fixed a bug with handling
    some constants like `enum.IntEnums`'
  id: totrans-980
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[#6129](https://github.com/google/jax/issues/6129) 修复了处理像`enum.IntEnums`这样的一些常量的错误'
- en: '[#6145](https://github.com/google/jax/pull/6145) fixed batching issues with
    incomplete beta functions'
  id: totrans-981
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[#6145](https://github.com/google/jax/pull/6145) 修复了不完全贝塔函数批处理问题'
- en: '[#6014](https://github.com/google/jax/pull/6014) fixed H2D transfers during
    tracing'
  id: totrans-982
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[#6014](https://github.com/google/jax/pull/6014) 修复了追踪过程中的H2D传输问题'
- en: '[#6165](https://github.com/google/jax/pull/6165) avoids OverflowErrors when
    converting some large Python integers to floats'
  id: totrans-983
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[#6165](https://github.com/google/jax/pull/6165) 在将一些大的Python整数转换为浮点数时避免OverflowErrors'
- en: 'Breaking changes:'
  id: totrans-984
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 破坏性变更：
- en: The minimum jaxlib version is now 0.1.62.
  id: totrans-985
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: jaxlib最小版本现在是0.1.62。
- en: jaxlib 0.1.64 (March 18 2021)
  id: totrans-986
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.1.64（2021年3月18日）
- en: jaxlib 0.1.63 (March 17 2021)
  id: totrans-987
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.1.63（2021年3月17日）
- en: jax 0.2.10 (March 5 2021)
  id: totrans-988
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.2.10（2021年3月5日）
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.2.9...jax-v0.2.10).'
  id: totrans-989
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交记录](https://github.com/google/jax/compare/jax-v0.2.9...jax-v0.2.10)。'
- en: 'New features:'
  id: totrans-990
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新特性：
- en: '`jax.scipy.stats.chi2()` is now available as a distribution with logpdf and
    pdf methods.'
  id: totrans-991
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.scipy.stats.chi2()`现在作为具有logpdf和pdf方法的分布可用。'
- en: '`jax.scipy.stats.betabinom()` is now available as a distribution with logpmf
    and pmf methods.'
  id: totrans-992
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.scipy.stats.betabinom()`现在作为具有logpmf和pmf方法的分布可用。'
- en: Added `jax.experimental.jax2tf.call_tf()` to call TensorFlow functions from
    JAX ([#5627](https://github.com/google/jax/issues/5627)) and [README](https://github.com/google/jax/blob/main/jax/experimental/jax2tf/README.md#calling-tensorflow-functions-from-jax)).
  id: totrans-993
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了`jax.experimental.jax2tf.call_tf()`以从JAX调用TensorFlow函数（[#5627](https://github.com/google/jax/issues/5627)）和[README](https://github.com/google/jax/blob/main/jax/experimental/jax2tf/README.md#calling-tensorflow-functions-from-jax)。
- en: Extended the batching rule for `lax.pad` to support batching of the padding
    values.
  id: totrans-994
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展了`lax.pad`的批处理规则以支持填充值的批处理。
- en: 'Bug fixes:'
  id: totrans-995
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bug 修复：
- en: '`jax.numpy.take()` properly handles negative indices ([#5768](https://github.com/google/jax/issues/5768))'
  id: totrans-996
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.numpy.take()`正确处理负索引（[#5768](https://github.com/google/jax/issues/5768)）'
- en: 'Breaking changes:'
  id: totrans-997
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 破坏性变更：
- en: JAX’s promotion rules were adjusted to make promotion more consistent and invariant
    to JIT. In particular, binary operations can now result in weakly-typed values
    when appropriate. The main user-visible effect of the change is that some operations
    result in outputs of different precision than before; for example the expression
    `jnp.bfloat16(1) + 0.1 * jnp.arange(10)` previously returned a `float64` array,
    and now returns a `bfloat16` array. JAX’s type promotion behavior is described
    at Type promotion semantics.
  id: totrans-998
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调整了 JAX 的提升规则，使提升更一致且不受 JIT 影响。特别是，当适当时，二进制操作现在可以产生弱类型值。更改的主要用户可见效果是某些操作的输出精度与之前不同；例如表达式
    `jnp.bfloat16(1) + 0.1 * jnp.arange(10)` 以前返回 `float64` 数组，现在返回 `bfloat16` 数组。JAX
    的类型提升行为在类型提升语义中描述。
- en: '`jax.numpy.linspace()` now computes the floor of integer values, i.e., rounding
    towards -inf rather than 0\. This change was made to match NumPy 1.20.0.'
  id: totrans-999
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.numpy.linspace()` 现在计算整数值的地板，即向负无穷取整，而不是向0取整。此更改是为了与 NumPy 1.20.0 保持一致。'
- en: '`jax.numpy.i0()` no longer accepts complex numbers. Previously the function
    computed the absolute value of complex arguments. This change was made to match
    the semantics of NumPy 1.20.0.'
  id: totrans-1000
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.numpy.i0()` 不再接受复数。之前该函数计算复数参数的绝对值。此更改是为了与 NumPy 1.20.0 的语义保持一致。'
- en: 'Several `jax.numpy` functions no longer accept tuples or lists in place of
    array arguments: `jax.numpy.pad()`, :func`jax.numpy.ravel`, `jax.numpy.repeat()`,
    `jax.numpy.reshape()`. In general, `jax.numpy` functions should be used with scalars
    or array arguments.'
  id: totrans-1001
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 几个 `jax.numpy` 函数不再接受元组或列表作为数组参数的替代：`jax.numpy.pad()`，`jax.numpy.ravel`，`jax.numpy.repeat()`，`jax.numpy.reshape()`。通常情况下，应使用标量或数组参数调用
    `jax.numpy` 函数。
- en: jaxlib 0.1.62 (March 9 2021)
  id: totrans-1002
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.1.62 (2021年3月9日)
- en: 'New features:'
  id: totrans-1003
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '新特性:'
- en: jaxlib wheels are now built to require AVX instructions on x86-64 machines by
    default. If you want to use JAX on a machine that doesn’t support AVX, you can
    build a jaxlib from source using the `--target_cpu_features` flag to `build.py`.
    `--target_cpu_features` also replaces `--enable_march_native`.
  id: totrans-1004
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 x86-64 机器上，默认情况下构建 jaxlib wheels 需要 AVX 指令。如果要在不支持 AVX 的机器上使用 JAX，可以使用 `build.py`
    的 `--target_cpu_features` 标志从源代码构建 jaxlib。 `--target_cpu_features` 还替换了 `--enable_march_native`。
- en: jaxlib 0.1.61 (February 12 2021)
  id: totrans-1005
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.1.61 (2021年2月12日)
- en: jaxlib 0.1.60 (February 3 2021)
  id: totrans-1006
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.1.60 (2021年2月3日)
- en: 'Bug fixes:'
  id: totrans-1007
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '错误修复:'
- en: Fixed a memory leak when converting CPU DeviceArrays to NumPy arrays. The memory
    leak was present in jaxlib releases 0.1.58 and 0.1.59.
  id: totrans-1008
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复了将 CPU DeviceArrays 转换为 NumPy 数组时的内存泄漏问题。在 jaxlib 发布的 0.1.58 和 0.1.59 版本中存在该内存泄漏。
- en: '`bool`, `int8`, and `uint8` are now considered safe to cast to `bfloat16` NumPy
    extension type.'
  id: totrans-1009
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bool`，`int8` 和 `uint8` 现在被认为是安全的，可以转换为 `bfloat16` NumPy 扩展类型。'
- en: jax 0.2.9 (January 26 2021)
  id: totrans-1010
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.2.9 (2021年1月26日)
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.2.8...jax-v0.2.9).'
  id: totrans-1011
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交记录](https://github.com/google/jax/compare/jax-v0.2.8...jax-v0.2.9).'
- en: 'New features:'
  id: totrans-1012
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '新特性:'
- en: Extend the `jax.experimental.loops` module with support for pytrees. Improved
    error checking and error messages.
  id: totrans-1013
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展 `jax.experimental.loops` 模块以支持 pytrees。改进了错误检查和错误消息。
- en: Add `jax.experimental.enable_x64()` and `jax.experimental.disable_x64()`. These
    are context managers which allow X64 mode to be temporarily enabled/disabled within
    a session.
  id: totrans-1014
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加 `jax.experimental.enable_x64()` 和 `jax.experimental.disable_x64()`。这些是上下文管理器，允许在会话中临时启用/禁用
    X64 模式。
- en: 'Breaking changes:'
  id: totrans-1015
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '破坏性变更:'
- en: '`jax.ops.segment_sum()` now drops segment IDs that are out of range rather
    than wrapping them into the segment ID space. This was done for performance reasons.'
  id: totrans-1016
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.ops.segment_sum()` 现在在性能考虑下删除超出范围的段 ID，而不是将它们包装到段 ID 空间。 '
- en: jaxlib 0.1.59 (January 15 2021)
  id: totrans-1017
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.1.59 (2021年1月15日)
- en: jax 0.2.8 (January 12 2021)
  id: totrans-1018
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.2.8 (2021年1月12日)
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.2.7...jax-v0.2.8).'
  id: totrans-1019
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交记录](https://github.com/google/jax/compare/jax-v0.2.7...jax-v0.2.8).'
- en: 'New features:'
  id: totrans-1020
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '新特性:'
- en: Add `jax.closure_convert()` for use with higher-order custom derivative functions.
    ([#5244](https://github.com/google/jax/issues/5244))
  id: totrans-1021
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加 `jax.closure_convert()` 用于与高阶自定义导数函数一起使用。 ([#5244](https://github.com/google/jax/issues/5244))
- en: Add `jax.experimental.host_callback.call()` to call a custom Python function
    on the host and return a result to the device computation. ([#5243](https://github.com/google/jax/issues/5243))
  id: totrans-1022
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加 `jax.experimental.host_callback.call()` 以调用主机上的自定义 Python 函数并将结果返回到设备计算中。
    ([#5243](https://github.com/google/jax/issues/5243))
- en: 'Bug fixes:'
  id: totrans-1023
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '错误修复:'
- en: '`jax.numpy.arccosh` now returns the same branch as `numpy.arccosh` for complex
    inputs ([#5156](https://github.com/google/jax/issues/5156))'
  id: totrans-1024
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.numpy.arccosh` 现在对复数输入返回与 `numpy.arccosh` 相同的分支（[#5156](https://github.com/google/jax/issues/5156)）。'
- en: '`host_callback.id_tap` now works for `jax.pmap` also. There is an optional
    parameter for `id_tap` and `id_print` to request that the device from which the
    value is tapped be passed as a keyword argument to the tap function ([#5182](https://github.com/google/jax/issues/5182)).'
  id: totrans-1025
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在 `host_callback.id_tap` 在 `jax.pmap` 中也可以使用。对于 `id_tap` 和 `id_print`，现在有一个可选参数，可以请求将值从中提取的设备作为关键字参数传递给
    tap 函数（[#5182](https://github.com/google/jax/issues/5182)）。
- en: 'Breaking changes:'
  id: totrans-1026
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 破坏性更改：
- en: '`jax.numpy.pad` now takes keyword arguments. Positional argument `constant_values`
    has been removed. In addition, passing unsupported keyword arguments raises an
    error.'
  id: totrans-1027
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.numpy.pad` 现在接受关键字参数。位置参数 `constant_values` 已被移除。此外，传递不受支持的关键字参数将引发错误。'
- en: 'Changes for `jax.experimental.host_callback.id_tap()` ([#5243](https://github.com/google/jax/issues/5243)):'
  id: totrans-1028
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.experimental.host_callback.id_tap()` 的更改（[#5243](https://github.com/google/jax/issues/5243)）：'
- en: Removed support for `kwargs` for `jax.experimental.host_callback.id_tap()`.
    (This support has been deprecated for a few months.)
  id: totrans-1029
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除了对 `jax.experimental.host_callback.id_tap()` 的 `kwargs` 支持（这种支持已经被弃用几个月了）。
- en: Changed the printing of tuples for `jax.experimental.host_callback.id_print()`
    to use ‘(’ instead of ‘‘.
  id: totrans-1030
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改了 `jax.experimental.host_callback.id_print()` 中元组的打印方式，使用了 `（` 而不是 `‘‘`。
- en: Changed the [`jax.experimental.host_callback.id_print()` in presence of JVP
    to print a pair of primal and tangent. Previously, there were two separate print
    operations for the primals and the tangent.
  id: totrans-1031
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `jax.experimental.host_callback.id_print()` 存在 JVP 的情况下，更改了打印元组的方式，现在使用了一对主元和切线。以前是分别打印主元和切线。
- en: '`host_callback.outfeed_receiver` has been removed (it is not necessary, and
    was deprecated a few months ago).'
  id: totrans-1032
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除了 `host_callback.outfeed_receiver`（这不再需要，并且几个月前已被弃用）。
- en: 'New features:'
  id: totrans-1033
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新功能：
- en: New flag for debugging `inf`, analogous to that for `NaN` ([#5224](https://github.com/google/jax/issues/5224)).
  id: totrans-1034
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为 `inf` 的调试添加了一个新标志，类似于 `NaN` 的标志（[#5224](https://github.com/google/jax/issues/5224)）。
- en: jax 0.2.7 (Dec 4 2020)
  id: totrans-1035
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.2.7（2020年12月4日）
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.2.6...jax-v0.2.7).'
  id: totrans-1036
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交](https://github.com/google/jax/compare/jax-v0.2.6...jax-v0.2.7)。'
- en: 'New features:'
  id: totrans-1037
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新功能：
- en: Add `jax.device_put_replicated`
  id: totrans-1038
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了 `jax.device_put_replicated`。
- en: Add multi-host support to `jax.experimental.sharded_jit`
  id: totrans-1039
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向 `jax.experimental.sharded_jit` 添加了多主机支持。
- en: Add support for differentiating eigenvalues computed by `jax.numpy.linalg.eig`
  id: totrans-1040
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增加对 `jax.numpy.linalg.eig` 计算的特征值的微分支持。
- en: Add support for building on Windows platforms
  id: totrans-1041
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增加了对在 Windows 平台上构建的支持。
- en: Add support for general in_axes and out_axes in `jax.pmap`
  id: totrans-1042
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `jax.pmap` 中添加了对通用 `in_axes` 和 `out_axes` 的支持。
- en: Add complex support for `jax.numpy.linalg.slogdet`
  id: totrans-1043
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了对 `jax.numpy.linalg.slogdet` 的复数支持。
- en: 'Bug fixes:'
  id: totrans-1044
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bug 修复：
- en: Fix higher-than-second order derivatives of `jax.numpy.sinc` at zero
  id: totrans-1045
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复 `jax.numpy.sinc` 在零点处高于二阶导数的问题。
- en: Fix some hard-to-hit bugs around symbolic zeros in transpose rules
  id: totrans-1046
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复了在转置规则中的符号零的一些难以命中的 bug。
- en: 'Breaking changes:'
  id: totrans-1047
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 破坏性更改：
- en: '`jax.experimental.optix` has been deleted, in favor of the standalone `optax`
    Python package.'
  id: totrans-1048
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已删除 `jax.experimental.optix`，改为独立的 `optax` Python 包。
- en: indexing of JAX arrays with non-tuple sequences now raises a `TypeError`. This
    type of indexing has been deprecated in Numpy since v1.16, and in JAX since v0.2.4.
    See [#4564](https://github.com/google/jax/issues/4564).
  id: totrans-1049
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用非元组序列索引 JAX 数组现在会引发 `TypeError`。这种类型的索引自从 Numpy v1.16 和 JAX v0.2.4 开始已经被弃用。参见
    [#4564](https://github.com/google/jax/issues/4564)。
- en: jax 0.2.6 (Nov 18 2020)
  id: totrans-1050
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.2.6（2020年11月18日）
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.2.5...jax-v0.2.6).'
  id: totrans-1051
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交](https://github.com/google/jax/compare/jax-v0.2.5...jax-v0.2.6)。'
- en: 'New Features:'
  id: totrans-1052
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新功能：
- en: Add support for shape-polymorphic tracing for the jax.experimental.jax2tf converter.
    See [README.md](https://github.com/google/jax/blob/main/jax/experimental/jax2tf/README.md).
  id: totrans-1053
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为 `jax.experimental.jax2tf` 转换器的形状多态跟踪添加了支持。参见 [README.md](https://github.com/google/jax/blob/main/jax/experimental/jax2tf/README.md)。
- en: Breaking change cleanup
  id: totrans-1054
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 破坏性更改清理：
- en: Raise an error on non-hashable static arguments for jax.jit and xla_computation.
    See [cb48f42](https://github.com/google/jax/commit/cb48f42).
  id: totrans-1055
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 `jax.jit` 和 `xla_computation` 中的非可哈希静态参数，现在会引发错误。参见 [cb48f42](https://github.com/google/jax/commit/cb48f42)。
- en: 'Improve consistency of type promotion behavior ([#4744](https://github.com/google/jax/issues/4744)):'
  id: totrans-1056
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改善了类型提升行为的一致性（[#4744](https://github.com/google/jax/issues/4744)）：
- en: Adding a complex Python scalar to a JAX floating point number respects the precision
    of the JAX float. For example, `jnp.float32(1) + 1j` now returns `complex64`,
    where previously it returned `complex128`.
  id: totrans-1057
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将复杂的 Python 标量添加到 JAX 浮点数会保留 JAX 浮点数的精度。例如，`jnp.float32(1) + 1j` 现在返回 `complex64`，而之前返回的是
    `complex128`。
- en: 'Results of type promotion with 3 or more terms involving uint64, a signed int,
    and a third type are now independent of the order of arguments. For example: `jnp.result_type(jnp.uint64,
    jnp.int64, jnp.float16)` and `jnp.result_type(jnp.float16, jnp.uint64, jnp.int64)`
    both return `float16`, where previously the first returned `float64` and the second
    returned `float16`.'
  id: totrans-1058
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当涉及到包含 `uint64`、有符号整型和第三种类型的三个或更多术语的类型提升时，现在与参数顺序无关。例如：`jnp.result_type(jnp.uint64,
    jnp.int64, jnp.float16)` 和 `jnp.result_type(jnp.float16, jnp.uint64, jnp.int64)`
    都返回 `float16`，之前第一个返回 `float64`，第二个返回 `float16`。
- en: The contents of the (undocumented) `jax.lax_linalg` linear algebra module are
    now exposed publicly as `jax.lax.linalg`.
  id: totrans-1059
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: (未记录的) `jax.lax_linalg` 线性代数模块现在公开为 `jax.lax.linalg`。
- en: '`jax.random.PRNGKey` now produces the same results in and out of JIT compilation
    ([#4877](https://github.com/google/jax/issues/4877)). This required changing the
    result for a given seed in a few particular cases:'
  id: totrans-1060
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.random.PRNGKey` 现在在 JIT 编译内外产生相同的结果 ([#4877](https://github.com/google/jax/issues/4877))。这需要在几个特定情况下更改给定种子的结果：'
- en: With `jax_enable_x64=False`, negative seeds passed as Python integers now return
    a different result outside JIT mode. For example, `jax.random.PRNGKey(-1)` previously
    returned `[4294967295, 4294967295]`, and now returns `[0, 4294967295]`. This matches
    the behavior in JIT.
  id: totrans-1061
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `jax_enable_x64=False` 时，作为 Python 整数传递的负数种子现在在 JIT 模式外返回不同的结果。例如，`jax.random.PRNGKey(-1)`
    以前返回 `[4294967295, 4294967295]`，现在返回 `[0, 4294967295]`。这与 JIT 中的行为一致。
- en: Seeds outside the range representable by `int64` outside JIT now result in an
    `OverflowError` rather than a `TypeError`. This matches the behavior in JIT.
  id: totrans-1062
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: JIT 外部的 `int64` 不能表示的范围外的种子现在会导致 `OverflowError` 而不是 `TypeError`。这与 JIT 中的行为一致。
- en: 'To recover the keys returned previously for negative integers with `jax_enable_x64=False`
    outside JIT, you can use:'
  id: totrans-1063
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要恢复在 `jax_enable_x64=False` 时以前针对负整数返回的键，可以使用：
- en: '[PRE2]'
  id: totrans-1064
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: DeviceArray now raises `RuntimeError` instead of `ValueError` when trying to
    access its value while it has been deleted.
  id: totrans-1065
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当尝试访问已删除其值的 `DeviceArray` 时，现在会引发 `RuntimeError` 而不是 `ValueError`。
- en: jaxlib 0.1.58 (January 12ish 2021)
  id: totrans-1066
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.1.58 (2021 年 1 月 12 日)
- en: Fixed a bug that meant JAX sometimes return platform-specific types (e.g., `np.cint`)
    instead of standard types (e.g., `np.int32`). (#4903)
  id: totrans-1067
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复了 JAX 有时返回平台特定类型（如 `np.cint`）而不是标准类型（如 `np.int32`）的 Bug (#4903)。
- en: Fixed a crash when constant-folding certain int16 operations. (#4971)
  id: totrans-1068
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复了在执行某些 int16 操作时常量折叠导致崩溃的问题 (#4971)。
- en: Added an `is_leaf` predicate to `pytree.flatten()`.
  id: totrans-1069
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `pytree.flatten()` 中添加了一个 `is_leaf` 谓词。
- en: jaxlib 0.1.57 (November 12 2020)
  id: totrans-1070
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.1.57 (2020 年 11 月 12 日)
- en: Fixed manylinux2010 compliance issues in GPU wheels.
  id: totrans-1071
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复了 GPU wheels 中的 manylinux2010 兼容性问题。
- en: Switched the CPU FFT implementation from Eigen to PocketFFT.
  id: totrans-1072
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 CPU FFT 实现从 Eigen 切换到 PocketFFT。
- en: Fixed a bug where the hash of bfloat16 values was not correctly initialized
    and could change (#4651).
  id: totrans-1073
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复了 bfloat16 值哈希未正确初始化并可能更改的 Bug (#4651)。
- en: Add support for retaining ownership when passing arrays to DLPack (#4636).
  id: totrans-1074
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了对将数组传递给 DLPack 时保留所有权的支持 (#4636)。
- en: Fixed a bug for batched triangular solves with sizes greater than 128 but not
    a multiple of 128.
  id: totrans-1075
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复了批量三角求解的一个 Bug，对大于 128 但不是 128 的倍数的情况。
- en: Fixed a bug when performing concurrent FFTs on multiple GPUs (#3518).
  id: totrans-1076
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复了在多个 GPU 上同时进行并发 FFT 时的 Bug (#3518)。
- en: Fixed a bug in profiler where tools are missing (#4427).
  id: totrans-1077
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在分析器中修复了工具缺失的 Bug (#4427)。
- en: Dropped support for CUDA 10.0.
  id: totrans-1078
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 放弃了对 CUDA 10.0 的支持。
- en: jax 0.2.5 (October 27 2020)
  id: totrans-1079
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.2.5 (2020 年 10 月 27 日)
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.2.4...jax-v0.2.5).'
  id: totrans-1080
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交记录](https://github.com/google/jax/compare/jax-v0.2.4...jax-v0.2.5)。'
- en: 'Improvements:'
  id: totrans-1081
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改进：
- en: Ensure that `check_jaxpr` does not perform FLOPS. See [#4650](https://github.com/google/jax/issues/4650).
  id: totrans-1082
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保 `check_jaxpr` 不执行 FLOPS。参见 [#4650](https://github.com/google/jax/issues/4650)。
- en: Expanded the set of JAX primitives converted by jax2tf. See [primitives_with_limited_support.md](https://github.com/google/jax/blob/main/jax/experimental/jax2tf/primitives_with_limited_support.md).
  id: totrans-1083
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展了由 jax2tf 转换的 JAX 原语集。参见 [primitives_with_limited_support.md](https://github.com/google/jax/blob/main/jax/experimental/jax2tf/primitives_with_limited_support.md)。
- en: jax 0.2.4 (October 19 2020)
  id: totrans-1084
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.2.4 (2020 年 10 月 19 日)
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.2.3...jax-v0.2.4).'
  id: totrans-1085
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交记录](https://github.com/google/jax/compare/jax-v0.2.3...jax-v0.2.4)。'
- en: 'Improvements:'
  id: totrans-1086
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改进：
- en: Add support for `remat` to jax.experimental.host_callback. See [#4608](https://github.com/google/jax/issues/4608).
  id: totrans-1087
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为 `jax.experimental.host_callback` 添加了对 `remat` 的支持。参见 [#4608](https://github.com/google/jax/issues/4608)。
- en: Deprecations
  id: totrans-1088
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弃用
- en: Indexing with non-tuple sequences is now deprecated, following a similar deprecation
    in Numpy. In a future release, this will result in a TypeError. See [#4564](https://github.com/google/jax/issues/4564).
  id: totrans-1089
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在，使用非元组序列进行索引已被弃用，遵循 Numpy 中的类似弃用。在将来的版本中，这将导致 TypeError。参见 [#4564](https://github.com/google/jax/issues/4564)。
- en: jaxlib 0.1.56 (October 14, 2020)
  id: totrans-1090
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.1.56 (2020年10月14日)。
- en: jax 0.2.3 (October 14 2020)
  id: totrans-1091
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.2.3 (2020年10月14日)。
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.2.2...jax-v0.2.3).'
  id: totrans-1092
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交记录](https://github.com/google/jax/compare/jax-v0.2.2...jax-v0.2.3)。'
- en: The reason for another release so soon is we need to temporarily roll back a
    new jit fastpath while we look into a performance degradation
  id: totrans-1093
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于需要暂时回退新的 jit 快速通路，因此又进行了一个新的发布。
- en: jax 0.2.2 (October 13 2020)
  id: totrans-1094
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.2.2 (2020年10月13日)。
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.2.1...jax-v0.2.2).'
  id: totrans-1095
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交记录](https://github.com/google/jax/compare/jax-v0.2.1...jax-v0.2.2)。'
- en: jax 0.2.1 (October 6 2020)
  id: totrans-1096
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.2.1 (2020年10月6日)。
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.2.0...jax-v0.2.1).'
  id: totrans-1097
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交记录](https://github.com/google/jax/compare/jax-v0.2.0...jax-v0.2.1)。'
- en: 'Improvements:'
  id: totrans-1098
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改进：
- en: As a benefit of omnistaging, the host_callback functions are executed (in program
    order) even if the result of the `jax.experimental.host_callback.id_print()`/
    `jax.experimental.host_callback.id_tap()` is not used in the computation.
  id: totrans-1099
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为全阶段的一个好处，即使 `jax.experimental.host_callback.id_print()` / `jax.experimental.host_callback.id_tap()`
    的结果未在计算中使用，也会按程序顺序执行 host_callback 函数。
- en: jax (0.2.0) (September 23 2020)
  id: totrans-1100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax (0.2.0) (2020年9月23日)。
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.1.77...jax-v0.2.0).'
  id: totrans-1101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交记录](https://github.com/google/jax/compare/jax-v0.1.77...jax-v0.2.0)。'
- en: 'Improvements:'
  id: totrans-1102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改进：
- en: Omnistaging on by default. See [#3370](https://github.com/google/jax/issues/3370)
    and [omnistaging](https://github.com/google/jax/blob/main/docs/design_notes/omnistaging.md)
  id: totrans-1103
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认情况下启用全阶段。参见 [#3370](https://github.com/google/jax/issues/3370) 和 [omnistaging](https://github.com/google/jax/blob/main/docs/design_notes/omnistaging.md)。
- en: jax (0.1.77) (September 15 2020)
  id: totrans-1104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax (0.1.77) (2020年9月15日)。
- en: 'Breaking changes:'
  id: totrans-1105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 破坏性变更：
- en: New simplified interface for `jax.experimental.host_callback.id_tap()` (#4101)
  id: totrans-1106
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.experimental.host_callback.id_tap()` 的新简化接口 (#4101)。'
- en: jaxlib 0.1.55 (September 8, 2020)
  id: totrans-1107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.1.55 (2020年9月8日)。
- en: 'Update XLA:'
  id: totrans-1108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新 XLA：
- en: Fix bug in DLPackManagedTensorToBuffer (#4196)
  id: totrans-1109
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复 DLPackManagedTensorToBuffer 中的错误 (#4196)。
- en: jax 0.1.76 (September 8, 2020)
  id: totrans-1110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.1.76 (2020年9月8日)。
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.1.75...jax-v0.1.76).'
  id: totrans-1111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交记录](https://github.com/google/jax/compare/jax-v0.1.75...jax-v0.1.76)。'
- en: jax 0.1.75 (July 30, 2020)
  id: totrans-1112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.1.75 (2020年7月30日)。
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.1.74...jax-v0.1.75).'
  id: totrans-1113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交记录](https://github.com/google/jax/compare/jax-v0.1.74...jax-v0.1.75)。'
- en: 'Bug Fixes:'
  id: totrans-1114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bug 修复：
- en: make jnp.abs() work for unsigned inputs (#3914)
  id: totrans-1115
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使 jnp.abs() 适用于无符号输入 (#3914)。
- en: 'Improvements:'
  id: totrans-1116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改进：
- en: “Omnistaging” behavior added behind a flag, disabled by default (#3370)
  id: totrans-1117
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了“全阶段”行为，但在默认情况下已禁用 (#3370)。
- en: jax 0.1.74 (July 29, 2020)
  id: totrans-1118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.1.74 (2020年7月29日)。
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.1.73...jax-v0.1.74).'
  id: totrans-1119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交记录](https://github.com/google/jax/compare/jax-v0.1.73...jax-v0.1.74)。'
- en: 'New Features:'
  id: totrans-1120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新功能：
- en: BFGS (#3101)
  id: totrans-1121
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: BFGS (#3101)。
- en: TPU support for half-precision arithmetic (#3878)
  id: totrans-1122
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: TPU 支持半精度算术 (#3878)。
- en: 'Bug Fixes:'
  id: totrans-1123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bug 修复：
- en: Prevent some accidental dtype warnings (#3874)
  id: totrans-1124
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 防止一些意外的 dtype 警告 (#3874)。
- en: 'Fix a multi-threading bug in custom derivatives (#3845, #3869)'
  id: totrans-1125
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '修复自定义导数中的多线程错误 (#3845, #3869)。'
- en: 'Improvements:'
  id: totrans-1126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改进：
- en: Faster searchsorted implementation (#3873)
  id: totrans-1127
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更快的 searchsorted 实现 (#3873)。
- en: Better test coverage for jax.numpy sorting algorithms (#3836)
  id: totrans-1128
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为 jax.numpy 排序算法提供更好的测试覆盖率 (#3836)。
- en: jaxlib 0.1.52 (July 22, 2020)
  id: totrans-1129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.1.52 (2020年7月22日)。
- en: Update XLA.
  id: totrans-1130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新 XLA。
- en: jax 0.1.73 (July 22, 2020)
  id: totrans-1131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.1.73 (2020年7月22日)。
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.1.72...jax-v0.1.73).'
  id: totrans-1132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交记录](https://github.com/google/jax/compare/jax-v0.1.72...jax-v0.1.73)。'
- en: The minimum jaxlib version is now 0.1.51.
  id: totrans-1133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: jaxlib 的最低版本现在是 0.1.51。
- en: 'New Features:'
  id: totrans-1134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新功能：
- en: jax.image.resize. (#3703)
  id: totrans-1135
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: jax.image.resize. (#3703)。
- en: hfft and ihfft (#3664)
  id: totrans-1136
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: hfft 和 ihfft (#3664)。
- en: jax.numpy.intersect1d (#3726)
  id: totrans-1137
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: jax.numpy.intersect1d (#3726)。
- en: jax.numpy.lexsort (#3812)
  id: totrans-1138
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: jax.numpy.lexsort (#3812)。
- en: '`lax.scan` and the `scan` primitive support an `unroll` parameter for loop
    unrolling when lowering to XLA ([#3738](https://github.com/google/jax/issues/3738)).'
  id: totrans-1139
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当降低到 XLA 时，`lax.scan` 和 `scan` 原语支持一个 `unroll` 参数用于循环展开 ([#3738](https://github.com/google/jax/issues/3738))。
- en: 'Bug Fixes:'
  id: totrans-1140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bug 修复：
- en: Fix reduction repeated axis error (#3618)
  id: totrans-1141
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复重复轴错误的约简 (#3618)。
- en: Fix shape rule for lax.pad for input dimensions of size 0\. (#3608)
  id: totrans-1142
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复 lax.pad 对输入维度大小为0的形状规则错误。 (#3608)。
- en: make psum transpose handle zero cotangents (#3653)
  id: totrans-1143
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使 psum 转置处理零余切 (#3653)。
- en: Fix shape error when taking JVP of reduce-prod over size 0 axis. (#3729)
  id: totrans-1144
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复在尺寸为0的轴上进行 reduce-prod 的 JVP 的形状错误 (#3729)。
- en: Support differentiation through jax.lax.all_to_all (#3733)
  id: totrans-1145
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持通过 jax.lax.all_to_all 进行微分。
- en: address nan issue in jax.scipy.special.zeta (#3777)
  id: totrans-1146
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解决了 jax.scipy.special.zeta 中的 nan 问题。（#3777）
- en: 'Improvements:'
  id: totrans-1147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改进：
- en: Many improvements to jax2tf
  id: totrans-1148
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对 jax2tf 进行了许多改进。
- en: Reimplement argmin/argmax using a single pass variadic reduction. (#3611)
  id: totrans-1149
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重新实现了使用单次变量减少的 argmin/argmax。（#3611）
- en: Enable XLA SPMD partitioning by default. (#3151)
  id: totrans-1150
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认启用 XLA SPMD 分区。（#3151）
- en: Add support for 0d transpose convolution (#3643)
  id: totrans-1151
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持 0d 转置卷积。（#3643）
- en: Make LU gradient work for low-rank matrices (#3610)
  id: totrans-1152
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使低秩矩阵的 LU 梯度工作。
- en: support multiple_results and custom JVPs in jet (#3657)
  id: totrans-1153
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持 jet 中的多结果和自定义 JVPs。
- en: Generalize reduce-window padding to support (lo, hi) pairs. (#3728)
  id: totrans-1154
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通用化了 reduce-window 的填充，支持（lo, hi）对。（#3728）
- en: Implement complex convolutions on CPU and GPU. (#3735)
  id: totrans-1155
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 CPU 和 GPU 上实现复杂卷积。（#3735）
- en: Make jnp.take work for empty slices of empty arrays. (#3751)
  id: totrans-1156
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使 jnp.take 在空数组的空切片上工作。（#3751）
- en: Relax dimension ordering rules for dot_general. (#3778)
  id: totrans-1157
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 放宽了 dot_general 的维度排序规则。（#3778）
- en: Enable buffer donation for GPU. (#3800)
  id: totrans-1158
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用 GPU 的缓冲捐赠。（#3800）
- en: Add support for base dilation and window dilation to reduce window op… (#3803)
  id: totrans-1159
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为减少窗口操作添加了基本扩张和窗口扩张支持…（#3803）
- en: jaxlib 0.1.51 (July 2, 2020)
  id: totrans-1160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.1.51（2020年7月2日）
- en: Update XLA.
  id: totrans-1161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新 XLA。
- en: Add new runtime support for host_callback.
  id: totrans-1162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了对 host_callback 的新运行时支持。
- en: jax 0.1.72 (June 28, 2020)
  id: totrans-1163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.1.72（2020年6月28日）
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.1.71...jax-v0.1.72).'
  id: totrans-1164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交记录](https://github.com/google/jax/compare/jax-v0.1.71...jax-v0.1.72)。'
- en: 'Bug fixes:'
  id: totrans-1165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bug 修复：
- en: Fix an odeint bug introduced in the previous release, see [#3587](https://github.com/google/jax/issues/3587).
  id: totrans-1166
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复了前一个版本中引入的 odeint Bug，见 [#3587](https://github.com/google/jax/issues/3587)。
- en: jax 0.1.71 (June 25, 2020)
  id: totrans-1167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.1.71（2020年6月25日）
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.1.70...jax-v0.1.71).'
  id: totrans-1168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交记录](https://github.com/google/jax/compare/jax-v0.1.70...jax-v0.1.71)。'
- en: The minimum jaxlib version is now 0.1.48.
  id: totrans-1169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在的 jaxlib 最低版本要求是 0.1.48。
- en: 'Bug fixes:'
  id: totrans-1170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bug 修复：
- en: Allow `jax.experimental.ode.odeint` dynamics functions to close over values
    with respect to which we’re differentiating [#3562](https://github.com/google/jax/issues/3562).
  id: totrans-1171
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许 `jax.experimental.ode.odeint` 动态函数在我们对其进行微分的值上进行闭包 [#3562](https://github.com/google/jax/issues/3562)。
- en: jaxlib 0.1.50 (June 25, 2020)
  id: totrans-1172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.1.50（2020年6月25日）
- en: Add support for CUDA 11.0.
  id: totrans-1173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增加了对 CUDA 11.0 的支持。
- en: Drop support for CUDA 9.2 (we only maintain support for the last four CUDA versions.)
  id: totrans-1174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 放弃对 CUDA 9.2 的支持（我们只支持最后四个 CUDA 版本）。
- en: Update XLA.
  id: totrans-1175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新 XLA。
- en: jaxlib 0.1.49 (June 19, 2020)
  id: totrans-1176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.1.49（2020年6月19日）
- en: 'Bug fixes:'
  id: totrans-1177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bug 修复：
- en: Fix build issue that could result in slow compiles ([tensorflow/tensorflow](https://github.com/tensorflow/tensorflow/commit/f805153a25b00d12072bd728e91bb1621bfcf1b1))
  id: totrans-1178
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复了编译问题，可能导致编译速度慢（[tensorflow/tensorflow](https://github.com/tensorflow/tensorflow/commit/f805153a25b00d12072bd728e91bb1621bfcf1b1)）。
- en: jaxlib 0.1.48 (June 12, 2020)
  id: totrans-1179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.1.48（2020年6月12日）
- en: 'New features:'
  id: totrans-1180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新特性：
- en: Adds support for fast traceback collection.
  id: totrans-1181
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增加了快速回溯收集的支持。
- en: Adds preliminary support for on-device heap profiling.
  id: totrans-1182
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增加了对设备堆分析的初步支持。
- en: Implements `np.nextafter` for `bfloat16` types.
  id: totrans-1183
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为 `bfloat16` 类型实现了 `np.nextafter`。
- en: Complex128 support for FFTs on CPU and GPU.
  id: totrans-1184
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: CPU 和 GPU 上的 Complex128 支持 FFT。
- en: 'Bug fixes:'
  id: totrans-1185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bug 修复：
- en: Improved float64 `tanh` accuracy on GPU.
  id: totrans-1186
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改进了在 GPU 上 `tanh` 的 float64 精度。
- en: float64 scatters on GPU are much faster.
  id: totrans-1187
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: GPU 上的 float64 散布现在更快了。
- en: Complex matrix multiplication on CPU should be much faster.
  id: totrans-1188
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 CPU 上的复杂矩阵乘法应该更快了。
- en: Stable sorts on CPU should actually be stable now.
  id: totrans-1189
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: CPU 上的稳定排序现在实际上是稳定的了。
- en: Concurrency bug fix in CPU backend.
  id: totrans-1190
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: CPU 后端的并发 Bug 修复。
- en: jax 0.1.70 (June 8, 2020)
  id: totrans-1191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.1.70（2020年6月8日）
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.1.69...jax-v0.1.70).'
  id: totrans-1192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交记录](https://github.com/google/jax/compare/jax-v0.1.69...jax-v0.1.70)。'
- en: 'New features:'
  id: totrans-1193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新特性：
- en: '`lax.switch` introduces indexed conditionals with multiple branches, together
    with a generalization of the `cond` primitive [#3318](https://github.com/google/jax/issues/3318).'
  id: totrans-1194
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lax.switch` 引入了带有多分支的索引条件，并与 `cond` 原语的泛化一起使用 [#3318](https://github.com/google/jax/issues/3318)。'
- en: jax 0.1.69 (June 3, 2020)
  id: totrans-1195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.1.69（2020年6月3日）
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.1.68...jax-v0.1.69).'
  id: totrans-1196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交记录](https://github.com/google/jax/compare/jax-v0.1.68...jax-v0.1.69)。'
- en: jax 0.1.68 (May 21, 2020)
  id: totrans-1197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.1.68（2020年5月21日）
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.1.67...jax-v0.1.68).'
  id: totrans-1198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交记录](https://github.com/google/jax/compare/jax-v0.1.67...jax-v0.1.68)。'
- en: 'New features:'
  id: totrans-1199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新特性：
- en: '`lax.cond()` supports a single-operand form, taken as the argument to both
    branches [#2993](https://github.com/google/jax/issues/2993).'
  id: totrans-1200
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lax.cond()` 支持单操作数形式，作为两个分支的参数 [#2993](https://github.com/google/jax/issues/2993)。'
- en: 'Notable changes:'
  id: totrans-1201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注意事项改动：
- en: The format of the `transforms` keyword for the `jax.experimental.host_callback.id_tap()`
    primitive has changed [#3132](https://github.com/google/jax/issues/3132).
  id: totrans-1202
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.experimental.host_callback.id_tap()` 原语的 `transforms` 关键字格式已更改 [#3132](https://github.com/google/jax/issues/3132)。'
- en: jax 0.1.67 (May 12, 2020)
  id: totrans-1203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.1.67（2020年5月12日）
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.1.66...jax-v0.1.67).'
  id: totrans-1204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交记录](https://github.com/google/jax/compare/jax-v0.1.66...jax-v0.1.67)。'
- en: 'New features:'
  id: totrans-1205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新功能：
- en: Support for reduction over subsets of a pmapped axis using `axis_index_groups`
    [#2382](https://github.com/google/jax/issues/2382).
  id: totrans-1206
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持使用 `axis_index_groups` 对 pmapped 轴的子集进行缩减 [#2382](https://github.com/google/jax/issues/2382)。
- en: Experimental support for printing and calling host-side Python function from
    compiled code. See [id_print and id_tap](https://jax.readthedocs.io/en/latest/jax.experimental.host_callback.html)
    ([#3006](https://github.com/google/jax/issues/3006)).
  id: totrans-1207
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实验性支持从编译代码调用和打印主机端 Python 函数。参见 [id_print 和 id_tap](https://jax.readthedocs.io/en/latest/jax.experimental.host_callback.html)（[#3006](https://github.com/google/jax/issues/3006)）。
- en: 'Notable changes:'
  id: totrans-1208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显著变更：
- en: The visibility of names exported from `jax.numpy` has been tightened. This may
    break code that was making use of names that were previously exported accidentally.
  id: totrans-1209
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 `jax.numpy` 导出的名称的可见性已加强。这可能会破坏之前无意中使用这些名称的代码。
- en: jaxlib 0.1.47 (May 8, 2020)
  id: totrans-1210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.1.47（2020年5月8日）
- en: Fixes crash for outfeed.
  id: totrans-1211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复 outfeed 引起的崩溃。
- en: jax 0.1.66 (May 5, 2020)
  id: totrans-1212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.1.66（2020年5月5日）
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.1.65...jax-v0.1.66).'
  id: totrans-1213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交记录](https://github.com/google/jax/compare/jax-v0.1.65...jax-v0.1.66)。'
- en: 'New features:'
  id: totrans-1214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新功能：
- en: Support for `in_axes=None` on `pmap()` [#2896](https://github.com/google/jax/issues/2896).
  id: totrans-1215
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持在 `pmap()` 上使用 `in_axes=None` 进行缩减 [#2896](https://github.com/google/jax/issues/2896)。
- en: jaxlib 0.1.46 (May 5, 2020)
  id: totrans-1216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.1.46（2020年5月5日）
- en: Fixes crash for linear algebra functions on Mac OS X (#432).
  id: totrans-1217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复 Mac OS X 上线性代数函数的崩溃（#432）。
- en: Fixes an illegal instruction crash caused by using AVX512 instructions when
    an operating system or hypervisor disabled them (#2906).
  id: totrans-1218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复使用 AVX512 指令时因操作系统或虚拟化程序禁用而导致的非法指令崩溃问题（#2906）。
- en: jax 0.1.65 (April 30, 2020)
  id: totrans-1219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.1.65（2020年4月30日）
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.1.64...jax-v0.1.65).'
  id: totrans-1220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交记录](https://github.com/google/jax/compare/jax-v0.1.64...jax-v0.1.65)。'
- en: 'New features:'
  id: totrans-1221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新功能：
- en: Differentiation of determinants of singular matrices [#2809](https://github.com/google/jax/issues/2809).
  id: totrans-1222
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对奇异矩阵行列式的微分 [#2809](https://github.com/google/jax/issues/2809)。
- en: 'Bug fixes:'
  id: totrans-1223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bug 修复：
- en: Fix `odeint()` differentiation with respect to time of ODEs with time-dependent
    dynamics [#2817](https://github.com/google/jax/issues/2817), also add ODE CI testing.
  id: totrans-1224
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复 `odeint()` 对于具有时间依赖动态的常微分方程的时间微分问题 [#2817](https://github.com/google/jax/issues/2817)，并添加
    ODE CI 测试。
- en: Fix `lax_linalg.qr()` differentiation [#2867](https://github.com/google/jax/issues/2867).
  id: totrans-1225
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复 `lax_linalg.qr()` 的微分问题 [#2867](https://github.com/google/jax/issues/2867)。
- en: jaxlib 0.1.45 (April 21, 2020)
  id: totrans-1226
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.1.45（2020年4月21日）
- en: 'Fixes segfault: [#2755](https://github.com/google/jax/issues/2755)'
  id: totrans-1227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复段错误：[#2755](https://github.com/google/jax/issues/2755)
- en: Plumb is_stable option on Sort HLO through to Python.
  id: totrans-1228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Sort HLO 上通过 Plumb 选项支持稳定性。
- en: jax 0.1.64 (April 21, 2020)
  id: totrans-1229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.1.64（2020年4月21日）
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.1.63...jax-v0.1.64).'
  id: totrans-1230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交记录](https://github.com/google/jax/compare/jax-v0.1.63...jax-v0.1.64)。'
- en: 'New features:'
  id: totrans-1231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新功能：
- en: Add syntactic sugar for functional indexed updates [#2684](https://github.com/google/jax/issues/2684).
  id: totrans-1232
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加函数式索引更新的语法糖 [#2684](https://github.com/google/jax/issues/2684)。
- en: Add `jax.numpy.linalg.multi_dot()` [#2726](https://github.com/google/jax/issues/2726).
  id: totrans-1233
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加 `jax.numpy.linalg.multi_dot()` [#2726](https://github.com/google/jax/issues/2726)。
- en: Add `jax.numpy.unique()` [#2760](https://github.com/google/jax/issues/2760).
  id: totrans-1234
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加 `jax.numpy.unique()` [#2760](https://github.com/google/jax/issues/2760)。
- en: Add `jax.numpy.rint()` [#2724](https://github.com/google/jax/issues/2724).
  id: totrans-1235
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加 `jax.numpy.rint()` [#2724](https://github.com/google/jax/issues/2724)。
- en: Add `jax.numpy.rint()` [#2724](https://github.com/google/jax/issues/2724).
  id: totrans-1236
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加 `jax.numpy.rint()` [#2724](https://github.com/google/jax/issues/2724)。
- en: Add more primitive rules for `jax.experimental.jet()`.
  id: totrans-1237
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为 `jax.experimental.jet()` 添加更多原始规则。
- en: 'Bug fixes:'
  id: totrans-1238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bug 修复：
- en: Fix `logaddexp()` and `logaddexp2()` differentiation at zero [#2107](https://github.com/google/jax/issues/2107).
  id: totrans-1239
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复 `logaddexp()` 和 `logaddexp2()` 在零处的微分问题 [#2107](https://github.com/google/jax/issues/2107)。
- en: Improve memory usage in reverse-mode autodiff without `jit()` [#2719](https://github.com/google/jax/issues/2719).
  id: totrans-1240
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在没有 `jit()` 的情况下改进反向模式自动微分的内存使用情况 [#2719](https://github.com/google/jax/issues/2719)。
- en: 'Better errors:'
  id: totrans-1241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更好的错误修复：
- en: Improves error message for reverse-mode differentiation of `lax.while_loop()`
    [#2129](https://github.com/google/jax/issues/2129).
  id: totrans-1242
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改进 `lax.while_loop()` 的反向模式微分的错误消息 [#2129](https://github.com/google/jax/issues/2129)。
- en: jaxlib 0.1.44 (April 16, 2020)
  id: totrans-1243
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.1.44（2020年4月16日）
- en: Fixes a bug where if multiple GPUs of different models were present, JAX would
    only compile programs suitable for the first GPU.
  id: totrans-1244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复了一个bug，即当存在多个不同型号的GPU时，JAX只会编译适用于第一个GPU的程序。
- en: Bugfix for `batch_group_count` convolutions.
  id: totrans-1245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复了`batch_group_count`卷积的错误。
- en: Added precompiled SASS for more GPU versions to avoid startup PTX compilation
    hang.
  id: totrans-1246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为更多GPU版本添加了预编译的SASS，以避免启动时PTX编译挂起。
- en: jax 0.1.63 (April 12, 2020)
  id: totrans-1247
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.1.63 (2020年4月12日)
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.1.62...jax-v0.1.63).'
  id: totrans-1248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交记录](https://github.com/google/jax/compare/jax-v0.1.62...jax-v0.1.63)。'
- en: Added `jax.custom_jvp` and `jax.custom_vjp` from [#2026](https://github.com/google/jax/issues/2026),
    see the [tutorial notebook](https://jax.readthedocs.io/en/latest/notebooks/Custom_derivative_rules_for_Python_code.html).
    Deprecated `jax.custom_transforms` and removed it from the docs (though it still
    works).
  id: totrans-1249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了`jax.custom_jvp`和`jax.custom_vjp`，来源于 [#2026](https://github.com/google/jax/issues/2026)，请参阅[教程笔记本](https://jax.readthedocs.io/en/latest/notebooks/Custom_derivative_rules_for_Python_code.html)。弃用了`jax.custom_transforms`并将其从文档中删除（尽管它仍然可用）。
- en: Add `scipy.sparse.linalg.cg` [#2566](https://github.com/google/jax/issues/2566).
  id: totrans-1250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了`scipy.sparse.linalg.cg` [#2566](https://github.com/google/jax/issues/2566)。
- en: Changed how Tracers are printed to show more useful information for debugging
    [#2591](https://github.com/google/jax/issues/2591).
  id: totrans-1251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改了Tracers的打印方式，以显示更多有用的调试信息 [#2591](https://github.com/google/jax/issues/2591)。
- en: Made `jax.numpy.isclose` handle `nan` and `inf` correctly [#2501](https://github.com/google/jax/issues/2501).
  id: totrans-1252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复了`jax.numpy.isclose`正确处理`nan`和`inf`的方式 [#2501](https://github.com/google/jax/issues/2501)。
- en: Added several new rules for `jax.experimental.jet` [#2537](https://github.com/google/jax/issues/2537).
  id: totrans-1253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了几个`jax.experimental.jet`的新规则 [#2537](https://github.com/google/jax/issues/2537)。
- en: Fixed `jax.experimental.stax.BatchNorm` when `scale`/`center` isn’t provided.
  id: totrans-1254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当未提供`scale`/`center`时，修复了`jax.experimental.stax.BatchNorm`。
- en: Fix some missing cases of broadcasting in `jax.numpy.einsum` [#2512](https://github.com/google/jax/issues/2512).
  id: totrans-1255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复了`jax.numpy.einsum`中广播的一些缺失情况 [#2512](https://github.com/google/jax/issues/2512)。
- en: Implement `jax.numpy.cumsum` and `jax.numpy.cumprod` in terms of a parallel
    prefix scan [#2596](https://github.com/google/jax/issues/2596) and make `reduce_prod`
    differentiable to arbitrary order [#2597](https://github.com/google/jax/issues/2597).
  id: totrans-1256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过并行前缀扫描实现了`jax.numpy.cumsum`和`jax.numpy.cumprod`，并使`reduce_prod`对任意阶数可微分 [#2596](https://github.com/google/jax/issues/2596)
    [#2597](https://github.com/google/jax/issues/2597)。
- en: Add `batch_group_count` to `conv_general_dilated` [#2635](https://github.com/google/jax/issues/2635).
  id: totrans-1257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`conv_general_dilated`中添加了`batch_group_count` [#2635](https://github.com/google/jax/issues/2635)。
- en: Add docstring for `test_util.check_grads` [#2656](https://github.com/google/jax/issues/2656).
  id: totrans-1258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为`test_util.check_grads`添加了文档字符串 [#2656](https://github.com/google/jax/issues/2656)。
- en: Add `callback_transform` [#2665](https://github.com/google/jax/issues/2665).
  id: totrans-1259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了`callback_transform` [#2665](https://github.com/google/jax/issues/2665)。
- en: Implement `rollaxis`, `convolve`/`correlate` 1d & 2d, `copysign`, `trunc`, `roots`,
    and `quantile`/`percentile` interpolation options.
  id: totrans-1260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现了`rollaxis`、`convolve`/`correlate`的1维和2维、`copysign`、`trunc`、`roots`以及`quantile`/`percentile`的插值选项。
- en: jaxlib 0.1.43 (March 31, 2020)
  id: totrans-1261
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.1.43 (2020年3月31日)
- en: Fixed a performance regression for Resnet-50 on GPU.
  id: totrans-1262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复了GPU上Resnet-50的性能回归问题。
- en: jax 0.1.62 (March 21, 2020)
  id: totrans-1263
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.1.62 (2020年3月21日)
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.1.61...jax-v0.1.62).'
  id: totrans-1264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交记录](https://github.com/google/jax/compare/jax-v0.1.61...jax-v0.1.62)。'
- en: JAX has dropped support for Python 3.5\. Please upgrade to Python 3.6 or newer.
  id: totrans-1265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JAX 已停止支持 Python 3.5。请升级到 Python 3.6 或更新版本。
- en: 'Removed the internal function `lax._safe_mul`, which implemented the convention
    `0. * nan == 0.`. This change means some programs when differentiated will produce
    nans when they previously produced correct values, though it ensures nans rather
    than silently incorrect results are produced for other programs. See #2447 and
    #1052 for details.'
  id: totrans-1266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '删除了内部函数`lax._safe_mul`，该函数实现了约定`0. * nan == 0.`。此更改意味着在某些程序被微分时会产生nan，而不是以前产生正确值，尽管这确保了对其他程序产生nan而不是静默的不正确结果。详见
    #2447 和 #1052。'
- en: Added an `all_gather` parallel convenience function.
  id: totrans-1267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了一个`all_gather`并行便利函数。
- en: More type annotations in core code.
  id: totrans-1268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在核心代码中增加了更多类型注解。
- en: jaxlib 0.1.42 (March 19, 2020)
  id: totrans-1269
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.1.42 (2020年3月19日)
- en: jaxlib 0.1.41 broke cloud TPU support due to an API incompatibility. This release
    fixes it again.
  id: totrans-1270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: jaxlib 0.1.41由于API不兼容性破坏了云TPU支持。此版本修复了这个问题。
- en: JAX has dropped support for Python 3.5\. Please upgrade to Python 3.6 or newer.
  id: totrans-1271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JAX 已停止支持 Python 3.5。请升级到 Python 3.6 或更新版本。
- en: jax 0.1.61 (March 17, 2020)
  id: totrans-1272
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.1.61 (2020年3月17日)
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.1.60...jax-v0.1.61).'
  id: totrans-1273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交记录](https://github.com/google/jax/compare/jax-v0.1.60...jax-v0.1.61)。'
- en: Fixes Python 3.5 support. This will be the last JAX or jaxlib release that supports
    Python 3.5.
  id: totrans-1274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复 Python 3.5 支持。这将是 JAX 或 jaxlib 版本的最后一个支持 Python 3.5 的版本。
- en: jax 0.1.60 (March 17, 2020)
  id: totrans-1275
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.1.60（2020 年 3 月 17 日）
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.1.59...jax-v0.1.60).'
  id: totrans-1276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交](https://github.com/google/jax/compare/jax-v0.1.59...jax-v0.1.60)。'
- en: 'New features:'
  id: totrans-1277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新功能：
- en: '`jax.pmap()` has `static_broadcast_argnums` argument which allows the user
    to specify arguments that should be treated as compile-time constants and should
    be broadcasted to all devices. It works analogously to `static_argnums` in `jax.jit()`.'
  id: totrans-1278
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.pmap()` 增加了 `static_broadcast_argnums` 参数，该参数允许用户指定应该作为编译时常数处理的参数，并应广播到所有设备。它类似于
    `jax.jit()` 中的 `static_argnums`。'
- en: Improved error messages for when tracers are mistakenly saved in global state.
  id: totrans-1279
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改善了错误消息，以防止错误地在全局状态中保存跟踪器。
- en: Added `jax.nn.one_hot()` utility function.
  id: totrans-1280
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了 `jax.nn.one_hot()` 实用函数。
- en: Added `jax.experimental.jet` for exponentially faster higher-order automatic
    differentiation.
  id: totrans-1281
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了 `jax.experimental.jet`，用于更快的高阶自动微分。
- en: Added more correctness checking to arguments of `jax.lax.broadcast_in_dim()`.
  id: totrans-1282
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对 `jax.lax.broadcast_in_dim()` 的参数进行了更多正确性检查。
- en: The minimum jaxlib version is now 0.1.41.
  id: totrans-1283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最小 jaxlib 版本现已是 0.1.41。
- en: jaxlib 0.1.40 (March 4, 2020)
  id: totrans-1284
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.1.40（2020 年 3 月 4 日）
- en: Adds experimental support in Jaxlib for TensorFlow profiler, which allows tracing
    of CPU and GPU computations from TensorBoard.
  id: totrans-1285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了 Jaxlib 对 TensorFlow 分析仪的实验性支持，该分析仪允许从 TensorBoard 跟踪 CPU 和 GPU 计算。
- en: Includes prototype support for multihost GPU computations that communicate via
    NCCL.
  id: totrans-1286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包括多主机 GPU 计算支持的原型，该计算通过 NCCL 通信。
- en: Improves performance of NCCL collectives on GPU.
  id: totrans-1287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改善了在 GPU 上的 NCCL 集合性能。
- en: Adds TopK, CustomCallWithoutLayout, CustomCallWithLayout, IGammaGradA and RandomGamma
    implementations.
  id: totrans-1288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了 TopK、CustomCallWithoutLayout、CustomCallWithLayout、IGammaGradA 和 RandomGamma
    实现。
- en: Supports device assignments known at XLA compilation time.
  id: totrans-1289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持在 XLA 编译时已知的设备分配。
- en: jax 0.1.59 (February 11, 2020)
  id: totrans-1290
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.1.59（2020 年 2 月 11 日）
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.1.58...jax-v0.1.59).'
  id: totrans-1291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 提交](https://github.com/google/jax/compare/jax-v0.1.58...jax-v0.1.59)。'
- en: Breaking changes
  id: totrans-1292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重大更改
- en: The minimum jaxlib version is now 0.1.38.
  id: totrans-1293
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最小 jaxlib 版本现已是 0.1.38。
- en: Simplified `Jaxpr` by removing the `Jaxpr.freevars` and `Jaxpr.bound_subjaxprs`.
    The call primitives (`xla_call`, `xla_pmap`, `sharded_call`, and `remat_call`)
    get a new parameter `call_jaxpr` with a fully-closed (no `constvars`) jaxpr. Also,
    added a new field `call_primitive` to primitives.
  id: totrans-1294
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简化 `Jaxpr`，通过删除 `Jaxpr.freevars` 和 `Jaxpr.bound_subjaxprs`。调用基本功能（`xla_call`、`xla_pmap`、`sharded_call`
    和 `remat_call`）获取一个新的参数 `call_jaxpr`，它具有一个完全闭合（无 `constvars`）的 jaxpr。此外，还添加了一个新的字段
    `call_primitive` 到基本功能。
- en: 'New features:'
  id: totrans-1295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新功能：
- en: Reverse-mode automatic differentiation (e.g. `grad`) of `lax.cond`, making it
    now differentiable in both modes ([#2091](https://github.com/google/jax/issues/2091))
  id: totrans-1296
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 反向模式自动微分（例如 `grad`）对 `lax.cond` 的支持，使其在两种模式下都可微分（[#2091](https://github.com/google/jax/issues/2091)）
- en: JAX now supports DLPack, which allows sharing CPU and GPU arrays in a zero-copy
    way with other libraries, such as PyTorch.
  id: totrans-1297
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: JAX 现在支持 DLPack，它允许以零副本方式共享 CPU 和 GPU 数组与其他库（例如 PyTorch）。
- en: JAX GPU DeviceArrays now support `__cuda_array_interface__`, which is another
    zero-copy protocol for sharing GPU arrays with other libraries such as CuPy and
    Numba.
  id: totrans-1298
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: JAX GPU DeviceArrays 现在支持 `__cuda_array_interface__`，这是另一种用于与 CuPy 和 Numba 等库共享
    GPU 数组的零副本协议。
- en: JAX CPU device buffers now implement the Python buffer protocol, which allows
    zero-copy buffer sharing between JAX and NumPy.
  id: totrans-1299
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: JAX 的 CPU 设备缓冲区现在实现了 Python 缓冲区协议，这允许 JAX 和 NumPy 之间的零副本缓冲区共享。
- en: Added JAX_SKIP_SLOW_TESTS environment variable to skip tests known as slow.
  id: totrans-1300
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了名为 JAX_SKIP_SLOW_TESTS 的环境变量，以跳过已知为慢的测试。
- en: jaxlib 0.1.39 (February 11, 2020)
  id: totrans-1301
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.1.39（2020 年 2 月 11 日）
- en: Updates XLA.
  id: totrans-1302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新 XLA。
- en: jaxlib 0.1.38 (January 29, 2020)
  id: totrans-1303
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jaxlib 0.1.38（2020 年 1 月 29 日）
- en: CUDA 9.0 is no longer supported.
  id: totrans-1304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不再支持 CUDA 9.0。
- en: CUDA 10.2 wheels are now built by default.
  id: totrans-1305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认构建 CUDA 10.2 的轮。
- en: jax 0.1.58 (January 28, 2020)
  id: totrans-1306
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax 0.1.58（2020 年 1 月 28 日）
- en: '[GitHub commits](https://github.com/google/jax/compare/46014da21...jax-v0.1.58).'
  id: totrans-1307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub   [GitHub 提交](https://github.com/google/jax/compare/46014da21...jax-v0.1.58)。'
- en: Breaking changes
  id: totrans-1308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重大更改
- en: JAX has dropped Python 2 support, because Python 2 reached its end of life on
    January 1, 2020\. Please update to Python 3.5 or newer.
  id: totrans-1309
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: JAX 已弃用对 Python 2 的支持，因为 Python 2 于 2020 年 1 月 1 日达到生命周期结束。请更新到 Python 3.5 或更新版本。
- en: New features
  id: totrans-1310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新功能
- en: Forward-mode automatic differentiation (`jvp`) of while loop ([#1980](https://github.com/google/jax/issues/1980))
  id: totrans-1311
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正向模式自动微分（`jvp`）对 while 循环的支持（[#1980](https://github.com/google/jax/issues/1980)）
- en: ''
  id: totrans-1312
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'New NumPy and SciPy functions:'
  id: totrans-1313
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的 NumPy 和 SciPy 功能：
- en: ''
  id: totrans-1314
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-1315
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`jax.numpy.fft.fft2()`'
  id: totrans-1316
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.numpy.fft.fft2()`'
- en: ''
  id: totrans-1317
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-1318
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`jax.numpy.fft.ifft2()`'
  id: totrans-1319
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.numpy.fft.ifft2()`'
- en: ''
  id: totrans-1320
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-1321
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`jax.numpy.fft.rfft()`'
  id: totrans-1322
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.numpy.fft.rfft()`'
- en: ''
  id: totrans-1323
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-1324
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`jax.numpy.fft.irfft()`'
  id: totrans-1325
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.numpy.fft.irfft()`'
- en: ''
  id: totrans-1326
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-1327
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`jax.numpy.fft.rfft2()`'
  id: totrans-1328
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.numpy.fft.rfft2()`'
- en: ''
  id: totrans-1329
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-1330
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`jax.numpy.fft.irfft2()`'
  id: totrans-1331
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.numpy.fft.irfft2()`'
- en: ''
  id: totrans-1332
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-1333
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`jax.numpy.fft.rfftn()`'
  id: totrans-1334
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.numpy.fft.rfftn()`'
- en: ''
  id: totrans-1335
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-1336
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`jax.numpy.fft.irfftn()`'
  id: totrans-1337
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.numpy.fft.irfftn()`'
- en: ''
  id: totrans-1338
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-1339
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`jax.numpy.fft.fftfreq()`'
  id: totrans-1340
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.numpy.fft.fftfreq()`'
- en: ''
  id: totrans-1341
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-1342
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`jax.numpy.fft.rfftfreq()`'
  id: totrans-1343
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.numpy.fft.rfftfreq()`'
- en: ''
  id: totrans-1344
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-1345
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`jax.numpy.linalg.matrix_rank()`'
  id: totrans-1346
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.numpy.linalg.matrix_rank()`'
- en: ''
  id: totrans-1347
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-1348
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`jax.numpy.linalg.matrix_power()`'
  id: totrans-1349
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.numpy.linalg.matrix_power()`'
- en: ''
  id: totrans-1350
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-1351
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`jax.scipy.special.betainc()`'
  id: totrans-1352
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.scipy.special.betainc()`'
- en: ''
  id: totrans-1353
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-1354
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Batched Cholesky decomposition on GPU now uses a more efficient batched kernel.
  id: totrans-1355
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在在GPU上进行批次Cholesky分解时使用了更高效的批次核心。
- en: Notable bug fixes
  id: totrans-1356
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 显著的错误修复
- en: With the Python 3 upgrade, JAX no longer depends on `fastcache`, which should
    help with installation.
  id: totrans-1357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Python 3升级后，JAX不再依赖于`fastcache`，这应该有助于安装。
