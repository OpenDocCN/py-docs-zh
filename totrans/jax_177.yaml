- en: Change log
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[`jax.readthedocs.io/en/latest/changelog.html`](https://jax.readthedocs.io/en/latest/changelog.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Best viewed [here](https://jax.readthedocs.io/en/latest/changelog.html).
  prefs: []
  type: TYPE_NORMAL
- en: jax 0.4.31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: jaxlib 0.4.31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Bug fixes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a bug that meant that negative static_argnums to a jit were mishandled
    by the jit dispatch fast path.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.4.30 (June 18, 2024)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JAX supports ml_dtypes >= 0.2\. In 0.4.29 release, the ml_dtypes version was
    bumped to 0.4.0 but this has been rolled back in this release to give users of
    both TensorFlow and JAX more time to migrate to a newer TensorFlow release.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.experimental.mesh_utils` can now create an efficient mesh for TPU v5e.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'jax now depends on jaxlib directly. This change was enabled by the CUDA plugin
    switch: there are no longer multiple jaxlib variants. You can install a CPU-only
    jax with `pip install jax`, no extras required.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Added an API for exporting and serializing JAX functions. This used to exist
    in `jax.experimental.export` (which is being deprecated), and will now live in
    `jax.export`. See the [documentation](https://jax.readthedocs.io/en/latest/export/index.html).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Deprecations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Internal pretty-printing tools `jax.core.pp_*` are deprecated, and will be removed
    in a future release.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Hashing of tracers is deprecated, and will lead to a `TypeError` in a future
    JAX release. This previously was the case, but there was an inadvertent regression
    in the last several JAX releases.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.experimental.export` is deprecated. Use `jax.export` instead. See the
    [migration guide](https://jax.readthedocs.io/en/latest/export/export.html#migration-guide-from-jax-experimental-export).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Passing an array in place of a dtype is now deprecated in most cases; e.g. for
    arrays `x` and `y`, `x.astype(y)` will raise a warning. To silence it use `x.astype(y.dtype)`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.xla_computation` is deprecated and will be removed in a future release.
    Please use the AOT APIs to get the same functionality as `jax.xla_computation`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.xla_computation(fn)(*args, **kwargs)` can be replaced with `jax.jit(fn).lower(*args,
    **kwargs).compiler_ir(''hlo'')`.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: You can also use `.out_info` property of `jax.stages.Lowered` to get the output
    information (like tree structure, shape and dtype).
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For cross-backend lowering, you can replace `jax.xla_computation(fn, backend='tpu')(*args,
    **kwargs)` with `jax.jit(fn).trace(*args, **kwargs).lower(lowering_platforms=('tpu',)).compiler_ir('hlo')`.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.4.30 (June 18, 2024)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Support for monolithic CUDA jaxlibs has been dropped. You must use the plugin-based
    installation (`pip install jax[cuda12]` or `pip install jax[cuda12_local]`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.4.29 (June 10, 2024)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We anticipate that this will be the last release of JAX and jaxlib supporting
    a monolithic CUDA jaxlib. Future releases will use the CUDA plugin jaxlib (e.g.
    `pip install jax[cuda12]`).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: JAX now requires ml_dtypes version 0.4.0 or newer.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Removed backwards-compatibility support for old usage of the `jax.experimental.export`
    API. It is not possible anymore to use `from jax.experimental.export import export`,
    and instead you should use `from jax.experimental import export`. The removed
    functionality has been deprecated since 0.4.24.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `is_leaf` argument to `jax.tree.all()` & `jax.tree_util.tree_all()`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Deprecations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.sharding.XLACompatibleSharding` is deprecated. Please use `jax.sharding.Sharding`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.experimental.Exported.in_shardings` has been renamed as `jax.experimental.Exported.in_shardings_hlo`.
    Same for `out_shardings`. The old names will be removed after 3 months.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Removed a number of previously-deprecated APIs:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'from `jax.core`: `non_negative_dim`, `DimSize`, `Shape`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'from `jax.lax`: `tie_in`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'from `jax.nn`: `normalize`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'from `jax.interpreters.xla`: `backend_specific_translations`, `translations`,
    `register_translation`, `xla_destructure`, `TranslationRule`, `TranslationContext`,
    `XlaOp`.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `tol` argument of `jax.numpy.linalg.matrix_rank()` is being deprecated and
    will soon be removed. Use `rtol` instead.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `rcond` argument of `jax.numpy.linalg.pinv()` is being deprecated and will
    soon be removed. Use `rtol` instead.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The deprecated `jax.config` submodule has been removed. To configure JAX use
    `import jax` and then reference the config object via `jax.config`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.random` APIs no longer accept batched keys, where previously some did
    unintentionally. Going forward, we recommend explicit use of `jax.vmap()` in such
    cases.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In `jax.scipy.special.beta()`, the `x` and `y` parameters have been renamed
    to `a` and `b` for consistency with other `beta` APIs.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: New Functionality
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `jax.experimental.Exported.in_shardings_jax()` to construct shardings
    that can be used with the JAX APIs from the HloShardings that are stored in the
    `Exported` objects.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.4.29 (June 10, 2024)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Bug fixes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a bug where XLA sharded some concatenation operations incorrectly, which
    manifested as an incorrect output for cumulative reductions (#21403).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a bug where XLA:CPU miscompiled certain matmul fusions (https://github.com/openxla/xla/pull/13301).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixes a compiler crash on GPU (https://github.com/google/jax/issues/21396).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Deprecations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.tree.map(f, None, non-None)` now emits a `DeprecationWarning`, and will
    raise an error in a future version of jax. `None` is only a tree-prefix of itself.
    To preserve the current behavior, you can ask `jax.tree.map` to treat `None` as
    a leaf value by writing: `jax.tree.map(lambda x, y: None if x is None else f(x,
    y), a, b, is_leaf=lambda x: x is None)`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.4.28 (May 9, 2024)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Bug fixes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reverted a change to `make_jaxpr` that was breaking Equinox (#21116).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Deprecations & removals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `kind` argument to `jax.numpy.sort()` and `jax.numpy.argsort()` is now removed.
    Use `stable=True` or `stable=False` instead.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Removed `get_compute_capability` from the `jax.experimental.pallas.gpu` module.
    Use the `compute_capability` attribute of a GPU device, returned by `jax.devices()`
    or `jax.local_devices()`, instead.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `newshape` argument to `jax.numpy.reshape()`is being deprecated and will
    soon be removed. Use `shape` instead.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The minimum jaxlib version of this release is 0.4.27.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.4.28 (May 9, 2024)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Bug fixes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixes a memory corruption bug in the type name of Array and JIT Python objects
    in Python 3.10 or earlier.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a warning `'+ptx84' is not a recognized feature for this target` under
    CUDA 12.4.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a slow compilation problem on CPU.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Windows build is now built with Clang instead of MSVC.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.4.27 (May 7, 2024)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: New Functionality
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `jax.numpy.unstack()` and `jax.numpy.cumulative_sum()`, following their
    addition in the array API 2023 standard, soon to be adopted by NumPy.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Added a new config option `jax_cpu_collectives_implementation` to select the
    implementation of cross-process collective operations used by the CPU backend.
    Choices available are `'none'`(default), `'gloo'` and `'mpi'` (requires jaxlib
    0.4.26). If set to `'none'`, cross-process collective operations are disabled.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.pure_callback()`, `jax.experimental.io_callback()` and `jax.debug.callback()`
    now use `jax.Array` instead of `np.ndarray`. You can recover the old behavior
    by transforming the arguments via `jax.tree.map(np.asarray, args)` before passing
    them to the callback.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`complex_arr.astype(bool)` now follows the same semantics as NumPy, returning
    False where `complex_arr` is equal to `0 + 0j`, and True otherwise.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`core.Token` now is a non-trivial class which wraps a `jax.Array`. It could
    be created and threaded in and out of computations to build up dependency. The
    singleton object `core.token` has been removed, users now should create and use
    fresh `core.Token` objects instead.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: On GPU, the Threefry PRNG implementation no longer lowers to a kernel call by
    default. This choice can improve runtime memory usage at a compile-time cost.
    Prior behavior, which produces a kernel call, can be recovered with `jax.config.update('jax_threefry_gpu_kernel_lowering',
    True)`. If the new default causes issues, please file a bug. Otherwise, we intend
    to remove this flag in a future release.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Deprecations & Removals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pallas now exclusively uses XLA for compiling kernels on GPU. The old lowering
    pass via Triton Python APIs has been removed and the `JAX_TRITON_COMPILE_VIA_XLA`
    environment variable no longer has any effect.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.numpy.clip()` has a new argument signature: `a`, `a_min`, and `a_max`
    are deprecated in favor of `x` (positional only), `min`, and `max` ([#20550](https://github.com/google/jax/issues/20550)).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `device()` method of JAX arrays has been removed, after being deprecated
    since JAX v0.4.21\. Use `arr.devices()` instead.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `initial` argument to `jax.nn.softmax()` and `jax.nn.log_softmax()` is deprecated;
    empty inputs to softmax are now supported without setting this.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In `jax.jit()`, passing invalid `static_argnums` or `static_argnames` now leads
    to an error rather than a warning.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The minimum jaxlib version is now 0.4.23.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `jax.numpy.hypot()` function now issues a deprecation warning when passing
    complex-valued inputs to it. This will raise an error when the deprecation is
    completed.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Scalar arguments to `jax.numpy.nonzero()`, `jax.numpy.where()`, and related
    functions now raise an error, following a similar change in NumPy.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The config option `jax_cpu_enable_gloo_collectives` is deprecated. Use `jax.config.update('jax_cpu_collectives_implementation',
    'gloo')` instead.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `jax.Array.device_buffer` and `jax.Array.device_buffers` methods have been
    removed after being deprecated in JAX v0.4.22\. Instead use `jax.Array.addressable_shards`
    and `jax.Array.addressable_data()`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `condition`, `x`, and `y` parameters of `jax.numpy.where` are now positional-only,
    following deprecation of the keywords in JAX v0.4.21.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Non-array arguments to functions in `jax.lax.linalg` now must be specified by
    keyword. Previously, this raised a DeprecationWarning.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Array-like arguments are now required in several :func:`jax.numpy` APIs, including
    `apply_along_axis()`, `apply_over_axes()`, `inner()`, `outer()`, `cross()`, `kron()`,
    and `lexsort()`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug fixes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.numpy.astype()` will now always return a copy when `copy=True`. Previously,
    no copy would be made when the output array would have the same dtype as the input
    array. This may result in some increased memory usage. The default value is set
    to `copy=False` to preserve backwards compatibility.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.4.27 (May 7, 2024)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: jax 0.4.26 (April 3, 2024)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: New Functionality
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `jax.numpy.trapezoid()`, following the addition of this function in NumPy
    2.0.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Complex-valued `jax.numpy.geomspace()` now chooses the logarithmic spiral branch
    consistent with that of NumPy 2.0.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The behavior of `lax.rng_bit_generator`, and in turn the `'rbg'` and `'unsafe_rbg'`
    PRNG implementations, under `jax.vmap` [has changed](https://github.com/google/jax/issues/19085)
    so that mapping over keys results in random generation only from the first key
    in the batch.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Docs now use `jax.random.key` for construction of PRNG key arrays rather than
    `jax.random.PRNGKey`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Deprecations & Removals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.tree_map()` is deprecated; use `jax.tree.map` instead, or for backward
    compatibility with older JAX versions, use `jax.tree_util.tree_map()`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.clear_backends()` is deprecated as it does not necessarily do what its
    name suggests and can lead to unexpected consequences, e.g., it will not destroy
    existing backends and release corresponding owned resources. Use `jax.clear_caches()`
    if you only want to clean up compilation caches. For backward compatibility or
    you really need to switch/reinitialize the default backend, use `jax.extend.backend.clear_backends()`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `jax.experimental.maps` module and `jax.experimental.maps.xmap` are deprecated.
    Use `jax.experimental.shard_map` or `jax.vmap` with the `spmd_axis_name` argument
    for expressing SPMD device-parallel computations.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `jax.experimental.host_callback` module is deprecated. Use instead the [new
    JAX external callbacks](https://jax.readthedocs.io/en/latest/notebooks/external_callbacks.html).
    Added `JAX_HOST_CALLBACK_LEGACY` flag to assist in the transition to the new callbacks.
    See [#20385](https://github.com/google/jax/issues/20385) for a discussion.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Passing arguments to `jax.numpy.array_equal()` and `jax.numpy.array_equiv()`
    that cannot be converted to a JAX array now results in an exception.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The deprecated flag `jax_parallel_functions_output_gda` has been removed. This
    flag was long deprecated and did nothing; its use was a no-op.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The previously-deprecated imports `jax.interpreters.ad.config` and `jax.interpreters.ad.source_info_util`
    have now been removed. Use `jax.config` and `jax.extend.source_info_util` instead.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: JAX export does not support older serialization versions anymore. Version 9
    has been supported since October 27th, 2023 and has become the default since February
    1, 2024. See [a description of the versions](https://github.com/google/jax/blob/main/jax/experimental/jax2tf/README.md#native-serialization-versions).
    This change could break clients that set a specific JAX serialization version
    lower than 9.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.4.26 (April 3, 2024)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JAX now supports CUDA 12.1 or newer only. Support for CUDA 11.8 has been dropped.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: JAX now supports NumPy 2.0.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.4.25 (Feb 26, 2024)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: New Features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added [CUDA Array Interface](https://numba.readthedocs.io/en/stable/cuda/cuda_array_interface.html)
    import support (requires jaxlib 0.4.24).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: JAX arrays now support NumPy-style scalar boolean indexing, e.g. `x[True]` or
    `x[False]`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `jax.tree` module, with a more convenient interface for referencing functions
    in `jax.tree_util`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.tree.transpose()` (i.e. `jax.tree_util.tree_transpose()`) now accepts
    `inner_treedef=None`, in which case the inner treedef will be automatically inferred.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pallas now uses XLA instead of the Triton Python APIs to compile Triton kernels.
    You can revert to the old behavior by setting the `JAX_TRITON_COMPILE_VIA_XLA`
    environment variable to `"0"`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Several deprecated APIs in `jax.interpreters.xla` that were removed in v0.4.24
    have been re-added in v0.4.25, including `backend_specific_translations`, `translations`,
    `register_translation`, `xla_destructure`, `TranslationRule`, `TranslationContext`,
    and `XLAOp`. These are still considered deprecated, and will be removed again
    in the future when better replacements are available. Refer to [#19816](https://github.com/google/jax/issues/19816)
    for discussion.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Deprecations & Removals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.numpy.linalg.solve()` now shows a deprecation warning for batched 1D solves
    with `b.ndim > 1`. In the future these will be treated as batched 2D solves.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Conversion of a non-scalar array to a Python scalar now raises an error, regardless
    of the size of the array. Previously a deprecation warning was raised in the case
    of non-scalar arrays of size 1\. This follows a similar deprecation in NumPy.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The previously deprecated configuration APIs have been removed following a standard
    3 months deprecation cycle (see API compatibility). These include
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: the `jax.config.config` object and
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: the `define_*_state` and `DEFINE_*` methods of `jax.config`.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Importing the `jax.config` submodule via `import jax.config` is deprecated.
    To configure JAX use `import jax` and then reference the config object via `jax.config`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The minimum jaxlib version is now 0.4.20.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.4.25 (Feb 26, 2024)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: jax 0.4.24 (Feb 6, 2024)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JAX lowering to StableHLO does not depend on physical devices anymore. If your
    primitive wraps custom_partitioning or JAX callbacks in the lowering rule i.e.
    function passed to `rule` parameter of `mlir.register_lowering` then add your
    primitive to `jax._src.dispatch.prim_requires_devices_during_lowering` set. This
    is needed because custom_partitioning and JAX callbacks need physical devices
    to create `Sharding`s during lowering. This is a temporary state until we can
    create `Sharding`s without physical devices.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.numpy.argsort()` and `jax.numpy.sort()` now support the `stable` and `descending`
    arguments.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Several changes to the handling of shape polymorphism (used in `jax.experimental.jax2tf`
    and `jax.experimental.export`):'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: cleaner pretty-printing of symbolic expressions ([#19227](https://github.com/google/jax/issues/19227))
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: added the ability to specify symbolic constraints on the dimension variables.
    This makes shape polymorphism more expressive, and gives a way to workaround limitations
    in the reasoning about inequalities. See https://github.com/google/jax/blob/main/jax/experimental/jax2tf/README.md#user-specified-symbolic-constraints.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: with the addition of symbolic constraints ([#19235](https://github.com/google/jax/issues/19235))
    we now consider dimension variables from different scopes to be different, even
    if they have the same name. Symbolic expressions from different scopes cannot
    interact, e.g., in arithmetic operations. Scopes are introduced by `jax.experimental.jax2tf.convert()`,
    `jax.experimental.export.symbolic_shape()`, `jax.experimental.export.symbolic_args_specs()`.
    The scope of a symbolic expression `e` can be read with `e.scope` and passed into
    the above functions to direct them to construct symbolic expressions in a given
    scope. See https://github.com/google/jax/blob/main/jax/experimental/jax2tf/README.md#user-specified-symbolic-constraints.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: simplified and faster equality comparisons, where we consider two symbolic dimensions
    to be equal if the normalized form of their difference reduces to 0 ([#19231](https://github.com/google/jax/issues/19231);
    note that this may result in user-visible behavior changes)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: improved the error messages for inconclusive inequality comparisons ([#19235](https://github.com/google/jax/issues/19235)).
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: the `core.non_negative_dim` API (introduced recently) was deprecated and `core.max_dim`
    and `core.min_dim` were introduced ([#18953](https://github.com/google/jax/issues/18953))
    to express `max` and `min` for symbolic dimensions. You can use `core.max_dim(d,
    0)` instead of `core.non_negative_dim(d)`.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: the `shape_poly.is_poly_dim` is deprecated in favor of `export.is_symbolic_dim`
    ([#19282](https://github.com/google/jax/issues/19282)).
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: the `export.args_specs` is deprecated in favor of `export.symbolic_args_specs
    ({jax-issue}`#19283`).
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: the `shape_poly.PolyShape` and `jax2tf.PolyShape` are deprecated, use strings
    for polymorphic shapes specifications ([#19284](https://github.com/google/jax/issues/19284)).
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: JAX default native serialization version is now 9\. This is relevant for `jax.experimental.jax2tf`
    and `jax.experimental.export`. See [description of version numbers](https://github.com/google/jax/blob/main/jax/experimental/jax2tf/README.md#native-serialization-versions).
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Refactored the API for `jax.experimental.export`. Instead of `from jax.experimental.export
    import export` you should use now `from jax.experimental import export`. The old
    way of importing will continue to work for a deprecation period of 3 months.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `jax.scipy.stats.sem()`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.numpy.unique()` with `return_inverse = True` returns inverse indices reshaped
    to the dimension of the input, following a similar change to [`numpy.unique()`](https://numpy.org/doc/stable/reference/generated/numpy.unique.html#numpy.unique
    "(in NumPy v2.0)") in NumPy 2.0.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.numpy.sign()` now returns `x / abs(x)` for nonzero complex inputs. This
    is consistent with the behavior of `numpy.sign()` in NumPy version 2.0.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.scipy.special.logsumexp()` with `return_sign=True` now uses the NumPy
    2.0 convention for the complex sign, `x / abs(x)`. This is consistent with the
    behavior of [`scipy.special.logsumexp()`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.logsumexp.html#scipy.special.logsumexp
    "(in SciPy v1.13.1)") in SciPy v1.13.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: JAX now supports the bool DLPack type for both import and export. Previously
    bool values could not be imported and were exported as integers.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Deprecations & Removals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A number of previously deprecated functions have been removed, following a
    standard 3+ month deprecation cycle (see API compatibility). This includes:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'From `jax.core`: `TracerArrayConversionError`, `TracerIntegerConversionError`,
    `UnexpectedTracerError`, `as_hashable_function`, `collections`, `dtypes`, `lu`,
    `map`, `namedtuple`, `partial`, `pp`, `ref`, `safe_zip`, `safe_map`, `source_info_util`,
    `total_ordering`, `traceback_util`, `tuple_delete`, `tuple_insert`, and `zip`.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'From `jax.lax`: `dtypes`, `itertools`, `naryop`, `naryop_dtype_rule`, `standard_abstract_eval`,
    `standard_naryop`, `standard_primitive`, `standard_unop`, `unop`, and `unop_dtype_rule`.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `jax.linear_util` submodule and all its contents.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `jax.prng` submodule and all its contents.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'From `jax.random`: `PRNGKeyArray`, `KeyArray`, `default_prng_impl`, `threefry_2x32`,
    `threefry2x32_key`, `threefry2x32_p`, `rbg_key`, and `unsafe_rbg_key`.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'From `jax.tree_util`: `register_keypaths`, `AttributeKeyPathEntry`, and `GetItemKeyPathEntry`.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'from `jax.interpreters.xla`: `backend_specific_translations`, `translations`,
    `register_translation`, `xla_destructure`, `TranslationRule`, `TranslationContext`,
    `axis_groups`, `ShapedArray`, `ConcreteArray`, `AxisEnv`, `backend_compile`, and
    `XLAOp`.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'from `jax.numpy`: `NINF`, `NZERO`, `PZERO`, `row_stack`, `issubsctype`, `trapz`,
    and `in1d`.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'from `jax.scipy.linalg`: `tril` and `triu`.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The previously-deprecated method `PRNGKeyArray.unsafe_raw_array` has been removed.
    Use `jax.random.key_data()` instead.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bool(empty_array)` now raises an error rather than returning `False`. This
    previously raised a deprecation warning, and follows a similar change in NumPy.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for the mhlo MLIR dialect has been deprecated. JAX no longer uses the
    mhlo dialect, in favor of stablehlo. APIs that refer to “mhlo” will be removed
    in the future. Use the “stablehlo” dialect instead.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.random`: passing batched keys directly to random number generation functions,
    such as `bits()`, `gamma()`, and others, is deprecated and will emit a `FutureWarning`.
    Use `jax.vmap` for explicit batching.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.lax.tie_in()` is deprecated: it has been a no-op since JAX v0.2.0.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.4.24 (Feb 6, 2024)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JAX now supports CUDA 12.3 and CUDA 11.8\. Support for CUDA 12.2 has been dropped.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cost_analysis` now works with cross-compiled `Compiled` objects (i.e. when
    using `.lower().compile()` with a topology object, e.g., to compile for Cloud
    TPU from a non-TPU computer).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Added [CUDA Array Interface](https://numba.readthedocs.io/en/stable/cuda/cuda_array_interface.html)
    import support (requires jax 0.4.25).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.4.23 (Dec 13, 2023)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: jaxlib 0.4.23 (Dec 13, 2023)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Fixed a bug that caused verbose logging from the GPU compiler during compilation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.4.22 (Dec 13, 2023)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Deprecations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `device_buffer` and `device_buffers` properties of JAX arrays are deprecated.
    Explicit buffers have been replaced by the more flexible array sharding interface,
    but the previous outputs can be recovered this way:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`arr.device_buffer` becomes `arr.addressable_data(0)`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`arr.device_buffers` becomes `[x.data for x in arr.addressable_shards]`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.4.22 (Dec 13, 2023)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: jax 0.4.21 (Dec 4 2023)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: New Features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `jax.nn.squareplus`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The minimum jaxlib version is now 0.4.19.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Released wheels are built now with clang instead of gcc.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Enforce that the device backend has not been initialized prior to calling `jax.distributed.initialize()`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Automate arguments to `jax.distributed.initialize()` in cloud TPU environments.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Deprecations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The previously-deprecated `sym_pos` argument has been removed from `jax.scipy.linalg.solve()`.
    Use `assume_a='pos'` instead.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Passing `None` to `jax.array()` or `jax.asarray()`, either directly or within
    a list or tuple, is deprecated and now raises a [`FutureWarning`](https://docs.python.org/3/library/exceptions.html#FutureWarning
    "(in Python v3.12)"). It currently is converted to NaN, and in the future will
    raise a [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError
    "(in Python v3.12)").
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Passing the `condition`, `x`, and `y` parameters to `jax.numpy.where` by keyword
    arguments has been deprecated, to match `numpy.where`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Passing arguments to `jax.numpy.array_equal()` and `jax.numpy.array_equiv()`
    that cannot be converted to a JAX array is deprecated and now raises a `DeprecationWaning`.
    Currently the functions return False, in the future this will raise an exception.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `device()` method of JAX arrays is deprecated. Depending on the context,
    it may be replaced with one of the following:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.Array.devices()` returns the set of all devices used by the array.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.Array.sharding` gives the sharding configuration used by the array.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.4.21 (Dec 4 2023)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In preparation for adding distributed CPU support, JAX now treats CPU devices
    identically to GPU and TPU devices, that is:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.devices()` includes all devices present in a distributed job, even those
    not local to the current process. `jax.local_devices()` still only includes devices
    local to the current process, so if the change to `jax.devices()` breaks you,
    you most likely want to use `jax.local_devices()` instead.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: CPU devices now receive a globally unique ID number within a distributed job;
    previously CPU devices would receive a process-local ID number.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `process_index` of each CPU device will now match any GPU or TPU devices
    within the same process; previously the `process_index` of a CPU device was always
    0.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: On NVIDIA GPU, JAX now prefers a Jacobi SVD solver for matrices up to 1024x1024\.
    The Jacobi solver appears faster than the non-Jacobi version.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug fixes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed error/hang when an array with non-finite values is passed to a non-symmetric
    eigendecomposition (#18226). Arrays with non-finite values now produce arrays
    full of NaNs as outputs.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.4.20 (Nov 2, 2023)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: jaxlib 0.4.20 (Nov 2, 2023)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Bug fixes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed some type confusion between E4M3 and E5M2 float8 types.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.4.19 (Oct 19, 2023)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: New Features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `jax.typing.DTypeLike`, which can be used to annotate objects that are
    convertible to JAX dtypes.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `jax.numpy.fill_diagonal`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JAX now requires SciPy 1.9 or newer.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug fixes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Only process 0 in a multicontroller distributed JAX program will write persistent
    compilation cache entries. This fixes write contention if the cache is placed
    on a network file system such as GCS.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The version check for cusolver and cufft no longer considers the patch versions
    when determining if the installed version of these libraries is at least as new
    as the versions against which JAX was built.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.4.19 (Oct 19, 2023)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib will now always prefer pip-installed NVIDIA CUDA libraries (nvidia-…
    packages) over any other CUDA installation if they are installed, including installations
    named in `LD_LIBRARY_PATH`. If this causes problems and the intent is to use a
    system-installed CUDA, the fix is to remove the pip installed CUDA library packages.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.4.18 (Oct 6, 2023)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: jaxlib 0.4.18 (Oct 6, 2023)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CUDA jaxlibs now depend on the user to install a compatible NCCL version. If
    using the recommended `cuda12_pip` installation, NCCL should be installed automatically.
    Currently, NCCL 2.16 or newer is required.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: We now provide Linux aarch64 wheels, both with and without NVIDIA GPU support.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.Array.item()` now supports optional index arguments.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Deprecations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A number of internal utilities and inadvertent exports in `jax.lax` have been
    deprecated, and will be removed in a future release.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.lax.dtypes`: use `jax.dtypes` instead.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.lax.itertools`: use `itertools` instead.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`naryop`, `naryop_dtype_rule`, `standard_abstract_eval`, `standard_naryop`,
    `standard_primitive`, `standard_unop`, `unop`, and `unop_dtype_rule` are internal
    utilities, now deprecated without replacement.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug fixes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed Cloud TPU regression where compilation would OOM due to smem.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.4.17 (Oct 3, 2023)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: New features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added new `jax.numpy.bitwise_count()` function, matching the API of the similar
    function recently added to NumPy.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Deprecations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removed the deprecated module `jax.abstract_arrays` and all its contents.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Named key constructors in `jax.random` are deprecated. Pass the `impl` argument
    to `jax.random.PRNGKey()` or `jax.random.key()` instead:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`random.threefry2x32_key(seed)` becomes `random.PRNGKey(seed, impl=''threefry2x32'')`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`random.rbg_key(seed)` becomes `random.PRNGKey(seed, impl=''rbg'')`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`random.unsafe_rbg_key(seed)` becomes `random.PRNGKey(seed, impl=''unsafe_rbg'')`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'CUDA: JAX now verifies that the CUDA libraries it finds are at least as new
    as the CUDA libraries that JAX was built against. If older libraries are found,
    JAX raises an exception since that is preferable to mysterious failures and crashes.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Removed the “No GPU/TPU” found warning. Instead warn if, on Linux, an NVIDIA
    GPU or a Google TPU are found but not used and `--jax_platforms` was not specified.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.scipy.stats.mode()` now returns a 0 count if the mode is taken across
    a size-0 axis, matching the behavior of `scipy.stats.mode` in SciPy 1.11.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Most `jax.numpy` functions and attributes now have fully-defined type stubs.
    Previously many of these were treated as `Any` by static type checkers like `mypy`
    and `pytype`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.4.17 (Oct 3, 2023)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Changes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python 3.12 wheels were added in this release.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The CUDA 12 wheels now require CUDA 12.2 or newer and cuDNN 8.9.4 or newer.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bug fixes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed log spam from ABSL when the JAX CPU backend was initialized.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.4.16 (Sept 18, 2023)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `jax.numpy.ufunc`, as well as `jax.numpy.frompyfunc()`, which can convert
    any scalar-valued function into a `numpy.ufunc()`-like object, with methods such
    as `outer()`, `reduce()`, `accumulate()`, `at()`, and `reduceat()` ([#17054](https://github.com/google/jax/issues/17054)).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `jax.scipy.integrate.trapezoid()`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When not running under IPython: when an exception is raised, JAX now filters
    out the entirety of its internal frames from tracebacks. (Without the “unfiltered
    stack trace” that previously appeared.) This should produce much friendlier-looking
    tracebacks. See [here](https://github.com/google/jax/pull/16949) for an example.
    This behavior can be changed by setting `JAX_TRACEBACK_FILTERING=remove_frames`
    (for two separate unfiltered/filtered tracebacks, which was the old behavior)
    or `JAX_TRACEBACK_FILTERING=off` (for one unfiltered traceback).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax2tf default serialization version is now 7, which introduces new shape [safety
    assertions](https://github.com/google/jax/blob/main/jax/experimental/jax2tf/README.md#errors-in-presence-of-shape-polymorphism).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Devices passed to `jax.sharding.Mesh` should be hashable. This specifically
    applies to mock devices or user created devices. `jax.devices()` are already hashable.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Breaking changes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jax2tf now uses native serialization by default. See the [jax2tf documentation](https://github.com/google/jax/blob/main/jax/experimental/jax2tf/README.md)
    for details and for mechanisms to override the default.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The option `--jax_coordination_service` has been removed. It is now always `True`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.jaxpr_util` has been removed from the public JAX namespace.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`JAX_USE_PJRT_C_API_ON_TPU` no longer has an effect (i.e. it always defaults
    to true).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The backwards compatibility flag `--jax_host_callback_ad_transforms` introduced
    in December 2021, has been removed.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Deprecations:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Several `jax.numpy` APIs have been deprecated following [NumPy NEP-52](https://numpy.org/neps/nep-0052-python-api-cleanup.html):'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.numpy.NINF` has been deprecated. Use `-jax.numpy.inf` instead.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.numpy.PZERO` has been deprecated. Use `0.0` instead.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.numpy.NZERO` has been deprecated. Use `-0.0` instead.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.numpy.issubsctype(x, t)` has been deprecated. Use `jax.numpy.issubdtype(x.dtype,
    t)`.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.numpy.row_stack` has been deprecated. Use `jax.numpy.vstack` instead.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.numpy.in1d` has been deprecated. Use `jax.numpy.isin` instead.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.numpy.trapz` has been deprecated. Use `jax.scipy.integrate.trapezoid`
    instead.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.scipy.linalg.tril` and `jax.scipy.linalg.triu` have been deprecated, following
    SciPy. Use `jax.numpy.tril` and `jax.numpy.triu` instead.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.lax.prod` has been removed after being deprecated in JAX v0.4.11. Use
    the built-in `math.prod` instead.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A number of exports from `jax.interpreters.xla` related to defining HLO lowering
    rules for custom JAX primitives have been deprecated. Custom primitives should
    be defined using the StableHLO lowering utilities in `jax.interpreters.mlir` instead.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following previously-deprecated functions have been removed after a three-month
    deprecation period:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.abstract_arrays.ShapedArray`: use `jax.core.ShapedArray`.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.abstract_arrays.raise_to_shaped`: use `jax.core.raise_to_shaped`.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.numpy.alltrue`: use `jax.numpy.all`.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.numpy.sometrue`: use `jax.numpy.any`.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.numpy.product`: use `jax.numpy.prod`.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.numpy.cumproduct`: use `jax.numpy.cumprod`.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Deprecations/removals:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The internal submodule `jax.prng` is now deprecated. Its contents are available
    at `jax.extend.random`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The internal submodule path `jax.linear_util` has been deprecated. Use `jax.extend.linear_util`
    instead (Part of jax.extend: a module for extensions)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.random.PRNGKeyArray` and `jax.random.KeyArray` are deprecated. Use `jax.Array`
    for type annotations, and `jax.dtypes.issubdtype(arr.dtype, jax.dtypes.prng_key)`
    for runtime detection of typed prng keys.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The method `PRNGKeyArray.unsafe_raw_array` is deprecated. Use `jax.random.key_data()`
    instead.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.experimental.pjit.with_sharding_constraint` is deprecated. Use `jax.lax.with_sharding_constraint`
    instead.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The internal utilities `jax.core.is_opaque_dtype` and `jax.core.has_opaque_dtype`
    have been removed. Opaque dtypes have been renamed to Extended dtypes; use `jnp.issubdtype(dtype,
    jax.dtypes.extended)` instead (available since jax v0.4.14).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The utility `jax.interpreters.xla.register_collective_primitive` has been removed.
    This utility did nothing useful in recent JAX releases and calls to it can be
    safely removed.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The internal submodule path `jax.linear_util` has been deprecated. Use `jax.extend.linear_util`
    instead (Part of jax.extend: a module for extensions)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.4.16 (Sept 18, 2023)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Changes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sparse CSR matrix multiplications via the experimental jax sparse APIs no longer
    uses a deterministic algorithm on NVIDIA GPUs. This change was made to improve
    compatibility with CUDA 12.2.1.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bug fixes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a crash on Windows due to a fatal LLVM error related to out-of-order sections
    and IMAGE_REL_AMD64_ADDR32NB relocations (https://github.com/openxla/xla/commit/cb732a921f0c4184995cbed82394931011d12bd4).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.4.14 (July 27, 2023)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.jit` takes `donate_argnames` as an argument. It’s semantics are similar
    to `static_argnames`. If neither donate_argnums nor donate_argnames is provided,
    no arguments are donated. If donate_argnums is not provided but donate_argnames
    is, or vice versa, JAX uses `inspect.signature(fun)` to find any positional arguments
    that correspond to donate_argnames (or vice versa). If both donate_argnums and
    donate_argnames are provided, inspect.signature is not used, and only actual parameters
    listed in either donate_argnums or donate_argnames will be donated.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.random.gamma()` has been re-factored to a more efficient algorithm with
    more robust endpoint behavior ([#16779](https://github.com/google/jax/issues/16779)).
    This means that the sequence of values returned for a given `key` will change
    between JAX v0.4.13 and v0.4.14 for `gamma` and related samplers (including `jax.random.ball()`,
    `jax.random.beta()`, `jax.random.chisquare()`, `jax.random.dirichlet()`, `jax.random.generalized_normal()`,
    `jax.random.loggamma()`, `jax.random.t()`).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Deletions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`in_axis_resources` and `out_axis_resources` have been deleted from pjit since
    it has been more than 3 months since their deprecation. Please use `in_shardings`
    and `out_shardings` as the replacement. This is a safe and trivial name replacement.
    It does not change any of the current pjit semantics and doesn’t break any code.
    You can still pass in `PartitionSpecs` to in_shardings and out_shardings.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Deprecations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python 3.8 support has been dropped as per https://jax.readthedocs.io/en/latest/deprecation.html
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: JAX now requires NumPy 1.22 or newer as per https://jax.readthedocs.io/en/latest/deprecation.html
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Passing optional arguments to `jax.numpy.ndarray.at()` by position is no longer
    supported, after being deprecated in JAX version 0.4.7. For example, instead of
    `x.at[i].get(True)`, use `x.at[i].get(indices_are_sorted=True)`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following `jax.Array` methods have been removed, after being deprecated
    in JAX v0.4.5:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.Array.broadcast`: use `jax.lax.broadcast()` instead.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.Array.broadcast_in_dim`: use `jax.lax.broadcast_in_dim()` instead.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.Array.split`: use `jax.numpy.split()` instead.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following APIs have been removed after previous deprecation:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.ad`: use `jax.interpreters.ad`.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.curry`: use `curry = lambda f: partial(partial, f)`.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.partial_eval`: use `jax.interpreters.partial_eval`.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.pxla`: use `jax.interpreters.pxla`.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.xla`: use `jax.interpreters.xla`.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.ShapedArray`: use `jax.core.ShapedArray`.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.interpreters.pxla.device_put`: use `jax.device_put()`.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.interpreters.pxla.make_sharded_device_array`: use `jax.make_array_from_single_device_arrays()`.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.interpreters.pxla.ShardedDeviceArray`: use `jax.Array`.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.numpy.DeviceArray`: use `jax.Array`.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.stages.Compiled.compiler_ir`: use `jax.stages.Compiled.as_text()`.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Breaking changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JAX now requires ml_dtypes version 0.2.0 or newer.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: To fix a corner case, calls to `jax.lax.cond()` with five arguments will always
    resolve to the “common operands” `cond` behavior (as documented) if the second
    and third arguments are callable, even if other operands are callable as well.
    See [#16413](https://github.com/google/jax/issues/16413).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The deprecated config options `jax_array` and `jax_jit_pjit_api_merge`, which
    did nothing, have been removed. These options have been true by default for many
    releases.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: New features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JAX now supports a configuration flag –jax_serialization_version and a JAX_SERIALIZATION_VERSION
    environment variable to control the serialization version ([#16746](https://github.com/google/jax/issues/16746)).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax2tf in presence of shape polymorphism now generates code that checks certain
    shape constraints, if the serialization version is at least 7. See https://github.com/google/jax/blob/main/jax/experimental/jax2tf/README.md#errors-in-presence-of-shape-polymorphism.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.4.14 (July 27, 2023)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Deprecations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python 3.8 support has been dropped as per https://jax.readthedocs.io/en/latest/deprecation.html
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.4.13 (June 22, 2023)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.jit` now allows `None` to be passed to `in_shardings` and `out_shardings`.
    The semantics are as follows:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For in_shardings, JAX will mark is as replicated but this behavior can change
    in the future.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For out_shardings, we will rely on the XLA GSPMD partitioner to determine the
    output shardings.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.experimental.pjit.pjit` also allows `None` to be passed to `in_shardings`
    and `out_shardings`. The semantics are as follows:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If the mesh context manager is *not* provided, JAX has the freedom to choose
    whatever sharding it wants.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For in_shardings, JAX will mark is as replicated but this behavior can change
    in the future.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For out_shardings, we will rely on the XLA GSPMD partitioner to determine the
    output shardings.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If the mesh context manager is provided, None will imply that the value will
    be replicated on all devices of the mesh.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Executable.cost_analysis() works on Cloud TPU
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Added a warning if a non-allowlisted `jaxlib` plugin is in use.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `jax.tree_util.tree_leaves_with_path`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`None` is not a valid input to `jax.experimental.multihost_utils.host_local_array_to_global_array`
    or `jax.experimental.multihost_utils.global_array_to_host_local_array`. Please
    use `jax.sharding.PartitionSpec()` if you wanted to replicate your input.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug fixes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed incorrect wheel name in CUDA 12 releases (#16362); the correct wheel is
    named `cudnn89` instead of `cudnn88`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Deprecations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `native_serialization_strict_checks` parameter to `jax.experimental.jax2tf.convert()`
    is deprecated in favor of the new `native_serializaation_disabled_checks` ([#16347](https://github.com/google/jax/issues/16347)).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.4.13 (June 22, 2023)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added Windows CPU-only wheels to the `jaxlib` Pypi release.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug fixes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`__cuda_array_interface__` was broken in previous jaxlib versions and is now
    fixed ([#16440](https://github.com/google/jax/issues/16440)).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Concurrent CUDA kernel tracing is now enabled by default on NVIDIA GPUs.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.4.12 (June 8, 2023)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added [`scipy.spatial.transform.Rotation`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.html#scipy.spatial.transform.Rotation
    "(in SciPy v1.13.1)") and [`scipy.spatial.transform.Slerp`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Slerp.html#scipy.spatial.transform.Slerp
    "(in SciPy v1.13.1)")
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Deprecations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.abstract_arrays` and its contents are now deprecated. See related functionality
    in :mod:`jax.core`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.numpy.alltrue`: use `jax.numpy.all`. This follows the deprecation of `numpy.alltrue`
    in NumPy version 1.25.0.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.numpy.sometrue`: use `jax.numpy.any`. This follows the deprecation of
    `numpy.sometrue` in NumPy version 1.25.0.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.numpy.product`: use `jax.numpy.prod`. This follows the deprecation of
    `numpy.product` in NumPy version 1.25.0.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.numpy.cumproduct`: use `jax.numpy.cumprod`. This follows the deprecation
    of `numpy.cumproduct` in NumPy version 1.25.0.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.sharding.OpShardingSharding` has been removed since it has been 3 months
    since it was deprecated.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.4.12 (June 8, 2023)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Includes PTX/SASS for Hopper (SM version 9.0+) GPUs. Previous versions of jaxlib
    should work on Hopper but would have a long JIT-compilation delay the first time
    a JAX operation was executed.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug fixes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixes incorrect source line information in JAX-generated Python tracebacks under
    Python 3.11.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixes crash when printing local variables of frames in JAX-generated Python
    tracebacks (#16027).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.4.11 (May 31, 2023)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Deprecations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following APIs have been removed after a 3 month deprecation period, in
    accordance with the API compatibility policy:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.experimental.PartitionSpec`: use `jax.sharding.PartitionSpec`.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.experimental.maps.Mesh`: use `jax.sharding.Mesh`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.experimental.pjit.NamedSharding`: use `jax.sharding.NamedSharding`.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.experimental.pjit.PartitionSpec`: use `jax.sharding.PartitionSpec`.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.experimental.pjit.FROM_GDA`. Instead pass sharded `jax.Array` objects
    as input and remove the optional `in_shardings` argument to `pjit`.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.interpreters.pxla.PartitionSpec`: use `jax.sharding.PartitionSpec`.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.interpreters.pxla.Mesh`: use `jax.sharding.Mesh`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.interpreters.xla.Buffer`: use `jax.Array`.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.interpreters.xla.Device`: use `jax.Device`.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.interpreters.xla.DeviceArray`: use `jax.Array`.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.interpreters.xla.device_put`: use `jax.device_put`.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.interpreters.xla.xla_call_p`: use `jax.experimental.pjit.pjit_p`.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`axis_resources` argument of `with_sharding_constraint` is removed. Please
    use `shardings` instead.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.4.11 (May 31, 2023)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `memory_stats()` method to `Device`s. If supported, this returns a dict
    of string stat names with int values, e.g. `"bytes_in_use"`, or None if the platform
    doesn’t support memory statistics. The exact stats returned may vary across platforms.
    Currently only implemented on Cloud TPU.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Readded support for the Python buffer protocol (`memoryview`) on CPU devices.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.4.10 (May 11, 2023)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: jaxlib 0.4.10 (May 11, 2023)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed `'apple-m1' is not a recognized processor for this target (ignoring processor)`
    issue that prevented previous release from running on Mac M1.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.4.9 (May 9, 2023)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The flags experimental_cpp_jit, experimental_cpp_pjit and experimental_cpp_pmap
    have been removed. They are now always on.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Accuracy of singular value decomposition (SVD) on TPU has been improved (requires
    jaxlib 0.4.9).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Deprecations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.experimental.gda_serialization` is deprecated and has been renamed to
    `jax.experimental.array_serialization`. Please change your imports to use `jax.experimental.array_serialization`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `in_axis_resources` and `out_axis_resources` arguments of pjit have been
    deprecated. Please use `in_shardings` and `out_shardings` respectively.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The function `jax.numpy.msort` has been removed. It has been deprecated since
    JAX v0.4.1\. Use `jnp.sort(a, axis=0)` instead.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`in_parts` and `out_parts` arguments have been removed from `jax.xla_computation`
    since they were only used with sharded_jit and sharded_jit is long gone.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`instantiate_const_outputs` argument has been removed from `jax.xla_computation`
    since it has been unused for a very long time.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.4.9 (May 9, 2023)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: jax 0.4.8 (March 29, 2023)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Breaking changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A major component of the Cloud TPU runtime has been upgraded. This enables
    the following new features on Cloud TPU:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.debug.print()`, `jax.debug.callback()`, and `jax.debug.breakpoint()` now
    work on Cloud TPU'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Automatic TPU memory defragmentation
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.experimental.host_callback()` is no longer supported on Cloud TPU with
    the new runtime component. Please file an issue on the [JAX issue tracker](https://github.com/google/jax/issues)
    if the new `jax.debug` APIs are insufficient for your use case.'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: The old runtime component will be available for at least the next three months
    by setting the environment variable `JAX_USE_PJRT_C_API_ON_TPU=false`. If you
    find you need to disable the new runtime for any reason, please let us know on
    the [JAX issue tracker](https://github.com/google/jax/issues).
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The minimum jaxlib version has been bumped from 0.4.6 to 0.4.7.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Deprecations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CUDA 11.4 support has been dropped. JAX GPU wheels only support CUDA 11.8 and
    CUDA 12\. Older CUDA versions may work if jaxlib is built from source.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`global_arg_shapes` argument of pmap only worked with sharded_jit and has been
    removed from pmap. Please migrate to pjit and remove global_arg_shapes from pmap.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.4.7 (March 27, 2023)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As per https://jax.readthedocs.io/en/latest/jax_array_migration.html#jax-array-migration
    `jax.config.jax_array` cannot be disabled anymore.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.config.jax_jit_pjit_api_merge` cannot be disabled anymore.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.experimental.jax2tf.convert()` now supports the `native_serialization`
    parameter to use JAX’s native lowering to StableHLO to obtain a StableHLO module
    for the entire JAX function instead of lowering each JAX primitive to a TensorFlow
    op. This simplifies the internals and increases the confidence that what you serialize
    matches the JAX native semantics. See [documentation](https://github.com/google/jax/blob/main/jax/experimental/jax2tf/README.md).
    As part of this change the config flag `--jax2tf_default_experimental_native_lowering`
    has been renamed to `--jax2tf_native_serialization`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: JAX now depends on `ml_dtypes`, which contains definitions of NumPy types like
    bfloat16\. These definitions were previously internal to JAX, but have been split
    into a separate package to facilitate sharing them with other projects.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: JAX now requires NumPy 1.21 or newer and SciPy 1.7 or newer.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Deprecations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The type `jax.numpy.DeviceArray` is deprecated. Use `jax.Array` instead, for
    which it is an alias.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The type `jax.interpreters.pxla.ShardedDeviceArray` is deprecated. Use `jax.Array`
    instead.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Passing additional arguments to `jax.numpy.ndarray.at()` by position is deprecated.
    For example, instead of `x.at[i].get(True)`, use `x.at[i].get(indices_are_sorted=True)`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.interpreters.xla.device_put` is deprecated. Please use `jax.device_put`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.interpreters.pxla.device_put` is deprecated. Please use `jax.device_put`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.experimental.pjit.FROM_GDA` is deprecated. Please pass in sharded jax.Arrays
    as input and remove the `in_shardings` argument to pjit since it is optional.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.4.7 (March 27, 2023)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Changes:'
  prefs: []
  type: TYPE_NORMAL
- en: jaxlib now depends on `ml_dtypes`, which contains definitions of NumPy types
    like bfloat16\. These definitions were previously internal to JAX, but have been
    split into a separate package to facilitate sharing them with other projects.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.4.6 (Mar 9, 2023)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.tree_util` now contain a set of APIs that allow user to define keys for
    their custom pytree node. This includes:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tree_flatten_with_path` that flattens a tree and return not only each leaf
    but also their key paths.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tree_map_with_path` that can map a function that takes the key path as an
    argument.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`register_pytree_with_keys` to register how the key path and leaves should
    looks like in a custom pytree node.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`keystr` that pretty-prints a key path.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax2tf.call_tf()` has a new parameter `output_shape_dtype` (default `None`)
    that can be used to declare the output shape and type of the result. This enables
    `jax2tf.call_tf()` to work in the presence of shape polymorphism. ([#14734](https://github.com/google/jax/issues/14734)).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Deprecations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The old key-path APIs in `jax.tree_util` are deprecated and will be removed
    3 months from Mar 10 2023:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`register_keypaths`: use `jax.tree_util.register_pytree_with_keys()` instead.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AttributeKeyPathEntry` : use `GetAttrKey` instead.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`GetitemKeyPathEntry` : use `SequenceKey` or `DictKey` instead.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.4.6 (Mar 9, 2023)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: jax 0.4.5 (Mar 2, 2023)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Deprecations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.sharding.OpShardingSharding` has been renamed to `jax.sharding.GSPMDSharding`.
    `jax.sharding.OpShardingSharding` will be removed in 3 months from Feb 17, 2023.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following `jax.Array` methods are deprecated and will be removed 3 months
    from Feb 23 2023:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.Array.broadcast`: use `jax.lax.broadcast()` instead.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.Array.broadcast_in_dim`: use `jax.lax.broadcast_in_dim()` instead.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.Array.split`: use `jax.numpy.split()` instead.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.4.4 (Feb 16, 2023)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The implementation of `jit` and `pjit` has been merged. Merging jit and pjit
    changes the internals of JAX without affecting the public API of JAX. Before,
    `jit` was a final style primitive. Final style means that the creation of jaxpr
    was delayed as much as possible and transformations were stacked on top of each
    other. With the `jit`-`pjit` implementation merge, `jit` becomes an initial style
    primitive which means that we trace to jaxpr as early as possible. For more information
    see [this section in autodidax](https://jax.readthedocs.io/en/latest/autodidax.html#on-the-fly-final-style-and-staged-initial-style-processing).
    Moving to initial style should simplify JAX’s internals and make development of
    features like dynamic shapes, etc easier. You can disable it only via the environment
    variable i.e. `os.environ['JAX_JIT_PJIT_API_MERGE'] = '0'`. The merge must be
    disabled via an environment variable since it affects JAX at import time so it
    needs to be disabled before jax is imported.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`axis_resources` argument of `with_sharding_constraint` is deprecated. Please
    use `shardings` instead. There is no change needed if you were using `axis_resources`
    as an arg. If you were using it as a kwarg, then please use `shardings` instead.
    `axis_resources` will be removed after 3 months from Feb 13, 2023.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: added the `jax.typing` module, with tools for type annotations of JAX functions.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following names have been deprecated:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.xla.Device` and `jax.interpreters.xla.Device`: use `jax.Device`.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.experimental.maps.Mesh`. Use `jax.sharding.Mesh` instead.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.experimental.pjit.NamedSharding`: use `jax.sharding.NamedSharding`.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.experimental.pjit.PartitionSpec`: use `jax.sharding.PartitionSpec`.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.interpreters.pxla.Mesh`: use `jax.sharding.Mesh`.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.interpreters.pxla.PartitionSpec`: use `jax.sharding.PartitionSpec`.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Breaking Changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the `initial` argument to reduction functions like :func:`jax.numpy.sum` is
    now required to be a scalar, consistent with the corresponding NumPy API. The
    previous behavior of broadcasting the output against non-scalar `initial` values
    was an unintentional implementation detail ([#14446](https://github.com/google/jax/issues/14446)).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.4.4 (Feb 16, 2023)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Breaking changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for NVIDIA Kepler series GPUs has been removed from the default `jaxlib`
    builds. If Kepler support is needed, it is still possible to build `jaxlib` from
    source with Kepler support (via the `--cuda_compute_capabilities=sm_35` option
    to `build.py`), however note that CUDA 12 has completely dropped support for Kepler
    GPUs.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.4.3 (Feb 8, 2023)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Breaking changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleted `jax.scipy.linalg.polar_unitary()`, which was a deprecated JAX extension
    to the scipy API. Use `jax.scipy.linalg.polar()` instead.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `jax.scipy.stats.rankdata()`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.4.3 (Feb 8, 2023)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`jax.Array` now has the non-blocking `is_ready()` method, which returns `True`
    if the array is ready (see also `jax.block_until_ready()`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.4.2 (Jan 24, 2023)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Breaking changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleted `jax.experimental.callback`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Operations with dimensions in presence of jax2tf shape polymorphism have been
    generalized to work in more scenarios, by converting the symbolic dimension to
    JAX arrays. Operations involving symbolic dimensions and `np.ndarray` now can
    raise errors when the result is used as a shape value ([#14106](https://github.com/google/jax/issues/14106)).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxpr objects now raise an error on attribute setting in order to avoid problematic
    mutations ([#14102](https://github.com/google/jax/issues/14102))
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax2tf.call_tf()` has a new parameter `has_side_effects` (default `True`)
    that can be used to declare whether an instance can be removed or replicated by
    JAX optimizations such as dead-code elimination ([#13980](https://github.com/google/jax/issues/13980)).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Added more support for floordiv and mod for jax2tf shape polymorphism. Previously,
    certain division operations resulted in errors in presence of symbolic dimensions
    ([#14108](https://github.com/google/jax/issues/14108)).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.4.2 (Jan 24, 2023)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set JAX_USE_PJRT_C_API_ON_TPU=1 to enable new Cloud TPU runtime, featuring automatic
    device memory defragmentation.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.4.1 (Dec 13, 2022)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for Python 3.7 has been dropped, in accordance with JAX’s Python and
    NumPy version support policy.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: We introduce `jax.Array` which is a unified array type that subsumes `DeviceArray`,
    `ShardedDeviceArray`, and `GlobalDeviceArray` types in JAX. The `jax.Array` type
    helps make parallelism a core feature of JAX, simplifies and unifies JAX internals,
    and allows us to unify `jit` and `pjit`. `jax.Array` has been enabled by default
    in JAX 0.4 and makes some breaking change to the `pjit` API. The [jax.Array migration
    guide](https://jax.readthedocs.io/en/latest/jax_array_migration.html) can help
    you migrate your codebase to `jax.Array`. You can also look at the [Distributed
    arrays and automatic parallelization](https://jax.readthedocs.io/en/latest/notebooks/Distributed_arrays_and_automatic_parallelization.html)
    tutorial to understand the new concepts.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PartitionSpec` and `Mesh` are now out of experimental. The new API endpoints
    are `jax.sharding.PartitionSpec` and `jax.sharding.Mesh`. `jax.experimental.maps.Mesh`
    and `jax.experimental.PartitionSpec` are deprecated and will be removed in 3 months.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`with_sharding_constraint`s new public endpoint is `jax.lax.with_sharding_constraint`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If using ABSL flags together with `jax.config`, the ABSL flag values are no
    longer read or written after the JAX configuration options are initially populated
    from the ABSL flags. This change improves performance of reading `jax.config`
    options, which are used pervasively in JAX.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The jax2tf.call_tf function now uses for TF lowering the first TF device of
    the same platform as used by the embedding JAX computation. Before, it was using
    the 0th device for the JAX-default backend.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A number of `jax.numpy` functions now have their arguments marked as positional-only,
    matching NumPy.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jnp.msort` is now deprecated, following the deprecation of `np.msort` in numpy
    1.24. It will be removed in a future release, in accordance with the API compatibility
    policy. It can be replaced with `jnp.sort(a, axis=0)`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.4.1 (Dec 13, 2022)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for Python 3.7 has been dropped, in accordance with JAX’s Python and
    NumPy version support policy.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The behavior of `XLA_PYTHON_CLIENT_MEM_FRACTION=.XX` has been changed to allocate
    XX% of the total GPU memory instead of the previous behavior of using currently
    available GPU memory to calculate preallocation. Please refer to [GPU memory allocation](https://jax.readthedocs.io/en/latest/gpu_memory_allocation.html)
    for more details.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The deprecated method `.block_host_until_ready()` has been removed. Use `.block_until_ready()`
    instead.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.4.0 (Dec 12, 2022)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The release was yanked.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.4.0 (Dec 12, 2022)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The release was yanked.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.3.25 (Nov 15, 2022)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.numpy.linalg.pinv()` now supports the `hermitian` option.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.scipy.linalg.hessenberg()` is now supported on CPU only. Requires jaxlib
    > 0.3.24.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: New functions `jax.lax.linalg.hessenberg()`, `jax.lax.linalg.tridiagonal()`,
    and `jax.lax.linalg.householder_product()` were added. Householder reduction is
    currently CPU-only and tridiagonal reductions are supported on CPU and GPU only.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The gradients of `svd` and `jax.numpy.linalg.pinv` are now computed more economically
    for non-square matrices.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Breaking Changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleted the `jax_experimental_name_stack` config option.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Convert a string `axis_names` arguments to the `jax.experimental.maps.Mesh`
    constructor into a singleton tuple instead of unpacking the string into a sequence
    of character axis names.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.3.25 (Nov 15, 2022)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added support for tridiagonal reductions on CPU and GPU.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Added support for upper Hessenberg reductions on CPU.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Bugs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a bug that meant that frames in tracebacks captured by JAX were incorrectly
    mapped to source lines under Python 3.10+
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.3.24 (Nov 4, 2022)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JAX should be faster to import. We now import scipy lazily, which accounted
    for a significant fraction of JAX’s import time.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting the env var `JAX_PERSISTENT_CACHE_MIN_COMPILE_TIME_SECS=$N` can be used
    to limit the number of cache entries written to the persistent cache. By default,
    computations that take 1 second or more to compile will be cached.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `jax.scipy.stats.mode()`.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The default device order used by `pmap` on TPU if no order is specified now
    matches `jax.devices()` for single-process jobs. Previously the two orderings
    differed, which could lead to unnecessary copies or out-of-memory errors. Requiring
    the orderings to agree simplifies matters.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Breaking Changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.numpy.gradient()` now behaves like most other functions in `jax.numpy`,
    and forbids passing lists or tuples in place of arrays ([#12958](https://github.com/google/jax/issues/12958))'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Functions in `jax.numpy.linalg` and `jax.numpy.fft` now uniformly require inputs
    to be array-like: i.e. lists and tuples cannot be used in place of arrays. Part
    of [#7737](https://github.com/google/jax/issues/7737).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Deprecations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.sharding.MeshPspecSharding` has been renamed to `jax.sharding.NamedSharding`.
    `jax.sharding.MeshPspecSharding` name will be removed in 3 months.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.3.24 (Nov 4, 2022)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Buffer donation now works on CPU. This may break code that marked buffers for
    donation on CPU but relied on donation not being implemented.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.3.23 (Oct 12, 2022)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update Colab TPU driver version for new jaxlib release.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.3.22 (Oct 11, 2022)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add `JAX_PLATFORMS=tpu,cpu` as default setting in TPU initialization, so JAX
    will raise an error if TPU cannot be initialized instead of falling back to CPU.
    Set `JAX_PLATFORMS=''` to override this behavior and automatically choose an available
    backend (the original default), or set `JAX_PLATFORMS=cpu` to always use CPU regardless
    of if the TPU is available.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Deprecations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Several test utilities deprecated in JAX v0.3.8 are now removed from `jax.test_util`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.3.22 (Oct 11, 2022)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: jax 0.3.21 (Sep 30, 2022)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.3.20...jax-v0.3.21).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The persistent compilation cache will now warn instead of raising an exception
    on error ([#12582](https://github.com/google/jax/issues/12582)), so program execution
    can continue if something goes wrong with the cache. Set `JAX_RAISE_PERSISTENT_CACHE_ERRORS=true`
    to revert this behavior.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.3.20 (Sep 28, 2022)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Bug fixes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds missing `.pyi` files that were missing from the previous release ([#12536](https://github.com/google/jax/issues/12536)).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixes an incompatibility between `jax` 0.3.19 and the libtpu version it pinned
    ([#12550](https://github.com/google/jax/issues/12550)). Requires jaxlib 0.3.20.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix incorrect `pip` url in `setup.py` comment ([#12528](https://github.com/google/jax/issues/12528)).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.3.20 (Sep 28, 2022)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jaxlib-v0.3.15...jaxlib-v0.3.20).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug fixes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixes support for limiting the visible CUDA devices via `jax_cuda_visible_devices`
    in distributed jobs. This functionality is needed for the JAX/SLURM integration
    on GPU ([#12533](https://github.com/google/jax/issues/12533)).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.3.19 (Sep 27, 2022)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.3.18...jax-v0.3.19).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixes required jaxlib version.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.3.18 (Sep 26, 2022)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.3.17...jax-v0.3.18).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ahead-of-time lowering and compilation functionality (tracked in [#7733](https://github.com/google/jax/issues/7733))
    is stable and public. See [the overview](https://jax.readthedocs.io/en/latest/aot.html)
    and the API docs for `jax.stages`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduced `jax.Array`, intended to be used for both `isinstance` checks and
    type annotations for array types in JAX. Notice that this included some subtle
    changes to how `isinstance` works for `jax.numpy.ndarray` for jax-internal objects,
    as `jax.numpy.ndarray` is now a simple alias of `jax.Array`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Breaking changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax._src` is no longer imported into the public `jax` namespace. This may
    break users that were using JAX internals.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.soft_pmap` has been deleted. Please use `pjit` or `xmap` instead. `jax.soft_pmap`
    is undocumented. If it were documented, a deprecation period would have been provided.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.3.17 (Aug 31, 2022)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.3.16...jax-v0.3.17).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bugs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix corner case issue in gradient of `lax.pow` with an exponent of zero ([#12041](https://github.com/google/jax/issues/12041))
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Breaking changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.checkpoint()`, also known as `jax.remat()`, no longer supports the `concrete`
    option, following the previous version’s deprecation; see [JEP 11830](https://jax.readthedocs.io/en/latest/jep/11830-new-remat-checkpoint.html).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `jax.pure_callback()` that enables calling back to pure Python functions
    from compiled functions (e.g. functions decorated with `jax.jit` or `jax.pmap`).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Deprecations:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The deprecated `DeviceArray.tile()` method has been removed. Use `jax.numpy.tile()`
    ([#11944](https://github.com/google/jax/issues/11944)).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DeviceArray.to_py()` has been deprecated. Use `np.asarray(x)` instead.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.3.16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.3.15...main).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Breaking changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for NumPy 1.19 has been dropped, per the [deprecation policy](https://jax.readthedocs.io/en/latest/deprecation.html).
    Please upgrade to NumPy 1.20 or newer.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `jax.debug` that includes utilities for runtime value debugging such at
    `jax.debug.print()` and `jax.debug.breakpoint()`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Added new documentation for runtime value debugging
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Deprecations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.mask()` `jax.shapecheck()` APIs have been removed. See [#11557](https://github.com/google/jax/issues/11557).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.experimental.loops` has been removed. See [#10278](https://github.com/google/jax/issues/10278)
    for an alternative API.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.tree_util.tree_multimap()` has been removed. It has been deprecated since
    JAX release 0.3.5, and `jax.tree_util.tree_map()` is a direct replacement.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Removed `jax.experimental.stax`; it has long been a deprecated alias of `jax.example_libraries.stax`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Removed `jax.experimental.optimizers`; it has long been a deprecated alias of
    `jax.example_libraries.optimizers`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.checkpoint()`, also known as `jax.remat()`, has a new implementation switched
    on by default, meaning the old implementation is deprecated; see [JEP 11830](https://jax.readthedocs.io/en/latest/jep/11830-new-remat-checkpoint.html).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.3.15 (July 22, 2022)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.3.14...jax-v0.3.15).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`JaxTestCase` and `JaxTestLoader` have been removed from `jax.test_util`. These
    classes have been deprecated since v0.3.1 ([#11248](https://github.com/google/jax/issues/11248)).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `jax.scipy.gaussian_kde` ([#11237](https://github.com/google/jax/issues/11237)).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Binary operations between JAX arrays and built-in collections (`dict`, `list`,
    `set`, `tuple`) now raise a `TypeError` in all cases. Previously some cases (particularly
    equality and inequality) would return boolean scalars inconsistent with similar
    operations in NumPy ([#11234](https://github.com/google/jax/issues/11234)).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Several `jax.tree_util` routines accessed as top-level JAX package imports
    are now deprecated, and will be removed in a future JAX release in accordance
    with the API compatibility policy:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.treedef_is_leaf()` is deprecated in favor of `jax.tree_util.treedef_is_leaf()`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.tree_flatten()` is deprecated in favor of `jax.tree_util.tree_flatten()`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.tree_leaves()` is deprecated in favor of `jax.tree_util.tree_leaves()`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.tree_structure()` is deprecated in favor of `jax.tree_util.tree_structure()`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.tree_transpose()` is deprecated in favor of `jax.tree_util.tree_transpose()`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.tree_unflatten()` is deprecated in favor of `jax.tree_util.tree_unflatten()`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `sym_pos` argument of `jax.scipy.linalg.solve()` is deprecated in favor
    of `assume_a='pos'`, following a similar deprecation in [`scipy.linalg.solve()`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.solve.html#scipy.linalg.solve
    "(in SciPy v1.13.1)").
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.3.15 (July 22, 2022)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jaxlib-v0.3.14...jaxlib-v0.3.15).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.3.14 (June 27, 2022)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.3.13...jax-v0.3.14).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Breaking changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.experimental.compilation_cache.initialize_cache()` does not support `max_cache_size_ 
    bytes` anymore and will not get that as an input.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`JAX_PLATFORMS` now raises an exception when platform initialization fails.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed compatibility problems with NumPy 1.23.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.numpy.linalg.slogdet()` now accepts an optional `method` argument that
    allows selection between an LU-decomposition based implementation and an implementation
    based on QR decomposition.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.numpy.linalg.qr()` now supports `mode="raw"`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pickle`, `copy.copy`, and `copy.deepcopy` now have more complete support when
    used on jax arrays ([#10659](https://github.com/google/jax/issues/10659)). In
    particular:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pickle` and `deepcopy` previously returned `np.ndarray` objects when used
    on a `DeviceArray`; now `DeviceArray` objects are returned. For `deepcopy`, the
    copied array is on the same device as the original. For `pickle` the deserialized
    array will be on the default device.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Within function transformations (i.e. traced code), `deepcopy` and `copy` previously
    were no-ops. Now they use the same mechanism as `DeviceArray.copy()`.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Calling `pickle` on a traced array now results in an explicit `ConcretizationTypeError`.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The implementation of singular value decomposition (SVD) and symmetric/Hermitian
    eigendecomposition should be significantly faster on TPU, especially for matrices
    above 1000x1000 or so. Both now use a spectral divide-and-conquer algorithm for
    eigendecomposition (QDWH-eig).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.numpy.ldexp()` no longer silently promotes all inputs to float64, instead
    it promotes to float32 for integer inputs of size int32 or smaller ([#10921](https://github.com/google/jax/issues/10921)).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a `create_perfetto_link` option to `jax.profiler.start_trace()` and `jax.profiler.start_trace()`.
    When used, the profiler will generate a link to the Perfetto UI to view the trace.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Changed the semantics of `jax.profiler.start_server(...)()` to store the keepalive
    globally, rather than requiring the user to keep a reference to it.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `jax.random.generalized_normal()`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `jax.random.ball()`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `jax.default_device()`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Added a `python -m jax.collect_profile` script to manually capture program traces
    as an alternative to the TensorBoard UI.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Added a `jax.named_scope` context manager that adds profiler metadata to Python
    programs (similar to `jax.named_call`).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In scatter-update operations (i.e. :attr:`jax.numpy.ndarray.at`), unsafe implicit
    dtype casts are deprecated, and now result in a `FutureWarning`. In a future release,
    this will become an error. An example of an unsafe implicit cast is `jnp.zeros(4,
    dtype=int).at[0].set(1.5)`, in which `1.5` previously was silently truncated to
    `1`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.experimental.compilation_cache.initialize_cache()` now supports gcs bucket
    path as input.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `jax.scipy.stats.gennorm()`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.numpy.roots()` is now better behaved when `strip_zeros=False` when coefficients
    have leading zeros ([#11215](https://github.com/google/jax/issues/11215)).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.3.14 (June 27, 2022)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jaxlib-v0.3.10...jaxlib-v0.3.14).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: x86-64 Mac wheels now require Mac OS 10.14 (Mojave) or newer. Mac OS 10.14 was
    released in 2018, so this should not be a very onerous requirement.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The bundled version of NCCL was updated to 2.12.12, fixing some deadlocks.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The Python flatbuffers package is no longer a dependency of jaxlib.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.3.13 (May 16, 2022)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.3.12...jax-v0.3.13).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.3.12 (May 15, 2022)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.3.11...jax-v0.3.12).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixes [#10717](https://github.com/google/jax/issues/10717).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.3.11 (May 15, 2022)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.3.10...jax-v0.3.11).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.lax.eigh()` now accepts an optional `sort_eigenvalues` argument that allows
    users to opt out of eigenvalue sorting on TPU.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Deprecations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Non-array arguments to functions in `jax.lax.linalg` are now marked keyword-only.
    As a backward-compatibility step passing keyword-only arguments positionally yields
    a warning, but in a future JAX release passing keyword-only arguments positionally
    will fail. However, most users should prefer to use `jax.numpy.linalg` instead.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.scipy.linalg.polar_unitary()`, which was a JAX extension to the scipy
    API, is deprecated. Use `jax.scipy.linalg.polar()` instead.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.3.10 (May 3, 2022)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.3.9...jax-v0.3.10).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.3.10 (May 3, 2022)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jaxlib-v0.3.7...jaxlib-v0.3.10).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[TF commit](https://github.com/tensorflow/tensorflow/commit/207d50d253e11c3a3430a700af478a1d524a779a)
    fixes an issue in the MHLO canonicalizer that caused constant folding to take
    a long time or crash for certain programs.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.3.9 (May 2, 2022)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.3.8...jax-v0.3.9).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added support for fully asynchronous checkpointing for GlobalDeviceArray.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.3.8 (April 29 2022)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.3.7...jax-v0.3.8).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.numpy.linalg.svd()` on TPUs uses a qdwh-svd solver.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.numpy.linalg.cond()` on TPUs now accepts complex input.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.numpy.linalg.pinv()` on TPUs now accepts complex input.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.numpy.linalg.matrix_rank()` on TPUs now accepts complex input.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.scipy.cluster.vq.vq()` has been added.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.experimental.maps.mesh` has been deleted. Please use `jax.experimental.maps.Mesh`.
    Please see https://jax.readthedocs.io/en/latest/_autosummary/jax.experimental.maps.Mesh.html#jax.experimental.maps.Mesh
    for more information.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.scipy.linalg.qr()` now returns a length-1 tuple rather than the raw array
    when `mode=''r''`, in order to match the behavior of `scipy.linalg.qr` ([#10452](https://github.com/google/jax/issues/10452))'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.numpy.take_along_axis()` now takes an optional `mode` parameter that specifies
    the behavior of out-of-bounds indexing. By default, invalid values (e.g., NaN)
    will be returned for out-of-bounds indices. In previous versions of JAX, invalid
    indices were clamped into range. The previous behavior can be restored by passing
    `mode="clip"`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.numpy.take()` now defaults to `mode="fill"`, which returns invalid values
    (e.g., NaN) for out-of-bounds indices.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Scatter operations, such as `x.at[...].set(...)`, now have `"drop"` semantics.
    This has no effect on the scatter operation itself, but it means that when differentiated
    the gradient of a scatter will yield zero cotangents for out-of-bounds indices.
    Previously out-of-bounds indices were clamped into range for the gradient, which
    was not mathematically correct.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.numpy.take_along_axis()` now raises a `TypeError` if its indices are not
    of an integer type, matching the behavior of [`numpy.take_along_axis()`](https://numpy.org/doc/stable/reference/generated/numpy.take_along_axis.html#numpy.take_along_axis
    "(in NumPy v2.0)"). Previously non-integer indices were silently cast to integers.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.numpy.ravel_multi_index()` now raises a `TypeError` if its `dims` argument
    is not of an integer type, matching the behavior of [`numpy.ravel_multi_index()`](https://numpy.org/doc/stable/reference/generated/numpy.ravel_multi_index.html#numpy.ravel_multi_index
    "(in NumPy v2.0)"). Previously non-integer `dims` was silently cast to integers.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.numpy.split()` now raises a `TypeError` if its `axis` argument is not
    of an integer type, matching the behavior of [`numpy.split()`](https://numpy.org/doc/stable/reference/generated/numpy.split.html#numpy.split
    "(in NumPy v2.0)"). Previously non-integer `axis` was silently cast to integers.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.numpy.indices()` now raises a `TypeError` if its dimensions are not of
    an integer type, matching the behavior of [`numpy.indices()`](https://numpy.org/doc/stable/reference/generated/numpy.indices.html#numpy.indices
    "(in NumPy v2.0)"). Previously non-integer dimensions were silently cast to integers.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.numpy.diag()` now raises a `TypeError` if its `k` argument is not of an
    integer type, matching the behavior of [`numpy.diag()`](https://numpy.org/doc/stable/reference/generated/numpy.diag.html#numpy.diag
    "(in NumPy v2.0)"). Previously non-integer `k` was silently cast to integers.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `jax.random.orthogonal()`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Deprecations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Many functions and objects available in `jax.test_util` are now deprecated and
    will raise a warning on import. This includes `cases_from_list`, `check_close`,
    `check_eq`, `device_under_test`, `format_shape_dtype_string`, `rand_uniform`,
    `skip_on_devices`, `with_config`, `xla_bridge`, and `_default_tolerance` ([#10389](https://github.com/google/jax/issues/10389)).
    These, along with previously-deprecated `JaxTestCase`, `JaxTestLoader`, and `BufferDonationTestCase`,
    will be removed in a future JAX release. Most of these utilities can be replaced
    by calls to standard python & numpy testing utilities found in e.g. [`unittest`](https://docs.python.org/3/library/unittest.html#module-unittest
    "(in Python v3.12)"), `absl.testing`, [`numpy.testing`](https://numpy.org/doc/stable/reference/routines.testing.html#module-numpy.testing
    "(in NumPy v2.0)"), etc. JAX-specific functionality such as device checking can
    be replaced through the use of public APIs such as `jax.devices()`. Many of the
    deprecated utilities will still exist in `jax._src.test_util`, but these are not
    public APIs and as such may be changed or removed without notice in future releases.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.3.7 (April 15, 2022)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.3.6...jax-v0.3.7).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a performance problem if the indices passed to `jax.numpy.take_along_axis()`
    were broadcasted ([#10281](https://github.com/google/jax/issues/10281)).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.scipy.special.expit()` and `jax.scipy.special.logit()` now require their
    arguments to be scalars or JAX arrays. They also now promote integer arguments
    to floating point.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `DeviceArray.tile()` method is deprecated, because numpy arrays do not have
    a `tile()` method. As a replacement for this, use `jax.numpy.tile()` ([#10266](https://github.com/google/jax/issues/10266)).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.3.7 (April 15, 2022)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Changes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Linux wheels are now built conforming to the `manylinux2014` standard, instead
    of `manylinux2010`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.3.6 (April 12, 2022)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.3.5...jax-v0.3.6).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upgraded libtpu wheel to a version that fixes a hang when initializing a TPU
    pod. Fixes [#10218](https://github.com/google/jax/issues/10218).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Deprecations:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.experimental.loops` is being deprecated. See [#10278](https://github.com/google/jax/issues/10278)
    for an alternative API.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.3.5 (April 7, 2022)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.3.4...jax-v0.3.5).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added `jax.random.loggamma()` & improved behavior of `jax.random.beta()` and
    `jax.random.dirichlet()` for small parameter values ([#9906](https://github.com/google/jax/issues/9906)).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: the private `lax_numpy` submodule is no longer exposed in the `jax.numpy` namespace
    ([#10029](https://github.com/google/jax/issues/10029)).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: added array creation routines `jax.numpy.frombuffer()`, `jax.numpy.fromfunction()`,
    and `jax.numpy.fromstring()` ([#10049](https://github.com/google/jax/issues/10049)).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DeviceArray.copy()` now returns a `DeviceArray` rather than a `np.ndarray`
    ([#10069](https://github.com/google/jax/issues/10069))'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: added `jax.scipy.linalg.rsf2csf()`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.experimental.sharded_jit` has been deprecated and will be removed soon.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Deprecations:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.nn.normalize()` is being deprecated. Use `jax.nn.standardize()` instead
    ([#9899](https://github.com/google/jax/issues/9899)).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.tree_util.tree_multimap()` is deprecated. Use `jax.tree_util.tree_map()`
    instead ([#5746](https://github.com/google/jax/issues/5746)).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.experimental.sharded_jit` is deprecated. Use `pjit` instead.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.3.5 (April 7, 2022)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Bug fixes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a bug where double-precision complex-to-real IRFFTs would mutate their
    input buffers on GPU ([#9946](https://github.com/google/jax/issues/9946)).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed incorrect constant-folding of complex scatters ([#10159](https://github.com/google/jax/issues/10159))
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.3.4 (March 18, 2022)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.3.3...jax-v0.3.4).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.3.3 (March 17, 2022)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.3.2...jax-v0.3.3).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.3.2 (March 16, 2022)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.3.1...jax-v0.3.2).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The functions `jax.ops.index_update`, `jax.ops.index_add`, which were deprecated
    in 0.2.22, have been removed. Please use [the `.at` property on JAX arrays](https://jax.readthedocs.io/en/latest/_autosummary/jax.numpy.ndarray.at.html)
    instead, e.g., `x.at[idx].set(y)`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Moved `jax.experimental.ann.approx_*_k` into `jax.lax`. These functions are
    optimized alternatives to `jax.lax.top_k`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.numpy.broadcast_arrays()` and `jax.numpy.broadcast_to()` now require scalar
    or array-like inputs, and will fail if they are passed lists (part of [#7737](https://github.com/google/jax/issues/7737)).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The standard jax[tpu] install can now be used with Cloud TPU v4 VMs.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pjit` now works on CPU (in addition to previous TPU and GPU support).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.3.2 (March 16, 2022)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`XlaComputation.as_hlo_text()` now supports printing large constants by passing
    boolean flag `print_large_constants=True`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Deprecations:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `.block_host_until_ready()` method on JAX arrays has been deprecated. Use
    `.block_until_ready()` instead.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.3.1 (Feb 18, 2022)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.3.0...jax-v0.3.1).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.test_util.JaxTestCase` and `jax.test_util.JaxTestLoader` are now deprecated.
    The suggested replacement is to use `parametrized.TestCase` directly. For tests
    that rely on custom asserts such as `JaxTestCase.assertAllClose()`, the suggested
    replacement is to use standard numpy testing utilities such as [`numpy.testing.assert_allclose()`](https://numpy.org/doc/stable/reference/generated/numpy.testing.assert_allclose.html#numpy.testing.assert_allclose
    "(in NumPy v2.0)"), which work directly with JAX arrays ([#9620](https://github.com/google/jax/issues/9620)).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.test_util.JaxTestCase` now sets `jax_numpy_rank_promotion=''raise''` by
    default ([#9562](https://github.com/google/jax/issues/9562)). To recover the previous
    behavior, use the new `jax.test_util.with_config` decorator:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Added `jax.scipy.linalg.schur()`, `jax.scipy.linalg.sqrtm()`, `jax.scipy.signal.csd()`,
    `jax.scipy.signal.stft()`, `jax.scipy.signal.welch()`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.3.0 (Feb 10, 2022)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.2.28...jax-v0.3.0).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jax version has been bumped to 0.3.0\. Please see the [design doc](https://jax.readthedocs.io/en/latest/design_notes/jax_versioning.html)
    for the explanation.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.3.0 (Feb 10, 2022)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bazel 5.0.0 is now required to build jaxlib.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib version has been bumped to 0.3.0\. Please see the [design doc](https://jax.readthedocs.io/en/latest/design_notes/jax_versioning.html)
    for the explanation.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.2.28 (Feb 1, 2022)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.2.27...jax-v0.2.28).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.jit(f).lower(...).compiler_ir()` now defaults to the MHLO dialect if no
    `dialect=` is passed.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `jax.jit(f).lower(...).compiler_ir(dialect='mhlo')` now returns an MLIR
    `ir.Module` object instead of its string representation.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.1.76 (Jan 27, 2022)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: New features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Includes precompiled SASS for NVidia compute capability 8.0 GPUS (e.g. A100).
    Removes precompiled SASS for compute capability 6.1 so as not to increase the
    number of compute capabilities: GPUs with compute capability 6.1 can use the 6.0
    SASS.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: With jaxlib 0.1.76, JAX uses the MHLO MLIR dialect as its primary target compiler
    IR by default.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Breaking changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for NumPy 1.18 has been dropped, per the [deprecation policy](https://jax.readthedocs.io/en/latest/deprecation.html).
    Please upgrade to a supported NumPy version.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug fixes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a bug where apparently identical pytreedef objects constructed by different
    routes do not compare as equal (#9066).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The JAX jit cache requires two static arguments to have identical types for
    a cache hit (#9311).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.2.27 (Jan 18 2022)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.2.26...jax-v0.2.27).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Breaking changes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for NumPy 1.18 has been dropped, per the [deprecation policy](https://jax.readthedocs.io/en/latest/deprecation.html).
    Please upgrade to a supported NumPy version.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The host_callback primitives have been simplified to drop the special autodiff
    handling for hcb.id_tap and id_print. From now on, only the primals are tapped.
    The old behavior can be obtained (for a limited time) by setting the `JAX_HOST_CALLBACK_AD_TRANSFORMS`
    environment variable, or the `--jax_host_callback_ad_transforms` flag. Additionally,
    added documentation for how to implement the old behavior using JAX custom AD
    APIs ([#8678](https://github.com/google/jax/issues/8678)).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Sorting now matches the behavior of NumPy for `0.0` and `NaN` regardless of
    the bit representation. In particular, `0.0` and `-0.0` are now treated as equivalent,
    where previously `-0.0` was treated as less than `0.0`. Additionally all `NaN`
    representations are now treated as equivalent and sorted to the end of the array.
    Previously negative `NaN` values were sorted to the front of the array, and `NaN`
    values with different internal bit representations were not treated as equivalent,
    and were sorted according to those bit patterns ([#9178](https://github.com/google/jax/issues/9178)).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.numpy.unique()` now treats `NaN` values in the same way as `np.unique`
    in NumPy versions 1.21 and newer: at most one `NaN` value will appear in the uniquified
    output ([#9184](https://github.com/google/jax/issues/9184)).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bug fixes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: host_callback now supports ad_checkpoint.checkpoint ([#8907](https://github.com/google/jax/issues/8907)).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'New features:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: add `jax.block_until_ready` ({jax-issue}`#8941)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Added a new debugging flag/environment variable `JAX_DUMP_IR_TO=/path`. If set,
    JAX dumps the MHLO/HLO IR it generates for each computation to a file under the
    given path.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `jax.ensure_compile_time_eval` to the public api ([#7987](https://github.com/google/jax/issues/7987)).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax2tf now supports a flag jax2tf_associative_scan_reductions to change the
    lowering for associative reductions, e.g., jnp.cumsum, to behave like JAX on CPU
    and GPU (to use an associative scan). See the jax2tf README for more details ([#9189](https://github.com/google/jax/issues/9189)).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.1.75 (Dec 8, 2021)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'New features:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for python 3.10.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.2.26 (Dec 8, 2021)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.2.25...jax-v0.2.26).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bug fixes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Out-of-bounds indices to `jax.ops.segment_sum` will now be handled with `FILL_OR_DROP`
    semantics, as documented. This primarily affects the reverse-mode derivative,
    where gradients corresponding to out-of-bounds indices will now be returned as
    0\. (#8634).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax2tf will force the converted code to use XLA for the code fragments under
    jax.jit, e.g., most jax.numpy functions ([#7839](https://github.com/google/jax/issues/7839)).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.1.74 (Nov 17, 2021)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Enabled peer-to-peer copies between GPUs. Previously, GPU copies were bounced
    via the host, which is usually slower.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added experimental MLIR Python bindings for use by JAX.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.2.25 (Nov 10, 2021)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.2.24...jax-v0.2.25).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'New features:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (Experimental) `jax.distributed.initialize` exposes multi-host GPU backend.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.random.permutation` supports new `independent` keyword argument ([#8430](https://github.com/google/jax/issues/8430))'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Breaking changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Moved `jax.experimental.stax` to `jax.example_libraries.stax`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Moved `jax.experimental.optimizers` to `jax.example_libraries.optimizers`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'New features:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `jax.lax.linalg.qdwh`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.2.24 (Oct 19, 2021)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.2.22...jax-v0.2.24).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'New features:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.random.choice` and `jax.random.permutation` now support multidimensional
    arrays and an optional `axis` argument ([#8158](https://github.com/google/jax/issues/8158))'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Breaking changes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.numpy.take` and `jax.numpy.take_along_axis` now require array-like inputs
    (see [#7737](https://github.com/google/jax/issues/7737))'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.1.73 (Oct 18, 2021)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Multiple cuDNN versions are now supported for jaxlib GPU `cuda11` wheels.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: cuDNN 8.2 or newer. We recommend using the cuDNN 8.2 wheel if your cuDNN installation
    is new enough, since it supports additional functionality.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: cuDNN 8.0.5 or newer.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Breaking changes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The install commands for GPU jaxlib are as follows:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: jax 0.2.22 (Oct 12, 2021)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.2.21...jax-v0.2.22).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Breaking Changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Static arguments to `jax.pmap` must now be hashable.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Unhashable static arguments have long been disallowed on `jax.jit`, but they
    were still permitted on `jax.pmap`; `jax.pmap` compared unhashable static arguments
    using object identity.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'This behavior is a footgun, since comparing arguments using object identity
    leads to recompilation each time the object identity changes. Instead, we now
    ban unhashable arguments: if a user of `jax.pmap` wants to compare static arguments
    by object identity, they can define `__hash__` and `__eq__` methods on their objects
    that do that, or wrap their objects in an object that has those operations with
    object identity semantics. Another option is to use `functools.partial` to encapsulate
    the unhashable static arguments into the function object.'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`jax.util.partial` was an accidental export that has now been removed. Use
    `functools.partial` from the Python standard library instead.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Deprecations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The functions `jax.ops.index_update`, `jax.ops.index_add` etc. are deprecated
    and will be removed in a future JAX release. Please use [the `.at` property on
    JAX arrays](https://jax.readthedocs.io/en/latest/_autosummary/jax.numpy.ndarray.at.html)
    instead, e.g., `x.at[idx].set(y)`. For now, these functions produce a `DeprecationWarning`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'New features:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An optimized C++ code-path improving the dispatch time for `pmap` is now the
    default when using jaxlib 0.1.72 or newer. The feature can be disabled using the
    `--experimental_cpp_pmap` flag (or `JAX_CPP_PMAP` environment variable).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.numpy.unique` now supports an optional `fill_value` argument ([#8121](https://github.com/google/jax/issues/8121))'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.1.72 (Oct 12, 2021)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Breaking changes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for CUDA 10.2 and CUDA 10.1 has been dropped. Jaxlib now supports CUDA
    11.1+.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bug fixes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixes https://github.com/google/jax/issues/7461, which caused wrong outputs
    on all platforms due to incorrect buffer aliasing inside the XLA compiler.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.2.21 (Sept 23, 2021)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.2.20...jax-v0.2.21).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Breaking Changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.api` has been removed. Functions that were available as `jax.api.*` were
    aliases for functions in `jax.*`; please use the functions in `jax.*` instead.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.partial`, and `jax.lax.partial` were accidental exports that have now
    been removed. Use `functools.partial` from the Python standard library instead.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Boolean scalar indices now raise a `TypeError`; previously this silently returned
    wrong results ([#7925](https://github.com/google/jax/issues/7925)).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Many more `jax.numpy` functions now require array-like inputs, and will error
    if passed a list ([#7747](https://github.com/google/jax/issues/7747) [#7802](https://github.com/google/jax/issues/7802)
    [#7907](https://github.com/google/jax/issues/7907)). See [#7737](https://github.com/google/jax/issues/7737)
    for a discussion of the rationale behind this change.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: When inside a transformation such as `jax.jit`, `jax.numpy.array` always stages
    the array it produces into the traced computation. Previously `jax.numpy.array`
    would sometimes produce a on-device array, even under a `jax.jit` decorator. This
    change may break code that used JAX arrays to perform shape or index computations
    that must be known statically; the workaround is to perform such computations
    using classic NumPy arrays instead.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jnp.ndarray` is now a true base-class for JAX arrays. In particular, this
    means that for a standard numpy array `x`, `isinstance(x, jnp.ndarray)` will now
    return `False` ([#7927](https://github.com/google/jax/issues/7927)).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'New features:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `jax.numpy.insert()` implementation ([#7936](https://github.com/google/jax/issues/7936)).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.2.20 (Sept 2, 2021)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.2.19...jax-v0.2.20).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Breaking Changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jnp.poly*` functions now require array-like inputs ([#7732](https://github.com/google/jax/issues/7732))'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jnp.unique` and other set-like operations now require array-like inputs ([#7662](https://github.com/google/jax/issues/7662))'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.1.71 (Sep 1, 2021)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Breaking changes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for CUDA 11.0 and CUDA 10.1 has been dropped. Jaxlib now supports CUDA
    10.2 and CUDA 11.1+.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.2.19 (Aug 12, 2021)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.2.18...jax-v0.2.19).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Breaking changes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for NumPy 1.17 has been dropped, per the [deprecation policy](https://jax.readthedocs.io/en/latest/deprecation.html).
    Please upgrade to a supported NumPy version.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `jit` decorator has been added around the implementation of a number of
    operators on JAX arrays. This speeds up dispatch times for common operators such
    as `+`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: This change should largely be transparent to most users. However, there is one
    known behavioral change, which is that large integer constants may now produce
    an error when passed directly to a JAX operator (e.g., `x + 2**40`). The workaround
    is to cast the constant to an explicit type (e.g., `np.float64(2**40)`).
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'New features:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved the support for shape polymorphism in jax2tf for operations that need
    to use a dimension size in array computation, e.g., `jnp.mean`. ([#7317](https://github.com/google/jax/issues/7317))
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bug fixes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some leaked trace errors from the previous release ([#7613](https://github.com/google/jax/issues/7613))
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.1.70 (Aug 9, 2021)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Breaking changes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for Python 3.6 has been dropped, per the [deprecation policy](https://jax.readthedocs.io/en/latest/deprecation.html).
    Please upgrade to a supported Python version.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for NumPy 1.17 has been dropped, per the [deprecation policy](https://jax.readthedocs.io/en/latest/deprecation.html).
    Please upgrade to a supported NumPy version.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The host_callback mechanism now uses one thread per local device for making
    the calls to the Python callbacks. Previously there was a single thread for all
    devices. This means that the callbacks may now be called interleaved. The callbacks
    corresponding to one device will still be called in sequence.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.2.18 (July 21 2021)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.2.17...jax-v0.2.18).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Breaking changes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for Python 3.6 has been dropped, per the [deprecation policy](https://jax.readthedocs.io/en/latest/deprecation.html).
    Please upgrade to a supported Python version.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The minimum jaxlib version is now 0.1.69.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `backend` argument to `jax.dlpack.from_dlpack()` has been removed.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'New features:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added a polar decomposition (`jax.scipy.linalg.polar()`).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bug fixes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tightened the checks for lax.argmin and lax.argmax to ensure they are not used
    with an invalid `axis` value, or with an empty reduction dimension. ([#7196](https://github.com/google/jax/issues/7196))
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.1.69 (July 9 2021)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Fix bugs in TFRT CPU backend that results in incorrect results.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.2.17 (July 9 2021)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.2.16...jax-v0.2.17).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bug fixes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Default to the older “stream_executor” CPU runtime for jaxlib <= 0.1.68 to
    work around #7229, which caused wrong outputs on CPU due to a concurrency problem.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'New features:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New SciPy function `jax.scipy.special.sph_harm()`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Reverse-mode autodiff functions (`jax.grad()`, `jax.value_and_grad()`, `jax.vjp()`,
    and `jax.linear_transpose()`) support a parameter that indicates which named axes
    should be summed over in the backward pass if they were broadcasted over in the
    forward pass. This enables use of these APIs in a non-per-example way inside maps
    (initially only `jax.experimental.maps.xmap()`) ([#6950](https://github.com/google/jax/issues/6950)).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.2.16 (June 23 2021)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.2.15...jax-v0.2.16).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.2.15 (June 23 2021)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.2.14...jax-v0.2.15).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'New features:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[#7042](https://github.com/google/jax/pull/7042) Turned on TFRT CPU backend
    with significant dispatch performance improvements on CPU.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `jax2tf.convert()` supports inequalities and min/max for booleans ([#6956](https://github.com/google/jax/issues/6956)).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: New SciPy function `jax.scipy.special.lpmn_values()`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Breaking changes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for NumPy 1.16 has been dropped, per the [deprecation policy](https://jax.readthedocs.io/en/latest/deprecation.html).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bug fixes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Fixed bug that prevented round-tripping from JAX to TF and back: `jax2tf.call_tf(jax2tf.convert)`
    ([#6947](https://github.com/google/jax/issues/6947)).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.1.68 (June 23 2021)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Bug fixes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug in TFRT CPU backend that gets nans when transfer TPU buffer to CPU.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.2.14 (June 10 2021)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.2.13...jax-v0.2.14).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'New features:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `jax2tf.convert()` now has support for `pjit` and `sharded_jit`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A new configuration option JAX_TRACEBACK_FILTERING controls how JAX filters
    tracebacks.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A new traceback filtering mode using `__tracebackhide__` is now enabled by default
    in sufficiently recent versions of IPython.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `jax2tf.convert()` supports shape polymorphism even when the unknown dimensions
    are used in arithmetic operations, e.g., `jnp.reshape(-1)` ([#6827](https://github.com/google/jax/issues/6827)).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `jax2tf.convert()` generates custom attributes with location information
    in TF ops. The code that XLA generates after jax2tf has the same location information
    as JAX/XLA.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: New SciPy function `jax.scipy.special.lpmn()`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bug fixes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `jax2tf.convert()` now ensures that it uses the same typing rules for Python
    scalars and for choosing 32-bit vs. 64-bit computations as JAX ([#6883](https://github.com/google/jax/issues/6883)).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `jax2tf.convert()` now scopes the `enable_xla` conversion parameter properly
    to apply only during the just-in-time conversion ([#6720](https://github.com/google/jax/issues/6720)).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `jax2tf.convert()` now converts `lax.dot_general` using the `XlaDot` TensorFlow
    op, for better fidelity w.r.t. JAX numerical precision ([#6717](https://github.com/google/jax/issues/6717)).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `jax2tf.convert()` now has support for inequality comparisons and min/max
    for complex numbers ([#6892](https://github.com/google/jax/issues/6892)).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.1.67 (May 17 2021)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: jaxlib 0.1.66 (May 11 2021)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'New features:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CUDA 11.1 wheels are now supported on all CUDA 11 versions 11.1 or higher.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: NVidia now promises compatibility between CUDA minor releases starting with
    CUDA 11.1\. This means that JAX can release a single CUDA 11.1 wheel that is compatible
    with CUDA 11.2 and 11.3.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: There is no longer a separate jaxlib release for CUDA 11.2 (or higher); use
    the CUDA 11.1 wheel for those versions (cuda111).
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Jaxlib now bundles `libdevice.10.bc` in CUDA wheels. There should be no need
    to point JAX to a CUDA installation to find this file.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Added automatic support for static keyword arguments to the `jit()` implementation.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Added support for pretransformation exception traces.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Initial support for pruning unused arguments from `jit()` -transformed computations.
    Pruning is still a work in progress.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved the string representation of `PyTreeDef` objects.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Added support for XLA’s variadic ReduceWindow.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bug fixes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a bug in the remote cloud TPU support when large numbers of arguments
    are passed to a computation.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix a bug that meant that JAX garbage collection was not triggered by `jit()`
    transformed functions.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.2.13 (May 3 2021)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.2.12...jax-v0.2.13).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'New features:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When combined with jaxlib 0.1.66, `jax.jit()` now supports static keyword arguments.
    A new `static_argnames` option has been added to specify keyword arguments as
    static.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.nonzero()` has a new optional `size` argument that allows it to be used
    within `jit` ([#6501](https://github.com/google/jax/issues/6501))'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.numpy.unique()` now supports the `axis` argument ([#6532](https://github.com/google/jax/issues/6532)).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.experimental.host_callback.call()` now supports `pjit.pjit` ([#6569](https://github.com/google/jax/issues/6569)).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `jax.scipy.linalg.eigh_tridiagonal()` that computes the eigenvalues of
    a tridiagonal matrix. Only eigenvalues are supported at present.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The order of the filtered and unfiltered stack traces in exceptions has been
    changed. The traceback attached to an exception thrown from JAX-transformed code
    is now filtered, with an `UnfilteredStackTrace` exception containing the original
    trace as the `__cause__` of the filtered exception. Filtered stack traces now
    also work with Python 3.6.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If an exception is thrown by code that has been transformed by reverse-mode
    automatic differentiation, JAX now attempts to attach as a `__cause__` of the
    exception a `JaxStackTraceBeforeTransformation` object that contains the stack
    trace that created the original operation in the forward pass. Requires jaxlib
    0.1.66.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Breaking changes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The following function names have changed. There are still aliases, so this
    should not break existing code, but the aliases will eventually be removed so
    please change your code.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`host_id` –> `process_index()`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`host_count` –> `process_count()`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`host_ids` –> `range(jax.process_count())`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Similarly, the argument to `local_devices()` has been renamed from `host_id`
    to `process_index`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Arguments to `jax.jit()` other than the function are now marked as keyword-only.
    This change is to prevent accidental breakage when arguments are added to `jit`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bug fixes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `jax2tf.convert()` now works in presence of gradients for functions with
    integer inputs ([#6360](https://github.com/google/jax/issues/6360)).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed assertion failure in `jax2tf.call_tf()` when used with captured `tf.Variable`
    ([#6572](https://github.com/google/jax/issues/6572)).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.1.65 (April 7 2021)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: jax 0.2.12 (April 1 2021)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.2.11...v0.2.12).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'New profiling APIs: `jax.profiler.start_trace()`, `jax.profiler.stop_trace()`,
    and `jax.profiler.trace()`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.lax.reduce()` is now differentiable.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Breaking changes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The minimum jaxlib version is now 0.1.64.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Some profiler APIs names have been changed. There are still aliases, so this
    should not break existing code, but the aliases will eventually be removed so
    please change your code.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TraceContext` –> `TraceAnnotation()`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`StepTraceContext` –> `StepTraceAnnotation()`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`trace_function` –> `annotate_function()`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Omnistaging can no longer be disabled. See [omnistaging](https://github.com/google/jax/blob/main/docs/design_notes/omnistaging.md)
    for more information.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Python integers larger than the maximum `int64` value will now lead to an overflow
    in all cases, rather than being silently converted to `uint64` in some cases ([#6047](https://github.com/google/jax/issues/6047)).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Outside X64 mode, Python integers outside the range representable by `int32`
    will now lead to an `OverflowError` rather than having their value silently truncated.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bug fixes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`host_callback` now supports empty arrays in arguments and results ([#6262](https://github.com/google/jax/issues/6262)).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.random.randint()` clips rather than wraps of out-of-bounds limits, and
    can now generate integers in the full range of the specified dtype ([#5868](https://github.com/google/jax/issues/5868))'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.2.11 (March 23 2021)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.2.10...jax-v0.2.11).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'New features:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[#6112](https://github.com/google/jax/pull/6112) added context managers: `jax.enable_checks`,
    `jax.check_tracer_leaks`, `jax.debug_nans`, `jax.debug_infs`, `jax.log_compiles`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[#6085](https://github.com/google/jax/pull/6085) added `jnp.delete`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bug fixes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[#6136](https://github.com/google/jax/pull/6136) generalized `jax.flatten_util.ravel_pytree`
    to handle integer dtypes.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[#6129](https://github.com/google/jax/issues/6129) fixed a bug with handling
    some constants like `enum.IntEnums`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[#6145](https://github.com/google/jax/pull/6145) fixed batching issues with
    incomplete beta functions'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[#6014](https://github.com/google/jax/pull/6014) fixed H2D transfers during
    tracing'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[#6165](https://github.com/google/jax/pull/6165) avoids OverflowErrors when
    converting some large Python integers to floats'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Breaking changes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The minimum jaxlib version is now 0.1.62.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.1.64 (March 18 2021)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: jaxlib 0.1.63 (March 17 2021)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: jax 0.2.10 (March 5 2021)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.2.9...jax-v0.2.10).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'New features:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.scipy.stats.chi2()` is now available as a distribution with logpdf and
    pdf methods.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.scipy.stats.betabinom()` is now available as a distribution with logpmf
    and pmf methods.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `jax.experimental.jax2tf.call_tf()` to call TensorFlow functions from
    JAX ([#5627](https://github.com/google/jax/issues/5627)) and [README](https://github.com/google/jax/blob/main/jax/experimental/jax2tf/README.md#calling-tensorflow-functions-from-jax)).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Extended the batching rule for `lax.pad` to support batching of the padding
    values.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bug fixes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.numpy.take()` properly handles negative indices ([#5768](https://github.com/google/jax/issues/5768))'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Breaking changes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JAX’s promotion rules were adjusted to make promotion more consistent and invariant
    to JIT. In particular, binary operations can now result in weakly-typed values
    when appropriate. The main user-visible effect of the change is that some operations
    result in outputs of different precision than before; for example the expression
    `jnp.bfloat16(1) + 0.1 * jnp.arange(10)` previously returned a `float64` array,
    and now returns a `bfloat16` array. JAX’s type promotion behavior is described
    at Type promotion semantics.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.numpy.linspace()` now computes the floor of integer values, i.e., rounding
    towards -inf rather than 0\. This change was made to match NumPy 1.20.0.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.numpy.i0()` no longer accepts complex numbers. Previously the function
    computed the absolute value of complex arguments. This change was made to match
    the semantics of NumPy 1.20.0.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Several `jax.numpy` functions no longer accept tuples or lists in place of
    array arguments: `jax.numpy.pad()`, :func`jax.numpy.ravel`, `jax.numpy.repeat()`,
    `jax.numpy.reshape()`. In general, `jax.numpy` functions should be used with scalars
    or array arguments.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.1.62 (March 9 2021)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'New features:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib wheels are now built to require AVX instructions on x86-64 machines by
    default. If you want to use JAX on a machine that doesn’t support AVX, you can
    build a jaxlib from source using the `--target_cpu_features` flag to `build.py`.
    `--target_cpu_features` also replaces `--enable_march_native`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.1.61 (February 12 2021)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: jaxlib 0.1.60 (February 3 2021)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Bug fixes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a memory leak when converting CPU DeviceArrays to NumPy arrays. The memory
    leak was present in jaxlib releases 0.1.58 and 0.1.59.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bool`, `int8`, and `uint8` are now considered safe to cast to `bfloat16` NumPy
    extension type.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.2.9 (January 26 2021)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.2.8...jax-v0.2.9).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'New features:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extend the `jax.experimental.loops` module with support for pytrees. Improved
    error checking and error messages.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Add `jax.experimental.enable_x64()` and `jax.experimental.disable_x64()`. These
    are context managers which allow X64 mode to be temporarily enabled/disabled within
    a session.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Breaking changes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.ops.segment_sum()` now drops segment IDs that are out of range rather
    than wrapping them into the segment ID space. This was done for performance reasons.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.1.59 (January 15 2021)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: jax 0.2.8 (January 12 2021)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.2.7...jax-v0.2.8).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'New features:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add `jax.closure_convert()` for use with higher-order custom derivative functions.
    ([#5244](https://github.com/google/jax/issues/5244))
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Add `jax.experimental.host_callback.call()` to call a custom Python function
    on the host and return a result to the device computation. ([#5243](https://github.com/google/jax/issues/5243))
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bug fixes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.numpy.arccosh` now returns the same branch as `numpy.arccosh` for complex
    inputs ([#5156](https://github.com/google/jax/issues/5156))'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`host_callback.id_tap` now works for `jax.pmap` also. There is an optional
    parameter for `id_tap` and `id_print` to request that the device from which the
    value is tapped be passed as a keyword argument to the tap function ([#5182](https://github.com/google/jax/issues/5182)).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Breaking changes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.numpy.pad` now takes keyword arguments. Positional argument `constant_values`
    has been removed. In addition, passing unsupported keyword arguments raises an
    error.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changes for `jax.experimental.host_callback.id_tap()` ([#5243](https://github.com/google/jax/issues/5243)):'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Removed support for `kwargs` for `jax.experimental.host_callback.id_tap()`.
    (This support has been deprecated for a few months.)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Changed the printing of tuples for `jax.experimental.host_callback.id_print()`
    to use ‘(’ instead of ‘‘.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Changed the [`jax.experimental.host_callback.id_print()` in presence of JVP
    to print a pair of primal and tangent. Previously, there were two separate print
    operations for the primals and the tangent.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`host_callback.outfeed_receiver` has been removed (it is not necessary, and
    was deprecated a few months ago).'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'New features:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New flag for debugging `inf`, analogous to that for `NaN` ([#5224](https://github.com/google/jax/issues/5224)).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.2.7 (Dec 4 2020)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.2.6...jax-v0.2.7).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'New features:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add `jax.device_put_replicated`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Add multi-host support to `jax.experimental.sharded_jit`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Add support for differentiating eigenvalues computed by `jax.numpy.linalg.eig`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Add support for building on Windows platforms
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Add support for general in_axes and out_axes in `jax.pmap`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Add complex support for `jax.numpy.linalg.slogdet`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bug fixes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix higher-than-second order derivatives of `jax.numpy.sinc` at zero
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix some hard-to-hit bugs around symbolic zeros in transpose rules
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Breaking changes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.experimental.optix` has been deleted, in favor of the standalone `optax`
    Python package.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: indexing of JAX arrays with non-tuple sequences now raises a `TypeError`. This
    type of indexing has been deprecated in Numpy since v1.16, and in JAX since v0.2.4.
    See [#4564](https://github.com/google/jax/issues/4564).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.2.6 (Nov 18 2020)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.2.5...jax-v0.2.6).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'New Features:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add support for shape-polymorphic tracing for the jax.experimental.jax2tf converter.
    See [README.md](https://github.com/google/jax/blob/main/jax/experimental/jax2tf/README.md).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Breaking change cleanup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Raise an error on non-hashable static arguments for jax.jit and xla_computation.
    See [cb48f42](https://github.com/google/jax/commit/cb48f42).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Improve consistency of type promotion behavior ([#4744](https://github.com/google/jax/issues/4744)):'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a complex Python scalar to a JAX floating point number respects the precision
    of the JAX float. For example, `jnp.float32(1) + 1j` now returns `complex64`,
    where previously it returned `complex128`.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Results of type promotion with 3 or more terms involving uint64, a signed int,
    and a third type are now independent of the order of arguments. For example: `jnp.result_type(jnp.uint64,
    jnp.int64, jnp.float16)` and `jnp.result_type(jnp.float16, jnp.uint64, jnp.int64)`
    both return `float16`, where previously the first returned `float64` and the second
    returned `float16`.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The contents of the (undocumented) `jax.lax_linalg` linear algebra module are
    now exposed publicly as `jax.lax.linalg`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.random.PRNGKey` now produces the same results in and out of JIT compilation
    ([#4877](https://github.com/google/jax/issues/4877)). This required changing the
    result for a given seed in a few particular cases:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: With `jax_enable_x64=False`, negative seeds passed as Python integers now return
    a different result outside JIT mode. For example, `jax.random.PRNGKey(-1)` previously
    returned `[4294967295, 4294967295]`, and now returns `[0, 4294967295]`. This matches
    the behavior in JIT.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Seeds outside the range representable by `int64` outside JIT now result in an
    `OverflowError` rather than a `TypeError`. This matches the behavior in JIT.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To recover the keys returned previously for negative integers with `jax_enable_x64=False`
    outside JIT, you can use:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: DeviceArray now raises `RuntimeError` instead of `ValueError` when trying to
    access its value while it has been deleted.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.1.58 (January 12ish 2021)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Fixed a bug that meant JAX sometimes return platform-specific types (e.g., `np.cint`)
    instead of standard types (e.g., `np.int32`). (#4903)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a crash when constant-folding certain int16 operations. (#4971)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added an `is_leaf` predicate to `pytree.flatten()`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.1.57 (November 12 2020)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Fixed manylinux2010 compliance issues in GPU wheels.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Switched the CPU FFT implementation from Eigen to PocketFFT.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a bug where the hash of bfloat16 values was not correctly initialized
    and could change (#4651).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add support for retaining ownership when passing arrays to DLPack (#4636).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a bug for batched triangular solves with sizes greater than 128 but not
    a multiple of 128.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a bug when performing concurrent FFTs on multiple GPUs (#3518).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a bug in profiler where tools are missing (#4427).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dropped support for CUDA 10.0.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.2.5 (October 27 2020)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.2.4...jax-v0.2.5).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Improvements:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that `check_jaxpr` does not perform FLOPS. See [#4650](https://github.com/google/jax/issues/4650).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Expanded the set of JAX primitives converted by jax2tf. See [primitives_with_limited_support.md](https://github.com/google/jax/blob/main/jax/experimental/jax2tf/primitives_with_limited_support.md).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.2.4 (October 19 2020)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.2.3...jax-v0.2.4).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Improvements:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add support for `remat` to jax.experimental.host_callback. See [#4608](https://github.com/google/jax/issues/4608).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Deprecations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Indexing with non-tuple sequences is now deprecated, following a similar deprecation
    in Numpy. In a future release, this will result in a TypeError. See [#4564](https://github.com/google/jax/issues/4564).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.1.56 (October 14, 2020)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: jax 0.2.3 (October 14 2020)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.2.2...jax-v0.2.3).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The reason for another release so soon is we need to temporarily roll back a
    new jit fastpath while we look into a performance degradation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.2.2 (October 13 2020)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.2.1...jax-v0.2.2).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.2.1 (October 6 2020)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.2.0...jax-v0.2.1).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Improvements:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As a benefit of omnistaging, the host_callback functions are executed (in program
    order) even if the result of the `jax.experimental.host_callback.id_print()`/
    `jax.experimental.host_callback.id_tap()` is not used in the computation.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax (0.2.0) (September 23 2020)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.1.77...jax-v0.2.0).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Improvements:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Omnistaging on by default. See [#3370](https://github.com/google/jax/issues/3370)
    and [omnistaging](https://github.com/google/jax/blob/main/docs/design_notes/omnistaging.md)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax (0.1.77) (September 15 2020)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Breaking changes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New simplified interface for `jax.experimental.host_callback.id_tap()` (#4101)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.1.55 (September 8, 2020)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Update XLA:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix bug in DLPackManagedTensorToBuffer (#4196)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.1.76 (September 8, 2020)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.1.75...jax-v0.1.76).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.1.75 (July 30, 2020)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.1.74...jax-v0.1.75).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bug Fixes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: make jnp.abs() work for unsigned inputs (#3914)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Improvements:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “Omnistaging” behavior added behind a flag, disabled by default (#3370)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.1.74 (July 29, 2020)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.1.73...jax-v0.1.74).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'New Features:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BFGS (#3101)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: TPU support for half-precision arithmetic (#3878)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bug Fixes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prevent some accidental dtype warnings (#3874)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Fix a multi-threading bug in custom derivatives (#3845, #3869)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Improvements:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Faster searchsorted implementation (#3873)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Better test coverage for jax.numpy sorting algorithms (#3836)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.1.52 (July 22, 2020)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Update XLA.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.1.73 (July 22, 2020)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.1.72...jax-v0.1.73).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The minimum jaxlib version is now 0.1.51.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'New Features:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jax.image.resize. (#3703)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: hfft and ihfft (#3664)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax.numpy.intersect1d (#3726)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax.numpy.lexsort (#3812)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lax.scan` and the `scan` primitive support an `unroll` parameter for loop
    unrolling when lowering to XLA ([#3738](https://github.com/google/jax/issues/3738)).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bug Fixes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix reduction repeated axis error (#3618)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix shape rule for lax.pad for input dimensions of size 0\. (#3608)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: make psum transpose handle zero cotangents (#3653)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix shape error when taking JVP of reduce-prod over size 0 axis. (#3729)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Support differentiation through jax.lax.all_to_all (#3733)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: address nan issue in jax.scipy.special.zeta (#3777)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Improvements:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Many improvements to jax2tf
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Reimplement argmin/argmax using a single pass variadic reduction. (#3611)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Enable XLA SPMD partitioning by default. (#3151)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Add support for 0d transpose convolution (#3643)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Make LU gradient work for low-rank matrices (#3610)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: support multiple_results and custom JVPs in jet (#3657)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Generalize reduce-window padding to support (lo, hi) pairs. (#3728)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement complex convolutions on CPU and GPU. (#3735)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Make jnp.take work for empty slices of empty arrays. (#3751)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Relax dimension ordering rules for dot_general. (#3778)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Enable buffer donation for GPU. (#3800)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Add support for base dilation and window dilation to reduce window op… (#3803)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.1.51 (July 2, 2020)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Update XLA.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add new runtime support for host_callback.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.1.72 (June 28, 2020)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.1.71...jax-v0.1.72).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bug fixes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix an odeint bug introduced in the previous release, see [#3587](https://github.com/google/jax/issues/3587).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.1.71 (June 25, 2020)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.1.70...jax-v0.1.71).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The minimum jaxlib version is now 0.1.48.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bug fixes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow `jax.experimental.ode.odeint` dynamics functions to close over values
    with respect to which we’re differentiating [#3562](https://github.com/google/jax/issues/3562).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.1.50 (June 25, 2020)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Add support for CUDA 11.0.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drop support for CUDA 9.2 (we only maintain support for the last four CUDA versions.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update XLA.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.1.49 (June 19, 2020)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Bug fixes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix build issue that could result in slow compiles ([tensorflow/tensorflow](https://github.com/tensorflow/tensorflow/commit/f805153a25b00d12072bd728e91bb1621bfcf1b1))
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.1.48 (June 12, 2020)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'New features:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds support for fast traceback collection.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds preliminary support for on-device heap profiling.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Implements `np.nextafter` for `bfloat16` types.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Complex128 support for FFTs on CPU and GPU.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bug fixes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved float64 `tanh` accuracy on GPU.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: float64 scatters on GPU are much faster.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Complex matrix multiplication on CPU should be much faster.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Stable sorts on CPU should actually be stable now.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Concurrency bug fix in CPU backend.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.1.70 (June 8, 2020)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.1.69...jax-v0.1.70).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'New features:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lax.switch` introduces indexed conditionals with multiple branches, together
    with a generalization of the `cond` primitive [#3318](https://github.com/google/jax/issues/3318).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.1.69 (June 3, 2020)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.1.68...jax-v0.1.69).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.1.68 (May 21, 2020)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.1.67...jax-v0.1.68).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'New features:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lax.cond()` supports a single-operand form, taken as the argument to both
    branches [#2993](https://github.com/google/jax/issues/2993).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Notable changes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The format of the `transforms` keyword for the `jax.experimental.host_callback.id_tap()`
    primitive has changed [#3132](https://github.com/google/jax/issues/3132).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.1.67 (May 12, 2020)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.1.66...jax-v0.1.67).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'New features:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for reduction over subsets of a pmapped axis using `axis_index_groups`
    [#2382](https://github.com/google/jax/issues/2382).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Experimental support for printing and calling host-side Python function from
    compiled code. See [id_print and id_tap](https://jax.readthedocs.io/en/latest/jax.experimental.host_callback.html)
    ([#3006](https://github.com/google/jax/issues/3006)).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Notable changes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The visibility of names exported from `jax.numpy` has been tightened. This may
    break code that was making use of names that were previously exported accidentally.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.1.47 (May 8, 2020)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Fixes crash for outfeed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.1.66 (May 5, 2020)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.1.65...jax-v0.1.66).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'New features:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for `in_axes=None` on `pmap()` [#2896](https://github.com/google/jax/issues/2896).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.1.46 (May 5, 2020)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Fixes crash for linear algebra functions on Mac OS X (#432).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixes an illegal instruction crash caused by using AVX512 instructions when
    an operating system or hypervisor disabled them (#2906).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.1.65 (April 30, 2020)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.1.64...jax-v0.1.65).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'New features:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Differentiation of determinants of singular matrices [#2809](https://github.com/google/jax/issues/2809).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bug fixes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix `odeint()` differentiation with respect to time of ODEs with time-dependent
    dynamics [#2817](https://github.com/google/jax/issues/2817), also add ODE CI testing.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix `lax_linalg.qr()` differentiation [#2867](https://github.com/google/jax/issues/2867).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.1.45 (April 21, 2020)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Fixes segfault: [#2755](https://github.com/google/jax/issues/2755)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plumb is_stable option on Sort HLO through to Python.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.1.64 (April 21, 2020)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.1.63...jax-v0.1.64).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'New features:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add syntactic sugar for functional indexed updates [#2684](https://github.com/google/jax/issues/2684).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Add `jax.numpy.linalg.multi_dot()` [#2726](https://github.com/google/jax/issues/2726).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Add `jax.numpy.unique()` [#2760](https://github.com/google/jax/issues/2760).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Add `jax.numpy.rint()` [#2724](https://github.com/google/jax/issues/2724).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Add `jax.numpy.rint()` [#2724](https://github.com/google/jax/issues/2724).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Add more primitive rules for `jax.experimental.jet()`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bug fixes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix `logaddexp()` and `logaddexp2()` differentiation at zero [#2107](https://github.com/google/jax/issues/2107).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Improve memory usage in reverse-mode autodiff without `jit()` [#2719](https://github.com/google/jax/issues/2719).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Better errors:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improves error message for reverse-mode differentiation of `lax.while_loop()`
    [#2129](https://github.com/google/jax/issues/2129).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.1.44 (April 16, 2020)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Fixes a bug where if multiple GPUs of different models were present, JAX would
    only compile programs suitable for the first GPU.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bugfix for `batch_group_count` convolutions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added precompiled SASS for more GPU versions to avoid startup PTX compilation
    hang.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.1.63 (April 12, 2020)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.1.62...jax-v0.1.63).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `jax.custom_jvp` and `jax.custom_vjp` from [#2026](https://github.com/google/jax/issues/2026),
    see the [tutorial notebook](https://jax.readthedocs.io/en/latest/notebooks/Custom_derivative_rules_for_Python_code.html).
    Deprecated `jax.custom_transforms` and removed it from the docs (though it still
    works).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add `scipy.sparse.linalg.cg` [#2566](https://github.com/google/jax/issues/2566).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changed how Tracers are printed to show more useful information for debugging
    [#2591](https://github.com/google/jax/issues/2591).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Made `jax.numpy.isclose` handle `nan` and `inf` correctly [#2501](https://github.com/google/jax/issues/2501).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added several new rules for `jax.experimental.jet` [#2537](https://github.com/google/jax/issues/2537).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed `jax.experimental.stax.BatchNorm` when `scale`/`center` isn’t provided.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix some missing cases of broadcasting in `jax.numpy.einsum` [#2512](https://github.com/google/jax/issues/2512).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement `jax.numpy.cumsum` and `jax.numpy.cumprod` in terms of a parallel
    prefix scan [#2596](https://github.com/google/jax/issues/2596) and make `reduce_prod`
    differentiable to arbitrary order [#2597](https://github.com/google/jax/issues/2597).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add `batch_group_count` to `conv_general_dilated` [#2635](https://github.com/google/jax/issues/2635).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add docstring for `test_util.check_grads` [#2656](https://github.com/google/jax/issues/2656).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add `callback_transform` [#2665](https://github.com/google/jax/issues/2665).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement `rollaxis`, `convolve`/`correlate` 1d & 2d, `copysign`, `trunc`, `roots`,
    and `quantile`/`percentile` interpolation options.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.1.43 (March 31, 2020)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Fixed a performance regression for Resnet-50 on GPU.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.1.62 (March 21, 2020)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.1.61...jax-v0.1.62).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JAX has dropped support for Python 3.5\. Please upgrade to Python 3.6 or newer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Removed the internal function `lax._safe_mul`, which implemented the convention
    `0. * nan == 0.`. This change means some programs when differentiated will produce
    nans when they previously produced correct values, though it ensures nans rather
    than silently incorrect results are produced for other programs. See #2447 and
    #1052 for details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added an `all_gather` parallel convenience function.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More type annotations in core code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.1.42 (March 19, 2020)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: jaxlib 0.1.41 broke cloud TPU support due to an API incompatibility. This release
    fixes it again.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JAX has dropped support for Python 3.5\. Please upgrade to Python 3.6 or newer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.1.61 (March 17, 2020)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.1.60...jax-v0.1.61).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixes Python 3.5 support. This will be the last JAX or jaxlib release that supports
    Python 3.5.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.1.60 (March 17, 2020)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.1.59...jax-v0.1.60).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'New features:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.pmap()` has `static_broadcast_argnums` argument which allows the user
    to specify arguments that should be treated as compile-time constants and should
    be broadcasted to all devices. It works analogously to `static_argnums` in `jax.jit()`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved error messages for when tracers are mistakenly saved in global state.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `jax.nn.one_hot()` utility function.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `jax.experimental.jet` for exponentially faster higher-order automatic
    differentiation.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Added more correctness checking to arguments of `jax.lax.broadcast_in_dim()`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The minimum jaxlib version is now 0.1.41.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.1.40 (March 4, 2020)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Adds experimental support in Jaxlib for TensorFlow profiler, which allows tracing
    of CPU and GPU computations from TensorBoard.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Includes prototype support for multihost GPU computations that communicate via
    NCCL.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improves performance of NCCL collectives on GPU.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds TopK, CustomCallWithoutLayout, CustomCallWithLayout, IGammaGradA and RandomGamma
    implementations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supports device assignments known at XLA compilation time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.1.59 (February 11, 2020)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/jax-v0.1.58...jax-v0.1.59).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Breaking changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The minimum jaxlib version is now 0.1.38.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Simplified `Jaxpr` by removing the `Jaxpr.freevars` and `Jaxpr.bound_subjaxprs`.
    The call primitives (`xla_call`, `xla_pmap`, `sharded_call`, and `remat_call`)
    get a new parameter `call_jaxpr` with a fully-closed (no `constvars`) jaxpr. Also,
    added a new field `call_primitive` to primitives.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'New features:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reverse-mode automatic differentiation (e.g. `grad`) of `lax.cond`, making it
    now differentiable in both modes ([#2091](https://github.com/google/jax/issues/2091))
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: JAX now supports DLPack, which allows sharing CPU and GPU arrays in a zero-copy
    way with other libraries, such as PyTorch.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: JAX GPU DeviceArrays now support `__cuda_array_interface__`, which is another
    zero-copy protocol for sharing GPU arrays with other libraries such as CuPy and
    Numba.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: JAX CPU device buffers now implement the Python buffer protocol, which allows
    zero-copy buffer sharing between JAX and NumPy.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Added JAX_SKIP_SLOW_TESTS environment variable to skip tests known as slow.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.1.39 (February 11, 2020)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Updates XLA.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jaxlib 0.1.38 (January 29, 2020)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: CUDA 9.0 is no longer supported.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CUDA 10.2 wheels are now built by default.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jax 0.1.58 (January 28, 2020)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub commits](https://github.com/google/jax/compare/46014da21...jax-v0.1.58).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Breaking changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JAX has dropped Python 2 support, because Python 2 reached its end of life on
    January 1, 2020\. Please update to Python 3.5 or newer.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: New features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Forward-mode automatic differentiation (`jvp`) of while loop ([#1980](https://github.com/google/jax/issues/1980))
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'New NumPy and SciPy functions:'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`jax.numpy.fft.fft2()`'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`jax.numpy.fft.ifft2()`'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`jax.numpy.fft.rfft()`'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`jax.numpy.fft.irfft()`'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`jax.numpy.fft.rfft2()`'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`jax.numpy.fft.irfft2()`'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`jax.numpy.fft.rfftn()`'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`jax.numpy.fft.irfftn()`'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`jax.numpy.fft.fftfreq()`'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`jax.numpy.fft.rfftfreq()`'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`jax.numpy.linalg.matrix_rank()`'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`jax.numpy.linalg.matrix_power()`'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`jax.scipy.special.betainc()`'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Batched Cholesky decomposition on GPU now uses a more efficient batched kernel.
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: Notable bug fixes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With the Python 3 upgrade, JAX no longer depends on `fastcache`, which should
    help with installation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
