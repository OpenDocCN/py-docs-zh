["```py\nfrom sqlalchemy.event import listen\nfrom sqlalchemy.pool import Pool\n\ndef my_on_connect(dbapi_con, connection_record):\n    print(\"New DBAPI connection:\", dbapi_con)\n\nlisten(Pool, \"connect\", my_on_connect)\n```", "```py\nfrom sqlalchemy.event import listens_for\nfrom sqlalchemy.pool import Pool\n\n@listens_for(Pool, \"connect\")\ndef my_on_connect(dbapi_con, connection_record):\n    print(\"New DBAPI connection:\", dbapi_con)\n```", "```py\nfrom sqlalchemy.event import listens_for\nfrom sqlalchemy.pool import Pool\n\n@listens_for(Pool, \"connect\", named=True)\ndef my_on_connect(**kw):\n    print(\"New DBAPI connection:\", kw[\"dbapi_connection\"])\n```", "```py\nfrom sqlalchemy.event import listens_for\nfrom sqlalchemy.pool import Pool\n\n@listens_for(Pool, \"connect\", named=True)\ndef my_on_connect(dbapi_connection, **kw):\n    print(\"New DBAPI connection:\", dbapi_connection)\n    print(\"Connection record:\", kw[\"connection_record\"])\n```", "```py\nfrom sqlalchemy.event import listen\nfrom sqlalchemy.pool import Pool, QueuePool\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.engine import Engine\nimport psycopg2\n\ndef connect():\n    return psycopg2.connect(user=\"ed\", host=\"127.0.0.1\", dbname=\"test\")\n\nmy_pool = QueuePool(connect)\nmy_engine = create_engine(\"postgresql+psycopg2://ed@localhost/test\")\n\n# associate listener with all instances of Pool\nlisten(Pool, \"connect\", my_on_connect)\n\n# associate listener with all instances of Pool\n# via the Engine class\nlisten(Engine, \"connect\", my_on_connect)\n\n# associate listener with my_pool\nlisten(my_pool, \"connect\", my_on_connect)\n\n# associate listener with my_engine.pool\nlisten(my_engine, \"connect\", my_on_connect)\n```", "```py\ndef validate_phone(target, value, oldvalue, initiator):\n  \"\"\"Strip non-numeric characters from a phone number\"\"\"\n\n    return re.sub(r\"\\D\", \"\", value)\n\n# setup listener on UserContact.phone attribute, instructing\n# it to use the return value\nlisten(UserContact.phone, \"set\", validate_phone, retval=True)\n```", "```py\nfunction sqlalchemy.event.listen(target: Any, identifier: str, fn: Callable[[...], Any], *args: Any, **kw: Any) \u2192 None\n```", "```py\nfrom sqlalchemy import event\nfrom sqlalchemy.schema import UniqueConstraint\n\ndef unique_constraint_name(const, table):\n    const.name = \"uq_%s_%s\" % (\n        table.name,\n        list(const.columns)[0].name\n    )\nevent.listen(\n        UniqueConstraint,\n        \"after_parent_attach\",\n        unique_constraint_name)\n```", "```py\nfunction sqlalchemy.event.listens_for(target: Any, identifier: str, *args: Any, **kw: Any) \u2192 Callable[[Callable[[...], Any]], Callable[[...], Any]]\n```", "```py\nfrom sqlalchemy import event\nfrom sqlalchemy.schema import UniqueConstraint\n\n@event.listens_for(UniqueConstraint, \"after_parent_attach\")\ndef unique_constraint_name(const, table):\n    const.name = \"uq_%s_%s\" % (\n        table.name,\n        list(const.columns)[0].name\n    )\n```", "```py\n@event.listens_for(Mapper, \"before_configure\", once=True)\ndef on_config():\n    do_config()\n```", "```py\nfunction sqlalchemy.event.remove(target: Any, identifier: str, fn: Callable[[...], Any]) \u2192 None\n```", "```py\n# if a function was registered like this...\n@event.listens_for(SomeMappedClass, \"before_insert\", propagate=True)\ndef my_listener_function(*arg):\n    pass\n\n# ... it's removed like this\nevent.remove(SomeMappedClass, \"before_insert\", my_listener_function)\n```", "```py\nfunction sqlalchemy.event.contains(target: Any, identifier: str, fn: Callable[[...], Any]) \u2192 bool\n```", "```py\nfrom sqlalchemy.event import listen\nfrom sqlalchemy.pool import Pool\n\ndef my_on_connect(dbapi_con, connection_record):\n    print(\"New DBAPI connection:\", dbapi_con)\n\nlisten(Pool, \"connect\", my_on_connect)\n```", "```py\nfrom sqlalchemy.event import listens_for\nfrom sqlalchemy.pool import Pool\n\n@listens_for(Pool, \"connect\")\ndef my_on_connect(dbapi_con, connection_record):\n    print(\"New DBAPI connection:\", dbapi_con)\n```", "```py\nfrom sqlalchemy.event import listens_for\nfrom sqlalchemy.pool import Pool\n\n@listens_for(Pool, \"connect\", named=True)\ndef my_on_connect(**kw):\n    print(\"New DBAPI connection:\", kw[\"dbapi_connection\"])\n```", "```py\nfrom sqlalchemy.event import listens_for\nfrom sqlalchemy.pool import Pool\n\n@listens_for(Pool, \"connect\", named=True)\ndef my_on_connect(dbapi_connection, **kw):\n    print(\"New DBAPI connection:\", dbapi_connection)\n    print(\"Connection record:\", kw[\"connection_record\"])\n```", "```py\nfrom sqlalchemy.event import listen\nfrom sqlalchemy.pool import Pool, QueuePool\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.engine import Engine\nimport psycopg2\n\ndef connect():\n    return psycopg2.connect(user=\"ed\", host=\"127.0.0.1\", dbname=\"test\")\n\nmy_pool = QueuePool(connect)\nmy_engine = create_engine(\"postgresql+psycopg2://ed@localhost/test\")\n\n# associate listener with all instances of Pool\nlisten(Pool, \"connect\", my_on_connect)\n\n# associate listener with all instances of Pool\n# via the Engine class\nlisten(Engine, \"connect\", my_on_connect)\n\n# associate listener with my_pool\nlisten(my_pool, \"connect\", my_on_connect)\n\n# associate listener with my_engine.pool\nlisten(my_engine, \"connect\", my_on_connect)\n```", "```py\ndef validate_phone(target, value, oldvalue, initiator):\n  \"\"\"Strip non-numeric characters from a phone number\"\"\"\n\n    return re.sub(r\"\\D\", \"\", value)\n\n# setup listener on UserContact.phone attribute, instructing\n# it to use the return value\nlisten(UserContact.phone, \"set\", validate_phone, retval=True)\n```", "```py\nfunction sqlalchemy.event.listen(target: Any, identifier: str, fn: Callable[[...], Any], *args: Any, **kw: Any) \u2192 None\n```", "```py\nfrom sqlalchemy import event\nfrom sqlalchemy.schema import UniqueConstraint\n\ndef unique_constraint_name(const, table):\n    const.name = \"uq_%s_%s\" % (\n        table.name,\n        list(const.columns)[0].name\n    )\nevent.listen(\n        UniqueConstraint,\n        \"after_parent_attach\",\n        unique_constraint_name)\n```", "```py\nfunction sqlalchemy.event.listens_for(target: Any, identifier: str, *args: Any, **kw: Any) \u2192 Callable[[Callable[[...], Any]], Callable[[...], Any]]\n```", "```py\nfrom sqlalchemy import event\nfrom sqlalchemy.schema import UniqueConstraint\n\n@event.listens_for(UniqueConstraint, \"after_parent_attach\")\ndef unique_constraint_name(const, table):\n    const.name = \"uq_%s_%s\" % (\n        table.name,\n        list(const.columns)[0].name\n    )\n```", "```py\n@event.listens_for(Mapper, \"before_configure\", once=True)\ndef on_config():\n    do_config()\n```", "```py\nfunction sqlalchemy.event.remove(target: Any, identifier: str, fn: Callable[[...], Any]) \u2192 None\n```", "```py\n# if a function was registered like this...\n@event.listens_for(SomeMappedClass, \"before_insert\", propagate=True)\ndef my_listener_function(*arg):\n    pass\n\n# ... it's removed like this\nevent.remove(SomeMappedClass, \"before_insert\", my_listener_function)\n```", "```py\nfunction sqlalchemy.event.contains(target: Any, identifier: str, fn: Callable[[...], Any]) \u2192 bool\n```"]