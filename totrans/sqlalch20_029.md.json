["```py\nclass sqlalchemy.orm.registry\n```", "```py\nmethod __init__(*, metadata: Optional[MetaData] = None, class_registry: Optional[clsregistry._ClsRegistryType] = None, type_annotation_map: Optional[_TypeAnnotationMapType] = None, constructor: Callable[..., None] = <function _declarative_constructor>)\n```", "```py\nmethod as_declarative_base(**kw: Any) \u2192 Callable[[Type[_T]], Type[_T]]\n```", "```py\nfrom sqlalchemy.orm import registry\n\nmapper_registry = registry()\n\n@mapper_registry.as_declarative_base()\nclass Base:\n    @declared_attr\n    def __tablename__(cls):\n        return cls.__name__.lower()\n    id = Column(Integer, primary_key=True)\n\nclass MyMappedClass(Base):\n    # ...\n```", "```py\nmethod configure(cascade: bool = False) \u2192 None\n```", "```py\nmethod dispose(cascade: bool = False) \u2192 None\n```", "```py\nmethod generate_base(mapper: ~typing.Callable[[...], ~sqlalchemy.orm.mapper.Mapper[~typing.Any]] | None = None, cls: ~typing.Type[~typing.Any] = <class 'object'>, name: str = 'Base', metaclass: ~typing.Type[~typing.Any] = <class 'sqlalchemy.orm.decl_api.DeclarativeMeta'>) \u2192 Any\n```", "```py\nfrom sqlalchemy.orm import registry\n\nmapper_registry = registry()\n\nBase = mapper_registry.generate_base()\n\nclass MyClass(Base):\n    __tablename__ = \"my_table\"\n    id = Column(Integer, primary_key=True)\n```", "```py\nfrom sqlalchemy.orm import registry\nfrom sqlalchemy.orm.decl_api import DeclarativeMeta\n\nmapper_registry = registry()\n\nclass Base(metaclass=DeclarativeMeta):\n    __abstract__ = True\n    registry = mapper_registry\n    metadata = mapper_registry.metadata\n\n    __init__ = mapper_registry.constructor\n```", "```py\nmethod map_declaratively(cls: Type[_O]) \u2192 Mapper[_O]\n```", "```py\nfrom sqlalchemy.orm import registry\n\nmapper_registry = registry()\n\nclass Foo:\n    __tablename__ = 'some_table'\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n\nmapper = mapper_registry.map_declaratively(Foo)\n```", "```py\nmethod map_imperatively(class_: Type[_O], local_table: FromClause | None = None, **kw: Any) \u2192 Mapper[_O]\n```", "```py\nfrom sqlalchemy.orm import registry\n\nmapper_registry = registry()\n\nmy_table = Table(\n    \"my_table\",\n    mapper_registry.metadata,\n    Column('id', Integer, primary_key=True)\n)\n\nclass MyClass:\n    pass\n\nmapper_registry.map_imperatively(MyClass, my_table)\n```", "```py\nmethod mapped(cls: Type[_O]) \u2192 Type[_O]\n```", "```py\nfrom sqlalchemy.orm import registry\n\nmapper_registry = registry()\n\n@mapper_registry.mapped\nclass Foo:\n    __tablename__ = 'some_table'\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n```", "```py\nmethod mapped_as_dataclass(_registry__cls: Type[_O] | None = None, *, init: _NoArg | bool = _NoArg.NO_ARG, repr: _NoArg | bool = _NoArg.NO_ARG, eq: _NoArg | bool = _NoArg.NO_ARG, order: _NoArg | bool = _NoArg.NO_ARG, unsafe_hash: _NoArg | bool = _NoArg.NO_ARG, match_args: _NoArg | bool = _NoArg.NO_ARG, kw_only: _NoArg | bool = _NoArg.NO_ARG, dataclass_callable: _NoArg | Callable[..., Type[Any]] = _NoArg.NO_ARG) \u2192 Type[_O] | Callable[[Type[_O]], Type[_O]]\n```", "```py\nattribute mappers\n```", "```py\nmethod update_type_annotation_map(type_annotation_map: _TypeAnnotationMapType) \u2192 None\n```", "```py\nfunction sqlalchemy.orm.add_mapped_attribute(target: Type[_O], key: str, attr: MapperProperty[Any]) \u2192 None\n```", "```py\nadd_mapped_attribute(User, \"addresses\", relationship(Address))\n```", "```py\nfunction sqlalchemy.orm.column_property(column: _ORMColumnExprArgument[_T], *additional_columns: _ORMColumnExprArgument[Any], group: str | None = None, deferred: bool = False, raiseload: bool = False, comparator_factory: Type[PropComparator[_T]] | None = None, init: _NoArg | bool = _NoArg.NO_ARG, repr: _NoArg | bool = _NoArg.NO_ARG, default: Any | None = _NoArg.NO_ARG, default_factory: _NoArg | Callable[[], _T] = _NoArg.NO_ARG, compare: _NoArg | bool = _NoArg.NO_ARG, kw_only: _NoArg | bool = _NoArg.NO_ARG, active_history: bool = False, expire_on_flush: bool = True, info: _InfoType | None = None, doc: str | None = None) \u2192 MappedSQLExpression[_T]\n```", "```py\nfunction sqlalchemy.orm.declarative_base(*, metadata: Optional[MetaData] = None, mapper: Optional[Callable[..., Mapper[Any]]] = None, cls: Type[Any] = <class 'object'>, name: str = 'Base', class_registry: Optional[clsregistry._ClsRegistryType] = None, type_annotation_map: Optional[_TypeAnnotationMapType] = None, constructor: Callable[..., None] = <function _declarative_constructor>, metaclass: Type[Any] = <class 'sqlalchemy.orm.decl_api.DeclarativeMeta'>) \u2192 Any\n```", "```py\nfrom sqlalchemy.orm import declarative_base\n\nBase = declarative_base()\n```", "```py\nfrom sqlalchemy.orm import registry\n\nmapper_registry = registry()\nBase = mapper_registry.generate_base()\n```", "```py\nfunction sqlalchemy.orm.declarative_mixin(cls: Type[_T]) \u2192 Type[_T]\n```", "```py\nfrom sqlalchemy.orm import declared_attr\nfrom sqlalchemy.orm import declarative_mixin\n\n@declarative_mixin\nclass MyMixin:\n\n    @declared_attr\n    def __tablename__(cls):\n        return cls.__name__.lower()\n\n    __table_args__ = {'mysql_engine': 'InnoDB'}\n    __mapper_args__= {'always_refresh': True}\n\n    id =  Column(Integer, primary_key=True)\n\nclass MyModel(MyMixin, Base):\n    name = Column(String(1000))\n```", "```py\nfunction sqlalchemy.orm.as_declarative(**kw: Any) \u2192 Callable[[Type[_T]], Type[_T]]\n```", "```py\nfrom sqlalchemy.orm import as_declarative\n\n@as_declarative()\nclass Base:\n    @declared_attr\n    def __tablename__(cls):\n        return cls.__name__.lower()\n    id = Column(Integer, primary_key=True)\n\nclass MyMappedClass(Base):\n    # ...\n```", "```py\nfunction sqlalchemy.orm.mapped_column(__name_pos: str | _TypeEngineArgument[Any] | SchemaEventTarget | None = None, __type_pos: _TypeEngineArgument[Any] | SchemaEventTarget | None = None, *args: SchemaEventTarget, init: _NoArg | bool = _NoArg.NO_ARG, repr: _NoArg | bool = _NoArg.NO_ARG, default: Any | None = _NoArg.NO_ARG, default_factory: _NoArg | Callable[[], _T] = _NoArg.NO_ARG, compare: _NoArg | bool = _NoArg.NO_ARG, kw_only: _NoArg | bool = _NoArg.NO_ARG, nullable: bool | Literal[SchemaConst.NULL_UNSPECIFIED] | None = SchemaConst.NULL_UNSPECIFIED, primary_key: bool | None = False, deferred: _NoArg | bool = _NoArg.NO_ARG, deferred_group: str | None = None, deferred_raiseload: bool | None = None, use_existing_column: bool = False, name: str | None = None, type_: _TypeEngineArgument[Any] | None = None, autoincrement: _AutoIncrementType = 'auto', doc: str | None = None, key: str | None = None, index: bool | None = None, unique: bool | None = None, info: _InfoType | None = None, onupdate: Any | None = None, insert_default: Any | None = _NoArg.NO_ARG, server_default: _ServerDefaultArgument | None = None, server_onupdate: FetchedValue | None = None, active_history: bool = False, quote: bool | None = None, system: bool = False, comment: str | None = None, sort_order: _NoArg | int = _NoArg.NO_ARG, **kw: Any) \u2192 MappedColumn[Any]\n```", "```py\nclass sqlalchemy.orm.declared_attr\n```", "```py\nclass ProvidesUserMixin:\n    \"A mixin that adds a 'user' relationship to classes.\"\n\n    user_id: Mapped[int] = mapped_column(ForeignKey(\"user_table.id\"))\n\n    @declared_attr\n    def user(cls) -> Mapped[\"User\"]:\n        return relationship(\"User\")\n```", "```py\nclass CreateTableName:\n    @declared_attr.directive\n    def __tablename__(cls) -> str:\n        return cls.__name__.lower()\n```", "```py\nclass Employee(Base):\n    __tablename__ = 'employee'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    type: Mapped[str] = mapped_column(String(50))\n\n    @declared_attr.directive\n    def __mapper_args__(cls) -> Dict[str, Any]:\n        if cls.__name__ == 'Employee':\n            return {\n                    \"polymorphic_on\":cls.type,\n                    \"polymorphic_identity\":\"Employee\"\n            }\n        else:\n            return {\"polymorphic_identity\":cls.__name__}\n\nclass Engineer(Employee):\n    pass\n```", "```py\nclass SomethingMixin:\n    x: Mapped[int]\n    y: Mapped[int]\n\n    @declared_attr\n    @classmethod\n    def x_plus_y(cls) -> Mapped[int]:\n        return column_property(cls.x + cls.y)\n```", "```py\nattribute cascading\n```", "```py\nclass HasIdMixin:\n    @declared_attr.cascading\n    def id(cls):\n        if has_inherited_table(cls):\n            return Column(ForeignKey(\"myclass.id\"), primary_key=True)\n        else:\n            return Column(Integer, primary_key=True)\n\nclass MyClass(HasIdMixin, Base):\n    __tablename__ = \"myclass\"\n    # ...\n\nclass MySubClass(MyClass):\n  \"\"\" \"\"\"\n\n    # ...\n```", "```py\nattribute directive\n```", "```py\nclass CreateTableName:\n    @declared_attr.directive\n    def __tablename__(cls) -> str:\n        return cls.__name__.lower()\n```", "```py\nclass sqlalchemy.orm.DeclarativeBase\n```", "```py\nfrom sqlalchemy.orm import DeclarativeBase\n\nclass Base(DeclarativeBase):\n    pass\n```", "```py\nfrom typing_extensions import Annotated\n\nfrom sqlalchemy import BigInteger\nfrom sqlalchemy import MetaData\nfrom sqlalchemy import String\nfrom sqlalchemy.orm import DeclarativeBase\n\nbigint = Annotated[int, \"bigint\"]\nmy_metadata = MetaData()\n\nclass Base(DeclarativeBase):\n    metadata = my_metadata\n    type_annotation_map = {\n        str: String().with_variant(String(255), \"mysql\", \"mariadb\"),\n        bigint: BigInteger()\n    }\n```", "```py\nclass Base(DeclarativeBase):\n    def __init__(self, id=None):\n        self.id = id\n```", "```py\nclass MyClass(Base):\n    def __init__(self, id=None, name=None):\n        self.name = name\n        super().__init__(id=id)\n```", "```py\nattribute __mapper__: ClassVar[Mapper[Any]]\n```", "```py\nattribute __mapper_args__: Any\n```", "```py\nattribute __table__: ClassVar[FromClause]\n```", "```py\nattribute __table_args__: Any\n```", "```py\nattribute __tablename__: Any\n```", "```py\nattribute metadata: ClassVar[MetaData]\n```", "```py\nattribute registry: ClassVar[registry]\n```", "```py\nclass sqlalchemy.orm.DeclarativeBaseNoMeta\n```", "```py\nattribute __mapper__: ClassVar[Mapper[Any]]\n```", "```py\nattribute __mapper_args__: Any\n```", "```py\nattribute __table__: FromClause | None\n```", "```py\nattribute __table_args__: Any\n```", "```py\nattribute __tablename__: Any\n```", "```py\nattribute metadata: ClassVar[MetaData]\n```", "```py\nattribute registry: ClassVar[registry]\n```", "```py\nfunction sqlalchemy.orm.has_inherited_table(cls: Type[_O]) \u2192 bool\n```", "```py\nfunction sqlalchemy.orm.synonym_for(name: str, map_column: bool = False) \u2192 Callable[[Callable[[...], Any]], Synonym[Any]]\n```", "```py\nclass MyClass(Base):\n    __tablename__ = 'my_table'\n\n    id = Column(Integer, primary_key=True)\n    _job_status = Column(\"job_status\", String(50))\n\n    @synonym_for(\"job_status\")\n    @property\n    def job_status(self):\n        return \"Status: %s\" % self._job_status\n```", "```py\nfunction sqlalchemy.orm.object_mapper(instance: _T) \u2192 Mapper[_T]\n```", "```py\ninspect(instance).mapper\n```", "```py\nfunction sqlalchemy.orm.class_mapper(class_: Type[_O], configure: bool = True) \u2192 Mapper[_O]\n```", "```py\ninspect(some_mapped_class)\n```", "```py\nfunction sqlalchemy.orm.configure_mappers() \u2192 None\n```", "```py\nfunction sqlalchemy.orm.clear_mappers() \u2192 None\n```", "```py\nfunction sqlalchemy.orm.util.identity_key(class_: Type[_T] | None = None, ident: Any | Tuple[Any, ...] = None, *, instance: _T | None = None, row: Row[Any] | RowMapping | None = None, identity_token: Any | None = None) \u2192 _IdentityKeyType[_T]\n```", "```py\n    >>> identity_key(MyClass, (1, 2))\n    (<class '__main__.MyClass'>, (1, 2), None)\n    ```", "```py\n    >>> instance = MyClass(1, 2)\n    >>> identity_key(instance=instance)\n    (<class '__main__.MyClass'>, (1, 2), None)\n    ```", "```py\n    >>> row = engine.execute(\\\n     text(\"select * from table where a=1 and b=2\")\\\n     ).first()\n    >>> identity_key(MyClass, row=row)\n    (<class '__main__.MyClass'>, (1, 2), None)\n    ```", "```py\nfunction sqlalchemy.orm.polymorphic_union(table_map, typecolname, aliasname='p_union', cast_nulls=True)\n```", "```py\nfunction sqlalchemy.orm.orm_insert_sentinel(name: str | None = None, type_: _TypeEngineArgument[Any] | None = None, *, default: Any | None = None, omit_from_statements: bool = True) \u2192 MappedColumn[Any]\n```", "```py\nfunction sqlalchemy.orm.reconstructor(fn)\n```", "```py\nclass sqlalchemy.orm.Mapper\n```", "```py\nmethod __init__(class_: Type[_O], local_table: FromClause | None = None, properties: Mapping[str, MapperProperty[Any]] | None = None, primary_key: Iterable[_ORMColumnExprArgument[Any]] | None = None, non_primary: bool = False, inherits: Mapper[Any] | Type[Any] | None = None, inherit_condition: _ColumnExpressionArgument[bool] | None = None, inherit_foreign_keys: Sequence[_ORMColumnExprArgument[Any]] | None = None, always_refresh: bool = False, version_id_col: _ORMColumnExprArgument[Any] | None = None, version_id_generator: Literal[False] | Callable[[Any], Any] | None = None, polymorphic_on: _ORMColumnExprArgument[Any] | str | MapperProperty[Any] | None = None, _polymorphic_map: Dict[Any, Mapper[Any]] | None = None, polymorphic_identity: Any | None = None, concrete: bool = False, with_polymorphic: _WithPolymorphicArg | None = None, polymorphic_abstract: bool = False, polymorphic_load: Literal['selectin', 'inline'] | None = None, allow_partial_pks: bool = True, batch: bool = True, column_prefix: str | None = None, include_properties: Sequence[str] | None = None, exclude_properties: Sequence[str] | None = None, passive_updates: bool = True, passive_deletes: bool = False, confirm_deleted_rows: bool = True, eager_defaults: Literal[True, False, 'auto'] = 'auto', legacy_is_orphan: bool = False, _compiled_cache_size: int = 100)\n```", "```py\n    class User(Base):\n        __table__ = user_table\n        __mapper_args__ = {'column_prefix':'_'}\n    ```", "```py\n    class Employee(Base):\n        __tablename__ = 'employee'\n\n        id: Mapped[int] = mapped_column(primary_key=True)\n        discriminator: Mapped[str] = mapped_column(String(50))\n\n        __mapper_args__ = {\n            \"polymorphic_on\":discriminator,\n            \"polymorphic_identity\":\"employee\"\n        }\n    ```", "```py\n    class Employee(Base):\n        __tablename__ = 'employee'\n\n        id: Mapped[int] = mapped_column(primary_key=True)\n        discriminator: Mapped[str] = mapped_column(String(50))\n\n        __mapper_args__ = {\n            \"polymorphic_on\":case(\n                (discriminator == \"EN\", \"engineer\"),\n                (discriminator == \"MA\", \"manager\"),\n                else_=\"employee\"),\n            \"polymorphic_identity\":\"employee\"\n        }\n    ```", "```py\n    class Employee(Base):\n        __tablename__ = 'employee'\n\n        id: Mapped[int] = mapped_column(primary_key=True)\n        discriminator: Mapped[str]\n\n        __mapper_args__ = {\n            \"polymorphic_on\": \"discriminator\",\n            \"polymorphic_identity\": \"employee\"\n        }\n    ```", "```py\n    from sqlalchemy import event\n    from sqlalchemy.orm import object_mapper\n\n    @event.listens_for(Employee, \"init\", propagate=True)\n    def set_identity(instance, *arg, **kw):\n        mapper = object_mapper(instance)\n        instance.discriminator = mapper.polymorphic_identity\n    ```", "```py\n    def generate_version(version):\n        return next_version\n    ```", "```py\nmethod add_properties(dict_of_properties)\n```", "```py\nmethod add_property(key: str, prop: Column[Any] | MapperProperty[Any]) \u2192 None\n```", "```py\nattribute all_orm_descriptors\n```", "```py\nattribute attrs\n```", "```py\nattribute base_mapper: Mapper[Any]\n```", "```py\nattribute c: ReadOnlyColumnCollection[str, Column[Any]]\n```", "```py\nmethod cascade_iterator(type_: str, state: InstanceState[_O], halt_on: Callable[[InstanceState[Any]], bool] | None = None) \u2192 Iterator[Tuple[object, Mapper[Any], InstanceState[Any], _InstanceDict]]\n```", "```py\nattribute class_: Type[_O]\n```", "```py\nattribute class_manager: ClassManager[_O]\n```", "```py\nattribute column_attrs\n```", "```py\nattribute columns: ReadOnlyColumnCollection[str, Column[Any]]\n```", "```py\nmethod common_parent(other: Mapper[Any]) \u2192 bool\n```", "```py\nattribute composites\n```", "```py\nattribute concrete: bool\n```", "```py\nattribute configured: bool = False\n```", "```py\nattribute entity\n```", "```py\nmethod get_property(key: str, _configure_mappers: bool = False) \u2192 MapperProperty[Any]\n```", "```py\nmethod get_property_by_column(column: ColumnElement[_T]) \u2192 MapperProperty[_T]\n```", "```py\nmethod identity_key_from_instance(instance: _O) \u2192 _IdentityKeyType[_O]\n```", "```py\nmethod identity_key_from_primary_key(primary_key: Tuple[Any, ...], identity_token: Any | None = None) \u2192 _IdentityKeyType[_O]\n```", "```py\nmethod identity_key_from_row(row: Row[Any] | RowMapping | None, identity_token: Any | None = None, adapter: ORMAdapter | None = None) \u2192 _IdentityKeyType[_O]\n```", "```py\nattribute inherits: Mapper[Any] | None\n```", "```py\nattribute is_mapper = True\n```", "```py\nmethod is_sibling(other: Mapper[Any]) \u2192 bool\n```", "```py\nmethod isa(other: Mapper[Any]) \u2192 bool\n```", "```py\nattribute iterate_properties\n```", "```py\nattribute local_table: FromClause\n```", "```py\nattribute mapped_table\n```", "```py\nattribute mapper\n```", "```py\nattribute non_primary: bool\n```", "```py\nattribute persist_selectable: FromClause\n```", "```py\nattribute polymorphic_identity: Any | None\n```", "```py\nmethod polymorphic_iterator() \u2192 Iterator[Mapper[Any]]\n```", "```py\nattribute polymorphic_map: Dict[Any, Mapper[Any]]\n```", "```py\nattribute polymorphic_on: KeyedColumnElement[Any] | None\n```", "```py\nattribute primary_key: Tuple[Column[Any], ...]\n```", "```py\nmethod primary_key_from_instance(instance: _O) \u2192 Tuple[Any, ...]\n```", "```py\nmethod primary_mapper() \u2192 Mapper[Any]\n```", "```py\nattribute relationships\n```", "```py\nattribute selectable\n```", "```py\nattribute self_and_descendants\n```", "```py\nattribute single: bool\n```", "```py\nattribute synonyms\n```", "```py\nattribute tables: Sequence[TableClause]\n```", "```py\nattribute validators: util.immutabledict[str, Tuple[str, Dict[str, Any]]]\n```", "```py\nattribute with_polymorphic_mappers\n```", "```py\nclass sqlalchemy.orm.MappedAsDataclass\n```", "```py\nclass sqlalchemy.orm.MappedClassProtocol\n```"]