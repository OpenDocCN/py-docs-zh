- en: jax.scipy.stats.bernoulli.logpmf
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[`jax.readthedocs.io/en/latest/_autosummary/jax.scipy.stats.bernoulli.logpmf.html`](https://jax.readthedocs.io/en/latest/_autosummary/jax.scipy.stats.bernoulli.logpmf.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Bernoulli log probability mass function.
  prefs: []
  type: TYPE_NORMAL
- en: JAX implementation of [`scipy.stats.bernoulli`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.bernoulli.html#scipy.stats.bernoulli
    "(in SciPy v1.13.1)") `logpmf`
  prefs: []
  type: TYPE_NORMAL
- en: The Bernoulli probability mass function is defined as
  prefs: []
  type: TYPE_NORMAL
- en: \[\begin{split}f(k) = \begin{cases} 1 - p, & k = 0 \\ p, & k = 1 \\ 0, & \mathrm{otherwise}
    \end{cases}\end{split}\]
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**k** (*Array* *|* [*ndarray*](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(in NumPy v2.0)") *|* [*bool*](https://numpy.org/doc/stable/reference/arrays.scalars.html#numpy.bool
    "(in NumPy v2.0)") *|* *number* *|* [*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.12)") *|* [*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.12)") *|* [*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.12)") *|* [*complex*](https://docs.python.org/3/library/functions.html#complex
    "(in Python v3.12)")) – arraylike, value at which to evaluate the PMF'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**p** (*Array* *|* [*ndarray*](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(in NumPy v2.0)") *|* [*bool*](https://numpy.org/doc/stable/reference/arrays.scalars.html#numpy.bool
    "(in NumPy v2.0)") *|* *number* *|* [*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.12)") *|* [*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.12)") *|* [*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.12)") *|* [*complex*](https://docs.python.org/3/library/functions.html#complex
    "(in Python v3.12)")) – arraylike, distribution shape parameter'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**loc** (*Array* *|* [*ndarray*](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(in NumPy v2.0)") *|* [*bool*](https://numpy.org/doc/stable/reference/arrays.scalars.html#numpy.bool
    "(in NumPy v2.0)") *|* *number* *|* [*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.12)") *|* [*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.12)") *|* [*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.12)") *|* [*complex*](https://docs.python.org/3/library/functions.html#complex
    "(in Python v3.12)")) – arraylike, distribution offset'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: array of logpmf values
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Array*'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '`jax.scipy.stats.bernoulli.cdf()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.scipy.stats.bernoulli.pmf()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.scipy.stats.bernoulli.ppf()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
