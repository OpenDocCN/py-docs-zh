["```py\nfrom sqlalchemy import create_engine\n\nengine = create_engine(\"postgresql+psycopg2://scott:tiger@localhost:5432/mydatabase\")\n```", "```py\ndialect+driver://username:password@host:port/database\n```", "```py\npostgresql+pg8000://dbuser:kx%40jj5%2Fg@pghost10/appdb\n```", "```py\n>>> import urllib.parse\n>>> urllib.parse.quote_plus(\"kx@jj5/g\")\n'kx%40jj5%2Fg'\n```", "```py\nfrom sqlalchemy import create_engine\n\nengine = create_engine(\"postgresql+pg8000://dbuser:kx%40jj5%2Fg@pghost10/appdb\")\n```", "```py\nfrom sqlalchemy import URL\n\nurl_object = URL.create(\n    \"postgresql+pg8000\",\n    username=\"dbuser\",\n    password=\"kx@jj5/g\",  # plain (unescaped) text\n    host=\"pghost10\",\n    database=\"appdb\",\n)\n```", "```py\nfrom sqlalchemy import create_engine\n\nengine = create_engine(url_object)\n```", "```py\n# default\nengine = create_engine(\"postgresql://scott:tiger@localhost/mydatabase\")\n\n# psycopg2\nengine = create_engine(\"postgresql+psycopg2://scott:tiger@localhost/mydatabase\")\n\n# pg8000\nengine = create_engine(\"postgresql+pg8000://scott:tiger@localhost/mydatabase\")\n```", "```py\n# default\nengine = create_engine(\"mysql://scott:tiger@localhost/foo\")\n\n# mysqlclient (a maintained fork of MySQL-Python)\nengine = create_engine(\"mysql+mysqldb://scott:tiger@localhost/foo\")\n\n# PyMySQL\nengine = create_engine(\"mysql+pymysql://scott:tiger@localhost/foo\")\n```", "```py\nengine = create_engine(\"oracle://scott:tiger@127.0.0.1:1521/sidname\")\n\nengine = create_engine(\"oracle+cx_oracle://scott:tiger@tnsname\")\n```", "```py\n# pyodbc\nengine = create_engine(\"mssql+pyodbc://scott:tiger@mydsn\")\n\n# pymssql\nengine = create_engine(\"mssql+pymssql://scott:tiger@hostname:port/dbname\")\n```", "```py\n# sqlite://<nohostname>/<path>\n# where <path> is relative:\nengine = create_engine(\"sqlite:///foo.db\")\n```", "```py\n# Unix/Mac - 4 initial slashes in total\nengine = create_engine(\"sqlite:////absolute/path/to/foo.db\")\n\n# Windows\nengine = create_engine(\"sqlite:///C:\\\\path\\\\to\\\\foo.db\")\n\n# Windows alternative using raw string\nengine = create_engine(r\"sqlite:///C:\\path\\to\\foo.db\")\n```", "```py\nengine = create_engine(\"sqlite://\")\n```", "```py\nfunction sqlalchemy.create_engine(url: str | _url.URL, **kwargs: Any) \u2192 Engine\n```", "```py\nengine = create_engine(\"postgresql+psycopg2://scott:tiger@localhost/test\")\n```", "```py\nengine = create_engine(\"mysql+mysqldb://scott:tiger@hostname/dbname\",\n                            pool_recycle=3600, echo=True)\n```", "```py\nfunction sqlalchemy.engine_from_config(configuration: Dict[str, Any], prefix: str = 'sqlalchemy.', **kwargs: Any) \u2192 Engine\n```", "```py\nfunction sqlalchemy.create_mock_engine(url: str | URL, executor: Any, **kw: Any) \u2192 MockConnection\n```", "```py\nfrom sqlalchemy import create_mock_engine\n\ndef dump(sql, *multiparams, **params):\n    print(sql.compile(dialect=engine.dialect))\n\nengine = create_mock_engine('postgresql+psycopg2://', dump)\nmetadata.create_all(engine, checkfirst=False)\n```", "```py\nfunction sqlalchemy.engine.make_url(name_or_url: str | URL) \u2192 URL\n```", "```py\nfunction sqlalchemy.create_pool_from_url(url: str | URL, **kwargs: Any) \u2192 Pool\n```", "```py\nclass sqlalchemy.engine.URL\n```", "```py\nclassmethod create(drivername: str, username: str | None = None, password: str | None = None, host: str | None = None, port: int | None = None, database: str | None = None, query: Mapping[str, Sequence[str] | str] = {}) \u2192 URL\n```", "```py\nattribute database: str | None\n```", "```py\nmethod difference_update_query(names: Iterable[str]) \u2192 URL\n```", "```py\nurl = url.difference_update_query(['foo', 'bar'])\n```", "```py\nurl = url.set(\n    query={\n        key: url.query[key]\n        for key in set(url.query).difference(['foo', 'bar'])\n    }\n)\n```", "```py\nattribute drivername: str\n```", "```py\nmethod get_backend_name() \u2192 str\n```", "```py\nmethod get_dialect(_is_async: bool = False) \u2192 Type[Dialect]\n```", "```py\nmethod get_driver_name() \u2192 str\n```", "```py\nattribute host: str | None\n```", "```py\nattribute normalized_query\n```", "```py\n>>> from sqlalchemy.engine import make_url\n>>> url = make_url(\"postgresql+psycopg2://user:pass@host/dbname?alt_host=host1&alt_host=host2&ssl_cipher=%2Fpath%2Fto%2Fcrt\")\n>>> url.query\nimmutabledict({'alt_host': ('host1', 'host2'), 'ssl_cipher': '/path/to/crt'})\n>>> url.normalized_query\nimmutabledict({'alt_host': ('host1', 'host2'), 'ssl_cipher': ('/path/to/crt',)})\n```", "```py\nattribute password: str | None\n```", "```py\nattribute port: int | None\n```", "```py\nattribute query: immutabledict[str, Tuple[str, ...] | str]\n```", "```py\n >>> from sqlalchemy.engine import make_url\n   >>> url = make_url(\"postgresql+psycopg2://user:pass@host/dbname?alt_host=host1&alt_host=host2&ssl_cipher=%2Fpath%2Fto%2Fcrt\")\n   >>> url.query\n   immutabledict({'alt_host': ('host1', 'host2'), 'ssl_cipher': '/path/to/crt'})\n\nTo create a mutable copy of this mapping, use the ``dict`` constructor::\n\n   mutable_query_opts = dict(url.query)\n```", "```py\nmethod render_as_string(hide_password: bool = True) \u2192 str\n```", "```py\nmethod set(drivername: str | None = None, username: str | None = None, password: str | None = None, host: str | None = None, port: int | None = None, database: str | None = None, query: Mapping[str, Sequence[str] | str] | None = None) \u2192 URL\n```", "```py\nmethod translate_connect_args(names: List[str] | None = None, **kw: Any) \u2192 Dict[str, Any]\n```", "```py\nmethod update_query_dict(query_parameters: Mapping[str, str | List[str]], append: bool = False) \u2192 URL\n```", "```py\n>>> from sqlalchemy.engine import make_url\n>>> url = make_url(\"postgresql+psycopg2://user:pass@host/dbname\")\n>>> url = url.update_query_dict({\"alt_host\": [\"host1\", \"host2\"], \"ssl_cipher\": \"/path/to/crt\"})\n>>> str(url)\n'postgresql+psycopg2://user:pass@host/dbname?alt_host=host1&alt_host=host2&ssl_cipher=%2Fpath%2Fto%2Fcrt'\n```", "```py\nmethod update_query_pairs(key_value_pairs: Iterable[Tuple[str, str | List[str]]], append: bool = False) \u2192 URL\n```", "```py\n>>> from sqlalchemy.engine import make_url\n>>> url = make_url(\"postgresql+psycopg2://user:pass@host/dbname\")\n>>> url = url.update_query_pairs([(\"alt_host\", \"host1\"), (\"alt_host\", \"host2\"), (\"ssl_cipher\", \"/path/to/crt\")])\n>>> str(url)\n'postgresql+psycopg2://user:pass@host/dbname?alt_host=host1&alt_host=host2&ssl_cipher=%2Fpath%2Fto%2Fcrt'\n```", "```py\nmethod update_query_string(query_string: str, append: bool = False) \u2192 URL\n```", "```py\n>>> from sqlalchemy.engine import make_url\n>>> url = make_url(\"postgresql+psycopg2://user:pass@host/dbname\")\n>>> url = url.update_query_string(\"alt_host=host1&alt_host=host2&ssl_cipher=%2Fpath%2Fto%2Fcrt\")\n>>> str(url)\n'postgresql+psycopg2://user:pass@host/dbname?alt_host=host1&alt_host=host2&ssl_cipher=%2Fpath%2Fto%2Fcrt'\n```", "```py\nattribute username: str | None\n```", "```py\nengine = create_engine(\"mysql+pymysql://user:pass@host/test?charset=utf8mb4\")\n```", "```py\n>>> from sqlalchemy import create_engine\n>>> engine = create_engine(\n...     \"mysql+pymysql://some_user:some_pass@some_host/test?charset=utf8mb4\"\n... )\n>>> args, kwargs = engine.dialect.create_connect_args(engine.url)\n>>> args, kwargs\n([], {'host': 'some_host', 'database': 'test', 'user': 'some_user', 'password': 'some_pass', 'charset': 'utf8mb4', 'client_flag': 2})\n```", "```py\nengine = create_engine(\n    \"postgresql+psycopg2://user:pass@hostname/dbname\",\n    connect_args={\"connection_factory\": MyConnectionFactory},\n)\n```", "```py\nengine = create_engine(\n    \"mssql+pyodbc://user:pass@sqlsrvr?driver=ODBC+Driver+13+for+SQL+Server\",\n    connect_args={\"timeout\": 30},\n)\n```", "```py\nfrom sqlalchemy import event\n\nengine = create_engine(\"postgresql+psycopg2://user:pass@hostname/dbname\")\n\n@event.listens_for(engine, \"do_connect\")\ndef receive_do_connect(dialect, conn_rec, cargs, cparams):\n    cparams[\"connection_factory\"] = MyConnectionFactory\n```", "```py\nfrom sqlalchemy import event\n\nengine = create_engine(\"postgresql+psycopg2://user@hostname/dbname\")\n\n@event.listens_for(engine, \"do_connect\")\ndef provide_token(dialect, conn_rec, cargs, cparams):\n    cparams[\"token\"] = get_authentication_token()\n```", "```py\nfrom sqlalchemy import event\n\nengine = create_engine(\"postgresql+psycopg2://user:pass@hostname/dbname\")\n\n@event.listens_for(engine, \"connect\")\ndef connect(dbapi_connection, connection_record):\n    cursor_obj = dbapi_connection.cursor()\n    cursor_obj.execute(\"SET some session variables\")\n    cursor_obj.close()\n```", "```py\nfrom sqlalchemy import event\n\nengine = create_engine(\"postgresql+psycopg2://user:pass@hostname/dbname\")\n\n@event.listens_for(engine, \"do_connect\")\ndef receive_do_connect(dialect, conn_rec, cargs, cparams):\n    # return the new DBAPI connection with whatever we'd like to\n    # do\n    return psycopg2.connect(*cargs, **cparams)\n```", "```py\nimport logging\n\nlogging.basicConfig()\nlogging.getLogger(\"sqlalchemy.engine\").setLevel(logging.INFO)\n```", "```py\n>>> from sqlalchemy import create_engine, text\n>>> e = create_engine(\"sqlite://\", echo=True, echo_pool=\"debug\")\n>>> with e.connect() as conn:\n...     print(conn.scalar(text(\"select 'hi'\")))\n2020-10-24 12:54:57,701 DEBUG sqlalchemy.pool.impl.SingletonThreadPool Created new connection <sqlite3.Connection object at 0x7f287819ac60>\n2020-10-24 12:54:57,701 DEBUG sqlalchemy.pool.impl.SingletonThreadPool Connection <sqlite3.Connection object at 0x7f287819ac60> checked out from pool\n2020-10-24 12:54:57,702 INFO sqlalchemy.engine.Engine select 'hi'\n2020-10-24 12:54:57,702 INFO sqlalchemy.engine.Engine ()\nhi\n2020-10-24 12:54:57,703 DEBUG sqlalchemy.pool.impl.SingletonThreadPool Connection <sqlite3.Connection object at 0x7f287819ac60> being returned to pool\n2020-10-24 12:54:57,704 DEBUG sqlalchemy.pool.impl.SingletonThreadPool Connection <sqlite3.Connection object at 0x7f287819ac60> rollback-on-return\n```", "```py\nimport logging\n\nlogging.basicConfig()\nlogging.getLogger(\"sqlalchemy.engine\").setLevel(logging.INFO)\nlogging.getLogger(\"sqlalchemy.pool\").setLevel(logging.DEBUG)\n```", "```py\n>>> import logging\n>>> from sqlalchemy import create_engine\n>>> from sqlalchemy import text\n>>> logging.basicConfig()\n>>> logging.getLogger(\"sqlalchemy.engine.Engine.myengine\").setLevel(logging.INFO)\n>>> e = create_engine(\"sqlite://\", logging_name=\"myengine\")\n>>> with e.connect() as conn:\n...     conn.execute(text(\"select 'hi'\"))\n2020-10-24 12:47:04,291 INFO sqlalchemy.engine.Engine.myengine select 'hi'\n2020-10-24 12:47:04,292 INFO sqlalchemy.engine.Engine.myengine ()\n```", "```py\nfrom sqlalchemy import create_engine, text\n\ne1 = create_engine(\"sqlite://\", echo=True, logging_name=\"myname\")\nwith e1.begin() as conn:\n    conn.execute(text(\"SELECT 1\"))\n\ne2 = create_engine(\"sqlite://\", echo=True)\nwith e2.begin() as conn:\n    conn.execute(text(\"SELECT 2\"))\n\nwith e1.begin() as conn:\n    conn.execute(text(\"SELECT 3\"))\n```", "```py\n>>> from sqlalchemy import create_engine\n>>> e = create_engine(\"sqlite://\", echo=\"debug\")\n>>> with e.connect().execution_options(logging_token=\"track1\") as conn:\n...     conn.execute(text(\"select 1\")).all()\n2021-02-03 11:48:45,754 INFO sqlalchemy.engine.Engine [track1] select 1\n2021-02-03 11:48:45,754 INFO sqlalchemy.engine.Engine [track1] [raw sql] ()\n2021-02-03 11:48:45,754 DEBUG sqlalchemy.engine.Engine [track1] Col ('1',)\n2021-02-03 11:48:45,755 DEBUG sqlalchemy.engine.Engine [track1] Row (1,)\n```", "```py\n>>> from sqlalchemy import create_engine\n>>> e = create_engine(\"sqlite://\", echo=\"debug\")\n>>> e1 = e.execution_options(logging_token=\"track1\")\n>>> e2 = e.execution_options(logging_token=\"track2\")\n>>> with e1.connect() as conn:\n...     conn.execute(text(\"select 1\")).all()\n2021-02-03 11:51:08,960 INFO sqlalchemy.engine.Engine [track1] select 1\n2021-02-03 11:51:08,960 INFO sqlalchemy.engine.Engine [track1] [raw sql] ()\n2021-02-03 11:51:08,960 DEBUG sqlalchemy.engine.Engine [track1] Col ('1',)\n2021-02-03 11:51:08,961 DEBUG sqlalchemy.engine.Engine [track1] Row (1,)\n\n>>> with e2.connect() as conn:\n...     conn.execute(text(\"select 2\")).all()\n2021-02-03 11:52:05,518 INFO sqlalchemy.engine.Engine [track2] Select 1\n2021-02-03 11:52:05,519 INFO sqlalchemy.engine.Engine [track2] [raw sql] ()\n2021-02-03 11:52:05,520 DEBUG sqlalchemy.engine.Engine [track2] Col ('1',)\n2021-02-03 11:52:05,520 DEBUG sqlalchemy.engine.Engine [track2] Row (1,)\n```", "```py\n>>> e = create_engine(\"sqlite://\", echo=True, hide_parameters=True)\n>>> with e.connect() as conn:\n...     conn.execute(text(\"select :some_private_name\"), {\"some_private_name\": \"pii\"})\n2020-10-24 12:48:32,808 INFO sqlalchemy.engine.Engine select ?\n2020-10-24 12:48:32,808 INFO sqlalchemy.engine.Engine [SQL parameters hidden due to hide_parameters=True]\n```", "```py\ndialect+driver://username:password@host:port/database\n```", "```py\npostgresql+pg8000://dbuser:kx%40jj5%2Fg@pghost10/appdb\n```", "```py\n>>> import urllib.parse\n>>> urllib.parse.quote_plus(\"kx@jj5/g\")\n'kx%40jj5%2Fg'\n```", "```py\nfrom sqlalchemy import create_engine\n\nengine = create_engine(\"postgresql+pg8000://dbuser:kx%40jj5%2Fg@pghost10/appdb\")\n```", "```py\nfrom sqlalchemy import URL\n\nurl_object = URL.create(\n    \"postgresql+pg8000\",\n    username=\"dbuser\",\n    password=\"kx@jj5/g\",  # plain (unescaped) text\n    host=\"pghost10\",\n    database=\"appdb\",\n)\n```", "```py\nfrom sqlalchemy import create_engine\n\nengine = create_engine(url_object)\n```", "```py\n# default\nengine = create_engine(\"postgresql://scott:tiger@localhost/mydatabase\")\n\n# psycopg2\nengine = create_engine(\"postgresql+psycopg2://scott:tiger@localhost/mydatabase\")\n\n# pg8000\nengine = create_engine(\"postgresql+pg8000://scott:tiger@localhost/mydatabase\")\n```", "```py\n# default\nengine = create_engine(\"mysql://scott:tiger@localhost/foo\")\n\n# mysqlclient (a maintained fork of MySQL-Python)\nengine = create_engine(\"mysql+mysqldb://scott:tiger@localhost/foo\")\n\n# PyMySQL\nengine = create_engine(\"mysql+pymysql://scott:tiger@localhost/foo\")\n```", "```py\nengine = create_engine(\"oracle://scott:tiger@127.0.0.1:1521/sidname\")\n\nengine = create_engine(\"oracle+cx_oracle://scott:tiger@tnsname\")\n```", "```py\n# pyodbc\nengine = create_engine(\"mssql+pyodbc://scott:tiger@mydsn\")\n\n# pymssql\nengine = create_engine(\"mssql+pymssql://scott:tiger@hostname:port/dbname\")\n```", "```py\n# sqlite://<nohostname>/<path>\n# where <path> is relative:\nengine = create_engine(\"sqlite:///foo.db\")\n```", "```py\n# Unix/Mac - 4 initial slashes in total\nengine = create_engine(\"sqlite:////absolute/path/to/foo.db\")\n\n# Windows\nengine = create_engine(\"sqlite:///C:\\\\path\\\\to\\\\foo.db\")\n\n# Windows alternative using raw string\nengine = create_engine(r\"sqlite:///C:\\path\\to\\foo.db\")\n```", "```py\nengine = create_engine(\"sqlite://\")\n```", "```py\npostgresql+pg8000://dbuser:kx%40jj5%2Fg@pghost10/appdb\n```", "```py\n>>> import urllib.parse\n>>> urllib.parse.quote_plus(\"kx@jj5/g\")\n'kx%40jj5%2Fg'\n```", "```py\nfrom sqlalchemy import create_engine\n\nengine = create_engine(\"postgresql+pg8000://dbuser:kx%40jj5%2Fg@pghost10/appdb\")\n```", "```py\nfrom sqlalchemy import URL\n\nurl_object = URL.create(\n    \"postgresql+pg8000\",\n    username=\"dbuser\",\n    password=\"kx@jj5/g\",  # plain (unescaped) text\n    host=\"pghost10\",\n    database=\"appdb\",\n)\n```", "```py\nfrom sqlalchemy import create_engine\n\nengine = create_engine(url_object)\n```", "```py\n# default\nengine = create_engine(\"postgresql://scott:tiger@localhost/mydatabase\")\n\n# psycopg2\nengine = create_engine(\"postgresql+psycopg2://scott:tiger@localhost/mydatabase\")\n\n# pg8000\nengine = create_engine(\"postgresql+pg8000://scott:tiger@localhost/mydatabase\")\n```", "```py\n# default\nengine = create_engine(\"mysql://scott:tiger@localhost/foo\")\n\n# mysqlclient (a maintained fork of MySQL-Python)\nengine = create_engine(\"mysql+mysqldb://scott:tiger@localhost/foo\")\n\n# PyMySQL\nengine = create_engine(\"mysql+pymysql://scott:tiger@localhost/foo\")\n```", "```py\nengine = create_engine(\"oracle://scott:tiger@127.0.0.1:1521/sidname\")\n\nengine = create_engine(\"oracle+cx_oracle://scott:tiger@tnsname\")\n```", "```py\n# pyodbc\nengine = create_engine(\"mssql+pyodbc://scott:tiger@mydsn\")\n\n# pymssql\nengine = create_engine(\"mssql+pymssql://scott:tiger@hostname:port/dbname\")\n```", "```py\n# sqlite://<nohostname>/<path>\n# where <path> is relative:\nengine = create_engine(\"sqlite:///foo.db\")\n```", "```py\n# Unix/Mac - 4 initial slashes in total\nengine = create_engine(\"sqlite:////absolute/path/to/foo.db\")\n\n# Windows\nengine = create_engine(\"sqlite:///C:\\\\path\\\\to\\\\foo.db\")\n\n# Windows alternative using raw string\nengine = create_engine(r\"sqlite:///C:\\path\\to\\foo.db\")\n```", "```py\nengine = create_engine(\"sqlite://\")\n```", "```py\n# default\nengine = create_engine(\"postgresql://scott:tiger@localhost/mydatabase\")\n\n# psycopg2\nengine = create_engine(\"postgresql+psycopg2://scott:tiger@localhost/mydatabase\")\n\n# pg8000\nengine = create_engine(\"postgresql+pg8000://scott:tiger@localhost/mydatabase\")\n```", "```py\n# default\nengine = create_engine(\"mysql://scott:tiger@localhost/foo\")\n\n# mysqlclient (a maintained fork of MySQL-Python)\nengine = create_engine(\"mysql+mysqldb://scott:tiger@localhost/foo\")\n\n# PyMySQL\nengine = create_engine(\"mysql+pymysql://scott:tiger@localhost/foo\")\n```", "```py\nengine = create_engine(\"oracle://scott:tiger@127.0.0.1:1521/sidname\")\n\nengine = create_engine(\"oracle+cx_oracle://scott:tiger@tnsname\")\n```", "```py\n# pyodbc\nengine = create_engine(\"mssql+pyodbc://scott:tiger@mydsn\")\n\n# pymssql\nengine = create_engine(\"mssql+pymssql://scott:tiger@hostname:port/dbname\")\n```", "```py\n# sqlite://<nohostname>/<path>\n# where <path> is relative:\nengine = create_engine(\"sqlite:///foo.db\")\n```", "```py\n# Unix/Mac - 4 initial slashes in total\nengine = create_engine(\"sqlite:////absolute/path/to/foo.db\")\n\n# Windows\nengine = create_engine(\"sqlite:///C:\\\\path\\\\to\\\\foo.db\")\n\n# Windows alternative using raw string\nengine = create_engine(r\"sqlite:///C:\\path\\to\\foo.db\")\n```", "```py\nengine = create_engine(\"sqlite://\")\n```", "```py\nfunction sqlalchemy.create_engine(url: str | _url.URL, **kwargs: Any) \u2192 Engine\n```", "```py\nengine = create_engine(\"postgresql+psycopg2://scott:tiger@localhost/test\")\n```", "```py\nengine = create_engine(\"mysql+mysqldb://scott:tiger@hostname/dbname\",\n                            pool_recycle=3600, echo=True)\n```", "```py\nfunction sqlalchemy.engine_from_config(configuration: Dict[str, Any], prefix: str = 'sqlalchemy.', **kwargs: Any) \u2192 Engine\n```", "```py\nfunction sqlalchemy.create_mock_engine(url: str | URL, executor: Any, **kw: Any) \u2192 MockConnection\n```", "```py\nfrom sqlalchemy import create_mock_engine\n\ndef dump(sql, *multiparams, **params):\n    print(sql.compile(dialect=engine.dialect))\n\nengine = create_mock_engine('postgresql+psycopg2://', dump)\nmetadata.create_all(engine, checkfirst=False)\n```", "```py\nfunction sqlalchemy.engine.make_url(name_or_url: str | URL) \u2192 URL\n```", "```py\nfunction sqlalchemy.create_pool_from_url(url: str | URL, **kwargs: Any) \u2192 Pool\n```", "```py\nclass sqlalchemy.engine.URL\n```", "```py\nclassmethod create(drivername: str, username: str | None = None, password: str | None = None, host: str | None = None, port: int | None = None, database: str | None = None, query: Mapping[str, Sequence[str] | str] = {}) \u2192 URL\n```", "```py\nattribute database: str | None\n```", "```py\nmethod difference_update_query(names: Iterable[str]) \u2192 URL\n```", "```py\nurl = url.difference_update_query(['foo', 'bar'])\n```", "```py\nurl = url.set(\n    query={\n        key: url.query[key]\n        for key in set(url.query).difference(['foo', 'bar'])\n    }\n)\n```", "```py\nattribute drivername: str\n```", "```py\nmethod get_backend_name() \u2192 str\n```", "```py\nmethod get_dialect(_is_async: bool = False) \u2192 Type[Dialect]\n```", "```py\nmethod get_driver_name() \u2192 str\n```", "```py\nattribute host: str | None\n```", "```py\nattribute normalized_query\n```", "```py\n>>> from sqlalchemy.engine import make_url\n>>> url = make_url(\"postgresql+psycopg2://user:pass@host/dbname?alt_host=host1&alt_host=host2&ssl_cipher=%2Fpath%2Fto%2Fcrt\")\n>>> url.query\nimmutabledict({'alt_host': ('host1', 'host2'), 'ssl_cipher': '/path/to/crt'})\n>>> url.normalized_query\nimmutabledict({'alt_host': ('host1', 'host2'), 'ssl_cipher': ('/path/to/crt',)})\n```", "```py\nattribute password: str | None\n```", "```py\nattribute port: int | None\n```", "```py\nattribute query: immutabledict[str, Tuple[str, ...] | str]\n```", "```py\n >>> from sqlalchemy.engine import make_url\n   >>> url = make_url(\"postgresql+psycopg2://user:pass@host/dbname?alt_host=host1&alt_host=host2&ssl_cipher=%2Fpath%2Fto%2Fcrt\")\n   >>> url.query\n   immutabledict({'alt_host': ('host1', 'host2'), 'ssl_cipher': '/path/to/crt'})\n\nTo create a mutable copy of this mapping, use the ``dict`` constructor::\n\n   mutable_query_opts = dict(url.query)\n```", "```py\nmethod render_as_string(hide_password: bool = True) \u2192 str\n```", "```py\nmethod set(drivername: str | None = None, username: str | None = None, password: str | None = None, host: str | None = None, port: int | None = None, database: str | None = None, query: Mapping[str, Sequence[str] | str] | None = None) \u2192 URL\n```", "```py\nmethod translate_connect_args(names: List[str] | None = None, **kw: Any) \u2192 Dict[str, Any]\n```", "```py\nmethod update_query_dict(query_parameters: Mapping[str, str | List[str]], append: bool = False) \u2192 URL\n```", "```py\n>>> from sqlalchemy.engine import make_url\n>>> url = make_url(\"postgresql+psycopg2://user:pass@host/dbname\")\n>>> url = url.update_query_dict({\"alt_host\": [\"host1\", \"host2\"], \"ssl_cipher\": \"/path/to/crt\"})\n>>> str(url)\n'postgresql+psycopg2://user:pass@host/dbname?alt_host=host1&alt_host=host2&ssl_cipher=%2Fpath%2Fto%2Fcrt'\n```", "```py\nmethod update_query_pairs(key_value_pairs: Iterable[Tuple[str, str | List[str]]], append: bool = False) \u2192 URL\n```", "```py\n>>> from sqlalchemy.engine import make_url\n>>> url = make_url(\"postgresql+psycopg2://user:pass@host/dbname\")\n>>> url = url.update_query_pairs([(\"alt_host\", \"host1\"), (\"alt_host\", \"host2\"), (\"ssl_cipher\", \"/path/to/crt\")])\n>>> str(url)\n'postgresql+psycopg2://user:pass@host/dbname?alt_host=host1&alt_host=host2&ssl_cipher=%2Fpath%2Fto%2Fcrt'\n```", "```py\nmethod update_query_string(query_string: str, append: bool = False) \u2192 URL\n```", "```py\n>>> from sqlalchemy.engine import make_url\n>>> url = make_url(\"postgresql+psycopg2://user:pass@host/dbname\")\n>>> url = url.update_query_string(\"alt_host=host1&alt_host=host2&ssl_cipher=%2Fpath%2Fto%2Fcrt\")\n>>> str(url)\n'postgresql+psycopg2://user:pass@host/dbname?alt_host=host1&alt_host=host2&ssl_cipher=%2Fpath%2Fto%2Fcrt'\n```", "```py\nattribute username: str | None\n```", "```py\nengine = create_engine(\"mysql+pymysql://user:pass@host/test?charset=utf8mb4\")\n```", "```py\n>>> from sqlalchemy import create_engine\n>>> engine = create_engine(\n...     \"mysql+pymysql://some_user:some_pass@some_host/test?charset=utf8mb4\"\n... )\n>>> args, kwargs = engine.dialect.create_connect_args(engine.url)\n>>> args, kwargs\n([], {'host': 'some_host', 'database': 'test', 'user': 'some_user', 'password': 'some_pass', 'charset': 'utf8mb4', 'client_flag': 2})\n```", "```py\nengine = create_engine(\n    \"postgresql+psycopg2://user:pass@hostname/dbname\",\n    connect_args={\"connection_factory\": MyConnectionFactory},\n)\n```", "```py\nengine = create_engine(\n    \"mssql+pyodbc://user:pass@sqlsrvr?driver=ODBC+Driver+13+for+SQL+Server\",\n    connect_args={\"timeout\": 30},\n)\n```", "```py\nfrom sqlalchemy import event\n\nengine = create_engine(\"postgresql+psycopg2://user:pass@hostname/dbname\")\n\n@event.listens_for(engine, \"do_connect\")\ndef receive_do_connect(dialect, conn_rec, cargs, cparams):\n    cparams[\"connection_factory\"] = MyConnectionFactory\n```", "```py\nfrom sqlalchemy import event\n\nengine = create_engine(\"postgresql+psycopg2://user@hostname/dbname\")\n\n@event.listens_for(engine, \"do_connect\")\ndef provide_token(dialect, conn_rec, cargs, cparams):\n    cparams[\"token\"] = get_authentication_token()\n```", "```py\nfrom sqlalchemy import event\n\nengine = create_engine(\"postgresql+psycopg2://user:pass@hostname/dbname\")\n\n@event.listens_for(engine, \"connect\")\ndef connect(dbapi_connection, connection_record):\n    cursor_obj = dbapi_connection.cursor()\n    cursor_obj.execute(\"SET some session variables\")\n    cursor_obj.close()\n```", "```py\nfrom sqlalchemy import event\n\nengine = create_engine(\"postgresql+psycopg2://user:pass@hostname/dbname\")\n\n@event.listens_for(engine, \"do_connect\")\ndef receive_do_connect(dialect, conn_rec, cargs, cparams):\n    # return the new DBAPI connection with whatever we'd like to\n    # do\n    return psycopg2.connect(*cargs, **cparams)\n```", "```py\nengine = create_engine(\"mysql+pymysql://user:pass@host/test?charset=utf8mb4\")\n```", "```py\n>>> from sqlalchemy import create_engine\n>>> engine = create_engine(\n...     \"mysql+pymysql://some_user:some_pass@some_host/test?charset=utf8mb4\"\n... )\n>>> args, kwargs = engine.dialect.create_connect_args(engine.url)\n>>> args, kwargs\n([], {'host': 'some_host', 'database': 'test', 'user': 'some_user', 'password': 'some_pass', 'charset': 'utf8mb4', 'client_flag': 2})\n```", "```py\nengine = create_engine(\n    \"postgresql+psycopg2://user:pass@hostname/dbname\",\n    connect_args={\"connection_factory\": MyConnectionFactory},\n)\n```", "```py\nengine = create_engine(\n    \"mssql+pyodbc://user:pass@sqlsrvr?driver=ODBC+Driver+13+for+SQL+Server\",\n    connect_args={\"timeout\": 30},\n)\n```", "```py\nengine = create_engine(\"mysql+pymysql://user:pass@host/test?charset=utf8mb4\")\n```", "```py\n>>> from sqlalchemy import create_engine\n>>> engine = create_engine(\n...     \"mysql+pymysql://some_user:some_pass@some_host/test?charset=utf8mb4\"\n... )\n>>> args, kwargs = engine.dialect.create_connect_args(engine.url)\n>>> args, kwargs\n([], {'host': 'some_host', 'database': 'test', 'user': 'some_user', 'password': 'some_pass', 'charset': 'utf8mb4', 'client_flag': 2})\n```", "```py\nengine = create_engine(\n    \"postgresql+psycopg2://user:pass@hostname/dbname\",\n    connect_args={\"connection_factory\": MyConnectionFactory},\n)\n```", "```py\nengine = create_engine(\n    \"mssql+pyodbc://user:pass@sqlsrvr?driver=ODBC+Driver+13+for+SQL+Server\",\n    connect_args={\"timeout\": 30},\n)\n```", "```py\nfrom sqlalchemy import event\n\nengine = create_engine(\"postgresql+psycopg2://user:pass@hostname/dbname\")\n\n@event.listens_for(engine, \"do_connect\")\ndef receive_do_connect(dialect, conn_rec, cargs, cparams):\n    cparams[\"connection_factory\"] = MyConnectionFactory\n```", "```py\nfrom sqlalchemy import event\n\nengine = create_engine(\"postgresql+psycopg2://user@hostname/dbname\")\n\n@event.listens_for(engine, \"do_connect\")\ndef provide_token(dialect, conn_rec, cargs, cparams):\n    cparams[\"token\"] = get_authentication_token()\n```", "```py\nfrom sqlalchemy import event\n\nengine = create_engine(\"postgresql+psycopg2://user@hostname/dbname\")\n\n@event.listens_for(engine, \"do_connect\")\ndef provide_token(dialect, conn_rec, cargs, cparams):\n    cparams[\"token\"] = get_authentication_token()\n```", "```py\nfrom sqlalchemy import event\n\nengine = create_engine(\"postgresql+psycopg2://user:pass@hostname/dbname\")\n\n@event.listens_for(engine, \"connect\")\ndef connect(dbapi_connection, connection_record):\n    cursor_obj = dbapi_connection.cursor()\n    cursor_obj.execute(\"SET some session variables\")\n    cursor_obj.close()\n```", "```py\nfrom sqlalchemy import event\n\nengine = create_engine(\"postgresql+psycopg2://user:pass@hostname/dbname\")\n\n@event.listens_for(engine, \"do_connect\")\ndef receive_do_connect(dialect, conn_rec, cargs, cparams):\n    # return the new DBAPI connection with whatever we'd like to\n    # do\n    return psycopg2.connect(*cargs, **cparams)\n```", "```py\nimport logging\n\nlogging.basicConfig()\nlogging.getLogger(\"sqlalchemy.engine\").setLevel(logging.INFO)\n```", "```py\n>>> from sqlalchemy import create_engine, text\n>>> e = create_engine(\"sqlite://\", echo=True, echo_pool=\"debug\")\n>>> with e.connect() as conn:\n...     print(conn.scalar(text(\"select 'hi'\")))\n2020-10-24 12:54:57,701 DEBUG sqlalchemy.pool.impl.SingletonThreadPool Created new connection <sqlite3.Connection object at 0x7f287819ac60>\n2020-10-24 12:54:57,701 DEBUG sqlalchemy.pool.impl.SingletonThreadPool Connection <sqlite3.Connection object at 0x7f287819ac60> checked out from pool\n2020-10-24 12:54:57,702 INFO sqlalchemy.engine.Engine select 'hi'\n2020-10-24 12:54:57,702 INFO sqlalchemy.engine.Engine ()\nhi\n2020-10-24 12:54:57,703 DEBUG sqlalchemy.pool.impl.SingletonThreadPool Connection <sqlite3.Connection object at 0x7f287819ac60> being returned to pool\n2020-10-24 12:54:57,704 DEBUG sqlalchemy.pool.impl.SingletonThreadPool Connection <sqlite3.Connection object at 0x7f287819ac60> rollback-on-return\n```", "```py\nimport logging\n\nlogging.basicConfig()\nlogging.getLogger(\"sqlalchemy.engine\").setLevel(logging.INFO)\nlogging.getLogger(\"sqlalchemy.pool\").setLevel(logging.DEBUG)\n```", "```py\n>>> import logging\n>>> from sqlalchemy import create_engine\n>>> from sqlalchemy import text\n>>> logging.basicConfig()\n>>> logging.getLogger(\"sqlalchemy.engine.Engine.myengine\").setLevel(logging.INFO)\n>>> e = create_engine(\"sqlite://\", logging_name=\"myengine\")\n>>> with e.connect() as conn:\n...     conn.execute(text(\"select 'hi'\"))\n2020-10-24 12:47:04,291 INFO sqlalchemy.engine.Engine.myengine select 'hi'\n2020-10-24 12:47:04,292 INFO sqlalchemy.engine.Engine.myengine ()\n```", "```py\nfrom sqlalchemy import create_engine, text\n\ne1 = create_engine(\"sqlite://\", echo=True, logging_name=\"myname\")\nwith e1.begin() as conn:\n    conn.execute(text(\"SELECT 1\"))\n\ne2 = create_engine(\"sqlite://\", echo=True)\nwith e2.begin() as conn:\n    conn.execute(text(\"SELECT 2\"))\n\nwith e1.begin() as conn:\n    conn.execute(text(\"SELECT 3\"))\n```", "```py\n>>> from sqlalchemy import create_engine\n>>> e = create_engine(\"sqlite://\", echo=\"debug\")\n>>> with e.connect().execution_options(logging_token=\"track1\") as conn:\n...     conn.execute(text(\"select 1\")).all()\n2021-02-03 11:48:45,754 INFO sqlalchemy.engine.Engine [track1] select 1\n2021-02-03 11:48:45,754 INFO sqlalchemy.engine.Engine [track1] [raw sql] ()\n2021-02-03 11:48:45,754 DEBUG sqlalchemy.engine.Engine [track1] Col ('1',)\n2021-02-03 11:48:45,755 DEBUG sqlalchemy.engine.Engine [track1] Row (1,)\n```", "```py\n>>> from sqlalchemy import create_engine\n>>> e = create_engine(\"sqlite://\", echo=\"debug\")\n>>> e1 = e.execution_options(logging_token=\"track1\")\n>>> e2 = e.execution_options(logging_token=\"track2\")\n>>> with e1.connect() as conn:\n...     conn.execute(text(\"select 1\")).all()\n2021-02-03 11:51:08,960 INFO sqlalchemy.engine.Engine [track1] select 1\n2021-02-03 11:51:08,960 INFO sqlalchemy.engine.Engine [track1] [raw sql] ()\n2021-02-03 11:51:08,960 DEBUG sqlalchemy.engine.Engine [track1] Col ('1',)\n2021-02-03 11:51:08,961 DEBUG sqlalchemy.engine.Engine [track1] Row (1,)\n\n>>> with e2.connect() as conn:\n...     conn.execute(text(\"select 2\")).all()\n2021-02-03 11:52:05,518 INFO sqlalchemy.engine.Engine [track2] Select 1\n2021-02-03 11:52:05,519 INFO sqlalchemy.engine.Engine [track2] [raw sql] ()\n2021-02-03 11:52:05,520 DEBUG sqlalchemy.engine.Engine [track2] Col ('1',)\n2021-02-03 11:52:05,520 DEBUG sqlalchemy.engine.Engine [track2] Row (1,)\n```", "```py\n>>> e = create_engine(\"sqlite://\", echo=True, hide_parameters=True)\n>>> with e.connect() as conn:\n...     conn.execute(text(\"select :some_private_name\"), {\"some_private_name\": \"pii\"})\n2020-10-24 12:48:32,808 INFO sqlalchemy.engine.Engine select ?\n2020-10-24 12:48:32,808 INFO sqlalchemy.engine.Engine [SQL parameters hidden due to hide_parameters=True]\n```", "```py\n>>> from sqlalchemy import create_engine, text\n>>> e = create_engine(\"sqlite://\", echo=True, echo_pool=\"debug\")\n>>> with e.connect() as conn:\n...     print(conn.scalar(text(\"select 'hi'\")))\n2020-10-24 12:54:57,701 DEBUG sqlalchemy.pool.impl.SingletonThreadPool Created new connection <sqlite3.Connection object at 0x7f287819ac60>\n2020-10-24 12:54:57,701 DEBUG sqlalchemy.pool.impl.SingletonThreadPool Connection <sqlite3.Connection object at 0x7f287819ac60> checked out from pool\n2020-10-24 12:54:57,702 INFO sqlalchemy.engine.Engine select 'hi'\n2020-10-24 12:54:57,702 INFO sqlalchemy.engine.Engine ()\nhi\n2020-10-24 12:54:57,703 DEBUG sqlalchemy.pool.impl.SingletonThreadPool Connection <sqlite3.Connection object at 0x7f287819ac60> being returned to pool\n2020-10-24 12:54:57,704 DEBUG sqlalchemy.pool.impl.SingletonThreadPool Connection <sqlite3.Connection object at 0x7f287819ac60> rollback-on-return\n```", "```py\nimport logging\n\nlogging.basicConfig()\nlogging.getLogger(\"sqlalchemy.engine\").setLevel(logging.INFO)\nlogging.getLogger(\"sqlalchemy.pool\").setLevel(logging.DEBUG)\n```", "```py\n>>> import logging\n>>> from sqlalchemy import create_engine\n>>> from sqlalchemy import text\n>>> logging.basicConfig()\n>>> logging.getLogger(\"sqlalchemy.engine.Engine.myengine\").setLevel(logging.INFO)\n>>> e = create_engine(\"sqlite://\", logging_name=\"myengine\")\n>>> with e.connect() as conn:\n...     conn.execute(text(\"select 'hi'\"))\n2020-10-24 12:47:04,291 INFO sqlalchemy.engine.Engine.myengine select 'hi'\n2020-10-24 12:47:04,292 INFO sqlalchemy.engine.Engine.myengine ()\n```", "```py\nfrom sqlalchemy import create_engine, text\n\ne1 = create_engine(\"sqlite://\", echo=True, logging_name=\"myname\")\nwith e1.begin() as conn:\n    conn.execute(text(\"SELECT 1\"))\n\ne2 = create_engine(\"sqlite://\", echo=True)\nwith e2.begin() as conn:\n    conn.execute(text(\"SELECT 2\"))\n\nwith e1.begin() as conn:\n    conn.execute(text(\"SELECT 3\"))\n```", "```py\n>>> from sqlalchemy import create_engine\n>>> e = create_engine(\"sqlite://\", echo=\"debug\")\n>>> with e.connect().execution_options(logging_token=\"track1\") as conn:\n...     conn.execute(text(\"select 1\")).all()\n2021-02-03 11:48:45,754 INFO sqlalchemy.engine.Engine [track1] select 1\n2021-02-03 11:48:45,754 INFO sqlalchemy.engine.Engine [track1] [raw sql] ()\n2021-02-03 11:48:45,754 DEBUG sqlalchemy.engine.Engine [track1] Col ('1',)\n2021-02-03 11:48:45,755 DEBUG sqlalchemy.engine.Engine [track1] Row (1,)\n```", "```py\n>>> from sqlalchemy import create_engine\n>>> e = create_engine(\"sqlite://\", echo=\"debug\")\n>>> e1 = e.execution_options(logging_token=\"track1\")\n>>> e2 = e.execution_options(logging_token=\"track2\")\n>>> with e1.connect() as conn:\n...     conn.execute(text(\"select 1\")).all()\n2021-02-03 11:51:08,960 INFO sqlalchemy.engine.Engine [track1] select 1\n2021-02-03 11:51:08,960 INFO sqlalchemy.engine.Engine [track1] [raw sql] ()\n2021-02-03 11:51:08,960 DEBUG sqlalchemy.engine.Engine [track1] Col ('1',)\n2021-02-03 11:51:08,961 DEBUG sqlalchemy.engine.Engine [track1] Row (1,)\n\n>>> with e2.connect() as conn:\n...     conn.execute(text(\"select 2\")).all()\n2021-02-03 11:52:05,518 INFO sqlalchemy.engine.Engine [track2] Select 1\n2021-02-03 11:52:05,519 INFO sqlalchemy.engine.Engine [track2] [raw sql] ()\n2021-02-03 11:52:05,520 DEBUG sqlalchemy.engine.Engine [track2] Col ('1',)\n2021-02-03 11:52:05,520 DEBUG sqlalchemy.engine.Engine [track2] Row (1,)\n```", "```py\n>>> e = create_engine(\"sqlite://\", echo=True, hide_parameters=True)\n>>> with e.connect() as conn:\n...     conn.execute(text(\"select :some_private_name\"), {\"some_private_name\": \"pii\"})\n2020-10-24 12:48:32,808 INFO sqlalchemy.engine.Engine select ?\n2020-10-24 12:48:32,808 INFO sqlalchemy.engine.Engine [SQL parameters hidden due to hide_parameters=True]\n```"]