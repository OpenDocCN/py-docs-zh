- en: SELECT and Related Constructs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sqlalchemy.org/en/20/core/selectable.html](https://docs.sqlalchemy.org/en/20/core/selectable.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The term “selectable” refers to any object that represents database rows. In
    SQLAlchemy, these objects descend from [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable"), the most prominent being [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select"), which represents a SQL SELECT statement.
    A subset of [`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable")
    is [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause"),
    which represents objects that can be within the FROM clause of a [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") statement. A distinguishing feature of [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") is the [`FromClause.c`](#sqlalchemy.sql.expression.FromClause.c
    "sqlalchemy.sql.expression.FromClause.c") attribute, which is a namespace of all
    the columns contained within the FROM clause (these elements are themselves [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") subclasses).
  prefs: []
  type: TYPE_NORMAL
- en: '## Selectable Foundational Constructors'
  prefs: []
  type: TYPE_NORMAL
- en: Top level “FROM clause” and “SELECT” constructors.
  prefs: []
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [except_](#sqlalchemy.sql.expression.except_)(*selects) | Return an `EXCEPT`
    of multiple selectables. |'
  prefs: []
  type: TYPE_TB
- en: '| [except_all](#sqlalchemy.sql.expression.except_all)(*selects) | Return an
    `EXCEPT ALL` of multiple selectables. |'
  prefs: []
  type: TYPE_TB
- en: '| [exists](#sqlalchemy.sql.expression.exists)([__argument]) | Construct a new
    [`Exists`](#sqlalchemy.sql.expression.Exists "sqlalchemy.sql.expression.Exists")
    construct. |'
  prefs: []
  type: TYPE_TB
- en: '| [intersect](#sqlalchemy.sql.expression.intersect)(*selects) | Return an `INTERSECT`
    of multiple selectables. |'
  prefs: []
  type: TYPE_TB
- en: '| [intersect_all](#sqlalchemy.sql.expression.intersect_all)(*selects) | Return
    an `INTERSECT ALL` of multiple selectables. |'
  prefs: []
  type: TYPE_TB
- en: '| [select](#sqlalchemy.sql.expression.select)(*entities, **__kw) | Construct
    a new [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select").
    |'
  prefs: []
  type: TYPE_TB
- en: '| [table](#sqlalchemy.sql.expression.table)(name, *columns, **kw) | Produce
    a new [`TableClause`](#sqlalchemy.sql.expression.TableClause "sqlalchemy.sql.expression.TableClause").
    |'
  prefs: []
  type: TYPE_TB
- en: '| [union](#sqlalchemy.sql.expression.union)(*selects) | Return a `UNION` of
    multiple selectables. |'
  prefs: []
  type: TYPE_TB
- en: '| [union_all](#sqlalchemy.sql.expression.union_all)(*selects) | Return a `UNION
    ALL` of multiple selectables. |'
  prefs: []
  type: TYPE_TB
- en: '| [values](#sqlalchemy.sql.expression.values)(*columns, [name, literal_binds])
    | Construct a [`Values`](#sqlalchemy.sql.expression.Values "sqlalchemy.sql.expression.Values")
    construct. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Return an `EXCEPT` of multiple selectables.
  prefs: []
  type: TYPE_NORMAL
- en: The returned object is an instance of [`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect
    "sqlalchemy.sql.expression.CompoundSelect").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***selects** – a list of [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    instances.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Return an `EXCEPT ALL` of multiple selectables.
  prefs: []
  type: TYPE_NORMAL
- en: The returned object is an instance of [`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect
    "sqlalchemy.sql.expression.CompoundSelect").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***selects** – a list of [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    instances.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Construct a new [`Exists`](#sqlalchemy.sql.expression.Exists "sqlalchemy.sql.expression.Exists")
    construct.
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`exists()`](#sqlalchemy.sql.expression.exists "sqlalchemy.sql.expression.exists")
    can be invoked by itself to produce an [`Exists`](#sqlalchemy.sql.expression.Exists
    "sqlalchemy.sql.expression.Exists") construct, which will accept simple WHERE
    criteria:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'However, for greater flexibility in constructing the SELECT, an existing [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") construct may be converted to an [`Exists`](#sqlalchemy.sql.expression.Exists
    "sqlalchemy.sql.expression.Exists"), most conveniently by making use of the [`SelectBase.exists()`](#sqlalchemy.sql.expression.SelectBase.exists
    "sqlalchemy.sql.expression.SelectBase.exists") method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The EXISTS criteria is then used inside of an enclosing SELECT:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The above statement will then be of the form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[EXISTS subqueries](../tutorial/data_select.html#tutorial-exists) - in the
    [2.0 style](../glossary.html#term-2.0-style) tutorial.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`SelectBase.exists()`](#sqlalchemy.sql.expression.SelectBase.exists "sqlalchemy.sql.expression.SelectBase.exists")
    - method to transform a `SELECT` to an `EXISTS` clause.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Return an `INTERSECT` of multiple selectables.
  prefs: []
  type: TYPE_NORMAL
- en: The returned object is an instance of [`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect
    "sqlalchemy.sql.expression.CompoundSelect").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***selects** – a list of [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    instances.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Return an `INTERSECT ALL` of multiple selectables.
  prefs: []
  type: TYPE_NORMAL
- en: The returned object is an instance of [`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect
    "sqlalchemy.sql.expression.CompoundSelect").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***selects** – a list of [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    instances.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Construct a new [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select").
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4: - The [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    function now accepts column arguments positionally. The top-level [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") function will automatically use the 1.x or
    2.x style API based on the incoming arguments; using [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") from the `sqlalchemy.future` module will enforce
    that only the 2.x style constructor is used.'
  prefs: []
  type: TYPE_NORMAL
- en: Similar functionality is also available via the [`FromClause.select()`](#sqlalchemy.sql.expression.FromClause.select
    "sqlalchemy.sql.expression.FromClause.select") method on any [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Using SELECT Statements](../tutorial/data_select.html#tutorial-selecting-data)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***entities** –'
  prefs: []
  type: TYPE_NORMAL
- en: Entities to SELECT from. For Core usage, this is typically a series of [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") and / or [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") objects which will form the columns clause
    of the resulting statement. For those objects that are instances of [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") (typically [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") or [`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    objects), the [`FromClause.c`](#sqlalchemy.sql.expression.FromClause.c "sqlalchemy.sql.expression.FromClause.c")
    collection is extracted to form a collection of [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") objects.
  prefs: []
  type: TYPE_NORMAL
- en: This parameter will also accept [`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause") constructs as given, as well as ORM-mapped
    classes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Produce a new [`TableClause`](#sqlalchemy.sql.expression.TableClause "sqlalchemy.sql.expression.TableClause").
  prefs: []
  type: TYPE_NORMAL
- en: The object returned is an instance of [`TableClause`](#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause"), which represents the “syntactical” portion
    of the schema-level [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object. It may be used to construct lightweight table constructs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name` – Name of the table.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`columns` – A collection of [`column()`](sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column") constructs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`schema` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The schema name for this table.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'New in version 1.3.18: [`table()`](#sqlalchemy.sql.expression.table "sqlalchemy.sql.expression.table")
    can now accept a `schema` argument.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Return a `UNION` of multiple selectables.
  prefs: []
  type: TYPE_NORMAL
- en: The returned object is an instance of [`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect
    "sqlalchemy.sql.expression.CompoundSelect").
  prefs: []
  type: TYPE_NORMAL
- en: A similar [`union()`](#sqlalchemy.sql.expression.union "sqlalchemy.sql.expression.union")
    method is available on all [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") subclasses.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*selects` – a list of [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    instances.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**kwargs` – available keyword arguments are the same as those of [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Return a `UNION ALL` of multiple selectables.
  prefs: []
  type: TYPE_NORMAL
- en: The returned object is an instance of [`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect
    "sqlalchemy.sql.expression.CompoundSelect").
  prefs: []
  type: TYPE_NORMAL
- en: A similar [`union_all()`](#sqlalchemy.sql.expression.union_all "sqlalchemy.sql.expression.union_all")
    method is available on all [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") subclasses.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***selects** – a list of [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    instances.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Construct a [`Values`](#sqlalchemy.sql.expression.Values "sqlalchemy.sql.expression.Values")
    construct.
  prefs: []
  type: TYPE_NORMAL
- en: 'The column expressions and the actual data for [`Values`](#sqlalchemy.sql.expression.Values
    "sqlalchemy.sql.expression.Values") are given in two separate steps. The constructor
    receives the column expressions typically as [`column()`](sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column") constructs, and the data is then passed via
    the [`Values.data()`](#sqlalchemy.sql.expression.Values.data "sqlalchemy.sql.expression.Values.data")
    method as a list, which can be called multiple times to add more data, e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*columns` – column expressions, typically composed using [`column()`](sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column") objects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name` – the name for this VALUES construct. If omitted, the VALUES construct
    will be unnamed in a SQL expression. Different backends may have different requirements
    here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`literal_binds` – Defaults to False. Whether or not to render the data values
    inline in the SQL output, rather than using bound parameters.  ## Selectable Modifier
    Constructors'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Functions listed here are more commonly available as methods from [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") and [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable") elements, for example, the [`alias()`](#sqlalchemy.sql.expression.alias
    "sqlalchemy.sql.expression.alias") function is usually invoked via the [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") method.
  prefs: []
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [alias](#sqlalchemy.sql.expression.alias)(selectable[, name, flat]) | Return
    a named alias of the given [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause"). |'
  prefs: []
  type: TYPE_TB
- en: '| [cte](#sqlalchemy.sql.expression.cte)(selectable[, name, recursive]) | Return
    a new [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE"),
    or Common Table Expression instance. |'
  prefs: []
  type: TYPE_TB
- en: '| [join](#sqlalchemy.sql.expression.join)(left, right[, onclause, isouter,
    ...]) | Produce a [`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    object, given two [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    expressions. |'
  prefs: []
  type: TYPE_TB
- en: '| [lateral](#sqlalchemy.sql.expression.lateral)(selectable[, name]) | Return
    a [`Lateral`](#sqlalchemy.sql.expression.Lateral "sqlalchemy.sql.expression.Lateral")
    object. |'
  prefs: []
  type: TYPE_TB
- en: '| [outerjoin](#sqlalchemy.sql.expression.outerjoin)(left, right[, onclause,
    full]) | Return an `OUTER JOIN` clause element. |'
  prefs: []
  type: TYPE_TB
- en: '| [tablesample](#sqlalchemy.sql.expression.tablesample)(selectable, sampling[,
    name, seed]) | Return a [`TableSample`](#sqlalchemy.sql.expression.TableSample
    "sqlalchemy.sql.expression.TableSample") object. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Return a named alias of the given [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: For [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    and [`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    objects, the return type is the [`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    object. Other kinds of `NamedFromClause` objects may be returned for other kinds
    of [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    objects.
  prefs: []
  type: TYPE_NORMAL
- en: The named alias represents any [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") with an alternate name assigned within
    SQL, typically using the `AS` clause when generated, e.g. `SELECT * FROM table
    AS aliasname`.
  prefs: []
  type: TYPE_NORMAL
- en: Equivalent functionality is available via the [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") method available on all [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`selectable` – any [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    subclass, such as a table, select statement, etc.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name` – string name to be assigned as the alias. If `None`, a name will be
    deterministically generated at compile time. Deterministic means the name is guaranteed
    to be unique against other constructs used in the same statement, and will also
    be the same name for each successive compilation of the same statement object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flat` – Will be passed through to if the given selectable is an instance of
    [`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join") - see
    `Join.alias()` for details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE"),
    or Common Table Expression instance.
  prefs: []
  type: TYPE_NORMAL
- en: Please see [`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte "sqlalchemy.sql.expression.HasCTE.cte")
    for detail on CTE usage.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Produce a [`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    object, given two [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    expressions.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'would emit SQL along the lines of:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Similar functionality is available given any [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") object (e.g. such as a [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")) using the [`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join") method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`left` – The left side of the join.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`right` – the right side of the join; this is any [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") object such as a [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object, and may also be a selectable-compatible object
    such as an ORM-mapped class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onclause` – a SQL expression representing the ON clause of the join. If left
    at `None`, [`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join "sqlalchemy.sql.expression.FromClause.join")
    will attempt to join the two tables based on a foreign key relationship.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`isouter` – if True, render a LEFT OUTER JOIN, instead of JOIN.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`full` – if True, render a FULL OUTER JOIN, instead of JOIN.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join "sqlalchemy.sql.expression.FromClause.join")
    - method form, based on a given left side.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    - the type of object produced.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Return a [`Lateral`](#sqlalchemy.sql.expression.Lateral "sqlalchemy.sql.expression.Lateral")
    object.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Lateral`](#sqlalchemy.sql.expression.Lateral "sqlalchemy.sql.expression.Lateral")
    is an [`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    subclass that represents a subquery with the LATERAL keyword applied to it.'
  prefs: []
  type: TYPE_NORMAL
- en: The special behavior of a LATERAL subquery is that it appears in the FROM clause
    of an enclosing SELECT, but may correlate to other FROM clauses of that SELECT.
    It is a special case of subquery only supported by a small number of backends,
    currently more recent PostgreSQL versions.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[LATERAL correlation](../tutorial/data_select.html#tutorial-lateral-correlation)
    - overview of usage.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Return an `OUTER JOIN` clause element.
  prefs: []
  type: TYPE_NORMAL
- en: The returned object is an instance of [`Join`](#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join").
  prefs: []
  type: TYPE_NORMAL
- en: Similar functionality is also available via the [`FromClause.outerjoin()`](#sqlalchemy.sql.expression.FromClause.outerjoin
    "sqlalchemy.sql.expression.FromClause.outerjoin") method on any [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`left` – The left side of the join.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`right` – The right side of the join.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onclause` – Optional criterion for the `ON` clause, is derived from foreign
    key relationships established between left and right otherwise.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To chain joins together, use the [`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join") or [`FromClause.outerjoin()`](#sqlalchemy.sql.expression.FromClause.outerjoin
    "sqlalchemy.sql.expression.FromClause.outerjoin") methods on the resulting [`Join`](#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Return a [`TableSample`](#sqlalchemy.sql.expression.TableSample "sqlalchemy.sql.expression.TableSample")
    object.
  prefs: []
  type: TYPE_NORMAL
- en: '[`TableSample`](#sqlalchemy.sql.expression.TableSample "sqlalchemy.sql.expression.TableSample")
    is an [`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    subclass that represents a table with the TABLESAMPLE clause applied to it. [`tablesample()`](#sqlalchemy.sql.expression.tablesample
    "sqlalchemy.sql.expression.tablesample") is also available from the [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") class via the [`FromClause.tablesample()`](#sqlalchemy.sql.expression.FromClause.tablesample
    "sqlalchemy.sql.expression.FromClause.tablesample") method.'
  prefs: []
  type: TYPE_NORMAL
- en: The TABLESAMPLE clause allows selecting a randomly selected approximate percentage
    of rows from a table. It supports multiple sampling methods, most commonly BERNOULLI
    and SYSTEM.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Assuming `people` with a column `people_id`, the above statement would render
    as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`sampling` – a `float` percentage between 0 and 100 or [`Function`](functions.html#sqlalchemy.sql.functions.Function
    "sqlalchemy.sql.functions.Function").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name` – optional alias name'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`seed` – any real-valued SQL expression. When specified, the REPEATABLE sub-clause
    is also rendered.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selectable Class Documentation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The classes here are generated using the constructors listed at [Selectable
    Foundational Constructors](#selectable-foundational-constructors) and [Selectable
    Modifier Constructors](#fromclause-modifier-constructors).
  prefs: []
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [Alias](#sqlalchemy.sql.expression.Alias) | Represents an table or selectable
    alias (AS). |'
  prefs: []
  type: TYPE_TB
- en: '| [AliasedReturnsRows](#sqlalchemy.sql.expression.AliasedReturnsRows) | Base
    class of aliases against tables, subqueries, and other selectables. |'
  prefs: []
  type: TYPE_TB
- en: '| [CompoundSelect](#sqlalchemy.sql.expression.CompoundSelect) | Forms the basis
    of `UNION`, `UNION ALL`, and other SELECT-based set operations. |'
  prefs: []
  type: TYPE_TB
- en: '| [CTE](#sqlalchemy.sql.expression.CTE) | Represent a Common Table Expression.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [Executable](#sqlalchemy.sql.expression.Executable) | Mark a [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") as supporting execution. |'
  prefs: []
  type: TYPE_TB
- en: '| [Exists](#sqlalchemy.sql.expression.Exists) | Represent an `EXISTS` clause.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [FromClause](#sqlalchemy.sql.expression.FromClause) | Represent an element
    that can be used within the `FROM` clause of a `SELECT` statement. |'
  prefs: []
  type: TYPE_TB
- en: '| [GenerativeSelect](#sqlalchemy.sql.expression.GenerativeSelect) | Base class
    for SELECT statements where additional elements can be added. |'
  prefs: []
  type: TYPE_TB
- en: '| [HasCTE](#sqlalchemy.sql.expression.HasCTE) | Mixin that declares a class
    to include CTE support. |'
  prefs: []
  type: TYPE_TB
- en: '| [HasPrefixes](#sqlalchemy.sql.expression.HasPrefixes) |  |'
  prefs: []
  type: TYPE_TB
- en: '| [HasSuffixes](#sqlalchemy.sql.expression.HasSuffixes) |  |'
  prefs: []
  type: TYPE_TB
- en: '| [Join](#sqlalchemy.sql.expression.Join) | Represent a `JOIN` construct between
    two [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    elements. |'
  prefs: []
  type: TYPE_TB
- en: '| [Lateral](#sqlalchemy.sql.expression.Lateral) | Represent a LATERAL subquery.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [ReturnsRows](#sqlalchemy.sql.expression.ReturnsRows) | The base-most class
    for Core constructs that have some concept of columns that can represent rows.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [ScalarSelect](#sqlalchemy.sql.expression.ScalarSelect) | Represent a scalar
    subquery. |'
  prefs: []
  type: TYPE_TB
- en: '| [ScalarValues](#sqlalchemy.sql.expression.ScalarValues) | Represent a scalar
    `VALUES` construct that can be used as a COLUMN element in a statement. |'
  prefs: []
  type: TYPE_TB
- en: '| [Select](#sqlalchemy.sql.expression.Select) | Represents a `SELECT` statement.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [Selectable](#sqlalchemy.sql.expression.Selectable) | Mark a class as being
    selectable. |'
  prefs: []
  type: TYPE_TB
- en: '| [SelectBase](#sqlalchemy.sql.expression.SelectBase) | Base class for SELECT
    statements. |'
  prefs: []
  type: TYPE_TB
- en: '| [Subquery](#sqlalchemy.sql.expression.Subquery) | Represent a subquery of
    a SELECT. |'
  prefs: []
  type: TYPE_TB
- en: '| [TableClause](#sqlalchemy.sql.expression.TableClause) | Represents a minimal
    “table” construct. |'
  prefs: []
  type: TYPE_TB
- en: '| [TableSample](#sqlalchemy.sql.expression.TableSample) | Represent a TABLESAMPLE
    clause. |'
  prefs: []
  type: TYPE_TB
- en: '| [TableValuedAlias](#sqlalchemy.sql.expression.TableValuedAlias) | An alias
    against a “table valued” SQL function. |'
  prefs: []
  type: TYPE_TB
- en: '| [TextualSelect](#sqlalchemy.sql.expression.TextualSelect) | Wrap a [`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause") construct within a [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase") interface. |'
  prefs: []
  type: TYPE_TB
- en: '| [Values](#sqlalchemy.sql.expression.Values) | Represent a `VALUES` construct
    that can be used as a FROM element in a statement. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Represents an table or selectable alias (AS).
  prefs: []
  type: TYPE_NORMAL
- en: Represents an alias, as typically applied to any table or sub-select within
    a SQL statement using the `AS` keyword (or without the keyword on certain databases
    such as Oracle).
  prefs: []
  type: TYPE_NORMAL
- en: This object is constructed from the [`alias()`](#sqlalchemy.sql.expression.alias
    "sqlalchemy.sql.expression.alias") module level function as well as the [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") method available on all [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") subclasses.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias "sqlalchemy.sql.expression.FromClause.alias")'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[inherit_cache](#sqlalchemy.sql.expression.Alias.inherit_cache)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.expression.Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    (`sqlalchemy.sql.roles.DMLTableRole`, `sqlalchemy.sql.expression.FromClauseAlias`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Indicate if this [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") instance should make use of the cache
    key generation scheme used by its immediate superclass.
  prefs: []
  type: TYPE_NORMAL
- en: The attribute defaults to `None`, which indicates that a construct has not yet
    taken into account whether or not its appropriate for it to participate in caching;
    this is functionally equivalent to setting the value to `False`, except that a
    warning is also emitted.
  prefs: []
  type: TYPE_NORMAL
- en: This flag can be set to `True` on a particular class, if the SQL that corresponds
    to the object does not change based on attributes which are local to this class,
    and not its superclass.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Enabling Caching Support for Custom Constructs](compiler.html#compilerext-caching)
    - General guideslines for setting the [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute for third-party
    or user defined SQL constructs.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Base class of aliases against tables, subqueries, and other selectables.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[description](#sqlalchemy.sql.expression.AliasedReturnsRows.description), [is_derived_from()](#sqlalchemy.sql.expression.AliasedReturnsRows.is_derived_from),
    [original](#sqlalchemy.sql.expression.AliasedReturnsRows.original)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.expression.AliasedReturnsRows`](#sqlalchemy.sql.expression.AliasedReturnsRows
    "sqlalchemy.sql.expression.AliasedReturnsRows") (`sqlalchemy.sql.expression.NoInit`,
    `sqlalchemy.sql.expression.NamedFromClause`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Return `True` if this [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    is ‘derived’ from the given `FromClause`.
  prefs: []
  type: TYPE_NORMAL
- en: An example would be an Alias of a Table is derived from that Table.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Legacy for dialects that are referring to Alias.original.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Forms the basis of `UNION`, `UNION ALL`, and other SELECT-based set operations.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`union()`](#sqlalchemy.sql.expression.union "sqlalchemy.sql.expression.union")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`union_all()`](#sqlalchemy.sql.expression.union_all "sqlalchemy.sql.expression.union_all")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`intersect()`](#sqlalchemy.sql.expression.intersect "sqlalchemy.sql.expression.intersect")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`intersect_all()`](#sqlalchemy.sql.expression.intersect_all "sqlalchemy.sql.expression.intersect_all")'
  prefs: []
  type: TYPE_NORMAL
- en: '`except()`'
  prefs: []
  type: TYPE_NORMAL
- en: '[`except_all()`](#sqlalchemy.sql.expression.except_all "sqlalchemy.sql.expression.except_all")'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[add_cte()](#sqlalchemy.sql.expression.CompoundSelect.add_cte), [alias()](#sqlalchemy.sql.expression.CompoundSelect.alias),
    [as_scalar()](#sqlalchemy.sql.expression.CompoundSelect.as_scalar), [c](#sqlalchemy.sql.expression.CompoundSelect.c),
    [corresponding_column()](#sqlalchemy.sql.expression.CompoundSelect.corresponding_column),
    [cte()](#sqlalchemy.sql.expression.CompoundSelect.cte), [execution_options()](#sqlalchemy.sql.expression.CompoundSelect.execution_options),
    [exists()](#sqlalchemy.sql.expression.CompoundSelect.exists), [exported_columns](#sqlalchemy.sql.expression.CompoundSelect.exported_columns),
    [fetch()](#sqlalchemy.sql.expression.CompoundSelect.fetch), [get_execution_options()](#sqlalchemy.sql.expression.CompoundSelect.get_execution_options),
    [get_label_style()](#sqlalchemy.sql.expression.CompoundSelect.get_label_style),
    [group_by()](#sqlalchemy.sql.expression.CompoundSelect.group_by), [is_derived_from()](#sqlalchemy.sql.expression.CompoundSelect.is_derived_from),
    [label()](#sqlalchemy.sql.expression.CompoundSelect.label), [lateral()](#sqlalchemy.sql.expression.CompoundSelect.lateral),
    [limit()](#sqlalchemy.sql.expression.CompoundSelect.limit), [offset()](#sqlalchemy.sql.expression.CompoundSelect.offset),
    [options()](#sqlalchemy.sql.expression.CompoundSelect.options), [order_by()](#sqlalchemy.sql.expression.CompoundSelect.order_by),
    [replace_selectable()](#sqlalchemy.sql.expression.CompoundSelect.replace_selectable),
    [scalar_subquery()](#sqlalchemy.sql.expression.CompoundSelect.scalar_subquery),
    [select()](#sqlalchemy.sql.expression.CompoundSelect.select), [selected_columns](#sqlalchemy.sql.expression.CompoundSelect.selected_columns),
    [self_group()](#sqlalchemy.sql.expression.CompoundSelect.self_group), [set_label_style()](#sqlalchemy.sql.expression.CompoundSelect.set_label_style),
    [slice()](#sqlalchemy.sql.expression.CompoundSelect.slice), [subquery()](#sqlalchemy.sql.expression.CompoundSelect.subquery),
    [with_for_update()](#sqlalchemy.sql.expression.CompoundSelect.with_for_update)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.expression.CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect
    "sqlalchemy.sql.expression.CompoundSelect") (`sqlalchemy.sql.expression.HasCompileState`,
    [`sqlalchemy.sql.expression.GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect"), `sqlalchemy.sql.expression.ExecutableReturnsRows`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") *method of* [`HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE")'
  prefs: []
  type: TYPE_NORMAL
- en: Add one or more [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    constructs to this statement.
  prefs: []
  type: TYPE_NORMAL
- en: This method will associate the given [`CTE`](#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE") constructs with the parent statement such that
    they will each be unconditionally rendered in the WITH clause of the final statement,
    even if not referenced elsewhere within the statement or any sub-selects.
  prefs: []
  type: TYPE_NORMAL
- en: The optional [`HasCTE.add_cte.nest_here`](#sqlalchemy.sql.expression.HasCTE.add_cte.params.nest_here
    "sqlalchemy.sql.expression.HasCTE.add_cte") parameter when set to True will have
    the effect that each given [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    will render in a WITH clause rendered directly along with this statement, rather
    than being moved to the top of the ultimate rendered statement, even if this statement
    is rendered as a subquery within a larger statement.
  prefs: []
  type: TYPE_NORMAL
- en: This method has two general uses. One is to embed CTE statements that serve
    some purpose without being referenced explicitly, such as the use case of embedding
    a DML statement such as an INSERT or UPDATE as a CTE inline with a primary statement
    that may draw from its results indirectly. The other is to provide control over
    the exact placement of a particular series of CTE constructs that should remain
    rendered directly in terms of a particular statement that may be nested in a larger
    statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Would render:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Above, the “anon_1” CTE is not referenced in the SELECT statement, however still
    accomplishes the task of running an INSERT statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly in a DML-related context, using the PostgreSQL [`Insert`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Insert
    "sqlalchemy.dialects.postgresql.Insert") construct to generate an “upsert”:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The above statement renders as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.4.21.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*ctes` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: zero or more [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    constructs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Changed in version 2.0: Multiple CTE instances are accepted'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`nest_here` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: if True, the given CTE or CTEs will be rendered as though they specified the
    [`HasCTE.cte.nesting`](#sqlalchemy.sql.expression.HasCTE.cte.params.nesting "sqlalchemy.sql.expression.HasCTE.cte")
    flag to `True` when they were added to this [`HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE"). Assuming the given CTEs are not referenced
    in an outer-enclosing statement as well, the CTEs given should render at the level
    of this statement when this flag is given.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`HasCTE.cte.nesting`](#sqlalchemy.sql.expression.HasCTE.cte.params.nesting
    "sqlalchemy.sql.expression.HasCTE.cte")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`SelectBase.alias()`](#sqlalchemy.sql.expression.SelectBase.alias
    "sqlalchemy.sql.expression.SelectBase.alias") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a named subquery against this [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase").
  prefs: []
  type: TYPE_NORMAL
- en: For a [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")
    (as opposed to a [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")),
    this returns a [`Subquery`](#sqlalchemy.sql.expression.Subquery "sqlalchemy.sql.expression.Subquery")
    object which behaves mostly the same as the [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") object that is used with a [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The [`SelectBase.alias()`](#sqlalchemy.sql.expression.SelectBase.alias
    "sqlalchemy.sql.expression.SelectBase.alias") method is now a synonym for the
    [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery "sqlalchemy.sql.expression.SelectBase.subquery")
    method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`SelectBase.as_scalar()`](#sqlalchemy.sql.expression.SelectBase.as_scalar
    "sqlalchemy.sql.expression.SelectBase.as_scalar") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.4: The [`SelectBase.as_scalar()`](#sqlalchemy.sql.expression.SelectBase.as_scalar
    "sqlalchemy.sql.expression.SelectBase.as_scalar") method is deprecated and will
    be removed in a future release. Please refer to [`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`SelectBase.c`](#sqlalchemy.sql.expression.SelectBase.c
    "sqlalchemy.sql.expression.SelectBase.c") *attribute of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.4: The [`SelectBase.c`](#sqlalchemy.sql.expression.SelectBase.c
    "sqlalchemy.sql.expression.SelectBase.c") and `SelectBase.columns` attributes
    are deprecated and will be removed in a future release; these attributes implicitly
    create a subquery that should be explicit. Please call [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") first in order to create a subquery,
    which then contains this attribute. To access the columns that this SELECT object
    SELECTs from, use the [`SelectBase.selected_columns`](#sqlalchemy.sql.expression.SelectBase.selected_columns
    "sqlalchemy.sql.expression.SelectBase.selected_columns") attribute.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Selectable.corresponding_column()`](#sqlalchemy.sql.expression.Selectable.corresponding_column
    "sqlalchemy.sql.expression.Selectable.corresponding_column") *method of* [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
  prefs: []
  type: TYPE_NORMAL
- en: Given a [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"), return the exported [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") object from the [`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") collection of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable") which corresponds to that original [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") via a common ancestor column.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`column` – the target [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") to be matched.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`require_embedded` – only return corresponding columns for the given [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"), if the given [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") is actually present within a sub-element
    of this [`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable").
    Normally the column will match if it merely shares a common ancestor with one
    of the exported columns of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") - the [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") that is used for the operation.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnCollection.corresponding_column()`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection.corresponding_column
    "sqlalchemy.sql.expression.ColumnCollection.corresponding_column") - implementation
    method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte
    "sqlalchemy.sql.expression.HasCTE.cte") *method of* [`HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a new [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE"),
    or Common Table Expression instance.
  prefs: []
  type: TYPE_NORMAL
- en: Common table expressions are a SQL standard whereby SELECT statements can draw
    upon secondary statements specified along with the primary statement, using a
    clause called “WITH”. Special semantics regarding UNION can also be employed to
    allow “recursive” queries, where a SELECT statement can draw upon the set of rows
    that have previously been selected.
  prefs: []
  type: TYPE_NORMAL
- en: CTEs can also be applied to DML constructs UPDATE, INSERT and DELETE on some
    databases, both as a source of CTE rows when combined with RETURNING, as well
    as a consumer of CTE rows.
  prefs: []
  type: TYPE_NORMAL
- en: SQLAlchemy detects [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    objects, which are treated similarly to [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") objects, as special elements to be delivered
    to the FROM clause of the statement as well as to a WITH clause at the top of
    the statement.
  prefs: []
  type: TYPE_NORMAL
- en: For special prefixes such as PostgreSQL “MATERIALIZED” and “NOT MATERIALIZED”,
    the `CTE.prefix_with()` method may be used to establish these.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.3.13: Added support for prefixes. In particular - MATERIALIZED
    and NOT MATERIALIZED.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name` – name given to the common table expression. Like [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias"), the name can be left as `None`
    in which case an anonymous symbol will be used at query compile time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`recursive` – if `True`, will render `WITH RECURSIVE`. A recursive common table
    expression is intended to be used in conjunction with UNION ALL in order to derive
    rows from those already selected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nesting` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: if `True`, will render the CTE locally to the statement in which it is referenced.
    For more complex scenarios, the [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") method using the [`HasCTE.add_cte.nest_here`](#sqlalchemy.sql.expression.HasCTE.add_cte.params.nest_here
    "sqlalchemy.sql.expression.HasCTE.add_cte") parameter may also be used to more
    carefully control the exact placement of a particular CTE.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 1.4.24.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte "sqlalchemy.sql.expression.HasCTE.add_cte")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The following examples include two from PostgreSQL’s documentation at [https://www.postgresql.org/docs/current/static/queries-with.html](https://www.postgresql.org/docs/current/static/queries-with.html),
    as well as additional examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example 1, non recursive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Example 2, WITH RECURSIVE:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Example 3, an upsert using UPDATE and INSERT with CTEs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Example 4, Nesting CTE (SQLAlchemy 1.4.24 and above):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'The above query will render the second CTE nested inside the first, shown with
    inline parameters below as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'The same CTE can be set up using the [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") method as follows (SQLAlchemy 2.0
    and above):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Example 5, Non-Linear CTE (SQLAlchemy 1.4.28 and above):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'The above query will render 2 UNIONs inside the recursive CTE:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.cte()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.cte "sqlalchemy.orm.Query.cte")
    - ORM version of [`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte "sqlalchemy.sql.expression.HasCTE.cte").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") *method of* [`Executable`](#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")'
  prefs: []
  type: TYPE_NORMAL
- en: Set non-SQL options for the statement which take effect during execution.
  prefs: []
  type: TYPE_NORMAL
- en: Execution options can be set at many scopes, including per-statement, per-connection,
    or per execution, using methods such as [`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") and parameters which accept
    a dictionary of options such as [`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute") and [`Session.execute.execution_options`](../orm/session_api.html#sqlalchemy.orm.Session.execute.params.execution_options
    "sqlalchemy.orm.Session.execute").
  prefs: []
  type: TYPE_NORMAL
- en: The primary characteristic of an execution option, as opposed to other kinds
    of options such as ORM loader options, is that **execution options never affect
    the compiled SQL of a query, only things that affect how the SQL statement itself
    is invoked or how results are fetched**. That is, execution options are not part
    of what’s accommodated by SQL compilation nor are they considered part of the
    cached state of a statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") method is [generative](../glossary.html#term-generative),
    as is the case for the method as applied to the [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") and [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") objects, which means when the method is called, a copy
    of the object is returned, which applies the given parameters to that new copy,
    but leaves the original unchanged:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: An exception to this behavior is the [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object, where the [`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") method is explicitly **not**
    generative.
  prefs: []
  type: TYPE_NORMAL
- en: 'The kinds of options that may be passed to [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") and other related methods
    and parameter dictionaries include parameters that are explicitly consumed by
    SQLAlchemy Core or ORM, as well as arbitrary keyword arguments not defined by
    SQLAlchemy, which means the methods and/or parameter dictionaries may be used
    for user-defined parameters that interact with custom code, which may access the
    parameters using methods such as [`Executable.get_execution_options()`](#sqlalchemy.sql.expression.Executable.get_execution_options
    "sqlalchemy.sql.expression.Executable.get_execution_options") and [`Connection.get_execution_options()`](connections.html#sqlalchemy.engine.Connection.get_execution_options
    "sqlalchemy.engine.Connection.get_execution_options"), or within selected event
    hooks using a dedicated `execution_options` event parameter such as [`ConnectionEvents.before_execute.execution_options`](events.html#sqlalchemy.events.ConnectionEvents.before_execute.params.execution_options
    "sqlalchemy.events.ConnectionEvents.before_execute") or [`ORMExecuteState.execution_options`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.execution_options
    "sqlalchemy.orm.ORMExecuteState.execution_options"), e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Within the scope of options that are explicitly recognized by SQLAlchemy, most
    apply to specific classes of objects and not others. The most common execution
    options include:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Connection.execution_options.isolation_level`](connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") - sets the isolation level for
    a connection or a class of connections via an [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"). This option is accepted only by [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") or [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Connection.execution_options.stream_results`](connections.html#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") - indicates results should be
    fetched using a server side cursor; this option is accepted by [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"), by the [`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute") parameter on [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute"), and additionally by [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") on a SQL statement object,
    as well as by ORM constructs like [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Connection.execution_options.compiled_cache`](connections.html#sqlalchemy.engine.Connection.execution_options.params.compiled_cache
    "sqlalchemy.engine.Connection.execution_options") - indicates a dictionary that
    will serve as the [SQL compilation cache](connections.html#sql-caching) for a
    [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    or [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine"),
    as well as for ORM methods like [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute"). Can be passed as `None` to disable caching
    for statements. This option is not accepted by [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") as it is inadvisable
    to carry along a compilation cache within a statement object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Connection.execution_options.schema_translate_map`](connections.html#sqlalchemy.engine.Connection.execution_options.params.schema_translate_map
    "sqlalchemy.engine.Connection.execution_options") - a mapping of schema names
    used by the [Schema Translate Map](connections.html#schema-translating) feature,
    accepted by [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine"),
    [`Executable`](#sqlalchemy.sql.expression.Executable "sqlalchemy.sql.expression.Executable"),
    as well as by ORM constructs like [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.execute.execution_options`](../orm/session_api.html#sqlalchemy.orm.Session.execute.params.execution_options
    "sqlalchemy.orm.Session.execute")'
  prefs: []
  type: TYPE_NORMAL
- en: '[ORM Execution Options](../orm/queryguide/api.html#orm-queryguide-execution-options)
    - documentation on all ORM-specific execution options'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`SelectBase.exists()`](#sqlalchemy.sql.expression.SelectBase.exists
    "sqlalchemy.sql.expression.SelectBase.exists") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  prefs: []
  type: TYPE_NORMAL
- en: Return an [`Exists`](#sqlalchemy.sql.expression.Exists "sqlalchemy.sql.expression.Exists")
    representation of this selectable, which can be used as a column expression.
  prefs: []
  type: TYPE_NORMAL
- en: The returned object is an instance of [`Exists`](#sqlalchemy.sql.expression.Exists
    "sqlalchemy.sql.expression.Exists").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`exists()`](#sqlalchemy.sql.expression.exists "sqlalchemy.sql.expression.exists")'
  prefs: []
  type: TYPE_NORMAL
- en: '[EXISTS subqueries](../tutorial/data_select.html#tutorial-exists) - in the
    [2.0 style](../glossary.html#term-2.0-style) tutorial.'
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`SelectBase.exported_columns`](#sqlalchemy.sql.expression.SelectBase.exported_columns
    "sqlalchemy.sql.expression.SelectBase.exported_columns") *attribute of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  prefs: []
  type: TYPE_NORMAL
- en: A [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") that represents the “exported” columns
    of this [`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable"),
    not including [`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause") constructs.
  prefs: []
  type: TYPE_NORMAL
- en: The “exported” columns for a [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase") object are synonymous with the [`SelectBase.selected_columns`](#sqlalchemy.sql.expression.SelectBase.selected_columns
    "sqlalchemy.sql.expression.SelectBase.selected_columns") collection.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.exported_columns`](#sqlalchemy.sql.expression.Select.exported_columns
    "sqlalchemy.sql.expression.Select.exported_columns")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`FromClause.exported_columns`](#sqlalchemy.sql.expression.FromClause.exported_columns
    "sqlalchemy.sql.expression.FromClause.exported_columns")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a new selectable with the given FETCH FIRST criterion applied.
  prefs: []
  type: TYPE_NORMAL
- en: This is a numeric value which usually renders as `FETCH {FIRST | NEXT} [ count
    ] {ROW | ROWS} {ONLY | WITH TIES}` expression in the resulting select. This functionality
    is is currently implemented for Oracle, PostgreSQL, MSSQL.
  prefs: []
  type: TYPE_NORMAL
- en: Use [`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset") to specify the offset.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The [`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch") method will replace any clause
    applied with [`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit").
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`count` – an integer COUNT parameter, or a SQL expression that provides an
    integer result. When `percent=True` this will represent the percentage of rows
    to return, not the absolute value. Pass `None` to reset it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`with_ties` – When `True`, the WITH TIES option is used to return any additional
    rows that tie for the last place in the result set according to the `ORDER BY`
    clause. The `ORDER BY` may be mandatory in this case. Defaults to `False`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`percent` – When `True`, `count` represents the percentage of the total number
    of selected rows to return. Defaults to `False`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Executable.get_execution_options()`](#sqlalchemy.sql.expression.Executable.get_execution_options
    "sqlalchemy.sql.expression.Executable.get_execution_options") *method of* [`Executable`](#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")'
  prefs: []
  type: TYPE_NORMAL
- en: Get the non-SQL options which will take effect during execution.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.3.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`GenerativeSelect.get_label_style()`](#sqlalchemy.sql.expression.GenerativeSelect.get_label_style
    "sqlalchemy.sql.expression.GenerativeSelect.get_label_style") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  prefs: []
  type: TYPE_NORMAL
- en: Retrieve the current label style.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`GenerativeSelect.group_by()`](#sqlalchemy.sql.expression.GenerativeSelect.group_by
    "sqlalchemy.sql.expression.GenerativeSelect.group_by") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a new selectable with the given list of GROUP BY criterion applied.
  prefs: []
  type: TYPE_NORMAL
- en: All existing GROUP BY settings can be suppressed by passing `None`.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***clauses** – a series of [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") constructs which will be used to generate
    an GROUP BY clause.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Aggregate functions with GROUP BY / HAVING](../tutorial/data_select.html#tutorial-group-by-w-aggregates)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Ordering or Grouping by a Label](../tutorial/data_select.html#tutorial-order-by-label)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Return `True` if this [`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows
    "sqlalchemy.sql.expression.ReturnsRows") is ‘derived’ from the given [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: An example would be an Alias of a Table is derived from that Table.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`SelectBase.label()`](#sqlalchemy.sql.expression.SelectBase.label
    "sqlalchemy.sql.expression.SelectBase.label") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a ‘scalar’ representation of this selectable, embedded as a subquery
    with a label.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`SelectBase.lateral()`](#sqlalchemy.sql.expression.SelectBase.lateral
    "sqlalchemy.sql.expression.SelectBase.lateral") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a LATERAL alias of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable").
  prefs: []
  type: TYPE_NORMAL
- en: The return value is the [`Lateral`](#sqlalchemy.sql.expression.Lateral "sqlalchemy.sql.expression.Lateral")
    construct also provided by the top-level [`lateral()`](#sqlalchemy.sql.expression.lateral
    "sqlalchemy.sql.expression.lateral") function.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[LATERAL correlation](../tutorial/data_select.html#tutorial-lateral-correlation)
    - overview of usage.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a new selectable with the given LIMIT criterion applied.
  prefs: []
  type: TYPE_NORMAL
- en: This is a numerical value which usually renders as a `LIMIT` expression in the
    resulting select. Backends that don’t support `LIMIT` will attempt to provide
    similar functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The [`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit") method will replace any clause
    applied with [`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**limit** – an integer LIMIT parameter, or a SQL expression that provides an
    integer result. Pass `None` to reset it.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a new selectable with the given OFFSET criterion applied.
  prefs: []
  type: TYPE_NORMAL
- en: This is a numeric value which usually renders as an `OFFSET` expression in the
    resulting select. Backends that don’t support `OFFSET` will attempt to provide
    similar functionality.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**offset** – an integer OFFSET parameter, or a SQL expression that provides
    an integer result. Pass `None` to reset it.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Executable.options()`](#sqlalchemy.sql.expression.Executable.options
    "sqlalchemy.sql.expression.Executable.options") *method of* [`Executable`](#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")'
  prefs: []
  type: TYPE_NORMAL
- en: Apply options to this statement.
  prefs: []
  type: TYPE_NORMAL
- en: In the general sense, options are any kind of Python object that can be interpreted
    by the SQL compiler for the statement. These options can be consumed by specific
    dialects or specific kinds of compilers.
  prefs: []
  type: TYPE_NORMAL
- en: The most commonly known kind of option are the ORM level options that apply
    “eager load” and other loading behaviors to an ORM query. However, options can
    theoretically be used for many other purposes.
  prefs: []
  type: TYPE_NORMAL
- en: For background on specific kinds of options for specific kinds of statements,
    refer to the documentation for those option objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: - added [`Executable.options()`](#sqlalchemy.sql.expression.Executable.options
    "sqlalchemy.sql.expression.Executable.options") to Core statement objects towards
    the goal of allowing unified Core / ORM querying capabilities.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Column Loading Options](../orm/queryguide/columns.html#loading-columns) -
    refers to options specific to the usage of ORM queries'
  prefs: []
  type: TYPE_NORMAL
- en: '[Relationship Loading with Loader Options](../orm/queryguide/relationships.html#relationship-loader-options)
    - refers to options specific to the usage of ORM queries'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`GenerativeSelect.order_by()`](#sqlalchemy.sql.expression.GenerativeSelect.order_by
    "sqlalchemy.sql.expression.GenerativeSelect.order_by") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a new selectable with the given list of ORDER BY criteria applied.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Calling this method multiple times is equivalent to calling it once with all
    the clauses concatenated. All existing ORDER BY criteria may be cancelled by passing
    `None` by itself. New ORDER BY criteria may then be added by invoking [`Query.order_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.order_by
    "sqlalchemy.orm.Query.order_by") again, e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***clauses** – a series of [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") constructs which will be used to generate
    an ORDER BY clause.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[ORDER BY](../tutorial/data_select.html#tutorial-order-by) - in the [SQLAlchemy
    Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Ordering or Grouping by a Label](../tutorial/data_select.html#tutorial-order-by-label)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Selectable.replace_selectable()`](#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") *method of* [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
  prefs: []
  type: TYPE_NORMAL
- en: Replace all occurrences of [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") ‘old’ with the given [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") object, returning a copy of this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.4: The [`Selectable.replace_selectable()`](#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") method is deprecated,
    and will be removed in a future release. Similar functionality is available via
    the sqlalchemy.sql.visitors module.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a ‘scalar’ representation of this selectable, which can be used as a
    column expression.
  prefs: []
  type: TYPE_NORMAL
- en: The returned object is an instance of [`ScalarSelect`](#sqlalchemy.sql.expression.ScalarSelect
    "sqlalchemy.sql.expression.ScalarSelect").
  prefs: []
  type: TYPE_NORMAL
- en: Typically, a select statement which has only one column in its columns clause
    is eligible to be used as a scalar expression. The scalar subquery can then be
    used in the WHERE clause or columns clause of an enclosing SELECT.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the scalar subquery differentiates from the FROM-level subquery that
    can be produced using the [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") method.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Scalar and Correlated Subqueries](../tutorial/data_select.html#tutorial-scalar-subquery)
    - in the 2.0 tutorial'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`SelectBase.select()`](#sqlalchemy.sql.expression.SelectBase.select
    "sqlalchemy.sql.expression.SelectBase.select") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.4: The [`SelectBase.select()`](#sqlalchemy.sql.expression.SelectBase.select
    "sqlalchemy.sql.expression.SelectBase.select") method is deprecated and will be
    removed in a future release; this method implicitly creates a subquery that should
    be explicit. Please call [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") first in order to create a subquery,
    which then can be selected.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: A [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") representing the columns that this
    SELECT statement or similar construct returns in its result set, not including
    [`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause "sqlalchemy.sql.expression.TextClause")
    constructs.
  prefs: []
  type: TYPE_NORMAL
- en: For a [`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect "sqlalchemy.sql.expression.CompoundSelect"),
    the [`CompoundSelect.selected_columns`](#sqlalchemy.sql.expression.CompoundSelect.selected_columns
    "sqlalchemy.sql.expression.CompoundSelect.selected_columns") attribute returns
    the selected columns of the first SELECT statement contained within the series
    of statements within the set operation.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.selected_columns`](#sqlalchemy.sql.expression.Select.selected_columns
    "sqlalchemy.sql.expression.Select.selected_columns")'
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: Apply a ‘grouping’ to this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  prefs: []
  type: TYPE_NORMAL
- en: This method is overridden by subclasses to return a “grouping” construct, i.e.
    parenthesis. In particular it’s used by “binary” expressions to provide a grouping
    around themselves when placed into a larger expression, as well as by [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs when placed into the FROM clause
    of another [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select").
    (Note that subqueries should be normally created using the [`Select.alias()`](#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") method, as many platforms require nested
    SELECT statements to be named).
  prefs: []
  type: TYPE_NORMAL
- en: As expressions are composed together, the application of [`self_group()`](#sqlalchemy.sql.expression.CompoundSelect.self_group
    "sqlalchemy.sql.expression.CompoundSelect.self_group") is automatic - end-user
    code should never need to use this method directly. Note that SQLAlchemy’s clause
    constructs take operator precedence into account - so parenthesis might not be
    needed, for example, in an expression like `x OR (y AND z)` - AND takes precedence
    over OR.
  prefs: []
  type: TYPE_NORMAL
- en: The base [`self_group()`](#sqlalchemy.sql.expression.CompoundSelect.self_group
    "sqlalchemy.sql.expression.CompoundSelect.self_group") method of [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") just returns self.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: Return a new selectable with the specified label style.
  prefs: []
  type: TYPE_NORMAL
- en: There are three “label styles” available, [`SelectLabelStyle.LABEL_STYLE_DISAMBIGUATE_ONLY`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_DISAMBIGUATE_ONLY
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_DISAMBIGUATE_ONLY"), [`SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL"),
    and [`SelectLabelStyle.LABEL_STYLE_NONE`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_NONE
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_NONE"). The default style
    is [`SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL").
  prefs: []
  type: TYPE_NORMAL
- en: In modern SQLAlchemy, there is not generally a need to change the labeling style,
    as per-expression labels are more effectively used by making use of the [`ColumnElement.label()`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.label
    "sqlalchemy.sql.expression.ColumnElement.label") method. In past versions, `LABEL_STYLE_TABLENAME_PLUS_COL`
    was used to disambiguate same-named columns from different tables, aliases, or
    subqueries; the newer `LABEL_STYLE_DISAMBIGUATE_ONLY` now applies labels only
    to names that conflict with an existing name so that the impact of this labeling
    is minimal.
  prefs: []
  type: TYPE_NORMAL
- en: The rationale for disambiguation is mostly so that all column expressions are
    available from a given [`FromClause.c`](#sqlalchemy.sql.expression.FromClause.c
    "sqlalchemy.sql.expression.FromClause.c") collection when a subquery is created.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4: - the [`GenerativeSelect.set_label_style()`](#sqlalchemy.sql.expression.GenerativeSelect.set_label_style
    "sqlalchemy.sql.expression.GenerativeSelect.set_label_style") method replaces
    the previous combination of `.apply_labels()`, `.with_labels()` and `use_labels=True`
    methods and/or parameters.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '`LABEL_STYLE_DISAMBIGUATE_ONLY`'
  prefs: []
  type: TYPE_NORMAL
- en: '`LABEL_STYLE_TABLENAME_PLUS_COL`'
  prefs: []
  type: TYPE_NORMAL
- en: '`LABEL_STYLE_NONE`'
  prefs: []
  type: TYPE_NORMAL
- en: '`LABEL_STYLE_DEFAULT`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`GenerativeSelect.slice()`](#sqlalchemy.sql.expression.GenerativeSelect.slice
    "sqlalchemy.sql.expression.GenerativeSelect.slice") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  prefs: []
  type: TYPE_NORMAL
- en: Apply LIMIT / OFFSET to this statement based on a slice.
  prefs: []
  type: TYPE_NORMAL
- en: The start and stop indices behave like the argument to Python’s built-in `range()`
    function. This method provides an alternative to using `LIMIT`/`OFFSET` to get
    a slice of the query.
  prefs: []
  type: TYPE_NORMAL
- en: For example,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: renders as
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The [`GenerativeSelect.slice()`](#sqlalchemy.sql.expression.GenerativeSelect.slice
    "sqlalchemy.sql.expression.GenerativeSelect.slice") method will replace any clause
    applied with [`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch").
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4: Added the [`GenerativeSelect.slice()`](#sqlalchemy.sql.expression.GenerativeSelect.slice
    "sqlalchemy.sql.expression.GenerativeSelect.slice") method generalized from the
    ORM.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a subquery of this [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase").
  prefs: []
  type: TYPE_NORMAL
- en: A subquery is from a SQL perspective a parenthesized, named construct that can
    be placed in the FROM clause of another SELECT statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'Given a SELECT statement such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'The above statement might look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'The subquery form by itself renders the same way, however when embedded into
    the FROM clause of another SELECT statement, it becomes a named sub-element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'The above renders as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: Historically, [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") is equivalent to calling the
    [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias "sqlalchemy.sql.expression.FromClause.alias")
    method on a FROM object; however, as a [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase") object is not directly FROM object, the
    [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery "sqlalchemy.sql.expression.SelectBase.subquery")
    method provides clearer semantics.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`GenerativeSelect.with_for_update()`](#sqlalchemy.sql.expression.GenerativeSelect.with_for_update
    "sqlalchemy.sql.expression.GenerativeSelect.with_for_update") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  prefs: []
  type: TYPE_NORMAL
- en: Specify a `FOR UPDATE` clause for this [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect").
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'On a database like PostgreSQL or Oracle, the above would render a statement
    like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'on other backends, the `nowait` option is ignored and instead would produce:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: When called with no arguments, the statement will render with the suffix `FOR
    UPDATE`. Additional arguments can then be provided which allow for common database-specific
    variants.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`nowait` – boolean; will render `FOR UPDATE NOWAIT` on Oracle and PostgreSQL
    dialects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`read` – boolean; will render `LOCK IN SHARE MODE` on MySQL, `FOR SHARE` on
    PostgreSQL. On PostgreSQL, when combined with `nowait`, will render `FOR SHARE
    NOWAIT`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`of` – SQL expression or list of SQL expression elements, (typically [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects or a compatible expression, for some backends
    may also be a table expression) which will render into a `FOR UPDATE OF` clause;
    supported by PostgreSQL, Oracle, some MySQL versions and possibly others. May
    render as a table or as a column depending on backend.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`skip_locked` – boolean, will render `FOR UPDATE SKIP LOCKED` on Oracle and
    PostgreSQL dialects or `FOR SHARE SKIP LOCKED` if `read=True` is also specified.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`key_share` – boolean, will render `FOR NO KEY UPDATE`, or if combined with
    `read=True` will render `FOR KEY SHARE`, on the PostgreSQL dialect.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: Represent a Common Table Expression.
  prefs: []
  type: TYPE_NORMAL
- en: The [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    object is obtained using the [`SelectBase.cte()`](#sqlalchemy.sql.expression.SelectBase.cte
    "sqlalchemy.sql.expression.SelectBase.cte") method from any SELECT statement.
    A less often available syntax also allows use of the [`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte
    "sqlalchemy.sql.expression.HasCTE.cte") method present on [DML](../glossary.html#term-DML)
    constructs such as [`Insert`](dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert"),
    [`Update`](dml.html#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    and [`Delete`](dml.html#sqlalchemy.sql.expression.Delete "sqlalchemy.sql.expression.Delete").
    See the [`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte "sqlalchemy.sql.expression.HasCTE.cte")
    method for usage details on CTEs.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Subqueries and CTEs](../tutorial/data_select.html#tutorial-subqueries-ctes)
    - in the 2.0 tutorial'
  prefs: []
  type: TYPE_NORMAL
- en: '[`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte "sqlalchemy.sql.expression.HasCTE.cte")
    - examples of calling styles'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[alias()](#sqlalchemy.sql.expression.CTE.alias), [union()](#sqlalchemy.sql.expression.CTE.union),
    [union_all()](#sqlalchemy.sql.expression.CTE.union_all)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.expression.CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    (`sqlalchemy.sql.roles.DMLTableRole`, `sqlalchemy.sql.roles.IsCTERole`, `sqlalchemy.sql.expression.Generative`,
    [`sqlalchemy.sql.expression.HasPrefixes`](#sqlalchemy.sql.expression.HasPrefixes
    "sqlalchemy.sql.expression.HasPrefixes"), [`sqlalchemy.sql.expression.HasSuffixes`](#sqlalchemy.sql.expression.HasSuffixes
    "sqlalchemy.sql.expression.HasSuffixes"), [`sqlalchemy.sql.expression.AliasedReturnsRows`](#sqlalchemy.sql.expression.AliasedReturnsRows
    "sqlalchemy.sql.expression.AliasedReturnsRows"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: Return an [`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    of this [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE").
  prefs: []
  type: TYPE_NORMAL
- en: This method is a CTE-specific specialization of the [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") method.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Using Aliases](../tutorial/data_select.html#tutorial-using-aliases)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`alias()`](#sqlalchemy.sql.expression.alias "sqlalchemy.sql.expression.alias")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    with a SQL `UNION` of the original CTE against the given selectables provided
    as positional arguments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***other** –'
  prefs: []
  type: TYPE_NORMAL
- en: one or more elements with which to create a UNION.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4.28: multiple elements are now accepted.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte "sqlalchemy.sql.expression.HasCTE.cte")
    - examples of calling styles'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    with a SQL `UNION ALL` of the original CTE against the given selectables provided
    as positional arguments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***other** –'
  prefs: []
  type: TYPE_NORMAL
- en: one or more elements with which to create a UNION.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4.28: multiple elements are now accepted.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte "sqlalchemy.sql.expression.HasCTE.cte")
    - examples of calling styles'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: Mark a [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") as supporting execution.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Executable`](#sqlalchemy.sql.expression.Executable "sqlalchemy.sql.expression.Executable")
    is a superclass for all “statement” types of objects, including [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select"), [`delete()`](dml.html#sqlalchemy.sql.expression.delete
    "sqlalchemy.sql.expression.delete"), [`update()`](dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update"), [`insert()`](dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert"), [`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text").'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[execution_options()](#sqlalchemy.sql.expression.Executable.execution_options),
    [get_execution_options()](#sqlalchemy.sql.expression.Executable.get_execution_options),
    [options()](#sqlalchemy.sql.expression.Executable.options)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.expression.Executable`](#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable") (`sqlalchemy.sql.roles.StatementRole`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: Set non-SQL options for the statement which take effect during execution.
  prefs: []
  type: TYPE_NORMAL
- en: Execution options can be set at many scopes, including per-statement, per-connection,
    or per execution, using methods such as [`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") and parameters which accept
    a dictionary of options such as [`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute") and [`Session.execute.execution_options`](../orm/session_api.html#sqlalchemy.orm.Session.execute.params.execution_options
    "sqlalchemy.orm.Session.execute").
  prefs: []
  type: TYPE_NORMAL
- en: The primary characteristic of an execution option, as opposed to other kinds
    of options such as ORM loader options, is that **execution options never affect
    the compiled SQL of a query, only things that affect how the SQL statement itself
    is invoked or how results are fetched**. That is, execution options are not part
    of what’s accommodated by SQL compilation nor are they considered part of the
    cached state of a statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") method is [generative](../glossary.html#term-generative),
    as is the case for the method as applied to the [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") and [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") objects, which means when the method is called, a copy
    of the object is returned, which applies the given parameters to that new copy,
    but leaves the original unchanged:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: An exception to this behavior is the [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object, where the [`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") method is explicitly **not**
    generative.
  prefs: []
  type: TYPE_NORMAL
- en: 'The kinds of options that may be passed to [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") and other related methods
    and parameter dictionaries include parameters that are explicitly consumed by
    SQLAlchemy Core or ORM, as well as arbitrary keyword arguments not defined by
    SQLAlchemy, which means the methods and/or parameter dictionaries may be used
    for user-defined parameters that interact with custom code, which may access the
    parameters using methods such as [`Executable.get_execution_options()`](#sqlalchemy.sql.expression.Executable.get_execution_options
    "sqlalchemy.sql.expression.Executable.get_execution_options") and [`Connection.get_execution_options()`](connections.html#sqlalchemy.engine.Connection.get_execution_options
    "sqlalchemy.engine.Connection.get_execution_options"), or within selected event
    hooks using a dedicated `execution_options` event parameter such as [`ConnectionEvents.before_execute.execution_options`](events.html#sqlalchemy.events.ConnectionEvents.before_execute.params.execution_options
    "sqlalchemy.events.ConnectionEvents.before_execute") or [`ORMExecuteState.execution_options`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.execution_options
    "sqlalchemy.orm.ORMExecuteState.execution_options"), e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: 'Within the scope of options that are explicitly recognized by SQLAlchemy, most
    apply to specific classes of objects and not others. The most common execution
    options include:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Connection.execution_options.isolation_level`](connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") - sets the isolation level for
    a connection or a class of connections via an [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"). This option is accepted only by [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") or [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Connection.execution_options.stream_results`](connections.html#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") - indicates results should be
    fetched using a server side cursor; this option is accepted by [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"), by the [`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute") parameter on [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute"), and additionally by [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") on a SQL statement object,
    as well as by ORM constructs like [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Connection.execution_options.compiled_cache`](connections.html#sqlalchemy.engine.Connection.execution_options.params.compiled_cache
    "sqlalchemy.engine.Connection.execution_options") - indicates a dictionary that
    will serve as the [SQL compilation cache](connections.html#sql-caching) for a
    [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    or [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine"),
    as well as for ORM methods like [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute"). Can be passed as `None` to disable caching
    for statements. This option is not accepted by [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") as it is inadvisable
    to carry along a compilation cache within a statement object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Connection.execution_options.schema_translate_map`](connections.html#sqlalchemy.engine.Connection.execution_options.params.schema_translate_map
    "sqlalchemy.engine.Connection.execution_options") - a mapping of schema names
    used by the [Schema Translate Map](connections.html#schema-translating) feature,
    accepted by [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine"),
    [`Executable`](#sqlalchemy.sql.expression.Executable "sqlalchemy.sql.expression.Executable"),
    as well as by ORM constructs like [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.execute.execution_options`](../orm/session_api.html#sqlalchemy.orm.Session.execute.params.execution_options
    "sqlalchemy.orm.Session.execute")'
  prefs: []
  type: TYPE_NORMAL
- en: '[ORM Execution Options](../orm/queryguide/api.html#orm-queryguide-execution-options)
    - documentation on all ORM-specific execution options'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: Get the non-SQL options which will take effect during execution.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.3.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: Apply options to this statement.
  prefs: []
  type: TYPE_NORMAL
- en: In the general sense, options are any kind of Python object that can be interpreted
    by the SQL compiler for the statement. These options can be consumed by specific
    dialects or specific kinds of compilers.
  prefs: []
  type: TYPE_NORMAL
- en: The most commonly known kind of option are the ORM level options that apply
    “eager load” and other loading behaviors to an ORM query. However, options can
    theoretically be used for many other purposes.
  prefs: []
  type: TYPE_NORMAL
- en: For background on specific kinds of options for specific kinds of statements,
    refer to the documentation for those option objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: - added [`Executable.options()`](#sqlalchemy.sql.expression.Executable.options
    "sqlalchemy.sql.expression.Executable.options") to Core statement objects towards
    the goal of allowing unified Core / ORM querying capabilities.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Column Loading Options](../orm/queryguide/columns.html#loading-columns) -
    refers to options specific to the usage of ORM queries'
  prefs: []
  type: TYPE_NORMAL
- en: '[Relationship Loading with Loader Options](../orm/queryguide/relationships.html#relationship-loader-options)
    - refers to options specific to the usage of ORM queries'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: Represent an `EXISTS` clause.
  prefs: []
  type: TYPE_NORMAL
- en: See [`exists()`](#sqlalchemy.sql.expression.exists "sqlalchemy.sql.expression.exists")
    for a description of usage.
  prefs: []
  type: TYPE_NORMAL
- en: An `EXISTS` clause can also be constructed from a [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") instance by calling [`SelectBase.exists()`](#sqlalchemy.sql.expression.SelectBase.exists
    "sqlalchemy.sql.expression.SelectBase.exists").
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[correlate()](#sqlalchemy.sql.expression.Exists.correlate), [correlate_except()](#sqlalchemy.sql.expression.Exists.correlate_except),
    [inherit_cache](#sqlalchemy.sql.expression.Exists.inherit_cache), [select()](#sqlalchemy.sql.expression.Exists.select),
    [select_from()](#sqlalchemy.sql.expression.Exists.select_from), [where()](#sqlalchemy.sql.expression.Exists.where)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.expression.Exists`](#sqlalchemy.sql.expression.Exists
    "sqlalchemy.sql.expression.Exists") ([`sqlalchemy.sql.expression.UnaryExpression`](sqlelement.html#sqlalchemy.sql.expression.UnaryExpression
    "sqlalchemy.sql.expression.UnaryExpression"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: Apply correlation to the subquery noted by this [`Exists`](#sqlalchemy.sql.expression.Exists
    "sqlalchemy.sql.expression.Exists").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ScalarSelect.correlate()`](#sqlalchemy.sql.expression.ScalarSelect.correlate
    "sqlalchemy.sql.expression.ScalarSelect.correlate")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: Apply correlation to the subquery noted by this [`Exists`](#sqlalchemy.sql.expression.Exists
    "sqlalchemy.sql.expression.Exists").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ScalarSelect.correlate_except()`](#sqlalchemy.sql.expression.ScalarSelect.correlate_except
    "sqlalchemy.sql.expression.ScalarSelect.correlate_except")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: Indicate if this [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") instance should make use of the cache
    key generation scheme used by its immediate superclass.
  prefs: []
  type: TYPE_NORMAL
- en: The attribute defaults to `None`, which indicates that a construct has not yet
    taken into account whether or not its appropriate for it to participate in caching;
    this is functionally equivalent to setting the value to `False`, except that a
    warning is also emitted.
  prefs: []
  type: TYPE_NORMAL
- en: This flag can be set to `True` on a particular class, if the SQL that corresponds
    to the object does not change based on attributes which are local to this class,
    and not its superclass.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Enabling Caching Support for Custom Constructs](compiler.html#compilerext-caching)
    - General guideslines for setting the [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute for third-party
    or user defined SQL constructs.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: Return a SELECT of this [`Exists`](#sqlalchemy.sql.expression.Exists "sqlalchemy.sql.expression.Exists").
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: 'This will produce a statement resembling:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    - general purpose method which allows for arbitrary column lists.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`Exists`](#sqlalchemy.sql.expression.Exists "sqlalchemy.sql.expression.Exists")
    construct, applying the given expression to the [`Select.select_from()`](#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") method of the select statement
    contained.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: it is typically preferable to build a [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") statement first, including the desired WHERE
    clause, then use the [`SelectBase.exists()`](#sqlalchemy.sql.expression.SelectBase.exists
    "sqlalchemy.sql.expression.SelectBase.exists") method to produce an [`Exists`](#sqlalchemy.sql.expression.Exists
    "sqlalchemy.sql.expression.Exists") object at once.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`exists()`](#sqlalchemy.sql.expression.exists "sqlalchemy.sql.expression.exists")
    construct with the given expression added to its WHERE clause, joined to the existing
    clause via AND, if any.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: it is typically preferable to build a [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") statement first, including the desired WHERE
    clause, then use the [`SelectBase.exists()`](#sqlalchemy.sql.expression.SelectBase.exists
    "sqlalchemy.sql.expression.SelectBase.exists") method to produce an [`Exists`](#sqlalchemy.sql.expression.Exists
    "sqlalchemy.sql.expression.Exists") object at once.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: Represent an element that can be used within the `FROM` clause of a `SELECT`
    statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most common forms of [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") are the [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") and the [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs. Key features common to all [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") objects include:'
  prefs: []
  type: TYPE_NORMAL
- en: a [`c`](#sqlalchemy.sql.expression.FromClause.c "sqlalchemy.sql.expression.FromClause.c")
    collection, which provides per-name access to a collection of [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") objects.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a [`primary_key`](#sqlalchemy.sql.expression.FromClause.primary_key "sqlalchemy.sql.expression.FromClause.primary_key")
    attribute, which is a collection of all those [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") objects that indicate the `primary_key`
    flag.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Methods to generate various derivations of a “from” clause, including [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias"), [`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join"), [`FromClause.select()`](#sqlalchemy.sql.expression.FromClause.select
    "sqlalchemy.sql.expression.FromClause.select").
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[alias()](#sqlalchemy.sql.expression.FromClause.alias), [c](#sqlalchemy.sql.expression.FromClause.c),
    [columns](#sqlalchemy.sql.expression.FromClause.columns), [description](#sqlalchemy.sql.expression.FromClause.description),
    [entity_namespace](#sqlalchemy.sql.expression.FromClause.entity_namespace), [exported_columns](#sqlalchemy.sql.expression.FromClause.exported_columns),
    [foreign_keys](#sqlalchemy.sql.expression.FromClause.foreign_keys), [is_derived_from()](#sqlalchemy.sql.expression.FromClause.is_derived_from),
    [join()](#sqlalchemy.sql.expression.FromClause.join), [outerjoin()](#sqlalchemy.sql.expression.FromClause.outerjoin),
    [primary_key](#sqlalchemy.sql.expression.FromClause.primary_key), [schema](#sqlalchemy.sql.expression.FromClause.schema),
    [select()](#sqlalchemy.sql.expression.FromClause.select), [tablesample()](#sqlalchemy.sql.expression.FromClause.tablesample)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.expression.FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") (`sqlalchemy.sql.roles.AnonymizedFromClauseRole`,
    [`sqlalchemy.sql.expression.Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: Return an alias of this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: The above code creates an [`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    object which can be used as a FROM clause in any SELECT statement.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Using Aliases](../tutorial/data_select.html#tutorial-using-aliases)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`alias()`](#sqlalchemy.sql.expression.alias "sqlalchemy.sql.expression.alias")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: A synonym for [`FromClause.columns`](#sqlalchemy.sql.expression.FromClause.columns
    "sqlalchemy.sql.expression.FromClause.columns")
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: A named-based collection of [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") objects maintained by this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`columns`](#sqlalchemy.sql.expression.FromClause.columns "sqlalchemy.sql.expression.FromClause.columns"),
    or [`c`](#sqlalchemy.sql.expression.FromClause.c "sqlalchemy.sql.expression.FromClause.c")
    collection, is the gateway to the construction of SQL expressions using table-bound
    or other selectable-bound columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: A brief description of this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: Used primarily for error message formatting.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: Return a namespace used for name-based access in SQL expressions.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the namespace that is used to resolve “filter_by()” type expressions,
    such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: It defaults to the `.c` collection, however internally it can be overridden
    using the “entity_namespace” annotation to deliver alternative results.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: A [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") that represents the “exported” columns
    of this [`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable").
  prefs: []
  type: TYPE_NORMAL
- en: The “exported” columns for a [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") object are synonymous with the [`FromClause.columns`](#sqlalchemy.sql.expression.FromClause.columns
    "sqlalchemy.sql.expression.FromClause.columns") collection.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`SelectBase.exported_columns`](#sqlalchemy.sql.expression.SelectBase.exported_columns
    "sqlalchemy.sql.expression.SelectBase.exported_columns")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: Return the collection of [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") marker objects which this FromClause references.
  prefs: []
  type: TYPE_NORMAL
- en: Each [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    is a member of a [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")-wide
    [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Table.foreign_key_constraints`](metadata.html#sqlalchemy.schema.Table.foreign_key_constraints
    "sqlalchemy.schema.Table.foreign_key_constraints")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: Return `True` if this [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    is ‘derived’ from the given `FromClause`.
  prefs: []
  type: TYPE_NORMAL
- en: An example would be an Alias of a Table is derived from that Table.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: Return a [`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    from this [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    to another [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: 'would emit SQL along the lines of:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`right` – the right side of the join; this is any [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") object such as a [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object, and may also be a selectable-compatible object
    such as an ORM-mapped class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onclause` – a SQL expression representing the ON clause of the join. If left
    at `None`, [`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join "sqlalchemy.sql.expression.FromClause.join")
    will attempt to join the two tables based on a foreign key relationship.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`isouter` – if True, render a LEFT OUTER JOIN, instead of JOIN.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`full` – if True, render a FULL OUTER JOIN, instead of LEFT OUTER JOIN. Implies
    [`FromClause.join.isouter`](#sqlalchemy.sql.expression.FromClause.join.params.isouter
    "sqlalchemy.sql.expression.FromClause.join").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`join()`](#sqlalchemy.sql.expression.join "sqlalchemy.sql.expression.join")
    - standalone function'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    - the type of object produced'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: Return a [`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    from this [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    to another [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause"),
    with the “isouter” flag set to True.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: 'The above is equivalent to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`right` – the right side of the join; this is any [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") object such as a [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object, and may also be a selectable-compatible object
    such as an ORM-mapped class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onclause` – a SQL expression representing the ON clause of the join. If left
    at `None`, [`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join "sqlalchemy.sql.expression.FromClause.join")
    will attempt to join the two tables based on a foreign key relationship.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`full` – if True, render a FULL OUTER JOIN, instead of LEFT OUTER JOIN.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join "sqlalchemy.sql.expression.FromClause.join")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: Return the iterable collection of [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects which comprise the primary key of this `_selectable.FromClause`.
  prefs: []
  type: TYPE_NORMAL
- en: For a [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object, this collection is represented by the [`PrimaryKeyConstraint`](constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") which itself is an iterable collection
    of [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    objects.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: Define the ‘schema’ attribute for this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: This is typically `None` for most objects except that of [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), where it is taken as the value of the [`Table.schema`](metadata.html#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table") argument.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: Return a SELECT of this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    - general purpose method which allows for arbitrary column lists.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: Return a TABLESAMPLE alias of this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: The return value is the [`TableSample`](#sqlalchemy.sql.expression.TableSample
    "sqlalchemy.sql.expression.TableSample") construct also provided by the top-level
    [`tablesample()`](#sqlalchemy.sql.expression.tablesample "sqlalchemy.sql.expression.tablesample")
    function.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`tablesample()`](#sqlalchemy.sql.expression.tablesample "sqlalchemy.sql.expression.tablesample")
    - usage guidelines and parameters'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: Base class for SELECT statements where additional elements can be added.
  prefs: []
  type: TYPE_NORMAL
- en: This serves as the base for [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    and [`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect "sqlalchemy.sql.expression.CompoundSelect")
    where elements such as ORDER BY, GROUP BY can be added and column rendering can
    be controlled. Compare to [`TextualSelect`](#sqlalchemy.sql.expression.TextualSelect
    "sqlalchemy.sql.expression.TextualSelect"), which, while it subclasses [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase") and is also a SELECT construct, represents
    a fixed textual string which cannot be altered at this level, only wrapped as
    a subquery.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[fetch()](#sqlalchemy.sql.expression.GenerativeSelect.fetch), [get_label_style()](#sqlalchemy.sql.expression.GenerativeSelect.get_label_style),
    [group_by()](#sqlalchemy.sql.expression.GenerativeSelect.group_by), [limit()](#sqlalchemy.sql.expression.GenerativeSelect.limit),
    [offset()](#sqlalchemy.sql.expression.GenerativeSelect.offset), [order_by()](#sqlalchemy.sql.expression.GenerativeSelect.order_by),
    [set_label_style()](#sqlalchemy.sql.expression.GenerativeSelect.set_label_style),
    [slice()](#sqlalchemy.sql.expression.GenerativeSelect.slice), [with_for_update()](#sqlalchemy.sql.expression.GenerativeSelect.with_for_update)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.expression.GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect") ([`sqlalchemy.sql.expression.SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase"), `sqlalchemy.sql.expression.Generative`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: Return a new selectable with the given FETCH FIRST criterion applied.
  prefs: []
  type: TYPE_NORMAL
- en: This is a numeric value which usually renders as `FETCH {FIRST | NEXT} [ count
    ] {ROW | ROWS} {ONLY | WITH TIES}` expression in the resulting select. This functionality
    is is currently implemented for Oracle, PostgreSQL, MSSQL.
  prefs: []
  type: TYPE_NORMAL
- en: Use [`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset") to specify the offset.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The [`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch") method will replace any clause
    applied with [`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit").
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`count` – an integer COUNT parameter, or a SQL expression that provides an
    integer result. When `percent=True` this will represent the percentage of rows
    to return, not the absolute value. Pass `None` to reset it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`with_ties` – When `True`, the WITH TIES option is used to return any additional
    rows that tie for the last place in the result set according to the `ORDER BY`
    clause. The `ORDER BY` may be mandatory in this case. Defaults to `False`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`percent` – When `True`, `count` represents the percentage of the total number
    of selected rows to return. Defaults to `False`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: Retrieve the current label style.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: Return a new selectable with the given list of GROUP BY criterion applied.
  prefs: []
  type: TYPE_NORMAL
- en: All existing GROUP BY settings can be suppressed by passing `None`.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***clauses** – a series of [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") constructs which will be used to generate
    an GROUP BY clause.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Aggregate functions with GROUP BY / HAVING](../tutorial/data_select.html#tutorial-group-by-w-aggregates)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Ordering or Grouping by a Label](../tutorial/data_select.html#tutorial-order-by-label)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: Return a new selectable with the given LIMIT criterion applied.
  prefs: []
  type: TYPE_NORMAL
- en: This is a numerical value which usually renders as a `LIMIT` expression in the
    resulting select. Backends that don’t support `LIMIT` will attempt to provide
    similar functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The [`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit") method will replace any clause
    applied with [`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**limit** – an integer LIMIT parameter, or a SQL expression that provides an
    integer result. Pass `None` to reset it.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: Return a new selectable with the given OFFSET criterion applied.
  prefs: []
  type: TYPE_NORMAL
- en: This is a numeric value which usually renders as an `OFFSET` expression in the
    resulting select. Backends that don’t support `OFFSET` will attempt to provide
    similar functionality.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**offset** – an integer OFFSET parameter, or a SQL expression that provides
    an integer result. Pass `None` to reset it.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: Return a new selectable with the given list of ORDER BY criteria applied.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: 'Calling this method multiple times is equivalent to calling it once with all
    the clauses concatenated. All existing ORDER BY criteria may be cancelled by passing
    `None` by itself. New ORDER BY criteria may then be added by invoking [`Query.order_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.order_by
    "sqlalchemy.orm.Query.order_by") again, e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***clauses** – a series of [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") constructs which will be used to generate
    an ORDER BY clause.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[ORDER BY](../tutorial/data_select.html#tutorial-order-by) - in the [SQLAlchemy
    Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Ordering or Grouping by a Label](../tutorial/data_select.html#tutorial-order-by-label)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: Return a new selectable with the specified label style.
  prefs: []
  type: TYPE_NORMAL
- en: There are three “label styles” available, [`SelectLabelStyle.LABEL_STYLE_DISAMBIGUATE_ONLY`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_DISAMBIGUATE_ONLY
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_DISAMBIGUATE_ONLY"), [`SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL"),
    and [`SelectLabelStyle.LABEL_STYLE_NONE`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_NONE
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_NONE"). The default style
    is [`SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL").
  prefs: []
  type: TYPE_NORMAL
- en: In modern SQLAlchemy, there is not generally a need to change the labeling style,
    as per-expression labels are more effectively used by making use of the [`ColumnElement.label()`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.label
    "sqlalchemy.sql.expression.ColumnElement.label") method. In past versions, `LABEL_STYLE_TABLENAME_PLUS_COL`
    was used to disambiguate same-named columns from different tables, aliases, or
    subqueries; the newer `LABEL_STYLE_DISAMBIGUATE_ONLY` now applies labels only
    to names that conflict with an existing name so that the impact of this labeling
    is minimal.
  prefs: []
  type: TYPE_NORMAL
- en: The rationale for disambiguation is mostly so that all column expressions are
    available from a given [`FromClause.c`](#sqlalchemy.sql.expression.FromClause.c
    "sqlalchemy.sql.expression.FromClause.c") collection when a subquery is created.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4: - the [`GenerativeSelect.set_label_style()`](#sqlalchemy.sql.expression.GenerativeSelect.set_label_style
    "sqlalchemy.sql.expression.GenerativeSelect.set_label_style") method replaces
    the previous combination of `.apply_labels()`, `.with_labels()` and `use_labels=True`
    methods and/or parameters.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '`LABEL_STYLE_DISAMBIGUATE_ONLY`'
  prefs: []
  type: TYPE_NORMAL
- en: '`LABEL_STYLE_TABLENAME_PLUS_COL`'
  prefs: []
  type: TYPE_NORMAL
- en: '`LABEL_STYLE_NONE`'
  prefs: []
  type: TYPE_NORMAL
- en: '`LABEL_STYLE_DEFAULT`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: Apply LIMIT / OFFSET to this statement based on a slice.
  prefs: []
  type: TYPE_NORMAL
- en: The start and stop indices behave like the argument to Python’s built-in `range()`
    function. This method provides an alternative to using `LIMIT`/`OFFSET` to get
    a slice of the query.
  prefs: []
  type: TYPE_NORMAL
- en: For example,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: renders as
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The [`GenerativeSelect.slice()`](#sqlalchemy.sql.expression.GenerativeSelect.slice
    "sqlalchemy.sql.expression.GenerativeSelect.slice") method will replace any clause
    applied with [`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch").
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4: Added the [`GenerativeSelect.slice()`](#sqlalchemy.sql.expression.GenerativeSelect.slice
    "sqlalchemy.sql.expression.GenerativeSelect.slice") method generalized from the
    ORM.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: Specify a `FOR UPDATE` clause for this [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect").
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: 'On a database like PostgreSQL or Oracle, the above would render a statement
    like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: 'on other backends, the `nowait` option is ignored and instead would produce:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: When called with no arguments, the statement will render with the suffix `FOR
    UPDATE`. Additional arguments can then be provided which allow for common database-specific
    variants.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`nowait` – boolean; will render `FOR UPDATE NOWAIT` on Oracle and PostgreSQL
    dialects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`read` – boolean; will render `LOCK IN SHARE MODE` on MySQL, `FOR SHARE` on
    PostgreSQL. On PostgreSQL, when combined with `nowait`, will render `FOR SHARE
    NOWAIT`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`of` – SQL expression or list of SQL expression elements, (typically [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects or a compatible expression, for some backends
    may also be a table expression) which will render into a `FOR UPDATE OF` clause;
    supported by PostgreSQL, Oracle, some MySQL versions and possibly others. May
    render as a table or as a column depending on backend.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`skip_locked` – boolean, will render `FOR UPDATE SKIP LOCKED` on Oracle and
    PostgreSQL dialects or `FOR SHARE SKIP LOCKED` if `read=True` is also specified.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`key_share` – boolean, will render `FOR NO KEY UPDATE`, or if combined with
    `read=True` will render `FOR KEY SHARE`, on the PostgreSQL dialect.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: Mixin that declares a class to include CTE support.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[add_cte()](#sqlalchemy.sql.expression.HasCTE.add_cte), [cte()](#sqlalchemy.sql.expression.HasCTE.cte)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.expression.HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE") (`sqlalchemy.sql.roles.HasCTERole`, `sqlalchemy.sql.expression.SelectsRows`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: Add one or more [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    constructs to this statement.
  prefs: []
  type: TYPE_NORMAL
- en: This method will associate the given [`CTE`](#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE") constructs with the parent statement such that
    they will each be unconditionally rendered in the WITH clause of the final statement,
    even if not referenced elsewhere within the statement or any sub-selects.
  prefs: []
  type: TYPE_NORMAL
- en: The optional [`HasCTE.add_cte.nest_here`](#sqlalchemy.sql.expression.HasCTE.add_cte.params.nest_here
    "sqlalchemy.sql.expression.HasCTE.add_cte") parameter when set to True will have
    the effect that each given [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    will render in a WITH clause rendered directly along with this statement, rather
    than being moved to the top of the ultimate rendered statement, even if this statement
    is rendered as a subquery within a larger statement.
  prefs: []
  type: TYPE_NORMAL
- en: This method has two general uses. One is to embed CTE statements that serve
    some purpose without being referenced explicitly, such as the use case of embedding
    a DML statement such as an INSERT or UPDATE as a CTE inline with a primary statement
    that may draw from its results indirectly. The other is to provide control over
    the exact placement of a particular series of CTE constructs that should remain
    rendered directly in terms of a particular statement that may be nested in a larger
    statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: 'Would render:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: Above, the “anon_1” CTE is not referenced in the SELECT statement, however still
    accomplishes the task of running an INSERT statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly in a DML-related context, using the PostgreSQL [`Insert`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Insert
    "sqlalchemy.dialects.postgresql.Insert") construct to generate an “upsert”:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: 'The above statement renders as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.4.21.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*ctes` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: zero or more [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    constructs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Changed in version 2.0: Multiple CTE instances are accepted'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`nest_here` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: if True, the given CTE or CTEs will be rendered as though they specified the
    [`HasCTE.cte.nesting`](#sqlalchemy.sql.expression.HasCTE.cte.params.nesting "sqlalchemy.sql.expression.HasCTE.cte")
    flag to `True` when they were added to this [`HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE"). Assuming the given CTEs are not referenced
    in an outer-enclosing statement as well, the CTEs given should render at the level
    of this statement when this flag is given.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`HasCTE.cte.nesting`](#sqlalchemy.sql.expression.HasCTE.cte.params.nesting
    "sqlalchemy.sql.expression.HasCTE.cte")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE"),
    or Common Table Expression instance.
  prefs: []
  type: TYPE_NORMAL
- en: Common table expressions are a SQL standard whereby SELECT statements can draw
    upon secondary statements specified along with the primary statement, using a
    clause called “WITH”. Special semantics regarding UNION can also be employed to
    allow “recursive” queries, where a SELECT statement can draw upon the set of rows
    that have previously been selected.
  prefs: []
  type: TYPE_NORMAL
- en: CTEs can also be applied to DML constructs UPDATE, INSERT and DELETE on some
    databases, both as a source of CTE rows when combined with RETURNING, as well
    as a consumer of CTE rows.
  prefs: []
  type: TYPE_NORMAL
- en: SQLAlchemy detects [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    objects, which are treated similarly to [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") objects, as special elements to be delivered
    to the FROM clause of the statement as well as to a WITH clause at the top of
    the statement.
  prefs: []
  type: TYPE_NORMAL
- en: For special prefixes such as PostgreSQL “MATERIALIZED” and “NOT MATERIALIZED”,
    the `CTE.prefix_with()` method may be used to establish these.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.3.13: Added support for prefixes. In particular - MATERIALIZED
    and NOT MATERIALIZED.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name` – name given to the common table expression. Like [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias"), the name can be left as `None`
    in which case an anonymous symbol will be used at query compile time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`recursive` – if `True`, will render `WITH RECURSIVE`. A recursive common table
    expression is intended to be used in conjunction with UNION ALL in order to derive
    rows from those already selected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nesting` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: if `True`, will render the CTE locally to the statement in which it is referenced.
    For more complex scenarios, the [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") method using the [`HasCTE.add_cte.nest_here`](#sqlalchemy.sql.expression.HasCTE.add_cte.params.nest_here
    "sqlalchemy.sql.expression.HasCTE.add_cte") parameter may also be used to more
    carefully control the exact placement of a particular CTE.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 1.4.24.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte "sqlalchemy.sql.expression.HasCTE.add_cte")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The following examples include two from PostgreSQL’s documentation at [https://www.postgresql.org/docs/current/static/queries-with.html](https://www.postgresql.org/docs/current/static/queries-with.html),
    as well as additional examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example 1, non recursive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: 'Example 2, WITH RECURSIVE:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: 'Example 3, an upsert using UPDATE and INSERT with CTEs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: 'Example 4, Nesting CTE (SQLAlchemy 1.4.24 and above):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: 'The above query will render the second CTE nested inside the first, shown with
    inline parameters below as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: 'The same CTE can be set up using the [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") method as follows (SQLAlchemy 2.0
    and above):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: 'Example 5, Non-Linear CTE (SQLAlchemy 1.4.28 and above):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: 'The above query will render 2 UNIONs inside the recursive CTE:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.cte()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.cte "sqlalchemy.orm.Query.cte")
    - ORM version of [`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte "sqlalchemy.sql.expression.HasCTE.cte").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[prefix_with()](#sqlalchemy.sql.expression.HasPrefixes.prefix_with)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: Add one or more expressions following the statement keyword, i.e. SELECT, INSERT,
    UPDATE, or DELETE. Generative.
  prefs: []
  type: TYPE_NORMAL
- en: This is used to support backend-specific prefix keywords such as those provided
    by MySQL.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE164]'
  prefs: []
  type: TYPE_PRE
- en: Multiple prefixes can be specified by multiple calls to [`HasPrefixes.prefix_with()`](#sqlalchemy.sql.expression.HasPrefixes.prefix_with
    "sqlalchemy.sql.expression.HasPrefixes.prefix_with").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*prefixes` – textual or [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") construct which will be rendered following
    the INSERT, UPDATE, or DELETE keyword.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dialect` – optional string dialect name which will limit rendering of this
    prefix to only that dialect.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE165]'
  prefs: []
  type: TYPE_PRE
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[suffix_with()](#sqlalchemy.sql.expression.HasSuffixes.suffix_with)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE166]'
  prefs: []
  type: TYPE_PRE
- en: Add one or more expressions following the statement as a whole.
  prefs: []
  type: TYPE_NORMAL
- en: This is used to support backend-specific suffix keywords on certain constructs.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE167]'
  prefs: []
  type: TYPE_PRE
- en: Multiple suffixes can be specified by multiple calls to [`HasSuffixes.suffix_with()`](#sqlalchemy.sql.expression.HasSuffixes.suffix_with
    "sqlalchemy.sql.expression.HasSuffixes.suffix_with").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*suffixes` – textual or [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") construct which will be rendered following
    the target clause.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dialect` – Optional string dialect name which will limit rendering of this
    suffix to only that dialect.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE168]'
  prefs: []
  type: TYPE_PRE
- en: Represent a `JOIN` construct between two [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") elements.
  prefs: []
  type: TYPE_NORMAL
- en: The public constructor function for [`Join`](#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") is the module-level [`join()`](#sqlalchemy.sql.expression.join
    "sqlalchemy.sql.expression.join") function, as well as the [`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join") method of any [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") (e.g. such as [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`join()`](#sqlalchemy.sql.expression.join "sqlalchemy.sql.expression.join")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join "sqlalchemy.sql.expression.FromClause.join")'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[__init__()](#sqlalchemy.sql.expression.Join.__init__), [description](#sqlalchemy.sql.expression.Join.description),
    [is_derived_from()](#sqlalchemy.sql.expression.Join.is_derived_from), [select()](#sqlalchemy.sql.expression.Join.select),
    [self_group()](#sqlalchemy.sql.expression.Join.self_group)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.expression.Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    (`sqlalchemy.sql.roles.DMLTableRole`, [`sqlalchemy.sql.expression.FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE169]'
  prefs: []
  type: TYPE_PRE
- en: Construct a new [`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join").
  prefs: []
  type: TYPE_NORMAL
- en: The usual entrypoint here is the [`join()`](#sqlalchemy.sql.expression.join
    "sqlalchemy.sql.expression.join") function or the [`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join") method of any [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE170]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE171]'
  prefs: []
  type: TYPE_PRE
- en: Return `True` if this [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    is ‘derived’ from the given `FromClause`.
  prefs: []
  type: TYPE_NORMAL
- en: An example would be an Alias of a Table is derived from that Table.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE172]'
  prefs: []
  type: TYPE_PRE
- en: Create a [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    from this [`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join").
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE173]'
  prefs: []
  type: TYPE_PRE
- en: 'The above will produce a SQL string resembling:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE174]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE175]'
  prefs: []
  type: TYPE_PRE
- en: Apply a ‘grouping’ to this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  prefs: []
  type: TYPE_NORMAL
- en: This method is overridden by subclasses to return a “grouping” construct, i.e.
    parenthesis. In particular it’s used by “binary” expressions to provide a grouping
    around themselves when placed into a larger expression, as well as by [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs when placed into the FROM clause
    of another [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select").
    (Note that subqueries should be normally created using the [`Select.alias()`](#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") method, as many platforms require nested
    SELECT statements to be named).
  prefs: []
  type: TYPE_NORMAL
- en: As expressions are composed together, the application of [`self_group()`](#sqlalchemy.sql.expression.Join.self_group
    "sqlalchemy.sql.expression.Join.self_group") is automatic - end-user code should
    never need to use this method directly. Note that SQLAlchemy’s clause constructs
    take operator precedence into account - so parenthesis might not be needed, for
    example, in an expression like `x OR (y AND z)` - AND takes precedence over OR.
  prefs: []
  type: TYPE_NORMAL
- en: The base [`self_group()`](#sqlalchemy.sql.expression.Join.self_group "sqlalchemy.sql.expression.Join.self_group")
    method of [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") just returns self.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE176]'
  prefs: []
  type: TYPE_PRE
- en: Represent a LATERAL subquery.
  prefs: []
  type: TYPE_NORMAL
- en: This object is constructed from the [`lateral()`](#sqlalchemy.sql.expression.lateral
    "sqlalchemy.sql.expression.lateral") module level function as well as the `FromClause.lateral()`
    method available on all [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    subclasses.
  prefs: []
  type: TYPE_NORMAL
- en: While LATERAL is part of the SQL standard, currently only more recent PostgreSQL
    versions provide support for this keyword.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[LATERAL correlation](../tutorial/data_select.html#tutorial-lateral-correlation)
    - overview of usage.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[inherit_cache](#sqlalchemy.sql.expression.Lateral.inherit_cache)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.expression.Lateral`](#sqlalchemy.sql.expression.Lateral
    "sqlalchemy.sql.expression.Lateral") (`sqlalchemy.sql.expression.FromClauseAlias`,
    `sqlalchemy.sql.expression.LateralFromClause`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE177]'
  prefs: []
  type: TYPE_PRE
- en: Indicate if this [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") instance should make use of the cache
    key generation scheme used by its immediate superclass.
  prefs: []
  type: TYPE_NORMAL
- en: The attribute defaults to `None`, which indicates that a construct has not yet
    taken into account whether or not its appropriate for it to participate in caching;
    this is functionally equivalent to setting the value to `False`, except that a
    warning is also emitted.
  prefs: []
  type: TYPE_NORMAL
- en: This flag can be set to `True` on a particular class, if the SQL that corresponds
    to the object does not change based on attributes which are local to this class,
    and not its superclass.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Enabling Caching Support for Custom Constructs](compiler.html#compilerext-caching)
    - General guideslines for setting the [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute for third-party
    or user defined SQL constructs.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE178]'
  prefs: []
  type: TYPE_PRE
- en: The base-most class for Core constructs that have some concept of columns that
    can represent rows.
  prefs: []
  type: TYPE_NORMAL
- en: While the SELECT statement and TABLE are the primary things we think of in this
    category, DML like INSERT, UPDATE and DELETE can also specify RETURNING which
    means they can be used in CTEs and other forms, and PostgreSQL has functions that
    return rows also.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[exported_columns](#sqlalchemy.sql.expression.ReturnsRows.exported_columns),
    [is_derived_from()](#sqlalchemy.sql.expression.ReturnsRows.is_derived_from)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.expression.ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows
    "sqlalchemy.sql.expression.ReturnsRows") (`sqlalchemy.sql.roles.ReturnsRowsRole`,
    `sqlalchemy.sql.expression.DQLDMLClauseElement`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE179]'
  prefs: []
  type: TYPE_PRE
- en: A [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") that represents the “exported” columns
    of this [`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows "sqlalchemy.sql.expression.ReturnsRows").
  prefs: []
  type: TYPE_NORMAL
- en: The “exported” columns represent the collection of [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") expressions that are rendered by this
    SQL construct. There are primary varieties which are the “FROM clause columns”
    of a FROM clause, such as a table, join, or subquery, the “SELECTed columns”,
    which are the columns in the “columns clause” of a SELECT statement, and the RETURNING
    columns in a DML statement..
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`FromClause.exported_columns`](#sqlalchemy.sql.expression.FromClause.exported_columns
    "sqlalchemy.sql.expression.FromClause.exported_columns")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`SelectBase.exported_columns`](#sqlalchemy.sql.expression.SelectBase.exported_columns
    "sqlalchemy.sql.expression.SelectBase.exported_columns")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE180]'
  prefs: []
  type: TYPE_PRE
- en: Return `True` if this [`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows
    "sqlalchemy.sql.expression.ReturnsRows") is ‘derived’ from the given [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: An example would be an Alias of a Table is derived from that Table.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE181]'
  prefs: []
  type: TYPE_PRE
- en: Represent a scalar subquery.
  prefs: []
  type: TYPE_NORMAL
- en: A [`ScalarSelect`](#sqlalchemy.sql.expression.ScalarSelect "sqlalchemy.sql.expression.ScalarSelect")
    is created by invoking the [`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery") method. The object then
    participates in other SQL expressions as a SQL column expression within the [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") hierarchy.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Scalar and Correlated Subqueries](../tutorial/data_select.html#tutorial-scalar-subquery)
    - in the 2.0 tutorial'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[correlate()](#sqlalchemy.sql.expression.ScalarSelect.correlate), [correlate_except()](#sqlalchemy.sql.expression.ScalarSelect.correlate_except),
    [inherit_cache](#sqlalchemy.sql.expression.ScalarSelect.inherit_cache), [self_group()](#sqlalchemy.sql.expression.ScalarSelect.self_group),
    [where()](#sqlalchemy.sql.expression.ScalarSelect.where)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.expression.ScalarSelect`](#sqlalchemy.sql.expression.ScalarSelect
    "sqlalchemy.sql.expression.ScalarSelect") (`sqlalchemy.sql.roles.InElementRole`,
    `sqlalchemy.sql.expression.Generative`, `sqlalchemy.sql.expression.GroupedElement`,
    [`sqlalchemy.sql.expression.ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE182]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`ScalarSelect`](#sqlalchemy.sql.expression.ScalarSelect "sqlalchemy.sql.expression.ScalarSelect")
    which will correlate the given FROM clauses to that of an enclosing [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select").
  prefs: []
  type: TYPE_NORMAL
- en: This method is mirrored from the [`Select.correlate()`](#sqlalchemy.sql.expression.Select.correlate
    "sqlalchemy.sql.expression.Select.correlate") method of the underlying [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select"). The method applies the :meth:_sql.Select.correlate`
    method, then returns a new [`ScalarSelect`](#sqlalchemy.sql.expression.ScalarSelect
    "sqlalchemy.sql.expression.ScalarSelect") against that statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4: Previously, the [`ScalarSelect.correlate()`](#sqlalchemy.sql.expression.ScalarSelect.correlate
    "sqlalchemy.sql.expression.ScalarSelect.correlate") method was only available
    from [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select").'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***fromclauses** – a list of one or more [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") constructs, or other compatible constructs
    (i.e. ORM-mapped classes) to become part of the correlate collection.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ScalarSelect.correlate_except()`](#sqlalchemy.sql.expression.ScalarSelect.correlate_except
    "sqlalchemy.sql.expression.ScalarSelect.correlate_except")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Scalar and Correlated Subqueries](../tutorial/data_select.html#tutorial-scalar-subquery)
    - in the 2.0 tutorial'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE183]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`ScalarSelect`](#sqlalchemy.sql.expression.ScalarSelect "sqlalchemy.sql.expression.ScalarSelect")
    which will omit the given FROM clauses from the auto-correlation process.
  prefs: []
  type: TYPE_NORMAL
- en: This method is mirrored from the [`Select.correlate_except()`](#sqlalchemy.sql.expression.Select.correlate_except
    "sqlalchemy.sql.expression.Select.correlate_except") method of the underlying
    [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select").
    The method applies the :meth:_sql.Select.correlate_except` method, then returns
    a new [`ScalarSelect`](#sqlalchemy.sql.expression.ScalarSelect "sqlalchemy.sql.expression.ScalarSelect")
    against that statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4: Previously, the [`ScalarSelect.correlate_except()`](#sqlalchemy.sql.expression.ScalarSelect.correlate_except
    "sqlalchemy.sql.expression.ScalarSelect.correlate_except") method was only available
    from [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select").'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***fromclauses** – a list of one or more [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") constructs, or other compatible constructs
    (i.e. ORM-mapped classes) to become part of the correlate-exception collection.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ScalarSelect.correlate()`](#sqlalchemy.sql.expression.ScalarSelect.correlate
    "sqlalchemy.sql.expression.ScalarSelect.correlate")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Scalar and Correlated Subqueries](../tutorial/data_select.html#tutorial-scalar-subquery)
    - in the 2.0 tutorial'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE184]'
  prefs: []
  type: TYPE_PRE
- en: Indicate if this [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") instance should make use of the cache
    key generation scheme used by its immediate superclass.
  prefs: []
  type: TYPE_NORMAL
- en: The attribute defaults to `None`, which indicates that a construct has not yet
    taken into account whether or not its appropriate for it to participate in caching;
    this is functionally equivalent to setting the value to `False`, except that a
    warning is also emitted.
  prefs: []
  type: TYPE_NORMAL
- en: This flag can be set to `True` on a particular class, if the SQL that corresponds
    to the object does not change based on attributes which are local to this class,
    and not its superclass.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Enabling Caching Support for Custom Constructs](compiler.html#compilerext-caching)
    - General guideslines for setting the [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute for third-party
    or user defined SQL constructs.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE185]'
  prefs: []
  type: TYPE_PRE
- en: Apply a ‘grouping’ to this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  prefs: []
  type: TYPE_NORMAL
- en: This method is overridden by subclasses to return a “grouping” construct, i.e.
    parenthesis. In particular it’s used by “binary” expressions to provide a grouping
    around themselves when placed into a larger expression, as well as by [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs when placed into the FROM clause
    of another [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select").
    (Note that subqueries should be normally created using the [`Select.alias()`](#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") method, as many platforms require nested
    SELECT statements to be named).
  prefs: []
  type: TYPE_NORMAL
- en: As expressions are composed together, the application of [`self_group()`](#sqlalchemy.sql.expression.ScalarSelect.self_group
    "sqlalchemy.sql.expression.ScalarSelect.self_group") is automatic - end-user code
    should never need to use this method directly. Note that SQLAlchemy’s clause constructs
    take operator precedence into account - so parenthesis might not be needed, for
    example, in an expression like `x OR (y AND z)` - AND takes precedence over OR.
  prefs: []
  type: TYPE_NORMAL
- en: The base [`self_group()`](#sqlalchemy.sql.expression.ScalarSelect.self_group
    "sqlalchemy.sql.expression.ScalarSelect.self_group") method of [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") just returns self.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE186]'
  prefs: []
  type: TYPE_PRE
- en: Apply a WHERE clause to the SELECT statement referred to by this [`ScalarSelect`](#sqlalchemy.sql.expression.ScalarSelect
    "sqlalchemy.sql.expression.ScalarSelect").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE187]'
  prefs: []
  type: TYPE_PRE
- en: Represents a `SELECT` statement.
  prefs: []
  type: TYPE_NORMAL
- en: The [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    object is normally constructed using the [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") function. See that function for details.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Using SELECT Statements](../tutorial/data_select.html#tutorial-selecting-data)
    - in the 2.0 tutorial'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[__init__()](#sqlalchemy.sql.expression.Select.__init__), [add_columns()](#sqlalchemy.sql.expression.Select.add_columns),
    [add_cte()](#sqlalchemy.sql.expression.Select.add_cte), [alias()](#sqlalchemy.sql.expression.Select.alias),
    [as_scalar()](#sqlalchemy.sql.expression.Select.as_scalar), [c](#sqlalchemy.sql.expression.Select.c),
    [column()](#sqlalchemy.sql.expression.Select.column), [column_descriptions](#sqlalchemy.sql.expression.Select.column_descriptions),
    [columns_clause_froms](#sqlalchemy.sql.expression.Select.columns_clause_froms),
    [correlate()](#sqlalchemy.sql.expression.Select.correlate), [correlate_except()](#sqlalchemy.sql.expression.Select.correlate_except),
    [corresponding_column()](#sqlalchemy.sql.expression.Select.corresponding_column),
    [cte()](#sqlalchemy.sql.expression.Select.cte), [distinct()](#sqlalchemy.sql.expression.Select.distinct),
    [except_()](#sqlalchemy.sql.expression.Select.except_), [except_all()](#sqlalchemy.sql.expression.Select.except_all),
    [execution_options()](#sqlalchemy.sql.expression.Select.execution_options), [exists()](#sqlalchemy.sql.expression.Select.exists),
    [exported_columns](#sqlalchemy.sql.expression.Select.exported_columns), [fetch()](#sqlalchemy.sql.expression.Select.fetch),
    [filter()](#sqlalchemy.sql.expression.Select.filter), [filter_by()](#sqlalchemy.sql.expression.Select.filter_by),
    [from_statement()](#sqlalchemy.sql.expression.Select.from_statement), [froms](#sqlalchemy.sql.expression.Select.froms),
    [get_children()](#sqlalchemy.sql.expression.Select.get_children), [get_execution_options()](#sqlalchemy.sql.expression.Select.get_execution_options),
    [get_final_froms()](#sqlalchemy.sql.expression.Select.get_final_froms), [get_label_style()](#sqlalchemy.sql.expression.Select.get_label_style),
    [group_by()](#sqlalchemy.sql.expression.Select.group_by), [having()](#sqlalchemy.sql.expression.Select.having),
    [inherit_cache](#sqlalchemy.sql.expression.Select.inherit_cache), [inner_columns](#sqlalchemy.sql.expression.Select.inner_columns),
    [intersect()](#sqlalchemy.sql.expression.Select.intersect), [intersect_all()](#sqlalchemy.sql.expression.Select.intersect_all),
    [is_derived_from()](#sqlalchemy.sql.expression.Select.is_derived_from), [join()](#sqlalchemy.sql.expression.Select.join),
    [join_from()](#sqlalchemy.sql.expression.Select.join_from), [label()](#sqlalchemy.sql.expression.Select.label),
    [lateral()](#sqlalchemy.sql.expression.Select.lateral), [limit()](#sqlalchemy.sql.expression.Select.limit),
    [offset()](#sqlalchemy.sql.expression.Select.offset), [options()](#sqlalchemy.sql.expression.Select.options),
    [order_by()](#sqlalchemy.sql.expression.Select.order_by), [outerjoin()](#sqlalchemy.sql.expression.Select.outerjoin),
    [outerjoin_from()](#sqlalchemy.sql.expression.Select.outerjoin_from), [prefix_with()](#sqlalchemy.sql.expression.Select.prefix_with),
    [reduce_columns()](#sqlalchemy.sql.expression.Select.reduce_columns), [replace_selectable()](#sqlalchemy.sql.expression.Select.replace_selectable),
    [scalar_subquery()](#sqlalchemy.sql.expression.Select.scalar_subquery), [select()](#sqlalchemy.sql.expression.Select.select),
    [select_from()](#sqlalchemy.sql.expression.Select.select_from), [selected_columns](#sqlalchemy.sql.expression.Select.selected_columns),
    [self_group()](#sqlalchemy.sql.expression.Select.self_group), [set_label_style()](#sqlalchemy.sql.expression.Select.set_label_style),
    [slice()](#sqlalchemy.sql.expression.Select.slice), [subquery()](#sqlalchemy.sql.expression.Select.subquery),
    [suffix_with()](#sqlalchemy.sql.expression.Select.suffix_with), [union()](#sqlalchemy.sql.expression.Select.union),
    [union_all()](#sqlalchemy.sql.expression.Select.union_all), [where()](#sqlalchemy.sql.expression.Select.where),
    [whereclause](#sqlalchemy.sql.expression.Select.whereclause), [with_for_update()](#sqlalchemy.sql.expression.Select.with_for_update),
    [with_hint()](#sqlalchemy.sql.expression.Select.with_hint), [with_only_columns()](#sqlalchemy.sql.expression.Select.with_only_columns),
    [with_statement_hint()](#sqlalchemy.sql.expression.Select.with_statement_hint)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.expression.Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") ([`sqlalchemy.sql.expression.HasPrefixes`](#sqlalchemy.sql.expression.HasPrefixes
    "sqlalchemy.sql.expression.HasPrefixes"), [`sqlalchemy.sql.expression.HasSuffixes`](#sqlalchemy.sql.expression.HasSuffixes
    "sqlalchemy.sql.expression.HasSuffixes"), `sqlalchemy.sql.expression.HasHints`,
    `sqlalchemy.sql.expression.HasCompileState`, `sqlalchemy.sql.expression._SelectFromElements`,
    [`sqlalchemy.sql.expression.GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect"), `sqlalchemy.sql.expression.TypedReturnsRows`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE188]'
  prefs: []
  type: TYPE_PRE
- en: Construct a new [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select").
  prefs: []
  type: TYPE_NORMAL
- en: The public constructor for [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    is the [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE189]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    construct with the given entities appended to its columns clause.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE190]'
  prefs: []
  type: TYPE_PRE
- en: The original expressions in the columns clause remain in place. To replace the
    original expressions with new ones, see the method [`Select.with_only_columns()`](#sqlalchemy.sql.expression.Select.with_only_columns
    "sqlalchemy.sql.expression.Select.with_only_columns").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***entities** – column, table, or other entity expressions to be added to the
    columns clause'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.with_only_columns()`](#sqlalchemy.sql.expression.Select.with_only_columns
    "sqlalchemy.sql.expression.Select.with_only_columns") - replaces existing expressions
    rather than appending.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Selecting Multiple ORM Entities Simultaneously](../orm/queryguide/select.html#orm-queryguide-select-multiple-entities)
    - ORM-centric example'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE191]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") *method of* [`HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE")'
  prefs: []
  type: TYPE_NORMAL
- en: Add one or more [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    constructs to this statement.
  prefs: []
  type: TYPE_NORMAL
- en: This method will associate the given [`CTE`](#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE") constructs with the parent statement such that
    they will each be unconditionally rendered in the WITH clause of the final statement,
    even if not referenced elsewhere within the statement or any sub-selects.
  prefs: []
  type: TYPE_NORMAL
- en: The optional [`HasCTE.add_cte.nest_here`](#sqlalchemy.sql.expression.HasCTE.add_cte.params.nest_here
    "sqlalchemy.sql.expression.HasCTE.add_cte") parameter when set to True will have
    the effect that each given [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    will render in a WITH clause rendered directly along with this statement, rather
    than being moved to the top of the ultimate rendered statement, even if this statement
    is rendered as a subquery within a larger statement.
  prefs: []
  type: TYPE_NORMAL
- en: This method has two general uses. One is to embed CTE statements that serve
    some purpose without being referenced explicitly, such as the use case of embedding
    a DML statement such as an INSERT or UPDATE as a CTE inline with a primary statement
    that may draw from its results indirectly. The other is to provide control over
    the exact placement of a particular series of CTE constructs that should remain
    rendered directly in terms of a particular statement that may be nested in a larger
    statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE192]'
  prefs: []
  type: TYPE_PRE
- en: 'Would render:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE193]'
  prefs: []
  type: TYPE_PRE
- en: Above, the “anon_1” CTE is not referenced in the SELECT statement, however still
    accomplishes the task of running an INSERT statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly in a DML-related context, using the PostgreSQL [`Insert`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Insert
    "sqlalchemy.dialects.postgresql.Insert") construct to generate an “upsert”:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE194]'
  prefs: []
  type: TYPE_PRE
- en: 'The above statement renders as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE195]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.4.21.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*ctes` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: zero or more [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    constructs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Changed in version 2.0: Multiple CTE instances are accepted'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`nest_here` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: if True, the given CTE or CTEs will be rendered as though they specified the
    [`HasCTE.cte.nesting`](#sqlalchemy.sql.expression.HasCTE.cte.params.nesting "sqlalchemy.sql.expression.HasCTE.cte")
    flag to `True` when they were added to this [`HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE"). Assuming the given CTEs are not referenced
    in an outer-enclosing statement as well, the CTEs given should render at the level
    of this statement when this flag is given.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`HasCTE.cte.nesting`](#sqlalchemy.sql.expression.HasCTE.cte.params.nesting
    "sqlalchemy.sql.expression.HasCTE.cte")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE196]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`SelectBase.alias()`](#sqlalchemy.sql.expression.SelectBase.alias
    "sqlalchemy.sql.expression.SelectBase.alias") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a named subquery against this [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase").
  prefs: []
  type: TYPE_NORMAL
- en: For a [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")
    (as opposed to a [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")),
    this returns a [`Subquery`](#sqlalchemy.sql.expression.Subquery "sqlalchemy.sql.expression.Subquery")
    object which behaves mostly the same as the [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") object that is used with a [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The [`SelectBase.alias()`](#sqlalchemy.sql.expression.SelectBase.alias
    "sqlalchemy.sql.expression.SelectBase.alias") method is now a synonym for the
    [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery "sqlalchemy.sql.expression.SelectBase.subquery")
    method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE197]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`SelectBase.as_scalar()`](#sqlalchemy.sql.expression.SelectBase.as_scalar
    "sqlalchemy.sql.expression.SelectBase.as_scalar") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.4: The [`SelectBase.as_scalar()`](#sqlalchemy.sql.expression.SelectBase.as_scalar
    "sqlalchemy.sql.expression.SelectBase.as_scalar") method is deprecated and will
    be removed in a future release. Please refer to [`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE198]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`SelectBase.c`](#sqlalchemy.sql.expression.SelectBase.c
    "sqlalchemy.sql.expression.SelectBase.c") *attribute of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.4: The [`SelectBase.c`](#sqlalchemy.sql.expression.SelectBase.c
    "sqlalchemy.sql.expression.SelectBase.c") and `SelectBase.columns` attributes
    are deprecated and will be removed in a future release; these attributes implicitly
    create a subquery that should be explicit. Please call [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") first in order to create a subquery,
    which then contains this attribute. To access the columns that this SELECT object
    SELECTs from, use the [`SelectBase.selected_columns`](#sqlalchemy.sql.expression.SelectBase.selected_columns
    "sqlalchemy.sql.expression.SelectBase.selected_columns") attribute.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE199]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    construct with the given column expression added to its columns clause.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.4: The [`Select.column()`](#sqlalchemy.sql.expression.Select.column
    "sqlalchemy.sql.expression.Select.column") method is deprecated and will be removed
    in a future release. Please use [`Select.add_columns()`](#sqlalchemy.sql.expression.Select.add_columns
    "sqlalchemy.sql.expression.Select.add_columns")'
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE200]'
  prefs: []
  type: TYPE_PRE
- en: See the documentation for [`Select.with_only_columns()`](#sqlalchemy.sql.expression.Select.with_only_columns
    "sqlalchemy.sql.expression.Select.with_only_columns") for guidelines on adding
    /replacing the columns of a [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE201]'
  prefs: []
  type: TYPE_PRE
- en: Return a [plugin-enabled](../glossary.html#term-plugin-enabled) ‘column descriptions’
    structure referring to the columns which are SELECTed by this statement.
  prefs: []
  type: TYPE_NORMAL
- en: This attribute is generally useful when using the ORM, as an extended structure
    which includes information about mapped entities is returned. The section [Inspecting
    entities and columns from ORM-enabled SELECT and DML statements](../orm/queryguide/api.html#queryguide-inspection)
    contains more background.
  prefs: []
  type: TYPE_NORMAL
- en: 'For a Core-only statement, the structure returned by this accessor is derived
    from the same objects that are returned by the [`Select.selected_columns`](#sqlalchemy.sql.expression.Select.selected_columns
    "sqlalchemy.sql.expression.Select.selected_columns") accessor, formatted as a
    list of dictionaries which contain the keys `name`, `type` and `expr`, which indicate
    the column expressions to be selected:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE202]'
  prefs: []
  type: TYPE_PRE
- en: 'Changed in version 1.4.33: The [`Select.column_descriptions`](#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions") attribute returns a structure
    for a Core-only set of entities, not just ORM-only entities.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`UpdateBase.entity_description`](dml.html#sqlalchemy.sql.expression.UpdateBase.entity_description
    "sqlalchemy.sql.expression.UpdateBase.entity_description") - entity information
    for an [`insert()`](dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert"),
    [`update()`](dml.html#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update"),
    or [`delete()`](dml.html#sqlalchemy.sql.expression.delete "sqlalchemy.sql.expression.delete")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Inspecting entities and columns from ORM-enabled SELECT and DML statements](../orm/queryguide/api.html#queryguide-inspection)
    - ORM background'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE203]'
  prefs: []
  type: TYPE_PRE
- en: Return the set of [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    objects implied by the columns clause of this SELECT statement.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.23.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.froms`](#sqlalchemy.sql.expression.Select.froms "sqlalchemy.sql.expression.Select.froms")
    - “final” FROM list taking the full statement into account'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.with_only_columns()`](#sqlalchemy.sql.expression.Select.with_only_columns
    "sqlalchemy.sql.expression.Select.with_only_columns") - makes use of this collection
    to set up a new FROM list'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE204]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    which will correlate the given FROM clauses to that of an enclosing [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select").
  prefs: []
  type: TYPE_NORMAL
- en: Calling this method turns off the [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") object’s default behavior of “auto-correlation”.
    Normally, FROM elements which appear in a [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") that encloses this one via its [WHERE clause](../glossary.html#term-WHERE-clause),
    ORDER BY, HAVING or [columns clause](../glossary.html#term-columns-clause) will
    be omitted from this [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    object’s [FROM clause](../glossary.html#term-FROM-clause). Setting an explicit
    correlation collection using the [`Select.correlate()`](#sqlalchemy.sql.expression.Select.correlate
    "sqlalchemy.sql.expression.Select.correlate") method provides a fixed list of
    FROM objects that can potentially take place in this process.
  prefs: []
  type: TYPE_NORMAL
- en: When [`Select.correlate()`](#sqlalchemy.sql.expression.Select.correlate "sqlalchemy.sql.expression.Select.correlate")
    is used to apply specific FROM clauses for correlation, the FROM elements become
    candidates for correlation regardless of how deeply nested this [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") object is, relative to an enclosing [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") which refers to the same FROM object. This
    is in contrast to the behavior of “auto-correlation” which only correlates to
    an immediate enclosing [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select").
    Multi-level correlation ensures that the link between enclosed and enclosing [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") is always via at least one WHERE/ORDER BY/HAVING/columns
    clause in order for correlation to take place.
  prefs: []
  type: TYPE_NORMAL
- en: If `None` is passed, the [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    object will correlate none of its FROM entries, and all will render unconditionally
    in the local FROM clause.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***fromclauses** – one or more [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") or other FROM-compatible construct such
    as an ORM mapped entity to become part of the correlate collection; alternatively
    pass a single value `None` to remove all existing correlations.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.correlate_except()`](#sqlalchemy.sql.expression.Select.correlate_except
    "sqlalchemy.sql.expression.Select.correlate_except")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Scalar and Correlated Subqueries](../tutorial/data_select.html#tutorial-scalar-subquery)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE205]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    which will omit the given FROM clauses from the auto-correlation process.
  prefs: []
  type: TYPE_NORMAL
- en: Calling [`Select.correlate_except()`](#sqlalchemy.sql.expression.Select.correlate_except
    "sqlalchemy.sql.expression.Select.correlate_except") turns off the [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") object’s default behavior of “auto-correlation”
    for the given FROM elements. An element specified here will unconditionally appear
    in the FROM list, while all other FROM elements remain subject to normal auto-correlation
    behaviors.
  prefs: []
  type: TYPE_NORMAL
- en: If `None` is passed, or no arguments are passed, the [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") object will correlate all of its FROM entries.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***fromclauses** – a list of one or more [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") constructs, or other compatible constructs
    (i.e. ORM-mapped classes) to become part of the correlate-exception collection.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.correlate()`](#sqlalchemy.sql.expression.Select.correlate "sqlalchemy.sql.expression.Select.correlate")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Scalar and Correlated Subqueries](../tutorial/data_select.html#tutorial-scalar-subquery)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE206]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Selectable.corresponding_column()`](#sqlalchemy.sql.expression.Selectable.corresponding_column
    "sqlalchemy.sql.expression.Selectable.corresponding_column") *method of* [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
  prefs: []
  type: TYPE_NORMAL
- en: Given a [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"), return the exported [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") object from the [`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") collection of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable") which corresponds to that original [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") via a common ancestor column.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`column` – the target [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") to be matched.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`require_embedded` – only return corresponding columns for the given [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"), if the given [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") is actually present within a sub-element
    of this [`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable").
    Normally the column will match if it merely shares a common ancestor with one
    of the exported columns of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") - the [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") that is used for the operation.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnCollection.corresponding_column()`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection.corresponding_column
    "sqlalchemy.sql.expression.ColumnCollection.corresponding_column") - implementation
    method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE207]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte
    "sqlalchemy.sql.expression.HasCTE.cte") *method of* [`HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a new [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE"),
    or Common Table Expression instance.
  prefs: []
  type: TYPE_NORMAL
- en: Common table expressions are a SQL standard whereby SELECT statements can draw
    upon secondary statements specified along with the primary statement, using a
    clause called “WITH”. Special semantics regarding UNION can also be employed to
    allow “recursive” queries, where a SELECT statement can draw upon the set of rows
    that have previously been selected.
  prefs: []
  type: TYPE_NORMAL
- en: CTEs can also be applied to DML constructs UPDATE, INSERT and DELETE on some
    databases, both as a source of CTE rows when combined with RETURNING, as well
    as a consumer of CTE rows.
  prefs: []
  type: TYPE_NORMAL
- en: SQLAlchemy detects [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    objects, which are treated similarly to [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") objects, as special elements to be delivered
    to the FROM clause of the statement as well as to a WITH clause at the top of
    the statement.
  prefs: []
  type: TYPE_NORMAL
- en: For special prefixes such as PostgreSQL “MATERIALIZED” and “NOT MATERIALIZED”,
    the `CTE.prefix_with()` method may be used to establish these.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.3.13: Added support for prefixes. In particular - MATERIALIZED
    and NOT MATERIALIZED.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name` – name given to the common table expression. Like [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias"), the name can be left as `None`
    in which case an anonymous symbol will be used at query compile time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`recursive` – if `True`, will render `WITH RECURSIVE`. A recursive common table
    expression is intended to be used in conjunction with UNION ALL in order to derive
    rows from those already selected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nesting` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: if `True`, will render the CTE locally to the statement in which it is referenced.
    For more complex scenarios, the [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") method using the [`HasCTE.add_cte.nest_here`](#sqlalchemy.sql.expression.HasCTE.add_cte.params.nest_here
    "sqlalchemy.sql.expression.HasCTE.add_cte") parameter may also be used to more
    carefully control the exact placement of a particular CTE.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 1.4.24.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte "sqlalchemy.sql.expression.HasCTE.add_cte")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The following examples include two from PostgreSQL’s documentation at [https://www.postgresql.org/docs/current/static/queries-with.html](https://www.postgresql.org/docs/current/static/queries-with.html),
    as well as additional examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example 1, non recursive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE208]'
  prefs: []
  type: TYPE_PRE
- en: 'Example 2, WITH RECURSIVE:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE209]'
  prefs: []
  type: TYPE_PRE
- en: 'Example 3, an upsert using UPDATE and INSERT with CTEs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE210]'
  prefs: []
  type: TYPE_PRE
- en: 'Example 4, Nesting CTE (SQLAlchemy 1.4.24 and above):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE211]'
  prefs: []
  type: TYPE_PRE
- en: 'The above query will render the second CTE nested inside the first, shown with
    inline parameters below as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE212]'
  prefs: []
  type: TYPE_PRE
- en: 'The same CTE can be set up using the [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") method as follows (SQLAlchemy 2.0
    and above):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE213]'
  prefs: []
  type: TYPE_PRE
- en: 'Example 5, Non-Linear CTE (SQLAlchemy 1.4.28 and above):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE214]'
  prefs: []
  type: TYPE_PRE
- en: 'The above query will render 2 UNIONs inside the recursive CTE:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE215]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.cte()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.cte "sqlalchemy.orm.Query.cte")
    - ORM version of [`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte "sqlalchemy.sql.expression.HasCTE.cte").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE216]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    construct which will apply DISTINCT to the SELECT statement overall.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE217]'
  prefs: []
  type: TYPE_PRE
- en: 'The above would produce an statement resembling:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE218]'
  prefs: []
  type: TYPE_PRE
- en: The method also accepts an `*expr` parameter which produces the PostgreSQL dialect-specific
    `DISTINCT ON` expression. Using this parameter on other backends which don’t support
    this syntax will raise an error.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***expr** –'
  prefs: []
  type: TYPE_NORMAL
- en: optional column expressions. When present, the PostgreSQL dialect will render
    a `DISTINCT ON (<expressions>)` construct. A deprecation warning and/or [`CompileError`](exceptions.html#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError") will be raised on other backends.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.4: Using *expr in other dialects is deprecated and
    will raise [`CompileError`](exceptions.html#sqlalchemy.exc.CompileError "sqlalchemy.exc.CompileError")
    in a future version.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE219]'
  prefs: []
  type: TYPE_PRE
- en: Return a SQL `EXCEPT` of this select() construct against the given selectable
    provided as positional arguments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***other** –'
  prefs: []
  type: TYPE_NORMAL
- en: one or more elements with which to create a UNION.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4.28: multiple elements are now accepted.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE220]'
  prefs: []
  type: TYPE_PRE
- en: Return a SQL `EXCEPT ALL` of this select() construct against the given selectables
    provided as positional arguments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***other** –'
  prefs: []
  type: TYPE_NORMAL
- en: one or more elements with which to create a UNION.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4.28: multiple elements are now accepted.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE221]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") *method of* [`Executable`](#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")'
  prefs: []
  type: TYPE_NORMAL
- en: Set non-SQL options for the statement which take effect during execution.
  prefs: []
  type: TYPE_NORMAL
- en: Execution options can be set at many scopes, including per-statement, per-connection,
    or per execution, using methods such as [`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") and parameters which accept
    a dictionary of options such as [`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute") and [`Session.execute.execution_options`](../orm/session_api.html#sqlalchemy.orm.Session.execute.params.execution_options
    "sqlalchemy.orm.Session.execute").
  prefs: []
  type: TYPE_NORMAL
- en: The primary characteristic of an execution option, as opposed to other kinds
    of options such as ORM loader options, is that **execution options never affect
    the compiled SQL of a query, only things that affect how the SQL statement itself
    is invoked or how results are fetched**. That is, execution options are not part
    of what’s accommodated by SQL compilation nor are they considered part of the
    cached state of a statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") method is [generative](../glossary.html#term-generative),
    as is the case for the method as applied to the [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") and [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") objects, which means when the method is called, a copy
    of the object is returned, which applies the given parameters to that new copy,
    but leaves the original unchanged:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE222]'
  prefs: []
  type: TYPE_PRE
- en: An exception to this behavior is the [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object, where the [`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") method is explicitly **not**
    generative.
  prefs: []
  type: TYPE_NORMAL
- en: 'The kinds of options that may be passed to [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") and other related methods
    and parameter dictionaries include parameters that are explicitly consumed by
    SQLAlchemy Core or ORM, as well as arbitrary keyword arguments not defined by
    SQLAlchemy, which means the methods and/or parameter dictionaries may be used
    for user-defined parameters that interact with custom code, which may access the
    parameters using methods such as [`Executable.get_execution_options()`](#sqlalchemy.sql.expression.Executable.get_execution_options
    "sqlalchemy.sql.expression.Executable.get_execution_options") and [`Connection.get_execution_options()`](connections.html#sqlalchemy.engine.Connection.get_execution_options
    "sqlalchemy.engine.Connection.get_execution_options"), or within selected event
    hooks using a dedicated `execution_options` event parameter such as [`ConnectionEvents.before_execute.execution_options`](events.html#sqlalchemy.events.ConnectionEvents.before_execute.params.execution_options
    "sqlalchemy.events.ConnectionEvents.before_execute") or [`ORMExecuteState.execution_options`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.execution_options
    "sqlalchemy.orm.ORMExecuteState.execution_options"), e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE223]'
  prefs: []
  type: TYPE_PRE
- en: 'Within the scope of options that are explicitly recognized by SQLAlchemy, most
    apply to specific classes of objects and not others. The most common execution
    options include:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Connection.execution_options.isolation_level`](connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") - sets the isolation level for
    a connection or a class of connections via an [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"). This option is accepted only by [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") or [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Connection.execution_options.stream_results`](connections.html#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") - indicates results should be
    fetched using a server side cursor; this option is accepted by [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"), by the [`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute") parameter on [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute"), and additionally by [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") on a SQL statement object,
    as well as by ORM constructs like [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Connection.execution_options.compiled_cache`](connections.html#sqlalchemy.engine.Connection.execution_options.params.compiled_cache
    "sqlalchemy.engine.Connection.execution_options") - indicates a dictionary that
    will serve as the [SQL compilation cache](connections.html#sql-caching) for a
    [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    or [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine"),
    as well as for ORM methods like [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute"). Can be passed as `None` to disable caching
    for statements. This option is not accepted by [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") as it is inadvisable
    to carry along a compilation cache within a statement object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Connection.execution_options.schema_translate_map`](connections.html#sqlalchemy.engine.Connection.execution_options.params.schema_translate_map
    "sqlalchemy.engine.Connection.execution_options") - a mapping of schema names
    used by the [Schema Translate Map](connections.html#schema-translating) feature,
    accepted by [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine"),
    [`Executable`](#sqlalchemy.sql.expression.Executable "sqlalchemy.sql.expression.Executable"),
    as well as by ORM constructs like [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.execute.execution_options`](../orm/session_api.html#sqlalchemy.orm.Session.execute.params.execution_options
    "sqlalchemy.orm.Session.execute")'
  prefs: []
  type: TYPE_NORMAL
- en: '[ORM Execution Options](../orm/queryguide/api.html#orm-queryguide-execution-options)
    - documentation on all ORM-specific execution options'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE224]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`SelectBase.exists()`](#sqlalchemy.sql.expression.SelectBase.exists
    "sqlalchemy.sql.expression.SelectBase.exists") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  prefs: []
  type: TYPE_NORMAL
- en: Return an [`Exists`](#sqlalchemy.sql.expression.Exists "sqlalchemy.sql.expression.Exists")
    representation of this selectable, which can be used as a column expression.
  prefs: []
  type: TYPE_NORMAL
- en: The returned object is an instance of [`Exists`](#sqlalchemy.sql.expression.Exists
    "sqlalchemy.sql.expression.Exists").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`exists()`](#sqlalchemy.sql.expression.exists "sqlalchemy.sql.expression.exists")'
  prefs: []
  type: TYPE_NORMAL
- en: '[EXISTS subqueries](../tutorial/data_select.html#tutorial-exists) - in the
    [2.0 style](../glossary.html#term-2.0-style) tutorial.'
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE225]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`SelectBase.exported_columns`](#sqlalchemy.sql.expression.SelectBase.exported_columns
    "sqlalchemy.sql.expression.SelectBase.exported_columns") *attribute of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  prefs: []
  type: TYPE_NORMAL
- en: A [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") that represents the “exported” columns
    of this [`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable"),
    not including [`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause") constructs.
  prefs: []
  type: TYPE_NORMAL
- en: The “exported” columns for a [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase") object are synonymous with the [`SelectBase.selected_columns`](#sqlalchemy.sql.expression.SelectBase.selected_columns
    "sqlalchemy.sql.expression.SelectBase.selected_columns") collection.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.exported_columns`](#sqlalchemy.sql.expression.Select.exported_columns
    "sqlalchemy.sql.expression.Select.exported_columns")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`FromClause.exported_columns`](#sqlalchemy.sql.expression.FromClause.exported_columns
    "sqlalchemy.sql.expression.FromClause.exported_columns")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE226]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a new selectable with the given FETCH FIRST criterion applied.
  prefs: []
  type: TYPE_NORMAL
- en: This is a numeric value which usually renders as `FETCH {FIRST | NEXT} [ count
    ] {ROW | ROWS} {ONLY | WITH TIES}` expression in the resulting select. This functionality
    is is currently implemented for Oracle, PostgreSQL, MSSQL.
  prefs: []
  type: TYPE_NORMAL
- en: Use [`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset") to specify the offset.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The [`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch") method will replace any clause
    applied with [`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit").
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`count` – an integer COUNT parameter, or a SQL expression that provides an
    integer result. When `percent=True` this will represent the percentage of rows
    to return, not the absolute value. Pass `None` to reset it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`with_ties` – When `True`, the WITH TIES option is used to return any additional
    rows that tie for the last place in the result set according to the `ORDER BY`
    clause. The `ORDER BY` may be mandatory in this case. Defaults to `False`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`percent` – When `True`, `count` represents the percentage of the total number
    of selected rows to return. Defaults to `False`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE227]'
  prefs: []
  type: TYPE_PRE
- en: A synonym for the [`Select.where()`](#sqlalchemy.sql.expression.Select.where
    "sqlalchemy.sql.expression.Select.where") method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE228]'
  prefs: []
  type: TYPE_PRE
- en: apply the given filtering criterion as a WHERE clause to this select.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE229]'
  prefs: []
  type: TYPE_PRE
- en: Apply the columns which this [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    would select onto another statement.
  prefs: []
  type: TYPE_NORMAL
- en: This operation is [plugin-specific](../glossary.html#term-plugin-specific) and
    will raise a not supported exception if this [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") does not select from plugin-enabled entities.
  prefs: []
  type: TYPE_NORMAL
- en: The statement is typically either a [`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") or [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct, and should return the set of columns
    appropriate to the entities represented by this [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Getting ORM Results from Textual Statements](../orm/queryguide/select.html#orm-queryguide-selecting-text)
    - usage examples in the ORM Querying Guide'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE230]'
  prefs: []
  type: TYPE_PRE
- en: Return the displayed list of [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.4.23: The [`Select.froms`](#sqlalchemy.sql.expression.Select.froms
    "sqlalchemy.sql.expression.Select.froms") attribute is moved to the [`Select.get_final_froms()`](#sqlalchemy.sql.expression.Select.get_final_froms
    "sqlalchemy.sql.expression.Select.get_final_froms") method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE231]'
  prefs: []
  type: TYPE_PRE
- en: Return immediate child `HasTraverseInternals` elements of this `HasTraverseInternals`.
  prefs: []
  type: TYPE_NORMAL
- en: This is used for visit traversal.
  prefs: []
  type: TYPE_NORMAL
- en: '**kw may contain flags that change the collection that is returned, for example
    to return a subset of items in order to cut down on larger traversals, or to return
    child items from a different context (such as schema-level collections instead
    of clause-level).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE232]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Executable.get_execution_options()`](#sqlalchemy.sql.expression.Executable.get_execution_options
    "sqlalchemy.sql.expression.Executable.get_execution_options") *method of* [`Executable`](#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")'
  prefs: []
  type: TYPE_NORMAL
- en: Get the non-SQL options which will take effect during execution.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.3.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE233]'
  prefs: []
  type: TYPE_PRE
- en: Compute the final displayed list of [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") elements.
  prefs: []
  type: TYPE_NORMAL
- en: This method will run through the full computation required to determine what
    FROM elements will be displayed in the resulting SELECT statement, including shadowing
    individual tables with JOIN objects, as well as full computation for ORM use cases
    including eager loading clauses.
  prefs: []
  type: TYPE_NORMAL
- en: For ORM use, this accessor returns the **post compilation** list of FROM objects;
    this collection will include elements such as eagerly loaded tables and joins.
    The objects will **not** be ORM enabled and not work as a replacement for the
    `Select.select_froms()` collection; additionally, the method is not well performing
    for an ORM enabled statement as it will incur the full ORM construction process.
  prefs: []
  type: TYPE_NORMAL
- en: To retrieve the FROM list that’s implied by the “columns” collection passed
    to the [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    originally, use the [`Select.columns_clause_froms`](#sqlalchemy.sql.expression.Select.columns_clause_froms
    "sqlalchemy.sql.expression.Select.columns_clause_froms") accessor.
  prefs: []
  type: TYPE_NORMAL
- en: To select from an alternative set of columns while maintaining the FROM list,
    use the [`Select.with_only_columns()`](#sqlalchemy.sql.expression.Select.with_only_columns
    "sqlalchemy.sql.expression.Select.with_only_columns") method and pass the [`Select.with_only_columns.maintain_column_froms`](#sqlalchemy.sql.expression.Select.with_only_columns.params.maintain_column_froms
    "sqlalchemy.sql.expression.Select.with_only_columns") parameter.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4.23: - the [`Select.get_final_froms()`](#sqlalchemy.sql.expression.Select.get_final_froms
    "sqlalchemy.sql.expression.Select.get_final_froms") method replaces the previous
    [`Select.froms`](#sqlalchemy.sql.expression.Select.froms "sqlalchemy.sql.expression.Select.froms")
    accessor, which is deprecated.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.columns_clause_froms`](#sqlalchemy.sql.expression.Select.columns_clause_froms
    "sqlalchemy.sql.expression.Select.columns_clause_froms")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE234]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`GenerativeSelect.get_label_style()`](#sqlalchemy.sql.expression.GenerativeSelect.get_label_style
    "sqlalchemy.sql.expression.GenerativeSelect.get_label_style") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  prefs: []
  type: TYPE_NORMAL
- en: Retrieve the current label style.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE235]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`GenerativeSelect.group_by()`](#sqlalchemy.sql.expression.GenerativeSelect.group_by
    "sqlalchemy.sql.expression.GenerativeSelect.group_by") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a new selectable with the given list of GROUP BY criterion applied.
  prefs: []
  type: TYPE_NORMAL
- en: All existing GROUP BY settings can be suppressed by passing `None`.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE236]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***clauses** – a series of [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") constructs which will be used to generate
    an GROUP BY clause.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Aggregate functions with GROUP BY / HAVING](../tutorial/data_select.html#tutorial-group-by-w-aggregates)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Ordering or Grouping by a Label](../tutorial/data_select.html#tutorial-order-by-label)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE237]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    construct with the given expression added to its HAVING clause, joined to the
    existing clause via AND, if any.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE238]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `HasCacheKey.inherit_cache` *attribute of* [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.cache_key.HasCacheKey")'
  prefs: []
  type: TYPE_NORMAL
- en: Indicate if this [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") instance should make use of the cache
    key generation scheme used by its immediate superclass.
  prefs: []
  type: TYPE_NORMAL
- en: The attribute defaults to `None`, which indicates that a construct has not yet
    taken into account whether or not its appropriate for it to participate in caching;
    this is functionally equivalent to setting the value to `False`, except that a
    warning is also emitted.
  prefs: []
  type: TYPE_NORMAL
- en: This flag can be set to `True` on a particular class, if the SQL that corresponds
    to the object does not change based on attributes which are local to this class,
    and not its superclass.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Enabling Caching Support for Custom Constructs](compiler.html#compilerext-caching)
    - General guideslines for setting the [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute for third-party
    or user defined SQL constructs.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE239]'
  prefs: []
  type: TYPE_PRE
- en: An iterator of all [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") expressions which would be rendered
    into the columns clause of the resulting SELECT statement.
  prefs: []
  type: TYPE_NORMAL
- en: This method is legacy as of 1.4 and is superseded by the [`Select.exported_columns`](#sqlalchemy.sql.expression.Select.exported_columns
    "sqlalchemy.sql.expression.Select.exported_columns") collection.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE240]'
  prefs: []
  type: TYPE_PRE
- en: Return a SQL `INTERSECT` of this select() construct against the given selectables
    provided as positional arguments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*other` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: one or more elements with which to create a UNION.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Changed in version 1.4.28: multiple elements are now accepted.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`**kwargs` – keyword arguments are forwarded to the constructor for the newly
    created [`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect "sqlalchemy.sql.expression.CompoundSelect")
    object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE241]'
  prefs: []
  type: TYPE_PRE
- en: Return a SQL `INTERSECT ALL` of this select() construct against the given selectables
    provided as positional arguments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*other` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: one or more elements with which to create a UNION.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Changed in version 1.4.28: multiple elements are now accepted.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`**kwargs` – keyword arguments are forwarded to the constructor for the newly
    created [`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect "sqlalchemy.sql.expression.CompoundSelect")
    object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE242]'
  prefs: []
  type: TYPE_PRE
- en: Return `True` if this [`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows
    "sqlalchemy.sql.expression.ReturnsRows") is ‘derived’ from the given [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: An example would be an Alias of a Table is derived from that Table.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE243]'
  prefs: []
  type: TYPE_PRE
- en: Create a SQL JOIN against this [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") object’s criterion and apply generatively,
    returning the newly resulting [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select").
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE244]'
  prefs: []
  type: TYPE_PRE
- en: 'The above statement generates SQL similar to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE245]'
  prefs: []
  type: TYPE_PRE
- en: 'Changed in version 1.4: [`Select.join()`](#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join") now creates a [`Join`](#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") object between a [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") source that is within the FROM clause
    of the existing SELECT, and a given target [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause"), and then adds this [`Join`](#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") to the FROM clause of the newly generated SELECT
    statement. This is completely reworked from the behavior in 1.3, which would instead
    create a subquery of the entire [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    and then join that subquery to the target.'
  prefs: []
  type: TYPE_NORMAL
- en: This is a **backwards incompatible change** as the previous behavior was mostly
    useless, producing an unnamed subquery rejected by most databases in any case.
    The new behavior is modeled after that of the very successful [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") method in the ORM, in order to support the functionality
    of [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    being available by using a [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    object with an [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
  prefs: []
  type: TYPE_NORMAL
- en: See the notes for this change at [select().join() and outerjoin() add JOIN criteria
    to the current query, rather than creating a subquery](../changelog/migration_14.html#change-select-join).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`target` – target table to join towards'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onclause` – ON clause of the join. If omitted, an ON clause is generated automatically
    based on the [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    linkages between the two tables, if one can be unambiguously determined, otherwise
    an error is raised.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`isouter` – if True, generate LEFT OUTER join. Same as [`Select.outerjoin()`](#sqlalchemy.sql.expression.Select.outerjoin
    "sqlalchemy.sql.expression.Select.outerjoin").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`full` – if True, generate FULL OUTER join.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Explicit FROM clauses and JOINs](../tutorial/data_select.html#tutorial-select-join)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Joins](../orm/queryguide/select.html#orm-queryguide-joins) - in the [ORM Querying
    Guide](../orm/queryguide/index.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.join_from()`](#sqlalchemy.sql.expression.Select.join_from "sqlalchemy.sql.expression.Select.join_from")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.outerjoin()`](#sqlalchemy.sql.expression.Select.outerjoin "sqlalchemy.sql.expression.Select.outerjoin")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE246]'
  prefs: []
  type: TYPE_PRE
- en: Create a SQL JOIN against this [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") object’s criterion and apply generatively,
    returning the newly resulting [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select").
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE247]'
  prefs: []
  type: TYPE_PRE
- en: 'The above statement generates SQL similar to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE248]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`from_` – the left side of the join, will be rendered in the FROM clause and
    is roughly equivalent to using the [`Select.select_from()`](#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`target` – target table to join towards'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onclause` – ON clause of the join.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`isouter` – if True, generate LEFT OUTER join. Same as [`Select.outerjoin()`](#sqlalchemy.sql.expression.Select.outerjoin
    "sqlalchemy.sql.expression.Select.outerjoin").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`full` – if True, generate FULL OUTER join.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Explicit FROM clauses and JOINs](../tutorial/data_select.html#tutorial-select-join)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Joins](../orm/queryguide/select.html#orm-queryguide-joins) - in the [ORM Querying
    Guide](../orm/queryguide/index.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.join()`](#sqlalchemy.sql.expression.Select.join "sqlalchemy.sql.expression.Select.join")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE249]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`SelectBase.label()`](#sqlalchemy.sql.expression.SelectBase.label
    "sqlalchemy.sql.expression.SelectBase.label") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a ‘scalar’ representation of this selectable, embedded as a subquery
    with a label.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE250]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`SelectBase.lateral()`](#sqlalchemy.sql.expression.SelectBase.lateral
    "sqlalchemy.sql.expression.SelectBase.lateral") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a LATERAL alias of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable").
  prefs: []
  type: TYPE_NORMAL
- en: The return value is the [`Lateral`](#sqlalchemy.sql.expression.Lateral "sqlalchemy.sql.expression.Lateral")
    construct also provided by the top-level [`lateral()`](#sqlalchemy.sql.expression.lateral
    "sqlalchemy.sql.expression.lateral") function.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[LATERAL correlation](../tutorial/data_select.html#tutorial-lateral-correlation)
    - overview of usage.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE251]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a new selectable with the given LIMIT criterion applied.
  prefs: []
  type: TYPE_NORMAL
- en: This is a numerical value which usually renders as a `LIMIT` expression in the
    resulting select. Backends that don’t support `LIMIT` will attempt to provide
    similar functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The [`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit") method will replace any clause
    applied with [`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**limit** – an integer LIMIT parameter, or a SQL expression that provides an
    integer result. Pass `None` to reset it.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE252]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a new selectable with the given OFFSET criterion applied.
  prefs: []
  type: TYPE_NORMAL
- en: This is a numeric value which usually renders as an `OFFSET` expression in the
    resulting select. Backends that don’t support `OFFSET` will attempt to provide
    similar functionality.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**offset** – an integer OFFSET parameter, or a SQL expression that provides
    an integer result. Pass `None` to reset it.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE253]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Executable.options()`](#sqlalchemy.sql.expression.Executable.options
    "sqlalchemy.sql.expression.Executable.options") *method of* [`Executable`](#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")'
  prefs: []
  type: TYPE_NORMAL
- en: Apply options to this statement.
  prefs: []
  type: TYPE_NORMAL
- en: In the general sense, options are any kind of Python object that can be interpreted
    by the SQL compiler for the statement. These options can be consumed by specific
    dialects or specific kinds of compilers.
  prefs: []
  type: TYPE_NORMAL
- en: The most commonly known kind of option are the ORM level options that apply
    “eager load” and other loading behaviors to an ORM query. However, options can
    theoretically be used for many other purposes.
  prefs: []
  type: TYPE_NORMAL
- en: For background on specific kinds of options for specific kinds of statements,
    refer to the documentation for those option objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: - added [`Executable.options()`](#sqlalchemy.sql.expression.Executable.options
    "sqlalchemy.sql.expression.Executable.options") to Core statement objects towards
    the goal of allowing unified Core / ORM querying capabilities.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Column Loading Options](../orm/queryguide/columns.html#loading-columns) -
    refers to options specific to the usage of ORM queries'
  prefs: []
  type: TYPE_NORMAL
- en: '[Relationship Loading with Loader Options](../orm/queryguide/relationships.html#relationship-loader-options)
    - refers to options specific to the usage of ORM queries'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE254]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`GenerativeSelect.order_by()`](#sqlalchemy.sql.expression.GenerativeSelect.order_by
    "sqlalchemy.sql.expression.GenerativeSelect.order_by") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a new selectable with the given list of ORDER BY criteria applied.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE255]'
  prefs: []
  type: TYPE_PRE
- en: 'Calling this method multiple times is equivalent to calling it once with all
    the clauses concatenated. All existing ORDER BY criteria may be cancelled by passing
    `None` by itself. New ORDER BY criteria may then be added by invoking [`Query.order_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.order_by
    "sqlalchemy.orm.Query.order_by") again, e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE256]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***clauses** – a series of [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") constructs which will be used to generate
    an ORDER BY clause.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[ORDER BY](../tutorial/data_select.html#tutorial-order-by) - in the [SQLAlchemy
    Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Ordering or Grouping by a Label](../tutorial/data_select.html#tutorial-order-by-label)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE257]'
  prefs: []
  type: TYPE_PRE
- en: Create a left outer join.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters are the same as that of [`Select.join()`](#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join").
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: [`Select.outerjoin()`](#sqlalchemy.sql.expression.Select.outerjoin
    "sqlalchemy.sql.expression.Select.outerjoin") now creates a [`Join`](#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") object between a [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") source that is within the FROM clause
    of the existing SELECT, and a given target [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause"), and then adds this [`Join`](#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") to the FROM clause of the newly generated SELECT
    statement. This is completely reworked from the behavior in 1.3, which would instead
    create a subquery of the entire [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    and then join that subquery to the target.'
  prefs: []
  type: TYPE_NORMAL
- en: This is a **backwards incompatible change** as the previous behavior was mostly
    useless, producing an unnamed subquery rejected by most databases in any case.
    The new behavior is modeled after that of the very successful [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") method in the ORM, in order to support the functionality
    of [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    being available by using a [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    object with an [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
  prefs: []
  type: TYPE_NORMAL
- en: See the notes for this change at [select().join() and outerjoin() add JOIN criteria
    to the current query, rather than creating a subquery](../changelog/migration_14.html#change-select-join).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Explicit FROM clauses and JOINs](../tutorial/data_select.html#tutorial-select-join)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Joins](../orm/queryguide/select.html#orm-queryguide-joins) - in the [ORM Querying
    Guide](../orm/queryguide/index.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.join()`](#sqlalchemy.sql.expression.Select.join "sqlalchemy.sql.expression.Select.join")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE258]'
  prefs: []
  type: TYPE_PRE
- en: Create a SQL LEFT OUTER JOIN against this [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") object’s criterion and apply generatively,
    returning the newly resulting [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select").
  prefs: []
  type: TYPE_NORMAL
- en: Usage is the same as that of `Select.join_from()`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE259]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`HasPrefixes.prefix_with()`](#sqlalchemy.sql.expression.HasPrefixes.prefix_with
    "sqlalchemy.sql.expression.HasPrefixes.prefix_with") *method of* [`HasPrefixes`](#sqlalchemy.sql.expression.HasPrefixes
    "sqlalchemy.sql.expression.HasPrefixes")'
  prefs: []
  type: TYPE_NORMAL
- en: Add one or more expressions following the statement keyword, i.e. SELECT, INSERT,
    UPDATE, or DELETE. Generative.
  prefs: []
  type: TYPE_NORMAL
- en: This is used to support backend-specific prefix keywords such as those provided
    by MySQL.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE260]'
  prefs: []
  type: TYPE_PRE
- en: Multiple prefixes can be specified by multiple calls to [`HasPrefixes.prefix_with()`](#sqlalchemy.sql.expression.HasPrefixes.prefix_with
    "sqlalchemy.sql.expression.HasPrefixes.prefix_with").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*prefixes` – textual or [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") construct which will be rendered following
    the INSERT, UPDATE, or DELETE keyword.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dialect` – optional string dialect name which will limit rendering of this
    prefix to only that dialect.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE261]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    construct with redundantly named, equivalently-valued columns removed from the
    columns clause.
  prefs: []
  type: TYPE_NORMAL
- en: “Redundant” here means two columns where one refers to the other either based
    on foreign key, or via a simple equality comparison in the WHERE clause of the
    statement. The primary purpose of this method is to automatically construct a
    select statement with all uniquely-named columns, without the need to use table-qualified
    labels as [`Select.set_label_style()`](#sqlalchemy.sql.expression.Select.set_label_style
    "sqlalchemy.sql.expression.Select.set_label_style") does.
  prefs: []
  type: TYPE_NORMAL
- en: When columns are omitted based on foreign key, the referred-to column is the
    one that’s kept. When columns are omitted based on WHERE equivalence, the first
    column in the columns clause is the one that’s kept.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**only_synonyms** – when True, limit the removal of columns to those which
    have the same name as the equivalent. Otherwise, all columns that are equivalent
    to another are removed.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE262]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Selectable.replace_selectable()`](#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") *method of* [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
  prefs: []
  type: TYPE_NORMAL
- en: Replace all occurrences of [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") ‘old’ with the given [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") object, returning a copy of this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.4: The [`Selectable.replace_selectable()`](#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") method is deprecated,
    and will be removed in a future release. Similar functionality is available via
    the sqlalchemy.sql.visitors module.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE263]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a ‘scalar’ representation of this selectable, which can be used as a
    column expression.
  prefs: []
  type: TYPE_NORMAL
- en: The returned object is an instance of [`ScalarSelect`](#sqlalchemy.sql.expression.ScalarSelect
    "sqlalchemy.sql.expression.ScalarSelect").
  prefs: []
  type: TYPE_NORMAL
- en: Typically, a select statement which has only one column in its columns clause
    is eligible to be used as a scalar expression. The scalar subquery can then be
    used in the WHERE clause or columns clause of an enclosing SELECT.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the scalar subquery differentiates from the FROM-level subquery that
    can be produced using the [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") method.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Scalar and Correlated Subqueries](../tutorial/data_select.html#tutorial-scalar-subquery)
    - in the 2.0 tutorial'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE264]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`SelectBase.select()`](#sqlalchemy.sql.expression.SelectBase.select
    "sqlalchemy.sql.expression.SelectBase.select") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.4: The [`SelectBase.select()`](#sqlalchemy.sql.expression.SelectBase.select
    "sqlalchemy.sql.expression.SelectBase.select") method is deprecated and will be
    removed in a future release; this method implicitly creates a subquery that should
    be explicit. Please call [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") first in order to create a subquery,
    which then can be selected.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE265]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    construct with the given FROM expression(s) merged into its list of FROM objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE266]'
  prefs: []
  type: TYPE_PRE
- en: The “from” list is a unique set on the identity of each element, so adding an
    already present [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    or other selectable will have no effect. Passing a [`Join`](#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") that refers to an already present [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") or other selectable will have the effect of concealing
    the presence of that selectable as an individual element in the rendered FROM
    list, instead rendering it into a JOIN clause.
  prefs: []
  type: TYPE_NORMAL
- en: 'While the typical purpose of [`Select.select_from()`](#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") is to replace the default, derived
    FROM clause with a join, it can also be called with individual table elements,
    multiple times if desired, in the case that the FROM clause cannot be fully derived
    from the columns clause:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE267]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE268]'
  prefs: []
  type: TYPE_PRE
- en: A [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") representing the columns that this
    SELECT statement or similar construct returns in its result set, not including
    [`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause "sqlalchemy.sql.expression.TextClause")
    constructs.
  prefs: []
  type: TYPE_NORMAL
- en: This collection differs from the [`FromClause.columns`](#sqlalchemy.sql.expression.FromClause.columns
    "sqlalchemy.sql.expression.FromClause.columns") collection of a [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") in that the columns within this collection
    cannot be directly nested inside another SELECT statement; a subquery must be
    applied first which provides for the necessary parenthesization required by SQL.
  prefs: []
  type: TYPE_NORMAL
- en: 'For a [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    construct, the collection here is exactly what would be rendered inside the “SELECT”
    statement, and the [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") objects are directly present as they
    were given, e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE269]'
  prefs: []
  type: TYPE_PRE
- en: Above, `stmt.selected_columns` would be a collection that contains the `col1`
    and `col2` objects directly. For a statement that is against a [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") or other [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause"), the collection will use the [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") objects that are in the [`FromClause.c`](#sqlalchemy.sql.expression.FromClause.c
    "sqlalchemy.sql.expression.FromClause.c") collection of the from element.
  prefs: []
  type: TYPE_NORMAL
- en: 'A use case for the [`Select.selected_columns`](#sqlalchemy.sql.expression.Select.selected_columns
    "sqlalchemy.sql.expression.Select.selected_columns") collection is to allow the
    existing columns to be referenced when adding additional criteria, e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE270]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The [`Select.selected_columns`](#sqlalchemy.sql.expression.Select.selected_columns
    "sqlalchemy.sql.expression.Select.selected_columns") collection does not include
    expressions established in the columns clause using the [`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct; these are silently omitted from the
    collection. To use plain textual column expressions inside of a [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") construct, use the [`literal_column()`](sqlelement.html#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column") construct.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE271]'
  prefs: []
  type: TYPE_PRE
- en: Apply a ‘grouping’ to this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  prefs: []
  type: TYPE_NORMAL
- en: This method is overridden by subclasses to return a “grouping” construct, i.e.
    parenthesis. In particular it’s used by “binary” expressions to provide a grouping
    around themselves when placed into a larger expression, as well as by [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs when placed into the FROM clause
    of another [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select").
    (Note that subqueries should be normally created using the [`Select.alias()`](#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") method, as many platforms require nested
    SELECT statements to be named).
  prefs: []
  type: TYPE_NORMAL
- en: As expressions are composed together, the application of [`self_group()`](#sqlalchemy.sql.expression.Select.self_group
    "sqlalchemy.sql.expression.Select.self_group") is automatic - end-user code should
    never need to use this method directly. Note that SQLAlchemy’s clause constructs
    take operator precedence into account - so parenthesis might not be needed, for
    example, in an expression like `x OR (y AND z)` - AND takes precedence over OR.
  prefs: []
  type: TYPE_NORMAL
- en: The base [`self_group()`](#sqlalchemy.sql.expression.Select.self_group "sqlalchemy.sql.expression.Select.self_group")
    method of [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") just returns self.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE272]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`GenerativeSelect.set_label_style()`](#sqlalchemy.sql.expression.GenerativeSelect.set_label_style
    "sqlalchemy.sql.expression.GenerativeSelect.set_label_style") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a new selectable with the specified label style.
  prefs: []
  type: TYPE_NORMAL
- en: There are three “label styles” available, [`SelectLabelStyle.LABEL_STYLE_DISAMBIGUATE_ONLY`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_DISAMBIGUATE_ONLY
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_DISAMBIGUATE_ONLY"), [`SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL"),
    and [`SelectLabelStyle.LABEL_STYLE_NONE`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_NONE
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_NONE"). The default style
    is [`SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL").
  prefs: []
  type: TYPE_NORMAL
- en: In modern SQLAlchemy, there is not generally a need to change the labeling style,
    as per-expression labels are more effectively used by making use of the [`ColumnElement.label()`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.label
    "sqlalchemy.sql.expression.ColumnElement.label") method. In past versions, `LABEL_STYLE_TABLENAME_PLUS_COL`
    was used to disambiguate same-named columns from different tables, aliases, or
    subqueries; the newer `LABEL_STYLE_DISAMBIGUATE_ONLY` now applies labels only
    to names that conflict with an existing name so that the impact of this labeling
    is minimal.
  prefs: []
  type: TYPE_NORMAL
- en: The rationale for disambiguation is mostly so that all column expressions are
    available from a given [`FromClause.c`](#sqlalchemy.sql.expression.FromClause.c
    "sqlalchemy.sql.expression.FromClause.c") collection when a subquery is created.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4: - the [`GenerativeSelect.set_label_style()`](#sqlalchemy.sql.expression.GenerativeSelect.set_label_style
    "sqlalchemy.sql.expression.GenerativeSelect.set_label_style") method replaces
    the previous combination of `.apply_labels()`, `.with_labels()` and `use_labels=True`
    methods and/or parameters.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '`LABEL_STYLE_DISAMBIGUATE_ONLY`'
  prefs: []
  type: TYPE_NORMAL
- en: '`LABEL_STYLE_TABLENAME_PLUS_COL`'
  prefs: []
  type: TYPE_NORMAL
- en: '`LABEL_STYLE_NONE`'
  prefs: []
  type: TYPE_NORMAL
- en: '`LABEL_STYLE_DEFAULT`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE273]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`GenerativeSelect.slice()`](#sqlalchemy.sql.expression.GenerativeSelect.slice
    "sqlalchemy.sql.expression.GenerativeSelect.slice") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  prefs: []
  type: TYPE_NORMAL
- en: Apply LIMIT / OFFSET to this statement based on a slice.
  prefs: []
  type: TYPE_NORMAL
- en: The start and stop indices behave like the argument to Python’s built-in `range()`
    function. This method provides an alternative to using `LIMIT`/`OFFSET` to get
    a slice of the query.
  prefs: []
  type: TYPE_NORMAL
- en: For example,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE274]'
  prefs: []
  type: TYPE_PRE
- en: renders as
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE275]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The [`GenerativeSelect.slice()`](#sqlalchemy.sql.expression.GenerativeSelect.slice
    "sqlalchemy.sql.expression.GenerativeSelect.slice") method will replace any clause
    applied with [`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch").
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4: Added the [`GenerativeSelect.slice()`](#sqlalchemy.sql.expression.GenerativeSelect.slice
    "sqlalchemy.sql.expression.GenerativeSelect.slice") method generalized from the
    ORM.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE276]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a subquery of this [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase").
  prefs: []
  type: TYPE_NORMAL
- en: A subquery is from a SQL perspective a parenthesized, named construct that can
    be placed in the FROM clause of another SELECT statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'Given a SELECT statement such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE277]'
  prefs: []
  type: TYPE_PRE
- en: 'The above statement might look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE278]'
  prefs: []
  type: TYPE_PRE
- en: 'The subquery form by itself renders the same way, however when embedded into
    the FROM clause of another SELECT statement, it becomes a named sub-element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE279]'
  prefs: []
  type: TYPE_PRE
- en: 'The above renders as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE280]'
  prefs: []
  type: TYPE_PRE
- en: Historically, [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") is equivalent to calling the
    [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias "sqlalchemy.sql.expression.FromClause.alias")
    method on a FROM object; however, as a [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase") object is not directly FROM object, the
    [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery "sqlalchemy.sql.expression.SelectBase.subquery")
    method provides clearer semantics.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE281]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`HasSuffixes.suffix_with()`](#sqlalchemy.sql.expression.HasSuffixes.suffix_with
    "sqlalchemy.sql.expression.HasSuffixes.suffix_with") *method of* [`HasSuffixes`](#sqlalchemy.sql.expression.HasSuffixes
    "sqlalchemy.sql.expression.HasSuffixes")'
  prefs: []
  type: TYPE_NORMAL
- en: Add one or more expressions following the statement as a whole.
  prefs: []
  type: TYPE_NORMAL
- en: This is used to support backend-specific suffix keywords on certain constructs.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE282]'
  prefs: []
  type: TYPE_PRE
- en: Multiple suffixes can be specified by multiple calls to [`HasSuffixes.suffix_with()`](#sqlalchemy.sql.expression.HasSuffixes.suffix_with
    "sqlalchemy.sql.expression.HasSuffixes.suffix_with").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*suffixes` – textual or [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") construct which will be rendered following
    the target clause.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dialect` – Optional string dialect name which will limit rendering of this
    suffix to only that dialect.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE283]'
  prefs: []
  type: TYPE_PRE
- en: Return a SQL `UNION` of this select() construct against the given selectables
    provided as positional arguments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*other` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: one or more elements with which to create a UNION.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Changed in version 1.4.28: multiple elements are now accepted.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`**kwargs` – keyword arguments are forwarded to the constructor for the newly
    created [`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect "sqlalchemy.sql.expression.CompoundSelect")
    object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE284]'
  prefs: []
  type: TYPE_PRE
- en: Return a SQL `UNION ALL` of this select() construct against the given selectables
    provided as positional arguments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*other` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: one or more elements with which to create a UNION.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Changed in version 1.4.28: multiple elements are now accepted.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`**kwargs` – keyword arguments are forwarded to the constructor for the newly
    created [`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect "sqlalchemy.sql.expression.CompoundSelect")
    object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE285]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    construct with the given expression added to its WHERE clause, joined to the existing
    clause via AND, if any.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE286]'
  prefs: []
  type: TYPE_PRE
- en: Return the completed WHERE clause for this [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") statement.
  prefs: []
  type: TYPE_NORMAL
- en: This assembles the current collection of WHERE criteria into a single `BooleanClauseList`
    construct.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE287]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`GenerativeSelect.with_for_update()`](#sqlalchemy.sql.expression.GenerativeSelect.with_for_update
    "sqlalchemy.sql.expression.GenerativeSelect.with_for_update") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  prefs: []
  type: TYPE_NORMAL
- en: Specify a `FOR UPDATE` clause for this [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect").
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE288]'
  prefs: []
  type: TYPE_PRE
- en: 'On a database like PostgreSQL or Oracle, the above would render a statement
    like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE289]'
  prefs: []
  type: TYPE_PRE
- en: 'on other backends, the `nowait` option is ignored and instead would produce:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE290]'
  prefs: []
  type: TYPE_PRE
- en: When called with no arguments, the statement will render with the suffix `FOR
    UPDATE`. Additional arguments can then be provided which allow for common database-specific
    variants.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`nowait` – boolean; will render `FOR UPDATE NOWAIT` on Oracle and PostgreSQL
    dialects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`read` – boolean; will render `LOCK IN SHARE MODE` on MySQL, `FOR SHARE` on
    PostgreSQL. On PostgreSQL, when combined with `nowait`, will render `FOR SHARE
    NOWAIT`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`of` – SQL expression or list of SQL expression elements, (typically [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects or a compatible expression, for some backends
    may also be a table expression) which will render into a `FOR UPDATE OF` clause;
    supported by PostgreSQL, Oracle, some MySQL versions and possibly others. May
    render as a table or as a column depending on backend.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`skip_locked` – boolean, will render `FOR UPDATE SKIP LOCKED` on Oracle and
    PostgreSQL dialects or `FOR SHARE SKIP LOCKED` if `read=True` is also specified.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`key_share` – boolean, will render `FOR NO KEY UPDATE`, or if combined with
    `read=True` will render `FOR KEY SHARE`, on the PostgreSQL dialect.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE291]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `HasHints.with_hint()` *method of* `HasHints`'
  prefs: []
  type: TYPE_NORMAL
- en: Add an indexing or other executional context hint for the given selectable to
    this [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    or other selectable object.
  prefs: []
  type: TYPE_NORMAL
- en: 'The text of the hint is rendered in the appropriate location for the database
    backend in use, relative to the given [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") or [`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    passed as the `selectable` argument. The dialect implementation typically uses
    Python string substitution syntax with the token `%(name)s` to render the name
    of the table or alias. E.g. when using Oracle, the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE292]'
  prefs: []
  type: TYPE_PRE
- en: 'Would render SQL as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE293]'
  prefs: []
  type: TYPE_PRE
- en: 'The `dialect_name` option will limit the rendering of a particular hint to
    a particular backend. Such as, to add hints for both Oracle and Sybase simultaneously:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE294]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.with_statement_hint()`](#sqlalchemy.sql.expression.Select.with_statement_hint
    "sqlalchemy.sql.expression.Select.with_statement_hint")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE295]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    construct with its columns clause replaced with the given entities.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, this method is exactly equivalent to as if the original [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") had been called with the given entities. E.g.
    a statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE296]'
  prefs: []
  type: TYPE_PRE
- en: 'should be exactly equivalent to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE297]'
  prefs: []
  type: TYPE_PRE
- en: 'In this mode of operation, [`Select.with_only_columns()`](#sqlalchemy.sql.expression.Select.with_only_columns
    "sqlalchemy.sql.expression.Select.with_only_columns") will also dynamically alter
    the FROM clause of the statement if it is not explicitly stated. To maintain the
    existing set of FROMs including those implied by the current columns clause, add
    the [`Select.with_only_columns.maintain_column_froms`](#sqlalchemy.sql.expression.Select.with_only_columns.params.maintain_column_froms
    "sqlalchemy.sql.expression.Select.with_only_columns") parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE298]'
  prefs: []
  type: TYPE_PRE
- en: 'The above parameter performs a transfer of the effective FROMs in the columns
    collection to the [`Select.select_from()`](#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") method, as though the following
    were invoked:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE299]'
  prefs: []
  type: TYPE_PRE
- en: 'The [`Select.with_only_columns.maintain_column_froms`](#sqlalchemy.sql.expression.Select.with_only_columns.params.maintain_column_froms
    "sqlalchemy.sql.expression.Select.with_only_columns") parameter makes use of the
    [`Select.columns_clause_froms`](#sqlalchemy.sql.expression.Select.columns_clause_froms
    "sqlalchemy.sql.expression.Select.columns_clause_froms") collection and performs
    an operation equivalent to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE300]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*entities` – column expressions to be used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`maintain_column_froms` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: boolean parameter that will ensure the FROM list implied from the current columns
    clause will be transferred to the [`Select.select_from()`](#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") method first.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 1.4.23.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE301]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `HasHints.with_statement_hint()` *method of* `HasHints`'
  prefs: []
  type: TYPE_NORMAL
- en: Add a statement hint to this [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    or other selectable object.
  prefs: []
  type: TYPE_NORMAL
- en: This method is similar to [`Select.with_hint()`](#sqlalchemy.sql.expression.Select.with_hint
    "sqlalchemy.sql.expression.Select.with_hint") except that it does not require
    an individual table, and instead applies to the statement as a whole.
  prefs: []
  type: TYPE_NORMAL
- en: Hints here are specific to the backend database and may include directives such
    as isolation levels, file directives, fetch directives, etc.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.with_hint()`](#sqlalchemy.sql.expression.Select.with_hint "sqlalchemy.sql.expression.Select.with_hint")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.prefix_with()`](#sqlalchemy.sql.expression.Select.prefix_with "sqlalchemy.sql.expression.Select.prefix_with")
    - generic SELECT prefixing which also can suit some database-specific HINT syntaxes
    such as MySQL optimizer hints'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE302]'
  prefs: []
  type: TYPE_PRE
- en: Mark a class as being selectable.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[corresponding_column()](#sqlalchemy.sql.expression.Selectable.corresponding_column),
    [exported_columns](#sqlalchemy.sql.expression.Selectable.exported_columns), [inherit_cache](#sqlalchemy.sql.expression.Selectable.inherit_cache),
    [is_derived_from()](#sqlalchemy.sql.expression.Selectable.is_derived_from), [lateral()](#sqlalchemy.sql.expression.Selectable.lateral),
    [replace_selectable()](#sqlalchemy.sql.expression.Selectable.replace_selectable)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.expression.Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable") ([`sqlalchemy.sql.expression.ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows
    "sqlalchemy.sql.expression.ReturnsRows"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE303]'
  prefs: []
  type: TYPE_PRE
- en: Given a [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"), return the exported [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") object from the [`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") collection of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable") which corresponds to that original [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") via a common ancestor column.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`column` – the target [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") to be matched.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`require_embedded` – only return corresponding columns for the given [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"), if the given [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") is actually present within a sub-element
    of this [`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable").
    Normally the column will match if it merely shares a common ancestor with one
    of the exported columns of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") - the [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") that is used for the operation.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnCollection.corresponding_column()`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection.corresponding_column
    "sqlalchemy.sql.expression.ColumnCollection.corresponding_column") - implementation
    method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE304]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ReturnsRows.exported_columns`](#sqlalchemy.sql.expression.ReturnsRows.exported_columns
    "sqlalchemy.sql.expression.ReturnsRows.exported_columns") *attribute of* [`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows
    "sqlalchemy.sql.expression.ReturnsRows")'
  prefs: []
  type: TYPE_NORMAL
- en: A [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") that represents the “exported” columns
    of this [`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows "sqlalchemy.sql.expression.ReturnsRows").
  prefs: []
  type: TYPE_NORMAL
- en: The “exported” columns represent the collection of [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") expressions that are rendered by this
    SQL construct. There are primary varieties which are the “FROM clause columns”
    of a FROM clause, such as a table, join, or subquery, the “SELECTed columns”,
    which are the columns in the “columns clause” of a SELECT statement, and the RETURNING
    columns in a DML statement..
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`FromClause.exported_columns`](#sqlalchemy.sql.expression.FromClause.exported_columns
    "sqlalchemy.sql.expression.FromClause.exported_columns")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`SelectBase.exported_columns`](#sqlalchemy.sql.expression.SelectBase.exported_columns
    "sqlalchemy.sql.expression.SelectBase.exported_columns")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE305]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `HasCacheKey.inherit_cache` *attribute of* [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.cache_key.HasCacheKey")'
  prefs: []
  type: TYPE_NORMAL
- en: Indicate if this [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") instance should make use of the cache
    key generation scheme used by its immediate superclass.
  prefs: []
  type: TYPE_NORMAL
- en: The attribute defaults to `None`, which indicates that a construct has not yet
    taken into account whether or not its appropriate for it to participate in caching;
    this is functionally equivalent to setting the value to `False`, except that a
    warning is also emitted.
  prefs: []
  type: TYPE_NORMAL
- en: This flag can be set to `True` on a particular class, if the SQL that corresponds
    to the object does not change based on attributes which are local to this class,
    and not its superclass.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Enabling Caching Support for Custom Constructs](compiler.html#compilerext-caching)
    - General guideslines for setting the [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute for third-party
    or user defined SQL constructs.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE306]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ReturnsRows.is_derived_from()`](#sqlalchemy.sql.expression.ReturnsRows.is_derived_from
    "sqlalchemy.sql.expression.ReturnsRows.is_derived_from") *method of* [`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows
    "sqlalchemy.sql.expression.ReturnsRows")'
  prefs: []
  type: TYPE_NORMAL
- en: Return `True` if this [`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows
    "sqlalchemy.sql.expression.ReturnsRows") is ‘derived’ from the given [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: An example would be an Alias of a Table is derived from that Table.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE307]'
  prefs: []
  type: TYPE_PRE
- en: Return a LATERAL alias of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable").
  prefs: []
  type: TYPE_NORMAL
- en: The return value is the [`Lateral`](#sqlalchemy.sql.expression.Lateral "sqlalchemy.sql.expression.Lateral")
    construct also provided by the top-level [`lateral()`](#sqlalchemy.sql.expression.lateral
    "sqlalchemy.sql.expression.lateral") function.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[LATERAL correlation](../tutorial/data_select.html#tutorial-lateral-correlation)
    - overview of usage.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE308]'
  prefs: []
  type: TYPE_PRE
- en: Replace all occurrences of [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") ‘old’ with the given [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") object, returning a copy of this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.4: The [`Selectable.replace_selectable()`](#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") method is deprecated,
    and will be removed in a future release. Similar functionality is available via
    the sqlalchemy.sql.visitors module.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE309]'
  prefs: []
  type: TYPE_PRE
- en: Base class for SELECT statements.
  prefs: []
  type: TYPE_NORMAL
- en: This includes [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select"),
    [`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect "sqlalchemy.sql.expression.CompoundSelect")
    and [`TextualSelect`](#sqlalchemy.sql.expression.TextualSelect "sqlalchemy.sql.expression.TextualSelect").
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[add_cte()](#sqlalchemy.sql.expression.SelectBase.add_cte), [alias()](#sqlalchemy.sql.expression.SelectBase.alias),
    [as_scalar()](#sqlalchemy.sql.expression.SelectBase.as_scalar), [c](#sqlalchemy.sql.expression.SelectBase.c),
    [corresponding_column()](#sqlalchemy.sql.expression.SelectBase.corresponding_column),
    [cte()](#sqlalchemy.sql.expression.SelectBase.cte), [exists()](#sqlalchemy.sql.expression.SelectBase.exists),
    [exported_columns](#sqlalchemy.sql.expression.SelectBase.exported_columns), [get_label_style()](#sqlalchemy.sql.expression.SelectBase.get_label_style),
    [inherit_cache](#sqlalchemy.sql.expression.SelectBase.inherit_cache), [is_derived_from()](#sqlalchemy.sql.expression.SelectBase.is_derived_from),
    [label()](#sqlalchemy.sql.expression.SelectBase.label), [lateral()](#sqlalchemy.sql.expression.SelectBase.lateral),
    [replace_selectable()](#sqlalchemy.sql.expression.SelectBase.replace_selectable),
    [scalar_subquery()](#sqlalchemy.sql.expression.SelectBase.scalar_subquery), [select()](#sqlalchemy.sql.expression.SelectBase.select),
    [selected_columns](#sqlalchemy.sql.expression.SelectBase.selected_columns), [set_label_style()](#sqlalchemy.sql.expression.SelectBase.set_label_style),
    [subquery()](#sqlalchemy.sql.expression.SelectBase.subquery)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.expression.SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase") (`sqlalchemy.sql.roles.SelectStatementRole`,
    `sqlalchemy.sql.roles.DMLSelectRole`, `sqlalchemy.sql.roles.CompoundElementRole`,
    `sqlalchemy.sql.roles.InElementRole`, [`sqlalchemy.sql.expression.HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE"), `sqlalchemy.sql.annotation.SupportsCloneAnnotations`,
    [`sqlalchemy.sql.expression.Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE310]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") *method of* [`HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE")'
  prefs: []
  type: TYPE_NORMAL
- en: Add one or more [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    constructs to this statement.
  prefs: []
  type: TYPE_NORMAL
- en: This method will associate the given [`CTE`](#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE") constructs with the parent statement such that
    they will each be unconditionally rendered in the WITH clause of the final statement,
    even if not referenced elsewhere within the statement or any sub-selects.
  prefs: []
  type: TYPE_NORMAL
- en: The optional [`HasCTE.add_cte.nest_here`](#sqlalchemy.sql.expression.HasCTE.add_cte.params.nest_here
    "sqlalchemy.sql.expression.HasCTE.add_cte") parameter when set to True will have
    the effect that each given [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    will render in a WITH clause rendered directly along with this statement, rather
    than being moved to the top of the ultimate rendered statement, even if this statement
    is rendered as a subquery within a larger statement.
  prefs: []
  type: TYPE_NORMAL
- en: This method has two general uses. One is to embed CTE statements that serve
    some purpose without being referenced explicitly, such as the use case of embedding
    a DML statement such as an INSERT or UPDATE as a CTE inline with a primary statement
    that may draw from its results indirectly. The other is to provide control over
    the exact placement of a particular series of CTE constructs that should remain
    rendered directly in terms of a particular statement that may be nested in a larger
    statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE311]'
  prefs: []
  type: TYPE_PRE
- en: 'Would render:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE312]'
  prefs: []
  type: TYPE_PRE
- en: Above, the “anon_1” CTE is not referenced in the SELECT statement, however still
    accomplishes the task of running an INSERT statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly in a DML-related context, using the PostgreSQL [`Insert`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Insert
    "sqlalchemy.dialects.postgresql.Insert") construct to generate an “upsert”:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE313]'
  prefs: []
  type: TYPE_PRE
- en: 'The above statement renders as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE314]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.4.21.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*ctes` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: zero or more [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    constructs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Changed in version 2.0: Multiple CTE instances are accepted'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`nest_here` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: if True, the given CTE or CTEs will be rendered as though they specified the
    [`HasCTE.cte.nesting`](#sqlalchemy.sql.expression.HasCTE.cte.params.nesting "sqlalchemy.sql.expression.HasCTE.cte")
    flag to `True` when they were added to this [`HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE"). Assuming the given CTEs are not referenced
    in an outer-enclosing statement as well, the CTEs given should render at the level
    of this statement when this flag is given.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`HasCTE.cte.nesting`](#sqlalchemy.sql.expression.HasCTE.cte.params.nesting
    "sqlalchemy.sql.expression.HasCTE.cte")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE315]'
  prefs: []
  type: TYPE_PRE
- en: Return a named subquery against this [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase").
  prefs: []
  type: TYPE_NORMAL
- en: For a [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")
    (as opposed to a [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")),
    this returns a [`Subquery`](#sqlalchemy.sql.expression.Subquery "sqlalchemy.sql.expression.Subquery")
    object which behaves mostly the same as the [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") object that is used with a [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The [`SelectBase.alias()`](#sqlalchemy.sql.expression.SelectBase.alias
    "sqlalchemy.sql.expression.SelectBase.alias") method is now a synonym for the
    [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery "sqlalchemy.sql.expression.SelectBase.subquery")
    method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE316]'
  prefs: []
  type: TYPE_PRE
- en: 'Deprecated since version 1.4: The [`SelectBase.as_scalar()`](#sqlalchemy.sql.expression.SelectBase.as_scalar
    "sqlalchemy.sql.expression.SelectBase.as_scalar") method is deprecated and will
    be removed in a future release. Please refer to [`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE317]'
  prefs: []
  type: TYPE_PRE
- en: 'Deprecated since version 1.4: The [`SelectBase.c`](#sqlalchemy.sql.expression.SelectBase.c
    "sqlalchemy.sql.expression.SelectBase.c") and `SelectBase.columns` attributes
    are deprecated and will be removed in a future release; these attributes implicitly
    create a subquery that should be explicit. Please call [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") first in order to create a subquery,
    which then contains this attribute. To access the columns that this SELECT object
    SELECTs from, use the [`SelectBase.selected_columns`](#sqlalchemy.sql.expression.SelectBase.selected_columns
    "sqlalchemy.sql.expression.SelectBase.selected_columns") attribute.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE318]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Selectable.corresponding_column()`](#sqlalchemy.sql.expression.Selectable.corresponding_column
    "sqlalchemy.sql.expression.Selectable.corresponding_column") *method of* [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
  prefs: []
  type: TYPE_NORMAL
- en: Given a [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"), return the exported [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") object from the [`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") collection of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable") which corresponds to that original [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") via a common ancestor column.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`column` – the target [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") to be matched.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`require_embedded` – only return corresponding columns for the given [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"), if the given [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") is actually present within a sub-element
    of this [`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable").
    Normally the column will match if it merely shares a common ancestor with one
    of the exported columns of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") - the [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") that is used for the operation.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnCollection.corresponding_column()`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection.corresponding_column
    "sqlalchemy.sql.expression.ColumnCollection.corresponding_column") - implementation
    method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE319]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte
    "sqlalchemy.sql.expression.HasCTE.cte") *method of* [`HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a new [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE"),
    or Common Table Expression instance.
  prefs: []
  type: TYPE_NORMAL
- en: Common table expressions are a SQL standard whereby SELECT statements can draw
    upon secondary statements specified along with the primary statement, using a
    clause called “WITH”. Special semantics regarding UNION can also be employed to
    allow “recursive” queries, where a SELECT statement can draw upon the set of rows
    that have previously been selected.
  prefs: []
  type: TYPE_NORMAL
- en: CTEs can also be applied to DML constructs UPDATE, INSERT and DELETE on some
    databases, both as a source of CTE rows when combined with RETURNING, as well
    as a consumer of CTE rows.
  prefs: []
  type: TYPE_NORMAL
- en: SQLAlchemy detects [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    objects, which are treated similarly to [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") objects, as special elements to be delivered
    to the FROM clause of the statement as well as to a WITH clause at the top of
    the statement.
  prefs: []
  type: TYPE_NORMAL
- en: For special prefixes such as PostgreSQL “MATERIALIZED” and “NOT MATERIALIZED”,
    the `CTE.prefix_with()` method may be used to establish these.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.3.13: Added support for prefixes. In particular - MATERIALIZED
    and NOT MATERIALIZED.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name` – name given to the common table expression. Like [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias"), the name can be left as `None`
    in which case an anonymous symbol will be used at query compile time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`recursive` – if `True`, will render `WITH RECURSIVE`. A recursive common table
    expression is intended to be used in conjunction with UNION ALL in order to derive
    rows from those already selected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nesting` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: if `True`, will render the CTE locally to the statement in which it is referenced.
    For more complex scenarios, the [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") method using the [`HasCTE.add_cte.nest_here`](#sqlalchemy.sql.expression.HasCTE.add_cte.params.nest_here
    "sqlalchemy.sql.expression.HasCTE.add_cte") parameter may also be used to more
    carefully control the exact placement of a particular CTE.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 1.4.24.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte "sqlalchemy.sql.expression.HasCTE.add_cte")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The following examples include two from PostgreSQL’s documentation at [https://www.postgresql.org/docs/current/static/queries-with.html](https://www.postgresql.org/docs/current/static/queries-with.html),
    as well as additional examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example 1, non recursive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE320]'
  prefs: []
  type: TYPE_PRE
- en: 'Example 2, WITH RECURSIVE:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE321]'
  prefs: []
  type: TYPE_PRE
- en: 'Example 3, an upsert using UPDATE and INSERT with CTEs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE322]'
  prefs: []
  type: TYPE_PRE
- en: 'Example 4, Nesting CTE (SQLAlchemy 1.4.24 and above):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE323]'
  prefs: []
  type: TYPE_PRE
- en: 'The above query will render the second CTE nested inside the first, shown with
    inline parameters below as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE324]'
  prefs: []
  type: TYPE_PRE
- en: 'The same CTE can be set up using the [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") method as follows (SQLAlchemy 2.0
    and above):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE325]'
  prefs: []
  type: TYPE_PRE
- en: 'Example 5, Non-Linear CTE (SQLAlchemy 1.4.28 and above):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE326]'
  prefs: []
  type: TYPE_PRE
- en: 'The above query will render 2 UNIONs inside the recursive CTE:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE327]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.cte()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.cte "sqlalchemy.orm.Query.cte")
    - ORM version of [`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte "sqlalchemy.sql.expression.HasCTE.cte").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE328]'
  prefs: []
  type: TYPE_PRE
- en: Return an [`Exists`](#sqlalchemy.sql.expression.Exists "sqlalchemy.sql.expression.Exists")
    representation of this selectable, which can be used as a column expression.
  prefs: []
  type: TYPE_NORMAL
- en: The returned object is an instance of [`Exists`](#sqlalchemy.sql.expression.Exists
    "sqlalchemy.sql.expression.Exists").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`exists()`](#sqlalchemy.sql.expression.exists "sqlalchemy.sql.expression.exists")'
  prefs: []
  type: TYPE_NORMAL
- en: '[EXISTS subqueries](../tutorial/data_select.html#tutorial-exists) - in the
    [2.0 style](../glossary.html#term-2.0-style) tutorial.'
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE329]'
  prefs: []
  type: TYPE_PRE
- en: A [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") that represents the “exported” columns
    of this [`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable"),
    not including [`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause") constructs.
  prefs: []
  type: TYPE_NORMAL
- en: The “exported” columns for a [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase") object are synonymous with the [`SelectBase.selected_columns`](#sqlalchemy.sql.expression.SelectBase.selected_columns
    "sqlalchemy.sql.expression.SelectBase.selected_columns") collection.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.exported_columns`](#sqlalchemy.sql.expression.Select.exported_columns
    "sqlalchemy.sql.expression.Select.exported_columns")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`FromClause.exported_columns`](#sqlalchemy.sql.expression.FromClause.exported_columns
    "sqlalchemy.sql.expression.FromClause.exported_columns")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE330]'
  prefs: []
  type: TYPE_PRE
- en: Retrieve the current label style.
  prefs: []
  type: TYPE_NORMAL
- en: Implemented by subclasses.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE331]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `HasCacheKey.inherit_cache` *attribute of* [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.cache_key.HasCacheKey")'
  prefs: []
  type: TYPE_NORMAL
- en: Indicate if this [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") instance should make use of the cache
    key generation scheme used by its immediate superclass.
  prefs: []
  type: TYPE_NORMAL
- en: The attribute defaults to `None`, which indicates that a construct has not yet
    taken into account whether or not its appropriate for it to participate in caching;
    this is functionally equivalent to setting the value to `False`, except that a
    warning is also emitted.
  prefs: []
  type: TYPE_NORMAL
- en: This flag can be set to `True` on a particular class, if the SQL that corresponds
    to the object does not change based on attributes which are local to this class,
    and not its superclass.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Enabling Caching Support for Custom Constructs](compiler.html#compilerext-caching)
    - General guideslines for setting the [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute for third-party
    or user defined SQL constructs.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE332]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ReturnsRows.is_derived_from()`](#sqlalchemy.sql.expression.ReturnsRows.is_derived_from
    "sqlalchemy.sql.expression.ReturnsRows.is_derived_from") *method of* [`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows
    "sqlalchemy.sql.expression.ReturnsRows")'
  prefs: []
  type: TYPE_NORMAL
- en: Return `True` if this [`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows
    "sqlalchemy.sql.expression.ReturnsRows") is ‘derived’ from the given [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: An example would be an Alias of a Table is derived from that Table.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE333]'
  prefs: []
  type: TYPE_PRE
- en: Return a ‘scalar’ representation of this selectable, embedded as a subquery
    with a label.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE334]'
  prefs: []
  type: TYPE_PRE
- en: Return a LATERAL alias of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable").
  prefs: []
  type: TYPE_NORMAL
- en: The return value is the [`Lateral`](#sqlalchemy.sql.expression.Lateral "sqlalchemy.sql.expression.Lateral")
    construct also provided by the top-level [`lateral()`](#sqlalchemy.sql.expression.lateral
    "sqlalchemy.sql.expression.lateral") function.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[LATERAL correlation](../tutorial/data_select.html#tutorial-lateral-correlation)
    - overview of usage.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE335]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Selectable.replace_selectable()`](#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") *method of* [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
  prefs: []
  type: TYPE_NORMAL
- en: Replace all occurrences of [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") ‘old’ with the given [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") object, returning a copy of this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.4: The [`Selectable.replace_selectable()`](#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") method is deprecated,
    and will be removed in a future release. Similar functionality is available via
    the sqlalchemy.sql.visitors module.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE336]'
  prefs: []
  type: TYPE_PRE
- en: Return a ‘scalar’ representation of this selectable, which can be used as a
    column expression.
  prefs: []
  type: TYPE_NORMAL
- en: The returned object is an instance of [`ScalarSelect`](#sqlalchemy.sql.expression.ScalarSelect
    "sqlalchemy.sql.expression.ScalarSelect").
  prefs: []
  type: TYPE_NORMAL
- en: Typically, a select statement which has only one column in its columns clause
    is eligible to be used as a scalar expression. The scalar subquery can then be
    used in the WHERE clause or columns clause of an enclosing SELECT.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the scalar subquery differentiates from the FROM-level subquery that
    can be produced using the [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") method.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Scalar and Correlated Subqueries](../tutorial/data_select.html#tutorial-scalar-subquery)
    - in the 2.0 tutorial'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE337]'
  prefs: []
  type: TYPE_PRE
- en: 'Deprecated since version 1.4: The [`SelectBase.select()`](#sqlalchemy.sql.expression.SelectBase.select
    "sqlalchemy.sql.expression.SelectBase.select") method is deprecated and will be
    removed in a future release; this method implicitly creates a subquery that should
    be explicit. Please call [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") first in order to create a subquery,
    which then can be selected.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE338]'
  prefs: []
  type: TYPE_PRE
- en: A [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") representing the columns that this
    SELECT statement or similar construct returns in its result set.
  prefs: []
  type: TYPE_NORMAL
- en: This collection differs from the [`FromClause.columns`](#sqlalchemy.sql.expression.FromClause.columns
    "sqlalchemy.sql.expression.FromClause.columns") collection of a [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") in that the columns within this collection
    cannot be directly nested inside another SELECT statement; a subquery must be
    applied first which provides for the necessary parenthesization required by SQL.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The [`SelectBase.selected_columns`](#sqlalchemy.sql.expression.SelectBase.selected_columns
    "sqlalchemy.sql.expression.SelectBase.selected_columns") collection does not include
    expressions established in the columns clause using the [`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct; these are silently omitted from the
    collection. To use plain textual column expressions inside of a [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") construct, use the [`literal_column()`](sqlelement.html#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column") construct.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.selected_columns`](#sqlalchemy.sql.expression.Select.selected_columns
    "sqlalchemy.sql.expression.Select.selected_columns")'
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE339]'
  prefs: []
  type: TYPE_PRE
- en: Return a new selectable with the specified label style.
  prefs: []
  type: TYPE_NORMAL
- en: Implemented by subclasses.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE340]'
  prefs: []
  type: TYPE_PRE
- en: Return a subquery of this [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase").
  prefs: []
  type: TYPE_NORMAL
- en: A subquery is from a SQL perspective a parenthesized, named construct that can
    be placed in the FROM clause of another SELECT statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'Given a SELECT statement such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE341]'
  prefs: []
  type: TYPE_PRE
- en: 'The above statement might look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE342]'
  prefs: []
  type: TYPE_PRE
- en: 'The subquery form by itself renders the same way, however when embedded into
    the FROM clause of another SELECT statement, it becomes a named sub-element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE343]'
  prefs: []
  type: TYPE_PRE
- en: 'The above renders as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE344]'
  prefs: []
  type: TYPE_PRE
- en: Historically, [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") is equivalent to calling the
    [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias "sqlalchemy.sql.expression.FromClause.alias")
    method on a FROM object; however, as a [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase") object is not directly FROM object, the
    [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery "sqlalchemy.sql.expression.SelectBase.subquery")
    method provides clearer semantics.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE345]'
  prefs: []
  type: TYPE_PRE
- en: Represent a subquery of a SELECT.
  prefs: []
  type: TYPE_NORMAL
- en: A [`Subquery`](#sqlalchemy.sql.expression.Subquery "sqlalchemy.sql.expression.Subquery")
    is created by invoking the [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") method, or for convenience the
    [`SelectBase.alias()`](#sqlalchemy.sql.expression.SelectBase.alias "sqlalchemy.sql.expression.SelectBase.alias")
    method, on any [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")
    subclass which includes [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select"),
    [`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect "sqlalchemy.sql.expression.CompoundSelect"),
    and [`TextualSelect`](#sqlalchemy.sql.expression.TextualSelect "sqlalchemy.sql.expression.TextualSelect").
    As rendered in a FROM clause, it represents the body of the SELECT statement inside
    of parenthesis, followed by the usual “AS <somename>” that defines all “alias”
    objects.
  prefs: []
  type: TYPE_NORMAL
- en: The [`Subquery`](#sqlalchemy.sql.expression.Subquery "sqlalchemy.sql.expression.Subquery")
    object is very similar to the [`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    object and can be used in an equivalent way. The difference between [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") and [`Subquery`](#sqlalchemy.sql.expression.Subquery
    "sqlalchemy.sql.expression.Subquery") is that [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") always contains a [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") object whereas [`Subquery`](#sqlalchemy.sql.expression.Subquery
    "sqlalchemy.sql.expression.Subquery") always contains a [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase") object.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4: The [`Subquery`](#sqlalchemy.sql.expression.Subquery "sqlalchemy.sql.expression.Subquery")
    class was added which now serves the purpose of providing an aliased version of
    a SELECT statement.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[as_scalar()](#sqlalchemy.sql.expression.Subquery.as_scalar), [inherit_cache](#sqlalchemy.sql.expression.Subquery.inherit_cache)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.expression.Subquery`](#sqlalchemy.sql.expression.Subquery
    "sqlalchemy.sql.expression.Subquery") ([`sqlalchemy.sql.expression.AliasedReturnsRows`](#sqlalchemy.sql.expression.AliasedReturnsRows
    "sqlalchemy.sql.expression.AliasedReturnsRows"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE346]'
  prefs: []
  type: TYPE_PRE
- en: 'Deprecated since version 1.4: The [`Subquery.as_scalar()`](#sqlalchemy.sql.expression.Subquery.as_scalar
    "sqlalchemy.sql.expression.Subquery.as_scalar") method, which was previously `Alias.as_scalar()`
    prior to version 1.4, is deprecated and will be removed in a future release; Please
    use the [`Select.scalar_subquery()`](#sqlalchemy.sql.expression.Select.scalar_subquery
    "sqlalchemy.sql.expression.Select.scalar_subquery") method of the [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct before constructing a subquery object,
    or with the ORM use the [`Query.scalar_subquery()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.scalar_subquery
    "sqlalchemy.orm.Query.scalar_subquery") method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE347]'
  prefs: []
  type: TYPE_PRE
- en: Indicate if this [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") instance should make use of the cache
    key generation scheme used by its immediate superclass.
  prefs: []
  type: TYPE_NORMAL
- en: The attribute defaults to `None`, which indicates that a construct has not yet
    taken into account whether or not its appropriate for it to participate in caching;
    this is functionally equivalent to setting the value to `False`, except that a
    warning is also emitted.
  prefs: []
  type: TYPE_NORMAL
- en: This flag can be set to `True` on a particular class, if the SQL that corresponds
    to the object does not change based on attributes which are local to this class,
    and not its superclass.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Enabling Caching Support for Custom Constructs](compiler.html#compilerext-caching)
    - General guideslines for setting the [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute for third-party
    or user defined SQL constructs.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE348]'
  prefs: []
  type: TYPE_PRE
- en: Represents a minimal “table” construct.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a lightweight table object that has only a name, a collection of columns,
    which are typically produced by the [`column()`](sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column") function, and a schema:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE349]'
  prefs: []
  type: TYPE_PRE
- en: The [`TableClause`](#sqlalchemy.sql.expression.TableClause "sqlalchemy.sql.expression.TableClause")
    construct serves as the base for the more commonly used [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object, providing the usual set of [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") services including the `.c.` collection
    and statement generation methods.
  prefs: []
  type: TYPE_NORMAL
- en: It does **not** provide all the additional schema-level services of [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), including constraints, references to other tables,
    or support for [`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")-level
    services. It’s useful on its own as an ad-hoc construct used to generate quick
    SQL statements when a more fully fledged [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") is not on hand.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[alias()](#sqlalchemy.sql.expression.TableClause.alias), [c](#sqlalchemy.sql.expression.TableClause.c),
    [columns](#sqlalchemy.sql.expression.TableClause.columns), [compare()](#sqlalchemy.sql.expression.TableClause.compare),
    [compile()](#sqlalchemy.sql.expression.TableClause.compile), [corresponding_column()](#sqlalchemy.sql.expression.TableClause.corresponding_column),
    [delete()](#sqlalchemy.sql.expression.TableClause.delete), [description](#sqlalchemy.sql.expression.TableClause.description),
    [entity_namespace](#sqlalchemy.sql.expression.TableClause.entity_namespace), [exported_columns](#sqlalchemy.sql.expression.TableClause.exported_columns),
    [foreign_keys](#sqlalchemy.sql.expression.TableClause.foreign_keys), [get_children()](#sqlalchemy.sql.expression.TableClause.get_children),
    [implicit_returning](#sqlalchemy.sql.expression.TableClause.implicit_returning),
    [inherit_cache](#sqlalchemy.sql.expression.TableClause.inherit_cache), [insert()](#sqlalchemy.sql.expression.TableClause.insert),
    [is_derived_from()](#sqlalchemy.sql.expression.TableClause.is_derived_from), [join()](#sqlalchemy.sql.expression.TableClause.join),
    [lateral()](#sqlalchemy.sql.expression.TableClause.lateral), [outerjoin()](#sqlalchemy.sql.expression.TableClause.outerjoin),
    [params()](#sqlalchemy.sql.expression.TableClause.params), [primary_key](#sqlalchemy.sql.expression.TableClause.primary_key),
    [replace_selectable()](#sqlalchemy.sql.expression.TableClause.replace_selectable),
    [schema](#sqlalchemy.sql.expression.TableClause.schema), [select()](#sqlalchemy.sql.expression.TableClause.select),
    [self_group()](#sqlalchemy.sql.expression.TableClause.self_group), [table_valued()](#sqlalchemy.sql.expression.TableClause.table_valued),
    [tablesample()](#sqlalchemy.sql.expression.TableClause.tablesample), [unique_params()](#sqlalchemy.sql.expression.TableClause.unique_params),
    [update()](#sqlalchemy.sql.expression.TableClause.update)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.expression.TableClause`](#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause") (`sqlalchemy.sql.roles.DMLTableRole`,
    `sqlalchemy.sql.expression.Immutable`, `sqlalchemy.sql.expression.NamedFromClause`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE350]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") *method of* [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  prefs: []
  type: TYPE_NORMAL
- en: Return an alias of this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE351]'
  prefs: []
  type: TYPE_PRE
- en: The above code creates an [`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    object which can be used as a FROM clause in any SELECT statement.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Using Aliases](../tutorial/data_select.html#tutorial-using-aliases)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`alias()`](#sqlalchemy.sql.expression.alias "sqlalchemy.sql.expression.alias")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE352]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`FromClause.c`](#sqlalchemy.sql.expression.FromClause.c
    "sqlalchemy.sql.expression.FromClause.c") *attribute of* [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  prefs: []
  type: TYPE_NORMAL
- en: A synonym for [`FromClause.columns`](#sqlalchemy.sql.expression.FromClause.columns
    "sqlalchemy.sql.expression.FromClause.columns")
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE353]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`FromClause.columns`](#sqlalchemy.sql.expression.FromClause.columns
    "sqlalchemy.sql.expression.FromClause.columns") *attribute of* [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  prefs: []
  type: TYPE_NORMAL
- en: A named-based collection of [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") objects maintained by this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`columns`](#sqlalchemy.sql.expression.TableClause.columns "sqlalchemy.sql.expression.TableClause.columns"),
    or [`c`](#sqlalchemy.sql.expression.TableClause.c "sqlalchemy.sql.expression.TableClause.c")
    collection, is the gateway to the construction of SQL expressions using table-bound
    or other selectable-bound columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE354]'
  prefs: []
  type: TYPE_PRE
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE355]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ClauseElement.compare()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.compare
    "sqlalchemy.sql.expression.ClauseElement.compare") *method of* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
  prefs: []
  type: TYPE_NORMAL
- en: Compare this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") to the given [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  prefs: []
  type: TYPE_NORMAL
- en: Subclasses should override the default behavior, which is a straight identity
    comparison.
  prefs: []
  type: TYPE_NORMAL
- en: '**kw are arguments consumed by subclass `compare()` methods and may be used
    to modify the criteria for comparison (see [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE356]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `CompilerElement.compile()` *method of* `CompilerElement`'
  prefs: []
  type: TYPE_NORMAL
- en: Compile this SQL expression.
  prefs: []
  type: TYPE_NORMAL
- en: The return value is a [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object. Calling `str()` or `unicode()` on the returned
    value will yield a string representation of the result. The [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object also can return a dictionary of bind parameter
    names and values using the `params` accessor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`bind` – An [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    or [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    which can provide a [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    in order to generate a [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object. If the `bind` and `dialect` parameters are
    both omitted, a default SQL compiler is used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`column_keys` – Used for INSERT and UPDATE statements, a list of column names
    which should be present in the VALUES clause of the compiled statement. If `None`,
    all columns from the target table object are rendered.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dialect` – A [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    instance which can generate a [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object. This argument takes precedence over the
    `bind` argument.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`compile_kwargs` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'optional dictionary of additional parameters that will be passed through to
    the compiler within all “visit” methods. This allows any custom flag to be passed
    through to a custom compilation construct, for example. It is also used for the
    case of passing the `literal_binds` flag through:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE357]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[How do I render SQL expressions as strings, possibly with bound parameters
    inlined?](../faq/sqlexpressions.html#faq-sql-expression-string)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE358]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Selectable.corresponding_column()`](#sqlalchemy.sql.expression.Selectable.corresponding_column
    "sqlalchemy.sql.expression.Selectable.corresponding_column") *method of* [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
  prefs: []
  type: TYPE_NORMAL
- en: Given a [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"), return the exported [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") object from the [`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") collection of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable") which corresponds to that original [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") via a common ancestor column.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`column` – the target [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") to be matched.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`require_embedded` – only return corresponding columns for the given [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"), if the given [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") is actually present within a sub-element
    of this [`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable").
    Normally the column will match if it merely shares a common ancestor with one
    of the exported columns of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") - the [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") that is used for the operation.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnCollection.corresponding_column()`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection.corresponding_column
    "sqlalchemy.sql.expression.ColumnCollection.corresponding_column") - implementation
    method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE359]'
  prefs: []
  type: TYPE_PRE
- en: Generate a [`delete()`](dml.html#sqlalchemy.sql.expression.delete "sqlalchemy.sql.expression.delete")
    construct against this [`TableClause`](#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause").
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE360]'
  prefs: []
  type: TYPE_PRE
- en: See [`delete()`](dml.html#sqlalchemy.sql.expression.delete "sqlalchemy.sql.expression.delete")
    for argument and usage information.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE361]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE362]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`FromClause.entity_namespace`](#sqlalchemy.sql.expression.FromClause.entity_namespace
    "sqlalchemy.sql.expression.FromClause.entity_namespace") *attribute of* [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a namespace used for name-based access in SQL expressions.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the namespace that is used to resolve “filter_by()” type expressions,
    such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE363]'
  prefs: []
  type: TYPE_PRE
- en: It defaults to the `.c` collection, however internally it can be overridden
    using the “entity_namespace” annotation to deliver alternative results.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE364]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`FromClause.exported_columns`](#sqlalchemy.sql.expression.FromClause.exported_columns
    "sqlalchemy.sql.expression.FromClause.exported_columns") *attribute of* [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  prefs: []
  type: TYPE_NORMAL
- en: A [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") that represents the “exported” columns
    of this [`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable").
  prefs: []
  type: TYPE_NORMAL
- en: The “exported” columns for a [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") object are synonymous with the [`FromClause.columns`](#sqlalchemy.sql.expression.FromClause.columns
    "sqlalchemy.sql.expression.FromClause.columns") collection.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`SelectBase.exported_columns`](#sqlalchemy.sql.expression.SelectBase.exported_columns
    "sqlalchemy.sql.expression.SelectBase.exported_columns")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE365]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`FromClause.foreign_keys`](#sqlalchemy.sql.expression.FromClause.foreign_keys
    "sqlalchemy.sql.expression.FromClause.foreign_keys") *attribute of* [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  prefs: []
  type: TYPE_NORMAL
- en: Return the collection of [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") marker objects which this FromClause references.
  prefs: []
  type: TYPE_NORMAL
- en: Each [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    is a member of a [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")-wide
    [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Table.foreign_key_constraints`](metadata.html#sqlalchemy.schema.Table.foreign_key_constraints
    "sqlalchemy.schema.Table.foreign_key_constraints")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE366]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `HasTraverseInternals.get_children()` *method of* `HasTraverseInternals`'
  prefs: []
  type: TYPE_NORMAL
- en: Return immediate child `HasTraverseInternals` elements of this `HasTraverseInternals`.
  prefs: []
  type: TYPE_NORMAL
- en: This is used for visit traversal.
  prefs: []
  type: TYPE_NORMAL
- en: '**kw may contain flags that change the collection that is returned, for example
    to return a subset of items in order to cut down on larger traversals, or to return
    child items from a different context (such as schema-level collections instead
    of clause-level).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE367]'
  prefs: []
  type: TYPE_PRE
- en: '[`TableClause`](#sqlalchemy.sql.expression.TableClause "sqlalchemy.sql.expression.TableClause")
    doesn’t support having a primary key or column -level defaults, so implicit returning
    doesn’t apply.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE368]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `HasCacheKey.inherit_cache` *attribute of* [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.cache_key.HasCacheKey")'
  prefs: []
  type: TYPE_NORMAL
- en: Indicate if this [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") instance should make use of the cache
    key generation scheme used by its immediate superclass.
  prefs: []
  type: TYPE_NORMAL
- en: The attribute defaults to `None`, which indicates that a construct has not yet
    taken into account whether or not its appropriate for it to participate in caching;
    this is functionally equivalent to setting the value to `False`, except that a
    warning is also emitted.
  prefs: []
  type: TYPE_NORMAL
- en: This flag can be set to `True` on a particular class, if the SQL that corresponds
    to the object does not change based on attributes which are local to this class,
    and not its superclass.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Enabling Caching Support for Custom Constructs](compiler.html#compilerext-caching)
    - General guideslines for setting the [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute for third-party
    or user defined SQL constructs.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE369]'
  prefs: []
  type: TYPE_PRE
- en: Generate an [`Insert`](dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    construct against this [`TableClause`](#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause").
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE370]'
  prefs: []
  type: TYPE_PRE
- en: See [`insert()`](dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert")
    for argument and usage information.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE371]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`FromClause.is_derived_from()`](#sqlalchemy.sql.expression.FromClause.is_derived_from
    "sqlalchemy.sql.expression.FromClause.is_derived_from") *method of* [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  prefs: []
  type: TYPE_NORMAL
- en: Return `True` if this [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    is ‘derived’ from the given `FromClause`.
  prefs: []
  type: TYPE_NORMAL
- en: An example would be an Alias of a Table is derived from that Table.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE372]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join") *method of* [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a [`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    from this [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    to another [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE373]'
  prefs: []
  type: TYPE_PRE
- en: 'would emit SQL along the lines of:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE374]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`right` – the right side of the join; this is any [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") object such as a [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object, and may also be a selectable-compatible object
    such as an ORM-mapped class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onclause` – a SQL expression representing the ON clause of the join. If left
    at `None`, [`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join "sqlalchemy.sql.expression.FromClause.join")
    will attempt to join the two tables based on a foreign key relationship.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`isouter` – if True, render a LEFT OUTER JOIN, instead of JOIN.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`full` – if True, render a FULL OUTER JOIN, instead of LEFT OUTER JOIN. Implies
    [`FromClause.join.isouter`](#sqlalchemy.sql.expression.FromClause.join.params.isouter
    "sqlalchemy.sql.expression.FromClause.join").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`join()`](#sqlalchemy.sql.expression.join "sqlalchemy.sql.expression.join")
    - standalone function'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    - the type of object produced'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE375]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Selectable.lateral()`](#sqlalchemy.sql.expression.Selectable.lateral
    "sqlalchemy.sql.expression.Selectable.lateral") *method of* [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a LATERAL alias of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable").
  prefs: []
  type: TYPE_NORMAL
- en: The return value is the [`Lateral`](#sqlalchemy.sql.expression.Lateral "sqlalchemy.sql.expression.Lateral")
    construct also provided by the top-level [`lateral()`](#sqlalchemy.sql.expression.lateral
    "sqlalchemy.sql.expression.lateral") function.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[LATERAL correlation](../tutorial/data_select.html#tutorial-lateral-correlation)
    - overview of usage.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE376]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`FromClause.outerjoin()`](#sqlalchemy.sql.expression.FromClause.outerjoin
    "sqlalchemy.sql.expression.FromClause.outerjoin") *method of* [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a [`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    from this [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    to another [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause"),
    with the “isouter” flag set to True.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE377]'
  prefs: []
  type: TYPE_PRE
- en: 'The above is equivalent to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE378]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`right` – the right side of the join; this is any [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") object such as a [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object, and may also be a selectable-compatible object
    such as an ORM-mapped class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onclause` – a SQL expression representing the ON clause of the join. If left
    at `None`, [`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join "sqlalchemy.sql.expression.FromClause.join")
    will attempt to join the two tables based on a foreign key relationship.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`full` – if True, render a FULL OUTER JOIN, instead of LEFT OUTER JOIN.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join "sqlalchemy.sql.expression.FromClause.join")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE379]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `Immutable.params()` *method of* `Immutable`'
  prefs: []
  type: TYPE_NORMAL
- en: Return a copy with [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") elements replaced.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns a copy of this ClauseElement with [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") elements replaced with values taken from
    the given dictionary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE380]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE381]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`FromClause.primary_key`](#sqlalchemy.sql.expression.FromClause.primary_key
    "sqlalchemy.sql.expression.FromClause.primary_key") *attribute of* [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  prefs: []
  type: TYPE_NORMAL
- en: Return the iterable collection of [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects which comprise the primary key of this `_selectable.FromClause`.
  prefs: []
  type: TYPE_NORMAL
- en: For a [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object, this collection is represented by the [`PrimaryKeyConstraint`](constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") which itself is an iterable collection
    of [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    objects.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE382]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Selectable.replace_selectable()`](#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") *method of* [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
  prefs: []
  type: TYPE_NORMAL
- en: Replace all occurrences of [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") ‘old’ with the given [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") object, returning a copy of this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.4: The [`Selectable.replace_selectable()`](#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") method is deprecated,
    and will be removed in a future release. Similar functionality is available via
    the sqlalchemy.sql.visitors module.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE383]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`FromClause.schema`](#sqlalchemy.sql.expression.FromClause.schema
    "sqlalchemy.sql.expression.FromClause.schema") *attribute of* [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  prefs: []
  type: TYPE_NORMAL
- en: Define the ‘schema’ attribute for this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: This is typically `None` for most objects except that of [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), where it is taken as the value of the [`Table.schema`](metadata.html#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table") argument.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE384]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`FromClause.select()`](#sqlalchemy.sql.expression.FromClause.select
    "sqlalchemy.sql.expression.FromClause.select") *method of* [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a SELECT of this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE385]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    - general purpose method which allows for arbitrary column lists.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE386]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ClauseElement.self_group()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.self_group
    "sqlalchemy.sql.expression.ClauseElement.self_group") *method of* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
  prefs: []
  type: TYPE_NORMAL
- en: Apply a ‘grouping’ to this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  prefs: []
  type: TYPE_NORMAL
- en: This method is overridden by subclasses to return a “grouping” construct, i.e.
    parenthesis. In particular it’s used by “binary” expressions to provide a grouping
    around themselves when placed into a larger expression, as well as by [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs when placed into the FROM clause
    of another [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select").
    (Note that subqueries should be normally created using the [`Select.alias()`](#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") method, as many platforms require nested
    SELECT statements to be named).
  prefs: []
  type: TYPE_NORMAL
- en: As expressions are composed together, the application of [`self_group()`](#sqlalchemy.sql.expression.TableClause.self_group
    "sqlalchemy.sql.expression.TableClause.self_group") is automatic - end-user code
    should never need to use this method directly. Note that SQLAlchemy’s clause constructs
    take operator precedence into account - so parenthesis might not be needed, for
    example, in an expression like `x OR (y AND z)` - AND takes precedence over OR.
  prefs: []
  type: TYPE_NORMAL
- en: The base [`self_group()`](#sqlalchemy.sql.expression.TableClause.self_group
    "sqlalchemy.sql.expression.TableClause.self_group") method of [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") just returns self.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE387]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `NamedFromClause.table_valued()` *method of* `NamedFromClause`'
  prefs: []
  type: TYPE_NORMAL
- en: Return a `TableValuedColumn` object for this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: A `TableValuedColumn` is a [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") that represents a complete row in a
    table. Support for this construct is backend dependent, and is supported in various
    forms by backends such as PostgreSQL, Oracle and SQL Server.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE388]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.4.0b2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Working with SQL Functions](../tutorial/data_select.html#tutorial-functions)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE389]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`FromClause.tablesample()`](#sqlalchemy.sql.expression.FromClause.tablesample
    "sqlalchemy.sql.expression.FromClause.tablesample") *method of* [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a TABLESAMPLE alias of this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: The return value is the [`TableSample`](#sqlalchemy.sql.expression.TableSample
    "sqlalchemy.sql.expression.TableSample") construct also provided by the top-level
    [`tablesample()`](#sqlalchemy.sql.expression.tablesample "sqlalchemy.sql.expression.tablesample")
    function.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`tablesample()`](#sqlalchemy.sql.expression.tablesample "sqlalchemy.sql.expression.tablesample")
    - usage guidelines and parameters'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE390]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `Immutable.unique_params()` *method of* `Immutable`'
  prefs: []
  type: TYPE_NORMAL
- en: Return a copy with [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") elements replaced.
  prefs: []
  type: TYPE_NORMAL
- en: Same functionality as [`ClauseElement.params()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.params
    "sqlalchemy.sql.expression.ClauseElement.params"), except adds unique=True to
    affected bind parameters so that multiple statements can be used.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE391]'
  prefs: []
  type: TYPE_PRE
- en: Generate an [`update()`](dml.html#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update")
    construct against this [`TableClause`](#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause").
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE392]'
  prefs: []
  type: TYPE_PRE
- en: See [`update()`](dml.html#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update")
    for argument and usage information.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE393]'
  prefs: []
  type: TYPE_PRE
- en: Represent a TABLESAMPLE clause.
  prefs: []
  type: TYPE_NORMAL
- en: This object is constructed from the [`tablesample()`](#sqlalchemy.sql.expression.tablesample
    "sqlalchemy.sql.expression.tablesample") module level function as well as the
    [`FromClause.tablesample()`](#sqlalchemy.sql.expression.FromClause.tablesample
    "sqlalchemy.sql.expression.FromClause.tablesample") method available on all [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") subclasses.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`tablesample()`](#sqlalchemy.sql.expression.tablesample "sqlalchemy.sql.expression.tablesample")'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.expression.TableSample`](#sqlalchemy.sql.expression.TableSample
    "sqlalchemy.sql.expression.TableSample") (`sqlalchemy.sql.expression.FromClauseAlias`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE394]'
  prefs: []
  type: TYPE_PRE
- en: An alias against a “table valued” SQL function.
  prefs: []
  type: TYPE_NORMAL
- en: 'This construct provides for a SQL function that returns columns to be used
    in the FROM clause of a SELECT statement. The object is generated using the [`FunctionElement.table_valued()`](functions.html#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued") method, e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE395]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.4.0b2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Table-Valued Functions](../tutorial/data_select.html#tutorial-functions-table-valued)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[alias()](#sqlalchemy.sql.expression.TableValuedAlias.alias), [column](#sqlalchemy.sql.expression.TableValuedAlias.column),
    [lateral()](#sqlalchemy.sql.expression.TableValuedAlias.lateral), [render_derived()](#sqlalchemy.sql.expression.TableValuedAlias.render_derived)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.expression.TableValuedAlias`](#sqlalchemy.sql.expression.TableValuedAlias
    "sqlalchemy.sql.expression.TableValuedAlias") (`sqlalchemy.sql.expression.LateralFromClause`,
    [`sqlalchemy.sql.expression.Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE396]'
  prefs: []
  type: TYPE_PRE
- en: Return a new alias of this [`TableValuedAlias`](#sqlalchemy.sql.expression.TableValuedAlias
    "sqlalchemy.sql.expression.TableValuedAlias").
  prefs: []
  type: TYPE_NORMAL
- en: This creates a distinct FROM object that will be distinguished from the original
    one when used in a SQL statement.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE397]'
  prefs: []
  type: TYPE_PRE
- en: Return a column expression representing this [`TableValuedAlias`](#sqlalchemy.sql.expression.TableValuedAlias
    "sqlalchemy.sql.expression.TableValuedAlias").
  prefs: []
  type: TYPE_NORMAL
- en: This accessor is used to implement the [`FunctionElement.column_valued()`](functions.html#sqlalchemy.sql.functions.FunctionElement.column_valued
    "sqlalchemy.sql.functions.FunctionElement.column_valued") method. See that method
    for further details.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE398]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`FunctionElement.column_valued()`](functions.html#sqlalchemy.sql.functions.FunctionElement.column_valued
    "sqlalchemy.sql.functions.FunctionElement.column_valued")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE399]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`TableValuedAlias`](#sqlalchemy.sql.expression.TableValuedAlias
    "sqlalchemy.sql.expression.TableValuedAlias") with the lateral flag set, so that
    it renders as LATERAL.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`lateral()`](#sqlalchemy.sql.expression.lateral "sqlalchemy.sql.expression.lateral")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE400]'
  prefs: []
  type: TYPE_PRE
- en: Apply “render derived” to this [`TableValuedAlias`](#sqlalchemy.sql.expression.TableValuedAlias
    "sqlalchemy.sql.expression.TableValuedAlias").
  prefs: []
  type: TYPE_NORMAL
- en: 'This has the effect of the individual column names listed out after the alias
    name in the “AS” sequence, e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE401]'
  prefs: []
  type: TYPE_PRE
- en: 'The `with_types` keyword will render column types inline within the alias expression
    (this syntax currently applies to the PostgreSQL database):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE402]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name` – optional string name that will be applied to the alias generated.
    If left as None, a unique anonymizing name will be used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`with_types` – if True, the derived columns will include the datatype specification
    with each column. This is a special syntax currently known to be required by PostgreSQL
    for some SQL functions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE403]'
  prefs: []
  type: TYPE_PRE
- en: Wrap a [`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause "sqlalchemy.sql.expression.TextClause")
    construct within a [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")
    interface.
  prefs: []
  type: TYPE_NORMAL
- en: This allows the [`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause") object to gain a `.c` collection and other
    FROM-like capabilities such as [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias"), [`SelectBase.cte()`](#sqlalchemy.sql.expression.SelectBase.cte
    "sqlalchemy.sql.expression.SelectBase.cte"), etc.
  prefs: []
  type: TYPE_NORMAL
- en: The [`TextualSelect`](#sqlalchemy.sql.expression.TextualSelect "sqlalchemy.sql.expression.TextualSelect")
    construct is produced via the [`TextClause.columns()`](sqlelement.html#sqlalchemy.sql.expression.TextClause.columns
    "sqlalchemy.sql.expression.TextClause.columns") method - see that method for details.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: the [`TextualSelect`](#sqlalchemy.sql.expression.TextualSelect
    "sqlalchemy.sql.expression.TextualSelect") class was renamed from `TextAsFrom`,
    to more correctly suit its role as a SELECT-oriented object and not a FROM clause.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`text()`](sqlelement.html#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`TextClause.columns()`](sqlelement.html#sqlalchemy.sql.expression.TextClause.columns
    "sqlalchemy.sql.expression.TextClause.columns") - primary creation interface.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[add_cte()](#sqlalchemy.sql.expression.TextualSelect.add_cte), [alias()](#sqlalchemy.sql.expression.TextualSelect.alias),
    [as_scalar()](#sqlalchemy.sql.expression.TextualSelect.as_scalar), [c](#sqlalchemy.sql.expression.TextualSelect.c),
    [compare()](#sqlalchemy.sql.expression.TextualSelect.compare), [compile()](#sqlalchemy.sql.expression.TextualSelect.compile),
    [corresponding_column()](#sqlalchemy.sql.expression.TextualSelect.corresponding_column),
    [cte()](#sqlalchemy.sql.expression.TextualSelect.cte), [execution_options()](#sqlalchemy.sql.expression.TextualSelect.execution_options),
    [exists()](#sqlalchemy.sql.expression.TextualSelect.exists), [exported_columns](#sqlalchemy.sql.expression.TextualSelect.exported_columns),
    [get_children()](#sqlalchemy.sql.expression.TextualSelect.get_children), [get_execution_options()](#sqlalchemy.sql.expression.TextualSelect.get_execution_options),
    [get_label_style()](#sqlalchemy.sql.expression.TextualSelect.get_label_style),
    [inherit_cache](#sqlalchemy.sql.expression.TextualSelect.inherit_cache), [is_derived_from()](#sqlalchemy.sql.expression.TextualSelect.is_derived_from),
    [label()](#sqlalchemy.sql.expression.TextualSelect.label), [lateral()](#sqlalchemy.sql.expression.TextualSelect.lateral),
    [options()](#sqlalchemy.sql.expression.TextualSelect.options), [params()](#sqlalchemy.sql.expression.TextualSelect.params),
    [replace_selectable()](#sqlalchemy.sql.expression.TextualSelect.replace_selectable),
    [scalar_subquery()](#sqlalchemy.sql.expression.TextualSelect.scalar_subquery),
    [select()](#sqlalchemy.sql.expression.TextualSelect.select), [selected_columns](#sqlalchemy.sql.expression.TextualSelect.selected_columns),
    [self_group()](#sqlalchemy.sql.expression.TextualSelect.self_group), [set_label_style()](#sqlalchemy.sql.expression.TextualSelect.set_label_style),
    [subquery()](#sqlalchemy.sql.expression.TextualSelect.subquery), [unique_params()](#sqlalchemy.sql.expression.TextualSelect.unique_params)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.expression.TextualSelect`](#sqlalchemy.sql.expression.TextualSelect
    "sqlalchemy.sql.expression.TextualSelect") ([`sqlalchemy.sql.expression.SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase"), `sqlalchemy.sql.expression.ExecutableReturnsRows`,
    `sqlalchemy.sql.expression.Generative`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE404]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") *method of* [`HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE")'
  prefs: []
  type: TYPE_NORMAL
- en: Add one or more [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    constructs to this statement.
  prefs: []
  type: TYPE_NORMAL
- en: This method will associate the given [`CTE`](#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE") constructs with the parent statement such that
    they will each be unconditionally rendered in the WITH clause of the final statement,
    even if not referenced elsewhere within the statement or any sub-selects.
  prefs: []
  type: TYPE_NORMAL
- en: The optional [`HasCTE.add_cte.nest_here`](#sqlalchemy.sql.expression.HasCTE.add_cte.params.nest_here
    "sqlalchemy.sql.expression.HasCTE.add_cte") parameter when set to True will have
    the effect that each given [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    will render in a WITH clause rendered directly along with this statement, rather
    than being moved to the top of the ultimate rendered statement, even if this statement
    is rendered as a subquery within a larger statement.
  prefs: []
  type: TYPE_NORMAL
- en: This method has two general uses. One is to embed CTE statements that serve
    some purpose without being referenced explicitly, such as the use case of embedding
    a DML statement such as an INSERT or UPDATE as a CTE inline with a primary statement
    that may draw from its results indirectly. The other is to provide control over
    the exact placement of a particular series of CTE constructs that should remain
    rendered directly in terms of a particular statement that may be nested in a larger
    statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE405]'
  prefs: []
  type: TYPE_PRE
- en: 'Would render:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE406]'
  prefs: []
  type: TYPE_PRE
- en: Above, the “anon_1” CTE is not referenced in the SELECT statement, however still
    accomplishes the task of running an INSERT statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly in a DML-related context, using the PostgreSQL [`Insert`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Insert
    "sqlalchemy.dialects.postgresql.Insert") construct to generate an “upsert”:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE407]'
  prefs: []
  type: TYPE_PRE
- en: 'The above statement renders as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE408]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.4.21.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*ctes` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: zero or more [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    constructs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Changed in version 2.0: Multiple CTE instances are accepted'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`nest_here` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: if True, the given CTE or CTEs will be rendered as though they specified the
    [`HasCTE.cte.nesting`](#sqlalchemy.sql.expression.HasCTE.cte.params.nesting "sqlalchemy.sql.expression.HasCTE.cte")
    flag to `True` when they were added to this [`HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE"). Assuming the given CTEs are not referenced
    in an outer-enclosing statement as well, the CTEs given should render at the level
    of this statement when this flag is given.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`HasCTE.cte.nesting`](#sqlalchemy.sql.expression.HasCTE.cte.params.nesting
    "sqlalchemy.sql.expression.HasCTE.cte")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE409]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`SelectBase.alias()`](#sqlalchemy.sql.expression.SelectBase.alias
    "sqlalchemy.sql.expression.SelectBase.alias") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a named subquery against this [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase").
  prefs: []
  type: TYPE_NORMAL
- en: For a [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")
    (as opposed to a [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")),
    this returns a [`Subquery`](#sqlalchemy.sql.expression.Subquery "sqlalchemy.sql.expression.Subquery")
    object which behaves mostly the same as the [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") object that is used with a [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The [`SelectBase.alias()`](#sqlalchemy.sql.expression.SelectBase.alias
    "sqlalchemy.sql.expression.SelectBase.alias") method is now a synonym for the
    [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery "sqlalchemy.sql.expression.SelectBase.subquery")
    method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE410]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`SelectBase.as_scalar()`](#sqlalchemy.sql.expression.SelectBase.as_scalar
    "sqlalchemy.sql.expression.SelectBase.as_scalar") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.4: The [`SelectBase.as_scalar()`](#sqlalchemy.sql.expression.SelectBase.as_scalar
    "sqlalchemy.sql.expression.SelectBase.as_scalar") method is deprecated and will
    be removed in a future release. Please refer to [`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE411]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`SelectBase.c`](#sqlalchemy.sql.expression.SelectBase.c
    "sqlalchemy.sql.expression.SelectBase.c") *attribute of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.4: The [`SelectBase.c`](#sqlalchemy.sql.expression.SelectBase.c
    "sqlalchemy.sql.expression.SelectBase.c") and `SelectBase.columns` attributes
    are deprecated and will be removed in a future release; these attributes implicitly
    create a subquery that should be explicit. Please call [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") first in order to create a subquery,
    which then contains this attribute. To access the columns that this SELECT object
    SELECTs from, use the [`SelectBase.selected_columns`](#sqlalchemy.sql.expression.SelectBase.selected_columns
    "sqlalchemy.sql.expression.SelectBase.selected_columns") attribute.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE412]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ClauseElement.compare()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.compare
    "sqlalchemy.sql.expression.ClauseElement.compare") *method of* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
  prefs: []
  type: TYPE_NORMAL
- en: Compare this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") to the given [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  prefs: []
  type: TYPE_NORMAL
- en: Subclasses should override the default behavior, which is a straight identity
    comparison.
  prefs: []
  type: TYPE_NORMAL
- en: '**kw are arguments consumed by subclass `compare()` methods and may be used
    to modify the criteria for comparison (see [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE413]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `CompilerElement.compile()` *method of* `CompilerElement`'
  prefs: []
  type: TYPE_NORMAL
- en: Compile this SQL expression.
  prefs: []
  type: TYPE_NORMAL
- en: The return value is a [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object. Calling `str()` or `unicode()` on the returned
    value will yield a string representation of the result. The [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object also can return a dictionary of bind parameter
    names and values using the `params` accessor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`bind` – An [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    or [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    which can provide a [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    in order to generate a [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object. If the `bind` and `dialect` parameters are
    both omitted, a default SQL compiler is used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`column_keys` – Used for INSERT and UPDATE statements, a list of column names
    which should be present in the VALUES clause of the compiled statement. If `None`,
    all columns from the target table object are rendered.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dialect` – A [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    instance which can generate a [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object. This argument takes precedence over the
    `bind` argument.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`compile_kwargs` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'optional dictionary of additional parameters that will be passed through to
    the compiler within all “visit” methods. This allows any custom flag to be passed
    through to a custom compilation construct, for example. It is also used for the
    case of passing the `literal_binds` flag through:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE414]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[How do I render SQL expressions as strings, possibly with bound parameters
    inlined?](../faq/sqlexpressions.html#faq-sql-expression-string)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE415]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Selectable.corresponding_column()`](#sqlalchemy.sql.expression.Selectable.corresponding_column
    "sqlalchemy.sql.expression.Selectable.corresponding_column") *method of* [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
  prefs: []
  type: TYPE_NORMAL
- en: Given a [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"), return the exported [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") object from the [`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") collection of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable") which corresponds to that original [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") via a common ancestor column.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`column` – the target [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") to be matched.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`require_embedded` – only return corresponding columns for the given [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"), if the given [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") is actually present within a sub-element
    of this [`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable").
    Normally the column will match if it merely shares a common ancestor with one
    of the exported columns of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") - the [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") that is used for the operation.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnCollection.corresponding_column()`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection.corresponding_column
    "sqlalchemy.sql.expression.ColumnCollection.corresponding_column") - implementation
    method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE416]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte
    "sqlalchemy.sql.expression.HasCTE.cte") *method of* [`HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a new [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE"),
    or Common Table Expression instance.
  prefs: []
  type: TYPE_NORMAL
- en: Common table expressions are a SQL standard whereby SELECT statements can draw
    upon secondary statements specified along with the primary statement, using a
    clause called “WITH”. Special semantics regarding UNION can also be employed to
    allow “recursive” queries, where a SELECT statement can draw upon the set of rows
    that have previously been selected.
  prefs: []
  type: TYPE_NORMAL
- en: CTEs can also be applied to DML constructs UPDATE, INSERT and DELETE on some
    databases, both as a source of CTE rows when combined with RETURNING, as well
    as a consumer of CTE rows.
  prefs: []
  type: TYPE_NORMAL
- en: SQLAlchemy detects [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    objects, which are treated similarly to [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") objects, as special elements to be delivered
    to the FROM clause of the statement as well as to a WITH clause at the top of
    the statement.
  prefs: []
  type: TYPE_NORMAL
- en: For special prefixes such as PostgreSQL “MATERIALIZED” and “NOT MATERIALIZED”,
    the `CTE.prefix_with()` method may be used to establish these.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.3.13: Added support for prefixes. In particular - MATERIALIZED
    and NOT MATERIALIZED.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name` – name given to the common table expression. Like [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias"), the name can be left as `None`
    in which case an anonymous symbol will be used at query compile time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`recursive` – if `True`, will render `WITH RECURSIVE`. A recursive common table
    expression is intended to be used in conjunction with UNION ALL in order to derive
    rows from those already selected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nesting` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: if `True`, will render the CTE locally to the statement in which it is referenced.
    For more complex scenarios, the [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") method using the [`HasCTE.add_cte.nest_here`](#sqlalchemy.sql.expression.HasCTE.add_cte.params.nest_here
    "sqlalchemy.sql.expression.HasCTE.add_cte") parameter may also be used to more
    carefully control the exact placement of a particular CTE.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 1.4.24.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte "sqlalchemy.sql.expression.HasCTE.add_cte")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The following examples include two from PostgreSQL’s documentation at [https://www.postgresql.org/docs/current/static/queries-with.html](https://www.postgresql.org/docs/current/static/queries-with.html),
    as well as additional examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example 1, non recursive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE417]'
  prefs: []
  type: TYPE_PRE
- en: 'Example 2, WITH RECURSIVE:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE418]'
  prefs: []
  type: TYPE_PRE
- en: 'Example 3, an upsert using UPDATE and INSERT with CTEs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE419]'
  prefs: []
  type: TYPE_PRE
- en: 'Example 4, Nesting CTE (SQLAlchemy 1.4.24 and above):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE420]'
  prefs: []
  type: TYPE_PRE
- en: 'The above query will render the second CTE nested inside the first, shown with
    inline parameters below as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE421]'
  prefs: []
  type: TYPE_PRE
- en: 'The same CTE can be set up using the [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") method as follows (SQLAlchemy 2.0
    and above):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE422]'
  prefs: []
  type: TYPE_PRE
- en: 'Example 5, Non-Linear CTE (SQLAlchemy 1.4.28 and above):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE423]'
  prefs: []
  type: TYPE_PRE
- en: 'The above query will render 2 UNIONs inside the recursive CTE:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE424]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.cte()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.cte "sqlalchemy.orm.Query.cte")
    - ORM version of [`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte "sqlalchemy.sql.expression.HasCTE.cte").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE425]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") *method of* [`Executable`](#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")'
  prefs: []
  type: TYPE_NORMAL
- en: Set non-SQL options for the statement which take effect during execution.
  prefs: []
  type: TYPE_NORMAL
- en: Execution options can be set at many scopes, including per-statement, per-connection,
    or per execution, using methods such as [`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") and parameters which accept
    a dictionary of options such as [`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute") and [`Session.execute.execution_options`](../orm/session_api.html#sqlalchemy.orm.Session.execute.params.execution_options
    "sqlalchemy.orm.Session.execute").
  prefs: []
  type: TYPE_NORMAL
- en: The primary characteristic of an execution option, as opposed to other kinds
    of options such as ORM loader options, is that **execution options never affect
    the compiled SQL of a query, only things that affect how the SQL statement itself
    is invoked or how results are fetched**. That is, execution options are not part
    of what’s accommodated by SQL compilation nor are they considered part of the
    cached state of a statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") method is [generative](../glossary.html#term-generative),
    as is the case for the method as applied to the [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") and [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") objects, which means when the method is called, a copy
    of the object is returned, which applies the given parameters to that new copy,
    but leaves the original unchanged:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE426]'
  prefs: []
  type: TYPE_PRE
- en: An exception to this behavior is the [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object, where the [`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") method is explicitly **not**
    generative.
  prefs: []
  type: TYPE_NORMAL
- en: 'The kinds of options that may be passed to [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") and other related methods
    and parameter dictionaries include parameters that are explicitly consumed by
    SQLAlchemy Core or ORM, as well as arbitrary keyword arguments not defined by
    SQLAlchemy, which means the methods and/or parameter dictionaries may be used
    for user-defined parameters that interact with custom code, which may access the
    parameters using methods such as [`Executable.get_execution_options()`](#sqlalchemy.sql.expression.Executable.get_execution_options
    "sqlalchemy.sql.expression.Executable.get_execution_options") and [`Connection.get_execution_options()`](connections.html#sqlalchemy.engine.Connection.get_execution_options
    "sqlalchemy.engine.Connection.get_execution_options"), or within selected event
    hooks using a dedicated `execution_options` event parameter such as [`ConnectionEvents.before_execute.execution_options`](events.html#sqlalchemy.events.ConnectionEvents.before_execute.params.execution_options
    "sqlalchemy.events.ConnectionEvents.before_execute") or [`ORMExecuteState.execution_options`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.execution_options
    "sqlalchemy.orm.ORMExecuteState.execution_options"), e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE427]'
  prefs: []
  type: TYPE_PRE
- en: 'Within the scope of options that are explicitly recognized by SQLAlchemy, most
    apply to specific classes of objects and not others. The most common execution
    options include:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Connection.execution_options.isolation_level`](connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") - sets the isolation level for
    a connection or a class of connections via an [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"). This option is accepted only by [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") or [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Connection.execution_options.stream_results`](connections.html#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") - indicates results should be
    fetched using a server side cursor; this option is accepted by [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"), by the [`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute") parameter on [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute"), and additionally by [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") on a SQL statement object,
    as well as by ORM constructs like [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Connection.execution_options.compiled_cache`](connections.html#sqlalchemy.engine.Connection.execution_options.params.compiled_cache
    "sqlalchemy.engine.Connection.execution_options") - indicates a dictionary that
    will serve as the [SQL compilation cache](connections.html#sql-caching) for a
    [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    or [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine"),
    as well as for ORM methods like [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute"). Can be passed as `None` to disable caching
    for statements. This option is not accepted by [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") as it is inadvisable
    to carry along a compilation cache within a statement object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Connection.execution_options.schema_translate_map`](connections.html#sqlalchemy.engine.Connection.execution_options.params.schema_translate_map
    "sqlalchemy.engine.Connection.execution_options") - a mapping of schema names
    used by the [Schema Translate Map](connections.html#schema-translating) feature,
    accepted by [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine"),
    [`Executable`](#sqlalchemy.sql.expression.Executable "sqlalchemy.sql.expression.Executable"),
    as well as by ORM constructs like [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.execute.execution_options`](../orm/session_api.html#sqlalchemy.orm.Session.execute.params.execution_options
    "sqlalchemy.orm.Session.execute")'
  prefs: []
  type: TYPE_NORMAL
- en: '[ORM Execution Options](../orm/queryguide/api.html#orm-queryguide-execution-options)
    - documentation on all ORM-specific execution options'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE428]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`SelectBase.exists()`](#sqlalchemy.sql.expression.SelectBase.exists
    "sqlalchemy.sql.expression.SelectBase.exists") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  prefs: []
  type: TYPE_NORMAL
- en: Return an [`Exists`](#sqlalchemy.sql.expression.Exists "sqlalchemy.sql.expression.Exists")
    representation of this selectable, which can be used as a column expression.
  prefs: []
  type: TYPE_NORMAL
- en: The returned object is an instance of [`Exists`](#sqlalchemy.sql.expression.Exists
    "sqlalchemy.sql.expression.Exists").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`exists()`](#sqlalchemy.sql.expression.exists "sqlalchemy.sql.expression.exists")'
  prefs: []
  type: TYPE_NORMAL
- en: '[EXISTS subqueries](../tutorial/data_select.html#tutorial-exists) - in the
    [2.0 style](../glossary.html#term-2.0-style) tutorial.'
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE429]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`SelectBase.exported_columns`](#sqlalchemy.sql.expression.SelectBase.exported_columns
    "sqlalchemy.sql.expression.SelectBase.exported_columns") *attribute of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  prefs: []
  type: TYPE_NORMAL
- en: A [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") that represents the “exported” columns
    of this [`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable"),
    not including [`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause") constructs.
  prefs: []
  type: TYPE_NORMAL
- en: The “exported” columns for a [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase") object are synonymous with the [`SelectBase.selected_columns`](#sqlalchemy.sql.expression.SelectBase.selected_columns
    "sqlalchemy.sql.expression.SelectBase.selected_columns") collection.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.exported_columns`](#sqlalchemy.sql.expression.Select.exported_columns
    "sqlalchemy.sql.expression.Select.exported_columns")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`FromClause.exported_columns`](#sqlalchemy.sql.expression.FromClause.exported_columns
    "sqlalchemy.sql.expression.FromClause.exported_columns")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE430]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `HasTraverseInternals.get_children()` *method of* `HasTraverseInternals`'
  prefs: []
  type: TYPE_NORMAL
- en: Return immediate child `HasTraverseInternals` elements of this `HasTraverseInternals`.
  prefs: []
  type: TYPE_NORMAL
- en: This is used for visit traversal.
  prefs: []
  type: TYPE_NORMAL
- en: '**kw may contain flags that change the collection that is returned, for example
    to return a subset of items in order to cut down on larger traversals, or to return
    child items from a different context (such as schema-level collections instead
    of clause-level).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE431]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Executable.get_execution_options()`](#sqlalchemy.sql.expression.Executable.get_execution_options
    "sqlalchemy.sql.expression.Executable.get_execution_options") *method of* [`Executable`](#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")'
  prefs: []
  type: TYPE_NORMAL
- en: Get the non-SQL options which will take effect during execution.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.3.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE432]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`SelectBase.get_label_style()`](#sqlalchemy.sql.expression.SelectBase.get_label_style
    "sqlalchemy.sql.expression.SelectBase.get_label_style") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  prefs: []
  type: TYPE_NORMAL
- en: Retrieve the current label style.
  prefs: []
  type: TYPE_NORMAL
- en: Implemented by subclasses.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE433]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `HasCacheKey.inherit_cache` *attribute of* [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.cache_key.HasCacheKey")'
  prefs: []
  type: TYPE_NORMAL
- en: Indicate if this [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") instance should make use of the cache
    key generation scheme used by its immediate superclass.
  prefs: []
  type: TYPE_NORMAL
- en: The attribute defaults to `None`, which indicates that a construct has not yet
    taken into account whether or not its appropriate for it to participate in caching;
    this is functionally equivalent to setting the value to `False`, except that a
    warning is also emitted.
  prefs: []
  type: TYPE_NORMAL
- en: This flag can be set to `True` on a particular class, if the SQL that corresponds
    to the object does not change based on attributes which are local to this class,
    and not its superclass.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Enabling Caching Support for Custom Constructs](compiler.html#compilerext-caching)
    - General guideslines for setting the [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute for third-party
    or user defined SQL constructs.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE434]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ReturnsRows.is_derived_from()`](#sqlalchemy.sql.expression.ReturnsRows.is_derived_from
    "sqlalchemy.sql.expression.ReturnsRows.is_derived_from") *method of* [`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows
    "sqlalchemy.sql.expression.ReturnsRows")'
  prefs: []
  type: TYPE_NORMAL
- en: Return `True` if this [`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows
    "sqlalchemy.sql.expression.ReturnsRows") is ‘derived’ from the given [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: An example would be an Alias of a Table is derived from that Table.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE435]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`SelectBase.label()`](#sqlalchemy.sql.expression.SelectBase.label
    "sqlalchemy.sql.expression.SelectBase.label") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a ‘scalar’ representation of this selectable, embedded as a subquery
    with a label.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE436]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`SelectBase.lateral()`](#sqlalchemy.sql.expression.SelectBase.lateral
    "sqlalchemy.sql.expression.SelectBase.lateral") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a LATERAL alias of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable").
  prefs: []
  type: TYPE_NORMAL
- en: The return value is the [`Lateral`](#sqlalchemy.sql.expression.Lateral "sqlalchemy.sql.expression.Lateral")
    construct also provided by the top-level [`lateral()`](#sqlalchemy.sql.expression.lateral
    "sqlalchemy.sql.expression.lateral") function.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[LATERAL correlation](../tutorial/data_select.html#tutorial-lateral-correlation)
    - overview of usage.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE437]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Executable.options()`](#sqlalchemy.sql.expression.Executable.options
    "sqlalchemy.sql.expression.Executable.options") *method of* [`Executable`](#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")'
  prefs: []
  type: TYPE_NORMAL
- en: Apply options to this statement.
  prefs: []
  type: TYPE_NORMAL
- en: In the general sense, options are any kind of Python object that can be interpreted
    by the SQL compiler for the statement. These options can be consumed by specific
    dialects or specific kinds of compilers.
  prefs: []
  type: TYPE_NORMAL
- en: The most commonly known kind of option are the ORM level options that apply
    “eager load” and other loading behaviors to an ORM query. However, options can
    theoretically be used for many other purposes.
  prefs: []
  type: TYPE_NORMAL
- en: For background on specific kinds of options for specific kinds of statements,
    refer to the documentation for those option objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: - added [`Executable.options()`](#sqlalchemy.sql.expression.Executable.options
    "sqlalchemy.sql.expression.Executable.options") to Core statement objects towards
    the goal of allowing unified Core / ORM querying capabilities.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Column Loading Options](../orm/queryguide/columns.html#loading-columns) -
    refers to options specific to the usage of ORM queries'
  prefs: []
  type: TYPE_NORMAL
- en: '[Relationship Loading with Loader Options](../orm/queryguide/relationships.html#relationship-loader-options)
    - refers to options specific to the usage of ORM queries'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE438]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ClauseElement.params()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.params
    "sqlalchemy.sql.expression.ClauseElement.params") *method of* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a copy with [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") elements replaced.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns a copy of this ClauseElement with [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") elements replaced with values taken from
    the given dictionary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE439]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE440]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Selectable.replace_selectable()`](#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") *method of* [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
  prefs: []
  type: TYPE_NORMAL
- en: Replace all occurrences of [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") ‘old’ with the given [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") object, returning a copy of this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.4: The [`Selectable.replace_selectable()`](#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") method is deprecated,
    and will be removed in a future release. Similar functionality is available via
    the sqlalchemy.sql.visitors module.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE441]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a ‘scalar’ representation of this selectable, which can be used as a
    column expression.
  prefs: []
  type: TYPE_NORMAL
- en: The returned object is an instance of [`ScalarSelect`](#sqlalchemy.sql.expression.ScalarSelect
    "sqlalchemy.sql.expression.ScalarSelect").
  prefs: []
  type: TYPE_NORMAL
- en: Typically, a select statement which has only one column in its columns clause
    is eligible to be used as a scalar expression. The scalar subquery can then be
    used in the WHERE clause or columns clause of an enclosing SELECT.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the scalar subquery differentiates from the FROM-level subquery that
    can be produced using the [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") method.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Scalar and Correlated Subqueries](../tutorial/data_select.html#tutorial-scalar-subquery)
    - in the 2.0 tutorial'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE442]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`SelectBase.select()`](#sqlalchemy.sql.expression.SelectBase.select
    "sqlalchemy.sql.expression.SelectBase.select") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.4: The [`SelectBase.select()`](#sqlalchemy.sql.expression.SelectBase.select
    "sqlalchemy.sql.expression.SelectBase.select") method is deprecated and will be
    removed in a future release; this method implicitly creates a subquery that should
    be explicit. Please call [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") first in order to create a subquery,
    which then can be selected.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE443]'
  prefs: []
  type: TYPE_PRE
- en: A [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") representing the columns that this
    SELECT statement or similar construct returns in its result set, not including
    [`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause "sqlalchemy.sql.expression.TextClause")
    constructs.
  prefs: []
  type: TYPE_NORMAL
- en: This collection differs from the [`FromClause.columns`](#sqlalchemy.sql.expression.FromClause.columns
    "sqlalchemy.sql.expression.FromClause.columns") collection of a [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") in that the columns within this collection
    cannot be directly nested inside another SELECT statement; a subquery must be
    applied first which provides for the necessary parenthesization required by SQL.
  prefs: []
  type: TYPE_NORMAL
- en: For a [`TextualSelect`](#sqlalchemy.sql.expression.TextualSelect "sqlalchemy.sql.expression.TextualSelect")
    construct, the collection contains the [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") objects that were passed to the constructor,
    typically via the [`TextClause.columns()`](sqlelement.html#sqlalchemy.sql.expression.TextClause.columns
    "sqlalchemy.sql.expression.TextClause.columns") method.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE444]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ClauseElement.self_group()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.self_group
    "sqlalchemy.sql.expression.ClauseElement.self_group") *method of* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
  prefs: []
  type: TYPE_NORMAL
- en: Apply a ‘grouping’ to this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  prefs: []
  type: TYPE_NORMAL
- en: This method is overridden by subclasses to return a “grouping” construct, i.e.
    parenthesis. In particular it’s used by “binary” expressions to provide a grouping
    around themselves when placed into a larger expression, as well as by [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs when placed into the FROM clause
    of another [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select").
    (Note that subqueries should be normally created using the [`Select.alias()`](#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") method, as many platforms require nested
    SELECT statements to be named).
  prefs: []
  type: TYPE_NORMAL
- en: As expressions are composed together, the application of [`self_group()`](#sqlalchemy.sql.expression.TextualSelect.self_group
    "sqlalchemy.sql.expression.TextualSelect.self_group") is automatic - end-user
    code should never need to use this method directly. Note that SQLAlchemy’s clause
    constructs take operator precedence into account - so parenthesis might not be
    needed, for example, in an expression like `x OR (y AND z)` - AND takes precedence
    over OR.
  prefs: []
  type: TYPE_NORMAL
- en: The base [`self_group()`](#sqlalchemy.sql.expression.TextualSelect.self_group
    "sqlalchemy.sql.expression.TextualSelect.self_group") method of [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") just returns self.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE445]'
  prefs: []
  type: TYPE_PRE
- en: Return a new selectable with the specified label style.
  prefs: []
  type: TYPE_NORMAL
- en: Implemented by subclasses.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE446]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a subquery of this [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase").
  prefs: []
  type: TYPE_NORMAL
- en: A subquery is from a SQL perspective a parenthesized, named construct that can
    be placed in the FROM clause of another SELECT statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'Given a SELECT statement such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE447]'
  prefs: []
  type: TYPE_PRE
- en: 'The above statement might look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE448]'
  prefs: []
  type: TYPE_PRE
- en: 'The subquery form by itself renders the same way, however when embedded into
    the FROM clause of another SELECT statement, it becomes a named sub-element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE449]'
  prefs: []
  type: TYPE_PRE
- en: 'The above renders as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE450]'
  prefs: []
  type: TYPE_PRE
- en: Historically, [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") is equivalent to calling the
    [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias "sqlalchemy.sql.expression.FromClause.alias")
    method on a FROM object; however, as a [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase") object is not directly FROM object, the
    [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery "sqlalchemy.sql.expression.SelectBase.subquery")
    method provides clearer semantics.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE451]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ClauseElement.unique_params()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.unique_params
    "sqlalchemy.sql.expression.ClauseElement.unique_params") *method of* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a copy with [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") elements replaced.
  prefs: []
  type: TYPE_NORMAL
- en: Same functionality as [`ClauseElement.params()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.params
    "sqlalchemy.sql.expression.ClauseElement.params"), except adds unique=True to
    affected bind parameters so that multiple statements can be used.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE452]'
  prefs: []
  type: TYPE_PRE
- en: Represent a `VALUES` construct that can be used as a FROM element in a statement.
  prefs: []
  type: TYPE_NORMAL
- en: The [`Values`](#sqlalchemy.sql.expression.Values "sqlalchemy.sql.expression.Values")
    object is created from the [`values()`](#sqlalchemy.sql.expression.values "sqlalchemy.sql.expression.values")
    function.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[alias()](#sqlalchemy.sql.expression.Values.alias), [data()](#sqlalchemy.sql.expression.Values.data),
    [lateral()](#sqlalchemy.sql.expression.Values.lateral), [scalar_values()](#sqlalchemy.sql.expression.Values.scalar_values)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.expression.Values`](#sqlalchemy.sql.expression.Values
    "sqlalchemy.sql.expression.Values") (`sqlalchemy.sql.roles.InElementRole`, `sqlalchemy.sql.expression.Generative`,
    `sqlalchemy.sql.expression.LateralFromClause`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE453]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`Values`](#sqlalchemy.sql.expression.Values "sqlalchemy.sql.expression.Values")
    construct that is a copy of this one with the given name.
  prefs: []
  type: TYPE_NORMAL
- en: This method is a VALUES-specific specialization of the [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") method.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Using Aliases](../tutorial/data_select.html#tutorial-using-aliases)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`alias()`](#sqlalchemy.sql.expression.alias "sqlalchemy.sql.expression.alias")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE454]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`Values`](#sqlalchemy.sql.expression.Values "sqlalchemy.sql.expression.Values")
    construct, adding the given data to the data list.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE455]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**values** – a sequence (i.e. list) of tuples that map to the column expressions
    given in the [`Values`](#sqlalchemy.sql.expression.Values "sqlalchemy.sql.expression.Values")
    constructor.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE456]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`Values`](#sqlalchemy.sql.expression.Values "sqlalchemy.sql.expression.Values")
    with the lateral flag set, so that it renders as LATERAL.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`lateral()`](#sqlalchemy.sql.expression.lateral "sqlalchemy.sql.expression.lateral")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE457]'
  prefs: []
  type: TYPE_PRE
- en: Returns a scalar `VALUES` construct that can be used as a COLUMN element in
    a statement.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.0b4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE458]'
  prefs: []
  type: TYPE_PRE
- en: Represent a scalar `VALUES` construct that can be used as a COLUMN element in
    a statement.
  prefs: []
  type: TYPE_NORMAL
- en: The [`ScalarValues`](#sqlalchemy.sql.expression.ScalarValues "sqlalchemy.sql.expression.ScalarValues")
    object is created from the [`Values.scalar_values()`](#sqlalchemy.sql.expression.Values.scalar_values
    "sqlalchemy.sql.expression.Values.scalar_values") method. It’s also automatically
    generated when a [`Values`](#sqlalchemy.sql.expression.Values "sqlalchemy.sql.expression.Values")
    is used in an `IN` or `NOT IN` condition.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.0b4.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.expression.ScalarValues`](#sqlalchemy.sql.expression.ScalarValues
    "sqlalchemy.sql.expression.ScalarValues") (`sqlalchemy.sql.roles.InElementRole`,
    `sqlalchemy.sql.expression.GroupedElement`, [`sqlalchemy.sql.expression.ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"))
  prefs: []
  type: TYPE_NORMAL
- en: Label Style Constants
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Constants used with the [`GenerativeSelect.set_label_style()`](#sqlalchemy.sql.expression.GenerativeSelect.set_label_style
    "sqlalchemy.sql.expression.GenerativeSelect.set_label_style") method.
  prefs: []
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [SelectLabelStyle](#sqlalchemy.sql.expression.SelectLabelStyle) | Label style
    constants that may be passed to [`Select.set_label_style()`](#sqlalchemy.sql.expression.Select.set_label_style
    "sqlalchemy.sql.expression.Select.set_label_style"). |'
  prefs: []
  type: TYPE_TB
- en: '[PRE459]'
  prefs: []
  type: TYPE_PRE
- en: Label style constants that may be passed to [`Select.set_label_style()`](#sqlalchemy.sql.expression.Select.set_label_style
    "sqlalchemy.sql.expression.Select.set_label_style").
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[LABEL_STYLE_DEFAULT](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_DEFAULT),
    [LABEL_STYLE_DISAMBIGUATE_ONLY](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_DISAMBIGUATE_ONLY),
    [LABEL_STYLE_NONE](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_NONE),
    [LABEL_STYLE_TABLENAME_PLUS_COL](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.expression.SelectLabelStyle`](#sqlalchemy.sql.expression.SelectLabelStyle
    "sqlalchemy.sql.expression.SelectLabelStyle") (`enum.Enum`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE460]'
  prefs: []
  type: TYPE_PRE
- en: The default label style, refers to `LABEL_STYLE_DISAMBIGUATE_ONLY`.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE461]'
  prefs: []
  type: TYPE_PRE
- en: Label style indicating that columns with a name that conflicts with an existing
    name should be labeled with a semi-anonymizing label when generating the columns
    clause of a SELECT statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'Below, most column names are left unaffected, except for the second occurrence
    of the name `columna`, which is labeled using the label `columna_1` to disambiguate
    it from that of `tablea.columna`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE462]'
  prefs: []
  type: TYPE_PRE
- en: Used with the [`GenerativeSelect.set_label_style()`](#sqlalchemy.sql.expression.GenerativeSelect.set_label_style
    "sqlalchemy.sql.expression.GenerativeSelect.set_label_style") method, `LABEL_STYLE_DISAMBIGUATE_ONLY`
    is the default labeling style for all SELECT statements outside of [1.x style](../glossary.html#term-1.x-style)
    ORM queries.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE463]'
  prefs: []
  type: TYPE_PRE
- en: Label style indicating no automatic labeling should be applied to the columns
    clause of a SELECT statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'Below, the columns named `columna` are both rendered as is, meaning that the
    name `columna` can only refer to the first occurrence of this name within a result
    set, as well as if the statement were used as a subquery:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE464]'
  prefs: []
  type: TYPE_PRE
- en: Used with the [`Select.set_label_style()`](#sqlalchemy.sql.expression.Select.set_label_style
    "sqlalchemy.sql.expression.Select.set_label_style") method.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE465]'
  prefs: []
  type: TYPE_PRE
- en: Label style indicating all columns should be labeled as `<tablename>_<columnname>`
    when generating the columns clause of a SELECT statement, to disambiguate same-named
    columns referenced from different tables, aliases, or subqueries.
  prefs: []
  type: TYPE_NORMAL
- en: 'Below, all column names are given a label so that the two same-named columns
    `columna` are disambiguated as `table1_columna` and `table2_columna`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE466]'
  prefs: []
  type: TYPE_PRE
- en: Used with the [`GenerativeSelect.set_label_style()`](#sqlalchemy.sql.expression.GenerativeSelect.set_label_style
    "sqlalchemy.sql.expression.GenerativeSelect.set_label_style") method. Equivalent
    to the legacy method `Select.apply_labels()`; `LABEL_STYLE_TABLENAME_PLUS_COL`
    is SQLAlchemy’s legacy auto-labeling style. `LABEL_STYLE_DISAMBIGUATE_ONLY` provides
    a less intrusive approach to disambiguation of same-named column expressions.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.set_label_style()`](#sqlalchemy.sql.expression.Select.set_label_style
    "sqlalchemy.sql.expression.Select.set_label_style")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.get_label_style()`](#sqlalchemy.sql.expression.Select.get_label_style
    "sqlalchemy.sql.expression.Select.get_label_style")'
  prefs: []
  type: TYPE_NORMAL
- en: '## Selectable Foundational Constructors'
  prefs: []
  type: TYPE_NORMAL
- en: Top level “FROM clause” and “SELECT” constructors.
  prefs: []
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [except_](#sqlalchemy.sql.expression.except_)(*selects) | Return an `EXCEPT`
    of multiple selectables. |'
  prefs: []
  type: TYPE_TB
- en: '| [except_all](#sqlalchemy.sql.expression.except_all)(*selects) | Return an
    `EXCEPT ALL` of multiple selectables. |'
  prefs: []
  type: TYPE_TB
- en: '| [exists](#sqlalchemy.sql.expression.exists)([__argument]) | Construct a new
    [`Exists`](#sqlalchemy.sql.expression.Exists "sqlalchemy.sql.expression.Exists")
    construct. |'
  prefs: []
  type: TYPE_TB
- en: '| [intersect](#sqlalchemy.sql.expression.intersect)(*selects) | Return an `INTERSECT`
    of multiple selectables. |'
  prefs: []
  type: TYPE_TB
- en: '| [intersect_all](#sqlalchemy.sql.expression.intersect_all)(*selects) | Return
    an `INTERSECT ALL` of multiple selectables. |'
  prefs: []
  type: TYPE_TB
- en: '| [select](#sqlalchemy.sql.expression.select)(*entities, **__kw) | Construct
    a new [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select").
    |'
  prefs: []
  type: TYPE_TB
- en: '| [table](#sqlalchemy.sql.expression.table)(name, *columns, **kw) | Produce
    a new [`TableClause`](#sqlalchemy.sql.expression.TableClause "sqlalchemy.sql.expression.TableClause").
    |'
  prefs: []
  type: TYPE_TB
- en: '| [union](#sqlalchemy.sql.expression.union)(*selects) | Return a `UNION` of
    multiple selectables. |'
  prefs: []
  type: TYPE_TB
- en: '| [union_all](#sqlalchemy.sql.expression.union_all)(*selects) | Return a `UNION
    ALL` of multiple selectables. |'
  prefs: []
  type: TYPE_TB
- en: '| [values](#sqlalchemy.sql.expression.values)(*columns, [name, literal_binds])
    | Construct a [`Values`](#sqlalchemy.sql.expression.Values "sqlalchemy.sql.expression.Values")
    construct. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE467]'
  prefs: []
  type: TYPE_PRE
- en: Return an `EXCEPT` of multiple selectables.
  prefs: []
  type: TYPE_NORMAL
- en: The returned object is an instance of [`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect
    "sqlalchemy.sql.expression.CompoundSelect").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***selects** – a list of [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    instances.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE468]'
  prefs: []
  type: TYPE_PRE
- en: Return an `EXCEPT ALL` of multiple selectables.
  prefs: []
  type: TYPE_NORMAL
- en: The returned object is an instance of [`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect
    "sqlalchemy.sql.expression.CompoundSelect").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***selects** – a list of [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    instances.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE469]'
  prefs: []
  type: TYPE_PRE
- en: Construct a new [`Exists`](#sqlalchemy.sql.expression.Exists "sqlalchemy.sql.expression.Exists")
    construct.
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`exists()`](#sqlalchemy.sql.expression.exists "sqlalchemy.sql.expression.exists")
    can be invoked by itself to produce an [`Exists`](#sqlalchemy.sql.expression.Exists
    "sqlalchemy.sql.expression.Exists") construct, which will accept simple WHERE
    criteria:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE470]'
  prefs: []
  type: TYPE_PRE
- en: 'However, for greater flexibility in constructing the SELECT, an existing [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") construct may be converted to an [`Exists`](#sqlalchemy.sql.expression.Exists
    "sqlalchemy.sql.expression.Exists"), most conveniently by making use of the [`SelectBase.exists()`](#sqlalchemy.sql.expression.SelectBase.exists
    "sqlalchemy.sql.expression.SelectBase.exists") method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE471]'
  prefs: []
  type: TYPE_PRE
- en: 'The EXISTS criteria is then used inside of an enclosing SELECT:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE472]'
  prefs: []
  type: TYPE_PRE
- en: 'The above statement will then be of the form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE473]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[EXISTS subqueries](../tutorial/data_select.html#tutorial-exists) - in the
    [2.0 style](../glossary.html#term-2.0-style) tutorial.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`SelectBase.exists()`](#sqlalchemy.sql.expression.SelectBase.exists "sqlalchemy.sql.expression.SelectBase.exists")
    - method to transform a `SELECT` to an `EXISTS` clause.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE474]'
  prefs: []
  type: TYPE_PRE
- en: Return an `INTERSECT` of multiple selectables.
  prefs: []
  type: TYPE_NORMAL
- en: The returned object is an instance of [`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect
    "sqlalchemy.sql.expression.CompoundSelect").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***selects** – a list of [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    instances.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE475]'
  prefs: []
  type: TYPE_PRE
- en: Return an `INTERSECT ALL` of multiple selectables.
  prefs: []
  type: TYPE_NORMAL
- en: The returned object is an instance of [`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect
    "sqlalchemy.sql.expression.CompoundSelect").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***selects** – a list of [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    instances.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE476]'
  prefs: []
  type: TYPE_PRE
- en: Construct a new [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select").
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4: - The [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    function now accepts column arguments positionally. The top-level [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") function will automatically use the 1.x or
    2.x style API based on the incoming arguments; using [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") from the `sqlalchemy.future` module will enforce
    that only the 2.x style constructor is used.'
  prefs: []
  type: TYPE_NORMAL
- en: Similar functionality is also available via the [`FromClause.select()`](#sqlalchemy.sql.expression.FromClause.select
    "sqlalchemy.sql.expression.FromClause.select") method on any [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Using SELECT Statements](../tutorial/data_select.html#tutorial-selecting-data)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***entities** –'
  prefs: []
  type: TYPE_NORMAL
- en: Entities to SELECT from. For Core usage, this is typically a series of [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") and / or [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") objects which will form the columns clause
    of the resulting statement. For those objects that are instances of [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") (typically [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") or [`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    objects), the [`FromClause.c`](#sqlalchemy.sql.expression.FromClause.c "sqlalchemy.sql.expression.FromClause.c")
    collection is extracted to form a collection of [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") objects.
  prefs: []
  type: TYPE_NORMAL
- en: This parameter will also accept [`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause") constructs as given, as well as ORM-mapped
    classes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE477]'
  prefs: []
  type: TYPE_PRE
- en: Produce a new [`TableClause`](#sqlalchemy.sql.expression.TableClause "sqlalchemy.sql.expression.TableClause").
  prefs: []
  type: TYPE_NORMAL
- en: The object returned is an instance of [`TableClause`](#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause"), which represents the “syntactical” portion
    of the schema-level [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object. It may be used to construct lightweight table constructs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name` – Name of the table.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`columns` – A collection of [`column()`](sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column") constructs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`schema` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The schema name for this table.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'New in version 1.3.18: [`table()`](#sqlalchemy.sql.expression.table "sqlalchemy.sql.expression.table")
    can now accept a `schema` argument.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE478]'
  prefs: []
  type: TYPE_PRE
- en: Return a `UNION` of multiple selectables.
  prefs: []
  type: TYPE_NORMAL
- en: The returned object is an instance of [`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect
    "sqlalchemy.sql.expression.CompoundSelect").
  prefs: []
  type: TYPE_NORMAL
- en: A similar [`union()`](#sqlalchemy.sql.expression.union "sqlalchemy.sql.expression.union")
    method is available on all [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") subclasses.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*selects` – a list of [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    instances.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**kwargs` – available keyword arguments are the same as those of [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE479]'
  prefs: []
  type: TYPE_PRE
- en: Return a `UNION ALL` of multiple selectables.
  prefs: []
  type: TYPE_NORMAL
- en: The returned object is an instance of [`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect
    "sqlalchemy.sql.expression.CompoundSelect").
  prefs: []
  type: TYPE_NORMAL
- en: A similar [`union_all()`](#sqlalchemy.sql.expression.union_all "sqlalchemy.sql.expression.union_all")
    method is available on all [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") subclasses.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***selects** – a list of [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    instances.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE480]'
  prefs: []
  type: TYPE_PRE
- en: Construct a [`Values`](#sqlalchemy.sql.expression.Values "sqlalchemy.sql.expression.Values")
    construct.
  prefs: []
  type: TYPE_NORMAL
- en: 'The column expressions and the actual data for [`Values`](#sqlalchemy.sql.expression.Values
    "sqlalchemy.sql.expression.Values") are given in two separate steps. The constructor
    receives the column expressions typically as [`column()`](sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column") constructs, and the data is then passed via
    the [`Values.data()`](#sqlalchemy.sql.expression.Values.data "sqlalchemy.sql.expression.Values.data")
    method as a list, which can be called multiple times to add more data, e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE481]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*columns` – column expressions, typically composed using [`column()`](sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column") objects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name` – the name for this VALUES construct. If omitted, the VALUES construct
    will be unnamed in a SQL expression. Different backends may have different requirements
    here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`literal_binds` – Defaults to False. Whether or not to render the data values
    inline in the SQL output, rather than using bound parameters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '## Selectable Modifier Constructors'
  prefs: []
  type: TYPE_NORMAL
- en: Functions listed here are more commonly available as methods from [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") and [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable") elements, for example, the [`alias()`](#sqlalchemy.sql.expression.alias
    "sqlalchemy.sql.expression.alias") function is usually invoked via the [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") method.
  prefs: []
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [alias](#sqlalchemy.sql.expression.alias)(selectable[, name, flat]) | Return
    a named alias of the given [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause"). |'
  prefs: []
  type: TYPE_TB
- en: '| [cte](#sqlalchemy.sql.expression.cte)(selectable[, name, recursive]) | Return
    a new [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE"),
    or Common Table Expression instance. |'
  prefs: []
  type: TYPE_TB
- en: '| [join](#sqlalchemy.sql.expression.join)(left, right[, onclause, isouter,
    ...]) | Produce a [`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    object, given two [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    expressions. |'
  prefs: []
  type: TYPE_TB
- en: '| [lateral](#sqlalchemy.sql.expression.lateral)(selectable[, name]) | Return
    a [`Lateral`](#sqlalchemy.sql.expression.Lateral "sqlalchemy.sql.expression.Lateral")
    object. |'
  prefs: []
  type: TYPE_TB
- en: '| [outerjoin](#sqlalchemy.sql.expression.outerjoin)(left, right[, onclause,
    full]) | Return an `OUTER JOIN` clause element. |'
  prefs: []
  type: TYPE_TB
- en: '| [tablesample](#sqlalchemy.sql.expression.tablesample)(selectable, sampling[,
    name, seed]) | Return a [`TableSample`](#sqlalchemy.sql.expression.TableSample
    "sqlalchemy.sql.expression.TableSample") object. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE482]'
  prefs: []
  type: TYPE_PRE
- en: Return a named alias of the given [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: For [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    and [`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    objects, the return type is the [`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    object. Other kinds of `NamedFromClause` objects may be returned for other kinds
    of [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    objects.
  prefs: []
  type: TYPE_NORMAL
- en: The named alias represents any [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") with an alternate name assigned within
    SQL, typically using the `AS` clause when generated, e.g. `SELECT * FROM table
    AS aliasname`.
  prefs: []
  type: TYPE_NORMAL
- en: Equivalent functionality is available via the [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") method available on all [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`selectable` – any [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    subclass, such as a table, select statement, etc.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name` – string name to be assigned as the alias. If `None`, a name will be
    deterministically generated at compile time. Deterministic means the name is guaranteed
    to be unique against other constructs used in the same statement, and will also
    be the same name for each successive compilation of the same statement object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flat` – Will be passed through to if the given selectable is an instance of
    [`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join") - see
    `Join.alias()` for details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE483]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE"),
    or Common Table Expression instance.
  prefs: []
  type: TYPE_NORMAL
- en: Please see [`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte "sqlalchemy.sql.expression.HasCTE.cte")
    for detail on CTE usage.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE484]'
  prefs: []
  type: TYPE_PRE
- en: Produce a [`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    object, given two [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    expressions.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE485]'
  prefs: []
  type: TYPE_PRE
- en: 'would emit SQL along the lines of:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE486]'
  prefs: []
  type: TYPE_PRE
- en: Similar functionality is available given any [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") object (e.g. such as a [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")) using the [`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join") method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`left` – The left side of the join.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`right` – the right side of the join; this is any [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") object such as a [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object, and may also be a selectable-compatible object
    such as an ORM-mapped class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onclause` – a SQL expression representing the ON clause of the join. If left
    at `None`, [`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join "sqlalchemy.sql.expression.FromClause.join")
    will attempt to join the two tables based on a foreign key relationship.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`isouter` – if True, render a LEFT OUTER JOIN, instead of JOIN.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`full` – if True, render a FULL OUTER JOIN, instead of JOIN.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join "sqlalchemy.sql.expression.FromClause.join")
    - method form, based on a given left side.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    - the type of object produced.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE487]'
  prefs: []
  type: TYPE_PRE
- en: Return a [`Lateral`](#sqlalchemy.sql.expression.Lateral "sqlalchemy.sql.expression.Lateral")
    object.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Lateral`](#sqlalchemy.sql.expression.Lateral "sqlalchemy.sql.expression.Lateral")
    is an [`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    subclass that represents a subquery with the LATERAL keyword applied to it.'
  prefs: []
  type: TYPE_NORMAL
- en: The special behavior of a LATERAL subquery is that it appears in the FROM clause
    of an enclosing SELECT, but may correlate to other FROM clauses of that SELECT.
    It is a special case of subquery only supported by a small number of backends,
    currently more recent PostgreSQL versions.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[LATERAL correlation](../tutorial/data_select.html#tutorial-lateral-correlation)
    - overview of usage.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE488]'
  prefs: []
  type: TYPE_PRE
- en: Return an `OUTER JOIN` clause element.
  prefs: []
  type: TYPE_NORMAL
- en: The returned object is an instance of [`Join`](#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join").
  prefs: []
  type: TYPE_NORMAL
- en: Similar functionality is also available via the [`FromClause.outerjoin()`](#sqlalchemy.sql.expression.FromClause.outerjoin
    "sqlalchemy.sql.expression.FromClause.outerjoin") method on any [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`left` – The left side of the join.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`right` – The right side of the join.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onclause` – Optional criterion for the `ON` clause, is derived from foreign
    key relationships established between left and right otherwise.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To chain joins together, use the [`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join") or [`FromClause.outerjoin()`](#sqlalchemy.sql.expression.FromClause.outerjoin
    "sqlalchemy.sql.expression.FromClause.outerjoin") methods on the resulting [`Join`](#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE489]'
  prefs: []
  type: TYPE_PRE
- en: Return a [`TableSample`](#sqlalchemy.sql.expression.TableSample "sqlalchemy.sql.expression.TableSample")
    object.
  prefs: []
  type: TYPE_NORMAL
- en: '[`TableSample`](#sqlalchemy.sql.expression.TableSample "sqlalchemy.sql.expression.TableSample")
    is an [`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    subclass that represents a table with the TABLESAMPLE clause applied to it. [`tablesample()`](#sqlalchemy.sql.expression.tablesample
    "sqlalchemy.sql.expression.tablesample") is also available from the [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") class via the [`FromClause.tablesample()`](#sqlalchemy.sql.expression.FromClause.tablesample
    "sqlalchemy.sql.expression.FromClause.tablesample") method.'
  prefs: []
  type: TYPE_NORMAL
- en: The TABLESAMPLE clause allows selecting a randomly selected approximate percentage
    of rows from a table. It supports multiple sampling methods, most commonly BERNOULLI
    and SYSTEM.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE490]'
  prefs: []
  type: TYPE_PRE
- en: 'Assuming `people` with a column `people_id`, the above statement would render
    as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE491]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`sampling` – a `float` percentage between 0 and 100 or [`Function`](functions.html#sqlalchemy.sql.functions.Function
    "sqlalchemy.sql.functions.Function").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name` – optional alias name'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`seed` – any real-valued SQL expression. When specified, the REPEATABLE sub-clause
    is also rendered.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selectable Class Documentation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The classes here are generated using the constructors listed at [Selectable
    Foundational Constructors](#selectable-foundational-constructors) and [Selectable
    Modifier Constructors](#fromclause-modifier-constructors).
  prefs: []
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [Alias](#sqlalchemy.sql.expression.Alias) | Represents an table or selectable
    alias (AS). |'
  prefs: []
  type: TYPE_TB
- en: '| [AliasedReturnsRows](#sqlalchemy.sql.expression.AliasedReturnsRows) | Base
    class of aliases against tables, subqueries, and other selectables. |'
  prefs: []
  type: TYPE_TB
- en: '| [CompoundSelect](#sqlalchemy.sql.expression.CompoundSelect) | Forms the basis
    of `UNION`, `UNION ALL`, and other SELECT-based set operations. |'
  prefs: []
  type: TYPE_TB
- en: '| [CTE](#sqlalchemy.sql.expression.CTE) | Represent a Common Table Expression.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [Executable](#sqlalchemy.sql.expression.Executable) | Mark a [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") as supporting execution. |'
  prefs: []
  type: TYPE_TB
- en: '| [Exists](#sqlalchemy.sql.expression.Exists) | Represent an `EXISTS` clause.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [FromClause](#sqlalchemy.sql.expression.FromClause) | Represent an element
    that can be used within the `FROM` clause of a `SELECT` statement. |'
  prefs: []
  type: TYPE_TB
- en: '| [GenerativeSelect](#sqlalchemy.sql.expression.GenerativeSelect) | Base class
    for SELECT statements where additional elements can be added. |'
  prefs: []
  type: TYPE_TB
- en: '| [HasCTE](#sqlalchemy.sql.expression.HasCTE) | Mixin that declares a class
    to include CTE support. |'
  prefs: []
  type: TYPE_TB
- en: '| [HasPrefixes](#sqlalchemy.sql.expression.HasPrefixes) |  |'
  prefs: []
  type: TYPE_TB
- en: '| [HasSuffixes](#sqlalchemy.sql.expression.HasSuffixes) |  |'
  prefs: []
  type: TYPE_TB
- en: '| [Join](#sqlalchemy.sql.expression.Join) | Represent a `JOIN` construct between
    two [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    elements. |'
  prefs: []
  type: TYPE_TB
- en: '| [Lateral](#sqlalchemy.sql.expression.Lateral) | Represent a LATERAL subquery.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [ReturnsRows](#sqlalchemy.sql.expression.ReturnsRows) | The base-most class
    for Core constructs that have some concept of columns that can represent rows.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [ScalarSelect](#sqlalchemy.sql.expression.ScalarSelect) | Represent a scalar
    subquery. |'
  prefs: []
  type: TYPE_TB
- en: '| [ScalarValues](#sqlalchemy.sql.expression.ScalarValues) | Represent a scalar
    `VALUES` construct that can be used as a COLUMN element in a statement. |'
  prefs: []
  type: TYPE_TB
- en: '| [Select](#sqlalchemy.sql.expression.Select) | Represents a `SELECT` statement.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [Selectable](#sqlalchemy.sql.expression.Selectable) | Mark a class as being
    selectable. |'
  prefs: []
  type: TYPE_TB
- en: '| [SelectBase](#sqlalchemy.sql.expression.SelectBase) | Base class for SELECT
    statements. |'
  prefs: []
  type: TYPE_TB
- en: '| [Subquery](#sqlalchemy.sql.expression.Subquery) | Represent a subquery of
    a SELECT. |'
  prefs: []
  type: TYPE_TB
- en: '| [TableClause](#sqlalchemy.sql.expression.TableClause) | Represents a minimal
    “table” construct. |'
  prefs: []
  type: TYPE_TB
- en: '| [TableSample](#sqlalchemy.sql.expression.TableSample) | Represent a TABLESAMPLE
    clause. |'
  prefs: []
  type: TYPE_TB
- en: '| [TableValuedAlias](#sqlalchemy.sql.expression.TableValuedAlias) | An alias
    against a “table valued” SQL function. |'
  prefs: []
  type: TYPE_TB
- en: '| [TextualSelect](#sqlalchemy.sql.expression.TextualSelect) | Wrap a [`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause") construct within a [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase") interface. |'
  prefs: []
  type: TYPE_TB
- en: '| [Values](#sqlalchemy.sql.expression.Values) | Represent a `VALUES` construct
    that can be used as a FROM element in a statement. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE492]'
  prefs: []
  type: TYPE_PRE
- en: Represents an table or selectable alias (AS).
  prefs: []
  type: TYPE_NORMAL
- en: Represents an alias, as typically applied to any table or sub-select within
    a SQL statement using the `AS` keyword (or without the keyword on certain databases
    such as Oracle).
  prefs: []
  type: TYPE_NORMAL
- en: This object is constructed from the [`alias()`](#sqlalchemy.sql.expression.alias
    "sqlalchemy.sql.expression.alias") module level function as well as the [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") method available on all [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") subclasses.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias "sqlalchemy.sql.expression.FromClause.alias")'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[inherit_cache](#sqlalchemy.sql.expression.Alias.inherit_cache)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.expression.Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    (`sqlalchemy.sql.roles.DMLTableRole`, `sqlalchemy.sql.expression.FromClauseAlias`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE493]'
  prefs: []
  type: TYPE_PRE
- en: Indicate if this [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") instance should make use of the cache
    key generation scheme used by its immediate superclass.
  prefs: []
  type: TYPE_NORMAL
- en: The attribute defaults to `None`, which indicates that a construct has not yet
    taken into account whether or not its appropriate for it to participate in caching;
    this is functionally equivalent to setting the value to `False`, except that a
    warning is also emitted.
  prefs: []
  type: TYPE_NORMAL
- en: This flag can be set to `True` on a particular class, if the SQL that corresponds
    to the object does not change based on attributes which are local to this class,
    and not its superclass.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Enabling Caching Support for Custom Constructs](compiler.html#compilerext-caching)
    - General guideslines for setting the [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute for third-party
    or user defined SQL constructs.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE494]'
  prefs: []
  type: TYPE_PRE
- en: Base class of aliases against tables, subqueries, and other selectables.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[description](#sqlalchemy.sql.expression.AliasedReturnsRows.description), [is_derived_from()](#sqlalchemy.sql.expression.AliasedReturnsRows.is_derived_from),
    [original](#sqlalchemy.sql.expression.AliasedReturnsRows.original)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.expression.AliasedReturnsRows`](#sqlalchemy.sql.expression.AliasedReturnsRows
    "sqlalchemy.sql.expression.AliasedReturnsRows") (`sqlalchemy.sql.expression.NoInit`,
    `sqlalchemy.sql.expression.NamedFromClause`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE495]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE496]'
  prefs: []
  type: TYPE_PRE
- en: Return `True` if this [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    is ‘derived’ from the given `FromClause`.
  prefs: []
  type: TYPE_NORMAL
- en: An example would be an Alias of a Table is derived from that Table.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE497]'
  prefs: []
  type: TYPE_PRE
- en: Legacy for dialects that are referring to Alias.original.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE498]'
  prefs: []
  type: TYPE_PRE
- en: Forms the basis of `UNION`, `UNION ALL`, and other SELECT-based set operations.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`union()`](#sqlalchemy.sql.expression.union "sqlalchemy.sql.expression.union")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`union_all()`](#sqlalchemy.sql.expression.union_all "sqlalchemy.sql.expression.union_all")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`intersect()`](#sqlalchemy.sql.expression.intersect "sqlalchemy.sql.expression.intersect")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`intersect_all()`](#sqlalchemy.sql.expression.intersect_all "sqlalchemy.sql.expression.intersect_all")'
  prefs: []
  type: TYPE_NORMAL
- en: '`except()`'
  prefs: []
  type: TYPE_NORMAL
- en: '[`except_all()`](#sqlalchemy.sql.expression.except_all "sqlalchemy.sql.expression.except_all")'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[add_cte()](#sqlalchemy.sql.expression.CompoundSelect.add_cte), [alias()](#sqlalchemy.sql.expression.CompoundSelect.alias),
    [as_scalar()](#sqlalchemy.sql.expression.CompoundSelect.as_scalar), [c](#sqlalchemy.sql.expression.CompoundSelect.c),
    [corresponding_column()](#sqlalchemy.sql.expression.CompoundSelect.corresponding_column),
    [cte()](#sqlalchemy.sql.expression.CompoundSelect.cte), [execution_options()](#sqlalchemy.sql.expression.CompoundSelect.execution_options),
    [exists()](#sqlalchemy.sql.expression.CompoundSelect.exists), [exported_columns](#sqlalchemy.sql.expression.CompoundSelect.exported_columns),
    [fetch()](#sqlalchemy.sql.expression.CompoundSelect.fetch), [get_execution_options()](#sqlalchemy.sql.expression.CompoundSelect.get_execution_options),
    [get_label_style()](#sqlalchemy.sql.expression.CompoundSelect.get_label_style),
    [group_by()](#sqlalchemy.sql.expression.CompoundSelect.group_by), [is_derived_from()](#sqlalchemy.sql.expression.CompoundSelect.is_derived_from),
    [label()](#sqlalchemy.sql.expression.CompoundSelect.label), [lateral()](#sqlalchemy.sql.expression.CompoundSelect.lateral),
    [limit()](#sqlalchemy.sql.expression.CompoundSelect.limit), [offset()](#sqlalchemy.sql.expression.CompoundSelect.offset),
    [options()](#sqlalchemy.sql.expression.CompoundSelect.options), [order_by()](#sqlalchemy.sql.expression.CompoundSelect.order_by),
    [replace_selectable()](#sqlalchemy.sql.expression.CompoundSelect.replace_selectable),
    [scalar_subquery()](#sqlalchemy.sql.expression.CompoundSelect.scalar_subquery),
    [select()](#sqlalchemy.sql.expression.CompoundSelect.select), [selected_columns](#sqlalchemy.sql.expression.CompoundSelect.selected_columns),
    [self_group()](#sqlalchemy.sql.expression.CompoundSelect.self_group), [set_label_style()](#sqlalchemy.sql.expression.CompoundSelect.set_label_style),
    [slice()](#sqlalchemy.sql.expression.CompoundSelect.slice), [subquery()](#sqlalchemy.sql.expression.CompoundSelect.subquery),
    [with_for_update()](#sqlalchemy.sql.expression.CompoundSelect.with_for_update)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.expression.CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect
    "sqlalchemy.sql.expression.CompoundSelect") (`sqlalchemy.sql.expression.HasCompileState`,
    [`sqlalchemy.sql.expression.GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect"), `sqlalchemy.sql.expression.ExecutableReturnsRows`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE499]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") *method of* [`HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE")'
  prefs: []
  type: TYPE_NORMAL
- en: Add one or more [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    constructs to this statement.
  prefs: []
  type: TYPE_NORMAL
- en: This method will associate the given [`CTE`](#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE") constructs with the parent statement such that
    they will each be unconditionally rendered in the WITH clause of the final statement,
    even if not referenced elsewhere within the statement or any sub-selects.
  prefs: []
  type: TYPE_NORMAL
- en: The optional [`HasCTE.add_cte.nest_here`](#sqlalchemy.sql.expression.HasCTE.add_cte.params.nest_here
    "sqlalchemy.sql.expression.HasCTE.add_cte") parameter when set to True will have
    the effect that each given [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    will render in a WITH clause rendered directly along with this statement, rather
    than being moved to the top of the ultimate rendered statement, even if this statement
    is rendered as a subquery within a larger statement.
  prefs: []
  type: TYPE_NORMAL
- en: This method has two general uses. One is to embed CTE statements that serve
    some purpose without being referenced explicitly, such as the use case of embedding
    a DML statement such as an INSERT or UPDATE as a CTE inline with a primary statement
    that may draw from its results indirectly. The other is to provide control over
    the exact placement of a particular series of CTE constructs that should remain
    rendered directly in terms of a particular statement that may be nested in a larger
    statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE500]'
  prefs: []
  type: TYPE_PRE
- en: 'Would render:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE501]'
  prefs: []
  type: TYPE_PRE
- en: Above, the “anon_1” CTE is not referenced in the SELECT statement, however still
    accomplishes the task of running an INSERT statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly in a DML-related context, using the PostgreSQL [`Insert`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Insert
    "sqlalchemy.dialects.postgresql.Insert") construct to generate an “upsert”:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE502]'
  prefs: []
  type: TYPE_PRE
- en: 'The above statement renders as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE503]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.4.21.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*ctes` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: zero or more [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    constructs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Changed in version 2.0: Multiple CTE instances are accepted'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`nest_here` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: if True, the given CTE or CTEs will be rendered as though they specified the
    [`HasCTE.cte.nesting`](#sqlalchemy.sql.expression.HasCTE.cte.params.nesting "sqlalchemy.sql.expression.HasCTE.cte")
    flag to `True` when they were added to this [`HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE"). Assuming the given CTEs are not referenced
    in an outer-enclosing statement as well, the CTEs given should render at the level
    of this statement when this flag is given.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`HasCTE.cte.nesting`](#sqlalchemy.sql.expression.HasCTE.cte.params.nesting
    "sqlalchemy.sql.expression.HasCTE.cte")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE504]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`SelectBase.alias()`](#sqlalchemy.sql.expression.SelectBase.alias
    "sqlalchemy.sql.expression.SelectBase.alias") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a named subquery against this [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase").
  prefs: []
  type: TYPE_NORMAL
- en: For a [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")
    (as opposed to a [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")),
    this returns a [`Subquery`](#sqlalchemy.sql.expression.Subquery "sqlalchemy.sql.expression.Subquery")
    object which behaves mostly the same as the [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") object that is used with a [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The [`SelectBase.alias()`](#sqlalchemy.sql.expression.SelectBase.alias
    "sqlalchemy.sql.expression.SelectBase.alias") method is now a synonym for the
    [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery "sqlalchemy.sql.expression.SelectBase.subquery")
    method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE505]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`SelectBase.as_scalar()`](#sqlalchemy.sql.expression.SelectBase.as_scalar
    "sqlalchemy.sql.expression.SelectBase.as_scalar") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.4: The [`SelectBase.as_scalar()`](#sqlalchemy.sql.expression.SelectBase.as_scalar
    "sqlalchemy.sql.expression.SelectBase.as_scalar") method is deprecated and will
    be removed in a future release. Please refer to [`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE506]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`SelectBase.c`](#sqlalchemy.sql.expression.SelectBase.c
    "sqlalchemy.sql.expression.SelectBase.c") *attribute of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.4: The [`SelectBase.c`](#sqlalchemy.sql.expression.SelectBase.c
    "sqlalchemy.sql.expression.SelectBase.c") and `SelectBase.columns` attributes
    are deprecated and will be removed in a future release; these attributes implicitly
    create a subquery that should be explicit. Please call [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") first in order to create a subquery,
    which then contains this attribute. To access the columns that this SELECT object
    SELECTs from, use the [`SelectBase.selected_columns`](#sqlalchemy.sql.expression.SelectBase.selected_columns
    "sqlalchemy.sql.expression.SelectBase.selected_columns") attribute.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE507]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Selectable.corresponding_column()`](#sqlalchemy.sql.expression.Selectable.corresponding_column
    "sqlalchemy.sql.expression.Selectable.corresponding_column") *method of* [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
  prefs: []
  type: TYPE_NORMAL
- en: Given a [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"), return the exported [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") object from the [`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") collection of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable") which corresponds to that original [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") via a common ancestor column.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`column` – the target [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") to be matched.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`require_embedded` – only return corresponding columns for the given [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"), if the given [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") is actually present within a sub-element
    of this [`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable").
    Normally the column will match if it merely shares a common ancestor with one
    of the exported columns of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") - the [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") that is used for the operation.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnCollection.corresponding_column()`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection.corresponding_column
    "sqlalchemy.sql.expression.ColumnCollection.corresponding_column") - implementation
    method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE508]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte
    "sqlalchemy.sql.expression.HasCTE.cte") *method of* [`HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a new [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE"),
    or Common Table Expression instance.
  prefs: []
  type: TYPE_NORMAL
- en: Common table expressions are a SQL standard whereby SELECT statements can draw
    upon secondary statements specified along with the primary statement, using a
    clause called “WITH”. Special semantics regarding UNION can also be employed to
    allow “recursive” queries, where a SELECT statement can draw upon the set of rows
    that have previously been selected.
  prefs: []
  type: TYPE_NORMAL
- en: CTEs can also be applied to DML constructs UPDATE, INSERT and DELETE on some
    databases, both as a source of CTE rows when combined with RETURNING, as well
    as a consumer of CTE rows.
  prefs: []
  type: TYPE_NORMAL
- en: SQLAlchemy detects [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    objects, which are treated similarly to [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") objects, as special elements to be delivered
    to the FROM clause of the statement as well as to a WITH clause at the top of
    the statement.
  prefs: []
  type: TYPE_NORMAL
- en: For special prefixes such as PostgreSQL “MATERIALIZED” and “NOT MATERIALIZED”,
    the `CTE.prefix_with()` method may be used to establish these.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.3.13: Added support for prefixes. In particular - MATERIALIZED
    and NOT MATERIALIZED.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name` – name given to the common table expression. Like [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias"), the name can be left as `None`
    in which case an anonymous symbol will be used at query compile time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`recursive` – if `True`, will render `WITH RECURSIVE`. A recursive common table
    expression is intended to be used in conjunction with UNION ALL in order to derive
    rows from those already selected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nesting` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: if `True`, will render the CTE locally to the statement in which it is referenced.
    For more complex scenarios, the [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") method using the [`HasCTE.add_cte.nest_here`](#sqlalchemy.sql.expression.HasCTE.add_cte.params.nest_here
    "sqlalchemy.sql.expression.HasCTE.add_cte") parameter may also be used to more
    carefully control the exact placement of a particular CTE.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 1.4.24.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte "sqlalchemy.sql.expression.HasCTE.add_cte")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The following examples include two from PostgreSQL’s documentation at [https://www.postgresql.org/docs/current/static/queries-with.html](https://www.postgresql.org/docs/current/static/queries-with.html),
    as well as additional examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example 1, non recursive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE509]'
  prefs: []
  type: TYPE_PRE
- en: 'Example 2, WITH RECURSIVE:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE510]'
  prefs: []
  type: TYPE_PRE
- en: 'Example 3, an upsert using UPDATE and INSERT with CTEs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE511]'
  prefs: []
  type: TYPE_PRE
- en: 'Example 4, Nesting CTE (SQLAlchemy 1.4.24 and above):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE512]'
  prefs: []
  type: TYPE_PRE
- en: 'The above query will render the second CTE nested inside the first, shown with
    inline parameters below as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE513]'
  prefs: []
  type: TYPE_PRE
- en: 'The same CTE can be set up using the [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") method as follows (SQLAlchemy 2.0
    and above):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE514]'
  prefs: []
  type: TYPE_PRE
- en: 'Example 5, Non-Linear CTE (SQLAlchemy 1.4.28 and above):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE515]'
  prefs: []
  type: TYPE_PRE
- en: 'The above query will render 2 UNIONs inside the recursive CTE:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE516]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.cte()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.cte "sqlalchemy.orm.Query.cte")
    - ORM version of [`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte "sqlalchemy.sql.expression.HasCTE.cte").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE517]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") *method of* [`Executable`](#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")'
  prefs: []
  type: TYPE_NORMAL
- en: Set non-SQL options for the statement which take effect during execution.
  prefs: []
  type: TYPE_NORMAL
- en: Execution options can be set at many scopes, including per-statement, per-connection,
    or per execution, using methods such as [`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") and parameters which accept
    a dictionary of options such as [`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute") and [`Session.execute.execution_options`](../orm/session_api.html#sqlalchemy.orm.Session.execute.params.execution_options
    "sqlalchemy.orm.Session.execute").
  prefs: []
  type: TYPE_NORMAL
- en: The primary characteristic of an execution option, as opposed to other kinds
    of options such as ORM loader options, is that **execution options never affect
    the compiled SQL of a query, only things that affect how the SQL statement itself
    is invoked or how results are fetched**. That is, execution options are not part
    of what’s accommodated by SQL compilation nor are they considered part of the
    cached state of a statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") method is [generative](../glossary.html#term-generative),
    as is the case for the method as applied to the [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") and [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") objects, which means when the method is called, a copy
    of the object is returned, which applies the given parameters to that new copy,
    but leaves the original unchanged:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE518]'
  prefs: []
  type: TYPE_PRE
- en: An exception to this behavior is the [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object, where the [`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") method is explicitly **not**
    generative.
  prefs: []
  type: TYPE_NORMAL
- en: 'The kinds of options that may be passed to [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") and other related methods
    and parameter dictionaries include parameters that are explicitly consumed by
    SQLAlchemy Core or ORM, as well as arbitrary keyword arguments not defined by
    SQLAlchemy, which means the methods and/or parameter dictionaries may be used
    for user-defined parameters that interact with custom code, which may access the
    parameters using methods such as [`Executable.get_execution_options()`](#sqlalchemy.sql.expression.Executable.get_execution_options
    "sqlalchemy.sql.expression.Executable.get_execution_options") and [`Connection.get_execution_options()`](connections.html#sqlalchemy.engine.Connection.get_execution_options
    "sqlalchemy.engine.Connection.get_execution_options"), or within selected event
    hooks using a dedicated `execution_options` event parameter such as [`ConnectionEvents.before_execute.execution_options`](events.html#sqlalchemy.events.ConnectionEvents.before_execute.params.execution_options
    "sqlalchemy.events.ConnectionEvents.before_execute") or [`ORMExecuteState.execution_options`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.execution_options
    "sqlalchemy.orm.ORMExecuteState.execution_options"), e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE519]'
  prefs: []
  type: TYPE_PRE
- en: 'Within the scope of options that are explicitly recognized by SQLAlchemy, most
    apply to specific classes of objects and not others. The most common execution
    options include:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Connection.execution_options.isolation_level`](connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") - sets the isolation level for
    a connection or a class of connections via an [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"). This option is accepted only by [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") or [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Connection.execution_options.stream_results`](connections.html#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") - indicates results should be
    fetched using a server side cursor; this option is accepted by [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"), by the [`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute") parameter on [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute"), and additionally by [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") on a SQL statement object,
    as well as by ORM constructs like [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Connection.execution_options.compiled_cache`](connections.html#sqlalchemy.engine.Connection.execution_options.params.compiled_cache
    "sqlalchemy.engine.Connection.execution_options") - indicates a dictionary that
    will serve as the [SQL compilation cache](connections.html#sql-caching) for a
    [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    or [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine"),
    as well as for ORM methods like [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute"). Can be passed as `None` to disable caching
    for statements. This option is not accepted by [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") as it is inadvisable
    to carry along a compilation cache within a statement object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Connection.execution_options.schema_translate_map`](connections.html#sqlalchemy.engine.Connection.execution_options.params.schema_translate_map
    "sqlalchemy.engine.Connection.execution_options") - a mapping of schema names
    used by the [Schema Translate Map](connections.html#schema-translating) feature,
    accepted by [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine"),
    [`Executable`](#sqlalchemy.sql.expression.Executable "sqlalchemy.sql.expression.Executable"),
    as well as by ORM constructs like [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.execute.execution_options`](../orm/session_api.html#sqlalchemy.orm.Session.execute.params.execution_options
    "sqlalchemy.orm.Session.execute")'
  prefs: []
  type: TYPE_NORMAL
- en: '[ORM Execution Options](../orm/queryguide/api.html#orm-queryguide-execution-options)
    - documentation on all ORM-specific execution options'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE520]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`SelectBase.exists()`](#sqlalchemy.sql.expression.SelectBase.exists
    "sqlalchemy.sql.expression.SelectBase.exists") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  prefs: []
  type: TYPE_NORMAL
- en: Return an [`Exists`](#sqlalchemy.sql.expression.Exists "sqlalchemy.sql.expression.Exists")
    representation of this selectable, which can be used as a column expression.
  prefs: []
  type: TYPE_NORMAL
- en: The returned object is an instance of [`Exists`](#sqlalchemy.sql.expression.Exists
    "sqlalchemy.sql.expression.Exists").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`exists()`](#sqlalchemy.sql.expression.exists "sqlalchemy.sql.expression.exists")'
  prefs: []
  type: TYPE_NORMAL
- en: '[EXISTS subqueries](../tutorial/data_select.html#tutorial-exists) - in the
    [2.0 style](../glossary.html#term-2.0-style) tutorial.'
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE521]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`SelectBase.exported_columns`](#sqlalchemy.sql.expression.SelectBase.exported_columns
    "sqlalchemy.sql.expression.SelectBase.exported_columns") *attribute of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  prefs: []
  type: TYPE_NORMAL
- en: A [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") that represents the “exported” columns
    of this [`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable"),
    not including [`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause") constructs.
  prefs: []
  type: TYPE_NORMAL
- en: The “exported” columns for a [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase") object are synonymous with the [`SelectBase.selected_columns`](#sqlalchemy.sql.expression.SelectBase.selected_columns
    "sqlalchemy.sql.expression.SelectBase.selected_columns") collection.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.exported_columns`](#sqlalchemy.sql.expression.Select.exported_columns
    "sqlalchemy.sql.expression.Select.exported_columns")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`FromClause.exported_columns`](#sqlalchemy.sql.expression.FromClause.exported_columns
    "sqlalchemy.sql.expression.FromClause.exported_columns")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE522]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a new selectable with the given FETCH FIRST criterion applied.
  prefs: []
  type: TYPE_NORMAL
- en: This is a numeric value which usually renders as `FETCH {FIRST | NEXT} [ count
    ] {ROW | ROWS} {ONLY | WITH TIES}` expression in the resulting select. This functionality
    is is currently implemented for Oracle, PostgreSQL, MSSQL.
  prefs: []
  type: TYPE_NORMAL
- en: Use [`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset") to specify the offset.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The [`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch") method will replace any clause
    applied with [`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit").
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`count` – an integer COUNT parameter, or a SQL expression that provides an
    integer result. When `percent=True` this will represent the percentage of rows
    to return, not the absolute value. Pass `None` to reset it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`with_ties` – When `True`, the WITH TIES option is used to return any additional
    rows that tie for the last place in the result set according to the `ORDER BY`
    clause. The `ORDER BY` may be mandatory in this case. Defaults to `False`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`percent` – When `True`, `count` represents the percentage of the total number
    of selected rows to return. Defaults to `False`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE523]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Executable.get_execution_options()`](#sqlalchemy.sql.expression.Executable.get_execution_options
    "sqlalchemy.sql.expression.Executable.get_execution_options") *method of* [`Executable`](#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")'
  prefs: []
  type: TYPE_NORMAL
- en: Get the non-SQL options which will take effect during execution.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.3.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE524]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`GenerativeSelect.get_label_style()`](#sqlalchemy.sql.expression.GenerativeSelect.get_label_style
    "sqlalchemy.sql.expression.GenerativeSelect.get_label_style") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  prefs: []
  type: TYPE_NORMAL
- en: Retrieve the current label style.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE525]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`GenerativeSelect.group_by()`](#sqlalchemy.sql.expression.GenerativeSelect.group_by
    "sqlalchemy.sql.expression.GenerativeSelect.group_by") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a new selectable with the given list of GROUP BY criterion applied.
  prefs: []
  type: TYPE_NORMAL
- en: All existing GROUP BY settings can be suppressed by passing `None`.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE526]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***clauses** – a series of [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") constructs which will be used to generate
    an GROUP BY clause.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Aggregate functions with GROUP BY / HAVING](../tutorial/data_select.html#tutorial-group-by-w-aggregates)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Ordering or Grouping by a Label](../tutorial/data_select.html#tutorial-order-by-label)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE527]'
  prefs: []
  type: TYPE_PRE
- en: Return `True` if this [`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows
    "sqlalchemy.sql.expression.ReturnsRows") is ‘derived’ from the given [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: An example would be an Alias of a Table is derived from that Table.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE528]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`SelectBase.label()`](#sqlalchemy.sql.expression.SelectBase.label
    "sqlalchemy.sql.expression.SelectBase.label") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a ‘scalar’ representation of this selectable, embedded as a subquery
    with a label.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE529]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`SelectBase.lateral()`](#sqlalchemy.sql.expression.SelectBase.lateral
    "sqlalchemy.sql.expression.SelectBase.lateral") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a LATERAL alias of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable").
  prefs: []
  type: TYPE_NORMAL
- en: The return value is the [`Lateral`](#sqlalchemy.sql.expression.Lateral "sqlalchemy.sql.expression.Lateral")
    construct also provided by the top-level [`lateral()`](#sqlalchemy.sql.expression.lateral
    "sqlalchemy.sql.expression.lateral") function.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[LATERAL correlation](../tutorial/data_select.html#tutorial-lateral-correlation)
    - overview of usage.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE530]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a new selectable with the given LIMIT criterion applied.
  prefs: []
  type: TYPE_NORMAL
- en: This is a numerical value which usually renders as a `LIMIT` expression in the
    resulting select. Backends that don’t support `LIMIT` will attempt to provide
    similar functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The [`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit") method will replace any clause
    applied with [`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**limit** – an integer LIMIT parameter, or a SQL expression that provides an
    integer result. Pass `None` to reset it.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE531]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a new selectable with the given OFFSET criterion applied.
  prefs: []
  type: TYPE_NORMAL
- en: This is a numeric value which usually renders as an `OFFSET` expression in the
    resulting select. Backends that don’t support `OFFSET` will attempt to provide
    similar functionality.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**offset** – an integer OFFSET parameter, or a SQL expression that provides
    an integer result. Pass `None` to reset it.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE532]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Executable.options()`](#sqlalchemy.sql.expression.Executable.options
    "sqlalchemy.sql.expression.Executable.options") *method of* [`Executable`](#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")'
  prefs: []
  type: TYPE_NORMAL
- en: Apply options to this statement.
  prefs: []
  type: TYPE_NORMAL
- en: In the general sense, options are any kind of Python object that can be interpreted
    by the SQL compiler for the statement. These options can be consumed by specific
    dialects or specific kinds of compilers.
  prefs: []
  type: TYPE_NORMAL
- en: The most commonly known kind of option are the ORM level options that apply
    “eager load” and other loading behaviors to an ORM query. However, options can
    theoretically be used for many other purposes.
  prefs: []
  type: TYPE_NORMAL
- en: For background on specific kinds of options for specific kinds of statements,
    refer to the documentation for those option objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: - added [`Executable.options()`](#sqlalchemy.sql.expression.Executable.options
    "sqlalchemy.sql.expression.Executable.options") to Core statement objects towards
    the goal of allowing unified Core / ORM querying capabilities.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Column Loading Options](../orm/queryguide/columns.html#loading-columns) -
    refers to options specific to the usage of ORM queries'
  prefs: []
  type: TYPE_NORMAL
- en: '[Relationship Loading with Loader Options](../orm/queryguide/relationships.html#relationship-loader-options)
    - refers to options specific to the usage of ORM queries'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE533]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`GenerativeSelect.order_by()`](#sqlalchemy.sql.expression.GenerativeSelect.order_by
    "sqlalchemy.sql.expression.GenerativeSelect.order_by") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a new selectable with the given list of ORDER BY criteria applied.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE534]'
  prefs: []
  type: TYPE_PRE
- en: 'Calling this method multiple times is equivalent to calling it once with all
    the clauses concatenated. All existing ORDER BY criteria may be cancelled by passing
    `None` by itself. New ORDER BY criteria may then be added by invoking [`Query.order_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.order_by
    "sqlalchemy.orm.Query.order_by") again, e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE535]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***clauses** – a series of [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") constructs which will be used to generate
    an ORDER BY clause.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[ORDER BY](../tutorial/data_select.html#tutorial-order-by) - in the [SQLAlchemy
    Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Ordering or Grouping by a Label](../tutorial/data_select.html#tutorial-order-by-label)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE536]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Selectable.replace_selectable()`](#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") *method of* [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
  prefs: []
  type: TYPE_NORMAL
- en: Replace all occurrences of [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") ‘old’ with the given [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") object, returning a copy of this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.4: The [`Selectable.replace_selectable()`](#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") method is deprecated,
    and will be removed in a future release. Similar functionality is available via
    the sqlalchemy.sql.visitors module.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE537]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a ‘scalar’ representation of this selectable, which can be used as a
    column expression.
  prefs: []
  type: TYPE_NORMAL
- en: The returned object is an instance of [`ScalarSelect`](#sqlalchemy.sql.expression.ScalarSelect
    "sqlalchemy.sql.expression.ScalarSelect").
  prefs: []
  type: TYPE_NORMAL
- en: Typically, a select statement which has only one column in its columns clause
    is eligible to be used as a scalar expression. The scalar subquery can then be
    used in the WHERE clause or columns clause of an enclosing SELECT.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the scalar subquery differentiates from the FROM-level subquery that
    can be produced using the [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") method.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Scalar and Correlated Subqueries](../tutorial/data_select.html#tutorial-scalar-subquery)
    - in the 2.0 tutorial'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE538]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`SelectBase.select()`](#sqlalchemy.sql.expression.SelectBase.select
    "sqlalchemy.sql.expression.SelectBase.select") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.4: The [`SelectBase.select()`](#sqlalchemy.sql.expression.SelectBase.select
    "sqlalchemy.sql.expression.SelectBase.select") method is deprecated and will be
    removed in a future release; this method implicitly creates a subquery that should
    be explicit. Please call [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") first in order to create a subquery,
    which then can be selected.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE539]'
  prefs: []
  type: TYPE_PRE
- en: A [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") representing the columns that this
    SELECT statement or similar construct returns in its result set, not including
    [`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause "sqlalchemy.sql.expression.TextClause")
    constructs.
  prefs: []
  type: TYPE_NORMAL
- en: For a [`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect "sqlalchemy.sql.expression.CompoundSelect"),
    the [`CompoundSelect.selected_columns`](#sqlalchemy.sql.expression.CompoundSelect.selected_columns
    "sqlalchemy.sql.expression.CompoundSelect.selected_columns") attribute returns
    the selected columns of the first SELECT statement contained within the series
    of statements within the set operation.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.selected_columns`](#sqlalchemy.sql.expression.Select.selected_columns
    "sqlalchemy.sql.expression.Select.selected_columns")'
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE540]'
  prefs: []
  type: TYPE_PRE
- en: Apply a ‘grouping’ to this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  prefs: []
  type: TYPE_NORMAL
- en: This method is overridden by subclasses to return a “grouping” construct, i.e.
    parenthesis. In particular it’s used by “binary” expressions to provide a grouping
    around themselves when placed into a larger expression, as well as by [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs when placed into the FROM clause
    of another [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select").
    (Note that subqueries should be normally created using the [`Select.alias()`](#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") method, as many platforms require nested
    SELECT statements to be named).
  prefs: []
  type: TYPE_NORMAL
- en: As expressions are composed together, the application of [`self_group()`](#sqlalchemy.sql.expression.CompoundSelect.self_group
    "sqlalchemy.sql.expression.CompoundSelect.self_group") is automatic - end-user
    code should never need to use this method directly. Note that SQLAlchemy’s clause
    constructs take operator precedence into account - so parenthesis might not be
    needed, for example, in an expression like `x OR (y AND z)` - AND takes precedence
    over OR.
  prefs: []
  type: TYPE_NORMAL
- en: The base [`self_group()`](#sqlalchemy.sql.expression.CompoundSelect.self_group
    "sqlalchemy.sql.expression.CompoundSelect.self_group") method of [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") just returns self.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE541]'
  prefs: []
  type: TYPE_PRE
- en: Return a new selectable with the specified label style.
  prefs: []
  type: TYPE_NORMAL
- en: There are three “label styles” available, [`SelectLabelStyle.LABEL_STYLE_DISAMBIGUATE_ONLY`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_DISAMBIGUATE_ONLY
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_DISAMBIGUATE_ONLY"), [`SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL"),
    and [`SelectLabelStyle.LABEL_STYLE_NONE`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_NONE
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_NONE"). The default style
    is [`SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL").
  prefs: []
  type: TYPE_NORMAL
- en: In modern SQLAlchemy, there is not generally a need to change the labeling style,
    as per-expression labels are more effectively used by making use of the [`ColumnElement.label()`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.label
    "sqlalchemy.sql.expression.ColumnElement.label") method. In past versions, `LABEL_STYLE_TABLENAME_PLUS_COL`
    was used to disambiguate same-named columns from different tables, aliases, or
    subqueries; the newer `LABEL_STYLE_DISAMBIGUATE_ONLY` now applies labels only
    to names that conflict with an existing name so that the impact of this labeling
    is minimal.
  prefs: []
  type: TYPE_NORMAL
- en: The rationale for disambiguation is mostly so that all column expressions are
    available from a given [`FromClause.c`](#sqlalchemy.sql.expression.FromClause.c
    "sqlalchemy.sql.expression.FromClause.c") collection when a subquery is created.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4: - the [`GenerativeSelect.set_label_style()`](#sqlalchemy.sql.expression.GenerativeSelect.set_label_style
    "sqlalchemy.sql.expression.GenerativeSelect.set_label_style") method replaces
    the previous combination of `.apply_labels()`, `.with_labels()` and `use_labels=True`
    methods and/or parameters.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '`LABEL_STYLE_DISAMBIGUATE_ONLY`'
  prefs: []
  type: TYPE_NORMAL
- en: '`LABEL_STYLE_TABLENAME_PLUS_COL`'
  prefs: []
  type: TYPE_NORMAL
- en: '`LABEL_STYLE_NONE`'
  prefs: []
  type: TYPE_NORMAL
- en: '`LABEL_STYLE_DEFAULT`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE542]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`GenerativeSelect.slice()`](#sqlalchemy.sql.expression.GenerativeSelect.slice
    "sqlalchemy.sql.expression.GenerativeSelect.slice") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  prefs: []
  type: TYPE_NORMAL
- en: Apply LIMIT / OFFSET to this statement based on a slice.
  prefs: []
  type: TYPE_NORMAL
- en: The start and stop indices behave like the argument to Python’s built-in `range()`
    function. This method provides an alternative to using `LIMIT`/`OFFSET` to get
    a slice of the query.
  prefs: []
  type: TYPE_NORMAL
- en: For example,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE543]'
  prefs: []
  type: TYPE_PRE
- en: renders as
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE544]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The [`GenerativeSelect.slice()`](#sqlalchemy.sql.expression.GenerativeSelect.slice
    "sqlalchemy.sql.expression.GenerativeSelect.slice") method will replace any clause
    applied with [`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch").
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4: Added the [`GenerativeSelect.slice()`](#sqlalchemy.sql.expression.GenerativeSelect.slice
    "sqlalchemy.sql.expression.GenerativeSelect.slice") method generalized from the
    ORM.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE545]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a subquery of this [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase").
  prefs: []
  type: TYPE_NORMAL
- en: A subquery is from a SQL perspective a parenthesized, named construct that can
    be placed in the FROM clause of another SELECT statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'Given a SELECT statement such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE546]'
  prefs: []
  type: TYPE_PRE
- en: 'The above statement might look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE547]'
  prefs: []
  type: TYPE_PRE
- en: 'The subquery form by itself renders the same way, however when embedded into
    the FROM clause of another SELECT statement, it becomes a named sub-element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE548]'
  prefs: []
  type: TYPE_PRE
- en: 'The above renders as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE549]'
  prefs: []
  type: TYPE_PRE
- en: Historically, [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") is equivalent to calling the
    [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias "sqlalchemy.sql.expression.FromClause.alias")
    method on a FROM object; however, as a [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase") object is not directly FROM object, the
    [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery "sqlalchemy.sql.expression.SelectBase.subquery")
    method provides clearer semantics.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE550]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`GenerativeSelect.with_for_update()`](#sqlalchemy.sql.expression.GenerativeSelect.with_for_update
    "sqlalchemy.sql.expression.GenerativeSelect.with_for_update") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  prefs: []
  type: TYPE_NORMAL
- en: Specify a `FOR UPDATE` clause for this [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect").
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE551]'
  prefs: []
  type: TYPE_PRE
- en: 'On a database like PostgreSQL or Oracle, the above would render a statement
    like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE552]'
  prefs: []
  type: TYPE_PRE
- en: 'on other backends, the `nowait` option is ignored and instead would produce:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE553]'
  prefs: []
  type: TYPE_PRE
- en: When called with no arguments, the statement will render with the suffix `FOR
    UPDATE`. Additional arguments can then be provided which allow for common database-specific
    variants.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`nowait` – boolean; will render `FOR UPDATE NOWAIT` on Oracle and PostgreSQL
    dialects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`read` – boolean; will render `LOCK IN SHARE MODE` on MySQL, `FOR SHARE` on
    PostgreSQL. On PostgreSQL, when combined with `nowait`, will render `FOR SHARE
    NOWAIT`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`of` – SQL expression or list of SQL expression elements, (typically [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects or a compatible expression, for some backends
    may also be a table expression) which will render into a `FOR UPDATE OF` clause;
    supported by PostgreSQL, Oracle, some MySQL versions and possibly others. May
    render as a table or as a column depending on backend.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`skip_locked` – boolean, will render `FOR UPDATE SKIP LOCKED` on Oracle and
    PostgreSQL dialects or `FOR SHARE SKIP LOCKED` if `read=True` is also specified.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`key_share` – boolean, will render `FOR NO KEY UPDATE`, or if combined with
    `read=True` will render `FOR KEY SHARE`, on the PostgreSQL dialect.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE554]'
  prefs: []
  type: TYPE_PRE
- en: Represent a Common Table Expression.
  prefs: []
  type: TYPE_NORMAL
- en: The [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    object is obtained using the [`SelectBase.cte()`](#sqlalchemy.sql.expression.SelectBase.cte
    "sqlalchemy.sql.expression.SelectBase.cte") method from any SELECT statement.
    A less often available syntax also allows use of the [`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte
    "sqlalchemy.sql.expression.HasCTE.cte") method present on [DML](../glossary.html#term-DML)
    constructs such as [`Insert`](dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert"),
    [`Update`](dml.html#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    and [`Delete`](dml.html#sqlalchemy.sql.expression.Delete "sqlalchemy.sql.expression.Delete").
    See the [`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte "sqlalchemy.sql.expression.HasCTE.cte")
    method for usage details on CTEs.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Subqueries and CTEs](../tutorial/data_select.html#tutorial-subqueries-ctes)
    - in the 2.0 tutorial'
  prefs: []
  type: TYPE_NORMAL
- en: '[`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte "sqlalchemy.sql.expression.HasCTE.cte")
    - examples of calling styles'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[alias()](#sqlalchemy.sql.expression.CTE.alias), [union()](#sqlalchemy.sql.expression.CTE.union),
    [union_all()](#sqlalchemy.sql.expression.CTE.union_all)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.expression.CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    (`sqlalchemy.sql.roles.DMLTableRole`, `sqlalchemy.sql.roles.IsCTERole`, `sqlalchemy.sql.expression.Generative`,
    [`sqlalchemy.sql.expression.HasPrefixes`](#sqlalchemy.sql.expression.HasPrefixes
    "sqlalchemy.sql.expression.HasPrefixes"), [`sqlalchemy.sql.expression.HasSuffixes`](#sqlalchemy.sql.expression.HasSuffixes
    "sqlalchemy.sql.expression.HasSuffixes"), [`sqlalchemy.sql.expression.AliasedReturnsRows`](#sqlalchemy.sql.expression.AliasedReturnsRows
    "sqlalchemy.sql.expression.AliasedReturnsRows"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE555]'
  prefs: []
  type: TYPE_PRE
- en: Return an [`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    of this [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE").
  prefs: []
  type: TYPE_NORMAL
- en: This method is a CTE-specific specialization of the [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") method.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Using Aliases](../tutorial/data_select.html#tutorial-using-aliases)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`alias()`](#sqlalchemy.sql.expression.alias "sqlalchemy.sql.expression.alias")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE556]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    with a SQL `UNION` of the original CTE against the given selectables provided
    as positional arguments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***other** –'
  prefs: []
  type: TYPE_NORMAL
- en: one or more elements with which to create a UNION.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4.28: multiple elements are now accepted.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte "sqlalchemy.sql.expression.HasCTE.cte")
    - examples of calling styles'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE557]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    with a SQL `UNION ALL` of the original CTE against the given selectables provided
    as positional arguments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***other** –'
  prefs: []
  type: TYPE_NORMAL
- en: one or more elements with which to create a UNION.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4.28: multiple elements are now accepted.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte "sqlalchemy.sql.expression.HasCTE.cte")
    - examples of calling styles'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE558]'
  prefs: []
  type: TYPE_PRE
- en: Mark a [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") as supporting execution.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Executable`](#sqlalchemy.sql.expression.Executable "sqlalchemy.sql.expression.Executable")
    is a superclass for all “statement” types of objects, including [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select"), [`delete()`](dml.html#sqlalchemy.sql.expression.delete
    "sqlalchemy.sql.expression.delete"), [`update()`](dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update"), [`insert()`](dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert"), [`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text").'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[execution_options()](#sqlalchemy.sql.expression.Executable.execution_options),
    [get_execution_options()](#sqlalchemy.sql.expression.Executable.get_execution_options),
    [options()](#sqlalchemy.sql.expression.Executable.options)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.expression.Executable`](#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable") (`sqlalchemy.sql.roles.StatementRole`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE559]'
  prefs: []
  type: TYPE_PRE
- en: Set non-SQL options for the statement which take effect during execution.
  prefs: []
  type: TYPE_NORMAL
- en: Execution options can be set at many scopes, including per-statement, per-connection,
    or per execution, using methods such as [`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") and parameters which accept
    a dictionary of options such as [`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute") and [`Session.execute.execution_options`](../orm/session_api.html#sqlalchemy.orm.Session.execute.params.execution_options
    "sqlalchemy.orm.Session.execute").
  prefs: []
  type: TYPE_NORMAL
- en: The primary characteristic of an execution option, as opposed to other kinds
    of options such as ORM loader options, is that **execution options never affect
    the compiled SQL of a query, only things that affect how the SQL statement itself
    is invoked or how results are fetched**. That is, execution options are not part
    of what’s accommodated by SQL compilation nor are they considered part of the
    cached state of a statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") method is [generative](../glossary.html#term-generative),
    as is the case for the method as applied to the [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") and [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") objects, which means when the method is called, a copy
    of the object is returned, which applies the given parameters to that new copy,
    but leaves the original unchanged:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE560]'
  prefs: []
  type: TYPE_PRE
- en: An exception to this behavior is the [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object, where the [`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") method is explicitly **not**
    generative.
  prefs: []
  type: TYPE_NORMAL
- en: 'The kinds of options that may be passed to [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") and other related methods
    and parameter dictionaries include parameters that are explicitly consumed by
    SQLAlchemy Core or ORM, as well as arbitrary keyword arguments not defined by
    SQLAlchemy, which means the methods and/or parameter dictionaries may be used
    for user-defined parameters that interact with custom code, which may access the
    parameters using methods such as [`Executable.get_execution_options()`](#sqlalchemy.sql.expression.Executable.get_execution_options
    "sqlalchemy.sql.expression.Executable.get_execution_options") and [`Connection.get_execution_options()`](connections.html#sqlalchemy.engine.Connection.get_execution_options
    "sqlalchemy.engine.Connection.get_execution_options"), or within selected event
    hooks using a dedicated `execution_options` event parameter such as [`ConnectionEvents.before_execute.execution_options`](events.html#sqlalchemy.events.ConnectionEvents.before_execute.params.execution_options
    "sqlalchemy.events.ConnectionEvents.before_execute") or [`ORMExecuteState.execution_options`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.execution_options
    "sqlalchemy.orm.ORMExecuteState.execution_options"), e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE561]'
  prefs: []
  type: TYPE_PRE
- en: 'Within the scope of options that are explicitly recognized by SQLAlchemy, most
    apply to specific classes of objects and not others. The most common execution
    options include:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Connection.execution_options.isolation_level`](connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") - sets the isolation level for
    a connection or a class of connections via an [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"). This option is accepted only by [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") or [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Connection.execution_options.stream_results`](connections.html#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") - indicates results should be
    fetched using a server side cursor; this option is accepted by [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"), by the [`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute") parameter on [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute"), and additionally by [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") on a SQL statement object,
    as well as by ORM constructs like [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Connection.execution_options.compiled_cache`](connections.html#sqlalchemy.engine.Connection.execution_options.params.compiled_cache
    "sqlalchemy.engine.Connection.execution_options") - indicates a dictionary that
    will serve as the [SQL compilation cache](connections.html#sql-caching) for a
    [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    or [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine"),
    as well as for ORM methods like [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute"). Can be passed as `None` to disable caching
    for statements. This option is not accepted by [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") as it is inadvisable
    to carry along a compilation cache within a statement object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Connection.execution_options.schema_translate_map`](connections.html#sqlalchemy.engine.Connection.execution_options.params.schema_translate_map
    "sqlalchemy.engine.Connection.execution_options") - a mapping of schema names
    used by the [Schema Translate Map](connections.html#schema-translating) feature,
    accepted by [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine"),
    [`Executable`](#sqlalchemy.sql.expression.Executable "sqlalchemy.sql.expression.Executable"),
    as well as by ORM constructs like [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.execute.execution_options`](../orm/session_api.html#sqlalchemy.orm.Session.execute.params.execution_options
    "sqlalchemy.orm.Session.execute")'
  prefs: []
  type: TYPE_NORMAL
- en: '[ORM Execution Options](../orm/queryguide/api.html#orm-queryguide-execution-options)
    - documentation on all ORM-specific execution options'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE562]'
  prefs: []
  type: TYPE_PRE
- en: Get the non-SQL options which will take effect during execution.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.3.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE563]'
  prefs: []
  type: TYPE_PRE
- en: Apply options to this statement.
  prefs: []
  type: TYPE_NORMAL
- en: In the general sense, options are any kind of Python object that can be interpreted
    by the SQL compiler for the statement. These options can be consumed by specific
    dialects or specific kinds of compilers.
  prefs: []
  type: TYPE_NORMAL
- en: The most commonly known kind of option are the ORM level options that apply
    “eager load” and other loading behaviors to an ORM query. However, options can
    theoretically be used for many other purposes.
  prefs: []
  type: TYPE_NORMAL
- en: For background on specific kinds of options for specific kinds of statements,
    refer to the documentation for those option objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: - added [`Executable.options()`](#sqlalchemy.sql.expression.Executable.options
    "sqlalchemy.sql.expression.Executable.options") to Core statement objects towards
    the goal of allowing unified Core / ORM querying capabilities.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Column Loading Options](../orm/queryguide/columns.html#loading-columns) -
    refers to options specific to the usage of ORM queries'
  prefs: []
  type: TYPE_NORMAL
- en: '[Relationship Loading with Loader Options](../orm/queryguide/relationships.html#relationship-loader-options)
    - refers to options specific to the usage of ORM queries'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE564]'
  prefs: []
  type: TYPE_PRE
- en: Represent an `EXISTS` clause.
  prefs: []
  type: TYPE_NORMAL
- en: See [`exists()`](#sqlalchemy.sql.expression.exists "sqlalchemy.sql.expression.exists")
    for a description of usage.
  prefs: []
  type: TYPE_NORMAL
- en: An `EXISTS` clause can also be constructed from a [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") instance by calling [`SelectBase.exists()`](#sqlalchemy.sql.expression.SelectBase.exists
    "sqlalchemy.sql.expression.SelectBase.exists").
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[correlate()](#sqlalchemy.sql.expression.Exists.correlate), [correlate_except()](#sqlalchemy.sql.expression.Exists.correlate_except),
    [inherit_cache](#sqlalchemy.sql.expression.Exists.inherit_cache), [select()](#sqlalchemy.sql.expression.Exists.select),
    [select_from()](#sqlalchemy.sql.expression.Exists.select_from), [where()](#sqlalchemy.sql.expression.Exists.where)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.expression.Exists`](#sqlalchemy.sql.expression.Exists
    "sqlalchemy.sql.expression.Exists") ([`sqlalchemy.sql.expression.UnaryExpression`](sqlelement.html#sqlalchemy.sql.expression.UnaryExpression
    "sqlalchemy.sql.expression.UnaryExpression"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE565]'
  prefs: []
  type: TYPE_PRE
- en: Apply correlation to the subquery noted by this [`Exists`](#sqlalchemy.sql.expression.Exists
    "sqlalchemy.sql.expression.Exists").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ScalarSelect.correlate()`](#sqlalchemy.sql.expression.ScalarSelect.correlate
    "sqlalchemy.sql.expression.ScalarSelect.correlate")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE566]'
  prefs: []
  type: TYPE_PRE
- en: Apply correlation to the subquery noted by this [`Exists`](#sqlalchemy.sql.expression.Exists
    "sqlalchemy.sql.expression.Exists").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ScalarSelect.correlate_except()`](#sqlalchemy.sql.expression.ScalarSelect.correlate_except
    "sqlalchemy.sql.expression.ScalarSelect.correlate_except")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE567]'
  prefs: []
  type: TYPE_PRE
- en: Indicate if this [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") instance should make use of the cache
    key generation scheme used by its immediate superclass.
  prefs: []
  type: TYPE_NORMAL
- en: The attribute defaults to `None`, which indicates that a construct has not yet
    taken into account whether or not its appropriate for it to participate in caching;
    this is functionally equivalent to setting the value to `False`, except that a
    warning is also emitted.
  prefs: []
  type: TYPE_NORMAL
- en: This flag can be set to `True` on a particular class, if the SQL that corresponds
    to the object does not change based on attributes which are local to this class,
    and not its superclass.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Enabling Caching Support for Custom Constructs](compiler.html#compilerext-caching)
    - General guideslines for setting the [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute for third-party
    or user defined SQL constructs.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE568]'
  prefs: []
  type: TYPE_PRE
- en: Return a SELECT of this [`Exists`](#sqlalchemy.sql.expression.Exists "sqlalchemy.sql.expression.Exists").
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE569]'
  prefs: []
  type: TYPE_PRE
- en: 'This will produce a statement resembling:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE570]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    - general purpose method which allows for arbitrary column lists.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE571]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`Exists`](#sqlalchemy.sql.expression.Exists "sqlalchemy.sql.expression.Exists")
    construct, applying the given expression to the [`Select.select_from()`](#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") method of the select statement
    contained.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: it is typically preferable to build a [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") statement first, including the desired WHERE
    clause, then use the [`SelectBase.exists()`](#sqlalchemy.sql.expression.SelectBase.exists
    "sqlalchemy.sql.expression.SelectBase.exists") method to produce an [`Exists`](#sqlalchemy.sql.expression.Exists
    "sqlalchemy.sql.expression.Exists") object at once.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE572]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`exists()`](#sqlalchemy.sql.expression.exists "sqlalchemy.sql.expression.exists")
    construct with the given expression added to its WHERE clause, joined to the existing
    clause via AND, if any.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: it is typically preferable to build a [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") statement first, including the desired WHERE
    clause, then use the [`SelectBase.exists()`](#sqlalchemy.sql.expression.SelectBase.exists
    "sqlalchemy.sql.expression.SelectBase.exists") method to produce an [`Exists`](#sqlalchemy.sql.expression.Exists
    "sqlalchemy.sql.expression.Exists") object at once.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE573]'
  prefs: []
  type: TYPE_PRE
- en: Represent an element that can be used within the `FROM` clause of a `SELECT`
    statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most common forms of [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") are the [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") and the [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs. Key features common to all [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") objects include:'
  prefs: []
  type: TYPE_NORMAL
- en: a [`c`](#sqlalchemy.sql.expression.FromClause.c "sqlalchemy.sql.expression.FromClause.c")
    collection, which provides per-name access to a collection of [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") objects.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a [`primary_key`](#sqlalchemy.sql.expression.FromClause.primary_key "sqlalchemy.sql.expression.FromClause.primary_key")
    attribute, which is a collection of all those [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") objects that indicate the `primary_key`
    flag.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Methods to generate various derivations of a “from” clause, including [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias"), [`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join"), [`FromClause.select()`](#sqlalchemy.sql.expression.FromClause.select
    "sqlalchemy.sql.expression.FromClause.select").
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[alias()](#sqlalchemy.sql.expression.FromClause.alias), [c](#sqlalchemy.sql.expression.FromClause.c),
    [columns](#sqlalchemy.sql.expression.FromClause.columns), [description](#sqlalchemy.sql.expression.FromClause.description),
    [entity_namespace](#sqlalchemy.sql.expression.FromClause.entity_namespace), [exported_columns](#sqlalchemy.sql.expression.FromClause.exported_columns),
    [foreign_keys](#sqlalchemy.sql.expression.FromClause.foreign_keys), [is_derived_from()](#sqlalchemy.sql.expression.FromClause.is_derived_from),
    [join()](#sqlalchemy.sql.expression.FromClause.join), [outerjoin()](#sqlalchemy.sql.expression.FromClause.outerjoin),
    [primary_key](#sqlalchemy.sql.expression.FromClause.primary_key), [schema](#sqlalchemy.sql.expression.FromClause.schema),
    [select()](#sqlalchemy.sql.expression.FromClause.select), [tablesample()](#sqlalchemy.sql.expression.FromClause.tablesample)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.expression.FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") (`sqlalchemy.sql.roles.AnonymizedFromClauseRole`,
    [`sqlalchemy.sql.expression.Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE574]'
  prefs: []
  type: TYPE_PRE
- en: Return an alias of this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE575]'
  prefs: []
  type: TYPE_PRE
- en: The above code creates an [`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    object which can be used as a FROM clause in any SELECT statement.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Using Aliases](../tutorial/data_select.html#tutorial-using-aliases)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`alias()`](#sqlalchemy.sql.expression.alias "sqlalchemy.sql.expression.alias")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE576]'
  prefs: []
  type: TYPE_PRE
- en: A synonym for [`FromClause.columns`](#sqlalchemy.sql.expression.FromClause.columns
    "sqlalchemy.sql.expression.FromClause.columns")
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE577]'
  prefs: []
  type: TYPE_PRE
- en: A named-based collection of [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") objects maintained by this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`columns`](#sqlalchemy.sql.expression.FromClause.columns "sqlalchemy.sql.expression.FromClause.columns"),
    or [`c`](#sqlalchemy.sql.expression.FromClause.c "sqlalchemy.sql.expression.FromClause.c")
    collection, is the gateway to the construction of SQL expressions using table-bound
    or other selectable-bound columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE578]'
  prefs: []
  type: TYPE_PRE
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE579]'
  prefs: []
  type: TYPE_PRE
- en: A brief description of this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: Used primarily for error message formatting.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE580]'
  prefs: []
  type: TYPE_PRE
- en: Return a namespace used for name-based access in SQL expressions.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the namespace that is used to resolve “filter_by()” type expressions,
    such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE581]'
  prefs: []
  type: TYPE_PRE
- en: It defaults to the `.c` collection, however internally it can be overridden
    using the “entity_namespace” annotation to deliver alternative results.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE582]'
  prefs: []
  type: TYPE_PRE
- en: A [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") that represents the “exported” columns
    of this [`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable").
  prefs: []
  type: TYPE_NORMAL
- en: The “exported” columns for a [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") object are synonymous with the [`FromClause.columns`](#sqlalchemy.sql.expression.FromClause.columns
    "sqlalchemy.sql.expression.FromClause.columns") collection.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`SelectBase.exported_columns`](#sqlalchemy.sql.expression.SelectBase.exported_columns
    "sqlalchemy.sql.expression.SelectBase.exported_columns")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE583]'
  prefs: []
  type: TYPE_PRE
- en: Return the collection of [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") marker objects which this FromClause references.
  prefs: []
  type: TYPE_NORMAL
- en: Each [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    is a member of a [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")-wide
    [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Table.foreign_key_constraints`](metadata.html#sqlalchemy.schema.Table.foreign_key_constraints
    "sqlalchemy.schema.Table.foreign_key_constraints")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE584]'
  prefs: []
  type: TYPE_PRE
- en: Return `True` if this [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    is ‘derived’ from the given `FromClause`.
  prefs: []
  type: TYPE_NORMAL
- en: An example would be an Alias of a Table is derived from that Table.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE585]'
  prefs: []
  type: TYPE_PRE
- en: Return a [`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    from this [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    to another [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE586]'
  prefs: []
  type: TYPE_PRE
- en: 'would emit SQL along the lines of:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE587]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`right` – the right side of the join; this is any [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") object such as a [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object, and may also be a selectable-compatible object
    such as an ORM-mapped class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onclause` – a SQL expression representing the ON clause of the join. If left
    at `None`, [`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join "sqlalchemy.sql.expression.FromClause.join")
    will attempt to join the two tables based on a foreign key relationship.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`isouter` – if True, render a LEFT OUTER JOIN, instead of JOIN.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`full` – if True, render a FULL OUTER JOIN, instead of LEFT OUTER JOIN. Implies
    [`FromClause.join.isouter`](#sqlalchemy.sql.expression.FromClause.join.params.isouter
    "sqlalchemy.sql.expression.FromClause.join").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`join()`](#sqlalchemy.sql.expression.join "sqlalchemy.sql.expression.join")
    - standalone function'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    - the type of object produced'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE588]'
  prefs: []
  type: TYPE_PRE
- en: Return a [`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    from this [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    to another [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause"),
    with the “isouter” flag set to True.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE589]'
  prefs: []
  type: TYPE_PRE
- en: 'The above is equivalent to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE590]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`right` – the right side of the join; this is any [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") object such as a [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object, and may also be a selectable-compatible object
    such as an ORM-mapped class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onclause` – a SQL expression representing the ON clause of the join. If left
    at `None`, [`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join "sqlalchemy.sql.expression.FromClause.join")
    will attempt to join the two tables based on a foreign key relationship.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`full` – if True, render a FULL OUTER JOIN, instead of LEFT OUTER JOIN.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join "sqlalchemy.sql.expression.FromClause.join")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE591]'
  prefs: []
  type: TYPE_PRE
- en: Return the iterable collection of [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects which comprise the primary key of this `_selectable.FromClause`.
  prefs: []
  type: TYPE_NORMAL
- en: For a [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object, this collection is represented by the [`PrimaryKeyConstraint`](constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") which itself is an iterable collection
    of [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    objects.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE592]'
  prefs: []
  type: TYPE_PRE
- en: Define the ‘schema’ attribute for this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: This is typically `None` for most objects except that of [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), where it is taken as the value of the [`Table.schema`](metadata.html#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table") argument.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE593]'
  prefs: []
  type: TYPE_PRE
- en: Return a SELECT of this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE594]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    - general purpose method which allows for arbitrary column lists.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE595]'
  prefs: []
  type: TYPE_PRE
- en: Return a TABLESAMPLE alias of this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: The return value is the [`TableSample`](#sqlalchemy.sql.expression.TableSample
    "sqlalchemy.sql.expression.TableSample") construct also provided by the top-level
    [`tablesample()`](#sqlalchemy.sql.expression.tablesample "sqlalchemy.sql.expression.tablesample")
    function.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`tablesample()`](#sqlalchemy.sql.expression.tablesample "sqlalchemy.sql.expression.tablesample")
    - usage guidelines and parameters'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE596]'
  prefs: []
  type: TYPE_PRE
- en: Base class for SELECT statements where additional elements can be added.
  prefs: []
  type: TYPE_NORMAL
- en: This serves as the base for [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    and [`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect "sqlalchemy.sql.expression.CompoundSelect")
    where elements such as ORDER BY, GROUP BY can be added and column rendering can
    be controlled. Compare to [`TextualSelect`](#sqlalchemy.sql.expression.TextualSelect
    "sqlalchemy.sql.expression.TextualSelect"), which, while it subclasses [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase") and is also a SELECT construct, represents
    a fixed textual string which cannot be altered at this level, only wrapped as
    a subquery.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[fetch()](#sqlalchemy.sql.expression.GenerativeSelect.fetch), [get_label_style()](#sqlalchemy.sql.expression.GenerativeSelect.get_label_style),
    [group_by()](#sqlalchemy.sql.expression.GenerativeSelect.group_by), [limit()](#sqlalchemy.sql.expression.GenerativeSelect.limit),
    [offset()](#sqlalchemy.sql.expression.GenerativeSelect.offset), [order_by()](#sqlalchemy.sql.expression.GenerativeSelect.order_by),
    [set_label_style()](#sqlalchemy.sql.expression.GenerativeSelect.set_label_style),
    [slice()](#sqlalchemy.sql.expression.GenerativeSelect.slice), [with_for_update()](#sqlalchemy.sql.expression.GenerativeSelect.with_for_update)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.expression.GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect") ([`sqlalchemy.sql.expression.SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase"), `sqlalchemy.sql.expression.Generative`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE597]'
  prefs: []
  type: TYPE_PRE
- en: Return a new selectable with the given FETCH FIRST criterion applied.
  prefs: []
  type: TYPE_NORMAL
- en: This is a numeric value which usually renders as `FETCH {FIRST | NEXT} [ count
    ] {ROW | ROWS} {ONLY | WITH TIES}` expression in the resulting select. This functionality
    is is currently implemented for Oracle, PostgreSQL, MSSQL.
  prefs: []
  type: TYPE_NORMAL
- en: Use [`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset") to specify the offset.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The [`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch") method will replace any clause
    applied with [`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit").
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`count` – an integer COUNT parameter, or a SQL expression that provides an
    integer result. When `percent=True` this will represent the percentage of rows
    to return, not the absolute value. Pass `None` to reset it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`with_ties` – When `True`, the WITH TIES option is used to return any additional
    rows that tie for the last place in the result set according to the `ORDER BY`
    clause. The `ORDER BY` may be mandatory in this case. Defaults to `False`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`percent` – When `True`, `count` represents the percentage of the total number
    of selected rows to return. Defaults to `False`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE598]'
  prefs: []
  type: TYPE_PRE
- en: Retrieve the current label style.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE599]'
  prefs: []
  type: TYPE_PRE
- en: Return a new selectable with the given list of GROUP BY criterion applied.
  prefs: []
  type: TYPE_NORMAL
- en: All existing GROUP BY settings can be suppressed by passing `None`.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE600]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***clauses** – a series of [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") constructs which will be used to generate
    an GROUP BY clause.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Aggregate functions with GROUP BY / HAVING](../tutorial/data_select.html#tutorial-group-by-w-aggregates)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Ordering or Grouping by a Label](../tutorial/data_select.html#tutorial-order-by-label)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE601]'
  prefs: []
  type: TYPE_PRE
- en: Return a new selectable with the given LIMIT criterion applied.
  prefs: []
  type: TYPE_NORMAL
- en: This is a numerical value which usually renders as a `LIMIT` expression in the
    resulting select. Backends that don’t support `LIMIT` will attempt to provide
    similar functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The [`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit") method will replace any clause
    applied with [`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**limit** – an integer LIMIT parameter, or a SQL expression that provides an
    integer result. Pass `None` to reset it.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE602]'
  prefs: []
  type: TYPE_PRE
- en: Return a new selectable with the given OFFSET criterion applied.
  prefs: []
  type: TYPE_NORMAL
- en: This is a numeric value which usually renders as an `OFFSET` expression in the
    resulting select. Backends that don’t support `OFFSET` will attempt to provide
    similar functionality.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**offset** – an integer OFFSET parameter, or a SQL expression that provides
    an integer result. Pass `None` to reset it.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE603]'
  prefs: []
  type: TYPE_PRE
- en: Return a new selectable with the given list of ORDER BY criteria applied.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE604]'
  prefs: []
  type: TYPE_PRE
- en: 'Calling this method multiple times is equivalent to calling it once with all
    the clauses concatenated. All existing ORDER BY criteria may be cancelled by passing
    `None` by itself. New ORDER BY criteria may then be added by invoking [`Query.order_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.order_by
    "sqlalchemy.orm.Query.order_by") again, e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE605]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***clauses** – a series of [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") constructs which will be used to generate
    an ORDER BY clause.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[ORDER BY](../tutorial/data_select.html#tutorial-order-by) - in the [SQLAlchemy
    Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Ordering or Grouping by a Label](../tutorial/data_select.html#tutorial-order-by-label)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE606]'
  prefs: []
  type: TYPE_PRE
- en: Return a new selectable with the specified label style.
  prefs: []
  type: TYPE_NORMAL
- en: There are three “label styles” available, [`SelectLabelStyle.LABEL_STYLE_DISAMBIGUATE_ONLY`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_DISAMBIGUATE_ONLY
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_DISAMBIGUATE_ONLY"), [`SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL"),
    and [`SelectLabelStyle.LABEL_STYLE_NONE`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_NONE
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_NONE"). The default style
    is [`SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL").
  prefs: []
  type: TYPE_NORMAL
- en: In modern SQLAlchemy, there is not generally a need to change the labeling style,
    as per-expression labels are more effectively used by making use of the [`ColumnElement.label()`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.label
    "sqlalchemy.sql.expression.ColumnElement.label") method. In past versions, `LABEL_STYLE_TABLENAME_PLUS_COL`
    was used to disambiguate same-named columns from different tables, aliases, or
    subqueries; the newer `LABEL_STYLE_DISAMBIGUATE_ONLY` now applies labels only
    to names that conflict with an existing name so that the impact of this labeling
    is minimal.
  prefs: []
  type: TYPE_NORMAL
- en: The rationale for disambiguation is mostly so that all column expressions are
    available from a given [`FromClause.c`](#sqlalchemy.sql.expression.FromClause.c
    "sqlalchemy.sql.expression.FromClause.c") collection when a subquery is created.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4: - the [`GenerativeSelect.set_label_style()`](#sqlalchemy.sql.expression.GenerativeSelect.set_label_style
    "sqlalchemy.sql.expression.GenerativeSelect.set_label_style") method replaces
    the previous combination of `.apply_labels()`, `.with_labels()` and `use_labels=True`
    methods and/or parameters.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '`LABEL_STYLE_DISAMBIGUATE_ONLY`'
  prefs: []
  type: TYPE_NORMAL
- en: '`LABEL_STYLE_TABLENAME_PLUS_COL`'
  prefs: []
  type: TYPE_NORMAL
- en: '`LABEL_STYLE_NONE`'
  prefs: []
  type: TYPE_NORMAL
- en: '`LABEL_STYLE_DEFAULT`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE607]'
  prefs: []
  type: TYPE_PRE
- en: Apply LIMIT / OFFSET to this statement based on a slice.
  prefs: []
  type: TYPE_NORMAL
- en: The start and stop indices behave like the argument to Python’s built-in `range()`
    function. This method provides an alternative to using `LIMIT`/`OFFSET` to get
    a slice of the query.
  prefs: []
  type: TYPE_NORMAL
- en: For example,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE608]'
  prefs: []
  type: TYPE_PRE
- en: renders as
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE609]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The [`GenerativeSelect.slice()`](#sqlalchemy.sql.expression.GenerativeSelect.slice
    "sqlalchemy.sql.expression.GenerativeSelect.slice") method will replace any clause
    applied with [`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch").
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4: Added the [`GenerativeSelect.slice()`](#sqlalchemy.sql.expression.GenerativeSelect.slice
    "sqlalchemy.sql.expression.GenerativeSelect.slice") method generalized from the
    ORM.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE610]'
  prefs: []
  type: TYPE_PRE
- en: Specify a `FOR UPDATE` clause for this [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect").
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE611]'
  prefs: []
  type: TYPE_PRE
- en: 'On a database like PostgreSQL or Oracle, the above would render a statement
    like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE612]'
  prefs: []
  type: TYPE_PRE
- en: 'on other backends, the `nowait` option is ignored and instead would produce:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE613]'
  prefs: []
  type: TYPE_PRE
- en: When called with no arguments, the statement will render with the suffix `FOR
    UPDATE`. Additional arguments can then be provided which allow for common database-specific
    variants.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`nowait` – boolean; will render `FOR UPDATE NOWAIT` on Oracle and PostgreSQL
    dialects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`read` – boolean; will render `LOCK IN SHARE MODE` on MySQL, `FOR SHARE` on
    PostgreSQL. On PostgreSQL, when combined with `nowait`, will render `FOR SHARE
    NOWAIT`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`of` – SQL expression or list of SQL expression elements, (typically [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects or a compatible expression, for some backends
    may also be a table expression) which will render into a `FOR UPDATE OF` clause;
    supported by PostgreSQL, Oracle, some MySQL versions and possibly others. May
    render as a table or as a column depending on backend.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`skip_locked` – boolean, will render `FOR UPDATE SKIP LOCKED` on Oracle and
    PostgreSQL dialects or `FOR SHARE SKIP LOCKED` if `read=True` is also specified.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`key_share` – boolean, will render `FOR NO KEY UPDATE`, or if combined with
    `read=True` will render `FOR KEY SHARE`, on the PostgreSQL dialect.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE614]'
  prefs: []
  type: TYPE_PRE
- en: Mixin that declares a class to include CTE support.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[add_cte()](#sqlalchemy.sql.expression.HasCTE.add_cte), [cte()](#sqlalchemy.sql.expression.HasCTE.cte)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.expression.HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE") (`sqlalchemy.sql.roles.HasCTERole`, `sqlalchemy.sql.expression.SelectsRows`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE615]'
  prefs: []
  type: TYPE_PRE
- en: Add one or more [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    constructs to this statement.
  prefs: []
  type: TYPE_NORMAL
- en: This method will associate the given [`CTE`](#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE") constructs with the parent statement such that
    they will each be unconditionally rendered in the WITH clause of the final statement,
    even if not referenced elsewhere within the statement or any sub-selects.
  prefs: []
  type: TYPE_NORMAL
- en: The optional [`HasCTE.add_cte.nest_here`](#sqlalchemy.sql.expression.HasCTE.add_cte.params.nest_here
    "sqlalchemy.sql.expression.HasCTE.add_cte") parameter when set to True will have
    the effect that each given [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    will render in a WITH clause rendered directly along with this statement, rather
    than being moved to the top of the ultimate rendered statement, even if this statement
    is rendered as a subquery within a larger statement.
  prefs: []
  type: TYPE_NORMAL
- en: This method has two general uses. One is to embed CTE statements that serve
    some purpose without being referenced explicitly, such as the use case of embedding
    a DML statement such as an INSERT or UPDATE as a CTE inline with a primary statement
    that may draw from its results indirectly. The other is to provide control over
    the exact placement of a particular series of CTE constructs that should remain
    rendered directly in terms of a particular statement that may be nested in a larger
    statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE616]'
  prefs: []
  type: TYPE_PRE
- en: 'Would render:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE617]'
  prefs: []
  type: TYPE_PRE
- en: Above, the “anon_1” CTE is not referenced in the SELECT statement, however still
    accomplishes the task of running an INSERT statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly in a DML-related context, using the PostgreSQL [`Insert`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Insert
    "sqlalchemy.dialects.postgresql.Insert") construct to generate an “upsert”:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE618]'
  prefs: []
  type: TYPE_PRE
- en: 'The above statement renders as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE619]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.4.21.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*ctes` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: zero or more [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    constructs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Changed in version 2.0: Multiple CTE instances are accepted'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`nest_here` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: if True, the given CTE or CTEs will be rendered as though they specified the
    [`HasCTE.cte.nesting`](#sqlalchemy.sql.expression.HasCTE.cte.params.nesting "sqlalchemy.sql.expression.HasCTE.cte")
    flag to `True` when they were added to this [`HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE"). Assuming the given CTEs are not referenced
    in an outer-enclosing statement as well, the CTEs given should render at the level
    of this statement when this flag is given.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`HasCTE.cte.nesting`](#sqlalchemy.sql.expression.HasCTE.cte.params.nesting
    "sqlalchemy.sql.expression.HasCTE.cte")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE620]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE"),
    or Common Table Expression instance.
  prefs: []
  type: TYPE_NORMAL
- en: Common table expressions are a SQL standard whereby SELECT statements can draw
    upon secondary statements specified along with the primary statement, using a
    clause called “WITH”. Special semantics regarding UNION can also be employed to
    allow “recursive” queries, where a SELECT statement can draw upon the set of rows
    that have previously been selected.
  prefs: []
  type: TYPE_NORMAL
- en: CTEs can also be applied to DML constructs UPDATE, INSERT and DELETE on some
    databases, both as a source of CTE rows when combined with RETURNING, as well
    as a consumer of CTE rows.
  prefs: []
  type: TYPE_NORMAL
- en: SQLAlchemy detects [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    objects, which are treated similarly to [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") objects, as special elements to be delivered
    to the FROM clause of the statement as well as to a WITH clause at the top of
    the statement.
  prefs: []
  type: TYPE_NORMAL
- en: For special prefixes such as PostgreSQL “MATERIALIZED” and “NOT MATERIALIZED”,
    the `CTE.prefix_with()` method may be used to establish these.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.3.13: Added support for prefixes. In particular - MATERIALIZED
    and NOT MATERIALIZED.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name` – name given to the common table expression. Like [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias"), the name can be left as `None`
    in which case an anonymous symbol will be used at query compile time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`recursive` – if `True`, will render `WITH RECURSIVE`. A recursive common table
    expression is intended to be used in conjunction with UNION ALL in order to derive
    rows from those already selected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nesting` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: if `True`, will render the CTE locally to the statement in which it is referenced.
    For more complex scenarios, the [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") method using the [`HasCTE.add_cte.nest_here`](#sqlalchemy.sql.expression.HasCTE.add_cte.params.nest_here
    "sqlalchemy.sql.expression.HasCTE.add_cte") parameter may also be used to more
    carefully control the exact placement of a particular CTE.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 1.4.24.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte "sqlalchemy.sql.expression.HasCTE.add_cte")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The following examples include two from PostgreSQL’s documentation at [https://www.postgresql.org/docs/current/static/queries-with.html](https://www.postgresql.org/docs/current/static/queries-with.html),
    as well as additional examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example 1, non recursive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE621]'
  prefs: []
  type: TYPE_PRE
- en: 'Example 2, WITH RECURSIVE:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE622]'
  prefs: []
  type: TYPE_PRE
- en: 'Example 3, an upsert using UPDATE and INSERT with CTEs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE623]'
  prefs: []
  type: TYPE_PRE
- en: 'Example 4, Nesting CTE (SQLAlchemy 1.4.24 and above):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE624]'
  prefs: []
  type: TYPE_PRE
- en: 'The above query will render the second CTE nested inside the first, shown with
    inline parameters below as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE625]'
  prefs: []
  type: TYPE_PRE
- en: 'The same CTE can be set up using the [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") method as follows (SQLAlchemy 2.0
    and above):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE626]'
  prefs: []
  type: TYPE_PRE
- en: 'Example 5, Non-Linear CTE (SQLAlchemy 1.4.28 and above):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE627]'
  prefs: []
  type: TYPE_PRE
- en: 'The above query will render 2 UNIONs inside the recursive CTE:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE628]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.cte()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.cte "sqlalchemy.orm.Query.cte")
    - ORM version of [`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte "sqlalchemy.sql.expression.HasCTE.cte").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE629]'
  prefs: []
  type: TYPE_PRE
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[prefix_with()](#sqlalchemy.sql.expression.HasPrefixes.prefix_with)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE630]'
  prefs: []
  type: TYPE_PRE
- en: Add one or more expressions following the statement keyword, i.e. SELECT, INSERT,
    UPDATE, or DELETE. Generative.
  prefs: []
  type: TYPE_NORMAL
- en: This is used to support backend-specific prefix keywords such as those provided
    by MySQL.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE631]'
  prefs: []
  type: TYPE_PRE
- en: Multiple prefixes can be specified by multiple calls to [`HasPrefixes.prefix_with()`](#sqlalchemy.sql.expression.HasPrefixes.prefix_with
    "sqlalchemy.sql.expression.HasPrefixes.prefix_with").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*prefixes` – textual or [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") construct which will be rendered following
    the INSERT, UPDATE, or DELETE keyword.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dialect` – optional string dialect name which will limit rendering of this
    prefix to only that dialect.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE632]'
  prefs: []
  type: TYPE_PRE
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[suffix_with()](#sqlalchemy.sql.expression.HasSuffixes.suffix_with)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE633]'
  prefs: []
  type: TYPE_PRE
- en: Add one or more expressions following the statement as a whole.
  prefs: []
  type: TYPE_NORMAL
- en: This is used to support backend-specific suffix keywords on certain constructs.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE634]'
  prefs: []
  type: TYPE_PRE
- en: Multiple suffixes can be specified by multiple calls to [`HasSuffixes.suffix_with()`](#sqlalchemy.sql.expression.HasSuffixes.suffix_with
    "sqlalchemy.sql.expression.HasSuffixes.suffix_with").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*suffixes` – textual or [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") construct which will be rendered following
    the target clause.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dialect` – Optional string dialect name which will limit rendering of this
    suffix to only that dialect.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE635]'
  prefs: []
  type: TYPE_PRE
- en: Represent a `JOIN` construct between two [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") elements.
  prefs: []
  type: TYPE_NORMAL
- en: The public constructor function for [`Join`](#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") is the module-level [`join()`](#sqlalchemy.sql.expression.join
    "sqlalchemy.sql.expression.join") function, as well as the [`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join") method of any [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") (e.g. such as [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`join()`](#sqlalchemy.sql.expression.join "sqlalchemy.sql.expression.join")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join "sqlalchemy.sql.expression.FromClause.join")'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[__init__()](#sqlalchemy.sql.expression.Join.__init__), [description](#sqlalchemy.sql.expression.Join.description),
    [is_derived_from()](#sqlalchemy.sql.expression.Join.is_derived_from), [select()](#sqlalchemy.sql.expression.Join.select),
    [self_group()](#sqlalchemy.sql.expression.Join.self_group)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.expression.Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    (`sqlalchemy.sql.roles.DMLTableRole`, [`sqlalchemy.sql.expression.FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE636]'
  prefs: []
  type: TYPE_PRE
- en: Construct a new [`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join").
  prefs: []
  type: TYPE_NORMAL
- en: The usual entrypoint here is the [`join()`](#sqlalchemy.sql.expression.join
    "sqlalchemy.sql.expression.join") function or the [`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join") method of any [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE637]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE638]'
  prefs: []
  type: TYPE_PRE
- en: Return `True` if this [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    is ‘derived’ from the given `FromClause`.
  prefs: []
  type: TYPE_NORMAL
- en: An example would be an Alias of a Table is derived from that Table.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE639]'
  prefs: []
  type: TYPE_PRE
- en: Create a [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    from this [`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join").
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE640]'
  prefs: []
  type: TYPE_PRE
- en: 'The above will produce a SQL string resembling:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE641]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE642]'
  prefs: []
  type: TYPE_PRE
- en: Apply a ‘grouping’ to this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  prefs: []
  type: TYPE_NORMAL
- en: This method is overridden by subclasses to return a “grouping” construct, i.e.
    parenthesis. In particular it’s used by “binary” expressions to provide a grouping
    around themselves when placed into a larger expression, as well as by [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs when placed into the FROM clause
    of another [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select").
    (Note that subqueries should be normally created using the [`Select.alias()`](#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") method, as many platforms require nested
    SELECT statements to be named).
  prefs: []
  type: TYPE_NORMAL
- en: As expressions are composed together, the application of [`self_group()`](#sqlalchemy.sql.expression.Join.self_group
    "sqlalchemy.sql.expression.Join.self_group") is automatic - end-user code should
    never need to use this method directly. Note that SQLAlchemy’s clause constructs
    take operator precedence into account - so parenthesis might not be needed, for
    example, in an expression like `x OR (y AND z)` - AND takes precedence over OR.
  prefs: []
  type: TYPE_NORMAL
- en: The base [`self_group()`](#sqlalchemy.sql.expression.Join.self_group "sqlalchemy.sql.expression.Join.self_group")
    method of [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") just returns self.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE643]'
  prefs: []
  type: TYPE_PRE
- en: Represent a LATERAL subquery.
  prefs: []
  type: TYPE_NORMAL
- en: This object is constructed from the [`lateral()`](#sqlalchemy.sql.expression.lateral
    "sqlalchemy.sql.expression.lateral") module level function as well as the `FromClause.lateral()`
    method available on all [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    subclasses.
  prefs: []
  type: TYPE_NORMAL
- en: While LATERAL is part of the SQL standard, currently only more recent PostgreSQL
    versions provide support for this keyword.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[LATERAL correlation](../tutorial/data_select.html#tutorial-lateral-correlation)
    - overview of usage.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[inherit_cache](#sqlalchemy.sql.expression.Lateral.inherit_cache)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.expression.Lateral`](#sqlalchemy.sql.expression.Lateral
    "sqlalchemy.sql.expression.Lateral") (`sqlalchemy.sql.expression.FromClauseAlias`,
    `sqlalchemy.sql.expression.LateralFromClause`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE644]'
  prefs: []
  type: TYPE_PRE
- en: Indicate if this [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") instance should make use of the cache
    key generation scheme used by its immediate superclass.
  prefs: []
  type: TYPE_NORMAL
- en: The attribute defaults to `None`, which indicates that a construct has not yet
    taken into account whether or not its appropriate for it to participate in caching;
    this is functionally equivalent to setting the value to `False`, except that a
    warning is also emitted.
  prefs: []
  type: TYPE_NORMAL
- en: This flag can be set to `True` on a particular class, if the SQL that corresponds
    to the object does not change based on attributes which are local to this class,
    and not its superclass.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Enabling Caching Support for Custom Constructs](compiler.html#compilerext-caching)
    - General guideslines for setting the [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute for third-party
    or user defined SQL constructs.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE645]'
  prefs: []
  type: TYPE_PRE
- en: The base-most class for Core constructs that have some concept of columns that
    can represent rows.
  prefs: []
  type: TYPE_NORMAL
- en: While the SELECT statement and TABLE are the primary things we think of in this
    category, DML like INSERT, UPDATE and DELETE can also specify RETURNING which
    means they can be used in CTEs and other forms, and PostgreSQL has functions that
    return rows also.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[exported_columns](#sqlalchemy.sql.expression.ReturnsRows.exported_columns),
    [is_derived_from()](#sqlalchemy.sql.expression.ReturnsRows.is_derived_from)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.expression.ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows
    "sqlalchemy.sql.expression.ReturnsRows") (`sqlalchemy.sql.roles.ReturnsRowsRole`,
    `sqlalchemy.sql.expression.DQLDMLClauseElement`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE646]'
  prefs: []
  type: TYPE_PRE
- en: A [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") that represents the “exported” columns
    of this [`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows "sqlalchemy.sql.expression.ReturnsRows").
  prefs: []
  type: TYPE_NORMAL
- en: The “exported” columns represent the collection of [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") expressions that are rendered by this
    SQL construct. There are primary varieties which are the “FROM clause columns”
    of a FROM clause, such as a table, join, or subquery, the “SELECTed columns”,
    which are the columns in the “columns clause” of a SELECT statement, and the RETURNING
    columns in a DML statement..
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`FromClause.exported_columns`](#sqlalchemy.sql.expression.FromClause.exported_columns
    "sqlalchemy.sql.expression.FromClause.exported_columns")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`SelectBase.exported_columns`](#sqlalchemy.sql.expression.SelectBase.exported_columns
    "sqlalchemy.sql.expression.SelectBase.exported_columns")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE647]'
  prefs: []
  type: TYPE_PRE
- en: Return `True` if this [`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows
    "sqlalchemy.sql.expression.ReturnsRows") is ‘derived’ from the given [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: An example would be an Alias of a Table is derived from that Table.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE648]'
  prefs: []
  type: TYPE_PRE
- en: Represent a scalar subquery.
  prefs: []
  type: TYPE_NORMAL
- en: A [`ScalarSelect`](#sqlalchemy.sql.expression.ScalarSelect "sqlalchemy.sql.expression.ScalarSelect")
    is created by invoking the [`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery") method. The object then
    participates in other SQL expressions as a SQL column expression within the [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") hierarchy.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Scalar and Correlated Subqueries](../tutorial/data_select.html#tutorial-scalar-subquery)
    - in the 2.0 tutorial'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[correlate()](#sqlalchemy.sql.expression.ScalarSelect.correlate), [correlate_except()](#sqlalchemy.sql.expression.ScalarSelect.correlate_except),
    [inherit_cache](#sqlalchemy.sql.expression.ScalarSelect.inherit_cache), [self_group()](#sqlalchemy.sql.expression.ScalarSelect.self_group),
    [where()](#sqlalchemy.sql.expression.ScalarSelect.where)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.expression.ScalarSelect`](#sqlalchemy.sql.expression.ScalarSelect
    "sqlalchemy.sql.expression.ScalarSelect") (`sqlalchemy.sql.roles.InElementRole`,
    `sqlalchemy.sql.expression.Generative`, `sqlalchemy.sql.expression.GroupedElement`,
    [`sqlalchemy.sql.expression.ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE649]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`ScalarSelect`](#sqlalchemy.sql.expression.ScalarSelect "sqlalchemy.sql.expression.ScalarSelect")
    which will correlate the given FROM clauses to that of an enclosing [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select").
  prefs: []
  type: TYPE_NORMAL
- en: This method is mirrored from the [`Select.correlate()`](#sqlalchemy.sql.expression.Select.correlate
    "sqlalchemy.sql.expression.Select.correlate") method of the underlying [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select"). The method applies the :meth:_sql.Select.correlate`
    method, then returns a new [`ScalarSelect`](#sqlalchemy.sql.expression.ScalarSelect
    "sqlalchemy.sql.expression.ScalarSelect") against that statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4: Previously, the [`ScalarSelect.correlate()`](#sqlalchemy.sql.expression.ScalarSelect.correlate
    "sqlalchemy.sql.expression.ScalarSelect.correlate") method was only available
    from [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select").'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***fromclauses** – a list of one or more [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") constructs, or other compatible constructs
    (i.e. ORM-mapped classes) to become part of the correlate collection.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ScalarSelect.correlate_except()`](#sqlalchemy.sql.expression.ScalarSelect.correlate_except
    "sqlalchemy.sql.expression.ScalarSelect.correlate_except")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Scalar and Correlated Subqueries](../tutorial/data_select.html#tutorial-scalar-subquery)
    - in the 2.0 tutorial'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE650]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`ScalarSelect`](#sqlalchemy.sql.expression.ScalarSelect "sqlalchemy.sql.expression.ScalarSelect")
    which will omit the given FROM clauses from the auto-correlation process.
  prefs: []
  type: TYPE_NORMAL
- en: This method is mirrored from the [`Select.correlate_except()`](#sqlalchemy.sql.expression.Select.correlate_except
    "sqlalchemy.sql.expression.Select.correlate_except") method of the underlying
    [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select").
    The method applies the :meth:_sql.Select.correlate_except` method, then returns
    a new [`ScalarSelect`](#sqlalchemy.sql.expression.ScalarSelect "sqlalchemy.sql.expression.ScalarSelect")
    against that statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4: Previously, the [`ScalarSelect.correlate_except()`](#sqlalchemy.sql.expression.ScalarSelect.correlate_except
    "sqlalchemy.sql.expression.ScalarSelect.correlate_except") method was only available
    from [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select").'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***fromclauses** – a list of one or more [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") constructs, or other compatible constructs
    (i.e. ORM-mapped classes) to become part of the correlate-exception collection.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ScalarSelect.correlate()`](#sqlalchemy.sql.expression.ScalarSelect.correlate
    "sqlalchemy.sql.expression.ScalarSelect.correlate")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Scalar and Correlated Subqueries](../tutorial/data_select.html#tutorial-scalar-subquery)
    - in the 2.0 tutorial'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE651]'
  prefs: []
  type: TYPE_PRE
- en: Indicate if this [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") instance should make use of the cache
    key generation scheme used by its immediate superclass.
  prefs: []
  type: TYPE_NORMAL
- en: The attribute defaults to `None`, which indicates that a construct has not yet
    taken into account whether or not its appropriate for it to participate in caching;
    this is functionally equivalent to setting the value to `False`, except that a
    warning is also emitted.
  prefs: []
  type: TYPE_NORMAL
- en: This flag can be set to `True` on a particular class, if the SQL that corresponds
    to the object does not change based on attributes which are local to this class,
    and not its superclass.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Enabling Caching Support for Custom Constructs](compiler.html#compilerext-caching)
    - General guideslines for setting the [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute for third-party
    or user defined SQL constructs.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE652]'
  prefs: []
  type: TYPE_PRE
- en: Apply a ‘grouping’ to this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  prefs: []
  type: TYPE_NORMAL
- en: This method is overridden by subclasses to return a “grouping” construct, i.e.
    parenthesis. In particular it’s used by “binary” expressions to provide a grouping
    around themselves when placed into a larger expression, as well as by [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs when placed into the FROM clause
    of another [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select").
    (Note that subqueries should be normally created using the [`Select.alias()`](#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") method, as many platforms require nested
    SELECT statements to be named).
  prefs: []
  type: TYPE_NORMAL
- en: As expressions are composed together, the application of [`self_group()`](#sqlalchemy.sql.expression.ScalarSelect.self_group
    "sqlalchemy.sql.expression.ScalarSelect.self_group") is automatic - end-user code
    should never need to use this method directly. Note that SQLAlchemy’s clause constructs
    take operator precedence into account - so parenthesis might not be needed, for
    example, in an expression like `x OR (y AND z)` - AND takes precedence over OR.
  prefs: []
  type: TYPE_NORMAL
- en: The base [`self_group()`](#sqlalchemy.sql.expression.ScalarSelect.self_group
    "sqlalchemy.sql.expression.ScalarSelect.self_group") method of [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") just returns self.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE653]'
  prefs: []
  type: TYPE_PRE
- en: Apply a WHERE clause to the SELECT statement referred to by this [`ScalarSelect`](#sqlalchemy.sql.expression.ScalarSelect
    "sqlalchemy.sql.expression.ScalarSelect").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE654]'
  prefs: []
  type: TYPE_PRE
- en: Represents a `SELECT` statement.
  prefs: []
  type: TYPE_NORMAL
- en: The [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    object is normally constructed using the [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") function. See that function for details.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Using SELECT Statements](../tutorial/data_select.html#tutorial-selecting-data)
    - in the 2.0 tutorial'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[__init__()](#sqlalchemy.sql.expression.Select.__init__), [add_columns()](#sqlalchemy.sql.expression.Select.add_columns),
    [add_cte()](#sqlalchemy.sql.expression.Select.add_cte), [alias()](#sqlalchemy.sql.expression.Select.alias),
    [as_scalar()](#sqlalchemy.sql.expression.Select.as_scalar), [c](#sqlalchemy.sql.expression.Select.c),
    [column()](#sqlalchemy.sql.expression.Select.column), [column_descriptions](#sqlalchemy.sql.expression.Select.column_descriptions),
    [columns_clause_froms](#sqlalchemy.sql.expression.Select.columns_clause_froms),
    [correlate()](#sqlalchemy.sql.expression.Select.correlate), [correlate_except()](#sqlalchemy.sql.expression.Select.correlate_except),
    [corresponding_column()](#sqlalchemy.sql.expression.Select.corresponding_column),
    [cte()](#sqlalchemy.sql.expression.Select.cte), [distinct()](#sqlalchemy.sql.expression.Select.distinct),
    [except_()](#sqlalchemy.sql.expression.Select.except_), [except_all()](#sqlalchemy.sql.expression.Select.except_all),
    [execution_options()](#sqlalchemy.sql.expression.Select.execution_options), [exists()](#sqlalchemy.sql.expression.Select.exists),
    [exported_columns](#sqlalchemy.sql.expression.Select.exported_columns), [fetch()](#sqlalchemy.sql.expression.Select.fetch),
    [filter()](#sqlalchemy.sql.expression.Select.filter), [filter_by()](#sqlalchemy.sql.expression.Select.filter_by),
    [from_statement()](#sqlalchemy.sql.expression.Select.from_statement), [froms](#sqlalchemy.sql.expression.Select.froms),
    [get_children()](#sqlalchemy.sql.expression.Select.get_children), [get_execution_options()](#sqlalchemy.sql.expression.Select.get_execution_options),
    [get_final_froms()](#sqlalchemy.sql.expression.Select.get_final_froms), [get_label_style()](#sqlalchemy.sql.expression.Select.get_label_style),
    [group_by()](#sqlalchemy.sql.expression.Select.group_by), [having()](#sqlalchemy.sql.expression.Select.having),
    [inherit_cache](#sqlalchemy.sql.expression.Select.inherit_cache), [inner_columns](#sqlalchemy.sql.expression.Select.inner_columns),
    [intersect()](#sqlalchemy.sql.expression.Select.intersect), [intersect_all()](#sqlalchemy.sql.expression.Select.intersect_all),
    [is_derived_from()](#sqlalchemy.sql.expression.Select.is_derived_from), [join()](#sqlalchemy.sql.expression.Select.join),
    [join_from()](#sqlalchemy.sql.expression.Select.join_from), [label()](#sqlalchemy.sql.expression.Select.label),
    [lateral()](#sqlalchemy.sql.expression.Select.lateral), [limit()](#sqlalchemy.sql.expression.Select.limit),
    [offset()](#sqlalchemy.sql.expression.Select.offset), [options()](#sqlalchemy.sql.expression.Select.options),
    [order_by()](#sqlalchemy.sql.expression.Select.order_by), [outerjoin()](#sqlalchemy.sql.expression.Select.outerjoin),
    [outerjoin_from()](#sqlalchemy.sql.expression.Select.outerjoin_from), [prefix_with()](#sqlalchemy.sql.expression.Select.prefix_with),
    [reduce_columns()](#sqlalchemy.sql.expression.Select.reduce_columns), [replace_selectable()](#sqlalchemy.sql.expression.Select.replace_selectable),
    [scalar_subquery()](#sqlalchemy.sql.expression.Select.scalar_subquery), [select()](#sqlalchemy.sql.expression.Select.select),
    [select_from()](#sqlalchemy.sql.expression.Select.select_from), [selected_columns](#sqlalchemy.sql.expression.Select.selected_columns),
    [self_group()](#sqlalchemy.sql.expression.Select.self_group), [set_label_style()](#sqlalchemy.sql.expression.Select.set_label_style),
    [slice()](#sqlalchemy.sql.expression.Select.slice), [subquery()](#sqlalchemy.sql.expression.Select.subquery),
    [suffix_with()](#sqlalchemy.sql.expression.Select.suffix_with), [union()](#sqlalchemy.sql.expression.Select.union),
    [union_all()](#sqlalchemy.sql.expression.Select.union_all), [where()](#sqlalchemy.sql.expression.Select.where),
    [whereclause](#sqlalchemy.sql.expression.Select.whereclause), [with_for_update()](#sqlalchemy.sql.expression.Select.with_for_update),
    [with_hint()](#sqlalchemy.sql.expression.Select.with_hint), [with_only_columns()](#sqlalchemy.sql.expression.Select.with_only_columns),
    [with_statement_hint()](#sqlalchemy.sql.expression.Select.with_statement_hint)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.expression.Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") ([`sqlalchemy.sql.expression.HasPrefixes`](#sqlalchemy.sql.expression.HasPrefixes
    "sqlalchemy.sql.expression.HasPrefixes"), [`sqlalchemy.sql.expression.HasSuffixes`](#sqlalchemy.sql.expression.HasSuffixes
    "sqlalchemy.sql.expression.HasSuffixes"), `sqlalchemy.sql.expression.HasHints`,
    `sqlalchemy.sql.expression.HasCompileState`, `sqlalchemy.sql.expression._SelectFromElements`,
    [`sqlalchemy.sql.expression.GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect"), `sqlalchemy.sql.expression.TypedReturnsRows`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE655]'
  prefs: []
  type: TYPE_PRE
- en: Construct a new [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select").
  prefs: []
  type: TYPE_NORMAL
- en: The public constructor for [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    is the [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE656]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    construct with the given entities appended to its columns clause.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE657]'
  prefs: []
  type: TYPE_PRE
- en: The original expressions in the columns clause remain in place. To replace the
    original expressions with new ones, see the method [`Select.with_only_columns()`](#sqlalchemy.sql.expression.Select.with_only_columns
    "sqlalchemy.sql.expression.Select.with_only_columns").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***entities** – column, table, or other entity expressions to be added to the
    columns clause'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.with_only_columns()`](#sqlalchemy.sql.expression.Select.with_only_columns
    "sqlalchemy.sql.expression.Select.with_only_columns") - replaces existing expressions
    rather than appending.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Selecting Multiple ORM Entities Simultaneously](../orm/queryguide/select.html#orm-queryguide-select-multiple-entities)
    - ORM-centric example'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE658]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") *method of* [`HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE")'
  prefs: []
  type: TYPE_NORMAL
- en: Add one or more [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    constructs to this statement.
  prefs: []
  type: TYPE_NORMAL
- en: This method will associate the given [`CTE`](#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE") constructs with the parent statement such that
    they will each be unconditionally rendered in the WITH clause of the final statement,
    even if not referenced elsewhere within the statement or any sub-selects.
  prefs: []
  type: TYPE_NORMAL
- en: The optional [`HasCTE.add_cte.nest_here`](#sqlalchemy.sql.expression.HasCTE.add_cte.params.nest_here
    "sqlalchemy.sql.expression.HasCTE.add_cte") parameter when set to True will have
    the effect that each given [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    will render in a WITH clause rendered directly along with this statement, rather
    than being moved to the top of the ultimate rendered statement, even if this statement
    is rendered as a subquery within a larger statement.
  prefs: []
  type: TYPE_NORMAL
- en: This method has two general uses. One is to embed CTE statements that serve
    some purpose without being referenced explicitly, such as the use case of embedding
    a DML statement such as an INSERT or UPDATE as a CTE inline with a primary statement
    that may draw from its results indirectly. The other is to provide control over
    the exact placement of a particular series of CTE constructs that should remain
    rendered directly in terms of a particular statement that may be nested in a larger
    statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE659]'
  prefs: []
  type: TYPE_PRE
- en: 'Would render:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE660]'
  prefs: []
  type: TYPE_PRE
- en: Above, the “anon_1” CTE is not referenced in the SELECT statement, however still
    accomplishes the task of running an INSERT statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly in a DML-related context, using the PostgreSQL [`Insert`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Insert
    "sqlalchemy.dialects.postgresql.Insert") construct to generate an “upsert”:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE661]'
  prefs: []
  type: TYPE_PRE
- en: 'The above statement renders as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE662]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.4.21.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*ctes` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: zero or more [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    constructs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Changed in version 2.0: Multiple CTE instances are accepted'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`nest_here` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: if True, the given CTE or CTEs will be rendered as though they specified the
    [`HasCTE.cte.nesting`](#sqlalchemy.sql.expression.HasCTE.cte.params.nesting "sqlalchemy.sql.expression.HasCTE.cte")
    flag to `True` when they were added to this [`HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE"). Assuming the given CTEs are not referenced
    in an outer-enclosing statement as well, the CTEs given should render at the level
    of this statement when this flag is given.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`HasCTE.cte.nesting`](#sqlalchemy.sql.expression.HasCTE.cte.params.nesting
    "sqlalchemy.sql.expression.HasCTE.cte")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE663]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`SelectBase.alias()`](#sqlalchemy.sql.expression.SelectBase.alias
    "sqlalchemy.sql.expression.SelectBase.alias") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a named subquery against this [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase").
  prefs: []
  type: TYPE_NORMAL
- en: For a [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")
    (as opposed to a [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")),
    this returns a [`Subquery`](#sqlalchemy.sql.expression.Subquery "sqlalchemy.sql.expression.Subquery")
    object which behaves mostly the same as the [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") object that is used with a [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The [`SelectBase.alias()`](#sqlalchemy.sql.expression.SelectBase.alias
    "sqlalchemy.sql.expression.SelectBase.alias") method is now a synonym for the
    [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery "sqlalchemy.sql.expression.SelectBase.subquery")
    method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE664]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`SelectBase.as_scalar()`](#sqlalchemy.sql.expression.SelectBase.as_scalar
    "sqlalchemy.sql.expression.SelectBase.as_scalar") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.4: The [`SelectBase.as_scalar()`](#sqlalchemy.sql.expression.SelectBase.as_scalar
    "sqlalchemy.sql.expression.SelectBase.as_scalar") method is deprecated and will
    be removed in a future release. Please refer to [`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE665]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`SelectBase.c`](#sqlalchemy.sql.expression.SelectBase.c
    "sqlalchemy.sql.expression.SelectBase.c") *attribute of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.4: The [`SelectBase.c`](#sqlalchemy.sql.expression.SelectBase.c
    "sqlalchemy.sql.expression.SelectBase.c") and `SelectBase.columns` attributes
    are deprecated and will be removed in a future release; these attributes implicitly
    create a subquery that should be explicit. Please call [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") first in order to create a subquery,
    which then contains this attribute. To access the columns that this SELECT object
    SELECTs from, use the [`SelectBase.selected_columns`](#sqlalchemy.sql.expression.SelectBase.selected_columns
    "sqlalchemy.sql.expression.SelectBase.selected_columns") attribute.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE666]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    construct with the given column expression added to its columns clause.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.4: The [`Select.column()`](#sqlalchemy.sql.expression.Select.column
    "sqlalchemy.sql.expression.Select.column") method is deprecated and will be removed
    in a future release. Please use [`Select.add_columns()`](#sqlalchemy.sql.expression.Select.add_columns
    "sqlalchemy.sql.expression.Select.add_columns")'
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE667]'
  prefs: []
  type: TYPE_PRE
- en: See the documentation for [`Select.with_only_columns()`](#sqlalchemy.sql.expression.Select.with_only_columns
    "sqlalchemy.sql.expression.Select.with_only_columns") for guidelines on adding
    /replacing the columns of a [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE668]'
  prefs: []
  type: TYPE_PRE
- en: Return a [plugin-enabled](../glossary.html#term-plugin-enabled) ‘column descriptions’
    structure referring to the columns which are SELECTed by this statement.
  prefs: []
  type: TYPE_NORMAL
- en: This attribute is generally useful when using the ORM, as an extended structure
    which includes information about mapped entities is returned. The section [Inspecting
    entities and columns from ORM-enabled SELECT and DML statements](../orm/queryguide/api.html#queryguide-inspection)
    contains more background.
  prefs: []
  type: TYPE_NORMAL
- en: 'For a Core-only statement, the structure returned by this accessor is derived
    from the same objects that are returned by the [`Select.selected_columns`](#sqlalchemy.sql.expression.Select.selected_columns
    "sqlalchemy.sql.expression.Select.selected_columns") accessor, formatted as a
    list of dictionaries which contain the keys `name`, `type` and `expr`, which indicate
    the column expressions to be selected:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE669]'
  prefs: []
  type: TYPE_PRE
- en: 'Changed in version 1.4.33: The [`Select.column_descriptions`](#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions") attribute returns a structure
    for a Core-only set of entities, not just ORM-only entities.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`UpdateBase.entity_description`](dml.html#sqlalchemy.sql.expression.UpdateBase.entity_description
    "sqlalchemy.sql.expression.UpdateBase.entity_description") - entity information
    for an [`insert()`](dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert"),
    [`update()`](dml.html#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update"),
    or [`delete()`](dml.html#sqlalchemy.sql.expression.delete "sqlalchemy.sql.expression.delete")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Inspecting entities and columns from ORM-enabled SELECT and DML statements](../orm/queryguide/api.html#queryguide-inspection)
    - ORM background'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE670]'
  prefs: []
  type: TYPE_PRE
- en: Return the set of [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    objects implied by the columns clause of this SELECT statement.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.23.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.froms`](#sqlalchemy.sql.expression.Select.froms "sqlalchemy.sql.expression.Select.froms")
    - “final” FROM list taking the full statement into account'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.with_only_columns()`](#sqlalchemy.sql.expression.Select.with_only_columns
    "sqlalchemy.sql.expression.Select.with_only_columns") - makes use of this collection
    to set up a new FROM list'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE671]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    which will correlate the given FROM clauses to that of an enclosing [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select").
  prefs: []
  type: TYPE_NORMAL
- en: Calling this method turns off the [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") object’s default behavior of “auto-correlation”.
    Normally, FROM elements which appear in a [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") that encloses this one via its [WHERE clause](../glossary.html#term-WHERE-clause),
    ORDER BY, HAVING or [columns clause](../glossary.html#term-columns-clause) will
    be omitted from this [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    object’s [FROM clause](../glossary.html#term-FROM-clause). Setting an explicit
    correlation collection using the [`Select.correlate()`](#sqlalchemy.sql.expression.Select.correlate
    "sqlalchemy.sql.expression.Select.correlate") method provides a fixed list of
    FROM objects that can potentially take place in this process.
  prefs: []
  type: TYPE_NORMAL
- en: When [`Select.correlate()`](#sqlalchemy.sql.expression.Select.correlate "sqlalchemy.sql.expression.Select.correlate")
    is used to apply specific FROM clauses for correlation, the FROM elements become
    candidates for correlation regardless of how deeply nested this [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") object is, relative to an enclosing [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") which refers to the same FROM object. This
    is in contrast to the behavior of “auto-correlation” which only correlates to
    an immediate enclosing [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select").
    Multi-level correlation ensures that the link between enclosed and enclosing [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") is always via at least one WHERE/ORDER BY/HAVING/columns
    clause in order for correlation to take place.
  prefs: []
  type: TYPE_NORMAL
- en: If `None` is passed, the [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    object will correlate none of its FROM entries, and all will render unconditionally
    in the local FROM clause.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***fromclauses** – one or more [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") or other FROM-compatible construct such
    as an ORM mapped entity to become part of the correlate collection; alternatively
    pass a single value `None` to remove all existing correlations.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.correlate_except()`](#sqlalchemy.sql.expression.Select.correlate_except
    "sqlalchemy.sql.expression.Select.correlate_except")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Scalar and Correlated Subqueries](../tutorial/data_select.html#tutorial-scalar-subquery)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE672]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    which will omit the given FROM clauses from the auto-correlation process.
  prefs: []
  type: TYPE_NORMAL
- en: Calling [`Select.correlate_except()`](#sqlalchemy.sql.expression.Select.correlate_except
    "sqlalchemy.sql.expression.Select.correlate_except") turns off the [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") object’s default behavior of “auto-correlation”
    for the given FROM elements. An element specified here will unconditionally appear
    in the FROM list, while all other FROM elements remain subject to normal auto-correlation
    behaviors.
  prefs: []
  type: TYPE_NORMAL
- en: If `None` is passed, or no arguments are passed, the [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") object will correlate all of its FROM entries.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***fromclauses** – a list of one or more [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") constructs, or other compatible constructs
    (i.e. ORM-mapped classes) to become part of the correlate-exception collection.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.correlate()`](#sqlalchemy.sql.expression.Select.correlate "sqlalchemy.sql.expression.Select.correlate")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Scalar and Correlated Subqueries](../tutorial/data_select.html#tutorial-scalar-subquery)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE673]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Selectable.corresponding_column()`](#sqlalchemy.sql.expression.Selectable.corresponding_column
    "sqlalchemy.sql.expression.Selectable.corresponding_column") *method of* [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
  prefs: []
  type: TYPE_NORMAL
- en: Given a [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"), return the exported [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") object from the [`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") collection of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable") which corresponds to that original [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") via a common ancestor column.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`column` – the target [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") to be matched.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`require_embedded` – only return corresponding columns for the given [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"), if the given [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") is actually present within a sub-element
    of this [`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable").
    Normally the column will match if it merely shares a common ancestor with one
    of the exported columns of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") - the [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") that is used for the operation.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnCollection.corresponding_column()`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection.corresponding_column
    "sqlalchemy.sql.expression.ColumnCollection.corresponding_column") - implementation
    method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE674]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte
    "sqlalchemy.sql.expression.HasCTE.cte") *method of* [`HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a new [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE"),
    or Common Table Expression instance.
  prefs: []
  type: TYPE_NORMAL
- en: Common table expressions are a SQL standard whereby SELECT statements can draw
    upon secondary statements specified along with the primary statement, using a
    clause called “WITH”. Special semantics regarding UNION can also be employed to
    allow “recursive” queries, where a SELECT statement can draw upon the set of rows
    that have previously been selected.
  prefs: []
  type: TYPE_NORMAL
- en: CTEs can also be applied to DML constructs UPDATE, INSERT and DELETE on some
    databases, both as a source of CTE rows when combined with RETURNING, as well
    as a consumer of CTE rows.
  prefs: []
  type: TYPE_NORMAL
- en: SQLAlchemy detects [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    objects, which are treated similarly to [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") objects, as special elements to be delivered
    to the FROM clause of the statement as well as to a WITH clause at the top of
    the statement.
  prefs: []
  type: TYPE_NORMAL
- en: For special prefixes such as PostgreSQL “MATERIALIZED” and “NOT MATERIALIZED”,
    the `CTE.prefix_with()` method may be used to establish these.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.3.13: Added support for prefixes. In particular - MATERIALIZED
    and NOT MATERIALIZED.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name` – name given to the common table expression. Like [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias"), the name can be left as `None`
    in which case an anonymous symbol will be used at query compile time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`recursive` – if `True`, will render `WITH RECURSIVE`. A recursive common table
    expression is intended to be used in conjunction with UNION ALL in order to derive
    rows from those already selected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nesting` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: if `True`, will render the CTE locally to the statement in which it is referenced.
    For more complex scenarios, the [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") method using the [`HasCTE.add_cte.nest_here`](#sqlalchemy.sql.expression.HasCTE.add_cte.params.nest_here
    "sqlalchemy.sql.expression.HasCTE.add_cte") parameter may also be used to more
    carefully control the exact placement of a particular CTE.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 1.4.24.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte "sqlalchemy.sql.expression.HasCTE.add_cte")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The following examples include two from PostgreSQL’s documentation at [https://www.postgresql.org/docs/current/static/queries-with.html](https://www.postgresql.org/docs/current/static/queries-with.html),
    as well as additional examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example 1, non recursive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE675]'
  prefs: []
  type: TYPE_PRE
- en: 'Example 2, WITH RECURSIVE:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE676]'
  prefs: []
  type: TYPE_PRE
- en: 'Example 3, an upsert using UPDATE and INSERT with CTEs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE677]'
  prefs: []
  type: TYPE_PRE
- en: 'Example 4, Nesting CTE (SQLAlchemy 1.4.24 and above):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE678]'
  prefs: []
  type: TYPE_PRE
- en: 'The above query will render the second CTE nested inside the first, shown with
    inline parameters below as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE679]'
  prefs: []
  type: TYPE_PRE
- en: 'The same CTE can be set up using the [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") method as follows (SQLAlchemy 2.0
    and above):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE680]'
  prefs: []
  type: TYPE_PRE
- en: 'Example 5, Non-Linear CTE (SQLAlchemy 1.4.28 and above):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE681]'
  prefs: []
  type: TYPE_PRE
- en: 'The above query will render 2 UNIONs inside the recursive CTE:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE682]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.cte()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.cte "sqlalchemy.orm.Query.cte")
    - ORM version of [`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte "sqlalchemy.sql.expression.HasCTE.cte").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE683]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    construct which will apply DISTINCT to the SELECT statement overall.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE684]'
  prefs: []
  type: TYPE_PRE
- en: 'The above would produce an statement resembling:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE685]'
  prefs: []
  type: TYPE_PRE
- en: The method also accepts an `*expr` parameter which produces the PostgreSQL dialect-specific
    `DISTINCT ON` expression. Using this parameter on other backends which don’t support
    this syntax will raise an error.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***expr** –'
  prefs: []
  type: TYPE_NORMAL
- en: optional column expressions. When present, the PostgreSQL dialect will render
    a `DISTINCT ON (<expressions>)` construct. A deprecation warning and/or [`CompileError`](exceptions.html#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError") will be raised on other backends.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.4: Using *expr in other dialects is deprecated and
    will raise [`CompileError`](exceptions.html#sqlalchemy.exc.CompileError "sqlalchemy.exc.CompileError")
    in a future version.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE686]'
  prefs: []
  type: TYPE_PRE
- en: Return a SQL `EXCEPT` of this select() construct against the given selectable
    provided as positional arguments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***other** –'
  prefs: []
  type: TYPE_NORMAL
- en: one or more elements with which to create a UNION.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4.28: multiple elements are now accepted.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE687]'
  prefs: []
  type: TYPE_PRE
- en: Return a SQL `EXCEPT ALL` of this select() construct against the given selectables
    provided as positional arguments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***other** –'
  prefs: []
  type: TYPE_NORMAL
- en: one or more elements with which to create a UNION.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4.28: multiple elements are now accepted.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE688]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") *method of* [`Executable`](#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")'
  prefs: []
  type: TYPE_NORMAL
- en: Set non-SQL options for the statement which take effect during execution.
  prefs: []
  type: TYPE_NORMAL
- en: Execution options can be set at many scopes, including per-statement, per-connection,
    or per execution, using methods such as [`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") and parameters which accept
    a dictionary of options such as [`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute") and [`Session.execute.execution_options`](../orm/session_api.html#sqlalchemy.orm.Session.execute.params.execution_options
    "sqlalchemy.orm.Session.execute").
  prefs: []
  type: TYPE_NORMAL
- en: The primary characteristic of an execution option, as opposed to other kinds
    of options such as ORM loader options, is that **execution options never affect
    the compiled SQL of a query, only things that affect how the SQL statement itself
    is invoked or how results are fetched**. That is, execution options are not part
    of what’s accommodated by SQL compilation nor are they considered part of the
    cached state of a statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") method is [generative](../glossary.html#term-generative),
    as is the case for the method as applied to the [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") and [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") objects, which means when the method is called, a copy
    of the object is returned, which applies the given parameters to that new copy,
    but leaves the original unchanged:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE689]'
  prefs: []
  type: TYPE_PRE
- en: An exception to this behavior is the [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object, where the [`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") method is explicitly **not**
    generative.
  prefs: []
  type: TYPE_NORMAL
- en: 'The kinds of options that may be passed to [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") and other related methods
    and parameter dictionaries include parameters that are explicitly consumed by
    SQLAlchemy Core or ORM, as well as arbitrary keyword arguments not defined by
    SQLAlchemy, which means the methods and/or parameter dictionaries may be used
    for user-defined parameters that interact with custom code, which may access the
    parameters using methods such as [`Executable.get_execution_options()`](#sqlalchemy.sql.expression.Executable.get_execution_options
    "sqlalchemy.sql.expression.Executable.get_execution_options") and [`Connection.get_execution_options()`](connections.html#sqlalchemy.engine.Connection.get_execution_options
    "sqlalchemy.engine.Connection.get_execution_options"), or within selected event
    hooks using a dedicated `execution_options` event parameter such as [`ConnectionEvents.before_execute.execution_options`](events.html#sqlalchemy.events.ConnectionEvents.before_execute.params.execution_options
    "sqlalchemy.events.ConnectionEvents.before_execute") or [`ORMExecuteState.execution_options`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.execution_options
    "sqlalchemy.orm.ORMExecuteState.execution_options"), e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE690]'
  prefs: []
  type: TYPE_PRE
- en: 'Within the scope of options that are explicitly recognized by SQLAlchemy, most
    apply to specific classes of objects and not others. The most common execution
    options include:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Connection.execution_options.isolation_level`](connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") - sets the isolation level for
    a connection or a class of connections via an [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"). This option is accepted only by [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") or [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Connection.execution_options.stream_results`](connections.html#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") - indicates results should be
    fetched using a server side cursor; this option is accepted by [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"), by the [`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute") parameter on [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute"), and additionally by [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") on a SQL statement object,
    as well as by ORM constructs like [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Connection.execution_options.compiled_cache`](connections.html#sqlalchemy.engine.Connection.execution_options.params.compiled_cache
    "sqlalchemy.engine.Connection.execution_options") - indicates a dictionary that
    will serve as the [SQL compilation cache](connections.html#sql-caching) for a
    [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    or [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine"),
    as well as for ORM methods like [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute"). Can be passed as `None` to disable caching
    for statements. This option is not accepted by [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") as it is inadvisable
    to carry along a compilation cache within a statement object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Connection.execution_options.schema_translate_map`](connections.html#sqlalchemy.engine.Connection.execution_options.params.schema_translate_map
    "sqlalchemy.engine.Connection.execution_options") - a mapping of schema names
    used by the [Schema Translate Map](connections.html#schema-translating) feature,
    accepted by [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine"),
    [`Executable`](#sqlalchemy.sql.expression.Executable "sqlalchemy.sql.expression.Executable"),
    as well as by ORM constructs like [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.execute.execution_options`](../orm/session_api.html#sqlalchemy.orm.Session.execute.params.execution_options
    "sqlalchemy.orm.Session.execute")'
  prefs: []
  type: TYPE_NORMAL
- en: '[ORM Execution Options](../orm/queryguide/api.html#orm-queryguide-execution-options)
    - documentation on all ORM-specific execution options'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE691]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`SelectBase.exists()`](#sqlalchemy.sql.expression.SelectBase.exists
    "sqlalchemy.sql.expression.SelectBase.exists") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  prefs: []
  type: TYPE_NORMAL
- en: Return an [`Exists`](#sqlalchemy.sql.expression.Exists "sqlalchemy.sql.expression.Exists")
    representation of this selectable, which can be used as a column expression.
  prefs: []
  type: TYPE_NORMAL
- en: The returned object is an instance of [`Exists`](#sqlalchemy.sql.expression.Exists
    "sqlalchemy.sql.expression.Exists").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`exists()`](#sqlalchemy.sql.expression.exists "sqlalchemy.sql.expression.exists")'
  prefs: []
  type: TYPE_NORMAL
- en: '[EXISTS subqueries](../tutorial/data_select.html#tutorial-exists) - in the
    [2.0 style](../glossary.html#term-2.0-style) tutorial.'
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE692]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`SelectBase.exported_columns`](#sqlalchemy.sql.expression.SelectBase.exported_columns
    "sqlalchemy.sql.expression.SelectBase.exported_columns") *attribute of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  prefs: []
  type: TYPE_NORMAL
- en: A [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") that represents the “exported” columns
    of this [`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable"),
    not including [`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause") constructs.
  prefs: []
  type: TYPE_NORMAL
- en: The “exported” columns for a [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase") object are synonymous with the [`SelectBase.selected_columns`](#sqlalchemy.sql.expression.SelectBase.selected_columns
    "sqlalchemy.sql.expression.SelectBase.selected_columns") collection.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.exported_columns`](#sqlalchemy.sql.expression.Select.exported_columns
    "sqlalchemy.sql.expression.Select.exported_columns")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`FromClause.exported_columns`](#sqlalchemy.sql.expression.FromClause.exported_columns
    "sqlalchemy.sql.expression.FromClause.exported_columns")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE693]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a new selectable with the given FETCH FIRST criterion applied.
  prefs: []
  type: TYPE_NORMAL
- en: This is a numeric value which usually renders as `FETCH {FIRST | NEXT} [ count
    ] {ROW | ROWS} {ONLY | WITH TIES}` expression in the resulting select. This functionality
    is is currently implemented for Oracle, PostgreSQL, MSSQL.
  prefs: []
  type: TYPE_NORMAL
- en: Use [`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset") to specify the offset.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The [`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch") method will replace any clause
    applied with [`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit").
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`count` – an integer COUNT parameter, or a SQL expression that provides an
    integer result. When `percent=True` this will represent the percentage of rows
    to return, not the absolute value. Pass `None` to reset it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`with_ties` – When `True`, the WITH TIES option is used to return any additional
    rows that tie for the last place in the result set according to the `ORDER BY`
    clause. The `ORDER BY` may be mandatory in this case. Defaults to `False`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`percent` – When `True`, `count` represents the percentage of the total number
    of selected rows to return. Defaults to `False`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE694]'
  prefs: []
  type: TYPE_PRE
- en: A synonym for the [`Select.where()`](#sqlalchemy.sql.expression.Select.where
    "sqlalchemy.sql.expression.Select.where") method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE695]'
  prefs: []
  type: TYPE_PRE
- en: apply the given filtering criterion as a WHERE clause to this select.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE696]'
  prefs: []
  type: TYPE_PRE
- en: Apply the columns which this [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    would select onto another statement.
  prefs: []
  type: TYPE_NORMAL
- en: This operation is [plugin-specific](../glossary.html#term-plugin-specific) and
    will raise a not supported exception if this [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") does not select from plugin-enabled entities.
  prefs: []
  type: TYPE_NORMAL
- en: The statement is typically either a [`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") or [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct, and should return the set of columns
    appropriate to the entities represented by this [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Getting ORM Results from Textual Statements](../orm/queryguide/select.html#orm-queryguide-selecting-text)
    - usage examples in the ORM Querying Guide'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE697]'
  prefs: []
  type: TYPE_PRE
- en: Return the displayed list of [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.4.23: The [`Select.froms`](#sqlalchemy.sql.expression.Select.froms
    "sqlalchemy.sql.expression.Select.froms") attribute is moved to the [`Select.get_final_froms()`](#sqlalchemy.sql.expression.Select.get_final_froms
    "sqlalchemy.sql.expression.Select.get_final_froms") method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE698]'
  prefs: []
  type: TYPE_PRE
- en: Return immediate child `HasTraverseInternals` elements of this `HasTraverseInternals`.
  prefs: []
  type: TYPE_NORMAL
- en: This is used for visit traversal.
  prefs: []
  type: TYPE_NORMAL
- en: '**kw may contain flags that change the collection that is returned, for example
    to return a subset of items in order to cut down on larger traversals, or to return
    child items from a different context (such as schema-level collections instead
    of clause-level).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE699]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Executable.get_execution_options()`](#sqlalchemy.sql.expression.Executable.get_execution_options
    "sqlalchemy.sql.expression.Executable.get_execution_options") *method of* [`Executable`](#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")'
  prefs: []
  type: TYPE_NORMAL
- en: Get the non-SQL options which will take effect during execution.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.3.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE700]'
  prefs: []
  type: TYPE_PRE
- en: Compute the final displayed list of [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") elements.
  prefs: []
  type: TYPE_NORMAL
- en: This method will run through the full computation required to determine what
    FROM elements will be displayed in the resulting SELECT statement, including shadowing
    individual tables with JOIN objects, as well as full computation for ORM use cases
    including eager loading clauses.
  prefs: []
  type: TYPE_NORMAL
- en: For ORM use, this accessor returns the **post compilation** list of FROM objects;
    this collection will include elements such as eagerly loaded tables and joins.
    The objects will **not** be ORM enabled and not work as a replacement for the
    `Select.select_froms()` collection; additionally, the method is not well performing
    for an ORM enabled statement as it will incur the full ORM construction process.
  prefs: []
  type: TYPE_NORMAL
- en: To retrieve the FROM list that’s implied by the “columns” collection passed
    to the [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    originally, use the [`Select.columns_clause_froms`](#sqlalchemy.sql.expression.Select.columns_clause_froms
    "sqlalchemy.sql.expression.Select.columns_clause_froms") accessor.
  prefs: []
  type: TYPE_NORMAL
- en: To select from an alternative set of columns while maintaining the FROM list,
    use the [`Select.with_only_columns()`](#sqlalchemy.sql.expression.Select.with_only_columns
    "sqlalchemy.sql.expression.Select.with_only_columns") method and pass the [`Select.with_only_columns.maintain_column_froms`](#sqlalchemy.sql.expression.Select.with_only_columns.params.maintain_column_froms
    "sqlalchemy.sql.expression.Select.with_only_columns") parameter.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4.23: - the [`Select.get_final_froms()`](#sqlalchemy.sql.expression.Select.get_final_froms
    "sqlalchemy.sql.expression.Select.get_final_froms") method replaces the previous
    [`Select.froms`](#sqlalchemy.sql.expression.Select.froms "sqlalchemy.sql.expression.Select.froms")
    accessor, which is deprecated.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.columns_clause_froms`](#sqlalchemy.sql.expression.Select.columns_clause_froms
    "sqlalchemy.sql.expression.Select.columns_clause_froms")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE701]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`GenerativeSelect.get_label_style()`](#sqlalchemy.sql.expression.GenerativeSelect.get_label_style
    "sqlalchemy.sql.expression.GenerativeSelect.get_label_style") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  prefs: []
  type: TYPE_NORMAL
- en: Retrieve the current label style.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE702]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`GenerativeSelect.group_by()`](#sqlalchemy.sql.expression.GenerativeSelect.group_by
    "sqlalchemy.sql.expression.GenerativeSelect.group_by") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a new selectable with the given list of GROUP BY criterion applied.
  prefs: []
  type: TYPE_NORMAL
- en: All existing GROUP BY settings can be suppressed by passing `None`.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE703]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***clauses** – a series of [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") constructs which will be used to generate
    an GROUP BY clause.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Aggregate functions with GROUP BY / HAVING](../tutorial/data_select.html#tutorial-group-by-w-aggregates)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Ordering or Grouping by a Label](../tutorial/data_select.html#tutorial-order-by-label)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE704]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    construct with the given expression added to its HAVING clause, joined to the
    existing clause via AND, if any.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE705]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `HasCacheKey.inherit_cache` *attribute of* [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.cache_key.HasCacheKey")'
  prefs: []
  type: TYPE_NORMAL
- en: Indicate if this [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") instance should make use of the cache
    key generation scheme used by its immediate superclass.
  prefs: []
  type: TYPE_NORMAL
- en: The attribute defaults to `None`, which indicates that a construct has not yet
    taken into account whether or not its appropriate for it to participate in caching;
    this is functionally equivalent to setting the value to `False`, except that a
    warning is also emitted.
  prefs: []
  type: TYPE_NORMAL
- en: This flag can be set to `True` on a particular class, if the SQL that corresponds
    to the object does not change based on attributes which are local to this class,
    and not its superclass.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Enabling Caching Support for Custom Constructs](compiler.html#compilerext-caching)
    - General guideslines for setting the [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute for third-party
    or user defined SQL constructs.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE706]'
  prefs: []
  type: TYPE_PRE
- en: An iterator of all [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") expressions which would be rendered
    into the columns clause of the resulting SELECT statement.
  prefs: []
  type: TYPE_NORMAL
- en: This method is legacy as of 1.4 and is superseded by the [`Select.exported_columns`](#sqlalchemy.sql.expression.Select.exported_columns
    "sqlalchemy.sql.expression.Select.exported_columns") collection.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE707]'
  prefs: []
  type: TYPE_PRE
- en: Return a SQL `INTERSECT` of this select() construct against the given selectables
    provided as positional arguments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*other` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: one or more elements with which to create a UNION.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Changed in version 1.4.28: multiple elements are now accepted.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`**kwargs` – keyword arguments are forwarded to the constructor for the newly
    created [`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect "sqlalchemy.sql.expression.CompoundSelect")
    object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE708]'
  prefs: []
  type: TYPE_PRE
- en: Return a SQL `INTERSECT ALL` of this select() construct against the given selectables
    provided as positional arguments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*other` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: one or more elements with which to create a UNION.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Changed in version 1.4.28: multiple elements are now accepted.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`**kwargs` – keyword arguments are forwarded to the constructor for the newly
    created [`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect "sqlalchemy.sql.expression.CompoundSelect")
    object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE709]'
  prefs: []
  type: TYPE_PRE
- en: Return `True` if this [`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows
    "sqlalchemy.sql.expression.ReturnsRows") is ‘derived’ from the given [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: An example would be an Alias of a Table is derived from that Table.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE710]'
  prefs: []
  type: TYPE_PRE
- en: Create a SQL JOIN against this [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") object’s criterion and apply generatively,
    returning the newly resulting [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select").
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE711]'
  prefs: []
  type: TYPE_PRE
- en: 'The above statement generates SQL similar to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE712]'
  prefs: []
  type: TYPE_PRE
- en: 'Changed in version 1.4: [`Select.join()`](#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join") now creates a [`Join`](#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") object between a [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") source that is within the FROM clause
    of the existing SELECT, and a given target [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause"), and then adds this [`Join`](#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") to the FROM clause of the newly generated SELECT
    statement. This is completely reworked from the behavior in 1.3, which would instead
    create a subquery of the entire [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    and then join that subquery to the target.'
  prefs: []
  type: TYPE_NORMAL
- en: This is a **backwards incompatible change** as the previous behavior was mostly
    useless, producing an unnamed subquery rejected by most databases in any case.
    The new behavior is modeled after that of the very successful [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") method in the ORM, in order to support the functionality
    of [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    being available by using a [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    object with an [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
  prefs: []
  type: TYPE_NORMAL
- en: See the notes for this change at [select().join() and outerjoin() add JOIN criteria
    to the current query, rather than creating a subquery](../changelog/migration_14.html#change-select-join).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`target` – target table to join towards'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onclause` – ON clause of the join. If omitted, an ON clause is generated automatically
    based on the [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    linkages between the two tables, if one can be unambiguously determined, otherwise
    an error is raised.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`isouter` – if True, generate LEFT OUTER join. Same as [`Select.outerjoin()`](#sqlalchemy.sql.expression.Select.outerjoin
    "sqlalchemy.sql.expression.Select.outerjoin").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`full` – if True, generate FULL OUTER join.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Explicit FROM clauses and JOINs](../tutorial/data_select.html#tutorial-select-join)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Joins](../orm/queryguide/select.html#orm-queryguide-joins) - in the [ORM Querying
    Guide](../orm/queryguide/index.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.join_from()`](#sqlalchemy.sql.expression.Select.join_from "sqlalchemy.sql.expression.Select.join_from")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.outerjoin()`](#sqlalchemy.sql.expression.Select.outerjoin "sqlalchemy.sql.expression.Select.outerjoin")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE713]'
  prefs: []
  type: TYPE_PRE
- en: Create a SQL JOIN against this [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") object’s criterion and apply generatively,
    returning the newly resulting [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select").
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE714]'
  prefs: []
  type: TYPE_PRE
- en: 'The above statement generates SQL similar to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE715]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`from_` – the left side of the join, will be rendered in the FROM clause and
    is roughly equivalent to using the [`Select.select_from()`](#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`target` – target table to join towards'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onclause` – ON clause of the join.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`isouter` – if True, generate LEFT OUTER join. Same as [`Select.outerjoin()`](#sqlalchemy.sql.expression.Select.outerjoin
    "sqlalchemy.sql.expression.Select.outerjoin").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`full` – if True, generate FULL OUTER join.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Explicit FROM clauses and JOINs](../tutorial/data_select.html#tutorial-select-join)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Joins](../orm/queryguide/select.html#orm-queryguide-joins) - in the [ORM Querying
    Guide](../orm/queryguide/index.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.join()`](#sqlalchemy.sql.expression.Select.join "sqlalchemy.sql.expression.Select.join")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE716]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`SelectBase.label()`](#sqlalchemy.sql.expression.SelectBase.label
    "sqlalchemy.sql.expression.SelectBase.label") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a ‘scalar’ representation of this selectable, embedded as a subquery
    with a label.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE717]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`SelectBase.lateral()`](#sqlalchemy.sql.expression.SelectBase.lateral
    "sqlalchemy.sql.expression.SelectBase.lateral") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a LATERAL alias of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable").
  prefs: []
  type: TYPE_NORMAL
- en: The return value is the [`Lateral`](#sqlalchemy.sql.expression.Lateral "sqlalchemy.sql.expression.Lateral")
    construct also provided by the top-level [`lateral()`](#sqlalchemy.sql.expression.lateral
    "sqlalchemy.sql.expression.lateral") function.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[LATERAL correlation](../tutorial/data_select.html#tutorial-lateral-correlation)
    - overview of usage.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE718]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a new selectable with the given LIMIT criterion applied.
  prefs: []
  type: TYPE_NORMAL
- en: This is a numerical value which usually renders as a `LIMIT` expression in the
    resulting select. Backends that don’t support `LIMIT` will attempt to provide
    similar functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The [`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit") method will replace any clause
    applied with [`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**limit** – an integer LIMIT parameter, or a SQL expression that provides an
    integer result. Pass `None` to reset it.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE719]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a new selectable with the given OFFSET criterion applied.
  prefs: []
  type: TYPE_NORMAL
- en: This is a numeric value which usually renders as an `OFFSET` expression in the
    resulting select. Backends that don’t support `OFFSET` will attempt to provide
    similar functionality.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**offset** – an integer OFFSET parameter, or a SQL expression that provides
    an integer result. Pass `None` to reset it.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE720]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Executable.options()`](#sqlalchemy.sql.expression.Executable.options
    "sqlalchemy.sql.expression.Executable.options") *method of* [`Executable`](#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")'
  prefs: []
  type: TYPE_NORMAL
- en: Apply options to this statement.
  prefs: []
  type: TYPE_NORMAL
- en: In the general sense, options are any kind of Python object that can be interpreted
    by the SQL compiler for the statement. These options can be consumed by specific
    dialects or specific kinds of compilers.
  prefs: []
  type: TYPE_NORMAL
- en: The most commonly known kind of option are the ORM level options that apply
    “eager load” and other loading behaviors to an ORM query. However, options can
    theoretically be used for many other purposes.
  prefs: []
  type: TYPE_NORMAL
- en: For background on specific kinds of options for specific kinds of statements,
    refer to the documentation for those option objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: - added [`Executable.options()`](#sqlalchemy.sql.expression.Executable.options
    "sqlalchemy.sql.expression.Executable.options") to Core statement objects towards
    the goal of allowing unified Core / ORM querying capabilities.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Column Loading Options](../orm/queryguide/columns.html#loading-columns) -
    refers to options specific to the usage of ORM queries'
  prefs: []
  type: TYPE_NORMAL
- en: '[Relationship Loading with Loader Options](../orm/queryguide/relationships.html#relationship-loader-options)
    - refers to options specific to the usage of ORM queries'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE721]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`GenerativeSelect.order_by()`](#sqlalchemy.sql.expression.GenerativeSelect.order_by
    "sqlalchemy.sql.expression.GenerativeSelect.order_by") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a new selectable with the given list of ORDER BY criteria applied.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE722]'
  prefs: []
  type: TYPE_PRE
- en: 'Calling this method multiple times is equivalent to calling it once with all
    the clauses concatenated. All existing ORDER BY criteria may be cancelled by passing
    `None` by itself. New ORDER BY criteria may then be added by invoking [`Query.order_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.order_by
    "sqlalchemy.orm.Query.order_by") again, e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE723]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***clauses** – a series of [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") constructs which will be used to generate
    an ORDER BY clause.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[ORDER BY](../tutorial/data_select.html#tutorial-order-by) - in the [SQLAlchemy
    Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Ordering or Grouping by a Label](../tutorial/data_select.html#tutorial-order-by-label)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE724]'
  prefs: []
  type: TYPE_PRE
- en: Create a left outer join.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters are the same as that of [`Select.join()`](#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join").
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: [`Select.outerjoin()`](#sqlalchemy.sql.expression.Select.outerjoin
    "sqlalchemy.sql.expression.Select.outerjoin") now creates a [`Join`](#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") object between a [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") source that is within the FROM clause
    of the existing SELECT, and a given target [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause"), and then adds this [`Join`](#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") to the FROM clause of the newly generated SELECT
    statement. This is completely reworked from the behavior in 1.3, which would instead
    create a subquery of the entire [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    and then join that subquery to the target.'
  prefs: []
  type: TYPE_NORMAL
- en: This is a **backwards incompatible change** as the previous behavior was mostly
    useless, producing an unnamed subquery rejected by most databases in any case.
    The new behavior is modeled after that of the very successful [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") method in the ORM, in order to support the functionality
    of [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    being available by using a [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    object with an [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
  prefs: []
  type: TYPE_NORMAL
- en: See the notes for this change at [select().join() and outerjoin() add JOIN criteria
    to the current query, rather than creating a subquery](../changelog/migration_14.html#change-select-join).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Explicit FROM clauses and JOINs](../tutorial/data_select.html#tutorial-select-join)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Joins](../orm/queryguide/select.html#orm-queryguide-joins) - in the [ORM Querying
    Guide](../orm/queryguide/index.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.join()`](#sqlalchemy.sql.expression.Select.join "sqlalchemy.sql.expression.Select.join")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE725]'
  prefs: []
  type: TYPE_PRE
- en: Create a SQL LEFT OUTER JOIN against this [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") object’s criterion and apply generatively,
    returning the newly resulting [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select").
  prefs: []
  type: TYPE_NORMAL
- en: Usage is the same as that of `Select.join_from()`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE726]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`HasPrefixes.prefix_with()`](#sqlalchemy.sql.expression.HasPrefixes.prefix_with
    "sqlalchemy.sql.expression.HasPrefixes.prefix_with") *method of* [`HasPrefixes`](#sqlalchemy.sql.expression.HasPrefixes
    "sqlalchemy.sql.expression.HasPrefixes")'
  prefs: []
  type: TYPE_NORMAL
- en: Add one or more expressions following the statement keyword, i.e. SELECT, INSERT,
    UPDATE, or DELETE. Generative.
  prefs: []
  type: TYPE_NORMAL
- en: This is used to support backend-specific prefix keywords such as those provided
    by MySQL.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE727]'
  prefs: []
  type: TYPE_PRE
- en: Multiple prefixes can be specified by multiple calls to [`HasPrefixes.prefix_with()`](#sqlalchemy.sql.expression.HasPrefixes.prefix_with
    "sqlalchemy.sql.expression.HasPrefixes.prefix_with").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*prefixes` – textual or [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") construct which will be rendered following
    the INSERT, UPDATE, or DELETE keyword.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dialect` – optional string dialect name which will limit rendering of this
    prefix to only that dialect.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE728]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    construct with redundantly named, equivalently-valued columns removed from the
    columns clause.
  prefs: []
  type: TYPE_NORMAL
- en: “Redundant” here means two columns where one refers to the other either based
    on foreign key, or via a simple equality comparison in the WHERE clause of the
    statement. The primary purpose of this method is to automatically construct a
    select statement with all uniquely-named columns, without the need to use table-qualified
    labels as [`Select.set_label_style()`](#sqlalchemy.sql.expression.Select.set_label_style
    "sqlalchemy.sql.expression.Select.set_label_style") does.
  prefs: []
  type: TYPE_NORMAL
- en: When columns are omitted based on foreign key, the referred-to column is the
    one that’s kept. When columns are omitted based on WHERE equivalence, the first
    column in the columns clause is the one that’s kept.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**only_synonyms** – when True, limit the removal of columns to those which
    have the same name as the equivalent. Otherwise, all columns that are equivalent
    to another are removed.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE729]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Selectable.replace_selectable()`](#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") *method of* [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
  prefs: []
  type: TYPE_NORMAL
- en: Replace all occurrences of [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") ‘old’ with the given [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") object, returning a copy of this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.4: The [`Selectable.replace_selectable()`](#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") method is deprecated,
    and will be removed in a future release. Similar functionality is available via
    the sqlalchemy.sql.visitors module.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE730]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a ‘scalar’ representation of this selectable, which can be used as a
    column expression.
  prefs: []
  type: TYPE_NORMAL
- en: The returned object is an instance of [`ScalarSelect`](#sqlalchemy.sql.expression.ScalarSelect
    "sqlalchemy.sql.expression.ScalarSelect").
  prefs: []
  type: TYPE_NORMAL
- en: Typically, a select statement which has only one column in its columns clause
    is eligible to be used as a scalar expression. The scalar subquery can then be
    used in the WHERE clause or columns clause of an enclosing SELECT.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the scalar subquery differentiates from the FROM-level subquery that
    can be produced using the [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") method.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Scalar and Correlated Subqueries](../tutorial/data_select.html#tutorial-scalar-subquery)
    - in the 2.0 tutorial'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE731]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`SelectBase.select()`](#sqlalchemy.sql.expression.SelectBase.select
    "sqlalchemy.sql.expression.SelectBase.select") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.4: The [`SelectBase.select()`](#sqlalchemy.sql.expression.SelectBase.select
    "sqlalchemy.sql.expression.SelectBase.select") method is deprecated and will be
    removed in a future release; this method implicitly creates a subquery that should
    be explicit. Please call [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") first in order to create a subquery,
    which then can be selected.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE732]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    construct with the given FROM expression(s) merged into its list of FROM objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE733]'
  prefs: []
  type: TYPE_PRE
- en: The “from” list is a unique set on the identity of each element, so adding an
    already present [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    or other selectable will have no effect. Passing a [`Join`](#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") that refers to an already present [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") or other selectable will have the effect of concealing
    the presence of that selectable as an individual element in the rendered FROM
    list, instead rendering it into a JOIN clause.
  prefs: []
  type: TYPE_NORMAL
- en: 'While the typical purpose of [`Select.select_from()`](#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") is to replace the default, derived
    FROM clause with a join, it can also be called with individual table elements,
    multiple times if desired, in the case that the FROM clause cannot be fully derived
    from the columns clause:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE734]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE735]'
  prefs: []
  type: TYPE_PRE
- en: A [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") representing the columns that this
    SELECT statement or similar construct returns in its result set, not including
    [`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause "sqlalchemy.sql.expression.TextClause")
    constructs.
  prefs: []
  type: TYPE_NORMAL
- en: This collection differs from the [`FromClause.columns`](#sqlalchemy.sql.expression.FromClause.columns
    "sqlalchemy.sql.expression.FromClause.columns") collection of a [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") in that the columns within this collection
    cannot be directly nested inside another SELECT statement; a subquery must be
    applied first which provides for the necessary parenthesization required by SQL.
  prefs: []
  type: TYPE_NORMAL
- en: 'For a [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    construct, the collection here is exactly what would be rendered inside the “SELECT”
    statement, and the [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") objects are directly present as they
    were given, e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE736]'
  prefs: []
  type: TYPE_PRE
- en: Above, `stmt.selected_columns` would be a collection that contains the `col1`
    and `col2` objects directly. For a statement that is against a [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") or other [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause"), the collection will use the [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") objects that are in the [`FromClause.c`](#sqlalchemy.sql.expression.FromClause.c
    "sqlalchemy.sql.expression.FromClause.c") collection of the from element.
  prefs: []
  type: TYPE_NORMAL
- en: 'A use case for the [`Select.selected_columns`](#sqlalchemy.sql.expression.Select.selected_columns
    "sqlalchemy.sql.expression.Select.selected_columns") collection is to allow the
    existing columns to be referenced when adding additional criteria, e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE737]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The [`Select.selected_columns`](#sqlalchemy.sql.expression.Select.selected_columns
    "sqlalchemy.sql.expression.Select.selected_columns") collection does not include
    expressions established in the columns clause using the [`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct; these are silently omitted from the
    collection. To use plain textual column expressions inside of a [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") construct, use the [`literal_column()`](sqlelement.html#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column") construct.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE738]'
  prefs: []
  type: TYPE_PRE
- en: Apply a ‘grouping’ to this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  prefs: []
  type: TYPE_NORMAL
- en: This method is overridden by subclasses to return a “grouping” construct, i.e.
    parenthesis. In particular it’s used by “binary” expressions to provide a grouping
    around themselves when placed into a larger expression, as well as by [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs when placed into the FROM clause
    of another [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select").
    (Note that subqueries should be normally created using the [`Select.alias()`](#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") method, as many platforms require nested
    SELECT statements to be named).
  prefs: []
  type: TYPE_NORMAL
- en: As expressions are composed together, the application of [`self_group()`](#sqlalchemy.sql.expression.Select.self_group
    "sqlalchemy.sql.expression.Select.self_group") is automatic - end-user code should
    never need to use this method directly. Note that SQLAlchemy’s clause constructs
    take operator precedence into account - so parenthesis might not be needed, for
    example, in an expression like `x OR (y AND z)` - AND takes precedence over OR.
  prefs: []
  type: TYPE_NORMAL
- en: The base [`self_group()`](#sqlalchemy.sql.expression.Select.self_group "sqlalchemy.sql.expression.Select.self_group")
    method of [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") just returns self.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE739]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`GenerativeSelect.set_label_style()`](#sqlalchemy.sql.expression.GenerativeSelect.set_label_style
    "sqlalchemy.sql.expression.GenerativeSelect.set_label_style") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a new selectable with the specified label style.
  prefs: []
  type: TYPE_NORMAL
- en: There are three “label styles” available, [`SelectLabelStyle.LABEL_STYLE_DISAMBIGUATE_ONLY`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_DISAMBIGUATE_ONLY
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_DISAMBIGUATE_ONLY"), [`SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL"),
    and [`SelectLabelStyle.LABEL_STYLE_NONE`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_NONE
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_NONE"). The default style
    is [`SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL").
  prefs: []
  type: TYPE_NORMAL
- en: In modern SQLAlchemy, there is not generally a need to change the labeling style,
    as per-expression labels are more effectively used by making use of the [`ColumnElement.label()`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.label
    "sqlalchemy.sql.expression.ColumnElement.label") method. In past versions, `LABEL_STYLE_TABLENAME_PLUS_COL`
    was used to disambiguate same-named columns from different tables, aliases, or
    subqueries; the newer `LABEL_STYLE_DISAMBIGUATE_ONLY` now applies labels only
    to names that conflict with an existing name so that the impact of this labeling
    is minimal.
  prefs: []
  type: TYPE_NORMAL
- en: The rationale for disambiguation is mostly so that all column expressions are
    available from a given [`FromClause.c`](#sqlalchemy.sql.expression.FromClause.c
    "sqlalchemy.sql.expression.FromClause.c") collection when a subquery is created.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4: - the [`GenerativeSelect.set_label_style()`](#sqlalchemy.sql.expression.GenerativeSelect.set_label_style
    "sqlalchemy.sql.expression.GenerativeSelect.set_label_style") method replaces
    the previous combination of `.apply_labels()`, `.with_labels()` and `use_labels=True`
    methods and/or parameters.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '`LABEL_STYLE_DISAMBIGUATE_ONLY`'
  prefs: []
  type: TYPE_NORMAL
- en: '`LABEL_STYLE_TABLENAME_PLUS_COL`'
  prefs: []
  type: TYPE_NORMAL
- en: '`LABEL_STYLE_NONE`'
  prefs: []
  type: TYPE_NORMAL
- en: '`LABEL_STYLE_DEFAULT`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE740]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`GenerativeSelect.slice()`](#sqlalchemy.sql.expression.GenerativeSelect.slice
    "sqlalchemy.sql.expression.GenerativeSelect.slice") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  prefs: []
  type: TYPE_NORMAL
- en: Apply LIMIT / OFFSET to this statement based on a slice.
  prefs: []
  type: TYPE_NORMAL
- en: The start and stop indices behave like the argument to Python’s built-in `range()`
    function. This method provides an alternative to using `LIMIT`/`OFFSET` to get
    a slice of the query.
  prefs: []
  type: TYPE_NORMAL
- en: For example,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE741]'
  prefs: []
  type: TYPE_PRE
- en: renders as
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE742]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The [`GenerativeSelect.slice()`](#sqlalchemy.sql.expression.GenerativeSelect.slice
    "sqlalchemy.sql.expression.GenerativeSelect.slice") method will replace any clause
    applied with [`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch").
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4: Added the [`GenerativeSelect.slice()`](#sqlalchemy.sql.expression.GenerativeSelect.slice
    "sqlalchemy.sql.expression.GenerativeSelect.slice") method generalized from the
    ORM.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE743]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a subquery of this [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase").
  prefs: []
  type: TYPE_NORMAL
- en: A subquery is from a SQL perspective a parenthesized, named construct that can
    be placed in the FROM clause of another SELECT statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'Given a SELECT statement such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE744]'
  prefs: []
  type: TYPE_PRE
- en: 'The above statement might look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE745]'
  prefs: []
  type: TYPE_PRE
- en: 'The subquery form by itself renders the same way, however when embedded into
    the FROM clause of another SELECT statement, it becomes a named sub-element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE746]'
  prefs: []
  type: TYPE_PRE
- en: 'The above renders as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE747]'
  prefs: []
  type: TYPE_PRE
- en: Historically, [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") is equivalent to calling the
    [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias "sqlalchemy.sql.expression.FromClause.alias")
    method on a FROM object; however, as a [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase") object is not directly FROM object, the
    [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery "sqlalchemy.sql.expression.SelectBase.subquery")
    method provides clearer semantics.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE748]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`HasSuffixes.suffix_with()`](#sqlalchemy.sql.expression.HasSuffixes.suffix_with
    "sqlalchemy.sql.expression.HasSuffixes.suffix_with") *method of* [`HasSuffixes`](#sqlalchemy.sql.expression.HasSuffixes
    "sqlalchemy.sql.expression.HasSuffixes")'
  prefs: []
  type: TYPE_NORMAL
- en: Add one or more expressions following the statement as a whole.
  prefs: []
  type: TYPE_NORMAL
- en: This is used to support backend-specific suffix keywords on certain constructs.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE749]'
  prefs: []
  type: TYPE_PRE
- en: Multiple suffixes can be specified by multiple calls to [`HasSuffixes.suffix_with()`](#sqlalchemy.sql.expression.HasSuffixes.suffix_with
    "sqlalchemy.sql.expression.HasSuffixes.suffix_with").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*suffixes` – textual or [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") construct which will be rendered following
    the target clause.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dialect` – Optional string dialect name which will limit rendering of this
    suffix to only that dialect.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE750]'
  prefs: []
  type: TYPE_PRE
- en: Return a SQL `UNION` of this select() construct against the given selectables
    provided as positional arguments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*other` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: one or more elements with which to create a UNION.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Changed in version 1.4.28: multiple elements are now accepted.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`**kwargs` – keyword arguments are forwarded to the constructor for the newly
    created [`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect "sqlalchemy.sql.expression.CompoundSelect")
    object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE751]'
  prefs: []
  type: TYPE_PRE
- en: Return a SQL `UNION ALL` of this select() construct against the given selectables
    provided as positional arguments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*other` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: one or more elements with which to create a UNION.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Changed in version 1.4.28: multiple elements are now accepted.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`**kwargs` – keyword arguments are forwarded to the constructor for the newly
    created [`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect "sqlalchemy.sql.expression.CompoundSelect")
    object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE752]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    construct with the given expression added to its WHERE clause, joined to the existing
    clause via AND, if any.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE753]'
  prefs: []
  type: TYPE_PRE
- en: Return the completed WHERE clause for this [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") statement.
  prefs: []
  type: TYPE_NORMAL
- en: This assembles the current collection of WHERE criteria into a single `BooleanClauseList`
    construct.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE754]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`GenerativeSelect.with_for_update()`](#sqlalchemy.sql.expression.GenerativeSelect.with_for_update
    "sqlalchemy.sql.expression.GenerativeSelect.with_for_update") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  prefs: []
  type: TYPE_NORMAL
- en: Specify a `FOR UPDATE` clause for this [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect").
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE755]'
  prefs: []
  type: TYPE_PRE
- en: 'On a database like PostgreSQL or Oracle, the above would render a statement
    like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE756]'
  prefs: []
  type: TYPE_PRE
- en: 'on other backends, the `nowait` option is ignored and instead would produce:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE757]'
  prefs: []
  type: TYPE_PRE
- en: When called with no arguments, the statement will render with the suffix `FOR
    UPDATE`. Additional arguments can then be provided which allow for common database-specific
    variants.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`nowait` – boolean; will render `FOR UPDATE NOWAIT` on Oracle and PostgreSQL
    dialects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`read` – boolean; will render `LOCK IN SHARE MODE` on MySQL, `FOR SHARE` on
    PostgreSQL. On PostgreSQL, when combined with `nowait`, will render `FOR SHARE
    NOWAIT`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`of` – SQL expression or list of SQL expression elements, (typically [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects or a compatible expression, for some backends
    may also be a table expression) which will render into a `FOR UPDATE OF` clause;
    supported by PostgreSQL, Oracle, some MySQL versions and possibly others. May
    render as a table or as a column depending on backend.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`skip_locked` – boolean, will render `FOR UPDATE SKIP LOCKED` on Oracle and
    PostgreSQL dialects or `FOR SHARE SKIP LOCKED` if `read=True` is also specified.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`key_share` – boolean, will render `FOR NO KEY UPDATE`, or if combined with
    `read=True` will render `FOR KEY SHARE`, on the PostgreSQL dialect.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE758]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `HasHints.with_hint()` *method of* `HasHints`'
  prefs: []
  type: TYPE_NORMAL
- en: Add an indexing or other executional context hint for the given selectable to
    this [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    or other selectable object.
  prefs: []
  type: TYPE_NORMAL
- en: 'The text of the hint is rendered in the appropriate location for the database
    backend in use, relative to the given [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") or [`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    passed as the `selectable` argument. The dialect implementation typically uses
    Python string substitution syntax with the token `%(name)s` to render the name
    of the table or alias. E.g. when using Oracle, the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE759]'
  prefs: []
  type: TYPE_PRE
- en: 'Would render SQL as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE760]'
  prefs: []
  type: TYPE_PRE
- en: 'The `dialect_name` option will limit the rendering of a particular hint to
    a particular backend. Such as, to add hints for both Oracle and Sybase simultaneously:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE761]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.with_statement_hint()`](#sqlalchemy.sql.expression.Select.with_statement_hint
    "sqlalchemy.sql.expression.Select.with_statement_hint")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE762]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    construct with its columns clause replaced with the given entities.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, this method is exactly equivalent to as if the original [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") had been called with the given entities. E.g.
    a statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE763]'
  prefs: []
  type: TYPE_PRE
- en: 'should be exactly equivalent to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE764]'
  prefs: []
  type: TYPE_PRE
- en: 'In this mode of operation, [`Select.with_only_columns()`](#sqlalchemy.sql.expression.Select.with_only_columns
    "sqlalchemy.sql.expression.Select.with_only_columns") will also dynamically alter
    the FROM clause of the statement if it is not explicitly stated. To maintain the
    existing set of FROMs including those implied by the current columns clause, add
    the [`Select.with_only_columns.maintain_column_froms`](#sqlalchemy.sql.expression.Select.with_only_columns.params.maintain_column_froms
    "sqlalchemy.sql.expression.Select.with_only_columns") parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE765]'
  prefs: []
  type: TYPE_PRE
- en: 'The above parameter performs a transfer of the effective FROMs in the columns
    collection to the [`Select.select_from()`](#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") method, as though the following
    were invoked:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE766]'
  prefs: []
  type: TYPE_PRE
- en: 'The [`Select.with_only_columns.maintain_column_froms`](#sqlalchemy.sql.expression.Select.with_only_columns.params.maintain_column_froms
    "sqlalchemy.sql.expression.Select.with_only_columns") parameter makes use of the
    [`Select.columns_clause_froms`](#sqlalchemy.sql.expression.Select.columns_clause_froms
    "sqlalchemy.sql.expression.Select.columns_clause_froms") collection and performs
    an operation equivalent to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE767]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*entities` – column expressions to be used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`maintain_column_froms` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: boolean parameter that will ensure the FROM list implied from the current columns
    clause will be transferred to the [`Select.select_from()`](#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") method first.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 1.4.23.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE768]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `HasHints.with_statement_hint()` *method of* `HasHints`'
  prefs: []
  type: TYPE_NORMAL
- en: Add a statement hint to this [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    or other selectable object.
  prefs: []
  type: TYPE_NORMAL
- en: This method is similar to [`Select.with_hint()`](#sqlalchemy.sql.expression.Select.with_hint
    "sqlalchemy.sql.expression.Select.with_hint") except that it does not require
    an individual table, and instead applies to the statement as a whole.
  prefs: []
  type: TYPE_NORMAL
- en: Hints here are specific to the backend database and may include directives such
    as isolation levels, file directives, fetch directives, etc.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.with_hint()`](#sqlalchemy.sql.expression.Select.with_hint "sqlalchemy.sql.expression.Select.with_hint")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.prefix_with()`](#sqlalchemy.sql.expression.Select.prefix_with "sqlalchemy.sql.expression.Select.prefix_with")
    - generic SELECT prefixing which also can suit some database-specific HINT syntaxes
    such as MySQL optimizer hints'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE769]'
  prefs: []
  type: TYPE_PRE
- en: Mark a class as being selectable.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[corresponding_column()](#sqlalchemy.sql.expression.Selectable.corresponding_column),
    [exported_columns](#sqlalchemy.sql.expression.Selectable.exported_columns), [inherit_cache](#sqlalchemy.sql.expression.Selectable.inherit_cache),
    [is_derived_from()](#sqlalchemy.sql.expression.Selectable.is_derived_from), [lateral()](#sqlalchemy.sql.expression.Selectable.lateral),
    [replace_selectable()](#sqlalchemy.sql.expression.Selectable.replace_selectable)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.expression.Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable") ([`sqlalchemy.sql.expression.ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows
    "sqlalchemy.sql.expression.ReturnsRows"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE770]'
  prefs: []
  type: TYPE_PRE
- en: Given a [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"), return the exported [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") object from the [`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") collection of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable") which corresponds to that original [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") via a common ancestor column.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`column` – the target [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") to be matched.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`require_embedded` – only return corresponding columns for the given [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"), if the given [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") is actually present within a sub-element
    of this [`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable").
    Normally the column will match if it merely shares a common ancestor with one
    of the exported columns of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") - the [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") that is used for the operation.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnCollection.corresponding_column()`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection.corresponding_column
    "sqlalchemy.sql.expression.ColumnCollection.corresponding_column") - implementation
    method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE771]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ReturnsRows.exported_columns`](#sqlalchemy.sql.expression.ReturnsRows.exported_columns
    "sqlalchemy.sql.expression.ReturnsRows.exported_columns") *attribute of* [`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows
    "sqlalchemy.sql.expression.ReturnsRows")'
  prefs: []
  type: TYPE_NORMAL
- en: A [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") that represents the “exported” columns
    of this [`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows "sqlalchemy.sql.expression.ReturnsRows").
  prefs: []
  type: TYPE_NORMAL
- en: The “exported” columns represent the collection of [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") expressions that are rendered by this
    SQL construct. There are primary varieties which are the “FROM clause columns”
    of a FROM clause, such as a table, join, or subquery, the “SELECTed columns”,
    which are the columns in the “columns clause” of a SELECT statement, and the RETURNING
    columns in a DML statement..
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`FromClause.exported_columns`](#sqlalchemy.sql.expression.FromClause.exported_columns
    "sqlalchemy.sql.expression.FromClause.exported_columns")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`SelectBase.exported_columns`](#sqlalchemy.sql.expression.SelectBase.exported_columns
    "sqlalchemy.sql.expression.SelectBase.exported_columns")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE772]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `HasCacheKey.inherit_cache` *attribute of* [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.cache_key.HasCacheKey")'
  prefs: []
  type: TYPE_NORMAL
- en: Indicate if this [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") instance should make use of the cache
    key generation scheme used by its immediate superclass.
  prefs: []
  type: TYPE_NORMAL
- en: The attribute defaults to `None`, which indicates that a construct has not yet
    taken into account whether or not its appropriate for it to participate in caching;
    this is functionally equivalent to setting the value to `False`, except that a
    warning is also emitted.
  prefs: []
  type: TYPE_NORMAL
- en: This flag can be set to `True` on a particular class, if the SQL that corresponds
    to the object does not change based on attributes which are local to this class,
    and not its superclass.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Enabling Caching Support for Custom Constructs](compiler.html#compilerext-caching)
    - General guideslines for setting the [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute for third-party
    or user defined SQL constructs.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE773]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ReturnsRows.is_derived_from()`](#sqlalchemy.sql.expression.ReturnsRows.is_derived_from
    "sqlalchemy.sql.expression.ReturnsRows.is_derived_from") *method of* [`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows
    "sqlalchemy.sql.expression.ReturnsRows")'
  prefs: []
  type: TYPE_NORMAL
- en: Return `True` if this [`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows
    "sqlalchemy.sql.expression.ReturnsRows") is ‘derived’ from the given [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: An example would be an Alias of a Table is derived from that Table.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE774]'
  prefs: []
  type: TYPE_PRE
- en: Return a LATERAL alias of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable").
  prefs: []
  type: TYPE_NORMAL
- en: The return value is the [`Lateral`](#sqlalchemy.sql.expression.Lateral "sqlalchemy.sql.expression.Lateral")
    construct also provided by the top-level [`lateral()`](#sqlalchemy.sql.expression.lateral
    "sqlalchemy.sql.expression.lateral") function.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[LATERAL correlation](../tutorial/data_select.html#tutorial-lateral-correlation)
    - overview of usage.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE775]'
  prefs: []
  type: TYPE_PRE
- en: Replace all occurrences of [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") ‘old’ with the given [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") object, returning a copy of this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.4: The [`Selectable.replace_selectable()`](#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") method is deprecated,
    and will be removed in a future release. Similar functionality is available via
    the sqlalchemy.sql.visitors module.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE776]'
  prefs: []
  type: TYPE_PRE
- en: Base class for SELECT statements.
  prefs: []
  type: TYPE_NORMAL
- en: This includes [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select"),
    [`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect "sqlalchemy.sql.expression.CompoundSelect")
    and [`TextualSelect`](#sqlalchemy.sql.expression.TextualSelect "sqlalchemy.sql.expression.TextualSelect").
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[add_cte()](#sqlalchemy.sql.expression.SelectBase.add_cte), [alias()](#sqlalchemy.sql.expression.SelectBase.alias),
    [as_scalar()](#sqlalchemy.sql.expression.SelectBase.as_scalar), [c](#sqlalchemy.sql.expression.SelectBase.c),
    [corresponding_column()](#sqlalchemy.sql.expression.SelectBase.corresponding_column),
    [cte()](#sqlalchemy.sql.expression.SelectBase.cte), [exists()](#sqlalchemy.sql.expression.SelectBase.exists),
    [exported_columns](#sqlalchemy.sql.expression.SelectBase.exported_columns), [get_label_style()](#sqlalchemy.sql.expression.SelectBase.get_label_style),
    [inherit_cache](#sqlalchemy.sql.expression.SelectBase.inherit_cache), [is_derived_from()](#sqlalchemy.sql.expression.SelectBase.is_derived_from),
    [label()](#sqlalchemy.sql.expression.SelectBase.label), [lateral()](#sqlalchemy.sql.expression.SelectBase.lateral),
    [replace_selectable()](#sqlalchemy.sql.expression.SelectBase.replace_selectable),
    [scalar_subquery()](#sqlalchemy.sql.expression.SelectBase.scalar_subquery), [select()](#sqlalchemy.sql.expression.SelectBase.select),
    [selected_columns](#sqlalchemy.sql.expression.SelectBase.selected_columns), [set_label_style()](#sqlalchemy.sql.expression.SelectBase.set_label_style),
    [subquery()](#sqlalchemy.sql.expression.SelectBase.subquery)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.expression.SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase") (`sqlalchemy.sql.roles.SelectStatementRole`,
    `sqlalchemy.sql.roles.DMLSelectRole`, `sqlalchemy.sql.roles.CompoundElementRole`,
    `sqlalchemy.sql.roles.InElementRole`, [`sqlalchemy.sql.expression.HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE"), `sqlalchemy.sql.annotation.SupportsCloneAnnotations`,
    [`sqlalchemy.sql.expression.Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE777]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") *method of* [`HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE")'
  prefs: []
  type: TYPE_NORMAL
- en: Add one or more [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    constructs to this statement.
  prefs: []
  type: TYPE_NORMAL
- en: This method will associate the given [`CTE`](#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE") constructs with the parent statement such that
    they will each be unconditionally rendered in the WITH clause of the final statement,
    even if not referenced elsewhere within the statement or any sub-selects.
  prefs: []
  type: TYPE_NORMAL
- en: The optional [`HasCTE.add_cte.nest_here`](#sqlalchemy.sql.expression.HasCTE.add_cte.params.nest_here
    "sqlalchemy.sql.expression.HasCTE.add_cte") parameter when set to True will have
    the effect that each given [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    will render in a WITH clause rendered directly along with this statement, rather
    than being moved to the top of the ultimate rendered statement, even if this statement
    is rendered as a subquery within a larger statement.
  prefs: []
  type: TYPE_NORMAL
- en: This method has two general uses. One is to embed CTE statements that serve
    some purpose without being referenced explicitly, such as the use case of embedding
    a DML statement such as an INSERT or UPDATE as a CTE inline with a primary statement
    that may draw from its results indirectly. The other is to provide control over
    the exact placement of a particular series of CTE constructs that should remain
    rendered directly in terms of a particular statement that may be nested in a larger
    statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE778]'
  prefs: []
  type: TYPE_PRE
- en: 'Would render:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE779]'
  prefs: []
  type: TYPE_PRE
- en: Above, the “anon_1” CTE is not referenced in the SELECT statement, however still
    accomplishes the task of running an INSERT statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly in a DML-related context, using the PostgreSQL [`Insert`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Insert
    "sqlalchemy.dialects.postgresql.Insert") construct to generate an “upsert”:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE780]'
  prefs: []
  type: TYPE_PRE
- en: 'The above statement renders as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE781]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.4.21.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*ctes` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: zero or more [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    constructs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Changed in version 2.0: Multiple CTE instances are accepted'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`nest_here` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: if True, the given CTE or CTEs will be rendered as though they specified the
    [`HasCTE.cte.nesting`](#sqlalchemy.sql.expression.HasCTE.cte.params.nesting "sqlalchemy.sql.expression.HasCTE.cte")
    flag to `True` when they were added to this [`HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE"). Assuming the given CTEs are not referenced
    in an outer-enclosing statement as well, the CTEs given should render at the level
    of this statement when this flag is given.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`HasCTE.cte.nesting`](#sqlalchemy.sql.expression.HasCTE.cte.params.nesting
    "sqlalchemy.sql.expression.HasCTE.cte")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE782]'
  prefs: []
  type: TYPE_PRE
- en: Return a named subquery against this [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase").
  prefs: []
  type: TYPE_NORMAL
- en: For a [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")
    (as opposed to a [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")),
    this returns a [`Subquery`](#sqlalchemy.sql.expression.Subquery "sqlalchemy.sql.expression.Subquery")
    object which behaves mostly the same as the [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") object that is used with a [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The [`SelectBase.alias()`](#sqlalchemy.sql.expression.SelectBase.alias
    "sqlalchemy.sql.expression.SelectBase.alias") method is now a synonym for the
    [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery "sqlalchemy.sql.expression.SelectBase.subquery")
    method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE783]'
  prefs: []
  type: TYPE_PRE
- en: 'Deprecated since version 1.4: The [`SelectBase.as_scalar()`](#sqlalchemy.sql.expression.SelectBase.as_scalar
    "sqlalchemy.sql.expression.SelectBase.as_scalar") method is deprecated and will
    be removed in a future release. Please refer to [`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE784]'
  prefs: []
  type: TYPE_PRE
- en: 'Deprecated since version 1.4: The [`SelectBase.c`](#sqlalchemy.sql.expression.SelectBase.c
    "sqlalchemy.sql.expression.SelectBase.c") and `SelectBase.columns` attributes
    are deprecated and will be removed in a future release; these attributes implicitly
    create a subquery that should be explicit. Please call [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") first in order to create a subquery,
    which then contains this attribute. To access the columns that this SELECT object
    SELECTs from, use the [`SelectBase.selected_columns`](#sqlalchemy.sql.expression.SelectBase.selected_columns
    "sqlalchemy.sql.expression.SelectBase.selected_columns") attribute.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE785]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Selectable.corresponding_column()`](#sqlalchemy.sql.expression.Selectable.corresponding_column
    "sqlalchemy.sql.expression.Selectable.corresponding_column") *method of* [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
  prefs: []
  type: TYPE_NORMAL
- en: Given a [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"), return the exported [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") object from the [`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") collection of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable") which corresponds to that original [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") via a common ancestor column.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`column` – the target [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") to be matched.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`require_embedded` – only return corresponding columns for the given [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"), if the given [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") is actually present within a sub-element
    of this [`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable").
    Normally the column will match if it merely shares a common ancestor with one
    of the exported columns of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") - the [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") that is used for the operation.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnCollection.corresponding_column()`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection.corresponding_column
    "sqlalchemy.sql.expression.ColumnCollection.corresponding_column") - implementation
    method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE786]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte
    "sqlalchemy.sql.expression.HasCTE.cte") *method of* [`HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a new [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE"),
    or Common Table Expression instance.
  prefs: []
  type: TYPE_NORMAL
- en: Common table expressions are a SQL standard whereby SELECT statements can draw
    upon secondary statements specified along with the primary statement, using a
    clause called “WITH”. Special semantics regarding UNION can also be employed to
    allow “recursive” queries, where a SELECT statement can draw upon the set of rows
    that have previously been selected.
  prefs: []
  type: TYPE_NORMAL
- en: CTEs can also be applied to DML constructs UPDATE, INSERT and DELETE on some
    databases, both as a source of CTE rows when combined with RETURNING, as well
    as a consumer of CTE rows.
  prefs: []
  type: TYPE_NORMAL
- en: SQLAlchemy detects [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    objects, which are treated similarly to [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") objects, as special elements to be delivered
    to the FROM clause of the statement as well as to a WITH clause at the top of
    the statement.
  prefs: []
  type: TYPE_NORMAL
- en: For special prefixes such as PostgreSQL “MATERIALIZED” and “NOT MATERIALIZED”,
    the `CTE.prefix_with()` method may be used to establish these.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.3.13: Added support for prefixes. In particular - MATERIALIZED
    and NOT MATERIALIZED.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name` – name given to the common table expression. Like [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias"), the name can be left as `None`
    in which case an anonymous symbol will be used at query compile time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`recursive` – if `True`, will render `WITH RECURSIVE`. A recursive common table
    expression is intended to be used in conjunction with UNION ALL in order to derive
    rows from those already selected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nesting` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: if `True`, will render the CTE locally to the statement in which it is referenced.
    For more complex scenarios, the [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") method using the [`HasCTE.add_cte.nest_here`](#sqlalchemy.sql.expression.HasCTE.add_cte.params.nest_here
    "sqlalchemy.sql.expression.HasCTE.add_cte") parameter may also be used to more
    carefully control the exact placement of a particular CTE.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 1.4.24.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte "sqlalchemy.sql.expression.HasCTE.add_cte")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The following examples include two from PostgreSQL’s documentation at [https://www.postgresql.org/docs/current/static/queries-with.html](https://www.postgresql.org/docs/current/static/queries-with.html),
    as well as additional examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example 1, non recursive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE787]'
  prefs: []
  type: TYPE_PRE
- en: 'Example 2, WITH RECURSIVE:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE788]'
  prefs: []
  type: TYPE_PRE
- en: 'Example 3, an upsert using UPDATE and INSERT with CTEs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE789]'
  prefs: []
  type: TYPE_PRE
- en: 'Example 4, Nesting CTE (SQLAlchemy 1.4.24 and above):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE790]'
  prefs: []
  type: TYPE_PRE
- en: 'The above query will render the second CTE nested inside the first, shown with
    inline parameters below as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE791]'
  prefs: []
  type: TYPE_PRE
- en: 'The same CTE can be set up using the [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") method as follows (SQLAlchemy 2.0
    and above):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE792]'
  prefs: []
  type: TYPE_PRE
- en: 'Example 5, Non-Linear CTE (SQLAlchemy 1.4.28 and above):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE793]'
  prefs: []
  type: TYPE_PRE
- en: 'The above query will render 2 UNIONs inside the recursive CTE:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE794]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.cte()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.cte "sqlalchemy.orm.Query.cte")
    - ORM version of [`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte "sqlalchemy.sql.expression.HasCTE.cte").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE795]'
  prefs: []
  type: TYPE_PRE
- en: Return an [`Exists`](#sqlalchemy.sql.expression.Exists "sqlalchemy.sql.expression.Exists")
    representation of this selectable, which can be used as a column expression.
  prefs: []
  type: TYPE_NORMAL
- en: The returned object is an instance of [`Exists`](#sqlalchemy.sql.expression.Exists
    "sqlalchemy.sql.expression.Exists").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`exists()`](#sqlalchemy.sql.expression.exists "sqlalchemy.sql.expression.exists")'
  prefs: []
  type: TYPE_NORMAL
- en: '[EXISTS subqueries](../tutorial/data_select.html#tutorial-exists) - in the
    [2.0 style](../glossary.html#term-2.0-style) tutorial.'
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE796]'
  prefs: []
  type: TYPE_PRE
- en: A [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") that represents the “exported” columns
    of this [`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable"),
    not including [`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause") constructs.
  prefs: []
  type: TYPE_NORMAL
- en: The “exported” columns for a [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase") object are synonymous with the [`SelectBase.selected_columns`](#sqlalchemy.sql.expression.SelectBase.selected_columns
    "sqlalchemy.sql.expression.SelectBase.selected_columns") collection.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.exported_columns`](#sqlalchemy.sql.expression.Select.exported_columns
    "sqlalchemy.sql.expression.Select.exported_columns")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`FromClause.exported_columns`](#sqlalchemy.sql.expression.FromClause.exported_columns
    "sqlalchemy.sql.expression.FromClause.exported_columns")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE797]'
  prefs: []
  type: TYPE_PRE
- en: Retrieve the current label style.
  prefs: []
  type: TYPE_NORMAL
- en: Implemented by subclasses.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE798]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `HasCacheKey.inherit_cache` *attribute of* [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.cache_key.HasCacheKey")'
  prefs: []
  type: TYPE_NORMAL
- en: Indicate if this [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") instance should make use of the cache
    key generation scheme used by its immediate superclass.
  prefs: []
  type: TYPE_NORMAL
- en: The attribute defaults to `None`, which indicates that a construct has not yet
    taken into account whether or not its appropriate for it to participate in caching;
    this is functionally equivalent to setting the value to `False`, except that a
    warning is also emitted.
  prefs: []
  type: TYPE_NORMAL
- en: This flag can be set to `True` on a particular class, if the SQL that corresponds
    to the object does not change based on attributes which are local to this class,
    and not its superclass.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Enabling Caching Support for Custom Constructs](compiler.html#compilerext-caching)
    - General guideslines for setting the [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute for third-party
    or user defined SQL constructs.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE799]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ReturnsRows.is_derived_from()`](#sqlalchemy.sql.expression.ReturnsRows.is_derived_from
    "sqlalchemy.sql.expression.ReturnsRows.is_derived_from") *method of* [`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows
    "sqlalchemy.sql.expression.ReturnsRows")'
  prefs: []
  type: TYPE_NORMAL
- en: Return `True` if this [`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows
    "sqlalchemy.sql.expression.ReturnsRows") is ‘derived’ from the given [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: An example would be an Alias of a Table is derived from that Table.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE800]'
  prefs: []
  type: TYPE_PRE
- en: Return a ‘scalar’ representation of this selectable, embedded as a subquery
    with a label.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE801]'
  prefs: []
  type: TYPE_PRE
- en: Return a LATERAL alias of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable").
  prefs: []
  type: TYPE_NORMAL
- en: The return value is the [`Lateral`](#sqlalchemy.sql.expression.Lateral "sqlalchemy.sql.expression.Lateral")
    construct also provided by the top-level [`lateral()`](#sqlalchemy.sql.expression.lateral
    "sqlalchemy.sql.expression.lateral") function.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[LATERAL correlation](../tutorial/data_select.html#tutorial-lateral-correlation)
    - overview of usage.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE802]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Selectable.replace_selectable()`](#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") *method of* [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
  prefs: []
  type: TYPE_NORMAL
- en: Replace all occurrences of [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") ‘old’ with the given [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") object, returning a copy of this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.4: The [`Selectable.replace_selectable()`](#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") method is deprecated,
    and will be removed in a future release. Similar functionality is available via
    the sqlalchemy.sql.visitors module.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE803]'
  prefs: []
  type: TYPE_PRE
- en: Return a ‘scalar’ representation of this selectable, which can be used as a
    column expression.
  prefs: []
  type: TYPE_NORMAL
- en: The returned object is an instance of [`ScalarSelect`](#sqlalchemy.sql.expression.ScalarSelect
    "sqlalchemy.sql.expression.ScalarSelect").
  prefs: []
  type: TYPE_NORMAL
- en: Typically, a select statement which has only one column in its columns clause
    is eligible to be used as a scalar expression. The scalar subquery can then be
    used in the WHERE clause or columns clause of an enclosing SELECT.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the scalar subquery differentiates from the FROM-level subquery that
    can be produced using the [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") method.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Scalar and Correlated Subqueries](../tutorial/data_select.html#tutorial-scalar-subquery)
    - in the 2.0 tutorial'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE804]'
  prefs: []
  type: TYPE_PRE
- en: 'Deprecated since version 1.4: The [`SelectBase.select()`](#sqlalchemy.sql.expression.SelectBase.select
    "sqlalchemy.sql.expression.SelectBase.select") method is deprecated and will be
    removed in a future release; this method implicitly creates a subquery that should
    be explicit. Please call [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") first in order to create a subquery,
    which then can be selected.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE805]'
  prefs: []
  type: TYPE_PRE
- en: A [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") representing the columns that this
    SELECT statement or similar construct returns in its result set.
  prefs: []
  type: TYPE_NORMAL
- en: This collection differs from the [`FromClause.columns`](#sqlalchemy.sql.expression.FromClause.columns
    "sqlalchemy.sql.expression.FromClause.columns") collection of a [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") in that the columns within this collection
    cannot be directly nested inside another SELECT statement; a subquery must be
    applied first which provides for the necessary parenthesization required by SQL.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The [`SelectBase.selected_columns`](#sqlalchemy.sql.expression.SelectBase.selected_columns
    "sqlalchemy.sql.expression.SelectBase.selected_columns") collection does not include
    expressions established in the columns clause using the [`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct; these are silently omitted from the
    collection. To use plain textual column expressions inside of a [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") construct, use the [`literal_column()`](sqlelement.html#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column") construct.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.selected_columns`](#sqlalchemy.sql.expression.Select.selected_columns
    "sqlalchemy.sql.expression.Select.selected_columns")'
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE806]'
  prefs: []
  type: TYPE_PRE
- en: Return a new selectable with the specified label style.
  prefs: []
  type: TYPE_NORMAL
- en: Implemented by subclasses.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE807]'
  prefs: []
  type: TYPE_PRE
- en: Return a subquery of this [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase").
  prefs: []
  type: TYPE_NORMAL
- en: A subquery is from a SQL perspective a parenthesized, named construct that can
    be placed in the FROM clause of another SELECT statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'Given a SELECT statement such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE808]'
  prefs: []
  type: TYPE_PRE
- en: 'The above statement might look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE809]'
  prefs: []
  type: TYPE_PRE
- en: 'The subquery form by itself renders the same way, however when embedded into
    the FROM clause of another SELECT statement, it becomes a named sub-element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE810]'
  prefs: []
  type: TYPE_PRE
- en: 'The above renders as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE811]'
  prefs: []
  type: TYPE_PRE
- en: Historically, [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") is equivalent to calling the
    [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias "sqlalchemy.sql.expression.FromClause.alias")
    method on a FROM object; however, as a [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase") object is not directly FROM object, the
    [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery "sqlalchemy.sql.expression.SelectBase.subquery")
    method provides clearer semantics.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE812]'
  prefs: []
  type: TYPE_PRE
- en: Represent a subquery of a SELECT.
  prefs: []
  type: TYPE_NORMAL
- en: A [`Subquery`](#sqlalchemy.sql.expression.Subquery "sqlalchemy.sql.expression.Subquery")
    is created by invoking the [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") method, or for convenience the
    [`SelectBase.alias()`](#sqlalchemy.sql.expression.SelectBase.alias "sqlalchemy.sql.expression.SelectBase.alias")
    method, on any [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")
    subclass which includes [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select"),
    [`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect "sqlalchemy.sql.expression.CompoundSelect"),
    and [`TextualSelect`](#sqlalchemy.sql.expression.TextualSelect "sqlalchemy.sql.expression.TextualSelect").
    As rendered in a FROM clause, it represents the body of the SELECT statement inside
    of parenthesis, followed by the usual “AS <somename>” that defines all “alias”
    objects.
  prefs: []
  type: TYPE_NORMAL
- en: The [`Subquery`](#sqlalchemy.sql.expression.Subquery "sqlalchemy.sql.expression.Subquery")
    object is very similar to the [`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    object and can be used in an equivalent way. The difference between [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") and [`Subquery`](#sqlalchemy.sql.expression.Subquery
    "sqlalchemy.sql.expression.Subquery") is that [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") always contains a [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") object whereas [`Subquery`](#sqlalchemy.sql.expression.Subquery
    "sqlalchemy.sql.expression.Subquery") always contains a [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase") object.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4: The [`Subquery`](#sqlalchemy.sql.expression.Subquery "sqlalchemy.sql.expression.Subquery")
    class was added which now serves the purpose of providing an aliased version of
    a SELECT statement.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[as_scalar()](#sqlalchemy.sql.expression.Subquery.as_scalar), [inherit_cache](#sqlalchemy.sql.expression.Subquery.inherit_cache)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.expression.Subquery`](#sqlalchemy.sql.expression.Subquery
    "sqlalchemy.sql.expression.Subquery") ([`sqlalchemy.sql.expression.AliasedReturnsRows`](#sqlalchemy.sql.expression.AliasedReturnsRows
    "sqlalchemy.sql.expression.AliasedReturnsRows"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE813]'
  prefs: []
  type: TYPE_PRE
- en: 'Deprecated since version 1.4: The [`Subquery.as_scalar()`](#sqlalchemy.sql.expression.Subquery.as_scalar
    "sqlalchemy.sql.expression.Subquery.as_scalar") method, which was previously `Alias.as_scalar()`
    prior to version 1.4, is deprecated and will be removed in a future release; Please
    use the [`Select.scalar_subquery()`](#sqlalchemy.sql.expression.Select.scalar_subquery
    "sqlalchemy.sql.expression.Select.scalar_subquery") method of the [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct before constructing a subquery object,
    or with the ORM use the [`Query.scalar_subquery()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.scalar_subquery
    "sqlalchemy.orm.Query.scalar_subquery") method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE814]'
  prefs: []
  type: TYPE_PRE
- en: Indicate if this [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") instance should make use of the cache
    key generation scheme used by its immediate superclass.
  prefs: []
  type: TYPE_NORMAL
- en: The attribute defaults to `None`, which indicates that a construct has not yet
    taken into account whether or not its appropriate for it to participate in caching;
    this is functionally equivalent to setting the value to `False`, except that a
    warning is also emitted.
  prefs: []
  type: TYPE_NORMAL
- en: This flag can be set to `True` on a particular class, if the SQL that corresponds
    to the object does not change based on attributes which are local to this class,
    and not its superclass.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Enabling Caching Support for Custom Constructs](compiler.html#compilerext-caching)
    - General guideslines for setting the [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute for third-party
    or user defined SQL constructs.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE815]'
  prefs: []
  type: TYPE_PRE
- en: Represents a minimal “table” construct.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a lightweight table object that has only a name, a collection of columns,
    which are typically produced by the [`column()`](sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column") function, and a schema:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE816]'
  prefs: []
  type: TYPE_PRE
- en: The [`TableClause`](#sqlalchemy.sql.expression.TableClause "sqlalchemy.sql.expression.TableClause")
    construct serves as the base for the more commonly used [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object, providing the usual set of [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") services including the `.c.` collection
    and statement generation methods.
  prefs: []
  type: TYPE_NORMAL
- en: It does **not** provide all the additional schema-level services of [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), including constraints, references to other tables,
    or support for [`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")-level
    services. It’s useful on its own as an ad-hoc construct used to generate quick
    SQL statements when a more fully fledged [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") is not on hand.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[alias()](#sqlalchemy.sql.expression.TableClause.alias), [c](#sqlalchemy.sql.expression.TableClause.c),
    [columns](#sqlalchemy.sql.expression.TableClause.columns), [compare()](#sqlalchemy.sql.expression.TableClause.compare),
    [compile()](#sqlalchemy.sql.expression.TableClause.compile), [corresponding_column()](#sqlalchemy.sql.expression.TableClause.corresponding_column),
    [delete()](#sqlalchemy.sql.expression.TableClause.delete), [description](#sqlalchemy.sql.expression.TableClause.description),
    [entity_namespace](#sqlalchemy.sql.expression.TableClause.entity_namespace), [exported_columns](#sqlalchemy.sql.expression.TableClause.exported_columns),
    [foreign_keys](#sqlalchemy.sql.expression.TableClause.foreign_keys), [get_children()](#sqlalchemy.sql.expression.TableClause.get_children),
    [implicit_returning](#sqlalchemy.sql.expression.TableClause.implicit_returning),
    [inherit_cache](#sqlalchemy.sql.expression.TableClause.inherit_cache), [insert()](#sqlalchemy.sql.expression.TableClause.insert),
    [is_derived_from()](#sqlalchemy.sql.expression.TableClause.is_derived_from), [join()](#sqlalchemy.sql.expression.TableClause.join),
    [lateral()](#sqlalchemy.sql.expression.TableClause.lateral), [outerjoin()](#sqlalchemy.sql.expression.TableClause.outerjoin),
    [params()](#sqlalchemy.sql.expression.TableClause.params), [primary_key](#sqlalchemy.sql.expression.TableClause.primary_key),
    [replace_selectable()](#sqlalchemy.sql.expression.TableClause.replace_selectable),
    [schema](#sqlalchemy.sql.expression.TableClause.schema), [select()](#sqlalchemy.sql.expression.TableClause.select),
    [self_group()](#sqlalchemy.sql.expression.TableClause.self_group), [table_valued()](#sqlalchemy.sql.expression.TableClause.table_valued),
    [tablesample()](#sqlalchemy.sql.expression.TableClause.tablesample), [unique_params()](#sqlalchemy.sql.expression.TableClause.unique_params),
    [update()](#sqlalchemy.sql.expression.TableClause.update)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.expression.TableClause`](#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause") (`sqlalchemy.sql.roles.DMLTableRole`,
    `sqlalchemy.sql.expression.Immutable`, `sqlalchemy.sql.expression.NamedFromClause`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE817]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") *method of* [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  prefs: []
  type: TYPE_NORMAL
- en: Return an alias of this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE818]'
  prefs: []
  type: TYPE_PRE
- en: The above code creates an [`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    object which can be used as a FROM clause in any SELECT statement.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Using Aliases](../tutorial/data_select.html#tutorial-using-aliases)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`alias()`](#sqlalchemy.sql.expression.alias "sqlalchemy.sql.expression.alias")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE819]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`FromClause.c`](#sqlalchemy.sql.expression.FromClause.c
    "sqlalchemy.sql.expression.FromClause.c") *attribute of* [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  prefs: []
  type: TYPE_NORMAL
- en: A synonym for [`FromClause.columns`](#sqlalchemy.sql.expression.FromClause.columns
    "sqlalchemy.sql.expression.FromClause.columns")
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE820]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`FromClause.columns`](#sqlalchemy.sql.expression.FromClause.columns
    "sqlalchemy.sql.expression.FromClause.columns") *attribute of* [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  prefs: []
  type: TYPE_NORMAL
- en: A named-based collection of [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") objects maintained by this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`columns`](#sqlalchemy.sql.expression.TableClause.columns "sqlalchemy.sql.expression.TableClause.columns"),
    or [`c`](#sqlalchemy.sql.expression.TableClause.c "sqlalchemy.sql.expression.TableClause.c")
    collection, is the gateway to the construction of SQL expressions using table-bound
    or other selectable-bound columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE821]'
  prefs: []
  type: TYPE_PRE
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE822]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ClauseElement.compare()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.compare
    "sqlalchemy.sql.expression.ClauseElement.compare") *method of* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
  prefs: []
  type: TYPE_NORMAL
- en: Compare this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") to the given [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  prefs: []
  type: TYPE_NORMAL
- en: Subclasses should override the default behavior, which is a straight identity
    comparison.
  prefs: []
  type: TYPE_NORMAL
- en: '**kw are arguments consumed by subclass `compare()` methods and may be used
    to modify the criteria for comparison (see [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE823]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `CompilerElement.compile()` *method of* `CompilerElement`'
  prefs: []
  type: TYPE_NORMAL
- en: Compile this SQL expression.
  prefs: []
  type: TYPE_NORMAL
- en: The return value is a [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object. Calling `str()` or `unicode()` on the returned
    value will yield a string representation of the result. The [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object also can return a dictionary of bind parameter
    names and values using the `params` accessor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`bind` – An [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    or [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    which can provide a [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    in order to generate a [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object. If the `bind` and `dialect` parameters are
    both omitted, a default SQL compiler is used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`column_keys` – Used for INSERT and UPDATE statements, a list of column names
    which should be present in the VALUES clause of the compiled statement. If `None`,
    all columns from the target table object are rendered.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dialect` – A [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    instance which can generate a [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object. This argument takes precedence over the
    `bind` argument.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`compile_kwargs` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'optional dictionary of additional parameters that will be passed through to
    the compiler within all “visit” methods. This allows any custom flag to be passed
    through to a custom compilation construct, for example. It is also used for the
    case of passing the `literal_binds` flag through:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE824]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[How do I render SQL expressions as strings, possibly with bound parameters
    inlined?](../faq/sqlexpressions.html#faq-sql-expression-string)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE825]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Selectable.corresponding_column()`](#sqlalchemy.sql.expression.Selectable.corresponding_column
    "sqlalchemy.sql.expression.Selectable.corresponding_column") *method of* [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
  prefs: []
  type: TYPE_NORMAL
- en: Given a [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"), return the exported [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") object from the [`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") collection of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable") which corresponds to that original [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") via a common ancestor column.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`column` – the target [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") to be matched.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`require_embedded` – only return corresponding columns for the given [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"), if the given [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") is actually present within a sub-element
    of this [`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable").
    Normally the column will match if it merely shares a common ancestor with one
    of the exported columns of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") - the [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") that is used for the operation.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnCollection.corresponding_column()`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection.corresponding_column
    "sqlalchemy.sql.expression.ColumnCollection.corresponding_column") - implementation
    method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE826]'
  prefs: []
  type: TYPE_PRE
- en: Generate a [`delete()`](dml.html#sqlalchemy.sql.expression.delete "sqlalchemy.sql.expression.delete")
    construct against this [`TableClause`](#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause").
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE827]'
  prefs: []
  type: TYPE_PRE
- en: See [`delete()`](dml.html#sqlalchemy.sql.expression.delete "sqlalchemy.sql.expression.delete")
    for argument and usage information.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE828]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE829]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`FromClause.entity_namespace`](#sqlalchemy.sql.expression.FromClause.entity_namespace
    "sqlalchemy.sql.expression.FromClause.entity_namespace") *attribute of* [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a namespace used for name-based access in SQL expressions.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the namespace that is used to resolve “filter_by()” type expressions,
    such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE830]'
  prefs: []
  type: TYPE_PRE
- en: It defaults to the `.c` collection, however internally it can be overridden
    using the “entity_namespace” annotation to deliver alternative results.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE831]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`FromClause.exported_columns`](#sqlalchemy.sql.expression.FromClause.exported_columns
    "sqlalchemy.sql.expression.FromClause.exported_columns") *attribute of* [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  prefs: []
  type: TYPE_NORMAL
- en: A [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") that represents the “exported” columns
    of this [`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable").
  prefs: []
  type: TYPE_NORMAL
- en: The “exported” columns for a [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") object are synonymous with the [`FromClause.columns`](#sqlalchemy.sql.expression.FromClause.columns
    "sqlalchemy.sql.expression.FromClause.columns") collection.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`SelectBase.exported_columns`](#sqlalchemy.sql.expression.SelectBase.exported_columns
    "sqlalchemy.sql.expression.SelectBase.exported_columns")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE832]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`FromClause.foreign_keys`](#sqlalchemy.sql.expression.FromClause.foreign_keys
    "sqlalchemy.sql.expression.FromClause.foreign_keys") *attribute of* [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  prefs: []
  type: TYPE_NORMAL
- en: Return the collection of [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") marker objects which this FromClause references.
  prefs: []
  type: TYPE_NORMAL
- en: Each [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    is a member of a [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")-wide
    [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Table.foreign_key_constraints`](metadata.html#sqlalchemy.schema.Table.foreign_key_constraints
    "sqlalchemy.schema.Table.foreign_key_constraints")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE833]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `HasTraverseInternals.get_children()` *method of* `HasTraverseInternals`'
  prefs: []
  type: TYPE_NORMAL
- en: Return immediate child `HasTraverseInternals` elements of this `HasTraverseInternals`.
  prefs: []
  type: TYPE_NORMAL
- en: This is used for visit traversal.
  prefs: []
  type: TYPE_NORMAL
- en: '**kw may contain flags that change the collection that is returned, for example
    to return a subset of items in order to cut down on larger traversals, or to return
    child items from a different context (such as schema-level collections instead
    of clause-level).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE834]'
  prefs: []
  type: TYPE_PRE
- en: '[`TableClause`](#sqlalchemy.sql.expression.TableClause "sqlalchemy.sql.expression.TableClause")
    doesn’t support having a primary key or column -level defaults, so implicit returning
    doesn’t apply.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE835]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `HasCacheKey.inherit_cache` *attribute of* [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.cache_key.HasCacheKey")'
  prefs: []
  type: TYPE_NORMAL
- en: Indicate if this [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") instance should make use of the cache
    key generation scheme used by its immediate superclass.
  prefs: []
  type: TYPE_NORMAL
- en: The attribute defaults to `None`, which indicates that a construct has not yet
    taken into account whether or not its appropriate for it to participate in caching;
    this is functionally equivalent to setting the value to `False`, except that a
    warning is also emitted.
  prefs: []
  type: TYPE_NORMAL
- en: This flag can be set to `True` on a particular class, if the SQL that corresponds
    to the object does not change based on attributes which are local to this class,
    and not its superclass.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Enabling Caching Support for Custom Constructs](compiler.html#compilerext-caching)
    - General guideslines for setting the [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute for third-party
    or user defined SQL constructs.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE836]'
  prefs: []
  type: TYPE_PRE
- en: Generate an [`Insert`](dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    construct against this [`TableClause`](#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause").
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE837]'
  prefs: []
  type: TYPE_PRE
- en: See [`insert()`](dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert")
    for argument and usage information.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE838]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`FromClause.is_derived_from()`](#sqlalchemy.sql.expression.FromClause.is_derived_from
    "sqlalchemy.sql.expression.FromClause.is_derived_from") *method of* [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  prefs: []
  type: TYPE_NORMAL
- en: Return `True` if this [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    is ‘derived’ from the given `FromClause`.
  prefs: []
  type: TYPE_NORMAL
- en: An example would be an Alias of a Table is derived from that Table.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE839]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join") *method of* [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a [`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    from this [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    to another [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE840]'
  prefs: []
  type: TYPE_PRE
- en: 'would emit SQL along the lines of:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE841]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`right` – the right side of the join; this is any [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") object such as a [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object, and may also be a selectable-compatible object
    such as an ORM-mapped class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onclause` – a SQL expression representing the ON clause of the join. If left
    at `None`, [`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join "sqlalchemy.sql.expression.FromClause.join")
    will attempt to join the two tables based on a foreign key relationship.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`isouter` – if True, render a LEFT OUTER JOIN, instead of JOIN.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`full` – if True, render a FULL OUTER JOIN, instead of LEFT OUTER JOIN. Implies
    [`FromClause.join.isouter`](#sqlalchemy.sql.expression.FromClause.join.params.isouter
    "sqlalchemy.sql.expression.FromClause.join").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`join()`](#sqlalchemy.sql.expression.join "sqlalchemy.sql.expression.join")
    - standalone function'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    - the type of object produced'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE842]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Selectable.lateral()`](#sqlalchemy.sql.expression.Selectable.lateral
    "sqlalchemy.sql.expression.Selectable.lateral") *method of* [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a LATERAL alias of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable").
  prefs: []
  type: TYPE_NORMAL
- en: The return value is the [`Lateral`](#sqlalchemy.sql.expression.Lateral "sqlalchemy.sql.expression.Lateral")
    construct also provided by the top-level [`lateral()`](#sqlalchemy.sql.expression.lateral
    "sqlalchemy.sql.expression.lateral") function.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[LATERAL correlation](../tutorial/data_select.html#tutorial-lateral-correlation)
    - overview of usage.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE843]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`FromClause.outerjoin()`](#sqlalchemy.sql.expression.FromClause.outerjoin
    "sqlalchemy.sql.expression.FromClause.outerjoin") *method of* [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a [`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    from this [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    to another [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause"),
    with the “isouter” flag set to True.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE844]'
  prefs: []
  type: TYPE_PRE
- en: 'The above is equivalent to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE845]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`right` – the right side of the join; this is any [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") object such as a [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object, and may also be a selectable-compatible object
    such as an ORM-mapped class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onclause` – a SQL expression representing the ON clause of the join. If left
    at `None`, [`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join "sqlalchemy.sql.expression.FromClause.join")
    will attempt to join the two tables based on a foreign key relationship.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`full` – if True, render a FULL OUTER JOIN, instead of LEFT OUTER JOIN.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join "sqlalchemy.sql.expression.FromClause.join")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE846]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `Immutable.params()` *method of* `Immutable`'
  prefs: []
  type: TYPE_NORMAL
- en: Return a copy with [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") elements replaced.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns a copy of this ClauseElement with [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") elements replaced with values taken from
    the given dictionary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE847]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE848]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`FromClause.primary_key`](#sqlalchemy.sql.expression.FromClause.primary_key
    "sqlalchemy.sql.expression.FromClause.primary_key") *attribute of* [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  prefs: []
  type: TYPE_NORMAL
- en: Return the iterable collection of [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects which comprise the primary key of this `_selectable.FromClause`.
  prefs: []
  type: TYPE_NORMAL
- en: For a [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object, this collection is represented by the [`PrimaryKeyConstraint`](constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") which itself is an iterable collection
    of [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    objects.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE849]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Selectable.replace_selectable()`](#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") *method of* [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
  prefs: []
  type: TYPE_NORMAL
- en: Replace all occurrences of [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") ‘old’ with the given [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") object, returning a copy of this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.4: The [`Selectable.replace_selectable()`](#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") method is deprecated,
    and will be removed in a future release. Similar functionality is available via
    the sqlalchemy.sql.visitors module.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE850]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`FromClause.schema`](#sqlalchemy.sql.expression.FromClause.schema
    "sqlalchemy.sql.expression.FromClause.schema") *attribute of* [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  prefs: []
  type: TYPE_NORMAL
- en: Define the ‘schema’ attribute for this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: This is typically `None` for most objects except that of [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), where it is taken as the value of the [`Table.schema`](metadata.html#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table") argument.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE851]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`FromClause.select()`](#sqlalchemy.sql.expression.FromClause.select
    "sqlalchemy.sql.expression.FromClause.select") *method of* [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a SELECT of this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE852]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    - general purpose method which allows for arbitrary column lists.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE853]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ClauseElement.self_group()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.self_group
    "sqlalchemy.sql.expression.ClauseElement.self_group") *method of* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
  prefs: []
  type: TYPE_NORMAL
- en: Apply a ‘grouping’ to this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  prefs: []
  type: TYPE_NORMAL
- en: This method is overridden by subclasses to return a “grouping” construct, i.e.
    parenthesis. In particular it’s used by “binary” expressions to provide a grouping
    around themselves when placed into a larger expression, as well as by [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs when placed into the FROM clause
    of another [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select").
    (Note that subqueries should be normally created using the [`Select.alias()`](#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") method, as many platforms require nested
    SELECT statements to be named).
  prefs: []
  type: TYPE_NORMAL
- en: As expressions are composed together, the application of [`self_group()`](#sqlalchemy.sql.expression.TableClause.self_group
    "sqlalchemy.sql.expression.TableClause.self_group") is automatic - end-user code
    should never need to use this method directly. Note that SQLAlchemy’s clause constructs
    take operator precedence into account - so parenthesis might not be needed, for
    example, in an expression like `x OR (y AND z)` - AND takes precedence over OR.
  prefs: []
  type: TYPE_NORMAL
- en: The base [`self_group()`](#sqlalchemy.sql.expression.TableClause.self_group
    "sqlalchemy.sql.expression.TableClause.self_group") method of [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") just returns self.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE854]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `NamedFromClause.table_valued()` *method of* `NamedFromClause`'
  prefs: []
  type: TYPE_NORMAL
- en: Return a `TableValuedColumn` object for this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: A `TableValuedColumn` is a [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") that represents a complete row in a
    table. Support for this construct is backend dependent, and is supported in various
    forms by backends such as PostgreSQL, Oracle and SQL Server.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE855]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.4.0b2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Working with SQL Functions](../tutorial/data_select.html#tutorial-functions)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE856]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`FromClause.tablesample()`](#sqlalchemy.sql.expression.FromClause.tablesample
    "sqlalchemy.sql.expression.FromClause.tablesample") *method of* [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a TABLESAMPLE alias of this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: The return value is the [`TableSample`](#sqlalchemy.sql.expression.TableSample
    "sqlalchemy.sql.expression.TableSample") construct also provided by the top-level
    [`tablesample()`](#sqlalchemy.sql.expression.tablesample "sqlalchemy.sql.expression.tablesample")
    function.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`tablesample()`](#sqlalchemy.sql.expression.tablesample "sqlalchemy.sql.expression.tablesample")
    - usage guidelines and parameters'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE857]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `Immutable.unique_params()` *method of* `Immutable`'
  prefs: []
  type: TYPE_NORMAL
- en: Return a copy with [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") elements replaced.
  prefs: []
  type: TYPE_NORMAL
- en: Same functionality as [`ClauseElement.params()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.params
    "sqlalchemy.sql.expression.ClauseElement.params"), except adds unique=True to
    affected bind parameters so that multiple statements can be used.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE858]'
  prefs: []
  type: TYPE_PRE
- en: Generate an [`update()`](dml.html#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update")
    construct against this [`TableClause`](#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause").
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE859]'
  prefs: []
  type: TYPE_PRE
- en: See [`update()`](dml.html#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update")
    for argument and usage information.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE860]'
  prefs: []
  type: TYPE_PRE
- en: Represent a TABLESAMPLE clause.
  prefs: []
  type: TYPE_NORMAL
- en: This object is constructed from the [`tablesample()`](#sqlalchemy.sql.expression.tablesample
    "sqlalchemy.sql.expression.tablesample") module level function as well as the
    [`FromClause.tablesample()`](#sqlalchemy.sql.expression.FromClause.tablesample
    "sqlalchemy.sql.expression.FromClause.tablesample") method available on all [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") subclasses.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`tablesample()`](#sqlalchemy.sql.expression.tablesample "sqlalchemy.sql.expression.tablesample")'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.expression.TableSample`](#sqlalchemy.sql.expression.TableSample
    "sqlalchemy.sql.expression.TableSample") (`sqlalchemy.sql.expression.FromClauseAlias`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE861]'
  prefs: []
  type: TYPE_PRE
- en: An alias against a “table valued” SQL function.
  prefs: []
  type: TYPE_NORMAL
- en: 'This construct provides for a SQL function that returns columns to be used
    in the FROM clause of a SELECT statement. The object is generated using the [`FunctionElement.table_valued()`](functions.html#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued") method, e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE862]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.4.0b2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Table-Valued Functions](../tutorial/data_select.html#tutorial-functions-table-valued)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[alias()](#sqlalchemy.sql.expression.TableValuedAlias.alias), [column](#sqlalchemy.sql.expression.TableValuedAlias.column),
    [lateral()](#sqlalchemy.sql.expression.TableValuedAlias.lateral), [render_derived()](#sqlalchemy.sql.expression.TableValuedAlias.render_derived)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.expression.TableValuedAlias`](#sqlalchemy.sql.expression.TableValuedAlias
    "sqlalchemy.sql.expression.TableValuedAlias") (`sqlalchemy.sql.expression.LateralFromClause`,
    [`sqlalchemy.sql.expression.Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE863]'
  prefs: []
  type: TYPE_PRE
- en: Return a new alias of this [`TableValuedAlias`](#sqlalchemy.sql.expression.TableValuedAlias
    "sqlalchemy.sql.expression.TableValuedAlias").
  prefs: []
  type: TYPE_NORMAL
- en: This creates a distinct FROM object that will be distinguished from the original
    one when used in a SQL statement.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE864]'
  prefs: []
  type: TYPE_PRE
- en: Return a column expression representing this [`TableValuedAlias`](#sqlalchemy.sql.expression.TableValuedAlias
    "sqlalchemy.sql.expression.TableValuedAlias").
  prefs: []
  type: TYPE_NORMAL
- en: This accessor is used to implement the [`FunctionElement.column_valued()`](functions.html#sqlalchemy.sql.functions.FunctionElement.column_valued
    "sqlalchemy.sql.functions.FunctionElement.column_valued") method. See that method
    for further details.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE865]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`FunctionElement.column_valued()`](functions.html#sqlalchemy.sql.functions.FunctionElement.column_valued
    "sqlalchemy.sql.functions.FunctionElement.column_valued")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE866]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`TableValuedAlias`](#sqlalchemy.sql.expression.TableValuedAlias
    "sqlalchemy.sql.expression.TableValuedAlias") with the lateral flag set, so that
    it renders as LATERAL.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`lateral()`](#sqlalchemy.sql.expression.lateral "sqlalchemy.sql.expression.lateral")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE867]'
  prefs: []
  type: TYPE_PRE
- en: Apply “render derived” to this [`TableValuedAlias`](#sqlalchemy.sql.expression.TableValuedAlias
    "sqlalchemy.sql.expression.TableValuedAlias").
  prefs: []
  type: TYPE_NORMAL
- en: 'This has the effect of the individual column names listed out after the alias
    name in the “AS” sequence, e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE868]'
  prefs: []
  type: TYPE_PRE
- en: 'The `with_types` keyword will render column types inline within the alias expression
    (this syntax currently applies to the PostgreSQL database):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE869]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name` – optional string name that will be applied to the alias generated.
    If left as None, a unique anonymizing name will be used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`with_types` – if True, the derived columns will include the datatype specification
    with each column. This is a special syntax currently known to be required by PostgreSQL
    for some SQL functions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE870]'
  prefs: []
  type: TYPE_PRE
- en: Wrap a [`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause "sqlalchemy.sql.expression.TextClause")
    construct within a [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")
    interface.
  prefs: []
  type: TYPE_NORMAL
- en: This allows the [`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause") object to gain a `.c` collection and other
    FROM-like capabilities such as [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias"), [`SelectBase.cte()`](#sqlalchemy.sql.expression.SelectBase.cte
    "sqlalchemy.sql.expression.SelectBase.cte"), etc.
  prefs: []
  type: TYPE_NORMAL
- en: The [`TextualSelect`](#sqlalchemy.sql.expression.TextualSelect "sqlalchemy.sql.expression.TextualSelect")
    construct is produced via the [`TextClause.columns()`](sqlelement.html#sqlalchemy.sql.expression.TextClause.columns
    "sqlalchemy.sql.expression.TextClause.columns") method - see that method for details.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: the [`TextualSelect`](#sqlalchemy.sql.expression.TextualSelect
    "sqlalchemy.sql.expression.TextualSelect") class was renamed from `TextAsFrom`,
    to more correctly suit its role as a SELECT-oriented object and not a FROM clause.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`text()`](sqlelement.html#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`TextClause.columns()`](sqlelement.html#sqlalchemy.sql.expression.TextClause.columns
    "sqlalchemy.sql.expression.TextClause.columns") - primary creation interface.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[add_cte()](#sqlalchemy.sql.expression.TextualSelect.add_cte), [alias()](#sqlalchemy.sql.expression.TextualSelect.alias),
    [as_scalar()](#sqlalchemy.sql.expression.TextualSelect.as_scalar), [c](#sqlalchemy.sql.expression.TextualSelect.c),
    [compare()](#sqlalchemy.sql.expression.TextualSelect.compare), [compile()](#sqlalchemy.sql.expression.TextualSelect.compile),
    [corresponding_column()](#sqlalchemy.sql.expression.TextualSelect.corresponding_column),
    [cte()](#sqlalchemy.sql.expression.TextualSelect.cte), [execution_options()](#sqlalchemy.sql.expression.TextualSelect.execution_options),
    [exists()](#sqlalchemy.sql.expression.TextualSelect.exists), [exported_columns](#sqlalchemy.sql.expression.TextualSelect.exported_columns),
    [get_children()](#sqlalchemy.sql.expression.TextualSelect.get_children), [get_execution_options()](#sqlalchemy.sql.expression.TextualSelect.get_execution_options),
    [get_label_style()](#sqlalchemy.sql.expression.TextualSelect.get_label_style),
    [inherit_cache](#sqlalchemy.sql.expression.TextualSelect.inherit_cache), [is_derived_from()](#sqlalchemy.sql.expression.TextualSelect.is_derived_from),
    [label()](#sqlalchemy.sql.expression.TextualSelect.label), [lateral()](#sqlalchemy.sql.expression.TextualSelect.lateral),
    [options()](#sqlalchemy.sql.expression.TextualSelect.options), [params()](#sqlalchemy.sql.expression.TextualSelect.params),
    [replace_selectable()](#sqlalchemy.sql.expression.TextualSelect.replace_selectable),
    [scalar_subquery()](#sqlalchemy.sql.expression.TextualSelect.scalar_subquery),
    [select()](#sqlalchemy.sql.expression.TextualSelect.select), [selected_columns](#sqlalchemy.sql.expression.TextualSelect.selected_columns),
    [self_group()](#sqlalchemy.sql.expression.TextualSelect.self_group), [set_label_style()](#sqlalchemy.sql.expression.TextualSelect.set_label_style),
    [subquery()](#sqlalchemy.sql.expression.TextualSelect.subquery), [unique_params()](#sqlalchemy.sql.expression.TextualSelect.unique_params)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.expression.TextualSelect`](#sqlalchemy.sql.expression.TextualSelect
    "sqlalchemy.sql.expression.TextualSelect") ([`sqlalchemy.sql.expression.SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase"), `sqlalchemy.sql.expression.ExecutableReturnsRows`,
    `sqlalchemy.sql.expression.Generative`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE871]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") *method of* [`HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE")'
  prefs: []
  type: TYPE_NORMAL
- en: Add one or more [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    constructs to this statement.
  prefs: []
  type: TYPE_NORMAL
- en: This method will associate the given [`CTE`](#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE") constructs with the parent statement such that
    they will each be unconditionally rendered in the WITH clause of the final statement,
    even if not referenced elsewhere within the statement or any sub-selects.
  prefs: []
  type: TYPE_NORMAL
- en: The optional [`HasCTE.add_cte.nest_here`](#sqlalchemy.sql.expression.HasCTE.add_cte.params.nest_here
    "sqlalchemy.sql.expression.HasCTE.add_cte") parameter when set to True will have
    the effect that each given [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    will render in a WITH clause rendered directly along with this statement, rather
    than being moved to the top of the ultimate rendered statement, even if this statement
    is rendered as a subquery within a larger statement.
  prefs: []
  type: TYPE_NORMAL
- en: This method has two general uses. One is to embed CTE statements that serve
    some purpose without being referenced explicitly, such as the use case of embedding
    a DML statement such as an INSERT or UPDATE as a CTE inline with a primary statement
    that may draw from its results indirectly. The other is to provide control over
    the exact placement of a particular series of CTE constructs that should remain
    rendered directly in terms of a particular statement that may be nested in a larger
    statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE872]'
  prefs: []
  type: TYPE_PRE
- en: 'Would render:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE873]'
  prefs: []
  type: TYPE_PRE
- en: Above, the “anon_1” CTE is not referenced in the SELECT statement, however still
    accomplishes the task of running an INSERT statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly in a DML-related context, using the PostgreSQL [`Insert`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Insert
    "sqlalchemy.dialects.postgresql.Insert") construct to generate an “upsert”:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE874]'
  prefs: []
  type: TYPE_PRE
- en: 'The above statement renders as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE875]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.4.21.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*ctes` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: zero or more [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    constructs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Changed in version 2.0: Multiple CTE instances are accepted'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`nest_here` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: if True, the given CTE or CTEs will be rendered as though they specified the
    [`HasCTE.cte.nesting`](#sqlalchemy.sql.expression.HasCTE.cte.params.nesting "sqlalchemy.sql.expression.HasCTE.cte")
    flag to `True` when they were added to this [`HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE"). Assuming the given CTEs are not referenced
    in an outer-enclosing statement as well, the CTEs given should render at the level
    of this statement when this flag is given.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`HasCTE.cte.nesting`](#sqlalchemy.sql.expression.HasCTE.cte.params.nesting
    "sqlalchemy.sql.expression.HasCTE.cte")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE876]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`SelectBase.alias()`](#sqlalchemy.sql.expression.SelectBase.alias
    "sqlalchemy.sql.expression.SelectBase.alias") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a named subquery against this [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase").
  prefs: []
  type: TYPE_NORMAL
- en: For a [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")
    (as opposed to a [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")),
    this returns a [`Subquery`](#sqlalchemy.sql.expression.Subquery "sqlalchemy.sql.expression.Subquery")
    object which behaves mostly the same as the [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") object that is used with a [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The [`SelectBase.alias()`](#sqlalchemy.sql.expression.SelectBase.alias
    "sqlalchemy.sql.expression.SelectBase.alias") method is now a synonym for the
    [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery "sqlalchemy.sql.expression.SelectBase.subquery")
    method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE877]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`SelectBase.as_scalar()`](#sqlalchemy.sql.expression.SelectBase.as_scalar
    "sqlalchemy.sql.expression.SelectBase.as_scalar") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.4: The [`SelectBase.as_scalar()`](#sqlalchemy.sql.expression.SelectBase.as_scalar
    "sqlalchemy.sql.expression.SelectBase.as_scalar") method is deprecated and will
    be removed in a future release. Please refer to [`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE878]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`SelectBase.c`](#sqlalchemy.sql.expression.SelectBase.c
    "sqlalchemy.sql.expression.SelectBase.c") *attribute of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.4: The [`SelectBase.c`](#sqlalchemy.sql.expression.SelectBase.c
    "sqlalchemy.sql.expression.SelectBase.c") and `SelectBase.columns` attributes
    are deprecated and will be removed in a future release; these attributes implicitly
    create a subquery that should be explicit. Please call [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") first in order to create a subquery,
    which then contains this attribute. To access the columns that this SELECT object
    SELECTs from, use the [`SelectBase.selected_columns`](#sqlalchemy.sql.expression.SelectBase.selected_columns
    "sqlalchemy.sql.expression.SelectBase.selected_columns") attribute.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE879]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ClauseElement.compare()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.compare
    "sqlalchemy.sql.expression.ClauseElement.compare") *method of* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
  prefs: []
  type: TYPE_NORMAL
- en: Compare this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") to the given [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  prefs: []
  type: TYPE_NORMAL
- en: Subclasses should override the default behavior, which is a straight identity
    comparison.
  prefs: []
  type: TYPE_NORMAL
- en: '**kw are arguments consumed by subclass `compare()` methods and may be used
    to modify the criteria for comparison (see [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE880]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `CompilerElement.compile()` *method of* `CompilerElement`'
  prefs: []
  type: TYPE_NORMAL
- en: Compile this SQL expression.
  prefs: []
  type: TYPE_NORMAL
- en: The return value is a [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object. Calling `str()` or `unicode()` on the returned
    value will yield a string representation of the result. The [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object also can return a dictionary of bind parameter
    names and values using the `params` accessor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`bind` – An [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    or [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    which can provide a [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    in order to generate a [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object. If the `bind` and `dialect` parameters are
    both omitted, a default SQL compiler is used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`column_keys` – Used for INSERT and UPDATE statements, a list of column names
    which should be present in the VALUES clause of the compiled statement. If `None`,
    all columns from the target table object are rendered.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dialect` – A [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    instance which can generate a [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object. This argument takes precedence over the
    `bind` argument.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`compile_kwargs` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'optional dictionary of additional parameters that will be passed through to
    the compiler within all “visit” methods. This allows any custom flag to be passed
    through to a custom compilation construct, for example. It is also used for the
    case of passing the `literal_binds` flag through:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE881]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[How do I render SQL expressions as strings, possibly with bound parameters
    inlined?](../faq/sqlexpressions.html#faq-sql-expression-string)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE882]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Selectable.corresponding_column()`](#sqlalchemy.sql.expression.Selectable.corresponding_column
    "sqlalchemy.sql.expression.Selectable.corresponding_column") *method of* [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
  prefs: []
  type: TYPE_NORMAL
- en: Given a [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"), return the exported [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") object from the [`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") collection of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable") which corresponds to that original [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") via a common ancestor column.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`column` – the target [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") to be matched.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`require_embedded` – only return corresponding columns for the given [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"), if the given [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") is actually present within a sub-element
    of this [`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable").
    Normally the column will match if it merely shares a common ancestor with one
    of the exported columns of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") - the [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") that is used for the operation.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnCollection.corresponding_column()`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection.corresponding_column
    "sqlalchemy.sql.expression.ColumnCollection.corresponding_column") - implementation
    method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE883]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte
    "sqlalchemy.sql.expression.HasCTE.cte") *method of* [`HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a new [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE"),
    or Common Table Expression instance.
  prefs: []
  type: TYPE_NORMAL
- en: Common table expressions are a SQL standard whereby SELECT statements can draw
    upon secondary statements specified along with the primary statement, using a
    clause called “WITH”. Special semantics regarding UNION can also be employed to
    allow “recursive” queries, where a SELECT statement can draw upon the set of rows
    that have previously been selected.
  prefs: []
  type: TYPE_NORMAL
- en: CTEs can also be applied to DML constructs UPDATE, INSERT and DELETE on some
    databases, both as a source of CTE rows when combined with RETURNING, as well
    as a consumer of CTE rows.
  prefs: []
  type: TYPE_NORMAL
- en: SQLAlchemy detects [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    objects, which are treated similarly to [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") objects, as special elements to be delivered
    to the FROM clause of the statement as well as to a WITH clause at the top of
    the statement.
  prefs: []
  type: TYPE_NORMAL
- en: For special prefixes such as PostgreSQL “MATERIALIZED” and “NOT MATERIALIZED”,
    the `CTE.prefix_with()` method may be used to establish these.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.3.13: Added support for prefixes. In particular - MATERIALIZED
    and NOT MATERIALIZED.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name` – name given to the common table expression. Like [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias"), the name can be left as `None`
    in which case an anonymous symbol will be used at query compile time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`recursive` – if `True`, will render `WITH RECURSIVE`. A recursive common table
    expression is intended to be used in conjunction with UNION ALL in order to derive
    rows from those already selected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nesting` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: if `True`, will render the CTE locally to the statement in which it is referenced.
    For more complex scenarios, the [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") method using the [`HasCTE.add_cte.nest_here`](#sqlalchemy.sql.expression.HasCTE.add_cte.params.nest_here
    "sqlalchemy.sql.expression.HasCTE.add_cte") parameter may also be used to more
    carefully control the exact placement of a particular CTE.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 1.4.24.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte "sqlalchemy.sql.expression.HasCTE.add_cte")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The following examples include two from PostgreSQL’s documentation at [https://www.postgresql.org/docs/current/static/queries-with.html](https://www.postgresql.org/docs/current/static/queries-with.html),
    as well as additional examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example 1, non recursive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE884]'
  prefs: []
  type: TYPE_PRE
- en: 'Example 2, WITH RECURSIVE:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE885]'
  prefs: []
  type: TYPE_PRE
- en: 'Example 3, an upsert using UPDATE and INSERT with CTEs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE886]'
  prefs: []
  type: TYPE_PRE
- en: 'Example 4, Nesting CTE (SQLAlchemy 1.4.24 and above):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE887]'
  prefs: []
  type: TYPE_PRE
- en: 'The above query will render the second CTE nested inside the first, shown with
    inline parameters below as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE888]'
  prefs: []
  type: TYPE_PRE
- en: 'The same CTE can be set up using the [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") method as follows (SQLAlchemy 2.0
    and above):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE889]'
  prefs: []
  type: TYPE_PRE
- en: 'Example 5, Non-Linear CTE (SQLAlchemy 1.4.28 and above):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE890]'
  prefs: []
  type: TYPE_PRE
- en: 'The above query will render 2 UNIONs inside the recursive CTE:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE891]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.cte()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.cte "sqlalchemy.orm.Query.cte")
    - ORM version of [`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte "sqlalchemy.sql.expression.HasCTE.cte").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE892]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") *method of* [`Executable`](#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")'
  prefs: []
  type: TYPE_NORMAL
- en: Set non-SQL options for the statement which take effect during execution.
  prefs: []
  type: TYPE_NORMAL
- en: Execution options can be set at many scopes, including per-statement, per-connection,
    or per execution, using methods such as [`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") and parameters which accept
    a dictionary of options such as [`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute") and [`Session.execute.execution_options`](../orm/session_api.html#sqlalchemy.orm.Session.execute.params.execution_options
    "sqlalchemy.orm.Session.execute").
  prefs: []
  type: TYPE_NORMAL
- en: The primary characteristic of an execution option, as opposed to other kinds
    of options such as ORM loader options, is that **execution options never affect
    the compiled SQL of a query, only things that affect how the SQL statement itself
    is invoked or how results are fetched**. That is, execution options are not part
    of what’s accommodated by SQL compilation nor are they considered part of the
    cached state of a statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") method is [generative](../glossary.html#term-generative),
    as is the case for the method as applied to the [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") and [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") objects, which means when the method is called, a copy
    of the object is returned, which applies the given parameters to that new copy,
    but leaves the original unchanged:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE893]'
  prefs: []
  type: TYPE_PRE
- en: An exception to this behavior is the [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object, where the [`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") method is explicitly **not**
    generative.
  prefs: []
  type: TYPE_NORMAL
- en: 'The kinds of options that may be passed to [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") and other related methods
    and parameter dictionaries include parameters that are explicitly consumed by
    SQLAlchemy Core or ORM, as well as arbitrary keyword arguments not defined by
    SQLAlchemy, which means the methods and/or parameter dictionaries may be used
    for user-defined parameters that interact with custom code, which may access the
    parameters using methods such as [`Executable.get_execution_options()`](#sqlalchemy.sql.expression.Executable.get_execution_options
    "sqlalchemy.sql.expression.Executable.get_execution_options") and [`Connection.get_execution_options()`](connections.html#sqlalchemy.engine.Connection.get_execution_options
    "sqlalchemy.engine.Connection.get_execution_options"), or within selected event
    hooks using a dedicated `execution_options` event parameter such as [`ConnectionEvents.before_execute.execution_options`](events.html#sqlalchemy.events.ConnectionEvents.before_execute.params.execution_options
    "sqlalchemy.events.ConnectionEvents.before_execute") or [`ORMExecuteState.execution_options`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.execution_options
    "sqlalchemy.orm.ORMExecuteState.execution_options"), e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE894]'
  prefs: []
  type: TYPE_PRE
- en: 'Within the scope of options that are explicitly recognized by SQLAlchemy, most
    apply to specific classes of objects and not others. The most common execution
    options include:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Connection.execution_options.isolation_level`](connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") - sets the isolation level for
    a connection or a class of connections via an [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"). This option is accepted only by [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") or [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Connection.execution_options.stream_results`](connections.html#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") - indicates results should be
    fetched using a server side cursor; this option is accepted by [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"), by the [`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute") parameter on [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute"), and additionally by [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") on a SQL statement object,
    as well as by ORM constructs like [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Connection.execution_options.compiled_cache`](connections.html#sqlalchemy.engine.Connection.execution_options.params.compiled_cache
    "sqlalchemy.engine.Connection.execution_options") - indicates a dictionary that
    will serve as the [SQL compilation cache](connections.html#sql-caching) for a
    [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    or [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine"),
    as well as for ORM methods like [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute"). Can be passed as `None` to disable caching
    for statements. This option is not accepted by [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") as it is inadvisable
    to carry along a compilation cache within a statement object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Connection.execution_options.schema_translate_map`](connections.html#sqlalchemy.engine.Connection.execution_options.params.schema_translate_map
    "sqlalchemy.engine.Connection.execution_options") - a mapping of schema names
    used by the [Schema Translate Map](connections.html#schema-translating) feature,
    accepted by [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine"),
    [`Executable`](#sqlalchemy.sql.expression.Executable "sqlalchemy.sql.expression.Executable"),
    as well as by ORM constructs like [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.execute.execution_options`](../orm/session_api.html#sqlalchemy.orm.Session.execute.params.execution_options
    "sqlalchemy.orm.Session.execute")'
  prefs: []
  type: TYPE_NORMAL
- en: '[ORM Execution Options](../orm/queryguide/api.html#orm-queryguide-execution-options)
    - documentation on all ORM-specific execution options'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE895]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`SelectBase.exists()`](#sqlalchemy.sql.expression.SelectBase.exists
    "sqlalchemy.sql.expression.SelectBase.exists") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  prefs: []
  type: TYPE_NORMAL
- en: Return an [`Exists`](#sqlalchemy.sql.expression.Exists "sqlalchemy.sql.expression.Exists")
    representation of this selectable, which can be used as a column expression.
  prefs: []
  type: TYPE_NORMAL
- en: The returned object is an instance of [`Exists`](#sqlalchemy.sql.expression.Exists
    "sqlalchemy.sql.expression.Exists").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`exists()`](#sqlalchemy.sql.expression.exists "sqlalchemy.sql.expression.exists")'
  prefs: []
  type: TYPE_NORMAL
- en: '[EXISTS subqueries](../tutorial/data_select.html#tutorial-exists) - in the
    [2.0 style](../glossary.html#term-2.0-style) tutorial.'
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE896]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`SelectBase.exported_columns`](#sqlalchemy.sql.expression.SelectBase.exported_columns
    "sqlalchemy.sql.expression.SelectBase.exported_columns") *attribute of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  prefs: []
  type: TYPE_NORMAL
- en: A [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") that represents the “exported” columns
    of this [`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable"),
    not including [`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause") constructs.
  prefs: []
  type: TYPE_NORMAL
- en: The “exported” columns for a [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase") object are synonymous with the [`SelectBase.selected_columns`](#sqlalchemy.sql.expression.SelectBase.selected_columns
    "sqlalchemy.sql.expression.SelectBase.selected_columns") collection.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.exported_columns`](#sqlalchemy.sql.expression.Select.exported_columns
    "sqlalchemy.sql.expression.Select.exported_columns")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`FromClause.exported_columns`](#sqlalchemy.sql.expression.FromClause.exported_columns
    "sqlalchemy.sql.expression.FromClause.exported_columns")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE897]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `HasTraverseInternals.get_children()` *method of* `HasTraverseInternals`'
  prefs: []
  type: TYPE_NORMAL
- en: Return immediate child `HasTraverseInternals` elements of this `HasTraverseInternals`.
  prefs: []
  type: TYPE_NORMAL
- en: This is used for visit traversal.
  prefs: []
  type: TYPE_NORMAL
- en: '**kw may contain flags that change the collection that is returned, for example
    to return a subset of items in order to cut down on larger traversals, or to return
    child items from a different context (such as schema-level collections instead
    of clause-level).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE898]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Executable.get_execution_options()`](#sqlalchemy.sql.expression.Executable.get_execution_options
    "sqlalchemy.sql.expression.Executable.get_execution_options") *method of* [`Executable`](#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")'
  prefs: []
  type: TYPE_NORMAL
- en: Get the non-SQL options which will take effect during execution.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.3.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE899]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`SelectBase.get_label_style()`](#sqlalchemy.sql.expression.SelectBase.get_label_style
    "sqlalchemy.sql.expression.SelectBase.get_label_style") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  prefs: []
  type: TYPE_NORMAL
- en: Retrieve the current label style.
  prefs: []
  type: TYPE_NORMAL
- en: Implemented by subclasses.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE900]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `HasCacheKey.inherit_cache` *attribute of* [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.cache_key.HasCacheKey")'
  prefs: []
  type: TYPE_NORMAL
- en: Indicate if this [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") instance should make use of the cache
    key generation scheme used by its immediate superclass.
  prefs: []
  type: TYPE_NORMAL
- en: The attribute defaults to `None`, which indicates that a construct has not yet
    taken into account whether or not its appropriate for it to participate in caching;
    this is functionally equivalent to setting the value to `False`, except that a
    warning is also emitted.
  prefs: []
  type: TYPE_NORMAL
- en: This flag can be set to `True` on a particular class, if the SQL that corresponds
    to the object does not change based on attributes which are local to this class,
    and not its superclass.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Enabling Caching Support for Custom Constructs](compiler.html#compilerext-caching)
    - General guideslines for setting the [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute for third-party
    or user defined SQL constructs.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE901]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ReturnsRows.is_derived_from()`](#sqlalchemy.sql.expression.ReturnsRows.is_derived_from
    "sqlalchemy.sql.expression.ReturnsRows.is_derived_from") *method of* [`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows
    "sqlalchemy.sql.expression.ReturnsRows")'
  prefs: []
  type: TYPE_NORMAL
- en: Return `True` if this [`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows
    "sqlalchemy.sql.expression.ReturnsRows") is ‘derived’ from the given [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: An example would be an Alias of a Table is derived from that Table.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE902]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`SelectBase.label()`](#sqlalchemy.sql.expression.SelectBase.label
    "sqlalchemy.sql.expression.SelectBase.label") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a ‘scalar’ representation of this selectable, embedded as a subquery
    with a label.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE903]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`SelectBase.lateral()`](#sqlalchemy.sql.expression.SelectBase.lateral
    "sqlalchemy.sql.expression.SelectBase.lateral") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a LATERAL alias of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable").
  prefs: []
  type: TYPE_NORMAL
- en: The return value is the [`Lateral`](#sqlalchemy.sql.expression.Lateral "sqlalchemy.sql.expression.Lateral")
    construct also provided by the top-level [`lateral()`](#sqlalchemy.sql.expression.lateral
    "sqlalchemy.sql.expression.lateral") function.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[LATERAL correlation](../tutorial/data_select.html#tutorial-lateral-correlation)
    - overview of usage.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE904]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Executable.options()`](#sqlalchemy.sql.expression.Executable.options
    "sqlalchemy.sql.expression.Executable.options") *method of* [`Executable`](#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")'
  prefs: []
  type: TYPE_NORMAL
- en: Apply options to this statement.
  prefs: []
  type: TYPE_NORMAL
- en: In the general sense, options are any kind of Python object that can be interpreted
    by the SQL compiler for the statement. These options can be consumed by specific
    dialects or specific kinds of compilers.
  prefs: []
  type: TYPE_NORMAL
- en: The most commonly known kind of option are the ORM level options that apply
    “eager load” and other loading behaviors to an ORM query. However, options can
    theoretically be used for many other purposes.
  prefs: []
  type: TYPE_NORMAL
- en: For background on specific kinds of options for specific kinds of statements,
    refer to the documentation for those option objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: - added [`Executable.options()`](#sqlalchemy.sql.expression.Executable.options
    "sqlalchemy.sql.expression.Executable.options") to Core statement objects towards
    the goal of allowing unified Core / ORM querying capabilities.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Column Loading Options](../orm/queryguide/columns.html#loading-columns) -
    refers to options specific to the usage of ORM queries'
  prefs: []
  type: TYPE_NORMAL
- en: '[Relationship Loading with Loader Options](../orm/queryguide/relationships.html#relationship-loader-options)
    - refers to options specific to the usage of ORM queries'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE905]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ClauseElement.params()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.params
    "sqlalchemy.sql.expression.ClauseElement.params") *method of* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a copy with [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") elements replaced.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns a copy of this ClauseElement with [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") elements replaced with values taken from
    the given dictionary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE906]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE907]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Selectable.replace_selectable()`](#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") *method of* [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
  prefs: []
  type: TYPE_NORMAL
- en: Replace all occurrences of [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") ‘old’ with the given [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") object, returning a copy of this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.4: The [`Selectable.replace_selectable()`](#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") method is deprecated,
    and will be removed in a future release. Similar functionality is available via
    the sqlalchemy.sql.visitors module.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE908]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a ‘scalar’ representation of this selectable, which can be used as a
    column expression.
  prefs: []
  type: TYPE_NORMAL
- en: The returned object is an instance of [`ScalarSelect`](#sqlalchemy.sql.expression.ScalarSelect
    "sqlalchemy.sql.expression.ScalarSelect").
  prefs: []
  type: TYPE_NORMAL
- en: Typically, a select statement which has only one column in its columns clause
    is eligible to be used as a scalar expression. The scalar subquery can then be
    used in the WHERE clause or columns clause of an enclosing SELECT.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the scalar subquery differentiates from the FROM-level subquery that
    can be produced using the [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") method.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Scalar and Correlated Subqueries](../tutorial/data_select.html#tutorial-scalar-subquery)
    - in the 2.0 tutorial'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE909]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`SelectBase.select()`](#sqlalchemy.sql.expression.SelectBase.select
    "sqlalchemy.sql.expression.SelectBase.select") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.4: The [`SelectBase.select()`](#sqlalchemy.sql.expression.SelectBase.select
    "sqlalchemy.sql.expression.SelectBase.select") method is deprecated and will be
    removed in a future release; this method implicitly creates a subquery that should
    be explicit. Please call [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") first in order to create a subquery,
    which then can be selected.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE910]'
  prefs: []
  type: TYPE_PRE
- en: A [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") representing the columns that this
    SELECT statement or similar construct returns in its result set, not including
    [`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause "sqlalchemy.sql.expression.TextClause")
    constructs.
  prefs: []
  type: TYPE_NORMAL
- en: This collection differs from the [`FromClause.columns`](#sqlalchemy.sql.expression.FromClause.columns
    "sqlalchemy.sql.expression.FromClause.columns") collection of a [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") in that the columns within this collection
    cannot be directly nested inside another SELECT statement; a subquery must be
    applied first which provides for the necessary parenthesization required by SQL.
  prefs: []
  type: TYPE_NORMAL
- en: For a [`TextualSelect`](#sqlalchemy.sql.expression.TextualSelect "sqlalchemy.sql.expression.TextualSelect")
    construct, the collection contains the [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") objects that were passed to the constructor,
    typically via the [`TextClause.columns()`](sqlelement.html#sqlalchemy.sql.expression.TextClause.columns
    "sqlalchemy.sql.expression.TextClause.columns") method.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE911]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ClauseElement.self_group()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.self_group
    "sqlalchemy.sql.expression.ClauseElement.self_group") *method of* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
  prefs: []
  type: TYPE_NORMAL
- en: Apply a ‘grouping’ to this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  prefs: []
  type: TYPE_NORMAL
- en: This method is overridden by subclasses to return a “grouping” construct, i.e.
    parenthesis. In particular it’s used by “binary” expressions to provide a grouping
    around themselves when placed into a larger expression, as well as by [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs when placed into the FROM clause
    of another [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select").
    (Note that subqueries should be normally created using the [`Select.alias()`](#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") method, as many platforms require nested
    SELECT statements to be named).
  prefs: []
  type: TYPE_NORMAL
- en: As expressions are composed together, the application of [`self_group()`](#sqlalchemy.sql.expression.TextualSelect.self_group
    "sqlalchemy.sql.expression.TextualSelect.self_group") is automatic - end-user
    code should never need to use this method directly. Note that SQLAlchemy’s clause
    constructs take operator precedence into account - so parenthesis might not be
    needed, for example, in an expression like `x OR (y AND z)` - AND takes precedence
    over OR.
  prefs: []
  type: TYPE_NORMAL
- en: The base [`self_group()`](#sqlalchemy.sql.expression.TextualSelect.self_group
    "sqlalchemy.sql.expression.TextualSelect.self_group") method of [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") just returns self.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE912]'
  prefs: []
  type: TYPE_PRE
- en: Return a new selectable with the specified label style.
  prefs: []
  type: TYPE_NORMAL
- en: Implemented by subclasses.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE913]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a subquery of this [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase").
  prefs: []
  type: TYPE_NORMAL
- en: A subquery is from a SQL perspective a parenthesized, named construct that can
    be placed in the FROM clause of another SELECT statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'Given a SELECT statement such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE914]'
  prefs: []
  type: TYPE_PRE
- en: 'The above statement might look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE915]'
  prefs: []
  type: TYPE_PRE
- en: 'The subquery form by itself renders the same way, however when embedded into
    the FROM clause of another SELECT statement, it becomes a named sub-element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE916]'
  prefs: []
  type: TYPE_PRE
- en: 'The above renders as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE917]'
  prefs: []
  type: TYPE_PRE
- en: Historically, [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") is equivalent to calling the
    [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias "sqlalchemy.sql.expression.FromClause.alias")
    method on a FROM object; however, as a [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase") object is not directly FROM object, the
    [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery "sqlalchemy.sql.expression.SelectBase.subquery")
    method provides clearer semantics.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE918]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ClauseElement.unique_params()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.unique_params
    "sqlalchemy.sql.expression.ClauseElement.unique_params") *method of* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a copy with [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") elements replaced.
  prefs: []
  type: TYPE_NORMAL
- en: Same functionality as [`ClauseElement.params()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.params
    "sqlalchemy.sql.expression.ClauseElement.params"), except adds unique=True to
    affected bind parameters so that multiple statements can be used.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE919]'
  prefs: []
  type: TYPE_PRE
- en: Represent a `VALUES` construct that can be used as a FROM element in a statement.
  prefs: []
  type: TYPE_NORMAL
- en: The [`Values`](#sqlalchemy.sql.expression.Values "sqlalchemy.sql.expression.Values")
    object is created from the [`values()`](#sqlalchemy.sql.expression.values "sqlalchemy.sql.expression.values")
    function.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[alias()](#sqlalchemy.sql.expression.Values.alias), [data()](#sqlalchemy.sql.expression.Values.data),
    [lateral()](#sqlalchemy.sql.expression.Values.lateral), [scalar_values()](#sqlalchemy.sql.expression.Values.scalar_values)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.expression.Values`](#sqlalchemy.sql.expression.Values
    "sqlalchemy.sql.expression.Values") (`sqlalchemy.sql.roles.InElementRole`, `sqlalchemy.sql.expression.Generative`,
    `sqlalchemy.sql.expression.LateralFromClause`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE920]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`Values`](#sqlalchemy.sql.expression.Values "sqlalchemy.sql.expression.Values")
    construct that is a copy of this one with the given name.
  prefs: []
  type: TYPE_NORMAL
- en: This method is a VALUES-specific specialization of the [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") method.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Using Aliases](../tutorial/data_select.html#tutorial-using-aliases)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`alias()`](#sqlalchemy.sql.expression.alias "sqlalchemy.sql.expression.alias")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE921]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`Values`](#sqlalchemy.sql.expression.Values "sqlalchemy.sql.expression.Values")
    construct, adding the given data to the data list.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE922]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**values** – a sequence (i.e. list) of tuples that map to the column expressions
    given in the [`Values`](#sqlalchemy.sql.expression.Values "sqlalchemy.sql.expression.Values")
    constructor.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE923]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`Values`](#sqlalchemy.sql.expression.Values "sqlalchemy.sql.expression.Values")
    with the lateral flag set, so that it renders as LATERAL.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`lateral()`](#sqlalchemy.sql.expression.lateral "sqlalchemy.sql.expression.lateral")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE924]'
  prefs: []
  type: TYPE_PRE
- en: Returns a scalar `VALUES` construct that can be used as a COLUMN element in
    a statement.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.0b4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE925]'
  prefs: []
  type: TYPE_PRE
- en: Represent a scalar `VALUES` construct that can be used as a COLUMN element in
    a statement.
  prefs: []
  type: TYPE_NORMAL
- en: The [`ScalarValues`](#sqlalchemy.sql.expression.ScalarValues "sqlalchemy.sql.expression.ScalarValues")
    object is created from the [`Values.scalar_values()`](#sqlalchemy.sql.expression.Values.scalar_values
    "sqlalchemy.sql.expression.Values.scalar_values") method. It’s also automatically
    generated when a [`Values`](#sqlalchemy.sql.expression.Values "sqlalchemy.sql.expression.Values")
    is used in an `IN` or `NOT IN` condition.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.0b4.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.expression.ScalarValues`](#sqlalchemy.sql.expression.ScalarValues
    "sqlalchemy.sql.expression.ScalarValues") (`sqlalchemy.sql.roles.InElementRole`,
    `sqlalchemy.sql.expression.GroupedElement`, [`sqlalchemy.sql.expression.ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"))
  prefs: []
  type: TYPE_NORMAL
- en: Label Style Constants
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Constants used with the [`GenerativeSelect.set_label_style()`](#sqlalchemy.sql.expression.GenerativeSelect.set_label_style
    "sqlalchemy.sql.expression.GenerativeSelect.set_label_style") method.
  prefs: []
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [SelectLabelStyle](#sqlalchemy.sql.expression.SelectLabelStyle) | Label style
    constants that may be passed to [`Select.set_label_style()`](#sqlalchemy.sql.expression.Select.set_label_style
    "sqlalchemy.sql.expression.Select.set_label_style"). |'
  prefs: []
  type: TYPE_TB
- en: '[PRE926]'
  prefs: []
  type: TYPE_PRE
- en: Label style constants that may be passed to [`Select.set_label_style()`](#sqlalchemy.sql.expression.Select.set_label_style
    "sqlalchemy.sql.expression.Select.set_label_style").
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[LABEL_STYLE_DEFAULT](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_DEFAULT),
    [LABEL_STYLE_DISAMBIGUATE_ONLY](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_DISAMBIGUATE_ONLY),
    [LABEL_STYLE_NONE](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_NONE),
    [LABEL_STYLE_TABLENAME_PLUS_COL](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.expression.SelectLabelStyle`](#sqlalchemy.sql.expression.SelectLabelStyle
    "sqlalchemy.sql.expression.SelectLabelStyle") (`enum.Enum`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE927]'
  prefs: []
  type: TYPE_PRE
- en: The default label style, refers to `LABEL_STYLE_DISAMBIGUATE_ONLY`.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE928]'
  prefs: []
  type: TYPE_PRE
- en: Label style indicating that columns with a name that conflicts with an existing
    name should be labeled with a semi-anonymizing label when generating the columns
    clause of a SELECT statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'Below, most column names are left unaffected, except for the second occurrence
    of the name `columna`, which is labeled using the label `columna_1` to disambiguate
    it from that of `tablea.columna`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE929]'
  prefs: []
  type: TYPE_PRE
- en: Used with the [`GenerativeSelect.set_label_style()`](#sqlalchemy.sql.expression.GenerativeSelect.set_label_style
    "sqlalchemy.sql.expression.GenerativeSelect.set_label_style") method, `LABEL_STYLE_DISAMBIGUATE_ONLY`
    is the default labeling style for all SELECT statements outside of [1.x style](../glossary.html#term-1.x-style)
    ORM queries.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE930]'
  prefs: []
  type: TYPE_PRE
- en: Label style indicating no automatic labeling should be applied to the columns
    clause of a SELECT statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'Below, the columns named `columna` are both rendered as is, meaning that the
    name `columna` can only refer to the first occurrence of this name within a result
    set, as well as if the statement were used as a subquery:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE931]'
  prefs: []
  type: TYPE_PRE
- en: Used with the [`Select.set_label_style()`](#sqlalchemy.sql.expression.Select.set_label_style
    "sqlalchemy.sql.expression.Select.set_label_style") method.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE932]'
  prefs: []
  type: TYPE_PRE
- en: Label style indicating all columns should be labeled as `<tablename>_<columnname>`
    when generating the columns clause of a SELECT statement, to disambiguate same-named
    columns referenced from different tables, aliases, or subqueries.
  prefs: []
  type: TYPE_NORMAL
- en: 'Below, all column names are given a label so that the two same-named columns
    `columna` are disambiguated as `table1_columna` and `table2_columna`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE933]'
  prefs: []
  type: TYPE_PRE
- en: Used with the [`GenerativeSelect.set_label_style()`](#sqlalchemy.sql.expression.GenerativeSelect.set_label_style
    "sqlalchemy.sql.expression.GenerativeSelect.set_label_style") method. Equivalent
    to the legacy method `Select.apply_labels()`; `LABEL_STYLE_TABLENAME_PLUS_COL`
    is SQLAlchemy’s legacy auto-labeling style. `LABEL_STYLE_DISAMBIGUATE_ONLY` provides
    a less intrusive approach to disambiguation of same-named column expressions.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.set_label_style()`](#sqlalchemy.sql.expression.Select.set_label_style
    "sqlalchemy.sql.expression.Select.set_label_style")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.get_label_style()`](#sqlalchemy.sql.expression.Select.get_label_style
    "sqlalchemy.sql.expression.Select.get_label_style")'
  prefs: []
  type: TYPE_NORMAL
