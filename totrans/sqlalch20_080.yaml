- en: SELECT and Related Constructs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SELECT 及相关构造
- en: 原文：[https://docs.sqlalchemy.org/en/20/core/selectable.html](https://docs.sqlalchemy.org/en/20/core/selectable.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/core/selectable.html](https://docs.sqlalchemy.org/en/20/core/selectable.html)
- en: The term “selectable” refers to any object that represents database rows. In
    SQLAlchemy, these objects descend from [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable"), the most prominent being [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select"), which represents a SQL SELECT statement.
    A subset of [`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable")
    is [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause"),
    which represents objects that can be within the FROM clause of a [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") statement. A distinguishing feature of [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") is the [`FromClause.c`](#sqlalchemy.sql.expression.FromClause.c
    "sqlalchemy.sql.expression.FromClause.c") attribute, which is a namespace of all
    the columns contained within the FROM clause (these elements are themselves [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") subclasses).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 术语“可选择的”指代任何代表数据库行的对象。在SQLAlchemy中，这些对象都是 [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable") 的子类，其中最突出的是 [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select")，它表示一个SQL SELECT语句。[`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable") 的一个子集是 [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")，它表示可以在 [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") 语句的 FROM 子句中的对象。[`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") 的一个区别性特征是 [`FromClause.c`](#sqlalchemy.sql.expression.FromClause.c
    "sqlalchemy.sql.expression.FromClause.c") 属性，它是 FROM 子句中包含的所有列的命名空间（这些元素本身是 [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") 的子类）。
- en: '## Selectable Foundational Constructors'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '## 可选择的基本构造'
- en: Top level “FROM clause” and “SELECT” constructors.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 最高级的“FROM 子句”和“SELECT”构造器。
- en: '| Object Name | Description |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [except_](#sqlalchemy.sql.expression.except_)(*selects) | Return an `EXCEPT`
    of multiple selectables. |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| [except_](#sqlalchemy.sql.expression.except_)(*selects) | 返回多个可选项的 `EXCEPT`。
    |'
- en: '| [except_all](#sqlalchemy.sql.expression.except_all)(*selects) | Return an
    `EXCEPT ALL` of multiple selectables. |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| [except_all](#sqlalchemy.sql.expression.except_all)(*selects) | 返回多个可选项的
    `EXCEPT ALL`。 |'
- en: '| [exists](#sqlalchemy.sql.expression.exists)([__argument]) | Construct a new
    [`Exists`](#sqlalchemy.sql.expression.Exists "sqlalchemy.sql.expression.Exists")
    construct. |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| [exists](#sqlalchemy.sql.expression.exists)([__argument]) | 构造一个新的 [`Exists`](#sqlalchemy.sql.expression.Exists
    "sqlalchemy.sql.expression.Exists") 构造。 |'
- en: '| [intersect](#sqlalchemy.sql.expression.intersect)(*selects) | Return an `INTERSECT`
    of multiple selectables. |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| [intersect](#sqlalchemy.sql.expression.intersect)(*selects) | 返回多个可选项的 `INTERSECT`。
    |'
- en: '| [intersect_all](#sqlalchemy.sql.expression.intersect_all)(*selects) | Return
    an `INTERSECT ALL` of multiple selectables. |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| [intersect_all](#sqlalchemy.sql.expression.intersect_all)(*selects) | 返回多个可选项的
    `INTERSECT ALL`。 |'
- en: '| [select](#sqlalchemy.sql.expression.select)(*entities, **__kw) | Construct
    a new [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select").
    |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| [select](#sqlalchemy.sql.expression.select)(*entities, **__kw) | 构造一个新的 [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select")。 |'
- en: '| [table](#sqlalchemy.sql.expression.table)(name, *columns, **kw) | Produce
    a new [`TableClause`](#sqlalchemy.sql.expression.TableClause "sqlalchemy.sql.expression.TableClause").
    |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| [table](#sqlalchemy.sql.expression.table)(name, *columns, **kw) | 生成一个新的
    [`TableClause`](#sqlalchemy.sql.expression.TableClause "sqlalchemy.sql.expression.TableClause")。
    |'
- en: '| [union](#sqlalchemy.sql.expression.union)(*selects) | Return a `UNION` of
    multiple selectables. |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| [union](#sqlalchemy.sql.expression.union)(*selects) | 返回多个可选项的 `UNION`。 |'
- en: '| [union_all](#sqlalchemy.sql.expression.union_all)(*selects) | Return a `UNION
    ALL` of multiple selectables. |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| [union_all](#sqlalchemy.sql.expression.union_all)(*selects) | 返回多个可选项的 `UNION
    ALL`。 |'
- en: '| [values](#sqlalchemy.sql.expression.values)(*columns, [name, literal_binds])
    | Construct a [`Values`](#sqlalchemy.sql.expression.Values "sqlalchemy.sql.expression.Values")
    construct. |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| [values](#sqlalchemy.sql.expression.values)(*columns, [name, literal_binds])
    | 构造一个 [`Values`](#sqlalchemy.sql.expression.Values "sqlalchemy.sql.expression.Values")
    构造。 |'
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Return an `EXCEPT` of multiple selectables.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 返回多个可选项的 `EXCEPT`。
- en: The returned object is an instance of [`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect
    "sqlalchemy.sql.expression.CompoundSelect").
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的对象是一个[`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect "sqlalchemy.sql.expression.CompoundSelect")的实例。
- en: 'Parameters:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '***selects** – a list of [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    instances.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '***selects** – 一个[`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")实例的列表。'
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Return an `EXCEPT ALL` of multiple selectables.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 返回多个可选择的`EXCEPT ALL`。
- en: The returned object is an instance of [`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect
    "sqlalchemy.sql.expression.CompoundSelect").
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的对象是一个[`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect "sqlalchemy.sql.expression.CompoundSelect")的实例。
- en: 'Parameters:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '***selects** – a list of [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    instances.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '***selects** – 一个[`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")实例的列表。'
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Construct a new [`Exists`](#sqlalchemy.sql.expression.Exists "sqlalchemy.sql.expression.Exists")
    construct.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个新的[`Exists`](#sqlalchemy.sql.expression.Exists "sqlalchemy.sql.expression.Exists")构造。
- en: 'The [`exists()`](#sqlalchemy.sql.expression.exists "sqlalchemy.sql.expression.exists")
    can be invoked by itself to produce an [`Exists`](#sqlalchemy.sql.expression.Exists
    "sqlalchemy.sql.expression.Exists") construct, which will accept simple WHERE
    criteria:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '[`exists()`](#sqlalchemy.sql.expression.exists "sqlalchemy.sql.expression.exists")可以单独调用以生成一个[`Exists`](#sqlalchemy.sql.expression.Exists
    "sqlalchemy.sql.expression.Exists")构造，该构造将接受简单的WHERE条件：'
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'However, for greater flexibility in constructing the SELECT, an existing [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") construct may be converted to an [`Exists`](#sqlalchemy.sql.expression.Exists
    "sqlalchemy.sql.expression.Exists"), most conveniently by making use of the [`SelectBase.exists()`](#sqlalchemy.sql.expression.SelectBase.exists
    "sqlalchemy.sql.expression.SelectBase.exists") method:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，为了在构建SELECT时具有更大的灵活性，可以将现有的[`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")构造转换为[`Exists`](#sqlalchemy.sql.expression.Exists
    "sqlalchemy.sql.expression.Exists")，最方便的方法是利用[`SelectBase.exists()`](#sqlalchemy.sql.expression.SelectBase.exists
    "sqlalchemy.sql.expression.SelectBase.exists")方法：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The EXISTS criteria is then used inside of an enclosing SELECT:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: EXISTS条件然后在封闭的SELECT中使用：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The above statement will then be of the form:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 上述语句将如下形式：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: See also
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[EXISTS subqueries](../tutorial/data_select.html#tutorial-exists) - in the
    [2.0 style](../glossary.html#term-2.0-style) tutorial.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '[EXISTS子查询](../tutorial/data_select.html#tutorial-exists) - 在[2.0风格](../glossary.html#term-2.0-style)教程中。'
- en: '[`SelectBase.exists()`](#sqlalchemy.sql.expression.SelectBase.exists "sqlalchemy.sql.expression.SelectBase.exists")
    - method to transform a `SELECT` to an `EXISTS` clause.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SelectBase.exists()`](#sqlalchemy.sql.expression.SelectBase.exists "sqlalchemy.sql.expression.SelectBase.exists")
    - 将`SELECT`转换为`EXISTS`子句的方法。'
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Return an `INTERSECT` of multiple selectables.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 返回多个可选择的`INTERSECT`。
- en: The returned object is an instance of [`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect
    "sqlalchemy.sql.expression.CompoundSelect").
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的对象是一个[`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect "sqlalchemy.sql.expression.CompoundSelect")的实例。
- en: 'Parameters:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '***selects** – a list of [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    instances.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '***selects** – 一个[`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")实例的列表。'
- en: '[PRE8]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Return an `INTERSECT ALL` of multiple selectables.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 返回多个可选择的`INTERSECT ALL`。
- en: The returned object is an instance of [`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect
    "sqlalchemy.sql.expression.CompoundSelect").
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的对象是一个[`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect "sqlalchemy.sql.expression.CompoundSelect")的实例。
- en: 'Parameters:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '***selects** – a list of [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    instances.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '***selects** – 一个[`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")实例的列表。'
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Construct a new [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select").
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个新的[`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")。
- en: 'New in version 1.4: - The [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    function now accepts column arguments positionally. The top-level [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") function will automatically use the 1.x or
    2.x style API based on the incoming arguments; using [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") from the `sqlalchemy.future` module will enforce
    that only the 2.x style constructor is used.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本1.4中：- [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")函数现在可以按位置接受列参数。顶层的[`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")函数将根据传入的参数自动使用1.x或2.x风格的API；使用来自`sqlalchemy.future`模块的[`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")将强制使用仅使用2.x风格的构造函数。
- en: Similar functionality is also available via the [`FromClause.select()`](#sqlalchemy.sql.expression.FromClause.select
    "sqlalchemy.sql.expression.FromClause.select") method on any [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 类似的功能也可通过任何[`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")上的[`FromClause.select()`](#sqlalchemy.sql.expression.FromClause.select
    "sqlalchemy.sql.expression.FromClause.select")方法获得。
- en: See also
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using SELECT Statements](../tutorial/data_select.html#tutorial-selecting-data)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用SELECT语句](../tutorial/data_select.html#tutorial-selecting-data) - 在[SQLAlchemy统一教程](../tutorial/index.html#unified-tutorial)中'
- en: 'Parameters:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '***entities** –'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '***entities** –'
- en: Entities to SELECT from. For Core usage, this is typically a series of [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") and / or [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") objects which will form the columns clause
    of the resulting statement. For those objects that are instances of [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") (typically [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") or [`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    objects), the [`FromClause.c`](#sqlalchemy.sql.expression.FromClause.c "sqlalchemy.sql.expression.FromClause.c")
    collection is extracted to form a collection of [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") objects.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要从中选择的实体。对于核心用法，这通常是一系列将形成结果语句的列子句的[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")和/或[`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")对象。对于那些是[`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")的实例的对象（通常是[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")或[`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")对象），[`FromClause.c`](#sqlalchemy.sql.expression.FromClause.c
    "sqlalchemy.sql.expression.FromClause.c") 集合被提取出来形成[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")对象的集合。
- en: This parameter will also accept [`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause") constructs as given, as well as ORM-mapped
    classes.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 此参数还将接受[`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause "sqlalchemy.sql.expression.TextClause")构造，以及ORM映射的类。
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Produce a new [`TableClause`](#sqlalchemy.sql.expression.TableClause "sqlalchemy.sql.expression.TableClause").
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的[`TableClause`](#sqlalchemy.sql.expression.TableClause "sqlalchemy.sql.expression.TableClause")。
- en: The object returned is an instance of [`TableClause`](#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause"), which represents the “syntactical” portion
    of the schema-level [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object. It may be used to construct lightweight table constructs.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的对象是[`TableClause`](#sqlalchemy.sql.expression.TableClause "sqlalchemy.sql.expression.TableClause")的一个实例，它表示架构级别的[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象的“句法”部分。它可用于构建轻量级的表构造。
- en: 'Parameters:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`name` – Name of the table.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 表的名称。'
- en: '`columns` – A collection of [`column()`](sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column") constructs.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`columns` – 一个[`column()`](sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column") 构造的集合。'
- en: '`schema` –'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` –'
- en: The schema name for this table.
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此表的架构名称。
- en: 'New in version 1.3.18: [`table()`](#sqlalchemy.sql.expression.table "sqlalchemy.sql.expression.table")
    can now accept a `schema` argument.'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版本1.3.18中：[`table()`](#sqlalchemy.sql.expression.table "sqlalchemy.sql.expression.table")现在可以接受一个`schema`参数。
- en: '[PRE11]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Return a `UNION` of multiple selectables.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 返回多个可选择的`UNION`。
- en: The returned object is an instance of [`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect
    "sqlalchemy.sql.expression.CompoundSelect").
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的对象是[`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect "sqlalchemy.sql.expression.CompoundSelect")的一个实例。
- en: A similar [`union()`](#sqlalchemy.sql.expression.union "sqlalchemy.sql.expression.union")
    method is available on all [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") subclasses.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 所有[`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")子类上都有一个类似的[`union()`](#sqlalchemy.sql.expression.union
    "sqlalchemy.sql.expression.union")方法。
- en: 'Parameters:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*selects` – a list of [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    instances.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*selects` – 一个[`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")实例列表。'
- en: '`**kwargs` – available keyword arguments are the same as those of [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select").'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kwargs` – 可用的关键字参数与[`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")的相同。'
- en: '[PRE12]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Return a `UNION ALL` of multiple selectables.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 返回多个可选择的`UNION ALL`。
- en: The returned object is an instance of [`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect
    "sqlalchemy.sql.expression.CompoundSelect").
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的对象是[`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect "sqlalchemy.sql.expression.CompoundSelect")的一个实例。
- en: A similar [`union_all()`](#sqlalchemy.sql.expression.union_all "sqlalchemy.sql.expression.union_all")
    method is available on all [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") subclasses.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 所有[`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")子类上都有一个类似的[`union_all()`](#sqlalchemy.sql.expression.union_all
    "sqlalchemy.sql.expression.union_all")方法。
- en: 'Parameters:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '***selects** – a list of [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    instances.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '***selects** – 一个[`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")实例列表。'
- en: '[PRE13]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Construct a [`Values`](#sqlalchemy.sql.expression.Values "sqlalchemy.sql.expression.Values")
    construct.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个[`Values`](#sqlalchemy.sql.expression.Values "sqlalchemy.sql.expression.Values")构造。
- en: 'The column expressions and the actual data for [`Values`](#sqlalchemy.sql.expression.Values
    "sqlalchemy.sql.expression.Values") are given in two separate steps. The constructor
    receives the column expressions typically as [`column()`](sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column") constructs, and the data is then passed via
    the [`Values.data()`](#sqlalchemy.sql.expression.Values.data "sqlalchemy.sql.expression.Values.data")
    method as a list, which can be called multiple times to add more data, e.g.:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 列表达式和[`Values`](#sqlalchemy.sql.expression.Values "sqlalchemy.sql.expression.Values")的实际数据在两个独立的步骤中给出。构造函数通常接收列表达式，通常作为[`column()`](sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column")构造，并且数据通过[`Values.data()`](#sqlalchemy.sql.expression.Values.data
    "sqlalchemy.sql.expression.Values.data")方法传递为一个列表，可以多次调用以添加更多数据，例如：
- en: '[PRE14]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Parameters:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*columns` – column expressions, typically composed using [`column()`](sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column") objects.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*columns` – 列表达式，通常使用[`column()`](sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column")对象组成。'
- en: '`name` – the name for this VALUES construct. If omitted, the VALUES construct
    will be unnamed in a SQL expression. Different backends may have different requirements
    here.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 此VALUES构造的名称。如果省略，VALUES构造将在SQL表达式中无名。不同的后端可能对此有不同的要求。'
- en: '`literal_binds` – Defaults to False. Whether or not to render the data values
    inline in the SQL output, rather than using bound parameters.  ## Selectable Modifier
    Constructors'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`literal_binds` – 默认为False。是否在SQL输出中内联呈现数据值，而不是使用绑定参数。## 可选择修饰符构造函数'
- en: Functions listed here are more commonly available as methods from [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") and [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable") elements, for example, the [`alias()`](#sqlalchemy.sql.expression.alias
    "sqlalchemy.sql.expression.alias") function is usually invoked via the [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") method.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 此处列出的函数通常作为[`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")和[`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")元素的方法更常见，例如，[`alias()`](#sqlalchemy.sql.expression.alias
    "sqlalchemy.sql.expression.alias")函数通常通过[`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias")方法调用。
- en: '| Object Name | Description |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [alias](#sqlalchemy.sql.expression.alias)(selectable[, name, flat]) | Return
    a named alias of the given [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause"). |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| [alias](#sqlalchemy.sql.expression.alias)(selectable[, name, flat]) | 返回给定[`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")的命名别名。 |'
- en: '| [cte](#sqlalchemy.sql.expression.cte)(selectable[, name, recursive]) | Return
    a new [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE"),
    or Common Table Expression instance. |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| [cte](#sqlalchemy.sql.expression.cte)(selectable[, name, recursive]) | 返回一个新的
    [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")，或者公共表达式实例。
    |'
- en: '| [join](#sqlalchemy.sql.expression.join)(left, right[, onclause, isouter,
    ...]) | Produce a [`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    object, given two [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    expressions. |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| [join](#sqlalchemy.sql.expression.join)(left, right[, onclause, isouter,
    ...]) | 生成一个给定两个[`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")表达式的[`Join`](#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join")对象。 |'
- en: '| [lateral](#sqlalchemy.sql.expression.lateral)(selectable[, name]) | Return
    a [`Lateral`](#sqlalchemy.sql.expression.Lateral "sqlalchemy.sql.expression.Lateral")
    object. |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| [lateral](#sqlalchemy.sql.expression.lateral)(selectable[, name]) | 返回一个[`Lateral`](#sqlalchemy.sql.expression.Lateral
    "sqlalchemy.sql.expression.Lateral")对象。 |'
- en: '| [outerjoin](#sqlalchemy.sql.expression.outerjoin)(left, right[, onclause,
    full]) | Return an `OUTER JOIN` clause element. |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| [outerjoin](#sqlalchemy.sql.expression.outerjoin)(left, right[, onclause,
    full]) | 返回一个 `OUTER JOIN` 子句元素。 |'
- en: '| [tablesample](#sqlalchemy.sql.expression.tablesample)(selectable, sampling[,
    name, seed]) | Return a [`TableSample`](#sqlalchemy.sql.expression.TableSample
    "sqlalchemy.sql.expression.TableSample") object. |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| [tablesample](#sqlalchemy.sql.expression.tablesample)(selectable, sampling[,
    name, seed]) | 返回一个[`TableSample`](#sqlalchemy.sql.expression.TableSample "sqlalchemy.sql.expression.TableSample")对象。
    |'
- en: '[PRE15]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Return a named alias of the given [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定[`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")的命名别名。
- en: For [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    and [`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    objects, the return type is the [`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    object. Other kinds of `NamedFromClause` objects may be returned for other kinds
    of [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    objects.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 对于[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")和[`Join`](#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join")对象，返回类型为[`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias")对象。其他类型的`NamedFromClause`对象可能会针对其他类型的[`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")对象返回。
- en: The named alias represents any [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") with an alternate name assigned within
    SQL, typically using the `AS` clause when generated, e.g. `SELECT * FROM table
    AS aliasname`.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 命名别名表示任何在 SQL 中分配了替代名称的[`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")，通常在生成时使用 `AS` 子句，例如 `SELECT * FROM table
    AS aliasname`。
- en: Equivalent functionality is available via the [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") method available on all [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") objects.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 等效功能可通过[`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias "sqlalchemy.sql.expression.FromClause.alias")方法在所有[`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")对象上使用。
- en: 'Parameters:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`selectable` – any [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    subclass, such as a table, select statement, etc.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`selectable` – 任何[`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")子类，例如表格，选择语句等。'
- en: '`name` – string name to be assigned as the alias. If `None`, a name will be
    deterministically generated at compile time. Deterministic means the name is guaranteed
    to be unique against other constructs used in the same statement, and will also
    be the same name for each successive compilation of the same statement object.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 要分配为别名的字符串名称。如果为`None`，则将在编译时确定性地生成一个名称。确定性意味着该名称保证与同一语句中使用的其他构造唯一，并且对于同一语句对象的每次连续编译也将是相同的名称。'
- en: '`flat` – Will be passed through to if the given selectable is an instance of
    [`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join") - see
    `Join.alias()` for details.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flat` – 如果给定的可选对象是 [`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    的实例，则将传递给 `Join.alias()` - 有关详细信息，请参阅 `Join.alias()`。'
- en: '[PRE16]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Return a new [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE"),
    or Common Table Expression instance.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的 [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    或公共表达式实例。
- en: Please see [`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte "sqlalchemy.sql.expression.HasCTE.cte")
    for detail on CTE usage.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅 [`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte "sqlalchemy.sql.expression.HasCTE.cte")
    了解 CTE 用法的详细信息。
- en: '[PRE17]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Produce a [`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    object, given two [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    expressions.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 给定两个 [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    表达式，生成一个 [`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    对象。
- en: 'E.g.:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE18]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'would emit SQL along the lines of:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 将会生成类似的 SQL：
- en: '[PRE19]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Similar functionality is available given any [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") object (e.g. such as a [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")) using the [`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join") method.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 类似的功能可在任何 [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    对象（例如 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")）上使用
    [`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join "sqlalchemy.sql.expression.FromClause.join")
    方法。
- en: 'Parameters:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`left` – The left side of the join.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`left` – 连接的左侧。'
- en: '`right` – the right side of the join; this is any [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") object such as a [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object, and may also be a selectable-compatible object
    such as an ORM-mapped class.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`right` – 连接的右侧；这是任何 [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    对象，例如 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    对象，也可以是 ORM 映射的类等可选对象。'
- en: '`onclause` – a SQL expression representing the ON clause of the join. If left
    at `None`, [`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join "sqlalchemy.sql.expression.FromClause.join")
    will attempt to join the two tables based on a foreign key relationship.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onclause` – 表示连接的 ON 子句的 SQL 表达式。如果保留为 `None`，[`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join") 将尝试根据外键关系连接两个表。'
- en: '`isouter` – if True, render a LEFT OUTER JOIN, instead of JOIN.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isouter` – 如果为 True，则渲染一个 LEFT OUTER JOIN，而不是 JOIN。'
- en: '`full` – if True, render a FULL OUTER JOIN, instead of JOIN.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`full` – 如果为 True，则渲染一个 FULL OUTER JOIN，而不是 JOIN。'
- en: See also
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join "sqlalchemy.sql.expression.FromClause.join")
    - method form, based on a given left side.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join "sqlalchemy.sql.expression.FromClause.join")
    - 方法形式，基于给定的左侧。'
- en: '[`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    - the type of object produced.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    - 生成的对象类型。'
- en: '[PRE20]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Return a [`Lateral`](#sqlalchemy.sql.expression.Lateral "sqlalchemy.sql.expression.Lateral")
    object.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个 [`Lateral`](#sqlalchemy.sql.expression.Lateral "sqlalchemy.sql.expression.Lateral")
    对象。
- en: '[`Lateral`](#sqlalchemy.sql.expression.Lateral "sqlalchemy.sql.expression.Lateral")
    is an [`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    subclass that represents a subquery with the LATERAL keyword applied to it.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Lateral`](#sqlalchemy.sql.expression.Lateral "sqlalchemy.sql.expression.Lateral")
    是表示具有 LATERAL 关键字的子查询的 [`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    子类。'
- en: The special behavior of a LATERAL subquery is that it appears in the FROM clause
    of an enclosing SELECT, but may correlate to other FROM clauses of that SELECT.
    It is a special case of subquery only supported by a small number of backends,
    currently more recent PostgreSQL versions.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: LATERAL 子查询的特殊行为是，它出现在封闭 SELECT 的 FROM 子句中，但可以与该 SELECT 的其他 FROM 子句相关联。这是一种特殊情况的子查询，仅受一小部分后端支持，目前支持较新版本的
    PostgreSQL。
- en: See also
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[LATERAL correlation](../tutorial/data_select.html#tutorial-lateral-correlation)
    - overview of usage.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '[LATERAL 关联](../tutorial/data_select.html#tutorial-lateral-correlation) - 使用概述。'
- en: '[PRE21]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Return an `OUTER JOIN` clause element.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个 `OUTER JOIN` 子句元素。
- en: The returned object is an instance of [`Join`](#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join").
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的对象是 [`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    的实例。
- en: Similar functionality is also available via the [`FromClause.outerjoin()`](#sqlalchemy.sql.expression.FromClause.outerjoin
    "sqlalchemy.sql.expression.FromClause.outerjoin") method on any [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 类似的功能也可通过任何 [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    上的 [`FromClause.outerjoin()`](#sqlalchemy.sql.expression.FromClause.outerjoin
    "sqlalchemy.sql.expression.FromClause.outerjoin") 方法获得。
- en: 'Parameters:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`left` – The left side of the join.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`left` – 连接的左侧。'
- en: '`right` – The right side of the join.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`right` – 连接的右侧。'
- en: '`onclause` – Optional criterion for the `ON` clause, is derived from foreign
    key relationships established between left and right otherwise.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onclause` – 可选的 `ON` 子句条件，否则会从左侧和右侧之间建立的外键关系中派生。'
- en: To chain joins together, use the [`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join") or [`FromClause.outerjoin()`](#sqlalchemy.sql.expression.FromClause.outerjoin
    "sqlalchemy.sql.expression.FromClause.outerjoin") methods on the resulting [`Join`](#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") object.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 要将连接链在一起，请使用结果 [`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    对象上的 [`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join "sqlalchemy.sql.expression.FromClause.join")
    或 [`FromClause.outerjoin()`](#sqlalchemy.sql.expression.FromClause.outerjoin "sqlalchemy.sql.expression.FromClause.outerjoin")
    方法。
- en: '[PRE22]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Return a [`TableSample`](#sqlalchemy.sql.expression.TableSample "sqlalchemy.sql.expression.TableSample")
    object.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个 [`TableSample`](#sqlalchemy.sql.expression.TableSample "sqlalchemy.sql.expression.TableSample")
    对象。
- en: '[`TableSample`](#sqlalchemy.sql.expression.TableSample "sqlalchemy.sql.expression.TableSample")
    is an [`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    subclass that represents a table with the TABLESAMPLE clause applied to it. [`tablesample()`](#sqlalchemy.sql.expression.tablesample
    "sqlalchemy.sql.expression.tablesample") is also available from the [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") class via the [`FromClause.tablesample()`](#sqlalchemy.sql.expression.FromClause.tablesample
    "sqlalchemy.sql.expression.FromClause.tablesample") method.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TableSample`](#sqlalchemy.sql.expression.TableSample "sqlalchemy.sql.expression.TableSample")
    是一个 [`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    子类，表示应用了 TABLESAMPLE 子句的表。 [`tablesample()`](#sqlalchemy.sql.expression.tablesample
    "sqlalchemy.sql.expression.tablesample") 也可从 [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") 类中通过 [`FromClause.tablesample()`](#sqlalchemy.sql.expression.FromClause.tablesample
    "sqlalchemy.sql.expression.FromClause.tablesample") 方法获得。'
- en: The TABLESAMPLE clause allows selecting a randomly selected approximate percentage
    of rows from a table. It supports multiple sampling methods, most commonly BERNOULLI
    and SYSTEM.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: TABLESAMPLE 子句允许从表中随机选择近似百分比的行。它支持多种采样方法，最常见的是 BERNOULLI 和 SYSTEM。
- en: 'e.g.:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE23]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Assuming `people` with a column `people_id`, the above statement would render
    as:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 假设 `people` 有一个列 `people_id`，上述语句将呈现为：
- en: '[PRE24]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Parameters:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`sampling` – a `float` percentage between 0 and 100 or [`Function`](functions.html#sqlalchemy.sql.functions.Function
    "sqlalchemy.sql.functions.Function").'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sampling` – 一个介于 0 和 100 之间的 `float` 百分比或 [`Function`](functions.html#sqlalchemy.sql.functions.Function
    "sqlalchemy.sql.functions.Function")。'
- en: '`name` – optional alias name'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 可选别名名称'
- en: '`seed` – any real-valued SQL expression. When specified, the REPEATABLE sub-clause
    is also rendered.'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`seed` – 任意实值 SQL 表达式。当指定时，还会呈现 REPEATABLE 子句。'
- en: Selectable Class Documentation
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可选择的类文档
- en: The classes here are generated using the constructors listed at [Selectable
    Foundational Constructors](#selectable-foundational-constructors) and [Selectable
    Modifier Constructors](#fromclause-modifier-constructors).
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的类是使用 [可选择的基础构造函数](#selectable-foundational-constructors) 和 [可选择的修饰符构造函数](#fromclause-modifier-constructors)
    列出的构造函数生成的。
- en: '| Object Name | Description |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [Alias](#sqlalchemy.sql.expression.Alias) | Represents an table or selectable
    alias (AS). |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| [别名](#sqlalchemy.sql.expression.Alias) | 表示表或可选择的别名（AS）。'
- en: '| [AliasedReturnsRows](#sqlalchemy.sql.expression.AliasedReturnsRows) | Base
    class of aliases against tables, subqueries, and other selectables. |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| [AliasedReturnsRows](#sqlalchemy.sql.expression.AliasedReturnsRows) | 对表、子查询和其他可选择的别名的基类。
    |'
- en: '| [CompoundSelect](#sqlalchemy.sql.expression.CompoundSelect) | Forms the basis
    of `UNION`, `UNION ALL`, and other SELECT-based set operations. |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| [CompoundSelect](#sqlalchemy.sql.expression.CompoundSelect) | 形成 `UNION`,
    `UNION ALL`, 和其他基于 SELECT 的集合操作的基础。 |'
- en: '| [CTE](#sqlalchemy.sql.expression.CTE) | Represent a Common Table Expression.
    |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| [CTE](#sqlalchemy.sql.expression.CTE) | 表示公共表达式。 |'
- en: '| [Executable](#sqlalchemy.sql.expression.Executable) | Mark a [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") as supporting execution. |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| [Executable](#sqlalchemy.sql.expression.Executable) | 将[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")标记为支持执行。 |'
- en: '| [Exists](#sqlalchemy.sql.expression.Exists) | Represent an `EXISTS` clause.
    |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| [Exists](#sqlalchemy.sql.expression.Exists) | 表示一个`EXISTS`子句。 |'
- en: '| [FromClause](#sqlalchemy.sql.expression.FromClause) | Represent an element
    that can be used within the `FROM` clause of a `SELECT` statement. |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| [FromClause](#sqlalchemy.sql.expression.FromClause) | 表示可在`SELECT`语句的`FROM`子句中使用的元素。
    |'
- en: '| [GenerativeSelect](#sqlalchemy.sql.expression.GenerativeSelect) | Base class
    for SELECT statements where additional elements can be added. |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| [GenerativeSelect](#sqlalchemy.sql.expression.GenerativeSelect) | SELECT语句的基类，可以添加额外的元素。
    |'
- en: '| [HasCTE](#sqlalchemy.sql.expression.HasCTE) | Mixin that declares a class
    to include CTE support. |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| [HasCTE](#sqlalchemy.sql.expression.HasCTE) | 声明一个类包含CTE支持的Mixin。 |'
- en: '| [HasPrefixes](#sqlalchemy.sql.expression.HasPrefixes) |  |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| [HasPrefixes](#sqlalchemy.sql.expression.HasPrefixes) |  |'
- en: '| [HasSuffixes](#sqlalchemy.sql.expression.HasSuffixes) |  |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| [HasSuffixes](#sqlalchemy.sql.expression.HasSuffixes) |  |'
- en: '| [Join](#sqlalchemy.sql.expression.Join) | Represent a `JOIN` construct between
    two [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    elements. |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| [Join](#sqlalchemy.sql.expression.Join) | 表示两个[`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")元素之间的`JOIN`构造。 |'
- en: '| [Lateral](#sqlalchemy.sql.expression.Lateral) | Represent a LATERAL subquery.
    |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| [Lateral](#sqlalchemy.sql.expression.Lateral) | 表示一个LATERAL子查询。 |'
- en: '| [ReturnsRows](#sqlalchemy.sql.expression.ReturnsRows) | The base-most class
    for Core constructs that have some concept of columns that can represent rows.
    |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| [ReturnsRows](#sqlalchemy.sql.expression.ReturnsRows) | Core构造的基类，具有某种可以表示行的列的概念。
    |'
- en: '| [ScalarSelect](#sqlalchemy.sql.expression.ScalarSelect) | Represent a scalar
    subquery. |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| [ScalarSelect](#sqlalchemy.sql.expression.ScalarSelect) | 表示一个标量子查询。 |'
- en: '| [ScalarValues](#sqlalchemy.sql.expression.ScalarValues) | Represent a scalar
    `VALUES` construct that can be used as a COLUMN element in a statement. |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| [ScalarValues](#sqlalchemy.sql.expression.ScalarValues) | 表示可用作语句中COLUMN元素的标量`VALUES`构造。
    |'
- en: '| [Select](#sqlalchemy.sql.expression.Select) | Represents a `SELECT` statement.
    |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| [Select](#sqlalchemy.sql.expression.Select) | 表示一个`SELECT`语句。 |'
- en: '| [Selectable](#sqlalchemy.sql.expression.Selectable) | Mark a class as being
    selectable. |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| [Selectable](#sqlalchemy.sql.expression.Selectable) | 将类标记为可选择。 |'
- en: '| [SelectBase](#sqlalchemy.sql.expression.SelectBase) | Base class for SELECT
    statements. |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| [SelectBase](#sqlalchemy.sql.expression.SelectBase) | SELECT语句的基类。 |'
- en: '| [Subquery](#sqlalchemy.sql.expression.Subquery) | Represent a subquery of
    a SELECT. |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| [Subquery](#sqlalchemy.sql.expression.Subquery) | 表示一个SELECT的子查询。 |'
- en: '| [TableClause](#sqlalchemy.sql.expression.TableClause) | Represents a minimal
    “table” construct. |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| [TableClause](#sqlalchemy.sql.expression.TableClause) | 表示最小的“表”构造。 |'
- en: '| [TableSample](#sqlalchemy.sql.expression.TableSample) | Represent a TABLESAMPLE
    clause. |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| [TableSample](#sqlalchemy.sql.expression.TableSample) | 表示一个TABLESAMPLE子句。
    |'
- en: '| [TableValuedAlias](#sqlalchemy.sql.expression.TableValuedAlias) | An alias
    against a “table valued” SQL function. |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| [TableValuedAlias](#sqlalchemy.sql.expression.TableValuedAlias) | 对“表值”SQL函数的别名。
    |'
- en: '| [TextualSelect](#sqlalchemy.sql.expression.TextualSelect) | Wrap a [`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause") construct within a [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase") interface. |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| [TextualSelect](#sqlalchemy.sql.expression.TextualSelect) | 在[`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause")构造内部包装一个[`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")接口。 |'
- en: '| [Values](#sqlalchemy.sql.expression.Values) | Represent a `VALUES` construct
    that can be used as a FROM element in a statement. |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| [Values](#sqlalchemy.sql.expression.Values) | 表示可用作语句中FROM元素的`VALUES`构造。
    |'
- en: '[PRE25]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Represents an table or selectable alias (AS).
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一个表或可选择的别名（AS）。
- en: Represents an alias, as typically applied to any table or sub-select within
    a SQL statement using the `AS` keyword (or without the keyword on certain databases
    such as Oracle).
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 表示别名，通常使用`AS`关键字（或在某些数据库上不使用关键字，如Oracle）应用于SQL语句中的任何表或子选择。
- en: This object is constructed from the [`alias()`](#sqlalchemy.sql.expression.alias
    "sqlalchemy.sql.expression.alias") module level function as well as the [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") method available on all [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") subclasses.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 此对象是从[`alias()`](#sqlalchemy.sql.expression.alias "sqlalchemy.sql.expression.alias")模块级函数以及所有[`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")子类上可用的[`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias")方法构造的。
- en: See also
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias "sqlalchemy.sql.expression.FromClause.alias")'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias "sqlalchemy.sql.expression.FromClause.alias")'
- en: '**Members**'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[inherit_cache](#sqlalchemy.sql.expression.Alias.inherit_cache)'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '[inherit_cache](#sqlalchemy.sql.expression.Alias.inherit_cache)'
- en: '**Class signature**'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    (`sqlalchemy.sql.roles.DMLTableRole`, `sqlalchemy.sql.expression.FromClauseAlias`)
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.expression.Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")（`sqlalchemy.sql.roles.DMLTableRole`，`sqlalchemy.sql.expression.FromClauseAlias`）
- en: '[PRE26]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Indicate if this [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") instance should make use of the cache
    key generation scheme used by its immediate superclass.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 指示此[`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey "sqlalchemy.sql.traversals.HasCacheKey")实例是否应使用其直接超类使用的缓存键生成方案。
- en: The attribute defaults to `None`, which indicates that a construct has not yet
    taken into account whether or not its appropriate for it to participate in caching;
    this is functionally equivalent to setting the value to `False`, except that a
    warning is also emitted.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 此属性默认为`None`，表示构造尚未考虑是否应该参与缓存；这在功能上等同于将值设置为`False`，除了还会发出警告。
- en: This flag can be set to `True` on a particular class, if the SQL that corresponds
    to the object does not change based on attributes which are local to this class,
    and not its superclass.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 如果与此类本地属性而不是其超类相关的属性不会更改对象对应的SQL，则可以将此标志设置为`True`。
- en: See also
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Enabling Caching Support for Custom Constructs](compiler.html#compilerext-caching)
    - General guideslines for setting the [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute for third-party
    or user defined SQL constructs.'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '[启用自定义构造的缓存支持](compiler.html#compilerext-caching) - 设置第三方或用户定义的SQL构造的[`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache")属性的通用指南。'
- en: '[PRE27]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Base class of aliases against tables, subqueries, and other selectables.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 别名对表、子查询和其他可选择项的基类。
- en: '**Members**'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[description](#sqlalchemy.sql.expression.AliasedReturnsRows.description), [is_derived_from()](#sqlalchemy.sql.expression.AliasedReturnsRows.is_derived_from),
    [original](#sqlalchemy.sql.expression.AliasedReturnsRows.original)'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '[description](#sqlalchemy.sql.expression.AliasedReturnsRows.description), [is_derived_from()](#sqlalchemy.sql.expression.AliasedReturnsRows.is_derived_from),
    [original](#sqlalchemy.sql.expression.AliasedReturnsRows.original)'
- en: '**Class signature**'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.AliasedReturnsRows`](#sqlalchemy.sql.expression.AliasedReturnsRows
    "sqlalchemy.sql.expression.AliasedReturnsRows") (`sqlalchemy.sql.expression.NoInit`,
    `sqlalchemy.sql.expression.NamedFromClause`)
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.expression.AliasedReturnsRows`](#sqlalchemy.sql.expression.AliasedReturnsRows
    "sqlalchemy.sql.expression.AliasedReturnsRows")（`sqlalchemy.sql.expression.NoInit`，`sqlalchemy.sql.expression.NamedFromClause`）
- en: '[PRE28]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Return `True` if this [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    is ‘derived’ from the given `FromClause`.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此[`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")是从给定的`FromClause`“派生”的话，则返回`True`。
- en: An example would be an Alias of a Table is derived from that Table.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 一个例子是表的别名是从该表派生的。
- en: '[PRE30]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Legacy for dialects that are referring to Alias.original.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 适用于引用Alias.original的方言的遗留。
- en: '[PRE31]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Forms the basis of `UNION`, `UNION ALL`, and other SELECT-based set operations.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 形成`UNION`，`UNION ALL`和其他基于SELECT的集合操作的基础。
- en: See also
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`union()`](#sqlalchemy.sql.expression.union "sqlalchemy.sql.expression.union")'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '[`union()`](#sqlalchemy.sql.expression.union "sqlalchemy.sql.expression.union")'
- en: '[`union_all()`](#sqlalchemy.sql.expression.union_all "sqlalchemy.sql.expression.union_all")'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '[`union_all()`](#sqlalchemy.sql.expression.union_all "sqlalchemy.sql.expression.union_all")'
- en: '[`intersect()`](#sqlalchemy.sql.expression.intersect "sqlalchemy.sql.expression.intersect")'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '[`intersect()`](#sqlalchemy.sql.expression.intersect "sqlalchemy.sql.expression.intersect")'
- en: '[`intersect_all()`](#sqlalchemy.sql.expression.intersect_all "sqlalchemy.sql.expression.intersect_all")'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '[`intersect_all()`](#sqlalchemy.sql.expression.intersect_all "sqlalchemy.sql.expression.intersect_all")'
- en: '`except()`'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '`except()`'
- en: '[`except_all()`](#sqlalchemy.sql.expression.except_all "sqlalchemy.sql.expression.except_all")'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '[`except_all()`](#sqlalchemy.sql.expression.except_all "sqlalchemy.sql.expression.except_all")'
- en: '**Members**'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[add_cte()](#sqlalchemy.sql.expression.CompoundSelect.add_cte), [alias()](#sqlalchemy.sql.expression.CompoundSelect.alias),
    [as_scalar()](#sqlalchemy.sql.expression.CompoundSelect.as_scalar), [c](#sqlalchemy.sql.expression.CompoundSelect.c),
    [corresponding_column()](#sqlalchemy.sql.expression.CompoundSelect.corresponding_column),
    [cte()](#sqlalchemy.sql.expression.CompoundSelect.cte), [execution_options()](#sqlalchemy.sql.expression.CompoundSelect.execution_options),
    [exists()](#sqlalchemy.sql.expression.CompoundSelect.exists), [exported_columns](#sqlalchemy.sql.expression.CompoundSelect.exported_columns),
    [fetch()](#sqlalchemy.sql.expression.CompoundSelect.fetch), [get_execution_options()](#sqlalchemy.sql.expression.CompoundSelect.get_execution_options),
    [get_label_style()](#sqlalchemy.sql.expression.CompoundSelect.get_label_style),
    [group_by()](#sqlalchemy.sql.expression.CompoundSelect.group_by), [is_derived_from()](#sqlalchemy.sql.expression.CompoundSelect.is_derived_from),
    [label()](#sqlalchemy.sql.expression.CompoundSelect.label), [lateral()](#sqlalchemy.sql.expression.CompoundSelect.lateral),
    [limit()](#sqlalchemy.sql.expression.CompoundSelect.limit), [offset()](#sqlalchemy.sql.expression.CompoundSelect.offset),
    [options()](#sqlalchemy.sql.expression.CompoundSelect.options), [order_by()](#sqlalchemy.sql.expression.CompoundSelect.order_by),
    [replace_selectable()](#sqlalchemy.sql.expression.CompoundSelect.replace_selectable),
    [scalar_subquery()](#sqlalchemy.sql.expression.CompoundSelect.scalar_subquery),
    [select()](#sqlalchemy.sql.expression.CompoundSelect.select), [selected_columns](#sqlalchemy.sql.expression.CompoundSelect.selected_columns),
    [self_group()](#sqlalchemy.sql.expression.CompoundSelect.self_group), [set_label_style()](#sqlalchemy.sql.expression.CompoundSelect.set_label_style),
    [slice()](#sqlalchemy.sql.expression.CompoundSelect.slice), [subquery()](#sqlalchemy.sql.expression.CompoundSelect.subquery),
    [with_for_update()](#sqlalchemy.sql.expression.CompoundSelect.with_for_update)'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '[add_cte()](#sqlalchemy.sql.expression.CompoundSelect.add_cte), [alias()](#sqlalchemy.sql.expression.CompoundSelect.alias),
    [as_scalar()](#sqlalchemy.sql.expression.CompoundSelect.as_scalar), [c](#sqlalchemy.sql.expression.CompoundSelect.c),
    [corresponding_column()](#sqlalchemy.sql.expression.CompoundSelect.corresponding_column),
    [cte()](#sqlalchemy.sql.expression.CompoundSelect.cte), [execution_options()](#sqlalchemy.sql.expression.CompoundSelect.execution_options),
    [exists()](#sqlalchemy.sql.expression.CompoundSelect.exists), [exported_columns](#sqlalchemy.sql.expression.CompoundSelect.exported_columns),
    [fetch()](#sqlalchemy.sql.expression.CompoundSelect.fetch), [get_execution_options()](#sqlalchemy.sql.expression.CompoundSelect.get_execution_options),
    [get_label_style()](#sqlalchemy.sql.expression.CompoundSelect.get_label_style),
    [group_by()](#sqlalchemy.sql.expression.CompoundSelect.group_by), [is_derived_from()](#sqlalchemy.sql.expression.CompoundSelect.is_derived_from),
    [label()](#sqlalchemy.sql.expression.CompoundSelect.label), [lateral()](#sqlalchemy.sql.expression.CompoundSelect.lateral),
    [limit()](#sqlalchemy.sql.expression.CompoundSelect.limit), [offset()](#sqlalchemy.sql.expression.CompoundSelect.offset),
    [options()](#sqlalchemy.sql.expression.CompoundSelect.options), [order_by()](#sqlalchemy.sql.expression.CompoundSelect.order_by),
    [replace_selectable()](#sqlalchemy.sql.expression.CompoundSelect.replace_selectable),
    [scalar_subquery()](#sqlalchemy.sql.expression.CompoundSelect.scalar_subquery),
    [select()](#sqlalchemy.sql.expression.CompoundSelect.select), [selected_columns](#sqlalchemy.sql.expression.CompoundSelect.selected_columns),
    [self_group()](#sqlalchemy.sql.expression.CompoundSelect.self_group), [set_label_style()](#sqlalchemy.sql.expression.CompoundSelect.set_label_style),
    [slice()](#sqlalchemy.sql.expression.CompoundSelect.slice), [subquery()](#sqlalchemy.sql.expression.CompoundSelect.subquery),
    [with_for_update()](#sqlalchemy.sql.expression.CompoundSelect.with_for_update)'
- en: '**Class signature**'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect
    "sqlalchemy.sql.expression.CompoundSelect") (`sqlalchemy.sql.expression.HasCompileState`,
    [`sqlalchemy.sql.expression.GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect"), `sqlalchemy.sql.expression.ExecutableReturnsRows`)
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.expression.CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect
    "sqlalchemy.sql.expression.CompoundSelect") (`sqlalchemy.sql.expression.HasCompileState`,
    [`sqlalchemy.sql.expression.GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect"), `sqlalchemy.sql.expression.ExecutableReturnsRows`)
- en: '[PRE32]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '*inherited from the* [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") *method of* [`HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE")'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte "sqlalchemy.sql.expression.HasCTE.add_cte")
    *方法的* [`HasCTE`](#sqlalchemy.sql.expression.HasCTE "sqlalchemy.sql.expression.HasCTE")'
- en: Add one or more [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    constructs to this statement.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 向此语句添加一个或多个[`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")构造。
- en: This method will associate the given [`CTE`](#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE") constructs with the parent statement such that
    they will each be unconditionally rendered in the WITH clause of the final statement,
    even if not referenced elsewhere within the statement or any sub-selects.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法将给定的[`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")构造与父语句关联，以便它们将无条件地在最终语句的WITH子句中呈现，即使在语句或任何子选择中没有其他地方引用它们。
- en: The optional [`HasCTE.add_cte.nest_here`](#sqlalchemy.sql.expression.HasCTE.add_cte.params.nest_here
    "sqlalchemy.sql.expression.HasCTE.add_cte") parameter when set to True will have
    the effect that each given [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    will render in a WITH clause rendered directly along with this statement, rather
    than being moved to the top of the ultimate rendered statement, even if this statement
    is rendered as a subquery within a larger statement.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 当设置为True时，可选的[`HasCTE.add_cte.nest_here`](#sqlalchemy.sql.expression.HasCTE.add_cte.params.nest_here
    "sqlalchemy.sql.expression.HasCTE.add_cte")参数将使每个给定的[`CTE`](#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE")在与此语句直接一起呈现的WITH子句中呈现，而不是将其移动到最终呈现语句的顶部，即使此语句作为较大语句中的子查询呈现。
- en: This method has two general uses. One is to embed CTE statements that serve
    some purpose without being referenced explicitly, such as the use case of embedding
    a DML statement such as an INSERT or UPDATE as a CTE inline with a primary statement
    that may draw from its results indirectly. The other is to provide control over
    the exact placement of a particular series of CTE constructs that should remain
    rendered directly in terms of a particular statement that may be nested in a larger
    statement.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法有两个一般用途。一个是嵌入一些用途的CTE语句，而不被明确引用，例如将DML语句（如INSERT或UPDATE）作为CTE内联到可能间接从其结果中获取的主语句中的用例。另一个是提供对应该保持直接呈现的特定一系列CTE构造的放置的控制，这些构造可能嵌套在较大语句中。
- en: 'E.g.:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE33]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Would render:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE34]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Above, the “anon_1” CTE is not referenced in the SELECT statement, however still
    accomplishes the task of running an INSERT statement.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，“anon_1” CTE在SELECT语句中未被引用，但仍完成运行INSERT语句的任务。
- en: 'Similarly in a DML-related context, using the PostgreSQL [`Insert`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Insert
    "sqlalchemy.dialects.postgresql.Insert") construct to generate an “upsert”:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，在与DML相关的上下文中，使用PostgreSQL [`Insert`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Insert
    "sqlalchemy.dialects.postgresql.Insert")构造生成“upsert”：
- en: '[PRE35]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The above statement renders as:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 上述语句呈现为：
- en: '[PRE36]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: New in version 1.4.21.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4.21开始新增。
- en: 'Parameters:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*ctes` –'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*ctes` –'
- en: zero or more [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    constructs.
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 零个或多个[`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")构造。
- en: 'Changed in version 2.0: Multiple CTE instances are accepted'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本2.0开始更改：接受多个CTE实例
- en: '`nest_here` –'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nest_here` –'
- en: if True, the given CTE or CTEs will be rendered as though they specified the
    [`HasCTE.cte.nesting`](#sqlalchemy.sql.expression.HasCTE.cte.params.nesting "sqlalchemy.sql.expression.HasCTE.cte")
    flag to `True` when they were added to this [`HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE"). Assuming the given CTEs are not referenced
    in an outer-enclosing statement as well, the CTEs given should render at the level
    of this statement when this flag is given.
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果为True，则给定的CTE或CTEs将被呈现为当它们被添加到此[`HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE")时指定[`HasCTE.cte.nesting`](#sqlalchemy.sql.expression.HasCTE.cte.params.nesting
    "sqlalchemy.sql.expression.HasCTE.cte")标志为`True`。假设给定的CTEs在外部封闭语句中也没有被引用，当给出此标志时，给定的CTEs应在此语句级别呈现。
- en: New in version 2.0.
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本2.0开始新增。
- en: See also
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`HasCTE.cte.nesting`](#sqlalchemy.sql.expression.HasCTE.cte.params.nesting
    "sqlalchemy.sql.expression.HasCTE.cte")'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`HasCTE.cte.nesting`](#sqlalchemy.sql.expression.HasCTE.cte.params.nesting
    "sqlalchemy.sql.expression.HasCTE.cte")'
- en: '[PRE37]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '*inherited from the* [`SelectBase.alias()`](#sqlalchemy.sql.expression.SelectBase.alias
    "sqlalchemy.sql.expression.SelectBase.alias") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SelectBase.alias()`](#sqlalchemy.sql.expression.SelectBase.alias "sqlalchemy.sql.expression.SelectBase")
    *方法的* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")'
- en: Return a named subquery against this [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase").
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 返回针对此 [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")
    的命名子查询。
- en: For a [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")
    (as opposed to a [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")),
    this returns a [`Subquery`](#sqlalchemy.sql.expression.Subquery "sqlalchemy.sql.expression.Subquery")
    object which behaves mostly the same as the [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") object that is used with a [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")（而不是
    [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")），这将返回一个行为大部分与用于
    [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    的 [`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    对象相同的 [`Subquery`](#sqlalchemy.sql.expression.Subquery "sqlalchemy.sql.expression.Subquery")
    对象。
- en: 'Changed in version 1.4: The [`SelectBase.alias()`](#sqlalchemy.sql.expression.SelectBase.alias
    "sqlalchemy.sql.expression.SelectBase.alias") method is now a synonym for the
    [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery "sqlalchemy.sql.expression.SelectBase.subquery")
    method.'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.4起更改：[`SelectBase.alias()`](#sqlalchemy.sql.expression.SelectBase.alias
    "sqlalchemy.sql.expression.SelectBase.alias") 方法现在是 [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") 方法的同义词。
- en: '[PRE38]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '*inherited from the* [`SelectBase.as_scalar()`](#sqlalchemy.sql.expression.SelectBase.as_scalar
    "sqlalchemy.sql.expression.SelectBase.as_scalar") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SelectBase.as_scalar()`](#sqlalchemy.sql.expression.SelectBase.as_scalar
    "sqlalchemy.sql.expression.SelectBase.as_scalar") *方法的* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
- en: 'Deprecated since version 1.4: The [`SelectBase.as_scalar()`](#sqlalchemy.sql.expression.SelectBase.as_scalar
    "sqlalchemy.sql.expression.SelectBase.as_scalar") method is deprecated and will
    be removed in a future release. Please refer to [`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery").'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.4起弃用：[`SelectBase.as_scalar()`](#sqlalchemy.sql.expression.SelectBase.as_scalar
    "sqlalchemy.sql.expression.SelectBase.as_scalar") 方法已被弃用，并将在将来的版本中移除。请参考 [`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery")。
- en: '[PRE39]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '*inherited from the* [`SelectBase.c`](#sqlalchemy.sql.expression.SelectBase.c
    "sqlalchemy.sql.expression.SelectBase.c") *attribute of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SelectBase.c`](#sqlalchemy.sql.expression.SelectBase.c "sqlalchemy.sql.expression.SelectBase.c")
    *属性的* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")'
- en: 'Deprecated since version 1.4: The [`SelectBase.c`](#sqlalchemy.sql.expression.SelectBase.c
    "sqlalchemy.sql.expression.SelectBase.c") and `SelectBase.columns` attributes
    are deprecated and will be removed in a future release; these attributes implicitly
    create a subquery that should be explicit. Please call [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") first in order to create a subquery,
    which then contains this attribute. To access the columns that this SELECT object
    SELECTs from, use the [`SelectBase.selected_columns`](#sqlalchemy.sql.expression.SelectBase.selected_columns
    "sqlalchemy.sql.expression.SelectBase.selected_columns") attribute.'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.4起弃用：[`SelectBase.c`](#sqlalchemy.sql.expression.SelectBase.c "sqlalchemy.sql.expression.SelectBase.c")
    和 `SelectBase.columns` 属性已被弃用，并将在将来的版本中移除；这些属性隐式创建一个子查询，应该明确指定。请先调用 [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") 来创建一个子查询，然后再包含此属性。要访问此 SELECT
    对象所选择的列，请使用 [`SelectBase.selected_columns`](#sqlalchemy.sql.expression.SelectBase.selected_columns
    "sqlalchemy.sql.expression.SelectBase.selected_columns") 属性。
- en: '[PRE40]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '*inherited from the* [`Selectable.corresponding_column()`](#sqlalchemy.sql.expression.Selectable.corresponding_column
    "sqlalchemy.sql.expression.Selectable.corresponding_column") *method of* [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Selectable.corresponding_column()`](#sqlalchemy.sql.expression.Selectable.corresponding_column
    "sqlalchemy.sql.expression.Selectable.corresponding_column") *方法的* [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
- en: Given a [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"), return the exported [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") object from the [`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") collection of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable") which corresponds to that original [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") via a common ancestor column.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")，从这个[`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")的[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns")集合中返回对应于原始[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")的导出[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")对象，通过一个共同的祖先列。
- en: 'Parameters:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`column` – the target [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") to be matched.'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`column` – 要匹配的目标[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")。'
- en: '`require_embedded` – only return corresponding columns for the given [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"), if the given [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") is actually present within a sub-element
    of this [`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable").
    Normally the column will match if it merely shares a common ancestor with one
    of the exported columns of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable").'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`require_embedded` – 只返回给定[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")的相应列，如果给定的[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")实际上存在于此[`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")的子元素之内。通常，如果列仅与此[`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")的导出列之一共享一个共同的祖先，则列将匹配。'
- en: See also
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") - the [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") that is used for the operation.'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") - 用于操作的[`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")。'
- en: '[`ColumnCollection.corresponding_column()`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection.corresponding_column
    "sqlalchemy.sql.expression.ColumnCollection.corresponding_column") - implementation
    method.'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnCollection.corresponding_column()`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection.corresponding_column
    "sqlalchemy.sql.expression.ColumnCollection.corresponding_column") - 实现方法。'
- en: '[PRE41]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '*inherited from the* [`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte
    "sqlalchemy.sql.expression.HasCTE.cte") *method of* [`HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE")'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`HasCTE`](#sqlalchemy.sql.expression.HasCTE "sqlalchemy.sql.expression.HasCTE")
    *的* [`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte "sqlalchemy.sql.expression.HasCTE.cte")
    *方法。'
- en: Return a new [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE"),
    or Common Table Expression instance.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的[`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")或通用表达式实例。
- en: Common table expressions are a SQL standard whereby SELECT statements can draw
    upon secondary statements specified along with the primary statement, using a
    clause called “WITH”. Special semantics regarding UNION can also be employed to
    allow “recursive” queries, where a SELECT statement can draw upon the set of rows
    that have previously been selected.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 公共表达式是SQL标准，其中SELECT语句可以利用与主要语句一起指定的辅助语句，使用一个称为“WITH”的子句。还可以采用有关UNION的特殊语义，以允许“递归”查询，其中SELECT语句可以利用先前已选择的行集。
- en: CTEs can also be applied to DML constructs UPDATE, INSERT and DELETE on some
    databases, both as a source of CTE rows when combined with RETURNING, as well
    as a consumer of CTE rows.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: CTEs也可以应用于某些数据库上的DML构造UPDATE、INSERT和DELETE，既作为与RETURNING结合使用时CTE行的源，也作为CTE行的使用者。
- en: SQLAlchemy detects [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    objects, which are treated similarly to [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") objects, as special elements to be delivered
    to the FROM clause of the statement as well as to a WITH clause at the top of
    the statement.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 检测到 [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    对象，这些对象与 [`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    对象类似，被视为要传递到语句的 FROM 子句以及语句顶部的 WITH 子句的特殊元素。
- en: For special prefixes such as PostgreSQL “MATERIALIZED” and “NOT MATERIALIZED”,
    the `CTE.prefix_with()` method may be used to establish these.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 对于特殊前缀，如 PostgreSQL 的 “MATERIALIZED” 和 “NOT MATERIALIZED”，可以使用 `CTE.prefix_with()`
    方法来建立这些。
- en: 'Changed in version 1.3.13: Added support for prefixes. In particular - MATERIALIZED
    and NOT MATERIALIZED.'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 1.3.13 版本更改：增加了对前缀的支持。特别是 - MATERIALIZED 和 NOT MATERIALIZED。
- en: 'Parameters:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`name` – name given to the common table expression. Like [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias"), the name can be left as `None`
    in which case an anonymous symbol will be used at query compile time.'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 给公共表达式的名称。类似于 [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias")，名称可以保留为 `None`，在这种情况下，将在查询编译时使用匿名符号。'
- en: '`recursive` – if `True`, will render `WITH RECURSIVE`. A recursive common table
    expression is intended to be used in conjunction with UNION ALL in order to derive
    rows from those already selected.'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`recursive` – 如果为 `True`，将呈现 `WITH RECURSIVE`。递归公共表达式旨在与 UNION ALL 结合使用，以从已选择的行中派生行。'
- en: '`nesting` –'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nesting` –'
- en: if `True`, will render the CTE locally to the statement in which it is referenced.
    For more complex scenarios, the [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") method using the [`HasCTE.add_cte.nest_here`](#sqlalchemy.sql.expression.HasCTE.add_cte.params.nest_here
    "sqlalchemy.sql.expression.HasCTE.add_cte") parameter may also be used to more
    carefully control the exact placement of a particular CTE.
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果为 `True`，将在引用它的语句中本地呈现 CTE。对于更复杂的情况，还可以使用 [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") 方法，使用 [`HasCTE.add_cte.nest_here`](#sqlalchemy.sql.expression.HasCTE.add_cte.params.nest_here
    "sqlalchemy.sql.expression.HasCTE.add_cte") 参数更精确地控制特定 CTE 的精确放置。
- en: New in version 1.4.24.
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 1.4.24 版本新增。
- en: See also
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte "sqlalchemy.sql.expression.HasCTE.add_cte")'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte "sqlalchemy.sql.expression.HasCTE.add_cte")'
- en: The following examples include two from PostgreSQL’s documentation at [https://www.postgresql.org/docs/current/static/queries-with.html](https://www.postgresql.org/docs/current/static/queries-with.html),
    as well as additional examples.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例包括两个来自 PostgreSQL 文档的示例 [https://www.postgresql.org/docs/current/static/queries-with.html](https://www.postgresql.org/docs/current/static/queries-with.html)，以及其他示例。
- en: 'Example 1, non recursive:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 1，非递归：
- en: '[PRE42]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Example 2, WITH RECURSIVE:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 2，WITH RECURSIVE：
- en: '[PRE43]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Example 3, an upsert using UPDATE and INSERT with CTEs:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 3，使用 UPDATE 和 INSERT 进行 upsert 的 CTE：
- en: '[PRE44]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Example 4, Nesting CTE (SQLAlchemy 1.4.24 and above):'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 4，嵌套 CTE（SQLAlchemy 1.4.24 及以上版本）：
- en: '[PRE45]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'The above query will render the second CTE nested inside the first, shown with
    inline parameters below as:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 上述查询将第二个 CTE 嵌套在第一个内部，如下所示带有内联参数：
- en: '[PRE46]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'The same CTE can be set up using the [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") method as follows (SQLAlchemy 2.0
    and above):'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte "sqlalchemy.sql.expression.HasCTE.add_cte")
    方法来设置相同的 CTE（SQLAlchemy 2.0 及以上版本）：
- en: '[PRE47]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Example 5, Non-Linear CTE (SQLAlchemy 1.4.28 and above):'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 5，非线性 CTE（SQLAlchemy 1.4.28 及以上版本）：
- en: '[PRE48]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'The above query will render 2 UNIONs inside the recursive CTE:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 上述查询将在递归 CTE 中呈现 2 个 UNION：
- en: '[PRE49]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: See also
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Query.cte()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.cte "sqlalchemy.orm.Query.cte")
    - ORM version of [`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte "sqlalchemy.sql.expression.HasCTE.cte").'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.cte()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.cte "sqlalchemy.orm.Query.cte")
    - [`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte "sqlalchemy.sql.expression.HasCTE.cte")
    的 ORM 版本。'
- en: '[PRE50]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '*inherited from the* [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") *method of* [`Executable`](#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") *方法的* [`Executable`](#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")'
- en: Set non-SQL options for the statement which take effect during execution.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 为语句设置在执行期间生效的非SQL选项。
- en: Execution options can be set at many scopes, including per-statement, per-connection,
    or per execution, using methods such as [`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") and parameters which accept
    a dictionary of options such as [`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute") and [`Session.execute.execution_options`](../orm/session_api.html#sqlalchemy.orm.Session.execute.params.execution_options
    "sqlalchemy.orm.Session.execute").
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在许多范围内设置执行选项，包括每个语句、每个连接或每次执行，使用诸如[`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")之类的方法和接受选项字典的参数，如[`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute")和[`Session.execute.execution_options`](../orm/session_api.html#sqlalchemy.orm.Session.execute.params.execution_options
    "sqlalchemy.orm.Session.execute")。
- en: The primary characteristic of an execution option, as opposed to other kinds
    of options such as ORM loader options, is that **execution options never affect
    the compiled SQL of a query, only things that affect how the SQL statement itself
    is invoked or how results are fetched**. That is, execution options are not part
    of what’s accommodated by SQL compilation nor are they considered part of the
    cached state of a statement.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 执行选项的主要特征，与其他类型的选项（如ORM加载器选项）相反，是**执行选项永远不会影响查询的编译SQL，只会影响SQL语句本身的调用方式或结果的获取方式**。也就是说，执行选项不是SQL编译所考虑的内容，也不被视为语句的缓存状态的一部分。
- en: 'The [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") method is [generative](../glossary.html#term-generative),
    as is the case for the method as applied to the [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") and [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") objects, which means when the method is called, a copy
    of the object is returned, which applies the given parameters to that new copy,
    but leaves the original unchanged:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") 方法是[生成的](../glossary.html#term-generative)，就像应用于[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")和[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象的方法一样，这意味着当调用该方法时，会返回对象的副本，将给定的参数应用于该新副本，但原始对象保持不变：'
- en: '[PRE51]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: An exception to this behavior is the [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object, where the [`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") method is explicitly **not**
    generative.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 这种行为的一个例外是[`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")对象，其中[`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")方法明确地**不是**生成的。
- en: 'The kinds of options that may be passed to [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") and other related methods
    and parameter dictionaries include parameters that are explicitly consumed by
    SQLAlchemy Core or ORM, as well as arbitrary keyword arguments not defined by
    SQLAlchemy, which means the methods and/or parameter dictionaries may be used
    for user-defined parameters that interact with custom code, which may access the
    parameters using methods such as [`Executable.get_execution_options()`](#sqlalchemy.sql.expression.Executable.get_execution_options
    "sqlalchemy.sql.expression.Executable.get_execution_options") and [`Connection.get_execution_options()`](connections.html#sqlalchemy.engine.Connection.get_execution_options
    "sqlalchemy.engine.Connection.get_execution_options"), or within selected event
    hooks using a dedicated `execution_options` event parameter such as [`ConnectionEvents.before_execute.execution_options`](events.html#sqlalchemy.events.ConnectionEvents.before_execute.params.execution_options
    "sqlalchemy.events.ConnectionEvents.before_execute") or [`ORMExecuteState.execution_options`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.execution_options
    "sqlalchemy.orm.ORMExecuteState.execution_options"), e.g.:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 可传递给 [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") 和其他相关方法和参数字典的选项类型包括由
    SQLAlchemy Core 或 ORM 明确消耗的参数，以及未由 SQLAlchemy 定义的任意关键字参数，这意味着可以使用这些方法和/或参数字典来处理与自定义代码交互的用户定义参数，该自定义代码可以使用诸如
    [`Executable.get_execution_options()`](#sqlalchemy.sql.expression.Executable.get_execution_options
    "sqlalchemy.sql.expression.Executable.get_execution_options") 和 [`Connection.get_execution_options()`](connections.html#sqlalchemy.engine.Connection.get_execution_options
    "sqlalchemy.engine.Connection.get_execution_options") 的方法访问这些参数，或者在选择的事件钩子中使用专用的
    `execution_options` 事件参数，如 [`ConnectionEvents.before_execute.execution_options`](events.html#sqlalchemy.events.ConnectionEvents.before_execute.params.execution_options
    "sqlalchemy.events.ConnectionEvents.before_execute") 或 [`ORMExecuteState.execution_options`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.execution_options
    "sqlalchemy.orm.ORMExecuteState.execution_options")。例如：
- en: '[PRE52]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Within the scope of options that are explicitly recognized by SQLAlchemy, most
    apply to specific classes of objects and not others. The most common execution
    options include:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 在 SQLAlchemy 明确识别的选项范围内，大多数适用于特定类对象而不适用于其他类对象。最常见的执行选项包括：
- en: '[`Connection.execution_options.isolation_level`](connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") - sets the isolation level for
    a connection or a class of connections via an [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"). This option is accepted only by [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") or [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine").'
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.isolation_level`](connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") - 通过 [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 为连接或一类连接设置隔离级别。此选项仅由 [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 或 [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 接受。'
- en: '[`Connection.execution_options.stream_results`](connections.html#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") - indicates results should be
    fetched using a server side cursor; this option is accepted by [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"), by the [`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute") parameter on [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute"), and additionally by [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") on a SQL statement object,
    as well as by ORM constructs like [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute").'
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.stream_results`](connections.html#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") - 指示应使用服务器端游标获取结果；此选项由 [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 接受，在 [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") 的 `execution_options` 参数上，以及在 SQL 语句对象上的
    [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") 上，以及像 [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") 这样的 ORM 构造函数。'
- en: '[`Connection.execution_options.compiled_cache`](connections.html#sqlalchemy.engine.Connection.execution_options.params.compiled_cache
    "sqlalchemy.engine.Connection.execution_options") - indicates a dictionary that
    will serve as the [SQL compilation cache](connections.html#sql-caching) for a
    [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    or [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine"),
    as well as for ORM methods like [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute"). Can be passed as `None` to disable caching
    for statements. This option is not accepted by [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") as it is inadvisable
    to carry along a compilation cache within a statement object.'
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.compiled_cache`](connections.html#sqlalchemy.engine.Connection.execution_options.params.compiled_cache
    "sqlalchemy.engine.Connection.execution_options") - 指示一个将用作 [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 或 [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 的 [SQL 编译缓存](connections.html#sql-caching) 的字典，以及像
    [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute "sqlalchemy.orm.Session.execute")
    这样的 ORM 方法。可以传递 `None` 来禁用语句的缓存。此选项不被 [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") 接受，因为在语句对象中携带编译缓存是不可取的。'
- en: '[`Connection.execution_options.schema_translate_map`](connections.html#sqlalchemy.engine.Connection.execution_options.params.schema_translate_map
    "sqlalchemy.engine.Connection.execution_options") - a mapping of schema names
    used by the [Schema Translate Map](connections.html#schema-translating) feature,
    accepted by [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine"),
    [`Executable`](#sqlalchemy.sql.expression.Executable "sqlalchemy.sql.expression.Executable"),
    as well as by ORM constructs like [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute").'
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.schema_translate_map`](connections.html#sqlalchemy.engine.Connection.execution_options.params.schema_translate_map
    "sqlalchemy.engine.Connection.execution_options") - [模式翻译映射](connections.html#schema-translating)
    功能使用的模式名称的映射，由 [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")、[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")、[`Executable`](#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable") 接受，以及像 [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") 这样的 ORM 构造函数。'
- en: See also
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")'
- en: '[`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute")'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute")'
- en: '[`Session.execute.execution_options`](../orm/session_api.html#sqlalchemy.orm.Session.execute.params.execution_options
    "sqlalchemy.orm.Session.execute")'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.execute.execution_options`](../orm/session_api.html#sqlalchemy.orm.Session.execute.params.execution_options
    "sqlalchemy.orm.Session.execute")'
- en: '[ORM Execution Options](../orm/queryguide/api.html#orm-queryguide-execution-options)
    - documentation on all ORM-specific execution options'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '[ORM 执行选项](../orm/queryguide/api.html#orm-queryguide-execution-options) - 所有
    ORM 特定执行选项的文档'
- en: '[PRE53]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '*inherited from the* [`SelectBase.exists()`](#sqlalchemy.sql.expression.SelectBase.exists
    "sqlalchemy.sql.expression.SelectBase.exists") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SelectBase.exists()`](#sqlalchemy.sql.expression.SelectBase.exists
    "sqlalchemy.sql.expression.SelectBase.exists") *方法的* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
- en: Return an [`Exists`](#sqlalchemy.sql.expression.Exists "sqlalchemy.sql.expression.Exists")
    representation of this selectable, which can be used as a column expression.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此可选择性的 [`Exists`](#sqlalchemy.sql.expression.Exists "sqlalchemy.sql.expression.Exists")
    表示，可用作列表达式。
- en: The returned object is an instance of [`Exists`](#sqlalchemy.sql.expression.Exists
    "sqlalchemy.sql.expression.Exists").
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的对象是 [`Exists`](#sqlalchemy.sql.expression.Exists "sqlalchemy.sql.expression.Exists")
    的一个实例。
- en: See also
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`exists()`](#sqlalchemy.sql.expression.exists "sqlalchemy.sql.expression.exists")'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '[`exists()`](#sqlalchemy.sql.expression.exists "sqlalchemy.sql.expression.exists")'
- en: '[EXISTS subqueries](../tutorial/data_select.html#tutorial-exists) - in the
    [2.0 style](../glossary.html#term-2.0-style) tutorial.'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '[EXISTS 子查询](../tutorial/data_select.html#tutorial-exists) - 在 [2.0 风格](../glossary.html#term-2.0-style)
    教程中。'
- en: New in version 1.4.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中的新功能。
- en: '[PRE54]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '*inherited from the* [`SelectBase.exported_columns`](#sqlalchemy.sql.expression.SelectBase.exported_columns
    "sqlalchemy.sql.expression.SelectBase.exported_columns") *attribute of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SelectBase.exported_columns`](#sqlalchemy.sql.expression.SelectBase.exported_columns
    "sqlalchemy.sql.expression.SelectBase.exported_columns") *属性的* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
- en: A [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") that represents the “exported” columns
    of this [`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable"),
    not including [`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause") constructs.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") 代表此 [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable") 的“导出”列，不包括 [`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause") 结构。
- en: The “exported” columns for a [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase") object are synonymous with the [`SelectBase.selected_columns`](#sqlalchemy.sql.expression.SelectBase.selected_columns
    "sqlalchemy.sql.expression.SelectBase.selected_columns") collection.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")
    对象的“导出”列与 [`SelectBase.selected_columns`](#sqlalchemy.sql.expression.SelectBase.selected_columns
    "sqlalchemy.sql.expression.SelectBase.selected_columns") 集合是同义词。
- en: New in version 1.4.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中的新功能。
- en: See also
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Select.exported_columns`](#sqlalchemy.sql.expression.Select.exported_columns
    "sqlalchemy.sql.expression.Select.exported_columns")'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.exported_columns`](#sqlalchemy.sql.expression.Select.exported_columns
    "sqlalchemy.sql.expression.Select.exported_columns")'
- en: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns")'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns")'
- en: '[`FromClause.exported_columns`](#sqlalchemy.sql.expression.FromClause.exported_columns
    "sqlalchemy.sql.expression.FromClause.exported_columns")'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FromClause.exported_columns`](#sqlalchemy.sql.expression.FromClause.exported_columns
    "sqlalchemy.sql.expression.FromClause.exported_columns")'
- en: '[PRE55]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '*inherited from the* [`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch") *方法的* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
- en: Return a new selectable with the given FETCH FIRST criterion applied.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个应用了给定 FETCH FIRST 标准的新可选择性。
- en: This is a numeric value which usually renders as `FETCH {FIRST | NEXT} [ count
    ] {ROW | ROWS} {ONLY | WITH TIES}` expression in the resulting select. This functionality
    is is currently implemented for Oracle, PostgreSQL, MSSQL.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个数字值，通常在结果选择中呈现为`FETCH {FIRST | NEXT} [ count ] {ROW | ROWS} {ONLY | WITH
    TIES}`表达式。此功能目前已在Oracle、PostgreSQL、MSSQL上实现。
- en: Use [`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset") to specify the offset.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset") 来指定偏移量。
- en: Note
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The [`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch") method will replace any clause
    applied with [`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit").
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect") 方法将替换应用了 [`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit") 的任何子句。'
- en: New in version 1.4.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.4起新增。
- en: 'Parameters:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`count` – an integer COUNT parameter, or a SQL expression that provides an
    integer result. When `percent=True` this will represent the percentage of rows
    to return, not the absolute value. Pass `None` to reset it.'
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`count` - 一个整数 COUNT 参数，或者提供整数结果的 SQL 表达式。当`percent=True`时，这将表示要返回的行数的百分比，而不是绝对值。传递`None`来重置它。'
- en: '`with_ties` – When `True`, the WITH TIES option is used to return any additional
    rows that tie for the last place in the result set according to the `ORDER BY`
    clause. The `ORDER BY` may be mandatory in this case. Defaults to `False`'
  id: totrans-351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`with_ties` - 当为`True`时，使用 WITH TIES 选项来返回结果集中与`ORDER BY`子句中最后一位并列的任何其他行。在这种情况下，`ORDER
    BY`可能是强制性的。默认为`False`。'
- en: '`percent` – When `True`, `count` represents the percentage of the total number
    of selected rows to return. Defaults to `False`'
  id: totrans-352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`percent` - 当为`True`时，`count`表示要返回的所选行总数的百分比。默认为`False`。'
- en: See also
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit")'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit")'
- en: '[`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset")'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset")'
- en: '[PRE56]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '*inherited from the* [`Executable.get_execution_options()`](#sqlalchemy.sql.expression.Executable.get_execution_options
    "sqlalchemy.sql.expression.Executable.get_execution_options") *method of* [`Executable`](#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Executable.get_execution_options()`](#sqlalchemy.sql.expression.Executable.get_execution_options
    "sqlalchemy.sql.expression.Executable.get_execution_options") *方法的* [`Executable`](#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")'
- en: Get the non-SQL options which will take effect during execution.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 获取在执行期间生效的非 SQL 选项。
- en: New in version 1.3.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.3起新增。
- en: See also
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")'
- en: '[PRE57]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '*inherited from the* [`GenerativeSelect.get_label_style()`](#sqlalchemy.sql.expression.GenerativeSelect.get_label_style
    "sqlalchemy.sql.expression.GenerativeSelect.get_label_style") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`GenerativeSelect.get_label_style()`](#sqlalchemy.sql.expression.GenerativeSelect.get_label_style
    "sqlalchemy.sql.expression.GenerativeSelect.get_label_style") *方法的* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
- en: Retrieve the current label style.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 检索当前的标签样式。
- en: New in version 1.4.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.4起新增。
- en: '[PRE58]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '*inherited from the* [`GenerativeSelect.group_by()`](#sqlalchemy.sql.expression.GenerativeSelect.group_by
    "sqlalchemy.sql.expression.GenerativeSelect.group_by") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`GenerativeSelect.group_by()`](#sqlalchemy.sql.expression.GenerativeSelect.group_by
    "sqlalchemy.sql.expression.GenerativeSelect.group_by") *方法的* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
- en: Return a new selectable with the given list of GROUP BY criterion applied.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个应用了给定的 GROUP BY 标准列表的新可选择对象。
- en: All existing GROUP BY settings can be suppressed by passing `None`.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 通过传递`None`可以抑制所有现有的 GROUP BY 设置。
- en: 'e.g.:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE59]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Parameters:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '***clauses** – a series of [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") constructs which will be used to generate
    an GROUP BY clause.'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: '***子句** – 一系列将用于生成 GROUP BY 子句的 [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") 构造。'
- en: See also
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Aggregate functions with GROUP BY / HAVING](../tutorial/data_select.html#tutorial-group-by-w-aggregates)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: '[带有 GROUP BY / HAVING 的聚合函数](../tutorial/data_select.html#tutorial-group-by-w-aggregates)
    - 在 [SQLAlchemy 统一教程](../tutorial/index.html#unified-tutorial) 中'
- en: '[Ordering or Grouping by a Label](../tutorial/data_select.html#tutorial-order-by-label)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: '[按标签排序或分组](../tutorial/data_select.html#tutorial-order-by-label) - 在 [SQLAlchemy
    统一教程](../tutorial/index.html#unified-tutorial) 中'
- en: '[PRE60]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Return `True` if this [`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows
    "sqlalchemy.sql.expression.ReturnsRows") is ‘derived’ from the given [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此 [`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows "sqlalchemy.sql.expression.ReturnsRows")
    是从给定的 [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    ‘派生’的，则返回 `True`。
- en: An example would be an Alias of a Table is derived from that Table.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 一个示例是一个表的别名是从该表派生的。
- en: '[PRE61]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '*inherited from the* [`SelectBase.label()`](#sqlalchemy.sql.expression.SelectBase.label
    "sqlalchemy.sql.expression.SelectBase.label") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SelectBase.label()`](#sqlalchemy.sql.expression.SelectBase.label "sqlalchemy.sql.expression.SelectBase.label")
    *方法的* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")'
- en: Return a ‘scalar’ representation of this selectable, embedded as a subquery
    with a label.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此可选择对象的‘标量’表示，嵌入为带有标签的子查询。
- en: See also
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery").'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery")。'
- en: '[PRE62]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '*inherited from the* [`SelectBase.lateral()`](#sqlalchemy.sql.expression.SelectBase.lateral
    "sqlalchemy.sql.expression.SelectBase.lateral") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SelectBase.lateral()`](#sqlalchemy.sql.expression.SelectBase.lateral
    "sqlalchemy.sql.expression.SelectBase.lateral") *方法的* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
- en: Return a LATERAL alias of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable").
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此 [`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable")
    的 LATERAL 别名。
- en: The return value is the [`Lateral`](#sqlalchemy.sql.expression.Lateral "sqlalchemy.sql.expression.Lateral")
    construct also provided by the top-level [`lateral()`](#sqlalchemy.sql.expression.lateral
    "sqlalchemy.sql.expression.lateral") function.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 返回值是顶层 [`lateral()`](#sqlalchemy.sql.expression.lateral "sqlalchemy.sql.expression.lateral")
    函数提供的 [`Lateral`](#sqlalchemy.sql.expression.Lateral "sqlalchemy.sql.expression.Lateral")
    构造。
- en: See also
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[LATERAL correlation](../tutorial/data_select.html#tutorial-lateral-correlation)
    - overview of usage.'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: '[LATERAL 关联](../tutorial/data_select.html#tutorial-lateral-correlation) - 用法概述。'
- en: '[PRE63]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '*inherited from the* [`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit") *方法的* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
- en: Return a new selectable with the given LIMIT criterion applied.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 返回应用了给定 LIMIT 条件的新可选择对象。
- en: This is a numerical value which usually renders as a `LIMIT` expression in the
    resulting select. Backends that don’t support `LIMIT` will attempt to provide
    similar functionality.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个通常呈现为 `LIMIT` 表达式的数值值，在生成的选择中。不支持 `LIMIT` 的后端将尝试提供类似的功能。
- en: Note
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The [`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit") method will replace any clause
    applied with [`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch").
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit") 方法将替换应用的任何子句，使用 [`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch")。'
- en: 'Parameters:'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**limit** – an integer LIMIT parameter, or a SQL expression that provides an
    integer result. Pass `None` to reset it.'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: '**limit** – 整数LIMIT参数，或提供整数结果的SQL表达式。传递`None`来重置它。'
- en: See also
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch")'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch")'
- en: '[`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset")'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset")'
- en: '[PRE64]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '*inherited from the* [`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset") *的* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect") *方法*'
- en: Return a new selectable with the given OFFSET criterion applied.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个应用了给定OFFSET条件的新可选择项。
- en: This is a numeric value which usually renders as an `OFFSET` expression in the
    resulting select. Backends that don’t support `OFFSET` will attempt to provide
    similar functionality.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个通常渲染为结果选择中的`OFFSET`表达式的数值。不支持`OFFSET`的后端将尝试提供类似的功能。
- en: 'Parameters:'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**offset** – an integer OFFSET parameter, or a SQL expression that provides
    an integer result. Pass `None` to reset it.'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: '**offset** – 整数OFFSET参数，或提供整数结果的SQL表达式。传递`None`来重置它。'
- en: See also
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit")'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit")'
- en: '[`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch")'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch")'
- en: '[PRE65]'
  id: totrans-411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '*inherited from the* [`Executable.options()`](#sqlalchemy.sql.expression.Executable.options
    "sqlalchemy.sql.expression.Executable.options") *method of* [`Executable`](#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Executable.options()`](#sqlalchemy.sql.expression.Executable.options
    "sqlalchemy.sql.expression.Executable.options") *的* [`Executable`](#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable") *方法*'
- en: Apply options to this statement.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 对该语句应用选项。
- en: In the general sense, options are any kind of Python object that can be interpreted
    by the SQL compiler for the statement. These options can be consumed by specific
    dialects or specific kinds of compilers.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 从一般意义上讲，选项是任何可以由语句的SQL编译器解释的Python对象。这些选项可以被特定方言或特定类型的编译器消耗。
- en: The most commonly known kind of option are the ORM level options that apply
    “eager load” and other loading behaviors to an ORM query. However, options can
    theoretically be used for many other purposes.
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的选项类型是应用“急加载”和其他加载行为到ORM查询的ORM级别选项。然而，选项理论上可以用于许多其他目的。
- en: For background on specific kinds of options for specific kinds of statements,
    refer to the documentation for those option objects.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 关于特定类型语句的特定类型选项的背景，请参阅这些选项对象的文档。
- en: 'Changed in version 1.4: - added [`Executable.options()`](#sqlalchemy.sql.expression.Executable.options
    "sqlalchemy.sql.expression.Executable.options") to Core statement objects towards
    the goal of allowing unified Core / ORM querying capabilities.'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.4起更改：- 将[`Executable.options()`](#sqlalchemy.sql.expression.Executable.options
    "sqlalchemy.sql.expression.Executable.options") 添加到核心语句对象，以实现统一的核心/ORM查询功能目标。
- en: See also
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Column Loading Options](../orm/queryguide/columns.html#loading-columns) -
    refers to options specific to the usage of ORM queries'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: '[列加载选项](../orm/queryguide/columns.html#loading-columns) - 指的是用于ORM查询的使用特定选项的选项'
- en: '[Relationship Loading with Loader Options](../orm/queryguide/relationships.html#relationship-loader-options)
    - refers to options specific to the usage of ORM queries'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: '[带有加载器选项的关系加载](../orm/queryguide/relationships.html#relationship-loader-options)
    - 指的是用于ORM查询的使用特定选项的选项'
- en: '[PRE66]'
  id: totrans-421
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '*inherited from the* [`GenerativeSelect.order_by()`](#sqlalchemy.sql.expression.GenerativeSelect.order_by
    "sqlalchemy.sql.expression.GenerativeSelect.order_by") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`GenerativeSelect.order_by()`](#sqlalchemy.sql.expression.GenerativeSelect.order_by
    "sqlalchemy.sql.expression.GenerativeSelect.order_by") *的* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect") *方法*'
- en: Return a new selectable with the given list of ORDER BY criteria applied.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个应用了给定ORDER BY条件列表的新可选择性。
- en: 'e.g.:'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE67]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Calling this method multiple times is equivalent to calling it once with all
    the clauses concatenated. All existing ORDER BY criteria may be cancelled by passing
    `None` by itself. New ORDER BY criteria may then be added by invoking [`Query.order_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.order_by
    "sqlalchemy.orm.Query.order_by") again, e.g.:'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 多次调用此方法相当于一次性将所有子句连接起来调用一次。 通过单独传递`None`可以取消所有现有的ORDER BY条件。 然后可以通过再次调用[`Query.order_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.order_by
    "sqlalchemy.orm.Query.order_by") 来添加新的ORDER BY条件，例如：
- en: '[PRE68]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Parameters:'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '***clauses** – a series of [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") constructs which will be used to generate
    an ORDER BY clause.'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: '***子句** – 一系列将用于生成ORDER BY子句的[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")构造。'
- en: See also
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[ORDER BY](../tutorial/data_select.html#tutorial-order-by) - in the [SQLAlchemy
    Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: '[ORDER BY](../tutorial/data_select.html#tutorial-order-by) - 在[SQLAlchemy统一教程](../tutorial/index.html#unified-tutorial)中'
- en: '[Ordering or Grouping by a Label](../tutorial/data_select.html#tutorial-order-by-label)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: '[按标签排序或分组](../tutorial/data_select.html#tutorial-order-by-label) - 在[SQLAlchemy统一教程](../tutorial/index.html#unified-tutorial)中'
- en: '[PRE69]'
  id: totrans-433
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '*inherited from the* [`Selectable.replace_selectable()`](#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") *method of* [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Selectable.replace_selectable()`](#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") *方法的* [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
- en: Replace all occurrences of [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") ‘old’ with the given [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") object, returning a copy of this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 用给定的[`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")对象替换所有[`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") ‘old’的所有出现，返回此[`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")的副本。
- en: 'Deprecated since version 1.4: The [`Selectable.replace_selectable()`](#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") method is deprecated,
    and will be removed in a future release. Similar functionality is available via
    the sqlalchemy.sql.visitors module.'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.4起弃用：[`Selectable.replace_selectable()`](#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable")方法已弃用，并将在将来的版本中删除。 通过sqlalchemy.sql.visitors模块可以获得类似的功能。
- en: '[PRE70]'
  id: totrans-437
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '*inherited from the* [`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery") *方���的* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
- en: Return a ‘scalar’ representation of this selectable, which can be used as a
    column expression.
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此可选择性的‘标量’表示，可用作列表达式。
- en: The returned object is an instance of [`ScalarSelect`](#sqlalchemy.sql.expression.ScalarSelect
    "sqlalchemy.sql.expression.ScalarSelect").
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的对象是[`ScalarSelect`](#sqlalchemy.sql.expression.ScalarSelect "sqlalchemy.sql.expression.ScalarSelect")的一个实例。
- en: Typically, a select statement which has only one column in its columns clause
    is eligible to be used as a scalar expression. The scalar subquery can then be
    used in the WHERE clause or columns clause of an enclosing SELECT.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在其columns子句中只有一个列的select语句有资格用作标量表达式。 然后可以在封闭SELECT的WHERE子句或columns子句中使用标量子查询。
- en: Note that the scalar subquery differentiates from the FROM-level subquery that
    can be produced using the [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") method.
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，标量子查询与使用[`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery")方法生成的FROM级子查询不同。
- en: See also
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Scalar and Correlated Subqueries](../tutorial/data_select.html#tutorial-scalar-subquery)
    - in the 2.0 tutorial'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: '[标量和相关子查询](../tutorial/data_select.html#tutorial-scalar-subquery) - 在2.0教程中'
- en: '[PRE71]'
  id: totrans-445
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '*inherited from the* [`SelectBase.select()`](#sqlalchemy.sql.expression.SelectBase.select
    "sqlalchemy.sql.expression.SelectBase.select") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")
    *方法的* [`SelectBase.select()`](#sqlalchemy.sql.expression.SelectBase.select "sqlalchemy.sql.expression.SelectBase.select")'
- en: 'Deprecated since version 1.4: The [`SelectBase.select()`](#sqlalchemy.sql.expression.SelectBase.select
    "sqlalchemy.sql.expression.SelectBase.select") method is deprecated and will be
    removed in a future release; this method implicitly creates a subquery that should
    be explicit. Please call [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") first in order to create a subquery,
    which then can be selected.'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.4起弃用：[`SelectBase.select()`](#sqlalchemy.sql.expression.SelectBase.select
    "sqlalchemy.sql.expression.SelectBase.select")方法已弃用，并将在将来的版本中删除；此方法隐式创建一个应明确的子查询。请先调用[`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery")以创建子查询，然后可以选择它。
- en: '[PRE72]'
  id: totrans-448
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: A [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") representing the columns that this
    SELECT statement or similar construct returns in its result set, not including
    [`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause "sqlalchemy.sql.expression.TextClause")
    constructs.
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")代表此SELECT语句或类似结构在其结果集中返回的列，不包括[`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause")构造。
- en: For a [`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect "sqlalchemy.sql.expression.CompoundSelect"),
    the [`CompoundSelect.selected_columns`](#sqlalchemy.sql.expression.CompoundSelect.selected_columns
    "sqlalchemy.sql.expression.CompoundSelect.selected_columns") attribute returns
    the selected columns of the first SELECT statement contained within the series
    of statements within the set operation.
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 对于[`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect "sqlalchemy.sql.expression.CompoundSelect")，[`CompoundSelect.selected_columns`](#sqlalchemy.sql.expression.CompoundSelect.selected_columns
    "sqlalchemy.sql.expression.CompoundSelect.selected_columns")属性返回一系列语句中第一个SELECT语句的选定列。
- en: See also
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Select.selected_columns`](#sqlalchemy.sql.expression.Select.selected_columns
    "sqlalchemy.sql.expression.Select.selected_columns")'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.selected_columns`](#sqlalchemy.sql.expression.Select.selected_columns
    "sqlalchemy.sql.expression.Select.selected_columns")'
- en: New in version 1.4.
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4中新增。
- en: '[PRE73]'
  id: totrans-454
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: Apply a ‘grouping’ to this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 对这个[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")应用一个“分组”。
- en: This method is overridden by subclasses to return a “grouping” construct, i.e.
    parenthesis. In particular it’s used by “binary” expressions to provide a grouping
    around themselves when placed into a larger expression, as well as by [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs when placed into the FROM clause
    of another [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select").
    (Note that subqueries should be normally created using the [`Select.alias()`](#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") method, as many platforms require nested
    SELECT statements to be named).
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法被子类重写以返回一个“分组”构造，即括号。特别是它被“二进制”表达式使用时，当它们被放置到更大的表达式中时，提供了一个围绕自身的分组，以及当[`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")构造被放置到另一个[`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")的FROM子句中时。（请注意，子查询通常应使用[`Select.alias()`](#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias")方法创建，因为许多平台要求嵌套的SELECT语句需要命名）。
- en: As expressions are composed together, the application of [`self_group()`](#sqlalchemy.sql.expression.CompoundSelect.self_group
    "sqlalchemy.sql.expression.CompoundSelect.self_group") is automatic - end-user
    code should never need to use this method directly. Note that SQLAlchemy’s clause
    constructs take operator precedence into account - so parenthesis might not be
    needed, for example, in an expression like `x OR (y AND z)` - AND takes precedence
    over OR.
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 随着表达式的组合，[`self_group()`](#sqlalchemy.sql.expression.CompoundSelect.self_group
    "sqlalchemy.sql.expression.CompoundSelect.self_group")的应用是自动的 - 最终用户代码不应直接使用此方法。请注意，SQLAlchemy的子句构造考虑了操作符优先级
    - 因此在表达式中可能不需要括号，例如`x OR (y AND z)` - AND优先于OR。
- en: The base [`self_group()`](#sqlalchemy.sql.expression.CompoundSelect.self_group
    "sqlalchemy.sql.expression.CompoundSelect.self_group") method of [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") just returns self.
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement "sqlalchemy.sql.expression.ClauseElement")的基本[`self_group()`](#sqlalchemy.sql.expression.CompoundSelect.self_group
    "sqlalchemy.sql.expression.CompoundSelect.self_group")方法只返回self。'
- en: '[PRE74]'
  id: totrans-459
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Return a new selectable with the specified label style.
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 返回具有指定标签样式的新可选择项。
- en: There are three “label styles” available, [`SelectLabelStyle.LABEL_STYLE_DISAMBIGUATE_ONLY`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_DISAMBIGUATE_ONLY
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_DISAMBIGUATE_ONLY"), [`SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL"),
    and [`SelectLabelStyle.LABEL_STYLE_NONE`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_NONE
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_NONE"). The default style
    is [`SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL").
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 有三种“标签样式”可用，[`SelectLabelStyle.LABEL_STYLE_DISAMBIGUATE_ONLY`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_DISAMBIGUATE_ONLY
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_DISAMBIGUATE_ONLY")、[`SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL")和[`SelectLabelStyle.LABEL_STYLE_NONE`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_NONE
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_NONE")。默认样式是[`SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL")。
- en: In modern SQLAlchemy, there is not generally a need to change the labeling style,
    as per-expression labels are more effectively used by making use of the [`ColumnElement.label()`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.label
    "sqlalchemy.sql.expression.ColumnElement.label") method. In past versions, `LABEL_STYLE_TABLENAME_PLUS_COL`
    was used to disambiguate same-named columns from different tables, aliases, or
    subqueries; the newer `LABEL_STYLE_DISAMBIGUATE_ONLY` now applies labels only
    to names that conflict with an existing name so that the impact of this labeling
    is minimal.
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代SQLAlchemy中，通常不需要更改标签样式，因为通过使用[`ColumnElement.label()`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.label
    "sqlalchemy.sql.expression.ColumnElement.label")方法更有效地使用逐表达式标签。在过去的版本中，`LABEL_STYLE_TABLENAME_PLUS_COL`用于消除来自不同表、别名或子查询的同名列的歧义；较新的`LABEL_STYLE_DISAMBIGUATE_ONLY`现在仅对与现有名称冲突的名称应用标签，因此此标签的影响最小。
- en: The rationale for disambiguation is mostly so that all column expressions are
    available from a given [`FromClause.c`](#sqlalchemy.sql.expression.FromClause.c
    "sqlalchemy.sql.expression.FromClause.c") collection when a subquery is created.
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 消除歧义的理由主要是为了在创建子查询时从给定的[`FromClause.c`](#sqlalchemy.sql.expression.FromClause.c
    "sqlalchemy.sql.expression.FromClause.c")集合中使所有列表达式可用。
- en: 'New in version 1.4: - the [`GenerativeSelect.set_label_style()`](#sqlalchemy.sql.expression.GenerativeSelect.set_label_style
    "sqlalchemy.sql.expression.GenerativeSelect.set_label_style") method replaces
    the previous combination of `.apply_labels()`, `.with_labels()` and `use_labels=True`
    methods and/or parameters.'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始：- [`GenerativeSelect.set_label_style()`](#sqlalchemy.sql.expression.GenerativeSelect.set_label_style
    "sqlalchemy.sql.expression.GenerativeSelect.set_label_style")方法替换了以前的`.apply_labels()`、`.with_labels()`和`use_labels=True`方法和/或参数的组合。
- en: See also
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '`LABEL_STYLE_DISAMBIGUATE_ONLY`'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: '`LABEL_STYLE_DISAMBIGUATE_ONLY`'
- en: '`LABEL_STYLE_TABLENAME_PLUS_COL`'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: '`LABEL_STYLE_TABLENAME_PLUS_COL`'
- en: '`LABEL_STYLE_NONE`'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: '`LABEL_STYLE_NONE`'
- en: '`LABEL_STYLE_DEFAULT`'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: '`LABEL_STYLE_DEFAULT`'
- en: '[PRE75]'
  id: totrans-470
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '*inherited from the* [`GenerativeSelect.slice()`](#sqlalchemy.sql.expression.GenerativeSelect.slice
    "sqlalchemy.sql.expression.GenerativeSelect.slice") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`GenerativeSelect.slice()`](#sqlalchemy.sql.expression.GenerativeSelect.slice
    "sqlalchemy.sql.expression.GenerativeSelect.slice") *方法的* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
- en: Apply LIMIT / OFFSET to this statement based on a slice.
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 根据切片对此语句应用LIMIT / OFFSET。
- en: The start and stop indices behave like the argument to Python’s built-in `range()`
    function. This method provides an alternative to using `LIMIT`/`OFFSET` to get
    a slice of the query.
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 开始和停止索引的行为类似于Python内置`range()`函数的参数。此方法提供了一种替代方法，用于使用`LIMIT`/`OFFSET`获取查询的切片。
- en: For example,
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，
- en: '[PRE76]'
  id: totrans-475
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: renders as
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染为
- en: '[PRE77]'
  id: totrans-477
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: Note
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The [`GenerativeSelect.slice()`](#sqlalchemy.sql.expression.GenerativeSelect.slice
    "sqlalchemy.sql.expression.GenerativeSelect.slice") method will replace any clause
    applied with [`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch").
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.slice()`](#sqlalchemy.sql.expression.GenerativeSelect.slice
    "sqlalchemy.sql.expression.GenerativeSelect.slice") 方法将替换应用的任何子句，该子句应用了 [`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch")。'
- en: 'New in version 1.4: Added the [`GenerativeSelect.slice()`](#sqlalchemy.sql.expression.GenerativeSelect.slice
    "sqlalchemy.sql.expression.GenerativeSelect.slice") method generalized from the
    ORM.'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中的新功能：增加了从 ORM 泛化的 [`GenerativeSelect.slice()`](#sqlalchemy.sql.expression.GenerativeSelect.slice
    "sqlalchemy.sql.expression.GenerativeSelect.slice") 方法。
- en: See also
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit")'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit")'
- en: '[`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset")'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset")'
- en: '[`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch")'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch")'
- en: '[PRE78]'
  id: totrans-485
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '*inherited from the* [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")
    *的* [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery "sqlalchemy.sql.expression.SelectBase.subquery")
    *方法继承*'
- en: Return a subquery of this [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase").
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此 [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")
    的子查询。
- en: A subquery is from a SQL perspective a parenthesized, named construct that can
    be placed in the FROM clause of another SELECT statement.
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 从 SQL 角度看，子查询是一种括号括起来的、命名的构造，可以放置在另一个 SELECT 语句的 FROM 子句中。
- en: 'Given a SELECT statement such as:'
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 假设有一个如下所示的 SELECT 语句：
- en: '[PRE79]'
  id: totrans-490
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'The above statement might look like:'
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 上述语句可能如下所示：
- en: '[PRE80]'
  id: totrans-492
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'The subquery form by itself renders the same way, however when embedded into
    the FROM clause of another SELECT statement, it becomes a named sub-element:'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 单独呈现子查询形式时，呈现方式相同，但是当嵌入到另一个 SELECT 语句的 FROM 子句中时，它变成了一个命名子元素：
- en: '[PRE81]'
  id: totrans-494
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'The above renders as:'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 上述内容呈现为：
- en: '[PRE82]'
  id: totrans-496
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: Historically, [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") is equivalent to calling the
    [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias "sqlalchemy.sql.expression.FromClause.alias")
    method on a FROM object; however, as a [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase") object is not directly FROM object, the
    [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery "sqlalchemy.sql.expression.SelectBase.subquery")
    method provides clearer semantics.
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: 从历史上看，[`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") 等同于在 FROM 对象上调用 [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") 方法；但是，由于 [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase") 对象不是直接的 FROM 对象，因此 [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") 方法提供了更清晰的语义。
- en: New in version 1.4.
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中的新功能。
- en: '[PRE83]'
  id: totrans-499
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '*inherited from the* [`GenerativeSelect.with_for_update()`](#sqlalchemy.sql.expression.GenerativeSelect.with_for_update
    "sqlalchemy.sql.expression.GenerativeSelect.with_for_update") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect "sqlalchemy.sql.expression.GenerativeSelect")
    *的* [`GenerativeSelect.with_for_update()`](#sqlalchemy.sql.expression.GenerativeSelect.with_for_update
    "sqlalchemy.sql.expression.GenerativeSelect.with_for_update") *方法继承*'
- en: Specify a `FOR UPDATE` clause for this [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect").
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 为此 [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect "sqlalchemy.sql.expression.GenerativeSelect")
    指定一个 `FOR UPDATE` 子句。
- en: 'E.g.:'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE84]'
  id: totrans-503
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'On a database like PostgreSQL or Oracle, the above would render a statement
    like:'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: 在像 PostgreSQL 或 Oracle 这样的数据库上，上述语句将呈现为如下语句：
- en: '[PRE85]'
  id: totrans-505
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'on other backends, the `nowait` option is ignored and instead would produce:'
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 在其他后端，`nowait` 选项将被忽略，而会产生以下输出：
- en: '[PRE86]'
  id: totrans-507
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: When called with no arguments, the statement will render with the suffix `FOR
    UPDATE`. Additional arguments can then be provided which allow for common database-specific
    variants.
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 当不带参数调用时，语句将带有后缀`FOR UPDATE`。然后可以提供额外的参数，允许使用常见的特定于数据库的变体。
- en: 'Parameters:'
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`nowait` – boolean; will render `FOR UPDATE NOWAIT` on Oracle and PostgreSQL
    dialects.'
  id: totrans-510
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nowait` – 布尔值；在Oracle和PostgreSQL方言上会渲染`FOR UPDATE NOWAIT`。'
- en: '`read` – boolean; will render `LOCK IN SHARE MODE` on MySQL, `FOR SHARE` on
    PostgreSQL. On PostgreSQL, when combined with `nowait`, will render `FOR SHARE
    NOWAIT`.'
  id: totrans-511
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`read` – 布尔值；在MySQL上会渲染`LOCK IN SHARE MODE`，在PostgreSQL上会渲染`FOR SHARE`。在PostgreSQL上，与`nowait`组合时，会渲染`FOR
    SHARE NOWAIT`。'
- en: '`of` – SQL expression or list of SQL expression elements, (typically [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects or a compatible expression, for some backends
    may also be a table expression) which will render into a `FOR UPDATE OF` clause;
    supported by PostgreSQL, Oracle, some MySQL versions and possibly others. May
    render as a table or as a column depending on backend.'
  id: totrans-512
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`of` – SQL表达式或SQL表达式元素列表，（通常是[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象或兼容表达式，对于某些后端也可以是表达式）将渲染为`FOR UPDATE OF`子句；受 PostgreSQL、Oracle、某些MySQL版本和可能其他后端支持。根据后端的不同，可能会渲染为表或列。'
- en: '`skip_locked` – boolean, will render `FOR UPDATE SKIP LOCKED` on Oracle and
    PostgreSQL dialects or `FOR SHARE SKIP LOCKED` if `read=True` is also specified.'
  id: totrans-513
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`skip_locked` – 布尔值，在Oracle和PostgreSQL方言上会渲染`FOR UPDATE SKIP LOCKED`，如果还指定了`read=True`，则会渲染`FOR
    SHARE SKIP LOCKED`。'
- en: '`key_share` – boolean, will render `FOR NO KEY UPDATE`, or if combined with
    `read=True` will render `FOR KEY SHARE`, on the PostgreSQL dialect.'
  id: totrans-514
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`key_share` – 布尔值，会渲染`FOR NO KEY UPDATE`，或者如果与`read=True`组合，会在PostgreSQL方言上渲染`FOR
    KEY SHARE`。'
- en: '[PRE87]'
  id: totrans-515
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: Represent a Common Table Expression.
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一个公共表达式。
- en: The [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    object is obtained using the [`SelectBase.cte()`](#sqlalchemy.sql.expression.SelectBase.cte
    "sqlalchemy.sql.expression.SelectBase.cte") method from any SELECT statement.
    A less often available syntax also allows use of the [`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte
    "sqlalchemy.sql.expression.HasCTE.cte") method present on [DML](../glossary.html#term-DML)
    constructs such as [`Insert`](dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert"),
    [`Update`](dml.html#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    and [`Delete`](dml.html#sqlalchemy.sql.expression.Delete "sqlalchemy.sql.expression.Delete").
    See the [`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte "sqlalchemy.sql.expression.HasCTE.cte")
    method for usage details on CTEs.
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: '[`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")对象是通过任何SELECT语句的[`SelectBase.cte()`](#sqlalchemy.sql.expression.SelectBase.cte
    "sqlalchemy.sql.expression.SelectBase.cte")方法获得的。较少见的语法还允许在[DML](../glossary.html#term-DML)构造上使用[`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte
    "sqlalchemy.sql.expression.HasCTE.cte")方法，例如[`Insert`](dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert")、[`Update`](dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update")和[`Delete`](dml.html#sqlalchemy.sql.expression.Delete
    "sqlalchemy.sql.expression.Delete")。查看[`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte
    "sqlalchemy.sql.expression.HasCTE.cte")方法以获取有关CTE的用法详细信息。'
- en: See also
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[Subqueries and CTEs](../tutorial/data_select.html#tutorial-subqueries-ctes)
    - in the 2.0 tutorial'
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: '[子查询和CTE](../tutorial/data_select.html#tutorial-subqueries-ctes) - 在2.0教程中'
- en: '[`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte "sqlalchemy.sql.expression.HasCTE.cte")
    - examples of calling styles'
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: '[`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte "sqlalchemy.sql.expression.HasCTE.cte")
    - 调用样式示例'
- en: '**Members**'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[alias()](#sqlalchemy.sql.expression.CTE.alias), [union()](#sqlalchemy.sql.expression.CTE.union),
    [union_all()](#sqlalchemy.sql.expression.CTE.union_all)'
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: '[alias()](#sqlalchemy.sql.expression.CTE.alias), [union()](#sqlalchemy.sql.expression.CTE.union),
    [union_all()](#sqlalchemy.sql.expression.CTE.union_all)'
- en: '**Class signature**'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    (`sqlalchemy.sql.roles.DMLTableRole`, `sqlalchemy.sql.roles.IsCTERole`, `sqlalchemy.sql.expression.Generative`,
    [`sqlalchemy.sql.expression.HasPrefixes`](#sqlalchemy.sql.expression.HasPrefixes
    "sqlalchemy.sql.expression.HasPrefixes"), [`sqlalchemy.sql.expression.HasSuffixes`](#sqlalchemy.sql.expression.HasSuffixes
    "sqlalchemy.sql.expression.HasSuffixes"), [`sqlalchemy.sql.expression.AliasedReturnsRows`](#sqlalchemy.sql.expression.AliasedReturnsRows
    "sqlalchemy.sql.expression.AliasedReturnsRows"))
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.expression.CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    (`sqlalchemy.sql.roles.DMLTableRole`, `sqlalchemy.sql.roles.IsCTERole`, `sqlalchemy.sql.expression.Generative`,
    [`sqlalchemy.sql.expression.HasPrefixes`](#sqlalchemy.sql.expression.HasPrefixes
    "sqlalchemy.sql.expression.HasPrefixes"), [`sqlalchemy.sql.expression.HasSuffixes`](#sqlalchemy.sql.expression.HasSuffixes
    "sqlalchemy.sql.expression.HasSuffixes"), [`sqlalchemy.sql.expression.AliasedReturnsRows`](#sqlalchemy.sql.expression.AliasedReturnsRows
    "sqlalchemy.sql.expression.AliasedReturnsRows"))
- en: '[PRE88]'
  id: totrans-525
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: Return an [`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    of this [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE").
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此[`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")的[`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias")。
- en: This method is a CTE-specific specialization of the [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") method.
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法是[`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias "sqlalchemy.sql.expression.FromClause.alias")方法的CTE特定专业化。
- en: See also
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using Aliases](../tutorial/data_select.html#tutorial-using-aliases)'
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用别名](../tutorial/data_select.html#tutorial-using-aliases)'
- en: '[`alias()`](#sqlalchemy.sql.expression.alias "sqlalchemy.sql.expression.alias")'
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: '[`alias()`](#sqlalchemy.sql.expression.alias "sqlalchemy.sql.expression.alias")'
- en: '[PRE89]'
  id: totrans-531
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: Return a new [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    with a SQL `UNION` of the original CTE against the given selectables provided
    as positional arguments.
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的[`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")，其中包含原始CTE与提供的可选参数作为位置参数的SQL
    `UNION`。
- en: 'Parameters:'
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '***other** –'
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: '***其他** –'
- en: one or more elements with which to create a UNION.
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: 一个或多个用于创建UNION的元素。
- en: 'Changed in version 1.4.28: multiple elements are now accepted.'
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4.28更改：现在接受多个元素。
- en: See also
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte "sqlalchemy.sql.expression.HasCTE.cte")
    - examples of calling styles'
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: '[`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte "sqlalchemy.sql.expression.HasCTE.cte")
    - 调用样式示例'
- en: '[PRE90]'
  id: totrans-539
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: Return a new [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    with a SQL `UNION ALL` of the original CTE against the given selectables provided
    as positional arguments.
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的[`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")，其中包含原始CTE与提供的可选参数作为位置参数的SQL
    `UNION ALL`。
- en: 'Parameters:'
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '***other** –'
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: '***其他** –'
- en: one or more elements with which to create a UNION.
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: 一个或多个用于创建UNION的元素。
- en: 'Changed in version 1.4.28: multiple elements are now accepted.'
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4.28更改：现在接受多个元素。
- en: See also
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte "sqlalchemy.sql.expression.HasCTE.cte")
    - examples of calling styles'
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: '[`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte "sqlalchemy.sql.expression.HasCTE.cte")
    - 调用样式示例'
- en: '[PRE91]'
  id: totrans-547
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: Mark a [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") as supporting execution.
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: 将一个[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")标记为支持执行。
- en: '[`Executable`](#sqlalchemy.sql.expression.Executable "sqlalchemy.sql.expression.Executable")
    is a superclass for all “statement” types of objects, including [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select"), [`delete()`](dml.html#sqlalchemy.sql.expression.delete
    "sqlalchemy.sql.expression.delete"), [`update()`](dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update"), [`insert()`](dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert"), [`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text").'
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Executable`](#sqlalchemy.sql.expression.Executable "sqlalchemy.sql.expression.Executable")是所有“语句”类型对象的超类，包括[`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")、[`delete()`](dml.html#sqlalchemy.sql.expression.delete
    "sqlalchemy.sql.expression.delete")、[`update()`](dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update")、[`insert()`](dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert")、[`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")。'
- en: '**Members**'
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[execution_options()](#sqlalchemy.sql.expression.Executable.execution_options),
    [get_execution_options()](#sqlalchemy.sql.expression.Executable.get_execution_options),
    [options()](#sqlalchemy.sql.expression.Executable.options)'
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: '[execution_options()](#sqlalchemy.sql.expression.Executable.execution_options),
    [get_execution_options()](#sqlalchemy.sql.expression.Executable.get_execution_options),
    [options()](#sqlalchemy.sql.expression.Executable.options)'
- en: '**Class signature**'
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.Executable`](#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable") (`sqlalchemy.sql.roles.StatementRole`)
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.expression.Executable`](#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable") (`sqlalchemy.sql.roles.StatementRole`)
- en: '[PRE92]'
  id: totrans-554
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: Set non-SQL options for the statement which take effect during execution.
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: 为语句设置在执行期间生效的非SQL选项。
- en: Execution options can be set at many scopes, including per-statement, per-connection,
    or per execution, using methods such as [`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") and parameters which accept
    a dictionary of options such as [`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute") and [`Session.execute.execution_options`](../orm/session_api.html#sqlalchemy.orm.Session.execute.params.execution_options
    "sqlalchemy.orm.Session.execute").
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在多个范围设置执行选项，包括每个语句、每个连接或每次执行，使用诸如[`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")和接受选项字典的参数的方法，如[`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute")和[`Session.execute.execution_options`](../orm/session_api.html#sqlalchemy.orm.Session.execute.params.execution_options
    "sqlalchemy.orm.Session.execute")。
- en: The primary characteristic of an execution option, as opposed to other kinds
    of options such as ORM loader options, is that **execution options never affect
    the compiled SQL of a query, only things that affect how the SQL statement itself
    is invoked or how results are fetched**. That is, execution options are not part
    of what’s accommodated by SQL compilation nor are they considered part of the
    cached state of a statement.
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: 执行选项的主要特征与其他类型的选项（如ORM加载器选项）不同，**执行选项永远不会影响查询的编译SQL，只会影响SQL语句本身的调用方式或结果的获取方式**。也就是说，执行选项不是SQL编译所考虑的内容，也不被视为语句的缓存状态的一部分。
- en: 'The [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") method is [generative](../glossary.html#term-generative),
    as is the case for the method as applied to the [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") and [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") objects, which means when the method is called, a copy
    of the object is returned, which applies the given parameters to that new copy,
    but leaves the original unchanged:'
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")方法是[生成的](../glossary.html#term-generative)，就像应用于[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")和[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象的方法一样，这意味着当调用该方法时，会返回对象的副本，将给定的参数应用于该新副本，但原始对象保持不变：'
- en: '[PRE93]'
  id: totrans-559
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: An exception to this behavior is the [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object, where the [`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") method is explicitly **not**
    generative.
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: 一个例外是[`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")对象，其中[`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")方法明确地**不**是生成的。
- en: 'The kinds of options that may be passed to [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") and other related methods
    and parameter dictionaries include parameters that are explicitly consumed by
    SQLAlchemy Core or ORM, as well as arbitrary keyword arguments not defined by
    SQLAlchemy, which means the methods and/or parameter dictionaries may be used
    for user-defined parameters that interact with custom code, which may access the
    parameters using methods such as [`Executable.get_execution_options()`](#sqlalchemy.sql.expression.Executable.get_execution_options
    "sqlalchemy.sql.expression.Executable.get_execution_options") and [`Connection.get_execution_options()`](connections.html#sqlalchemy.engine.Connection.get_execution_options
    "sqlalchemy.engine.Connection.get_execution_options"), or within selected event
    hooks using a dedicated `execution_options` event parameter such as [`ConnectionEvents.before_execute.execution_options`](events.html#sqlalchemy.events.ConnectionEvents.before_execute.params.execution_options
    "sqlalchemy.events.ConnectionEvents.before_execute") or [`ORMExecuteState.execution_options`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.execution_options
    "sqlalchemy.orm.ORMExecuteState.execution_options"), e.g.:'
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: 可以传递给[`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")和其他相关方法和参数字典的选项类型包括被SQLAlchemy
    Core或ORM明确消耗的参数，以及SQLAlchemy未定义的任意关键字参数，这意味着这些方法和/或参数字典可用于与自定义代码交互的用户定义参数，可以使用诸如[`Executable.get_execution_options()`](#sqlalchemy.sql.expression.Executable.get_execution_options
    "sqlalchemy.sql.expression.Executable.get_execution_options")和[`Connection.get_execution_options()`](connections.html#sqlalchemy.engine.Connection.get_execution_options
    "sqlalchemy.engine.Connection.get_execution_options")等方法访问参数，或者在选定的事件钩子中使用专用的`execution_options`事件参数，例如[`ConnectionEvents.before_execute.execution_options`](events.html#sqlalchemy.events.ConnectionEvents.before_execute.params.execution_options
    "sqlalchemy.events.ConnectionEvents.before_execute")或[`ORMExecuteState.execution_options`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.execution_options
    "sqlalchemy.orm.ORMExecuteState.execution_options")，例如：
- en: '[PRE94]'
  id: totrans-562
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'Within the scope of options that are explicitly recognized by SQLAlchemy, most
    apply to specific classes of objects and not others. The most common execution
    options include:'
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: 在SQLAlchemy明确识别的选项范围内，大多数适用于特定类别的对象而不是其他对象。最常见的执行选项包括：
- en: '[`Connection.execution_options.isolation_level`](connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") - sets the isolation level for
    a connection or a class of connections via an [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"). This option is accepted only by [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") or [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine").'
  id: totrans-564
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.isolation_level`](connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") - 通过[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")为连接或一类连接设置隔离级别。此选项仅被[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")或[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")接受。'
- en: '[`Connection.execution_options.stream_results`](connections.html#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") - indicates results should be
    fetched using a server side cursor; this option is accepted by [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"), by the [`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute") parameter on [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute"), and additionally by [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") on a SQL statement object,
    as well as by ORM constructs like [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute").'
  id: totrans-565
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.stream_results`](connections.html#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") - 表示应使用服务器端游标获取结果；此选项被[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")，[`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")上的[`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute")参数以及SQL语句对象上的[`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")以及ORM构造如[`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")所接受。'
- en: '[`Connection.execution_options.compiled_cache`](connections.html#sqlalchemy.engine.Connection.execution_options.params.compiled_cache
    "sqlalchemy.engine.Connection.execution_options") - indicates a dictionary that
    will serve as the [SQL compilation cache](connections.html#sql-caching) for a
    [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    or [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine"),
    as well as for ORM methods like [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute"). Can be passed as `None` to disable caching
    for statements. This option is not accepted by [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") as it is inadvisable
    to carry along a compilation cache within a statement object.'
  id: totrans-566
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.compiled_cache`](connections.html#sqlalchemy.engine.Connection.execution_options.params.compiled_cache
    "sqlalchemy.engine.Connection.execution_options") - 表示将作为[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")或[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")的[SQL编译缓存](connections.html#sql-caching)的字典，以及[`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")等ORM方法的缓存。 可以传递为`None`以禁用语句的缓存。 此选项不被[`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")接受，因为在语句对象中携带编译缓存是不明智的。'
- en: '[`Connection.execution_options.schema_translate_map`](connections.html#sqlalchemy.engine.Connection.execution_options.params.schema_translate_map
    "sqlalchemy.engine.Connection.execution_options") - a mapping of schema names
    used by the [Schema Translate Map](connections.html#schema-translating) feature,
    accepted by [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine"),
    [`Executable`](#sqlalchemy.sql.expression.Executable "sqlalchemy.sql.expression.Executable"),
    as well as by ORM constructs like [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute").'
  id: totrans-567
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.schema_translate_map`](connections.html#sqlalchemy.engine.Connection.execution_options.params.schema_translate_map
    "sqlalchemy.engine.Connection.execution_options") - 用于[模式转换映射](connections.html#schema-translating)功能的模式名称映射，被[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")，[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")，[`Executable`](#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")接受，以及ORM构造如[`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")。'
- en: See also
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")'
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")'
- en: '[`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute")'
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute")'
- en: '[`Session.execute.execution_options`](../orm/session_api.html#sqlalchemy.orm.Session.execute.params.execution_options
    "sqlalchemy.orm.Session.execute")'
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.execute.execution_options`](../orm/session_api.html#sqlalchemy.orm.Session.execute.params.execution_options
    "sqlalchemy.orm.Session.execute")'
- en: '[ORM Execution Options](../orm/queryguide/api.html#orm-queryguide-execution-options)
    - documentation on all ORM-specific execution options'
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: '[ORM 执行选项](../orm/queryguide/api.html#orm-queryguide-execution-options) - 所有
    ORM 特定执行选项的文档'
- en: '[PRE95]'
  id: totrans-573
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: Get the non-SQL options which will take effect during execution.
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: 获取在执行期间生效的非 SQL 选项。
- en: New in version 1.3.
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.3 中的新功能。
- en: See also
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")'
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")'
- en: '[PRE96]'
  id: totrans-578
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: Apply options to this statement.
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: 将选项应用于此语句。
- en: In the general sense, options are any kind of Python object that can be interpreted
    by the SQL compiler for the statement. These options can be consumed by specific
    dialects or specific kinds of compilers.
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，选项是任何可以被 SQL 编译器解释为语句的 Python 对象。这些选项可以被特定的方言或特定类型的编译器消耗。
- en: The most commonly known kind of option are the ORM level options that apply
    “eager load” and other loading behaviors to an ORM query. However, options can
    theoretically be used for many other purposes.
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的选项类型是应用“急加载”和其他加载行为到 ORM 查询的 ORM 级选项。然而，选项理论上可以用于许多其他目的。
- en: For background on specific kinds of options for specific kinds of statements,
    refer to the documentation for those option objects.
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: 有关特定类型语句的特定类型选项的背景，请参阅这些选项对象的文档。
- en: 'Changed in version 1.4: - added [`Executable.options()`](#sqlalchemy.sql.expression.Executable.options
    "sqlalchemy.sql.expression.Executable.options") to Core statement objects towards
    the goal of allowing unified Core / ORM querying capabilities.'
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中的更改：- 向核心语句对象添加了 [`Executable.options()`](#sqlalchemy.sql.expression.Executable.options
    "sqlalchemy.sql.expression.Executable.options")，以实现统一的核心 / ORM 查询功能。
- en: See also
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Column Loading Options](../orm/queryguide/columns.html#loading-columns) -
    refers to options specific to the usage of ORM queries'
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: '[列加载选项](../orm/queryguide/columns.html#loading-columns) - 指特定于 ORM 查询使用的选项'
- en: '[Relationship Loading with Loader Options](../orm/queryguide/relationships.html#relationship-loader-options)
    - refers to options specific to the usage of ORM queries'
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用加载器选项加载关系](../orm/queryguide/relationships.html#relationship-loader-options)
    - 指特定于 ORM 查询使用的选项'
- en: '[PRE97]'
  id: totrans-587
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: Represent an `EXISTS` clause.
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一个 `EXISTS` 子句。
- en: See [`exists()`](#sqlalchemy.sql.expression.exists "sqlalchemy.sql.expression.exists")
    for a description of usage.
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅 [`exists()`](#sqlalchemy.sql.expression.exists "sqlalchemy.sql.expression.exists")
    以获取用法描述。
- en: An `EXISTS` clause can also be constructed from a [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") instance by calling [`SelectBase.exists()`](#sqlalchemy.sql.expression.SelectBase.exists
    "sqlalchemy.sql.expression.SelectBase.exists").
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: 通过调用 [`SelectBase.exists()`](#sqlalchemy.sql.expression.SelectBase.exists "sqlalchemy.sql.expression.SelectBase.exists")
    可以从 [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    实例构建 `EXISTS` 子句。
- en: '**Members**'
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[correlate()](#sqlalchemy.sql.expression.Exists.correlate), [correlate_except()](#sqlalchemy.sql.expression.Exists.correlate_except),
    [inherit_cache](#sqlalchemy.sql.expression.Exists.inherit_cache), [select()](#sqlalchemy.sql.expression.Exists.select),
    [select_from()](#sqlalchemy.sql.expression.Exists.select_from), [where()](#sqlalchemy.sql.expression.Exists.where)'
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: '[correlate()](#sqlalchemy.sql.expression.Exists.correlate), [correlate_except()](#sqlalchemy.sql.expression.Exists.correlate_except),
    [inherit_cache](#sqlalchemy.sql.expression.Exists.inherit_cache), [select()](#sqlalchemy.sql.expression.Exists.select),
    [select_from()](#sqlalchemy.sql.expression.Exists.select_from), [where()](#sqlalchemy.sql.expression.Exists.where)'
- en: '**Class signature**'
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.Exists`](#sqlalchemy.sql.expression.Exists
    "sqlalchemy.sql.expression.Exists") ([`sqlalchemy.sql.expression.UnaryExpression`](sqlelement.html#sqlalchemy.sql.expression.UnaryExpression
    "sqlalchemy.sql.expression.UnaryExpression"))
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.expression.Exists`](#sqlalchemy.sql.expression.Exists "sqlalchemy.sql.expression.Exists")
    ([`sqlalchemy.sql.expression.UnaryExpression`](sqlelement.html#sqlalchemy.sql.expression.UnaryExpression
    "sqlalchemy.sql.expression.UnaryExpression"))
- en: '[PRE98]'
  id: totrans-595
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: Apply correlation to the subquery noted by this [`Exists`](#sqlalchemy.sql.expression.Exists
    "sqlalchemy.sql.expression.Exists").
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: 将相关性应用于由此 [`Exists`](#sqlalchemy.sql.expression.Exists "sqlalchemy.sql.expression.Exists")
    指示的子查询。
- en: See also
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ScalarSelect.correlate()`](#sqlalchemy.sql.expression.ScalarSelect.correlate
    "sqlalchemy.sql.expression.ScalarSelect.correlate")'
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ScalarSelect.correlate()`](#sqlalchemy.sql.expression.ScalarSelect.correlate
    "sqlalchemy.sql.expression.ScalarSelect.correlate")'
- en: '[PRE99]'
  id: totrans-599
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: Apply correlation to the subquery noted by this [`Exists`](#sqlalchemy.sql.expression.Exists
    "sqlalchemy.sql.expression.Exists").
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: 将关联应用于由此 [`Exists`](#sqlalchemy.sql.expression.Exists "sqlalchemy.sql.expression.Exists")
    指示的子查询。
- en: See also
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`ScalarSelect.correlate_except()`](#sqlalchemy.sql.expression.ScalarSelect.correlate_except
    "sqlalchemy.sql.expression.ScalarSelect.correlate_except")'
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ScalarSelect.correlate_except()`](#sqlalchemy.sql.expression.ScalarSelect.correlate_except
    "sqlalchemy.sql.expression.ScalarSelect.correlate_except")'
- en: '[PRE100]'
  id: totrans-603
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: Indicate if this [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") instance should make use of the cache
    key generation scheme used by its immediate superclass.
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: 指示此 [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey "sqlalchemy.sql.traversals.HasCacheKey")
    实例是否应该使用其直接超类使用的缓存键生成方案。
- en: The attribute defaults to `None`, which indicates that a construct has not yet
    taken into account whether or not its appropriate for it to participate in caching;
    this is functionally equivalent to setting the value to `False`, except that a
    warning is also emitted.
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: 该属性默认为 `None`，表示结构尚未考虑是否适合参与缓存；这在功能上等同于将值设置为 `False`，只是还会发出警告。
- en: This flag can be set to `True` on a particular class, if the SQL that corresponds
    to the object does not change based on attributes which are local to this class,
    and not its superclass.
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: 如果与对象对应的 SQL 不会基于仅属于此类而不属于其超类的属性更改，则可以将此标志设置为 `True`。
- en: See also
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[Enabling Caching Support for Custom Constructs](compiler.html#compilerext-caching)
    - General guideslines for setting the [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute for third-party
    or user defined SQL constructs.'
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: '[为自定义结构启用缓存支持](compiler.html#compilerext-caching) - 为第三方或用户定义的 SQL 结构设置 [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") 属性的通用指南。'
- en: '[PRE101]'
  id: totrans-609
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: Return a SELECT of this [`Exists`](#sqlalchemy.sql.expression.Exists "sqlalchemy.sql.expression.Exists").
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此 [`Exists`](#sqlalchemy.sql.expression.Exists "sqlalchemy.sql.expression.Exists")
    的 SELECT。
- en: 'e.g.:'
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE102]'
  id: totrans-612
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: 'This will produce a statement resembling:'
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成一个类似于的语句：
- en: '[PRE103]'
  id: totrans-614
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: See also
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    - general purpose method which allows for arbitrary column lists.'
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: '[`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    - 允许任意列列表的通用方法。'
- en: '[PRE104]'
  id: totrans-617
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: Return a new [`Exists`](#sqlalchemy.sql.expression.Exists "sqlalchemy.sql.expression.Exists")
    construct, applying the given expression to the [`Select.select_from()`](#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") method of the select statement
    contained.
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的 [`Exists`](#sqlalchemy.sql.expression.Exists "sqlalchemy.sql.expression.Exists")
    构造，将给定表达式应用于包含的 select 语句的 [`Select.select_from()`](#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") 方法。
- en: Note
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: it is typically preferable to build a [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") statement first, including the desired WHERE
    clause, then use the [`SelectBase.exists()`](#sqlalchemy.sql.expression.SelectBase.exists
    "sqlalchemy.sql.expression.SelectBase.exists") method to produce an [`Exists`](#sqlalchemy.sql.expression.Exists
    "sqlalchemy.sql.expression.Exists") object at once.
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
  zh: 通常最好首先构建一个 [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    语句，包括所需的 WHERE 子句，然后一次使用 [`SelectBase.exists()`](#sqlalchemy.sql.expression.SelectBase.exists
    "sqlalchemy.sql.expression.SelectBase.exists") 方法生成一个 [`Exists`](#sqlalchemy.sql.expression.Exists
    "sqlalchemy.sql.expression.Exists") 对象。
- en: '[PRE105]'
  id: totrans-621
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: Return a new [`exists()`](#sqlalchemy.sql.expression.exists "sqlalchemy.sql.expression.exists")
    construct with the given expression added to its WHERE clause, joined to the existing
    clause via AND, if any.
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的带有给定表达式添加到其 WHERE 子句中的 [`exists()`](#sqlalchemy.sql.expression.exists
    "sqlalchemy.sql.expression.exists") 构造，如果有的话，通过 AND 连接到现有子句。
- en: Note
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: it is typically preferable to build a [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") statement first, including the desired WHERE
    clause, then use the [`SelectBase.exists()`](#sqlalchemy.sql.expression.SelectBase.exists
    "sqlalchemy.sql.expression.SelectBase.exists") method to produce an [`Exists`](#sqlalchemy.sql.expression.Exists
    "sqlalchemy.sql.expression.Exists") object at once.
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: 通常最好先构建一个包含所需 WHERE 子句的 [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    语句，然后立即使用 [`SelectBase.exists()`](#sqlalchemy.sql.expression.SelectBase.exists
    "sqlalchemy.sql.expression.SelectBase.exists") 方法生成一个 [`Exists`](#sqlalchemy.sql.expression.Exists
    "sqlalchemy.sql.expression.Exists") 对象。
- en: '[PRE106]'
  id: totrans-625
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: Represent an element that can be used within the `FROM` clause of a `SELECT`
    statement.
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
  zh: 表示可以在 `SELECT` 语句的 `FROM` 子句中使用的元素。
- en: 'The most common forms of [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") are the [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") and the [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs. Key features common to all [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") objects include:'
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的 [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    形式是 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    和 [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    构造。所有 [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    对象的共同特征包括：
- en: a [`c`](#sqlalchemy.sql.expression.FromClause.c "sqlalchemy.sql.expression.FromClause.c")
    collection, which provides per-name access to a collection of [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") objects.
  id: totrans-628
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 [`c`](#sqlalchemy.sql.expression.FromClause.c "sqlalchemy.sql.expression.FromClause.c")
    集合，提供对一组 [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") 对象的按名称访问。
- en: a [`primary_key`](#sqlalchemy.sql.expression.FromClause.primary_key "sqlalchemy.sql.expression.FromClause.primary_key")
    attribute, which is a collection of all those [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") objects that indicate the `primary_key`
    flag.
  id: totrans-629
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 [`primary_key`](#sqlalchemy.sql.expression.FromClause.primary_key "sqlalchemy.sql.expression.FromClause.primary_key")
    属性，其中包含所有指示 `primary_key` 标志的 [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") 对象的集合。
- en: Methods to generate various derivations of a “from” clause, including [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias"), [`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join"), [`FromClause.select()`](#sqlalchemy.sql.expression.FromClause.select
    "sqlalchemy.sql.expression.FromClause.select").
  id: totrans-630
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成各种“from”子句的方法，包括 [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias")、[`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join")、[`FromClause.select()`](#sqlalchemy.sql.expression.FromClause.select
    "sqlalchemy.sql.expression.FromClause.select")。
- en: '**Members**'
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[alias()](#sqlalchemy.sql.expression.FromClause.alias), [c](#sqlalchemy.sql.expression.FromClause.c),
    [columns](#sqlalchemy.sql.expression.FromClause.columns), [description](#sqlalchemy.sql.expression.FromClause.description),
    [entity_namespace](#sqlalchemy.sql.expression.FromClause.entity_namespace), [exported_columns](#sqlalchemy.sql.expression.FromClause.exported_columns),
    [foreign_keys](#sqlalchemy.sql.expression.FromClause.foreign_keys), [is_derived_from()](#sqlalchemy.sql.expression.FromClause.is_derived_from),
    [join()](#sqlalchemy.sql.expression.FromClause.join), [outerjoin()](#sqlalchemy.sql.expression.FromClause.outerjoin),
    [primary_key](#sqlalchemy.sql.expression.FromClause.primary_key), [schema](#sqlalchemy.sql.expression.FromClause.schema),
    [select()](#sqlalchemy.sql.expression.FromClause.select), [tablesample()](#sqlalchemy.sql.expression.FromClause.tablesample)'
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: '[alias()](#sqlalchemy.sql.expression.FromClause.alias), [c](#sqlalchemy.sql.expression.FromClause.c),
    [columns](#sqlalchemy.sql.expression.FromClause.columns), [description](#sqlalchemy.sql.expression.FromClause.description),
    [entity_namespace](#sqlalchemy.sql.expression.FromClause.entity_namespace), [exported_columns](#sqlalchemy.sql.expression.FromClause.exported_columns),
    [foreign_keys](#sqlalchemy.sql.expression.FromClause.foreign_keys), [is_derived_from()](#sqlalchemy.sql.expression.FromClause.is_derived_from),
    [join()](#sqlalchemy.sql.expression.FromClause.join), [outerjoin()](#sqlalchemy.sql.expression.FromClause.outerjoin),
    [primary_key](#sqlalchemy.sql.expression.FromClause.primary_key), [schema](#sqlalchemy.sql.expression.FromClause.schema),
    [select()](#sqlalchemy.sql.expression.FromClause.select), [tablesample()](#sqlalchemy.sql.expression.FromClause.tablesample)'
- en: '**Class signature**'
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") (`sqlalchemy.sql.roles.AnonymizedFromClauseRole`,
    [`sqlalchemy.sql.expression.Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable"))
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.expression.FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")（`sqlalchemy.sql.roles.AnonymizedFromClauseRole`,
    [`sqlalchemy.sql.expression.Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")）
- en: '[PRE107]'
  id: totrans-635
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: Return an alias of this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此[`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")的别名。
- en: 'E.g.:'
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE108]'
  id: totrans-638
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: The above code creates an [`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    object which can be used as a FROM clause in any SELECT statement.
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码创建了一个[`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")对象，可以在任何SELECT语句中作为FROM子句使用。
- en: See also
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using Aliases](../tutorial/data_select.html#tutorial-using-aliases)'
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用别名](../tutorial/data_select.html#tutorial-using-aliases)'
- en: '[`alias()`](#sqlalchemy.sql.expression.alias "sqlalchemy.sql.expression.alias")'
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: '[`alias()`](#sqlalchemy.sql.expression.alias "sqlalchemy.sql.expression.alias")'
- en: '[PRE109]'
  id: totrans-643
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: A synonym for [`FromClause.columns`](#sqlalchemy.sql.expression.FromClause.columns
    "sqlalchemy.sql.expression.FromClause.columns")
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FromClause.columns`](#sqlalchemy.sql.expression.FromClause.columns "sqlalchemy.sql.expression.FromClause.columns")的同义词'
- en: 'Returns:'
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")。
- en: '[PRE110]'
  id: totrans-647
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: A named-based collection of [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") objects maintained by this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
  zh: 此[`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")维护的[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")对象的基于名称的集合。
- en: 'The [`columns`](#sqlalchemy.sql.expression.FromClause.columns "sqlalchemy.sql.expression.FromClause.columns"),
    or [`c`](#sqlalchemy.sql.expression.FromClause.c "sqlalchemy.sql.expression.FromClause.c")
    collection, is the gateway to the construction of SQL expressions using table-bound
    or other selectable-bound columns:'
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
  zh: '[`columns`](#sqlalchemy.sql.expression.FromClause.columns "sqlalchemy.sql.expression.FromClause.columns")或[`c`](#sqlalchemy.sql.expression.FromClause.c
    "sqlalchemy.sql.expression.FromClause.c")集合是使用与表绑定或其他可选择绑定的列构造SQL表达式的入口：'
- en: '[PRE111]'
  id: totrans-650
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: 'Returns:'
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") object.
  id: totrans-652
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")对象。
- en: '[PRE112]'
  id: totrans-653
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: A brief description of this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
  zh: 此[`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")的简要描述。
- en: Used primarily for error message formatting.
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
  zh: 主要用于错误消息格式化。
- en: '[PRE113]'
  id: totrans-656
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: Return a namespace used for name-based access in SQL expressions.
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个用于在SQL表达式中基于名称访问的命名空间。
- en: 'This is the namespace that is used to resolve “filter_by()” type expressions,
    such as:'
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
  zh: 这是用于解析“filter_by()”类型表达式的命名空间，例如：
- en: '[PRE114]'
  id: totrans-659
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: It defaults to the `.c` collection, however internally it can be overridden
    using the “entity_namespace” annotation to deliver alternative results.
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
  zh: 默认为`.c`集合，但在内部可以使用“entity_namespace”注释进行覆盖以提供替代结果。
- en: '[PRE115]'
  id: totrans-661
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: A [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") that represents the “exported” columns
    of this [`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable").
  id: totrans-662
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")，表示此[`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")的“导出”列。
- en: The “exported” columns for a [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") object are synonymous with the [`FromClause.columns`](#sqlalchemy.sql.expression.FromClause.columns
    "sqlalchemy.sql.expression.FromClause.columns") collection.
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")对象的“导出”列与[`FromClause.columns`](#sqlalchemy.sql.expression.FromClause.columns
    "sqlalchemy.sql.expression.FromClause.columns")集合是同义词。'
- en: New in version 1.4.
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本中新增。
- en: See also
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns")'
  id: totrans-666
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns")'
- en: '[`SelectBase.exported_columns`](#sqlalchemy.sql.expression.SelectBase.exported_columns
    "sqlalchemy.sql.expression.SelectBase.exported_columns")'
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SelectBase.exported_columns`](#sqlalchemy.sql.expression.SelectBase.exported_columns
    "sqlalchemy.sql.expression.SelectBase.exported_columns")'
- en: '[PRE116]'
  id: totrans-668
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: Return the collection of [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") marker objects which this FromClause references.
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此 [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    引用的 [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    标记对象的集合。
- en: Each [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    is a member of a [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")-wide
    [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint").
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    都是一个属于 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")-范围的
    [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") 的成员。
- en: See also
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Table.foreign_key_constraints`](metadata.html#sqlalchemy.schema.Table.foreign_key_constraints
    "sqlalchemy.schema.Table.foreign_key_constraints")'
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Table.foreign_key_constraints`](metadata.html#sqlalchemy.schema.Table.foreign_key_constraints
    "sqlalchemy.schema.Table.foreign_key_constraints")'
- en: '[PRE117]'
  id: totrans-673
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: Return `True` if this [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    is ‘derived’ from the given `FromClause`.
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此 [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    是从给定的 `FromClause` 衍生出来的，则返回 `True`。
- en: An example would be an Alias of a Table is derived from that Table.
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
  zh: 一个示例是一个表的别名是从该表派生的。
- en: '[PRE118]'
  id: totrans-676
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: Return a [`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    from this [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    to another [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause").
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
  zh: 从此 [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    返回一个 [`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    到另一个 [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")。
- en: 'E.g.:'
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE119]'
  id: totrans-679
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: 'would emit SQL along the lines of:'
  id: totrans-680
  prefs: []
  type: TYPE_NORMAL
  zh: 将会发出类似以下的 SQL：
- en: '[PRE120]'
  id: totrans-681
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: 'Parameters:'
  id: totrans-682
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`right` – the right side of the join; this is any [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") object such as a [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object, and may also be a selectable-compatible object
    such as an ORM-mapped class.'
  id: totrans-683
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`right` – 连接的右侧；这是任何 [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    对象，如 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    对象，也可以是一个可选择兼容对象，如 ORM 映射的类。'
- en: '`onclause` – a SQL expression representing the ON clause of the join. If left
    at `None`, [`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join "sqlalchemy.sql.expression.FromClause.join")
    will attempt to join the two tables based on a foreign key relationship.'
  id: totrans-684
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onclause` – 表示连接的 ON 子句的 SQL 表达式。如果保留为 `None`，则 [`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join") 将尝试根据外键关系连接两个表。'
- en: '`isouter` – if True, render a LEFT OUTER JOIN, instead of JOIN.'
  id: totrans-685
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isouter` – 如果为 True，则渲染一个左外连接，而不是连接。'
- en: '`full` – if True, render a FULL OUTER JOIN, instead of LEFT OUTER JOIN. Implies
    [`FromClause.join.isouter`](#sqlalchemy.sql.expression.FromClause.join.params.isouter
    "sqlalchemy.sql.expression.FromClause.join").'
  id: totrans-686
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`full` – 如果为 True，则渲染一个完整的外连接，而不是左外连接。意味着 [`FromClause.join.isouter`](#sqlalchemy.sql.expression.FromClause.join.params.isouter
    "sqlalchemy.sql.expression.FromClause.join")。'
- en: See also
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`join()`](#sqlalchemy.sql.expression.join "sqlalchemy.sql.expression.join")
    - standalone function'
  id: totrans-688
  prefs: []
  type: TYPE_NORMAL
  zh: '[`join()`](#sqlalchemy.sql.expression.join "sqlalchemy.sql.expression.join")
    - 独立函数'
- en: '[`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    - the type of object produced'
  id: totrans-689
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    - 生成的对象类型'
- en: '[PRE121]'
  id: totrans-690
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: Return a [`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    from this [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    to another [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause"),
    with the “isouter” flag set to True.
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
  zh: 从此 [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    返回一个带有 "isouter" 标志设置为 True 的 [`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    到另一个 [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")。
- en: 'E.g.:'
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE122]'
  id: totrans-693
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: 'The above is equivalent to:'
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
  zh: 以上等同于：
- en: '[PRE123]'
  id: totrans-695
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: 'Parameters:'
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`right` – the right side of the join; this is any [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") object such as a [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object, and may also be a selectable-compatible object
    such as an ORM-mapped class.'
  id: totrans-697
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`right` – 连接的右侧；这是任何 [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    对象，例如 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    对象，也可以是 ORM 映射的类等可选兼容对象。'
- en: '`onclause` – a SQL expression representing the ON clause of the join. If left
    at `None`, [`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join "sqlalchemy.sql.expression.FromClause.join")
    will attempt to join the two tables based on a foreign key relationship.'
  id: totrans-698
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onclause` – 代表连接的 ON 子句的 SQL 表达式。如果留空，[`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join") 将尝试根据外键关系连接两个表。'
- en: '`full` – if True, render a FULL OUTER JOIN, instead of LEFT OUTER JOIN.'
  id: totrans-699
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`full` – 如果为 True，则渲染 FULL OUTER JOIN，而不是 LEFT OUTER JOIN。'
- en: See also
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join "sqlalchemy.sql.expression.FromClause.join")'
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join "sqlalchemy.sql.expression.FromClause.join")'
- en: '[`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")'
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")'
- en: '[PRE124]'
  id: totrans-703
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: Return the iterable collection of [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects which comprise the primary key of this `_selectable.FromClause`.
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
  zh: 返回这个 `_selectable.FromClause` 的主键所组成的可迭代列 [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 对象集合。
- en: For a [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object, this collection is represented by the [`PrimaryKeyConstraint`](constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") which itself is an iterable collection
    of [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    objects.
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    对象，这个集合由 [`PrimaryKeyConstraint`](constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") 表示，它本身是一个可迭代的 [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 对象集合。
- en: '[PRE125]'
  id: totrans-706
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: Define the ‘schema’ attribute for this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
  zh: 为这个 [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    定义 ‘schema’ 属性。
- en: This is typically `None` for most objects except that of [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), where it is taken as the value of the [`Table.schema`](metadata.html#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table") argument.
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大多数对象而言，这通常为 `None`，除了 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    的情况，其中它被视为 [`Table.schema`](metadata.html#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table") 参数的值。
- en: '[PRE126]'
  id: totrans-709
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: Return a SELECT of this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
  zh: 返回这个 [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    的 SELECT。
- en: 'e.g.:'
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE127]'
  id: totrans-712
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: See also
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    - general purpose method which allows for arbitrary column lists.'
  id: totrans-714
  prefs: []
  type: TYPE_NORMAL
  zh: '[`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    - 允许任意列列表的通用方法。'
- en: '[PRE128]'
  id: totrans-715
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: Return a TABLESAMPLE alias of this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-716
  prefs: []
  type: TYPE_NORMAL
  zh: 返回这个 [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    的 TABLESAMPLE 别名。
- en: The return value is the [`TableSample`](#sqlalchemy.sql.expression.TableSample
    "sqlalchemy.sql.expression.TableSample") construct also provided by the top-level
    [`tablesample()`](#sqlalchemy.sql.expression.tablesample "sqlalchemy.sql.expression.tablesample")
    function.
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
  zh: 返回值也是顶层 [`tablesample()`](#sqlalchemy.sql.expression.tablesample "sqlalchemy.sql.expression.tablesample")
    函数提供的 [`TableSample`](#sqlalchemy.sql.expression.TableSample "sqlalchemy.sql.expression.TableSample")
    构造。
- en: See also
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`tablesample()`](#sqlalchemy.sql.expression.tablesample "sqlalchemy.sql.expression.tablesample")
    - usage guidelines and parameters'
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
  zh: '[`tablesample()`](#sqlalchemy.sql.expression.tablesample "sqlalchemy.sql.expression.tablesample")
    - 使用指南和参数'
- en: '[PRE129]'
  id: totrans-720
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: Base class for SELECT statements where additional elements can be added.
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
  zh: 可以添加额外元素的 SELECT 语句的基类。
- en: This serves as the base for [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    and [`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect "sqlalchemy.sql.expression.CompoundSelect")
    where elements such as ORDER BY, GROUP BY can be added and column rendering can
    be controlled. Compare to [`TextualSelect`](#sqlalchemy.sql.expression.TextualSelect
    "sqlalchemy.sql.expression.TextualSelect"), which, while it subclasses [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase") and is also a SELECT construct, represents
    a fixed textual string which cannot be altered at this level, only wrapped as
    a subquery.
  id: totrans-722
  prefs: []
  type: TYPE_NORMAL
  zh: 这用作[`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")和[`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect
    "sqlalchemy.sql.expression.CompoundSelect")的基础，其中可以添加诸如ORDER BY、GROUP BY之类的元素，并且可以控制列的呈现。与[`TextualSelect`](#sqlalchemy.sql.expression.TextualSelect
    "sqlalchemy.sql.expression.TextualSelect")相比，虽然它是[`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")的子类，并且也是一个SELECT构造，但它代表的是一个固定的文本字符串，无法在这个级别上更改，只能包装为子查询。
- en: '**Members**'
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[fetch()](#sqlalchemy.sql.expression.GenerativeSelect.fetch), [get_label_style()](#sqlalchemy.sql.expression.GenerativeSelect.get_label_style),
    [group_by()](#sqlalchemy.sql.expression.GenerativeSelect.group_by), [limit()](#sqlalchemy.sql.expression.GenerativeSelect.limit),
    [offset()](#sqlalchemy.sql.expression.GenerativeSelect.offset), [order_by()](#sqlalchemy.sql.expression.GenerativeSelect.order_by),
    [set_label_style()](#sqlalchemy.sql.expression.GenerativeSelect.set_label_style),
    [slice()](#sqlalchemy.sql.expression.GenerativeSelect.slice), [with_for_update()](#sqlalchemy.sql.expression.GenerativeSelect.with_for_update)'
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
  zh: '[fetch()](#sqlalchemy.sql.expression.GenerativeSelect.fetch), [get_label_style()](#sqlalchemy.sql.expression.GenerativeSelect.get_label_style),
    [group_by()](#sqlalchemy.sql.expression.GenerativeSelect.group_by), [limit()](#sqlalchemy.sql.expression.GenerativeSelect.limit),
    [offset()](#sqlalchemy.sql.expression.GenerativeSelect.offset), [order_by()](#sqlalchemy.sql.expression.GenerativeSelect.order_by),
    [set_label_style()](#sqlalchemy.sql.expression.GenerativeSelect.set_label_style),
    [slice()](#sqlalchemy.sql.expression.GenerativeSelect.slice), [with_for_update()](#sqlalchemy.sql.expression.GenerativeSelect.with_for_update)'
- en: '**Class signature**'
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect") ([`sqlalchemy.sql.expression.SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase"), `sqlalchemy.sql.expression.Generative`)
  id: totrans-726
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.sql.expression.GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect") ([`sqlalchemy.sql.expression.SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase"), `sqlalchemy.sql.expression.Generative`)
- en: '[PRE130]'
  id: totrans-727
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: Return a new selectable with the given FETCH FIRST criterion applied.
  id: totrans-728
  prefs: []
  type: TYPE_NORMAL
  zh: 使用给定的FETCH FIRST标准返回一个新的可选择的。
- en: This is a numeric value which usually renders as `FETCH {FIRST | NEXT} [ count
    ] {ROW | ROWS} {ONLY | WITH TIES}` expression in the resulting select. This functionality
    is is currently implemented for Oracle, PostgreSQL, MSSQL.
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个数值，通常在结果选择中呈现为`FETCH {FIRST | NEXT} [ count ] {ROW | ROWS} {ONLY | WITH
    TIES}`表达式。此功能目前已为Oracle、PostgreSQL、MSSQL实现。
- en: Use [`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset") to specify the offset.
  id: totrans-730
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset")来指定偏移量。
- en: Note
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The [`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch") method will replace any clause
    applied with [`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit").
  id: totrans-732
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch")方法将替换任何应用于[`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit")的子句。'
- en: New in version 1.4.
  id: totrans-733
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4版中的新功能。
- en: 'Parameters:'
  id: totrans-734
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`count` – an integer COUNT parameter, or a SQL expression that provides an
    integer result. When `percent=True` this will represent the percentage of rows
    to return, not the absolute value. Pass `None` to reset it.'
  id: totrans-735
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`count` – 一个整数COUNT参数，或者提供整数结果的SQL表达式。当`percent=True`时，这将表示要返回的行的百分比，而不是绝对值。传递`None`来重置它。'
- en: '`with_ties` – When `True`, the WITH TIES option is used to return any additional
    rows that tie for the last place in the result set according to the `ORDER BY`
    clause. The `ORDER BY` may be mandatory in this case. Defaults to `False`'
  id: totrans-736
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`with_ties` – 当为`True`时，使用WITH TIES选项来返回任何根据`ORDER BY`子句在结果集中处于最后位置的附加行。在这种情况下，`ORDER
    BY`可能是强制性的。默认为`False`'
- en: '`percent` – When `True`, `count` represents the percentage of the total number
    of selected rows to return. Defaults to `False`'
  id: totrans-737
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`percent` – 当`True`时，`count`表示要返回的所选行总数的百分比。默认为`False`。'
- en: See also
  id: totrans-738
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit")'
  id: totrans-739
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit")'
- en: '[`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset")'
  id: totrans-740
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset")'
- en: '[PRE131]'
  id: totrans-741
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: Retrieve the current label style.
  id: totrans-742
  prefs: []
  type: TYPE_NORMAL
  zh: 检索当前的标签样式。
- en: New in version 1.4.
  id: totrans-743
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4 版本中的新内容。
- en: '[PRE132]'
  id: totrans-744
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: Return a new selectable with the given list of GROUP BY criterion applied.
  id: totrans-745
  prefs: []
  type: TYPE_NORMAL
  zh: 返回具有给定的 GROUP BY 条件列表的新可选择对象。
- en: All existing GROUP BY settings can be suppressed by passing `None`.
  id: totrans-746
  prefs: []
  type: TYPE_NORMAL
  zh: 通过传递`None`可以抑制所有现有的 GROUP BY 设置。
- en: 'e.g.:'
  id: totrans-747
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE133]'
  id: totrans-748
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: 'Parameters:'
  id: totrans-749
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '***clauses** – a series of [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") constructs which will be used to generate
    an GROUP BY clause.'
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
  zh: '***clauses** – 一系列将用于生成 GROUP BY 子句的[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")构造。'
- en: See also
  id: totrans-751
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Aggregate functions with GROUP BY / HAVING](../tutorial/data_select.html#tutorial-group-by-w-aggregates)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
  zh: '[带有 GROUP BY / HAVING 的聚合函数](../tutorial/data_select.html#tutorial-group-by-w-aggregates)
    - 在[SQLAlchemy 统一教程](../tutorial/index.html#unified-tutorial)中'
- en: '[Ordering or Grouping by a Label](../tutorial/data_select.html#tutorial-order-by-label)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-753
  prefs: []
  type: TYPE_NORMAL
  zh: '[按标签排序或分组](../tutorial/data_select.html#tutorial-order-by-label) - 在[SQLAlchemy
    统一教程](../tutorial/index.html#unified-tutorial)中'
- en: '[PRE134]'
  id: totrans-754
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: Return a new selectable with the given LIMIT criterion applied.
  id: totrans-755
  prefs: []
  type: TYPE_NORMAL
  zh: 返回具有给定 LIMIT 条件的新可选择对象。
- en: This is a numerical value which usually renders as a `LIMIT` expression in the
    resulting select. Backends that don’t support `LIMIT` will attempt to provide
    similar functionality.
  id: totrans-756
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个数值，通常在结果选择中呈现为`LIMIT`表达式。不支持`LIMIT`的后端将尝试提供类似的功能。
- en: Note
  id: totrans-757
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The [`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit") method will replace any clause
    applied with [`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch").
  id: totrans-758
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit")方法将替换应用的任何子句与[`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch")。'
- en: 'Parameters:'
  id: totrans-759
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**limit** – an integer LIMIT parameter, or a SQL expression that provides an
    integer result. Pass `None` to reset it.'
  id: totrans-760
  prefs: []
  type: TYPE_NORMAL
  zh: '**limit** – 一个整数 LIMIT 参数，或者提供整数结果的 SQL 表达式。传递`None`来重置它。'
- en: See also
  id: totrans-761
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch")'
  id: totrans-762
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch")'
- en: '[`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset")'
  id: totrans-763
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset")'
- en: '[PRE135]'
  id: totrans-764
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: Return a new selectable with the given OFFSET criterion applied.
  id: totrans-765
  prefs: []
  type: TYPE_NORMAL
  zh: 返回具有给定 OFFSET 条件的新可选择对象。
- en: This is a numeric value which usually renders as an `OFFSET` expression in the
    resulting select. Backends that don’t support `OFFSET` will attempt to provide
    similar functionality.
  id: totrans-766
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个数值，通常在结果选择中呈现为`OFFSET`表达式。不支持`OFFSET`的后端将尝试提供类似的功能。
- en: 'Parameters:'
  id: totrans-767
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**offset** – an integer OFFSET parameter, or a SQL expression that provides
    an integer result. Pass `None` to reset it.'
  id: totrans-768
  prefs: []
  type: TYPE_NORMAL
  zh: '**offset** – 一个整数 OFFSET 参数，或者提供整数结果的 SQL 表达式。传递`None`来重置它。'
- en: See also
  id: totrans-769
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit")'
  id: totrans-770
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit")'
- en: '[`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch")'
  id: totrans-771
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch")'
- en: '[PRE136]'
  id: totrans-772
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: Return a new selectable with the given list of ORDER BY criteria applied.
  id: totrans-773
  prefs: []
  type: TYPE_NORMAL
  zh: 返回具有给定的 ORDER BY 条件列表的新可选择对象。
- en: 'e.g.:'
  id: totrans-774
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE137]'
  id: totrans-775
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: 'Calling this method multiple times is equivalent to calling it once with all
    the clauses concatenated. All existing ORDER BY criteria may be cancelled by passing
    `None` by itself. New ORDER BY criteria may then be added by invoking [`Query.order_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.order_by
    "sqlalchemy.orm.Query.order_by") again, e.g.:'
  id: totrans-776
  prefs: []
  type: TYPE_NORMAL
  zh: 多次调用此方法等效于将所有子句连接一次。所有现有的 ORDER BY 条件都可以通过单独传递 `None` 来取消。然后，可以通过再次调用 [`Query.order_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.order_by
    "sqlalchemy.orm.Query.order_by") 来添加新的 ORDER BY 条件，例如：
- en: '[PRE138]'
  id: totrans-777
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: 'Parameters:'
  id: totrans-778
  prefs: []
  type: TYPE_NORMAL
  zh: '参数:'
- en: '***clauses** – a series of [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") constructs which will be used to generate
    an ORDER BY clause.'
  id: totrans-779
  prefs: []
  type: TYPE_NORMAL
  zh: '***clauses** – 一系列用于生成 ORDER BY 子句的 [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") 构造。'
- en: See also
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见
- en: '[ORDER BY](../tutorial/data_select.html#tutorial-order-by) - in the [SQLAlchemy
    Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-781
  prefs: []
  type: TYPE_NORMAL
  zh: '[ORDER BY](../tutorial/data_select.html#tutorial-order-by) - 在[SQLAlchemy 统一教程](../tutorial/index.html#unified-tutorial)中'
- en: '[Ordering or Grouping by a Label](../tutorial/data_select.html#tutorial-order-by-label)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-782
  prefs: []
  type: TYPE_NORMAL
  zh: '[按标签排序或分组](../tutorial/data_select.html#tutorial-order-by-label) - 在[SQLAlchemy
    统一教程](../tutorial/index.html#unified-tutorial)中'
- en: '[PRE139]'
  id: totrans-783
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: Return a new selectable with the specified label style.
  id: totrans-784
  prefs: []
  type: TYPE_NORMAL
  zh: 返回具有指定标签样式的新可选择项。
- en: There are three “label styles” available, [`SelectLabelStyle.LABEL_STYLE_DISAMBIGUATE_ONLY`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_DISAMBIGUATE_ONLY
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_DISAMBIGUATE_ONLY"), [`SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL"),
    and [`SelectLabelStyle.LABEL_STYLE_NONE`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_NONE
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_NONE"). The default style
    is [`SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL").
  id: totrans-785
  prefs: []
  type: TYPE_NORMAL
  zh: 有三种“标签样式”可用，[`SelectLabelStyle.LABEL_STYLE_DISAMBIGUATE_ONLY`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_DISAMBIGUATE_ONLY
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_DISAMBIGUATE_ONLY")、[`SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL") 和
    [`SelectLabelStyle.LABEL_STYLE_NONE`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_NONE
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_NONE")。默认样式是 [`SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL")。
- en: In modern SQLAlchemy, there is not generally a need to change the labeling style,
    as per-expression labels are more effectively used by making use of the [`ColumnElement.label()`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.label
    "sqlalchemy.sql.expression.ColumnElement.label") method. In past versions, `LABEL_STYLE_TABLENAME_PLUS_COL`
    was used to disambiguate same-named columns from different tables, aliases, or
    subqueries; the newer `LABEL_STYLE_DISAMBIGUATE_ONLY` now applies labels only
    to names that conflict with an existing name so that the impact of this labeling
    is minimal.
  id: totrans-786
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代 SQLAlchemy 中，通常不需要更改标签样式，因为通过使用 [`ColumnElement.label()`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.label
    "sqlalchemy.sql.expression.ColumnElement.label") 方法更有效地使用每个表达式的标签。在以前的版本中，`LABEL_STYLE_TABLENAME_PLUS_COL`
    用于消除来自不同表、别名或子查询的相同命名列的歧义; 新的 `LABEL_STYLE_DISAMBIGUATE_ONLY` 现在仅将标签应用于与现有名称冲突的名称，以使此标签的影响最小化。
- en: The rationale for disambiguation is mostly so that all column expressions are
    available from a given [`FromClause.c`](#sqlalchemy.sql.expression.FromClause.c
    "sqlalchemy.sql.expression.FromClause.c") collection when a subquery is created.
  id: totrans-787
  prefs: []
  type: TYPE_NORMAL
  zh: 消除歧义的原因主要是在创建子查询时，所有列表达式都可以从给定的 [`FromClause.c`](#sqlalchemy.sql.expression.FromClause.c
    "sqlalchemy.sql.expression.FromClause.c") 集合中使用。
- en: 'New in version 1.4: - the [`GenerativeSelect.set_label_style()`](#sqlalchemy.sql.expression.GenerativeSelect.set_label_style
    "sqlalchemy.sql.expression.GenerativeSelect.set_label_style") method replaces
    the previous combination of `.apply_labels()`, `.with_labels()` and `use_labels=True`
    methods and/or parameters.'
  id: totrans-788
  prefs: []
  type: TYPE_NORMAL
  zh: '从版本1.4开始: - [`GenerativeSelect.set_label_style()`](#sqlalchemy.sql.expression.GenerativeSelect.set_label_style
    "sqlalchemy.sql.expression.GenerativeSelect.set_label_style") 方法取代了先前的 `.apply_labels()`、`.with_labels()`
    和 `use_labels=True` 方法和/或参数的组合。'
- en: See also
  id: totrans-789
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见
- en: '`LABEL_STYLE_DISAMBIGUATE_ONLY`'
  id: totrans-790
  prefs: []
  type: TYPE_NORMAL
  zh: '`LABEL_STYLE_DISAMBIGUATE_ONLY`'
- en: '`LABEL_STYLE_TABLENAME_PLUS_COL`'
  id: totrans-791
  prefs: []
  type: TYPE_NORMAL
  zh: '`LABEL_STYLE_TABLENAME_PLUS_COL`'
- en: '`LABEL_STYLE_NONE`'
  id: totrans-792
  prefs: []
  type: TYPE_NORMAL
  zh: '`LABEL_STYLE_NONE`'
- en: '`LABEL_STYLE_DEFAULT`'
  id: totrans-793
  prefs: []
  type: TYPE_NORMAL
  zh: '`LABEL_STYLE_DEFAULT`'
- en: '[PRE140]'
  id: totrans-794
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: Apply LIMIT / OFFSET to this statement based on a slice.
  id: totrans-795
  prefs: []
  type: TYPE_NORMAL
  zh: 根据一个切片对该语句应用 LIMIT / OFFSET。
- en: The start and stop indices behave like the argument to Python’s built-in `range()`
    function. This method provides an alternative to using `LIMIT`/`OFFSET` to get
    a slice of the query.
  id: totrans-796
  prefs: []
  type: TYPE_NORMAL
  zh: 起始和停止索引的行为类似于 Python 内置的 `range()` 函数的参数。此方法提供了一个替代方案，用于使用 `LIMIT`/`OFFSET`
    获取查询的一个切片。
- en: For example,
  id: totrans-797
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，
- en: '[PRE141]'
  id: totrans-798
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: renders as
  id: totrans-799
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染为
- en: '[PRE142]'
  id: totrans-800
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: Note
  id: totrans-801
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The [`GenerativeSelect.slice()`](#sqlalchemy.sql.expression.GenerativeSelect.slice
    "sqlalchemy.sql.expression.GenerativeSelect.slice") method will replace any clause
    applied with [`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch").
  id: totrans-802
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.slice()`](#sqlalchemy.sql.expression.GenerativeSelect.slice
    "sqlalchemy.sql.expression.GenerativeSelect.slice") 方法将替换任何使用 [`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch") 应用的子句。'
- en: 'New in version 1.4: Added the [`GenerativeSelect.slice()`](#sqlalchemy.sql.expression.GenerativeSelect.slice
    "sqlalchemy.sql.expression.GenerativeSelect.slice") method generalized from the
    ORM.'
  id: totrans-803
  prefs: []
  type: TYPE_NORMAL
  zh: 自 1.4 版本新增：从 ORM 推广出的 [`GenerativeSelect.slice()`](#sqlalchemy.sql.expression.GenerativeSelect.slice
    "sqlalchemy.sql.expression.GenerativeSelect.slice") 方法。
- en: See also
  id: totrans-804
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit")'
  id: totrans-805
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit")'
- en: '[`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset")'
  id: totrans-806
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset")'
- en: '[`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch")'
  id: totrans-807
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch")'
- en: '[PRE143]'
  id: totrans-808
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: Specify a `FOR UPDATE` clause for this [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect").
  id: totrans-809
  prefs: []
  type: TYPE_NORMAL
  zh: 为此 [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect "sqlalchemy.sql.expression.GenerativeSelect")
    指定一个 `FOR UPDATE` 子句。
- en: 'E.g.:'
  id: totrans-810
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE144]'
  id: totrans-811
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: 'On a database like PostgreSQL or Oracle, the above would render a statement
    like:'
  id: totrans-812
  prefs: []
  type: TYPE_NORMAL
  zh: 在像 PostgreSQL 或 Oracle 这样的数据库上，上述内容将渲染为类似于以下语句：
- en: '[PRE145]'
  id: totrans-813
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: 'on other backends, the `nowait` option is ignored and instead would produce:'
  id: totrans-814
  prefs: []
  type: TYPE_NORMAL
  zh: 在其他后端，`nowait` 选项将被忽略，并且会产生：
- en: '[PRE146]'
  id: totrans-815
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: When called with no arguments, the statement will render with the suffix `FOR
    UPDATE`. Additional arguments can then be provided which allow for common database-specific
    variants.
  id: totrans-816
  prefs: []
  type: TYPE_NORMAL
  zh: 在不带参数调用时，该语句将以后缀 `FOR UPDATE` 渲染。然后可以提供其他参数，以允许常见的数据库特定变体。
- en: 'Parameters:'
  id: totrans-817
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`nowait` – boolean; will render `FOR UPDATE NOWAIT` on Oracle and PostgreSQL
    dialects.'
  id: totrans-818
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nowait` – 布尔值；将在 Oracle 和 PostgreSQL 方言上渲染为 `FOR UPDATE NOWAIT`。'
- en: '`read` – boolean; will render `LOCK IN SHARE MODE` on MySQL, `FOR SHARE` on
    PostgreSQL. On PostgreSQL, when combined with `nowait`, will render `FOR SHARE
    NOWAIT`.'
  id: totrans-819
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`read` – 布尔值；将在 MySQL 上渲染为 `LOCK IN SHARE MODE`，在 PostgreSQL 上渲染为 `FOR SHARE`。在
    PostgreSQL 上，当与 `nowait` 结合使用时，将渲染为 `FOR SHARE NOWAIT`。'
- en: '`of` – SQL expression or list of SQL expression elements, (typically [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects or a compatible expression, for some backends
    may also be a table expression) which will render into a `FOR UPDATE OF` clause;
    supported by PostgreSQL, Oracle, some MySQL versions and possibly others. May
    render as a table or as a column depending on backend.'
  id: totrans-820
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`of` – SQL 表达式或 SQL 表达式元素列表（通常是 [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 对象或兼容的表达式，对于某些后端，也可以是表达式）；它将被渲染为一个 `FOR UPDATE OF`
    子句；受 PostgreSQL、Oracle、一些 MySQL 版本和可能其他一些后端的支持。根据后端的不同，可能会渲染为表或列。'
- en: '`skip_locked` – boolean, will render `FOR UPDATE SKIP LOCKED` on Oracle and
    PostgreSQL dialects or `FOR SHARE SKIP LOCKED` if `read=True` is also specified.'
  id: totrans-821
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`skip_locked` – 布尔值，将在 Oracle 和 PostgreSQL 方言上渲染为 `FOR UPDATE SKIP LOCKED`，如果还指定了
    `read=True`，则会渲染为 `FOR SHARE SKIP LOCKED`。'
- en: '`key_share` – boolean, will render `FOR NO KEY UPDATE`, or if combined with
    `read=True` will render `FOR KEY SHARE`, on the PostgreSQL dialect.'
  id: totrans-822
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`key_share` – 布尔值，将在 PostgreSQL 方言上渲染为 `FOR NO KEY UPDATE`，或者如果与 `read=True`
    结合使用，则会渲染为 `FOR KEY SHARE`。'
- en: '[PRE147]'
  id: totrans-823
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: Mixin that declares a class to include CTE support.
  id: totrans-824
  prefs: []
  type: TYPE_NORMAL
  zh: 声明一个包含 CTE 支持的类的 Mixin。
- en: '**Members**'
  id: totrans-825
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[add_cte()](#sqlalchemy.sql.expression.HasCTE.add_cte), [cte()](#sqlalchemy.sql.expression.HasCTE.cte)'
  id: totrans-826
  prefs: []
  type: TYPE_NORMAL
  zh: '[add_cte()](#sqlalchemy.sql.expression.HasCTE.add_cte), [cte()](#sqlalchemy.sql.expression.HasCTE.cte)'
- en: '**Class signature**'
  id: totrans-827
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE") (`sqlalchemy.sql.roles.HasCTERole`, `sqlalchemy.sql.expression.SelectsRows`)
  id: totrans-828
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.expression.HasCTE`](#sqlalchemy.sql.expression.HasCTE "sqlalchemy.sql.expression.HasCTE")（`sqlalchemy.sql.roles.HasCTERole`，`sqlalchemy.sql.expression.SelectsRows`）
- en: '[PRE148]'
  id: totrans-829
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: Add one or more [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    constructs to this statement.
  id: totrans-830
  prefs: []
  type: TYPE_NORMAL
  zh: 向该语句添加一个或多个[`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    构造。
- en: This method will associate the given [`CTE`](#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE") constructs with the parent statement such that
    they will each be unconditionally rendered in the WITH clause of the final statement,
    even if not referenced elsewhere within the statement or any sub-selects.
  id: totrans-831
  prefs: []
  type: TYPE_NORMAL
  zh: '此方法将使给定的[`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    构造与父语句相关联，以便它们将分别无条件地在最终语句的WITH子句中渲染，即使在语句或任何子选择中未在其他地方引用。 '
- en: The optional [`HasCTE.add_cte.nest_here`](#sqlalchemy.sql.expression.HasCTE.add_cte.params.nest_here
    "sqlalchemy.sql.expression.HasCTE.add_cte") parameter when set to True will have
    the effect that each given [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    will render in a WITH clause rendered directly along with this statement, rather
    than being moved to the top of the ultimate rendered statement, even if this statement
    is rendered as a subquery within a larger statement.
  id: totrans-832
  prefs: []
  type: TYPE_NORMAL
  zh: 当可选参数[`HasCTE.add_cte.nest_here`](#sqlalchemy.sql.expression.HasCTE.add_cte.params.nest_here
    "sqlalchemy.sql.expression.HasCTE.add_cte") 设置为True时，每个给定的[`CTE`](#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE") 将直接在此语句中渲染为WITH子句，而不会像将该语句渲染为更大语句中的子查询时被移动到最终渲染语句的顶部。
- en: This method has two general uses. One is to embed CTE statements that serve
    some purpose without being referenced explicitly, such as the use case of embedding
    a DML statement such as an INSERT or UPDATE as a CTE inline with a primary statement
    that may draw from its results indirectly. The other is to provide control over
    the exact placement of a particular series of CTE constructs that should remain
    rendered directly in terms of a particular statement that may be nested in a larger
    statement.
  id: totrans-833
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法有两个一般用途。一个是嵌入一些没有明确引用的CTE语句，例如将DML语句（例如INSERT或UPDATE）作为CTE内联到可能间接从其结果中提取的主语句中的用例。另一个是提供对应该保持直接渲染为特定语句的特定CTE构造的精确放置的控制，该语句可能嵌套在较大的语句中。
- en: 'E.g.:'
  id: totrans-834
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE149]'
  id: totrans-835
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: 'Would render:'
  id: totrans-836
  prefs: []
  type: TYPE_NORMAL
  zh: 将渲染为：
- en: '[PRE150]'
  id: totrans-837
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: Above, the “anon_1” CTE is not referenced in the SELECT statement, however still
    accomplishes the task of running an INSERT statement.
  id: totrans-838
  prefs: []
  type: TYPE_NORMAL
  zh: 上述“anon_1”CTE在SELECT语句中没有被引用，但仍然完成了运行INSERT语句的任务。
- en: 'Similarly in a DML-related context, using the PostgreSQL [`Insert`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Insert
    "sqlalchemy.dialects.postgresql.Insert") construct to generate an “upsert”:'
  id: totrans-839
  prefs: []
  type: TYPE_NORMAL
  zh: 在与DML相关的上下文中，使用PostgreSQL [`Insert`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Insert
    "sqlalchemy.dialects.postgresql.Insert") 构造生成“upsert”：
- en: '[PRE151]'
  id: totrans-840
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: 'The above statement renders as:'
  id: totrans-841
  prefs: []
  type: TYPE_NORMAL
  zh: 上述语句渲染为：
- en: '[PRE152]'
  id: totrans-842
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: New in version 1.4.21.
  id: totrans-843
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4.21开始新增。
- en: 'Parameters:'
  id: totrans-844
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*ctes` –'
  id: totrans-845
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*ctes` –'
- en: zero or more [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    constructs.
  id: totrans-846
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 零个或多个[`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    构造。
- en: 'Changed in version 2.0: Multiple CTE instances are accepted'
  id: totrans-847
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本2.0开始更改：接受多个CTE实例
- en: '`nest_here` –'
  id: totrans-848
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nest_here` –'
- en: if True, the given CTE or CTEs will be rendered as though they specified the
    [`HasCTE.cte.nesting`](#sqlalchemy.sql.expression.HasCTE.cte.params.nesting "sqlalchemy.sql.expression.HasCTE.cte")
    flag to `True` when they were added to this [`HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE"). Assuming the given CTEs are not referenced
    in an outer-enclosing statement as well, the CTEs given should render at the level
    of this statement when this flag is given.
  id: totrans-849
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果为True，则给定的CTE或CTE将被渲染为如果它们在添加到此[`HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE")时指定了[`HasCTE.cte.nesting`](#sqlalchemy.sql.expression.HasCTE.cte.params.nesting
    "sqlalchemy.sql.expression.HasCTE.cte")标志为True。假设给定的CTE也没有在外部包含语句中被引用，则给定的CTE在给定此标志时应在此语句级别渲染。
- en: New in version 2.0.
  id: totrans-850
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本2.0开始新增。
- en: See also
  id: totrans-851
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`HasCTE.cte.nesting`](#sqlalchemy.sql.expression.HasCTE.cte.params.nesting
    "sqlalchemy.sql.expression.HasCTE.cte")'
  id: totrans-852
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`HasCTE.cte.nesting`](#sqlalchemy.sql.expression.HasCTE.cte.params.nesting
    "sqlalchemy.sql.expression.HasCTE.cte")'
- en: '[PRE153]'
  id: totrans-853
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: Return a new [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE"),
    or Common Table Expression instance.
  id: totrans-854
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的[`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")，或者通用表达式实例。
- en: Common table expressions are a SQL standard whereby SELECT statements can draw
    upon secondary statements specified along with the primary statement, using a
    clause called “WITH”. Special semantics regarding UNION can also be employed to
    allow “recursive” queries, where a SELECT statement can draw upon the set of rows
    that have previously been selected.
  id: totrans-855
  prefs: []
  type: TYPE_NORMAL
  zh: 公共表达式是SQL标准的一部分，其中SELECT语句可以在主语句之后指定的辅助语句中进行绘制，使用名为“WITH”的子句。还可以使用关于UNION的特殊语义来允许“递归”查询，其中SELECT语句可以绘制出先前已选择的行集。
- en: CTEs can also be applied to DML constructs UPDATE, INSERT and DELETE on some
    databases, both as a source of CTE rows when combined with RETURNING, as well
    as a consumer of CTE rows.
  id: totrans-856
  prefs: []
  type: TYPE_NORMAL
  zh: 在一些数据库中，CTE也可以应用于DML构造UPDATE、INSERT和DELETE，既可以作为CTE行的来源（与RETURNING结合使用），也可以作为CTE行的消费者。
- en: SQLAlchemy detects [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    objects, which are treated similarly to [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") objects, as special elements to be delivered
    to the FROM clause of the statement as well as to a WITH clause at the top of
    the statement.
  id: totrans-857
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy检测到[`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")对象，这些对象与[`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias")对象类似，被视为要传递到语句的FROM子句以及语句顶部的WITH子句中的特殊元素。
- en: For special prefixes such as PostgreSQL “MATERIALIZED” and “NOT MATERIALIZED”,
    the `CTE.prefix_with()` method may be used to establish these.
  id: totrans-858
  prefs: []
  type: TYPE_NORMAL
  zh: 对于诸如PostgreSQL“MATERIALIZED”和“NOT MATERIALIZED”之类的特殊前缀，可以使用`CTE.prefix_with()`方法来建立这些前缀。
- en: 'Changed in version 1.3.13: Added support for prefixes. In particular - MATERIALIZED
    and NOT MATERIALIZED.'
  id: totrans-859
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.3.13中的更改：增加了对前缀的支持。特别是- MATERIALIZED和NOT MATERIALIZED。
- en: 'Parameters:'
  id: totrans-860
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`name` – name given to the common table expression. Like [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias"), the name can be left as `None`
    in which case an anonymous symbol will be used at query compile time.'
  id: totrans-861
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 给公共表达式的名称。与[`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias")类似，名称可以保持为`None`，在这种情况下，将在查询编译时使用匿名符号。'
- en: '`recursive` – if `True`, will render `WITH RECURSIVE`. A recursive common table
    expression is intended to be used in conjunction with UNION ALL in order to derive
    rows from those already selected.'
  id: totrans-862
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`recursive` – 如果为`True`，则呈现`WITH RECURSIVE`。递归公共表达式旨在与UNION ALL一起使用，以从已经选择的行中派生行。'
- en: '`nesting` –'
  id: totrans-863
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nesting` –'
- en: if `True`, will render the CTE locally to the statement in which it is referenced.
    For more complex scenarios, the [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") method using the [`HasCTE.add_cte.nest_here`](#sqlalchemy.sql.expression.HasCTE.add_cte.params.nest_here
    "sqlalchemy.sql.expression.HasCTE.add_cte") parameter may also be used to more
    carefully control the exact placement of a particular CTE.
  id: totrans-864
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果为`True`，则将CTE本地呈现到引用它的语句中。对于更复杂的情况，还可以使用[`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte")方法，使用[`HasCTE.add_cte.nest_here`](#sqlalchemy.sql.expression.HasCTE.add_cte.params.nest_here
    "sqlalchemy.sql.expression.HasCTE.add_cte")参数来更精细地控制特定CTE的确切放置位置。
- en: New in version 1.4.24.
  id: totrans-865
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 1.4.24版本中的新增内容。
- en: See also
  id: totrans-866
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte "sqlalchemy.sql.expression.HasCTE.add_cte")'
  id: totrans-867
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte "sqlalchemy.sql.expression.HasCTE.add_cte")'
- en: The following examples include two from PostgreSQL’s documentation at [https://www.postgresql.org/docs/current/static/queries-with.html](https://www.postgresql.org/docs/current/static/queries-with.html),
    as well as additional examples.
  id: totrans-868
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例包括两个来自PostgreSQL文档的示例，网址为[https://www.postgresql.org/docs/current/static/queries-with.html](https://www.postgresql.org/docs/current/static/queries-with.html)，以及额外的示例。
- en: 'Example 1, non recursive:'
  id: totrans-869
  prefs: []
  type: TYPE_NORMAL
  zh: 示例1，非递归：
- en: '[PRE154]'
  id: totrans-870
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: 'Example 2, WITH RECURSIVE:'
  id: totrans-871
  prefs: []
  type: TYPE_NORMAL
  zh: 示例2，WITH RECURSIVE：
- en: '[PRE155]'
  id: totrans-872
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: 'Example 3, an upsert using UPDATE and INSERT with CTEs:'
  id: totrans-873
  prefs: []
  type: TYPE_NORMAL
  zh: 示例3，使用CTE的UPDATE和INSERT的upsert：
- en: '[PRE156]'
  id: totrans-874
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: 'Example 4, Nesting CTE (SQLAlchemy 1.4.24 and above):'
  id: totrans-875
  prefs: []
  type: TYPE_NORMAL
  zh: 示例4，嵌套CTE（SQLAlchemy 1.4.24及以上版本）：
- en: '[PRE157]'
  id: totrans-876
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: 'The above query will render the second CTE nested inside the first, shown with
    inline parameters below as:'
  id: totrans-877
  prefs: []
  type: TYPE_NORMAL
  zh: 上述查询将第二个CTE嵌套在第一个内部，并显示为以下内联参数：
- en: '[PRE158]'
  id: totrans-878
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: 'The same CTE can be set up using the [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") method as follows (SQLAlchemy 2.0
    and above):'
  id: totrans-879
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用[`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte "sqlalchemy.sql.expression.HasCTE.add_cte")方法设置相同的CTE，如下所示（SQLAlchemy
    2.0及以上版本）：
- en: '[PRE159]'
  id: totrans-880
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: 'Example 5, Non-Linear CTE (SQLAlchemy 1.4.28 and above):'
  id: totrans-881
  prefs: []
  type: TYPE_NORMAL
  zh: 示例5，非线性CTE（SQLAlchemy 1.4.28及以上版本）：
- en: '[PRE160]'
  id: totrans-882
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: 'The above query will render 2 UNIONs inside the recursive CTE:'
  id: totrans-883
  prefs: []
  type: TYPE_NORMAL
  zh: 上述查询将在递归 CTE 内呈现 2 个 UNION：
- en: '[PRE161]'
  id: totrans-884
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: See also
  id: totrans-885
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`Query.cte()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.cte "sqlalchemy.orm.Query.cte")
    - ORM version of [`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte "sqlalchemy.sql.expression.HasCTE.cte").'
  id: totrans-886
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.cte()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.cte "sqlalchemy.orm.Query.cte")
    - [`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte "sqlalchemy.sql.expression.HasCTE.cte")
    的 ORM 版本。'
- en: '[PRE162]'
  id: totrans-887
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: '**Members**'
  id: totrans-888
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[prefix_with()](#sqlalchemy.sql.expression.HasPrefixes.prefix_with)'
  id: totrans-889
  prefs: []
  type: TYPE_NORMAL
  zh: '[prefix_with()](#sqlalchemy.sql.expression.HasPrefixes.prefix_with)'
- en: '[PRE163]'
  id: totrans-890
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: Add one or more expressions following the statement keyword, i.e. SELECT, INSERT,
    UPDATE, or DELETE. Generative.
  id: totrans-891
  prefs: []
  type: TYPE_NORMAL
  zh: 在语句关键字后添加一个或多个表达式，即 SELECT、INSERT、UPDATE 或 DELETE。生成式。
- en: This is used to support backend-specific prefix keywords such as those provided
    by MySQL.
  id: totrans-892
  prefs: []
  type: TYPE_NORMAL
  zh: 用于支持像 MySQL 提供的特定于后端的前缀关键字。
- en: 'E.g.:'
  id: totrans-893
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE164]'
  id: totrans-894
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: Multiple prefixes can be specified by multiple calls to [`HasPrefixes.prefix_with()`](#sqlalchemy.sql.expression.HasPrefixes.prefix_with
    "sqlalchemy.sql.expression.HasPrefixes.prefix_with").
  id: totrans-895
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过多次调用 [`HasPrefixes.prefix_with()`](#sqlalchemy.sql.expression.HasPrefixes.prefix_with
    "sqlalchemy.sql.expression.HasPrefixes.prefix_with") 来指定多个前缀。
- en: 'Parameters:'
  id: totrans-896
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*prefixes` – textual or [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") construct which will be rendered following
    the INSERT, UPDATE, or DELETE keyword.'
  id: totrans-897
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*prefixes` – 将在 INSERT、UPDATE 或 DELETE 关键字之后呈现的文本或 [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") 构造。'
- en: '`dialect` – optional string dialect name which will limit rendering of this
    prefix to only that dialect.'
  id: totrans-898
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect` – 可选的字符串方言名称，将此前缀的呈现限制为仅限于该方言。'
- en: '[PRE165]'
  id: totrans-899
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: '**Members**'
  id: totrans-900
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[suffix_with()](#sqlalchemy.sql.expression.HasSuffixes.suffix_with)'
  id: totrans-901
  prefs: []
  type: TYPE_NORMAL
  zh: '[suffix_with()](#sqlalchemy.sql.expression.HasSuffixes.suffix_with)'
- en: '[PRE166]'
  id: totrans-902
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: Add one or more expressions following the statement as a whole.
  id: totrans-903
  prefs: []
  type: TYPE_NORMAL
  zh: 作为整体的语句后添加一个或多个表达式。
- en: This is used to support backend-specific suffix keywords on certain constructs.
  id: totrans-904
  prefs: []
  type: TYPE_NORMAL
  zh: 用于支持某些构造的特定于后端的后缀关键字。
- en: 'E.g.:'
  id: totrans-905
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE167]'
  id: totrans-906
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: Multiple suffixes can be specified by multiple calls to [`HasSuffixes.suffix_with()`](#sqlalchemy.sql.expression.HasSuffixes.suffix_with
    "sqlalchemy.sql.expression.HasSuffixes.suffix_with").
  id: totrans-907
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过多次调用 [`HasSuffixes.suffix_with()`](#sqlalchemy.sql.expression.HasSuffixes.suffix_with
    "sqlalchemy.sql.expression.HasSuffixes.suffix_with") 来指定多个后缀。
- en: 'Parameters:'
  id: totrans-908
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*suffixes` – textual or [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") construct which will be rendered following
    the target clause.'
  id: totrans-909
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*suffixes` – 将在目标子句之后呈现的文本或 [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") 构造。'
- en: '`dialect` – Optional string dialect name which will limit rendering of this
    suffix to only that dialect.'
  id: totrans-910
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect` – 可选的字符串方言名称，将此后缀的呈现限制为仅限于该方言。'
- en: '[PRE168]'
  id: totrans-911
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: Represent a `JOIN` construct between two [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") elements.
  id: totrans-912
  prefs: []
  type: TYPE_NORMAL
  zh: 表示两个 [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    元素之间的 `JOIN` 构造。
- en: The public constructor function for [`Join`](#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") is the module-level [`join()`](#sqlalchemy.sql.expression.join
    "sqlalchemy.sql.expression.join") function, as well as the [`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join") method of any [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") (e.g. such as [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")).
  id: totrans-913
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    的公共构造函数是模块级别的 [`join()`](#sqlalchemy.sql.expression.join "sqlalchemy.sql.expression.join")
    函数，以及任何 [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    的 [`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join "sqlalchemy.sql.expression.FromClause.join")
    方法（例如 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")）。'
- en: See also
  id: totrans-914
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`join()`](#sqlalchemy.sql.expression.join "sqlalchemy.sql.expression.join")'
  id: totrans-915
  prefs: []
  type: TYPE_NORMAL
  zh: '[`join()`](#sqlalchemy.sql.expression.join "sqlalchemy.sql.expression.join")'
- en: '[`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join "sqlalchemy.sql.expression.FromClause.join")'
  id: totrans-916
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join "sqlalchemy.sql.expression.FromClause.join")'
- en: '**Members**'
  id: totrans-917
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.sql.expression.Join.__init__), [description](#sqlalchemy.sql.expression.Join.description),
    [is_derived_from()](#sqlalchemy.sql.expression.Join.is_derived_from), [select()](#sqlalchemy.sql.expression.Join.select),
    [self_group()](#sqlalchemy.sql.expression.Join.self_group)'
  id: totrans-918
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.sql.expression.Join.__init__), [description](#sqlalchemy.sql.expression.Join.description),
    [is_derived_from()](#sqlalchemy.sql.expression.Join.is_derived_from), [select()](#sqlalchemy.sql.expression.Join.select),
    [self_group()](#sqlalchemy.sql.expression.Join.self_group)'
- en: '**Class signature**'
  id: totrans-919
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    (`sqlalchemy.sql.roles.DMLTableRole`, [`sqlalchemy.sql.expression.FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause"))
  id: totrans-920
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sqlalchemy.sql.expression.Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    类（`sqlalchemy.sql.roles.DMLTableRole`, [`sqlalchemy.sql.expression.FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")）'
- en: '[PRE169]'
  id: totrans-921
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: Construct a new [`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join").
  id: totrans-922
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个新的 [`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")。
- en: The usual entrypoint here is the [`join()`](#sqlalchemy.sql.expression.join
    "sqlalchemy.sql.expression.join") function or the [`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join") method of any [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") object.
  id: totrans-923
  prefs: []
  type: TYPE_NORMAL
  zh: 常见的入口点是 [`join()`](#sqlalchemy.sql.expression.join "sqlalchemy.sql.expression.join")
    函数或任何 [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    对象的 [`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join "sqlalchemy.sql.expression.FromClause.join")
    方法。
- en: '[PRE170]'
  id: totrans-924
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: '[PRE171]'
  id: totrans-925
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: Return `True` if this [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    is ‘derived’ from the given `FromClause`.
  id: totrans-926
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此 [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    是从给定的 `FromClause`‘派生’，则返回 `True`。
- en: An example would be an Alias of a Table is derived from that Table.
  id: totrans-927
  prefs: []
  type: TYPE_NORMAL
  zh: 一个示例是表的别名是从该表派生的。
- en: '[PRE172]'
  id: totrans-928
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: Create a [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    from this [`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join").
  id: totrans-929
  prefs: []
  type: TYPE_NORMAL
  zh: 从此 [`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    创建一个 [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")。
- en: 'E.g.:'
  id: totrans-930
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE173]'
  id: totrans-931
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: 'The above will produce a SQL string resembling:'
  id: totrans-932
  prefs: []
  type: TYPE_NORMAL
  zh: 以上将产生类似于以下的 SQL 字符串：
- en: '[PRE174]'
  id: totrans-933
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: '[PRE175]'
  id: totrans-934
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: Apply a ‘grouping’ to this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  id: totrans-935
  prefs: []
  type: TYPE_NORMAL
  zh: 对此 [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") 应用‘分组’。
- en: This method is overridden by subclasses to return a “grouping” construct, i.e.
    parenthesis. In particular it’s used by “binary” expressions to provide a grouping
    around themselves when placed into a larger expression, as well as by [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs when placed into the FROM clause
    of another [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select").
    (Note that subqueries should be normally created using the [`Select.alias()`](#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") method, as many platforms require nested
    SELECT statements to be named).
  id: totrans-936
  prefs: []
  type: TYPE_NORMAL
  zh: 子类会重写此方法以返回一个“分组”构造，即括号。特别是它被“二元”表达式使用，当它们被放置到更大的表达式中时，会提供一个围绕自己的分组，以及当被放置到另一个
    [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    的 FROM 子句中时，由 [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    构造使用。（注意，子查询通常应使用 [`Select.alias()`](#sqlalchemy.sql.expression.Select.alias "sqlalchemy.sql.expression.Select.alias")
    方法创建，因为许多平台要求嵌套的 SELECT 语句必须具有名称）。
- en: As expressions are composed together, the application of [`self_group()`](#sqlalchemy.sql.expression.Join.self_group
    "sqlalchemy.sql.expression.Join.self_group") is automatic - end-user code should
    never need to use this method directly. Note that SQLAlchemy’s clause constructs
    take operator precedence into account - so parenthesis might not be needed, for
    example, in an expression like `x OR (y AND z)` - AND takes precedence over OR.
  id: totrans-937
  prefs: []
  type: TYPE_NORMAL
  zh: 当表达式组合在一起时，会自动应用 [`self_group()`](#sqlalchemy.sql.expression.Join.self_group
    "sqlalchemy.sql.expression.Join.self_group") - 最终用户代码不应直接使用此方法。请注意，SQLAlchemy
    的子句构造会考虑运算符优先级 - 因此在像 `x OR (y AND z)` 这样的表达式中可能不需要括号 - AND 优先于 OR。
- en: The base [`self_group()`](#sqlalchemy.sql.expression.Join.self_group "sqlalchemy.sql.expression.Join.self_group")
    method of [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") just returns self.
  id: totrans-938
  prefs: []
  type: TYPE_NORMAL
  zh: '[`self_group()`](#sqlalchemy.sql.expression.Join.self_group "sqlalchemy.sql.expression.Join.self_group")
    方法属于 [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") 的基类，仅返回自身。'
- en: '[PRE176]'
  id: totrans-939
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: Represent a LATERAL subquery.
  id: totrans-940
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一个 LATERAL 子查询。
- en: This object is constructed from the [`lateral()`](#sqlalchemy.sql.expression.lateral
    "sqlalchemy.sql.expression.lateral") module level function as well as the `FromClause.lateral()`
    method available on all [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    subclasses.
  id: totrans-941
  prefs: []
  type: TYPE_NORMAL
  zh: 该对象可以通过 [`lateral()`](#sqlalchemy.sql.expression.lateral "sqlalchemy.sql.expression.lateral")
    模块级函数以及所有 [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    子类的 `FromClause.lateral()` 方法构建。
- en: While LATERAL is part of the SQL standard, currently only more recent PostgreSQL
    versions provide support for this keyword.
  id: totrans-942
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 LATERAL 是 SQL 标准的一部分，但目前只有较新版本的 PostgreSQL 支持该关键字。
- en: See also
  id: totrans-943
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[LATERAL correlation](../tutorial/data_select.html#tutorial-lateral-correlation)
    - overview of usage.'
  id: totrans-944
  prefs: []
  type: TYPE_NORMAL
  zh: '[LATERAL 相关性](../tutorial/data_select.html#tutorial-lateral-correlation) -
    用法概述。'
- en: '**Members**'
  id: totrans-945
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[inherit_cache](#sqlalchemy.sql.expression.Lateral.inherit_cache)'
  id: totrans-946
  prefs: []
  type: TYPE_NORMAL
  zh: '[inherit_cache](#sqlalchemy.sql.expression.Lateral.inherit_cache)'
- en: '**Class signature**'
  id: totrans-947
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.Lateral`](#sqlalchemy.sql.expression.Lateral
    "sqlalchemy.sql.expression.Lateral") (`sqlalchemy.sql.expression.FromClauseAlias`,
    `sqlalchemy.sql.expression.LateralFromClause`)
  id: totrans-948
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.expression.Lateral`](#sqlalchemy.sql.expression.Lateral "sqlalchemy.sql.expression.Lateral")
    (`sqlalchemy.sql.expression.FromClauseAlias`, `sqlalchemy.sql.expression.LateralFromClause`)
- en: '[PRE177]'
  id: totrans-949
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: Indicate if this [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") instance should make use of the cache
    key generation scheme used by its immediate superclass.
  id: totrans-950
  prefs: []
  type: TYPE_NORMAL
  zh: 指示此 [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey "sqlalchemy.sql.traversals.HasCacheKey")
    实例是否应使用其直接超类使用的缓存键生成方案。
- en: The attribute defaults to `None`, which indicates that a construct has not yet
    taken into account whether or not its appropriate for it to participate in caching;
    this is functionally equivalent to setting the value to `False`, except that a
    warning is also emitted.
  id: totrans-951
  prefs: []
  type: TYPE_NORMAL
  zh: 此属性默认为 `None`，表示构造尚未考虑其是否适合参与缓存；这在功能上相当于将值设置为 `False`，但也会发出警告。
- en: This flag can be set to `True` on a particular class, if the SQL that corresponds
    to the object does not change based on attributes which are local to this class,
    and not its superclass.
  id: totrans-952
  prefs: []
  type: TYPE_NORMAL
  zh: 如果与对象相对应的 SQL 不会因为该类局部属性而改变，而是改变其超类，则可以在特定类上将此标志设置为 `True`。
- en: See also
  id: totrans-953
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Enabling Caching Support for Custom Constructs](compiler.html#compilerext-caching)
    - General guideslines for setting the [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute for third-party
    or user defined SQL constructs.'
  id: totrans-954
  prefs: []
  type: TYPE_NORMAL
  zh: '[为自定义构造启用缓存支持](compiler.html#compilerext-caching) - 为第三方或用户定义的 SQL 构造设置 [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") 属性的一般指南。'
- en: '[PRE178]'
  id: totrans-955
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: The base-most class for Core constructs that have some concept of columns that
    can represent rows.
  id: totrans-956
  prefs: []
  type: TYPE_NORMAL
  zh: 最基本的核心构造类，具有可表示行的列概念。
- en: While the SELECT statement and TABLE are the primary things we think of in this
    category, DML like INSERT, UPDATE and DELETE can also specify RETURNING which
    means they can be used in CTEs and other forms, and PostgreSQL has functions that
    return rows also.
  id: totrans-957
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 SELECT 语句和 TABLE 是我们在此类别中首先考虑的主要内容，但是像 INSERT、UPDATE 和 DELETE 这样的 DML 也可以指定
    RETURNING，这意味着它们可以在 CTEs 和其他形式中使用，而且 PostgreSQL 也有返回行的函数。
- en: New in version 1.4.
  id: totrans-958
  prefs: []
  type: TYPE_NORMAL
  zh: 自 1.4 版本新增。
- en: '**Members**'
  id: totrans-959
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[exported_columns](#sqlalchemy.sql.expression.ReturnsRows.exported_columns),
    [is_derived_from()](#sqlalchemy.sql.expression.ReturnsRows.is_derived_from)'
  id: totrans-960
  prefs: []
  type: TYPE_NORMAL
  zh: '[exported_columns](#sqlalchemy.sql.expression.ReturnsRows.exported_columns),
    [is_derived_from()](#sqlalchemy.sql.expression.ReturnsRows.is_derived_from)'
- en: '**Class signature**'
  id: totrans-961
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows
    "sqlalchemy.sql.expression.ReturnsRows") (`sqlalchemy.sql.roles.ReturnsRowsRole`,
    `sqlalchemy.sql.expression.DQLDMLClauseElement`)
  id: totrans-962
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.expression.ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows
    "sqlalchemy.sql.expression.ReturnsRows") (`sqlalchemy.sql.roles.ReturnsRowsRole`,
    `sqlalchemy.sql.expression.DQLDMLClauseElement`)
- en: '[PRE179]'
  id: totrans-963
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: A [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") that represents the “exported” columns
    of this [`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows "sqlalchemy.sql.expression.ReturnsRows").
  id: totrans-964
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")，代表这个 [`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows
    "sqlalchemy.sql.expression.ReturnsRows") 的“导出”列。
- en: The “exported” columns represent the collection of [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") expressions that are rendered by this
    SQL construct. There are primary varieties which are the “FROM clause columns”
    of a FROM clause, such as a table, join, or subquery, the “SELECTed columns”,
    which are the columns in the “columns clause” of a SELECT statement, and the RETURNING
    columns in a DML statement..
  id: totrans-965
  prefs: []
  type: TYPE_NORMAL
  zh: “导出”列代表此 SQL 构造呈现的 [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") 表达式集合。主要有几种类型，包括 FROM 子句的“FROM 子句列”，例如表、连接或子查询，以及“SELECTed
    列”，即 SELECT 语句的“列子句”中的列，以及 DML 语句中的 RETURNING 列。
- en: New in version 1.4.
  id: totrans-966
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.4 新增。
- en: See also
  id: totrans-967
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`FromClause.exported_columns`](#sqlalchemy.sql.expression.FromClause.exported_columns
    "sqlalchemy.sql.expression.FromClause.exported_columns")'
  id: totrans-968
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FromClause.exported_columns`](#sqlalchemy.sql.expression.FromClause.exported_columns
    "sqlalchemy.sql.expression.FromClause.exported_columns")'
- en: '[`SelectBase.exported_columns`](#sqlalchemy.sql.expression.SelectBase.exported_columns
    "sqlalchemy.sql.expression.SelectBase.exported_columns")'
  id: totrans-969
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SelectBase.exported_columns`](#sqlalchemy.sql.expression.SelectBase.exported_columns
    "sqlalchemy.sql.expression.SelectBase.exported_columns")'
- en: '[PRE180]'
  id: totrans-970
  prefs: []
  type: TYPE_PRE
  zh: '[PRE180]'
- en: Return `True` if this [`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows
    "sqlalchemy.sql.expression.ReturnsRows") is ‘derived’ from the given [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-971
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此 [`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows "sqlalchemy.sql.expression.ReturnsRows")
    是从给定的 [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    “派生”出来的，则返回 `True`。
- en: An example would be an Alias of a Table is derived from that Table.
  id: totrans-972
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，表的别名是从该表派生出来的。
- en: '[PRE181]'
  id: totrans-973
  prefs: []
  type: TYPE_PRE
  zh: '[PRE181]'
- en: Represent a scalar subquery.
  id: totrans-974
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一个标量子查询。
- en: A [`ScalarSelect`](#sqlalchemy.sql.expression.ScalarSelect "sqlalchemy.sql.expression.ScalarSelect")
    is created by invoking the [`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery") method. The object then
    participates in other SQL expressions as a SQL column expression within the [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") hierarchy.
  id: totrans-975
  prefs: []
  type: TYPE_NORMAL
  zh: 通过调用 [`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery") 方法创建 [`ScalarSelect`](#sqlalchemy.sql.expression.ScalarSelect
    "sqlalchemy.sql.expression.ScalarSelect")。然后，该对象作为 [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") 层次结构中的 SQL 列表达式参与其他 SQL 表达式。
- en: See also
  id: totrans-976
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery")'
  id: totrans-977
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery")'
- en: '[Scalar and Correlated Subqueries](../tutorial/data_select.html#tutorial-scalar-subquery)
    - in the 2.0 tutorial'
  id: totrans-978
  prefs: []
  type: TYPE_NORMAL
  zh: '[标量和相关子查询](../tutorial/data_select.html#tutorial-scalar-subquery) - 在 2.0 教程中'
- en: '**Members**'
  id: totrans-979
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[correlate()](#sqlalchemy.sql.expression.ScalarSelect.correlate), [correlate_except()](#sqlalchemy.sql.expression.ScalarSelect.correlate_except),
    [inherit_cache](#sqlalchemy.sql.expression.ScalarSelect.inherit_cache), [self_group()](#sqlalchemy.sql.expression.ScalarSelect.self_group),
    [where()](#sqlalchemy.sql.expression.ScalarSelect.where)'
  id: totrans-980
  prefs: []
  type: TYPE_NORMAL
  zh: '[correlate()](#sqlalchemy.sql.expression.ScalarSelect.correlate), [correlate_except()](#sqlalchemy.sql.expression.ScalarSelect.correlate_except),
    [inherit_cache](#sqlalchemy.sql.expression.ScalarSelect.inherit_cache), [self_group()](#sqlalchemy.sql.expression.ScalarSelect.self_group),
    [where()](#sqlalchemy.sql.expression.ScalarSelect.where)'
- en: '**Class signature**'
  id: totrans-981
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.ScalarSelect`](#sqlalchemy.sql.expression.ScalarSelect
    "sqlalchemy.sql.expression.ScalarSelect") (`sqlalchemy.sql.roles.InElementRole`,
    `sqlalchemy.sql.expression.Generative`, `sqlalchemy.sql.expression.GroupedElement`,
    [`sqlalchemy.sql.expression.ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"))
  id: totrans-982
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.expression.ScalarSelect`](#sqlalchemy.sql.expression.ScalarSelect
    "sqlalchemy.sql.expression.ScalarSelect") (`sqlalchemy.sql.roles.InElementRole`,
    `sqlalchemy.sql.expression.Generative`, `sqlalchemy.sql.expression.GroupedElement`,
    [`sqlalchemy.sql.expression.ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"))
- en: '[PRE182]'
  id: totrans-983
  prefs: []
  type: TYPE_PRE
  zh: '[PRE182]'
- en: Return a new [`ScalarSelect`](#sqlalchemy.sql.expression.ScalarSelect "sqlalchemy.sql.expression.ScalarSelect")
    which will correlate the given FROM clauses to that of an enclosing [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select").
  id: totrans-984
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的[`ScalarSelect`](#sqlalchemy.sql.expression.ScalarSelect "sqlalchemy.sql.expression.ScalarSelect")，它将相关联给定的FROM子句到封闭[`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select")的FROM子句。
- en: This method is mirrored from the [`Select.correlate()`](#sqlalchemy.sql.expression.Select.correlate
    "sqlalchemy.sql.expression.Select.correlate") method of the underlying [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select"). The method applies the :meth:_sql.Select.correlate`
    method, then returns a new [`ScalarSelect`](#sqlalchemy.sql.expression.ScalarSelect
    "sqlalchemy.sql.expression.ScalarSelect") against that statement.
  id: totrans-985
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法是从底层[`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")的[`Select.correlate()`](#sqlalchemy.sql.expression.Select.correlate
    "sqlalchemy.sql.expression.Select.correlate")方法中镜像出来的。该方法应用了:meth:_sql.Select.correlate`方法，然后返回一个新的[`ScalarSelect`](#sqlalchemy.sql.expression.ScalarSelect
    "sqlalchemy.sql.expression.ScalarSelect")针对该语句。
- en: 'New in version 1.4: Previously, the [`ScalarSelect.correlate()`](#sqlalchemy.sql.expression.ScalarSelect.correlate
    "sqlalchemy.sql.expression.ScalarSelect.correlate") method was only available
    from [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select").'
  id: totrans-986
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4中的新内容：以前，[`ScalarSelect.correlate()`](#sqlalchemy.sql.expression.ScalarSelect.correlate
    "sqlalchemy.sql.expression.ScalarSelect.correlate")方法仅从[`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select")中可用。
- en: 'Parameters:'
  id: totrans-987
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '***fromclauses** – a list of one or more [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") constructs, or other compatible constructs
    (i.e. ORM-mapped classes) to become part of the correlate collection.'
  id: totrans-988
  prefs: []
  type: TYPE_NORMAL
  zh: '***fromclauses** - 一个或多个[`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")构造的列表，或其他兼容的构造（即ORM映射的类），以成为相关集合的一部分。'
- en: See also
  id: totrans-989
  prefs: []
  type: TYPE_NORMAL
  zh: 还请参阅
- en: '[`ScalarSelect.correlate_except()`](#sqlalchemy.sql.expression.ScalarSelect.correlate_except
    "sqlalchemy.sql.expression.ScalarSelect.correlate_except")'
  id: totrans-990
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ScalarSelect.correlate_except()`](#sqlalchemy.sql.expression.ScalarSelect.correlate_except
    "sqlalchemy.sql.expression.ScalarSelect.correlate_except")'
- en: '[Scalar and Correlated Subqueries](../tutorial/data_select.html#tutorial-scalar-subquery)
    - in the 2.0 tutorial'
  id: totrans-991
  prefs: []
  type: TYPE_NORMAL
  zh: '[标量和相关子查询](../tutorial/data_select.html#tutorial-scalar-subquery) - 在2.0教程'
- en: '[PRE183]'
  id: totrans-992
  prefs: []
  type: TYPE_PRE
  zh: '[PRE183]'
- en: Return a new [`ScalarSelect`](#sqlalchemy.sql.expression.ScalarSelect "sqlalchemy.sql.expression.ScalarSelect")
    which will omit the given FROM clauses from the auto-correlation process.
  id: totrans-993
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的[`ScalarSelect`](#sqlalchemy.sql.expression.ScalarSelect "sqlalchemy.sql.expression.ScalarSelect")，它将从自动相关过程中省略给定的FROM子句。
- en: This method is mirrored from the [`Select.correlate_except()`](#sqlalchemy.sql.expression.Select.correlate_except
    "sqlalchemy.sql.expression.Select.correlate_except") method of the underlying
    [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select").
    The method applies the :meth:_sql.Select.correlate_except` method, then returns
    a new [`ScalarSelect`](#sqlalchemy.sql.expression.ScalarSelect "sqlalchemy.sql.expression.ScalarSelect")
    against that statement.
  id: totrans-994
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法是从底层[`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")的[`Select.correlate_except()`](#sqlalchemy.sql.expression.Select.correlate_except
    "sqlalchemy.sql.expression.Select.correlate_except")方法中镜像出来的。该方法应用了:meth:_sql.Select.correlate_except`方法，然后返回一个新的[`ScalarSelect`](#sqlalchemy.sql.expression.ScalarSelect
    "sqlalchemy.sql.expression.ScalarSelect")针对该语句。
- en: 'New in version 1.4: Previously, the [`ScalarSelect.correlate_except()`](#sqlalchemy.sql.expression.ScalarSelect.correlate_except
    "sqlalchemy.sql.expression.ScalarSelect.correlate_except") method was only available
    from [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select").'
  id: totrans-995
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4中的新内容：以前，[`ScalarSelect.correlate_except()`](#sqlalchemy.sql.expression.ScalarSelect.correlate_except
    "sqlalchemy.sql.expression.ScalarSelect.correlate_except")方法仅从[`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select")中可用。
- en: 'Parameters:'
  id: totrans-996
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '***fromclauses** – a list of one or more [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") constructs, or other compatible constructs
    (i.e. ORM-mapped classes) to become part of the correlate-exception collection.'
  id: totrans-997
  prefs: []
  type: TYPE_NORMAL
  zh: '***fromclauses** - 一个或多个[`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")构造的列表，或其他兼容的构造（即ORM映射的类），以成为相关例外集合的一部分。'
- en: See also
  id: totrans-998
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`ScalarSelect.correlate()`](#sqlalchemy.sql.expression.ScalarSelect.correlate
    "sqlalchemy.sql.expression.ScalarSelect.correlate")'
  id: totrans-999
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ScalarSelect.correlate()`](#sqlalchemy.sql.expression.ScalarSelect.correlate
    "sqlalchemy.sql.expression.ScalarSelect.correlate")'
- en: '[Scalar and Correlated Subqueries](../tutorial/data_select.html#tutorial-scalar-subquery)
    - in the 2.0 tutorial'
  id: totrans-1000
  prefs: []
  type: TYPE_NORMAL
  zh: '[标量和相关子查询](../tutorial/data_select.html#tutorial-scalar-subquery) - 在 2.0 教程中'
- en: '[PRE184]'
  id: totrans-1001
  prefs: []
  type: TYPE_PRE
  zh: '[PRE184]'
- en: Indicate if this [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") instance should make use of the cache
    key generation scheme used by its immediate superclass.
  id: totrans-1002
  prefs: []
  type: TYPE_NORMAL
  zh: 指示此 [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey "sqlalchemy.sql.traversals.HasCacheKey")
    实例是否应使用其直接超类使用的缓存键生成方案。
- en: The attribute defaults to `None`, which indicates that a construct has not yet
    taken into account whether or not its appropriate for it to participate in caching;
    this is functionally equivalent to setting the value to `False`, except that a
    warning is also emitted.
  id: totrans-1003
  prefs: []
  type: TYPE_NORMAL
  zh: 该属性默认为 `None`，表示构造尚未考虑是否适合参与缓存；这在功能上等同于将值设置为 `False`，只是还会发出警告。
- en: This flag can be set to `True` on a particular class, if the SQL that corresponds
    to the object does not change based on attributes which are local to this class,
    and not its superclass.
  id: totrans-1004
  prefs: []
  type: TYPE_NORMAL
  zh: 如果与对象对应的 SQL 不基于仅属于此类而不是其超类的属性更改，则可以在特定类上将此标志设置为 `True`。
- en: See also
  id: totrans-1005
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Enabling Caching Support for Custom Constructs](compiler.html#compilerext-caching)
    - General guideslines for setting the [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute for third-party
    or user defined SQL constructs.'
  id: totrans-1006
  prefs: []
  type: TYPE_NORMAL
  zh: '[为自定义构造启用缓存支持](compiler.html#compilerext-caching) - 设置第三方或用户定义的 SQL 构造的 [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") 属性的一般指南。'
- en: '[PRE185]'
  id: totrans-1007
  prefs: []
  type: TYPE_PRE
  zh: '[PRE185]'
- en: Apply a ‘grouping’ to this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  id: totrans-1008
  prefs: []
  type: TYPE_NORMAL
  zh: 对这个 [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") 应用一个“分组”。
- en: This method is overridden by subclasses to return a “grouping” construct, i.e.
    parenthesis. In particular it’s used by “binary” expressions to provide a grouping
    around themselves when placed into a larger expression, as well as by [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs when placed into the FROM clause
    of another [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select").
    (Note that subqueries should be normally created using the [`Select.alias()`](#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") method, as many platforms require nested
    SELECT statements to be named).
  id: totrans-1009
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法被子类重写以返回一个“分组”构造，即括号。特别是当“二元”表达式被放置到更大的表达式中时，它们会提供一个围绕自身的分组，以及当 [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造被放置到另一个 [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 的 FROM 子句中时。 （请注意，子查询通常应使用 [`Select.alias()`](#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") 方法创建，因为许多平台要求嵌套的 SELECT 语句必须被命名）。
- en: As expressions are composed together, the application of [`self_group()`](#sqlalchemy.sql.expression.ScalarSelect.self_group
    "sqlalchemy.sql.expression.ScalarSelect.self_group") is automatic - end-user code
    should never need to use this method directly. Note that SQLAlchemy’s clause constructs
    take operator precedence into account - so parenthesis might not be needed, for
    example, in an expression like `x OR (y AND z)` - AND takes precedence over OR.
  id: totrans-1010
  prefs: []
  type: TYPE_NORMAL
  zh: 当表达式组合在一起时，[`self_group()`](#sqlalchemy.sql.expression.ScalarSelect.self_group
    "sqlalchemy.sql.expression.ScalarSelect.self_group") 的应用是自动的 - 最终用户代码不应直接使用此方法。请注意，SQLAlchemy的子句构造会考虑运算符优先级
    - 因此在诸如 `x OR (y AND z)` 这样的表达式中可能不需要括号 - AND 优先于 OR。
- en: The base [`self_group()`](#sqlalchemy.sql.expression.ScalarSelect.self_group
    "sqlalchemy.sql.expression.ScalarSelect.self_group") method of [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") just returns self.
  id: totrans-1011
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement "sqlalchemy.sql.expression.ClauseElement")
    的基本 [`self_group()`](#sqlalchemy.sql.expression.ScalarSelect.self_group "sqlalchemy.sql.expression.ScalarSelect.self_group")
    方法只返回自身。'
- en: '[PRE186]'
  id: totrans-1012
  prefs: []
  type: TYPE_PRE
  zh: '[PRE186]'
- en: Apply a WHERE clause to the SELECT statement referred to by this [`ScalarSelect`](#sqlalchemy.sql.expression.ScalarSelect
    "sqlalchemy.sql.expression.ScalarSelect").
  id: totrans-1013
  prefs: []
  type: TYPE_NORMAL
  zh: 对此 [`ScalarSelect`](#sqlalchemy.sql.expression.ScalarSelect "sqlalchemy.sql.expression.ScalarSelect")
    引用的 SELECT 语句应用 WHERE 子句。
- en: '[PRE187]'
  id: totrans-1014
  prefs: []
  type: TYPE_PRE
  zh: '[PRE187]'
- en: Represents a `SELECT` statement.
  id: totrans-1015
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一个 `SELECT` 语句。
- en: The [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    object is normally constructed using the [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") function. See that function for details.
  id: totrans-1016
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    对象通常使用 [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    函数构造。详情请参阅该函数。'
- en: See also
  id: totrans-1017
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")'
  id: totrans-1018
  prefs: []
  type: TYPE_NORMAL
  zh: '[`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")'
- en: '[Using SELECT Statements](../tutorial/data_select.html#tutorial-selecting-data)
    - in the 2.0 tutorial'
  id: totrans-1019
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 SELECT 语句](../tutorial/data_select.html#tutorial-selecting-data) - 在 2.0
    教程中'
- en: '**Members**'
  id: totrans-1020
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.sql.expression.Select.__init__), [add_columns()](#sqlalchemy.sql.expression.Select.add_columns),
    [add_cte()](#sqlalchemy.sql.expression.Select.add_cte), [alias()](#sqlalchemy.sql.expression.Select.alias),
    [as_scalar()](#sqlalchemy.sql.expression.Select.as_scalar), [c](#sqlalchemy.sql.expression.Select.c),
    [column()](#sqlalchemy.sql.expression.Select.column), [column_descriptions](#sqlalchemy.sql.expression.Select.column_descriptions),
    [columns_clause_froms](#sqlalchemy.sql.expression.Select.columns_clause_froms),
    [correlate()](#sqlalchemy.sql.expression.Select.correlate), [correlate_except()](#sqlalchemy.sql.expression.Select.correlate_except),
    [corresponding_column()](#sqlalchemy.sql.expression.Select.corresponding_column),
    [cte()](#sqlalchemy.sql.expression.Select.cte), [distinct()](#sqlalchemy.sql.expression.Select.distinct),
    [except_()](#sqlalchemy.sql.expression.Select.except_), [except_all()](#sqlalchemy.sql.expression.Select.except_all),
    [execution_options()](#sqlalchemy.sql.expression.Select.execution_options), [exists()](#sqlalchemy.sql.expression.Select.exists),
    [exported_columns](#sqlalchemy.sql.expression.Select.exported_columns), [fetch()](#sqlalchemy.sql.expression.Select.fetch),
    [filter()](#sqlalchemy.sql.expression.Select.filter), [filter_by()](#sqlalchemy.sql.expression.Select.filter_by),
    [from_statement()](#sqlalchemy.sql.expression.Select.from_statement), [froms](#sqlalchemy.sql.expression.Select.froms),
    [get_children()](#sqlalchemy.sql.expression.Select.get_children), [get_execution_options()](#sqlalchemy.sql.expression.Select.get_execution_options),
    [get_final_froms()](#sqlalchemy.sql.expression.Select.get_final_froms), [get_label_style()](#sqlalchemy.sql.expression.Select.get_label_style),
    [group_by()](#sqlalchemy.sql.expression.Select.group_by), [having()](#sqlalchemy.sql.expression.Select.having),
    [inherit_cache](#sqlalchemy.sql.expression.Select.inherit_cache), [inner_columns](#sqlalchemy.sql.expression.Select.inner_columns),
    [intersect()](#sqlalchemy.sql.expression.Select.intersect), [intersect_all()](#sqlalchemy.sql.expression.Select.intersect_all),
    [is_derived_from()](#sqlalchemy.sql.expression.Select.is_derived_from), [join()](#sqlalchemy.sql.expression.Select.join),
    [join_from()](#sqlalchemy.sql.expression.Select.join_from), [label()](#sqlalchemy.sql.expression.Select.label),
    [lateral()](#sqlalchemy.sql.expression.Select.lateral), [limit()](#sqlalchemy.sql.expression.Select.limit),
    [offset()](#sqlalchemy.sql.expression.Select.offset), [options()](#sqlalchemy.sql.expression.Select.options),
    [order_by()](#sqlalchemy.sql.expression.Select.order_by), [outerjoin()](#sqlalchemy.sql.expression.Select.outerjoin),
    [outerjoin_from()](#sqlalchemy.sql.expression.Select.outerjoin_from), [prefix_with()](#sqlalchemy.sql.expression.Select.prefix_with),
    [reduce_columns()](#sqlalchemy.sql.expression.Select.reduce_columns), [replace_selectable()](#sqlalchemy.sql.expression.Select.replace_selectable),
    [scalar_subquery()](#sqlalchemy.sql.expression.Select.scalar_subquery), [select()](#sqlalchemy.sql.expression.Select.select),
    [select_from()](#sqlalchemy.sql.expression.Select.select_from), [selected_columns](#sqlalchemy.sql.expression.Select.selected_columns),
    [self_group()](#sqlalchemy.sql.expression.Select.self_group), [set_label_style()](#sqlalchemy.sql.expression.Select.set_label_style),
    [slice()](#sqlalchemy.sql.expression.Select.slice), [subquery()](#sqlalchemy.sql.expression.Select.subquery),
    [suffix_with()](#sqlalchemy.sql.expression.Select.suffix_with), [union()](#sqlalchemy.sql.expression.Select.union),
    [union_all()](#sqlalchemy.sql.expression.Select.union_all), [where()](#sqlalchemy.sql.expression.Select.where),
    [whereclause](#sqlalchemy.sql.expression.Select.whereclause), [with_for_update()](#sqlalchemy.sql.expression.Select.with_for_update),
    [with_hint()](#sqlalchemy.sql.expression.Select.with_hint), [with_only_columns()](#sqlalchemy.sql.expression.Select.with_only_columns),
    [with_statement_hint()](#sqlalchemy.sql.expression.Select.with_statement_hint)'
  id: totrans-1021
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.sql.expression.Select.__init__), [add_columns()](#sqlalchemy.sql.expression.Select.add_columns),
    [add_cte()](#sqlalchemy.sql.expression.Select.add_cte), [alias()](#sqlalchemy.sql.expression.Select.alias),
    [as_scalar()](#sqlalchemy.sql.expression.Select.as_scalar), [c](#sqlalchemy.sql.expression.Select.c),
    [column()](#sqlalchemy.sql.expression.Select.column), [column_descriptions](#sqlalchemy.sql.expression.Select.column_descriptions),
    [columns_clause_froms](#sqlalchemy.sql.expression.Select.columns_clause_froms),
    [correlate()](#sqlalchemy.sql.expression.Select.correlate), [correlate_except()](#sqlalchemy.sql.expression.Select.correlate_except),
    [corresponding_column()](#sqlalchemy.sql.expression.Select.corresponding_column),
    [cte()](#sqlalchemy.sql.expression.Select.cte), [distinct()](#sqlalchemy.sql.expression.Select.distinct),
    [except_()](#sqlalchemy.sql.expression.Select.except_), [except_all()](#sqlalchemy.sql.expression.Select.except_all),
    [execution_options()](#sqlalchemy.sql.expression.Select.execution_options), [exists()](#sqlalchemy.sql.expression.Select.exists),
    [exported_columns](#sqlalchemy.sql.expression.Select.exported_columns), [fetch()](#sqlalchemy.sql.expression.Select.fetch),
    [filter()](#sqlalchemy.sql.expression.Select.filter), [filter_by()](#sqlalchemy.sql.expression.Select.filter_by),
    [from_statement()](#sqlalchemy.sql.expression.Select.from_statement), [froms](#sqlalchemy.sql.expression.Select.froms),
    [get_children()](#sqlalchemy.sql.expression.Select.get_children), [get_execution_options()](#sqlalchemy.sql.expression.Select.get_execution_options),
    [get_final_froms()](#sqlalchemy.sql.expression.Select.get_final_froms), [get_label_style()](#sqlalchemy.sql.expression.Select.get_label_style),
    [group_by()](#sqlalchemy.sql.expression.Select.group_by), [having()](#sqlalchemy.sql.expression.Select.having),
    [inherit_cache](#sqlalchemy.sql.expression.Select.inherit_cache), [inner_columns](#sqlalchemy.sql.expression.Select.inner_columns),
    [intersect()](#sqlalchemy.sql.expression.Select.intersect), [intersect_all()](#sqlalchemy.sql.expression.Select.intersect_all),
    [is_derived_from()](#sqlalchemy.sql.expression.Select.is_derived_from), [join()](#sqlalchemy.sql.expression.Select.join),
    [join_from()](#sqlalchemy.sql.expression.Select.join_from), [label()](#sqlalchemy.sql.expression.Select.label),
    [lateral()](#sqlalchemy.sql.expression.Select.lateral), [limit()](#sqlalchemy.sql.expression.Select.limit),
    [offset()](#sqlalchemy.sql.expression.Select.offset), [options()](#sqlalchemy.sql.expression.Select.options),
    [order_by()](#sqlalchemy.sql.expression.Select.order_by), [outerjoin()](#sqlalchemy.sql.expression.Select.outerjoin),
    [outerjoin_from()](#sqlalchemy.sql.expression.Select.outerjoin_from), [prefix_with()](#sqlalchemy.sql.expression.Select.prefix_with),
    [reduce_columns()](#sqlalchemy.sql.expression.Select.reduce_columns), [replace_selectable()](#sqlalchemy.sql.expression.Select.replace_selectable),
    [scalar_subquery()](#sqlalchemy.sql.expression.Select.scalar_subquery), [select()](#sqlalchemy.sql.expression.Select.select),
    [select_from()](#sqlalchemy.sql.expression.Select.select_from), [selected_columns](#sqlalchemy.sql.expression.Select.selected_columns),
    [self_group()](#sqlalchemy.sql.expression.Select.self_group), [set_label_style()](#sqlalchemy.sql.expression.Select.set_label_style),
    [slice()](#sqlalchemy.sql.expression.Select.slice), [subquery()](#sqlalchemy.sql.expression.Select.subquery),
    [suffix_with()](#sqlalchemy.sql.expression.Select.suffix_with), [union()](#sqlalchemy.sql.expression.Select.union),
    [union_all()](#sqlalchemy.sql.expression.Select.union_all), [where()](#sqlalchemy.sql.expression.Select.where),
    [whereclause](#sqlalchemy.sql.expression.Select.whereclause), [with_for_update()](#sqlalchemy.sql.expression.Select.with_for_update),
    [with_hint()](#sqlalchemy.sql.expression.Select.with_hint), [with_only_columns()](#sqlalchemy.sql.expression.Select.with_only_columns),
    [with_statement_hint()](#sqlalchemy.sql.expression.Select.with_statement_hint)'
- en: '**Class signature**'
  id: totrans-1022
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") ([`sqlalchemy.sql.expression.HasPrefixes`](#sqlalchemy.sql.expression.HasPrefixes
    "sqlalchemy.sql.expression.HasPrefixes"), [`sqlalchemy.sql.expression.HasSuffixes`](#sqlalchemy.sql.expression.HasSuffixes
    "sqlalchemy.sql.expression.HasSuffixes"), `sqlalchemy.sql.expression.HasHints`,
    `sqlalchemy.sql.expression.HasCompileState`, `sqlalchemy.sql.expression._SelectFromElements`,
    [`sqlalchemy.sql.expression.GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect"), `sqlalchemy.sql.expression.TypedReturnsRows`)
  id: totrans-1023
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.expression.Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")（[`sqlalchemy.sql.expression.HasPrefixes`](#sqlalchemy.sql.expression.HasPrefixes
    "sqlalchemy.sql.expression.HasPrefixes")，[`sqlalchemy.sql.expression.HasSuffixes`](#sqlalchemy.sql.expression.HasSuffixes
    "sqlalchemy.sql.expression.HasSuffixes")，`sqlalchemy.sql.expression.HasHints`，`sqlalchemy.sql.expression.HasCompileState`，`sqlalchemy.sql.expression._SelectFromElements`，[`sqlalchemy.sql.expression.GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")，`sqlalchemy.sql.expression.TypedReturnsRows`）
- en: '[PRE188]'
  id: totrans-1024
  prefs: []
  type: TYPE_PRE
  zh: '[PRE188]'
- en: Construct a new [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select").
  id: totrans-1025
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个新的[`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")。
- en: The public constructor for [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    is the [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    function.
  id: totrans-1026
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")的公共构造函数是[`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")函数。'
- en: '[PRE189]'
  id: totrans-1027
  prefs: []
  type: TYPE_PRE
  zh: '[PRE189]'
- en: Return a new [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    construct with the given entities appended to its columns clause.
  id: totrans-1028
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的[`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")构造，其中包含给定实体附加到其列子句中。
- en: 'E.g.:'
  id: totrans-1029
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE190]'
  id: totrans-1030
  prefs: []
  type: TYPE_PRE
  zh: '[PRE190]'
- en: The original expressions in the columns clause remain in place. To replace the
    original expressions with new ones, see the method [`Select.with_only_columns()`](#sqlalchemy.sql.expression.Select.with_only_columns
    "sqlalchemy.sql.expression.Select.with_only_columns").
  id: totrans-1031
  prefs: []
  type: TYPE_NORMAL
  zh: 列子句中的原始表达式保持不变。要用新表达式替换原始表达式，请参见方法[`Select.with_only_columns()`](#sqlalchemy.sql.expression.Select.with_only_columns
    "sqlalchemy.sql.expression.Select.with_only_columns")。
- en: 'Parameters:'
  id: totrans-1032
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '***entities** – column, table, or other entity expressions to be added to the
    columns clause'
  id: totrans-1033
  prefs: []
  type: TYPE_NORMAL
  zh: '***entities** – 要添加到列子句中的列、表或其他实体表达式'
- en: See also
  id: totrans-1034
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Select.with_only_columns()`](#sqlalchemy.sql.expression.Select.with_only_columns
    "sqlalchemy.sql.expression.Select.with_only_columns") - replaces existing expressions
    rather than appending.'
  id: totrans-1035
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.with_only_columns()`](#sqlalchemy.sql.expression.Select.with_only_columns
    "sqlalchemy.sql.expression.Select.with_only_columns") - 替换现有表达式而不是追加。'
- en: '[Selecting Multiple ORM Entities Simultaneously](../orm/queryguide/select.html#orm-queryguide-select-multiple-entities)
    - ORM-centric example'
  id: totrans-1036
  prefs: []
  type: TYPE_NORMAL
  zh: '[同时选择多个ORM实体](../orm/queryguide/select.html#orm-queryguide-select-multiple-entities)
    - 以ORM为中心的示例'
- en: '[PRE191]'
  id: totrans-1037
  prefs: []
  type: TYPE_PRE
  zh: '[PRE191]'
- en: '*inherited from the* [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") *method of* [`HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE")'
  id: totrans-1038
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte "sqlalchemy.sql.expression.HasCTE.add_cte")
    *方法的* [`HasCTE`](#sqlalchemy.sql.expression.HasCTE "sqlalchemy.sql.expression.HasCTE")'
- en: Add one or more [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    constructs to this statement.
  id: totrans-1039
  prefs: []
  type: TYPE_NORMAL
  zh: 向此语句添加一个或多个[`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")构造。
- en: This method will associate the given [`CTE`](#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE") constructs with the parent statement such that
    they will each be unconditionally rendered in the WITH clause of the final statement,
    even if not referenced elsewhere within the statement or any sub-selects.
  id: totrans-1040
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法将将给定的[`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")构造与父语句关联，以便它们将分别无条件地呈现在最终语句的WITH子句中，即使在语句或任何子选择中未引用它们。
- en: The optional [`HasCTE.add_cte.nest_here`](#sqlalchemy.sql.expression.HasCTE.add_cte.params.nest_here
    "sqlalchemy.sql.expression.HasCTE.add_cte") parameter when set to True will have
    the effect that each given [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    will render in a WITH clause rendered directly along with this statement, rather
    than being moved to the top of the ultimate rendered statement, even if this statement
    is rendered as a subquery within a larger statement.
  id: totrans-1041
  prefs: []
  type: TYPE_NORMAL
  zh: 当可选的[`HasCTE.add_cte.nest_here`](#sqlalchemy.sql.expression.HasCTE.add_cte.params.nest_here
    "sqlalchemy.sql.expression.HasCTE.add_cte")参数设置为True时，每个给定的[`CTE`](#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE")将直接与此语句一起渲染为WITH子句，而不是被移动到最终渲染的语句顶部，即使此语句作为较大语句中的子查询进行渲染也是如此。
- en: This method has two general uses. One is to embed CTE statements that serve
    some purpose without being referenced explicitly, such as the use case of embedding
    a DML statement such as an INSERT or UPDATE as a CTE inline with a primary statement
    that may draw from its results indirectly. The other is to provide control over
    the exact placement of a particular series of CTE constructs that should remain
    rendered directly in terms of a particular statement that may be nested in a larger
    statement.
  id: totrans-1042
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法有两个一般用途。一个是嵌入服务于某种目的而不被显式引用的CTE语句，比如将DML语句（如INSERT或UPDATE）嵌入为一个CTE与可能间接引用其结果的主要语句内联的用例。另一个是提供对应于应保持直接渲染为可能嵌套在较大语句中的特定语句的CTE结构系列的确切放置位置的控制。
- en: 'E.g.:'
  id: totrans-1043
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE192]'
  id: totrans-1044
  prefs: []
  type: TYPE_PRE
  zh: '[PRE192]'
- en: 'Would render:'
  id: totrans-1045
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染后：
- en: '[PRE193]'
  id: totrans-1046
  prefs: []
  type: TYPE_PRE
  zh: '[PRE193]'
- en: Above, the “anon_1” CTE is not referenced in the SELECT statement, however still
    accomplishes the task of running an INSERT statement.
  id: totrans-1047
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，“anon_1” CTE 虽然在SELECT语句中没有被引用，但仍完成了运行INSERT语句的任务。
- en: 'Similarly in a DML-related context, using the PostgreSQL [`Insert`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Insert
    "sqlalchemy.dialects.postgresql.Insert") construct to generate an “upsert”:'
  id: totrans-1048
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，在与DML相关的上下文中，使用PostgreSQL [`Insert`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Insert
    "sqlalchemy.dialects.postgresql.Insert") 构造来生成“upsert”：
- en: '[PRE194]'
  id: totrans-1049
  prefs: []
  type: TYPE_PRE
  zh: '[PRE194]'
- en: 'The above statement renders as:'
  id: totrans-1050
  prefs: []
  type: TYPE_NORMAL
  zh: 上述语句渲染为：
- en: '[PRE195]'
  id: totrans-1051
  prefs: []
  type: TYPE_PRE
  zh: '[PRE195]'
- en: New in version 1.4.21.
  id: totrans-1052
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本1.4.21中新增。
- en: 'Parameters:'
  id: totrans-1053
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*ctes` –'
  id: totrans-1054
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*ctes` –'
- en: zero or more [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    constructs.
  id: totrans-1055
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 零个或多个[`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    构造。
- en: 'Changed in version 2.0: Multiple CTE instances are accepted'
  id: totrans-1056
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本2.0开始更改：接受多个CTE实例
- en: '`nest_here` –'
  id: totrans-1057
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nest_here` –'
- en: if True, the given CTE or CTEs will be rendered as though they specified the
    [`HasCTE.cte.nesting`](#sqlalchemy.sql.expression.HasCTE.cte.params.nesting "sqlalchemy.sql.expression.HasCTE.cte")
    flag to `True` when they were added to this [`HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE"). Assuming the given CTEs are not referenced
    in an outer-enclosing statement as well, the CTEs given should render at the level
    of this statement when this flag is given.
  id: totrans-1058
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果为True，则给定的CTE或CTEs将被渲染，就好像在将它们添加到此[`HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE")时指定了[`HasCTE.cte.nesting`](#sqlalchemy.sql.expression.HasCTE.cte.params.nesting
    "sqlalchemy.sql.expression.HasCTE.cte")标志为True。假设给定的CTEs在外部包含语句中也没有被引用，则在给出此标志时，当这些CTEs被渲染时，应在此语句级别上渲染。
- en: New in version 2.0.
  id: totrans-1059
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版本2.0中新增。
- en: See also
  id: totrans-1060
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`HasCTE.cte.nesting`](#sqlalchemy.sql.expression.HasCTE.cte.params.nesting
    "sqlalchemy.sql.expression.HasCTE.cte")'
  id: totrans-1061
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`HasCTE.cte.nesting`](#sqlalchemy.sql.expression.HasCTE.cte.params.nesting
    "sqlalchemy.sql.expression.HasCTE.cte")'
- en: '[PRE196]'
  id: totrans-1062
  prefs: []
  type: TYPE_PRE
  zh: '[PRE196]'
- en: '*inherited from the* [`SelectBase.alias()`](#sqlalchemy.sql.expression.SelectBase.alias
    "sqlalchemy.sql.expression.SelectBase.alias") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  id: totrans-1063
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")
    *的* [`SelectBase.alias()`](#sqlalchemy.sql.expression.SelectBase.alias "sqlalchemy.sql.expression.SelectBase.alias")
    *方法继承*'
- en: Return a named subquery against this [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase").
  id: totrans-1064
  prefs: []
  type: TYPE_NORMAL
  zh: 返回针对此[`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")的命名子查询。
- en: For a [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")
    (as opposed to a [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")),
    this returns a [`Subquery`](#sqlalchemy.sql.expression.Subquery "sqlalchemy.sql.expression.Subquery")
    object which behaves mostly the same as the [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") object that is used with a [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-1065
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个 [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")（而不是一个
    [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")），这将返回一个行为大部分与与
    [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    一起使用的 [`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    对象相同的 [`Subquery`](#sqlalchemy.sql.expression.Subquery "sqlalchemy.sql.expression.Subquery")
    对象。
- en: 'Changed in version 1.4: The [`SelectBase.alias()`](#sqlalchemy.sql.expression.SelectBase.alias
    "sqlalchemy.sql.expression.SelectBase.alias") method is now a synonym for the
    [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery "sqlalchemy.sql.expression.SelectBase.subquery")
    method.'
  id: totrans-1066
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4开始更改：[`SelectBase.alias()`](#sqlalchemy.sql.expression.SelectBase.alias
    "sqlalchemy.sql.expression.SelectBase.alias") 方法现在是 [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") 方法的同义词。
- en: '[PRE197]'
  id: totrans-1067
  prefs: []
  type: TYPE_PRE
  zh: '[PRE197]'
- en: '*inherited from the* [`SelectBase.as_scalar()`](#sqlalchemy.sql.expression.SelectBase.as_scalar
    "sqlalchemy.sql.expression.SelectBase.as_scalar") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  id: totrans-1068
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SelectBase.as_scalar()`](#sqlalchemy.sql.expression.SelectBase.as_scalar
    "sqlalchemy.sql.expression.SelectBase.as_scalar") *方法的* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
- en: 'Deprecated since version 1.4: The [`SelectBase.as_scalar()`](#sqlalchemy.sql.expression.SelectBase.as_scalar
    "sqlalchemy.sql.expression.SelectBase.as_scalar") method is deprecated and will
    be removed in a future release. Please refer to [`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery").'
  id: totrans-1069
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4开始弃用：[`SelectBase.as_scalar()`](#sqlalchemy.sql.expression.SelectBase.as_scalar
    "sqlalchemy.sql.expression.SelectBase.as_scalar") 方法已被弃用，并将在将来的版本中删除。请参考 [`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery")。
- en: '[PRE198]'
  id: totrans-1070
  prefs: []
  type: TYPE_PRE
  zh: '[PRE198]'
- en: '*inherited from the* [`SelectBase.c`](#sqlalchemy.sql.expression.SelectBase.c
    "sqlalchemy.sql.expression.SelectBase.c") *attribute of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  id: totrans-1071
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SelectBase.c`](#sqlalchemy.sql.expression.SelectBase.c "sqlalchemy.sql.expression.SelectBase.c")
    *属性的* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")'
- en: 'Deprecated since version 1.4: The [`SelectBase.c`](#sqlalchemy.sql.expression.SelectBase.c
    "sqlalchemy.sql.expression.SelectBase.c") and `SelectBase.columns` attributes
    are deprecated and will be removed in a future release; these attributes implicitly
    create a subquery that should be explicit. Please call [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") first in order to create a subquery,
    which then contains this attribute. To access the columns that this SELECT object
    SELECTs from, use the [`SelectBase.selected_columns`](#sqlalchemy.sql.expression.SelectBase.selected_columns
    "sqlalchemy.sql.expression.SelectBase.selected_columns") attribute.'
  id: totrans-1072
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4开始弃用：[`SelectBase.c`](#sqlalchemy.sql.expression.SelectBase.c "sqlalchemy.sql.expression.SelectBase.c")
    和 `SelectBase.columns` 属性已被弃用，并将在将来的版本中删除；这些属性隐式地创建一个应该是明确的子查询。请首先调用 [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") 来创建一个子查询，然后该子查询包含此属性。要访问此 SELECT
    对象从中选择的列，请使用 [`SelectBase.selected_columns`](#sqlalchemy.sql.expression.SelectBase.selected_columns
    "sqlalchemy.sql.expression.SelectBase.selected_columns") 属性。
- en: '[PRE199]'
  id: totrans-1073
  prefs: []
  type: TYPE_PRE
  zh: '[PRE199]'
- en: Return a new [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    construct with the given column expression added to its columns clause.
  id: totrans-1074
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的带有给定列表达式添加到其列子句的 [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    构造。
- en: 'Deprecated since version 1.4: The [`Select.column()`](#sqlalchemy.sql.expression.Select.column
    "sqlalchemy.sql.expression.Select.column") method is deprecated and will be removed
    in a future release. Please use [`Select.add_columns()`](#sqlalchemy.sql.expression.Select.add_columns
    "sqlalchemy.sql.expression.Select.add_columns")'
  id: totrans-1075
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4开始弃用：[`Select.column()`](#sqlalchemy.sql.expression.Select.column "sqlalchemy.sql.expression.Select.column")
    方法已被弃用，并将在将来的版本中删除。请使用 [`Select.add_columns()`](#sqlalchemy.sql.expression.Select.add_columns
    "sqlalchemy.sql.expression.Select.add_columns")
- en: 'E.g.:'
  id: totrans-1076
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE200]'
  id: totrans-1077
  prefs: []
  type: TYPE_PRE
  zh: '[PRE200]'
- en: See the documentation for [`Select.with_only_columns()`](#sqlalchemy.sql.expression.Select.with_only_columns
    "sqlalchemy.sql.expression.Select.with_only_columns") for guidelines on adding
    /replacing the columns of a [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    object.
  id: totrans-1078
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅 [`Select.with_only_columns()`](#sqlalchemy.sql.expression.Select.with_only_columns
    "sqlalchemy.sql.expression.Select.with_only_columns") 的文档，了解如何添加 / 替换 [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") 对象的列的指南。
- en: '[PRE201]'
  id: totrans-1079
  prefs: []
  type: TYPE_PRE
  zh: '[PRE201]'
- en: Return a [plugin-enabled](../glossary.html#term-plugin-enabled) ‘column descriptions’
    structure referring to the columns which are SELECTed by this statement.
  id: totrans-1080
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个 [启用插件](../glossary.html#term-plugin-enabled) 的‘列描述’结构，引用此语句所选的列。
- en: This attribute is generally useful when using the ORM, as an extended structure
    which includes information about mapped entities is returned. The section [Inspecting
    entities and columns from ORM-enabled SELECT and DML statements](../orm/queryguide/api.html#queryguide-inspection)
    contains more background.
  id: totrans-1081
  prefs: []
  type: TYPE_NORMAL
  zh: 这个属性通常在使用 ORM 时很有用，因为会返回一个包含有关映射实体信息的扩展结构。部分 [检查来自启用了 ORM 的 SELECT 和 DML 语句的实体和列](../orm/queryguide/api.html#queryguide-inspection)
    包含更多背景信息。
- en: 'For a Core-only statement, the structure returned by this accessor is derived
    from the same objects that are returned by the [`Select.selected_columns`](#sqlalchemy.sql.expression.Select.selected_columns
    "sqlalchemy.sql.expression.Select.selected_columns") accessor, formatted as a
    list of dictionaries which contain the keys `name`, `type` and `expr`, which indicate
    the column expressions to be selected:'
  id: totrans-1082
  prefs: []
  type: TYPE_NORMAL
  zh: 对于仅核心语句，此访问器返回的结构派生自由 [`Select.selected_columns`](#sqlalchemy.sql.expression.Select.selected_columns
    "sqlalchemy.sql.expression.Select.selected_columns") 访问器返回的相同对象，格式化为包含键 `name`、`type`
    和 `expr` 的字典列表，这些键指示要选择的列表达式：
- en: '[PRE202]'
  id: totrans-1083
  prefs: []
  type: TYPE_PRE
  zh: '[PRE202]'
- en: 'Changed in version 1.4.33: The [`Select.column_descriptions`](#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions") attribute returns a structure
    for a Core-only set of entities, not just ORM-only entities.'
  id: totrans-1084
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4.33 版中的更改：[`Select.column_descriptions`](#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions") 属性返回一个仅针对核心实体的结构，而不仅仅是
    ORM 实体。
- en: See also
  id: totrans-1085
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`UpdateBase.entity_description`](dml.html#sqlalchemy.sql.expression.UpdateBase.entity_description
    "sqlalchemy.sql.expression.UpdateBase.entity_description") - entity information
    for an [`insert()`](dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert"),
    [`update()`](dml.html#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update"),
    or [`delete()`](dml.html#sqlalchemy.sql.expression.delete "sqlalchemy.sql.expression.delete")'
  id: totrans-1086
  prefs: []
  type: TYPE_NORMAL
  zh: '[`UpdateBase.entity_description`](dml.html#sqlalchemy.sql.expression.UpdateBase.entity_description
    "sqlalchemy.sql.expression.UpdateBase.entity_description") - [`insert()`](dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert")、[`update()`](dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update") 或 [`delete()`](dml.html#sqlalchemy.sql.expression.delete
    "sqlalchemy.sql.expression.delete") 的实体信息'
- en: '[Inspecting entities and columns from ORM-enabled SELECT and DML statements](../orm/queryguide/api.html#queryguide-inspection)
    - ORM background'
  id: totrans-1087
  prefs: []
  type: TYPE_NORMAL
  zh: '[从启用了 ORM 的 SELECT 和 DML 语句中检查实体和列](../orm/queryguide/api.html#queryguide-inspection)
    - ORM 背景'
- en: '[PRE203]'
  id: totrans-1088
  prefs: []
  type: TYPE_PRE
  zh: '[PRE203]'
- en: Return the set of [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    objects implied by the columns clause of this SELECT statement.
  id: totrans-1089
  prefs: []
  type: TYPE_NORMAL
  zh: 返回由此 SELECT 语句的列子句暗示的 [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    对象集。
- en: New in version 1.4.23.
  id: totrans-1090
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4.23 中的新内容。
- en: See also
  id: totrans-1091
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Select.froms`](#sqlalchemy.sql.expression.Select.froms "sqlalchemy.sql.expression.Select.froms")
    - “final” FROM list taking the full statement into account'
  id: totrans-1092
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.froms`](#sqlalchemy.sql.expression.Select.froms "sqlalchemy.sql.expression.Select.froms")
    - 考虑了完整语句的“最终” FROM 列表'
- en: '[`Select.with_only_columns()`](#sqlalchemy.sql.expression.Select.with_only_columns
    "sqlalchemy.sql.expression.Select.with_only_columns") - makes use of this collection
    to set up a new FROM list'
  id: totrans-1093
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.with_only_columns()`](#sqlalchemy.sql.expression.Select.with_only_columns
    "sqlalchemy.sql.expression.Select.with_only_columns") - 使用此集合设置新的 FROM 列表'
- en: '[PRE204]'
  id: totrans-1094
  prefs: []
  type: TYPE_PRE
  zh: '[PRE204]'
- en: Return a new [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    which will correlate the given FROM clauses to that of an enclosing [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select").
  id: totrans-1095
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的 [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")，将给定的
    FROM 子句与封闭 [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    的 FROM 子句相关联。
- en: Calling this method turns off the [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") object’s default behavior of “auto-correlation”.
    Normally, FROM elements which appear in a [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") that encloses this one via its [WHERE clause](../glossary.html#term-WHERE-clause),
    ORDER BY, HAVING or [columns clause](../glossary.html#term-columns-clause) will
    be omitted from this [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    object’s [FROM clause](../glossary.html#term-FROM-clause). Setting an explicit
    correlation collection using the [`Select.correlate()`](#sqlalchemy.sql.expression.Select.correlate
    "sqlalchemy.sql.expression.Select.correlate") method provides a fixed list of
    FROM objects that can potentially take place in this process.
  id: totrans-1096
  prefs: []
  type: TYPE_NORMAL
  zh: 调用此方法将关闭 [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    对象的默认行为“自动关联”。通常情况下，通过其 [WHERE 子句](../glossary.html#term-WHERE-clause)、ORDER BY、HAVING
    或 [columns 子句](../glossary.html#term-columns-clause) 封闭此对象的 [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") 中出现的 FROM 元素将从此 [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") 对象的 [FROM 子句](../glossary.html#term-FROM-clause)
    中省略。使用 [`Select.correlate()`](#sqlalchemy.sql.expression.Select.correlate "sqlalchemy.sql.expression.Select.correlate")
    方法设置显式关联集合提供了一个固定的 FROM 对象列表，这些对象可能参与此过程。
- en: When [`Select.correlate()`](#sqlalchemy.sql.expression.Select.correlate "sqlalchemy.sql.expression.Select.correlate")
    is used to apply specific FROM clauses for correlation, the FROM elements become
    candidates for correlation regardless of how deeply nested this [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") object is, relative to an enclosing [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") which refers to the same FROM object. This
    is in contrast to the behavior of “auto-correlation” which only correlates to
    an immediate enclosing [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select").
    Multi-level correlation ensures that the link between enclosed and enclosing [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") is always via at least one WHERE/ORDER BY/HAVING/columns
    clause in order for correlation to take place.
  id: totrans-1097
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 [`Select.correlate()`](#sqlalchemy.sql.expression.Select.correlate "sqlalchemy.sql.expression.Select.correlate")
    应用特定的 FROM 子句进行关联时，无论此 [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    对象相对于封闭的引用相对于相同的 FROM 对象的外层 [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    嵌套多深，FROM 元素都会成为关联的候选对象。这与“自动关联”的行为形成对比，后者仅与一个直接封闭的 [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") 相关联。多级关联确保封闭和封闭的 [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") 之间的链接始终通过至少一个 WHERE/ORDER BY/HAVING/columns
    子句，以便进行关联。
- en: If `None` is passed, the [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    object will correlate none of its FROM entries, and all will render unconditionally
    in the local FROM clause.
  id: totrans-1098
  prefs: []
  type: TYPE_NORMAL
  zh: 如果传入 `None`，[`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    对象将不会关联其任何 FROM 条目，所有条目都将无条件地在本地 FROM 子句中渲染。
- en: 'Parameters:'
  id: totrans-1099
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '***fromclauses** – one or more [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") or other FROM-compatible construct such
    as an ORM mapped entity to become part of the correlate collection; alternatively
    pass a single value `None` to remove all existing correlations.'
  id: totrans-1100
  prefs: []
  type: TYPE_NORMAL
  zh: '***fromclauses** – 一个或多个 [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") 或其他与 FROM 兼容的构造，如 ORM 映射实体，以成为关联集合的一部分；或者传递单个值
    `None` 来删除所有现有的关联。'
- en: See also
  id: totrans-1101
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Select.correlate_except()`](#sqlalchemy.sql.expression.Select.correlate_except
    "sqlalchemy.sql.expression.Select.correlate_except")'
  id: totrans-1102
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.correlate_except()`](#sqlalchemy.sql.expression.Select.correlate_except
    "sqlalchemy.sql.expression.Select.correlate_except")'
- en: '[Scalar and Correlated Subqueries](../tutorial/data_select.html#tutorial-scalar-subquery)'
  id: totrans-1103
  prefs: []
  type: TYPE_NORMAL
  zh: '[标量和关联子查询](../tutorial/data_select.html#tutorial-scalar-subquery)'
- en: '[PRE205]'
  id: totrans-1104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE205]'
- en: Return a new [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    which will omit the given FROM clauses from the auto-correlation process.
  id: totrans-1105
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的 [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")，它将从自动关联过程中省略给定的
    FROM 子句。
- en: Calling [`Select.correlate_except()`](#sqlalchemy.sql.expression.Select.correlate_except
    "sqlalchemy.sql.expression.Select.correlate_except") turns off the [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") object’s default behavior of “auto-correlation”
    for the given FROM elements. An element specified here will unconditionally appear
    in the FROM list, while all other FROM elements remain subject to normal auto-correlation
    behaviors.
  id: totrans-1106
  prefs: []
  type: TYPE_NORMAL
  zh: 调用 [`Select.correlate_except()`](#sqlalchemy.sql.expression.Select.correlate_except
    "sqlalchemy.sql.expression.Select.correlate_except") 会关闭给定FROM元素的[`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select")对象的默认“自动关联”行为。在此指定的元素将无条件出现在FROM列表中，而所有其他FROM元素仍然受到正常的自动关联行为的影响。
- en: If `None` is passed, or no arguments are passed, the [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") object will correlate all of its FROM entries.
  id: totrans-1107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果传递了`None`，或者没有传递参数，则[`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")对象将关联其所有FROM条目。
- en: 'Parameters:'
  id: totrans-1108
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '***fromclauses** – a list of one or more [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") constructs, or other compatible constructs
    (i.e. ORM-mapped classes) to become part of the correlate-exception collection.'
  id: totrans-1109
  prefs: []
  type: TYPE_NORMAL
  zh: '***fromclauses** – 一个或多个[`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")构造的列表，或其他兼容的构造（即ORM映射的类），成为关联例外集合的一部分。'
- en: See also
  id: totrans-1110
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Select.correlate()`](#sqlalchemy.sql.expression.Select.correlate "sqlalchemy.sql.expression.Select.correlate")'
  id: totrans-1111
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.correlate()`](#sqlalchemy.sql.expression.Select.correlate "sqlalchemy.sql.expression.Select.correlate")'
- en: '[Scalar and Correlated Subqueries](../tutorial/data_select.html#tutorial-scalar-subquery)'
  id: totrans-1112
  prefs: []
  type: TYPE_NORMAL
  zh: '[标量和相关子查询](../tutorial/data_select.html#tutorial-scalar-subquery)'
- en: '[PRE206]'
  id: totrans-1113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE206]'
- en: '*inherited from the* [`Selectable.corresponding_column()`](#sqlalchemy.sql.expression.Selectable.corresponding_column
    "sqlalchemy.sql.expression.Selectable.corresponding_column") *method of* [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
  id: totrans-1114
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Selectable.corresponding_column()`](#sqlalchemy.sql.expression.Selectable.corresponding_column
    "sqlalchemy.sql.expression.Selectable.corresponding_column") *方法的* [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
- en: Given a [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"), return the exported [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") object from the [`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") collection of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable") which corresponds to that original [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") via a common ancestor column.
  id: totrans-1115
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")，返回此[`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")的[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns")集合中对应于该原始[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")的导出[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")对象，通过共同祖先列进行对应。
- en: 'Parameters:'
  id: totrans-1116
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`column` – the target [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") to be matched.'
  id: totrans-1117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`column` – 要匹配的目标[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")。'
- en: '`require_embedded` – only return corresponding columns for the given [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"), if the given [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") is actually present within a sub-element
    of this [`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable").
    Normally the column will match if it merely shares a common ancestor with one
    of the exported columns of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable").'
  id: totrans-1118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`require_embedded` – 仅当给定的[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")实际存在于此[`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")的子元素中时，才返回相应列，通常情况下，如果该列仅与此[`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")的导出列之一共享共同祖先，则列会匹配。'
- en: See also
  id: totrans-1119
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") - the [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") that is used for the operation.'
  id: totrans-1120
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") - 用于操作的[`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")。'
- en: '[`ColumnCollection.corresponding_column()`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection.corresponding_column
    "sqlalchemy.sql.expression.ColumnCollection.corresponding_column") - implementation
    method.'
  id: totrans-1121
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnCollection.corresponding_column()`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection.corresponding_column
    "sqlalchemy.sql.expression.ColumnCollection.corresponding_column") - 实现方法。'
- en: '[PRE207]'
  id: totrans-1122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE207]'
- en: '*inherited from the* [`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte
    "sqlalchemy.sql.expression.HasCTE.cte") *method of* [`HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE")'
  id: totrans-1123
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte "sqlalchemy.sql.expression.HasCTE.cte")
    *方法继承而来* [`HasCTE`](#sqlalchemy.sql.expression.HasCTE "sqlalchemy.sql.expression.HasCTE")'
- en: Return a new [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE"),
    or Common Table Expression instance.
  id: totrans-1124
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的[`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")或公共表达式实例。
- en: Common table expressions are a SQL standard whereby SELECT statements can draw
    upon secondary statements specified along with the primary statement, using a
    clause called “WITH”. Special semantics regarding UNION can also be employed to
    allow “recursive” queries, where a SELECT statement can draw upon the set of rows
    that have previously been selected.
  id: totrans-1125
  prefs: []
  type: TYPE_NORMAL
  zh: 公共表达式是一种SQL标准，其中SELECT语句可以在主语句的基础上绘制出与主语句一起指定的辅助语句，使用一个叫做“WITH”的子句。还可以使用特殊的语义关于UNION来允许“递归”查询，其中一个SELECT语句可以绘制出先前已选择的行集。
- en: CTEs can also be applied to DML constructs UPDATE, INSERT and DELETE on some
    databases, both as a source of CTE rows when combined with RETURNING, as well
    as a consumer of CTE rows.
  id: totrans-1126
  prefs: []
  type: TYPE_NORMAL
  zh: CTE也可以应用于某些数据库上的DML构造UPDATE、INSERT和DELETE，既作为与RETURNING结合使用时CTE行的来源，也作为CTE行的消费者。
- en: SQLAlchemy detects [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    objects, which are treated similarly to [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") objects, as special elements to be delivered
    to the FROM clause of the statement as well as to a WITH clause at the top of
    the statement.
  id: totrans-1127
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy检测到[`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")对象，这些对象与[`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias")对象类似，作为要传递到语句的FROM子句以及语句顶部的WITH子句的特殊元素。
- en: For special prefixes such as PostgreSQL “MATERIALIZED” and “NOT MATERIALIZED”,
    the `CTE.prefix_with()` method may be used to establish these.
  id: totrans-1128
  prefs: []
  type: TYPE_NORMAL
  zh: 对于诸如PostgreSQL的“MATERIALIZED”和“NOT MATERIALIZED”等特殊前缀，可以使用`CTE.prefix_with()`方法来建立这些。
- en: 'Changed in version 1.3.13: Added support for prefixes. In particular - MATERIALIZED
    and NOT MATERIALIZED.'
  id: totrans-1129
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本1.3.13中更改：添加了对前缀的支持。特别是- MATERIALIZED和NOT MATERIALIZED。
- en: 'Parameters:'
  id: totrans-1130
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`name` – name given to the common table expression. Like [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias"), the name can be left as `None`
    in which case an anonymous symbol will be used at query compile time.'
  id: totrans-1131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 给公共表达式的名称。与[`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias")类似，如果将名称留空，则在查询编译时将使用匿名符号。'
- en: '`recursive` – if `True`, will render `WITH RECURSIVE`. A recursive common table
    expression is intended to be used in conjunction with UNION ALL in order to derive
    rows from those already selected.'
  id: totrans-1132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`recursive` – 如果设置为`True`，将渲染`WITH RECURSIVE`。递归公共表达式旨在与UNION ALL结合使用，以便从已选择的行中派生行。'
- en: '`nesting` –'
  id: totrans-1133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nesting` –'
- en: if `True`, will render the CTE locally to the statement in which it is referenced.
    For more complex scenarios, the [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") method using the [`HasCTE.add_cte.nest_here`](#sqlalchemy.sql.expression.HasCTE.add_cte.params.nest_here
    "sqlalchemy.sql.expression.HasCTE.add_cte") parameter may also be used to more
    carefully control the exact placement of a particular CTE.
  id: totrans-1134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果设置为`True`，将在引用它的语句中本地渲染CTE。对于更复杂的场景，也可以使用[`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte")方法，使用[`HasCTE.add_cte.nest_here`](#sqlalchemy.sql.expression.HasCTE.add_cte.params.nest_here
    "sqlalchemy.sql.expression.HasCTE.add_cte")参数更精细地控制特定CTE的确切放置位置。
- en: New in version 1.4.24.
  id: totrans-1135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新功能在版本1.4.24中添加。
- en: See also
  id: totrans-1136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte "sqlalchemy.sql.expression.HasCTE.add_cte")'
  id: totrans-1137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte "sqlalchemy.sql.expression.HasCTE.add_cte")'
- en: The following examples include two from PostgreSQL’s documentation at [https://www.postgresql.org/docs/current/static/queries-with.html](https://www.postgresql.org/docs/current/static/queries-with.html),
    as well as additional examples.
  id: totrans-1138
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例包括两个来自PostgreSQL文档的示例[https://www.postgresql.org/docs/current/static/queries-with.html](https://www.postgresql.org/docs/current/static/queries-with.html)，以及其他示例。
- en: 'Example 1, non recursive:'
  id: totrans-1139
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 1，非递归：
- en: '[PRE208]'
  id: totrans-1140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE208]'
- en: 'Example 2, WITH RECURSIVE:'
  id: totrans-1141
  prefs: []
  type: TYPE_NORMAL
  zh: 示例2，WITH RECURSIVE：
- en: '[PRE209]'
  id: totrans-1142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE209]'
- en: 'Example 3, an upsert using UPDATE and INSERT with CTEs:'
  id: totrans-1143
  prefs: []
  type: TYPE_NORMAL
  zh: 示例3，使用UPDATE和INSERT进行upsert与CTE：
- en: '[PRE210]'
  id: totrans-1144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE210]'
- en: 'Example 4, Nesting CTE (SQLAlchemy 1.4.24 and above):'
  id: totrans-1145
  prefs: []
  type: TYPE_NORMAL
  zh: 示例4，嵌套CTE（SQLAlchemy 1.4.24及以上）：
- en: '[PRE211]'
  id: totrans-1146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE211]'
- en: 'The above query will render the second CTE nested inside the first, shown with
    inline parameters below as:'
  id: totrans-1147
  prefs: []
  type: TYPE_NORMAL
  zh: 上述查询将呈现第二个CTE嵌套在第一个内部，如下所示：
- en: '[PRE212]'
  id: totrans-1148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE212]'
- en: 'The same CTE can be set up using the [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") method as follows (SQLAlchemy 2.0
    and above):'
  id: totrans-1149
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用[`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte "sqlalchemy.sql.expression.HasCTE.add_cte")方法设置相同的CTE，如下所示（SQLAlchemy
    2.0及以上）：
- en: '[PRE213]'
  id: totrans-1150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE213]'
- en: 'Example 5, Non-Linear CTE (SQLAlchemy 1.4.28 and above):'
  id: totrans-1151
  prefs: []
  type: TYPE_NORMAL
  zh: 示例5，非线性CTE（SQLAlchemy 1.4.28及以上）：
- en: '[PRE214]'
  id: totrans-1152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE214]'
- en: 'The above query will render 2 UNIONs inside the recursive CTE:'
  id: totrans-1153
  prefs: []
  type: TYPE_NORMAL
  zh: 上述查询将在递归CTE内呈现2个UNION：
- en: '[PRE215]'
  id: totrans-1154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE215]'
- en: See also
  id: totrans-1155
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Query.cte()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.cte "sqlalchemy.orm.Query.cte")
    - ORM version of [`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte "sqlalchemy.sql.expression.HasCTE.cte").'
  id: totrans-1156
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.cte()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.cte "sqlalchemy.orm.Query.cte")
    - [`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte "sqlalchemy.sql.expression.HasCTE")的ORM版本。'
- en: '[PRE216]'
  id: totrans-1157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE216]'
- en: Return a new [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    construct which will apply DISTINCT to the SELECT statement overall.
  id: totrans-1158
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的[`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")构造，该构造将对整个SELECT语句应用DISTINCT。
- en: 'E.g.:'
  id: totrans-1159
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE217]'
  id: totrans-1160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE217]'
- en: 'The above would produce an statement resembling:'
  id: totrans-1161
  prefs: []
  type: TYPE_NORMAL
  zh: 上述将产生类似于的语句：
- en: '[PRE218]'
  id: totrans-1162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE218]'
- en: The method also accepts an `*expr` parameter which produces the PostgreSQL dialect-specific
    `DISTINCT ON` expression. Using this parameter on other backends which don’t support
    this syntax will raise an error.
  id: totrans-1163
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法还接受一个`*expr`参数，该参数生成PostgreSQL特定的`DISTINCT ON`表达式。在不支持此语法的���他后端上使用此参数将引发错误。
- en: 'Parameters:'
  id: totrans-1164
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '***expr** –'
  id: totrans-1165
  prefs: []
  type: TYPE_NORMAL
  zh: '***expr** –'
- en: optional column expressions. When present, the PostgreSQL dialect will render
    a `DISTINCT ON (<expressions>)` construct. A deprecation warning and/or [`CompileError`](exceptions.html#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError") will be raised on other backends.
  id: totrans-1166
  prefs: []
  type: TYPE_NORMAL
  zh: 可选的列表达式。当存在时，PostgreSQL方言将呈现`DISTINCT ON (<expressions>)`构造。在其他后端上将引发弃用警告和/或[`CompileError`](exceptions.html#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError")。
- en: 'Deprecated since version 1.4: Using *expr in other dialects is deprecated and
    will raise [`CompileError`](exceptions.html#sqlalchemy.exc.CompileError "sqlalchemy.exc.CompileError")
    in a future version.'
  id: totrans-1167
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始弃用：在其他方言中使用*expr已弃用，并将在将来的版本中引发[`CompileError`](exceptions.html#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError")。
- en: '[PRE219]'
  id: totrans-1168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE219]'
- en: Return a SQL `EXCEPT` of this select() construct against the given selectable
    provided as positional arguments.
  id: totrans-1169
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此`select()`构造与提供的可选参数中的给定可选择的SQL`EXCEPT`。
- en: 'Parameters:'
  id: totrans-1170
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '***other** –'
  id: totrans-1171
  prefs: []
  type: TYPE_NORMAL
  zh: '***other** –'
- en: one or more elements with which to create a UNION.
  id: totrans-1172
  prefs: []
  type: TYPE_NORMAL
  zh: 一个或多个用于创建UNION的元素。
- en: 'Changed in version 1.4.28: multiple elements are now accepted.'
  id: totrans-1173
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4.28开始更改：现在接受多个元素。
- en: '[PRE220]'
  id: totrans-1174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE220]'
- en: Return a SQL `EXCEPT ALL` of this select() construct against the given selectables
    provided as positional arguments.
  id: totrans-1175
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此`select()`构造与提供的可选参数中的给定可选择的SQL`EXCEPT ALL`。
- en: 'Parameters:'
  id: totrans-1176
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '***other** –'
  id: totrans-1177
  prefs: []
  type: TYPE_NORMAL
  zh: '***other** –'
- en: one or more elements with which to create a UNION.
  id: totrans-1178
  prefs: []
  type: TYPE_NORMAL
  zh: 一个或多个用于创建UNION的元素。
- en: 'Changed in version 1.4.28: multiple elements are now accepted.'
  id: totrans-1179
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4.28开始更改：现在接受多个元素。
- en: '[PRE221]'
  id: totrans-1180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE221]'
- en: '*inherited from the* [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") *method of* [`Executable`](#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")'
  id: totrans-1181
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") *方法的* [`Executable`](#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")'
- en: Set non-SQL options for the statement which take effect during execution.
  id: totrans-1182
  prefs: []
  type: TYPE_NORMAL
  zh: 为在执行期间生效的语句设置非SQL选项。
- en: Execution options can be set at many scopes, including per-statement, per-connection,
    or per execution, using methods such as [`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") and parameters which accept
    a dictionary of options such as [`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute") and [`Session.execute.execution_options`](../orm/session_api.html#sqlalchemy.orm.Session.execute.params.execution_options
    "sqlalchemy.orm.Session.execute").
  id: totrans-1183
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在许多范围内设置执行选项，包括每个语句、每个连接或每次执行，使用诸如[`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")和接受选项字典的参数的方法，例如[`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute")和[`Session.execute.execution_options`](../orm/session_api.html#sqlalchemy.orm.Session.execute.params.execution_options
    "sqlalchemy.orm.Session.execute")。
- en: The primary characteristic of an execution option, as opposed to other kinds
    of options such as ORM loader options, is that **execution options never affect
    the compiled SQL of a query, only things that affect how the SQL statement itself
    is invoked or how results are fetched**. That is, execution options are not part
    of what’s accommodated by SQL compilation nor are they considered part of the
    cached state of a statement.
  id: totrans-1184
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他类型的选项（如ORM加载程序选项）相比，执行选项的主要特征是**执行选项从不影响查询的编译SQL，只影响SQL语句本身如何调用或结果如何获取**。也就是说，执行选项不是SQL编译所能容纳的内容，它们也不被认为是语句的缓存状态的一部分。
- en: 'The [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") method is [generative](../glossary.html#term-generative),
    as is the case for the method as applied to the [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") and [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") objects, which means when the method is called, a copy
    of the object is returned, which applies the given parameters to that new copy,
    but leaves the original unchanged:'
  id: totrans-1185
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") 方法是[生成的](../glossary.html#term-generative)，就像应用于[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")和[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象的方法一样，这意味着当调用该方法时，将返回对象的副本，该副本应用给定的参数，但原始对象保持不变：'
- en: '[PRE222]'
  id: totrans-1186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE222]'
- en: An exception to this behavior is the [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object, where the [`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") method is explicitly **not**
    generative.
  id: totrans-1187
  prefs: []
  type: TYPE_NORMAL
  zh: 这种行为的一个例外是[`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")对象，在这种情况下，[`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") 方法明确**不**是生成的。
- en: 'The kinds of options that may be passed to [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") and other related methods
    and parameter dictionaries include parameters that are explicitly consumed by
    SQLAlchemy Core or ORM, as well as arbitrary keyword arguments not defined by
    SQLAlchemy, which means the methods and/or parameter dictionaries may be used
    for user-defined parameters that interact with custom code, which may access the
    parameters using methods such as [`Executable.get_execution_options()`](#sqlalchemy.sql.expression.Executable.get_execution_options
    "sqlalchemy.sql.expression.Executable.get_execution_options") and [`Connection.get_execution_options()`](connections.html#sqlalchemy.engine.Connection.get_execution_options
    "sqlalchemy.engine.Connection.get_execution_options"), or within selected event
    hooks using a dedicated `execution_options` event parameter such as [`ConnectionEvents.before_execute.execution_options`](events.html#sqlalchemy.events.ConnectionEvents.before_execute.params.execution_options
    "sqlalchemy.events.ConnectionEvents.before_execute") or [`ORMExecuteState.execution_options`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.execution_options
    "sqlalchemy.orm.ORMExecuteState.execution_options"), e.g.:'
  id: totrans-1188
  prefs: []
  type: TYPE_NORMAL
  zh: 可以传递给[`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")和其他相关方法和参数字典的选项类型包括被SQLAlchemy
    Core或ORM明确消耗的参数，以及SQLAlchemy未定义的任意关键字参数，这意味着这些方法和/或参数字典可用于与自定义代码交互的用户定义参数，可以使用诸如[`Executable.get_execution_options()`](#sqlalchemy.sql.expression.Executable.get_execution_options
    "sqlalchemy.sql.expression.Executable.get_execution_options")和[`Connection.get_execution_options()`](connections.html#sqlalchemy.engine.Connection.get_execution_options
    "sqlalchemy.engine.Connection.get_execution_options")等方法访问参数，或者在选定的事件钩子中使用专用的`execution_options`事件参数，例如[`ConnectionEvents.before_execute.execution_options`](events.html#sqlalchemy.events.ConnectionEvents.before_execute.params.execution_options
    "sqlalchemy.events.ConnectionEvents.before_execute")或[`ORMExecuteState.execution_options`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.execution_options
    "sqlalchemy.orm.ORMExecuteState.execution_options")，例如：
- en: '[PRE223]'
  id: totrans-1189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE223]'
- en: 'Within the scope of options that are explicitly recognized by SQLAlchemy, most
    apply to specific classes of objects and not others. The most common execution
    options include:'
  id: totrans-1190
  prefs: []
  type: TYPE_NORMAL
  zh: 在SQLAlchemy明确识别的选项范围内，大多数适用于特定类别的对象而不是其他对象。最常见的执行选项包括：
- en: '[`Connection.execution_options.isolation_level`](connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") - sets the isolation level for
    a connection or a class of connections via an [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"). This option is accepted only by [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") or [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine").'
  id: totrans-1191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.isolation_level`](connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") - 通过[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")为连接或一类连接设置隔离级别。此选项仅被[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")或[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")接受。'
- en: '[`Connection.execution_options.stream_results`](connections.html#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") - indicates results should be
    fetched using a server side cursor; this option is accepted by [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"), by the [`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute") parameter on [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute"), and additionally by [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") on a SQL statement object,
    as well as by ORM constructs like [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute").'
  id: totrans-1192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.stream_results`](connections.html#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") - 表示结果应该使用服务器端游标获取；此选项可被[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")、[`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute")参数上的[`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")以及[`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")在SQL语句对象上接受，同样也被ORM构造如[`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")接受。'
- en: '[`Connection.execution_options.compiled_cache`](connections.html#sqlalchemy.engine.Connection.execution_options.params.compiled_cache
    "sqlalchemy.engine.Connection.execution_options") - indicates a dictionary that
    will serve as the [SQL compilation cache](connections.html#sql-caching) for a
    [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    or [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine"),
    as well as for ORM methods like [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute"). Can be passed as `None` to disable caching
    for statements. This option is not accepted by [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") as it is inadvisable
    to carry along a compilation cache within a statement object.'
  id: totrans-1193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.compiled_cache`](connections.html#sqlalchemy.engine.Connection.execution_options.params.compiled_cache
    "sqlalchemy.engine.Connection.execution_options") - 表示将作为[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")或[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")的[SQL编译缓存](connections.html#sql-caching)的字典，同样也适用于ORM方法如[`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")。可以传递`None`来禁用语句的缓存。此选项不被[`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")接受，因为在语句对象中携带编译缓存是不明智的。'
- en: '[`Connection.execution_options.schema_translate_map`](connections.html#sqlalchemy.engine.Connection.execution_options.params.schema_translate_map
    "sqlalchemy.engine.Connection.execution_options") - a mapping of schema names
    used by the [Schema Translate Map](connections.html#schema-translating) feature,
    accepted by [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine"),
    [`Executable`](#sqlalchemy.sql.expression.Executable "sqlalchemy.sql.expression.Executable"),
    as well as by ORM constructs like [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute").'
  id: totrans-1194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.schema_translate_map`](connections.html#sqlalchemy.engine.Connection.execution_options.params.schema_translate_map
    "sqlalchemy.engine.Connection.execution_options") - 由[模式翻译映射](connections.html#schema-translating)功能使用的模式名称映射，被[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")、[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")、[`Executable`](#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")接受，同样也被ORM构造如[`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")接受。'
- en: See also
  id: totrans-1195
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")'
  id: totrans-1196
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")'
- en: '[`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute")'
  id: totrans-1197
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute")'
- en: '[`Session.execute.execution_options`](../orm/session_api.html#sqlalchemy.orm.Session.execute.params.execution_options
    "sqlalchemy.orm.Session.execute")'
  id: totrans-1198
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.execute.execution_options`](../orm/session_api.html#sqlalchemy.orm.Session.execute.params.execution_options
    "sqlalchemy.orm.Session.execute")'
- en: '[ORM Execution Options](../orm/queryguide/api.html#orm-queryguide-execution-options)
    - documentation on all ORM-specific execution options'
  id: totrans-1199
  prefs: []
  type: TYPE_NORMAL
  zh: '[ORM执行选项](../orm/queryguide/api.html#orm-queryguide-execution-options) - 所有ORM特定执行选项的文档'
- en: '[PRE224]'
  id: totrans-1200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE224]'
- en: '*inherited from the* [`SelectBase.exists()`](#sqlalchemy.sql.expression.SelectBase.exists
    "sqlalchemy.sql.expression.SelectBase.exists") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  id: totrans-1201
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SelectBase.exists()`](#sqlalchemy.sql.expression.SelectBase.exists
    "sqlalchemy.sql.expression.SelectBase.exists") *方法的* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
- en: Return an [`Exists`](#sqlalchemy.sql.expression.Exists "sqlalchemy.sql.expression.Exists")
    representation of this selectable, which can be used as a column expression.
  id: totrans-1202
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此可选择项的[`Exists`](#sqlalchemy.sql.expression.Exists "sqlalchemy.sql.expression.Exists")表示，可用作列表达式。
- en: The returned object is an instance of [`Exists`](#sqlalchemy.sql.expression.Exists
    "sqlalchemy.sql.expression.Exists").
  id: totrans-1203
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的对象是[`Exists`](#sqlalchemy.sql.expression.Exists "sqlalchemy.sql.expression.Exists")的一个实例。
- en: See also
  id: totrans-1204
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`exists()`](#sqlalchemy.sql.expression.exists "sqlalchemy.sql.expression.exists")'
  id: totrans-1205
  prefs: []
  type: TYPE_NORMAL
  zh: '[`exists()`](#sqlalchemy.sql.expression.exists "sqlalchemy.sql.expression.exists")'
- en: '[EXISTS subqueries](../tutorial/data_select.html#tutorial-exists) - in the
    [2.0 style](../glossary.html#term-2.0-style) tutorial.'
  id: totrans-1206
  prefs: []
  type: TYPE_NORMAL
  zh: '[EXISTS子查询](../tutorial/data_select.html#tutorial-exists) - 在[2.0风格](../glossary.html#term-2.0-style)教程中。'
- en: New in version 1.4.
  id: totrans-1207
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4中新增。
- en: '[PRE225]'
  id: totrans-1208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE225]'
- en: '*inherited from the* [`SelectBase.exported_columns`](#sqlalchemy.sql.expression.SelectBase.exported_columns
    "sqlalchemy.sql.expression.SelectBase.exported_columns") *attribute of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  id: totrans-1209
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SelectBase.exported_columns`](#sqlalchemy.sql.expression.SelectBase.exported_columns
    "sqlalchemy.sql.expression.SelectBase.exported_columns") *属性的* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
- en: A [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") that represents the “exported” columns
    of this [`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable"),
    not including [`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause") constructs.
  id: totrans-1210
  prefs: []
  type: TYPE_NORMAL
  zh: 代表此[`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable")的“导出”列的[`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")，不包括[`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause")构造。
- en: The “exported” columns for a [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase") object are synonymous with the [`SelectBase.selected_columns`](#sqlalchemy.sql.expression.SelectBase.selected_columns
    "sqlalchemy.sql.expression.SelectBase.selected_columns") collection.
  id: totrans-1211
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")对象的“导出”列与[`SelectBase.selected_columns`](#sqlalchemy.sql.expression.SelectBase.selected_columns
    "sqlalchemy.sql.expression.SelectBase.selected_columns")集合是同义词。'
- en: New in version 1.4.
  id: totrans-1212
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4中新增。
- en: See also
  id: totrans-1213
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Select.exported_columns`](#sqlalchemy.sql.expression.Select.exported_columns
    "sqlalchemy.sql.expression.Select.exported_columns")'
  id: totrans-1214
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.exported_columns`](#sqlalchemy.sql.expression.Select.exported_columns
    "sqlalchemy.sql.expression.Select.exported_columns")'
- en: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns")'
  id: totrans-1215
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns")'
- en: '[`FromClause.exported_columns`](#sqlalchemy.sql.expression.FromClause.exported_columns
    "sqlalchemy.sql.expression.FromClause.exported_columns")'
  id: totrans-1216
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FromClause.exported_columns`](#sqlalchemy.sql.expression.FromClause.exported_columns
    "sqlalchemy.sql.expression.FromClause.exported_columns")'
- en: '[PRE226]'
  id: totrans-1217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE226]'
- en: '*inherited from the* [`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  id: totrans-1218
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch") *方法的* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
- en: Return a new selectable with the given FETCH FIRST criterion applied.
  id: totrans-1219
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个应用了给定FETCH FIRST标准的新可选择项。
- en: This is a numeric value which usually renders as `FETCH {FIRST | NEXT} [ count
    ] {ROW | ROWS} {ONLY | WITH TIES}` expression in the resulting select. This functionality
    is is currently implemented for Oracle, PostgreSQL, MSSQL.
  id: totrans-1220
  prefs: []
  type: TYPE_NORMAL
  zh: 此为数值，通常在生成的选择中以 `FETCH {FIRST | NEXT} [ count ] {ROW | ROWS} {ONLY | WITH TIES}`
    表达式的形式呈现。此功能目前已实现在 Oracle、PostgreSQL 和 MSSQL 中。
- en: Use [`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset") to specify the offset.
  id: totrans-1221
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset") 指定偏移量。
- en: Note
  id: totrans-1222
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The [`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch") method will replace any clause
    applied with [`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit").
  id: totrans-1223
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch") 方法将替换任何使用 [`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit") 应用的子句。'
- en: New in version 1.4.
  id: totrans-1224
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4 中新增。
- en: 'Parameters:'
  id: totrans-1225
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`count` – an integer COUNT parameter, or a SQL expression that provides an
    integer result. When `percent=True` this will represent the percentage of rows
    to return, not the absolute value. Pass `None` to reset it.'
  id: totrans-1226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`count` – 整数 COUNT 参数，或提供整数结果的 SQL 表达式。当 `percent=True` 时，这将表示要返回的行的百分比，而不是绝对值。传递
    `None` 以重置它。'
- en: '`with_ties` – When `True`, the WITH TIES option is used to return any additional
    rows that tie for the last place in the result set according to the `ORDER BY`
    clause. The `ORDER BY` may be mandatory in this case. Defaults to `False`'
  id: totrans-1227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`with_ties` – 当为 `True` 时，使用 WITH TIES 选项以返回与 `ORDER BY` 子句中的最后一个位置并列的任何附加行。在这种情况下，`ORDER
    BY` 可能是强制性的。默认为 `False`'
- en: '`percent` – When `True`, `count` represents the percentage of the total number
    of selected rows to return. Defaults to `False`'
  id: totrans-1228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`percent` – 当为 `True` 时，`count` 表示要返回的所选行的百分比。默认为 `False`'
- en: See also
  id: totrans-1229
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit")'
  id: totrans-1230
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit")'
- en: '[`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset")'
  id: totrans-1231
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset")'
- en: '[PRE227]'
  id: totrans-1232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE227]'
- en: A synonym for the [`Select.where()`](#sqlalchemy.sql.expression.Select.where
    "sqlalchemy.sql.expression.Select.where") method.
  id: totrans-1233
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.where()`](#sqlalchemy.sql.expression.Select.where "sqlalchemy.sql.expression.Select.where")
    方法的同义词。'
- en: '[PRE228]'
  id: totrans-1234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE228]'
- en: apply the given filtering criterion as a WHERE clause to this select.
  id: totrans-1235
  prefs: []
  type: TYPE_NORMAL
  zh: 将给定的过滤条件作为 WHERE 子句应用于此选择。
- en: '[PRE229]'
  id: totrans-1236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE229]'
- en: Apply the columns which this [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    would select onto another statement.
  id: totrans-1237
  prefs: []
  type: TYPE_NORMAL
  zh: 将此 [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    选择的列应用于另一个语句。
- en: This operation is [plugin-specific](../glossary.html#term-plugin-specific) and
    will raise a not supported exception if this [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") does not select from plugin-enabled entities.
  id: totrans-1238
  prefs: []
  type: TYPE_NORMAL
  zh: 此操作是[特定于插件](../glossary.html#term-plugin-specific)的，如果此 [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") 不选择来自启用插件的实体，则会引发不支持的异常。
- en: The statement is typically either a [`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") or [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct, and should return the set of columns
    appropriate to the entities represented by this [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select").
  id: totrans-1239
  prefs: []
  type: TYPE_NORMAL
  zh: 语句通常是 [`text()`](sqlelement.html#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")
    或 [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    构造，并应返回适用于由此 [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    表示的实体的列集。
- en: See also
  id: totrans-1240
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Getting ORM Results from Textual Statements](../orm/queryguide/select.html#orm-queryguide-selecting-text)
    - usage examples in the ORM Querying Guide'
  id: totrans-1241
  prefs: []
  type: TYPE_NORMAL
  zh: '[从文本语句获取 ORM 结果](../orm/queryguide/select.html#orm-queryguide-selecting-text)
    - ORM 查询指南中的使用示例'
- en: '[PRE230]'
  id: totrans-1242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE230]'
- en: Return the displayed list of [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") elements.
  id: totrans-1243
  prefs: []
  type: TYPE_NORMAL
  zh: 返回显示的 [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    元素列表。
- en: 'Deprecated since version 1.4.23: The [`Select.froms`](#sqlalchemy.sql.expression.Select.froms
    "sqlalchemy.sql.expression.Select.froms") attribute is moved to the [`Select.get_final_froms()`](#sqlalchemy.sql.expression.Select.get_final_froms
    "sqlalchemy.sql.expression.Select.get_final_froms") method.'
  id: totrans-1244
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.4.23 起已弃用：[`Select.froms`](#sqlalchemy.sql.expression.Select.froms "sqlalchemy.sql.expression.Select.froms")
    属性已移至 [`Select.get_final_froms()`](#sqlalchemy.sql.expression.Select.get_final_froms
    "sqlalchemy.sql.expression.Select.get_final_froms") 方法。
- en: '[PRE231]'
  id: totrans-1245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE231]'
- en: Return immediate child `HasTraverseInternals` elements of this `HasTraverseInternals`.
  id: totrans-1246
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此 `HasTraverseInternals` 的直接子元素。
- en: This is used for visit traversal.
  id: totrans-1247
  prefs: []
  type: TYPE_NORMAL
  zh: 这用于访问遍历。
- en: '**kw may contain flags that change the collection that is returned, for example
    to return a subset of items in order to cut down on larger traversals, or to return
    child items from a different context (such as schema-level collections instead
    of clause-level).'
  id: totrans-1248
  prefs: []
  type: TYPE_NORMAL
  zh: '**kw 可能包含改变返回集合的标志，例如返回一部分项目以减少更大的遍历，或者返回不同上下文的子项目（例如模式级别的集合而不是从句级别的集合）。'
- en: '[PRE232]'
  id: totrans-1249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE232]'
- en: '*inherited from the* [`Executable.get_execution_options()`](#sqlalchemy.sql.expression.Executable.get_execution_options
    "sqlalchemy.sql.expression.Executable.get_execution_options") *method of* [`Executable`](#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")'
  id: totrans-1250
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Executable`](#sqlalchemy.sql.expression.Executable "sqlalchemy.sql.expression.Executable")
    *的* [`Executable.get_execution_options()`](#sqlalchemy.sql.expression.Executable.get_execution_options
    "sqlalchemy.sql.expression.Executable.get_execution_options") *方法*'
- en: Get the non-SQL options which will take effect during execution.
  id: totrans-1251
  prefs: []
  type: TYPE_NORMAL
  zh: 获取在执行期间生效的非 SQL 选项。
- en: New in version 1.3.
  id: totrans-1252
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.3 起新增。
- en: See also
  id: totrans-1253
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")'
  id: totrans-1254
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")'
- en: '[PRE233]'
  id: totrans-1255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE233]'
- en: Compute the final displayed list of [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") elements.
  id: totrans-1256
  prefs: []
  type: TYPE_NORMAL
  zh: 计算最终显示的 [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    元素列表。
- en: This method will run through the full computation required to determine what
    FROM elements will be displayed in the resulting SELECT statement, including shadowing
    individual tables with JOIN objects, as well as full computation for ORM use cases
    including eager loading clauses.
  id: totrans-1257
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法将通过完整的计算来确定结果 SELECT 语句中将显示哪些 FROM 元素，包括用 JOIN 对象遮蔽单个表以及用于 ORM 使用情况的完整计算，包括急加载子句。
- en: For ORM use, this accessor returns the **post compilation** list of FROM objects;
    this collection will include elements such as eagerly loaded tables and joins.
    The objects will **not** be ORM enabled and not work as a replacement for the
    `Select.select_froms()` collection; additionally, the method is not well performing
    for an ORM enabled statement as it will incur the full ORM construction process.
  id: totrans-1258
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 ORM 使用，此访问器返回**编译后**的 FROM 对象列表；此集合将包括诸如急加载表和连接之类的元素。对象将**不**被启用 ORM，并且不能作为
    `Select.select_froms()` 集合的替代；此外，对于启用 ORM 语句，该方法的性能不佳，因为它将导致完整的 ORM 构造过程。
- en: To retrieve the FROM list that’s implied by the “columns” collection passed
    to the [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    originally, use the [`Select.columns_clause_froms`](#sqlalchemy.sql.expression.Select.columns_clause_froms
    "sqlalchemy.sql.expression.Select.columns_clause_froms") accessor.
  id: totrans-1259
  prefs: []
  type: TYPE_NORMAL
  zh: 要检索由最初传递给 [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    的“列”集合隐含的 FROM 列表，请使用 [`Select.columns_clause_froms`](#sqlalchemy.sql.expression.Select.columns_clause_froms
    "sqlalchemy.sql.expression.Select.columns_clause_froms") 访问器。
- en: To select from an alternative set of columns while maintaining the FROM list,
    use the [`Select.with_only_columns()`](#sqlalchemy.sql.expression.Select.with_only_columns
    "sqlalchemy.sql.expression.Select.with_only_columns") method and pass the [`Select.with_only_columns.maintain_column_froms`](#sqlalchemy.sql.expression.Select.with_only_columns.params.maintain_column_froms
    "sqlalchemy.sql.expression.Select.with_only_columns") parameter.
  id: totrans-1260
  prefs: []
  type: TYPE_NORMAL
  zh: 要从替代列集中选择而保持 FROM 列表，请使用 [`Select.with_only_columns()`](#sqlalchemy.sql.expression.Select.with_only_columns
    "sqlalchemy.sql.expression.Select.with_only_columns") 方法，并传递 [`Select.with_only_columns.maintain_column_froms`](#sqlalchemy.sql.expression.Select.with_only_columns.params.maintain_column_froms
    "sqlalchemy.sql.expression.Select.with_only_columns") 参数。
- en: 'New in version 1.4.23: - the [`Select.get_final_froms()`](#sqlalchemy.sql.expression.Select.get_final_froms
    "sqlalchemy.sql.expression.Select.get_final_froms") method replaces the previous
    [`Select.froms`](#sqlalchemy.sql.expression.Select.froms "sqlalchemy.sql.expression.Select.froms")
    accessor, which is deprecated.'
  id: totrans-1261
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4.23 版本中的新功能：- [`Select.get_final_froms()`](#sqlalchemy.sql.expression.Select.get_final_froms
    "sqlalchemy.sql.expression.Select.get_final_froms") 方法取代了之前的 [`Select.froms`](#sqlalchemy.sql.expression.Select.froms
    "sqlalchemy.sql.expression.Select.froms") 访问器，该访问器已被弃用。
- en: See also
  id: totrans-1262
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Select.columns_clause_froms`](#sqlalchemy.sql.expression.Select.columns_clause_froms
    "sqlalchemy.sql.expression.Select.columns_clause_froms")'
  id: totrans-1263
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.columns_clause_froms`](#sqlalchemy.sql.expression.Select.columns_clause_froms
    "sqlalchemy.sql.expression.Select.columns_clause_froms")'
- en: '[PRE234]'
  id: totrans-1264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE234]'
- en: '*inherited from the* [`GenerativeSelect.get_label_style()`](#sqlalchemy.sql.expression.GenerativeSelect.get_label_style
    "sqlalchemy.sql.expression.GenerativeSelect.get_label_style") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  id: totrans-1265
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`GenerativeSelect.get_label_style()`](#sqlalchemy.sql.expression.GenerativeSelect.get_label_style
    "sqlalchemy.sql.expression.GenerativeSelect.get_label_style") *方法的* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
- en: Retrieve the current label style.
  id: totrans-1266
  prefs: []
  type: TYPE_NORMAL
  zh: 检索当前标签样式。
- en: New in version 1.4.
  id: totrans-1267
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4 版本中的新功能。
- en: '[PRE235]'
  id: totrans-1268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE235]'
- en: '*inherited from the* [`GenerativeSelect.group_by()`](#sqlalchemy.sql.expression.GenerativeSelect.group_by
    "sqlalchemy.sql.expression.GenerativeSelect.group_by") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  id: totrans-1269
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`GenerativeSelect.group_by()`](#sqlalchemy.sql.expression.GenerativeSelect.group_by
    "sqlalchemy.sql.expression.GenerativeSelect.group_by") *方法的* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
- en: Return a new selectable with the given list of GROUP BY criterion applied.
  id: totrans-1270
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个具有给定的 GROUP BY 准则列表的新的可选择项。
- en: All existing GROUP BY settings can be suppressed by passing `None`.
  id: totrans-1271
  prefs: []
  type: TYPE_NORMAL
  zh: 通过传递`None`可以取消所有现有的 GROUP BY 设置。
- en: 'e.g.:'
  id: totrans-1272
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE236]'
  id: totrans-1273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE236]'
- en: 'Parameters:'
  id: totrans-1274
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '***clauses** – a series of [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") constructs which will be used to generate
    an GROUP BY clause.'
  id: totrans-1275
  prefs: []
  type: TYPE_NORMAL
  zh: '***clauses** – 一系列[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")构造，将用于生成 GROUP BY 子句。'
- en: See also
  id: totrans-1276
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Aggregate functions with GROUP BY / HAVING](../tutorial/data_select.html#tutorial-group-by-w-aggregates)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-1277
  prefs: []
  type: TYPE_NORMAL
  zh: '[GROUP BY / HAVING 中的聚合函数](../tutorial/data_select.html#tutorial-group-by-w-aggregates)
    - 在[SQLAlchemy 统一教程](../tutorial/index.html#unified-tutorial)中'
- en: '[Ordering or Grouping by a Label](../tutorial/data_select.html#tutorial-order-by-label)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-1278
  prefs: []
  type: TYPE_NORMAL
  zh: '[按标签排序或分组](../tutorial/data_select.html#tutorial-order-by-label) - 在[SQLAlchemy
    统一教程](../tutorial/index.html#unified-tutorial)中'
- en: '[PRE237]'
  id: totrans-1279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE237]'
- en: Return a new [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    construct with the given expression added to its HAVING clause, joined to the
    existing clause via AND, if any.
  id: totrans-1280
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的 [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    构造，其中包含给定表达式添加到其 HAVING 子句中，并通过 AND 连接到现有子句（如果有）。
- en: '[PRE238]'
  id: totrans-1281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE238]'
- en: '*inherited from the* `HasCacheKey.inherit_cache` *attribute of* [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.cache_key.HasCacheKey")'
  id: totrans-1282
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `HasCacheKey.inherit_cache` *属性的* [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.cache_key.HasCacheKey") *实例*'
- en: Indicate if this [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") instance should make use of the cache
    key generation scheme used by its immediate superclass.
  id: totrans-1283
  prefs: []
  type: TYPE_NORMAL
  zh: 表示此[`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey "sqlalchemy.sql.traversals.HasCacheKey")实例是否应使用其直接超类使用的缓存密钥生成方案。
- en: The attribute defaults to `None`, which indicates that a construct has not yet
    taken into account whether or not its appropriate for it to participate in caching;
    this is functionally equivalent to setting the value to `False`, except that a
    warning is also emitted.
  id: totrans-1284
  prefs: []
  type: TYPE_NORMAL
  zh: 该属性默认为`None`，表示一个构造尚未考虑是否适合参与缓存；这在功能上等同于将值设置为`False`，除了还会发出警告。
- en: This flag can be set to `True` on a particular class, if the SQL that corresponds
    to the object does not change based on attributes which are local to this class,
    and not its superclass.
  id: totrans-1285
  prefs: []
  type: TYPE_NORMAL
  zh: 如果与此类本地属性以及不是其超类的属性无关的属性对应的 SQL 不会更改，则可以在特定类上将此标志设置为`True`。
- en: See also
  id: totrans-1286
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Enabling Caching Support for Custom Constructs](compiler.html#compilerext-caching)
    - General guideslines for setting the [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute for third-party
    or user defined SQL constructs.'
  id: totrans-1287
  prefs: []
  type: TYPE_NORMAL
  zh: '[为自定义构造启用缓存支持](compiler.html#compilerext-caching) - 为第三方或用户定义的SQL构造设置[`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache")属性的一般指南。'
- en: '[PRE239]'
  id: totrans-1288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE239]'
- en: An iterator of all [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") expressions which would be rendered
    into the columns clause of the resulting SELECT statement.
  id: totrans-1289
  prefs: []
  type: TYPE_NORMAL
  zh: 所有将被渲染到生成的SELECT语句的列子句中的[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")表达式的迭代器。
- en: This method is legacy as of 1.4 and is superseded by the [`Select.exported_columns`](#sqlalchemy.sql.expression.Select.exported_columns
    "sqlalchemy.sql.expression.Select.exported_columns") collection.
  id: totrans-1290
  prefs: []
  type: TYPE_NORMAL
  zh: 从1.4版本开始，此方法已被弃用，并由[`Select.exported_columns`](#sqlalchemy.sql.expression.Select.exported_columns
    "sqlalchemy.sql.expression.Select.exported_columns")集合取代。
- en: '[PRE240]'
  id: totrans-1291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE240]'
- en: Return a SQL `INTERSECT` of this select() construct against the given selectables
    provided as positional arguments.
  id: totrans-1292
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此select()构造与作为位置参数提供的给定selectables的SQL `INTERSECT`。
- en: 'Parameters:'
  id: totrans-1293
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*other` –'
  id: totrans-1294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*other` –'
- en: one or more elements with which to create a UNION.
  id: totrans-1295
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个或多个要创建联合的元素。
- en: 'Changed in version 1.4.28: multiple elements are now accepted.'
  id: totrans-1296
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自版本1.4.28起更改：现在接受多个元素。
- en: '`**kwargs` – keyword arguments are forwarded to the constructor for the newly
    created [`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect "sqlalchemy.sql.expression.CompoundSelect")
    object.'
  id: totrans-1297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kwargs` – 关键字参数将转发到新创建的[`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect
    "sqlalchemy.sql.expression.CompoundSelect")对象的构造函数。'
- en: '[PRE241]'
  id: totrans-1298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE241]'
- en: Return a SQL `INTERSECT ALL` of this select() construct against the given selectables
    provided as positional arguments.
  id: totrans-1299
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此select()构造与作为位置参数提供的给定selectables的SQL `INTERSECT ALL`。
- en: 'Parameters:'
  id: totrans-1300
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*other` –'
  id: totrans-1301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*other` –'
- en: one or more elements with which to create a UNION.
  id: totrans-1302
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个或多个要创建联合的元素。
- en: 'Changed in version 1.4.28: multiple elements are now accepted.'
  id: totrans-1303
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自版本1.4.28起更改：现在接受多个元素。
- en: '`**kwargs` – keyword arguments are forwarded to the constructor for the newly
    created [`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect "sqlalchemy.sql.expression.CompoundSelect")
    object.'
  id: totrans-1304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kwargs` – 关键字参数将转发到新创建的[`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect
    "sqlalchemy.sql.expression.CompoundSelect")对象的构造函数。'
- en: '[PRE242]'
  id: totrans-1305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE242]'
- en: Return `True` if this [`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows
    "sqlalchemy.sql.expression.ReturnsRows") is ‘derived’ from the given [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-1306
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此[`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows "sqlalchemy.sql.expression.ReturnsRows")是从给定的[`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")‘派生’，则返回`True`。
- en: An example would be an Alias of a Table is derived from that Table.
  id: totrans-1307
  prefs: []
  type: TYPE_NORMAL
  zh: 一个示例是，表的别名是从该表派生的。
- en: '[PRE243]'
  id: totrans-1308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE243]'
- en: Create a SQL JOIN against this [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") object’s criterion and apply generatively,
    returning the newly resulting [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select").
  id: totrans-1309
  prefs: []
  type: TYPE_NORMAL
  zh: 对此[`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")对象的条件进行SQL
    JOIN，并应用生成，返回新生成的[`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")。
- en: 'E.g.:'
  id: totrans-1310
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE244]'
  id: totrans-1311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE244]'
- en: 'The above statement generates SQL similar to:'
  id: totrans-1312
  prefs: []
  type: TYPE_NORMAL
  zh: 上述语句生成类似于以下的SQL：
- en: '[PRE245]'
  id: totrans-1313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE245]'
- en: 'Changed in version 1.4: [`Select.join()`](#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join") now creates a [`Join`](#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") object between a [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") source that is within the FROM clause
    of the existing SELECT, and a given target [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause"), and then adds this [`Join`](#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") to the FROM clause of the newly generated SELECT
    statement. This is completely reworked from the behavior in 1.3, which would instead
    create a subquery of the entire [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    and then join that subquery to the target.'
  id: totrans-1314
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4 开始改变：[`Select.join()`](#sqlalchemy.sql.expression.Select.join "sqlalchemy.sql.expression.Select.join")
    现在在现有 SELECT 的 FROM 子句中创建一个 [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") 源和给定目标 [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") 之间的 [`Join`](#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") 对象，然后将此 [`Join`](#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") 添加到新生成的 SELECT 语句的 FROM 子句中。这完全重写自 1.3 中的行为，1.3
    中的行为会创建一个整个 [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    的子查询，然后将该子查询连接到目标。
- en: This is a **backwards incompatible change** as the previous behavior was mostly
    useless, producing an unnamed subquery rejected by most databases in any case.
    The new behavior is modeled after that of the very successful [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") method in the ORM, in order to support the functionality
    of [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    being available by using a [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    object with an [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
  id: totrans-1315
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个**向后不兼容的更改**，因为先前的行为大多是无用的，它会产生一个未命名的子查询，大多数数据库都会拒绝这种情况。新的行为是基于 ORM 中非常成功的
    [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")
    方法建模的，以支持使用具有 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    的 [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    对象可用的 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    的功能。
- en: See the notes for this change at [select().join() and outerjoin() add JOIN criteria
    to the current query, rather than creating a subquery](../changelog/migration_14.html#change-select-join).
  id: totrans-1316
  prefs: []
  type: TYPE_NORMAL
  zh: 有关此更改的注释，请参阅 [select().join() 和 outerjoin() 向当前查询添加 JOIN 条件，而不是创建子查询](../changelog/migration_14.html#change-select-join)。
- en: 'Parameters:'
  id: totrans-1317
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`target` – target table to join towards'
  id: totrans-1318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target` – 连接的目标表'
- en: '`onclause` – ON clause of the join. If omitted, an ON clause is generated automatically
    based on the [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    linkages between the two tables, if one can be unambiguously determined, otherwise
    an error is raised.'
  id: totrans-1319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onclause` – 连接的 ON 子句。如果省略，则根据两个表之间的 [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") 关系自动生成 ON 子句，如果可以明确确定，则引发错误。'
- en: '`isouter` – if True, generate LEFT OUTER join. Same as [`Select.outerjoin()`](#sqlalchemy.sql.expression.Select.outerjoin
    "sqlalchemy.sql.expression.Select.outerjoin").'
  id: totrans-1320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isouter` – 如果为 True，则生成 LEFT OUTER 连接。与 [`Select.outerjoin()`](#sqlalchemy.sql.expression.Select.outerjoin
    "sqlalchemy.sql.expression.Select.outerjoin") 相同。'
- en: '`full` – if True, generate FULL OUTER join.'
  id: totrans-1321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`full` – 如果为 True，则生成 FULL OUTER 连接。'
- en: See also
  id: totrans-1322
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Explicit FROM clauses and JOINs](../tutorial/data_select.html#tutorial-select-join)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html)'
  id: totrans-1323
  prefs: []
  type: TYPE_NORMAL
  zh: '[明确的 FROM 子句和 JOINs](../tutorial/data_select.html#tutorial-select-join) - 在
    [SQLAlchemy 统一教程](../tutorial/index.html) 中'
- en: '[Joins](../orm/queryguide/select.html#orm-queryguide-joins) - in the [ORM Querying
    Guide](../orm/queryguide/index.html)'
  id: totrans-1324
  prefs: []
  type: TYPE_NORMAL
  zh: '[连接](../orm/queryguide/select.html#orm-queryguide-joins) - 在 [ORM 查询指南](../orm/queryguide/index.html)
    中'
- en: '[`Select.join_from()`](#sqlalchemy.sql.expression.Select.join_from "sqlalchemy.sql.expression.Select.join_from")'
  id: totrans-1325
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.join_from()`](#sqlalchemy.sql.expression.Select.join_from "sqlalchemy.sql.expression.Select.join_from")'
- en: '[`Select.outerjoin()`](#sqlalchemy.sql.expression.Select.outerjoin "sqlalchemy.sql.expression.Select.outerjoin")'
  id: totrans-1326
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.outerjoin()`](#sqlalchemy.sql.expression.Select.outerjoin "sqlalchemy.sql.expression.Select.outerjoin")'
- en: '[PRE246]'
  id: totrans-1327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE246]'
- en: Create a SQL JOIN against this [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") object’s criterion and apply generatively,
    returning the newly resulting [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select").
  id: totrans-1328
  prefs: []
  type: TYPE_NORMAL
  zh: 对此[`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")对象的条件进行SQL
    JOIN并进行生成，返回新生成的[`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")。
- en: 'E.g.:'
  id: totrans-1329
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE247]'
  id: totrans-1330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE247]'
- en: 'The above statement generates SQL similar to:'
  id: totrans-1331
  prefs: []
  type: TYPE_NORMAL
  zh: 上述语句生成类似于以下的SQL：
- en: '[PRE248]'
  id: totrans-1332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE248]'
- en: New in version 1.4.
  id: totrans-1333
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4版中的新功能。
- en: 'Parameters:'
  id: totrans-1334
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`from_` – the left side of the join, will be rendered in the FROM clause and
    is roughly equivalent to using the [`Select.select_from()`](#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") method.'
  id: totrans-1335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`from_` – 连接的左侧，在FROM子句中呈现，并且大致相当于使用[`Select.select_from()`](#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from")方法。'
- en: '`target` – target table to join towards'
  id: totrans-1336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target` – 向其连接的目标表'
- en: '`onclause` – ON clause of the join.'
  id: totrans-1337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onclause` – 连接的ON子句。'
- en: '`isouter` – if True, generate LEFT OUTER join. Same as [`Select.outerjoin()`](#sqlalchemy.sql.expression.Select.outerjoin
    "sqlalchemy.sql.expression.Select.outerjoin").'
  id: totrans-1338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isouter` – 如果为True，则生成LEFT OUTER连接。与[`Select.outerjoin()`](#sqlalchemy.sql.expression.Select.outerjoin
    "sqlalchemy.sql.expression.Select.outerjoin")相同。'
- en: '`full` – if True, generate FULL OUTER join.'
  id: totrans-1339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`full` – 如果为True，则生成FULL OUTER连接。'
- en: See also
  id: totrans-1340
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Explicit FROM clauses and JOINs](../tutorial/data_select.html#tutorial-select-join)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html)'
  id: totrans-1341
  prefs: []
  type: TYPE_NORMAL
  zh: '[显式FROM子句和JOINs](../tutorial/data_select.html#tutorial-select-join) - 在[SQLAlchemy统一教程](../tutorial/index.html)中'
- en: '[Joins](../orm/queryguide/select.html#orm-queryguide-joins) - in the [ORM Querying
    Guide](../orm/queryguide/index.html)'
  id: totrans-1342
  prefs: []
  type: TYPE_NORMAL
  zh: '[连接](../orm/queryguide/select.html#orm-queryguide-joins) - 在[ORM查询指南](../orm/queryguide/index.html)中'
- en: '[`Select.join()`](#sqlalchemy.sql.expression.Select.join "sqlalchemy.sql.expression.Select.join")'
  id: totrans-1343
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.join()`](#sqlalchemy.sql.expression.Select.join "sqlalchemy.sql.expression.Select.join")'
- en: '[PRE249]'
  id: totrans-1344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE249]'
- en: '*inherited from the* [`SelectBase.label()`](#sqlalchemy.sql.expression.SelectBase.label
    "sqlalchemy.sql.expression.SelectBase.label") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  id: totrans-1345
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SelectBase.label()`](#sqlalchemy.sql.expression.SelectBase.label "sqlalchemy.sql.expression.SelectBase.label")
    *方法的* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")'
- en: Return a ‘scalar’ representation of this selectable, embedded as a subquery
    with a label.
  id: totrans-1346
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此可选择的‘标量’表示，嵌入为具有标签的子查询。
- en: See also
  id: totrans-1347
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery").'
  id: totrans-1348
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery")。'
- en: '[PRE250]'
  id: totrans-1349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE250]'
- en: '*inherited from the* [`SelectBase.lateral()`](#sqlalchemy.sql.expression.SelectBase.lateral
    "sqlalchemy.sql.expression.SelectBase.lateral") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  id: totrans-1350
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SelectBase.lateral()`](#sqlalchemy.sql.expression.SelectBase.lateral
    "sqlalchemy.sql.expression.SelectBase.lateral") *方法的* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
- en: Return a LATERAL alias of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable").
  id: totrans-1351
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此[`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable")的LATERAL别名。
- en: The return value is the [`Lateral`](#sqlalchemy.sql.expression.Lateral "sqlalchemy.sql.expression.Lateral")
    construct also provided by the top-level [`lateral()`](#sqlalchemy.sql.expression.lateral
    "sqlalchemy.sql.expression.lateral") function.
  id: totrans-1352
  prefs: []
  type: TYPE_NORMAL
  zh: 返回值也是顶级[`lateral()`](#sqlalchemy.sql.expression.lateral "sqlalchemy.sql.expression.lateral")函数提供的[`Lateral`](#sqlalchemy.sql.expression.Lateral
    "sqlalchemy.sql.expression.Lateral")构造。
- en: See also
  id: totrans-1353
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[LATERAL correlation](../tutorial/data_select.html#tutorial-lateral-correlation)
    - overview of usage.'
  id: totrans-1354
  prefs: []
  type: TYPE_NORMAL
  zh: '[横向相关性](../tutorial/data_select.html#tutorial-lateral-correlation) - 用法概述。'
- en: '[PRE251]'
  id: totrans-1355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE251]'
- en: '*inherited from the* [`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  id: totrans-1356
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit") *方法的* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
- en: Return a new selectable with the given LIMIT criterion applied.
  id: totrans-1357
  prefs: []
  type: TYPE_NORMAL
  zh: 返回应用给定LIMIT条件的新可选择对象。
- en: This is a numerical value which usually renders as a `LIMIT` expression in the
    resulting select. Backends that don’t support `LIMIT` will attempt to provide
    similar functionality.
  id: totrans-1358
  prefs: []
  type: TYPE_NORMAL
  zh: 这是通常呈现为`LIMIT`表达式的数值值，不能支持`LIMIT`的后端将尝试提供类似的功能。
- en: Note
  id: totrans-1359
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The [`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit") method will replace any clause
    applied with [`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch").
  id: totrans-1360
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit") 方法将替换使用 [`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch") 应用的任何子句。'
- en: 'Parameters:'
  id: totrans-1361
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**limit** – an integer LIMIT parameter, or a SQL expression that provides an
    integer result. Pass `None` to reset it.'
  id: totrans-1362
  prefs: []
  type: TYPE_NORMAL
  zh: '**limit** – 一个整数 `LIMIT` 参数，或者提供整数结果的 SQL 表达式。传递 `None` 来重置它。'
- en: See also
  id: totrans-1363
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch")'
  id: totrans-1364
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch")'
- en: '[`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset")'
  id: totrans-1365
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset")'
- en: '[PRE252]'
  id: totrans-1366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE252]'
- en: '*inherited from the* [`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  id: totrans-1367
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset") *方法的* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
- en: Return a new selectable with the given OFFSET criterion applied.
  id: totrans-1368
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个应用了给定 `OFFSET` 条件的新可选择项。
- en: This is a numeric value which usually renders as an `OFFSET` expression in the
    resulting select. Backends that don’t support `OFFSET` will attempt to provide
    similar functionality.
  id: totrans-1369
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个数值，通常在结果选择中呈现为 `OFFSET` 表达式。不支持 `OFFSET` 的后端将尝试提供类似的功能。
- en: 'Parameters:'
  id: totrans-1370
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**offset** – an integer OFFSET parameter, or a SQL expression that provides
    an integer result. Pass `None` to reset it.'
  id: totrans-1371
  prefs: []
  type: TYPE_NORMAL
  zh: '**offset** – 一个整数 `OFFSET` 参数，或者提供整数结果的 SQL 表达式。传递 `None` 来重置它。'
- en: See also
  id: totrans-1372
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit")'
  id: totrans-1373
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit")'
- en: '[`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch")'
  id: totrans-1374
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch")'
- en: '[PRE253]'
  id: totrans-1375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE253]'
- en: '*inherited from the* [`Executable.options()`](#sqlalchemy.sql.expression.Executable.options
    "sqlalchemy.sql.expression.Executable.options") *method of* [`Executable`](#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")'
  id: totrans-1376
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Executable.options()`](#sqlalchemy.sql.expression.Executable.options
    "sqlalchemy.sql.expression.Executable.options") *方法的* [`Executable`](#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")'
- en: Apply options to this statement.
  id: totrans-1377
  prefs: []
  type: TYPE_NORMAL
  zh: 将选项应用于此语句。
- en: In the general sense, options are any kind of Python object that can be interpreted
    by the SQL compiler for the statement. These options can be consumed by specific
    dialects or specific kinds of compilers.
  id: totrans-1378
  prefs: []
  type: TYPE_NORMAL
  zh: 从一般意义上讲，选项是任何可以由 SQL 编译器解释为该语句的 Python 对象。这些选项可以被特定的方言或特定类型的编译器所使用。
- en: The most commonly known kind of option are the ORM level options that apply
    “eager load” and other loading behaviors to an ORM query. However, options can
    theoretically be used for many other purposes.
  id: totrans-1379
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的选项类型是应用“急加载”和其他加载行为到 ORM 查询的 ORM 级选项。然而，选项理论上可以用于许多其他目的。
- en: For background on specific kinds of options for specific kinds of statements,
    refer to the documentation for those option objects.
  id: totrans-1380
  prefs: []
  type: TYPE_NORMAL
  zh: 关于特定类型语句的特定类型选项的背景，请参阅这些选项对象的文档。
- en: 'Changed in version 1.4: - added [`Executable.options()`](#sqlalchemy.sql.expression.Executable.options
    "sqlalchemy.sql.expression.Executable.options") to Core statement objects towards
    the goal of allowing unified Core / ORM querying capabilities.'
  id: totrans-1381
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中的变更：- 在核心语句对象中添加了[`Executable.options()`](#sqlalchemy.sql.expression.Executable.options
    "sqlalchemy.sql.expression.Executable.options")，以实现统一的核心/ORM查询功能的目标。
- en: See also
  id: totrans-1382
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[Column Loading Options](../orm/queryguide/columns.html#loading-columns) -
    refers to options specific to the usage of ORM queries'
  id: totrans-1383
  prefs: []
  type: TYPE_NORMAL
  zh: '[列加载选项](../orm/queryguide/columns.html#loading-columns) - 指的是与 ORM 查询的使用相关的选项'
- en: '[Relationship Loading with Loader Options](../orm/queryguide/relationships.html#relationship-loader-options)
    - refers to options specific to the usage of ORM queries'
  id: totrans-1384
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用加载器选项加载关系](../orm/queryguide/relationships.html#relationship-loader-options)
    - 指的是与 ORM 查询的使用相关的选项'
- en: '[PRE254]'
  id: totrans-1385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE254]'
- en: '*inherited from the* [`GenerativeSelect.order_by()`](#sqlalchemy.sql.expression.GenerativeSelect.order_by
    "sqlalchemy.sql.expression.GenerativeSelect.order_by") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  id: totrans-1386
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`GenerativeSelect.order_by()`](#sqlalchemy.sql.expression.GenerativeSelect.order_by
    "sqlalchemy.sql.expression.GenerativeSelect") *方法的* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
- en: Return a new selectable with the given list of ORDER BY criteria applied.
  id: totrans-1387
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个应用给定的 ORDER BY 标准的新可选择对象。
- en: 'e.g.:'
  id: totrans-1388
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE255]'
  id: totrans-1389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE255]'
- en: 'Calling this method multiple times is equivalent to calling it once with all
    the clauses concatenated. All existing ORDER BY criteria may be cancelled by passing
    `None` by itself. New ORDER BY criteria may then be added by invoking [`Query.order_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.order_by
    "sqlalchemy.orm.Query.order_by") again, e.g.:'
  id: totrans-1390
  prefs: []
  type: TYPE_NORMAL
  zh: 多次调用此方法等效于一次调用，其中所有子句都连接在一起。通过单独传递 `None` 可以取消所有现有的 ORDER BY 标准。然后可以通过再次调用 [`Query.order_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.order_by
    "sqlalchemy.orm.Query.order_by") 来添加新的 ORDER BY 标准，例如：
- en: '[PRE256]'
  id: totrans-1391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE256]'
- en: 'Parameters:'
  id: totrans-1392
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '***clauses** – a series of [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") constructs which will be used to generate
    an ORDER BY clause.'
  id: totrans-1393
  prefs: []
  type: TYPE_NORMAL
  zh: '***clauses** – 一系列将用于生成 ORDER BY 子句的 [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") 构造。'
- en: See also
  id: totrans-1394
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[ORDER BY](../tutorial/data_select.html#tutorial-order-by) - in the [SQLAlchemy
    Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-1395
  prefs: []
  type: TYPE_NORMAL
  zh: '[ORDER BY](../tutorial/data_select.html#tutorial-order-by) - 在[SQLAlchemy 统一教程](../tutorial/index.html#unified-tutorial)中'
- en: '[Ordering or Grouping by a Label](../tutorial/data_select.html#tutorial-order-by-label)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-1396
  prefs: []
  type: TYPE_NORMAL
  zh: '[按标签排序或分组](../tutorial/data_select.html#tutorial-order-by-label) - 在[SQLAlchemy
    统一教程](../tutorial/index.html#unified-tutorial)中'
- en: '[PRE257]'
  id: totrans-1397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE257]'
- en: Create a left outer join.
  id: totrans-1398
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个左外连接。
- en: Parameters are the same as that of [`Select.join()`](#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join").
  id: totrans-1399
  prefs: []
  type: TYPE_NORMAL
  zh: 参数与 [`Select.join()`](#sqlalchemy.sql.expression.Select.join "sqlalchemy.sql.expression.Select.join")
    相同。
- en: 'Changed in version 1.4: [`Select.outerjoin()`](#sqlalchemy.sql.expression.Select.outerjoin
    "sqlalchemy.sql.expression.Select.outerjoin") now creates a [`Join`](#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") object between a [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") source that is within the FROM clause
    of the existing SELECT, and a given target [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause"), and then adds this [`Join`](#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") to the FROM clause of the newly generated SELECT
    statement. This is completely reworked from the behavior in 1.3, which would instead
    create a subquery of the entire [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    and then join that subquery to the target.'
  id: totrans-1400
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4 开始：[`Select.outerjoin()`](#sqlalchemy.sql.expression.Select.outerjoin
    "sqlalchemy.sql.expression.Select.outerjoin") 现在在现有 SELECT 的 FROM 子句中创建一个 [`Join`](#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") 对象，以及一个给定的目标 [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")，然后将这个 [`Join`](#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") 添加到新生成的 SELECT 语句的 FROM 子句中。这与 1.3 版本中的行为完全不同，1.3
    版本会创建整个 [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    的子查询，然后将该子查询连接到目标。
- en: This is a **backwards incompatible change** as the previous behavior was mostly
    useless, producing an unnamed subquery rejected by most databases in any case.
    The new behavior is modeled after that of the very successful [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") method in the ORM, in order to support the functionality
    of [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    being available by using a [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    object with an [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
  id: totrans-1401
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个**向后不兼容的更改**，因为以前的行为大多是无用的，产生的无名称子查询在任何情况下都被大多数数据库拒绝。新的行为是模仿 ORM 中非常成功的
    [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")
    方法的行为，以支持通过使用带有 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    的 [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    对象来使 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    的功能可用。
- en: See the notes for this change at [select().join() and outerjoin() add JOIN criteria
    to the current query, rather than creating a subquery](../changelog/migration_14.html#change-select-join).
  id: totrans-1402
  prefs: []
  type: TYPE_NORMAL
  zh: 查看此更改的注释：[select().join() 和 outerjoin() 将 JOIN 条件添加到当前查询，而不是创建子查询](../changelog/migration_14.html#change-select-join)。
- en: See also
  id: totrans-1403
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Explicit FROM clauses and JOINs](../tutorial/data_select.html#tutorial-select-join)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html)'
  id: totrans-1404
  prefs: []
  type: TYPE_NORMAL
  zh: '[显式的 FROM 子句和 JOINs](../tutorial/data_select.html#tutorial-select-join) - 在
    [SQLAlchemy 统一教程](../tutorial/index.html) 中'
- en: '[Joins](../orm/queryguide/select.html#orm-queryguide-joins) - in the [ORM Querying
    Guide](../orm/queryguide/index.html)'
  id: totrans-1405
  prefs: []
  type: TYPE_NORMAL
  zh: '[连接](../orm/queryguide/select.html#orm-queryguide-joins) - 在 [ORM 查询指南](../orm/queryguide/index.html)
    中'
- en: '[`Select.join()`](#sqlalchemy.sql.expression.Select.join "sqlalchemy.sql.expression.Select.join")'
  id: totrans-1406
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.join()`](#sqlalchemy.sql.expression.Select.join "sqlalchemy.sql.expression.Select.join")'
- en: '[PRE258]'
  id: totrans-1407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE258]'
- en: Create a SQL LEFT OUTER JOIN against this [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") object’s criterion and apply generatively,
    returning the newly resulting [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select").
  id: totrans-1408
  prefs: []
  type: TYPE_NORMAL
  zh: 对此 [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    对象的条件创建一个 SQL LEFT OUTER JOIN 并进行生成，返回新生成的 [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select")。
- en: Usage is the same as that of `Select.join_from()`.
  id: totrans-1409
  prefs: []
  type: TYPE_NORMAL
  zh: 用法与 `Select.join_from()` 相同。
- en: '[PRE259]'
  id: totrans-1410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE259]'
- en: '*inherited from the* [`HasPrefixes.prefix_with()`](#sqlalchemy.sql.expression.HasPrefixes.prefix_with
    "sqlalchemy.sql.expression.HasPrefixes.prefix_with") *method of* [`HasPrefixes`](#sqlalchemy.sql.expression.HasPrefixes
    "sqlalchemy.sql.expression.HasPrefixes")'
  id: totrans-1411
  prefs: []
  type: TYPE_NORMAL
  zh: '*来自* [`HasPrefixes.prefix_with()`](#sqlalchemy.sql.expression.HasPrefixes.prefix_with
    "sqlalchemy.sql.expression.HasPrefixes.prefix_with") *方法的继承* [`HasPrefixes`](#sqlalchemy.sql.expression.HasPrefixes
    "sqlalchemy.sql.expression.HasPrefixes")'
- en: Add one or more expressions following the statement keyword, i.e. SELECT, INSERT,
    UPDATE, or DELETE. Generative.
  id: totrans-1412
  prefs: []
  type: TYPE_NORMAL
  zh: 在语句关键字（如 SELECT、INSERT、UPDATE 或 DELETE）之后添加一个或多个表达式。生成式。
- en: This is used to support backend-specific prefix keywords such as those provided
    by MySQL.
  id: totrans-1413
  prefs: []
  type: TYPE_NORMAL
  zh: 这用于支持后端特定的前缀关键字，例如 MySQL 提供的那些。
- en: 'E.g.:'
  id: totrans-1414
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE260]'
  id: totrans-1415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE260]'
- en: Multiple prefixes can be specified by multiple calls to [`HasPrefixes.prefix_with()`](#sqlalchemy.sql.expression.HasPrefixes.prefix_with
    "sqlalchemy.sql.expression.HasPrefixes.prefix_with").
  id: totrans-1416
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过多次调用 [`HasPrefixes.prefix_with()`](#sqlalchemy.sql.expression.HasPrefixes.prefix_with
    "sqlalchemy.sql.expression.HasPrefixes.prefix_with") 来指定多个前缀。
- en: 'Parameters:'
  id: totrans-1417
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*prefixes` – textual or [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") construct which will be rendered following
    the INSERT, UPDATE, or DELETE keyword.'
  id: totrans-1418
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*prefixes` – 文本或者[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") 构造，将在 INSERT、UPDATE 或 DELETE 关键字之后呈现。'
- en: '`dialect` – optional string dialect name which will limit rendering of this
    prefix to only that dialect.'
  id: totrans-1419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect` – 可选的字符串方言名称，将限制该前缀的渲染仅适用于该方言。'
- en: '[PRE261]'
  id: totrans-1420
  prefs: []
  type: TYPE_PRE
  zh: '[PRE261]'
- en: Return a new [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    construct with redundantly named, equivalently-valued columns removed from the
    columns clause.
  id: totrans-1421
  prefs: []
  type: TYPE_NORMAL
  zh: 从列子句中删除冗余命名但值等效的列，并返回一个新的 [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    构造。
- en: “Redundant” here means two columns where one refers to the other either based
    on foreign key, or via a simple equality comparison in the WHERE clause of the
    statement. The primary purpose of this method is to automatically construct a
    select statement with all uniquely-named columns, without the need to use table-qualified
    labels as [`Select.set_label_style()`](#sqlalchemy.sql.expression.Select.set_label_style
    "sqlalchemy.sql.expression.Select.set_label_style") does.
  id: totrans-1422
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的“冗余”指的是一个列引用另一个列，要么基于外键，要么通过语句的WHERE子句中的简单等式比较。此方法的主要目的是自动构造一个具有所有唯一命名列的选择语句，而无需像[`Select.set_label_style()`](#sqlalchemy.sql.expression.Select.set_label_style
    "sqlalchemy.sql.expression.Select.set_label_style")那样使用表格限定标签。
- en: When columns are omitted based on foreign key, the referred-to column is the
    one that’s kept. When columns are omitted based on WHERE equivalence, the first
    column in the columns clause is the one that’s kept.
  id: totrans-1423
  prefs: []
  type: TYPE_NORMAL
  zh: 当基于外键省略列时，保留的是所引用的列。当基于WHERE等价性省略列时，保留的是列子句中的第一列。
- en: 'Parameters:'
  id: totrans-1424
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**only_synonyms** – when True, limit the removal of columns to those which
    have the same name as the equivalent. Otherwise, all columns that are equivalent
    to another are removed.'
  id: totrans-1425
  prefs: []
  type: TYPE_NORMAL
  zh: '**only_synonyms** – 当为True时，限制删除与等效项同名的列。否则，删除所有与另一个等效项相同的列。'
- en: '[PRE262]'
  id: totrans-1426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE262]'
- en: '*inherited from the* [`Selectable.replace_selectable()`](#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") *method of* [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
  id: totrans-1427
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Selectable.replace_selectable()`](#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable") *方法的* [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
- en: Replace all occurrences of [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") ‘old’ with the given [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") object, returning a copy of this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-1428
  prefs: []
  type: TYPE_NORMAL
  zh: 用给定的[`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")对象替换所有[`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") ‘old’的出现，返回此[`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")的副本。
- en: 'Deprecated since version 1.4: The [`Selectable.replace_selectable()`](#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") method is deprecated,
    and will be removed in a future release. Similar functionality is available via
    the sqlalchemy.sql.visitors module.'
  id: totrans-1429
  prefs: []
  type: TYPE_NORMAL
  zh: 自1.4版本起已弃用：[`Selectable.replace_selectable()`](#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable")方法已弃用，并将在将来的版本中删除。类似的功能可通过sqlalchemy.sql.visitors模块获得。
- en: '[PRE263]'
  id: totrans-1430
  prefs: []
  type: TYPE_PRE
  zh: '[PRE263]'
- en: '*inherited from the* [`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  id: totrans-1431
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery") *方法的* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
- en: Return a ‘scalar’ representation of this selectable, which can be used as a
    column expression.
  id: totrans-1432
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此可选择对象的“标量”表示，可用作列表达式。
- en: The returned object is an instance of [`ScalarSelect`](#sqlalchemy.sql.expression.ScalarSelect
    "sqlalchemy.sql.expression.ScalarSelect").
  id: totrans-1433
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的对象是[`ScalarSelect`](#sqlalchemy.sql.expression.ScalarSelect "sqlalchemy.sql.expression.ScalarSelect")的实例。
- en: Typically, a select statement which has only one column in its columns clause
    is eligible to be used as a scalar expression. The scalar subquery can then be
    used in the WHERE clause or columns clause of an enclosing SELECT.
  id: totrans-1434
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，只有在其列子句中只有一个列的选择语句才有资格用作标量表达式。然后可以在封闭SELECT的WHERE子句或列子句中使用标量子查询。
- en: Note that the scalar subquery differentiates from the FROM-level subquery that
    can be produced using the [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") method.
  id: totrans-1435
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，标量子查询与使用[`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery")方法生成的FROM级子查询有所不同。
- en: See also
  id: totrans-1436
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[Scalar and Correlated Subqueries](../tutorial/data_select.html#tutorial-scalar-subquery)
    - in the 2.0 tutorial'
  id: totrans-1437
  prefs: []
  type: TYPE_NORMAL
  zh: '[标量和相关子查询](../tutorial/data_select.html#tutorial-scalar-subquery) - 在2.0教程中'
- en: '[PRE264]'
  id: totrans-1438
  prefs: []
  type: TYPE_PRE
  zh: '[PRE264]'
- en: '*inherited from the* [`SelectBase.select()`](#sqlalchemy.sql.expression.SelectBase.select
    "sqlalchemy.sql.expression.SelectBase.select") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  id: totrans-1439
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SelectBase.select()`](#sqlalchemy.sql.expression.SelectBase.select
    "sqlalchemy.sql.expression.SelectBase.select") *方法的* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
- en: 'Deprecated since version 1.4: The [`SelectBase.select()`](#sqlalchemy.sql.expression.SelectBase.select
    "sqlalchemy.sql.expression.SelectBase.select") method is deprecated and will be
    removed in a future release; this method implicitly creates a subquery that should
    be explicit. Please call [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") first in order to create a subquery,
    which then can be selected.'
  id: totrans-1440
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.4 弃用：[`SelectBase.select()`](#sqlalchemy.sql.expression.SelectBase.select
    "sqlalchemy.sql.expression.SelectBase.select") 方法已弃用，并将在以后的版本中删除；该方法隐式创建了一个应显式的子查询。请首先调用
    [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery "sqlalchemy.sql.expression.SelectBase.subquery")
    以创建一个子查询，然后可以选择它。
- en: '[PRE265]'
  id: totrans-1441
  prefs: []
  type: TYPE_PRE
  zh: '[PRE265]'
- en: Return a new [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    construct with the given FROM expression(s) merged into its list of FROM objects.
  id: totrans-1442
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个将给定的 FROM 表达式合并到其 FROM 对象列表中的新 [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 结构。
- en: 'E.g.:'
  id: totrans-1443
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE266]'
  id: totrans-1444
  prefs: []
  type: TYPE_PRE
  zh: '[PRE266]'
- en: The “from” list is a unique set on the identity of each element, so adding an
    already present [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    or other selectable will have no effect. Passing a [`Join`](#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") that refers to an already present [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") or other selectable will have the effect of concealing
    the presence of that selectable as an individual element in the rendered FROM
    list, instead rendering it into a JOIN clause.
  id: totrans-1445
  prefs: []
  type: TYPE_NORMAL
  zh: “from” 列表是根据每个元素的标识符组成的唯一集合，因此添加一个已经存在的 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 或其他可选项将不会产生任何影响。传递一个指向已经存在的 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 或其他可选项的 [`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    将隐藏该可选项的存在，而是将其呈现为 JOIN 子句中的单独元素。
- en: 'While the typical purpose of [`Select.select_from()`](#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") is to replace the default, derived
    FROM clause with a join, it can also be called with individual table elements,
    multiple times if desired, in the case that the FROM clause cannot be fully derived
    from the columns clause:'
  id: totrans-1446
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 [`Select.select_from()`](#sqlalchemy.sql.expression.Select.select_from "sqlalchemy.sql.expression.Select.select_from")
    的典型目的是用 JOIN 替换默认的派生 FROM 子句，但也可以调用它以单独的表元素，如果需要的话，多次调用，在无法从列子句完全派生 FROM 子句的情况下：
- en: '[PRE267]'
  id: totrans-1447
  prefs: []
  type: TYPE_PRE
  zh: '[PRE267]'
- en: '[PRE268]'
  id: totrans-1448
  prefs: []
  type: TYPE_PRE
  zh: '[PRE268]'
- en: A [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") representing the columns that this
    SELECT statement or similar construct returns in its result set, not including
    [`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause "sqlalchemy.sql.expression.TextClause")
    constructs.
  id: totrans-1449
  prefs: []
  type: TYPE_NORMAL
  zh: 一个表示此 SELECT 语句或类似结构返回的结果集中的列的 [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") ，不包括 [`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause") 结构。
- en: This collection differs from the [`FromClause.columns`](#sqlalchemy.sql.expression.FromClause.columns
    "sqlalchemy.sql.expression.FromClause.columns") collection of a [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") in that the columns within this collection
    cannot be directly nested inside another SELECT statement; a subquery must be
    applied first which provides for the necessary parenthesization required by SQL.
  id: totrans-1450
  prefs: []
  type: TYPE_NORMAL
  zh: 此集合与 [`FromClause.columns`](#sqlalchemy.sql.expression.FromClause.columns "sqlalchemy.sql.expression.FromClause.columns")
    集合不同，因为此集合中的列不能直接嵌套在另一个 SELECT 语句内；必须首先应用一个子查询，该子查询提供了 SQL 所需的必要括号化。
- en: 'For a [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    construct, the collection here is exactly what would be rendered inside the “SELECT”
    statement, and the [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") objects are directly present as they
    were given, e.g.:'
  id: totrans-1451
  prefs: []
  type: TYPE_NORMAL
  zh: 对于[`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")构造，这里的集合正是在“SELECT”语句内部呈现的内容，[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")对象直接按照给定的方式呈现，例如：
- en: '[PRE269]'
  id: totrans-1452
  prefs: []
  type: TYPE_PRE
  zh: '[PRE269]'
- en: Above, `stmt.selected_columns` would be a collection that contains the `col1`
    and `col2` objects directly. For a statement that is against a [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") or other [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause"), the collection will use the [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") objects that are in the [`FromClause.c`](#sqlalchemy.sql.expression.FromClause.c
    "sqlalchemy.sql.expression.FromClause.c") collection of the from element.
  id: totrans-1453
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面，`stmt.selected_columns`将是一个包含`col1`和`col2`对象的集合。对于针对[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")或其他[`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")的语句，集合将使用[`FromClause.c`](#sqlalchemy.sql.expression.FromClause.c
    "sqlalchemy.sql.expression.FromClause.c")中的[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")对象。
- en: 'A use case for the [`Select.selected_columns`](#sqlalchemy.sql.expression.Select.selected_columns
    "sqlalchemy.sql.expression.Select.selected_columns") collection is to allow the
    existing columns to be referenced when adding additional criteria, e.g.:'
  id: totrans-1454
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.selected_columns`](#sqlalchemy.sql.expression.Select.selected_columns
    "sqlalchemy.sql.expression.Select.selected_columns")集合的一个用例是允许在添加额外条件时引用现有列，例如：'
- en: '[PRE270]'
  id: totrans-1455
  prefs: []
  type: TYPE_PRE
  zh: '[PRE270]'
- en: Note
  id: totrans-1456
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The [`Select.selected_columns`](#sqlalchemy.sql.expression.Select.selected_columns
    "sqlalchemy.sql.expression.Select.selected_columns") collection does not include
    expressions established in the columns clause using the [`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct; these are silently omitted from the
    collection. To use plain textual column expressions inside of a [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") construct, use the [`literal_column()`](sqlelement.html#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column") construct.
  id: totrans-1457
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.selected_columns`](#sqlalchemy.sql.expression.Select.selected_columns
    "sqlalchemy.sql.expression.Select.selected_columns")集合不包括在列子句中使用[`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")构造建立的表达式；这些将被静默地从集合中省略。要在[`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select")构造内部使用纯文本列表达式，使用[`literal_column()`](sqlelement.html#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column")构造。'
- en: New in version 1.4.
  id: totrans-1458
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4中的新功能。
- en: '[PRE271]'
  id: totrans-1459
  prefs: []
  type: TYPE_PRE
  zh: '[PRE271]'
- en: Apply a ‘grouping’ to this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  id: totrans-1460
  prefs: []
  type: TYPE_NORMAL
  zh: 对这个[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")应用‘分组’。
- en: This method is overridden by subclasses to return a “grouping” construct, i.e.
    parenthesis. In particular it’s used by “binary” expressions to provide a grouping
    around themselves when placed into a larger expression, as well as by [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs when placed into the FROM clause
    of another [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select").
    (Note that subqueries should be normally created using the [`Select.alias()`](#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") method, as many platforms require nested
    SELECT statements to be named).
  id: totrans-1461
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法被子类重写以返回一个“分组”构造，即括号。特别是它被“二元”表达式使用，当放置到更大的表达式中时提供一个围绕自身的分组，以及当放置到另一个[`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")构造的FROM子句中时使用。（请注意，子查询通常应使用[`Select.alias()`](#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias")方法创建，因为许多平台要求嵌套的SELECT语句必须命名）。
- en: As expressions are composed together, the application of [`self_group()`](#sqlalchemy.sql.expression.Select.self_group
    "sqlalchemy.sql.expression.Select.self_group") is automatic - end-user code should
    never need to use this method directly. Note that SQLAlchemy’s clause constructs
    take operator precedence into account - so parenthesis might not be needed, for
    example, in an expression like `x OR (y AND z)` - AND takes precedence over OR.
  id: totrans-1462
  prefs: []
  type: TYPE_NORMAL
  zh: 随着表达式的组合，[`self_group()`](#sqlalchemy.sql.expression.Select.self_group "sqlalchemy.sql.expression.Select.self_group")
    的应用是自动的 - 最终用户代码不应直接使用此方法。请注意，SQLAlchemy的子句构造会考虑运算符优先级 - 因此，例如，在表达式`x OR (y AND
    z)`中可能不需要括号 - AND 优先于 OR。
- en: The base [`self_group()`](#sqlalchemy.sql.expression.Select.self_group "sqlalchemy.sql.expression.Select.self_group")
    method of [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") just returns self.
  id: totrans-1463
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement "sqlalchemy.sql.expression.ClauseElement")
    的基础 [`self_group()`](#sqlalchemy.sql.expression.Select.self_group "sqlalchemy.sql.expression.Select.self_group")
    方法只是返回自身。'
- en: '[PRE272]'
  id: totrans-1464
  prefs: []
  type: TYPE_PRE
  zh: '[PRE272]'
- en: '*inherited from the* [`GenerativeSelect.set_label_style()`](#sqlalchemy.sql.expression.GenerativeSelect.set_label_style
    "sqlalchemy.sql.expression.GenerativeSelect.set_label_style") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  id: totrans-1465
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`GenerativeSelect.set_label_style()`](#sqlalchemy.sql.expression.GenerativeSelect.set_label_style
    "sqlalchemy.sql.expression.GenerativeSelect.set_label_style") *方法的* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
- en: Return a new selectable with the specified label style.
  id: totrans-1466
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个具有指定标签样式的新可选择对象。
- en: There are three “label styles” available, [`SelectLabelStyle.LABEL_STYLE_DISAMBIGUATE_ONLY`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_DISAMBIGUATE_ONLY
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_DISAMBIGUATE_ONLY"), [`SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL"),
    and [`SelectLabelStyle.LABEL_STYLE_NONE`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_NONE
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_NONE"). The default style
    is [`SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL").
  id: totrans-1467
  prefs: []
  type: TYPE_NORMAL
  zh: 有三种“标签样式”可用，[`SelectLabelStyle.LABEL_STYLE_DISAMBIGUATE_ONLY`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_DISAMBIGUATE_ONLY
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_DISAMBIGUATE_ONLY")、[`SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL") 和
    [`SelectLabelStyle.LABEL_STYLE_NONE`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_NONE
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_NONE")。默认样式是 [`SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL")。
- en: In modern SQLAlchemy, there is not generally a need to change the labeling style,
    as per-expression labels are more effectively used by making use of the [`ColumnElement.label()`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.label
    "sqlalchemy.sql.expression.ColumnElement.label") method. In past versions, `LABEL_STYLE_TABLENAME_PLUS_COL`
    was used to disambiguate same-named columns from different tables, aliases, or
    subqueries; the newer `LABEL_STYLE_DISAMBIGUATE_ONLY` now applies labels only
    to names that conflict with an existing name so that the impact of this labeling
    is minimal.
  id: totrans-1468
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代的SQLAlchemy中，通常不需要更改标签样式，因为通过使用 [`ColumnElement.label()`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.label
    "sqlalchemy.sql.expression.ColumnElement.label") 方法更有效地使用每个表达式的标签。在过去的版本中，`LABEL_STYLE_TABLENAME_PLUS_COL`
    用于区分来自不同表、别名或子查询的同名列；新的 `LABEL_STYLE_DISAMBIGUATE_ONLY` 仅将标签应用于与现有名称冲突的名称，以使此标记的影响最小化。
- en: The rationale for disambiguation is mostly so that all column expressions are
    available from a given [`FromClause.c`](#sqlalchemy.sql.expression.FromClause.c
    "sqlalchemy.sql.expression.FromClause.c") collection when a subquery is created.
  id: totrans-1469
  prefs: []
  type: TYPE_NORMAL
  zh: 区分的理由主要是为了在创建子查询时，所有列表达式都可以从给定的 [`FromClause.c`](#sqlalchemy.sql.expression.FromClause.c
    "sqlalchemy.sql.expression.FromClause.c") 集合中使用。
- en: 'New in version 1.4: - the [`GenerativeSelect.set_label_style()`](#sqlalchemy.sql.expression.GenerativeSelect.set_label_style
    "sqlalchemy.sql.expression.GenerativeSelect.set_label_style") method replaces
    the previous combination of `.apply_labels()`, `.with_labels()` and `use_labels=True`
    methods and/or parameters.'
  id: totrans-1470
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本1.4中：[`GenerativeSelect.set_label_style()`](#sqlalchemy.sql.expression.GenerativeSelect.set_label_style
    "sqlalchemy.sql.expression.GenerativeSelect.set_label_style")方法取代了以前的`.apply_labels()`、`.with_labels()`和`use_labels=True`方法和/或参数的组合。
- en: See also
  id: totrans-1471
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '`LABEL_STYLE_DISAMBIGUATE_ONLY`'
  id: totrans-1472
  prefs: []
  type: TYPE_NORMAL
  zh: '`LABEL_STYLE_DISAMBIGUATE_ONLY`'
- en: '`LABEL_STYLE_TABLENAME_PLUS_COL`'
  id: totrans-1473
  prefs: []
  type: TYPE_NORMAL
  zh: '`LABEL_STYLE_TABLENAME_PLUS_COL`'
- en: '`LABEL_STYLE_NONE`'
  id: totrans-1474
  prefs: []
  type: TYPE_NORMAL
  zh: '`LABEL_STYLE_NONE`'
- en: '`LABEL_STYLE_DEFAULT`'
  id: totrans-1475
  prefs: []
  type: TYPE_NORMAL
  zh: '`LABEL_STYLE_DEFAULT`'
- en: '[PRE273]'
  id: totrans-1476
  prefs: []
  type: TYPE_PRE
  zh: '[PRE273]'
- en: '*inherited from the* [`GenerativeSelect.slice()`](#sqlalchemy.sql.expression.GenerativeSelect.slice
    "sqlalchemy.sql.expression.GenerativeSelect.slice") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  id: totrans-1477
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`GenerativeSelect.slice()`](#sqlalchemy.sql.expression.GenerativeSelect.slice
    "sqlalchemy.sql.expression.GenerativeSelect.slice") *方法的* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
- en: Apply LIMIT / OFFSET to this statement based on a slice.
  id: totrans-1478
  prefs: []
  type: TYPE_NORMAL
  zh: 根据切片将LIMIT / OFFSET应用于此语句。
- en: The start and stop indices behave like the argument to Python’s built-in `range()`
    function. This method provides an alternative to using `LIMIT`/`OFFSET` to get
    a slice of the query.
  id: totrans-1479
  prefs: []
  type: TYPE_NORMAL
  zh: 开始和停止索引的行为类似于Python内置的`range()`函数的参数。该方法提供了一种使用`LIMIT`/`OFFSET`来获取查询片段的替代方法。
- en: For example,
  id: totrans-1480
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，
- en: '[PRE274]'
  id: totrans-1481
  prefs: []
  type: TYPE_PRE
  zh: '[PRE274]'
- en: renders as
  id: totrans-1482
  prefs: []
  type: TYPE_NORMAL
  zh: 呈现为
- en: '[PRE275]'
  id: totrans-1483
  prefs: []
  type: TYPE_PRE
  zh: '[PRE275]'
- en: Note
  id: totrans-1484
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The [`GenerativeSelect.slice()`](#sqlalchemy.sql.expression.GenerativeSelect.slice
    "sqlalchemy.sql.expression.GenerativeSelect.slice") method will replace any clause
    applied with [`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch").
  id: totrans-1485
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.slice()`](#sqlalchemy.sql.expression.GenerativeSelect.slice
    "sqlalchemy.sql.expression.GenerativeSelect.slice")方法将替换任何应用于[`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch")的子句。'
- en: 'New in version 1.4: Added the [`GenerativeSelect.slice()`](#sqlalchemy.sql.expression.GenerativeSelect.slice
    "sqlalchemy.sql.expression.GenerativeSelect.slice") method generalized from the
    ORM.'
  id: totrans-1486
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本1.4中：从ORM推广出[`GenerativeSelect.slice()`](#sqlalchemy.sql.expression.GenerativeSelect.slice
    "sqlalchemy.sql.expression.GenerativeSelect.slice")方法。
- en: See also
  id: totrans-1487
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit")'
  id: totrans-1488
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit")'
- en: '[`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset")'
  id: totrans-1489
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset")'
- en: '[`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch")'
  id: totrans-1490
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch")'
- en: '[PRE276]'
  id: totrans-1491
  prefs: []
  type: TYPE_PRE
  zh: '[PRE276]'
- en: '*inherited from the* [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  id: totrans-1492
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") *方法的* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
- en: Return a subquery of this [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase").
  id: totrans-1493
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此 [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")
    的子查询。
- en: A subquery is from a SQL perspective a parenthesized, named construct that can
    be placed in the FROM clause of another SELECT statement.
  id: totrans-1494
  prefs: []
  type: TYPE_NORMAL
  zh: 从SQL的角度来看，子查询是一种带有括号的命名构造，可以放置在另一个SELECT语句的FROM子句中。
- en: 'Given a SELECT statement such as:'
  id: totrans-1495
  prefs: []
  type: TYPE_NORMAL
  zh: 给定如下SELECT语句：
- en: '[PRE277]'
  id: totrans-1496
  prefs: []
  type: TYPE_PRE
  zh: '[PRE277]'
- en: 'The above statement might look like:'
  id: totrans-1497
  prefs: []
  type: TYPE_NORMAL
  zh: 上述语句看起来可能像这样：
- en: '[PRE278]'
  id: totrans-1498
  prefs: []
  type: TYPE_PRE
  zh: '[PRE278]'
- en: 'The subquery form by itself renders the same way, however when embedded into
    the FROM clause of another SELECT statement, it becomes a named sub-element:'
  id: totrans-1499
  prefs: []
  type: TYPE_NORMAL
  zh: 子查询本身以相同方式呈现，但是当嵌入到另一个SELECT语句的FROM子句中时，它就变成了一个命名子元素：
- en: '[PRE279]'
  id: totrans-1500
  prefs: []
  type: TYPE_PRE
  zh: '[PRE279]'
- en: 'The above renders as:'
  id: totrans-1501
  prefs: []
  type: TYPE_NORMAL
  zh: 上述呈现为：
- en: '[PRE280]'
  id: totrans-1502
  prefs: []
  type: TYPE_PRE
  zh: '[PRE280]'
- en: Historically, [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") is equivalent to calling the
    [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias "sqlalchemy.sql.expression.FromClause.alias")
    method on a FROM object; however, as a [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase") object is not directly FROM object, the
    [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery "sqlalchemy.sql.expression.SelectBase.subquery")
    method provides clearer semantics.
  id: totrans-1503
  prefs: []
  type: TYPE_NORMAL
  zh: 历史上，[`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") 等同于在 FROM 对象上调用 [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") 方法；然而，由于 [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase") 对象不是直接的 FROM 对象，所以 [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") 方法提供了更清晰的语义。
- en: New in version 1.4.
  id: totrans-1504
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本中新增。
- en: '[PRE281]'
  id: totrans-1505
  prefs: []
  type: TYPE_PRE
  zh: '[PRE281]'
- en: '*inherited from the* [`HasSuffixes.suffix_with()`](#sqlalchemy.sql.expression.HasSuffixes.suffix_with
    "sqlalchemy.sql.expression.HasSuffixes.suffix_with") *method of* [`HasSuffixes`](#sqlalchemy.sql.expression.HasSuffixes
    "sqlalchemy.sql.expression.HasSuffixes")'
  id: totrans-1506
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`HasSuffixes.suffix_with()`](#sqlalchemy.sql.expression.HasSuffixes.suffix_with
    "sqlalchemy.sql.expression.HasSuffixes.suffix_with") *方法的* [`HasSuffixes`](#sqlalchemy.sql.expression.HasSuffixes
    "sqlalchemy.sql.expression.HasSuffixes")'
- en: Add one or more expressions following the statement as a whole.
  id: totrans-1507
  prefs: []
  type: TYPE_NORMAL
  zh: 在语句之后添加一个或多个表达式。
- en: This is used to support backend-specific suffix keywords on certain constructs.
  id: totrans-1508
  prefs: []
  type: TYPE_NORMAL
  zh: 这用于支持在某些结构上的特定于后端的后缀关键字。
- en: 'E.g.:'
  id: totrans-1509
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE282]'
  id: totrans-1510
  prefs: []
  type: TYPE_PRE
  zh: '[PRE282]'
- en: Multiple suffixes can be specified by multiple calls to [`HasSuffixes.suffix_with()`](#sqlalchemy.sql.expression.HasSuffixes.suffix_with
    "sqlalchemy.sql.expression.HasSuffixes.suffix_with").
  id: totrans-1511
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过多次调用[`HasSuffixes.suffix_with()`](#sqlalchemy.sql.expression.HasSuffixes.suffix_with
    "sqlalchemy.sql.expression.HasSuffixes.suffix_with")来指定多个后缀。
- en: 'Parameters:'
  id: totrans-1512
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*suffixes` – textual or [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") construct which will be rendered following
    the target clause.'
  id: totrans-1513
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*suffixes` – 将在目标子句之后呈现的文本或[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")构造。'
- en: '`dialect` – Optional string dialect name which will limit rendering of this
    suffix to only that dialect.'
  id: totrans-1514
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect` – 可选的字符串方言名称，将此后缀的渲染限制为仅限于该方言。'
- en: '[PRE283]'
  id: totrans-1515
  prefs: []
  type: TYPE_PRE
  zh: '[PRE283]'
- en: Return a SQL `UNION` of this select() construct against the given selectables
    provided as positional arguments.
  id: totrans-1516
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此 select() 构造相对于作为位置参数提供的给定可选择对象的 SQL `UNION`。
- en: 'Parameters:'
  id: totrans-1517
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*other` –'
  id: totrans-1518
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*other` –'
- en: one or more elements with which to create a UNION.
  id: totrans-1519
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于创建 UNION 的一个或多个元素。
- en: 'Changed in version 1.4.28: multiple elements are now accepted.'
  id: totrans-1520
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本 1.4.28 开始更改：现在接受多个元素。
- en: '`**kwargs` – keyword arguments are forwarded to the constructor for the newly
    created [`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect "sqlalchemy.sql.expression.CompoundSelect")
    object.'
  id: totrans-1521
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kwargs` – 关键字参数将转发到新创建的[`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect
    "sqlalchemy.sql.expression.CompoundSelect")对象的构造函数。'
- en: '[PRE284]'
  id: totrans-1522
  prefs: []
  type: TYPE_PRE
  zh: '[PRE284]'
- en: Return a SQL `UNION ALL` of this select() construct against the given selectables
    provided as positional arguments.
  id: totrans-1523
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此 select() 构造相对于作为位置参数提供的给定可选择对象的 SQL `UNION ALL`。
- en: 'Parameters:'
  id: totrans-1524
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*other` –'
  id: totrans-1525
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*other` –'
- en: one or more elements with which to create a UNION.
  id: totrans-1526
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于创建 UNION 的一个或多个元素。
- en: 'Changed in version 1.4.28: multiple elements are now accepted.'
  id: totrans-1527
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本 1.4.28 开始更改：现在接受多个元素。
- en: '`**kwargs` – keyword arguments are forwarded to the constructor for the newly
    created [`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect "sqlalchemy.sql.expression.CompoundSelect")
    object.'
  id: totrans-1528
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kwargs` – 关键字参数将转发到新创建的[`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect
    "sqlalchemy.sql.expression.CompoundSelect")对象的构造函数。'
- en: '[PRE285]'
  id: totrans-1529
  prefs: []
  type: TYPE_PRE
  zh: '[PRE285]'
- en: Return a new [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    construct with the given expression added to its WHERE clause, joined to the existing
    clause via AND, if any.
  id: totrans-1530
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的 [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    构造，其中给定的表达式添加到其 WHERE 子句中，并通过 AND 连接到现有子句（如果有）。
- en: '[PRE286]'
  id: totrans-1531
  prefs: []
  type: TYPE_PRE
  zh: '[PRE286]'
- en: Return the completed WHERE clause for this [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") statement.
  id: totrans-1532
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此 [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    语句的完成 WHERE 子句。
- en: This assembles the current collection of WHERE criteria into a single `BooleanClauseList`
    construct.
  id: totrans-1533
  prefs: []
  type: TYPE_NORMAL
  zh: 将当前的 WHERE 条件集合装配成一个单个的 `BooleanClauseList` 构造。
- en: New in version 1.4.
  id: totrans-1534
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本中新增。
- en: '[PRE287]'
  id: totrans-1535
  prefs: []
  type: TYPE_PRE
  zh: '[PRE287]'
- en: '*inherited from the* [`GenerativeSelect.with_for_update()`](#sqlalchemy.sql.expression.GenerativeSelect.with_for_update
    "sqlalchemy.sql.expression.GenerativeSelect.with_for_update") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  id: totrans-1536
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`GenerativeSelect.with_for_update()`](#sqlalchemy.sql.expression.GenerativeSelect.with_for_update
    "sqlalchemy.sql.expression.GenerativeSelect.with_for_update") *方法的* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
- en: Specify a `FOR UPDATE` clause for this [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect").
  id: totrans-1537
  prefs: []
  type: TYPE_NORMAL
  zh: 为此 [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect "sqlalchemy.sql.expression.GenerativeSelect")
    指定一个 `FOR UPDATE` 子句。
- en: 'E.g.:'
  id: totrans-1538
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE288]'
  id: totrans-1539
  prefs: []
  type: TYPE_PRE
  zh: '[PRE288]'
- en: 'On a database like PostgreSQL or Oracle, the above would render a statement
    like:'
  id: totrans-1540
  prefs: []
  type: TYPE_NORMAL
  zh: 在像 PostgreSQL 或 Oracle 这样的数据库上，上述内容会呈现为如下语句：
- en: '[PRE289]'
  id: totrans-1541
  prefs: []
  type: TYPE_PRE
  zh: '[PRE289]'
- en: 'on other backends, the `nowait` option is ignored and instead would produce:'
  id: totrans-1542
  prefs: []
  type: TYPE_NORMAL
  zh: 在其他后端上，`nowait` 选项被忽略，而会产生：
- en: '[PRE290]'
  id: totrans-1543
  prefs: []
  type: TYPE_PRE
  zh: '[PRE290]'
- en: When called with no arguments, the statement will render with the suffix `FOR
    UPDATE`. Additional arguments can then be provided which allow for common database-specific
    variants.
  id: totrans-1544
  prefs: []
  type: TYPE_NORMAL
  zh: 当不带参数调用时，语句将以后缀 `FOR UPDATE` 呈现。然后可以提供其他参数，以允许常见的特定于数据库的变体。
- en: 'Parameters:'
  id: totrans-1545
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`nowait` – boolean; will render `FOR UPDATE NOWAIT` on Oracle and PostgreSQL
    dialects.'
  id: totrans-1546
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nowait` – 布尔值；将在 Oracle 和 PostgreSQL 方言上呈现 `FOR UPDATE NOWAIT`。'
- en: '`read` – boolean; will render `LOCK IN SHARE MODE` on MySQL, `FOR SHARE` on
    PostgreSQL. On PostgreSQL, when combined with `nowait`, will render `FOR SHARE
    NOWAIT`.'
  id: totrans-1547
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`read` – 布尔值；将在 MySQL 上呈现 `LOCK IN SHARE MODE`，在 PostgreSQL 上呈现 `FOR SHARE`。在
    PostgreSQL 上，当与 `nowait` 结合使用时，将呈现 `FOR SHARE NOWAIT`。'
- en: '`of` – SQL expression or list of SQL expression elements, (typically [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects or a compatible expression, for some backends
    may also be a table expression) which will render into a `FOR UPDATE OF` clause;
    supported by PostgreSQL, Oracle, some MySQL versions and possibly others. May
    render as a table or as a column depending on backend.'
  id: totrans-1548
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`of` – SQL 表达式或 SQL 表达式元素的列表（通常是 [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 对象或兼容的表达式，对于某些后端也可能是表达式），它们将呈现为 `FOR UPDATE OF` 子句；由
    PostgreSQL、Oracle、某些 MySQL 版本和可能其他后端支持。可能根据后端呈现为表或列。'
- en: '`skip_locked` – boolean, will render `FOR UPDATE SKIP LOCKED` on Oracle and
    PostgreSQL dialects or `FOR SHARE SKIP LOCKED` if `read=True` is also specified.'
  id: totrans-1549
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`skip_locked` – 布尔值，将在 Oracle 和 PostgreSQL 方言上呈现 `FOR UPDATE SKIP LOCKED`，或者如果也指定了
    `read=True`，则在 PostgreSQL 和 Oracle 方言上呈现 `FOR SHARE SKIP LOCKED`。'
- en: '`key_share` – boolean, will render `FOR NO KEY UPDATE`, or if combined with
    `read=True` will render `FOR KEY SHARE`, on the PostgreSQL dialect.'
  id: totrans-1550
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`key_share` – 布尔值，将在 PostgreSQL 方言上呈现 `FOR NO KEY UPDATE`，或者如果与 `read=True`
    结合使用，则在 PostgreSQL 方言上呈现 `FOR KEY SHARE`。'
- en: '[PRE291]'
  id: totrans-1551
  prefs: []
  type: TYPE_PRE
  zh: '[PRE291]'
- en: '*inherited from the* `HasHints.with_hint()` *method of* `HasHints`'
  id: totrans-1552
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `HasHints.with_hint()` *方法的* `HasHints`'
- en: Add an indexing or other executional context hint for the given selectable to
    this [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    or other selectable object.
  id: totrans-1553
  prefs: []
  type: TYPE_NORMAL
  zh: 为给定的可选择项添加索引或其他执行上下文提示到此 [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    或其他可选择项对象。
- en: 'The text of the hint is rendered in the appropriate location for the database
    backend in use, relative to the given [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") or [`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    passed as the `selectable` argument. The dialect implementation typically uses
    Python string substitution syntax with the token `%(name)s` to render the name
    of the table or alias. E.g. when using Oracle, the following:'
  id: totrans-1554
  prefs: []
  type: TYPE_NORMAL
  zh: 提示文本会根据所使用的数据库后端，在相应的位置呈现，相对于传递给 `selectable` 参数的 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 或 [`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")。方言实现通常使用
    Python 字符串替换语法，使用标记 `%(name)s` 来呈现表或别名的名称。例如，在使用 Oracle 时，以下内容：
- en: '[PRE292]'
  id: totrans-1555
  prefs: []
  type: TYPE_PRE
  zh: '[PRE292]'
- en: 'Would render SQL as:'
  id: totrans-1556
  prefs: []
  type: TYPE_NORMAL
  zh: 会呈现 SQL 如下：
- en: '[PRE293]'
  id: totrans-1557
  prefs: []
  type: TYPE_PRE
  zh: '[PRE293]'
- en: 'The `dialect_name` option will limit the rendering of a particular hint to
    a particular backend. Such as, to add hints for both Oracle and Sybase simultaneously:'
  id: totrans-1558
  prefs: []
  type: TYPE_NORMAL
  zh: '`dialect_name` 选项将限制特定提示的呈现到特定的后端。例如，同时为 Oracle 和 Sybase 添加提示：'
- en: '[PRE294]'
  id: totrans-1559
  prefs: []
  type: TYPE_PRE
  zh: '[PRE294]'
- en: See also
  id: totrans-1560
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Select.with_statement_hint()`](#sqlalchemy.sql.expression.Select.with_statement_hint
    "sqlalchemy.sql.expression.Select.with_statement_hint")'
  id: totrans-1561
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.with_statement_hint()`](#sqlalchemy.sql.expression.Select.with_statement_hint
    "sqlalchemy.sql.expression.Select.with_statement_hint")'
- en: '[PRE295]'
  id: totrans-1562
  prefs: []
  type: TYPE_PRE
  zh: '[PRE295]'
- en: Return a new [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    construct with its columns clause replaced with the given entities.
  id: totrans-1563
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的 [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    构造，其列子句替换为给定的实体。
- en: 'By default, this method is exactly equivalent to as if the original [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") had been called with the given entities. E.g.
    a statement:'
  id: totrans-1564
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，这个方法与原始的 [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    被调用时给���的实体完全等效。例如，一个语句：
- en: '[PRE296]'
  id: totrans-1565
  prefs: []
  type: TYPE_PRE
  zh: '[PRE296]'
- en: 'should be exactly equivalent to:'
  id: totrans-1566
  prefs: []
  type: TYPE_NORMAL
  zh: '应该完全等效于:'
- en: '[PRE297]'
  id: totrans-1567
  prefs: []
  type: TYPE_PRE
  zh: '[PRE297]'
- en: 'In this mode of operation, [`Select.with_only_columns()`](#sqlalchemy.sql.expression.Select.with_only_columns
    "sqlalchemy.sql.expression.Select.with_only_columns") will also dynamically alter
    the FROM clause of the statement if it is not explicitly stated. To maintain the
    existing set of FROMs including those implied by the current columns clause, add
    the [`Select.with_only_columns.maintain_column_froms`](#sqlalchemy.sql.expression.Select.with_only_columns.params.maintain_column_froms
    "sqlalchemy.sql.expression.Select.with_only_columns") parameter:'
  id: totrans-1568
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种操作模式下，如果没有明确说明，[`Select.with_only_columns()`](#sqlalchemy.sql.expression.Select.with_only_columns
    "sqlalchemy.sql.expression.Select.with_only_columns") 也会动态修改语句的 FROM 子句。为了保留当前列子句隐含的现有
    FROM 集合，包括那些暗示的列子句，添加 [`Select.with_only_columns.maintain_column_froms`](#sqlalchemy.sql.expression.Select.with_only_columns.params.maintain_column_froms
    "sqlalchemy.sql.expression.Select.with_only_columns") 参数：
- en: '[PRE298]'
  id: totrans-1569
  prefs: []
  type: TYPE_PRE
  zh: '[PRE298]'
- en: 'The above parameter performs a transfer of the effective FROMs in the columns
    collection to the [`Select.select_from()`](#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") method, as though the following
    were invoked:'
  id: totrans-1570
  prefs: []
  type: TYPE_NORMAL
  zh: 上述参数将在列集合中的有效 FROM 转移到 [`Select.select_from()`](#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") 方法中，就好像调用了以下内容：
- en: '[PRE299]'
  id: totrans-1571
  prefs: []
  type: TYPE_PRE
  zh: '[PRE299]'
- en: 'The [`Select.with_only_columns.maintain_column_froms`](#sqlalchemy.sql.expression.Select.with_only_columns.params.maintain_column_froms
    "sqlalchemy.sql.expression.Select.with_only_columns") parameter makes use of the
    [`Select.columns_clause_froms`](#sqlalchemy.sql.expression.Select.columns_clause_froms
    "sqlalchemy.sql.expression.Select.columns_clause_froms") collection and performs
    an operation equivalent to the following:'
  id: totrans-1572
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.with_only_columns.maintain_column_froms`](#sqlalchemy.sql.expression.Select.with_only_columns.params.maintain_column_froms
    "sqlalchemy.sql.expression.Select.with_only_columns") 参数利用了 [`Select.columns_clause_froms`](#sqlalchemy.sql.expression.Select.columns_clause_froms
    "sqlalchemy.sql.expression.Select.columns_clause_froms") 集合，并执行等效于以下操作：'
- en: '[PRE300]'
  id: totrans-1573
  prefs: []
  type: TYPE_PRE
  zh: '[PRE300]'
- en: 'Parameters:'
  id: totrans-1574
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*entities` – column expressions to be used.'
  id: totrans-1575
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*entities` – 要使用的列表达式。'
- en: '`maintain_column_froms` –'
  id: totrans-1576
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`maintain_column_froms` –'
- en: boolean parameter that will ensure the FROM list implied from the current columns
    clause will be transferred to the [`Select.select_from()`](#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") method first.
  id: totrans-1577
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个布尔参数，将确保从当前列子句暗示的 FROM 列表首先传递给 [`Select.select_from()`](#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") 方法。
- en: New in version 1.4.23.
  id: totrans-1578
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本 1.4.23 开始。
- en: '[PRE301]'
  id: totrans-1579
  prefs: []
  type: TYPE_PRE
  zh: '[PRE301]'
- en: '*inherited from the* `HasHints.with_statement_hint()` *method of* `HasHints`'
  id: totrans-1580
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `HasHints.with_statement_hint()` *方法的* `HasHints`'
- en: Add a statement hint to this [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    or other selectable object.
  id: totrans-1581
  prefs: []
  type: TYPE_NORMAL
  zh: 为这个 [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    或其他可选择对象添加一个语句提示。
- en: This method is similar to [`Select.with_hint()`](#sqlalchemy.sql.expression.Select.with_hint
    "sqlalchemy.sql.expression.Select.with_hint") except that it does not require
    an individual table, and instead applies to the statement as a whole.
  id: totrans-1582
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法类似于 [`Select.with_hint()`](#sqlalchemy.sql.expression.Select.with_hint "sqlalchemy.sql.expression.Select.with_hint")，但不需要单独的表，而是应用于整个语句。
- en: Hints here are specific to the backend database and may include directives such
    as isolation levels, file directives, fetch directives, etc.
  id: totrans-1583
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的提示是特定于后端数据库的，可能包括隔离级别、文件指令、提取指令等。
- en: See also
  id: totrans-1584
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Select.with_hint()`](#sqlalchemy.sql.expression.Select.with_hint "sqlalchemy.sql.expression.Select.with_hint")'
  id: totrans-1585
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.with_hint()`](#sqlalchemy.sql.expression.Select.with_hint "sqlalchemy.sql.expression.Select.with_hint")'
- en: '[`Select.prefix_with()`](#sqlalchemy.sql.expression.Select.prefix_with "sqlalchemy.sql.expression.Select.prefix_with")
    - generic SELECT prefixing which also can suit some database-specific HINT syntaxes
    such as MySQL optimizer hints'
  id: totrans-1586
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.prefix_with()`](#sqlalchemy.sql.expression.Select.prefix_with "sqlalchemy.sql.expression.Select.prefix_with")
    - 通用的 SELECT 前缀，也可以适用于一些特定于数据库的 HINT 语法，如 MySQL 优化提示'
- en: '[PRE302]'
  id: totrans-1587
  prefs: []
  type: TYPE_PRE
  zh: '[PRE302]'
- en: Mark a class as being selectable.
  id: totrans-1588
  prefs: []
  type: TYPE_NORMAL
  zh: 将一个类标记为可选择的。
- en: '**Members**'
  id: totrans-1589
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[corresponding_column()](#sqlalchemy.sql.expression.Selectable.corresponding_column),
    [exported_columns](#sqlalchemy.sql.expression.Selectable.exported_columns), [inherit_cache](#sqlalchemy.sql.expression.Selectable.inherit_cache),
    [is_derived_from()](#sqlalchemy.sql.expression.Selectable.is_derived_from), [lateral()](#sqlalchemy.sql.expression.Selectable.lateral),
    [replace_selectable()](#sqlalchemy.sql.expression.Selectable.replace_selectable)'
  id: totrans-1590
  prefs: []
  type: TYPE_NORMAL
  zh: '[corresponding_column()](#sqlalchemy.sql.expression.Selectable.corresponding_column),
    [exported_columns](#sqlalchemy.sql.expression.Selectable.exported_columns), [inherit_cache](#sqlalchemy.sql.expression.Selectable.inherit_cache),
    [is_derived_from()](#sqlalchemy.sql.expression.Selectable.is_derived_from), [lateral()](#sqlalchemy.sql.expression.Selectable.lateral),
    [replace_selectable()](#sqlalchemy.sql.expression.Selectable.replace_selectable)'
- en: '**Class signature**'
  id: totrans-1591
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable") ([`sqlalchemy.sql.expression.ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows
    "sqlalchemy.sql.expression.ReturnsRows"))
  id: totrans-1592
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.sql.expression.Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable") ([`sqlalchemy.sql.expression.ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows
    "sqlalchemy.sql.expression.ReturnsRows"))
- en: '[PRE303]'
  id: totrans-1593
  prefs: []
  type: TYPE_PRE
  zh: '[PRE303]'
- en: Given a [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"), return the exported [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") object from the [`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") collection of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable") which corresponds to that original [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") via a common ancestor column.
  id: totrans-1594
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")，从此[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns")的集合中返回与该原始[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")通过共同祖先列相对应的导出[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")对象。
- en: 'Parameters:'
  id: totrans-1595
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`column` – the target [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") to be matched.'
  id: totrans-1596
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`column` - 要匹配的目标[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")。'
- en: '`require_embedded` – only return corresponding columns for the given [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"), if the given [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") is actually present within a sub-element
    of this [`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable").
    Normally the column will match if it merely shares a common ancestor with one
    of the exported columns of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable").'
  id: totrans-1597
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`require_embedded` - 仅返回给定的[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")对应的列，如果给定的[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")实际上存在于此[`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")的子元素中。通常，如果列仅与此[`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")的导出列之一共享共同的祖先，则列将匹配。'
- en: See also
  id: totrans-1598
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") - the [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") that is used for the operation.'
  id: totrans-1599
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") - 用于操作的[`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")。'
- en: '[`ColumnCollection.corresponding_column()`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection.corresponding_column
    "sqlalchemy.sql.expression.ColumnCollection.corresponding_column") - implementation
    method.'
  id: totrans-1600
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnCollection.corresponding_column()`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection.corresponding_column
    "sqlalchemy.sql.expression.ColumnCollection.corresponding_column") - 实现方法。'
- en: '[PRE304]'
  id: totrans-1601
  prefs: []
  type: TYPE_PRE
  zh: '[PRE304]'
- en: '*inherited from the* [`ReturnsRows.exported_columns`](#sqlalchemy.sql.expression.ReturnsRows.exported_columns
    "sqlalchemy.sql.expression.ReturnsRows.exported_columns") *attribute of* [`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows
    "sqlalchemy.sql.expression.ReturnsRows")'
  id: totrans-1602
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ReturnsRows.exported_columns`](#sqlalchemy.sql.expression.ReturnsRows.exported_columns
    "sqlalchemy.sql.expression.ReturnsRows.exported_columns") *属性*，*的* [`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows
    "sqlalchemy.sql.expression.ReturnsRows")'
- en: A [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") that represents the “exported” columns
    of this [`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows "sqlalchemy.sql.expression.ReturnsRows").
  id: totrans-1603
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") 代表了这个 [`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows
    "sqlalchemy.sql.expression.ReturnsRows") 的“导出”列。
- en: The “exported” columns represent the collection of [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") expressions that are rendered by this
    SQL construct. There are primary varieties which are the “FROM clause columns”
    of a FROM clause, such as a table, join, or subquery, the “SELECTed columns”,
    which are the columns in the “columns clause” of a SELECT statement, and the RETURNING
    columns in a DML statement..
  id: totrans-1604
  prefs: []
  type: TYPE_NORMAL
  zh: “导出”列代表了这个 SQL 结构所呈现的 [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") 表达式的集合。有主要的变体是 FROM 子句的“FROM 子句列”，例如表、连接或子查询，被“SELECT”列选中，这些列是
    SELECT 语句的“columns clause”中的列，并且在 DML 语句中的 RETURNING 列。
- en: New in version 1.4.
  id: totrans-1605
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4 版中的新内容。
- en: See also
  id: totrans-1606
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`FromClause.exported_columns`](#sqlalchemy.sql.expression.FromClause.exported_columns
    "sqlalchemy.sql.expression.FromClause.exported_columns")'
  id: totrans-1607
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FromClause.exported_columns`](#sqlalchemy.sql.expression.FromClause.exported_columns
    "sqlalchemy.sql.expression.FromClause.exported_columns")'
- en: '[`SelectBase.exported_columns`](#sqlalchemy.sql.expression.SelectBase.exported_columns
    "sqlalchemy.sql.expression.SelectBase.exported_columns")'
  id: totrans-1608
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SelectBase.exported_columns`](#sqlalchemy.sql.expression.SelectBase.exported_columns
    "sqlalchemy.sql.expression.SelectBase.exported_columns")'
- en: '[PRE305]'
  id: totrans-1609
  prefs: []
  type: TYPE_PRE
  zh: '[PRE305]'
- en: '*inherited from the* `HasCacheKey.inherit_cache` *attribute of* [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.cache_key.HasCacheKey")'
  id: totrans-1610
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.cache_key.HasCacheKey") *的* `HasCacheKey.inherit_cache` *属性*。'
- en: Indicate if this [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") instance should make use of the cache
    key generation scheme used by its immediate superclass.
  id: totrans-1611
  prefs: []
  type: TYPE_NORMAL
  zh: 指示此 [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey "sqlalchemy.sql.traversals.HasCacheKey")
    实例是否应该使用其直接超类使用的缓存键生成方案。
- en: The attribute defaults to `None`, which indicates that a construct has not yet
    taken into account whether or not its appropriate for it to participate in caching;
    this is functionally equivalent to setting the value to `False`, except that a
    warning is also emitted.
  id: totrans-1612
  prefs: []
  type: TYPE_NORMAL
  zh: 该属性默认为 `None`，表示构造尚未考虑它是否适合参与缓存；这在功能上等同于将值设置为 `False`，只是还会发出警告。
- en: This flag can be set to `True` on a particular class, if the SQL that corresponds
    to the object does not change based on attributes which are local to this class,
    and not its superclass.
  id: totrans-1613
  prefs: []
  type: TYPE_NORMAL
  zh: 如果对象对应的 SQL 不会根据本类而不是其超类的属性而改变，那么可以将此标志设置为 `True`。
- en: See also
  id: totrans-1614
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Enabling Caching Support for Custom Constructs](compiler.html#compilerext-caching)
    - General guideslines for setting the [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute for third-party
    or user defined SQL constructs.'
  id: totrans-1615
  prefs: []
  type: TYPE_NORMAL
  zh: '[为自定义结构启用缓存支持](compiler.html#compilerext-caching) - 为第三方或用户定义的 SQL 结构设置 [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") 属性的一般指南。'
- en: '[PRE306]'
  id: totrans-1616
  prefs: []
  type: TYPE_PRE
  zh: '[PRE306]'
- en: '*inherited from the* [`ReturnsRows.is_derived_from()`](#sqlalchemy.sql.expression.ReturnsRows.is_derived_from
    "sqlalchemy.sql.expression.ReturnsRows.is_derived_from") *method of* [`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows
    "sqlalchemy.sql.expression.ReturnsRows")'
  id: totrans-1617
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ReturnsRows.is_derived_from()`](#sqlalchemy.sql.expression.ReturnsRows.is_derived_from
    "sqlalchemy.sql.expression.ReturnsRows.is_derived_from") *方法*，*的* [`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows
    "sqlalchemy.sql.expression.ReturnsRows")'
- en: Return `True` if this [`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows
    "sqlalchemy.sql.expression.ReturnsRows") is ‘derived’ from the given [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-1618
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此[`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows "sqlalchemy.sql.expression.ReturnsRows")是从给定的[`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")“派生”出来，则返回`True`。
- en: An example would be an Alias of a Table is derived from that Table.
  id: totrans-1619
  prefs: []
  type: TYPE_NORMAL
  zh: 一个示例是一个表的别名是从该表派生的。
- en: '[PRE307]'
  id: totrans-1620
  prefs: []
  type: TYPE_PRE
  zh: '[PRE307]'
- en: Return a LATERAL alias of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable").
  id: totrans-1621
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此[`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable")的LATERAL别名。
- en: The return value is the [`Lateral`](#sqlalchemy.sql.expression.Lateral "sqlalchemy.sql.expression.Lateral")
    construct also provided by the top-level [`lateral()`](#sqlalchemy.sql.expression.lateral
    "sqlalchemy.sql.expression.lateral") function.
  id: totrans-1622
  prefs: []
  type: TYPE_NORMAL
  zh: 返回值是顶层[`lateral()`](#sqlalchemy.sql.expression.lateral "sqlalchemy.sql.expression.lateral")函数提供的[`Lateral`](#sqlalchemy.sql.expression.Lateral
    "sqlalchemy.sql.expression.Lateral")构造。
- en: See also
  id: totrans-1623
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[LATERAL correlation](../tutorial/data_select.html#tutorial-lateral-correlation)
    - overview of usage.'
  id: totrans-1624
  prefs: []
  type: TYPE_NORMAL
  zh: '[LATERAL相关性](../tutorial/data_select.html#tutorial-lateral-correlation) - 用法概述。'
- en: '[PRE308]'
  id: totrans-1625
  prefs: []
  type: TYPE_PRE
  zh: '[PRE308]'
- en: Replace all occurrences of [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") ‘old’ with the given [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") object, returning a copy of this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-1626
  prefs: []
  type: TYPE_NORMAL
  zh: 用给定的[`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")对象替换所有[`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")‘old’的所有出现，返回此[`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")的副本。
- en: 'Deprecated since version 1.4: The [`Selectable.replace_selectable()`](#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") method is deprecated,
    and will be removed in a future release. Similar functionality is available via
    the sqlalchemy.sql.visitors module.'
  id: totrans-1627
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.4起弃用：[`Selectable.replace_selectable()`](#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable")方法已弃用，并将在将来的版本中删除。类似功能可通过sqlalchemy.sql.visitors模块获得。
- en: '[PRE309]'
  id: totrans-1628
  prefs: []
  type: TYPE_PRE
  zh: '[PRE309]'
- en: Base class for SELECT statements.
  id: totrans-1629
  prefs: []
  type: TYPE_NORMAL
  zh: SELECT语句的基类。
- en: This includes [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select"),
    [`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect "sqlalchemy.sql.expression.CompoundSelect")
    and [`TextualSelect`](#sqlalchemy.sql.expression.TextualSelect "sqlalchemy.sql.expression.TextualSelect").
  id: totrans-1630
  prefs: []
  type: TYPE_NORMAL
  zh: 这包括[`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")、[`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect
    "sqlalchemy.sql.expression.CompoundSelect")和[`TextualSelect`](#sqlalchemy.sql.expression.TextualSelect
    "sqlalchemy.sql.expression.TextualSelect")。
- en: '**Members**'
  id: totrans-1631
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[add_cte()](#sqlalchemy.sql.expression.SelectBase.add_cte), [alias()](#sqlalchemy.sql.expression.SelectBase.alias),
    [as_scalar()](#sqlalchemy.sql.expression.SelectBase.as_scalar), [c](#sqlalchemy.sql.expression.SelectBase.c),
    [corresponding_column()](#sqlalchemy.sql.expression.SelectBase.corresponding_column),
    [cte()](#sqlalchemy.sql.expression.SelectBase.cte), [exists()](#sqlalchemy.sql.expression.SelectBase.exists),
    [exported_columns](#sqlalchemy.sql.expression.SelectBase.exported_columns), [get_label_style()](#sqlalchemy.sql.expression.SelectBase.get_label_style),
    [inherit_cache](#sqlalchemy.sql.expression.SelectBase.inherit_cache), [is_derived_from()](#sqlalchemy.sql.expression.SelectBase.is_derived_from),
    [label()](#sqlalchemy.sql.expression.SelectBase.label), [lateral()](#sqlalchemy.sql.expression.SelectBase.lateral),
    [replace_selectable()](#sqlalchemy.sql.expression.SelectBase.replace_selectable),
    [scalar_subquery()](#sqlalchemy.sql.expression.SelectBase.scalar_subquery), [select()](#sqlalchemy.sql.expression.SelectBase.select),
    [selected_columns](#sqlalchemy.sql.expression.SelectBase.selected_columns), [set_label_style()](#sqlalchemy.sql.expression.SelectBase.set_label_style),
    [subquery()](#sqlalchemy.sql.expression.SelectBase.subquery)'
  id: totrans-1632
  prefs: []
  type: TYPE_NORMAL
  zh: '[add_cte()](#sqlalchemy.sql.expression.SelectBase.add_cte), [alias()](#sqlalchemy.sql.expression.SelectBase.alias),
    [as_scalar()](#sqlalchemy.sql.expression.SelectBase.as_scalar), [c](#sqlalchemy.sql.expression.SelectBase.c),
    [corresponding_column()](#sqlalchemy.sql.expression.SelectBase.corresponding_column),
    [cte()](#sqlalchemy.sql.expression.SelectBase.cte), [exists()](#sqlalchemy.sql.expression.SelectBase.exists),
    [exported_columns](#sqlalchemy.sql.expression.SelectBase.exported_columns), [get_label_style()](#sqlalchemy.sql.expression.SelectBase.get_label_style),
    [inherit_cache](#sqlalchemy.sql.expression.SelectBase.inherit_cache), [is_derived_from()](#sqlalchemy.sql.expression.SelectBase.is_derived_from),
    [label()](#sqlalchemy.sql.expression.SelectBase.label), [lateral()](#sqlalchemy.sql.expression.SelectBase.lateral),
    [replace_selectable()](#sqlalchemy.sql.expression.SelectBase.replace_selectable),
    [scalar_subquery()](#sqlalchemy.sql.expression.SelectBase.scalar_subquery), [select()](#sqlalchemy.sql.expression.SelectBase.select),
    [selected_columns](#sqlalchemy.sql.expression.SelectBase.selected_columns), [set_label_style()](#sqlalchemy.sql.expression.SelectBase.set_label_style),
    [subquery()](#sqlalchemy.sql.expression.SelectBase.subquery)'
- en: '**Class signature**'
  id: totrans-1633
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase") (`sqlalchemy.sql.roles.SelectStatementRole`,
    `sqlalchemy.sql.roles.DMLSelectRole`, `sqlalchemy.sql.roles.CompoundElementRole`,
    `sqlalchemy.sql.roles.InElementRole`, [`sqlalchemy.sql.expression.HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE"), `sqlalchemy.sql.annotation.SupportsCloneAnnotations`,
    [`sqlalchemy.sql.expression.Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable"))
  id: totrans-1634
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.expression.SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase") (`sqlalchemy.sql.roles.SelectStatementRole`,
    `sqlalchemy.sql.roles.DMLSelectRole`, `sqlalchemy.sql.roles.CompoundElementRole`,
    `sqlalchemy.sql.roles.InElementRole`, [`sqlalchemy.sql.expression.HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE"), `sqlalchemy.sql.annotation.SupportsCloneAnnotations`,
    [`sqlalchemy.sql.expression.Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable"))
- en: '[PRE310]'
  id: totrans-1635
  prefs: []
  type: TYPE_PRE
  zh: '[PRE310]'
- en: '*inherited from the* [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") *method of* [`HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE")'
  id: totrans-1636
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte "sqlalchemy.sql.expression.HasCTE.add_cte")
    *方法的* [`HasCTE`](#sqlalchemy.sql.expression.HasCTE "sqlalchemy.sql.expression.HasCTE")'
- en: Add one or more [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    constructs to this statement.
  id: totrans-1637
  prefs: []
  type: TYPE_NORMAL
  zh: 向此语句添加一个或多个 [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    构造。
- en: This method will associate the given [`CTE`](#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE") constructs with the parent statement such that
    they will each be unconditionally rendered in the WITH clause of the final statement,
    even if not referenced elsewhere within the statement or any sub-selects.
  id: totrans-1638
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法将给定的 [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    构造与父语句关联，以便它们将在最终语句的 WITH 子句中无条件地呈现，即使在语句或任何子选择中没有其他地方引用它们。
- en: The optional [`HasCTE.add_cte.nest_here`](#sqlalchemy.sql.expression.HasCTE.add_cte.params.nest_here
    "sqlalchemy.sql.expression.HasCTE.add_cte") parameter when set to True will have
    the effect that each given [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    will render in a WITH clause rendered directly along with this statement, rather
    than being moved to the top of the ultimate rendered statement, even if this statement
    is rendered as a subquery within a larger statement.
  id: totrans-1639
  prefs: []
  type: TYPE_NORMAL
  zh: 可选的 [`HasCTE.add_cte.nest_here`](#sqlalchemy.sql.expression.HasCTE.add_cte.params.nest_here
    "sqlalchemy.sql.expression.HasCTE.add_cte") 参数设置为 True 时，每个给定的 [`CTE`](#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE") 将以一个 WITH 子句的形式直接与此语句一起呈现，而不是被移动到最终呈现语句的顶部，即使此语句作为一个子查询在较大的语句中被呈现。
- en: This method has two general uses. One is to embed CTE statements that serve
    some purpose without being referenced explicitly, such as the use case of embedding
    a DML statement such as an INSERT or UPDATE as a CTE inline with a primary statement
    that may draw from its results indirectly. The other is to provide control over
    the exact placement of a particular series of CTE constructs that should remain
    rendered directly in terms of a particular statement that may be nested in a larger
    statement.
  id: totrans-1640
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法有两个通用用途。一个是嵌入一些没有被显式引用的 CTE 语句，比如将 DML 语句（比如 INSERT 或 UPDATE）作为 CTE 内联到一个主要语句中，这个主要语句可能间接地引用其结果。另一个是提供对一系列
    CTE 构造的确切放置位置的控制，这些构造应该保持直接在一个特定语句中呈现，而这个语句可能嵌套在一个较大的语句中。
- en: 'E.g.:'
  id: totrans-1641
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE311]'
  id: totrans-1642
  prefs: []
  type: TYPE_PRE
  zh: '[PRE311]'
- en: 'Would render:'
  id: totrans-1643
  prefs: []
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE312]'
  id: totrans-1644
  prefs: []
  type: TYPE_PRE
  zh: '[PRE312]'
- en: Above, the “anon_1” CTE is not referenced in the SELECT statement, however still
    accomplishes the task of running an INSERT statement.
  id: totrans-1645
  prefs: []
  type: TYPE_NORMAL
  zh: 上面，“anon_1” CTE 在 SELECT 语句中没有被引用，但仍然完成了运行 INSERT 语句的任务。
- en: 'Similarly in a DML-related context, using the PostgreSQL [`Insert`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Insert
    "sqlalchemy.dialects.postgresql.Insert") construct to generate an “upsert”:'
  id: totrans-1646
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，在与 DML 相关的上下文中，使用 PostgreSQL 的 [`Insert`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Insert
    "sqlalchemy.dialects.postgresql.Insert") 构造来生成“upsert”：
- en: '[PRE313]'
  id: totrans-1647
  prefs: []
  type: TYPE_PRE
  zh: '[PRE313]'
- en: 'The above statement renders as:'
  id: totrans-1648
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的语句呈现为：
- en: '[PRE314]'
  id: totrans-1649
  prefs: []
  type: TYPE_PRE
  zh: '[PRE314]'
- en: New in version 1.4.21.
  id: totrans-1650
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4.21 版本中新增。
- en: 'Parameters:'
  id: totrans-1651
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*ctes` –'
  id: totrans-1652
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*ctes` -'
- en: zero or more [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    constructs.
  id: totrans-1653
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 零个或多个 [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    构造。
- en: 'Changed in version 2.0: Multiple CTE instances are accepted'
  id: totrans-1654
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从 2.0 版本开始更改：接受多个 CTE 实例
- en: '`nest_here` –'
  id: totrans-1655
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nest_here` -'
- en: if True, the given CTE or CTEs will be rendered as though they specified the
    [`HasCTE.cte.nesting`](#sqlalchemy.sql.expression.HasCTE.cte.params.nesting "sqlalchemy.sql.expression.HasCTE.cte")
    flag to `True` when they were added to this [`HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE"). Assuming the given CTEs are not referenced
    in an outer-enclosing statement as well, the CTEs given should render at the level
    of this statement when this flag is given.
  id: totrans-1656
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果为 True，则给定的 CTE 或 CTEs 将被呈现为如果它们在被添加到此 [`HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE") 时指定了 [`HasCTE.cte.nesting`](#sqlalchemy.sql.expression.HasCTE.cte.params.nesting
    "sqlalchemy.sql.expression.HasCTE.cte") 标志为 `True`。假设给定的 CTEs 在外部封闭语句中也没有被引用，那么当给出此标志时，给定的
    CTEs 应该在此语句的级别呈现。
- en: New in version 2.0.
  id: totrans-1657
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 2.0 版本中新增。
- en: See also
  id: totrans-1658
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[`HasCTE.cte.nesting`](#sqlalchemy.sql.expression.HasCTE.cte.params.nesting
    "sqlalchemy.sql.expression.HasCTE.cte")'
  id: totrans-1659
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`HasCTE.cte.nesting`](#sqlalchemy.sql.expression.HasCTE.cte.params.nesting
    "sqlalchemy.sql.expression.HasCTE.cte")'
- en: '[PRE315]'
  id: totrans-1660
  prefs: []
  type: TYPE_PRE
  zh: '[PRE315]'
- en: Return a named subquery against this [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase").
  id: totrans-1661
  prefs: []
  type: TYPE_NORMAL
  zh: 返回针对此 [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")
    的命名子查询。
- en: For a [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")
    (as opposed to a [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")),
    this returns a [`Subquery`](#sqlalchemy.sql.expression.Subquery "sqlalchemy.sql.expression.Subquery")
    object which behaves mostly the same as the [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") object that is used with a [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-1662
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")（与
    [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    相对），这将返回一个 [`Subquery`](#sqlalchemy.sql.expression.Subquery "sqlalchemy.sql.expression.Subquery")
    对象，其行为与与 [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    一起使用的 [`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    对象基本相同。
- en: 'Changed in version 1.4: The [`SelectBase.alias()`](#sqlalchemy.sql.expression.SelectBase.alias
    "sqlalchemy.sql.expression.SelectBase.alias") method is now a synonym for the
    [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery "sqlalchemy.sql.expression.SelectBase.subquery")
    method.'
  id: totrans-1663
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.4版本中更改：[`SelectBase.alias()`](#sqlalchemy.sql.expression.SelectBase.alias
    "sqlalchemy.sql.expression.SelectBase.alias") 方法现在是 [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") 方法的同义词。
- en: '[PRE316]'
  id: totrans-1664
  prefs: []
  type: TYPE_PRE
  zh: '[PRE316]'
- en: 'Deprecated since version 1.4: The [`SelectBase.as_scalar()`](#sqlalchemy.sql.expression.SelectBase.as_scalar
    "sqlalchemy.sql.expression.SelectBase.as_scalar") method is deprecated and will
    be removed in a future release. Please refer to [`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery").'
  id: totrans-1665
  prefs: []
  type: TYPE_NORMAL
  zh: 自1.4版本起已弃用：[`SelectBase.as_scalar()`](#sqlalchemy.sql.expression.SelectBase.as_scalar
    "sqlalchemy.sql.expression.SelectBase.as_scalar") 方法已弃用，并将在以后的版本中移除。请参考 [`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery")。
- en: '[PRE317]'
  id: totrans-1666
  prefs: []
  type: TYPE_PRE
  zh: '[PRE317]'
- en: 'Deprecated since version 1.4: The [`SelectBase.c`](#sqlalchemy.sql.expression.SelectBase.c
    "sqlalchemy.sql.expression.SelectBase.c") and `SelectBase.columns` attributes
    are deprecated and will be removed in a future release; these attributes implicitly
    create a subquery that should be explicit. Please call [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") first in order to create a subquery,
    which then contains this attribute. To access the columns that this SELECT object
    SELECTs from, use the [`SelectBase.selected_columns`](#sqlalchemy.sql.expression.SelectBase.selected_columns
    "sqlalchemy.sql.expression.SelectBase.selected_columns") attribute.'
  id: totrans-1667
  prefs: []
  type: TYPE_NORMAL
  zh: 自1.4版本起已弃用：[`SelectBase.c`](#sqlalchemy.sql.expression.SelectBase.c "sqlalchemy.sql.expression.SelectBase.c")
    和 `SelectBase.columns` 属性已弃用，并将在以后的版本中移除；这些属性隐式创建一个应该明确的子查询。请首先调用 [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") 来创建一个子查询，然后再使用此属性。要访问此 SELECT
    对象从中选择的列，请使用 [`SelectBase.selected_columns`](#sqlalchemy.sql.expression.SelectBase.selected_columns
    "sqlalchemy.sql.expression.SelectBase.selected_columns") 属性。
- en: '[PRE318]'
  id: totrans-1668
  prefs: []
  type: TYPE_PRE
  zh: '[PRE318]'
- en: '*inherited from the* [`Selectable.corresponding_column()`](#sqlalchemy.sql.expression.Selectable.corresponding_column
    "sqlalchemy.sql.expression.Selectable.corresponding_column") *method of* [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
  id: totrans-1669
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Selectable.corresponding_column()`](#sqlalchemy.sql.expression.Selectable.corresponding_column
    "sqlalchemy.sql.expression.Selectable.corresponding_column") *方法的* [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable") *对象*'
- en: Given a [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"), return the exported [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") object from the [`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") collection of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable") which corresponds to that original [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") via a common ancestor column.
  id: totrans-1670
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个 [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")，返回此 [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable") 的导出 [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") 对象，该对象通过共同的祖先列与原始 [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") 对应。
- en: 'Parameters:'
  id: totrans-1671
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`column` – the target [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") to be matched.'
  id: totrans-1672
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`column` – 要匹配的目标 [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")。'
- en: '`require_embedded` – only return corresponding columns for the given [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"), if the given [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") is actually present within a sub-element
    of this [`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable").
    Normally the column will match if it merely shares a common ancestor with one
    of the exported columns of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable").'
  id: totrans-1673
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`require_embedded` – 仅返回给定 [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") 的相应列，如果给定的 [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") 实际上存在于此 [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable") 的子元素中。通常情况下，如果该列仅仅与此 [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable") 的导出列之一共享共同的祖先，则列将匹配。'
- en: See also
  id: totrans-1674
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") - the [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") that is used for the operation.'
  id: totrans-1675
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") - 用于操作的 [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")。'
- en: '[`ColumnCollection.corresponding_column()`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection.corresponding_column
    "sqlalchemy.sql.expression.ColumnCollection.corresponding_column") - implementation
    method.'
  id: totrans-1676
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnCollection.corresponding_column()`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection.corresponding_column
    "sqlalchemy.sql.expression.ColumnCollection.corresponding_column") - 实现方法。'
- en: '[PRE319]'
  id: totrans-1677
  prefs: []
  type: TYPE_PRE
  zh: '[PRE319]'
- en: '*inherited from the* [`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte
    "sqlalchemy.sql.expression.HasCTE.cte") *method of* [`HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE")'
  id: totrans-1678
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte "sqlalchemy.sql.expression.HasCTE.cte")
    *方法的* [`HasCTE`](#sqlalchemy.sql.expression.HasCTE "sqlalchemy.sql.expression.HasCTE")'
- en: Return a new [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE"),
    or Common Table Expression instance.
  id: totrans-1679
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的 [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")，或通用表达式实例。
- en: Common table expressions are a SQL standard whereby SELECT statements can draw
    upon secondary statements specified along with the primary statement, using a
    clause called “WITH”. Special semantics regarding UNION can also be employed to
    allow “recursive” queries, where a SELECT statement can draw upon the set of rows
    that have previously been selected.
  id: totrans-1680
  prefs: []
  type: TYPE_NORMAL
  zh: 通用表达式（Common table expressions）是 SQL 标准的一部分，SELECT 语句可以在主语句的基础上引用指定的辅助语句，使用一个叫做“WITH”的子句。特殊的关于
    UNION 的语义也可以被采用，以允许“递归”查询，其中一个 SELECT 语句可以引用之前已经被选定的行的集合。
- en: CTEs can also be applied to DML constructs UPDATE, INSERT and DELETE on some
    databases, both as a source of CTE rows when combined with RETURNING, as well
    as a consumer of CTE rows.
  id: totrans-1681
  prefs: []
  type: TYPE_NORMAL
  zh: CTEs 也可以应用于 DML 构造 UPDATE、INSERT 和 DELETE 在一些数据库上，既作为与 RETURNING 结合使用时的 CTE
    行的来源，也作为 CTE 行的消费者。
- en: SQLAlchemy detects [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    objects, which are treated similarly to [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") objects, as special elements to be delivered
    to the FROM clause of the statement as well as to a WITH clause at the top of
    the statement.
  id: totrans-1682
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 检测到 [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    对象，它们被视为类似于 [`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    对象，作为特殊元素交付给语句的 FROM 子句以及语句顶部的 WITH 子句。
- en: For special prefixes such as PostgreSQL “MATERIALIZED” and “NOT MATERIALIZED”,
    the `CTE.prefix_with()` method may be used to establish these.
  id: totrans-1683
  prefs: []
  type: TYPE_NORMAL
  zh: 对于像 PostgreSQL 的“MATERIALIZED”和“NOT MATERIALIZED”这样的特殊前缀，可以使用 `CTE.prefix_with()`
    方法来建立这些前缀。
- en: 'Changed in version 1.3.13: Added support for prefixes. In particular - MATERIALIZED
    and NOT MATERIALIZED.'
  id: totrans-1684
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.3.13 中的更改：增加了对前缀的支持。具体来说 - MATERIALIZED 和 NOT MATERIALIZED。
- en: 'Parameters:'
  id: totrans-1685
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`name` – name given to the common table expression. Like [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias"), the name can be left as `None`
    in which case an anonymous symbol will be used at query compile time.'
  id: totrans-1686
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 给通用表达式的名称。像 [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") 一样，名称可以保持为 `None`，在这种情况下，将在查询编译时使用一个匿名符号。'
- en: '`recursive` – if `True`, will render `WITH RECURSIVE`. A recursive common table
    expression is intended to be used in conjunction with UNION ALL in order to derive
    rows from those already selected.'
  id: totrans-1687
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`recursive` – 如果`True`，将呈现`WITH RECURSIVE`。递归公共表达式旨在与 UNION ALL 结合使用，以从已选择的行中派生行。'
- en: '`nesting` –'
  id: totrans-1688
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nesting` –'
- en: if `True`, will render the CTE locally to the statement in which it is referenced.
    For more complex scenarios, the [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") method using the [`HasCTE.add_cte.nest_here`](#sqlalchemy.sql.expression.HasCTE.add_cte.params.nest_here
    "sqlalchemy.sql.expression.HasCTE.add_cte") parameter may also be used to more
    carefully control the exact placement of a particular CTE.
  id: totrans-1689
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果`True`，将在引用它的语句中本地呈现 CTE。对于更复杂的情况，也可以使用[`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte")方法，使用[`HasCTE.add_cte.nest_here`](#sqlalchemy.sql.expression.HasCTE.add_cte.params.nest_here
    "sqlalchemy.sql.expression.HasCTE.add_cte")参数更精确地控制特定 CTE 的确切放置。
- en: New in version 1.4.24.
  id: totrans-1690
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版本 1.4.24。
- en: See also
  id: totrans-1691
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte "sqlalchemy.sql.expression.HasCTE.add_cte")'
  id: totrans-1692
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte "sqlalchemy.sql.expression.HasCTE.add_cte")'
- en: The following examples include two from PostgreSQL’s documentation at [https://www.postgresql.org/docs/current/static/queries-with.html](https://www.postgresql.org/docs/current/static/queries-with.html),
    as well as additional examples.
  id: totrans-1693
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例包括两个来自 PostgreSQL 文档的示例，网址为 [https://www.postgresql.org/docs/current/static/queries-with.html](https://www.postgresql.org/docs/current/static/queries-with.html)，以及其他示例。
- en: 'Example 1, non recursive:'
  id: totrans-1694
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 1，非递归：
- en: '[PRE320]'
  id: totrans-1695
  prefs: []
  type: TYPE_PRE
  zh: '[PRE320]'
- en: 'Example 2, WITH RECURSIVE:'
  id: totrans-1696
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 2，WITH RECURSIVE：
- en: '[PRE321]'
  id: totrans-1697
  prefs: []
  type: TYPE_PRE
  zh: '[PRE321]'
- en: 'Example 3, an upsert using UPDATE and INSERT with CTEs:'
  id: totrans-1698
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 3，使用 UPDATE 和 INSERT 进行 upsert 与 CTEs：
- en: '[PRE322]'
  id: totrans-1699
  prefs: []
  type: TYPE_PRE
  zh: '[PRE322]'
- en: 'Example 4, Nesting CTE (SQLAlchemy 1.4.24 and above):'
  id: totrans-1700
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 4���嵌套 CTE（SQLAlchemy 1.4.24 及以上版本）：
- en: '[PRE323]'
  id: totrans-1701
  prefs: []
  type: TYPE_PRE
  zh: '[PRE323]'
- en: 'The above query will render the second CTE nested inside the first, shown with
    inline parameters below as:'
  id: totrans-1702
  prefs: []
  type: TYPE_NORMAL
  zh: 上述查询将呈现第二个 CTE 嵌套在第一个内部，如下所示：
- en: '[PRE324]'
  id: totrans-1703
  prefs: []
  type: TYPE_PRE
  zh: '[PRE324]'
- en: 'The same CTE can be set up using the [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") method as follows (SQLAlchemy 2.0
    and above):'
  id: totrans-1704
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下方式设置相同的 CTE，使用[`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte")方法（SQLAlchemy 2.0 及以上版本）：
- en: '[PRE325]'
  id: totrans-1705
  prefs: []
  type: TYPE_PRE
  zh: '[PRE325]'
- en: 'Example 5, Non-Linear CTE (SQLAlchemy 1.4.28 and above):'
  id: totrans-1706
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 5，非线性 CTE（SQLAlchemy 1.4.28 及以上版本）：
- en: '[PRE326]'
  id: totrans-1707
  prefs: []
  type: TYPE_PRE
  zh: '[PRE326]'
- en: 'The above query will render 2 UNIONs inside the recursive CTE:'
  id: totrans-1708
  prefs: []
  type: TYPE_NORMAL
  zh: 上述查询将在递归 CTE 内呈现 2 个 UNION：
- en: '[PRE327]'
  id: totrans-1709
  prefs: []
  type: TYPE_PRE
  zh: '[PRE327]'
- en: See also
  id: totrans-1710
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Query.cte()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.cte "sqlalchemy.orm.Query.cte")
    - ORM version of [`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte "sqlalchemy.sql.expression.HasCTE.cte").'
  id: totrans-1711
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.cte()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.cte "sqlalchemy.orm.Query.cte")
    - [`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte "sqlalchemy.sql.expression.HasCTE.cte")
    的 ORM 版本。'
- en: '[PRE328]'
  id: totrans-1712
  prefs: []
  type: TYPE_PRE
  zh: '[PRE328]'
- en: Return an [`Exists`](#sqlalchemy.sql.expression.Exists "sqlalchemy.sql.expression.Exists")
    representation of this selectable, which can be used as a column expression.
  id: totrans-1713
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此可选择的[`Exists`](#sqlalchemy.sql.expression.Exists "sqlalchemy.sql.expression.Exists")表示，可用作列表达式。
- en: The returned object is an instance of [`Exists`](#sqlalchemy.sql.expression.Exists
    "sqlalchemy.sql.expression.Exists").
  id: totrans-1714
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的对象是[`Exists`](#sqlalchemy.sql.expression.Exists "sqlalchemy.sql.expression.Exists")的实例。
- en: See also
  id: totrans-1715
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`exists()`](#sqlalchemy.sql.expression.exists "sqlalchemy.sql.expression.exists")'
  id: totrans-1716
  prefs: []
  type: TYPE_NORMAL
  zh: '[`exists()`](#sqlalchemy.sql.expression.exists "sqlalchemy.sql.expression.exists")'
- en: '[EXISTS subqueries](../tutorial/data_select.html#tutorial-exists) - in the
    [2.0 style](../glossary.html#term-2.0-style) tutorial.'
  id: totrans-1717
  prefs: []
  type: TYPE_NORMAL
  zh: '[EXISTS 子查询](../tutorial/data_select.html#tutorial-exists) - 在[2.0 风格](../glossary.html#term-2.0-style)教程中。'
- en: New in version 1.4.
  id: totrans-1718
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4。
- en: '[PRE329]'
  id: totrans-1719
  prefs: []
  type: TYPE_PRE
  zh: '[PRE329]'
- en: A [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") that represents the “exported” columns
    of this [`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable"),
    not including [`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause") constructs.
  id: totrans-1720
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")，表示此[`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")的“导出”列，不包括[`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause")构造。
- en: The “exported” columns for a [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase") object are synonymous with the [`SelectBase.selected_columns`](#sqlalchemy.sql.expression.SelectBase.selected_columns
    "sqlalchemy.sql.expression.SelectBase.selected_columns") collection.
  id: totrans-1721
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")
    对象的“导出”列与 [`SelectBase.selected_columns`](#sqlalchemy.sql.expression.SelectBase.selected_columns
    "sqlalchemy.sql.expression.SelectBase.selected_columns") 集合是同义词。'
- en: New in version 1.4.
  id: totrans-1722
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中的新功能。
- en: See also
  id: totrans-1723
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Select.exported_columns`](#sqlalchemy.sql.expression.Select.exported_columns
    "sqlalchemy.sql.expression.Select.exported_columns")'
  id: totrans-1724
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.exported_columns`](#sqlalchemy.sql.expression.Select.exported_columns
    "sqlalchemy.sql.expression.Select.exported_columns")'
- en: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns")'
  id: totrans-1725
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns")'
- en: '[`FromClause.exported_columns`](#sqlalchemy.sql.expression.FromClause.exported_columns
    "sqlalchemy.sql.expression.FromClause.exported_columns")'
  id: totrans-1726
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FromClause.exported_columns`](#sqlalchemy.sql.expression.FromClause.exported_columns
    "sqlalchemy.sql.expression.FromClause.exported_columns")'
- en: '[PRE330]'
  id: totrans-1727
  prefs: []
  type: TYPE_PRE
  zh: '[PRE330]'
- en: Retrieve the current label style.
  id: totrans-1728
  prefs: []
  type: TYPE_NORMAL
  zh: 检索当前标签样式。
- en: Implemented by subclasses.
  id: totrans-1729
  prefs: []
  type: TYPE_NORMAL
  zh: 由子类实现。
- en: '[PRE331]'
  id: totrans-1730
  prefs: []
  type: TYPE_PRE
  zh: '[PRE331]'
- en: '*inherited from the* `HasCacheKey.inherit_cache` *attribute of* [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.cache_key.HasCacheKey")'
  id: totrans-1731
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.cache_key.HasCacheKey") *的* `HasCacheKey.inherit_cache` *属性。'
- en: Indicate if this [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") instance should make use of the cache
    key generation scheme used by its immediate superclass.
  id: totrans-1732
  prefs: []
  type: TYPE_NORMAL
  zh: 指示此 [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey "sqlalchemy.sql.traversals.HasCacheKey")
    实例是否应使用其直接超类使用的缓存键生成方案。
- en: The attribute defaults to `None`, which indicates that a construct has not yet
    taken into account whether or not its appropriate for it to participate in caching;
    this is functionally equivalent to setting the value to `False`, except that a
    warning is also emitted.
  id: totrans-1733
  prefs: []
  type: TYPE_NORMAL
  zh: 该属性默认为`None`，表示构造尚未考虑其是否适合参与缓存；这在功能上等同于将值设置为`False`，只是还会发出警告。
- en: This flag can be set to `True` on a particular class, if the SQL that corresponds
    to the object does not change based on attributes which are local to this class,
    and not its superclass.
  id: totrans-1734
  prefs: []
  type: TYPE_NORMAL
  zh: 如果与对象对应的 SQL 不会根据本类而不是其超类的属性而改变，则可以在特定类上将此标志设置为`True`。
- en: See also
  id: totrans-1735
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Enabling Caching Support for Custom Constructs](compiler.html#compilerext-caching)
    - General guideslines for setting the [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute for third-party
    or user defined SQL constructs.'
  id: totrans-1736
  prefs: []
  type: TYPE_NORMAL
  zh: '[为自定义构造启用缓存支持](compiler.html#compilerext-caching) - 设置第三方或用户定义的 SQL 构造的 [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") 属性的一般指南。'
- en: '[PRE332]'
  id: totrans-1737
  prefs: []
  type: TYPE_PRE
  zh: '[PRE332]'
- en: '*inherited from the* [`ReturnsRows.is_derived_from()`](#sqlalchemy.sql.expression.ReturnsRows.is_derived_from
    "sqlalchemy.sql.expression.ReturnsRows.is_derived_from") *method of* [`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows
    "sqlalchemy.sql.expression.ReturnsRows")'
  id: totrans-1738
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows "sqlalchemy.sql.expression.ReturnsRows")
    *的* [`ReturnsRows.is_derived_from()`](#sqlalchemy.sql.expression.ReturnsRows.is_derived_from
    "sqlalchemy.sql.expression.ReturnsRows.is_derived_from") *方法。'
- en: Return `True` if this [`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows
    "sqlalchemy.sql.expression.ReturnsRows") is ‘derived’ from the given [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-1739
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此 [`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows "sqlalchemy.sql.expression.ReturnsRows")
    是从给定的 [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    ‘派生’，则返回`True`。
- en: An example would be an Alias of a Table is derived from that Table.
  id: totrans-1740
  prefs: []
  type: TYPE_NORMAL
  zh: 一个示例是，表的别名是从该表派生的。
- en: '[PRE333]'
  id: totrans-1741
  prefs: []
  type: TYPE_PRE
  zh: '[PRE333]'
- en: Return a ‘scalar’ representation of this selectable, embedded as a subquery
    with a label.
  id: totrans-1742
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此可选择项的“标量”表示，嵌入为带有标签的子查询。
- en: See also
  id: totrans-1743
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery").'
  id: totrans-1744
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery")。'
- en: '[PRE334]'
  id: totrans-1745
  prefs: []
  type: TYPE_PRE
  zh: '[PRE334]'
- en: Return a LATERAL alias of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable").
  id: totrans-1746
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此 [`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable")
    的 LATERAL 别名。
- en: The return value is the [`Lateral`](#sqlalchemy.sql.expression.Lateral "sqlalchemy.sql.expression.Lateral")
    construct also provided by the top-level [`lateral()`](#sqlalchemy.sql.expression.lateral
    "sqlalchemy.sql.expression.lateral") function.
  id: totrans-1747
  prefs: []
  type: TYPE_NORMAL
  zh: 返回值也是顶级[`lateral()`](#sqlalchemy.sql.expression.lateral "sqlalchemy.sql.expression.lateral")函数提供的[`Lateral`](#sqlalchemy.sql.expression.Lateral
    "sqlalchemy.sql.expression.Lateral")构造。
- en: See also
  id: totrans-1748
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见
- en: '[LATERAL correlation](../tutorial/data_select.html#tutorial-lateral-correlation)
    - overview of usage.'
  id: totrans-1749
  prefs: []
  type: TYPE_NORMAL
  zh: '[横向相关](../tutorial/data_select.html#tutorial-lateral-correlation) - 用法概述。'
- en: '[PRE335]'
  id: totrans-1750
  prefs: []
  type: TYPE_PRE
  zh: '[PRE335]'
- en: '*inherited from the* [`Selectable.replace_selectable()`](#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") *method of* [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
  id: totrans-1751
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Selectable.replace_selectable()`](#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") *方法的* [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
- en: Replace all occurrences of [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") ‘old’ with the given [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") object, returning a copy of this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-1752
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有[`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    ‘old’的出现替换为给定的[`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")对象，返回此[`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")的副本。
- en: 'Deprecated since version 1.4: The [`Selectable.replace_selectable()`](#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") method is deprecated,
    and will be removed in a future release. Similar functionality is available via
    the sqlalchemy.sql.visitors module.'
  id: totrans-1753
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.4起不推荐使用：[`Selectable.replace_selectable()`](#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") 方法已弃用，并将在将来的版本中删除。类似的功能可通过
    sqlalchemy.sql.visitors 模块使用。
- en: '[PRE336]'
  id: totrans-1754
  prefs: []
  type: TYPE_PRE
  zh: '[PRE336]'
- en: Return a ‘scalar’ representation of this selectable, which can be used as a
    column expression.
  id: totrans-1755
  prefs: []
  type: TYPE_NORMAL
  zh: 返回可用作列表达式的此可选择性的“标量”表示。
- en: The returned object is an instance of [`ScalarSelect`](#sqlalchemy.sql.expression.ScalarSelect
    "sqlalchemy.sql.expression.ScalarSelect").
  id: totrans-1756
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的对象是[`ScalarSelect`](#sqlalchemy.sql.expression.ScalarSelect "sqlalchemy.sql.expression.ScalarSelect")的一个实例。
- en: Typically, a select statement which has only one column in its columns clause
    is eligible to be used as a scalar expression. The scalar subquery can then be
    used in the WHERE clause or columns clause of an enclosing SELECT.
  id: totrans-1757
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在其列子句中只有一个列的 select 语句有资格用作标量表达式。然后可以在封闭 SELECT 的 WHERE 子句或列子句中使用标量子查询。
- en: Note that the scalar subquery differentiates from the FROM-level subquery that
    can be produced using the [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") method.
  id: totrans-1758
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，标量子查询与使用[`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") 方法生成的 FROM 级子查询不同。
- en: See also
  id: totrans-1759
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见
- en: '[Scalar and Correlated Subqueries](../tutorial/data_select.html#tutorial-scalar-subquery)
    - in the 2.0 tutorial'
  id: totrans-1760
  prefs: []
  type: TYPE_NORMAL
  zh: '[标量和相关子查询](../tutorial/data_select.html#tutorial-scalar-subquery) - 在2.0教程中'
- en: '[PRE337]'
  id: totrans-1761
  prefs: []
  type: TYPE_PRE
  zh: '[PRE337]'
- en: 'Deprecated since version 1.4: The [`SelectBase.select()`](#sqlalchemy.sql.expression.SelectBase.select
    "sqlalchemy.sql.expression.SelectBase.select") method is deprecated and will be
    removed in a future release; this method implicitly creates a subquery that should
    be explicit. Please call [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") first in order to create a subquery,
    which then can be selected.'
  id: totrans-1762
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.4起不推荐使用：[`SelectBase.select()`](#sqlalchemy.sql.expression.SelectBase.select
    "sqlalchemy.sql.expression.SelectBase.select") 方法已弃用，并将在将来的版本中删除；此方法隐式创建应明确的子查询。请先调用
    [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery "sqlalchemy.sql.expression.SelectBase.subquery")
    以创建子查询，然后可以选择该子查询。
- en: '[PRE338]'
  id: totrans-1763
  prefs: []
  type: TYPE_PRE
  zh: '[PRE338]'
- en: A [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") representing the columns that this
    SELECT statement or similar construct returns in its result set.
  id: totrans-1764
  prefs: []
  type: TYPE_NORMAL
  zh: 表示此 SELECT 语句或类似构造返回的结果集中的列的 [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")。
- en: This collection differs from the [`FromClause.columns`](#sqlalchemy.sql.expression.FromClause.columns
    "sqlalchemy.sql.expression.FromClause.columns") collection of a [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") in that the columns within this collection
    cannot be directly nested inside another SELECT statement; a subquery must be
    applied first which provides for the necessary parenthesization required by SQL.
  id: totrans-1765
  prefs: []
  type: TYPE_NORMAL
  zh: 该集合与 [`FromClause.columns`](#sqlalchemy.sql.expression.FromClause.columns "sqlalchemy.sql.expression.FromClause.columns")
    集合不同之处在于，该集合中的列不能直接嵌套在另一个 SELECT 语句中；必须首先应用一个子查询，该子查询提供了 SQL 所需的必要括号。
- en: Note
  id: totrans-1766
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The [`SelectBase.selected_columns`](#sqlalchemy.sql.expression.SelectBase.selected_columns
    "sqlalchemy.sql.expression.SelectBase.selected_columns") collection does not include
    expressions established in the columns clause using the [`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct; these are silently omitted from the
    collection. To use plain textual column expressions inside of a [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") construct, use the [`literal_column()`](sqlelement.html#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column") construct.
  id: totrans-1767
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SelectBase.selected_columns`](#sqlalchemy.sql.expression.SelectBase.selected_columns
    "sqlalchemy.sql.expression.SelectBase.selected_columns") 集合不包括使用 [`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") 构造在列子句中建立的表达式；这些表达式会被默默地从集合中省略掉。要在 [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") 构造内使用纯文本列表达式，请使用 [`literal_column()`](sqlelement.html#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column") 构造。'
- en: See also
  id: totrans-1768
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Select.selected_columns`](#sqlalchemy.sql.expression.Select.selected_columns
    "sqlalchemy.sql.expression.Select.selected_columns")'
  id: totrans-1769
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.selected_columns`](#sqlalchemy.sql.expression.Select.selected_columns
    "sqlalchemy.sql.expression.Select.selected_columns")'
- en: New in version 1.4.
  id: totrans-1770
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中新增。
- en: '[PRE339]'
  id: totrans-1771
  prefs: []
  type: TYPE_PRE
  zh: '[PRE339]'
- en: Return a new selectable with the specified label style.
  id: totrans-1772
  prefs: []
  type: TYPE_NORMAL
  zh: 使用指定的标签样式返回新的可选择对象。
- en: Implemented by subclasses.
  id: totrans-1773
  prefs: []
  type: TYPE_NORMAL
  zh: 由子类实现。
- en: '[PRE340]'
  id: totrans-1774
  prefs: []
  type: TYPE_PRE
  zh: '[PRE340]'
- en: Return a subquery of this [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase").
  id: totrans-1775
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此 [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")
    的子查询。
- en: A subquery is from a SQL perspective a parenthesized, named construct that can
    be placed in the FROM clause of another SELECT statement.
  id: totrans-1776
  prefs: []
  type: TYPE_NORMAL
  zh: 从 SQL 的角度来看，子查询是一种带有名称的括号括起来的构造，在另一个 SELECT 语句的 FROM 子句中可以放置。
- en: 'Given a SELECT statement such as:'
  id: totrans-1777
  prefs: []
  type: TYPE_NORMAL
  zh: 给定如下 SELECT 语句：
- en: '[PRE341]'
  id: totrans-1778
  prefs: []
  type: TYPE_PRE
  zh: '[PRE341]'
- en: 'The above statement might look like:'
  id: totrans-1779
  prefs: []
  type: TYPE_NORMAL
  zh: 上述语句可能看起来像这样：
- en: '[PRE342]'
  id: totrans-1780
  prefs: []
  type: TYPE_PRE
  zh: '[PRE342]'
- en: 'The subquery form by itself renders the same way, however when embedded into
    the FROM clause of another SELECT statement, it becomes a named sub-element:'
  id: totrans-1781
  prefs: []
  type: TYPE_NORMAL
  zh: 单独的子查询形式呈现方式相同，但是当嵌入到另一个 SELECT 语句的 FROM 子句中时，它就成为一个命名的子元素：
- en: '[PRE343]'
  id: totrans-1782
  prefs: []
  type: TYPE_PRE
  zh: '[PRE343]'
- en: 'The above renders as:'
  id: totrans-1783
  prefs: []
  type: TYPE_NORMAL
  zh: 上述呈现为：
- en: '[PRE344]'
  id: totrans-1784
  prefs: []
  type: TYPE_PRE
  zh: '[PRE344]'
- en: Historically, [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") is equivalent to calling the
    [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias "sqlalchemy.sql.expression.FromClause.alias")
    method on a FROM object; however, as a [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase") object is not directly FROM object, the
    [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery "sqlalchemy.sql.expression.SelectBase.subquery")
    method provides clearer semantics.
  id: totrans-1785
  prefs: []
  type: TYPE_NORMAL
  zh: 从历史上看，[`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") 相当于在 FROM 对象上调用 [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") 方法；然而，由于 [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase") 对象不是直接的 FROM 对象，所以 [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") 方法提供了更清晰的语义。
- en: New in version 1.4.
  id: totrans-1786
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中新增。
- en: '[PRE345]'
  id: totrans-1787
  prefs: []
  type: TYPE_PRE
  zh: '[PRE345]'
- en: Represent a subquery of a SELECT.
  id: totrans-1788
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一个 SELECT 的子查询。
- en: A [`Subquery`](#sqlalchemy.sql.expression.Subquery "sqlalchemy.sql.expression.Subquery")
    is created by invoking the [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") method, or for convenience the
    [`SelectBase.alias()`](#sqlalchemy.sql.expression.SelectBase.alias "sqlalchemy.sql.expression.SelectBase.alias")
    method, on any [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")
    subclass which includes [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select"),
    [`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect "sqlalchemy.sql.expression.CompoundSelect"),
    and [`TextualSelect`](#sqlalchemy.sql.expression.TextualSelect "sqlalchemy.sql.expression.TextualSelect").
    As rendered in a FROM clause, it represents the body of the SELECT statement inside
    of parenthesis, followed by the usual “AS <somename>” that defines all “alias”
    objects.
  id: totrans-1789
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在任何包含 [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select"),
    [`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect "sqlalchemy.sql.expression.CompoundSelect"),
    和 [`TextualSelect`](#sqlalchemy.sql.expression.TextualSelect "sqlalchemy.sql.expression.TextualSelect")
    的 [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")
    子类上调用 [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") 方法或为方便起见调用 [`SelectBase.alias()`](#sqlalchemy.sql.expression.SelectBase.alias
    "sqlalchemy.sql.expression.SelectBase.alias") 方法来创建 [`Subquery`](#sqlalchemy.sql.expression.Subquery
    "sqlalchemy.sql.expression.Subquery")。在 FROM 子句中表示 SELECT 语句的主体部分，后面跟着通常的“AS <somename>”，定义了所有“别名”对象。
- en: The [`Subquery`](#sqlalchemy.sql.expression.Subquery "sqlalchemy.sql.expression.Subquery")
    object is very similar to the [`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    object and can be used in an equivalent way. The difference between [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") and [`Subquery`](#sqlalchemy.sql.expression.Subquery
    "sqlalchemy.sql.expression.Subquery") is that [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") always contains a [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") object whereas [`Subquery`](#sqlalchemy.sql.expression.Subquery
    "sqlalchemy.sql.expression.Subquery") always contains a [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase") object.
  id: totrans-1790
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Subquery`](#sqlalchemy.sql.expression.Subquery "sqlalchemy.sql.expression.Subquery")
    对象与 [`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    对象非常相似，并且可以以等效的方式使用。[`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    和 [`Subquery`](#sqlalchemy.sql.expression.Subquery "sqlalchemy.sql.expression.Subquery")
    之间的区别在于 [`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    始终包含一个 [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    对象，而 [`Subquery`](#sqlalchemy.sql.expression.Subquery "sqlalchemy.sql.expression.Subquery")
    始终包含一个 [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")
    对象。'
- en: 'New in version 1.4: The [`Subquery`](#sqlalchemy.sql.expression.Subquery "sqlalchemy.sql.expression.Subquery")
    class was added which now serves the purpose of providing an aliased version of
    a SELECT statement.'
  id: totrans-1791
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4 中：添加了 [`Subquery`](#sqlalchemy.sql.expression.Subquery "sqlalchemy.sql.expression.Subquery")
    类，该类现在用于提供 SELECT 语句的别名版本。
- en: '**Members**'
  id: totrans-1792
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[as_scalar()](#sqlalchemy.sql.expression.Subquery.as_scalar), [inherit_cache](#sqlalchemy.sql.expression.Subquery.inherit_cache)'
  id: totrans-1793
  prefs: []
  type: TYPE_NORMAL
  zh: '[as_scalar()](#sqlalchemy.sql.expression.Subquery.as_scalar), [inherit_cache](#sqlalchemy.sql.expression.Subquery.inherit_cache)'
- en: '**Class signature**'
  id: totrans-1794
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.Subquery`](#sqlalchemy.sql.expression.Subquery
    "sqlalchemy.sql.expression.Subquery") ([`sqlalchemy.sql.expression.AliasedReturnsRows`](#sqlalchemy.sql.expression.AliasedReturnsRows
    "sqlalchemy.sql.expression.AliasedReturnsRows"))
  id: totrans-1795
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.expression.Subquery`](#sqlalchemy.sql.expression.Subquery
    "sqlalchemy.sql.expression.Subquery") ([`sqlalchemy.sql.expression.AliasedReturnsRows`](#sqlalchemy.sql.expression.AliasedReturnsRows
    "sqlalchemy.sql.expression.AliasedReturnsRows"))
- en: '[PRE346]'
  id: totrans-1796
  prefs: []
  type: TYPE_PRE
  zh: '[PRE346]'
- en: 'Deprecated since version 1.4: The [`Subquery.as_scalar()`](#sqlalchemy.sql.expression.Subquery.as_scalar
    "sqlalchemy.sql.expression.Subquery.as_scalar") method, which was previously `Alias.as_scalar()`
    prior to version 1.4, is deprecated and will be removed in a future release; Please
    use the [`Select.scalar_subquery()`](#sqlalchemy.sql.expression.Select.scalar_subquery
    "sqlalchemy.sql.expression.Select.scalar_subquery") method of the [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct before constructing a subquery object,
    or with the ORM use the [`Query.scalar_subquery()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.scalar_subquery
    "sqlalchemy.orm.Query.scalar_subquery") method.'
  id: totrans-1797
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.4起已弃用：[`Subquery.as_scalar()`](#sqlalchemy.sql.expression.Subquery.as_scalar
    "sqlalchemy.sql.expression.Subquery.as_scalar")方法，在版本1.4之前曾是`Alias.as_scalar()`，已弃用并将在将来的版本中删除；请在构造子查询对象之前使用[`Select.scalar_subquery()`](#sqlalchemy.sql.expression.Select.scalar_subquery
    "sqlalchemy.sql.expression.Select.scalar_subquery")方法的[`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")构造，或者在ORM中使用[`Query.scalar_subquery()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.scalar_subquery
    "sqlalchemy.orm.Query.scalar_subquery")方法。
- en: '[PRE347]'
  id: totrans-1798
  prefs: []
  type: TYPE_PRE
  zh: '[PRE347]'
- en: Indicate if this [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") instance should make use of the cache
    key generation scheme used by its immediate superclass.
  id: totrans-1799
  prefs: []
  type: TYPE_NORMAL
  zh: 指示此[`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey "sqlalchemy.sql.traversals.HasCacheKey")实例是否应使用其直接超类使用的缓存键生成方案。
- en: The attribute defaults to `None`, which indicates that a construct has not yet
    taken into account whether or not its appropriate for it to participate in caching;
    this is functionally equivalent to setting the value to `False`, except that a
    warning is also emitted.
  id: totrans-1800
  prefs: []
  type: TYPE_NORMAL
  zh: 该属性默认为`None`，表示构造尚未考虑是否适合参与缓存；这在功能上等同于将值设置为`False`，只是还会发出警告。
- en: This flag can be set to `True` on a particular class, if the SQL that corresponds
    to the object does not change based on attributes which are local to this class,
    and not its superclass.
  id: totrans-1801
  prefs: []
  type: TYPE_NORMAL
  zh: 如果与对象对应的SQL不基于此类的本地属性而是其超类，则可以在特定类上将此标志设置为`True`。
- en: See also
  id: totrans-1802
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Enabling Caching Support for Custom Constructs](compiler.html#compilerext-caching)
    - General guideslines for setting the [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute for third-party
    or user defined SQL constructs.'
  id: totrans-1803
  prefs: []
  type: TYPE_NORMAL
  zh: '[为自定义构造启用缓存支持](compiler.html#compilerext-caching) - 设置第三方或用户定义的SQL构造的[`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache")属性的一般指南。'
- en: '[PRE348]'
  id: totrans-1804
  prefs: []
  type: TYPE_PRE
  zh: '[PRE348]'
- en: Represents a minimal “table” construct.
  id: totrans-1805
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一个最小的“表”构造。
- en: 'This is a lightweight table object that has only a name, a collection of columns,
    which are typically produced by the [`column()`](sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column") function, and a schema:'
  id: totrans-1806
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个轻量级的表对象，只有一个名称、一组列（通常由[`column()`](sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column")函数生成），以及一个模式：
- en: '[PRE349]'
  id: totrans-1807
  prefs: []
  type: TYPE_PRE
  zh: '[PRE349]'
- en: The [`TableClause`](#sqlalchemy.sql.expression.TableClause "sqlalchemy.sql.expression.TableClause")
    construct serves as the base for the more commonly used [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object, providing the usual set of [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") services including the `.c.` collection
    and statement generation methods.
  id: totrans-1808
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TableClause`](#sqlalchemy.sql.expression.TableClause "sqlalchemy.sql.expression.TableClause")构造用作更常用的[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象的基础，提供通常的[`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")服务，包括`.c.`集合和语句生成方法。'
- en: It does **not** provide all the additional schema-level services of [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), including constraints, references to other tables,
    or support for [`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")-level
    services. It’s useful on its own as an ad-hoc construct used to generate quick
    SQL statements when a more fully fledged [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") is not on hand.
  id: totrans-1809
  prefs: []
  type: TYPE_NORMAL
  zh: 它**不**提供[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")的所有附加模式级服务，包括约束、对其他表的引用，或者对[`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")级别服务的支持。它本身很有用，作为一种临时构造，用于在没有更完整的[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")的情况下生成快速的SQL语句。
- en: '**Members**'
  id: totrans-1810
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[alias()](#sqlalchemy.sql.expression.TableClause.alias), [c](#sqlalchemy.sql.expression.TableClause.c),
    [columns](#sqlalchemy.sql.expression.TableClause.columns), [compare()](#sqlalchemy.sql.expression.TableClause.compare),
    [compile()](#sqlalchemy.sql.expression.TableClause.compile), [corresponding_column()](#sqlalchemy.sql.expression.TableClause.corresponding_column),
    [delete()](#sqlalchemy.sql.expression.TableClause.delete), [description](#sqlalchemy.sql.expression.TableClause.description),
    [entity_namespace](#sqlalchemy.sql.expression.TableClause.entity_namespace), [exported_columns](#sqlalchemy.sql.expression.TableClause.exported_columns),
    [foreign_keys](#sqlalchemy.sql.expression.TableClause.foreign_keys), [get_children()](#sqlalchemy.sql.expression.TableClause.get_children),
    [implicit_returning](#sqlalchemy.sql.expression.TableClause.implicit_returning),
    [inherit_cache](#sqlalchemy.sql.expression.TableClause.inherit_cache), [insert()](#sqlalchemy.sql.expression.TableClause.insert),
    [is_derived_from()](#sqlalchemy.sql.expression.TableClause.is_derived_from), [join()](#sqlalchemy.sql.expression.TableClause.join),
    [lateral()](#sqlalchemy.sql.expression.TableClause.lateral), [outerjoin()](#sqlalchemy.sql.expression.TableClause.outerjoin),
    [params()](#sqlalchemy.sql.expression.TableClause.params), [primary_key](#sqlalchemy.sql.expression.TableClause.primary_key),
    [replace_selectable()](#sqlalchemy.sql.expression.TableClause.replace_selectable),
    [schema](#sqlalchemy.sql.expression.TableClause.schema), [select()](#sqlalchemy.sql.expression.TableClause.select),
    [self_group()](#sqlalchemy.sql.expression.TableClause.self_group), [table_valued()](#sqlalchemy.sql.expression.TableClause.table_valued),
    [tablesample()](#sqlalchemy.sql.expression.TableClause.tablesample), [unique_params()](#sqlalchemy.sql.expression.TableClause.unique_params),
    [update()](#sqlalchemy.sql.expression.TableClause.update)'
  id: totrans-1811
  prefs: []
  type: TYPE_NORMAL
  zh: '[alias()](#sqlalchemy.sql.expression.TableClause.alias), [c](#sqlalchemy.sql.expression.TableClause.c),
    [columns](#sqlalchemy.sql.expression.TableClause.columns), [compare()](#sqlalchemy.sql.expression.TableClause.compare),
    [compile()](#sqlalchemy.sql.expression.TableClause.compile), [corresponding_column()](#sqlalchemy.sql.expression.TableClause.corresponding_column),
    [delete()](#sqlalchemy.sql.expression.TableClause.delete), [description](#sqlalchemy.sql.expression.TableClause.description),
    [entity_namespace](#sqlalchemy.sql.expression.TableClause.entity_namespace), [exported_columns](#sqlalchemy.sql.expression.TableClause.exported_columns),
    [foreign_keys](#sqlalchemy.sql.expression.TableClause.foreign_keys), [get_children()](#sqlalchemy.sql.expression.TableClause.get_children),
    [implicit_returning](#sqlalchemy.sql.expression.TableClause.implicit_returning),
    [inherit_cache](#sqlalchemy.sql.expression.TableClause.inherit_cache), [insert()](#sqlalchemy.sql.expression.TableClause.insert),
    [is_derived_from()](#sqlalchemy.sql.expression.TableClause.is_derived_from), [join()](#sqlalchemy.sql.expression.TableClause.join),
    [lateral()](#sqlalchemy.sql.expression.TableClause.lateral), [outerjoin()](#sqlalchemy.sql.expression.TableClause.outerjoin),
    [params()](#sqlalchemy.sql.expression.TableClause.params), [primary_key](#sqlalchemy.sql.expression.TableClause.primary_key),
    [replace_selectable()](#sqlalchemy.sql.expression.TableClause.replace_selectable),
    [schema](#sqlalchemy.sql.expression.TableClause.schema), [select()](#sqlalchemy.sql.expression.TableClause.select),
    [self_group()](#sqlalchemy.sql.expression.TableClause.self_group), [table_valued()](#sqlalchemy.sql.expression.TableClause.table_valued),
    [tablesample()](#sqlalchemy.sql.expression.TableClause.tablesample), [unique_params()](#sqlalchemy.sql.expression.TableClause.unique_params),
    [update()](#sqlalchemy.sql.expression.TableClause.update)'
- en: '**Class signature**'
  id: totrans-1812
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.TableClause`](#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause") (`sqlalchemy.sql.roles.DMLTableRole`,
    `sqlalchemy.sql.expression.Immutable`, `sqlalchemy.sql.expression.NamedFromClause`)
  id: totrans-1813
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.sql.expression.TableClause`](#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause") (`sqlalchemy.sql.roles.DMLTableRole`,
    `sqlalchemy.sql.expression.Immutable`, `sqlalchemy.sql.expression.NamedFromClause`)
- en: '[PRE350]'
  id: totrans-1814
  prefs: []
  type: TYPE_PRE
  zh: '[PRE350]'
- en: '*inherited from the* [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") *method of* [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  id: totrans-1815
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias "sqlalchemy.sql.expression.FromClause.alias")
    *方法的* [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")'
- en: Return an alias of this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-1816
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此[`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")的别名。
- en: 'E.g.:'
  id: totrans-1817
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE351]'
  id: totrans-1818
  prefs: []
  type: TYPE_PRE
  zh: '[PRE351]'
- en: The above code creates an [`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    object which can be used as a FROM clause in any SELECT statement.
  id: totrans-1819
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码创建了一个[`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")对象，可以在任何SELECT语句中用作FROM子句。
- en: See also
  id: totrans-1820
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[Using Aliases](../tutorial/data_select.html#tutorial-using-aliases)'
  id: totrans-1821
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用别名](../tutorial/data_select.html#tutorial-using-aliases)'
- en: '[`alias()`](#sqlalchemy.sql.expression.alias "sqlalchemy.sql.expression.alias")'
  id: totrans-1822
  prefs: []
  type: TYPE_NORMAL
  zh: '[`alias()`](#sqlalchemy.sql.expression.alias "sqlalchemy.sql.expression.alias")'
- en: '[PRE352]'
  id: totrans-1823
  prefs: []
  type: TYPE_PRE
  zh: '[PRE352]'
- en: '*inherited from the* [`FromClause.c`](#sqlalchemy.sql.expression.FromClause.c
    "sqlalchemy.sql.expression.FromClause.c") *attribute of* [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  id: totrans-1824
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FromClause.c`](#sqlalchemy.sql.expression.FromClause.c "sqlalchemy.sql.expression.FromClause.c")
    *属性的* [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")'
- en: A synonym for [`FromClause.columns`](#sqlalchemy.sql.expression.FromClause.columns
    "sqlalchemy.sql.expression.FromClause.columns")
  id: totrans-1825
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FromClause.columns`](#sqlalchemy.sql.expression.FromClause.columns "sqlalchemy.sql.expression.FromClause.columns")的同义词'
- en: 'Returns:'
  id: totrans-1826
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")
  id: totrans-1827
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")
- en: '[PRE353]'
  id: totrans-1828
  prefs: []
  type: TYPE_PRE
  zh: '[PRE353]'
- en: '*inherited from the* [`FromClause.columns`](#sqlalchemy.sql.expression.FromClause.columns
    "sqlalchemy.sql.expression.FromClause.columns") *attribute of* [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  id: totrans-1829
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FromClause.columns`](#sqlalchemy.sql.expression.FromClause.columns
    "sqlalchemy.sql.expression.FromClause.columns") *属性的* [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
- en: A named-based collection of [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") objects maintained by this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-1830
  prefs: []
  type: TYPE_NORMAL
  zh: 由此[`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")维护的基于名称的[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")对象的命名集合。
- en: 'The [`columns`](#sqlalchemy.sql.expression.TableClause.columns "sqlalchemy.sql.expression.TableClause.columns"),
    or [`c`](#sqlalchemy.sql.expression.TableClause.c "sqlalchemy.sql.expression.TableClause.c")
    collection, is the gateway to the construction of SQL expressions using table-bound
    or other selectable-bound columns:'
  id: totrans-1831
  prefs: []
  type: TYPE_NORMAL
  zh: '[`columns`](#sqlalchemy.sql.expression.TableClause.columns "sqlalchemy.sql.expression.TableClause.columns")或[`c`](#sqlalchemy.sql.expression.TableClause.c
    "sqlalchemy.sql.expression.TableClause.c")集合是使用绑定到表或其他可选择列构建SQL表达式的入口：'
- en: '[PRE354]'
  id: totrans-1832
  prefs: []
  type: TYPE_PRE
  zh: '[PRE354]'
- en: 'Returns:'
  id: totrans-1833
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") object.
  id: totrans-1834
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")对象。
- en: '[PRE355]'
  id: totrans-1835
  prefs: []
  type: TYPE_PRE
  zh: '[PRE355]'
- en: '*inherited from the* [`ClauseElement.compare()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.compare
    "sqlalchemy.sql.expression.ClauseElement.compare") *method of* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
  id: totrans-1836
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ClauseElement.compare()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.compare
    "sqlalchemy.sql.expression.ClauseElement.compare") *方法的* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
- en: Compare this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") to the given [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  id: totrans-1837
  prefs: []
  type: TYPE_NORMAL
  zh: 将此[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")与给定的[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")进行比较。
- en: Subclasses should override the default behavior, which is a straight identity
    comparison.
  id: totrans-1838
  prefs: []
  type: TYPE_NORMAL
  zh: 子类应该重写默认行为，即直接的身份比较。
- en: '**kw are arguments consumed by subclass `compare()` methods and may be used
    to modify the criteria for comparison (see [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")).'
  id: totrans-1839
  prefs: []
  type: TYPE_NORMAL
  zh: '**kw是子类`compare()`方法消耗的参数，可以用来修改比较的标准（参见[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")）。'
- en: '[PRE356]'
  id: totrans-1840
  prefs: []
  type: TYPE_PRE
  zh: '[PRE356]'
- en: '*inherited from the* `CompilerElement.compile()` *method of* `CompilerElement`'
  id: totrans-1841
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `CompilerElement.compile()` *方法的* `CompilerElement`'
- en: Compile this SQL expression.
  id: totrans-1842
  prefs: []
  type: TYPE_NORMAL
  zh: 编译此SQL表达式。
- en: The return value is a [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object. Calling `str()` or `unicode()` on the returned
    value will yield a string representation of the result. The [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object also can return a dictionary of bind parameter
    names and values using the `params` accessor.
  id: totrans-1843
  prefs: []
  type: TYPE_NORMAL
  zh: 返回值是一个[`Compiled`](internals.html#sqlalchemy.engine.Compiled "sqlalchemy.engine.Compiled")对象。对返回值调用`str()`或`unicode()`将产生结果的字符串表示。[`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled")对象还可以使用`params`访问器返回绑定参数名称和值的字典。
- en: 'Parameters:'
  id: totrans-1844
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`bind` – An [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    or [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    which can provide a [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    in order to generate a [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object. If the `bind` and `dialect` parameters are
    both omitted, a default SQL compiler is used.'
  id: totrans-1845
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bind` – 一个[`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")或[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")，可以提供一个[`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect")以生成一个[`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled")对象。如果`bind`和`dialect`参数都被省略，则使用默认的SQL编译器。'
- en: '`column_keys` – Used for INSERT and UPDATE statements, a list of column names
    which should be present in the VALUES clause of the compiled statement. If `None`,
    all columns from the target table object are rendered.'
  id: totrans-1846
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`column_keys` – 用于INSERT和UPDATE语句，一个列名列表，应该出现在编译语句的VALUES子句中。如果为`None`，则渲染来自目标表对象的所有列。'
- en: '`dialect` – A [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    instance which can generate a [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object. This argument takes precedence over the
    `bind` argument.'
  id: totrans-1847
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect` – 一个[`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")实例，可以生成一个[`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled")对象。此参数优先于`bind`参数。'
- en: '`compile_kwargs` –'
  id: totrans-1848
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`compile_kwargs` –'
- en: 'optional dictionary of additional parameters that will be passed through to
    the compiler within all “visit” methods. This allows any custom flag to be passed
    through to a custom compilation construct, for example. It is also used for the
    case of passing the `literal_binds` flag through:'
  id: totrans-1849
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的附加参数字典，将传递给所有“visit”方法中的编译器。这允许将任何自定义标志传递给自定义编译结构，例如。它也用于通过传递`literal_binds`标志的情况：
- en: '[PRE357]'
  id: totrans-1850
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE357]'
- en: See also
  id: totrans-1851
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[How do I render SQL expressions as strings, possibly with bound parameters
    inlined?](../faq/sqlexpressions.html#faq-sql-expression-string)'
  id: totrans-1852
  prefs: []
  type: TYPE_NORMAL
  zh: '[如何将SQL表达式渲染为字符串，可能包含内联的绑定参数？](../faq/sqlexpressions.html#faq-sql-expression-string)'
- en: '[PRE358]'
  id: totrans-1853
  prefs: []
  type: TYPE_PRE
  zh: '[PRE358]'
- en: '*inherited from the* [`Selectable.corresponding_column()`](#sqlalchemy.sql.expression.Selectable.corresponding_column
    "sqlalchemy.sql.expression.Selectable.corresponding_column") *method of* [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
  id: totrans-1854
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`Selectable.corresponding_column()`](#sqlalchemy.sql.expression.Selectable.corresponding_column
    "sqlalchemy.sql.expression.Selectable.corresponding_column") *方法继承* [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
- en: Given a [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"), return the exported [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") object from the [`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") collection of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable") which corresponds to that original [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") via a common ancestor column.
  id: totrans-1855
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")，从此[`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")的[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns")集合中返回导出的[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")对象，该对象对应于通过公共祖先列对应于该原始[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")。
- en: 'Parameters:'
  id: totrans-1856
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`column` – the target [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") to be matched.'
  id: totrans-1857
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`column` – 要匹配的目标[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")。'
- en: '`require_embedded` – only return corresponding columns for the given [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"), if the given [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") is actually present within a sub-element
    of this [`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable").
    Normally the column will match if it merely shares a common ancestor with one
    of the exported columns of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable").'
  id: totrans-1858
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`require_embedded` – 仅返回给定[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")的相应列，如果给定的[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")实际上存在于此[`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")的子元素中。通常，如果列仅与此[`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")的导出列之一共享共同的祖先，则列将匹配。'
- en: See also
  id: totrans-1859
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") - the [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") that is used for the operation.'
  id: totrans-1860
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") - 用于操作的[`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")。'
- en: '[`ColumnCollection.corresponding_column()`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection.corresponding_column
    "sqlalchemy.sql.expression.ColumnCollection.corresponding_column") - implementation
    method.'
  id: totrans-1861
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnCollection.corresponding_column()`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection.corresponding_column
    "sqlalchemy.sql.expression.ColumnCollection.corresponding_column") - 实现方法。'
- en: '[PRE359]'
  id: totrans-1862
  prefs: []
  type: TYPE_PRE
  zh: '[PRE359]'
- en: Generate a [`delete()`](dml.html#sqlalchemy.sql.expression.delete "sqlalchemy.sql.expression.delete")
    construct against this [`TableClause`](#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause").
  id: totrans-1863
  prefs: []
  type: TYPE_NORMAL
  zh: 生成针对此[`TableClause`](#sqlalchemy.sql.expression.TableClause "sqlalchemy.sql.expression.TableClause")的[`delete()`](dml.html#sqlalchemy.sql.expression.delete
    "sqlalchemy.sql.expression.delete")构造。
- en: 'E.g.:'
  id: totrans-1864
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE360]'
  id: totrans-1865
  prefs: []
  type: TYPE_PRE
  zh: '[PRE360]'
- en: See [`delete()`](dml.html#sqlalchemy.sql.expression.delete "sqlalchemy.sql.expression.delete")
    for argument and usage information.
  id: totrans-1866
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[`delete()`](dml.html#sqlalchemy.sql.expression.delete "sqlalchemy.sql.expression.delete")以获取参数和用法信息。
- en: '[PRE361]'
  id: totrans-1867
  prefs: []
  type: TYPE_PRE
  zh: '[PRE361]'
- en: '[PRE362]'
  id: totrans-1868
  prefs: []
  type: TYPE_PRE
  zh: '[PRE362]'
- en: '*inherited from the* [`FromClause.entity_namespace`](#sqlalchemy.sql.expression.FromClause.entity_namespace
    "sqlalchemy.sql.expression.FromClause.entity_namespace") *attribute of* [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  id: totrans-1869
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FromClause.entity_namespace`](#sqlalchemy.sql.expression.FromClause.entity_namespace
    "sqlalchemy.sql.expression.FromClause.entity_namespace") *属性的* [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
- en: Return a namespace used for name-based access in SQL expressions.
  id: totrans-1870
  prefs: []
  type: TYPE_NORMAL
  zh: 返回用于在SQL表达式中进行基于名称访问的命名空间。
- en: 'This is the namespace that is used to resolve “filter_by()” type expressions,
    such as:'
  id: totrans-1871
  prefs: []
  type: TYPE_NORMAL
  zh: 这是用于解析“filter_by()”类型表达式的命名空间，例如：
- en: '[PRE363]'
  id: totrans-1872
  prefs: []
  type: TYPE_PRE
  zh: '[PRE363]'
- en: It defaults to the `.c` collection, however internally it can be overridden
    using the “entity_namespace” annotation to deliver alternative results.
  id: totrans-1873
  prefs: []
  type: TYPE_NORMAL
  zh: 默认为`.c`集合，但在内部可以使用“entity_namespace”注释进行覆盖以提供替代结果。
- en: '[PRE364]'
  id: totrans-1874
  prefs: []
  type: TYPE_PRE
  zh: '[PRE364]'
- en: '*inherited from the* [`FromClause.exported_columns`](#sqlalchemy.sql.expression.FromClause.exported_columns
    "sqlalchemy.sql.expression.FromClause.exported_columns") *attribute of* [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  id: totrans-1875
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FromClause.exported_columns`](#sqlalchemy.sql.expression.FromClause.exported_columns
    "sqlalchemy.sql.expression.FromClause.exported_columns") *属性的* [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
- en: A [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") that represents the “exported” columns
    of this [`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable").
  id: totrans-1876
  prefs: []
  type: TYPE_NORMAL
  zh: 代表此[`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable")的“导出”列的[`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")。
- en: The “exported” columns for a [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") object are synonymous with the [`FromClause.columns`](#sqlalchemy.sql.expression.FromClause.columns
    "sqlalchemy.sql.expression.FromClause.columns") collection.
  id: totrans-1877
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")对象的“导出”列与[`FromClause.columns`](#sqlalchemy.sql.expression.FromClause.columns
    "sqlalchemy.sql.expression.FromClause.columns")集合是同义词。'
- en: New in version 1.4.
  id: totrans-1878
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中的新功能。
- en: See also
  id: totrans-1879
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns")'
  id: totrans-1880
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns")'
- en: '[`SelectBase.exported_columns`](#sqlalchemy.sql.expression.SelectBase.exported_columns
    "sqlalchemy.sql.expression.SelectBase.exported_columns")'
  id: totrans-1881
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SelectBase.exported_columns`](#sqlalchemy.sql.expression.SelectBase.exported_columns
    "sqlalchemy.sql.expression.SelectBase.exported_columns")'
- en: '[PRE365]'
  id: totrans-1882
  prefs: []
  type: TYPE_PRE
  zh: '[PRE365]'
- en: '*inherited from the* [`FromClause.foreign_keys`](#sqlalchemy.sql.expression.FromClause.foreign_keys
    "sqlalchemy.sql.expression.FromClause.foreign_keys") *attribute of* [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  id: totrans-1883
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FromClause.foreign_keys`](#sqlalchemy.sql.expression.FromClause.foreign_keys
    "sqlalchemy.sql.expression.FromClause.foreign_keys") *属性的* [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
- en: Return the collection of [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") marker objects which this FromClause references.
  id: totrans-1884
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此FromClause引用的[`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey")标记对象的集合。
- en: Each [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    is a member of a [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")-wide
    [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint").
  id: totrans-1885
  prefs: []
  type: TYPE_NORMAL
  zh: 每个[`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")都是[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")范围内的一个[`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")的成员。
- en: See also
  id: totrans-1886
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Table.foreign_key_constraints`](metadata.html#sqlalchemy.schema.Table.foreign_key_constraints
    "sqlalchemy.schema.Table.foreign_key_constraints")'
  id: totrans-1887
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Table.foreign_key_constraints`](metadata.html#sqlalchemy.schema.Table.foreign_key_constraints
    "sqlalchemy.schema.Table.foreign_key_constraints")'
- en: '[PRE366]'
  id: totrans-1888
  prefs: []
  type: TYPE_PRE
  zh: '[PRE366]'
- en: '*inherited from the* `HasTraverseInternals.get_children()` *method of* `HasTraverseInternals`'
  id: totrans-1889
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `HasTraverseInternals.get_children()` *方法的* `HasTraverseInternals`'
- en: Return immediate child `HasTraverseInternals` elements of this `HasTraverseInternals`.
  id: totrans-1890
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此`HasTraverseInternals`的直接子`HasTraverseInternals`元素。
- en: This is used for visit traversal.
  id: totrans-1891
  prefs: []
  type: TYPE_NORMAL
  zh: 用于访问遍历。
- en: '**kw may contain flags that change the collection that is returned, for example
    to return a subset of items in order to cut down on larger traversals, or to return
    child items from a different context (such as schema-level collections instead
    of clause-level).'
  id: totrans-1892
  prefs: []
  type: TYPE_NORMAL
  zh: '**kw可能包含改变返回集合的标志，例如返回子项的子集以减少更大的遍历，或者从不同的上下文（例如模式级别的集合而不是子句级别）返回子项。'
- en: '[PRE367]'
  id: totrans-1893
  prefs: []
  type: TYPE_PRE
  zh: '[PRE367]'
- en: '[`TableClause`](#sqlalchemy.sql.expression.TableClause "sqlalchemy.sql.expression.TableClause")
    doesn’t support having a primary key or column -level defaults, so implicit returning
    doesn’t apply.'
  id: totrans-1894
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TableClause`](#sqlalchemy.sql.expression.TableClause "sqlalchemy.sql.expression.TableClause")不支持具有主键或列级默认值，因此隐式返回不适用。'
- en: '[PRE368]'
  id: totrans-1895
  prefs: []
  type: TYPE_PRE
  zh: '[PRE368]'
- en: '*inherited from the* `HasCacheKey.inherit_cache` *attribute of* [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.cache_key.HasCacheKey")'
  id: totrans-1896
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `HasCacheKey.inherit_cache` *属性的* [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.cache_key.HasCacheKey")'
- en: Indicate if this [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") instance should make use of the cache
    key generation scheme used by its immediate superclass.
  id: totrans-1897
  prefs: []
  type: TYPE_NORMAL
  zh: 指示此[`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey "sqlalchemy.sql.traversals.HasCacheKey")实例是否应使用其直接超类使用的缓存键生成方案。
- en: The attribute defaults to `None`, which indicates that a construct has not yet
    taken into account whether or not its appropriate for it to participate in caching;
    this is functionally equivalent to setting the value to `False`, except that a
    warning is also emitted.
  id: totrans-1898
  prefs: []
  type: TYPE_NORMAL
  zh: 该属性默认为`None`，表示构造尚未考虑其是否适合参与缓存；这在功能上等效于将值设置为`False`，除了还会发出警告。
- en: This flag can be set to `True` on a particular class, if the SQL that corresponds
    to the object does not change based on attributes which are local to this class,
    and not its superclass.
  id: totrans-1899
  prefs: []
  type: TYPE_NORMAL
  zh: 如果对象对应的 SQL 不会根据本类本地属性而变化，并且不是其超类，则可以在特定类上设置此标志为`True`。
- en: See also
  id: totrans-1900
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Enabling Caching Support for Custom Constructs](compiler.html#compilerext-caching)
    - General guideslines for setting the [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute for third-party
    or user defined SQL constructs.'
  id: totrans-1901
  prefs: []
  type: TYPE_NORMAL
  zh: '[为自定义构造启用缓存支持](compiler.html#compilerext-caching) - 设置第三方或用户定义的 SQL 构造的 [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") 属性的一般指南。'
- en: '[PRE369]'
  id: totrans-1902
  prefs: []
  type: TYPE_PRE
  zh: '[PRE369]'
- en: Generate an [`Insert`](dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    construct against this [`TableClause`](#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause").
  id: totrans-1903
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个针对这个[`TableClause`](#sqlalchemy.sql.expression.TableClause "sqlalchemy.sql.expression.TableClause")的
    [`Insert`](dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    构造。
- en: 'E.g.:'
  id: totrans-1904
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE370]'
  id: totrans-1905
  prefs: []
  type: TYPE_PRE
  zh: '[PRE370]'
- en: See [`insert()`](dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert")
    for argument and usage information.
  id: totrans-1906
  prefs: []
  type: TYPE_NORMAL
  zh: 有关参数和用法信息，请参阅 [`insert()`](dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert")。
- en: '[PRE371]'
  id: totrans-1907
  prefs: []
  type: TYPE_PRE
  zh: '[PRE371]'
- en: '*inherited from the* [`FromClause.is_derived_from()`](#sqlalchemy.sql.expression.FromClause.is_derived_from
    "sqlalchemy.sql.expression.FromClause.is_derived_from") *method of* [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  id: totrans-1908
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FromClause.is_derived_from()`](#sqlalchemy.sql.expression.FromClause.is_derived_from
    "sqlalchemy.sql.expression.FromClause.is_derived_from") *方法于* [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
- en: Return `True` if this [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    is ‘derived’ from the given `FromClause`.
  id: totrans-1909
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这个[`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")是从给定的`FromClause`‘派生’，则返回`True`。
- en: An example would be an Alias of a Table is derived from that Table.
  id: totrans-1910
  prefs: []
  type: TYPE_NORMAL
  zh: 一个示例是表的别名是从该表派生的。
- en: '[PRE372]'
  id: totrans-1911
  prefs: []
  type: TYPE_PRE
  zh: '[PRE372]'
- en: '*inherited from the* [`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join") *method of* [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  id: totrans-1912
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join "sqlalchemy.sql.expression.FromClause.join")
    *方法于* [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")'
- en: Return a [`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    from this [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    to another [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause").
  id: totrans-1913
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个[`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")返回一个[`Join`](#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join")到另一个[`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")。
- en: 'E.g.:'
  id: totrans-1914
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE373]'
  id: totrans-1915
  prefs: []
  type: TYPE_PRE
  zh: '[PRE373]'
- en: 'would emit SQL along the lines of:'
  id: totrans-1916
  prefs: []
  type: TYPE_NORMAL
  zh: 会发出类似以下的 SQL 语句：
- en: '[PRE374]'
  id: totrans-1917
  prefs: []
  type: TYPE_PRE
  zh: '[PRE374]'
- en: 'Parameters:'
  id: totrans-1918
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`right` – the right side of the join; this is any [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") object such as a [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object, and may also be a selectable-compatible object
    such as an ORM-mapped class.'
  id: totrans-1919
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`right` – 连接的右侧；这是任何 [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    对象，比如一个 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    对象，也可以是一个可选择的兼容对象，比如一个 ORM 映射类。'
- en: '`onclause` – a SQL expression representing the ON clause of the join. If left
    at `None`, [`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join "sqlalchemy.sql.expression.FromClause.join")
    will attempt to join the two tables based on a foreign key relationship.'
  id: totrans-1920
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onclause` – 表示连接的 ON 子句的 SQL 表达式。如果保留为 `None`，[`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join") 将尝试基于外键关系连接两个表。'
- en: '`isouter` – if True, render a LEFT OUTER JOIN, instead of JOIN.'
  id: totrans-1921
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isouter` – 如果为 True，则渲染一个 LEFT OUTER JOIN，而不是 JOIN。'
- en: '`full` – if True, render a FULL OUTER JOIN, instead of LEFT OUTER JOIN. Implies
    [`FromClause.join.isouter`](#sqlalchemy.sql.expression.FromClause.join.params.isouter
    "sqlalchemy.sql.expression.FromClause.join").'
  id: totrans-1922
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`full` – 如果为 True，则渲染一个 FULL OUTER JOIN，而不是 LEFT OUTER JOIN。暗示 [`FromClause.join.isouter`](#sqlalchemy.sql.expression.FromClause.join.params.isouter
    "sqlalchemy.sql.expression.FromClause.join")。'
- en: See also
  id: totrans-1923
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`join()`](#sqlalchemy.sql.expression.join "sqlalchemy.sql.expression.join")
    - standalone function'
  id: totrans-1924
  prefs: []
  type: TYPE_NORMAL
  zh: '[`join()`](#sqlalchemy.sql.expression.join "sqlalchemy.sql.expression.join")
    - 独立的函数'
- en: '[`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    - the type of object produced'
  id: totrans-1925
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    - 生成对象的类型'
- en: '[PRE375]'
  id: totrans-1926
  prefs: []
  type: TYPE_PRE
  zh: '[PRE375]'
- en: '*inherited from the* [`Selectable.lateral()`](#sqlalchemy.sql.expression.Selectable.lateral
    "sqlalchemy.sql.expression.Selectable.lateral") *method of* [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
  id: totrans-1927
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable")
    的 [`Selectable.lateral()`](#sqlalchemy.sql.expression.Selectable.lateral "sqlalchemy.sql.expression.Selectable.lateral")
    *方法*'
- en: Return a LATERAL alias of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable").
  id: totrans-1928
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此 [`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable")
    的 LATERAL 别名。
- en: The return value is the [`Lateral`](#sqlalchemy.sql.expression.Lateral "sqlalchemy.sql.expression.Lateral")
    construct also provided by the top-level [`lateral()`](#sqlalchemy.sql.expression.lateral
    "sqlalchemy.sql.expression.lateral") function.
  id: totrans-1929
  prefs: []
  type: TYPE_NORMAL
  zh: 返回值是顶层 [`lateral()`](#sqlalchemy.sql.expression.lateral "sqlalchemy.sql.expression.lateral")
    函数提供的 [`Lateral`](#sqlalchemy.sql.expression.Lateral "sqlalchemy.sql.expression.Lateral")
    构造。
- en: See also
  id: totrans-1930
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[LATERAL correlation](../tutorial/data_select.html#tutorial-lateral-correlation)
    - overview of usage.'
  id: totrans-1931
  prefs: []
  type: TYPE_NORMAL
  zh: '[LATERAL 关联](../tutorial/data_select.html#tutorial-lateral-correlation) - 用法概述。'
- en: '[PRE376]'
  id: totrans-1932
  prefs: []
  type: TYPE_PRE
  zh: '[PRE376]'
- en: '*inherited from the* [`FromClause.outerjoin()`](#sqlalchemy.sql.expression.FromClause.outerjoin
    "sqlalchemy.sql.expression.FromClause.outerjoin") *method of* [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  id: totrans-1933
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    的 [`FromClause.outerjoin()`](#sqlalchemy.sql.expression.FromClause.outerjoin "sqlalchemy.sql.expression.FromClause.outerjoin")
    *方法*'
- en: Return a [`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    from this [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    to another [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause"),
    with the “isouter” flag set to True.
  id: totrans-1934
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个从此 [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    到另一个 [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    的 [`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")，并将“isouter”标志设置为
    True。
- en: 'E.g.:'
  id: totrans-1935
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE377]'
  id: totrans-1936
  prefs: []
  type: TYPE_PRE
  zh: '[PRE377]'
- en: 'The above is equivalent to:'
  id: totrans-1937
  prefs: []
  type: TYPE_NORMAL
  zh: 以上等同于：
- en: '[PRE378]'
  id: totrans-1938
  prefs: []
  type: TYPE_PRE
  zh: '[PRE378]'
- en: 'Parameters:'
  id: totrans-1939
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`right` – the right side of the join; this is any [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") object such as a [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object, and may also be a selectable-compatible object
    such as an ORM-mapped class.'
  id: totrans-1940
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`right` – 连接的右侧；这是任何 [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    对象，比如一个 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    对象，也可以是一个可选择兼容对象，比如一个 ORM 映射类。'
- en: '`onclause` – a SQL expression representing the ON clause of the join. If left
    at `None`, [`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join "sqlalchemy.sql.expression.FromClause.join")
    will attempt to join the two tables based on a foreign key relationship.'
  id: totrans-1941
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onclause` – 表示连接的 ON 子句的 SQL 表达式。如果保留为 `None`，[`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join") 将尝试基于外键关系连接这两个表。'
- en: '`full` – if True, render a FULL OUTER JOIN, instead of LEFT OUTER JOIN.'
  id: totrans-1942
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`full` – 如果为 True，则渲染 FULL OUTER JOIN，而不是 LEFT OUTER JOIN。'
- en: See also
  id: totrans-1943
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join "sqlalchemy.sql.expression.FromClause.join")'
  id: totrans-1944
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join "sqlalchemy.sql.expression.FromClause.join")'
- en: '[`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")'
  id: totrans-1945
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")'
- en: '[PRE379]'
  id: totrans-1946
  prefs: []
  type: TYPE_PRE
  zh: '[PRE379]'
- en: '*inherited from the* `Immutable.params()` *method of* `Immutable`'
  id: totrans-1947
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `Immutable` 的 `Immutable.params()` *方法*'
- en: Return a copy with [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") elements replaced.
  id: totrans-1948
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个替换了 [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") 元素的副本。
- en: 'Returns a copy of this ClauseElement with [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") elements replaced with values taken from
    the given dictionary:'
  id: totrans-1949
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此 ClauseElement 的副本，其中的 [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") 元素替换为从给定字典中取出的值：
- en: '[PRE380]'
  id: totrans-1950
  prefs: []
  type: TYPE_PRE
  zh: '[PRE380]'
- en: '[PRE381]'
  id: totrans-1951
  prefs: []
  type: TYPE_PRE
  zh: '[PRE381]'
- en: '*inherited from the* [`FromClause.primary_key`](#sqlalchemy.sql.expression.FromClause.primary_key
    "sqlalchemy.sql.expression.FromClause.primary_key") *attribute of* [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  id: totrans-1952
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    的 [`FromClause.primary_key`](#sqlalchemy.sql.expression.FromClause.primary_key
    "sqlalchemy.sql.expression.FromClause.primary_key") *属性*'
- en: Return the iterable collection of [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects which comprise the primary key of this `_selectable.FromClause`.
  id: totrans-1953
  prefs: []
  type: TYPE_NORMAL
  zh: 返回由此 `_selectable.FromClause` 的主键组成的 [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 对象的可迭代集合。
- en: For a [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object, this collection is represented by the [`PrimaryKeyConstraint`](constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") which itself is an iterable collection
    of [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    objects.
  id: totrans-1954
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    对象，此集合由 [`PrimaryKeyConstraint`](constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") 表示，它本身是一个 [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 对象的可迭代集合。
- en: '[PRE382]'
  id: totrans-1955
  prefs: []
  type: TYPE_PRE
  zh: '[PRE382]'
- en: '*inherited from the* [`Selectable.replace_selectable()`](#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") *method of* [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
  id: totrans-1956
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Selectable.replace_selectable()`](#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") *方法的* [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
- en: Replace all occurrences of [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") ‘old’ with the given [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") object, returning a copy of this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-1957
  prefs: []
  type: TYPE_NORMAL
  zh: 用给定的 [`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    对象替换所有 [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    中的‘old’，返回此 [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    的副本。
- en: 'Deprecated since version 1.4: The [`Selectable.replace_selectable()`](#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") method is deprecated,
    and will be removed in a future release. Similar functionality is available via
    the sqlalchemy.sql.visitors module.'
  id: totrans-1958
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.4起已弃用：[`Selectable.replace_selectable()`](#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") 方法已弃用，并将在将来的版本中移除。类似功能可通过
    sqlalchemy.sql.visitors 模块实现。
- en: '[PRE383]'
  id: totrans-1959
  prefs: []
  type: TYPE_PRE
  zh: '[PRE383]'
- en: '*inherited from the* [`FromClause.schema`](#sqlalchemy.sql.expression.FromClause.schema
    "sqlalchemy.sql.expression.FromClause.schema") *attribute of* [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  id: totrans-1960
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FromClause.schema`](#sqlalchemy.sql.expression.FromClause.schema "sqlalchemy.sql.expression.FromClause.schema")
    *属性的* [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")'
- en: Define the ‘schema’ attribute for this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-1961
  prefs: []
  type: TYPE_NORMAL
  zh: 为此 [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    定义‘schema’属性。
- en: This is typically `None` for most objects except that of [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), where it is taken as the value of the [`Table.schema`](metadata.html#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table") argument.
  id: totrans-1962
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大多数对象来说，这通常是`None`，除了 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")，在这种情况下，它被视为
    [`Table.schema`](metadata.html#sqlalchemy.schema.Table.params.schema "sqlalchemy.schema.Table")
    参数的值。
- en: '[PRE384]'
  id: totrans-1963
  prefs: []
  type: TYPE_PRE
  zh: '[PRE384]'
- en: '*inherited from the* [`FromClause.select()`](#sqlalchemy.sql.expression.FromClause.select
    "sqlalchemy.sql.expression.FromClause.select") *method of* [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  id: totrans-1964
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FromClause.select()`](#sqlalchemy.sql.expression.FromClause.select
    "sqlalchemy.sql.expression.FromClause.select") *方法的* [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
- en: Return a SELECT of this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-1965
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此 [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    的 SELECT。
- en: 'e.g.:'
  id: totrans-1966
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE385]'
  id: totrans-1967
  prefs: []
  type: TYPE_PRE
  zh: '[PRE385]'
- en: See also
  id: totrans-1968
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    - general purpose method which allows for arbitrary column lists.'
  id: totrans-1969
  prefs: []
  type: TYPE_NORMAL
  zh: '[`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    - 允许任意列列表的通用方法。'
- en: '[PRE386]'
  id: totrans-1970
  prefs: []
  type: TYPE_PRE
  zh: '[PRE386]'
- en: '*inherited from the* [`ClauseElement.self_group()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.self_group
    "sqlalchemy.sql.expression.ClauseElement.self_group") *method of* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
  id: totrans-1971
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ClauseElement.self_group()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.self_group
    "sqlalchemy.sql.expression.ClauseElement.self_group") *方法的* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
- en: Apply a ‘grouping’ to this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  id: totrans-1972
  prefs: []
  type: TYPE_NORMAL
  zh: 对此[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")应用一个‘分组’。
- en: This method is overridden by subclasses to return a “grouping” construct, i.e.
    parenthesis. In particular it’s used by “binary” expressions to provide a grouping
    around themselves when placed into a larger expression, as well as by [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs when placed into the FROM clause
    of another [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select").
    (Note that subqueries should be normally created using the [`Select.alias()`](#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") method, as many platforms require nested
    SELECT statements to be named).
  id: totrans-1973
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法被子类重写以返回一个“分组”构造，即括号。特别是当“二进制”表达式被放置到更大的表达式中时，它们用于在自身周围提供分组，以及当[`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")构造被放置到另一个[`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")的FROM子句中时。(请注意，子查询通常应使用[`Select.alias()`](#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias")方法创建，因为许多平台要求嵌套的SELECT语句必须命名)。
- en: As expressions are composed together, the application of [`self_group()`](#sqlalchemy.sql.expression.TableClause.self_group
    "sqlalchemy.sql.expression.TableClause.self_group") is automatic - end-user code
    should never need to use this method directly. Note that SQLAlchemy’s clause constructs
    take operator precedence into account - so parenthesis might not be needed, for
    example, in an expression like `x OR (y AND z)` - AND takes precedence over OR.
  id: totrans-1974
  prefs: []
  type: TYPE_NORMAL
  zh: 随着表达式的组合，自动应用[`self_group()`](#sqlalchemy.sql.expression.TableClause.self_group
    "sqlalchemy.sql.expression.TableClause.self_group") - 最终用户代码不应直接使用此方法。请注意，SQLAlchemy的子句构造考虑了操作符优先级
    - 因此，例如，在表达式`x OR (y AND z)`中可能不需要括号 - AND优先于OR。
- en: The base [`self_group()`](#sqlalchemy.sql.expression.TableClause.self_group
    "sqlalchemy.sql.expression.TableClause.self_group") method of [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") just returns self.
  id: totrans-1975
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement "sqlalchemy.sql.expression.ClauseElement")的基本[`self_group()`](#sqlalchemy.sql.expression.TableClause.self_group
    "sqlalchemy.sql.expression.TableClause.self_group")方法只返回自身。'
- en: '[PRE387]'
  id: totrans-1976
  prefs: []
  type: TYPE_PRE
  zh: '[PRE387]'
- en: '*inherited from the* `NamedFromClause.table_valued()` *method of* `NamedFromClause`'
  id: totrans-1977
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `NamedFromClause`的`NamedFromClause.table_valued()` *方法。'
- en: Return a `TableValuedColumn` object for this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-1978
  prefs: []
  type: TYPE_NORMAL
  zh: 为此[`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")返回一个`TableValuedColumn`对象。
- en: A `TableValuedColumn` is a [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") that represents a complete row in a
    table. Support for this construct is backend dependent, and is supported in various
    forms by backends such as PostgreSQL, Oracle and SQL Server.
  id: totrans-1979
  prefs: []
  type: TYPE_NORMAL
  zh: '`TableValuedColumn`是一个代表表中完整行的[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")。对此构造的支持取决于后端，并且由后端（如PostgreSQL、Oracle和SQL
    Server）以各种形式支持。'
- en: 'E.g.:'
  id: totrans-1980
  prefs: []
  type: TYPE_NORMAL
  zh: '例如:'
- en: '[PRE388]'
  id: totrans-1981
  prefs: []
  type: TYPE_PRE
  zh: '[PRE388]'
- en: New in version 1.4.0b2.
  id: totrans-1982
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4.0b2中的新功能。
- en: See also
  id: totrans-1983
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Working with SQL Functions](../tutorial/data_select.html#tutorial-functions)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-1984
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用SQL函数](../tutorial/data_select.html#tutorial-functions) - 在[SQLAlchemy统一教程](../tutorial/index.html#unified-tutorial)中'
- en: '[PRE389]'
  id: totrans-1985
  prefs: []
  type: TYPE_PRE
  zh: '[PRE389]'
- en: '*inherited from the* [`FromClause.tablesample()`](#sqlalchemy.sql.expression.FromClause.tablesample
    "sqlalchemy.sql.expression.FromClause.tablesample") *method of* [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  id: totrans-1986
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FromClause.tablesample()`](#sqlalchemy.sql.expression.FromClause.tablesample
    "sqlalchemy.sql.expression.FromClause.tablesample") *方法的* [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
- en: Return a TABLESAMPLE alias of this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-1987
  prefs: []
  type: TYPE_NORMAL
  zh: 为此[`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")返回一个TABLESAMPLE别名。
- en: The return value is the [`TableSample`](#sqlalchemy.sql.expression.TableSample
    "sqlalchemy.sql.expression.TableSample") construct also provided by the top-level
    [`tablesample()`](#sqlalchemy.sql.expression.tablesample "sqlalchemy.sql.expression.tablesample")
    function.
  id: totrans-1988
  prefs: []
  type: TYPE_NORMAL
  zh: 返回值也是顶级[`tablesample()`](#sqlalchemy.sql.expression.tablesample "sqlalchemy.sql.expression.tablesample")函数提供的[`TableSample`](#sqlalchemy.sql.expression.TableSample
    "sqlalchemy.sql.expression.TableSample")构造。
- en: See also
  id: totrans-1989
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`tablesample()`](#sqlalchemy.sql.expression.tablesample "sqlalchemy.sql.expression.tablesample")
    - usage guidelines and parameters'
  id: totrans-1990
  prefs: []
  type: TYPE_NORMAL
  zh: '[`tablesample()`](#sqlalchemy.sql.expression.tablesample "sqlalchemy.sql.expression.tablesample")
    - 用法指南和参数'
- en: '[PRE390]'
  id: totrans-1991
  prefs: []
  type: TYPE_PRE
  zh: '[PRE390]'
- en: '*inherited from the* `Immutable.unique_params()` *method of* `Immutable`'
  id: totrans-1992
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `Immutable` *的* `Immutable.unique_params()` *方法*'
- en: Return a copy with [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") elements replaced.
  id: totrans-1993
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个副本，其中的[`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")元素被替换。
- en: Same functionality as [`ClauseElement.params()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.params
    "sqlalchemy.sql.expression.ClauseElement.params"), except adds unique=True to
    affected bind parameters so that multiple statements can be used.
  id: totrans-1994
  prefs: []
  type: TYPE_NORMAL
  zh: 与[`ClauseElement.params()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.params
    "sqlalchemy.sql.expression.ClauseElement.params")具有相同的功能，只是将unique=True添加到受影响的绑定参数中，以便可以使用多个语句。
- en: '[PRE391]'
  id: totrans-1995
  prefs: []
  type: TYPE_PRE
  zh: '[PRE391]'
- en: Generate an [`update()`](dml.html#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update")
    construct against this [`TableClause`](#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause").
  id: totrans-1996
  prefs: []
  type: TYPE_NORMAL
  zh: 根据此[`TableClause`](#sqlalchemy.sql.expression.TableClause "sqlalchemy.sql.expression.TableClause")生成一个[`update()`](dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update")构造。
- en: 'E.g.:'
  id: totrans-1997
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE392]'
  id: totrans-1998
  prefs: []
  type: TYPE_PRE
  zh: '[PRE392]'
- en: See [`update()`](dml.html#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update")
    for argument and usage information.
  id: totrans-1999
  prefs: []
  type: TYPE_NORMAL
  zh: 有关参数和用法信息，请参阅[`update()`](dml.html#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update")。
- en: '[PRE393]'
  id: totrans-2000
  prefs: []
  type: TYPE_PRE
  zh: '[PRE393]'
- en: Represent a TABLESAMPLE clause.
  id: totrans-2001
  prefs: []
  type: TYPE_NORMAL
  zh: 代表一个TABLESAMPLE子句。
- en: This object is constructed from the [`tablesample()`](#sqlalchemy.sql.expression.tablesample
    "sqlalchemy.sql.expression.tablesample") module level function as well as the
    [`FromClause.tablesample()`](#sqlalchemy.sql.expression.FromClause.tablesample
    "sqlalchemy.sql.expression.FromClause.tablesample") method available on all [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") subclasses.
  id: totrans-2002
  prefs: []
  type: TYPE_NORMAL
  zh: 此对象是从[`tablesample()`](#sqlalchemy.sql.expression.tablesample "sqlalchemy.sql.expression.tablesample")模块级函数以及所有[`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")子类上可用的[`FromClause.tablesample()`](#sqlalchemy.sql.expression.FromClause.tablesample
    "sqlalchemy.sql.expression.FromClause.tablesample")方法构建的。
- en: See also
  id: totrans-2003
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`tablesample()`](#sqlalchemy.sql.expression.tablesample "sqlalchemy.sql.expression.tablesample")'
  id: totrans-2004
  prefs: []
  type: TYPE_NORMAL
  zh: '[`tablesample()`](#sqlalchemy.sql.expression.tablesample "sqlalchemy.sql.expression.tablesample")'
- en: '**Class signature**'
  id: totrans-2005
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.TableSample`](#sqlalchemy.sql.expression.TableSample
    "sqlalchemy.sql.expression.TableSample") (`sqlalchemy.sql.expression.FromClauseAlias`)
  id: totrans-2006
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.expression.TableSample`](#sqlalchemy.sql.expression.TableSample
    "sqlalchemy.sql.expression.TableSample") (`sqlalchemy.sql.expression.FromClauseAlias`)
- en: '[PRE394]'
  id: totrans-2007
  prefs: []
  type: TYPE_PRE
  zh: '[PRE394]'
- en: An alias against a “table valued” SQL function.
  id: totrans-2008
  prefs: []
  type: TYPE_NORMAL
  zh: 对“表值”SQL函数的别名。
- en: 'This construct provides for a SQL function that returns columns to be used
    in the FROM clause of a SELECT statement. The object is generated using the [`FunctionElement.table_valued()`](functions.html#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued") method, e.g.:'
  id: totrans-2009
  prefs: []
  type: TYPE_NORMAL
  zh: 此结构提供了一个SQL函数，该函数返回用于SELECT语句的FROM子句中的列。可以使用[`FunctionElement.table_valued()`](functions.html#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued")方法生成对象，例如：
- en: '[PRE395]'
  id: totrans-2010
  prefs: []
  type: TYPE_PRE
  zh: '[PRE395]'
- en: New in version 1.4.0b2.
  id: totrans-2011
  prefs: []
  type: TYPE_NORMAL
  zh: 新功能在版本1.4.0b2中引入。
- en: See also
  id: totrans-2012
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Table-Valued Functions](../tutorial/data_select.html#tutorial-functions-table-valued)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-2013
  prefs: []
  type: TYPE_NORMAL
  zh: '[表值函数](../tutorial/data_select.html#tutorial-functions-table-valued) - 在[SQLAlchemy
    统一教程](../tutorial/index.html#unified-tutorial)中'
- en: '**Members**'
  id: totrans-2014
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[alias()](#sqlalchemy.sql.expression.TableValuedAlias.alias), [column](#sqlalchemy.sql.expression.TableValuedAlias.column),
    [lateral()](#sqlalchemy.sql.expression.TableValuedAlias.lateral), [render_derived()](#sqlalchemy.sql.expression.TableValuedAlias.render_derived)'
  id: totrans-2015
  prefs: []
  type: TYPE_NORMAL
  zh: '[alias()](#sqlalchemy.sql.expression.TableValuedAlias.alias), [column](#sqlalchemy.sql.expression.TableValuedAlias.column),
    [lateral()](#sqlalchemy.sql.expression.TableValuedAlias.lateral), [render_derived()](#sqlalchemy.sql.expression.TableValuedAlias.render_derived)'
- en: '**Class signature**'
  id: totrans-2016
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.TableValuedAlias`](#sqlalchemy.sql.expression.TableValuedAlias
    "sqlalchemy.sql.expression.TableValuedAlias") (`sqlalchemy.sql.expression.LateralFromClause`,
    [`sqlalchemy.sql.expression.Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias"))
  id: totrans-2017
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.expression.TableValuedAlias`](#sqlalchemy.sql.expression.TableValuedAlias
    "sqlalchemy.sql.expression.TableValuedAlias") (`sqlalchemy.sql.expression.LateralFromClause`,
    [`sqlalchemy.sql.expression.Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias"))
- en: '[PRE396]'
  id: totrans-2018
  prefs: []
  type: TYPE_PRE
  zh: '[PRE396]'
- en: Return a new alias of this [`TableValuedAlias`](#sqlalchemy.sql.expression.TableValuedAlias
    "sqlalchemy.sql.expression.TableValuedAlias").
  id: totrans-2019
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此[`TableValuedAlias`](#sqlalchemy.sql.expression.TableValuedAlias "sqlalchemy.sql.expression.TableValuedAlias")的新别名。
- en: This creates a distinct FROM object that will be distinguished from the original
    one when used in a SQL statement.
  id: totrans-2020
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个独特的FROM对象，当在SQL语句中使用时，它将与原始对象区分开。
- en: '[PRE397]'
  id: totrans-2021
  prefs: []
  type: TYPE_PRE
  zh: '[PRE397]'
- en: Return a column expression representing this [`TableValuedAlias`](#sqlalchemy.sql.expression.TableValuedAlias
    "sqlalchemy.sql.expression.TableValuedAlias").
  id: totrans-2022
  prefs: []
  type: TYPE_NORMAL
  zh: 返回表示此[`TableValuedAlias`](#sqlalchemy.sql.expression.TableValuedAlias "sqlalchemy.sql.expression.TableValuedAlias")的列表达式。
- en: This accessor is used to implement the [`FunctionElement.column_valued()`](functions.html#sqlalchemy.sql.functions.FunctionElement.column_valued
    "sqlalchemy.sql.functions.FunctionElement.column_valued") method. See that method
    for further details.
  id: totrans-2023
  prefs: []
  type: TYPE_NORMAL
  zh: 此访问器用于实现[`FunctionElement.column_valued()`](functions.html#sqlalchemy.sql.functions.FunctionElement.column_valued
    "sqlalchemy.sql.functions.FunctionElement.column_valued")方法。有关详细信息，请参阅该方法。
- en: 'E.g.:'
  id: totrans-2024
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE398]'
  id: totrans-2025
  prefs: []
  type: TYPE_PRE
  zh: '[PRE398]'
- en: See also
  id: totrans-2026
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`FunctionElement.column_valued()`](functions.html#sqlalchemy.sql.functions.FunctionElement.column_valued
    "sqlalchemy.sql.functions.FunctionElement.column_valued")'
  id: totrans-2027
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FunctionElement.column_valued()`](functions.html#sqlalchemy.sql.functions.FunctionElement.column_valued
    "sqlalchemy.sql.functions.FunctionElement.column_valued")'
- en: '[PRE399]'
  id: totrans-2028
  prefs: []
  type: TYPE_PRE
  zh: '[PRE399]'
- en: Return a new [`TableValuedAlias`](#sqlalchemy.sql.expression.TableValuedAlias
    "sqlalchemy.sql.expression.TableValuedAlias") with the lateral flag set, so that
    it renders as LATERAL.
  id: totrans-2029
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个带有LATERAL标志设置的新[`TableValuedAlias`](#sqlalchemy.sql.expression.TableValuedAlias
    "sqlalchemy.sql.expression.TableValuedAlias")，以便在渲染时呈现为LATERAL。
- en: See also
  id: totrans-2030
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`lateral()`](#sqlalchemy.sql.expression.lateral "sqlalchemy.sql.expression.lateral")'
  id: totrans-2031
  prefs: []
  type: TYPE_NORMAL
  zh: '[`lateral()`](#sqlalchemy.sql.expression.lateral "sqlalchemy.sql.expression.lateral")'
- en: '[PRE400]'
  id: totrans-2032
  prefs: []
  type: TYPE_PRE
  zh: '[PRE400]'
- en: Apply “render derived” to this [`TableValuedAlias`](#sqlalchemy.sql.expression.TableValuedAlias
    "sqlalchemy.sql.expression.TableValuedAlias").
  id: totrans-2033
  prefs: []
  type: TYPE_NORMAL
  zh: 将“render derived”应用于此[`TableValuedAlias`](#sqlalchemy.sql.expression.TableValuedAlias
    "sqlalchemy.sql.expression.TableValuedAlias")。
- en: 'This has the effect of the individual column names listed out after the alias
    name in the “AS” sequence, e.g.:'
  id: totrans-2034
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致在别名名称后按“AS”顺序列出各个列名，例如：
- en: '[PRE401]'
  id: totrans-2035
  prefs: []
  type: TYPE_PRE
  zh: '[PRE401]'
- en: 'The `with_types` keyword will render column types inline within the alias expression
    (this syntax currently applies to the PostgreSQL database):'
  id: totrans-2036
  prefs: []
  type: TYPE_NORMAL
  zh: '`with_types`关键字将在别名表达式中内联呈现列类型（此语法目前适用于PostgreSQL数据库）:'
- en: '[PRE402]'
  id: totrans-2037
  prefs: []
  type: TYPE_PRE
  zh: '[PRE402]'
- en: 'Parameters:'
  id: totrans-2038
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`name` – optional string name that will be applied to the alias generated.
    If left as None, a unique anonymizing name will be used.'
  id: totrans-2039
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 将应用于生成的别名的可选字符串名称。如果保持为None，则将使用唯一的匿名化名称。'
- en: '`with_types` – if True, the derived columns will include the datatype specification
    with each column. This is a special syntax currently known to be required by PostgreSQL
    for some SQL functions.'
  id: totrans-2040
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`with_types` – 如果为True，则派生列将包括每个列的数据类型规范。这是当前已知对于某些SQL函数在PostgreSQL中所需的一种特殊语法。'
- en: '[PRE403]'
  id: totrans-2041
  prefs: []
  type: TYPE_PRE
  zh: '[PRE403]'
- en: Wrap a [`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause "sqlalchemy.sql.expression.TextClause")
    construct within a [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")
    interface.
  id: totrans-2042
  prefs: []
  type: TYPE_NORMAL
  zh: 在[`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")接口中包装一个[`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause")构造。
- en: This allows the [`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause") object to gain a `.c` collection and other
    FROM-like capabilities such as [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias"), [`SelectBase.cte()`](#sqlalchemy.sql.expression.SelectBase.cte
    "sqlalchemy.sql.expression.SelectBase.cte"), etc.
  id: totrans-2043
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许[`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause "sqlalchemy.sql.expression.TextClause")对象获得一个`.c`集合和其他类似FROM的功能，例如[`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias")，[`SelectBase.cte()`](#sqlalchemy.sql.expression.SelectBase.cte
    "sqlalchemy.sql.expression.SelectBase.cte")等。
- en: The [`TextualSelect`](#sqlalchemy.sql.expression.TextualSelect "sqlalchemy.sql.expression.TextualSelect")
    construct is produced via the [`TextClause.columns()`](sqlelement.html#sqlalchemy.sql.expression.TextClause.columns
    "sqlalchemy.sql.expression.TextClause.columns") method - see that method for details.
  id: totrans-2044
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TextualSelect`](#sqlalchemy.sql.expression.TextualSelect "sqlalchemy.sql.expression.TextualSelect")构造是通过[`TextClause.columns()`](sqlelement.html#sqlalchemy.sql.expression.TextClause.columns
    "sqlalchemy.sql.expression.TextClause.columns")方法产生的 - 有关详细信息，请参阅该方法。'
- en: 'Changed in version 1.4: the [`TextualSelect`](#sqlalchemy.sql.expression.TextualSelect
    "sqlalchemy.sql.expression.TextualSelect") class was renamed from `TextAsFrom`,
    to more correctly suit its role as a SELECT-oriented object and not a FROM clause.'
  id: totrans-2045
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改：[`TextualSelect`](#sqlalchemy.sql.expression.TextualSelect "sqlalchemy.sql.expression.TextualSelect")
    类从`TextAsFrom`重命名为更正确地适应其作为SELECT导向对象而不是FROM子句的角色。
- en: See also
  id: totrans-2046
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`text()`](sqlelement.html#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")'
  id: totrans-2047
  prefs: []
  type: TYPE_NORMAL
  zh: '[`text()`](sqlelement.html#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")'
- en: '[`TextClause.columns()`](sqlelement.html#sqlalchemy.sql.expression.TextClause.columns
    "sqlalchemy.sql.expression.TextClause.columns") - primary creation interface.'
  id: totrans-2048
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TextClause.columns()`](sqlelement.html#sqlalchemy.sql.expression.TextClause.columns
    "sqlalchemy.sql.expression.TextClause.columns") - 主要创建接口。'
- en: '**Members**'
  id: totrans-2049
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[add_cte()](#sqlalchemy.sql.expression.TextualSelect.add_cte), [alias()](#sqlalchemy.sql.expression.TextualSelect.alias),
    [as_scalar()](#sqlalchemy.sql.expression.TextualSelect.as_scalar), [c](#sqlalchemy.sql.expression.TextualSelect.c),
    [compare()](#sqlalchemy.sql.expression.TextualSelect.compare), [compile()](#sqlalchemy.sql.expression.TextualSelect.compile),
    [corresponding_column()](#sqlalchemy.sql.expression.TextualSelect.corresponding_column),
    [cte()](#sqlalchemy.sql.expression.TextualSelect.cte), [execution_options()](#sqlalchemy.sql.expression.TextualSelect.execution_options),
    [exists()](#sqlalchemy.sql.expression.TextualSelect.exists), [exported_columns](#sqlalchemy.sql.expression.TextualSelect.exported_columns),
    [get_children()](#sqlalchemy.sql.expression.TextualSelect.get_children), [get_execution_options()](#sqlalchemy.sql.expression.TextualSelect.get_execution_options),
    [get_label_style()](#sqlalchemy.sql.expression.TextualSelect.get_label_style),
    [inherit_cache](#sqlalchemy.sql.expression.TextualSelect.inherit_cache), [is_derived_from()](#sqlalchemy.sql.expression.TextualSelect.is_derived_from),
    [label()](#sqlalchemy.sql.expression.TextualSelect.label), [lateral()](#sqlalchemy.sql.expression.TextualSelect.lateral),
    [options()](#sqlalchemy.sql.expression.TextualSelect.options), [params()](#sqlalchemy.sql.expression.TextualSelect.params),
    [replace_selectable()](#sqlalchemy.sql.expression.TextualSelect.replace_selectable),
    [scalar_subquery()](#sqlalchemy.sql.expression.TextualSelect.scalar_subquery),
    [select()](#sqlalchemy.sql.expression.TextualSelect.select), [selected_columns](#sqlalchemy.sql.expression.TextualSelect.selected_columns),
    [self_group()](#sqlalchemy.sql.expression.TextualSelect.self_group), [set_label_style()](#sqlalchemy.sql.expression.TextualSelect.set_label_style),
    [subquery()](#sqlalchemy.sql.expression.TextualSelect.subquery), [unique_params()](#sqlalchemy.sql.expression.TextualSelect.unique_params)'
  id: totrans-2050
  prefs: []
  type: TYPE_NORMAL
  zh: '[add_cte()](#sqlalchemy.sql.expression.TextualSelect.add_cte), [alias()](#sqlalchemy.sql.expression.TextualSelect.alias),
    [as_scalar()](#sqlalchemy.sql.expression.TextualSelect.as_scalar), [c](#sqlalchemy.sql.expression.TextualSelect.c),
    [compare()](#sqlalchemy.sql.expression.TextualSelect.compare), [compile()](#sqlalchemy.sql.expression.TextualSelect.compile),
    [corresponding_column()](#sqlalchemy.sql.expression.TextualSelect.corresponding_column),
    [cte()](#sqlalchemy.sql.expression.TextualSelect.cte), [execution_options()](#sqlalchemy.sql.expression.TextualSelect.execution_options),
    [exists()](#sqlalchemy.sql.expression.TextualSelect.exists), [exported_columns](#sqlalchemy.sql.expression.TextualSelect.exported_columns),
    [get_children()](#sqlalchemy.sql.expression.TextualSelect.get_children), [get_execution_options()](#sqlalchemy.sql.expression.TextualSelect.get_execution_options),
    [get_label_style()](#sqlalchemy.sql.expression.TextualSelect.get_label_style),
    [inherit_cache](#sqlalchemy.sql.expression.TextualSelect.inherit_cache), [is_derived_from()](#sqlalchemy.sql.expression.TextualSelect.is_derived_from),
    [label()](#sqlalchemy.sql.expression.TextualSelect.label), [lateral()](#sqlalchemy.sql.expression.TextualSelect.lateral),
    [options()](#sqlalchemy.sql.expression.TextualSelect.options), [params()](#sqlalchemy.sql.expression.TextualSelect.params),
    [replace_selectable()](#sqlalchemy.sql.expression.TextualSelect.replace_selectable),
    [scalar_subquery()](#sqlalchemy.sql.expression.TextualSelect.scalar_subquery),
    [select()](#sqlalchemy.sql.expression.TextualSelect.select), [selected_columns](#sqlalchemy.sql.expression.TextualSelect.selected_columns),
    [self_group()](#sqlalchemy.sql.expression.TextualSelect.self_group), [set_label_style()](#sqlalchemy.sql.expression.TextualSelect.set_label_style),
    [subquery()](#sqlalchemy.sql.expression.TextualSelect.subquery), [unique_params()](#sqlalchemy.sql.expression.TextualSelect.unique_params)'
- en: '**Class signature**'
  id: totrans-2051
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.TextualSelect`](#sqlalchemy.sql.expression.TextualSelect
    "sqlalchemy.sql.expression.TextualSelect") ([`sqlalchemy.sql.expression.SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase"), `sqlalchemy.sql.expression.ExecutableReturnsRows`,
    `sqlalchemy.sql.expression.Generative`)
  id: totrans-2052
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.expression.TextualSelect`](#sqlalchemy.sql.expression.TextualSelect
    "sqlalchemy.sql.expression.TextualSelect") ([`sqlalchemy.sql.expression.SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase"), `sqlalchemy.sql.expression.ExecutableReturnsRows`,
    `sqlalchemy.sql.expression.Generative`)
- en: '[PRE404]'
  id: totrans-2053
  prefs: []
  type: TYPE_PRE
  zh: '[PRE404]'
- en: '*inherited from the* [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") *method of* [`HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE")'
  id: totrans-2054
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte "sqlalchemy.sql.expression.HasCTE.add_cte")
    *方法的* [`HasCTE`](#sqlalchemy.sql.expression.HasCTE "sqlalchemy.sql.expression.HasCTE")'
- en: Add one or more [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    constructs to this statement.
  id: totrans-2055
  prefs: []
  type: TYPE_NORMAL
  zh: 向此语句添加一个或多个 [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    构造。
- en: This method will associate the given [`CTE`](#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE") constructs with the parent statement such that
    they will each be unconditionally rendered in the WITH clause of the final statement,
    even if not referenced elsewhere within the statement or any sub-selects.
  id: totrans-2056
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法将使给定的 [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    构造与父语句关联起来，以便它们将分别无条件地在最终语句的 WITH 子句中呈现，即使在语句或任何子选择中没有其他地方引用它们。
- en: The optional [`HasCTE.add_cte.nest_here`](#sqlalchemy.sql.expression.HasCTE.add_cte.params.nest_here
    "sqlalchemy.sql.expression.HasCTE.add_cte") parameter when set to True will have
    the effect that each given [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    will render in a WITH clause rendered directly along with this statement, rather
    than being moved to the top of the ultimate rendered statement, even if this statement
    is rendered as a subquery within a larger statement.
  id: totrans-2057
  prefs: []
  type: TYPE_NORMAL
  zh: 可选参数[`HasCTE.add_cte.nest_here`](#sqlalchemy.sql.expression.HasCTE.add_cte.params.nest_here
    "sqlalchemy.sql.expression.HasCTE.add_cte")设置为 True 时，会导致每个给定的[`CTE`](#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE")将直接在此语句中呈现为一个 WITH 子句，而不是被移动到最终呈现的语句顶部，即使此语句作为较大语句内的子查询呈现。
- en: This method has two general uses. One is to embed CTE statements that serve
    some purpose without being referenced explicitly, such as the use case of embedding
    a DML statement such as an INSERT or UPDATE as a CTE inline with a primary statement
    that may draw from its results indirectly. The other is to provide control over
    the exact placement of a particular series of CTE constructs that should remain
    rendered directly in terms of a particular statement that may be nested in a larger
    statement.
  id: totrans-2058
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法有两个通用用途。一个是嵌入一些没有被显式引用的用途的 CTE 语句，比如将 DML 语句（比如 INSERT 或 UPDATE）作为 CTE 内联到可能间接地引用其结果的主语句中的用例。另一个是提供对应特定一系列
    CTE 构造的精确放置的控制，这些 CTE 构造应直接呈现为可能嵌套在较大语句中的特定语句的一部分。
- en: 'E.g.:'
  id: totrans-2059
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE405]'
  id: totrans-2060
  prefs: []
  type: TYPE_PRE
  zh: '[PRE405]'
- en: 'Would render:'
  id: totrans-2061
  prefs: []
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE406]'
  id: totrans-2062
  prefs: []
  type: TYPE_PRE
  zh: '[PRE406]'
- en: Above, the “anon_1” CTE is not referenced in the SELECT statement, however still
    accomplishes the task of running an INSERT statement.
  id: totrans-2063
  prefs: []
  type: TYPE_NORMAL
  zh: 上述中，“anon_1” CTE 在 SELECT 语句中没有被引用，但仍完成了运行 INSERT 语句的任务。
- en: 'Similarly in a DML-related context, using the PostgreSQL [`Insert`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Insert
    "sqlalchemy.dialects.postgresql.Insert") construct to generate an “upsert”:'
  id: totrans-2064
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，在与 DML 相关的上下文中，使用 PostgreSQL [`Insert`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Insert
    "sqlalchemy.dialects.postgresql.Insert") 构造来生成“upsert”：
- en: '[PRE407]'
  id: totrans-2065
  prefs: []
  type: TYPE_PRE
  zh: '[PRE407]'
- en: 'The above statement renders as:'
  id: totrans-2066
  prefs: []
  type: TYPE_NORMAL
  zh: 以上语句的呈现为：
- en: '[PRE408]'
  id: totrans-2067
  prefs: []
  type: TYPE_PRE
  zh: '[PRE408]'
- en: New in version 1.4.21.
  id: totrans-2068
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4.21 中新增。
- en: 'Parameters:'
  id: totrans-2069
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*ctes` –'
  id: totrans-2070
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*ctes` –'
- en: zero or more [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    constructs.
  id: totrans-2071
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 零个或多个 [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    构造。
- en: 'Changed in version 2.0: Multiple CTE instances are accepted'
  id: totrans-2072
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在版本 2.0 中更改：接受多个 CTE 实例
- en: '`nest_here` –'
  id: totrans-2073
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nest_here` –'
- en: if True, the given CTE or CTEs will be rendered as though they specified the
    [`HasCTE.cte.nesting`](#sqlalchemy.sql.expression.HasCTE.cte.params.nesting "sqlalchemy.sql.expression.HasCTE.cte")
    flag to `True` when they were added to this [`HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE"). Assuming the given CTEs are not referenced
    in an outer-enclosing statement as well, the CTEs given should render at the level
    of this statement when this flag is given.
  id: totrans-2074
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果为 True，则给定的 CTE 或 CTE 将被呈现为若它们在添加到此 [`HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE") 时指定了 [`HasCTE.cte.nesting`](#sqlalchemy.sql.expression.HasCTE.cte.params.nesting
    "sqlalchemy.sql.expression.HasCTE.cte") 标志为 `True`。假设给定的 CTE 在外部封闭语句中也没有被引用，则当给出此标志时，给定的
    CTE 应在此语句级别呈现。
- en: New in version 2.0.
  id: totrans-2075
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本 2.0 中新增。
- en: See also
  id: totrans-2076
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`HasCTE.cte.nesting`](#sqlalchemy.sql.expression.HasCTE.cte.params.nesting
    "sqlalchemy.sql.expression.HasCTE.cte")'
  id: totrans-2077
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`HasCTE.cte.nesting`](#sqlalchemy.sql.expression.HasCTE.cte.params.nesting
    "sqlalchemy.sql.expression.HasCTE.cte")'
- en: '[PRE409]'
  id: totrans-2078
  prefs: []
  type: TYPE_PRE
  zh: '[PRE409]'
- en: '*inherited from the* [`SelectBase.alias()`](#sqlalchemy.sql.expression.SelectBase.alias
    "sqlalchemy.sql.expression.SelectBase.alias") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  id: totrans-2079
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SelectBase.alias()`](#sqlalchemy.sql.expression.SelectBase.alias "sqlalchemy.sql.expression.SelectBase.alias")
    *方法的* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")'
- en: Return a named subquery against this [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase").
  id: totrans-2080
  prefs: []
  type: TYPE_NORMAL
  zh: 返回针对此 [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")
    的命名子查询。
- en: For a [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")
    (as opposed to a [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")),
    this returns a [`Subquery`](#sqlalchemy.sql.expression.Subquery "sqlalchemy.sql.expression.Subquery")
    object which behaves mostly the same as the [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") object that is used with a [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-2081
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")（与
    [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    相对），这将返回一个大部分与与 [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    使用的 [`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    对象相同的 [`Subquery`](#sqlalchemy.sql.expression.Subquery "sqlalchemy.sql.expression.Subquery")
    对象。
- en: 'Changed in version 1.4: The [`SelectBase.alias()`](#sqlalchemy.sql.expression.SelectBase.alias
    "sqlalchemy.sql.expression.SelectBase.alias") method is now a synonym for the
    [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery "sqlalchemy.sql.expression.SelectBase.subquery")
    method.'
  id: totrans-2082
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.4起更改：[`SelectBase.alias()`](#sqlalchemy.sql.expression.SelectBase.alias
    "sqlalchemy.sql.expression.SelectBase.alias") 方法现在是 [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") 方法的同义词。
- en: '[PRE410]'
  id: totrans-2083
  prefs: []
  type: TYPE_PRE
  zh: '[PRE410]'
- en: '*inherited from the* [`SelectBase.as_scalar()`](#sqlalchemy.sql.expression.SelectBase.as_scalar
    "sqlalchemy.sql.expression.SelectBase.as_scalar") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  id: totrans-2084
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SelectBase.as_scalar()`](#sqlalchemy.sql.expression.SelectBase.as_scalar
    "sqlalchemy.sql.expression.SelectBase.as_scalar") *方法的* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
- en: 'Deprecated since version 1.4: The [`SelectBase.as_scalar()`](#sqlalchemy.sql.expression.SelectBase.as_scalar
    "sqlalchemy.sql.expression.SelectBase.as_scalar") method is deprecated and will
    be removed in a future release. Please refer to [`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery").'
  id: totrans-2085
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.4起弃用：[`SelectBase.as_scalar()`](#sqlalchemy.sql.expression.SelectBase.as_scalar
    "sqlalchemy.sql.expression.SelectBase.as_scalar") 方法已弃用，并将在将来的版本中移除。请参考 [`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery")。
- en: '[PRE411]'
  id: totrans-2086
  prefs: []
  type: TYPE_PRE
  zh: '[PRE411]'
- en: '*inherited from the* [`SelectBase.c`](#sqlalchemy.sql.expression.SelectBase.c
    "sqlalchemy.sql.expression.SelectBase.c") *attribute of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  id: totrans-2087
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SelectBase.c`](#sqlalchemy.sql.expression.SelectBase.c "sqlalchemy.sql.expression.SelectBase.c")
    *属性的* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")'
- en: 'Deprecated since version 1.4: The [`SelectBase.c`](#sqlalchemy.sql.expression.SelectBase.c
    "sqlalchemy.sql.expression.SelectBase.c") and `SelectBase.columns` attributes
    are deprecated and will be removed in a future release; these attributes implicitly
    create a subquery that should be explicit. Please call [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") first in order to create a subquery,
    which then contains this attribute. To access the columns that this SELECT object
    SELECTs from, use the [`SelectBase.selected_columns`](#sqlalchemy.sql.expression.SelectBase.selected_columns
    "sqlalchemy.sql.expression.SelectBase.selected_columns") attribute.'
  id: totrans-2088
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.4起弃用：[`SelectBase.c`](#sqlalchemy.sql.expression.SelectBase.c "sqlalchemy.sql.expression.SelectBase.c")
    和 `SelectBase.columns` 属性已弃用，并将在将来的版本中移除；这些属性隐式创建了一个应该是明确的子查询。请首先调用 [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") 以创建子查询，然后该子查询包含此属性。要访问此 SELECT
    对象从中选择的列，请使用 [`SelectBase.selected_columns`](#sqlalchemy.sql.expression.SelectBase.selected_columns
    "sqlalchemy.sql.expression.SelectBase.selected_columns") 属性。
- en: '[PRE412]'
  id: totrans-2089
  prefs: []
  type: TYPE_PRE
  zh: '[PRE412]'
- en: '*inherited from the* [`ClauseElement.compare()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.compare
    "sqlalchemy.sql.expression.ClauseElement.compare") *method of* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
  id: totrans-2090
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ClauseElement.compare()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.compare
    "sqlalchemy.sql.expression.ClauseElement.compare") *方法的* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
- en: Compare this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") to the given [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  id: totrans-2091
  prefs: []
  type: TYPE_NORMAL
  zh: 将这个 [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") 与给定的 [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") 进行比较。
- en: Subclasses should override the default behavior, which is a straight identity
    comparison.
  id: totrans-2092
  prefs: []
  type: TYPE_NORMAL
  zh: 子类应该重写默认行为，即直接的标识比较。
- en: '**kw are arguments consumed by subclass `compare()` methods and may be used
    to modify the criteria for comparison (see [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")).'
  id: totrans-2093
  prefs: []
  type: TYPE_NORMAL
  zh: '**kw 是由子类 `compare()` 方法使用的参数，可以用于修改比较条件（请参阅 [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")）。'
- en: '[PRE413]'
  id: totrans-2094
  prefs: []
  type: TYPE_PRE
  zh: '[PRE413]'
- en: '*inherited from the* `CompilerElement.compile()` *method of* `CompilerElement`'
  id: totrans-2095
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `CompilerElement.compile()` *方法的* `CompilerElement`'
- en: Compile this SQL expression.
  id: totrans-2096
  prefs: []
  type: TYPE_NORMAL
  zh: 编译这个 SQL 表达式。
- en: The return value is a [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object. Calling `str()` or `unicode()` on the returned
    value will yield a string representation of the result. The [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object also can return a dictionary of bind parameter
    names and values using the `params` accessor.
  id: totrans-2097
  prefs: []
  type: TYPE_NORMAL
  zh: 返回值是一个 [`Compiled`](internals.html#sqlalchemy.engine.Compiled "sqlalchemy.engine.Compiled")
    对象。在返回值上调用 `str()` 或 `unicode()` 将产生结果的字符串表示。[`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") 对象还可以使用 `params` 访问器返回绑定参数名称和值的字典。
- en: 'Parameters:'
  id: totrans-2098
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`bind` – An [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    or [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    which can provide a [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    in order to generate a [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object. If the `bind` and `dialect` parameters are
    both omitted, a default SQL compiler is used.'
  id: totrans-2099
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bind` – 可以提供 [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    以生成 [`Compiled`](internals.html#sqlalchemy.engine.Compiled "sqlalchemy.engine.Compiled")
    对象的 [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    或 [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")。如果
    `bind` 和 `dialect` 参数都被省略，将使用默认的 SQL 编译器。'
- en: '`column_keys` – Used for INSERT and UPDATE statements, a list of column names
    which should be present in the VALUES clause of the compiled statement. If `None`,
    all columns from the target table object are rendered.'
  id: totrans-2100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`column_keys` – 用于 INSERT 和 UPDATE 语句，应在编译语句的 VALUES 子句中存在的列名列表。如果为 `None`，则从目标表对象中呈现所有列。'
- en: '`dialect` – A [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    instance which can generate a [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object. This argument takes precedence over the
    `bind` argument.'
  id: totrans-2101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect` – 可以生成 [`Compiled`](internals.html#sqlalchemy.engine.Compiled "sqlalchemy.engine.Compiled")
    对象的 [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    实例。此参数优先于 `bind` 参数。'
- en: '`compile_kwargs` –'
  id: totrans-2102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`compile_kwargs` –'
- en: 'optional dictionary of additional parameters that will be passed through to
    the compiler within all “visit” methods. This allows any custom flag to be passed
    through to a custom compilation construct, for example. It is also used for the
    case of passing the `literal_binds` flag through:'
  id: totrans-2103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的额外参数字典，将在所有“visit”方法中传递给编译器。这允许将任何自定义标志传递给自定义编译结构，例如。它还用于通过以下方式传递`literal_binds`标志的情况：
- en: '[PRE414]'
  id: totrans-2104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE414]'
- en: See also
  id: totrans-2105
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[How do I render SQL expressions as strings, possibly with bound parameters
    inlined?](../faq/sqlexpressions.html#faq-sql-expression-string)'
  id: totrans-2106
  prefs: []
  type: TYPE_NORMAL
  zh: '[我如何将 SQL 表达式呈现为字符串，可能包含内联的绑定参数？](../faq/sqlexpressions.html#faq-sql-expression-string)'
- en: '[PRE415]'
  id: totrans-2107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE415]'
- en: '*inherited from the* [`Selectable.corresponding_column()`](#sqlalchemy.sql.expression.Selectable.corresponding_column
    "sqlalchemy.sql.expression.Selectable.corresponding_column") *method of* [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
  id: totrans-2108
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Selectable.corresponding_column()`](#sqlalchemy.sql.expression.Selectable.corresponding_column
    "sqlalchemy.sql.expression.Selectable.corresponding_column") *方法，属于* [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
- en: Given a [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"), return the exported [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") object from the [`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") collection of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable") which corresponds to that original [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") via a common ancestor column.
  id: totrans-2109
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个 [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")，从此 [`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") 集合中返回与该原始 [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") 相对应的导出 [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") 对象，通过一个共同的祖先列。
- en: 'Parameters:'
  id: totrans-2110
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`column` – the target [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") to be matched.'
  id: totrans-2111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`column` – 要匹配的目标 [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")。'
- en: '`require_embedded` – only return corresponding columns for the given [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"), if the given [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") is actually present within a sub-element
    of this [`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable").
    Normally the column will match if it merely shares a common ancestor with one
    of the exported columns of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable").'
  id: totrans-2112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`require_embedded` – 仅在给定 [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") 的情况下返回对应列，如果给定的 [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") 实际上存在于此 [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable") 的子元素中。通常，如果该列仅与此 [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable") 的导出列之一共享一个公共祖先，则该列将匹配。'
- en: See also
  id: totrans-2113
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") - the [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") that is used for the operation.'
  id: totrans-2114
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") - 用于操作的 [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")。'
- en: '[`ColumnCollection.corresponding_column()`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection.corresponding_column
    "sqlalchemy.sql.expression.ColumnCollection.corresponding_column") - implementation
    method.'
  id: totrans-2115
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnCollection.corresponding_column()`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection.corresponding_column
    "sqlalchemy.sql.expression.ColumnCollection.corresponding_column") - 实现方法。'
- en: '[PRE416]'
  id: totrans-2116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE416]'
- en: '*inherited from the* [`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte
    "sqlalchemy.sql.expression.HasCTE.cte") *method of* [`HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE")'
  id: totrans-2117
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte "sqlalchemy.sql.expression.HasCTE.cte")
    *方法，属于* [`HasCTE`](#sqlalchemy.sql.expression.HasCTE "sqlalchemy.sql.expression.HasCTE")'
- en: Return a new [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE"),
    or Common Table Expression instance.
  id: totrans-2118
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的 [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    或公共表达式实例。
- en: Common table expressions are a SQL standard whereby SELECT statements can draw
    upon secondary statements specified along with the primary statement, using a
    clause called “WITH”. Special semantics regarding UNION can also be employed to
    allow “recursive” queries, where a SELECT statement can draw upon the set of rows
    that have previously been selected.
  id: totrans-2119
  prefs: []
  type: TYPE_NORMAL
  zh: 公共表达式是 SQL 标准，其中 SELECT 语句可以借助与主语句一起指定的次要语句，在使用名为 “WITH” 的子句时绘制。还可以使用关于 UNION
    的特殊语义来允许 “递归” 查询，其中 SELECT 语句可以借助以前已选择的行集。
- en: CTEs can also be applied to DML constructs UPDATE, INSERT and DELETE on some
    databases, both as a source of CTE rows when combined with RETURNING, as well
    as a consumer of CTE rows.
  id: totrans-2120
  prefs: []
  type: TYPE_NORMAL
  zh: CTEs 也可应用于某些数据库上的 DML 构造 UPDATE、INSERT 和 DELETE，当与 RETURNING 结合时，作为 CTE 行的来源，以及作为
    CTE 行的使用者。
- en: SQLAlchemy detects [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    objects, which are treated similarly to [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") objects, as special elements to be delivered
    to the FROM clause of the statement as well as to a WITH clause at the top of
    the statement.
  id: totrans-2121
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 检测到 [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    对象，它们被视为类似于 [`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    对象的特殊元素，应交付给语句的 FROM 子句以及语句顶部的 WITH 子句。
- en: For special prefixes such as PostgreSQL “MATERIALIZED” and “NOT MATERIALIZED”,
    the `CTE.prefix_with()` method may be used to establish these.
  id: totrans-2122
  prefs: []
  type: TYPE_NORMAL
  zh: 对于诸如 PostgreSQL 的 “MATERIALIZED” 和 “NOT MATERIALIZED” 等特殊前缀，可以使用 `CTE.prefix_with()`
    方法来建立这些前缀。
- en: 'Changed in version 1.3.13: Added support for prefixes. In particular - MATERIALIZED
    and NOT MATERIALIZED.'
  id: totrans-2123
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.3.13 中更改：增加了对前缀的支持。特别是 - MATERIALIZED 和 NOT MATERIALIZED。
- en: 'Parameters:'
  id: totrans-2124
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`name` – name given to the common table expression. Like [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias"), the name can be left as `None`
    in which case an anonymous symbol will be used at query compile time.'
  id: totrans-2125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` - 给常用表达式命名。像 [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") 一样，名称可以留空，此时在查询编译时将使用匿名符号。'
- en: '`recursive` – if `True`, will render `WITH RECURSIVE`. A recursive common table
    expression is intended to be used in conjunction with UNION ALL in order to derive
    rows from those already selected.'
  id: totrans-2126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`recursive` - 如果为 `True`，将呈现 `WITH RECURSIVE`。递归公共表达式旨在与 UNION ALL 结合使用，以从已选择的行派生行。'
- en: '`nesting` –'
  id: totrans-2127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nesting` - '
- en: if `True`, will render the CTE locally to the statement in which it is referenced.
    For more complex scenarios, the [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") method using the [`HasCTE.add_cte.nest_here`](#sqlalchemy.sql.expression.HasCTE.add_cte.params.nest_here
    "sqlalchemy.sql.expression.HasCTE.add_cte") parameter may also be used to more
    carefully control the exact placement of a particular CTE.
  id: totrans-2128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果为 `True`，将在引用它的语句中本地呈现 CTE。对于更复杂的情况，也可以使用 [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") 方法，并使用 [`HasCTE.add_cte.nest_here`](#sqlalchemy.sql.expression.HasCTE.add_cte.params.nest_here
    "sqlalchemy.sql.expression.HasCTE.add_cte") 参数更精确地控制特定 CTE 的确切放置位置。
- en: New in version 1.4.24.
  id: totrans-2129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本 1.4.24 中的新功能。
- en: See also
  id: totrans-2130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte "sqlalchemy.sql.expression.HasCTE.add_cte")'
  id: totrans-2131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte "sqlalchemy.sql.expression.HasCTE.add_cte")'
- en: The following examples include two from PostgreSQL’s documentation at [https://www.postgresql.org/docs/current/static/queries-with.html](https://www.postgresql.org/docs/current/static/queries-with.html),
    as well as additional examples.
  id: totrans-2132
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例包括两个来自 PostgreSQL 文档的示例 [https://www.postgresql.org/docs/current/static/queries-with.html](https://www.postgresql.org/docs/current/static/queries-with.html)，以及其他示例。
- en: 'Example 1, non recursive:'
  id: totrans-2133
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 1，非递归：
- en: '[PRE417]'
  id: totrans-2134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE417]'
- en: 'Example 2, WITH RECURSIVE:'
  id: totrans-2135
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 2，WITH RECURSIVE：
- en: '[PRE418]'
  id: totrans-2136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE418]'
- en: 'Example 3, an upsert using UPDATE and INSERT with CTEs:'
  id: totrans-2137
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 3，使用 UPDATE 和 INSERT 进行 upsert，带有 CTEs：
- en: '[PRE419]'
  id: totrans-2138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE419]'
- en: 'Example 4, Nesting CTE (SQLAlchemy 1.4.24 and above):'
  id: totrans-2139
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 4，嵌套 CTE（SQLAlchemy 1.4.24 及更高版本）：
- en: '[PRE420]'
  id: totrans-2140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE420]'
- en: 'The above query will render the second CTE nested inside the first, shown with
    inline parameters below as:'
  id: totrans-2141
  prefs: []
  type: TYPE_NORMAL
  zh: 上述查询将呈现第二个 CTE 嵌套在第一个中，如下所示，带有内联参数：
- en: '[PRE421]'
  id: totrans-2142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE421]'
- en: 'The same CTE can be set up using the [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") method as follows (SQLAlchemy 2.0
    and above):'
  id: totrans-2143
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte "sqlalchemy.sql.expression.HasCTE.add_cte")
    方法来设置相同的 CTE，如下所示（SQLAlchemy 2.0 及更高版本）：
- en: '[PRE422]'
  id: totrans-2144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE422]'
- en: 'Example 5, Non-Linear CTE (SQLAlchemy 1.4.28 and above):'
  id: totrans-2145
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 5，非线性 CTE（SQLAlchemy 1.4.28 及更高版本）：
- en: '[PRE423]'
  id: totrans-2146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE423]'
- en: 'The above query will render 2 UNIONs inside the recursive CTE:'
  id: totrans-2147
  prefs: []
  type: TYPE_NORMAL
  zh: 上述查询将在递归 CTE 内渲染 2 个 UNIONs。
- en: '[PRE424]'
  id: totrans-2148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE424]'
- en: See also
  id: totrans-2149
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Query.cte()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.cte "sqlalchemy.orm.Query.cte")
    - ORM version of [`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte "sqlalchemy.sql.expression.HasCTE.cte").'
  id: totrans-2150
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.cte()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.cte "sqlalchemy.orm.Query.cte")
    - ORM 版本的 [`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte "sqlalchemy.sql.expression.HasCTE.cte")。'
- en: '[PRE425]'
  id: totrans-2151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE425]'
- en: '*inherited from the* [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") *method of* [`Executable`](#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")'
  id: totrans-2152
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") *方法的* [`Executable`](#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")'
- en: Set non-SQL options for the statement which take effect during execution.
  id: totrans-2153
  prefs: []
  type: TYPE_NORMAL
  zh: 为语句设置在执行期间生效的非 SQL 选项。
- en: Execution options can be set at many scopes, including per-statement, per-connection,
    or per execution, using methods such as [`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") and parameters which accept
    a dictionary of options such as [`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute") and [`Session.execute.execution_options`](../orm/session_api.html#sqlalchemy.orm.Session.execute.params.execution_options
    "sqlalchemy.orm.Session.execute").
  id: totrans-2154
  prefs: []
  type: TYPE_NORMAL
  zh: 执行选项可以在许多范围内设置，包括每个语句，每个连接或每次执行，使用诸如 [`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") 这样的方法和接受选项字典的参数，例如 [`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute") 和 [`Session.execute.execution_options`](../orm/session_api.html#sqlalchemy.orm.Session.execute.params.execution_options
    "sqlalchemy.orm.Session.execute")。
- en: The primary characteristic of an execution option, as opposed to other kinds
    of options such as ORM loader options, is that **execution options never affect
    the compiled SQL of a query, only things that affect how the SQL statement itself
    is invoked or how results are fetched**. That is, execution options are not part
    of what’s accommodated by SQL compilation nor are they considered part of the
    cached state of a statement.
  id: totrans-2155
  prefs: []
  type: TYPE_NORMAL
  zh: 执行选项的主要特点与其他类型的选项（如 ORM 加载器选项）不同，**执行选项从不影响查询的编译 SQL，只影响 SQL 语句本身如何调用或结果如何获取**。也就是说，执行选项不是
    SQL 编译所涵盖的部分，也不被视为语句的缓存状态的一部分。
- en: 'The [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") method is [generative](../glossary.html#term-generative),
    as is the case for the method as applied to the [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") and [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") objects, which means when the method is called, a copy
    of the object is returned, which applies the given parameters to that new copy,
    but leaves the original unchanged:'
  id: totrans-2156
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") 方法是[生成性的](../glossary.html#term-generative)，就像应用于
    [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    和 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    对象的方法一样，这意味着当调用方法时，会返回对象的副本，该副本应用给定的参数到新的副本中，但原始对象保持不变：'
- en: '[PRE426]'
  id: totrans-2157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE426]'
- en: An exception to this behavior is the [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object, where the [`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") method is explicitly **not**
    generative.
  id: totrans-2158
  prefs: []
  type: TYPE_NORMAL
  zh: 这种行为的一个例外是 [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    对象，在该对象中 [`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") 方法显式地 **不** 是生成性的。
- en: 'The kinds of options that may be passed to [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") and other related methods
    and parameter dictionaries include parameters that are explicitly consumed by
    SQLAlchemy Core or ORM, as well as arbitrary keyword arguments not defined by
    SQLAlchemy, which means the methods and/or parameter dictionaries may be used
    for user-defined parameters that interact with custom code, which may access the
    parameters using methods such as [`Executable.get_execution_options()`](#sqlalchemy.sql.expression.Executable.get_execution_options
    "sqlalchemy.sql.expression.Executable.get_execution_options") and [`Connection.get_execution_options()`](connections.html#sqlalchemy.engine.Connection.get_execution_options
    "sqlalchemy.engine.Connection.get_execution_options"), or within selected event
    hooks using a dedicated `execution_options` event parameter such as [`ConnectionEvents.before_execute.execution_options`](events.html#sqlalchemy.events.ConnectionEvents.before_execute.params.execution_options
    "sqlalchemy.events.ConnectionEvents.before_execute") or [`ORMExecuteState.execution_options`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.execution_options
    "sqlalchemy.orm.ORMExecuteState.execution_options"), e.g.:'
  id: totrans-2159
  prefs: []
  type: TYPE_NORMAL
  zh: 可传递给[`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")及其他相关方法和参数字典的选项类型包括被SQLAlchemy
    Core或ORM明确消耗的参数，以及未由SQLAlchemy定义的任意关键字参数，这意味着这些方法和/或参数字典可用于与自定义代码交互的用户定义参数，可通过诸如[`Executable.get_execution_options()`](#sqlalchemy.sql.expression.Executable.get_execution_options
    "sqlalchemy.sql.expression.Executable.get_execution_options")和[`Connection.get_execution_options()`](connections.html#sqlalchemy.engine.Connection.get_execution_options
    "sqlalchemy.engine.Connection.get_execution_options")等方法访问参数，或者在选择的事件钩子中使用专用的`execution_options`事件参数，例如[`ConnectionEvents.before_execute.execution_options`](events.html#sqlalchemy.events.ConnectionEvents.before_execute.params.execution_options
    "sqlalchemy.events.ConnectionEvents.before_execute")或[`ORMExecuteState.execution_options`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.execution_options
    "sqlalchemy.orm.ORMExecuteState.execution_options")，例如：
- en: '[PRE427]'
  id: totrans-2160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE427]'
- en: 'Within the scope of options that are explicitly recognized by SQLAlchemy, most
    apply to specific classes of objects and not others. The most common execution
    options include:'
  id: totrans-2161
  prefs: []
  type: TYPE_NORMAL
  zh: 在SQLAlchemy明确识别的选项范围内，大多数适用于特定类别的对象而不是其他对象。最常见的执行选项包括：
- en: '[`Connection.execution_options.isolation_level`](connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") - sets the isolation level for
    a connection or a class of connections via an [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"). This option is accepted only by [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") or [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine").'
  id: totrans-2162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.isolation_level`](connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") - 通过[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")为连接或一类连接设置隔离级别。此选项仅由[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")或[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")接受。'
- en: '[`Connection.execution_options.stream_results`](connections.html#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") - indicates results should be
    fetched using a server side cursor; this option is accepted by [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"), by the [`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute") parameter on [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute"), and additionally by [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") on a SQL statement object,
    as well as by ORM constructs like [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute").'
  id: totrans-2163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.stream_results`](connections.html#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") - 表示应使用服务器端游标获取结果；此选项被 [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"), [`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute") 参数上的 [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")，以及 SQL 语句对象上的 [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") 以及 ORM 构造如 [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") 所接受。'
- en: '[`Connection.execution_options.compiled_cache`](connections.html#sqlalchemy.engine.Connection.execution_options.params.compiled_cache
    "sqlalchemy.engine.Connection.execution_options") - indicates a dictionary that
    will serve as the [SQL compilation cache](connections.html#sql-caching) for a
    [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    or [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine"),
    as well as for ORM methods like [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute"). Can be passed as `None` to disable caching
    for statements. This option is not accepted by [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") as it is inadvisable
    to carry along a compilation cache within a statement object.'
  id: totrans-2164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.compiled_cache`](connections.html#sqlalchemy.engine.Connection.execution_options.params.compiled_cache
    "sqlalchemy.engine.Connection.execution_options") - 表示将作为[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")或 [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 的[SQL 编译缓存](connections.html#sql-caching)的字典，以及像 [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") 这样的 ORM 方法。可以将其传递为 `None` 以禁用语句的缓存。由于在语句对象中携带编译缓存是不明智的，因此此选项不被
    [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") 接受。'
- en: '[`Connection.execution_options.schema_translate_map`](connections.html#sqlalchemy.engine.Connection.execution_options.params.schema_translate_map
    "sqlalchemy.engine.Connection.execution_options") - a mapping of schema names
    used by the [Schema Translate Map](connections.html#schema-translating) feature,
    accepted by [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine"),
    [`Executable`](#sqlalchemy.sql.expression.Executable "sqlalchemy.sql.expression.Executable"),
    as well as by ORM constructs like [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute").'
  id: totrans-2165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.schema_translate_map`](connections.html#sqlalchemy.engine.Connection.execution_options.params.schema_translate_map
    "sqlalchemy.engine.Connection.execution_options") - 一个由[模式转换映射](connections.html#schema-translating)功能使用的模式名称映射，由
    [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine"),
    [`Executable`](#sqlalchemy.sql.expression.Executable "sqlalchemy.sql.expression.Executable")
    以及像 [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") 这样的 ORM 结构所接受。'
- en: See also
  id: totrans-2166
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")'
  id: totrans-2167
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")'
- en: '[`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute")'
  id: totrans-2168
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute")'
- en: '[`Session.execute.execution_options`](../orm/session_api.html#sqlalchemy.orm.Session.execute.params.execution_options
    "sqlalchemy.orm.Session.execute")'
  id: totrans-2169
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.execute.execution_options`](../orm/session_api.html#sqlalchemy.orm.Session.execute.params.execution_options
    "sqlalchemy.orm.Session.execute")'
- en: '[ORM Execution Options](../orm/queryguide/api.html#orm-queryguide-execution-options)
    - documentation on all ORM-specific execution options'
  id: totrans-2170
  prefs: []
  type: TYPE_NORMAL
  zh: '[ORM Execution Options](../orm/queryguide/api.html#orm-queryguide-execution-options)
    - documentation on all ORM-specific execution options'
- en: '[PRE428]'
  id: totrans-2171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE428]'
- en: '*inherited from the* [`SelectBase.exists()`](#sqlalchemy.sql.expression.SelectBase.exists
    "sqlalchemy.sql.expression.SelectBase.exists") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  id: totrans-2172
  prefs: []
  type: TYPE_NORMAL
  zh: '*inherited from the* [`SelectBase.exists()`](#sqlalchemy.sql.expression.SelectBase.exists
    "sqlalchemy.sql.expression.SelectBase.exists") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
- en: Return an [`Exists`](#sqlalchemy.sql.expression.Exists "sqlalchemy.sql.expression.Exists")
    representation of this selectable, which can be used as a column expression.
  id: totrans-2173
  prefs: []
  type: TYPE_NORMAL
  zh: Return an [`Exists`](#sqlalchemy.sql.expression.Exists "sqlalchemy.sql.expression.Exists")
    representation of this selectable, which can be used as a column expression.
- en: The returned object is an instance of [`Exists`](#sqlalchemy.sql.expression.Exists
    "sqlalchemy.sql.expression.Exists").
  id: totrans-2174
  prefs: []
  type: TYPE_NORMAL
  zh: The returned object is an instance of [`Exists`](#sqlalchemy.sql.expression.Exists
    "sqlalchemy.sql.expression.Exists").
- en: See also
  id: totrans-2175
  prefs: []
  type: TYPE_NORMAL
  zh: See also
- en: '[`exists()`](#sqlalchemy.sql.expression.exists "sqlalchemy.sql.expression.exists")'
  id: totrans-2176
  prefs: []
  type: TYPE_NORMAL
  zh: '[`exists()`](#sqlalchemy.sql.expression.exists "sqlalchemy.sql.expression.exists")'
- en: '[EXISTS subqueries](../tutorial/data_select.html#tutorial-exists) - in the
    [2.0 style](../glossary.html#term-2.0-style) tutorial.'
  id: totrans-2177
  prefs: []
  type: TYPE_NORMAL
  zh: '[EXISTS subqueries](../tutorial/data_select.html#tutorial-exists) - in the
    [2.0 style](../glossary.html#term-2.0-style) tutorial.'
- en: New in version 1.4.
  id: totrans-2178
  prefs: []
  type: TYPE_NORMAL
  zh: New in version 1.4.
- en: '[PRE429]'
  id: totrans-2179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE429]'
- en: '*inherited from the* [`SelectBase.exported_columns`](#sqlalchemy.sql.expression.SelectBase.exported_columns
    "sqlalchemy.sql.expression.SelectBase.exported_columns") *attribute of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  id: totrans-2180
  prefs: []
  type: TYPE_NORMAL
  zh: '*inherited from the* [`SelectBase.exported_columns`](#sqlalchemy.sql.expression.SelectBase.exported_columns
    "sqlalchemy.sql.expression.SelectBase.exported_columns") *attribute of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
- en: A [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") that represents the “exported” columns
    of this [`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable"),
    not including [`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause") constructs.
  id: totrans-2181
  prefs: []
  type: TYPE_NORMAL
  zh: A [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") that represents the “exported” columns
    of this [`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable"),
    not including [`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause") constructs.
- en: The “exported” columns for a [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase") object are synonymous with the [`SelectBase.selected_columns`](#sqlalchemy.sql.expression.SelectBase.selected_columns
    "sqlalchemy.sql.expression.SelectBase.selected_columns") collection.
  id: totrans-2182
  prefs: []
  type: TYPE_NORMAL
  zh: The “exported” columns for a [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase") object are synonymous with the [`SelectBase.selected_columns`](#sqlalchemy.sql.expression.SelectBase.selected_columns
    "sqlalchemy.sql.expression.SelectBase.selected_columns") collection.
- en: New in version 1.4.
  id: totrans-2183
  prefs: []
  type: TYPE_NORMAL
  zh: New in version 1.4.
- en: See also
  id: totrans-2184
  prefs: []
  type: TYPE_NORMAL
  zh: See also
- en: '[`Select.exported_columns`](#sqlalchemy.sql.expression.Select.exported_columns
    "sqlalchemy.sql.expression.Select.exported_columns")'
  id: totrans-2185
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.exported_columns`](#sqlalchemy.sql.expression.Select.exported_columns
    "sqlalchemy.sql.expression.Select.exported_columns")'
- en: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns")'
  id: totrans-2186
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns")'
- en: '[`FromClause.exported_columns`](#sqlalchemy.sql.expression.FromClause.exported_columns
    "sqlalchemy.sql.expression.FromClause.exported_columns")'
  id: totrans-2187
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FromClause.exported_columns`](#sqlalchemy.sql.expression.FromClause.exported_columns
    "sqlalchemy.sql.expression.FromClause.exported_columns")'
- en: '[PRE430]'
  id: totrans-2188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE430]'
- en: '*inherited from the* `HasTraverseInternals.get_children()` *method of* `HasTraverseInternals`'
  id: totrans-2189
  prefs: []
  type: TYPE_NORMAL
  zh: '*inherited from the* `HasTraverseInternals.get_children()` *method of* `HasTraverseInternals`'
- en: Return immediate child `HasTraverseInternals` elements of this `HasTraverseInternals`.
  id: totrans-2190
  prefs: []
  type: TYPE_NORMAL
  zh: Return immediate child `HasTraverseInternals` elements of this `HasTraverseInternals`.
- en: This is used for visit traversal.
  id: totrans-2191
  prefs: []
  type: TYPE_NORMAL
  zh: This is used for visit traversal.
- en: '**kw may contain flags that change the collection that is returned, for example
    to return a subset of items in order to cut down on larger traversals, or to return
    child items from a different context (such as schema-level collections instead
    of clause-level).'
  id: totrans-2192
  prefs: []
  type: TYPE_NORMAL
  zh: '**kw may contain flags that change the collection that is returned, for example
    to return a subset of items in order to cut down on larger traversals, or to return
    child items from a different context (such as schema-level collections instead
    of clause-level).'
- en: '[PRE431]'
  id: totrans-2193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE431]'
- en: '*inherited from the* [`Executable.get_execution_options()`](#sqlalchemy.sql.expression.Executable.get_execution_options
    "sqlalchemy.sql.expression.Executable.get_execution_options") *method of* [`Executable`](#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")'
  id: totrans-2194
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Executable.get_execution_options()`](#sqlalchemy.sql.expression.Executable.get_execution_options
    "sqlalchemy.sql.expression.Executable.get_execution_options") *方法的* [`Executable`](#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")'
- en: Get the non-SQL options which will take effect during execution.
  id: totrans-2195
  prefs: []
  type: TYPE_NORMAL
  zh: 获取执行期间生效的非 SQL 选项。
- en: New in version 1.3.
  id: totrans-2196
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.3 中的新功能。
- en: See also
  id: totrans-2197
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")'
  id: totrans-2198
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")'
- en: '[PRE432]'
  id: totrans-2199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE432]'
- en: '*inherited from the* [`SelectBase.get_label_style()`](#sqlalchemy.sql.expression.SelectBase.get_label_style
    "sqlalchemy.sql.expression.SelectBase.get_label_style") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  id: totrans-2200
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SelectBase.get_label_style()`](#sqlalchemy.sql.expression.SelectBase.get_label_style
    "sqlalchemy.sql.expression.SelectBase.get_label_style") *方法的* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
- en: Retrieve the current label style.
  id: totrans-2201
  prefs: []
  type: TYPE_NORMAL
  zh: 检索当前的标签样式。
- en: Implemented by subclasses.
  id: totrans-2202
  prefs: []
  type: TYPE_NORMAL
  zh: 由子类实现。
- en: '[PRE433]'
  id: totrans-2203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE433]'
- en: '*inherited from the* `HasCacheKey.inherit_cache` *attribute of* [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.cache_key.HasCacheKey")'
  id: totrans-2204
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey")'
- en: Indicate if this [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") instance should make use of the cache
    key generation scheme used by its immediate superclass.
  id: totrans-2205
  prefs: []
  type: TYPE_NORMAL
  zh: 表示此[`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey "sqlalchemy.sql.traversals.HasCacheKey")
    实例是否应使用其直接超类使用的缓存键生成方案。
- en: The attribute defaults to `None`, which indicates that a construct has not yet
    taken into account whether or not its appropriate for it to participate in caching;
    this is functionally equivalent to setting the value to `False`, except that a
    warning is also emitted.
  id: totrans-2206
  prefs: []
  type: TYPE_NORMAL
  zh: 该属性默认为`None`，表示构造尚未考虑是否适合参与缓存；这在功能上等同于将值设置为`False`，但还会发出警告。
- en: This flag can be set to `True` on a particular class, if the SQL that corresponds
    to the object does not change based on attributes which are local to this class,
    and not its superclass.
  id: totrans-2207
  prefs: []
  type: TYPE_NORMAL
  zh: 如果对应于对象的 SQL 不基于此类本地属性而变化，而是基于其超类，则可以将此标志设置为`True`。
- en: See also
  id: totrans-2208
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Enabling Caching Support for Custom Constructs](compiler.html#compilerext-caching)
    - General guideslines for setting the [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute for third-party
    or user defined SQL constructs.'
  id: totrans-2209
  prefs: []
  type: TYPE_NORMAL
  zh: '[启用自定义结构的缓存支持](compiler.html#compilerext-caching) - 为第三方或用户定义的 SQL 构造设置[`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") 属性的通用指南。'
- en: '[PRE434]'
  id: totrans-2210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE434]'
- en: '*inherited from the* [`ReturnsRows.is_derived_from()`](#sqlalchemy.sql.expression.ReturnsRows.is_derived_from
    "sqlalchemy.sql.expression.ReturnsRows.is_derived_from") *method of* [`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows
    "sqlalchemy.sql.expression.ReturnsRows")'
  id: totrans-2211
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ReturnsRows.is_derived_from()`](#sqlalchemy.sql.expression.ReturnsRows.is_derived_from
    "sqlalchemy.sql.expression.ReturnsRows.is_derived_from") *方法的* [`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows
    "sqlalchemy.sql.expression.ReturnsRows")'
- en: Return `True` if this [`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows
    "sqlalchemy.sql.expression.ReturnsRows") is ‘derived’ from the given [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-2212
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此[`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows "sqlalchemy.sql.expression.ReturnsRows")
    是从给定的[`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")“派生”的，则返回`True`。
- en: An example would be an Alias of a Table is derived from that Table.
  id: totrans-2213
  prefs: []
  type: TYPE_NORMAL
  zh: 一个示例是，表的别名是从该表派生的。
- en: '[PRE435]'
  id: totrans-2214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE435]'
- en: '*inherited from the* [`SelectBase.label()`](#sqlalchemy.sql.expression.SelectBase.label
    "sqlalchemy.sql.expression.SelectBase.label") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  id: totrans-2215
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SelectBase.label()`](#sqlalchemy.sql.expression.SelectBase.label "sqlalchemy.sql.expression.SelectBase.label")
    *方法的* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")'
- en: Return a ‘scalar’ representation of this selectable, embedded as a subquery
    with a label.
  id: totrans-2216
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此可选择性的“标量”表示，嵌入为具有标签的子查询。
- en: See also
  id: totrans-2217
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery").'
  id: totrans-2218
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery")。'
- en: '[PRE436]'
  id: totrans-2219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE436]'
- en: '*inherited from the* [`SelectBase.lateral()`](#sqlalchemy.sql.expression.SelectBase.lateral
    "sqlalchemy.sql.expression.SelectBase.lateral") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  id: totrans-2220
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SelectBase.lateral()`](#sqlalchemy.sql.expression.SelectBase.lateral
    "sqlalchemy.sql.expression.SelectBase.lateral") *方法的* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
- en: Return a LATERAL alias of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable").
  id: totrans-2221
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此 [`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable")
    的 LATERAL 别名。
- en: The return value is the [`Lateral`](#sqlalchemy.sql.expression.Lateral "sqlalchemy.sql.expression.Lateral")
    construct also provided by the top-level [`lateral()`](#sqlalchemy.sql.expression.lateral
    "sqlalchemy.sql.expression.lateral") function.
  id: totrans-2222
  prefs: []
  type: TYPE_NORMAL
  zh: 返回值是顶层 [`lateral()`](#sqlalchemy.sql.expression.lateral "sqlalchemy.sql.expression.lateral")
    函数提供的 [`Lateral`](#sqlalchemy.sql.expression.Lateral "sqlalchemy.sql.expression.Lateral")
    构造。
- en: See also
  id: totrans-2223
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[LATERAL correlation](../tutorial/data_select.html#tutorial-lateral-correlation)
    - overview of usage.'
  id: totrans-2224
  prefs: []
  type: TYPE_NORMAL
  zh: '[LATERAL 关联](../tutorial/data_select.html#tutorial-lateral-correlation) - 用法概述。'
- en: '[PRE437]'
  id: totrans-2225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE437]'
- en: '*inherited from the* [`Executable.options()`](#sqlalchemy.sql.expression.Executable.options
    "sqlalchemy.sql.expression.Executable.options") *method of* [`Executable`](#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")'
  id: totrans-2226
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Executable.options()`](#sqlalchemy.sql.expression.Executable.options
    "sqlalchemy.sql.expression.Executable.options") *方法的* [`Executable`](#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")'
- en: Apply options to this statement.
  id: totrans-2227
  prefs: []
  type: TYPE_NORMAL
  zh: 将选项应用于此语句。
- en: In the general sense, options are any kind of Python object that can be interpreted
    by the SQL compiler for the statement. These options can be consumed by specific
    dialects or specific kinds of compilers.
  id: totrans-2228
  prefs: []
  type: TYPE_NORMAL
  zh: 从一般意义上讲，选项是任何可以被 SQL 编译器解释为语句的 Python 对象。这些选项可以被特定方言或特定类型的编译器消耗。
- en: The most commonly known kind of option are the ORM level options that apply
    “eager load” and other loading behaviors to an ORM query. However, options can
    theoretically be used for many other purposes.
  id: totrans-2229
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的选项类型是应用于 ORM 查询的“急切加载”和其他加载行为的 ORM 级选项。然而，选项理论上可以用于许多其他目的。
- en: For background on specific kinds of options for specific kinds of statements,
    refer to the documentation for those option objects.
  id: totrans-2230
  prefs: []
  type: TYPE_NORMAL
  zh: 关于特定类型语句的特定类型选项的背景，请参考这些选项对象的文档。
- en: 'Changed in version 1.4: - added [`Executable.options()`](#sqlalchemy.sql.expression.Executable.options
    "sqlalchemy.sql.expression.Executable.options") to Core statement objects towards
    the goal of allowing unified Core / ORM querying capabilities.'
  id: totrans-2231
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4 开始更改：- 向核心语句对象添加了 [`Executable.options()`](#sqlalchemy.sql.expression.Executable.options
    "sqlalchemy.sql.expression.Executable.options")，以实现统一的核心 / ORM 查询功能。
- en: See also
  id: totrans-2232
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Column Loading Options](../orm/queryguide/columns.html#loading-columns) -
    refers to options specific to the usage of ORM queries'
  id: totrans-2233
  prefs: []
  type: TYPE_NORMAL
  zh: '[列加载选项](../orm/queryguide/columns.html#loading-columns) - 指的是 ORM 查询的特定选项'
- en: '[Relationship Loading with Loader Options](../orm/queryguide/relationships.html#relationship-loader-options)
    - refers to options specific to the usage of ORM queries'
  id: totrans-2234
  prefs: []
  type: TYPE_NORMAL
  zh: '[带有加载器选项的关系加载](../orm/queryguide/relationships.html#relationship-loader-options)
    - 指的是 ORM 查询的特定选项'
- en: '[PRE438]'
  id: totrans-2235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE438]'
- en: '*inherited from the* [`ClauseElement.params()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.params
    "sqlalchemy.sql.expression.ClauseElement.params") *method of* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
  id: totrans-2236
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ClauseElement.params()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.params
    "sqlalchemy.sql.expression.ClauseElement.params") *方法的* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
- en: Return a copy with [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") elements replaced.
  id: totrans-2237
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个副本，其中的 [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") 元素被替换。
- en: 'Returns a copy of this ClauseElement with [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") elements replaced with values taken from
    the given dictionary:'
  id: totrans-2238
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此 ClauseElement 的副本，其中的 [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") 元素被从给定字典中取出的值替换：
- en: '[PRE439]'
  id: totrans-2239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE439]'
- en: '[PRE440]'
  id: totrans-2240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE440]'
- en: '*inherited from the* [`Selectable.replace_selectable()`](#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") *method of* [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
  id: totrans-2241
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Selectable.replace_selectable()`](#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") *方法的* [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
- en: Replace all occurrences of [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") ‘old’ with the given [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") object, returning a copy of this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-2242
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有 [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    中的 'old' 替换为给定的 [`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    对象，并返回此 [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    的副本。
- en: 'Deprecated since version 1.4: The [`Selectable.replace_selectable()`](#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") method is deprecated,
    and will be removed in a future release. Similar functionality is available via
    the sqlalchemy.sql.visitors module.'
  id: totrans-2243
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.4 弃用：[`Selectable.replace_selectable()`](#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") 方法已弃用，并将在将来的发布版本中删除。类似功能可通过
    sqlalchemy.sql.visitors 模块获得。
- en: '[PRE441]'
  id: totrans-2244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE441]'
- en: '*inherited from the* [`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  id: totrans-2245
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery") *方法的* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
- en: Return a ‘scalar’ representation of this selectable, which can be used as a
    column expression.
  id: totrans-2246
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此可选对象的‘标量’表示，可用作列表达式。
- en: The returned object is an instance of [`ScalarSelect`](#sqlalchemy.sql.expression.ScalarSelect
    "sqlalchemy.sql.expression.ScalarSelect").
  id: totrans-2247
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的对象是 [`ScalarSelect`](#sqlalchemy.sql.expression.ScalarSelect "sqlalchemy.sql.expression.ScalarSelect")
    的实例。
- en: Typically, a select statement which has only one column in its columns clause
    is eligible to be used as a scalar expression. The scalar subquery can then be
    used in the WHERE clause or columns clause of an enclosing SELECT.
  id: totrans-2248
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，仅在其列子句中有一个列的选择语句有资格用作标量表达式。然后可以在封闭的 SELECT 的 WHERE 子句或列子句中使用标量子查询。
- en: Note that the scalar subquery differentiates from the FROM-level subquery that
    can be produced using the [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") method.
  id: totrans-2249
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，标量子查询与可使用 [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") 方法生成的 FROM 级子查询不同。
- en: See also
  id: totrans-2250
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Scalar and Correlated Subqueries](../tutorial/data_select.html#tutorial-scalar-subquery)
    - in the 2.0 tutorial'
  id: totrans-2251
  prefs: []
  type: TYPE_NORMAL
  zh: '[标量子查询和相关子查询](../tutorial/data_select.html#tutorial-scalar-subquery) - 在 2.0
    教程中'
- en: '[PRE442]'
  id: totrans-2252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE442]'
- en: '*inherited from the* [`SelectBase.select()`](#sqlalchemy.sql.expression.SelectBase.select
    "sqlalchemy.sql.expression.SelectBase.select") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  id: totrans-2253
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SelectBase.select()`](#sqlalchemy.sql.expression.SelectBase.select
    "sqlalchemy.sql.expression.SelectBase.select") *方法的* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
- en: 'Deprecated since version 1.4: The [`SelectBase.select()`](#sqlalchemy.sql.expression.SelectBase.select
    "sqlalchemy.sql.expression.SelectBase.select") method is deprecated and will be
    removed in a future release; this method implicitly creates a subquery that should
    be explicit. Please call [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") first in order to create a subquery,
    which then can be selected.'
  id: totrans-2254
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.4 弃用：[`SelectBase.select()`](#sqlalchemy.sql.expression.SelectBase.select
    "sqlalchemy.sql.expression.SelectBase.select") 方法已弃用，并将在将来的发布版本中删除；此方法隐式创建应显式创建的子查询。请先调用
    [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery "sqlalchemy.sql.expression.SelectBase.subquery")
    以创建子查询，然后可以选择该子查询。
- en: '[PRE443]'
  id: totrans-2255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE443]'
- en: A [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") representing the columns that this
    SELECT statement or similar construct returns in its result set, not including
    [`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause "sqlalchemy.sql.expression.TextClause")
    constructs.
  id: totrans-2256
  prefs: []
  type: TYPE_NORMAL
  zh: 代表这个 SELECT 语句或类似结构在其结果集中返回的列的[`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")，不包括[`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause")构造。
- en: This collection differs from the [`FromClause.columns`](#sqlalchemy.sql.expression.FromClause.columns
    "sqlalchemy.sql.expression.FromClause.columns") collection of a [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") in that the columns within this collection
    cannot be directly nested inside another SELECT statement; a subquery must be
    applied first which provides for the necessary parenthesization required by SQL.
  id: totrans-2257
  prefs: []
  type: TYPE_NORMAL
  zh: 此集合与[`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")的[`FromClause.columns`](#sqlalchemy.sql.expression.FromClause.columns
    "sqlalchemy.sql.expression.FromClause.columns")集合不同，因为该集合中的列不能直接嵌套在另一个 SELECT
    语句内；必须先应用一个子查询，该子查询提供了 SQL 所需的必要括号。
- en: For a [`TextualSelect`](#sqlalchemy.sql.expression.TextualSelect "sqlalchemy.sql.expression.TextualSelect")
    construct, the collection contains the [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") objects that were passed to the constructor,
    typically via the [`TextClause.columns()`](sqlelement.html#sqlalchemy.sql.expression.TextClause.columns
    "sqlalchemy.sql.expression.TextClause.columns") method.
  id: totrans-2258
  prefs: []
  type: TYPE_NORMAL
  zh: 对于[`TextualSelect`](#sqlalchemy.sql.expression.TextualSelect "sqlalchemy.sql.expression.TextualSelect")结构，该集合包含通过构造函数传递的[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")对象，通常通过[`TextClause.columns()`](sqlelement.html#sqlalchemy.sql.expression.TextClause.columns
    "sqlalchemy.sql.expression.TextClause.columns")方法传递。
- en: New in version 1.4.
  id: totrans-2259
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.4 新增。
- en: '[PRE444]'
  id: totrans-2260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE444]'
- en: '*inherited from the* [`ClauseElement.self_group()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.self_group
    "sqlalchemy.sql.expression.ClauseElement.self_group") *method of* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
  id: totrans-2261
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`ClauseElement.self_group()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.self_group
    "sqlalchemy.sql.expression.ClauseElement.self_group") *方法继承而来的* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")。'
- en: Apply a ‘grouping’ to this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  id: totrans-2262
  prefs: []
  type: TYPE_NORMAL
  zh: 对这个[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")应用“分组”。
- en: This method is overridden by subclasses to return a “grouping” construct, i.e.
    parenthesis. In particular it’s used by “binary” expressions to provide a grouping
    around themselves when placed into a larger expression, as well as by [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs when placed into the FROM clause
    of another [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select").
    (Note that subqueries should be normally created using the [`Select.alias()`](#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") method, as many platforms require nested
    SELECT statements to be named).
  id: totrans-2263
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法被子类覆盖以返回一个“分组”构造，即括号。特别是它被“二进制”表达式使用，当它们放置到更大的表达式中时，提供了一个围绕自身的分组，以及由[`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")构造在放置到另一个[`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")的 FROM 子句中时使用（请注意，子查询通常应该使用[`Select.alias()`](#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias")方法创建，因为许多平台要求嵌套的 SELECT 语句必须被命名）。
- en: As expressions are composed together, the application of [`self_group()`](#sqlalchemy.sql.expression.TextualSelect.self_group
    "sqlalchemy.sql.expression.TextualSelect.self_group") is automatic - end-user
    code should never need to use this method directly. Note that SQLAlchemy’s clause
    constructs take operator precedence into account - so parenthesis might not be
    needed, for example, in an expression like `x OR (y AND z)` - AND takes precedence
    over OR.
  id: totrans-2264
  prefs: []
  type: TYPE_NORMAL
  zh: 当表达式组合在一起时，[`self_group()`](#sqlalchemy.sql.expression.TextualSelect.self_group
    "sqlalchemy.sql.expression.TextualSelect.self_group")的应用是自动的 - 最终用户代码通常不需要直接使用此方法。请注意，SQLAlchemy
    的子句构造考虑了运算符优先级 - 所以括号可能不是必需的，例如，在表达式`x OR (y AND z)`中 - AND 优先于 OR。
- en: The base [`self_group()`](#sqlalchemy.sql.expression.TextualSelect.self_group
    "sqlalchemy.sql.expression.TextualSelect.self_group") method of [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") just returns self.
  id: totrans-2265
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement "sqlalchemy.sql.expression.ClauseElement")的基本[`self_group()`](#sqlalchemy.sql.expression.TextualSelect.self_group
    "sqlalchemy.sql.expression.TextualSelect.self_group")方法只返回自身。'
- en: '[PRE445]'
  id: totrans-2266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE445]'
- en: Return a new selectable with the specified label style.
  id: totrans-2267
  prefs: []
  type: TYPE_NORMAL
  zh: 返回具有指定标签样式的新可选择项。
- en: Implemented by subclasses.
  id: totrans-2268
  prefs: []
  type: TYPE_NORMAL
  zh: 由子类实现。
- en: '[PRE446]'
  id: totrans-2269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE446]'
- en: '*inherited from the* [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  id: totrans-2270
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") *方法的* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
- en: Return a subquery of this [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase").
  id: totrans-2271
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此[`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")的子查询。
- en: A subquery is from a SQL perspective a parenthesized, named construct that can
    be placed in the FROM clause of another SELECT statement.
  id: totrans-2272
  prefs: []
  type: TYPE_NORMAL
  zh: 从SQL的角度来看，子查询是一个带有括号的命名构造，可以放置在另一个SELECT语句的FROM子句中。
- en: 'Given a SELECT statement such as:'
  id: totrans-2273
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个SELECT语句，例如：
- en: '[PRE447]'
  id: totrans-2274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE447]'
- en: 'The above statement might look like:'
  id: totrans-2275
  prefs: []
  type: TYPE_NORMAL
  zh: 上述语句可能如下所示：
- en: '[PRE448]'
  id: totrans-2276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE448]'
- en: 'The subquery form by itself renders the same way, however when embedded into
    the FROM clause of another SELECT statement, it becomes a named sub-element:'
  id: totrans-2277
  prefs: []
  type: TYPE_NORMAL
  zh: 单独使用子查询形式时，渲染方式相同，但是当嵌入到另一个SELECT语句的FROM子句中时，它变成了一个命名的子元素：
- en: '[PRE449]'
  id: totrans-2278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE449]'
- en: 'The above renders as:'
  id: totrans-2279
  prefs: []
  type: TYPE_NORMAL
  zh: 上述内容的渲染如下：
- en: '[PRE450]'
  id: totrans-2280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE450]'
- en: Historically, [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") is equivalent to calling the
    [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias "sqlalchemy.sql.expression.FromClause.alias")
    method on a FROM object; however, as a [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase") object is not directly FROM object, the
    [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery "sqlalchemy.sql.expression.SelectBase.subquery")
    method provides clearer semantics.
  id: totrans-2281
  prefs: []
  type: TYPE_NORMAL
  zh: 从历史上看，[`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery")等同于在FROM对象上调用[`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias")方法；然而，由于[`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")对象不是直接的FROM对象，因此[`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery")方法提供了更清晰的语义。
- en: New in version 1.4.
  id: totrans-2282
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4中的新功能。
- en: '[PRE451]'
  id: totrans-2283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE451]'
- en: '*inherited from the* [`ClauseElement.unique_params()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.unique_params
    "sqlalchemy.sql.expression.ClauseElement.unique_params") *method of* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
  id: totrans-2284
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ClauseElement.unique_params()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.unique_params
    "sqlalchemy.sql.expression.ClauseElement.unique_params") *方法的* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
- en: Return a copy with [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") elements replaced.
  id: totrans-2285
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个副本，其中[`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")元素被替换。
- en: Same functionality as [`ClauseElement.params()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.params
    "sqlalchemy.sql.expression.ClauseElement.params"), except adds unique=True to
    affected bind parameters so that multiple statements can be used.
  id: totrans-2286
  prefs: []
  type: TYPE_NORMAL
  zh: 与[`ClauseElement.params()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.params
    "sqlalchemy.sql.expression.ClauseElement.params")具有相同功能，只是将unique=True添加到受影响的绑定参数中，以便可以使用多个语句。
- en: '[PRE452]'
  id: totrans-2287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE452]'
- en: Represent a `VALUES` construct that can be used as a FROM element in a statement.
  id: totrans-2288
  prefs: []
  type: TYPE_NORMAL
  zh: 表示可以作为语句中的FROM元素使用的`VALUES`构造。
- en: The [`Values`](#sqlalchemy.sql.expression.Values "sqlalchemy.sql.expression.Values")
    object is created from the [`values()`](#sqlalchemy.sql.expression.values "sqlalchemy.sql.expression.values")
    function.
  id: totrans-2289
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Values`](#sqlalchemy.sql.expression.Values "sqlalchemy.sql.expression.Values")对象是从[`values()`](#sqlalchemy.sql.expression.values
    "sqlalchemy.sql.expression.values")函数创建的。'
- en: New in version 1.4.
  id: totrans-2290
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4中的新功能。
- en: '**Members**'
  id: totrans-2291
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[alias()](#sqlalchemy.sql.expression.Values.alias), [data()](#sqlalchemy.sql.expression.Values.data),
    [lateral()](#sqlalchemy.sql.expression.Values.lateral), [scalar_values()](#sqlalchemy.sql.expression.Values.scalar_values)'
  id: totrans-2292
  prefs: []
  type: TYPE_NORMAL
  zh: '[alias()](#sqlalchemy.sql.expression.Values.alias), [data()](#sqlalchemy.sql.expression.Values.data),
    [lateral()](#sqlalchemy.sql.expression.Values.lateral), [scalar_values()](#sqlalchemy.sql.expression.Values.scalar_values)'
- en: '**Class signature**'
  id: totrans-2293
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.Values`](#sqlalchemy.sql.expression.Values
    "sqlalchemy.sql.expression.Values") (`sqlalchemy.sql.roles.InElementRole`, `sqlalchemy.sql.expression.Generative`,
    `sqlalchemy.sql.expression.LateralFromClause`)
  id: totrans-2294
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.sql.expression.Values`](#sqlalchemy.sql.expression.Values
    "sqlalchemy.sql.expression.Values") (`sqlalchemy.sql.roles.InElementRole`, `sqlalchemy.sql.expression.Generative`,
    `sqlalchemy.sql.expression.LateralFromClause`)
- en: '[PRE453]'
  id: totrans-2295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE453]'
- en: Return a new [`Values`](#sqlalchemy.sql.expression.Values "sqlalchemy.sql.expression.Values")
    construct that is a copy of this one with the given name.
  id: totrans-2296
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个具有给定名称的新 [`Values`](#sqlalchemy.sql.expression.Values "sqlalchemy.sql.expression.Values")
    构造的副本。
- en: This method is a VALUES-specific specialization of the [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") method.
  id: totrans-2297
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法是 [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias "sqlalchemy.sql.expression.FromClause.alias")
    方法的 `VALUES` 特定专业化。
- en: See also
  id: totrans-2298
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using Aliases](../tutorial/data_select.html#tutorial-using-aliases)'
  id: totrans-2299
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用别名](../tutorial/data_select.html#tutorial-using-aliases)'
- en: '[`alias()`](#sqlalchemy.sql.expression.alias "sqlalchemy.sql.expression.alias")'
  id: totrans-2300
  prefs: []
  type: TYPE_NORMAL
  zh: '[`alias()`](#sqlalchemy.sql.expression.alias "sqlalchemy.sql.expression.alias")'
- en: '[PRE454]'
  id: totrans-2301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE454]'
- en: Return a new [`Values`](#sqlalchemy.sql.expression.Values "sqlalchemy.sql.expression.Values")
    construct, adding the given data to the data list.
  id: totrans-2302
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的 [`Values`](#sqlalchemy.sql.expression.Values "sqlalchemy.sql.expression.Values")
    构造，将给定的数据添加到数据列表中。
- en: 'E.g.:'
  id: totrans-2303
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE455]'
  id: totrans-2304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE455]'
- en: 'Parameters:'
  id: totrans-2305
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**values** – a sequence (i.e. list) of tuples that map to the column expressions
    given in the [`Values`](#sqlalchemy.sql.expression.Values "sqlalchemy.sql.expression.Values")
    constructor.'
  id: totrans-2306
  prefs: []
  type: TYPE_NORMAL
  zh: '**values** – 一个元组序列（即列表），映射到在 [`Values`](#sqlalchemy.sql.expression.Values
    "sqlalchemy.sql.expression.Values") 构造函数中给出的列表达式。'
- en: '[PRE456]'
  id: totrans-2307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE456]'
- en: Return a new [`Values`](#sqlalchemy.sql.expression.Values "sqlalchemy.sql.expression.Values")
    with the lateral flag set, so that it renders as LATERAL.
  id: totrans-2308
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的具有 LATERAL 标志设置的 [`Values`](#sqlalchemy.sql.expression.Values "sqlalchemy.sql.expression.Values")，以便它呈现为
    LATERAL。
- en: See also
  id: totrans-2309
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`lateral()`](#sqlalchemy.sql.expression.lateral "sqlalchemy.sql.expression.lateral")'
  id: totrans-2310
  prefs: []
  type: TYPE_NORMAL
  zh: '[`lateral()`](#sqlalchemy.sql.expression.lateral "sqlalchemy.sql.expression.lateral")'
- en: '[PRE457]'
  id: totrans-2311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE457]'
- en: Returns a scalar `VALUES` construct that can be used as a COLUMN element in
    a statement.
  id: totrans-2312
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个标量 `VALUES` 构造，可用作语句中的 COLUMN 元素。
- en: New in version 2.0.0b4.
  id: totrans-2313
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0.0b4 中的新增内容。
- en: '[PRE458]'
  id: totrans-2314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE458]'
- en: Represent a scalar `VALUES` construct that can be used as a COLUMN element in
    a statement.
  id: totrans-2315
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一个标量 `VALUES` 构造，可用作语句中的 COLUMN 元素。
- en: The [`ScalarValues`](#sqlalchemy.sql.expression.ScalarValues "sqlalchemy.sql.expression.ScalarValues")
    object is created from the [`Values.scalar_values()`](#sqlalchemy.sql.expression.Values.scalar_values
    "sqlalchemy.sql.expression.Values.scalar_values") method. It’s also automatically
    generated when a [`Values`](#sqlalchemy.sql.expression.Values "sqlalchemy.sql.expression.Values")
    is used in an `IN` or `NOT IN` condition.
  id: totrans-2316
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ScalarValues`](#sqlalchemy.sql.expression.ScalarValues "sqlalchemy.sql.expression.ScalarValues")
    对象是从 [`Values.scalar_values()`](#sqlalchemy.sql.expression.Values.scalar_values
    "sqlalchemy.sql.expression.Values.scalar_values") 方法创建的。当 [`Values`](#sqlalchemy.sql.expression.Values
    "sqlalchemy.sql.expression.Values") 在 `IN` 或 `NOT IN` 条件中使用时，它也会自动生成。 '
- en: New in version 2.0.0b4.
  id: totrans-2317
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0.0b4 中的新增内容。
- en: '**Class signature**'
  id: totrans-2318
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.ScalarValues`](#sqlalchemy.sql.expression.ScalarValues
    "sqlalchemy.sql.expression.ScalarValues") (`sqlalchemy.sql.roles.InElementRole`,
    `sqlalchemy.sql.expression.GroupedElement`, [`sqlalchemy.sql.expression.ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"))
  id: totrans-2319
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.sql.expression.ScalarValues`](#sqlalchemy.sql.expression.ScalarValues
    "sqlalchemy.sql.expression.ScalarValues") (`sqlalchemy.sql.roles.InElementRole`,
    `sqlalchemy.sql.expression.GroupedElement`, [`sqlalchemy.sql.expression.ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"))
- en: Label Style Constants
  id: totrans-2320
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标签样式常量
- en: Constants used with the [`GenerativeSelect.set_label_style()`](#sqlalchemy.sql.expression.GenerativeSelect.set_label_style
    "sqlalchemy.sql.expression.GenerativeSelect.set_label_style") method.
  id: totrans-2321
  prefs: []
  type: TYPE_NORMAL
  zh: 与 [`GenerativeSelect.set_label_style()`](#sqlalchemy.sql.expression.GenerativeSelect.set_label_style
    "sqlalchemy.sql.expression.GenerativeSelect.set_label_style") 方法一起使用的常量。
- en: '| Object Name | Description |'
  id: totrans-2322
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-2323
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [SelectLabelStyle](#sqlalchemy.sql.expression.SelectLabelStyle) | Label style
    constants that may be passed to [`Select.set_label_style()`](#sqlalchemy.sql.expression.Select.set_label_style
    "sqlalchemy.sql.expression.Select.set_label_style"). |'
  id: totrans-2324
  prefs: []
  type: TYPE_TB
  zh: '| [SelectLabelStyle](#sqlalchemy.sql.expression.SelectLabelStyle) | 可传递给 [`Select.set_label_style()`](#sqlalchemy.sql.expression.Select.set_label_style
    "sqlalchemy.sql.expression.Select.set_label_style") 方法的标签样式常量。 |'
- en: '[PRE459]'
  id: totrans-2325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE459]'
- en: Label style constants that may be passed to [`Select.set_label_style()`](#sqlalchemy.sql.expression.Select.set_label_style
    "sqlalchemy.sql.expression.Select.set_label_style").
  id: totrans-2326
  prefs: []
  type: TYPE_NORMAL
  zh: 可传递给 [`Select.set_label_style()`](#sqlalchemy.sql.expression.Select.set_label_style
    "sqlalchemy.sql.expression.Select.set_label_style") 方法的标签样式常量。
- en: '**Members**'
  id: totrans-2327
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[LABEL_STYLE_DEFAULT](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_DEFAULT),
    [LABEL_STYLE_DISAMBIGUATE_ONLY](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_DISAMBIGUATE_ONLY),
    [LABEL_STYLE_NONE](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_NONE),
    [LABEL_STYLE_TABLENAME_PLUS_COL](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL)'
  id: totrans-2328
  prefs: []
  type: TYPE_NORMAL
  zh: '[LABEL_STYLE_DEFAULT](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_DEFAULT)，[LABEL_STYLE_DISAMBIGUATE_ONLY](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_DISAMBIGUATE_ONLY)，[LABEL_STYLE_NONE](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_NONE)，[LABEL_STYLE_TABLENAME_PLUS_COL](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL)'
- en: '**Class signature**'
  id: totrans-2329
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.SelectLabelStyle`](#sqlalchemy.sql.expression.SelectLabelStyle
    "sqlalchemy.sql.expression.SelectLabelStyle") (`enum.Enum`)
  id: totrans-2330
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sqlalchemy.sql.expression.SelectLabelStyle`](#sqlalchemy.sql.expression.SelectLabelStyle
    "sqlalchemy.sql.expression.SelectLabelStyle") 类 (`enum.Enum`)'
- en: '[PRE460]'
  id: totrans-2331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE460]'
- en: The default label style, refers to `LABEL_STYLE_DISAMBIGUATE_ONLY`.
  id: totrans-2332
  prefs: []
  type: TYPE_NORMAL
  zh: 默认标签样式，指的是 `LABEL_STYLE_DISAMBIGUATE_ONLY`。
- en: New in version 1.4.
  id: totrans-2333
  prefs: []
  type: TYPE_NORMAL
  zh: 自 1.4 版本新增。
- en: '[PRE461]'
  id: totrans-2334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE461]'
- en: Label style indicating that columns with a name that conflicts with an existing
    name should be labeled with a semi-anonymizing label when generating the columns
    clause of a SELECT statement.
  id: totrans-2335
  prefs: []
  type: TYPE_NORMAL
  zh: 标签样式指示，当生成 SELECT 语句的列子句时，具有与现有名称冲突的名称的列应使用半匿名标签进行标记。
- en: 'Below, most column names are left unaffected, except for the second occurrence
    of the name `columna`, which is labeled using the label `columna_1` to disambiguate
    it from that of `tablea.columna`:'
  id: totrans-2336
  prefs: []
  type: TYPE_NORMAL
  zh: 下面，大多数列名保持不变，除了第二次出现的 `columna` 名称，它使用标签 `columna_1` 进行标记，以区分它与 `tablea.columna`
    的区别：
- en: '[PRE462]'
  id: totrans-2337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE462]'
- en: Used with the [`GenerativeSelect.set_label_style()`](#sqlalchemy.sql.expression.GenerativeSelect.set_label_style
    "sqlalchemy.sql.expression.GenerativeSelect.set_label_style") method, `LABEL_STYLE_DISAMBIGUATE_ONLY`
    is the default labeling style for all SELECT statements outside of [1.x style](../glossary.html#term-1.x-style)
    ORM queries.
  id: totrans-2338
  prefs: []
  type: TYPE_NORMAL
  zh: 与 [`GenerativeSelect.set_label_style()`](#sqlalchemy.sql.expression.GenerativeSelect.set_label_style
    "sqlalchemy.sql.expression.GenerativeSelect.set_label_style") 方法一起使用时，`LABEL_STYLE_DISAMBIGUATE_ONLY`
    是所有 SELECT 语句的默认标签样式，适用于 [1.x 风格](../glossary.html#term-1.x-style) ORM 查询之外。
- en: New in version 1.4.
  id: totrans-2339
  prefs: []
  type: TYPE_NORMAL
  zh: 自 1.4 版本新增。
- en: '[PRE463]'
  id: totrans-2340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE463]'
- en: Label style indicating no automatic labeling should be applied to the columns
    clause of a SELECT statement.
  id: totrans-2341
  prefs: []
  type: TYPE_NORMAL
  zh: 标签样式指示不应将任何自动标签应用于 SELECT 语句的列子句。
- en: 'Below, the columns named `columna` are both rendered as is, meaning that the
    name `columna` can only refer to the first occurrence of this name within a result
    set, as well as if the statement were used as a subquery:'
  id: totrans-2342
  prefs: []
  type: TYPE_NORMAL
  zh: 下面，名为 `columna` 的列都保持原样，这意味着名称 `columna` 只能指代结果集中的第一次出现，以及如果该语句用作子查询时：
- en: '[PRE464]'
  id: totrans-2343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE464]'
- en: Used with the [`Select.set_label_style()`](#sqlalchemy.sql.expression.Select.set_label_style
    "sqlalchemy.sql.expression.Select.set_label_style") method.
  id: totrans-2344
  prefs: []
  type: TYPE_NORMAL
  zh: 与 [`Select.set_label_style()`](#sqlalchemy.sql.expression.Select.set_label_style
    "sqlalchemy.sql.expression.Select.set_label_style") 方法一起使用。
- en: New in version 1.4.
  id: totrans-2345
  prefs: []
  type: TYPE_NORMAL
  zh: 自 1.4 版本新增。
- en: '[PRE465]'
  id: totrans-2346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE465]'
- en: Label style indicating all columns should be labeled as `<tablename>_<columnname>`
    when generating the columns clause of a SELECT statement, to disambiguate same-named
    columns referenced from different tables, aliases, or subqueries.
  id: totrans-2347
  prefs: []
  type: TYPE_NORMAL
  zh: 标签样式指示当生成 SELECT 语句的列子句时，所有列都应标记为 `<tablename>_<columnname>`，以区分来自不同表、别名或子查询的同名列。
- en: 'Below, all column names are given a label so that the two same-named columns
    `columna` are disambiguated as `table1_columna` and `table2_columna`:'
  id: totrans-2348
  prefs: []
  type: TYPE_NORMAL
  zh: 下面，所有列名都被赋予标签，以便将两个同名列 `columna` 区分为 `table1_columna` 和 `table2_columna`：
- en: '[PRE466]'
  id: totrans-2349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE466]'
- en: Used with the [`GenerativeSelect.set_label_style()`](#sqlalchemy.sql.expression.GenerativeSelect.set_label_style
    "sqlalchemy.sql.expression.GenerativeSelect.set_label_style") method. Equivalent
    to the legacy method `Select.apply_labels()`; `LABEL_STYLE_TABLENAME_PLUS_COL`
    is SQLAlchemy’s legacy auto-labeling style. `LABEL_STYLE_DISAMBIGUATE_ONLY` provides
    a less intrusive approach to disambiguation of same-named column expressions.
  id: totrans-2350
  prefs: []
  type: TYPE_NORMAL
  zh: 与 [`GenerativeSelect.set_label_style()`](#sqlalchemy.sql.expression.GenerativeSelect.set_label_style
    "sqlalchemy.sql.expression.GenerativeSelect.set_label_style") 方法一起使用。相当于传统方法 `Select.apply_labels()`；`LABEL_STYLE_TABLENAME_PLUS_COL`
    是 SQLAlchemy 的传统自动标签样式。`LABEL_STYLE_DISAMBIGUATE_ONLY` 提供了一种更少侵入性的方法来消除同名列表达式的歧义。
- en: New in version 1.4.
  id: totrans-2351
  prefs: []
  type: TYPE_NORMAL
  zh: 自 1.4 版本新增。
- en: See also
  id: totrans-2352
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`Select.set_label_style()`](#sqlalchemy.sql.expression.Select.set_label_style
    "sqlalchemy.sql.expression.Select.set_label_style")'
  id: totrans-2353
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.set_label_style()`](#sqlalchemy.sql.expression.Select.set_label_style
    "sqlalchemy.sql.expression.Select.set_label_style")'
- en: '[`Select.get_label_style()`](#sqlalchemy.sql.expression.Select.get_label_style
    "sqlalchemy.sql.expression.Select.get_label_style")'
  id: totrans-2354
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.get_label_style()`](#sqlalchemy.sql.expression.Select.get_label_style
    "sqlalchemy.sql.expression.Select.get_label_style")'
- en: '## Selectable Foundational Constructors'
  id: totrans-2355
  prefs: []
  type: TYPE_NORMAL
  zh: '## 可选的基础构造器'
- en: Top level “FROM clause” and “SELECT” constructors.
  id: totrans-2356
  prefs: []
  type: TYPE_NORMAL
  zh: 顶层“FROM子句”和“SELECT”构造器。
- en: '| Object Name | Description |'
  id: totrans-2357
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-2358
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [except_](#sqlalchemy.sql.expression.except_)(*selects) | Return an `EXCEPT`
    of multiple selectables. |'
  id: totrans-2359
  prefs: []
  type: TYPE_TB
  zh: '| [除去](#sqlalchemy.sql.expression.except_)(*selects) | 返回多个可选择的`EXCEPT`。 |'
- en: '| [except_all](#sqlalchemy.sql.expression.except_all)(*selects) | Return an
    `EXCEPT ALL` of multiple selectables. |'
  id: totrans-2360
  prefs: []
  type: TYPE_TB
  zh: '| [除去全部](#sqlalchemy.sql.expression.except_all)(*selects) | 返回多个可选择的`EXCEPT
    ALL`。 |'
- en: '| [exists](#sqlalchemy.sql.expression.exists)([__argument]) | Construct a new
    [`Exists`](#sqlalchemy.sql.expression.Exists "sqlalchemy.sql.expression.Exists")
    construct. |'
  id: totrans-2361
  prefs: []
  type: TYPE_TB
  zh: '| [存在](#sqlalchemy.sql.expression.exists)([__argument]) | 构造一个新的[`Exists`](#sqlalchemy.sql.expression.Exists
    "sqlalchemy.sql.expression.Exists")构造。 |'
- en: '| [intersect](#sqlalchemy.sql.expression.intersect)(*selects) | Return an `INTERSECT`
    of multiple selectables. |'
  id: totrans-2362
  prefs: []
  type: TYPE_TB
  zh: '| [交集](#sqlalchemy.sql.expression.intersect)(*selects) | 返回多个可选择的`INTERSECT`。
    |'
- en: '| [intersect_all](#sqlalchemy.sql.expression.intersect_all)(*selects) | Return
    an `INTERSECT ALL` of multiple selectables. |'
  id: totrans-2363
  prefs: []
  type: TYPE_TB
  zh: '| [全交集](#sqlalchemy.sql.expression.intersect_all)(*selects) | 返回多个可选择的`INTERSECT
    ALL`。 |'
- en: '| [select](#sqlalchemy.sql.expression.select)(*entities, **__kw) | Construct
    a new [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select").
    |'
  id: totrans-2364
  prefs: []
  type: TYPE_TB
  zh: '| [选择](#sqlalchemy.sql.expression.select)(*entities, **__kw) | 构造一个新的[`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select")。 |'
- en: '| [table](#sqlalchemy.sql.expression.table)(name, *columns, **kw) | Produce
    a new [`TableClause`](#sqlalchemy.sql.expression.TableClause "sqlalchemy.sql.expression.TableClause").
    |'
  id: totrans-2365
  prefs: []
  type: TYPE_TB
  zh: '| [表](#sqlalchemy.sql.expression.table)(name, *columns, **kw) | 生成一个新的[`TableClause`](#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause")。 |'
- en: '| [union](#sqlalchemy.sql.expression.union)(*selects) | Return a `UNION` of
    multiple selectables. |'
  id: totrans-2366
  prefs: []
  type: TYPE_TB
  zh: '| [联合](#sqlalchemy.sql.expression.union)(*selects) | 返回多个可选择的`UNION`。 |'
- en: '| [union_all](#sqlalchemy.sql.expression.union_all)(*selects) | Return a `UNION
    ALL` of multiple selectables. |'
  id: totrans-2367
  prefs: []
  type: TYPE_TB
  zh: '| [全联合](#sqlalchemy.sql.expression.union_all)(*selects) | 返回多个可选择的`UNION ALL`。
    |'
- en: '| [values](#sqlalchemy.sql.expression.values)(*columns, [name, literal_binds])
    | Construct a [`Values`](#sqlalchemy.sql.expression.Values "sqlalchemy.sql.expression.Values")
    construct. |'
  id: totrans-2368
  prefs: []
  type: TYPE_TB
  zh: '| [数值](#sqlalchemy.sql.expression.values)(*columns, [name, literal_binds])
    | 构造一个[`Values`](#sqlalchemy.sql.expression.Values "sqlalchemy.sql.expression.Values")构造。
    |'
- en: '[PRE467]'
  id: totrans-2369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE467]'
- en: Return an `EXCEPT` of multiple selectables.
  id: totrans-2370
  prefs: []
  type: TYPE_NORMAL
  zh: 返回多个可选择的`EXCEPT`。
- en: The returned object is an instance of [`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect
    "sqlalchemy.sql.expression.CompoundSelect").
  id: totrans-2371
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的对象是一个[`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect "sqlalchemy.sql.expression.CompoundSelect")的实例。
- en: 'Parameters:'
  id: totrans-2372
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '***selects** – a list of [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    instances.'
  id: totrans-2373
  prefs: []
  type: TYPE_NORMAL
  zh: '***selects** – 一个[`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")实例的列表。'
- en: '[PRE468]'
  id: totrans-2374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE468]'
- en: Return an `EXCEPT ALL` of multiple selectables.
  id: totrans-2375
  prefs: []
  type: TYPE_NORMAL
  zh: 返回多个可选择的`EXCEPT ALL`。
- en: The returned object is an instance of [`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect
    "sqlalchemy.sql.expression.CompoundSelect").
  id: totrans-2376
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的对象是一个[`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect "sqlalchemy.sql.expression.CompoundSelect")的实例。
- en: 'Parameters:'
  id: totrans-2377
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '***selects** – a list of [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    instances.'
  id: totrans-2378
  prefs: []
  type: TYPE_NORMAL
  zh: '***selects** – 一个[`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")实例的列表。'
- en: '[PRE469]'
  id: totrans-2379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE469]'
- en: Construct a new [`Exists`](#sqlalchemy.sql.expression.Exists "sqlalchemy.sql.expression.Exists")
    construct.
  id: totrans-2380
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个新的[`Exists`](#sqlalchemy.sql.expression.Exists "sqlalchemy.sql.expression.Exists")构造。
- en: 'The [`exists()`](#sqlalchemy.sql.expression.exists "sqlalchemy.sql.expression.exists")
    can be invoked by itself to produce an [`Exists`](#sqlalchemy.sql.expression.Exists
    "sqlalchemy.sql.expression.Exists") construct, which will accept simple WHERE
    criteria:'
  id: totrans-2381
  prefs: []
  type: TYPE_NORMAL
  zh: '[`exists()`](#sqlalchemy.sql.expression.exists "sqlalchemy.sql.expression.exists")可以单独调用以生成一个[`Exists`](#sqlalchemy.sql.expression.Exists
    "sqlalchemy.sql.expression.Exists")构造，它将接受简单的WHERE条件：'
- en: '[PRE470]'
  id: totrans-2382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE470]'
- en: 'However, for greater flexibility in constructing the SELECT, an existing [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") construct may be converted to an [`Exists`](#sqlalchemy.sql.expression.Exists
    "sqlalchemy.sql.expression.Exists"), most conveniently by making use of the [`SelectBase.exists()`](#sqlalchemy.sql.expression.SelectBase.exists
    "sqlalchemy.sql.expression.SelectBase.exists") method:'
  id: totrans-2383
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，为了在构建SELECT语句时更灵活，可以将现有的[`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")构造转换为[`Exists`](#sqlalchemy.sql.expression.Exists
    "sqlalchemy.sql.expression.Exists")，最方便的方法是利用[`SelectBase.exists()`](#sqlalchemy.sql.expression.SelectBase.exists
    "sqlalchemy.sql.expression.SelectBase.exists")方法：
- en: '[PRE471]'
  id: totrans-2384
  prefs: []
  type: TYPE_PRE
  zh: '[PRE471]'
- en: 'The EXISTS criteria is then used inside of an enclosing SELECT:'
  id: totrans-2385
  prefs: []
  type: TYPE_NORMAL
  zh: EXISTS条件然后用于封闭SELECT中：
- en: '[PRE472]'
  id: totrans-2386
  prefs: []
  type: TYPE_PRE
  zh: '[PRE472]'
- en: 'The above statement will then be of the form:'
  id: totrans-2387
  prefs: []
  type: TYPE_NORMAL
  zh: 上述语句将具有以下形式：
- en: '[PRE473]'
  id: totrans-2388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE473]'
- en: See also
  id: totrans-2389
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[EXISTS subqueries](../tutorial/data_select.html#tutorial-exists) - in the
    [2.0 style](../glossary.html#term-2.0-style) tutorial.'
  id: totrans-2390
  prefs: []
  type: TYPE_NORMAL
  zh: '[EXISTS子查询](../tutorial/data_select.html#tutorial-exists) - 在[2.0样式](../glossary.html#term-2.0-style)教程中。'
- en: '[`SelectBase.exists()`](#sqlalchemy.sql.expression.SelectBase.exists "sqlalchemy.sql.expression.SelectBase.exists")
    - method to transform a `SELECT` to an `EXISTS` clause.'
  id: totrans-2391
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SelectBase.exists()`](#sqlalchemy.sql.expression.SelectBase.exists "sqlalchemy.sql.expression.SelectBase.exists")
    - 将`SELECT`转换为`EXISTS`子句的方法。'
- en: '[PRE474]'
  id: totrans-2392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE474]'
- en: Return an `INTERSECT` of multiple selectables.
  id: totrans-2393
  prefs: []
  type: TYPE_NORMAL
  zh: 返回多个可选项的`INTERSECT`。
- en: The returned object is an instance of [`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect
    "sqlalchemy.sql.expression.CompoundSelect").
  id: totrans-2394
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的对象是[`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect "sqlalchemy.sql.expression.CompoundSelect")的实例。
- en: 'Parameters:'
  id: totrans-2395
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '***selects** – a list of [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    instances.'
  id: totrans-2396
  prefs: []
  type: TYPE_NORMAL
  zh: '***selects** – 一个[`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")实例列表。'
- en: '[PRE475]'
  id: totrans-2397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE475]'
- en: Return an `INTERSECT ALL` of multiple selectables.
  id: totrans-2398
  prefs: []
  type: TYPE_NORMAL
  zh: 返回多个可选项的`INTERSECT ALL`。
- en: The returned object is an instance of [`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect
    "sqlalchemy.sql.expression.CompoundSelect").
  id: totrans-2399
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的对象是[`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect "sqlalchemy.sql.expression.CompoundSelect")的实例。
- en: 'Parameters:'
  id: totrans-2400
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '***selects** – a list of [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    instances.'
  id: totrans-2401
  prefs: []
  type: TYPE_NORMAL
  zh: '***selects** – 一个[`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")实例列表。'
- en: '[PRE476]'
  id: totrans-2402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE476]'
- en: Construct a new [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select").
  id: totrans-2403
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个新的[`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")。
- en: 'New in version 1.4: - The [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    function now accepts column arguments positionally. The top-level [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") function will automatically use the 1.x or
    2.x style API based on the incoming arguments; using [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") from the `sqlalchemy.future` module will enforce
    that only the 2.x style constructor is used.'
  id: totrans-2404
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4版新功能： - [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")函数现在接受位置参数列。顶级[`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")函数将根据传入的参数自动使用1.x或2.x样式的API；使用`sqlalchemy.future`模块中的[`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")将强制使用只使用2.x样式构造函数。
- en: Similar functionality is also available via the [`FromClause.select()`](#sqlalchemy.sql.expression.FromClause.select
    "sqlalchemy.sql.expression.FromClause.select") method on any [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-2405
  prefs: []
  type: TYPE_NORMAL
  zh: 任何[`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")上的[`FromClause.select()`](#sqlalchemy.sql.expression.FromClause.select
    "sqlalchemy.sql.expression.FromClause.select")方法也提供了类似的功能。
- en: See also
  id: totrans-2406
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Using SELECT Statements](../tutorial/data_select.html#tutorial-selecting-data)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-2407
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用SELECT语句](../tutorial/data_select.html#tutorial-selecting-data) - 在[SQLAlchemy统一教程](../tutorial/index.html#unified-tutorial)中。'
- en: 'Parameters:'
  id: totrans-2408
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '***entities** –'
  id: totrans-2409
  prefs: []
  type: TYPE_NORMAL
  zh: '***entities** –'
- en: Entities to SELECT from. For Core usage, this is typically a series of [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") and / or [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") objects which will form the columns clause
    of the resulting statement. For those objects that are instances of [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") (typically [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") or [`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    objects), the [`FromClause.c`](#sqlalchemy.sql.expression.FromClause.c "sqlalchemy.sql.expression.FromClause.c")
    collection is extracted to form a collection of [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") objects.
  id: totrans-2410
  prefs: []
  type: TYPE_NORMAL
  zh: 要从中选择的实体。对于 Core 使用，这通常是一系列 [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") 和/或 [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") 对象，它们将形成生成语句的列子句。对于那些是 [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") 实例的对象（通常是 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 或 [`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    对象），[`FromClause.c`](#sqlalchemy.sql.expression.FromClause.c "sqlalchemy.sql.expression.FromClause.c")
    集合被提取以形成 [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") 对象的集合。
- en: This parameter will also accept [`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause") constructs as given, as well as ORM-mapped
    classes.
  id: totrans-2411
  prefs: []
  type: TYPE_NORMAL
  zh: 此参数还将接受给定的 [`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause") 构造，以及 ORM 映射的类。
- en: '[PRE477]'
  id: totrans-2412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE477]'
- en: Produce a new [`TableClause`](#sqlalchemy.sql.expression.TableClause "sqlalchemy.sql.expression.TableClause").
  id: totrans-2413
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个新的 [`TableClause`](#sqlalchemy.sql.expression.TableClause "sqlalchemy.sql.expression.TableClause")。
- en: The object returned is an instance of [`TableClause`](#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause"), which represents the “syntactical” portion
    of the schema-level [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object. It may be used to construct lightweight table constructs.
  id: totrans-2414
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的对象是 [`TableClause`](#sqlalchemy.sql.expression.TableClause "sqlalchemy.sql.expression.TableClause")
    的一个实例，它表示模式级别的 “语法” 部分 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    对象。它可以用于构建轻量级表构造。
- en: 'Parameters:'
  id: totrans-2415
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`name` – Name of the table.'
  id: totrans-2416
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 表的名称。'
- en: '`columns` – A collection of [`column()`](sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column") constructs.'
  id: totrans-2417
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`columns` – 一组 [`column()`](sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column") 构造。'
- en: '`schema` –'
  id: totrans-2418
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` –'
- en: The schema name for this table.
  id: totrans-2419
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此表的模式名称。
- en: 'New in version 1.3.18: [`table()`](#sqlalchemy.sql.expression.table "sqlalchemy.sql.expression.table")
    can now accept a `schema` argument.'
  id: totrans-2420
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 1.3.18 版中新增：[`table()`](#sqlalchemy.sql.expression.table "sqlalchemy.sql.expression.table")
    现在可以接受 `schema` 参数。
- en: '[PRE478]'
  id: totrans-2421
  prefs: []
  type: TYPE_PRE
  zh: '[PRE478]'
- en: Return a `UNION` of multiple selectables.
  id: totrans-2422
  prefs: []
  type: TYPE_NORMAL
  zh: 返回多个可选择的 `UNION`。
- en: The returned object is an instance of [`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect
    "sqlalchemy.sql.expression.CompoundSelect").
  id: totrans-2423
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的对象是 [`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect "sqlalchemy.sql.expression.CompoundSelect")
    的一个实例。
- en: A similar [`union()`](#sqlalchemy.sql.expression.union "sqlalchemy.sql.expression.union")
    method is available on all [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") subclasses.
  id: totrans-2424
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    子类上都有类似的 [`union()`](#sqlalchemy.sql.expression.union "sqlalchemy.sql.expression.union")
    方法可用。
- en: 'Parameters:'
  id: totrans-2425
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*selects` – a list of [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    instances.'
  id: totrans-2426
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*selects` – [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    实例的列表。'
- en: '`**kwargs` – available keyword arguments are the same as those of [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select").'
  id: totrans-2427
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kwargs` – 可用的关键字参数与 [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    的相同。'
- en: '[PRE479]'
  id: totrans-2428
  prefs: []
  type: TYPE_PRE
  zh: '[PRE479]'
- en: Return a `UNION ALL` of multiple selectables.
  id: totrans-2429
  prefs: []
  type: TYPE_NORMAL
  zh: 返回多个可选择的 `UNION ALL`。
- en: The returned object is an instance of [`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect
    "sqlalchemy.sql.expression.CompoundSelect").
  id: totrans-2430
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的对象是 [`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect "sqlalchemy.sql.expression.CompoundSelect")
    的一个实例。
- en: A similar [`union_all()`](#sqlalchemy.sql.expression.union_all "sqlalchemy.sql.expression.union_all")
    method is available on all [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") subclasses.
  id: totrans-2431
  prefs: []
  type: TYPE_NORMAL
  zh: 所有[`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")子类上都有一个类似的[`union_all()`](#sqlalchemy.sql.expression.union_all
    "sqlalchemy.sql.expression.union_all")方法可用。
- en: 'Parameters:'
  id: totrans-2432
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '***selects** – a list of [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    instances.'
  id: totrans-2433
  prefs: []
  type: TYPE_NORMAL
  zh: '***selects** – 一个[`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")实例的列表。'
- en: '[PRE480]'
  id: totrans-2434
  prefs: []
  type: TYPE_PRE
  zh: '[PRE480]'
- en: Construct a [`Values`](#sqlalchemy.sql.expression.Values "sqlalchemy.sql.expression.Values")
    construct.
  id: totrans-2435
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个[`Values`](#sqlalchemy.sql.expression.Values "sqlalchemy.sql.expression.Values")构造。
- en: 'The column expressions and the actual data for [`Values`](#sqlalchemy.sql.expression.Values
    "sqlalchemy.sql.expression.Values") are given in two separate steps. The constructor
    receives the column expressions typically as [`column()`](sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column") constructs, and the data is then passed via
    the [`Values.data()`](#sqlalchemy.sql.expression.Values.data "sqlalchemy.sql.expression.Values.data")
    method as a list, which can be called multiple times to add more data, e.g.:'
  id: totrans-2436
  prefs: []
  type: TYPE_NORMAL
  zh: 列表达式和[`Values`](#sqlalchemy.sql.expression.Values "sqlalchemy.sql.expression.Values")的实际数据是在两个独立的步骤中给出的。构造函数通常接收列表达式，如[`column()`](sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column")构造，然后数据通过[`Values.data()`](#sqlalchemy.sql.expression.Values.data
    "sqlalchemy.sql.expression.Values.data")方法作为列表传递，可以多次调用以添加更多数据，例如：
- en: '[PRE481]'
  id: totrans-2437
  prefs: []
  type: TYPE_PRE
  zh: '[PRE481]'
- en: 'Parameters:'
  id: totrans-2438
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*columns` – column expressions, typically composed using [`column()`](sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column") objects.'
  id: totrans-2439
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*columns` – 列表达式，通常使用[`column()`](sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column")对象组合而成。'
- en: '`name` – the name for this VALUES construct. If omitted, the VALUES construct
    will be unnamed in a SQL expression. Different backends may have different requirements
    here.'
  id: totrans-2440
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 此VALUES构造的名称。如果省略，VALUES构造将在SQL表达式中无名。不同的后端可能具有不同的要求。'
- en: '`literal_binds` – Defaults to False. Whether or not to render the data values
    inline in the SQL output, rather than using bound parameters.'
  id: totrans-2441
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`literal_binds` – 默认为False。是否在SQL输出中将数据值直接呈现为内联形式，而不是使用绑定参数。'
- en: '## Selectable Modifier Constructors'
  id: totrans-2442
  prefs: []
  type: TYPE_NORMAL
  zh: '## 可选修饰符构造函数'
- en: Functions listed here are more commonly available as methods from [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") and [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable") elements, for example, the [`alias()`](#sqlalchemy.sql.expression.alias
    "sqlalchemy.sql.expression.alias") function is usually invoked via the [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") method.
  id: totrans-2443
  prefs: []
  type: TYPE_NORMAL
  zh: 此处列出的函数更常见地作为[`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")和[`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")元素的方法，例如，[`alias()`](#sqlalchemy.sql.expression.alias
    "sqlalchemy.sql.expression.alias")函数通常通过[`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias")方法调用。
- en: '| Object Name | Description |'
  id: totrans-2444
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-2445
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [alias](#sqlalchemy.sql.expression.alias)(selectable[, name, flat]) | Return
    a named alias of the given [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause"). |'
  id: totrans-2446
  prefs: []
  type: TYPE_TB
  zh: '| [alias](#sqlalchemy.sql.expression.alias)(selectable[, name, flat]) | 返回给定[`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")的命名别名。 |'
- en: '| [cte](#sqlalchemy.sql.expression.cte)(selectable[, name, recursive]) | Return
    a new [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE"),
    or Common Table Expression instance. |'
  id: totrans-2447
  prefs: []
  type: TYPE_TB
  zh: '| [cte](#sqlalchemy.sql.expression.cte)(selectable[, name, recursive]) | 返回一个新的[`CTE`](#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE")，或公共表达式实例。 |'
- en: '| [join](#sqlalchemy.sql.expression.join)(left, right[, onclause, isouter,
    ...]) | Produce a [`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    object, given two [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    expressions. |'
  id: totrans-2448
  prefs: []
  type: TYPE_TB
  zh: '| [join](#sqlalchemy.sql.expression.join)(left, right[, onclause, isouter,
    ...]) | 根据两个[`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")表达式生成一个[`Join`](#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join")对象。 |'
- en: '| [lateral](#sqlalchemy.sql.expression.lateral)(selectable[, name]) | Return
    a [`Lateral`](#sqlalchemy.sql.expression.Lateral "sqlalchemy.sql.expression.Lateral")
    object. |'
  id: totrans-2449
  prefs: []
  type: TYPE_TB
  zh: '| [lateral](#sqlalchemy.sql.expression.lateral)(selectable[, name]) | 返回一个[`Lateral`](#sqlalchemy.sql.expression.Lateral
    "sqlalchemy.sql.expression.Lateral")对象。 |'
- en: '| [outerjoin](#sqlalchemy.sql.expression.outerjoin)(left, right[, onclause,
    full]) | Return an `OUTER JOIN` clause element. |'
  id: totrans-2450
  prefs: []
  type: TYPE_TB
  zh: '| [outerjoin](#sqlalchemy.sql.expression.outerjoin)(left, right[, onclause,
    full]) | 返回一个`OUTER JOIN`子句元素。 |'
- en: '| [tablesample](#sqlalchemy.sql.expression.tablesample)(selectable, sampling[,
    name, seed]) | Return a [`TableSample`](#sqlalchemy.sql.expression.TableSample
    "sqlalchemy.sql.expression.TableSample") object. |'
  id: totrans-2451
  prefs: []
  type: TYPE_TB
  zh: '| [tablesample](#sqlalchemy.sql.expression.tablesample)(selectable, sampling[,
    name, seed]) | 返回一个[`TableSample`](#sqlalchemy.sql.expression.TableSample "sqlalchemy.sql.expression.TableSample")对象。
    |'
- en: '[PRE482]'
  id: totrans-2452
  prefs: []
  type: TYPE_PRE
  zh: '[PRE482]'
- en: Return a named alias of the given [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-2453
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定[`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")的命名别名。
- en: For [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    and [`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    objects, the return type is the [`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    object. Other kinds of `NamedFromClause` objects may be returned for other kinds
    of [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    objects.
  id: totrans-2454
  prefs: []
  type: TYPE_NORMAL
  zh: 对于[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")和[`Join`](#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join")对象，返回类型是[`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias")对象。其他类型的`NamedFromClause`对象可能会返回其他类型的[`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")对象。
- en: The named alias represents any [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") with an alternate name assigned within
    SQL, typically using the `AS` clause when generated, e.g. `SELECT * FROM table
    AS aliasname`.
  id: totrans-2455
  prefs: []
  type: TYPE_NORMAL
  zh: 命名别名代表具有SQL中分配的替代名称的任何[`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")，通常在生成时使用`AS`子句，例如`SELECT
    * FROM table AS aliasname`。
- en: Equivalent functionality is available via the [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") method available on all [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") objects.
  id: totrans-2456
  prefs: []
  type: TYPE_NORMAL
  zh: 可通过所有[`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")对象上可用的[`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias")方法获得等效功能。
- en: 'Parameters:'
  id: totrans-2457
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`selectable` – any [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    subclass, such as a table, select statement, etc.'
  id: totrans-2458
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`selectable` – 任何[`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")子类，例如表、选择语句等。'
- en: '`name` – string name to be assigned as the alias. If `None`, a name will be
    deterministically generated at compile time. Deterministic means the name is guaranteed
    to be unique against other constructs used in the same statement, and will also
    be the same name for each successive compilation of the same statement object.'
  id: totrans-2459
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 要分配为别名的字符串名称。如果为`None`，则会在编译时确定性地生成名称。确定性意味着该名称确保与同一语句中使用的其他结构相对于其他结构的唯一性，并且对同一语句对象的每次后续编译也将是相同的名称。'
- en: '`flat` – Will be passed through to if the given selectable is an instance of
    [`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join") - see
    `Join.alias()` for details.'
  id: totrans-2460
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flat` – 如果给定的可选择对象是[`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")的实例，则将传递给
    - 有关详细信息，请参阅`Join.alias()`。'
- en: '[PRE483]'
  id: totrans-2461
  prefs: []
  type: TYPE_PRE
  zh: '[PRE483]'
- en: Return a new [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE"),
    or Common Table Expression instance.
  id: totrans-2462
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的[`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")或通用表达式实例。
- en: Please see [`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte "sqlalchemy.sql.expression.HasCTE.cte")
    for detail on CTE usage.
  id: totrans-2463
  prefs: []
  type: TYPE_NORMAL
  zh: 有关CTE用法的详细信息，请参阅[`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte "sqlalchemy.sql.expression.HasCTE.cte")。
- en: '[PRE484]'
  id: totrans-2464
  prefs: []
  type: TYPE_PRE
  zh: '[PRE484]'
- en: Produce a [`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    object, given two [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    expressions.
  id: totrans-2465
  prefs: []
  type: TYPE_NORMAL
  zh: 给定两个[`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")表达式生成一个[`Join`](#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join")对象。
- en: 'E.g.:'
  id: totrans-2466
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE485]'
  id: totrans-2467
  prefs: []
  type: TYPE_PRE
  zh: '[PRE485]'
- en: 'would emit SQL along the lines of:'
  id: totrans-2468
  prefs: []
  type: TYPE_NORMAL
  zh: 将生成类似以下内容的SQL：
- en: '[PRE486]'
  id: totrans-2469
  prefs: []
  type: TYPE_PRE
  zh: '[PRE486]'
- en: Similar functionality is available given any [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") object (e.g. such as a [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")) using the [`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join") method.
  id: totrans-2470
  prefs: []
  type: TYPE_NORMAL
  zh: 任何[`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")对象（例如[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")）都可以使用[`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join")方法提供类似的功能。
- en: 'Parameters:'
  id: totrans-2471
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`left` – The left side of the join.'
  id: totrans-2472
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`left` – 连接的左侧。'
- en: '`right` – the right side of the join; this is any [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") object such as a [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object, and may also be a selectable-compatible object
    such as an ORM-mapped class.'
  id: totrans-2473
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`right` – 连接的右侧；这是任何[`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")对象，例如[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象，也可以是一个可选择兼容对象，例如ORM映射类。'
- en: '`onclause` – a SQL expression representing the ON clause of the join. If left
    at `None`, [`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join "sqlalchemy.sql.expression.FromClause.join")
    will attempt to join the two tables based on a foreign key relationship.'
  id: totrans-2474
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onclause` – 表示连接的ON子句的SQL表达式。如果保持为`None`，[`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join")将尝试基于外键关系连接两个表。'
- en: '`isouter` – if True, render a LEFT OUTER JOIN, instead of JOIN.'
  id: totrans-2475
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isouter` – 如果为True，则渲染一个LEFT OUTER JOIN，而不是JOIN。'
- en: '`full` – if True, render a FULL OUTER JOIN, instead of JOIN.'
  id: totrans-2476
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`full` – 如果为True，则渲染一个FULL OUTER JOIN，而不是JOIN。'
- en: See also
  id: totrans-2477
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join "sqlalchemy.sql.expression.FromClause.join")
    - method form, based on a given left side.'
  id: totrans-2478
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join "sqlalchemy.sql.expression.FromClause.join")
    - 基于给定左侧的方法形式。'
- en: '[`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    - the type of object produced.'
  id: totrans-2479
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    - 生成的对象类型。'
- en: '[PRE487]'
  id: totrans-2480
  prefs: []
  type: TYPE_PRE
  zh: '[PRE487]'
- en: Return a [`Lateral`](#sqlalchemy.sql.expression.Lateral "sqlalchemy.sql.expression.Lateral")
    object.
  id: totrans-2481
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个[`Lateral`](#sqlalchemy.sql.expression.Lateral "sqlalchemy.sql.expression.Lateral")对象。
- en: '[`Lateral`](#sqlalchemy.sql.expression.Lateral "sqlalchemy.sql.expression.Lateral")
    is an [`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    subclass that represents a subquery with the LATERAL keyword applied to it.'
  id: totrans-2482
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Lateral`](#sqlalchemy.sql.expression.Lateral "sqlalchemy.sql.expression.Lateral")是一个带有LATERAL关键字的子查询的[`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias")子类。'
- en: The special behavior of a LATERAL subquery is that it appears in the FROM clause
    of an enclosing SELECT, but may correlate to other FROM clauses of that SELECT.
    It is a special case of subquery only supported by a small number of backends,
    currently more recent PostgreSQL versions.
  id: totrans-2483
  prefs: []
  type: TYPE_NORMAL
  zh: LATERAL子查询的特殊行为是，它出现在封闭SELECT的FROM子句中，但可能与该SELECT的其他FROM子句相关联。这是仅受少数后端支持的子查询的特殊情况，目前更多是最近的PostgreSQL版本。
- en: See also
  id: totrans-2484
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[LATERAL correlation](../tutorial/data_select.html#tutorial-lateral-correlation)
    - overview of usage.'
  id: totrans-2485
  prefs: []
  type: TYPE_NORMAL
  zh: '[LATERAL相关性](../tutorial/data_select.html#tutorial-lateral-correlation) - 用法概述。'
- en: '[PRE488]'
  id: totrans-2486
  prefs: []
  type: TYPE_PRE
  zh: '[PRE488]'
- en: Return an `OUTER JOIN` clause element.
  id: totrans-2487
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个`OUTER JOIN`子句元素。
- en: The returned object is an instance of [`Join`](#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join").
  id: totrans-2488
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的对象是[`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")的一个实例。
- en: Similar functionality is also available via the [`FromClause.outerjoin()`](#sqlalchemy.sql.expression.FromClause.outerjoin
    "sqlalchemy.sql.expression.FromClause.outerjoin") method on any [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-2489
  prefs: []
  type: TYPE_NORMAL
  zh: 任何[`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")对象上也可以通过[`FromClause.outerjoin()`](#sqlalchemy.sql.expression.FromClause.outerjoin
    "sqlalchemy.sql.expression.FromClause.outerjoin")方法提供类似的功能。
- en: 'Parameters:'
  id: totrans-2490
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`left` – The left side of the join.'
  id: totrans-2491
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`left` – 连接的左侧。'
- en: '`right` – The right side of the join.'
  id: totrans-2492
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`right` – 连接的右侧。'
- en: '`onclause` – Optional criterion for the `ON` clause, is derived from foreign
    key relationships established between left and right otherwise.'
  id: totrans-2493
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onclause` – 可选的`ON`子句条件，如果没有指定，则从左侧和右侧之间建立的外键关系中派生。'
- en: To chain joins together, use the [`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join") or [`FromClause.outerjoin()`](#sqlalchemy.sql.expression.FromClause.outerjoin
    "sqlalchemy.sql.expression.FromClause.outerjoin") methods on the resulting [`Join`](#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") object.
  id: totrans-2494
  prefs: []
  type: TYPE_NORMAL
  zh: 要将连接链接在一起，请使用所得到的 [`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    对象上的 [`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join "sqlalchemy.sql.expression.FromClause.join")
    或 [`FromClause.outerjoin()`](#sqlalchemy.sql.expression.FromClause.outerjoin "sqlalchemy.sql.expression.FromClause.outerjoin")
    方法。
- en: '[PRE489]'
  id: totrans-2495
  prefs: []
  type: TYPE_PRE
  zh: '[PRE489]'
- en: Return a [`TableSample`](#sqlalchemy.sql.expression.TableSample "sqlalchemy.sql.expression.TableSample")
    object.
  id: totrans-2496
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个 [`TableSample`](#sqlalchemy.sql.expression.TableSample "sqlalchemy.sql.expression.TableSample")
    对象。
- en: '[`TableSample`](#sqlalchemy.sql.expression.TableSample "sqlalchemy.sql.expression.TableSample")
    is an [`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    subclass that represents a table with the TABLESAMPLE clause applied to it. [`tablesample()`](#sqlalchemy.sql.expression.tablesample
    "sqlalchemy.sql.expression.tablesample") is also available from the [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") class via the [`FromClause.tablesample()`](#sqlalchemy.sql.expression.FromClause.tablesample
    "sqlalchemy.sql.expression.FromClause.tablesample") method.'
  id: totrans-2497
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TableSample`](#sqlalchemy.sql.expression.TableSample "sqlalchemy.sql.expression.TableSample")
    是一个[`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    的子类，表示应用了 TABLESAMPLE 子句的表。[`tablesample()`](#sqlalchemy.sql.expression.tablesample
    "sqlalchemy.sql.expression.tablesample") 还可以通过 [`FromClause.tablesample()`](#sqlalchemy.sql.expression.FromClause.tablesample
    "sqlalchemy.sql.expression.FromClause.tablesample") 方法从 [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") 类中获得。'
- en: The TABLESAMPLE clause allows selecting a randomly selected approximate percentage
    of rows from a table. It supports multiple sampling methods, most commonly BERNOULLI
    and SYSTEM.
  id: totrans-2498
  prefs: []
  type: TYPE_NORMAL
  zh: TABLESAMPLE 子句允许从表中随机选择近似百分比的行。它支持多种抽样方法，最常见的是 BERNOULLI 和 SYSTEM。
- en: 'e.g.:'
  id: totrans-2499
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE490]'
  id: totrans-2500
  prefs: []
  type: TYPE_PRE
  zh: '[PRE490]'
- en: 'Assuming `people` with a column `people_id`, the above statement would render
    as:'
  id: totrans-2501
  prefs: []
  type: TYPE_NORMAL
  zh: 假设 `people` 有一个 `people_id` 列，上述语句将呈现为：
- en: '[PRE491]'
  id: totrans-2502
  prefs: []
  type: TYPE_PRE
  zh: '[PRE491]'
- en: 'Parameters:'
  id: totrans-2503
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`sampling` – a `float` percentage between 0 and 100 or [`Function`](functions.html#sqlalchemy.sql.functions.Function
    "sqlalchemy.sql.functions.Function").'
  id: totrans-2504
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sampling` – 一个介于 0 和 100 之间的`float`百分比，或 [`Function`](functions.html#sqlalchemy.sql.functions.Function
    "sqlalchemy.sql.functions.Function")。'
- en: '`name` – optional alias name'
  id: totrans-2505
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 可选的别名'
- en: '`seed` – any real-valued SQL expression. When specified, the REPEATABLE sub-clause
    is also rendered.'
  id: totrans-2506
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`seed` – 任何实值 SQL 表达式。当指定时，也会呈现 REPEATABLE 子句。'
- en: Selectable Class Documentation
  id: totrans-2507
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可选择类文档
- en: The classes here are generated using the constructors listed at [Selectable
    Foundational Constructors](#selectable-foundational-constructors) and [Selectable
    Modifier Constructors](#fromclause-modifier-constructors).
  id: totrans-2508
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的类是使用 [Selectable Foundational Constructors](#selectable-foundational-constructors)
    和 [Selectable Modifier Constructors](#fromclause-modifier-constructors) 中列出的构造函数生成的。
- en: '| Object Name | Description |'
  id: totrans-2509
  prefs: []
  type: TYPE_TB
  zh: '| Object Name | Description |'
- en: '| --- | --- |'
  id: totrans-2510
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [Alias](#sqlalchemy.sql.expression.Alias) | Represents an table or selectable
    alias (AS). |'
  id: totrans-2511
  prefs: []
  type: TYPE_TB
  zh: '| [Alias](#sqlalchemy.sql.expression.Alias) | 表示表或可选择的别名（AS）。 |'
- en: '| [AliasedReturnsRows](#sqlalchemy.sql.expression.AliasedReturnsRows) | Base
    class of aliases against tables, subqueries, and other selectables. |'
  id: totrans-2512
  prefs: []
  type: TYPE_TB
  zh: '| [AliasedReturnsRows](#sqlalchemy.sql.expression.AliasedReturnsRows) | 对表、子查询和其他可选择的别名的基类。
    |'
- en: '| [CompoundSelect](#sqlalchemy.sql.expression.CompoundSelect) | Forms the basis
    of `UNION`, `UNION ALL`, and other SELECT-based set operations. |'
  id: totrans-2513
  prefs: []
  type: TYPE_TB
  zh: '| [CompoundSelect](#sqlalchemy.sql.expression.CompoundSelect) | 构成 `UNION`、`UNION
    ALL` 和其他基于 SELECT 的集合操作的基础。 |'
- en: '| [CTE](#sqlalchemy.sql.expression.CTE) | Represent a Common Table Expression.
    |'
  id: totrans-2514
  prefs: []
  type: TYPE_TB
  zh: '| [CTE](#sqlalchemy.sql.expression.CTE) | 表示一个公共表达式。 |'
- en: '| [Executable](#sqlalchemy.sql.expression.Executable) | Mark a [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") as supporting execution. |'
  id: totrans-2515
  prefs: []
  type: TYPE_TB
  zh: '| [Executable](#sqlalchemy.sql.expression.Executable) | 将一个 [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") 标记为支持执行。 |'
- en: '| [Exists](#sqlalchemy.sql.expression.Exists) | Represent an `EXISTS` clause.
    |'
  id: totrans-2516
  prefs: []
  type: TYPE_TB
  zh: '| [Exists](#sqlalchemy.sql.expression.Exists) | 表示一个 `EXISTS` 子句。 |'
- en: '| [FromClause](#sqlalchemy.sql.expression.FromClause) | Represent an element
    that can be used within the `FROM` clause of a `SELECT` statement. |'
  id: totrans-2517
  prefs: []
  type: TYPE_TB
  zh: '| [FromClause](#sqlalchemy.sql.expression.FromClause) | 表示可以在 `SELECT` 语句的
    `FROM` 子句中使用的元素。 |'
- en: '| [GenerativeSelect](#sqlalchemy.sql.expression.GenerativeSelect) | Base class
    for SELECT statements where additional elements can be added. |'
  id: totrans-2518
  prefs: []
  type: TYPE_TB
  zh: '| [GenerativeSelect](#sqlalchemy.sql.expression.GenerativeSelect) | SELECT
    语句的基类，允许添加额外的元素。 |'
- en: '| [HasCTE](#sqlalchemy.sql.expression.HasCTE) | Mixin that declares a class
    to include CTE support. |'
  id: totrans-2519
  prefs: []
  type: TYPE_TB
  zh: '| [HasCTE](#sqlalchemy.sql.expression.HasCTE) | 声明一个类包含 CTE 支持的混合类。 |'
- en: '| [HasPrefixes](#sqlalchemy.sql.expression.HasPrefixes) |  |'
  id: totrans-2520
  prefs: []
  type: TYPE_TB
  zh: '| [HasPrefixes](#sqlalchemy.sql.expression.HasPrefixes) |  |'
- en: '| [HasSuffixes](#sqlalchemy.sql.expression.HasSuffixes) |  |'
  id: totrans-2521
  prefs: []
  type: TYPE_TB
  zh: '| [HasSuffixes](#sqlalchemy.sql.expression.HasSuffixes) |  |'
- en: '| [Join](#sqlalchemy.sql.expression.Join) | Represent a `JOIN` construct between
    two [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    elements. |'
  id: totrans-2522
  prefs: []
  type: TYPE_TB
  zh: '| [Join](#sqlalchemy.sql.expression.Join) | 表示两个[`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")元素之间的 `JOIN` 构造。 |'
- en: '| [Lateral](#sqlalchemy.sql.expression.Lateral) | Represent a LATERAL subquery.
    |'
  id: totrans-2523
  prefs: []
  type: TYPE_TB
  zh: '| [Lateral](#sqlalchemy.sql.expression.Lateral) | 表示 LATERAL 子查询。 |'
- en: '| [ReturnsRows](#sqlalchemy.sql.expression.ReturnsRows) | The base-most class
    for Core constructs that have some concept of columns that can represent rows.
    |'
  id: totrans-2524
  prefs: []
  type: TYPE_TB
  zh: '| [ReturnsRows](#sqlalchemy.sql.expression.ReturnsRows) | 核心结构的基类，具有某种可以表示行的列的概念。
    |'
- en: '| [ScalarSelect](#sqlalchemy.sql.expression.ScalarSelect) | Represent a scalar
    subquery. |'
  id: totrans-2525
  prefs: []
  type: TYPE_TB
  zh: '| [ScalarSelect](#sqlalchemy.sql.expression.ScalarSelect) | 表示一个标量子查询。 |'
- en: '| [ScalarValues](#sqlalchemy.sql.expression.ScalarValues) | Represent a scalar
    `VALUES` construct that can be used as a COLUMN element in a statement. |'
  id: totrans-2526
  prefs: []
  type: TYPE_TB
  zh: '| [ScalarValues](#sqlalchemy.sql.expression.ScalarValues) | 表示可以作为语句中的 COLUMN
    元素使用的标量 `VALUES` 结构。 |'
- en: '| [Select](#sqlalchemy.sql.expression.Select) | Represents a `SELECT` statement.
    |'
  id: totrans-2527
  prefs: []
  type: TYPE_TB
  zh: '| [Select](#sqlalchemy.sql.expression.Select) | 表示一个 `SELECT` 语句。 |'
- en: '| [Selectable](#sqlalchemy.sql.expression.Selectable) | Mark a class as being
    selectable. |'
  id: totrans-2528
  prefs: []
  type: TYPE_TB
  zh: '| [Selectable](#sqlalchemy.sql.expression.Selectable) | 将一个类标记为可选择的。 |'
- en: '| [SelectBase](#sqlalchemy.sql.expression.SelectBase) | Base class for SELECT
    statements. |'
  id: totrans-2529
  prefs: []
  type: TYPE_TB
  zh: '| [SelectBase](#sqlalchemy.sql.expression.SelectBase) | SELECT 语句的基类。 |'
- en: '| [Subquery](#sqlalchemy.sql.expression.Subquery) | Represent a subquery of
    a SELECT. |'
  id: totrans-2530
  prefs: []
  type: TYPE_TB
  zh: '| [Subquery](#sqlalchemy.sql.expression.Subquery) | 表示 SELECT 的子查询。 |'
- en: '| [TableClause](#sqlalchemy.sql.expression.TableClause) | Represents a minimal
    “table” construct. |'
  id: totrans-2531
  prefs: []
  type: TYPE_TB
  zh: '| [TableClause](#sqlalchemy.sql.expression.TableClause) | 表示最小的“表”构造。 |'
- en: '| [TableSample](#sqlalchemy.sql.expression.TableSample) | Represent a TABLESAMPLE
    clause. |'
  id: totrans-2532
  prefs: []
  type: TYPE_TB
  zh: '| [TableSample](#sqlalchemy.sql.expression.TableSample) | 表示 TABLESAMPLE 子句。
    |'
- en: '| [TableValuedAlias](#sqlalchemy.sql.expression.TableValuedAlias) | An alias
    against a “table valued” SQL function. |'
  id: totrans-2533
  prefs: []
  type: TYPE_TB
  zh: '| [TableValuedAlias](#sqlalchemy.sql.expression.TableValuedAlias) | 针对“表值”SQL函数的别名。
    |'
- en: '| [TextualSelect](#sqlalchemy.sql.expression.TextualSelect) | Wrap a [`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause") construct within a [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase") interface. |'
  id: totrans-2534
  prefs: []
  type: TYPE_TB
  zh: '| [TextualSelect](#sqlalchemy.sql.expression.TextualSelect) | 在 [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase") 接口中包装一个 [`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause") 结构。 |'
- en: '| [Values](#sqlalchemy.sql.expression.Values) | Represent a `VALUES` construct
    that can be used as a FROM element in a statement. |'
  id: totrans-2535
  prefs: []
  type: TYPE_TB
  zh: '| [Values](#sqlalchemy.sql.expression.Values) | 表示可以在语句中作为 FROM 元素使用的 `VALUES`
    结构。 |'
- en: '[PRE492]'
  id: totrans-2536
  prefs: []
  type: TYPE_PRE
  zh: '[PRE492]'
- en: Represents an table or selectable alias (AS).
  id: totrans-2537
  prefs: []
  type: TYPE_NORMAL
  zh: 代表一个表或可选择的别名（AS）。
- en: Represents an alias, as typically applied to any table or sub-select within
    a SQL statement using the `AS` keyword (or without the keyword on certain databases
    such as Oracle).
  id: totrans-2538
  prefs: []
  type: TYPE_NORMAL
  zh: 表示别名，通常应用于 SQL 语句中的任何表或子查询，使用 `AS` 关键字（或在某些数据库中不使用关键字，例如 Oracle）。
- en: This object is constructed from the [`alias()`](#sqlalchemy.sql.expression.alias
    "sqlalchemy.sql.expression.alias") module level function as well as the [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") method available on all [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") subclasses.
  id: totrans-2539
  prefs: []
  type: TYPE_NORMAL
  zh: 此对象可以通过[`alias()`](#sqlalchemy.sql.expression.alias "sqlalchemy.sql.expression.alias")模块级函数以及所有[`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")子类上可用的[`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias")方法构建。
- en: See also
  id: totrans-2540
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias "sqlalchemy.sql.expression.FromClause.alias")'
  id: totrans-2541
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias "sqlalchemy.sql.expression.FromClause.alias")'
- en: '**Members**'
  id: totrans-2542
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[inherit_cache](#sqlalchemy.sql.expression.Alias.inherit_cache)'
  id: totrans-2543
  prefs: []
  type: TYPE_NORMAL
  zh: '[inherit_cache](#sqlalchemy.sql.expression.Alias.inherit_cache)'
- en: '**Class signature**'
  id: totrans-2544
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    (`sqlalchemy.sql.roles.DMLTableRole`, `sqlalchemy.sql.expression.FromClauseAlias`)
  id: totrans-2545
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.expression.Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")（`sqlalchemy.sql.roles.DMLTableRole`，`sqlalchemy.sql.expression.FromClauseAlias`）
- en: '[PRE493]'
  id: totrans-2546
  prefs: []
  type: TYPE_PRE
  zh: '[PRE493]'
- en: Indicate if this [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") instance should make use of the cache
    key generation scheme used by its immediate superclass.
  id: totrans-2547
  prefs: []
  type: TYPE_NORMAL
  zh: 指示此[`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey "sqlalchemy.sql.traversals.HasCacheKey")实例是否应使用其直接超类使用的缓存密钥生成方案。
- en: The attribute defaults to `None`, which indicates that a construct has not yet
    taken into account whether or not its appropriate for it to participate in caching;
    this is functionally equivalent to setting the value to `False`, except that a
    warning is also emitted.
  id: totrans-2548
  prefs: []
  type: TYPE_NORMAL
  zh: 该属性默认为`None`，表示一个构造尚未考虑是否适合参与缓存；这在功能上等同于将值设置为`False`，只是还会发出警告。
- en: This flag can be set to `True` on a particular class, if the SQL that corresponds
    to the object does not change based on attributes which are local to this class,
    and not its superclass.
  id: totrans-2549
  prefs: []
  type: TYPE_NORMAL
  zh: 如果与此类本地属性无关并且不是其超类，则可以将此标志设置为`True`。
- en: See also
  id: totrans-2550
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[Enabling Caching Support for Custom Constructs](compiler.html#compilerext-caching)
    - General guideslines for setting the [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute for third-party
    or user defined SQL constructs.'
  id: totrans-2551
  prefs: []
  type: TYPE_NORMAL
  zh: '[为自定义构造启用缓存支持](compiler.html#compilerext-caching) - 有关设置[`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache")属性以用于第三方或用户定义的SQL构造的一般指南。'
- en: '[PRE494]'
  id: totrans-2552
  prefs: []
  type: TYPE_PRE
  zh: '[PRE494]'
- en: Base class of aliases against tables, subqueries, and other selectables.
  id: totrans-2553
  prefs: []
  type: TYPE_NORMAL
  zh: 表别名的基类，针对表、子查询和其他可选择项。
- en: '**Members**'
  id: totrans-2554
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[description](#sqlalchemy.sql.expression.AliasedReturnsRows.description), [is_derived_from()](#sqlalchemy.sql.expression.AliasedReturnsRows.is_derived_from),
    [original](#sqlalchemy.sql.expression.AliasedReturnsRows.original)'
  id: totrans-2555
  prefs: []
  type: TYPE_NORMAL
  zh: '[描述](#sqlalchemy.sql.expression.AliasedReturnsRows.description)，[is_derived_from()](#sqlalchemy.sql.expression.AliasedReturnsRows.is_derived_from)，[原始](#sqlalchemy.sql.expression.AliasedReturnsRows.original)'
- en: '**Class signature**'
  id: totrans-2556
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.AliasedReturnsRows`](#sqlalchemy.sql.expression.AliasedReturnsRows
    "sqlalchemy.sql.expression.AliasedReturnsRows") (`sqlalchemy.sql.expression.NoInit`,
    `sqlalchemy.sql.expression.NamedFromClause`)
  id: totrans-2557
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.expression.AliasedReturnsRows`](#sqlalchemy.sql.expression.AliasedReturnsRows
    "sqlalchemy.sql.expression.AliasedReturnsRows")（`sqlalchemy.sql.expression.NoInit`，`sqlalchemy.sql.expression.NamedFromClause`）
- en: '[PRE495]'
  id: totrans-2558
  prefs: []
  type: TYPE_PRE
  zh: '[PRE495]'
- en: '[PRE496]'
  id: totrans-2559
  prefs: []
  type: TYPE_PRE
  zh: '[PRE496]'
- en: Return `True` if this [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    is ‘derived’ from the given `FromClause`.
  id: totrans-2560
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此[`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")从给定的`FromClause`“派生”，则返回`True`。
- en: An example would be an Alias of a Table is derived from that Table.
  id: totrans-2561
  prefs: []
  type: TYPE_NORMAL
  zh: 一个示例是来自该表的一个别名。
- en: '[PRE497]'
  id: totrans-2562
  prefs: []
  type: TYPE_PRE
  zh: '[PRE497]'
- en: Legacy for dialects that are referring to Alias.original.
  id: totrans-2563
  prefs: []
  type: TYPE_NORMAL
  zh: 适用于引用Alias.original的方言的旧版本。
- en: '[PRE498]'
  id: totrans-2564
  prefs: []
  type: TYPE_PRE
  zh: '[PRE498]'
- en: Forms the basis of `UNION`, `UNION ALL`, and other SELECT-based set operations.
  id: totrans-2565
  prefs: []
  type: TYPE_NORMAL
  zh: 构成`UNION`，`UNION ALL`和其他基于SELECT的集合操作的基础。
- en: See also
  id: totrans-2566
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`union()`](#sqlalchemy.sql.expression.union "sqlalchemy.sql.expression.union")'
  id: totrans-2567
  prefs: []
  type: TYPE_NORMAL
  zh: '[`union()`](#sqlalchemy.sql.expression.union "sqlalchemy.sql.expression.union")'
- en: '[`union_all()`](#sqlalchemy.sql.expression.union_all "sqlalchemy.sql.expression.union_all")'
  id: totrans-2568
  prefs: []
  type: TYPE_NORMAL
  zh: '[`union_all()`](#sqlalchemy.sql.expression.union_all "sqlalchemy.sql.expression.union_all")'
- en: '[`intersect()`](#sqlalchemy.sql.expression.intersect "sqlalchemy.sql.expression.intersect")'
  id: totrans-2569
  prefs: []
  type: TYPE_NORMAL
  zh: '[`intersect()`](#sqlalchemy.sql.expression.intersect "sqlalchemy.sql.expression.intersect")'
- en: '[`intersect_all()`](#sqlalchemy.sql.expression.intersect_all "sqlalchemy.sql.expression.intersect_all")'
  id: totrans-2570
  prefs: []
  type: TYPE_NORMAL
  zh: '[`intersect_all()`](#sqlalchemy.sql.expression.intersect_all "sqlalchemy.sql.expression.intersect_all")'
- en: '`except()`'
  id: totrans-2571
  prefs: []
  type: TYPE_NORMAL
  zh: '`except()`'
- en: '[`except_all()`](#sqlalchemy.sql.expression.except_all "sqlalchemy.sql.expression.except_all")'
  id: totrans-2572
  prefs: []
  type: TYPE_NORMAL
  zh: '[`except_all()`](#sqlalchemy.sql.expression.except_all "sqlalchemy.sql.expression.except_all")'
- en: '**Members**'
  id: totrans-2573
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[add_cte()](#sqlalchemy.sql.expression.CompoundSelect.add_cte), [alias()](#sqlalchemy.sql.expression.CompoundSelect.alias),
    [as_scalar()](#sqlalchemy.sql.expression.CompoundSelect.as_scalar), [c](#sqlalchemy.sql.expression.CompoundSelect.c),
    [corresponding_column()](#sqlalchemy.sql.expression.CompoundSelect.corresponding_column),
    [cte()](#sqlalchemy.sql.expression.CompoundSelect.cte), [execution_options()](#sqlalchemy.sql.expression.CompoundSelect.execution_options),
    [exists()](#sqlalchemy.sql.expression.CompoundSelect.exists), [exported_columns](#sqlalchemy.sql.expression.CompoundSelect.exported_columns),
    [fetch()](#sqlalchemy.sql.expression.CompoundSelect.fetch), [get_execution_options()](#sqlalchemy.sql.expression.CompoundSelect.get_execution_options),
    [get_label_style()](#sqlalchemy.sql.expression.CompoundSelect.get_label_style),
    [group_by()](#sqlalchemy.sql.expression.CompoundSelect.group_by), [is_derived_from()](#sqlalchemy.sql.expression.CompoundSelect.is_derived_from),
    [label()](#sqlalchemy.sql.expression.CompoundSelect.label), [lateral()](#sqlalchemy.sql.expression.CompoundSelect.lateral),
    [limit()](#sqlalchemy.sql.expression.CompoundSelect.limit), [offset()](#sqlalchemy.sql.expression.CompoundSelect.offset),
    [options()](#sqlalchemy.sql.expression.CompoundSelect.options), [order_by()](#sqlalchemy.sql.expression.CompoundSelect.order_by),
    [replace_selectable()](#sqlalchemy.sql.expression.CompoundSelect.replace_selectable),
    [scalar_subquery()](#sqlalchemy.sql.expression.CompoundSelect.scalar_subquery),
    [select()](#sqlalchemy.sql.expression.CompoundSelect.select), [selected_columns](#sqlalchemy.sql.expression.CompoundSelect.selected_columns),
    [self_group()](#sqlalchemy.sql.expression.CompoundSelect.self_group), [set_label_style()](#sqlalchemy.sql.expression.CompoundSelect.set_label_style),
    [slice()](#sqlalchemy.sql.expression.CompoundSelect.slice), [subquery()](#sqlalchemy.sql.expression.CompoundSelect.subquery),
    [with_for_update()](#sqlalchemy.sql.expression.CompoundSelect.with_for_update)'
  id: totrans-2574
  prefs: []
  type: TYPE_NORMAL
  zh: '[add_cte()](#sqlalchemy.sql.expression.CompoundSelect.add_cte), [alias()](#sqlalchemy.sql.expression.CompoundSelect.alias),
    [as_scalar()](#sqlalchemy.sql.expression.CompoundSelect.as_scalar), [c](#sqlalchemy.sql.expression.CompoundSelect.c),
    [corresponding_column()](#sqlalchemy.sql.expression.CompoundSelect.corresponding_column),
    [cte()](#sqlalchemy.sql.expression.CompoundSelect.cte), [execution_options()](#sqlalchemy.sql.expression.CompoundSelect.execution_options),
    [exists()](#sqlalchemy.sql.expression.CompoundSelect.exists), [exported_columns](#sqlalchemy.sql.expression.CompoundSelect.exported_columns),
    [fetch()](#sqlalchemy.sql.expression.CompoundSelect.fetch), [get_execution_options()](#sqlalchemy.sql.expression.CompoundSelect.get_execution_options),
    [get_label_style()](#sqlalchemy.sql.expression.CompoundSelect.get_label_style),
    [group_by()](#sqlalchemy.sql.expression.CompoundSelect.group_by), [is_derived_from()](#sqlalchemy.sql.expression.CompoundSelect.is_derived_from),
    [label()](#sqlalchemy.sql.expression.CompoundSelect.label), [lateral()](#sqlalchemy.sql.expression.CompoundSelect.lateral),
    [limit()](#sqlalchemy.sql.expression.CompoundSelect.limit), [offset()](#sqlalchemy.sql.expression.CompoundSelect.offset),
    [options()](#sqlalchemy.sql.expression.CompoundSelect.options), [order_by()](#sqlalchemy.sql.expression.CompoundSelect.order_by),
    [replace_selectable()](#sqlalchemy.sql.expression.CompoundSelect.replace_selectable),
    [scalar_subquery()](#sqlalchemy.sql.expression.CompoundSelect.scalar_subquery),
    [select()](#sqlalchemy.sql.expression.CompoundSelect.select), [selected_columns](#sqlalchemy.sql.expression.CompoundSelect.selected_columns),
    [self_group()](#sqlalchemy.sql.expression.CompoundSelect.self_group), [set_label_style()](#sqlalchemy.sql.expression.CompoundSelect.set_label_style),
    [slice()](#sqlalchemy.sql.expression.CompoundSelect.slice), [subquery()](#sqlalchemy.sql.expression.CompoundSelect.subquery),
    [with_for_update()](#sqlalchemy.sql.expression.CompoundSelect.with_for_update)'
- en: '**Class signature**'
  id: totrans-2575
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect
    "sqlalchemy.sql.expression.CompoundSelect") (`sqlalchemy.sql.expression.HasCompileState`,
    [`sqlalchemy.sql.expression.GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect"), `sqlalchemy.sql.expression.ExecutableReturnsRows`)
  id: totrans-2576
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.expression.CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect
    "sqlalchemy.sql.expression.CompoundSelect")（`sqlalchemy.sql.expression.HasCompileState`、[`sqlalchemy.sql.expression.GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")、`sqlalchemy.sql.expression.ExecutableReturnsRows`)
- en: '[PRE499]'
  id: totrans-2577
  prefs: []
  type: TYPE_PRE
  zh: '[PRE499]'
- en: '*inherited from the* [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") *method of* [`HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE")'
  id: totrans-2578
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte "sqlalchemy.sql.expression.HasCTE.add_cte")
    *方法的* [`HasCTE`](#sqlalchemy.sql.expression.HasCTE "sqlalchemy.sql.expression.HasCTE")'
- en: Add one or more [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    constructs to this statement.
  id: totrans-2579
  prefs: []
  type: TYPE_NORMAL
  zh: 向该语句添加一个或多个[`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")构造。
- en: This method will associate the given [`CTE`](#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE") constructs with the parent statement such that
    they will each be unconditionally rendered in the WITH clause of the final statement,
    even if not referenced elsewhere within the statement or any sub-selects.
  id: totrans-2580
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法将将给定的[`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")构造与父语句关联起来，以便它们将无条件地在最终语句的WITH子句中呈现，即使在语句或任何子选择中没有引用它们也是如此。
- en: The optional [`HasCTE.add_cte.nest_here`](#sqlalchemy.sql.expression.HasCTE.add_cte.params.nest_here
    "sqlalchemy.sql.expression.HasCTE.add_cte") parameter when set to True will have
    the effect that each given [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    will render in a WITH clause rendered directly along with this statement, rather
    than being moved to the top of the ultimate rendered statement, even if this statement
    is rendered as a subquery within a larger statement.
  id: totrans-2581
  prefs: []
  type: TYPE_NORMAL
  zh: 当将可选的[`HasCTE.add_cte.nest_here`](#sqlalchemy.sql.expression.HasCTE.add_cte.params.nest_here
    "sqlalchemy.sql.expression.HasCTE.add_cte")参数设置为True时，每个给定的[`CTE`](#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE")都将以与此语句一起直接呈现的WITH子句中呈现，而不是移动到最终呈现语句的顶部，即使此语句在较大语句内作为子查询呈现时也是如此。
- en: This method has two general uses. One is to embed CTE statements that serve
    some purpose without being referenced explicitly, such as the use case of embedding
    a DML statement such as an INSERT or UPDATE as a CTE inline with a primary statement
    that may draw from its results indirectly. The other is to provide control over
    the exact placement of a particular series of CTE constructs that should remain
    rendered directly in terms of a particular statement that may be nested in a larger
    statement.
  id: totrans-2582
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法有两个常见用途。一个是嵌入CTE语句，这些语句具有某种用途，而不需要明确引用，例如，将DML语句（如INSERT或UPDATE）作为CTE内联到可能间接从其结果中获得结果的主要语句中。另一个用途是提供对应于应该直接呈现为特定语句的一系列特定CTE构造的精确放置的控制，该语句可能嵌套在较大语句中。
- en: 'E.g.:'
  id: totrans-2583
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE500]'
  id: totrans-2584
  prefs: []
  type: TYPE_PRE
  zh: '[PRE500]'
- en: 'Would render:'
  id: totrans-2585
  prefs: []
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE501]'
  id: totrans-2586
  prefs: []
  type: TYPE_PRE
  zh: '[PRE501]'
- en: Above, the “anon_1” CTE is not referenced in the SELECT statement, however still
    accomplishes the task of running an INSERT statement.
  id: totrans-2587
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述示例中，“anon_1” CTE没有在SELECT语句中被引用，但仍然完成了运行INSERT语句的任务。
- en: 'Similarly in a DML-related context, using the PostgreSQL [`Insert`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Insert
    "sqlalchemy.dialects.postgresql.Insert") construct to generate an “upsert”:'
  id: totrans-2588
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，在与DML相关的上下文中，使用PostgreSQL[`Insert`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Insert
    "sqlalchemy.dialects.postgresql.Insert")构造来生成“upsert”：
- en: '[PRE502]'
  id: totrans-2589
  prefs: []
  type: TYPE_PRE
  zh: '[PRE502]'
- en: 'The above statement renders as:'
  id: totrans-2590
  prefs: []
  type: TYPE_NORMAL
  zh: 上述语句呈现为：
- en: '[PRE503]'
  id: totrans-2591
  prefs: []
  type: TYPE_PRE
  zh: '[PRE503]'
- en: New in version 1.4.21.
  id: totrans-2592
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.4.21起新添加。
- en: 'Parameters:'
  id: totrans-2593
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*ctes` –'
  id: totrans-2594
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*ctes*` –'
- en: zero or more [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    constructs.
  id: totrans-2595
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 零个或多个[`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")构造。
- en: 'Changed in version 2.0: Multiple CTE instances are accepted'
  id: totrans-2596
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自版本2.0起更改：接受多个CTE实例
- en: '`nest_here` –'
  id: totrans-2597
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nest_here` –'
- en: if True, the given CTE or CTEs will be rendered as though they specified the
    [`HasCTE.cte.nesting`](#sqlalchemy.sql.expression.HasCTE.cte.params.nesting "sqlalchemy.sql.expression.HasCTE.cte")
    flag to `True` when they were added to this [`HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE"). Assuming the given CTEs are not referenced
    in an outer-enclosing statement as well, the CTEs given should render at the level
    of this statement when this flag is given.
  id: totrans-2598
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果为True，则给定的CTE或CTE将呈现为如果当它们被添加到此[`HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE")时指定了[`HasCTE.cte.nesting`](#sqlalchemy.sql.expression.HasCTE.cte.params.nesting
    "sqlalchemy.sql.expression.HasCTE.cte")标志为`True`。假设给定的CTE在外部封闭语句中也没有被引用，那么在给出此标志时，给定的CTE应在此语句的级别呈现。
- en: New in version 2.0.
  id: totrans-2599
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自版本2.0起新添加。
- en: See also
  id: totrans-2600
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`HasCTE.cte.nesting`](#sqlalchemy.sql.expression.HasCTE.cte.params.nesting
    "sqlalchemy.sql.expression.HasCTE.cte")'
  id: totrans-2601
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`HasCTE.cte.nesting`](#sqlalchemy.sql.expression.HasCTE.cte.params.nesting
    "sqlalchemy.sql.expression.HasCTE.cte")'
- en: '[PRE504]'
  id: totrans-2602
  prefs: []
  type: TYPE_PRE
  zh: '[PRE504]'
- en: '*inherited from the* [`SelectBase.alias()`](#sqlalchemy.sql.expression.SelectBase.alias
    "sqlalchemy.sql.expression.SelectBase.alias") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  id: totrans-2603
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")
    *的* [`SelectBase.alias()`](#sqlalchemy.sql.expression.SelectBase.alias "sqlalchemy.sql.expression.SelectBase.alias")
    *方法*'
- en: Return a named subquery against this [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase").
  id: totrans-2604
  prefs: []
  type: TYPE_NORMAL
  zh: 返回针对此[`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")的命名子查询。
- en: For a [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")
    (as opposed to a [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")),
    this returns a [`Subquery`](#sqlalchemy.sql.expression.Subquery "sqlalchemy.sql.expression.Subquery")
    object which behaves mostly the same as the [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") object that is used with a [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-2605
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")（与
    [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    相对），此方法返回一个 [`Subquery`](#sqlalchemy.sql.expression.Subquery "sqlalchemy.sql.expression.Subquery")
    对象，其行为与用于 [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    的 [`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    对象大致相同。
- en: 'Changed in version 1.4: The [`SelectBase.alias()`](#sqlalchemy.sql.expression.SelectBase.alias
    "sqlalchemy.sql.expression.SelectBase.alias") method is now a synonym for the
    [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery "sqlalchemy.sql.expression.SelectBase.subquery")
    method.'
  id: totrans-2606
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.4 起更改：[`SelectBase.alias()`](#sqlalchemy.sql.expression.SelectBase.alias
    "sqlalchemy.sql.expression.SelectBase.alias") 方法现在是 [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") 方法的同义词。
- en: '[PRE505]'
  id: totrans-2607
  prefs: []
  type: TYPE_PRE
  zh: '[PRE505]'
- en: '*inherited from the* [`SelectBase.as_scalar()`](#sqlalchemy.sql.expression.SelectBase.as_scalar
    "sqlalchemy.sql.expression.SelectBase.as_scalar") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  id: totrans-2608
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SelectBase.as_scalar()`](#sqlalchemy.sql.expression.SelectBase.as_scalar
    "sqlalchemy.sql.expression.SelectBase.as_scalar") *方法的* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
- en: 'Deprecated since version 1.4: The [`SelectBase.as_scalar()`](#sqlalchemy.sql.expression.SelectBase.as_scalar
    "sqlalchemy.sql.expression.SelectBase.as_scalar") method is deprecated and will
    be removed in a future release. Please refer to [`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery").'
  id: totrans-2609
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.4 起弃用：[`SelectBase.as_scalar()`](#sqlalchemy.sql.expression.SelectBase.as_scalar
    "sqlalchemy.sql.expression.SelectBase.as_scalar") 方法已被弃用，并将在未来版本中移除。请参阅 [`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery")。
- en: '[PRE506]'
  id: totrans-2610
  prefs: []
  type: TYPE_PRE
  zh: '[PRE506]'
- en: '*inherited from the* [`SelectBase.c`](#sqlalchemy.sql.expression.SelectBase.c
    "sqlalchemy.sql.expression.SelectBase.c") *attribute of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  id: totrans-2611
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SelectBase.c`](#sqlalchemy.sql.expression.SelectBase.c "sqlalchemy.sql.expression.SelectBase.c")
    *属性的* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")'
- en: 'Deprecated since version 1.4: The [`SelectBase.c`](#sqlalchemy.sql.expression.SelectBase.c
    "sqlalchemy.sql.expression.SelectBase.c") and `SelectBase.columns` attributes
    are deprecated and will be removed in a future release; these attributes implicitly
    create a subquery that should be explicit. Please call [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") first in order to create a subquery,
    which then contains this attribute. To access the columns that this SELECT object
    SELECTs from, use the [`SelectBase.selected_columns`](#sqlalchemy.sql.expression.SelectBase.selected_columns
    "sqlalchemy.sql.expression.SelectBase.selected_columns") attribute.'
  id: totrans-2612
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.4 起弃用：[`SelectBase.c`](#sqlalchemy.sql.expression.SelectBase.c "sqlalchemy.sql.expression.SelectBase.c")
    和 `SelectBase.columns` 属性已被弃用，并将在未来版本中移除；这些属性隐式创建了一个应该明确的子查询。请首先调用 [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") 来创建一个子查询，然后该子查询包含此属性。要访问此 SELECT
    对象所选列，请使用 [`SelectBase.selected_columns`](#sqlalchemy.sql.expression.SelectBase.selected_columns
    "sqlalchemy.sql.expression.SelectBase.selected_columns") 属性。
- en: '[PRE507]'
  id: totrans-2613
  prefs: []
  type: TYPE_PRE
  zh: '[PRE507]'
- en: '*inherited from the* [`Selectable.corresponding_column()`](#sqlalchemy.sql.expression.Selectable.corresponding_column
    "sqlalchemy.sql.expression.Selectable.corresponding_column") *method of* [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
  id: totrans-2614
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Selectable.corresponding_column()`](#sqlalchemy.sql.expression.Selectable.corresponding_column
    "sqlalchemy.sql.expression.Selectable.corresponding_column") *方法的* [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
- en: Given a [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"), return the exported [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") object from the [`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") collection of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable") which corresponds to that original [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") via a common ancestor column.
  id: totrans-2615
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")，返回此[`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")的[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns")集合中对应于该原始[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")的导出[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")对象，通过公共祖先列。
- en: 'Parameters:'
  id: totrans-2616
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`column` – the target [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") to be matched.'
  id: totrans-2617
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`column` – 要匹配的目标[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")。'
- en: '`require_embedded` – only return corresponding columns for the given [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"), if the given [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") is actually present within a sub-element
    of this [`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable").
    Normally the column will match if it merely shares a common ancestor with one
    of the exported columns of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable").'
  id: totrans-2618
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`require_embedded` – 仅当给定的[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")实际上存在于此[`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")的子元素中时，返回给定[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")的相应列。通常，如果列仅与此[`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")的导出列之一共享公共祖先，则列将匹配。'
- en: See also
  id: totrans-2619
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") - the [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") that is used for the operation.'
  id: totrans-2620
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") - 用于操作的[`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")。'
- en: '[`ColumnCollection.corresponding_column()`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection.corresponding_column
    "sqlalchemy.sql.expression.ColumnCollection.corresponding_column") - implementation
    method.'
  id: totrans-2621
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnCollection.corresponding_column()`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection.corresponding_column
    "sqlalchemy.sql.expression.ColumnCollection.corresponding_column") - 实现方法。'
- en: '[PRE508]'
  id: totrans-2622
  prefs: []
  type: TYPE_PRE
  zh: '[PRE508]'
- en: '*inherited from the* [`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte
    "sqlalchemy.sql.expression.HasCTE.cte") *method of* [`HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE")'
  id: totrans-2623
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte "sqlalchemy.sql.expression.HasCTE.cte")
    *方法的* [`HasCTE`](#sqlalchemy.sql.expression.HasCTE "sqlalchemy.sql.expression.HasCTE")'
- en: Return a new [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE"),
    or Common Table Expression instance.
  id: totrans-2624
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的[`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")，即公共表达式实例。
- en: Common table expressions are a SQL standard whereby SELECT statements can draw
    upon secondary statements specified along with the primary statement, using a
    clause called “WITH”. Special semantics regarding UNION can also be employed to
    allow “recursive” queries, where a SELECT statement can draw upon the set of rows
    that have previously been selected.
  id: totrans-2625
  prefs: []
  type: TYPE_NORMAL
  zh: 公共表达式是一种SQL标准，其中SELECT语句可以与主语句一起使用指定的次要语句，使用一个称为“WITH”的子句。还可以使用有关UNION的特殊语义，以允许“递归”查询，其中SELECT语句可以利用先前已选择的行集。
- en: CTEs can also be applied to DML constructs UPDATE, INSERT and DELETE on some
    databases, both as a source of CTE rows when combined with RETURNING, as well
    as a consumer of CTE rows.
  id: totrans-2626
  prefs: []
  type: TYPE_NORMAL
  zh: CTE也可以应用于某些数据库上的DML构造UPDATE、INSERT和DELETE，既作为与RETURNING一起组合时CTE行的来源，也作为CTE行的消费者。
- en: SQLAlchemy detects [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    objects, which are treated similarly to [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") objects, as special elements to be delivered
    to the FROM clause of the statement as well as to a WITH clause at the top of
    the statement.
  id: totrans-2627
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 检测到 [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    对象，这些对象与 [`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    对象类似，被视为要传递到语句的 FROM 子句以及语句顶部的 WITH 子句的特殊元素。
- en: For special prefixes such as PostgreSQL “MATERIALIZED” and “NOT MATERIALIZED”,
    the `CTE.prefix_with()` method may be used to establish these.
  id: totrans-2628
  prefs: []
  type: TYPE_NORMAL
  zh: 对于特殊前缀，如 PostgreSQL 的 “MATERIALIZED” 和 “NOT MATERIALIZED”，可以使用 `CTE.prefix_with()`
    方法来建立这些前缀。
- en: 'Changed in version 1.3.13: Added support for prefixes. In particular - MATERIALIZED
    and NOT MATERIALIZED.'
  id: totrans-2629
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.3.13 开始更改：增加了对前缀的支持。特别是 - MATERIALIZED 和 NOT MATERIALIZED。
- en: 'Parameters:'
  id: totrans-2630
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`name` – name given to the common table expression. Like [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias"), the name can be left as `None`
    in which case an anonymous symbol will be used at query compile time.'
  id: totrans-2631
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 给公共表达式指定的名称。与 [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") 类似，名称可以留空，此时将在查询编译时使用匿名符号。'
- en: '`recursive` – if `True`, will render `WITH RECURSIVE`. A recursive common table
    expression is intended to be used in conjunction with UNION ALL in order to derive
    rows from those already selected.'
  id: totrans-2632
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`recursive` – 如果为 `True`，将渲染 `WITH RECURSIVE`。递归公共表达式旨在与 UNION ALL 结合使用，以从已选定的行中派生行。'
- en: '`nesting` –'
  id: totrans-2633
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nesting` –'
- en: if `True`, will render the CTE locally to the statement in which it is referenced.
    For more complex scenarios, the [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") method using the [`HasCTE.add_cte.nest_here`](#sqlalchemy.sql.expression.HasCTE.add_cte.params.nest_here
    "sqlalchemy.sql.expression.HasCTE.add_cte") parameter may also be used to more
    carefully control the exact placement of a particular CTE.
  id: totrans-2634
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果为 `True`，将在引用它的语句中本地渲染 CTE。对于更复杂的场景，还可以使用 [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") 方法，使用 [`HasCTE.add_cte.nest_here`](#sqlalchemy.sql.expression.HasCTE.add_cte.params.nest_here
    "sqlalchemy.sql.expression.HasCTE.add_cte") 参数更精确地控制特定 CTE 的精确放置位置。
- en: New in version 1.4.24.
  id: totrans-2635
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本 1.4.24 开始新增。
- en: See also
  id: totrans-2636
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另见
- en: '[`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte "sqlalchemy.sql.expression.HasCTE.add_cte")'
  id: totrans-2637
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte "sqlalchemy.sql.expression.HasCTE.add_cte")'
- en: The following examples include two from PostgreSQL’s documentation at [https://www.postgresql.org/docs/current/static/queries-with.html](https://www.postgresql.org/docs/current/static/queries-with.html),
    as well as additional examples.
  id: totrans-2638
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例包括两个来自 PostgreSQL 文档 [https://www.postgresql.org/docs/current/static/queries-with.html](https://www.postgresql.org/docs/current/static/queries-with.html)
    的示例，以及其他示例。
- en: 'Example 1, non recursive:'
  id: totrans-2639
  prefs: []
  type: TYPE_NORMAL
  zh: 例1，非递归：
- en: '[PRE509]'
  id: totrans-2640
  prefs: []
  type: TYPE_PRE
  zh: '[PRE509]'
- en: 'Example 2, WITH RECURSIVE:'
  id: totrans-2641
  prefs: []
  type: TYPE_NORMAL
  zh: 例2，使用 WITH RECURSIVE：
- en: '[PRE510]'
  id: totrans-2642
  prefs: []
  type: TYPE_PRE
  zh: '[PRE510]'
- en: 'Example 3, an upsert using UPDATE and INSERT with CTEs:'
  id: totrans-2643
  prefs: []
  type: TYPE_NORMAL
  zh: 例3，使用 UPDATE 和 INSERT 与 CTE 进行 upsert：
- en: '[PRE511]'
  id: totrans-2644
  prefs: []
  type: TYPE_PRE
  zh: '[PRE511]'
- en: 'Example 4, Nesting CTE (SQLAlchemy 1.4.24 and above):'
  id: totrans-2645
  prefs: []
  type: TYPE_NORMAL
  zh: 例4，嵌套 CTE（SQLAlchemy 1.4.24 及更高版本）：
- en: '[PRE512]'
  id: totrans-2646
  prefs: []
  type: TYPE_PRE
  zh: '[PRE512]'
- en: 'The above query will render the second CTE nested inside the first, shown with
    inline parameters below as:'
  id: totrans-2647
  prefs: []
  type: TYPE_NORMAL
  zh: 上述查询将第二个 CTE 嵌套在第一个内部，并显示为以下内联参数：
- en: '[PRE513]'
  id: totrans-2648
  prefs: []
  type: TYPE_PRE
  zh: '[PRE513]'
- en: 'The same CTE can be set up using the [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") method as follows (SQLAlchemy 2.0
    and above):'
  id: totrans-2649
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下方法设置相同的 CTE：[`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte")（SQLAlchemy 2.0 及更高版本）：
- en: '[PRE514]'
  id: totrans-2650
  prefs: []
  type: TYPE_PRE
  zh: '[PRE514]'
- en: 'Example 5, Non-Linear CTE (SQLAlchemy 1.4.28 and above):'
  id: totrans-2651
  prefs: []
  type: TYPE_NORMAL
  zh: 例5，非线性 CTE（SQLAlchemy 1.4.28 及更高版本）：
- en: '[PRE515]'
  id: totrans-2652
  prefs: []
  type: TYPE_PRE
  zh: '[PRE515]'
- en: 'The above query will render 2 UNIONs inside the recursive CTE:'
  id: totrans-2653
  prefs: []
  type: TYPE_NORMAL
  zh: 上述查询将在递归 CTE 中渲染 2 个 UNION：
- en: '[PRE516]'
  id: totrans-2654
  prefs: []
  type: TYPE_PRE
  zh: '[PRE516]'
- en: See also
  id: totrans-2655
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`Query.cte()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.cte "sqlalchemy.orm.Query.cte")
    - ORM version of [`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte "sqlalchemy.sql.expression.HasCTE.cte").'
  id: totrans-2656
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.cte()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.cte "sqlalchemy.orm.Query.cte")
    - ORM 版本的 [`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte "sqlalchemy.sql.expression.HasCTE.cte")。'
- en: '[PRE517]'
  id: totrans-2657
  prefs: []
  type: TYPE_PRE
  zh: '[PRE517]'
- en: '*inherited from the* [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") *method of* [`Executable`](#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")'
  id: totrans-2658
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") *方法的* [`Executable`](#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")'
- en: Set non-SQL options for the statement which take effect during execution.
  id: totrans-2659
  prefs: []
  type: TYPE_NORMAL
  zh: 设置在执行期间生效的语句的非 SQL 选项。
- en: Execution options can be set at many scopes, including per-statement, per-connection,
    or per execution, using methods such as [`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") and parameters which accept
    a dictionary of options such as [`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute") and [`Session.execute.execution_options`](../orm/session_api.html#sqlalchemy.orm.Session.execute.params.execution_options
    "sqlalchemy.orm.Session.execute").
  id: totrans-2660
  prefs: []
  type: TYPE_NORMAL
  zh: 执行选项可以在许多范围内设置，包括每个语句、每个连接或每次执行，使用诸如 [`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") 和接受选项字典的参数的方法，如 [`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute") 和 [`Session.execute.execution_options`](../orm/session_api.html#sqlalchemy.orm.Session.execute.params.execution_options
    "sqlalchemy.orm.Session.execute").
- en: The primary characteristic of an execution option, as opposed to other kinds
    of options such as ORM loader options, is that **execution options never affect
    the compiled SQL of a query, only things that affect how the SQL statement itself
    is invoked or how results are fetched**. That is, execution options are not part
    of what’s accommodated by SQL compilation nor are they considered part of the
    cached state of a statement.
  id: totrans-2661
  prefs: []
  type: TYPE_NORMAL
  zh: 执行选项的主要特征与其他类型的选项（如 ORM 加载器选项）相反，**执行选项从不影响查询的编译 SQL，只影响 SQL 语句本身的调用方式或结果的提取方式**。也就是说，执行选项不是
    SQL 编译所容纳的部分，也不被视为语句的缓存状态的一部分。
- en: 'The [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") method is [generative](../glossary.html#term-generative),
    as is the case for the method as applied to the [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") and [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") objects, which means when the method is called, a copy
    of the object is returned, which applies the given parameters to that new copy,
    but leaves the original unchanged:'
  id: totrans-2662
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") 方法是[生成的](../glossary.html#term-generative)，就像应用于
    [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    和 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    对象的方法一样，这意味着当调用方法时，将返回对象的副本，该副本将给定的参数应用于该新副本，但原始对象保持不变：'
- en: '[PRE518]'
  id: totrans-2663
  prefs: []
  type: TYPE_PRE
  zh: '[PRE518]'
- en: An exception to this behavior is the [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object, where the [`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") method is explicitly **not**
    generative.
  id: totrans-2664
  prefs: []
  type: TYPE_NORMAL
  zh: 这种行为的一个例外是 [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    对象，在这里 [`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") 方法明确地 **不是** 生成的。
- en: 'The kinds of options that may be passed to [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") and other related methods
    and parameter dictionaries include parameters that are explicitly consumed by
    SQLAlchemy Core or ORM, as well as arbitrary keyword arguments not defined by
    SQLAlchemy, which means the methods and/or parameter dictionaries may be used
    for user-defined parameters that interact with custom code, which may access the
    parameters using methods such as [`Executable.get_execution_options()`](#sqlalchemy.sql.expression.Executable.get_execution_options
    "sqlalchemy.sql.expression.Executable.get_execution_options") and [`Connection.get_execution_options()`](connections.html#sqlalchemy.engine.Connection.get_execution_options
    "sqlalchemy.engine.Connection.get_execution_options"), or within selected event
    hooks using a dedicated `execution_options` event parameter such as [`ConnectionEvents.before_execute.execution_options`](events.html#sqlalchemy.events.ConnectionEvents.before_execute.params.execution_options
    "sqlalchemy.events.ConnectionEvents.before_execute") or [`ORMExecuteState.execution_options`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.execution_options
    "sqlalchemy.orm.ORMExecuteState.execution_options"), e.g.:'
  id: totrans-2665
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") 和其他相关方法以及参数字典可以接受的选项类型包括由
    SQLAlchemy Core 或 ORM 明确使用的参数，以及未被 SQLAlchemy 定义的任意关键字参数。这意味着这些方法和/或参数字典可以用于与自定义代码交互的用户定义参数，可以使用诸如
    [`Executable.get_execution_options()`](#sqlalchemy.sql.expression.Executable.get_execution_options
    "sqlalchemy.sql.expression.Executable.get_execution_options") 和 [`Connection.get_execution_options()`](connections.html#sqlalchemy.engine.Connection.get_execution_options
    "sqlalchemy.engine.Connection.get_execution_options") 这样的方法来访问参数，或者在选定的事件钩子中使用专用的
    `execution_options` 事件参数，例如 [`ConnectionEvents.before_execute.execution_options`](events.html#sqlalchemy.events.ConnectionEvents.before_execute.params.execution_options
    "sqlalchemy.events.ConnectionEvents.before_execute") 或 [`ORMExecuteState.execution_options`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.execution_options
    "sqlalchemy.orm.ORMExecuteState.execution_options")，例如：'
- en: '[PRE519]'
  id: totrans-2666
  prefs: []
  type: TYPE_PRE
  zh: '[PRE519]'
- en: 'Within the scope of options that are explicitly recognized by SQLAlchemy, most
    apply to specific classes of objects and not others. The most common execution
    options include:'
  id: totrans-2667
  prefs: []
  type: TYPE_NORMAL
  zh: 在 SQLAlchemy 明确识别的选项范围内，大多数适用于特定类别的对象而不是其他对象。最常见的执行选项包括：
- en: '[`Connection.execution_options.isolation_level`](connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") - sets the isolation level for
    a connection or a class of connections via an [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"). This option is accepted only by [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") or [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine").'
  id: totrans-2668
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.isolation_level`](connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") - 通过 [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 为连接或连接类设置隔离级别。此选项仅由 [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 或 [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 接受。'
- en: '[`Connection.execution_options.stream_results`](connections.html#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") - indicates results should be
    fetched using a server side cursor; this option is accepted by [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"), by the [`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute") parameter on [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute"), and additionally by [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") on a SQL statement object,
    as well as by ORM constructs like [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute").'
  id: totrans-2669
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.stream_results`](connections.html#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") - 指示结果应使用服务器端游标获取；这个选项被[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")接受，由[`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")上的[`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute")参数接受，并且由SQL语句对象的[`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")以及ORM构造如[`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")额外接受。'
- en: '[`Connection.execution_options.compiled_cache`](connections.html#sqlalchemy.engine.Connection.execution_options.params.compiled_cache
    "sqlalchemy.engine.Connection.execution_options") - indicates a dictionary that
    will serve as the [SQL compilation cache](connections.html#sql-caching) for a
    [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    or [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine"),
    as well as for ORM methods like [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute"). Can be passed as `None` to disable caching
    for statements. This option is not accepted by [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") as it is inadvisable
    to carry along a compilation cache within a statement object.'
  id: totrans-2670
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.compiled_cache`](connections.html#sqlalchemy.engine.Connection.execution_options.params.compiled_cache
    "sqlalchemy.engine.Connection.execution_options") - 指示一个字典，将用作[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")或[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")的[SQL编译缓存](connections.html#sql-caching)的服务，以及[`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")等ORM方法的编译缓存。可以传递`None`来禁用语句的缓存。这个选项不被[`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")接受，因为在语句对象中携带编译缓存是不明智的。'
- en: '[`Connection.execution_options.schema_translate_map`](connections.html#sqlalchemy.engine.Connection.execution_options.params.schema_translate_map
    "sqlalchemy.engine.Connection.execution_options") - a mapping of schema names
    used by the [Schema Translate Map](connections.html#schema-translating) feature,
    accepted by [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine"),
    [`Executable`](#sqlalchemy.sql.expression.Executable "sqlalchemy.sql.expression.Executable"),
    as well as by ORM constructs like [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute").'
  id: totrans-2671
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.schema_translate_map`](connections.html#sqlalchemy.engine.Connection.execution_options.params.schema_translate_map
    "sqlalchemy.engine.Connection.execution_options") - 一个由[模式翻译映射](connections.html#schema-translating)功能使用的模式名称映射，被[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")、[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")、[`Executable`](#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")接受，以及ORM构造如[`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")。'
- en: See also
  id: totrans-2672
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")'
  id: totrans-2673
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")'
- en: '[`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute")'
  id: totrans-2674
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute")'
- en: '[`Session.execute.execution_options`](../orm/session_api.html#sqlalchemy.orm.Session.execute.params.execution_options
    "sqlalchemy.orm.Session.execute")'
  id: totrans-2675
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.execute.execution_options`](../orm/session_api.html#sqlalchemy.orm.Session.execute.params.execution_options
    "sqlalchemy.orm.Session.execute")'
- en: '[ORM Execution Options](../orm/queryguide/api.html#orm-queryguide-execution-options)
    - documentation on all ORM-specific execution options'
  id: totrans-2676
  prefs: []
  type: TYPE_NORMAL
  zh: '[ORM 执行选项](../orm/queryguide/api.html#orm-queryguide-execution-options) - 所有ORM特定执行选项的文档'
- en: '[PRE520]'
  id: totrans-2677
  prefs: []
  type: TYPE_PRE
  zh: '[PRE520]'
- en: '*inherited from the* [`SelectBase.exists()`](#sqlalchemy.sql.expression.SelectBase.exists
    "sqlalchemy.sql.expression.SelectBase.exists") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  id: totrans-2678
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SelectBase.exists()`](#sqlalchemy.sql.expression.SelectBase.exists
    "sqlalchemy.sql.expression.SelectBase.exists") *方法的* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
- en: Return an [`Exists`](#sqlalchemy.sql.expression.Exists "sqlalchemy.sql.expression.Exists")
    representation of this selectable, which can be used as a column expression.
  id: totrans-2679
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此可选择性的[`Exists`](#sqlalchemy.sql.expression.Exists "sqlalchemy.sql.expression.Exists")表示，可用作列表达式。
- en: The returned object is an instance of [`Exists`](#sqlalchemy.sql.expression.Exists
    "sqlalchemy.sql.expression.Exists").
  id: totrans-2680
  prefs: []
  type: TYPE_NORMAL
  zh: 返回对象是[`Exists`](#sqlalchemy.sql.expression.Exists "sqlalchemy.sql.expression.Exists")的实例。
- en: See also
  id: totrans-2681
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`exists()`](#sqlalchemy.sql.expression.exists "sqlalchemy.sql.expression.exists")'
  id: totrans-2682
  prefs: []
  type: TYPE_NORMAL
  zh: '[`exists()`](#sqlalchemy.sql.expression.exists "sqlalchemy.sql.expression.exists")'
- en: '[EXISTS subqueries](../tutorial/data_select.html#tutorial-exists) - in the
    [2.0 style](../glossary.html#term-2.0-style) tutorial.'
  id: totrans-2683
  prefs: []
  type: TYPE_NORMAL
  zh: '[EXISTS 子查询](../tutorial/data_select.html#tutorial-exists) - 在[2.0风格](../glossary.html#term-2.0-style)教程中。'
- en: New in version 1.4.
  id: totrans-2684
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本1.4中推出。
- en: '[PRE521]'
  id: totrans-2685
  prefs: []
  type: TYPE_PRE
  zh: '[PRE521]'
- en: '*inherited from the* [`SelectBase.exported_columns`](#sqlalchemy.sql.expression.SelectBase.exported_columns
    "sqlalchemy.sql.expression.SelectBase.exported_columns") *attribute of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  id: totrans-2686
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SelectBase.exported_columns`](#sqlalchemy.sql.expression.SelectBase.exported_columns
    "sqlalchemy.sql.expression.SelectBase.exported_columns") *属性的* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
- en: A [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") that represents the “exported” columns
    of this [`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable"),
    not including [`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause") constructs.
  id: totrans-2687
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")，代表此[`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")的“导出”列，不包括[`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause")构造。
- en: The “exported” columns for a [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase") object are synonymous with the [`SelectBase.selected_columns`](#sqlalchemy.sql.expression.SelectBase.selected_columns
    "sqlalchemy.sql.expression.SelectBase.selected_columns") collection.
  id: totrans-2688
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")对象的“导出”列与[`SelectBase.selected_columns`](#sqlalchemy.sql.expression.SelectBase.selected_columns
    "sqlalchemy.sql.expression.SelectBase.selected_columns")集合是同义词。'
- en: New in version 1.4.
  id: totrans-2689
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本1.4中推出。
- en: See also
  id: totrans-2690
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Select.exported_columns`](#sqlalchemy.sql.expression.Select.exported_columns
    "sqlalchemy.sql.expression.Select.exported_columns")'
  id: totrans-2691
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.exported_columns`](#sqlalchemy.sql.expression.Select.exported_columns
    "sqlalchemy.sql.expression.Select.exported_columns")'
- en: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns")'
  id: totrans-2692
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns")'
- en: '[`FromClause.exported_columns`](#sqlalchemy.sql.expression.FromClause.exported_columns
    "sqlalchemy.sql.expression.FromClause.exported_columns")'
  id: totrans-2693
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FromClause.exported_columns`](#sqlalchemy.sql.expression.FromClause.exported_columns
    "sqlalchemy.sql.expression.FromClause.exported_columns")'
- en: '[PRE522]'
  id: totrans-2694
  prefs: []
  type: TYPE_PRE
  zh: '[PRE522]'
- en: '*inherited from the* [`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  id: totrans-2695
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch") *方法的* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
- en: Return a new selectable with the given FETCH FIRST criterion applied.
  id: totrans-2696
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个应用了给定FETCH FIRST条件的新可选择项。
- en: This is a numeric value which usually renders as `FETCH {FIRST | NEXT} [ count
    ] {ROW | ROWS} {ONLY | WITH TIES}` expression in the resulting select. This functionality
    is is currently implemented for Oracle, PostgreSQL, MSSQL.
  id: totrans-2697
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个数值，通常在结果选择中呈现为 `FETCH {FIRST | NEXT} [ count ] {ROW | ROWS} {ONLY | WITH
    TIES}` 表达式。此功能目前已为 Oracle、PostgreSQL、MSSQL 实现。
- en: Use [`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset") to specify the offset.
  id: totrans-2698
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset")来指定偏移量。
- en: Note
  id: totrans-2699
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The [`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch") method will replace any clause
    applied with [`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit").
  id: totrans-2700
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch") 方法将替换任何应用了 [`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit") 的子句。'
- en: New in version 1.4.
  id: totrans-2701
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中新增。
- en: 'Parameters:'
  id: totrans-2702
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`count` – an integer COUNT parameter, or a SQL expression that provides an
    integer result. When `percent=True` this will represent the percentage of rows
    to return, not the absolute value. Pass `None` to reset it.'
  id: totrans-2703
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`count` – 一个整数 COUNT 参数，或者提供整数结果的 SQL 表达式。当 `percent=True` 时，这将代表要返回的行的百分比，而不是绝对值。传递
    `None` 来重置它。'
- en: '`with_ties` – When `True`, the WITH TIES option is used to return any additional
    rows that tie for the last place in the result set according to the `ORDER BY`
    clause. The `ORDER BY` may be mandatory in this case. Defaults to `False`'
  id: totrans-2704
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`with_ties` – 当为`True`时，使用 WITH TIES 选项来返回任何与结果集中的最后一位并列的额外行，根据 `ORDER BY`
    子句确定。在这种情况下，`ORDER BY` 可能是强制性的。默认为`False`'
- en: '`percent` – When `True`, `count` represents the percentage of the total number
    of selected rows to return. Defaults to `False`'
  id: totrans-2705
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`percent` – 当为`True`时，`count`表示要返回的所选行总数的百分比。默认为`False`'
- en: See also
  id: totrans-2706
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit")'
  id: totrans-2707
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit")'
- en: '[`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset")'
  id: totrans-2708
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset")'
- en: '[PRE523]'
  id: totrans-2709
  prefs: []
  type: TYPE_PRE
  zh: '[PRE523]'
- en: '*inherited from the* [`Executable.get_execution_options()`](#sqlalchemy.sql.expression.Executable.get_execution_options
    "sqlalchemy.sql.expression.Executable.get_execution_options") *method of* [`Executable`](#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")'
  id: totrans-2710
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Executable.get_execution_options()`](#sqlalchemy.sql.expression.Executable.get_execution_options
    "sqlalchemy.sql.expression.Executable.get_execution_options") *方法的参数* [`Executable`](#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")'
- en: Get the non-SQL options which will take effect during execution.
  id: totrans-2711
  prefs: []
  type: TYPE_NORMAL
  zh: 获取在执行期间生效的非 SQL 选项。
- en: New in version 1.3.
  id: totrans-2712
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.3 中新增。
- en: See also
  id: totrans-2713
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")'
  id: totrans-2714
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")'
- en: '[PRE524]'
  id: totrans-2715
  prefs: []
  type: TYPE_PRE
  zh: '[PRE524]'
- en: '*inherited from the* [`GenerativeSelect.get_label_style()`](#sqlalchemy.sql.expression.GenerativeSelect.get_label_style
    "sqlalchemy.sql.expression.GenerativeSelect.get_label_style") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  id: totrans-2716
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`GenerativeSelect.get_label_style()`](#sqlalchemy.sql.expression.GenerativeSelect.get_label_style
    "sqlalchemy.sql.expression.GenerativeSelect.get_label_style") *方法的参数* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
- en: Retrieve the current label style.
  id: totrans-2717
  prefs: []
  type: TYPE_NORMAL
  zh: 检索当前标签样式。
- en: New in version 1.4.
  id: totrans-2718
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中新增。
- en: '[PRE525]'
  id: totrans-2719
  prefs: []
  type: TYPE_PRE
  zh: '[PRE525]'
- en: '*inherited from the* [`GenerativeSelect.group_by()`](#sqlalchemy.sql.expression.GenerativeSelect.group_by
    "sqlalchemy.sql.expression.GenerativeSelect.group_by") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  id: totrans-2720
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`GenerativeSelect.group_by()`](#sqlalchemy.sql.expression.GenerativeSelect.group_by
    "sqlalchemy.sql.expression.GenerativeSelect.group_by") *方法的参数* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
- en: Return a new selectable with the given list of GROUP BY criterion applied.
  id: totrans-2721
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个应用了给定的 GROUP BY 条件列表的新可选择项。
- en: All existing GROUP BY settings can be suppressed by passing `None`.
  id: totrans-2722
  prefs: []
  type: TYPE_NORMAL
  zh: 所有现有的 GROUP BY 设置都可以通过传递 `None` 来抑制。
- en: 'e.g.:'
  id: totrans-2723
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE526]'
  id: totrans-2724
  prefs: []
  type: TYPE_PRE
  zh: '[PRE526]'
- en: 'Parameters:'
  id: totrans-2725
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '***clauses** – a series of [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") constructs which will be used to generate
    an GROUP BY clause.'
  id: totrans-2726
  prefs: []
  type: TYPE_NORMAL
  zh: '***子句** – 一系列将用于生成GROUP BY子句的[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")构造。'
- en: See also
  id: totrans-2727
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Aggregate functions with GROUP BY / HAVING](../tutorial/data_select.html#tutorial-group-by-w-aggregates)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-2728
  prefs: []
  type: TYPE_NORMAL
  zh: '[带有GROUP BY / HAVING的聚合函数](../tutorial/data_select.html#tutorial-group-by-w-aggregates)
    - 在[SQLAlchemy统一教程](../tutorial/index.html#unified-tutorial)中'
- en: '[Ordering or Grouping by a Label](../tutorial/data_select.html#tutorial-order-by-label)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-2729
  prefs: []
  type: TYPE_NORMAL
  zh: '[按标签排序或分组](../tutorial/data_select.html#tutorial-order-by-label) - 在[SQLAlchemy统一教程](../tutorial/index.html#unified-tutorial)中'
- en: '[PRE527]'
  id: totrans-2730
  prefs: []
  type: TYPE_PRE
  zh: '[PRE527]'
- en: Return `True` if this [`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows
    "sqlalchemy.sql.expression.ReturnsRows") is ‘derived’ from the given [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-2731
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此[`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows "sqlalchemy.sql.expression.ReturnsRows")是从给定的[`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")‘派生’，则返回`True`。
- en: An example would be an Alias of a Table is derived from that Table.
  id: totrans-2732
  prefs: []
  type: TYPE_NORMAL
  zh: 一个示例是，表的别名是从该表派生的。
- en: '[PRE528]'
  id: totrans-2733
  prefs: []
  type: TYPE_PRE
  zh: '[PRE528]'
- en: '*inherited from the* [`SelectBase.label()`](#sqlalchemy.sql.expression.SelectBase.label
    "sqlalchemy.sql.expression.SelectBase.label") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  id: totrans-2734
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SelectBase.label()`](#sqlalchemy.sql.expression.SelectBase.label "sqlalchemy.sql.expression.SelectBase.label")
    *方法的* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")'
- en: Return a ‘scalar’ representation of this selectable, embedded as a subquery
    with a label.
  id: totrans-2735
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此可选择项的“标量”表示，嵌入为带有标签的子查询。
- en: See also
  id: totrans-2736
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery").'
  id: totrans-2737
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery").'
- en: '[PRE529]'
  id: totrans-2738
  prefs: []
  type: TYPE_PRE
  zh: '[PRE529]'
- en: '*inherited from the* [`SelectBase.lateral()`](#sqlalchemy.sql.expression.SelectBase.lateral
    "sqlalchemy.sql.expression.SelectBase.lateral") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  id: totrans-2739
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SelectBase.lateral()`](#sqlalchemy.sql.expression.SelectBase.lateral
    "sqlalchemy.sql.expression.SelectBase.lateral") *方法的* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
- en: Return a LATERAL alias of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable").
  id: totrans-2740
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此[`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable")的LATERAL别名。
- en: The return value is the [`Lateral`](#sqlalchemy.sql.expression.Lateral "sqlalchemy.sql.expression.Lateral")
    construct also provided by the top-level [`lateral()`](#sqlalchemy.sql.expression.lateral
    "sqlalchemy.sql.expression.lateral") function.
  id: totrans-2741
  prefs: []
  type: TYPE_NORMAL
  zh: 返回值是由顶层[`lateral()`](#sqlalchemy.sql.expression.lateral "sqlalchemy.sql.expression.lateral")函数提供的[`Lateral`](#sqlalchemy.sql.expression.Lateral
    "sqlalchemy.sql.expression.Lateral")构造。
- en: See also
  id: totrans-2742
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[LATERAL correlation](../tutorial/data_select.html#tutorial-lateral-correlation)
    - overview of usage.'
  id: totrans-2743
  prefs: []
  type: TYPE_NORMAL
  zh: '[LATERAL相关性](../tutorial/data_select.html#tutorial-lateral-correlation) - 用法概述。'
- en: '[PRE530]'
  id: totrans-2744
  prefs: []
  type: TYPE_PRE
  zh: '[PRE530]'
- en: '*inherited from the* [`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  id: totrans-2745
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit") *方法的* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
- en: Return a new selectable with the given LIMIT criterion applied.
  id: totrans-2746
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个应用给定LIMIT条件的新可选择项。
- en: This is a numerical value which usually renders as a `LIMIT` expression in the
    resulting select. Backends that don’t support `LIMIT` will attempt to provide
    similar functionality.
  id: totrans-2747
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个通常呈现为`LIMIT`表达式的数值。不支持`LIMIT`的后端将尝试提供类似的功能。
- en: Note
  id: totrans-2748
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The [`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit") method will replace any clause
    applied with [`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch").
  id: totrans-2749
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit") 方法将替换应用的任何子句与[`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch")。'
- en: 'Parameters:'
  id: totrans-2750
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**limit** – an integer LIMIT parameter, or a SQL expression that provides an
    integer result. Pass `None` to reset it.'
  id: totrans-2751
  prefs: []
  type: TYPE_NORMAL
  zh: '**limit** – 一个整数LIMIT参数，或提供整数结果的SQL表达式。传递`None`以重置它。'
- en: See also
  id: totrans-2752
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch")'
  id: totrans-2753
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch")'
- en: '[`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset")'
  id: totrans-2754
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset")'
- en: '[PRE531]'
  id: totrans-2755
  prefs: []
  type: TYPE_PRE
  zh: '[PRE531]'
- en: '*inherited from the* [`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  id: totrans-2756
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset") *方法的* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
- en: Return a new selectable with the given OFFSET criterion applied.
  id: totrans-2757
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个应用了给定OFFSET条件的新可选择项。
- en: This is a numeric value which usually renders as an `OFFSET` expression in the
    resulting select. Backends that don’t support `OFFSET` will attempt to provide
    similar functionality.
  id: totrans-2758
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个数值，通常在生成的选择中呈现为`OFFSET`表达式。不支持`OFFSET`的后端将尝试提供类似的功能。
- en: 'Parameters:'
  id: totrans-2759
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**offset** – an integer OFFSET parameter, or a SQL expression that provides
    an integer result. Pass `None` to reset it.'
  id: totrans-2760
  prefs: []
  type: TYPE_NORMAL
  zh: '**offset** – 一个整数OFFSET参数，或提供整数结果的SQL表达式。传递`None`以重置它。'
- en: See also
  id: totrans-2761
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit")'
  id: totrans-2762
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit")'
- en: '[`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch")'
  id: totrans-2763
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch")'
- en: '[PRE532]'
  id: totrans-2764
  prefs: []
  type: TYPE_PRE
  zh: '[PRE532]'
- en: '*inherited from the* [`Executable.options()`](#sqlalchemy.sql.expression.Executable.options
    "sqlalchemy.sql.expression.Executable.options") *method of* [`Executable`](#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")'
  id: totrans-2765
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Executable.options()`](#sqlalchemy.sql.expression.Executable.options
    "sqlalchemy.sql.expression.Executable.options") *方法的* [`Executable`](#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")'
- en: Apply options to this statement.
  id: totrans-2766
  prefs: []
  type: TYPE_NORMAL
  zh: 将选项应用于此语句。
- en: In the general sense, options are any kind of Python object that can be interpreted
    by the SQL compiler for the statement. These options can be consumed by specific
    dialects or specific kinds of compilers.
  id: totrans-2767
  prefs: []
  type: TYPE_NORMAL
  zh: 从一般意义上讲，选项是任何SQL编译器可以解释的Python对象。这些选项可以被特定的方言或特定类型的编译器消耗。
- en: The most commonly known kind of option are the ORM level options that apply
    “eager load” and other loading behaviors to an ORM query. However, options can
    theoretically be used for many other purposes.
  id: totrans-2768
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的选项类型是应用于ORM查询的“急加载”和其他加载行为的ORM级选项。然而，选项理论上可以用于许多其他目的。
- en: For background on specific kinds of options for specific kinds of statements,
    refer to the documentation for those option objects.
  id: totrans-2769
  prefs: []
  type: TYPE_NORMAL
  zh: 有关特定类型语句的特定类型选项的背景，请参阅这些选项对象的文档。
- en: 'Changed in version 1.4: - added [`Executable.options()`](#sqlalchemy.sql.expression.Executable.options
    "sqlalchemy.sql.expression.Executable.options") to Core statement objects towards
    the goal of allowing unified Core / ORM querying capabilities.'
  id: totrans-2770
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.4更改：- 向核心语句对象添加[`Executable.options()`](#sqlalchemy.sql.expression.Executable.options
    "sqlalchemy.sql.expression.Executable.options")，以实现统一的核心/ORM查询功能的目标。
- en: See also
  id: totrans-2771
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Column Loading Options](../orm/queryguide/columns.html#loading-columns) -
    refers to options specific to the usage of ORM queries'
  id: totrans-2772
  prefs: []
  type: TYPE_NORMAL
  zh: '[列加载选项](../orm/queryguide/columns.html#loading-columns) - 指特定于ORM查询使用的选项'
- en: '[Relationship Loading with Loader Options](../orm/queryguide/relationships.html#relationship-loader-options)
    - refers to options specific to the usage of ORM queries'
  id: totrans-2773
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用加载器选项加载关系](../orm/queryguide/relationships.html#relationship-loader-options)
    - 指特定于ORM查询使用的选项'
- en: '[PRE533]'
  id: totrans-2774
  prefs: []
  type: TYPE_PRE
  zh: '[PRE533]'
- en: '*inherited from the* [`GenerativeSelect.order_by()`](#sqlalchemy.sql.expression.GenerativeSelect.order_by
    "sqlalchemy.sql.expression.GenerativeSelect.order_by") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  id: totrans-2775
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`GenerativeSelect.order_by()`](#sqlalchemy.sql.expression.GenerativeSelect.order_by
    "sqlalchemy.sql.expression.GenerativeSelect.order_by") *方法的* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
- en: Return a new selectable with the given list of ORDER BY criteria applied.
  id: totrans-2776
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个应用了给定ORDER BY条件列表的新可选择项。
- en: 'e.g.:'
  id: totrans-2777
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE534]'
  id: totrans-2778
  prefs: []
  type: TYPE_PRE
  zh: '[PRE534]'
- en: 'Calling this method multiple times is equivalent to calling it once with all
    the clauses concatenated. All existing ORDER BY criteria may be cancelled by passing
    `None` by itself. New ORDER BY criteria may then be added by invoking [`Query.order_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.order_by
    "sqlalchemy.orm.Query.order_by") again, e.g.:'
  id: totrans-2779
  prefs: []
  type: TYPE_NORMAL
  zh: 多次调用此方法等同于一次调用，其中所有子句都被连接起来。 通过单独传递`None`可以取消所有现有的ORDER BY条件。 然后可以通过再次调用[`Query.order_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.order_by
    "sqlalchemy.orm.Query.order_by")来添加新的ORDER BY条件，例如：
- en: '[PRE535]'
  id: totrans-2780
  prefs: []
  type: TYPE_PRE
  zh: '[PRE535]'
- en: 'Parameters:'
  id: totrans-2781
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '***clauses** – a series of [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") constructs which will be used to generate
    an ORDER BY clause.'
  id: totrans-2782
  prefs: []
  type: TYPE_NORMAL
  zh: '***clauses** – 一系列将用于生成ORDER BY子句的[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")构造。'
- en: See also
  id: totrans-2783
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[ORDER BY](../tutorial/data_select.html#tutorial-order-by) - in the [SQLAlchemy
    Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-2784
  prefs: []
  type: TYPE_NORMAL
  zh: '[ORDER BY](../tutorial/data_select.html#tutorial-order-by) - 在[SQLAlchemy统一教程](../tutorial/index.html#unified-tutorial)中'
- en: '[Ordering or Grouping by a Label](../tutorial/data_select.html#tutorial-order-by-label)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-2785
  prefs: []
  type: TYPE_NORMAL
  zh: '[按标签排序或分组](../tutorial/data_select.html#tutorial-order-by-label) - 在[SQLAlchemy统一教程](../tutorial/index.html#unified-tutorial)中'
- en: '[PRE536]'
  id: totrans-2786
  prefs: []
  type: TYPE_PRE
  zh: '[PRE536]'
- en: '*inherited from the* [`Selectable.replace_selectable()`](#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") *method of* [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
  id: totrans-2787
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Selectable.replace_selectable()`](#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") *方法的* [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
- en: Replace all occurrences of [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") ‘old’ with the given [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") object, returning a copy of this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-2788
  prefs: []
  type: TYPE_NORMAL
  zh: 用给定的[`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")对象替换所有[`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") ‘old’的出现，返回此[`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")的副本。
- en: 'Deprecated since version 1.4: The [`Selectable.replace_selectable()`](#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") method is deprecated,
    and will be removed in a future release. Similar functionality is available via
    the sqlalchemy.sql.visitors module.'
  id: totrans-2789
  prefs: []
  type: TYPE_NORMAL
  zh: 自1.4版本起弃用：[`Selectable.replace_selectable()`](#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable")方法已弃用，并将在将来的版本中删除。 类似功能可通过sqlalchemy.sql.visitors模块获得。
- en: '[PRE537]'
  id: totrans-2790
  prefs: []
  type: TYPE_PRE
  zh: '[PRE537]'
- en: '*inherited from the* [`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  id: totrans-2791
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery") *方法的* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
- en: Return a ‘scalar’ representation of this selectable, which can be used as a
    column expression.
  id: totrans-2792
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此可选择项的‘标量’表示，可用作列表达式。
- en: The returned object is an instance of [`ScalarSelect`](#sqlalchemy.sql.expression.ScalarSelect
    "sqlalchemy.sql.expression.ScalarSelect").
  id: totrans-2793
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的对象是[`ScalarSelect`](#sqlalchemy.sql.expression.ScalarSelect "sqlalchemy.sql.expression.ScalarSelect")的实例。
- en: Typically, a select statement which has only one column in its columns clause
    is eligible to be used as a scalar expression. The scalar subquery can then be
    used in the WHERE clause or columns clause of an enclosing SELECT.
  id: totrans-2794
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，仅在其列子句中具有一个列的选择语句有资格用作标量表达式。 然后可以在封闭SELECT的WHERE子句或列子句中使用标量子查询。
- en: Note that the scalar subquery differentiates from the FROM-level subquery that
    can be produced using the [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") method.
  id: totrans-2795
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，标量子查询与使用[`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery")方法生成的FROM级子查询有所不同。
- en: See also
  id: totrans-2796
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Scalar and Correlated Subqueries](../tutorial/data_select.html#tutorial-scalar-subquery)
    - in the 2.0 tutorial'
  id: totrans-2797
  prefs: []
  type: TYPE_NORMAL
  zh: '[标量和相关子查询](../tutorial/data_select.html#tutorial-scalar-subquery) - 在2.0教程中'
- en: '[PRE538]'
  id: totrans-2798
  prefs: []
  type: TYPE_PRE
  zh: '[PRE538]'
- en: '*inherited from the* [`SelectBase.select()`](#sqlalchemy.sql.expression.SelectBase.select
    "sqlalchemy.sql.expression.SelectBase.select") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  id: totrans-2799
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SelectBase.select()`](#sqlalchemy.sql.expression.SelectBase.select
    "sqlalchemy.sql.expression.SelectBase.select") *方法的* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
- en: 'Deprecated since version 1.4: The [`SelectBase.select()`](#sqlalchemy.sql.expression.SelectBase.select
    "sqlalchemy.sql.expression.SelectBase.select") method is deprecated and will be
    removed in a future release; this method implicitly creates a subquery that should
    be explicit. Please call [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") first in order to create a subquery,
    which then can be selected.'
  id: totrans-2800
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.4开始不推荐使用：[`SelectBase.select()`](#sqlalchemy.sql.expression.SelectBase.select
    "sqlalchemy.sql.expression.SelectBase.select") 方法已被弃用，并将在未来的版本中删除；此方法隐式创建了一个应明确表示的子查询。请先调用
    [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery "sqlalchemy.sql.expression.SelectBase.subquery")
    来创建子查询，然后再进行选择。
- en: '[PRE539]'
  id: totrans-2801
  prefs: []
  type: TYPE_PRE
  zh: '[PRE539]'
- en: A [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") representing the columns that this
    SELECT statement or similar construct returns in its result set, not including
    [`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause "sqlalchemy.sql.expression.TextClause")
    constructs.
  id: totrans-2802
  prefs: []
  type: TYPE_NORMAL
  zh: 表示此 SELECT 语句或类似构造返回其结果集中的列的 [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")，不包括 [`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause") 构造。
- en: For a [`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect "sqlalchemy.sql.expression.CompoundSelect"),
    the [`CompoundSelect.selected_columns`](#sqlalchemy.sql.expression.CompoundSelect.selected_columns
    "sqlalchemy.sql.expression.CompoundSelect.selected_columns") attribute returns
    the selected columns of the first SELECT statement contained within the series
    of statements within the set operation.
  id: totrans-2803
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 [`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect "sqlalchemy.sql.expression.CompoundSelect")，[`CompoundSelect.selected_columns`](#sqlalchemy.sql.expression.CompoundSelect.selected_columns
    "sqlalchemy.sql.expression.CompoundSelect.selected_columns") 属性返回包含在集合操作中的语句系列中的第一个
    SELECT 语句中选择的列。
- en: See also
  id: totrans-2804
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`Select.selected_columns`](#sqlalchemy.sql.expression.Select.selected_columns
    "sqlalchemy.sql.expression.Select.selected_columns")'
  id: totrans-2805
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.selected_columns`](#sqlalchemy.sql.expression.Select.selected_columns
    "sqlalchemy.sql.expression.Select.selected_columns")'
- en: New in version 1.4.
  id: totrans-2806
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4中的新内容。
- en: '[PRE540]'
  id: totrans-2807
  prefs: []
  type: TYPE_PRE
  zh: '[PRE540]'
- en: Apply a ‘grouping’ to this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  id: totrans-2808
  prefs: []
  type: TYPE_NORMAL
  zh: 对此 [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") 应用“分组”。
- en: This method is overridden by subclasses to return a “grouping” construct, i.e.
    parenthesis. In particular it’s used by “binary” expressions to provide a grouping
    around themselves when placed into a larger expression, as well as by [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs when placed into the FROM clause
    of another [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select").
    (Note that subqueries should be normally created using the [`Select.alias()`](#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") method, as many platforms require nested
    SELECT statements to be named).
  id: totrans-2809
  prefs: []
  type: TYPE_NORMAL
  zh: 子类覆盖此方法以返回“分组”构造，即括号。特别是在将“二元”表达式放入较大表达式时，它被“二元”表达式用于提供围绕自己的分组，以及当 [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造放入另一个 [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 的 FROM 子句时。 (请注意，通常应使用 [`Select.alias()`](#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") 方法创建子查询，因为许多平台要求嵌套的 SELECT 语句具有名称)。
- en: As expressions are composed together, the application of [`self_group()`](#sqlalchemy.sql.expression.CompoundSelect.self_group
    "sqlalchemy.sql.expression.CompoundSelect.self_group") is automatic - end-user
    code should never need to use this method directly. Note that SQLAlchemy’s clause
    constructs take operator precedence into account - so parenthesis might not be
    needed, for example, in an expression like `x OR (y AND z)` - AND takes precedence
    over OR.
  id: totrans-2810
  prefs: []
  type: TYPE_NORMAL
  zh: 随着表达式的组合，[`self_group()`](#sqlalchemy.sql.expression.CompoundSelect.self_group
    "sqlalchemy.sql.expression.CompoundSelect.self_group") 的应用是自动的 - 最终用户代码不应直接使用此方法。请注意，SQLAlchemy
    的子句构造会考虑运算符优先级 - 因此在像 `x OR (y AND z)` 这样的表达式中可能不需要括号 - AND 优先于 OR。
- en: The base [`self_group()`](#sqlalchemy.sql.expression.CompoundSelect.self_group
    "sqlalchemy.sql.expression.CompoundSelect.self_group") method of [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") just returns self.
  id: totrans-2811
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement "sqlalchemy.sql.expression.ClauseElement")
    的基本 [`self_group()`](#sqlalchemy.sql.expression.CompoundSelect.self_group "sqlalchemy.sql.expression.CompoundSelect.self_group")
    方法只返回自身。'
- en: '[PRE541]'
  id: totrans-2812
  prefs: []
  type: TYPE_PRE
  zh: '[PRE541]'
- en: Return a new selectable with the specified label style.
  id: totrans-2813
  prefs: []
  type: TYPE_NORMAL
  zh: 返回具有指定标签样式的新可选择项。
- en: There are three “label styles” available, [`SelectLabelStyle.LABEL_STYLE_DISAMBIGUATE_ONLY`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_DISAMBIGUATE_ONLY
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_DISAMBIGUATE_ONLY"), [`SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL"),
    and [`SelectLabelStyle.LABEL_STYLE_NONE`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_NONE
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_NONE"). The default style
    is [`SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL").
  id: totrans-2814
  prefs: []
  type: TYPE_NORMAL
  zh: 有三种“标签样式”可用，[`SelectLabelStyle.LABEL_STYLE_DISAMBIGUATE_ONLY`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_DISAMBIGUATE_ONLY
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_DISAMBIGUATE_ONLY")，[`SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL")，以及[`SelectLabelStyle.LABEL_STYLE_NONE`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_NONE
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_NONE")。默认样式是[`SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL")。
- en: In modern SQLAlchemy, there is not generally a need to change the labeling style,
    as per-expression labels are more effectively used by making use of the [`ColumnElement.label()`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.label
    "sqlalchemy.sql.expression.ColumnElement.label") method. In past versions, `LABEL_STYLE_TABLENAME_PLUS_COL`
    was used to disambiguate same-named columns from different tables, aliases, or
    subqueries; the newer `LABEL_STYLE_DISAMBIGUATE_ONLY` now applies labels only
    to names that conflict with an existing name so that the impact of this labeling
    is minimal.
  id: totrans-2815
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代的 SQLAlchemy 中，通常不需要更改标签样式，因为通过使用 [`ColumnElement.label()`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.label
    "sqlalchemy.sql.expression.ColumnElement.label") 方法更有效地使用每个表达式的标签。在以前的版本中，`LABEL_STYLE_TABLENAME_PLUS_COL`
    用于消除来自不同表、别名或子查询的同名列；更新后的 `LABEL_STYLE_DISAMBIGUATE_ONLY` 仅对与现有名称冲突的名称应用标签，因此标签的影响最小。
- en: The rationale for disambiguation is mostly so that all column expressions are
    available from a given [`FromClause.c`](#sqlalchemy.sql.expression.FromClause.c
    "sqlalchemy.sql.expression.FromClause.c") collection when a subquery is created.
  id: totrans-2816
  prefs: []
  type: TYPE_NORMAL
  zh: 消除歧义的原因主要是，当创建子查询时，从给定的 [`FromClause.c`](#sqlalchemy.sql.expression.FromClause.c
    "sqlalchemy.sql.expression.FromClause.c") 集合中可以使用所有列表达式。
- en: 'New in version 1.4: - the [`GenerativeSelect.set_label_style()`](#sqlalchemy.sql.expression.GenerativeSelect.set_label_style
    "sqlalchemy.sql.expression.GenerativeSelect.set_label_style") method replaces
    the previous combination of `.apply_labels()`, `.with_labels()` and `use_labels=True`
    methods and/or parameters.'
  id: totrans-2817
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4 新增：- [`GenerativeSelect.set_label_style()`](#sqlalchemy.sql.expression.GenerativeSelect.set_label_style
    "sqlalchemy.sql.expression.GenerativeSelect.set_label_style") 方法替换了以前的 `.apply_labels()`、`.with_labels()`
    和 `use_labels=True` 方法和/或参数的组合。
- en: See also
  id: totrans-2818
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '`LABEL_STYLE_DISAMBIGUATE_ONLY`'
  id: totrans-2819
  prefs: []
  type: TYPE_NORMAL
  zh: '`LABEL_STYLE_DISAMBIGUATE_ONLY`'
- en: '`LABEL_STYLE_TABLENAME_PLUS_COL`'
  id: totrans-2820
  prefs: []
  type: TYPE_NORMAL
  zh: '`LABEL_STYLE_TABLENAME_PLUS_COL`'
- en: '`LABEL_STYLE_NONE`'
  id: totrans-2821
  prefs: []
  type: TYPE_NORMAL
  zh: '`LABEL_STYLE_NONE`'
- en: '`LABEL_STYLE_DEFAULT`'
  id: totrans-2822
  prefs: []
  type: TYPE_NORMAL
  zh: '`LABEL_STYLE_DEFAULT`'
- en: '[PRE542]'
  id: totrans-2823
  prefs: []
  type: TYPE_PRE
  zh: '[PRE542]'
- en: '*inherited from the* [`GenerativeSelect.slice()`](#sqlalchemy.sql.expression.GenerativeSelect.slice
    "sqlalchemy.sql.expression.GenerativeSelect.slice") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  id: totrans-2824
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`GenerativeSelect.slice()`](#sqlalchemy.sql.expression.GenerativeSelect.slice
    "sqlalchemy.sql.expression.GenerativeSelect.slice") *方法的* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
- en: Apply LIMIT / OFFSET to this statement based on a slice.
  id: totrans-2825
  prefs: []
  type: TYPE_NORMAL
  zh: 根据片段将 LIMIT / OFFSET 应用于此语句。
- en: The start and stop indices behave like the argument to Python’s built-in `range()`
    function. This method provides an alternative to using `LIMIT`/`OFFSET` to get
    a slice of the query.
  id: totrans-2826
  prefs: []
  type: TYPE_NORMAL
  zh: 起始和停止索引的行为类似于 Python 内置 `range()` 函数的参数。此方法提供了一种替代方法，用于使用 `LIMIT`/`OFFSET` 获取查询的片段。
- en: For example,
  id: totrans-2827
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，
- en: '[PRE543]'
  id: totrans-2828
  prefs: []
  type: TYPE_PRE
  zh: '[PRE543]'
- en: renders as
  id: totrans-2829
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染为
- en: '[PRE544]'
  id: totrans-2830
  prefs: []
  type: TYPE_PRE
  zh: '[PRE544]'
- en: Note
  id: totrans-2831
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The [`GenerativeSelect.slice()`](#sqlalchemy.sql.expression.GenerativeSelect.slice
    "sqlalchemy.sql.expression.GenerativeSelect.slice") method will replace any clause
    applied with [`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch").
  id: totrans-2832
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.slice()`](#sqlalchemy.sql.expression.GenerativeSelect.slice
    "sqlalchemy.sql.expression.GenerativeSelect.slice") 方法将替换任何应用了 [`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch") 的子句。'
- en: 'New in version 1.4: Added the [`GenerativeSelect.slice()`](#sqlalchemy.sql.expression.GenerativeSelect.slice
    "sqlalchemy.sql.expression.GenerativeSelect.slice") method generalized from the
    ORM.'
  id: totrans-2833
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4 中新增：从 ORM 泛化的 [`GenerativeSelect.slice()`](#sqlalchemy.sql.expression.GenerativeSelect.slice
    "sqlalchemy.sql.expression.GenerativeSelect.slice") 方法。
- en: See also
  id: totrans-2834
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit")'
  id: totrans-2835
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit")'
- en: '[`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset")'
  id: totrans-2836
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset")'
- en: '[`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch")'
  id: totrans-2837
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch")'
- en: '[PRE545]'
  id: totrans-2838
  prefs: []
  type: TYPE_PRE
  zh: '[PRE545]'
- en: '*inherited from the* [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  id: totrans-2839
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") *方法的* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
- en: Return a subquery of this [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase").
  id: totrans-2840
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此 [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")
    的子查询。
- en: A subquery is from a SQL perspective a parenthesized, named construct that can
    be placed in the FROM clause of another SELECT statement.
  id: totrans-2841
  prefs: []
  type: TYPE_NORMAL
  zh: 从 SQL 视角来看，子查询是一个带有括号的命名构造，可以放置在另一个 SELECT 语句的 FROM 子句中。
- en: 'Given a SELECT statement such as:'
  id: totrans-2842
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个类似的 SELECT 语句：
- en: '[PRE546]'
  id: totrans-2843
  prefs: []
  type: TYPE_PRE
  zh: '[PRE546]'
- en: 'The above statement might look like:'
  id: totrans-2844
  prefs: []
  type: TYPE_NORMAL
  zh: 上述语句可能看起来像：
- en: '[PRE547]'
  id: totrans-2845
  prefs: []
  type: TYPE_PRE
  zh: '[PRE547]'
- en: 'The subquery form by itself renders the same way, however when embedded into
    the FROM clause of another SELECT statement, it becomes a named sub-element:'
  id: totrans-2846
  prefs: []
  type: TYPE_NORMAL
  zh: 单独的子查询形式呈现相同的方式，但是当嵌入到另一个 SELECT 语句的 FROM 子句中时，它变成了一个命名子元素：
- en: '[PRE548]'
  id: totrans-2847
  prefs: []
  type: TYPE_PRE
  zh: '[PRE548]'
- en: 'The above renders as:'
  id: totrans-2848
  prefs: []
  type: TYPE_NORMAL
  zh: 上述呈现为：
- en: '[PRE549]'
  id: totrans-2849
  prefs: []
  type: TYPE_PRE
  zh: '[PRE549]'
- en: Historically, [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") is equivalent to calling the
    [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias "sqlalchemy.sql.expression.FromClause.alias")
    method on a FROM object; however, as a [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase") object is not directly FROM object, the
    [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery "sqlalchemy.sql.expression.SelectBase.subquery")
    method provides clearer semantics.
  id: totrans-2850
  prefs: []
  type: TYPE_NORMAL
  zh: 历史上，[`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") 等同于在 FROM 对象上调用 [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") 方法；然而，由于 [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase") 对象不是直接的 FROM 对象，因此 [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") 方法提供了更清晰的语义。
- en: New in version 1.4.
  id: totrans-2851
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4 中新增。
- en: '[PRE550]'
  id: totrans-2852
  prefs: []
  type: TYPE_PRE
  zh: '[PRE550]'
- en: '*inherited from the* [`GenerativeSelect.with_for_update()`](#sqlalchemy.sql.expression.GenerativeSelect.with_for_update
    "sqlalchemy.sql.expression.GenerativeSelect.with_for_update") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  id: totrans-2853
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`GenerativeSelect.with_for_update()`](#sqlalchemy.sql.expression.GenerativeSelect.with_for_update
    "sqlalchemy.sql.expression.GenerativeSelect.with_for_update") *方法的* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
- en: Specify a `FOR UPDATE` clause for this [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect").
  id: totrans-2854
  prefs: []
  type: TYPE_NORMAL
  zh: 为这个 [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect "sqlalchemy.sql.expression.GenerativeSelect")
    指定一个 `FOR UPDATE` 子句。
- en: 'E.g.:'
  id: totrans-2855
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE551]'
  id: totrans-2856
  prefs: []
  type: TYPE_PRE
  zh: '[PRE551]'
- en: 'On a database like PostgreSQL or Oracle, the above would render a statement
    like:'
  id: totrans-2857
  prefs: []
  type: TYPE_NORMAL
  zh: 在像 PostgreSQL 或 Oracle 这样的数据库中，上述将呈现为类似于：
- en: '[PRE552]'
  id: totrans-2858
  prefs: []
  type: TYPE_PRE
  zh: '[PRE552]'
- en: 'on other backends, the `nowait` option is ignored and instead would produce:'
  id: totrans-2859
  prefs: []
  type: TYPE_NORMAL
  zh: 在其他后端，`nowait` 选项会被忽略，而会产生：
- en: '[PRE553]'
  id: totrans-2860
  prefs: []
  type: TYPE_PRE
  zh: '[PRE553]'
- en: When called with no arguments, the statement will render with the suffix `FOR
    UPDATE`. Additional arguments can then be provided which allow for common database-specific
    variants.
  id: totrans-2861
  prefs: []
  type: TYPE_NORMAL
  zh: 当没有参数调用时，语句将以后缀`FOR UPDATE`渲染。然后可以提供额外的参数，允许常见的特定于数据库的变体。
- en: 'Parameters:'
  id: totrans-2862
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`nowait` – boolean; will render `FOR UPDATE NOWAIT` on Oracle and PostgreSQL
    dialects.'
  id: totrans-2863
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nowait` – 布尔值；在Oracle和PostgreSQL方言上会渲染为`FOR UPDATE NOWAIT`。'
- en: '`read` – boolean; will render `LOCK IN SHARE MODE` on MySQL, `FOR SHARE` on
    PostgreSQL. On PostgreSQL, when combined with `nowait`, will render `FOR SHARE
    NOWAIT`.'
  id: totrans-2864
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`read` – 布尔值；在MySQL上会渲染为`LOCK IN SHARE MODE`，在PostgreSQL上会渲染为`FOR SHARE`。在PostgreSQL上，与`nowait`结合使用时，会渲染为`FOR
    SHARE NOWAIT`。'
- en: '`of` – SQL expression or list of SQL expression elements, (typically [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects or a compatible expression, for some backends
    may also be a table expression) which will render into a `FOR UPDATE OF` clause;
    supported by PostgreSQL, Oracle, some MySQL versions and possibly others. May
    render as a table or as a column depending on backend.'
  id: totrans-2865
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`of` – SQL表达式或SQL表达式元素列表（通常是[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象或兼容表达式，对于某些后端也可以是表达式）将渲染为`FOR UPDATE OF`子句；由PostgreSQL、Oracle、某些MySQL版本和可能其他后端支持。根据后端的不同，可能会渲染为表或列。'
- en: '`skip_locked` – boolean, will render `FOR UPDATE SKIP LOCKED` on Oracle and
    PostgreSQL dialects or `FOR SHARE SKIP LOCKED` if `read=True` is also specified.'
  id: totrans-2866
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`skip_locked` – 布尔值，会在Oracle和PostgreSQL方言上渲染为`FOR UPDATE SKIP LOCKED`，如果还指定了`read=True`，则会渲染为`FOR
    SHARE SKIP LOCKED`。'
- en: '`key_share` – boolean, will render `FOR NO KEY UPDATE`, or if combined with
    `read=True` will render `FOR KEY SHARE`, on the PostgreSQL dialect.'
  id: totrans-2867
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`key_share` – 布尔值，会在PostgreSQL方言上渲染为`FOR NO KEY UPDATE`，或者如果与`read=True`结合使用，则会渲染为`FOR
    KEY SHARE`。'
- en: '[PRE554]'
  id: totrans-2868
  prefs: []
  type: TYPE_PRE
  zh: '[PRE554]'
- en: Represent a Common Table Expression.
  id: totrans-2869
  prefs: []
  type: TYPE_NORMAL
  zh: 代表一个公共表达式。
- en: The [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    object is obtained using the [`SelectBase.cte()`](#sqlalchemy.sql.expression.SelectBase.cte
    "sqlalchemy.sql.expression.SelectBase.cte") method from any SELECT statement.
    A less often available syntax also allows use of the [`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte
    "sqlalchemy.sql.expression.HasCTE.cte") method present on [DML](../glossary.html#term-DML)
    constructs such as [`Insert`](dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert"),
    [`Update`](dml.html#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    and [`Delete`](dml.html#sqlalchemy.sql.expression.Delete "sqlalchemy.sql.expression.Delete").
    See the [`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte "sqlalchemy.sql.expression.HasCTE.cte")
    method for usage details on CTEs.
  id: totrans-2870
  prefs: []
  type: TYPE_NORMAL
  zh: '[`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")对象是使用任何SELECT语句的[`SelectBase.cte()`](#sqlalchemy.sql.expression.SelectBase.cte
    "sqlalchemy.sql.expression.SelectBase.cte")方法获得的。较少见的语法还允许在[DML](../glossary.html#term-DML)构造上存在的[`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte
    "sqlalchemy.sql.expression.HasCTE.cte")方法的使用，例如[`Insert`](dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert")、[`Update`](dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update")和[`Delete`](dml.html#sqlalchemy.sql.expression.Delete
    "sqlalchemy.sql.expression.Delete")。有关CTE的用法详细信息，请参阅[`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte
    "sqlalchemy.sql.expression.HasCTE.cte")方法。'
- en: See also
  id: totrans-2871
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Subqueries and CTEs](../tutorial/data_select.html#tutorial-subqueries-ctes)
    - in the 2.0 tutorial'
  id: totrans-2872
  prefs: []
  type: TYPE_NORMAL
  zh: '[子查询和CTE](../tutorial/data_select.html#tutorial-subqueries-ctes) - 在2.0教程中'
- en: '[`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte "sqlalchemy.sql.expression.HasCTE.cte")
    - examples of calling styles'
  id: totrans-2873
  prefs: []
  type: TYPE_NORMAL
  zh: '[`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte "sqlalchemy.sql.expression.HasCTE.cte")
    - 调用样式示例'
- en: '**Members**'
  id: totrans-2874
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[alias()](#sqlalchemy.sql.expression.CTE.alias), [union()](#sqlalchemy.sql.expression.CTE.union),
    [union_all()](#sqlalchemy.sql.expression.CTE.union_all)'
  id: totrans-2875
  prefs: []
  type: TYPE_NORMAL
  zh: '[alias()](#sqlalchemy.sql.expression.CTE.alias), [union()](#sqlalchemy.sql.expression.CTE.union),
    [union_all()](#sqlalchemy.sql.expression.CTE.union_all)'
- en: '**Class signature**'
  id: totrans-2876
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    (`sqlalchemy.sql.roles.DMLTableRole`, `sqlalchemy.sql.roles.IsCTERole`, `sqlalchemy.sql.expression.Generative`,
    [`sqlalchemy.sql.expression.HasPrefixes`](#sqlalchemy.sql.expression.HasPrefixes
    "sqlalchemy.sql.expression.HasPrefixes"), [`sqlalchemy.sql.expression.HasSuffixes`](#sqlalchemy.sql.expression.HasSuffixes
    "sqlalchemy.sql.expression.HasSuffixes"), [`sqlalchemy.sql.expression.AliasedReturnsRows`](#sqlalchemy.sql.expression.AliasedReturnsRows
    "sqlalchemy.sql.expression.AliasedReturnsRows"))
  id: totrans-2877
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.expression.CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    (`sqlalchemy.sql.roles.DMLTableRole`, `sqlalchemy.sql.roles.IsCTERole`, `sqlalchemy.sql.expression.Generative`,
    [`sqlalchemy.sql.expression.HasPrefixes`](#sqlalchemy.sql.expression.HasPrefixes
    "sqlalchemy.sql.expression.HasPrefixes"), [`sqlalchemy.sql.expression.HasSuffixes`](#sqlalchemy.sql.expression.HasSuffixes
    "sqlalchemy.sql.expression.HasSuffixes"), [`sqlalchemy.sql.expression.AliasedReturnsRows`](#sqlalchemy.sql.expression.AliasedReturnsRows
    "sqlalchemy.sql.expression.AliasedReturnsRows"))
- en: '[PRE555]'
  id: totrans-2878
  prefs: []
  type: TYPE_PRE
  zh: '[PRE555]'
- en: Return an [`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    of this [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE").
  id: totrans-2879
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此 [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    的一个 [`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    。
- en: This method is a CTE-specific specialization of the [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") method.
  id: totrans-2880
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法是 [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias "sqlalchemy.sql.expression.FromClause.alias")
    方法的 CTE 特定专业化。
- en: See also
  id: totrans-2881
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using Aliases](../tutorial/data_select.html#tutorial-using-aliases)'
  id: totrans-2882
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用别名](../tutorial/data_select.html#tutorial-using-aliases)'
- en: '[`alias()`](#sqlalchemy.sql.expression.alias "sqlalchemy.sql.expression.alias")'
  id: totrans-2883
  prefs: []
  type: TYPE_NORMAL
  zh: '[`alias()`](#sqlalchemy.sql.expression.alias "sqlalchemy.sql.expression.alias")'
- en: '[PRE556]'
  id: totrans-2884
  prefs: []
  type: TYPE_PRE
  zh: '[PRE556]'
- en: Return a new [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    with a SQL `UNION` of the original CTE against the given selectables provided
    as positional arguments.
  id: totrans-2885
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的 [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    ，其中包含原始 CTE 与作为位置参数提供的给定可选项的 SQL `UNION`。
- en: 'Parameters:'
  id: totrans-2886
  prefs: []
  type: TYPE_NORMAL
  zh: '参数:'
- en: '***other** –'
  id: totrans-2887
  prefs: []
  type: TYPE_NORMAL
  zh: '***其他** –'
- en: one or more elements with which to create a UNION.
  id: totrans-2888
  prefs: []
  type: TYPE_NORMAL
  zh: 一个或多个用于创建 UNION 的元素。
- en: 'Changed in version 1.4.28: multiple elements are now accepted.'
  id: totrans-2889
  prefs: []
  type: TYPE_NORMAL
  zh: 在 1.4.28 版更改：现在接受多个元素。
- en: See also
  id: totrans-2890
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte "sqlalchemy.sql.expression.HasCTE.cte")
    - examples of calling styles'
  id: totrans-2891
  prefs: []
  type: TYPE_NORMAL
  zh: '[`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte "sqlalchemy.sql.expression.HasCTE.cte")
    - 调用样式示例'
- en: '[PRE557]'
  id: totrans-2892
  prefs: []
  type: TYPE_PRE
  zh: '[PRE557]'
- en: Return a new [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    with a SQL `UNION ALL` of the original CTE against the given selectables provided
    as positional arguments.
  id: totrans-2893
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的 [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    ，其中包含原始 CTE 与作为位置参数提供的给定可选项的 SQL `UNION ALL`。
- en: 'Parameters:'
  id: totrans-2894
  prefs: []
  type: TYPE_NORMAL
  zh: '参数:'
- en: '***other** –'
  id: totrans-2895
  prefs: []
  type: TYPE_NORMAL
  zh: '***其他** –'
- en: one or more elements with which to create a UNION.
  id: totrans-2896
  prefs: []
  type: TYPE_NORMAL
  zh: 一个或多个用于创建 UNION 的元素。
- en: 'Changed in version 1.4.28: multiple elements are now accepted.'
  id: totrans-2897
  prefs: []
  type: TYPE_NORMAL
  zh: 在 1.4.28 版更改：现在接受多个元素。
- en: See also
  id: totrans-2898
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte "sqlalchemy.sql.expression.HasCTE.cte")
    - examples of calling styles'
  id: totrans-2899
  prefs: []
  type: TYPE_NORMAL
  zh: '[`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte "sqlalchemy.sql.expression.HasCTE.cte")
    - 调用样式示例'
- en: '[PRE558]'
  id: totrans-2900
  prefs: []
  type: TYPE_PRE
  zh: '[PRE558]'
- en: Mark a [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") as supporting execution.
  id: totrans-2901
  prefs: []
  type: TYPE_NORMAL
  zh: 将一个 [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") 标记为支持执行。
- en: '[`Executable`](#sqlalchemy.sql.expression.Executable "sqlalchemy.sql.expression.Executable")
    is a superclass for all “statement” types of objects, including [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select"), [`delete()`](dml.html#sqlalchemy.sql.expression.delete
    "sqlalchemy.sql.expression.delete"), [`update()`](dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update"), [`insert()`](dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert"), [`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text").'
  id: totrans-2902
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Executable`](#sqlalchemy.sql.expression.Executable "sqlalchemy.sql.expression.Executable")
    是所有“语句”类型对象的超类，包括 [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select"),
    [`delete()`](dml.html#sqlalchemy.sql.expression.delete "sqlalchemy.sql.expression.delete"),
    [`update()`](dml.html#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update"),
    [`insert()`](dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert"),
    [`text()`](sqlelement.html#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")。'
- en: '**Members**'
  id: totrans-2903
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[execution_options()](#sqlalchemy.sql.expression.Executable.execution_options),
    [get_execution_options()](#sqlalchemy.sql.expression.Executable.get_execution_options),
    [options()](#sqlalchemy.sql.expression.Executable.options)'
  id: totrans-2904
  prefs: []
  type: TYPE_NORMAL
  zh: '[execution_options()](#sqlalchemy.sql.expression.Executable.execution_options),
    [get_execution_options()](#sqlalchemy.sql.expression.Executable.get_execution_options),
    [options()](#sqlalchemy.sql.expression.Executable.options)'
- en: '**Class signature**'
  id: totrans-2905
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.Executable`](#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable") (`sqlalchemy.sql.roles.StatementRole`)
  id: totrans-2906
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.expression.Executable`](#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable") (`sqlalchemy.sql.roles.StatementRole`)
- en: '[PRE559]'
  id: totrans-2907
  prefs: []
  type: TYPE_PRE
  zh: '[PRE559]'
- en: Set non-SQL options for the statement which take effect during execution.
  id: totrans-2908
  prefs: []
  type: TYPE_NORMAL
  zh: 设置在执行过程中生效的非SQL选项。
- en: Execution options can be set at many scopes, including per-statement, per-connection,
    or per execution, using methods such as [`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") and parameters which accept
    a dictionary of options such as [`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute") and [`Session.execute.execution_options`](../orm/session_api.html#sqlalchemy.orm.Session.execute.params.execution_options
    "sqlalchemy.orm.Session.execute").
  id: totrans-2909
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用诸如[`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")和接受选项字典的参数，如[`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute")和[`Session.execute.execution_options`](../orm/session_api.html#sqlalchemy.orm.Session.execute.params.execution_options
    "sqlalchemy.orm.Session.execute")等方法，在许多范围内设置执行选项，包括每个语句，每个连接或每次执行。
- en: The primary characteristic of an execution option, as opposed to other kinds
    of options such as ORM loader options, is that **execution options never affect
    the compiled SQL of a query, only things that affect how the SQL statement itself
    is invoked or how results are fetched**. That is, execution options are not part
    of what’s accommodated by SQL compilation nor are they considered part of the
    cached state of a statement.
  id: totrans-2910
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他类型的选项（如ORM加载器选项）相比，执行选项的主要特征在于**执行选项从不影响查询的编译SQL，而只影响SQL语句本身如何被调用或结果如何获取**。也就是说，执行选项不是SQL编译的一部分，也不被视为语句的缓存状态的一部分。
- en: 'The [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") method is [generative](../glossary.html#term-generative),
    as is the case for the method as applied to the [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") and [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") objects, which means when the method is called, a copy
    of the object is returned, which applies the given parameters to that new copy,
    but leaves the original unchanged:'
  id: totrans-2911
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") 方法是[生成器](../glossary.html#term-generative)的，就像该方法应用于[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")和[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象时一样，这意味着当调用该方法时，将返回对象的副本，该副本应用给定参数到新副本，但保留原始副本不变：'
- en: '[PRE560]'
  id: totrans-2912
  prefs: []
  type: TYPE_PRE
  zh: '[PRE560]'
- en: An exception to this behavior is the [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object, where the [`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") method is explicitly **not**
    generative.
  id: totrans-2913
  prefs: []
  type: TYPE_NORMAL
  zh: 这种行为的一个例外是[`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")对象，其中[`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")方法明确地**不**是生成器。
- en: 'The kinds of options that may be passed to [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") and other related methods
    and parameter dictionaries include parameters that are explicitly consumed by
    SQLAlchemy Core or ORM, as well as arbitrary keyword arguments not defined by
    SQLAlchemy, which means the methods and/or parameter dictionaries may be used
    for user-defined parameters that interact with custom code, which may access the
    parameters using methods such as [`Executable.get_execution_options()`](#sqlalchemy.sql.expression.Executable.get_execution_options
    "sqlalchemy.sql.expression.Executable.get_execution_options") and [`Connection.get_execution_options()`](connections.html#sqlalchemy.engine.Connection.get_execution_options
    "sqlalchemy.engine.Connection.get_execution_options"), or within selected event
    hooks using a dedicated `execution_options` event parameter such as [`ConnectionEvents.before_execute.execution_options`](events.html#sqlalchemy.events.ConnectionEvents.before_execute.params.execution_options
    "sqlalchemy.events.ConnectionEvents.before_execute") or [`ORMExecuteState.execution_options`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.execution_options
    "sqlalchemy.orm.ORMExecuteState.execution_options"), e.g.:'
  id: totrans-2914
  prefs: []
  type: TYPE_NORMAL
  zh: 可以传递给[`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")和其他相关方法和参数字典的选项种类包括被
    SQLAlchemy Core 或 ORM 明确消耗的参数，以及未被 SQLAlchemy 定义的任意关键字参数，这意味着这些方法和/或参数字典可用于与自定义代码交互的用户定义参数，可以使用诸如
    [`Executable.get_execution_options()`](#sqlalchemy.sql.expression.Executable.get_execution_options
    "sqlalchemy.sql.expression.Executable.get_execution_options") 和 [`Connection.get_execution_options()`](connections.html#sqlalchemy.engine.Connection.get_execution_options
    "sqlalchemy.engine.Connection.get_execution_options") 这样的方法访问参数，或者在选定的事件钩子中使用专用的
    `execution_options` 事件参数，例如 [`ConnectionEvents.before_execute.execution_options`](events.html#sqlalchemy.events.ConnectionEvents.before_execute.params.execution_options
    "sqlalchemy.events.ConnectionEvents.before_execute") 或 [`ORMExecuteState.execution_options`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.execution_options
    "sqlalchemy.orm.ORMExecuteState.execution_options")，例如：
- en: '[PRE561]'
  id: totrans-2915
  prefs: []
  type: TYPE_PRE
  zh: '[PRE561]'
- en: 'Within the scope of options that are explicitly recognized by SQLAlchemy, most
    apply to specific classes of objects and not others. The most common execution
    options include:'
  id: totrans-2916
  prefs: []
  type: TYPE_NORMAL
  zh: 在 SQLAlchemy 明确识别的选项范围内，大多数适用于特定类的对象而不是其他对象。最常见的执行选项包括：
- en: '[`Connection.execution_options.isolation_level`](connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") - sets the isolation level for
    a connection or a class of connections via an [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"). This option is accepted only by [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") or [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine").'
  id: totrans-2917
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.isolation_level`](connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") - 通过 [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 为连接或连接类设置隔离级别。此选项仅由 [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 或 [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 接受。'
- en: '[`Connection.execution_options.stream_results`](connections.html#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") - indicates results should be
    fetched using a server side cursor; this option is accepted by [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"), by the [`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute") parameter on [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute"), and additionally by [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") on a SQL statement object,
    as well as by ORM constructs like [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute").'
  id: totrans-2918
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.stream_results`](connections.html#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") - 指示应该使用服务器端游标获取结果；这个选项被[`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")上的[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")，[`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")参数以及SQL语句对象上的[`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")接受，以及ORM构造上的[`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")。'
- en: '[`Connection.execution_options.compiled_cache`](connections.html#sqlalchemy.engine.Connection.execution_options.params.compiled_cache
    "sqlalchemy.engine.Connection.execution_options") - indicates a dictionary that
    will serve as the [SQL compilation cache](connections.html#sql-caching) for a
    [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    or [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine"),
    as well as for ORM methods like [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute"). Can be passed as `None` to disable caching
    for statements. This option is not accepted by [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") as it is inadvisable
    to carry along a compilation cache within a statement object.'
  id: totrans-2919
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.compiled_cache`](connections.html#sqlalchemy.engine.Connection.execution_options.params.compiled_cache
    "sqlalchemy.engine.Connection.execution_options") - 指示一个字典，将作为[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")或[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")的[SQL编译缓存](connections.html#sql-caching)的服务，以及[`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")等ORM方法的缓存。可以传递为`None`来禁用语句的缓存。这个选项不被[`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")接受，因为在语句对象中携带编译缓存是不明智的。'
- en: '[`Connection.execution_options.schema_translate_map`](connections.html#sqlalchemy.engine.Connection.execution_options.params.schema_translate_map
    "sqlalchemy.engine.Connection.execution_options") - a mapping of schema names
    used by the [Schema Translate Map](connections.html#schema-translating) feature,
    accepted by [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine"),
    [`Executable`](#sqlalchemy.sql.expression.Executable "sqlalchemy.sql.expression.Executable"),
    as well as by ORM constructs like [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute").'
  id: totrans-2920
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.schema_translate_map`](connections.html#sqlalchemy.engine.Connection.execution_options.params.schema_translate_map
    "sqlalchemy.engine.Connection.execution_options") - [模式翻译映射](connections.html#schema-translating)功能使用的模式名称的映射，被[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")，[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")，[`Executable`](#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")以及ORM构造如[`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")所接受。'
- en: See also
  id: totrans-2921
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")'
  id: totrans-2922
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")'
- en: '[`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute")'
  id: totrans-2923
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute")'
- en: '[`Session.execute.execution_options`](../orm/session_api.html#sqlalchemy.orm.Session.execute.params.execution_options
    "sqlalchemy.orm.Session.execute")'
  id: totrans-2924
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.execute.execution_options`](../orm/session_api.html#sqlalchemy.orm.Session.execute.params.execution_options
    "sqlalchemy.orm.Session.execute")'
- en: '[ORM Execution Options](../orm/queryguide/api.html#orm-queryguide-execution-options)
    - documentation on all ORM-specific execution options'
  id: totrans-2925
  prefs: []
  type: TYPE_NORMAL
  zh: '[ORM执行选项](../orm/queryguide/api.html#orm-queryguide-execution-options) - 所有ORM特定执行选项的文档'
- en: '[PRE562]'
  id: totrans-2926
  prefs: []
  type: TYPE_PRE
  zh: '[PRE562]'
- en: Get the non-SQL options which will take effect during execution.
  id: totrans-2927
  prefs: []
  type: TYPE_NORMAL
  zh: 获取在执行期间生效的非SQL选项。
- en: New in version 1.3.
  id: totrans-2928
  prefs: []
  type: TYPE_NORMAL
  zh: 1.3版本中新增。
- en: See also
  id: totrans-2929
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")'
  id: totrans-2930
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")'
- en: '[PRE563]'
  id: totrans-2931
  prefs: []
  type: TYPE_PRE
  zh: '[PRE563]'
- en: Apply options to this statement.
  id: totrans-2932
  prefs: []
  type: TYPE_NORMAL
  zh: 将选项应用于此语句。
- en: In the general sense, options are any kind of Python object that can be interpreted
    by the SQL compiler for the statement. These options can be consumed by specific
    dialects or specific kinds of compilers.
  id: totrans-2933
  prefs: []
  type: TYPE_NORMAL
  zh: 从一般意义上讲，选项是可以被SQL编译器解释为语句的任何Python对象。这些选项可以被特定的方言或特定类型的编译器消耗。
- en: The most commonly known kind of option are the ORM level options that apply
    “eager load” and other loading behaviors to an ORM query. However, options can
    theoretically be used for many other purposes.
  id: totrans-2934
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的选项类型是应用“急加载”和其他加载行为到ORM查询的ORM级别选���。然而，选项理论上可以用于许多其他目的。
- en: For background on specific kinds of options for specific kinds of statements,
    refer to the documentation for those option objects.
  id: totrans-2935
  prefs: []
  type: TYPE_NORMAL
  zh: 有关特定类型语句的特定类型选项的背景，请参阅这些选项对象的文档。
- en: 'Changed in version 1.4: - added [`Executable.options()`](#sqlalchemy.sql.expression.Executable.options
    "sqlalchemy.sql.expression.Executable.options") to Core statement objects towards
    the goal of allowing unified Core / ORM querying capabilities.'
  id: totrans-2936
  prefs: []
  type: TYPE_NORMAL
  zh: 从1.4版本开始更改：- 向核心语句对象添加[`Executable.options()`](#sqlalchemy.sql.expression.Executable.options
    "sqlalchemy.sql.expression.Executable.options")，以实现统一的核心/ORM查询功能目标。
- en: See also
  id: totrans-2937
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Column Loading Options](../orm/queryguide/columns.html#loading-columns) -
    refers to options specific to the usage of ORM queries'
  id: totrans-2938
  prefs: []
  type: TYPE_NORMAL
  zh: '[列加载选项](../orm/queryguide/columns.html#loading-columns) - 指特定于ORM查询使用的选项'
- en: '[Relationship Loading with Loader Options](../orm/queryguide/relationships.html#relationship-loader-options)
    - refers to options specific to the usage of ORM queries'
  id: totrans-2939
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用加载选项加载关系](../orm/queryguide/relationships.html#relationship-loader-options)
    - 指特定于ORM查询使用的选项'
- en: '[PRE564]'
  id: totrans-2940
  prefs: []
  type: TYPE_PRE
  zh: '[PRE564]'
- en: Represent an `EXISTS` clause.
  id: totrans-2941
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一个`EXISTS`子句。
- en: See [`exists()`](#sqlalchemy.sql.expression.exists "sqlalchemy.sql.expression.exists")
    for a description of usage.
  id: totrans-2942
  prefs: []
  type: TYPE_NORMAL
  zh: 有关用法的描述，请参见[`exists()`](#sqlalchemy.sql.expression.exists "sqlalchemy.sql.expression.exists")。
- en: An `EXISTS` clause can also be constructed from a [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") instance by calling [`SelectBase.exists()`](#sqlalchemy.sql.expression.SelectBase.exists
    "sqlalchemy.sql.expression.SelectBase.exists").
  id: totrans-2943
  prefs: []
  type: TYPE_NORMAL
  zh: 通过调用[`SelectBase.exists()`](#sqlalchemy.sql.expression.SelectBase.exists "sqlalchemy.sql.expression.SelectBase.exists")，也可以从[`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")实例构建`EXISTS`子句。
- en: '**Members**'
  id: totrans-2944
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[correlate()](#sqlalchemy.sql.expression.Exists.correlate), [correlate_except()](#sqlalchemy.sql.expression.Exists.correlate_except),
    [inherit_cache](#sqlalchemy.sql.expression.Exists.inherit_cache), [select()](#sqlalchemy.sql.expression.Exists.select),
    [select_from()](#sqlalchemy.sql.expression.Exists.select_from), [where()](#sqlalchemy.sql.expression.Exists.where)'
  id: totrans-2945
  prefs: []
  type: TYPE_NORMAL
  zh: '[correlate()](#sqlalchemy.sql.expression.Exists.correlate), [correlate_except()](#sqlalchemy.sql.expression.Exists.correlate_except),
    [inherit_cache](#sqlalchemy.sql.expression.Exists.inherit_cache), [select()](#sqlalchemy.sql.expression.Exists.select),
    [select_from()](#sqlalchemy.sql.expression.Exists.select_from), [where()](#sqlalchemy.sql.expression.Exists.where)'
- en: '**Class signature**'
  id: totrans-2946
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.Exists`](#sqlalchemy.sql.expression.Exists
    "sqlalchemy.sql.expression.Exists") ([`sqlalchemy.sql.expression.UnaryExpression`](sqlelement.html#sqlalchemy.sql.expression.UnaryExpression
    "sqlalchemy.sql.expression.UnaryExpression"))
  id: totrans-2947
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.expression.Exists`](#sqlalchemy.sql.expression.Exists "sqlalchemy.sql.expression.Exists")（[`sqlalchemy.sql.expression.UnaryExpression`](sqlelement.html#sqlalchemy.sql.expression.UnaryExpression
    "sqlalchemy.sql.expression.UnaryExpression")）
- en: '[PRE565]'
  id: totrans-2948
  prefs: []
  type: TYPE_PRE
  zh: '[PRE565]'
- en: Apply correlation to the subquery noted by this [`Exists`](#sqlalchemy.sql.expression.Exists
    "sqlalchemy.sql.expression.Exists").
  id: totrans-2949
  prefs: []
  type: TYPE_NORMAL
  zh: 将相关性应用于此[`Exists`](#sqlalchemy.sql.expression.Exists "sqlalchemy.sql.expression.Exists")指定的子查询。
- en: See also
  id: totrans-2950
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`ScalarSelect.correlate()`](#sqlalchemy.sql.expression.ScalarSelect.correlate
    "sqlalchemy.sql.expression.ScalarSelect.correlate")'
  id: totrans-2951
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ScalarSelect.correlate()`](#sqlalchemy.sql.expression.ScalarSelect.correlate
    "sqlalchemy.sql.expression.ScalarSelect.correlate")'
- en: '[PRE566]'
  id: totrans-2952
  prefs: []
  type: TYPE_PRE
  zh: '[PRE566]'
- en: Apply correlation to the subquery noted by this [`Exists`](#sqlalchemy.sql.expression.Exists
    "sqlalchemy.sql.expression.Exists").
  id: totrans-2953
  prefs: []
  type: TYPE_NORMAL
  zh: 将相关性应用于此[`Exists`](#sqlalchemy.sql.expression.Exists "sqlalchemy.sql.expression.Exists")
    指示的子查询。
- en: See also
  id: totrans-2954
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ScalarSelect.correlate_except()`](#sqlalchemy.sql.expression.ScalarSelect.correlate_except
    "sqlalchemy.sql.expression.ScalarSelect.correlate_except")'
  id: totrans-2955
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ScalarSelect.correlate_except()`](#sqlalchemy.sql.expression.ScalarSelect.correlate_except
    "sqlalchemy.sql.expression.ScalarSelect.correlate_except")'
- en: '[PRE567]'
  id: totrans-2956
  prefs: []
  type: TYPE_PRE
  zh: '[PRE567]'
- en: Indicate if this [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") instance should make use of the cache
    key generation scheme used by its immediate superclass.
  id: totrans-2957
  prefs: []
  type: TYPE_NORMAL
  zh: 指示此[`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey "sqlalchemy.sql.traversals.HasCacheKey")
    实例是否应使用其直接超类使用的缓存密钥生成方案。
- en: The attribute defaults to `None`, which indicates that a construct has not yet
    taken into account whether or not its appropriate for it to participate in caching;
    this is functionally equivalent to setting the value to `False`, except that a
    warning is also emitted.
  id: totrans-2958
  prefs: []
  type: TYPE_NORMAL
  zh: 该属性默认为 `None`，表示构造尚未考虑其是否适合参与缓存；这在功能上等同于将值设置为 `False`，除了还会发出警告。
- en: This flag can be set to `True` on a particular class, if the SQL that corresponds
    to the object does not change based on attributes which are local to this class,
    and not its superclass.
  id: totrans-2959
  prefs: []
  type: TYPE_NORMAL
  zh: 如果对象对应的 SQL 不基于仅限于此类而不是其超类的属性更改，则可以在特定类上将此标志设置为 `True`。
- en: See also
  id: totrans-2960
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Enabling Caching Support for Custom Constructs](compiler.html#compilerext-caching)
    - General guideslines for setting the [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute for third-party
    or user defined SQL constructs.'
  id: totrans-2961
  prefs: []
  type: TYPE_NORMAL
  zh: '[为自定义结构启用缓存支持](compiler.html#compilerext-caching) - 为第三方或用户定义的 SQL 结构设置[`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") 属性的通用指南。'
- en: '[PRE568]'
  id: totrans-2962
  prefs: []
  type: TYPE_PRE
  zh: '[PRE568]'
- en: Return a SELECT of this [`Exists`](#sqlalchemy.sql.expression.Exists "sqlalchemy.sql.expression.Exists").
  id: totrans-2963
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此[`Exists`](#sqlalchemy.sql.expression.Exists "sqlalchemy.sql.expression.Exists")
    的 SELECT。
- en: 'e.g.:'
  id: totrans-2964
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE569]'
  id: totrans-2965
  prefs: []
  type: TYPE_PRE
  zh: '[PRE569]'
- en: 'This will produce a statement resembling:'
  id: totrans-2966
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生一个类似于的语句：
- en: '[PRE570]'
  id: totrans-2967
  prefs: []
  type: TYPE_PRE
  zh: '[PRE570]'
- en: See also
  id: totrans-2968
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    - general purpose method which allows for arbitrary column lists.'
  id: totrans-2969
  prefs: []
  type: TYPE_NORMAL
  zh: '[`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    - 允许任意列列表的通用方法。'
- en: '[PRE571]'
  id: totrans-2970
  prefs: []
  type: TYPE_PRE
  zh: '[PRE571]'
- en: Return a new [`Exists`](#sqlalchemy.sql.expression.Exists "sqlalchemy.sql.expression.Exists")
    construct, applying the given expression to the [`Select.select_from()`](#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") method of the select statement
    contained.
  id: totrans-2971
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的[`Exists`](#sqlalchemy.sql.expression.Exists "sqlalchemy.sql.expression.Exists")
    构造，将给定的表达式应用于所包含的选择语句的[`Select.select_from()`](#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") 方法。
- en: Note
  id: totrans-2972
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: it is typically preferable to build a [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") statement first, including the desired WHERE
    clause, then use the [`SelectBase.exists()`](#sqlalchemy.sql.expression.SelectBase.exists
    "sqlalchemy.sql.expression.SelectBase.exists") method to produce an [`Exists`](#sqlalchemy.sql.expression.Exists
    "sqlalchemy.sql.expression.Exists") object at once.
  id: totrans-2973
  prefs: []
  type: TYPE_NORMAL
  zh: 通常最好首先构建一个包括所需 WHERE 子句的[`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    语句，然后使用[`SelectBase.exists()`](#sqlalchemy.sql.expression.SelectBase.exists "sqlalchemy.sql.expression.SelectBase.exists")
    方法立即生成一个[`Exists`](#sqlalchemy.sql.expression.Exists "sqlalchemy.sql.expression.Exists")
    对象。
- en: '[PRE572]'
  id: totrans-2974
  prefs: []
  type: TYPE_PRE
  zh: '[PRE572]'
- en: Return a new [`exists()`](#sqlalchemy.sql.expression.exists "sqlalchemy.sql.expression.exists")
    construct with the given expression added to its WHERE clause, joined to the existing
    clause via AND, if any.
  id: totrans-2975
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的[`exists()`](#sqlalchemy.sql.expression.exists "sqlalchemy.sql.expression.exists")
    构造，将给定的表达式添加到其 WHERE 子句中，并通过 AND 连接到现有子句中（如果有）。
- en: Note
  id: totrans-2976
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: it is typically preferable to build a [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") statement first, including the desired WHERE
    clause, then use the [`SelectBase.exists()`](#sqlalchemy.sql.expression.SelectBase.exists
    "sqlalchemy.sql.expression.SelectBase.exists") method to produce an [`Exists`](#sqlalchemy.sql.expression.Exists
    "sqlalchemy.sql.expression.Exists") object at once.
  id: totrans-2977
  prefs: []
  type: TYPE_NORMAL
  zh: 通常最好先构建一个包括所需的WHERE子句的[`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")语句，然后使用[`SelectBase.exists()`](#sqlalchemy.sql.expression.SelectBase.exists
    "sqlalchemy.sql.expression.SelectBase.exists")方法一次性生成一个[`Exists`](#sqlalchemy.sql.expression.Exists
    "sqlalchemy.sql.expression.Exists")对象。
- en: '[PRE573]'
  id: totrans-2978
  prefs: []
  type: TYPE_PRE
  zh: '[PRE573]'
- en: Represent an element that can be used within the `FROM` clause of a `SELECT`
    statement.
  id: totrans-2979
  prefs: []
  type: TYPE_NORMAL
  zh: 代表一个可在`SELECT`语句的`FROM`子句中使用的元素。
- en: 'The most common forms of [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") are the [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") and the [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs. Key features common to all [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") objects include:'
  id: totrans-2980
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")的最常见形式是[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")和[`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")构造。所有[`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")对象共有的关键特征包括：'
- en: a [`c`](#sqlalchemy.sql.expression.FromClause.c "sqlalchemy.sql.expression.FromClause.c")
    collection, which provides per-name access to a collection of [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") objects.
  id: totrans-2981
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个[`c`](#sqlalchemy.sql.expression.FromClause.c "sqlalchemy.sql.expression.FromClause.c")集合，提供对[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")对象集合的按名称访问。
- en: a [`primary_key`](#sqlalchemy.sql.expression.FromClause.primary_key "sqlalchemy.sql.expression.FromClause.primary_key")
    attribute, which is a collection of all those [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") objects that indicate the `primary_key`
    flag.
  id: totrans-2982
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个[`primary_key`](#sqlalchemy.sql.expression.FromClause.primary_key "sqlalchemy.sql.expression.FromClause.primary_key")属性，它是指示`primary_key`标志的所有[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")对象的集合。
- en: Methods to generate various derivations of a “from” clause, including [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias"), [`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join"), [`FromClause.select()`](#sqlalchemy.sql.expression.FromClause.select
    "sqlalchemy.sql.expression.FromClause.select").
  id: totrans-2983
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成“from”子句的各种派生方法，包括[`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias")，[`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join")，[`FromClause.select()`](#sqlalchemy.sql.expression.FromClause.select
    "sqlalchemy.sql.expression.FromClause.select")。
- en: '**Members**'
  id: totrans-2984
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[alias()](#sqlalchemy.sql.expression.FromClause.alias), [c](#sqlalchemy.sql.expression.FromClause.c),
    [columns](#sqlalchemy.sql.expression.FromClause.columns), [description](#sqlalchemy.sql.expression.FromClause.description),
    [entity_namespace](#sqlalchemy.sql.expression.FromClause.entity_namespace), [exported_columns](#sqlalchemy.sql.expression.FromClause.exported_columns),
    [foreign_keys](#sqlalchemy.sql.expression.FromClause.foreign_keys), [is_derived_from()](#sqlalchemy.sql.expression.FromClause.is_derived_from),
    [join()](#sqlalchemy.sql.expression.FromClause.join), [outerjoin()](#sqlalchemy.sql.expression.FromClause.outerjoin),
    [primary_key](#sqlalchemy.sql.expression.FromClause.primary_key), [schema](#sqlalchemy.sql.expression.FromClause.schema),
    [select()](#sqlalchemy.sql.expression.FromClause.select), [tablesample()](#sqlalchemy.sql.expression.FromClause.tablesample)'
  id: totrans-2985
  prefs: []
  type: TYPE_NORMAL
  zh: '[alias()](#sqlalchemy.sql.expression.FromClause.alias)，[c](#sqlalchemy.sql.expression.FromClause.c)，[columns](#sqlalchemy.sql.expression.FromClause.columns)，[description](#sqlalchemy.sql.expression.FromClause.description)，[entity_namespace](#sqlalchemy.sql.expression.FromClause.entity_namespace)，[exported_columns](#sqlalchemy.sql.expression.FromClause.exported_columns)，[foreign_keys](#sqlalchemy.sql.expression.FromClause.foreign_keys)，[is_derived_from()](#sqlalchemy.sql.expression.FromClause.is_derived_from)，[join()](#sqlalchemy.sql.expression.FromClause.join)，[outerjoin()](#sqlalchemy.sql.expression.FromClause.outerjoin)，[primary_key](#sqlalchemy.sql.expression.FromClause.primary_key)，[schema](#sqlalchemy.sql.expression.FromClause.schema)，[select()](#sqlalchemy.sql.expression.FromClause.select)，[tablesample()](#sqlalchemy.sql.expression.FromClause.tablesample)'
- en: '**Class signature**'
  id: totrans-2986
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") (`sqlalchemy.sql.roles.AnonymizedFromClauseRole`,
    [`sqlalchemy.sql.expression.Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable"))
  id: totrans-2987
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.expression.FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")（`sqlalchemy.sql.roles.AnonymizedFromClauseRole`，[`sqlalchemy.sql.expression.Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")）。
- en: '[PRE574]'
  id: totrans-2988
  prefs: []
  type: TYPE_PRE
  zh: '[PRE574]'
- en: Return an alias of this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-2989
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此[`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")的别名。
- en: 'E.g.:'
  id: totrans-2990
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE575]'
  id: totrans-2991
  prefs: []
  type: TYPE_PRE
  zh: '[PRE575]'
- en: The above code creates an [`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    object which can be used as a FROM clause in any SELECT statement.
  id: totrans-2992
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码创建了一个[`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")对象，可用作任何SELECT语句中的FROM子句。
- en: See also
  id: totrans-2993
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using Aliases](../tutorial/data_select.html#tutorial-using-aliases)'
  id: totrans-2994
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用别名](../tutorial/data_select.html#tutorial-using-aliases)'
- en: '[`alias()`](#sqlalchemy.sql.expression.alias "sqlalchemy.sql.expression.alias")'
  id: totrans-2995
  prefs: []
  type: TYPE_NORMAL
  zh: '[`alias()`](#sqlalchemy.sql.expression.alias "sqlalchemy.sql.expression.alias")'
- en: '[PRE576]'
  id: totrans-2996
  prefs: []
  type: TYPE_PRE
  zh: '[PRE576]'
- en: A synonym for [`FromClause.columns`](#sqlalchemy.sql.expression.FromClause.columns
    "sqlalchemy.sql.expression.FromClause.columns")
  id: totrans-2997
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FromClause.columns`](#sqlalchemy.sql.expression.FromClause.columns "sqlalchemy.sql.expression.FromClause.columns")的同义词。'
- en: 'Returns:'
  id: totrans-2998
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")
  id: totrans-2999
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")。
- en: '[PRE577]'
  id: totrans-3000
  prefs: []
  type: TYPE_PRE
  zh: '[PRE577]'
- en: A named-based collection of [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") objects maintained by this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-3001
  prefs: []
  type: TYPE_NORMAL
  zh: 由此[`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")维护的[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")对象的基于名称的集合。
- en: 'The [`columns`](#sqlalchemy.sql.expression.FromClause.columns "sqlalchemy.sql.expression.FromClause.columns"),
    or [`c`](#sqlalchemy.sql.expression.FromClause.c "sqlalchemy.sql.expression.FromClause.c")
    collection, is the gateway to the construction of SQL expressions using table-bound
    or other selectable-bound columns:'
  id: totrans-3002
  prefs: []
  type: TYPE_NORMAL
  zh: '[`columns`](#sqlalchemy.sql.expression.FromClause.columns "sqlalchemy.sql.expression.FromClause.columns")或[`c`](#sqlalchemy.sql.expression.FromClause.c
    "sqlalchemy.sql.expression.FromClause.c")集合是使用绑定表或其他可选择列构建SQL表达式的入口：'
- en: '[PRE578]'
  id: totrans-3003
  prefs: []
  type: TYPE_PRE
  zh: '[PRE578]'
- en: 'Returns:'
  id: totrans-3004
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") object.
  id: totrans-3005
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")对象。
- en: '[PRE579]'
  id: totrans-3006
  prefs: []
  type: TYPE_PRE
  zh: '[PRE579]'
- en: A brief description of this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-3007
  prefs: []
  type: TYPE_NORMAL
  zh: 这是[`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")的简要描述。
- en: Used primarily for error message formatting.
  id: totrans-3008
  prefs: []
  type: TYPE_NORMAL
  zh: 主要用于错误消息格式化。
- en: '[PRE580]'
  id: totrans-3009
  prefs: []
  type: TYPE_PRE
  zh: '[PRE580]'
- en: Return a namespace used for name-based access in SQL expressions.
  id: totrans-3010
  prefs: []
  type: TYPE_NORMAL
  zh: 返回用于在SQL表达式中基于名称访问的命名空间。
- en: 'This is the namespace that is used to resolve “filter_by()” type expressions,
    such as:'
  id: totrans-3011
  prefs: []
  type: TYPE_NORMAL
  zh: 这是用于解析“filter_by()”类型表达式的命名空间，例如：
- en: '[PRE581]'
  id: totrans-3012
  prefs: []
  type: TYPE_PRE
  zh: '[PRE581]'
- en: It defaults to the `.c` collection, however internally it can be overridden
    using the “entity_namespace” annotation to deliver alternative results.
  id: totrans-3013
  prefs: []
  type: TYPE_NORMAL
  zh: 默认为`.c`集合，但在内部可以使用“entity_namespace”注释进行覆盖，以提供替代结果。
- en: '[PRE582]'
  id: totrans-3014
  prefs: []
  type: TYPE_PRE
  zh: '[PRE582]'
- en: A [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") that represents the “exported” columns
    of this [`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable").
  id: totrans-3015
  prefs: []
  type: TYPE_NORMAL
  zh: 代表此[`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable")的“导出”列的[`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")。
- en: The “exported” columns for a [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") object are synonymous with the [`FromClause.columns`](#sqlalchemy.sql.expression.FromClause.columns
    "sqlalchemy.sql.expression.FromClause.columns") collection.
  id: totrans-3016
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")对象的“导出”列与[`FromClause.columns`](#sqlalchemy.sql.expression.FromClause.columns
    "sqlalchemy.sql.expression.FromClause.columns")集合是同义词。'
- en: New in version 1.4.
  id: totrans-3017
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4中的新功能。
- en: See also
  id: totrans-3018
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns")'
  id: totrans-3019
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns")'
- en: '[`SelectBase.exported_columns`](#sqlalchemy.sql.expression.SelectBase.exported_columns
    "sqlalchemy.sql.expression.SelectBase.exported_columns")'
  id: totrans-3020
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SelectBase.exported_columns`](#sqlalchemy.sql.expression.SelectBase.exported_columns
    "sqlalchemy.sql.expression.SelectBase.exported_columns")'
- en: '[PRE583]'
  id: totrans-3021
  prefs: []
  type: TYPE_PRE
  zh: '[PRE583]'
- en: Return the collection of [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") marker objects which this FromClause references.
  id: totrans-3022
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此FromClause引用的[`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey")标记对象的集合。
- en: Each [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    is a member of a [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")-wide
    [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint").
  id: totrans-3023
  prefs: []
  type: TYPE_NORMAL
  zh: 每个[`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")都是一个[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")范围内的[`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")的成员。
- en: See also
  id: totrans-3024
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Table.foreign_key_constraints`](metadata.html#sqlalchemy.schema.Table.foreign_key_constraints
    "sqlalchemy.schema.Table.foreign_key_constraints")'
  id: totrans-3025
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Table.foreign_key_constraints`](metadata.html#sqlalchemy.schema.Table.foreign_key_constraints
    "sqlalchemy.schema.Table.foreign_key_constraints")'
- en: '[PRE584]'
  id: totrans-3026
  prefs: []
  type: TYPE_PRE
  zh: '[PRE584]'
- en: Return `True` if this [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    is ‘derived’ from the given `FromClause`.
  id: totrans-3027
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此[`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")是从给定的`FromClause`‘派生’，则返回`True`。
- en: An example would be an Alias of a Table is derived from that Table.
  id: totrans-3028
  prefs: []
  type: TYPE_NORMAL
  zh: 一个示例是一个表的别名是从该表派生的。
- en: '[PRE585]'
  id: totrans-3029
  prefs: []
  type: TYPE_PRE
  zh: '[PRE585]'
- en: Return a [`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    from this [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    to another [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause").
  id: totrans-3030
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个[`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")返回到另一个带有“isouter”标志设置为True的[`Join`](#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join")。
- en: 'E.g.:'
  id: totrans-3031
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE586]'
  id: totrans-3032
  prefs: []
  type: TYPE_PRE
  zh: '[PRE586]'
- en: 'would emit SQL along the lines of:'
  id: totrans-3033
  prefs: []
  type: TYPE_NORMAL
  zh: 将会生成类似以下的SQL：
- en: '[PRE587]'
  id: totrans-3034
  prefs: []
  type: TYPE_PRE
  zh: '[PRE587]'
- en: 'Parameters:'
  id: totrans-3035
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`right` – the right side of the join; this is any [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") object such as a [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object, and may also be a selectable-compatible object
    such as an ORM-mapped class.'
  id: totrans-3036
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`right` – 连接的右侧；这是任何[`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")对象，如一个[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象，也可以是一个可选择兼容的对象，如ORM映射类。'
- en: '`onclause` – a SQL expression representing the ON clause of the join. If left
    at `None`, [`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join "sqlalchemy.sql.expression.FromClause.join")
    will attempt to join the two tables based on a foreign key relationship.'
  id: totrans-3037
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onclause` – 代表连接的ON子句的SQL表达式。如果保持为`None`，[`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join")将尝试基于外键关系连接这两个表。'
- en: '`isouter` – if True, render a LEFT OUTER JOIN, instead of JOIN.'
  id: totrans-3038
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isouter` – 如果为True，则渲染LEFT OUTER JOIN，而不是JOIN。'
- en: '`full` – if True, render a FULL OUTER JOIN, instead of LEFT OUTER JOIN. Implies
    [`FromClause.join.isouter`](#sqlalchemy.sql.expression.FromClause.join.params.isouter
    "sqlalchemy.sql.expression.FromClause.join").'
  id: totrans-3039
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`full` – 如果为True，则渲染FULL OUTER JOIN，而不是LEFT OUTER JOIN。意味着[`FromClause.join.isouter`](#sqlalchemy.sql.expression.FromClause.join.params.isouter
    "sqlalchemy.sql.expression.FromClause.join")。'
- en: See also
  id: totrans-3040
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`join()`](#sqlalchemy.sql.expression.join "sqlalchemy.sql.expression.join")
    - standalone function'
  id: totrans-3041
  prefs: []
  type: TYPE_NORMAL
  zh: '[`join()`](#sqlalchemy.sql.expression.join "sqlalchemy.sql.expression.join")
    - 独立函数'
- en: '[`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    - the type of object produced'
  id: totrans-3042
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    - 生成的对象类型'
- en: '[PRE588]'
  id: totrans-3043
  prefs: []
  type: TYPE_PRE
  zh: '[PRE588]'
- en: Return a [`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    from this [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    to another [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause"),
    with the “isouter” flag set to True.
  id: totrans-3044
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个[`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")返回到另一个带有“isouter”标志设置为True的[`Join`](#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join")。
- en: 'E.g.:'
  id: totrans-3045
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE589]'
  id: totrans-3046
  prefs: []
  type: TYPE_PRE
  zh: '[PRE589]'
- en: 'The above is equivalent to:'
  id: totrans-3047
  prefs: []
  type: TYPE_NORMAL
  zh: 以上等同于：
- en: '[PRE590]'
  id: totrans-3048
  prefs: []
  type: TYPE_PRE
  zh: '[PRE590]'
- en: 'Parameters:'
  id: totrans-3049
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`right` – the right side of the join; this is any [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") object such as a [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object, and may also be a selectable-compatible object
    such as an ORM-mapped class.'
  id: totrans-3050
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`right` – 连接的右侧；这是任何[`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")对象，如[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象，也可以是ORM映射类等可选择兼容对象。'
- en: '`onclause` – a SQL expression representing the ON clause of the join. If left
    at `None`, [`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join "sqlalchemy.sql.expression.FromClause.join")
    will attempt to join the two tables based on a foreign key relationship.'
  id: totrans-3051
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onclause` – 表示连接的ON子句的SQL表达式。如果保持为`None`，[`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join")将尝试基于外键关系连接这两个表。'
- en: '`full` – if True, render a FULL OUTER JOIN, instead of LEFT OUTER JOIN.'
  id: totrans-3052
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`full` – 如果为True，则渲染FULL OUTER JOIN，而不是LEFT OUTER JOIN。'
- en: See also
  id: totrans-3053
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join "sqlalchemy.sql.expression.FromClause.join")'
  id: totrans-3054
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join "sqlalchemy.sql.expression.FromClause.join")'
- en: '[`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")'
  id: totrans-3055
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")'
- en: '[PRE591]'
  id: totrans-3056
  prefs: []
  type: TYPE_PRE
  zh: '[PRE591]'
- en: Return the iterable collection of [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects which comprise the primary key of this `_selectable.FromClause`.
  id: totrans-3057
  prefs: []
  type: TYPE_NORMAL
  zh: 返回由此`_selectable.FromClause`的主键组成的[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象的可迭代集合。
- en: For a [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object, this collection is represented by the [`PrimaryKeyConstraint`](constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") which itself is an iterable collection
    of [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    objects.
  id: totrans-3058
  prefs: []
  type: TYPE_NORMAL
  zh: 对于[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象，这个集合由[`PrimaryKeyConstraint`](constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint")表示，它本身是一个[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象的可迭代集合。
- en: '[PRE592]'
  id: totrans-3059
  prefs: []
  type: TYPE_PRE
  zh: '[PRE592]'
- en: Define the ‘schema’ attribute for this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-3060
  prefs: []
  type: TYPE_NORMAL
  zh: 为此[`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")定义‘schema’属性。
- en: This is typically `None` for most objects except that of [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), where it is taken as the value of the [`Table.schema`](metadata.html#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table") argument.
  id: totrans-3061
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大多数对象来说，这通常是`None`，除了[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象，其中它被视为[`Table.schema`](metadata.html#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table")参数的值。
- en: '[PRE593]'
  id: totrans-3062
  prefs: []
  type: TYPE_PRE
  zh: '[PRE593]'
- en: Return a SELECT of this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-3063
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此[`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")的SELECT。
- en: 'e.g.:'
  id: totrans-3064
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE594]'
  id: totrans-3065
  prefs: []
  type: TYPE_PRE
  zh: '[PRE594]'
- en: See also
  id: totrans-3066
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    - general purpose method which allows for arbitrary column lists.'
  id: totrans-3067
  prefs: []
  type: TYPE_NORMAL
  zh: '[`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    - 允许任意列列表的通用方法。'
- en: '[PRE595]'
  id: totrans-3068
  prefs: []
  type: TYPE_PRE
  zh: '[PRE595]'
- en: Return a TABLESAMPLE alias of this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-3069
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此[`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")的TABLESAMPLE别名。
- en: The return value is the [`TableSample`](#sqlalchemy.sql.expression.TableSample
    "sqlalchemy.sql.expression.TableSample") construct also provided by the top-level
    [`tablesample()`](#sqlalchemy.sql.expression.tablesample "sqlalchemy.sql.expression.tablesample")
    function.
  id: totrans-3070
  prefs: []
  type: TYPE_NORMAL
  zh: 返回值是顶层[`tablesample()`](#sqlalchemy.sql.expression.tablesample "sqlalchemy.sql.expression.tablesample")函数提供的[`TableSample`](#sqlalchemy.sql.expression.TableSample
    "sqlalchemy.sql.expression.TableSample")构造。
- en: See also
  id: totrans-3071
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`tablesample()`](#sqlalchemy.sql.expression.tablesample "sqlalchemy.sql.expression.tablesample")
    - usage guidelines and parameters'
  id: totrans-3072
  prefs: []
  type: TYPE_NORMAL
  zh: '[`tablesample()`](#sqlalchemy.sql.expression.tablesample "sqlalchemy.sql.expression.tablesample")
    - 用法指南和参数'
- en: '[PRE596]'
  id: totrans-3073
  prefs: []
  type: TYPE_PRE
  zh: '[PRE596]'
- en: Base class for SELECT statements where additional elements can be added.
  id: totrans-3074
  prefs: []
  type: TYPE_NORMAL
  zh: SELECT语句的基类，可以添加额外的元素。
- en: This serves as the base for [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    and [`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect "sqlalchemy.sql.expression.CompoundSelect")
    where elements such as ORDER BY, GROUP BY can be added and column rendering can
    be controlled. Compare to [`TextualSelect`](#sqlalchemy.sql.expression.TextualSelect
    "sqlalchemy.sql.expression.TextualSelect"), which, while it subclasses [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase") and is also a SELECT construct, represents
    a fixed textual string which cannot be altered at this level, only wrapped as
    a subquery.
  id: totrans-3075
  prefs: []
  type: TYPE_NORMAL
  zh: 这用作 [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    和 [`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect "sqlalchemy.sql.expression.CompoundSelect")
    的基础，其中可以添加诸如 ORDER BY、GROUP BY 等元素，并且可以控制列的呈现。与 [`TextualSelect`](#sqlalchemy.sql.expression.TextualSelect
    "sqlalchemy.sql.expression.TextualSelect") 相比，它虽然是 [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase") 的子类，也是一个 SELECT 构造，但代表一个固定的文本字符串，在这个级别无法更改，只能作为子查询包装。
- en: '**Members**'
  id: totrans-3076
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[fetch()](#sqlalchemy.sql.expression.GenerativeSelect.fetch), [get_label_style()](#sqlalchemy.sql.expression.GenerativeSelect.get_label_style),
    [group_by()](#sqlalchemy.sql.expression.GenerativeSelect.group_by), [limit()](#sqlalchemy.sql.expression.GenerativeSelect.limit),
    [offset()](#sqlalchemy.sql.expression.GenerativeSelect.offset), [order_by()](#sqlalchemy.sql.expression.GenerativeSelect.order_by),
    [set_label_style()](#sqlalchemy.sql.expression.GenerativeSelect.set_label_style),
    [slice()](#sqlalchemy.sql.expression.GenerativeSelect.slice), [with_for_update()](#sqlalchemy.sql.expression.GenerativeSelect.with_for_update)'
  id: totrans-3077
  prefs: []
  type: TYPE_NORMAL
  zh: '[fetch()](#sqlalchemy.sql.expression.GenerativeSelect.fetch), [get_label_style()](#sqlalchemy.sql.expression.GenerativeSelect.get_label_style),
    [group_by()](#sqlalchemy.sql.expression.GenerativeSelect.group_by), [limit()](#sqlalchemy.sql.expression.GenerativeSelect.limit),
    [offset()](#sqlalchemy.sql.expression.GenerativeSelect.offset), [order_by()](#sqlalchemy.sql.expression.GenerativeSelect.order_by),
    [set_label_style()](#sqlalchemy.sql.expression.GenerativeSelect.set_label_style),
    [slice()](#sqlalchemy.sql.expression.GenerativeSelect.slice), [with_for_update()](#sqlalchemy.sql.expression.GenerativeSelect.with_for_update)'
- en: '**Class signature**'
  id: totrans-3078
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect") ([`sqlalchemy.sql.expression.SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase"), `sqlalchemy.sql.expression.Generative`)
  id: totrans-3079
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.expression.GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")（[`sqlalchemy.sql.expression.SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")，`sqlalchemy.sql.expression.Generative`）
- en: '[PRE597]'
  id: totrans-3080
  prefs: []
  type: TYPE_PRE
  zh: '[PRE597]'
- en: Return a new selectable with the given FETCH FIRST criterion applied.
  id: totrans-3081
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个应用了给定 FETCH FIRST 准则的新可选择项。
- en: This is a numeric value which usually renders as `FETCH {FIRST | NEXT} [ count
    ] {ROW | ROWS} {ONLY | WITH TIES}` expression in the resulting select. This functionality
    is is currently implemented for Oracle, PostgreSQL, MSSQL.
  id: totrans-3082
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个数值，通常在结果选择中呈现为 `FETCH {FIRST | NEXT} [ count ] {ROW | ROWS} {ONLY | WITH
    TIES}` 表达式。此功能目前已为 Oracle、PostgreSQL、MSSQL 实现。
- en: Use [`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset") to specify the offset.
  id: totrans-3083
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset") 来指定偏移量。
- en: Note
  id: totrans-3084
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The [`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch") method will replace any clause
    applied with [`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit").
  id: totrans-3085
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch") 方法将替换任何应用的子句，使用 [`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit")。'
- en: New in version 1.4.
  id: totrans-3086
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中新增。
- en: 'Parameters:'
  id: totrans-3087
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`count` – an integer COUNT parameter, or a SQL expression that provides an
    integer result. When `percent=True` this will represent the percentage of rows
    to return, not the absolute value. Pass `None` to reset it.'
  id: totrans-3088
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`count` – 一个整数 COUNT 参数，或者提供整数结果的 SQL 表达式。当 `percent=True` 时，这将表示要返回的行数的百分比，而不是绝对值。传递
    `None` 来重置它。'
- en: '`with_ties` – When `True`, the WITH TIES option is used to return any additional
    rows that tie for the last place in the result set according to the `ORDER BY`
    clause. The `ORDER BY` may be mandatory in this case. Defaults to `False`'
  id: totrans-3089
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`with_ties` – 当为 `True` 时，使用 WITH TIES 选项返回任何与结果集中最后位置并列的额外行，根据 `ORDER BY`
    子句。在这种情况下，`ORDER BY` 可能是强制性的。默认为 `False`'
- en: '`percent` – When `True`, `count` represents the percentage of the total number
    of selected rows to return. Defaults to `False`'
  id: totrans-3090
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`percent` – 当为 `True` 时，`count` 表示要返回的选定行总数的百分比。默认为 `False`。'
- en: See also
  id: totrans-3091
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit")'
  id: totrans-3092
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit")'
- en: '[`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset")'
  id: totrans-3093
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset")'
- en: '[PRE598]'
  id: totrans-3094
  prefs: []
  type: TYPE_PRE
  zh: '[PRE598]'
- en: Retrieve the current label style.
  id: totrans-3095
  prefs: []
  type: TYPE_NORMAL
  zh: 检索当前标签样式。
- en: New in version 1.4.
  id: totrans-3096
  prefs: []
  type: TYPE_NORMAL
  zh: 自 1.4 版本新功能。
- en: '[PRE599]'
  id: totrans-3097
  prefs: []
  type: TYPE_PRE
  zh: '[PRE599]'
- en: Return a new selectable with the given list of GROUP BY criterion applied.
  id: totrans-3098
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个应用了给定 GROUP BY 条件列表的新可选择对象。
- en: All existing GROUP BY settings can be suppressed by passing `None`.
  id: totrans-3099
  prefs: []
  type: TYPE_NORMAL
  zh: 通过传递 `None`，可以取消所有现有的 GROUP BY 设置。
- en: 'e.g.:'
  id: totrans-3100
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE600]'
  id: totrans-3101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE600]'
- en: 'Parameters:'
  id: totrans-3102
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '***clauses** – a series of [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") constructs which will be used to generate
    an GROUP BY clause.'
  id: totrans-3103
  prefs: []
  type: TYPE_NORMAL
  zh: '***clauses** – 一系列将用于生成 GROUP BY 子句的 [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") 构造。'
- en: See also
  id: totrans-3104
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Aggregate functions with GROUP BY / HAVING](../tutorial/data_select.html#tutorial-group-by-w-aggregates)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-3105
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 GROUP BY / HAVING 的聚合函数](../tutorial/data_select.html#tutorial-group-by-w-aggregates)
    - 在 [SQLAlchemy 统一教程](../tutorial/index.html#unified-tutorial) 中'
- en: '[Ordering or Grouping by a Label](../tutorial/data_select.html#tutorial-order-by-label)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-3106
  prefs: []
  type: TYPE_NORMAL
  zh: '[按标签排序或分组](../tutorial/data_select.html#tutorial-order-by-label) - 在 [SQLAlchemy
    统一教程](../tutorial/index.html#unified-tutorial) 中'
- en: '[PRE601]'
  id: totrans-3107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE601]'
- en: Return a new selectable with the given LIMIT criterion applied.
  id: totrans-3108
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个应用了给定 LIMIT 条件的新可选择对象。
- en: This is a numerical value which usually renders as a `LIMIT` expression in the
    resulting select. Backends that don’t support `LIMIT` will attempt to provide
    similar functionality.
  id: totrans-3109
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个数值，通常在结果选择中呈现为 `LIMIT` 表达式。不支持 `LIMIT` 的后端将尝试提供类似的功能。
- en: Note
  id: totrans-3110
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The [`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit") method will replace any clause
    applied with [`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch").
  id: totrans-3111
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit") 方法将替换任何应用了 [`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch") 的子句。'
- en: 'Parameters:'
  id: totrans-3112
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**limit** – an integer LIMIT parameter, or a SQL expression that provides an
    integer result. Pass `None` to reset it.'
  id: totrans-3113
  prefs: []
  type: TYPE_NORMAL
  zh: '**limit** – 一个整数的 LIMIT 参数，或者提供整数结果的 SQL 表达式。传递 `None` 来重置它。'
- en: See also
  id: totrans-3114
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch")'
  id: totrans-3115
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch")'
- en: '[`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset")'
  id: totrans-3116
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset")'
- en: '[PRE602]'
  id: totrans-3117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE602]'
- en: Return a new selectable with the given OFFSET criterion applied.
  id: totrans-3118
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个应用了给定 OFFSET 条件的新可选择对象。
- en: This is a numeric value which usually renders as an `OFFSET` expression in the
    resulting select. Backends that don’t support `OFFSET` will attempt to provide
    similar functionality.
  id: totrans-3119
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个数值，通常在结果选择中呈现为 `OFFSET` 表达式。不支持 `OFFSET` 的后端将尝试提供类似的功能。
- en: 'Parameters:'
  id: totrans-3120
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**offset** – an integer OFFSET parameter, or a SQL expression that provides
    an integer result. Pass `None` to reset it.'
  id: totrans-3121
  prefs: []
  type: TYPE_NORMAL
  zh: '**offset** – 一个整数的 OFFSET 参数，或者提供整数结果的 SQL 表达式。传递 `None` 来重置它。'
- en: See also
  id: totrans-3122
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit")'
  id: totrans-3123
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit")'
- en: '[`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch")'
  id: totrans-3124
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch")'
- en: '[PRE603]'
  id: totrans-3125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE603]'
- en: Return a new selectable with the given list of ORDER BY criteria applied.
  id: totrans-3126
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个应用了给定 ORDER BY 条件列表的新可选择对象。
- en: 'e.g.:'
  id: totrans-3127
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE604]'
  id: totrans-3128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE604]'
- en: 'Calling this method multiple times is equivalent to calling it once with all
    the clauses concatenated. All existing ORDER BY criteria may be cancelled by passing
    `None` by itself. New ORDER BY criteria may then be added by invoking [`Query.order_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.order_by
    "sqlalchemy.orm.Query.order_by") again, e.g.:'
  id: totrans-3129
  prefs: []
  type: TYPE_NORMAL
  zh: 多次调用此方法等效于将所有子句连接一次。通过仅传递 `None` 可取消所有现有的 ORDER BY 标准。然后，可以通过再次调用 [`Query.order_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.order_by
    "sqlalchemy.orm.Query.order_by") 来添加新的 ORDER BY 标准，例如：
- en: '[PRE605]'
  id: totrans-3130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE605]'
- en: 'Parameters:'
  id: totrans-3131
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '***clauses** – a series of [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") constructs which will be used to generate
    an ORDER BY clause.'
  id: totrans-3132
  prefs: []
  type: TYPE_NORMAL
  zh: '***clauses** – 一系列用于生成 ORDER BY 子句的[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")构造。'
- en: See also
  id: totrans-3133
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[ORDER BY](../tutorial/data_select.html#tutorial-order-by) - in the [SQLAlchemy
    Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-3134
  prefs: []
  type: TYPE_NORMAL
  zh: '[ORDER BY](../tutorial/data_select.html#tutorial-order-by) - 在[SQLAlchemy 统一教程](../tutorial/index.html#unified-tutorial)中'
- en: '[Ordering or Grouping by a Label](../tutorial/data_select.html#tutorial-order-by-label)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-3135
  prefs: []
  type: TYPE_NORMAL
  zh: '[按标签排序或分组](../tutorial/data_select.html#tutorial-order-by-label) - 在[SQLAlchemy
    统一教程](../tutorial/index.html#unified-tutorial)中'
- en: '[PRE606]'
  id: totrans-3136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE606]'
- en: Return a new selectable with the specified label style.
  id: totrans-3137
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个具有指定标签样式的新可选择项。
- en: There are three “label styles” available, [`SelectLabelStyle.LABEL_STYLE_DISAMBIGUATE_ONLY`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_DISAMBIGUATE_ONLY
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_DISAMBIGUATE_ONLY"), [`SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL"),
    and [`SelectLabelStyle.LABEL_STYLE_NONE`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_NONE
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_NONE"). The default style
    is [`SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL").
  id: totrans-3138
  prefs: []
  type: TYPE_NORMAL
  zh: 有三种可用的“标签样式”，分别是[`SelectLabelStyle.LABEL_STYLE_DISAMBIGUATE_ONLY`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_DISAMBIGUATE_ONLY
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_DISAMBIGUATE_ONLY")、[`SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL")和[`SelectLabelStyle.LABEL_STYLE_NONE`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_NONE
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_NONE")。默认样式是[`SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL")。
- en: In modern SQLAlchemy, there is not generally a need to change the labeling style,
    as per-expression labels are more effectively used by making use of the [`ColumnElement.label()`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.label
    "sqlalchemy.sql.expression.ColumnElement.label") method. In past versions, `LABEL_STYLE_TABLENAME_PLUS_COL`
    was used to disambiguate same-named columns from different tables, aliases, or
    subqueries; the newer `LABEL_STYLE_DISAMBIGUATE_ONLY` now applies labels only
    to names that conflict with an existing name so that the impact of this labeling
    is minimal.
  id: totrans-3139
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代 SQLAlchemy 中，通常不需要更改标签样式，因为通过使用 [`ColumnElement.label()`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.label
    "sqlalchemy.sql.expression.ColumnElement.label") 方法更有效地使用按表达式标记。在过去的版本中，`LABEL_STYLE_TABLENAME_PLUS_COL`
    用于消除来自不同表、别名或子查询的同名列；较新的 `LABEL_STYLE_DISAMBIGUATE_ONLY` 现在仅对与现有名称冲突的名称应用标签，因此此标记的影响是最小的。
- en: The rationale for disambiguation is mostly so that all column expressions are
    available from a given [`FromClause.c`](#sqlalchemy.sql.expression.FromClause.c
    "sqlalchemy.sql.expression.FromClause.c") collection when a subquery is created.
  id: totrans-3140
  prefs: []
  type: TYPE_NORMAL
  zh: 正确性歧义的原因主要是当创建子查询时，所有列表达式都可以从给定的[`FromClause.c`](#sqlalchemy.sql.expression.FromClause.c
    "sqlalchemy.sql.expression.FromClause.c")集合中使用。
- en: 'New in version 1.4: - the [`GenerativeSelect.set_label_style()`](#sqlalchemy.sql.expression.GenerativeSelect.set_label_style
    "sqlalchemy.sql.expression.GenerativeSelect.set_label_style") method replaces
    the previous combination of `.apply_labels()`, `.with_labels()` and `use_labels=True`
    methods and/or parameters.'
  id: totrans-3141
  prefs: []
  type: TYPE_NORMAL
  zh: 新于 1.4 版本： - [`GenerativeSelect.set_label_style()`](#sqlalchemy.sql.expression.GenerativeSelect.set_label_style
    "sqlalchemy.sql.expression.GenerativeSelect.set_label_style") 方法替换了先前的 `.apply_labels()`、`.with_labels()`
    和 `use_labels=True` 方法和/或参数的组合。
- en: See also
  id: totrans-3142
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '`LABEL_STYLE_DISAMBIGUATE_ONLY`'
  id: totrans-3143
  prefs: []
  type: TYPE_NORMAL
  zh: '`LABEL_STYLE_DISAMBIGUATE_ONLY`'
- en: '`LABEL_STYLE_TABLENAME_PLUS_COL`'
  id: totrans-3144
  prefs: []
  type: TYPE_NORMAL
  zh: '`LABEL_STYLE_TABLENAME_PLUS_COL`'
- en: '`LABEL_STYLE_NONE`'
  id: totrans-3145
  prefs: []
  type: TYPE_NORMAL
  zh: '`LABEL_STYLE_NONE`'
- en: '`LABEL_STYLE_DEFAULT`'
  id: totrans-3146
  prefs: []
  type: TYPE_NORMAL
  zh: '`LABEL_STYLE_DEFAULT`'
- en: '[PRE607]'
  id: totrans-3147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE607]'
- en: Apply LIMIT / OFFSET to this statement based on a slice.
  id: totrans-3148
  prefs: []
  type: TYPE_NORMAL
  zh: 根据片段对该语句应用 LIMIT / OFFSET。
- en: The start and stop indices behave like the argument to Python’s built-in `range()`
    function. This method provides an alternative to using `LIMIT`/`OFFSET` to get
    a slice of the query.
  id: totrans-3149
  prefs: []
  type: TYPE_NORMAL
  zh: 开始和停止索引的行为类似于 Python 内置的 `range()` 函数的参数。该方法提供了使用 `LIMIT`/`OFFSET` 获取查询片段的替代方法。
- en: For example,
  id: totrans-3150
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，
- en: '[PRE608]'
  id: totrans-3151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE608]'
- en: renders as
  id: totrans-3152
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染为
- en: '[PRE609]'
  id: totrans-3153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE609]'
- en: Note
  id: totrans-3154
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The [`GenerativeSelect.slice()`](#sqlalchemy.sql.expression.GenerativeSelect.slice
    "sqlalchemy.sql.expression.GenerativeSelect.slice") method will replace any clause
    applied with [`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch").
  id: totrans-3155
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.slice()`](#sqlalchemy.sql.expression.GenerativeSelect.slice
    "sqlalchemy.sql.expression.GenerativeSelect.slice") 方法将替换应用于 [`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch") 的任何子句。'
- en: 'New in version 1.4: Added the [`GenerativeSelect.slice()`](#sqlalchemy.sql.expression.GenerativeSelect.slice
    "sqlalchemy.sql.expression.GenerativeSelect.slice") method generalized from the
    ORM.'
  id: totrans-3156
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4 版中的新功能：从 ORM 泛化添加了 [`GenerativeSelect.slice()`](#sqlalchemy.sql.expression.GenerativeSelect.slice
    "sqlalchemy.sql.expression.GenerativeSelect.slice") 方法。
- en: See also
  id: totrans-3157
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit")'
  id: totrans-3158
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit")'
- en: '[`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset")'
  id: totrans-3159
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset")'
- en: '[`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch")'
  id: totrans-3160
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch")'
- en: '[PRE610]'
  id: totrans-3161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE610]'
- en: Specify a `FOR UPDATE` clause for this [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect").
  id: totrans-3162
  prefs: []
  type: TYPE_NORMAL
  zh: 为此 [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect "sqlalchemy.sql.expression.GenerativeSelect")
    指定一个 `FOR UPDATE` 子句。
- en: 'E.g.:'
  id: totrans-3163
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE611]'
  id: totrans-3164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE611]'
- en: 'On a database like PostgreSQL or Oracle, the above would render a statement
    like:'
  id: totrans-3165
  prefs: []
  type: TYPE_NORMAL
  zh: 在像 PostgreSQL 或 Oracle 这样的数据库上，以上内容将呈现为如下语句：
- en: '[PRE612]'
  id: totrans-3166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE612]'
- en: 'on other backends, the `nowait` option is ignored and instead would produce:'
  id: totrans-3167
  prefs: []
  type: TYPE_NORMAL
  zh: 在其他后端上，`nowait` 选项将被忽略，而会产生如下结果：
- en: '[PRE613]'
  id: totrans-3168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE613]'
- en: When called with no arguments, the statement will render with the suffix `FOR
    UPDATE`. Additional arguments can then be provided which allow for common database-specific
    variants.
  id: totrans-3169
  prefs: []
  type: TYPE_NORMAL
  zh: 调用时不带参数，语句将以后缀 `FOR UPDATE` 呈现。然后可以提供附加参数，允许使用常见的数据库特定变体。
- en: 'Parameters:'
  id: totrans-3170
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`nowait` – boolean; will render `FOR UPDATE NOWAIT` on Oracle and PostgreSQL
    dialects.'
  id: totrans-3171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nowait` – 布尔值；在 Oracle 和 PostgreSQL 方言上将呈现为 `FOR UPDATE NOWAIT`。'
- en: '`read` – boolean; will render `LOCK IN SHARE MODE` on MySQL, `FOR SHARE` on
    PostgreSQL. On PostgreSQL, when combined with `nowait`, will render `FOR SHARE
    NOWAIT`.'
  id: totrans-3172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`read` – 布尔值；在 MySQL 上将呈现为 `LOCK IN SHARE MODE`，在 PostgreSQL 上将呈现为 `FOR SHARE`。在
    PostgreSQL 上，与 `nowait` 结合时，将呈现为 `FOR SHARE NOWAIT`。'
- en: '`of` – SQL expression or list of SQL expression elements, (typically [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects or a compatible expression, for some backends
    may also be a table expression) which will render into a `FOR UPDATE OF` clause;
    supported by PostgreSQL, Oracle, some MySQL versions and possibly others. May
    render as a table or as a column depending on backend.'
  id: totrans-3173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`of` – SQL 表达式或 SQL 表达式元素列表（通常为 [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 对象或兼容表达式，对于某些后端也可以是表达式），它将渲染为 `FOR UPDATE OF` 子句；受
    PostgreSQL、Oracle、某些 MySQL 版本支持，可能还支持其他后端。可能根据后端渲染为表或列。'
- en: '`skip_locked` – boolean, will render `FOR UPDATE SKIP LOCKED` on Oracle and
    PostgreSQL dialects or `FOR SHARE SKIP LOCKED` if `read=True` is also specified.'
  id: totrans-3174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`skip_locked` – 布尔值，将在 Oracle 和 PostgreSQL 方言上呈现为 `FOR UPDATE SKIP LOCKED`，或者如果也指定了
    `read=True`，则呈现为 `FOR SHARE SKIP LOCKED`。'
- en: '`key_share` – boolean, will render `FOR NO KEY UPDATE`, or if combined with
    `read=True` will render `FOR KEY SHARE`, on the PostgreSQL dialect.'
  id: totrans-3175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`key_share` – 布尔值，将在 PostgreSQL 方言上呈现为 `FOR NO KEY UPDATE`，或者如果与 `read=True`
    结合，将在 PostgreSQL 方言上呈现为 `FOR KEY SHARE`。'
- en: '[PRE614]'
  id: totrans-3176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE614]'
- en: Mixin that declares a class to include CTE support.
  id: totrans-3177
  prefs: []
  type: TYPE_NORMAL
  zh: 声明要包含 CTE 支持的类的 Mixin。
- en: '**Members**'
  id: totrans-3178
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[add_cte()](#sqlalchemy.sql.expression.HasCTE.add_cte), [cte()](#sqlalchemy.sql.expression.HasCTE.cte)'
  id: totrans-3179
  prefs: []
  type: TYPE_NORMAL
  zh: '[add_cte()](#sqlalchemy.sql.expression.HasCTE.add_cte), [cte()](#sqlalchemy.sql.expression.HasCTE.cte)'
- en: '**Class signature**'
  id: totrans-3180
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE") (`sqlalchemy.sql.roles.HasCTERole`, `sqlalchemy.sql.expression.SelectsRows`)
  id: totrans-3181
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.expression.HasCTE`](#sqlalchemy.sql.expression.HasCTE "sqlalchemy.sql.expression.HasCTE")
    (`sqlalchemy.sql.roles.HasCTERole`, `sqlalchemy.sql.expression.SelectsRows`)
- en: '[PRE615]'
  id: totrans-3182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE615]'
- en: Add one or more [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    constructs to this statement.
  id: totrans-3183
  prefs: []
  type: TYPE_NORMAL
  zh: 将一个或多个[`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")构造添加到该语句中。
- en: This method will associate the given [`CTE`](#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE") constructs with the parent statement such that
    they will each be unconditionally rendered in the WITH clause of the final statement,
    even if not referenced elsewhere within the statement or any sub-selects.
  id: totrans-3184
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法将把给定的[`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    构造与父语句关联起来，以便它们将在最终语句的 WITH 子句中无条件地渲染，即使在语句或任何子选择中未引用。
- en: The optional [`HasCTE.add_cte.nest_here`](#sqlalchemy.sql.expression.HasCTE.add_cte.params.nest_here
    "sqlalchemy.sql.expression.HasCTE.add_cte") parameter when set to True will have
    the effect that each given [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    will render in a WITH clause rendered directly along with this statement, rather
    than being moved to the top of the ultimate rendered statement, even if this statement
    is rendered as a subquery within a larger statement.
  id: totrans-3185
  prefs: []
  type: TYPE_NORMAL
  zh: 当设置为 True 时，可选的 [`HasCTE.add_cte.nest_here`](#sqlalchemy.sql.expression.HasCTE.add_cte.params.nest_here
    "sqlalchemy.sql.expression.HasCTE.add_cte") 参数将使每个给定的 [`CTE`](#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE") 直接与此语句一起渲染在一个 WITH 子句中，而不是被移动到最终渲染语句的顶部，即使此语句在更大语句中作为子查询渲染。
- en: This method has two general uses. One is to embed CTE statements that serve
    some purpose without being referenced explicitly, such as the use case of embedding
    a DML statement such as an INSERT or UPDATE as a CTE inline with a primary statement
    that may draw from its results indirectly. The other is to provide control over
    the exact placement of a particular series of CTE constructs that should remain
    rendered directly in terms of a particular statement that may be nested in a larger
    statement.
  id: totrans-3186
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法有两个一般用途。一个是嵌入服务于某些目的而不被显式引用的 CTE 语句，比如将 DML 语句（比如 INSERT 或 UPDATE）作为 CTE
    内联到可能间接从其结果中汲取的主语句中。另一个是提供对应特定语句的一系列 CTE 构造的确切放置的控制，这些构造应该保持直接渲染为嵌套在较大语句中的特定语句。
- en: 'E.g.:'
  id: totrans-3187
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE616]'
  id: totrans-3188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE616]'
- en: 'Would render:'
  id: totrans-3189
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染如下：
- en: '[PRE617]'
  id: totrans-3190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE617]'
- en: Above, the “anon_1” CTE is not referenced in the SELECT statement, however still
    accomplishes the task of running an INSERT statement.
  id: totrans-3191
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的“anon_1” CTE 在 SELECT 语句中没有被引用，但仍然完成了运行 INSERT 语句的任务。
- en: 'Similarly in a DML-related context, using the PostgreSQL [`Insert`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Insert
    "sqlalchemy.dialects.postgresql.Insert") construct to generate an “upsert”:'
  id: totrans-3192
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，在 DML 相关的上下文中，使用 PostgreSQL 的[`Insert`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Insert
    "sqlalchemy.dialects.postgresql.Insert")构造生成“upsert”：
- en: '[PRE618]'
  id: totrans-3193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE618]'
- en: 'The above statement renders as:'
  id: totrans-3194
  prefs: []
  type: TYPE_NORMAL
  zh: 上述语句渲染为：
- en: '[PRE619]'
  id: totrans-3195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE619]'
- en: New in version 1.4.21.
  id: totrans-3196
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4.21 开始新增。
- en: 'Parameters:'
  id: totrans-3197
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*ctes` –'
  id: totrans-3198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*ctes` -'
- en: zero or more [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    constructs.
  id: totrans-3199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 零个或多个[`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")构造。
- en: 'Changed in version 2.0: Multiple CTE instances are accepted'
  id: totrans-3200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本 2.0 开始更改：接受多个 CTE 实例
- en: '`nest_here` –'
  id: totrans-3201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nest_here` -'
- en: if True, the given CTE or CTEs will be rendered as though they specified the
    [`HasCTE.cte.nesting`](#sqlalchemy.sql.expression.HasCTE.cte.params.nesting "sqlalchemy.sql.expression.HasCTE.cte")
    flag to `True` when they were added to this [`HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE"). Assuming the given CTEs are not referenced
    in an outer-enclosing statement as well, the CTEs given should render at the level
    of this statement when this flag is given.
  id: totrans-3202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果为 True，则给定的 CTE 或 CTE 将被渲染，就好像它们在添加到此 [`HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE") 时指定了 [`HasCTE.cte.nesting`](#sqlalchemy.sql.expression.HasCTE.cte.params.nesting
    "sqlalchemy.sql.expression.HasCTE.cte") 标志为 True 一样。假设给定的 CTE 在外层语句中也没有被引用，当给定此标志时，应该在此语句级别呈现这些
    CTE。
- en: New in version 2.0.
  id: totrans-3203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本 2.0 开始。
- en: See also
  id: totrans-3204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`HasCTE.cte.nesting`](#sqlalchemy.sql.expression.HasCTE.cte.params.nesting
    "sqlalchemy.sql.expression.HasCTE.cte")'
  id: totrans-3205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`HasCTE.cte.nesting`](#sqlalchemy.sql.expression.HasCTE.cte.params.nesting
    "sqlalchemy.sql.expression.HasCTE.cte")'
- en: '[PRE620]'
  id: totrans-3206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE620]'
- en: Return a new [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE"),
    or Common Table Expression instance.
  id: totrans-3207
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的[`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")，或公共表达式实例。
- en: Common table expressions are a SQL standard whereby SELECT statements can draw
    upon secondary statements specified along with the primary statement, using a
    clause called “WITH”. Special semantics regarding UNION can also be employed to
    allow “recursive” queries, where a SELECT statement can draw upon the set of rows
    that have previously been selected.
  id: totrans-3208
  prefs: []
  type: TYPE_NORMAL
  zh: 通用表达式是 SQL 标准，其中 SELECT 语句可以利用与主语句一起指定的辅助语句，使用名为“WITH”的子句。关于 UNION 的特殊语义也可以用于允许“递归”查询，其中
    SELECT 语句可以利用先前选择的行集。
- en: CTEs can also be applied to DML constructs UPDATE, INSERT and DELETE on some
    databases, both as a source of CTE rows when combined with RETURNING, as well
    as a consumer of CTE rows.
  id: totrans-3209
  prefs: []
  type: TYPE_NORMAL
  zh: CTE 也可以应用于某些数据库上的 DML 构造 UPDATE、INSERT 和 DELETE，既作为与 RETURNING 结合时 CTE 行的来源，也作为
    CTE 行的��费者。
- en: SQLAlchemy detects [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    objects, which are treated similarly to [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") objects, as special elements to be delivered
    to the FROM clause of the statement as well as to a WITH clause at the top of
    the statement.
  id: totrans-3210
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 检测到[`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")对象，这些对象与[`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias")对象类似地处理，作为要传递给语句的 FROM 子句以及语句顶部的 WITH 子句的特殊元素。
- en: For special prefixes such as PostgreSQL “MATERIALIZED” and “NOT MATERIALIZED”,
    the `CTE.prefix_with()` method may be used to establish these.
  id: totrans-3211
  prefs: []
  type: TYPE_NORMAL
  zh: 对于特殊前缀，如 PostgreSQL 的“MATERIALIZED”和“NOT MATERIALIZED”，可以使用`CTE.prefix_with()`方法来建立这些。
- en: 'Changed in version 1.3.13: Added support for prefixes. In particular - MATERIALIZED
    and NOT MATERIALIZED.'
  id: totrans-3212
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本 1.3.13 中更改：添加了对前缀的支持。特别是 - MATERIALIZED 和 NOT MATERIALIZED。
- en: 'Parameters:'
  id: totrans-3213
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`name` – name given to the common table expression. Like [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias"), the name can be left as `None`
    in which case an anonymous symbol will be used at query compile time.'
  id: totrans-3214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 给通用表达式的名称。与[`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias")类似，名称可以保留为`None`，在这种情况下，将在查询编译时使用匿名符号。'
- en: '`recursive` – if `True`, will render `WITH RECURSIVE`. A recursive common table
    expression is intended to be used in conjunction with UNION ALL in order to derive
    rows from those already selected.'
  id: totrans-3215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`recursive` – 如果为`True`，将呈现`WITH RECURSIVE`。递归通用表达式旨在与 UNION ALL 结合使用，以从已选择的行中派生行。'
- en: '`nesting` –'
  id: totrans-3216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nesting` –'
- en: if `True`, will render the CTE locally to the statement in which it is referenced.
    For more complex scenarios, the [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") method using the [`HasCTE.add_cte.nest_here`](#sqlalchemy.sql.expression.HasCTE.add_cte.params.nest_here
    "sqlalchemy.sql.expression.HasCTE.add_cte") parameter may also be used to more
    carefully control the exact placement of a particular CTE.
  id: totrans-3217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果为`True`，将在引用它的语句中本地呈现 CTE。对于更复杂的情况，还可以使用[`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte")方法，使用[`HasCTE.add_cte.nest_here`](#sqlalchemy.sql.expression.HasCTE.add_cte.params.nest_here
    "sqlalchemy.sql.expression.HasCTE.add_cte")参数更精细地控制特定 CTE 的确切放置。
- en: New in version 1.4.24.
  id: totrans-3218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版本 1.4.24。
- en: See also
  id: totrans-3219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte "sqlalchemy.sql.expression.HasCTE.add_cte")'
  id: totrans-3220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte "sqlalchemy.sql.expression.HasCTE.add_cte")'
- en: The following examples include two from PostgreSQL’s documentation at [https://www.postgresql.org/docs/current/static/queries-with.html](https://www.postgresql.org/docs/current/static/queries-with.html),
    as well as additional examples.
  id: totrans-3221
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例包括两个来自 PostgreSQL 文档的示例，网址为[https://www.postgresql.org/docs/current/static/queries-with.html](https://www.postgresql.org/docs/current/static/queries-with.html)，以及其他示例。
- en: 'Example 1, non recursive:'
  id: totrans-3222
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 1，非递归：
- en: '[PRE621]'
  id: totrans-3223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE621]'
- en: 'Example 2, WITH RECURSIVE:'
  id: totrans-3224
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 2，WITH RECURSIVE：
- en: '[PRE622]'
  id: totrans-3225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE622]'
- en: 'Example 3, an upsert using UPDATE and INSERT with CTEs:'
  id: totrans-3226
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 3，使用 CTE 进行更新和插入：
- en: '[PRE623]'
  id: totrans-3227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE623]'
- en: 'Example 4, Nesting CTE (SQLAlchemy 1.4.24 and above):'
  id: totrans-3228
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 4，嵌套 CTE（SQLAlchemy 1.4.24 及以上版本）：
- en: '[PRE624]'
  id: totrans-3229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE624]'
- en: 'The above query will render the second CTE nested inside the first, shown with
    inline parameters below as:'
  id: totrans-3230
  prefs: []
  type: TYPE_NORMAL
  zh: 上述查询将第二个 CTE 嵌套在第一个内部，如下所示，带有内联参数：
- en: '[PRE625]'
  id: totrans-3231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE625]'
- en: 'The same CTE can be set up using the [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") method as follows (SQLAlchemy 2.0
    and above):'
  id: totrans-3232
  prefs: []
  type: TYPE_NORMAL
  zh: 相同的 CTE 可以使用[`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte "sqlalchemy.sql.expression.HasCTE.add_cte")方法设置如下（SQLAlchemy
    2.0 及以上版本）：
- en: '[PRE626]'
  id: totrans-3233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE626]'
- en: 'Example 5, Non-Linear CTE (SQLAlchemy 1.4.28 and above):'
  id: totrans-3234
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 5，非线性 CTE（SQLAlchemy 1.4.28 及以上版本）：
- en: '[PRE627]'
  id: totrans-3235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE627]'
- en: 'The above query will render 2 UNIONs inside the recursive CTE:'
  id: totrans-3236
  prefs: []
  type: TYPE_NORMAL
  zh: 上述查询将在递归 CTE 中呈现 2 个 UNIONs：
- en: '[PRE628]'
  id: totrans-3237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE628]'
- en: See also
  id: totrans-3238
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Query.cte()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.cte "sqlalchemy.orm.Query.cte")
    - ORM version of [`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte "sqlalchemy.sql.expression.HasCTE.cte").'
  id: totrans-3239
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.cte()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.cte "sqlalchemy.orm.Query.cte")
    - [`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte "sqlalchemy.sql.expression.HasCTE.cte")的
    ORM 版本。'
- en: '[PRE629]'
  id: totrans-3240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE629]'
- en: '**Members**'
  id: totrans-3241
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[prefix_with()](#sqlalchemy.sql.expression.HasPrefixes.prefix_with)'
  id: totrans-3242
  prefs: []
  type: TYPE_NORMAL
  zh: '[prefix_with()](#sqlalchemy.sql.expression.HasPrefixes.prefix_with)'
- en: '[PRE630]'
  id: totrans-3243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE630]'
- en: Add one or more expressions following the statement keyword, i.e. SELECT, INSERT,
    UPDATE, or DELETE. Generative.
  id: totrans-3244
  prefs: []
  type: TYPE_NORMAL
  zh: 在语句关键字后面添加一个或多个表达式，即 SELECT、INSERT、UPDATE 或 DELETE。生成式。
- en: This is used to support backend-specific prefix keywords such as those provided
    by MySQL.
  id: totrans-3245
  prefs: []
  type: TYPE_NORMAL
  zh: 用于支持特定于后端的前缀关键字，例如 MySQL 提供的关键字。
- en: 'E.g.:'
  id: totrans-3246
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE631]'
  id: totrans-3247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE631]'
- en: Multiple prefixes can be specified by multiple calls to [`HasPrefixes.prefix_with()`](#sqlalchemy.sql.expression.HasPrefixes.prefix_with
    "sqlalchemy.sql.expression.HasPrefixes.prefix_with").
  id: totrans-3248
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过多次调用[`HasPrefixes.prefix_with()`](#sqlalchemy.sql.expression.HasPrefixes.prefix_with
    "sqlalchemy.sql.expression.HasPrefixes.prefix_with")来指定多个前缀。
- en: 'Parameters:'
  id: totrans-3249
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*prefixes` – textual or [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") construct which will be rendered following
    the INSERT, UPDATE, or DELETE keyword.'
  id: totrans-3250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*prefixes` – 文本或[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")构造，将在 INSERT、UPDATE 或 DELETE 关键字之后呈现。'
- en: '`dialect` – optional string dialect name which will limit rendering of this
    prefix to only that dialect.'
  id: totrans-3251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect` – 可选的字符串方言名称，将仅限制此前缀的渲染为仅该方言。'
- en: '[PRE632]'
  id: totrans-3252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE632]'
- en: '**Members**'
  id: totrans-3253
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[suffix_with()](#sqlalchemy.sql.expression.HasSuffixes.suffix_with)'
  id: totrans-3254
  prefs: []
  type: TYPE_NORMAL
  zh: '[suffix_with()](#sqlalchemy.sql.expression.HasSuffixes.suffix_with)'
- en: '[PRE633]'
  id: totrans-3255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE633]'
- en: Add one or more expressions following the statement as a whole.
  id: totrans-3256
  prefs: []
  type: TYPE_NORMAL
  zh: 在整个语句后面添加一个或多个表达式。
- en: This is used to support backend-specific suffix keywords on certain constructs.
  id: totrans-3257
  prefs: []
  type: TYPE_NORMAL
  zh: 用于支持某些构造的特定于后端的后缀关键字。
- en: 'E.g.:'
  id: totrans-3258
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE634]'
  id: totrans-3259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE634]'
- en: Multiple suffixes can be specified by multiple calls to [`HasSuffixes.suffix_with()`](#sqlalchemy.sql.expression.HasSuffixes.suffix_with
    "sqlalchemy.sql.expression.HasSuffixes.suffix_with").
  id: totrans-3260
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过多次调用[`HasSuffixes.suffix_with()`](#sqlalchemy.sql.expression.HasSuffixes.suffix_with
    "sqlalchemy.sql.expression.HasSuffixes.suffix_with")来指定多个后缀。
- en: 'Parameters:'
  id: totrans-3261
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*suffixes` – textual or [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") construct which will be rendered following
    the target clause.'
  id: totrans-3262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*suffixes` – 文本或[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")构造，将在目标子句之后呈现。'
- en: '`dialect` – Optional string dialect name which will limit rendering of this
    suffix to only that dialect.'
  id: totrans-3263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect` – 可选字符串方言名称，将仅限制此后缀的渲染为仅该方言。'
- en: '[PRE635]'
  id: totrans-3264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE635]'
- en: Represent a `JOIN` construct between two [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") elements.
  id: totrans-3265
  prefs: []
  type: TYPE_NORMAL
  zh: 表示两个[`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")元素之间的`JOIN`构造。
- en: The public constructor function for [`Join`](#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") is the module-level [`join()`](#sqlalchemy.sql.expression.join
    "sqlalchemy.sql.expression.join") function, as well as the [`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join") method of any [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") (e.g. such as [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")).
  id: totrans-3266
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")的公共构造函数是模块级别的[`join()`](#sqlalchemy.sql.expression.join
    "sqlalchemy.sql.expression.join")函数，以及任何[`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")的[`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join")方法（例如[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")）。'
- en: See also
  id: totrans-3267
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`join()`](#sqlalchemy.sql.expression.join "sqlalchemy.sql.expression.join")'
  id: totrans-3268
  prefs: []
  type: TYPE_NORMAL
  zh: '[`join()`](#sqlalchemy.sql.expression.join "sqlalchemy.sql.expression.join")'
- en: '[`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join "sqlalchemy.sql.expression.FromClause.join")'
  id: totrans-3269
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join "sqlalchemy.sql.expression.FromClause.join")'
- en: '**Members**'
  id: totrans-3270
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.sql.expression.Join.__init__), [description](#sqlalchemy.sql.expression.Join.description),
    [is_derived_from()](#sqlalchemy.sql.expression.Join.is_derived_from), [select()](#sqlalchemy.sql.expression.Join.select),
    [self_group()](#sqlalchemy.sql.expression.Join.self_group)'
  id: totrans-3271
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.sql.expression.Join.__init__), [description](#sqlalchemy.sql.expression.Join.description),
    [is_derived_from()](#sqlalchemy.sql.expression.Join.is_derived_from), [select()](#sqlalchemy.sql.expression.Join.select),
    [self_group()](#sqlalchemy.sql.expression.Join.self_group)'
- en: '**Class signature**'
  id: totrans-3272
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    (`sqlalchemy.sql.roles.DMLTableRole`, [`sqlalchemy.sql.expression.FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause"))
  id: totrans-3273
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.expression.Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    (`sqlalchemy.sql.roles.DMLTableRole`, [`sqlalchemy.sql.expression.FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause"))
- en: '[PRE636]'
  id: totrans-3274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE636]'
- en: Construct a new [`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join").
  id: totrans-3275
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个新的 [`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")。
- en: The usual entrypoint here is the [`join()`](#sqlalchemy.sql.expression.join
    "sqlalchemy.sql.expression.join") function or the [`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join") method of any [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") object.
  id: totrans-3276
  prefs: []
  type: TYPE_NORMAL
  zh: 此处的通常入口点是 [`join()`](#sqlalchemy.sql.expression.join "sqlalchemy.sql.expression.join")
    函数或任何 [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    对象的 [`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join "sqlalchemy.sql.expression.FromClause.join")
    方法。
- en: '[PRE637]'
  id: totrans-3277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE637]'
- en: '[PRE638]'
  id: totrans-3278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE638]'
- en: Return `True` if this [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    is ‘derived’ from the given `FromClause`.
  id: totrans-3279
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此 [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    是从给定的 `FromClause` 派生的，则返回 `True`。
- en: An example would be an Alias of a Table is derived from that Table.
  id: totrans-3280
  prefs: []
  type: TYPE_NORMAL
  zh: 一个示例是一个表的别名是从该表派生的。
- en: '[PRE639]'
  id: totrans-3281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE639]'
- en: Create a [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    from this [`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join").
  id: totrans-3282
  prefs: []
  type: TYPE_NORMAL
  zh: 从此 [`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    创建一个 [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")。
- en: 'E.g.:'
  id: totrans-3283
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE640]'
  id: totrans-3284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE640]'
- en: 'The above will produce a SQL string resembling:'
  id: totrans-3285
  prefs: []
  type: TYPE_NORMAL
  zh: 以上将产生类似于以下的 SQL 字符串：
- en: '[PRE641]'
  id: totrans-3286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE641]'
- en: '[PRE642]'
  id: totrans-3287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE642]'
- en: Apply a ‘grouping’ to this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  id: totrans-3288
  prefs: []
  type: TYPE_NORMAL
  zh: 对此 [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") 应用“分组”。
- en: This method is overridden by subclasses to return a “grouping” construct, i.e.
    parenthesis. In particular it’s used by “binary” expressions to provide a grouping
    around themselves when placed into a larger expression, as well as by [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs when placed into the FROM clause
    of another [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select").
    (Note that subqueries should be normally created using the [`Select.alias()`](#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") method, as many platforms require nested
    SELECT statements to be named).
  id: totrans-3289
  prefs: []
  type: TYPE_NORMAL
  zh: 子类将重写此方法以返回“分组”构造，即括号。特别是，当“二元”表达式被放置到较大表达式中时，它们会提供自己周围的分组，以及当 [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造被放置到另一个 [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 的 FROM 子句中时。 （请注意，子查询通常应使用 [`Select.alias()`](#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") 方法创建，因为许多平台要求嵌套的 SELECT 语句具有名称）。
- en: As expressions are composed together, the application of [`self_group()`](#sqlalchemy.sql.expression.Join.self_group
    "sqlalchemy.sql.expression.Join.self_group") is automatic - end-user code should
    never need to use this method directly. Note that SQLAlchemy’s clause constructs
    take operator precedence into account - so parenthesis might not be needed, for
    example, in an expression like `x OR (y AND z)` - AND takes precedence over OR.
  id: totrans-3290
  prefs: []
  type: TYPE_NORMAL
  zh: 当表达式被组合在一起时，[`self_group()`](#sqlalchemy.sql.expression.Join.self_group "sqlalchemy.sql.expression.Join.self_group")
    的应用是自动的 - 最终用户代码不应直接使用此方法。请注意，SQLAlchemy 的子句构造会考虑运算符优先级 - 因此括号可能不是必需的，例如，在表达式
    `x OR (y AND z)` 中可能不需要括号 - AND 优先于 OR。
- en: The base [`self_group()`](#sqlalchemy.sql.expression.Join.self_group "sqlalchemy.sql.expression.Join.self_group")
    method of [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") just returns self.
  id: totrans-3291
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement "sqlalchemy.sql.expression.ClauseElement")
    的基本 [`self_group()`](#sqlalchemy.sql.expression.Join.self_group "sqlalchemy.sql.expression.Join.self_group")
    方法只返回 self。'
- en: '[PRE643]'
  id: totrans-3292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE643]'
- en: Represent a LATERAL subquery.
  id: totrans-3293
  prefs: []
  type: TYPE_NORMAL
  zh: 表示 LATERAL 子查询。
- en: This object is constructed from the [`lateral()`](#sqlalchemy.sql.expression.lateral
    "sqlalchemy.sql.expression.lateral") module level function as well as the `FromClause.lateral()`
    method available on all [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    subclasses.
  id: totrans-3294
  prefs: []
  type: TYPE_NORMAL
  zh: 此对象可以通过 [`lateral()`](#sqlalchemy.sql.expression.lateral "sqlalchemy.sql.expression.lateral")
    模块级函数以及所有 [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    子类上可用的 `FromClause.lateral()` 方法构造。
- en: While LATERAL is part of the SQL standard, currently only more recent PostgreSQL
    versions provide support for this keyword.
  id: totrans-3295
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 LATERAL 是 SQL 标准的一部分，但目前只有较新版本的 PostgreSQL 提供对该关键字的支持。
- en: See also
  id: totrans-3296
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[LATERAL correlation](../tutorial/data_select.html#tutorial-lateral-correlation)
    - overview of usage.'
  id: totrans-3297
  prefs: []
  type: TYPE_NORMAL
  zh: '[LATERAL correlation](../tutorial/data_select.html#tutorial-lateral-correlation)
    - 用法概述。'
- en: '**Members**'
  id: totrans-3298
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[inherit_cache](#sqlalchemy.sql.expression.Lateral.inherit_cache)'
  id: totrans-3299
  prefs: []
  type: TYPE_NORMAL
  zh: '[inherit_cache](#sqlalchemy.sql.expression.Lateral.inherit_cache)'
- en: '**Class signature**'
  id: totrans-3300
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.Lateral`](#sqlalchemy.sql.expression.Lateral
    "sqlalchemy.sql.expression.Lateral") (`sqlalchemy.sql.expression.FromClauseAlias`,
    `sqlalchemy.sql.expression.LateralFromClause`)
  id: totrans-3301
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.sql.expression.Lateral`](#sqlalchemy.sql.expression.Lateral
    "sqlalchemy.sql.expression.Lateral") (`sqlalchemy.sql.expression.FromClauseAlias`,
    `sqlalchemy.sql.expression.LateralFromClause`)
- en: '[PRE644]'
  id: totrans-3302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE644]'
- en: Indicate if this [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") instance should make use of the cache
    key generation scheme used by its immediate superclass.
  id: totrans-3303
  prefs: []
  type: TYPE_NORMAL
  zh: 指示此 [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey "sqlalchemy.sql.traversals.HasCacheKey")
    实例是否应使用其直接超类使用的缓存键生成方案。
- en: The attribute defaults to `None`, which indicates that a construct has not yet
    taken into account whether or not its appropriate for it to participate in caching;
    this is functionally equivalent to setting the value to `False`, except that a
    warning is also emitted.
  id: totrans-3304
  prefs: []
  type: TYPE_NORMAL
  zh: 该属性默认为`None`，表示构造尚未考虑它是否应该参与缓存；这在功能上等同于将值设置为`False`，只是还会发出警告。
- en: This flag can be set to `True` on a particular class, if the SQL that corresponds
    to the object does not change based on attributes which are local to this class,
    and not its superclass.
  id: totrans-3305
  prefs: []
  type: TYPE_NORMAL
  zh: 如果与对象对应的 SQL 不会根据本类而不是其超类的本地属性而改变，则可以将此标志设置为`True`。
- en: See also
  id: totrans-3306
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Enabling Caching Support for Custom Constructs](compiler.html#compilerext-caching)
    - General guideslines for setting the [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute for third-party
    or user defined SQL constructs.'
  id: totrans-3307
  prefs: []
  type: TYPE_NORMAL
  zh: '[为自定义结构启用缓存支持](compiler.html#compilerext-caching) - 设置第三方或用户定义的 SQL 结构的 [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") 属性的一般指南。'
- en: '[PRE645]'
  id: totrans-3308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE645]'
- en: The base-most class for Core constructs that have some concept of columns that
    can represent rows.
  id: totrans-3309
  prefs: []
  type: TYPE_NORMAL
  zh: 具有可表示行的列概念的 Core 构造的基本类。
- en: While the SELECT statement and TABLE are the primary things we think of in this
    category, DML like INSERT, UPDATE and DELETE can also specify RETURNING which
    means they can be used in CTEs and other forms, and PostgreSQL has functions that
    return rows also.
  id: totrans-3310
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 SELECT 语句和 TABLE 是我们在此类别中考虑的主要内容，但 DML（如 INSERT、UPDATE 和 DELETE）也可以指定 RETURNING，这意味着它们可以在
    CTE 和其他形式中使用，并且 PostgreSQL 还具有返回行的函数。
- en: New in version 1.4.
  id: totrans-3311
  prefs: []
  type: TYPE_NORMAL
  zh: 新功能：1.4 版本中新增。
- en: '**Members**'
  id: totrans-3312
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[exported_columns](#sqlalchemy.sql.expression.ReturnsRows.exported_columns),
    [is_derived_from()](#sqlalchemy.sql.expression.ReturnsRows.is_derived_from)'
  id: totrans-3313
  prefs: []
  type: TYPE_NORMAL
  zh: '[exported_columns](#sqlalchemy.sql.expression.ReturnsRows.exported_columns),
    [is_derived_from()](#sqlalchemy.sql.expression.ReturnsRows.is_derived_from)'
- en: '**Class signature**'
  id: totrans-3314
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows
    "sqlalchemy.sql.expression.ReturnsRows") (`sqlalchemy.sql.roles.ReturnsRowsRole`,
    `sqlalchemy.sql.expression.DQLDMLClauseElement`)
  id: totrans-3315
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.sql.expression.ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows
    "sqlalchemy.sql.expression.ReturnsRows") (`sqlalchemy.sql.roles.ReturnsRowsRole`,
    `sqlalchemy.sql.expression.DQLDMLClauseElement`)
- en: '[PRE646]'
  id: totrans-3316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE646]'
- en: A [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") that represents the “exported” columns
    of this [`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows "sqlalchemy.sql.expression.ReturnsRows").
  id: totrans-3317
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")代表了这个[`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows
    "sqlalchemy.sql.expression.ReturnsRows")的“导出”列。
- en: The “exported” columns represent the collection of [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") expressions that are rendered by this
    SQL construct. There are primary varieties which are the “FROM clause columns”
    of a FROM clause, such as a table, join, or subquery, the “SELECTed columns”,
    which are the columns in the “columns clause” of a SELECT statement, and the RETURNING
    columns in a DML statement..
  id: totrans-3318
  prefs: []
  type: TYPE_NORMAL
  zh: “导出”列代表了这个SQL构造渲染的[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")表达式的集合。有几种主要类型，即FROM子句的“FROM子句列”，比如表、连接或子查询，被“SELECTed”的列，即SELECT语句的“列子句”中的列，以及DML语句中的RETURNING列。
- en: New in version 1.4.
  id: totrans-3319
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4版本中的新功能。
- en: See also
  id: totrans-3320
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`FromClause.exported_columns`](#sqlalchemy.sql.expression.FromClause.exported_columns
    "sqlalchemy.sql.expression.FromClause.exported_columns")'
  id: totrans-3321
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FromClause.exported_columns`](#sqlalchemy.sql.expression.FromClause.exported_columns
    "sqlalchemy.sql.expression.FromClause.exported_columns")'
- en: '[`SelectBase.exported_columns`](#sqlalchemy.sql.expression.SelectBase.exported_columns
    "sqlalchemy.sql.expression.SelectBase.exported_columns")'
  id: totrans-3322
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SelectBase.exported_columns`](#sqlalchemy.sql.expression.SelectBase.exported_columns
    "sqlalchemy.sql.expression.SelectBase.exported_columns")'
- en: '[PRE647]'
  id: totrans-3323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE647]'
- en: Return `True` if this [`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows
    "sqlalchemy.sql.expression.ReturnsRows") is ‘derived’ from the given [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-3324
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这个[`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows "sqlalchemy.sql.expression.ReturnsRows")是从给定的[`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")“派生”出来的，则返回`True`。
- en: An example would be an Alias of a Table is derived from that Table.
  id: totrans-3325
  prefs: []
  type: TYPE_NORMAL
  zh: 一个示例是，表的别名是从该表派生出来的。
- en: '[PRE648]'
  id: totrans-3326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE648]'
- en: Represent a scalar subquery.
  id: totrans-3327
  prefs: []
  type: TYPE_NORMAL
  zh: 代表一个标量子查询。
- en: A [`ScalarSelect`](#sqlalchemy.sql.expression.ScalarSelect "sqlalchemy.sql.expression.ScalarSelect")
    is created by invoking the [`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery") method. The object then
    participates in other SQL expressions as a SQL column expression within the [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") hierarchy.
  id: totrans-3328
  prefs: []
  type: TYPE_NORMAL
  zh: 通过调用[`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery")方法创建一个[`ScalarSelect`](#sqlalchemy.sql.expression.ScalarSelect
    "sqlalchemy.sql.expression.ScalarSelect")。然后，该对象作为SQL列表达式参与其他SQL表达式，在[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")层次结构中。
- en: See also
  id: totrans-3329
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery")'
  id: totrans-3330
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery")'
- en: '[Scalar and Correlated Subqueries](../tutorial/data_select.html#tutorial-scalar-subquery)
    - in the 2.0 tutorial'
  id: totrans-3331
  prefs: []
  type: TYPE_NORMAL
  zh: '[标量和相关子查询](../tutorial/data_select.html#tutorial-scalar-subquery) - 在2.0教程中'
- en: '**Members**'
  id: totrans-3332
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[correlate()](#sqlalchemy.sql.expression.ScalarSelect.correlate), [correlate_except()](#sqlalchemy.sql.expression.ScalarSelect.correlate_except),
    [inherit_cache](#sqlalchemy.sql.expression.ScalarSelect.inherit_cache), [self_group()](#sqlalchemy.sql.expression.ScalarSelect.self_group),
    [where()](#sqlalchemy.sql.expression.ScalarSelect.where)'
  id: totrans-3333
  prefs: []
  type: TYPE_NORMAL
  zh: '[correlate()](#sqlalchemy.sql.expression.ScalarSelect.correlate), [correlate_except()](#sqlalchemy.sql.expression.ScalarSelect.correlate_except),
    [inherit_cache](#sqlalchemy.sql.expression.ScalarSelect.inherit_cache), [self_group()](#sqlalchemy.sql.expression.ScalarSelect.self_group),
    [where()](#sqlalchemy.sql.expression.ScalarSelect.where)'
- en: '**Class signature**'
  id: totrans-3334
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.ScalarSelect`](#sqlalchemy.sql.expression.ScalarSelect
    "sqlalchemy.sql.expression.ScalarSelect") (`sqlalchemy.sql.roles.InElementRole`,
    `sqlalchemy.sql.expression.Generative`, `sqlalchemy.sql.expression.GroupedElement`,
    [`sqlalchemy.sql.expression.ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"))
  id: totrans-3335
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.expression.ScalarSelect`](#sqlalchemy.sql.expression.ScalarSelect
    "sqlalchemy.sql.expression.ScalarSelect") (`sqlalchemy.sql.roles.InElementRole`,
    `sqlalchemy.sql.expression.Generative`, `sqlalchemy.sql.expression.GroupedElement`,
    [`sqlalchemy.sql.expression.ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"))
- en: '[PRE649]'
  id: totrans-3336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE649]'
- en: Return a new [`ScalarSelect`](#sqlalchemy.sql.expression.ScalarSelect "sqlalchemy.sql.expression.ScalarSelect")
    which will correlate the given FROM clauses to that of an enclosing [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select").
  id: totrans-3337
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的 [`ScalarSelect`](#sqlalchemy.sql.expression.ScalarSelect "sqlalchemy.sql.expression.ScalarSelect")，它将相关联的
    FROM 子句与封闭的 [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    相关联。
- en: This method is mirrored from the [`Select.correlate()`](#sqlalchemy.sql.expression.Select.correlate
    "sqlalchemy.sql.expression.Select.correlate") method of the underlying [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select"). The method applies the :meth:_sql.Select.correlate`
    method, then returns a new [`ScalarSelect`](#sqlalchemy.sql.expression.ScalarSelect
    "sqlalchemy.sql.expression.ScalarSelect") against that statement.
  id: totrans-3338
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法是从底层 [`Select.correlate()`](#sqlalchemy.sql.expression.Select.correlate "sqlalchemy.sql.expression.Select.correlate")
    方法镜像过来的。该方法应用 :meth:_sql.Select.correlate` 方法，然后返回一个针对该语句的新 [`ScalarSelect`](#sqlalchemy.sql.expression.ScalarSelect
    "sqlalchemy.sql.expression.ScalarSelect")。
- en: 'New in version 1.4: Previously, the [`ScalarSelect.correlate()`](#sqlalchemy.sql.expression.ScalarSelect.correlate
    "sqlalchemy.sql.expression.ScalarSelect.correlate") method was only available
    from [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select").'
  id: totrans-3339
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4 中新增：以前，[`ScalarSelect.correlate()`](#sqlalchemy.sql.expression.ScalarSelect.correlate
    "sqlalchemy.sql.expression.ScalarSelect.correlate") 方法仅从 [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") 中可用。
- en: 'Parameters:'
  id: totrans-3340
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '***fromclauses** – a list of one or more [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") constructs, or other compatible constructs
    (i.e. ORM-mapped classes) to become part of the correlate collection.'
  id: totrans-3341
  prefs: []
  type: TYPE_NORMAL
  zh: '***fromclauses** – 一个或多个 [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") 构造的列表，或其他兼容的构造（即 ORM 映射的类），用于成为相关集合的一部分。'
- en: See also
  id: totrans-3342
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`ScalarSelect.correlate_except()`](#sqlalchemy.sql.expression.ScalarSelect.correlate_except
    "sqlalchemy.sql.expression.ScalarSelect.correlate_except")'
  id: totrans-3343
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ScalarSelect.correlate_except()`](#sqlalchemy.sql.expression.ScalarSelect.correlate_except
    "sqlalchemy.sql.expression.ScalarSelect.correlate_except")'
- en: '[Scalar and Correlated Subqueries](../tutorial/data_select.html#tutorial-scalar-subquery)
    - in the 2.0 tutorial'
  id: totrans-3344
  prefs: []
  type: TYPE_NORMAL
  zh: '[标量和相关子查询](../tutorial/data_select.html#tutorial-scalar-subquery) - 在 2.0 教程中'
- en: '[PRE650]'
  id: totrans-3345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE650]'
- en: Return a new [`ScalarSelect`](#sqlalchemy.sql.expression.ScalarSelect "sqlalchemy.sql.expression.ScalarSelect")
    which will omit the given FROM clauses from the auto-correlation process.
  id: totrans-3346
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的 [`ScalarSelect`](#sqlalchemy.sql.expression.ScalarSelect "sqlalchemy.sql.expression.ScalarSelect")，它将从自动相关过程中省略给定的
    FROM 子句。
- en: This method is mirrored from the [`Select.correlate_except()`](#sqlalchemy.sql.expression.Select.correlate_except
    "sqlalchemy.sql.expression.Select.correlate_except") method of the underlying
    [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select").
    The method applies the :meth:_sql.Select.correlate_except` method, then returns
    a new [`ScalarSelect`](#sqlalchemy.sql.expression.ScalarSelect "sqlalchemy.sql.expression.ScalarSelect")
    against that statement.
  id: totrans-3347
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法是从底层 [`Select.correlate_except()`](#sqlalchemy.sql.expression.Select.correlate_except
    "sqlalchemy.sql.expression.Select.correlate_except") 方法镜像过来的。该方法应用 :meth:_sql.Select.correlate_except`
    方法，然后返回一个针对该语句的新 [`ScalarSelect`](#sqlalchemy.sql.expression.ScalarSelect "sqlalchemy.sql.expression.ScalarSelect")。
- en: 'New in version 1.4: Previously, the [`ScalarSelect.correlate_except()`](#sqlalchemy.sql.expression.ScalarSelect.correlate_except
    "sqlalchemy.sql.expression.ScalarSelect.correlate_except") method was only available
    from [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select").'
  id: totrans-3348
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4 中新增：以前，[`ScalarSelect.correlate_except()`](#sqlalchemy.sql.expression.ScalarSelect.correlate_except
    "sqlalchemy.sql.expression.ScalarSelect.correlate_except") 方法仅从 [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") 中可用。
- en: 'Parameters:'
  id: totrans-3349
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '***fromclauses** – a list of one or more [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") constructs, or other compatible constructs
    (i.e. ORM-mapped classes) to become part of the correlate-exception collection.'
  id: totrans-3350
  prefs: []
  type: TYPE_NORMAL
  zh: '***fromclauses** – 一个或多个 [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") 构造的列表，或其他兼容的构造（即 ORM 映射的类），用于成为相关例外集合的一部分。'
- en: See also
  id: totrans-3351
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`ScalarSelect.correlate()`](#sqlalchemy.sql.expression.ScalarSelect.correlate
    "sqlalchemy.sql.expression.ScalarSelect.correlate")'
  id: totrans-3352
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ScalarSelect.correlate()`](#sqlalchemy.sql.expression.ScalarSelect.correlate
    "sqlalchemy.sql.expression.ScalarSelect.correlate")'
- en: '[Scalar and Correlated Subqueries](../tutorial/data_select.html#tutorial-scalar-subquery)
    - in the 2.0 tutorial'
  id: totrans-3353
  prefs: []
  type: TYPE_NORMAL
  zh: '[标量和相关子查询](../tutorial/data_select.html#tutorial-scalar-subquery) - 在2.0教程中'
- en: '[PRE651]'
  id: totrans-3354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE651]'
- en: Indicate if this [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") instance should make use of the cache
    key generation scheme used by its immediate superclass.
  id: totrans-3355
  prefs: []
  type: TYPE_NORMAL
  zh: 指示此[`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey "sqlalchemy.sql.traversals.HasCacheKey")实例是否应使用其直接超类使用的缓存密钥生成方案。
- en: The attribute defaults to `None`, which indicates that a construct has not yet
    taken into account whether or not its appropriate for it to participate in caching;
    this is functionally equivalent to setting the value to `False`, except that a
    warning is also emitted.
  id: totrans-3356
  prefs: []
  type: TYPE_NORMAL
  zh: 该属性默认为`None`，表示构造尚未考虑是否适合参与缓存; 这在功能上等同于将值设置为`False`，只是还会发出警告。
- en: This flag can be set to `True` on a particular class, if the SQL that corresponds
    to the object does not change based on attributes which are local to this class,
    and not its superclass.
  id: totrans-3357
  prefs: []
  type: TYPE_NORMAL
  zh: 如果与此类本地而不是其超类相关的属性的SQL不会根据对象更改，则可以在特定类上将此标志设置为`True`。
- en: See also
  id: totrans-3358
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Enabling Caching Support for Custom Constructs](compiler.html#compilerext-caching)
    - General guideslines for setting the [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute for third-party
    or user defined SQL constructs.'
  id: totrans-3359
  prefs: []
  type: TYPE_NORMAL
  zh: '[为自定义结构启用缓存支持](compiler.html#compilerext-caching) - 设置第三方或用户定义的SQL构造的[`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache")属性的一般指南。'
- en: '[PRE652]'
  id: totrans-3360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE652]'
- en: Apply a ‘grouping’ to this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  id: totrans-3361
  prefs: []
  type: TYPE_NORMAL
  zh: 对这个[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")应用“分组”。
- en: This method is overridden by subclasses to return a “grouping” construct, i.e.
    parenthesis. In particular it’s used by “binary” expressions to provide a grouping
    around themselves when placed into a larger expression, as well as by [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs when placed into the FROM clause
    of another [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select").
    (Note that subqueries should be normally created using the [`Select.alias()`](#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") method, as many platforms require nested
    SELECT statements to be named).
  id: totrans-3362
  prefs: []
  type: TYPE_NORMAL
  zh: 子类覆盖此方法以返回“分组”结构，即括号。 特别是它被“二进制”表达式使用时，用于在放置到较大表达式中时围绕自身提供分组，以及当[`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")构造放置到另一个[`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")的FROM子句中时。 （请注意，子查询通常应使用[`Select.alias()`](#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias")方法创建，因为许多平台要求嵌套的SELECT语句具有名称）。
- en: As expressions are composed together, the application of [`self_group()`](#sqlalchemy.sql.expression.ScalarSelect.self_group
    "sqlalchemy.sql.expression.ScalarSelect.self_group") is automatic - end-user code
    should never need to use this method directly. Note that SQLAlchemy’s clause constructs
    take operator precedence into account - so parenthesis might not be needed, for
    example, in an expression like `x OR (y AND z)` - AND takes precedence over OR.
  id: totrans-3363
  prefs: []
  type: TYPE_NORMAL
  zh: 随着表达式的组合，[`self_group()`](#sqlalchemy.sql.expression.ScalarSelect.self_group
    "sqlalchemy.sql.expression.ScalarSelect.self_group")的应用是自动的 - 最终用户代码不应直接使用此方法。
    请注意，SQLAlchemy的子句构造会考虑运算符优先级 - 因此可能不需要括号，例如，在表达式`x OR (y AND z)`中 - AND优先于OR。
- en: The base [`self_group()`](#sqlalchemy.sql.expression.ScalarSelect.self_group
    "sqlalchemy.sql.expression.ScalarSelect.self_group") method of [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") just returns self.
  id: totrans-3364
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement "sqlalchemy.sql.expression.ClauseElement")的基本[`self_group()`](#sqlalchemy.sql.expression.ScalarSelect.self_group
    "sqlalchemy.sql.expression.ScalarSelect.self_group")方法只返回自身。'
- en: '[PRE653]'
  id: totrans-3365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE653]'
- en: Apply a WHERE clause to the SELECT statement referred to by this [`ScalarSelect`](#sqlalchemy.sql.expression.ScalarSelect
    "sqlalchemy.sql.expression.ScalarSelect").
  id: totrans-3366
  prefs: []
  type: TYPE_NORMAL
  zh: 对此[`ScalarSelect`](#sqlalchemy.sql.expression.ScalarSelect "sqlalchemy.sql.expression.ScalarSelect")引用的SELECT语句应用WHERE子句。
- en: '[PRE654]'
  id: totrans-3367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE654]'
- en: Represents a `SELECT` statement.
  id: totrans-3368
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一个`SELECT`语句。
- en: The [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    object is normally constructed using the [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") function. See that function for details.
  id: totrans-3369
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    对象通常使用 [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    函数构建。请参阅该函数以获取详细信息。'
- en: See also
  id: totrans-3370
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")'
  id: totrans-3371
  prefs: []
  type: TYPE_NORMAL
  zh: '[`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")'
- en: '[Using SELECT Statements](../tutorial/data_select.html#tutorial-selecting-data)
    - in the 2.0 tutorial'
  id: totrans-3372
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 SELECT 语句](../tutorial/data_select.html#tutorial-selecting-data) - 在 2.0
    教程中'
- en: '**Members**'
  id: totrans-3373
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.sql.expression.Select.__init__), [add_columns()](#sqlalchemy.sql.expression.Select.add_columns),
    [add_cte()](#sqlalchemy.sql.expression.Select.add_cte), [alias()](#sqlalchemy.sql.expression.Select.alias),
    [as_scalar()](#sqlalchemy.sql.expression.Select.as_scalar), [c](#sqlalchemy.sql.expression.Select.c),
    [column()](#sqlalchemy.sql.expression.Select.column), [column_descriptions](#sqlalchemy.sql.expression.Select.column_descriptions),
    [columns_clause_froms](#sqlalchemy.sql.expression.Select.columns_clause_froms),
    [correlate()](#sqlalchemy.sql.expression.Select.correlate), [correlate_except()](#sqlalchemy.sql.expression.Select.correlate_except),
    [corresponding_column()](#sqlalchemy.sql.expression.Select.corresponding_column),
    [cte()](#sqlalchemy.sql.expression.Select.cte), [distinct()](#sqlalchemy.sql.expression.Select.distinct),
    [except_()](#sqlalchemy.sql.expression.Select.except_), [except_all()](#sqlalchemy.sql.expression.Select.except_all),
    [execution_options()](#sqlalchemy.sql.expression.Select.execution_options), [exists()](#sqlalchemy.sql.expression.Select.exists),
    [exported_columns](#sqlalchemy.sql.expression.Select.exported_columns), [fetch()](#sqlalchemy.sql.expression.Select.fetch),
    [filter()](#sqlalchemy.sql.expression.Select.filter), [filter_by()](#sqlalchemy.sql.expression.Select.filter_by),
    [from_statement()](#sqlalchemy.sql.expression.Select.from_statement), [froms](#sqlalchemy.sql.expression.Select.froms),
    [get_children()](#sqlalchemy.sql.expression.Select.get_children), [get_execution_options()](#sqlalchemy.sql.expression.Select.get_execution_options),
    [get_final_froms()](#sqlalchemy.sql.expression.Select.get_final_froms), [get_label_style()](#sqlalchemy.sql.expression.Select.get_label_style),
    [group_by()](#sqlalchemy.sql.expression.Select.group_by), [having()](#sqlalchemy.sql.expression.Select.having),
    [inherit_cache](#sqlalchemy.sql.expression.Select.inherit_cache), [inner_columns](#sqlalchemy.sql.expression.Select.inner_columns),
    [intersect()](#sqlalchemy.sql.expression.Select.intersect), [intersect_all()](#sqlalchemy.sql.expression.Select.intersect_all),
    [is_derived_from()](#sqlalchemy.sql.expression.Select.is_derived_from), [join()](#sqlalchemy.sql.expression.Select.join),
    [join_from()](#sqlalchemy.sql.expression.Select.join_from), [label()](#sqlalchemy.sql.expression.Select.label),
    [lateral()](#sqlalchemy.sql.expression.Select.lateral), [limit()](#sqlalchemy.sql.expression.Select.limit),
    [offset()](#sqlalchemy.sql.expression.Select.offset), [options()](#sqlalchemy.sql.expression.Select.options),
    [order_by()](#sqlalchemy.sql.expression.Select.order_by), [outerjoin()](#sqlalchemy.sql.expression.Select.outerjoin),
    [outerjoin_from()](#sqlalchemy.sql.expression.Select.outerjoin_from), [prefix_with()](#sqlalchemy.sql.expression.Select.prefix_with),
    [reduce_columns()](#sqlalchemy.sql.expression.Select.reduce_columns), [replace_selectable()](#sqlalchemy.sql.expression.Select.replace_selectable),
    [scalar_subquery()](#sqlalchemy.sql.expression.Select.scalar_subquery), [select()](#sqlalchemy.sql.expression.Select.select),
    [select_from()](#sqlalchemy.sql.expression.Select.select_from), [selected_columns](#sqlalchemy.sql.expression.Select.selected_columns),
    [self_group()](#sqlalchemy.sql.expression.Select.self_group), [set_label_style()](#sqlalchemy.sql.expression.Select.set_label_style),
    [slice()](#sqlalchemy.sql.expression.Select.slice), [subquery()](#sqlalchemy.sql.expression.Select.subquery),
    [suffix_with()](#sqlalchemy.sql.expression.Select.suffix_with), [union()](#sqlalchemy.sql.expression.Select.union),
    [union_all()](#sqlalchemy.sql.expression.Select.union_all), [where()](#sqlalchemy.sql.expression.Select.where),
    [whereclause](#sqlalchemy.sql.expression.Select.whereclause), [with_for_update()](#sqlalchemy.sql.expression.Select.with_for_update),
    [with_hint()](#sqlalchemy.sql.expression.Select.with_hint), [with_only_columns()](#sqlalchemy.sql.expression.Select.with_only_columns),
    [with_statement_hint()](#sqlalchemy.sql.expression.Select.with_statement_hint)'
  id: totrans-3374
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.sql.expression.Select.__init__), [add_columns()](#sqlalchemy.sql.expression.Select.add_columns),
    [add_cte()](#sqlalchemy.sql.expression.Select.add_cte), [alias()](#sqlalchemy.sql.expression.Select.alias),
    [as_scalar()](#sqlalchemy.sql.expression.Select.as_scalar), [c](#sqlalchemy.sql.expression.Select.c),
    [column()](#sqlalchemy.sql.expression.Select.column), [column_descriptions](#sqlalchemy.sql.expression.Select.column_descriptions),
    [columns_clause_froms](#sqlalchemy.sql.expression.Select.columns_clause_froms),
    [correlate()](#sqlalchemy.sql.expression.Select.correlate), [correlate_except()](#sqlalchemy.sql.expression.Select.correlate_except),
    [corresponding_column()](#sqlalchemy.sql.expression.Select.corresponding_column),
    [cte()](#sqlalchemy.sql.expression.Select.cte), [distinct()](#sqlalchemy.sql.expression.Select.distinct),
    [except_()](#sqlalchemy.sql.expression.Select.except_), [except_all()](#sqlalchemy.sql.expression.Select.except_all),
    [execution_options()](#sqlalchemy.sql.expression.Select.execution_options), [exists()](#sqlalchemy.sql.expression.Select.exists),
    [exported_columns](#sqlalchemy.sql.expression.Select.exported_columns), [fetch()](#sqlalchemy.sql.expression.Select.fetch),
    [filter()](#sqlalchemy.sql.expression.Select.filter), [filter_by()](#sqlalchemy.sql.expression.Select.filter_by),
    [from_statement()](#sqlalchemy.sql.expression.Select.from_statement), [froms](#sqlalchemy.sql.expression.Select.froms),
    [get_children()](#sqlalchemy.sql.expression.Select.get_children), [get_execution_options()](#sqlalchemy.sql.expression.Select.get_execution_options),
    [get_final_froms()](#sqlalchemy.sql.expression.Select.get_final_froms), [get_label_style()](#sqlalchemy.sql.expression.Select.get_label_style),
    [group_by()](#sqlalchemy.sql.expression.Select.group_by), [having()](#sqlalchemy.sql.expression.Select.having),
    [inherit_cache](#sqlalchemy.sql.expression.Select.inherit_cache), [inner_columns](#sqlalchemy.sql.expression.Select.inner_columns),
    [intersect()](#sqlalchemy.sql.expression.Select.intersect), [intersect_all()](#sqlalchemy.sql.expression.Select.intersect_all),
    [is_derived_from()](#sqlalchemy.sql.expression.Select.is_derived_from), [join()](#sqlalchemy.sql.expression.Select.join),
    [join_from()](#sqlalchemy.sql.expression.Select.join_from), [label()](#sqlalchemy.sql.expression.Select.label),
    [lateral()](#sqlalchemy.sql.expression.Select.lateral), [limit()](#sqlalchemy.sql.expression.Select.limit),
    [offset()](#sqlalchemy.sql.expression.Select.offset), [options()](#sqlalchemy.sql.expression.Select.options),
    [order_by()](#sqlalchemy.sql.expression.Select.order_by), [outerjoin()](#sqlalchemy.sql.expression.Select.outerjoin),
    [outerjoin_from()](#sqlalchemy.sql.expression.Select.outerjoin_from), [prefix_with()](#sqlalchemy.sql.expression.Select.prefix_with),
    [reduce_columns()](#sqlalchemy.sql.expression.Select.reduce_columns), [replace_selectable()](#sqlalchemy.sql.expression.Select.replace_selectable),
    [scalar_subquery()](#sqlalchemy.sql.expression.Select.scalar_subquery), [select()](#sqlalchemy.sql.expression.Select.select),
    [select_from()](#sqlalchemy.sql.expression.Select.select_from), [selected_columns](#sqlalchemy.sql.expression.Select.selected_columns),
    [self_group()](#sqlalchemy.sql.expression.Select.self_group), [set_label_style()](#sqlalchemy.sql.expression.Select.set_label_style),
    [slice()](#sqlalchemy.sql.expression.Select.slice), [subquery()](#sqlalchemy.sql.expression.Select.subquery),
    [suffix_with()](#sqlalchemy.sql.expression.Select.suffix_with), [union()](#sqlalchemy.sql.expression.Select.union),
    [union_all()](#sqlalchemy.sql.expression.Select.union_all), [where()](#sqlalchemy.sql.expression.Select.where),
    [whereclause](#sqlalchemy.sql.expression.Select.whereclause), [with_for_update()](#sqlalchemy.sql.expression.Select.with_for_update),
    [with_hint()](#sqlalchemy.sql.expression.Select.with_hint), [with_only_columns()](#sqlalchemy.sql.expression.Select.with_only_columns),
    [with_statement_hint()](#sqlalchemy.sql.expression.Select.with_statement_hint)'
- en: '**Class signature**'
  id: totrans-3375
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") ([`sqlalchemy.sql.expression.HasPrefixes`](#sqlalchemy.sql.expression.HasPrefixes
    "sqlalchemy.sql.expression.HasPrefixes"), [`sqlalchemy.sql.expression.HasSuffixes`](#sqlalchemy.sql.expression.HasSuffixes
    "sqlalchemy.sql.expression.HasSuffixes"), `sqlalchemy.sql.expression.HasHints`,
    `sqlalchemy.sql.expression.HasCompileState`, `sqlalchemy.sql.expression._SelectFromElements`,
    [`sqlalchemy.sql.expression.GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect"), `sqlalchemy.sql.expression.TypedReturnsRows`)
  id: totrans-3376
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.expression.Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    ([`sqlalchemy.sql.expression.HasPrefixes`](#sqlalchemy.sql.expression.HasPrefixes
    "sqlalchemy.sql.expression.HasPrefixes"), [`sqlalchemy.sql.expression.HasSuffixes`](#sqlalchemy.sql.expression.HasSuffixes
    "sqlalchemy.sql.expression.HasSuffixes"), `sqlalchemy.sql.expression.HasHints`,
    `sqlalchemy.sql.expression.HasCompileState`, `sqlalchemy.sql.expression._SelectFromElements`,
    [`sqlalchemy.sql.expression.GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect"), `sqlalchemy.sql.expression.TypedReturnsRows`)
- en: '[PRE655]'
  id: totrans-3377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE655]'
- en: Construct a new [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select").
  id: totrans-3378
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个新的 [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")。
- en: The public constructor for [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    is the [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    function.
  id: totrans-3379
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    的公共构造函数是 [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    函数。'
- en: '[PRE656]'
  id: totrans-3380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE656]'
- en: Return a new [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    construct with the given entities appended to its columns clause.
  id: totrans-3381
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的 [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    构造，其中给定的实体附加到其列子句中。
- en: 'E.g.:'
  id: totrans-3382
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE657]'
  id: totrans-3383
  prefs: []
  type: TYPE_PRE
  zh: '[PRE657]'
- en: The original expressions in the columns clause remain in place. To replace the
    original expressions with new ones, see the method [`Select.with_only_columns()`](#sqlalchemy.sql.expression.Select.with_only_columns
    "sqlalchemy.sql.expression.Select.with_only_columns").
  id: totrans-3384
  prefs: []
  type: TYPE_NORMAL
  zh: 列子句中的原始表达式保持不变。要用新表达式替换原始表达式，请参阅方法 [`Select.with_only_columns()`](#sqlalchemy.sql.expression.Select.with_only_columns
    "sqlalchemy.sql.expression.Select.with_only_columns")。
- en: 'Parameters:'
  id: totrans-3385
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '***entities** – column, table, or other entity expressions to be added to the
    columns clause'
  id: totrans-3386
  prefs: []
  type: TYPE_NORMAL
  zh: '***entities** – 要添加到列子句的列、表或其他实体表达式'
- en: See also
  id: totrans-3387
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Select.with_only_columns()`](#sqlalchemy.sql.expression.Select.with_only_columns
    "sqlalchemy.sql.expression.Select.with_only_columns") - replaces existing expressions
    rather than appending.'
  id: totrans-3388
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.with_only_columns()`](#sqlalchemy.sql.expression.Select.with_only_columns
    "sqlalchemy.sql.expression.Select.with_only_columns") - 替换现有表达式而不是附加。'
- en: '[Selecting Multiple ORM Entities Simultaneously](../orm/queryguide/select.html#orm-queryguide-select-multiple-entities)
    - ORM-centric example'
  id: totrans-3389
  prefs: []
  type: TYPE_NORMAL
  zh: '[同时选择多个 ORM 实体](../orm/queryguide/select.html#orm-queryguide-select-multiple-entities)
    - 以 ORM 为中心的示例'
- en: '[PRE658]'
  id: totrans-3390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE658]'
- en: '*inherited from the* [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") *method of* [`HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE")'
  id: totrans-3391
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE "sqlalchemy.sql.expression.HasCTE")
    *方法的* [`HasCTE`](#sqlalchemy.sql.expression.HasCTE "sqlalchemy.sql.expression.HasCTE")'
- en: Add one or more [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    constructs to this statement.
  id: totrans-3392
  prefs: []
  type: TYPE_NORMAL
  zh: 将一个或多个 [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    构造添加到此语句中。
- en: This method will associate the given [`CTE`](#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE") constructs with the parent statement such that
    they will each be unconditionally rendered in the WITH clause of the final statement,
    even if not referenced elsewhere within the statement or any sub-selects.
  id: totrans-3393
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法将 [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    构造与父语句关联，以便它们将分别无条件地呈现在最终语句的 WITH 子句中，即使在语句或任何子查询中没有其他地方引用它们。
- en: The optional [`HasCTE.add_cte.nest_here`](#sqlalchemy.sql.expression.HasCTE.add_cte.params.nest_here
    "sqlalchemy.sql.expression.HasCTE.add_cte") parameter when set to True will have
    the effect that each given [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    will render in a WITH clause rendered directly along with this statement, rather
    than being moved to the top of the ultimate rendered statement, even if this statement
    is rendered as a subquery within a larger statement.
  id: totrans-3394
  prefs: []
  type: TYPE_NORMAL
  zh: 当可选的 [`HasCTE.add_cte.nest_here`](#sqlalchemy.sql.expression.HasCTE.add_cte.params.nest_here
    "sqlalchemy.sql.expression.HasCTE.add_cte") 参数设置为 True 时，每个给定的 [`CTE`](#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE") 将直接在此语句中渲染为 WITH 子句，而不是被移动到最终渲染的语句的顶部，即使此语句被渲染为较大语句内的子查询也是如此。
- en: This method has two general uses. One is to embed CTE statements that serve
    some purpose without being referenced explicitly, such as the use case of embedding
    a DML statement such as an INSERT or UPDATE as a CTE inline with a primary statement
    that may draw from its results indirectly. The other is to provide control over
    the exact placement of a particular series of CTE constructs that should remain
    rendered directly in terms of a particular statement that may be nested in a larger
    statement.
  id: totrans-3395
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法有两个一般用途。一个是嵌入某些用途的 CTE 语句，而不需要显式引用，例如将 DML 语句（如 INSERT 或 UPDATE）作为 CTE 内联到可能间接从其结果中获取的主语句中的用例。另一个是提供对一系列特定
    CTE 构造的精确放置控制，这些构造应保持直接渲染为可能嵌套在较大语句中的特定语句。
- en: 'E.g.:'
  id: totrans-3396
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE659]'
  id: totrans-3397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE659]'
- en: 'Would render:'
  id: totrans-3398
  prefs: []
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE660]'
  id: totrans-3399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE660]'
- en: Above, the “anon_1” CTE is not referenced in the SELECT statement, however still
    accomplishes the task of running an INSERT statement.
  id: totrans-3400
  prefs: []
  type: TYPE_NORMAL
  zh: 上述中，“anon_1” CTE 在 SELECT 语句中没有被引用，但仍完成了运行 INSERT 语句的任务。
- en: 'Similarly in a DML-related context, using the PostgreSQL [`Insert`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Insert
    "sqlalchemy.dialects.postgresql.Insert") construct to generate an “upsert”:'
  id: totrans-3401
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，在与 DML 相关的上下文中，使用 PostgreSQL [`Insert`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Insert
    "sqlalchemy.dialects.postgresql.Insert") 构造来生成“upsert”：
- en: '[PRE661]'
  id: totrans-3402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE661]'
- en: 'The above statement renders as:'
  id: totrans-3403
  prefs: []
  type: TYPE_NORMAL
  zh: 上述语句的渲染结果为：
- en: '[PRE662]'
  id: totrans-3404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE662]'
- en: New in version 1.4.21.
  id: totrans-3405
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4.21 中新增。
- en: 'Parameters:'
  id: totrans-3406
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*ctes` –'
  id: totrans-3407
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*ctes` –'
- en: zero or more [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    constructs.
  id: totrans-3408
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 零个或多个[`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    构造。
- en: 'Changed in version 2.0: Multiple CTE instances are accepted'
  id: totrans-3409
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 2.0 版本中的更改：接受多个 CTE 实例
- en: '`nest_here` –'
  id: totrans-3410
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nest_here` –'
- en: if True, the given CTE or CTEs will be rendered as though they specified the
    [`HasCTE.cte.nesting`](#sqlalchemy.sql.expression.HasCTE.cte.params.nesting "sqlalchemy.sql.expression.HasCTE.cte")
    flag to `True` when they were added to this [`HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE"). Assuming the given CTEs are not referenced
    in an outer-enclosing statement as well, the CTEs given should render at the level
    of this statement when this flag is given.
  id: totrans-3411
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果为 True，则给定的 CTE 或 CTE 将渲染为当它们添加到此 [`HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE") 时指定了 [`HasCTE.cte.nesting`](#sqlalchemy.sql.expression.HasCTE.cte.params.nesting
    "sqlalchemy.sql.expression.HasCTE.cte") 标志为 True。假设给定的 CTE 在外部封闭语句中也没有被引用，则在给定此标志时，这些给定的
    CTE 应该在此语句的级别上渲染。
- en: New in version 2.0.
  id: totrans-3412
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版本 2.0 中新增。
- en: See also
  id: totrans-3413
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`HasCTE.cte.nesting`](#sqlalchemy.sql.expression.HasCTE.cte.params.nesting
    "sqlalchemy.sql.expression.HasCTE.cte")'
  id: totrans-3414
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`HasCTE.cte.nesting`](#sqlalchemy.sql.expression.HasCTE.cte.params.nesting
    "sqlalchemy.sql.expression.HasCTE.cte")'
- en: '[PRE663]'
  id: totrans-3415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE663]'
- en: '*inherited from the* [`SelectBase.alias()`](#sqlalchemy.sql.expression.SelectBase.alias
    "sqlalchemy.sql.expression.SelectBase.alias") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  id: totrans-3416
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`SelectBase.alias()`](#sqlalchemy.sql.expression.SelectBase.alias "sqlalchemy.sql.expression.SelectBase.alias")
    *方法继承的* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")'
- en: Return a named subquery against this [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase").
  id: totrans-3417
  prefs: []
  type: TYPE_NORMAL
  zh: 返回针对此 [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")
    的命名子查询。
- en: For a [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")
    (as opposed to a [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")),
    this returns a [`Subquery`](#sqlalchemy.sql.expression.Subquery "sqlalchemy.sql.expression.Subquery")
    object which behaves mostly the same as the [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") object that is used with a [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-3418
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")（与
    [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    相对），这返回一个 [`Subquery`](#sqlalchemy.sql.expression.Subquery "sqlalchemy.sql.expression.Subquery")
    对象，其行为大部分与 [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    中使用的 [`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    对象相同。
- en: 'Changed in version 1.4: The [`SelectBase.alias()`](#sqlalchemy.sql.expression.SelectBase.alias
    "sqlalchemy.sql.expression.SelectBase.alias") method is now a synonym for the
    [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery "sqlalchemy.sql.expression.SelectBase.subquery")
    method.'
  id: totrans-3419
  prefs: []
  type: TYPE_NORMAL
  zh: 自 1.4 版更改：[`SelectBase.alias()`](#sqlalchemy.sql.expression.SelectBase.alias
    "sqlalchemy.sql.expression.SelectBase.alias") 方法现在是 [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") 方法的同义词。
- en: '[PRE664]'
  id: totrans-3420
  prefs: []
  type: TYPE_PRE
  zh: '[PRE664]'
- en: '*inherited from the* [`SelectBase.as_scalar()`](#sqlalchemy.sql.expression.SelectBase.as_scalar
    "sqlalchemy.sql.expression.SelectBase.as_scalar") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  id: totrans-3421
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SelectBase.as_scalar()`](#sqlalchemy.sql.expression.SelectBase.as_scalar
    "sqlalchemy.sql.expression.SelectBase.as_scalar") *方法的* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
- en: 'Deprecated since version 1.4: The [`SelectBase.as_scalar()`](#sqlalchemy.sql.expression.SelectBase.as_scalar
    "sqlalchemy.sql.expression.SelectBase.as_scalar") method is deprecated and will
    be removed in a future release. Please refer to [`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery").'
  id: totrans-3422
  prefs: []
  type: TYPE_NORMAL
  zh: 自 1.4 版弃用：[`SelectBase.as_scalar()`](#sqlalchemy.sql.expression.SelectBase.as_scalar
    "sqlalchemy.sql.expression.SelectBase.as_scalar") 方法已弃用，将在将来的版本中移除。请参考 [`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery")。
- en: '[PRE665]'
  id: totrans-3423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE665]'
- en: '*inherited from the* [`SelectBase.c`](#sqlalchemy.sql.expression.SelectBase.c
    "sqlalchemy.sql.expression.SelectBase.c") *attribute of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  id: totrans-3424
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SelectBase.c`](#sqlalchemy.sql.expression.SelectBase.c "sqlalchemy.sql.expression.SelectBase.c")
    *属性的* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")'
- en: 'Deprecated since version 1.4: The [`SelectBase.c`](#sqlalchemy.sql.expression.SelectBase.c
    "sqlalchemy.sql.expression.SelectBase.c") and `SelectBase.columns` attributes
    are deprecated and will be removed in a future release; these attributes implicitly
    create a subquery that should be explicit. Please call [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") first in order to create a subquery,
    which then contains this attribute. To access the columns that this SELECT object
    SELECTs from, use the [`SelectBase.selected_columns`](#sqlalchemy.sql.expression.SelectBase.selected_columns
    "sqlalchemy.sql.expression.SelectBase.selected_columns") attribute.'
  id: totrans-3425
  prefs: []
  type: TYPE_NORMAL
  zh: 自 1.4 版弃用：[`SelectBase.c`](#sqlalchemy.sql.expression.SelectBase.c "sqlalchemy.sql.expression.SelectBase.c")
    和 `SelectBase.columns` 属性已弃用，将在将来的版本中移除；这些属性隐式创建一个应该显式的子查询。请首先调用 [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") 来创建一个子查询，然后包含此属性。要访问此 SELECT
    对象从中选择的列，请使用 [`SelectBase.selected_columns`](#sqlalchemy.sql.expression.SelectBase.selected_columns
    "sqlalchemy.sql.expression.SelectBase.selected_columns") 属性。
- en: '[PRE666]'
  id: totrans-3426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE666]'
- en: Return a new [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    construct with the given column expression added to its columns clause.
  id: totrans-3427
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个带有给定列表达式添加到其列子句的新 [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    结构。
- en: 'Deprecated since version 1.4: The [`Select.column()`](#sqlalchemy.sql.expression.Select.column
    "sqlalchemy.sql.expression.Select.column") method is deprecated and will be removed
    in a future release. Please use [`Select.add_columns()`](#sqlalchemy.sql.expression.Select.add_columns
    "sqlalchemy.sql.expression.Select.add_columns")'
  id: totrans-3428
  prefs: []
  type: TYPE_NORMAL
  zh: 自 1.4 版弃用：[`Select.column()`](#sqlalchemy.sql.expression.Select.column "sqlalchemy.sql.expression.Select.column")
    方法已弃用，将在将来的版本中移除。请使用 [`Select.add_columns()`](#sqlalchemy.sql.expression.Select.add_columns
    "sqlalchemy.sql.expression.Select.add_columns")
- en: 'E.g.:'
  id: totrans-3429
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE667]'
  id: totrans-3430
  prefs: []
  type: TYPE_PRE
  zh: '[PRE667]'
- en: See the documentation for [`Select.with_only_columns()`](#sqlalchemy.sql.expression.Select.with_only_columns
    "sqlalchemy.sql.expression.Select.with_only_columns") for guidelines on adding
    /replacing the columns of a [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    object.
  id: totrans-3431
  prefs: []
  type: TYPE_NORMAL
  zh: 有关如何添加/替换[`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")对象的列的指南，请参阅[`Select.with_only_columns()`](#sqlalchemy.sql.expression.Select.with_only_columns
    "sqlalchemy.sql.expression.Select.with_only_columns")的文档。
- en: '[PRE668]'
  id: totrans-3432
  prefs: []
  type: TYPE_PRE
  zh: '[PRE668]'
- en: Return a [plugin-enabled](../glossary.html#term-plugin-enabled) ‘column descriptions’
    structure referring to the columns which are SELECTed by this statement.
  id: totrans-3433
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个[插件启用](../glossary.html#term-plugin-enabled)的“列描述”结构，指的是此语句所选的列。
- en: This attribute is generally useful when using the ORM, as an extended structure
    which includes information about mapped entities is returned. The section [Inspecting
    entities and columns from ORM-enabled SELECT and DML statements](../orm/queryguide/api.html#queryguide-inspection)
    contains more background.
  id: totrans-3434
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用ORM时，此属性通常很有用，因为它返回一个包含有关映射实体信息的扩展结构。部分[检查来自ORM启用的SELECT和DML语句的实体和列](../orm/queryguide/api.html#queryguide-inspection)包含更多背景信息。
- en: 'For a Core-only statement, the structure returned by this accessor is derived
    from the same objects that are returned by the [`Select.selected_columns`](#sqlalchemy.sql.expression.Select.selected_columns
    "sqlalchemy.sql.expression.Select.selected_columns") accessor, formatted as a
    list of dictionaries which contain the keys `name`, `type` and `expr`, which indicate
    the column expressions to be selected:'
  id: totrans-3435
  prefs: []
  type: TYPE_NORMAL
  zh: 对于仅限于Core的语句，此访问器返回的结构源自[`Select.selected_columns`](#sqlalchemy.sql.expression.Select.selected_columns
    "sqlalchemy.sql.expression.Select.selected_columns")访问器返回的相同对象，格式为包含键`name`、`type`和`expr`的字典列表，这些键指示要选择的列表达式：
- en: '[PRE669]'
  id: totrans-3436
  prefs: []
  type: TYPE_PRE
  zh: '[PRE669]'
- en: 'Changed in version 1.4.33: The [`Select.column_descriptions`](#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions") attribute returns a structure
    for a Core-only set of entities, not just ORM-only entities.'
  id: totrans-3437
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4.33版本更改：[`Select.column_descriptions`](#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions")属性返回一个仅限于Core的实体集结构，而不仅仅是ORM的实体。
- en: See also
  id: totrans-3438
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`UpdateBase.entity_description`](dml.html#sqlalchemy.sql.expression.UpdateBase.entity_description
    "sqlalchemy.sql.expression.UpdateBase.entity_description") - entity information
    for an [`insert()`](dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert"),
    [`update()`](dml.html#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update"),
    or [`delete()`](dml.html#sqlalchemy.sql.expression.delete "sqlalchemy.sql.expression.delete")'
  id: totrans-3439
  prefs: []
  type: TYPE_NORMAL
  zh: '[`UpdateBase.entity_description`](dml.html#sqlalchemy.sql.expression.UpdateBase.entity_description
    "sqlalchemy.sql.expression.UpdateBase.entity_description") - [`insert()`](dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert")、[`update()`](dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update")或[`delete()`](dml.html#sqlalchemy.sql.expression.delete
    "sqlalchemy.sql.expression.delete")的实体信息'
- en: '[Inspecting entities and columns from ORM-enabled SELECT and DML statements](../orm/queryguide/api.html#queryguide-inspection)
    - ORM background'
  id: totrans-3440
  prefs: []
  type: TYPE_NORMAL
  zh: '[检查来自ORM启用的SELECT和DML语句的实体和列](../orm/queryguide/api.html#queryguide-inspection)
    - ORM背景'
- en: '[PRE670]'
  id: totrans-3441
  prefs: []
  type: TYPE_PRE
  zh: '[PRE670]'
- en: Return the set of [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    objects implied by the columns clause of this SELECT statement.
  id: totrans-3442
  prefs: []
  type: TYPE_NORMAL
  zh: 返回由此SELECT语句的列子句暗示的[`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")对象集。
- en: New in version 1.4.23.
  id: totrans-3443
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4.23中的新功能。
- en: See also
  id: totrans-3444
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Select.froms`](#sqlalchemy.sql.expression.Select.froms "sqlalchemy.sql.expression.Select.froms")
    - “final” FROM list taking the full statement into account'
  id: totrans-3445
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.froms`](#sqlalchemy.sql.expression.Select.froms "sqlalchemy.sql.expression.Select.froms")
    - 考虑完整语句的“最终”FROM列表'
- en: '[`Select.with_only_columns()`](#sqlalchemy.sql.expression.Select.with_only_columns
    "sqlalchemy.sql.expression.Select.with_only_columns") - makes use of this collection
    to set up a new FROM list'
  id: totrans-3446
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.with_only_columns()`](#sqlalchemy.sql.expression.Select.with_only_columns
    "sqlalchemy.sql.expression.Select.with_only_columns") - 使用此集合设置新的FROM列表'
- en: '[PRE671]'
  id: totrans-3447
  prefs: []
  type: TYPE_PRE
  zh: '[PRE671]'
- en: Return a new [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    which will correlate the given FROM clauses to that of an enclosing [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select").
  id: totrans-3448
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的[`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")，它将相关联给定的FROM子句与封闭的[`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select")。
- en: Calling this method turns off the [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") object’s default behavior of “auto-correlation”.
    Normally, FROM elements which appear in a [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") that encloses this one via its [WHERE clause](../glossary.html#term-WHERE-clause),
    ORDER BY, HAVING or [columns clause](../glossary.html#term-columns-clause) will
    be omitted from this [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    object’s [FROM clause](../glossary.html#term-FROM-clause). Setting an explicit
    correlation collection using the [`Select.correlate()`](#sqlalchemy.sql.expression.Select.correlate
    "sqlalchemy.sql.expression.Select.correlate") method provides a fixed list of
    FROM objects that can potentially take place in this process.
  id: totrans-3449
  prefs: []
  type: TYPE_NORMAL
  zh: 调用此方法会关闭 [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    对象的“自动关联”默认行为。通常，通过其 [WHERE 子句](../glossary.html#term-WHERE-clause)、ORDER BY、HAVING
    或 [columns 子句](../glossary.html#term-columns-clause) 对此 [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") 对象进行了包围的 [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") 中出现的 FROM 元素将从此 [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") 对象的 [FROM 子句](../glossary.html#term-FROM-clause)
    中省略。使用 [`Select.correlate()`](#sqlalchemy.sql.expression.Select.correlate "sqlalchemy.sql.expression.Select.correlate")
    方法设置一个显式的关联集合，提供了一个可能参与此过程的固定 FROM 对象列表。
- en: When [`Select.correlate()`](#sqlalchemy.sql.expression.Select.correlate "sqlalchemy.sql.expression.Select.correlate")
    is used to apply specific FROM clauses for correlation, the FROM elements become
    candidates for correlation regardless of how deeply nested this [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") object is, relative to an enclosing [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") which refers to the same FROM object. This
    is in contrast to the behavior of “auto-correlation” which only correlates to
    an immediate enclosing [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select").
    Multi-level correlation ensures that the link between enclosed and enclosing [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") is always via at least one WHERE/ORDER BY/HAVING/columns
    clause in order for correlation to take place.
  id: totrans-3450
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 [`Select.correlate()`](#sqlalchemy.sql.expression.Select.correlate "sqlalchemy.sql.expression.Select.correlate")
    来应用特定的 FROM 子句进行关联时，无论这个 [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    对象相对于引用相同 FROM 对象的包围 [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    有多深嵌套，FROM 元素都成为关联的候选对象。这与“自动关联”的行为形成对比，后者仅关联到一个直接包围的 [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select")。多级关联确保封闭和包围的 [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") 之间的链接始终通过至少一个 WHERE/ORDER BY/HAVING/columns
    子句以便进行关联。
- en: If `None` is passed, the [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    object will correlate none of its FROM entries, and all will render unconditionally
    in the local FROM clause.
  id: totrans-3451
  prefs: []
  type: TYPE_NORMAL
  zh: 如果传递了`None`，[`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    对象将不对其任何 FROM 条目进行关联，所有条目都将无条件地在本地 FROM 子句中呈现。
- en: 'Parameters:'
  id: totrans-3452
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '***fromclauses** – one or more [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") or other FROM-compatible construct such
    as an ORM mapped entity to become part of the correlate collection; alternatively
    pass a single value `None` to remove all existing correlations.'
  id: totrans-3453
  prefs: []
  type: TYPE_NORMAL
  zh: '***fromclauses** – 一个或多个 [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") 或其他 FROM 兼容的构造，比如 ORM 映射的实体，成为关联集合的一部分；或者传递单个值
    `None` 以删除所有现有的关联。'
- en: See also
  id: totrans-3454
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Select.correlate_except()`](#sqlalchemy.sql.expression.Select.correlate_except
    "sqlalchemy.sql.expression.Select.correlate_except")'
  id: totrans-3455
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.correlate_except()`](#sqlalchemy.sql.expression.Select.correlate_except
    "sqlalchemy.sql.expression.Select.correlate_except")'
- en: '[Scalar and Correlated Subqueries](../tutorial/data_select.html#tutorial-scalar-subquery)'
  id: totrans-3456
  prefs: []
  type: TYPE_NORMAL
  zh: '[标量和相关子查询](../tutorial/data_select.html#tutorial-scalar-subquery)'
- en: '[PRE672]'
  id: totrans-3457
  prefs: []
  type: TYPE_PRE
  zh: '[PRE672]'
- en: Return a new [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    which will omit the given FROM clauses from the auto-correlation process.
  id: totrans-3458
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的 [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")，它将从自动关联过程中省略给定的
    FROM 子句。
- en: Calling [`Select.correlate_except()`](#sqlalchemy.sql.expression.Select.correlate_except
    "sqlalchemy.sql.expression.Select.correlate_except") turns off the [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") object’s default behavior of “auto-correlation”
    for the given FROM elements. An element specified here will unconditionally appear
    in the FROM list, while all other FROM elements remain subject to normal auto-correlation
    behaviors.
  id: totrans-3459
  prefs: []
  type: TYPE_NORMAL
  zh: 调用 [`Select.correlate_except()`](#sqlalchemy.sql.expression.Select.correlate_except
    "sqlalchemy.sql.expression.Select.correlate_except") 会关闭给定 FROM 元素的 [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") 对象的默认行为“自动关联”。在此指定的元素将无条件地出现在 FROM 列表中，而所有其他
    FROM 元素仍然受到正常的自动关联行为的影响。
- en: If `None` is passed, or no arguments are passed, the [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") object will correlate all of its FROM entries.
  id: totrans-3460
  prefs: []
  type: TYPE_NORMAL
  zh: 如果传入 `None`，或者没有传入参数，[`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    对象将关联其所有的 FROM 条目。
- en: 'Parameters:'
  id: totrans-3461
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '***fromclauses** – a list of one or more [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") constructs, or other compatible constructs
    (i.e. ORM-mapped classes) to become part of the correlate-exception collection.'
  id: totrans-3462
  prefs: []
  type: TYPE_NORMAL
  zh: '***fromclauses** – 一个或多个 [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") 构造的列表，或其他兼容的构造（即 ORM 映射的类），将成为关联例外集合的一部分。'
- en: See also
  id: totrans-3463
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`Select.correlate()`](#sqlalchemy.sql.expression.Select.correlate "sqlalchemy.sql.expression.Select.correlate")'
  id: totrans-3464
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.correlate()`](#sqlalchemy.sql.expression.Select.correlate "sqlalchemy.sql.expression.Select.correlate")'
- en: '[Scalar and Correlated Subqueries](../tutorial/data_select.html#tutorial-scalar-subquery)'
  id: totrans-3465
  prefs: []
  type: TYPE_NORMAL
  zh: '[标量和相关子查询](../tutorial/data_select.html#tutorial-scalar-subquery)'
- en: '[PRE673]'
  id: totrans-3466
  prefs: []
  type: TYPE_PRE
  zh: '[PRE673]'
- en: '*inherited from the* [`Selectable.corresponding_column()`](#sqlalchemy.sql.expression.Selectable.corresponding_column
    "sqlalchemy.sql.expression.Selectable.corresponding_column") *method of* [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
  id: totrans-3467
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Selectable.corresponding_column()`](#sqlalchemy.sql.expression.Selectable.corresponding_column
    "sqlalchemy.sql.expression.Selectable.corresponding_column") *方法的* [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
- en: Given a [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"), return the exported [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") object from the [`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") collection of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable") which corresponds to that original [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") via a common ancestor column.
  id: totrans-3468
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个 [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")，从此 [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable") 的导出 [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") 集合中返回与原始 [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") 对应的对象，通过一个共同的祖先列。
- en: 'Parameters:'
  id: totrans-3469
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`column` – the target [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") to be matched.'
  id: totrans-3470
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`column` – 目标 [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") 要匹配的列。'
- en: '`require_embedded` – only return corresponding columns for the given [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"), if the given [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") is actually present within a sub-element
    of this [`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable").
    Normally the column will match if it merely shares a common ancestor with one
    of the exported columns of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable").'
  id: totrans-3471
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`require_embedded` – 仅在给定的 [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") 实际存在于此 [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable") 的子元素中时，才返回对应的列。通常，如果列仅与此 [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable") 的导出列之一共享一个共同的祖先，列就会匹配。'
- en: See also
  id: totrans-3472
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") - the [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") that is used for the operation.'
  id: totrans-3473
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") - 用于操作的 [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")。'
- en: '[`ColumnCollection.corresponding_column()`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection.corresponding_column
    "sqlalchemy.sql.expression.ColumnCollection.corresponding_column") - implementation
    method.'
  id: totrans-3474
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnCollection.corresponding_column()`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection.corresponding_column
    "sqlalchemy.sql.expression.ColumnCollection.corresponding_column") - 实现方法。'
- en: '[PRE674]'
  id: totrans-3475
  prefs: []
  type: TYPE_PRE
  zh: '[PRE674]'
- en: '*inherited from the* [`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte
    "sqlalchemy.sql.expression.HasCTE.cte") *method of* [`HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE")'
  id: totrans-3476
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`HasCTE`](#sqlalchemy.sql.expression.HasCTE "sqlalchemy.sql.expression.HasCTE")
    *的* [`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte "sqlalchemy.sql.expression.HasCTE.cte")
    *方法'
- en: Return a new [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE"),
    or Common Table Expression instance.
  id: totrans-3477
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的 [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")，或
    Common Table Expression 实例。
- en: Common table expressions are a SQL standard whereby SELECT statements can draw
    upon secondary statements specified along with the primary statement, using a
    clause called “WITH”. Special semantics regarding UNION can also be employed to
    allow “recursive” queries, where a SELECT statement can draw upon the set of rows
    that have previously been selected.
  id: totrans-3478
  prefs: []
  type: TYPE_NORMAL
  zh: 公共表达式是 SQL 标准，SELECT 语句可以使用一个称为 “WITH” 的子句与主要语句一起指定的辅助语句。特殊的 UNION 语义也可以被使用，以允许
    “递归” 查询，其中 SELECT 语句可以从先前选择的行集中进行选择。
- en: CTEs can also be applied to DML constructs UPDATE, INSERT and DELETE on some
    databases, both as a source of CTE rows when combined with RETURNING, as well
    as a consumer of CTE rows.
  id: totrans-3479
  prefs: []
  type: TYPE_NORMAL
  zh: CTE 也可以应用于某些数据库上的 DML 构造 UPDATE、INSERT 和 DELETE，既可以作为与 RETURNING 结合使用时 CTE 行的来源，也可以作为
    CTE 行的消费者。
- en: SQLAlchemy detects [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    objects, which are treated similarly to [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") objects, as special elements to be delivered
    to the FROM clause of the statement as well as to a WITH clause at the top of
    the statement.
  id: totrans-3480
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 检测到 [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    对象，这些对象与 [`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    对象类似，被视为要传递到语句的 FROM 子句以及语句顶部 WITH 子句的特殊元素。
- en: For special prefixes such as PostgreSQL “MATERIALIZED” and “NOT MATERIALIZED”,
    the `CTE.prefix_with()` method may be used to establish these.
  id: totrans-3481
  prefs: []
  type: TYPE_NORMAL
  zh: 对于诸如 PostgreSQL 的 “MATERIALIZED” 和 “NOT MATERIALIZED” 等特殊前缀，可以使用 `CTE.prefix_with()`
    方法来建立这些前缀。
- en: 'Changed in version 1.3.13: Added support for prefixes. In particular - MATERIALIZED
    and NOT MATERIALIZED.'
  id: totrans-3482
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本 1.3.13 中更改：增加了对前缀的支持。特别是 - MATERIALIZED 和 NOT MATERIALIZED。
- en: 'Parameters:'
  id: totrans-3483
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`name` – name given to the common table expression. Like [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias"), the name can be left as `None`
    in which case an anonymous symbol will be used at query compile time.'
  id: totrans-3484
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 给公共表达式的名称。与 [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") 类似，如果名称为 `None`，则在查询编译时将使用匿名符号。'
- en: '`recursive` – if `True`, will render `WITH RECURSIVE`. A recursive common table
    expression is intended to be used in conjunction with UNION ALL in order to derive
    rows from those already selected.'
  id: totrans-3485
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`recursive` – 如果为 `True`，将呈现 `WITH RECURSIVE`。递归公共表达式旨在与 UNION ALL 结合使用，以从已经选择的行中导出行。'
- en: '`nesting` –'
  id: totrans-3486
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nesting` –'
- en: if `True`, will render the CTE locally to the statement in which it is referenced.
    For more complex scenarios, the [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") method using the [`HasCTE.add_cte.nest_here`](#sqlalchemy.sql.expression.HasCTE.add_cte.params.nest_here
    "sqlalchemy.sql.expression.HasCTE.add_cte") parameter may also be used to more
    carefully control the exact placement of a particular CTE.
  id: totrans-3487
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果为 `True`，将在引用它的语句中本地呈现 CTE。对于更复杂的场景，可以使用 [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") 方法，并使用 [`HasCTE.add_cte.nest_here`](#sqlalchemy.sql.expression.HasCTE.add_cte.params.nest_here
    "sqlalchemy.sql.expression.HasCTE.add_cte.params.nest_here") 参数来更精确地控制特定 CTE 的确切位置。
- en: New in version 1.4.24.
  id: totrans-3488
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在版本 1.4.24 中新增。
- en: See also
  id: totrans-3489
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte "sqlalchemy.sql.expression.HasCTE.add_cte")'
  id: totrans-3490
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte "sqlalchemy.sql.expression.HasCTE.add_cte")'
- en: The following examples include two from PostgreSQL’s documentation at [https://www.postgresql.org/docs/current/static/queries-with.html](https://www.postgresql.org/docs/current/static/queries-with.html),
    as well as additional examples.
  id: totrans-3491
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例包括两个来自 PostgreSQL 文档的示例[https://www.postgresql.org/docs/current/static/queries-with.html](https://www.postgresql.org/docs/current/static/queries-with.html)，以及其他示例。
- en: 'Example 1, non recursive:'
  id: totrans-3492
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 1，非递归：
- en: '[PRE675]'
  id: totrans-3493
  prefs: []
  type: TYPE_PRE
  zh: '[PRE675]'
- en: 'Example 2, WITH RECURSIVE:'
  id: totrans-3494
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 2，WITH RECURSIVE：
- en: '[PRE676]'
  id: totrans-3495
  prefs: []
  type: TYPE_PRE
  zh: '[PRE676]'
- en: 'Example 3, an upsert using UPDATE and INSERT with CTEs:'
  id: totrans-3496
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 3，使用 CTE 进行更新和插入：
- en: '[PRE677]'
  id: totrans-3497
  prefs: []
  type: TYPE_PRE
  zh: '[PRE677]'
- en: 'Example 4, Nesting CTE (SQLAlchemy 1.4.24 and above):'
  id: totrans-3498
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 4，嵌套 CTE（SQLAlchemy 1.4.24 及以上版本）：
- en: '[PRE678]'
  id: totrans-3499
  prefs: []
  type: TYPE_PRE
  zh: '[PRE678]'
- en: 'The above query will render the second CTE nested inside the first, shown with
    inline parameters below as:'
  id: totrans-3500
  prefs: []
  type: TYPE_NORMAL
  zh: 上述查询将第二个 CTE 嵌套在第一个内部，并显示为内联参数如下：
- en: '[PRE679]'
  id: totrans-3501
  prefs: []
  type: TYPE_PRE
  zh: '[PRE679]'
- en: 'The same CTE can be set up using the [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") method as follows (SQLAlchemy 2.0
    and above):'
  id: totrans-3502
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte "sqlalchemy.sql.expression.HasCTE.add_cte")
    方法设置相同的 CTE，如下所示（SQLAlchemy 2.0 及以上版本）：
- en: '[PRE680]'
  id: totrans-3503
  prefs: []
  type: TYPE_PRE
  zh: '[PRE680]'
- en: 'Example 5, Non-Linear CTE (SQLAlchemy 1.4.28 and above):'
  id: totrans-3504
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 5，非线性 CTE（SQLAlchemy 1.4.28 及以上版本）：
- en: '[PRE681]'
  id: totrans-3505
  prefs: []
  type: TYPE_PRE
  zh: '[PRE681]'
- en: 'The above query will render 2 UNIONs inside the recursive CTE:'
  id: totrans-3506
  prefs: []
  type: TYPE_NORMAL
  zh: 上述查询将在递归 CTE 中呈现 2 个 UNION：
- en: '[PRE682]'
  id: totrans-3507
  prefs: []
  type: TYPE_PRE
  zh: '[PRE682]'
- en: See also
  id: totrans-3508
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Query.cte()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.cte "sqlalchemy.orm.Query.cte")
    - ORM version of [`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte "sqlalchemy.sql.expression.HasCTE.cte").'
  id: totrans-3509
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.cte()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.cte "sqlalchemy.orm.Query.cte")
    - [`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte "sqlalchemy.sql.expression.HasCTE.cte")
    的 ORM 版本。'
- en: '[PRE683]'
  id: totrans-3510
  prefs: []
  type: TYPE_PRE
  zh: '[PRE683]'
- en: Return a new [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    construct which will apply DISTINCT to the SELECT statement overall.
  id: totrans-3511
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的 [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    结构，该结构将整体应用 DISTINCT 到 SELECT 语句。
- en: 'E.g.:'
  id: totrans-3512
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE684]'
  id: totrans-3513
  prefs: []
  type: TYPE_PRE
  zh: '[PRE684]'
- en: 'The above would produce an statement resembling:'
  id: totrans-3514
  prefs: []
  type: TYPE_NORMAL
  zh: 上述将生成类似于的语句：
- en: '[PRE685]'
  id: totrans-3515
  prefs: []
  type: TYPE_PRE
  zh: '[PRE685]'
- en: The method also accepts an `*expr` parameter which produces the PostgreSQL dialect-specific
    `DISTINCT ON` expression. Using this parameter on other backends which don’t support
    this syntax will raise an error.
  id: totrans-3516
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法还接受一个 `*expr` 参数，该参数生成特定于 PostgreSQL 方言的 `DISTINCT ON` 表达式。在不支持此语法的其他后端上使用此参数将引发错误。
- en: 'Parameters:'
  id: totrans-3517
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '***expr** –'
  id: totrans-3518
  prefs: []
  type: TYPE_NORMAL
  zh: '***expr** –'
- en: optional column expressions. When present, the PostgreSQL dialect will render
    a `DISTINCT ON (<expressions>)` construct. A deprecation warning and/or [`CompileError`](exceptions.html#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError") will be raised on other backends.
  id: totrans-3519
  prefs: []
  type: TYPE_NORMAL
  zh: 可选的列表达式。当存在时，PostgreSQL 方言将呈现 `DISTINCT ON (<expressions>)` 结构。在其他后端上会引发弃用警告和/或
    [`CompileError`](exceptions.html#sqlalchemy.exc.CompileError "sqlalchemy.exc.CompileError")。
- en: 'Deprecated since version 1.4: Using *expr in other dialects is deprecated and
    will raise [`CompileError`](exceptions.html#sqlalchemy.exc.CompileError "sqlalchemy.exc.CompileError")
    in a future version.'
  id: totrans-3520
  prefs: []
  type: TYPE_NORMAL
  zh: 自 1.4 版弃用：在其他方言中使用 *expr 已弃用，并将在将来的版本中引发 [`CompileError`](exceptions.html#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError")。
- en: '[PRE686]'
  id: totrans-3521
  prefs: []
  type: TYPE_PRE
  zh: '[PRE686]'
- en: Return a SQL `EXCEPT` of this select() construct against the given selectable
    provided as positional arguments.
  id: totrans-3522
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此 select() 结构相对于以位置参数提供的给定可选择对象的 SQL `EXCEPT`。
- en: 'Parameters:'
  id: totrans-3523
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '***other** –'
  id: totrans-3524
  prefs: []
  type: TYPE_NORMAL
  zh: '***other** –'
- en: one or more elements with which to create a UNION.
  id: totrans-3525
  prefs: []
  type: TYPE_NORMAL
  zh: 一个或多个用于创建 UNION 的元素。
- en: 'Changed in version 1.4.28: multiple elements are now accepted.'
  id: totrans-3526
  prefs: []
  type: TYPE_NORMAL
  zh: 自 1.4.28 版更改：现在接受多个元素。
- en: '[PRE687]'
  id: totrans-3527
  prefs: []
  type: TYPE_PRE
  zh: '[PRE687]'
- en: Return a SQL `EXCEPT ALL` of this select() construct against the given selectables
    provided as positional arguments.
  id: totrans-3528
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此 select() 结构相对于以位置参数提供的给定可选择对象的 SQL `EXCEPT ALL`。
- en: 'Parameters:'
  id: totrans-3529
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '***other** –'
  id: totrans-3530
  prefs: []
  type: TYPE_NORMAL
  zh: '***other** –'
- en: one or more elements with which to create a UNION.
  id: totrans-3531
  prefs: []
  type: TYPE_NORMAL
  zh: 一个或多个用于创建 UNION 的元素。
- en: 'Changed in version 1.4.28: multiple elements are now accepted.'
  id: totrans-3532
  prefs: []
  type: TYPE_NORMAL
  zh: 自 1.4.28 版更改：现在接受多个元素。
- en: '[PRE688]'
  id: totrans-3533
  prefs: []
  type: TYPE_PRE
  zh: '[PRE688]'
- en: '*inherited from the* [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") *method of* [`Executable`](#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")'
  id: totrans-3534
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") *方法的* [`Executable`](#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")'
- en: Set non-SQL options for the statement which take effect during execution.
  id: totrans-3535
  prefs: []
  type: TYPE_NORMAL
  zh: 设置在执行期间生效的语句的非 SQL 选项。
- en: Execution options can be set at many scopes, including per-statement, per-connection,
    or per execution, using methods such as [`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") and parameters which accept
    a dictionary of options such as [`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute") and [`Session.execute.execution_options`](../orm/session_api.html#sqlalchemy.orm.Session.execute.params.execution_options
    "sqlalchemy.orm.Session.execute").
  id: totrans-3536
  prefs: []
  type: TYPE_NORMAL
  zh: 执行选项可以在许多范围内设置，包括每个语句、每个连接或每个执行，使用诸如[`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")和接受选项字典的参数的方法，例如[`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute")和[`Session.execute.execution_options`](../orm/session_api.html#sqlalchemy.orm.Session.execute.params.execution_options
    "sqlalchemy.orm.Session.execute")。
- en: The primary characteristic of an execution option, as opposed to other kinds
    of options such as ORM loader options, is that **execution options never affect
    the compiled SQL of a query, only things that affect how the SQL statement itself
    is invoked or how results are fetched**. That is, execution options are not part
    of what’s accommodated by SQL compilation nor are they considered part of the
    cached state of a statement.
  id: totrans-3537
  prefs: []
  type: TYPE_NORMAL
  zh: 与ORM加载器选项等其他类型的选项不同，执行选项的主要特征在于**执行选项从不影响查询的编译SQL，只影响SQL语句本身如何被调用或结果如何被提取**。也就是说，执行选项不是SQL编译所容纳的部分，也不被视为语句的缓存状态的一部分。
- en: 'The [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") method is [generative](../glossary.html#term-generative),
    as is the case for the method as applied to the [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") and [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") objects, which means when the method is called, a copy
    of the object is returned, which applies the given parameters to that new copy,
    but leaves the original unchanged:'
  id: totrans-3538
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")方法是[生成式](../glossary.html#term-generative)的，就像适用于[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")和[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象的方法一样，这意味着当调用该方法时，将返回对象的副本，该副本将给定参数应用于该新副本，但不更改原始对象：'
- en: '[PRE689]'
  id: totrans-3539
  prefs: []
  type: TYPE_PRE
  zh: '[PRE689]'
- en: An exception to this behavior is the [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object, where the [`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") method is explicitly **not**
    generative.
  id: totrans-3540
  prefs: []
  type: TYPE_NORMAL
  zh: 对此行为的一个例外是[`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")对象，在这里[`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")方法明确地**不**是生成式的。
- en: 'The kinds of options that may be passed to [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") and other related methods
    and parameter dictionaries include parameters that are explicitly consumed by
    SQLAlchemy Core or ORM, as well as arbitrary keyword arguments not defined by
    SQLAlchemy, which means the methods and/or parameter dictionaries may be used
    for user-defined parameters that interact with custom code, which may access the
    parameters using methods such as [`Executable.get_execution_options()`](#sqlalchemy.sql.expression.Executable.get_execution_options
    "sqlalchemy.sql.expression.Executable.get_execution_options") and [`Connection.get_execution_options()`](connections.html#sqlalchemy.engine.Connection.get_execution_options
    "sqlalchemy.engine.Connection.get_execution_options"), or within selected event
    hooks using a dedicated `execution_options` event parameter such as [`ConnectionEvents.before_execute.execution_options`](events.html#sqlalchemy.events.ConnectionEvents.before_execute.params.execution_options
    "sqlalchemy.events.ConnectionEvents.before_execute") or [`ORMExecuteState.execution_options`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.execution_options
    "sqlalchemy.orm.ORMExecuteState.execution_options"), e.g.:'
  id: totrans-3541
  prefs: []
  type: TYPE_NORMAL
  zh: 可以传递给[`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")及其他相关方法和参数字典的选项类型包括SQLAlchemy
    Core或ORM明确消耗的参数，以及SQLAlchemy未定义的任意关键字参数，这意味着这些方法和/或参数字典可用于与自定义代码交互的用户定义参数，可以使用诸如[`Executable.get_execution_options()`](#sqlalchemy.sql.expression.Executable.get_execution_options
    "sqlalchemy.sql.expression.Executable.get_execution_options")和[`Connection.get_execution_options()`](connections.html#sqlalchemy.engine.Connection.get_execution_options
    "sqlalchemy.engine.Connection.get_execution_options")等方法访问这些参数，或者在选择的事件钩子中使用专用的`execution_options`事件参数，例如[`ConnectionEvents.before_execute.execution_options`](events.html#sqlalchemy.events.ConnectionEvents.before_execute.params.execution_options
    "sqlalchemy.events.ConnectionEvents.before_execute")或[`ORMExecuteState.execution_options`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.execution_options
    "sqlalchemy.orm.ORMExecuteState.execution_options")，例如：
- en: '[PRE690]'
  id: totrans-3542
  prefs: []
  type: TYPE_PRE
  zh: '[PRE690]'
- en: 'Within the scope of options that are explicitly recognized by SQLAlchemy, most
    apply to specific classes of objects and not others. The most common execution
    options include:'
  id: totrans-3543
  prefs: []
  type: TYPE_NORMAL
  zh: 在SQLAlchemy明确识别的选项范围内，大多数适用于特定类别的对象，而不适用于其他对象。最常见的执行选项包括：
- en: '[`Connection.execution_options.isolation_level`](connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") - sets the isolation level for
    a connection or a class of connections via an [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"). This option is accepted only by [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") or [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine").'
  id: totrans-3544
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.isolation_level`](connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") - 通过[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")设置连接或一类连接的隔离级别。此选项仅由[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")或[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")接受。'
- en: '[`Connection.execution_options.stream_results`](connections.html#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") - indicates results should be
    fetched using a server side cursor; this option is accepted by [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"), by the [`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute") parameter on [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute"), and additionally by [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") on a SQL statement object,
    as well as by ORM constructs like [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute").'
  id: totrans-3545
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.stream_results`](connections.html#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") - 表示应使用服务器端游标获取结果；此选项被 [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")、[`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute") 上的参数 [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") 以及SQL语句对象上的 [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") 接受，以及ORM构造如 [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")。'
- en: '[`Connection.execution_options.compiled_cache`](connections.html#sqlalchemy.engine.Connection.execution_options.params.compiled_cache
    "sqlalchemy.engine.Connection.execution_options") - indicates a dictionary that
    will serve as the [SQL compilation cache](connections.html#sql-caching) for a
    [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    or [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine"),
    as well as for ORM methods like [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute"). Can be passed as `None` to disable caching
    for statements. This option is not accepted by [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") as it is inadvisable
    to carry along a compilation cache within a statement object.'
  id: totrans-3546
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.compiled_cache`](connections.html#sqlalchemy.engine.Connection.execution_options.params.compiled_cache
    "sqlalchemy.engine.Connection.execution_options") - 表示将用作 [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 或 [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 的 [SQL 编译缓存](connections.html#sql-caching)，以及像 [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") 这样的ORM方法的字典。 可以将其传递为 `None` 以禁用语句的缓存。 由于在语句对象中携带编译缓存是不可取的，因此此选项不被
    [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") 接受。'
- en: '[`Connection.execution_options.schema_translate_map`](connections.html#sqlalchemy.engine.Connection.execution_options.params.schema_translate_map
    "sqlalchemy.engine.Connection.execution_options") - a mapping of schema names
    used by the [Schema Translate Map](connections.html#schema-translating) feature,
    accepted by [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine"),
    [`Executable`](#sqlalchemy.sql.expression.Executable "sqlalchemy.sql.expression.Executable"),
    as well as by ORM constructs like [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute").'
  id: totrans-3547
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.schema_translate_map`](connections.html#sqlalchemy.engine.Connection.execution_options.params.schema_translate_map
    "sqlalchemy.engine.Connection.execution_options") - 一个由 [模式转换映射](connections.html#schema-translating)
    功能使用的模式名称映射，被 [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")、[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")、[`Executable`](#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")接受，以及ORM构造如 [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")。'
- en: See also
  id: totrans-3548
  prefs: []
  type: TYPE_NORMAL
  zh: 亦参见
- en: '[`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")'
  id: totrans-3549
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") - [`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")方法。'
- en: '[`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute")'
  id: totrans-3550
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute") - [`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute") 方法。'
- en: '[`Session.execute.execution_options`](../orm/session_api.html#sqlalchemy.orm.Session.execute.params.execution_options
    "sqlalchemy.orm.Session.execute")'
  id: totrans-3551
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.execute.execution_options`](../orm/session_api.html#sqlalchemy.orm.Session.execute.params.execution_options
    "sqlalchemy.orm.Session.execute")'
- en: '[ORM Execution Options](../orm/queryguide/api.html#orm-queryguide-execution-options)
    - documentation on all ORM-specific execution options'
  id: totrans-3552
  prefs: []
  type: TYPE_NORMAL
  zh: '[ORM 执行选项](../orm/queryguide/api.html#orm-queryguide-execution-options) - 关于所有
    ORM 特定执行选项的文档'
- en: '[PRE691]'
  id: totrans-3553
  prefs: []
  type: TYPE_PRE
  zh: '[PRE691]'
- en: '*inherited from the* [`SelectBase.exists()`](#sqlalchemy.sql.expression.SelectBase.exists
    "sqlalchemy.sql.expression.SelectBase.exists") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  id: totrans-3554
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")
    *的* [`SelectBase.exists()`](#sqlalchemy.sql.expression.SelectBase.exists "sqlalchemy.sql.expression.SelectBase.exists")
    *方法*'
- en: Return an [`Exists`](#sqlalchemy.sql.expression.Exists "sqlalchemy.sql.expression.Exists")
    representation of this selectable, which can be used as a column expression.
  id: totrans-3555
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此可选择项的 [`Exists`](#sqlalchemy.sql.expression.Exists "sqlalchemy.sql.expression.Exists")
    表示，可用作列表达式。
- en: The returned object is an instance of [`Exists`](#sqlalchemy.sql.expression.Exists
    "sqlalchemy.sql.expression.Exists").
  id: totrans-3556
  prefs: []
  type: TYPE_NORMAL
  zh: 返回对象是 [`Exists`](#sqlalchemy.sql.expression.Exists "sqlalchemy.sql.expression.Exists")
    的一个实例。
- en: See also
  id: totrans-3557
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`exists()`](#sqlalchemy.sql.expression.exists "sqlalchemy.sql.expression.exists")'
  id: totrans-3558
  prefs: []
  type: TYPE_NORMAL
  zh: '[`exists()`](#sqlalchemy.sql.expression.exists "sqlalchemy.sql.expression.exists")'
- en: '[EXISTS subqueries](../tutorial/data_select.html#tutorial-exists) - in the
    [2.0 style](../glossary.html#term-2.0-style) tutorial.'
  id: totrans-3559
  prefs: []
  type: TYPE_NORMAL
  zh: '[EXISTS 子查询](../tutorial/data_select.html#tutorial-exists) - 在 [2.0 风格](../glossary.html#term-2.0-style)
    教程中。'
- en: New in version 1.4.
  id: totrans-3560
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4 中引入。
- en: '[PRE692]'
  id: totrans-3561
  prefs: []
  type: TYPE_PRE
  zh: '[PRE692]'
- en: '*inherited from the* [`SelectBase.exported_columns`](#sqlalchemy.sql.expression.SelectBase.exported_columns
    "sqlalchemy.sql.expression.SelectBase.exported_columns") *attribute of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  id: totrans-3562
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")
    *的* [`SelectBase.exported_columns`](#sqlalchemy.sql.expression.SelectBase.exported_columns
    "sqlalchemy.sql.expression.SelectBase.exported_columns") *属性*'
- en: A [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") that represents the “exported” columns
    of this [`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable"),
    not including [`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause") constructs.
  id: totrans-3563
  prefs: []
  type: TYPE_NORMAL
  zh: 一个表示此 [`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable")
    的“导出”列的 [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")，不包括 [`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause") 构造。
- en: The “exported” columns for a [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase") object are synonymous with the [`SelectBase.selected_columns`](#sqlalchemy.sql.expression.SelectBase.selected_columns
    "sqlalchemy.sql.expression.SelectBase.selected_columns") collection.
  id: totrans-3564
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")
    对象的“导出”列与 [`SelectBase.selected_columns`](#sqlalchemy.sql.expression.SelectBase.selected_columns
    "sqlalchemy.sql.expression.SelectBase.selected_columns") 集合是同义词。'
- en: New in version 1.4.
  id: totrans-3565
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4 中引入。
- en: See also
  id: totrans-3566
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Select.exported_columns`](#sqlalchemy.sql.expression.Select.exported_columns
    "sqlalchemy.sql.expression.Select.exported_columns")'
  id: totrans-3567
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.exported_columns`](#sqlalchemy.sql.expression.Select.exported_columns
    "sqlalchemy.sql.expression.Select.exported_columns")'
- en: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns")'
  id: totrans-3568
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns")'
- en: '[`FromClause.exported_columns`](#sqlalchemy.sql.expression.FromClause.exported_columns
    "sqlalchemy.sql.expression.FromClause.exported_columns")'
  id: totrans-3569
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FromClause.exported_columns`](#sqlalchemy.sql.expression.FromClause.exported_columns
    "sqlalchemy.sql.expression.FromClause.exported_columns")'
- en: '[PRE693]'
  id: totrans-3570
  prefs: []
  type: TYPE_PRE
  zh: '[PRE693]'
- en: '*inherited from the* [`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  id: totrans-3571
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect "sqlalchemy.sql.expression.GenerativeSelect")
    *的* [`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch") *方法*'
- en: Return a new selectable with the given FETCH FIRST criterion applied.
  id: totrans-3572
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个应用了给定 `FETCH FIRST` 准则的新可选择项。
- en: This is a numeric value which usually renders as `FETCH {FIRST | NEXT} [ count
    ] {ROW | ROWS} {ONLY | WITH TIES}` expression in the resulting select. This functionality
    is is currently implemented for Oracle, PostgreSQL, MSSQL.
  id: totrans-3573
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个数值，通常在生成的选择中呈现为 `FETCH {FIRST | NEXT} [ count ] {ROW | ROWS} {ONLY | WITH
    TIES}` 表达式。此功能目前已在 Oracle、PostgreSQL、MSSQL 中实现。
- en: Use [`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset") to specify the offset.
  id: totrans-3574
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset") 来指定偏移量。
- en: Note
  id: totrans-3575
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The [`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch") method will replace any clause
    applied with [`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit").
  id: totrans-3576
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch") 方法将用 [`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit") 应用的任何子句替换。'
- en: New in version 1.4.
  id: totrans-3577
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4 版本中的新功能。
- en: 'Parameters:'
  id: totrans-3578
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`count` – an integer COUNT parameter, or a SQL expression that provides an
    integer result. When `percent=True` this will represent the percentage of rows
    to return, not the absolute value. Pass `None` to reset it.'
  id: totrans-3579
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`count` – 一个整数 COUNT 参数，或者提供整数结果的 SQL 表达式。当 `percent=True` 时，这将表示要返回的行数的百分比，而不是绝对值。传递
    `None` 来重置它。'
- en: '`with_ties` – When `True`, the WITH TIES option is used to return any additional
    rows that tie for the last place in the result set according to the `ORDER BY`
    clause. The `ORDER BY` may be mandatory in this case. Defaults to `False`'
  id: totrans-3580
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`with_ties` – 当为 `True` 时，使用 WITH TIES 选项来返回与结果集中最后一位并列的任何额外行，根据 `ORDER BY`
    子句确定。在这种情况下，`ORDER BY` 可能是强制性的。默认为 `False`。'
- en: '`percent` – When `True`, `count` represents the percentage of the total number
    of selected rows to return. Defaults to `False`'
  id: totrans-3581
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`percent` – 当为 `True` 时，`count` 表示要返回的所选行的总数的百分比。默认为 `False`。'
- en: See also
  id: totrans-3582
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit")'
  id: totrans-3583
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit")'
- en: '[`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset")'
  id: totrans-3584
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset")'
- en: '[PRE694]'
  id: totrans-3585
  prefs: []
  type: TYPE_PRE
  zh: '[PRE694]'
- en: A synonym for the [`Select.where()`](#sqlalchemy.sql.expression.Select.where
    "sqlalchemy.sql.expression.Select.where") method.
  id: totrans-3586
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.where()`](#sqlalchemy.sql.expression.Select.where "sqlalchemy.sql.expression.Select.where")
    方法的同义词。'
- en: '[PRE695]'
  id: totrans-3587
  prefs: []
  type: TYPE_PRE
  zh: '[PRE695]'
- en: apply the given filtering criterion as a WHERE clause to this select.
  id: totrans-3588
  prefs: []
  type: TYPE_NORMAL
  zh: 将给定的过滤条件作为 WHERE 子句应用到此选择语句中。
- en: '[PRE696]'
  id: totrans-3589
  prefs: []
  type: TYPE_PRE
  zh: '[PRE696]'
- en: Apply the columns which this [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    would select onto another statement.
  id: totrans-3590
  prefs: []
  type: TYPE_NORMAL
  zh: 将此 [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    所选的列应用到另一个语句中。
- en: This operation is [plugin-specific](../glossary.html#term-plugin-specific) and
    will raise a not supported exception if this [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") does not select from plugin-enabled entities.
  id: totrans-3591
  prefs: []
  type: TYPE_NORMAL
  zh: 此操作是[特定于插件](../glossary.html#term-plugin-specific)的，如果此 [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") 不从启用插件的实体中进行选择，则会引发不受支持的异常。
- en: The statement is typically either a [`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") or [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct, and should return the set of columns
    appropriate to the entities represented by this [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select").
  id: totrans-3592
  prefs: []
  type: TYPE_NORMAL
  zh: 该语句通常是一个 [`text()`](sqlelement.html#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")
    或 [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    结构，并且应返回适合于此 [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    表示的实体的列集。
- en: See also
  id: totrans-3593
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Getting ORM Results from Textual Statements](../orm/queryguide/select.html#orm-queryguide-selecting-text)
    - usage examples in the ORM Querying Guide'
  id: totrans-3594
  prefs: []
  type: TYPE_NORMAL
  zh: '[从文本语句获取 ORM 结果](../orm/queryguide/select.html#orm-queryguide-selecting-text)
    - 在 ORM 查询指南中的用法示例'
- en: '[PRE697]'
  id: totrans-3595
  prefs: []
  type: TYPE_PRE
  zh: '[PRE697]'
- en: Return the displayed list of [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") elements.
  id: totrans-3596
  prefs: []
  type: TYPE_NORMAL
  zh: 返回显示的 [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    元素列表。
- en: 'Deprecated since version 1.4.23: The [`Select.froms`](#sqlalchemy.sql.expression.Select.froms
    "sqlalchemy.sql.expression.Select.froms") attribute is moved to the [`Select.get_final_froms()`](#sqlalchemy.sql.expression.Select.get_final_froms
    "sqlalchemy.sql.expression.Select.get_final_froms") method.'
  id: totrans-3597
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.4.23起已弃用：[`Select.froms`](#sqlalchemy.sql.expression.Select.froms "sqlalchemy.sql.expression.Select.froms")
    属性已移至 [`Select.get_final_froms()`](#sqlalchemy.sql.expression.Select.get_final_froms
    "sqlalchemy.sql.expression.Select.get_final_froms") 方法。
- en: '[PRE698]'
  id: totrans-3598
  prefs: []
  type: TYPE_PRE
  zh: '[PRE698]'
- en: Return immediate child `HasTraverseInternals` elements of this `HasTraverseInternals`.
  id: totrans-3599
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此 `HasTraverseInternals` 的直接子元素。
- en: This is used for visit traversal.
  id: totrans-3600
  prefs: []
  type: TYPE_NORMAL
  zh: 用于访问遍历。
- en: '**kw may contain flags that change the collection that is returned, for example
    to return a subset of items in order to cut down on larger traversals, or to return
    child items from a different context (such as schema-level collections instead
    of clause-level).'
  id: totrans-3601
  prefs: []
  type: TYPE_NORMAL
  zh: '**kw 可包含更改返回集合的标志，例如返回子集以减少更大的遍历，或者从不同上下文返回子项（例如模式级集合而不是子句级集合）。'
- en: '[PRE699]'
  id: totrans-3602
  prefs: []
  type: TYPE_PRE
  zh: '[PRE699]'
- en: '*inherited from the* [`Executable.get_execution_options()`](#sqlalchemy.sql.expression.Executable.get_execution_options
    "sqlalchemy.sql.expression.Executable.get_execution_options") *method of* [`Executable`](#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")'
  id: totrans-3603
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Executable.get_execution_options()`](#sqlalchemy.sql.expression.Executable.get_execution_options
    "sqlalchemy.sql.expression.Executable.get_execution_options") *方法的* [`Executable`](#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")'
- en: Get the non-SQL options which will take effect during execution.
  id: totrans-3604
  prefs: []
  type: TYPE_NORMAL
  zh: 获取在执行期间生效的非SQL选项。
- en: New in version 1.3.
  id: totrans-3605
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.3中的新功能。
- en: See also
  id: totrans-3606
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")'
  id: totrans-3607
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")'
- en: '[PRE700]'
  id: totrans-3608
  prefs: []
  type: TYPE_PRE
  zh: '[PRE700]'
- en: Compute the final displayed list of [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") elements.
  id: totrans-3609
  prefs: []
  type: TYPE_NORMAL
  zh: 计算最终显示的 [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    元素列表。
- en: This method will run through the full computation required to determine what
    FROM elements will be displayed in the resulting SELECT statement, including shadowing
    individual tables with JOIN objects, as well as full computation for ORM use cases
    including eager loading clauses.
  id: totrans-3610
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法将运行完整的计算，以确定在生成的SELECT语句中将显示哪些FROM元素，包括使用JOIN对象遮蔽单个表以及用于ORM使用情况的完整计算，包括急加载子句。
- en: For ORM use, this accessor returns the **post compilation** list of FROM objects;
    this collection will include elements such as eagerly loaded tables and joins.
    The objects will **not** be ORM enabled and not work as a replacement for the
    `Select.select_froms()` collection; additionally, the method is not well performing
    for an ORM enabled statement as it will incur the full ORM construction process.
  id: totrans-3611
  prefs: []
  type: TYPE_NORMAL
  zh: 对于ORM使用，此访问器返回**编译后**的FROM对象列表；此集合将包括诸如急加载表和连接等元素。这些对象将**不**启用ORM，并且不能作为`Select.select_froms()`
    集合的替代品；此外，该方法对于启用ORM的语句性能不佳，因为它将导致完整的ORM构建过程。
- en: To retrieve the FROM list that’s implied by the “columns” collection passed
    to the [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    originally, use the [`Select.columns_clause_froms`](#sqlalchemy.sql.expression.Select.columns_clause_froms
    "sqlalchemy.sql.expression.Select.columns_clause_froms") accessor.
  id: totrans-3612
  prefs: []
  type: TYPE_NORMAL
  zh: 要检索最初传递给 [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    的“columns”集合隐含的FROM列表，请使用 [`Select.columns_clause_froms`](#sqlalchemy.sql.expression.Select.columns_clause_froms
    "sqlalchemy.sql.expression.Select.columns_clause_froms") 访问器。
- en: To select from an alternative set of columns while maintaining the FROM list,
    use the [`Select.with_only_columns()`](#sqlalchemy.sql.expression.Select.with_only_columns
    "sqlalchemy.sql.expression.Select.with_only_columns") method and pass the [`Select.with_only_columns.maintain_column_froms`](#sqlalchemy.sql.expression.Select.with_only_columns.params.maintain_column_froms
    "sqlalchemy.sql.expression.Select.with_only_columns") parameter.
  id: totrans-3613
  prefs: []
  type: TYPE_NORMAL
  zh: 若要从备选列集中选择，同时保持FROM列表，请使用 [`Select.with_only_columns()`](#sqlalchemy.sql.expression.Select.with_only_columns
    "sqlalchemy.sql.expression.Select.with_only_columns") 方法，并传递 [`Select.with_only_columns.maintain_column_froms`](#sqlalchemy.sql.expression.Select.with_only_columns.params.maintain_column_froms
    "sqlalchemy.sql.expression.Select.with_only_columns") 参数。
- en: 'New in version 1.4.23: - the [`Select.get_final_froms()`](#sqlalchemy.sql.expression.Select.get_final_froms
    "sqlalchemy.sql.expression.Select.get_final_froms") method replaces the previous
    [`Select.froms`](#sqlalchemy.sql.expression.Select.froms "sqlalchemy.sql.expression.Select.froms")
    accessor, which is deprecated.'
  id: totrans-3614
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4.23 开始：- [`Select.get_final_froms()`](#sqlalchemy.sql.expression.Select.get_final_froms
    "sqlalchemy.sql.expression.Select.get_final_froms") 方法取代了之前的 [`Select.froms`](#sqlalchemy.sql.expression.Select.froms
    "sqlalchemy.sql.expression.Select.froms") 访问器，该访问器已弃用。
- en: See also
  id: totrans-3615
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`Select.columns_clause_froms`](#sqlalchemy.sql.expression.Select.columns_clause_froms
    "sqlalchemy.sql.expression.Select.columns_clause_froms")'
  id: totrans-3616
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.columns_clause_froms`](#sqlalchemy.sql.expression.Select.columns_clause_froms
    "sqlalchemy.sql.expression.Select.columns_clause_froms")'
- en: '[PRE701]'
  id: totrans-3617
  prefs: []
  type: TYPE_PRE
  zh: '[PRE701]'
- en: '*inherited from the* [`GenerativeSelect.get_label_style()`](#sqlalchemy.sql.expression.GenerativeSelect.get_label_style
    "sqlalchemy.sql.expression.GenerativeSelect.get_label_style") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  id: totrans-3618
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect "sqlalchemy.sql.expression.GenerativeSelect")
    *的* [`GenerativeSelect.get_label_style()`](#sqlalchemy.sql.expression.GenerativeSelect.get_label_style
    "sqlalchemy.sql.expression.GenerativeSelect.get_label_style") *方法。'
- en: Retrieve the current label style.
  id: totrans-3619
  prefs: []
  type: TYPE_NORMAL
  zh: 检索当前标签样式。
- en: New in version 1.4.
  id: totrans-3620
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4 开始新增。
- en: '[PRE702]'
  id: totrans-3621
  prefs: []
  type: TYPE_PRE
  zh: '[PRE702]'
- en: '*inherited from the* [`GenerativeSelect.group_by()`](#sqlalchemy.sql.expression.GenerativeSelect.group_by
    "sqlalchemy.sql.expression.GenerativeSelect.group_by") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  id: totrans-3622
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect "sqlalchemy.sql.expression.GenerativeSelect")
    *的* [`GenerativeSelect.group_by()`](#sqlalchemy.sql.expression.GenerativeSelect.group_by
    "sqlalchemy.sql.expression.GenerativeSelect.group_by") *方法。'
- en: Return a new selectable with the given list of GROUP BY criterion applied.
  id: totrans-3623
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个应用了给定的 GROUP BY 准则列表的新可选择的。
- en: All existing GROUP BY settings can be suppressed by passing `None`.
  id: totrans-3624
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过传递 `None` 来抑制所有现有的 GROUP BY 设置。
- en: 'e.g.:'
  id: totrans-3625
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE703]'
  id: totrans-3626
  prefs: []
  type: TYPE_PRE
  zh: '[PRE703]'
- en: 'Parameters:'
  id: totrans-3627
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '***clauses** – a series of [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") constructs which will be used to generate
    an GROUP BY clause.'
  id: totrans-3628
  prefs: []
  type: TYPE_NORMAL
  zh: '***clauses** – 一系列将用于生成 GROUP BY 子句的 [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") 结构。'
- en: See also
  id: totrans-3629
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[Aggregate functions with GROUP BY / HAVING](../tutorial/data_select.html#tutorial-group-by-w-aggregates)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-3630
  prefs: []
  type: TYPE_NORMAL
  zh: '[带有 GROUP BY / HAVING 的聚合函数](../tutorial/data_select.html#tutorial-group-by-w-aggregates)
    - 在[SQLAlchemy 统一教程](../tutorial/index.html#unified-tutorial)中'
- en: '[Ordering or Grouping by a Label](../tutorial/data_select.html#tutorial-order-by-label)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-3631
  prefs: []
  type: TYPE_NORMAL
  zh: '[按标签排序或分组](../tutorial/data_select.html#tutorial-order-by-label) - 在[SQLAlchemy
    统一教程](../tutorial/index.html#unified-tutorial)中'
- en: '[PRE704]'
  id: totrans-3632
  prefs: []
  type: TYPE_PRE
  zh: '[PRE704]'
- en: Return a new [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    construct with the given expression added to its HAVING clause, joined to the
    existing clause via AND, if any.
  id: totrans-3633
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个带有给定表达式添加到其 HAVING 子句的新 [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    结构，如果存在的话，通过 AND 连接到现有子句。
- en: '[PRE705]'
  id: totrans-3634
  prefs: []
  type: TYPE_PRE
  zh: '[PRE705]'
- en: '*inherited from the* `HasCacheKey.inherit_cache` *attribute of* [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.cache_key.HasCacheKey")'
  id: totrans-3635
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.cache_key.HasCacheKey") *的* `HasCacheKey.inherit_cache` *属性。'
- en: Indicate if this [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") instance should make use of the cache
    key generation scheme used by its immediate superclass.
  id: totrans-3636
  prefs: []
  type: TYPE_NORMAL
  zh: 指示此 [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey "sqlalchemy.sql.traversals.HasCacheKey")
    实例是否应使用其直接超类使用的缓存密钥生成方案。
- en: The attribute defaults to `None`, which indicates that a construct has not yet
    taken into account whether or not its appropriate for it to participate in caching;
    this is functionally equivalent to setting the value to `False`, except that a
    warning is also emitted.
  id: totrans-3637
  prefs: []
  type: TYPE_NORMAL
  zh: 该属性默认为 `None`，表示构造尚未考虑是否应参与缓存；这在功能上等同于将值设置为 `False`，除了还会发出警告。
- en: This flag can be set to `True` on a particular class, if the SQL that corresponds
    to the object does not change based on attributes which are local to this class,
    and not its superclass.
  id: totrans-3638
  prefs: []
  type: TYPE_NORMAL
  zh: 如果对应于对象的 SQL 不基于仅属于该类而不是其超类的属性更改，则可以将此标志设置为`True`。
- en: See also
  id: totrans-3639
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[Enabling Caching Support for Custom Constructs](compiler.html#compilerext-caching)
    - General guideslines for setting the [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute for third-party
    or user defined SQL constructs.'
  id: totrans-3640
  prefs: []
  type: TYPE_NORMAL
  zh: '[为自定义构造启用缓存支持](compiler.html#compilerext-caching) - 设置第三方或用户定义的SQL构造的[`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache")属性的一般指南。'
- en: '[PRE706]'
  id: totrans-3641
  prefs: []
  type: TYPE_PRE
  zh: '[PRE706]'
- en: An iterator of all [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") expressions which would be rendered
    into the columns clause of the resulting SELECT statement.
  id: totrans-3642
  prefs: []
  type: TYPE_NORMAL
  zh: 将呈现为生成的SELECT语句的列子句的所有[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")表达式的迭代器。
- en: This method is legacy as of 1.4 and is superseded by the [`Select.exported_columns`](#sqlalchemy.sql.expression.Select.exported_columns
    "sqlalchemy.sql.expression.Select.exported_columns") collection.
  id: totrans-3643
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法在1.4版本中已过时，并被[`Select.exported_columns`](#sqlalchemy.sql.expression.Select.exported_columns
    "sqlalchemy.sql.expression.Select.exported_columns")集合取代。
- en: '[PRE707]'
  id: totrans-3644
  prefs: []
  type: TYPE_PRE
  zh: '[PRE707]'
- en: Return a SQL `INTERSECT` of this select() construct against the given selectables
    provided as positional arguments.
  id: totrans-3645
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此select()构造与作为位置参数提供的给定selectables的SQL `INTERSECT`。
- en: 'Parameters:'
  id: totrans-3646
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*other` –'
  id: totrans-3647
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*other` –'
- en: one or more elements with which to create a UNION.
  id: totrans-3648
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个或多个用于创建联合的元素。
- en: 'Changed in version 1.4.28: multiple elements are now accepted.'
  id: totrans-3649
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本1.4.28开始更改：现在接受多个元素。
- en: '`**kwargs` – keyword arguments are forwarded to the constructor for the newly
    created [`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect "sqlalchemy.sql.expression.CompoundSelect")
    object.'
  id: totrans-3650
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kwargs` – 关键字参数被转发到新创建的[`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect
    "sqlalchemy.sql.expression.CompoundSelect")对象的构造函数。'
- en: '[PRE708]'
  id: totrans-3651
  prefs: []
  type: TYPE_PRE
  zh: '[PRE708]'
- en: Return a SQL `INTERSECT ALL` of this select() construct against the given selectables
    provided as positional arguments.
  id: totrans-3652
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此select()构造与作为位置参数提供的给定selectables的SQL `INTERSECT ALL`。
- en: 'Parameters:'
  id: totrans-3653
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*other` –'
  id: totrans-3654
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*other` –'
- en: one or more elements with which to create a UNION.
  id: totrans-3655
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个或多个用于创建联合的元素。
- en: 'Changed in version 1.4.28: multiple elements are now accepted.'
  id: totrans-3656
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本1.4.28开始更改：现在接受多个元素。
- en: '`**kwargs` – keyword arguments are forwarded to the constructor for the newly
    created [`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect "sqlalchemy.sql.expression.CompoundSelect")
    object.'
  id: totrans-3657
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kwargs` – 关键字参数被转发到新创建的[`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect
    "sqlalchemy.sql.expression.CompoundSelect")对象的构造函数。'
- en: '[PRE709]'
  id: totrans-3658
  prefs: []
  type: TYPE_PRE
  zh: '[PRE709]'
- en: Return `True` if this [`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows
    "sqlalchemy.sql.expression.ReturnsRows") is ‘derived’ from the given [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-3659
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此[`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows "sqlalchemy.sql.expression.ReturnsRows")‘派生’自给定的[`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")，则返回`True`。
- en: An example would be an Alias of a Table is derived from that Table.
  id: totrans-3660
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，Table的Alias源自该Table。
- en: '[PRE710]'
  id: totrans-3661
  prefs: []
  type: TYPE_PRE
  zh: '[PRE710]'
- en: Create a SQL JOIN against this [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") object’s criterion and apply generatively,
    returning the newly resulting [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select").
  id: totrans-3662
  prefs: []
  type: TYPE_NORMAL
  zh: 对此[`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")对象的条件进行SQL
    JOIN，并适用生成，返回新生成的[`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")。
- en: 'E.g.:'
  id: totrans-3663
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE711]'
  id: totrans-3664
  prefs: []
  type: TYPE_PRE
  zh: '[PRE711]'
- en: 'The above statement generates SQL similar to:'
  id: totrans-3665
  prefs: []
  type: TYPE_NORMAL
  zh: 上述语句生成类似于以下的SQL：
- en: '[PRE712]'
  id: totrans-3666
  prefs: []
  type: TYPE_PRE
  zh: '[PRE712]'
- en: 'Changed in version 1.4: [`Select.join()`](#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join") now creates a [`Join`](#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") object between a [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") source that is within the FROM clause
    of the existing SELECT, and a given target [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause"), and then adds this [`Join`](#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") to the FROM clause of the newly generated SELECT
    statement. This is completely reworked from the behavior in 1.3, which would instead
    create a subquery of the entire [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    and then join that subquery to the target.'
  id: totrans-3667
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4 版更改：[`Select.join()`](#sqlalchemy.sql.expression.Select.join "sqlalchemy.sql.expression.Select.join")现在在现有
    SELECT 的 FROM 子句中创建一个[`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")源和给定目标[`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")之间创建一个[`Join`](#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join")对象，然后将此[`Join`](#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join")添加到新生成的 SELECT 语句的 FROM 子句中。这与1.3中的行为完全不同，1.3中的行为是创建整个[`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select")的子查询，然后将该子查询连接到目标。
- en: This is a **backwards incompatible change** as the previous behavior was mostly
    useless, producing an unnamed subquery rejected by most databases in any case.
    The new behavior is modeled after that of the very successful [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") method in the ORM, in order to support the functionality
    of [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    being available by using a [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    object with an [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
  id: totrans-3668
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个**不向后兼容的更改**，因为以前的行为大多是无用的，在任何情况下都会产生一个未命名的子查询，大多数数据库都会拒绝。新行为的模型是根据ORM中非常成功的[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")方法的行为建模的，以支持通过使用具有[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")的[`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")对象来使用[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")的功能。
- en: See the notes for this change at [select().join() and outerjoin() add JOIN criteria
    to the current query, rather than creating a subquery](../changelog/migration_14.html#change-select-join).
  id: totrans-3669
  prefs: []
  type: TYPE_NORMAL
  zh: 有关此更改的说明，请参见 [select().join() 和 outerjoin() 将 JOIN 条件添加到当前查询，而不是创建子查询](../changelog/migration_14.html#change-select-join)。
- en: 'Parameters:'
  id: totrans-3670
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`target` – target table to join towards'
  id: totrans-3671
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target` – 连接的目标表'
- en: '`onclause` – ON clause of the join. If omitted, an ON clause is generated automatically
    based on the [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    linkages between the two tables, if one can be unambiguously determined, otherwise
    an error is raised.'
  id: totrans-3672
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onclause` – 连接的 ON 子句。如果省略，则根据两个表之间的[`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey")关系自动生成 ON 子句，如果可以明确确定，则会生成 ON 子句，否则会引发错误。'
- en: '`isouter` – if True, generate LEFT OUTER join. Same as [`Select.outerjoin()`](#sqlalchemy.sql.expression.Select.outerjoin
    "sqlalchemy.sql.expression.Select.outerjoin").'
  id: totrans-3673
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isouter` – 如果为 True，则生成 LEFT OUTER 连接。与[`Select.outerjoin()`](#sqlalchemy.sql.expression.Select.outerjoin
    "sqlalchemy.sql.expression.Select.outerjoin")相同。'
- en: '`full` – if True, generate FULL OUTER join.'
  id: totrans-3674
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`full` – 如果为 True，则生成 FULL OUTER 连接。'
- en: See also
  id: totrans-3675
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Explicit FROM clauses and JOINs](../tutorial/data_select.html#tutorial-select-join)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html)'
  id: totrans-3676
  prefs: []
  type: TYPE_NORMAL
  zh: '[显式的 FROM 子句和 JOINs](../tutorial/data_select.html#tutorial-select-join) - 在[SQLAlchemy
    统一教程](../tutorial/index.html)中'
- en: '[Joins](../orm/queryguide/select.html#orm-queryguide-joins) - in the [ORM Querying
    Guide](../orm/queryguide/index.html)'
  id: totrans-3677
  prefs: []
  type: TYPE_NORMAL
  zh: '[Joins](../orm/queryguide/select.html#orm-queryguide-joins) - 在[ORM 查询指南](../orm/queryguide/index.html)中'
- en: '[`Select.join_from()`](#sqlalchemy.sql.expression.Select.join_from "sqlalchemy.sql.expression.Select.join_from")'
  id: totrans-3678
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.join_from()`](#sqlalchemy.sql.expression.Select.join_from "sqlalchemy.sql.expression.Select.join_from")'
- en: '[`Select.outerjoin()`](#sqlalchemy.sql.expression.Select.outerjoin "sqlalchemy.sql.expression.Select.outerjoin")'
  id: totrans-3679
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.outerjoin()`](#sqlalchemy.sql.expression.Select.outerjoin "sqlalchemy.sql.expression.Select.outerjoin")'
- en: '[PRE713]'
  id: totrans-3680
  prefs: []
  type: TYPE_PRE
  zh: '[PRE713]'
- en: Create a SQL JOIN against this [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") object’s criterion and apply generatively,
    returning the newly resulting [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select").
  id: totrans-3681
  prefs: []
  type: TYPE_NORMAL
  zh: 针对此 [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    对象的条件创建 SQL JOIN，并应用生成，返回新生成的 [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")。
- en: 'E.g.:'
  id: totrans-3682
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE714]'
  id: totrans-3683
  prefs: []
  type: TYPE_PRE
  zh: '[PRE714]'
- en: 'The above statement generates SQL similar to:'
  id: totrans-3684
  prefs: []
  type: TYPE_NORMAL
  zh: 上述语句生成类似于 SQL 的内容：
- en: '[PRE715]'
  id: totrans-3685
  prefs: []
  type: TYPE_PRE
  zh: '[PRE715]'
- en: New in version 1.4.
  id: totrans-3686
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4 中新增。
- en: 'Parameters:'
  id: totrans-3687
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`from_` – the left side of the join, will be rendered in the FROM clause and
    is roughly equivalent to using the [`Select.select_from()`](#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") method.'
  id: totrans-3688
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`from_` – 连接的左侧，将在 FROM 子句中呈现，并且大致相当于使用 [`Select.select_from()`](#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") 方法。'
- en: '`target` – target table to join towards'
  id: totrans-3689
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target` – 要加入的目标表'
- en: '`onclause` – ON clause of the join.'
  id: totrans-3690
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onclause` – 连接的 ON 子句。'
- en: '`isouter` – if True, generate LEFT OUTER join. Same as [`Select.outerjoin()`](#sqlalchemy.sql.expression.Select.outerjoin
    "sqlalchemy.sql.expression.Select.outerjoin").'
  id: totrans-3691
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isouter` – 如果为 True，则生成 LEFT OUTER 连接。与 [`Select.outerjoin()`](#sqlalchemy.sql.expression.Select.outerjoin
    "sqlalchemy.sql.expression.Select.outerjoin") 相同。'
- en: '`full` – if True, generate FULL OUTER join.'
  id: totrans-3692
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`full` – 如果为 True，则生成 FULL OUTER 连接。'
- en: See also
  id: totrans-3693
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Explicit FROM clauses and JOINs](../tutorial/data_select.html#tutorial-select-join)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html)'
  id: totrans-3694
  prefs: []
  type: TYPE_NORMAL
  zh: '[显式 FROM 子句和 JOINs](../tutorial/data_select.html#tutorial-select-join) - 在
    [SQLAlchemy 统一教程](../tutorial/index.html) 中'
- en: '[Joins](../orm/queryguide/select.html#orm-queryguide-joins) - in the [ORM Querying
    Guide](../orm/queryguide/index.html)'
  id: totrans-3695
  prefs: []
  type: TYPE_NORMAL
  zh: '[连接](../orm/queryguide/select.html#orm-queryguide-joins) - 在 [ORM 查询指南](../orm/queryguide/index.html)
    中'
- en: '[`Select.join()`](#sqlalchemy.sql.expression.Select.join "sqlalchemy.sql.expression.Select.join")'
  id: totrans-3696
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.join()`](#sqlalchemy.sql.expression.Select.join "sqlalchemy.sql.expression.Select.join")'
- en: '[PRE716]'
  id: totrans-3697
  prefs: []
  type: TYPE_PRE
  zh: '[PRE716]'
- en: '*inherited from the* [`SelectBase.label()`](#sqlalchemy.sql.expression.SelectBase.label
    "sqlalchemy.sql.expression.SelectBase.label") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  id: totrans-3698
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SelectBase.label()`](#sqlalchemy.sql.expression.SelectBase.label "sqlalchemy.sql.expression.SelectBase.label")
    *方法的* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")'
- en: Return a ‘scalar’ representation of this selectable, embedded as a subquery
    with a label.
  id: totrans-3699
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此可选择项的“标量”表示，嵌入为带有标签的子查询。
- en: See also
  id: totrans-3700
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery").'
  id: totrans-3701
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery")。'
- en: '[PRE717]'
  id: totrans-3702
  prefs: []
  type: TYPE_PRE
  zh: '[PRE717]'
- en: '*inherited from the* [`SelectBase.lateral()`](#sqlalchemy.sql.expression.SelectBase.lateral
    "sqlalchemy.sql.expression.SelectBase.lateral") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  id: totrans-3703
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SelectBase.lateral()`](#sqlalchemy.sql.expression.SelectBase.lateral
    "sqlalchemy.sql.expression.SelectBase.lateral") *方法的* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
- en: Return a LATERAL alias of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable").
  id: totrans-3704
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此 [`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable")
    的 LATERAL 别名。
- en: The return value is the [`Lateral`](#sqlalchemy.sql.expression.Lateral "sqlalchemy.sql.expression.Lateral")
    construct also provided by the top-level [`lateral()`](#sqlalchemy.sql.expression.lateral
    "sqlalchemy.sql.expression.lateral") function.
  id: totrans-3705
  prefs: []
  type: TYPE_NORMAL
  zh: 返回值是由顶层 [`lateral()`](#sqlalchemy.sql.expression.lateral "sqlalchemy.sql.expression.lateral")
    函数提供的 [`Lateral`](#sqlalchemy.sql.expression.Lateral "sqlalchemy.sql.expression.Lateral")
    结构。
- en: See also
  id: totrans-3706
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[LATERAL correlation](../tutorial/data_select.html#tutorial-lateral-correlation)
    - overview of usage.'
  id: totrans-3707
  prefs: []
  type: TYPE_NORMAL
  zh: '[LATERAL correlation](../tutorial/data_select.html#tutorial-lateral-correlation)
    - 用法概述。'
- en: '[PRE718]'
  id: totrans-3708
  prefs: []
  type: TYPE_PRE
  zh: '[PRE718]'
- en: '*inherited from the* [`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  id: totrans-3709
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit") *方法的* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
- en: Return a new selectable with the given LIMIT criterion applied.
  id: totrans-3710
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个应用给定 LIMIT 条件的新可选择项。
- en: This is a numerical value which usually renders as a `LIMIT` expression in the
    resulting select. Backends that don’t support `LIMIT` will attempt to provide
    similar functionality.
  id: totrans-3711
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个通常呈现为 `LIMIT` 表达式的数值。不支持 `LIMIT` 的后端将尝试提供类似的功能。
- en: Note
  id: totrans-3712
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The [`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit") method will replace any clause
    applied with [`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch").
  id: totrans-3713
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit") 方法将替换应用的任何子句与 [`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch")。'
- en: 'Parameters:'
  id: totrans-3714
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**limit** – an integer LIMIT parameter, or a SQL expression that provides an
    integer result. Pass `None` to reset it.'
  id: totrans-3715
  prefs: []
  type: TYPE_NORMAL
  zh: '**limit** – 整数 LIMIT 参数，或提供整数结果的SQL表达式。传递 `None` 以重置它。'
- en: See also
  id: totrans-3716
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch")'
  id: totrans-3717
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch")'
- en: '[`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset")'
  id: totrans-3718
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset")'
- en: '[PRE719]'
  id: totrans-3719
  prefs: []
  type: TYPE_PRE
  zh: '[PRE719]'
- en: '*inherited from the* [`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  id: totrans-3720
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset") *方法的* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
- en: Return a new selectable with the given OFFSET criterion applied.
  id: totrans-3721
  prefs: []
  type: TYPE_NORMAL
  zh: 返回应用了给定 OFFSET 准则的新可选择对象。
- en: This is a numeric value which usually renders as an `OFFSET` expression in the
    resulting select. Backends that don’t support `OFFSET` will attempt to provide
    similar functionality.
  id: totrans-3722
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个通常呈现为`OFFSET`表达式的数字值在结果选择中。不支持 `OFFSET` 的后端将尝试提供类似的功能。
- en: 'Parameters:'
  id: totrans-3723
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**offset** – an integer OFFSET parameter, or a SQL expression that provides
    an integer result. Pass `None` to reset it.'
  id: totrans-3724
  prefs: []
  type: TYPE_NORMAL
  zh: '**offset** – 整数 OFFSET 参数，或提供整数结果的SQL表达式。传递 `None` 以重置它。'
- en: See also
  id: totrans-3725
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit")'
  id: totrans-3726
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit")'
- en: '[`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch")'
  id: totrans-3727
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch")'
- en: '[PRE720]'
  id: totrans-3728
  prefs: []
  type: TYPE_PRE
  zh: '[PRE720]'
- en: '*inherited from the* [`Executable.options()`](#sqlalchemy.sql.expression.Executable.options
    "sqlalchemy.sql.expression.Executable.options") *method of* [`Executable`](#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")'
  id: totrans-3729
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Executable.options()`](#sqlalchemy.sql.expression.Executable.options
    "sqlalchemy.sql.expression.Executable.options") *方法的* [`Executable`](#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")'
- en: Apply options to this statement.
  id: totrans-3730
  prefs: []
  type: TYPE_NORMAL
  zh: 对此语句应用选项。
- en: In the general sense, options are any kind of Python object that can be interpreted
    by the SQL compiler for the statement. These options can be consumed by specific
    dialects or specific kinds of compilers.
  id: totrans-3731
  prefs: []
  type: TYPE_NORMAL
  zh: 从一般意义上说，选项是任何可以由SQL编译器解释为语句的Python对象。这些选项可以被特定的方言或特定类型的编译器消耗。
- en: The most commonly known kind of option are the ORM level options that apply
    “eager load” and other loading behaviors to an ORM query. However, options can
    theoretically be used for many other purposes.
  id: totrans-3732
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的选项类型是应用“预加载”和其他加载行为到ORM查询的ORM级别选项。然而，选项理论上可以用于许多其他目的。
- en: For background on specific kinds of options for specific kinds of statements,
    refer to the documentation for those option objects.
  id: totrans-3733
  prefs: []
  type: TYPE_NORMAL
  zh: 有关特定类型语句的特定类型选项的背景，请参阅这些选项对象的文档。
- en: 'Changed in version 1.4: - added [`Executable.options()`](#sqlalchemy.sql.expression.Executable.options
    "sqlalchemy.sql.expression.Executable.options") to Core statement objects towards
    the goal of allowing unified Core / ORM querying capabilities.'
  id: totrans-3734
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改：- 向核心语句对象添加了[`Executable.options()`](#sqlalchemy.sql.expression.Executable.options
    "sqlalchemy.sql.expression.Executable.options")，以实现统一的核心/ORM查询功能的目标。
- en: See also
  id: totrans-3735
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Column Loading Options](../orm/queryguide/columns.html#loading-columns) -
    refers to options specific to the usage of ORM queries'
  id: totrans-3736
  prefs: []
  type: TYPE_NORMAL
  zh: '[列加载选项](../orm/queryguide/columns.html#loading-columns) - 指特定于ORM查询使用的选项'
- en: '[Relationship Loading with Loader Options](../orm/queryguide/relationships.html#relationship-loader-options)
    - refers to options specific to the usage of ORM queries'
  id: totrans-3737
  prefs: []
  type: TYPE_NORMAL
  zh: '[带有加载器选项的关系加载](../orm/queryguide/relationships.html#relationship-loader-options)
    - 指的是特定于 ORM 查询使用的选项'
- en: '[PRE721]'
  id: totrans-3738
  prefs: []
  type: TYPE_PRE
  zh: '[PRE721]'
- en: '*inherited from the* [`GenerativeSelect.order_by()`](#sqlalchemy.sql.expression.GenerativeSelect.order_by
    "sqlalchemy.sql.expression.GenerativeSelect.order_by") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  id: totrans-3739
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`GenerativeSelect.order_by()`](#sqlalchemy.sql.expression.GenerativeSelect.order_by
    "sqlalchemy.sql.expression.GenerativeSelect.order_by") *方法的* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
- en: Return a new selectable with the given list of ORDER BY criteria applied.
  id: totrans-3740
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个应用了给定的 ORDER BY 条件列表的新的可选查询。
- en: 'e.g.:'
  id: totrans-3741
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE722]'
  id: totrans-3742
  prefs: []
  type: TYPE_PRE
  zh: '[PRE722]'
- en: 'Calling this method multiple times is equivalent to calling it once with all
    the clauses concatenated. All existing ORDER BY criteria may be cancelled by passing
    `None` by itself. New ORDER BY criteria may then be added by invoking [`Query.order_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.order_by
    "sqlalchemy.orm.Query.order_by") again, e.g.:'
  id: totrans-3743
  prefs: []
  type: TYPE_NORMAL
  zh: 多次调用此方法等同于一次将所有子句连接起来调用一次。通过单独传递 `None` 可以取消所有现有的 ORDER BY 条件。然后可以通过再次调用 [`Query.order_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.order_by
    "sqlalchemy.orm.Query.order_by") 来添加新的 ORDER BY 条件，例如：
- en: '[PRE723]'
  id: totrans-3744
  prefs: []
  type: TYPE_PRE
  zh: '[PRE723]'
- en: 'Parameters:'
  id: totrans-3745
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '***clauses** – a series of [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") constructs which will be used to generate
    an ORDER BY clause.'
  id: totrans-3746
  prefs: []
  type: TYPE_NORMAL
  zh: '***clauses** – 一系列将用于生成 ORDER BY 子句的 [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement)
    构造。'
- en: See also
  id: totrans-3747
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[ORDER BY](../tutorial/data_select.html#tutorial-order-by) - in the [SQLAlchemy
    Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-3748
  prefs: []
  type: TYPE_NORMAL
  zh: '[ORDER BY](../tutorial/data_select.html#tutorial-order-by) - 在[SQLAlchemy 统一教程](../tutorial/index.html#unified-tutorial)中'
- en: '[Ordering or Grouping by a Label](../tutorial/data_select.html#tutorial-order-by-label)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-3749
  prefs: []
  type: TYPE_NORMAL
  zh: '[按标签排序或分组](../tutorial/data_select.html#tutorial-order-by-label) - 在[SQLAlchemy
    统一教程](../tutorial/index.html#unified-tutorial)中'
- en: '[PRE724]'
  id: totrans-3750
  prefs: []
  type: TYPE_PRE
  zh: '[PRE724]'
- en: Create a left outer join.
  id: totrans-3751
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个左外连接。
- en: Parameters are the same as that of [`Select.join()`](#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join").
  id: totrans-3752
  prefs: []
  type: TYPE_NORMAL
  zh: 参数与 [`Select.join()`](#sqlalchemy.sql.expression.Select.join "sqlalchemy.sql.expression.Select.join")
    相同。
- en: 'Changed in version 1.4: [`Select.outerjoin()`](#sqlalchemy.sql.expression.Select.outerjoin
    "sqlalchemy.sql.expression.Select.outerjoin") now creates a [`Join`](#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") object between a [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") source that is within the FROM clause
    of the existing SELECT, and a given target [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause"), and then adds this [`Join`](#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") to the FROM clause of the newly generated SELECT
    statement. This is completely reworked from the behavior in 1.3, which would instead
    create a subquery of the entire [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    and then join that subquery to the target.'
  id: totrans-3753
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4 开始变更：[`Select.outerjoin()`](#sqlalchemy.sql.expression.Select.outerjoin
    "sqlalchemy.sql.expression.Select.outerjoin") 现在在现有 SELECT 的 FROM 子句中创建一个 [`Join`](#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") 对象，以及给定的目标 [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")，然后将这个 [`Join`](#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") 添加到新生成的 SELECT 语句的 FROM 子句中。这完全重写自 1.3 中的行为，1.3
    中的行为会创建整个 [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    的子查询，然后将该子查询与目标连接。
- en: This is a **backwards incompatible change** as the previous behavior was mostly
    useless, producing an unnamed subquery rejected by most databases in any case.
    The new behavior is modeled after that of the very successful [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") method in the ORM, in order to support the functionality
    of [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    being available by using a [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    object with an [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
  id: totrans-3754
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个**向后不兼容的更改**，因为先前的行为大多无用，生成的未命名子查询在大多数情况下被大多数数据库拒绝。新行为是在ORM中非常成功的[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")方法之后建模的，以支持通过使用带有[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")的[`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")对象来使用[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")的功能。
- en: See the notes for this change at [select().join() and outerjoin() add JOIN criteria
    to the current query, rather than creating a subquery](../changelog/migration_14.html#change-select-join).
  id: totrans-3755
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅此更改的说明：[select().join() and outerjoin() add JOIN criteria to the current
    query, rather than creating a subquery](../changelog/migration_14.html#change-select-join)。
- en: See also
  id: totrans-3756
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Explicit FROM clauses and JOINs](../tutorial/data_select.html#tutorial-select-join)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html)'
  id: totrans-3757
  prefs: []
  type: TYPE_NORMAL
  zh: '[明确的FROM子句和JOIN](../tutorial/data_select.html#tutorial-select-join) - 在[SQLAlchemy统一教程](../tutorial/index.html)中'
- en: '[Joins](../orm/queryguide/select.html#orm-queryguide-joins) - in the [ORM Querying
    Guide](../orm/queryguide/index.html)'
  id: totrans-3758
  prefs: []
  type: TYPE_NORMAL
  zh: '[连接](../orm/queryguide/select.html#orm-queryguide-joins) - 在[ORM查询指南](../orm/queryguide/index.html)中'
- en: '[`Select.join()`](#sqlalchemy.sql.expression.Select.join "sqlalchemy.sql.expression.Select.join")'
  id: totrans-3759
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.join()`](#sqlalchemy.sql.expression.Select.join "sqlalchemy.sql.expression.Select.join")'
- en: '[PRE725]'
  id: totrans-3760
  prefs: []
  type: TYPE_PRE
  zh: '[PRE725]'
- en: Create a SQL LEFT OUTER JOIN against this [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") object’s criterion and apply generatively,
    returning the newly resulting [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select").
  id: totrans-3761
  prefs: []
  type: TYPE_NORMAL
  zh: 对这个[`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    对象的标准创建一个SQL LEFT OUTER JOIN，并应用生成，返回新生成的[`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select")。
- en: Usage is the same as that of `Select.join_from()`.
  id: totrans-3762
  prefs: []
  type: TYPE_NORMAL
  zh: 用法与`Select.join_from()`相同。
- en: '[PRE726]'
  id: totrans-3763
  prefs: []
  type: TYPE_PRE
  zh: '[PRE726]'
- en: '*inherited from the* [`HasPrefixes.prefix_with()`](#sqlalchemy.sql.expression.HasPrefixes.prefix_with
    "sqlalchemy.sql.expression.HasPrefixes.prefix_with") *method of* [`HasPrefixes`](#sqlalchemy.sql.expression.HasPrefixes
    "sqlalchemy.sql.expression.HasPrefixes")'
  id: totrans-3764
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`HasPrefixes.prefix_with()`](#sqlalchemy.sql.expression.HasPrefixes.prefix_with
    "sqlalchemy.sql.expression.HasPrefixes.prefix_with") *方法的* [`HasPrefixes`](#sqlalchemy.sql.expression.HasPrefixes
    "sqlalchemy.sql.expression.HasPrefixes")'
- en: Add one or more expressions following the statement keyword, i.e. SELECT, INSERT,
    UPDATE, or DELETE. Generative.
  id: totrans-3765
  prefs: []
  type: TYPE_NORMAL
  zh: 在语句关键字后添加一个或多个表达式，即SELECT、INSERT、UPDATE或DELETE。生成的。
- en: This is used to support backend-specific prefix keywords such as those provided
    by MySQL.
  id: totrans-3766
  prefs: []
  type: TYPE_NORMAL
  zh: 这用于支持特定于后端的前缀关键字，例如MySQL提供的关键字。
- en: 'E.g.:'
  id: totrans-3767
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE727]'
  id: totrans-3768
  prefs: []
  type: TYPE_PRE
  zh: '[PRE727]'
- en: Multiple prefixes can be specified by multiple calls to [`HasPrefixes.prefix_with()`](#sqlalchemy.sql.expression.HasPrefixes.prefix_with
    "sqlalchemy.sql.expression.HasPrefixes.prefix_with").
  id: totrans-3769
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过多次调用[`HasPrefixes.prefix_with()`](#sqlalchemy.sql.expression.HasPrefixes.prefix_with
    "sqlalchemy.sql.expression.HasPrefixes.prefix_with")来指定多个前缀。
- en: 'Parameters:'
  id: totrans-3770
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*prefixes` – textual or [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") construct which will be rendered following
    the INSERT, UPDATE, or DELETE keyword.'
  id: totrans-3771
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*prefixes` – 文本或[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") 结构，它将在INSERT、UPDATE或DELETE关键字后呈现。'
- en: '`dialect` – optional string dialect name which will limit rendering of this
    prefix to only that dialect.'
  id: totrans-3772
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect` – 可选的字符串方言名称，将限制将此前缀呈现为仅该方言。'
- en: '[PRE728]'
  id: totrans-3773
  prefs: []
  type: TYPE_PRE
  zh: '[PRE728]'
- en: Return a new [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    construct with redundantly named, equivalently-valued columns removed from the
    columns clause.
  id: totrans-3774
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的[`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    结构，从列子句中移除了冗余命名且值等价的列。
- en: “Redundant” here means two columns where one refers to the other either based
    on foreign key, or via a simple equality comparison in the WHERE clause of the
    statement. The primary purpose of this method is to automatically construct a
    select statement with all uniquely-named columns, without the need to use table-qualified
    labels as [`Select.set_label_style()`](#sqlalchemy.sql.expression.Select.set_label_style
    "sqlalchemy.sql.expression.Select.set_label_style") does.
  id: totrans-3775
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的“冗余”意味着两列，其中一列基于外键或通过语句的WHERE子句中的简单等式比较引用另一列。此方法的主要目的是自动构造一个具有所有唯一命名列的选择语句，而无需像[`Select.set_label_style()`](#sqlalchemy.sql.expression.Select.set_label_style
    "sqlalchemy.sql.expression.Select.set_label_style")那样使用表限定标签。
- en: When columns are omitted based on foreign key, the referred-to column is the
    one that’s kept. When columns are omitted based on WHERE equivalence, the first
    column in the columns clause is the one that’s kept.
  id: totrans-3776
  prefs: []
  type: TYPE_NORMAL
  zh: 当根据外键省略列时，被引用的列是被保留的列。当根据WHERE等价性省略列时，列子句中的第一列是被保留的列。
- en: 'Parameters:'
  id: totrans-3777
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**only_synonyms** – when True, limit the removal of columns to those which
    have the same name as the equivalent. Otherwise, all columns that are equivalent
    to another are removed.'
  id: totrans-3778
  prefs: []
  type: TYPE_NORMAL
  zh: '**only_synonyms** – 当为True时，限制列的移除只针对与等效列具有相同名称的列。否则，所有与其他列等效的列都将被移除。'
- en: '[PRE729]'
  id: totrans-3779
  prefs: []
  type: TYPE_PRE
  zh: '[PRE729]'
- en: '*inherited from the* [`Selectable.replace_selectable()`](#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") *method of* [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
  id: totrans-3780
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable")
    *的* [`Selectable.replace_selectable()`](#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") *方法*'
- en: Replace all occurrences of [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") ‘old’ with the given [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") object, returning a copy of this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-3781
  prefs: []
  type: TYPE_NORMAL
  zh: 用给定的[`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")对象替换此[`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")中所有[`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") ‘old’的所有出现，并返回此[`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")的副本。
- en: 'Deprecated since version 1.4: The [`Selectable.replace_selectable()`](#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") method is deprecated,
    and will be removed in a future release. Similar functionality is available via
    the sqlalchemy.sql.visitors module.'
  id: totrans-3782
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始已弃用：[`Selectable.replace_selectable()`](#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable")方法已弃用，并将在将来的版本中删除。类似的功能可以通过sqlalchemy.sql.visitors模块获得。
- en: '[PRE730]'
  id: totrans-3783
  prefs: []
  type: TYPE_PRE
  zh: '[PRE730]'
- en: '*inherited from the* [`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  id: totrans-3784
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")
    *的* [`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery") *方法*'
- en: Return a ‘scalar’ representation of this selectable, which can be used as a
    column expression.
  id: totrans-3785
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此可选择的‘标量’表示形式，可用作列表达式。
- en: The returned object is an instance of [`ScalarSelect`](#sqlalchemy.sql.expression.ScalarSelect
    "sqlalchemy.sql.expression.ScalarSelect").
  id: totrans-3786
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的对象是[`ScalarSelect`](#sqlalchemy.sql.expression.ScalarSelect "sqlalchemy.sql.expression.ScalarSelect")的实例。
- en: Typically, a select statement which has only one column in its columns clause
    is eligible to be used as a scalar expression. The scalar subquery can then be
    used in the WHERE clause or columns clause of an enclosing SELECT.
  id: totrans-3787
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，列子句中只有一个列的选择语句可以被用作标量表达式。然后标量子查询可以在封闭SELECT的WHERE子句或列子句中使用。
- en: Note that the scalar subquery differentiates from the FROM-level subquery that
    can be produced using the [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") method.
  id: totrans-3788
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，标量子查询与使用[`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery")方法生成的FROM级子查询有所不同。
- en: See also
  id: totrans-3789
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Scalar and Correlated Subqueries](../tutorial/data_select.html#tutorial-scalar-subquery)
    - in the 2.0 tutorial'
  id: totrans-3790
  prefs: []
  type: TYPE_NORMAL
  zh: '[标量和相关子查询](../tutorial/data_select.html#tutorial-scalar-subquery) - 在2.0教程中'
- en: '[PRE731]'
  id: totrans-3791
  prefs: []
  type: TYPE_PRE
  zh: '[PRE731]'
- en: '*inherited from the* [`SelectBase.select()`](#sqlalchemy.sql.expression.SelectBase.select
    "sqlalchemy.sql.expression.SelectBase.select") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  id: totrans-3792
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`SelectBase.select()`](#sqlalchemy.sql.expression.SelectBase.select "sqlalchemy.sql.expression.SelectBase.select")
    *方法继承自* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")'
- en: 'Deprecated since version 1.4: The [`SelectBase.select()`](#sqlalchemy.sql.expression.SelectBase.select
    "sqlalchemy.sql.expression.SelectBase.select") method is deprecated and will be
    removed in a future release; this method implicitly creates a subquery that should
    be explicit. Please call [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") first in order to create a subquery,
    which then can be selected.'
  id: totrans-3793
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始弃用：[`SelectBase.select()`](#sqlalchemy.sql.expression.SelectBase.select
    "sqlalchemy.sql.expression.SelectBase.select")方法已弃用，并将在将来的版本中删除；此方法隐式创建一个子查询，应明确。请先调用[`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery")以创建子查询，然后可以选择它。
- en: '[PRE732]'
  id: totrans-3794
  prefs: []
  type: TYPE_PRE
  zh: '[PRE732]'
- en: Return a new [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    construct with the given FROM expression(s) merged into its list of FROM objects.
  id: totrans-3795
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的[`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")构造，其中包含给定的
    FROM 表达式合并到其 FROM 对象列表中。
- en: 'E.g.:'
  id: totrans-3796
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE733]'
  id: totrans-3797
  prefs: []
  type: TYPE_PRE
  zh: '[PRE733]'
- en: The “from” list is a unique set on the identity of each element, so adding an
    already present [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    or other selectable will have no effect. Passing a [`Join`](#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") that refers to an already present [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") or other selectable will have the effect of concealing
    the presence of that selectable as an individual element in the rendered FROM
    list, instead rendering it into a JOIN clause.
  id: totrans-3798
  prefs: []
  type: TYPE_NORMAL
  zh: “from”列表是每个元素标识的唯一集合，因此添加一个已经存在的[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")或其他可选择的内容将不会产生影响。传递一个指向已经存在的[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")或其他可选择的内容的[`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")将使该可选择的内容作为单独的元素隐藏在渲染的
    FROM 列表中，而不是将其渲染到 JOIN 子句中。
- en: 'While the typical purpose of [`Select.select_from()`](#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") is to replace the default, derived
    FROM clause with a join, it can also be called with individual table elements,
    multiple times if desired, in the case that the FROM clause cannot be fully derived
    from the columns clause:'
  id: totrans-3799
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然[`Select.select_from()`](#sqlalchemy.sql.expression.Select.select_from "sqlalchemy.sql.expression.Select.select_from")的典型目的是用联接替换默认的派生
    FROM 子句，但也可以根据需要多次调用，传入单个表元素，如果 FROM 子句无法完全从列子句中派生：
- en: '[PRE734]'
  id: totrans-3800
  prefs: []
  type: TYPE_PRE
  zh: '[PRE734]'
- en: '[PRE735]'
  id: totrans-3801
  prefs: []
  type: TYPE_PRE
  zh: '[PRE735]'
- en: A [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") representing the columns that this
    SELECT statement or similar construct returns in its result set, not including
    [`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause "sqlalchemy.sql.expression.TextClause")
    constructs.
  id: totrans-3802
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")代表此 SELECT 语句或类似结构返回的结果集中的列，不包括[`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause")构造。
- en: This collection differs from the [`FromClause.columns`](#sqlalchemy.sql.expression.FromClause.columns
    "sqlalchemy.sql.expression.FromClause.columns") collection of a [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") in that the columns within this collection
    cannot be directly nested inside another SELECT statement; a subquery must be
    applied first which provides for the necessary parenthesization required by SQL.
  id: totrans-3803
  prefs: []
  type: TYPE_NORMAL
  zh: 该集合与[`FromClause.columns`](#sqlalchemy.sql.expression.FromClause.columns "sqlalchemy.sql.expression.FromClause.columns")集合不同，因为此集合中的列不能直接嵌套在另一个
    SELECT 语句中；必须首先应用子查询，该子查询提供了 SQL 所需的必要括号化。
- en: 'For a [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    construct, the collection here is exactly what would be rendered inside the “SELECT”
    statement, and the [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") objects are directly present as they
    were given, e.g.:'
  id: totrans-3804
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个 [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    构造，这里的集合正是在“SELECT”语句中渲染的内容，而 [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") 对象会直接按照它们给出的方式出现，例如：
- en: '[PRE736]'
  id: totrans-3805
  prefs: []
  type: TYPE_PRE
  zh: '[PRE736]'
- en: Above, `stmt.selected_columns` would be a collection that contains the `col1`
    and `col2` objects directly. For a statement that is against a [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") or other [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause"), the collection will use the [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") objects that are in the [`FromClause.c`](#sqlalchemy.sql.expression.FromClause.c
    "sqlalchemy.sql.expression.FromClause.c") collection of the from element.
  id: totrans-3806
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面，`stmt.selected_columns` 将是一个直接包含 `col1` 和 `col2` 对象的集合。对于针对 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 或其他 [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") 的语句，该集合将使用在 from 元素的 [`FromClause.c`](#sqlalchemy.sql.expression.FromClause.c
    "sqlalchemy.sql.expression.FromClause.c") 集合中的 [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") 对象。
- en: 'A use case for the [`Select.selected_columns`](#sqlalchemy.sql.expression.Select.selected_columns
    "sqlalchemy.sql.expression.Select.selected_columns") collection is to allow the
    existing columns to be referenced when adding additional criteria, e.g.:'
  id: totrans-3807
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.selected_columns`](#sqlalchemy.sql.expression.Select.selected_columns
    "sqlalchemy.sql.expression.Select.selected_columns") 集合的一个用例是允许在添加额外条件时引用现有列，例如：'
- en: '[PRE737]'
  id: totrans-3808
  prefs: []
  type: TYPE_PRE
  zh: '[PRE737]'
- en: Note
  id: totrans-3809
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The [`Select.selected_columns`](#sqlalchemy.sql.expression.Select.selected_columns
    "sqlalchemy.sql.expression.Select.selected_columns") collection does not include
    expressions established in the columns clause using the [`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct; these are silently omitted from the
    collection. To use plain textual column expressions inside of a [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") construct, use the [`literal_column()`](sqlelement.html#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column") construct.
  id: totrans-3810
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.selected_columns`](#sqlalchemy.sql.expression.Select.selected_columns
    "sqlalchemy.sql.expression.Select.selected_columns") 集合不包括在列子句中使用 [`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") 构造建立的表达式；这些表达式会被静默地从集合中省略。要在 [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") 构造内部使用纯文本列表达式，请使用 [`literal_column()`](sqlelement.html#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column") 构造。'
- en: New in version 1.4.
  id: totrans-3811
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4 版本中的新功能。
- en: '[PRE738]'
  id: totrans-3812
  prefs: []
  type: TYPE_PRE
  zh: '[PRE738]'
- en: Apply a ‘grouping’ to this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  id: totrans-3813
  prefs: []
  type: TYPE_NORMAL
  zh: 对这个 [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") 应用一个“分组”。
- en: This method is overridden by subclasses to return a “grouping” construct, i.e.
    parenthesis. In particular it’s used by “binary” expressions to provide a grouping
    around themselves when placed into a larger expression, as well as by [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs when placed into the FROM clause
    of another [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select").
    (Note that subqueries should be normally created using the [`Select.alias()`](#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") method, as many platforms require nested
    SELECT statements to be named).
  id: totrans-3814
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法会被子类重写以返回一个“分组”构造，即括号。特别是它被“二元”表达式使用，当这些表达式被放置到较大表达式中时，提供一个围绕自己的分组，以及当 [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造被放置到另一个 [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 的 FROM 子句中时。（注意，子查询通常应该使用 [`Select.alias()`](#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") 方法创建，因为许多平台要求嵌套的 SELECT 语句必须有名称）。
- en: As expressions are composed together, the application of [`self_group()`](#sqlalchemy.sql.expression.Select.self_group
    "sqlalchemy.sql.expression.Select.self_group") is automatic - end-user code should
    never need to use this method directly. Note that SQLAlchemy’s clause constructs
    take operator precedence into account - so parenthesis might not be needed, for
    example, in an expression like `x OR (y AND z)` - AND takes precedence over OR.
  id: totrans-3815
  prefs: []
  type: TYPE_NORMAL
  zh: 随着表达式的组合，[`self_group()`](#sqlalchemy.sql.expression.Select.self_group "sqlalchemy.sql.expression.Select.self_group")
    方法的应用是自动的 - 最终用户代码不应该直接使用这个方法。请注意，SQLAlchemy的子句构造会考虑运算符的优先级 - 因此在像 `x OR (y AND
    z)` 这样的表达式中可能不需要括号 - AND 优先于 OR。
- en: The base [`self_group()`](#sqlalchemy.sql.expression.Select.self_group "sqlalchemy.sql.expression.Select.self_group")
    method of [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") just returns self.
  id: totrans-3816
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement "sqlalchemy.sql.expression.ClauseElement")
    的基本 [`self_group()`](#sqlalchemy.sql.expression.Select.self_group "sqlalchemy.sql.expression.Select.self_group")
    方法只返回自身。'
- en: '[PRE739]'
  id: totrans-3817
  prefs: []
  type: TYPE_PRE
  zh: '[PRE739]'
- en: '*inherited from the* [`GenerativeSelect.set_label_style()`](#sqlalchemy.sql.expression.GenerativeSelect.set_label_style
    "sqlalchemy.sql.expression.GenerativeSelect.set_label_style") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  id: totrans-3818
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`GenerativeSelect.set_label_style()`](#sqlalchemy.sql.expression.GenerativeSelect.set_label_style
    "sqlalchemy.sql.expression.GenerativeSelect.set_label_style") *方法的* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
- en: Return a new selectable with the specified label style.
  id: totrans-3819
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个具有指定标签样式的新可选择对象。
- en: There are three “label styles” available, [`SelectLabelStyle.LABEL_STYLE_DISAMBIGUATE_ONLY`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_DISAMBIGUATE_ONLY
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_DISAMBIGUATE_ONLY"), [`SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL"),
    and [`SelectLabelStyle.LABEL_STYLE_NONE`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_NONE
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_NONE"). The default style
    is [`SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL").
  id: totrans-3820
  prefs: []
  type: TYPE_NORMAL
  zh: 有三种“标签样式”可用，[`SelectLabelStyle.LABEL_STYLE_DISAMBIGUATE_ONLY`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_DISAMBIGUATE_ONLY
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_DISAMBIGUATE_ONLY")、[`SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL") 和
    [`SelectLabelStyle.LABEL_STYLE_NONE`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_NONE
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_NONE")。默认样式是 [`SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL`](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL
    "sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL")。
- en: In modern SQLAlchemy, there is not generally a need to change the labeling style,
    as per-expression labels are more effectively used by making use of the [`ColumnElement.label()`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.label
    "sqlalchemy.sql.expression.ColumnElement.label") method. In past versions, `LABEL_STYLE_TABLENAME_PLUS_COL`
    was used to disambiguate same-named columns from different tables, aliases, or
    subqueries; the newer `LABEL_STYLE_DISAMBIGUATE_ONLY` now applies labels only
    to names that conflict with an existing name so that the impact of this labeling
    is minimal.
  id: totrans-3821
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代的SQLAlchemy中，通常不需要更改标签样式，因为通过使用 [`ColumnElement.label()`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.label
    "sqlalchemy.sql.expression.ColumnElement.label") 方法更有效地使用每个表达式的标签。在过去的版本中，`LABEL_STYLE_TABLENAME_PLUS_COL`
    用于消除来自不同表、别名或子查询的同名列的歧义；新的 `LABEL_STYLE_DISAMBIGUATE_ONLY` 现在仅对与现有名称冲突的名称应用标签，以使此标签的影响最小化。
- en: The rationale for disambiguation is mostly so that all column expressions are
    available from a given [`FromClause.c`](#sqlalchemy.sql.expression.FromClause.c
    "sqlalchemy.sql.expression.FromClause.c") collection when a subquery is created.
  id: totrans-3822
  prefs: []
  type: TYPE_NORMAL
  zh: 消除歧义的理由主要是为了在创建子查询时，从给定的 [`FromClause.c`](#sqlalchemy.sql.expression.FromClause.c
    "sqlalchemy.sql.expression.FromClause.c") 集合中可用所有列表达式。
- en: 'New in version 1.4: - the [`GenerativeSelect.set_label_style()`](#sqlalchemy.sql.expression.GenerativeSelect.set_label_style
    "sqlalchemy.sql.expression.GenerativeSelect.set_label_style") method replaces
    the previous combination of `.apply_labels()`, `.with_labels()` and `use_labels=True`
    methods and/or parameters.'
  id: totrans-3823
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4 开始：- [`GenerativeSelect.set_label_style()`](#sqlalchemy.sql.expression.GenerativeSelect.set_label_style
    "sqlalchemy.sql.expression.GenerativeSelect.set_label_style") 方法替换了以前的 `.apply_labels()`、`.with_labels()`
    和 `use_labels=True` 方法和/或参数的组合。
- en: See also
  id: totrans-3824
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '`LABEL_STYLE_DISAMBIGUATE_ONLY`'
  id: totrans-3825
  prefs: []
  type: TYPE_NORMAL
  zh: '`LABEL_STYLE_DISAMBIGUATE_ONLY`'
- en: '`LABEL_STYLE_TABLENAME_PLUS_COL`'
  id: totrans-3826
  prefs: []
  type: TYPE_NORMAL
  zh: '`LABEL_STYLE_TABLENAME_PLUS_COL`'
- en: '`LABEL_STYLE_NONE`'
  id: totrans-3827
  prefs: []
  type: TYPE_NORMAL
  zh: '`LABEL_STYLE_NONE`'
- en: '`LABEL_STYLE_DEFAULT`'
  id: totrans-3828
  prefs: []
  type: TYPE_NORMAL
  zh: '`LABEL_STYLE_DEFAULT`'
- en: '[PRE740]'
  id: totrans-3829
  prefs: []
  type: TYPE_PRE
  zh: '[PRE740]'
- en: '*inherited from the* [`GenerativeSelect.slice()`](#sqlalchemy.sql.expression.GenerativeSelect.slice
    "sqlalchemy.sql.expression.GenerativeSelect.slice") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  id: totrans-3830
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`GenerativeSelect.slice()`](#sqlalchemy.sql.expression.GenerativeSelect.slice
    "sqlalchemy.sql.expression.GenerativeSelect.slice") *方法继承自* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
- en: Apply LIMIT / OFFSET to this statement based on a slice.
  id: totrans-3831
  prefs: []
  type: TYPE_NORMAL
  zh: 根据片段对该语句应用 LIMIT / OFFSET。
- en: The start and stop indices behave like the argument to Python’s built-in `range()`
    function. This method provides an alternative to using `LIMIT`/`OFFSET` to get
    a slice of the query.
  id: totrans-3832
  prefs: []
  type: TYPE_NORMAL
  zh: 开始和停止索引的行为类似于 Python 内置 `range()` 函数的参数。该方法提供了一种替代使用 `LIMIT`/`OFFSET` 获取查询片段的方法。
- en: For example,
  id: totrans-3833
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，
- en: '[PRE741]'
  id: totrans-3834
  prefs: []
  type: TYPE_PRE
  zh: '[PRE741]'
- en: renders as
  id: totrans-3835
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染为
- en: '[PRE742]'
  id: totrans-3836
  prefs: []
  type: TYPE_PRE
  zh: '[PRE742]'
- en: Note
  id: totrans-3837
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The [`GenerativeSelect.slice()`](#sqlalchemy.sql.expression.GenerativeSelect.slice
    "sqlalchemy.sql.expression.GenerativeSelect.slice") method will replace any clause
    applied with [`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch").
  id: totrans-3838
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.slice()`](#sqlalchemy.sql.expression.GenerativeSelect.slice
    "sqlalchemy.sql.expression.GenerativeSelect.slice") 方法将替换任何应用了 [`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch") 的子句。'
- en: 'New in version 1.4: Added the [`GenerativeSelect.slice()`](#sqlalchemy.sql.expression.GenerativeSelect.slice
    "sqlalchemy.sql.expression.GenerativeSelect.slice") method generalized from the
    ORM.'
  id: totrans-3839
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4 开始：添加了从 ORM 泛化的 [`GenerativeSelect.slice()`](#sqlalchemy.sql.expression.GenerativeSelect.slice
    "sqlalchemy.sql.expression.GenerativeSelect.slice") 方法。
- en: See also
  id: totrans-3840
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit")'
  id: totrans-3841
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.limit()`](#sqlalchemy.sql.expression.GenerativeSelect.limit
    "sqlalchemy.sql.expression.GenerativeSelect.limit")'
- en: '[`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset")'
  id: totrans-3842
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.offset()`](#sqlalchemy.sql.expression.GenerativeSelect.offset
    "sqlalchemy.sql.expression.GenerativeSelect.offset")'
- en: '[`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch")'
  id: totrans-3843
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.fetch()`](#sqlalchemy.sql.expression.GenerativeSelect.fetch
    "sqlalchemy.sql.expression.GenerativeSelect.fetch")'
- en: '[PRE743]'
  id: totrans-3844
  prefs: []
  type: TYPE_PRE
  zh: '[PRE743]'
- en: '*inherited from the* [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  id: totrans-3845
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") *方法继承自* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
- en: Return a subquery of this [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase").
  id: totrans-3846
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此 [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")
    的子查询。
- en: A subquery is from a SQL perspective a parenthesized, named construct that can
    be placed in the FROM clause of another SELECT statement.
  id: totrans-3847
  prefs: []
  type: TYPE_NORMAL
  zh: 从 SQL 角度来看，子查询是一种可以放置在另一个 SELECT 语句的 FROM 子句中的带括号的命名构造。
- en: 'Given a SELECT statement such as:'
  id: totrans-3848
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于这样一个 SELECT 语句：
- en: '[PRE744]'
  id: totrans-3849
  prefs: []
  type: TYPE_PRE
  zh: '[PRE744]'
- en: 'The above statement might look like:'
  id: totrans-3850
  prefs: []
  type: TYPE_NORMAL
  zh: 上述语句可能如下所示：
- en: '[PRE745]'
  id: totrans-3851
  prefs: []
  type: TYPE_PRE
  zh: '[PRE745]'
- en: 'The subquery form by itself renders the same way, however when embedded into
    the FROM clause of another SELECT statement, it becomes a named sub-element:'
  id: totrans-3852
  prefs: []
  type: TYPE_NORMAL
  zh: 子查询本身的形式呈现相同，但当嵌入到另一个 SELECT 语句的 FROM 子句中时，它变成了一个命名的子元素：
- en: '[PRE746]'
  id: totrans-3853
  prefs: []
  type: TYPE_PRE
  zh: '[PRE746]'
- en: 'The above renders as:'
  id: totrans-3854
  prefs: []
  type: TYPE_NORMAL
  zh: 上述呈现为：
- en: '[PRE747]'
  id: totrans-3855
  prefs: []
  type: TYPE_PRE
  zh: '[PRE747]'
- en: Historically, [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") is equivalent to calling the
    [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias "sqlalchemy.sql.expression.FromClause.alias")
    method on a FROM object; however, as a [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase") object is not directly FROM object, the
    [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery "sqlalchemy.sql.expression.SelectBase.subquery")
    method provides clearer semantics.
  id: totrans-3856
  prefs: []
  type: TYPE_NORMAL
  zh: 历史上，[`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") 相当于在 FROM 对象上调用 [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") 方法；但是，由于 [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase") 对象不是直接的 FROM 对象，因此 [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") 方法提供了更清晰的语义。
- en: New in version 1.4.
  id: totrans-3857
  prefs: []
  type: TYPE_NORMAL
  zh: 新功能于版本 1.4 中引入。
- en: '[PRE748]'
  id: totrans-3858
  prefs: []
  type: TYPE_PRE
  zh: '[PRE748]'
- en: '*inherited from the* [`HasSuffixes.suffix_with()`](#sqlalchemy.sql.expression.HasSuffixes.suffix_with
    "sqlalchemy.sql.expression.HasSuffixes.suffix_with") *method of* [`HasSuffixes`](#sqlalchemy.sql.expression.HasSuffixes
    "sqlalchemy.sql.expression.HasSuffixes")'
  id: totrans-3859
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`HasSuffixes.suffix_with()`](#sqlalchemy.sql.expression.HasSuffixes.suffix_with
    "sqlalchemy.sql.expression.HasSuffixes") *方法的* [`HasSuffixes`](#sqlalchemy.sql.expression.HasSuffixes
    "sqlalchemy.sql.expression.HasSuffixes")'
- en: Add one or more expressions following the statement as a whole.
  id: totrans-3860
  prefs: []
  type: TYPE_NORMAL
  zh: 在语句整体后添加一个或多个表达式。
- en: This is used to support backend-specific suffix keywords on certain constructs.
  id: totrans-3861
  prefs: []
  type: TYPE_NORMAL
  zh: 用于支持某些结构上的特定后缀关键字的后端。
- en: 'E.g.:'
  id: totrans-3862
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE749]'
  id: totrans-3863
  prefs: []
  type: TYPE_PRE
  zh: '[PRE749]'
- en: Multiple suffixes can be specified by multiple calls to [`HasSuffixes.suffix_with()`](#sqlalchemy.sql.expression.HasSuffixes.suffix_with
    "sqlalchemy.sql.expression.HasSuffixes.suffix_with").
  id: totrans-3864
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过多次调用 [`HasSuffixes.suffix_with()`](#sqlalchemy.sql.expression.HasSuffixes.suffix_with
    "sqlalchemy.sql.expression.HasSuffixes.suffix_with") 来指定多个后缀。
- en: 'Parameters:'
  id: totrans-3865
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*suffixes` – textual or [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") construct which will be rendered following
    the target clause.'
  id: totrans-3866
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*suffixes` – 将在目标子句后面呈现的文本或 [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") 构造。'
- en: '`dialect` – Optional string dialect name which will limit rendering of this
    suffix to only that dialect.'
  id: totrans-3867
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect` – 可选的字符串方言名称，将限制此后缀仅在该方言中呈现。'
- en: '[PRE750]'
  id: totrans-3868
  prefs: []
  type: TYPE_PRE
  zh: '[PRE750]'
- en: Return a SQL `UNION` of this select() construct against the given selectables
    provided as positional arguments.
  id: totrans-3869
  prefs: []
  type: TYPE_NORMAL
  zh: 返回针对提供的位置参数的选择器构造的 SQL `UNION`。
- en: 'Parameters:'
  id: totrans-3870
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*other` –'
  id: totrans-3871
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*other` –'
- en: one or more elements with which to create a UNION.
  id: totrans-3872
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个或多个用于创建 UNION 的元素。
- en: 'Changed in version 1.4.28: multiple elements are now accepted.'
  id: totrans-3873
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在版本 1.4.28 中更改：现在接受多个元素。
- en: '`**kwargs` – keyword arguments are forwarded to the constructor for the newly
    created [`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect "sqlalchemy.sql.expression.CompoundSelect")
    object.'
  id: totrans-3874
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kwargs` – 关键字参数将转发给新创建的 [`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect
    "sqlalchemy.sql.expression.CompoundSelect") 对象的构造函数。'
- en: '[PRE751]'
  id: totrans-3875
  prefs: []
  type: TYPE_PRE
  zh: '[PRE751]'
- en: Return a SQL `UNION ALL` of this select() construct against the given selectables
    provided as positional arguments.
  id: totrans-3876
  prefs: []
  type: TYPE_NORMAL
  zh: 返回针对提供的位置参数的选择器构造的 SQL `UNION ALL`。
- en: 'Parameters:'
  id: totrans-3877
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*other` –'
  id: totrans-3878
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*other` –'
- en: one or more elements with which to create a UNION.
  id: totrans-3879
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个或多个用于创建 UNION 的元素。
- en: 'Changed in version 1.4.28: multiple elements are now accepted.'
  id: totrans-3880
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在版本 1.4.28 中更改：现在接受多个元素。
- en: '`**kwargs` – keyword arguments are forwarded to the constructor for the newly
    created [`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect "sqlalchemy.sql.expression.CompoundSelect")
    object.'
  id: totrans-3881
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kwargs` – 关键字参数将转发给新创建的 [`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect
    "sqlalchemy.sql.expression.CompoundSelect") 对象的构造函数。'
- en: '[PRE752]'
  id: totrans-3882
  prefs: []
  type: TYPE_PRE
  zh: '[PRE752]'
- en: Return a new [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    construct with the given expression added to its WHERE clause, joined to the existing
    clause via AND, if any.
  id: totrans-3883
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的 [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    构造，并将给定表达式添加到其 WHERE 子句中，如果有的话，通过 AND 连接到现有子句。
- en: '[PRE753]'
  id: totrans-3884
  prefs: []
  type: TYPE_PRE
  zh: '[PRE753]'
- en: Return the completed WHERE clause for this [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") statement.
  id: totrans-3885
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此 [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    语句的完整 WHERE 子句。
- en: This assembles the current collection of WHERE criteria into a single `BooleanClauseList`
    construct.
  id: totrans-3886
  prefs: []
  type: TYPE_NORMAL
  zh: 这将当前的 WHERE 条件集合装配成一个名为 `BooleanClauseList` 的结构。
- en: New in version 1.4.
  id: totrans-3887
  prefs: []
  type: TYPE_NORMAL
  zh: 新功能于版本 1.4 中引入。
- en: '[PRE754]'
  id: totrans-3888
  prefs: []
  type: TYPE_PRE
  zh: '[PRE754]'
- en: '*inherited from the* [`GenerativeSelect.with_for_update()`](#sqlalchemy.sql.expression.GenerativeSelect.with_for_update
    "sqlalchemy.sql.expression.GenerativeSelect.with_for_update") *method of* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
  id: totrans-3889
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`GenerativeSelect.with_for_update()`](#sqlalchemy.sql.expression.GenerativeSelect.with_for_update
    "sqlalchemy.sql.expression.GenerativeSelect.with_for_update") *方法的* [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect")'
- en: Specify a `FOR UPDATE` clause for this [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect
    "sqlalchemy.sql.expression.GenerativeSelect").
  id: totrans-3890
  prefs: []
  type: TYPE_NORMAL
  zh: 为这个 [`GenerativeSelect`](#sqlalchemy.sql.expression.GenerativeSelect "sqlalchemy.sql.expression.GenerativeSelect")
    指定一个 `FOR UPDATE` 子句。
- en: 'E.g.:'
  id: totrans-3891
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE755]'
  id: totrans-3892
  prefs: []
  type: TYPE_PRE
  zh: '[PRE755]'
- en: 'On a database like PostgreSQL or Oracle, the above would render a statement
    like:'
  id: totrans-3893
  prefs: []
  type: TYPE_NORMAL
  zh: 在像 PostgreSQL 或 Oracle 这样的数据库上，上述内容会渲染为类似的语句：
- en: '[PRE756]'
  id: totrans-3894
  prefs: []
  type: TYPE_PRE
  zh: '[PRE756]'
- en: 'on other backends, the `nowait` option is ignored and instead would produce:'
  id: totrans-3895
  prefs: []
  type: TYPE_NORMAL
  zh: 在其他后端上，`nowait` 选项会被忽略，而会产生：
- en: '[PRE757]'
  id: totrans-3896
  prefs: []
  type: TYPE_PRE
  zh: '[PRE757]'
- en: When called with no arguments, the statement will render with the suffix `FOR
    UPDATE`. Additional arguments can then be provided which allow for common database-specific
    variants.
  id: totrans-3897
  prefs: []
  type: TYPE_NORMAL
  zh: 当不带参数调用时，语句将以后缀 `FOR UPDATE` 渲染。然后可以提供其他参数，允许常见的特定于数据库的变体。
- en: 'Parameters:'
  id: totrans-3898
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`nowait` – boolean; will render `FOR UPDATE NOWAIT` on Oracle and PostgreSQL
    dialects.'
  id: totrans-3899
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nowait` – 布尔值；在 Oracle 和 PostgreSQL 方言上会渲染 `FOR UPDATE NOWAIT`。'
- en: '`read` – boolean; will render `LOCK IN SHARE MODE` on MySQL, `FOR SHARE` on
    PostgreSQL. On PostgreSQL, when combined with `nowait`, will render `FOR SHARE
    NOWAIT`.'
  id: totrans-3900
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`read` – 布尔值；在 MySQL 上会渲染 `LOCK IN SHARE MODE`，在 PostgreSQL 上会渲染 `FOR SHARE`。在
    PostgreSQL 上，与 `nowait` 结合时，会渲染 `FOR SHARE NOWAIT`。'
- en: '`of` – SQL expression or list of SQL expression elements, (typically [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects or a compatible expression, for some backends
    may also be a table expression) which will render into a `FOR UPDATE OF` clause;
    supported by PostgreSQL, Oracle, some MySQL versions and possibly others. May
    render as a table or as a column depending on backend.'
  id: totrans-3901
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`of` – SQL 表达式或 SQL 表达式元素列表，（通常是 [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 对象或兼容表达式，对于某些后端也可以是表达式）将渲染为 `FOR UPDATE OF` 子句；受 PostgreSQL、Oracle、某些
    MySQL 版本以及可能其他后端支持。可能根据后端渲染为表或列。'
- en: '`skip_locked` – boolean, will render `FOR UPDATE SKIP LOCKED` on Oracle and
    PostgreSQL dialects or `FOR SHARE SKIP LOCKED` if `read=True` is also specified.'
  id: totrans-3902
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`skip_locked` – 布尔值，在 Oracle 和 PostgreSQL 方言上会渲染 `FOR UPDATE SKIP LOCKED`，如果同时指定
    `read=True`，则会渲染 `FOR SHARE SKIP LOCKED`。'
- en: '`key_share` – boolean, will render `FOR NO KEY UPDATE`, or if combined with
    `read=True` will render `FOR KEY SHARE`, on the PostgreSQL dialect.'
  id: totrans-3903
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`key_share` – 布尔值，会在 PostgreSQL 方言上渲染 `FOR NO KEY UPDATE`，或者如果与 `read=True`
    结合，会在 PostgreSQL 方言上渲染 `FOR KEY SHARE`。'
- en: '[PRE758]'
  id: totrans-3904
  prefs: []
  type: TYPE_PRE
  zh: '[PRE758]'
- en: '*inherited from the* `HasHints.with_hint()` *method of* `HasHints`'
  id: totrans-3905
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `HasHints.with_hint()` *方法的* `HasHints`'
- en: Add an indexing or other executional context hint for the given selectable to
    this [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    or other selectable object.
  id: totrans-3906
  prefs: []
  type: TYPE_NORMAL
  zh: 为给定的可选择对象添加索引或其他执行上下文提示到这个 [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    或其他可选择对象。
- en: 'The text of the hint is rendered in the appropriate location for the database
    backend in use, relative to the given [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") or [`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    passed as the `selectable` argument. The dialect implementation typically uses
    Python string substitution syntax with the token `%(name)s` to render the name
    of the table or alias. E.g. when using Oracle, the following:'
  id: totrans-3907
  prefs: []
  type: TYPE_NORMAL
  zh: 提示文本会根据正在使用的数据库后端在相应位置渲染，相对于传递为 `selectable` 参数的给定 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 或 [`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")。方言实现通常使用
    Python 字符串替换语法，使用令牌 `%(name)s` 渲染表或别名的名称。例如，在使用 Oracle 时，���下内容：
- en: '[PRE759]'
  id: totrans-3908
  prefs: []
  type: TYPE_PRE
  zh: '[PRE759]'
- en: 'Would render SQL as:'
  id: totrans-3909
  prefs: []
  type: TYPE_NORMAL
  zh: 将渲染的 SQL 如下：
- en: '[PRE760]'
  id: totrans-3910
  prefs: []
  type: TYPE_PRE
  zh: '[PRE760]'
- en: 'The `dialect_name` option will limit the rendering of a particular hint to
    a particular backend. Such as, to add hints for both Oracle and Sybase simultaneously:'
  id: totrans-3911
  prefs: []
  type: TYPE_NORMAL
  zh: '`dialect_name` 选项将限制特定提示的渲染到特定后端。例如，同时为 Oracle 和 Sybase 添加提示：'
- en: '[PRE761]'
  id: totrans-3912
  prefs: []
  type: TYPE_PRE
  zh: '[PRE761]'
- en: See also
  id: totrans-3913
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Select.with_statement_hint()`](#sqlalchemy.sql.expression.Select.with_statement_hint
    "sqlalchemy.sql.expression.Select.with_statement_hint")'
  id: totrans-3914
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.with_statement_hint()`](#sqlalchemy.sql.expression.Select.with_statement_hint
    "sqlalchemy.sql.expression.Select.with_statement_hint")'
- en: '[PRE762]'
  id: totrans-3915
  prefs: []
  type: TYPE_PRE
  zh: '[PRE762]'
- en: Return a new [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    construct with its columns clause replaced with the given entities.
  id: totrans-3916
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的 [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    构造，其列子句替换为给定的实体。
- en: 'By default, this method is exactly equivalent to as if the original [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") had been called with the given entities. E.g.
    a statement:'
  id: totrans-3917
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，此方法与原始 [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    被调用时给定实体完全等效。例如，一个语句：
- en: '[PRE763]'
  id: totrans-3918
  prefs: []
  type: TYPE_PRE
  zh: '[PRE763]'
- en: 'should be exactly equivalent to:'
  id: totrans-3919
  prefs: []
  type: TYPE_NORMAL
  zh: 应该与以下内容完全等效：
- en: '[PRE764]'
  id: totrans-3920
  prefs: []
  type: TYPE_PRE
  zh: '[PRE764]'
- en: 'In this mode of operation, [`Select.with_only_columns()`](#sqlalchemy.sql.expression.Select.with_only_columns
    "sqlalchemy.sql.expression.Select.with_only_columns") will also dynamically alter
    the FROM clause of the statement if it is not explicitly stated. To maintain the
    existing set of FROMs including those implied by the current columns clause, add
    the [`Select.with_only_columns.maintain_column_froms`](#sqlalchemy.sql.expression.Select.with_only_columns.params.maintain_column_froms
    "sqlalchemy.sql.expression.Select.with_only_columns") parameter:'
  id: totrans-3921
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种操作模式下，如果未明确指定，[`Select.with_only_columns()`](#sqlalchemy.sql.expression.Select.with_only_columns
    "sqlalchemy.sql.expression.Select.with_only_columns") 还将动态修改语句的 FROM 子句。要保持现有的
    FROM 集合，包括当前列子句暗示的那些，请添加 [`Select.with_only_columns.maintain_column_froms`](#sqlalchemy.sql.expression.Select.with_only_columns.params.maintain_column_froms
    "sqlalchemy.sql.expression.Select.with_only_columns") 参数：
- en: '[PRE765]'
  id: totrans-3922
  prefs: []
  type: TYPE_PRE
  zh: '[PRE765]'
- en: 'The above parameter performs a transfer of the effective FROMs in the columns
    collection to the [`Select.select_from()`](#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") method, as though the following
    were invoked:'
  id: totrans-3923
  prefs: []
  type: TYPE_NORMAL
  zh: 上述参数执行了将列集合中的有效 FROM 转移到 [`Select.select_from()`](#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") 方法的操作，就好像调用了以下内容：
- en: '[PRE766]'
  id: totrans-3924
  prefs: []
  type: TYPE_PRE
  zh: '[PRE766]'
- en: 'The [`Select.with_only_columns.maintain_column_froms`](#sqlalchemy.sql.expression.Select.with_only_columns.params.maintain_column_froms
    "sqlalchemy.sql.expression.Select.with_only_columns") parameter makes use of the
    [`Select.columns_clause_froms`](#sqlalchemy.sql.expression.Select.columns_clause_froms
    "sqlalchemy.sql.expression.Select.columns_clause_froms") collection and performs
    an operation equivalent to the following:'
  id: totrans-3925
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.with_only_columns.maintain_column_froms`](#sqlalchemy.sql.expression.Select.with_only_columns.params.maintain_column_froms
    "sqlalchemy.sql.expression.Select.with_only_columns") 参数利用了 [`Select.columns_clause_froms`](#sqlalchemy.sql.expression.Select.columns_clause_froms
    "sqlalchemy.sql.expression.Select.columns_clause_froms") 集合，并执行了与下面等效的操作：'
- en: '[PRE767]'
  id: totrans-3926
  prefs: []
  type: TYPE_PRE
  zh: '[PRE767]'
- en: 'Parameters:'
  id: totrans-3927
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*entities` – column expressions to be used.'
  id: totrans-3928
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*entities` – 要使用的列表达式。'
- en: '`maintain_column_froms` –'
  id: totrans-3929
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`maintain_column_froms` –'
- en: boolean parameter that will ensure the FROM list implied from the current columns
    clause will be transferred to the [`Select.select_from()`](#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") method first.
  id: totrans-3930
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔参数，将确保从当前列子句暗示的 FROM 列表将首先转移到 [`Select.select_from()`](#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") 方法中。
- en: New in version 1.4.23.
  id: totrans-3931
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自版本 1.4.23 新增。
- en: '[PRE768]'
  id: totrans-3932
  prefs: []
  type: TYPE_PRE
  zh: '[PRE768]'
- en: '*inherited from the* `HasHints.with_statement_hint()` *method of* `HasHints`'
  id: totrans-3933
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* `HasHints.with_statement_hint()` *方法继承* 的。'
- en: Add a statement hint to this [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    or other selectable object.
  id: totrans-3934
  prefs: []
  type: TYPE_NORMAL
  zh: 给这个 [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    或其他可选择的对象添加一个语句提示。
- en: This method is similar to [`Select.with_hint()`](#sqlalchemy.sql.expression.Select.with_hint
    "sqlalchemy.sql.expression.Select.with_hint") except that it does not require
    an individual table, and instead applies to the statement as a whole.
  id: totrans-3935
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法与 [`Select.with_hint()`](#sqlalchemy.sql.expression.Select.with_hint "sqlalchemy.sql.expression.Select.with_hint")
    类似，但不需要单独的表，而是应用于整个语句。
- en: Hints here are specific to the backend database and may include directives such
    as isolation levels, file directives, fetch directives, etc.
  id: totrans-3936
  prefs: []
  type: TYPE_NORMAL
  zh: 此处的提示特定于后端数据库，可能包括隔离级别、文件指令、提取指令等。
- en: See also
  id: totrans-3937
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Select.with_hint()`](#sqlalchemy.sql.expression.Select.with_hint "sqlalchemy.sql.expression.Select.with_hint")'
  id: totrans-3938
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.with_hint()`](#sqlalchemy.sql.expression.Select.with_hint "sqlalchemy.sql.expression.Select.with_hint")'
- en: '[`Select.prefix_with()`](#sqlalchemy.sql.expression.Select.prefix_with "sqlalchemy.sql.expression.Select.prefix_with")
    - generic SELECT prefixing which also can suit some database-specific HINT syntaxes
    such as MySQL optimizer hints'
  id: totrans-3939
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.prefix_with()`](#sqlalchemy.sql.expression.Select.prefix_with "sqlalchemy.sql.expression.Select.prefix_with")
    - 通用的 SELECT 前缀，也可以适用于一些特定于数据库的 HINT 语法，例如 MySQL 优化器提示'
- en: '[PRE769]'
  id: totrans-3940
  prefs: []
  type: TYPE_PRE
  zh: '[PRE769]'
- en: Mark a class as being selectable.
  id: totrans-3941
  prefs: []
  type: TYPE_NORMAL
  zh: 将一个类标记为可选择的。
- en: '**Members**'
  id: totrans-3942
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[corresponding_column()](#sqlalchemy.sql.expression.Selectable.corresponding_column),
    [exported_columns](#sqlalchemy.sql.expression.Selectable.exported_columns), [inherit_cache](#sqlalchemy.sql.expression.Selectable.inherit_cache),
    [is_derived_from()](#sqlalchemy.sql.expression.Selectable.is_derived_from), [lateral()](#sqlalchemy.sql.expression.Selectable.lateral),
    [replace_selectable()](#sqlalchemy.sql.expression.Selectable.replace_selectable)'
  id: totrans-3943
  prefs: []
  type: TYPE_NORMAL
  zh: '[corresponding_column()](#sqlalchemy.sql.expression.Selectable.corresponding_column),
    [exported_columns](#sqlalchemy.sql.expression.Selectable.exported_columns), [inherit_cache](#sqlalchemy.sql.expression.Selectable.inherit_cache),
    [is_derived_from()](#sqlalchemy.sql.expression.Selectable.is_derived_from), [lateral()](#sqlalchemy.sql.expression.Selectable.lateral),
    [replace_selectable()](#sqlalchemy.sql.expression.Selectable.replace_selectable)'
- en: '**Class signature**'
  id: totrans-3944
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable") ([`sqlalchemy.sql.expression.ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows
    "sqlalchemy.sql.expression.ReturnsRows"))
  id: totrans-3945
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.expression.Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")（[`sqlalchemy.sql.expression.ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows
    "sqlalchemy.sql.expression.ReturnsRows")）
- en: '[PRE770]'
  id: totrans-3946
  prefs: []
  type: TYPE_PRE
  zh: '[PRE770]'
- en: Given a [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"), return the exported [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") object from the [`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") collection of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable") which corresponds to that original [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") via a common ancestor column.
  id: totrans-3947
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")，从此[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns")集合中返回原始[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")的导出[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")对象，该对象通过共同的祖先列与原始[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")对应。
- en: 'Parameters:'
  id: totrans-3948
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`column` – the target [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") to be matched.'
  id: totrans-3949
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`column` – 要匹配的目标[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")。'
- en: '`require_embedded` – only return corresponding columns for the given [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"), if the given [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") is actually present within a sub-element
    of this [`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable").
    Normally the column will match if it merely shares a common ancestor with one
    of the exported columns of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable").'
  id: totrans-3950
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`require_embedded` – 只返回给定[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")对应的列，如果给定的[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")实际上存在于此[`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")的子元素中。通常，如果列仅与此[`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")的导出列之一共享共同的祖先，则列将匹配。'
- en: See also
  id: totrans-3951
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") - the [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") that is used for the operation.'
  id: totrans-3952
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") - 用于该操作的[`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")。'
- en: '[`ColumnCollection.corresponding_column()`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection.corresponding_column
    "sqlalchemy.sql.expression.ColumnCollection.corresponding_column") - implementation
    method.'
  id: totrans-3953
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnCollection.corresponding_column()`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection.corresponding_column
    "sqlalchemy.sql.expression.ColumnCollection.corresponding_column") - 实现方法。'
- en: '[PRE771]'
  id: totrans-3954
  prefs: []
  type: TYPE_PRE
  zh: '[PRE771]'
- en: '*inherited from the* [`ReturnsRows.exported_columns`](#sqlalchemy.sql.expression.ReturnsRows.exported_columns
    "sqlalchemy.sql.expression.ReturnsRows.exported_columns") *attribute of* [`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows
    "sqlalchemy.sql.expression.ReturnsRows")'
  id: totrans-3955
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows "sqlalchemy.sql.expression.ReturnsRows")
    *的* [`ReturnsRows.exported_columns`](#sqlalchemy.sql.expression.ReturnsRows.exported_columns
    "sqlalchemy.sql.expression.ReturnsRows.exported_columns") *属性*'
- en: A [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") that represents the “exported” columns
    of this [`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows "sqlalchemy.sql.expression.ReturnsRows").
  id: totrans-3956
  prefs: []
  type: TYPE_NORMAL
  zh: 表示此 [`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows "sqlalchemy.sql.expression.ReturnsRows")
    的“导出”列的 [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")。
- en: The “exported” columns represent the collection of [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") expressions that are rendered by this
    SQL construct. There are primary varieties which are the “FROM clause columns”
    of a FROM clause, such as a table, join, or subquery, the “SELECTed columns”,
    which are the columns in the “columns clause” of a SELECT statement, and the RETURNING
    columns in a DML statement..
  id: totrans-3957
  prefs: []
  type: TYPE_NORMAL
  zh: “导出”的列代表由此 SQL 构造渲染的 [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") 表达式集合。有几种主要类型，包括 FROM 子句的“FROM 子句列”，如表、连接或子查询，“SELECT”中的列，即
    SELECT 语句的“列子句”，以及 DML 语句中的 RETURNING 列。
- en: New in version 1.4.
  id: totrans-3958
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中的新功能。
- en: See also
  id: totrans-3959
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`FromClause.exported_columns`](#sqlalchemy.sql.expression.FromClause.exported_columns
    "sqlalchemy.sql.expression.FromClause.exported_columns")'
  id: totrans-3960
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FromClause.exported_columns`](#sqlalchemy.sql.expression.FromClause.exported_columns
    "sqlalchemy.sql.expression.FromClause.exported_columns")'
- en: '[`SelectBase.exported_columns`](#sqlalchemy.sql.expression.SelectBase.exported_columns
    "sqlalchemy.sql.expression.SelectBase.exported_columns")'
  id: totrans-3961
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SelectBase.exported_columns`](#sqlalchemy.sql.expression.SelectBase.exported_columns
    "sqlalchemy.sql.expression.SelectBase.exported_columns")'
- en: '[PRE772]'
  id: totrans-3962
  prefs: []
  type: TYPE_PRE
  zh: '[PRE772]'
- en: '*inherited from the* `HasCacheKey.inherit_cache` *attribute of* [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.cache_key.HasCacheKey")'
  id: totrans-3963
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.cache_key.HasCacheKey") *的* `HasCacheKey.inherit_cache` *属性*'
- en: Indicate if this [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") instance should make use of the cache
    key generation scheme used by its immediate superclass.
  id: totrans-3964
  prefs: []
  type: TYPE_NORMAL
  zh: 指示此[`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey "sqlalchemy.sql.traversals.HasCacheKey")实例是否应使用其直接超类使用的缓存键生成方案。
- en: The attribute defaults to `None`, which indicates that a construct has not yet
    taken into account whether or not its appropriate for it to participate in caching;
    this is functionally equivalent to setting the value to `False`, except that a
    warning is also emitted.
  id: totrans-3965
  prefs: []
  type: TYPE_NORMAL
  zh: 属性默认为`None`，表示构造尚未考虑其是否适合参与缓存；这在功能上等同于将值设置为`False`，只是还会发出警告。
- en: This flag can be set to `True` on a particular class, if the SQL that corresponds
    to the object does not change based on attributes which are local to this class,
    and not its superclass.
  id: totrans-3966
  prefs: []
  type: TYPE_NORMAL
  zh: 如果与此类本地属性而不是其超类无关的属性的 SQL 不会更改，则可以在特定类上将此标志设置为`True`。
- en: See also
  id: totrans-3967
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Enabling Caching Support for Custom Constructs](compiler.html#compilerext-caching)
    - General guideslines for setting the [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute for third-party
    or user defined SQL constructs.'
  id: totrans-3968
  prefs: []
  type: TYPE_NORMAL
  zh: '[启用自定义构造的缓存支持](compiler.html#compilerext-caching) - 设置第三方或用户定义的 SQL 构造的 [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") 属性的通用指南。'
- en: '[PRE773]'
  id: totrans-3969
  prefs: []
  type: TYPE_PRE
  zh: '[PRE773]'
- en: '*inherited from the* [`ReturnsRows.is_derived_from()`](#sqlalchemy.sql.expression.ReturnsRows.is_derived_from
    "sqlalchemy.sql.expression.ReturnsRows.is_derived_from") *method of* [`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows
    "sqlalchemy.sql.expression.ReturnsRows")'
  id: totrans-3970
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows "sqlalchemy.sql.expression.ReturnsRows")
    *的* [`ReturnsRows.is_derived_from()`](#sqlalchemy.sql.expression.ReturnsRows.is_derived_from
    "sqlalchemy.sql.expression.ReturnsRows.is_derived_from") *方法*'
- en: Return `True` if this [`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows
    "sqlalchemy.sql.expression.ReturnsRows") is ‘derived’ from the given [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-3971
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此[`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows "sqlalchemy.sql.expression.ReturnsRows")是从给定的[`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")‘派生’，则返回`True`。
- en: An example would be an Alias of a Table is derived from that Table.
  id: totrans-3972
  prefs: []
  type: TYPE_NORMAL
  zh: 一个示例是Table的别名派生自该Table。
- en: '[PRE774]'
  id: totrans-3973
  prefs: []
  type: TYPE_PRE
  zh: '[PRE774]'
- en: Return a LATERAL alias of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable").
  id: totrans-3974
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此[`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable")的横向别名。
- en: The return value is the [`Lateral`](#sqlalchemy.sql.expression.Lateral "sqlalchemy.sql.expression.Lateral")
    construct also provided by the top-level [`lateral()`](#sqlalchemy.sql.expression.lateral
    "sqlalchemy.sql.expression.lateral") function.
  id: totrans-3975
  prefs: []
  type: TYPE_NORMAL
  zh: 返回值是顶层[`lateral()`](#sqlalchemy.sql.expression.lateral "sqlalchemy.sql.expression.lateral")函数提供的[`Lateral`](#sqlalchemy.sql.expression.Lateral
    "sqlalchemy.sql.expression.Lateral")构造。
- en: See also
  id: totrans-3976
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[LATERAL correlation](../tutorial/data_select.html#tutorial-lateral-correlation)
    - overview of usage.'
  id: totrans-3977
  prefs: []
  type: TYPE_NORMAL
  zh: '[横向相关](../tutorial/data_select.html#tutorial-lateral-correlation) - 使用概述。'
- en: '[PRE775]'
  id: totrans-3978
  prefs: []
  type: TYPE_PRE
  zh: '[PRE775]'
- en: Replace all occurrences of [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") ‘old’ with the given [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") object, returning a copy of this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-3979
  prefs: []
  type: TYPE_NORMAL
  zh: 用给定的[`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")对象替换所有[`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")‘旧’的出现，返回此[`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")的副本。
- en: 'Deprecated since version 1.4: The [`Selectable.replace_selectable()`](#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") method is deprecated,
    and will be removed in a future release. Similar functionality is available via
    the sqlalchemy.sql.visitors module.'
  id: totrans-3980
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.4起弃用：[`Selectable.replace_selectable()`](#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable")方法已弃用，并将在将来的版本中删除。通过sqlalchemy.sql.visitors模块可获得类似的功能。
- en: '[PRE776]'
  id: totrans-3981
  prefs: []
  type: TYPE_PRE
  zh: '[PRE776]'
- en: Base class for SELECT statements.
  id: totrans-3982
  prefs: []
  type: TYPE_NORMAL
  zh: SELECT语句的基类。
- en: This includes [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select"),
    [`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect "sqlalchemy.sql.expression.CompoundSelect")
    and [`TextualSelect`](#sqlalchemy.sql.expression.TextualSelect "sqlalchemy.sql.expression.TextualSelect").
  id: totrans-3983
  prefs: []
  type: TYPE_NORMAL
  zh: 这包括[`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")、[`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect
    "sqlalchemy.sql.expression.CompoundSelect")和[`TextualSelect`](#sqlalchemy.sql.expression.TextualSelect
    "sqlalchemy.sql.expression.TextualSelect")。
- en: '**Members**'
  id: totrans-3984
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[add_cte()](#sqlalchemy.sql.expression.SelectBase.add_cte), [alias()](#sqlalchemy.sql.expression.SelectBase.alias),
    [as_scalar()](#sqlalchemy.sql.expression.SelectBase.as_scalar), [c](#sqlalchemy.sql.expression.SelectBase.c),
    [corresponding_column()](#sqlalchemy.sql.expression.SelectBase.corresponding_column),
    [cte()](#sqlalchemy.sql.expression.SelectBase.cte), [exists()](#sqlalchemy.sql.expression.SelectBase.exists),
    [exported_columns](#sqlalchemy.sql.expression.SelectBase.exported_columns), [get_label_style()](#sqlalchemy.sql.expression.SelectBase.get_label_style),
    [inherit_cache](#sqlalchemy.sql.expression.SelectBase.inherit_cache), [is_derived_from()](#sqlalchemy.sql.expression.SelectBase.is_derived_from),
    [label()](#sqlalchemy.sql.expression.SelectBase.label), [lateral()](#sqlalchemy.sql.expression.SelectBase.lateral),
    [replace_selectable()](#sqlalchemy.sql.expression.SelectBase.replace_selectable),
    [scalar_subquery()](#sqlalchemy.sql.expression.SelectBase.scalar_subquery), [select()](#sqlalchemy.sql.expression.SelectBase.select),
    [selected_columns](#sqlalchemy.sql.expression.SelectBase.selected_columns), [set_label_style()](#sqlalchemy.sql.expression.SelectBase.set_label_style),
    [subquery()](#sqlalchemy.sql.expression.SelectBase.subquery)'
  id: totrans-3985
  prefs: []
  type: TYPE_NORMAL
  zh: '[add_cte()](#sqlalchemy.sql.expression.SelectBase.add_cte), [alias()](#sqlalchemy.sql.expression.SelectBase.alias),
    [as_scalar()](#sqlalchemy.sql.expression.SelectBase.as_scalar), [c](#sqlalchemy.sql.expression.SelectBase.c),
    [corresponding_column()](#sqlalchemy.sql.expression.SelectBase.corresponding_column),
    [cte()](#sqlalchemy.sql.expression.SelectBase.cte), [exists()](#sqlalchemy.sql.expression.SelectBase.exists),
    [exported_columns](#sqlalchemy.sql.expression.SelectBase.exported_columns), [get_label_style()](#sqlalchemy.sql.expression.SelectBase.get_label_style),
    [inherit_cache](#sqlalchemy.sql.expression.SelectBase.inherit_cache), [is_derived_from()](#sqlalchemy.sql.expression.SelectBase.is_derived_from),
    [label()](#sqlalchemy.sql.expression.SelectBase.label), [lateral()](#sqlalchemy.sql.expression.SelectBase.lateral),
    [replace_selectable()](#sqlalchemy.sql.expression.SelectBase.replace_selectable),
    [scalar_subquery()](#sqlalchemy.sql.expression.SelectBase.scalar_subquery), [select()](#sqlalchemy.sql.expression.SelectBase.select),
    [selected_columns](#sqlalchemy.sql.expression.SelectBase.selected_columns), [set_label_style()](#sqlalchemy.sql.expression.SelectBase.set_label_style),
    [subquery()](#sqlalchemy.sql.expression.SelectBase.subquery)'
- en: '**Class signature**'
  id: totrans-3986
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase") (`sqlalchemy.sql.roles.SelectStatementRole`,
    `sqlalchemy.sql.roles.DMLSelectRole`, `sqlalchemy.sql.roles.CompoundElementRole`,
    `sqlalchemy.sql.roles.InElementRole`, [`sqlalchemy.sql.expression.HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE"), `sqlalchemy.sql.annotation.SupportsCloneAnnotations`,
    [`sqlalchemy.sql.expression.Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable"))
  id: totrans-3987
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.expression.SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase") (`sqlalchemy.sql.roles.SelectStatementRole`,
    `sqlalchemy.sql.roles.DMLSelectRole`, `sqlalchemy.sql.roles.CompoundElementRole`,
    `sqlalchemy.sql.roles.InElementRole`, [`sqlalchemy.sql.expression.HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE"), `sqlalchemy.sql.annotation.SupportsCloneAnnotations`,
    [`sqlalchemy.sql.expression.Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable"))
- en: '[PRE777]'
  id: totrans-3988
  prefs: []
  type: TYPE_PRE
  zh: '[PRE777]'
- en: '*inherited from the* [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") *method of* [`HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE")'
  id: totrans-3989
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte "sqlalchemy.sql.expression.HasCTE.add_cte")
    *方法的* [`HasCTE`](#sqlalchemy.sql.expression.HasCTE "sqlalchemy.sql.expression.HasCTE")'
- en: Add one or more [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    constructs to this statement.
  id: totrans-3990
  prefs: []
  type: TYPE_NORMAL
  zh: 向此语句添加一个或多个 [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    构造。
- en: This method will associate the given [`CTE`](#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE") constructs with the parent statement such that
    they will each be unconditionally rendered in the WITH clause of the final statement,
    even if not referenced elsewhere within the statement or any sub-selects.
  id: totrans-3991
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法将将给定的 [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    构造与父语句关联，以便它们将无条件地在最终语句的 WITH 子句中呈现，即使在语句或任何子选择中未引用它们。
- en: The optional [`HasCTE.add_cte.nest_here`](#sqlalchemy.sql.expression.HasCTE.add_cte.params.nest_here
    "sqlalchemy.sql.expression.HasCTE.add_cte") parameter when set to True will have
    the effect that each given [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    will render in a WITH clause rendered directly along with this statement, rather
    than being moved to the top of the ultimate rendered statement, even if this statement
    is rendered as a subquery within a larger statement.
  id: totrans-3992
  prefs: []
  type: TYPE_NORMAL
  zh: 当设置为True时，可选的[`HasCTE.add_cte.nest_here`](#sqlalchemy.sql.expression.HasCTE.add_cte.params.nest_here
    "sqlalchemy.sql.expression.HasCTE.add_cte") 参数将导致每个给定的[`CTE`](#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE") 将与此语句一起直接呈现在WITH子句中，而不是被移动到最终呈现的语句的顶部，即使此语句被呈现为在较大语句中的子查询内也是如此。
- en: This method has two general uses. One is to embed CTE statements that serve
    some purpose without being referenced explicitly, such as the use case of embedding
    a DML statement such as an INSERT or UPDATE as a CTE inline with a primary statement
    that may draw from its results indirectly. The other is to provide control over
    the exact placement of a particular series of CTE constructs that should remain
    rendered directly in terms of a particular statement that may be nested in a larger
    statement.
  id: totrans-3993
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法有两个通用用途。一个是嵌入一些具有某种目的但不被明确引用的CTE语句，例如嵌入一个DML语句（例如INSERT或UPDATE）作为CTE内联到主语句中，该主语句可能间接地引用其结果。另一个是控制特定一系列CTE构造的确切放置位置，这些构造应直接以一个特定语句的形式呈现，该语句可能嵌套在较大的语句中。
- en: 'E.g.:'
  id: totrans-3994
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE778]'
  id: totrans-3995
  prefs: []
  type: TYPE_PRE
  zh: '[PRE778]'
- en: 'Would render:'
  id: totrans-3996
  prefs: []
  type: TYPE_NORMAL
  zh: 会呈现为：
- en: '[PRE779]'
  id: totrans-3997
  prefs: []
  type: TYPE_PRE
  zh: '[PRE779]'
- en: Above, the “anon_1” CTE is not referenced in the SELECT statement, however still
    accomplishes the task of running an INSERT statement.
  id: totrans-3998
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，“anon_1” CTE未在SELECT语句中引用，但仍然完成了运行INSERT语句的任务。
- en: 'Similarly in a DML-related context, using the PostgreSQL [`Insert`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Insert
    "sqlalchemy.dialects.postgresql.Insert") construct to generate an “upsert”:'
  id: totrans-3999
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，在与DML相关的上下文中，使用PostgreSQL [`Insert`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Insert
    "sqlalchemy.dialects.postgresql.Insert") 构造生成“upsert”：
- en: '[PRE780]'
  id: totrans-4000
  prefs: []
  type: TYPE_PRE
  zh: '[PRE780]'
- en: 'The above statement renders as:'
  id: totrans-4001
  prefs: []
  type: TYPE_NORMAL
  zh: 上述语句呈现为：
- en: '[PRE781]'
  id: totrans-4002
  prefs: []
  type: TYPE_PRE
  zh: '[PRE781]'
- en: New in version 1.4.21.
  id: totrans-4003
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本中新增1.4.21。
- en: 'Parameters:'
  id: totrans-4004
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*ctes` –'
  id: totrans-4005
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*ctes` –'
- en: zero or more [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    constructs.
  id: totrans-4006
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 零个或多个[`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    构造。
- en: 'Changed in version 2.0: Multiple CTE instances are accepted'
  id: totrans-4007
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 2.0版本中的更改：接受多个CTE实例
- en: '`nest_here` –'
  id: totrans-4008
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nest_here` –'
- en: if True, the given CTE or CTEs will be rendered as though they specified the
    [`HasCTE.cte.nesting`](#sqlalchemy.sql.expression.HasCTE.cte.params.nesting "sqlalchemy.sql.expression.HasCTE.cte")
    flag to `True` when they were added to this [`HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE"). Assuming the given CTEs are not referenced
    in an outer-enclosing statement as well, the CTEs given should render at the level
    of this statement when this flag is given.
  id: totrans-4009
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果为True，则给定的CTE或CTE将呈现为，好像它们在添加到此[`HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE") 时指定了[`HasCTE.cte.nesting`](#sqlalchemy.sql.expression.HasCTE.cte.params.nesting
    "sqlalchemy.sql.expression.HasCTE.cte") 标志为True。假设给定的CTE在外部包含语句中也没有被引用，那么当给出此标志时，给定的CTE应该在此语句级别呈现。
- en: New in version 2.0.
  id: totrans-4010
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版本中新增2.0。
- en: See also
  id: totrans-4011
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`HasCTE.cte.nesting`](#sqlalchemy.sql.expression.HasCTE.cte.params.nesting
    "sqlalchemy.sql.expression.HasCTE.cte")'
  id: totrans-4012
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`HasCTE.cte.nesting`](#sqlalchemy.sql.expression.HasCTE.cte.params.nesting
    "sqlalchemy.sql.expression.HasCTE.cte")'
- en: '[PRE782]'
  id: totrans-4013
  prefs: []
  type: TYPE_PRE
  zh: '[PRE782]'
- en: Return a named subquery against this [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase").
  id: totrans-4014
  prefs: []
  type: TYPE_NORMAL
  zh: 返回针对此 [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")
    的命名子查询。
- en: For a [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")
    (as opposed to a [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")),
    this returns a [`Subquery`](#sqlalchemy.sql.expression.Subquery "sqlalchemy.sql.expression.Subquery")
    object which behaves mostly the same as the [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") object that is used with a [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-4015
  prefs: []
  type: TYPE_NORMAL
  zh: 对于[`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")
    （而不是[`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")），这将返回一个[`Subquery`](#sqlalchemy.sql.expression.Subquery
    "sqlalchemy.sql.expression.Subquery") 对象，其行为基本上与与[`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") 一起使用的[`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") 对象相同。
- en: 'Changed in version 1.4: The [`SelectBase.alias()`](#sqlalchemy.sql.expression.SelectBase.alias
    "sqlalchemy.sql.expression.SelectBase.alias") method is now a synonym for the
    [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery "sqlalchemy.sql.expression.SelectBase.subquery")
    method.'
  id: totrans-4016
  prefs: []
  type: TYPE_NORMAL
  zh: 于版本1.4中更改：[`SelectBase.alias()`](#sqlalchemy.sql.expression.SelectBase.alias
    "sqlalchemy.sql.expression.SelectBase.alias") 方法现在是 [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") 方法的同义词。
- en: '[PRE783]'
  id: totrans-4017
  prefs: []
  type: TYPE_PRE
  zh: '[PRE783]'
- en: 'Deprecated since version 1.4: The [`SelectBase.as_scalar()`](#sqlalchemy.sql.expression.SelectBase.as_scalar
    "sqlalchemy.sql.expression.SelectBase.as_scalar") method is deprecated and will
    be removed in a future release. Please refer to [`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery").'
  id: totrans-4018
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.4起弃用：[`SelectBase.as_scalar()`](#sqlalchemy.sql.expression.SelectBase.as_scalar
    "sqlalchemy.sql.expression.SelectBase.as_scalar") 方法已弃用，并将在未来版本中移除。请参考 [`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery")。
- en: '[PRE784]'
  id: totrans-4019
  prefs: []
  type: TYPE_PRE
  zh: '[PRE784]'
- en: 'Deprecated since version 1.4: The [`SelectBase.c`](#sqlalchemy.sql.expression.SelectBase.c
    "sqlalchemy.sql.expression.SelectBase.c") and `SelectBase.columns` attributes
    are deprecated and will be removed in a future release; these attributes implicitly
    create a subquery that should be explicit. Please call [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") first in order to create a subquery,
    which then contains this attribute. To access the columns that this SELECT object
    SELECTs from, use the [`SelectBase.selected_columns`](#sqlalchemy.sql.expression.SelectBase.selected_columns
    "sqlalchemy.sql.expression.SelectBase.selected_columns") attribute.'
  id: totrans-4020
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.4起弃用：[`SelectBase.c`](#sqlalchemy.sql.expression.SelectBase.c "sqlalchemy.sql.expression.SelectBase.c")
    和 `SelectBase.columns` 属性已弃用，并将在未来版本中移除；这些属性隐式创建了一个子查询，应显式指定。请先调用 [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") 来创建一个子查询，然后该属性将包含在其中。要访问此 SELECT
    对象从中选择的列，请使用 [`SelectBase.selected_columns`](#sqlalchemy.sql.expression.SelectBase.selected_columns
    "sqlalchemy.sql.expression.SelectBase.selected_columns") 属性。
- en: '[PRE785]'
  id: totrans-4021
  prefs: []
  type: TYPE_PRE
  zh: '[PRE785]'
- en: '*inherited from the* [`Selectable.corresponding_column()`](#sqlalchemy.sql.expression.Selectable.corresponding_column
    "sqlalchemy.sql.expression.Selectable.corresponding_column") *method of* [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
  id: totrans-4022
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Selectable.corresponding_column()`](#sqlalchemy.sql.expression.Selectable.corresponding_column
    "sqlalchemy.sql.expression.Selectable.corresponding_column") *方法的* [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
- en: Given a [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"), return the exported [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") object from the [`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") collection of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable") which corresponds to that original [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") via a common ancestor column.
  id: totrans-4023
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个 [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")，返回此 [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable") 的 [`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") 集合中导出的 [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") 对象，该对象与原始的 [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") 通过共同的祖先列相对应。
- en: 'Parameters:'
  id: totrans-4024
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`column` – the target [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") to be matched.'
  id: totrans-4025
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`column` – 目标 [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")，要匹配。'
- en: '`require_embedded` – only return corresponding columns for the given [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"), if the given [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") is actually present within a sub-element
    of this [`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable").
    Normally the column will match if it merely shares a common ancestor with one
    of the exported columns of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable").'
  id: totrans-4026
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`require_embedded` – 仅返回给定[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")的相应列，如果给定的[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")实际上存在于此[`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")的子元素中。通常，如果列仅与此[`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")的导出列之一共享共同的祖先，则该列将匹配。'
- en: See also
  id: totrans-4027
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") - the [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") that is used for the operation.'
  id: totrans-4028
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") - 用于操作的[`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")。'
- en: '[`ColumnCollection.corresponding_column()`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection.corresponding_column
    "sqlalchemy.sql.expression.ColumnCollection.corresponding_column") - implementation
    method.'
  id: totrans-4029
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnCollection.corresponding_column()`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection.corresponding_column
    "sqlalchemy.sql.expression.ColumnCollection.corresponding_column") - 实现方法。'
- en: '[PRE786]'
  id: totrans-4030
  prefs: []
  type: TYPE_PRE
  zh: '[PRE786]'
- en: '*inherited from the* [`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte
    "sqlalchemy.sql.expression.HasCTE.cte") *method of* [`HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE")'
  id: totrans-4031
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte "sqlalchemy.sql.expression.HasCTE.cte")
    *方法的* [`HasCTE`](#sqlalchemy.sql.expression.HasCTE "sqlalchemy.sql.expression.HasCTE")'
- en: Return a new [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE"),
    or Common Table Expression instance.
  id: totrans-4032
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的[`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")，或者Common
    Table Expression实例。
- en: Common table expressions are a SQL standard whereby SELECT statements can draw
    upon secondary statements specified along with the primary statement, using a
    clause called “WITH”. Special semantics regarding UNION can also be employed to
    allow “recursive” queries, where a SELECT statement can draw upon the set of rows
    that have previously been selected.
  id: totrans-4033
  prefs: []
  type: TYPE_NORMAL
  zh: 公共表达式是SQL标准，其中SELECT语句可以使用名为“WITH”的子句指定的辅助语句来绘制主要语句，特殊的关于UNION的语义也可以用来允许“递归”查询，其中SELECT语句可以绘制之前已经选择的行集。
- en: CTEs can also be applied to DML constructs UPDATE, INSERT and DELETE on some
    databases, both as a source of CTE rows when combined with RETURNING, as well
    as a consumer of CTE rows.
  id: totrans-4034
  prefs: []
  type: TYPE_NORMAL
  zh: CTEs也可以应用于一些数据库上的DML构造UPDATE、INSERT和DELETE，既可以作为CTE行的来源与RETURNING组合使用，也可以作为CTE行的消费者。
- en: SQLAlchemy detects [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    objects, which are treated similarly to [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") objects, as special elements to be delivered
    to the FROM clause of the statement as well as to a WITH clause at the top of
    the statement.
  id: totrans-4035
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy检测到[`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")对象，它们被视为与[`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias")对象类似的特殊元素，将它们作为语句的FROM子句以及语句顶部的WITH子句传递。
- en: For special prefixes such as PostgreSQL “MATERIALIZED” and “NOT MATERIALIZED”,
    the `CTE.prefix_with()` method may be used to establish these.
  id: totrans-4036
  prefs: []
  type: TYPE_NORMAL
  zh: 对于特殊的前缀，如PostgreSQL的“MATERIALIZED”和“NOT MATERIALIZED”，可以使用`CTE.prefix_with()`方法来建立这些前缀。
- en: 'Changed in version 1.3.13: Added support for prefixes. In particular - MATERIALIZED
    and NOT MATERIALIZED.'
  id: totrans-4037
  prefs: []
  type: TYPE_NORMAL
  zh: 从1.3.13版本开始更改：添加了对前缀的支持。特别是 - MATERIALIZED和NOT MATERIALIZED。
- en: 'Parameters:'
  id: totrans-4038
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`name` – name given to the common table expression. Like [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias"), the name can be left as `None`
    in which case an anonymous symbol will be used at query compile time.'
  id: totrans-4039
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 给通用表达式的名称。像[`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias")一样，如果将名称保留为`None`，则在查询编译时将使用匿名符号。'
- en: '`recursive` – if `True`, will render `WITH RECURSIVE`. A recursive common table
    expression is intended to be used in conjunction with UNION ALL in order to derive
    rows from those already selected.'
  id: totrans-4040
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`recursive` – 如果为 `True`，将渲染 `WITH RECURSIVE`。递归公共表达式打算与 UNION ALL 结合使用，以从已选择的行中派生行。'
- en: '`nesting` –'
  id: totrans-4041
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nesting` –'
- en: if `True`, will render the CTE locally to the statement in which it is referenced.
    For more complex scenarios, the [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") method using the [`HasCTE.add_cte.nest_here`](#sqlalchemy.sql.expression.HasCTE.add_cte.params.nest_here
    "sqlalchemy.sql.expression.HasCTE.add_cte") parameter may also be used to more
    carefully control the exact placement of a particular CTE.
  id: totrans-4042
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果为 `True`，将在引用它的语句中本地渲染 CTE。对于更复杂的场景，还可以使用 [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") 方法，使用 [`HasCTE.add_cte.nest_here`](#sqlalchemy.sql.expression.HasCTE.add_cte.params.nest_here
    "sqlalchemy.sql.expression.HasCTE.add_cte") 参数更精确地控制特定 CTE 的精确放置位置。
- en: New in version 1.4.24.
  id: totrans-4043
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 1.4.24 版本中新增。
- en: See also
  id: totrans-4044
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte "sqlalchemy.sql.expression.HasCTE.add_cte")'
  id: totrans-4045
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte "sqlalchemy.sql.expression.HasCTE.add_cte")'
- en: The following examples include two from PostgreSQL’s documentation at [https://www.postgresql.org/docs/current/static/queries-with.html](https://www.postgresql.org/docs/current/static/queries-with.html),
    as well as additional examples.
  id: totrans-4046
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例包括两个来自 PostgreSQL 文档的示例，网址为 [https://www.postgresql.org/docs/current/static/queries-with.html](https://www.postgresql.org/docs/current/static/queries-with.html)，以及其他示例。
- en: 'Example 1, non recursive:'
  id: totrans-4047
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 1，非递归：
- en: '[PRE787]'
  id: totrans-4048
  prefs: []
  type: TYPE_PRE
  zh: '[PRE787]'
- en: 'Example 2, WITH RECURSIVE:'
  id: totrans-4049
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 2，使用 WITH RECURSIVE：
- en: '[PRE788]'
  id: totrans-4050
  prefs: []
  type: TYPE_PRE
  zh: '[PRE788]'
- en: 'Example 3, an upsert using UPDATE and INSERT with CTEs:'
  id: totrans-4051
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 3，使用 CTE 进行更新和插入：
- en: '[PRE789]'
  id: totrans-4052
  prefs: []
  type: TYPE_PRE
  zh: '[PRE789]'
- en: 'Example 4, Nesting CTE (SQLAlchemy 1.4.24 and above):'
  id: totrans-4053
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 4，CTE 嵌套（SQLAlchemy 1.4.24及以上版本）：
- en: '[PRE790]'
  id: totrans-4054
  prefs: []
  type: TYPE_PRE
  zh: '[PRE790]'
- en: 'The above query will render the second CTE nested inside the first, shown with
    inline parameters below as:'
  id: totrans-4055
  prefs: []
  type: TYPE_NORMAL
  zh: 上述查询将第二个 CTE 嵌套在第一个内部，如下所示：
- en: '[PRE791]'
  id: totrans-4056
  prefs: []
  type: TYPE_PRE
  zh: '[PRE791]'
- en: 'The same CTE can be set up using the [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") method as follows (SQLAlchemy 2.0
    and above):'
  id: totrans-4057
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte "sqlalchemy.sql.expression.HasCTE.add_cte")
    方法可以设置相同的 CTE（通用表达式）（SQLAlchemy 2.0及以上版本）：
- en: '[PRE792]'
  id: totrans-4058
  prefs: []
  type: TYPE_PRE
  zh: '[PRE792]'
- en: 'Example 5, Non-Linear CTE (SQLAlchemy 1.4.28 and above):'
  id: totrans-4059
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 5，非线性 CTE（SQLAlchemy 1.4.28及以上版本）：
- en: '[PRE793]'
  id: totrans-4060
  prefs: []
  type: TYPE_PRE
  zh: '[PRE793]'
- en: 'The above query will render 2 UNIONs inside the recursive CTE:'
  id: totrans-4061
  prefs: []
  type: TYPE_NORMAL
  zh: 上述查询将在递归 CTE 内部呈现 2 个 UNION：
- en: '[PRE794]'
  id: totrans-4062
  prefs: []
  type: TYPE_PRE
  zh: '[PRE794]'
- en: See also
  id: totrans-4063
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Query.cte()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.cte "sqlalchemy.orm.Query.cte")
    - ORM version of [`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte "sqlalchemy.sql.expression.HasCTE.cte").'
  id: totrans-4064
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.cte()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.cte "sqlalchemy.orm.Query.cte")
    - [`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte "sqlalchemy.sql.expression.HasCTE.cte")
    的 ORM 版本。'
- en: '[PRE795]'
  id: totrans-4065
  prefs: []
  type: TYPE_PRE
  zh: '[PRE795]'
- en: Return an [`Exists`](#sqlalchemy.sql.expression.Exists "sqlalchemy.sql.expression.Exists")
    representation of this selectable, which can be used as a column expression.
  id: totrans-4066
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此可选的 [`Exists`](#sqlalchemy.sql.expression.Exists "sqlalchemy.sql.expression.Exists")
    表示形式，可用作列表达式。
- en: The returned object is an instance of [`Exists`](#sqlalchemy.sql.expression.Exists
    "sqlalchemy.sql.expression.Exists").
  id: totrans-4067
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的对象是 [`Exists`](#sqlalchemy.sql.expression.Exists "sqlalchemy.sql.expression.Exists")
    的实例。
- en: See also
  id: totrans-4068
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`exists()`](#sqlalchemy.sql.expression.exists "sqlalchemy.sql.expression.exists")'
  id: totrans-4069
  prefs: []
  type: TYPE_NORMAL
  zh: '[`exists()`](#sqlalchemy.sql.expression.exists "sqlalchemy.sql.expression.exists")'
- en: '[EXISTS subqueries](../tutorial/data_select.html#tutorial-exists) - in the
    [2.0 style](../glossary.html#term-2.0-style) tutorial.'
  id: totrans-4070
  prefs: []
  type: TYPE_NORMAL
  zh: '[EXISTS 子查询](../tutorial/data_select.html#tutorial-exists) - 在 [2.0 风格](../glossary.html#term-2.0-style)
    的教程中。'
- en: New in version 1.4.
  id: totrans-4071
  prefs: []
  type: TYPE_NORMAL
  zh: 在 1.4 版本中新增。
- en: '[PRE796]'
  id: totrans-4072
  prefs: []
  type: TYPE_PRE
  zh: '[PRE796]'
- en: A [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") that represents the “exported” columns
    of this [`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable"),
    not including [`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause") constructs.
  id: totrans-4073
  prefs: []
  type: TYPE_NORMAL
  zh: 表示此 [`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable")
    的“导出”列的 [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")，不包括 [`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause") 结构。
- en: The “exported” columns for a [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase") object are synonymous with the [`SelectBase.selected_columns`](#sqlalchemy.sql.expression.SelectBase.selected_columns
    "sqlalchemy.sql.expression.SelectBase.selected_columns") collection.
  id: totrans-4074
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")对象的“导出”列与[`SelectBase.selected_columns`](#sqlalchemy.sql.expression.SelectBase.selected_columns
    "sqlalchemy.sql.expression.SelectBase.selected_columns")集合是同义词。'
- en: New in version 1.4.
  id: totrans-4075
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.4开始。
- en: See also
  id: totrans-4076
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见
- en: '[`Select.exported_columns`](#sqlalchemy.sql.expression.Select.exported_columns
    "sqlalchemy.sql.expression.Select.exported_columns")'
  id: totrans-4077
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.exported_columns`](#sqlalchemy.sql.expression.Select.exported_columns
    "sqlalchemy.sql.expression.Select.exported_columns")'
- en: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns")'
  id: totrans-4078
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns")'
- en: '[`FromClause.exported_columns`](#sqlalchemy.sql.expression.FromClause.exported_columns
    "sqlalchemy.sql.expression.FromClause.exported_columns")'
  id: totrans-4079
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FromClause.exported_columns`](#sqlalchemy.sql.expression.FromClause.exported_columns
    "sqlalchemy.sql.expression.FromClause.exported_columns")'
- en: '[PRE797]'
  id: totrans-4080
  prefs: []
  type: TYPE_PRE
  zh: '[PRE797]'
- en: Retrieve the current label style.
  id: totrans-4081
  prefs: []
  type: TYPE_NORMAL
  zh: 检索当前标签样式。
- en: Implemented by subclasses.
  id: totrans-4082
  prefs: []
  type: TYPE_NORMAL
  zh: 由子类实现。
- en: '[PRE798]'
  id: totrans-4083
  prefs: []
  type: TYPE_PRE
  zh: '[PRE798]'
- en: '*inherited from the* `HasCacheKey.inherit_cache` *attribute of* [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.cache_key.HasCacheKey")'
  id: totrans-4084
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey "sqlalchemy.sql.cache_key.HasCacheKey")
    *的`HasCacheKey.inherit_cache`属性继承*'
- en: Indicate if this [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") instance should make use of the cache
    key generation scheme used by its immediate superclass.
  id: totrans-4085
  prefs: []
  type: TYPE_NORMAL
  zh: 指示此[`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey "sqlalchemy.sql.traversals.HasCacheKey")实例是否应该使用其直接超类使用的缓存键生成方案。
- en: The attribute defaults to `None`, which indicates that a construct has not yet
    taken into account whether or not its appropriate for it to participate in caching;
    this is functionally equivalent to setting the value to `False`, except that a
    warning is also emitted.
  id: totrans-4086
  prefs: []
  type: TYPE_NORMAL
  zh: 该属性默认为`None`，表示构造尚未考虑其是否适合参与缓存；这在功能上等同于将值设置为`False`，只是还会发出警告。
- en: This flag can be set to `True` on a particular class, if the SQL that corresponds
    to the object does not change based on attributes which are local to this class,
    and not its superclass.
  id: totrans-4087
  prefs: []
  type: TYPE_NORMAL
  zh: 如果与此类本地属性有关，而不是其超类，对象对应的SQL不会改变，则可以将此标志设置为`True`。
- en: See also
  id: totrans-4088
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见
- en: '[Enabling Caching Support for Custom Constructs](compiler.html#compilerext-caching)
    - General guideslines for setting the [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute for third-party
    or user defined SQL constructs.'
  id: totrans-4089
  prefs: []
  type: TYPE_NORMAL
  zh: '[为自定义构造启用缓存支持](compiler.html#compilerext-caching) - 设置第三方或用户定义的SQL构造的[`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache")属性的通用指南。'
- en: '[PRE799]'
  id: totrans-4090
  prefs: []
  type: TYPE_PRE
  zh: '[PRE799]'
- en: '*inherited from the* [`ReturnsRows.is_derived_from()`](#sqlalchemy.sql.expression.ReturnsRows.is_derived_from
    "sqlalchemy.sql.expression.ReturnsRows.is_derived_from") *method of* [`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows
    "sqlalchemy.sql.expression.ReturnsRows")'
  id: totrans-4091
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`ReturnsRows.is_derived_from()`](#sqlalchemy.sql.expression.ReturnsRows.is_derived_from
    "sqlalchemy.sql.expression.ReturnsRows.is_derived_from") *方法继承* [`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows
    "sqlalchemy.sql.expression.ReturnsRows")'
- en: Return `True` if this [`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows
    "sqlalchemy.sql.expression.ReturnsRows") is ‘derived’ from the given [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-4092
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此[`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows "sqlalchemy.sql.expression.ReturnsRows")是从给定的[`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")‘派生’，则返回`True`。
- en: An example would be an Alias of a Table is derived from that Table.
  id: totrans-4093
  prefs: []
  type: TYPE_NORMAL
  zh: 一个示例是Table的Alias从该Table派生而来。
- en: '[PRE800]'
  id: totrans-4094
  prefs: []
  type: TYPE_PRE
  zh: '[PRE800]'
- en: Return a ‘scalar’ representation of this selectable, embedded as a subquery
    with a label.
  id: totrans-4095
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此可选项的“标量”表示，嵌入为带有标签的子查询。
- en: See also
  id: totrans-4096
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见
- en: '[`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery").'
  id: totrans-4097
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery")。'
- en: '[PRE801]'
  id: totrans-4098
  prefs: []
  type: TYPE_PRE
  zh: '[PRE801]'
- en: Return a LATERAL alias of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable").
  id: totrans-4099
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此[`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable")的LATERAL别名。
- en: The return value is the [`Lateral`](#sqlalchemy.sql.expression.Lateral "sqlalchemy.sql.expression.Lateral")
    construct also provided by the top-level [`lateral()`](#sqlalchemy.sql.expression.lateral
    "sqlalchemy.sql.expression.lateral") function.
  id: totrans-4100
  prefs: []
  type: TYPE_NORMAL
  zh: 返回值也是由顶级[`lateral()`](#sqlalchemy.sql.expression.lateral "sqlalchemy.sql.expression.lateral")函数提供的[`Lateral`](#sqlalchemy.sql.expression.Lateral
    "sqlalchemy.sql.expression.Lateral")构造。
- en: See also
  id: totrans-4101
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[LATERAL correlation](../tutorial/data_select.html#tutorial-lateral-correlation)
    - overview of usage.'
  id: totrans-4102
  prefs: []
  type: TYPE_NORMAL
  zh: '[LATERAL相关](../tutorial/data_select.html#tutorial-lateral-correlation) - 使用概述。'
- en: '[PRE802]'
  id: totrans-4103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE802]'
- en: '*inherited from the* [`Selectable.replace_selectable()`](#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") *method of* [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
  id: totrans-4104
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable")
    *的* [`Selectable.replace_selectable()`](#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") *方法*'
- en: Replace all occurrences of [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") ‘old’ with the given [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") object, returning a copy of this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-4105
  prefs: []
  type: TYPE_NORMAL
  zh: 使用给定的[`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")对象替换所有[`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") ‘old’的所有出现，返回此[`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")的副本。
- en: 'Deprecated since version 1.4: The [`Selectable.replace_selectable()`](#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") method is deprecated,
    and will be removed in a future release. Similar functionality is available via
    the sqlalchemy.sql.visitors module.'
  id: totrans-4106
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.4起已弃用：[`Selectable.replace_selectable()`](#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable")方法已弃用，并将在将来的版本中删除。类似功能可通过sqlalchemy.sql.visitors模块获得。
- en: '[PRE803]'
  id: totrans-4107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE803]'
- en: Return a ‘scalar’ representation of this selectable, which can be used as a
    column expression.
  id: totrans-4108
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此可选择项的‘标量’表示，可用作列表达式。
- en: The returned object is an instance of [`ScalarSelect`](#sqlalchemy.sql.expression.ScalarSelect
    "sqlalchemy.sql.expression.ScalarSelect").
  id: totrans-4109
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的对象是[`ScalarSelect`](#sqlalchemy.sql.expression.ScalarSelect "sqlalchemy.sql.expression.ScalarSelect")的实例。
- en: Typically, a select statement which has only one column in its columns clause
    is eligible to be used as a scalar expression. The scalar subquery can then be
    used in the WHERE clause or columns clause of an enclosing SELECT.
  id: totrans-4110
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，仅在其列子句中有一个列的选择语句有资格用作标量表达式。然后可以在包含SELECT的WHERE子句或列子句中使用标量子查询。
- en: Note that the scalar subquery differentiates from the FROM-level subquery that
    can be produced using the [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") method.
  id: totrans-4111
  prefs: []
  type: TYPE_NORMAL
  zh: 注意标量子查询与可以使用[`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery")方法生成的FROM级子查询不同。
- en: See also
  id: totrans-4112
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Scalar and Correlated Subqueries](../tutorial/data_select.html#tutorial-scalar-subquery)
    - in the 2.0 tutorial'
  id: totrans-4113
  prefs: []
  type: TYPE_NORMAL
  zh: '[标量和相关子查询](../tutorial/data_select.html#tutorial-scalar-subquery) - 在2.0教程中'
- en: '[PRE804]'
  id: totrans-4114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE804]'
- en: 'Deprecated since version 1.4: The [`SelectBase.select()`](#sqlalchemy.sql.expression.SelectBase.select
    "sqlalchemy.sql.expression.SelectBase.select") method is deprecated and will be
    removed in a future release; this method implicitly creates a subquery that should
    be explicit. Please call [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") first in order to create a subquery,
    which then can be selected.'
  id: totrans-4115
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.4起已弃用：[`SelectBase.select()`](#sqlalchemy.sql.expression.SelectBase.select
    "sqlalchemy.sql.expression.SelectBase.select")方法已弃用，并将在将来的版本中删除；此方法隐式创建一个应该显式的子查询。请先调用[`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery")以创建一个子查询，然后可以选择该子查询。
- en: '[PRE805]'
  id: totrans-4116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE805]'
- en: A [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") representing the columns that this
    SELECT statement or similar construct returns in its result set.
  id: totrans-4117
  prefs: []
  type: TYPE_NORMAL
  zh: 一个表示此SELECT语句或类似结构在其结果集中返回的列的[`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")。
- en: This collection differs from the [`FromClause.columns`](#sqlalchemy.sql.expression.FromClause.columns
    "sqlalchemy.sql.expression.FromClause.columns") collection of a [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") in that the columns within this collection
    cannot be directly nested inside another SELECT statement; a subquery must be
    applied first which provides for the necessary parenthesization required by SQL.
  id: totrans-4118
  prefs: []
  type: TYPE_NORMAL
  zh: 此集合与 [`FromClause.columns`](#sqlalchemy.sql.expression.FromClause.columns "sqlalchemy.sql.expression.FromClause.columns")
    集合不同，因为此集合中的列不能直接嵌套在另一个 SELECT 语句中；必须先应用子查询，以提供 SQL 所需的必要括号化。
- en: Note
  id: totrans-4119
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The [`SelectBase.selected_columns`](#sqlalchemy.sql.expression.SelectBase.selected_columns
    "sqlalchemy.sql.expression.SelectBase.selected_columns") collection does not include
    expressions established in the columns clause using the [`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct; these are silently omitted from the
    collection. To use plain textual column expressions inside of a [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") construct, use the [`literal_column()`](sqlelement.html#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column") construct.
  id: totrans-4120
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SelectBase.selected_columns`](#sqlalchemy.sql.expression.SelectBase.selected_columns
    "sqlalchemy.sql.expression.SelectBase.selected_columns") 集合不包括在列子句中使用 [`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") 构造建立的表达式；这些表达式在集合中被忽略。要在 [`Select`](#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") 构造内部使用纯文本列表达式，请使用 [`literal_column()`](sqlelement.html#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column") 构造。'
- en: See also
  id: totrans-4121
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Select.selected_columns`](#sqlalchemy.sql.expression.Select.selected_columns
    "sqlalchemy.sql.expression.Select.selected_columns")'
  id: totrans-4122
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.selected_columns`](#sqlalchemy.sql.expression.Select.selected_columns
    "sqlalchemy.sql.expression.Select.selected_columns")'
- en: New in version 1.4.
  id: totrans-4123
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4 中的新增内容。
- en: '[PRE806]'
  id: totrans-4124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE806]'
- en: Return a new selectable with the specified label style.
  id: totrans-4125
  prefs: []
  type: TYPE_NORMAL
  zh: 返回具有指定标签样式的新可选项。
- en: Implemented by subclasses.
  id: totrans-4126
  prefs: []
  type: TYPE_NORMAL
  zh: 由子类实现。
- en: '[PRE807]'
  id: totrans-4127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE807]'
- en: Return a subquery of this [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase").
  id: totrans-4128
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此 [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")
    的子查询。
- en: A subquery is from a SQL perspective a parenthesized, named construct that can
    be placed in the FROM clause of another SELECT statement.
  id: totrans-4129
  prefs: []
  type: TYPE_NORMAL
  zh: 从 SQL 角度来看，子查询是一个带括号的命名结构，可以放置在另一个 SELECT 语句的 FROM 子句中。
- en: 'Given a SELECT statement such as:'
  id: totrans-4130
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个 SELECT 语句，例如：
- en: '[PRE808]'
  id: totrans-4131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE808]'
- en: 'The above statement might look like:'
  id: totrans-4132
  prefs: []
  type: TYPE_NORMAL
  zh: 上述语句可能如下所示：
- en: '[PRE809]'
  id: totrans-4133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE809]'
- en: 'The subquery form by itself renders the same way, however when embedded into
    the FROM clause of another SELECT statement, it becomes a named sub-element:'
  id: totrans-4134
  prefs: []
  type: TYPE_NORMAL
  zh: 单独的子查询形式渲染方式相同，但是当嵌入到另一个 SELECT 语句的 FROM 子句中时，它变成了一个命名的子元素：
- en: '[PRE810]'
  id: totrans-4135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE810]'
- en: 'The above renders as:'
  id: totrans-4136
  prefs: []
  type: TYPE_NORMAL
  zh: 以上渲染为：
- en: '[PRE811]'
  id: totrans-4137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE811]'
- en: Historically, [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") is equivalent to calling the
    [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias "sqlalchemy.sql.expression.FromClause.alias")
    method on a FROM object; however, as a [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase") object is not directly FROM object, the
    [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery "sqlalchemy.sql.expression.SelectBase.subquery")
    method provides clearer semantics.
  id: totrans-4138
  prefs: []
  type: TYPE_NORMAL
  zh: 从历史角度看，[`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") 等同于在 FROM 对象上调用 [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") 方法；然而，由于 [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase") 对象并非直接的 FROM 对象，因此 [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") 方法提供了更清晰的语义。
- en: New in version 1.4.
  id: totrans-4139
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4 中的新增内容。
- en: '[PRE812]'
  id: totrans-4140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE812]'
- en: Represent a subquery of a SELECT.
  id: totrans-4141
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一个 SELECT 的子查询。
- en: A [`Subquery`](#sqlalchemy.sql.expression.Subquery "sqlalchemy.sql.expression.Subquery")
    is created by invoking the [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") method, or for convenience the
    [`SelectBase.alias()`](#sqlalchemy.sql.expression.SelectBase.alias "sqlalchemy.sql.expression.SelectBase.alias")
    method, on any [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")
    subclass which includes [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select"),
    [`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect "sqlalchemy.sql.expression.CompoundSelect"),
    and [`TextualSelect`](#sqlalchemy.sql.expression.TextualSelect "sqlalchemy.sql.expression.TextualSelect").
    As rendered in a FROM clause, it represents the body of the SELECT statement inside
    of parenthesis, followed by the usual “AS <somename>” that defines all “alias”
    objects.
  id: totrans-4142
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Subquery`](#sqlalchemy.sql.expression.Subquery "sqlalchemy.sql.expression.Subquery")
    是通过调用任何 [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")
    子类的 [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery "sqlalchemy.sql.expression.SelectBase.subquery")
    方法或便利的 [`SelectBase.alias()`](#sqlalchemy.sql.expression.SelectBase.alias "sqlalchemy.sql.expression.SelectBase.alias")
    方法创建的，这些子类包括 [`Select`](#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")、[`CompoundSelect`](#sqlalchemy.sql.expression.CompoundSelect
    "sqlalchemy.sql.expression.CompoundSelect") 和 [`TextualSelect`](#sqlalchemy.sql.expression.TextualSelect
    "sqlalchemy.sql.expression.TextualSelect")。在 FROM 子句中渲染时，它表示 SELECT 语句的主体在括号内，后跟通常定义所有“别名”对象的常规
    “AS <somename>”。'
- en: The [`Subquery`](#sqlalchemy.sql.expression.Subquery "sqlalchemy.sql.expression.Subquery")
    object is very similar to the [`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    object and can be used in an equivalent way. The difference between [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") and [`Subquery`](#sqlalchemy.sql.expression.Subquery
    "sqlalchemy.sql.expression.Subquery") is that [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") always contains a [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") object whereas [`Subquery`](#sqlalchemy.sql.expression.Subquery
    "sqlalchemy.sql.expression.Subquery") always contains a [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase") object.
  id: totrans-4143
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Subquery`](#sqlalchemy.sql.expression.Subquery "sqlalchemy.sql.expression.Subquery")
    对象与 [`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    对象非常相似，并且可以以等效的方式使用。[`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    和 [`Subquery`](#sqlalchemy.sql.expression.Subquery "sqlalchemy.sql.expression.Subquery")
    之间的区别在于，[`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    总是包含一个 [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    对象，而 [`Subquery`](#sqlalchemy.sql.expression.Subquery "sqlalchemy.sql.expression.Subquery")
    总是包含一个 [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")
    对象。'
- en: 'New in version 1.4: The [`Subquery`](#sqlalchemy.sql.expression.Subquery "sqlalchemy.sql.expression.Subquery")
    class was added which now serves the purpose of providing an aliased version of
    a SELECT statement.'
  id: totrans-4144
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4 中增加了 [`Subquery`](#sqlalchemy.sql.expression.Subquery "sqlalchemy.sql.expression.Subquery")
    类，其目的是提供 SELECT 语句的别名版本。
- en: '**Members**'
  id: totrans-4145
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[as_scalar()](#sqlalchemy.sql.expression.Subquery.as_scalar), [inherit_cache](#sqlalchemy.sql.expression.Subquery.inherit_cache)'
  id: totrans-4146
  prefs: []
  type: TYPE_NORMAL
  zh: '[as_scalar()](#sqlalchemy.sql.expression.Subquery.as_scalar), [inherit_cache](#sqlalchemy.sql.expression.Subquery.inherit_cache)'
- en: '**Class signature**'
  id: totrans-4147
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.Subquery`](#sqlalchemy.sql.expression.Subquery
    "sqlalchemy.sql.expression.Subquery") ([`sqlalchemy.sql.expression.AliasedReturnsRows`](#sqlalchemy.sql.expression.AliasedReturnsRows
    "sqlalchemy.sql.expression.AliasedReturnsRows"))
  id: totrans-4148
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.expression.Subquery`](#sqlalchemy.sql.expression.Subquery
    "sqlalchemy.sql.expression.Subquery") ([`sqlalchemy.sql.expression.AliasedReturnsRows`](#sqlalchemy.sql.expression.AliasedReturnsRows
    "sqlalchemy.sql.expression.AliasedReturnsRows"))
- en: '[PRE813]'
  id: totrans-4149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE813]'
- en: 'Deprecated since version 1.4: The [`Subquery.as_scalar()`](#sqlalchemy.sql.expression.Subquery.as_scalar
    "sqlalchemy.sql.expression.Subquery.as_scalar") method, which was previously `Alias.as_scalar()`
    prior to version 1.4, is deprecated and will be removed in a future release; Please
    use the [`Select.scalar_subquery()`](#sqlalchemy.sql.expression.Select.scalar_subquery
    "sqlalchemy.sql.expression.Select.scalar_subquery") method of the [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct before constructing a subquery object,
    or with the ORM use the [`Query.scalar_subquery()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.scalar_subquery
    "sqlalchemy.orm.Query.scalar_subquery") method.'
  id: totrans-4150
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.4 弃用：[`Subquery.as_scalar()`](#sqlalchemy.sql.expression.Subquery.as_scalar
    "sqlalchemy.sql.expression.Subquery.as_scalar") 方法（在版本 1.4 之前为 `Alias.as_scalar()`）已弃用，并将在将来的版本中删除；请在构造子查询对象之前或使用
    ORM 时使用 [`Select.scalar_subquery()`](#sqlalchemy.sql.expression.Select.scalar_subquery
    "sqlalchemy.sql.expression.Select.scalar_subquery") 方法的 [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造，或者使用 [`Query.scalar_subquery()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.scalar_subquery
    "sqlalchemy.orm.Query.scalar_subquery") 方法。
- en: '[PRE814]'
  id: totrans-4151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE814]'
- en: Indicate if this [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") instance should make use of the cache
    key generation scheme used by its immediate superclass.
  id: totrans-4152
  prefs: []
  type: TYPE_NORMAL
  zh: 指示此 [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey "sqlalchemy.sql.traversals.HasCacheKey")
    实例是否应使用其直接超类使用的缓存键生成方案。
- en: The attribute defaults to `None`, which indicates that a construct has not yet
    taken into account whether or not its appropriate for it to participate in caching;
    this is functionally equivalent to setting the value to `False`, except that a
    warning is also emitted.
  id: totrans-4153
  prefs: []
  type: TYPE_NORMAL
  zh: 此属性默认为`None`，表示构造尚未考虑其是否适合参与缓存；这在功能上等同于将值设置为`False`，只是还会发出警告。
- en: This flag can be set to `True` on a particular class, if the SQL that corresponds
    to the object does not change based on attributes which are local to this class,
    and not its superclass.
  id: totrans-4154
  prefs: []
  type: TYPE_NORMAL
  zh: 如果与对象对应的 SQL 不基于这个类本地的属性而改变，并且不是它的超类，则可以在特定类上将此标志设置为`True`。
- en: See also
  id: totrans-4155
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[Enabling Caching Support for Custom Constructs](compiler.html#compilerext-caching)
    - General guideslines for setting the [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute for third-party
    or user defined SQL constructs.'
  id: totrans-4156
  prefs: []
  type: TYPE_NORMAL
  zh: '[为自定义构造启用缓存支持](compiler.html#compilerext-caching) - 设置第三方或用户定义的 SQL 构造的 [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") 属性的一般指南。'
- en: '[PRE815]'
  id: totrans-4157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE815]'
- en: Represents a minimal “table” construct.
  id: totrans-4158
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一个最小的“表”结构。
- en: 'This is a lightweight table object that has only a name, a collection of columns,
    which are typically produced by the [`column()`](sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column") function, and a schema:'
  id: totrans-4159
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个轻量级的表对象，只有一个名称、一个由 [`column()`](sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column") 函数生成的列集合，以及一个模式：
- en: '[PRE816]'
  id: totrans-4160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE816]'
- en: The [`TableClause`](#sqlalchemy.sql.expression.TableClause "sqlalchemy.sql.expression.TableClause")
    construct serves as the base for the more commonly used [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object, providing the usual set of [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") services including the `.c.` collection
    and statement generation methods.
  id: totrans-4161
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TableClause`](#sqlalchemy.sql.expression.TableClause "sqlalchemy.sql.expression.TableClause")
    构造用作更常用的 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    对象的基础，提供通常的 [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    服务，包括 `.c.` 集合和语句生成方法。'
- en: It does **not** provide all the additional schema-level services of [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), including constraints, references to other tables,
    or support for [`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")-level
    services. It’s useful on its own as an ad-hoc construct used to generate quick
    SQL statements when a more fully fledged [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") is not on hand.
  id: totrans-4162
  prefs: []
  type: TYPE_NORMAL
  zh: 它**不**提供 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    的所有附加架构级服务，包括约束、对其他表的引用或对 [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") 级别服务的支持。当手头没有更完整的 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 时，它本身作为一种临时构造是有用的，用于生成快速的 SQL 语句。
- en: '**Members**'
  id: totrans-4163
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[alias()](#sqlalchemy.sql.expression.TableClause.alias), [c](#sqlalchemy.sql.expression.TableClause.c),
    [columns](#sqlalchemy.sql.expression.TableClause.columns), [compare()](#sqlalchemy.sql.expression.TableClause.compare),
    [compile()](#sqlalchemy.sql.expression.TableClause.compile), [corresponding_column()](#sqlalchemy.sql.expression.TableClause.corresponding_column),
    [delete()](#sqlalchemy.sql.expression.TableClause.delete), [description](#sqlalchemy.sql.expression.TableClause.description),
    [entity_namespace](#sqlalchemy.sql.expression.TableClause.entity_namespace), [exported_columns](#sqlalchemy.sql.expression.TableClause.exported_columns),
    [foreign_keys](#sqlalchemy.sql.expression.TableClause.foreign_keys), [get_children()](#sqlalchemy.sql.expression.TableClause.get_children),
    [implicit_returning](#sqlalchemy.sql.expression.TableClause.implicit_returning),
    [inherit_cache](#sqlalchemy.sql.expression.TableClause.inherit_cache), [insert()](#sqlalchemy.sql.expression.TableClause.insert),
    [is_derived_from()](#sqlalchemy.sql.expression.TableClause.is_derived_from), [join()](#sqlalchemy.sql.expression.TableClause.join),
    [lateral()](#sqlalchemy.sql.expression.TableClause.lateral), [outerjoin()](#sqlalchemy.sql.expression.TableClause.outerjoin),
    [params()](#sqlalchemy.sql.expression.TableClause.params), [primary_key](#sqlalchemy.sql.expression.TableClause.primary_key),
    [replace_selectable()](#sqlalchemy.sql.expression.TableClause.replace_selectable),
    [schema](#sqlalchemy.sql.expression.TableClause.schema), [select()](#sqlalchemy.sql.expression.TableClause.select),
    [self_group()](#sqlalchemy.sql.expression.TableClause.self_group), [table_valued()](#sqlalchemy.sql.expression.TableClause.table_valued),
    [tablesample()](#sqlalchemy.sql.expression.TableClause.tablesample), [unique_params()](#sqlalchemy.sql.expression.TableClause.unique_params),
    [update()](#sqlalchemy.sql.expression.TableClause.update)'
  id: totrans-4164
  prefs: []
  type: TYPE_NORMAL
  zh: '[alias()](#sqlalchemy.sql.expression.TableClause.alias), [c](#sqlalchemy.sql.expression.TableClause.c),
    [columns](#sqlalchemy.sql.expression.TableClause.columns), [compare()](#sqlalchemy.sql.expression.TableClause.compare),
    [compile()](#sqlalchemy.sql.expression.TableClause.compile), [corresponding_column()](#sqlalchemy.sql.expression.TableClause.corresponding_column),
    [delete()](#sqlalchemy.sql.expression.TableClause.delete), [description](#sqlalchemy.sql.expression.TableClause.description),
    [entity_namespace](#sqlalchemy.sql.expression.TableClause.entity_namespace), [exported_columns](#sqlalchemy.sql.expression.TableClause.exported_columns),
    [foreign_keys](#sqlalchemy.sql.expression.TableClause.foreign_keys), [get_children()](#sqlalchemy.sql.expression.TableClause.get_children),
    [implicit_returning](#sqlalchemy.sql.expression.TableClause.implicit_returning),
    [inherit_cache](#sqlalchemy.sql.expression.TableClause.inherit_cache), [insert()](#sqlalchemy.sql.expression.TableClause.insert),
    [is_derived_from()](#sqlalchemy.sql.expression.TableClause.is_derived_from), [join()](#sqlalchemy.sql.expression.TableClause.join),
    [lateral()](#sqlalchemy.sql.expression.TableClause.lateral), [outerjoin()](#sqlalchemy.sql.expression.TableClause.outerjoin),
    [params()](#sqlalchemy.sql.expression.TableClause.params), [primary_key](#sqlalchemy.sql.expression.TableClause.primary_key),
    [replace_selectable()](#sqlalchemy.sql.expression.TableClause.replace_selectable),
    [schema](#sqlalchemy.sql.expression.TableClause.schema), [select()](#sqlalchemy.sql.expression.TableClause.select),
    [self_group()](#sqlalchemy.sql.expression.TableClause.self_group), [table_valued()](#sqlalchemy.sql.expression.TableClause.table_valued),
    [tablesample()](#sqlalchemy.sql.expression.TableClause.tablesample), [unique_params()](#sqlalchemy.sql.expression.TableClause.unique_params),
    [update()](#sqlalchemy.sql.expression.TableClause.update)'
- en: '**Class signature**'
  id: totrans-4165
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.TableClause`](#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause") (`sqlalchemy.sql.roles.DMLTableRole`,
    `sqlalchemy.sql.expression.Immutable`, `sqlalchemy.sql.expression.NamedFromClause`)
  id: totrans-4166
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.expression.TableClause`](#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause") (`sqlalchemy.sql.roles.DMLTableRole`,
    `sqlalchemy.sql.expression.Immutable`, `sqlalchemy.sql.expression.NamedFromClause`)
- en: '[PRE817]'
  id: totrans-4167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE817]'
- en: '*inherited from the* [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") *method of* [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  id: totrans-4168
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias "sqlalchemy.sql.expression.FromClause.alias")
    *方法的* [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")'
- en: Return an alias of this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-4169
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此[`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")的别名。
- en: 'E.g.:'
  id: totrans-4170
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE818]'
  id: totrans-4171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE818]'
- en: The above code creates an [`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    object which can be used as a FROM clause in any SELECT statement.
  id: totrans-4172
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码创建了一个[`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")对象，可用作任何SELECT语句中的FROM子句。
- en: See also
  id: totrans-4173
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using Aliases](../tutorial/data_select.html#tutorial-using-aliases)'
  id: totrans-4174
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用别名](../tutorial/data_select.html#tutorial-using-aliases)'
- en: '[`alias()`](#sqlalchemy.sql.expression.alias "sqlalchemy.sql.expression.alias")'
  id: totrans-4175
  prefs: []
  type: TYPE_NORMAL
  zh: '[`alias()`](#sqlalchemy.sql.expression.alias "sqlalchemy.sql.expression.alias")'
- en: '[PRE819]'
  id: totrans-4176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE819]'
- en: '*inherited from the* [`FromClause.c`](#sqlalchemy.sql.expression.FromClause.c
    "sqlalchemy.sql.expression.FromClause.c") *attribute of* [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  id: totrans-4177
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FromClause.c`](#sqlalchemy.sql.expression.FromClause.c "sqlalchemy.sql.expression.FromClause.c")
    *属性的* [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")'
- en: A synonym for [`FromClause.columns`](#sqlalchemy.sql.expression.FromClause.columns
    "sqlalchemy.sql.expression.FromClause.columns")
  id: totrans-4178
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FromClause.columns`](#sqlalchemy.sql.expression.FromClause.columns "sqlalchemy.sql.expression.FromClause.columns")的同义词。'
- en: 'Returns:'
  id: totrans-4179
  prefs: []
  type: TYPE_NORMAL
  zh: 返回值：
- en: a [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")
  id: totrans-4180
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")
- en: '[PRE820]'
  id: totrans-4181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE820]'
- en: '*inherited from the* [`FromClause.columns`](#sqlalchemy.sql.expression.FromClause.columns
    "sqlalchemy.sql.expression.FromClause.columns") *attribute of* [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  id: totrans-4182
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FromClause.columns`](#sqlalchemy.sql.expression.FromClause.columns
    "sqlalchemy.sql.expression.FromClause.columns") *属性的* [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
- en: A named-based collection of [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") objects maintained by this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-4183
  prefs: []
  type: TYPE_NORMAL
  zh: 由此[`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")维护的[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")对象的基于名称的集合。
- en: 'The [`columns`](#sqlalchemy.sql.expression.TableClause.columns "sqlalchemy.sql.expression.TableClause.columns"),
    or [`c`](#sqlalchemy.sql.expression.TableClause.c "sqlalchemy.sql.expression.TableClause.c")
    collection, is the gateway to the construction of SQL expressions using table-bound
    or other selectable-bound columns:'
  id: totrans-4184
  prefs: []
  type: TYPE_NORMAL
  zh: '[`columns`](#sqlalchemy.sql.expression.TableClause.columns "sqlalchemy.sql.expression.TableClause.columns")
    或 [`c`](#sqlalchemy.sql.expression.TableClause.c "sqlalchemy.sql.expression.TableClause.c")
    集合是使用绑定到表或其他可选择列的列构建 SQL 表达式的入口：'
- en: '[PRE821]'
  id: totrans-4185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE821]'
- en: 'Returns:'
  id: totrans-4186
  prefs: []
  type: TYPE_NORMAL
  zh: 返回值：
- en: a [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") object.
  id: totrans-4187
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")对象。
- en: '[PRE822]'
  id: totrans-4188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE822]'
- en: '*inherited from the* [`ClauseElement.compare()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.compare
    "sqlalchemy.sql.expression.ClauseElement.compare") *method of* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
  id: totrans-4189
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ClauseElement.compare()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.compare
    "sqlalchemy.sql.expression.ClauseElement.compare") *方法的* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
- en: Compare this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") to the given [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  id: totrans-4190
  prefs: []
  type: TYPE_NORMAL
  zh: 将此 [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") 与给定的 [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") 进行比较。
- en: Subclasses should override the default behavior, which is a straight identity
    comparison.
  id: totrans-4191
  prefs: []
  type: TYPE_NORMAL
  zh: 子类应该覆盖默认行为，即直接的标识比较。
- en: '**kw are arguments consumed by subclass `compare()` methods and may be used
    to modify the criteria for comparison (see [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")).'
  id: totrans-4192
  prefs: []
  type: TYPE_NORMAL
  zh: '**kw 是子类 `compare()` 方法消耗的参数，可以用于修改比较的标准（参见 [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")）。'
- en: '[PRE823]'
  id: totrans-4193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE823]'
- en: '*inherited from the* `CompilerElement.compile()` *method of* `CompilerElement`'
  id: totrans-4194
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `CompilerElement.compile()` *方法的* `CompilerElement`'
- en: Compile this SQL expression.
  id: totrans-4195
  prefs: []
  type: TYPE_NORMAL
  zh: 编译此 SQL 表达式。
- en: The return value is a [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object. Calling `str()` or `unicode()` on the returned
    value will yield a string representation of the result. The [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object also can return a dictionary of bind parameter
    names and values using the `params` accessor.
  id: totrans-4196
  prefs: []
  type: TYPE_NORMAL
  zh: 返回值是一个[`Compiled`](internals.html#sqlalchemy.engine.Compiled "sqlalchemy.engine.Compiled")对象。调用返回值上的`str()`或`unicode()`将产生结果的字符串表示。[`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") 对象也可以使用 `params` 访问器返回绑定参数名称和值的字典。
- en: 'Parameters:'
  id: totrans-4197
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`bind` – An [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    or [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    which can provide a [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    in order to generate a [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object. If the `bind` and `dialect` parameters are
    both omitted, a default SQL compiler is used.'
  id: totrans-4198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bind` – 一个[`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")或[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")，它可以提供一个[`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect")以生成一个[`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled")对象。如果`bind`和`dialect`参数都被省略，将使用默认的 SQL 编译器。'
- en: '`column_keys` – Used for INSERT and UPDATE statements, a list of column names
    which should be present in the VALUES clause of the compiled statement. If `None`,
    all columns from the target table object are rendered.'
  id: totrans-4199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`column_keys` – 用于 INSERT 和 UPDATE 语句，一个列名列表，应该在编译语句的 VALUES 子句中存在。如果为`None`，则从目标表对象中渲染所有列。'
- en: '`dialect` – A [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    instance which can generate a [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object. This argument takes precedence over the
    `bind` argument.'
  id: totrans-4200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect` – 一个可以生成[`Compiled`](internals.html#sqlalchemy.engine.Compiled "sqlalchemy.engine.Compiled")对象的[`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect")实例。该参数优先于`bind`参数。'
- en: '`compile_kwargs` –'
  id: totrans-4201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`compile_kwargs` –'
- en: 'optional dictionary of additional parameters that will be passed through to
    the compiler within all “visit” methods. This allows any custom flag to be passed
    through to a custom compilation construct, for example. It is also used for the
    case of passing the `literal_binds` flag through:'
  id: totrans-4202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的额外参数字典，将通过所有“visit”方法传递给编译器。这允许传递任何自定义标志到自定义编译构造中，例如。它也用于通过传递`literal_binds`标志的情况：
- en: '[PRE824]'
  id: totrans-4203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE824]'
- en: See also
  id: totrans-4204
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[How do I render SQL expressions as strings, possibly with bound parameters
    inlined?](../faq/sqlexpressions.html#faq-sql-expression-string)'
  id: totrans-4205
  prefs: []
  type: TYPE_NORMAL
  zh: '[如何将 SQL 表达式渲染为字符串，可能包含内联的绑定参数？](../faq/sqlexpressions.html#faq-sql-expression-string)'
- en: '[PRE825]'
  id: totrans-4206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE825]'
- en: '*inherited from the* [`Selectable.corresponding_column()`](#sqlalchemy.sql.expression.Selectable.corresponding_column
    "sqlalchemy.sql.expression.Selectable.corresponding_column") *method of* [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
  id: totrans-4207
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Selectable.corresponding_column()`](#sqlalchemy.sql.expression.Selectable.corresponding_column
    "sqlalchemy.sql.expression.Selectable.corresponding_column") *方法* 的 [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
- en: Given a [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"), return the exported [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") object from the [`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") collection of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable") which corresponds to that original [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") via a common ancestor column.
  id: totrans-4208
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")，从这个[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns")集合中返回与原[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")通过一个共同祖先列对应的导出[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")对象。
- en: 'Parameters:'
  id: totrans-4209
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`column` – the target [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") to be matched.'
  id: totrans-4210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`column` – 目标要匹配的[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")。'
- en: '`require_embedded` – only return corresponding columns for the given [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"), if the given [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") is actually present within a sub-element
    of this [`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable").
    Normally the column will match if it merely shares a common ancestor with one
    of the exported columns of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable").'
  id: totrans-4211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`require_embedded` - 仅在给定 [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") 实际存在于此 [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable") 的子元素中时返回相应列。通常，如果列仅与此 [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable") 的导出列之一共享公共祖先，则该列将匹配。'
- en: See also
  id: totrans-4212
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") - the [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") that is used for the operation.'
  id: totrans-4213
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") - 用于操作的 [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")。'
- en: '[`ColumnCollection.corresponding_column()`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection.corresponding_column
    "sqlalchemy.sql.expression.ColumnCollection.corresponding_column") - implementation
    method.'
  id: totrans-4214
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnCollection.corresponding_column()`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection.corresponding_column
    "sqlalchemy.sql.expression.ColumnCollection.corresponding_column") - 实现方法。'
- en: '[PRE826]'
  id: totrans-4215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE826]'
- en: Generate a [`delete()`](dml.html#sqlalchemy.sql.expression.delete "sqlalchemy.sql.expression.delete")
    construct against this [`TableClause`](#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause").
  id: totrans-4216
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个针对此 [`TableClause`](#sqlalchemy.sql.expression.TableClause "sqlalchemy.sql.expression.TableClause")
    的 [`delete()`](dml.html#sqlalchemy.sql.expression.delete "sqlalchemy.sql.expression.delete")
    构造。
- en: 'E.g.:'
  id: totrans-4217
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE827]'
  id: totrans-4218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE827]'
- en: See [`delete()`](dml.html#sqlalchemy.sql.expression.delete "sqlalchemy.sql.expression.delete")
    for argument and usage information.
  id: totrans-4219
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 [`delete()`](dml.html#sqlalchemy.sql.expression.delete "sqlalchemy.sql.expression.delete")
    获取参数和用法信息。
- en: '[PRE828]'
  id: totrans-4220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE828]'
- en: '[PRE829]'
  id: totrans-4221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE829]'
- en: '*inherited from the* [`FromClause.entity_namespace`](#sqlalchemy.sql.expression.FromClause.entity_namespace
    "sqlalchemy.sql.expression.FromClause.entity_namespace") *attribute of* [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  id: totrans-4222
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FromClause.entity_namespace`](#sqlalchemy.sql.expression.FromClause.entity_namespace
    "sqlalchemy.sql.expression.FromClause.entity_namespace") *属性的* [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
- en: Return a namespace used for name-based access in SQL expressions.
  id: totrans-4223
  prefs: []
  type: TYPE_NORMAL
  zh: 返回用于 SQL 表达式中基于名称访问的命名空间。
- en: 'This is the namespace that is used to resolve “filter_by()” type expressions,
    such as:'
  id: totrans-4224
  prefs: []
  type: TYPE_NORMAL
  zh: 这是用于解析“filter_by()”类型表达式的命名空间，例如：
- en: '[PRE830]'
  id: totrans-4225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE830]'
- en: It defaults to the `.c` collection, however internally it can be overridden
    using the “entity_namespace” annotation to deliver alternative results.
  id: totrans-4226
  prefs: []
  type: TYPE_NORMAL
  zh: 它默认使用 `.c` 集合，但在内部可以使用“entity_namespace”注解进行覆盖，以提供替代结果。
- en: '[PRE831]'
  id: totrans-4227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE831]'
- en: '*inherited from the* [`FromClause.exported_columns`](#sqlalchemy.sql.expression.FromClause.exported_columns
    "sqlalchemy.sql.expression.FromClause.exported_columns") *attribute of* [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  id: totrans-4228
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FromClause.exported_columns`](#sqlalchemy.sql.expression.FromClause.exported_columns
    "sqlalchemy.sql.expression.FromClause.exported_columns") *属性的* [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
- en: A [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") that represents the “exported” columns
    of this [`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable").
  id: totrans-4229
  prefs: []
  type: TYPE_NORMAL
  zh: 表示此 [`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable")
    的“导出”列的 [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")。
- en: The “exported” columns for a [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") object are synonymous with the [`FromClause.columns`](#sqlalchemy.sql.expression.FromClause.columns
    "sqlalchemy.sql.expression.FromClause.columns") collection.
  id: totrans-4230
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    对象的“导出”列与 [`FromClause.columns`](#sqlalchemy.sql.expression.FromClause.columns
    "sqlalchemy.sql.expression.FromClause.columns") 集合是同义词。'
- en: New in version 1.4.
  id: totrans-4231
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中的新功能。
- en: See also
  id: totrans-4232
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns")'
  id: totrans-4233
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns")'
- en: '[`SelectBase.exported_columns`](#sqlalchemy.sql.expression.SelectBase.exported_columns
    "sqlalchemy.sql.expression.SelectBase.exported_columns")'
  id: totrans-4234
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SelectBase.exported_columns`](#sqlalchemy.sql.expression.SelectBase.exported_columns
    "sqlalchemy.sql.expression.SelectBase.exported_columns")'
- en: '[PRE832]'
  id: totrans-4235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE832]'
- en: '*inherited from the* [`FromClause.foreign_keys`](#sqlalchemy.sql.expression.FromClause.foreign_keys
    "sqlalchemy.sql.expression.FromClause.foreign_keys") *attribute of* [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  id: totrans-4236
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FromClause.foreign_keys`](#sqlalchemy.sql.expression.FromClause.foreign_keys
    "sqlalchemy.sql.expression.FromClause.foreign_keys") *属性的* [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
- en: Return the collection of [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") marker objects which this FromClause references.
  id: totrans-4237
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此 FromClause 引用的 [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") 标记对象的集合。
- en: Each [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    is a member of a [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")-wide
    [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint").
  id: totrans-4238
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    都是 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")-wide
    的 [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") 的成员。
- en: See also
  id: totrans-4239
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Table.foreign_key_constraints`](metadata.html#sqlalchemy.schema.Table.foreign_key_constraints
    "sqlalchemy.schema.Table.foreign_key_constraints")'
  id: totrans-4240
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Table.foreign_key_constraints`](metadata.html#sqlalchemy.schema.Table.foreign_key_constraints
    "sqlalchemy.schema.Table.foreign_key_constraints")'
- en: '[PRE833]'
  id: totrans-4241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE833]'
- en: '*inherited from the* `HasTraverseInternals.get_children()` *method of* `HasTraverseInternals`'
  id: totrans-4242
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `HasTraverseInternals.get_children()` *方法的* `HasTraverseInternals`'
- en: Return immediate child `HasTraverseInternals` elements of this `HasTraverseInternals`.
  id: totrans-4243
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此 `HasTraverseInternals` 的直接子元素。
- en: This is used for visit traversal.
  id: totrans-4244
  prefs: []
  type: TYPE_NORMAL
  zh: 用于访问遍历。
- en: '**kw may contain flags that change the collection that is returned, for example
    to return a subset of items in order to cut down on larger traversals, or to return
    child items from a different context (such as schema-level collections instead
    of clause-level).'
  id: totrans-4245
  prefs: []
  type: TYPE_NORMAL
  zh: '**kw 可能包含更改返回的集合的标志，例如返回子集以减少较大的遍历，或者从不同上下文返回子项目（例如模式级别的集合而不是子句级别的集合）。'
- en: '[PRE834]'
  id: totrans-4246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE834]'
- en: '[`TableClause`](#sqlalchemy.sql.expression.TableClause "sqlalchemy.sql.expression.TableClause")
    doesn’t support having a primary key or column -level defaults, so implicit returning
    doesn’t apply.'
  id: totrans-4247
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TableClause`](#sqlalchemy.sql.expression.TableClause "sqlalchemy.sql.expression.TableClause")
    不支持具有主键或列级默认值，因此隐式返回不适用。'
- en: '[PRE835]'
  id: totrans-4248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE835]'
- en: '*inherited from the* `HasCacheKey.inherit_cache` *attribute of* [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.cache_key.HasCacheKey")'
  id: totrans-4249
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.cache_key.HasCacheKey") *的* `HasCacheKey.inherit_cache` *属性*'
- en: Indicate if this [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") instance should make use of the cache
    key generation scheme used by its immediate superclass.
  id: totrans-4250
  prefs: []
  type: TYPE_NORMAL
  zh: 指示此 [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey "sqlalchemy.sql.traversals.HasCacheKey")
    实例是否应使用其直接超类使用的缓存键生成方案。
- en: The attribute defaults to `None`, which indicates that a construct has not yet
    taken into account whether or not its appropriate for it to participate in caching;
    this is functionally equivalent to setting the value to `False`, except that a
    warning is also emitted.
  id: totrans-4251
  prefs: []
  type: TYPE_NORMAL
  zh: 该属性的默认值为 `None`，表示构造尚未考虑该构造是否适合参与缓存；这在功能上等同于将值设置为 `False`，只是还会发出警告。
- en: This flag can be set to `True` on a particular class, if the SQL that corresponds
    to the object does not change based on attributes which are local to this class,
    and not its superclass.
  id: totrans-4252
  prefs: []
  type: TYPE_NORMAL
  zh: 如果对象对应的 SQL 不基于此类的本地属性而改变，并且不是其超类的属性，则可以将此标志设置为 `True`。
- en: See also
  id: totrans-4253
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Enabling Caching Support for Custom Constructs](compiler.html#compilerext-caching)
    - General guideslines for setting the [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute for third-party
    or user defined SQL constructs.'
  id: totrans-4254
  prefs: []
  type: TYPE_NORMAL
  zh: '[为自定义结构启用缓存支持](compiler.html#compilerext-caching) - 为第三方或用户定义的 SQL 结构设置 [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") 属性的通用指南。'
- en: '[PRE836]'
  id: totrans-4255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE836]'
- en: Generate an [`Insert`](dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    construct against this [`TableClause`](#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause").
  id: totrans-4256
  prefs: []
  type: TYPE_NORMAL
  zh: 生成针对此 [`TableClause`](#sqlalchemy.sql.expression.TableClause "sqlalchemy.sql.expression.TableClause")
    的 [`Insert`](dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    构造。
- en: 'E.g.:'
  id: totrans-4257
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE837]'
  id: totrans-4258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE837]'
- en: See [`insert()`](dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert")
    for argument and usage information.
  id: totrans-4259
  prefs: []
  type: TYPE_NORMAL
  zh: 有关参数和用法信息，请参阅 [`insert()`](dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert")。
- en: '[PRE838]'
  id: totrans-4260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE838]'
- en: '*inherited from the* [`FromClause.is_derived_from()`](#sqlalchemy.sql.expression.FromClause.is_derived_from
    "sqlalchemy.sql.expression.FromClause.is_derived_from") *method of* [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  id: totrans-4261
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`FromClause.is_derived_from()`](#sqlalchemy.sql.expression.FromClause.is_derived_from
    "sqlalchemy.sql.expression.FromClause.is_derived_from") *方法继承* 的 [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")。'
- en: Return `True` if this [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    is ‘derived’ from the given `FromClause`.
  id: totrans-4262
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此 [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    是从给定的 `FromClause`‘派生’，则返回 `True`。
- en: An example would be an Alias of a Table is derived from that Table.
  id: totrans-4263
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，来自该表的表别名。
- en: '[PRE839]'
  id: totrans-4264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE839]'
- en: '*inherited from the* [`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join") *method of* [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  id: totrans-4265
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join "sqlalchemy.sql.expression.FromClause.join")
    *方法继承* 的示例 [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")。'
- en: Return a [`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    from this [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    to another [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause").
  id: totrans-4266
  prefs: []
  type: TYPE_NORMAL
  zh: 从此 [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    返回到另一个 [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    的 [`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")。
- en: 'E.g.:'
  id: totrans-4267
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE840]'
  id: totrans-4268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE840]'
- en: 'would emit SQL along the lines of:'
  id: totrans-4269
  prefs: []
  type: TYPE_NORMAL
  zh: 将会发出类似以下的 SQL：
- en: '[PRE841]'
  id: totrans-4270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE841]'
- en: 'Parameters:'
  id: totrans-4271
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`right` – the right side of the join; this is any [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") object such as a [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object, and may also be a selectable-compatible object
    such as an ORM-mapped class.'
  id: totrans-4272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`right` – 连接的右侧；这是任何 [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    对象，如一个 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    对象，并且也可以是可选的兼容对象，如 ORM 映射类。'
- en: '`onclause` – a SQL expression representing the ON clause of the join. If left
    at `None`, [`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join "sqlalchemy.sql.expression.FromClause.join")
    will attempt to join the two tables based on a foreign key relationship.'
  id: totrans-4273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onclause` – 表示连接的 ON 子句的 SQL 表达式。如果保持为 `None`，[`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join") 将尝试根据外键关系连接这两个表。'
- en: '`isouter` – if True, render a LEFT OUTER JOIN, instead of JOIN.'
  id: totrans-4274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isouter` – 如果为 True，则渲染 LEFT OUTER JOIN，而不是 JOIN。'
- en: '`full` – if True, render a FULL OUTER JOIN, instead of LEFT OUTER JOIN. Implies
    [`FromClause.join.isouter`](#sqlalchemy.sql.expression.FromClause.join.params.isouter
    "sqlalchemy.sql.expression.FromClause.join").'
  id: totrans-4275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`full` – 如果为 True，则渲染 FULL OUTER JOIN，而不是 LEFT OUTER JOIN。暗示 [`FromClause.join.isouter`](#sqlalchemy.sql.expression.FromClause.join.params.isouter
    "sqlalchemy.sql.expression.FromClause.join").'
- en: See also
  id: totrans-4276
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`join()`](#sqlalchemy.sql.expression.join "sqlalchemy.sql.expression.join")
    - standalone function'
  id: totrans-4277
  prefs: []
  type: TYPE_NORMAL
  zh: '[`join()`](#sqlalchemy.sql.expression.join "sqlalchemy.sql.expression.join")
    - 独立函数'
- en: '[`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    - the type of object produced'
  id: totrans-4278
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    - 生成的对象类型'
- en: '[PRE842]'
  id: totrans-4279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE842]'
- en: '*inherited from the* [`Selectable.lateral()`](#sqlalchemy.sql.expression.Selectable.lateral
    "sqlalchemy.sql.expression.Selectable.lateral") *method of* [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
  id: totrans-4280
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable")
    *的* [`Selectable.lateral()`](#sqlalchemy.sql.expression.Selectable.lateral "sqlalchemy.sql.expression.Selectable.lateral")
    *方法*'
- en: Return a LATERAL alias of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable").
  id: totrans-4281
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此[`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable")的一个LATERAL别名。
- en: The return value is the [`Lateral`](#sqlalchemy.sql.expression.Lateral "sqlalchemy.sql.expression.Lateral")
    construct also provided by the top-level [`lateral()`](#sqlalchemy.sql.expression.lateral
    "sqlalchemy.sql.expression.lateral") function.
  id: totrans-4282
  prefs: []
  type: TYPE_NORMAL
  zh: 返回值是[`Lateral`](#sqlalchemy.sql.expression.Lateral "sqlalchemy.sql.expression.Lateral")构造，也由顶级[`lateral()`](#sqlalchemy.sql.expression.lateral
    "sqlalchemy.sql.expression.lateral")函数提供。
- en: See also
  id: totrans-4283
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[LATERAL correlation](../tutorial/data_select.html#tutorial-lateral-correlation)
    - overview of usage.'
  id: totrans-4284
  prefs: []
  type: TYPE_NORMAL
  zh: '[LATERAL correlation](../tutorial/data_select.html#tutorial-lateral-correlation)
    - 用法概述。'
- en: '[PRE843]'
  id: totrans-4285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE843]'
- en: '*inherited from the* [`FromClause.outerjoin()`](#sqlalchemy.sql.expression.FromClause.outerjoin
    "sqlalchemy.sql.expression.FromClause.outerjoin") *method of* [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  id: totrans-4286
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    *的* [`FromClause.outerjoin()`](#sqlalchemy.sql.expression.FromClause.outerjoin
    "sqlalchemy.sql.expression.FromClause.outerjoin") *方法*'
- en: Return a [`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    from this [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    to another [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause"),
    with the “isouter” flag set to True.
  id: totrans-4287
  prefs: []
  type: TYPE_NORMAL
  zh: 从此[`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")到另一个[`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")返回一个带有“isouter”标志设置为True的[`Join`](#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join")。
- en: 'E.g.:'
  id: totrans-4288
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE844]'
  id: totrans-4289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE844]'
- en: 'The above is equivalent to:'
  id: totrans-4290
  prefs: []
  type: TYPE_NORMAL
  zh: 以上等价于：
- en: '[PRE845]'
  id: totrans-4291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE845]'
- en: 'Parameters:'
  id: totrans-4292
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`right` – the right side of the join; this is any [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") object such as a [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object, and may also be a selectable-compatible object
    such as an ORM-mapped class.'
  id: totrans-4293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`right` – 连接的右侧；这是任何[`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")对象，如[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象，并且也可以是一个可选择兼容对象，如ORM映射类。'
- en: '`onclause` – a SQL expression representing the ON clause of the join. If left
    at `None`, [`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join "sqlalchemy.sql.expression.FromClause.join")
    will attempt to join the two tables based on a foreign key relationship.'
  id: totrans-4294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onclause` – 表示连接的ON子句的SQL表达式。如果保持为`None`，[`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join") 将尝试根据外键关系连接两个表。'
- en: '`full` – if True, render a FULL OUTER JOIN, instead of LEFT OUTER JOIN.'
  id: totrans-4295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`full` – 如果为True，则渲染一个FULL OUTER JOIN，而不是LEFT OUTER JOIN。'
- en: See also
  id: totrans-4296
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join "sqlalchemy.sql.expression.FromClause.join")'
  id: totrans-4297
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FromClause.join()`](#sqlalchemy.sql.expression.FromClause.join "sqlalchemy.sql.expression.FromClause.join")'
- en: '[`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")'
  id: totrans-4298
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Join`](#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")'
- en: '[PRE846]'
  id: totrans-4299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE846]'
- en: '*inherited from the* `Immutable.params()` *method of* `Immutable`'
  id: totrans-4300
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `Immutable` *的* `Immutable.params()` *方法*'
- en: Return a copy with [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") elements replaced.
  id: totrans-4301
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个副本，其中[`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")元素已替换。
- en: 'Returns a copy of this ClauseElement with [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") elements replaced with values taken from
    the given dictionary:'
  id: totrans-4302
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此ClauseElement的副本，其中[`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")元素已替换为从给定字典中获取的值：
- en: '[PRE847]'
  id: totrans-4303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE847]'
- en: '[PRE848]'
  id: totrans-4304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE848]'
- en: '*inherited from the* [`FromClause.primary_key`](#sqlalchemy.sql.expression.FromClause.primary_key
    "sqlalchemy.sql.expression.FromClause.primary_key") *attribute of* [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  id: totrans-4305
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    *的* [`FromClause.primary_key`](#sqlalchemy.sql.expression.FromClause.primary_key
    "sqlalchemy.sql.expression.FromClause.primary_key") *属性*'
- en: Return the iterable collection of [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects which comprise the primary key of this `_selectable.FromClause`.
  id: totrans-4306
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此 `_selectable.FromClause` 的主键组成部分的可迭代列[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 对象的集合。
- en: For a [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object, this collection is represented by the [`PrimaryKeyConstraint`](constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") which itself is an iterable collection
    of [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    objects.
  id: totrans-4307
  prefs: []
  type: TYPE_NORMAL
  zh: 对于[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象，此集合由
    [`PrimaryKeyConstraint`](constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") 表示，它本身是一个可迭代的 [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 对象的集合。
- en: '[PRE849]'
  id: totrans-4308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE849]'
- en: '*inherited from the* [`Selectable.replace_selectable()`](#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") *method of* [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
  id: totrans-4309
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Selectable.replace_selectable()`](#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") *方法的* [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
- en: Replace all occurrences of [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") ‘old’ with the given [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") object, returning a copy of this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-4310
  prefs: []
  type: TYPE_NORMAL
  zh: 用给定的[`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")对象替换所有[`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") ‘old’的出现，返回此[`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")的副本。
- en: 'Deprecated since version 1.4: The [`Selectable.replace_selectable()`](#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") method is deprecated,
    and will be removed in a future release. Similar functionality is available via
    the sqlalchemy.sql.visitors module.'
  id: totrans-4311
  prefs: []
  type: TYPE_NORMAL
  zh: 自 1.4 版本起弃用：[`Selectable.replace_selectable()`](#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") 方法已弃用，并将在未来的版本中移除。类似功能可通过
    sqlalchemy.sql.visitors 模块获得。
- en: '[PRE850]'
  id: totrans-4312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE850]'
- en: '*inherited from the* [`FromClause.schema`](#sqlalchemy.sql.expression.FromClause.schema
    "sqlalchemy.sql.expression.FromClause.schema") *attribute of* [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  id: totrans-4313
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FromClause.schema`](#sqlalchemy.sql.expression.FromClause.schema "sqlalchemy.sql.expression.FromClause.schema")
    *属性的* [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")'
- en: Define the ‘schema’ attribute for this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-4314
  prefs: []
  type: TYPE_NORMAL
  zh: 为此[`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")定义‘schema’属性。
- en: This is typically `None` for most objects except that of [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), where it is taken as the value of the [`Table.schema`](metadata.html#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table") argument.
  id: totrans-4315
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大多数对象而言，这通常是`None`，但对于[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象，则被视为[`Table.schema`](metadata.html#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table") 参数的值。
- en: '[PRE851]'
  id: totrans-4316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE851]'
- en: '*inherited from the* [`FromClause.select()`](#sqlalchemy.sql.expression.FromClause.select
    "sqlalchemy.sql.expression.FromClause.select") *method of* [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  id: totrans-4317
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FromClause.select()`](#sqlalchemy.sql.expression.FromClause.select
    "sqlalchemy.sql.expression.FromClause.select") *方法的* [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
- en: Return a SELECT of this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-4318
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此[`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")的
    SELECT。
- en: 'e.g.:'
  id: totrans-4319
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE852]'
  id: totrans-4320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE852]'
- en: See also
  id: totrans-4321
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    - general purpose method which allows for arbitrary column lists.'
  id: totrans-4322
  prefs: []
  type: TYPE_NORMAL
  zh: '[`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    - 允许任意列列表的通用方法。'
- en: '[PRE853]'
  id: totrans-4323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE853]'
- en: '*inherited from the* [`ClauseElement.self_group()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.self_group
    "sqlalchemy.sql.expression.ClauseElement.self_group") *method of* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
  id: totrans-4324
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ClauseElement.self_group()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.self_group
    "sqlalchemy.sql.expression.ClauseElement.self_group") *方法的* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
- en: Apply a ‘grouping’ to this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  id: totrans-4325
  prefs: []
  type: TYPE_NORMAL
  zh: 对此 [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") 应用一个“分组”。
- en: This method is overridden by subclasses to return a “grouping” construct, i.e.
    parenthesis. In particular it’s used by “binary” expressions to provide a grouping
    around themselves when placed into a larger expression, as well as by [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs when placed into the FROM clause
    of another [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select").
    (Note that subqueries should be normally created using the [`Select.alias()`](#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") method, as many platforms require nested
    SELECT statements to be named).
  id: totrans-4326
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法被子类重写以返回一个“分组”构造，即括号。特别是它被“二元”表达式使用，当它们被放置到更大的表达式中时，提供一个围绕自身的分组，以及当 [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造被放置到另一个 [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 的 FROM 子句中时。 （请注意，子查询通常应使用 [`Select.alias()`](#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") 方法创建，因为许多平台要求嵌套的 SELECT 语句必须命名）。
- en: As expressions are composed together, the application of [`self_group()`](#sqlalchemy.sql.expression.TableClause.self_group
    "sqlalchemy.sql.expression.TableClause.self_group") is automatic - end-user code
    should never need to use this method directly. Note that SQLAlchemy’s clause constructs
    take operator precedence into account - so parenthesis might not be needed, for
    example, in an expression like `x OR (y AND z)` - AND takes precedence over OR.
  id: totrans-4327
  prefs: []
  type: TYPE_NORMAL
  zh: 当表达式组合在一起时，[`self_group()`](#sqlalchemy.sql.expression.TableClause.self_group
    "sqlalchemy.sql.expression.TableClause.self_group") 的应用是自动的 - 最终用户代码不应直接使用此方法。请注意，SQLAlchemy
    的子句构造考虑了运算符优先级 - 因此在表达式中可能不需要括号，例如 `x OR (y AND z)` - AND 优先于 OR。
- en: The base [`self_group()`](#sqlalchemy.sql.expression.TableClause.self_group
    "sqlalchemy.sql.expression.TableClause.self_group") method of [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") just returns self.
  id: totrans-4328
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement "sqlalchemy.sql.expression.ClauseElement")
    的基本 [`self_group()`](#sqlalchemy.sql.expression.TableClause.self_group "sqlalchemy.sql.expression.TableClause.self_group")
    方法只返回自身。'
- en: '[PRE854]'
  id: totrans-4329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE854]'
- en: '*inherited from the* `NamedFromClause.table_valued()` *method of* `NamedFromClause`'
  id: totrans-4330
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `NamedFromClause.table_valued()` *方法的* `NamedFromClause`'
- en: Return a `TableValuedColumn` object for this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-4331
  prefs: []
  type: TYPE_NORMAL
  zh: 为此 [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    返回一个 `TableValuedColumn` 对象。
- en: A `TableValuedColumn` is a [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") that represents a complete row in a
    table. Support for this construct is backend dependent, and is supported in various
    forms by backends such as PostgreSQL, Oracle and SQL Server.
  id: totrans-4332
  prefs: []
  type: TYPE_NORMAL
  zh: '`TableValuedColumn` 是一个代表表中完整行的 [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")。对此构造的支持取决于后端，各种形式的支持由后端如 PostgreSQL、Oracle
    和 SQL Server 提供。'
- en: 'E.g.:'
  id: totrans-4333
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE855]'
  id: totrans-4334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE855]'
- en: New in version 1.4.0b2.
  id: totrans-4335
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本 1.4.0b2 中新增。
- en: See also
  id: totrans-4336
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Working with SQL Functions](../tutorial/data_select.html#tutorial-functions)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-4337
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 SQL 函数](../tutorial/data_select.html#tutorial-functions) - 在[SQLAlchemy
    统一教程](../tutorial/index.html#unified-tutorial)中'
- en: '[PRE856]'
  id: totrans-4338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE856]'
- en: '*inherited from the* [`FromClause.tablesample()`](#sqlalchemy.sql.expression.FromClause.tablesample
    "sqlalchemy.sql.expression.FromClause.tablesample") *method of* [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  id: totrans-4339
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FromClause.tablesample()`](#sqlalchemy.sql.expression.FromClause.tablesample
    "sqlalchemy.sql.expression.FromClause.tablesample") *方法的* [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
- en: Return a TABLESAMPLE alias of this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-4340
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此 [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    的 TABLESAMPLE 别名。
- en: The return value is the [`TableSample`](#sqlalchemy.sql.expression.TableSample
    "sqlalchemy.sql.expression.TableSample") construct also provided by the top-level
    [`tablesample()`](#sqlalchemy.sql.expression.tablesample "sqlalchemy.sql.expression.tablesample")
    function.
  id: totrans-4341
  prefs: []
  type: TYPE_NORMAL
  zh: 返回值也是由顶层 [`tablesample()`](#sqlalchemy.sql.expression.tablesample "sqlalchemy.sql.expression.tablesample")
    函数提供的 [`TableSample`](#sqlalchemy.sql.expression.TableSample "sqlalchemy.sql.expression.TableSample")
    构造。
- en: See also
  id: totrans-4342
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`tablesample()`](#sqlalchemy.sql.expression.tablesample "sqlalchemy.sql.expression.tablesample")
    - usage guidelines and parameters'
  id: totrans-4343
  prefs: []
  type: TYPE_NORMAL
  zh: '[`tablesample()`](#sqlalchemy.sql.expression.tablesample "sqlalchemy.sql.expression.tablesample")
    - 用法指南和参数'
- en: '[PRE857]'
  id: totrans-4344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE857]'
- en: '*inherited from the* `Immutable.unique_params()` *method of* `Immutable`'
  id: totrans-4345
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `Immutable` *的* `Immutable.unique_params()` *方法*'
- en: Return a copy with [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") elements replaced.
  id: totrans-4346
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个副本，其中 [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") 元素被替换。
- en: Same functionality as [`ClauseElement.params()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.params
    "sqlalchemy.sql.expression.ClauseElement.params"), except adds unique=True to
    affected bind parameters so that multiple statements can be used.
  id: totrans-4347
  prefs: []
  type: TYPE_NORMAL
  zh: 与 [`ClauseElement.params()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.params
    "sqlalchemy.sql.expression.ClauseElement.params") 具有相同功能，但将 unique=True 添加到受影响的绑定参数中，以便可以使用多个语句。
- en: '[PRE858]'
  id: totrans-4348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE858]'
- en: Generate an [`update()`](dml.html#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update")
    construct against this [`TableClause`](#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause").
  id: totrans-4349
  prefs: []
  type: TYPE_NORMAL
  zh: 生成针对此 [`TableClause`](#sqlalchemy.sql.expression.TableClause "sqlalchemy.sql.expression.TableClause")
    的 [`update()`](dml.html#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update")
    构造。
- en: 'E.g.:'
  id: totrans-4350
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE859]'
  id: totrans-4351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE859]'
- en: See [`update()`](dml.html#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update")
    for argument and usage information.
  id: totrans-4352
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [`update()`](dml.html#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update")
    获取参数和使用信息。
- en: '[PRE860]'
  id: totrans-4353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE860]'
- en: Represent a TABLESAMPLE clause.
  id: totrans-4354
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一个 TABLESAMPLE 子句。
- en: This object is constructed from the [`tablesample()`](#sqlalchemy.sql.expression.tablesample
    "sqlalchemy.sql.expression.tablesample") module level function as well as the
    [`FromClause.tablesample()`](#sqlalchemy.sql.expression.FromClause.tablesample
    "sqlalchemy.sql.expression.FromClause.tablesample") method available on all [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") subclasses.
  id: totrans-4355
  prefs: []
  type: TYPE_NORMAL
  zh: 此对象是从 [`tablesample()`](#sqlalchemy.sql.expression.tablesample "sqlalchemy.sql.expression.tablesample")
    模块级函数以及所有 [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    子类上可用的 [`FromClause.tablesample()`](#sqlalchemy.sql.expression.FromClause.tablesample
    "sqlalchemy.sql.expression.FromClause.tablesample") 方法构造的。
- en: See also
  id: totrans-4356
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`tablesample()`](#sqlalchemy.sql.expression.tablesample "sqlalchemy.sql.expression.tablesample")'
  id: totrans-4357
  prefs: []
  type: TYPE_NORMAL
  zh: '[`tablesample()`](#sqlalchemy.sql.expression.tablesample "sqlalchemy.sql.expression.tablesample")'
- en: '**Class signature**'
  id: totrans-4358
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.TableSample`](#sqlalchemy.sql.expression.TableSample
    "sqlalchemy.sql.expression.TableSample") (`sqlalchemy.sql.expression.FromClauseAlias`)
  id: totrans-4359
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.expression.TableSample`](#sqlalchemy.sql.expression.TableSample
    "sqlalchemy.sql.expression.TableSample") (`sqlalchemy.sql.expression.FromClauseAlias`)
- en: '[PRE861]'
  id: totrans-4360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE861]'
- en: An alias against a “table valued” SQL function.
  id: totrans-4361
  prefs: []
  type: TYPE_NORMAL
  zh: 针对“表值”SQL函数的别名。
- en: 'This construct provides for a SQL function that returns columns to be used
    in the FROM clause of a SELECT statement. The object is generated using the [`FunctionElement.table_valued()`](functions.html#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued") method, e.g.:'
  id: totrans-4362
  prefs: []
  type: TYPE_NORMAL
  zh: 此结构提供了一个 SQL 函数，该函数返回用于 SELECT 语句的 FROM 子句中使用的列。该对象使用 [`FunctionElement.table_valued()`](functions.html#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued") 方法生成，例如：
- en: '[PRE862]'
  id: totrans-4363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE862]'
- en: New in version 1.4.0b2.
  id: totrans-4364
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4.0b2 中新增。
- en: See also
  id: totrans-4365
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Table-Valued Functions](../tutorial/data_select.html#tutorial-functions-table-valued)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-4366
  prefs: []
  type: TYPE_NORMAL
  zh: '[表值函数](../tutorial/data_select.html#tutorial-functions-table-valued) - 在 [SQLAlchemy
    统一教程](../tutorial/index.html#unified-tutorial) 中'
- en: '**Members**'
  id: totrans-4367
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[alias()](#sqlalchemy.sql.expression.TableValuedAlias.alias), [column](#sqlalchemy.sql.expression.TableValuedAlias.column),
    [lateral()](#sqlalchemy.sql.expression.TableValuedAlias.lateral), [render_derived()](#sqlalchemy.sql.expression.TableValuedAlias.render_derived)'
  id: totrans-4368
  prefs: []
  type: TYPE_NORMAL
  zh: '[alias()](#sqlalchemy.sql.expression.TableValuedAlias.alias), [column](#sqlalchemy.sql.expression.TableValuedAlias.column),
    [lateral()](#sqlalchemy.sql.expression.TableValuedAlias.lateral), [render_derived()](#sqlalchemy.sql.expression.TableValuedAlias.render_derived)'
- en: '**Class signature**'
  id: totrans-4369
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.TableValuedAlias`](#sqlalchemy.sql.expression.TableValuedAlias
    "sqlalchemy.sql.expression.TableValuedAlias") (`sqlalchemy.sql.expression.LateralFromClause`,
    [`sqlalchemy.sql.expression.Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias"))
  id: totrans-4370
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.expression.TableValuedAlias`](#sqlalchemy.sql.expression.TableValuedAlias
    "sqlalchemy.sql.expression.TableValuedAlias") (`sqlalchemy.sql.expression.LateralFromClause`,
    [`sqlalchemy.sql.expression.Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias"))
- en: '[PRE863]'
  id: totrans-4371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE863]'
- en: Return a new alias of this [`TableValuedAlias`](#sqlalchemy.sql.expression.TableValuedAlias
    "sqlalchemy.sql.expression.TableValuedAlias").
  id: totrans-4372
  prefs: []
  type: TYPE_NORMAL
  zh: 返回这个[`TableValuedAlias`](#sqlalchemy.sql.expression.TableValuedAlias "sqlalchemy.sql.expression.TableValuedAlias")的新别���。
- en: This creates a distinct FROM object that will be distinguished from the original
    one when used in a SQL statement.
  id: totrans-4373
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个独立的FROM对象，在SQL语句中使用时将与原始对象区分开。
- en: '[PRE864]'
  id: totrans-4374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE864]'
- en: Return a column expression representing this [`TableValuedAlias`](#sqlalchemy.sql.expression.TableValuedAlias
    "sqlalchemy.sql.expression.TableValuedAlias").
  id: totrans-4375
  prefs: []
  type: TYPE_NORMAL
  zh: 返回表示这个[`TableValuedAlias`](#sqlalchemy.sql.expression.TableValuedAlias "sqlalchemy.sql.expression.TableValuedAlias")的列表达式。
- en: This accessor is used to implement the [`FunctionElement.column_valued()`](functions.html#sqlalchemy.sql.functions.FunctionElement.column_valued
    "sqlalchemy.sql.functions.FunctionElement.column_valued") method. See that method
    for further details.
  id: totrans-4376
  prefs: []
  type: TYPE_NORMAL
  zh: 此访问器用于实现[`FunctionElement.column_valued()`](functions.html#sqlalchemy.sql.functions.FunctionElement.column_valued
    "sqlalchemy.sql.functions.FunctionElement.column_valued")方法。详细信息请参阅该方法。
- en: 'E.g.:'
  id: totrans-4377
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE865]'
  id: totrans-4378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE865]'
- en: See also
  id: totrans-4379
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`FunctionElement.column_valued()`](functions.html#sqlalchemy.sql.functions.FunctionElement.column_valued
    "sqlalchemy.sql.functions.FunctionElement.column_valued")'
  id: totrans-4380
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FunctionElement.column_valued()`](functions.html#sqlalchemy.sql.functions.FunctionElement.column_valued
    "sqlalchemy.sql.functions.FunctionElement.column_valued")'
- en: '[PRE866]'
  id: totrans-4381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE866]'
- en: Return a new [`TableValuedAlias`](#sqlalchemy.sql.expression.TableValuedAlias
    "sqlalchemy.sql.expression.TableValuedAlias") with the lateral flag set, so that
    it renders as LATERAL.
  id: totrans-4382
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个带有lateral标志设置的新的[`TableValuedAlias`](#sqlalchemy.sql.expression.TableValuedAlias
    "sqlalchemy.sql.expression.TableValuedAlias")，以便它呈现为LATERAL。
- en: See also
  id: totrans-4383
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`lateral()`](#sqlalchemy.sql.expression.lateral "sqlalchemy.sql.expression.lateral")'
  id: totrans-4384
  prefs: []
  type: TYPE_NORMAL
  zh: '[`lateral()`](#sqlalchemy.sql.expression.lateral "sqlalchemy.sql.expression.lateral")'
- en: '[PRE867]'
  id: totrans-4385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE867]'
- en: Apply “render derived” to this [`TableValuedAlias`](#sqlalchemy.sql.expression.TableValuedAlias
    "sqlalchemy.sql.expression.TableValuedAlias").
  id: totrans-4386
  prefs: []
  type: TYPE_NORMAL
  zh: 对这个[`TableValuedAlias`](#sqlalchemy.sql.expression.TableValuedAlias "sqlalchemy.sql.expression.TableValuedAlias")应用“渲染派生”。
- en: 'This has the effect of the individual column names listed out after the alias
    name in the “AS” sequence, e.g.:'
  id: totrans-4387
  prefs: []
  type: TYPE_NORMAL
  zh: 这会导致在别名名称后列出各个列名的“AS”序列，例如：
- en: '[PRE868]'
  id: totrans-4388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE868]'
- en: 'The `with_types` keyword will render column types inline within the alias expression
    (this syntax currently applies to the PostgreSQL database):'
  id: totrans-4389
  prefs: []
  type: TYPE_NORMAL
  zh: '`with_types`关键字将在别名表达式中内联呈现列类型（此语法目前适用于PostgreSQL数据库）：'
- en: '[PRE869]'
  id: totrans-4390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE869]'
- en: 'Parameters:'
  id: totrans-4391
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`name` – optional string name that will be applied to the alias generated.
    If left as None, a unique anonymizing name will be used.'
  id: totrans-4392
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 可选的字符串名称，将应用于生成的别名。如果保留为None，则将使用唯一的匿名化名称。'
- en: '`with_types` – if True, the derived columns will include the datatype specification
    with each column. This is a special syntax currently known to be required by PostgreSQL
    for some SQL functions.'
  id: totrans-4393
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`with_types` – 如果为True，则派生列将包括每个列的数据类型规范。这是一种特殊的语法，目前已知对于某些SQL函数在PostgreSQL中是必需的。'
- en: '[PRE870]'
  id: totrans-4394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE870]'
- en: Wrap a [`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause "sqlalchemy.sql.expression.TextClause")
    construct within a [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")
    interface.
  id: totrans-4395
  prefs: []
  type: TYPE_NORMAL
  zh: 将[`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause "sqlalchemy.sql.expression.TextClause")构造包装在[`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")接口中。
- en: This allows the [`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause") object to gain a `.c` collection and other
    FROM-like capabilities such as [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias"), [`SelectBase.cte()`](#sqlalchemy.sql.expression.SelectBase.cte
    "sqlalchemy.sql.expression.SelectBase.cte"), etc.
  id: totrans-4396
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许[`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause "sqlalchemy.sql.expression.TextClause")对象获得`.c`集合和其他类似FROM的功能，例如[`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias")，[`SelectBase.cte()`](#sqlalchemy.sql.expression.SelectBase.cte
    "sqlalchemy.sql.expression.SelectBase.cte")等。
- en: The [`TextualSelect`](#sqlalchemy.sql.expression.TextualSelect "sqlalchemy.sql.expression.TextualSelect")
    construct is produced via the [`TextClause.columns()`](sqlelement.html#sqlalchemy.sql.expression.TextClause.columns
    "sqlalchemy.sql.expression.TextClause.columns") method - see that method for details.
  id: totrans-4397
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TextualSelect`](#sqlalchemy.sql.expression.TextualSelect "sqlalchemy.sql.expression.TextualSelect")构造是通过[`TextClause.columns()`](sqlelement.html#sqlalchemy.sql.expression.TextClause.columns
    "sqlalchemy.sql.expression.TextClause.columns")方法生成的 - 详细信息请参阅该方法。'
- en: 'Changed in version 1.4: the [`TextualSelect`](#sqlalchemy.sql.expression.TextualSelect
    "sqlalchemy.sql.expression.TextualSelect") class was renamed from `TextAsFrom`,
    to more correctly suit its role as a SELECT-oriented object and not a FROM clause.'
  id: totrans-4398
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.4版本中更改：[`TextualSelect`](#sqlalchemy.sql.expression.TextualSelect "sqlalchemy.sql.expression.TextualSelect")
    类从 `TextAsFrom` 重命名为更正确地适应其作为 SELECT 对象而不是 FROM 子句的角色。
- en: See also
  id: totrans-4399
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`text()`](sqlelement.html#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")'
  id: totrans-4400
  prefs: []
  type: TYPE_NORMAL
  zh: '[`text()`](sqlelement.html#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")'
- en: '[`TextClause.columns()`](sqlelement.html#sqlalchemy.sql.expression.TextClause.columns
    "sqlalchemy.sql.expression.TextClause.columns") - primary creation interface.'
  id: totrans-4401
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TextClause.columns()`](sqlelement.html#sqlalchemy.sql.expression.TextClause.columns
    "sqlalchemy.sql.expression.TextClause.columns") - 主要的创建接口。'
- en: '**Members**'
  id: totrans-4402
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[add_cte()](#sqlalchemy.sql.expression.TextualSelect.add_cte), [alias()](#sqlalchemy.sql.expression.TextualSelect.alias),
    [as_scalar()](#sqlalchemy.sql.expression.TextualSelect.as_scalar), [c](#sqlalchemy.sql.expression.TextualSelect.c),
    [compare()](#sqlalchemy.sql.expression.TextualSelect.compare), [compile()](#sqlalchemy.sql.expression.TextualSelect.compile),
    [corresponding_column()](#sqlalchemy.sql.expression.TextualSelect.corresponding_column),
    [cte()](#sqlalchemy.sql.expression.TextualSelect.cte), [execution_options()](#sqlalchemy.sql.expression.TextualSelect.execution_options),
    [exists()](#sqlalchemy.sql.expression.TextualSelect.exists), [exported_columns](#sqlalchemy.sql.expression.TextualSelect.exported_columns),
    [get_children()](#sqlalchemy.sql.expression.TextualSelect.get_children), [get_execution_options()](#sqlalchemy.sql.expression.TextualSelect.get_execution_options),
    [get_label_style()](#sqlalchemy.sql.expression.TextualSelect.get_label_style),
    [inherit_cache](#sqlalchemy.sql.expression.TextualSelect.inherit_cache), [is_derived_from()](#sqlalchemy.sql.expression.TextualSelect.is_derived_from),
    [label()](#sqlalchemy.sql.expression.TextualSelect.label), [lateral()](#sqlalchemy.sql.expression.TextualSelect.lateral),
    [options()](#sqlalchemy.sql.expression.TextualSelect.options), [params()](#sqlalchemy.sql.expression.TextualSelect.params),
    [replace_selectable()](#sqlalchemy.sql.expression.TextualSelect.replace_selectable),
    [scalar_subquery()](#sqlalchemy.sql.expression.TextualSelect.scalar_subquery),
    [select()](#sqlalchemy.sql.expression.TextualSelect.select), [selected_columns](#sqlalchemy.sql.expression.TextualSelect.selected_columns),
    [self_group()](#sqlalchemy.sql.expression.TextualSelect.self_group), [set_label_style()](#sqlalchemy.sql.expression.TextualSelect.set_label_style),
    [subquery()](#sqlalchemy.sql.expression.TextualSelect.subquery), [unique_params()](#sqlalchemy.sql.expression.TextualSelect.unique_params)'
  id: totrans-4403
  prefs: []
  type: TYPE_NORMAL
  zh: '[add_cte()](#sqlalchemy.sql.expression.TextualSelect.add_cte), [alias()](#sqlalchemy.sql.expression.TextualSelect.alias),
    [as_scalar()](#sqlalchemy.sql.expression.TextualSelect.as_scalar), [c](#sqlalchemy.sql.expression.TextualSelect.c),
    [compare()](#sqlalchemy.sql.expression.TextualSelect.compare), [compile()](#sqlalchemy.sql.expression.TextualSelect.compile),
    [corresponding_column()](#sqlalchemy.sql.expression.TextualSelect.corresponding_column),
    [cte()](#sqlalchemy.sql.expression.TextualSelect.cte), [execution_options()](#sqlalchemy.sql.expression.TextualSelect.execution_options),
    [exists()](#sqlalchemy.sql.expression.TextualSelect.exists), [exported_columns](#sqlalchemy.sql.expression.TextualSelect.exported_columns),
    [get_children()](#sqlalchemy.sql.expression.TextualSelect.get_children), [get_execution_options()](#sqlalchemy.sql.expression.TextualSelect.get_execution_options),
    [get_label_style()](#sqlalchemy.sql.expression.TextualSelect.get_label_style),
    [inherit_cache](#sqlalchemy.sql.expression.TextualSelect.inherit_cache), [is_derived_from()](#sqlalchemy.sql.expression.TextualSelect.is_derived_from),
    [label()](#sqlalchemy.sql.expression.TextualSelect.label), [lateral()](#sqlalchemy.sql.expression.TextualSelect.lateral),
    [options()](#sqlalchemy.sql.expression.TextualSelect.options), [params()](#sqlalchemy.sql.expression.TextualSelect.params),
    [replace_selectable()](#sqlalchemy.sql.expression.TextualSelect.replace_selectable),
    [scalar_subquery()](#sqlalchemy.sql.expression.TextualSelect.scalar_subquery),
    [select()](#sqlalchemy.sql.expression.TextualSelect.select), [selected_columns](#sqlalchemy.sql.expression.TextualSelect.selected_columns),
    [self_group()](#sqlalchemy.sql.expression.TextualSelect.self_group), [set_label_style()](#sqlalchemy.sql.expression.TextualSelect.set_label_style),
    [subquery()](#sqlalchemy.sql.expression.TextualSelect.subquery), [unique_params()](#sqlalchemy.sql.expression.TextualSelect.unique_params)'
- en: '**Class signature**'
  id: totrans-4404
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.TextualSelect`](#sqlalchemy.sql.expression.TextualSelect
    "sqlalchemy.sql.expression.TextualSelect") ([`sqlalchemy.sql.expression.SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase"), `sqlalchemy.sql.expression.ExecutableReturnsRows`,
    `sqlalchemy.sql.expression.Generative`)
  id: totrans-4405
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.expression.TextualSelect`](#sqlalchemy.sql.expression.TextualSelect
    "sqlalchemy.sql.expression.TextualSelect")（[`sqlalchemy.sql.expression.SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")，`sqlalchemy.sql.expression.ExecutableReturnsRows`，`sqlalchemy.sql.expression.Generative`）
- en: '[PRE871]'
  id: totrans-4406
  prefs: []
  type: TYPE_PRE
  zh: '[PRE871]'
- en: '*inherited from the* [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") *method of* [`HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE")'
  id: totrans-4407
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte "sqlalchemy.sql.expression.HasCTE.add_cte")
    *方法的* [`HasCTE`](#sqlalchemy.sql.expression.HasCTE "sqlalchemy.sql.expression.HasCTE")'
- en: Add one or more [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    constructs to this statement.
  id: totrans-4408
  prefs: []
  type: TYPE_NORMAL
  zh: 向此语句添加一个或多个[`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")结构。
- en: This method will associate the given [`CTE`](#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE") constructs with the parent statement such that
    they will each be unconditionally rendered in the WITH clause of the final statement,
    even if not referenced elsewhere within the statement or any sub-selects.
  id: totrans-4409
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法将给定的[`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")结构与父语句关联起来，使它们每个都无条件地在最终语句的WITH子句中呈现，即使在语句或任何子选择中没有其他地方引用它们。
- en: The optional [`HasCTE.add_cte.nest_here`](#sqlalchemy.sql.expression.HasCTE.add_cte.params.nest_here
    "sqlalchemy.sql.expression.HasCTE.add_cte") parameter when set to True will have
    the effect that each given [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    will render in a WITH clause rendered directly along with this statement, rather
    than being moved to the top of the ultimate rendered statement, even if this statement
    is rendered as a subquery within a larger statement.
  id: totrans-4410
  prefs: []
  type: TYPE_NORMAL
  zh: 当可选的[`HasCTE.add_cte.nest_here`](#sqlalchemy.sql.expression.HasCTE.add_cte.params.nest_here
    "sqlalchemy.sql.expression.HasCTE.add_cte")参数设置为True时，每个给定的[`CTE`](#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE")将呈现为与此语句直接一起呈现的WITH子句，而不是移动到最终呈现的语句的顶部，即使此语句作为更大语句中的子查询呈现。
- en: This method has two general uses. One is to embed CTE statements that serve
    some purpose without being referenced explicitly, such as the use case of embedding
    a DML statement such as an INSERT or UPDATE as a CTE inline with a primary statement
    that may draw from its results indirectly. The other is to provide control over
    the exact placement of a particular series of CTE constructs that should remain
    rendered directly in terms of a particular statement that may be nested in a larger
    statement.
  id: totrans-4411
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法有两种通用用途。一个是嵌入一些用途的CTE语句，而不需要显式引用，例如，将DML语句（例如INSERT或UPDATE）作为CTE嵌入到主要语句中，该主要语句可以间接地从其结果中提取。另一个是提供对应于可能嵌套在较大语句中的特定语句的确切放置的控制，这些CTE结构应该保持直接以某个语句的形式呈现。
- en: 'E.g.:'
  id: totrans-4412
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE872]'
  id: totrans-4413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE872]'
- en: 'Would render:'
  id: totrans-4414
  prefs: []
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE873]'
  id: totrans-4415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE873]'
- en: Above, the “anon_1” CTE is not referenced in the SELECT statement, however still
    accomplishes the task of running an INSERT statement.
  id: totrans-4416
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，“anon_1”CTE未在SELECT语句中引用，但仍然完成了运行INSERT语句的任务。
- en: 'Similarly in a DML-related context, using the PostgreSQL [`Insert`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Insert
    "sqlalchemy.dialects.postgresql.Insert") construct to generate an “upsert”:'
  id: totrans-4417
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，在与DML相关的上下文中，使用PostgreSQL的[`Insert`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Insert
    "sqlalchemy.dialects.postgresql.Insert")结构生成“upsert”：
- en: '[PRE874]'
  id: totrans-4418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE874]'
- en: 'The above statement renders as:'
  id: totrans-4419
  prefs: []
  type: TYPE_NORMAL
  zh: 上述语句呈现为：
- en: '[PRE875]'
  id: totrans-4420
  prefs: []
  type: TYPE_PRE
  zh: '[PRE875]'
- en: New in version 1.4.21.
  id: totrans-4421
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本中新增 1.4.21。
- en: 'Parameters:'
  id: totrans-4422
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*ctes` –'
  id: totrans-4423
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*ctes` –'
- en: zero or more [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    constructs.
  id: totrans-4424
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 零个或多个[`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")结构。
- en: 'Changed in version 2.0: Multiple CTE instances are accepted'
  id: totrans-4425
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 2.0版中的更改：接受多个CTE实例
- en: '`nest_here` –'
  id: totrans-4426
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nest_here` –'
- en: if True, the given CTE or CTEs will be rendered as though they specified the
    [`HasCTE.cte.nesting`](#sqlalchemy.sql.expression.HasCTE.cte.params.nesting "sqlalchemy.sql.expression.HasCTE.cte")
    flag to `True` when they were added to this [`HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE"). Assuming the given CTEs are not referenced
    in an outer-enclosing statement as well, the CTEs given should render at the level
    of this statement when this flag is given.
  id: totrans-4427
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果为True，则给定的CTE或CTE将呈现为当它们添加到此[`HasCTE`](#sqlalchemy.sql.expression.HasCTE "sqlalchemy.sql.expression.HasCTE")时指定[`HasCTE.cte.nesting`](#sqlalchemy.sql.expression.HasCTE.cte.params.nesting
    "sqlalchemy.sql.expression.HasCTE.cte")标志为`True`。假设给定的CTE在外层语句中也没有引用，当给出此标志时，给定的CTE应在此语句的级别呈现。
- en: New in version 2.0.
  id: totrans-4428
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版本中新增 2.0。
- en: See also
  id: totrans-4429
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`HasCTE.cte.nesting`](#sqlalchemy.sql.expression.HasCTE.cte.params.nesting
    "sqlalchemy.sql.expression.HasCTE.cte")'
  id: totrans-4430
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`HasCTE.cte.nesting`](#sqlalchemy.sql.expression.HasCTE.cte.params.nesting
    "sqlalchemy.sql.expression.HasCTE.cte")'
- en: '[PRE876]'
  id: totrans-4431
  prefs: []
  type: TYPE_PRE
  zh: '[PRE876]'
- en: '*inherited from the* [`SelectBase.alias()`](#sqlalchemy.sql.expression.SelectBase.alias
    "sqlalchemy.sql.expression.SelectBase.alias") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  id: totrans-4432
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SelectBase.alias()`](#sqlalchemy.sql.expression.SelectBase.alias "sqlalchemy.sql.expression.SelectBase.alias")
    *方法的* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")
    *对象*'
- en: Return a named subquery against this [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase").
  id: totrans-4433
  prefs: []
  type: TYPE_NORMAL
  zh: 返回针对此 [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")
    的命名子查询。
- en: For a [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")
    (as opposed to a [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")),
    this returns a [`Subquery`](#sqlalchemy.sql.expression.Subquery "sqlalchemy.sql.expression.Subquery")
    object which behaves mostly the same as the [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") object that is used with a [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-4434
  prefs: []
  type: TYPE_NORMAL
  zh: 对于[`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")（而不是[`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")），这将返回一个行为大部分与用于[`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")的[`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias")对象相同的[`Subquery`](#sqlalchemy.sql.expression.Subquery
    "sqlalchemy.sql.expression.Subquery")对象。
- en: 'Changed in version 1.4: The [`SelectBase.alias()`](#sqlalchemy.sql.expression.SelectBase.alias
    "sqlalchemy.sql.expression.SelectBase.alias") method is now a synonym for the
    [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery "sqlalchemy.sql.expression.SelectBase.subquery")
    method.'
  id: totrans-4435
  prefs: []
  type: TYPE_NORMAL
  zh: 自 1.4 版更改：[`SelectBase.alias()`](#sqlalchemy.sql.expression.SelectBase.alias
    "sqlalchemy.sql.expression.SelectBase.alias") 方法现在是 [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") 方法的同义词。
- en: '[PRE877]'
  id: totrans-4436
  prefs: []
  type: TYPE_PRE
  zh: '[PRE877]'
- en: '*inherited from the* [`SelectBase.as_scalar()`](#sqlalchemy.sql.expression.SelectBase.as_scalar
    "sqlalchemy.sql.expression.SelectBase.as_scalar") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  id: totrans-4437
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SelectBase.as_scalar()`](#sqlalchemy.sql.expression.SelectBase.as_scalar
    "sqlalchemy.sql.expression.SelectBase.as_scalar") *方法的* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase") *对象*'
- en: 'Deprecated since version 1.4: The [`SelectBase.as_scalar()`](#sqlalchemy.sql.expression.SelectBase.as_scalar
    "sqlalchemy.sql.expression.SelectBase.as_scalar") method is deprecated and will
    be removed in a future release. Please refer to [`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery").'
  id: totrans-4438
  prefs: []
  type: TYPE_NORMAL
  zh: 自 1.4 版弃用：[`SelectBase.as_scalar()`](#sqlalchemy.sql.expression.SelectBase.as_scalar
    "sqlalchemy.sql.expression.SelectBase.as_scalar") 方法已弃用，并将在将来的版本中删除。请参阅 [`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery")。
- en: '[PRE878]'
  id: totrans-4439
  prefs: []
  type: TYPE_PRE
  zh: '[PRE878]'
- en: '*inherited from the* [`SelectBase.c`](#sqlalchemy.sql.expression.SelectBase.c
    "sqlalchemy.sql.expression.SelectBase.c") *attribute of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  id: totrans-4440
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SelectBase.c`](#sqlalchemy.sql.expression.SelectBase.c "sqlalchemy.sql.expression.SelectBase.c")
    *属性的* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")
    *对象*'
- en: 'Deprecated since version 1.4: The [`SelectBase.c`](#sqlalchemy.sql.expression.SelectBase.c
    "sqlalchemy.sql.expression.SelectBase.c") and `SelectBase.columns` attributes
    are deprecated and will be removed in a future release; these attributes implicitly
    create a subquery that should be explicit. Please call [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") first in order to create a subquery,
    which then contains this attribute. To access the columns that this SELECT object
    SELECTs from, use the [`SelectBase.selected_columns`](#sqlalchemy.sql.expression.SelectBase.selected_columns
    "sqlalchemy.sql.expression.SelectBase.selected_columns") attribute.'
  id: totrans-4441
  prefs: []
  type: TYPE_NORMAL
  zh: 自 1.4 版弃用：[`SelectBase.c`](#sqlalchemy.sql.expression.SelectBase.c "sqlalchemy.sql.expression.SelectBase.c")
    和 `SelectBase.columns` 属性已弃用，并将在将来的版本中删除；这些属性隐式地创建了一个应明确的子查询。请先调用 [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") 以创建一个子查询，然后该子查询包含此属性。要访问此 SELECT
    对象从中选择的列，请使用 [`SelectBase.selected_columns`](#sqlalchemy.sql.expression.SelectBase.selected_columns
    "sqlalchemy.sql.expression.SelectBase.selected_columns") 属性。
- en: '[PRE879]'
  id: totrans-4442
  prefs: []
  type: TYPE_PRE
  zh: '[PRE879]'
- en: '*inherited from the* [`ClauseElement.compare()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.compare
    "sqlalchemy.sql.expression.ClauseElement.compare") *method of* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
  id: totrans-4443
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ClauseElement.compare()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.compare
    "sqlalchemy.sql.expression.ClauseElement") *方法的* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
- en: Compare this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") to the given [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  id: totrans-4444
  prefs: []
  type: TYPE_NORMAL
  zh: 将此[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")与给定的[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")进行比较。
- en: Subclasses should override the default behavior, which is a straight identity
    comparison.
  id: totrans-4445
  prefs: []
  type: TYPE_NORMAL
  zh: 子类应该覆盖默认行为，即直接标识比较。
- en: '**kw are arguments consumed by subclass `compare()` methods and may be used
    to modify the criteria for comparison (see [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")).'
  id: totrans-4446
  prefs: []
  type: TYPE_NORMAL
  zh: '**kw是子类`compare()`方法消耗的参数，可以用来修改比较的标准（参见[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")）。'
- en: '[PRE880]'
  id: totrans-4447
  prefs: []
  type: TYPE_PRE
  zh: '[PRE880]'
- en: '*inherited from the* `CompilerElement.compile()` *method of* `CompilerElement`'
  id: totrans-4448
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `CompilerElement.compile()` *方法的* `CompilerElement`'
- en: Compile this SQL expression.
  id: totrans-4449
  prefs: []
  type: TYPE_NORMAL
  zh: 编译此SQL表达式。
- en: The return value is a [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object. Calling `str()` or `unicode()` on the returned
    value will yield a string representation of the result. The [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object also can return a dictionary of bind parameter
    names and values using the `params` accessor.
  id: totrans-4450
  prefs: []
  type: TYPE_NORMAL
  zh: 返回值是一个[`Compiled`](internals.html#sqlalchemy.engine.Compiled "sqlalchemy.engine.Compiled")对象。对返回值调用`str()`或`unicode()`将产生结果的字符串表示。[`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled")对象还可以使用`params`访问器返回绑定参数名称和值的字典。
- en: 'Parameters:'
  id: totrans-4451
  prefs: []
  type: TYPE_NORMAL
  zh: '参数:'
- en: '`bind` – An [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    or [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    which can provide a [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    in order to generate a [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object. If the `bind` and `dialect` parameters are
    both omitted, a default SQL compiler is used.'
  id: totrans-4452
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bind` – 一个[`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")或[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")，可以提供一个[`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect")以生成一个[`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled")对象。如果`bind`和`dialect`参数都被省略，将使用默认的SQL编译器。'
- en: '`column_keys` – Used for INSERT and UPDATE statements, a list of column names
    which should be present in the VALUES clause of the compiled statement. If `None`,
    all columns from the target table object are rendered.'
  id: totrans-4453
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`column_keys` – 用于INSERT和UPDATE语句，一个列名列表，应该出现在编译语句的VALUES子句中。如果为`None`，则渲染目标表对象的所有列。'
- en: '`dialect` – A [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    instance which can generate a [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object. This argument takes precedence over the
    `bind` argument.'
  id: totrans-4454
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect` – 一个[`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")实例，可以生成一个[`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled")对象。此参数优先于`bind`参数。'
- en: '`compile_kwargs` –'
  id: totrans-4455
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`compile_kwargs` –'
- en: 'optional dictionary of additional parameters that will be passed through to
    the compiler within all “visit” methods. This allows any custom flag to be passed
    through to a custom compilation construct, for example. It is also used for the
    case of passing the `literal_binds` flag through:'
  id: totrans-4456
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的字典，包含将传递给编译器在所有“visit”方法中的额外参数。这允许将任何自定义标志传递给自定义编译构造，例如。它还用于通过传递`literal_binds`标志的情况：
- en: '[PRE881]'
  id: totrans-4457
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE881]'
- en: See also
  id: totrans-4458
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[How do I render SQL expressions as strings, possibly with bound parameters
    inlined?](../faq/sqlexpressions.html#faq-sql-expression-string)'
  id: totrans-4459
  prefs: []
  type: TYPE_NORMAL
  zh: '[如何将SQL表达式呈现为字符串，可能包含内联的绑定参数？](../faq/sqlexpressions.html#faq-sql-expression-string)'
- en: '[PRE882]'
  id: totrans-4460
  prefs: []
  type: TYPE_PRE
  zh: '[PRE882]'
- en: '*inherited from the* [`Selectable.corresponding_column()`](#sqlalchemy.sql.expression.Selectable.corresponding_column
    "sqlalchemy.sql.expression.Selectable.corresponding_column") *method of* [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
  id: totrans-4461
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Selectable.corresponding_column()`](#sqlalchemy.sql.expression.Selectable.corresponding_column
    "sqlalchemy.sql.expression.Selectable.corresponding_column") *方法的* [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
- en: Given a [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"), return the exported [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") object from the [`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") collection of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable") which corresponds to that original [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") via a common ancestor column.
  id: totrans-4462
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")，从此[`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")的[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns")集合中返回与该原始[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")通过共同祖先列对应的导出[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")对象。
- en: 'Parameters:'
  id: totrans-4463
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`column` – the target [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") to be matched.'
  id: totrans-4464
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`column` – 要匹配的目标[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")。'
- en: '`require_embedded` – only return corresponding columns for the given [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"), if the given [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") is actually present within a sub-element
    of this [`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable").
    Normally the column will match if it merely shares a common ancestor with one
    of the exported columns of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable").'
  id: totrans-4465
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`require_embedded` – 仅返回给定[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")的相应列，如果给定的[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")实际上存在于此[`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")的子元素中。通常，如果列仅与此[`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")的导出列之一共享共同的祖先，则列将匹配。'
- en: See also
  id: totrans-4466
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") - the [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") that is used for the operation.'
  id: totrans-4467
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") - 用于操作的[`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")。'
- en: '[`ColumnCollection.corresponding_column()`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection.corresponding_column
    "sqlalchemy.sql.expression.ColumnCollection.corresponding_column") - implementation
    method.'
  id: totrans-4468
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnCollection.corresponding_column()`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection.corresponding_column
    "sqlalchemy.sql.expression.ColumnCollection.corresponding_column") - 实现方法。'
- en: '[PRE883]'
  id: totrans-4469
  prefs: []
  type: TYPE_PRE
  zh: '[PRE883]'
- en: '*inherited from the* [`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte
    "sqlalchemy.sql.expression.HasCTE.cte") *method of* [`HasCTE`](#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE")'
  id: totrans-4470
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte "sqlalchemy.sql.expression.HasCTE.cte")
    *方法的* [`HasCTE`](#sqlalchemy.sql.expression.HasCTE "sqlalchemy.sql.expression.HasCTE")'
- en: Return a new [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE"),
    or Common Table Expression instance.
  id: totrans-4471
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的[`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")，或者通用表达式实例。
- en: Common table expressions are a SQL standard whereby SELECT statements can draw
    upon secondary statements specified along with the primary statement, using a
    clause called “WITH”. Special semantics regarding UNION can also be employed to
    allow “recursive” queries, where a SELECT statement can draw upon the set of rows
    that have previously been selected.
  id: totrans-4472
  prefs: []
  type: TYPE_NORMAL
  zh: 公共表达式是SQL标准，其中SELECT语句可以在主语句的同时绘制出指定的辅助语句，使用一个称为“WITH”的子句。还可以使用有关UNION的特殊语义，允许“递归”查询，其中SELECT语句可以利用先前已选择的行集。
- en: CTEs can also be applied to DML constructs UPDATE, INSERT and DELETE on some
    databases, both as a source of CTE rows when combined with RETURNING, as well
    as a consumer of CTE rows.
  id: totrans-4473
  prefs: []
  type: TYPE_NORMAL
  zh: CTE也可以应用于某些数据库上的DML构造UPDATE、INSERT和DELETE，既作为与RETURNING结合使用时CTE行的来源，也作为CTE行的消费者。
- en: SQLAlchemy detects [`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    objects, which are treated similarly to [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") objects, as special elements to be delivered
    to the FROM clause of the statement as well as to a WITH clause at the top of
    the statement.
  id: totrans-4474
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy检测到[`CTE`](#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")对象，这些对象与[`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias")对象类似，被视为要传递到语句的FROM子句以及语句顶部的WITH子句的特殊元素。
- en: For special prefixes such as PostgreSQL “MATERIALIZED” and “NOT MATERIALIZED”,
    the `CTE.prefix_with()` method may be used to establish these.
  id: totrans-4475
  prefs: []
  type: TYPE_NORMAL
  zh: 对于诸如PostgreSQL的“MATERIALIZED”和“NOT MATERIALIZED”等特殊前缀，可以使用`CTE.prefix_with()`方法来建立这些。
- en: 'Changed in version 1.3.13: Added support for prefixes. In particular - MATERIALIZED
    and NOT MATERIALIZED.'
  id: totrans-4476
  prefs: []
  type: TYPE_NORMAL
  zh: 1.3.13版中的更改：增加了对前缀的支持。特别是- MATERIALIZED和NOT MATERIALIZED。
- en: 'Parameters:'
  id: totrans-4477
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`name` – name given to the common table expression. Like [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias"), the name can be left as `None`
    in which case an anonymous symbol will be used at query compile time.'
  id: totrans-4478
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 给公共表达式起的名称。与[`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias")一样，如果将名称留空，则在查询编译时将使用匿名符号。'
- en: '`recursive` – if `True`, will render `WITH RECURSIVE`. A recursive common table
    expression is intended to be used in conjunction with UNION ALL in order to derive
    rows from those already selected.'
  id: totrans-4479
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`recursive` – 如果设置为`True`，将会渲染`WITH RECURSIVE`。递归公共表达式旨在与UNION ALL结合使用，以从已选择的行派生行。'
- en: '`nesting` –'
  id: totrans-4480
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nesting` –'
- en: if `True`, will render the CTE locally to the statement in which it is referenced.
    For more complex scenarios, the [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") method using the [`HasCTE.add_cte.nest_here`](#sqlalchemy.sql.expression.HasCTE.add_cte.params.nest_here
    "sqlalchemy.sql.expression.HasCTE.add_cte") parameter may also be used to more
    carefully control the exact placement of a particular CTE.
  id: totrans-4481
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果设置为`True`，将在引用它的语句中将CTE本地渲染。对于更复杂的场景，还可以使用[`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte")方法，使用[`HasCTE.add_cte.nest_here`](#sqlalchemy.sql.expression.HasCTE.add_cte.params.nest_here
    "sqlalchemy.sql.expression.HasCTE.add_cte")参数更精确地控制特定CTE的确切放置。
- en: New in version 1.4.24.
  id: totrans-4482
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版1.4.24中新增。
- en: See also
  id: totrans-4483
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte "sqlalchemy.sql.expression.HasCTE.add_cte")'
  id: totrans-4484
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte "sqlalchemy.sql.expression.HasCTE.add_cte")'
- en: The following examples include two from PostgreSQL’s documentation at [https://www.postgresql.org/docs/current/static/queries-with.html](https://www.postgresql.org/docs/current/static/queries-with.html),
    as well as additional examples.
  id: totrans-4485
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例包括两个来自PostgreSQL文档的示例，网址为[https://www.postgresql.org/docs/current/static/queries-with.html](https://www.postgresql.org/docs/current/static/queries-with.html)，以及其他示例。
- en: 'Example 1, non recursive:'
  id: totrans-4486
  prefs: []
  type: TYPE_NORMAL
  zh: 示例1，非递归：
- en: '[PRE884]'
  id: totrans-4487
  prefs: []
  type: TYPE_PRE
  zh: '[PRE884]'
- en: 'Example 2, WITH RECURSIVE:'
  id: totrans-4488
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 2，WITH RECURSIVE：
- en: '[PRE885]'
  id: totrans-4489
  prefs: []
  type: TYPE_PRE
  zh: '[PRE885]'
- en: 'Example 3, an upsert using UPDATE and INSERT with CTEs:'
  id: totrans-4490
  prefs: []
  type: TYPE_NORMAL
  zh: 示例3，使用UPDATE和INSERT进行的upsert操作与CTE一起：
- en: '[PRE886]'
  id: totrans-4491
  prefs: []
  type: TYPE_PRE
  zh: '[PRE886]'
- en: 'Example 4, Nesting CTE (SQLAlchemy 1.4.24 and above):'
  id: totrans-4492
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 4，嵌套CTE（SQLAlchemy 1.4.24及以上版本）：
- en: '[PRE887]'
  id: totrans-4493
  prefs: []
  type: TYPE_PRE
  zh: '[PRE887]'
- en: 'The above query will render the second CTE nested inside the first, shown with
    inline parameters below as:'
  id: totrans-4494
  prefs: []
  type: TYPE_NORMAL
  zh: 上述查询将在第一个CTE内嵌套第二个CTE，如下所示，内联参数如下：
- en: '[PRE888]'
  id: totrans-4495
  prefs: []
  type: TYPE_PRE
  zh: '[PRE888]'
- en: 'The same CTE can be set up using the [`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") method as follows (SQLAlchemy 2.0
    and above):'
  id: totrans-4496
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用[`HasCTE.add_cte()`](#sqlalchemy.sql.expression.HasCTE.add_cte "sqlalchemy.sql.expression.HasCTE.add_cte")方法设置相同的CTE，如下所示（SQLAlchemy
    2.0及以上版本）：
- en: '[PRE889]'
  id: totrans-4497
  prefs: []
  type: TYPE_PRE
  zh: '[PRE889]'
- en: 'Example 5, Non-Linear CTE (SQLAlchemy 1.4.28 and above):'
  id: totrans-4498
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 5，非线性CTE（SQLAlchemy 1.4.28及以上版本）：
- en: '[PRE890]'
  id: totrans-4499
  prefs: []
  type: TYPE_PRE
  zh: '[PRE890]'
- en: 'The above query will render 2 UNIONs inside the recursive CTE:'
  id: totrans-4500
  prefs: []
  type: TYPE_NORMAL
  zh: 上述查询将在递归CTE内呈现 2 个 UNIONs：
- en: '[PRE891]'
  id: totrans-4501
  prefs: []
  type: TYPE_PRE
  zh: '[PRE891]'
- en: See also
  id: totrans-4502
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`Query.cte()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.cte "sqlalchemy.orm.Query.cte")
    - ORM version of [`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte "sqlalchemy.sql.expression.HasCTE.cte").'
  id: totrans-4503
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.cte()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.cte "sqlalchemy.orm.Query.cte")
    - [`HasCTE.cte()`](#sqlalchemy.sql.expression.HasCTE.cte "sqlalchemy.sql.expression.HasCTE.cte")
    的ORM版本。'
- en: '[PRE892]'
  id: totrans-4504
  prefs: []
  type: TYPE_PRE
  zh: '[PRE892]'
- en: '*inherited from the* [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") *method of* [`Executable`](#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")'
  id: totrans-4505
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") *方法的* [`Executable`](#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")'
- en: Set non-SQL options for the statement which take effect during execution.
  id: totrans-4506
  prefs: []
  type: TYPE_NORMAL
  zh: 为在执行期间生效的语句设置非SQL选项。
- en: Execution options can be set at many scopes, including per-statement, per-connection,
    or per execution, using methods such as [`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") and parameters which accept
    a dictionary of options such as [`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute") and [`Session.execute.execution_options`](../orm/session_api.html#sqlalchemy.orm.Session.execute.params.execution_options
    "sqlalchemy.orm.Session.execute").
  id: totrans-4507
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在许多范围内设置执行选项，包括每个语句、每个连接或每个执行，使用诸如 [`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") 这样的方法以及接受选项字典的参数，例如 [`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute") 和 [`Session.execute.execution_options`](../orm/session_api.html#sqlalchemy.orm.Session.execute.params.execution_options
    "sqlalchemy.orm.Session.execute")。
- en: The primary characteristic of an execution option, as opposed to other kinds
    of options such as ORM loader options, is that **execution options never affect
    the compiled SQL of a query, only things that affect how the SQL statement itself
    is invoked or how results are fetched**. That is, execution options are not part
    of what’s accommodated by SQL compilation nor are they considered part of the
    cached state of a statement.
  id: totrans-4508
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他类型的选项（例如ORM加载程序选项）相比，执行选项的主要特征是**执行选项从不影响查询的编译SQL，只影响SQL语句本身如何被调用或结果如何获取**。也就是说，执行选项不是SQL编译所容纳的部分，也不被视为语句的缓存状态的一部分。
- en: 'The [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") method is [generative](../glossary.html#term-generative),
    as is the case for the method as applied to the [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") and [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") objects, which means when the method is called, a copy
    of the object is returned, which applies the given parameters to that new copy,
    but leaves the original unchanged:'
  id: totrans-4509
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") 方法是[生成的](../glossary.html#term-generative)，与应用于
    [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    和 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    对象的方法相同，这意味着当调用该方法时，将返回对象的副本，该副本应用给定的参数，但原始对象保持不变：'
- en: '[PRE893]'
  id: totrans-4510
  prefs: []
  type: TYPE_PRE
  zh: '[PRE893]'
- en: An exception to this behavior is the [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object, where the [`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") method is explicitly **not**
    generative.
  id: totrans-4511
  prefs: []
  type: TYPE_NORMAL
  zh: 对此行为的一个例外是 [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    对象，在该对象上，[`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") 方法明确地**不**是生成的。
- en: 'The kinds of options that may be passed to [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") and other related methods
    and parameter dictionaries include parameters that are explicitly consumed by
    SQLAlchemy Core or ORM, as well as arbitrary keyword arguments not defined by
    SQLAlchemy, which means the methods and/or parameter dictionaries may be used
    for user-defined parameters that interact with custom code, which may access the
    parameters using methods such as [`Executable.get_execution_options()`](#sqlalchemy.sql.expression.Executable.get_execution_options
    "sqlalchemy.sql.expression.Executable.get_execution_options") and [`Connection.get_execution_options()`](connections.html#sqlalchemy.engine.Connection.get_execution_options
    "sqlalchemy.engine.Connection.get_execution_options"), or within selected event
    hooks using a dedicated `execution_options` event parameter such as [`ConnectionEvents.before_execute.execution_options`](events.html#sqlalchemy.events.ConnectionEvents.before_execute.params.execution_options
    "sqlalchemy.events.ConnectionEvents.before_execute") or [`ORMExecuteState.execution_options`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.execution_options
    "sqlalchemy.orm.ORMExecuteState.execution_options"), e.g.:'
  id: totrans-4512
  prefs: []
  type: TYPE_NORMAL
  zh: 可传递给[`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")和其他相关方法和参数字典的选项类型包括被SQLAlchemy
    Core或ORM明确消耗的参数，以及SQLAlchemy未定义的任意关键字参数，这意味着这些方法和/或参数字典可用于与自定义代码交互的用户定义参数，可以使用诸如[`Executable.get_execution_options()`](#sqlalchemy.sql.expression.Executable.get_execution_options
    "sqlalchemy.sql.expression.Executable.get_execution_options")和[`Connection.get_execution_options()`](connections.html#sqlalchemy.engine.Connection.get_execution_options
    "sqlalchemy.engine.Connection.get_execution_options")等方法访问这些参数，或者在选定的事件钩子中使用专用的`execution_options`事件参数，例如[`ConnectionEvents.before_execute.execution_options`](events.html#sqlalchemy.events.ConnectionEvents.before_execute.params.execution_options
    "sqlalchemy.events.ConnectionEvents.before_execute")或[`ORMExecuteState.execution_options`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.execution_options
    "sqlalchemy.orm.ORMExecuteState.execution_options")，例如：
- en: '[PRE894]'
  id: totrans-4513
  prefs: []
  type: TYPE_PRE
  zh: '[PRE894]'
- en: 'Within the scope of options that are explicitly recognized by SQLAlchemy, most
    apply to specific classes of objects and not others. The most common execution
    options include:'
  id: totrans-4514
  prefs: []
  type: TYPE_NORMAL
  zh: 在SQLAlchemy明确识别的选项范围内，大多数适用于特定类的对象而不是其他对象。最常见的执行选项包括：
- en: '[`Connection.execution_options.isolation_level`](connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") - sets the isolation level for
    a connection or a class of connections via an [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"). This option is accepted only by [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") or [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine").'
  id: totrans-4515
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.isolation_level`](connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") - 设置连接或一类连接的隔离级别，通过[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")接受此选项。此选项仅被[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")或[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")接受。'
- en: '[`Connection.execution_options.stream_results`](connections.html#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") - indicates results should be
    fetched using a server side cursor; this option is accepted by [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"), by the [`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute") parameter on [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute"), and additionally by [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") on a SQL statement object,
    as well as by ORM constructs like [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute").'
  id: totrans-4516
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.stream_results`](connections.html#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") - 指示应使用服务器端游标获取结果；此选项由[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")接受，由[`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute")参数传递给[`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")，以及由SQL语句对象的[`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")以及ORM构造函数如[`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")附加。'
- en: '[`Connection.execution_options.compiled_cache`](connections.html#sqlalchemy.engine.Connection.execution_options.params.compiled_cache
    "sqlalchemy.engine.Connection.execution_options") - indicates a dictionary that
    will serve as the [SQL compilation cache](connections.html#sql-caching) for a
    [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    or [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine"),
    as well as for ORM methods like [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute"). Can be passed as `None` to disable caching
    for statements. This option is not accepted by [`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") as it is inadvisable
    to carry along a compilation cache within a statement object.'
  id: totrans-4517
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.compiled_cache`](connections.html#sqlalchemy.engine.Connection.execution_options.params.compiled_cache
    "sqlalchemy.engine.Connection.execution_options") - 指示将用作[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")或[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")的[SQL编译缓存](connections.html#sql-caching)的字典，以及ORM方法如[`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")。可以将其传递为`None`以禁用语句的缓存。此选项不被[`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")接受，因为将编译缓存随语句对象一起传递是不明智的。'
- en: '[`Connection.execution_options.schema_translate_map`](connections.html#sqlalchemy.engine.Connection.execution_options.params.schema_translate_map
    "sqlalchemy.engine.Connection.execution_options") - a mapping of schema names
    used by the [Schema Translate Map](connections.html#schema-translating) feature,
    accepted by [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine"),
    [`Executable`](#sqlalchemy.sql.expression.Executable "sqlalchemy.sql.expression.Executable"),
    as well as by ORM constructs like [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute").'
  id: totrans-4518
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.schema_translate_map`](connections.html#sqlalchemy.engine.Connection.execution_options.params.schema_translate_map
    "sqlalchemy.engine.Connection.execution_options") - 用于[模式翻译映射](connections.html#schema-translating)功能的模式名称映射，由[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")，[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")，[`Executable`](#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")接受，以及ORM构造函数如[`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")。'
- en: See also
  id: totrans-4519
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")'
  id: totrans-4520
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")'
- en: '[`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute")'
  id: totrans-4521
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.execute.execution_options`](connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute")'
- en: '[`Session.execute.execution_options`](../orm/session_api.html#sqlalchemy.orm.Session.execute.params.execution_options
    "sqlalchemy.orm.Session.execute")'
  id: totrans-4522
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.execute.execution_options`](../orm/session_api.html#sqlalchemy.orm.Session.execute.params.execution_options
    "sqlalchemy.orm.Session.execute")'
- en: '[ORM Execution Options](../orm/queryguide/api.html#orm-queryguide-execution-options)
    - documentation on all ORM-specific execution options'
  id: totrans-4523
  prefs: []
  type: TYPE_NORMAL
  zh: '[ORM 执行选项](../orm/queryguide/api.html#orm-queryguide-execution-options) - 关于所有
    ORM 特定执行选项的文档'
- en: '[PRE895]'
  id: totrans-4524
  prefs: []
  type: TYPE_PRE
  zh: '[PRE895]'
- en: '*inherited from the* [`SelectBase.exists()`](#sqlalchemy.sql.expression.SelectBase.exists
    "sqlalchemy.sql.expression.SelectBase.exists") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  id: totrans-4525
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SelectBase.exists()`](#sqlalchemy.sql.expression.SelectBase.exists
    "sqlalchemy.sql.expression.SelectBase.exists") *方法，属于* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
- en: Return an [`Exists`](#sqlalchemy.sql.expression.Exists "sqlalchemy.sql.expression.Exists")
    representation of this selectable, which can be used as a column expression.
  id: totrans-4526
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此可选择的 [`Exists`](#sqlalchemy.sql.expression.Exists "sqlalchemy.sql.expression.Exists")
    表示，可用作列表达式。
- en: The returned object is an instance of [`Exists`](#sqlalchemy.sql.expression.Exists
    "sqlalchemy.sql.expression.Exists").
  id: totrans-4527
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的对象是 [`Exists`](#sqlalchemy.sql.expression.Exists "sqlalchemy.sql.expression.Exists")
    的一个实例。
- en: See also
  id: totrans-4528
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`exists()`](#sqlalchemy.sql.expression.exists "sqlalchemy.sql.expression.exists")'
  id: totrans-4529
  prefs: []
  type: TYPE_NORMAL
  zh: '[`exists()`](#sqlalchemy.sql.expression.exists "sqlalchemy.sql.expression.exists")'
- en: '[EXISTS subqueries](../tutorial/data_select.html#tutorial-exists) - in the
    [2.0 style](../glossary.html#term-2.0-style) tutorial.'
  id: totrans-4530
  prefs: []
  type: TYPE_NORMAL
  zh: '[EXISTS 子查询](../tutorial/data_select.html#tutorial-exists) - 在 [2.0 样式](../glossary.html#term-2.0-style)
    教程中。'
- en: New in version 1.4.
  id: totrans-4531
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.4 起新增。
- en: '[PRE896]'
  id: totrans-4532
  prefs: []
  type: TYPE_PRE
  zh: '[PRE896]'
- en: '*inherited from the* [`SelectBase.exported_columns`](#sqlalchemy.sql.expression.SelectBase.exported_columns
    "sqlalchemy.sql.expression.SelectBase.exported_columns") *attribute of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  id: totrans-4533
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SelectBase.exported_columns`](#sqlalchemy.sql.expression.SelectBase.exported_columns
    "sqlalchemy.sql.expression.SelectBase.exported_columns") *属性，属于* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
- en: A [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") that represents the “exported” columns
    of this [`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable"),
    not including [`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause") constructs.
  id: totrans-4534
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") 代表此 [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable") 的“导出”列，不包括 [`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause") 构造。
- en: The “exported” columns for a [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase") object are synonymous with the [`SelectBase.selected_columns`](#sqlalchemy.sql.expression.SelectBase.selected_columns
    "sqlalchemy.sql.expression.SelectBase.selected_columns") collection.
  id: totrans-4535
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")
    对象的“导出”列与 [`SelectBase.selected_columns`](#sqlalchemy.sql.expression.SelectBase.selected_columns
    "sqlalchemy.sql.expression.SelectBase.selected_columns") 集合是同义词。'
- en: New in version 1.4.
  id: totrans-4536
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.4 起新增。
- en: See also
  id: totrans-4537
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Select.exported_columns`](#sqlalchemy.sql.expression.Select.exported_columns
    "sqlalchemy.sql.expression.Select.exported_columns")'
  id: totrans-4538
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.exported_columns`](#sqlalchemy.sql.expression.Select.exported_columns
    "sqlalchemy.sql.expression.Select.exported_columns")'
- en: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns")'
  id: totrans-4539
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Selectable.exported_columns`](#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns")'
- en: '[`FromClause.exported_columns`](#sqlalchemy.sql.expression.FromClause.exported_columns
    "sqlalchemy.sql.expression.FromClause.exported_columns")'
  id: totrans-4540
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FromClause.exported_columns`](#sqlalchemy.sql.expression.FromClause.exported_columns
    "sqlalchemy.sql.expression.FromClause.exported_columns")'
- en: '[PRE897]'
  id: totrans-4541
  prefs: []
  type: TYPE_PRE
  zh: '[PRE897]'
- en: '*inherited from the* `HasTraverseInternals.get_children()` *method of* `HasTraverseInternals`'
  id: totrans-4542
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `HasTraverseInternals.get_children()` *方法，属于* `HasTraverseInternals`'
- en: Return immediate child `HasTraverseInternals` elements of this `HasTraverseInternals`.
  id: totrans-4543
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此 `HasTraverseInternals` 的直接子`HasTraverseInternals`元素。
- en: This is used for visit traversal.
  id: totrans-4544
  prefs: []
  type: TYPE_NORMAL
  zh: 用于访问遍历。
- en: '**kw may contain flags that change the collection that is returned, for example
    to return a subset of items in order to cut down on larger traversals, or to return
    child items from a different context (such as schema-level collections instead
    of clause-level).'
  id: totrans-4545
  prefs: []
  type: TYPE_NORMAL
  zh: '**kw 可能包含更改返回集合的标志，例如返回子集以减少较大的遍历，或者从不同上下文返回子项（例如模式级别的集合而不是子句级别的集合）。'
- en: '[PRE898]'
  id: totrans-4546
  prefs: []
  type: TYPE_PRE
  zh: '[PRE898]'
- en: '*inherited from the* [`Executable.get_execution_options()`](#sqlalchemy.sql.expression.Executable.get_execution_options
    "sqlalchemy.sql.expression.Executable.get_execution_options") *method of* [`Executable`](#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")'
  id: totrans-4547
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Executable.get_execution_options()`](#sqlalchemy.sql.expression.Executable.get_execution_options
    "sqlalchemy.sql.expression.Executable.get_execution_options") *方法的* [`Executable`](#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")'
- en: Get the non-SQL options which will take effect during execution.
  id: totrans-4548
  prefs: []
  type: TYPE_NORMAL
  zh: 获取在执行期间生效的非 SQL 选项。
- en: New in version 1.3.
  id: totrans-4549
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.3 中新增。
- en: See also
  id: totrans-4550
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")'
  id: totrans-4551
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Executable.execution_options()`](#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")'
- en: '[PRE899]'
  id: totrans-4552
  prefs: []
  type: TYPE_PRE
  zh: '[PRE899]'
- en: '*inherited from the* [`SelectBase.get_label_style()`](#sqlalchemy.sql.expression.SelectBase.get_label_style
    "sqlalchemy.sql.expression.SelectBase.get_label_style") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  id: totrans-4553
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SelectBase.get_label_style()`](#sqlalchemy.sql.expression.SelectBase.get_label_style
    "sqlalchemy.sql.expression.SelectBase.get_label_style") *方法的* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
- en: Retrieve the current label style.
  id: totrans-4554
  prefs: []
  type: TYPE_NORMAL
  zh: 检索当前的标签样式。
- en: Implemented by subclasses.
  id: totrans-4555
  prefs: []
  type: TYPE_NORMAL
  zh: 子类实现。
- en: '[PRE900]'
  id: totrans-4556
  prefs: []
  type: TYPE_PRE
  zh: '[PRE900]'
- en: '*inherited from the* `HasCacheKey.inherit_cache` *attribute of* [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.cache_key.HasCacheKey")'
  id: totrans-4557
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `HasCacheKey.inherit_cache` *属性的* [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.cache_key.HasCacheKey")'
- en: Indicate if this [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") instance should make use of the cache
    key generation scheme used by its immediate superclass.
  id: totrans-4558
  prefs: []
  type: TYPE_NORMAL
  zh: 指示此 [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey "sqlalchemy.sql.traversals.HasCacheKey")
    实例是否应使用其直接超类使用的缓存键生成方案。
- en: The attribute defaults to `None`, which indicates that a construct has not yet
    taken into account whether or not its appropriate for it to participate in caching;
    this is functionally equivalent to setting the value to `False`, except that a
    warning is also emitted.
  id: totrans-4559
  prefs: []
  type: TYPE_NORMAL
  zh: 此属性默认为 `None`，表示构造尚未考虑其是否适合参与缓存；这在功能上等同于将值设置为 `False`，只是还会发出警告。
- en: This flag can be set to `True` on a particular class, if the SQL that corresponds
    to the object does not change based on attributes which are local to this class,
    and not its superclass.
  id: totrans-4560
  prefs: []
  type: TYPE_NORMAL
  zh: 如果与此类本地属性相关且不是其超类的属性，则可以在特定类上将此标志设置为 `True`，并且对象对应的 SQL 不会根据这些属性而变化。
- en: See also
  id: totrans-4561
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Enabling Caching Support for Custom Constructs](compiler.html#compilerext-caching)
    - General guideslines for setting the [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute for third-party
    or user defined SQL constructs.'
  id: totrans-4562
  prefs: []
  type: TYPE_NORMAL
  zh: '[为自定义构造启用缓存支持](compiler.html#compilerext-caching) - 设置第三方或用户定义的 SQL 构造的 [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") 属性的一般指南。'
- en: '[PRE901]'
  id: totrans-4563
  prefs: []
  type: TYPE_PRE
  zh: '[PRE901]'
- en: '*inherited from the* [`ReturnsRows.is_derived_from()`](#sqlalchemy.sql.expression.ReturnsRows.is_derived_from
    "sqlalchemy.sql.expression.ReturnsRows.is_derived_from") *method of* [`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows
    "sqlalchemy.sql.expression.ReturnsRows")'
  id: totrans-4564
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ReturnsRows.is_derived_from()`](#sqlalchemy.sql.expression.ReturnsRows.is_derived_from
    "sqlalchemy.sql.expression.ReturnsRows.is_derived_from") *方法的* [`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows
    "sqlalchemy.sql.expression.ReturnsRows")'
- en: Return `True` if this [`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows
    "sqlalchemy.sql.expression.ReturnsRows") is ‘derived’ from the given [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-4565
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此 [`ReturnsRows`](#sqlalchemy.sql.expression.ReturnsRows "sqlalchemy.sql.expression.ReturnsRows")
    *衍生自* 给定的 [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")，则返回
    `True`。
- en: An example would be an Alias of a Table is derived from that Table.
  id: totrans-4566
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，表的别名源自该表。
- en: '[PRE902]'
  id: totrans-4567
  prefs: []
  type: TYPE_PRE
  zh: '[PRE902]'
- en: '*inherited from the* [`SelectBase.label()`](#sqlalchemy.sql.expression.SelectBase.label
    "sqlalchemy.sql.expression.SelectBase.label") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  id: totrans-4568
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SelectBase.label()`](#sqlalchemy.sql.expression.SelectBase.label "sqlalchemy.sql.expression.SelectBase.label")
    *方法的* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")'
- en: Return a ‘scalar’ representation of this selectable, embedded as a subquery
    with a label.
  id: totrans-4569
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此可选择的‘标量’表示形式，嵌入为带有标签的子查询。
- en: See also
  id: totrans-4570
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery").'
  id: totrans-4571
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery")。'
- en: '[PRE903]'
  id: totrans-4572
  prefs: []
  type: TYPE_PRE
  zh: '[PRE903]'
- en: '*inherited from the* [`SelectBase.lateral()`](#sqlalchemy.sql.expression.SelectBase.lateral
    "sqlalchemy.sql.expression.SelectBase.lateral") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  id: totrans-4573
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SelectBase.lateral()`](#sqlalchemy.sql.expression.SelectBase.lateral
    "sqlalchemy.sql.expression.SelectBase.lateral") *方法的* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
- en: Return a LATERAL alias of this [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable").
  id: totrans-4574
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此[`Selectable`](#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable")的LATERAL别名。
- en: The return value is the [`Lateral`](#sqlalchemy.sql.expression.Lateral "sqlalchemy.sql.expression.Lateral")
    construct also provided by the top-level [`lateral()`](#sqlalchemy.sql.expression.lateral
    "sqlalchemy.sql.expression.lateral") function.
  id: totrans-4575
  prefs: []
  type: TYPE_NORMAL
  zh: 返回值是[`Lateral`](#sqlalchemy.sql.expression.Lateral "sqlalchemy.sql.expression.Lateral")结构，由顶层[`lateral()`](#sqlalchemy.sql.expression.lateral
    "sqlalchemy.sql.expression.lateral")函数提供。
- en: See also
  id: totrans-4576
  prefs: []
  type: TYPE_NORMAL
  zh: 也请参见
- en: '[LATERAL correlation](../tutorial/data_select.html#tutorial-lateral-correlation)
    - overview of usage.'
  id: totrans-4577
  prefs: []
  type: TYPE_NORMAL
  zh: '[LATERAL correlation](../tutorial/data_select.html#tutorial-lateral-correlation)
    - 用法概述。'
- en: '[PRE904]'
  id: totrans-4578
  prefs: []
  type: TYPE_PRE
  zh: '[PRE904]'
- en: '*inherited from the* [`Executable.options()`](#sqlalchemy.sql.expression.Executable.options
    "sqlalchemy.sql.expression.Executable.options") *method of* [`Executable`](#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")'
  id: totrans-4579
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Executable.options()`](#sqlalchemy.sql.expression.Executable.options
    "sqlalchemy.sql.expression.Executable.options") *方法的* [`Executable`](#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")'
- en: Apply options to this statement.
  id: totrans-4580
  prefs: []
  type: TYPE_NORMAL
  zh: 对此语句应用选项。
- en: In the general sense, options are any kind of Python object that can be interpreted
    by the SQL compiler for the statement. These options can be consumed by specific
    dialects or specific kinds of compilers.
  id: totrans-4581
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，选项是可以被SQL编译器解释为语句的任何类型的Python对象。这些选项可以被特定方言或特定类型的编译器消耗。
- en: The most commonly known kind of option are the ORM level options that apply
    “eager load” and other loading behaviors to an ORM query. However, options can
    theoretically be used for many other purposes.
  id: totrans-4582
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的选项类型是应用于ORM查询的ORM级别选项，它们可以将“急加载”和其他加载行为应用于ORM查询。但是，理论上选项可以用于许多其他目的。
- en: For background on specific kinds of options for specific kinds of statements,
    refer to the documentation for those option objects.
  id: totrans-4583
  prefs: []
  type: TYPE_NORMAL
  zh: 关于特定类型语句的特定类型选项的背景，请参阅这些选项对象的文档。
- en: 'Changed in version 1.4: - added [`Executable.options()`](#sqlalchemy.sql.expression.Executable.options
    "sqlalchemy.sql.expression.Executable.options") to Core statement objects towards
    the goal of allowing unified Core / ORM querying capabilities.'
  id: totrans-4584
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本1.4中更改： - 向Core语句对象添加了[`Executable.options()`](#sqlalchemy.sql.expression.Executable.options
    "sqlalchemy.sql.expression.Executable.options")，以实现统一的Core / ORM查询功能。
- en: See also
  id: totrans-4585
  prefs: []
  type: TYPE_NORMAL
  zh: 也请参见
- en: '[Column Loading Options](../orm/queryguide/columns.html#loading-columns) -
    refers to options specific to the usage of ORM queries'
  id: totrans-4586
  prefs: []
  type: TYPE_NORMAL
  zh: '[列加载选项](../orm/queryguide/columns.html#loading-columns) - 指的是用于ORM查询的特定选项'
- en: '[Relationship Loading with Loader Options](../orm/queryguide/relationships.html#relationship-loader-options)
    - refers to options specific to the usage of ORM queries'
  id: totrans-4587
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用加载器选项进行关系加载](../orm/queryguide/relationships.html#relationship-loader-options)
    - 指的是用于ORM查询的特定选项'
- en: '[PRE905]'
  id: totrans-4588
  prefs: []
  type: TYPE_PRE
  zh: '[PRE905]'
- en: '*inherited from the* [`ClauseElement.params()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.params
    "sqlalchemy.sql.expression.ClauseElement.params") *method of* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
  id: totrans-4589
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ClauseElement.params()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.params
    "sqlalchemy.sql.expression.ClauseElement.params") *方法的* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
- en: Return a copy with [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") elements replaced.
  id: totrans-4590
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个副本，其中[`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")元素已替换。
- en: 'Returns a copy of this ClauseElement with [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") elements replaced with values taken from
    the given dictionary:'
  id: totrans-4591
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此ClauseElement的副本，其中的[`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")元素已替换为从给定字典中取出的值：
- en: '[PRE906]'
  id: totrans-4592
  prefs: []
  type: TYPE_PRE
  zh: '[PRE906]'
- en: '[PRE907]'
  id: totrans-4593
  prefs: []
  type: TYPE_PRE
  zh: '[PRE907]'
- en: '*inherited from the* [`Selectable.replace_selectable()`](#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") *method of* [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
  id: totrans-4594
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Selectable.replace_selectable()`](#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") *方法的* [`Selectable`](#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable") *类方法*'
- en: Replace all occurrences of [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") ‘old’ with the given [`Alias`](#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") object, returning a copy of this [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-4595
  prefs: []
  type: TYPE_NORMAL
  zh: 将 [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    *中所有出现的* ‘old’ *替换为给定的* [`Alias`](#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    *对象，并返回此* [`FromClause`](#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    *的副本。*
- en: 'Deprecated since version 1.4: The [`Selectable.replace_selectable()`](#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") method is deprecated,
    and will be removed in a future release. Similar functionality is available via
    the sqlalchemy.sql.visitors module.'
  id: totrans-4596
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.4 起已弃用：[`Selectable.replace_selectable()`](#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") *方法已弃用，并将在将来的版本中删除。类似功能可通过
    sqlalchemy.sql.visitors 模块获得。*
- en: '[PRE908]'
  id: totrans-4597
  prefs: []
  type: TYPE_PRE
  zh: '[PRE908]'
- en: '*inherited from the* [`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  id: totrans-4598
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SelectBase.scalar_subquery()`](#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery") *方法的* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase") *类方法*'
- en: Return a ‘scalar’ representation of this selectable, which can be used as a
    column expression.
  id: totrans-4599
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此可选对象的 ‘scalar’ 表示形式，可用作列表达式。
- en: The returned object is an instance of [`ScalarSelect`](#sqlalchemy.sql.expression.ScalarSelect
    "sqlalchemy.sql.expression.ScalarSelect").
  id: totrans-4600
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的对象是 [`ScalarSelect`](#sqlalchemy.sql.expression.ScalarSelect "sqlalchemy.sql.expression.ScalarSelect")
    *的一个实例。*
- en: Typically, a select statement which has only one column in its columns clause
    is eligible to be used as a scalar expression. The scalar subquery can then be
    used in the WHERE clause or columns clause of an enclosing SELECT.
  id: totrans-4601
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，列子句中只有一个列的 select 语句可以用作标量表达式。然后可以在封闭的 SELECT 的 WHERE 子句或列子句中使用标量子查询。
- en: Note that the scalar subquery differentiates from the FROM-level subquery that
    can be produced using the [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") method.
  id: totrans-4602
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，标量子查询与使用 [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") *方法生成的 FROM 级子查询不同。*
- en: See also
  id: totrans-4603
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Scalar and Correlated Subqueries](../tutorial/data_select.html#tutorial-scalar-subquery)
    - in the 2.0 tutorial'
  id: totrans-4604
  prefs: []
  type: TYPE_NORMAL
  zh: '[标量和相关子查询](../tutorial/data_select.html#tutorial-scalar-subquery) - 在 2.0 教程中'
- en: '[PRE909]'
  id: totrans-4605
  prefs: []
  type: TYPE_PRE
  zh: '[PRE909]'
- en: '*inherited from the* [`SelectBase.select()`](#sqlalchemy.sql.expression.SelectBase.select
    "sqlalchemy.sql.expression.SelectBase.select") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  id: totrans-4606
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SelectBase.select()`](#sqlalchemy.sql.expression.SelectBase.select
    "sqlalchemy.sql.expression.SelectBase.select") *方法的* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase") *类方法*'
- en: 'Deprecated since version 1.4: The [`SelectBase.select()`](#sqlalchemy.sql.expression.SelectBase.select
    "sqlalchemy.sql.expression.SelectBase.select") method is deprecated and will be
    removed in a future release; this method implicitly creates a subquery that should
    be explicit. Please call [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") first in order to create a subquery,
    which then can be selected.'
  id: totrans-4607
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.4 起已弃用：[`SelectBase.select()`](#sqlalchemy.sql.expression.SelectBase.select
    "sqlalchemy.sql.expression.SelectBase.select") *方法已弃用，并将在将来的版本中删除；此方法隐式创建应为明确的子查询。请首先调用
    [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery "sqlalchemy.sql.expression.SelectBase.subquery")
    *以创建子查询，然后可以选择该子查询。*
- en: '[PRE910]'
  id: totrans-4608
  prefs: []
  type: TYPE_PRE
  zh: '[PRE910]'
- en: A [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") representing the columns that this
    SELECT statement or similar construct returns in its result set, not including
    [`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause "sqlalchemy.sql.expression.TextClause")
    constructs.
  id: totrans-4609
  prefs: []
  type: TYPE_NORMAL
  zh: 一个代表该 SELECT 语句或类似结构在其结果集中返回的列的 [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")，不包括 [`TextClause`](sqlelement.html#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause") 结构。
- en: This collection differs from the [`FromClause.columns`](#sqlalchemy.sql.expression.FromClause.columns
    "sqlalchemy.sql.expression.FromClause.columns") collection of a [`FromClause`](#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") in that the columns within this collection
    cannot be directly nested inside another SELECT statement; a subquery must be
    applied first which provides for the necessary parenthesization required by SQL.
  id: totrans-4610
  prefs: []
  type: TYPE_NORMAL
  zh: 此集合与 [`FromClause.columns`](#sqlalchemy.sql.expression.FromClause.columns "sqlalchemy.sql.expression.FromClause.columns")
    的集合不同，后者不能直接嵌套在另一个 SELECT 语句中；必须先应用子查询，这样就提供了 SQL 所需的必要括号。
- en: For a [`TextualSelect`](#sqlalchemy.sql.expression.TextualSelect "sqlalchemy.sql.expression.TextualSelect")
    construct, the collection contains the [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") objects that were passed to the constructor,
    typically via the [`TextClause.columns()`](sqlelement.html#sqlalchemy.sql.expression.TextClause.columns
    "sqlalchemy.sql.expression.TextClause.columns") method.
  id: totrans-4611
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 [`TextualSelect`](#sqlalchemy.sql.expression.TextualSelect "sqlalchemy.sql.expression.TextualSelect")
    构造，该集合包含通过构造函数传递的 [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") 对象，通常是通过 [`TextClause.columns()`](sqlelement.html#sqlalchemy.sql.expression.TextClause.columns
    "sqlalchemy.sql.expression.TextClause.columns") 方法传递的。
- en: New in version 1.4.
  id: totrans-4612
  prefs: []
  type: TYPE_NORMAL
  zh: 自 1.4 版本新增。
- en: '[PRE911]'
  id: totrans-4613
  prefs: []
  type: TYPE_PRE
  zh: '[PRE911]'
- en: '*inherited from the* [`ClauseElement.self_group()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.self_group
    "sqlalchemy.sql.expression.ClauseElement.self_group") *method of* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
  id: totrans-4614
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ClauseElement.self_group()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.self_group
    "sqlalchemy.sql.expression.ClauseElement.self_group") *方法的* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
- en: Apply a ‘grouping’ to this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  id: totrans-4615
  prefs: []
  type: TYPE_NORMAL
  zh: 对这个 [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") 应用“分组”。
- en: This method is overridden by subclasses to return a “grouping” construct, i.e.
    parenthesis. In particular it’s used by “binary” expressions to provide a grouping
    around themselves when placed into a larger expression, as well as by [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs when placed into the FROM clause
    of another [`select()`](#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select").
    (Note that subqueries should be normally created using the [`Select.alias()`](#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") method, as many platforms require nested
    SELECT statements to be named).
  id: totrans-4616
  prefs: []
  type: TYPE_NORMAL
  zh: 子类覆盖此方法以返回一个“分组”结构，即括号。特别是，当“二元”表达式放置到更大的表达式中时，它们用于在自身周围提供分组，以及当 [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 结构放置到另一个 [`select()`](#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 的 FROM 子句中时。（请注意，通常应使用 [`Select.alias()`](#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") 方法创建子查询，因为许多平台要求嵌套的 SELECT 语句必须具有名称）。
- en: As expressions are composed together, the application of [`self_group()`](#sqlalchemy.sql.expression.TextualSelect.self_group
    "sqlalchemy.sql.expression.TextualSelect.self_group") is automatic - end-user
    code should never need to use this method directly. Note that SQLAlchemy’s clause
    constructs take operator precedence into account - so parenthesis might not be
    needed, for example, in an expression like `x OR (y AND z)` - AND takes precedence
    over OR.
  id: totrans-4617
  prefs: []
  type: TYPE_NORMAL
  zh: 随着表达式的组合，[`self_group()`](#sqlalchemy.sql.expression.TextualSelect.self_group
    "sqlalchemy.sql.expression.TextualSelect.self_group") 的应用是自动的 - 最终用户代码不应该直接使用此方法。请注意，SQLAlchemy
    的子句构造会考虑操作符优先级 - 因此在表达式 `x OR (y AND z)` 中可能不需要括号 - AND 优先于 OR。
- en: The base [`self_group()`](#sqlalchemy.sql.expression.TextualSelect.self_group
    "sqlalchemy.sql.expression.TextualSelect.self_group") method of [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") just returns self.
  id: totrans-4618
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement "sqlalchemy.sql.expression.ClauseElement")
    的基本 [`self_group()`](#sqlalchemy.sql.expression.TextualSelect.self_group "sqlalchemy.sql.expression.TextualSelect.self_group")
    方法只返回自身。'
- en: '[PRE912]'
  id: totrans-4619
  prefs: []
  type: TYPE_PRE
  zh: '[PRE912]'
- en: Return a new selectable with the specified label style.
  id: totrans-4620
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个使用指定标签样式的新可选项。
- en: Implemented by subclasses.
  id: totrans-4621
  prefs: []
  type: TYPE_NORMAL
  zh: 由子类实现。
- en: '[PRE913]'
  id: totrans-4622
  prefs: []
  type: TYPE_PRE
  zh: '[PRE913]'
- en: '*inherited from the* [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") *method of* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
  id: totrans-4623
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") *方法的* [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")'
- en: Return a subquery of this [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase").
  id: totrans-4624
  prefs: []
  type: TYPE_NORMAL
  zh: 返回这个[`SelectBase`](#sqlalchemy.sql.expression.SelectBase "sqlalchemy.sql.expression.SelectBase")的子查询。
- en: A subquery is from a SQL perspective a parenthesized, named construct that can
    be placed in the FROM clause of another SELECT statement.
  id: totrans-4625
  prefs: []
  type: TYPE_NORMAL
  zh: 从SQL角度来看，子查询是一个带有括号的命名结构，可以放置在另一个SELECT语句的FROM子句中。
- en: 'Given a SELECT statement such as:'
  id: totrans-4626
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个SELECT语句，比如：
- en: '[PRE914]'
  id: totrans-4627
  prefs: []
  type: TYPE_PRE
  zh: '[PRE914]'
- en: 'The above statement might look like:'
  id: totrans-4628
  prefs: []
  type: TYPE_NORMAL
  zh: 上述语句可能如下所示：
- en: '[PRE915]'
  id: totrans-4629
  prefs: []
  type: TYPE_PRE
  zh: '[PRE915]'
- en: 'The subquery form by itself renders the same way, however when embedded into
    the FROM clause of another SELECT statement, it becomes a named sub-element:'
  id: totrans-4630
  prefs: []
  type: TYPE_NORMAL
  zh: 子查询本身的形式是相同的，但是当嵌入到另一个SELECT语句的FROM子句中时，它变成了一个命名的子元素：
- en: '[PRE916]'
  id: totrans-4631
  prefs: []
  type: TYPE_PRE
  zh: '[PRE916]'
- en: 'The above renders as:'
  id: totrans-4632
  prefs: []
  type: TYPE_NORMAL
  zh: 上述内容呈现为：
- en: '[PRE917]'
  id: totrans-4633
  prefs: []
  type: TYPE_PRE
  zh: '[PRE917]'
- en: Historically, [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") is equivalent to calling the
    [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias "sqlalchemy.sql.expression.FromClause.alias")
    method on a FROM object; however, as a [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase") object is not directly FROM object, the
    [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery "sqlalchemy.sql.expression.SelectBase.subquery")
    method provides clearer semantics.
  id: totrans-4634
  prefs: []
  type: TYPE_NORMAL
  zh: 从历史上看，[`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") 相当于在FROM对象上调用 [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") 方法；但是，由于 [`SelectBase`](#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase") 对象不是直接的FROM对象，所以 [`SelectBase.subquery()`](#sqlalchemy.sql.expression.SelectBase.subquery
    "sqlalchemy.sql.expression.SelectBase.subquery") 方法提供了更清晰的语义。
- en: New in version 1.4.
  id: totrans-4635
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4中新增。
- en: '[PRE918]'
  id: totrans-4636
  prefs: []
  type: TYPE_PRE
  zh: '[PRE918]'
- en: '*inherited from the* [`ClauseElement.unique_params()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.unique_params
    "sqlalchemy.sql.expression.ClauseElement.unique_params") *method of* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
  id: totrans-4637
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ClauseElement.unique_params()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.unique_params
    "sqlalchemy.sql.expression.ClauseElement.unique_params") *方法的* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
- en: Return a copy with [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") elements replaced.
  id: totrans-4638
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个副本，其中的 [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") 元素被替换。
- en: Same functionality as [`ClauseElement.params()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.params
    "sqlalchemy.sql.expression.ClauseElement.params"), except adds unique=True to
    affected bind parameters so that multiple statements can be used.
  id: totrans-4639
  prefs: []
  type: TYPE_NORMAL
  zh: 与 [`ClauseElement.params()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.params
    "sqlalchemy.sql.expression.ClauseElement.params") 功能相同，只是对受影响的绑定参数添加了 unique=True，以便可以使用多个语句。
- en: '[PRE919]'
  id: totrans-4640
  prefs: []
  type: TYPE_PRE
  zh: '[PRE919]'
- en: Represent a `VALUES` construct that can be used as a FROM element in a statement.
  id: totrans-4641
  prefs: []
  type: TYPE_NORMAL
  zh: 表示可以在语句中作为FROM元素使用的 `VALUES` 结构。
- en: The [`Values`](#sqlalchemy.sql.expression.Values "sqlalchemy.sql.expression.Values")
    object is created from the [`values()`](#sqlalchemy.sql.expression.values "sqlalchemy.sql.expression.values")
    function.
  id: totrans-4642
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Values`](#sqlalchemy.sql.expression.Values "sqlalchemy.sql.expression.Values")
    对象是从 [`values()`](#sqlalchemy.sql.expression.values "sqlalchemy.sql.expression.values")
    函数创建的。'
- en: New in version 1.4.
  id: totrans-4643
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4中新增。
- en: '**Members**'
  id: totrans-4644
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[alias()](#sqlalchemy.sql.expression.Values.alias), [data()](#sqlalchemy.sql.expression.Values.data),
    [lateral()](#sqlalchemy.sql.expression.Values.lateral), [scalar_values()](#sqlalchemy.sql.expression.Values.scalar_values)'
  id: totrans-4645
  prefs: []
  type: TYPE_NORMAL
  zh: '[alias()](#sqlalchemy.sql.expression.Values.alias), [data()](#sqlalchemy.sql.expression.Values.data),
    [lateral()](#sqlalchemy.sql.expression.Values.lateral), [scalar_values()](#sqlalchemy.sql.expression.Values.scalar_values)'
- en: '**Class signature**'
  id: totrans-4646
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.Values`](#sqlalchemy.sql.expression.Values
    "sqlalchemy.sql.expression.Values") (`sqlalchemy.sql.roles.InElementRole`, `sqlalchemy.sql.expression.Generative`,
    `sqlalchemy.sql.expression.LateralFromClause`)
  id: totrans-4647
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.expression.Values`](#sqlalchemy.sql.expression.Values "sqlalchemy.sql.expression.Values")
    (`sqlalchemy.sql.roles.InElementRole`, `sqlalchemy.sql.expression.Generative`,
    `sqlalchemy.sql.expression.LateralFromClause`)。
- en: '[PRE920]'
  id: totrans-4648
  prefs: []
  type: TYPE_PRE
  zh: '[PRE920]'
- en: Return a new [`Values`](#sqlalchemy.sql.expression.Values "sqlalchemy.sql.expression.Values")
    construct that is a copy of this one with the given name.
  id: totrans-4649
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的 [`Values`](#sqlalchemy.sql.expression.Values "sqlalchemy.sql.expression.Values")
    构造，其名称与给定名称相同。
- en: This method is a VALUES-specific specialization of the [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") method.
  id: totrans-4650
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法是 [`FromClause.alias()`](#sqlalchemy.sql.expression.FromClause.alias "sqlalchemy.sql.expression.FromClause.alias")
    方法的 VALUES 特定的专业化。
- en: See also
  id: totrans-4651
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using Aliases](../tutorial/data_select.html#tutorial-using-aliases)'
  id: totrans-4652
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用别名](../tutorial/data_select.html#tutorial-using-aliases)'
- en: '[`alias()`](#sqlalchemy.sql.expression.alias "sqlalchemy.sql.expression.alias")'
  id: totrans-4653
  prefs: []
  type: TYPE_NORMAL
  zh: '[`alias()`](#sqlalchemy.sql.expression.alias "sqlalchemy.sql.expression.alias")'
- en: '[PRE921]'
  id: totrans-4654
  prefs: []
  type: TYPE_PRE
  zh: '[PRE921]'
- en: Return a new [`Values`](#sqlalchemy.sql.expression.Values "sqlalchemy.sql.expression.Values")
    construct, adding the given data to the data list.
  id: totrans-4655
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的 [`Values`](#sqlalchemy.sql.expression.Values "sqlalchemy.sql.expression.Values")
    构造，将给定数据添加到数据列表中。
- en: 'E.g.:'
  id: totrans-4656
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE922]'
  id: totrans-4657
  prefs: []
  type: TYPE_PRE
  zh: '[PRE922]'
- en: 'Parameters:'
  id: totrans-4658
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**values** – a sequence (i.e. list) of tuples that map to the column expressions
    given in the [`Values`](#sqlalchemy.sql.expression.Values "sqlalchemy.sql.expression.Values")
    constructor.'
  id: totrans-4659
  prefs: []
  type: TYPE_NORMAL
  zh: '**values** – 一个序列（即列表），其中的元组与 [`Values`](#sqlalchemy.sql.expression.Values
    "sqlalchemy.sql.expression.Values") 构造中给出的列表达式相对应。'
- en: '[PRE923]'
  id: totrans-4660
  prefs: []
  type: TYPE_PRE
  zh: '[PRE923]'
- en: Return a new [`Values`](#sqlalchemy.sql.expression.Values "sqlalchemy.sql.expression.Values")
    with the lateral flag set, so that it renders as LATERAL.
  id: totrans-4661
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的 [`Values`](#sqlalchemy.sql.expression.Values "sqlalchemy.sql.expression.Values")，并将侧面标志设置为
    LATERAL，以便其渲染为 LATERAL。
- en: See also
  id: totrans-4662
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`lateral()`](#sqlalchemy.sql.expression.lateral "sqlalchemy.sql.expression.lateral")'
  id: totrans-4663
  prefs: []
  type: TYPE_NORMAL
  zh: '[`lateral()`](#sqlalchemy.sql.expression.lateral "sqlalchemy.sql.expression.lateral")'
- en: '[PRE924]'
  id: totrans-4664
  prefs: []
  type: TYPE_PRE
  zh: '[PRE924]'
- en: Returns a scalar `VALUES` construct that can be used as a COLUMN element in
    a statement.
  id: totrans-4665
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个标量 `VALUES` 构造，可用作语句中的 COLUMN 元素。
- en: New in version 2.0.0b4.
  id: totrans-4666
  prefs: []
  type: TYPE_NORMAL
  zh: 新特性版本为 2.0.0b4。
- en: '[PRE925]'
  id: totrans-4667
  prefs: []
  type: TYPE_PRE
  zh: '[PRE925]'
- en: Represent a scalar `VALUES` construct that can be used as a COLUMN element in
    a statement.
  id: totrans-4668
  prefs: []
  type: TYPE_NORMAL
  zh: 表示可用作语句中的 COLUMN 元素的标量 `VALUES` 构造。
- en: The [`ScalarValues`](#sqlalchemy.sql.expression.ScalarValues "sqlalchemy.sql.expression.ScalarValues")
    object is created from the [`Values.scalar_values()`](#sqlalchemy.sql.expression.Values.scalar_values
    "sqlalchemy.sql.expression.Values.scalar_values") method. It’s also automatically
    generated when a [`Values`](#sqlalchemy.sql.expression.Values "sqlalchemy.sql.expression.Values")
    is used in an `IN` or `NOT IN` condition.
  id: totrans-4669
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ScalarValues`](#sqlalchemy.sql.expression.ScalarValues "sqlalchemy.sql.expression.ScalarValues")
    对象是通过 [`Values.scalar_values()`](#sqlalchemy.sql.expression.Values.scalar_values
    "sqlalchemy.sql.expression.Values.scalar_values") 方法创建的。当在 `IN` 或 `NOT IN` 条件中使用
    [`Values`](#sqlalchemy.sql.expression.Values "sqlalchemy.sql.expression.Values")
    时，它也会自动生成。'
- en: New in version 2.0.0b4.
  id: totrans-4670
  prefs: []
  type: TYPE_NORMAL
  zh: 新特性版本为 2.0.0b4。
- en: '**Class signature**'
  id: totrans-4671
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.ScalarValues`](#sqlalchemy.sql.expression.ScalarValues
    "sqlalchemy.sql.expression.ScalarValues") (`sqlalchemy.sql.roles.InElementRole`,
    `sqlalchemy.sql.expression.GroupedElement`, [`sqlalchemy.sql.expression.ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"))
  id: totrans-4672
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.expression.ScalarValues`](#sqlalchemy.sql.expression.ScalarValues
    "sqlalchemy.sql.expression.ScalarValues") (`sqlalchemy.sql.roles.InElementRole`,
    `sqlalchemy.sql.expression.GroupedElement`, [`sqlalchemy.sql.expression.ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"))。
- en: Label Style Constants
  id: totrans-4673
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标签样式常量
- en: Constants used with the [`GenerativeSelect.set_label_style()`](#sqlalchemy.sql.expression.GenerativeSelect.set_label_style
    "sqlalchemy.sql.expression.GenerativeSelect.set_label_style") method.
  id: totrans-4674
  prefs: []
  type: TYPE_NORMAL
  zh: 与 [`GenerativeSelect.set_label_style()`](#sqlalchemy.sql.expression.GenerativeSelect.set_label_style
    "sqlalchemy.sql.expression.GenerativeSelect.set_label_style") 方法一起使用的常量。
- en: '| Object Name | Description |'
  id: totrans-4675
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-4676
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [SelectLabelStyle](#sqlalchemy.sql.expression.SelectLabelStyle) | Label style
    constants that may be passed to [`Select.set_label_style()`](#sqlalchemy.sql.expression.Select.set_label_style
    "sqlalchemy.sql.expression.Select.set_label_style"). |'
  id: totrans-4677
  prefs: []
  type: TYPE_TB
  zh: '| [SelectLabelStyle](#sqlalchemy.sql.expression.SelectLabelStyle) | 可以传递给 [`Select.set_label_style()`](#sqlalchemy.sql.expression.Select.set_label_style
    "sqlalchemy.sql.expression.Select.set_label_style") 的标签样式常量。 |'
- en: '[PRE926]'
  id: totrans-4678
  prefs: []
  type: TYPE_PRE
  zh: '[PRE926]'
- en: Label style constants that may be passed to [`Select.set_label_style()`](#sqlalchemy.sql.expression.Select.set_label_style
    "sqlalchemy.sql.expression.Select.set_label_style").
  id: totrans-4679
  prefs: []
  type: TYPE_NORMAL
  zh: 可传递给[`Select.set_label_style()`](#sqlalchemy.sql.expression.Select.set_label_style
    "sqlalchemy.sql.expression.Select.set_label_style")的标签样式常量。
- en: '**Members**'
  id: totrans-4680
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[LABEL_STYLE_DEFAULT](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_DEFAULT),
    [LABEL_STYLE_DISAMBIGUATE_ONLY](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_DISAMBIGUATE_ONLY),
    [LABEL_STYLE_NONE](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_NONE),
    [LABEL_STYLE_TABLENAME_PLUS_COL](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL)'
  id: totrans-4681
  prefs: []
  type: TYPE_NORMAL
  zh: '[LABEL_STYLE_DEFAULT](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_DEFAULT)，[LABEL_STYLE_DISAMBIGUATE_ONLY](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_DISAMBIGUATE_ONLY)，[LABEL_STYLE_NONE](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_NONE)，[LABEL_STYLE_TABLENAME_PLUS_COL](#sqlalchemy.sql.expression.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL)'
- en: '**Class signature**'
  id: totrans-4682
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.SelectLabelStyle`](#sqlalchemy.sql.expression.SelectLabelStyle
    "sqlalchemy.sql.expression.SelectLabelStyle") (`enum.Enum`)
  id: totrans-4683
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.expression.SelectLabelStyle`](#sqlalchemy.sql.expression.SelectLabelStyle
    "sqlalchemy.sql.expression.SelectLabelStyle") (`enum.Enum`)
- en: '[PRE927]'
  id: totrans-4684
  prefs: []
  type: TYPE_PRE
  zh: '[PRE927]'
- en: The default label style, refers to `LABEL_STYLE_DISAMBIGUATE_ONLY`.
  id: totrans-4685
  prefs: []
  type: TYPE_NORMAL
  zh: 默认标签样式，指的是`LABEL_STYLE_DISAMBIGUATE_ONLY`。
- en: New in version 1.4.
  id: totrans-4686
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4 版本中的新功能。
- en: '[PRE928]'
  id: totrans-4687
  prefs: []
  type: TYPE_PRE
  zh: '[PRE928]'
- en: Label style indicating that columns with a name that conflicts with an existing
    name should be labeled with a semi-anonymizing label when generating the columns
    clause of a SELECT statement.
  id: totrans-4688
  prefs: []
  type: TYPE_NORMAL
  zh: 表示当列名与现有名称冲突时，应在生成SELECT语句的columns子句时使用半匿名标签对列进行标记的标签样式。
- en: 'Below, most column names are left unaffected, except for the second occurrence
    of the name `columna`, which is labeled using the label `columna_1` to disambiguate
    it from that of `tablea.columna`:'
  id: totrans-4689
  prefs: []
  type: TYPE_NORMAL
  zh: 下面，大多数列名不受影响，除了名称为`columna`的第二个出现，它使用标签`columna_1`来区分它和`tablea.columna`的列名：
- en: '[PRE929]'
  id: totrans-4690
  prefs: []
  type: TYPE_PRE
  zh: '[PRE929]'
- en: Used with the [`GenerativeSelect.set_label_style()`](#sqlalchemy.sql.expression.GenerativeSelect.set_label_style
    "sqlalchemy.sql.expression.GenerativeSelect.set_label_style") method, `LABEL_STYLE_DISAMBIGUATE_ONLY`
    is the default labeling style for all SELECT statements outside of [1.x style](../glossary.html#term-1.x-style)
    ORM queries.
  id: totrans-4691
  prefs: []
  type: TYPE_NORMAL
  zh: 与[`GenerativeSelect.set_label_style()`](#sqlalchemy.sql.expression.GenerativeSelect.set_label_style
    "sqlalchemy.sql.expression.GenerativeSelect.set_label_style")方法一起使用，`LABEL_STYLE_DISAMBIGUATE_ONLY`是除了[1.x风格](../glossary.html#term-1.x-style)ORM查询之外的所有SELECT语句的默认标签样式。
- en: New in version 1.4.
  id: totrans-4692
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4 版本中的新功能。
- en: '[PRE930]'
  id: totrans-4693
  prefs: []
  type: TYPE_PRE
  zh: '[PRE930]'
- en: Label style indicating no automatic labeling should be applied to the columns
    clause of a SELECT statement.
  id: totrans-4694
  prefs: []
  type: TYPE_NORMAL
  zh: 表示不应将自动标签应用于SELECT语句的columns子句的标签样式。
- en: 'Below, the columns named `columna` are both rendered as is, meaning that the
    name `columna` can only refer to the first occurrence of this name within a result
    set, as well as if the statement were used as a subquery:'
  id: totrans-4695
  prefs: []
  type: TYPE_NORMAL
  zh: 下面，列名为`columna`的列都按原样呈现，这意味着名称`columna`只能引用结果集中的第一个出现的这个名称，以及如果语句被用作子查询时：
- en: '[PRE931]'
  id: totrans-4696
  prefs: []
  type: TYPE_PRE
  zh: '[PRE931]'
- en: Used with the [`Select.set_label_style()`](#sqlalchemy.sql.expression.Select.set_label_style
    "sqlalchemy.sql.expression.Select.set_label_style") method.
  id: totrans-4697
  prefs: []
  type: TYPE_NORMAL
  zh: 与[`Select.set_label_style()`](#sqlalchemy.sql.expression.Select.set_label_style
    "sqlalchemy.sql.expression.Select.set_label_style")方法一起使用。
- en: New in version 1.4.
  id: totrans-4698
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4 版本中的新功能。
- en: '[PRE932]'
  id: totrans-4699
  prefs: []
  type: TYPE_PRE
  zh: '[PRE932]'
- en: Label style indicating all columns should be labeled as `<tablename>_<columnname>`
    when generating the columns clause of a SELECT statement, to disambiguate same-named
    columns referenced from different tables, aliases, or subqueries.
  id: totrans-4700
  prefs: []
  type: TYPE_NORMAL
  zh: 表示在生成SELECT语句的columns子句时，所有列都应标记为`<tablename>_<columnname>`，以消除从不同表、别名或子查询引用的同名列的歧义。
- en: 'Below, all column names are given a label so that the two same-named columns
    `columna` are disambiguated as `table1_columna` and `table2_columna`:'
  id: totrans-4701
  prefs: []
  type: TYPE_NORMAL
  zh: 下面，所有列名都被赋予标签，以便两个同名列`columna`被区分为`table1_columna`和`table2_columna`：
- en: '[PRE933]'
  id: totrans-4702
  prefs: []
  type: TYPE_PRE
  zh: '[PRE933]'
- en: Used with the [`GenerativeSelect.set_label_style()`](#sqlalchemy.sql.expression.GenerativeSelect.set_label_style
    "sqlalchemy.sql.expression.GenerativeSelect.set_label_style") method. Equivalent
    to the legacy method `Select.apply_labels()`; `LABEL_STYLE_TABLENAME_PLUS_COL`
    is SQLAlchemy’s legacy auto-labeling style. `LABEL_STYLE_DISAMBIGUATE_ONLY` provides
    a less intrusive approach to disambiguation of same-named column expressions.
  id: totrans-4703
  prefs: []
  type: TYPE_NORMAL
  zh: 与[`GenerativeSelect.set_label_style()`](#sqlalchemy.sql.expression.GenerativeSelect.set_label_style
    "sqlalchemy.sql.expression.GenerativeSelect.set_label_style")方法一起使用。等效于传统方法`Select.apply_labels()`；`LABEL_STYLE_TABLENAME_PLUS_COL`是SQLAlchemy的传统自动标签样式。`LABEL_STYLE_DISAMBIGUATE_ONLY`提供了一种较少侵入性的方法来消除同名列表达式的歧义。
- en: New in version 1.4.
  id: totrans-4704
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4 版本中的新功能。
- en: See also
  id: totrans-4705
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Select.set_label_style()`](#sqlalchemy.sql.expression.Select.set_label_style
    "sqlalchemy.sql.expression.Select.set_label_style")'
  id: totrans-4706
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.set_label_style()`](#sqlalchemy.sql.expression.Select.set_label_style
    "sqlalchemy.sql.expression.Select.set_label_style")'
- en: '[`Select.get_label_style()`](#sqlalchemy.sql.expression.Select.get_label_style
    "sqlalchemy.sql.expression.Select.get_label_style")'
  id: totrans-4707
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.get_label_style()`](#sqlalchemy.sql.expression.Select.get_label_style
    "sqlalchemy.sql.expression.Select.get_label_style")  '
