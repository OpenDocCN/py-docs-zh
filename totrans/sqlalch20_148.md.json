["```py\nquery.join(SomeClass, SomeClass.id == ParentClass.some_id)\n```", "```py\nquery.join(MyClass.somerelation)\nquery.join(\"somerelation\")\nquery.join(MyTarget)\n# ... etc\n```", "```py\nTable(\n    \"mytable\",\n    metadata,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"name\", String(50), nullable=False),\n    Index(\"idx_name\", \"name\"),\n)\n```", "```py\nclass HasNameMixin(object):\n    name = Column(\"name\", String(50), nullable=False)\n\n    @declared_attr\n    def __table_args__(cls):\n        return (Index(\"name\"), {})\n\nclass User(HasNameMixin, Base):\n    __tablename__ = \"user\"\n    id = Column(\"id\", Integer, primary_key=True)\n```", "```py\nfrom sqlalchemy.sql import table, column, select, func\n\nempsalary = table(\"empsalary\", column(\"depname\"), column(\"empno\"), column(\"salary\"))\n\ns = select(\n    [\n        empsalary,\n        func.avg(empsalary.c.salary)\n        .over(partition_by=empsalary.c.depname)\n        .label(\"avg\"),\n    ]\n)\n\nprint(s)\n```", "```py\nSELECT  empsalary.depname,  empsalary.empno,  empsalary.salary,\navg(empsalary.salary)  OVER  (PARTITION  BY  empsalary.depname)  AS  avg\nFROM  empsalary\n```", "```py\nquery.from_self(func.count(literal_column(\"1\"))).scalar()\n```", "```py\nSELECT  count(1)  AS  count_1  FROM  (\n  SELECT  user.id  AS  user_id,  user.name  AS  user_name  from  user\n)  AS  anon_1\n```", "```py\nfrom sqlalchemy import func\n\nsession.query(func.count(MyClass.id)).scalar()\n```", "```py\nfrom sqlalchemy import func, literal_column\n\nsession.query(func.count(literal_column(\"*\"))).select_from(MyClass).scalar()\n```", "```py modifier now will chain itself for a longer path without the need to emit individual ```", "```py\nsession.query(A).options(contains_eager(A.b), contains_eager(A.b, B.c))\n```", "```py\nsession.query(A).options(contains_eager(A.b, B.c))\n```", "```py\nfrom sqlalchemy import select, func\nfrom sqlalchemy.orm import mapper\n\nclass Subset(object):\n    pass\n\nselectable = select([\"x\", \"y\", \"z\"]).select_from(func.some_db_function()).alias()\nmapper(Subset, selectable, primary_key=[selectable.c.x])\n```", "```py\nTable(\n    \"mytable\",\n    metadata,\n    # ....\n    Column(\"pickled_data\", PickleType(mutable=True)),\n)\n```", "```py\nqa = session.query(Foo.spam)\nqb = session.query(Bar.spam)\n\nqu = qa.union(qb)\n```", "```py\nclass Parent(Base):\n    __tablename__ = \"parent\"\n    id = Column(Integer, primary_key=True)\n\nclass Child(Parent):\n    __tablename__ = \"child\"\n    id = Column(Integer, ForeignKey(\"parent.id\"), primary_key=True)\n```", "```py\nclass Child(Parent):\n    __tablename__ = \"child\"\n    id = Column(Integer, ForeignKey(\"parent.id\"), primary_key=True)\n    some_related = relationship(\n        \"SomeRelated\", primaryjoin=\"Child.id==SomeRelated.child_id\"\n    )\n\nclass SomeRelated(Base):\n    __tablename__ = \"some_related\"\n    id = Column(Integer, primary_key=True)\n    child_id = Column(Integer, ForeignKey(\"child.id\"))\n```", "```py\nsession.query(Parent).filter(Child.id > 7)\n```", "```py\nSELECT  parent.id  AS  parent_id\nFROM  parent\nWHERE  parent.id  >  :id_1\n```", "```py\nSELECT  parent.id  AS  parent_id\nFROM  parent,  child\nWHERE  child.id  >  :id_1\n```", "```py\nprint(s.query(Parent).with_polymorphic([Child]).filter(Child.id > 7))\n```", "```py\nSELECT  parent.id  AS  parent_id,  child.id  AS  child_id\nFROM  parent  LEFT  OUTER  JOIN  child  ON  parent.id  =  child.id\nWHERE  child.id  >  :id_1\n```", "```py\nfoobar = foo.join(bar, foo.c.id == bar.c.foo_id)\nmapper(FooBar, foobar)\n```", "```py\nfoobar = foo.join(bar, foo.c.id == bar.c.foo_id)\nmapper(FooBar, foobar, properties={\"id\": [foo.c.id, bar.c.id]})\n```", "```py\nmapper(SomeClass, sometable, polymorphic_on=some_lookup_table.c.id)\n```", "```py\nfrom sqlalchemy import exc\n```", "```py\nselect([mytable], distinct=\"ALL\", prefixes=[\"HIGH_PRIORITY\"])\n```", "```py\nselect([mytable]).prefix_with(\"HIGH_PRIORITY\", \"ALL\")\n```", "```py\n# old way, deprecated since 0.5\nsession.query(Houses).join([Houses.rooms, Room.closets])\nsession.query(Houses).options(eagerload_all([Houses.rooms, Room.closets]))\n```", "```py\n# current way, in place since 0.5\nsession.query(Houses).join(Houses.rooms, Room.closets)\nsession.query(Houses).options(eagerload_all(Houses.rooms, Room.closets))\n```", "```py\nquery.join(SomeClass, SomeClass.id == ParentClass.some_id)\n```", "```py\nquery.join(MyClass.somerelation)\nquery.join(\"somerelation\")\nquery.join(MyTarget)\n# ... etc\n```", "```py\nTable(\n    \"mytable\",\n    metadata,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"name\", String(50), nullable=False),\n    Index(\"idx_name\", \"name\"),\n)\n```", "```py\nclass HasNameMixin(object):\n    name = Column(\"name\", String(50), nullable=False)\n\n    @declared_attr\n    def __table_args__(cls):\n        return (Index(\"name\"), {})\n\nclass User(HasNameMixin, Base):\n    __tablename__ = \"user\"\n    id = Column(\"id\", Integer, primary_key=True)\n```", "```py\nfrom sqlalchemy.sql import table, column, select, func\n\nempsalary = table(\"empsalary\", column(\"depname\"), column(\"empno\"), column(\"salary\"))\n\ns = select(\n    [\n        empsalary,\n        func.avg(empsalary.c.salary)\n        .over(partition_by=empsalary.c.depname)\n        .label(\"avg\"),\n    ]\n)\n\nprint(s)\n```", "```py\nSELECT  empsalary.depname,  empsalary.empno,  empsalary.salary,\navg(empsalary.salary)  OVER  (PARTITION  BY  empsalary.depname)  AS  avg\nFROM  empsalary\n```", "```py\nquery.join(SomeClass, SomeClass.id == ParentClass.some_id)\n```", "```py\nquery.join(MyClass.somerelation)\nquery.join(\"somerelation\")\nquery.join(MyTarget)\n# ... etc\n```", "```py\nTable(\n    \"mytable\",\n    metadata,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"name\", String(50), nullable=False),\n    Index(\"idx_name\", \"name\"),\n)\n```", "```py\nclass HasNameMixin(object):\n    name = Column(\"name\", String(50), nullable=False)\n\n    @declared_attr\n    def __table_args__(cls):\n        return (Index(\"name\"), {})\n\nclass User(HasNameMixin, Base):\n    __tablename__ = \"user\"\n    id = Column(\"id\", Integer, primary_key=True)\n```", "```py\nfrom sqlalchemy.sql import table, column, select, func\n\nempsalary = table(\"empsalary\", column(\"depname\"), column(\"empno\"), column(\"salary\"))\n\ns = select(\n    [\n        empsalary,\n        func.avg(empsalary.c.salary)\n        .over(partition_by=empsalary.c.depname)\n        .label(\"avg\"),\n    ]\n)\n\nprint(s)\n```", "```py\nSELECT  empsalary.depname,  empsalary.empno,  empsalary.salary,\navg(empsalary.salary)  OVER  (PARTITION  BY  empsalary.depname)  AS  avg\nFROM  empsalary\n```", "```py\nquery.from_self(func.count(literal_column(\"1\"))).scalar()\n```", "```py\nSELECT  count(1)  AS  count_1  FROM  (\n  SELECT  user.id  AS  user_id,  user.name  AS  user_name  from  user\n)  AS  anon_1\n```", "```py\nfrom sqlalchemy import func\n\nsession.query(func.count(MyClass.id)).scalar()\n```", "```py\nfrom sqlalchemy import func, literal_column\n\nsession.query(func.count(literal_column(\"*\"))).select_from(MyClass).scalar()\n```", "```py modifier now will chain itself for a longer path without the need to emit individual ```", "```py\nsession.query(A).options(contains_eager(A.b), contains_eager(A.b, B.c))\n```", "```py\nsession.query(A).options(contains_eager(A.b, B.c))\n```", "```py\nfrom sqlalchemy import select, func\nfrom sqlalchemy.orm import mapper\n\nclass Subset(object):\n    pass\n\nselectable = select([\"x\", \"y\", \"z\"]).select_from(func.some_db_function()).alias()\nmapper(Subset, selectable, primary_key=[selectable.c.x])\n```", "```py\nquery.from_self(func.count(literal_column(\"1\"))).scalar()\n```", "```py\nSELECT  count(1)  AS  count_1  FROM  (\n  SELECT  user.id  AS  user_id,  user.name  AS  user_name  from  user\n)  AS  anon_1\n```", "```py\nfrom sqlalchemy import func\n\nsession.query(func.count(MyClass.id)).scalar()\n```", "```py\nfrom sqlalchemy import func, literal_column\n\nsession.query(func.count(literal_column(\"*\"))).select_from(MyClass).scalar()\n```", "```py\nfrom sqlalchemy import func\n\nsession.query(func.count(MyClass.id)).scalar()\n```", "```py\nfrom sqlalchemy import func, literal_column\n\nsession.query(func.count(literal_column(\"*\"))).select_from(MyClass).scalar()\n```", "```py modifier now will chain itself for a longer path without the need to emit individual ```", "```py\nsession.query(A).options(contains_eager(A.b), contains_eager(A.b, B.c))\n```", "```py\nsession.query(A).options(contains_eager(A.b, B.c))\n```", "```py\nfrom sqlalchemy import select, func\nfrom sqlalchemy.orm import mapper\n\nclass Subset(object):\n    pass\n\nselectable = select([\"x\", \"y\", \"z\"]).select_from(func.some_db_function()).alias()\nmapper(Subset, selectable, primary_key=[selectable.c.x])\n```", "```py\nTable(\n    \"mytable\",\n    metadata,\n    # ....\n    Column(\"pickled_data\", PickleType(mutable=True)),\n)\n```", "```py\nqa = session.query(Foo.spam)\nqb = session.query(Bar.spam)\n\nqu = qa.union(qb)\n```", "```py\nclass Parent(Base):\n    __tablename__ = \"parent\"\n    id = Column(Integer, primary_key=True)\n\nclass Child(Parent):\n    __tablename__ = \"child\"\n    id = Column(Integer, ForeignKey(\"parent.id\"), primary_key=True)\n```", "```py\nclass Child(Parent):\n    __tablename__ = \"child\"\n    id = Column(Integer, ForeignKey(\"parent.id\"), primary_key=True)\n    some_related = relationship(\n        \"SomeRelated\", primaryjoin=\"Child.id==SomeRelated.child_id\"\n    )\n\nclass SomeRelated(Base):\n    __tablename__ = \"some_related\"\n    id = Column(Integer, primary_key=True)\n    child_id = Column(Integer, ForeignKey(\"child.id\"))\n```", "```py\nsession.query(Parent).filter(Child.id > 7)\n```", "```py\nSELECT  parent.id  AS  parent_id\nFROM  parent\nWHERE  parent.id  >  :id_1\n```", "```py\nSELECT  parent.id  AS  parent_id\nFROM  parent,  child\nWHERE  child.id  >  :id_1\n```", "```py\nprint(s.query(Parent).with_polymorphic([Child]).filter(Child.id > 7))\n```", "```py\nSELECT  parent.id  AS  parent_id,  child.id  AS  child_id\nFROM  parent  LEFT  OUTER  JOIN  child  ON  parent.id  =  child.id\nWHERE  child.id  >  :id_1\n```", "```py\nfoobar = foo.join(bar, foo.c.id == bar.c.foo_id)\nmapper(FooBar, foobar)\n```", "```py\nfoobar = foo.join(bar, foo.c.id == bar.c.foo_id)\nmapper(FooBar, foobar, properties={\"id\": [foo.c.id, bar.c.id]})\n```", "```py\nmapper(SomeClass, sometable, polymorphic_on=some_lookup_table.c.id)\n```", "```py\nfrom sqlalchemy import exc\n```", "```py\nTable(\n    \"mytable\",\n    metadata,\n    # ....\n    Column(\"pickled_data\", PickleType(mutable=True)),\n)\n```", "```py\nqa = session.query(Foo.spam)\nqb = session.query(Bar.spam)\n\nqu = qa.union(qb)\n```", "```py\nclass Parent(Base):\n    __tablename__ = \"parent\"\n    id = Column(Integer, primary_key=True)\n\nclass Child(Parent):\n    __tablename__ = \"child\"\n    id = Column(Integer, ForeignKey(\"parent.id\"), primary_key=True)\n```", "```py\nclass Child(Parent):\n    __tablename__ = \"child\"\n    id = Column(Integer, ForeignKey(\"parent.id\"), primary_key=True)\n    some_related = relationship(\n        \"SomeRelated\", primaryjoin=\"Child.id==SomeRelated.child_id\"\n    )\n\nclass SomeRelated(Base):\n    __tablename__ = \"some_related\"\n    id = Column(Integer, primary_key=True)\n    child_id = Column(Integer, ForeignKey(\"child.id\"))\n```", "```py\nsession.query(Parent).filter(Child.id > 7)\n```", "```py\nSELECT  parent.id  AS  parent_id\nFROM  parent\nWHERE  parent.id  >  :id_1\n```", "```py\nSELECT  parent.id  AS  parent_id\nFROM  parent,  child\nWHERE  child.id  >  :id_1\n```", "```py\nprint(s.query(Parent).with_polymorphic([Child]).filter(Child.id > 7))\n```", "```py\nSELECT  parent.id  AS  parent_id,  child.id  AS  child_id\nFROM  parent  LEFT  OUTER  JOIN  child  ON  parent.id  =  child.id\nWHERE  child.id  >  :id_1\n```", "```py\nfoobar = foo.join(bar, foo.c.id == bar.c.foo_id)\nmapper(FooBar, foobar)\n```", "```py\nfoobar = foo.join(bar, foo.c.id == bar.c.foo_id)\nmapper(FooBar, foobar, properties={\"id\": [foo.c.id, bar.c.id]})\n```", "```py\nmapper(SomeClass, sometable, polymorphic_on=some_lookup_table.c.id)\n```", "```py\nfrom sqlalchemy import exc\n```", "```py\nselect([mytable], distinct=\"ALL\", prefixes=[\"HIGH_PRIORITY\"])\n```", "```py\nselect([mytable]).prefix_with(\"HIGH_PRIORITY\", \"ALL\")\n```", "```py\nselect([mytable], distinct=\"ALL\", prefixes=[\"HIGH_PRIORITY\"])\n```", "```py\nselect([mytable]).prefix_with(\"HIGH_PRIORITY\", \"ALL\")\n```", "```py\n# old way, deprecated since 0.5\nsession.query(Houses).join([Houses.rooms, Room.closets])\nsession.query(Houses).options(eagerload_all([Houses.rooms, Room.closets]))\n```", "```py\n# current way, in place since 0.5\nsession.query(Houses).join(Houses.rooms, Room.closets)\nsession.query(Houses).options(eagerload_all(Houses.rooms, Room.closets))\n```", "```py\n# old way, deprecated since 0.5\nsession.query(Houses).join([Houses.rooms, Room.closets])\nsession.query(Houses).options(eagerload_all([Houses.rooms, Room.closets]))\n```", "```py\n# current way, in place since 0.5\nsession.query(Houses).join(Houses.rooms, Room.closets)\nsession.query(Houses).options(eagerload_all(Houses.rooms, Room.closets))\n```"]