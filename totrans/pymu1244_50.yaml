- en: Operator Algebra for Geometry Objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pymupdf.readthedocs.io/en/latest/algebra.html](https://pymupdf.readthedocs.io/en/latest/algebra.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Instances of classes [Point](point.html#point), [IRect](irect.html#irect), [Rect](rect.html#rect),
    [Quad](quad.html#quad) and [Matrix](matrix.html#matrix) are collectively also
    called “geometry” objects.
  prefs: []
  type: TYPE_NORMAL
- en: They all are special cases of Python sequences, see [Using Python Sequences
    as Arguments in PyMuPDF](app3.html#sequencetypes) for more background.
  prefs: []
  type: TYPE_NORMAL
- en: We have defined operators for these classes that allow dealing with them (almost)
    like ordinary numbers in terms of addition, subtraction, multiplication, division,
    and some others.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter is a synopsis of what is possible.
  prefs: []
  type: TYPE_NORMAL
- en: General Remarks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Operators can be either **binary** (i.e. involving two objects) or **unary**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The resulting type of **binary** operations is either a **new object of the
    left operand’s class** or a bool.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The result of **unary** operations is either a **new object** of the same class,
    a bool or a float.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The binary operators *+, -, *, /* are defined for all classes. They *roughly*
    do what you would expect – **except, that the second operand …**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: may always be a number which then performs the operation on every component
    of the first one,
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: may always be a numeric sequence of the same length (2, 4 or 6) – we call such
    sequences [`point_like`](glossary.html#point_like "point_like"), [`rect_like`](glossary.html#rect_like
    "rect_like"), [`quad_like`](glossary.html#quad_like "quad_like") or [`matrix_like`](glossary.html#matrix_like
    "matrix_like"), respectively.
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Rectangles support additional binary operations: **intersection** (operator
    *“&”*), **union** (operator *“|”*) and **containment** checking.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Binary operators fully support in-place operations, so expressions like `a /=
    b` are valid if b is numeric or “a_like”.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unary Operations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Oper. | Result |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| bool(OBJ) | is false exactly if all components of OBJ are zero |'
  prefs: []
  type: TYPE_TB
- en: '| abs(OBJ) | the rectangle area – equal to norm(OBJ) for the other types |'
  prefs: []
  type: TYPE_TB
- en: '| norm(OBJ) | square root of the component squares (Euclidean norm) |'
  prefs: []
  type: TYPE_TB
- en: '| +OBJ | new copy of OBJ |'
  prefs: []
  type: TYPE_TB
- en: '| -OBJ | new copy of OBJ with negated components |'
  prefs: []
  type: TYPE_TB
- en: '| ~m | inverse of matrix “m”, or the null matrix if not invertible |'
  prefs: []
  type: TYPE_TB
- en: Binary Operations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For every geometry object “a” and every number “b”, the operations “a ° b”
    and “a °= b” are always defined for the operators *+, -, *, /*. The respective
    operation is simply executed for each component of “a”. If the **second operand
    is not a number**, then the following is defined:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Oper. | Result |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| a+b, a-b | component-wise execution, “b” must be “a-like”. |'
  prefs: []
  type: TYPE_TB
- en: '| a*m, a/m | “a” can be a point, rectangle or matrix, but “m” must be [`matrix_like`](glossary.html#matrix_like
    "matrix_like"). *“a/m”* is treated as *“a*~m”* (see note below for non-invertible
    matrices). If “a” is a **point** or a **rectangle**, then *“a.transform(m)”* is
    executed. If “a” is a matrix, then matrix concatenation takes place. |'
  prefs: []
  type: TYPE_TB
- en: '| a&b | **intersection rectangle:** “a” must be a rectangle and “b” [`rect_like`](glossary.html#rect_like
    "rect_like"). Delivers the **largest rectangle** contained in both operands. |'
  prefs: []
  type: TYPE_TB
- en: '| a&#124;b | **union rectangle:** “a” must be a rectangle, and “b” may be [`point_like`](glossary.html#point_like
    "point_like") or [`rect_like`](glossary.html#rect_like "rect_like"). Delivers
    the **smallest rectangle** containing both operands. |'
  prefs: []
  type: TYPE_TB
- en: '| b in a | if “b” is a number, then `b in tuple(a)` is returned. If “b” is
    [`point_like`](glossary.html#point_like "point_like"), [`rect_like`](glossary.html#rect_like
    "rect_like") or [`quad_like`](glossary.html#quad_like "quad_like"), then “a” must
    be a rectangle, and `a.contains(b)` is returned. |'
  prefs: []
  type: TYPE_TB
- en: '| a == b | *True* if *bool(a-b)* is *False* (“b” may be “a-like”). |'
  prefs: []
  type: TYPE_TB
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'Please note an important difference to usual arithmetic:'
  prefs: []
  type: TYPE_NORMAL
- en: Matrix multiplication is **not commutative**, i.e. in general we have `m*n !=
    n*m` for two matrices. Also, there are non-zero matrices which have no inverse,
    for example `m = Matrix(1, 0, 1, 0, 1, 0)`. If you try to divide by any of these,
    you will receive a `ZeroDivisionError` exception using operator *“/”*, e.g. for
    the expression `pymupdf.Identity / m`. But if you formulate `pymupdf.Identity
    * ~m`, the result will be `pymupdf.Matrix()` (the null matrix).
  prefs: []
  type: TYPE_NORMAL
- en: Admittedly, this represents an inconsistency, and we are considering to remove
    it. For the time being, you can choose to avoid an exception and check whether
    ~m is the null matrix, or accept a potential *ZeroDivisionError* by using `pymupdf.Identity
    / m`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'With these conventions, all the usual algebra rules apply. For example, arbitrarily
    using brackets **(among objects of the same class!)** is possible: if r1, r2 are
    rectangles and m1, m2 are matrices, you can do this `(r1 + r2) * m1 * m2`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For all objects of the same class, `a + b + c == (a + b) + c == a + (b + c)`
    is true.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For matrices in addition the following is true: `(m1 + m2) * m3 == m1 * m3
    + m2 * m3` (distributivity property).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**But the sequence of applying matrices is important:** If r is a rectangle
    and m1, m2 are matrices, then – **caution!:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`r * m1 * m2 == (r * m1) * m2 != r * (m1 * m2)`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Some Examples
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Manipulation with numbers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For the usual arithmetic operations, numbers are always allowed as second operand.
    In addition, you can formulate `"x in OBJ"`, where x is a number. It is implemented
    as `"x in tuple(OBJ)"`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The following will create the upper left quarter of a document page rectangle:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The following will deliver the **middle point of a line** that connects two
    points **p1** and **p2**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Manipulation with “like” Objects
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The second operand of a binary operation can always be “like” the left operand.
    “Like” in this context means “a sequence of numbers of the same length”. With
    the above examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'To shift a rectangle for 5 pixels to the right, do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Points, rectangles and matrices can be *transformed* with matrices. In PyMuPDF,
    we treat this like a **“multiplication”** (or resp. **“division”**), where the
    second operand may be “like” a matrix. Division in this context means “multiplication
    with the inverted matrix”:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'As a specialty, rectangles support additional binary operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '**intersection** – the common area of rectangle-likes, operator *“&”*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**inclusion** – enlarge to include a point-like or rect-like, operator *“|”*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**containment** check – whether a point-like or rect-like is inside'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is an example for creating the smallest rectangle enclosing given points:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Do you have any feedback on this page?
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: This software is provided AS-IS with no warranty, either express or implied.
    This software is distributed under license and may not be copied, modified or
    distributed except as expressly authorized under the terms of that license. Refer
    to licensing information at [artifex.com](https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link)
    or contact Artifex Software Inc., 39 Mesa Street, Suite 108A, San Francisco CA
    94129, United States for further information.
  prefs: []
  type: TYPE_NORMAL
- en: This documentation covers all versions up to 1.24.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[![Discord logo](../Images/66cbb5081103a580193aa66c87b90d9a.png)](https://discord.gg/TSpYGBW4eq)'
  prefs: []
  type: TYPE_NORMAL
- en: General Remarks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Operators can be either **binary** (i.e. involving two objects) or **unary**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The resulting type of **binary** operations is either a **new object of the
    left operand’s class** or a bool.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The result of **unary** operations is either a **new object** of the same class,
    a bool or a float.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The binary operators *+, -, *, /* are defined for all classes. They *roughly*
    do what you would expect – **except, that the second operand …**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: may always be a number which then performs the operation on every component
    of the first one,
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: may always be a numeric sequence of the same length (2, 4 or 6) – we call such
    sequences [`point_like`](glossary.html#point_like "point_like"), [`rect_like`](glossary.html#rect_like
    "rect_like"), [`quad_like`](glossary.html#quad_like "quad_like") or [`matrix_like`](glossary.html#matrix_like
    "matrix_like"), respectively.
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Rectangles support additional binary operations: **intersection** (operator
    *“&”*), **union** (operator *“|”*) and **containment** checking.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Binary operators fully support in-place operations, so expressions like `a /=
    b` are valid if b is numeric or “a_like”.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unary Operations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Oper. | Result |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| bool(OBJ) | is false exactly if all components of OBJ are zero |'
  prefs: []
  type: TYPE_TB
- en: '| abs(OBJ) | the rectangle area – equal to norm(OBJ) for the other types |'
  prefs: []
  type: TYPE_TB
- en: '| norm(OBJ) | square root of the component squares (Euclidean norm) |'
  prefs: []
  type: TYPE_TB
- en: '| +OBJ | new copy of OBJ |'
  prefs: []
  type: TYPE_TB
- en: '| -OBJ | new copy of OBJ with negated components |'
  prefs: []
  type: TYPE_TB
- en: '| ~m | inverse of matrix “m”, or the null matrix if not invertible |'
  prefs: []
  type: TYPE_TB
- en: Binary Operations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For every geometry object “a” and every number “b”, the operations “a ° b”
    and “a °= b” are always defined for the operators *+, -, *, /*. The respective
    operation is simply executed for each component of “a”. If the **second operand
    is not a number**, then the following is defined:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Oper. | Result |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| a+b, a-b | component-wise execution, “b” must be “a-like”. |'
  prefs: []
  type: TYPE_TB
- en: '| a*m, a/m | “a” can be a point, rectangle or matrix, but “m” must be [`matrix_like`](glossary.html#matrix_like
    "matrix_like"). *“a/m”* is treated as *“a*~m”* (see note below for non-invertible
    matrices). If “a” is a **point** or a **rectangle**, then *“a.transform(m)”* is
    executed. If “a” is a matrix, then matrix concatenation takes place. |'
  prefs: []
  type: TYPE_TB
- en: '| a&b | **intersection rectangle:** “a” must be a rectangle and “b” [`rect_like`](glossary.html#rect_like
    "rect_like"). Delivers the **largest rectangle** contained in both operands. |'
  prefs: []
  type: TYPE_TB
- en: '| a&#124;b | **union rectangle:** “a” must be a rectangle, and “b” may be [`point_like`](glossary.html#point_like
    "point_like") or [`rect_like`](glossary.html#rect_like "rect_like"). Delivers
    the **smallest rectangle** containing both operands. |'
  prefs: []
  type: TYPE_TB
- en: '| b in a | if “b” is a number, then `b in tuple(a)` is returned. If “b” is
    [`point_like`](glossary.html#point_like "point_like"), [`rect_like`](glossary.html#rect_like
    "rect_like") or [`quad_like`](glossary.html#quad_like "quad_like"), then “a” must
    be a rectangle, and `a.contains(b)` is returned. |'
  prefs: []
  type: TYPE_TB
- en: '| a == b | *True* if *bool(a-b)* is *False* (“b” may be “a-like”). |'
  prefs: []
  type: TYPE_TB
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'Please note an important difference to usual arithmetic:'
  prefs: []
  type: TYPE_NORMAL
- en: Matrix multiplication is **not commutative**, i.e. in general we have `m*n !=
    n*m` for two matrices. Also, there are non-zero matrices which have no inverse,
    for example `m = Matrix(1, 0, 1, 0, 1, 0)`. If you try to divide by any of these,
    you will receive a `ZeroDivisionError` exception using operator *“/”*, e.g. for
    the expression `pymupdf.Identity / m`. But if you formulate `pymupdf.Identity
    * ~m`, the result will be `pymupdf.Matrix()` (the null matrix).
  prefs: []
  type: TYPE_NORMAL
- en: Admittedly, this represents an inconsistency, and we are considering to remove
    it. For the time being, you can choose to avoid an exception and check whether
    ~m is the null matrix, or accept a potential *ZeroDivisionError* by using `pymupdf.Identity
    / m`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'With these conventions, all the usual algebra rules apply. For example, arbitrarily
    using brackets **(among objects of the same class!)** is possible: if r1, r2 are
    rectangles and m1, m2 are matrices, you can do this `(r1 + r2) * m1 * m2`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For all objects of the same class, `a + b + c == (a + b) + c == a + (b + c)`
    is true.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For matrices in addition the following is true: `(m1 + m2) * m3 == m1 * m3
    + m2 * m3` (distributivity property).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**But the sequence of applying matrices is important:** If r is a rectangle
    and m1, m2 are matrices, then – **caution!:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`r * m1 * m2 == (r * m1) * m2 != r * (m1 * m2)`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Some Examples
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Manipulation with numbers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For the usual arithmetic operations, numbers are always allowed as second operand.
    In addition, you can formulate `"x in OBJ"`, where x is a number. It is implemented
    as `"x in tuple(OBJ)"`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The following will create the upper left quarter of a document page rectangle:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The following will deliver the **middle point of a line** that connects two
    points **p1** and **p2**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Manipulation with “like” Objects
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The second operand of a binary operation can always be “like” the left operand.
    “Like” in this context means “a sequence of numbers of the same length”. With
    the above examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'To shift a rectangle for 5 pixels to the right, do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Points, rectangles and matrices can be *transformed* with matrices. In PyMuPDF,
    we treat this like a **“multiplication”** (or resp. **“division”**), where the
    second operand may be “like” a matrix. Division in this context means “multiplication
    with the inverted matrix”:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'As a specialty, rectangles support additional binary operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '**intersection** – the common area of rectangle-likes, operator *“&”*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**inclusion** – enlarge to include a point-like or rect-like, operator *“|”*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**containment** check – whether a point-like or rect-like is inside'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is an example for creating the smallest rectangle enclosing given points:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Do you have any feedback on this page?
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: This software is provided AS-IS with no warranty, either express or implied.
    This software is distributed under license and may not be copied, modified or
    distributed except as expressly authorized under the terms of that license. Refer
    to licensing information at [artifex.com](https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link)
    or contact Artifex Software Inc., 39 Mesa Street, Suite 108A, San Francisco CA
    94129, United States for further information.
  prefs: []
  type: TYPE_NORMAL
- en: This documentation covers all versions up to 1.24.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[![Discord logo](../Images/66cbb5081103a580193aa66c87b90d9a.png)](https://discord.gg/TSpYGBW4eq)'
  prefs: []
  type: TYPE_NORMAL
- en: Manipulation with numbers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For the usual arithmetic operations, numbers are always allowed as second operand.
    In addition, you can formulate `"x in OBJ"`, where x is a number. It is implemented
    as `"x in tuple(OBJ)"`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The following will create the upper left quarter of a document page rectangle:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The following will deliver the **middle point of a line** that connects two
    points **p1** and **p2**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Manipulation with “like” Objects
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The second operand of a binary operation can always be “like” the left operand.
    “Like” in this context means “a sequence of numbers of the same length”. With
    the above examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'To shift a rectangle for 5 pixels to the right, do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Points, rectangles and matrices can be *transformed* with matrices. In PyMuPDF,
    we treat this like a **“multiplication”** (or resp. **“division”**), where the
    second operand may be “like” a matrix. Division in this context means “multiplication
    with the inverted matrix”:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'As a specialty, rectangles support additional binary operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '**intersection** – the common area of rectangle-likes, operator *“&”*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**inclusion** – enlarge to include a point-like or rect-like, operator *“|”*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**containment** check – whether a point-like or rect-like is inside'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is an example for creating the smallest rectangle enclosing given points:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Do you have any feedback on this page?
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: This software is provided AS-IS with no warranty, either express or implied.
    This software is distributed under license and may not be copied, modified or
    distributed except as expressly authorized under the terms of that license. Refer
    to licensing information at [artifex.com](https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link)
    or contact Artifex Software Inc., 39 Mesa Street, Suite 108A, San Francisco CA
    94129, United States for further information.
  prefs: []
  type: TYPE_NORMAL
- en: This documentation covers all versions up to 1.24.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[![Discord logo](../Images/66cbb5081103a580193aa66c87b90d9a.png)](https://discord.gg/TSpYGBW4eq)'
  prefs: []
  type: TYPE_NORMAL
