- en: Class Mapping API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sqlalchemy.org/en/20/orm/mapping_api.html](https://docs.sqlalchemy.org/en/20/orm/mapping_api.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [add_mapped_attribute](#sqlalchemy.orm.add_mapped_attribute)(target, key,
    attr) | Add a new mapped attribute to an ORM mapped class. |'
  prefs: []
  type: TYPE_TB
- en: '| [as_declarative](#sqlalchemy.orm.as_declarative)(**kw) | Class decorator
    which will adapt a given class into a [`declarative_base()`](#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base"). |'
  prefs: []
  type: TYPE_TB
- en: '| [class_mapper](#sqlalchemy.orm.class_mapper)(class_[, configure]) | Given
    a class, return the primary [`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    associated with the key. |'
  prefs: []
  type: TYPE_TB
- en: '| [clear_mappers](#sqlalchemy.orm.clear_mappers)() | Remove all mappers from
    all classes. |'
  prefs: []
  type: TYPE_TB
- en: '| [column_property](#sqlalchemy.orm.column_property)(column, *additional_columns,
    [group, deferred, raiseload, comparator_factory, init, repr, default, default_factory,
    compare, kw_only, active_history, expire_on_flush, info, doc]) | Provide a column-level
    property for use with a mapping. |'
  prefs: []
  type: TYPE_TB
- en: '| [configure_mappers](#sqlalchemy.orm.configure_mappers)() | Initialize the
    inter-mapper relationships of all mappers that have been constructed thus far
    across all [`registry`](#sqlalchemy.orm.registry "sqlalchemy.orm.registry") collections.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [declarative_base](#sqlalchemy.orm.declarative_base)(*, [metadata, mapper,
    cls, name, class_registry, type_annotation_map, constructor, metaclass]) | Construct
    a base class for declarative class definitions. |'
  prefs: []
  type: TYPE_TB
- en: '| [declarative_mixin](#sqlalchemy.orm.declarative_mixin)(cls) | Mark a class
    as providing the feature of “declarative mixin”. |'
  prefs: []
  type: TYPE_TB
- en: '| [DeclarativeBase](#sqlalchemy.orm.DeclarativeBase) | Base class used for
    declarative class definitions. |'
  prefs: []
  type: TYPE_TB
- en: '| [DeclarativeBaseNoMeta](#sqlalchemy.orm.DeclarativeBaseNoMeta) | Same as
    [`DeclarativeBase`](#sqlalchemy.orm.DeclarativeBase "sqlalchemy.orm.DeclarativeBase"),
    but does not use a metaclass to intercept new attributes. |'
  prefs: []
  type: TYPE_TB
- en: '| [declared_attr](#sqlalchemy.orm.declared_attr) | Mark a class-level method
    as representing the definition of a mapped property or Declarative directive.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [has_inherited_table](#sqlalchemy.orm.has_inherited_table)(cls) | Given a
    class, return True if any of the classes it inherits from has a mapped table,
    otherwise return False. |'
  prefs: []
  type: TYPE_TB
- en: '| [identity_key](#sqlalchemy.orm.util.identity_key)([class_, ident], *, [instance,
    row, identity_token]) | Generate “identity key” tuples, as are used as keys in
    the [`Session.identity_map`](session_api.html#sqlalchemy.orm.Session.identity_map
    "sqlalchemy.orm.Session.identity_map") dictionary. |'
  prefs: []
  type: TYPE_TB
- en: '| [mapped_column](#sqlalchemy.orm.mapped_column)([__name_pos, __type_pos],
    *args, [init, repr, default, default_factory, compare, kw_only, nullable, primary_key,
    deferred, deferred_group, deferred_raiseload, use_existing_column, name, type_,
    autoincrement, doc, key, index, unique, info, onupdate, insert_default, server_default,
    server_onupdate, active_history, quote, system, comment, sort_order], **kw) |
    declare a new ORM-mapped [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") construct for use within [Declarative Table](declarative_tables.html#orm-declarative-table)
    configuration. |'
  prefs: []
  type: TYPE_TB
- en: '| [MappedAsDataclass](#sqlalchemy.orm.MappedAsDataclass) | Mixin class to indicate
    when mapping this class, also convert it to be a dataclass. |'
  prefs: []
  type: TYPE_TB
- en: '| [MappedClassProtocol](#sqlalchemy.orm.MappedClassProtocol) | A protocol representing
    a SQLAlchemy mapped class. |'
  prefs: []
  type: TYPE_TB
- en: '| [Mapper](#sqlalchemy.orm.Mapper) | Defines an association between a Python
    class and a database table or other relational structure, so that ORM operations
    against the class may proceed. |'
  prefs: []
  type: TYPE_TB
- en: '| [object_mapper](#sqlalchemy.orm.object_mapper)(instance) | Given an object,
    return the primary Mapper associated with the object instance. |'
  prefs: []
  type: TYPE_TB
- en: '| [orm_insert_sentinel](#sqlalchemy.orm.orm_insert_sentinel)([name, type_],
    *, [default, omit_from_statements]) | Provides a surrogate [`mapped_column()`](#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") that generates a so-called [sentinel](../glossary.html#term-sentinel)
    column, allowing efficient bulk inserts with deterministic RETURNING sorting for
    tables that don’t otherwise have qualifying primary key configurations. |'
  prefs: []
  type: TYPE_TB
- en: '| [polymorphic_union](#sqlalchemy.orm.polymorphic_union)(table_map, typecolname[,
    aliasname, cast_nulls]) | Create a `UNION` statement used by a polymorphic mapper.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [reconstructor](#sqlalchemy.orm.reconstructor)(fn) | Decorate a method as
    the ‘reconstructor’ hook. |'
  prefs: []
  type: TYPE_TB
- en: '| [registry](#sqlalchemy.orm.registry) | Generalized registry for mapping classes.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [synonym_for](#sqlalchemy.orm.synonym_for)(name[, map_column]) | Decorator
    that produces an [`synonym()`](mapped_attributes.html#sqlalchemy.orm.synonym "sqlalchemy.orm.synonym")
    attribute in conjunction with a Python descriptor. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Generalized registry for mapping classes.
  prefs: []
  type: TYPE_NORMAL
- en: The [`registry`](#sqlalchemy.orm.registry "sqlalchemy.orm.registry") serves
    as the basis for maintaining a collection of mappings, and provides configurational
    hooks used to map classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The three general kinds of mappings supported are Declarative Base, Declarative
    Decorator, and Imperative Mapping. All of these mapping styles may be used interchangeably:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`registry.generate_base()`](#sqlalchemy.orm.registry.generate_base "sqlalchemy.orm.registry.generate_base")
    returns a new declarative base class, and is the underlying implementation of
    the [`declarative_base()`](#sqlalchemy.orm.declarative_base "sqlalchemy.orm.declarative_base")
    function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`registry.mapped()`](#sqlalchemy.orm.registry.mapped "sqlalchemy.orm.registry.mapped")
    provides a class decorator that will apply declarative mapping to a class without
    the use of a declarative base class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`registry.map_imperatively()`](#sqlalchemy.orm.registry.map_imperatively "sqlalchemy.orm.registry.map_imperatively")
    will produce a [`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper") for
    a class without scanning the class for declarative class attributes. This method
    suits the use case historically provided by the `sqlalchemy.orm.mapper()` classical
    mapping function, which is removed as of SQLAlchemy 2.0.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[__init__()](#sqlalchemy.orm.registry.__init__), [as_declarative_base()](#sqlalchemy.orm.registry.as_declarative_base),
    [configure()](#sqlalchemy.orm.registry.configure), [dispose()](#sqlalchemy.orm.registry.dispose),
    [generate_base()](#sqlalchemy.orm.registry.generate_base), [map_declaratively()](#sqlalchemy.orm.registry.map_declaratively),
    [map_imperatively()](#sqlalchemy.orm.registry.map_imperatively), [mapped()](#sqlalchemy.orm.registry.mapped),
    [mapped_as_dataclass()](#sqlalchemy.orm.registry.mapped_as_dataclass), [mappers](#sqlalchemy.orm.registry.mappers),
    [update_type_annotation_map()](#sqlalchemy.orm.registry.update_type_annotation_map)'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[ORM Mapped Class Overview](mapping_styles.html) - overview of class mapping
    styles.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Construct a new [`registry`](#sqlalchemy.orm.registry "sqlalchemy.orm.registry")
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`metadata` – An optional [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") instance. All [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects generated using declarative table mapping will
    make use of this [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") collection. If this argument is left at its default
    of `None`, a blank [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") collection is created.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`constructor` – Specify the implementation for the `__init__` function on a
    mapped class that has no `__init__` of its own. Defaults to an implementation
    that assigns **kwargs for declared fields and relationships to an instance. If
    `None` is supplied, no __init__ will be provided and construction will fall back
    to cls.__init__ by way of the normal Python semantics.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`class_registry` – optional dictionary that will serve as the registry of class
    names-> mapped classes when string names are used to identify classes inside of
    [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    and others. Allows two or more declarative base classes to share the same registry
    of class names for simplified inter-base relationships.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`type_annotation_map` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: optional dictionary of Python types to SQLAlchemy [`TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") classes or instances. The provided dict will update
    the default type mapping. This is used exclusively by the [`MappedColumn`](internals.html#sqlalchemy.orm.MappedColumn
    "sqlalchemy.orm.MappedColumn") construct to produce column types based on annotations
    within the [`Mapped`](internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")
    type.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Customizing the Type Map](declarative_tables.html#orm-declarative-mapped-column-type-map)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Class decorator which will invoke [`registry.generate_base()`](#sqlalchemy.orm.registry.generate_base
    "sqlalchemy.orm.registry.generate_base") for a given base class.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: All keyword arguments passed to [`registry.as_declarative_base()`](#sqlalchemy.orm.registry.as_declarative_base
    "sqlalchemy.orm.registry.as_declarative_base") are passed along to [`registry.generate_base()`](#sqlalchemy.orm.registry.generate_base
    "sqlalchemy.orm.registry.generate_base").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Configure all as-yet unconfigured mappers in this [`registry`](#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry").
  prefs: []
  type: TYPE_NORMAL
- en: The configure step is used to reconcile and initialize the [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") linkages between mapped classes, as well as to
    invoke configuration events such as the [`MapperEvents.before_configured()`](events.html#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured") and [`MapperEvents.after_configured()`](events.html#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured"), which may be used by ORM extensions
    or user-defined extension hooks.
  prefs: []
  type: TYPE_NORMAL
- en: If one or more mappers in this registry contain [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") constructs that refer to mapped classes in other
    registries, this registry is said to be *dependent* on those registries. In order
    to configure those dependent registries automatically, the [`configure.cascade`](#sqlalchemy.orm.registry.configure.params.cascade
    "sqlalchemy.orm.registry.configure") flag should be set to `True`. Otherwise,
    if they are not configured, an exception will be raised. The rationale behind
    this behavior is to allow an application to programmatically invoke configuration
    of registries while controlling whether or not the process implicitly reaches
    other registries.
  prefs: []
  type: TYPE_NORMAL
- en: As an alternative to invoking [`registry.configure()`](#sqlalchemy.orm.registry.configure
    "sqlalchemy.orm.registry.configure"), the ORM function [`configure_mappers()`](#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") function may be used to ensure configuration
    is complete for all [`registry`](#sqlalchemy.orm.registry "sqlalchemy.orm.registry")
    objects in memory. This is generally simpler to use and also predates the usage
    of [`registry`](#sqlalchemy.orm.registry "sqlalchemy.orm.registry") objects overall.
    However, this function will impact all mappings throughout the running Python
    process and may be more memory/time consuming for an application that has many
    registries in use for different purposes that may not be needed immediately.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`configure_mappers()`](#sqlalchemy.orm.configure_mappers "sqlalchemy.orm.configure_mappers")'
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.0b2.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Dispose of all mappers in this [`registry`](#sqlalchemy.orm.registry "sqlalchemy.orm.registry").
  prefs: []
  type: TYPE_NORMAL
- en: After invocation, all the classes that were mapped within this registry will
    no longer have class instrumentation associated with them. This method is the
    per-[`registry`](#sqlalchemy.orm.registry "sqlalchemy.orm.registry") analogue
    to the application-wide [`clear_mappers()`](#sqlalchemy.orm.clear_mappers "sqlalchemy.orm.clear_mappers")
    function.
  prefs: []
  type: TYPE_NORMAL
- en: If this registry contains mappers that are dependencies of other registries,
    typically via [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") links, then those registries must be disposed as
    well. When such registries exist in relation to this one, their [`registry.dispose()`](#sqlalchemy.orm.registry.dispose
    "sqlalchemy.orm.registry.dispose") method will also be called, if the [`dispose.cascade`](#sqlalchemy.orm.registry.dispose.params.cascade
    "sqlalchemy.orm.registry.dispose") flag is set to `True`; otherwise, an error
    is raised if those registries were not already disposed.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.0b2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`clear_mappers()`](#sqlalchemy.orm.clear_mappers "sqlalchemy.orm.clear_mappers")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Generate a declarative base class.
  prefs: []
  type: TYPE_NORMAL
- en: Classes that inherit from the returned class object will be automatically mapped
    using declarative mapping.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The above dynamically generated class is equivalent to the non-dynamic example
    below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Changed in version 2.0: Note that the [`registry.generate_base()`](#sqlalchemy.orm.registry.generate_base
    "sqlalchemy.orm.registry.generate_base") method is superseded by the new [`DeclarativeBase`](#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase") class, which generates a new “base” class using
    subclassing, rather than return value of a function. This allows an approach that
    is compatible with [**PEP 484**](https://peps.python.org/pep-0484/) typing tools.'
  prefs: []
  type: TYPE_NORMAL
- en: The [`registry.generate_base()`](#sqlalchemy.orm.registry.generate_base "sqlalchemy.orm.registry.generate_base")
    method provides the implementation for the [`declarative_base()`](#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base") function, which creates the [`registry`](#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") and base class all at once.
  prefs: []
  type: TYPE_NORMAL
- en: See the section [Declarative Mapping](mapping_styles.html#orm-declarative-mapping)
    for background and examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapper` – An optional callable, defaults to [`Mapper`](#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper"). This function is used to generate new [`Mapper`](#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") objects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cls` – Defaults to `object`. A type to use as the base for the generated declarative
    base class. May be a class or tuple of classes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name` – Defaults to `Base`. The display name for the generated class. Customizing
    this is not required, but can improve clarity in tracebacks and debugging.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`metaclass` – Defaults to `DeclarativeMeta`. A metaclass or __metaclass__ compatible
    callable to use as the meta type of the generated declarative base class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Declarative Mapping](mapping_styles.html#orm-declarative-mapping)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`declarative_base()`](#sqlalchemy.orm.declarative_base "sqlalchemy.orm.declarative_base")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Map a class declaratively.
  prefs: []
  type: TYPE_NORMAL
- en: In this form of mapping, the class is scanned for mapping information, including
    for columns to be associated with a table, and/or an actual table object.
  prefs: []
  type: TYPE_NORMAL
- en: Returns the [`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper") object.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This function is more conveniently invoked indirectly via either the [`registry.mapped()`](#sqlalchemy.orm.registry.mapped
    "sqlalchemy.orm.registry.mapped") class decorator or by subclassing a declarative
    metaclass generated from [`registry.generate_base()`](#sqlalchemy.orm.registry.generate_base
    "sqlalchemy.orm.registry.generate_base").
  prefs: []
  type: TYPE_NORMAL
- en: See the section [Declarative Mapping](mapping_styles.html#orm-declarative-mapping)
    for complete details and examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**cls** – class to be mapped.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a [`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper") object.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Declarative Mapping](mapping_styles.html#orm-declarative-mapping)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`registry.mapped()`](#sqlalchemy.orm.registry.mapped "sqlalchemy.orm.registry.mapped")
    - more common decorator interface to this function.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`registry.map_imperatively()`](#sqlalchemy.orm.registry.map_imperatively "sqlalchemy.orm.registry.map_imperatively")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Map a class imperatively.
  prefs: []
  type: TYPE_NORMAL
- en: In this form of mapping, the class is not scanned for any mapping information.
    Instead, all mapping constructs are passed as arguments.
  prefs: []
  type: TYPE_NORMAL
- en: This method is intended to be fully equivalent to the now-removed SQLAlchemy
    `mapper()` function, except that it’s in terms of a particular registry.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: See the section [Imperative Mapping](mapping_styles.html#orm-imperative-mapping)
    for complete background and usage examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`class_` – The class to be mapped. Corresponds to the [`Mapper.class_`](#sqlalchemy.orm.Mapper.params.class_
    "sqlalchemy.orm.Mapper") parameter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`local_table` – the [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") or other [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") object that is the subject of the mapping.
    Corresponds to the [`Mapper.local_table`](#sqlalchemy.orm.Mapper.params.local_table
    "sqlalchemy.orm.Mapper") parameter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**kw` – all other keyword arguments are passed to the [`Mapper`](#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") constructor directly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Imperative Mapping](mapping_styles.html#orm-imperative-mapping)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Declarative Mapping](mapping_styles.html#orm-declarative-mapping)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Class decorator that will apply the Declarative mapping process to a given class.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: See the section [Declarative Mapping](mapping_styles.html#orm-declarative-mapping)
    for complete details and examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**cls** – class to be mapped.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the class that was passed.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Declarative Mapping](mapping_styles.html#orm-declarative-mapping)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`registry.generate_base()`](#sqlalchemy.orm.registry.generate_base "sqlalchemy.orm.registry.generate_base")
    - generates a base class that will apply Declarative mapping to subclasses automatically
    using a Python metaclass.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`registry.mapped_as_dataclass()`](#sqlalchemy.orm.registry.mapped_as_dataclass
    "sqlalchemy.orm.registry.mapped_as_dataclass")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Class decorator that will apply the Declarative mapping process to a given class,
    and additionally convert the class to be a Python dataclass.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Declarative Dataclass Mapping](dataclasses.html#orm-declarative-native-dataclasses)
    - complete background on SQLAlchemy native dataclass mapping'
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: read only collection of all [`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    objects.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: update the [`registry.type_annotation_map`](#sqlalchemy.orm.registry.params.type_annotation_map
    "sqlalchemy.orm.registry") with new values.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Add a new mapped attribute to an ORM mapped class.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: This may be used for ORM mappings that aren’t using a declarative metaclass
    that intercepts attribute set operations.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Provide a column-level property for use with a mapping.
  prefs: []
  type: TYPE_NORMAL
- en: With Declarative mappings, [`column_property()`](#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property") is used to map read-only SQL expressions to
    a mapped class.
  prefs: []
  type: TYPE_NORMAL
- en: When using Imperative mappings, [`column_property()`](#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property") also takes on the role of mapping table columns
    with additional features. When using fully Declarative mappings, the [`mapped_column()`](#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") construct should be used for this purpose.
  prefs: []
  type: TYPE_NORMAL
- en: With Declarative Dataclass mappings, [`column_property()`](#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property") is considered to be **read only**, and will
    not be included in the Dataclass `__init__()` constructor.
  prefs: []
  type: TYPE_NORMAL
- en: The [`column_property()`](#sqlalchemy.orm.column_property "sqlalchemy.orm.column_property")
    function returns an instance of [`ColumnProperty`](internals.html#sqlalchemy.orm.ColumnProperty
    "sqlalchemy.orm.ColumnProperty").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Using column_property](mapped_sql_expr.html#mapper-column-property-sql-expressions)
    - general use of [`column_property()`](#sqlalchemy.orm.column_property "sqlalchemy.orm.column_property")
    to map SQL expressions'
  prefs: []
  type: TYPE_NORMAL
- en: '[Applying Load, Persistence and Mapping Options for Imperative Table Columns](declarative_tables.html#orm-imperative-table-column-options)
    - usage of [`column_property()`](#sqlalchemy.orm.column_property "sqlalchemy.orm.column_property")
    with Imperative Table mappings to apply additional options to a plain [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") object'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*cols` – list of Column objects to be mapped.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`active_history=False` – Used only for Imperative Table mappings, or legacy-style
    Declarative mappings (i.e. which have not been upgraded to [`mapped_column()`](#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column")), for column-based attributes that are expected
    to be writeable; use [`mapped_column()`](#sqlalchemy.orm.mapped_column "sqlalchemy.orm.mapped_column")
    with [`mapped_column.active_history`](#sqlalchemy.orm.mapped_column.params.active_history
    "sqlalchemy.orm.mapped_column") for Declarative mappings. See that parameter for
    functional details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`comparator_factory` – a class which extends [`Comparator`](internals.html#sqlalchemy.orm.ColumnProperty.Comparator
    "sqlalchemy.orm.ColumnProperty.Comparator") which provides custom SQL clause generation
    for comparison operations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`group` – a group name for this property when marked as deferred.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`deferred` – when True, the column property is “deferred”, meaning that it
    does not load immediately, and is instead loaded when the attribute is first accessed
    on an instance. See also [`deferred()`](queryguide/columns.html#sqlalchemy.orm.deferred
    "sqlalchemy.orm.deferred").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`doc` – optional string that will be applied as the doc on the class-bound
    descriptor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`expire_on_flush=True` – Disable expiry on flush. A column_property() which
    refers to a SQL expression (and not a single table-bound column) is considered
    to be a “read only” property; populating it has no effect on the state of data,
    and it can only return database state. For this reason a column_property()’s value
    is expired whenever the parent object is involved in a flush, that is, has any
    kind of “dirty” state within a flush. Setting this parameter to `False` will have
    the effect of leaving any existing value present after the flush proceeds. Note
    that the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    with default expiration settings still expires all attributes after a [`Session.commit()`](session_api.html#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit") call, however.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`info` – Optional data dictionary which will be populated into the [`MapperProperty.info`](internals.html#sqlalchemy.orm.MapperProperty.info
    "sqlalchemy.orm.MapperProperty.info") attribute of this object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`raiseload` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: if True, indicates the column should raise an error when undeferred, rather
    than loading the value. This can be altered at query time by using the [`deferred()`](queryguide/columns.html#sqlalchemy.orm.deferred
    "sqlalchemy.orm.deferred") option with raiseload=False.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Using raiseload to prevent deferred column loads](queryguide/columns.html#orm-queryguide-deferred-raiseload)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`init` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.4: The [`column_property.init`](#sqlalchemy.orm.column_property.params.init
    "sqlalchemy.orm.column_property") parameter is deprecated for [`column_property()`](#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property"). This parameter applies to a writeable-attribute
    in a Declarative Dataclasses configuration only, and [`column_property()`](#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property") is treated as a read-only attribute in this
    context.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`default` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.4: The [`column_property.default`](#sqlalchemy.orm.column_property.params.default
    "sqlalchemy.orm.column_property") parameter is deprecated for [`column_property()`](#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property"). This parameter applies to a writeable-attribute
    in a Declarative Dataclasses configuration only, and [`column_property()`](#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property") is treated as a read-only attribute in this
    context.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`default_factory` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.4: The [`column_property.default_factory`](#sqlalchemy.orm.column_property.params.default_factory
    "sqlalchemy.orm.column_property") parameter is deprecated for [`column_property()`](#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property"). This parameter applies to a writeable-attribute
    in a Declarative Dataclasses configuration only, and [`column_property()`](#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property") is treated as a read-only attribute in this
    context.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`kw_only` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.4: The [`column_property.kw_only`](#sqlalchemy.orm.column_property.params.kw_only
    "sqlalchemy.orm.column_property") parameter is deprecated for [`column_property()`](#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property"). This parameter applies to a writeable-attribute
    in a Declarative Dataclasses configuration only, and [`column_property()`](#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property") is treated as a read-only attribute in this
    context.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Construct a base class for declarative class definitions.
  prefs: []
  type: TYPE_NORMAL
- en: The new base class will be given a metaclass that produces appropriate [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects and makes the appropriate [`Mapper`](#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") calls based on the information provided declaratively
    in the class and any subclasses of the class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 2.0: Note that the [`declarative_base()`](#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base") function is superseded by the new [`DeclarativeBase`](#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase") class, which generates a new “base” class using
    subclassing, rather than return value of a function. This allows an approach that
    is compatible with [**PEP 484**](https://peps.python.org/pep-0484/) typing tools.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`declarative_base()`](#sqlalchemy.orm.declarative_base "sqlalchemy.orm.declarative_base")
    function is a shorthand version of using the [`registry.generate_base()`](#sqlalchemy.orm.registry.generate_base
    "sqlalchemy.orm.registry.generate_base") method. That is, the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Is equivalent to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: See the docstring for [`registry`](#sqlalchemy.orm.registry "sqlalchemy.orm.registry")
    and [`registry.generate_base()`](#sqlalchemy.orm.registry.generate_base "sqlalchemy.orm.registry.generate_base")
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The [`declarative_base()`](#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base") function is now a specialization of the more
    generic [`registry`](#sqlalchemy.orm.registry "sqlalchemy.orm.registry") class.
    The function also moves to the `sqlalchemy.orm` package from the `declarative.ext`
    package.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`metadata` – An optional [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") instance. All [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects implicitly declared by subclasses of the base
    will share this MetaData. A MetaData instance will be created if none is provided.
    The [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    instance will be available via the `metadata` attribute of the generated declarative
    base class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mapper` – An optional callable, defaults to [`Mapper`](#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper"). Will be used to map subclasses to their Tables.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cls` – Defaults to `object`. A type to use as the base for the generated declarative
    base class. May be a class or tuple of classes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name` – Defaults to `Base`. The display name for the generated class. Customizing
    this is not required, but can improve clarity in tracebacks and debugging.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`constructor` – Specify the implementation for the `__init__` function on a
    mapped class that has no `__init__` of its own. Defaults to an implementation
    that assigns **kwargs for declared fields and relationships to an instance. If
    `None` is supplied, no __init__ will be provided and construction will fall back
    to cls.__init__ by way of the normal Python semantics.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`class_registry` – optional dictionary that will serve as the registry of class
    names-> mapped classes when string names are used to identify classes inside of
    [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    and others. Allows two or more declarative base classes to share the same registry
    of class names for simplified inter-base relationships.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`type_annotation_map` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: optional dictionary of Python types to SQLAlchemy [`TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") classes or instances. This is used exclusively
    by the [`MappedColumn`](internals.html#sqlalchemy.orm.MappedColumn "sqlalchemy.orm.MappedColumn")
    construct to produce column types based on annotations within the [`Mapped`](internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") type.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Customizing the Type Map](declarative_tables.html#orm-declarative-mapped-column-type-map)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`metaclass` – Defaults to `DeclarativeMeta`. A metaclass or __metaclass__ compatible
    callable to use as the meta type of the generated declarative base class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`registry`](#sqlalchemy.orm.registry "sqlalchemy.orm.registry")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Mark a class as providing the feature of “declarative mixin”.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The [`declarative_mixin()`](#sqlalchemy.orm.declarative_mixin "sqlalchemy.orm.declarative_mixin")
    decorator currently does not modify the given class in any way; it’s current purpose
    is strictly to assist the [Mypy plugin](extensions/mypy.html) in being able to
    identify SQLAlchemy declarative mixin classes when no other context is present.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.6.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Composing Mapped Hierarchies with Mixins](declarative_mixins.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Using @declared_attr and Declarative Mixins](extensions/mypy.html#mypy-declarative-mixins)
    - in the [Mypy plugin documentation](extensions/mypy.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Class decorator which will adapt a given class into a [`declarative_base()`](#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base").
  prefs: []
  type: TYPE_NORMAL
- en: This function makes use of the [`registry.as_declarative_base()`](#sqlalchemy.orm.registry.as_declarative_base
    "sqlalchemy.orm.registry.as_declarative_base") method, by first creating a [`registry`](#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") automatically and then invoking the decorator.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`registry.as_declarative_base()`](#sqlalchemy.orm.registry.as_declarative_base
    "sqlalchemy.orm.registry.as_declarative_base")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: declare a new ORM-mapped [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") construct for use within [Declarative Table](declarative_tables.html#orm-declarative-table)
    configuration.
  prefs: []
  type: TYPE_NORMAL
- en: The [`mapped_column()`](#sqlalchemy.orm.mapped_column "sqlalchemy.orm.mapped_column")
    function provides an ORM-aware and Python-typing-compatible construct which is
    used with [declarative](mapping_styles.html#orm-declarative-mapping) mappings
    to indicate an attribute that’s mapped to a Core [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") object. It provides the equivalent feature as mapping
    an attribute to a [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    object directly when using Declarative, specifically when using [Declarative Table](declarative_tables.html#orm-declarative-table)
    configuration.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[`mapped_column()`](#sqlalchemy.orm.mapped_column "sqlalchemy.orm.mapped_column")
    is normally used with explicit typing along with the [`Mapped`](internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") annotation type, where it can derive the SQL type and
    nullability for the column based on what’s present within the [`Mapped`](internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") annotation. It also may be used without annotations as
    a drop-in replacement for how [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") is used in Declarative mappings in SQLAlchemy 1.x
    style.'
  prefs: []
  type: TYPE_NORMAL
- en: For usage examples of [`mapped_column()`](#sqlalchemy.orm.mapped_column "sqlalchemy.orm.mapped_column"),
    see the documentation at [Declarative Table with mapped_column()](declarative_tables.html#orm-declarative-table).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Declarative Table with mapped_column()](declarative_tables.html#orm-declarative-table)
    - complete documentation'
  prefs: []
  type: TYPE_NORMAL
- en: '[ORM Declarative Models](../changelog/whatsnew_20.html#whatsnew-20-orm-declarative-typing)
    - migration notes for Declarative mappings using 1.x style mappings'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`__name` – String name to give to the [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"). This is an optional, positional only argument that
    if present must be the first positional argument passed. If omitted, the attribute
    name to which the [`mapped_column()`](#sqlalchemy.orm.mapped_column "sqlalchemy.orm.mapped_column")
    is mapped will be used as the SQL column name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`__type` – [`TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") type or instance which will indicate the datatype
    to be associated with the [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"). This is an optional, positional-only argument that
    if present must immediately follow the `__name` parameter if present also, or
    otherwise be the first positional parameter. If omitted, the ultimate type for
    the column may be derived either from the annotated type, or if a [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") is present, from the datatype of the referenced
    column.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`*args` – Additional positional arguments include constructs such as [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey"), [`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint"), and [`Identity`](../core/defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity"), which are passed through to the constructed [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nullable` – Optional bool, whether the column should be “NULL” or “NOT NULL”.
    If omitted, the nullability is derived from the type annotation based on whether
    or not `typing.Optional` is present. `nullable` defaults to `True` otherwise for
    non-primary key columns, and `False` for primary key columns.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`primary_key` – optional bool, indicates the [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") would be part of the table’s primary key or not.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`deferred` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optional bool - this keyword argument is consumed by the ORM declarative process,
    and is not part of the [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") itself; instead, it indicates that this column should
    be “deferred” for loading as though mapped by [`deferred()`](queryguide/columns.html#sqlalchemy.orm.deferred
    "sqlalchemy.orm.deferred").
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Configuring Column Deferral on Mappings](queryguide/columns.html#orm-queryguide-deferred-declarative)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`deferred_group` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implies [`mapped_column.deferred`](#sqlalchemy.orm.mapped_column.params.deferred
    "sqlalchemy.orm.mapped_column") to `True`, and set the [`deferred.group`](queryguide/columns.html#sqlalchemy.orm.deferred.params.group
    "sqlalchemy.orm.deferred") parameter.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Loading deferred columns in groups](queryguide/columns.html#orm-queryguide-deferred-group)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`deferred_raiseload` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implies [`mapped_column.deferred`](#sqlalchemy.orm.mapped_column.params.deferred
    "sqlalchemy.orm.mapped_column") to `True`, and set the [`deferred.raiseload`](queryguide/columns.html#sqlalchemy.orm.deferred.params.raiseload
    "sqlalchemy.orm.deferred") parameter.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Using raiseload to prevent deferred column loads](queryguide/columns.html#orm-queryguide-deferred-raiseload)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`use_existing_column` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: if True, will attempt to locate the given column name on an inherited superclass
    (typically single inheriting superclass), and if present, will not produce a new
    column, mapping to the superclass column as though it were omitted from this class.
    This is used for mixins that add new columns to an inherited superclass.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Resolving Column Conflicts with use_existing_column](inheritance.html#orm-inheritance-column-conflicts)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 2.0.0b4.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`default` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passed directly to the [`Column.default`](../core/metadata.html#sqlalchemy.schema.Column.params.default
    "sqlalchemy.schema.Column") parameter if the [`mapped_column.insert_default`](#sqlalchemy.orm.mapped_column.params.insert_default
    "sqlalchemy.orm.mapped_column") parameter is not present. Additionally, when used
    with [Declarative Dataclass Mapping](dataclasses.html#orm-declarative-native-dataclasses),
    indicates a default Python value that should be applied to the keyword constructor
    within the generated `__init__()` method.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note that in the case of dataclass generation when [`mapped_column.insert_default`](#sqlalchemy.orm.mapped_column.params.insert_default
    "sqlalchemy.orm.mapped_column") is not present, this means the [`mapped_column.default`](#sqlalchemy.orm.mapped_column.params.default
    "sqlalchemy.orm.mapped_column") value is used in **two** places, both the `__init__()`
    method as well as the [`Column.default`](../core/metadata.html#sqlalchemy.schema.Column.params.default
    "sqlalchemy.schema.Column") parameter. While this behavior may change in a future
    release, for the moment this tends to “work out”; a default of `None` will mean
    that the [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    gets no default generator, whereas a default that refers to a non-`None` Python
    or SQL expression value will be assigned up front on the object when `__init__()`
    is called, which is the same value that the Core [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") construct would use in any case, leading to
    the same end result.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When using Core level column defaults that are callables to be interpreted by
    the underlying [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    in conjunction with [ORM-mapped dataclasses](dataclasses.html#orm-declarative-native-dataclasses),
    especially those that are [context-aware default functions](../core/defaults.html#context-default-functions),
    **the** [`mapped_column.insert_default`](#sqlalchemy.orm.mapped_column.params.insert_default
    "sqlalchemy.orm.mapped_column") **parameter must be used instead**. This is necessary
    to disambiguate the callable from being interpreted as a dataclass level default.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`insert_default` – Passed directly to the [`Column.default`](../core/metadata.html#sqlalchemy.schema.Column.params.default
    "sqlalchemy.schema.Column") parameter; will supersede the value of [`mapped_column.default`](#sqlalchemy.orm.mapped_column.params.default
    "sqlalchemy.orm.mapped_column") when present, however [`mapped_column.default`](#sqlalchemy.orm.mapped_column.params.default
    "sqlalchemy.orm.mapped_column") will always apply to the constructor default for
    a dataclasses mapping.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sort_order` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An integer that indicates how this mapped column should be sorted compared to
    the others when the ORM is creating a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"). Among mapped columns that have the same value the
    default ordering is used, placing first the mapped columns defined in the main
    class, then the ones in the super classes. Defaults to 0\. The sort is ascending.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 2.0.4.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`active_history=False` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When `True`, indicates that the “previous” value for a scalar attribute should
    be loaded when replaced, if not already loaded. Normally, history tracking logic
    for simple non-primary-key scalar values only needs to be aware of the “new” value
    in order to perform a flush. This flag is available for applications that make
    use of [`get_history()`](session_api.html#sqlalchemy.orm.attributes.get_history
    "sqlalchemy.orm.attributes.get_history") or [`Session.is_modified()`](session_api.html#sqlalchemy.orm.Session.is_modified
    "sqlalchemy.orm.Session.is_modified") which also need to know the “previous” value
    of the attribute.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 2.0.10.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`init` – Specific to [Declarative Dataclass Mapping](dataclasses.html#orm-declarative-native-dataclasses),
    specifies if the mapped attribute should be part of the `__init__()` method as
    generated by the dataclass process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repr` – Specific to [Declarative Dataclass Mapping](dataclasses.html#orm-declarative-native-dataclasses),
    specifies if the mapped attribute should be part of the `__repr__()` method as
    generated by the dataclass process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`default_factory` – Specific to [Declarative Dataclass Mapping](dataclasses.html#orm-declarative-native-dataclasses),
    specifies a default-value generation function that will take place as part of
    the `__init__()` method as generated by the dataclass process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`compare` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Specific to [Declarative Dataclass Mapping](dataclasses.html#orm-declarative-native-dataclasses),
    indicates if this field should be included in comparison operations when generating
    the `__eq__()` and `__ne__()` methods for the mapped class.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 2.0.0b4.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`kw_only` – Specific to [Declarative Dataclass Mapping](dataclasses.html#orm-declarative-native-dataclasses),
    indicates if this field should be marked as keyword-only when generating the `__init__()`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**kw` – All remaining keyword arguments are passed through to the constructor
    for the [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Mark a class-level method as representing the definition of a mapped property
    or Declarative directive.
  prefs: []
  type: TYPE_NORMAL
- en: '[`declared_attr`](#sqlalchemy.orm.declared_attr "sqlalchemy.orm.declared_attr")
    is typically applied as a decorator to a class level method, turning the attribute
    into a scalar-like property that can be invoked from the uninstantiated class.
    The Declarative mapping process looks for these [`declared_attr`](#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr") callables as it scans classes, and assumes any
    attribute marked with [`declared_attr`](#sqlalchemy.orm.declared_attr "sqlalchemy.orm.declared_attr")
    will be a callable that will produce an object specific to the Declarative mapping
    or table configuration.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`declared_attr`](#sqlalchemy.orm.declared_attr "sqlalchemy.orm.declared_attr")
    is usually applicable to [mixins](declarative_mixins.html), to define relationships
    that are to be applied to different implementors of the class. It may also be
    used to define dynamically generated column expressions and other Declarative
    attributes.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'When used with Declarative directives such as `__tablename__`, the [`declared_attr.directive()`](#sqlalchemy.orm.declared_attr.directive
    "sqlalchemy.orm.declared_attr.directive") modifier may be used which indicates
    to [**PEP 484**](https://peps.python.org/pep-0484/) typing tools that the given
    method is not dealing with [`Mapped`](internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")
    attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[`declared_attr`](#sqlalchemy.orm.declared_attr "sqlalchemy.orm.declared_attr")
    can also be applied directly to mapped classes, to allow for attributes that dynamically
    configure themselves on subclasses when using mapped inheritance schemes. Below
    illustrates [`declared_attr`](#sqlalchemy.orm.declared_attr "sqlalchemy.orm.declared_attr")
    to create a dynamic scheme for generating the [`Mapper.polymorphic_identity`](#sqlalchemy.orm.Mapper.params.polymorphic_identity
    "sqlalchemy.orm.Mapper") parameter for subclasses:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[`declared_attr`](#sqlalchemy.orm.declared_attr "sqlalchemy.orm.declared_attr")
    supports decorating functions that are explicitly decorated with `@classmethod`.
    This is never necessary from a runtime perspective, however may be needed in order
    to support [**PEP 484**](https://peps.python.org/pep-0484/) typing tools that
    don’t otherwise recognize the decorated function as having class-level behaviors
    for the `cls` parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'New in version 2.0: - [`declared_attr`](#sqlalchemy.orm.declared_attr "sqlalchemy.orm.declared_attr")
    can accommodate a function decorated with `@classmethod` to help with [**PEP 484**](https://peps.python.org/pep-0484/)
    integration where needed.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Composing Mapped Hierarchies with Mixins](declarative_mixins.html) - Declarative
    Mixin documentation with background on use patterns for [`declared_attr`](#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr").'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[cascading](#sqlalchemy.orm.declared_attr.cascading), [directive](#sqlalchemy.orm.declared_attr.directive)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.declared_attr`](#sqlalchemy.orm.declared_attr "sqlalchemy.orm.declared_attr")
    (`sqlalchemy.orm.base._MappedAttribute`, `sqlalchemy.orm.decl_api._declared_attr_common`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Mark a [`declared_attr`](#sqlalchemy.orm.declared_attr "sqlalchemy.orm.declared_attr")
    as cascading.
  prefs: []
  type: TYPE_NORMAL
- en: This is a special-use modifier which indicates that a column or MapperProperty-based
    declared attribute should be configured distinctly per mapped subclass, within
    a mapped-inheritance scenario.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`declared_attr.cascading`](#sqlalchemy.orm.declared_attr.cascading "sqlalchemy.orm.declared_attr.cascading")
    modifier has several limitations:'
  prefs: []
  type: TYPE_NORMAL
- en: The flag `only` applies to the use of [`declared_attr`](#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr") on declarative mixin classes and `__abstract__`
    classes; it currently has no effect when used on a mapped class directly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The flag `only` applies to normally-named attributes, e.g. not any special underscore
    attributes such as `__tablename__`. On these attributes it has `no` effect.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The flag currently `does not allow further overrides` down the class hierarchy;
    if a subclass tries to override the attribute, a warning is emitted and the overridden
    attribute is skipped. This is a limitation that it is hoped will be resolved at
    some point.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Below, both MyClass as well as MySubClass will have a distinct `id` Column
    object established:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: The behavior of the above configuration is that `MySubClass` will refer to both
    its own `id` column as well as that of `MyClass` underneath the attribute named
    `some_id`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Declarative Inheritance](extensions/declarative/inheritance.html#declarative-inheritance)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Using _orm.declared_attr() to generate table-specific inheriting columns](declarative_mixins.html#mixin-inheritance-columns)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Mark a [`declared_attr`](#sqlalchemy.orm.declared_attr "sqlalchemy.orm.declared_attr")
    as decorating a Declarative directive such as `__tablename__` or `__mapper_args__`.
  prefs: []
  type: TYPE_NORMAL
- en: The purpose of [`declared_attr.directive`](#sqlalchemy.orm.declared_attr.directive
    "sqlalchemy.orm.declared_attr.directive") is strictly to support [**PEP 484**](https://peps.python.org/pep-0484/)
    typing tools, by allowing the decorated function to have a return type that is
    **not** using the [`Mapped`](internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")
    generic class, as would normally be the case when [`declared_attr`](#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr") is used for columns and mapped properties. At
    runtime, the [`declared_attr.directive`](#sqlalchemy.orm.declared_attr.directive
    "sqlalchemy.orm.declared_attr.directive") returns the [`declared_attr`](#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr") class unmodified.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Composing Mapped Hierarchies with Mixins](declarative_mixins.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`declared_attr`](#sqlalchemy.orm.declared_attr "sqlalchemy.orm.declared_attr")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Base class used for declarative class definitions.
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`DeclarativeBase`](#sqlalchemy.orm.DeclarativeBase "sqlalchemy.orm.DeclarativeBase")
    allows for the creation of new declarative bases in such a way that is compatible
    with type checkers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: The above `Base` class is now usable as the base for new declarative mappings.
    The superclass makes use of the `__init_subclass__()` method to set up new classes
    and metaclasses aren’t used.
  prefs: []
  type: TYPE_NORMAL
- en: 'When first used, the [`DeclarativeBase`](#sqlalchemy.orm.DeclarativeBase "sqlalchemy.orm.DeclarativeBase")
    class instantiates a new [`registry`](#sqlalchemy.orm.registry "sqlalchemy.orm.registry")
    to be used with the base, assuming one was not provided explicitly. The [`DeclarativeBase`](#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase") class supports class-level attributes which
    act as parameters for the construction of this registry; such as to indicate a
    specific [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    collection as well as a specific value for [`registry.type_annotation_map`](#sqlalchemy.orm.registry.params.type_annotation_map
    "sqlalchemy.orm.registry"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Class-level attributes which may be specified include:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`metadata` – optional [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") collection. If a [`registry`](#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") is constructed automatically, this [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") collection will be used to construct it. Otherwise,
    the local [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    collection will supercede that used by an existing [`registry`](#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") passed using the [`DeclarativeBase.registry`](#sqlalchemy.orm.DeclarativeBase.params.registry
    "sqlalchemy.orm.DeclarativeBase") parameter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`type_annotation_map` – optional type annotation map that will be passed to
    the [`registry`](#sqlalchemy.orm.registry "sqlalchemy.orm.registry") as [`registry.type_annotation_map`](#sqlalchemy.orm.registry.params.type_annotation_map
    "sqlalchemy.orm.registry").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`registry` – supply a pre-existing [`registry`](#sqlalchemy.orm.registry "sqlalchemy.orm.registry")
    directly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'New in version 2.0: Added [`DeclarativeBase`](#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase"), so that declarative base classes may be constructed
    in such a way that is also recognized by [**PEP 484**](https://peps.python.org/pep-0484/)
    type checkers. As a result, [`DeclarativeBase`](#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase") and other subclassing-oriented APIs should be
    seen as superseding previous “class returned by a function” APIs, namely [`declarative_base()`](#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base") and [`registry.generate_base()`](#sqlalchemy.orm.registry.generate_base
    "sqlalchemy.orm.registry.generate_base"), where the base class returned cannot
    be recognized by type checkers without using plugins.'
  prefs: []
  type: TYPE_NORMAL
- en: '**__init__ behavior**'
  prefs: []
  type: TYPE_NORMAL
- en: In a plain Python class, the base-most `__init__()` method in the class hierarchy
    is `object.__init__()`, which accepts no arguments. However, when the [`DeclarativeBase`](#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase") subclass is first declared, the class is given
    an `__init__()` method that links to the [`registry.constructor`](#sqlalchemy.orm.registry.params.constructor
    "sqlalchemy.orm.registry") constructor function, if no `__init__()` method is
    already present; this is the usual declarative constructor that will assign keyword
    arguments as attributes on the instance, assuming those attributes are established
    at the class level (i.e. are mapped, or are linked to a descriptor). This constructor
    is **never accessed by a mapped class without being called explicitly via super()**,
    as mapped classes are themselves given an `__init__()` method directly which calls
    [`registry.constructor`](#sqlalchemy.orm.registry.params.constructor "sqlalchemy.orm.registry"),
    so in the default case works independently of what the base-most `__init__()`
    method does.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 2.0.1: [`DeclarativeBase`](#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase") has a default constructor that links to [`registry.constructor`](#sqlalchemy.orm.registry.params.constructor
    "sqlalchemy.orm.registry") by default, so that calls to `super().__init__()` can
    access this constructor. Previously, due to an implementation mistake, this default
    constructor was missing, and calling `super().__init__()` would invoke `object.__init__()`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`DeclarativeBase`](#sqlalchemy.orm.DeclarativeBase "sqlalchemy.orm.DeclarativeBase")
    subclass may also declare an explicit `__init__()` method which will replace the
    use of the [`registry.constructor`](#sqlalchemy.orm.registry.params.constructor
    "sqlalchemy.orm.registry") function at this level:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Mapped classes still will not invoke this constructor implicitly; it remains
    only accessible by calling `super().__init__()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Note that this is a different behavior from what functions like the legacy [`declarative_base()`](#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base") would do; the base created by those functions
    would always install [`registry.constructor`](#sqlalchemy.orm.registry.params.constructor
    "sqlalchemy.orm.registry") for `__init__()`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[__mapper__](#sqlalchemy.orm.DeclarativeBase.__mapper__), [__mapper_args__](#sqlalchemy.orm.DeclarativeBase.__mapper_args__),
    [__table__](#sqlalchemy.orm.DeclarativeBase.__table__), [__table_args__](#sqlalchemy.orm.DeclarativeBase.__table_args__),
    [__tablename__](#sqlalchemy.orm.DeclarativeBase.__tablename__), [metadata](#sqlalchemy.orm.DeclarativeBase.metadata),
    [registry](#sqlalchemy.orm.DeclarativeBase.registry)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.DeclarativeBase`](#sqlalchemy.orm.DeclarativeBase "sqlalchemy.orm.DeclarativeBase")
    (`sqlalchemy.inspection.Inspectable`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: The [`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper") object to which
    a particular class is mapped.
  prefs: []
  type: TYPE_NORMAL
- en: May also be acquired using [`inspect()`](../core/inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect"), e.g. `inspect(klass)`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Dictionary of arguments which will be passed to the [`Mapper`](#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") constructor.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Mapper Configuration Options with Declarative](declarative_config.html#orm-declarative-mapper-options)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: The [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") to which a particular subclass is mapped.
  prefs: []
  type: TYPE_NORMAL
- en: This is usually an instance of [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") but may also refer to other kinds of [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") such as [`Subquery`](../core/selectable.html#sqlalchemy.sql.expression.Subquery
    "sqlalchemy.sql.expression.Subquery"), depending on how the class is mapped.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Accessing Table and Metadata](declarative_tables.html#orm-declarative-metadata)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: A dictionary or tuple of arguments that will be passed to the [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") constructor. See [Declarative Table Configuration](declarative_tables.html#orm-declarative-table-configuration)
    for background on the specific structure of this collection.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Declarative Table Configuration](declarative_tables.html#orm-declarative-table-configuration)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: String name to assign to the generated [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object, if not specified directly via [`DeclarativeBase.__table__`](#sqlalchemy.orm.DeclarativeBase.__table__
    "sqlalchemy.orm.DeclarativeBase.__table__").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Declarative Table with mapped_column()](declarative_tables.html#orm-declarative-table)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Refers to the [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") collection that will be used for new [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Accessing Table and Metadata](declarative_tables.html#orm-declarative-metadata)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Refers to the [`registry`](#sqlalchemy.orm.registry "sqlalchemy.orm.registry")
    in use where new [`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper") objects
    will be associated.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Same as [`DeclarativeBase`](#sqlalchemy.orm.DeclarativeBase "sqlalchemy.orm.DeclarativeBase"),
    but does not use a metaclass to intercept new attributes.
  prefs: []
  type: TYPE_NORMAL
- en: The [`DeclarativeBaseNoMeta`](#sqlalchemy.orm.DeclarativeBaseNoMeta "sqlalchemy.orm.DeclarativeBaseNoMeta")
    base may be used when use of custom metaclasses is desirable.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[__mapper__](#sqlalchemy.orm.DeclarativeBaseNoMeta.__mapper__), [__mapper_args__](#sqlalchemy.orm.DeclarativeBaseNoMeta.__mapper_args__),
    [__table__](#sqlalchemy.orm.DeclarativeBaseNoMeta.__table__), [__table_args__](#sqlalchemy.orm.DeclarativeBaseNoMeta.__table_args__),
    [__tablename__](#sqlalchemy.orm.DeclarativeBaseNoMeta.__tablename__), [metadata](#sqlalchemy.orm.DeclarativeBaseNoMeta.metadata),
    [registry](#sqlalchemy.orm.DeclarativeBaseNoMeta.registry)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.DeclarativeBaseNoMeta`](#sqlalchemy.orm.DeclarativeBaseNoMeta
    "sqlalchemy.orm.DeclarativeBaseNoMeta") (`sqlalchemy.inspection.Inspectable`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: The [`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper") object to which
    a particular class is mapped.
  prefs: []
  type: TYPE_NORMAL
- en: May also be acquired using [`inspect()`](../core/inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect"), e.g. `inspect(klass)`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Dictionary of arguments which will be passed to the [`Mapper`](#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") constructor.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Mapper Configuration Options with Declarative](declarative_config.html#orm-declarative-mapper-options)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: The [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") to which a particular subclass is mapped.
  prefs: []
  type: TYPE_NORMAL
- en: This is usually an instance of [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") but may also refer to other kinds of [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") such as [`Subquery`](../core/selectable.html#sqlalchemy.sql.expression.Subquery
    "sqlalchemy.sql.expression.Subquery"), depending on how the class is mapped.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Accessing Table and Metadata](declarative_tables.html#orm-declarative-metadata)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: A dictionary or tuple of arguments that will be passed to the [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") constructor. See [Declarative Table Configuration](declarative_tables.html#orm-declarative-table-configuration)
    for background on the specific structure of this collection.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Declarative Table Configuration](declarative_tables.html#orm-declarative-table-configuration)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: String name to assign to the generated [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object, if not specified directly via [`DeclarativeBase.__table__`](#sqlalchemy.orm.DeclarativeBase.__table__
    "sqlalchemy.orm.DeclarativeBase.__table__").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Declarative Table with mapped_column()](declarative_tables.html#orm-declarative-table)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Refers to the [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") collection that will be used for new [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Accessing Table and Metadata](declarative_tables.html#orm-declarative-metadata)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Refers to the [`registry`](#sqlalchemy.orm.registry "sqlalchemy.orm.registry")
    in use where new [`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper") objects
    will be associated.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Given a class, return True if any of the classes it inherits from has a mapped
    table, otherwise return False.
  prefs: []
  type: TYPE_NORMAL
- en: This is used in declarative mixins to build attributes that behave differently
    for the base class vs. a subclass in an inheritance hierarchy.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Using Mixins and Base Classes with Mapped Inheritance Patterns](declarative_mixins.html#decl-mixin-inheritance)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Decorator that produces an [`synonym()`](mapped_attributes.html#sqlalchemy.orm.synonym
    "sqlalchemy.orm.synonym") attribute in conjunction with a Python descriptor.
  prefs: []
  type: TYPE_NORMAL
- en: 'The function being decorated is passed to [`synonym()`](mapped_attributes.html#sqlalchemy.orm.synonym
    "sqlalchemy.orm.synonym") as the [`synonym.descriptor`](mapped_attributes.html#sqlalchemy.orm.synonym.params.descriptor
    "sqlalchemy.orm.synonym") parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: The [hybrid properties](mapped_attributes.html#mapper-hybrids) feature of SQLAlchemy
    is typically preferred instead of synonyms, which is a more legacy feature.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Synonyms](mapped_attributes.html#synonyms) - Overview of synonyms'
  prefs: []
  type: TYPE_NORMAL
- en: '[`synonym()`](mapped_attributes.html#sqlalchemy.orm.synonym "sqlalchemy.orm.synonym")
    - the mapper-level function'
  prefs: []
  type: TYPE_NORMAL
- en: '[Using Descriptors and Hybrids](mapped_attributes.html#mapper-hybrids) - The
    Hybrid Attribute extension provides an updated approach to augmenting attribute
    behavior more flexibly than can be achieved with synonyms.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Given an object, return the primary Mapper associated with the object instance.
  prefs: []
  type: TYPE_NORMAL
- en: Raises [`sqlalchemy.orm.exc.UnmappedInstanceError`](exceptions.html#sqlalchemy.orm.exc.UnmappedInstanceError
    "sqlalchemy.orm.exc.UnmappedInstanceError") if no mapping is configured.
  prefs: []
  type: TYPE_NORMAL
- en: 'This function is available via the inspection system as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Using the inspection system will raise [`sqlalchemy.exc.NoInspectionAvailable`](../core/exceptions.html#sqlalchemy.exc.NoInspectionAvailable
    "sqlalchemy.exc.NoInspectionAvailable") if the instance is not part of a mapping.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Given a class, return the primary [`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    associated with the key.
  prefs: []
  type: TYPE_NORMAL
- en: Raises [`UnmappedClassError`](exceptions.html#sqlalchemy.orm.exc.UnmappedClassError
    "sqlalchemy.orm.exc.UnmappedClassError") if no mapping is configured on the given
    class, or [`ArgumentError`](../core/exceptions.html#sqlalchemy.exc.ArgumentError
    "sqlalchemy.exc.ArgumentError") if a non-class object is passed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Equivalent functionality is available via the [`inspect()`](../core/inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect") function as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: Using the inspection system will raise [`sqlalchemy.exc.NoInspectionAvailable`](../core/exceptions.html#sqlalchemy.exc.NoInspectionAvailable
    "sqlalchemy.exc.NoInspectionAvailable") if the class is not mapped.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Initialize the inter-mapper relationships of all mappers that have been constructed
    thus far across all [`registry`](#sqlalchemy.orm.registry "sqlalchemy.orm.registry")
    collections.
  prefs: []
  type: TYPE_NORMAL
- en: The configure step is used to reconcile and initialize the [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") linkages between mapped classes, as well as to
    invoke configuration events such as the [`MapperEvents.before_configured()`](events.html#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured") and [`MapperEvents.after_configured()`](events.html#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured"), which may be used by ORM extensions
    or user-defined extension hooks.
  prefs: []
  type: TYPE_NORMAL
- en: Mapper configuration is normally invoked automatically, the first time mappings
    from a particular [`registry`](#sqlalchemy.orm.registry "sqlalchemy.orm.registry")
    are used, as well as whenever mappings are used and additional not-yet-configured
    mappers have been constructed. The automatic configuration process however is
    local only to the [`registry`](#sqlalchemy.orm.registry "sqlalchemy.orm.registry")
    involving the target mapper and any related [`registry`](#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") objects which it may depend on; this is equivalent
    to invoking the [`registry.configure()`](#sqlalchemy.orm.registry.configure "sqlalchemy.orm.registry.configure")
    method on a particular [`registry`](#sqlalchemy.orm.registry "sqlalchemy.orm.registry").
  prefs: []
  type: TYPE_NORMAL
- en: By contrast, the [`configure_mappers()`](#sqlalchemy.orm.configure_mappers "sqlalchemy.orm.configure_mappers")
    function will invoke the configuration process on all [`registry`](#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") objects that exist in memory, and may be useful for
    scenarios where many individual [`registry`](#sqlalchemy.orm.registry "sqlalchemy.orm.registry")
    objects that are nonetheless interrelated are in use.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: As of SQLAlchemy 1.4.0b2, this function works on a
    per-[`registry`](#sqlalchemy.orm.registry "sqlalchemy.orm.registry") basis, locating
    all [`registry`](#sqlalchemy.orm.registry "sqlalchemy.orm.registry") objects present
    and invoking the [`registry.configure()`](#sqlalchemy.orm.registry.configure "sqlalchemy.orm.registry.configure")
    method on each. The [`registry.configure()`](#sqlalchemy.orm.registry.configure
    "sqlalchemy.orm.registry.configure") method may be preferred to limit the configuration
    of mappers to those local to a particular [`registry`](#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") and/or declarative base class.'
  prefs: []
  type: TYPE_NORMAL
- en: Points at which automatic configuration is invoked include when a mapped class
    is instantiated into an instance, as well as when ORM queries are emitted using
    [`Session.query()`](session_api.html#sqlalchemy.orm.Session.query "sqlalchemy.orm.Session.query")
    or [`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute "sqlalchemy.orm.Session.execute")
    with an ORM-enabled statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'The mapper configure process, whether invoked by [`configure_mappers()`](#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") or from [`registry.configure()`](#sqlalchemy.orm.registry.configure
    "sqlalchemy.orm.registry.configure"), provides several event hooks that can be
    used to augment the mapper configuration step. These hooks include:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`MapperEvents.before_configured()`](events.html#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured") - called once before [`configure_mappers()`](#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") or [`registry.configure()`](#sqlalchemy.orm.registry.configure
    "sqlalchemy.orm.registry.configure") does any work; this can be used to establish
    additional options, properties, or related mappings before the operation proceeds.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`MapperEvents.mapper_configured()`](events.html#sqlalchemy.orm.MapperEvents.mapper_configured
    "sqlalchemy.orm.MapperEvents.mapper_configured") - called as each individual [`Mapper`](#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") is configured within the process; will include all mapper
    state except for backrefs set up by other mappers that are still to be configured.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`MapperEvents.after_configured()`](events.html#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured") - called once after [`configure_mappers()`](#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") or [`registry.configure()`](#sqlalchemy.orm.registry.configure
    "sqlalchemy.orm.registry.configure") is complete; at this stage, all [`Mapper`](#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") objects that fall within the scope of the configuration
    operation will be fully configured. Note that the calling application may still
    have other mappings that haven’t been produced yet, such as if they are in modules
    as yet unimported, and may also have mappings that are still to be configured,
    if they are in other [`registry`](#sqlalchemy.orm.registry "sqlalchemy.orm.registry")
    collections not part of the current scope of configuration.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Remove all mappers from all classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: This function now locates all [`registry`](#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") objects and calls upon the [`registry.dispose()`](#sqlalchemy.orm.registry.dispose
    "sqlalchemy.orm.registry.dispose") method of each.'
  prefs: []
  type: TYPE_NORMAL
- en: This function removes all instrumentation from classes and disposes of their
    associated mappers. Once called, the classes are unmapped and can be later re-mapped
    with new mappers.
  prefs: []
  type: TYPE_NORMAL
- en: '[`clear_mappers()`](#sqlalchemy.orm.clear_mappers "sqlalchemy.orm.clear_mappers")
    is *not* for normal use, as there is literally no valid usage for it outside of
    very specific testing scenarios. Normally, mappers are permanent structural components
    of user-defined classes, and are never discarded independently of their class.
    If a mapped class itself is garbage collected, its mapper is automatically disposed
    of as well. As such, [`clear_mappers()`](#sqlalchemy.orm.clear_mappers "sqlalchemy.orm.clear_mappers")
    is only for usage in test suites that re-use the same classes with different mappings,
    which is itself an extremely rare use case - the only such use case is in fact
    SQLAlchemy’s own test suite, and possibly the test suites of other ORM extension
    libraries which intend to test various combinations of mapper construction upon
    a fixed set of classes.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Generate “identity key” tuples, as are used as keys in the [`Session.identity_map`](session_api.html#sqlalchemy.orm.Session.identity_map
    "sqlalchemy.orm.Session.identity_map") dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: 'This function has several call styles:'
  prefs: []
  type: TYPE_NORMAL
- en: '`identity_key(class, ident, identity_token=token)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This form receives a mapped class and a primary key scalar or tuple as an argument.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'param class:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: mapped class (must be a positional argument)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'param ident:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: primary key, may be a scalar or tuple argument.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'param identity_token:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: optional identity token
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'New in version 1.2: added identity_token'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`identity_key(instance=instance)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This form will produce the identity key for a given instance. The instance need
    not be persistent, only that its primary key attributes are populated (else the
    key will contain `None` for those missing values).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this form, the given instance is ultimately run though [`Mapper.identity_key_from_instance()`](#sqlalchemy.orm.Mapper.identity_key_from_instance
    "sqlalchemy.orm.Mapper.identity_key_from_instance"), which will have the effect
    of performing a database check for the corresponding row if the object is expired.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'param instance:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: object instance (must be given as a keyword arg)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`identity_key(class, row=row, identity_token=token)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This form is similar to the class/tuple form, except is passed a database result
    row as a [`Row`](../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    or [`RowMapping`](../core/connections.html#sqlalchemy.engine.RowMapping "sqlalchemy.engine.RowMapping")
    object.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'param class:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: mapped class (must be a positional argument)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'param row:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`Row`](../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    row returned by a [`CursorResult`](../core/connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") (must be given as a keyword arg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'param identity_token:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: optional identity token
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'New in version 1.2: added identity_token'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: Create a `UNION` statement used by a polymorphic mapper.
  prefs: []
  type: TYPE_NORMAL
- en: See [Concrete Table Inheritance](inheritance.html#concrete-inheritance) for
    an example of how this is used.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`table_map` – mapping of polymorphic identities to [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`typecolname` – string name of a “discriminator” column, which will be derived
    from the query, producing the polymorphic identity for each row. If `None`, no
    polymorphic discriminator is generated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`aliasname` – name of the [`alias()`](../core/selectable.html#sqlalchemy.sql.expression.alias
    "sqlalchemy.sql.expression.alias") construct generated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cast_nulls` – if True, non-existent columns, which are represented as labeled
    NULLs, will be passed into CAST. This is a legacy behavior that is problematic
    on some backends such as Oracle - in which case it can be set to False.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: Provides a surrogate [`mapped_column()`](#sqlalchemy.orm.mapped_column "sqlalchemy.orm.mapped_column")
    that generates a so-called [sentinel](../glossary.html#term-sentinel) column,
    allowing efficient bulk inserts with deterministic RETURNING sorting for tables
    that don’t otherwise have qualifying primary key configurations.
  prefs: []
  type: TYPE_NORMAL
- en: Use of [`orm_insert_sentinel()`](#sqlalchemy.orm.orm_insert_sentinel "sqlalchemy.orm.orm_insert_sentinel")
    is analogous to the use of the [`insert_sentinel()`](../core/metadata.html#sqlalchemy.schema.insert_sentinel
    "sqlalchemy.schema.insert_sentinel") construct within a Core [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") construct.
  prefs: []
  type: TYPE_NORMAL
- en: Guidelines for adding this construct to a Declarative mapped class are the same
    as that of the [`insert_sentinel()`](../core/metadata.html#sqlalchemy.schema.insert_sentinel
    "sqlalchemy.schema.insert_sentinel") construct; the database table itself also
    needs to have a column with this name present.
  prefs: []
  type: TYPE_NORMAL
- en: For background on how this object is used, see the section [Configuring Sentinel
    Columns](../core/connections.html#engine-insertmanyvalues-sentinel-columns) as
    part of the section [“Insert Many Values” Behavior for INSERT statements](../core/connections.html#engine-insertmanyvalues).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`insert_sentinel()`](../core/metadata.html#sqlalchemy.schema.insert_sentinel
    "sqlalchemy.schema.insert_sentinel")'
  prefs: []
  type: TYPE_NORMAL
- en: '[“Insert Many Values” Behavior for INSERT statements](../core/connections.html#engine-insertmanyvalues)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Configuring Sentinel Columns](../core/connections.html#engine-insertmanyvalues-sentinel-columns)'
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.10.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: Decorate a method as the ‘reconstructor’ hook.
  prefs: []
  type: TYPE_NORMAL
- en: Designates a single method as the “reconstructor”, an `__init__`-like method
    that will be called by the ORM after the instance has been loaded from the database
    or otherwise reconstituted.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: The [`reconstructor()`](#sqlalchemy.orm.reconstructor "sqlalchemy.orm.reconstructor")
    decorator makes use of the [`InstanceEvents.load()`](events.html#sqlalchemy.orm.InstanceEvents.load
    "sqlalchemy.orm.InstanceEvents.load") event hook, which can be used directly.
  prefs: []
  type: TYPE_NORMAL
- en: The reconstructor will be invoked with no arguments. Scalar (non-collection)
    database-mapped attributes of the instance will be available for use within the
    function. Eagerly-loaded collections are generally not yet available and will
    usually only contain the first element. ORM state changes made to objects at this
    stage will not be recorded for the next flush() operation, so the activity within
    a reconstructor should be conservative.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`InstanceEvents.load()`](events.html#sqlalchemy.orm.InstanceEvents.load "sqlalchemy.orm.InstanceEvents.load")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: Defines an association between a Python class and a database table or other
    relational structure, so that ORM operations against the class may proceed.
  prefs: []
  type: TYPE_NORMAL
- en: The [`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper") object is instantiated
    using mapping methods present on the [`registry`](#sqlalchemy.orm.registry "sqlalchemy.orm.registry")
    object. For information about instantiating new [`Mapper`](#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") objects, see [ORM Mapped Class Overview](mapping_styles.html).
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[__init__()](#sqlalchemy.orm.Mapper.__init__), [add_properties()](#sqlalchemy.orm.Mapper.add_properties),
    [add_property()](#sqlalchemy.orm.Mapper.add_property), [all_orm_descriptors](#sqlalchemy.orm.Mapper.all_orm_descriptors),
    [attrs](#sqlalchemy.orm.Mapper.attrs), [base_mapper](#sqlalchemy.orm.Mapper.base_mapper),
    [c](#sqlalchemy.orm.Mapper.c), [cascade_iterator()](#sqlalchemy.orm.Mapper.cascade_iterator),
    [class_](#sqlalchemy.orm.Mapper.class_), [class_manager](#sqlalchemy.orm.Mapper.class_manager),
    [column_attrs](#sqlalchemy.orm.Mapper.column_attrs), [columns](#sqlalchemy.orm.Mapper.columns),
    [common_parent()](#sqlalchemy.orm.Mapper.common_parent), [composites](#sqlalchemy.orm.Mapper.composites),
    [concrete](#sqlalchemy.orm.Mapper.concrete), [configured](#sqlalchemy.orm.Mapper.configured),
    [entity](#sqlalchemy.orm.Mapper.entity), [get_property()](#sqlalchemy.orm.Mapper.get_property),
    [get_property_by_column()](#sqlalchemy.orm.Mapper.get_property_by_column), [identity_key_from_instance()](#sqlalchemy.orm.Mapper.identity_key_from_instance),
    [identity_key_from_primary_key()](#sqlalchemy.orm.Mapper.identity_key_from_primary_key),
    [identity_key_from_row()](#sqlalchemy.orm.Mapper.identity_key_from_row), [inherits](#sqlalchemy.orm.Mapper.inherits),
    [is_mapper](#sqlalchemy.orm.Mapper.is_mapper), [is_sibling()](#sqlalchemy.orm.Mapper.is_sibling),
    [isa()](#sqlalchemy.orm.Mapper.isa), [iterate_properties](#sqlalchemy.orm.Mapper.iterate_properties),
    [local_table](#sqlalchemy.orm.Mapper.local_table), [mapped_table](#sqlalchemy.orm.Mapper.mapped_table),
    [mapper](#sqlalchemy.orm.Mapper.mapper), [non_primary](#sqlalchemy.orm.Mapper.non_primary),
    [persist_selectable](#sqlalchemy.orm.Mapper.persist_selectable), [polymorphic_identity](#sqlalchemy.orm.Mapper.polymorphic_identity),
    [polymorphic_iterator()](#sqlalchemy.orm.Mapper.polymorphic_iterator), [polymorphic_map](#sqlalchemy.orm.Mapper.polymorphic_map),
    [polymorphic_on](#sqlalchemy.orm.Mapper.polymorphic_on), [primary_key](#sqlalchemy.orm.Mapper.primary_key),
    [primary_key_from_instance()](#sqlalchemy.orm.Mapper.primary_key_from_instance),
    [primary_mapper()](#sqlalchemy.orm.Mapper.primary_mapper), [relationships](#sqlalchemy.orm.Mapper.relationships),
    [selectable](#sqlalchemy.orm.Mapper.selectable), [self_and_descendants](#sqlalchemy.orm.Mapper.self_and_descendants),
    [single](#sqlalchemy.orm.Mapper.single), [synonyms](#sqlalchemy.orm.Mapper.synonyms),
    [tables](#sqlalchemy.orm.Mapper.tables), [validators](#sqlalchemy.orm.Mapper.validators),
    [with_polymorphic_mappers](#sqlalchemy.orm.Mapper.with_polymorphic_mappers)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    (`sqlalchemy.orm.ORMFromClauseRole`, `sqlalchemy.orm.ORMEntityColumnsClauseRole`,
    `sqlalchemy.sql.cache_key.MemoizedHasCacheKey`, [`sqlalchemy.orm.base.InspectionAttr`](internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.base.InspectionAttr"), [`sqlalchemy.log.Identified`](../core/internals.html#sqlalchemy.log.Identified
    "sqlalchemy.log.Identified"), `sqlalchemy.inspection.Inspectable`, `sqlalchemy.event.registry.EventTarget`,
    `typing.Generic`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: Direct constructor for a new [`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    object.
  prefs: []
  type: TYPE_NORMAL
- en: The [`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper") constructor is
    not called directly, and is normally invoked through the use of the [`registry`](#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") object through either the [Declarative](mapping_styles.html#orm-declarative-mapping)
    or [Imperative](mapping_styles.html#orm-imperative-mapping) mapping styles.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 2.0: The public facing `mapper()` function is removed; for
    a classical mapping configuration, use the [`registry.map_imperatively()`](#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively") method.'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters documented below may be passed to either the [`registry.map_imperatively()`](#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively") method, or may be passed in the `__mapper_args__`
    declarative class attribute described at [Mapper Configuration Options with Declarative](declarative_config.html#orm-declarative-mapper-options).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`class_` – The class to be mapped. When using Declarative, this argument is
    automatically passed as the declared class itself.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`local_table` – The [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") or other [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") (i.e. selectable) to which the class is
    mapped. May be `None` if this mapper inherits from another mapper using single-table
    inheritance. When using Declarative, this argument is automatically passed by
    the extension, based on what is configured via the [`DeclarativeBase.__table__`](#sqlalchemy.orm.DeclarativeBase.__table__
    "sqlalchemy.orm.DeclarativeBase.__table__") attribute or via the [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") produced as a result of the [`DeclarativeBase.__tablename__`](#sqlalchemy.orm.DeclarativeBase.__tablename__
    "sqlalchemy.orm.DeclarativeBase.__tablename__") attribute being present.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`polymorphic_abstract` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Indicates this class will be mapped in a polymorphic hierarchy, but not directly
    instantiated. The class is mapped normally, except that it has no requirement
    for a [`Mapper.polymorphic_identity`](#sqlalchemy.orm.Mapper.params.polymorphic_identity
    "sqlalchemy.orm.Mapper") within an inheritance hierarchy. The class however must
    be part of a polymorphic inheritance scheme which uses [`Mapper.polymorphic_on`](#sqlalchemy.orm.Mapper.params.polymorphic_on
    "sqlalchemy.orm.Mapper") at the base.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Building Deeper Hierarchies with polymorphic_abstract](inheritance.html#orm-inheritance-abstract-poly)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`always_refresh` – If True, all query operations for this mapped class will
    overwrite all data within object instances that already exist within the session,
    erasing any in-memory changes with whatever information was loaded from the database.
    Usage of this flag is highly discouraged; as an alternative, see the method [`Query.populate_existing()`](queryguide/query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`allow_partial_pks` – Defaults to True. Indicates that a composite primary
    key with some NULL values should be considered as possibly existing within the
    database. This affects whether a mapper will assign an incoming row to an existing
    identity, as well as if [`Session.merge()`](session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge") will check the database first for a particular
    primary key value. A “partial primary key” can occur if one has mapped to an OUTER
    JOIN, for example.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`batch` – Defaults to `True`, indicating that save operations of multiple entities
    can be batched together for efficiency. Setting to False indicates that an instance
    will be fully saved before saving the next instance. This is used in the extremely
    rare case that a [`MapperEvents`](events.html#sqlalchemy.orm.MapperEvents "sqlalchemy.orm.MapperEvents")
    listener requires being called in between individual row persistence operations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`column_prefix` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A string which will be prepended to the mapped attribute name when [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects are automatically assigned as attributes to
    the mapped class. Does not affect [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects that are mapped explicitly in the [`Mapper.properties`](#sqlalchemy.orm.Mapper.params.properties
    "sqlalchemy.orm.Mapper") dictionary.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'This parameter is typically useful with imperative mappings that keep the [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object separate. Below, assuming the `user_table` [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object has columns named `user_id`, `user_name`, and
    `password`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The above mapping will assign the `user_id`, `user_name`, and `password` columns
    to attributes named `_user_id`, `_user_name`, and `_password` on the mapped `User`
    class.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The [`Mapper.column_prefix`](#sqlalchemy.orm.Mapper.params.column_prefix "sqlalchemy.orm.Mapper")
    parameter is uncommon in modern use. For dealing with reflected tables, a more
    flexible approach to automating a naming scheme is to intercept the [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects as they are reflected; see the section [Automating
    Column Naming Schemes from Reflected Tables](declarative_tables.html#mapper-automated-reflection-schemes)
    for notes on this usage pattern.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`concrete` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If True, indicates this mapper should use concrete table inheritance with its
    parent mapper.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See the section [Concrete Table Inheritance](inheritance.html#concrete-inheritance)
    for an example.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`confirm_deleted_rows` – defaults to True; when a DELETE occurs of one more
    rows based on specific primary keys, a warning is emitted when the number of rows
    matched does not equal the number of rows expected. This parameter may be set
    to False to handle the case where database ON DELETE CASCADE rules may be deleting
    some of those rows automatically. The warning may be changed to an exception in
    a future release.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`eager_defaults` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: if True, the ORM will immediately fetch the value of server-generated default
    values after an INSERT or UPDATE, rather than leaving them as expired to be fetched
    on next access. This can be used for event schemes where the server-generated
    values are needed immediately before the flush completes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The fetch of values occurs either by using `RETURNING` inline with the `INSERT`
    or `UPDATE` statement, or by adding an additional `SELECT` statement subsequent
    to the `INSERT` or `UPDATE`, if the backend does not support `RETURNING`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The use of `RETURNING` is extremely performant in particular for `INSERT` statements
    where SQLAlchemy can take advantage of [insertmanyvalues](../core/connections.html#engine-insertmanyvalues),
    whereas the use of an additional `SELECT` is relatively poor performing, adding
    additional SQL round trips which would be unnecessary if these new attributes
    are not to be accessed in any case.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For this reason, [`Mapper.eager_defaults`](#sqlalchemy.orm.Mapper.params.eager_defaults
    "sqlalchemy.orm.Mapper") defaults to the string value `"auto"`, which indicates
    that server defaults for INSERT should be fetched using `RETURNING` if the backing
    database supports it and if the dialect in use supports “insertmanyreturning”
    for an INSERT statement. If the backing database does not support `RETURNING`
    or “insertmanyreturning” is not available, server defaults will not be fetched.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Changed in version 2.0.0rc1: added the “auto” option for [`Mapper.eager_defaults`](#sqlalchemy.orm.Mapper.params.eager_defaults
    "sqlalchemy.orm.Mapper")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Fetching Server-Generated Defaults](persistence_techniques.html#orm-server-defaults)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Changed in version 2.0.0: RETURNING now works with multiple rows INSERTed at
    once using the [insertmanyvalues](../core/connections.html#engine-insertmanyvalues)
    feature, which among other things allows the [`Mapper.eager_defaults`](#sqlalchemy.orm.Mapper.params.eager_defaults
    "sqlalchemy.orm.Mapper") feature to be very performant on supporting backends.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`exclude_properties` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A list or set of string column names to be excluded from mapping.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Mapping a Subset of Table Columns](declarative_tables.html#include-exclude-cols)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`include_properties` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An inclusive list or set of string column names to map.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Mapping a Subset of Table Columns](declarative_tables.html#include-exclude-cols)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`inherits` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A mapped class or the corresponding [`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    of one indicating a superclass to which this [`Mapper`](#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") should *inherit* from. The mapped class here must be
    a subclass of the other mapper’s class. When using Declarative, this argument
    is passed automatically as a result of the natural class hierarchy of the declared
    classes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Mapping Class Inheritance Hierarchies](inheritance.html)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`inherit_condition` – For joined table inheritance, a SQL expression which
    will define how the two tables are joined; defaults to a natural join between
    the two tables.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`inherit_foreign_keys` – When `inherit_condition` is used and the columns present
    are missing a [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") configuration, this parameter can be used to specify
    which columns are “foreign”. In most cases can be left as `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`legacy_is_orphan` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Boolean, defaults to `False`. When `True`, specifies that “legacy” orphan consideration
    is to be applied to objects mapped by this mapper, which means that a pending
    (that is, not persistent) object is auto-expunged from an owning [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") only when it is de-associated from *all* parents that
    specify a `delete-orphan` cascade towards this mapper. The new default behavior
    is that the object is auto-expunged when it is de-associated with *any* of its
    parents that specify `delete-orphan` cascade. This behavior is more consistent
    with that of a persistent object, and allows behavior to be consistent in more
    scenarios independently of whether or not an orphan object has been flushed yet
    or not.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See the change note and example at [The consideration of a “pending” object
    as an “orphan” has been made more aggressive](../changelog/migration_08.html#legacy-is-orphan-addition)
    for more detail on this change.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`non_primary` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Specify that this [`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: is in addition to the “primary” mapper, that is, the one used for persistence.
    The [`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper") created here may
    be used for ad-hoc mapping of the class to an alternate selectable, for loading
    only.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.3: The `mapper.non_primary` parameter is deprecated,
    and will be removed in a future release. The functionality of non primary mappers
    is now better suited using the [`AliasedClass`](queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") construct, which can also be used as the target
    of a [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    in 1.3.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Relationship to Aliased Class](join_conditions.html#relationship-aliased-class)
    - the new pattern that removes the need for the [`Mapper.non_primary`](#sqlalchemy.orm.Mapper.params.non_primary
    "sqlalchemy.orm.Mapper") flag.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`passive_deletes` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Indicates DELETE behavior of foreign key columns when a joined-table inheritance
    entity is being deleted. Defaults to `False` for a base mapper; for an inheriting
    mapper, defaults to `False` unless the value is set to `True` on the superclass
    mapper.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When `True`, it is assumed that ON DELETE CASCADE is configured on the foreign
    key relationships that link this mapper’s table to its superclass table, so that
    when the unit of work attempts to delete the entity, it need only emit a DELETE
    statement for the superclass table, and not this table.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When `False`, a DELETE statement is emitted for this mapper’s table individually.
    If the primary key attributes local to this table are unloaded, then a SELECT
    must be emitted in order to validate these attributes; note that the primary key
    columns of a joined-table subclass are not part of the “primary key” of the object
    as a whole.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note that a value of `True` is **always** forced onto the subclass mappers;
    that is, it’s not possible for a superclass to specify passive_deletes without
    this taking effect for all subclass mappers.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Using foreign key ON DELETE cascade with ORM relationships](cascades.html#passive-deletes)
    - description of similar feature as used with [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`mapper.passive_updates` - supporting ON UPDATE CASCADE for joined-table inheritance
    mappers'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`passive_updates` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Indicates UPDATE behavior of foreign key columns when a primary key column changes
    on a joined-table inheritance mapping. Defaults to `True`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When True, it is assumed that ON UPDATE CASCADE is configured on the foreign
    key in the database, and that the database will handle propagation of an UPDATE
    from a source column to dependent columns on joined-table rows.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When False, it is assumed that the database does not enforce referential integrity
    and will not be issuing its own CASCADE operation for an update. The unit of work
    process will emit an UPDATE statement for the dependent columns during a primary
    key change.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Mutable Primary Keys / Update Cascades](relationship_persistence.html#passive-updates)
    - description of a similar feature as used with [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`mapper.passive_deletes` - supporting ON DELETE CASCADE for joined-table inheritance
    mappers'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`polymorphic_load` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Specifies “polymorphic loading” behavior for a subclass in an inheritance hierarchy
    (joined and single table inheritance only). Valid values are:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: “‘inline’” - specifies this class should be part of the “with_polymorphic” mappers,
    e.g. its columns will be included in a SELECT query against the base.
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: “‘selectin’” - specifies that when instances of this class are loaded, an additional
    SELECT will be emitted to retrieve the columns specific to this subclass. The
    SELECT uses IN to fetch multiple subclasses at once.
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: New in version 1.2.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Configuring with_polymorphic() on mappers](queryguide/inheritance.html#with-polymorphic-mapper-config)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Using selectin_polymorphic()](queryguide/inheritance.html#polymorphic-selectin)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`polymorphic_on` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Specifies the column, attribute, or SQL expression used to determine the target
    class for an incoming row, when inheriting classes are present.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'May be specified as a string attribute name, or as a SQL expression such as
    a [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    or in a Declarative mapping a [`mapped_column()`](#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") object. It is typically expected that the SQL
    expression corresponds to a column in the base-most mapped [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'It may also be specified as a SQL expression, as in this example where we use
    the [`case()`](../core/sqlelement.html#sqlalchemy.sql.expression.case "sqlalchemy.sql.expression.case")
    construct to provide a conditional approach:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'It may also refer to any attribute using its string name, which is of particular
    use when using annotated column configurations:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When setting `polymorphic_on` to reference an attribute or expression that’s
    not present in the locally mapped [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), yet the value of the discriminator should be persisted
    to the database, the value of the discriminator is not automatically set on new
    instances; this must be handled by the user, either through manual means or via
    event listeners. A typical approach to establishing such a listener looks like:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Where above, we assign the value of `polymorphic_identity` for the mapped class
    to the `discriminator` attribute, thus persisting the value to the `discriminator`
    column in the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Currently, **only one discriminator column may be set**, typically on the base-most
    class in the hierarchy. “Cascading” polymorphic columns are not yet supported.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Mapping Class Inheritance Hierarchies](inheritance.html)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`polymorphic_identity` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Specifies the value which identifies this particular class as returned by the
    column expression referred to by the [`Mapper.polymorphic_on`](#sqlalchemy.orm.Mapper.params.polymorphic_on
    "sqlalchemy.orm.Mapper") setting. As rows are received, the value corresponding
    to the [`Mapper.polymorphic_on`](#sqlalchemy.orm.Mapper.params.polymorphic_on
    "sqlalchemy.orm.Mapper") column expression is compared to this value, indicating
    which subclass should be used for the newly reconstructed object.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Mapping Class Inheritance Hierarchies](inheritance.html)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`properties` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A dictionary mapping the string names of object attributes to [`MapperProperty`](internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty") instances, which define the persistence behavior
    of that attribute. Note that [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects present in the mapped [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") are automatically placed into `ColumnProperty` instances
    upon mapping, unless overridden. When using Declarative, this argument is passed
    automatically, based on all those [`MapperProperty`](internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty") instances declared in the declared class body.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[The properties dictionary](mapping_styles.html#orm-mapping-properties) - in
    the [ORM Mapped Class Overview](mapping_styles.html)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`primary_key` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A list of [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    objects, or alternatively string names of attribute names which refer to [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"), which define the primary key to be used against this
    mapper’s selectable unit. This is normally simply the primary key of the `local_table`,
    but can be overridden here.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Changed in version 2.0.2: [`Mapper.primary_key`](#sqlalchemy.orm.Mapper.params.primary_key
    "sqlalchemy.orm.Mapper") arguments may be indicated as string attribute names
    as well.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Mapping to an Explicit Set of Primary Key Columns](declarative_tables.html#mapper-primary-key)
    - background and example use'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`version_id_col` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    that will be used to keep a running version id of rows in the table. This is used
    to detect concurrent updates or the presence of stale data in a flush. The methodology
    is to detect if an UPDATE statement does not match the last known version id,
    a [`StaleDataError`](exceptions.html#sqlalchemy.orm.exc.StaleDataError "sqlalchemy.orm.exc.StaleDataError")
    exception is thrown. By default, the column must be of [`Integer`](../core/type_basics.html#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer") type, unless `version_id_generator` specifies an alternative
    version generator.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Configuring a Version Counter](versioning.html#mapper-version-counter) - discussion
    of version counting and rationale.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`version_id_generator` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Define how new version ids should be generated. Defaults to `None`, which indicates
    that a simple integer counting scheme be employed. To provide a custom versioning
    scheme, provide a callable function of the form:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Alternatively, server-side versioning functions such as triggers, or programmatic
    versioning schemes outside of the version id generator may be used, by specifying
    the value `False`. Please see [Server Side Version Counters](versioning.html#server-side-version-counter)
    for a discussion of important points when using this option.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Custom Version Counters / Types](versioning.html#custom-version-counter)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Server Side Version Counters](versioning.html#server-side-version-counter)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`with_polymorphic` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A tuple in the form `(<classes>, <selectable>)` indicating the default style
    of “polymorphic” loading, that is, which tables are queried at once. <classes>
    is any single or list of mappers and/or classes indicating the inherited classes
    that should be loaded at once. The special value `'*'` may be used to indicate
    all descending classes should be loaded immediately. The second tuple argument
    <selectable> indicates a selectable that will be used to query for multiple classes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The [`Mapper.polymorphic_load`](#sqlalchemy.orm.Mapper.params.polymorphic_load
    "sqlalchemy.orm.Mapper") parameter may be preferable over the use of [`Mapper.with_polymorphic`](#sqlalchemy.orm.Mapper.params.with_polymorphic
    "sqlalchemy.orm.Mapper") in modern mappings to indicate a per-subclass technique
    of indicating polymorphic loading styles.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Configuring with_polymorphic() on mappers](queryguide/inheritance.html#with-polymorphic-mapper-config)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: Add the given dictionary of properties to this mapper, using add_property.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: Add an individual MapperProperty to this mapper.
  prefs: []
  type: TYPE_NORMAL
- en: If the mapper has not been configured yet, just adds the property to the initial
    properties dictionary sent to the constructor. If this Mapper has already been
    configured, then the given MapperProperty is configured immediately.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: A namespace of all [`InspectionAttr`](internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.InspectionAttr") attributes associated with the mapped class.
  prefs: []
  type: TYPE_NORMAL
- en: These attributes are in all cases Python [descriptors](../glossary.html#term-descriptors)
    associated with the mapped class or its superclasses.
  prefs: []
  type: TYPE_NORMAL
- en: This namespace includes attributes that are mapped to the class as well as attributes
    declared by extension modules. It includes any Python descriptor type that inherits
    from [`InspectionAttr`](internals.html#sqlalchemy.orm.InspectionAttr "sqlalchemy.orm.InspectionAttr").
    This includes [`QueryableAttribute`](internals.html#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute"), as well as extension types such as [`hybrid_property`](extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property"), [`hybrid_method`](extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_method
    "sqlalchemy.ext.hybrid.hybrid_method") and [`AssociationProxy`](extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy").
  prefs: []
  type: TYPE_NORMAL
- en: To distinguish between mapped attributes and extension attributes, the attribute
    [`InspectionAttr.extension_type`](internals.html#sqlalchemy.orm.InspectionAttr.extension_type
    "sqlalchemy.orm.InspectionAttr.extension_type") will refer to a constant that
    distinguishes between different extension types.
  prefs: []
  type: TYPE_NORMAL
- en: 'The sorting of the attributes is based on the following rules:'
  prefs: []
  type: TYPE_NORMAL
- en: Iterate through the class and its superclasses in order from subclass to superclass
    (i.e. iterate through `cls.__mro__`)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For each class, yield the attributes in the order in which they appear in `__dict__`,
    with the exception of those in step 3 below. In Python 3.6 and above this ordering
    will be the same as that of the class’ construction, with the exception of attributes
    that were added after the fact by the application or the mapper.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If a certain attribute key is also in the superclass `__dict__`, then it’s included
    in the iteration for that class, and not the class in which it first appeared.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The above process produces an ordering that is deterministic in terms of the
    order in which attributes were assigned to the class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.3.19: ensured deterministic ordering for [`Mapper.all_orm_descriptors()`](#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors").'
  prefs: []
  type: TYPE_NORMAL
- en: When dealing with a [`QueryableAttribute`](internals.html#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute"), the `QueryableAttribute.property` attribute
    refers to the [`MapperProperty`](internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty") property, which is what you get when referring
    to the collection of mapped properties via [`Mapper.attrs`](#sqlalchemy.orm.Mapper.attrs
    "sqlalchemy.orm.Mapper.attrs").
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: The [`Mapper.all_orm_descriptors`](#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors") accessor namespace is an instance
    of `OrderedProperties`. This is a dictionary-like object which includes a small
    number of named methods such as `OrderedProperties.items()` and `OrderedProperties.values()`.
    When accessing attributes dynamically, favor using the dict-access scheme, e.g.
    `mapper.all_orm_descriptors[somename]` over `getattr(mapper.all_orm_descriptors,
    somename)` to avoid name collisions.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Mapper.attrs`](#sqlalchemy.orm.Mapper.attrs "sqlalchemy.orm.Mapper.attrs")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: A namespace of all [`MapperProperty`](internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty") objects associated this mapper.
  prefs: []
  type: TYPE_NORMAL
- en: This is an object that provides each property based on its key name. For instance,
    the mapper for a `User` class which has `User.name` attribute would provide `mapper.attrs.name`,
    which would be the [`ColumnProperty`](internals.html#sqlalchemy.orm.ColumnProperty
    "sqlalchemy.orm.ColumnProperty") representing the `name` column. The namespace
    object can also be iterated, which would yield each [`MapperProperty`](internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty").
  prefs: []
  type: TYPE_NORMAL
- en: '[`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper") has several pre-filtered
    views of this attribute which limit the types of properties returned, including
    [`synonyms`](#sqlalchemy.orm.Mapper.synonyms "sqlalchemy.orm.Mapper.synonyms"),
    [`column_attrs`](#sqlalchemy.orm.Mapper.column_attrs "sqlalchemy.orm.Mapper.column_attrs"),
    [`relationships`](#sqlalchemy.orm.Mapper.relationships "sqlalchemy.orm.Mapper.relationships"),
    and [`composites`](#sqlalchemy.orm.Mapper.composites "sqlalchemy.orm.Mapper.composites").'
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: The [`Mapper.attrs`](#sqlalchemy.orm.Mapper.attrs "sqlalchemy.orm.Mapper.attrs")
    accessor namespace is an instance of `OrderedProperties`. This is a dictionary-like
    object which includes a small number of named methods such as `OrderedProperties.items()`
    and `OrderedProperties.values()`. When accessing attributes dynamically, favor
    using the dict-access scheme, e.g. `mapper.attrs[somename]` over `getattr(mapper.attrs,
    somename)` to avoid name collisions.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Mapper.all_orm_descriptors`](#sqlalchemy.orm.Mapper.all_orm_descriptors "sqlalchemy.orm.Mapper.all_orm_descriptors")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: The base-most [`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper") in
    an inheritance chain.
  prefs: []
  type: TYPE_NORMAL
- en: In a non-inheriting scenario, this attribute will always be this [`Mapper`](#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper"). In an inheritance scenario, it references the [`Mapper`](#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") which is parent to all other [`Mapper`](#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") objects in the inheritance chain.
  prefs: []
  type: TYPE_NORMAL
- en: This is a *read only* attribute determined during mapper construction. Behavior
    is undefined if directly modified.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: A synonym for [`Mapper.columns`](#sqlalchemy.orm.Mapper.columns "sqlalchemy.orm.Mapper.columns").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: Iterate each element and its mapper in an object graph, for all relationships
    that meet the given cascade rule.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`type_` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The name of the cascade rule (i.e. `"save-update"`, `"delete"`, etc.).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: the `"all"` cascade is not accepted here. For a generic object traversal function,
    see [How do I walk all objects that are related to a given object?](../faq/sessions.html#faq-walk-objects).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`state` – The lead InstanceState. child items will be processed per the relationships
    defined for this object’s mapper.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the method yields individual object instances.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Cascades](cascades.html#unitofwork-cascades)'
  prefs: []
  type: TYPE_NORMAL
- en: '[How do I walk all objects that are related to a given object?](../faq/sessions.html#faq-walk-objects)
    - illustrates a generic function to traverse all objects without relying on cascades.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: The class to which this [`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    is mapped.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: The [`ClassManager`](internals.html#sqlalchemy.orm.ClassManager "sqlalchemy.orm.ClassManager")
    which maintains event listeners and class-bound descriptors for this [`Mapper`](#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper").
  prefs: []
  type: TYPE_NORMAL
- en: This is a *read only* attribute determined during mapper construction. Behavior
    is undefined if directly modified.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: Return a namespace of all [`ColumnProperty`](internals.html#sqlalchemy.orm.ColumnProperty
    "sqlalchemy.orm.ColumnProperty") properties maintained by this [`Mapper`](#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Mapper.attrs`](#sqlalchemy.orm.Mapper.attrs "sqlalchemy.orm.Mapper.attrs")
    - namespace of all [`MapperProperty`](internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty") objects.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: A collection of [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    or other scalar expression objects maintained by this [`Mapper`](#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper").
  prefs: []
  type: TYPE_NORMAL
- en: The collection behaves the same as that of the `c` attribute on any [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object, except that only those columns included in
    this mapping are present, and are keyed based on the attribute name defined in
    the mapping, not necessarily the `key` attribute of the [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") itself. Additionally, scalar expressions mapped by
    [`column_property()`](#sqlalchemy.orm.column_property "sqlalchemy.orm.column_property")
    are also present here.
  prefs: []
  type: TYPE_NORMAL
- en: This is a *read only* attribute determined during mapper construction. Behavior
    is undefined if directly modified.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: Return true if the given mapper shares a common inherited parent as this mapper.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: Return a namespace of all [`Composite`](internals.html#sqlalchemy.orm.Composite
    "sqlalchemy.orm.Composite") properties maintained by this [`Mapper`](#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Mapper.attrs`](#sqlalchemy.orm.Mapper.attrs "sqlalchemy.orm.Mapper.attrs")
    - namespace of all [`MapperProperty`](internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty") objects.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: Represent `True` if this [`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    is a concrete inheritance mapper.
  prefs: []
  type: TYPE_NORMAL
- en: This is a *read only* attribute determined during mapper construction. Behavior
    is undefined if directly modified.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: Represent `True` if this [`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    has been configured.
  prefs: []
  type: TYPE_NORMAL
- en: This is a *read only* attribute determined during mapper construction. Behavior
    is undefined if directly modified.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`configure_mappers()`](#sqlalchemy.orm.configure_mappers "sqlalchemy.orm.configure_mappers").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: Part of the inspection API.
  prefs: []
  type: TYPE_NORMAL
- en: Returns self.class_.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: return a MapperProperty associated with the given key.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: Given a [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    object, return the [`MapperProperty`](internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty") which maps this column.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: Return the identity key for the given instance, based on its primary key attributes.
  prefs: []
  type: TYPE_NORMAL
- en: If the instance’s state is expired, calling this method will result in a database
    check to see if the object has been deleted. If the row no longer exists, [`ObjectDeletedError`](exceptions.html#sqlalchemy.orm.exc.ObjectDeletedError
    "sqlalchemy.orm.exc.ObjectDeletedError") is raised.
  prefs: []
  type: TYPE_NORMAL
- en: This value is typically also found on the instance state under the attribute
    name key.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: Return an identity-map key for use in storing/retrieving an item from an identity
    map.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**primary_key** – A list of values indicating the identifier.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: Return an identity-map key for use in storing/retrieving an item from the identity
    map.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**row** –'
  prefs: []
  type: TYPE_NORMAL
- en: A [`Row`](../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    or [`RowMapping`](../core/connections.html#sqlalchemy.engine.RowMapping "sqlalchemy.engine.RowMapping")
    produced from a result set that selected from the ORM mapped primary key columns.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 2.0: [`Row`](../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") or [`RowMapping`](../core/connections.html#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping") are accepted for the “row” argument'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: References the [`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper") which
    this [`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper") inherits from,
    if any.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: Part of the inspection API.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: return true if the other mapper is an inheriting sibling to this one. common
    parent but different branch
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: Return True if the this mapper inherits from the given mapper.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: return an iterator of all MapperProperty objects.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: The immediate [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") to which this [`Mapper`](#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") refers.
  prefs: []
  type: TYPE_NORMAL
- en: Typically is an instance of [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), may be any [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: The “local” table is the selectable that the [`Mapper`](#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") is directly responsible for managing from an attribute
    access and flush perspective. For non-inheriting mappers, [`Mapper.local_table`](#sqlalchemy.orm.Mapper.local_table
    "sqlalchemy.orm.Mapper.local_table") will be the same as [`Mapper.persist_selectable`](#sqlalchemy.orm.Mapper.persist_selectable
    "sqlalchemy.orm.Mapper.persist_selectable"). For inheriting mappers, [`Mapper.local_table`](#sqlalchemy.orm.Mapper.local_table
    "sqlalchemy.orm.Mapper.local_table") refers to the specific portion of [`Mapper.persist_selectable`](#sqlalchemy.orm.Mapper.persist_selectable
    "sqlalchemy.orm.Mapper.persist_selectable") that includes the columns to which
    this [`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper") is loading/persisting,
    such as a particular [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    within a join.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Mapper.persist_selectable`](#sqlalchemy.orm.Mapper.persist_selectable "sqlalchemy.orm.Mapper.persist_selectable").'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Mapper.selectable`](#sqlalchemy.orm.Mapper.selectable "sqlalchemy.orm.Mapper.selectable").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: 'Deprecated since version 1.3: Use .persist_selectable'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: Part of the inspection API.
  prefs: []
  type: TYPE_NORMAL
- en: Returns self.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: Represent `True` if this [`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    is a “non-primary” mapper, e.g. a mapper that is used only to select rows but
    not for persistence management.
  prefs: []
  type: TYPE_NORMAL
- en: This is a *read only* attribute determined during mapper construction. Behavior
    is undefined if directly modified.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: The [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") to which this [`Mapper`](#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") is mapped.
  prefs: []
  type: TYPE_NORMAL
- en: Typically is an instance of [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), may be any [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: The [`Mapper.persist_selectable`](#sqlalchemy.orm.Mapper.persist_selectable
    "sqlalchemy.orm.Mapper.persist_selectable") is similar to [`Mapper.local_table`](#sqlalchemy.orm.Mapper.local_table
    "sqlalchemy.orm.Mapper.local_table"), but represents the [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") that represents the inheriting class hierarchy
    overall in an inheritance scenario.
  prefs: []
  type: TYPE_NORMAL
- en: :attr.`.Mapper.persist_selectable` is also separate from the [`Mapper.selectable`](#sqlalchemy.orm.Mapper.selectable
    "sqlalchemy.orm.Mapper.selectable") attribute, the latter of which may be an alternate
    subquery used for selecting columns. :attr.`.Mapper.persist_selectable` is oriented
    towards columns that will be written on a persist operation.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Mapper.selectable`](#sqlalchemy.orm.Mapper.selectable "sqlalchemy.orm.Mapper.selectable").'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Mapper.local_table`](#sqlalchemy.orm.Mapper.local_table "sqlalchemy.orm.Mapper.local_table").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: Represent an identifier which is matched against the [`Mapper.polymorphic_on`](#sqlalchemy.orm.Mapper.polymorphic_on
    "sqlalchemy.orm.Mapper.polymorphic_on") column during result row loading.
  prefs: []
  type: TYPE_NORMAL
- en: Used only with inheritance, this object can be of any type which is comparable
    to the type of column represented by [`Mapper.polymorphic_on`](#sqlalchemy.orm.Mapper.polymorphic_on
    "sqlalchemy.orm.Mapper.polymorphic_on").
  prefs: []
  type: TYPE_NORMAL
- en: This is a *read only* attribute determined during mapper construction. Behavior
    is undefined if directly modified.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: Iterate through the collection including this mapper and all descendant mappers.
  prefs: []
  type: TYPE_NORMAL
- en: This includes not just the immediately inheriting mappers but all their inheriting
    mappers as well.
  prefs: []
  type: TYPE_NORMAL
- en: To iterate through an entire hierarchy, use `mapper.base_mapper.polymorphic_iterator()`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: A mapping of “polymorphic identity” identifiers mapped to [`Mapper`](#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") instances, within an inheritance scenario.
  prefs: []
  type: TYPE_NORMAL
- en: The identifiers can be of any type which is comparable to the type of column
    represented by [`Mapper.polymorphic_on`](#sqlalchemy.orm.Mapper.polymorphic_on
    "sqlalchemy.orm.Mapper.polymorphic_on").
  prefs: []
  type: TYPE_NORMAL
- en: An inheritance chain of mappers will all reference the same polymorphic map
    object. The object is used to correlate incoming result rows to target mappers.
  prefs: []
  type: TYPE_NORMAL
- en: This is a *read only* attribute determined during mapper construction. Behavior
    is undefined if directly modified.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: The [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    or SQL expression specified as the `polymorphic_on` argument for this [`Mapper`](#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper"), within an inheritance scenario.
  prefs: []
  type: TYPE_NORMAL
- en: This attribute is normally a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") instance but may also be an expression, such as one
    derived from [`cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.cast
    "sqlalchemy.sql.expression.cast").
  prefs: []
  type: TYPE_NORMAL
- en: This is a *read only* attribute determined during mapper construction. Behavior
    is undefined if directly modified.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: An iterable containing the collection of [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects which comprise the ‘primary key’ of the mapped
    table, from the perspective of this [`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper").
  prefs: []
  type: TYPE_NORMAL
- en: This list is against the selectable in [`Mapper.persist_selectable`](#sqlalchemy.orm.Mapper.persist_selectable
    "sqlalchemy.orm.Mapper.persist_selectable"). In the case of inheriting mappers,
    some columns may be managed by a superclass mapper. For example, in the case of
    a [`Join`](../core/selectable.html#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join"),
    the primary key is determined by all of the primary key columns across all tables
    referenced by the [`Join`](../core/selectable.html#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join").
  prefs: []
  type: TYPE_NORMAL
- en: The list is also not necessarily the same as the primary key column collection
    associated with the underlying tables; the [`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    features a `primary_key` argument that can override what the [`Mapper`](#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") considers as primary key columns.
  prefs: []
  type: TYPE_NORMAL
- en: This is a *read only* attribute determined during mapper construction. Behavior
    is undefined if directly modified.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: Return the list of primary key values for the given instance.
  prefs: []
  type: TYPE_NORMAL
- en: If the instance’s state is expired, calling this method will result in a database
    check to see if the object has been deleted. If the row no longer exists, [`ObjectDeletedError`](exceptions.html#sqlalchemy.orm.exc.ObjectDeletedError
    "sqlalchemy.orm.exc.ObjectDeletedError") is raised.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: Return the primary mapper corresponding to this mapper’s class key (class).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: A namespace of all [`Relationship`](internals.html#sqlalchemy.orm.Relationship
    "sqlalchemy.orm.Relationship") properties maintained by this [`Mapper`](#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper").
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: the [`Mapper.relationships`](#sqlalchemy.orm.Mapper.relationships "sqlalchemy.orm.Mapper.relationships")
    accessor namespace is an instance of `OrderedProperties`. This is a dictionary-like
    object which includes a small number of named methods such as `OrderedProperties.items()`
    and `OrderedProperties.values()`. When accessing attributes dynamically, favor
    using the dict-access scheme, e.g. `mapper.relationships[somename]` over `getattr(mapper.relationships,
    somename)` to avoid name collisions.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Mapper.attrs`](#sqlalchemy.orm.Mapper.attrs "sqlalchemy.orm.Mapper.attrs")
    - namespace of all [`MapperProperty`](internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty") objects.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: The `FromClause` construct this [`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    selects from by default.
  prefs: []
  type: TYPE_NORMAL
- en: Normally, this is equivalent to [`persist_selectable`](#sqlalchemy.orm.Mapper.persist_selectable
    "sqlalchemy.orm.Mapper.persist_selectable"), unless the `with_polymorphic` feature
    is in use, in which case the full “polymorphic” selectable is returned.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: The collection including this mapper and all descendant mappers.
  prefs: []
  type: TYPE_NORMAL
- en: This includes not just the immediately inheriting mappers but all their inheriting
    mappers as well.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: Represent `True` if this [`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    is a single table inheritance mapper.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Mapper.local_table`](#sqlalchemy.orm.Mapper.local_table "sqlalchemy.orm.Mapper.local_table")
    will be `None` if this flag is set.'
  prefs: []
  type: TYPE_NORMAL
- en: This is a *read only* attribute determined during mapper construction. Behavior
    is undefined if directly modified.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: Return a namespace of all [`Synonym`](internals.html#sqlalchemy.orm.Synonym
    "sqlalchemy.orm.Synonym") properties maintained by this [`Mapper`](#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Mapper.attrs`](#sqlalchemy.orm.Mapper.attrs "sqlalchemy.orm.Mapper.attrs")
    - namespace of all [`MapperProperty`](internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty") objects.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: A sequence containing the collection of [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") or `TableClause` objects which this [`Mapper`](#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") is aware of.
  prefs: []
  type: TYPE_NORMAL
- en: If the mapper is mapped to a [`Join`](../core/selectable.html#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join"), or an [`Alias`](../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") representing a [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select"), the individual [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects that comprise the full construct will be represented
    here.
  prefs: []
  type: TYPE_NORMAL
- en: This is a *read only* attribute determined during mapper construction. Behavior
    is undefined if directly modified.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: An immutable dictionary of attributes which have been decorated using the [`validates()`](mapped_attributes.html#sqlalchemy.orm.validates
    "sqlalchemy.orm.validates") decorator.
  prefs: []
  type: TYPE_NORMAL
- en: The dictionary contains string attribute names as keys mapped to the actual
    validation method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: The list of [`Mapper`](#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper") objects
    included in the default “polymorphic” query.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: Mixin class to indicate when mapping this class, also convert it to be a dataclass.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Declarative Dataclass Mapping](dataclasses.html#orm-declarative-native-dataclasses)
    - complete background on SQLAlchemy native dataclass mapping'
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: A protocol representing a SQLAlchemy mapped class.
  prefs: []
  type: TYPE_NORMAL
- en: The protocol is generic on the type of class, use `MappedClassProtocol[Any]`
    to allow any mapped class.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.MappedClassProtocol`](#sqlalchemy.orm.MappedClassProtocol
    "sqlalchemy.orm.MappedClassProtocol") (`typing_extensions.Protocol`)
  prefs: []
  type: TYPE_NORMAL
