- en: 1.0 Changelog
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1.0 变更日志
- en: 原文：[https://docs.sqlalchemy.org/en/20/changelog/changelog_10.html](https://docs.sqlalchemy.org/en/20/changelog/changelog_10.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/changelog/changelog_10.html](https://docs.sqlalchemy.org/en/20/changelog/changelog_10.html)
- en: 1.0.19
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.0.19
- en: 'Released: August 3, 2017'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2017年8月3日
- en: oracle
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [performance] [bug] [py2k]**'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [performance] [bug] [py2k]**'
- en: Fixed performance regression caused by the fix for [#3937](https://www.sqlalchemy.org/trac/ticket/3937)
    where cx_Oracle as of version 5.3 dropped the `.UNICODE` symbol from its namespace,
    which was interpreted as cx_Oracle’s “WITH_UNICODE” mode being turned on unconditionally,
    which invokes functions on the SQLAlchemy side which convert all strings to unicode
    unconditionally and causing a performance impact. In fact, per cx_Oracle’s author
    the “WITH_UNICODE” mode has been removed entirely as of 5.1, so the expensive
    unicode conversion functions are no longer necessary and are disabled if cx_Oracle
    5.1 or greater is detected under Python 2\. The warning against “WITH_UNICODE”
    mode that was removed under [#3937](https://www.sqlalchemy.org/trac/ticket/3937)
    is also restored.
  id: totrans-6
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由于修复了[#3937](https://www.sqlalchemy.org/trac/ticket/3937)引起的性能回退，其中cx_Oracle在5.3版本中从其命名空间中删除了`.UNICODE`符号，这被解释为cx_Oracle的“WITH_UNICODE”模式被无条件地打开，从而在SQLAlchemy端调用函数将所有字符串无条件地转换为unicode并导致性能影响。实际上，根据cx_Oracle的作者，自5.1起，“WITH_UNICODE”模式已经被完全删除，因此不再需要昂贵的unicode转换函数，并且如果在Python
    2下检测到cx_Oracle 5.1或更高版本，则会禁用它们。还恢复了在[#3937](https://www.sqlalchemy.org/trac/ticket/3937)中删除的有关“WITH_UNICODE”模式的警告。
- en: 'References: [#4035](https://www.sqlalchemy.org/trac/ticket/4035)'
  id: totrans-7
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#4035](https://www.sqlalchemy.org/trac/ticket/4035)
- en: 1.0.18
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.0.18
- en: 'Released: July 24, 2017'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2017年7月24日
- en: oracle
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: A fix to cx_Oracle’s WITH_UNICODE mode which was uncovered by the fact that
    cx_Oracle 5.3 now seems to hardcode this flag on in the build; an internal method
    that uses this mode wasn’t using the correct signature.
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过发现cx_Oracle 5.3现在似乎在构建中硬编码了此标志，从而暴露了cx_Oracle的WITH_UNICODE模式的修复；使用此模式的内部方法未使用正确的签名。
- en: 'References: [#3937](https://www.sqlalchemy.org/trac/ticket/3937)'
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3937](https://www.sqlalchemy.org/trac/ticket/3937)
- en: tests
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: tests
- en: '**[tests] [bug] [py3k]**'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[tests] [bug] [py3k]**'
- en: Fixed issue in testing fixtures which was incompatible with a change made as
    of Python 3.6.2 involving context managers.
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了与Python 3.6.2更改不兼容的测试装置中的问题，涉及到上下文管理器。
- en: 'References: [#4034](https://www.sqlalchemy.org/trac/ticket/4034)'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#4034](https://www.sqlalchemy.org/trac/ticket/4034)
- en: 1.0.17
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.0.17
- en: 'Released: January 17, 2017'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2017年1月17日
- en: orm
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug involving joined eager loading against multiple entities when polymorphic
    inheritance is also in use which would throw “‘NoneType’ object has no attribute
    ‘isa’”. The issue was introduced by the fix for [#3611](https://www.sqlalchemy.org/trac/ticket/3611).
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了针对多态继承也在使用的情况下对多个实体进行连接贪婪加载时会抛出“'NoneType'对象没有'isa'属性”的错误的错误。该问题是由于修复[#3611](https://www.sqlalchemy.org/trac/ticket/3611)引入的。
- en: 'References: [#3884](https://www.sqlalchemy.org/trac/ticket/3884)'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3884](https://www.sqlalchemy.org/trac/ticket/3884)
- en: misc
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[bug] [py3k]**'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [py3k]**'
- en: Fixed Python 3.6 DeprecationWarnings related to escaped strings without the
    ‘r’ modifier, and added test coverage for Python 3.6.
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了与没有'r'修饰符的转义字符串相关的Python 3.6 DeprecationWarnings，并为Python 3.6添加了测试覆盖范围。
- en: 'References: [#3886](https://www.sqlalchemy.org/trac/ticket/3886)'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3886](https://www.sqlalchemy.org/trac/ticket/3886)
- en: 1.0.16
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.0.16
- en: 'Released: November 15, 2016'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2016年11月15日
- en: orm
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in [`Session.bulk_update_mappings()`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_update_mappings
    "sqlalchemy.orm.Session.bulk_update_mappings") where an alternate-named primary
    key attribute would not track properly into the UPDATE statement.
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Session.bulk_update_mappings()`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_update_mappings
    "sqlalchemy.orm.Session.bulk_update_mappings")中一个备用命名的主键属性无法正确跟踪到UPDATE语句的错误。
- en: 'References: [#3849](https://www.sqlalchemy.org/trac/ticket/3849)'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3849](https://www.sqlalchemy.org/trac/ticket/3849)
- en: '**[orm] [bug]**'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where joined eager loading would fail for a polymorphically- loaded
    mapper, where the polymorphic_on was set to an un-mapped expression such as a
    CASE expression.
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了对多态加载映射器的连接贪婪加载将失败的错误，其中多态性设置为未映射表达式（如CASE表达式）的情况。
- en: 'References: [#3800](https://www.sqlalchemy.org/trac/ticket/3800)'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3800](https://www.sqlalchemy.org/trac/ticket/3800)
- en: '**[orm] [bug]**'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where the ArgumentError raised for an invalid bind sent to a Session
    via [`Session.bind_mapper()`](../orm/session_api.html#sqlalchemy.orm.Session.bind_mapper
    "sqlalchemy.orm.Session.bind_mapper"), [`Session.bind_table()`](../orm/session_api.html#sqlalchemy.orm.Session.bind_table
    "sqlalchemy.orm.Session.bind_table"), or the constructor would fail to be correctly
    raised.
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，当通过[`Session.bind_mapper()`](../orm/session_api.html#sqlalchemy.orm.Session.bind_mapper
    "sqlalchemy.orm.Session.bind_mapper")、[`Session.bind_table()`](../orm/session_api.html#sqlalchemy.orm.Session.bind_table
    "sqlalchemy.orm.Session.bind_table")或构造函数发送给Session的无效绑定时，引发的ArgumentError未能正确引发。
- en: 'References: [#3798](https://www.sqlalchemy.org/trac/ticket/3798)'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3798](https://www.sqlalchemy.org/trac/ticket/3798)
- en: '**[orm] [bug]**'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed bug in `Session.bulk_save()` where an UPDATE would not function correctly
    in conjunction with a mapping that implements a version id counter.
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了`Session.bulk_save()`中的bug，其中UPDATE与实现版本id计数器的映射结合使用时无法正常工作。
- en: 'References: [#3781](https://www.sqlalchemy.org/trac/ticket/3781)'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3781](https://www.sqlalchemy.org/trac/ticket/3781)
- en: '**[orm] [bug]**'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed bug where the [`Mapper.attrs`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.attrs
    "sqlalchemy.orm.Mapper.attrs"), [`Mapper.all_orm_descriptors`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors") and other derived attributes would
    fail to refresh when mapper properties or other ORM constructs were added to the
    mapper/class after these accessors were first called.
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当首次调用mapper属性或其他ORM构造添加到mapper/class后，[`Mapper.attrs`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.attrs
    "sqlalchemy.orm.Mapper.attrs")、[`Mapper.all_orm_descriptors`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors")和其他派生属性无法刷新的bug。
- en: 'References: [#3778](https://www.sqlalchemy.org/trac/ticket/3778)'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3778](https://www.sqlalchemy.org/trac/ticket/3778)
- en: mssql
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [错误]**'
- en: Changed the query used to get “default schema name”, from one that queries the
    database principals table to using the “schema_name()” function, as issues have
    been reported that the former system was unavailable on the Azure Data Warehouse
    edition. It is hoped that this will finally work across all SQL Server versions
    and authentication styles.
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更改了用于获取“默认模式名称”的查询，从查询数据库主体表的查询到使用“schema_name()”函数，因为已报告在Azure Data Warehouse版本上前一系统不可用的问题。希望这将最终在所有SQL
    Server版本和认证样式上正常工作。
- en: 'References: [#3810](https://www.sqlalchemy.org/trac/ticket/3810)'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3810](https://www.sqlalchemy.org/trac/ticket/3810)
- en: '**[mssql] [bug]**'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [错误]**'
- en: Updated the server version info scheme for pyodbc to use SQL Server SERVERPROPERTY(),
    rather than relying upon pyodbc.SQL_DBMS_VER, which continues to be unreliable
    particularly with FreeTDS.
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新了pyodbc的服务器版本信息方案，使用SQL Server SERVERPROPERTY()，而不是依赖于pyodbc.SQL_DBMS_VER，后者在FreeTDS中仍然不可靠。
- en: 'References: [#3814](https://www.sqlalchemy.org/trac/ticket/3814)'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3814](https://www.sqlalchemy.org/trac/ticket/3814)
- en: '**[mssql] [bug]**'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [错误]**'
- en: Added error code 20017 “unexpected EOF from the server” to the list of disconnect
    exceptions that result in a connection pool reset. Pull request courtesy Ken Robbins.
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将错误代码20017“服务器意外的EOF”添加到导致连接池重置的断开异常列表中。感谢Ken Robbins的拉取请求。
- en: 'References: [#3791](https://www.sqlalchemy.org/trac/ticket/3791)'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3791](https://www.sqlalchemy.org/trac/ticket/3791)
- en: '**[mssql] [bug]**'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [错误]**'
- en: Fixed bug in pyodbc dialect (as well as in the mostly non-working adodbapi dialect)
    whereby a semicolon present in the password or username fields could be interpreted
    as a separator for another token; the values are now quoted when semicolons are
    present.
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了pyodbc方言中的bug（以及大部分不起作用的adodbapi方言中的bug），其中密码或用户名字段中存在的分号可能被解释为另一个标记的分隔符；当分号存在时，现在对值进行引用。
- en: 'References: [#3762](https://www.sqlalchemy.org/trac/ticket/3762)'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3762](https://www.sqlalchemy.org/trac/ticket/3762)
- en: misc
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [orm.declarative]**'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [orm.declarative]**'
- en: Fixed bug where setting up a single-table inh subclass of a joined-table subclass
    which included an extra column would corrupt the foreign keys collection of the
    mapped table, thereby interfering with the initialization of relationships.
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了设置单表继承子类的bug，该子类包括额外列，会破坏映射表的外键集合，从而干扰关系的初始化。
- en: 'References: [#3797](https://www.sqlalchemy.org/trac/ticket/3797)'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3797](https://www.sqlalchemy.org/trac/ticket/3797)
- en: 1.0.15
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.0.15
- en: 'Released: September 1, 2016'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2016年9月1日
- en: orm
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed bug in subquery eager loading where a subqueryload of an “of_type()” object
    linked to a second subqueryload of a plain mapped class, or a longer chain of
    several “of_type()” attributes, would fail to link the joins correctly.
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了子查询加载中的错误，其中对“of_type()”对象的子查询加载链接到第二个普通映射类的子查询加载，或者几个“of_type()”属性的较长链，将无法正确链接连接。
- en: 'References: [#3773](https://www.sqlalchemy.org/trac/ticket/3773), [#3774](https://www.sqlalchemy.org/trac/ticket/3774)'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3773](https://www.sqlalchemy.org/trac/ticket/3773), [#3774](https://www.sqlalchemy.org/trac/ticket/3774)
- en: sql
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误]**'
- en: Fixed bug in [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    where the internal method `_reset_exported()` would corrupt the state of the object.
    This method is intended for selectable objects and is called by the ORM in some
    cases; an erroneous mapper configuration would could lead the ORM to call this
    on a [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object.
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")中的错误，其中内部方法`_reset_exported()`会破坏对象的状态。此方法用于可选择对象，并在某些情况下由
    ORM 调用；错误的映射配置可能导致 ORM 在[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象上调用此方法。
- en: 'References: [#3755](https://www.sqlalchemy.org/trac/ticket/3755)'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3755](https://www.sqlalchemy.org/trac/ticket/3755)
- en: mysql
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [错误]**'
- en: 'Added support for parsing MySQL/Connector boolean and integer arguments within
    the URL query string: connection_timeout, connect_timeout, pool_size, get_warnings,
    raise_on_warnings, raw, consume_results, ssl_verify_cert, force_ipv6, pool_reset_session,
    compress, allow_local_infile, use_pure.'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对解析 MySQL/Connector 中布尔值和整数参数的支持，这些参数位于 URL 查询字符串中：connection_timeout, connect_timeout,
    pool_size, get_warnings, raise_on_warnings, raw, consume_results, ssl_verify_cert,
    force_ipv6, pool_reset_session, compress, allow_local_infile, use_pure。
- en: 'References: [#3787](https://www.sqlalchemy.org/trac/ticket/3787)'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3787](https://www.sqlalchemy.org/trac/ticket/3787)
- en: misc
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [ext]**'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [扩展]**'
- en: Fixed bug in `sqlalchemy.ext.baked` where the unbaking of a subquery eager loader
    query would fail due to a variable scoping issue, when multiple subquery loaders
    were involved. Pull request courtesy Mark Hahnenberg.
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了`sqlalchemy.ext.baked`中的错误，其中由于变量作用域问题，在涉及多个子查询加载器时，解开子查询加载器查询的失败。感谢 Mark
    Hahnenberg 提交的拉取请求。
- en: 'References: [#3743](https://www.sqlalchemy.org/trac/ticket/3743)'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3743](https://www.sqlalchemy.org/trac/ticket/3743)
- en: 1.0.14
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.0.14
- en: 'Released: July 6, 2016'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2016年7月6日
- en: examples
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples] [bug]**'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[示例] [错误]**'
- en: Fixed a regression that occurred in the examples/vertical/dictlike-polymorphic.py
    example which prevented it from running.
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 examples/vertical/dictlike-polymorphic.py 示例中发生的回归，导致无法运行。
- en: 'References: [#3704](https://www.sqlalchemy.org/trac/ticket/3704)'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3704](https://www.sqlalchemy.org/trac/ticket/3704)
- en: engine
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [bug] [postgresql]**'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误] [postgresql]**'
- en: Fixed bug in cross-schema foreign key reflection in conjunction with the [`MetaData.schema`](../core/metadata.html#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData") argument, where a referenced table that is present
    in the “default” schema would fail since there would be no way to indicate a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") that has “blank” for a schema. The special symbol `sqlalchemy.schema.BLANK_SCHEMA`
    has been added as an available value for [`Table.schema`](../core/metadata.html#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table") and [`Sequence.schema`](../core/defaults.html#sqlalchemy.schema.Sequence.params.schema
    "sqlalchemy.schema.Sequence"), indicating that the schema name should be forced
    to be `None` even if [`MetaData.schema`](../core/metadata.html#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData") is specified.
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了跨模式外键反射与[`MetaData.schema`](../core/metadata.html#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData")参数结合使用时的错误，其中在“默认”模式中存在的引用表将失败，因为没有办法指示具有“空白”模式的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")。特殊符号`sqlalchemy.schema.BLANK_SCHEMA`已添加为[`Table.schema`](../core/metadata.html#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table")和[`Sequence.schema`](../core/defaults.html#sqlalchemy.schema.Sequence.params.schema
    "sqlalchemy.schema.Sequence")的可用值，指示应强制模式名称为`None`，即���指定了[`MetaData.schema`](../core/metadata.html#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData")。
- en: 'References: [#3716](https://www.sqlalchemy.org/trac/ticket/3716)'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3716](https://www.sqlalchemy.org/trac/ticket/3716)
- en: sql
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误]**'
- en: Fixed issue in SQL math negation operator where the type of the expression would
    no longer be the numeric type of the original. This would cause issues where the
    type determined result set behaviors.
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 SQL 数学否定运算符中的问题，表达式的类型不再是原始表达式的数值类型。这会导致确定结果集行为的类型问题。
- en: 'References: [#3735](https://www.sqlalchemy.org/trac/ticket/3735)'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3735](https://www.sqlalchemy.org/trac/ticket/3735)
- en: '**[sql] [bug]**'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug whereby the `__getstate__` / `__setstate__` methods for sqlalchemy.util.Properties
    were non-working due to the transition in the 1.0 series to `__slots__`. The issue
    potentially impacted some third-party applications. Pull request courtesy Pieter
    Mulder.
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即由于 1.0 系列向`__slots__`的过渡，导致 sqlalchemy.util.Properties 的`__getstate__`
    / `__setstate__`方法无法正常工作。该问题可能影响一些第三方应用程序。感谢 Pieter Mulder 提交的拉取请求。
- en: 'References: [#3728](https://www.sqlalchemy.org/trac/ticket/3728)'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3728](https://www.sqlalchemy.org/trac/ticket/3728)
- en: '**[sql] [bug]**'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: '`FromClause.count()` is pending deprecation for 1.1\. This function makes use
    of an arbitrary column in the table and is not reliable; for Core use, `func.count()`
    should be preferred.'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`FromClause.count()`将在 1.1 版本��被弃用。该函数使用表中的任意列，不可靠；对于 Core 使用，应优先使用`func.count()`。'
- en: 'References: [#3724](https://www.sqlalchemy.org/trac/ticket/3724)'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3724](https://www.sqlalchemy.org/trac/ticket/3724)
- en: '**[sql] [bug]**'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in [`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    structure which would cause it to not clone properly when a union was used, as
    is common in a recursive CTE. The improper cloning would cause errors when the
    CTE is used in various ORM contexts such as that of a [`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property").
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")结构中的一个
    bug，当使用 union 时会导致它无法正确克隆，这在递归 CTE 中很常见。不正确的克隆会导致在各种 ORM 上下文中使用 CTE 时出现错误，比如[`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property")。
- en: 'References: [#3722](https://www.sqlalchemy.org/trac/ticket/3722)'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3722](https://www.sqlalchemy.org/trac/ticket/3722)
- en: '**[sql] [bug]**'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug whereby [`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata") would make a duplicate [`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") for each [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") object that featured the `unique=True` parameter.
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即[`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata")会为每个具有`unique=True`参数的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象创建重复的[`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint")。
- en: 'References: [#3721](https://www.sqlalchemy.org/trac/ticket/3721)'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3721](https://www.sqlalchemy.org/trac/ticket/3721)
- en: postgresql
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug whereby [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") and [`Variant`](../core/type_api.html#sqlalchemy.types.Variant
    "sqlalchemy.types.Variant") types were not deeply inspected enough by the PostgreSQL
    dialect to determine if SMALLSERIAL or BIGSERIAL needed to be rendered rather
    than SERIAL.
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即 PostgreSQL 方言未深入检查[`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")和[`Variant`](../core/type_api.html#sqlalchemy.types.Variant
    "sqlalchemy.types.Variant")类型，以确定是否应该渲染 SMALLSERIAL 或 BIGSERIAL 而不是 SERIAL。
- en: 'References: [#3739](https://www.sqlalchemy.org/trac/ticket/3739)'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3739](https://www.sqlalchemy.org/trac/ticket/3739)
- en: oracle
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed bug in [`Select.with_for_update.of`](../core/selectable.html#sqlalchemy.sql.expression.Select.with_for_update.params.of
    "sqlalchemy.sql.expression.Select.with_for_update"), where the Oracle “rownum”
    approach to LIMIT/OFFSET would fail to accommodate for the expressions inside
    the “OF” clause, which must be stated at the topmost level referring to expression
    within the subquery. The expressions are now added to the subquery if needed.
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Select.with_for_update.of`](../core/selectable.html#sqlalchemy.sql.expression.Select.with_for_update.params.of
    "sqlalchemy.sql.expression.Select.with_for_update")中的一个 bug，在 Oracle 的“rownum”方法中，LIMIT/OFFSET
    无法适应“OF”子句中的表达式，这些表达式必须在顶层引用子查询中的表达式。如果需要，这些表达式现在将添加到子查询中。
- en: 'References: [#3741](https://www.sqlalchemy.org/trac/ticket/3741)'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3741](https://www.sqlalchemy.org/trac/ticket/3741)
- en: 1.0.13
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.0.13
- en: 'Released: May 16, 2016'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2016年5月16日
- en: orm
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in “evaluate” strategy of [`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update") and [`Query.delete()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.delete
    "sqlalchemy.orm.Query.delete") which would fail to accommodate a bound parameter
    with a “callable” value, as which occurs when filtering by a many-to-one equality
    expression along a relationship.
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update")和[`Query.delete()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.delete
    "sqlalchemy.orm.Query.delete")中“evaluate”策略中的bug，该bug无法适应具有“callable”值的绑定参数，当通过关系沿着many-to-one等式表达式进行过滤时会发生这种情况。
- en: 'References: [#3700](https://www.sqlalchemy.org/trac/ticket/3700)'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3700](https://www.sqlalchemy.org/trac/ticket/3700)
- en: '**[orm] [bug]**'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug whereby the event listeners used for backrefs could be inadvertently
    applied multiple times, when using a deep class inheritance hierarchy in conjunction
    with multiple mapper configuration steps.
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即在使用深层类继承层次结构与多个映射器配置步骤同时使用时，用于反向引用的事件侦听器可能会被错误地应用多次。
- en: 'References: [#3710](https://www.sqlalchemy.org/trac/ticket/3710)'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3710](https://www.sqlalchemy.org/trac/ticket/3710)
- en: '**[orm] [bug]**'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug whereby passing a [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct to the [`Query.group_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.group_by
    "sqlalchemy.orm.Query.group_by") method would raise an error, instead of interpreting
    the object as a SQL fragment.
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即将[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")构造传递给[`Query.group_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.group_by
    "sqlalchemy.orm.Query.group_by")方法会引发错误，而不是将对象解释为SQL片段。
- en: 'References: [#3706](https://www.sqlalchemy.org/trac/ticket/3706)'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3706](https://www.sqlalchemy.org/trac/ticket/3706)
- en: '**[orm] [bug]**'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Anonymous labeling is applied to a `func` construct that is passed to [`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property"), so that if the same attribute is referred to
    as a column expression twice the names are de-duped, thus avoiding “ambiguous
    column” errors. Previously, the `.label(None)` would need to be applied in order
    for the name to be de-anonymized.
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 匿名标签应用于传递给[`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property")的`func`构造，因此如果同一属性被引用两次作为列表达式，则名称将被去重，从而避免“模糊列”错误。以前，需要应用`.label(None)`才能去除匿名化的名称。
- en: 'References: [#3663](https://www.sqlalchemy.org/trac/ticket/3663)'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3663](https://www.sqlalchemy.org/trac/ticket/3663)
- en: '**[orm] [bug]**'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression appearing in the 1.0 series in ORM loading where the exception
    raised for an expected column missing would incorrectly be a `NoneType` error,
    rather than the expected [`NoSuchColumnError`](../core/exceptions.html#sqlalchemy.exc.NoSuchColumnError
    "sqlalchemy.exc.NoSuchColumnError").
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在1.0系列中出现的ORM加载中的回归，其中对于缺少的预期列引发的异常将错误地是`NoneType`错误，而不是预期的[`NoSuchColumnError`](../core/exceptions.html#sqlalchemy.exc.NoSuchColumnError
    "sqlalchemy.exc.NoSuchColumnError")。
- en: 'References: [#3658](https://www.sqlalchemy.org/trac/ticket/3658)'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3658](https://www.sqlalchemy.org/trac/ticket/3658)
- en: examples
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples] [bug]**'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples] [bug]**'
- en: Changed the “directed graph” example to no longer consider integer identifiers
    of nodes as significant; the “higher” / “lower” references now allow mutual edges
    in both directions.
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将“有向图”示例更改为不再将节点的整数标识符视为重要；“更高”/“更低”引用现在允许双向的相互边。
- en: 'References: [#3698](https://www.sqlalchemy.org/trac/ticket/3698)'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3698](https://www.sqlalchemy.org/trac/ticket/3698)
- en: sql
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where when using `case_sensitive=False` with an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"), the result set would fail to correctly accommodate
    for duplicate column names in the result set, causing an error when the statement
    is executed in 1.0, and preventing the “ambiguous column” exception from functioning
    in 1.1.
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用[`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")时，当`case_sensitive=False`时，结果集无法正确处理结果集中的重复列名的错误，导致在1.0版本中执行语句时出错，并阻止1.1版本中“模糊列”异常的功能。
- en: 'References: [#3690](https://www.sqlalchemy.org/trac/ticket/3690)'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3690](https://www.sqlalchemy.org/trac/ticket/3690)
- en: '**[sql] [bug]**'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where the negation of an EXISTS expression would not be properly typed
    as boolean in the result, and also would fail to be anonymously aliased in a SELECT
    list as is the case with a non-negated EXISTS construct.
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 EXISTS 表达式的否定在结果中未正确类型化为布尔值的 bug，并且在 SELECT 列表中也无法匿名别名，就像对非否定的 EXISTS 结构一样。
- en: 'References: [#3682](https://www.sqlalchemy.org/trac/ticket/3682)'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3682](https://www.sqlalchemy.org/trac/ticket/3682)
- en: '**[sql] [bug]**'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where “unconsumed column names” exception would fail to be raised
    in the case where [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") were called with a list of parameter
    mappings, instead of a single mapping of parameters. Pull request courtesy Athena
    Yao.
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当 [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") 调用时使用参数映射列表而不是单个参数映射时，“未使用的列名”异常未能被引发的
    bug。感谢 Athena Yao 提供的拉取请求。
- en: 'References: [#3666](https://www.sqlalchemy.org/trac/ticket/3666)'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3666](https://www.sqlalchemy.org/trac/ticket/3666)
- en: postgresql
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: 'Added disconnect detection support for the error string “SSL error: decryption
    failed or bad record mac”. Pull request courtesy Iuri de Silvio.'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '添加了对错误字符串“SSL error: decryption failed or bad record mac”的断开连接检测支持。感谢 Iuri
    de Silvio 提供的拉取请求。'
- en: 'References: [#3715](https://www.sqlalchemy.org/trac/ticket/3715)'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3715](https://www.sqlalchemy.org/trac/ticket/3715)
- en: mssql
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed bug where by ROW_NUMBER OVER clause applied for OFFSET selects in SQL
    Server would inappropriately substitute a plain column from the local statement
    that overlaps with a label name used by the ORDER BY criteria of the statement.
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 SQL Server 中用于 OFFSET 查询的 ROW_NUMBER OVER 子句会不适当地替换语句中与语句的 ORDER BY 条件重叠的普通列的
    bug。
- en: 'References: [#3711](https://www.sqlalchemy.org/trac/ticket/3711)'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3711](https://www.sqlalchemy.org/trac/ticket/3711)
- en: '**[mssql] [bug] [oracle]**'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug] [oracle]**'
- en: Fixed regression appearing in the 1.0 series which would cause the Oracle and
    SQL Server dialects to incorrectly account for result set columns when these dialects
    would wrap a SELECT in a subquery in order to provide LIMIT/OFFSET behavior, and
    the original SELECT statement referred to the same column multiple times, such
    as a column and a label of that same column. This issue is related to [#3658](https://www.sqlalchemy.org/trac/ticket/3658)
    in that when the error occurred, it would also cause a `NoneType` error, rather
    than reporting that it couldn’t locate a column.
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 1.0 系列中出现的回归问题，该问题会导致 Oracle 和 SQL Server 方言在将 SELECT 包装在子查询中以提供 LIMIT/OFFSET
    行为时不正确地计算结果集列，原始的 SELECT 语句引用了同一列多次，例如一个列和该列的一个标签。这个问题与 [#3658](https://www.sqlalchemy.org/trac/ticket/3658)
    相关，在发生错误时，它也会导致一个 `NoneType` 错误，而不是报告无法定位列。
- en: 'References: [#3657](https://www.sqlalchemy.org/trac/ticket/3657)'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3657](https://www.sqlalchemy.org/trac/ticket/3657)
- en: oracle
  id: totrans-158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed a bug in the cx_Oracle connect process that caused a TypeError when the
    either the user, password or dsn was empty. This prevented external authentication
    to Oracle databases, and prevented connecting to the default dsn. The connect
    string oracle:// now logs into the default dsn using the Operating System username,
    equivalent to connecting using ‘/’ with sqlplus.
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 cx_Oracle 连接过程中的一个 bug，当用户、密码或 dsn 中有一个为空时，会导致 TypeError。这阻止了对 Oracle 数据库的外部认证，并阻止连接到默认的
    dsn。现在，连接字符串 oracle:// 将使用操作系统用户名登录到默认的 dsn，相当于使用 sqlplus 进行连接时使用 ‘/’。
- en: 'References: [#3705](https://www.sqlalchemy.org/trac/ticket/3705)'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3705](https://www.sqlalchemy.org/trac/ticket/3705)
- en: '**[oracle] [bug]**'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed a bug in the result proxy used mainly by Oracle when binary and other
    LOB types are in play, such that when query / statement caching were used, the
    type-level result processors, notably that required by the binary type itself
    but also any other processor, would become lost after the first run of the statement
    due to it being removed from the cached result metadata.
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了主要由 Oracle 使用的结果代理中的一个 bug，当二进制和其他 LOB 类型参与时，如果使用了查询/语句缓存，类型级别的结果处理器，特别是二进制类型本身所需的处理器以及任何其他处理器，在第一次运行语句后会丢失，因为它被从缓存的结果元数据中删除了。
- en: 'References: [#3699](https://www.sqlalchemy.org/trac/ticket/3699)'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3699](https://www.sqlalchemy.org/trac/ticket/3699)
- en: misc
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [py3k]**'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [py3k]**'
- en: Fixed bug in “to_list” conversion where a single bytes object would be turned
    into a list of individual characters. This would impact among other things using
    the [`Query.get()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.get "sqlalchemy.orm.Query.get")
    method on a primary key that’s a bytes object.
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“to_list”转换中的错误，其中单个字节对象将转换为单个字符的列表。这将影响到使用[`Query.get()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.get
    "sqlalchemy.orm.Query.get")方法的主键是字节对象的情况。
- en: 'References: [#3660](https://www.sqlalchemy.org/trac/ticket/3660)'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3660](https://www.sqlalchemy.org/trac/ticket/3660)
- en: 1.0.12
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.0.12
- en: 'Released: February 15, 2016'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2016年2月15日
- en: orm
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in [`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge") where an object with a composite primary key that
    has values for some but not all of the PK fields would emit a SELECT statement
    leaking the internal NEVER_SET symbol into the query, rather than detecting that
    this object does not have a searchable primary key and no SELECT should be emitted.
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge "sqlalchemy.orm.Session.merge")中修复了一个错误，其中具有复合主键的对象，其中一些但不是所有PK字段的值，将发出一个SELECT语句，将内部NEVER_SET符号泄漏到查询中，而不是检测到此对象没有可搜索的主键，并且不应发出SELECT。
- en: 'References: [#3647](https://www.sqlalchemy.org/trac/ticket/3647)'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3647](https://www.sqlalchemy.org/trac/ticket/3647)
- en: '**[orm] [bug]**'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression since 0.9 where the 0.9 style loader options system failed
    to accommodate for multiple [`undefer_group()`](../orm/queryguide/columns.html#sqlalchemy.orm.undefer_group
    "sqlalchemy.orm.undefer_group") loader options in a single query. Multiple [`undefer_group()`](../orm/queryguide/columns.html#sqlalchemy.orm.undefer_group
    "sqlalchemy.orm.undefer_group") options will now be taken into account even against
    the same entity.
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自0.9以来的固定回归，0.9风格的加载器选项系统未能适应单个查询中的多个[`undefer_group()`](../orm/queryguide/columns.html#sqlalchemy.orm.undefer_group
    "sqlalchemy.orm.undefer_group")加载器选项。现在，多个[`undefer_group()`](../orm/queryguide/columns.html#sqlalchemy.orm.undefer_group
    "sqlalchemy.orm.undefer_group")选项将被考虑，即使是对同一实体也是如此。
- en: 'References: [#3623](https://www.sqlalchemy.org/trac/ticket/3623)'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3623](https://www.sqlalchemy.org/trac/ticket/3623)
- en: engine
  id: totrans-178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug] [mysql]**'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug] [mysql]**'
- en: Revisiting [#2696](https://www.sqlalchemy.org/trac/ticket/2696), first released
    in 1.0.10, which attempts to work around Python 2’s lack of exception context
    reporting by emitting a warning for an exception that was interrupted by a second
    exception when attempting to roll back the already-failed transaction; this issue
    continues to occur for MySQL backends in conjunction with a savepoint that gets
    unexpectedly lost, which then causes a “no such savepoint” error when the rollback
    is attempted, obscuring what the original condition was.
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重新审视[#2696](https://www.sqlalchemy.org/trac/ticket/2696)，该问题在1.0.10版首次发布，试图通过在已失败的事务回滚时发出警告来解决Python
    2缺乏异常上下文报告的问题；当尝试回滚已经失败的事务时，此问题继续在MySQL后端发生，与意外丢失的保存点相结合，然后在尝试回滚时引发“没有这样的保存点”错误，模糊了原始条件。
- en: The approach has been generalized to the Core “safe reraise” function which
    takes place across the ORM and Core in any place that a transaction is being rolled
    back in response to an error which occurred trying to commit, including the context
    managers provided by [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") and [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"), and taking place for operations such as a failure
    on “RELEASE SAVEPOINT”. Previously, the fix was only in place for a specific path
    within the ORM flush/commit process; it now takes place for all transactional
    context managers as well.
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此方法已推广到Core“安全重新引发”功能，该功能在任何出现事务因试图提交而产生错误而回滚的地方在ORM和Core中都会发生，包括由[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")和[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")提供的上下文管理器，并且对“RELEASE SAVEPOINT”等操作也进行了处理。以前，此修复仅适用于ORM刷新/提交过程中的特定路径；现在它也适用于所有事务上下文管理器。
- en: 'References: [#2696](https://www.sqlalchemy.org/trac/ticket/2696)'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2696](https://www.sqlalchemy.org/trac/ticket/2696)
- en: sql
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where the “literal_binds” flag was not propagated for [`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert"), [`update()`](../core/dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update") or [`delete()`](../core/dml.html#sqlalchemy.sql.expression.delete
    "sqlalchemy.sql.expression.delete") constructs when compiled to string SQL. Pull
    request courtesy Tim Tate.
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在将[`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert")、[`update()`](../core/dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update")或[`delete()`](../core/dml.html#sqlalchemy.sql.expression.delete
    "sqlalchemy.sql.expression.delete")构造编译为字符串 SQL 时，“literal_binds”标志未传播的问题。感谢 Tim
    Tate 的拉取请求。
- en: 'References: [#3643](https://www.sqlalchemy.org/trac/ticket/3643)'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3643](https://www.sqlalchemy.org/trac/ticket/3643)
- en: '**[sql] [bug]**'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where inadvertent use of the Python `__contains__` override with
    a column expression (e.g. by using `'x' in col`) would cause an endless loop in
    the case of an ARRAY type, as Python defers this to `__getitem__` access which
    never raises for this type. Overall, all use of `__contains__` now raises NotImplementedError.
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在意外使用 Python `__contains__` 覆盖与列表达式（例如通过 `'x' in col` 使用）会导致 ARRAY 类型无限循环的问题，因为
    Python 将此推迟到 `__getitem__` 访问，而此类型永远不会引发。总体上，所有对 `__contains__` 的使用现在都会引发 NotImplementedError。
- en: 'References: [#3642](https://www.sqlalchemy.org/trac/ticket/3642)'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3642](https://www.sqlalchemy.org/trac/ticket/3642)
- en: '**[sql] [bug]**'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    metadata construct which appeared around the 0.9 series where adding columns to
    a [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    that was unpickled would fail to correctly establish the [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") within the ‘c’ collection, leading to issues in areas
    such as ORM configuration. This could impact use cases such as `extend_existing`
    and others.
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 0.9 系列左右出现的[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")元数据构造中的错误，向一个反序列化的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")添加列会导致无法正确建立‘c’集合中的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")，从而导致诸如 ORM 配置等领域的问题。这可能会影响到 `extend_existing` 等用例。
- en: 'References: [#3632](https://www.sqlalchemy.org/trac/ticket/3632)'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3632](https://www.sqlalchemy.org/trac/ticket/3632)
- en: postgresql
  id: totrans-193
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug in [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct where a double-colon expression would
    not escape properly, e.g. `some\:\:expr`, as is most commonly required when rendering
    PostgreSQL-style CAST expressions.
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")构造中的错误，其中双冒号表达式无法正确转义，例如
    `some\:\:expr`，这在渲染 PostgreSQL 风格的 CAST 表达式时最常见。
- en: 'References: [#3644](https://www.sqlalchemy.org/trac/ticket/3644)'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3644](https://www.sqlalchemy.org/trac/ticket/3644)
- en: mssql
  id: totrans-197
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed the syntax of the [`extract()`](../core/sqlelement.html#sqlalchemy.sql.expression.extract
    "sqlalchemy.sql.expression.extract") function when used on MSSQL against a datetime
    value; the quotes around the keyword are removed. Pull request courtesy Guillaume
    Doumenc.
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 MSSQL 上针对日期时间值使用[`extract()`](../core/sqlelement.html#sqlalchemy.sql.expression.extract
    "sqlalchemy.sql.expression.extract")函数的语法；关键字周围的引号被移除。感谢 Guillaume Doumenc 的拉取请求。
- en: 'References: [#3624](https://www.sqlalchemy.org/trac/ticket/3624)'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3624](https://www.sqlalchemy.org/trac/ticket/3624)
- en: '**[mssql] [bug] [firebird]**'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug] [firebird]**'
- en: Fixed 1.0 regression where the eager fetch of cursor.rowcount was no longer
    called for an UPDATE or DELETE statement emitted via plain text or via the [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct, affecting those drivers that erase
    cursor.rowcount once the cursor is closed such as SQL Server ODBC and Firebird
    drivers.
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 1.0 版本中的回归问题，即对通过纯文本或通过[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")构造发出的 UPDATE 或 DELETE 语句的 cursor.rowcount 的急切获取不再调用，影响那些在关闭游标后擦除
    cursor.rowcount 的驱动程序，例如 SQL Server ODBC 和 Firebird 驱动程序。
- en: 'References: [#3622](https://www.sqlalchemy.org/trac/ticket/3622)'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3622](https://www.sqlalchemy.org/trac/ticket/3622)
- en: oracle
  id: totrans-204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug] [jython]**'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug] [jython]**'
- en: Fixed a small issue in the Jython Oracle compiler involving the rendering of
    “RETURNING” which allows this currently unsupported/untested dialect to work rudimentarily
    with the 1.0 series. Pull request courtesy Carlos Rivas.
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Jython Oracle编译器中的一个小问题，涉及“RETURNING”的呈现，这允许这个当前不受支持/未经测试的方言在1.0系列中基本工作。感谢Carlos
    Rivas的拉取请求。
- en: 'References: [#3621](https://www.sqlalchemy.org/trac/ticket/3621)'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3621](https://www.sqlalchemy.org/trac/ticket/3621)
- en: misc
  id: totrans-208
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [py3k]**'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [py3k]**'
- en: Fixed bug where some exception re-raise scenarios would attach the exception
    to itself as the “cause”; while the Python 3 interpreter is OK with this, it could
    cause endless loops in iPython.
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一些异常重新引发场景会将异常附加到自身作为“cause”的错误；虽然Python 3解释器可以接受这种情况，但在iPython中可能会导致无限循环。
- en: 'References: [#3625](https://www.sqlalchemy.org/trac/ticket/3625)'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3625](https://www.sqlalchemy.org/trac/ticket/3625)
- en: 1.0.11
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.0.11
- en: 'Released: December 22, 2015'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2015年12月22日
- en: orm
  id: totrans-214
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression caused in 1.0.10 by the fix for [#3593](https://www.sqlalchemy.org/trac/ticket/3593)
    where the check added for a polymorphic joinedload from a poly_subclass->class->poly_baseclass
    connection would fail for the scenario of class->poly_subclass->class.
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了1.0.10中由于修复[#3593](https://www.sqlalchemy.org/trac/ticket/3593)而引起的回归，其中为poly_subclass->class->poly_baseclass连接添加的多态joinedload检查将对class->poly_subclass->class的情况失败。
- en: 'References: [#3611](https://www.sqlalchemy.org/trac/ticket/3611)'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3611](https://www.sqlalchemy.org/trac/ticket/3611)
- en: '**[orm] [bug]**'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where [`Session.bulk_update_mappings()`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_update_mappings
    "sqlalchemy.orm.Session.bulk_update_mappings") and related would not bump a version
    id counter when in use. The experience here is still a little rough as the original
    version id is required in the given dictionaries and there’s not clean error reporting
    on that yet.
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Session.bulk_update_mappings()`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_update_mappings
    "sqlalchemy.orm.Session.bulk_update_mappings")等相关方法在使用时不会增加版本id计数器的错误。这里的体验仍然有点粗糙，因为给定字典中仍需要原始版本id，并且目前没有关于此的清晰错误报告。
- en: 'References: [#3610](https://www.sqlalchemy.org/trac/ticket/3610)'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3610](https://www.sqlalchemy.org/trac/ticket/3610)
- en: '**[orm] [bug]**'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Major fixes to the [`Mapper.eager_defaults`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.eager_defaults
    "sqlalchemy.orm.Mapper") flag, this flag would not be honored correctly in the
    case that multiple UPDATE statements were to be emitted, either as part of a flush
    or a bulk update operation. Additionally, RETURNING would be emitted unnecessarily
    within update statements.
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对[`Mapper.eager_defaults`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.eager_defaults
    "sqlalchemy.orm.Mapper")标志进行了重大修复，该标志在多个UPDATE语句要发出的情况下不会被正确执行，无论是作为刷新的一部分还是作为批量更新操作的一部分。此外，在更新语句中不必要地发出RETURNING。
- en: 'References: [#3609](https://www.sqlalchemy.org/trac/ticket/3609)'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3609](https://www.sqlalchemy.org/trac/ticket/3609)
- en: '**[orm] [bug]**'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where use of the [`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from") method would cause a subsequent call to the
    [`Query.with_parent()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.with_parent
    "sqlalchemy.orm.Query.with_parent") method to fail.
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用[`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from")方法会导致后续调用[`Query.with_parent()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.with_parent
    "sqlalchemy.orm.Query.with_parent")方法失败的错误。
- en: 'References: [#3606](https://www.sqlalchemy.org/trac/ticket/3606)'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3606](https://www.sqlalchemy.org/trac/ticket/3606)
- en: sql
  id: totrans-227
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in `Update.return_defaults()` which would cause all insert-default
    holding columns not otherwise included in the SET clause (such as primary key
    cols) to get rendered into the RETURNING even though this is an UPDATE.
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了`Update.return_defaults()`中的错误，该错误会导致所有未包含在SET子句中（例如主键列）的插入默认列被渲染到RETURNING中，尽管这是一个UPDATE。
- en: 'References: [#3609](https://www.sqlalchemy.org/trac/ticket/3609)'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3609](https://www.sqlalchemy.org/trac/ticket/3609)
- en: mysql
  id: totrans-231
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: An adjustment to the regular expression used to parse MySQL views, such that
    we no longer assume the “ALGORITHM” keyword is present in the reflected view source,
    as some users have reported this not being present in some Amazon RDS environments.
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了用于解析MySQL视图的正则表达式，不再假设反射视图源中存在“ALGORITHM”关键字，因为一些用户报告在某些Amazon RDS环境中不存在该关键字。
- en: 'References: [#3613](https://www.sqlalchemy.org/trac/ticket/3613)'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3613](https://www.sqlalchemy.org/trac/ticket/3613)
- en: '**[mysql] [bug]**'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Added new reserved words for MySQL 5.7 to the MySQL dialect, including ‘generated’,
    ‘optimizer_costs’, ‘stored’, ‘virtual’. Pull request courtesy Hanno Schlichting.
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为MySQL 5.7的MySQL方言添加了新的保留字，包括‘generated’、‘optimizer_costs’、‘stored’、‘virtual’。感谢Hanno
    Schlichting的Pull请求。
- en: misc
  id: totrans-237
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [ext]**'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Further fixes to [#3605](https://www.sqlalchemy.org/trac/ticket/3605), pop method
    on [`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict"), where the “default” argument was not included.
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 进一步修复了[#3605](https://www.sqlalchemy.org/trac/ticket/3605)，在[`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict")上的pop方法，其中未包含“default”参数。
- en: 'References: [#3605](https://www.sqlalchemy.org/trac/ticket/3605)'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3605](https://www.sqlalchemy.org/trac/ticket/3605)
- en: '**[bug] [ext]**'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug in baked loader system where the systemwide monkeypatch for setting
    up baked lazy loaders would interfere with other loader strategies that rely on
    lazy loading as a fallback, e.g. joined and subquery eager loaders, leading to
    `IndexError` exceptions at mapper configuration time.
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了烘焙加载器系统中的bug，该系统范围的monkeypatch用于设置烘焙懒加载器会干扰依赖于懒加载作为后备的其他加载器策略，例如连接和子查询急加载器，在映射器配置时导致`IndexError`异常。
- en: 'References: [#3612](https://www.sqlalchemy.org/trac/ticket/3612)'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3612](https://www.sqlalchemy.org/trac/ticket/3612)
- en: 1.0.10
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.0.10
- en: 'Released: December 11, 2015'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2015年12月11日
- en: orm
  id: totrans-246
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where post_update on a many-to-one relationship would fail to emit
    an UPDATE in the case where the attribute were set to None and not previously
    loaded.
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即在一对多关系上的post_update在属性设置为None且之前未加载时会失败发出UPDATE的情况。
- en: 'References: [#3599](https://www.sqlalchemy.org/trac/ticket/3599)'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3599](https://www.sqlalchemy.org/trac/ticket/3599)
- en: '**[orm] [bug]**'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug which is actually a regression that occurred between versions 0.8.0
    and 0.8.1, due [#2714](https://www.sqlalchemy.org/trac/ticket/2714). The case
    where joined eager loading needs to join out over a subclass-bound relationship
    when “with_polymorphic” were also used would fail to join from the correct entity.
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，实际上是在版本0.8.0和0.8.1之间发生的回归，由于[#2714](https://www.sqlalchemy.org/trac/ticket/2714)。当“with_polymorphic”也被使用时，需要通过子类绑定关系进行连接的连接急加载会无法从正确的实体进行连接。
- en: 'References: [#3593](https://www.sqlalchemy.org/trac/ticket/3593)'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3593](https://www.sqlalchemy.org/trac/ticket/3593)
- en: '**[orm] [bug]**'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed joinedload bug which would occur when a. the query includes limit/offset
    criteria that forces a subquery b. the relationship uses “secondary” c. the primaryjoin
    of the relationship refers to a column that is either not part of the primary
    key, or is a PK col in a joined-inheritance subclass table that is under a different
    attribute name than the parent table’s primary key column d. the query defers
    the columns that are present in the primaryjoin, typically via not being included
    in load_only(); the necessary column(s) would not be present in the subquery and
    produce invalid SQL.
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了joinedload bug，该bug会在以下情况下发生：a. 查询包含强制子查询的limit/offset条件 b. 关系使用“secondary”
    c. 关系的primaryjoin引用的列不是主键的一部分，或者是一个不同属性名称下的joined-inheritance子类表的PK列 d. 查询推迟了在primaryjoin中出现的列，通常通过不包含在load_only()中；必要的列不会出现在子查询中，从而产生无效的SQL。
- en: 'References: [#3592](https://www.sqlalchemy.org/trac/ticket/3592)'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3592](https://www.sqlalchemy.org/trac/ticket/3592)
- en: '**[orm] [bug]**'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: A rare case which occurs when a [`Session.rollback()`](../orm/session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") fails in the scope of a [`Session.flush()`](../orm/session_api.html#sqlalchemy.orm.Session.flush
    "sqlalchemy.orm.Session.flush") operation that’s raising an exception, as has
    been observed in some MySQL SAVEPOINT cases, prevents the original database exception
    from being observed when it was emitted during flush, but only on Py2K because
    Py2K does not support exception chaining; on Py3K the originating exception is
    chained. As a workaround, a warning is emitted in this specific case showing at
    least the string message of the original database error before we proceed to raise
    the rollback-originating exception.
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在一些MySQL SAVEPOINT案例中观察到的一种罕见情况，当[`Session.rollback()`](../orm/session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback")在[`Session.flush()`](../orm/session_api.html#sqlalchemy.orm.Session.flush
    "sqlalchemy.orm.Session.flush")操作的范围内失败并引发异常时，会阻止在flush期间发出的原始数据库异常被观察到，但仅在Py2K上，因为Py2K不支持异常链接；在Py3K上，原始异常会被链接。作为一种解决方法，在这种特定情况下会发出警告，至少显示原始数据库错误的字符串消息，然后我们继续引发导致回滚的异常。
- en: 'References: [#2696](https://www.sqlalchemy.org/trac/ticket/2696)'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2696](https://www.sqlalchemy.org/trac/ticket/2696)
- en: orm declarative
  id: totrans-259
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm声明
- en: '**[orm] [declarative] [bug]**'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Fixed bug where in Py2K a unicode literal would not be accepted as the string
    name of a class or other argument within declarative using [`backref()`](../orm/relationship_api.html#sqlalchemy.orm.backref
    "sqlalchemy.orm.backref") on [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship"). Pull request courtesy Nils Philippsen.
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，在Py2K中，unicode文字不能作为声明中使用[`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")上的[`backref()`](../orm/relationship_api.html#sqlalchemy.orm.backref
    "sqlalchemy.orm.backref")的类或其他参数的字符串名称。感谢Nils Philippsen的拉取请求。
- en: sql
  id: totrans-262
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added support for parameter-ordered SET clauses in an UPDATE statement. This
    feature is available by passing the [`update.preserve_parameter_order`](../core/dml.html#sqlalchemy.sql.expression.update.params.preserve_parameter_order
    "sqlalchemy.sql.expression.update") flag either to the core [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") construct or alternatively adding it to the
    [`Query.update.update_args`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update.params.update_args
    "sqlalchemy.orm.Query.update") dictionary at the ORM-level, also passing the parameters
    themselves as a list of 2-tuples. Thanks to Gorka Eguileor for implementation
    and tests.
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对UPDATE语句中参数顺序化SET子句的支持。通过将[`update.preserve_parameter_order`](../core/dml.html#sqlalchemy.sql.expression.update.params.preserve_parameter_order
    "sqlalchemy.sql.expression.update")标志传递给核心[`Update`](../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update")构造，或者将其添加到ORM级别的[`Query.update.update_args`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update.params.update_args
    "sqlalchemy.orm.Query.update")字典中，同时将参数本身作为2元组列表传递。感谢Gorka Eguileor的实现和测试。
- en: See also
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Parameter Ordered Updates](../tutorial/data_update.html#tutorial-parameter-ordered-updates)'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[参数顺序化更新](../tutorial/data_update.html#tutorial-parameter-ordered-updates)'
- en: '**[sql] [bug]**'
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue within the [`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select") construct whereby the [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") construct would have its `._raw_columns` collection
    mutated in-place when compiling the [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") construct, when the target [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") has Python-side defaults. The [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") construct would compile standalone with the
    erroneous column present subsequent to compilation of the [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert"), and the [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") statement itself would fail on a second compile
    attempt due to duplicate bound parameters.
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select")构造中的问题，当目标[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")具有Python端默认值时，[`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select")构造的`._raw_columns`集合会在编译[`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert")构造时被就地修改。[`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select")构造在编译后会独立存在，错误的列会在编译[`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert")后出现，[`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert")语句本身在第二次编译尝试时会因重复的绑定参数而失败。
- en: 'References: [#3603](https://www.sqlalchemy.org/trac/ticket/3603)'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3603](https://www.sqlalchemy.org/trac/ticket/3603)
- en: '**[sql] [bug] [postgresql]**'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [postgresql]**'
- en: Fixed bug where CREATE TABLE with a no-column table, but a constraint such as
    a CHECK constraint would render an erroneous comma in the definition; this scenario
    can occur such as with a PostgreSQL INHERITS table that has no columns of its
    own.
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，当使用CREATE TABLE创建一个没有列但有约束（如CHECK约束）的表时，会在定义中出现错误的逗号；这种情况可能发生在具有自己没有列的PostgreSQL
    INHERITS表中。
- en: 'References: [#3598](https://www.sqlalchemy.org/trac/ticket/3598)'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3598](https://www.sqlalchemy.org/trac/ticket/3598)
- en: postgresql
  id: totrans-273
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed issue where the “FOR UPDATE OF” PostgreSQL-specific SELECT modifier would
    fail if the referred table had a schema qualifier; PG needs the schema name to
    be omitted. Pull request courtesy Diana Clarke.
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，当“FOR UPDATE OF” PostgreSQL特定的SELECT修饰符引用的表具有模式限定符时，如果省略模式名称，PG会失败。感谢Diana
    Clarke的拉取请求。
- en: 'References: [#3573](https://www.sqlalchemy.org/trac/ticket/3573)'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3573](https://www.sqlalchemy.org/trac/ticket/3573)
- en: '**[postgresql] [bug]**'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug where some varieties of SQL expression passed to the “where” clause
    of [`ExcludeConstraint`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint") would fail to be accepted
    correctly. Pull request courtesy aisch.
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，当将某些类型的SQL表达式传递给[`ExcludeConstraint`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint")的“where”子句时，无法正确接受。感谢aisch的拉取请求。
- en: '**[postgresql] [bug]**'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed the `.python_type` attribute of [`INTERVAL`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.INTERVAL
    "sqlalchemy.dialects.postgresql.INTERVAL") to return `datetime.timedelta` in the
    same way as that of [`python_type`](../core/type_basics.html#sqlalchemy.types.Interval.python_type
    "sqlalchemy.types.Interval.python_type"), rather than raising `NotImplementedError`.
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`INTERVAL`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.INTERVAL
    "sqlalchemy.dialects.postgresql.INTERVAL")的`.python_type`属性，使其像[`python_type`](../core/type_basics.html#sqlalchemy.types.Interval.python_type
    "sqlalchemy.types.Interval.python_type")一样返回`datetime.timedelta`，而不是引发`NotImplementedError`。
- en: 'References: [#3571](https://www.sqlalchemy.org/trac/ticket/3571)'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3571](https://www.sqlalchemy.org/trac/ticket/3571)
- en: mysql
  id: totrans-282
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed bug in MySQL reflection where the “fractional sections portion” of the
    [`DATETIME`](../dialects/mysql.html#sqlalchemy.dialects.mysql.DATETIME "sqlalchemy.dialects.mysql.DATETIME"),
    [`TIMESTAMP`](../dialects/mysql.html#sqlalchemy.dialects.mysql.TIMESTAMP "sqlalchemy.dialects.mysql.TIMESTAMP")
    and [`TIME`](../dialects/mysql.html#sqlalchemy.dialects.mysql.TIME "sqlalchemy.dialects.mysql.TIME")
    types would be incorrectly placed into the `timezone` attribute, which is unused
    by MySQL, instead of the `fsp` attribute.
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了MySQL反射中的错误，其中[`DATETIME`](../dialects/mysql.html#sqlalchemy.dialects.mysql.DATETIME
    "sqlalchemy.dialects.mysql.DATETIME")、[`TIMESTAMP`](../dialects/mysql.html#sqlalchemy.dialects.mysql.TIMESTAMP
    "sqlalchemy.dialects.mysql.TIMESTAMP")和[`TIME`](../dialects/mysql.html#sqlalchemy.dialects.mysql.TIME
    "sqlalchemy.dialects.mysql.TIME")类型的“小数部分”会被错误地放入未被MySQL使用的`timezone`属性中���而不是`fsp`属性。
- en: 'References: [#3602](https://www.sqlalchemy.org/trac/ticket/3602)'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3602](https://www.sqlalchemy.org/trac/ticket/3602)
- en: mssql
  id: totrans-286
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: 'Added the error “20006: Write to the server failed” to the list of disconnect
    errors for the pymssql driver, as this has been observed to render a connection
    unusable.'
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '将“20006: 写入服务器失败”错误添加到pymssql驱动程序的断开错误列表中，因为观察到这会使连接无法使用。'
- en: 'References: [#3585](https://www.sqlalchemy.org/trac/ticket/3585)'
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3585](https://www.sqlalchemy.org/trac/ticket/3585)
- en: '**[mssql] [bug]**'
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: A descriptive ValueError is now raised in the event that SQL server returns
    an invalid date or time format from a DATE or TIME column, rather than failing
    with a NoneType error. Pull request courtesy Ed Avis.
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，如果SQL服务器从DATE或TIME列返回无效的日期或时间格式，将引发描述性的ValueError，而不是出现NoneType错误。感谢Ed Avis的贡献。
- en: '**[mssql] [bug]**'
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed issue where DDL generated for the MSSQL types DATETIME2, TIME and DATETIMEOFFSET
    with a precision of “zero” would not generate the precision field. Pull request
    courtesy Jacobo de Vera.
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了对于MSSQL类型DATETIME2、TIME和DATETIMEOFFSET的DDL生成中，精度为“零”时不会生成精度字段的问题。感谢Jacobo
    de Vera的贡献。
- en: tests
  id: totrans-294
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [change]**'
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[tests] [change]**'
- en: The ORM and Core tutorials, which have always been in doctest format, are now
    exercised within the normal unit test suite in both Python 2 and Python 3.
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ORM和Core教程一直以doctest格式存在，现在在Python 2和Python 3中都在正常的单元测试套件中执行。
- en: misc
  id: totrans-297
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [ext]**'
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Added support for the `dict.pop()` and `dict.popitem()` methods to the [`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict") class.
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为[`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict")类添加了对`dict.pop()`和`dict.popitem()`方法的支持。
- en: 'References: [#3605](https://www.sqlalchemy.org/trac/ticket/3605)'
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3605](https://www.sqlalchemy.org/trac/ticket/3605)
- en: '**[bug] [py3k]**'
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [py3k]**'
- en: Updates to internal getargspec() calls, some py36-related fixture updates, and
    alterations to two iterators to “return” instead of raising StopIteration, to
    allow tests to pass without errors or warnings on Py3.5, Py3.6, pull requests
    courtesy Jacob MacDonald, Luri de Silvio, and Phil Jones.
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对内部`getargspec()`调用进行更新，一些与py36相关的fixture更新，以及对两个迭代器进行修改，使其“返回”而不是引发StopIteration，以便在Py3.5、Py3.6上通过测试而不出现错误或警告，感谢Jacob
    MacDonald、Luri de Silvio和Phil Jones的贡献。
- en: '**[bug] [ext]**'
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed an issue in baked queries where the .get() method, used either directly
    or within lazy loads, didn’t consider the mapper’s “get clause” as part of the
    cache key, causing bound parameter mismatches if the clause got re-generated.
    This clause is cached by mappers on the fly but in highly concurrent scenarios
    may be generated more than once when first accessed.
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了烘焙查询中的问题，其中`.get()`方法，无论是直接使用还是在惰性加载中使用，都没有将映射器的“获取子句”视为缓存键的一部分，导致如果子句重新生成，则绑定参数不匹配。这个子句会被映射器动态缓存，但在高并发场景下，当首次访问时可能会生成多次。
- en: 'References: [#3597](https://www.sqlalchemy.org/trac/ticket/3597)'
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3597](https://www.sqlalchemy.org/trac/ticket/3597)
- en: 1.0.9
  id: totrans-306
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.0.9
- en: 'Released: October 20, 2015'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2015年10月20日
- en: orm
  id: totrans-308
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new method [`Query.one_or_none()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.one_or_none
    "sqlalchemy.orm.Query.one_or_none"); same as [`Query.one()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.one
    "sqlalchemy.orm.Query.one") but returns None if no row found. Pull request courtesy
    esiegerman.
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新方法[`Query.one_or_none()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.one_or_none
    "sqlalchemy.orm.Query.one_or_none")；与[`Query.one()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.one
    "sqlalchemy.orm.Query.one")相同，但如果未找到行，则返回None。感谢esiegerman的贡献。
- en: '**[orm] [bug] [postgresql]**'
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [postgresql]**'
- en: Fixed regression in 1.0 where new feature of using “executemany” for UPDATE
    statements in the ORM (e.g. [UPDATE statements are now batched with executemany()
    in a flush](migration_10.html#feature-updatemany)) would break on PostgreSQL and
    other RETURNING backends when using server-side version generation schemes, as
    the server side value is retrieved via RETURNING which is not supported with executemany.
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了1.0版本中的回归，即在ORM中使用“executemany”进行UPDATE语句的新功能（例如[UPDATE statements are now
    batched with executemany() in a flush](migration_10.html#feature-updatemany)）在PostgreSQL和其他RETURNING后端上会出现问题，当使用服务器端版本生成方案时，由于服务器端值是通过RETURNING检索的，而在使用executemany时不支持。
- en: 'References: [#3556](https://www.sqlalchemy.org/trac/ticket/3556)'
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3556](https://www.sqlalchemy.org/trac/ticket/3556)
- en: '**[orm] [bug]**'
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed rare TypeError which could occur when stringifying certain kinds of internal
    column loader options within internal logging.
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在内部日志记录中对某些类型的内部列加载器选项进行字符串化时可能出现的罕见TypeError。
- en: 'References: [#3539](https://www.sqlalchemy.org/trac/ticket/3539)'
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3539](https://www.sqlalchemy.org/trac/ticket/3539)
- en: '**[orm] [bug]**'
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in [`Session.bulk_save_objects()`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_save_objects
    "sqlalchemy.orm.Session.bulk_save_objects") where a mapped column that had some
    kind of “fetch on update” value and was not locally present in the given object
    would cause an AttributeError within the operation.
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Session.bulk_save_objects()`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_save_objects
    "sqlalchemy.orm.Session.bulk_save_objects")中的错误，其中具有某种“更新时获取”值的映射列，且在给定对象中不存在本地时，会导致操作中的AttributeError。
- en: 'References: [#3525](https://www.sqlalchemy.org/trac/ticket/3525)'
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3525](https://www.sqlalchemy.org/trac/ticket/3525)
- en: '**[orm] [bug]**'
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed 1.0 regression where the “noload” loader strategy would fail to function
    for a many-to-one relationship. The loader used an API to place “None” into the
    dictionary which no longer actually writes a value; this is a side effect of [#3061](https://www.sqlalchemy.org/trac/ticket/3061).
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了1.0版本中的回归，即“noload”加载策略在一对多关系中无法正常工作的问题。加载器使用API将“None”放入字典中，但实际上不再写入值；这是[#3061](https://www.sqlalchemy.org/trac/ticket/3061)的副作用。
- en: 'References: [#3510](https://www.sqlalchemy.org/trac/ticket/3510)'
  id: totrans-322
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3510](https://www.sqlalchemy.org/trac/ticket/3510)
- en: examples
  id: totrans-323
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: examples
- en: '**[examples] [bug]**'
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples] [bug]**'
- en: Fixed two issues in the “history_meta” example where history tracking could
    encounter empty history, and where a column keyed to an alternate attribute name
    would fail to track properly. Fixes courtesy Alex Fraser.
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“history_meta”示例中的两个问题，其中历史跟踪可能遇到空历史，以及键入替代属性名称的列无法正确跟踪的问题。修复由Alex Fraser提供。
- en: sql
  id: totrans-326
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed regression in 1.0-released default-processor for multi-VALUES insert statement,
    [#3288](https://www.sqlalchemy.org/trac/ticket/3288), where the column type for
    the default-holding column would not be propagated to the compiled statement in
    the case where the default was being used, leading to bind-level type handlers
    not being invoked.
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了1.0版本中发布的默认处理器对多值插入语句的回归，[#3288](https://www.sqlalchemy.org/trac/ticket/3288)，其中默认保存列的列类型不会传播到编译后的语句中，在使用默认值时，导致绑定级别类型处理程序不被调用。
- en: 'References: [#3520](https://www.sqlalchemy.org/trac/ticket/3520)'
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3520](https://www.sqlalchemy.org/trac/ticket/3520)
- en: postgresql
  id: totrans-330
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: An adjustment to the new PostgreSQL feature of reflecting storage options and
    USING of [#3455](https://www.sqlalchemy.org/trac/ticket/3455) released in 1.0.6,
    to disable the feature for PostgreSQL versions < 8.2 where the `reloptions` column
    is not provided; this allows Amazon Redshift to again work as it is based on an
    8.0.x version of PostgreSQL. Fix courtesy Pete Hollobon.
  id: totrans-332
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对1.0.6中发布的反映存储选项和[#3455](https://www.sqlalchemy.org/trac/ticket/3455)的PostgreSQL新功能进行了调整，以禁用PostgreSQL版本<
    8.2的功能，其中未提供`reloptions`列；这允许Amazon Redshift再次正常工作，因为它基于8.0.x版本的PostgreSQL。修复由Pete
    Hollobon提供。
- en: oracle
  id: totrans-333
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug] [py3k]**'
  id: totrans-334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug] [py3k]**'
- en: Fixed support for cx_Oracle version 5.2, which was tripping up SQLAlchemy’s
    version detection under Python 3 and inadvertently not using the correct unicode
    mode for Python 3\. This would cause issues such as bound variables mis-interpreted
    as NULL and rows silently not being returned.
  id: totrans-335
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了cx_Oracle版本5.2的支持，该版本在Python 3下触发了SQLAlchemy的版本检测，并且意外地未使用正确的Unicode模式进行Python
    3。这会导致问题，例如绑定变量被误解为NULL，以及行被静默地未返回。
- en: 'This change is also **backported** to: 0.7.0b1'
  id: totrans-336
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.7.0b1
- en: 'References: [#3491](https://www.sqlalchemy.org/trac/ticket/3491)'
  id: totrans-337
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3491](https://www.sqlalchemy.org/trac/ticket/3491)
- en: '**[oracle] [bug]**'
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed bug in Oracle dialect where reflection of tables and other symbols with
    names quoted to force all-lower-case would not be identified properly in reflection
    queries. The [`quoted_name`](../core/sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name") construct is now applied to incoming
    symbol names that detect as forced into all-lower-case within the “name normalize”
    process.
  id: totrans-339
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Oracle方言中的一个错误，即对使用引号强制转换为全小写的表和其他符号的反射在反射查询中无法正确识别。现在，对于在“名称规范化”过程中被强制转换为全小写的传入符号名称，将应用[`quoted_name`](../core/sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")构造。
- en: 'References: [#3548](https://www.sqlalchemy.org/trac/ticket/3548)'
  id: totrans-340
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3548](https://www.sqlalchemy.org/trac/ticket/3548)
- en: misc
  id: totrans-341
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[feature] [ext]**'
  id: totrans-342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[feature] [ext]**'
- en: Added the [`AssociationProxy.info`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy.params.info
    "sqlalchemy.ext.associationproxy.AssociationProxy") parameter to the [`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") constructor, to suit the [`AssociationProxy.info`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy.info
    "sqlalchemy.ext.associationproxy.AssociationProxy.info") accessor that was added
    in [#2971](https://www.sqlalchemy.org/trac/ticket/2971). This is possible because
    [`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") is constructed explicitly,
    unlike a hybrid which is constructed implicitly via the decorator syntax.
  id: totrans-343
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy")构造函数中添加了[`AssociationProxy.info`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy.info
    "sqlalchemy.ext.associationproxy.AssociationProxy.info")参数，以适应在[#2971](https://www.sqlalchemy.org/trac/ticket/2971)中添加的[`AssociationProxy.info`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy.info
    "sqlalchemy.ext.associationproxy.AssociationProxy.info")访问器。这是因为[`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy")是显式构造的，不像通过装饰器语法隐式构造的混合体。
- en: 'References: [#3551](https://www.sqlalchemy.org/trac/ticket/3551)'
  id: totrans-344
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3551](https://www.sqlalchemy.org/trac/ticket/3551)
- en: '**[bug] [sybase]**'
  id: totrans-345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [sybase]**'
- en: Fixed two issues regarding Sybase reflection, allowing tables without primary
    keys to be reflected as well as ensured that a SQL statement involved in foreign
    key detection is pre-fetched up front to avoid driver issues upon nested queries.
    Fixes here courtesy Eugene Zapolsky; note that we cannot currently test Sybase
    to locally verify these changes.
  id: totrans-346
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关于Sybase反射的两个问题，允许没有主键的表被反射，同时确保涉及外键检测的SQL语句被预先获取，以避免嵌套查询时出现驱动程序问题。此处修复由Eugene
    Zapolsky提供；请注意，我们目前无法测试Sybase以本地验证这些更改。
- en: 'References: [#3508](https://www.sqlalchemy.org/trac/ticket/3508), [#3509](https://www.sqlalchemy.org/trac/ticket/3509)'
  id: totrans-347
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3508](https://www.sqlalchemy.org/trac/ticket/3508)，[#3509](https://www.sqlalchemy.org/trac/ticket/3509)
- en: 1.0.8
  id: totrans-348
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.0.8
- en: 'Released: July 22, 2015'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2015年7月22日
- en: engine
  id: totrans-350
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed critical issue whereby the pool “checkout” event handler may be called
    against a stale connection without the “connect” event handler having been called,
    in the case where the pool attempted to reconnect after being invalidated and
    failed; the stale connection would remain present and would be used on a subsequent
    attempt. This issue has a greater impact in the 1.0 series subsequent to 1.0.2,
    as it also delivers a blanked-out `.info` dictionary to the event handler; prior
    to 1.0.2 the `.info` dictionary is still the previous one.
  id: totrans-352
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关键问题，即在池“checkout”事件处理程序可能针对未调用“connect”事件处理程序的陈旧连接进行调用的情况下，当池尝试在被使无效后重新连接并失败时，陈旧连接将保留并在随后的尝试中使用。这个问题在1.0.2之后的1.0系列中影响更大，因为它还向事件处理程序提供了一个空白的`.info`字典；在1.0.2之前，`.info`字典仍然是先前的字典。
- en: 'This change is also **backported** to: 0.7.0b1'
  id: totrans-353
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**至：0.7.0b1
- en: 'References: [#3497](https://www.sqlalchemy.org/trac/ticket/3497)'
  id: totrans-354
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3497](https://www.sqlalchemy.org/trac/ticket/3497)
- en: sqlite
  id: totrans-355
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Fixed bug in SQLite dialect where reflection of UNIQUE constraints that included
    non-alphabetic characters in the names, like dots or spaces, would not be reflected
    with their name.
  id: totrans-357
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了SQLite方言中的一个错误，即包含非字母字符（如点或空格）的唯一约束的反射不会反映其名称。
- en: 'This change is also **backported** to: 0.9.10'
  id: totrans-358
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**至：0.9.10
- en: 'References: [#3495](https://www.sqlalchemy.org/trac/ticket/3495)'
  id: totrans-359
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3495](https://www.sqlalchemy.org/trac/ticket/3495)
- en: misc
  id: totrans-360
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[misc] [bug]**'
  id: totrans-361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[misc] [bug]**'
- en: Fixed an issue where a particular base class within utils didn’t implement `__slots__`,
    and therefore meant all subclasses of that class didn’t either, negating the rationale
    for `__slots__` to be in use. Didn’t cause any issue except on IronPython which
    apparently does not implement `__slots__` behavior compatibly with cPython.
  id: totrans-362
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即 utils 中的特定基类未实现 `__slots__`，因此该类的所有子类也未实现，这使得使用 `__slots__` 没有意义。除了在
    IronPython 上可能会出现问题外，其他地方都没有问题，因为 IronPython 显然不兼容 cPython 的 `__slots__` 行为。
- en: 'References: [#3494](https://www.sqlalchemy.org/trac/ticket/3494)'
  id: totrans-363
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3494](https://www.sqlalchemy.org/trac/ticket/3494)
- en: 1.0.7
  id: totrans-364
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.0.7
- en: 'Released: July 20, 2015'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2015 年 7 月 20 日
- en: orm
  id: totrans-366
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-367
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed 1.0 regression where value objects that override `__eq__()` to return
    a non-boolean-capable object, such as some geoalchemy types as well as numpy types,
    were being tested for `bool()` during a unit of work update operation, where in
    0.9 the return value of `__eq__()` was tested against “is True” to guard against
    this.
  id: totrans-368
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 1.0 版本中的一个回归问题，即覆盖 `__eq__()` 以返回非布尔类型对象的值对象，在工作单元更新操作期间会被测试为 `bool()`，而在
    0.9 版本中，`__eq__()` 的返回值会与“is True”进行测试，以防止出现此问题。
- en: 'References: [#3469](https://www.sqlalchemy.org/trac/ticket/3469)'
  id: totrans-369
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3469](https://www.sqlalchemy.org/trac/ticket/3469)
- en: '**[orm] [bug]**'
  id: totrans-370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed 1.0 regression where a “deferred” attribute would not populate correctly
    if it were loaded within the “optimized inheritance load”, which is a special
    SELECT emitted in the case of joined table inheritance used to populate expired
    or unloaded attributes against a joined table without loading the base table.
    This is related to the fact that SQLA 1.0 no longer guesses about loading deferred
    columns and must be directed explicitly.
  id: totrans-371
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 1.0 版本中的一个回归问题，即“延迟”属性在“优化继承加载”中无法正确填充的情况，这是在使用联接表继承时发出的特殊 SELECT 语句，用于填充已过期或未加载的属性，而不加载基本表。这与
    SQLA 1.0 不再猜测加载延迟列的事实有关，必须明确指示。
- en: 'References: [#3468](https://www.sqlalchemy.org/trac/ticket/3468)'
  id: totrans-372
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3468](https://www.sqlalchemy.org/trac/ticket/3468)
- en: '**[orm] [bug]**'
  id: totrans-373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed 1.0 regression where the “parent entity” of a synonym- mapped attribute
    on top of an [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")
    object would resolve to the original mapper, not the [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") version of it, thereby causing problems for a [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") that relies on this attribute (e.g. it’s the only representative
    attribute given in the constructor) to figure out the correct FROM clause for
    the query.
  id: totrans-374
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 1.0 版本中的一个回归问题，即在 [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") 对象上的同义词映射属性的“父实体”将解析为原始映射器，而不是其 [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") 版本，从而导致依赖于此属性的 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 出现问题（例如，在构造函数中只给出了代表性属性，以确定查询的正确 FROM 子句）。
- en: 'References: [#3466](https://www.sqlalchemy.org/trac/ticket/3466)'
  id: totrans-375
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3466](https://www.sqlalchemy.org/trac/ticket/3466)
- en: orm declarative
  id: totrans-376
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm declarative
- en: '**[orm] [declarative] [bug]**'
  id: totrans-377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Fixed bug in [`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase") extension where a column setup
    on the ABC base which had a different attribute name vs. column name would not
    be correctly mapped on the final base class. The failure on 0.9 would be silent
    whereas on 1.0 it raised an ArgumentError, so may not have been noticed prior
    to 1.0.
  id: totrans-378
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase") 扩展中的错误，即在 ABC 基类上设置了一个具有不同属性名和列名的列，最终基类上不会正确映射该列。在
    0.9 版本上失败是静默的，而在 1.0 版本上会引发 ArgumentError，因此在 1.0 版本之前可能不会注意到。
- en: 'References: [#3480](https://www.sqlalchemy.org/trac/ticket/3480)'
  id: totrans-379
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3480](https://www.sqlalchemy.org/trac/ticket/3480)
- en: engine
  id: totrans-380
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed regression where new methods on `ResultProxy` used by the ORM [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object (part of the performance enhancements of [#3175](https://www.sqlalchemy.org/trac/ticket/3175))
    would not raise the “this result does not return rows” exception in the case where
    the driver (typically MySQL) fails to generate cursor.description correctly; an
    AttributeError against NoneType would be raised instead.
  id: totrans-382
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '修复了ORM [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")对象中使用的`ResultProxy`上的新方法（作为[#3175](https://www.sqlalchemy.org/trac/ticket/3175)的性能增强的一部分）在驱动程序（通常是MySQL）无法正确生成cursor.description的情况下不会引发“此结果不返回行”异常的回归；而是会引发针对NoneType的AttributeError。 '
- en: 'References: [#3481](https://www.sqlalchemy.org/trac/ticket/3481)'
  id: totrans-383
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3481](https://www.sqlalchemy.org/trac/ticket/3481)
- en: '**[engine] [bug]**'
  id: totrans-384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: 'Fixed regression where `ResultProxy.keys()` would return un-adjusted internal
    symbol names for “anonymous” labels, which are the “foo_1” types of labels we
    see generated for SQL functions without labels and similar. This was a side effect
    of the performance enhancements implemented as part of #918.'
  id: totrans-385
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了`ResultProxy.keys()`返回未调整的内部符号名称的回归，这些符号名称是我们在没有标签的SQL函数和类似情况下生成的“foo_1”类型的标签的副作用。这是作为#918的性能增强的一部分实施的。
- en: 'References: [#3483](https://www.sqlalchemy.org/trac/ticket/3483)'
  id: totrans-386
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3483](https://www.sqlalchemy.org/trac/ticket/3483)
- en: sql
  id: totrans-387
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-388
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added a [`ColumnElement.cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.cast
    "sqlalchemy.sql.expression.ColumnElement.cast") method which performs the same
    purpose as the standalone [`cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.cast
    "sqlalchemy.sql.expression.cast") function. Pull request courtesy Sebastian Bank.
  id: totrans-389
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个[`ColumnElement.cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.cast
    "sqlalchemy.sql.expression.ColumnElement.cast")方法，其执行与独立的[`cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.cast
    "sqlalchemy.sql.expression.cast")函数相同的目的。感谢Sebastian Bank的拉取请求。
- en: 'References: [#3459](https://www.sqlalchemy.org/trac/ticket/3459)'
  id: totrans-390
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3459](https://www.sqlalchemy.org/trac/ticket/3459)
- en: '**[sql] [bug]**'
  id: totrans-391
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where coercion of literal `True` or `False` constant in conjunction
    with [`and_()`](../core/sqlelement.html#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_")
    or [`or_()`](../core/sqlelement.html#sqlalchemy.sql.expression.or_ "sqlalchemy.sql.expression.or_")
    would fail with an AttributeError.
  id: totrans-392
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在与[`and_()`](../core/sqlelement.html#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_")或[`or_()`](../core/sqlelement.html#sqlalchemy.sql.expression.or_
    "sqlalchemy.sql.expression.or_")结合使用文字`True`或`False`常量时，会因为AttributeError而失败的错误。
- en: 'References: [#3490](https://www.sqlalchemy.org/trac/ticket/3490)'
  id: totrans-393
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3490](https://www.sqlalchemy.org/trac/ticket/3490)
- en: '**[sql] [bug]**'
  id: totrans-394
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed potential issue where a custom subclass of [`FunctionElement`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement
    "sqlalchemy.sql.functions.FunctionElement") or other column element that incorrectly
    states ‘None’ or any other invalid object as the `.type` attribute will report
    this exception instead of recursion overflow.
  id: totrans-395
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了自定义[`FunctionElement`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement
    "sqlalchemy.sql.functions.FunctionElement")或其他列元素的子类错误地将‘None’或任何其他无效对象声明为`.type`属性时，会报告此异常而不是递归溢出的潜在问题。
- en: 'References: [#3485](https://www.sqlalchemy.org/trac/ticket/3485)'
  id: totrans-396
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3485](https://www.sqlalchemy.org/trac/ticket/3485)
- en: '**[sql] [bug]**'
  id: totrans-397
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where the modulus SQL operator wouldn’t work in reverse due to a missing
    `__rmod__` method. Pull request courtesy dan-gittik.
  id: totrans-398
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了模数SQL运算符由于缺少`__rmod__`方法而无法反向工作的错误。感谢dan-gittik的拉取请求。
- en: schema
  id: totrans-399
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: '**[schema] [feature]**'
  id: totrans-400
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema] [feature]**'
- en: Added support for the MINVALUE, MAXVALUE, NO MINVALUE, NO MAXVALUE, and CYCLE
    arguments for CREATE SEQUENCE as supported by PostgreSQL and Oracle. Pull request
    courtesy jakeogh.
  id: totrans-401
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对CREATE SEQUENCE的MINVALUE、MAXVALUE、NO MINVALUE、NO MAXVALUE和CYCLE参数的支持，这些参数受PostgreSQL和Oracle支持。感谢jakeogh的拉取请求。
- en: 1.0.6
  id: totrans-402
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.0.6
- en: 'Released: June 25, 2015'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2015年6月25日
- en: orm
  id: totrans-404
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-405
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a major regression in the 1.0 series where the version_id_counter feature
    would cause an object’s version counter to be incremented when there was no net
    change to the object’s row, but instead an object related to it via relationship
    (e.g. typically many-to-one) were associated or de-associated with it, resulting
    in an UPDATE statement that updates the object’s version counter and nothing else.
    In the use case where the relatively recent “server side” and/or “programmatic/conditional”
    version counter feature were used (e.g. setting version_id_generator to False),
    the bug could cause an UPDATE without a valid SET clause to be emitted.
  id: totrans-406
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了1.0系列中的一个重大回归问题，即version_id_counter功能会导致对象的版本计数器在对象的行没有净变化时被增加，而是通过关系（例如通常是一对多）与其关联或取消关联的对象，导致更新语句更新对象的版本计数器而不更新其他内容。在相对较新的“服务器端”和/或“程序化/条件化”版本计数器功能被使用的用例中（例如将version_id_generator设置为False），这个错误可能导致发出没有有效SET子句的UPDATE。
- en: 'References: [#3465](https://www.sqlalchemy.org/trac/ticket/3465)'
  id: totrans-407
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3465](https://www.sqlalchemy.org/trac/ticket/3465)
- en: '**[orm] [bug]**'
  id: totrans-408
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed 1.0 regression where the enhanced behavior of single-inheritance joins
    of [#3222](https://www.sqlalchemy.org/trac/ticket/3222) takes place inappropriately
    for a JOIN along explicit join criteria with a single-inheritance subclass that
    does not make use of any discriminator, resulting in an additional “AND NULL”
    clause.
  id: totrans-409
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了1.0版本中的一个回归问题，即增强的单继承连接的行为[#3222](https://www.sqlalchemy.org/trac/ticket/3222)不适当地发生在沿着显式连接条件进行JOIN时，其中单继承子类不使用任何鉴别器，导致额外的“AND
    NULL”子句。
- en: 'References: [#3462](https://www.sqlalchemy.org/trac/ticket/3462)'
  id: totrans-410
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3462](https://www.sqlalchemy.org/trac/ticket/3462)
- en: '**[orm] [bug]**'
  id: totrans-411
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in new [`Session.bulk_update_mappings()`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_update_mappings
    "sqlalchemy.orm.Session.bulk_update_mappings") feature where the primary key columns
    used in the WHERE clause to locate the row would also be included in the SET clause,
    setting their value to themselves unnecessarily. Pull request courtesy Patrick
    Hayes.
  id: totrans-412
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新的[`Session.bulk_update_mappings()`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_update_mappings
    "sqlalchemy.orm.Session.bulk_update_mappings")功能中的错误，其中用于定位行的WHERE子句中使用的主键列也会包含在SET子句中，将它们的值不必要地设置为它们自己。感谢Patrick
    Hayes的拉取请求。
- en: 'References: [#3451](https://www.sqlalchemy.org/trac/ticket/3451)'
  id: totrans-413
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3451](https://www.sqlalchemy.org/trac/ticket/3451)
- en: '**[orm] [bug]**'
  id: totrans-414
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed an unexpected-use regression whereby custom [`Comparator`](../core/type_api.html#sqlalchemy.types.TypeEngine.Comparator
    "sqlalchemy.types.TypeEngine.Comparator") objects that made use of the `__clause_element__()`
    method and returned an object that was an ORM-mapped [`InstrumentedAttribute`](../orm/internals.html#sqlalchemy.orm.InstrumentedAttribute
    "sqlalchemy.orm.InstrumentedAttribute") and not explicitly a [`ColumnElement`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") would fail to be correctly handled
    when passed as an expression to [`Session.query()`](../orm/session_api.html#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query"). The logic in 0.9 happened to succeed on this,
    so this use case is now supported.
  id: totrans-415
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个意外使用回归问题，即自定义[`Comparator`](../core/type_api.html#sqlalchemy.types.TypeEngine.Comparator
    "sqlalchemy.types.TypeEngine.Comparator")对象使用`__clause_element__()`方法并返回一个ORM映射的[`InstrumentedAttribute`](../orm/internals.html#sqlalchemy.orm.InstrumentedAttribute
    "sqlalchemy.orm.InstrumentedAttribute")对象而不是显式的[`ColumnElement`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")时，当作为表达式传递给[`Session.query()`](../orm/session_api.html#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query")时无法正确处理。0.9版本的逻辑恰好成功，因此现在支持这种用例。
- en: 'References: [#3448](https://www.sqlalchemy.org/trac/ticket/3448)'
  id: totrans-416
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3448](https://www.sqlalchemy.org/trac/ticket/3448)
- en: sql
  id: totrans-417
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-418
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed a bug where clause adaption as applied to a [`Label`](../core/sqlelement.html#sqlalchemy.sql.expression.Label
    "sqlalchemy.sql.expression.Label") object would fail to accommodate the labeled
    SQL expression in all cases, such that any SQL operation that made use of [`Label.self_group()`](../core/sqlelement.html#sqlalchemy.sql.expression.Label.self_group
    "sqlalchemy.sql.expression.Label.self_group") would use the original unadapted
    expression. One effect of this would be that an ORM [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") construct would not fully accommodate attributes mapped
    by [`column_property`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property"), such that the un-aliased table could leak out
    when the property were used in some kinds of SQL comparisons.
  id: totrans-419
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即应用于[`Label`](../core/sqlelement.html#sqlalchemy.sql.expression.Label
    "sqlalchemy.sql.expression.Label")对象的子句适应在所有情况下都会失败，这样任何使用[`Label.self_group()`](../core/sqlelement.html#sqlalchemy.sql.expression.Label.self_group
    "sqlalchemy.sql.expression.Label.self_group")的SQL操作都会使用原始未适应的表达式。其中一个影响是ORM [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased")构造将无法完全适应由[`column_property`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property")映射的属性，因此在某些类型的SQL比较中，未别名化的表可能会泄漏出来。
- en: 'References: [#3445](https://www.sqlalchemy.org/trac/ticket/3445)'
  id: totrans-420
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3445](https://www.sqlalchemy.org/trac/ticket/3445)
- en: postgresql
  id: totrans-421
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-422
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added support for storage parameters under CREATE INDEX, using a new keyword
    argument `postgresql_with`. Also added support for reflection to support both
    the `postgresql_with` flag as well as the `postgresql_using` flag, which will
    now be set on [`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    objects that are reflected, as well present in a new “dialect_options” dictionary
    in the result of [`Inspector.get_indexes()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_indexes
    "sqlalchemy.engine.reflection.Inspector.get_indexes"). Pull request courtesy Pete
    Hollobon.
  id: totrans-423
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对在CREATE INDEX下使用存储参数的支持，使用了一个新的关键字参数`postgresql_with`。还增加了反射支持，以支持`postgresql_with`标志和`postgresql_using`标志，这些标志现在将设置在被反射的[`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")对象上，并且在[`Inspector.get_indexes()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_indexes
    "sqlalchemy.engine.reflection.Inspector.get_indexes")的结果中还存在一个新的“dialect_options”字典中。感谢Pete
    Hollobon的Pull请求。
- en: See also
  id: totrans-424
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Index Storage Parameters](../dialects/postgresql.html#postgresql-index-storage)'
  id: totrans-425
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[索引存储参数](../dialects/postgresql.html#postgresql-index-storage)'
- en: 'References: [#3455](https://www.sqlalchemy.org/trac/ticket/3455)'
  id: totrans-426
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3455](https://www.sqlalchemy.org/trac/ticket/3455)
- en: '**[postgresql] [feature]**'
  id: totrans-427
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added new execution option `max_row_buffer` which is interpreted by the psycopg2
    dialect when the `stream_results` option is used, which sets a limit on the size
    of the row buffer that may be allocated. This value is also provided based on
    the integer value sent to [`Query.yield_per()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.yield_per
    "sqlalchemy.orm.Query.yield_per"). Pull request courtesy mcclurem.
  id: totrans-428
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了新的执行选项`max_row_buffer`，当使用`stream_results`选项时，由psycopg2方言解释，它设置了可以分配的行缓冲区的大小限制。这个值也是基于发送给[`Query.yield_per()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.yield_per
    "sqlalchemy.orm.Query.yield_per")的整数值提供的。感谢mcclurem的Pull请求。
- en: '**[postgresql] [bug] [pypy]**'
  id: totrans-429
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug] [pypy]**'
- en: Re-fixed this issue first released in 1.0.5 to fix psycopg2cffi JSONB support
    once again, as they suddenly switched on unconditional decoding of JSONB types
    in version 2.7.1. Version detection now specifies 2.7.1 as where we should expect
    the DBAPI to do json encoding for us.
  id: totrans-430
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重新修复了在1.0.5中首次发布的问题，以再次修复psycopg2cffi对JSONB支持，因为他们突然在2.7.1版本中切换到了对JSONB类型的无条件解码。版本检测现在指定2.7.1是我们应该期望DBAPI为我们进行json编码的地方。
- en: 'References: [#3439](https://www.sqlalchemy.org/trac/ticket/3439)'
  id: totrans-431
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3439](https://www.sqlalchemy.org/trac/ticket/3439)
- en: '**[postgresql] [bug]**'
  id: totrans-432
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Repaired the [`ExcludeConstraint`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint") construct to support common
    features that other objects like [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") now do, that the column expression may be specified
    as an arbitrary SQL expression such as [`cast`](../core/sqlelement.html#sqlalchemy.sql.expression.cast
    "sqlalchemy.sql.expression.cast") or [`text`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text").
  id: totrans-433
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`ExcludeConstraint`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint")构造，以支持其他对象（如[`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")）现在支持的常见功能，即列表达式可以指定为任意的 SQL 表达式，如[`cast`](../core/sqlelement.html#sqlalchemy.sql.expression.cast
    "sqlalchemy.sql.expression.cast")或[`text`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")。
- en: 'References: [#3454](https://www.sqlalchemy.org/trac/ticket/3454)'
  id: totrans-434
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3454](https://www.sqlalchemy.org/trac/ticket/3454)
- en: mssql
  id: totrans-435
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-436
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed issue when using [`VARBINARY`](../core/type_basics.html#sqlalchemy.types.VARBINARY
    "sqlalchemy.types.VARBINARY") type in conjunction with an INSERT of NULL + pyodbc;
    pyodbc requires a special object be passed in order to persist NULL. As the [`VARBINARY`](../core/type_basics.html#sqlalchemy.types.VARBINARY
    "sqlalchemy.types.VARBINARY") type is now usually the default for [`LargeBinary`](../core/type_basics.html#sqlalchemy.types.LargeBinary
    "sqlalchemy.types.LargeBinary") due to [#3039](https://www.sqlalchemy.org/trac/ticket/3039),
    this issue is partially a regression in 1.0. The pymssql driver appears to be
    unaffected.
  id: totrans-437
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用[`VARBINARY`](../core/type_basics.html#sqlalchemy.types.VARBINARY "sqlalchemy.types.VARBINARY")类型与插入
    NULL + pyodbc 时出现的问题；pyodbc 需要传递一个特殊对象以保留 NULL。由于由于[#3039](https://www.sqlalchemy.org/trac/ticket/3039)，[`VARBINARY`](../core/type_basics.html#sqlalchemy.types.VARBINARY
    "sqlalchemy.types.VARBINARY")类型现在通常是[`LargeBinary`](../core/type_basics.html#sqlalchemy.types.LargeBinary
    "sqlalchemy.types.LargeBinary")的默认值，因此这个问题在1.0中部分是一个退化。pymssql 驱动程序似乎不受影响。
- en: 'References: [#3464](https://www.sqlalchemy.org/trac/ticket/3464)'
  id: totrans-438
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3464](https://www.sqlalchemy.org/trac/ticket/3464)
- en: misc
  id: totrans-439
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [documentation]**'
  id: totrans-440
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [documentation]**'
- en: Fixed an internal “memoization” routine for method types such that a Python
    descriptor is no longer used; repairs inspectability of these methods including
    support for Sphinx documentation.
  id: totrans-441
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了内部的“记忆化”方法类型，不再使用 Python 描述符；修复了这些方法的可检查性，包括对 Sphinx 文档的支持。
- en: 'References: [#2077](https://www.sqlalchemy.org/trac/ticket/2077)'
  id: totrans-442
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2077](https://www.sqlalchemy.org/trac/ticket/2077)
- en: 1.0.5
  id: totrans-443
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.0.5
- en: 'Released: June 7, 2015'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2015年6月7日
- en: orm
  id: totrans-445
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-446
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new event [`InstanceEvents.refresh_flush()`](../orm/events.html#sqlalchemy.orm.InstanceEvents.refresh_flush
    "sqlalchemy.orm.InstanceEvents.refresh_flush"), invoked when an INSERT or UPDATE
    level default value fetched via RETURNING or Python-side default is invoked within
    the flush process. This is to provide a hook that is no longer present as a result
    of [#3167](https://www.sqlalchemy.org/trac/ticket/3167), where attribute and validation
    events are no longer called within the flush process.
  id: totrans-447
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的事件[`InstanceEvents.refresh_flush()`](../orm/events.html#sqlalchemy.orm.InstanceEvents.refresh_flush
    "sqlalchemy.orm.InstanceEvents.refresh_flush")，在刷新过程中通过 RETURNING 或 Python-side
    默认值获取的 INSERT 或 UPDATE 级别默认值时调用。这是为了提供一个钩子，因为由于[#3167](https://www.sqlalchemy.org/trac/ticket/3167)的结果，属性和验证事件不再在刷新过程中调用。
- en: 'References: [#3427](https://www.sqlalchemy.org/trac/ticket/3427)'
  id: totrans-448
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3427](https://www.sqlalchemy.org/trac/ticket/3427)
- en: '**[orm] [bug]**'
  id: totrans-449
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The “lightweight named tuple” used when a [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") returns rows failed to implement `__slots__` correctly
    such that it still had a `__dict__`. This is resolved, but in the extremely unlikely
    case someone was assigning values to the returned tuples, that will no longer
    work.
  id: totrans-450
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")返回行时使用的“轻量级命名元组”未正确实现`__slots__`，以至于仍然有一个`__dict__`。这个问题已经解决，但在极不可能的情况下，如果有人给返回的元组赋值，那将不再起作用。
- en: 'References: [#3420](https://www.sqlalchemy.org/trac/ticket/3420)'
  id: totrans-451
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3420](https://www.sqlalchemy.org/trac/ticket/3420)
- en: engine
  id: totrans-452
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [feature]**'
  id: totrans-453
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: Added new engine event [`ConnectionEvents.engine_disposed()`](../core/events.html#sqlalchemy.events.ConnectionEvents.engine_disposed
    "sqlalchemy.events.ConnectionEvents.engine_disposed"). Called after the [`Engine.dispose()`](../core/connections.html#sqlalchemy.engine.Engine.dispose
    "sqlalchemy.engine.Engine.dispose") method is called.
  id: totrans-454
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的引擎事件[`ConnectionEvents.engine_disposed()`](../core/events.html#sqlalchemy.events.ConnectionEvents.engine_disposed
    "sqlalchemy.events.ConnectionEvents.engine_disposed")。在调用[`Engine.dispose()`](../core/connections.html#sqlalchemy.engine.Engine.dispose
    "sqlalchemy.engine.Engine.dispose")方法之后调用。
- en: '**[engine] [feature]**'
  id: totrans-455
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: Adjustments to the engine plugin hook, such that the [`URL.get_dialect()`](../core/engines.html#sqlalchemy.engine.URL.get_dialect
    "sqlalchemy.engine.URL.get_dialect") method will continue to return the ultimate
    [`Dialect`](../core/internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    object when a dialect plugin is used, without the need for the caller to be aware
    of the [`Dialect.get_dialect_cls()`](../core/internals.html#sqlalchemy.engine.Dialect.get_dialect_cls
    "sqlalchemy.engine.Dialect.get_dialect_cls") method.
  id: totrans-456
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整引擎插件钩子，使得当使用方言插件时，[`URL.get_dialect()`](../core/engines.html#sqlalchemy.engine.URL.get_dialect
    "sqlalchemy.engine.URL.get_dialect")方法将继续返回最终的[`Dialect`](../core/internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect")对象，而不需要调用者知道[`Dialect.get_dialect_cls()`](../core/internals.html#sqlalchemy.engine.Dialect.get_dialect_cls
    "sqlalchemy.engine.Dialect.get_dialect_cls")方法。
- en: 'References: [#3379](https://www.sqlalchemy.org/trac/ticket/3379)'
  id: totrans-457
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3379](https://www.sqlalchemy.org/trac/ticket/3379)
- en: '**[engine] [bug]**'
  id: totrans-458
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed bug where known boolean values used by [`engine_from_config()`](../core/engines.html#sqlalchemy.engine_from_config
    "sqlalchemy.engine_from_config") were not being parsed correctly; these included
    `pool_threadlocal` and the psycopg2 argument `use_native_unicode`.
  id: totrans-459
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了已知布尔值在[`engine_from_config()`](../core/engines.html#sqlalchemy.engine_from_config
    "sqlalchemy.engine_from_config")中使用时未被正确解析的 bug；这些包括`pool_threadlocal`和 psycopg2
    参数`use_native_unicode`。
- en: 'References: [#3435](https://www.sqlalchemy.org/trac/ticket/3435)'
  id: totrans-460
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3435](https://www.sqlalchemy.org/trac/ticket/3435)
- en: '**[engine] [bug]**'
  id: totrans-461
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Added support for the case of the misbehaving DBAPI that has pep-249 exception
    names linked to exception classes of an entirely different name, preventing SQLAlchemy’s
    own exception wrapping from wrapping the error appropriately. The SQLAlchemy dialect
    in use needs to implement a new accessor [`DefaultDialect.dbapi_exception_translation_map`](../core/internals.html#sqlalchemy.engine.default.DefaultDialect.dbapi_exception_translation_map
    "sqlalchemy.engine.default.DefaultDialect.dbapi_exception_translation_map") to
    support this feature; this is implemented now for the py-postgresql dialect.
  id: totrans-462
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对行为不端的 DBAPI 的支持，该 DBAPI 将 pep-249 异常名称链接到完全不同名称的异常类，从而阻止 SQLAlchemy 自身的异常包装适当地包装错误。正在使用的
    SQLAlchemy 方言需要实现一个新的访问器[`DefaultDialect.dbapi_exception_translation_map`](../core/internals.html#sqlalchemy.engine.default.DefaultDialect.dbapi_exception_translation_map
    "sqlalchemy.engine.default.DefaultDialect.dbapi_exception_translation_map")来支持此功能；现在已为
    py-postgresql 方言实现了这一功能。
- en: 'References: [#3421](https://www.sqlalchemy.org/trac/ticket/3421)'
  id: totrans-463
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3421](https://www.sqlalchemy.org/trac/ticket/3421)
- en: '**[engine] [bug]**'
  id: totrans-464
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed bug involving the case when pool checkout event handlers are used and
    connection attempts are made in the handler itself which fail, the owning connection
    record would not be freed until the stack trace of the connect error itself were
    freed. For the case where a test pool of only a single connection were used, this
    means the pool would be fully checked out until that stack trace were freed. This
    mostly impacts very specific debugging scenarios and is unlikely to have been
    noticeable in any production application. The fix applies an explicit checkin
    of the record before re-raising the caught exception.
  id: totrans-465
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，当使用池检出事件处理程序并在处理程序本身中进行连接尝试并失败时，拥有连接记录直到连接错误的堆栈跟踪被释放之前不会被释放。对于仅使用单个连接的测试池的情况，这意味着池将完全被检出，直到该堆栈跟踪被释放。这主要影响非常特定的调试场景，不太可能在任何生产应用程序中引起注意。修复方法是在重新引发捕获的异常之前显式检入记录。
- en: 'References: [#3419](https://www.sqlalchemy.org/trac/ticket/3419)'
  id: totrans-466
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3419](https://www.sqlalchemy.org/trac/ticket/3419)
- en: sql
  id: totrans-467
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-468
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added official support for a CTE used by the SELECT present inside of [`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select"). This behavior worked accidentally
    up until 0.9.9, when it no longer worked due to unrelated changes as part of [#3248](https://www.sqlalchemy.org/trac/ticket/3248).
    Note that this is the rendering of the WITH clause after the INSERT, before the
    SELECT; the full functionality of CTEs rendered at the top level of INSERT, UPDATE,
    DELETE is a new feature targeted for a later release.
  id: totrans-469
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 官方支持了[`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select")内部 SELECT 中使用的 CTE。此行为直到 0.9.9
    之前都是偶然发生的，当时由于与 [#3248](https://www.sqlalchemy.org/trac/ticket/3248) 相关的其他更改，它不再起作用。请注意，这是在
    INSERT 之后、SELECT 之前渲染 WITH 子句的方式；在 INSERT、UPDATE、DELETE 的顶层渲染 CTE 的完整功能是针对以后的版本发布的新功能。
- en: 'This change is also **backported** to: 0.9.10'
  id: totrans-470
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯到**：0.9.10
- en: 'References: [#3418](https://www.sqlalchemy.org/trac/ticket/3418)'
  id: totrans-471
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3418](https://www.sqlalchemy.org/trac/ticket/3418)
- en: postgresql
  id: totrans-472
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug] [pypy]**'
  id: totrans-473
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug] [pypy]**'
- en: Repaired some typing and test issues related to the pypy psycopg2cffi dialect,
    in particular that the current 2.7.0 version does not have native support for
    the JSONB type. The version detection for psycopg2 features has been tuned into
    a specific sub-version for psycopg2cffi. Additionally, test coverage has been
    enabled for the full series of psycopg2 features under psycopg2cffi.
  id: totrans-474
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了与 pypy psycopg2cffi 方言相关的一些打字和测试问题，特别是当前的 2.7.0 版本不支持 JSONB 类型。对于 psycopg2
    特性的版本检测已调整为适用于特定的 psycopg2cffi 子版本。此外，已启用了对 psycopg2cffi 下的完整系列 psycopg2 特性的测试覆盖。
- en: 'References: [#3439](https://www.sqlalchemy.org/trac/ticket/3439)'
  id: totrans-475
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3439](https://www.sqlalchemy.org/trac/ticket/3439)
- en: mssql
  id: totrans-476
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-477
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Added a new dialect flag to the MSSQL dialect `legacy_schema_aliasing` which
    when set to False will disable a very old and obsolete behavior, that of the compiler’s
    attempt to turn all schema-qualified table names into alias names, to work around
    old and no longer locatable issues where SQL server could not parse a multi-part
    identifier name in all circumstances. The behavior prevented more sophisticated
    statements from working correctly, including those which use hints, as well as
    CRUD statements that embed correlated SELECT statements. Rather than continue
    to repair the feature to work with more complex statements, it’s better to just
    disable it as it should no longer be needed for any modern SQL server version.
    The flag defaults to True for the 1.0.x series, leaving current behavior unchanged
    for this version series. In the 1.1 series, it will default to False. For the
    1.0 series, when not set to either value explicitly, a warning is emitted when
    a schema-qualified table is first used in a statement, which suggests that the
    flag be set to False for all modern SQL Server versions.
  id: totrans-478
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 MSSQL 方言添加了一个新的方言标志 `legacy_schema_aliasing`，当设置为 False 时将禁用非常古老且已过时的行为，即编译器尝试将所有模式限定的表名转换为别名，以解决
    SQL Server 无法在所有情况下解析多部分标识符名称的旧问题，以使更复杂的语句能够正确工作，包括使用提示的语句以及嵌入相关 SELECT 语句的 CRUD
    语句。与其继续修复该特性以使其能够与更复杂的语句一起工作，不如直接禁用它，因为对于任何现代 SQL Server 版本，它应该不再需要。该标志在 1.0.x
    系列中默认为 True，保持当前版本系列的行为不变。在 1.1 系列中，它将默认为 False。对于 1.0 系列，当未显式设置为任一值时，在语句中首次使用模式限定的表时会发出警告，建议将该标志设置为
    False 以适用于所有现代 SQL Server 版本。
- en: See also
  id: totrans-479
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Legacy Schema Mode](../dialects/mssql.html#legacy-schema-rendering)'
  id: totrans-480
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[传统架构模式](../dialects/mssql.html#legacy-schema-rendering)'
- en: 'References: [#3424](https://www.sqlalchemy.org/trac/ticket/3424), [#3430](https://www.sqlalchemy.org/trac/ticket/3430)'
  id: totrans-481
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3424](https://www.sqlalchemy.org/trac/ticket/3424)，[#3430](https://www.sqlalchemy.org/trac/ticket/3430)
- en: misc
  id: totrans-482
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[feature] [ext]**'
  id: totrans-483
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[功能] [扩展]**'
- en: Added support for `*args` to be passed to the baked query initial callable,
    in the same way that `*args` are supported for the [`BakedQuery.add_criteria()`](../orm/extensions/baked.html#sqlalchemy.ext.baked.BakedQuery.add_criteria
    "sqlalchemy.ext.baked.BakedQuery.add_criteria") and [`BakedQuery.with_criteria()`](../orm/extensions/baked.html#sqlalchemy.ext.baked.BakedQuery.with_criteria
    "sqlalchemy.ext.baked.BakedQuery.with_criteria") methods. Initial PR courtesy
    Naoki INADA.
  id: totrans-484
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对`*args`传递给烘焙查询初始可调用的支持，方式与[`BakedQuery.add_criteria()`](../orm/extensions/baked.html#sqlalchemy.ext.baked.BakedQuery.add_criteria
    "sqlalchemy.ext.baked.BakedQuery.add_criteria")和[`BakedQuery.with_criteria()`](../orm/extensions/baked.html#sqlalchemy.ext.baked.BakedQuery.with_criteria
    "sqlalchemy.ext.baked.BakedQuery.with_criteria")方法支持`*args`的方式相同。初始PR由Naoki INADA提供。
- en: '**[feature] [ext]**'
  id: totrans-485
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[功能] [扩展]**'
- en: Added a new semi-public method to [`MutableBase`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableBase
    "sqlalchemy.ext.mutable.MutableBase") `MutableBase._get_listen_keys()`. Overriding
    this method is needed in the case where a [`MutableBase`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableBase
    "sqlalchemy.ext.mutable.MutableBase") subclass needs events to propagate for attribute
    keys other than the key to which the mutable type is associated with, when intercepting
    the [`InstanceEvents.refresh()`](../orm/events.html#sqlalchemy.orm.InstanceEvents.refresh
    "sqlalchemy.orm.InstanceEvents.refresh") or [`InstanceEvents.refresh_flush()`](../orm/events.html#sqlalchemy.orm.InstanceEvents.refresh_flush
    "sqlalchemy.orm.InstanceEvents.refresh_flush") events. The current example of
    this is composites using [`MutableComposite`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableComposite
    "sqlalchemy.ext.mutable.MutableComposite").
  id: totrans-486
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的半公共方法[`MutableBase`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableBase
    "sqlalchemy.ext.mutable.MutableBase") `MutableBase._get_listen_keys()`。在拦截[`InstanceEvents.refresh()`](../orm/events.html#sqlalchemy.orm.InstanceEvents.refresh
    "sqlalchemy.orm.InstanceEvents.refresh")或[`InstanceEvents.refresh_flush()`](../orm/events.html#sqlalchemy.orm.InstanceEvents.refresh_flush
    "sqlalchemy.orm.InstanceEvents.refresh_flush")事件时，需要重写此方法，以便在[`MutableBase`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableBase
    "sqlalchemy.ext.mutable.MutableBase")子类需要事件传播到与可变类型关联的键之外的属性键时。目前的示例是使用[`MutableComposite`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableComposite
    "sqlalchemy.ext.mutable.MutableComposite")的复合体。
- en: 'References: [#3427](https://www.sqlalchemy.org/trac/ticket/3427)'
  id: totrans-487
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3427](https://www.sqlalchemy.org/trac/ticket/3427)
- en: '**[bug] [ext]**'
  id: totrans-488
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [扩展]**'
- en: Fixed regression in the [`sqlalchemy.ext.mutable`](../orm/extensions/mutable.html#module-sqlalchemy.ext.mutable
    "sqlalchemy.ext.mutable") extension as a result of the bugfix for [#3167](https://www.sqlalchemy.org/trac/ticket/3167),
    where attribute and validation events are no longer called within the flush process.
    The mutable extension was relying upon this behavior in the case where a column
    level Python-side default were responsible for generating the new value on INSERT
    or UPDATE, or when a value were fetched from the RETURNING clause for “eager defaults”
    mode. The new value would not be subject to any event when populated and the mutable
    extension could not establish proper coercion or history listening. A new event
    [`InstanceEvents.refresh_flush()`](../orm/events.html#sqlalchemy.orm.InstanceEvents.refresh_flush
    "sqlalchemy.orm.InstanceEvents.refresh_flush") is added which the mutable extension
    now makes use of for this use case.
  id: totrans-489
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`sqlalchemy.ext.mutable`](../orm/extensions/mutable.html#module-sqlalchemy.ext.mutable
    "sqlalchemy.ext.mutable")扩展中的回归问题，这是由于对[#3167](https://www.sqlalchemy.org/trac/ticket/3167)的错误修复导致的，其中属性和验证事件不再在刷新过程中调用。在列级别的Python端默认值负责生成INSERT或UPDATE的新值，或者在“eager
    defaults”模式下从RETURNING子句中获取值的情况下，可变扩展依赖于此行为。当填充新值时，新值不会受到任何事件的影响，可变扩展无法建立适当的强制转换或历史监听。添加了一个新事件[`InstanceEvents.refresh_flush()`](../orm/events.html#sqlalchemy.orm.InstanceEvents.refresh_flush
    "sqlalchemy.orm.InstanceEvents.refresh_flush")，可变扩展现在使用这个事件来处理这种情况。
- en: 'References: [#3427](https://www.sqlalchemy.org/trac/ticket/3427)'
  id: totrans-490
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3427](https://www.sqlalchemy.org/trac/ticket/3427)
- en: 1.0.4
  id: totrans-491
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.0.4
- en: 'Released: May 7, 2015'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2015年5月7日
- en: orm
  id: totrans-493
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-494
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed unexpected-use regression where in the odd case that the primaryjoin of
    a relationship involved comparison to an unhashable type such as an HSTORE, lazy
    loads would fail due to a hash-oriented check on the statement parameters, modified
    in 1.0 as a result of [#3061](https://www.sqlalchemy.org/trac/ticket/3061) to
    use hashing and modified in [#3368](https://www.sqlalchemy.org/trac/ticket/3368)
    to occur in cases more common than “load on pending”. The values are now checked
    for the `__hash__` attribute beforehand.
  id: totrans-495
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个意外使用回归问题，即在关系的主连接涉及与不可哈希类型（如HSTORE）的比较的奇怪情况下，由于语句参数上的哈希导向检查，在1.0中修改为使用哈希，并在[#3368](https://www.sqlalchemy.org/trac/ticket/3368)中修改为在比“挂起加载”更常见的情况下发生。现在会事先检查值是否具有`__hash__`属性。
- en: 'References: [#3416](https://www.sqlalchemy.org/trac/ticket/3416)'
  id: totrans-496
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3416](https://www.sqlalchemy.org/trac/ticket/3416)
- en: '**[orm] [bug]**'
  id: totrans-497
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [错误]**'
- en: Liberalized an assertion that was added as part of [#3347](https://www.sqlalchemy.org/trac/ticket/3347)
    to protect against unknown conditions when splicing inner joins together within
    joined eager loads with `innerjoin=True`; if some of the joins use a “secondary”
    table, the assertion needs to unwrap further joins in order to pass.
  id: totrans-498
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 放宽了一个断言，该断言是作为[#3347](https://www.sqlalchemy.org/trac/ticket/3347)的一部分添加的，以防止在使用`innerjoin=True`在连接的急切加载中拼接内部连接时出现未知条件；如果一些连接使用“secondary”表，则需要进一步展开连接以通过。
- en: 'References: [#3347](https://www.sqlalchemy.org/trac/ticket/3347), [#3412](https://www.sqlalchemy.org/trac/ticket/3412)'
  id: totrans-499
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3347](https://www.sqlalchemy.org/trac/ticket/3347), [#3412](https://www.sqlalchemy.org/trac/ticket/3412)
- en: '**[orm] [bug]**'
  id: totrans-500
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [错误]**'
- en: Repaired / added to tests yet more expressions that were reported as failing
    with the new ‘entity’ key value added to [`Query.column_descriptions`](../orm/queryguide/query.html#sqlalchemy.orm.Query.column_descriptions
    "sqlalchemy.orm.Query.column_descriptions"), the logic to discover the “from”
    clause is again reworked to accommodate columns from aliased classes, as well
    as to report the correct value for the “aliased” flag in these cases.
  id: totrans-501
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复/添加了更多表达式的测试，这些表达式被报告为在新的‘entity’键值添加到[`Query.column_descriptions`](../orm/queryguide/query.html#sqlalchemy.orm.Query.column_descriptions
    "sqlalchemy.orm.Query.column_descriptions")中失败，重新设计了发现“from”子句的逻辑，以适应来自别名类的列，以及在这些情况下报告“aliased”标志的正确值。
- en: 'References: [#3320](https://www.sqlalchemy.org/trac/ticket/3320), [#3409](https://www.sqlalchemy.org/trac/ticket/3409)'
  id: totrans-502
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3320](https://www.sqlalchemy.org/trac/ticket/3320), [#3409](https://www.sqlalchemy.org/trac/ticket/3409)
- en: schema
  id: totrans-503
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: '**[schema] [bug]**'
  id: totrans-504
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [错误]**'
- en: Fixed bug in enhanced constraint-attachment logic introduced in [#3341](https://www.sqlalchemy.org/trac/ticket/3341)
    where in the unusual case of a constraint that refers to a mixture of [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects and string column names at the same time,
    the auto-attach-on-column-attach logic will be skipped; for the constraint to
    be auto-attached in this case, all columns must be assembled on the target table
    up front. Added a new section to the migration document regarding the original
    feature as well as this change.
  id: totrans-505
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在增强的约束附加逻辑中引入的错误，该错误在罕见情况下，约束同时引用[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象和字符串列名称时，将跳过自动附加到列附加逻辑；对于约束在这种情况下自动附加，必须提前将所有列组装到目标表上。在迁移文档中添加了关于原始功能以及此更改的新部分。
- en: See also
  id: totrans-506
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Constraints referring to unattached Columns can auto-attach to the Table when
    their referred columns are attached](migration_10.html#change-3341)'
  id: totrans-507
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[引用未附加列的约束可以在其引用的列附加时自动附加到表格](migration_10.html#change-3341)'
- en: 'References: [#3411](https://www.sqlalchemy.org/trac/ticket/3411)'
  id: totrans-508
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3411](https://www.sqlalchemy.org/trac/ticket/3411)
- en: tests
  id: totrans-509
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [bug] [pypy]**'
  id: totrans-510
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[测试] [错误] [pypy]**'
- en: Fixed an import that prevented “pypy setup.py test” from working correctly.
  id: totrans-511
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个导入问题，导致“pypy setup.py test”无法正常工作。
- en: 'This change is also **backported** to: 0.9.10'
  id: totrans-512
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.10
- en: 'References: [#3406](https://www.sqlalchemy.org/trac/ticket/3406)'
  id: totrans-513
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3406](https://www.sqlalchemy.org/trac/ticket/3406)
- en: misc
  id: totrans-514
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [ext]**'
  id: totrans-515
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [扩展]**'
- en: Fixed bug where when using extended attribute instrumentation system, the correct
    exception would not be raised when [`class_mapper()`](../orm/mapping_api.html#sqlalchemy.orm.class_mapper
    "sqlalchemy.orm.class_mapper") were called with an invalid input that also happened
    to not be weak referencable, such as an integer.
  id: totrans-516
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用扩展属性仪器系统时的错误，当使用[`class_mapper()`](../orm/mapping_api.html#sqlalchemy.orm.class_mapper
    "sqlalchemy.orm.class_mapper")调用无效输入（也恰好不是弱引用）时，不会引发正确的异常。
- en: 'This change is also **backported** to: 0.9.10'
  id: totrans-517
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.10
- en: 'References: [#3408](https://www.sqlalchemy.org/trac/ticket/3408)'
  id: totrans-518
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3408](https://www.sqlalchemy.org/trac/ticket/3408)
- en: 1.0.3
  id: totrans-519
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.0.3
- en: 'Released: April 30, 2015'
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2015年4月30日
- en: orm
  id: totrans-521
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug] [pypy]**'
  id: totrans-522
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [pypy]**'
- en: Fixed regression from 0.9.10 prior to release due to [#3349](https://www.sqlalchemy.org/trac/ticket/3349)
    where the check for query state on [`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update") or [`Query.delete()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.delete
    "sqlalchemy.orm.Query.delete") compared the empty tuple to itself using `is`,
    which fails on PyPy to produce `True` in this case; this would erroneously emit
    a warning in 0.9 and raise an exception in 1.0.
  id: totrans-523
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于[#3349](https://www.sqlalchemy.org/trac/ticket/3349)导致的发布之前的回归问题，即在[`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update")或[`Query.delete()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.delete
    "sqlalchemy.orm.Query.delete")上检查查询状态时，使用`is`将空元组与自身进行比较，在PyPy上失败，导致在这种情况下产生`True`；这将在0.9中错误地发出警告，并在1.0中引发异常。
- en: 'References: [#3405](https://www.sqlalchemy.org/trac/ticket/3405)'
  id: totrans-524
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3405](https://www.sqlalchemy.org/trac/ticket/3405)
- en: '**[orm] [bug]**'
  id: totrans-525
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression from 0.9.10 prior to release where the new addition of `entity`
    to the [`Query.column_descriptions`](../orm/queryguide/query.html#sqlalchemy.orm.Query.column_descriptions
    "sqlalchemy.orm.Query.column_descriptions") accessor would fail if the target
    entity was produced from a core selectable such as a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") or [`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE") object.
  id: totrans-526
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在发布之前从0.9.10版本开始的回归问题，即将`entity`添加到[`Query.column_descriptions`](../orm/queryguide/query.html#sqlalchemy.orm.Query.column_descriptions
    "sqlalchemy.orm.Query.column_descriptions")访问器时，如果目标实体是从核心可选择对象（如[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")或[`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE")对象）生成的，则会失败。
- en: 'References: [#3320](https://www.sqlalchemy.org/trac/ticket/3320), [#3403](https://www.sqlalchemy.org/trac/ticket/3403)'
  id: totrans-527
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3320](https://www.sqlalchemy.org/trac/ticket/3320), [#3403](https://www.sqlalchemy.org/trac/ticket/3403)
- en: '**[orm] [bug]**'
  id: totrans-528
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression within the flush process when an attribute were set to a SQL
    expression for an UPDATE, and the SQL expression when compared to the previous
    value of the attribute would produce a SQL comparison other than `==` or `!=`,
    the exception “Boolean value of this clause is not defined” would raise. The fix
    ensures that the unit of work will not interpret the SQL expression in this way.
  id: totrans-529
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在刷新过程中的回归问题，当属性设置为UPDATE的SQL表达式时，与属性的先前值进行比较时，如果SQL表达式产生的SQL比较不是`==`或`!=`，则会引发异常“此子句的布尔值未定义”。修复确保工作单元不会以这种方式解释SQL表达式。
- en: 'References: [#3402](https://www.sqlalchemy.org/trac/ticket/3402)'
  id: totrans-530
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3402](https://www.sqlalchemy.org/trac/ticket/3402)
- en: '**[orm] [bug]**'
  id: totrans-531
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed unexpected use regression due to [#2992](https://www.sqlalchemy.org/trac/ticket/2992)
    where textual elements placed into the [`Query.order_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.order_by
    "sqlalchemy.orm.Query.order_by") clause in conjunction with joined eager loading
    would be added to the columns clause of the inner query in such a way that they
    were assumed to be table-bound column names, in the case where the joined eager
    load needs to wrap the query in a subquery to accommodate for a limit/offset.
  id: totrans-532
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由于[#2992](https://www.sqlalchemy.org/trac/ticket/2992)导致的意外使用回归问题，其中在与连接的急加载一起放置到[`Query.order_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.order_by
    "sqlalchemy.orm.Query.order_by")子句中的文本元素会被添加到内部查询的列子句中，以一种被假定为表绑定列名的方式，这种情况下，连接的急加载需要将查询包装在子查询中以适应限制/偏移量。
- en: Originally, the behavior here was intentional, in that a query such as `query(User).order_by('name').limit(1)`
    would order by `user.name` even if the query was modified by joined eager loading
    to be within a subquery, as `'name'` would be interpreted as a symbol to be located
    within the FROM clauses, in this case `User.name`, which would then be copied
    into the columns clause to ensure it were present for ORDER BY. However, the feature
    fails to anticipate the case where `order_by("name")` refers to a specific label
    name present in the local columns clause already and not a name bound to a selectable
    in the FROM clause.
  id: totrans-533
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最初，这里的行为是有意的，例如`query(User).order_by('name').limit(1)`这样的查询将按`user.name`排序，即使查询被连接式急加载修改为在子查询中，因为`'name'`将被解释为一个符号，应该在FROM子句中定位，此处为`User.name`，然后将其复制到列子句中以确保它在ORDER
    BY中存在。然而，该功能未能预料到`order_by("name")`指的是本地列子句中已经存在的特定标签名称，而不是绑定到FROM子句中的名称。
- en: Beyond that, the feature also fails for deprecated cases such as `order_by("name
    desc")`, which, while it emits a warning that [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") should be used here (note that the issue does
    not impact cases where [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") is used explicitly), still produces a different
    query than previously where the “name desc” expression is copied into the columns
    clause inappropriately. The resolution is such that the “joined eager loading”
    aspect of the feature will skip over these so-called “label reference” expressions
    when augmenting the inner columns clause, as though they were [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") constructs already.
  id: totrans-534
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此外，该功能在像`order_by("name desc")`这样的已弃用情况下也会失败，尽管它会发出警告，指出应该在这里使用[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")（请注意，该问题不会影响显式使用[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")的情况），但仍会产生与以前不同的查询，其中“name desc”表达式被不当地复制到列子句中。解决方案是，该功能的“连接式急加载”方面将在增强内部列子句时跳过这些所谓的“标签引用”表达式，就好像它们已经是[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")构造一样。
- en: 'References: [#3392](https://www.sqlalchemy.org/trac/ticket/3392)'
  id: totrans-535
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3392](https://www.sqlalchemy.org/trac/ticket/3392)
- en: '**[orm] [bug]**'
  id: totrans-536
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a regression regarding the [`MapperEvents.instrument_class()`](../orm/events.html#sqlalchemy.orm.MapperEvents.instrument_class
    "sqlalchemy.orm.MapperEvents.instrument_class") event where its invocation was
    moved to be after the class manager’s instrumentation of the class, which is the
    opposite of what the documentation for the event explicitly states. The rationale
    for the switch was due to Declarative taking the step of setting up the full “instrumentation
    manager” for a class before it was mapped for the purpose of the new `@declared_attr`
    features described in [Improvements to declarative mixins, @declared_attr and
    related features](migration_10.html#feature-3150), but the change was also made
    against the classical use of [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") for consistency. However, SQLSoup relies upon the instrumentation
    event happening before any instrumentation under classical mapping. The behavior
    is reverted in the case of classical and declarative mapping, the latter implemented
    by using a simple memoization without using class manager.
  id: totrans-537
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关于[`MapperEvents.instrument_class()`](../orm/events.html#sqlalchemy.orm.MapperEvents.instrument_class
    "sqlalchemy.orm.MapperEvents.instrument_class")事件的回归，其中其调用被移动到类管理器对类进行仪器化之后，这与事件文档明确说明的相反。切换的理由是由于Declarative在将类映射为新的`@declared_attr`功能描述的目的之前设置了完整的“仪器管理器”，但也为了与经典使用[`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")的一致性而进行了更改。然而，SQLSoup依赖于在任何经典映射下的任何仪器化之前发生的仪器化事件。在经典和声明性映射的情况下，行为被恢复，后者通过简单的记忆化实现，而不使用类管理器。
- en: 'References: [#3388](https://www.sqlalchemy.org/trac/ticket/3388)'
  id: totrans-538
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3388](https://www.sqlalchemy.org/trac/ticket/3388)
- en: '**[orm] [bug]**'
  id: totrans-539
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue in new [`QueryEvents.before_compile()`](../orm/events.html#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile") event where changes made to the [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object’s collection of entities to load within the event
    would render in the SQL, but would not be reflected during the loading process.
  id: totrans-540
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在新的[`QueryEvents.before_compile()`](../orm/events.html#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile")事件中修复了问题，在事件中对要加载的实体集合进行更改后，这些更改会反映在
    SQL 中，但在加载过程中不会反映出来。
- en: 'References: [#3387](https://www.sqlalchemy.org/trac/ticket/3387)'
  id: totrans-541
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3387](https://www.sqlalchemy.org/trac/ticket/3387)
- en: engine
  id: totrans-542
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [feature]**'
  id: totrans-543
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [功能]**'
- en: New features added to support engine/pool plugins with advanced functionality.
    Added a new “soft invalidate” feature to the connection pool at the level of the
    checked out connection wrapper as well as the [`_ConnectionRecord`](../core/pooling.html#sqlalchemy.pool._ConnectionRecord
    "sqlalchemy.pool._ConnectionRecord"). This works similarly to a modern pool invalidation
    in that connections aren’t actively closed, but are recycled only on next checkout;
    this is essentially a per-connection version of that feature. A new event [`PoolEvents.soft_invalidate()`](../core/events.html#sqlalchemy.events.PoolEvents.soft_invalidate
    "sqlalchemy.events.PoolEvents.soft_invalidate") is added to complement it.
  id: totrans-544
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新功能已添加以支持具有高级功能的引擎/池插件。在检出连接包装器的连接池级别以及[`_ConnectionRecord`](../core/pooling.html#sqlalchemy.pool._ConnectionRecord
    "sqlalchemy.pool._ConnectionRecord")中添加了一个新的“软失效”功能。这类似于现代池失效，因为连接不会被主动关闭，但只有在下次检出时才会被回收；这本质上是该功能的每个连接版本。一个新的事件[`PoolEvents.soft_invalidate()`](../core/events.html#sqlalchemy.events.PoolEvents.soft_invalidate
    "sqlalchemy.events.PoolEvents.soft_invalidate")被添加以补充它。
- en: Also added new flag [`ExceptionContext.invalidate_pool_on_disconnect`](../core/connections.html#sqlalchemy.engine.ExceptionContext.invalidate_pool_on_disconnect
    "sqlalchemy.engine.ExceptionContext.invalidate_pool_on_disconnect"). Allows an
    error handler within `ConnectionEvents.handle_error()` to maintain a “disconnect”
    condition, but to handle calling invalidate on individual connections in a specific
    manner within the event.
  id: totrans-545
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 还添加了新的标志[`ExceptionContext.invalidate_pool_on_disconnect`](../core/connections.html#sqlalchemy.engine.ExceptionContext.invalidate_pool_on_disconnect
    "sqlalchemy.engine.ExceptionContext.invalidate_pool_on_disconnect")。允许`ConnectionEvents.handle_error()`中的错误处理程序维护“断开连接”条件，但在事件中以特定方式调用单个连接的失效处理。
- en: 'References: [#3379](https://www.sqlalchemy.org/trac/ticket/3379)'
  id: totrans-546
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3379](https://www.sqlalchemy.org/trac/ticket/3379)
- en: '**[engine] [feature]**'
  id: totrans-547
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [功能]**'
- en: Added new event `do_connect`, which allows interception / replacement of when
    the [`Dialect.connect()`](../core/internals.html#sqlalchemy.engine.Dialect.connect
    "sqlalchemy.engine.Dialect.connect") hook is called to create a DBAPI connection.
    Also added dialect plugin hooks [`Dialect.get_dialect_cls()`](../core/internals.html#sqlalchemy.engine.Dialect.get_dialect_cls
    "sqlalchemy.engine.Dialect.get_dialect_cls") and [`Dialect.engine_created()`](../core/internals.html#sqlalchemy.engine.Dialect.engine_created
    "sqlalchemy.engine.Dialect.engine_created") which allow external plugins to add
    events to existing dialects using entry points.
  id: totrans-548
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的事件`do_connect`，它允许拦截/替换调用[`Dialect.connect()`](../core/internals.html#sqlalchemy.engine.Dialect.connect
    "sqlalchemy.engine.Dialect.connect")钩子以创建 DBAPI 连接的时机。还添加了方言插件钩子[`Dialect.get_dialect_cls()`](../core/internals.html#sqlalchemy.engine.Dialect.get_dialect_cls
    "sqlalchemy.engine.Dialect.get_dialect_cls")和[`Dialect.engine_created()`](../core/internals.html#sqlalchemy.engine.Dialect.engine_created
    "sqlalchemy.engine.Dialect.engine_created")，它们允许外部插件使用入口点向现有方言添加事件。
- en: 'References: [#3355](https://www.sqlalchemy.org/trac/ticket/3355)'
  id: totrans-549
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3355](https://www.sqlalchemy.org/trac/ticket/3355)
- en: sql
  id: totrans-550
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-551
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [功能]**'
- en: Added a placeholder method `TypeEngine.compare_against_backend()` which is now
    consumed by Alembic migrations as of 0.7.6\. User-defined types can implement
    this method to assist in the comparison of a type against one reflected from the
    database.
  id: totrans-552
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个占位符方法`TypeEngine.compare_against_backend()`，它现在在 Alembic 迁移中被消耗为 0.7.6\.
    用户定义的类型可以实现此方法以协助比较来自数据库的类型与反射的类型。
- en: '**[sql] [bug]**'
  id: totrans-553
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误]**'
- en: Fixed bug where the truncation of long labels in SQL could produce a label that
    overlapped another label that is not truncated; this because the length threshold
    for truncation was greater than the portion of the label that remains after truncation.
    These two values have now been made the same; label_length - 6. The effect here
    is that shorter column labels will be “truncated” where they would not have been
    truncated before.
  id: totrans-554
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 SQL 中长标签的截断可能会产生与未截断的另一个标签重叠的 bug；这是因为截断的长度阈值大于截断后剩余标签的部分。现在这两个值已经调整为相同；`label_length
    - 6`。这里的效果是，较短的列标签在以前不会被截断的情况下现在将被“截断”。
- en: 'References: [#3396](https://www.sqlalchemy.org/trac/ticket/3396)'
  id: totrans-555
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3396](https://www.sqlalchemy.org/trac/ticket/3396)
- en: '**[sql] [bug]**'
  id: totrans-556
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed regression due to [#3282](https://www.sqlalchemy.org/trac/ticket/3282)
    where the `tables` collection passed as a keyword argument to the [`DDLEvents.before_create()`](../core/events.html#sqlalchemy.events.DDLEvents.before_create
    "sqlalchemy.events.DDLEvents.before_create"), [`DDLEvents.after_create()`](../core/events.html#sqlalchemy.events.DDLEvents.after_create
    "sqlalchemy.events.DDLEvents.after_create"), [`DDLEvents.before_drop()`](../core/events.html#sqlalchemy.events.DDLEvents.before_drop
    "sqlalchemy.events.DDLEvents.before_drop"), and [`DDLEvents.after_drop()`](../core/events.html#sqlalchemy.events.DDLEvents.after_drop
    "sqlalchemy.events.DDLEvents.after_drop") events would no longer be a list of
    tables, but instead a list of tuples which contained a second entry with foreign
    keys to be added or dropped. As the `tables` collection, while documented as not
    necessarily stable, has come to be relied upon, this change is considered a regression.
    Additionally, in some cases for “drop”, this collection would be an iterator that
    would cause the operation to fail if prematurely iterated. The collection is now
    a list of table objects in all cases and test coverage for the format of this
    collection is now added.
  id: totrans-557
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于 [#3282](https://www.sqlalchemy.org/trac/ticket/3282) 导致的回归已修复，此处关于 `tables`
    集合作为关键字参数传递给 [`DDLEvents.before_create()`](../core/events.html#sqlalchemy.events.DDLEvents.before_create
    "sqlalchemy.events.DDLEvents.before_create")、[`DDLEvents.after_create()`](../core/events.html#sqlalchemy.events.DDLEvents.after_create
    "sqlalchemy.events.DDLEvents.after_create")、[`DDLEvents.before_drop()`](../core/events.html#sqlalchemy.events.DDLEvents.before_drop
    "sqlalchemy.events.DDLEvents.before_drop") 和 [`DDLEvents.after_drop()`](../core/events.html#sqlalchemy.events.DDLEvents.after_drop
    "sqlalchemy.events.DDLEvents.after_drop") 事件的 `tables` 集合不再是一个表的列表，而是一个包含第二个条目的元组列表，其中包含要添加或删除的外键。由于
    `tables` 集合，虽然被文档化为不一定稳定，但已经被依赖，因此这个变化被认为是一个回归。此外，在某些情况下，“drop” 对于这个集合将是一个迭代器，如果过早迭代将导致操作失败。现在，这个集合在所有情况下都是一个表对象的列表，并且现在已经为该集合的格式添加了测试覆盖。
- en: 'References: [#3391](https://www.sqlalchemy.org/trac/ticket/3391)'
  id: totrans-558
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3391](https://www.sqlalchemy.org/trac/ticket/3391)
- en: misc
  id: totrans-559
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他
- en: '**[bug] [ext]**'
  id: totrans-560
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug in association proxy where an any()/has() on an relationship->scalar
    non-object attribute comparison would fail, e.g. `filter(Parent.some_collection_to_attribute.any(Child.attr
    == 'foo'))`
  id: totrans-561
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关联代理中的一个 bug，在关系-标量非对象属性比较上执行 `any()`/`has()` 操作会失败，例如 `filter(Parent.some_collection_to_attribute.any(Child.attr
    == 'foo'))`。
- en: 'References: [#3397](https://www.sqlalchemy.org/trac/ticket/3397)'
  id: totrans-562
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3397](https://www.sqlalchemy.org/trac/ticket/3397)
- en: 1.0.2
  id: totrans-563
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.0.2
- en: 'Released: April 24, 2015'
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2015年4月24日
- en: orm declarative
  id: totrans-565
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm 声明性
- en: '**[orm] [declarative] [bug]**'
  id: totrans-566
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Fixed unexpected use regression regarding the declarative `__declare_first__`
    and `__declare_last__` accessors where these would no longer be called on the
    superclass of the declarative base.
  id: totrans-567
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了声明性 `__declare_first__` 和 `__declare_last__` 访问器的意外使用回归，这些访问器将不再在声明基类的超类上调用。
- en: 'References: [#3383](https://www.sqlalchemy.org/trac/ticket/3383)'
  id: totrans-568
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3383](https://www.sqlalchemy.org/trac/ticket/3383)
- en: sql
  id: totrans-569
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-570
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed a regression that was incorrectly fixed in 1.0.0b4 (hence becoming two
    regressions); reports that SELECT statements would GROUP BY a label name and fail
    was misconstrued that certain backends such as SQL Server should not be emitting
    ORDER BY or GROUP BY on a simple label name at all; when in fact, we had forgotten
    that 0.9 was already emitting ORDER BY on a simple label name for all backends,
    as described in [Label constructs can now render as their name alone in an ORDER
    BY](migration_09.html#migration-1068), even though 1.0 includes a rewrite of this
    logic as part of [#2992](https://www.sqlalchemy.org/trac/ticket/2992). As far
    as emitting GROUP BY against a simple label, even PostgreSQL has cases where it
    will raise an error even though the label to group on should be apparent, so it
    is clear that GROUP BY should never be rendered in this way automatically.
  id: totrans-571
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个在1.0.0b4中错误修复的回归问题（因此成为两个回归问题）；报告称SELECT语句将对标签名称进行GROUP BY并失败，被误解为某些后端（如SQL
    Server）根本不应该在简单标签名称上发出ORDER BY或GROUP BY；事实上，我们忘记了0.9版本已经为所有后端在简单标签名称上发出ORDER BY，如[Label
    constructs can now render as their name alone in an ORDER BY](migration_09.html#migration-1068)中所述，即使1.0版本包括对此逻辑的重写作为[#2992](https://www.sqlalchemy.org/trac/ticket/2992)的一部分。至于对简单标签进行GROUP
    BY，即使PostgreSQL也有情况会引发错误，尽管应该明显可以看出要分组的标签，因此清楚地表明GROUP BY不应该自动以这种方式呈现。
- en: In 1.0.2, SQL Server, Firebird and others will again emit ORDER BY on a simple
    label name when passed a [`Label`](../core/sqlelement.html#sqlalchemy.sql.expression.Label
    "sqlalchemy.sql.expression.Label") construct that is also present in the columns
    clause. Additionally, no backend will emit GROUP BY against the simple label name
    only when passed a [`Label`](../core/sqlelement.html#sqlalchemy.sql.expression.Label
    "sqlalchemy.sql.expression.Label") construct.
  id: totrans-572
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在1.0.2版本中，当传递一个[`Label`](../core/sqlelement.html#sqlalchemy.sql.expression.Label
    "sqlalchemy.sql.expression.Label")构造到SQL Server、Firebird等数据库时，简单标签名称将再次发出ORDER
    BY。此外，当传递一个[`Label`](../core/sqlelement.html#sqlalchemy.sql.expression.Label "sqlalchemy.sql.expression.Label")构造时，任何后端都不会只对简单标签名称发出GROUP
    BY。
- en: 'References: [#3338](https://www.sqlalchemy.org/trac/ticket/3338), [#3385](https://www.sqlalchemy.org/trac/ticket/3385)'
  id: totrans-573
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3338](https://www.sqlalchemy.org/trac/ticket/3338), [#3385](https://www.sqlalchemy.org/trac/ticket/3385)
- en: 1.0.1
  id: totrans-574
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.0.1
- en: 'Released: April 23, 2015'
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2015年4月23日
- en: orm
  id: totrans-576
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-577
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where a query of the form `query(B).filter(B.a != A(id=7))` would
    render the `NEVER_SET` symbol, when given a transient object. For a persistent
    object, it would always use the persisted database value and not the currently
    set value. Assuming autoflush is turned on, this usually would not be apparent
    for persistent values, as any pending changes would be flushed first in any case.
    However, this is inconsistent vs. the logic used for the non-negated comparison,
    `query(B).filter(B.a == A(id=7))`, which does use the current value and additionally
    allows comparisons to transient objects. The comparison now uses the current value
    and not the database-persisted value.
  id: totrans-578
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即形式为`query(B).filter(B.a != A(id=7))`的查询将渲染出`NEVER_SET`符号，当给定一个瞬态对象时。对于持久对象，它将始终使用持久化的数据库值而不是当前设置的值。假设自动刷新已打开，对于持久值，这通常对于持久值不会明显，因为任何待处理的更改都将首先被刷新。然而，这与用于非否定比较的逻辑不一致，`query(B).filter(B.a
    == A(id=7))`，它使用当前值并且还允许与瞬态对象进行比较。比较现在使用当前值而不是数据库持久化的值。
- en: Unlike the other `NEVER_SET` issues that are repaired as regressions caused
    by [#3061](https://www.sqlalchemy.org/trac/ticket/3061) in this release, this
    particular issue is present at least as far back as 0.8 and possibly earlier,
    however it was discovered as a result of repairing the related `NEVER_SET` issues.
  id: totrans-579
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与本次发布中由[#3061](https://www.sqlalchemy.org/trac/ticket/3061)引起的其他`NEVER_SET`问题不同，这个特定问题至少从0.8版本开始存在，可能更早，但是在修复相关的`NEVER_SET`问题时才被发现。
- en: See also
  id: totrans-580
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[A “negated contains or equals” relationship comparison will use the current
    value of attributes, not the database value](migration_10.html#bug-3374)'
  id: totrans-581
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[“包含或等于的否定”关系比较将使用属性的当前值，而不是数据库值](migration_10.html#bug-3374)'
- en: 'References: [#3374](https://www.sqlalchemy.org/trac/ticket/3374)'
  id: totrans-582
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3374](https://www.sqlalchemy.org/trac/ticket/3374)
- en: '**[orm] [bug]**'
  id: totrans-583
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed unexpected use regression cause by [#3061](https://www.sqlalchemy.org/trac/ticket/3061)
    where the NEVER_SET symbol could leak into relationship-oriented queries, including
    `filter()` and `with_parent()` queries. The `None` symbol is returned in all cases,
    however many of these queries have never been correctly supported in any case,
    and produce comparisons to NULL without using the IS operator. For this reason,
    a warning is also added to that subset of relationship queries that don’t currently
    provide for `IS NULL`.
  id: totrans-584
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由[#3061](https://www.sqlalchemy.org/trac/ticket/3061)引起的意外使用回归问题，其中NEVER_SET符号可能会泄漏到关系导向查询中，包括`filter()`和`with_parent()`查询。在所有情况下都返回`None`符号，但��许多这些查询从未得到正确支持，并且在不使用IS运算符的情况下产生与NULL的比较。因此，对于当前不提供`IS
    NULL`的关系查询子集，还添加了警告。
- en: See also
  id: totrans-585
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Warnings emitted when comparing objects with None values to relationships](migration_10.html#bug-3371)'
  id: totrans-586
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[比较具有None值的对象与关系时发出的警告](migration_10.html#bug-3371)'
- en: 'References: [#3371](https://www.sqlalchemy.org/trac/ticket/3371)'
  id: totrans-587
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3371](https://www.sqlalchemy.org/trac/ticket/3371)
- en: '**[orm] [bug]**'
  id: totrans-588
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a regression caused by [#3061](https://www.sqlalchemy.org/trac/ticket/3061)
    where the NEVER_SET symbol could leak into a lazyload query, subsequent to the
    flush of a pending object. This would occur typically for a many-to-one relationship
    that does not use a simple “get” strategy. The good news is that the fix improves
    efficiency vs. 0.9, because we can now skip the SELECT statement entirely when
    we detect NEVER_SET symbols present in the parameters; prior to [#3061](https://www.sqlalchemy.org/trac/ticket/3061),
    we couldn’t discern if the None here were set or not.
  id: totrans-589
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由[#3061](https://www.sqlalchemy.org/trac/ticket/3061)引起的回归问题，其中NEVER_SET符号可能会泄漏到延迟加载查询中，在挂起对象刷新后。这通常会发生在不使用简单“get”策略的多对一关系中。好消息是，这个修复提高了效率，因为我们现在可以在检测到参数中存在NEVER_SET符号时完全跳过SELECT语句；在[#3061](https://www.sqlalchemy.org/trac/ticket/3061)之前，我们无法判断这里的None是否被设置。
- en: 'References: [#3368](https://www.sqlalchemy.org/trac/ticket/3368)'
  id: totrans-590
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3368](https://www.sqlalchemy.org/trac/ticket/3368)
- en: engine
  id: totrans-591
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-592
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Added the string value `"none"` to those accepted by the [`Pool.reset_on_return`](../core/pooling.html#sqlalchemy.pool.Pool.params.reset_on_return
    "sqlalchemy.pool.Pool") parameter as a synonym for `None`, so that string values
    can be used for all settings, allowing utilities like [`engine_from_config()`](../core/engines.html#sqlalchemy.engine_from_config
    "sqlalchemy.engine_from_config") to be usable without issue.
  id: totrans-593
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将字符串值`"none"`添加到[`Pool.reset_on_return`](../core/pooling.html#sqlalchemy.pool.Pool.params.reset_on_return
    "sqlalchemy.pool.Pool")参数中，作为`None`的同义词，以便所有设置都可以使用字符串值，允许像[`engine_from_config()`](../core/engines.html#sqlalchemy.engine_from_config
    "sqlalchemy.engine_from_config")这样的实用程序可以无问题地使用。
- en: 'This change is also **backported** to: 0.9.10'
  id: totrans-594
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.9.10
- en: 'References: [#3375](https://www.sqlalchemy.org/trac/ticket/3375)'
  id: totrans-595
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3375](https://www.sqlalchemy.org/trac/ticket/3375)
- en: sql
  id: totrans-596
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-597
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where a straight SELECT EXISTS query would fail to assign the proper
    result type of Boolean to the result mapping, and instead would leak column types
    from within the query into the result map. This issue exists in 0.9 and earlier
    as well, however has less of an impact in those versions. In 1.0, due to [#918](https://www.sqlalchemy.org/trac/ticket/918)
    this becomes a regression in that we now rely upon the result mapping to be very
    accurate, else we can assign result-type processors to the wrong column. In all
    versions, this issue also has the effect that a simple EXISTS will not apply the
    Boolean type handler, leading to simple 1/0 values for backends without native
    boolean instead of True/False. The fix includes that an EXISTS columns argument
    will be anon-labeled like other column expressions; a similar fix is implemented
    for pure-boolean expressions like `not_(True())`.
  id: totrans-598
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了直接的SELECT EXISTS查询无法将正确的布尔结果类型分配给结果映射的问题，而是会从查询中泄漏列类型到结果映射中。这个问题在0.9版本及之前版本中也存在，但在那些版本中影响较小。在1.0版本中，由于[#918](https://www.sqlalchemy.org/trac/ticket/918)，这成为一个回归问题，因为我们现在依赖于结果映射非常准确，否则我们可能会将结果类型处理器分配给错误的列。在所有版本中，这个问题还会导致简单的EXISTS不适用布尔类型处理程序，导致后端没有原生布尔值而是简单的1/0值而不是True/False。修复包括EXISTS列参数将像其他列表达式一样匿名标记；类似的修复也针对纯布尔表达式如`not_(True())`实现。
- en: 'References: [#3372](https://www.sqlalchemy.org/trac/ticket/3372)'
  id: totrans-599
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3372](https://www.sqlalchemy.org/trac/ticket/3372)
- en: sqlite
  id: totrans-600
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-601
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Fixed a regression due to [#3282](https://www.sqlalchemy.org/trac/ticket/3282),
    where due to the fact that we attempt to assume the availability of ALTER when
    creating/dropping schemas, in the case of SQLite we simply said to not worry about
    foreign keys at all, since ALTER is not available, when creating and dropping
    tables. This meant that the sorting of tables was basically skipped in the case
    of SQLite, and for the vast majority of SQLite use cases, this is not an issue.
  id: totrans-602
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于 [#3282](https://www.sqlalchemy.org/trac/ticket/3282) 导致的一个回归，由于我们在创建/删除模式时尝试假设
    ALTER 可用，因此在 SQLite 的情况下，我们简单地说根本不用担心外键，因为在创建和删除表时 ALTER 不可用。这意味着在 SQLite 的情况下基本上跳过了表的排序，对于绝大多数
    SQLite 使用情况，这并不是问题。
- en: However, users who were doing DROPs on SQLite with tables that contained data
    and with referential integrity turned on would then experience errors, as the
    dependency sorting *does* matter in the case of DROP with enforced constraints,
    when those tables have data (SQLite will still happily let you create foreign
    keys to nonexistent tables and drop tables referring to existing ones with constraints
    enabled, as long as there’s no data being referenced).
  id: totrans-603
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然而，对于在 SQLite 上执行包含数据的表的 DROP 操作并且启用了引用完整性的用户，他们会遇到错误，因为在具有数据的表的 DROP 操作中，依赖排序确实很重要（SQLite
    仍然可以让您创建对不存在表的外键并删除引用存在表的表，只要没有引用数据）。
- en: In order to maintain the new feature of [#3282](https://www.sqlalchemy.org/trac/ticket/3282)
    while still allowing a SQLite DROP operation to maintain ordering, we now do the
    sort with full FKs taken under consideration, and if we encounter an unresolvable
    cycle, only *then* do we forego attempting to sort the tables; we instead emit
    a warning and go with the unsorted list. If an environment needs both ordered
    DROPs *and* has foreign key cycles, then the warning notes they will need to restore
    the `use_alter` flag to their [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") and [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") objects so that just those objects will
    be omitted from the dependency sort.
  id: totrans-604
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了在仍允许 SQLite DROP 操作保持排序的同时保持 [#3282](https://www.sqlalchemy.org/trac/ticket/3282)
    的新功能，我们现在考虑完整的外键进行排序，如果遇到无法解决的循环，*那么*我们放弃尝试对表进行排序；我们会发出警告并使用未排序的列表。如果一个环境需要有序的
    DROP 操作 *并且* 存在外键循环，那么警告指出他们需要将 `use_alter` 标志恢复到他们的 [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") 和 [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") 对象中，以便仅跳过这些对象的依赖排序。
- en: See also
  id: totrans-605
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[The use_alter flag on ForeignKeyConstraint is (usually) no longer needed](migration_10.html#feature-3282)
    - contains an updated note about SQLite.'
  id: totrans-606
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[ForeignKeyConstraint 上的 use_alter 标志（通常）不再需要](migration_10.html#feature-3282)
    - 包含有关 SQLite 的更新说明。'
- en: 'References: [#3378](https://www.sqlalchemy.org/trac/ticket/3378)'
  id: totrans-607
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3378](https://www.sqlalchemy.org/trac/ticket/3378)
- en: misc
  id: totrans-608
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[bug] [firebird]**'
  id: totrans-609
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [firebird]**'
- en: Fixed a regression due to [#3034](https://www.sqlalchemy.org/trac/ticket/3034)
    where limit/offset clauses were not properly interpreted by the Firebird dialect.
    Pull request courtesy effem-git.
  id: totrans-610
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于 [#3034](https://www.sqlalchemy.org/trac/ticket/3034) 导致的一个回归，Firebird 方言未能正确解释
    limit/offset 子句。感谢 effem-git 提交的拉取请求。
- en: 'References: [#3380](https://www.sqlalchemy.org/trac/ticket/3380)'
  id: totrans-611
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3380](https://www.sqlalchemy.org/trac/ticket/3380)
- en: '**[bug] [firebird]**'
  id: totrans-612
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [firebird]**'
- en: Fixed support for “literal_binds” mode when using limit/offset with Firebird,
    so that the values are again rendered inline when this is selected. Related to
    [#3034](https://www.sqlalchemy.org/trac/ticket/3034).
  id: totrans-613
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用 Firebird 时“literal_binds”模式与 limit/offset 结合时的支持，因此当选择此模式时，值再次以内联方式呈现。与
    [#3034](https://www.sqlalchemy.org/trac/ticket/3034) 相关。
- en: 'References: [#3381](https://www.sqlalchemy.org/trac/ticket/3381)'
  id: totrans-614
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3381](https://www.sqlalchemy.org/trac/ticket/3381)
- en: 1.0.0
  id: totrans-615
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.0.0
- en: 'Released: April 16, 2015'
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2015年4月16日
- en: orm
  id: totrans-617
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-618
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new argument [`Query.update.update_args`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update.params.update_args
    "sqlalchemy.orm.Query.update") which allows kw arguments such as `mysql_limit`
    to be passed to the underlying [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") construct. Pull request courtesy Amir Sadoughi.
  id: totrans-619
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新参数[`Query.update.update_args`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update.params.update_args
    "sqlalchemy.orm.Query.update")，允许传递诸如`mysql_limit`之类的关键字参数到底层的[`Update`](../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update")构造。感谢 Amir Sadoughi 的拉取请求。
- en: '**[orm] [bug]**'
  id: totrans-620
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Identified an inconsistency when handling [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") to the same target more than once; it implicitly
    dedupes only in the case of a relationship join, and due to [#3233](https://www.sqlalchemy.org/trac/ticket/3233),
    in 1.0 a join to the same table twice behaves differently than 0.9 in that it
    no longer erroneously aliases. To help document this change, the verbiage regarding
    [#3233](https://www.sqlalchemy.org/trac/ticket/3233) in the migration notes has
    been generalized, and a warning has been added when [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") is called against the same target relationship more
    than once.
  id: totrans-621
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在处理多次对同一目标进行[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")时发现了一个不一致性；它只在关系连接的情况下隐式去重，由于[#3233](https://www.sqlalchemy.org/trac/ticket/3233)，在1.0中对同一表进行两次连接的行为与0.9不同，不再错误地别名。为了帮助记录这一变化，迁移说明中关于[#3233](https://www.sqlalchemy.org/trac/ticket/3233)的措辞已经泛化，并在多次调用[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")时添加了警告，针对相同目标关系连接。
- en: 'References: [#3367](https://www.sqlalchemy.org/trac/ticket/3367)'
  id: totrans-622
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3367](https://www.sqlalchemy.org/trac/ticket/3367)
- en: '**[orm] [bug]**'
  id: totrans-623
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Made a small improvement to the heuristics of relationship when determining
    remote side with semi-self-referential (e.g. two joined inh subclasses referring
    to each other), non-simple join conditions such that the parententity is taken
    into account and can reduce the need for using the `remote()` annotation; this
    can restore some cases that might have worked without the annotation prior to
    0.9.4 via [#2948](https://www.sqlalchemy.org/trac/ticket/2948).
  id: totrans-624
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在确定半自引用关系的远程端时，对关系的启发式进行了小的改进（例如，两个连接的继承子类相互引用），非简单的连接条件将考虑到父实体，并且可以减少使用`remote()`注释的需要；这可以恢复一些在0.9.4之前可能在没有注释的情况下工作的情况，通过[#2948](https://www.sqlalchemy.org/trac/ticket/2948)。
- en: 'References: [#3364](https://www.sqlalchemy.org/trac/ticket/3364)'
  id: totrans-625
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3364](https://www.sqlalchemy.org/trac/ticket/3364)
- en: sql
  id: totrans-626
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-627
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: The topological sorting used to sort [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects and available via the [`MetaData.sorted_tables`](../core/metadata.html#sqlalchemy.schema.MetaData.sorted_tables
    "sqlalchemy.schema.MetaData.sorted_tables") collection will now produce a **deterministic**
    ordering; that is, the same ordering each time given a set of tables with particular
    names and dependencies. This is to help with comparison of DDL scripts and other
    use cases. The tables are sent to the topological sort sorted by name, and the
    topological sort itself will process the incoming data in an ordered fashion.
    Pull request courtesy Sebastian Bank.
  id: totrans-628
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于对[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象进行排序的拓扑排序，并通过[`MetaData.sorted_tables`](../core/metadata.html#sqlalchemy.schema.MetaData.sorted_tables
    "sqlalchemy.schema.MetaData.sorted_tables")集合提供，现在将产生一个**确定性**的排序；也就是说，给定一组具有特定名称和依赖关系的表，每次都会产生相同的排序。这有助于比较DDL脚本和其他用例。表按名称排序发送到拓扑排序，拓扑排序本身将以有序的方式处理传入的数据。感谢
    Sebastian Bank 的拉取请求。
- en: See also
  id: totrans-629
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[MetaData.sorted_tables accessor is “deterministic”](migration_10.html#feature-3084)'
  id: totrans-630
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[MetaData.sorted_tables accessor is “deterministic”](migration_10.html#feature-3084)'
- en: 'References: [#3084](https://www.sqlalchemy.org/trac/ticket/3084)'
  id: totrans-631
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3084](https://www.sqlalchemy.org/trac/ticket/3084)
- en: '**[sql] [bug]**'
  id: totrans-632
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where a [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object that used a naming convention would not properly
    work with pickle. The attribute was skipped leading to inconsistencies and failures
    if the unpickled [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object were used to base additional tables from.
  id: totrans-633
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即使用命名约定的 [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") 对象不会正确地与 pickle 一起工作。该属性被跳过，导致如果使用了 unpickled 的
    [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    对象来基于其他表，就会出现不一致和失败。
- en: 'This change is also **backported** to: 0.9.10'
  id: totrans-634
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**到：0.9.10
- en: 'References: [#3362](https://www.sqlalchemy.org/trac/ticket/3362)'
  id: totrans-635
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3362](https://www.sqlalchemy.org/trac/ticket/3362)
- en: postgresql
  id: totrans-636
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-637
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed a long-standing bug where the [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") type as used with the psycopg2 dialect in conjunction
    with non-ascii values and `native_enum=False` would fail to decode return results
    properly. This stemmed from when the PG [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM") type used to be a standalone type without
    a “non native” option.
  id: totrans-638
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个长期存在的 bug，即在使用 psycopg2 方言与非 ASCII 值和 `native_enum=False` 结合使用时，[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") 类型无法正确解码返回结果。这源自于 PG [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM") 类型过去是一个独立的类型，没有“非本机”选项。
- en: 'This change is also **backported** to: 0.9.10'
  id: totrans-639
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**到：0.9.10
- en: 'References: [#3354](https://www.sqlalchemy.org/trac/ticket/3354)'
  id: totrans-640
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3354](https://www.sqlalchemy.org/trac/ticket/3354)
- en: mssql
  id: totrans-641
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-642
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed a regression where the “last inserted id” mechanics would fail to store
    the correct value for MSSQL on an INSERT where the primary key value was present
    in the insert params before execution, as well as in the case where an INSERT
    from SELECT would state the target columns as column objects, instead of string
    keys.
  id: totrans-643
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个回归，即“最后插入的 id”机制在 MSSQL 上的 INSERT 中失败，其中主键值在执行之前出现在插入参数中，以及在来自 SELECT 的
    INSERT 中，会将目标列声明为列对象，而不是字符串键的情况下，将无法存储正确的值。
- en: 'References: [#3360](https://www.sqlalchemy.org/trac/ticket/3360)'
  id: totrans-644
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3360](https://www.sqlalchemy.org/trac/ticket/3360)
- en: '**[mssql] [bug]**'
  id: totrans-645
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Using the `Binary` constructor now present in pymssql rather than patching one
    in. Pull request courtesy Ramiro Morales.
  id: totrans-646
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在使用 pymssql 中现有的 `Binary` 构造函数，而不是进行补丁。感谢 Ramiro Morales 提供的拉取请求。
- en: tests
  id: totrans-647
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: tests
- en: '**[tests] [bug]**'
  id: totrans-648
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[tests] [bug]**'
- en: Fixed the pathing used when tests run; for sqla_nose.py and py.test, the “./lib”
    prefix is again inserted at the head of sys.path but only if sys.flags.no_user_site
    isn’t set; this makes it act just like the way Python puts “.” in the current
    path by default. For tox, we are setting the PYTHONNOUSERSITE flag now.
  id: totrans-649
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了测试运行时使用的路径；对于 sqla_nose.py 和 py.test，再次在 sys.path 的开头插入“./lib”前缀，但仅当 sys.flags.no_user_site
    没有设置时；这使其的行为就像 Python 默认将“.”放在当前路径中一样。对于 tox，我们现在设置了 PYTHONNOUSERSITE 标志。
- en: 'References: [#3356](https://www.sqlalchemy.org/trac/ticket/3356)'
  id: totrans-650
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3356](https://www.sqlalchemy.org/trac/ticket/3356)
- en: 1.0.0b5
  id: totrans-651
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.0.0b5
- en: 'Released: April 3, 2015'
  id: totrans-652
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2015 年 4 月 3 日
- en: orm
  id: totrans-653
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-654
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where the state tracking within multiple, nested [`Session.begin_nested()`](../orm/session_api.html#sqlalchemy.orm.Session.begin_nested
    "sqlalchemy.orm.Session.begin_nested") operations would fail to propagate the
    “dirty” flag for an object that had been updated within the inner savepoint, such
    that if the enclosing savepoint were rolled back, the object would not be part
    of the state that was expired and therefore reverted to its database state.
  id: totrans-655
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，在多个嵌套 [`Session.begin_nested()`](../orm/session_api.html#sqlalchemy.orm.Session.begin_nested
    "sqlalchemy.orm.Session.begin_nested") 操作内的状态跟踪会失败，如果在内部保存点内更新了对象，则该对象的“dirty”标志不会传播，因此如果回滚外部保存点，则对象将不会成为已过期状态的一部分，因此将恢复为其数据库状态。
- en: 'This change is also **backported** to: 0.9.10'
  id: totrans-656
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**到：0.9.10
- en: 'References: [#3352](https://www.sqlalchemy.org/trac/ticket/3352)'
  id: totrans-657
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3352](https://www.sqlalchemy.org/trac/ticket/3352)
- en: '**[orm] [bug]**'
  id: totrans-658
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: '[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    doesn’t support joins, subselects, or special FROM clauses when using the [`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update") or [`Query.delete()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.delete
    "sqlalchemy.orm.Query.delete") methods; instead of silently ignoring these fields
    if methods like [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") or [`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from") has been called, an error is raised. In 0.9.10
    this only emits a warning.'
  id: totrans-659
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用 [`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update") 或 [`Query.delete()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.delete
    "sqlalchemy.orm.Query.delete") 方法时，[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 不支持连接、子选择或特殊的 FROM 子句；如果已经调用了类似 [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") 或 [`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from") 的方法，则不会默默地忽略这些字段，而是会引发错误。在 0.9.10 中，这只会发出警告。
- en: 'References: [#3349](https://www.sqlalchemy.org/trac/ticket/3349)'
  id: totrans-660
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3349](https://www.sqlalchemy.org/trac/ticket/3349)
- en: '**[orm] [bug]**'
  id: totrans-661
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: 'Added a list() call around a weak dictionary used within the commit phase of
    the session, which without it could cause a “dictionary changed size during iter”
    error if garbage collection interacted within the process. Change was introduced
    by #3139.'
  id: totrans-662
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '在会话的提交阶段，添加了对使用弱字典的 list() 调用，如果没有它，如果垃圾收集与进程交互，可能会导致“迭代过程中字典大小发生变化”的错误。此更改由
    #3139 引入。'
- en: '**[orm] [bug]**'
  id: totrans-663
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a bug related to “nested” inner join eager loading, which exists in 0.9
    as well but is more of a regression in 1.0 due to [#3008](https://www.sqlalchemy.org/trac/ticket/3008)
    which turns on “nested” by default, such that a joined eager load that travels
    across sibling paths from a common ancestor using innerjoin=True will correctly
    splice each “innerjoin” sibling into the appropriate part of the join, when a
    series of inner/outer joins are mixed together.
  id: totrans-664
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了与“嵌套”内连接贪婪加载相关的错误，该错误在 0.9 中也存在，但由于 [#3008](https://www.sqlalchemy.org/trac/ticket/3008)
    的原因，在 1.0 中更像是退化，默认情况下“嵌套”被启用，这样一个跨越共同祖先的兄弟路径的连接贪婪加载使用 innerjoin=True 将正确地将每个“innerjoin”兄弟插入连接的适当部分，当一系列内部/外部连接混合在一起时。
- en: 'References: [#3347](https://www.sqlalchemy.org/trac/ticket/3347)'
  id: totrans-665
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3347](https://www.sqlalchemy.org/trac/ticket/3347)
- en: sql
  id: totrans-666
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-667
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The warning emitted by the unicode type for a non-unicode type has been liberalized
    to warn for values that aren’t even string values, such as integers; previously,
    the updated warning system of 1.0 made use of string formatting operations which
    would raise an internal TypeError. While these cases should ideally raise totally,
    some backends like SQLite and MySQL do accept them and are potentially in use
    by legacy code, not to mention that they will always pass through if unicode conversion
    is turned off for the target backend.
  id: totrans-668
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于非 Unicode 类型的 unicode 类型发出的警告已经放宽，警告适用于甚至不是字符串值的值，比如整数；之前，1.0 的更新警告系统使用字符串格式化操作，这将引发内部
    TypeError。虽然理想情况下，这些情况应该完全引发错误，但某些后端如 SQLite 和 MySQL 确实接受它们，并且可能被遗留代码使用，更不用说如果目标后端的
    unicode 转换关闭，它们将始终通过。
- en: 'References: [#3346](https://www.sqlalchemy.org/trac/ticket/3346)'
  id: totrans-669
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3346](https://www.sqlalchemy.org/trac/ticket/3346)
- en: postgresql
  id: totrans-670
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-671
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug where updated PG index reflection as a result of [#3184](https://www.sqlalchemy.org/trac/ticket/3184)
    would cause index operations to fail on PostgreSQL versions 8.4 and earlier. The
    enhancements are now disabled when using an older version of PostgreSQL.
  id: totrans-672
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了更新 PG 索引反射的 bug，这是 [#3184](https://www.sqlalchemy.org/trac/ticket/3184) 的结果，在
    PostgreSQL 版本 8.4 及更早版本上将导致索引操作失败。在使用旧版本的 PostgreSQL 时，这些增强功能现已禁用。
- en: 'References: [#3343](https://www.sqlalchemy.org/trac/ticket/3343)'
  id: totrans-673
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3343](https://www.sqlalchemy.org/trac/ticket/3343)
- en: 1.0.0b4
  id: totrans-674
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.0.0b4
- en: 'Released: March 29, 2015'
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
  zh: 'Released: March 29, 2015'
- en: sql
  id: totrans-676
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-677
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in new “label resolution” feature of [#2992](https://www.sqlalchemy.org/trac/ticket/2992)
    where a label that was anonymous, then labeled again with a name, would fail to
    be locatable via a textual label. This situation occurs naturally when a mapped
    [`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property "sqlalchemy.orm.column_property")
    is given an explicit label in a query.
  id: totrans-678
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新“标签解析”功能中的错误[#2992](https://www.sqlalchemy.org/trac/ticket/2992)，其中一个匿名标签，然后再次用名称标记，将无法通过文本标签定位。
    当在查询中为映射的[`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property")给定一个显式标签时，会自然发生这种情况。
- en: 'References: [#3340](https://www.sqlalchemy.org/trac/ticket/3340)'
  id: totrans-679
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3340](https://www.sqlalchemy.org/trac/ticket/3340)
- en: '**[sql] [bug]**'
  id: totrans-680
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in new “label resolution” feature of [#2992](https://www.sqlalchemy.org/trac/ticket/2992)
    where the string label placed in the order_by() or group_by() of a statement would
    place higher priority on the name as found inside the FROM clause instead of a
    more locally available name inside the columns clause.
  id: totrans-681
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新“标签解析”功能中的错误[#2992](https://www.sqlalchemy.org/trac/ticket/2992)，其中在语句的order_by()或group_by()中放置的字符串标签会更优先地放在FROM子句内找到的名称上，而不是更本地可用的列子句内的名称。
- en: 'References: [#3335](https://www.sqlalchemy.org/trac/ticket/3335)'
  id: totrans-682
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3335](https://www.sqlalchemy.org/trac/ticket/3335)
- en: schema
  id: totrans-683
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: '**[schema] [feature]**'
  id: totrans-684
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema] [feature]**'
- en: The “auto-attach” feature of constraints such as [`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") and [`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") has been further enhanced such that when
    the constraint is associated with non-table-bound [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects, the constraint will set up event listeners
    with the columns themselves such that the constraint auto attaches at the same
    time the columns are associated with the table. This in particular helps in some
    edge cases in declarative but is also of general use.
  id: totrans-685
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 诸如[`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint")和[`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint")等约束的“自动附加”功能已进一步增强，以便当约束与非绑定到表的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象相关联时，约束将与列本身设置事件侦听器，以便约束在与表关联的同时自动附加列。 这特别有助于一些声明性的边缘情况，但也是一般用途���
- en: See also
  id: totrans-686
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Constraints referring to unattached Columns can auto-attach to the Table when
    their referred columns are attached](migration_10.html#change-3341)'
  id: totrans-687
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[引用未附加列的约束可以在其引用的列附加时自动附加到表](migration_10.html#change-3341)'
- en: 'References: [#3341](https://www.sqlalchemy.org/trac/ticket/3341)'
  id: totrans-688
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3341](https://www.sqlalchemy.org/trac/ticket/3341)
- en: mysql
  id: totrans-689
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug] [pymysql]**'
  id: totrans-690
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug] [pymysql]**'
- en: Fixed unicode support for PyMySQL when using an “executemany” operation with
    unicode parameters. SQLAlchemy now passes both the statement as well as the bound
    parameters as unicode objects, as PyMySQL generally uses string interpolation
    internally to produce the final statement, and in the case of executemany does
    the “encode” step only on the final statement.
  id: totrans-691
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了PyMySQL在使用“executemany”操作时对Unicode的支持。 SQLAlchemy现在将语句和绑定参数都作为Unicode对象传递，因为PyMySQL通常在内部使用字符串插值来生成最终语句，并且在executemany的情况下仅在最终语句上执行“encode”步骤。
- en: 'This change is also **backported** to: 0.9.10'
  id: totrans-692
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.10
- en: 'References: [#3337](https://www.sqlalchemy.org/trac/ticket/3337)'
  id: totrans-693
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3337](https://www.sqlalchemy.org/trac/ticket/3337)
- en: mssql
  id: totrans-694
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug] [firebird] [oracle] [sybase]**'
  id: totrans-695
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug] [firebird] [oracle] [sybase]**'
- en: Turned off the “simple order by” flag on the MSSQL, Oracle dialects; this is
    the flag that per [#2992](https://www.sqlalchemy.org/trac/ticket/2992) causes
    an order by or group by an expression that’s also in the columns clause to be
    copied by label, even if referenced as the expression object. The behavior for
    MSSQL is now the old behavior that copies the whole expression in by default,
    as MSSQL can be picky on these particularly in GROUP BY expressions. The flag
    is also turned off defensively for the Firebird and Sybase dialects.
  id: totrans-696
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关闭了MSSQL、Oracle方言上的“简单排序”标志；这是根据[#2992](https://www.sqlalchemy.org/trac/ticket/2992)的要求，导致order
    by或group by表达式也在列子句中时被复制为标签，即使作为表达式对象引用。 MSSQL现在的行为是默认情况下复制整个表达式，因为MSSQL在这些特别是在GROUP
    BY表达式中可能会挑剔。 为Firebird和Sybase方言也防御性地关闭了该标志。
- en: Note
  id: totrans-697
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: this resolution was incorrect, please see version 1.0.2 for a rework of this
    resolution.
  id: totrans-698
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此解决方案是错误的，请查看版本1.0.2以重新制定此解决方案。
- en: 'References: [#3338](https://www.sqlalchemy.org/trac/ticket/3338)'
  id: totrans-699
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3338](https://www.sqlalchemy.org/trac/ticket/3338)
- en: 1.0.0b3
  id: totrans-700
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.0.0b3
- en: 'Released: March 20, 2015'
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2015年3月20日
- en: mysql
  id: totrans-702
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-703
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [错误]**'
- en: 'Repaired the commit for issue #2771 which was inadvertently commented out.'
  id: totrans-704
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了无意中注释掉的问题＃2771的提交。
- en: 'References: [#2771](https://www.sqlalchemy.org/trac/ticket/2771)'
  id: totrans-705
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2771](https://www.sqlalchemy.org/trac/ticket/2771)
- en: 1.0.0b2
  id: totrans-706
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.0.0b2
- en: 'Released: March 20, 2015'
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2015年3月20日
- en: orm
  id: totrans-708
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM
- en: '**[orm] [bug]**'
  id: totrans-709
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [错误]**'
- en: Fixed unexpected use regression from pullreq github:137 where Py2K unicode literals
    (e.g. `u""`) would not be accepted by the [`relationship.cascade`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.cascade
    "sqlalchemy.orm.relationship") option. Pull request courtesy Julien Castets.
  id: totrans-710
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了从pullreq github:137中的意外使用回归，其中Py2K unicode文字（例如`u""`）将不被[`relationship.cascade`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.cascade
    "sqlalchemy.orm.relationship")选项接受。拉取请求由Julien Castets提供。
- en: 'References: [#3327](https://www.sqlalchemy.org/trac/ticket/3327)'
  id: totrans-711
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3327](https://www.sqlalchemy.org/trac/ticket/3327)
- en: orm declarative
  id: totrans-712
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM声明
- en: '**[orm] [declarative] [change]**'
  id: totrans-713
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [声明] [更改]**'
- en: 'Loosened some restrictions that were added to `@declared_attr` objects, such
    that they were prevented from being called outside of the declarative process;
    this is related to the enhancements of #3150 which allow `@declared_attr` to return
    a value that is cached based on the current class as it’s being configured. The
    exception raise has been removed, and the behavior changed so that outside of
    the declarative process, the function decorated by `@declared_attr` is called
    every time just like a regular `@property`, without using any caching, as none
    is available at this stage.'
  id: totrans-714
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 放宽了对`@declared_attr`对象添加的一些限制，以防止它们在声明过程之外被调用；这与#3150的增强相关，允许`@declared_attr`返回一个根据当前类缓存的值，因为它正在被配置。已删除异常引发，并更改了行为，以便在声明过程之外，由`@declared_attr`装饰的函数每次都像常规`@property`一样被调用，而不使用任何缓存，因为在此阶段没有可用的缓存。
- en: 'References: [#3331](https://www.sqlalchemy.org/trac/ticket/3331)'
  id: totrans-715
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3331](https://www.sqlalchemy.org/trac/ticket/3331)
- en: engine
  id: totrans-716
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [bug]**'
  id: totrans-717
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误]**'
- en: The “auto close” for `ResultProxy` is now a “soft” close. That is, after exhausting
    all rows using the fetch methods, the DBAPI cursor is released as before and the
    object may be safely discarded, but the fetch methods may continue to be called
    for which they will return an end-of-result object (None for fetchone, empty list
    for fetchmany and fetchall). Only if `ResultProxy.close()` is called explicitly
    will these methods raise the “result is closed” error.
  id: totrans-718
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “自动关闭”`ResultProxy`现在是“软”关闭。也就是说，在使用提取方法耗尽所有行后，DBAPI游标会像以前一样被释放，对象可以安全丢弃，但是提取方法仍然可以继续调用，它们将返回结果结束对象（对于fetchone为None，对于fetchmany和fetchall为空列表）。只有显式调用`ResultProxy.close()`时，这些方法才会引发“结果已关闭”错误。
- en: See also
  id: totrans-719
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[ResultProxy “auto close” is now a “soft” close](migration_10.html#change-3330)'
  id: totrans-720
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[ResultProxy“自动关闭”现在是“软”关闭](migration_10.html#change-3330)'
- en: 'References: [#3329](https://www.sqlalchemy.org/trac/ticket/3329), [#3330](https://www.sqlalchemy.org/trac/ticket/3330)'
  id: totrans-721
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3329](https://www.sqlalchemy.org/trac/ticket/3329), [#3330](https://www.sqlalchemy.org/trac/ticket/3330)
- en: mysql
  id: totrans-722
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug] [py3k]**'
  id: totrans-723
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [错误] [py3k]**'
- en: Fixed the [`BIT`](../dialects/mysql.html#sqlalchemy.dialects.mysql.BIT "sqlalchemy.dialects.mysql.BIT")
    type on Py3K which was not using the `ord()` function correctly. Pull request
    courtesy David Marin.
  id: totrans-724
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Py3K上未正确使用`ord()`函数的[`BIT`](../dialects/mysql.html#sqlalchemy.dialects.mysql.BIT
    "sqlalchemy.dialects.mysql.BIT")类型。拉取请求由David Marin提供。
- en: 'This change is also **backported** to: 0.9.10'
  id: totrans-725
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.10
- en: 'References: [#3333](https://www.sqlalchemy.org/trac/ticket/3333)'
  id: totrans-726
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3333](https://www.sqlalchemy.org/trac/ticket/3333)
- en: '**[mysql] [bug]**'
  id: totrans-727
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [错误]**'
- en: Fixes to fully support using the `'utf8mb4'` MySQL-specific charset with MySQL
    dialects, in particular MySQL-Python and PyMySQL. In addition, MySQL databases
    that report more unusual charsets such as ‘koi8u’ or ‘eucjpms’ will also work
    correctly. Pull request courtesy Thomas Grainger.
  id: totrans-728
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了完全支持使用MySQL方言的`'utf8mb4'` MySQL特定字符集的问题，特别是MySQL-Python和PyMySQL。此外，报告更不寻常字符集（如‘koi8u’或‘eucjpms’）的MySQL数据库也将正常工作。拉取请求由Thomas
    Grainger提供。
- en: 'References: [#2771](https://www.sqlalchemy.org/trac/ticket/2771)'
  id: totrans-729
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2771](https://www.sqlalchemy.org/trac/ticket/2771)
- en: 1.0.0b1
  id: totrans-730
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.0.0b1
- en: 'Released: March 13, 2015'
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2015年3月13日
- en: Version 1.0.0b1 is the first release of the 1.0 series. Many changes described
    here are also present in the 0.9 and sometimes the 0.8 series as well. For changes
    that are specific to 1.0 with an emphasis on compatibility concerns, see [What’s
    New in SQLAlchemy 1.0?](migration_10.html).
  id: totrans-732
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.0.0b1是1.0系列的第一个版本。这里描述的许多变化也存在于0.9甚至0.8系列中。有关特定于1.0且着重于兼容性问题的更改，请参阅[SQLAlchemy
    1.0的新功能是什么？](migration_10.html)。
- en: general
  id: totrans-733
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 常规
- en: '**[general] [feature]**'
  id: totrans-734
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[常规] [功能]**'
- en: Structural memory use has been improved via much more significant use of `__slots__`
    for many internal objects. This optimization is particularly geared towards the
    base memory size of large applications that have lots of tables and columns, and
    greatly reduces memory size for a variety of high-volume objects including event
    listening internals, comparator objects and parts of the ORM attribute and loader
    strategy system.
  id: totrans-735
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过对许多内部对象更加显著地使用`__slots__`，改善了结构性内存使用。这种优化特别针对具有大量表和列的大型应用程序的基本内存大小，并且大大减少了许多高容量对象的内存大小，包括事件监听内部、比较器对象以及ORM属性和加载器策略系统的部分。
- en: See also
  id: totrans-736
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Significant Improvements in Structural Memory Use](migration_10.html#feature-slots)'
  id: totrans-737
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[结构性内存使用显著改进](migration_10.html#feature-slots)'
- en: '**[general] [bug]**'
  id: totrans-738
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[常规] [错误]**'
- en: The `__module__` attribute is now set for all those SQL and ORM functions that
    are derived as “public factory” symbols, which should assist with documentation
    tools being able to report on the target module.
  id: totrans-739
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于所有派生为“公共工厂”符号的SQL和ORM函数，现在都设置了`__module__`属性，这应有助于文档工具能够报告目标模块。
- en: 'References: [#3218](https://www.sqlalchemy.org/trac/ticket/3218)'
  id: totrans-740
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3218](https://www.sqlalchemy.org/trac/ticket/3218)
- en: orm
  id: totrans-741
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM
- en: '**[orm] [feature]**'
  id: totrans-742
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [功能]**'
- en: Added a new entry `"entity"` to the dictionaries returned by [`Query.column_descriptions`](../orm/queryguide/query.html#sqlalchemy.orm.Query.column_descriptions
    "sqlalchemy.orm.Query.column_descriptions"). This refers to the primary ORM mapped
    class or aliased class that is referred to by the expression. Compared to the
    existing entry for `"type"`, it will always be a mapped entity, even if extracted
    from a column expression, or None if the given expression is a pure core expression.
    See also [#3403](https://www.sqlalchemy.org/trac/ticket/3403) which repaired a
    regression in this feature which was unreleased in 0.9.10 but was released in
    the 1.0 version.
  id: totrans-743
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向由[`Query.column_descriptions`](../orm/queryguide/query.html#sqlalchemy.orm.Query.column_descriptions
    "sqlalchemy.orm.Query.column_descriptions")返回的字典添加了一个新条目`"entity"`。这指的是由表达式引用的主ORM映射类或别名类。与现有条目`"type"`相比，它始终是一个映射实体，即使从列表达式中提取，或者如果给定表达式是纯核心表达式，则为None。另请参见[#3403](https://www.sqlalchemy.org/trac/ticket/3403)，修复了此功能中的一个回归，该回归未在0.9.10中发布，但在1.0版本中发布了。
- en: 'This change is also **backported** to: 0.9.10'
  id: totrans-744
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还**回溯**到：0.9.10
- en: 'References: [#3320](https://www.sqlalchemy.org/trac/ticket/3320)'
  id: totrans-745
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3320](https://www.sqlalchemy.org/trac/ticket/3320)
- en: '**[orm] [feature]**'
  id: totrans-746
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [功能]**'
- en: Added new parameter [`Session.connection.execution_options`](../orm/session_api.html#sqlalchemy.orm.Session.connection.params.execution_options
    "sqlalchemy.orm.Session.connection") which may be used to set up execution options
    on a [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    when it is first checked out, before the transaction has begun. This is used to
    set up options such as isolation level on the connection before the transaction
    starts.
  id: totrans-747
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新增了新参数[`Session.connection.execution_options`](../orm/session_api.html#sqlalchemy.orm.Session.connection.params.execution_options
    "sqlalchemy.orm.Session.connection")，可用于在事务开始之前首次检查连接时设置[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")上的执行选项。这用于在事务开始之前设置连接的选项，如隔离级别等。
- en: See also
  id: totrans-748
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Setting Transaction Isolation Levels / DBAPI AUTOCOMMIT](../orm/session_transaction.html#session-transaction-isolation)
    - new documentation section detailing best practices for setting transaction isolation
    with sessions.'
  id: totrans-749
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[设置事务隔离级别/DBAPI AUTOCOMMIT](../orm/session_transaction.html#session-transaction-isolation)
    - 新的文档部分，详细说明使用会话设置事务隔离的最佳实践。'
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-750
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还**回溯**到：0.9.9
- en: 'References: [#3296](https://www.sqlalchemy.org/trac/ticket/3296)'
  id: totrans-751
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3296](https://www.sqlalchemy.org/trac/ticket/3296)
- en: '**[orm] [feature]**'
  id: totrans-752
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [功能]**'
- en: Added new method [`Session.invalidate()`](../orm/session_api.html#sqlalchemy.orm.Session.invalidate
    "sqlalchemy.orm.Session.invalidate"), functions similarly to [`Session.close()`](../orm/session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close"), except also calls [`Connection.invalidate()`](../core/connections.html#sqlalchemy.engine.Connection.invalidate
    "sqlalchemy.engine.Connection.invalidate") on all connections, guaranteeing that
    they will not be returned to the connection pool. This is useful in situations
    e.g. dealing with gevent timeouts when it is not safe to use the connection further,
    even for rollbacks.
  id: totrans-753
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的方法[`Session.invalidate()`](../orm/session_api.html#sqlalchemy.orm.Session.invalidate
    "sqlalchemy.orm.Session.invalidate")，功能类似于[`Session.close()`](../orm/session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close")，除了还调用所有连接的[`Connection.invalidate()`](../core/connections.html#sqlalchemy.engine.Connection.invalidate
    "sqlalchemy.engine.Connection.invalidate")，确保它们不会返回到连接池。在某些情况下很有用，例如处理 gevent
    超时时，进一步使用连接是不安全的，即使是用于回滚。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-754
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.9.9
- en: '**[orm] [feature]**'
  id: totrans-755
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: The “primaryjoin” model has been stretched a bit further to allow a join condition
    that is strictly from a single column to itself, translated through some kind
    of SQL function or expression. This is kind of experimental, but the first proof
    of concept is a “materialized path” join condition where a path string is compared
    to itself using “like”. The [`ColumnOperators.like()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like") operator has also been added
    to the list of valid operators to use in a primaryjoin condition.
  id: totrans-756
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “primaryjoin”模型已经进一步扩展，允许一个严格从单个列到自身的连接条件，通过某种 SQL 函数或表达式进行转换。这有点实验性，但第一个概念验证是一个“材料化路径”连接条件，其中一个路径字符串与自身使用“like”进行比较。[`ColumnOperators.like()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like") 操作符也已添加到可在 primaryjoin 条件中使用的有效操作符列表中。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-757
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.9.5
- en: 'References: [#3029](https://www.sqlalchemy.org/trac/ticket/3029)'
  id: totrans-758
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3029](https://www.sqlalchemy.org/trac/ticket/3029)
- en: '**[orm] [feature]**'
  id: totrans-759
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Added new utility function [`make_transient_to_detached()`](../orm/session_api.html#sqlalchemy.orm.make_transient_to_detached
    "sqlalchemy.orm.make_transient_to_detached") which can be used to manufacture
    objects that behave as though they were loaded from a session, then detached.
    Attributes that aren’t present are marked as expired, and the object can be added
    to a Session where it will act like a persistent one.
  id: totrans-760
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的实用函数[`make_transient_to_detached()`](../orm/session_api.html#sqlalchemy.orm.make_transient_to_detached
    "sqlalchemy.orm.make_transient_to_detached")，可用于制造行为就像从会话加载然后分离的对象。不存在的属性被标记为过期，并且对象可以添加到一个会话中，它将表现得像一个持久对象一样。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-761
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.9.5
- en: 'References: [#3017](https://www.sqlalchemy.org/trac/ticket/3017)'
  id: totrans-762
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3017](https://www.sqlalchemy.org/trac/ticket/3017)
- en: '**[orm] [feature]**'
  id: totrans-763
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Added a new event suite [`QueryEvents`](../orm/events.html#sqlalchemy.orm.QueryEvents
    "sqlalchemy.orm.QueryEvents"). The [`QueryEvents.before_compile()`](../orm/events.html#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile") event allows the creation of functions
    which may place additional modifications to [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") objects before the construction of the SELECT statement.
    It is hoped that this event be made much more useful via the advent of a new inspection
    system that will allow for detailed modifications to be made against [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") objects in an automated fashion.
  id: totrans-764
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的事件套件[`QueryEvents`](../orm/events.html#sqlalchemy.orm.QueryEvents "sqlalchemy.orm.QueryEvents")。[`QueryEvents.before_compile()`](../orm/events.html#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile") 事件允许创建函数，在构建 SELECT 语句之前对[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 对象进行额外修改。希望通过引入一个新的检查系统，使这个事件更加有用，该系统将允许对[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 对象进行详细的自动修改。
- en: See also
  id: totrans-765
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`QueryEvents`](../orm/events.html#sqlalchemy.orm.QueryEvents "sqlalchemy.orm.QueryEvents")'
  id: totrans-766
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`QueryEvents`](../orm/events.html#sqlalchemy.orm.QueryEvents "sqlalchemy.orm.QueryEvents")'
- en: 'References: [#3317](https://www.sqlalchemy.org/trac/ticket/3317)'
  id: totrans-767
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3317](https://www.sqlalchemy.org/trac/ticket/3317)
- en: '**[orm] [feature]**'
  id: totrans-768
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: The subquery wrapping which occurs when joined eager loading is used with a
    one-to-many query that also features LIMIT, OFFSET, or DISTINCT has been disabled
    in the case of a one-to-one relationship, that is a one-to-many with [`relationship.uselist`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.uselist
    "sqlalchemy.orm.relationship") set to False. This will produce more efficient
    queries in these cases.
  id: totrans-769
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用具有LIMIT、OFFSET或DISTINCT的一对多查询的连接预加载与一对一关系一起使用时，即一对多与[`relationship.uselist`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.uselist
    "sqlalchemy.orm.relationship")设置为False的关系，将禁用发生的子查询包装。这将在这些情况下产生更有效的查询。
- en: See also
  id: totrans-770
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Subqueries no longer applied to uselist=False joined eager loads](migration_10.html#change-3249)'
  id: totrans-771
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[子查询不再应用于uselist=False的连接预加载](migration_10.html#change-3249)'
- en: 'References: [#3249](https://www.sqlalchemy.org/trac/ticket/3249)'
  id: totrans-772
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3249](https://www.sqlalchemy.org/trac/ticket/3249)
- en: '**[orm] [feature]**'
  id: totrans-773
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Mapped state internals have been reworked to allow for a 50% reduction in callcounts
    specific to the “expiration” of objects, as in the “auto expire” feature of [`Session.commit()`](../orm/session_api.html#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit") and for [`Session.expire_all()`](../orm/session_api.html#sqlalchemy.orm.Session.expire_all
    "sqlalchemy.orm.Session.expire_all"), as well as in the “cleanup” step which occurs
    when object states are garbage collected.
  id: totrans-774
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 映射状态内部已经重新设计，以允许将与对象的“过期”相关的调用次数减少50%，例如[`Session.commit()`](../orm/session_api.html#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit")的“自动过期”功能以及[`Session.expire_all()`](../orm/session_api.html#sqlalchemy.orm.Session.expire_all
    "sqlalchemy.orm.Session.expire_all")中发生的“清理”步骤，当对象状态被垃圾回收时。
- en: 'References: [#3307](https://www.sqlalchemy.org/trac/ticket/3307)'
  id: totrans-775
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3307](https://www.sqlalchemy.org/trac/ticket/3307)
- en: '**[orm] [feature]**'
  id: totrans-776
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: A warning is emitted when the same polymorphic identity is assigned to two different
    mappers in the same hierarchy. This is typically a user error and means that the
    two different mapping types cannot be correctly distinguished at load time. Pull
    request courtesy Sebastian Bank.
  id: totrans-777
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当在同一层次结构中为两个不同的映射器分配相同的多态标识时，会发出警告。这通常是用户错误，意味着在加载时无法正确区分这两种不同的映射类型。感谢Sebastian
    Bank的Pull请求。
- en: 'References: [#3262](https://www.sqlalchemy.org/trac/ticket/3262)'
  id: totrans-778
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3262](https://www.sqlalchemy.org/trac/ticket/3262)
- en: '**[orm] [feature]**'
  id: totrans-779
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: A new series of [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    methods which provide hooks directly into the unit of work’s facility for emitting
    INSERT and UPDATE statements has been created. When used correctly, this expert-oriented
    system can allow ORM-mappings to be used to generate bulk insert and update statements
    batched into executemany groups, allowing the statements to proceed at speeds
    that rival direct use of the Core.
  id: totrans-780
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个新系列的[`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")方法已经被创建，这些方法直接提供了钩子，可以直接进入工作单元的发出INSERT和UPDATE语句的设施。当正确使用时，这个面向专家的系统可以允许使用ORM映射来生成批量插入和更新语句，分组成executemany组，使语句的执行速度可以与直接使用Core相媲美。
- en: See also
  id: totrans-781
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bulk Operations](../orm/persistence_techniques.html#bulk-operations)'
  id: totrans-782
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[批量操作](../orm/persistence_techniques.html#bulk-operations)'
- en: 'References: [#3100](https://www.sqlalchemy.org/trac/ticket/3100)'
  id: totrans-783
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3100](https://www.sqlalchemy.org/trac/ticket/3100)
- en: '**[orm] [feature]**'
  id: totrans-784
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Added a parameter [`Query.join.isouter`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join.params.isouter
    "sqlalchemy.orm.Query.join") which is synonymous with calling [`Query.outerjoin()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.outerjoin
    "sqlalchemy.orm.Query.outerjoin"); this flag is to provide a more consistent interface
    compared to Core [`FromClause.join()`](../core/selectable.html#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join"). Pull request courtesy Jonathan Vanasco.
  id: totrans-785
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个参数[`Query.join.isouter`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join.params.isouter
    "sqlalchemy.orm.Query.join")，它与调用[`Query.outerjoin()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.outerjoin
    "sqlalchemy.orm.Query.outerjoin")是同义的；这个标志旨在提供一个更一致的接口，与Core [`FromClause.join()`](../core/selectable.html#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join")相比。感谢Jonathan Vanasco的Pull请求。
- en: 'References: [#3217](https://www.sqlalchemy.org/trac/ticket/3217)'
  id: totrans-786
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3217](https://www.sqlalchemy.org/trac/ticket/3217)
- en: '**[orm] [feature]**'
  id: totrans-787
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Added new event handlers [`AttributeEvents.init_collection()`](../orm/events.html#sqlalchemy.orm.AttributeEvents.init_collection
    "sqlalchemy.orm.AttributeEvents.init_collection") and [`AttributeEvents.dispose_collection()`](../orm/events.html#sqlalchemy.orm.AttributeEvents.dispose_collection
    "sqlalchemy.orm.AttributeEvents.dispose_collection"), which track when a collection
    is first associated with an instance and when it is replaced. These handlers supersede
    the `collection.linker()` annotation. The old hook remains supported through an
    event adapter.
  id: totrans-788
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的事件处理程序[`AttributeEvents.init_collection()`](../orm/events.html#sqlalchemy.orm.AttributeEvents.init_collection
    "sqlalchemy.orm.AttributeEvents.init_collection")和[`AttributeEvents.dispose_collection()`](../orm/events.html#sqlalchemy.orm.AttributeEvents.dispose_collection
    "sqlalchemy.orm.AttributeEvents.dispose_collection")，用于跟踪集合何时首次与实例关联以及何时被替换。这些处理程序取代了`collection.linker()`注释。通过事件适配器仍支持旧钩子。
- en: '**[orm] [feature]**'
  id: totrans-789
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: The [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    will raise an exception when [`Query.yield_per()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.yield_per
    "sqlalchemy.orm.Query.yield_per") is used with mappings or options where either
    subquery eager loading, or joined eager loading with collections, would take place.
    These loading strategies are not currently compatible with yield_per, so by raising
    this error, the method is safer to use. Eager loads can be disabled with the `lazyload('*')`
    option or [`Query.enable_eagerloads()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.enable_eagerloads
    "sqlalchemy.orm.Query.enable_eagerloads").
  id: totrans-790
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当[`Query.yield_per()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.yield_per
    "sqlalchemy.orm.Query.yield_per")与会发生子查询急加载或使用集合的连接急加载的映射或选项一起使用时，[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")将引发异常。这些加载策略目前与yield_per不兼容，因此通过引发此错误，该方法更安全。可以使用`lazyload('*')`选项或[`Query.enable_eagerloads()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.enable_eagerloads
    "sqlalchemy.orm.Query.enable_eagerloads")来禁用急加载。
- en: See also
  id: totrans-791
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Joined/Subquery eager loading explicitly disallowed with yield_per](migration_10.html#migration-yield-per-eager-loading)'
  id: totrans-792
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[使用yield_per明确禁止Joined/Subquery急加载](migration_10.html#migration-yield-per-eager-loading)'
- en: '**[orm] [feature]**'
  id: totrans-793
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: A new implementation for `KeyedTuple` used by the [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object offers dramatic speed improvements when fetching
    large numbers of column-oriented rows.
  id: totrans-794
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")对象使用的`KeyedTuple`的新实现在获取大量面向列的行时提供了显著的速度改进。'
- en: See also
  id: totrans-795
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New KeyedTuple implementation dramatically faster](migration_10.html#feature-3176)'
  id: totrans-796
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[新的KeyedTuple实现速度显著提高](migration_10.html#feature-3176)'
- en: 'References: [#3176](https://www.sqlalchemy.org/trac/ticket/3176)'
  id: totrans-797
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3176](https://www.sqlalchemy.org/trac/ticket/3176)
- en: '**[orm] [feature]**'
  id: totrans-798
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: The behavior of [`joinedload.innerjoin`](../orm/queryguide/relationships.html#sqlalchemy.orm.joinedload.params.innerjoin
    "sqlalchemy.orm.joinedload") as well as [`relationship.innerjoin`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.innerjoin
    "sqlalchemy.orm.relationship") is now to use “nested” inner joins, that is, right-nested,
    as the default behavior when an inner join joined eager load is chained to an
    outer join eager load.
  id: totrans-799
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当内连接的急加载链接到外连接的急加载时，[`joinedload.innerjoin`](../orm/queryguide/relationships.html#sqlalchemy.orm.joinedload.params.innerjoin
    "sqlalchemy.orm.joinedload")以及[`relationship.innerjoin`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.innerjoin
    "sqlalchemy.orm.relationship")的行为现在是使用“嵌套”内连接，即右嵌套，作为默认行为。
- en: See also
  id: totrans-800
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Right inner join nesting now the default for joinedload with innerjoin=True](migration_10.html#migration-3008)'
  id: totrans-801
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[右内连接嵌套现在是使用innerjoin=True的joinedload的默认设置](migration_10.html#migration-3008)'
- en: 'References: [#3008](https://www.sqlalchemy.org/trac/ticket/3008)'
  id: totrans-802
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3008](https://www.sqlalchemy.org/trac/ticket/3008)
- en: '**[orm] [feature]**'
  id: totrans-803
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: UPDATE statements can now be batched within an ORM flush into more performant
    executemany() call, similarly to how INSERT statements can be batched; this will
    be invoked within flush to the degree that subsequent UPDATE statements for the
    same mapping and table involve the identical columns within the VALUES clause,
    that no SET-level SQL expressions are embedded, and that the versioning requirements
    for the mapping are compatible with the backend dialect’s ability to return a
    correct rowcount for an executemany operation.
  id: totrans-804
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以在ORM刷新中将UPDATE语句批处理为更高效的executemany()调用，类似于可以批处理INSERT语句；这将在刷新中被调用，以便后续对相同映射和表的UPDATE语句涉及相同列在VALUES子句中，没有嵌入SET级别的SQL表达式，并且映射的版本要求与后端方言能够为executemany操作返回正确的行数兼容。
- en: '**[orm] [feature]**'
  id: totrans-805
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: The `info` parameter has been added to the constructor for [`SynonymProperty`](../orm/internals.html#sqlalchemy.orm.SynonymProperty
    "sqlalchemy.orm.SynonymProperty") and `ComparableProperty`.
  id: totrans-806
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 构造函数中已添加`info`参数给[`SynonymProperty`](../orm/internals.html#sqlalchemy.orm.SynonymProperty
    "sqlalchemy.orm.SynonymProperty")和`ComparableProperty`。
- en: 'References: [#2963](https://www.sqlalchemy.org/trac/ticket/2963)'
  id: totrans-807
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2963](https://www.sqlalchemy.org/trac/ticket/2963)
- en: '**[orm] [feature]**'
  id: totrans-808
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: The `InspectionAttr.info` collection is now moved down to [`InspectionAttr`](../orm/internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.InspectionAttr"), where in addition to being available on all
    [`MapperProperty`](../orm/internals.html#sqlalchemy.orm.MapperProperty "sqlalchemy.orm.MapperProperty")
    objects, it is also now available on hybrid properties, association proxies, when
    accessed via [`Mapper.all_orm_descriptors`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors").
  id: totrans-809
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`InspectionAttr.info`集合现在已移至[`InspectionAttr`](../orm/internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.InspectionAttr")，除了在所有[`MapperProperty`](../orm/internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty")对象上可用外，现在还可在混合属性、关联代理上通过[`Mapper.all_orm_descriptors`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors")访问。'
- en: 'References: [#2971](https://www.sqlalchemy.org/trac/ticket/2971)'
  id: totrans-810
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2971](https://www.sqlalchemy.org/trac/ticket/2971)
- en: '**[orm] [change]**'
  id: totrans-811
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [change]**'
- en: Mapped attributes marked as deferred without explicit undeferral will now remain
    “deferred” even if their column is otherwise present in the result set in some
    way. This is a performance enhancement in that an ORM load no longer spends time
    searching for each deferred column when the result set is obtained. However, for
    an application that has been relying upon this, an explicit [`undefer()`](../orm/queryguide/columns.html#sqlalchemy.orm.undefer
    "sqlalchemy.orm.undefer") or similar option should now be used.
  id: totrans-812
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 标记为延迟加载的映射属性如果没有明确取消延迟加载，即使它们的列以某种方式出现在结果集中，也将保持“延迟加载”。这是一个性能增强，ORM加载不再在获取结果集时花费时间搜索每个延迟加载列。但是，对于一直依赖于此的应用程序，现在应该使用显式的[`undefer()`](../orm/queryguide/columns.html#sqlalchemy.orm.undefer
    "sqlalchemy.orm.undefer")或类似选项。
- en: '**[orm] [changed]**'
  id: totrans-813
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [changed]**'
- en: The `proc()` callable passed to the `create_row_processor()` method of custom
    [`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")
    classes now accepts only a single “row” argument.
  id: totrans-814
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自定义[`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")类的`create_row_processor()`方法传递给`proc()`可调用对象现在只接受单个“row”参数。
- en: See also
  id: totrans-815
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[API Change for new Bundle feature when custom row loaders are used](migration_10.html#bundle-api-change)'
  id: totrans-816
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[在使用自定义行加载器时，新Bundle功能的API更改](migration_10.html#bundle-api-change)'
- en: '**[orm] [changed]**'
  id: totrans-817
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [changed]**'
- en: 'Deprecated event hooks removed: `populate_instance`, `create_instance`, `translate_row`,
    `append_result`'
  id: totrans-818
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已移除弃用的事件钩子：`populate_instance`、`create_instance`、`translate_row`、`append_result`
- en: See also
  id: totrans-819
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Deprecated ORM Event Hooks Removed](migration_10.html#migration-deprecated-orm-events)'
  id: totrans-820
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[已移除弃用的ORM事件钩子](migration_10.html#migration-deprecated-orm-events)'
- en: '**[orm] [bug]**'
  id: totrans-821
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in subquery eager loading where a long chain of eager loads across
    a polymorphic-subclass boundary in conjunction with polymorphic loading would
    fail to locate the subclass-link in the chain, erroring out with a missing property
    name on an [`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass").
  id: totrans-822
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了子查询急加载中的错误，当跨多态子类边界的长链急加载与多态加载一起使用时，会无法定位链中的子类链接，在[`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass")上出现缺少属性名称的错误。
- en: 'This change is also **backported** to: 0.9.5, 0.8.7'
  id: totrans-823
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.9.5、0.8.7
- en: 'References: [#3055](https://www.sqlalchemy.org/trac/ticket/3055)'
  id: totrans-824
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3055](https://www.sqlalchemy.org/trac/ticket/3055)
- en: '**[orm] [bug]**'
  id: totrans-825
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed ORM bug where the [`class_mapper()`](../orm/mapping_api.html#sqlalchemy.orm.class_mapper
    "sqlalchemy.orm.class_mapper") function would mask AttributeErrors or KeyErrors
    that should raise during mapper configuration due to user errors. The catch for
    attribute/keyerror has been made more specific to not include the configuration
    step.
  id: totrans-826
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了ORM中的一个bug，即[`class_mapper()`](../orm/mapping_api.html#sqlalchemy.orm.class_mapper
    "sqlalchemy.orm.class_mapper")函数在映射器配置期间掩盖了应该由于用户错误而引发的AttributeErrors或KeyErrors。对于属性/关键错误的捕获已经更加具体，以排除配置步骤。
- en: 'This change is also **backported** to: 0.9.5, 0.8.7'
  id: totrans-827
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.9.5, 0.8.7
- en: 'References: [#3047](https://www.sqlalchemy.org/trac/ticket/3047)'
  id: totrans-828
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3047](https://www.sqlalchemy.org/trac/ticket/3047)
- en: '**[orm] [bug]**'
  id: totrans-829
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bugs in ORM object comparisons where comparison of many-to-one `!= None`
    would fail if the source were an aliased class, or if the query needed to apply
    special aliasing to the expression due to aliased joins or polymorphic querying;
    also fixed bug in the case where comparing a many-to-one to an object state would
    fail if the query needed to apply special aliasing due to aliased joins or polymorphic
    querying.
  id: totrans-830
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了ORM对象比较中的错误，其中多对一的`!= None`比较将失败，如果源是一个别名类，或者如果查询需要对表达式应用特殊别名处理，原因是别名连接或多态查询；还修复了以下情况的错误：如果比较多对一与对象状态，则如果查询需要对别名连接或多态查询应用特殊别名，则会失败。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-831
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.9.9
- en: 'References: [#3310](https://www.sqlalchemy.org/trac/ticket/3310)'
  id: totrans-832
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3310](https://www.sqlalchemy.org/trac/ticket/3310)
- en: '**[orm] [bug]**'
  id: totrans-833
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where internal assertion would fail in the case where an `after_rollback()`
    handler for a [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    incorrectly adds state to that [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") within the handler, and the task to warn and remove
    this state (established by [#2389](https://www.sqlalchemy.org/trac/ticket/2389))
    attempts to proceed.
  id: totrans-834
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在`after_rollback()`处理程序为一个[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")不正确地在处理程序中添加状态，并且尝试警告和删除此状态的任务（由[#2389](https://www.sqlalchemy.org/trac/ticket/2389)建立）的情况下，内部断言会失败的错误。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-835
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.9.9
- en: 'References: [#3309](https://www.sqlalchemy.org/trac/ticket/3309)'
  id: totrans-836
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3309](https://www.sqlalchemy.org/trac/ticket/3309)
- en: '**[orm] [bug]**'
  id: totrans-837
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where TypeError raised when [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") called with unknown kw arguments would raise its
    own TypeError due to broken formatting. Pull request courtesy Malthe Borch.
  id: totrans-838
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")调用具有未知kw参数时引发TypeError的错误，由于格式错误，会引发自己的TypeError。感谢Malthe
    Borch提供的拉取请求。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-839
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.9.9
- en: '**[orm] [bug]**'
  id: totrans-840
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in lazy loading SQL construction whereby a complex primaryjoin that
    referred to the same “local” column multiple times in the “column that points
    to itself” style of self-referential join would not be substituted in all cases.
    The logic to determine substitutions here has been reworked to be more open-ended.
  id: totrans-841
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了惰性加载SQL构造中的错误，其中复杂的primaryjoin多次引用了相同的“本地”列，以“指向自身的列”样式的自引用连接将不在所有情况下进行替换。确定替换的逻辑已经重新设计为更加开放式。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-842
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.9.9
- en: 'References: [#3300](https://www.sqlalchemy.org/trac/ticket/3300)'
  id: totrans-843
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3300](https://www.sqlalchemy.org/trac/ticket/3300)
- en: '**[orm] [bug]**'
  id: totrans-844
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The “wildcard” loader options, in particular the one set up by the [`load_only()`](../orm/queryguide/columns.html#sqlalchemy.orm.load_only
    "sqlalchemy.orm.load_only") option to cover all attributes not explicitly mentioned,
    now takes into account the superclasses of a given entity, if that entity is mapped
    with inheritance mapping, so that attribute names within the superclasses are
    also omitted from the load. Additionally, the polymorphic discriminator column
    is unconditionally included in the list, just in the same way that primary key
    columns are, so that even with load_only() set up, polymorphic loading of subtypes
    continues to function correctly.
  id: totrans-845
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “通配符”加载器选项，特别是由[`load_only()`](../orm/queryguide/columns.html#sqlalchemy.orm.load_only
    "sqlalchemy.orm.load_only")选项设置的选项，以覆盖未明确提及的所有属性，现在考虑给定实体的超类，如果该实体使用继承映射进行映射，则超类中的属性名称也将从加载中省略。此外，多态鉴别器列无条件地包含在列表中，就像主键列一样，因此即使设置了load_only()，子类型的多态加载仍将正常工作。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-846
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.9
- en: 'References: [#3287](https://www.sqlalchemy.org/trac/ticket/3287)'
  id: totrans-847
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3287](https://www.sqlalchemy.org/trac/ticket/3287)
- en: '**[orm] [bug] [pypy]**'
  id: totrans-848
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [pypy]**'
- en: Fixed bug where if an exception were thrown at the start of a [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") before it fetched results, particularly when row processors
    can’t be formed, the cursor would stay open with results pending and not actually
    be closed. This is typically only an issue on an interpreter like PyPy where the
    cursor isn’t immediately GC’ed, and can in some circumstances lead to transactions/
    locks being open longer than is desirable.
  id: totrans-849
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即如果在[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")开始获取结果之前抛出异常，特别是当无法形成行处理器时，游标将保持打开状态，结果仍在等待中，实际上不会关闭。这通常只在像PyPy这样的解释器上出现问题，其中游标不会立即被GC回收，并且在某些情况下可能导致事务/锁定打开时间超过所需时间。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-850
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.9
- en: 'References: [#3285](https://www.sqlalchemy.org/trac/ticket/3285)'
  id: totrans-851
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3285](https://www.sqlalchemy.org/trac/ticket/3285)
- en: '**[orm] [bug]**'
  id: totrans-852
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a leak which would occur in the unsupported and highly non-recommended
    use case of replacing a relationship on a fixed mapped class many times, referring
    to an arbitrarily growing number of target mappers. A warning is emitted when
    the old relationship is replaced, however if the mapping were already used for
    querying, the old relationship would still be referenced within some registries.
  id: totrans-853
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个泄漏问题，该问题会在不支持且极不推荐的情况下多次替换固定映射类上的关系时发生，这些关系指向任意增长的目标映射器数量。在替换旧关系时会发出警告，但如果映射已用于查询，则旧关系仍将在某些注册表中被引用。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-854
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.9
- en: 'References: [#3251](https://www.sqlalchemy.org/trac/ticket/3251)'
  id: totrans-855
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3251](https://www.sqlalchemy.org/trac/ticket/3251)
- en: '**[orm] [bug] [sqlite]**'
  id: totrans-856
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [sqlite]**'
- en: Fixed bug regarding expression mutations which could express itself as a “Could
    not locate column” error when using [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") to select from multiple, anonymous column entities when
    querying against SQLite, as a side effect of the “join rewriting” feature used
    by the SQLite dialect.
  id: totrans-857
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关于表达式变异的错误，当使用[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")从SQLite中选择多个匿名列实体进行查询时，可能会表现为“无法找到列”错误，这是由SQLite方言使用的“联接重写”功能的副作用。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-858
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.9
- en: 'References: [#3241](https://www.sqlalchemy.org/trac/ticket/3241)'
  id: totrans-859
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3241](https://www.sqlalchemy.org/trac/ticket/3241)
- en: '**[orm] [bug]**'
  id: totrans-860
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where the ON clause for [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join"), and [`Query.outerjoin()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.outerjoin
    "sqlalchemy.orm.Query.outerjoin") to a single-inheritance subclass using `of_type()`
    would not render the “single table criteria” in the ON clause if the `from_joinpoint=True`
    flag were set.
  id: totrans-861
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即当使用`of_type()`连接到单一继承子类时，[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")和[`Query.outerjoin()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.outerjoin
    "sqlalchemy.orm.Query.outerjoin")的ON子句不会在ON子句中呈现“单表条件”，如果设置了`from_joinpoint=True`标志。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-862
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.9
- en: 'References: [#3232](https://www.sqlalchemy.org/trac/ticket/3232)'
  id: totrans-863
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3232](https://www.sqlalchemy.org/trac/ticket/3232)
- en: '**[orm] [bug] [engine]**'
  id: totrans-864
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [engine]**'
- en: Fixed bug that affected generally the same classes of event as that of [#3199](https://www.sqlalchemy.org/trac/ticket/3199),
    when the `named=True` parameter would be used. Some events would fail to register,
    and others would not invoke the event arguments correctly, generally in the case
    of when an event was “wrapped” for adaption in some other way. The “named” mechanics
    have been rearranged to not interfere with the argument signature expected by
    internal wrapper functions.
  id: totrans-865
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了通常影响与[#3199](https://www.sqlalchemy.org/trac/ticket/3199)相同类事件的错误，当使用`named=True`参数时。一些事件将无法注册，而其他事件将无法正确调用事件参数，通常在事件以某种其他方式“包装”以适应时。已重新排列“命名”机制，以不干扰内部包装函数期望的参数签名。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-866
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.9.8
- en: 'References: [#3197](https://www.sqlalchemy.org/trac/ticket/3197)'
  id: totrans-867
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3197](https://www.sqlalchemy.org/trac/ticket/3197)
- en: '**[orm] [bug]**'
  id: totrans-868
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug that affected many classes of event, particularly ORM events but also
    engine events, where the usual logic of “de duplicating” a redundant call to [`listen()`](../core/event.html#sqlalchemy.event.listen
    "sqlalchemy.event.listen") with the same arguments would fail, for those events
    where the listener function is wrapped. An assertion would be hit within registry.py.
    This assertion has now been integrated into the deduplication check, with the
    added bonus of a simpler means of checking deduplication across the board.
  id: totrans-869
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了影响许多类事件的错误，特别是ORM事件，但也包括引擎事件，其中“去重复”冗余调用[`listen()`](../core/event.html#sqlalchemy.event.listen
    "sqlalchemy.event.listen")的通常逻辑会失败，对于那些监听器函数被包装的事件，registry.py中会触发一个断言。现在，这个断言已经整合到去重复检查中，另外还有一个更简单的方法来全面检查去重复。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-870
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.9.8
- en: 'References: [#3199](https://www.sqlalchemy.org/trac/ticket/3199)'
  id: totrans-871
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3199](https://www.sqlalchemy.org/trac/ticket/3199)
- en: '**[orm] [bug]**'
  id: totrans-872
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed warning that would emit when a complex self-referential primaryjoin contained
    functions, while at the same time remote_side was specified; the warning would
    suggest setting “remote side”. It now only emits if remote_side isn’t present.
  id: totrans-873
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当复杂的自引用主连接包含函数时会发出警告的问题，同时指定了remote_side；警告会建议设置“remote side”。现在只有在remote_side不存在时才会发出警告。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-874
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.9.8
- en: 'References: [#3194](https://www.sqlalchemy.org/trac/ticket/3194)'
  id: totrans-875
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3194](https://www.sqlalchemy.org/trac/ticket/3194)
- en: '**[orm] [bug] [eagerloading]**'
  id: totrans-876
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [eagerloading]**'
- en: Fixed a regression caused by [#2976](https://www.sqlalchemy.org/trac/ticket/2976)
    released in 0.9.4 where the “outer join” propagation along a chain of joined eager
    loads would incorrectly convert an “inner join” along a sibling join path into
    an outer join as well, when only descendant paths should be receiving the “outer
    join” propagation; additionally, fixed related issue where “nested” join propagation
    would take place inappropriately between two sibling join paths.
  id: totrans-877
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在0.9.4中发布的[#2976](https://www.sqlalchemy.org/trac/ticket/2976)引起的回归，其中沿着一系列连接的急加载链传播“外连接”会错误地将兄弟连接路径上的“内连接”也转换为外连接，当只有后代路径应该接收“外连接”传播时；另外，修复了相关问题，即“嵌套”连接传播会不恰当地发生在两个兄弟连接路径之间。
- en: 'This change is also **backported** to: 0.9.7'
  id: totrans-878
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.9.7
- en: 'References: [#3131](https://www.sqlalchemy.org/trac/ticket/3131)'
  id: totrans-879
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3131](https://www.sqlalchemy.org/trac/ticket/3131)
- en: '**[orm] [bug]**'
  id: totrans-880
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a regression from 0.9.0 due to [#2736](https://www.sqlalchemy.org/trac/ticket/2736)
    where the [`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from") method no longer set up the “from entity”
    of the [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object correctly, so that subsequent [`Query.filter_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.filter_by
    "sqlalchemy.orm.Query.filter_by") or [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") calls would fail to check the appropriate “from”
    entity when searching for attributes by string name.
  id: totrans-881
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于[#2736](https://www.sqlalchemy.org/trac/ticket/2736)导致的从0.9.0回归，[`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from")方法不再正确设置[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象的“from entity”，因此后续的[`Query.filter_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.filter_by
    "sqlalchemy.orm.Query.filter_by")或[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")调用将无法在按字符串名称搜索属性时检查适当的“from”实体。
- en: 'This change is also **backported** to: 0.9.7'
  id: totrans-882
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.7
- en: 'References: [#2736](https://www.sqlalchemy.org/trac/ticket/2736), [#3083](https://www.sqlalchemy.org/trac/ticket/3083)'
  id: totrans-883
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2736](https://www.sqlalchemy.org/trac/ticket/2736), [#3083](https://www.sqlalchemy.org/trac/ticket/3083)
- en: '**[orm] [bug]**'
  id: totrans-884
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where items that were persisted, deleted, or had a primary key change
    within a savepoint block would not participate in being restored to their former
    state (not in session, in session, previous PK) after the outer transaction were
    rolled back.
  id: totrans-885
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在保存点块内持久化、删除或主键更改的项目在外部事务回滚后不参与恢复到其先前状态（不在会话中、在会话中、先前PK）的错误。
- en: 'This change is also **backported** to: 0.9.7'
  id: totrans-886
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.7
- en: 'References: [#3108](https://www.sqlalchemy.org/trac/ticket/3108)'
  id: totrans-887
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3108](https://www.sqlalchemy.org/trac/ticket/3108)
- en: '**[orm] [bug]**'
  id: totrans-888
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in subquery eager loading in conjunction with [`with_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic"), the targeting of entities and columns in the
    subquery load has been made more accurate with respect to this type of entity
    and others.
  id: totrans-889
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了子查询急切加载与[`with_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic")一起使用时的错误，子查询加载中实体和列的定位相对于此类型的实体和其他实体更加准确。
- en: 'This change is also **backported** to: 0.9.7'
  id: totrans-890
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.7
- en: 'References: [#3106](https://www.sqlalchemy.org/trac/ticket/3106)'
  id: totrans-891
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3106](https://www.sqlalchemy.org/trac/ticket/3106)
- en: '**[orm] [bug]**'
  id: totrans-892
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Additional checks have been added for the case where an inheriting mapper is
    implicitly combining one of its column-based attributes with that of the parent,
    where those columns normally don’t necessarily share the same value. This is an
    extension of an existing check that was added via [#1892](https://www.sqlalchemy.org/trac/ticket/1892);
    however this new check emits only a warning, instead of an exception, to allow
    for applications that may be relying upon the existing behavior.
  id: totrans-893
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 针对继承映射器隐式组合其基于列的属性与父级属性的情况，已添加额外的检查，其中这些列通常不一定共享相同的值。这是通过[#1892](https://www.sqlalchemy.org/trac/ticket/1892)添加的现有检查的扩展；然而，这个新检查只发出警告，而不是异常，以允许可能依赖现有行为的应用程序。
- en: See also
  id: totrans-894
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[I’m getting a warning or error about “Implicitly combining column X under
    attribute Y”](../faq/ormconfiguration.html#faq-combining-columns)'
  id: totrans-895
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[我收到关于“在属性Y下隐式组合列X”警告或错误](../faq/ormconfiguration.html#faq-combining-columns)'
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-896
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.5
- en: 'References: [#3042](https://www.sqlalchemy.org/trac/ticket/3042)'
  id: totrans-897
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3042](https://www.sqlalchemy.org/trac/ticket/3042)
- en: '**[orm] [bug]**'
  id: totrans-898
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Modified the behavior of [`load_only()`](../orm/queryguide/columns.html#sqlalchemy.orm.load_only
    "sqlalchemy.orm.load_only") such that primary key columns are always added to
    the list of columns to be “undeferred”; otherwise, the ORM can’t load the row’s
    identity. Apparently, one can defer the mapped primary keys and the ORM will fail,
    that hasn’t been changed. But as load_only is essentially saying “defer all but
    X”, it’s more critical that PK cols not be part of this deferral.
  id: totrans-899
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了[`load_only()`](../orm/queryguide/columns.html#sqlalchemy.orm.load_only "sqlalchemy.orm.load_only")的行为，使得主键列始终添加到“未延迟加载”列的列表中；否则，ORM无法加载行的标识。显然，可以延迟映射的主键，ORM将失败，这一点没有改变。但是，由于load_only本质上是说“除了X之外都延迟加载”，因此PK列不参与此延迟加载更为关键。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-900
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.5
- en: 'References: [#3080](https://www.sqlalchemy.org/trac/ticket/3080)'
  id: totrans-901
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3080](https://www.sqlalchemy.org/trac/ticket/3080)
- en: '**[orm] [bug]**'
  id: totrans-902
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a few edge cases which arise in the so-called “row switch” scenario, where
    an INSERT/DELETE can be turned into an UPDATE. In this situation, a many-to-one
    relationship set to None, or in some cases a scalar attribute set to None, may
    not be detected as a net change in value, and therefore the UPDATE would not reset
    what was on the previous row. This is due to some as-yet unresolved side effects
    of the way attribute history works in terms of implicitly assuming None isn’t
    really a “change” for a previously un-set attribute. See also [#3061](https://www.sqlalchemy.org/trac/ticket/3061).
  id: totrans-903
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在所谓的“行切换”场景中出现的一些边缘情况，其中INSERT/DELETE可以转换为UPDATE。在这种情况下，将一个多对一关系设置为None，或在某些情况下将标量属性设置为None，可能不会被检测为值的净变化，因此UPDATE不会重置前一行上的内容。这是由于属性历史的一些尚未解决的副作用导致的，这些副作用在隐式假定None对于先前未设置属性实际上不是“变化”。另请参见[#3061](https://www.sqlalchemy.org/trac/ticket/3061)。
- en: Note
  id: totrans-904
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: This change has been **REVERTED** in 0.9.6\. The full fix will be in version
    1.0 of SQLAlchemy.
  id: totrans-905
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改已在0.9.6版本中**撤销**。完整修复将在SQLAlchemy的1.0版本中实现。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-906
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.9.5
- en: 'References: [#3060](https://www.sqlalchemy.org/trac/ticket/3060)'
  id: totrans-907
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3060](https://www.sqlalchemy.org/trac/ticket/3060)
- en: '**[orm] [bug]**'
  id: totrans-908
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Related to [#3060](https://www.sqlalchemy.org/trac/ticket/3060), an adjustment
    has been made to the unit of work such that loading for related many-to-one objects
    is slightly more aggressive, in the case of a graph of self-referential objects
    that are to be deleted; the load of related objects is to help determine the correct
    order for deletion if passive_deletes is not set.
  id: totrans-909
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与[#3060](https://www.sqlalchemy.org/trac/ticket/3060)相关，对工作单元进行了调整，以便对于要删除的自引用对象图的相关多对一对象的加载略微更加积极；如果未设置`passive_deletes`，则相关对象的加载将有助于确定正确的删除顺序。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-910
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.9.5
- en: '**[orm] [bug]**'
  id: totrans-911
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in SQLite join rewriting where anonymized column names due to repeats
    would not correctly be rewritten in subqueries. This would affect SELECT queries
    with any kind of subquery + join.
  id: totrans-912
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了SQLite联接重写中匿名列名由于重复而无法在子查询中正确重写的错误。这将影响带有任何类型的子查询 + 联接的SELECT查询。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-913
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.9.5
- en: 'References: [#3057](https://www.sqlalchemy.org/trac/ticket/3057)'
  id: totrans-914
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3057](https://www.sqlalchemy.org/trac/ticket/3057)
- en: '**[orm] [bug] [sql]**'
  id: totrans-915
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [sql]**'
- en: Fixes to the newly enhanced boolean coercion in [#2804](https://www.sqlalchemy.org/trac/ticket/2804)
    where the new rules for “where” and “having” wouldn’t take effect for the “whereclause”
    and “having” kw arguments of the [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct, which is also what [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") uses so wasn’t working in the ORM either.
  id: totrans-916
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了对[#2804](https://www.sqlalchemy.org/trac/ticket/2804)中新增的布尔强制转换的修复，其中“where”和“having”的新规则不会对[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")构造函数的“whereclause”和“having” kw参数产生影响，这也是[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")所使用的，因此在ORM中也无法正常工作。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-917
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.9.5
- en: 'References: [#3013](https://www.sqlalchemy.org/trac/ticket/3013)'
  id: totrans-918
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3013](https://www.sqlalchemy.org/trac/ticket/3013)
- en: '**[orm] [bug]**'
  id: totrans-919
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where the session attachment error “object is already attached to
    session X” would fail to prevent the object from also being attached to the new
    session, in the case that execution continued after the error raise occurred.
  id: totrans-920
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '修复了会话附加错误“对象已附加到会话X”未能阻止该对象在错误引发后继续执行的情况下，也附加到新会话的错误。 '
- en: 'References: [#3301](https://www.sqlalchemy.org/trac/ticket/3301)'
  id: totrans-921
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3301](https://www.sqlalchemy.org/trac/ticket/3301)
- en: '**[orm] [bug]**'
  id: totrans-922
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The primary [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    of a [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    is now passed to the [`Session.get_bind()`](../orm/session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") method when calling upon [`Query.count()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.count
    "sqlalchemy.orm.Query.count"), [`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update"), [`Query.delete()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.delete
    "sqlalchemy.orm.Query.delete"), as well as queries against mapped columns, [`column_property`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property") objects, and SQL functions and expressions derived
    from mapped columns. This allows sessions that rely upon either customized [`Session.get_bind()`](../orm/session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") schemes or “bound” metadata to work in all
    relevant cases.
  id: totrans-923
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当调用[`Query.count()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.count
    "sqlalchemy.orm.Query.count")、[`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update")、[`Query.delete()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.delete
    "sqlalchemy.orm.Query.delete")以及针对映射列、[`column_property`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property")对象以及从映射列派生的 SQL 函数和表达式的查询时，[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")的主要[`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")现在会传递给[`Session.get_bind()`](../orm/session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind")方法。这样，依赖于自定义[`Session.get_bind()`](../orm/session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind")方案或“绑定”元数据的会话可以在所有相关情况下工作。
- en: See also
  id: totrans-924
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Session.get_bind() will receive the Mapper in all relevant Query cases](migration_10.html#bug-3227)'
  id: totrans-925
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[在所有相关查询情况下，Session.get_bind() 将接收 Mapper](migration_10.html#bug-3227)'
- en: 'References: [#1326](https://www.sqlalchemy.org/trac/ticket/1326), [#3227](https://www.sqlalchemy.org/trac/ticket/3227),
    [#3242](https://www.sqlalchemy.org/trac/ticket/3242)'
  id: totrans-926
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1326](https://www.sqlalchemy.org/trac/ticket/1326)、[#3227](https://www.sqlalchemy.org/trac/ticket/3227)、[#3242](https://www.sqlalchemy.org/trac/ticket/3242)
- en: '**[orm] [bug]**'
  id: totrans-927
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The [`PropComparator.of_type()`](../orm/internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type") modifier has been improved in conjunction
    with loader directives such as [`joinedload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.joinedload
    "sqlalchemy.orm.joinedload") and [`contains_eager()`](../orm/queryguide/relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") such that if two [`PropComparator.of_type()`](../orm/internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type") modifiers of the same base type/path
    are encountered, they will be joined together into a single “polymorphic” entity,
    rather than replacing the entity of type A with the one of type B. E.g. a joinedload
    of `A.b.of_type(BSub1)->BSub1.c` combined with joinedload of `A.b.of_type(BSub2)->BSub2.c`
    will create a single joinedload of `A.b.of_type((BSub1, BSub2)) -> BSub1.c, BSub2.c`,
    without the need for the `with_polymorphic` to be explicit in the query.
  id: totrans-928
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与[`joinedload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.joinedload
    "sqlalchemy.orm.joinedload")和[`contains_eager()`](../orm/queryguide/relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager")等加载器指令一起，[`PropComparator.of_type()`](../orm/internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type")修饰符已经改进，以便在遇到两个相同基本类型/路径的[`PropComparator.of_type()`](../orm/internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type")修饰符时，它们将被合并为单个“多态”实体，而不是用类型 A 的实体替换类型
    B 的实体。例如，`A.b.of_type(BSub1)->BSub1.c` 的 joinedload 与 `A.b.of_type(BSub2)->BSub2.c`
    的 joinedload 将创建一个单个 joinedload，即 `A.b.of_type((BSub1, BSub2)) -> BSub1.c, BSub2.c`，而不需要在查询中显式使用
    `with_polymorphic`。
- en: See also
  id: totrans-929
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Eager Loading of Polymorphic Subtypes](../orm/queryguide/inheritance.html#eagerloading-polymorphic-subtypes)
    - contains an updated example illustrating the new format.'
  id: totrans-930
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[多态子类型的急加载](../orm/queryguide/inheritance.html#eagerloading-polymorphic-subtypes)
    - 包含一个更新的示例，说明了新的格式。'
- en: 'References: [#3256](https://www.sqlalchemy.org/trac/ticket/3256)'
  id: totrans-931
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3256](https://www.sqlalchemy.org/trac/ticket/3256)
- en: '**[orm] [bug]**'
  id: totrans-932
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Repaired support of the `copy.deepcopy()` call when used by the [`CascadeOptions`](../orm/internals.html#sqlalchemy.orm.CascadeOptions
    "sqlalchemy.orm.util.CascadeOptions") argument, which occurs if `copy.deepcopy()`
    is being used with [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") (not an officially supported use case). Pull request
    courtesy duesenfranz.
  id: totrans-933
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当由 [`CascadeOptions`](../orm/internals.html#sqlalchemy.orm.CascadeOptions
    "sqlalchemy.orm.util.CascadeOptions") 参数使用时 `copy.deepcopy()` 调用的支持，这种情况发生在 [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 使用 `copy.deepcopy()` 时（不是官方支持的用例）。请求已经由 duesenfranz
    提出。
- en: '**[orm] [bug]**'
  id: totrans-934
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where [`Session.expunge()`](../orm/session_api.html#sqlalchemy.orm.Session.expunge
    "sqlalchemy.orm.Session.expunge") would not fully detach the given object if the
    object had been subject to a delete operation that was flushed, but not committed.
    This would also affect related operations like [`make_transient()`](../orm/session_api.html#sqlalchemy.orm.make_transient
    "sqlalchemy.orm.make_transient").
  id: totrans-935
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即当对象经历了刷新但未提交的删除操作时，[`Session.expunge()`](../orm/session_api.html#sqlalchemy.orm.Session.expunge
    "sqlalchemy.orm.Session.expunge") 不会完全分离给定的对象。这也会影响到像 [`make_transient()`](../orm/session_api.html#sqlalchemy.orm.make_transient
    "sqlalchemy.orm.make_transient") 这样的相关操作。
- en: See also
  id: totrans-936
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[session.expunge() will fully detach an object that’s been deleted](migration_10.html#bug-3139)'
  id: totrans-937
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[session.expunge() 现在会完全分离已删除的对象](migration_10.html#bug-3139)'
- en: 'References: [#3139](https://www.sqlalchemy.org/trac/ticket/3139)'
  id: totrans-938
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#3139](https://www.sqlalchemy.org/trac/ticket/3139)
- en: '**[orm] [bug]**'
  id: totrans-939
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: A warning is emitted in the case of multiple relationships that ultimately will
    populate a foreign key column in conflict with another, where the relationships
    are attempting to copy values from different source columns. This occurs in the
    case where composite foreign keys with overlapping columns are mapped to relationships
    that each refer to a different referenced column. A new documentation section
    illustrates the example as well as how to overcome the issue by specifying “foreign”
    columns specifically on a per-relationship basis.
  id: totrans-940
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果多个关系最终将填充与另一个冲突的外键列，则会发出警告，其中关系试图从不同的源列复制值。这种情况发生在将具有重叠列的复合外键映射到每个引用列都不同的关系时。新的文档部分演示了示例以及如何通过在每个关系基础上明确指定“foreign”列来克服此问题。
- en: See also
  id: totrans-941
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Overlapping Foreign Keys](../orm/join_conditions.html#relationship-overlapping-foreignkeys)'
  id: totrans-942
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[重叠的外键](../orm/join_conditions.html#relationship-overlapping-foreignkeys)'
- en: 'References: [#3230](https://www.sqlalchemy.org/trac/ticket/3230)'
  id: totrans-943
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#3230](https://www.sqlalchemy.org/trac/ticket/3230)
- en: '**[orm] [bug]**'
  id: totrans-944
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The [`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update") method will now convert string key names in the
    given dictionary of values into mapped attribute names against the mapped class
    being updated. Previously, string names were taken in directly and passed to the
    core update statement without any means to resolve against the mapped entity.
    Support for synonyms and hybrid attributes as the subject attributes of [`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update") are also supported.
  id: totrans-945
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update") 方法现在将给定值字典中的字符串键名转换为正在更新的映射类的映射属性名称。以前，字符串名称直接被接受并传递给核心更新语句，没有任何方法解析到映射实体。支持使用
    [`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update "sqlalchemy.orm.Query.update")
    的主题属性的同义词和混合属性也得到了支持。'
- en: See also
  id: totrans-946
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[query.update() now resolves string names into mapped attribute names](migration_10.html#bug-3228)'
  id: totrans-947
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[query.update() 现在将字符串名称解析为映射属性名称](migration_10.html#bug-3228)'
- en: 'References: [#3228](https://www.sqlalchemy.org/trac/ticket/3228)'
  id: totrans-948
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#3228](https://www.sqlalchemy.org/trac/ticket/3228)
- en: '**[orm] [bug]**'
  id: totrans-949
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Improvements to the mechanism used by [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") to locate “binds” (e.g. engines to use), such engines
    can be associated with mixin classes, concrete subclasses, as well as a wider
    variety of table metadata such as joined inheritance tables.
  id: totrans-950
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    用于定位“绑定”（例如要使用的引擎）的机制进行了改进，这些引擎可以与混合类、具体子类以及更广泛的表元数据（如联接继承表）关联。
- en: See also
  id: totrans-951
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Session.get_bind() handles a wider variety of inheritance scenarios](migration_10.html#bug-3035)'
  id: totrans-952
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Session.get_bind() 处理更广泛的继承场景](migration_10.html#bug-3035)'
- en: 'References: [#3035](https://www.sqlalchemy.org/trac/ticket/3035)'
  id: totrans-953
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3035](https://www.sqlalchemy.org/trac/ticket/3035)
- en: '**[orm] [bug]**'
  id: totrans-954
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in single table inheritance where a chain of joins that included the
    same single inh entity more than once (normally this should raise an error) could,
    in some cases depending on what was being joined “from”, implicitly alias the
    second case of the single inh entity, producing a query that “worked”. But as
    this implicit aliasing is not intended in the case of single table inheritance,
    it didn’t really “work” fully and was very misleading, since it wouldn’t always
    appear.
  id: totrans-955
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了单表继承中的一个 bug，其中包含同一个单一继承实体超过一次的连接链（通常应该引发错误），在某些情况下，取决于从哪里连接，可能会隐式别名第二个单一继承实体的情况，生成一个“有效”的查询。但由于在单表继承的情况下并不打算进行这种隐式别名，它并没有真正“有效”，而且非常具有误导性，因为它并不总是出现。
- en: See also
  id: totrans-956
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Changes and fixes in handling of duplicate join targets](migration_10.html#bug-3233)'
  id: totrans-957
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[处理重复连接目标的更改和修复](migration_10.html#bug-3233)'
- en: 'References: [#3233](https://www.sqlalchemy.org/trac/ticket/3233)'
  id: totrans-958
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3233](https://www.sqlalchemy.org/trac/ticket/3233)
- en: '**[orm] [bug]**'
  id: totrans-959
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The ON clause rendered when using [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join"), [`Query.outerjoin()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.outerjoin
    "sqlalchemy.orm.Query.outerjoin"), or the standalone [`join()`](../orm/queryguide/api.html#sqlalchemy.orm.join
    "sqlalchemy.orm.join") / [`outerjoin()`](../orm/queryguide/api.html#sqlalchemy.orm.outerjoin
    "sqlalchemy.orm.outerjoin") functions to a single-inheritance subclass will now
    include the “single table criteria” in the ON clause even if the ON clause is
    otherwise hand-rolled; it is now added to the criteria using AND, the same way
    as if joining to a single-table target using relationship or similar.
  id: totrans-960
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用 [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")、[`Query.outerjoin()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.outerjoin
    "sqlalchemy.orm.Query.outerjoin") 或独立的 [`join()`](../orm/queryguide/api.html#sqlalchemy.orm.join
    "sqlalchemy.orm.join") / [`outerjoin()`](../orm/queryguide/api.html#sqlalchemy.orm.outerjoin
    "sqlalchemy.orm.outerjoin") 函数连接到单一继承子类时，ON 子句现在将包括“单表条件”，即使 ON 子句是手动编写的；它现在使用
    AND 将条件添加到 ON 子句中，方式与使用 relationship 或类似方式连接到单表目标时相同。
- en: This is sort of in-between feature and bug.
  id: totrans-961
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这有点介于功能和 bug 之间。
- en: See also
  id: totrans-962
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[single-table-inheritance criteria added to all ON clauses unconditionally](migration_10.html#migration-3222)'
  id: totrans-963
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[单表继承条件无条件地添加到所有 ON 子句中](migration_10.html#migration-3222)'
- en: 'References: [#3222](https://www.sqlalchemy.org/trac/ticket/3222)'
  id: totrans-964
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3222](https://www.sqlalchemy.org/trac/ticket/3222)
- en: '**[orm] [bug]**'
  id: totrans-965
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: A major rework to the behavior of expression labels, most specifically when
    used with ColumnProperty constructs with custom SQL expressions and in conjunction
    with the “order by labels” logic first introduced in 0.9\. Fixes include that
    an `order_by(Entity.some_col_prop)` will now make use of “order by label” rules
    even if Entity has been subject to aliasing, either via inheritance rendering
    or via the use of the `aliased()` construct; rendering of the same column property
    multiple times with aliasing (e.g. `query(Entity.some_prop, entity_alias.some_prop)`)
    will label each occurrence of the entity with a distinct label, and additionally
    “order by label” rules will work for both (e.g. `order_by(Entity.some_prop, entity_alias.some_prop)`).
    Additional issues that could prevent the “order by label” logic from working in
    0.9, most notably that the state of a Label could change such that “order by label”
    would stop working depending on how things were called, has been fixed.
  id: totrans-966
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对表达式标签的行为进行了重大改进，特别是在与具有自定义 SQL 表达式的 ColumnProperty 结构一起使用时，以及与首次引入的“order by
    labels”逻辑结合使用时。修复包括，现在 `order_by(Entity.some_col_prop)` 将即使 Entity 经过别名处理，也会使用“order
    by label”规则；多次使用别名渲染相同的列属性（例如 `query(Entity.some_prop, entity_alias.some_prop)`)
    将为实体的每次出现标记一个不同的标签，并且此外，“order by label”规则将适用于两者（例如 `order_by(Entity.some_prop,
    entity_alias.some_prop)`）。在 0.9 版本中可能阻止“order by label”逻辑工作的其他问题，特别是标签的状态可能会发生变化，以至于“order
    by label”会停止工作，具体取决于如何调用，已经修复。
- en: See also
  id: totrans-967
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[ColumnProperty constructs work a lot better with aliases, order_by](migration_10.html#bug-3188)'
  id: totrans-968
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[ColumnProperty 结构在别名、order_by 方面工作得更好](migration_10.html#bug-3188)'
- en: 'References: [#3148](https://www.sqlalchemy.org/trac/ticket/3148), [#3188](https://www.sqlalchemy.org/trac/ticket/3188)'
  id: totrans-969
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3148](https://www.sqlalchemy.org/trac/ticket/3148), [#3188](https://www.sqlalchemy.org/trac/ticket/3188)
- en: '**[orm] [bug]**'
  id: totrans-970
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Changed the approach by which the “single inheritance criterion” is applied,
    when using `Query.from_self()`, or its common user [`Query.count()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.count
    "sqlalchemy.orm.Query.count"). The criteria to limit rows to those with a certain
    type is now indicated on the inside subquery, not the outside one, so that even
    if the “type” column is not available in the columns clause, we can filter on
    it on the “inner” query.
  id: totrans-971
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更改了使用 `Query.from_self()` 或其常用用户 [`Query.count()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.count
    "sqlalchemy.orm.Query.count") 时应用“单继承条件”的方法。现在，在内部子查询中指示将行限制为具有特定类型的标准，而不是在外部子查询中指示，因此即使“类型”列不在列子句中可用，我们也可以在“内部”查询中对其进行过滤。
- en: See also
  id: totrans-972
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另见
- en: '[Change to single-table-inheritance criteria when using from_self(), count()](migration_10.html#migration-3177)'
  id: totrans-973
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[在使用 from_self()、count() 时更改为单表继承条件](migration_10.html#migration-3177)'
- en: 'References: [#3177](https://www.sqlalchemy.org/trac/ticket/3177)'
  id: totrans-974
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3177](https://www.sqlalchemy.org/trac/ticket/3177)
- en: '**[orm] [bug]**'
  id: totrans-975
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Made a small adjustment to the mechanics of lazy loading, such that it has less
    chance of interfering with a joinload() in the very rare circumstance that an
    object points to itself; in this scenario, the object refers to itself while loading
    its attributes which can cause a mixup between loaders. The use case of “object
    points to itself” is not fully supported, but the fix also removes some overhead
    so for now is part of testing.
  id: totrans-976
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对延迟加载的机制进行了微小调整，以使其在非常罕见的情况下几乎不会干扰 joinload()；在这种情况下，对象在加载其属性时会引用自身，这可能会导致加载程序之间的混淆。目前不完全支持“对象指向自身”的用例，但此修复还删除了一些开销，因此目前是测试的一部分。
- en: 'References: [#3145](https://www.sqlalchemy.org/trac/ticket/3145)'
  id: totrans-977
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3145](https://www.sqlalchemy.org/trac/ticket/3145)
- en: '**[orm] [bug]**'
  id: totrans-978
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The “resurrect” ORM event has been removed. This event hook had no purpose since
    the old “mutable attribute” system was removed in 0.8.
  id: totrans-979
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已删除“复活” ORM 事件。自从在 0.8 版本中删除了旧的“可变属性”系统以来，此事件挂钩已经没有作用。
- en: 'References: [#3171](https://www.sqlalchemy.org/trac/ticket/3171)'
  id: totrans-980
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3171](https://www.sqlalchemy.org/trac/ticket/3171)
- en: '**[orm] [bug]**'
  id: totrans-981
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where attribute “set” events or columns with `@validates` would have
    events triggered within the flush process, when those columns were the targets
    of a “fetch and populate” operation, such as an autoincremented primary key, a
    Python side default, or a server-side default “eagerly” fetched via RETURNING.
  id: totrans-982
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，在该 bug 中，“set” 事件或带有 `@validates` 的列在刷新过程中会触发事件，当这些列是“获取和填充”操作的目标时，例如自动增量主键、Python
    端默认值或通过 RETURNING “急切地”获取的服务器端默认值。
- en: 'References: [#3167](https://www.sqlalchemy.org/trac/ticket/3167)'
  id: totrans-983
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3167](https://www.sqlalchemy.org/trac/ticket/3167)
- en: '**[orm] [bug] [py3k]**'
  id: totrans-984
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [py3k]**'
- en: The [`IdentityMap`](../orm/internals.html#sqlalchemy.orm.IdentityMap "sqlalchemy.orm.IdentityMap")
    exposed from [`Session.identity_map`](../orm/session_api.html#sqlalchemy.orm.Session.identity_map
    "sqlalchemy.orm.Session.identity_map") now returns lists for `items()` and `values()`
    in Py3K. Early porting to Py3K here had these returning iterators, when they technically
    should be “iterable views”..for now, lists are OK.
  id: totrans-985
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从 [`Session.identity_map`](../orm/session_api.html#sqlalchemy.orm.Session.identity_map
    "sqlalchemy.orm.Session.identity_map") 中暴露的 [`IdentityMap`](../orm/internals.html#sqlalchemy.orm.IdentityMap
    "sqlalchemy.orm.IdentityMap") 现在在 Py3K 中为 `items()` 和 `values()` 返回列表。此处的早期移植到
    Py3K 将这些返回迭代器，但它们在技术上应该是“可迭代视图”。暂时，列表是可以的。
- en: '**[orm] [bug]**'
  id: totrans-986
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The “evaluator” for query.update()/delete() won’t work with multi-table updates,
    and needs to be set to synchronize_session=False or synchronize_session=’fetch’;
    this now raises an exception, with a message to change the synchronize setting.
    This is upgraded from a warning emitted as of 0.9.7.
  id: totrans-987
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于 query.update()/delete() 的“评估器”在多表更新时不起作用，需要设置为 synchronize_session=False
    或 synchronize_session=’fetch’；现在会引发异常，并显示更改同步设置的消息。这是从 0.9.7 版本开始发出的警告升级为异常。
- en: 'References: [#3117](https://www.sqlalchemy.org/trac/ticket/3117)'
  id: totrans-988
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3117](https://www.sqlalchemy.org/trac/ticket/3117)
- en: '**[orm] [enhancement]**'
  id: totrans-989
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [enhancement]**'
- en: Adjustment to attribute mechanics concerning when a value is implicitly initialized
    to None via first access; this action, which has always resulted in a population
    of the attribute, no longer does so; the None value is returned but the underlying
    attribute receives no set event. This is consistent with how collections work
    and allows attribute mechanics to behave more consistently; in particular, getting
    an attribute with no value does not squash the event that should proceed if the
    value is actually set to None.
  id: totrans-990
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整属性机制，关于何时通过首次访问隐式初始化值为None；此操作，通常导致属性的填充，不再这样做；返回None值，但底层属性不接收设置事件。这与集合的工作方式一致，并允许属性机制更一致地行为；特别是，获取没有值的属性不会压制事件，如果实际上将值设置为None，则应该继续进行。
- en: See also
  id: totrans-991
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Changes to attribute events and other operations regarding attributes that
    have no pre-existing value](migration_10.html#migration-3061)'
  id: totrans-992
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[属性事件和其他操作更改，涉及没有预先存在值的属性](migration_10.html#migration-3061)'
- en: where bound parameters are rendered inline as strings based on a compile-time
    option. Work on this feature is courtesy of Dobes Vandermeer.
  id: totrans-993
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在编译时选项基础上，绑定参数作为字符串内联呈现。此功能的工作由Dobes Vandermeer提供。
- en: See also
  id: totrans-994
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 另请参阅
- en: ''
  id: totrans-995
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Select/Query LIMIT / OFFSET may be specified as an arbitrary SQL expression](migration_10.html#feature-3034).'
  id: totrans-996
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[选择/查询LIMIT/OFFSET可以指定为任意SQL表达式](migration_10.html#feature-3034)。'
- en: 'References: [#3061](https://www.sqlalchemy.org/trac/ticket/3061)'
  id: totrans-997
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3061](https://www.sqlalchemy.org/trac/ticket/3061)
- en: orm declarative
  id: totrans-998
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm声明性
- en: '**[orm] [declarative] [feature]**'
  id: totrans-999
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [feature]**'
- en: The [`declared_attr`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr "sqlalchemy.orm.declared_attr")
    construct has newly improved behaviors and features in conjunction with declarative.
    The decorated function will now have access to the final column copies present
    on the local mixin when invoked, and will also be invoked exactly once for each
    mapped class, the returned result being memoized. A new modifier [`declared_attr.cascading`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr.cascading
    "sqlalchemy.orm.declared_attr.cascading") is added as well.
  id: totrans-1000
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`declared_attr`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr "sqlalchemy.orm.declared_attr")结构在与声明性结合使用时具有新的改进行为和特性。装饰的函数现在在调用时将有权访问本地混合上存在的最终列副本，并且对于每个映射的类，将确切地调用一次，返回的结果被缓存。还添加了一个新的修饰符[`declared_attr.cascading`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr.cascading
    "sqlalchemy.orm.declared_attr.cascading")。'
- en: See also
  id: totrans-1001
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Improvements to declarative mixins, @declared_attr and related features](migration_10.html#feature-3150)'
  id: totrans-1002
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[改进声明性混合，@declared_attr和相关功能](migration_10.html#feature-3150)'
- en: 'References: [#3150](https://www.sqlalchemy.org/trac/ticket/3150)'
  id: totrans-1003
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3150](https://www.sqlalchemy.org/trac/ticket/3150)
- en: '**[orm] [declarative] [bug]**'
  id: totrans-1004
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Fixed “‘NoneType’ object has no attribute ‘concrete’” error when using [`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase") in conjunction with a subclass
    that declares `__abstract__`.
  id: totrans-1005
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在与声明`__abstract__`的子类一起使用[`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase")时，“'NoneType'对象没有属性'concrete'”错误。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-1006
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**被回溯到**：0.9.8
- en: 'References: [#3185](https://www.sqlalchemy.org/trac/ticket/3185)'
  id: totrans-1007
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3185](https://www.sqlalchemy.org/trac/ticket/3185)
- en: '**[orm] [declarative] [bug]**'
  id: totrans-1008
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Fixed bug where using an `__abstract__` mixin in the middle of a declarative
    inheritance hierarchy would prevent attributes and configuration being correctly
    propagated from the base class to the inheriting class.
  id: totrans-1009
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在声明性继承层次结构的中间使用`__abstract__`混合时，属性和配置无法从基类正确传播到继承类的错误。
- en: 'References: [#3219](https://www.sqlalchemy.org/trac/ticket/3219), [#3240](https://www.sqlalchemy.org/trac/ticket/3240)'
  id: totrans-1010
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3219](https://www.sqlalchemy.org/trac/ticket/3219), [#3240](https://www.sqlalchemy.org/trac/ticket/3240)
- en: '**[orm] [declarative] [bug]**'
  id: totrans-1011
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: A relationship set up with [`declared_attr`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr") on a [`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase") base class will now be configured
    on the abstract base mapping automatically, in addition to being set up on descendant
    concrete classes as usual.
  id: totrans-1012
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用[`declared_attr`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr "sqlalchemy.orm.declared_attr")在[`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase")基类上设置的关系现在将自动配置在抽象基础映射上，除了像往常一样在后代具体类上设置。
- en: See also
  id: totrans-1013
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Improvements to declarative mixins, @declared_attr and related features](migration_10.html#feature-3150)'
  id: totrans-1014
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[对声明性混合、@declared_attr和相关功能的改进](migration_10.html#feature-3150)'
- en: 'References: [#2670](https://www.sqlalchemy.org/trac/ticket/2670)'
  id: totrans-1015
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2670](https://www.sqlalchemy.org/trac/ticket/2670)
- en: examples
  id: totrans-1016
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples] [feature]**'
  id: totrans-1017
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples] [feature]**'
- en: Added a new example illustrating materialized paths, using the latest relationship
    features. Example courtesy Jack Zhou.
  id: totrans-1018
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新示例，演示了使用最新的关系特性的物化路径。示例由Jack Zhou提供。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-1019
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.5
- en: '**[examples] [feature]**'
  id: totrans-1020
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples] [feature]**'
- en: A new suite of examples dedicated to providing a detailed study into performance
    of SQLAlchemy ORM and Core, as well as the DBAPI, from multiple perspectives.
    The suite runs within a container that provides built in profiling displays both
    through console output as well as graphically via the RunSnake tool.
  id: totrans-1021
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个新的示例套件，专门提供了对SQLAlchemy ORM和Core以及DBAPI性能的详细研究，从多个角度进行。该套件在一个容器中运行，通过控制台输出以及通过RunSnake工具图形显示提供内置的性能分析显示。
- en: See also
  id: totrans-1022
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Performance](../orm/examples.html#examples-performance)'
  id: totrans-1023
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[性能](../orm/examples.html#examples-performance)'
- en: '**[examples] [bug]**'
  id: totrans-1024
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples] [bug]**'
- en: Updated the [Versioning with a History Table](../orm/examples.html#examples-versioned-history)
    example such that mapped columns are re-mapped to match column names as well as
    grouping of columns; in particular, this allows columns that are explicitly grouped
    in a same-column-named joined inheritance scenario to be mapped in the same way
    in the history mappings, avoiding warnings added in the 0.9 series regarding this
    pattern and allowing the same view of attribute keys.
  id: totrans-1025
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新了[带有历史表的版本控制](../orm/examples.html#examples-versioned-history)示例，使映射列重新映射以匹配列名以及列分组；特别是，这允许在同名列继承场景中明确分组的列在历史映射中以相同方式映射，避免了0.9系列中关于此模式的警告，并允许属性键的相同视图。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-1026
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.9
- en: '**[examples] [bug]**'
  id: totrans-1027
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples] [bug]**'
- en: Fixed a bug in the examples/generic_associations/discriminator_on_association.py
    example, where the subclasses of AddressAssociation were not being mapped as “single
    table inheritance”, leading to problems when trying to use the mappings further.
  id: totrans-1028
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了示例/generic_associations/discriminator_on_association.py中的一个错误，其中AddressAssociation的子类未被映射为“单表继承”，导致在尝试进一步使用映射时出现问题。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-1029
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.9
- en: engine
  id: totrans-1030
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [feature]**'
  id: totrans-1031
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: Added new user-space accessors for viewing transaction isolation levels; [`Connection.get_isolation_level()`](../core/connections.html#sqlalchemy.engine.Connection.get_isolation_level
    "sqlalchemy.engine.Connection.get_isolation_level"), [`Connection.default_isolation_level`](../core/connections.html#sqlalchemy.engine.Connection.default_isolation_level
    "sqlalchemy.engine.Connection.default_isolation_level").
  id: totrans-1032
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了用于查看事务隔离级别的新用户空间访问器；[`Connection.get_isolation_level()`](../core/connections.html#sqlalchemy.engine.Connection.get_isolation_level
    "sqlalchemy.engine.Connection.get_isolation_level")，[`Connection.default_isolation_level`](../core/connections.html#sqlalchemy.engine.Connection.default_isolation_level
    "sqlalchemy.engine.Connection.default_isolation_level")。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-1033
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.9
- en: '**[engine] [feature]**'
  id: totrans-1034
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: Added new event `ConnectionEvents.handle_error()`, a more fully featured and
    comprehensive replacement for `ConnectionEvents.dbapi_error()`.
  id: totrans-1035
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新事件`ConnectionEvents.handle_error()`，这是对`ConnectionEvents.dbapi_error()`更全面和全面的替代。
- en: 'This change is also **backported** to: 0.9.7'
  id: totrans-1036
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.7
- en: 'References: [#3076](https://www.sqlalchemy.org/trac/ticket/3076)'
  id: totrans-1037
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3076](https://www.sqlalchemy.org/trac/ticket/3076)
- en: '**[engine] [feature]**'
  id: totrans-1038
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: A new style of warning can be emitted which will “filter” up to N occurrences
    of a parameterized string. This allows parameterized warnings that can refer to
    their arguments to be delivered a fixed number of times until allowing Python
    warning filters to squelch them, and prevents memory from growing unbounded within
    Python’s warning registries.
  id: totrans-1039
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以发出一种新的警告样式，该样式将“过滤”掉最多N次出现的参数化字符串。这允许参数化警告引用其参数，以便在固定次数内传递，直到允许Python警告过滤器将其消除，并防止内存在Python的警告注册表中无限增长。
- en: See also
  id: totrans-1040
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Session.get_bind() handles a wider variety of inheritance scenarios](migration_10.html#feature-3178)'
  id: totrans-1041
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Session.get_bind() 处理更广泛的继承场景](migration_10.html#feature-3178)'
- en: 'References: [#3178](https://www.sqlalchemy.org/trac/ticket/3178)'
  id: totrans-1042
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3178](https://www.sqlalchemy.org/trac/ticket/3178)
- en: '**[engine] [bug]**'
  id: totrans-1043
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed bug in [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") and pool where the [`Connection.invalidate()`](../core/connections.html#sqlalchemy.engine.Connection.invalidate
    "sqlalchemy.engine.Connection.invalidate") method, or an invalidation due to a
    database disconnect, would fail if the `isolation_level` parameter had been used
    with [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options"); the “finalizer” that resets
    the isolation level would be called on the no longer opened connection.
  id: totrans-1044
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")和池中的错误，当使用[`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")时，如果使用了`isolation_level`参数，则[`Connection.invalidate()`](../core/connections.html#sqlalchemy.engine.Connection.invalidate
    "sqlalchemy.engine.Connection.invalidate")方法或由于数据库断开连接而使连接无效时会失败；重置隔离级别的“finalizer”将在不再打开的连接上调用。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-1045
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**至：0.9.9
- en: 'References: [#3302](https://www.sqlalchemy.org/trac/ticket/3302)'
  id: totrans-1046
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3302](https://www.sqlalchemy.org/trac/ticket/3302)
- en: '**[engine] [bug]**'
  id: totrans-1047
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: A warning is emitted if the `isolation_level` parameter is used with [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") when a [`Transaction`](../core/connections.html#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction") is in play; DBAPIs and/or SQLAlchemy dialects
    such as psycopg2, MySQLdb may implicitly rollback or commit the transaction, or
    not change the setting til next transaction, so this is never safe.
  id: totrans-1048
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果在进行[`Transaction`](../core/connections.html#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction")时使用`isolation_level`参数与[`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")一起使用，则会发出警告；DBAPIs和/或SQLAlchemy方言（如psycopg2、MySQLdb）可能会隐式回滚或提交事务，或者在下一个事务中不更改设置，因此这永远不安全。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-1049
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**至：0.9.9
- en: 'References: [#3296](https://www.sqlalchemy.org/trac/ticket/3296)'
  id: totrans-1050
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3296](https://www.sqlalchemy.org/trac/ticket/3296)
- en: '**[engine] [bug]**'
  id: totrans-1051
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: The execution options passed to an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") either via [`create_engine.execution_options`](../core/engines.html#sqlalchemy.create_engine.params.execution_options
    "sqlalchemy.create_engine") or [`Engine.update_execution_options()`](../core/connections.html#sqlalchemy.engine.Engine.update_execution_options
    "sqlalchemy.engine.Engine.update_execution_options") are not passed to the special
    [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    used to initialize the dialect within the “first connect” event; dialects will
    usually perform their own queries in this phase, and none of the current available
    options should be applied here. In particular, the “autocommit” option was causing
    an attempt to autocommit within this initial connect which would fail with an
    AttributeError due to the non-standard state of the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").
  id: totrans-1052
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过 [`create_engine.execution_options`](../core/engines.html#sqlalchemy.create_engine.params.execution_options
    "sqlalchemy.create_engine") 或 [`Engine.update_execution_options()`](../core/connections.html#sqlalchemy.engine.Engine.update_execution_options
    "sqlalchemy.engine.Engine.update_execution_options") 传递给 [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 的执行选项不会传递给用于在“首次连接”事件中初始化方言的特殊 [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")；方言通常会在此阶段执行自己的查询，并且不应在此处应用任何当前可用的选项。特别是，“autocommit”
    选项导致在此初始连接中尝试自动提交，这将由于 [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 的非标准状态而导致 AttributeError 失败。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-1053
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.9.8
- en: 'References: [#3200](https://www.sqlalchemy.org/trac/ticket/3200)'
  id: totrans-1054
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3200](https://www.sqlalchemy.org/trac/ticket/3200)
- en: '**[engine] [bug]**'
  id: totrans-1055
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误]**'
- en: The string keys that are used to determine the columns impacted for an INSERT
    or UPDATE are now sorted when they contribute towards the “compiled cache” cache
    key. These keys were previously not deterministically ordered, meaning the same
    statement could be cached multiple times on equivalent keys, costing both in terms
    of memory as well as performance.
  id: totrans-1056
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于确定受 INSERT 或 UPDATE 影响的列的字符串键现在在它们对“编译缓存”缓存键的贡献时进行排序。这些键以前是没有确定性顺序的，这意味着相同的语句可能会根据等效键被多次缓存，这样做既消耗内存又影响性能。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-1057
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.9.8
- en: 'References: [#3165](https://www.sqlalchemy.org/trac/ticket/3165)'
  id: totrans-1058
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3165](https://www.sqlalchemy.org/trac/ticket/3165)
- en: '**[engine] [bug]**'
  id: totrans-1059
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误]**'
- en: Fixed bug which would occur if a DBAPI exception occurs when the engine first
    connects and does its initial checks, and the exception is not a disconnect exception,
    yet the cursor raises an error when we try to close it. In this case the real
    exception would be quashed as we tried to log the cursor close exception via the
    connection pool and failed, as we were trying to access the pool’s logger in a
    way that is inappropriate in this very specific scenario.
  id: totrans-1060
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，该错误可能会在引擎首次连接并执行其初始检查时发生 DBAPI 异常，并且异常不是断开连接异常，但是当我们尝试关闭游标时，游标引发错误。在这种情况下，由于我们试图通过连接池记录游标关闭异常并失败，因为我们试图以这种非常特定的方式访问池的记录器，因此真正的异常将被压制。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-1061
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.9.5
- en: 'References: [#3063](https://www.sqlalchemy.org/trac/ticket/3063)'
  id: totrans-1062
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3063](https://www.sqlalchemy.org/trac/ticket/3063)
- en: '**[engine] [bug]**'
  id: totrans-1063
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误]**'
- en: Fixed some “double invalidate” situations were detected where a connection invalidation
    could occur within an already critical section like a connection.close(); ultimately,
    these conditions are caused by the change in [#2907](https://www.sqlalchemy.org/trac/ticket/2907),
    in that the “reset on return” feature calls out to the Connection/Transaction
    in order to handle it, where “disconnect detection” might be caught. However,
    it’s possible that the more recent change in [#2985](https://www.sqlalchemy.org/trac/ticket/2985)
    made it more likely for this to be seen as the “connection invalidate” operation
    is much quicker, as the issue is more reproducible on 0.9.4 than 0.9.3.
  id: totrans-1064
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一些“双重失效”情况，其中可能会检测到连接失效，而这些连接失效可能会在已经是关键部分的情况下发生，例如连接关闭；最终，这些条件是由 [#2907](https://www.sqlalchemy.org/trac/ticket/2907)
    中的更改引起的，该更改在“返回时重置”功能中调用 Connection/Transaction 以处理它，在那里可能会被“断开连接检测”捕获。但是，可能最近对
    [#2985](https://www.sqlalchemy.org/trac/ticket/2985) 的更改使这更有可能被视为“连接失效”操作更快，因为在
    0.9.4 上更容易复现该问题而不是在 0.9.3 上。
- en: Checks are now added within any section that an invalidate might occur to halt
    further disallowed operations on the invalidated connection. This includes two
    fixes both at the engine level and at the pool level. While the issue was observed
    with highly concurrent gevent cases, it could in theory occur in any kind of scenario
    where a disconnect occurs within the connection close operation.
  id: totrans-1065
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在在可能发生无效操作的任何部分都添加了检查，以阻止在无效连接上进一步禁止的操作。这包括引擎级别和池级别的两个修复。虽然这个问题在高度并发的gevent情况下被观察到，但理论上在任何连接关闭操作中发生断开连接的情况下都可能发生。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-1066
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.9.5
- en: 'References: [#3043](https://www.sqlalchemy.org/trac/ticket/3043)'
  id: totrans-1067
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3043](https://www.sqlalchemy.org/trac/ticket/3043)
- en: '**[engine] [bug]**'
  id: totrans-1068
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: The engine-level error handling and wrapping routines will now take effect in
    all engine connection use cases, including when user-custom connect routines are
    used via the [`create_engine.creator`](../core/engines.html#sqlalchemy.create_engine.params.creator
    "sqlalchemy.create_engine") parameter, as well as when the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") encounters a connection error on revalidation.
  id: totrans-1069
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引擎级别的错误处理和包装程序现在将在所有引擎连接使用情况下生效，包括当用户自定义连接例程通过[`create_engine.creator`](../core/engines.html#sqlalchemy.create_engine.params.creator
    "sqlalchemy.create_engine")参数使用时，以及当[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")在重新验证时遇到连接错误时。
- en: See also
  id: totrans-1070
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[DBAPI exception wrapping and handle_error() event improvements](migration_10.html#change-3266)'
  id: totrans-1071
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[DBAPI异常包装和handle_error()事件改进](migration_10.html#change-3266)'
- en: 'References: [#3266](https://www.sqlalchemy.org/trac/ticket/3266)'
  id: totrans-1072
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3266](https://www.sqlalchemy.org/trac/ticket/3266)
- en: '**[engine] [bug]**'
  id: totrans-1073
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Removing (or adding) an event listener at the same time that the event is being
    run itself, either from inside the listener or from a concurrent thread, now raises
    a RuntimeError, as the collection used is now an instance of `collections.deque()`
    and does not support changes while being iterated. Previously, a plain Python
    list was used where removal from inside the event itself would produce silent
    failures.
  id: totrans-1074
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，在事件监听器被运行时同时移除（或添加）事件监听器，无论是从监听器内部还是从并发线程中，都会引发RuntimeError，因为现在使用的集合是`collections.deque()`的实例，不支持在迭代时进行更改。以前使用的是普通的Python列表，其中在事件本身内部移除将导致静默失败。
- en: 'References: [#3163](https://www.sqlalchemy.org/trac/ticket/3163)'
  id: totrans-1075
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3163](https://www.sqlalchemy.org/trac/ticket/3163)
- en: sql
  id: totrans-1076
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-1077
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Liberalized the contract for [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") a bit in that you can specify a [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") expression as the target; the index no longer
    needs to have a table-bound column present if the index is to be manually added
    to the table, either via inline declaration or via [`Table.append_constraint()`](../core/metadata.html#sqlalchemy.schema.Table.append_constraint
    "sqlalchemy.schema.Table.append_constraint").
  id: totrans-1078
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")的合同中稍微放宽了一点，现在可以将[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")表达式指定为目标；如果要手动将索引添加到表中，则索引不再需要存在绑定列，可以通过内联声明或通过[`Table.append_constraint()`](../core/metadata.html#sqlalchemy.schema.Table.append_constraint
    "sqlalchemy.schema.Table.append_constraint")添加到表中。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-1079
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.9.5
- en: 'References: [#3028](https://www.sqlalchemy.org/trac/ticket/3028)'
  id: totrans-1080
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3028](https://www.sqlalchemy.org/trac/ticket/3028)
- en: '**[sql] [feature]**'
  id: totrans-1081
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added new flag [`between.symmetric`](../core/sqlelement.html#sqlalchemy.sql.expression.between.params.symmetric
    "sqlalchemy.sql.expression.between"), when set to True renders “BETWEEN SYMMETRIC”.
    Also added a new negation operator “notbetween_op”, which now allows an expression
    like `~col.between(x, y)` to render as “col NOT BETWEEN x AND y”, rather than
    a parenthesized NOT string.
  id: totrans-1082
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新标志[`between.symmetric`](../core/sqlelement.html#sqlalchemy.sql.expression.between.params.symmetric
    "sqlalchemy.sql.expression.between")，当设置为True时，会呈现“BETWEEN SYMMETRIC”。还添加了一个新的否定运算符“notbetween_op”，现在允许像`~col.between(x,
    y)`这样的表达式呈现为“col NOT BETWEEN x AND y”，而不是带括号的NOT字符串。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-1083
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.9.5
- en: 'References: [#2990](https://www.sqlalchemy.org/trac/ticket/2990)'
  id: totrans-1084
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2990](https://www.sqlalchemy.org/trac/ticket/2990)
- en: '**[sql] [feature]**'
  id: totrans-1085
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: The SQL compiler now generates the mapping of expected columns such that they
    are matched to the received result set positionally, rather than by name. Originally,
    this was seen as a way to handle cases where we had columns returned with difficult-to-predict
    names, though in modern use that issue has been overcome by anonymous labeling.
    In this version, the approach basically reduces function call count per-result
    by a few dozen calls, or more for larger sets of result columns. The approach
    still degrades into a modern version of the old approach if any discrepancy in
    size exists between the compiled set of columns versus what was received, so there’s
    no issue for partially or fully textual compilation scenarios where these lists
    might not line up.
  id: totrans-1086
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在 SQL 编译器生成预期列的映射，使它们按位置与接收到的结果集匹配，而不是按名称。最初，这被视为处理列返回具有难以预测名称的情况的一种方式，尽管在现代使用中，通过匿名标记已经克服了这个问题。在这个版本中，该方法基本上通过减少每个结果的函数调用次数几十次，或者对于更大的结果列集合可能更多。如果编译的列集与接收到的列存在大小上的差异，该方法仍会退化为旧方法的现代版本，因此在这些列表可能不对齐的部分或完全文本编译场景中没有问题。
- en: 'References: [#918](https://www.sqlalchemy.org/trac/ticket/918)'
  id: totrans-1087
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#918](https://www.sqlalchemy.org/trac/ticket/918)
- en: '**[sql] [feature]**'
  id: totrans-1088
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [功能]**'
- en: Literal values within a [`DefaultClause`](../core/defaults.html#sqlalchemy.schema.DefaultClause
    "sqlalchemy.schema.DefaultClause"), which is invoked when using the [`Column.server_default`](../core/metadata.html#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column") parameter, will now be rendered using the “inline”
    compiler, so that they are rendered as-is, rather than as bound parameters.
  id: totrans-1089
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[`DefaultClause`](../core/defaults.html#sqlalchemy.schema.DefaultClause "sqlalchemy.schema.DefaultClause")中的字面值，当使用[`Column.server_default`](../core/metadata.html#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column")参数时被调用，现在将使用“内联”编译器进行呈现，以便它们按原样呈现，而不是作为绑定参数。
- en: See also
  id: totrans-1090
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Column server defaults now render literal values](migration_10.html#change-3087)'
  id: totrans-1091
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[列服务器默认值现在呈现字面值](migration_10.html#change-3087)'
- en: 'References: [#3087](https://www.sqlalchemy.org/trac/ticket/3087)'
  id: totrans-1092
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3087](https://www.sqlalchemy.org/trac/ticket/3087)
- en: '**[sql] [feature]**'
  id: totrans-1093
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [功能]**'
- en: The type of expression is reported when an object passed to a SQL expression
    unit can’t be interpreted as a SQL fragment; pull request courtesy Ryan P. Kelly.
  id: totrans-1094
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当传递给 SQL 表达式单元的对象无法解释为 SQL 片段时，将报告表达式的类型；感谢 Ryan P. Kelly 提交的拉取请求。
- en: '**[sql] [feature]**'
  id: totrans-1095
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [功能]**'
- en: Added a new parameter [`Table.tometadata.name`](../core/metadata.html#sqlalchemy.schema.Table.tometadata.params.name
    "sqlalchemy.schema.Table.tometadata") to the [`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata") method. Similar to [`Table.tometadata.schema`](../core/metadata.html#sqlalchemy.schema.Table.tometadata.params.schema
    "sqlalchemy.schema.Table.tometadata"), this argument causes the newly copied [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") to take on the new name instead of the existing one.
    An interesting capability this adds is that of copying a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object to the *same* [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") target with a new name. Pull request courtesy n.d.
    parker.
  id: totrans-1096
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向[`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata")方法添加了一个新参数[`Table.tometadata.name`](../core/metadata.html#sqlalchemy.schema.Table.tometadata.params.name
    "sqlalchemy.schema.Table.tometadata")。类似于[`Table.tometadata.schema`](../core/metadata.html#sqlalchemy.schema.Table.tometadata.params.schema
    "sqlalchemy.schema.Table.tometadata")，此参数使新复制的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")采用新名称而不是现有名称。这样做的一个有趣功能是可以将[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象复制到具有新名称的*相同* [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") 目标中。感谢 n.d. parker 提交的拉取请求。
- en: '**[sql] [feature]**'
  id: totrans-1097
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [功能]**'
- en: Exception messages have been spiffed up a bit. The SQL statement and parameters
    are not displayed if None, reducing confusion for error messages that weren’t
    related to a statement. The full module and classname for the DBAPI-level exception
    is displayed, making it clear that this is a wrapped DBAPI exception. The statement
    and parameters themselves are bounded within a bracketed sections to better isolate
    them from the error message and from each other.
  id: totrans-1098
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 异常消息已经稍微改进。如果为 None，则不显示 SQL 语句和参数，减少与与语句无关的错误消息的混淆。显示了 DBAPI 级别异常的完整模块和类名，清楚地表明这是一个包装的
    DBAPI 异常。语句和参数本身被限定在括号内的部分，以更好地将它们与错误消息和彼此隔离开来。
- en: 'References: [#3172](https://www.sqlalchemy.org/trac/ticket/3172)'
  id: totrans-1099
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3172](https://www.sqlalchemy.org/trac/ticket/3172)
- en: '**[sql] [feature]**'
  id: totrans-1100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: '[`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select") now includes Python and SQL-expression
    defaults if otherwise unspecified; the limitation where non- server column defaults
    aren’t included in an INSERT FROM SELECT is now lifted and these expressions are
    rendered as constants into the SELECT statement.'
  id: totrans-1101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果未另行指定，则 [`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select") 现在包括 Python 和 SQL 表达式默认值；解除了非服务器列默认值不包��在
    INSERT FROM SELECT 中的限制，并且这些表达式被渲染为常量插入到 SELECT 语句中。
- en: See also
  id: totrans-1102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[INSERT FROM SELECT now includes Python and SQL-expression defaults](migration_10.html#feature-insert-from-select-defaults)'
  id: totrans-1103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[INSERT FROM SELECT 现在包括 Python 和 SQL 表达式默认值](migration_10.html#feature-insert-from-select-defaults)'
- en: '**[sql] [feature]**'
  id: totrans-1104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: The [`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") construct is now included when reflecting
    a [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object, for databases where this is applicable. In order to achieve this with
    sufficient accuracy, MySQL and PostgreSQL now contain features that correct for
    the duplication of indexes and unique constraints when reflecting tables, indexes,
    and constraints. In the case of MySQL, there is not actually a “unique constraint”
    concept independent of a “unique index”, so for this backend [`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") continues to remain non-present for a reflected
    [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table").
    For PostgreSQL, the query used to detect indexes against `pg_index` has been improved
    to check for the same construct in `pg_constraint`, and the implicitly constructed
    unique index is not included with a reflected [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table").
  id: totrans-1105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当反射一个 [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    对象时，现在包括 [`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") 构造，适用于这些数据库。为了准确地实现这一点，MySQL 和 PostgreSQL
    现在包含了在反射表、索引和约束时纠正索引和唯一约束重复的功能。对于 MySQL，实际上没有独立于“唯一索引”的“唯一约束”概念，因此对于这个后端，反射的 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 中仍然不包含 [`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint")。对于 PostgreSQL，用于检测 `pg_index` 中的索引的查询已经改进，以检查
    `pg_constraint` 中的相同构造，并且隐式构建的唯一索引不包括在反射的 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 中。
- en: In both cases, the [`Inspector.get_indexes()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_indexes
    "sqlalchemy.engine.reflection.Inspector.get_indexes") and the [`Inspector.get_unique_constraints()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_unique_constraints
    "sqlalchemy.engine.reflection.Inspector.get_unique_constraints") methods return
    both constructs individually, but include a new token `duplicates_constraint`
    in the case of PostgreSQL or `duplicates_index` in the case of MySQL to indicate
    when this condition is detected. Pull request courtesy Johannes Erdfelt.
  id: totrans-1106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这两种情况下，[`Inspector.get_indexes()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_indexes
    "sqlalchemy.engine.reflection.Inspector.get_indexes") 和 [`Inspector.get_unique_constraints()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_unique_constraints
    "sqlalchemy.engine.reflection.Inspector.get_unique_constraints") 方法分别返回这两个构造，但在
    PostgreSQL 的情况下包括一个新的标记 `duplicates_constraint`，在 MySQL 的情况下包括一个 `duplicates_index`
    标记以指示检测到此条件时。感谢 Johannes Erdfelt 的拉取请求。
- en: See also
  id: totrans-1107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[UniqueConstraint is now part of the Table reflection process](migration_10.html#feature-3184)'
  id: totrans-1108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[唯一约束现在是表反射过程的一部分](migration_10.html#feature-3184)'
- en: 'References: [#3184](https://www.sqlalchemy.org/trac/ticket/3184)'
  id: totrans-1109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3184](https://www.sqlalchemy.org/trac/ticket/3184)
- en: '**[sql] [feature]**'
  id: totrans-1110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added new method [`Select.with_statement_hint()`](../core/selectable.html#sqlalchemy.sql.expression.Select.with_statement_hint
    "sqlalchemy.sql.expression.Select.with_statement_hint") and ORM method [`Query.with_statement_hint()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.with_statement_hint
    "sqlalchemy.orm.Query.with_statement_hint") to support statement-level hints that
    are not specific to a table.
  id: totrans-1111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新方法[`Select.with_statement_hint()`](../core/selectable.html#sqlalchemy.sql.expression.Select.with_statement_hint
    "sqlalchemy.sql.expression.Select.with_statement_hint")和ORM方法[`Query.with_statement_hint()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.with_statement_hint
    "sqlalchemy.orm.Query.with_statement_hint")，以支持不特定于表的语句级提示。
- en: 'References: [#3206](https://www.sqlalchemy.org/trac/ticket/3206)'
  id: totrans-1112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3206](https://www.sqlalchemy.org/trac/ticket/3206)
- en: '**[sql] [feature]**'
  id: totrans-1113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: The `info` parameter has been added as a constructor argument to all schema
    constructs including [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData"), [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index"), [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey"), [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint"), [`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint"), [`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint"), [`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint").
  id: totrans-1114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`info`参数已添加为所有模式构造函数的构造参数，包括[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")、[`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")、[`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey")、[`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")、[`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint")、[`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint")、[`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint")。'
- en: 'References: [#2963](https://www.sqlalchemy.org/trac/ticket/2963)'
  id: totrans-1115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2963](https://www.sqlalchemy.org/trac/ticket/2963)
- en: '**[sql] [feature]**'
  id: totrans-1116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: The [`Table.autoload_with`](../core/metadata.html#sqlalchemy.schema.Table.params.autoload_with
    "sqlalchemy.schema.Table") flag now implies that [`Table.autoload`](../core/metadata.html#sqlalchemy.schema.Table.params.autoload
    "sqlalchemy.schema.Table") should be `True`. Pull request courtesy Malik Diarra.
  id: totrans-1117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Table.autoload_with`](../core/metadata.html#sqlalchemy.schema.Table.params.autoload_with
    "sqlalchemy.schema.Table")标志现在意味着[`Table.autoload`](../core/metadata.html#sqlalchemy.schema.Table.params.autoload
    "sqlalchemy.schema.Table")应该为`True`。感谢Malik Diarra的拉取请求。'
- en: 'References: [#3027](https://www.sqlalchemy.org/trac/ticket/3027)'
  id: totrans-1118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3027](https://www.sqlalchemy.org/trac/ticket/3027)
- en: '**[sql] [feature]**'
  id: totrans-1119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: The [`Select.limit()`](../core/selectable.html#sqlalchemy.sql.expression.Select.limit
    "sqlalchemy.sql.expression.Select.limit") and [`Select.offset()`](../core/selectable.html#sqlalchemy.sql.expression.Select.offset
    "sqlalchemy.sql.expression.Select.offset") methods now accept any SQL expression,
    in addition to integer values, as arguments. Typically this is used to allow a
    bound parameter to be passed, which can be substituted with a value later thus
    allowing Python-side caching of the SQL query. The implementation here is fully
    backwards compatible with existing third party dialects, however those dialects
    which implement special LIMIT/OFFSET systems will need modification in order to
    take advantage of the new capabilities. Limit and offset also support “literal_binds”
    mode,
  id: totrans-1120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Select.limit()`](../core/selectable.html#sqlalchemy.sql.expression.Select.limit
    "sqlalchemy.sql.expression.Select.limit")和[`Select.offset()`](../core/selectable.html#sqlalchemy.sql.expression.Select.offset
    "sqlalchemy.sql.expression.Select.offset")方法现在接受任何SQL表达式作为参数，除了整数值。通常用于允许传递绑定参数，稍后可以用值替换，从而允许在Python端缓存SQL查询。这里的实现完全向后兼容现有的第三方方言，但是那些实现特殊LIMIT/OFFSET系统的方言将需要修改以利用新功能。Limit和offset还支持“literal_binds”模式，'
- en: 'References: [#3034](https://www.sqlalchemy.org/trac/ticket/3034)'
  id: totrans-1121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3034](https://www.sqlalchemy.org/trac/ticket/3034)
- en: '**[sql] [changed]**'
  id: totrans-1122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [changed]**'
- en: The [`column()`](../core/sqlelement.html#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column")
    and [`table()`](../core/selectable.html#sqlalchemy.sql.expression.table "sqlalchemy.sql.expression.table")
    constructs are now importable from the “from sqlalchemy” namespace, just like
    every other Core construct.
  id: totrans-1123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`column()`](../core/sqlelement.html#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column")
    和 [`table()`](../core/selectable.html#sqlalchemy.sql.expression.table "sqlalchemy.sql.expression.table")
    构造现在可以从“from sqlalchemy”命名空间导入，就像其他所有 Core 构造一样。'
- en: '**[sql] [changed]**'
  id: totrans-1124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [changed]**'
- en: The implicit conversion of strings to [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") constructs when passed to most builder methods
    of [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    as well as [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    now emits a warning with just the plain string sent. The textual conversion still
    proceeds normally, however. The only method that accepts a string without a warning
    are the “label reference” methods like order_by(), group_by(); these functions
    will now at compile time attempt to resolve a single string argument to a column
    or label expression present in the selectable; if none is located, the expression
    still renders, but you get the warning again. The rationale here is that the implicit
    conversion from string to text is more unexpected than not these days, and it
    is better that the user send more direction to the Core / ORM when passing a raw
    string as to what direction should be taken. Core/ORM tutorials have been updated
    to go more in depth as to how text is handled.
  id: totrans-1125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当传递给大多数 [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 的构建器方法以及 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 时，将字符串隐式转换为 [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") 构造现在会发出警告。文本转换仍然正常进行。唯一不发出警告的方法是“标签引用”方法，如 order_by()、group_by()；这些函数现在在编译时将尝试将单个字符串参数解析为可选择的列或标签表达式；如果找不到，则表达式仍然呈现，但您会再次收到警告。这里的理由是，从字符串到文本的隐式转换如今更加意外，当用户将原始字符串传递给
    Core/ORM 时，最好发送更多方向以指示应采取什么方向。Core/ORM 教程已更新，更深入地介绍了如何处理文本。
- en: See also
  id: totrans-1126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[Warnings emitted when coercing full SQL fragments into text()](migration_10.html#migration-2992)'
  id: totrans-1127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[将完整的 SQL 片段强制转换为 text() 时发出的警告](migration_10.html#migration-2992)'
- en: 'References: [#2992](https://www.sqlalchemy.org/trac/ticket/2992)'
  id: totrans-1128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2992](https://www.sqlalchemy.org/trac/ticket/2992)
- en: '**[sql] [bug]**'
  id: totrans-1129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    and other [`SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType") subclasses where direct association of the type
    with a [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    would lead to a hang when events (like create events) were emitted on the [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData").
  id: totrans-1130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    和其他 [`SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType "sqlalchemy.types.SchemaType")
    子类中修复了一个 bug，直接将该类型与 [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") 关联会导致在 [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") 上发出事件（如创建事件）时挂起。
- en: 'This change is also **backported** to: 0.9.7, 0.8.7'
  id: totrans-1131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**被反向移植**至：0.9.7、0.8.7
- en: 'References: [#3124](https://www.sqlalchemy.org/trac/ticket/3124)'
  id: totrans-1132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3124](https://www.sqlalchemy.org/trac/ticket/3124)
- en: '**[sql] [bug]**'
  id: totrans-1133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed a bug within the custom operator plus [`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") system, whereby using a [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") in conjunction with variant would fail with
    an MRO error when a comparison operator was used.
  id: totrans-1134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在自定义运算符加上 [`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") 系统中的一个 bug，使用 [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") 与 variant 时，当使用比较运算符时会失败并出现 MRO 错误。
- en: 'This change is also **backported** to: 0.9.7, 0.8.7'
  id: totrans-1135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**被反向移植**至：0.9.7、0.8.7
- en: 'References: [#3102](https://www.sqlalchemy.org/trac/ticket/3102)'
  id: totrans-1136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3102](https://www.sqlalchemy.org/trac/ticket/3102)
- en: '**[sql] [bug]**'
  id: totrans-1137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in INSERT..FROM SELECT construct where selecting from a UNION would
    wrap the union in an anonymous (e.g. unlabeled) subquery.
  id: totrans-1138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在从UNION选择时，INSERT..FROM SELECT构造中的错误，会将UNION包装在一个匿名（例如未标记）子查询中。
- en: 'This change is also **backported** to: 0.9.5, 0.8.7'
  id: totrans-1139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.5, 0.8.7
- en: 'References: [#3044](https://www.sqlalchemy.org/trac/ticket/3044)'
  id: totrans-1140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3044](https://www.sqlalchemy.org/trac/ticket/3044)
- en: '**[sql] [bug]**'
  id: totrans-1141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where [`Table.update()`](../core/metadata.html#sqlalchemy.schema.Table.update
    "sqlalchemy.schema.Table.update") and [`Table.delete()`](../core/metadata.html#sqlalchemy.schema.Table.delete
    "sqlalchemy.schema.Table.delete") would produce an empty WHERE clause when an
    empty [`and_()`](../core/sqlelement.html#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_")
    or [`or_()`](../core/sqlelement.html#sqlalchemy.sql.expression.or_ "sqlalchemy.sql.expression.or_")
    or other blank expression were applied. This is now consistent with that of [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select").
  id: totrans-1142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当应用空的[`and_()`](../core/sqlelement.html#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_")或[`or_()`](../core/sqlelement.html#sqlalchemy.sql.expression.or_
    "sqlalchemy.sql.expression.or_")或其他空表达式时，[`Table.update()`](../core/metadata.html#sqlalchemy.schema.Table.update
    "sqlalchemy.schema.Table.update")和[`Table.delete()`](../core/metadata.html#sqlalchemy.schema.Table.delete
    "sqlalchemy.schema.Table.delete")会生成一个空的WHERE子句的错误。现在与[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")的行为一致。
- en: 'This change is also **backported** to: 0.9.5, 0.8.7'
  id: totrans-1143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.5, 0.8.7
- en: 'References: [#3045](https://www.sqlalchemy.org/trac/ticket/3045)'
  id: totrans-1144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3045](https://www.sqlalchemy.org/trac/ticket/3045)
- en: '**[sql] [bug]**'
  id: totrans-1145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Added the `native_enum` flag to the `__repr__()` output of [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum"), which is mostly important when using it with Alembic
    autogenerate. Pull request courtesy Dimitris Theodorou.
  id: totrans-1146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")的`__repr__()`输出中添加了`native_enum`标志，当与Alembic
    autogenerate一起使用时，这一点非常重要。感谢Dimitris Theodorou的拉取请求。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-1147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.9
- en: '**[sql] [bug]**'
  id: totrans-1148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where using a [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") that implemented a type that was also a [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") would fail with Python’s “Cannot create a consistent
    method resolution order (MRO)” error, when any kind of SQL comparison expression
    were used against an object using this type.
  id: totrans-1149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用实现了也是[`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")的类型的[`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")会在针对使用此类型的对象使用任何类型的SQL比较表达式时，导致Python的“无法创建一致的方法解析顺序（MRO）”错误的错误。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-1150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.9
- en: 'References: [#3278](https://www.sqlalchemy.org/trac/ticket/3278)'
  id: totrans-1151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3278](https://www.sqlalchemy.org/trac/ticket/3278)
- en: '**[sql] [bug]**'
  id: totrans-1152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where the columns from a SELECT embedded in an INSERT, either through
    the values clause or as a “from select”, would pollute the column types used in
    the result set produced by the RETURNING clause when columns from both statements
    shared the same name, leading to potential errors or mis-adaptation when retrieving
    the returning rows.
  id: totrans-1153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在INSERT中嵌入的SELECT中的列，无论是通过值子句还是作为“from select”，都会在具有相同名称的两个语句的列类型中污染由RETURNING子句产生的结果集中使用的列类型，导致在检索返回行时可能出现错误或错误适应。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-1154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.9
- en: 'References: [#3248](https://www.sqlalchemy.org/trac/ticket/3248)'
  id: totrans-1155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3248](https://www.sqlalchemy.org/trac/ticket/3248)
- en: '**[sql] [bug]**'
  id: totrans-1156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where a fair number of SQL elements within the sql package would fail
    to `__repr__()` successfully, due to a missing `description` attribute that would
    then invoke a recursion overflow when an internal AttributeError would then re-invoke
    `__repr__()`.
  id: totrans-1157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了sql包中的许多SQL元素无法成功执行`__repr__()`的错误，由于缺少`description`属性，然后会调用递归溢出，当内部AttributeError再���调用`__repr__()`时。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-1158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.8
- en: 'References: [#3195](https://www.sqlalchemy.org/trac/ticket/3195)'
  id: totrans-1159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3195](https://www.sqlalchemy.org/trac/ticket/3195)
- en: '**[sql] [bug]**'
  id: totrans-1160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: An adjustment to table/index reflection such that if an index reports a column
    that isn’t found to be present in the table, a warning is emitted and the column
    is skipped. This can occur for some special system column situations as has been
    observed with Oracle.
  id: totrans-1161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整表/索引反射，如果索引报告一个在表中找不到的列，则会发出警告并跳过该列。这可能发生在一些特殊的系统列情况下，如在 Oracle 中观察到的情况。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-1162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.8
- en: 'References: [#3180](https://www.sqlalchemy.org/trac/ticket/3180)'
  id: totrans-1163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3180](https://www.sqlalchemy.org/trac/ticket/3180)
- en: '**[sql] [bug]**'
  id: totrans-1164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in CTE where `literal_binds` compiler argument would not be always
    be correctly propagated when one CTE referred to another aliased CTE in a statement.
  id: totrans-1165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 CTE 中的错误，其中当一个 CTE 引用另一个别名 CTE 时，`literal_binds` 编译器参数不会始终正确传播。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-1166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.8
- en: 'References: [#3154](https://www.sqlalchemy.org/trac/ticket/3154)'
  id: totrans-1167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3154](https://www.sqlalchemy.org/trac/ticket/3154)
- en: '**[sql] [bug]**'
  id: totrans-1168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed 0.9.7 regression caused by [#3067](https://www.sqlalchemy.org/trac/ticket/3067)
    in conjunction with a mis-named unit test such that so-called “schema” types like
    [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean")
    and [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    could no longer be pickled.
  id: totrans-1169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 0.9.7 中由[#3067](https://www.sqlalchemy.org/trac/ticket/3067)引起的回归问题，与一个错误命名的单元测试一起，使得所谓的“模式”类型如[`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean")和[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum")无法再被序列化。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-1170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.8
- en: 'References: [#3067](https://www.sqlalchemy.org/trac/ticket/3067), [#3144](https://www.sqlalchemy.org/trac/ticket/3144)'
  id: totrans-1171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3067](https://www.sqlalchemy.org/trac/ticket/3067)，[#3144](https://www.sqlalchemy.org/trac/ticket/3144)
- en: '**[sql] [bug]**'
  id: totrans-1172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fix bug in naming convention feature where using a check constraint convention
    that includes `constraint_name` would then force all [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean") and [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") types to require names as well, as these implicitly create
    a constraint, even if the ultimate target backend were one that does not require
    generation of the constraint such as PostgreSQL. The mechanics of naming conventions
    for these particular constraints has been reorganized such that the naming determination
    is done at DDL compile time, rather than at constraint/table construction time.
  id: totrans-1173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了命名约定功能中的错误，其中使用包含`constraint_name`的检查约定将强制所有[`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean")和[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum")类型也需要名称，因为这些隐式创建约束，即使最终目标后端不需要生成约束，例如 PostgreSQL。这些特定约束的命名约定机制已经重新组织，使得命名确定在
    DDL 编译时完成，而不是在约束/表构建时完成。
- en: 'This change is also **backported** to: 0.9.7'
  id: totrans-1174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.7
- en: 'References: [#3067](https://www.sqlalchemy.org/trac/ticket/3067)'
  id: totrans-1175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3067](https://www.sqlalchemy.org/trac/ticket/3067)
- en: '**[sql] [bug]**'
  id: totrans-1176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in common table expressions whereby positional bound parameters could
    be expressed in the wrong final order when CTEs were nested in certain ways.
  id: totrans-1177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了通用表达式中的错误，其中当 CTE 以某种方式嵌套时，位置绑定参数可能以错误的最终顺序表示。
- en: 'This change is also **backported** to: 0.9.7'
  id: totrans-1178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.7
- en: 'References: [#3090](https://www.sqlalchemy.org/trac/ticket/3090)'
  id: totrans-1179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3090](https://www.sqlalchemy.org/trac/ticket/3090)
- en: '**[sql] [bug]**'
  id: totrans-1180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where multi-valued [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") construct would fail to check subsequent values
    entries beyond the first one given for literal SQL expressions.
  id: totrans-1181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了多值[`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")构造中的错误，当给定字面
    SQL 表达式的第一个值后，将无法检查后续值条目。
- en: 'This change is also **backported** to: 0.9.7'
  id: totrans-1182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.7
- en: 'References: [#3069](https://www.sqlalchemy.org/trac/ticket/3069)'
  id: totrans-1183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3069](https://www.sqlalchemy.org/trac/ticket/3069)
- en: '**[sql] [bug]**'
  id: totrans-1184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Added a “str()” step to the dialect_kwargs iteration for Python version < 2.6.5,
    working around the “no unicode keyword arg” bug as these args are passed along
    as keyword args within some reflection processes.
  id: totrans-1185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 Python 版本 < 2.6.5 的 dialect_kwargs 迭代添加了一个“str()”步骤，解决了“无 unicode 关键字参数”错误，因为这些参数在某些反射过程中作为关键字参数传递。
- en: 'This change is also **backported** to: 0.9.7'
  id: totrans-1186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.7
- en: 'References: [#3123](https://www.sqlalchemy.org/trac/ticket/3123)'
  id: totrans-1187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3123](https://www.sqlalchemy.org/trac/ticket/3123)
- en: '**[sql] [bug]**'
  id: totrans-1188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The [`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") method will now accept a type class
    as an argument which is internally converted to an instance, using the same convention
    long established by other constructs such as [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column").
  id: totrans-1189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant")方法现在将接受一个类型类作为参数，该参数在内部转换为一个实例，使用其他构造（如[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")）长期建立的相同约定。'
- en: 'This change is also **backported** to: 0.9.7'
  id: totrans-1190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.7
- en: 'References: [#3122](https://www.sqlalchemy.org/trac/ticket/3122)'
  id: totrans-1191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3122](https://www.sqlalchemy.org/trac/ticket/3122)
- en: '**[sql] [bug]**'
  id: totrans-1192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The [`Column.nullable`](../core/metadata.html#sqlalchemy.schema.Column.params.nullable
    "sqlalchemy.schema.Column") flag is implicitly set to `False` when that [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") is referred to in an explicit [`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") for that table. This behavior now matches
    that of when the [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    itself has the [`Column.primary_key`](../core/metadata.html#sqlalchemy.schema.Column.params.primary_key
    "sqlalchemy.schema.Column") flag set to `True`, which is intended to be an exactly
    equivalent case.
  id: totrans-1193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当在表的显式[`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint")中引用该[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")时，[`Column.nullable`](../core/metadata.html#sqlalchemy.schema.Column.params.nullable
    "sqlalchemy.schema.Column")标志会隐式设置为`False`。此行为现在与当[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")本身的[`Column.primary_key`](../core/metadata.html#sqlalchemy.schema.Column.params.primary_key
    "sqlalchemy.schema.Column")标志设置为`True`时的行为相匹配，这意味着它们是完全等效的情况。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-1194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.5
- en: 'References: [#3023](https://www.sqlalchemy.org/trac/ticket/3023)'
  id: totrans-1195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3023](https://www.sqlalchemy.org/trac/ticket/3023)
- en: '**[sql] [bug]**'
  id: totrans-1196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where the [`Operators.__and__()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.__and__
    "sqlalchemy.sql.expression.Operators.__and__"), [`Operators.__or__()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.__or__
    "sqlalchemy.sql.expression.Operators.__or__") and [`Operators.__invert__()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.__invert__
    "sqlalchemy.sql.expression.Operators.__invert__") operator overload methods could
    not be overridden within a custom [`Comparator`](../core/type_api.html#sqlalchemy.types.TypeEngine.Comparator
    "sqlalchemy.types.TypeEngine.Comparator") implementation.
  id: totrans-1197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在自定义[`Comparator`](../core/type_api.html#sqlalchemy.types.TypeEngine.Comparator
    "sqlalchemy.types.TypeEngine.Comparator")实现中无法重写[`Operators.__and__()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.__and__
    "sqlalchemy.sql.expression.Operators.__and__")、[`Operators.__or__()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.__or__
    "sqlalchemy.sql.expression.Operators.__or__")和[`Operators.__invert__()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.__invert__
    "sqlalchemy.sql.expression.Operators.__invert__")运算符重载方法的错误。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-1198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.5
- en: 'References: [#3012](https://www.sqlalchemy.org/trac/ticket/3012)'
  id: totrans-1199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3012](https://www.sqlalchemy.org/trac/ticket/3012)
- en: '**[sql] [bug]**'
  id: totrans-1200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in new [`DialectKWArgs.argument_for()`](../core/foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") method where adding an argument
    for a construct not previously included for any special arguments would fail.
  id: totrans-1201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新的[`DialectKWArgs.argument_for()`](../core/foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for")方法中的错误，其中为以前未包含任何特殊参数的构造添加参数将失败。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-1202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.5
- en: 'References: [#3024](https://www.sqlalchemy.org/trac/ticket/3024)'
  id: totrans-1203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3024](https://www.sqlalchemy.org/trac/ticket/3024)
- en: '**[sql] [bug]**'
  id: totrans-1204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed regression introduced in 0.9 where new “ORDER BY <labelname>” feature
    from [#1068](https://www.sqlalchemy.org/trac/ticket/1068) would not apply quoting
    rules to the label name as rendered in the ORDER BY.
  id: totrans-1205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在0.9版本中引入的回归，即新的“ORDER BY <labelname>”功能从[#1068](https://www.sqlalchemy.org/trac/ticket/1068)中不会将标签名称在ORDER
    BY中呈现时应用引用规则。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-1206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.5
- en: 'References: [#1068](https://www.sqlalchemy.org/trac/ticket/1068), [#3020](https://www.sqlalchemy.org/trac/ticket/3020)'
  id: totrans-1207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1068](https://www.sqlalchemy.org/trac/ticket/1068), [#3020](https://www.sqlalchemy.org/trac/ticket/3020)
- en: '**[sql] [bug]**'
  id: totrans-1208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Restored the import for [`Function`](../core/functions.html#sqlalchemy.sql.functions.Function
    "sqlalchemy.sql.functions.Function") to the `sqlalchemy.sql.expression` import
    namespace, which was removed at the beginning of 0.9.
  id: totrans-1209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 恢复了[`Function`](../core/functions.html#sqlalchemy.sql.functions.Function "sqlalchemy.sql.functions.Function")的导入到`sqlalchemy.sql.expression`导入命名空间，该导入在0.9开始时被移除。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-1210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.9.5
- en: '**[sql] [bug]**'
  id: totrans-1211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The multi-values version of [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") has been repaired to work more usefully
    with tables that have Python- side default values and/or functions, as well as
    server-side defaults. The feature will now work with a dialect that uses “positional”
    parameters; a Python callable will also be invoked individually for each row just
    as is the case with an “executemany” style invocation; a server- side default
    column will no longer implicitly receive the value explicitly specified for the
    first row, instead refusing to invoke without an explicit value.
  id: totrans-1212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values")的多值版本已修复，以更有用地与具有Python端默认值和/或函数以及服务器端默认值的表一起使用。该功能现在将与使用“位置”参数的方言一起工作；Python可调用程序也将像“executemany”样式调用一样为每一行单独调用；服务器端默认列将不再隐式接收明确为第一行指定的值，而是拒绝在没有明确值的情况下调用。'
- en: See also
  id: totrans-1213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Python-side defaults invoked for each row individually when using a multivalued
    insert](migration_10.html#bug-3288)'
  id: totrans-1214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Python-side defaults invoked for each row individually when using a multivalued
    insert](migration_10.html#bug-3288)'
- en: 'References: [#3288](https://www.sqlalchemy.org/trac/ticket/3288)'
  id: totrans-1215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3288](https://www.sqlalchemy.org/trac/ticket/3288)
- en: '**[sql] [bug]**'
  id: totrans-1216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in [`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata") method where the [`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") associated with a [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean") or [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") type object would be doubled in the target table. The
    copy process now tracks the production of this constraint object as local to a
    type object.
  id: totrans-1217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata")方法中的错误，其中与[`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean")或[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum")类型对象关联的[`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint")会在目标表中重复。复制过程现在将此约束对象的生成跟踪为类型对象的本地对象。
- en: 'References: [#3260](https://www.sqlalchemy.org/trac/ticket/3260)'
  id: totrans-1218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3260](https://www.sqlalchemy.org/trac/ticket/3260)
- en: '**[sql] [bug]**'
  id: totrans-1219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The behavioral contract of the [`ForeignKeyConstraint.columns`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint.columns
    "sqlalchemy.schema.ForeignKeyConstraint.columns") collection has been made consistent;
    this attribute is now a [`ColumnCollection`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") like that of all other constraints
    and is initialized at the point when the constraint is associated with a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table").
  id: totrans-1220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`ForeignKeyConstraint.columns`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint.columns
    "sqlalchemy.schema.ForeignKeyConstraint.columns")集合的行为契约已经变得一致；这个属性现在像所有其他约束一样是一个[`ColumnCollection`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")，并且在约束与[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")关联时初始化。'
- en: See also
  id: totrans-1221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[ForeignKeyConstraint.columns is now a ColumnCollection](migration_10.html#change-3243)'
  id: totrans-1222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[ForeignKeyConstraint.columns 现在是 ColumnCollection](migration_10.html#change-3243)'
- en: 'References: [#3243](https://www.sqlalchemy.org/trac/ticket/3243)'
  id: totrans-1223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3243](https://www.sqlalchemy.org/trac/ticket/3243)
- en: '**[sql] [bug]**'
  id: totrans-1224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The [`Column.key`](../core/metadata.html#sqlalchemy.schema.Column.key "sqlalchemy.schema.Column.key")
    attribute is now used as the source of anonymous bound parameter names within
    expressions, to match the existing use of this value as the key when rendered
    in an INSERT or UPDATE statement. This allows [`Column.key`](../core/metadata.html#sqlalchemy.schema.Column.key
    "sqlalchemy.schema.Column.key") to be used as a “substitute” string to work around
    a difficult column name that doesn’t translate well into a bound parameter name.
    Note that the paramstyle is configurable on [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") in any case, and most DBAPIs today support a named
    and positional style.
  id: totrans-1225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Column.key`](../core/metadata.html#sqlalchemy.schema.Column.key "sqlalchemy.schema.Column.key")属性现在用作表达式内匿名绑定参数名称的源，以匹配将此值作为键渲染在INSERT或UPDATE语句中的现有用法。这允许[`Column.key`](../core/metadata.html#sqlalchemy.schema.Column.key
    "sqlalchemy.schema.Column.key")被用作“替代”字符串，以解决不太适合作为绑定参数名称的难以翻译的列名。请注意，paramstyle在任何情况下都可以在[`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")上进行配置，并且今天大多数DBAPI都支持命名和位置风格。'
- en: 'References: [#3245](https://www.sqlalchemy.org/trac/ticket/3245)'
  id: totrans-1226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#3245](https://www.sqlalchemy.org/trac/ticket/3245)
- en: '**[sql] [bug]**'
  id: totrans-1227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed the name of the [`PoolEvents.reset.dbapi_connection`](../core/events.html#sqlalchemy.events.PoolEvents.reset.params.dbapi_connection
    "sqlalchemy.events.PoolEvents.reset") parameter as passed to this event; in particular
    this affects usage of the “named” argument style for this event. Pull request
    courtesy Jason Goldberger.
  id: totrans-1228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`PoolEvents.reset.dbapi_connection`](../core/events.html#sqlalchemy.events.PoolEvents.reset.params.dbapi_connection
    "sqlalchemy.events.PoolEvents.reset")参数在传递给此事件时的名称；特别是这会影响到此事件的“命名”参数风格的使用。感谢Jason
    Goldberger提供的拉取请求。
- en: '**[sql] [bug]**'
  id: totrans-1229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Reversing a change that was made in 0.9, the “singleton” nature of the “constants”
    [`null()`](../core/sqlelement.html#sqlalchemy.sql.expression.null "sqlalchemy.sql.expression.null"),
    [`true()`](../core/sqlelement.html#sqlalchemy.sql.expression.true "sqlalchemy.sql.expression.true"),
    and [`false()`](../core/sqlelement.html#sqlalchemy.sql.expression.false "sqlalchemy.sql.expression.false")
    has been reverted. These functions returning a “singleton” object had the effect
    that different instances would be treated as the same regardless of lexical use,
    which in particular would impact the rendering of the columns clause of a SELECT
    statement.
  id: totrans-1230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 撤销了0.9版本中所做的更改，即“常量”[`null()`](../core/sqlelement.html#sqlalchemy.sql.expression.null
    "sqlalchemy.sql.expression.null")、[`true()`](../core/sqlelement.html#sqlalchemy.sql.expression.true
    "sqlalchemy.sql.expression.true")和[`false()`](../core/sqlelement.html#sqlalchemy.sql.expression.false
    "sqlalchemy.sql.expression.false")的“单例”特性已被恢复。这些函数返回“单例”对象的效果是，不论词法使用如何，不同的实例都将被视为相同，特别是会影响到SELECT语句的columns子句的渲染。
- en: See also
  id: totrans-1231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[null(), false() and true() constants are no longer singletons](migration_10.html#bug-3170)'
  id: totrans-1232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[null()、false()和true()常量不再是单例](migration_10.html#bug-3170)'
- en: 'References: [#3170](https://www.sqlalchemy.org/trac/ticket/3170)'
  id: totrans-1233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#3170](https://www.sqlalchemy.org/trac/ticket/3170)
- en: '**[sql] [bug] [engine]**'
  id: totrans-1234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [engine]**'
- en: Fixed bug where a “branched” connection, that is the kind you get when you call
    `Connection.connect()`, would not share invalidation status with the parent. The
    architecture of branching has been tweaked a bit so that the branched connection
    defers to the parent for all invalidation status and operations.
  id: totrans-1235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，在“分支”连接（当您调用`Connection.connect()`时获得的类型）不会与父连接共享失效状态的情况。分支连接的架构稍作调整，以使分支连接对于所有失效状态和操作都延迟至父连接。
- en: 'References: [#3215](https://www.sqlalchemy.org/trac/ticket/3215)'
  id: totrans-1236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#3215](https://www.sqlalchemy.org/trac/ticket/3215)
- en: '**[sql] [bug] [engine]**'
  id: totrans-1237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [engine]**'
- en: Fixed bug where a “branched” connection, that is the kind you get when you call
    `Connection.connect()`, would not share transaction status with the parent. The
    architecture of branching has been tweaked a bit so that the branched connection
    defers to the parent for all transactional status and operations.
  id: totrans-1238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，在“分支”连接（当您调用`Connection.connect()`时获得的类型）不会与父连接共享事务状态的情况。分支连接的架构稍作调整，以使分支连接对于所有事务状态和操作都延迟至父连接。
- en: 'References: [#3190](https://www.sqlalchemy.org/trac/ticket/3190)'
  id: totrans-1239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#3190](https://www.sqlalchemy.org/trac/ticket/3190)
- en: '**[sql] [bug]**'
  id: totrans-1240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Using [`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select") now implies `inline=True` on [`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert"). This helps to fix a bug where an INSERT…FROM
    SELECT construct would inadvertently be compiled as “implicit returning” on supporting
    backends, which would cause breakage in the case of an INSERT that inserts zero
    rows (as implicit returning expects a row), as well as arbitrary return data in
    the case of an INSERT that inserts multiple rows (e.g. only the first row of many).
    A similar change is also applied to an INSERT..VALUES with multiple parameter
    sets; implicit RETURNING will no longer emit for this statement either. As both
    of these constructs deal with variable numbers of rows, the `ResultProxy.inserted_primary_key`
    accessor does not apply. Previously, there was a documentation note that one may
    prefer `inline=True` with INSERT..FROM SELECT as some databases don’t support
    returning and therefore can’t do “implicit” returning, but there’s no reason an
    INSERT…FROM SELECT needs implicit returning in any case. Regular explicit [`Insert.returning()`](../core/dml.html#sqlalchemy.sql.expression.Insert.returning
    "sqlalchemy.sql.expression.Insert.returning") should be used to return variable
    numbers of result rows if inserted data is needed.
  id: totrans-1241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用[`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select")现在隐含着对[`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert")的`inline=True`设置。这有助于修复一个 bug，即在支持的后端上，INSERT…FROM
    SELECT 结构将会意外地被编译为“隐式返回”，这会导致以下问题：在插入零行的情况下（因为隐式返回期望一行），会导致断裂；在插入多行的情况下（例如多行中的第一行），会导致任意返回数据。对于具有多个参数集的INSERT..VALUES，也对此语句应用了类似的更改；对于此语句，隐式
    RETURNING 也不再被发出。由于这两个构造处理可变数量的行，因此`ResultProxy.inserted_primary_key` 访问器不适用。以前，有一个文档说明注意，在某些数据库不支持返回并且因此不能执行“隐式”返回的情况下，可能更喜欢在INSERT..FROM
    SELECT中使用`inline=True`，但在任何情况下，INSERT…FROM SELECT 都不需要隐式返回。如果需要插入的数据，应该使用常规的显式[`Insert.returning()`](../core/dml.html#sqlalchemy.sql.expression.Insert.returning
    "sqlalchemy.sql.expression.Insert.returning") 来返回可变数量的结果行。
- en: 'References: [#3169](https://www.sqlalchemy.org/trac/ticket/3169)'
  id: totrans-1242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3169](https://www.sqlalchemy.org/trac/ticket/3169)
- en: '**[sql] [enhancement]**'
  id: totrans-1243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL] [增强]**'
- en: Custom dialects that implement [`GenericTypeCompiler`](../core/internals.html#sqlalchemy.sql.compiler.GenericTypeCompiler
    "sqlalchemy.sql.compiler.GenericTypeCompiler") can now be constructed such that
    the visit methods receive an indication of the owning expression object, if any.
    Any visit method that accepts keyword arguments (e.g. `**kw`) will in most cases
    receive a keyword argument `type_expression`, referring to the expression object
    that the type is contained within. For columns in DDL, the dialect’s compiler
    class may need to alter its `get_column_specification()` method to support this
    as well. The `UserDefinedType.get_col_spec()` method will also receive `type_expression`
    if it provides `**kw` in its argument signature.
  id: totrans-1244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自定义实现[`GenericTypeCompiler`](../core/internals.html#sqlalchemy.sql.compiler.GenericTypeCompiler
    "sqlalchemy.sql.compiler.GenericTypeCompiler")的方言现在可以这样构造，使得访问方法在接收到所属表达式对象的指示时也能被调用。在大多数情况下，任何接受关键字参数（例如
    `**kw`）的访问方法都将接收到一个关键字参数 `type_expression`，指向包含该类型的表达式对象。对于DDL中的列，方言的编译器类可能需要修改其
    `get_column_specification()` 方法以支持此功能。如果`UserDefinedType.get_col_spec()`在其参数签名中提供了`**kw`，那么它也会收到
    `type_expression`。
- en: 'References: [#3074](https://www.sqlalchemy.org/trac/ticket/3074)'
  id: totrans-1245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3074](https://www.sqlalchemy.org/trac/ticket/3074)
- en: schema
  id: totrans-1246
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: '**[schema] [feature]**'
  id: totrans-1247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [功能]**'
- en: The DDL generation system of [`MetaData.create_all()`](../core/metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") and [`MetaData.drop_all()`](../core/metadata.html#sqlalchemy.schema.MetaData.drop_all
    "sqlalchemy.schema.MetaData.drop_all") has been enhanced to in most cases automatically
    handle the case of mutually dependent foreign key constraints; the need for the
    [`ForeignKeyConstraint.use_alter`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint.params.use_alter
    "sqlalchemy.schema.ForeignKeyConstraint") flag is greatly reduced. The system
    also works for constraints which aren’t given a name up front; only in the case
    of DROP is a name required for at least one of the constraints involved in the
    cycle.
  id: totrans-1248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`MetaData.create_all()`](../core/metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") 和 [`MetaData.drop_all()`](../core/metadata.html#sqlalchemy.schema.MetaData.drop_all
    "sqlalchemy.schema.MetaData.drop_all") 的 DDL 生成系统已增强，大多数情况下可以自动处理相互依赖的外键约束；[`ForeignKeyConstraint.use_alter`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint.params.use_alter
    "sqlalchemy.schema.ForeignKeyConstraint") 标志的需求大大减少。该系统还适用于事先未命名的约束；仅在 DROP 的情况下，循环中涉及的约束之一需要名称。'
- en: See also
  id: totrans-1249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[The use_alter flag on ForeignKeyConstraint is (usually) no longer needed](migration_10.html#feature-3282)'
  id: totrans-1250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[ForeignKeyConstraint 上的 use_alter 标志（通常）不再需要](migration_10.html#feature-3282)'
- en: 'References: [#3282](https://www.sqlalchemy.org/trac/ticket/3282)'
  id: totrans-1251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3282](https://www.sqlalchemy.org/trac/ticket/3282)
- en: '**[schema] [feature]**'
  id: totrans-1252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema] [feature]**'
- en: Added a new accessor [`Table.foreign_key_constraints`](../core/metadata.html#sqlalchemy.schema.Table.foreign_key_constraints
    "sqlalchemy.schema.Table.foreign_key_constraints") to complement the [`Table.foreign_keys`](../core/metadata.html#sqlalchemy.schema.Table.foreign_keys
    "sqlalchemy.schema.Table.foreign_keys") collection, as well as [`ForeignKeyConstraint.referred_table`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint.referred_table
    "sqlalchemy.schema.ForeignKeyConstraint.referred_table").
  id: totrans-1253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的访问器 [`Table.foreign_key_constraints`](../core/metadata.html#sqlalchemy.schema.Table.foreign_key_constraints
    "sqlalchemy.schema.Table.foreign_key_constraints")，以补充 [`Table.foreign_keys`](../core/metadata.html#sqlalchemy.schema.Table.foreign_keys
    "sqlalchemy.schema.Table.foreign_keys") 集合，以及 [`ForeignKeyConstraint.referred_table`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint.referred_table
    "sqlalchemy.schema.ForeignKeyConstraint.referred_table")。
- en: '**[schema] [bug]**'
  id: totrans-1254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema] [bug]**'
- en: The [`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") construct now supports naming conventions
    that include the token `%(column_0_name)s`; the constraint expression is scanned
    for columns. Additionally, naming conventions for check constraints that don’t
    include the `%(constraint_name)s` token will now work for [`SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType")- generated constraints, such as those of [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean") and [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum"); this stopped working in 0.9.7 due to [#3067](https://www.sqlalchemy.org/trac/ticket/3067).
  id: totrans-1255
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") 构造现在支持包含令牌 `%(column_0_name)s` 的命名约定；约束表达式将被扫描以获取列。此外，不包括
    `%(constraint_name)s` 令牌的检查约束的命名约定现在也适用于 [`SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType") 生成的约束，例如 [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean") 和 [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") 的约束；这在 0.9.7 中因 [#3067](https://www.sqlalchemy.org/trac/ticket/3067)
    而停止工作。'
- en: See also
  id: totrans-1256
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Naming CHECK Constraints](../core/constraints.html#naming-check-constraints)'
  id: totrans-1257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[命名 CHECK 约束](../core/constraints.html#naming-check-constraints)'
- en: '[Configuring Naming for Boolean, Enum, and other schema types](../core/constraints.html#naming-schematypes)'
  id: totrans-1258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[为布尔值、枚举和其他模式类型配置命名](../core/constraints.html#naming-schematypes)'
- en: 'References: [#3067](https://www.sqlalchemy.org/trac/ticket/3067), [#3299](https://www.sqlalchemy.org/trac/ticket/3299)'
  id: totrans-1259
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3067](https://www.sqlalchemy.org/trac/ticket/3067)，[#3299](https://www.sqlalchemy.org/trac/ticket/3299)
- en: postgresql
  id: totrans-1260
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-1261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added support for the `CONCURRENTLY` keyword with PostgreSQL indexes, established
    using `postgresql_concurrently`. Pull request courtesy Iuri de Silvio.
  id: totrans-1262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 PostgreSQL 索引的 `CONCURRENTLY` 关键字的支持，使用 `postgresql_concurrently` 建立。由
    Iuri de Silvio 提交的拉取请求。
- en: See also
  id: totrans-1263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Indexes with CONCURRENTLY](../dialects/postgresql.html#postgresql-index-concurrently)'
  id: totrans-1264
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[使用 CONCURRENTLY 的索引](../dialects/postgresql.html#postgresql-index-concurrently)'
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-1265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**已回溯**至：0.9.9
- en: '**[postgresql] [feature] [pg8000]**'
  id: totrans-1266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature] [pg8000]**'
- en: Support is added for “sane multi row count” with the pg8000 driver, which applies
    mostly to when using versioning with the ORM. The feature is version-detected
    based on pg8000 1.9.14 or greater in use. Pull request courtesy Tony Locke.
  id: totrans-1267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 pg8000 驱动程序的“合理多行计数”支持，这主要适用于在 ORM 中使用版本控制时。该功能基于使用的 pg8000 1.9.14 或更高版本进行版本检测。拉取请求由
    Tony Locke 提供。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-1268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**被回溯**至：0.9.8
- en: '**[postgresql] [feature]**'
  id: totrans-1269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added kw argument `postgresql_regconfig` to the [`ColumnOperators.match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") operator, allows the “reg config”
    argument to be specified to the `to_tsquery()` function emitted. Pull request
    courtesy Jonathan Vanasco.
  id: totrans-1270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 [`ColumnOperators.match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") 操作符添加了 kw 参数 `postgresql_regconfig`，允许指定“reg
    config”参数传递给发出的 `to_tsquery()` 函数。拉取请求由 Jonathan Vanasco 提供。
- en: 'This change is also **backported** to: 0.9.7'
  id: totrans-1271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**被回溯**至：0.9.7
- en: 'References: [#3078](https://www.sqlalchemy.org/trac/ticket/3078)'
  id: totrans-1272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3078](https://www.sqlalchemy.org/trac/ticket/3078)
- en: '**[postgresql] [feature]**'
  id: totrans-1273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added support for PostgreSQL JSONB via [`JSONB`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB
    "sqlalchemy.dialects.postgresql.JSONB"). Pull request courtesy Damian Dimmich.
  id: totrans-1274
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过 [`JSONB`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB
    "sqlalchemy.dialects.postgresql.JSONB") 增加了对 PostgreSQL JSONB 的支持。拉取请求由 Damian
    Dimmich 提供。
- en: 'This change is also **backported** to: 0.9.7'
  id: totrans-1275
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**被回溯**至：0.9.7
- en: '**[postgresql] [feature]**'
  id: totrans-1276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added support for AUTOCOMMIT isolation level when using the pg8000 DBAPI. Pull
    request courtesy Tony Locke.
  id: totrans-1277
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用 pg8000 DBAPI 时，增加了对 AUTOCOMMIT 隔离级别的支持。拉取请求由 Tony Locke 提供。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-1278
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**被回溯**至：0.9.5
- en: '**[postgresql] [feature]**'
  id: totrans-1279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added a new flag [`ARRAY.zero_indexes`](../core/type_basics.html#sqlalchemy.types.ARRAY.params.zero_indexes
    "sqlalchemy.types.ARRAY") to the PostgreSQL [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") type. When set to `True`, a value of one will be added
    to all array index values before passing to the database, allowing better interoperability
    between Python style zero-based indexes and PostgreSQL one-based indexes. Pull
    request courtesy Alexey Terentev.
  id: totrans-1280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 PostgreSQL [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")
    类型添加了一个新标志 [`ARRAY.zero_indexes`](../core/type_basics.html#sqlalchemy.types.ARRAY.params.zero_indexes
    "sqlalchemy.types.ARRAY")。当设置为 `True` 时，将在传递到数据库之前将所有数组索引值加一，以更好地在 Python 风格的零基索引和
    PostgreSQL 以一为基的索引之间进行互操作。拉取请求由 Alexey Terentev 提供。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-1281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**被回溯**至：0.9.5
- en: 'References: [#2785](https://www.sqlalchemy.org/trac/ticket/2785)'
  id: totrans-1282
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2785](https://www.sqlalchemy.org/trac/ticket/2785)
- en: '**[postgresql] [feature]**'
  id: totrans-1283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: The PG8000 dialect now supports the [`create_engine.encoding`](../core/engines.html#sqlalchemy.create_engine.params.encoding
    "sqlalchemy.create_engine") parameter, by setting up the client encoding on the
    connection which is then intercepted by pg8000\. Pull request courtesy Tony Locke.
  id: totrans-1284
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: PG8000 方言现在支持 [`create_engine.encoding`](../core/engines.html#sqlalchemy.create_engine.params.encoding
    "sqlalchemy.create_engine") 参数，通过设置连接上的客户端编码，然后被 pg8000 拦截。拉取请求由 Tony Locke 提供。
- en: '**[postgresql] [feature]**'
  id: totrans-1285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added support for PG8000’s native JSONB feature. Pull request courtesy Tony
    Locke.
  id: totrans-1286
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对 PG8000 的原生 JSONB 功能的支持。拉取请求由 Tony Locke 提供。
- en: '**[postgresql] [feature] [pypy]**'
  id: totrans-1287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature] [pypy]**'
- en: Added support for the psycopg2cffi DBAPI on pypy. Pull request courtesy shauns.
  id: totrans-1288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 pypy 上增加了对 psycopg2cffi DBAPI 的支持。拉取请求由 shauns 提供。
- en: See also
  id: totrans-1289
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[`sqlalchemy.dialects.postgresql.psycopg2cffi`](../dialects/postgresql.html#module-sqlalchemy.dialects.postgresql.psycopg2cffi
    "sqlalchemy.dialects.postgresql.psycopg2cffi")'
  id: totrans-1290
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`sqlalchemy.dialects.postgresql.psycopg2cffi`](../dialects/postgresql.html#module-sqlalchemy.dialects.postgresql.psycopg2cffi
    "sqlalchemy.dialects.postgresql.psycopg2cffi")'
- en: 'References: [#3052](https://www.sqlalchemy.org/trac/ticket/3052)'
  id: totrans-1291
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3052](https://www.sqlalchemy.org/trac/ticket/3052)
- en: '**[postgresql] [feature]**'
  id: totrans-1292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added support for the FILTER keyword as applied to aggregate functions, supported
    by PostgreSQL 9.4\. Pull request courtesy Ilja Everilä.
  id: totrans-1293
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加对 FILTER 关键字在聚合函数中的支持，由 PostgreSQL 9.4 支持。拉取请求由 Ilja Everilä 提供。
- en: See also
  id: totrans-1294
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[PostgreSQL FILTER keyword](migration_10.html#feature-gh134)'
  id: totrans-1295
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[PostgreSQL FILTER 关键字](migration_10.html#feature-gh134)'
- en: '**[postgresql] [feature]**'
  id: totrans-1296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Support has been added for reflection of materialized views and foreign tables,
    as well as support for materialized views within [`Inspector.get_view_names()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_view_names
    "sqlalchemy.engine.reflection.Inspector.get_view_names"), and a new method [`PGInspector.get_foreign_table_names()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.base.PGInspector.get_foreign_table_names
    "sqlalchemy.dialects.postgresql.base.PGInspector.get_foreign_table_names") available
    on the PostgreSQL version of [`Inspector`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector"). Pull request courtesy Rodrigo Menezes.
  id: totrans-1297
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已添加对物化视图和外部表的反射支持，以及对[`Inspector.get_view_names()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_view_names
    "sqlalchemy.engine.reflection.Inspector.get_view_names")中物化视图的支持，并在PostgreSQL版本的[`Inspector`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector")上提供了一个新方法[`PGInspector.get_foreign_table_names()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.base.PGInspector.get_foreign_table_names
    "sqlalchemy.dialects.postgresql.base.PGInspector.get_foreign_table_names")。感谢
    Rodrigo Menezes 的拉取请求。
- en: See also
  id: totrans-1298
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[PostgreSQL Dialect reflects Materialized Views, Foreign Tables](migration_10.html#feature-2891)'
  id: totrans-1299
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[PostgreSQL方言反映物化视图，外部表](migration_10.html#feature-2891)'
- en: 'References: [#2891](https://www.sqlalchemy.org/trac/ticket/2891)'
  id: totrans-1300
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2891](https://www.sqlalchemy.org/trac/ticket/2891)
- en: '**[postgresql] [feature]**'
  id: totrans-1301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added support for PG table options TABLESPACE, ON COMMIT, WITH(OUT) OIDS, and
    INHERITS, when rendering DDL via the [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") construct. Pull request courtesy malikdiarra.
  id: totrans-1302
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在通过[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")构造渲染DDL时，添加了对PG表选项TABLESPACE,
    ON COMMIT, WITH(OUT) OIDS和INHERITS的支持。感谢 malikdiarra 的拉取请求。
- en: See also
  id: totrans-1303
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[PostgreSQL Table Options](../dialects/postgresql.html#postgresql-table-options)'
  id: totrans-1304
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[PostgreSQL表选项](../dialects/postgresql.html#postgresql-table-options)'
- en: 'References: [#2051](https://www.sqlalchemy.org/trac/ticket/2051)'
  id: totrans-1305
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2051](https://www.sqlalchemy.org/trac/ticket/2051)
- en: '**[postgresql] [feature]**'
  id: totrans-1306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added new method [`PGInspector.get_enums()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.base.PGInspector.get_enums
    "sqlalchemy.dialects.postgresql.base.PGInspector.get_enums"), when using the inspector
    for PostgreSQL will provide a list of ENUM types. Pull request courtesy Ilya Pekelny.
  id: totrans-1307
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新方法[`PGInspector.get_enums()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.base.PGInspector.get_enums
    "sqlalchemy.dialects.postgresql.base.PGInspector.get_enums")，在使用PostgreSQL检查器时将提供ENUM类型列表。感谢
    Ilya Pekelny 的拉取请求���
- en: '**[postgresql] [bug]**'
  id: totrans-1308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added the `hashable=False` flag to the PG [`HSTORE`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.HSTORE
    "sqlalchemy.dialects.postgresql.HSTORE") type, which is needed to allow the ORM
    to skip over trying to “hash” an ORM-mapped HSTORE column when requesting it in
    a mixed column/entity list. Patch courtesy Gunnlaugur Þór Briem.
  id: totrans-1309
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向PG [`HSTORE`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.HSTORE
    "sqlalchemy.dialects.postgresql.HSTORE") 类型添加了`hashable=False`标志，这是为了允许ORM在请求混合列/实体列表中的ORM映射的HSTORE列时跳过“哈希”操作。补丁由Gunnlaugur
    Þór Briem提供。
- en: 'This change is also **backported** to: 0.9.5, 0.8.7'
  id: totrans-1310
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.9.5, 0.8.7
- en: 'References: [#3053](https://www.sqlalchemy.org/trac/ticket/3053)'
  id: totrans-1311
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3053](https://www.sqlalchemy.org/trac/ticket/3053)
- en: '**[postgresql] [bug]**'
  id: totrans-1312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added a new “disconnect” message “connection has been closed unexpectedly”.
    This appears to be related to newer versions of SSL. Pull request courtesy Antti
    Haapala.
  id: totrans-1313
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的“断开连接”消息“连接意外关闭”。这似乎与较新版本的SSL有关。感谢 Antti Haapala 的拉取请求。
- en: 'This change is also **backported** to: 0.9.5, 0.8.7'
  id: totrans-1314
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.9.5, 0.8.7
- en: '**[postgresql] [bug]**'
  id: totrans-1315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Repaired support for PostgreSQL UUID types in conjunction with the ARRAY type
    when using psycopg2\. The psycopg2 dialect now employs use of the psycopg2.extras.register_uuid()
    hook so that UUID values are always passed to/from the DBAPI as UUID() objects.
    The [`UUID.as_uuid`](../core/type_basics.html#sqlalchemy.types.UUID.params.as_uuid
    "sqlalchemy.types.UUID") flag is still honored, except with psycopg2 we need to
    convert returned UUID objects back into strings when this is disabled.
  id: totrans-1316
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用psycopg2时与ARRAY类型一起支持PostgreSQL UUID类型的问题。psycopg2方言现在使用psycopg2.extras.register_uuid()钩子，以便始终将UUID值作为UUID()对象传递到/从DBAPI。[`UUID.as_uuid`](../core/type_basics.html#sqlalchemy.types.UUID.params.as_uuid
    "sqlalchemy.types.UUID")标志仍然受到尊重，但是对于psycopg2，当禁用此标志时，我们需要将返回的UUID对象转换回字符串。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-1317
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.9.9
- en: 'References: [#2940](https://www.sqlalchemy.org/trac/ticket/2940)'
  id: totrans-1318
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2940](https://www.sqlalchemy.org/trac/ticket/2940)
- en: '**[postgresql] [bug]**'
  id: totrans-1319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added support for the `postgresql.JSONB` datatype when using psycopg2 2.5.4
    or greater, which features native conversion of JSONB data so that SQLAlchemy’s
    converters must be disabled; additionally, the newly added psycopg2 extension
    `extras.register_default_jsonb` is used to establish a JSON deserializer passed
    to the dialect via the `json_deserializer` argument. Also repaired the PostgreSQL
    integration tests which weren’t actually round-tripping the JSONB type as opposed
    to the JSON type. Pull request courtesy Mateusz Susik.
  id: totrans-1320
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用psycopg2 2.5.4或更高版本时，添加了对`postgresql.JSONB`数据类型的支持，该版本具有JSONB数据的本机转换，因此必须禁用SQLAlchemy的转换器；此外，还使用了新添加的psycopg2扩展`extras.register_default_jsonb`来建立通过`json_deserializer`参数传递给方言的JSON反序列化器。还修复了实际上未循环传递JSONB类型而不是JSON类型的PostgreSQL集成测试。拉取请求由Mateusz
    Susik提供。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-1321
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.9
- en: '**[postgresql] [bug]**'
  id: totrans-1322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Repaired the use of the “array_oid” flag when registering the HSTORE type with
    older psycopg2 versions < 2.4.3, which does not support this flag, as well as
    use of the native json serializer hook “register_default_json” with user-defined
    `json_deserializer` on psycopg2 versions < 2.5, which does not include native
    json.
  id: totrans-1323
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用旧版本的psycopg2 < 2.4.3注册HSTORE类型时使用“array_oid”标志的问题，该版本不支持此标志，以及在psycopg2版本
    < 2.5上使用本地json序列化器钩子“register_default_json”与用户定义的`json_deserializer`时的问题，该版本不包括本地json。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-1324
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.9
- en: '**[postgresql] [bug]**'
  id: totrans-1325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug where PostgreSQL dialect would fail to render an expression in an
    [`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    that did not correspond directly to a table-bound column; typically when a [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct was one of the expressions within
    the index; or could misinterpret the list of expressions if one or more of them
    were such an expression.
  id: totrans-1326
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了PostgreSQL方言无法在[`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")中呈现与表绑定列不直接对应的表达式的错误；通常当[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")构造是索引中的表达式之一时；或者如果其中一个或多个是这样的表达式，则可能会误解表达式列表。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-1327
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.9
- en: 'References: [#3174](https://www.sqlalchemy.org/trac/ticket/3174)'
  id: totrans-1328
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3174](https://www.sqlalchemy.org/trac/ticket/3174)
- en: '**[postgresql] [bug]**'
  id: totrans-1329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: 'A revisit to this issue first patched in 0.9.5, apparently psycopg2’s `.closed`
    accessor is not as reliable as we assumed, so we have added an explicit check
    for the exception messages “SSL SYSCALL error: Bad file descriptor” and “SSL SYSCALL
    error: EOF detected” when detecting an is-disconnect scenario. We will continue
    to consult psycopg2’s connection.closed as a first check.'
  id: totrans-1330
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '重新审视了首次在0.9.5中修补的问题，显然psycopg2的`.closed`访问器并不像我们假设的那样可靠，因此我们已经添加了对异常消息“SSL
    SYSCALL error: Bad file descriptor”和“SSL SYSCALL error: EOF detected”进行显式检查以检测断开连接的情况。我们将继续将psycopg2的connection.closed作为首要检查。'
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-1331
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.8
- en: 'References: [#3021](https://www.sqlalchemy.org/trac/ticket/3021)'
  id: totrans-1332
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3021](https://www.sqlalchemy.org/trac/ticket/3021)
- en: '**[postgresql] [bug]**'
  id: totrans-1333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: 'Fixed bug where PostgreSQL JSON type was not able to persist or otherwise render
    a SQL NULL column value, rather than a JSON-encoded `''null''`. To support this
    case, changes are as follows:'
  id: totrans-1334
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了PostgreSQL JSON类型无法持久化或以其他方式呈现SQL NULL列值而不是JSON编码的`'null'`的错误。为支持此情况，更改如下：
- en: The value [`null()`](../core/sqlelement.html#sqlalchemy.sql.expression.null
    "sqlalchemy.sql.expression.null") can now be specified, which will always result
    in a NULL value resulting in the statement.
  id: totrans-1335
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在可以指定值[`null()`](../core/sqlelement.html#sqlalchemy.sql.expression.null "sqlalchemy.sql.expression.null")，这将始终导致语句中的NULL值。
- en: A new parameter [`JSON.none_as_null`](../core/type_basics.html#sqlalchemy.types.JSON.params.none_as_null
    "sqlalchemy.types.JSON") is added, which when True indicates that the Python `None`
    value should be persisted as SQL NULL, rather than JSON-encoded `'null'`.
  id: totrans-1336
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新增了一个参数[`JSON.none_as_null`](../core/type_basics.html#sqlalchemy.types.JSON.params.none_as_null
    "sqlalchemy.types.JSON")，当为True时表示Python的`None`值应该被持久化为SQL NULL，而不是JSON编码的`'null'`。
- en: Retrieval of NULL as None is also repaired for DBAPIs other than psycopg2, namely
    pg8000.
  id: totrans-1337
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 还为除psycopg2之外的其他DBAPI修复了将NULL检索为None的问题，即pg8000。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-1338
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.8
- en: 'References: [#3159](https://www.sqlalchemy.org/trac/ticket/3159)'
  id: totrans-1339
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3159](https://www.sqlalchemy.org/trac/ticket/3159)
- en: '**[postgresql] [bug]**'
  id: totrans-1340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: The exception wrapping system for DBAPI errors can now accommodate non-standard
    DBAPI exceptions, such as the psycopg2 TransactionRollbackError. These exceptions
    will now be raised using the closest available subclass in `sqlalchemy.exc`, in
    the case of TransactionRollbackError, `sqlalchemy.exc.OperationalError`.
  id: totrans-1341
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于DBAPI错误的异常包装系统现在可以适应非标准的DBAPI异常，例如psycopg2的TransactionRollbackError。这些异常现在将使用`sqlalchemy.exc`中最接近的可用子类引发，对于TransactionRollbackError，是`sqlalchemy.exc.OperationalError`。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-1342
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.8
- en: 'References: [#3075](https://www.sqlalchemy.org/trac/ticket/3075)'
  id: totrans-1343
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3075](https://www.sqlalchemy.org/trac/ticket/3075)
- en: '**[postgresql] [bug]**'
  id: totrans-1344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug in [`array`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.array
    "sqlalchemy.dialects.postgresql.array") object where comparison to a plain Python
    list would fail to use the correct array constructor. Pull request courtesy Andrew.
  id: totrans-1345
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`array`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.array
    "sqlalchemy.dialects.postgresql.array")对象中的错误，其中与普通的Python列表进行比较会导致使用不正确的数组构造函数。感谢Andrew的拉取请求。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-1346
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.8
- en: 'References: [#3141](https://www.sqlalchemy.org/trac/ticket/3141)'
  id: totrans-1347
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3141](https://www.sqlalchemy.org/trac/ticket/3141)
- en: '**[postgresql] [bug]**'
  id: totrans-1348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added a supported [`FunctionElement.alias()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.alias
    "sqlalchemy.sql.functions.FunctionElement.alias") method to functions, e.g. the
    `func` construct. Previously, behavior for this method was undefined. The current
    behavior mimics that of pre-0.9.4, which is that the function is turned into a
    single-column FROM clause with the given alias name, where the column itself is
    anonymously named.
  id: totrans-1349
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为函数添加了支持的[`FunctionElement.alias()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.alias
    "sqlalchemy.sql.functions.FunctionElement.alias")方法，例如`func`构造。先前，此方法的行为是未定义的。当前行为模仿了0.9.4之前的行为，即将函数转换为具有给定别名的单列FROM子句，其中列本身是匿名命名的。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-1350
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.8
- en: 'References: [#3137](https://www.sqlalchemy.org/trac/ticket/3137)'
  id: totrans-1351
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3137](https://www.sqlalchemy.org/trac/ticket/3137)
- en: '**[postgresql] [bug] [pg8000]**'
  id: totrans-1352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug] [pg8000]**'
- en: Fixed bug introduced in 0.9.5 by new pg8000 isolation level feature where engine-level
    isolation level parameter would raise an error on connect.
  id: totrans-1353
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过新的pg8000隔离级别功能引入的0.9.5中的错误已被修复，其中引擎级别的隔离级别参数在连接时会引发错误。
- en: 'This change is also **backported** to: 0.9.7'
  id: totrans-1354
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.7
- en: 'References: [#3134](https://www.sqlalchemy.org/trac/ticket/3134)'
  id: totrans-1355
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3134](https://www.sqlalchemy.org/trac/ticket/3134)
- en: '**[postgresql] [bug]**'
  id: totrans-1356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: The psycopg2 `.closed` accessor is now consulted when determining if an exception
    is a “disconnect” error; ideally, this should remove the need for any other inspection
    of the exception message to detect disconnect, however we will leave those existing
    messages in place as a fallback. This should be able to handle newer cases like
    “SSL EOF” conditions. Pull request courtesy Dirk Mueller.
  id: totrans-1357
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在在确定异常是否为“断开连接”错误时，将查询psycopg2的`.closed`访问器；理想情况下，这应该消除对异常消息的任何其他检查来检测断开连接的需要，但我们将保留这些现有消息作为备用。这应该能够处理新的情况，如“SSL
    EOF”条件。感谢Dirk Mueller的拉取请求。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-1358
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.5
- en: 'References: [#3021](https://www.sqlalchemy.org/trac/ticket/3021)'
  id: totrans-1359
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3021](https://www.sqlalchemy.org/trac/ticket/3021)
- en: '**[postgresql] [bug]**'
  id: totrans-1360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: The PostgreSQL [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM") type will emit a DROP TYPE instruction
    when a plain `table.drop()` is called, assuming the object is not associated directly
    with a [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    object. In order to accommodate the use case of an enumerated type shared between
    multiple tables, the type should be associated directly with the [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object; in this case the type will only be created
    at the metadata level, or if created directly. The rules for create/drop of PostgreSQL
    enumerated types have been highly reworked in general.
  id: totrans-1361
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当调用普通 `table.drop()` 时，PostgreSQL [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM") 类型将发出 DROP TYPE 指令，假设对象未直接与 [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") 对象关联。为了适应多个表之间共享的枚举类型的用例，该类型应直接与 [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") 对象关联；在这种情况下，该类型将仅在元数据级别创建，或者如果直接创建。一般来说，已经对 PostgreSQL
    枚举类型的创建/删除规则进行了高度改写。
- en: See also
  id: totrans-1362
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Overhaul of ENUM type create/drop rules](migration_10.html#change-3319)'
  id: totrans-1363
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[ENUM 类型创建/删除规则的彻底改革](migration_10.html#change-3319)'
- en: 'References: [#3319](https://www.sqlalchemy.org/trac/ticket/3319)'
  id: totrans-1364
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3319](https://www.sqlalchemy.org/trac/ticket/3319)
- en: '**[postgresql] [bug]**'
  id: totrans-1365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: The `PGDialect.has_table()` method will now query against `pg_catalog.pg_table_is_visible(c.oid)`,
    rather than testing for an exact schema match, when the schema name is None; this
    so that the method will also illustrate that temporary tables are present. Note
    that this is a behavioral change, as PostgreSQL allows a non-temporary table to
    silently overwrite an existing temporary table of the same name, so this changes
    the behavior of `checkfirst` in that unusual scenario.
  id: totrans-1366
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`PGDialect.has_table()` 方法现在将查询 `pg_catalog.pg_table_is_visible(c.oid)`，而不是在模式名称为
    None 时测试精确的模式匹配；这样做是为了使该方法还能显示临时表的存在。请注意，这是一种行为变更，因为 PostgreSQL 允许非临时表静默地覆盖同名的现有临时表，所以这改变了
    `checkfirst` 在这种不寻常情况下的行为。'
- en: See also
  id: totrans-1367
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[PostgreSQL has_table() now works for temporary tables](migration_10.html#change-3264)'
  id: totrans-1368
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[PostgreSQL has_table() 现在适用于临时表](migration_10.html#change-3264)'
- en: 'References: [#3264](https://www.sqlalchemy.org/trac/ticket/3264)'
  id: totrans-1369
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3264](https://www.sqlalchemy.org/trac/ticket/3264)
- en: '**[postgresql] [enhancement]**'
  id: totrans-1370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [enhancement]**'
- en: Added a new type [`OID`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.OID
    "sqlalchemy.dialects.postgresql.OID") to the PostgreSQL dialect. While “oid” is
    generally a private type within PG that is not exposed in modern versions, there
    are some PG use cases such as large object support where these types might be
    exposed, as well as within some user-reported schema reflection use cases.
  id: totrans-1371
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 PostgreSQL 方言添加了新类型 [`OID`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.OID
    "sqlalchemy.dialects.postgresql.OID")。虽然“oid”通常是 PG 中的一个私有类型，在现代版本中不会公开，但在某些 PG
    使用场景中，如大型对象支持，这些类型可能会被公开，以及在一些用户报告的模式反射使用场景中。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-1372
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被 **backported** 至：0.9.5
- en: 'References: [#3002](https://www.sqlalchemy.org/trac/ticket/3002)'
  id: totrans-1373
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3002](https://www.sqlalchemy.org/trac/ticket/3002)
- en: mysql
  id: totrans-1374
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [feature]**'
  id: totrans-1375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [feature]**'
- en: The MySQL dialect now renders TIMESTAMP with NULL / NOT NULL in all cases, so
    that MySQL 5.6.6 with the `explicit_defaults_for_timestamp` flag enabled will
    will allow TIMESTAMP to continue to work as expected when `nullable=False`. Existing
    applications are unaffected as SQLAlchemy has always emitted NULL for a TIMESTAMP
    column that is `nullable=True`.
  id: totrans-1376
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL 方言现在在所有情况下都使用 NULL / NOT NULL 渲染 TIMESTAMP，因此启用了带有 `explicit_defaults_for_timestamp`
    标志的 MySQL 5.6.6 将允许 TIMESTAMP 在 `nullable=False` 时继续正常工作。现有应用程序不受影响，因为 SQLAlchemy
    总是对于 `nullable=True` 的 TIMESTAMP 列发出 NULL。
- en: See also
  id: totrans-1377
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[MySQL TIMESTAMP Type now renders NULL / NOT NULL in all cases](migration_10.html#change-3155)'
  id: totrans-1378
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[MySQL TIMESTAMP 类型现在在所有情况下渲染 NULL / NOT NULL](migration_10.html#change-3155)'
- en: '[TIMESTAMP Columns and NULL](../dialects/mysql.html#mysql-timestamp-null)'
  id: totrans-1379
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[TIMESTAMP 列和 NULL](../dialects/mysql.html#mysql-timestamp-null)'
- en: 'References: [#3155](https://www.sqlalchemy.org/trac/ticket/3155)'
  id: totrans-1380
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3155](https://www.sqlalchemy.org/trac/ticket/3155)
- en: '**[mysql] [feature]**'
  id: totrans-1381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [feature]**'
- en: Updated the “supports_unicode_statements” flag to True for MySQLdb and Pymysql
    under Python 2\. This refers to the SQL statements themselves, not the parameters,
    and affects issues such as table and column names using non-ASCII characters.
    These drivers both appear to support Python 2 Unicode objects without issue in
    modern versions.
  id: totrans-1382
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将“supports_unicode_statements”标志更新为True，适用于Python 2下的MySQLdb和Pymysql。这指的是SQL语句本身，而不是参数，影响使用非ASCII字符的表和列名等问题。这两个驱动程序在现代版本中似乎都支持Python
    2 Unicode对象而没有问题。
- en: 'References: [#3121](https://www.sqlalchemy.org/trac/ticket/3121)'
  id: totrans-1383
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3121](https://www.sqlalchemy.org/trac/ticket/3121)
- en: '**[mysql] [change]**'
  id: totrans-1384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [change]**'
- en: The `gaerdbms` dialect is no longer necessary, and emits a deprecation warning.
    Google now recommends using the MySQLdb dialect directly.
  id: totrans-1385
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`gaerdbms` 方言不再必要，并发出弃用警告。Google现在建议直接使用MySQLdb方言。'
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-1386
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.9
- en: 'References: [#3275](https://www.sqlalchemy.org/trac/ticket/3275)'
  id: totrans-1387
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3275](https://www.sqlalchemy.org/trac/ticket/3275)
- en: '**[mysql] [bug]**'
  id: totrans-1388
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: MySQL error 2014 “commands out of sync” appears to be raised as a ProgrammingError,
    not OperationalError, in modern MySQL-Python versions; all MySQL error codes that
    are tested for “is disconnect” are now checked within OperationalError and ProgrammingError
    regardless.
  id: totrans-1389
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL错误2014“命令不同步”似乎在现代MySQL-Python版本中引发ProgrammingError而不是OperationalError；现在在OperationalError和ProgrammingError中都检查了所有测试“is
    disconnect”的MySQL错误代码。
- en: 'This change is also **backported** to: 0.9.7, 0.8.7'
  id: totrans-1390
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.7, 0.8.7
- en: 'References: [#3101](https://www.sqlalchemy.org/trac/ticket/3101)'
  id: totrans-1391
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3101](https://www.sqlalchemy.org/trac/ticket/3101)
- en: '**[mysql] [bug]**'
  id: totrans-1392
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed bug where column names added to `mysql_length` parameter on an index needed
    to have the same quoting for quoted names in order to be recognized. The fix makes
    the quotes optional but also provides the old behavior for backwards compatibility
    with those using the workaround.
  id: totrans-1393
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在索引的`mysql_length`参数上添加列名时需要具有相同引号才能被识别的错误。修复使引号变为可选，但也为那些使用此解决方法的人提供了旧的行为以实现向后兼容。
- en: 'This change is also **backported** to: 0.9.5, 0.8.7'
  id: totrans-1394
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.5, 0.8.7
- en: 'References: [#3085](https://www.sqlalchemy.org/trac/ticket/3085)'
  id: totrans-1395
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3085](https://www.sqlalchemy.org/trac/ticket/3085)
- en: '**[mysql] [bug]**'
  id: totrans-1396
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Added support for reflecting tables where an index includes KEY_BLOCK_SIZE using
    an equal sign. Pull request courtesy Sean McGivern.
  id: totrans-1397
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了支持通过等号包含KEY_BLOCK_SIZE的索引来反射表的功能。拉取请求由Sean McGivern提供。
- en: 'This change is also **backported** to: 0.9.5, 0.8.7'
  id: totrans-1398
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.5, 0.8.7
- en: '**[mysql] [bug]**'
  id: totrans-1399
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Added a version check to the MySQLdb dialect surrounding the check for ‘utf8_bin’
    collation, as this fails on MySQL server < 5.0.
  id: totrans-1400
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在MySQLdb方言周围添加了一个版本检查，用于检查‘utf8_bin’校对，因为这在MySQL服务器<5.0上失败。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-1401
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.9
- en: 'References: [#3274](https://www.sqlalchemy.org/trac/ticket/3274)'
  id: totrans-1402
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3274](https://www.sqlalchemy.org/trac/ticket/3274)
- en: '**[mysql] [bug] [mysqlconnector]**'
  id: totrans-1403
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug] [mysqlconnector]**'
- en: Mysqlconnector as of version 2.0, probably as a side effect of the python 3
    merge, now does not expect percent signs (e.g. as used as the modulus operator
    and others) to be doubled, even when using the “pyformat” bound parameter format
    (this change is not documented by Mysqlconnector). The dialect now checks for
    py2k and for mysqlconnector less than version 2.0 when detecting if the modulus
    operator should be rendered as `%%` or `%`.
  id: totrans-1404
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本2.0开始，Mysqlconnector可能作为Python 3合并的副作用，现在不再期望百分号（例如用作模运算符等）被加倍，即使使用“pyformat”绑定参数格式（Mysqlconnector未记录此更改）。方言现在在检测模运算符应该呈现为`%%`还是`%`时检查py2k和mysqlconnector小于版本2.0。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-1405
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.8
- en: '**[mysql] [bug] [mysqlconnector]**'
  id: totrans-1406
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug] [mysqlconnector]**'
- en: Unicode SQL is now passed for MySQLconnector version 2.0 and above; for Py2k
    and MySQL < 2.0, strings are encoded.
  id: totrans-1407
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Unicode SQL现在传递给MySQLconnector版本2.0及以上；对于Py2k和MySQL < 2.0，字符串被编码。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-1408
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.8
- en: '**[mysql] [bug]**'
  id: totrans-1409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: The MySQL dialect now supports CAST on types that are constructed as [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") objects.
  id: totrans-1410
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL方言现在支持在构造为[`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")对象的类型上进行CAST。
- en: '**[mysql] [bug]**'
  id: totrans-1411
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: A warning is emitted when [`cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.cast
    "sqlalchemy.sql.expression.cast") is used with the MySQL dialect on a type where
    MySQL does not support CAST; MySQL only supports CAST on a subset of datatypes.
    SQLAlchemy has for a long time just omitted the CAST for unsupported types in
    the case of MySQL. While we don’t want to change this now, we emit a warning to
    show that it’s taken place. A warning is also emitted when a CAST is used with
    an older MySQL version (< 4) that doesn’t support CAST at all, it’s skipped in
    this case as well.
  id: totrans-1412
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当在MySQL方言上使用[`cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.cast
    "sqlalchemy.sql.expression.cast")时，如果MySQL不支持CAST的类型，则会发出警告；MySQL仅支持对部分数据类型进行CAST。长期以来，SQLAlchemy在MySQL的情况下对不支持的类型忽略了CAST。虽然我们现在不想改变这一点，但我们会发出警告以显示已经发生的情况。当使用旧版本的MySQL（<
    4）不支持CAST时，也会发出警告，在这种情况下也会被跳过。
- en: 'References: [#3237](https://www.sqlalchemy.org/trac/ticket/3237)'
  id: totrans-1413
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3237](https://www.sqlalchemy.org/trac/ticket/3237)
- en: '**[mysql] [bug]**'
  id: totrans-1414
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: The [`SET`](../dialects/mysql.html#sqlalchemy.dialects.mysql.SET "sqlalchemy.dialects.mysql.SET")
    type has been overhauled to no longer assume that the empty string, or a set with
    a single empty string value, is in fact a set with a single empty string; instead,
    this is by default treated as the empty set. In order to handle persistence of
    a [`SET`](../dialects/mysql.html#sqlalchemy.dialects.mysql.SET "sqlalchemy.dialects.mysql.SET")
    that actually wants to include the blank value `''` as a legitimate value, a new
    bitwise operational mode is added which is enabled by the [`SET.retrieve_as_bitwise`](../dialects/mysql.html#sqlalchemy.dialects.mysql.SET.params.retrieve_as_bitwise
    "sqlalchemy.dialects.mysql.SET") flag, which will persist and retrieve values
    unambiguously using their bitflag positioning. Storage and retrieval of unicode
    values for driver configurations that aren’t converting unicode natively is also
    repaired.
  id: totrans-1415
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`SET`](../dialects/mysql.html#sqlalchemy.dialects.mysql.SET "sqlalchemy.dialects.mysql.SET")类型已经进行了改进，不再假定空字符串或具有单个空字符串值的集合实际上是具有单个空字符串的集合；相反，默认情况下将其视为空集。为了处理实际希望将空值`''''`包含为合法值的[`SET`](../dialects/mysql.html#sqlalchemy.dialects.mysql.SET
    "sqlalchemy.dialects.mysql.SET")的持久性，添加了一种新的按位操作模式，通过[`SET.retrieve_as_bitwise`](../dialects/mysql.html#sqlalchemy.dialects.mysql.SET.params.retrieve_as_bitwise
    "sqlalchemy.dialects.mysql.SET")标志启用，将使用其位标志位置持久化和检索值。还修复了对于未原生转换Unicode的驱动程序配置的Unicode值的存储和检索。'
- en: See also
  id: totrans-1416
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[MySQL SET Type Overhauled to support empty sets, unicode, blank value handling](migration_10.html#change-3283)'
  id: totrans-1417
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[MySQL SET类型进行了改进，支持空集，Unicode，空值处理](migration_10.html#change-3283)'
- en: 'References: [#3283](https://www.sqlalchemy.org/trac/ticket/3283)'
  id: totrans-1418
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3283](https://www.sqlalchemy.org/trac/ticket/3283)
- en: '**[mysql] [bug]**'
  id: totrans-1419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: The [`ColumnOperators.match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") operator is now handled such
    that the return type is not strictly assumed to be boolean; it now returns a [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean") subclass called [`MatchType`](../core/type_basics.html#sqlalchemy.types.MatchType
    "sqlalchemy.types.MatchType"). The type will still produce boolean behavior when
    used in Python expressions, however the dialect can override its behavior at result
    time. In the case of MySQL, while the MATCH operator is typically used in a boolean
    context within an expression, if one actually queries for the value of a match
    expression, a floating point value is returned; this value is not compatible with
    SQLAlchemy’s C-based boolean processor, so MySQL’s result-set behavior now follows
    that of the [`Float`](../core/type_basics.html#sqlalchemy.types.Float "sqlalchemy.types.Float")
    type. A new operator object `notmatch_op` is also added to better allow dialects
    to define the negation of a match operation.
  id: totrans-1420
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match")操作现在处理方式已更改，不再严格假定返回类型为布尔值；现在返回一个名为[`MatchType`](../core/type_basics.html#sqlalchemy.types.MatchType
    "sqlalchemy.types.MatchType")的[`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean")子类。当在Python表达式中使用时，该类型仍会产生布尔行为，但方言可以在结果时间覆盖其行为。在MySQL的情况下，虽然MATCH操作通常在表达式中的布尔上下文中使用，但如果实际查询匹配表达式的值，则会返回一个浮点值；此值与SQLAlchemy的基于C的布尔处理器不兼容，因此MySQL的结果集行为现在遐照[`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float")类型。还添加了一个新的操作对象`notmatch_op`，以更好地允许方言定义匹配操作的否定。'
- en: See also
  id: totrans-1421
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[The match() operator now returns an agnostic MatchType compatible with MySQL’s
    floating point return value](migration_10.html#change-3263)'
  id: totrans-1422
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[match()运算符现在返回与MySQL的浮点返回值兼容的MatchType](migration_10.html#change-3263)'
- en: 'References: [#3263](https://www.sqlalchemy.org/trac/ticket/3263)'
  id: totrans-1423
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3263](https://www.sqlalchemy.org/trac/ticket/3263)
- en: '**[mysql] [bug]**'
  id: totrans-1424
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: MySQL boolean symbols “true”, “false” work again. 0.9’s change in [#2682](https://www.sqlalchemy.org/trac/ticket/2682)
    disallowed the MySQL dialect from making use of the “true” and “false” symbols
    in the context of “IS” / “IS NOT”, but MySQL supports this syntax even though
    it has no boolean type. MySQL remains “non native boolean”, but the [`true()`](../core/sqlelement.html#sqlalchemy.sql.expression.true
    "sqlalchemy.sql.expression.true") and [`false()`](../core/sqlelement.html#sqlalchemy.sql.expression.false
    "sqlalchemy.sql.expression.false") symbols again produce the keywords “true” and
    “false”, so that an expression like `column.is_(true())` again works on MySQL.
  id: totrans-1425
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL布尔符号“true”、“false”再次有效。0.9中的更改[#2682](https://www.sqlalchemy.org/trac/ticket/2682)禁止了MySQL方言在“IS”/“IS
    NOT”上下文中使用“true”和“false”符号，但MySQL支持此语法，即使它没有布尔类型。MySQL仍然是“非本地布尔”，但[`true()`](../core/sqlelement.html#sqlalchemy.sql.expression.true
    "sqlalchemy.sql.expression.true")和[`false()`](../core/sqlelement.html#sqlalchemy.sql.expression.false
    "sqlalchemy.sql.expression.false")符号再次生成关键字“true”和“false”，因此像`column.is_(true())`这样的表达式在MySQL上再次有效。
- en: See also
  id: totrans-1426
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[MySQL boolean symbols “true”, “false” work again](migration_10.html#bug-3186)'
  id: totrans-1427
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[MySQL布尔符号“true”、“false”再次有效](migration_10.html#bug-3186)'
- en: 'References: [#3186](https://www.sqlalchemy.org/trac/ticket/3186)'
  id: totrans-1428
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3186](https://www.sqlalchemy.org/trac/ticket/3186)
- en: '**[mysql] [bug]**'
  id: totrans-1429
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: The MySQL dialect will now disable `ConnectionEvents.handle_error()` events
    from firing for those statements which it uses internally to detect if a table
    exists or not. This is achieved using an execution option `skip_user_error_events`
    that disables the handle error event for the scope of that execution. In this
    way, user code that rewrites exceptions doesn’t need to worry about the MySQL
    dialect or other dialects that occasionally need to catch SQLAlchemy specific
    exceptions.
  id: totrans-1430
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL方言现在将禁用`ConnectionEvents.handle_error()`事件，用于检测表是否存在的内部语句不会触发该事件。这是通过使用执行选项`skip_user_error_events`来实现的，该选项在该执行范围内禁用处理错误事件。这样，重写异常的用户代码不需要担心MySQL方言或其他偶尔需要捕获SQLAlchemy特定异常的方言。
- en: '**[mysql] [bug]**'
  id: totrans-1431
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Changed the default value of “raise_on_warnings” to False for MySQLconnector.
    This was set at True for some reason. The “buffered” flag unfortunately must stay
    at True as MySQLconnector does not allow a cursor to be closed unless all results
    are fully fetched.
  id: totrans-1432
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将“raise_on_warnings”的默认值更改为False，以用于MySQLconnector。由于某种原因，此值设置为True。不幸的是，“buffered”标志必须保持为True，因为MySQLconnector不允许关闭游标，除非所有结果都完全获取。
- en: 'References: [#2515](https://www.sqlalchemy.org/trac/ticket/2515)'
  id: totrans-1433
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2515](https://www.sqlalchemy.org/trac/ticket/2515)
- en: sqlite
  id: totrans-1434
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [feature]**'
  id: totrans-1435
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [feature]**'
- en: Added support for partial indexes (e.g. with a WHERE clause) on SQLite. Pull
    request courtesy Kai Groner.
  id: totrans-1436
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对SQLite上部分索引（例如带有WHERE子句）的支持。感谢Kai Groner的拉取请求。
- en: See also
  id: totrans-1437
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Partial Indexes](../dialects/sqlite.html#sqlite-partial-index)'
  id: totrans-1438
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[部分索引](../dialects/sqlite.html#sqlite-partial-index)'
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-1439
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.9
- en: '**[sqlite] [feature]**'
  id: totrans-1440
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [feature]**'
- en: Added a new SQLite backend for the SQLCipher backend. This backend provides
    for encrypted SQLite databases using the pysqlcipher Python driver, which is very
    similar to the pysqlite driver.
  id: totrans-1441
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为SQLCipher后端添加了一个新的SQLite后端。该后端使用pysqlcipher Python驱动程序提供加密的SQLite数据库，该驱动程序与pysqlite驱动程序非常相似。
- en: See also
  id: totrans-1442
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`pysqlcipher`](../dialects/sqlite.html#module-sqlalchemy.dialects.sqlite.pysqlcipher
    "sqlalchemy.dialects.sqlite.pysqlcipher")'
  id: totrans-1443
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`pysqlcipher`](../dialects/sqlite.html#module-sqlalchemy.dialects.sqlite.pysqlcipher
    "sqlalchemy.dialects.sqlite.pysqlcipher")'
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-1444
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.9
- en: '**[sqlite] [bug]**'
  id: totrans-1445
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: When selecting from a UNION using an attached database file, the pysqlite driver
    reports column names in cursor.description as ‘dbname.tablename.colname’, instead
    of ‘tablename.colname’ as it normally does for a UNION (note that it’s supposed
    to just be ‘colname’ for both, but we work around it). The column translation
    logic here has been adjusted to retrieve the rightmost token, rather than the
    second token, so it works in both cases. Workaround courtesy Tony Roberts.
  id: totrans-1446
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当从附加的数据库文件使用 UNION 进行选择时，pysqlite 驱动程序将列名在 cursor.description 中报告为 'dbname.tablename.colname'，而不是通常对于
    UNION 的 'tablename.colname'（请注意，对于两者都应该只是 'colname'，但我们对此进行了处理）。此处的列翻译逻辑已经调整为检索最右边的标记，而不是第二个标记，因此在两种情况下都有效。解决方法由
    Tony Roberts 提供。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-1447
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**至：0.9.8
- en: 'References: [#3211](https://www.sqlalchemy.org/trac/ticket/3211)'
  id: totrans-1448
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3211](https://www.sqlalchemy.org/trac/ticket/3211)
- en: '**[sqlite] [bug]**'
  id: totrans-1449
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Fixed a SQLite join rewriting issue where a subquery that is embedded as a scalar
    subquery such as within an IN would receive inappropriate substitutions from the
    enclosing query, if the same table were present inside the subquery as were in
    the enclosing query such as in a joined inheritance scenario.
  id: totrans-1450
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 SQLite 加入重写问题，其中作为标量子查询嵌入的子查询（例如在 IN 中）会从包含查询中接收不适当的替换，如果相同的表在子查询中存在并且在包含查询中也存在，例如在连接继承场景中。
- en: 'This change is also **backported** to: 0.9.7'
  id: totrans-1451
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**至：0.9.7
- en: 'References: [#3130](https://www.sqlalchemy.org/trac/ticket/3130)'
  id: totrans-1452
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3130](https://www.sqlalchemy.org/trac/ticket/3130)
- en: '**[sqlite] [bug]**'
  id: totrans-1453
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: UNIQUE and FOREIGN KEY constraints are now fully reflected on SQLite both with
    and without names. Previously, foreign key names were ignored and unnamed unique
    constraints were skipped. Thanks to Jon Nelson for assistance with this.
  id: totrans-1454
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在在 SQLite 上完全反映了 UNIQUE 和 FOREIGN KEY 约束，无论是否有名称。以前，外键名称被忽略，未命名的唯一约束被跳过。感谢
    Jon Nelson 协助解决此问题。
- en: 'References: [#3244](https://www.sqlalchemy.org/trac/ticket/3244), [#3261](https://www.sqlalchemy.org/trac/ticket/3261)'
  id: totrans-1455
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3244](https://www.sqlalchemy.org/trac/ticket/3244), [#3261](https://www.sqlalchemy.org/trac/ticket/3261)
- en: '**[sqlite] [bug]**'
  id: totrans-1456
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: The SQLite dialect, when using the [`DATE`](../dialects/sqlite.html#sqlalchemy.dialects.sqlite.DATE
    "sqlalchemy.dialects.sqlite.DATE"), [`TIME`](../dialects/sqlite.html#sqlalchemy.dialects.sqlite.TIME
    "sqlalchemy.dialects.sqlite.TIME"), or [`DATETIME`](../dialects/sqlite.html#sqlalchemy.dialects.sqlite.DATETIME
    "sqlalchemy.dialects.sqlite.DATETIME") types, and given a `storage_format` that
    only renders numbers, will render the types in DDL as `DATE_CHAR`, `TIME_CHAR`,
    and `DATETIME_CHAR`, so that despite the lack of alpha characters in the values,
    the column will still deliver the “text affinity”. Normally this is not needed,
    as the textual values within the default storage formats already imply text.
  id: totrans-1457
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用 [`DATE`](../dialects/sqlite.html#sqlalchemy.dialects.sqlite.DATE "sqlalchemy.dialects.sqlite.DATE")、[`TIME`](../dialects/sqlite.html#sqlalchemy.dialects.sqlite.TIME
    "sqlalchemy.dialects.sqlite.TIME") 或 [`DATETIME`](../dialects/sqlite.html#sqlalchemy.dialects.sqlite.DATETIME
    "sqlalchemy.dialects.sqlite.DATETIME") 类型的 SQLite 方言，并给定一个只呈现数字的 `storage_format`，将在
    DDL 中将类型呈现为 `DATE_CHAR`、`TIME_CHAR` 和 `DATETIME_CHAR`，以便尽管值中缺少字母字符，列仍会提供“文本亲和性”。通常情况下，这是不需要的，因为默认存储格式中的文本值已经暗示了文本。
- en: See also
  id: totrans-1458
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Date and Time Types](../dialects/sqlite.html#sqlite-datetime)'
  id: totrans-1459
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[日期和时间类型](../dialects/sqlite.html#sqlite-datetime)'
- en: 'References: [#3257](https://www.sqlalchemy.org/trac/ticket/3257)'
  id: totrans-1460
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3257](https://www.sqlalchemy.org/trac/ticket/3257)
- en: '**[sqlite] [bug]**'
  id: totrans-1461
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: SQLite now supports reflection of unique constraints from temp tables; previously,
    this would fail with a TypeError. Pull request courtesy Johannes Erdfelt.
  id: totrans-1462
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLite 现在支持从临时表反射唯一约束；以前，这将导致 TypeError。拉取请求由 Johannes Erdfelt 提供。
- en: See also
  id: totrans-1463
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[SQLite/Oracle have distinct methods for temporary table/view name reporting](migration_10.html#change-3204)
    - changes regarding SQLite temporary table and view reflection.'
  id: totrans-1464
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[SQLite/Oracle 有不同的临时表/视图名称报告方法](migration_10.html#change-3204) - 关于 SQLite
    临时表和视图反射的更改。'
- en: 'References: [#3203](https://www.sqlalchemy.org/trac/ticket/3203)'
  id: totrans-1465
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3203](https://www.sqlalchemy.org/trac/ticket/3203)
- en: '**[sqlite] [bug]**'
  id: totrans-1466
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Added [`Inspector.get_temp_table_names()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_temp_table_names
    "sqlalchemy.engine.reflection.Inspector.get_temp_table_names") and [`Inspector.get_temp_view_names()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_temp_view_names
    "sqlalchemy.engine.reflection.Inspector.get_temp_view_names"); currently, only
    the SQLite and Oracle dialects support these methods. The return of temporary
    table and view names has been **removed** from SQLite and Oracle’s version of
    [`Inspector.get_table_names()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_table_names
    "sqlalchemy.engine.reflection.Inspector.get_table_names") and [`Inspector.get_view_names()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_view_names
    "sqlalchemy.engine.reflection.Inspector.get_view_names"); other database backends
    cannot support this information (such as MySQL), and the scope of operation is
    different in that the tables can be local to a session and typically aren’t supported
    in remote schemas.
  id: totrans-1467
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了[`Inspector.get_temp_table_names()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_temp_table_names
    "sqlalchemy.engine.reflection.Inspector.get_temp_table_names")和[`Inspector.get_temp_view_names()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_temp_view_names
    "sqlalchemy.engine.reflection.Inspector.get_temp_view_names")；目前，只有 SQLite 和 Oracle
    方言支持这些方法。临时表和视图名称的返回已从 SQLite 和 Oracle 版本的[`Inspector.get_table_names()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_table_names
    "sqlalchemy.engine.reflection.Inspector.get_table_names")和[`Inspector.get_view_names()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_view_names
    "sqlalchemy.engine.reflection.Inspector.get_view_names")中**移除**；其他数据库后端不支持此信息（如
    MySQL），操作范围也不同，因为表可以是会话本地的，通常不支持远程模式中的表。
- en: See also
  id: totrans-1468
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[SQLite/Oracle have distinct methods for temporary table/view name reporting](migration_10.html#change-3204)'
  id: totrans-1469
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[SQLite/Oracle 有不同的方法用于临时表/视图名称报告](migration_10.html#change-3204)'
- en: 'References: [#3204](https://www.sqlalchemy.org/trac/ticket/3204)'
  id: totrans-1470
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3204](https://www.sqlalchemy.org/trac/ticket/3204)
- en: mssql
  id: totrans-1471
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [feature]**'
  id: totrans-1472
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [功能]**'
- en: Enabled “multivalues insert” for SQL Server 2008\. Pull request courtesy Albert
    Cervin. Also expanded the checks for “IDENTITY INSERT” mode to include when the
    identity key is present in the VALUEs clause of the statement.
  id: totrans-1473
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 SQL Server 2008 启用了“多值插入”。感谢 Albert Cervin 提供的拉取请求。还扩展了“IDENTITY INSERT”模式的检查，以包括当标识键出现在语句的
    VALUEs 子句中时。
- en: 'This change is also **backported** to: 0.9.7'
  id: totrans-1474
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这一变更也被**回溯**到：0.9.7
- en: '**[mssql] [feature]**'
  id: totrans-1475
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [功能]**'
- en: SQL Server 2012 now recommends VARCHAR(max), NVARCHAR(max), VARBINARY(max) for
    large text/binary types. The MSSQL dialect will now respect this based on version
    detection, as well as the new `deprecate_large_types` flag.
  id: totrans-1476
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQL Server 2012 现在推荐对于大文本/二进制类型使用 VARCHAR(max)、NVARCHAR(max)、VARBINARY(max)。MSSQL
    方言现在会根据版本检测以及新的`deprecate_large_types`标志来尊重这一点。
- en: See also
  id: totrans-1477
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Large Text/Binary Type Deprecation](../dialects/mssql.html#mssql-large-type-deprecation)'
  id: totrans-1478
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[大文本/二进制类型弃用](../dialects/mssql.html#mssql-large-type-deprecation)'
- en: 'References: [#3039](https://www.sqlalchemy.org/trac/ticket/3039)'
  id: totrans-1479
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3039](https://www.sqlalchemy.org/trac/ticket/3039)
- en: '**[mssql] [changed]**'
  id: totrans-1480
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [更改]**'
- en: The hostname-based connection format for SQL Server when using pyodbc will no
    longer specify a default “driver name”, and a warning is emitted if this is missing.
    The optimal driver name for SQL Server changes frequently and is per-platform,
    so hostname based connections need to specify this. DSN-based connections are
    preferred.
  id: totrans-1481
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用 pyodbc 时，基于主机名的 SQL Server 连接格式将不再指定默认的“驱动程序名称”，如果缺少此项将会发出警告。SQL Server
    的最佳驱动程序名称经常变化且因平台而异，因此基于主机名的连接需要指定此项。优先使用 DSN-based 连接。
- en: See also
  id: totrans-1482
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[PyODBC driver name is required with hostname-based SQL Server connections](migration_10.html#change-3182)'
  id: totrans-1483
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[PyODBC 驱动程序名称在基于主机名的 SQL Server 连接中是必需的](migration_10.html#change-3182)'
- en: 'References: [#3182](https://www.sqlalchemy.org/trac/ticket/3182)'
  id: totrans-1484
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3182](https://www.sqlalchemy.org/trac/ticket/3182)
- en: '**[mssql] [bug]**'
  id: totrans-1485
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [错误]**'
- en: Added statement encoding to the “SET IDENTITY_INSERT” statements which operate
    when an explicit INSERT is being interjected into an IDENTITY column, to support
    non-ascii table identifiers on drivers such as pyodbc + unix + py2k that don’t
    support unicode statements.
  id: totrans-1486
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在“SET IDENTITY_INSERT”语句中添加了语句编码，当在 IDENTITY 列中插入显式 INSERT 时，以支持在不支持 Unicode
    语句的驱动程序（如 pyodbc + unix + py2k）上使用非 ASCII 表标识符。
- en: 'This change is also **backported** to: 0.9.7, 0.8.7'
  id: totrans-1487
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这一变更也被**回溯**到：0.9.7, 0.8.7
- en: '**[mssql] [bug]**'
  id: totrans-1488
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [错误]**'
- en: In the SQL Server pyodbc dialect, repaired the implementation for the `description_encoding`
    dialect parameter, which when not explicitly set was preventing cursor.description
    from being parsed correctly in the case of result sets that contained names in
    alternate encodings. This parameter shouldn’t be needed going forward.
  id: totrans-1489
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 SQL Server pyodbc 方言中，修复了 `description_encoding` 方言参数的实现，当未明确设置时，会导致在包含其他编码名称的结果集中，无法正确解析
    cursor.description。未来不应该需要此参数。
- en: 'This change is also **backported** to: 0.9.7, 0.8.7'
  id: totrans-1490
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被 **回溯** 到：0.9.7, 0.8.7
- en: 'References: [#3091](https://www.sqlalchemy.org/trac/ticket/3091)'
  id: totrans-1491
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3091](https://www.sqlalchemy.org/trac/ticket/3091)
- en: '**[mssql] [bug]**'
  id: totrans-1492
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed the version string detection in the pymssql dialect to work with Microsoft
    SQL Azure, which changes the word “SQL Server” to “SQL Azure”.
  id: totrans-1493
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 pymssql 方言中版本字符串检测与 Microsoft SQL Azure 配合使用的问题，将 “SQL Server” 更改为 “SQL
    Azure”。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-1494
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被 **回溯** 到：0.9.8
- en: 'References: [#3151](https://www.sqlalchemy.org/trac/ticket/3151)'
  id: totrans-1495
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3151](https://www.sqlalchemy.org/trac/ticket/3151)
- en: '**[mssql] [bug]**'
  id: totrans-1496
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Revised the query used to determine the current default schema name to use the
    `database_principal_id()` function in conjunction with the `sys.database_principals`
    view so that we can determine the default schema independently of the type of
    login in progress (e.g., SQL Server, Windows, etc).
  id: totrans-1497
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修订了用于确定当前默认模式名称的查询，使用 `database_principal_id()` 函数与 `sys.database_principals`
    视图结合使用，以便我们可以独立于正在进行的登录类型（例如 SQL Server，Windows 等）确定默认模式。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-1498
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被 **回溯** 到：0.9.5
- en: 'References: [#3025](https://www.sqlalchemy.org/trac/ticket/3025)'
  id: totrans-1499
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3025](https://www.sqlalchemy.org/trac/ticket/3025)
- en: oracle
  id: totrans-1500
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [feature]**'
  id: totrans-1501
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [feature]**'
- en: Added support for cx_oracle connections to a specific service name, as opposed
    to a tns name, by passing `?service_name=<name>` to the URL. Pull request courtesy
    Sławomir Ehlert.
  id: totrans-1502
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对 cx_oracle 连接到特定服务名称的支持，而不是 tns 名称，通过在 URL 中传递 `?service_name=<name>`。Pull
    request 由 Sławomir Ehlert 提供。
- en: '**[oracle] [feature]**'
  id: totrans-1503
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [feature]**'
- en: 'New Oracle DDL features for tables, indexes: COMPRESS, BITMAP. Patch courtesy
    Gabor Gombas.'
  id: totrans-1504
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新的 Oracle DDL 功能用于表和索引：COMPRESS，BITMAP。Patch 由 Gabor Gombas 提供。
- en: '**[oracle] [feature]**'
  id: totrans-1505
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [feature]**'
- en: Added support for CTEs under Oracle. This includes some tweaks to the aliasing
    syntax, as well as a new CTE feature `CTE.suffix_with()`, which is useful for
    adding in special Oracle-specific directives to the CTE.
  id: totrans-1506
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对 Oracle 下 CTE 的支持。这包括对别名语法的一些调整，以及一个新的 CTE 功能 `CTE.suffix_with()`，用于向 CTE
    添加特殊的 Oracle 特定指令。
- en: See also
  id: totrans-1507
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Improved support for CTEs in Oracle](migration_10.html#change-3220)'
  id: totrans-1508
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[改进了 Oracle 中 CTE 的支持](migration_10.html#change-3220)'
- en: 'References: [#3220](https://www.sqlalchemy.org/trac/ticket/3220)'
  id: totrans-1509
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3220](https://www.sqlalchemy.org/trac/ticket/3220)
- en: '**[oracle] [feature]**'
  id: totrans-1510
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [feature]**'
- en: Added support for the Oracle table option ON COMMIT.
  id: totrans-1511
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对 Oracle 表选项 ON COMMIT 的支持。
- en: '**[oracle] [bug]**'
  id: totrans-1512
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed long-standing bug in Oracle dialect where bound parameter names that started
    with numbers would not be quoted, as Oracle doesn’t like numerics in bound parameter
    names.
  id: totrans-1513
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 Oracle 方言中长期存在的 bug，即以数字开头的绑定参数名称不会被引用，因为 Oracle 不喜欢绑定参数名称中有数字。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-1514
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被 **回溯** 到：0.9.8
- en: 'References: [#2138](https://www.sqlalchemy.org/trac/ticket/2138)'
  id: totrans-1515
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2138](https://www.sqlalchemy.org/trac/ticket/2138)
- en: '**[oracle] [bug] [tests]**'
  id: totrans-1516
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug] [tests]**'
- en: Fixed bug in oracle dialect test suite where in one test, ‘username’ was assumed
    to be in the database URL, even though this might not be the case.
  id: totrans-1517
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 Oracle 方言测试套件中的一个 bug，在一个测试中，假定 ‘username’ 在数据库 URL 中，即使这可能不是情况。
- en: 'This change is also **backported** to: 0.9.7'
  id: totrans-1518
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被 **回溯** 到：0.9.7
- en: 'References: [#3128](https://www.sqlalchemy.org/trac/ticket/3128)'
  id: totrans-1519
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3128](https://www.sqlalchemy.org/trac/ticket/3128)
- en: '**[oracle] [bug]**'
  id: totrans-1520
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: An alias name will be properly quoted when referred to using the `%(name)s`
    token inside the [`Select.with_hint()`](../core/selectable.html#sqlalchemy.sql.expression.Select.with_hint
    "sqlalchemy.sql.expression.Select.with_hint") method. Previously, the Oracle backend
    hadn’t implemented this quoting.
  id: totrans-1521
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 [`Select.with_hint()`](../core/selectable.html#sqlalchemy.sql.expression.Select.with_hint
    "sqlalchemy.sql.expression.Select.with_hint") 方法中，当使用 `%(name)s` token 引用别名时，别名将被正确引用。之前，Oracle
    后端尚未实现此引用。
- en: tests
  id: totrans-1522
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [bug]**'
  id: totrans-1523
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[tests] [bug]**'
- en: Fixed bug where “python setup.py test” wasn’t calling into distutils appropriately,
    and errors would be emitted at the end of the test suite.
  id: totrans-1524
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即 “python setup.py test” 没有适当调用 distutils，测试套件结束时会发出错误。
- en: 'This change is also **backported** to: 0.9.7'
  id: totrans-1525
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还**反向移植**到：0.9.7
- en: '**[tests] [bug] [py3k]**'
  id: totrans-1526
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[tests] [bug] [py3k]**'
- en: Corrected for some deprecation warnings involving the `imp` module and Python
    3.3 or greater, when running tests. Pull request courtesy Matt Chisholm.
  id: totrans-1527
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修正了一些关于`imp`模块和Python 3.3或更高版本在运行测试时的弃用警告。感谢Matt Chisholm提供的拉取请求。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-1528
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还**反向移植**到：0.9.5
- en: 'References: [#2830](https://www.sqlalchemy.org/trac/ticket/2830)'
  id: totrans-1529
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2830](https://www.sqlalchemy.org/trac/ticket/2830)
- en: misc
  id: totrans-1530
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[feature] [ext]**'
  id: totrans-1531
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[feature] [ext]**'
- en: Added a new extension suite [`sqlalchemy.ext.baked`](../orm/extensions/baked.html#module-sqlalchemy.ext.baked
    "sqlalchemy.ext.baked"). This simple but unusual system allows for a dramatic
    savings in Python overhead for the construction and processing of orm [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") objects, from query construction up through rendering
    of a string SQL statement.
  id: totrans-1532
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的扩展套件[`sqlalchemy.ext.baked`](../orm/extensions/baked.html#module-sqlalchemy.ext.baked
    "sqlalchemy.ext.baked")。这个简单但不寻常的系统可以大大节省Python在构建和处理orm [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象时的开销，从查询构建到渲染字符串SQL语句。
- en: See also
  id: totrans-1533
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Baked Queries](../orm/extensions/baked.html)'
  id: totrans-1534
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[烘焙查询](../orm/extensions/baked.html)'
- en: 'References: [#3054](https://www.sqlalchemy.org/trac/ticket/3054)'
  id: totrans-1535
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3054](https://www.sqlalchemy.org/trac/ticket/3054)
- en: '**[feature] [ext]**'
  id: totrans-1536
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[feature] [ext]**'
- en: The [`sqlalchemy.ext.automap`](../orm/extensions/automap.html#module-sqlalchemy.ext.automap
    "sqlalchemy.ext.automap") extension will now set `cascade="all, delete-orphan"`
    automatically on a one-to-many relationship/backref where the foreign key is detected
    as containing one or more non-nullable columns. This argument is present in the
    keywords passed to [`generate_relationship()`](../orm/extensions/automap.html#sqlalchemy.ext.automap.generate_relationship
    "sqlalchemy.ext.automap.generate_relationship") in this case and can still be
    overridden. Additionally, if the [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") specifies `ondelete="CASCADE"` for a
    non-nullable or `ondelete="SET NULL"` for a nullable set of columns, the argument
    `passive_deletes=True` is also added to the relationship. Note that not all backends
    support reflection of ondelete, but backends that do include PostgreSQL and MySQL.
  id: totrans-1537
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`sqlalchemy.ext.automap`](../orm/extensions/automap.html#module-sqlalchemy.ext.automap
    "sqlalchemy.ext.automap")扩展现在会自动在检测到包含一个或多个非空列的外键的一对多关系/反向引用上设置`cascade="all,
    delete-orphan"`。在这种情况下，此参数存在于传递给[`generate_relationship()`](../orm/extensions/automap.html#sqlalchemy.ext.automap.generate_relationship
    "sqlalchemy.ext.automap.generate_relationship")的关键字中，并仍然可以被覆盖。此外，如果[`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")为非空列指定了`ondelete="CASCADE"`或为可空列指定了`ondelete="SET
    NULL"`，则还将在关系中添加参数`passive_deletes=True`。请注意，��非所有后端都支持ondelete的反射，但支持反射的后端包括PostgreSQL和MySQL。'
- en: 'References: [#3210](https://www.sqlalchemy.org/trac/ticket/3210)'
  id: totrans-1538
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3210](https://www.sqlalchemy.org/trac/ticket/3210)
- en: '**[bug] [declarative]**'
  id: totrans-1539
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [declarative]**'
- en: The `__mapper_args__` dictionary is copied from a declarative mixin or abstract
    class when accessed, so that modifications made to this dictionary by declarative
    itself won’t conflict with that of other mappings. The dictionary is modified
    regarding the `version_id_col` and `polymorphic_on` arguments, replacing the column
    within with the one that is officially mapped to the local class/table.
  id: totrans-1540
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当访问`__mapper_args__`字典时，它是从声明性mixin或抽象类中复制的，因此声明性本身对此字典所做的修改不会与其他映射冲突。该字典在`version_id_col`和`polymorphic_on`参数方面进行修改，用本地类/表正式映射到的列替换其中的列。
- en: 'This change is also **backported** to: 0.9.5, 0.8.7'
  id: totrans-1541
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还**反向移植**到：0.9.5, 0.8.7
- en: 'References: [#3062](https://www.sqlalchemy.org/trac/ticket/3062)'
  id: totrans-1542
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3062](https://www.sqlalchemy.org/trac/ticket/3062)
- en: '**[bug] [ext]**'
  id: totrans-1543
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug in mutable extension where [`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict") did not report change events for the `setdefault()`
    dictionary operation.
  id: totrans-1544
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了可变扩展中的错误，其中[`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict")未报告`setdefault()`字典操作的更改事件。
- en: 'This change is also **backported** to: 0.9.5, 0.8.7'
  id: totrans-1545
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还**反向移植**到：0.9.5, 0.8.7
- en: 'References: [#3051](https://www.sqlalchemy.org/trac/ticket/3051), [#3093](https://www.sqlalchemy.org/trac/ticket/3093)'
  id: totrans-1546
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3051](https://www.sqlalchemy.org/trac/ticket/3051), [#3093](https://www.sqlalchemy.org/trac/ticket/3093)
- en: '**[bug] [ext]**'
  id: totrans-1547
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug where [`MutableDict.setdefault()`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict.setdefault
    "sqlalchemy.ext.mutable.MutableDict.setdefault") didn’t return the existing or
    new value (this bug was not released in any 0.8 version). Pull request courtesy
    Thomas Hervé.
  id: totrans-1548
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`MutableDict.setdefault()`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict.setdefault
    "sqlalchemy.ext.mutable.MutableDict.setdefault") 未能返回现有值或新值的 bug（此 bug 未在任何 0.8
    版本中发布）。感谢 Thomas Hervé 提交的拉取请求。
- en: 'This change is also **backported** to: 0.9.5, 0.8.7'
  id: totrans-1549
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被 **回溯** 至：0.9.5，0.8.7
- en: 'References: [#3051](https://www.sqlalchemy.org/trac/ticket/3051), [#3093](https://www.sqlalchemy.org/trac/ticket/3093)'
  id: totrans-1550
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3051](https://www.sqlalchemy.org/trac/ticket/3051)，[#3093](https://www.sqlalchemy.org/trac/ticket/3093)
- en: '**[bug] [ext] [py3k]**'
  id: totrans-1551
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext] [py3k]**'
- en: Fixed bug where the association proxy list class would not interpret slices
    correctly under Py3K. Pull request courtesy Gilles Dartiguelongue.
  id: totrans-1552
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 Py3K 下协会代理列表类无法正确解释切片的 bug。感谢 Gilles Dartiguelongue 提交的拉取请求。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-1553
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被 **回溯** 至：0.9.9
- en: '**[bug] [declarative]**'
  id: totrans-1554
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [declarative]**'
- en: Fixed an unlikely race condition observed in some exotic end-user setups, where
    the attempt to check for “duplicate class name” in declarative would hit upon
    a not-totally-cleaned-up weak reference related to some other class being removed;
    the check here now ensures the weakref still references an object before calling
    upon it further.
  id: totrans-1555
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一种在某些奇特的最终用户设置中观察到的不太可能的竞争条件，在这种情况下，在声明时尝试检查“重复类名”的尝试会遇到一种不完全清理的弱引用，与其他被移除的类相关联；此处的检查现在确保弱引用在进一步调用之前仍然引用一个对象。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-1556
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被 **回溯** 至：0.9.8
- en: 'References: [#3208](https://www.sqlalchemy.org/trac/ticket/3208)'
  id: totrans-1557
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3208](https://www.sqlalchemy.org/trac/ticket/3208)
- en: '**[bug] [ext]**'
  id: totrans-1558
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug in ordering list where the order of items would be thrown off during
    a collection replace event, if the reorder_on_append flag were set to True. The
    fix ensures that the ordering list only impacts the list that is explicitly associated
    with the object.
  id: totrans-1559
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在集合替换事件期间项的顺序会被打乱的排序列表中的 bug，如果 `reorder_on_append` 标志设置为 True，则修复将确保排序列表仅影响显式与对象关联的列表。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-1560
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被 **回溯** 至：0.9.8
- en: 'References: [#3191](https://www.sqlalchemy.org/trac/ticket/3191)'
  id: totrans-1561
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3191](https://www.sqlalchemy.org/trac/ticket/3191)
- en: '**[bug] [ext]**'
  id: totrans-1562
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug where [`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict") failed to implement the `update()` dictionary
    method, thus not catching changes. Pull request courtesy Matt Chisholm.
  id: totrans-1563
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict") 未能实现 `update()` 字典方法的 bug，因此未能捕获更改。感谢 Matt
    Chisholm 提交的拉取请求。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-1564
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被 **回溯** 至：0.9.8
- en: '**[bug] [ext]**'
  id: totrans-1565
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug where a custom subclass of [`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict") would not show up in a “coerce” operation,
    and would instead return a plain [`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict"). Pull request courtesy Matt Chisholm.
  id: totrans-1566
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了自定义子类 [`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict") 不会在“强制”操作中显示，并且会返回一个普通的 [`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict") 的 bug。感谢 Matt Chisholm 提交的拉取请求。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-1567
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被 **回溯** 至：0.9.8
- en: '**[bug] [pool]**'
  id: totrans-1568
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [pool]**'
- en: Fixed bug in connection pool logging where the “connection checked out” debug
    logging message would not emit if the logging were set up using `logging.setLevel()`,
    rather than using the `echo_pool` flag. Tests to assert this logging have been
    added. This is a regression that was introduced in 0.9.0.
  id: totrans-1569
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了连接池日志记录中的 bug，在该 bug 中，“连接已检出”调试日志记录消息如果使用 `logging.setLevel()` 设置日志记录，而不是使用
    `echo_pool` 标志，则不会发出。已添加测试以断言此日志记录。这是在 0.9.0 中引入的回归。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-1570
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被 **回溯** 至：0.9.8
- en: 'References: [#3168](https://www.sqlalchemy.org/trac/ticket/3168)'
  id: totrans-1571
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3168](https://www.sqlalchemy.org/trac/ticket/3168)
- en: '**[bug] [declarative]**'
  id: totrans-1572
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [declarative]**'
- en: Fixed bug when the declarative `__abstract__` flag was not being distinguished
    for when it was actually the value `False`. The `__abstract__` flag needs to actually
    evaluate to a True value at the level being tested.
  id: totrans-1573
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在声明 `__abstract__` 标志未被区分为实际上是值 `False` 时的 bug。`__abstract__` 标志需要在被测试的级别上实际上计算为
    True 值。
- en: 'This change is also **backported** to: 0.9.7'
  id: totrans-1574
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.9.7
- en: 'References: [#3097](https://www.sqlalchemy.org/trac/ticket/3097)'
  id: totrans-1575
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3097](https://www.sqlalchemy.org/trac/ticket/3097)
- en: '**[bug] [testsuite]**'
  id: totrans-1576
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [测试套件]**'
- en: In public test suite, changed to use of `String(40)` from less-supported `Text`
    in `StringTest.test_literal_backslashes`. Pullreq courtesy Jan.
  id: totrans-1577
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在公共测试套件中，从不太受支持的`Text`更改为使用`String(40)`在`StringTest.test_literal_backslashes`中。感谢
    Jan 提交的 Pullreq。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-1578
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.9.5
- en: '**[removed]**'
  id: totrans-1579
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[已移除]**'
- en: The Drizzle dialect has been removed from the Core; it is now available as [sqlalchemy-drizzle](https://bitbucket.org/zzzeek/sqlalchemy-drizzle),
    an independent, third party dialect. The dialect is still based almost entirely
    off of the MySQL dialect present in SQLAlchemy.
  id: totrans-1580
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Drizzle 方言已从核心中移除；它现在作为[sqlalchemy-drizzle](https://bitbucket.org/zzzeek/sqlalchemy-drizzle)提供，这是一个独立的第三方方言。该方言仍然几乎完全基于
    SQLAlchemy 中存在的 MySQL 方言。
- en: See also
  id: totrans-1581
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Drizzle Dialect is now an External Dialect](migration_10.html#change-2984)'
  id: totrans-1582
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Drizzle 方言现在是外部方言](migration_10.html#change-2984)'
- en: 1.0.19
  id: totrans-1583
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.0.19
- en: 'Released: August 3, 2017'
  id: totrans-1584
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2017年8月3日
- en: oracle
  id: totrans-1585
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [performance] [bug] [py2k]**'
  id: totrans-1586
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [性能] [bug] [py2k]**'
- en: Fixed performance regression caused by the fix for [#3937](https://www.sqlalchemy.org/trac/ticket/3937)
    where cx_Oracle as of version 5.3 dropped the `.UNICODE` symbol from its namespace,
    which was interpreted as cx_Oracle’s “WITH_UNICODE” mode being turned on unconditionally,
    which invokes functions on the SQLAlchemy side which convert all strings to unicode
    unconditionally and causing a performance impact. In fact, per cx_Oracle’s author
    the “WITH_UNICODE” mode has been removed entirely as of 5.1, so the expensive
    unicode conversion functions are no longer necessary and are disabled if cx_Oracle
    5.1 or greater is detected under Python 2\. The warning against “WITH_UNICODE”
    mode that was removed under [#3937](https://www.sqlalchemy.org/trac/ticket/3937)
    is also restored.
  id: totrans-1587
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由于修复[#3937](https://www.sqlalchemy.org/trac/ticket/3937)引起的性能回归问题，其中 cx_Oracle
    版本 5.3 删除了其命名空间中的`.UNICODE`符号，这被解释为 cx_Oracle 的“WITH_UNICODE”模式被无条件地打开，从而在 SQLAlchemy
    一侧调用函数，无条件地将所有字符串转换为 unicode 并导致性能影响。实际上，根据 cx_Oracle 的作者，自 5.1 版本起，“WITH_UNICODE”模式已完全移除，因此昂贵的
    unicode 转换函数不再必要，如果在 Python 2 下检测到 cx_Oracle 5.1 或更高版本，则会禁用这些函数。已恢复在[#3937](https://www.sqlalchemy.org/trac/ticket/3937)中删除的“WITH_UNICODE”模式警告。
- en: 'References: [#4035](https://www.sqlalchemy.org/trac/ticket/4035)'
  id: totrans-1588
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4035](https://www.sqlalchemy.org/trac/ticket/4035)
- en: oracle
  id: totrans-1589
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [performance] [bug] [py2k]**'
  id: totrans-1590
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [性能] [bug] [py2k]**'
- en: Fixed performance regression caused by the fix for [#3937](https://www.sqlalchemy.org/trac/ticket/3937)
    where cx_Oracle as of version 5.3 dropped the `.UNICODE` symbol from its namespace,
    which was interpreted as cx_Oracle’s “WITH_UNICODE” mode being turned on unconditionally,
    which invokes functions on the SQLAlchemy side which convert all strings to unicode
    unconditionally and causing a performance impact. In fact, per cx_Oracle’s author
    the “WITH_UNICODE” mode has been removed entirely as of 5.1, so the expensive
    unicode conversion functions are no longer necessary and are disabled if cx_Oracle
    5.1 or greater is detected under Python 2\. The warning against “WITH_UNICODE”
    mode that was removed under [#3937](https://www.sqlalchemy.org/trac/ticket/3937)
    is also restored.
  id: totrans-1591
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由于修复[#3937](https://www.sqlalchemy.org/trac/ticket/3937)引起的性能回归问题，其中 cx_Oracle
    版本 5.3 删除了其命名空间中的`.UNICODE`符号，这被解释为 cx_Oracle 的“WITH_UNICODE”模式被无条件地打开，从而在 SQLAlchemy
    一侧调用函数，无条件地将所有字符串转换为 unicode 并导致性能影响。实际上，根据 cx_Oracle 的作者，自 5.1 版本起，“WITH_UNICODE”模式已完全移除，因此昂贵的
    unicode 转换函数不再必要，如果在 Python 2 下检测到 cx_Oracle 5.1 或更高版本，则会禁用这些函数。已恢复在[#3937](https://www.sqlalchemy.org/trac/ticket/3937)中删除的“WITH_UNICODE”模式警告。
- en: 'References: [#4035](https://www.sqlalchemy.org/trac/ticket/4035)'
  id: totrans-1592
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4035](https://www.sqlalchemy.org/trac/ticket/4035)
- en: 1.0.18
  id: totrans-1593
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.0.18
- en: 'Released: July 24, 2017'
  id: totrans-1594
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2017年7月24日
- en: oracle
  id: totrans-1595
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-1596
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: A fix to cx_Oracle’s WITH_UNICODE mode which was uncovered by the fact that
    cx_Oracle 5.3 now seems to hardcode this flag on in the build; an internal method
    that uses this mode wasn’t using the correct signature.
  id: totrans-1597
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由于 cx_Oracle 5.3 现在似乎在构建中硬编码此标志而暴露出来的 cx_Oracle 的 WITH_UNICODE 模式问题；使用此模式的内部方法未使用正确的签名。
- en: 'References: [#3937](https://www.sqlalchemy.org/trac/ticket/3937)'
  id: totrans-1598
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3937](https://www.sqlalchemy.org/trac/ticket/3937)
- en: tests
  id: totrans-1599
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [bug] [py3k]**'
  id: totrans-1600
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[测试] [bug] [py3k]**'
- en: Fixed issue in testing fixtures which was incompatible with a change made as
    of Python 3.6.2 involving context managers.
  id: totrans-1601
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了与 Python 3.6.2 中关于上下文管理器的更改不兼容的测试固件中的问题。
- en: 'References: [#4034](https://www.sqlalchemy.org/trac/ticket/4034)'
  id: totrans-1602
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4034](https://www.sqlalchemy.org/trac/ticket/4034)
- en: oracle
  id: totrans-1603
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-1604
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: A fix to cx_Oracle’s WITH_UNICODE mode which was uncovered by the fact that
    cx_Oracle 5.3 now seems to hardcode this flag on in the build; an internal method
    that uses this mode wasn’t using the correct signature.
  id: totrans-1605
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 cx_Oracle 的 WITH_UNICODE 模式，这是由于 cx_Oracle 5.3 现在似乎在构建中硬编码了此标志；一个使用此模式的内部方法未使用正确的签名。
- en: 'References: [#3937](https://www.sqlalchemy.org/trac/ticket/3937)'
  id: totrans-1606
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3937](https://www.sqlalchemy.org/trac/ticket/3937)
- en: tests
  id: totrans-1607
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: tests
- en: '**[tests] [bug] [py3k]**'
  id: totrans-1608
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[tests] [bug] [py3k]**'
- en: Fixed issue in testing fixtures which was incompatible with a change made as
    of Python 3.6.2 involving context managers.
  id: totrans-1609
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了与 Python 3.6.2 中关于上下文管理器的更改不兼容的测试固件中的问题。
- en: 'References: [#4034](https://www.sqlalchemy.org/trac/ticket/4034)'
  id: totrans-1610
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4034](https://www.sqlalchemy.org/trac/ticket/4034)
- en: 1.0.17
  id: totrans-1611
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.0.17
- en: 'Released: January 17, 2017'
  id: totrans-1612
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2017年1月17日
- en: orm
  id: totrans-1613
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1614
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug involving joined eager loading against multiple entities when polymorphic
    inheritance is also in use which would throw “‘NoneType’ object has no attribute
    ‘isa’”. The issue was introduced by the fix for [#3611](https://www.sqlalchemy.org/trac/ticket/3611).
  id: totrans-1615
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在多个实体上进行连接式急加载时涉及多态继承时会抛出“‘NoneType’ object has no attribute ‘isa’”错误的 bug。此问题是由于修复[#3611](https://www.sqlalchemy.org/trac/ticket/3611)引入的。
- en: 'References: [#3884](https://www.sqlalchemy.org/trac/ticket/3884)'
  id: totrans-1616
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3884](https://www.sqlalchemy.org/trac/ticket/3884)
- en: misc
  id: totrans-1617
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[bug] [py3k]**'
  id: totrans-1618
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [py3k]**'
- en: Fixed Python 3.6 DeprecationWarnings related to escaped strings without the
    ‘r’ modifier, and added test coverage for Python 3.6.
  id: totrans-1619
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了与未使用‘r’修饰符的转义字符串相关的 Python 3.6 DeprecationWarnings，并为 Python 3.6 添加了测试覆盖率。
- en: 'References: [#3886](https://www.sqlalchemy.org/trac/ticket/3886)'
  id: totrans-1620
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3886](https://www.sqlalchemy.org/trac/ticket/3886)
- en: orm
  id: totrans-1621
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1622
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug involving joined eager loading against multiple entities when polymorphic
    inheritance is also in use which would throw “‘NoneType’ object has no attribute
    ‘isa’”. The issue was introduced by the fix for [#3611](https://www.sqlalchemy.org/trac/ticket/3611).
  id: totrans-1623
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在多个实体上进行连接式急加载时涉及多态继承时会抛出“‘NoneType’ object has no attribute ‘isa’”错误的 bug。此问题是由于修复[#3611](https://www.sqlalchemy.org/trac/ticket/3611)引入的。
- en: 'References: [#3884](https://www.sqlalchemy.org/trac/ticket/3884)'
  id: totrans-1624
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3884](https://www.sqlalchemy.org/trac/ticket/3884)
- en: misc
  id: totrans-1625
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[bug] [py3k]**'
  id: totrans-1626
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [py3k]**'
- en: Fixed Python 3.6 DeprecationWarnings related to escaped strings without the
    ‘r’ modifier, and added test coverage for Python 3.6.
  id: totrans-1627
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了与未使用‘r’修饰符的转义字符串相关的 Python 3.6 DeprecationWarnings，并为 Python 3.6 添加了测试覆盖率。
- en: 'References: [#3886](https://www.sqlalchemy.org/trac/ticket/3886)'
  id: totrans-1628
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3886](https://www.sqlalchemy.org/trac/ticket/3886)
- en: 1.0.16
  id: totrans-1629
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.0.16
- en: 'Released: November 15, 2016'
  id: totrans-1630
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2016年11月15日
- en: orm
  id: totrans-1631
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1632
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in [`Session.bulk_update_mappings()`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_update_mappings
    "sqlalchemy.orm.Session.bulk_update_mappings") where an alternate-named primary
    key attribute would not track properly into the UPDATE statement.
  id: totrans-1633
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`Session.bulk_update_mappings()`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_update_mappings
    "sqlalchemy.orm.Session.bulk_update_mappings") 中的 bug，其中备用命名的主键属性无法正确跟踪到 UPDATE
    语句中。
- en: 'References: [#3849](https://www.sqlalchemy.org/trac/ticket/3849)'
  id: totrans-1634
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3849](https://www.sqlalchemy.org/trac/ticket/3849)
- en: '**[orm] [bug]**'
  id: totrans-1635
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where joined eager loading would fail for a polymorphically- loaded
    mapper, where the polymorphic_on was set to an un-mapped expression such as a
    CASE expression.
  id: totrans-1636
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了连接式急加载在多态加载映射器失败的 bug，其中 polymorphic_on 设置为未映射表达式（如 CASE 表达式）。
- en: 'References: [#3800](https://www.sqlalchemy.org/trac/ticket/3800)'
  id: totrans-1637
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3800](https://www.sqlalchemy.org/trac/ticket/3800)
- en: '**[orm] [bug]**'
  id: totrans-1638
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where the ArgumentError raised for an invalid bind sent to a Session
    via [`Session.bind_mapper()`](../orm/session_api.html#sqlalchemy.orm.Session.bind_mapper
    "sqlalchemy.orm.Session.bind_mapper"), [`Session.bind_table()`](../orm/session_api.html#sqlalchemy.orm.Session.bind_table
    "sqlalchemy.orm.Session.bind_table"), or the constructor would fail to be correctly
    raised.
  id: totrans-1639
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当通过 [`Session.bind_mapper()`](../orm/session_api.html#sqlalchemy.orm.Session.bind_mapper
    "sqlalchemy.orm.Session.bind_mapper")、[`Session.bind_table()`](../orm/session_api.html#sqlalchemy.orm.Session.bind_table
    "sqlalchemy.orm.Session.bind_table") 或构造函数发送到 Session 的��效绑定时引发的 ArgumentError
    未能正确引发的问题。
- en: 'References: [#3798](https://www.sqlalchemy.org/trac/ticket/3798)'
  id: totrans-1640
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3798](https://www.sqlalchemy.org/trac/ticket/3798)
- en: '**[orm] [bug]**'
  id: totrans-1641
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in `Session.bulk_save()` where an UPDATE would not function correctly
    in conjunction with a mapping that implements a version id counter.
  id: totrans-1642
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了`Session.bulk_save()`中的一个 BUG，其中一个实现了版本 id 计数器的映射与 UPDATE 结合使用时功能不正常。
- en: 'References: [#3781](https://www.sqlalchemy.org/trac/ticket/3781)'
  id: totrans-1643
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3781](https://www.sqlalchemy.org/trac/ticket/3781)
- en: '**[orm] [bug]**'
  id: totrans-1644
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where the [`Mapper.attrs`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.attrs
    "sqlalchemy.orm.Mapper.attrs"), [`Mapper.all_orm_descriptors`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors") and other derived attributes would
    fail to refresh when mapper properties or other ORM constructs were added to the
    mapper/class after these accessors were first called.
  id: totrans-1645
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当映射器属性或其他 ORM 结构在首次调用这些访问器之后被添加到映射器/类后，[`Mapper.attrs`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.attrs
    "sqlalchemy.orm.Mapper.attrs")、[`Mapper.all_orm_descriptors`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors") 和其他派生属性无法刷新的 BUG。
- en: 'References: [#3778](https://www.sqlalchemy.org/trac/ticket/3778)'
  id: totrans-1646
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3778](https://www.sqlalchemy.org/trac/ticket/3778)
- en: mssql
  id: totrans-1647
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-1648
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Changed the query used to get “default schema name”, from one that queries the
    database principals table to using the “schema_name()” function, as issues have
    been reported that the former system was unavailable on the Azure Data Warehouse
    edition. It is hoped that this will finally work across all SQL Server versions
    and authentication styles.
  id: totrans-1649
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将用于获取“默认模式名称”的查询更改为使用“schema_name()”函数，而不是查询数据库主体表，因为已经报告了前者在 Azure 数据仓库版上不可用的问题。希望这样能够在所有
    SQL Server 版本和认证样式中最终都能正常工作。
- en: 'References: [#3810](https://www.sqlalchemy.org/trac/ticket/3810)'
  id: totrans-1650
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3810](https://www.sqlalchemy.org/trac/ticket/3810)
- en: '**[mssql] [bug]**'
  id: totrans-1651
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Updated the server version info scheme for pyodbc to use SQL Server SERVERPROPERTY(),
    rather than relying upon pyodbc.SQL_DBMS_VER, which continues to be unreliable
    particularly with FreeTDS.
  id: totrans-1652
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 pyodbc 的服务器版本信息方案更新为使用 SQL Server 的 SERVERPROPERTY()，而不是依赖于 pyodbc.SQL_DBMS_VER，后者特别是在使用
    FreeTDS 时仍然不可靠。
- en: 'References: [#3814](https://www.sqlalchemy.org/trac/ticket/3814)'
  id: totrans-1653
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3814](https://www.sqlalchemy.org/trac/ticket/3814)
- en: '**[mssql] [bug]**'
  id: totrans-1654
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Added error code 20017 “unexpected EOF from the server” to the list of disconnect
    exceptions that result in a connection pool reset. Pull request courtesy Ken Robbins.
  id: totrans-1655
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将错误代码 20017 “服务器意外 EOF” 添加到导致连接池重置的断开异常列表中。感谢 Ken Robbins 的拉取请求。
- en: 'References: [#3791](https://www.sqlalchemy.org/trac/ticket/3791)'
  id: totrans-1656
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3791](https://www.sqlalchemy.org/trac/ticket/3791)
- en: '**[mssql] [bug]**'
  id: totrans-1657
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed bug in pyodbc dialect (as well as in the mostly non-working adodbapi dialect)
    whereby a semicolon present in the password or username fields could be interpreted
    as a separator for another token; the values are now quoted when semicolons are
    present.
  id: totrans-1658
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 pyodbc 方言（以及几乎不工作的 adodbapi 方言）中的一个 BUG，即密码或用户名字段中存在分号时，分号可能被解释为另一个令牌的分隔符；现在在存在分号时值将被引用。
- en: 'References: [#3762](https://www.sqlalchemy.org/trac/ticket/3762)'
  id: totrans-1659
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3762](https://www.sqlalchemy.org/trac/ticket/3762)
- en: misc
  id: totrans-1660
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[bug] [orm.declarative]**'
  id: totrans-1661
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [orm.declarative]**'
- en: Fixed bug where setting up a single-table inh subclass of a joined-table subclass
    which included an extra column would corrupt the foreign keys collection of the
    mapped table, thereby interfering with the initialization of relationships.
  id: totrans-1662
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了设置单表继承子类的一个 BUG，其中包含额外列的联接表子类将损坏映射表的外键集合，从而干扰关系的初始化。
- en: 'References: [#3797](https://www.sqlalchemy.org/trac/ticket/3797)'
  id: totrans-1663
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3797](https://www.sqlalchemy.org/trac/ticket/3797)
- en: orm
  id: totrans-1664
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1665
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in [`Session.bulk_update_mappings()`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_update_mappings
    "sqlalchemy.orm.Session.bulk_update_mappings") where an alternate-named primary
    key attribute would not track properly into the UPDATE statement.
  id: totrans-1666
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Session.bulk_update_mappings()`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_update_mappings
    "sqlalchemy.orm.Session.bulk_update_mappings")中的一个 BUG，其中一个具有替代命名的主键属性无法正确跟踪到
    UPDATE 语句中。
- en: 'References: [#3849](https://www.sqlalchemy.org/trac/ticket/3849)'
  id: totrans-1667
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3849](https://www.sqlalchemy.org/trac/ticket/3849)
- en: '**[orm] [bug]**'
  id: totrans-1668
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where joined eager loading would fail for a polymorphically- loaded
    mapper, where the polymorphic_on was set to an un-mapped expression such as a
    CASE expression.
  id: totrans-1669
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了对多态加载的映射器进行连接式快速加载时的 BUG，其中多态加载器被设置为未映射表达式，例如 CASE 表达式。
- en: 'References: [#3800](https://www.sqlalchemy.org/trac/ticket/3800)'
  id: totrans-1670
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3800](https://www.sqlalchemy.org/trac/ticket/3800)
- en: '**[orm] [bug]**'
  id: totrans-1671
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where the ArgumentError raised for an invalid bind sent to a Session
    via [`Session.bind_mapper()`](../orm/session_api.html#sqlalchemy.orm.Session.bind_mapper
    "sqlalchemy.orm.Session.bind_mapper"), [`Session.bind_table()`](../orm/session_api.html#sqlalchemy.orm.Session.bind_table
    "sqlalchemy.orm.Session.bind_table"), or the constructor would fail to be correctly
    raised.
  id: totrans-1672
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即当通过[`Session.bind_mapper()`](../orm/session_api.html#sqlalchemy.orm.Session.bind_mapper
    "sqlalchemy.orm.Session.bind_mapper")、[`Session.bind_table()`](../orm/session_api.html#sqlalchemy.orm.Session.bind_table
    "sqlalchemy.orm.Session.bind_table")或构造函数发送到Session的无效绑定时，为无法正确引发的ArgumentError。
- en: 'References: [#3798](https://www.sqlalchemy.org/trac/ticket/3798)'
  id: totrans-1673
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3798](https://www.sqlalchemy.org/trac/ticket/3798)
- en: '**[orm] [bug]**'
  id: totrans-1674
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in `Session.bulk_save()` where an UPDATE would not function correctly
    in conjunction with a mapping that implements a version id counter.
  id: totrans-1675
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了`Session.bulk_save()`中的错误，其中UPDATE与实现版本id计数器的映射结合使用时无法正确运行。
- en: 'References: [#3781](https://www.sqlalchemy.org/trac/ticket/3781)'
  id: totrans-1676
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3781](https://www.sqlalchemy.org/trac/ticket/3781)
- en: '**[orm] [bug]**'
  id: totrans-1677
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where the [`Mapper.attrs`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.attrs
    "sqlalchemy.orm.Mapper.attrs"), [`Mapper.all_orm_descriptors`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors") and other derived attributes would
    fail to refresh when mapper properties or other ORM constructs were added to the
    mapper/class after these accessors were first called.
  id: totrans-1678
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即当在首次调用这些访问器后向映射器/类添加映射器属性或其他ORM构造时，[`Mapper.attrs`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.attrs
    "sqlalchemy.orm.Mapper.attrs")、[`Mapper.all_orm_descriptors`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors")和其他派生属性将无法刷新。
- en: 'References: [#3778](https://www.sqlalchemy.org/trac/ticket/3778)'
  id: totrans-1679
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3778](https://www.sqlalchemy.org/trac/ticket/3778)
- en: mssql
  id: totrans-1680
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-1681
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Changed the query used to get “default schema name”, from one that queries the
    database principals table to using the “schema_name()” function, as issues have
    been reported that the former system was unavailable on the Azure Data Warehouse
    edition. It is hoped that this will finally work across all SQL Server versions
    and authentication styles.
  id: totrans-1682
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更改了用于获取“默认模式名称”的查询，从查询数据库主体表到使用“schema_name()”函数，因为有报告称前一系统在Azure Data Warehouse版本上不可用。希望这将最终在所有SQL
    Server版本和认证样式上都起作用。
- en: 'References: [#3810](https://www.sqlalchemy.org/trac/ticket/3810)'
  id: totrans-1683
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3810](https://www.sqlalchemy.org/trac/ticket/3810)
- en: '**[mssql] [bug]**'
  id: totrans-1684
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Updated the server version info scheme for pyodbc to use SQL Server SERVERPROPERTY(),
    rather than relying upon pyodbc.SQL_DBMS_VER, which continues to be unreliable
    particularly with FreeTDS.
  id: totrans-1685
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新了pyodbc的服务器版本信息方案，使用SQL Server SERVERPROPERTY()，而不是依赖于pyodbc.SQL_DBMS_VER，后者在FreeTDS中仍然不可靠。
- en: 'References: [#3814](https://www.sqlalchemy.org/trac/ticket/3814)'
  id: totrans-1686
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3814](https://www.sqlalchemy.org/trac/ticket/3814)
- en: '**[mssql] [bug]**'
  id: totrans-1687
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Added error code 20017 “unexpected EOF from the server” to the list of disconnect
    exceptions that result in a connection pool reset. Pull request courtesy Ken Robbins.
  id: totrans-1688
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将错误代码20017“服务器意外的EOF”添加到导致连接池重置的断开异常列表中。感谢Ken Robbins的拉取请求。
- en: 'References: [#3791](https://www.sqlalchemy.org/trac/ticket/3791)'
  id: totrans-1689
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3791](https://www.sqlalchemy.org/trac/ticket/3791)
- en: '**[mssql] [bug]**'
  id: totrans-1690
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed bug in pyodbc dialect (as well as in the mostly non-working adodbapi dialect)
    whereby a semicolon present in the password or username fields could be interpreted
    as a separator for another token; the values are now quoted when semicolons are
    present.
  id: totrans-1691
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了pyodbc方言中的错误（以及大部分不起作用的adodbapi方言），其中密码或用户名字段中存在的分号可能被解释为另一个令牌的分隔符；当分号存在时，现在对值进行引用。
- en: 'References: [#3762](https://www.sqlalchemy.org/trac/ticket/3762)'
  id: totrans-1692
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3762](https://www.sqlalchemy.org/trac/ticket/3762)
- en: misc
  id: totrans-1693
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [orm.declarative]**'
  id: totrans-1694
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [orm.declarative]**'
- en: Fixed bug where setting up a single-table inh subclass of a joined-table subclass
    which included an extra column would corrupt the foreign keys collection of the
    mapped table, thereby interfering with the initialization of relationships.
  id: totrans-1695
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了设置单表继承子类的错误，该子类包括额外列，会破坏映射表的外键集合，从而干扰关系的初始化。
- en: 'References: [#3797](https://www.sqlalchemy.org/trac/ticket/3797)'
  id: totrans-1696
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3797](https://www.sqlalchemy.org/trac/ticket/3797)
- en: 1.0.15
  id: totrans-1697
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.0.15
- en: 'Released: September 1, 2016'
  id: totrans-1698
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2016年9月1日
- en: orm
  id: totrans-1699
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1700
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in subquery eager loading where a subqueryload of an “of_type()” object
    linked to a second subqueryload of a plain mapped class, or a longer chain of
    several “of_type()” attributes, would fail to link the joins correctly.
  id: totrans-1701
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了子查询急加载中的错误，其中“of_type()”对象的子查询加载链接到第二个普通映射类的子查询加载，或者多个“of_type()”属性的较长链将无法正确链接连接。
- en: 'References: [#3773](https://www.sqlalchemy.org/trac/ticket/3773), [#3774](https://www.sqlalchemy.org/trac/ticket/3774)'
  id: totrans-1702
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3773](https://www.sqlalchemy.org/trac/ticket/3773)，[#3774](https://www.sqlalchemy.org/trac/ticket/3774)
- en: sql
  id: totrans-1703
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SQL
- en: '**[sql] [bug]**'
  id: totrans-1704
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL] [bug]**'
- en: Fixed bug in [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    where the internal method `_reset_exported()` would corrupt the state of the object.
    This method is intended for selectable objects and is called by the ORM in some
    cases; an erroneous mapper configuration would could lead the ORM to call this
    on a [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object.
  id: totrans-1705
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")中的错误，其中内部方法`_reset_exported()`会破坏对象的状态。该方法旨在用于可选择的对象，并在某些情况下被ORM调用；错误的映射配置可能导致ORM在[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象上调用此方法。
- en: 'References: [#3755](https://www.sqlalchemy.org/trac/ticket/3755)'
  id: totrans-1706
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3755](https://www.sqlalchemy.org/trac/ticket/3755)
- en: mysql
  id: totrans-1707
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: MySQL
- en: '**[mysql] [bug]**'
  id: totrans-1708
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[MySQL] [bug]**'
- en: 'Added support for parsing MySQL/Connector boolean and integer arguments within
    the URL query string: connection_timeout, connect_timeout, pool_size, get_warnings,
    raise_on_warnings, raw, consume_results, ssl_verify_cert, force_ipv6, pool_reset_session,
    compress, allow_local_infile, use_pure.'
  id: totrans-1709
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对在URL查询字符串中解析MySQL/Connector布尔值和整数参数的支持：connection_timeout, connect_timeout,
    pool_size, get_warnings, raise_on_warnings, raw, consume_results, ssl_verify_cert,
    force_ipv6, pool_reset_session, compress, allow_local_infile, use_pure。
- en: 'References: [#3787](https://www.sqlalchemy.org/trac/ticket/3787)'
  id: totrans-1710
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3787](https://www.sqlalchemy.org/trac/ticket/3787)
- en: misc
  id: totrans-1711
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [ext]**'
  id: totrans-1712
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug in `sqlalchemy.ext.baked` where the unbaking of a subquery eager loader
    query would fail due to a variable scoping issue, when multiple subquery loaders
    were involved. Pull request courtesy Mark Hahnenberg.
  id: totrans-1713
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了`sqlalchemy.ext.baked`中的错误，其中由于变量作用域问题，解除子查询急加载器查询时会失败，涉及多个子查询加载器。感谢Mark
    Hahnenberg的拉取请求。
- en: 'References: [#3743](https://www.sqlalchemy.org/trac/ticket/3743)'
  id: totrans-1714
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3743](https://www.sqlalchemy.org/trac/ticket/3743)
- en: orm
  id: totrans-1715
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM
- en: '**[orm] [bug]**'
  id: totrans-1716
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [bug]**'
- en: Fixed bug in subquery eager loading where a subqueryload of an “of_type()” object
    linked to a second subqueryload of a plain mapped class, or a longer chain of
    several “of_type()” attributes, would fail to link the joins correctly.
  id: totrans-1717
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了子查询急加载中的错误，其中“of_type()”对象的子查询加载链接到第二个普通映射类的子查询加载，或者多个“of_type()”属性的较长链将无法正确链接连接。
- en: 'References: [#3773](https://www.sqlalchemy.org/trac/ticket/3773), [#3774](https://www.sqlalchemy.org/trac/ticket/3774)'
  id: totrans-1718
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3773](https://www.sqlalchemy.org/trac/ticket/3773)，[#3774](https://www.sqlalchemy.org/trac/ticket/3774)
- en: sql
  id: totrans-1719
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SQL
- en: '**[sql] [bug]**'
  id: totrans-1720
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL] [bug]**'
- en: Fixed bug in [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    where the internal method `_reset_exported()` would corrupt the state of the object.
    This method is intended for selectable objects and is called by the ORM in some
    cases; an erroneous mapper configuration would could lead the ORM to call this
    on a [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object.
  id: totrans-1721
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")中的错误，其中内部方法`_reset_exported()`会破坏对象的状态。该方法旨在用于可选择的对象，并在某些情况下被ORM调用；错误的映射配置可能导致ORM在[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象上调用此方法。
- en: 'References: [#3755](https://www.sqlalchemy.org/trac/ticket/3755)'
  id: totrans-1722
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3755](https://www.sqlalchemy.org/trac/ticket/3755)
- en: mysql
  id: totrans-1723
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: MySQL
- en: '**[mysql] [bug]**'
  id: totrans-1724
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[MySQL] [bug]**'
- en: 'Added support for parsing MySQL/Connector boolean and integer arguments within
    the URL query string: connection_timeout, connect_timeout, pool_size, get_warnings,
    raise_on_warnings, raw, consume_results, ssl_verify_cert, force_ipv6, pool_reset_session,
    compress, allow_local_infile, use_pure.'
  id: totrans-1725
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对在URL查询字符串中解析MySQL/Connector布尔值和整数参数的支持：connection_timeout, connect_timeout,
    pool_size, get_warnings, raise_on_warnings, raw, consume_results, ssl_verify_cert,
    force_ipv6, pool_reset_session, compress, allow_local_infile, use_pure。
- en: 'References: [#3787](https://www.sqlalchemy.org/trac/ticket/3787)'
  id: totrans-1726
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3787](https://www.sqlalchemy.org/trac/ticket/3787)
- en: misc
  id: totrans-1727
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [ext]**'
  id: totrans-1728
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug in `sqlalchemy.ext.baked` where the unbaking of a subquery eager loader
    query would fail due to a variable scoping issue, when multiple subquery loaders
    were involved. Pull request courtesy Mark Hahnenberg.
  id: totrans-1729
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了`sqlalchemy.ext.baked`中的bug，其中由于变量作用域问题，在涉及多个子查询加载程序时，解除子查询加载程序查询会失败。感谢Mark
    Hahnenberg的拉取请求。
- en: 'References: [#3743](https://www.sqlalchemy.org/trac/ticket/3743)'
  id: totrans-1730
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3743](https://www.sqlalchemy.org/trac/ticket/3743)
- en: 1.0.14
  id: totrans-1731
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.0.14
- en: 'Released: July 6, 2016'
  id: totrans-1732
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2016年7月6日
- en: examples
  id: totrans-1733
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples] [bug]**'
  id: totrans-1734
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples] [bug]**'
- en: Fixed a regression that occurred in the examples/vertical/dictlike-polymorphic.py
    example which prevented it from running.
  id: totrans-1735
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在examples/vertical/dictlike-polymorphic.py示例中发生的回归，导致无法运行的问题。
- en: 'References: [#3704](https://www.sqlalchemy.org/trac/ticket/3704)'
  id: totrans-1736
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3704](https://www.sqlalchemy.org/trac/ticket/3704)
- en: engine
  id: totrans-1737
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [bug] [postgresql]**'
  id: totrans-1738
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug] [postgresql]**'
- en: Fixed bug in cross-schema foreign key reflection in conjunction with the [`MetaData.schema`](../core/metadata.html#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData") argument, where a referenced table that is present
    in the “default” schema would fail since there would be no way to indicate a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") that has “blank” for a schema. The special symbol `sqlalchemy.schema.BLANK_SCHEMA`
    has been added as an available value for [`Table.schema`](../core/metadata.html#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table") and [`Sequence.schema`](../core/defaults.html#sqlalchemy.schema.Sequence.params.schema
    "sqlalchemy.schema.Sequence"), indicating that the schema name should be forced
    to be `None` even if [`MetaData.schema`](../core/metadata.html#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData") is specified.
  id: totrans-1739
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了与[`MetaData.schema`](../core/metadata.html#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData")参数一起在跨模式外键反射中的bug，在这种情况下，存在于“default”模式中的引用表将失败，因为没有办法指示一个具有“空白”模式的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")。特殊符号`sqlalchemy.schema.BLANK_SCHEMA`已添加为[`Table.schema`](../core/metadata.html#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table")和[`Sequence.schema`](../core/defaults.html#sqlalchemy.schema.Sequence.params.schema
    "sqlalchemy.schema.Sequence")的可用值，表示应强制模式名称为`None`，即使指定了[`MetaData.schema`](../core/metadata.html#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData")。
- en: 'References: [#3716](https://www.sqlalchemy.org/trac/ticket/3716)'
  id: totrans-1740
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3716](https://www.sqlalchemy.org/trac/ticket/3716)
- en: sql
  id: totrans-1741
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1742
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue in SQL math negation operator where the type of the expression would
    no longer be the numeric type of the original. This would cause issues where the
    type determined result set behaviors.
  id: totrans-1743
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了SQL数学否定运算符中的问题，其中表达式的类型将不再是原始类型的数值类型。这将导致确定结果集行为的问题。
- en: 'References: [#3735](https://www.sqlalchemy.org/trac/ticket/3735)'
  id: totrans-1744
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3735](https://www.sqlalchemy.org/trac/ticket/3735)
- en: '**[sql] [bug]**'
  id: totrans-1745
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug whereby the `__getstate__` / `__setstate__` methods for sqlalchemy.util.Properties
    were non-working due to the transition in the 1.0 series to `__slots__`. The issue
    potentially impacted some third-party applications. Pull request courtesy Pieter
    Mulder.
  id: totrans-1746
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在1.0系列过渡到`__slots__`时，导致sqlalchemy.util.Properties的`__getstate__` / `__setstate__`方法无法正常工作的bug。该问题可能会影响一些第三方应用程序。感谢Pieter
    Mulder的拉取请求。
- en: 'References: [#3728](https://www.sqlalchemy.org/trac/ticket/3728)'
  id: totrans-1747
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3728](https://www.sqlalchemy.org/trac/ticket/3728)
- en: '**[sql] [bug]**'
  id: totrans-1748
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: '`FromClause.count()` is pending deprecation for 1.1\. This function makes use
    of an arbitrary column in the table and is not reliable; for Core use, `func.count()`
    should be preferred.'
  id: totrans-1749
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`FromClause.count()`将在1.1中被弃用。此函数使用表中的任意列，并不可靠；对于核心使用，应优先使用`func.count()`。'
- en: 'References: [#3724](https://www.sqlalchemy.org/trac/ticket/3724)'
  id: totrans-1750
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3724](https://www.sqlalchemy.org/trac/ticket/3724)
- en: '**[sql] [bug]**'
  id: totrans-1751
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in [`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    structure which would cause it to not clone properly when a union was used, as
    is common in a recursive CTE. The improper cloning would cause errors when the
    CTE is used in various ORM contexts such as that of a [`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property").
  id: totrans-1752
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")结构中的bug，当使用联合时会导致它无法正确克隆，这在递归CTE中很常见。不正确的克隆会在各种ORM上下文中使用CTE时引发错误，例如[`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property")的上下文。
- en: 'References: [#3722](https://www.sqlalchemy.org/trac/ticket/3722)'
  id: totrans-1753
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3722](https://www.sqlalchemy.org/trac/ticket/3722)
- en: '**[sql] [bug]**'
  id: totrans-1754
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug whereby [`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata") would make a duplicate [`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") for each [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") object that featured the `unique=True` parameter.
  id: totrans-1755
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata")会为每个具有`unique=True`参数的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象创建重复的[`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint")的错误。
- en: 'References: [#3721](https://www.sqlalchemy.org/trac/ticket/3721)'
  id: totrans-1756
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3721](https://www.sqlalchemy.org/trac/ticket/3721)
- en: postgresql
  id: totrans-1757
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-1758
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug whereby [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") and [`Variant`](../core/type_api.html#sqlalchemy.types.Variant
    "sqlalchemy.types.Variant") types were not deeply inspected enough by the PostgreSQL
    dialect to determine if SMALLSERIAL or BIGSERIAL needed to be rendered rather
    than SERIAL.
  id: totrans-1759
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")和[`Variant`](../core/type_api.html#sqlalchemy.types.Variant
    "sqlalchemy.types.Variant")类型未被PostgreSQL方言深度检查以确定是否需要呈现SMALLSERIAL或BIGSERIAL而不是SERIAL的错误。
- en: 'References: [#3739](https://www.sqlalchemy.org/trac/ticket/3739)'
  id: totrans-1760
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3739](https://www.sqlalchemy.org/trac/ticket/3739)
- en: oracle
  id: totrans-1761
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-1762
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed bug in [`Select.with_for_update.of`](../core/selectable.html#sqlalchemy.sql.expression.Select.with_for_update.params.of
    "sqlalchemy.sql.expression.Select.with_for_update"), where the Oracle “rownum”
    approach to LIMIT/OFFSET would fail to accommodate for the expressions inside
    the “OF” clause, which must be stated at the topmost level referring to expression
    within the subquery. The expressions are now added to the subquery if needed.
  id: totrans-1763
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Select.with_for_update.of`](../core/selectable.html#sqlalchemy.sql.expression.Select.with_for_update.params.of
    "sqlalchemy.sql.expression.Select.with_for_update")中的错误，其中Oracle的“rownum”方法在处理LIMIT/OFFSET时未能考虑“OF”子句内的表达式，这些表达式必须在引用子查询内的表达式的最高级别陈述。如果需要，这些表达式现在将添加到子查询中。
- en: 'References: [#3741](https://www.sqlalchemy.org/trac/ticket/3741)'
  id: totrans-1764
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3741](https://www.sqlalchemy.org/trac/ticket/3741)
- en: examples
  id: totrans-1765
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples] [bug]**'
  id: totrans-1766
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples] [bug]**'
- en: Fixed a regression that occurred in the examples/vertical/dictlike-polymorphic.py
    example which prevented it from running.
  id: totrans-1767
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在示例/vertical/dictlike-polymorphic.py示例中发生的回归，导致无法运行的问题。
- en: 'References: [#3704](https://www.sqlalchemy.org/trac/ticket/3704)'
  id: totrans-1768
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3704](https://www.sqlalchemy.org/trac/ticket/3704)
- en: engine
  id: totrans-1769
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [bug] [postgresql]**'
  id: totrans-1770
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug] [postgresql]**'
- en: Fixed bug in cross-schema foreign key reflection in conjunction with the [`MetaData.schema`](../core/metadata.html#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData") argument, where a referenced table that is present
    in the “default” schema would fail since there would be no way to indicate a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") that has “blank” for a schema. The special symbol `sqlalchemy.schema.BLANK_SCHEMA`
    has been added as an available value for [`Table.schema`](../core/metadata.html#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table") and [`Sequence.schema`](../core/defaults.html#sqlalchemy.schema.Sequence.params.schema
    "sqlalchemy.schema.Sequence"), indicating that the schema name should be forced
    to be `None` even if [`MetaData.schema`](../core/metadata.html#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData") is specified.
  id: totrans-1771
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了跨模式外键反射中的错误，与[`MetaData.schema`](../core/metadata.html#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData")参数一起使用时，引用的表存在于“default”模式中，将会失败，因为没有办法指示一个具有“空白”模式的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")。特殊符号`sqlalchemy.schema.BLANK_SCHEMA`已添加为[`Table.schema`](../core/metadata.html#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table")和[`Sequence.schema`](../core/defaults.html#sqlalchemy.schema.Sequence.params.schema
    "sqlalchemy.schema.Sequence")的可用值，指示模式名称应强制为`None`，即使指定了[`MetaData.schema`](../core/metadata.html#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData")。
- en: 'References: [#3716](https://www.sqlalchemy.org/trac/ticket/3716)'
  id: totrans-1772
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3716](https://www.sqlalchemy.org/trac/ticket/3716)
- en: sql
  id: totrans-1773
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1774
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue in SQL math negation operator where the type of the expression would
    no longer be the numeric type of the original. This would cause issues where the
    type determined result set behaviors.
  id: totrans-1775
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了SQL数学否定运算符中的问题，其中表达式的类型将不再是原始表达式的数值类型。这会导致确定结果集行为的类型问题。
- en: 'References: [#3735](https://www.sqlalchemy.org/trac/ticket/3735)'
  id: totrans-1776
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3735](https://www.sqlalchemy.org/trac/ticket/3735)
- en: '**[sql] [bug]**'
  id: totrans-1777
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug whereby the `__getstate__` / `__setstate__` methods for sqlalchemy.util.Properties
    were non-working due to the transition in the 1.0 series to `__slots__`. The issue
    potentially impacted some third-party applications. Pull request courtesy Pieter
    Mulder.
  id: totrans-1778
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由于1.0系列向`__slots__`过渡而导致的sqlalchemy.util.Properties的`__getstate__` / `__setstate__`方法不起作用的bug。该问题可能影响某些第三方应用程序。感谢Pieter
    Mulder的拉取请求。
- en: 'References: [#3728](https://www.sqlalchemy.org/trac/ticket/3728)'
  id: totrans-1779
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3728](https://www.sqlalchemy.org/trac/ticket/3728)
- en: '**[sql] [bug]**'
  id: totrans-1780
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: '`FromClause.count()` is pending deprecation for 1.1\. This function makes use
    of an arbitrary column in the table and is not reliable; for Core use, `func.count()`
    should be preferred.'
  id: totrans-1781
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`FromClause.count()`在1.1版本中将被弃用。该函数使用表中的任意列，不可靠；对于核心使用，应优先使用`func.count()`。'
- en: 'References: [#3724](https://www.sqlalchemy.org/trac/ticket/3724)'
  id: totrans-1782
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3724](https://www.sqlalchemy.org/trac/ticket/3724)
- en: '**[sql] [bug]**'
  id: totrans-1783
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in [`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    structure which would cause it to not clone properly when a union was used, as
    is common in a recursive CTE. The improper cloning would cause errors when the
    CTE is used in various ORM contexts such as that of a [`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property").
  id: totrans-1784
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用联合时[`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")结构未能正确克隆的bug，这在递归CTE中很常见。不正确的克隆会导致在各种ORM上下文中使用CTE时出错，例如[`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property")。
- en: 'References: [#3722](https://www.sqlalchemy.org/trac/ticket/3722)'
  id: totrans-1785
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3722](https://www.sqlalchemy.org/trac/ticket/3722)
- en: '**[sql] [bug]**'
  id: totrans-1786
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug whereby [`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata") would make a duplicate [`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") for each [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") object that featured the `unique=True` parameter.
  id: totrans-1787
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata")会为每个具有`unique=True`参数的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象创建重复的[`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint")的bug。
- en: 'References: [#3721](https://www.sqlalchemy.org/trac/ticket/3721)'
  id: totrans-1788
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3721](https://www.sqlalchemy.org/trac/ticket/3721)
- en: postgresql
  id: totrans-1789
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-1790
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug whereby [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") and [`Variant`](../core/type_api.html#sqlalchemy.types.Variant
    "sqlalchemy.types.Variant") types were not deeply inspected enough by the PostgreSQL
    dialect to determine if SMALLSERIAL or BIGSERIAL needed to be rendered rather
    than SERIAL.
  id: totrans-1791
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即PostgreSQL方言未能深入检查[`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")和[`Variant`](../core/type_api.html#sqlalchemy.types.Variant
    "sqlalchemy.types.Variant")类型，以确定是否应该渲染SMALLSERIAL或BIGSERIAL而不是SERIAL。
- en: 'References: [#3739](https://www.sqlalchemy.org/trac/ticket/3739)'
  id: totrans-1792
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3739](https://www.sqlalchemy.org/trac/ticket/3739)
- en: oracle
  id: totrans-1793
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-1794
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed bug in [`Select.with_for_update.of`](../core/selectable.html#sqlalchemy.sql.expression.Select.with_for_update.params.of
    "sqlalchemy.sql.expression.Select.with_for_update"), where the Oracle “rownum”
    approach to LIMIT/OFFSET would fail to accommodate for the expressions inside
    the “OF” clause, which must be stated at the topmost level referring to expression
    within the subquery. The expressions are now added to the subquery if needed.
  id: totrans-1795
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Select.with_for_update.of`](../core/selectable.html#sqlalchemy.sql.expression.Select.with_for_update.params.of
    "sqlalchemy.sql.expression.Select.with_for_update")中的bug，在这里Oracle的“rownum”方法对LIMIT/OFFSET无法适应“OF”子句内的表达式，这些表达式必须在最顶层引用子查询内的表达式。如果需要，这些表达式现在将添加到子查询中。
- en: 'References: [#3741](https://www.sqlalchemy.org/trac/ticket/3741)'
  id: totrans-1796
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3741](https://www.sqlalchemy.org/trac/ticket/3741)
- en: 1.0.13
  id: totrans-1797
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.0.13
- en: 'Released: May 16, 2016'
  id: totrans-1798
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2016年5月16日
- en: orm
  id: totrans-1799
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1800
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in “evaluate” strategy of [`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update") and [`Query.delete()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.delete
    "sqlalchemy.orm.Query.delete") which would fail to accommodate a bound parameter
    with a “callable” value, as which occurs when filtering by a many-to-one equality
    expression along a relationship.
  id: totrans-1801
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update")和[`Query.delete()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.delete
    "sqlalchemy.orm.Query.delete")中“evaluate”策略中的一个bug，即无法适应具有“可调用”值的绑定参数，这种情况发生在沿着关系进行多对一相等表达式过滤时。
- en: 'References: [#3700](https://www.sqlalchemy.org/trac/ticket/3700)'
  id: totrans-1802
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3700](https://www.sqlalchemy.org/trac/ticket/3700)
- en: '**[orm] [bug]**'
  id: totrans-1803
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [错误]**'
- en: Fixed bug whereby the event listeners used for backrefs could be inadvertently
    applied multiple times, when using a deep class inheritance hierarchy in conjunction
    with multiple mapper configuration steps.
  id: totrans-1804
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即在使用深层类继承层次结构与多个映射器配置步骤同时使用时，用于反向引用的事件侦听器可能会被错误地应用多次。
- en: 'References: [#3710](https://www.sqlalchemy.org/trac/ticket/3710)'
  id: totrans-1805
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3710](https://www.sqlalchemy.org/trac/ticket/3710)
- en: '**[orm] [bug]**'
  id: totrans-1806
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [错误]**'
- en: Fixed bug whereby passing a [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct to the [`Query.group_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.group_by
    "sqlalchemy.orm.Query.group_by") method would raise an error, instead of interpreting
    the object as a SQL fragment.
  id: totrans-1807
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即将[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")构造传递给[`Query.group_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.group_by
    "sqlalchemy.orm.Query.group_by")方法会引发错误，而不是将对象解释为SQL片段。
- en: 'References: [#3706](https://www.sqlalchemy.org/trac/ticket/3706)'
  id: totrans-1808
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3706](https://www.sqlalchemy.org/trac/ticket/3706)
- en: '**[orm] [bug]**'
  id: totrans-1809
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [错误]**'
- en: Anonymous labeling is applied to a `func` construct that is passed to [`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property"), so that if the same attribute is referred to
    as a column expression twice the names are de-duped, thus avoiding “ambiguous
    column” errors. Previously, the `.label(None)` would need to be applied in order
    for the name to be de-anonymized.
  id: totrans-1810
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 匿名标记应用于传递给[`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property")的`func`构造，因此如果同一属性被引用两次作为列表达式，则名称将被去重，从而避免“模糊列”错误。以前，需要应用`.label(None)`以便取消匿名化名称。
- en: 'References: [#3663](https://www.sqlalchemy.org/trac/ticket/3663)'
  id: totrans-1811
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3663](https://www.sqlalchemy.org/trac/ticket/3663)
- en: '**[orm] [bug]**'
  id: totrans-1812
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [错误]**'
- en: Fixed regression appearing in the 1.0 series in ORM loading where the exception
    raised for an expected column missing would incorrectly be a `NoneType` error,
    rather than the expected [`NoSuchColumnError`](../core/exceptions.html#sqlalchemy.exc.NoSuchColumnError
    "sqlalchemy.exc.NoSuchColumnError").
  id: totrans-1813
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了1.0系列中ORM加载中出现的回归问题，即对于缺少的预期列引发的异常错误会错误地是`NoneType`错误，而不是预期的[`NoSuchColumnError`](../core/exceptions.html#sqlalchemy.exc.NoSuchColumnError
    "sqlalchemy.exc.NoSuchColumnError")。
- en: 'References: [#3658](https://www.sqlalchemy.org/trac/ticket/3658)'
  id: totrans-1814
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3658](https://www.sqlalchemy.org/trac/ticket/3658)
- en: examples
  id: totrans-1815
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples] [bug]**'
  id: totrans-1816
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[示例] [错误]**'
- en: Changed the “directed graph” example to no longer consider integer identifiers
    of nodes as significant; the “higher” / “lower” references now allow mutual edges
    in both directions.
  id: totrans-1817
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将“有向图”示例更改为不再将节点的整数标识符视为重要；“更高”/“更低”引用现在允许在两个方向上存在相互边。
- en: 'References: [#3698](https://www.sqlalchemy.org/trac/ticket/3698)'
  id: totrans-1818
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3698](https://www.sqlalchemy.org/trac/ticket/3698)
- en: sql
  id: totrans-1819
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SQL
- en: '**[sql] [bug]**'
  id: totrans-1820
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL] [错误]**'
- en: Fixed bug where when using `case_sensitive=False` with an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"), the result set would fail to correctly accommodate
    for duplicate column names in the result set, causing an error when the statement
    is executed in 1.0, and preventing the “ambiguous column” exception from functioning
    in 1.1.
  id: totrans-1821
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即在与[`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")一起使用`case_sensitive=False`时，结果集将无法正确适应结果集中的重复列名，导致在1.0中执行语句时出错，并阻止1.1中“模糊列”异常的功能。
- en: 'References: [#3690](https://www.sqlalchemy.org/trac/ticket/3690)'
  id: totrans-1822
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3690](https://www.sqlalchemy.org/trac/ticket/3690)
- en: '**[sql] [bug]**'
  id: totrans-1823
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL] [错误]**'
- en: Fixed bug where the negation of an EXISTS expression would not be properly typed
    as boolean in the result, and also would fail to be anonymously aliased in a SELECT
    list as is the case with a non-negated EXISTS construct.
  id: totrans-1824
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即对于一个EXISTS表达式的否定在结果中未正确类型化为布尔值，并且在SELECT列表中也未能匿名别名化，就像对于一个非否定的EXISTS结构一样。
- en: 'References: [#3682](https://www.sqlalchemy.org/trac/ticket/3682)'
  id: totrans-1825
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3682](https://www.sqlalchemy.org/trac/ticket/3682)
- en: '**[sql] [bug]**'
  id: totrans-1826
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where “unconsumed column names” exception would fail to be raised
    in the case where [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") were called with a list of parameter
    mappings, instead of a single mapping of parameters. Pull request courtesy Athena
    Yao.
  id: totrans-1827
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即在调用[`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values")时，如果传入的是参数映射列表而不是单个参数映射，则“未消耗的列名”异常不会被触发。感谢Athena
    Yao的拉取请求。
- en: 'References: [#3666](https://www.sqlalchemy.org/trac/ticket/3666)'
  id: totrans-1828
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3666](https://www.sqlalchemy.org/trac/ticket/3666)
- en: postgresql
  id: totrans-1829
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-1830
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: 'Added disconnect detection support for the error string “SSL error: decryption
    failed or bad record mac”. Pull request courtesy Iuri de Silvio.'
  id: totrans-1831
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '为错误字符串“SSL error: decryption failed or bad record mac”添加了断开检测支持。感谢Iuri de Silvio的拉取请求。'
- en: 'References: [#3715](https://www.sqlalchemy.org/trac/ticket/3715)'
  id: totrans-1832
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3715](https://www.sqlalchemy.org/trac/ticket/3715)
- en: mssql
  id: totrans-1833
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-1834
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed bug where by ROW_NUMBER OVER clause applied for OFFSET selects in SQL
    Server would inappropriately substitute a plain column from the local statement
    that overlaps with a label name used by the ORDER BY criteria of the statement.
  id: totrans-1835
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在SQL Server中应用于OFFSET选择的ROW_NUMBER OVER子句会不当地用本地语句中与语句的ORDER BY条件中使用的标签名称重叠的普通列替换的bug。
- en: 'References: [#3711](https://www.sqlalchemy.org/trac/ticket/3711)'
  id: totrans-1836
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3711](https://www.sqlalchemy.org/trac/ticket/3711)
- en: '**[mssql] [bug] [oracle]**'
  id: totrans-1837
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug] [oracle]**'
- en: Fixed regression appearing in the 1.0 series which would cause the Oracle and
    SQL Server dialects to incorrectly account for result set columns when these dialects
    would wrap a SELECT in a subquery in order to provide LIMIT/OFFSET behavior, and
    the original SELECT statement referred to the same column multiple times, such
    as a column and a label of that same column. This issue is related to [#3658](https://www.sqlalchemy.org/trac/ticket/3658)
    in that when the error occurred, it would also cause a `NoneType` error, rather
    than reporting that it couldn’t locate a column.
  id: totrans-1838
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了1.0系列中出现的回归问题，该问题会导致Oracle和SQL Server方言在这些方言将SELECT包装在子查询中以提供LIMIT/OFFSET行为时，不正确地计算结果集列，原始SELECT语句多次引用相同列时，例如一个列和该列的标签。这个问题与[#3658](https://www.sqlalchemy.org/trac/ticket/3658)有关，当错误发生时，它还会导致`NoneType`错误，而不是报告无法定位列。
- en: 'References: [#3657](https://www.sqlalchemy.org/trac/ticket/3657)'
  id: totrans-1839
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3657](https://www.sqlalchemy.org/trac/ticket/3657)
- en: oracle
  id: totrans-1840
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-1841
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed a bug in the cx_Oracle connect process that caused a TypeError when the
    either the user, password or dsn was empty. This prevented external authentication
    to Oracle databases, and prevented connecting to the default dsn. The connect
    string oracle:// now logs into the default dsn using the Operating System username,
    equivalent to connecting using ‘/’ with sqlplus.
  id: totrans-1842
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了cx_Oracle连接过程中的一个bug，当用户、密码或dsn为空时会导致TypeError。这阻止了对Oracle数据库的外部身份验证，并阻止了连接到默认dsn。现在，oracle://连接字符串使用操作系统用户名登录到默认dsn，相当于使用sqlplus连接时使用‘/’。
- en: 'References: [#3705](https://www.sqlalchemy.org/trac/ticket/3705)'
  id: totrans-1843
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3705](https://www.sqlalchemy.org/trac/ticket/3705)
- en: '**[oracle] [bug]**'
  id: totrans-1844
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed a bug in the result proxy used mainly by Oracle when binary and other
    LOB types are in play, such that when query / statement caching were used, the
    type-level result processors, notably that required by the binary type itself
    but also any other processor, would become lost after the first run of the statement
    due to it being removed from the cached result metadata.
  id: totrans-1845
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了主要由Oracle使用的结果代理中的一个bug，当二进制和其他LOB类型参与时，当使用查询/语句缓存时，类型级别的结果处理器，特别是二进制类型本身所需的处理器以及任何其他处理器，在第一次运行语句后会丢失，因为它从缓存的结果元数据中被移除。
- en: 'References: [#3699](https://www.sqlalchemy.org/trac/ticket/3699)'
  id: totrans-1846
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3699](https://www.sqlalchemy.org/trac/ticket/3699)
- en: misc
  id: totrans-1847
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [py3k]**'
  id: totrans-1848
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [py3k]**'
- en: Fixed bug in “to_list” conversion where a single bytes object would be turned
    into a list of individual characters. This would impact among other things using
    the [`Query.get()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.get "sqlalchemy.orm.Query.get")
    method on a primary key that’s a bytes object.
  id: totrans-1849
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '修复了“to_list”转换中的 bug，其中单个字节对象将被转换为单个字符列表。这将影响使用主键为字节对象的[`Query.get()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.get
    "sqlalchemy.orm.Query.get")方法等其他事项。 '
- en: 'References: [#3660](https://www.sqlalchemy.org/trac/ticket/3660)'
  id: totrans-1850
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3660](https://www.sqlalchemy.org/trac/ticket/3660)
- en: orm
  id: totrans-1851
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1852
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in “evaluate” strategy of [`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update") and [`Query.delete()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.delete
    "sqlalchemy.orm.Query.delete") which would fail to accommodate a bound parameter
    with a “callable” value, as which occurs when filtering by a many-to-one equality
    expression along a relationship.
  id: totrans-1853
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在[`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update")和[`Query.delete()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.delete
    "sqlalchemy.orm.Query.delete")的“evaluate”策略中的 bug，该 bug 无法适应具有“callable”值的绑定参数，当通过关系沿着多对一等式表达式进行过滤时会发生这种情况。
- en: 'References: [#3700](https://www.sqlalchemy.org/trac/ticket/3700)'
  id: totrans-1854
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3700](https://www.sqlalchemy.org/trac/ticket/3700)
- en: '**[orm] [bug]**'
  id: totrans-1855
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug whereby the event listeners used for backrefs could be inadvertently
    applied multiple times, when using a deep class inheritance hierarchy in conjunction
    with multiple mapper configuration steps.
  id: totrans-1856
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，当在深层类继承层次结构中与多个映射器配置步骤一起使用时，用于反向引用的事件侦听器可能会被错误地应用多次。
- en: 'References: [#3710](https://www.sqlalchemy.org/trac/ticket/3710)'
  id: totrans-1857
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3710](https://www.sqlalchemy.org/trac/ticket/3710)
- en: '**[orm] [bug]**'
  id: totrans-1858
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug whereby passing a [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct to the [`Query.group_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.group_by
    "sqlalchemy.orm.Query.group_by") method would raise an error, instead of interpreting
    the object as a SQL fragment.
  id: totrans-1859
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，通过将[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")构造传递给[`Query.group_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.group_by
    "sqlalchemy.orm.Query.group_by")方法会引发错误，而不是将对象解释为 SQL 片段。
- en: 'References: [#3706](https://www.sqlalchemy.org/trac/ticket/3706)'
  id: totrans-1860
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3706](https://www.sqlalchemy.org/trac/ticket/3706)
- en: '**[orm] [bug]**'
  id: totrans-1861
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Anonymous labeling is applied to a `func` construct that is passed to [`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property"), so that if the same attribute is referred to
    as a column expression twice the names are de-duped, thus avoiding “ambiguous
    column” errors. Previously, the `.label(None)` would need to be applied in order
    for the name to be de-anonymized.
  id: totrans-1862
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 匿名标记应用于传递给[`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property")的`func`构造，因此如果同一属性被引用两次作为列表达式，则名称将被去重，从而避免“模糊列”错误。以前，需要应用`.label(None)`以便取消匿名化名称。
- en: 'References: [#3663](https://www.sqlalchemy.org/trac/ticket/3663)'
  id: totrans-1863
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3663](https://www.sqlalchemy.org/trac/ticket/3663)
- en: '**[orm] [bug]**'
  id: totrans-1864
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression appearing in the 1.0 series in ORM loading where the exception
    raised for an expected column missing would incorrectly be a `NoneType` error,
    rather than the expected [`NoSuchColumnError`](../core/exceptions.html#sqlalchemy.exc.NoSuchColumnError
    "sqlalchemy.exc.NoSuchColumnError").
  id: totrans-1865
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 ORM 加载中出现的 1.0 系列中的回归，其中对于缺少的预期列引发的异常将错误地是一个`NoneType`错误，而不是预期的[`NoSuchColumnError`](../core/exceptions.html#sqlalchemy.exc.NoSuchColumnError
    "sqlalchemy.exc.NoSuchColumnError")。
- en: 'References: [#3658](https://www.sqlalchemy.org/trac/ticket/3658)'
  id: totrans-1866
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3658](https://www.sqlalchemy.org/trac/ticket/3658)
- en: examples
  id: totrans-1867
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 例子
- en: '**[examples] [bug]**'
  id: totrans-1868
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[例子] [bug]**'
- en: Changed the “directed graph” example to no longer consider integer identifiers
    of nodes as significant; the “higher” / “lower” references now allow mutual edges
    in both directions.
  id: totrans-1869
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将“有向图”示例更改为不再将节点的整数标识符视为重要；“更高”/“更低”引用现在允许双向的相互边。
- en: 'References: [#3698](https://www.sqlalchemy.org/trac/ticket/3698)'
  id: totrans-1870
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3698](https://www.sqlalchemy.org/trac/ticket/3698)
- en: sql
  id: totrans-1871
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1872
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where when using `case_sensitive=False` with an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"), the result set would fail to correctly accommodate
    for duplicate column names in the result set, causing an error when the statement
    is executed in 1.0, and preventing the “ambiguous column” exception from functioning
    in 1.1.
  id: totrans-1873
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当使用 `case_sensitive=False` 与 [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 时，结果集未能正确适应结果集中的重复列名，导致在 1.0 中执行语句时出错，并阻止了在 1.1 中“模糊列”异常的发生。
- en: 'References: [#3690](https://www.sqlalchemy.org/trac/ticket/3690)'
  id: totrans-1874
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3690](https://www.sqlalchemy.org/trac/ticket/3690)
- en: '**[sql] [bug]**'
  id: totrans-1875
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where the negation of an EXISTS expression would not be properly typed
    as boolean in the result, and also would fail to be anonymously aliased in a SELECT
    list as is the case with a non-negated EXISTS construct.
  id: totrans-1876
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了对 EXISTS 表达式的否定不会正确地被类型化为布尔值，并且在 SELECT 列表中也不会被匿名别名化的 bug，与非否定的 EXISTS 构造一样。
- en: 'References: [#3682](https://www.sqlalchemy.org/trac/ticket/3682)'
  id: totrans-1877
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3682](https://www.sqlalchemy.org/trac/ticket/3682)
- en: '**[sql] [bug]**'
  id: totrans-1878
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where “unconsumed column names” exception would fail to be raised
    in the case where [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") were called with a list of parameter
    mappings, instead of a single mapping of parameters. Pull request courtesy Athena
    Yao.
  id: totrans-1879
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") 被调用时，当传递了参数映射的列表而不是单个参数映射时，“未使用的列名”异常未能被触发的
    bug。感谢 Athena Yao 提交的 Pull 请求。
- en: 'References: [#3666](https://www.sqlalchemy.org/trac/ticket/3666)'
  id: totrans-1880
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3666](https://www.sqlalchemy.org/trac/ticket/3666)
- en: postgresql
  id: totrans-1881
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-1882
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: 'Added disconnect detection support for the error string “SSL error: decryption
    failed or bad record mac”. Pull request courtesy Iuri de Silvio.'
  id: totrans-1883
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '添加了对错误字符串 “SSL error: decryption failed or bad record mac” 的断开检测支持。感谢 Iuri
    de Silvio 提交的 Pull 请求。'
- en: 'References: [#3715](https://www.sqlalchemy.org/trac/ticket/3715)'
  id: totrans-1884
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3715](https://www.sqlalchemy.org/trac/ticket/3715)
- en: mssql
  id: totrans-1885
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-1886
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed bug where by ROW_NUMBER OVER clause applied for OFFSET selects in SQL
    Server would inappropriately substitute a plain column from the local statement
    that overlaps with a label name used by the ORDER BY criteria of the statement.
  id: totrans-1887
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 SQL Server 中对于 OFFSET 查询应用的 ROW_NUMBER OVER 子句会不正确地替换语句中与语句的 ORDER BY 条件重叠的纯列的
    bug。
- en: 'References: [#3711](https://www.sqlalchemy.org/trac/ticket/3711)'
  id: totrans-1888
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3711](https://www.sqlalchemy.org/trac/ticket/3711)
- en: '**[mssql] [bug] [oracle]**'
  id: totrans-1889
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug] [oracle]**'
- en: Fixed regression appearing in the 1.0 series which would cause the Oracle and
    SQL Server dialects to incorrectly account for result set columns when these dialects
    would wrap a SELECT in a subquery in order to provide LIMIT/OFFSET behavior, and
    the original SELECT statement referred to the same column multiple times, such
    as a column and a label of that same column. This issue is related to [#3658](https://www.sqlalchemy.org/trac/ticket/3658)
    in that when the error occurred, it would also cause a `NoneType` error, rather
    than reporting that it couldn’t locate a column.
  id: totrans-1890
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 1.0 系列中出现的回归，该回归会导致 Oracle 和 SQL Server 方言在将 SELECT 包装在子查询中以提供 LIMIT/OFFSET
    行为时，当原始 SELECT 语句多次引用同一列时（例如列和该列的标签）时，不正确地计算结果集列。此问题与 [#3658](https://www.sqlalchemy.org/trac/ticket/3658)
    相关，因为当错误发生时，它也会导致 `NoneType` 错误，而不是报告无法定位列。
- en: 'References: [#3657](https://www.sqlalchemy.org/trac/ticket/3657)'
  id: totrans-1891
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3657](https://www.sqlalchemy.org/trac/ticket/3657)
- en: oracle
  id: totrans-1892
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-1893
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed a bug in the cx_Oracle connect process that caused a TypeError when the
    either the user, password or dsn was empty. This prevented external authentication
    to Oracle databases, and prevented connecting to the default dsn. The connect
    string oracle:// now logs into the default dsn using the Operating System username,
    equivalent to connecting using ‘/’ with sqlplus.
  id: totrans-1894
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 cx_Oracle 连接过程中出现的 bug，当用户、密码或 dsn 中有任一为空时会导致 TypeError。这阻止了对 Oracle 数据库的外部认证，并阻止了连接到默认
    dsn。现在 connect 字符串 oracle:// 将使用操作系统用户名登录到默认 dsn，相当于使用 sqlplus 进行连接时使用 ‘/’。
- en: 'References: [#3705](https://www.sqlalchemy.org/trac/ticket/3705)'
  id: totrans-1895
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3705](https://www.sqlalchemy.org/trac/ticket/3705)
- en: '**[oracle] [bug]**'
  id: totrans-1896
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed a bug in the result proxy used mainly by Oracle when binary and other
    LOB types are in play, such that when query / statement caching were used, the
    type-level result processors, notably that required by the binary type itself
    but also any other processor, would become lost after the first run of the statement
    due to it being removed from the cached result metadata.
  id: totrans-1897
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了主要由Oracle使用的结果代理中的一个错误，当涉及二进制和其他LOB类型时，当使用查询/语句缓存时，类型级别的结果处理器，特别是二进制类型本身所需的处理器以及任何其他处理器，在第一次运行语句后会丢失，因为它从缓存的结果元数据中被移除。
- en: 'References: [#3699](https://www.sqlalchemy.org/trac/ticket/3699)'
  id: totrans-1898
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3699](https://www.sqlalchemy.org/trac/ticket/3699)
- en: misc
  id: totrans-1899
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [py3k]**'
  id: totrans-1900
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [py3k]**'
- en: Fixed bug in “to_list” conversion where a single bytes object would be turned
    into a list of individual characters. This would impact among other things using
    the [`Query.get()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.get "sqlalchemy.orm.Query.get")
    method on a primary key that’s a bytes object.
  id: totrans-1901
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“to_list”转换中的错误，其中单个字节对象将被转换为单个字符列表。这将影响使用[`Query.get()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.get
    "sqlalchemy.orm.Query.get")方法获取主键为字节对象的对象等其他情况。
- en: 'References: [#3660](https://www.sqlalchemy.org/trac/ticket/3660)'
  id: totrans-1902
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3660](https://www.sqlalchemy.org/trac/ticket/3660)
- en: 1.0.12
  id: totrans-1903
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.0.12
- en: 'Released: February 15, 2016'
  id: totrans-1904
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2016年2月15日
- en: orm
  id: totrans-1905
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1906
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in [`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge") where an object with a composite primary key that
    has values for some but not all of the PK fields would emit a SELECT statement
    leaking the internal NEVER_SET symbol into the query, rather than detecting that
    this object does not have a searchable primary key and no SELECT should be emitted.
  id: totrans-1907
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge")中的错误，其中具有复合主键的对象具有某些但不是所有PK字段的值会发出SELECT语句，将内部NEVER_SET符号泄漏到查询中，而不是检测到此对象没有可搜索的主键并且不应发出SELECT。
- en: 'References: [#3647](https://www.sqlalchemy.org/trac/ticket/3647)'
  id: totrans-1908
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3647](https://www.sqlalchemy.org/trac/ticket/3647)
- en: '**[orm] [bug]**'
  id: totrans-1909
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression since 0.9 where the 0.9 style loader options system failed
    to accommodate for multiple [`undefer_group()`](../orm/queryguide/columns.html#sqlalchemy.orm.undefer_group
    "sqlalchemy.orm.undefer_group") loader options in a single query. Multiple [`undefer_group()`](../orm/queryguide/columns.html#sqlalchemy.orm.undefer_group
    "sqlalchemy.orm.undefer_group") options will now be taken into account even against
    the same entity.
  id: totrans-1910
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自0.9版本以来的固定回归，0.9风格的加载器选项系统未能适应单个查询中多个[`undefer_group()`](../orm/queryguide/columns.html#sqlalchemy.orm.undefer_group
    "sqlalchemy.orm.undefer_group")加载器选项。现在将考虑多个[`undefer_group()`](../orm/queryguide/columns.html#sqlalchemy.orm.undefer_group
    "sqlalchemy.orm.undefer_group")选项，即使针对同一实体也是如此。
- en: 'References: [#3623](https://www.sqlalchemy.org/trac/ticket/3623)'
  id: totrans-1911
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3623](https://www.sqlalchemy.org/trac/ticket/3623)
- en: engine
  id: totrans-1912
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [bug] [mysql]**'
  id: totrans-1913
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug] [mysql]**'
- en: Revisiting [#2696](https://www.sqlalchemy.org/trac/ticket/2696), first released
    in 1.0.10, which attempts to work around Python 2’s lack of exception context
    reporting by emitting a warning for an exception that was interrupted by a second
    exception when attempting to roll back the already-failed transaction; this issue
    continues to occur for MySQL backends in conjunction with a savepoint that gets
    unexpectedly lost, which then causes a “no such savepoint” error when the rollback
    is attempted, obscuring what the original condition was.
  id: totrans-1914
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重新审视[#2696](https://www.sqlalchemy.org/trac/ticket/2696)，首次发布于1.0.10，试图通过发出警告来解决Python
    2缺乏异常上下文报告的问题，该警告是由于尝试回滚已失败的事务时被第二个异常中断而引发的；在MySQL后端与意外丢失的保存点一起发生时，此问题仍会发生，然后在尝试回滚时会导致“没有这样的保存点”错误，遮蔽了原始条件是什么。
- en: The approach has been generalized to the Core “safe reraise” function which
    takes place across the ORM and Core in any place that a transaction is being rolled
    back in response to an error which occurred trying to commit, including the context
    managers provided by [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") and [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"), and taking place for operations such as a failure
    on “RELEASE SAVEPOINT”. Previously, the fix was only in place for a specific path
    within the ORM flush/commit process; it now takes place for all transactional
    context managers as well.
  id: totrans-1915
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此方法已泛化为 Core 中的“安全重新引发”函数，该函数在 ORM 和 Core 中发生，任何处于尝试提交时出现错误而回滚事务的地方，包括 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 和 [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 提供的上下文管理器，并在诸如“RELEASE SAVEPOINT”失败等操作中进行。之前，此修复仅针对
    ORM flush/commit 过程中的特定路径；现在也针对所有事务上下文管理器执行。
- en: 'References: [#2696](https://www.sqlalchemy.org/trac/ticket/2696)'
  id: totrans-1916
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2696](https://www.sqlalchemy.org/trac/ticket/2696)
- en: sql
  id: totrans-1917
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1918
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where the “literal_binds” flag was not propagated for [`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert"), [`update()`](../core/dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update") or [`delete()`](../core/dml.html#sqlalchemy.sql.expression.delete
    "sqlalchemy.sql.expression.delete") constructs when compiled to string SQL. Pull
    request courtesy Tim Tate.
  id: totrans-1919
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在将 [`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert")、[`update()`](../core/dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update") 或 [`delete()`](../core/dml.html#sqlalchemy.sql.expression.delete
    "sqlalchemy.sql.expression.delete") 构造编译为字符串 SQL 时未传播“literal_binds”标志的问题。感谢 Tim
    Tate 提供的拉取请求。
- en: 'References: [#3643](https://www.sqlalchemy.org/trac/ticket/3643)'
  id: totrans-1920
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3643](https://www.sqlalchemy.org/trac/ticket/3643)
- en: '**[sql] [bug]**'
  id: totrans-1921
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where inadvertent use of the Python `__contains__` override with
    a column expression (e.g. by using `'x' in col`) would cause an endless loop in
    the case of an ARRAY type, as Python defers this to `__getitem__` access which
    never raises for this type. Overall, all use of `__contains__` now raises NotImplementedError.
  id: totrans-1922
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了无意中使用 Python 的 `__contains__` 覆盖与列表达式（例如使用 `'x' in col`）会导致 ARRAY 类型无限循环的问题，因为
    Python 将此推迟到永不为此类型引发异常的 `__getitem__` 访问。总的来说，现在所有对 `__contains__` 的使用都会引发 NotImplementedError。
- en: 'References: [#3642](https://www.sqlalchemy.org/trac/ticket/3642)'
  id: totrans-1923
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3642](https://www.sqlalchemy.org/trac/ticket/3642)
- en: '**[sql] [bug]**'
  id: totrans-1924
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    metadata construct which appeared around the 0.9 series where adding columns to
    a [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    that was unpickled would fail to correctly establish the [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") within the ‘c’ collection, leading to issues in areas
    such as ORM configuration. This could impact use cases such as `extend_existing`
    and others.
  id: totrans-1925
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 0.9 系列左右出现的 [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    元数据构造中的错误，其中向反序列化的 [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    添加列时会无法正确建立 [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    在‘c’集合中，导致在诸如 ORM 配置等领域出现问题。这可能影响 `extend_existing` 等用例。
- en: 'References: [#3632](https://www.sqlalchemy.org/trac/ticket/3632)'
  id: totrans-1926
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3632](https://www.sqlalchemy.org/trac/ticket/3632)
- en: postgresql
  id: totrans-1927
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-1928
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug in [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct where a double-colon expression would
    not escape properly, e.g. `some\:\:expr`, as is most commonly required when rendering
    PostgreSQL-style CAST expressions.
  id: totrans-1929
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")
    构造中的错误，其中双冒号表达式未正确转义，例如 `some\:\:expr`，这在呈现 PostgreSQL 样式的 CAST 表达式时最常需要。
- en: 'References: [#3644](https://www.sqlalchemy.org/trac/ticket/3644)'
  id: totrans-1930
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3644](https://www.sqlalchemy.org/trac/ticket/3644)
- en: mssql
  id: totrans-1931
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-1932
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed the syntax of the [`extract()`](../core/sqlelement.html#sqlalchemy.sql.expression.extract
    "sqlalchemy.sql.expression.extract") function when used on MSSQL against a datetime
    value; the quotes around the keyword are removed. Pull request courtesy Guillaume
    Doumenc.
  id: totrans-1933
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在对 MSSQL 上的日期时间值使用 [`extract()`](../core/sqlelement.html#sqlalchemy.sql.expression.extract
    "sqlalchemy.sql.expression.extract") 函数时的语法问题；关键字周围的引号已被移除。感谢 Guillaume Doumenc
    提供的拉取请求。
- en: 'References: [#3624](https://www.sqlalchemy.org/trac/ticket/3624)'
  id: totrans-1934
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3624](https://www.sqlalchemy.org/trac/ticket/3624)
- en: '**[mssql] [bug] [firebird]**'
  id: totrans-1935
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug] [firebird]**'
- en: Fixed 1.0 regression where the eager fetch of cursor.rowcount was no longer
    called for an UPDATE or DELETE statement emitted via plain text or via the [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct, affecting those drivers that erase
    cursor.rowcount once the cursor is closed such as SQL Server ODBC and Firebird
    drivers.
  id: totrans-1936
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 1.0 版中的一个回归，其中通过纯文本或通过 [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") 构造发出的 UPDATE 或 DELETE 语句的即时提取不再调用 cursor.rowcount，影响那些一旦关闭游标就擦除
    cursor.rowcount 的驱动程序，例如 SQL Server ODBC 和 Firebird 驱动程序。
- en: 'References: [#3622](https://www.sqlalchemy.org/trac/ticket/3622)'
  id: totrans-1937
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3622](https://www.sqlalchemy.org/trac/ticket/3622)
- en: oracle
  id: totrans-1938
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug] [jython]**'
  id: totrans-1939
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug] [jython]**'
- en: Fixed a small issue in the Jython Oracle compiler involving the rendering of
    “RETURNING” which allows this currently unsupported/untested dialect to work rudimentarily
    with the 1.0 series. Pull request courtesy Carlos Rivas.
  id: totrans-1940
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 Jython Oracle 编译器中的一个小问题，涉及到 “RETURNING” 的渲染，该问题允许当前不受支持/未经测试的方言与 1.0 系列基本工作。感谢
    Carlos Rivas 提供的拉取请求。
- en: 'References: [#3621](https://www.sqlalchemy.org/trac/ticket/3621)'
  id: totrans-1941
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3621](https://www.sqlalchemy.org/trac/ticket/3621)
- en: misc
  id: totrans-1942
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [py3k]**'
  id: totrans-1943
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [py3k]**'
- en: Fixed bug where some exception re-raise scenarios would attach the exception
    to itself as the “cause”; while the Python 3 interpreter is OK with this, it could
    cause endless loops in iPython.
  id: totrans-1944
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一些异常重新引发场景会将异常附加到自身作为“原因”的错误；虽然 Python 3 解释器可以接受这样做，但它可能会在 iPython 中导致无限循环。
- en: 'References: [#3625](https://www.sqlalchemy.org/trac/ticket/3625)'
  id: totrans-1945
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3625](https://www.sqlalchemy.org/trac/ticket/3625)
- en: orm
  id: totrans-1946
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1947
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in [`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge") where an object with a composite primary key that
    has values for some but not all of the PK fields would emit a SELECT statement
    leaking the internal NEVER_SET symbol into the query, rather than detecting that
    this object does not have a searchable primary key and no SELECT should be emitted.
  id: totrans-1948
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge") 中的一个错误，在此错误中，具有复合主键的对象对于一些但不是所有 PK 字段的值会发出一个 SELECT
    语句，泄露内部的 NEVER_SET 符号到查询中，而不是检测到此对象没有可搜索的主键，并且不应发出任何 SELECT。
- en: 'References: [#3647](https://www.sqlalchemy.org/trac/ticket/3647)'
  id: totrans-1949
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3647](https://www.sqlalchemy.org/trac/ticket/3647)
- en: '**[orm] [bug]**'
  id: totrans-1950
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression since 0.9 where the 0.9 style loader options system failed
    to accommodate for multiple [`undefer_group()`](../orm/queryguide/columns.html#sqlalchemy.orm.undefer_group
    "sqlalchemy.orm.undefer_group") loader options in a single query. Multiple [`undefer_group()`](../orm/queryguide/columns.html#sqlalchemy.orm.undefer_group
    "sqlalchemy.orm.undefer_group") options will now be taken into account even against
    the same entity.
  id: totrans-1951
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了自 0.9 版以来的一个回归，其中 0.9 风格的加载器选项系统未能适应单个查询中的多个 [`undefer_group()`](../orm/queryguide/columns.html#sqlalchemy.orm.undefer_group
    "sqlalchemy.orm.undefer_group") 加载器选项。现在将考虑多个 [`undefer_group()`](../orm/queryguide/columns.html#sqlalchemy.orm.undefer_group
    "sqlalchemy.orm.undefer_group") 选项，即使针对相同的实体也是如此。
- en: 'References: [#3623](https://www.sqlalchemy.org/trac/ticket/3623)'
  id: totrans-1952
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3623](https://www.sqlalchemy.org/trac/ticket/3623)
- en: engine
  id: totrans-1953
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug] [mysql]**'
  id: totrans-1954
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug] [mysql]**'
- en: Revisiting [#2696](https://www.sqlalchemy.org/trac/ticket/2696), first released
    in 1.0.10, which attempts to work around Python 2’s lack of exception context
    reporting by emitting a warning for an exception that was interrupted by a second
    exception when attempting to roll back the already-failed transaction; this issue
    continues to occur for MySQL backends in conjunction with a savepoint that gets
    unexpectedly lost, which then causes a “no such savepoint” error when the rollback
    is attempted, obscuring what the original condition was.
  id: totrans-1955
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重新访问 [#2696](https://www.sqlalchemy.org/trac/ticket/2696)，首次发布于 1.0.10 版本中，该版本尝试通过发出警告来解决
    Python 2 缺乏异常上下文报告的问题，该异常被第二个异常中断时尝试回滚已经失败的事务；这个问题继续出现在 MySQL 后端与意外丢失的保存点一起使用时，然后当尝试回滚时会导致“没有这样的保存点”错误，遮蔽了原始条件是什么。
- en: The approach has been generalized to the Core “safe reraise” function which
    takes place across the ORM and Core in any place that a transaction is being rolled
    back in response to an error which occurred trying to commit, including the context
    managers provided by [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") and [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"), and taking place for operations such as a failure
    on “RELEASE SAVEPOINT”. Previously, the fix was only in place for a specific path
    within the ORM flush/commit process; it now takes place for all transactional
    context managers as well.
  id: totrans-1956
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该方法已被泛化为Core中的“安全重新引发”函数，该函数在ORM和Core中的任何事务因尝试提交时发生错误而被回滚时发生，包括[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")和[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")提供的上下文管理器，并在诸如“RELEASE SAVEPOINT”失败等操作中发生。以前，修复仅适用于ORM刷新/提交过程中的特定路径；现在它也适用于所有事务上下文管理器。
- en: 'References: [#2696](https://www.sqlalchemy.org/trac/ticket/2696)'
  id: totrans-1957
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2696](https://www.sqlalchemy.org/trac/ticket/2696)
- en: sql
  id: totrans-1958
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1959
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where the “literal_binds” flag was not propagated for [`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert"), [`update()`](../core/dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update") or [`delete()`](../core/dml.html#sqlalchemy.sql.expression.delete
    "sqlalchemy.sql.expression.delete") constructs when compiled to string SQL. Pull
    request courtesy Tim Tate.
  id: totrans-1960
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在将[`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert")、[`update()`](../core/dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update")或[`delete()`](../core/dml.html#sqlalchemy.sql.expression.delete
    "sqlalchemy.sql.expression.delete")构造编译为字符串SQL时，“literal_binds”标志未传播的问题。感谢Tim
    Tate的拉取请求。
- en: 'References: [#3643](https://www.sqlalchemy.org/trac/ticket/3643)'
  id: totrans-1961
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3643](https://www.sqlalchemy.org/trac/ticket/3643)
- en: '**[sql] [bug]**'
  id: totrans-1962
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where inadvertent use of the Python `__contains__` override with
    a column expression (e.g. by using `'x' in col`) would cause an endless loop in
    the case of an ARRAY type, as Python defers this to `__getitem__` access which
    never raises for this type. Overall, all use of `__contains__` now raises NotImplementedError.
  id: totrans-1963
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在意外使用Python `__contains__` 覆盖与列表达式（例如通过使用 `'x' in col`）会导致ARRAY类型无限循环的问题，因为Python将此延迟到`__getitem__`访问，而此类型永远不会引发。总体而言，现在所有对`__contains__`的使用都会引发NotImplementedError。
- en: 'References: [#3642](https://www.sqlalchemy.org/trac/ticket/3642)'
  id: totrans-1964
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3642](https://www.sqlalchemy.org/trac/ticket/3642)
- en: '**[sql] [bug]**'
  id: totrans-1965
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    metadata construct which appeared around the 0.9 series where adding columns to
    a [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    that was unpickled would fail to correctly establish the [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") within the ‘c’ collection, leading to issues in areas
    such as ORM configuration. This could impact use cases such as `extend_existing`
    and others.
  id: totrans-1966
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在0.9系列左右出现的[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")元数据构造中的错误，向[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")添加列时，反序列化的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")未能正确建立‘c’集合中的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")，导致ORM配置等领域出现问题。这可能会影响`extend_existing`等用例。
- en: 'References: [#3632](https://www.sqlalchemy.org/trac/ticket/3632)'
  id: totrans-1967
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3632](https://www.sqlalchemy.org/trac/ticket/3632)
- en: postgresql
  id: totrans-1968
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-1969
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug in [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct where a double-colon expression would
    not escape properly, e.g. `some\:\:expr`, as is most commonly required when rendering
    PostgreSQL-style CAST expressions.
  id: totrans-1970
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")构造中的错误，双冒号表达式无法正确转义，例如`some\:\:expr`，这在渲染PostgreSQL风格的CAST表达式时最常见。
- en: 'References: [#3644](https://www.sqlalchemy.org/trac/ticket/3644)'
  id: totrans-1971
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3644](https://www.sqlalchemy.org/trac/ticket/3644)
- en: mssql
  id: totrans-1972
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-1973
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed the syntax of the [`extract()`](../core/sqlelement.html#sqlalchemy.sql.expression.extract
    "sqlalchemy.sql.expression.extract") function when used on MSSQL against a datetime
    value; the quotes around the keyword are removed. Pull request courtesy Guillaume
    Doumenc.
  id: totrans-1974
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在MSSQL上针对日期时间值使用[`extract()`](../core/sqlelement.html#sqlalchemy.sql.expression.extract
    "sqlalchemy.sql.expression.extract")函数的语法；关键字周围的引号被移除。感谢Guillaume Doumenc的拉取请求。
- en: 'References: [#3624](https://www.sqlalchemy.org/trac/ticket/3624)'
  id: totrans-1975
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3624](https://www.sqlalchemy.org/trac/ticket/3624)
- en: '**[mssql] [bug] [firebird]**'
  id: totrans-1976
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug] [firebird]**'
- en: Fixed 1.0 regression where the eager fetch of cursor.rowcount was no longer
    called for an UPDATE or DELETE statement emitted via plain text or via the [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct, affecting those drivers that erase
    cursor.rowcount once the cursor is closed such as SQL Server ODBC and Firebird
    drivers.
  id: totrans-1977
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 1.0 版本中的一个回归问题，即对于通过纯文本或通过[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")构造发出的 UPDATE 或 DELETE 语句，不再调用 cursor.rowcount
    的急切获取，影响那些在关闭游标后擦除 cursor.rowcount 的驱动程序，如 SQL Server ODBC 和 Firebird 驱动程序。
- en: 'References: [#3622](https://www.sqlalchemy.org/trac/ticket/3622)'
  id: totrans-1978
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3622](https://www.sqlalchemy.org/trac/ticket/3622)
- en: oracle
  id: totrans-1979
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug] [jython]**'
  id: totrans-1980
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug] [jython]**'
- en: Fixed a small issue in the Jython Oracle compiler involving the rendering of
    “RETURNING” which allows this currently unsupported/untested dialect to work rudimentarily
    with the 1.0 series. Pull request courtesy Carlos Rivas.
  id: totrans-1981
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 Jython Oracle 编译器中的一个小问题，涉及“RETURNING”的呈现，这使得当前不受支持/未经测试的方言可以在 1.0 系列中基本工作。感谢
    Carlos Rivas 的拉取请求。
- en: 'References: [#3621](https://www.sqlalchemy.org/trac/ticket/3621)'
  id: totrans-1982
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3621](https://www.sqlalchemy.org/trac/ticket/3621)
- en: misc
  id: totrans-1983
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [py3k]**'
  id: totrans-1984
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [py3k]**'
- en: Fixed bug where some exception re-raise scenarios would attach the exception
    to itself as the “cause”; while the Python 3 interpreter is OK with this, it could
    cause endless loops in iPython.
  id: totrans-1985
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一些异常重新引发场景会将异常附加到自身作为“原因”的 bug；虽然 Python 3 解释器可以接受这种情况，但在 iPython 中可能会导致无限循环。
- en: 'References: [#3625](https://www.sqlalchemy.org/trac/ticket/3625)'
  id: totrans-1986
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3625](https://www.sqlalchemy.org/trac/ticket/3625)
- en: 1.0.11
  id: totrans-1987
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.0.11
- en: 'Released: December 22, 2015'
  id: totrans-1988
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2015年12月22日
- en: orm
  id: totrans-1989
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1990
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression caused in 1.0.10 by the fix for [#3593](https://www.sqlalchemy.org/trac/ticket/3593)
    where the check added for a polymorphic joinedload from a poly_subclass->class->poly_baseclass
    connection would fail for the scenario of class->poly_subclass->class.
  id: totrans-1991
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于对 [#3593](https://www.sqlalchemy.org/trac/ticket/3593) 的修复导致 1.0.10 中引入的回归
    bug，对于从 poly_subclass->class->poly_baseclass 连接到 polymorphic joinedload 的检查会在
    class->poly_subclass->class 的情况下失败。
- en: 'References: [#3611](https://www.sqlalchemy.org/trac/ticket/3611)'
  id: totrans-1992
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3611](https://www.sqlalchemy.org/trac/ticket/3611)
- en: '**[orm] [bug]**'
  id: totrans-1993
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where [`Session.bulk_update_mappings()`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_update_mappings
    "sqlalchemy.orm.Session.bulk_update_mappings") and related would not bump a version
    id counter when in use. The experience here is still a little rough as the original
    version id is required in the given dictionaries and there’s not clean error reporting
    on that yet.
  id: totrans-1994
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Session.bulk_update_mappings()`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_update_mappings
    "sqlalchemy.orm.Session.bulk_update_mappings")及相关功能在使用时未增加版本 id 计数器的 bug。这里的体验仍然有些粗糙，因为给定字典中需要原始版本
    id，并且目前还没有清晰的错误报告。
- en: 'References: [#3610](https://www.sqlalchemy.org/trac/ticket/3610)'
  id: totrans-1995
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3610](https://www.sqlalchemy.org/trac/ticket/3610)
- en: '**[orm] [bug]**'
  id: totrans-1996
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Major fixes to the [`Mapper.eager_defaults`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.eager_defaults
    "sqlalchemy.orm.Mapper") flag, this flag would not be honored correctly in the
    case that multiple UPDATE statements were to be emitted, either as part of a flush
    or a bulk update operation. Additionally, RETURNING would be emitted unnecessarily
    within update statements.
  id: totrans-1997
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对[`Mapper.eager_defaults`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.eager_defaults
    "sqlalchemy.orm.Mapper")标志进行了重大修复，该标志在多个 UPDATE 语句需要被发出时没有被正确地遵守，无论是作为 flush 的一部分还是作为批量更新操作。此外，在更新语句中不必要地发出了
    RETURNING。
- en: 'References: [#3609](https://www.sqlalchemy.org/trac/ticket/3609)'
  id: totrans-1998
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3609](https://www.sqlalchemy.org/trac/ticket/3609)
- en: '**[orm] [bug]**'
  id: totrans-1999
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where use of the [`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from") method would cause a subsequent call to the
    [`Query.with_parent()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.with_parent
    "sqlalchemy.orm.Query.with_parent") method to fail.
  id: totrans-2000
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用[`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from")方法会导致后续调用[`Query.with_parent()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.with_parent
    "sqlalchemy.orm.Query.with_parent")方法失败的 bug。
- en: 'References: [#3606](https://www.sqlalchemy.org/trac/ticket/3606)'
  id: totrans-2001
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3606](https://www.sqlalchemy.org/trac/ticket/3606)
- en: sql
  id: totrans-2002
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-2003
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in `Update.return_defaults()` which would cause all insert-default
    holding columns not otherwise included in the SET clause (such as primary key
    cols) to get rendered into the RETURNING even though this is an UPDATE.
  id: totrans-2004
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了`Update.return_defaults()`中的错误，该错误会导致所有未包含在SET子句中（例如主键列）的插入默认保持列被渲染到RETURNING中，尽管这是一个UPDATE操作。
- en: 'References: [#3609](https://www.sqlalchemy.org/trac/ticket/3609)'
  id: totrans-2005
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3609](https://www.sqlalchemy.org/trac/ticket/3609)
- en: mysql
  id: totrans-2006
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-2007
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: An adjustment to the regular expression used to parse MySQL views, such that
    we no longer assume the “ALGORITHM” keyword is present in the reflected view source,
    as some users have reported this not being present in some Amazon RDS environments.
  id: totrans-2008
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了用于解析MySQL视图的正则表达式，不再假定反射视图源中存在“ALGORITHM”关键字，因为一些用户报告在某些Amazon RDS环境中不存在该关键字。
- en: 'References: [#3613](https://www.sqlalchemy.org/trac/ticket/3613)'
  id: totrans-2009
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3613](https://www.sqlalchemy.org/trac/ticket/3613)
- en: '**[mysql] [bug]**'
  id: totrans-2010
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Added new reserved words for MySQL 5.7 to the MySQL dialect, including ‘generated’,
    ‘optimizer_costs’, ‘stored’, ‘virtual’. Pull request courtesy Hanno Schlichting.
  id: totrans-2011
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向MySQL 5.7的MySQL方言添加了新的保留字，包括‘generated’、‘optimizer_costs’、‘stored’、‘virtual’。感谢Hanno
    Schlichting的拉取请求。
- en: misc
  id: totrans-2012
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [ext]**'
  id: totrans-2013
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Further fixes to [#3605](https://www.sqlalchemy.org/trac/ticket/3605), pop method
    on [`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict"), where the “default” argument was not included.
  id: totrans-2014
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 进一步修复了[#3605](https://www.sqlalchemy.org/trac/ticket/3605)，在[`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict")上的pop方法，其中“default”参数未包含。
- en: 'References: [#3605](https://www.sqlalchemy.org/trac/ticket/3605)'
  id: totrans-2015
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3605](https://www.sqlalchemy.org/trac/ticket/3605)
- en: '**[bug] [ext]**'
  id: totrans-2016
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug in baked loader system where the systemwide monkeypatch for setting
    up baked lazy loaders would interfere with other loader strategies that rely on
    lazy loading as a fallback, e.g. joined and subquery eager loaders, leading to
    `IndexError` exceptions at mapper configuration time.
  id: totrans-2017
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了烘焙加载器系统中的错误，该系统的全局猴子补丁用于设置烘焙懒加载器，会干扰依赖延迟加载作为后备的其他加载器策略，例如连接和子查询急加载器，在映射器配置时导致`IndexError`异常。
- en: 'References: [#3612](https://www.sqlalchemy.org/trac/ticket/3612)'
  id: totrans-2018
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3612](https://www.sqlalchemy.org/trac/ticket/3612)
- en: orm
  id: totrans-2019
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-2020
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression caused in 1.0.10 by the fix for [#3593](https://www.sqlalchemy.org/trac/ticket/3593)
    where the check added for a polymorphic joinedload from a poly_subclass->class->poly_baseclass
    connection would fail for the scenario of class->poly_subclass->class.
  id: totrans-2021
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了1.0.10中由于[#3593](https://www.sqlalchemy.org/trac/ticket/3593)修复引起的回归，其中为poly_subclass->class->poly_baseclass连接添加了多态joinedload的检查会导致在class->poly_subclass->class的情况下失败。
- en: 'References: [#3611](https://www.sqlalchemy.org/trac/ticket/3611)'
  id: totrans-2022
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3611](https://www.sqlalchemy.org/trac/ticket/3611)
- en: '**[orm] [bug]**'
  id: totrans-2023
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where [`Session.bulk_update_mappings()`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_update_mappings
    "sqlalchemy.orm.Session.bulk_update_mappings") and related would not bump a version
    id counter when in use. The experience here is still a little rough as the original
    version id is required in the given dictionaries and there’s not clean error reporting
    on that yet.
  id: totrans-2024
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Session.bulk_update_mappings()`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_update_mappings
    "sqlalchemy.orm.Session.bulk_update_mappings")等在使用时不会增加版本id计数器的错误。这里的体验仍然有点粗糙，因为给定字典中仍需要原始版本id，并且尚无干净的错误报告。
- en: 'References: [#3610](https://www.sqlalchemy.org/trac/ticket/3610)'
  id: totrans-2025
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3610](https://www.sqlalchemy.org/trac/ticket/3610)
- en: '**[orm] [bug]**'
  id: totrans-2026
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Major fixes to the [`Mapper.eager_defaults`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.eager_defaults
    "sqlalchemy.orm.Mapper") flag, this flag would not be honored correctly in the
    case that multiple UPDATE statements were to be emitted, either as part of a flush
    or a bulk update operation. Additionally, RETURNING would be emitted unnecessarily
    within update statements.
  id: totrans-2027
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对[`Mapper.eager_defaults`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.eager_defaults
    "sqlalchemy.orm.Mapper")标志进行了重大修复，该标志在需要发出多个UPDATE语句时（作为刷新或批量更新操作的一部分）不会被正确执行。此外，在更新语句中不必要地发出RETURNING。
- en: 'References: [#3609](https://www.sqlalchemy.org/trac/ticket/3609)'
  id: totrans-2028
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3609](https://www.sqlalchemy.org/trac/ticket/3609)
- en: '**[orm] [bug]**'
  id: totrans-2029
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where use of the [`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from") method would cause a subsequent call to the
    [`Query.with_parent()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.with_parent
    "sqlalchemy.orm.Query.with_parent") method to fail.
  id: totrans-2030
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用 [`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from") 方法会导致随后调用 [`Query.with_parent()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.with_parent
    "sqlalchemy.orm.Query.with_parent") 方法失败的 bug。
- en: 'References: [#3606](https://www.sqlalchemy.org/trac/ticket/3606)'
  id: totrans-2031
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3606](https://www.sqlalchemy.org/trac/ticket/3606)
- en: sql
  id: totrans-2032
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-2033
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in `Update.return_defaults()` which would cause all insert-default
    holding columns not otherwise included in the SET clause (such as primary key
    cols) to get rendered into the RETURNING even though this is an UPDATE.
  id: totrans-2034
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 `Update.return_defaults()` 中的错误，该错误会导致所有插入默认列（否则不包含在 SET 子句中的列，例如主键列）被渲染到
    RETURNING 中，尽管这是一个 UPDATE。
- en: 'References: [#3609](https://www.sqlalchemy.org/trac/ticket/3609)'
  id: totrans-2035
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3609](https://www.sqlalchemy.org/trac/ticket/3609)
- en: mysql
  id: totrans-2036
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-2037
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: An adjustment to the regular expression used to parse MySQL views, such that
    we no longer assume the “ALGORITHM” keyword is present in the reflected view source,
    as some users have reported this not being present in some Amazon RDS environments.
  id: totrans-2038
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了用于解析 MySQL 视图的正则表达式，以便我们不再假设反映视图源中存在 “ALGORITHM” 关键字，因为一些用户报告称在某些 Amazon
    RDS 环境中未出现。
- en: 'References: [#3613](https://www.sqlalchemy.org/trac/ticket/3613)'
  id: totrans-2039
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3613](https://www.sqlalchemy.org/trac/ticket/3613)
- en: '**[mysql] [bug]**'
  id: totrans-2040
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Added new reserved words for MySQL 5.7 to the MySQL dialect, including ‘generated’,
    ‘optimizer_costs’, ‘stored’, ‘virtual’. Pull request courtesy Hanno Schlichting.
  id: totrans-2041
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将新的保留字添加到 MySQL 5.7 的 MySQL 方言中，包括 ‘generated’、‘optimizer_costs’、‘stored’、‘virtual’。Pull
    request 由 Hanno Schlichting 提供。
- en: misc
  id: totrans-2042
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[bug] [ext]**'
  id: totrans-2043
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Further fixes to [#3605](https://www.sqlalchemy.org/trac/ticket/3605), pop method
    on [`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict"), where the “default” argument was not included.
  id: totrans-2044
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对 [#3605](https://www.sqlalchemy.org/trac/ticket/3605) 进行了进一步修复，即对 [`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict") 的 pop 方法，在其中没有包含 “default” 参数。
- en: 'References: [#3605](https://www.sqlalchemy.org/trac/ticket/3605)'
  id: totrans-2045
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3605](https://www.sqlalchemy.org/trac/ticket/3605)
- en: '**[bug] [ext]**'
  id: totrans-2046
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug in baked loader system where the systemwide monkeypatch for setting
    up baked lazy loaders would interfere with other loader strategies that rely on
    lazy loading as a fallback, e.g. joined and subquery eager loaders, leading to
    `IndexError` exceptions at mapper configuration time.
  id: totrans-2047
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了烘焙加载器系统中的错误，该系统的系统范围 monkeypatch 用于设置烘焙延迟加载器会干扰依赖惰性加载作为后备的其他加载器策略，例如 joined
    和子查询急切加载器，导致在映射器配置时出现 `IndexError` 异常。
- en: 'References: [#3612](https://www.sqlalchemy.org/trac/ticket/3612)'
  id: totrans-2048
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3612](https://www.sqlalchemy.org/trac/ticket/3612)
- en: 1.0.10
  id: totrans-2049
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.0.10
- en: 'Released: December 11, 2015'
  id: totrans-2050
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2015 年 12 月 11 日
- en: orm
  id: totrans-2051
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-2052
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where post_update on a many-to-one relationship would fail to emit
    an UPDATE in the case where the attribute were set to None and not previously
    loaded.
  id: totrans-2053
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即在一对多关系的 post_update 中，如果属性设置为 None 而且之前没有加载，则会导致 UPDATE 未发出。
- en: 'References: [#3599](https://www.sqlalchemy.org/trac/ticket/3599)'
  id: totrans-2054
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3599](https://www.sqlalchemy.org/trac/ticket/3599)
- en: '**[orm] [bug]**'
  id: totrans-2055
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug which is actually a regression that occurred between versions 0.8.0
    and 0.8.1, due [#2714](https://www.sqlalchemy.org/trac/ticket/2714). The case
    where joined eager loading needs to join out over a subclass-bound relationship
    when “with_polymorphic” were also used would fail to join from the correct entity.
  id: totrans-2056
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，实际上是在版本 0.8.0 和 0.8.1 之间发生的回归，由 [#2714](https://www.sqlalchemy.org/trac/ticket/2714)
    引起。当同时使用“with_polymorphic”时，需要通过子类绑定关系进行连接的连接急切加载会无法从正确的实体进行连接。
- en: 'References: [#3593](https://www.sqlalchemy.org/trac/ticket/3593)'
  id: totrans-2057
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3593](https://www.sqlalchemy.org/trac/ticket/3593)
- en: '**[orm] [bug]**'
  id: totrans-2058
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed joinedload bug which would occur when a. the query includes limit/offset
    criteria that forces a subquery b. the relationship uses “secondary” c. the primaryjoin
    of the relationship refers to a column that is either not part of the primary
    key, or is a PK col in a joined-inheritance subclass table that is under a different
    attribute name than the parent table’s primary key column d. the query defers
    the columns that are present in the primaryjoin, typically via not being included
    in load_only(); the necessary column(s) would not be present in the subquery and
    produce invalid SQL.
  id: totrans-2059
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在以下情况下会发生的joinedload错误：a. 查询包含强制子查询的limit/offset条件 b. 关系使用“secondary” c.
    关系的primaryjoin引用的列既不是主键的一部分，也不是主键列在不同属性名称下的联合继承子类表中 d. 查询推迟了主要连接中存在的列，通常通过不包含在load_only()中;
    必要的列不会出现在子查询中，并产生无效的SQL。
- en: 'References: [#3592](https://www.sqlalchemy.org/trac/ticket/3592)'
  id: totrans-2060
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3592](https://www.sqlalchemy.org/trac/ticket/3592)
- en: '**[orm] [bug]**'
  id: totrans-2061
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: A rare case which occurs when a [`Session.rollback()`](../orm/session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") fails in the scope of a [`Session.flush()`](../orm/session_api.html#sqlalchemy.orm.Session.flush
    "sqlalchemy.orm.Session.flush") operation that’s raising an exception, as has
    been observed in some MySQL SAVEPOINT cases, prevents the original database exception
    from being observed when it was emitted during flush, but only on Py2K because
    Py2K does not support exception chaining; on Py3K the originating exception is
    chained. As a workaround, a warning is emitted in this specific case showing at
    least the string message of the original database error before we proceed to raise
    the rollback-originating exception.
  id: totrans-2062
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[`Session.rollback()`](../orm/session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback")在引发异常的[`Session.flush()`](../orm/session_api.html#sqlalchemy.orm.Session.flush
    "sqlalchemy.orm.Session.flush")操作范围内失败时出现的一种罕见情况，这种情况已在某些MySQL SAVEPOINT情况下观察到，阻止了在flush期间发出的原始数据库异常被观察到，但仅在Py2K上，因为Py2K不支持异常链接;
    在Py3K上，原始异常被链接。作为解决方法，在这种特定情况下发出警告，显示至少在继续引发回滚异常之前原始数据库错误的字符串消息。
- en: 'References: [#2696](https://www.sqlalchemy.org/trac/ticket/2696)'
  id: totrans-2063
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2696](https://www.sqlalchemy.org/trac/ticket/2696)
- en: orm declarative
  id: totrans-2064
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm声明
- en: '**[orm] [declarative] [bug]**'
  id: totrans-2065
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Fixed bug where in Py2K a unicode literal would not be accepted as the string
    name of a class or other argument within declarative using [`backref()`](../orm/relationship_api.html#sqlalchemy.orm.backref
    "sqlalchemy.orm.backref") on [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship"). Pull request courtesy Nils Philippsen.
  id: totrans-2066
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在Py2K中，unicode文字不能作为声明中的类或其他参数的字符串名称被接受的错误，该错误发生在使用[`backref()`](../orm/relationship_api.html#sqlalchemy.orm.backref
    "sqlalchemy.orm.backref")在[`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")上时。感谢Nils Philippsen的拉取请求。
- en: sql
  id: totrans-2067
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-2068
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added support for parameter-ordered SET clauses in an UPDATE statement. This
    feature is available by passing the [`update.preserve_parameter_order`](../core/dml.html#sqlalchemy.sql.expression.update.params.preserve_parameter_order
    "sqlalchemy.sql.expression.update") flag either to the core [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") construct or alternatively adding it to the
    [`Query.update.update_args`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update.params.update_args
    "sqlalchemy.orm.Query.update") dictionary at the ORM-level, also passing the parameters
    themselves as a list of 2-tuples. Thanks to Gorka Eguileor for implementation
    and tests.
  id: totrans-2069
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在UPDATE语句中添加了对参数顺序化SET子句的支持。通过将[`update.preserve_parameter_order`](../core/dml.html#sqlalchemy.sql.expression.update.params.preserve_parameter_order
    "sqlalchemy.sql.expression.update")标志传递给核心[`Update`](../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update")构造，或者将其添加到ORM级别的[`Query.update.update_args`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update.params.update_args
    "sqlalchemy.orm.Query.update")字典中，同时将参数本身作为2元组列表传递。感谢Gorka Eguileor的实现和测试。
- en: See also
  id: totrans-2070
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[Parameter Ordered Updates](../tutorial/data_update.html#tutorial-parameter-ordered-updates)'
  id: totrans-2071
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[参数顺序化更新](../tutorial/data_update.html#tutorial-parameter-ordered-updates)'
- en: '**[sql] [bug]**'
  id: totrans-2072
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue within the [`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select") construct whereby the [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") construct would have its `._raw_columns` collection
    mutated in-place when compiling the [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") construct, when the target [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") has Python-side defaults. The [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") construct would compile standalone with the
    erroneous column present subsequent to compilation of the [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert"), and the [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") statement itself would fail on a second compile
    attempt due to duplicate bound parameters.
  id: totrans-2073
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 [`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select") 结构中的问题，当目标 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 具有 Python 端默认值时，[`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") 结构的 `._raw_columns` 集合会在编译 [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") 结构时被就地修改。[`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") 结构在编译后会独立存在，其中包含编译 [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") 后存在的错误列，并且由于重复的绑定参数，[`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") 语句本身在第二次编译尝试时会失败。
- en: 'References: [#3603](https://www.sqlalchemy.org/trac/ticket/3603)'
  id: totrans-2074
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3603](https://www.sqlalchemy.org/trac/ticket/3603)
- en: '**[sql] [bug] [postgresql]**'
  id: totrans-2075
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [postgresql]**'
- en: Fixed bug where CREATE TABLE with a no-column table, but a constraint such as
    a CHECK constraint would render an erroneous comma in the definition; this scenario
    can occur such as with a PostgreSQL INHERITS table that has no columns of its
    own.
  id: totrans-2076
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用 CREATE TABLE 创建一个没有列的表，但具有约束（如 CHECK 约束）的 bug，会在定义中产生一个错误的逗号；这种情况可能发生在具有自己没有列的
    PostgreSQL INHERITS 表中。
- en: 'References: [#3598](https://www.sqlalchemy.org/trac/ticket/3598)'
  id: totrans-2077
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3598](https://www.sqlalchemy.org/trac/ticket/3598)
- en: postgresql
  id: totrans-2078
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-2079
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed issue where the “FOR UPDATE OF” PostgreSQL-specific SELECT modifier would
    fail if the referred table had a schema qualifier; PG needs the schema name to
    be omitted. Pull request courtesy Diana Clarke.
  id: totrans-2080
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“FOR UPDATE OF” PostgreSQL 特定的 SELECT 修饰符在所引用的表具有模式限定符时会失败的问题；PG 需要省略模式名称。感谢
    Diana Clarke 的拉取请求。
- en: 'References: [#3573](https://www.sqlalchemy.org/trac/ticket/3573)'
  id: totrans-2081
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3573](https://www.sqlalchemy.org/trac/ticket/3573)
- en: '**[postgresql] [bug]**'
  id: totrans-2082
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug where some varieties of SQL expression passed to the “where” clause
    of [`ExcludeConstraint`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint") would fail to be accepted
    correctly. Pull request courtesy aisch.
  id: totrans-2083
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了将一些 SQL 表达式传递给 [`ExcludeConstraint`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint") 的“where”子句时无法正确接受的 bug。感谢
    aisch 的拉取请求。
- en: '**[postgresql] [bug]**'
  id: totrans-2084
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed the `.python_type` attribute of [`INTERVAL`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.INTERVAL
    "sqlalchemy.dialects.postgresql.INTERVAL") to return `datetime.timedelta` in the
    same way as that of [`python_type`](../core/type_basics.html#sqlalchemy.types.Interval.python_type
    "sqlalchemy.types.Interval.python_type"), rather than raising `NotImplementedError`.
  id: totrans-2085
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`INTERVAL`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.INTERVAL
    "sqlalchemy.dialects.postgresql.INTERVAL") 的 `.python_type` 属性以与 [`python_type`](../core/type_basics.html#sqlalchemy.types.Interval.python_type
    "sqlalchemy.types.Interval.python_type") 相同的方式返回 `datetime.timedelta`，而不是引发 `NotImplementedError`。
- en: 'References: [#3571](https://www.sqlalchemy.org/trac/ticket/3571)'
  id: totrans-2086
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3571](https://www.sqlalchemy.org/trac/ticket/3571)
- en: mysql
  id: totrans-2087
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-2088
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed bug in MySQL reflection where the “fractional sections portion” of the
    [`DATETIME`](../dialects/mysql.html#sqlalchemy.dialects.mysql.DATETIME "sqlalchemy.dialects.mysql.DATETIME"),
    [`TIMESTAMP`](../dialects/mysql.html#sqlalchemy.dialects.mysql.TIMESTAMP "sqlalchemy.dialects.mysql.TIMESTAMP")
    and [`TIME`](../dialects/mysql.html#sqlalchemy.dialects.mysql.TIME "sqlalchemy.dialects.mysql.TIME")
    types would be incorrectly placed into the `timezone` attribute, which is unused
    by MySQL, instead of the `fsp` attribute.
  id: totrans-2089
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 MySQL 反射中的错误，其中 [`DATETIME`](../dialects/mysql.html#sqlalchemy.dialects.mysql.DATETIME
    "sqlalchemy.dialects.mysql.DATETIME")、[`TIMESTAMP`](../dialects/mysql.html#sqlalchemy.dialects.mysql.TIMESTAMP
    "sqlalchemy.dialects.mysql.TIMESTAMP") 和 [`TIME`](../dialects/mysql.html#sqlalchemy.dialects.mysql.TIME
    "sqlalchemy.dialects.mysql.TIME") 类型的“小数部分”会被错误地放置到未使用的 `timezone` 属性中，而不是 `fsp`
    属性中。
- en: 'References: [#3602](https://www.sqlalchemy.org/trac/ticket/3602)'
  id: totrans-2090
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3602](https://www.sqlalchemy.org/trac/ticket/3602)
- en: mssql
  id: totrans-2091
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-2092
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [错误]**'
- en: 'Added the error “20006: Write to the server failed” to the list of disconnect
    errors for the pymssql driver, as this has been observed to render a connection
    unusable.'
  id: totrans-2093
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '将 “20006: 向服务器写入失败” 错误添加到 pymssql 驱动程序的断开连接错误列表中，因为观察到这可能导致连接无法使用。'
- en: 'References: [#3585](https://www.sqlalchemy.org/trac/ticket/3585)'
  id: totrans-2094
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3585](https://www.sqlalchemy.org/trac/ticket/3585)
- en: '**[mssql] [bug]**'
  id: totrans-2095
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [错误]**'
- en: A descriptive ValueError is now raised in the event that SQL server returns
    an invalid date or time format from a DATE or TIME column, rather than failing
    with a NoneType error. Pull request courtesy Ed Avis.
  id: totrans-2096
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，如果 SQL 服务器从 DATE 或 TIME 列返回无效的日期或时间格式，则会引发描述性 ValueError，而不是出现 NoneType 错误。感谢
    Ed Avis 提交的拉取请求。
- en: '**[mssql] [bug]**'
  id: totrans-2097
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [错误]**'
- en: Fixed issue where DDL generated for the MSSQL types DATETIME2, TIME and DATETIMEOFFSET
    with a precision of “zero” would not generate the precision field. Pull request
    courtesy Jacobo de Vera.
  id: totrans-2098
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了对 MSSQL 类型 DATETIME2、TIME 和 DATETIMEOFFSET 生成的 DDL 的问题，如果精度为“零”，则不会生成精度字段。感谢
    Jacobo de Vera 提交的拉取请求。
- en: tests
  id: totrans-2099
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [change]**'
  id: totrans-2100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[测试] [更改]**'
- en: The ORM and Core tutorials, which have always been in doctest format, are now
    exercised within the normal unit test suite in both Python 2 and Python 3.
  id: totrans-2101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ORM 和 Core 教程一直以来都是以 doctest 格式存在的，现在在 Python 2 和 Python 3 中都在正常的单元测试套件中执行。
- en: misc
  id: totrans-2102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [ext]**'
  id: totrans-2103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [扩展]**'
- en: Added support for the `dict.pop()` and `dict.popitem()` methods to the [`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict") class.
  id: totrans-2104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 [`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict") 类添加了对 `dict.pop()` 和 `dict.popitem()` 方法的支持。
- en: 'References: [#3605](https://www.sqlalchemy.org/trac/ticket/3605)'
  id: totrans-2105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3605](https://www.sqlalchemy.org/trac/ticket/3605)
- en: '**[bug] [py3k]**'
  id: totrans-2106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [py3k]**'
- en: Updates to internal getargspec() calls, some py36-related fixture updates, and
    alterations to two iterators to “return” instead of raising StopIteration, to
    allow tests to pass without errors or warnings on Py3.5, Py3.6, pull requests
    courtesy Jacob MacDonald, Luri de Silvio, and Phil Jones.
  id: totrans-2107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新了内部的 getargspec() 调用，一些与 py36 相关的装置更新，以及对两个迭代器的更改，以“返回”而不是引发 StopIteration，以允许测试在
    Py3.5、Py3.6 上通过而不产生错误或警告，拉取请求由 Jacob MacDonald、Luri de Silvio 和 Phil Jones 提交。
- en: '**[bug] [ext]**'
  id: totrans-2108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [扩展]**'
- en: Fixed an issue in baked queries where the .get() method, used either directly
    or within lazy loads, didn’t consider the mapper’s “get clause” as part of the
    cache key, causing bound parameter mismatches if the clause got re-generated.
    This clause is cached by mappers on the fly but in highly concurrent scenarios
    may be generated more than once when first accessed.
  id: totrans-2109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了烘焙查询中的一个问题，其中 `.get()` 方法，在直接使用或在延迟加载中使用时，未将映射器的“获取子句”视为缓存键的一部分，导致如果子句重新生成，则绑定参数不匹配。这个子句会被映射器动态缓存，但在高并发场景下，可能在首次访问时生成多次。
- en: 'References: [#3597](https://www.sqlalchemy.org/trac/ticket/3597)'
  id: totrans-2110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3597](https://www.sqlalchemy.org/trac/ticket/3597)
- en: orm
  id: totrans-2111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-2112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed issue where post_update on a many-to-one relationship would fail to emit
    an UPDATE in the case where the attribute were set to None and not previously
    loaded.
  id: totrans-2113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在多对一关系上的 post_update 失败的问题，在这种情况下，如果属性设置为 None 并且以前未加载，则不会发出 UPDATE。
- en: 'References: [#3599](https://www.sqlalchemy.org/trac/ticket/3599)'
  id: totrans-2114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3599](https://www.sqlalchemy.org/trac/ticket/3599)
- en: '**[orm] [bug]**'
  id: totrans-2115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed bug which is actually a regression that occurred between versions 0.8.0
    and 0.8.1, due [#2714](https://www.sqlalchemy.org/trac/ticket/2714). The case
    where joined eager loading needs to join out over a subclass-bound relationship
    when “with_polymorphic” were also used would fail to join from the correct entity.
  id: totrans-2116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个实际上是在版本0.8.0和0.8.1之间发生的回归错误，原因是[#2714](https://www.sqlalchemy.org/trac/ticket/2714)。当“with_polymorphic”也被使用时，需要跨子类绑定关系进行连接的连接急切加载的情况将无法从正确的实体进行连接。
- en: 'References: [#3593](https://www.sqlalchemy.org/trac/ticket/3593)'
  id: totrans-2117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3593](https://www.sqlalchemy.org/trac/ticket/3593)
- en: '**[orm] [bug]**'
  id: totrans-2118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed joinedload bug which would occur when a. the query includes limit/offset
    criteria that forces a subquery b. the relationship uses “secondary” c. the primaryjoin
    of the relationship refers to a column that is either not part of the primary
    key, or is a PK col in a joined-inheritance subclass table that is under a different
    attribute name than the parent table’s primary key column d. the query defers
    the columns that are present in the primaryjoin, typically via not being included
    in load_only(); the necessary column(s) would not be present in the subquery and
    produce invalid SQL.
  id: totrans-2119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个joinedload bug，当a.查询包含强制子查询的limit/offset条件时 b.关系使用“secondary” c.关系的primaryjoin引用的列既不是主键的一部分，也不是主键列在一个不同属性名称下的联合继承子类表中
    d.查询推迟了在primaryjoin中存在的列，通常通过不包括在load_only()中; 必要的列不会出现在子查询中，并产生无效的SQL。
- en: 'References: [#3592](https://www.sqlalchemy.org/trac/ticket/3592)'
  id: totrans-2120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3592](https://www.sqlalchemy.org/trac/ticket/3592)
- en: '**[orm] [bug]**'
  id: totrans-2121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: A rare case which occurs when a [`Session.rollback()`](../orm/session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") fails in the scope of a [`Session.flush()`](../orm/session_api.html#sqlalchemy.orm.Session.flush
    "sqlalchemy.orm.Session.flush") operation that’s raising an exception, as has
    been observed in some MySQL SAVEPOINT cases, prevents the original database exception
    from being observed when it was emitted during flush, but only on Py2K because
    Py2K does not support exception chaining; on Py3K the originating exception is
    chained. As a workaround, a warning is emitted in this specific case showing at
    least the string message of the original database error before we proceed to raise
    the rollback-originating exception.
  id: totrans-2122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个罕见的情况发生在[`Session.rollback()`](../orm/session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback")在引发异常的[`Session.flush()`](../orm/session_api.html#sqlalchemy.orm.Session.flush
    "sqlalchemy.orm.Session.flush")操作范围内失败时，如在一些MySQL SAVEPOINT情况下观察到的，阻止了在flush期间发出的原始数据库异常被观察到，但仅在Py2K上，因为Py2K不支持异常链接;
    在Py3K上，原始异常被链接。作为一种解决方法，在这种特定情况下发出一个警告，至少显示原始数据库错误的字符串消息，然后我们继续引发rollback-originating异常。
- en: 'References: [#2696](https://www.sqlalchemy.org/trac/ticket/2696)'
  id: totrans-2123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2696](https://www.sqlalchemy.org/trac/ticket/2696)
- en: orm declarative
  id: totrans-2124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm声明式
- en: '**[orm] [declarative] [bug]**'
  id: totrans-2125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Fixed bug where in Py2K a unicode literal would not be accepted as the string
    name of a class or other argument within declarative using [`backref()`](../orm/relationship_api.html#sqlalchemy.orm.backref
    "sqlalchemy.orm.backref") on [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship"). Pull request courtesy Nils Philippsen.
  id: totrans-2126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，在Py2K中，unicode文字不会被接受为声明式中使用[`backref()`](../orm/relationship_api.html#sqlalchemy.orm.backref
    "sqlalchemy.orm.backref")在[`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")中的类或其他参数的字符串名称。感谢Nils Philippsen的拉取请求。
- en: sql
  id: totrans-2127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-2128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added support for parameter-ordered SET clauses in an UPDATE statement. This
    feature is available by passing the [`update.preserve_parameter_order`](../core/dml.html#sqlalchemy.sql.expression.update.params.preserve_parameter_order
    "sqlalchemy.sql.expression.update") flag either to the core [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") construct or alternatively adding it to the
    [`Query.update.update_args`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update.params.update_args
    "sqlalchemy.orm.Query.update") dictionary at the ORM-level, also passing the parameters
    themselves as a list of 2-tuples. Thanks to Gorka Eguileor for implementation
    and tests.
  id: totrans-2129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对 UPDATE 语句中参数顺序 SET 子句的支持。通过将 [`update.preserve_parameter_order`](../core/dml.html#sqlalchemy.sql.expression.update.params.preserve_parameter_order
    "sqlalchemy.sql.expression.update") 标志传递给核心 [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") 构造，或者将其添加到 ORM 级别的 [`Query.update.update_args`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update.params.update_args
    "sqlalchemy.orm.Query.update") 字典中，同时将参数本身作为 2 元组列表传递。感谢 Gorka Eguileor 的实现和测试。
- en: See also
  id: totrans-2130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Parameter Ordered Updates](../tutorial/data_update.html#tutorial-parameter-ordered-updates)'
  id: totrans-2131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[参数顺序更新](../tutorial/data_update.html#tutorial-parameter-ordered-updates)'
- en: '**[sql] [bug]**'
  id: totrans-2132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue within the [`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select") construct whereby the [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") construct would have its `._raw_columns` collection
    mutated in-place when compiling the [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") construct, when the target [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") has Python-side defaults. The [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") construct would compile standalone with the
    erroneous column present subsequent to compilation of the [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert"), and the [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") statement itself would fail on a second compile
    attempt due to duplicate bound parameters.
  id: totrans-2133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 [`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select") 构造中存在的问题，其中在编译 [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") 构造时，当目标 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 具有 Python 端默认值时，[`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") 构造的 `._raw_columns` 集合会被就地修改。在编译 [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") 构造后，[`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") 构造将独立编译，并且在编译 [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") 构造后，[`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") 语句本身将由于重复的绑定参数而在第二次编译尝试时失败。
- en: 'References: [#3603](https://www.sqlalchemy.org/trac/ticket/3603)'
  id: totrans-2134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3603](https://www.sqlalchemy.org/trac/ticket/3603)
- en: '**[sql] [bug] [postgresql]**'
  id: totrans-2135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [postgresql]**'
- en: Fixed bug where CREATE TABLE with a no-column table, but a constraint such as
    a CHECK constraint would render an erroneous comma in the definition; this scenario
    can occur such as with a PostgreSQL INHERITS table that has no columns of its
    own.
  id: totrans-2136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用不带列的表创建 CREATE TABLE，但具有约束（如 CHECK 约束）会在定义中出现错误逗号的 bug；这种情况可能发生在具有自己没有列的
    PostgreSQL INHERITS 表中。
- en: 'References: [#3598](https://www.sqlalchemy.org/trac/ticket/3598)'
  id: totrans-2137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3598](https://www.sqlalchemy.org/trac/ticket/3598)
- en: postgresql
  id: totrans-2138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-2139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed issue where the “FOR UPDATE OF” PostgreSQL-specific SELECT modifier would
    fail if the referred table had a schema qualifier; PG needs the schema name to
    be omitted. Pull request courtesy Diana Clarke.
  id: totrans-2140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“FOR UPDATE OF” PostgreSQL 特定的 SELECT 修饰符如果所指表具有模式限定符则会失败的问题；PG 需要省略模式名称。感谢
    Diana Clarke 提交的拉取请求。
- en: 'References: [#3573](https://www.sqlalchemy.org/trac/ticket/3573)'
  id: totrans-2141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3573](https://www.sqlalchemy.org/trac/ticket/3573)
- en: '**[postgresql] [bug]**'
  id: totrans-2142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug where some varieties of SQL expression passed to the “where” clause
    of [`ExcludeConstraint`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint") would fail to be accepted
    correctly. Pull request courtesy aisch.
  id: totrans-2143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了将某些类型的 SQL 表达式传递给 [`ExcludeConstraint`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint") 的“where”子句时无法正确接受的 bug。感谢
    aisch 提交的拉取请求。
- en: '**[postgresql] [bug]**'
  id: totrans-2144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed the `.python_type` attribute of [`INTERVAL`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.INTERVAL
    "sqlalchemy.dialects.postgresql.INTERVAL") to return `datetime.timedelta` in the
    same way as that of [`python_type`](../core/type_basics.html#sqlalchemy.types.Interval.python_type
    "sqlalchemy.types.Interval.python_type"), rather than raising `NotImplementedError`.
  id: totrans-2145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`INTERVAL`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.INTERVAL
    "sqlalchemy.dialects.postgresql.INTERVAL") 的 `.python_type` 属性，使其像 [`python_type`](../core/type_basics.html#sqlalchemy.types.Interval.python_type
    "sqlalchemy.types.Interval.python_type") 一样返回 `datetime.timedelta`，而不是引发 `NotImplementedError`。
- en: 'References: [#3571](https://www.sqlalchemy.org/trac/ticket/3571)'
  id: totrans-2146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3571](https://www.sqlalchemy.org/trac/ticket/3571)
- en: mysql
  id: totrans-2147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-2148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed bug in MySQL reflection where the “fractional sections portion” of the
    [`DATETIME`](../dialects/mysql.html#sqlalchemy.dialects.mysql.DATETIME "sqlalchemy.dialects.mysql.DATETIME"),
    [`TIMESTAMP`](../dialects/mysql.html#sqlalchemy.dialects.mysql.TIMESTAMP "sqlalchemy.dialects.mysql.TIMESTAMP")
    and [`TIME`](../dialects/mysql.html#sqlalchemy.dialects.mysql.TIME "sqlalchemy.dialects.mysql.TIME")
    types would be incorrectly placed into the `timezone` attribute, which is unused
    by MySQL, instead of the `fsp` attribute.
  id: totrans-2149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 MySQL 反射中的错误，其中[`DATETIME`](../dialects/mysql.html#sqlalchemy.dialects.mysql.DATETIME
    "sqlalchemy.dialects.mysql.DATETIME")、[`TIMESTAMP`](../dialects/mysql.html#sqlalchemy.dialects.mysql.TIMESTAMP
    "sqlalchemy.dialects.mysql.TIMESTAMP") 和 [`TIME`](../dialects/mysql.html#sqlalchemy.dialects.mysql.TIME
    "sqlalchemy.dialects.mysql.TIME") 类型的“小数部分”会错误地放置到未被 MySQL 使用的 `timezone` 属性中，而不是
    `fsp` 属性中。
- en: 'References: [#3602](https://www.sqlalchemy.org/trac/ticket/3602)'
  id: totrans-2150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3602](https://www.sqlalchemy.org/trac/ticket/3602)
- en: mssql
  id: totrans-2151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-2152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: 'Added the error “20006: Write to the server failed” to the list of disconnect
    errors for the pymssql driver, as this has been observed to render a connection
    unusable.'
  id: totrans-2153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '将错误“20006: 无法向服务器写入”添加到了 pymssql 驱动程序的断开连接错误列表中，因为观察到这会使连接无法使用。'
- en: 'References: [#3585](https://www.sqlalchemy.org/trac/ticket/3585)'
  id: totrans-2154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3585](https://www.sqlalchemy.org/trac/ticket/3585)
- en: '**[mssql] [bug]**'
  id: totrans-2155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: A descriptive ValueError is now raised in the event that SQL server returns
    an invalid date or time format from a DATE or TIME column, rather than failing
    with a NoneType error. Pull request courtesy Ed Avis.
  id: totrans-2156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果 SQL 服务器从 DATE 或 TIME 列返回无效的日期或时间格式，现在会引发描述性的 ValueError，而不是以 NoneType 错误失败。感谢
    Ed Avis 提供的拉取请求。
- en: '**[mssql] [bug]**'
  id: totrans-2157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed issue where DDL generated for the MSSQL types DATETIME2, TIME and DATETIMEOFFSET
    with a precision of “zero” would not generate the precision field. Pull request
    courtesy Jacobo de Vera.
  id: totrans-2158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了对具有“零”精度的 MSSQL 类型 DATETIME2、TIME 和 DATETIMEOFFSET 生成的 DDL 不会生成精度字段的问题。感谢
    Jacobo de Vera 提供的拉取请求。
- en: tests
  id: totrans-2159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [change]**'
  id: totrans-2160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[tests] [change]**'
- en: The ORM and Core tutorials, which have always been in doctest format, are now
    exercised within the normal unit test suite in both Python 2 and Python 3.
  id: totrans-2161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ORM 和 Core 教程一直以 doctest 格式存在，现在在 Python 2 和 Python 3 中都在正常的单元测试套件中进行测试。
- en: misc
  id: totrans-2162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [ext]**'
  id: totrans-2163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Added support for the `dict.pop()` and `dict.popitem()` methods to the [`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict") class.
  id: totrans-2164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将对 [`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict") 类添加了对 `dict.pop()` 和 `dict.popitem()` 方法的支持。
- en: 'References: [#3605](https://www.sqlalchemy.org/trac/ticket/3605)'
  id: totrans-2165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3605](https://www.sqlalchemy.org/trac/ticket/3605)
- en: '**[bug] [py3k]**'
  id: totrans-2166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [py3k]**'
- en: Updates to internal getargspec() calls, some py36-related fixture updates, and
    alterations to two iterators to “return” instead of raising StopIteration, to
    allow tests to pass without errors or warnings on Py3.5, Py3.6, pull requests
    courtesy Jacob MacDonald, Luri de Silvio, and Phil Jones.
  id: totrans-2167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新了内部的 getargspec() 调用，一些与 py36 相关的 fixture 更新，以及对两个迭代器的更改，使其“返回”而不是引发 StopIteration，以便在
    Py3.5、Py3.6 上无错误或警告地通过测试，拉取请求由 Jacob MacDonald、Luri de Silvio 和 Phil Jones 提供。
- en: '**[bug] [ext]**'
  id: totrans-2168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed an issue in baked queries where the .get() method, used either directly
    or within lazy loads, didn’t consider the mapper’s “get clause” as part of the
    cache key, causing bound parameter mismatches if the clause got re-generated.
    This clause is cached by mappers on the fly but in highly concurrent scenarios
    may be generated more than once when first accessed.
  id: totrans-2169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在烘焙查询中的问题，其中 `.get()` 方法（直接使用或在惰性加载中使用）未将映射器的“获取子句”视为缓存键的一部分，导致如果子句重新生成则导致绑定参数不匹配。这个子句在并发场景下会被映射器动态地缓存，但在高度并发的场景下，当首次访问时可能会生成多次。
- en: 'References: [#3597](https://www.sqlalchemy.org/trac/ticket/3597)'
  id: totrans-2170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3597](https://www.sqlalchemy.org/trac/ticket/3597)
- en: 1.0.9
  id: totrans-2171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.0.9
- en: 'Released: October 20, 2015'
  id: totrans-2172
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2015 年 10 月 20 日
- en: orm
  id: totrans-2173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-2174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new method [`Query.one_or_none()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.one_or_none
    "sqlalchemy.orm.Query.one_or_none"); same as [`Query.one()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.one
    "sqlalchemy.orm.Query.one") but returns None if no row found. Pull request courtesy
    esiegerman.
  id: totrans-2175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新方法 [`Query.one_or_none()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.one_or_none
    "sqlalchemy.orm.Query.one_or_none")；与 [`Query.one()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.one
    "sqlalchemy.orm.Query.one") 相同，但如果未找到行则返回 None。感谢 esiegerman 提交的拉取请求。
- en: '**[orm] [bug] [postgresql]**'
  id: totrans-2176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [postgresql]**'
- en: Fixed regression in 1.0 where new feature of using “executemany” for UPDATE
    statements in the ORM (e.g. [UPDATE statements are now batched with executemany()
    in a flush](migration_10.html#feature-updatemany)) would break on PostgreSQL and
    other RETURNING backends when using server-side version generation schemes, as
    the server side value is retrieved via RETURNING which is not supported with executemany.
  id: totrans-2177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 1.0 版本中的回归问题，即在 ORM 中使用“executemany”进行 UPDATE 语句的新功能（例如[UPDATE 语句现在在 flush
    中使用 executemany() 进行批处理](migration_10.html#feature-updatemany)）在 PostgreSQL 和其他支持
    RETURNING 的后端上会出现问题，因为服务器端值是通过 RETURNING 检索的，而在 executemany 中不支持。
- en: 'References: [#3556](https://www.sqlalchemy.org/trac/ticket/3556)'
  id: totrans-2178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3556](https://www.sqlalchemy.org/trac/ticket/3556)
- en: '**[orm] [bug]**'
  id: totrans-2179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed rare TypeError which could occur when stringifying certain kinds of internal
    column loader options within internal logging.
  id: totrans-2180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在内部日志中对某些类型的内部列加载器选项进行字符串化时可能出现的罕见 TypeError。
- en: 'References: [#3539](https://www.sqlalchemy.org/trac/ticket/3539)'
  id: totrans-2181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3539](https://www.sqlalchemy.org/trac/ticket/3539)
- en: '**[orm] [bug]**'
  id: totrans-2182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in [`Session.bulk_save_objects()`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_save_objects
    "sqlalchemy.orm.Session.bulk_save_objects") where a mapped column that had some
    kind of “fetch on update” value and was not locally present in the given object
    would cause an AttributeError within the operation.
  id: totrans-2183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`Session.bulk_save_objects()`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_save_objects
    "sqlalchemy.orm.Session.bulk_save_objects") 中的错误，其中具有某种“更新时获取”值的映射列，且在给定对象中不存在时，会导致操作中出现
    AttributeError。
- en: 'References: [#3525](https://www.sqlalchemy.org/trac/ticket/3525)'
  id: totrans-2184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3525](https://www.sqlalchemy.org/trac/ticket/3525)
- en: '**[orm] [bug]**'
  id: totrans-2185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed 1.0 regression where the “noload” loader strategy would fail to function
    for a many-to-one relationship. The loader used an API to place “None” into the
    dictionary which no longer actually writes a value; this is a side effect of [#3061](https://www.sqlalchemy.org/trac/ticket/3061).
  id: totrans-2186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 1.0 版本中“noload”加载策略在对多对一关系无法正常工作的回归问题。加载器使用了一个 API 将“None”放入字典中，但实际上不再写入值；这是
    [#3061](https://www.sqlalchemy.org/trac/ticket/3061) 的一个副作用。
- en: 'References: [#3510](https://www.sqlalchemy.org/trac/ticket/3510)'
  id: totrans-2187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3510](https://www.sqlalchemy.org/trac/ticket/3510)
- en: examples
  id: totrans-2188
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples] [bug]**'
  id: totrans-2189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples] [bug]**'
- en: Fixed two issues in the “history_meta” example where history tracking could
    encounter empty history, and where a column keyed to an alternate attribute name
    would fail to track properly. Fixes courtesy Alex Fraser.
  id: totrans-2190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“history_meta”示例中的两个问题，其中历史跟踪可能遇到空历史，并且键入替代属性名称的列无法正确跟踪的问题。修复由 Alex Fraser
    提供。
- en: sql
  id: totrans-2191
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-2192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed regression in 1.0-released default-processor for multi-VALUES insert statement,
    [#3288](https://www.sqlalchemy.org/trac/ticket/3288), where the column type for
    the default-holding column would not be propagated to the compiled statement in
    the case where the default was being used, leading to bind-level type handlers
    not being invoked.
  id: totrans-2193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 1.0 版本中发布的多值插入语句的默认处理器回归问题，[#3288](https://www.sqlalchemy.org/trac/ticket/3288)，在使用默认时默认列类型不会传播到编译后的语句中，导致绑定级别类型处理程序不会被调用。
- en: 'References: [#3520](https://www.sqlalchemy.org/trac/ticket/3520)'
  id: totrans-2194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3520](https://www.sqlalchemy.org/trac/ticket/3520)
- en: postgresql
  id: totrans-2195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-2196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: An adjustment to the new PostgreSQL feature of reflecting storage options and
    USING of [#3455](https://www.sqlalchemy.org/trac/ticket/3455) released in 1.0.6,
    to disable the feature for PostgreSQL versions < 8.2 where the `reloptions` column
    is not provided; this allows Amazon Redshift to again work as it is based on an
    8.0.x version of PostgreSQL. Fix courtesy Pete Hollobon.
  id: totrans-2197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对 1.0.6 中发布的反映存储选项和 USING 的新 PostgreSQL 功能的调整，禁用了 PostgreSQL 版本 < 8.2 的功能，其中未提供
    `reloptions` 列；这使得基于 8.0.x 版本的 PostgreSQL 的 Amazon Redshift 再次可以正常工作。修复由 Pete
    Hollobon 提供。
- en: oracle
  id: totrans-2198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug] [py3k]**'
  id: totrans-2199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug] [py3k]**'
- en: Fixed support for cx_Oracle version 5.2, which was tripping up SQLAlchemy’s
    version detection under Python 3 and inadvertently not using the correct unicode
    mode for Python 3\. This would cause issues such as bound variables mis-interpreted
    as NULL and rows silently not being returned.
  id: totrans-2200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 cx_Oracle 版本 5.2 的支持，该版本在 Python 3 下触发了 SQLAlchemy 的版本检测，并无意中未使用正确的 Unicode
    模式。这会导致问题，例如绑定变量被误解释为 NULL，以及行被静默地未返回。
- en: 'This change is also **backported** to: 0.7.0b1'
  id: totrans-2201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.7.0b1
- en: 'References: [#3491](https://www.sqlalchemy.org/trac/ticket/3491)'
  id: totrans-2202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3491](https://www.sqlalchemy.org/trac/ticket/3491)
- en: '**[oracle] [bug]**'
  id: totrans-2203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed bug in Oracle dialect where reflection of tables and other symbols with
    names quoted to force all-lower-case would not be identified properly in reflection
    queries. The [`quoted_name`](../core/sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name") construct is now applied to incoming
    symbol names that detect as forced into all-lower-case within the “name normalize”
    process.
  id: totrans-2204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 Oracle 方言中的一个 bug，即反射带有引号强制转换为全小写的表和其他符号的情况在反射查询中无法正确识别。现在，[`quoted_name`](../core/sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name") 构造已应用于检测在“名称规范化”过程中被强制转换为全小写的传入符号名称。
- en: 'References: [#3548](https://www.sqlalchemy.org/trac/ticket/3548)'
  id: totrans-2205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3548](https://www.sqlalchemy.org/trac/ticket/3548)
- en: misc
  id: totrans-2206
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[feature] [ext]**'
  id: totrans-2207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[功能] [扩展]**'
- en: Added the [`AssociationProxy.info`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy.params.info
    "sqlalchemy.ext.associationproxy.AssociationProxy") parameter to the [`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") constructor, to suit the [`AssociationProxy.info`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy.info
    "sqlalchemy.ext.associationproxy.AssociationProxy.info") accessor that was added
    in [#2971](https://www.sqlalchemy.org/trac/ticket/2971). This is possible because
    [`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") is constructed explicitly,
    unlike a hybrid which is constructed implicitly via the decorator syntax.
  id: totrans-2208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 [`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy)
    构造函数添加了 [`AssociationProxy.info`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy.params.info
    "sqlalchemy.ext.associationproxy.AssociationProxy") 参数，以适应在 [#2971](https://www.sqlalchemy.org/trac/ticket/2971)
    中添加的 [`AssociationProxy.info`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy.info
    "sqlalchemy.ext.associationproxy.AssociationProxy") 访问器。这是可能的，因为 [`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") 是显式构造的，不像通过装饰器语法隐式构造的混合体。
- en: 'References: [#3551](https://www.sqlalchemy.org/trac/ticket/3551)'
  id: totrans-2209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3551](https://www.sqlalchemy.org/trac/ticket/3551)
- en: '**[bug] [sybase]**'
  id: totrans-2210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [sybase]**'
- en: Fixed two issues regarding Sybase reflection, allowing tables without primary
    keys to be reflected as well as ensured that a SQL statement involved in foreign
    key detection is pre-fetched up front to avoid driver issues upon nested queries.
    Fixes here courtesy Eugene Zapolsky; note that we cannot currently test Sybase
    to locally verify these changes.
  id: totrans-2211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关于 Sybase 反射的两个问题，允许没有主键的表被反射，同时确保涉及外键检测的 SQL 语句被预先获取，以避免嵌套查询时出现驱动程序问题。此处的修复由
    Eugene Zapolsky 提供；请注意，我们目前无法测试 Sybase 以本地验��这些更改。
- en: 'References: [#3508](https://www.sqlalchemy.org/trac/ticket/3508), [#3509](https://www.sqlalchemy.org/trac/ticket/3509)'
  id: totrans-2212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3508](https://www.sqlalchemy.org/trac/ticket/3508)，[#3509](https://www.sqlalchemy.org/trac/ticket/3509)
- en: orm
  id: totrans-2213
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-2214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Added new method [`Query.one_or_none()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.one_or_none
    "sqlalchemy.orm.Query.one_or_none"); same as [`Query.one()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.one
    "sqlalchemy.orm.Query.one") but returns None if no row found. Pull request courtesy
    esiegerman.
  id: totrans-2215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新方法 [`Query.one_or_none()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.one_or_none
    "sqlalchemy.orm.Query.one_or_none")；与 [`Query.one()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.one
    "sqlalchemy.orm.Query.one") 相同，但如果未找到行，则返回 None。感谢 esiegerman 提交的拉取请求。
- en: '**[orm] [bug] [postgresql]**'
  id: totrans-2216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [postgresql]**'
- en: Fixed regression in 1.0 where new feature of using “executemany” for UPDATE
    statements in the ORM (e.g. [UPDATE statements are now batched with executemany()
    in a flush](migration_10.html#feature-updatemany)) would break on PostgreSQL and
    other RETURNING backends when using server-side version generation schemes, as
    the server side value is retrieved via RETURNING which is not supported with executemany.
  id: totrans-2217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 1.0 版本中使用“executemany”在 ORM 中进行 UPDATE 语句的新功能（例如[现在在 flush 中使用 executemany()
    批处理 UPDATE 语句](migration_10.html#feature-updatemany)）在 PostgreSQL 和其他支持 RETURNING
    的后端上会出现问题，当使用服务器端版本生成方案时，由于服务器端值是通过 RETURNING 检索的，而在使用 executemany 时不支持。
- en: 'References: [#3556](https://www.sqlalchemy.org/trac/ticket/3556)'
  id: totrans-2218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3556](https://www.sqlalchemy.org/trac/ticket/3556)
- en: '**[orm] [bug]**'
  id: totrans-2219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed rare TypeError which could occur when stringifying certain kinds of internal
    column loader options within internal logging.
  id: totrans-2220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在内部日志中对某些类型的内部列加载器选项进行字符串化时可能出现的罕见 TypeError。
- en: 'References: [#3539](https://www.sqlalchemy.org/trac/ticket/3539)'
  id: totrans-2221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3539](https://www.sqlalchemy.org/trac/ticket/3539)
- en: '**[orm] [bug]**'
  id: totrans-2222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed bug in [`Session.bulk_save_objects()`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_save_objects
    "sqlalchemy.orm.Session.bulk_save_objects") where a mapped column that had some
    kind of “fetch on update” value and was not locally present in the given object
    would cause an AttributeError within the operation.
  id: totrans-2223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '修复了 [`Session.bulk_save_objects()`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_save_objects
    "sqlalchemy.orm.Session.bulk_save_objects") 中的 bug，其中一个映射列具有某种“��新时获取”值，并且在给定对象中不存在本地时，会导致操作中的
    AttributeError。 '
- en: 'References: [#3525](https://www.sqlalchemy.org/trac/ticket/3525)'
  id: totrans-2224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3525](https://www.sqlalchemy.org/trac/ticket/3525)
- en: '**[orm] [bug]**'
  id: totrans-2225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed 1.0 regression where the “noload” loader strategy would fail to function
    for a many-to-one relationship. The loader used an API to place “None” into the
    dictionary which no longer actually writes a value; this is a side effect of [#3061](https://www.sqlalchemy.org/trac/ticket/3061).
  id: totrans-2226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 1.0 版本中“noload”加载策略在一对多关系中无法正常工作的回归问题。加载器使用一个 API 将“None”放入字典中，这实际上不再写入值；这是
    [#3061](https://www.sqlalchemy.org/trac/ticket/3061) 的一个副作用。
- en: 'References: [#3510](https://www.sqlalchemy.org/trac/ticket/3510)'
  id: totrans-2227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3510](https://www.sqlalchemy.org/trac/ticket/3510)
- en: examples
  id: totrans-2228
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 例子
- en: '**[examples] [bug]**'
  id: totrans-2229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[例子] [错误]**'
- en: Fixed two issues in the “history_meta” example where history tracking could
    encounter empty history, and where a column keyed to an alternate attribute name
    would fail to track properly. Fixes courtesy Alex Fraser.
  id: totrans-2230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“history_meta”示例中的两个问题，其中历史跟踪可能遇到空历史，以及一个键入到替代属性名称的列无法正确跟踪的问题。修复由 Alex Fraser
    提供。
- en: sql
  id: totrans-2231
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-2232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误]**'
- en: Fixed regression in 1.0-released default-processor for multi-VALUES insert statement,
    [#3288](https://www.sqlalchemy.org/trac/ticket/3288), where the column type for
    the default-holding column would not be propagated to the compiled statement in
    the case where the default was being used, leading to bind-level type handlers
    not being invoked.
  id: totrans-2233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 1.0 版本中默认处理多值插入语句的回归问题，[#3288](https://www.sqlalchemy.org/trac/ticket/3288)，在默认保持列的情况下，列类型不会传播到编译后的语句中，导致绑定级别的类型处理程序不会被调用。
- en: 'References: [#3520](https://www.sqlalchemy.org/trac/ticket/3520)'
  id: totrans-2234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3520](https://www.sqlalchemy.org/trac/ticket/3520)
- en: postgresql
  id: totrans-2235
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-2236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [错误]**'
- en: An adjustment to the new PostgreSQL feature of reflecting storage options and
    USING of [#3455](https://www.sqlalchemy.org/trac/ticket/3455) released in 1.0.6,
    to disable the feature for PostgreSQL versions < 8.2 where the `reloptions` column
    is not provided; this allows Amazon Redshift to again work as it is based on an
    8.0.x version of PostgreSQL. Fix courtesy Pete Hollobon.
  id: totrans-2237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 1.0.6 版本中发布的 [#3455](https://www.sqlalchemy.org/trac/ticket/3455) 的新 PostgreSQL
    特性进行调整，以禁用 PostgreSQL 版本 < 8.2 的功能，其中未提供 `reloptions` 列；这允许 Amazon Redshift 再次正常工作，因为它基于
    PostgreSQL 的 8.0.x 版本。修复由 Pete Hollobon 提供。
- en: oracle
  id: totrans-2238
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug] [py3k]**'
  id: totrans-2239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [错误] [py3k]**'
- en: Fixed support for cx_Oracle version 5.2, which was tripping up SQLAlchemy’s
    version detection under Python 3 and inadvertently not using the correct unicode
    mode for Python 3\. This would cause issues such as bound variables mis-interpreted
    as NULL and rows silently not being returned.
  id: totrans-2240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 cx_Oracle 版本 5.2 的支持，该版本在 Python 3 下触发了 SQLAlchemy 的版本检测，并无意中未使用正确的 Unicode
    模式进行 Python 3。这会导致问题，例如绑定变量被误解释为 NULL，行被静默地未返回。
- en: 'This change is also **backported** to: 0.7.0b1'
  id: totrans-2241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.7.0b1
- en: 'References: [#3491](https://www.sqlalchemy.org/trac/ticket/3491)'
  id: totrans-2242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3491](https://www.sqlalchemy.org/trac/ticket/3491)
- en: '**[oracle] [bug]**'
  id: totrans-2243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [错误]**'
- en: Fixed bug in Oracle dialect where reflection of tables and other symbols with
    names quoted to force all-lower-case would not be identified properly in reflection
    queries. The [`quoted_name`](../core/sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name") construct is now applied to incoming
    symbol names that detect as forced into all-lower-case within the “name normalize”
    process.
  id: totrans-2244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Oracle方言中的一个错误，即反射带有引号名称以强制全部小写的表和其他符号时，在反射查询中将无法正确识别。现在，[`quoted_name`](../core/sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")构造应用于在“名称规范化”过程中检测为强制全部小写的传入符号名称。
- en: 'References: [#3548](https://www.sqlalchemy.org/trac/ticket/3548)'
  id: totrans-2245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3548](https://www.sqlalchemy.org/trac/ticket/3548)
- en: misc
  id: totrans-2246
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[feature] [ext]**'
  id: totrans-2247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[功能] [扩展]**'
- en: Added the [`AssociationProxy.info`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy.params.info
    "sqlalchemy.ext.associationproxy.AssociationProxy") parameter to the [`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") constructor, to suit the [`AssociationProxy.info`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy.info
    "sqlalchemy.ext.associationproxy.AssociationProxy.info") accessor that was added
    in [#2971](https://www.sqlalchemy.org/trac/ticket/2971). This is possible because
    [`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") is constructed explicitly,
    unlike a hybrid which is constructed implicitly via the decorator syntax.
  id: totrans-2248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy")构造函数中添加了[`AssociationProxy.info`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy.params.info
    "sqlalchemy.ext.associationproxy.AssociationProxy")参数，以适应[#2971](https://www.sqlalchemy.org/trac/ticket/2971)中添加的[`AssociationProxy.info`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy.info
    "sqlalchemy.ext.associationproxy.AssociationProxy.info")访问器。这是因为[`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy")是显式构造的，不像通过装饰器语法隐式构造的混合体。
- en: 'References: [#3551](https://www.sqlalchemy.org/trac/ticket/3551)'
  id: totrans-2249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3551](https://www.sqlalchemy.org/trac/ticket/3551)
- en: '**[bug] [sybase]**'
  id: totrans-2250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [Sybase]**'
- en: Fixed two issues regarding Sybase reflection, allowing tables without primary
    keys to be reflected as well as ensured that a SQL statement involved in foreign
    key detection is pre-fetched up front to avoid driver issues upon nested queries.
    Fixes here courtesy Eugene Zapolsky; note that we cannot currently test Sybase
    to locally verify these changes.
  id: totrans-2251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关于Sybase反射的两个问题，允许没有主键的表被反射，同时确保涉及外键检测的SQL语句被预先获取，以避免嵌套查询时出现驱动程序问题。这里的修复由Eugene
    Zapolsky提供；请注意，我们目前无法测试Sybase以本地验证这些更改。
- en: 'References: [#3508](https://www.sqlalchemy.org/trac/ticket/3508), [#3509](https://www.sqlalchemy.org/trac/ticket/3509)'
  id: totrans-2252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3508](https://www.sqlalchemy.org/trac/ticket/3508), [#3509](https://www.sqlalchemy.org/trac/ticket/3509)
- en: 1.0.8
  id: totrans-2253
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.0.8
- en: 'Released: July 22, 2015'
  id: totrans-2254
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2015年7月22日
- en: engine
  id: totrans-2255
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [bug]**'
  id: totrans-2256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误]**'
- en: Fixed critical issue whereby the pool “checkout” event handler may be called
    against a stale connection without the “connect” event handler having been called,
    in the case where the pool attempted to reconnect after being invalidated and
    failed; the stale connection would remain present and would be used on a subsequent
    attempt. This issue has a greater impact in the 1.0 series subsequent to 1.0.2,
    as it also delivers a blanked-out `.info` dictionary to the event handler; prior
    to 1.0.2 the `.info` dictionary is still the previous one.
  id: totrans-2257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个严重问题，即池“checkout”事件处理程序可能针对未调用“connect”事件处理程序的陈旧连接进行调用，在池尝试重新连接并失败后；陈旧连接将保留并在随后的尝试中使用。这个问题在1.0系列中的影响更大，1.0.2之后，因为它还向事件处理程序提供了一个空白的`.info`字典；在1.0.2之前，`.info`字典仍然是先前的字典。
- en: 'This change is also **backported** to: 0.7.0b1'
  id: totrans-2258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**至：0.7.0b1
- en: 'References: [#3497](https://www.sqlalchemy.org/trac/ticket/3497)'
  id: totrans-2259
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3497](https://www.sqlalchemy.org/trac/ticket/3497)
- en: sqlite
  id: totrans-2260
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-2261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [错误]**'
- en: Fixed bug in SQLite dialect where reflection of UNIQUE constraints that included
    non-alphabetic characters in the names, like dots or spaces, would not be reflected
    with their name.
  id: totrans-2262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了SQLite方言中的一个错误，即反射包含非字母字符（如点或空格）的唯一约束的名称时，将不会反映其名称。
- en: 'This change is also **backported** to: 0.9.10'
  id: totrans-2263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**至：0.9.10
- en: 'References: [#3495](https://www.sqlalchemy.org/trac/ticket/3495)'
  id: totrans-2264
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3495](https://www.sqlalchemy.org/trac/ticket/3495)
- en: misc
  id: totrans-2265
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[misc] [bug]**'
  id: totrans-2266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[misc] [bug]**'
- en: Fixed an issue where a particular base class within utils didn’t implement `__slots__`,
    and therefore meant all subclasses of that class didn’t either, negating the rationale
    for `__slots__` to be in use. Didn’t cause any issue except on IronPython which
    apparently does not implement `__slots__` behavior compatibly with cPython.
  id: totrans-2267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即utils中的特定基类没有实现`__slots__`，因此该类的所有子类也没有实现，从而使得使用`__slots__`没有意义。这个问题只在IronPython上引起问题，显然它不兼容cPython的`__slots__`行为。
- en: 'References: [#3494](https://www.sqlalchemy.org/trac/ticket/3494)'
  id: totrans-2268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3494](https://www.sqlalchemy.org/trac/ticket/3494)
- en: engine
  id: totrans-2269
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-2270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed critical issue whereby the pool “checkout” event handler may be called
    against a stale connection without the “connect” event handler having been called,
    in the case where the pool attempted to reconnect after being invalidated and
    failed; the stale connection would remain present and would be used on a subsequent
    attempt. This issue has a greater impact in the 1.0 series subsequent to 1.0.2,
    as it also delivers a blanked-out `.info` dictionary to the event handler; prior
    to 1.0.2 the `.info` dictionary is still the previous one.
  id: totrans-2271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个关键问题，即池中的“checkout”事件处理程序可能针对一个陈旧的连接进行调用，而“connect”事件处理程序尚未被调用，在池尝试重新连接并失败后；陈旧的连接将保留并在随后的尝试中使用。这个问题在1.0.2之后的1.0系列中影响更大，因为它还向事件处理程序提供了一个空白的`.info`字典；在1.0.2之前，`.info`字典仍然是先前的字典。
- en: 'This change is also **backported** to: 0.7.0b1'
  id: totrans-2272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.7.0b1
- en: 'References: [#3497](https://www.sqlalchemy.org/trac/ticket/3497)'
  id: totrans-2273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3497](https://www.sqlalchemy.org/trac/ticket/3497)
- en: sqlite
  id: totrans-2274
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-2275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Fixed bug in SQLite dialect where reflection of UNIQUE constraints that included
    non-alphabetic characters in the names, like dots or spaces, would not be reflected
    with their name.
  id: totrans-2276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了SQLite方言中的一个错误，即反射包含非字母字符（如点或空格）的唯一约束的名称时，不会反映其名称。
- en: 'This change is also **backported** to: 0.9.10'
  id: totrans-2277
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.10
- en: 'References: [#3495](https://www.sqlalchemy.org/trac/ticket/3495)'
  id: totrans-2278
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3495](https://www.sqlalchemy.org/trac/ticket/3495)
- en: misc
  id: totrans-2279
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[misc] [bug]**'
  id: totrans-2280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[misc] [bug]**'
- en: Fixed an issue where a particular base class within utils didn’t implement `__slots__`,
    and therefore meant all subclasses of that class didn’t either, negating the rationale
    for `__slots__` to be in use. Didn’t cause any issue except on IronPython which
    apparently does not implement `__slots__` behavior compatibly with cPython.
  id: totrans-2281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即utils中的特定基类没有实现`__slots__`，因此该类的所有子类也没有实现，从而使得使用`__slots__`没有意义。这个问题只在IronPython上引起问题，显然它不兼容cPython的`__slots__`行为。
- en: 'References: [#3494](https://www.sqlalchemy.org/trac/ticket/3494)'
  id: totrans-2282
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3494](https://www.sqlalchemy.org/trac/ticket/3494)
- en: 1.0.7
  id: totrans-2283
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.0.7
- en: 'Released: July 20, 2015'
  id: totrans-2284
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2015年7月20日
- en: orm
  id: totrans-2285
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-2286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed 1.0 regression where value objects that override `__eq__()` to return
    a non-boolean-capable object, such as some geoalchemy types as well as numpy types,
    were being tested for `bool()` during a unit of work update operation, where in
    0.9 the return value of `__eq__()` was tested against “is True” to guard against
    this.
  id: totrans-2287
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了1.0中的回归问题，即覆盖`__eq__()`以返回一个非布尔类型对象的值对象，在工作单元更新操作期间进行`bool()`测试，而在0.9中，`__eq__()`的返回值被测试为“is
    True”以防止这种情况发生。
- en: 'References: [#3469](https://www.sqlalchemy.org/trac/ticket/3469)'
  id: totrans-2288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3469](https://www.sqlalchemy.org/trac/ticket/3469)
- en: '**[orm] [bug]**'
  id: totrans-2289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed 1.0 regression where a “deferred” attribute would not populate correctly
    if it were loaded within the “optimized inheritance load”, which is a special
    SELECT emitted in the case of joined table inheritance used to populate expired
    or unloaded attributes against a joined table without loading the base table.
    This is related to the fact that SQLA 1.0 no longer guesses about loading deferred
    columns and must be directed explicitly.
  id: totrans-2290
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了1.0中的回归问题，即如果在“优化继承加载”中加载了“延迟”属性，则不会正确填充，这是在使用联接表继承填充过期或未加载属性的特殊SELECT中发出的情况下，用于填充联接表而不加载基表。这与SQLA
    1.0不再猜测加载延迟列的事实有关，必须明确指示。
- en: 'References: [#3468](https://www.sqlalchemy.org/trac/ticket/3468)'
  id: totrans-2291
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3468](https://www.sqlalchemy.org/trac/ticket/3468)
- en: '**[orm] [bug]**'
  id: totrans-2292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed 1.0 regression where the “parent entity” of a synonym- mapped attribute
    on top of an [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")
    object would resolve to the original mapper, not the [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") version of it, thereby causing problems for a [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") that relies on this attribute (e.g. it’s the only representative
    attribute given in the constructor) to figure out the correct FROM clause for
    the query.
  id: totrans-2293
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了1.0版本中的问题，即在[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased")对象上的同义词映射属性的“父实体”将解析为原始映射器，而不是其[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased")版本，从而导致依赖于此属性的[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")出现问题（例如，在构造函数中给出的唯一代表性属性）无法确定查询的正确FROM子句。
- en: 'References: [#3466](https://www.sqlalchemy.org/trac/ticket/3466)'
  id: totrans-2294
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3466](https://www.sqlalchemy.org/trac/ticket/3466)
- en: orm declarative
  id: totrans-2295
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm declarative
- en: '**[orm] [declarative] [bug]**'
  id: totrans-2296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Fixed bug in [`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase") extension where a column setup
    on the ABC base which had a different attribute name vs. column name would not
    be correctly mapped on the final base class. The failure on 0.9 would be silent
    whereas on 1.0 it raised an ArgumentError, so may not have been noticed prior
    to 1.0.
  id: totrans-2297
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase")扩展中修复了一个bug，即在ABC基类上设置一个具有不同属性名与列名的列时，该列将无法正确映射到最终的基类上。在0.9版本上会默默失败，而在1.0版本上会引发一个ArgumentError，因此在1.0版本之前可能不会被注意到。
- en: 'References: [#3480](https://www.sqlalchemy.org/trac/ticket/3480)'
  id: totrans-2298
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3480](https://www.sqlalchemy.org/trac/ticket/3480)
- en: engine
  id: totrans-2299
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-2300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed regression where new methods on `ResultProxy` used by the ORM [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object (part of the performance enhancements of [#3175](https://www.sqlalchemy.org/trac/ticket/3175))
    would not raise the “this result does not return rows” exception in the case where
    the driver (typically MySQL) fails to generate cursor.description correctly; an
    AttributeError against NoneType would be raised instead.
  id: totrans-2301
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个回归问题，即ORM [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")对象使用的`ResultProxy`上的新方法（作为[#3175](https://www.sqlalchemy.org/trac/ticket/3175)性能增强的一部分）在驱动程序（通常是MySQL）无法正确生成cursor.description时不会引发“此结果不返回行”异常；而是会引发一个针对NoneType的AttributeError。
- en: 'References: [#3481](https://www.sqlalchemy.org/trac/ticket/3481)'
  id: totrans-2302
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3481](https://www.sqlalchemy.org/trac/ticket/3481)
- en: '**[engine] [bug]**'
  id: totrans-2303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: 'Fixed regression where `ResultProxy.keys()` would return un-adjusted internal
    symbol names for “anonymous” labels, which are the “foo_1” types of labels we
    see generated for SQL functions without labels and similar. This was a side effect
    of the performance enhancements implemented as part of #918.'
  id: totrans-2304
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即`ResultProxy.keys()`会返回未调整的内部符号名称，用于“匿名”标签，这些标签是我们在没有标签的SQL函数和类似情况下生成的“foo_1”类型的标签。这是作为#918的性能增强的副作用实现的。
- en: 'References: [#3483](https://www.sqlalchemy.org/trac/ticket/3483)'
  id: totrans-2305
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3483](https://www.sqlalchemy.org/trac/ticket/3483)
- en: sql
  id: totrans-2306
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-2307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added a [`ColumnElement.cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.cast
    "sqlalchemy.sql.expression.ColumnElement.cast") method which performs the same
    purpose as the standalone [`cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.cast
    "sqlalchemy.sql.expression.cast") function. Pull request courtesy Sebastian Bank.
  id: totrans-2308
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个[`ColumnElement.cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.cast
    "sqlalchemy.sql.expression.ColumnElement.cast")方法，其作用与独立的[`cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.cast
    "sqlalchemy.sql.expression.cast")函数相同。感谢Sebastian Bank的Pull请求。
- en: 'References: [#3459](https://www.sqlalchemy.org/trac/ticket/3459)'
  id: totrans-2309
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3459](https://www.sqlalchemy.org/trac/ticket/3459)
- en: '**[sql] [bug]**'
  id: totrans-2310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where coercion of literal `True` or `False` constant in conjunction
    with [`and_()`](../core/sqlelement.html#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_")
    or [`or_()`](../core/sqlelement.html#sqlalchemy.sql.expression.or_ "sqlalchemy.sql.expression.or_")
    would fail with an AttributeError.
  id: totrans-2311
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即在与[`and_()`](../core/sqlelement.html#sqlalchemy.sql.expression.and_
    "sqlalchemy.sql.expression.and_")或[`or_()`](../core/sqlelement.html#sqlalchemy.sql.expression.or_
    "sqlalchemy.sql.expression.or_")结合使用时，对字面值`True`或`False`的强制转换会导致AttributeError。
- en: 'References: [#3490](https://www.sqlalchemy.org/trac/ticket/3490)'
  id: totrans-2312
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3490](https://www.sqlalchemy.org/trac/ticket/3490)
- en: '**[sql] [bug]**'
  id: totrans-2313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed potential issue where a custom subclass of [`FunctionElement`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement
    "sqlalchemy.sql.functions.FunctionElement") or other column element that incorrectly
    states ‘None’ or any other invalid object as the `.type` attribute will report
    this exception instead of recursion overflow.
  id: totrans-2314
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个潜在问题，即自定义的[`FunctionElement`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement
    "sqlalchemy.sql.functions.FunctionElement")子类或其他列元素错误地将“None”或任何其他无效对象声明为`.type`属性时，会报告此异常而不是递归溢出。
- en: 'References: [#3485](https://www.sqlalchemy.org/trac/ticket/3485)'
  id: totrans-2315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3485](https://www.sqlalchemy.org/trac/ticket/3485)
- en: '**[sql] [bug]**'
  id: totrans-2316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where the modulus SQL operator wouldn’t work in reverse due to a missing
    `__rmod__` method. Pull request courtesy dan-gittik.
  id: totrans-2317
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了取模 SQL 运算符无法反向工作的 bug，因为缺少了 `__rmod__` 方法。感谢 dan-gittik 提交的拉取请求。
- en: schema
  id: totrans-2318
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: '**[schema] [feature]**'
  id: totrans-2319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema] [feature]**'
- en: Added support for the MINVALUE, MAXVALUE, NO MINVALUE, NO MAXVALUE, and CYCLE
    arguments for CREATE SEQUENCE as supported by PostgreSQL and Oracle. Pull request
    courtesy jakeogh.
  id: totrans-2320
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对 PostgreSQL 和 Oracle 支持的 CREATE SEQUENCE 的 MINVALUE、MAXVALUE、NO MINVALUE、NO
    MAXVALUE 和 CYCLE 参数。感谢 jakeogh 提交的拉取请求。
- en: orm
  id: totrans-2321
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-2322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed 1.0 regression where value objects that override `__eq__()` to return
    a non-boolean-capable object, such as some geoalchemy types as well as numpy types,
    were being tested for `bool()` during a unit of work update operation, where in
    0.9 the return value of `__eq__()` was tested against “is True” to guard against
    this.
  id: totrans-2323
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 1.0 版本中的一个问题，即值对象覆盖 `__eq__()` 以返回一个非布尔值对象，例如一些 geoalchemy 类型和 numpy 类型，在工作单元更新操作期间会被测试为
    `bool()`，而在 0.9 版本中，`__eq__()` 的返回值被测试为“is True”以防止这种情况发生。
- en: 'References: [#3469](https://www.sqlalchemy.org/trac/ticket/3469)'
  id: totrans-2324
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3469](https://www.sqlalchemy.org/trac/ticket/3469)
- en: '**[orm] [bug]**'
  id: totrans-2325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed 1.0 regression where a “deferred” attribute would not populate correctly
    if it were loaded within the “optimized inheritance load”, which is a special
    SELECT emitted in the case of joined table inheritance used to populate expired
    or unloaded attributes against a joined table without loading the base table.
    This is related to the fact that SQLA 1.0 no longer guesses about loading deferred
    columns and must be directed explicitly.
  id: totrans-2326
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 1.0 版本中的一个问题，即“延迟”属性在“优化继承加载”中未正确填充，这是在联接表继承的情况下发出的特殊 SELECT，用于填充过期或未加载的属性，而不加载基表。这与
    SQLA 1.0 不再猜测加载延迟列有关，必须明确指定。
- en: 'References: [#3468](https://www.sqlalchemy.org/trac/ticket/3468)'
  id: totrans-2327
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考��[#3468](https://www.sqlalchemy.org/trac/ticket/3468)
- en: '**[orm] [bug]**'
  id: totrans-2328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed 1.0 regression where the “parent entity” of a synonym- mapped attribute
    on top of an [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")
    object would resolve to the original mapper, not the [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") version of it, thereby causing problems for a [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") that relies on this attribute (e.g. it’s the only representative
    attribute given in the constructor) to figure out the correct FROM clause for
    the query.
  id: totrans-2329
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 1.0 版本中的一个问题，即在 [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") 对象上的同义映射属性的“父实体”将解析为原始映射器，而不是其 [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") 版本，从而导致依赖于此属性的 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 出现问题（例如，在构造函数中给出的唯一代表性属性）无法确定查询的正确 FROM 子句。
- en: 'References: [#3466](https://www.sqlalchemy.org/trac/ticket/3466)'
  id: totrans-2330
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3466](https://www.sqlalchemy.org/trac/ticket/3466)
- en: orm declarative
  id: totrans-2331
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm 声明
- en: '**[orm] [declarative] [bug]**'
  id: totrans-2332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Fixed bug in [`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase") extension where a column setup
    on the ABC base which had a different attribute name vs. column name would not
    be correctly mapped on the final base class. The failure on 0.9 would be silent
    whereas on 1.0 it raised an ArgumentError, so may not have been noticed prior
    to 1.0.
  id: totrans-2333
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在[`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase")扩展中的一个 bug，即在 ABC 基类上设置的列，如果属性名与列名不同，则不会正确映射到最终基类上。在
    0.9 版本上失败是静默的，而在 1.0 版本上会引发一个 ArgumentError，因此在 1.0 版本之前可能不会被注意到。
- en: 'References: [#3480](https://www.sqlalchemy.org/trac/ticket/3480)'
  id: totrans-2334
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3480](https://www.sqlalchemy.org/trac/ticket/3480)
- en: engine
  id: totrans-2335
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-2336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed regression where new methods on `ResultProxy` used by the ORM [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object (part of the performance enhancements of [#3175](https://www.sqlalchemy.org/trac/ticket/3175))
    would not raise the “this result does not return rows” exception in the case where
    the driver (typically MySQL) fails to generate cursor.description correctly; an
    AttributeError against NoneType would be raised instead.
  id: totrans-2337
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了用于 ORM [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    对象的新方法（作为 [#3175](https://www.sqlalchemy.org/trac/ticket/3175) 性能增强的一部分）的回归错误，在驱动程序（通常是
    MySQL）无法正确生成 cursor.description 时，不会引发“此结果不返回行”异常；而是会引发 AttributeError。反而会引发针对
    NoneType 的 AttributeError。
- en: 'References: [#3481](https://www.sqlalchemy.org/trac/ticket/3481)'
  id: totrans-2338
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3481](https://www.sqlalchemy.org/trac/ticket/3481)
- en: '**[engine] [bug]**'
  id: totrans-2339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: 'Fixed regression where `ResultProxy.keys()` would return un-adjusted internal
    symbol names for “anonymous” labels, which are the “foo_1” types of labels we
    see generated for SQL functions without labels and similar. This was a side effect
    of the performance enhancements implemented as part of #918.'
  id: totrans-2340
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '修复了`ResultProxy.keys()`返回未调整的内部符号名称的回归错误，这些名称是我们在没有标签的 SQL 函数和类似情况下生成的“foo_1”类型的标签。这是作为
    #918 的一部分实施的性能增强的副作用。'
- en: 'References: [#3483](https://www.sqlalchemy.org/trac/ticket/3483)'
  id: totrans-2341
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3483](https://www.sqlalchemy.org/trac/ticket/3483)
- en: sql
  id: totrans-2342
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-2343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added a [`ColumnElement.cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.cast
    "sqlalchemy.sql.expression.ColumnElement.cast") method which performs the same
    purpose as the standalone [`cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.cast
    "sqlalchemy.sql.expression.cast") function. Pull request courtesy Sebastian Bank.
  id: totrans-2344
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个 [`ColumnElement.cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.cast
    "sqlalchemy.sql.expression.ColumnElement.cast") 方法，其作用与独立的 [`cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.cast
    "sqlalchemy.sql.expression.cast") 函数相同。此功能感谢 Sebastian Bank 提交的拉取请求。
- en: 'References: [#3459](https://www.sqlalchemy.org/trac/ticket/3459)'
  id: totrans-2345
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3459](https://www.sqlalchemy.org/trac/ticket/3459)
- en: '**[sql] [bug]**'
  id: totrans-2346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where coercion of literal `True` or `False` constant in conjunction
    with [`and_()`](../core/sqlelement.html#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_")
    or [`or_()`](../core/sqlelement.html#sqlalchemy.sql.expression.or_ "sqlalchemy.sql.expression.or_")
    would fail with an AttributeError.
  id: totrans-2347
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了将字面常量`True`或`False`与[`and_()`](../core/sqlelement.html#sqlalchemy.sql.expression.and_
    "sqlalchemy.sql.expression.and_")或[`or_()`](../core/sqlelement.html#sqlalchemy.sql.expression.or_
    "sqlalchemy.sql.expression.or_")结合使用时会导致 AttributeError 的错误。
- en: 'References: [#3490](https://www.sqlalchemy.org/trac/ticket/3490)'
  id: totrans-2348
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3490](https://www.sqlalchemy.org/trac/ticket/3490)
- en: '**[sql] [bug]**'
  id: totrans-2349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed potential issue where a custom subclass of [`FunctionElement`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement
    "sqlalchemy.sql.functions.FunctionElement") or other column element that incorrectly
    states ‘None’ or any other invalid object as the `.type` attribute will report
    this exception instead of recursion overflow.
  id: totrans-2350
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了自定义 [`FunctionElement`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement
    "sqlalchemy.sql.functions.FunctionElement") 或其他列元素的子类错误地将“None”或任何其他无效对象陈述为`.type`属性时报告此异常而不是递归溢出的潜在问题。
- en: 'References: [#3485](https://www.sqlalchemy.org/trac/ticket/3485)'
  id: totrans-2351
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3485](https://www.sqlalchemy.org/trac/ticket/3485)
- en: '**[sql] [bug]**'
  id: totrans-2352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where the modulus SQL operator wouldn’t work in reverse due to a missing
    `__rmod__` method. Pull request courtesy dan-gittik.
  id: totrans-2353
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了取模 SQL 运算符无法反转的错误，原因是缺少了`__rmod__`方法。此修复感谢 dan-gittik 提交的拉取请求。
- en: schema
  id: totrans-2354
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: schema
- en: '**[schema] [feature]**'
  id: totrans-2355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema] [feature]**'
- en: Added support for the MINVALUE, MAXVALUE, NO MINVALUE, NO MAXVALUE, and CYCLE
    arguments for CREATE SEQUENCE as supported by PostgreSQL and Oracle. Pull request
    courtesy jakeogh.
  id: totrans-2356
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 CREATE SEQUENCE 的 MINVALUE、MAXVALUE、NO MINVALUE、NO MAXVALUE 和 CYCLE 参数的支持，这些参数由
    PostgreSQL 和 Oracle 支持。此功能感谢 jakeogh 提交的拉取请求。
- en: 1.0.6
  id: totrans-2357
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.0.6
- en: 'Released: June 25, 2015'
  id: totrans-2358
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2015 年 6 月 25 日
- en: orm
  id: totrans-2359
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-2360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a major regression in the 1.0 series where the version_id_counter feature
    would cause an object’s version counter to be incremented when there was no net
    change to the object’s row, but instead an object related to it via relationship
    (e.g. typically many-to-one) were associated or de-associated with it, resulting
    in an UPDATE statement that updates the object’s version counter and nothing else.
    In the use case where the relatively recent “server side” and/or “programmatic/conditional”
    version counter feature were used (e.g. setting version_id_generator to False),
    the bug could cause an UPDATE without a valid SET clause to be emitted.
  id: totrans-2361
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了1.0系列中的一个重大回归问题，即当version_id_counter功能导致对象的版本计数器在对象的行没有净变化时被增加，而是通过关系（例如通常是一对多）与之相关联或取消关联时，会导致一个UPDATE语句更新对象的版本计数器而不做其他任何操作。在相对较新的“服务器端”和/或“程序化/条件化”版本计数器功能被使用的用例中（例如将version_id_generator设置为False），这个错误可能导致发出一个没有有效SET子句的UPDATE。
- en: 'References: [#3465](https://www.sqlalchemy.org/trac/ticket/3465)'
  id: totrans-2362
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3465](https://www.sqlalchemy.org/trac/ticket/3465)
- en: '**[orm] [bug]**'
  id: totrans-2363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed 1.0 regression where the enhanced behavior of single-inheritance joins
    of [#3222](https://www.sqlalchemy.org/trac/ticket/3222) takes place inappropriately
    for a JOIN along explicit join criteria with a single-inheritance subclass that
    does not make use of any discriminator, resulting in an additional “AND NULL”
    clause.
  id: totrans-2364
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了1.0版本中的一个问题，即对于不使用任何鉴别器的单继承子类的显式连接条件进行JOIN时，单继承连接的增强行为[#3222](https://www.sqlalchemy.org/trac/ticket/3222)不适当地发生，导致额外的“AND
    NULL”子句。
- en: 'References: [#3462](https://www.sqlalchemy.org/trac/ticket/3462)'
  id: totrans-2365
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3462](https://www.sqlalchemy.org/trac/ticket/3462)
- en: '**[orm] [bug]**'
  id: totrans-2366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in new [`Session.bulk_update_mappings()`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_update_mappings
    "sqlalchemy.orm.Session.bulk_update_mappings") feature where the primary key columns
    used in the WHERE clause to locate the row would also be included in the SET clause,
    setting their value to themselves unnecessarily. Pull request courtesy Patrick
    Hayes.
  id: totrans-2367
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新的[`Session.bulk_update_mappings()`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_update_mappings
    "sqlalchemy.orm.Session.bulk_update_mappings")功能中的一个bug，其中用于定位行的WHERE子句中使用的主键列也会包含在SET子句中，将它们的值不必要地设置为它们自己。感谢Patrick
    Hayes的拉取请求。
- en: 'References: [#3451](https://www.sqlalchemy.org/trac/ticket/3451)'
  id: totrans-2368
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3451](https://www.sqlalchemy.org/trac/ticket/3451)
- en: '**[orm] [bug]**'
  id: totrans-2369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed an unexpected-use regression whereby custom [`Comparator`](../core/type_api.html#sqlalchemy.types.TypeEngine.Comparator
    "sqlalchemy.types.TypeEngine.Comparator") objects that made use of the `__clause_element__()`
    method and returned an object that was an ORM-mapped [`InstrumentedAttribute`](../orm/internals.html#sqlalchemy.orm.InstrumentedAttribute
    "sqlalchemy.orm.InstrumentedAttribute") and not explicitly a [`ColumnElement`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") would fail to be correctly handled
    when passed as an expression to [`Session.query()`](../orm/session_api.html#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query"). The logic in 0.9 happened to succeed on this,
    so this use case is now supported.
  id: totrans-2370
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个意外使用回归问题，即自定义[`Comparator`](../core/type_api.html#sqlalchemy.types.TypeEngine.Comparator
    "sqlalchemy.types.TypeEngine.Comparator")对象使用`__clause_element__()`方法并返回一个ORM映射的[`InstrumentedAttribute`](../orm/internals.html#sqlalchemy.orm.InstrumentedAttribute
    "sqlalchemy.orm.InstrumentedAttribute")对象而不是显式地[`ColumnElement`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")时，当作为表达式传递给[`Session.query()`](../orm/session_api.html#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query")时将无法正确处理。0.9版本的逻辑恰好成功处理了这个问题，因此现在支持这种用例。
- en: 'References: [#3448](https://www.sqlalchemy.org/trac/ticket/3448)'
  id: totrans-2371
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3448](https://www.sqlalchemy.org/trac/ticket/3448)
- en: sql
  id: totrans-2372
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-2373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed a bug where clause adaption as applied to a [`Label`](../core/sqlelement.html#sqlalchemy.sql.expression.Label
    "sqlalchemy.sql.expression.Label") object would fail to accommodate the labeled
    SQL expression in all cases, such that any SQL operation that made use of [`Label.self_group()`](../core/sqlelement.html#sqlalchemy.sql.expression.Label.self_group
    "sqlalchemy.sql.expression.Label.self_group") would use the original unadapted
    expression. One effect of this would be that an ORM [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") construct would not fully accommodate attributes mapped
    by [`column_property`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property"), such that the un-aliased table could leak out
    when the property were used in some kinds of SQL comparisons.
  id: totrans-2374
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，其中应用于[`Label`](../core/sqlelement.html#sqlalchemy.sql.expression.Label
    "sqlalchemy.sql.expression.Label")对象的子句适应在所有情况下都会失败，以至于任何使用[`Label.self_group()`](../core/sqlelement.html#sqlalchemy.sql.expression.Label.self_group
    "sqlalchemy.sql.expression.Label.self_group")的SQL操作都会使用原始未适应的表达式。这将导致ORM [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased")构造无法完全适应由[`column_property`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property")映射的属性，因此在某些类型的SQL比较中，未别名化的表可能泄漏出来。
- en: 'References: [#3445](https://www.sqlalchemy.org/trac/ticket/3445)'
  id: totrans-2375
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3445](https://www.sqlalchemy.org/trac/ticket/3445)
- en: postgresql
  id: totrans-2376
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-2377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added support for storage parameters under CREATE INDEX, using a new keyword
    argument `postgresql_with`. Also added support for reflection to support both
    the `postgresql_with` flag as well as the `postgresql_using` flag, which will
    now be set on [`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    objects that are reflected, as well present in a new “dialect_options” dictionary
    in the result of [`Inspector.get_indexes()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_indexes
    "sqlalchemy.engine.reflection.Inspector.get_indexes"). Pull request courtesy Pete
    Hollobon.
  id: totrans-2378
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对在CREATE INDEX下使用存储参数的支持，使用新的关键字参数`postgresql_with`。还添加了反射支持，以支持`postgresql_with`标志以及`postgresql_using`标志，这些标志现在将设置在反射的[`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")对象上，并且还存在于[`Inspector.get_indexes()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_indexes
    "sqlalchemy.engine.reflection.Inspector.get_indexes")结果中的新“dialect_options”字典中。感谢Pete
    Hollobon的拉取请求。
- en: See also
  id: totrans-2379
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Index Storage Parameters](../dialects/postgresql.html#postgresql-index-storage)'
  id: totrans-2380
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[索引存储参数](../dialects/postgresql.html#postgresql-index-storage)'
- en: 'References: [#3455](https://www.sqlalchemy.org/trac/ticket/3455)'
  id: totrans-2381
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3455](https://www.sqlalchemy.org/trac/ticket/3455)
- en: '**[postgresql] [feature]**'
  id: totrans-2382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added new execution option `max_row_buffer` which is interpreted by the psycopg2
    dialect when the `stream_results` option is used, which sets a limit on the size
    of the row buffer that may be allocated. This value is also provided based on
    the integer value sent to [`Query.yield_per()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.yield_per
    "sqlalchemy.orm.Query.yield_per"). Pull request courtesy mcclurem.
  id: totrans-2383
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的执行选项`max_row_buffer`，当使用`stream_results`选项时，由psycopg2方言解释，设置了可分配的行缓冲区大小限制。该值还是基于发送给[`Query.yield_per()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.yield_per
    "sqlalchemy.orm.Query.yield_per")的整数值提供的。感谢mcclurem的拉取请求。
- en: '**[postgresql] [bug] [pypy]**'
  id: totrans-2384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug] [pypy]**'
- en: Re-fixed this issue first released in 1.0.5 to fix psycopg2cffi JSONB support
    once again, as they suddenly switched on unconditional decoding of JSONB types
    in version 2.7.1. Version detection now specifies 2.7.1 as where we should expect
    the DBAPI to do json encoding for us.
  id: totrans-2385
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重新修复了在1.0.5版本中首次发布的问题，以再次修复psycopg2cffi对JSONB支持，因为他们在2.7.1版本中突然切换到对JSONB类型的无条件解码。版本检测现在指定2.7.1作为我们应该期望DBAPI为我们进行json编码的地方。
- en: 'References: [#3439](https://www.sqlalchemy.org/trac/ticket/3439)'
  id: totrans-2386
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3439](https://www.sqlalchemy.org/trac/ticket/3439)
- en: '**[postgresql] [bug]**'
  id: totrans-2387
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Repaired the [`ExcludeConstraint`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint") construct to support common
    features that other objects like [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") now do, that the column expression may be specified
    as an arbitrary SQL expression such as [`cast`](../core/sqlelement.html#sqlalchemy.sql.expression.cast
    "sqlalchemy.sql.expression.cast") or [`text`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text").
  id: totrans-2388
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`ExcludeConstraint`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint")构造以支持其他对象（如[`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")）现在支持的常见功能，即列表达式可以被指定为任意 SQL 表达式，如[`cast`](../core/sqlelement.html#sqlalchemy.sql.expression.cast
    "sqlalchemy.sql.expression.cast")或[`text`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")。
- en: 'References: [#3454](https://www.sqlalchemy.org/trac/ticket/3454)'
  id: totrans-2389
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3454](https://www.sqlalchemy.org/trac/ticket/3454)
- en: mssql
  id: totrans-2390
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-2391
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed issue when using [`VARBINARY`](../core/type_basics.html#sqlalchemy.types.VARBINARY
    "sqlalchemy.types.VARBINARY") type in conjunction with an INSERT of NULL + pyodbc;
    pyodbc requires a special object be passed in order to persist NULL. As the [`VARBINARY`](../core/type_basics.html#sqlalchemy.types.VARBINARY
    "sqlalchemy.types.VARBINARY") type is now usually the default for [`LargeBinary`](../core/type_basics.html#sqlalchemy.types.LargeBinary
    "sqlalchemy.types.LargeBinary") due to [#3039](https://www.sqlalchemy.org/trac/ticket/3039),
    this issue is partially a regression in 1.0. The pymssql driver appears to be
    unaffected.
  id: totrans-2392
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用 [`VARBINARY`](../core/type_basics.html#sqlalchemy.types.VARBINARY "sqlalchemy.types.VARBINARY")
    类型与 NULL + pyodbc 的 INSERT 时出现的问题；pyodbc 需要传递一个特殊对象才能持久化 NULL。由于 [#3039](https://www.sqlalchemy.org/trac/ticket/3039)
    的原因，[`VARBINARY`](../core/type_basics.html#sqlalchemy.types.VARBINARY "sqlalchemy.types.VARBINARY")
    类型现在通常是 [`LargeBinary`](../core/type_basics.html#sqlalchemy.types.LargeBinary
    "sqlalchemy.types.LargeBinary") 的默认类型之一，因此该问题在 1.0 版本中部分是一个回归。pymssql 驱动程序似乎不受影响。
- en: 'References: [#3464](https://www.sqlalchemy.org/trac/ticket/3464)'
  id: totrans-2393
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3464](https://www.sqlalchemy.org/trac/ticket/3464)
- en: misc
  id: totrans-2394
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [documentation]**'
  id: totrans-2395
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [documentation]**'
- en: Fixed an internal “memoization” routine for method types such that a Python
    descriptor is no longer used; repairs inspectability of these methods including
    support for Sphinx documentation.
  id: totrans-2396
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个内部“记忆化”方法类型的例程，使得不再使用 Python 描述符；修复了这些方法的可检查性，包括对 Sphinx 文档的支持。
- en: 'References: [#2077](https://www.sqlalchemy.org/trac/ticket/2077)'
  id: totrans-2397
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2077](https://www.sqlalchemy.org/trac/ticket/2077)
- en: orm
  id: totrans-2398
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-2399
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a major regression in the 1.0 series where the version_id_counter feature
    would cause an object’s version counter to be incremented when there was no net
    change to the object’s row, but instead an object related to it via relationship
    (e.g. typically many-to-one) were associated or de-associated with it, resulting
    in an UPDATE statement that updates the object’s version counter and nothing else.
    In the use case where the relatively recent “server side” and/or “programmatic/conditional”
    version counter feature were used (e.g. setting version_id_generator to False),
    the bug could cause an UPDATE without a valid SET clause to be emitted.
  id: totrans-2400
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 1.0 系列中的一个重大回归，即当版本_id_counter 功能导致对象的版本计数器在对象的行没有净变化时被递增时，而是通过关系与之相关联（例如通常是多对一关系）或与之解除关联，导致更新语句仅更新对象的版本计数器而不更新其他内容。在相对较新的“服务器端”和/或“程序化/条件性”版本计数器功能（例如将
    version_id_generator 设置为 False）的使用案例中，该错误可能导致发出无有效 SET 子句的更新。
- en: 'References: [#3465](https://www.sqlalchemy.org/trac/ticket/3465)'
  id: totrans-2401
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3465](https://www.sqlalchemy.org/trac/ticket/3465)
- en: '**[orm] [bug]**'
  id: totrans-2402
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed 1.0 regression where the enhanced behavior of single-inheritance joins
    of [#3222](https://www.sqlalchemy.org/trac/ticket/3222) takes place inappropriately
    for a JOIN along explicit join criteria with a single-inheritance subclass that
    does not make use of any discriminator, resulting in an additional “AND NULL”
    clause.
  id: totrans-2403
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 1.0 版本中的一个回归，即对于一个没有使用任何鉴别器的单继承子类，通过显式连接条件进行 JOIN 时，增强的单继承连接行为不适当地发生，导致额外的“AND
    NULL”子句。
- en: 'References: [#3462](https://www.sqlalchemy.org/trac/ticket/3462)'
  id: totrans-2404
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3462](https://www.sqlalchemy.org/trac/ticket/3462)
- en: '**[orm] [bug]**'
  id: totrans-2405
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in new [`Session.bulk_update_mappings()`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_update_mappings
    "sqlalchemy.orm.Session.bulk_update_mappings") feature where the primary key columns
    used in the WHERE clause to locate the row would also be included in the SET clause,
    setting their value to themselves unnecessarily. Pull request courtesy Patrick
    Hayes.
  id: totrans-2406
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新的[`Session.bulk_update_mappings()`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_update_mappings
    "sqlalchemy.orm.Session.bulk_update_mappings")功能中的一个 bug，即在用于定位行的 WHERE 子句中使用的主键列也会包含在
    SET 子句中，将它们的值不必要地设置为它们自己。感谢 Patrick Hayes 的拉取请求。
- en: 'References: [#3451](https://www.sqlalchemy.org/trac/ticket/3451)'
  id: totrans-2407
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3451](https://www.sqlalchemy.org/trac/ticket/3451)
- en: '**[orm] [bug]**'
  id: totrans-2408
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed an unexpected-use regression whereby custom [`Comparator`](../core/type_api.html#sqlalchemy.types.TypeEngine.Comparator
    "sqlalchemy.types.TypeEngine.Comparator") objects that made use of the `__clause_element__()`
    method and returned an object that was an ORM-mapped [`InstrumentedAttribute`](../orm/internals.html#sqlalchemy.orm.InstrumentedAttribute
    "sqlalchemy.orm.InstrumentedAttribute") and not explicitly a [`ColumnElement`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") would fail to be correctly handled
    when passed as an expression to [`Session.query()`](../orm/session_api.html#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query"). The logic in 0.9 happened to succeed on this,
    so this use case is now supported.
  id: totrans-2409
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个意外使用回归，即自定义[`Comparator`](../core/type_api.html#sqlalchemy.types.TypeEngine.Comparator
    "sqlalchemy.types.TypeEngine.Comparator")对象使用了`__clause_element__()`方法并返回一个 ORM
    映射的[`InstrumentedAttribute`](../orm/internals.html#sqlalchemy.orm.InstrumentedAttribute
    "sqlalchemy.orm.InstrumentedAttribute")对象而不是显式地[`ColumnElement`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")时，当作为表达式传递给[`Session.query()`](../orm/session_api.html#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query")时无法正确处理。0.9 版本中的逻辑恰好成功，因此现在支持这种用例。
- en: 'References: [#3448](https://www.sqlalchemy.org/trac/ticket/3448)'
  id: totrans-2410
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3448](https://www.sqlalchemy.org/trac/ticket/3448)
- en: sql
  id: totrans-2411
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-2412
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed a bug where clause adaption as applied to a [`Label`](../core/sqlelement.html#sqlalchemy.sql.expression.Label
    "sqlalchemy.sql.expression.Label") object would fail to accommodate the labeled
    SQL expression in all cases, such that any SQL operation that made use of [`Label.self_group()`](../core/sqlelement.html#sqlalchemy.sql.expression.Label.self_group
    "sqlalchemy.sql.expression.Label.self_group") would use the original unadapted
    expression. One effect of this would be that an ORM [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") construct would not fully accommodate attributes mapped
    by [`column_property`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property"), such that the un-aliased table could leak out
    when the property were used in some kinds of SQL comparisons.
  id: totrans-2413
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即应用于[`Label`](../core/sqlelement.html#sqlalchemy.sql.expression.Label
    "sqlalchemy.sql.expression.Label")对象的子句适应在某些情况下无法容纳带标签的 SQL 表达式，因此任何使用[`Label.self_group()`](../core/sqlelement.html#sqlalchemy.sql.expression.Label.self_group
    "sqlalchemy.sql.expression.Label.self_group")的 SQL 操作都将使用原始未适应的表达式。其中一个影响是，ORM
    [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")
    构造不会完全适应由[`column_property`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property")映射的属性，因此在某些类型的 SQL 比较中，未别名化的表可能泄漏出来。
- en: 'References: [#3445](https://www.sqlalchemy.org/trac/ticket/3445)'
  id: totrans-2414
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3445](https://www.sqlalchemy.org/trac/ticket/3445)
- en: postgresql
  id: totrans-2415
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-2416
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added support for storage parameters under CREATE INDEX, using a new keyword
    argument `postgresql_with`. Also added support for reflection to support both
    the `postgresql_with` flag as well as the `postgresql_using` flag, which will
    now be set on [`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    objects that are reflected, as well present in a new “dialect_options” dictionary
    in the result of [`Inspector.get_indexes()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_indexes
    "sqlalchemy.engine.reflection.Inspector.get_indexes"). Pull request courtesy Pete
    Hollobon.
  id: totrans-2417
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对在 CREATE INDEX 下使用存储参数的支持，使用新的关键字参数 `postgresql_with`。还添加了反射支持，以支持 `postgresql_with`
    标志和 `postgresql_using` 标志，这些标志现在将设置在反射的[`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")对象上，并在[`Inspector.get_indexes()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_indexes
    "sqlalchemy.engine.reflection.Inspector.get_indexes")的结果中以新的“dialect_options”字典的形式呈现。感谢
    Pete Hollobon 的拉取请求。
- en: See also
  id: totrans-2418
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Index Storage Parameters](../dialects/postgresql.html#postgresql-index-storage)'
  id: totrans-2419
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[索引存储参数](../dialects/postgresql.html#postgresql-index-storage)'
- en: 'References: [#3455](https://www.sqlalchemy.org/trac/ticket/3455)'
  id: totrans-2420
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#3455](https://www.sqlalchemy.org/trac/ticket/3455)
- en: '**[postgresql] [feature]**'
  id: totrans-2421
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added new execution option `max_row_buffer` which is interpreted by the psycopg2
    dialect when the `stream_results` option is used, which sets a limit on the size
    of the row buffer that may be allocated. This value is also provided based on
    the integer value sent to [`Query.yield_per()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.yield_per
    "sqlalchemy.orm.Query.yield_per"). Pull request courtesy mcclurem.
  id: totrans-2422
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的执行选项`max_row_buffer`，当使用`stream_results`选项时，由psycopg2方言解释，该选项设置可以分配的行缓冲区的大小限制。这个值也是根据发送给[`Query.yield_per()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.yield_per
    "sqlalchemy.orm.Query.yield_per")的整数值提供的。感谢mcclurem的拉取请求。
- en: '**[postgresql] [bug] [pypy]**'
  id: totrans-2423
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug] [pypy]**'
- en: Re-fixed this issue first released in 1.0.5 to fix psycopg2cffi JSONB support
    once again, as they suddenly switched on unconditional decoding of JSONB types
    in version 2.7.1. Version detection now specifies 2.7.1 as where we should expect
    the DBAPI to do json encoding for us.
  id: totrans-2424
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重新修复了在1.0.5中首次发布的此问题，以再次修复psycopg2cffi的JSONB支持，因为他们突然在版本2.7.1中无条件地切换了对JSONB类型的解码。版本检测现在指定2.7.1作为我们应该期望DBAPI为我们进行json编码的位置。
- en: 'References: [#3439](https://www.sqlalchemy.org/trac/ticket/3439)'
  id: totrans-2425
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#3439](https://www.sqlalchemy.org/trac/ticket/3439)
- en: '**[postgresql] [bug]**'
  id: totrans-2426
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Repaired the [`ExcludeConstraint`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint") construct to support common
    features that other objects like [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") now do, that the column expression may be specified
    as an arbitrary SQL expression such as [`cast`](../core/sqlelement.html#sqlalchemy.sql.expression.cast
    "sqlalchemy.sql.expression.cast") or [`text`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text").
  id: totrans-2427
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`ExcludeConstraint`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint")结构，以支持其他对象（如[`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")）现在支持的常见功能，即列表达式可以指定为任意的SQL表达式，如[`cast`](../core/sqlelement.html#sqlalchemy.sql.expression.cast
    "sqlalchemy.sql.expression.cast")或[`text`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")。
- en: 'References: [#3454](https://www.sqlalchemy.org/trac/ticket/3454)'
  id: totrans-2428
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#3454](https://www.sqlalchemy.org/trac/ticket/3454)
- en: mssql
  id: totrans-2429
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-2430
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed issue when using [`VARBINARY`](../core/type_basics.html#sqlalchemy.types.VARBINARY
    "sqlalchemy.types.VARBINARY") type in conjunction with an INSERT of NULL + pyodbc;
    pyodbc requires a special object be passed in order to persist NULL. As the [`VARBINARY`](../core/type_basics.html#sqlalchemy.types.VARBINARY
    "sqlalchemy.types.VARBINARY") type is now usually the default for [`LargeBinary`](../core/type_basics.html#sqlalchemy.types.LargeBinary
    "sqlalchemy.types.LargeBinary") due to [#3039](https://www.sqlalchemy.org/trac/ticket/3039),
    this issue is partially a regression in 1.0. The pymssql driver appears to be
    unaffected.
  id: totrans-2431
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用[`VARBINARY`](../core/type_basics.html#sqlalchemy.types.VARBINARY "sqlalchemy.types.VARBINARY")类型与插入NULL
    + pyodbc时出现的问题；pyodbc需要传递一个特殊对象才能持久化NULL。由于[#3039](https://www.sqlalchemy.org/trac/ticket/3039)，[`VARBINARY`](../core/type_basics.html#sqlalchemy.types.VARBINARY
    "sqlalchemy.types.VARBINARY")类型现在通常是[`LargeBinary`](../core/type_basics.html#sqlalchemy.types.LargeBinary
    "sqlalchemy.types.LargeBinary")的默认值，所以这个问题在1.0中部分是一个退化。pymssql驱动程序似乎不受影响。
- en: 'References: [#3464](https://www.sqlalchemy.org/trac/ticket/3464)'
  id: totrans-2432
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#3464](https://www.sqlalchemy.org/trac/ticket/3464)
- en: misc
  id: totrans-2433
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[bug] [documentation]**'
  id: totrans-2434
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [documentation]**'
- en: Fixed an internal “memoization” routine for method types such that a Python
    descriptor is no longer used; repairs inspectability of these methods including
    support for Sphinx documentation.
  id: totrans-2435
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了内部的“记忆化”方法类型，不再使用Python描述符；修复了这些方法的可检查性，包括对Sphinx文档的支持。
- en: 'References: [#2077](https://www.sqlalchemy.org/trac/ticket/2077)'
  id: totrans-2436
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#2077](https://www.sqlalchemy.org/trac/ticket/2077)
- en: 1.0.5
  id: totrans-2437
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.0.5
- en: 'Released: June 7, 2015'
  id: totrans-2438
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2015年6月7日
- en: orm
  id: totrans-2439
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-2440
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new event [`InstanceEvents.refresh_flush()`](../orm/events.html#sqlalchemy.orm.InstanceEvents.refresh_flush
    "sqlalchemy.orm.InstanceEvents.refresh_flush"), invoked when an INSERT or UPDATE
    level default value fetched via RETURNING or Python-side default is invoked within
    the flush process. This is to provide a hook that is no longer present as a result
    of [#3167](https://www.sqlalchemy.org/trac/ticket/3167), where attribute and validation
    events are no longer called within the flush process.
  id: totrans-2441
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的事件[`InstanceEvents.refresh_flush()`](../orm/events.html#sqlalchemy.orm.InstanceEvents.refresh_flush
    "sqlalchemy.orm.InstanceEvents.refresh_flush")，在刷新过程中调用INSERT或UPDATE级别的默认值通过RETURNING或Python端的默认值调用时触发。这是为了提供一个钩子，不再像[#3167](https://www.sqlalchemy.org/trac/ticket/3167)那样在刷新过程中不再调用属性和验证事件。
- en: 'References: [#3427](https://www.sqlalchemy.org/trac/ticket/3427)'
  id: totrans-2442
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3427](https://www.sqlalchemy.org/trac/ticket/3427)
- en: '**[orm] [bug]**'
  id: totrans-2443
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The “lightweight named tuple” used when a [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") returns rows failed to implement `__slots__` correctly
    such that it still had a `__dict__`. This is resolved, but in the extremely unlikely
    case someone was assigning values to the returned tuples, that will no longer
    work.
  id: totrans-2444
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")返回行时使用的“轻量级命名元组”未正确实现`__slots__`，以至于它仍然有一个`__dict__`。这个问题已经解决，但是在极端情况下，如果有人给返回的元组分配值，那么将不再起作用。
- en: 'References: [#3420](https://www.sqlalchemy.org/trac/ticket/3420)'
  id: totrans-2445
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3420](https://www.sqlalchemy.org/trac/ticket/3420)
- en: engine
  id: totrans-2446
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [feature]**'
  id: totrans-2447
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: Added new engine event [`ConnectionEvents.engine_disposed()`](../core/events.html#sqlalchemy.events.ConnectionEvents.engine_disposed
    "sqlalchemy.events.ConnectionEvents.engine_disposed"). Called after the [`Engine.dispose()`](../core/connections.html#sqlalchemy.engine.Engine.dispose
    "sqlalchemy.engine.Engine.dispose") method is called.
  id: totrans-2448
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的引擎事件[`ConnectionEvents.engine_disposed()`](../core/events.html#sqlalchemy.events.ConnectionEvents.engine_disposed
    "sqlalchemy.events.ConnectionEvents.engine_disposed")。在调用[`Engine.dispose()`](../core/connections.html#sqlalchemy.engine.Engine.dispose
    "sqlalchemy.engine.Engine.dispose")方法后调用。
- en: '**[engine] [feature]**'
  id: totrans-2449
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: Adjustments to the engine plugin hook, such that the [`URL.get_dialect()`](../core/engines.html#sqlalchemy.engine.URL.get_dialect
    "sqlalchemy.engine.URL.get_dialect") method will continue to return the ultimate
    [`Dialect`](../core/internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    object when a dialect plugin is used, without the need for the caller to be aware
    of the [`Dialect.get_dialect_cls()`](../core/internals.html#sqlalchemy.engine.Dialect.get_dialect_cls
    "sqlalchemy.engine.Dialect.get_dialect_cls") method.
  id: totrans-2450
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对引擎插件钩子进行调整，使得当使用方言插件时，[`URL.get_dialect()`](../core/engines.html#sqlalchemy.engine.URL.get_dialect
    "sqlalchemy.engine.URL.get_dialect")方法将继续返回最终的[`Dialect`](../core/internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect")对象，而不需要调用者知道[`Dialect.get_dialect_cls()`](../core/internals.html#sqlalchemy.engine.Dialect.get_dialect_cls
    "sqlalchemy.engine.Dialect.get_dialect_cls")方法。
- en: 'References: [#3379](https://www.sqlalchemy.org/trac/ticket/3379)'
  id: totrans-2451
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3379](https://www.sqlalchemy.org/trac/ticket/3379)
- en: '**[engine] [bug]**'
  id: totrans-2452
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed bug where known boolean values used by [`engine_from_config()`](../core/engines.html#sqlalchemy.engine_from_config
    "sqlalchemy.engine_from_config") were not being parsed correctly; these included
    `pool_threadlocal` and the psycopg2 argument `use_native_unicode`.
  id: totrans-2453
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复已知布尔值在[`engine_from_config()`](../core/engines.html#sqlalchemy.engine_from_config
    "sqlalchemy.engine_from_config")中使用时未被正确解析的错误；这些包括`pool_threadlocal`和psycopg2参数`use_native_unicode`。
- en: 'References: [#3435](https://www.sqlalchemy.org/trac/ticket/3435)'
  id: totrans-2454
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3435](https://www.sqlalchemy.org/trac/ticket/3435)
- en: '**[engine] [bug]**'
  id: totrans-2455
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Added support for the case of the misbehaving DBAPI that has pep-249 exception
    names linked to exception classes of an entirely different name, preventing SQLAlchemy’s
    own exception wrapping from wrapping the error appropriately. The SQLAlchemy dialect
    in use needs to implement a new accessor [`DefaultDialect.dbapi_exception_translation_map`](../core/internals.html#sqlalchemy.engine.default.DefaultDialect.dbapi_exception_translation_map
    "sqlalchemy.engine.default.DefaultDialect.dbapi_exception_translation_map") to
    support this feature; this is implemented now for the py-postgresql dialect.
  id: totrans-2456
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对表现不当的DBAPI情况的支持，该情况下pep-249异常名称与完全不同名称的异常类相关联，阻止SQLAlchemy自己的异常包装正确包装错误。使用的SQLAlchemy方言需要实现一个新的访问器[`DefaultDialect.dbapi_exception_translation_map`](../core/internals.html#sqlalchemy.engine.default.DefaultDialect.dbapi_exception_translation_map
    "sqlalchemy.engine.default.DefaultDialect.dbapi_exception_translation_map")来支持此功能；现在为py-postgresql方言实现了此功能。
- en: 'References: [#3421](https://www.sqlalchemy.org/trac/ticket/3421)'
  id: totrans-2457
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3421](https://www.sqlalchemy.org/trac/ticket/3421)
- en: '**[engine] [bug]**'
  id: totrans-2458
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed bug involving the case when pool checkout event handlers are used and
    connection attempts are made in the handler itself which fail, the owning connection
    record would not be freed until the stack trace of the connect error itself were
    freed. For the case where a test pool of only a single connection were used, this
    means the pool would be fully checked out until that stack trace were freed. This
    mostly impacts very specific debugging scenarios and is unlikely to have been
    noticeable in any production application. The fix applies an explicit checkin
    of the record before re-raising the caught exception.
  id: totrans-2459
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，涉及当使用池检出事件处理程序并在处理程序本身中进行连接尝试但失败时，拥有连接记录直到连接错误本身的堆栈跟踪被释放才会被释放的情况。对于仅使用单个连接的测试池的情况，这意味着池将被完全检出，直到该堆栈跟踪被释放。这主要影响非常具体的调试场景，并且在任何生产应用程序中都不太可能引起注意。修复方法是在重新引发捕获的异常之前显式检入记录。
- en: 'References: [#3419](https://www.sqlalchemy.org/trac/ticket/3419)'
  id: totrans-2460
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3419](https://www.sqlalchemy.org/trac/ticket/3419)
- en: sql
  id: totrans-2461
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-2462
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added official support for a CTE used by the SELECT present inside of [`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select"). This behavior worked accidentally
    up until 0.9.9, when it no longer worked due to unrelated changes as part of [#3248](https://www.sqlalchemy.org/trac/ticket/3248).
    Note that this is the rendering of the WITH clause after the INSERT, before the
    SELECT; the full functionality of CTEs rendered at the top level of INSERT, UPDATE,
    DELETE is a new feature targeted for a later release.
  id: totrans-2463
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 官方添加了对 [`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select") 中的 SELECT 使用的 CTE 的支持。此行为直到 0.9.9
    时偶然有效，当时由于与 [#3248](https://www.sqlalchemy.org/trac/ticket/3248) 的不相关更改而不再有效。请注意，这是在
    INSERT 之后 SELECT 之前呈现 WITH 子句的方式；在 INSERT、UPDATE、DELETE 的顶层呈现 CTE 的全部功能是针对稍后发布的新功能。
- en: 'This change is also **backported** to: 0.9.10'
  id: totrans-2464
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还被**反向移植**至：0.9.10
- en: 'References: [#3418](https://www.sqlalchemy.org/trac/ticket/3418)'
  id: totrans-2465
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3418](https://www.sqlalchemy.org/trac/ticket/3418)
- en: postgresql
  id: totrans-2466
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug] [pypy]**'
  id: totrans-2467
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug] [pypy]**'
- en: Repaired some typing and test issues related to the pypy psycopg2cffi dialect,
    in particular that the current 2.7.0 version does not have native support for
    the JSONB type. The version detection for psycopg2 features has been tuned into
    a specific sub-version for psycopg2cffi. Additionally, test coverage has been
    enabled for the full series of psycopg2 features under psycopg2cffi.
  id: totrans-2468
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了与 pypy psycopg2cffi 方言相关的一些打字和测试问题，特别是当前的 2.7.0 版本不支持 JSONB 类型。对于 psycopg2
    功能的版本检测已调整为 psycopg2cffi 的特定子版本。此外，已启用了对 psycopg2cffi 下所有 psycopg2 功能系列的测试覆盖。
- en: 'References: [#3439](https://www.sqlalchemy.org/trac/ticket/3439)'
  id: totrans-2469
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3439](https://www.sqlalchemy.org/trac/ticket/3439)
- en: mssql
  id: totrans-2470
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-2471
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Added a new dialect flag to the MSSQL dialect `legacy_schema_aliasing` which
    when set to False will disable a very old and obsolete behavior, that of the compiler’s
    attempt to turn all schema-qualified table names into alias names, to work around
    old and no longer locatable issues where SQL server could not parse a multi-part
    identifier name in all circumstances. The behavior prevented more sophisticated
    statements from working correctly, including those which use hints, as well as
    CRUD statements that embed correlated SELECT statements. Rather than continue
    to repair the feature to work with more complex statements, it’s better to just
    disable it as it should no longer be needed for any modern SQL server version.
    The flag defaults to True for the 1.0.x series, leaving current behavior unchanged
    for this version series. In the 1.1 series, it will default to False. For the
    1.0 series, when not set to either value explicitly, a warning is emitted when
    a schema-qualified table is first used in a statement, which suggests that the
    flag be set to False for all modern SQL Server versions.
  id: totrans-2472
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向MSSQL方言添加了一个新的方言标志`legacy_schema_aliasing`，当设置为False时，将禁用非常古老和过时的行为，即编译器试图将所有模式限定的表名转换为别名，以解决旧问题和不再可定位的问题，其中SQL
    Server无法在所有情况下解析多部分标识符名称。此行为阻止更复杂的语句正确工作，包括使用提示的语句，以及嵌入相关SELECT语句的CRUD语句。与其继续修复功能以使其与更复杂的语句一起工作，不如将其禁用，因为对于任何现代SQL
    Server版本都不应再需要它。对于1.0.x系列，该标志默认为True，保持当前行为不变。在1.1系列中，默认为False。对于1.0系列，当未显式设置为任何值时，将在语句中首次使用模式限定的表时发出警告，建议为所有现代SQL
    Server版本设置该标志为False。
- en: See also
  id: totrans-2473
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参见
- en: '[Legacy Schema Mode](../dialects/mssql.html#legacy-schema-rendering)'
  id: totrans-2474
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[遗留模式模式](../dialects/mssql.html#legacy-schema-rendering)'
- en: 'References: [#3424](https://www.sqlalchemy.org/trac/ticket/3424), [#3430](https://www.sqlalchemy.org/trac/ticket/3430)'
  id: totrans-2475
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3424](https://www.sqlalchemy.org/trac/ticket/3424), [#3430](https://www.sqlalchemy.org/trac/ticket/3430)
- en: misc
  id: totrans-2476
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[feature] [ext]**'
  id: totrans-2477
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[功能] [扩展]**'
- en: Added support for `*args` to be passed to the baked query initial callable,
    in the same way that `*args` are supported for the [`BakedQuery.add_criteria()`](../orm/extensions/baked.html#sqlalchemy.ext.baked.BakedQuery.add_criteria
    "sqlalchemy.ext.baked.BakedQuery.add_criteria") and [`BakedQuery.with_criteria()`](../orm/extensions/baked.html#sqlalchemy.ext.baked.BakedQuery.with_criteria
    "sqlalchemy.ext.baked.BakedQuery.with_criteria") methods. Initial PR courtesy
    Naoki INADA.
  id: totrans-2478
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 支持将`*args`传递给烘焙查询的初始可调用对象，方式与[`BakedQuery.add_criteria()`](../orm/extensions/baked.html#sqlalchemy.ext.baked.BakedQuery.add_criteria
    "sqlalchemy.ext.baked.BakedQuery.add_criteria")和[`BakedQuery.with_criteria()`](../orm/extensions/baked.html#sqlalchemy.ext.baked.BakedQuery.with_criteria
    "sqlalchemy.ext.baked.BakedQuery.with_criteria")方法支持`*args`的方式相同。初始PR由Naoki INADA提供。
- en: '**[feature] [ext]**'
  id: totrans-2479
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[功能] [扩展]**'
- en: Added a new semi-public method to [`MutableBase`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableBase
    "sqlalchemy.ext.mutable.MutableBase") `MutableBase._get_listen_keys()`. Overriding
    this method is needed in the case where a [`MutableBase`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableBase
    "sqlalchemy.ext.mutable.MutableBase") subclass needs events to propagate for attribute
    keys other than the key to which the mutable type is associated with, when intercepting
    the [`InstanceEvents.refresh()`](../orm/events.html#sqlalchemy.orm.InstanceEvents.refresh
    "sqlalchemy.orm.InstanceEvents.refresh") or [`InstanceEvents.refresh_flush()`](../orm/events.html#sqlalchemy.orm.InstanceEvents.refresh_flush
    "sqlalchemy.orm.InstanceEvents.refresh_flush") events. The current example of
    this is composites using [`MutableComposite`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableComposite
    "sqlalchemy.ext.mutable.MutableComposite").
  id: totrans-2480
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向[`MutableBase`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableBase
    "sqlalchemy.ext.mutable.MutableBase")添加了一个新的半公共方法`MutableBase._get_listen_keys()`。在需要时重写此方法，如果[`MutableBase`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableBase
    "sqlalchemy.ext.mutable.MutableBase")子类需要使事件传播到与可变类型关联的键以外的属性键时，当拦截[`InstanceEvents.refresh()`](../orm/events.html#sqlalchemy.orm.InstanceEvents.refresh
    "sqlalchemy.orm.InstanceEvents.refresh")或[`InstanceEvents.refresh_flush()`](../orm/events.html#sqlalchemy.orm.InstanceEvents.refresh_flush
    "sqlalchemy.orm.InstanceEvents.refresh_flush")事件时。目前的示例是使用[`MutableComposite`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableComposite
    "sqlalchemy.ext.mutable.MutableComposite")的复合体。
- en: 'References: [#3427](https://www.sqlalchemy.org/trac/ticket/3427)'
  id: totrans-2481
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3427](https://www.sqlalchemy.org/trac/ticket/3427)
- en: '**[bug] [ext]**'
  id: totrans-2482
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [扩展]**'
- en: Fixed regression in the [`sqlalchemy.ext.mutable`](../orm/extensions/mutable.html#module-sqlalchemy.ext.mutable
    "sqlalchemy.ext.mutable") extension as a result of the bugfix for [#3167](https://www.sqlalchemy.org/trac/ticket/3167),
    where attribute and validation events are no longer called within the flush process.
    The mutable extension was relying upon this behavior in the case where a column
    level Python-side default were responsible for generating the new value on INSERT
    or UPDATE, or when a value were fetched from the RETURNING clause for “eager defaults”
    mode. The new value would not be subject to any event when populated and the mutable
    extension could not establish proper coercion or history listening. A new event
    [`InstanceEvents.refresh_flush()`](../orm/events.html#sqlalchemy.orm.InstanceEvents.refresh_flush
    "sqlalchemy.orm.InstanceEvents.refresh_flush") is added which the mutable extension
    now makes use of for this use case.
  id: totrans-2483
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于对[#3167](https://www.sqlalchemy.org/trac/ticket/3167)的错误修复，[`sqlalchemy.ext.mutable`](../orm/extensions/mutable.html#module-sqlalchemy.ext.mutable
    "sqlalchemy.ext.mutable")扩展中出现了回归，其中属性和验证事件不再在刷新过程中调用。在列级别的Python端默认值负责生成INSERT或UPDATE的新值，或者在“eager
    defaults”模式下从RETURNING子句中获取值时，可变扩展依赖于此行为。当填充新值时，不会触发任何事件，可变扩展无法建立正确的强制转换或历史监听。添加了一个新事件[`InstanceEvents.refresh_flush()`](../orm/events.html#sqlalchemy.orm.InstanceEvents.refresh_flush
    "sqlalchemy.orm.InstanceEvents.refresh_flush")，可变扩展现在在这种情况下使用。
- en: 'References: [#3427](https://www.sqlalchemy.org/trac/ticket/3427)'
  id: totrans-2484
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3427](https://www.sqlalchemy.org/trac/ticket/3427)
- en: orm
  id: totrans-2485
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM
- en: '**[orm] [feature]**'
  id: totrans-2486
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [特性]**'
- en: Added new event [`InstanceEvents.refresh_flush()`](../orm/events.html#sqlalchemy.orm.InstanceEvents.refresh_flush
    "sqlalchemy.orm.InstanceEvents.refresh_flush"), invoked when an INSERT or UPDATE
    level default value fetched via RETURNING or Python-side default is invoked within
    the flush process. This is to provide a hook that is no longer present as a result
    of [#3167](https://www.sqlalchemy.org/trac/ticket/3167), where attribute and validation
    events are no longer called within the flush process.
  id: totrans-2487
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新事件[`InstanceEvents.refresh_flush()`](../orm/events.html#sqlalchemy.orm.InstanceEvents.refresh_flush
    "sqlalchemy.orm.InstanceEvents.refresh_flush")，在刷新过程中调用INSERT或UPDATE级别的默认值通过RETURNING或Python端默认值获取时调用。这是为了提供一个钩子，因为由于[#3167](https://www.sqlalchemy.org/trac/ticket/3167)，属性和验证事件不再在刷新过程中调用。
- en: 'References: [#3427](https://www.sqlalchemy.org/trac/ticket/3427)'
  id: totrans-2488
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3427](https://www.sqlalchemy.org/trac/ticket/3427)
- en: '**[orm] [bug]**'
  id: totrans-2489
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [错误]**'
- en: The “lightweight named tuple” used when a [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") returns rows failed to implement `__slots__` correctly
    such that it still had a `__dict__`. This is resolved, but in the extremely unlikely
    case someone was assigning values to the returned tuples, that will no longer
    work.
  id: totrans-2490
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")返回行时使用的“轻量级命名元组”未正确实现`__slots__`，导致仍然有一个`__dict__`。这个问题已经解决，但在极不可能的情况下，如果有人给返回的元组赋值，那将不再起作用。
- en: 'References: [#3420](https://www.sqlalchemy.org/trac/ticket/3420)'
  id: totrans-2491
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3420](https://www.sqlalchemy.org/trac/ticket/3420)
- en: engine
  id: totrans-2492
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [feature]**'
  id: totrans-2493
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [特性]**'
- en: Added new engine event [`ConnectionEvents.engine_disposed()`](../core/events.html#sqlalchemy.events.ConnectionEvents.engine_disposed
    "sqlalchemy.events.ConnectionEvents.engine_disposed"). Called after the [`Engine.dispose()`](../core/connections.html#sqlalchemy.engine.Engine.dispose
    "sqlalchemy.engine.Engine.dispose") method is called.
  id: totrans-2494
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的引擎事件[`ConnectionEvents.engine_disposed()`](../core/events.html#sqlalchemy.events.ConnectionEvents.engine_disposed
    "sqlalchemy.events.ConnectionEvents.engine_disposed")。在调用[`Engine.dispose()`](../core/connections.html#sqlalchemy.engine.Engine.dispose
    "sqlalchemy.engine.Engine.dispose")方法后调用。
- en: '**[engine] [feature]**'
  id: totrans-2495
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [特性]**'
- en: Adjustments to the engine plugin hook, such that the [`URL.get_dialect()`](../core/engines.html#sqlalchemy.engine.URL.get_dialect
    "sqlalchemy.engine.URL.get_dialect") method will continue to return the ultimate
    [`Dialect`](../core/internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    object when a dialect plugin is used, without the need for the caller to be aware
    of the [`Dialect.get_dialect_cls()`](../core/internals.html#sqlalchemy.engine.Dialect.get_dialect_cls
    "sqlalchemy.engine.Dialect.get_dialect_cls") method.
  id: totrans-2496
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整引擎插件钩子，使得[`URL.get_dialect()`](../core/engines.html#sqlalchemy.engine.URL.get_dialect
    "sqlalchemy.engine.URL.get_dialect")方法在使用方言插件时仍将返回最终的[`Dialect`](../core/internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect")对象，而不需要调用者知道[`Dialect.get_dialect_cls()`](../core/internals.html#sqlalchemy.engine.Dialect.get_dialect_cls
    "sqlalchemy.engine.Dialect.get_dialect_cls")方法。
- en: 'References: [#3379](https://www.sqlalchemy.org/trac/ticket/3379)'
  id: totrans-2497
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3379](https://www.sqlalchemy.org/trac/ticket/3379)
- en: '**[engine] [bug]**'
  id: totrans-2498
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误]**'
- en: Fixed bug where known boolean values used by [`engine_from_config()`](../core/engines.html#sqlalchemy.engine_from_config
    "sqlalchemy.engine_from_config") were not being parsed correctly; these included
    `pool_threadlocal` and the psycopg2 argument `use_native_unicode`.
  id: totrans-2499
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了已知布尔值在 [`engine_from_config()`](../core/engines.html#sqlalchemy.engine_from_config
    "sqlalchemy.engine_from_config") 中未被正确解析的 bug；这些包括 `pool_threadlocal` 和 psycopg2
    参数 `use_native_unicode`。
- en: 'References: [#3435](https://www.sqlalchemy.org/trac/ticket/3435)'
  id: totrans-2500
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3435](https://www.sqlalchemy.org/trac/ticket/3435)
- en: '**[engine] [bug]**'
  id: totrans-2501
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误]**'
- en: Added support for the case of the misbehaving DBAPI that has pep-249 exception
    names linked to exception classes of an entirely different name, preventing SQLAlchemy’s
    own exception wrapping from wrapping the error appropriately. The SQLAlchemy dialect
    in use needs to implement a new accessor [`DefaultDialect.dbapi_exception_translation_map`](../core/internals.html#sqlalchemy.engine.default.DefaultDialect.dbapi_exception_translation_map
    "sqlalchemy.engine.default.DefaultDialect.dbapi_exception_translation_map") to
    support this feature; this is implemented now for the py-postgresql dialect.
  id: totrans-2502
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对行为不端的 DBAPI 的支持，该 DBAPI 将 pep-249 异常名称链接到完全不同名称的异常类，从而阻止 SQLAlchemy 自己的异常包装适当地包装错误。使用的
    SQLAlchemy 方言需要实现一个新的访问器 [`DefaultDialect.dbapi_exception_translation_map`](../core/internals.html#sqlalchemy.engine.default.DefaultDialect.dbapi_exception_translation_map
    "sqlalchemy.engine.default.DefaultDialect.dbapi_exception_translation_map") 来支持此功能；现在已为
    py-postgresql 方言实现了这一功能。
- en: 'References: [#3421](https://www.sqlalchemy.org/trac/ticket/3421)'
  id: totrans-2503
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3421](https://www.sqlalchemy.org/trac/ticket/3421)
- en: '**[engine] [bug]**'
  id: totrans-2504
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误]**'
- en: Fixed bug involving the case when pool checkout event handlers are used and
    connection attempts are made in the handler itself which fail, the owning connection
    record would not be freed until the stack trace of the connect error itself were
    freed. For the case where a test pool of only a single connection were used, this
    means the pool would be fully checked out until that stack trace were freed. This
    mostly impacts very specific debugging scenarios and is unlikely to have been
    noticeable in any production application. The fix applies an explicit checkin
    of the record before re-raising the caught exception.
  id: totrans-2505
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，涉及当使用池检出事件处理程序并在处理程序中进行连接尝试并失败时，拥有连接记录直到连接错误本身的堆栈跟踪被释放之前不会被释放的情况。对于仅使用单个连接的测试池的情况，这意味着池将完全被检出，直到该堆栈跟踪被释放。这主要影响非常特定的调试场景，不太可能在任何生产应用程序中引起注意。修复方法是在重新引发捕获的异常之前显式检入记录。
- en: 'References: [#3419](https://www.sqlalchemy.org/trac/ticket/3419)'
  id: totrans-2506
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3419](https://www.sqlalchemy.org/trac/ticket/3419)
- en: sql
  id: totrans-2507
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-2508
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [功能]**'
- en: Added official support for a CTE used by the SELECT present inside of [`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select"). This behavior worked accidentally
    up until 0.9.9, when it no longer worked due to unrelated changes as part of [#3248](https://www.sqlalchemy.org/trac/ticket/3248).
    Note that this is the rendering of the WITH clause after the INSERT, before the
    SELECT; the full functionality of CTEs rendered at the top level of INSERT, UPDATE,
    DELETE is a new feature targeted for a later release.
  id: totrans-2509
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 [`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select") 中的 SELECT 中使用的 CTE 添加了官方支持。此行为在
    0.9.9 之前意外工作，当时由于与 [#3248](https://www.sqlalchemy.org/trac/ticket/3248) 的不相关更改而不再工作。请注意，这是在
    INSERT 之后、SELECT 之前呈现 WITH 子句；在后续版本中，将针对新功能发布顶层 INSERT、UPDATE、DELETE 中呈现 CTE 的完整功能。
- en: 'This change is also **backported** to: 0.9.10'
  id: totrans-2510
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.9.10
- en: 'References: [#3418](https://www.sqlalchemy.org/trac/ticket/3418)'
  id: totrans-2511
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3418](https://www.sqlalchemy.org/trac/ticket/3418)
- en: postgresql
  id: totrans-2512
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug] [pypy]**'
  id: totrans-2513
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [错误] [pypy]**'
- en: Repaired some typing and test issues related to the pypy psycopg2cffi dialect,
    in particular that the current 2.7.0 version does not have native support for
    the JSONB type. The version detection for psycopg2 features has been tuned into
    a specific sub-version for psycopg2cffi. Additionally, test coverage has been
    enabled for the full series of psycopg2 features under psycopg2cffi.
  id: totrans-2514
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了与 pypy psycopg2cffi 方言相关的一些打字和测试问题，特别是当前的 2.7.0 版本不支持 JSONB 类型。对于 psycopg2
    功能的版本检测已调整为适用于 psycopg2cffi 的特定子版本。此外，已启用了对 psycopg2cffi 下所有 psycopg2 功能的测试覆盖。
- en: 'References: [#3439](https://www.sqlalchemy.org/trac/ticket/3439)'
  id: totrans-2515
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3439](https://www.sqlalchemy.org/trac/ticket/3439)
- en: mssql
  id: totrans-2516
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-2517
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Added a new dialect flag to the MSSQL dialect `legacy_schema_aliasing` which
    when set to False will disable a very old and obsolete behavior, that of the compiler’s
    attempt to turn all schema-qualified table names into alias names, to work around
    old and no longer locatable issues where SQL server could not parse a multi-part
    identifier name in all circumstances. The behavior prevented more sophisticated
    statements from working correctly, including those which use hints, as well as
    CRUD statements that embed correlated SELECT statements. Rather than continue
    to repair the feature to work with more complex statements, it’s better to just
    disable it as it should no longer be needed for any modern SQL server version.
    The flag defaults to True for the 1.0.x series, leaving current behavior unchanged
    for this version series. In the 1.1 series, it will default to False. For the
    1.0 series, when not set to either value explicitly, a warning is emitted when
    a schema-qualified table is first used in a statement, which suggests that the
    flag be set to False for all modern SQL Server versions.
  id: totrans-2518
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的方言标志到MSSQL方言`legacy_schema_aliasing`，当设置为False时，将禁用一个非常古老和过时的行为，即编译器尝试将所有模式限定的表名转换为别名，以解决SQL服务器在所有情况下无法解析多部分标识符名称的旧问题。该行为阻止更复杂的语句正确工作，包括使用提示的语句，以及嵌入相关SELECT语句的CRUD语句。与其继续修复该功能以使其与更复杂的语句一起工作，不如将其禁用，因为对于任何现代SQL服务器版本，它应该不再需要。该标志在1.0.x系列中默认为True，保持当前行为不变。在1.1系列中，它将默认为False。对于1.0系列，如果未显式设置为任何值，则在语句中首次使用模式限定表时会发出警告，建议为所有现代SQL
    Server版本将该标志设置为False。
- en: See also
  id: totrans-2519
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[Legacy Schema Mode](../dialects/mssql.html#legacy-schema-rendering)'
  id: totrans-2520
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Legacy Schema Mode](../dialects/mssql.html#legacy-schema-rendering)'
- en: 'References: [#3424](https://www.sqlalchemy.org/trac/ticket/3424), [#3430](https://www.sqlalchemy.org/trac/ticket/3430)'
  id: totrans-2521
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3424](https://www.sqlalchemy.org/trac/ticket/3424), [#3430](https://www.sqlalchemy.org/trac/ticket/3430)
- en: misc
  id: totrans-2522
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[feature] [ext]**'
  id: totrans-2523
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[feature] [ext]**'
- en: Added support for `*args` to be passed to the baked query initial callable,
    in the same way that `*args` are supported for the [`BakedQuery.add_criteria()`](../orm/extensions/baked.html#sqlalchemy.ext.baked.BakedQuery.add_criteria
    "sqlalchemy.ext.baked.BakedQuery.add_criteria") and [`BakedQuery.with_criteria()`](../orm/extensions/baked.html#sqlalchemy.ext.baked.BakedQuery.with_criteria
    "sqlalchemy.ext.baked.BakedQuery.with_criteria") methods. Initial PR courtesy
    Naoki INADA.
  id: totrans-2524
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对`*args`的支持，以便像[`BakedQuery.add_criteria()`](../orm/extensions/baked.html#sqlalchemy.ext.baked.BakedQuery.add_criteria
    "sqlalchemy.ext.baked.BakedQuery.add_criteria")和[`BakedQuery.with_criteria()`](../orm/extensions/baked.html#sqlalchemy.ext.baked.BakedQuery.with_criteria
    "sqlalchemy.ext.baked.BakedQuery.with_criteria")方法一样，将`*args`传递给烘焙查询的初始可调用函数。初始PR由Naoki
    INADA提供。
- en: '**[feature] [ext]**'
  id: totrans-2525
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[feature] [ext]**'
- en: Added a new semi-public method to [`MutableBase`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableBase
    "sqlalchemy.ext.mutable.MutableBase") `MutableBase._get_listen_keys()`. Overriding
    this method is needed in the case where a [`MutableBase`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableBase
    "sqlalchemy.ext.mutable.MutableBase") subclass needs events to propagate for attribute
    keys other than the key to which the mutable type is associated with, when intercepting
    the [`InstanceEvents.refresh()`](../orm/events.html#sqlalchemy.orm.InstanceEvents.refresh
    "sqlalchemy.orm.InstanceEvents.refresh") or [`InstanceEvents.refresh_flush()`](../orm/events.html#sqlalchemy.orm.InstanceEvents.refresh_flush
    "sqlalchemy.orm.InstanceEvents.refresh_flush") events. The current example of
    this is composites using [`MutableComposite`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableComposite
    "sqlalchemy.ext.mutable.MutableComposite").
  id: totrans-2526
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的半公开方法到[`MutableBase`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableBase
    "sqlalchemy.ext.mutable.MutableBase") `MutableBase._get_listen_keys()`。在拦截[`InstanceEvents.refresh()`](../orm/events.html#sqlalchemy.orm.InstanceEvents.refresh
    "sqlalchemy.orm.InstanceEvents.refresh")或[`InstanceEvents.refresh_flush()`](../orm/events.html#sqlalchemy.orm.InstanceEvents.refresh_flush
    "sqlalchemy.orm.InstanceEvents.refresh_flush")事件时，需要重写此方法，以便在[`MutableBase`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableBase
    "sqlalchemy.ext.mutable.MutableBase")子类需要事件传播到与可变类型关联的键之外的属性键时。目前的示例是使用[`MutableComposite`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableComposite
    "sqlalchemy.ext.mutable.MutableComposite")的复合类型。
- en: 'References: [#3427](https://www.sqlalchemy.org/trac/ticket/3427)'
  id: totrans-2527
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3427](https://www.sqlalchemy.org/trac/ticket/3427)
- en: '**[bug] [ext]**'
  id: totrans-2528
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed regression in the [`sqlalchemy.ext.mutable`](../orm/extensions/mutable.html#module-sqlalchemy.ext.mutable
    "sqlalchemy.ext.mutable") extension as a result of the bugfix for [#3167](https://www.sqlalchemy.org/trac/ticket/3167),
    where attribute and validation events are no longer called within the flush process.
    The mutable extension was relying upon this behavior in the case where a column
    level Python-side default were responsible for generating the new value on INSERT
    or UPDATE, or when a value were fetched from the RETURNING clause for “eager defaults”
    mode. The new value would not be subject to any event when populated and the mutable
    extension could not establish proper coercion or history listening. A new event
    [`InstanceEvents.refresh_flush()`](../orm/events.html#sqlalchemy.orm.InstanceEvents.refresh_flush
    "sqlalchemy.orm.InstanceEvents.refresh_flush") is added which the mutable extension
    now makes use of for this use case.
  id: totrans-2529
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`sqlalchemy.ext.mutable`](../orm/extensions/mutable.html#module-sqlalchemy.ext.mutable
    "sqlalchemy.ext.mutable")扩展中的回归，这是由于对[#3167](https://www.sqlalchemy.org/trac/ticket/3167)的错误修复导致的，其中属性和验证事件不再在刷新过程中调用。可变扩展依赖于这种行为，即在列级Python端默认值负责生成INSERT或UPDATE的新值时，或者当从“eager
    defaults”模式的RETURNING子句中获取值时。当填充新值时，不会触发任何事件，可变扩展无法建立正确的强制转换或历史监听。添加了一个新事件[`InstanceEvents.refresh_flush()`](../orm/events.html#sqlalchemy.orm.InstanceEvents.refresh_flush
    "sqlalchemy.orm.InstanceEvents.refresh_flush")，可变扩展现在在这种情况下使用。
- en: 'References: [#3427](https://www.sqlalchemy.org/trac/ticket/3427)'
  id: totrans-2530
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3427](https://www.sqlalchemy.org/trac/ticket/3427)
- en: 1.0.4
  id: totrans-2531
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.0.4
- en: 'Released: May 7, 2015'
  id: totrans-2532
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2015年5月7日
- en: orm
  id: totrans-2533
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-2534
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed unexpected-use regression where in the odd case that the primaryjoin of
    a relationship involved comparison to an unhashable type such as an HSTORE, lazy
    loads would fail due to a hash-oriented check on the statement parameters, modified
    in 1.0 as a result of [#3061](https://www.sqlalchemy.org/trac/ticket/3061) to
    use hashing and modified in [#3368](https://www.sqlalchemy.org/trac/ticket/3368)
    to occur in cases more common than “load on pending”. The values are now checked
    for the `__hash__` attribute beforehand.
  id: totrans-2535
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个意外使用回归，即如果关系的primaryjoin涉及与不可哈希类型（如HSTORE）的比较，由于在语句参数上进行了基于哈希的检查，导致懒加载失败，这是在1.0中由于[#3061](https://www.sqlalchemy.org/trac/ticket/3061)而修改为使用哈希，并在[#3368](https://www.sqlalchemy.org/trac/ticket/3368)中修改为在比“load
    on pending”更常见的情况下发生。现在会事先检查值是否具有`__hash__`属性。
- en: 'References: [#3416](https://www.sqlalchemy.org/trac/ticket/3416)'
  id: totrans-2536
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3416](https://www.sqlalchemy.org/trac/ticket/3416)
- en: '**[orm] [bug]**'
  id: totrans-2537
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Liberalized an assertion that was added as part of [#3347](https://www.sqlalchemy.org/trac/ticket/3347)
    to protect against unknown conditions when splicing inner joins together within
    joined eager loads with `innerjoin=True`; if some of the joins use a “secondary”
    table, the assertion needs to unwrap further joins in order to pass.
  id: totrans-2538
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自[#3347](https://www.sqlalchemy.org/trac/ticket/3347)添加的断言进行了自由化，以防止在使用`innerjoin=True`将内连接拼接在一起时出现未知条件；如果一些连接使用了“secondary”表，则需要进一步展开连接以通过断言。
- en: 'References: [#3347](https://www.sqlalchemy.org/trac/ticket/3347), [#3412](https://www.sqlalchemy.org/trac/ticket/3412)'
  id: totrans-2539
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3347](https://www.sqlalchemy.org/trac/ticket/3347), [#3412](https://www.sqlalchemy.org/trac/ticket/3412)
- en: '**[orm] [bug]**'
  id: totrans-2540
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Repaired / added to tests yet more expressions that were reported as failing
    with the new ‘entity’ key value added to [`Query.column_descriptions`](../orm/queryguide/query.html#sqlalchemy.orm.Query.column_descriptions
    "sqlalchemy.orm.Query.column_descriptions"), the logic to discover the “from”
    clause is again reworked to accommodate columns from aliased classes, as well
    as to report the correct value for the “aliased” flag in these cases.
  id: totrans-2541
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复/添加了更多表达式的测试，这些表达式被报告为在新添加到[`Query.column_descriptions`](../orm/queryguide/query.html#sqlalchemy.orm.Query.column_descriptions
    "sqlalchemy.orm.Query.column_descriptions")的‘entity’键值后失败，重新设计了发现“from”子句的逻辑，以适应来自别名类的列，以及在这些情况下报告“aliased”标志的正确值。
- en: 'References: [#3320](https://www.sqlalchemy.org/trac/ticket/3320), [#3409](https://www.sqlalchemy.org/trac/ticket/3409)'
  id: totrans-2542
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3320](https://www.sqlalchemy.org/trac/ticket/3320), [#3409](https://www.sqlalchemy.org/trac/ticket/3409)
- en: schema
  id: totrans-2543
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: '**[schema] [bug]**'
  id: totrans-2544
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [错误]**'
- en: Fixed bug in enhanced constraint-attachment logic introduced in [#3341](https://www.sqlalchemy.org/trac/ticket/3341)
    where in the unusual case of a constraint that refers to a mixture of [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects and string column names at the same time,
    the auto-attach-on-column-attach logic will be skipped; for the constraint to
    be auto-attached in this case, all columns must be assembled on the target table
    up front. Added a new section to the migration document regarding the original
    feature as well as this change.
  id: totrans-2545
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在[#3341](https://www.sqlalchemy.org/trac/ticket/3341)中引入的增强约束附加逻辑中的错误，这种不寻常的情况是，约束同时引用[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象和字符串列名称的混合，自动附加到列时逻辑将被跳过；对于在这种情况下自动附加约束，必须事先将所有列组装到目标表上。还添加了一个关于原始特性以及这个更改的迁移文档的新部分。
- en: See also
  id: totrans-2546
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另见
- en: '[Constraints referring to unattached Columns can auto-attach to the Table when
    their referred columns are attached](migration_10.html#change-3341)'
  id: totrans-2547
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[当其引用的列附加到表时，约束引用未附加列可以自动附加到表中](migration_10.html#change-3341)'
- en: 'References: [#3411](https://www.sqlalchemy.org/trac/ticket/3411)'
  id: totrans-2548
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#3411](https://www.sqlalchemy.org/trac/ticket/3411)
- en: tests
  id: totrans-2549
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [bug] [pypy]**'
  id: totrans-2550
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[tests] [bug] [pypy]**'
- en: Fixed an import that prevented “pypy setup.py test” from working correctly.
  id: totrans-2551
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个导入问题，导致“pypy setup.py test”无法正常工作。
- en: 'This change is also **backported** to: 0.9.10'
  id: totrans-2552
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.10
- en: 'References: [#3406](https://www.sqlalchemy.org/trac/ticket/3406)'
  id: totrans-2553
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#3406](https://www.sqlalchemy.org/trac/ticket/3406)
- en: misc
  id: totrans-2554
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他
- en: '**[bug] [ext]**'
  id: totrans-2555
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug where when using extended attribute instrumentation system, the correct
    exception would not be raised when [`class_mapper()`](../orm/mapping_api.html#sqlalchemy.orm.class_mapper
    "sqlalchemy.orm.class_mapper") were called with an invalid input that also happened
    to not be weak referencable, such as an integer.
  id: totrans-2556
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用扩展属性仪表化系统时的错误，当调用[`class_mapper()`](../orm/mapping_api.html#sqlalchemy.orm.class_mapper
    "sqlalchemy.orm.class_mapper")时，如果输入无效且无法弱引用，例如整数，则不会引发正确的异常。
- en: 'This change is also **backported** to: 0.9.10'
  id: totrans-2557
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.10
- en: 'References: [#3408](https://www.sqlalchemy.org/trac/ticket/3408)'
  id: totrans-2558
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#3408](https://www.sqlalchemy.org/trac/ticket/3408)
- en: orm
  id: totrans-2559
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-2560
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed unexpected-use regression where in the odd case that the primaryjoin of
    a relationship involved comparison to an unhashable type such as an HSTORE, lazy
    loads would fail due to a hash-oriented check on the statement parameters, modified
    in 1.0 as a result of [#3061](https://www.sqlalchemy.org/trac/ticket/3061) to
    use hashing and modified in [#3368](https://www.sqlalchemy.org/trac/ticket/3368)
    to occur in cases more common than “load on pending”. The values are now checked
    for the `__hash__` attribute beforehand.
  id: totrans-2561
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个意外的回归问题，在这种奇怪的情况下，关系的主要连接涉及与非可散列类型（如HSTORE）的比较，懒惰加载将失败，因为语句参数上的哈希定向检查在1.0中修改为使用哈希化，并在[#3368](https://www.sqlalchemy.org/trac/ticket/3368)中进行修改以发生在比“加载挂起”更常见的情况下。现在会先检查值是否具有`__hash__`属性。
- en: 'References: [#3416](https://www.sqlalchemy.org/trac/ticket/3416)'
  id: totrans-2562
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#3416](https://www.sqlalchemy.org/trac/ticket/3416)
- en: '**[orm] [bug]**'
  id: totrans-2563
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Liberalized an assertion that was added as part of [#3347](https://www.sqlalchemy.org/trac/ticket/3347)
    to protect against unknown conditions when splicing inner joins together within
    joined eager loads with `innerjoin=True`; if some of the joins use a “secondary”
    table, the assertion needs to unwrap further joins in order to pass.
  id: totrans-2564
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 放宽了一个断言，作为[#3347](https://www.sqlalchemy.org/trac/ticket/3347)的一部分添加的，以保护在连接到`innerjoin=True`的连接的连接中拼接内连接时的未知条件；如果一些连接使用“次要”表，则需要进一步展开连接以通过。
- en: 'References: [#3347](https://www.sqlalchemy.org/trac/ticket/3347), [#3412](https://www.sqlalchemy.org/trac/ticket/3412)'
  id: totrans-2565
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#3347](https://www.sqlalchemy.org/trac/ticket/3347), [#3412](https://www.sqlalchemy.org/trac/ticket/3412)
- en: '**[orm] [bug]**'
  id: totrans-2566
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Repaired / added to tests yet more expressions that were reported as failing
    with the new ‘entity’ key value added to [`Query.column_descriptions`](../orm/queryguide/query.html#sqlalchemy.orm.Query.column_descriptions
    "sqlalchemy.orm.Query.column_descriptions"), the logic to discover the “from”
    clause is again reworked to accommodate columns from aliased classes, as well
    as to report the correct value for the “aliased” flag in these cases.
  id: totrans-2567
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复/添加了更多被报告为在新添加到[`Query.column_descriptions`](../orm/queryguide/query.html#sqlalchemy.orm.Query.column_descriptions
    "sqlalchemy.orm.Query.column_descriptions")的‘entity’键值后失败的表达式的测试，重新调整了发现“from”子句的逻辑，以适应来自别名类的列，以及在这些情况下报告“aliased”标志的正确值。
- en: 'References: [#3320](https://www.sqlalchemy.org/trac/ticket/3320), [#3409](https://www.sqlalchemy.org/trac/ticket/3409)'
  id: totrans-2568
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3320](https://www.sqlalchemy.org/trac/ticket/3320), [#3409](https://www.sqlalchemy.org/trac/ticket/3409)
- en: schema
  id: totrans-2569
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: '**[schema] [bug]**'
  id: totrans-2570
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema] [bug]**'
- en: Fixed bug in enhanced constraint-attachment logic introduced in [#3341](https://www.sqlalchemy.org/trac/ticket/3341)
    where in the unusual case of a constraint that refers to a mixture of [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects and string column names at the same time,
    the auto-attach-on-column-attach logic will be skipped; for the constraint to
    be auto-attached in this case, all columns must be assembled on the target table
    up front. Added a new section to the migration document regarding the original
    feature as well as this change.
  id: totrans-2571
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在[#3341](https://www.sqlalchemy.org/trac/ticket/3341)中引入的增强约束附加逻辑中的错误，其中在一个约束引用同时引用[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象和字符串列名的罕见情况下，自动附加到列时的逻辑将被跳过；在这种情况下，要使约束自动附加，所有列必须事先组装到目标表上。在迁移文档中添加了一个关于原始功能以及此更改的新部分。
- en: See also
  id: totrans-2572
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[Constraints referring to unattached Columns can auto-attach to the Table when
    their referred columns are attached](migration_10.html#change-3341)'
  id: totrans-2573
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[引用未附加的列的约束可以在其引用的列附加时自动附加到表格](migration_10.html#change-3341)'
- en: 'References: [#3411](https://www.sqlalchemy.org/trac/ticket/3411)'
  id: totrans-2574
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3411](https://www.sqlalchemy.org/trac/ticket/3411)
- en: tests
  id: totrans-2575
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [bug] [pypy]**'
  id: totrans-2576
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[tests] [bug] [pypy]**'
- en: Fixed an import that prevented “pypy setup.py test” from working correctly.
  id: totrans-2577
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个导入问题，导致“pypy setup.py test”无法正常工作。
- en: 'This change is also **backported** to: 0.9.10'
  id: totrans-2578
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.10
- en: 'References: [#3406](https://www.sqlalchemy.org/trac/ticket/3406)'
  id: totrans-2579
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3406](https://www.sqlalchemy.org/trac/ticket/3406)
- en: misc
  id: totrans-2580
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [ext]**'
  id: totrans-2581
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug where when using extended attribute instrumentation system, the correct
    exception would not be raised when [`class_mapper()`](../orm/mapping_api.html#sqlalchemy.orm.class_mapper
    "sqlalchemy.orm.class_mapper") were called with an invalid input that also happened
    to not be weak referencable, such as an integer.
  id: totrans-2582
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用扩展属性检测系统时的错误，当使用[`class_mapper()`](../orm/mapping_api.html#sqlalchemy.orm.class_mapper
    "sqlalchemy.orm.class_mapper")调用无效输入时，也不是弱引用时，不会引发正确的异常，例如整数。
- en: 'This change is also **backported** to: 0.9.10'
  id: totrans-2583
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.10
- en: 'References: [#3408](https://www.sqlalchemy.org/trac/ticket/3408)'
  id: totrans-2584
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3408](https://www.sqlalchemy.org/trac/ticket/3408)
- en: 1.0.3
  id: totrans-2585
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.0.3
- en: 'Released: April 30, 2015'
  id: totrans-2586
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2015年4月30日
- en: orm
  id: totrans-2587
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug] [pypy]**'
  id: totrans-2588
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [pypy]**'
- en: Fixed regression from 0.9.10 prior to release due to [#3349](https://www.sqlalchemy.org/trac/ticket/3349)
    where the check for query state on [`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update") or [`Query.delete()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.delete
    "sqlalchemy.orm.Query.delete") compared the empty tuple to itself using `is`,
    which fails on PyPy to produce `True` in this case; this would erroneously emit
    a warning in 0.9 and raise an exception in 1.0.
  id: totrans-2589
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从0.9.10发布之前修复了由于[#3349](https://www.sqlalchemy.org/trac/ticket/3349)引起的回归，其中在[`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update")或[`Query.delete()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.delete
    "sqlalchemy.orm.Query.delete")上检查查询状态时，将空元组与自身使用`is`进行比较，这在PyPy上失败，导致在这种情况下产生`True`；这将在0.9中错误地发出警告，并在1.0中引发异常。
- en: 'References: [#3405](https://www.sqlalchemy.org/trac/ticket/3405)'
  id: totrans-2590
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3405](https://www.sqlalchemy.org/trac/ticket/3405)
- en: '**[orm] [bug]**'
  id: totrans-2591
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression from 0.9.10 prior to release where the new addition of `entity`
    to the [`Query.column_descriptions`](../orm/queryguide/query.html#sqlalchemy.orm.Query.column_descriptions
    "sqlalchemy.orm.Query.column_descriptions") accessor would fail if the target
    entity was produced from a core selectable such as a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") or [`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE") object.
  id: totrans-2592
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在发布之前从 0.9.10 开始的回归，新添加的将 `entity` 添加到 [`Query.column_descriptions`](../orm/queryguide/query.html#sqlalchemy.orm.Query.column_descriptions
    "sqlalchemy.orm.Query.column_descriptions") 访问器会失败，如果目标实体是从诸如 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 或 [`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE") 对象之类的核心可选择对象生成的。
- en: 'References: [#3320](https://www.sqlalchemy.org/trac/ticket/3320), [#3403](https://www.sqlalchemy.org/trac/ticket/3403)'
  id: totrans-2593
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3320](https://www.sqlalchemy.org/trac/ticket/3320)，[#3403](https://www.sqlalchemy.org/trac/ticket/3403)
- en: '**[orm] [bug]**'
  id: totrans-2594
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression within the flush process when an attribute were set to a SQL
    expression for an UPDATE, and the SQL expression when compared to the previous
    value of the attribute would produce a SQL comparison other than `==` or `!=`,
    the exception “Boolean value of this clause is not defined” would raise. The fix
    ensures that the unit of work will not interpret the SQL expression in this way.
  id: totrans-2595
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '在刷新过程中修复了一个回归，当属性设置为更新的 SQL 表达式，并且与属性的先前值进行比较的 SQL 表达式会产生 `==` 或 `!=` 之外的 SQL
    比较时，异常 “此子句的布尔值未定义” 会引发。修复确保工作单元不会以这种方式解释 SQL 表达式。 '
- en: 'References: [#3402](https://www.sqlalchemy.org/trac/ticket/3402)'
  id: totrans-2596
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3402](https://www.sqlalchemy.org/trac/ticket/3402)
- en: '**[orm] [bug]**'
  id: totrans-2597
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed unexpected use regression due to [#2992](https://www.sqlalchemy.org/trac/ticket/2992)
    where textual elements placed into the [`Query.order_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.order_by
    "sqlalchemy.orm.Query.order_by") clause in conjunction with joined eager loading
    would be added to the columns clause of the inner query in such a way that they
    were assumed to be table-bound column names, in the case where the joined eager
    load needs to wrap the query in a subquery to accommodate for a limit/offset.
  id: totrans-2598
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于 [#2992](https://www.sqlalchemy.org/trac/ticket/2992)，修复了由于在联合预加载与 [`Query.order_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.order_by
    "sqlalchemy.orm.Query.order_by") 子句中放置文本元素而导致的意外使用回归，这样会将这些元素添加到内部查询的列子句中，以一种被假定为表绑定列名的方式，这在联合预加载需要将查询包装在子查询中以适应限制/偏移量的情况下会发生。
- en: Originally, the behavior here was intentional, in that a query such as `query(User).order_by('name').limit(1)`
    would order by `user.name` even if the query was modified by joined eager loading
    to be within a subquery, as `'name'` would be interpreted as a symbol to be located
    within the FROM clauses, in this case `User.name`, which would then be copied
    into the columns clause to ensure it were present for ORDER BY. However, the feature
    fails to anticipate the case where `order_by("name")` refers to a specific label
    name present in the local columns clause already and not a name bound to a selectable
    in the FROM clause.
  id: totrans-2599
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最初，这里的行为是有意的，即像 `query(User).order_by('name').limit(1)` 这样的查询会按 `user.name`
    排序，即使查询被联合预加载修改为在子查询中，因为 `'name'` 会被解释为一个符号，要在 FROM 子句中找到，这种情况下为 `User.name`，然后将其复制到列子句中以确保其存在以供
    ORDER BY 使用。但是，该功能未能预见到 `order_by("name")` 指的是本地列子句中已经存在的特定标签名称，而不是绑定到 FROM 子句中的名称的情况。
- en: Beyond that, the feature also fails for deprecated cases such as `order_by("name
    desc")`, which, while it emits a warning that [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") should be used here (note that the issue does
    not impact cases where [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") is used explicitly), still produces a different
    query than previously where the “name desc” expression is copied into the columns
    clause inappropriately. The resolution is such that the “joined eager loading”
    aspect of the feature will skip over these so-called “label reference” expressions
    when augmenting the inner columns clause, as though they were [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") constructs already.
  id: totrans-2600
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此外，该功能还对已弃用的情况（如`order_by("name desc")`）失败，尽管它会发出警告，建议在此处使用[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")（请注意，该问题不会影响显式使用[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")的情况），但仍会生成与以前不同的查询，其中“name desc”表达式不当地复制到列子句中。
    解决方案是，该功能的“连接式急加载”方面将在增强内部列子句时跳过这些所谓的“标签引用”表达式，就好像它们已经是[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")构造一样。
- en: 'References: [#3392](https://www.sqlalchemy.org/trac/ticket/3392)'
  id: totrans-2601
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3392](https://www.sqlalchemy.org/trac/ticket/3392)
- en: '**[orm] [bug]**'
  id: totrans-2602
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a regression regarding the [`MapperEvents.instrument_class()`](../orm/events.html#sqlalchemy.orm.MapperEvents.instrument_class
    "sqlalchemy.orm.MapperEvents.instrument_class") event where its invocation was
    moved to be after the class manager’s instrumentation of the class, which is the
    opposite of what the documentation for the event explicitly states. The rationale
    for the switch was due to Declarative taking the step of setting up the full “instrumentation
    manager” for a class before it was mapped for the purpose of the new `@declared_attr`
    features described in [Improvements to declarative mixins, @declared_attr and
    related features](migration_10.html#feature-3150), but the change was also made
    against the classical use of [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") for consistency. However, SQLSoup relies upon the instrumentation
    event happening before any instrumentation under classical mapping. The behavior
    is reverted in the case of classical and declarative mapping, the latter implemented
    by using a simple memoization without using class manager.
  id: totrans-2603
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关于[`MapperEvents.instrument_class()`](../orm/events.html#sqlalchemy.orm.MapperEvents.instrument_class
    "sqlalchemy.orm.MapperEvents.instrument_class")事件的回归，其中其调用被移动到类管理器对类进行仪器化之后，这与事件文档明确说明的相反。
    切换的理由是由于Declarative在将类映射为新的`@declared_attr`功能描述的目的之前设置了完整的“仪器管理器”，但也针对经典使用[`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")的一致性进行了更改。 然而，SQLSoup依赖于在任何经典映射下的仪器化之前发生的仪器化事件。 在经典和声明性映射的情况下，该行为被恢复，后者通过简单的备忘录实现，而不使用类管理器。
- en: 'References: [#3388](https://www.sqlalchemy.org/trac/ticket/3388)'
  id: totrans-2604
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3388](https://www.sqlalchemy.org/trac/ticket/3388)
- en: '**[orm] [bug]**'
  id: totrans-2605
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue in new [`QueryEvents.before_compile()`](../orm/events.html#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile") event where changes made to the [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object’s collection of entities to load within the event
    would render in the SQL, but would not be reflected during the loading process.
  id: totrans-2606
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在新的[`QueryEvents.before_compile()`](../orm/events.html#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile")事件中修复了一个问题，即在事件中对要加载的实体集合进行更改会反映在SQL中，但在加载过程中不会反映。
- en: 'References: [#3387](https://www.sqlalchemy.org/trac/ticket/3387)'
  id: totrans-2607
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3387](https://www.sqlalchemy.org/trac/ticket/3387)
- en: engine
  id: totrans-2608
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [feature]**'
  id: totrans-2609
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: New features added to support engine/pool plugins with advanced functionality.
    Added a new “soft invalidate” feature to the connection pool at the level of the
    checked out connection wrapper as well as the [`_ConnectionRecord`](../core/pooling.html#sqlalchemy.pool._ConnectionRecord
    "sqlalchemy.pool._ConnectionRecord"). This works similarly to a modern pool invalidation
    in that connections aren’t actively closed, but are recycled only on next checkout;
    this is essentially a per-connection version of that feature. A new event [`PoolEvents.soft_invalidate()`](../core/events.html#sqlalchemy.events.PoolEvents.soft_invalidate
    "sqlalchemy.events.PoolEvents.soft_invalidate") is added to complement it.
  id: totrans-2610
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了支持引擎/池插件具有高级功能的新功能。在检出的连接包装器级别以及[`_ConnectionRecord`](../core/pooling.html#sqlalchemy.pool._ConnectionRecord
    "sqlalchemy.pool._ConnectionRecord")的连接池中添加了一个新的“软失效”功能。这类似于现代池失效，因为连接不会被主动关闭，但仅在下次检出时被重用；这本质上是该功能的每个连接版本。添加了一个新的事件[`PoolEvents.soft_invalidate()`](../core/events.html#sqlalchemy.events.PoolEvents.soft_invalidate
    "sqlalchemy.events.PoolEvents.soft_invalidate")来补充它。
- en: Also added new flag [`ExceptionContext.invalidate_pool_on_disconnect`](../core/connections.html#sqlalchemy.engine.ExceptionContext.invalidate_pool_on_disconnect
    "sqlalchemy.engine.ExceptionContext.invalidate_pool_on_disconnect"). Allows an
    error handler within `ConnectionEvents.handle_error()` to maintain a “disconnect”
    condition, but to handle calling invalidate on individual connections in a specific
    manner within the event.
  id: totrans-2611
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 还添加了新的标志[`ExceptionContext.invalidate_pool_on_disconnect`](../core/connections.html#sqlalchemy.engine.ExceptionContext.invalidate_pool_on_disconnect
    "sqlalchemy.engine.ExceptionContext.invalidate_pool_on_disconnect")。允许`ConnectionEvents.handle_error()`中的错误处理程序维护“断开”条件，但在事件中以特定方式调用单个连接的无效。
- en: 'References: [#3379](https://www.sqlalchemy.org/trac/ticket/3379)'
  id: totrans-2612
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#3379](https://www.sqlalchemy.org/trac/ticket/3379)
- en: '**[engine] [feature]**'
  id: totrans-2613
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: Added new event `do_connect`, which allows interception / replacement of when
    the [`Dialect.connect()`](../core/internals.html#sqlalchemy.engine.Dialect.connect
    "sqlalchemy.engine.Dialect.connect") hook is called to create a DBAPI connection.
    Also added dialect plugin hooks [`Dialect.get_dialect_cls()`](../core/internals.html#sqlalchemy.engine.Dialect.get_dialect_cls
    "sqlalchemy.engine.Dialect.get_dialect_cls") and [`Dialect.engine_created()`](../core/internals.html#sqlalchemy.engine.Dialect.engine_created
    "sqlalchemy.engine.Dialect.engine_created") which allow external plugins to add
    events to existing dialects using entry points.
  id: totrans-2614
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新事件`do_connect`，允许拦截/替换调用[`Dialect.connect()`](../core/internals.html#sqlalchemy.engine.Dialect.connect
    "sqlalchemy.engine.Dialect.connect")挂钩以创建DBAPI连接时。还添加了方言插件钩子[`Dialect.get_dialect_cls()`](../core/internals.html#sqlalchemy.engine.Dialect.get_dialect_cls
    "sqlalchemy.engine.Dialect.get_dialect_cls")和[`Dialect.engine_created()`](../core/internals.html#sqlalchemy.engine.Dialect.engine_created
    "sqlalchemy.engine.Dialect.engine_created")，它允许外部插件使用入口点向现有方言添加事件。
- en: 'References: [#3355](https://www.sqlalchemy.org/trac/ticket/3355)'
  id: totrans-2615
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3355](https://www.sqlalchemy.org/trac/ticket/3355)
- en: sql
  id: totrans-2616
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-2617
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added a placeholder method `TypeEngine.compare_against_backend()` which is now
    consumed by Alembic migrations as of 0.7.6\. User-defined types can implement
    this method to assist in the comparison of a type against one reflected from the
    database.
  id: totrans-2618
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个占位符方法`TypeEngine.compare_against_backend()`，从0.7.6版本开始被Alembic迁移所使用。用户定义的类型可以实现此方法，以帮助比较数据库中反射的类型与另一个类型之间的比较。
- en: '**[sql] [bug]**'
  id: totrans-2619
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where the truncation of long labels in SQL could produce a label that
    overlapped another label that is not truncated; this because the length threshold
    for truncation was greater than the portion of the label that remains after truncation.
    These two values have now been made the same; label_length - 6. The effect here
    is that shorter column labels will be “truncated” where they would not have been
    truncated before.
  id: totrans-2620
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了SQL中长标签截断可能产生与未截断的另一个标签重叠的错误；这是因为截断的长度阈值大于截断后保留的标签部分。现在，这两个值已经被设置为相同；标签长度
    - 6。这里的效果是较短的列标签将在以前不会被截断的地方“截断”。
- en: 'References: [#3396](https://www.sqlalchemy.org/trac/ticket/3396)'
  id: totrans-2621
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3396](https://www.sqlalchemy.org/trac/ticket/3396)
- en: '**[sql] [bug]**'
  id: totrans-2622
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed regression due to [#3282](https://www.sqlalchemy.org/trac/ticket/3282)
    where the `tables` collection passed as a keyword argument to the [`DDLEvents.before_create()`](../core/events.html#sqlalchemy.events.DDLEvents.before_create
    "sqlalchemy.events.DDLEvents.before_create"), [`DDLEvents.after_create()`](../core/events.html#sqlalchemy.events.DDLEvents.after_create
    "sqlalchemy.events.DDLEvents.after_create"), [`DDLEvents.before_drop()`](../core/events.html#sqlalchemy.events.DDLEvents.before_drop
    "sqlalchemy.events.DDLEvents.before_drop"), and [`DDLEvents.after_drop()`](../core/events.html#sqlalchemy.events.DDLEvents.after_drop
    "sqlalchemy.events.DDLEvents.after_drop") events would no longer be a list of
    tables, but instead a list of tuples which contained a second entry with foreign
    keys to be added or dropped. As the `tables` collection, while documented as not
    necessarily stable, has come to be relied upon, this change is considered a regression.
    Additionally, in some cases for “drop”, this collection would be an iterator that
    would cause the operation to fail if prematurely iterated. The collection is now
    a list of table objects in all cases and test coverage for the format of this
    collection is now added.
  id: totrans-2623
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于[#3282](https://www.sqlalchemy.org/trac/ticket/3282)导致的回归修复，将`tables`集合作为关键字参数传递给[`DDLEvents.before_create()`](../core/events.html#sqlalchemy.events.DDLEvents.before_create
    "sqlalchemy.events.DDLEvents.before_create")、[`DDLEvents.after_create()`](../core/events.html#sqlalchemy.events.DDLEvents.after_create
    "sqlalchemy.events.DDLEvents.after_create")、[`DDLEvents.before_drop()`](../core/events.html#sqlalchemy.events.DDLEvents.before_drop
    "sqlalchemy.events.DDLEvents.before_drop")和[`DDLEvents.after_drop()`](../core/events.html#sqlalchemy.events.DDLEvents.after_drop
    "sqlalchemy.events.DDLEvents.after_drop")事件时，不再是表的列表，而是包含第二个条目的元组列表，其中包含要添加或删除的外键。由于`tables`集合，虽然文档中说明不一定稳定，但已经被依赖，这种更改被认为是一个回归。此外，在某些情况下，“drop”操作会失败，因为此集合��能是一个迭代器，如果过早迭代会导致操作失败。现在，在所有情况下，该集合都是表对象的列表，并且现在已添加了对该集合格式的测试覆盖。
- en: 'References: [#3391](https://www.sqlalchemy.org/trac/ticket/3391)'
  id: totrans-2624
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3391](https://www.sqlalchemy.org/trac/ticket/3391)
- en: misc
  id: totrans-2625
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [ext]**'
  id: totrans-2626
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug in association proxy where an any()/has() on an relationship->scalar
    non-object attribute comparison would fail, e.g. `filter(Parent.some_collection_to_attribute.any(Child.attr
    == 'foo'))`
  id: totrans-2627
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在关联代理中的一个错误，即在关系->标量非对象属性比较上执行any()/has()时会失败，例如`filter(Parent.some_collection_to_attribute.any(Child.attr
    == 'foo'))`
- en: 'References: [#3397](https://www.sqlalchemy.org/trac/ticket/3397)'
  id: totrans-2628
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3397](https://www.sqlalchemy.org/trac/ticket/3397)
- en: orm
  id: totrans-2629
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug] [pypy]**'
  id: totrans-2630
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [pypy]**'
- en: Fixed regression from 0.9.10 prior to release due to [#3349](https://www.sqlalchemy.org/trac/ticket/3349)
    where the check for query state on [`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update") or [`Query.delete()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.delete
    "sqlalchemy.orm.Query.delete") compared the empty tuple to itself using `is`,
    which fails on PyPy to produce `True` in this case; this would erroneously emit
    a warning in 0.9 and raise an exception in 1.0.
  id: totrans-2631
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于[#3349](https://www.sqlalchemy.org/trac/ticket/3349)，在发布之前从0.9.10版本开始的回归中，[`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update")或[`Query.delete()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.delete
    "sqlalchemy.orm.Query.delete")上的查询状态检查将空元组与自身使用`is`进行比较，这在PyPy上会失败，导致在这种情况下产生`True`；这将在0.9中错误地发出警告，并在1.0中引发异常。
- en: 'References: [#3405](https://www.sqlalchemy.org/trac/ticket/3405)'
  id: totrans-2632
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3405](https://www.sqlalchemy.org/trac/ticket/3405)
- en: '**[orm] [bug]**'
  id: totrans-2633
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression from 0.9.10 prior to release where the new addition of `entity`
    to the [`Query.column_descriptions`](../orm/queryguide/query.html#sqlalchemy.orm.Query.column_descriptions
    "sqlalchemy.orm.Query.column_descriptions") accessor would fail if the target
    entity was produced from a core selectable such as a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") or [`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE") object.
  id: totrans-2634
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在发布之前从0.9.10版本开始的回归，其中将`entity`添加到[`Query.column_descriptions`](../orm/queryguide/query.html#sqlalchemy.orm.Query.column_descriptions
    "sqlalchemy.orm.Query.column_descriptions")访问器时，如果目标实体是从核心可选择对象（如[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")或[`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE")对象）生成的，将会失败。
- en: 'References: [#3320](https://www.sqlalchemy.org/trac/ticket/3320), [#3403](https://www.sqlalchemy.org/trac/ticket/3403)'
  id: totrans-2635
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3320](https://www.sqlalchemy.org/trac/ticket/3320), [#3403](https://www.sqlalchemy.org/trac/ticket/3403)
- en: '**[orm] [bug]**'
  id: totrans-2636
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression within the flush process when an attribute were set to a SQL
    expression for an UPDATE, and the SQL expression when compared to the previous
    value of the attribute would produce a SQL comparison other than `==` or `!=`,
    the exception “Boolean value of this clause is not defined” would raise. The fix
    ensures that the unit of work will not interpret the SQL expression in this way.
  id: totrans-2637
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在刷新过程中的回归，当属性设置为UPDATE的SQL表达式时，与属性的先前值进行比较的SQL表达式会产生一个不是`==`或`!=`的SQL比较时，将引发异常“此子句的布尔值未定义”。修复确保工作单元不会以这种方式解释SQL表达式。
- en: 'References: [#3402](https://www.sqlalchemy.org/trac/ticket/3402)'
  id: totrans-2638
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3402](https://www.sqlalchemy.org/trac/ticket/3402)
- en: '**[orm] [bug]**'
  id: totrans-2639
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed unexpected use regression due to [#2992](https://www.sqlalchemy.org/trac/ticket/2992)
    where textual elements placed into the [`Query.order_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.order_by
    "sqlalchemy.orm.Query.order_by") clause in conjunction with joined eager loading
    would be added to the columns clause of the inner query in such a way that they
    were assumed to be table-bound column names, in the case where the joined eager
    load needs to wrap the query in a subquery to accommodate for a limit/offset.
  id: totrans-2640
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由于[#2992](https://www.sqlalchemy.org/trac/ticket/2992)导致的意外使用回归，其中将文本元素放置到[`Query.order_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.order_by
    "sqlalchemy.orm.Query.order_by")子句中，与连接的急加载一起使用时，这些元素将被添加到内部查询的列子句中，以一种被假定为表绑定列名的方式，即在连接的急加载需要将查询包装在子查询中以适应限制/偏移量的情况下。
- en: Originally, the behavior here was intentional, in that a query such as `query(User).order_by('name').limit(1)`
    would order by `user.name` even if the query was modified by joined eager loading
    to be within a subquery, as `'name'` would be interpreted as a symbol to be located
    within the FROM clauses, in this case `User.name`, which would then be copied
    into the columns clause to ensure it were present for ORDER BY. However, the feature
    fails to anticipate the case where `order_by("name")` refers to a specific label
    name present in the local columns clause already and not a name bound to a selectable
    in the FROM clause.
  id: totrans-2641
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最初，这里的行为是有意的，例如`query(User).order_by('name').limit(1)`这样的查询将按照`user.name`排序，即使查询被连接的急加载修改为在子查询中，因为`'name'`将被解释为一个符号，应该位于FROM子句中，在这种情况下是`User.name`，然后将其复制到列子句中以确保它存在于ORDER
    BY中。然而，该功能未能预料到`order_by("name")`指的是本地列子句中已经存在的特定标签名称，而不是绑定到FROM子句中的名称的情况。
- en: Beyond that, the feature also fails for deprecated cases such as `order_by("name
    desc")`, which, while it emits a warning that [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") should be used here (note that the issue does
    not impact cases where [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") is used explicitly), still produces a different
    query than previously where the “name desc” expression is copied into the columns
    clause inappropriately. The resolution is such that the “joined eager loading”
    aspect of the feature will skip over these so-called “label reference” expressions
    when augmenting the inner columns clause, as though they were [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") constructs already.
  id: totrans-2642
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此外，该功能还对已弃用的情况失败，例如`order_by("name desc")`，虽然它会发出警告，应该在这里使用[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")（请注意，该问题不影响显式使用[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")的情况），但仍会产生与以前不同的查询，其中“name desc”表达式被不适当地复制到列子句中。解决方案是，该功能的“连接的急加载”方面将跳过这些所谓的“标签引用”表达式，当增强内部列子句时，就像它们已经是[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")构造一样。
- en: 'References: [#3392](https://www.sqlalchemy.org/trac/ticket/3392)'
  id: totrans-2643
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3392](https://www.sqlalchemy.org/trac/ticket/3392)
- en: '**[orm] [bug]**'
  id: totrans-2644
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a regression regarding the [`MapperEvents.instrument_class()`](../orm/events.html#sqlalchemy.orm.MapperEvents.instrument_class
    "sqlalchemy.orm.MapperEvents.instrument_class") event where its invocation was
    moved to be after the class manager’s instrumentation of the class, which is the
    opposite of what the documentation for the event explicitly states. The rationale
    for the switch was due to Declarative taking the step of setting up the full “instrumentation
    manager” for a class before it was mapped for the purpose of the new `@declared_attr`
    features described in [Improvements to declarative mixins, @declared_attr and
    related features](migration_10.html#feature-3150), but the change was also made
    against the classical use of [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") for consistency. However, SQLSoup relies upon the instrumentation
    event happening before any instrumentation under classical mapping. The behavior
    is reverted in the case of classical and declarative mapping, the latter implemented
    by using a simple memoization without using class manager.
  id: totrans-2645
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关于[`MapperEvents.instrument_class()`](../orm/events.html#sqlalchemy.orm.MapperEvents.instrument_class
    "sqlalchemy.orm.MapperEvents.instrument_class")事件的回归，其中其调用被移动到类管理器对类进行仪器化之后，这与事件文档明确说明的相反。切换的理由是由于声明性在将类映射为新的`@declared_attr`功能描述的目的之前设置了完整的“仪器管理器”，但也针对经典使用[`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")的一致性进行了更改。然而，SQLSoup依赖于在任何经典映射下的仪器化之前发生的仪器化事件。在经典和声明性映射的情况下，行为被恢复，后者通过使用简单的记忆化而不使用类管理器来实现。
- en: 'References: [#3388](https://www.sqlalchemy.org/trac/ticket/3388)'
  id: totrans-2646
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3388](https://www.sqlalchemy.org/trac/ticket/3388)
- en: '**[orm] [bug]**'
  id: totrans-2647
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [错误]**'
- en: Fixed issue in new [`QueryEvents.before_compile()`](../orm/events.html#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile") event where changes made to the [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object’s collection of entities to load within the event
    would render in the SQL, but would not be reflected during the loading process.
  id: totrans-2648
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新[`QueryEvents.before_compile()`](../orm/events.html#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile")事件中对在事件中加载的实体集合进行更改的问题，这些更改会在SQL中呈现，但在加载过程中不会反映出来。
- en: 'References: [#3387](https://www.sqlalchemy.org/trac/ticket/3387)'
  id: totrans-2649
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3387](https://www.sqlalchemy.org/trac/ticket/3387)
- en: engine
  id: totrans-2650
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [feature]**'
  id: totrans-2651
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [特性]**'
- en: New features added to support engine/pool plugins with advanced functionality.
    Added a new “soft invalidate” feature to the connection pool at the level of the
    checked out connection wrapper as well as the [`_ConnectionRecord`](../core/pooling.html#sqlalchemy.pool._ConnectionRecord
    "sqlalchemy.pool._ConnectionRecord"). This works similarly to a modern pool invalidation
    in that connections aren’t actively closed, but are recycled only on next checkout;
    this is essentially a per-connection version of that feature. A new event [`PoolEvents.soft_invalidate()`](../core/events.html#sqlalchemy.events.PoolEvents.soft_invalidate
    "sqlalchemy.events.PoolEvents.soft_invalidate") is added to complement it.
  id: totrans-2652
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了支持引擎/池插件具有高级功能的新功能。在已检出连接包装器以及[`_ConnectionRecord`](../core/pooling.html#sqlalchemy.pool._ConnectionRecord
    "sqlalchemy.pool._ConnectionRecord")级别的连接池中添加了新的“软无效化”功能。这类似于现代池无效化，即连接不会被主动关闭，而只会在下次检出时被回收；这本质上是该功能的每个连接版本。添加了一个新事件[`PoolEvents.soft_invalidate()`](../core/events.html#sqlalchemy.events.PoolEvents.soft_invalidate
    "sqlalchemy.events.PoolEvents.soft_invalidate")来补充它。
- en: Also added new flag [`ExceptionContext.invalidate_pool_on_disconnect`](../core/connections.html#sqlalchemy.engine.ExceptionContext.invalidate_pool_on_disconnect
    "sqlalchemy.engine.ExceptionContext.invalidate_pool_on_disconnect"). Allows an
    error handler within `ConnectionEvents.handle_error()` to maintain a “disconnect”
    condition, but to handle calling invalidate on individual connections in a specific
    manner within the event.
  id: totrans-2653
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 还添加了新标志[`ExceptionContext.invalidate_pool_on_disconnect`](../core/connections.html#sqlalchemy.engine.ExceptionContext.invalidate_pool_on_disconnect
    "sqlalchemy.engine.ExceptionContext.invalidate_pool_on_disconnect")。允许`ConnectionEvents.handle_error()`中的错误处理程序维护“断开”条件，但在事件中以特定方式处理对各个连接的无效化调用。
- en: 'References: [#3379](https://www.sqlalchemy.org/trac/ticket/3379)'
  id: totrans-2654
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3379](https://www.sqlalchemy.org/trac/ticket/3379)
- en: '**[engine] [feature]**'
  id: totrans-2655
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [特性]**'
- en: Added new event `do_connect`, which allows interception / replacement of when
    the [`Dialect.connect()`](../core/internals.html#sqlalchemy.engine.Dialect.connect
    "sqlalchemy.engine.Dialect.connect") hook is called to create a DBAPI connection.
    Also added dialect plugin hooks [`Dialect.get_dialect_cls()`](../core/internals.html#sqlalchemy.engine.Dialect.get_dialect_cls
    "sqlalchemy.engine.Dialect.get_dialect_cls") and [`Dialect.engine_created()`](../core/internals.html#sqlalchemy.engine.Dialect.engine_created
    "sqlalchemy.engine.Dialect.engine_created") which allow external plugins to add
    events to existing dialects using entry points.
  id: totrans-2656
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的事件`do_connect`，允许拦截/替换[`Dialect.connect()`](../core/internals.html#sqlalchemy.engine.Dialect.connect
    "sqlalchemy.engine.Dialect.connect") 被调用以创建 DBAPI 连接的钩子。还添加了方言插件钩子[`Dialect.get_dialect_cls()`](../core/internals.html#sqlalchemy.engine.Dialect.get_dialect_cls
    "sqlalchemy.engine.Dialect.get_dialect_cls") 和 [`Dialect.engine_created()`](../core/internals.html#sqlalchemy.engine.Dialect.engine_created
    "sqlalchemy.engine.Dialect.engine_created") ，允许外部插件使用入口点向现有方言添加事件。
- en: 'References: [#3355](https://www.sqlalchemy.org/trac/ticket/3355)'
  id: totrans-2657
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3355](https://www.sqlalchemy.org/trac/ticket/3355)
- en: sql
  id: totrans-2658
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-2659
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added a placeholder method `TypeEngine.compare_against_backend()` which is now
    consumed by Alembic migrations as of 0.7.6\. User-defined types can implement
    this method to assist in the comparison of a type against one reflected from the
    database.
  id: totrans-2660
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个占位方法`TypeEngine.compare_against_backend()`，自 0.7.6 版开始由 Alembic 迁移使用。用户定义的类型可以实现此方法，以协助比较类型与从数据库反射的类型之间的差异。
- en: '**[sql] [bug]**'
  id: totrans-2661
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where the truncation of long labels in SQL could produce a label that
    overlapped another label that is not truncated; this because the length threshold
    for truncation was greater than the portion of the label that remains after truncation.
    These two values have now been made the same; label_length - 6. The effect here
    is that shorter column labels will be “truncated” where they would not have been
    truncated before.
  id: totrans-2662
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 SQL 中长标签截断可能产生重叠另一个未截断标签的错误。这是因为截断的长度阈值大于截断后剩余标签的部分。现在这两个值已经变成相同的；label_length
    - 6。这里的效果是，较短的列标签将在以前不会被截断的地方“截断”。
- en: 'References: [#3396](https://www.sqlalchemy.org/trac/ticket/3396)'
  id: totrans-2663
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3396](https://www.sqlalchemy.org/trac/ticket/3396)
- en: '**[sql] [bug]**'
  id: totrans-2664
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed regression due to [#3282](https://www.sqlalchemy.org/trac/ticket/3282)
    where the `tables` collection passed as a keyword argument to the [`DDLEvents.before_create()`](../core/events.html#sqlalchemy.events.DDLEvents.before_create
    "sqlalchemy.events.DDLEvents.before_create"), [`DDLEvents.after_create()`](../core/events.html#sqlalchemy.events.DDLEvents.after_create
    "sqlalchemy.events.DDLEvents.after_create"), [`DDLEvents.before_drop()`](../core/events.html#sqlalchemy.events.DDLEvents.before_drop
    "sqlalchemy.events.DDLEvents.before_drop"), and [`DDLEvents.after_drop()`](../core/events.html#sqlalchemy.events.DDLEvents.after_drop
    "sqlalchemy.events.DDLEvents.after_drop") events would no longer be a list of
    tables, but instead a list of tuples which contained a second entry with foreign
    keys to be added or dropped. As the `tables` collection, while documented as not
    necessarily stable, has come to be relied upon, this change is considered a regression.
    Additionally, in some cases for “drop”, this collection would be an iterator that
    would cause the operation to fail if prematurely iterated. The collection is now
    a list of table objects in all cases and test coverage for the format of this
    collection is now added.
  id: totrans-2665
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于 [#3282](https://www.sqlalchemy.org/trac/ticket/3282) 导致的回归错误已修复，其中将 `tables`
    集合作为关键字参数传递给[`DDLEvents.before_create()`](../core/events.html#sqlalchemy.events.DDLEvents.before_create
    "sqlalchemy.events.DDLEvents.before_create")、[`DDLEvents.after_create()`](../core/events.html#sqlalchemy.events.DDLEvents.after_create
    "sqlalchemy.events.DDLEvents.after_create")、[`DDLEvents.before_drop()`](../core/events.html#sqlalchemy.events.DDLEvents.before_drop
    "sqlalchemy.events.DDLEvents.before_drop") 和 [`DDLEvents.after_drop()`](../core/events.html#sqlalchemy.events.DDLEvents.after_drop
    "sqlalchemy.events.DDLEvents.after_drop") 事件时，不再是表的列表，而是包含第二个条目的元组列表，其中包含要添加或删除的外键。由于
    `tables` 集合，虽然文档中声明不一定稳定，但已被依赖，这种变化被认为是一个回归。此外，对于“drop”，在某些情况下，此集合将是一个迭代器，如果过早迭代将导致操作失败。现在，在所有情况下，集合都是表对象的列表，并且现在已添加了此集合格式的测试覆盖。
- en: 'References: [#3391](https://www.sqlalchemy.org/trac/ticket/3391)'
  id: totrans-2666
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3391](https://www.sqlalchemy.org/trac/ticket/3391)
- en: misc
  id: totrans-2667
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [ext]**'
  id: totrans-2668
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug in association proxy where an any()/has() on an relationship->scalar
    non-object attribute comparison would fail, e.g. `filter(Parent.some_collection_to_attribute.any(Child.attr
    == 'foo'))`
  id: totrans-2669
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关于关联代理中的bug，其中对关系->标量非对象属性比较的any()/has()会失败，例如`filter(Parent.some_collection_to_attribute.any(Child.attr
    == 'foo'))`
- en: 'References: [#3397](https://www.sqlalchemy.org/trac/ticket/3397)'
  id: totrans-2670
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3397](https://www.sqlalchemy.org/trac/ticket/3397)
- en: 1.0.2
  id: totrans-2671
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.0.2
- en: 'Released: April 24, 2015'
  id: totrans-2672
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2015年4月24日
- en: orm declarative
  id: totrans-2673
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm declarative
- en: '**[orm] [declarative] [bug]**'
  id: totrans-2674
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Fixed unexpected use regression regarding the declarative `__declare_first__`
    and `__declare_last__` accessors where these would no longer be called on the
    superclass of the declarative base.
  id: totrans-2675
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关于声明性`__declare_first__`和`__declare_last__`访问器的意外使用回归，其中这些访问器将不再在声明性基类的超类上调用。
- en: 'References: [#3383](https://www.sqlalchemy.org/trac/ticket/3383)'
  id: totrans-2676
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3383](https://www.sqlalchemy.org/trac/ticket/3383)
- en: sql
  id: totrans-2677
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-2678
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed a regression that was incorrectly fixed in 1.0.0b4 (hence becoming two
    regressions); reports that SELECT statements would GROUP BY a label name and fail
    was misconstrued that certain backends such as SQL Server should not be emitting
    ORDER BY or GROUP BY on a simple label name at all; when in fact, we had forgotten
    that 0.9 was already emitting ORDER BY on a simple label name for all backends,
    as described in [Label constructs can now render as their name alone in an ORDER
    BY](migration_09.html#migration-1068), even though 1.0 includes a rewrite of this
    logic as part of [#2992](https://www.sqlalchemy.org/trac/ticket/2992). As far
    as emitting GROUP BY against a simple label, even PostgreSQL has cases where it
    will raise an error even though the label to group on should be apparent, so it
    is clear that GROUP BY should never be rendered in this way automatically.
  id: totrans-2679
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个回归，该回归在1.0.0b4中被错误地修复（因此成为两个回归）；报告称SELECT语句将对标签名称进行GROUP BY并失败，被误解为某些后端（如SQL
    Server）根本不应该在简单标签名称上发出ORDER BY或GROUP BY；事实上，我们忘记了0.9版本已经对所有后端的简单标签名称进行ORDER BY，如[Label
    constructs can now render as their name alone in an ORDER BY](migration_09.html#migration-1068)中所述，即使1.0包括对此逻辑的重写作为[#2992](https://www.sqlalchemy.org/trac/ticket/2992)的一部分。关于对简单标签进行GROUP
    BY，即使是PostgreSQL也有可能出现错误，即使应该明显要对其进行分组，因此很明显不应该自动以这种方式呈现GROUP BY。
- en: In 1.0.2, SQL Server, Firebird and others will again emit ORDER BY on a simple
    label name when passed a [`Label`](../core/sqlelement.html#sqlalchemy.sql.expression.Label
    "sqlalchemy.sql.expression.Label") construct that is also present in the columns
    clause. Additionally, no backend will emit GROUP BY against the simple label name
    only when passed a [`Label`](../core/sqlelement.html#sqlalchemy.sql.expression.Label
    "sqlalchemy.sql.expression.Label") construct.
  id: totrans-2680
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在1.0.2版本中，SQL Server、Firebird等再次在传递[`Label`](../core/sqlelement.html#sqlalchemy.sql.expression.Label
    "sqlalchemy.sql.expression.Label")构造时对简单标签名称发出ORDER BY，该构造也存在于列子句中。此外，当传递[`Label`](../core/sqlelement.html#sqlalchemy.sql.expression.Label
    "sqlalchemy.sql.expression.Label")构造时，任何后端都不会仅对简单标签名称发出GROUP BY。
- en: 'References: [#3338](https://www.sqlalchemy.org/trac/ticket/3338), [#3385](https://www.sqlalchemy.org/trac/ticket/3385)'
  id: totrans-2681
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3338](https://www.sqlalchemy.org/trac/ticket/3338), [#3385](https://www.sqlalchemy.org/trac/ticket/3385)
- en: orm declarative
  id: totrans-2682
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm declarative
- en: '**[orm] [declarative] [bug]**'
  id: totrans-2683
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Fixed unexpected use regression regarding the declarative `__declare_first__`
    and `__declare_last__` accessors where these would no longer be called on the
    superclass of the declarative base.
  id: totrans-2684
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关于声明性`__declare_first__`和`__declare_last__`访问器的意外使用回归，其中这些访问器将不再在声明性基类的超类上调用。
- en: 'References: [#3383](https://www.sqlalchemy.org/trac/ticket/3383)'
  id: totrans-2685
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3383](https://www.sqlalchemy.org/trac/ticket/3383)
- en: sql
  id: totrans-2686
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-2687
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed a regression that was incorrectly fixed in 1.0.0b4 (hence becoming two
    regressions); reports that SELECT statements would GROUP BY a label name and fail
    was misconstrued that certain backends such as SQL Server should not be emitting
    ORDER BY or GROUP BY on a simple label name at all; when in fact, we had forgotten
    that 0.9 was already emitting ORDER BY on a simple label name for all backends,
    as described in [Label constructs can now render as their name alone in an ORDER
    BY](migration_09.html#migration-1068), even though 1.0 includes a rewrite of this
    logic as part of [#2992](https://www.sqlalchemy.org/trac/ticket/2992). As far
    as emitting GROUP BY against a simple label, even PostgreSQL has cases where it
    will raise an error even though the label to group on should be apparent, so it
    is clear that GROUP BY should never be rendered in this way automatically.
  id: totrans-2688
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个在1.0.0b4中错误修复的回归（因此成为两个回归）；报告称SELECT语句将按标签名称进行GROUP BY并失败被误解为某些后端（如SQL
    Server）根本不应该在简单标签名称上发出ORDER BY或GROUP BY；事实上，我们忘记了0.9版本已经在所有后端上为简单标签名称发出ORDER BY，如[标签构造现在可以仅按其名称在ORDER
    BY中呈现](migration_09.html#migration-1068)中所述，尽管1.0版本包括对此逻辑的重写作为[#2992](https://www.sqlalchemy.org/trac/ticket/2992)的一部分。至于针对简单标签发出GROUP
    BY，即使PostgreSQL也有可能会引发错误，尽管应该明显可以分组的标签，因此很明显不应该自动以这种方式呈现GROUP BY。
- en: In 1.0.2, SQL Server, Firebird and others will again emit ORDER BY on a simple
    label name when passed a [`Label`](../core/sqlelement.html#sqlalchemy.sql.expression.Label
    "sqlalchemy.sql.expression.Label") construct that is also present in the columns
    clause. Additionally, no backend will emit GROUP BY against the simple label name
    only when passed a [`Label`](../core/sqlelement.html#sqlalchemy.sql.expression.Label
    "sqlalchemy.sql.expression.Label") construct.
  id: totrans-2689
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在1.0.2中，SQL Server、Firebird和其他后端将再次在传递到[`Label`](../core/sqlelement.html#sqlalchemy.sql.expression.Label
    "sqlalchemy.sql.expression.Label")构造的简单标签名称时发出ORDER BY。此外，当传递到[`Label`](../core/sqlelement.html#sqlalchemy.sql.expression.Label
    "sqlalchemy.sql.expression.Label")构造时，任何后端都不会仅针对简单标签名称发出GROUP BY。
- en: 'References: [#3338](https://www.sqlalchemy.org/trac/ticket/3338), [#3385](https://www.sqlalchemy.org/trac/ticket/3385)'
  id: totrans-2690
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3338](https://www.sqlalchemy.org/trac/ticket/3338)，[#3385](https://www.sqlalchemy.org/trac/ticket/3385)
- en: 1.0.1
  id: totrans-2691
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.0.1
- en: 'Released: April 23, 2015'
  id: totrans-2692
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2015年4月23日
- en: orm
  id: totrans-2693
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-2694
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where a query of the form `query(B).filter(B.a != A(id=7))` would
    render the `NEVER_SET` symbol, when given a transient object. For a persistent
    object, it would always use the persisted database value and not the currently
    set value. Assuming autoflush is turned on, this usually would not be apparent
    for persistent values, as any pending changes would be flushed first in any case.
    However, this is inconsistent vs. the logic used for the non-negated comparison,
    `query(B).filter(B.a == A(id=7))`, which does use the current value and additionally
    allows comparisons to transient objects. The comparison now uses the current value
    and not the database-persisted value.
  id: totrans-2695
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即形式为`query(B).filter(B.a != A(id=7))`的查询将在给定瞬态对象时呈现`NEVER_SET`符号。对于持久对象，它将始终使用持久化的数据库值而不是当前设置的值。假设自动刷新已打开，对于持久值，这通常对于持久值不会明显，因为任何待处理的更改都将首先刷新。但是，这与非否定比较`query(B).filter(B.a
    == A(id=7))`使用当前值的逻辑不一致，并且还允许与瞬态对象进行比较。比较现在使用当前值而不是数据库持久化的值。
- en: Unlike the other `NEVER_SET` issues that are repaired as regressions caused
    by [#3061](https://www.sqlalchemy.org/trac/ticket/3061) in this release, this
    particular issue is present at least as far back as 0.8 and possibly earlier,
    however it was discovered as a result of repairing the related `NEVER_SET` issues.
  id: totrans-2696
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与此版本中由[#3061](https://www.sqlalchemy.org/trac/ticket/3061)引起的其他`NEVER_SET`问题不同，这个特定问题至少从0.8版本开始存在，可能更早，但是作为修复相关的`NEVER_SET`问题的结果被发现。
- en: See also
  id: totrans-2697
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[A “negated contains or equals” relationship comparison will use the current
    value of attributes, not the database value](migration_10.html#bug-3374)'
  id: totrans-2698
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[“否定包含或等于”关系比较](migration_10.html#bug-3374)将使用属性的当前值，而不是数据库的值。'
- en: 'References: [#3374](https://www.sqlalchemy.org/trac/ticket/3374)'
  id: totrans-2699
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3374](https://www.sqlalchemy.org/trac/ticket/3374)
- en: '**[orm] [bug]**'
  id: totrans-2700
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed unexpected use regression cause by [#3061](https://www.sqlalchemy.org/trac/ticket/3061)
    where the NEVER_SET symbol could leak into relationship-oriented queries, including
    `filter()` and `with_parent()` queries. The `None` symbol is returned in all cases,
    however many of these queries have never been correctly supported in any case,
    and produce comparisons to NULL without using the IS operator. For this reason,
    a warning is also added to that subset of relationship queries that don’t currently
    provide for `IS NULL`.
  id: totrans-2701
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由[#3061](https://www.sqlalchemy.org/trac/ticket/3061)引起的意外使用回归，其中NEVER_SET符号可能会泄漏到基于关系的查询中，包括`filter()`和`with_parent()`查询。在所有情况下都返回`None`符号，但是许多这些查询从未得到正确支持，并且在没有使用IS运算符的情况下产生对NULL的比较。出于这个原因，还向那些当前不提供`IS
    NULL`的关系查询子集添加了警告。
- en: See also
  id: totrans-2702
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[Warnings emitted when comparing objects with None values to relationships](migration_10.html#bug-3371)'
  id: totrans-2703
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[比较对象与None值时发出的警告到关系](migration_10.html#bug-3371)'
- en: 'References: [#3371](https://www.sqlalchemy.org/trac/ticket/3371)'
  id: totrans-2704
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3371](https://www.sqlalchemy.org/trac/ticket/3371)
- en: '**[orm] [bug]**'
  id: totrans-2705
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [错误]**'
- en: Fixed a regression caused by [#3061](https://www.sqlalchemy.org/trac/ticket/3061)
    where the NEVER_SET symbol could leak into a lazyload query, subsequent to the
    flush of a pending object. This would occur typically for a many-to-one relationship
    that does not use a simple “get” strategy. The good news is that the fix improves
    efficiency vs. 0.9, because we can now skip the SELECT statement entirely when
    we detect NEVER_SET symbols present in the parameters; prior to [#3061](https://www.sqlalchemy.org/trac/ticket/3061),
    we couldn’t discern if the None here were set or not.
  id: totrans-2706
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由[#3061](https://www.sqlalchemy.org/trac/ticket/3061)引起的回归，其中NEVER_SET符号可能会泄漏到延迟加载查询中，在挂起对象的刷新后发生。这通常会发生在不使用简单“get”策略的多对一关系中。好消息是，该修复改善了与0.9相比的效率，因为我们现在可以在检测到参数中存在NEVER_SET符号时完全跳过SELECT语句；在[#3061](https://www.sqlalchemy.org/trac/ticket/3061)之前，我们无法确定这里的None是否已设置。
- en: 'References: [#3368](https://www.sqlalchemy.org/trac/ticket/3368)'
  id: totrans-2707
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3368](https://www.sqlalchemy.org/trac/ticket/3368)
- en: engine
  id: totrans-2708
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [bug]**'
  id: totrans-2709
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误]**'
- en: Added the string value `"none"` to those accepted by the [`Pool.reset_on_return`](../core/pooling.html#sqlalchemy.pool.Pool.params.reset_on_return
    "sqlalchemy.pool.Pool") parameter as a synonym for `None`, so that string values
    can be used for all settings, allowing utilities like [`engine_from_config()`](../core/engines.html#sqlalchemy.engine_from_config
    "sqlalchemy.engine_from_config") to be usable without issue.
  id: totrans-2710
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将字符串值`"none"`添加到[`Pool.reset_on_return`](../core/pooling.html#sqlalchemy.pool.Pool.params.reset_on_return
    "sqlalchemy.pool.Pool")参数接受的字符串值之一，作为`None`的同义词，以便所有设置都可以使用字符串值，从而允许像[`engine_from_config()`](../core/engines.html#sqlalchemy.engine_from_config
    "sqlalchemy.engine_from_config")这样的工具可以无问题地使用。
- en: 'This change is also **backported** to: 0.9.10'
  id: totrans-2711
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个改变也被**回溯**到了：0.9.10
- en: 'References: [#3375](https://www.sqlalchemy.org/trac/ticket/3375)'
  id: totrans-2712
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3375](https://www.sqlalchemy.org/trac/ticket/3375)
- en: sql
  id: totrans-2713
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-2714
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL] [错误]**'
- en: Fixed issue where a straight SELECT EXISTS query would fail to assign the proper
    result type of Boolean to the result mapping, and instead would leak column types
    from within the query into the result map. This issue exists in 0.9 and earlier
    as well, however has less of an impact in those versions. In 1.0, due to [#918](https://www.sqlalchemy.org/trac/ticket/918)
    this becomes a regression in that we now rely upon the result mapping to be very
    accurate, else we can assign result-type processors to the wrong column. In all
    versions, this issue also has the effect that a simple EXISTS will not apply the
    Boolean type handler, leading to simple 1/0 values for backends without native
    boolean instead of True/False. The fix includes that an EXISTS columns argument
    will be anon-labeled like other column expressions; a similar fix is implemented
    for pure-boolean expressions like `not_(True())`.
  id: totrans-2715
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了直接SELECT EXISTS查询无法将正确的布尔结果类型分配给结果映射的问题，而是将查询中的列类型泄漏到结果映射中。这个问题在0.9版本和更早版本中也存在，但在那些版本中的影响较小。在1.0中，由于[#918](https://www.sqlalchemy.org/trac/ticket/918)，这成为了一个回归，因为我们现在依赖于结果映射非常准确，否则我们可能会将结果类型处理器分配给错误的列。在所有版本中，这个问题还会导致简单的EXISTS不应用布尔类型处理程序，导致在没有本地布尔值的后端中使用简单的1/0值而不是True/False。修复包括EXISTS列参数将像其他列表达式一样匿名标记；类似的修复也针对纯布尔表达式如`not_(True())`实现。
- en: 'References: [#3372](https://www.sqlalchemy.org/trac/ticket/3372)'
  id: totrans-2716
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3372](https://www.sqlalchemy.org/trac/ticket/3372)
- en: sqlite
  id: totrans-2717
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-2718
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [错误]**'
- en: Fixed a regression due to [#3282](https://www.sqlalchemy.org/trac/ticket/3282),
    where due to the fact that we attempt to assume the availability of ALTER when
    creating/dropping schemas, in the case of SQLite we simply said to not worry about
    foreign keys at all, since ALTER is not available, when creating and dropping
    tables. This meant that the sorting of tables was basically skipped in the case
    of SQLite, and for the vast majority of SQLite use cases, this is not an issue.
  id: totrans-2719
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由于[#3282](https://www.sqlalchemy.org/trac/ticket/3282)导致的回归，由于我们在创建/删除模式时尝试假设ALTER可用，因此在SQLite的情况下，我们简单地说根本不用担心外键，因为ALTER不可用，当创建和删除表时，这意味着在SQLite的情况下基本上跳过了表的排序，对于绝大多数SQLite用例，这不是问题。
- en: However, users who were doing DROPs on SQLite with tables that contained data
    and with referential integrity turned on would then experience errors, as the
    dependency sorting *does* matter in the case of DROP with enforced constraints,
    when those tables have data (SQLite will still happily let you create foreign
    keys to nonexistent tables and drop tables referring to existing ones with constraints
    enabled, as long as there’s no data being referenced).
  id: totrans-2720
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然而，对于在SQLite上执行包含数据的表的DROP操作并且打开了引用完整性的用户，然后会遇到错误，因为在DROP时依赖排序确实很重要，当这些表包含数据时（SQLite仍然可以让您创建对不存在表的外键并删除引用具有启用约束的现有表，只要没有引用数据）。
- en: In order to maintain the new feature of [#3282](https://www.sqlalchemy.org/trac/ticket/3282)
    while still allowing a SQLite DROP operation to maintain ordering, we now do the
    sort with full FKs taken under consideration, and if we encounter an unresolvable
    cycle, only *then* do we forego attempting to sort the tables; we instead emit
    a warning and go with the unsorted list. If an environment needs both ordered
    DROPs *and* has foreign key cycles, then the warning notes they will need to restore
    the `use_alter` flag to their [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") and [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") objects so that just those objects will
    be omitted from the dependency sort.
  id: totrans-2721
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了在仍允许SQLite DROP操作保持排序的同时保持[#3282](https://www.sqlalchemy.org/trac/ticket/3282)的新功能，我们现在考虑完整的FK进行排序，如果遇到无法解决的循环，那么我们才放弃尝试对表进行排序；我们发出警告并使用未排序列表。如果环境需要有序的DROP操作并且存在外键循环，那么警告指出他们需要将`use_alter`标志恢复到他们的[`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey")和[`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")对象中，以便仅跳过这些对象的依赖排序。
- en: See also
  id: totrans-2722
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[The use_alter flag on ForeignKeyConstraint is (usually) no longer needed](migration_10.html#feature-3282)
    - contains an updated note about SQLite.'
  id: totrans-2723
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[ForeignKeyConstraint上的use_alter标志（通常）不再需要](migration_10.html#feature-3282)
    - 包含有关SQLite的更新说明。'
- en: 'References: [#3378](https://www.sqlalchemy.org/trac/ticket/3378)'
  id: totrans-2724
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3378](https://www.sqlalchemy.org/trac/ticket/3378)
- en: misc
  id: totrans-2725
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [firebird]**'
  id: totrans-2726
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [firebird]**'
- en: Fixed a regression due to [#3034](https://www.sqlalchemy.org/trac/ticket/3034)
    where limit/offset clauses were not properly interpreted by the Firebird dialect.
    Pull request courtesy effem-git.
  id: totrans-2727
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由于[#3034](https://www.sqlalchemy.org/trac/ticket/3034)导致的回归，Firebird方言未正确解释limit/offset子句。感谢effem-git的拉取请求。
- en: 'References: [#3380](https://www.sqlalchemy.org/trac/ticket/3380)'
  id: totrans-2728
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3380](https://www.sqlalchemy.org/trac/ticket/3380)
- en: '**[bug] [firebird]**'
  id: totrans-2729
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [firebird]**'
- en: Fixed support for “literal_binds” mode when using limit/offset with Firebird,
    so that the values are again rendered inline when this is selected. Related to
    [#3034](https://www.sqlalchemy.org/trac/ticket/3034).
  id: totrans-2730
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用Firebird时使用limit/offset时“literal_binds”模式的支持，因此当选择此模式时，值再次以内联方式呈现。相关于[#3034](https://www.sqlalchemy.org/trac/ticket/3034)。
- en: 'References: [#3381](https://www.sqlalchemy.org/trac/ticket/3381)'
  id: totrans-2731
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3381](https://www.sqlalchemy.org/trac/ticket/3381)
- en: orm
  id: totrans-2732
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-2733
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed issue where a query of the form `query(B).filter(B.a != A(id=7))` would
    render the `NEVER_SET` symbol, when given a transient object. For a persistent
    object, it would always use the persisted database value and not the currently
    set value. Assuming autoflush is turned on, this usually would not be apparent
    for persistent values, as any pending changes would be flushed first in any case.
    However, this is inconsistent vs. the logic used for the non-negated comparison,
    `query(B).filter(B.a == A(id=7))`, which does use the current value and additionally
    allows comparisons to transient objects. The comparison now uses the current value
    and not the database-persisted value.
  id: totrans-2734
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一种形式的查询`query(B).filter(B.a != A(id=7))`在给定临时对象时会生成`NEVER_SET`符号的问题。对于持久化对象，它总是使用持久化的数据库值而不是当前设置的值。假设自动刷新已打开，这通常对于持久值不会明显，因为任何待处理的更改都会被首先刷新。但是，这与非否定比较使用的逻辑不一致，`query(B).filter(B.a
    == A(id=7))`，它确实使用当前值，并且还允许与临时对象进行比较。比较现在使用当前值而不是数据库持久值。
- en: Unlike the other `NEVER_SET` issues that are repaired as regressions caused
    by [#3061](https://www.sqlalchemy.org/trac/ticket/3061) in this release, this
    particular issue is present at least as far back as 0.8 and possibly earlier,
    however it was discovered as a result of repairing the related `NEVER_SET` issues.
  id: totrans-2735
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与此版本中由[#3061](https://www.sqlalchemy.org/trac/ticket/3061)引起的回归修复的其他`NEVER_SET`问题不同，这个特定问题至少存在于0.8版本，并且可能更早，但是它是在修复相关的`NEVER_SET`问题时被发现的。
- en: See also
  id: totrans-2736
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[A “negated contains or equals” relationship comparison will use the current
    value of attributes, not the database value](migration_10.html#bug-3374)'
  id: totrans-2737
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[“否定包含或等于”关系比较将使用属性的当前值，而不是数据库的值](migration_10.html#bug-3374)'
- en: 'References: [#3374](https://www.sqlalchemy.org/trac/ticket/3374)'
  id: totrans-2738
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3374](https://www.sqlalchemy.org/trac/ticket/3374)
- en: '**[orm] [bug]**'
  id: totrans-2739
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed unexpected use regression cause by [#3061](https://www.sqlalchemy.org/trac/ticket/3061)
    where the NEVER_SET symbol could leak into relationship-oriented queries, including
    `filter()` and `with_parent()` queries. The `None` symbol is returned in all cases,
    however many of these queries have never been correctly supported in any case,
    and produce comparisons to NULL without using the IS operator. For this reason,
    a warning is also added to that subset of relationship queries that don’t currently
    provide for `IS NULL`.
  id: totrans-2740
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由[#3061](https://www.sqlalchemy.org/trac/ticket/3061)引起的意外使用回归，其中NEVER_SET符号可能会渗漏到基于关系的查询中，包括`filter()`和`with_parent()`查询。在所有情况下都返回`None`符号，但是其中许多查询在任何情况下都从未正确支持，并且产生对NULL的比较而不使用IS运算符。因此，还在那些当前不提供`IS
    NULL`的关系查询子集中添加了警告。
- en: See also
  id: totrans-2741
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Warnings emitted when comparing objects with None values to relationships](migration_10.html#bug-3371)'
  id: totrans-2742
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[当将对象与空值比较时发出警告](migration_10.html#bug-3371)'
- en: 'References: [#3371](https://www.sqlalchemy.org/trac/ticket/3371)'
  id: totrans-2743
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3371](https://www.sqlalchemy.org/trac/ticket/3371)
- en: '**[orm] [bug]**'
  id: totrans-2744
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a regression caused by [#3061](https://www.sqlalchemy.org/trac/ticket/3061)
    where the NEVER_SET symbol could leak into a lazyload query, subsequent to the
    flush of a pending object. This would occur typically for a many-to-one relationship
    that does not use a simple “get” strategy. The good news is that the fix improves
    efficiency vs. 0.9, because we can now skip the SELECT statement entirely when
    we detect NEVER_SET symbols present in the parameters; prior to [#3061](https://www.sqlalchemy.org/trac/ticket/3061),
    we couldn’t discern if the None here were set or not.
  id: totrans-2745
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由[#3061](https://www.sqlalchemy.org/trac/ticket/3061)引起的回归，其中NEVER_SET符号可能会渗漏到延迟加载查询中，在挂起对象刷新后发生。这通常会发生在不使用简单的“get”策略的一对多关系中。好消息是，该修复提高了效率，因为我们现在可以在检测到参数中存在NEVER_SET符号时完全跳过SELECT语句；在[#3061](https://www.sqlalchemy.org/trac/ticket/3061)之前，我们无法判断这里的None是否已设置。
- en: 'References: [#3368](https://www.sqlalchemy.org/trac/ticket/3368)'
  id: totrans-2746
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3368](https://www.sqlalchemy.org/trac/ticket/3368)
- en: engine
  id: totrans-2747
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-2748
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Added the string value `"none"` to those accepted by the [`Pool.reset_on_return`](../core/pooling.html#sqlalchemy.pool.Pool.params.reset_on_return
    "sqlalchemy.pool.Pool") parameter as a synonym for `None`, so that string values
    can be used for all settings, allowing utilities like [`engine_from_config()`](../core/engines.html#sqlalchemy.engine_from_config
    "sqlalchemy.engine_from_config") to be usable without issue.
  id: totrans-2749
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将字符串值`"none"`添加到[`Pool.reset_on_return`](../core/pooling.html#sqlalchemy.pool.Pool.params.reset_on_return
    "sqlalchemy.pool.Pool")参数接受的值中，作为`None`的同义词，这样字符串值就可以用于所有设置，允许像[`engine_from_config()`](../core/engines.html#sqlalchemy.engine_from_config
    "sqlalchemy.engine_from_config")这样的实用程序无问题地可用。
- en: 'This change is also **backported** to: 0.9.10'
  id: totrans-2750
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回移**到：0.9.10
- en: 'References: [#3375](https://www.sqlalchemy.org/trac/ticket/3375)'
  id: totrans-2751
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3375](https://www.sqlalchemy.org/trac/ticket/3375)
- en: sql
  id: totrans-2752
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-2753
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where a straight SELECT EXISTS query would fail to assign the proper
    result type of Boolean to the result mapping, and instead would leak column types
    from within the query into the result map. This issue exists in 0.9 and earlier
    as well, however has less of an impact in those versions. In 1.0, due to [#918](https://www.sqlalchemy.org/trac/ticket/918)
    this becomes a regression in that we now rely upon the result mapping to be very
    accurate, else we can assign result-type processors to the wrong column. In all
    versions, this issue also has the effect that a simple EXISTS will not apply the
    Boolean type handler, leading to simple 1/0 values for backends without native
    boolean instead of True/False. The fix includes that an EXISTS columns argument
    will be anon-labeled like other column expressions; a similar fix is implemented
    for pure-boolean expressions like `not_(True())`.
  id: totrans-2754
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了直接的 SELECT EXISTS 查询无法将 Boolean 的正确结果类型分配给结果映射的问题，而是会将查询内部的列类型泄漏到结果映射中。这个问题在
    0.9 及更早版本中也存在，但在那些版本中影响较小。在 1.0 中，由于[#918](https://www.sqlalchemy.org/trac/ticket/918)，这成为了一个回归，因为我们现在依赖于结果映射非常准确，否则我们可能会将结果类型处理器分配给错误的列。在所有版本中，这个问题还有一个影响，即简单的
    EXISTS 不会应用 Boolean 类型处理程序，导致没有本地布尔值的后端的简单的 1/0 值而不是 True/False。修复包括 EXISTS 列参数将被匿名标记，就像其他列表达式一样；对纯布尔表达式（如
    `not_(True())`）也实现了类似的修复。
- en: 'References: [#3372](https://www.sqlalchemy.org/trac/ticket/3372)'
  id: totrans-2755
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3372](https://www.sqlalchemy.org/trac/ticket/3372)
- en: sqlite
  id: totrans-2756
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-2757
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Fixed a regression due to [#3282](https://www.sqlalchemy.org/trac/ticket/3282),
    where due to the fact that we attempt to assume the availability of ALTER when
    creating/dropping schemas, in the case of SQLite we simply said to not worry about
    foreign keys at all, since ALTER is not available, when creating and dropping
    tables. This meant that the sorting of tables was basically skipped in the case
    of SQLite, and for the vast majority of SQLite use cases, this is not an issue.
  id: totrans-2758
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由于[#3282](https://www.sqlalchemy.org/trac/ticket/3282)导致的一个回归，由于我们尝试假设在创建/删除模式时
    ALTER 可用，因此在 SQLite 的情况下，我们简单地说根本不必担心外键，因为在创建和删除表时 ALTER 不可用。这意味着在 SQLite 的情况下基本上跳过了表的排序，在绝大多数
    SQLite 使用情况下，这不是一个问题。
- en: However, users who were doing DROPs on SQLite with tables that contained data
    and with referential integrity turned on would then experience errors, as the
    dependency sorting *does* matter in the case of DROP with enforced constraints,
    when those tables have data (SQLite will still happily let you create foreign
    keys to nonexistent tables and drop tables referring to existing ones with constraints
    enabled, as long as there’s no data being referenced).
  id: totrans-2759
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 但是，对于启用了强制约束的带有数据的表在 SQLite 上执行 DROP 的用户将会遇到错误，因为在 DROP 时依赖排序确实很重要，当这些表具有数据时（SQLite
    仍然乐意让您创建对不存在表的外键并删除引用已存在表的具有启用约束的表，只要没有引用数据）。
- en: In order to maintain the new feature of [#3282](https://www.sqlalchemy.org/trac/ticket/3282)
    while still allowing a SQLite DROP operation to maintain ordering, we now do the
    sort with full FKs taken under consideration, and if we encounter an unresolvable
    cycle, only *then* do we forego attempting to sort the tables; we instead emit
    a warning and go with the unsorted list. If an environment needs both ordered
    DROPs *and* has foreign key cycles, then the warning notes they will need to restore
    the `use_alter` flag to their [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") and [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") objects so that just those objects will
    be omitted from the dependency sort.
  id: totrans-2760
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了保持 [#3282](https://www.sqlalchemy.org/trac/ticket/3282) 的新功能，同时仍允许 SQLite
    的 DROP 操作保持排序，我们现在考虑完整的外键进行排序，如果遇到无法解决的循环，*那么*我们放弃尝试对表进行排序；我们会发出警告并使用未排序的列表。如果一个环境既需要有序的
    DROP 操作 *又* 存在外键循环，那么警告指出他们需要将 [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") 和 [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") 对象的 `use_alter` 标志恢复，以便只有这些对象会被排除在依赖排序之外。
- en: See also
  id: totrans-2761
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[The use_alter flag on ForeignKeyConstraint is (usually) no longer needed](migration_10.html#feature-3282)
    - contains an updated note about SQLite.'
  id: totrans-2762
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[ForeignKeyConstraint 上的 use_alter 标志（通常）不再需要](migration_10.html#feature-3282)
    - 包含有关 SQLite 的更新说明。'
- en: 'References: [#3378](https://www.sqlalchemy.org/trac/ticket/3378)'
  id: totrans-2763
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3378](https://www.sqlalchemy.org/trac/ticket/3378)
- en: misc
  id: totrans-2764
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [firebird]**'
  id: totrans-2765
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [firebird]**'
- en: Fixed a regression due to [#3034](https://www.sqlalchemy.org/trac/ticket/3034)
    where limit/offset clauses were not properly interpreted by the Firebird dialect.
    Pull request courtesy effem-git.
  id: totrans-2766
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由于 [#3034](https://www.sqlalchemy.org/trac/ticket/3034) 导致的回归，导致 Firebird
    方言未正确解释 limit/offset 子句。感谢 effem-git 提交的拉取请求。
- en: 'References: [#3380](https://www.sqlalchemy.org/trac/ticket/3380)'
  id: totrans-2767
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3380](https://www.sqlalchemy.org/trac/ticket/3380)
- en: '**[bug] [firebird]**'
  id: totrans-2768
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [firebird]**'
- en: Fixed support for “literal_binds” mode when using limit/offset with Firebird,
    so that the values are again rendered inline when this is selected. Related to
    [#3034](https://www.sqlalchemy.org/trac/ticket/3034).
  id: totrans-2769
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用 Firebird 时在“literal_binds”模式下使用 limit/offset 时的支持，因此当选择此模式时，值再次以内联方式呈现。与
    [#3034](https://www.sqlalchemy.org/trac/ticket/3034) 相关。
- en: 'References: [#3381](https://www.sqlalchemy.org/trac/ticket/3381)'
  id: totrans-2770
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3381](https://www.sqlalchemy.org/trac/ticket/3381)
- en: 1.0.0
  id: totrans-2771
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.0.0
- en: 'Released: April 16, 2015'
  id: totrans-2772
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2015年4月16日
- en: orm
  id: totrans-2773
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-2774
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new argument [`Query.update.update_args`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update.params.update_args
    "sqlalchemy.orm.Query.update") which allows kw arguments such as `mysql_limit`
    to be passed to the underlying [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") construct. Pull request courtesy Amir Sadoughi.
  id: totrans-2775
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新参数 [`Query.update.update_args`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update.params.update_args
    "sqlalchemy.orm.Query.update")，允许传递 kw 参数，如 `mysql_limit` 到底层的 [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") 构造。感谢 Amir Sadoughi 提交的拉取请求。
- en: '**[orm] [bug]**'
  id: totrans-2776
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Identified an inconsistency when handling [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") to the same target more than once; it implicitly
    dedupes only in the case of a relationship join, and due to [#3233](https://www.sqlalchemy.org/trac/ticket/3233),
    in 1.0 a join to the same table twice behaves differently than 0.9 in that it
    no longer erroneously aliases. To help document this change, the verbiage regarding
    [#3233](https://www.sqlalchemy.org/trac/ticket/3233) in the migration notes has
    been generalized, and a warning has been added when [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") is called against the same target relationship more
    than once.
  id: totrans-2777
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 发现了处理多次对相同目标进行 [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") 时的不一致性；它仅在关系连接的情况下隐式去重，并且由于 [#3233](https://www.sqlalchemy.org/trac/ticket/3233)，在
    1.0 中，对同一张表进行两次连接的行为与 0.9 不同，不再错误地别名。为了帮助记录这一变化，迁移说明中关于 [#3233](https://www.sqlalchemy.org/trac/ticket/3233)
    的措辞已经泛化，并且在多次针对相同目标关系调用 [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") 时添加了警告。
- en: 'References: [#3367](https://www.sqlalchemy.org/trac/ticket/3367)'
  id: totrans-2778
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3367](https://www.sqlalchemy.org/trac/ticket/3367)
- en: '**[orm] [bug]**'
  id: totrans-2779
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Made a small improvement to the heuristics of relationship when determining
    remote side with semi-self-referential (e.g. two joined inh subclasses referring
    to each other), non-simple join conditions such that the parententity is taken
    into account and can reduce the need for using the `remote()` annotation; this
    can restore some cases that might have worked without the annotation prior to
    0.9.4 via [#2948](https://www.sqlalchemy.org/trac/ticket/2948).
  id: totrans-2780
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在确定半自引用关系的远程端时，对关系的启发式进行了小改进（例如，两个连接的继承子类相互引用），非简单的连接条件会考虑父实体并可以减少使用`remote()`注释的需要；这可以恢复一些在
    0.9.4 之前可能在没有注释的情况下工作的情况，参见[#2948](https://www.sqlalchemy.org/trac/ticket/2948)。
- en: 'References: [#3364](https://www.sqlalchemy.org/trac/ticket/3364)'
  id: totrans-2781
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3364](https://www.sqlalchemy.org/trac/ticket/3364)
- en: sql
  id: totrans-2782
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-2783
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: The topological sorting used to sort [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects and available via the [`MetaData.sorted_tables`](../core/metadata.html#sqlalchemy.schema.MetaData.sorted_tables
    "sqlalchemy.schema.MetaData.sorted_tables") collection will now produce a **deterministic**
    ordering; that is, the same ordering each time given a set of tables with particular
    names and dependencies. This is to help with comparison of DDL scripts and other
    use cases. The tables are sent to the topological sort sorted by name, and the
    topological sort itself will process the incoming data in an ordered fashion.
    Pull request courtesy Sebastian Bank.
  id: totrans-2784
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于对[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象进行排序的拓扑排序，并通过[`MetaData.sorted_tables`](../core/metadata.html#sqlalchemy.schema.MetaData.sorted_tables
    "sqlalchemy.schema.MetaData.sorted_tables")集合提供，现在将产生**确定性**的排序；也就是说，给定一组具有特定名称和依赖关系的表，每次都会产生相同的排序。这有助于比较
    DDL 脚本和其他用例。表按名称发送到拓扑排序，拓扑排序本身将以有序的方式处理传入的数据。感谢 Sebastian Bank 的拉取请求。
- en: See also
  id: totrans-2785
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[MetaData.sorted_tables accessor is “deterministic”](migration_10.html#feature-3084)'
  id: totrans-2786
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[MetaData.sorted_tables 访问器是“确定性”的](migration_10.html#feature-3084)'
- en: 'References: [#3084](https://www.sqlalchemy.org/trac/ticket/3084)'
  id: totrans-2787
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3084](https://www.sqlalchemy.org/trac/ticket/3084)
- en: '**[sql] [bug]**'
  id: totrans-2788
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where a [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object that used a naming convention would not properly
    work with pickle. The attribute was skipped leading to inconsistencies and failures
    if the unpickled [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object were used to base additional tables from.
  id: totrans-2789
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即使用命名约定的[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")对象在 pickle 时无法正常工作。属性被跳过，导致不一致性和失败，如果反序列化的[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")对象用于基于其他表的附加表。
- en: 'This change is also **backported** to: 0.9.10'
  id: totrans-2790
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.10
- en: 'References: [#3362](https://www.sqlalchemy.org/trac/ticket/3362)'
  id: totrans-2791
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3362](https://www.sqlalchemy.org/trac/ticket/3362)
- en: postgresql
  id: totrans-2792
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-2793
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed a long-standing bug where the [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") type as used with the psycopg2 dialect in conjunction
    with non-ascii values and `native_enum=False` would fail to decode return results
    properly. This stemmed from when the PG [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM") type used to be a standalone type without
    a “non native” option.
  id: totrans-2794
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个长期存在的 bug，即在 psycopg2 方言中与非 ASCII 值和`native_enum=False`一起使用[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum")类型时，无法正确解码返回结果。这源自于 PG [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM") 类型曾经是一个独立的类型，没有“非本地”选项。
- en: 'This change is also **backported** to: 0.9.10'
  id: totrans-2795
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.10
- en: 'References: [#3354](https://www.sqlalchemy.org/trac/ticket/3354)'
  id: totrans-2796
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3354](https://www.sqlalchemy.org/trac/ticket/3354)
- en: mssql
  id: totrans-2797
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-2798
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed a regression where the “last inserted id” mechanics would fail to store
    the correct value for MSSQL on an INSERT where the primary key value was present
    in the insert params before execution, as well as in the case where an INSERT
    from SELECT would state the target columns as column objects, instead of string
    keys.
  id: totrans-2799
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个回归问题，即“最后插入的 id”机制在 MSSQL 上执行 INSERT 时会失败，如果主键值在执行之前的插入参数中存在，以及在从 SELECT
    进行的 INSERT 中，目标列被声明为列对象而不是字符串键时，会存储不正确的值。
- en: 'References: [#3360](https://www.sqlalchemy.org/trac/ticket/3360)'
  id: totrans-2800
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3360](https://www.sqlalchemy.org/trac/ticket/3360)
- en: '**[mssql] [bug]**'
  id: totrans-2801
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Using the `Binary` constructor now present in pymssql rather than patching one
    in. Pull request courtesy Ramiro Morales.
  id: totrans-2802
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在使用 pymssql 中的`Binary`构造函数，而不是打补丁。感谢 Ramiro Morales 的拉取请求。
- en: tests
  id: totrans-2803
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [bug]**'
  id: totrans-2804
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[测试] [错误]**'
- en: Fixed the pathing used when tests run; for sqla_nose.py and py.test, the “./lib”
    prefix is again inserted at the head of sys.path but only if sys.flags.no_user_site
    isn’t set; this makes it act just like the way Python puts “.” in the current
    path by default. For tox, we are setting the PYTHONNOUSERSITE flag now.
  id: totrans-2805
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了测试运行时使用的路径；对于 sqla_nose.py 和 py.test，如果未设置 sys.flags.no_user_site，则再次在 sys.path
    的开头插入“./lib”前缀；这使其的行为就像 Python 默认情况下将“.”放在当前路径一样。对于 tox，我们现在设置了 PYTHONNOUSERSITE
    标志。
- en: 'References: [#3356](https://www.sqlalchemy.org/trac/ticket/3356)'
  id: totrans-2806
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3356](https://www.sqlalchemy.org/trac/ticket/3356)
- en: orm
  id: totrans-2807
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM
- en: '**[orm] [feature]**'
  id: totrans-2808
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [功能]**'
- en: Added new argument [`Query.update.update_args`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update.params.update_args
    "sqlalchemy.orm.Query.update") which allows kw arguments such as `mysql_limit`
    to be passed to the underlying [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") construct. Pull request courtesy Amir Sadoughi.
  id: totrans-2809
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新参数[`Query.update.update_args`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update.params.update_args
    "sqlalchemy.orm.Query.update")，允许传递诸如`mysql_limit`之类的关键字参数到底层的[`Update`](../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update")构造。感谢 Amir Sadoughi 的拉取请求。
- en: '**[orm] [bug]**'
  id: totrans-2810
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [错误]**'
- en: Identified an inconsistency when handling [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") to the same target more than once; it implicitly
    dedupes only in the case of a relationship join, and due to [#3233](https://www.sqlalchemy.org/trac/ticket/3233),
    in 1.0 a join to the same table twice behaves differently than 0.9 in that it
    no longer erroneously aliases. To help document this change, the verbiage regarding
    [#3233](https://www.sqlalchemy.org/trac/ticket/3233) in the migration notes has
    been generalized, and a warning has been added when [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") is called against the same target relationship more
    than once.
  id: totrans-2811
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 发现处理多次对同一目标进行[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")时存在不一致性；它仅在关系连接的情况下隐式去重，并且由于[#3233](https://www.sqlalchemy.org/trac/ticket/3233)，在
    1.0 中两次连接到同一表的行为与 0.9 不同，不再错误地别名。为了帮助记录这一变化，在迁移说明中关于[#3233](https://www.sqlalchemy.org/trac/ticket/3233)的措辞已经被概括，并且在多次针对同一目标关系调用[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")时添加了警告。
- en: 'References: [#3367](https://www.sqlalchemy.org/trac/ticket/3367)'
  id: totrans-2812
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3367](https://www.sqlalchemy.org/trac/ticket/3367)
- en: '**[orm] [bug]**'
  id: totrans-2813
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [错误]**'
- en: Made a small improvement to the heuristics of relationship when determining
    remote side with semi-self-referential (e.g. two joined inh subclasses referring
    to each other), non-simple join conditions such that the parententity is taken
    into account and can reduce the need for using the `remote()` annotation; this
    can restore some cases that might have worked without the annotation prior to
    0.9.4 via [#2948](https://www.sqlalchemy.org/trac/ticket/2948).
  id: totrans-2814
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在确定半自引用关系的远程端时，改进了关系的启发式算法，考虑到父实体并且可以减少使用`remote()`注释的需要；这可以恢复一些在 0.9.4 之前可能在没有注释的情况下工作的情况，通过[#2948](https://www.sqlalchemy.org/trac/ticket/2948)。
- en: 'References: [#3364](https://www.sqlalchemy.org/trac/ticket/3364)'
  id: totrans-2815
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3364](https://www.sqlalchemy.org/trac/ticket/3364)
- en: sql
  id: totrans-2816
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SQL
- en: '**[sql] [feature]**'
  id: totrans-2817
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL] [功能]**'
- en: The topological sorting used to sort [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects and available via the [`MetaData.sorted_tables`](../core/metadata.html#sqlalchemy.schema.MetaData.sorted_tables
    "sqlalchemy.schema.MetaData.sorted_tables") collection will now produce a **deterministic**
    ordering; that is, the same ordering each time given a set of tables with particular
    names and dependencies. This is to help with comparison of DDL scripts and other
    use cases. The tables are sent to the topological sort sorted by name, and the
    topological sort itself will process the incoming data in an ordered fashion.
    Pull request courtesy Sebastian Bank.
  id: totrans-2818
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于对 [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    对象进行排序的拓扑排序，并通过 [`MetaData.sorted_tables`](../core/metadata.html#sqlalchemy.schema.MetaData.sorted_tables
    "sqlalchemy.schema.MetaData.sorted_tables") 集合提供，现在将产生一个**确定性**排序；也就是说，给定一组具有特定名称和依赖关系的表，每次都会产生相同的顺序。这有助于比较
    DDL 脚本和其他用例。表按名称发送到拓扑排序，拓扑排序本身将以有序的方式处理传入的数据。感谢 Sebastian Bank 的拉取请求。
- en: See also
  id: totrans-2819
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[MetaData.sorted_tables accessor is “deterministic”](migration_10.html#feature-3084)'
  id: totrans-2820
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[MetaData.sorted_tables accessor is “deterministic”](migration_10.html#feature-3084)'
- en: 'References: [#3084](https://www.sqlalchemy.org/trac/ticket/3084)'
  id: totrans-2821
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3084](https://www.sqlalchemy.org/trac/ticket/3084)
- en: '**[sql] [bug]**'
  id: totrans-2822
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where a [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object that used a naming convention would not properly
    work with pickle. The attribute was skipped leading to inconsistencies and failures
    if the unpickled [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object were used to base additional tables from.
  id: totrans-2823
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用命名约定的 [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    对象无法正确与 pickle 配合使用的问题。属性被跳过，导致如果从未拾取的 [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") 对象派生其他表，则会出现不一致和失败。
- en: 'This change is also **backported** to: 0.9.10'
  id: totrans-2824
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.10
- en: 'References: [#3362](https://www.sqlalchemy.org/trac/ticket/3362)'
  id: totrans-2825
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3362](https://www.sqlalchemy.org/trac/ticket/3362)
- en: postgresql
  id: totrans-2826
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-2827
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed a long-standing bug where the [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") type as used with the psycopg2 dialect in conjunction
    with non-ascii values and `native_enum=False` would fail to decode return results
    properly. This stemmed from when the PG [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM") type used to be a standalone type without
    a “non native” option.
  id: totrans-2828
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个长期存在的 bug，即在与 psycopg2 方言一起使用时，[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") 类型与非 ASCII 值和 `native_enum=False` 结合使用时无法正确解码返回结果。这源于
    PG [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM "sqlalchemy.dialects.postgresql.ENUM")
    类型曾经是一个独立的类型，没有“非本地”选项。
- en: 'This change is also **backported** to: 0.9.10'
  id: totrans-2829
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.10
- en: 'References: [#3354](https://www.sqlalchemy.org/trac/ticket/3354)'
  id: totrans-2830
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3354](https://www.sqlalchemy.org/trac/ticket/3354)
- en: mssql
  id: totrans-2831
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-2832
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed a regression where the “last inserted id” mechanics would fail to store
    the correct value for MSSQL on an INSERT where the primary key value was present
    in the insert params before execution, as well as in the case where an INSERT
    from SELECT would state the target columns as column objects, instead of string
    keys.
  id: totrans-2833
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个回归，即“最后插入的 id”机制在 MSSQL 上在插入时未能存储正确的值，当主键值在执行之前出现在插入参数中时，以及在从 SELECT 插入时，目标列被声明为列对象而不是字符串键的情况下。
- en: 'References: [#3360](https://www.sqlalchemy.org/trac/ticket/3360)'
  id: totrans-2834
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3360](https://www.sqlalchemy.org/trac/ticket/3360)
- en: '**[mssql] [bug]**'
  id: totrans-2835
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Using the `Binary` constructor now present in pymssql rather than patching one
    in. Pull request courtesy Ramiro Morales.
  id: totrans-2836
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在使用 pymssql 中现有的 `Binary` 构造函数，而不是打补丁。感谢 Ramiro Morales 的拉取请求。
- en: tests
  id: totrans-2837
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: tests
- en: '**[tests] [bug]**'
  id: totrans-2838
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[tests] [bug]**'
- en: Fixed the pathing used when tests run; for sqla_nose.py and py.test, the “./lib”
    prefix is again inserted at the head of sys.path but only if sys.flags.no_user_site
    isn’t set; this makes it act just like the way Python puts “.” in the current
    path by default. For tox, we are setting the PYTHONNOUSERSITE flag now.
  id: totrans-2839
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了测试运行时使用的路径；对于 sqla_nose.py 和 py.test，再次在 sys.path 的开头插入“./lib”前缀，但仅当 sys.flags.no_user_site
    未设置时；这使其表现得就像 Python 默认将“.”放在当前路径中一样。对于 tox，我们现在设置了 PYTHONNOUSERSITE 标志。
- en: 'References: [#3356](https://www.sqlalchemy.org/trac/ticket/3356)'
  id: totrans-2840
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3356](https://www.sqlalchemy.org/trac/ticket/3356)
- en: 1.0.0b5
  id: totrans-2841
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.0.0b5
- en: 'Released: April 3, 2015'
  id: totrans-2842
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2015年4月3日
- en: orm
  id: totrans-2843
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-2844
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where the state tracking within multiple, nested [`Session.begin_nested()`](../orm/session_api.html#sqlalchemy.orm.Session.begin_nested
    "sqlalchemy.orm.Session.begin_nested") operations would fail to propagate the
    “dirty” flag for an object that had been updated within the inner savepoint, such
    that if the enclosing savepoint were rolled back, the object would not be part
    of the state that was expired and therefore reverted to its database state.
  id: totrans-2845
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，在多个嵌套的[`Session.begin_nested()`](../orm/session_api.html#sqlalchemy.orm.Session.begin_nested
    "sqlalchemy.orm.Session.begin_nested")操作中，状态跟踪在内部保存点中更新的对象的“dirty”标志未能传播，因此，如果回滚封闭保存点，则对象将不会成为过期状态的一部分，因此将恢复为其数据库状态。
- en: 'This change is also **backported** to: 0.9.10'
  id: totrans-2846
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.10
- en: 'References: [#3352](https://www.sqlalchemy.org/trac/ticket/3352)'
  id: totrans-2847
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3352](https://www.sqlalchemy.org/trac/ticket/3352)
- en: '**[orm] [bug]**'
  id: totrans-2848
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: '[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    doesn’t support joins, subselects, or special FROM clauses when using the [`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update") or [`Query.delete()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.delete
    "sqlalchemy.orm.Query.delete") methods; instead of silently ignoring these fields
    if methods like [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") or [`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from") has been called, an error is raised. In 0.9.10
    this only emits a warning.'
  id: totrans-2849
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用[`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update")或[`Query.delete()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.delete
    "sqlalchemy.orm.Query.delete")方法时，[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")不支持连接、子选择或特殊的FROM子句；如果调用了像[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")或[`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from")这样的方法，而不是在静默中忽略这些字段，将引发错误。在0.9.10中，这只会发出警告。
- en: 'References: [#3349](https://www.sqlalchemy.org/trac/ticket/3349)'
  id: totrans-2850
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3349](https://www.sqlalchemy.org/trac/ticket/3349)
- en: '**[orm] [bug]**'
  id: totrans-2851
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: 'Added a list() call around a weak dictionary used within the commit phase of
    the session, which without it could cause a “dictionary changed size during iter”
    error if garbage collection interacted within the process. Change was introduced
    by #3139.'
  id: totrans-2852
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在会话的提交阶段中，对一个弱字典进行了list()调用，如果没有它，可能会在进程中与垃圾回收交互时引发“dictionary changed size
    during iter”错误。此更改由＃3139引入。
- en: '**[orm] [bug]**'
  id: totrans-2853
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a bug related to “nested” inner join eager loading, which exists in 0.9
    as well but is more of a regression in 1.0 due to [#3008](https://www.sqlalchemy.org/trac/ticket/3008)
    which turns on “nested” by default, such that a joined eager load that travels
    across sibling paths from a common ancestor using innerjoin=True will correctly
    splice each “innerjoin” sibling into the appropriate part of the join, when a
    series of inner/outer joins are mixed together.
  id: totrans-2854
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '修复了与“嵌套”内连接贪婪加载相关的bug，在0.9中也存在，但在1.0中更像是一个回归，因为[#3008](https://www.sqlalchemy.org/trac/ticket/3008)默认打开了“嵌套”，这样，一个跨越共同祖先的兄弟路径的连接贪婪加载将正确地将每个“innerjoin”兄弟拼接到连接的适当部分，当一系列内部/外部连接混合在一起时。 '
- en: 'References: [#3347](https://www.sqlalchemy.org/trac/ticket/3347)'
  id: totrans-2855
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3347](https://www.sqlalchemy.org/trac/ticket/3347)
- en: sql
  id: totrans-2856
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-2857
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The warning emitted by the unicode type for a non-unicode type has been liberalized
    to warn for values that aren’t even string values, such as integers; previously,
    the updated warning system of 1.0 made use of string formatting operations which
    would raise an internal TypeError. While these cases should ideally raise totally,
    some backends like SQLite and MySQL do accept them and are potentially in use
    by legacy code, not to mention that they will always pass through if unicode conversion
    is turned off for the target backend.
  id: totrans-2858
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于非Unicode类型的Unicode类型发出的警告已经放宽，以便对不是字符串值的值发出警告，例如整数；以前，1.0的更新警告系统使用了字符串格式化操作，这将引发内部TypeError。虽然这些情况理想情况下应该完全引发错误，但一些后端，如SQLite和MySQL确实接受它们，并且可能被传统代码使用，更不用说如果目标后端关闭了Unicode转换，它们将始终通过。
- en: 'References: [#3346](https://www.sqlalchemy.org/trac/ticket/3346)'
  id: totrans-2859
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3346](https://www.sqlalchemy.org/trac/ticket/3346)
- en: postgresql
  id: totrans-2860
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-2861
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug where updated PG index reflection as a result of [#3184](https://www.sqlalchemy.org/trac/ticket/3184)
    would cause index operations to fail on PostgreSQL versions 8.4 and earlier. The
    enhancements are now disabled when using an older version of PostgreSQL.
  id: totrans-2862
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，其中更新的 PG 索引反映结果 [#3184](https://www.sqlalchemy.org/trac/ticket/3184)
    会导致 PostgreSQL 版本 8.4 及更早版本的索引操作失败。当使用旧版本的 PostgreSQL 时，现在已禁用了这些增强功能。
- en: 'References: [#3343](https://www.sqlalchemy.org/trac/ticket/3343)'
  id: totrans-2863
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3343](https://www.sqlalchemy.org/trac/ticket/3343)
- en: orm
  id: totrans-2864
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-2865
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where the state tracking within multiple, nested [`Session.begin_nested()`](../orm/session_api.html#sqlalchemy.orm.Session.begin_nested
    "sqlalchemy.orm.Session.begin_nested") operations would fail to propagate the
    “dirty” flag for an object that had been updated within the inner savepoint, such
    that if the enclosing savepoint were rolled back, the object would not be part
    of the state that was expired and therefore reverted to its database state.
  id: totrans-2866
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，其中在多个嵌套的 [`Session.begin_nested()`](../orm/session_api.html#sqlalchemy.orm.Session.begin_nested
    "sqlalchemy.orm.Session.begin_nested") 操作内的状态跟踪将无法传播对象的“脏”标志，该对象已在内部保存点中更新，因此，如果回滚了封闭的保存点，则该对象将不会成为已过期状态的一部分，因此将恢复到其数据库状态。
- en: 'This change is also **backported** to: 0.9.10'
  id: totrans-2867
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.10
- en: 'References: [#3352](https://www.sqlalchemy.org/trac/ticket/3352)'
  id: totrans-2868
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3352](https://www.sqlalchemy.org/trac/ticket/3352)
- en: '**[orm] [bug]**'
  id: totrans-2869
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: '[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    doesn’t support joins, subselects, or special FROM clauses when using the [`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update") or [`Query.delete()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.delete
    "sqlalchemy.orm.Query.delete") methods; instead of silently ignoring these fields
    if methods like [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") or [`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from") has been called, an error is raised. In 0.9.10
    this only emits a warning.'
  id: totrans-2870
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    在使用 [`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update") 或 [`Query.delete()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.delete
    "sqlalchemy.orm.Query.delete") 方法时不支持连接、子查询或特殊的 FROM 子句；如果已调用 [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") 或 [`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from") 等方法，而不是在这些字段上静默地忽略这些字段，则会引发错误。在 0.9.10 中，这只会发出警告。'
- en: 'References: [#3349](https://www.sqlalchemy.org/trac/ticket/3349)'
  id: totrans-2871
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3349](https://www.sqlalchemy.org/trac/ticket/3349)
- en: '**[orm] [bug]**'
  id: totrans-2872
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: 'Added a list() call around a weak dictionary used within the commit phase of
    the session, which without it could cause a “dictionary changed size during iter”
    error if garbage collection interacted within the process. Change was introduced
    by #3139.'
  id: totrans-2873
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '在会话的提交阶段中的弱字典周围添加了一个 list() 调用，如果垃圾收集与进程交互，而没有它，则可能会导致“迭代期间字典大小已更改”错误。该更改由
    #3139 引入。'
- en: '**[orm] [bug]**'
  id: totrans-2874
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a bug related to “nested” inner join eager loading, which exists in 0.9
    as well but is more of a regression in 1.0 due to [#3008](https://www.sqlalchemy.org/trac/ticket/3008)
    which turns on “nested” by default, such that a joined eager load that travels
    across sibling paths from a common ancestor using innerjoin=True will correctly
    splice each “innerjoin” sibling into the appropriate part of the join, when a
    series of inner/outer joins are mixed together.
  id: totrans-2875
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了与“嵌套”内连接急切加载相关的 bug，该 bug 在 0.9 中也存在，但由于 [#3008](https://www.sqlalchemy.org/trac/ticket/3008)
    而在 1.0 中更是一种退化，默认情况下启用“嵌套”，因此，当使用 innerjoin=True 的连接急切加载从共同祖先跨越兄弟路径时，将每个“innerjoin”兄弟正确地拼接到连接的适当部分中，当一系列的内/外连接混合在一起时。
- en: 'References: [#3347](https://www.sqlalchemy.org/trac/ticket/3347)'
  id: totrans-2876
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3347](https://www.sqlalchemy.org/trac/ticket/3347)
- en: sql
  id: totrans-2877
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-2878
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The warning emitted by the unicode type for a non-unicode type has been liberalized
    to warn for values that aren’t even string values, such as integers; previously,
    the updated warning system of 1.0 made use of string formatting operations which
    would raise an internal TypeError. While these cases should ideally raise totally,
    some backends like SQLite and MySQL do accept them and are potentially in use
    by legacy code, not to mention that they will always pass through if unicode conversion
    is turned off for the target backend.
  id: totrans-2879
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '对于非 Unicode 类型的 unicode 类型发出的警告已放宽，以警告不是字符串值的值，例如整数；以前，1.0 的更新警告系统使用了字符串格式化操作，这会引发内部
    TypeError。虽然这些情况理想情况下应完全引发，但一些后端（如 SQLite 和 MySQL）确实接受它们，并且可能在遗留代码中使用，更不用说如果目标后端关闭了
    unicode 转换，它们将始终通过。 '
- en: 'References: [#3346](https://www.sqlalchemy.org/trac/ticket/3346)'
  id: totrans-2880
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3346](https://www.sqlalchemy.org/trac/ticket/3346)
- en: postgresql
  id: totrans-2881
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-2882
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug where updated PG index reflection as a result of [#3184](https://www.sqlalchemy.org/trac/ticket/3184)
    would cause index operations to fail on PostgreSQL versions 8.4 and earlier. The
    enhancements are now disabled when using an older version of PostgreSQL.
  id: totrans-2883
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即更新了 [#3184](https://www.sqlalchemy.org/trac/ticket/3184) 导致的 PG 索引反射会导致在
    PostgreSQL 8.4 及更早版本上索引操作失败的 bug。当使用较旧版本的 PostgreSQL 时，现在已禁用了这些增强功能。
- en: 'References: [#3343](https://www.sqlalchemy.org/trac/ticket/3343)'
  id: totrans-2884
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3343](https://www.sqlalchemy.org/trac/ticket/3343)
- en: 1.0.0b4
  id: totrans-2885
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.0.0b4
- en: 'Released: March 29, 2015'
  id: totrans-2886
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2015年3月29日
- en: sql
  id: totrans-2887
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-2888
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in new “label resolution” feature of [#2992](https://www.sqlalchemy.org/trac/ticket/2992)
    where a label that was anonymous, then labeled again with a name, would fail to
    be locatable via a textual label. This situation occurs naturally when a mapped
    [`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property "sqlalchemy.orm.column_property")
    is given an explicit label in a query.
  id: totrans-2889
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [#2992](https://www.sqlalchemy.org/trac/ticket/2992) 中新的“标签解析”功能中的 bug，其中一个匿名标签，然后再次用名称标记时，无法通过文本标签定位。当在查询中为映射的
    [`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property "sqlalchemy.orm.column_property")
    显式地指定一个标签时，自然会发生这种情况。
- en: 'References: [#3340](https://www.sqlalchemy.org/trac/ticket/3340)'
  id: totrans-2890
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3340](https://www.sqlalchemy.org/trac/ticket/3340)
- en: '**[sql] [bug]**'
  id: totrans-2891
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in new “label resolution” feature of [#2992](https://www.sqlalchemy.org/trac/ticket/2992)
    where the string label placed in the order_by() or group_by() of a statement would
    place higher priority on the name as found inside the FROM clause instead of a
    more locally available name inside the columns clause.
  id: totrans-2892
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [#2992](https://www.sqlalchemy.org/trac/ticket/2992) 中新的“标签解析”功能的 bug，其中在语句的
    order_by() 或 group_by() 中放置的字符串标签会更优先于在 FROM 子句内找到的名称，而不是更本地可用的列子句内的名称。
- en: 'References: [#3335](https://www.sqlalchemy.org/trac/ticket/3335)'
  id: totrans-2893
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3335](https://www.sqlalchemy.org/trac/ticket/3335)
- en: schema
  id: totrans-2894
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 架构
- en: '**[schema] [feature]**'
  id: totrans-2895
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema] [feature]**'
- en: The “auto-attach” feature of constraints such as [`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") and [`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") has been further enhanced such that when
    the constraint is associated with non-table-bound [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects, the constraint will set up event listeners
    with the columns themselves such that the constraint auto attaches at the same
    time the columns are associated with the table. This in particular helps in some
    edge cases in declarative but is also of general use.
  id: totrans-2896
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对约束的“自动附加”功能（如 [`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") 和 [`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint")）进行了进一步增强，使得当约束与非绑定到表的 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 对象相关联时，约束会为列本身设置事件监听器，以便在将列与表相关联时约束自动附加。这在声明式中特别有用，但也是普遍适用的。
- en: See also
  id: totrans-2897
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Constraints referring to unattached Columns can auto-attach to the Table when
    their referred columns are attached](migration_10.html#change-3341)'
  id: totrans-2898
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[当引用未连接的列时，约束可以在其引用的列附加到表时自动附加](migration_10.html#change-3341)'
- en: 'References: [#3341](https://www.sqlalchemy.org/trac/ticket/3341)'
  id: totrans-2899
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3341](https://www.sqlalchemy.org/trac/ticket/3341)
- en: mysql
  id: totrans-2900
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug] [pymysql]**'
  id: totrans-2901
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug] [pymysql]**'
- en: Fixed unicode support for PyMySQL when using an “executemany” operation with
    unicode parameters. SQLAlchemy now passes both the statement as well as the bound
    parameters as unicode objects, as PyMySQL generally uses string interpolation
    internally to produce the final statement, and in the case of executemany does
    the “encode” step only on the final statement.
  id: totrans-2902
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了PyMySQL在使用“executemany”操作时对Unicode支持的问题，当使用Unicode参数时，SQLAlchemy现在将语句和绑定参数都作为Unicode对象传递，因为PyMySQL通常在内部使用字符串插值来生成最终语句，并且在executemany情况下仅对最终语句执行“encode”步骤。
- en: 'This change is also **backported** to: 0.9.10'
  id: totrans-2903
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.9.10
- en: 'References: [#3337](https://www.sqlalchemy.org/trac/ticket/3337)'
  id: totrans-2904
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3337](https://www.sqlalchemy.org/trac/ticket/3337)
- en: mssql
  id: totrans-2905
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug] [firebird] [oracle] [sybase]**'
  id: totrans-2906
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug] [firebird] [oracle] [sybase]**'
- en: Turned off the “simple order by” flag on the MSSQL, Oracle dialects; this is
    the flag that per [#2992](https://www.sqlalchemy.org/trac/ticket/2992) causes
    an order by or group by an expression that’s also in the columns clause to be
    copied by label, even if referenced as the expression object. The behavior for
    MSSQL is now the old behavior that copies the whole expression in by default,
    as MSSQL can be picky on these particularly in GROUP BY expressions. The flag
    is also turned off defensively for the Firebird and Sybase dialects.
  id: totrans-2907
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关闭了MSSQL、Oracle方言上的“简单排序”标志；这是根据[#2992](https://www.sqlalchemy.org/trac/ticket/2992)的规定，导致在表达式中有一个在列子句中也被引用的order
    by或group by时，即使被引用为表达式对象，也会被复制为标签。对于MSSQL，现在的行为是默认情况下复制整个表达式，因为MSSQL在这些情况下可能会对GROUP
    BY表达式特别挑剔。该标志也被防御性地关闭了Firebird和Sybase方言。
- en: Note
  id: totrans-2908
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: this resolution was incorrect, please see version 1.0.2 for a rework of this
    resolution.
  id: totrans-2909
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个解决方案是错误的，请查看版本1.0.2以重新制定这个解决方案。
- en: 'References: [#3338](https://www.sqlalchemy.org/trac/ticket/3338)'
  id: totrans-2910
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3338](https://www.sqlalchemy.org/trac/ticket/3338)
- en: sql
  id: totrans-2911
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-2912
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in new “label resolution” feature of [#2992](https://www.sqlalchemy.org/trac/ticket/2992)
    where a label that was anonymous, then labeled again with a name, would fail to
    be locatable via a textual label. This situation occurs naturally when a mapped
    [`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property "sqlalchemy.orm.column_property")
    is given an explicit label in a query.
  id: totrans-2913
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[#2992](https://www.sqlalchemy.org/trac/ticket/2992)中新“标签解析”功能中的错误，其中一个匿名标签，然后再次使用名称标记，将无法通过文本标签定位。当在查询中为映射的[`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property")给定一个显式标签时，这种情况自然发生。
- en: 'References: [#3340](https://www.sqlalchemy.org/trac/ticket/3340)'
  id: totrans-2914
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3340](https://www.sqlalchemy.org/trac/ticket/3340)
- en: '**[sql] [bug]**'
  id: totrans-2915
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in new “label resolution” feature of [#2992](https://www.sqlalchemy.org/trac/ticket/2992)
    where the string label placed in the order_by() or group_by() of a statement would
    place higher priority on the name as found inside the FROM clause instead of a
    more locally available name inside the columns clause.
  id: totrans-2916
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[#2992](https://www.sqlalchemy.org/trac/ticket/2992)中新“标签解析”功能中的错误，其中在语句的order_by()或group_by()中放置的字符串标签会更优先考虑在FROM子句中找到的名称，而不是在列子句中更容易找到的名称。
- en: 'References: [#3335](https://www.sqlalchemy.org/trac/ticket/3335)'
  id: totrans-2917
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3335](https://www.sqlalchemy.org/trac/ticket/3335)
- en: schema
  id: totrans-2918
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: schema
- en: '**[schema] [feature]**'
  id: totrans-2919
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema] [feature]**'
- en: The “auto-attach” feature of constraints such as [`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") and [`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") has been further enhanced such that when
    the constraint is associated with non-table-bound [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects, the constraint will set up event listeners
    with the columns themselves such that the constraint auto attaches at the same
    time the columns are associated with the table. This in particular helps in some
    edge cases in declarative but is also of general use.
  id: totrans-2920
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于[`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint")和[`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint")等约束的“自动附加”功能已进一步增强，以便当约束与非绑定到表的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象相关联时，约束将与列本身设置事件侦听器，以便约束在与表关联的同时自动附加。这特别有助于一些边缘情况下的声明式，但也是一般用途。
- en: See also
  id: totrans-2921
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Constraints referring to unattached Columns can auto-attach to the Table when
    their referred columns are attached](migration_10.html#change-3341)'
  id: totrans-2922
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[当引用的列被附加时，引用未附加的列的约束可以自动附加到表](migration_10.html#change-3341)'
- en: 'References: [#3341](https://www.sqlalchemy.org/trac/ticket/3341)'
  id: totrans-2923
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3341](https://www.sqlalchemy.org/trac/ticket/3341)
- en: mysql
  id: totrans-2924
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug] [pymysql]**'
  id: totrans-2925
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug] [pymysql]**'
- en: Fixed unicode support for PyMySQL when using an “executemany” operation with
    unicode parameters. SQLAlchemy now passes both the statement as well as the bound
    parameters as unicode objects, as PyMySQL generally uses string interpolation
    internally to produce the final statement, and in the case of executemany does
    the “encode” step only on the final statement.
  id: totrans-2926
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 PyMySQL 在使用带有 unicode 参数的“executemany”操作时的 unicode 支持。现在 SQLAlchemy 现在将语句和绑定参数都作为
    unicode 对象传递，因为 PyMySQL 通常在内部使用字符串插值来生成最终语句，并且在 executemany 的情况下仅在最终语句上执行“encode”步骤。
- en: 'This change is also **backported** to: 0.9.10'
  id: totrans-2927
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.9.10
- en: 'References: [#3337](https://www.sqlalchemy.org/trac/ticket/3337)'
  id: totrans-2928
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3337](https://www.sqlalchemy.org/trac/ticket/3337)
- en: mssql
  id: totrans-2929
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug] [firebird] [oracle] [sybase]**'
  id: totrans-2930
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug] [firebird] [oracle] [sybase]**'
- en: Turned off the “simple order by” flag on the MSSQL, Oracle dialects; this is
    the flag that per [#2992](https://www.sqlalchemy.org/trac/ticket/2992) causes
    an order by or group by an expression that’s also in the columns clause to be
    copied by label, even if referenced as the expression object. The behavior for
    MSSQL is now the old behavior that copies the whole expression in by default,
    as MSSQL can be picky on these particularly in GROUP BY expressions. The flag
    is also turned off defensively for the Firebird and Sybase dialects.
  id: totrans-2931
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 MSSQL、Oracle 方言上关闭了“简单排序”标志；这个标志根据[#2992](https://www.sqlalchemy.org/trac/ticket/2992)导致在表达式也在列子句中的
    order by 或 group by 被复制为标签，即使被引用为表达式对象。对于 MSSQL，现在的行为是默认情况下复制整个表达式，因为 MSSQL 在
    GROUP BY 表达式中可能会挑剔。该标志也被防御性地关闭了 Firebird 和 Sybase 方言。
- en: Note
  id: totrans-2932
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: this resolution was incorrect, please see version 1.0.2 for a rework of this
    resolution.
  id: totrans-2933
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个解决方案是不正确的，请查看版本 1.0.2 进行重新处理。
- en: 'References: [#3338](https://www.sqlalchemy.org/trac/ticket/3338)'
  id: totrans-2934
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3338](https://www.sqlalchemy.org/trac/ticket/3338)
- en: 1.0.0b3
  id: totrans-2935
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.0.0b3
- en: 'Released: March 20, 2015'
  id: totrans-2936
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2015年3月20日
- en: mysql
  id: totrans-2937
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-2938
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: 'Repaired the commit for issue #2771 which was inadvertently commented out.'
  id: totrans-2939
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '修复了无意中被注释掉的问题 #2771 的提交。'
- en: 'References: [#2771](https://www.sqlalchemy.org/trac/ticket/2771)'
  id: totrans-2940
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2771](https://www.sqlalchemy.org/trac/ticket/2771)
- en: mysql
  id: totrans-2941
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-2942
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: 'Repaired the commit for issue #2771 which was inadvertently commented out.'
  id: totrans-2943
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '修复了无意中被注释掉的问题 #2771 的提交。'
- en: 'References: [#2771](https://www.sqlalchemy.org/trac/ticket/2771)'
  id: totrans-2944
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2771](https://www.sqlalchemy.org/trac/ticket/2771)
- en: 1.0.0b2
  id: totrans-2945
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.0.0b2
- en: 'Released: March 20, 2015'
  id: totrans-2946
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2015年3月20日
- en: orm
  id: totrans-2947
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-2948
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed unexpected use regression from pullreq github:137 where Py2K unicode literals
    (e.g. `u""`) would not be accepted by the [`relationship.cascade`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.cascade
    "sqlalchemy.orm.relationship") option. Pull request courtesy Julien Castets.
  id: totrans-2949
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了从 pullreq github:137 中出现的意外使用回归，其中 Py2K unicode 文字（例如`u""`）不会被[`relationship.cascade`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.cascade
    "sqlalchemy.orm.relationship")选项接受。感谢 Julien Castets 提交的拉取请求。
- en: 'References: [#3327](https://www.sqlalchemy.org/trac/ticket/3327)'
  id: totrans-2950
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3327](https://www.sqlalchemy.org/trac/ticket/3327)
- en: orm declarative
  id: totrans-2951
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm declarative
- en: '**[orm] [declarative] [change]**'
  id: totrans-2952
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [change]**'
- en: 'Loosened some restrictions that were added to `@declared_attr` objects, such
    that they were prevented from being called outside of the declarative process;
    this is related to the enhancements of #3150 which allow `@declared_attr` to return
    a value that is cached based on the current class as it’s being configured. The
    exception raise has been removed, and the behavior changed so that outside of
    the declarative process, the function decorated by `@declared_attr` is called
    every time just like a regular `@property`, without using any caching, as none
    is available at this stage.'
  id: totrans-2953
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '放宽了对 `@declared_attr` 对象的一些限制，使得它们可以在声明过程之外被调用；这与 #3150 的增强相关，允许 `@declared_attr`
    返回一个基于当前类的缓存值，因为它正在被配置。异常抛出已被移除，行为已更改，使得在声明过程之外，由 `@declared_attr` 装饰的函数每次都像普通的
    `@property` 一样被调用，而不使用任何缓存，因为在这个阶段没有可用的缓存。'
- en: 'References: [#3331](https://www.sqlalchemy.org/trac/ticket/3331)'
  id: totrans-2954
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3331](https://www.sqlalchemy.org/trac/ticket/3331)
- en: engine
  id: totrans-2955
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-2956
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: The “auto close” for `ResultProxy` is now a “soft” close. That is, after exhausting
    all rows using the fetch methods, the DBAPI cursor is released as before and the
    object may be safely discarded, but the fetch methods may continue to be called
    for which they will return an end-of-result object (None for fetchone, empty list
    for fetchmany and fetchall). Only if `ResultProxy.close()` is called explicitly
    will these methods raise the “result is closed” error.
  id: totrans-2957
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`ResultProxy`的“自动关闭”现在是“软”关闭。也就是说，在使用提取方法耗尽所有行后，DBAPI游标会像以前一样被释放，对象可以安全丢弃，但是提取方法仍然可以被调用，它们将返回一个结果结束对象（对于fetchone为None，对于fetchmany和fetchall为空列表）。只有显式调用`ResultProxy.close()`，这些方法才会引发“结果已关闭”错误。'
- en: See also
  id: totrans-2958
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[ResultProxy “auto close” is now a “soft” close](migration_10.html#change-3330)'
  id: totrans-2959
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`ResultProxy`“自动关闭”现在是“软”关闭](migration_10.html#change-3330)'
- en: 'References: [#3329](https://www.sqlalchemy.org/trac/ticket/3329), [#3330](https://www.sqlalchemy.org/trac/ticket/3330)'
  id: totrans-2960
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3329](https://www.sqlalchemy.org/trac/ticket/3329)，[#3330](https://www.sqlalchemy.org/trac/ticket/3330)
- en: mysql
  id: totrans-2961
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug] [py3k]**'
  id: totrans-2962
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug] [py3k]**'
- en: Fixed the [`BIT`](../dialects/mysql.html#sqlalchemy.dialects.mysql.BIT "sqlalchemy.dialects.mysql.BIT")
    type on Py3K which was not using the `ord()` function correctly. Pull request
    courtesy David Marin.
  id: totrans-2963
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Py3K上未正确使用`ord()`函数的[`BIT`](../dialects/mysql.html#sqlalchemy.dialects.mysql.BIT
    "sqlalchemy.dialects.mysql.BIT")类型。感谢David Marin的拉取请求。
- en: 'This change is also **backported** to: 0.9.10'
  id: totrans-2964
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.10
- en: 'References: [#3333](https://www.sqlalchemy.org/trac/ticket/3333)'
  id: totrans-2965
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3333](https://www.sqlalchemy.org/trac/ticket/3333)
- en: '**[mysql] [bug]**'
  id: totrans-2966
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixes to fully support using the `'utf8mb4'` MySQL-specific charset with MySQL
    dialects, in particular MySQL-Python and PyMySQL. In addition, MySQL databases
    that report more unusual charsets such as ‘koi8u’ or ‘eucjpms’ will also work
    correctly. Pull request courtesy Thomas Grainger.
  id: totrans-2967
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了完全支持使用`'utf8mb4'` MySQL特定字符集与MySQL方言，特别是MySQL-Python和PyMySQL。此外，报告更不寻常字符集如‘koi8u’或‘eucjpms’的MySQL数据库也将正常工作。感谢Thomas
    Grainger的拉取请求。
- en: 'References: [#2771](https://www.sqlalchemy.org/trac/ticket/2771)'
  id: totrans-2968
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2771](https://www.sqlalchemy.org/trac/ticket/2771)
- en: orm
  id: totrans-2969
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-2970
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed unexpected use regression from pullreq github:137 where Py2K unicode literals
    (e.g. `u""`) would not be accepted by the [`relationship.cascade`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.cascade
    "sqlalchemy.orm.relationship") option. Pull request courtesy Julien Castets.
  id: totrans-2971
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了从pullreq github:137中的意外使用回归，其中Py2K unicode文字（例如`u""`）将不被[`relationship.cascade`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.cascade
    "sqlalchemy.orm.relationship")选项接受。感谢Julien Castets的拉取请求。
- en: 'References: [#3327](https://www.sqlalchemy.org/trac/ticket/3327)'
  id: totrans-2972
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3327](https://www.sqlalchemy.org/trac/ticket/3327)
- en: orm declarative
  id: totrans-2973
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm declarative
- en: '**[orm] [declarative] [change]**'
  id: totrans-2974
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [change]**'
- en: 'Loosened some restrictions that were added to `@declared_attr` objects, such
    that they were prevented from being called outside of the declarative process;
    this is related to the enhancements of #3150 which allow `@declared_attr` to return
    a value that is cached based on the current class as it’s being configured. The
    exception raise has been removed, and the behavior changed so that outside of
    the declarative process, the function decorated by `@declared_attr` is called
    every time just like a regular `@property`, without using any caching, as none
    is available at this stage.'
  id: totrans-2975
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 放宽了对`@declared_attr`对象添加的一些限制，使其可以在声明过程之外被调用；这与增强功能#3150有关，该功能允许`@declared_attr`返回一个根据当前类缓存的值，因为它正在配置。已删除异常抛出，并更改了行为，使得在声明过程之外，由`@declared_attr`装饰的函数每次都像常规的`@property`一样被调用，而不使用任何缓存，因为在这个阶段没有可用的缓存。
- en: 'References: [#3331](https://www.sqlalchemy.org/trac/ticket/3331)'
  id: totrans-2976
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3331](https://www.sqlalchemy.org/trac/ticket/3331)
- en: engine
  id: totrans-2977
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [bug]**'
  id: totrans-2978
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: The “auto close” for `ResultProxy` is now a “soft” close. That is, after exhausting
    all rows using the fetch methods, the DBAPI cursor is released as before and the
    object may be safely discarded, but the fetch methods may continue to be called
    for which they will return an end-of-result object (None for fetchone, empty list
    for fetchmany and fetchall). Only if `ResultProxy.close()` is called explicitly
    will these methods raise the “result is closed” error.
  id: totrans-2979
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`ResultProxy`的“自动关闭”现在是“软”关闭。也就是说，在使用提取方法耗尽所有行后，DBAPI游标会像以前一样被释放，对象可以安全丢弃，但是提取方法仍然可以被调用，它们将返回一个结果结束对象（对于fetchone为None，对于fetchmany和fetchall为空列表）。只有显式调用`ResultProxy.close()`，这些方法才会引发“结果已关闭”错误。'
- en: See also
  id: totrans-2980
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[ResultProxy “auto close” is now a “soft” close](migration_10.html#change-3330)'
  id: totrans-2981
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[ResultProxy “自动关闭”现在是“软”关闭](migration_10.html#change-3330)'
- en: 'References: [#3329](https://www.sqlalchemy.org/trac/ticket/3329), [#3330](https://www.sqlalchemy.org/trac/ticket/3330)'
  id: totrans-2982
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3329](https://www.sqlalchemy.org/trac/ticket/3329), [#3330](https://www.sqlalchemy.org/trac/ticket/3330)
- en: mysql
  id: totrans-2983
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug] [py3k]**'
  id: totrans-2984
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [错误] [py3k]**'
- en: Fixed the [`BIT`](../dialects/mysql.html#sqlalchemy.dialects.mysql.BIT "sqlalchemy.dialects.mysql.BIT")
    type on Py3K which was not using the `ord()` function correctly. Pull request
    courtesy David Marin.
  id: totrans-2985
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 Py3K 上未正确使用 `ord()` 函数的 [`BIT`](../dialects/mysql.html#sqlalchemy.dialects.mysql.BIT
    "sqlalchemy.dialects.mysql.BIT") 类型。感谢 David Marin 提交的拉取请求。
- en: 'This change is also **backported** to: 0.9.10'
  id: totrans-2986
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.10
- en: 'References: [#3333](https://www.sqlalchemy.org/trac/ticket/3333)'
  id: totrans-2987
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3333](https://www.sqlalchemy.org/trac/ticket/3333)
- en: '**[mysql] [bug]**'
  id: totrans-2988
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [错误]**'
- en: Fixes to fully support using the `'utf8mb4'` MySQL-specific charset with MySQL
    dialects, in particular MySQL-Python and PyMySQL. In addition, MySQL databases
    that report more unusual charsets such as ‘koi8u’ or ‘eucjpms’ will also work
    correctly. Pull request courtesy Thomas Grainger.
  id: totrans-2989
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了完全支持使用 `'utf8mb4'` 这种 MySQL 特定字符集的 MySQL 方言，特别是 MySQL-Python 和 PyMySQL。此外，报告更不寻常字符集的
    MySQL 数据库，如 ‘koi8u’ 或 ‘eucjpms’ 也将正常工作。感谢 Thomas Grainger 提交的拉取请求。
- en: 'References: [#2771](https://www.sqlalchemy.org/trac/ticket/2771)'
  id: totrans-2990
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2771](https://www.sqlalchemy.org/trac/ticket/2771)
- en: 1.0.0b1
  id: totrans-2991
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.0.0b1
- en: 'Released: March 13, 2015'
  id: totrans-2992
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2015年3月13日
- en: Version 1.0.0b1 is the first release of the 1.0 series. Many changes described
    here are also present in the 0.9 and sometimes the 0.8 series as well. For changes
    that are specific to 1.0 with an emphasis on compatibility concerns, see [What’s
    New in SQLAlchemy 1.0?](migration_10.html).
  id: totrans-2993
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.0.0b1 是 1.0 系列的第一个发布版本。这里描述的许多更改也存在于 0.9 系列，有时也存在于 0.8 系列。对于特定于 1.0 且强调兼容性问题的更改，请参阅
    [SQLAlchemy 1.0 中的新功能是什么？](migration_10.html)。
- en: general
  id: totrans-2994
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通用
- en: '**[general] [feature]**'
  id: totrans-2995
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[通用] [功能]**'
- en: Structural memory use has been improved via much more significant use of `__slots__`
    for many internal objects. This optimization is particularly geared towards the
    base memory size of large applications that have lots of tables and columns, and
    greatly reduces memory size for a variety of high-volume objects including event
    listening internals, comparator objects and parts of the ORM attribute and loader
    strategy system.
  id: totrans-2996
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过更多地使用 `__slots__` 来改进结构内存使用，特别针对具有大量表和列的大型应用程序的基本内存大小进行了优化，并大大减少了各种高容量对象的内存大小，包括事件监听内部、比较器对象以及
    ORM 属性和加载器策略系统的部分。
- en: See also
  id: totrans-2997
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Significant Improvements in Structural Memory Use](migration_10.html#feature-slots)'
  id: totrans-2998
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[结构内存使用方面的显著改进](migration_10.html#feature-slots)'
- en: '**[general] [bug]**'
  id: totrans-2999
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[通用] [错误]**'
- en: The `__module__` attribute is now set for all those SQL and ORM functions that
    are derived as “public factory” symbols, which should assist with documentation
    tools being able to report on the target module.
  id: totrans-3000
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在为所有那些作为“公共工厂”符号派生的 SQL 和 ORM 函数设置了 `__module__` 属性，这应有助于文档工具能够报告目标模块。
- en: 'References: [#3218](https://www.sqlalchemy.org/trac/ticket/3218)'
  id: totrans-3001
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3218](https://www.sqlalchemy.org/trac/ticket/3218)
- en: orm
  id: totrans-3002
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-3003
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Added a new entry `"entity"` to the dictionaries returned by [`Query.column_descriptions`](../orm/queryguide/query.html#sqlalchemy.orm.Query.column_descriptions
    "sqlalchemy.orm.Query.column_descriptions"). This refers to the primary ORM mapped
    class or aliased class that is referred to by the expression. Compared to the
    existing entry for `"type"`, it will always be a mapped entity, even if extracted
    from a column expression, or None if the given expression is a pure core expression.
    See also [#3403](https://www.sqlalchemy.org/trac/ticket/3403) which repaired a
    regression in this feature which was unreleased in 0.9.10 but was released in
    the 1.0 version.
  id: totrans-3004
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 [`Query.column_descriptions`](../orm/queryguide/query.html#sqlalchemy.orm.Query.column_descriptions
    "sqlalchemy.orm.Query.column_descriptions") 返回的字典中添加了一个新条目 `"entity"`。这指的是由表达式引用的主
    ORM 映射类或别名类。与现有的 `"type"` 条目相比，它将始终是一个映射实体，即使从列表达式中提取，或者如果给定表达式是纯核心表达式，则为 None。另请参阅修复了此功能中的回归的
    [#3403](https://www.sqlalchemy.org/trac/ticket/3403)，该功能未在 0.9.10 中发布，但在 1.0 版本中发布。
- en: 'This change is also **backported** to: 0.9.10'
  id: totrans-3005
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.10
- en: 'References: [#3320](https://www.sqlalchemy.org/trac/ticket/3320)'
  id: totrans-3006
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3320](https://www.sqlalchemy.org/trac/ticket/3320)
- en: '**[orm] [feature]**'
  id: totrans-3007
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Added new parameter [`Session.connection.execution_options`](../orm/session_api.html#sqlalchemy.orm.Session.connection.params.execution_options
    "sqlalchemy.orm.Session.connection") which may be used to set up execution options
    on a [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    when it is first checked out, before the transaction has begun. This is used to
    set up options such as isolation level on the connection before the transaction
    starts.
  id: totrans-3008
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新参数[`Session.connection.execution_options`](../orm/session_api.html#sqlalchemy.orm.Session.connection.params.execution_options
    "sqlalchemy.orm.Session.connection")，可用于在首次检出连接之前设置[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")上的执行选项，事务开始之前。这用于在事务开始之前在连接上设置隔离级别等选项。
- en: See also
  id: totrans-3009
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Setting Transaction Isolation Levels / DBAPI AUTOCOMMIT](../orm/session_transaction.html#session-transaction-isolation)
    - new documentation section detailing best practices for setting transaction isolation
    with sessions.'
  id: totrans-3010
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[设置事务隔离级别 / DBAPI AUTOCOMMIT](../orm/session_transaction.html#session-transaction-isolation)
    - 新文档部分详细介绍了使用会话设置事务隔离的最佳实践。'
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-3011
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.9
- en: 'References: [#3296](https://www.sqlalchemy.org/trac/ticket/3296)'
  id: totrans-3012
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3296](https://www.sqlalchemy.org/trac/ticket/3296)
- en: '**[orm] [feature]**'
  id: totrans-3013
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Added new method [`Session.invalidate()`](../orm/session_api.html#sqlalchemy.orm.Session.invalidate
    "sqlalchemy.orm.Session.invalidate"), functions similarly to [`Session.close()`](../orm/session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close"), except also calls [`Connection.invalidate()`](../core/connections.html#sqlalchemy.engine.Connection.invalidate
    "sqlalchemy.engine.Connection.invalidate") on all connections, guaranteeing that
    they will not be returned to the connection pool. This is useful in situations
    e.g. dealing with gevent timeouts when it is not safe to use the connection further,
    even for rollbacks.
  id: totrans-3014
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新方法[`Session.invalidate()`](../orm/session_api.html#sqlalchemy.orm.Session.invalidate
    "sqlalchemy.orm.Session.invalidate")，功能类似于[`Session.close()`](../orm/session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close")，但还调用所有连接的[`Connection.invalidate()`](../core/connections.html#sqlalchemy.engine.Connection.invalidate
    "sqlalchemy.engine.Connection.invalidate")，确保它们不会返回到连接池。在处理gevent超时等情况时非常有用，此时进一步使用连接是不安全的，即使是用于回滚。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-3015
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.9
- en: '**[orm] [feature]**'
  id: totrans-3016
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: The “primaryjoin” model has been stretched a bit further to allow a join condition
    that is strictly from a single column to itself, translated through some kind
    of SQL function or expression. This is kind of experimental, but the first proof
    of concept is a “materialized path” join condition where a path string is compared
    to itself using “like”. The [`ColumnOperators.like()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like") operator has also been added
    to the list of valid operators to use in a primaryjoin condition.
  id: totrans-3017
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “primaryjoin”模型已经进一步扩展，允许一个严格从单个列到自身的连接条件，通过某种SQL函数或表达式进行转换。这有点实验性，但第一个概念验证是一个“材料化路径”连接条件，其中一个路径字符串与自身使用“like”进行比较。[`ColumnOperators.like()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")操作符也已添加到可在primaryjoin条件中使用的有效操作符列表中。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-3018
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.5
- en: 'References: [#3029](https://www.sqlalchemy.org/trac/ticket/3029)'
  id: totrans-3019
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3029](https://www.sqlalchemy.org/trac/ticket/3029)
- en: '**[orm] [feature]**'
  id: totrans-3020
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Added new utility function [`make_transient_to_detached()`](../orm/session_api.html#sqlalchemy.orm.make_transient_to_detached
    "sqlalchemy.orm.make_transient_to_detached") which can be used to manufacture
    objects that behave as though they were loaded from a session, then detached.
    Attributes that aren’t present are marked as expired, and the object can be added
    to a Session where it will act like a persistent one.
  id: totrans-3021
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的实用函数[`make_transient_to_detached()`](../orm/session_api.html#sqlalchemy.orm.make_transient_to_detached
    "sqlalchemy.orm.make_transient_to_detached")，可用于制造行为就像从会话加载然后分离的对象。不存在的属性被标记为过期，并且对象可以添加到一个会话中，它将表现得像一个持久对象。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-3022
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.5
- en: 'References: [#3017](https://www.sqlalchemy.org/trac/ticket/3017)'
  id: totrans-3023
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3017](https://www.sqlalchemy.org/trac/ticket/3017)
- en: '**[orm] [feature]**'
  id: totrans-3024
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Added a new event suite [`QueryEvents`](../orm/events.html#sqlalchemy.orm.QueryEvents
    "sqlalchemy.orm.QueryEvents"). The [`QueryEvents.before_compile()`](../orm/events.html#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile") event allows the creation of functions
    which may place additional modifications to [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") objects before the construction of the SELECT statement.
    It is hoped that this event be made much more useful via the advent of a new inspection
    system that will allow for detailed modifications to be made against [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") objects in an automated fashion.
  id: totrans-3025
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的事件套件[`QueryEvents`](../orm/events.html#sqlalchemy.orm.QueryEvents "sqlalchemy.orm.QueryEvents")。[`QueryEvents.before_compile()`](../orm/events.html#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile")事件允许创建函数，在构建SELECT语句之前对[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象进行额外修改。希望通过引入一个新的检查系统，使这个事件变得更加有用，该系统将允许对[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象进行详细的自动修改。
- en: See also
  id: totrans-3026
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`QueryEvents`](../orm/events.html#sqlalchemy.orm.QueryEvents "sqlalchemy.orm.QueryEvents")'
  id: totrans-3027
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`QueryEvents`](../orm/events.html#sqlalchemy.orm.QueryEvents "sqlalchemy.orm.QueryEvents")'
- en: 'References: [#3317](https://www.sqlalchemy.org/trac/ticket/3317)'
  id: totrans-3028
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3317](https://www.sqlalchemy.org/trac/ticket/3317)
- en: '**[orm] [feature]**'
  id: totrans-3029
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: The subquery wrapping which occurs when joined eager loading is used with a
    one-to-many query that also features LIMIT, OFFSET, or DISTINCT has been disabled
    in the case of a one-to-one relationship, that is a one-to-many with [`relationship.uselist`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.uselist
    "sqlalchemy.orm.relationship") set to False. This will produce more efficient
    queries in these cases.
  id: totrans-3030
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用连接预加载与具有LIMIT、OFFSET或DISTINCT的一对多查询时，如果一对一关系也被禁用，即一对多关系中[`relationship.uselist`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.uselist
    "sqlalchemy.orm.relationship")设置为False，将禁用子查询包装。这将在这些情况下产生更有效的查询。
- en: See also
  id: totrans-3031
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Subqueries no longer applied to uselist=False joined eager loads](migration_10.html#change-3249)'
  id: totrans-3032
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[子查询不再适用于uselist=False的连接预加载](migration_10.html#change-3249)'
- en: 'References: [#3249](https://www.sqlalchemy.org/trac/ticket/3249)'
  id: totrans-3033
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3249](https://www.sqlalchemy.org/trac/ticket/3249)
- en: '**[orm] [feature]**'
  id: totrans-3034
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Mapped state internals have been reworked to allow for a 50% reduction in callcounts
    specific to the “expiration” of objects, as in the “auto expire” feature of [`Session.commit()`](../orm/session_api.html#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit") and for [`Session.expire_all()`](../orm/session_api.html#sqlalchemy.orm.Session.expire_all
    "sqlalchemy.orm.Session.expire_all"), as well as in the “cleanup” step which occurs
    when object states are garbage collected.
  id: totrans-3035
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 映射状态内部已经重新设计，以允许将对象的“过期”（如[`Session.commit()`](../orm/session_api.html#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit")和[`Session.expire_all()`](../orm/session_api.html#sqlalchemy.orm.Session.expire_all
    "sqlalchemy.orm.Session.expire_all")中的“自动过期”功能）以及在对象状态被垃圾回收时发生的“清理”步骤的调用次数减少50%。
- en: 'References: [#3307](https://www.sqlalchemy.org/trac/ticket/3307)'
  id: totrans-3036
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3307](https://www.sqlalchemy.org/trac/ticket/3307)
- en: '**[orm] [feature]**'
  id: totrans-3037
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: A warning is emitted when the same polymorphic identity is assigned to two different
    mappers in the same hierarchy. This is typically a user error and means that the
    two different mapping types cannot be correctly distinguished at load time. Pull
    request courtesy Sebastian Bank.
  id: totrans-3038
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当将相同的多态标识分配给同一层次结构中的两个不同的映射器时，会发出警告。这通常是用户错误，意味着在加载时无法正确区分两种不同的映射类型。感谢Sebastian
    Bank的拉取请求。
- en: 'References: [#3262](https://www.sqlalchemy.org/trac/ticket/3262)'
  id: totrans-3039
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3262](https://www.sqlalchemy.org/trac/ticket/3262)
- en: '**[orm] [feature]**'
  id: totrans-3040
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: A new series of [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    methods which provide hooks directly into the unit of work’s facility for emitting
    INSERT and UPDATE statements has been created. When used correctly, this expert-oriented
    system can allow ORM-mappings to be used to generate bulk insert and update statements
    batched into executemany groups, allowing the statements to proceed at speeds
    that rival direct use of the Core.
  id: totrans-3041
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建了一系列新的[`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")方法，直接提供钩子到工作单元的功能，用于发出INSERT和UPDATE语句。当正确使用时，这种面向专家的系统可以允许使用ORM映射生成批量插入和更新语句，批量分组执行语句，使语句的速度与直接使用Core相媲美。
- en: See also
  id: totrans-3042
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bulk Operations](../orm/persistence_techniques.html#bulk-operations)'
  id: totrans-3043
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[批量操作](../orm/persistence_techniques.html#bulk-operations)'
- en: 'References: [#3100](https://www.sqlalchemy.org/trac/ticket/3100)'
  id: totrans-3044
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3100](https://www.sqlalchemy.org/trac/ticket/3100)
- en: '**[orm] [feature]**'
  id: totrans-3045
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added a parameter [`Query.join.isouter`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join.params.isouter
    "sqlalchemy.orm.Query.join") which is synonymous with calling [`Query.outerjoin()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.outerjoin
    "sqlalchemy.orm.Query.outerjoin"); this flag is to provide a more consistent interface
    compared to Core [`FromClause.join()`](../core/selectable.html#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join"). Pull request courtesy Jonathan Vanasco.
  id: totrans-3046
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个参数[`Query.join.isouter`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join.params.isouter
    "sqlalchemy.orm.Query.join")，它与调用[`Query.outerjoin()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.outerjoin
    "sqlalchemy.orm.Query.outerjoin")是同义的；此标志旨在提供与Core [`FromClause.join()`](../core/selectable.html#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join")更一致的接口。感谢Jonathan Vanasco提供的拉取请求。
- en: 'References: [#3217](https://www.sqlalchemy.org/trac/ticket/3217)'
  id: totrans-3047
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3217](https://www.sqlalchemy.org/trac/ticket/3217)
- en: '**[orm] [feature]**'
  id: totrans-3048
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new event handlers [`AttributeEvents.init_collection()`](../orm/events.html#sqlalchemy.orm.AttributeEvents.init_collection
    "sqlalchemy.orm.AttributeEvents.init_collection") and [`AttributeEvents.dispose_collection()`](../orm/events.html#sqlalchemy.orm.AttributeEvents.dispose_collection
    "sqlalchemy.orm.AttributeEvents.dispose_collection"), which track when a collection
    is first associated with an instance and when it is replaced. These handlers supersede
    the `collection.linker()` annotation. The old hook remains supported through an
    event adapter.
  id: totrans-3049
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的事件处理程序[`AttributeEvents.init_collection()`](../orm/events.html#sqlalchemy.orm.AttributeEvents.init_collection
    "sqlalchemy.orm.AttributeEvents.init_collection")和[`AttributeEvents.dispose_collection()`](../orm/events.html#sqlalchemy.orm.AttributeEvents.dispose_collection
    "sqlalchemy.orm.AttributeEvents.dispose_collection")，用于跟踪集合首次与实例关联以及替换集合的情况。这些处理程序取代了`collection.linker()`注释。旧的钩子通过事件适配器仍然受支持。
- en: '**[orm] [feature]**'
  id: totrans-3050
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: The [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    will raise an exception when [`Query.yield_per()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.yield_per
    "sqlalchemy.orm.Query.yield_per") is used with mappings or options where either
    subquery eager loading, or joined eager loading with collections, would take place.
    These loading strategies are not currently compatible with yield_per, so by raising
    this error, the method is safer to use. Eager loads can be disabled with the `lazyload('*')`
    option or [`Query.enable_eagerloads()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.enable_eagerloads
    "sqlalchemy.orm.Query.enable_eagerloads").
  id: totrans-3051
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")与映射或选项一起使用[`Query.yield_per()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.yield_per
    "sqlalchemy.orm.Query.yield_per")时，将引发异常，其中子查询急加载或与集合一起的连接急加载将发生。这些加载策略目前与yield_per不兼容，因此通过引发此错误，该方法更安全。可以使用`lazyload('*')`选项或[`Query.enable_eagerloads()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.enable_eagerloads
    "sqlalchemy.orm.Query.enable_eagerloads")来禁用急加载。
- en: See also
  id: totrans-3052
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Joined/Subquery eager loading explicitly disallowed with yield_per](migration_10.html#migration-yield-per-eager-loading)'
  id: totrans-3053
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[使用yield_per明确禁止连接/子查询急加载](migration_10.html#migration-yield-per-eager-loading)'
- en: '**[orm] [feature]**'
  id: totrans-3054
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: A new implementation for `KeyedTuple` used by the [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object offers dramatic speed improvements when fetching
    large numbers of column-oriented rows.
  id: totrans-3055
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")对象使用的`KeyedTuple`的新实现在获取大量面向列的行时提供了显著的速度改进。'
- en: See also
  id: totrans-3056
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New KeyedTuple implementation dramatically faster](migration_10.html#feature-3176)'
  id: totrans-3057
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[新的KeyedTuple实现速度显著提升](migration_10.html#feature-3176)'
- en: 'References: [#3176](https://www.sqlalchemy.org/trac/ticket/3176)'
  id: totrans-3058
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3176](https://www.sqlalchemy.org/trac/ticket/3176)
- en: '**[orm] [feature]**'
  id: totrans-3059
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: The behavior of [`joinedload.innerjoin`](../orm/queryguide/relationships.html#sqlalchemy.orm.joinedload.params.innerjoin
    "sqlalchemy.orm.joinedload") as well as [`relationship.innerjoin`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.innerjoin
    "sqlalchemy.orm.relationship") is now to use “nested” inner joins, that is, right-nested,
    as the default behavior when an inner join joined eager load is chained to an
    outer join eager load.
  id: totrans-3060
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当内连接的 eager load 链接到外连接的 eager load 时，[`joinedload.innerjoin`](../orm/queryguide/relationships.html#sqlalchemy.orm.joinedload.params.innerjoin
    "sqlalchemy.orm.joinedload") 和 [`relationship.innerjoin`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.innerjoin
    "sqlalchemy.orm.relationship") 的行为现在默认使用“嵌套”内连接，即右嵌套。
- en: See also
  id: totrans-3061
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Right inner join nesting now the default for joinedload with innerjoin=True](migration_10.html#migration-3008)'
  id: totrans-3062
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[右内连接嵌套现在是 joinedload 的默认设置，innerjoin=True](migration_10.html#migration-3008)'
- en: 'References: [#3008](https://www.sqlalchemy.org/trac/ticket/3008)'
  id: totrans-3063
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3008](https://www.sqlalchemy.org/trac/ticket/3008)
- en: '**[orm] [feature]**'
  id: totrans-3064
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: UPDATE statements can now be batched within an ORM flush into more performant
    executemany() call, similarly to how INSERT statements can be batched; this will
    be invoked within flush to the degree that subsequent UPDATE statements for the
    same mapping and table involve the identical columns within the VALUES clause,
    that no SET-level SQL expressions are embedded, and that the versioning requirements
    for the mapping are compatible with the backend dialect’s ability to return a
    correct rowcount for an executemany operation.
  id: totrans-3065
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以将 UPDATE 语句批量处理到更高效的 executemany() 调用中，类似于 INSERT 语句的批量处理；这将在 flush 中被调用，前提是后续的
    UPDATE 语句针对相同的映射和表涉及相同的列在 VALUES 子句中，没有嵌入 SET 级别的 SQL 表达式，并且映射的版本要求与后端方言能够返回 executemany
    操作的正确行数的兼容性。
- en: '**[orm] [feature]**'
  id: totrans-3066
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: The `info` parameter has been added to the constructor for [`SynonymProperty`](../orm/internals.html#sqlalchemy.orm.SynonymProperty
    "sqlalchemy.orm.SynonymProperty") and `ComparableProperty`.
  id: totrans-3067
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`info` 参数已添加到 [`SynonymProperty`](../orm/internals.html#sqlalchemy.orm.SynonymProperty
    "sqlalchemy.orm.SynonymProperty") 和 `ComparableProperty` 的构造函数中。'
- en: 'References: [#2963](https://www.sqlalchemy.org/trac/ticket/2963)'
  id: totrans-3068
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2963](https://www.sqlalchemy.org/trac/ticket/2963)
- en: '**[orm] [feature]**'
  id: totrans-3069
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: The `InspectionAttr.info` collection is now moved down to [`InspectionAttr`](../orm/internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.InspectionAttr"), where in addition to being available on all
    [`MapperProperty`](../orm/internals.html#sqlalchemy.orm.MapperProperty "sqlalchemy.orm.MapperProperty")
    objects, it is also now available on hybrid properties, association proxies, when
    accessed via [`Mapper.all_orm_descriptors`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors").
  id: totrans-3070
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`InspectionAttr.info` 集合现在移动到 [`InspectionAttr`](../orm/internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.InspectionAttr")，除了在所有 [`MapperProperty`](../orm/internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty") 对象上可用外，现在还可以在混合属性、关联代理上使用，通过 [`Mapper.all_orm_descriptors`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors") 访问。'
- en: 'References: [#2971](https://www.sqlalchemy.org/trac/ticket/2971)'
  id: totrans-3071
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2971](https://www.sqlalchemy.org/trac/ticket/2971)
- en: '**[orm] [change]**'
  id: totrans-3072
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [变更]**'
- en: Mapped attributes marked as deferred without explicit undeferral will now remain
    “deferred” even if their column is otherwise present in the result set in some
    way. This is a performance enhancement in that an ORM load no longer spends time
    searching for each deferred column when the result set is obtained. However, for
    an application that has been relying upon this, an explicit [`undefer()`](../orm/queryguide/columns.html#sqlalchemy.orm.undefer
    "sqlalchemy.orm.undefer") or similar option should now be used.
  id: totrans-3073
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果映射属性标记为延迟加载而没有明确取消延迟加载，则即使它们的列以某种方式出现在结果集中，它们现在仍将保持“延迟加载”。这是一个性能增强，因为 ORM
    加载不再花费时间搜索每个延迟加载列，当结果集被获取时。然而，对于一直依赖于此的应用程序，现在应该使用显式的 [`undefer()`](../orm/queryguide/columns.html#sqlalchemy.orm.undefer
    "sqlalchemy.orm.undefer") 或类似选项。
- en: '**[orm] [changed]**'
  id: totrans-3074
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [更改]**'
- en: The `proc()` callable passed to the `create_row_processor()` method of custom
    [`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")
    classes now accepts only a single “row” argument.
  id: totrans-3075
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 传递给自定义 [`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")
    类的 `create_row_processor()` 方法的 `proc()` 可调用现在只接受一个“row”参数。
- en: See also
  id: totrans-3076
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[API Change for new Bundle feature when custom row loaders are used](migration_10.html#bundle-api-change)'
  id: totrans-3077
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[当使用自定义行加载程序时，新 Bundle 功能的 API 更改](migration_10.html#bundle-api-change)'
- en: '**[orm] [changed]**'
  id: totrans-3078
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [更改]**'
- en: 'Deprecated event hooks removed: `populate_instance`, `create_instance`, `translate_row`,
    `append_result`'
  id: totrans-3079
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已弃用的事件钩子已移除：`populate_instance`、`create_instance`、`translate_row`、`append_result`
- en: See also
  id: totrans-3080
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Deprecated ORM Event Hooks Removed](migration_10.html#migration-deprecated-orm-events)'
  id: totrans-3081
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[已弃用的 ORM 事件钩子已移除](migration_10.html#migration-deprecated-orm-events)'
- en: '**[orm] [bug]**'
  id: totrans-3082
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in subquery eager loading where a long chain of eager loads across
    a polymorphic-subclass boundary in conjunction with polymorphic loading would
    fail to locate the subclass-link in the chain, erroring out with a missing property
    name on an [`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass").
  id: totrans-3083
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了子查询急加载中的 bug，其中在跨多态子类边界的一长串急加载中，与多态加载一起会无法找到链中的子类链接，导致在 [`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") 上出现缺少属性名称的错误。
- en: 'This change is also **backported** to: 0.9.5, 0.8.7'
  id: totrans-3084
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**到：0.9.5、0.8.7
- en: 'References: [#3055](https://www.sqlalchemy.org/trac/ticket/3055)'
  id: totrans-3085
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3055](https://www.sqlalchemy.org/trac/ticket/3055)
- en: '**[orm] [bug]**'
  id: totrans-3086
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed ORM bug where the [`class_mapper()`](../orm/mapping_api.html#sqlalchemy.orm.class_mapper
    "sqlalchemy.orm.class_mapper") function would mask AttributeErrors or KeyErrors
    that should raise during mapper configuration due to user errors. The catch for
    attribute/keyerror has been made more specific to not include the configuration
    step.
  id: totrans-3087
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 ORM 中的 bug，[`class_mapper()`](../orm/mapping_api.html#sqlalchemy.orm.class_mapper
    "sqlalchemy.orm.class_mapper") 函数会掩盖应在映射器配置期间引发的 AttributeErrors 或 KeyErrors，因为用户错误。捕获属性/键错误的方式更具体，不包括配置步骤。
- en: 'This change is also **backported** to: 0.9.5, 0.8.7'
  id: totrans-3088
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**到：0.9.5、0.8.7
- en: 'References: [#3047](https://www.sqlalchemy.org/trac/ticket/3047)'
  id: totrans-3089
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3047](https://www.sqlalchemy.org/trac/ticket/3047)
- en: '**[orm] [bug]**'
  id: totrans-3090
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bugs in ORM object comparisons where comparison of many-to-one `!= None`
    would fail if the source were an aliased class, or if the query needed to apply
    special aliasing to the expression due to aliased joins or polymorphic querying;
    also fixed bug in the case where comparing a many-to-one to an object state would
    fail if the query needed to apply special aliasing due to aliased joins or polymorphic
    querying.
  id: totrans-3091
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 ORM 对象比较中的 bug，其中对于多对一的 `!= None` 比较，如果源是一个别名类，或者查询需要对表达式应用特殊别名，因为别名连接或多态查询，比较多对一与对象状态会失败；还修复了比较多对一与对象状态时的
    bug，如果查询需要应用特殊别名，因为别名连接或多态查询。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-3092
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**到：0.9.9
- en: 'References: [#3310](https://www.sqlalchemy.org/trac/ticket/3310)'
  id: totrans-3093
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3310](https://www.sqlalchemy.org/trac/ticket/3310)
- en: '**[orm] [bug]**'
  id: totrans-3094
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where internal assertion would fail in the case where an `after_rollback()`
    handler for a [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    incorrectly adds state to that [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") within the handler, and the task to warn and remove
    this state (established by [#2389](https://www.sqlalchemy.org/trac/ticket/2389))
    attempts to proceed.
  id: totrans-3095
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，在 `after_rollback()` 处理程序为 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 错误地在处理程序内向该 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 添加状态时，内部断言会失败，并且尝试警告和移除此状态的任务（由 [#2389](https://www.sqlalchemy.org/trac/ticket/2389)
    确定）会继续进行。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-3096
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**到：0.9.9
- en: 'References: [#3309](https://www.sqlalchemy.org/trac/ticket/3309)'
  id: totrans-3097
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3309](https://www.sqlalchemy.org/trac/ticket/3309)
- en: '**[orm] [bug]**'
  id: totrans-3098
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where TypeError raised when [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") called with unknown kw arguments would raise its
    own TypeError due to broken formatting. Pull request courtesy Malthe Borch.
  id: totrans-3099
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，当调用 [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") 时，带有未知关键字参数会由于格式错误而引发自己的 TypeError 错误。感谢 Malthe Borch
    提交的拉取请求。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-3100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**到：0.9.9
- en: '**[orm] [bug]**'
  id: totrans-3101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in lazy loading SQL construction whereby a complex primaryjoin that
    referred to the same “local” column multiple times in the “column that points
    to itself” style of self-referential join would not be substituted in all cases.
    The logic to determine substitutions here has been reworked to be more open-ended.
  id: totrans-3102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了懒加载 SQL 构造中的 bug，其中一个复杂的 primaryjoin 在“指向自身的列”的自引用连接风格中多次引用相同的“本地”列时，在所有情况下都不会被替换。这里重新设计了确定替换的逻辑，使其更加开放。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-3103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.9
- en: 'References: [#3300](https://www.sqlalchemy.org/trac/ticket/3300)'
  id: totrans-3104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3300](https://www.sqlalchemy.org/trac/ticket/3300)
- en: '**[orm] [bug]**'
  id: totrans-3105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The “wildcard” loader options, in particular the one set up by the [`load_only()`](../orm/queryguide/columns.html#sqlalchemy.orm.load_only
    "sqlalchemy.orm.load_only") option to cover all attributes not explicitly mentioned,
    now takes into account the superclasses of a given entity, if that entity is mapped
    with inheritance mapping, so that attribute names within the superclasses are
    also omitted from the load. Additionally, the polymorphic discriminator column
    is unconditionally included in the list, just in the same way that primary key
    columns are, so that even with load_only() set up, polymorphic loading of subtypes
    continues to function correctly.
  id: totrans-3106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “通配符”加载器选项，特别是由[`load_only()`](../orm/queryguide/columns.html#sqlalchemy.orm.load_only
    "sqlalchemy.orm.load_only")选项设置的选项，以覆盖未明确提及的所有属性，现在考虑到给定实体的超类，如果该实体使用继承映射进行映射，则超类中的属性名称也将从加载中省略。此外，多态鉴别器列无条件地包含在列表中，就像主键列一样，因此即使设置了load_only()，子类型的多态加载仍将正常工作。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-3107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.9
- en: 'References: [#3287](https://www.sqlalchemy.org/trac/ticket/3287)'
  id: totrans-3108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3287](https://www.sqlalchemy.org/trac/ticket/3287)
- en: '**[orm] [bug] [pypy]**'
  id: totrans-3109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [pypy]**'
- en: Fixed bug where if an exception were thrown at the start of a [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") before it fetched results, particularly when row processors
    can’t be formed, the cursor would stay open with results pending and not actually
    be closed. This is typically only an issue on an interpreter like PyPy where the
    cursor isn’t immediately GC’ed, and can in some circumstances lead to transactions/
    locks being open longer than is desirable.
  id: totrans-3110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即如果在[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")在获取结果之前抛出异常，特别是当无法形成行处理器时，游标将保持打开状态，结果仍在等待中，实际上并未关闭。这通常只在像PyPy这样的解释器上出现问题，其中游标不会立即被GC回收，并且在某些情况下可能导致事务/锁定打开时间过长。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-3111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.9
- en: 'References: [#3285](https://www.sqlalchemy.org/trac/ticket/3285)'
  id: totrans-3112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3285](https://www.sqlalchemy.org/trac/ticket/3285)
- en: '**[orm] [bug]**'
  id: totrans-3113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a leak which would occur in the unsupported and highly non-recommended
    use case of replacing a relationship on a fixed mapped class many times, referring
    to an arbitrarily growing number of target mappers. A warning is emitted when
    the old relationship is replaced, however if the mapping were already used for
    querying, the old relationship would still be referenced within some registries.
  id: totrans-3114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个泄漏问题，该问题会在不支持且极不推荐的情况下多次替换固定映射类上的关系时发生，涉及任意增长数量的目标映射器。在替换旧关系时会发出警告，但如果映射已用于查询，则旧关系仍将在某些注册表中被引用。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-3115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.9
- en: 'References: [#3251](https://www.sqlalchemy.org/trac/ticket/3251)'
  id: totrans-3116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3251](https://www.sqlalchemy.org/trac/ticket/3251)
- en: '**[orm] [bug] [sqlite]**'
  id: totrans-3117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [sqlite]**'
- en: Fixed bug regarding expression mutations which could express itself as a “Could
    not locate column” error when using [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") to select from multiple, anonymous column entities when
    querying against SQLite, as a side effect of the “join rewriting” feature used
    by the SQLite dialect.
  id: totrans-3118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关于表达式变异的错误，当使用[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")从多个匿名列实体中选择时，在针对SQLite进行查询时，可能会表现为“找不到列”错误，这是SQLite方言使用的“联接重写”功能的副作用。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-3119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.9
- en: 'References: [#3241](https://www.sqlalchemy.org/trac/ticket/3241)'
  id: totrans-3120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3241](https://www.sqlalchemy.org/trac/ticket/3241)
- en: '**[orm] [bug]**'
  id: totrans-3121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where the ON clause for [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join"), and [`Query.outerjoin()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.outerjoin
    "sqlalchemy.orm.Query.outerjoin") to a single-inheritance subclass using `of_type()`
    would not render the “single table criteria” in the ON clause if the `from_joinpoint=True`
    flag were set.
  id: totrans-3122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即对于使用`of_type()`连接到单继承子类的[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")和[`Query.outerjoin()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.outerjoin
    "sqlalchemy.orm.Query.outerjoin")的ON子句，如果设置了`from_joinpoint=True`标志，则不会在ON子句中呈现“单表条件”。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-3123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.9.9
- en: 'References: [#3232](https://www.sqlalchemy.org/trac/ticket/3232)'
  id: totrans-3124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3232](https://www.sqlalchemy.org/trac/ticket/3232)
- en: '**[orm] [bug] [engine]**'
  id: totrans-3125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [engine]**'
- en: Fixed bug that affected generally the same classes of event as that of [#3199](https://www.sqlalchemy.org/trac/ticket/3199),
    when the `named=True` parameter would be used. Some events would fail to register,
    and others would not invoke the event arguments correctly, generally in the case
    of when an event was “wrapped” for adaption in some other way. The “named” mechanics
    have been rearranged to not interfere with the argument signature expected by
    internal wrapper functions.
  id: totrans-3126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，影响了与[#3199](https://www.sqlalchemy.org/trac/ticket/3199)相同类别的事件，当使用`named=True`参数时会出现问题。一些事件将无法注册，而其他事件将无法正确调用事件参数，通常在事件被“包装”以适应其他方式时。已重新排列“named”机制，以不干扰内部包装函数所期望的参数签名。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-3127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.9.8
- en: 'References: [#3197](https://www.sqlalchemy.org/trac/ticket/3197)'
  id: totrans-3128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3197](https://www.sqlalchemy.org/trac/ticket/3197)
- en: '**[orm] [bug]**'
  id: totrans-3129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug that affected many classes of event, particularly ORM events but also
    engine events, where the usual logic of “de duplicating” a redundant call to [`listen()`](../core/event.html#sqlalchemy.event.listen
    "sqlalchemy.event.listen") with the same arguments would fail, for those events
    where the listener function is wrapped. An assertion would be hit within registry.py.
    This assertion has now been integrated into the deduplication check, with the
    added bonus of a simpler means of checking deduplication across the board.
  id: totrans-3130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，影响了许多类别的事件，特别是ORM事件，但也包括引擎事件，其中“去重复”冗余调用[`listen()`](../core/event.html#sqlalchemy.event.listen
    "sqlalchemy.event.listen")的通常逻辑失败，对于那些监听函数被包装的事件。在registry.py中会触发一个断言。现在，这个断言已经整合到去重复检查中，额外的好处是更简单地检查整体的去重复。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-3131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.9.8
- en: 'References: [#3199](https://www.sqlalchemy.org/trac/ticket/3199)'
  id: totrans-3132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3199](https://www.sqlalchemy.org/trac/ticket/3199)
- en: '**[orm] [bug]**'
  id: totrans-3133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed warning that would emit when a complex self-referential primaryjoin contained
    functions, while at the same time remote_side was specified; the warning would
    suggest setting “remote side”. It now only emits if remote_side isn’t present.
  id: totrans-3134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个警告，当一个复杂的自引用的主连接包含函数时，同时指定了`remote_side`时会发出警告；警告会建议设置“remote side”。现在只有在`remote_side`不存在时才会发出警告。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-3135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.9.8
- en: 'References: [#3194](https://www.sqlalchemy.org/trac/ticket/3194)'
  id: totrans-3136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3194](https://www.sqlalchemy.org/trac/ticket/3194)
- en: '**[orm] [bug] [eagerloading]**'
  id: totrans-3137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [eagerloading]**'
- en: Fixed a regression caused by [#2976](https://www.sqlalchemy.org/trac/ticket/2976)
    released in 0.9.4 where the “outer join” propagation along a chain of joined eager
    loads would incorrectly convert an “inner join” along a sibling join path into
    an outer join as well, when only descendant paths should be receiving the “outer
    join” propagation; additionally, fixed related issue where “nested” join propagation
    would take place inappropriately between two sibling join paths.
  id: totrans-3138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个由[#2976](https://www.sqlalchemy.org/trac/ticket/2976)引起的回归，发布于0.9.4，其中沿着一系列连接的连接贪婪加载的“外连接”传播会错误地将一个“内连接”沿着兄弟连接路径转换为外连接，当只有后代路径应该接收“外连接”传播时；此外，修复了相关问题，即“嵌套”连接传播会不适当地发生在两个兄弟连接路径之间。
- en: 'This change is also **backported** to: 0.9.7'
  id: totrans-3139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.9.7
- en: 'References: [#3131](https://www.sqlalchemy.org/trac/ticket/3131)'
  id: totrans-3140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3131](https://www.sqlalchemy.org/trac/ticket/3131)
- en: '**[orm] [bug]**'
  id: totrans-3141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a regression from 0.9.0 due to [#2736](https://www.sqlalchemy.org/trac/ticket/2736)
    where the [`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from") method no longer set up the “from entity”
    of the [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object correctly, so that subsequent [`Query.filter_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.filter_by
    "sqlalchemy.orm.Query.filter_by") or [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") calls would fail to check the appropriate “from”
    entity when searching for attributes by string name.
  id: totrans-3142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于[#2736](https://www.sqlalchemy.org/trac/ticket/2736)导致从0.9.0中的一个回归，[`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from")方法不再正确设置[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象的“from entity”，因此随后的[`Query.filter_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.filter_by
    "sqlalchemy.orm.Query.filter_by")或[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")调用将无法在按字符串名称搜索属性时检查适当的“from”实体。
- en: 'This change is also **backported** to: 0.9.7'
  id: totrans-3143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.7
- en: 'References: [#2736](https://www.sqlalchemy.org/trac/ticket/2736), [#3083](https://www.sqlalchemy.org/trac/ticket/3083)'
  id: totrans-3144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2736](https://www.sqlalchemy.org/trac/ticket/2736)，[#3083](https://www.sqlalchemy.org/trac/ticket/3083)
- en: '**[orm] [bug]**'
  id: totrans-3145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where items that were persisted, deleted, or had a primary key change
    within a savepoint block would not participate in being restored to their former
    state (not in session, in session, previous PK) after the outer transaction were
    rolled back.
  id: totrans-3146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在保存点块内持久化、删除或主键更改的项目在外部事务回滚后不参与恢复到其先前状态（不在会话中、在会话中、先前PK）的错误。
- en: 'This change is also **backported** to: 0.9.7'
  id: totrans-3147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.7
- en: 'References: [#3108](https://www.sqlalchemy.org/trac/ticket/3108)'
  id: totrans-3148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3108](https://www.sqlalchemy.org/trac/ticket/3108)
- en: '**[orm] [bug]**'
  id: totrans-3149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in subquery eager loading in conjunction with [`with_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic"), the targeting of entities and columns in the
    subquery load has been made more accurate with respect to this type of entity
    and others.
  id: totrans-3150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了与[`with_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic")结合使用的子查询急加载中的错误，在子查询加载中对实体和列的定位相对于此类型的实体和其他实体更加准确。
- en: 'This change is also **backported** to: 0.9.7'
  id: totrans-3151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.7
- en: 'References: [#3106](https://www.sqlalchemy.org/trac/ticket/3106)'
  id: totrans-3152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3106](https://www.sqlalchemy.org/trac/ticket/3106)
- en: '**[orm] [bug]**'
  id: totrans-3153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Additional checks have been added for the case where an inheriting mapper is
    implicitly combining one of its column-based attributes with that of the parent,
    where those columns normally don’t necessarily share the same value. This is an
    extension of an existing check that was added via [#1892](https://www.sqlalchemy.org/trac/ticket/1892);
    however this new check emits only a warning, instead of an exception, to allow
    for applications that may be relying upon the existing behavior.
  id: totrans-3154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已添加额外的检查，用于在继承映射器隐式组合其基于列的属性与父级的属性之一时，其中这些列通常不一定共享相同的值。这是通过[#1892](https://www.sqlalchemy.org/trac/ticket/1892)添加的现有检查的扩展；但是，这个新检查只发出警告，而不是异常，以允许依赖于现有行为的应用程序。
- en: See also
  id: totrans-3155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[I’m getting a warning or error about “Implicitly combining column X under
    attribute Y”](../faq/ormconfiguration.html#faq-combining-columns)'
  id: totrans-3156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[我收到关于“隐式组合列X在属性Y下”的警告或错误](../faq/ormconfiguration.html#faq-combining-columns)'
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-3157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.5
- en: 'References: [#3042](https://www.sqlalchemy.org/trac/ticket/3042)'
  id: totrans-3158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3042](https://www.sqlalchemy.org/trac/ticket/3042)
- en: '**[orm] [bug]**'
  id: totrans-3159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Modified the behavior of [`load_only()`](../orm/queryguide/columns.html#sqlalchemy.orm.load_only
    "sqlalchemy.orm.load_only") such that primary key columns are always added to
    the list of columns to be “undeferred”; otherwise, the ORM can’t load the row’s
    identity. Apparently, one can defer the mapped primary keys and the ORM will fail,
    that hasn’t been changed. But as load_only is essentially saying “defer all but
    X”, it’s more critical that PK cols not be part of this deferral.
  id: totrans-3160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了[`load_only()`](../orm/queryguide/columns.html#sqlalchemy.orm.load_only "sqlalchemy.orm.load_only")的行为，使得主键列始终被添加到“未延迟加载”列的列表中；否则，ORM无法加载行的标识。显然，可以推迟映射的主键，ORM将失败，这一点没有改变。但是，由于load_only本质上是在说“除了X之外都推迟”，因此PK列不参与此推迟更为关键。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-3161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.5
- en: 'References: [#3080](https://www.sqlalchemy.org/trac/ticket/3080)'
  id: totrans-3162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3080](https://www.sqlalchemy.org/trac/ticket/3080)
- en: '**[orm] [bug]**'
  id: totrans-3163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a few edge cases which arise in the so-called “row switch” scenario, where
    an INSERT/DELETE can be turned into an UPDATE. In this situation, a many-to-one
    relationship set to None, or in some cases a scalar attribute set to None, may
    not be detected as a net change in value, and therefore the UPDATE would not reset
    what was on the previous row. This is due to some as-yet unresolved side effects
    of the way attribute history works in terms of implicitly assuming None isn’t
    really a “change” for a previously un-set attribute. See also [#3061](https://www.sqlalchemy.org/trac/ticket/3061).
  id: totrans-3164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在所谓的“行切换”场景中出现的一些边缘情况，其中INSERT/DELETE可以转换为UPDATE。在这种情况下，将多对一关系设置为None，或在某些情况下将标量属性设置为None，可能不会被检测为值的净变化，因此UPDATE不会重置前一行上的内容。这是由于属性历史记录的一些尚未解决的副作用导致的，隐式地假定None对于先前未设置的属性实际上不是一个“变化”。另请参见[#3061](https://www.sqlalchemy.org/trac/ticket/3061)。
- en: Note
  id: totrans-3165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: This change has been **REVERTED** in 0.9.6\. The full fix will be in version
    1.0 of SQLAlchemy.
  id: totrans-3166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改已在0.9.6中**撤销**。完整的修复将在SQLAlchemy的1.0版本中实现。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-3167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.5
- en: 'References: [#3060](https://www.sqlalchemy.org/trac/ticket/3060)'
  id: totrans-3168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3060](https://www.sqlalchemy.org/trac/ticket/3060)
- en: '**[orm] [bug]**'
  id: totrans-3169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Related to [#3060](https://www.sqlalchemy.org/trac/ticket/3060), an adjustment
    has been made to the unit of work such that loading for related many-to-one objects
    is slightly more aggressive, in the case of a graph of self-referential objects
    that are to be deleted; the load of related objects is to help determine the correct
    order for deletion if passive_deletes is not set.
  id: totrans-3170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与[#3060](https://www.sqlalchemy.org/trac/ticket/3060)相关，对工作单元进行了调整，以便在要删除的自引用对象图中，加载相关的多对一对象更加积极，以帮助确定删除顺序，如果未设置`passive_deletes`。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-3171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.5
- en: '**[orm] [bug]**'
  id: totrans-3172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in SQLite join rewriting where anonymized column names due to repeats
    would not correctly be rewritten in subqueries. This would affect SELECT queries
    with any kind of subquery + join.
  id: totrans-3173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了SQLite连接重写中的错误，由于重复导致的匿名列名不会在子查询中正确重写。这会影响带有任何类型的子查询 + 连接的SELECT查询。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-3174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.5
- en: 'References: [#3057](https://www.sqlalchemy.org/trac/ticket/3057)'
  id: totrans-3175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3057](https://www.sqlalchemy.org/trac/ticket/3057)
- en: '**[orm] [bug] [sql]**'
  id: totrans-3176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [sql]**'
- en: Fixes to the newly enhanced boolean coercion in [#2804](https://www.sqlalchemy.org/trac/ticket/2804)
    where the new rules for “where” and “having” wouldn’t take effect for the “whereclause”
    and “having” kw arguments of the [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct, which is also what [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") uses so wasn’t working in the ORM either.
  id: totrans-3177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在[#2804](https://www.sqlalchemy.org/trac/ticket/2804)中对新增增强的布尔强制转换规则的修复，其中“where”和“having”的新规则不会对[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")构造函数的“whereclause”和“having”关键字参数生效，而[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")也使用了这个构造函数，因此在ORM中也无法正常工作。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-3178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.5
- en: 'References: [#3013](https://www.sqlalchemy.org/trac/ticket/3013)'
  id: totrans-3179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3013](https://www.sqlalchemy.org/trac/ticket/3013)
- en: '**[orm] [bug]**'
  id: totrans-3180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where the session attachment error “object is already attached to
    session X” would fail to prevent the object from also being attached to the new
    session, in the case that execution continued after the error raise occurred.
  id: totrans-3181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了会话附加错误“对象已附加到会话X”无法阻止对象在错误引发后继续执行的情况下也附加到新会话的错误。
- en: 'References: [#3301](https://www.sqlalchemy.org/trac/ticket/3301)'
  id: totrans-3182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3301](https://www.sqlalchemy.org/trac/ticket/3301)
- en: '**[orm] [bug]**'
  id: totrans-3183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The primary [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    of a [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    is now passed to the [`Session.get_bind()`](../orm/session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") method when calling upon [`Query.count()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.count
    "sqlalchemy.orm.Query.count"), [`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update"), [`Query.delete()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.delete
    "sqlalchemy.orm.Query.delete"), as well as queries against mapped columns, [`column_property`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property") objects, and SQL functions and expressions derived
    from mapped columns. This allows sessions that rely upon either customized [`Session.get_bind()`](../orm/session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") schemes or “bound” metadata to work in all
    relevant cases.
  id: totrans-3184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当调用[`Query.count()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.count
    "sqlalchemy.orm.Query.count")、[`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update")、[`Query.delete()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.delete
    "sqlalchemy.orm.Query.delete")以及针对映射列、[`column_property`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property")对象以及从映射列派生的SQL函数和表达式的查询时，现在[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")的主要[`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")将传递给[`Session.get_bind()`](../orm/session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind")方法。这使得依赖于自定义[`Session.get_bind()`](../orm/session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind")方案或“绑定”元数据的会话在所有相关情况下都能正常工作。
- en: See also
  id: totrans-3185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Session.get_bind() will receive the Mapper in all relevant Query cases](migration_10.html#bug-3227)'
  id: totrans-3186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Session.get_bind()将在所有相关的查询情况下接收到Mapper](migration_10.html#bug-3227)'
- en: 'References: [#1326](https://www.sqlalchemy.org/trac/ticket/1326), [#3227](https://www.sqlalchemy.org/trac/ticket/3227),
    [#3242](https://www.sqlalchemy.org/trac/ticket/3242)'
  id: totrans-3187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1326](https://www.sqlalchemy.org/trac/ticket/1326), [#3227](https://www.sqlalchemy.org/trac/ticket/3227),
    [#3242](https://www.sqlalchemy.org/trac/ticket/3242)
- en: '**[orm] [bug]**'
  id: totrans-3188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The [`PropComparator.of_type()`](../orm/internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type") modifier has been improved in conjunction
    with loader directives such as [`joinedload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.joinedload
    "sqlalchemy.orm.joinedload") and [`contains_eager()`](../orm/queryguide/relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") such that if two [`PropComparator.of_type()`](../orm/internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type") modifiers of the same base type/path
    are encountered, they will be joined together into a single “polymorphic” entity,
    rather than replacing the entity of type A with the one of type B. E.g. a joinedload
    of `A.b.of_type(BSub1)->BSub1.c` combined with joinedload of `A.b.of_type(BSub2)->BSub2.c`
    will create a single joinedload of `A.b.of_type((BSub1, BSub2)) -> BSub1.c, BSub2.c`,
    without the need for the `with_polymorphic` to be explicit in the query.
  id: totrans-3189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`PropComparator.of_type()`](../orm/internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type")修饰符已经与加载指令（如[`joinedload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.joinedload
    "sqlalchemy.orm.joinedload")和[`contains_eager()`](../orm/queryguide/relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager")）一起改进，以便如果遇到两个相同基本类型/路径的[`PropComparator.of_type()`](../orm/internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type")修饰符，它们将被合并为单个“多态”实体，而不是用类型B的实体替换类型A的实体。例如，`A.b.of_type(BSub1)->BSub1.c`的joinedload与`A.b.of_type(BSub2)->BSub2.c`的joinedload将创建一个单个的joinedload
    `A.b.of_type((BSub1, BSub2)) -> BSub1.c, BSub2.c`，而不需要在查询中显式使用`with_polymorphic`。'
- en: See also
  id: totrans-3190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Eager Loading of Polymorphic Subtypes](../orm/queryguide/inheritance.html#eagerloading-polymorphic-subtypes)
    - contains an updated example illustrating the new format.'
  id: totrans-3191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[多态子类型的急加载](../orm/queryguide/inheritance.html#eagerloading-polymorphic-subtypes)
    - 包含一个更新的示例，展示了新的格式。'
- en: 'References: [#3256](https://www.sqlalchemy.org/trac/ticket/3256)'
  id: totrans-3192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3256](https://www.sqlalchemy.org/trac/ticket/3256)
- en: '**[orm] [bug]**'
  id: totrans-3193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Repaired support of the `copy.deepcopy()` call when used by the [`CascadeOptions`](../orm/internals.html#sqlalchemy.orm.CascadeOptions
    "sqlalchemy.orm.util.CascadeOptions") argument, which occurs if `copy.deepcopy()`
    is being used with [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") (not an officially supported use case). Pull request
    courtesy duesenfranz.
  id: totrans-3194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当[`CascadeOptions`](../orm/internals.html#sqlalchemy.orm.CascadeOptions "sqlalchemy.orm.util.CascadeOptions")参数使用`copy.deepcopy()`调用时的支持，这种情况发生在[`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")与`copy.deepcopy()`一起使用时（这不是官方支持的用例）。感谢 duesenfranz
    的拉取请求。
- en: '**[orm] [bug]**'
  id: totrans-3195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where [`Session.expunge()`](../orm/session_api.html#sqlalchemy.orm.Session.expunge
    "sqlalchemy.orm.Session.expunge") would not fully detach the given object if the
    object had been subject to a delete operation that was flushed, but not committed.
    This would also affect related operations like [`make_transient()`](../orm/session_api.html#sqlalchemy.orm.make_transient
    "sqlalchemy.orm.make_transient").
  id: totrans-3196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Session.expunge()`](../orm/session_api.html#sqlalchemy.orm.Session.expunge
    "sqlalchemy.orm.Session.expunge")在对象经历了已刷新但未提交的删除操作后，无法完全分离给定对象的错误。这也会影响到[`make_transient()`](../orm/session_api.html#sqlalchemy.orm.make_transient
    "sqlalchemy.orm.make_transient")等相关操作。
- en: See also
  id: totrans-3197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[session.expunge() will fully detach an object that’s been deleted](migration_10.html#bug-3139)'
  id: totrans-3198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[session.expunge() 现在会完全分离已删除的对象](migration_10.html#bug-3139)'
- en: 'References: [#3139](https://www.sqlalchemy.org/trac/ticket/3139)'
  id: totrans-3199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3139](https://www.sqlalchemy.org/trac/ticket/3139)
- en: '**[orm] [bug]**'
  id: totrans-3200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: A warning is emitted in the case of multiple relationships that ultimately will
    populate a foreign key column in conflict with another, where the relationships
    are attempting to copy values from different source columns. This occurs in the
    case where composite foreign keys with overlapping columns are mapped to relationships
    that each refer to a different referenced column. A new documentation section
    illustrates the example as well as how to overcome the issue by specifying “foreign”
    columns specifically on a per-relationship basis.
  id: totrans-3201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在多个关系最终将填充与另一个冲突的外键列的情况下，会发出警告，其中关系试图从不同源列复制值。这发生在将具有重叠列的复合外键映射到每个引用列不同的关系的情况下。一个新的文档部分说明了示例以及如何通过在每个关系上明确指定“外键”列来克服该问题。
- en: See also
  id: totrans-3202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Overlapping Foreign Keys](../orm/join_conditions.html#relationship-overlapping-foreignkeys)'
  id: totrans-3203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[重叠的外键](../orm/join_conditions.html#relationship-overlapping-foreignkeys)'
- en: 'References: [#3230](https://www.sqlalchemy.org/trac/ticket/3230)'
  id: totrans-3204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3230](https://www.sqlalchemy.org/trac/ticket/3230)
- en: '**[orm] [bug]**'
  id: totrans-3205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The [`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update") method will now convert string key names in the
    given dictionary of values into mapped attribute names against the mapped class
    being updated. Previously, string names were taken in directly and passed to the
    core update statement without any means to resolve against the mapped entity.
    Support for synonyms and hybrid attributes as the subject attributes of [`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update") are also supported.
  id: totrans-3206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update") 方法现在会将给定值字典中的字符串键名转换为正在更新的映射类的映射属性名称。以前，字符串名称直接被接受并传递给核心更新语句，没有任何方法可以解析到映射实体。[`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update") 的主题属性也支持同义词和混合属性。'
- en: See also
  id: totrans-3207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[query.update() now resolves string names into mapped attribute names](migration_10.html#bug-3228)'
  id: totrans-3208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[query.update() 现在将字符串名称解析为映射的属性名称](migration_10.html#bug-3228)'
- en: 'References: [#3228](https://www.sqlalchemy.org/trac/ticket/3228)'
  id: totrans-3209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3228](https://www.sqlalchemy.org/trac/ticket/3228)
- en: '**[orm] [bug]**'
  id: totrans-3210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Improvements to the mechanism used by [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") to locate “binds” (e.g. engines to use), such engines
    can be associated with mixin classes, concrete subclasses, as well as a wider
    variety of table metadata such as joined inheritance tables.
  id: totrans-3211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了[`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")用于定位“绑定”（例如要使用的引擎）的机制，这些引擎可以与混合类、具体子类以及更广泛的表元数据（如联合继承表）关联。
- en: See also
  id: totrans-3212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Session.get_bind() handles a wider variety of inheritance scenarios](migration_10.html#bug-3035)'
  id: totrans-3213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Session.get_bind() 处理更广泛的继承场景](migration_10.html#bug-3035)'
- en: 'References: [#3035](https://www.sqlalchemy.org/trac/ticket/3035)'
  id: totrans-3214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3035](https://www.sqlalchemy.org/trac/ticket/3035)
- en: '**[orm] [bug]**'
  id: totrans-3215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in single table inheritance where a chain of joins that included the
    same single inh entity more than once (normally this should raise an error) could,
    in some cases depending on what was being joined “from”, implicitly alias the
    second case of the single inh entity, producing a query that “worked”. But as
    this implicit aliasing is not intended in the case of single table inheritance,
    it didn’t really “work” fully and was very misleading, since it wouldn’t always
    appear.
  id: totrans-3216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了单表继承中的一个bug，其中包含了多次包含相同单一继承实体的连接链（通常应该引发错误）的情况，可能会在某些情况下，取决于从何处连接，隐式别名第二个单一继承实体的情况，生成一个“有效”的查询。但由于这种隐式别名并不是单表继承的意图，它并没有完全“有效”，并且非常具有误导性，因为它并不总是出现。
- en: See also
  id: totrans-3217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Changes and fixes in handling of duplicate join targets](migration_10.html#bug-3233)'
  id: totrans-3218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[处理重复连接目标中的更改和修复](migration_10.html#bug-3233)'
- en: 'References: [#3233](https://www.sqlalchemy.org/trac/ticket/3233)'
  id: totrans-3219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3233](https://www.sqlalchemy.org/trac/ticket/3233)
- en: '**[orm] [bug]**'
  id: totrans-3220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The ON clause rendered when using [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join"), [`Query.outerjoin()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.outerjoin
    "sqlalchemy.orm.Query.outerjoin"), or the standalone [`join()`](../orm/queryguide/api.html#sqlalchemy.orm.join
    "sqlalchemy.orm.join") / [`outerjoin()`](../orm/queryguide/api.html#sqlalchemy.orm.outerjoin
    "sqlalchemy.orm.outerjoin") functions to a single-inheritance subclass will now
    include the “single table criteria” in the ON clause even if the ON clause is
    otherwise hand-rolled; it is now added to the criteria using AND, the same way
    as if joining to a single-table target using relationship or similar.
  id: totrans-3221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")、[`Query.outerjoin()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.outerjoin
    "sqlalchemy.orm.Query.outerjoin")或独立的[`join()`](../orm/queryguide/api.html#sqlalchemy.orm.join
    "sqlalchemy.orm.join") / [`outerjoin()`](../orm/queryguide/api.html#sqlalchemy.orm.outerjoin
    "sqlalchemy.orm.outerjoin")函数连接到单一继承子类时，生成的ON子句现在将包括“单表条件”，即使ON子句是手动编写的；它现在使用AND将条件添加到ON子句中，方式与使用relationship或类似方法连接到单表目标时相同。
- en: This is sort of in-between feature and bug.
  id: totrans-3222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这在功能和bug之间有些模糊。
- en: See also
  id: totrans-3223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[single-table-inheritance criteria added to all ON clauses unconditionally](migration_10.html#migration-3222)'
  id: totrans-3224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[单表继承条件已无条件地添加到所有ON子句中](migration_10.html#migration-3222)'
- en: 'References: [#3222](https://www.sqlalchemy.org/trac/ticket/3222)'
  id: totrans-3225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3222](https://www.sqlalchemy.org/trac/ticket/3222)
- en: '**[orm] [bug]**'
  id: totrans-3226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: A major rework to the behavior of expression labels, most specifically when
    used with ColumnProperty constructs with custom SQL expressions and in conjunction
    with the “order by labels” logic first introduced in 0.9\. Fixes include that
    an `order_by(Entity.some_col_prop)` will now make use of “order by label” rules
    even if Entity has been subject to aliasing, either via inheritance rendering
    or via the use of the `aliased()` construct; rendering of the same column property
    multiple times with aliasing (e.g. `query(Entity.some_prop, entity_alias.some_prop)`)
    will label each occurrence of the entity with a distinct label, and additionally
    “order by label” rules will work for both (e.g. `order_by(Entity.some_prop, entity_alias.some_prop)`).
    Additional issues that could prevent the “order by label” logic from working in
    0.9, most notably that the state of a Label could change such that “order by label”
    would stop working depending on how things were called, has been fixed.
  id: totrans-3227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对表达式标签的行为进行了重大改进，特别是在与具有自定义SQL表达式的ColumnProperty构造一起使用时，以及与首次在0.9中引入的“按标签排序”逻辑结合使用时。修复包括，现在`order_by(Entity.some_col_prop)`将即使Entity经过别名处理（通过继承渲染或通过使用`aliased()`构造）也将使用“按标签排序”规则；使用别名多次渲染相同的列属性（例如`query(Entity.some_prop,
    entity_alias.some_prop)`)将为实体的每次出现标记一个不同的标签，并且此外，“按标签排序”规则将适用于两者（例如`order_by(Entity.some_prop,
    entity_alias.some_prop)`）。在0.9中可能阻止“按标签排序”逻辑工作的其他问题，尤其是标签的状态可能会发生变化，以至于“按标签排序”会根据调用方式停止工作的问题已经修复。
- en: See also
  id: totrans-3228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[ColumnProperty constructs work a lot better with aliases, order_by](migration_10.html#bug-3188)'
  id: totrans-3229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[ColumnProperty构造与别名、order_by更好地配合](migration_10.html#bug-3188)'
- en: 'References: [#3148](https://www.sqlalchemy.org/trac/ticket/3148), [#3188](https://www.sqlalchemy.org/trac/ticket/3188)'
  id: totrans-3230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3148](https://www.sqlalchemy.org/trac/ticket/3148), [#3188](https://www.sqlalchemy.org/trac/ticket/3188)
- en: '**[orm] [bug]**'
  id: totrans-3231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Changed the approach by which the “single inheritance criterion” is applied,
    when using `Query.from_self()`, or its common user [`Query.count()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.count
    "sqlalchemy.orm.Query.count"). The criteria to limit rows to those with a certain
    type is now indicated on the inside subquery, not the outside one, so that even
    if the “type” column is not available in the columns clause, we can filter on
    it on the “inner” query.
  id: totrans-3232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改变了使用`Query.from_self()`或其常见用户[`Query.count()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.count
    "sqlalchemy.orm.Query.count")时应用“单一继承标准”的方法。现在，将限制行数为特定类型的标准指示在内部子查询中，而不是外部子查询中，因此即使“type”列不在列子句中可用，我们也可以在“内部”查询中对其进行过滤。
- en: See also
  id: totrans-3233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Change to single-table-inheritance criteria when using from_self(), count()](migration_10.html#migration-3177)'
  id: totrans-3234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[使用from_self()、count()时单表继承标准的更改](migration_10.html#migration-3177)'
- en: 'References: [#3177](https://www.sqlalchemy.org/trac/ticket/3177)'
  id: totrans-3235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3177](https://www.sqlalchemy.org/trac/ticket/3177)
- en: '**[orm] [bug]**'
  id: totrans-3236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Made a small adjustment to the mechanics of lazy loading, such that it has less
    chance of interfering with a joinload() in the very rare circumstance that an
    object points to itself; in this scenario, the object refers to itself while loading
    its attributes which can cause a mixup between loaders. The use case of “object
    points to itself” is not fully supported, but the fix also removes some overhead
    so for now is part of testing.
  id: totrans-3237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对懒加载机制进行了小的调整，以减少在极为罕见的情况下干扰`joinload()`的可能性，即对象指向自身；在这种情况下，对象在加载其属性时会引用自身，这可能会导致加载器之间的混乱。“对象指向自身”的用例并未得到完全支持，但修复也减少了一些开销，因此目前是测试的一部分。
- en: 'References: [#3145](https://www.sqlalchemy.org/trac/ticket/3145)'
  id: totrans-3238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3145](https://www.sqlalchemy.org/trac/ticket/3145)
- en: '**[orm] [bug]**'
  id: totrans-3239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The “resurrect” ORM event has been removed. This event hook had no purpose since
    the old “mutable attribute” system was removed in 0.8.
  id: totrans-3240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已删除“复活”ORM事件。自从0.8版本中删除了旧的“可变属性”系统后，此事件挂钩就没有任何目的了。
- en: 'References: [#3171](https://www.sqlalchemy.org/trac/ticket/3171)'
  id: totrans-3241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3171](https://www.sqlalchemy.org/trac/ticket/3171)
- en: '**[orm] [bug]**'
  id: totrans-3242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where attribute “set” events or columns with `@validates` would have
    events triggered within the flush process, when those columns were the targets
    of a “fetch and populate” operation, such as an autoincremented primary key, a
    Python side default, or a server-side default “eagerly” fetched via RETURNING.
  id: totrans-3243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，当属性“set”事件或带有`@validates`的列在刷新过程中触发事件时，当这些列是“获取和填充”操作的目标时，例如自增主键、Python端默认值或通过RETURNING“急切”获取的服务器端默认值。
- en: 'References: [#3167](https://www.sqlalchemy.org/trac/ticket/3167)'
  id: totrans-3244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3167](https://www.sqlalchemy.org/trac/ticket/3167)
- en: '**[orm] [bug] [py3k]**'
  id: totrans-3245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [py3k]**'
- en: The [`IdentityMap`](../orm/internals.html#sqlalchemy.orm.IdentityMap "sqlalchemy.orm.IdentityMap")
    exposed from [`Session.identity_map`](../orm/session_api.html#sqlalchemy.orm.Session.identity_map
    "sqlalchemy.orm.Session.identity_map") now returns lists for `items()` and `values()`
    in Py3K. Early porting to Py3K here had these returning iterators, when they technically
    should be “iterable views”..for now, lists are OK.
  id: totrans-3246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从[`Session.identity_map`](../orm/session_api.html#sqlalchemy.orm.Session.identity_map
    "sqlalchemy.orm.Session.identity_map")暴露的[`IdentityMap`](../orm/internals.html#sqlalchemy.orm.IdentityMap
    "sqlalchemy.orm.IdentityMap")现在在Py3K中为`items()`和`values()`返回列表。早期移植到Py3K时，这些返回迭代器，但从技术上讲应该是“可迭代视图”..目前，列表是可以的。
- en: '**[orm] [bug]**'
  id: totrans-3247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The “evaluator” for query.update()/delete() won’t work with multi-table updates,
    and needs to be set to synchronize_session=False or synchronize_session=’fetch’;
    this now raises an exception, with a message to change the synchronize setting.
    This is upgraded from a warning emitted as of 0.9.7.
  id: totrans-3248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 查询.update()/delete()的“评估器”不适用于多表更新，并且需要设置为synchronize_session=False或synchronize_session=’fetch’；现在会引发异常，并显示更改同步设置的消息。这是从0.9.7开始发出的警告升级。
- en: 'References: [#3117](https://www.sqlalchemy.org/trac/ticket/3117)'
  id: totrans-3249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3117](https://www.sqlalchemy.org/trac/ticket/3117)
- en: '**[orm] [enhancement]**'
  id: totrans-3250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [enhancement]**'
- en: Adjustment to attribute mechanics concerning when a value is implicitly initialized
    to None via first access; this action, which has always resulted in a population
    of the attribute, no longer does so; the None value is returned but the underlying
    attribute receives no set event. This is consistent with how collections work
    and allows attribute mechanics to behave more consistently; in particular, getting
    an attribute with no value does not squash the event that should proceed if the
    value is actually set to None.
  id: totrans-3251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整属性机制，关于何时通过首次访问隐式初始化值为 None；这一操作，一直导致属性的填充，但现在不再这样；返回 None 值，但底层属性不接收设置事件。这与集合的工作方式一致，并允许属性机制更一致地行为；特别是，获取一个没有值的属性不会压制事件，如果值实际上被设置为
    None，则事件应该继续。
- en: See also
  id: totrans-3252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参见
- en: '[Changes to attribute events and other operations regarding attributes that
    have no pre-existing value](migration_10.html#migration-3061)'
  id: totrans-3253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[关于没有预先存在值的属性事件和其他操作的更改](migration_10.html#migration-3061)'
- en: where bound parameters are rendered inline as strings based on a compile-time
    option. Work on this feature is courtesy of Dobes Vandermeer.
  id: totrans-3254
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 其中绑定参数根据编译时选项作为字符串内联呈现。此功能的工作由 Dobes Vandermeer 提供。
- en: See also
  id: totrans-3255
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 请参见
- en: ''
  id: totrans-3256
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Select/Query LIMIT / OFFSET may be specified as an arbitrary SQL expression](migration_10.html#feature-3034).'
  id: totrans-3257
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[Select/Query LIMIT / OFFSET 可以指定为任意 SQL 表达式](migration_10.html#feature-3034)。'
- en: 'References: [#3061](https://www.sqlalchemy.org/trac/ticket/3061)'
  id: totrans-3258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3061](https://www.sqlalchemy.org/trac/ticket/3061)
- en: orm declarative
  id: totrans-3259
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm declarative
- en: '**[orm] [declarative] [feature]**'
  id: totrans-3260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [feature]**'
- en: The [`declared_attr`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr "sqlalchemy.orm.declared_attr")
    construct has newly improved behaviors and features in conjunction with declarative.
    The decorated function will now have access to the final column copies present
    on the local mixin when invoked, and will also be invoked exactly once for each
    mapped class, the returned result being memoized. A new modifier [`declared_attr.cascading`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr.cascading
    "sqlalchemy.orm.declared_attr.cascading") is added as well.
  id: totrans-3261
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`declared_attr`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr "sqlalchemy.orm.declared_attr")
    构造在与 declarative 结合使用时具有新的改进行为和特性。装饰的函数在调用时将有权访问本地 mixin 上存在的最终列副本，并且将确保为每个映射类仅调用一次，返回的结果将被缓存。还添加了一个新的修饰符
    [`declared_attr.cascading`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr.cascading
    "sqlalchemy.orm.declared_attr.cascading")。'
- en: See also
  id: totrans-3262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参见
- en: '[Improvements to declarative mixins, @declared_attr and related features](migration_10.html#feature-3150)'
  id: totrans-3263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[对 declarative mixins、@declared_attr 和相关特性的改进](migration_10.html#feature-3150)'
- en: 'References: [#3150](https://www.sqlalchemy.org/trac/ticket/3150)'
  id: totrans-3264
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3150](https://www.sqlalchemy.org/trac/ticket/3150)
- en: '**[orm] [declarative] [bug]**'
  id: totrans-3265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Fixed “‘NoneType’ object has no attribute ‘concrete’” error when using [`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase") in conjunction with a subclass
    that declares `__abstract__`.
  id: totrans-3266
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用 [`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase") 与声明 `__abstract__` 的子类时出现的“‘NoneType’
    对象没有 ‘concrete’ 属性”错误。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-3267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.8
- en: 'References: [#3185](https://www.sqlalchemy.org/trac/ticket/3185)'
  id: totrans-3268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3185](https://www.sqlalchemy.org/trac/ticket/3185)
- en: '**[orm] [declarative] [bug]**'
  id: totrans-3269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Fixed bug where using an `__abstract__` mixin in the middle of a declarative
    inheritance hierarchy would prevent attributes and configuration being correctly
    propagated from the base class to the inheriting class.
  id: totrans-3270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在声明继承层次结构中间使用 `__abstract__` mixin 会阻止属性和配置正确从基类传播到继承类的错误。
- en: 'References: [#3219](https://www.sqlalchemy.org/trac/ticket/3219), [#3240](https://www.sqlalchemy.org/trac/ticket/3240)'
  id: totrans-3271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3219](https://www.sqlalchemy.org/trac/ticket/3219), [#3240](https://www.sqlalchemy.org/trac/ticket/3240)
- en: '**[orm] [declarative] [bug]**'
  id: totrans-3272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: A relationship set up with [`declared_attr`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr") on a [`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase") base class will now be configured
    on the abstract base mapping automatically, in addition to being set up on descendant
    concrete classes as usual.
  id: totrans-3273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用[`declared_attr`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr "sqlalchemy.orm.declared_attr")在[`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase")基类上建立的关系现在将自动配置在抽象基类映射上，除了像往常一样在后代具体类上设置。
- en: See also
  id: totrans-3274
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Improvements to declarative mixins, @declared_attr and related features](migration_10.html#feature-3150)'
  id: totrans-3275
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[改进声明性混合，@declared_attr和相关功能](migration_10.html#feature-3150)'
- en: 'References: [#2670](https://www.sqlalchemy.org/trac/ticket/2670)'
  id: totrans-3276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2670](https://www.sqlalchemy.org/trac/ticket/2670)
- en: examples
  id: totrans-3277
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples] [feature]**'
  id: totrans-3278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[示例] [特性]**'
- en: Added a new example illustrating materialized paths, using the latest relationship
    features. Example courtesy Jack Zhou.
  id: totrans-3279
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个使用最新关系特性说明材料化路径的新示例。示例由Jack Zhou提供。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-3280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.9.5
- en: '**[examples] [feature]**'
  id: totrans-3281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[示例] [特性]**'
- en: A new suite of examples dedicated to providing a detailed study into performance
    of SQLAlchemy ORM and Core, as well as the DBAPI, from multiple perspectives.
    The suite runs within a container that provides built in profiling displays both
    through console output as well as graphically via the RunSnake tool.
  id: totrans-3282
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个新的示例套件，专门提供了对SQLAlchemy ORM和Core以及DBAPI性能的详细研究，从多个角度进行。该套件在一个容器内运行，通过控制台输出以及通过RunSnake工具图形化显示内置的性能分析。
- en: See also
  id: totrans-3283
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Performance](../orm/examples.html#examples-performance)'
  id: totrans-3284
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[性能](../orm/examples.html#examples-performance)'
- en: '**[examples] [bug]**'
  id: totrans-3285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[示例] [错误]**'
- en: Updated the [Versioning with a History Table](../orm/examples.html#examples-versioned-history)
    example such that mapped columns are re-mapped to match column names as well as
    grouping of columns; in particular, this allows columns that are explicitly grouped
    in a same-column-named joined inheritance scenario to be mapped in the same way
    in the history mappings, avoiding warnings added in the 0.9 series regarding this
    pattern and allowing the same view of attribute keys.
  id: totrans-3286
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新了[带有历史表的版本控制](../orm/examples.html#examples-versioned-history)示例，使映射列重新映射以匹配列名以及列的分组；特别是，这允许在同名列连接继承场景中明确分组的列在历史映射中以相同方式映射，避免了0.9系列中关于此模式的警告，并允许属性键的相同视图。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-3287
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.9.9
- en: '**[examples] [bug]**'
  id: totrans-3288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[示例] [错误]**'
- en: Fixed a bug in the examples/generic_associations/discriminator_on_association.py
    example, where the subclasses of AddressAssociation were not being mapped as “single
    table inheritance”, leading to problems when trying to use the mappings further.
  id: totrans-3289
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了示例/generic_associations/discriminator_on_association.py示例中的一个bug，其中AddressAssociation的子类没有被映射为“单表继承”，导致在尝试进一步使用映射时出现问题。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-3290
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.9.9
- en: engine
  id: totrans-3291
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [feature]**'
  id: totrans-3292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [特性]**'
- en: Added new user-space accessors for viewing transaction isolation levels; [`Connection.get_isolation_level()`](../core/connections.html#sqlalchemy.engine.Connection.get_isolation_level
    "sqlalchemy.engine.Connection.get_isolation_level"), [`Connection.default_isolation_level`](../core/connections.html#sqlalchemy.engine.Connection.default_isolation_level
    "sqlalchemy.engine.Connection.default_isolation_level").
  id: totrans-3293
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了用于查看事务隔离级别的新用户空间访问器；[`Connection.get_isolation_level()`](../core/connections.html#sqlalchemy.engine.Connection.get_isolation_level
    "sqlalchemy.engine.Connection.get_isolation_level"), [`Connection.default_isolation_level`](../core/connections.html#sqlalchemy.engine.Connection.default_isolation_level
    "sqlalchemy.engine.Connection.default_isolation_level").
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-3294
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.9.9
- en: '**[engine] [feature]**'
  id: totrans-3295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [特性]**'
- en: Added new event `ConnectionEvents.handle_error()`, a more fully featured and
    comprehensive replacement for `ConnectionEvents.dbapi_error()`.
  id: totrans-3296
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的事件`ConnectionEvents.handle_error()`，这是`ConnectionEvents.dbapi_error()`的更全面和全面的替代品。
- en: 'This change is also **backported** to: 0.9.7'
  id: totrans-3297
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.9.7
- en: 'References: [#3076](https://www.sqlalchemy.org/trac/ticket/3076)'
  id: totrans-3298
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3076](https://www.sqlalchemy.org/trac/ticket/3076)
- en: '**[engine] [feature]**'
  id: totrans-3299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [特性]**'
- en: A new style of warning can be emitted which will “filter” up to N occurrences
    of a parameterized string. This allows parameterized warnings that can refer to
    their arguments to be delivered a fixed number of times until allowing Python
    warning filters to squelch them, and prevents memory from growing unbounded within
    Python’s warning registries.
  id: totrans-3300
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以发出新的警告样式，这些警告样式将“过滤”掉参数化字符串的最多 N 次出现。这允许参数化警告可以引用它们的参数，直到允许 Python 警告过滤器将它们压制，并防止
    Python 的警告注册表内存无限增长。
- en: See also
  id: totrans-3301
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Session.get_bind() handles a wider variety of inheritance scenarios](migration_10.html#feature-3178)'
  id: totrans-3302
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Session.get_bind() 处理更多种类的继承情况](migration_10.html#feature-3178)'
- en: 'References: [#3178](https://www.sqlalchemy.org/trac/ticket/3178)'
  id: totrans-3303
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3178](https://www.sqlalchemy.org/trac/ticket/3178)
- en: '**[engine] [bug]**'
  id: totrans-3304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误]**'
- en: Fixed bug in [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") and pool where the [`Connection.invalidate()`](../core/connections.html#sqlalchemy.engine.Connection.invalidate
    "sqlalchemy.engine.Connection.invalidate") method, or an invalidation due to a
    database disconnect, would fail if the `isolation_level` parameter had been used
    with [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options"); the “finalizer” that resets
    the isolation level would be called on the no longer opened connection.
  id: totrans-3305
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    和池中的错误，当使用 [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") 时，[`Connection.invalidate()`](../core/connections.html#sqlalchemy.engine.Connection.invalidate
    "sqlalchemy.engine.Connection.invalidate") 方法或由于数据库断开而使连接无效时，如果 `isolation_level`
    参数已被使用；将在不再打开的连接上调用重置隔离级别的“finalizer”。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-3306
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.9.9
- en: 'References: [#3302](https://www.sqlalchemy.org/trac/ticket/3302)'
  id: totrans-3307
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3302](https://www.sqlalchemy.org/trac/ticket/3302)
- en: '**[engine] [bug]**'
  id: totrans-3308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误]**'
- en: A warning is emitted if the `isolation_level` parameter is used with [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") when a [`Transaction`](../core/connections.html#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction") is in play; DBAPIs and/or SQLAlchemy dialects
    such as psycopg2, MySQLdb may implicitly rollback or commit the transaction, or
    not change the setting til next transaction, so this is never safe.
  id: totrans-3309
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果在进行 [`Transaction`](../core/connections.html#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction") 时使用了 `isolation_level` 参数，将发出警告；DBAPI 和/或 SQLAlchemy
    方言（如 psycopg2、MySQLdb）可能会隐式回滚或提交事务，或者在下一次事务中不更改设置，因此这绝不安全。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-3310
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.9.9
- en: 'References: [#3296](https://www.sqlalchemy.org/trac/ticket/3296)'
  id: totrans-3311
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3296](https://www.sqlalchemy.org/trac/ticket/3296)
- en: '**[engine] [bug]**'
  id: totrans-3312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误]**'
- en: The execution options passed to an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") either via [`create_engine.execution_options`](../core/engines.html#sqlalchemy.create_engine.params.execution_options
    "sqlalchemy.create_engine") or [`Engine.update_execution_options()`](../core/connections.html#sqlalchemy.engine.Engine.update_execution_options
    "sqlalchemy.engine.Engine.update_execution_options") are not passed to the special
    [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    used to initialize the dialect within the “first connect” event; dialects will
    usually perform their own queries in this phase, and none of the current available
    options should be applied here. In particular, the “autocommit” option was causing
    an attempt to autocommit within this initial connect which would fail with an
    AttributeError due to the non-standard state of the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").
  id: totrans-3313
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过[`create_engine.execution_options`](../core/engines.html#sqlalchemy.create_engine.params.execution_options
    "sqlalchemy.create_engine")或[`Engine.update_execution_options()`](../core/connections.html#sqlalchemy.engine.Engine.update_execution_options
    "sqlalchemy.engine.Engine.update_execution_options")传递给[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")的执行选项不会传递给用于在“第一次连接”事件中初始化方言的特殊[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")；方言通常会在此阶段执行自己的查询，并且当前可用的选项不应该应用于此处。特别是，“autocommit”选项导致在这种初始连接中尝试自动提交，这将由于[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")的非标准状态而导致AttributeError。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-3314
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.9.8
- en: 'References: [#3200](https://www.sqlalchemy.org/trac/ticket/3200)'
  id: totrans-3315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3200](https://www.sqlalchemy.org/trac/ticket/3200)
- en: '**[engine] [bug]**'
  id: totrans-3316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误]**'
- en: The string keys that are used to determine the columns impacted for an INSERT
    or UPDATE are now sorted when they contribute towards the “compiled cache” cache
    key. These keys were previously not deterministically ordered, meaning the same
    statement could be cached multiple times on equivalent keys, costing both in terms
    of memory as well as performance.
  id: totrans-3317
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于确定INSERT或UPDATE受影响列的字符串键现在在它们对“编译缓存”缓存键的贡献时进行排序。在以前，这些键没有确定性地排序，这意味着相同的语句可能会根据等效键多次被缓存，这既会在内存和性能方面造成损失。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-3318
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.9.8
- en: 'References: [#3165](https://www.sqlalchemy.org/trac/ticket/3165)'
  id: totrans-3319
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3165](https://www.sqlalchemy.org/trac/ticket/3165)
- en: '**[engine] [bug]**'
  id: totrans-3320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误]**'
- en: Fixed bug which would occur if a DBAPI exception occurs when the engine first
    connects and does its initial checks, and the exception is not a disconnect exception,
    yet the cursor raises an error when we try to close it. In this case the real
    exception would be quashed as we tried to log the cursor close exception via the
    connection pool and failed, as we were trying to access the pool’s logger in a
    way that is inappropriate in this very specific scenario.
  id: totrans-3321
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，当引擎首次连接并进行初始检查时发生DBAPI异常，并且异常不是断开连接异常，但是当我们尝试关闭光标时光标引发错误时，会发生bug。在这种情况下，由于我们试图通过连接池记录光标关闭异常并失败，因为我们试图以不适合这种非常特定情况的方式访问池的记录器，真正的异常将被扼杀。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-3322
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.9.5
- en: 'References: [#3063](https://www.sqlalchemy.org/trac/ticket/3063)'
  id: totrans-3323
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3063](https://www.sqlalchemy.org/trac/ticket/3063)
- en: '**[engine] [bug]**'
  id: totrans-3324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误]**'
- en: Fixed some “double invalidate” situations were detected where a connection invalidation
    could occur within an already critical section like a connection.close(); ultimately,
    these conditions are caused by the change in [#2907](https://www.sqlalchemy.org/trac/ticket/2907),
    in that the “reset on return” feature calls out to the Connection/Transaction
    in order to handle it, where “disconnect detection” might be caught. However,
    it’s possible that the more recent change in [#2985](https://www.sqlalchemy.org/trac/ticket/2985)
    made it more likely for this to be seen as the “connection invalidate” operation
    is much quicker, as the issue is more reproducible on 0.9.4 than 0.9.3.
  id: totrans-3325
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一些检测到的“双重失效”情况，其中连接失效可能发生在已经处于关键部分的情况下，比如连接关闭(); 最终，这些条件是由于[#2907](https://www.sqlalchemy.org/trac/ticket/2907)中的更改引起的，因为“返回时重置”功能调用Connection/Transaction来处理它，其中可能会被捕获“断开连接检测”。然而，最近在[#2985](https://www.sqlalchemy.org/trac/ticket/2985)中的更改可能使得这种情况更容易被视为“连接失效”操作更快，因为在0.9.4上更容易复现这个问题，而在0.9.3上不太容易。
- en: Checks are now added within any section that an invalidate might occur to halt
    further disallowed operations on the invalidated connection. This includes two
    fixes both at the engine level and at the pool level. While the issue was observed
    with highly concurrent gevent cases, it could in theory occur in any kind of scenario
    where a disconnect occurs within the connection close operation.
  id: totrans-3326
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在在发生任何可能发生invalidate的部分内添加了检查，以阻止对无效连接进行进一步的不允许的操作。这包括在引擎级别和池级别都有两个修复。虽然问题在高度并发的gevent情况下观察到，但理论上可以在任何发生连接关闭操作时发生断开连接的情况下发生。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-3327
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**反向移植**至：0.9.5
- en: 'References: [#3043](https://www.sqlalchemy.org/trac/ticket/3043)'
  id: totrans-3328
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3043](https://www.sqlalchemy.org/trac/ticket/3043)
- en: '**[engine] [bug]**'
  id: totrans-3329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误]**'
- en: The engine-level error handling and wrapping routines will now take effect in
    all engine connection use cases, including when user-custom connect routines are
    used via the [`create_engine.creator`](../core/engines.html#sqlalchemy.create_engine.params.creator
    "sqlalchemy.create_engine") parameter, as well as when the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") encounters a connection error on revalidation.
  id: totrans-3330
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引擎级错误处理和包装例程现在将在所有引擎连接用例中生效，包括当用户自定义连接例程通过[`create_engine.creator`](../core/engines.html#sqlalchemy.create_engine.params.creator
    "sqlalchemy.create_engine")参数使用时，以及当[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")在重新验证时遇到连接错误时。
- en: See also
  id: totrans-3331
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[DBAPI exception wrapping and handle_error() event improvements](migration_10.html#change-3266)'
  id: totrans-3332
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[DBAPI异常包装和handle_error()事件改进](migration_10.html#change-3266)'
- en: 'References: [#3266](https://www.sqlalchemy.org/trac/ticket/3266)'
  id: totrans-3333
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3266](https://www.sqlalchemy.org/trac/ticket/3266)
- en: '**[engine] [bug]**'
  id: totrans-3334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误]**'
- en: Removing (or adding) an event listener at the same time that the event is being
    run itself, either from inside the listener or from a concurrent thread, now raises
    a RuntimeError, as the collection used is now an instance of `collections.deque()`
    and does not support changes while being iterated. Previously, a plain Python
    list was used where removal from inside the event itself would produce silent
    failures.
  id: totrans-3335
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在事件监听器正在运行时删除（或添加）事件监听器，无论是从监听器内部还是从并发线程中，现在都会引发RuntimeError，因为现在使用的集合是`collections.deque()`的实例，并且不支持在迭代时进行更改。以前，使用的是简单的Python列表，其中从事件内部删除将产生静默失败。
- en: 'References: [#3163](https://www.sqlalchemy.org/trac/ticket/3163)'
  id: totrans-3336
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3163](https://www.sqlalchemy.org/trac/ticket/3163)
- en: sql
  id: totrans-3337
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-3338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [特性]**'
- en: Liberalized the contract for [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") a bit in that you can specify a [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") expression as the target; the index no longer
    needs to have a table-bound column present if the index is to be manually added
    to the table, either via inline declaration or via [`Table.append_constraint()`](../core/metadata.html#sqlalchemy.schema.Table.append_constraint
    "sqlalchemy.schema.Table.append_constraint").
  id: totrans-3339
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在一定程度上放宽了[`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")的约定，如果要手动将索引添加到表中，则可以将[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")表达式指定为目标；如果索引要通过内联声明或通过[`Table.append_constraint()`](../core/metadata.html#sqlalchemy.schema.Table.append_constraint
    "sqlalchemy.schema.Table.append_constraint")添加到表中，则索引不再需要存在表绑定列。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-3340
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**反向移植**至：0.9.5
- en: 'References: [#3028](https://www.sqlalchemy.org/trac/ticket/3028)'
  id: totrans-3341
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3028](https://www.sqlalchemy.org/trac/ticket/3028)
- en: '**[sql] [feature]**'
  id: totrans-3342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [特性]**'
- en: Added new flag [`between.symmetric`](../core/sqlelement.html#sqlalchemy.sql.expression.between.params.symmetric
    "sqlalchemy.sql.expression.between"), when set to True renders “BETWEEN SYMMETRIC”.
    Also added a new negation operator “notbetween_op”, which now allows an expression
    like `~col.between(x, y)` to render as “col NOT BETWEEN x AND y”, rather than
    a parenthesized NOT string.
  id: totrans-3343
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的标志[`between.symmetric`](../core/sqlelement.html#sqlalchemy.sql.expression.between.params.symmetric
    "sqlalchemy.sql.expression.between")，当设置为True时渲染“BETWEEN SYMMETRIC”。还添加了一个新的否定运算符“notbetween_op”，现在允许像`~col.between(x,
    y)`这样的表达式渲染为“col NOT BETWEEN x AND y”，而不是带括号的NOT字符串。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-3344
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**反向移植**至：0.9.5
- en: 'References: [#2990](https://www.sqlalchemy.org/trac/ticket/2990)'
  id: totrans-3345
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2990](https://www.sqlalchemy.org/trac/ticket/2990)
- en: '**[sql] [feature]**'
  id: totrans-3346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [特性]**'
- en: The SQL compiler now generates the mapping of expected columns such that they
    are matched to the received result set positionally, rather than by name. Originally,
    this was seen as a way to handle cases where we had columns returned with difficult-to-predict
    names, though in modern use that issue has been overcome by anonymous labeling.
    In this version, the approach basically reduces function call count per-result
    by a few dozen calls, or more for larger sets of result columns. The approach
    still degrades into a modern version of the old approach if any discrepancy in
    size exists between the compiled set of columns versus what was received, so there’s
    no issue for partially or fully textual compilation scenarios where these lists
    might not line up.
  id: totrans-3347
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQL 编译器现在生成预期列的映射，使其按位置与接收到的结果集匹配，而不是按名称。最初，这被视为一种处理返回具有难以预测名称的列的情况的方法，尽管在现代使用中，这个问题已经通过匿名标记得以解决。在这个版本中，该方法基本上通过减少每个结果的函数调用次数几十次，或者对于更大的结果列集合来说更多，来降低函数调用次数。如果编译的列集合与接收到的列存在大小上的任何差异，该方法仍然会退化为旧方法的现代版本，因此在部分或完全文本编译场景中，这些列表可能不会对齐时不会出现问题。
- en: 'References: [#918](https://www.sqlalchemy.org/trac/ticket/918)'
  id: totrans-3348
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#918](https://www.sqlalchemy.org/trac/ticket/918)
- en: '**[sql] [feature]**'
  id: totrans-3349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Literal values within a [`DefaultClause`](../core/defaults.html#sqlalchemy.schema.DefaultClause
    "sqlalchemy.schema.DefaultClause"), which is invoked when using the [`Column.server_default`](../core/metadata.html#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column") parameter, will now be rendered using the “inline”
    compiler, so that they are rendered as-is, rather than as bound parameters.
  id: totrans-3350
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 [`DefaultClause`](../core/defaults.html#sqlalchemy.schema.DefaultClause "sqlalchemy.schema.DefaultClause")
    中的字面值，当使用 [`Column.server_default`](../core/metadata.html#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column") 参数时调用时，现在将使用“内联”编译器进行呈现，以便它们按原样呈现，而不是作为绑定参数。
- en: See also
  id: totrans-3351
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Column server defaults now render literal values](migration_10.html#change-3087)'
  id: totrans-3352
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[列服务器默认值现在呈现字面值](migration_10.html#change-3087)'
- en: 'References: [#3087](https://www.sqlalchemy.org/trac/ticket/3087)'
  id: totrans-3353
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3087](https://www.sqlalchemy.org/trac/ticket/3087)
- en: '**[sql] [feature]**'
  id: totrans-3354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: The type of expression is reported when an object passed to a SQL expression
    unit can’t be interpreted as a SQL fragment; pull request courtesy Ryan P. Kelly.
  id: totrans-3355
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当传递给 SQL 表达式单元的对象无法解释为 SQL 片段时，报告表达式的类型；感谢 Ryan P. Kelly 提交的拉取请求。
- en: '**[sql] [feature]**'
  id: totrans-3356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added a new parameter [`Table.tometadata.name`](../core/metadata.html#sqlalchemy.schema.Table.tometadata.params.name
    "sqlalchemy.schema.Table.tometadata") to the [`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata") method. Similar to [`Table.tometadata.schema`](../core/metadata.html#sqlalchemy.schema.Table.tometadata.params.schema
    "sqlalchemy.schema.Table.tometadata"), this argument causes the newly copied [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") to take on the new name instead of the existing one.
    An interesting capability this adds is that of copying a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object to the *same* [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") target with a new name. Pull request courtesy n.d.
    parker.
  id: totrans-3357
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 [`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata") 方法添加了一个新参数 [`Table.tometadata.name`](../core/metadata.html#sqlalchemy.schema.Table.tometadata.params.name
    "sqlalchemy.schema.Table.tometadata")。与 [`Table.tometadata.schema`](../core/metadata.html#sqlalchemy.schema.Table.tometadata.params.schema
    "sqlalchemy.schema.Table.tometadata") 类似，此参数导致新复制的 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 使用新名称而不是现有名称。这种功能的一个有趣之处在于，它可以将 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 对象复制到*相同的* [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") 目标中并使用新名称。感谢 n.d. parker 提交的拉取请求。
- en: '**[sql] [feature]**'
  id: totrans-3358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Exception messages have been spiffed up a bit. The SQL statement and parameters
    are not displayed if None, reducing confusion for error messages that weren’t
    related to a statement. The full module and classname for the DBAPI-level exception
    is displayed, making it clear that this is a wrapped DBAPI exception. The statement
    and parameters themselves are bounded within a bracketed sections to better isolate
    them from the error message and from each other.
  id: totrans-3359
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 异常消息稍作调整。如果为 None，则不显示 SQL 语句和参数，减少与语句无关的错误消息的混淆。显示了 DBAPI 级别异常的完整模块和类名，明确表明这是一个包装的
    DBAPI 异常。语句和参数本身被限定在括号内，以更好地将它们与错误消息和彼此隔离开来。
- en: 'References: [#3172](https://www.sqlalchemy.org/trac/ticket/3172)'
  id: totrans-3360
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3172](https://www.sqlalchemy.org/trac/ticket/3172)
- en: '**[sql] [feature]**'
  id: totrans-3361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: '[`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select") now includes Python and SQL-expression
    defaults if otherwise unspecified; the limitation where non- server column defaults
    aren’t included in an INSERT FROM SELECT is now lifted and these expressions are
    rendered as constants into the SELECT statement.'
  id: totrans-3362
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select") 现在包括 Python 和 SQL 表达式默认值，如果未指定；解除了非服务器列默认值不包括在
    INSERT FROM SELECT 中的限制，并将这些表达式作为常量呈现到 SELECT 语句中。'
- en: See also
  id: totrans-3363
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[INSERT FROM SELECT now includes Python and SQL-expression defaults](migration_10.html#feature-insert-from-select-defaults)'
  id: totrans-3364
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[INSERT FROM SELECT 现在包括 Python 和 SQL 表达式默认值](migration_10.html#feature-insert-from-select-defaults)'
- en: '**[sql] [feature]**'
  id: totrans-3365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: The [`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") construct is now included when reflecting
    a [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object, for databases where this is applicable. In order to achieve this with
    sufficient accuracy, MySQL and PostgreSQL now contain features that correct for
    the duplication of indexes and unique constraints when reflecting tables, indexes,
    and constraints. In the case of MySQL, there is not actually a “unique constraint”
    concept independent of a “unique index”, so for this backend [`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") continues to remain non-present for a reflected
    [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table").
    For PostgreSQL, the query used to detect indexes against `pg_index` has been improved
    to check for the same construct in `pg_constraint`, and the implicitly constructed
    unique index is not included with a reflected [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table").
  id: totrans-3366
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当反射一个 [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    对象时，现在包括了 [`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") 构造，适用于这些数据库。为了以足够的准确性实现这一点，MySQL 和 PostgreSQL
    现在包含了纠正索引和唯一约束重复的功能，当反射表、索引和约束时。对于 MySQL，实际上没有独立于“唯一索引”的“唯一约束”概念，因此对于这个后端，[`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") 仍然不会出现在反射的 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 中。对于 PostgreSQL，用于检测 `pg_index` 中的索引的查询已经改进，以检查 `pg_constraint`
    中的相同构造，并且隐式构建的唯一索引不包含在反射的 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 中。
- en: In both cases, the [`Inspector.get_indexes()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_indexes
    "sqlalchemy.engine.reflection.Inspector.get_indexes") and the [`Inspector.get_unique_constraints()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_unique_constraints
    "sqlalchemy.engine.reflection.Inspector.get_unique_constraints") methods return
    both constructs individually, but include a new token `duplicates_constraint`
    in the case of PostgreSQL or `duplicates_index` in the case of MySQL to indicate
    when this condition is detected. Pull request courtesy Johannes Erdfelt.
  id: totrans-3367
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这两种情况下，[`Inspector.get_indexes()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_indexes
    "sqlalchemy.engine.reflection.Inspector.get_indexes") 和 [`Inspector.get_unique_constraints()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_unique_constraints
    "sqlalchemy.engine.reflection.Inspector.get_unique_constraints") 方法分别返回这两种构造，但在
    PostgreSQL 的情况下包含一个新的标记 `duplicates_constraint`，在 MySQL 的情况下包含一个新的标记 `duplicates_index`，以指示检测到此条件时。感谢
    Johannes Erdfelt 的拉取请求。
- en: See also
  id: totrans-3368
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[UniqueConstraint is now part of the Table reflection process](migration_10.html#feature-3184)'
  id: totrans-3369
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[UniqueConstraint 现在是表反射过程的一部分](migration_10.html#feature-3184)'
- en: 'References: [#3184](https://www.sqlalchemy.org/trac/ticket/3184)'
  id: totrans-3370
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3184](https://www.sqlalchemy.org/trac/ticket/3184)
- en: '**[sql] [feature]**'
  id: totrans-3371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added new method [`Select.with_statement_hint()`](../core/selectable.html#sqlalchemy.sql.expression.Select.with_statement_hint
    "sqlalchemy.sql.expression.Select.with_statement_hint") and ORM method [`Query.with_statement_hint()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.with_statement_hint
    "sqlalchemy.orm.Query.with_statement_hint") to support statement-level hints that
    are not specific to a table.
  id: totrans-3372
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新方法[`Select.with_statement_hint()`](../core/selectable.html#sqlalchemy.sql.expression.Select.with_statement_hint
    "sqlalchemy.sql.expression.Select.with_statement_hint")和 ORM 方法[`Query.with_statement_hint()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.with_statement_hint
    "sqlalchemy.orm.Query.with_statement_hint")，以支持不特定于表的语句级提示。
- en: 'References: [#3206](https://www.sqlalchemy.org/trac/ticket/3206)'
  id: totrans-3373
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3206](https://www.sqlalchemy.org/trac/ticket/3206)
- en: '**[sql] [feature]**'
  id: totrans-3374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: The `info` parameter has been added as a constructor argument to all schema
    constructs including [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData"), [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index"), [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey"), [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint"), [`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint"), [`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint"), [`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint").
  id: totrans-3375
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`info` 参数已添加为所有模式构造函数的构造参数，包括[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")、[`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")、[`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey")、[`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")、[`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint")、[`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint")、[`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint")。'
- en: 'References: [#2963](https://www.sqlalchemy.org/trac/ticket/2963)'
  id: totrans-3376
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2963](https://www.sqlalchemy.org/trac/ticket/2963)
- en: '**[sql] [feature]**'
  id: totrans-3377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: The [`Table.autoload_with`](../core/metadata.html#sqlalchemy.schema.Table.params.autoload_with
    "sqlalchemy.schema.Table") flag now implies that [`Table.autoload`](../core/metadata.html#sqlalchemy.schema.Table.params.autoload
    "sqlalchemy.schema.Table") should be `True`. Pull request courtesy Malik Diarra.
  id: totrans-3378
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Table.autoload_with`](../core/metadata.html#sqlalchemy.schema.Table.params.autoload_with
    "sqlalchemy.schema.Table")标志现在意味着[`Table.autoload`](../core/metadata.html#sqlalchemy.schema.Table.params.autoload
    "sqlalchemy.schema.Table")应为`True`。感谢 Malik Diarra 的拉取请求。'
- en: 'References: [#3027](https://www.sqlalchemy.org/trac/ticket/3027)'
  id: totrans-3379
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3027](https://www.sqlalchemy.org/trac/ticket/3027)
- en: '**[sql] [feature]**'
  id: totrans-3380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: The [`Select.limit()`](../core/selectable.html#sqlalchemy.sql.expression.Select.limit
    "sqlalchemy.sql.expression.Select.limit") and [`Select.offset()`](../core/selectable.html#sqlalchemy.sql.expression.Select.offset
    "sqlalchemy.sql.expression.Select.offset") methods now accept any SQL expression,
    in addition to integer values, as arguments. Typically this is used to allow a
    bound parameter to be passed, which can be substituted with a value later thus
    allowing Python-side caching of the SQL query. The implementation here is fully
    backwards compatible with existing third party dialects, however those dialects
    which implement special LIMIT/OFFSET systems will need modification in order to
    take advantage of the new capabilities. Limit and offset also support “literal_binds”
    mode,
  id: totrans-3381
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Select.limit()`](../core/selectable.html#sqlalchemy.sql.expression.Select.limit
    "sqlalchemy.sql.expression.Select.limit")和[`Select.offset()`](../core/selectable.html#sqlalchemy.sql.expression.Select.offset
    "sqlalchemy.sql.expression.Select.offset")方法现在接受任何 SQL 表达式作为参数，而不仅仅是整数值。通常用于允许传递绑定参数，稍后可以用值替换，从而允许在
    Python 端缓存 SQL 查询。这里的实现完全向后兼容现有的第三方方言，但那些实现特殊 LIMIT/OFFSET 系统的方言需要修改以利用新功能。Limit
    和 offset 还支持“literal_binds”模式，'
- en: 'References: [#3034](https://www.sqlalchemy.org/trac/ticket/3034)'
  id: totrans-3382
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3034](https://www.sqlalchemy.org/trac/ticket/3034)
- en: '**[sql] [changed]**'
  id: totrans-3383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [changed]**'
- en: The [`column()`](../core/sqlelement.html#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column")
    and [`table()`](../core/selectable.html#sqlalchemy.sql.expression.table "sqlalchemy.sql.expression.table")
    constructs are now importable from the “from sqlalchemy” namespace, just like
    every other Core construct.
  id: totrans-3384
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`column()`](../core/sqlelement.html#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column")和[`table()`](../core/selectable.html#sqlalchemy.sql.expression.table
    "sqlalchemy.sql.expression.table")构造现在可以从“from sqlalchemy”命名空间导入，就像每个其他Core构造一样。'
- en: '**[sql] [changed]**'
  id: totrans-3385
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [changed]**'
- en: The implicit conversion of strings to [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") constructs when passed to most builder methods
    of [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    as well as [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    now emits a warning with just the plain string sent. The textual conversion still
    proceeds normally, however. The only method that accepts a string without a warning
    are the “label reference” methods like order_by(), group_by(); these functions
    will now at compile time attempt to resolve a single string argument to a column
    or label expression present in the selectable; if none is located, the expression
    still renders, but you get the warning again. The rationale here is that the implicit
    conversion from string to text is more unexpected than not these days, and it
    is better that the user send more direction to the Core / ORM when passing a raw
    string as to what direction should be taken. Core/ORM tutorials have been updated
    to go more in depth as to how text is handled.
  id: totrans-3386
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当传递给[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")的大多数构建器方法以及[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")时，将字符串隐式转换为[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")构造时，现在只发送纯字符串会发出警告。文本转换仍然正常进行。唯一不会发出警告的方法是“标签引用”方法，如order_by()，group_by()；这些函数现在在编译时将尝试将单个字符串参数解析为可选择的列或标签表达式；如果找不到任何内容，则表达式仍然呈现，但您会再次收到警告。这里的理由是，从字符串到文本的隐式转换现在比以往更加意外，当用户将原始字符串传递给Core
    / ORM时，最好让用户提供更多方向。Core/ORM教程已更新，以更深入地介绍文本的处理方式。
- en: See also
  id: totrans-3387
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[Warnings emitted when coercing full SQL fragments into text()](migration_10.html#migration-2992)'
  id: totrans-3388
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[将完整SQL片段强制转换为text()时发出的警告](migration_10.html#migration-2992)'
- en: 'References: [#2992](https://www.sqlalchemy.org/trac/ticket/2992)'
  id: totrans-3389
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2992](https://www.sqlalchemy.org/trac/ticket/2992)
- en: '**[sql] [bug]**'
  id: totrans-3390
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    and other [`SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType") subclasses where direct association of the type
    with a [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    would lead to a hang when events (like create events) were emitted on the [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData").
  id: totrans-3391
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")和其他[`SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType")子类中的错误，直接将类型与[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")关联会导致在[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")上发出事件（如创建事件）时挂起。
- en: 'This change is also **backported** to: 0.9.7, 0.8.7'
  id: totrans-3392
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.9.7, 0.8.7
- en: 'References: [#3124](https://www.sqlalchemy.org/trac/ticket/3124)'
  id: totrans-3393
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3124](https://www.sqlalchemy.org/trac/ticket/3124)
- en: '**[sql] [bug]**'
  id: totrans-3394
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed a bug within the custom operator plus [`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") system, whereby using a [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") in conjunction with variant would fail with
    an MRO error when a comparison operator was used.
  id: totrans-3395
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了自定义操作符加[`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant")系统中的错误，当使用[`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")与variant结合使用时，当使用比较运算符时会出现MRO错误。
- en: 'This change is also **backported** to: 0.9.7, 0.8.7'
  id: totrans-3396
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.9.7, 0.8.7
- en: 'References: [#3102](https://www.sqlalchemy.org/trac/ticket/3102)'
  id: totrans-3397
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3102](https://www.sqlalchemy.org/trac/ticket/3102)
- en: '**[sql] [bug]**'
  id: totrans-3398
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in INSERT..FROM SELECT construct where selecting from a UNION would
    wrap the union in an anonymous (e.g. unlabeled) subquery.
  id: totrans-3399
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在从UNION中选择时，INSERT..FROM SELECT构造中的错误，会将UNION包装在一个匿名的子查询中。
- en: 'This change is also **backported** to: 0.9.5, 0.8.7'
  id: totrans-3400
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.5, 0.8.7
- en: 'References: [#3044](https://www.sqlalchemy.org/trac/ticket/3044)'
  id: totrans-3401
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3044](https://www.sqlalchemy.org/trac/ticket/3044)
- en: '**[sql] [bug]**'
  id: totrans-3402
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where [`Table.update()`](../core/metadata.html#sqlalchemy.schema.Table.update
    "sqlalchemy.schema.Table.update") and [`Table.delete()`](../core/metadata.html#sqlalchemy.schema.Table.delete
    "sqlalchemy.schema.Table.delete") would produce an empty WHERE clause when an
    empty [`and_()`](../core/sqlelement.html#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_")
    or [`or_()`](../core/sqlelement.html#sqlalchemy.sql.expression.or_ "sqlalchemy.sql.expression.or_")
    or other blank expression were applied. This is now consistent with that of [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select").
  id: totrans-3403
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当应用空的[`and_()`](../core/sqlelement.html#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_")或[`or_()`](../core/sqlelement.html#sqlalchemy.sql.expression.or_
    "sqlalchemy.sql.expression.or_")或其他空表达式时，[`Table.update()`](../core/metadata.html#sqlalchemy.schema.Table.update
    "sqlalchemy.schema.Table.update")和[`Table.delete()`](../core/metadata.html#sqlalchemy.schema.Table.delete
    "sqlalchemy.schema.Table.delete")会生成空的WHERE子句的错误。现在这与[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")的行为一致。
- en: 'This change is also **backported** to: 0.9.5, 0.8.7'
  id: totrans-3404
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.5, 0.8.7
- en: 'References: [#3045](https://www.sqlalchemy.org/trac/ticket/3045)'
  id: totrans-3405
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3045](https://www.sqlalchemy.org/trac/ticket/3045)
- en: '**[sql] [bug]**'
  id: totrans-3406
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Added the `native_enum` flag to the `__repr__()` output of [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum"), which is mostly important when using it with Alembic
    autogenerate. Pull request courtesy Dimitris Theodorou.
  id: totrans-3407
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")的`__repr__()`输出中添加了`native_enum`标志，当与Alembic
    autogenerate一起使用时，这是非常重要的。感谢Dimitris Theodorou的拉取请求。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-3408
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.9
- en: '**[sql] [bug]**'
  id: totrans-3409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where using a [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") that implemented a type that was also a [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") would fail with Python’s “Cannot create a consistent
    method resolution order (MRO)” error, when any kind of SQL comparison expression
    were used against an object using this type.
  id: totrans-3410
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用实现了也是[`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")的类型的[`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")会在针对使用此类型的对象使用任何类型的SQL比较表达式时，导致Python的“无法创建一致的方法解析顺序（MRO）”错误的错误。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-3411
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.9
- en: 'References: [#3278](https://www.sqlalchemy.org/trac/ticket/3278)'
  id: totrans-3412
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3278](https://www.sqlalchemy.org/trac/ticket/3278)
- en: '**[sql] [bug]**'
  id: totrans-3413
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where the columns from a SELECT embedded in an INSERT, either through
    the values clause or as a “from select”, would pollute the column types used in
    the result set produced by the RETURNING clause when columns from both statements
    shared the same name, leading to potential errors or mis-adaptation when retrieving
    the returning rows.
  id: totrans-3414
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在INSERT中嵌入SELECT时，通过值子句或作为“from select”时，来自两个语句的列共享相同名称时，污染由RETURNING子句产生的结果集中使用的列类型，导致在检索返回行时可能出现错误或错误适应。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-3415
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.9
- en: 'References: [#3248](https://www.sqlalchemy.org/trac/ticket/3248)'
  id: totrans-3416
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3248](https://www.sqlalchemy.org/trac/ticket/3248)
- en: '**[sql] [bug]**'
  id: totrans-3417
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where a fair number of SQL elements within the sql package would fail
    to `__repr__()` successfully, due to a missing `description` attribute that would
    then invoke a recursion overflow when an internal AttributeError would then re-invoke
    `__repr__()`.
  id: totrans-3418
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了sql包中的相当数量的SQL元素无法成功执行`__repr__()`的错误，由于缺少`description`属性，然后会在内部AttributeError再次调用`__repr__()`时引发递归溢出。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-3419
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.8
- en: 'References: [#3195](https://www.sqlalchemy.org/trac/ticket/3195)'
  id: totrans-3420
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3195](https://www.sqlalchemy.org/trac/ticket/3195)
- en: '**[sql] [bug]**'
  id: totrans-3421
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: An adjustment to table/index reflection such that if an index reports a column
    that isn’t found to be present in the table, a warning is emitted and the column
    is skipped. This can occur for some special system column situations as has been
    observed with Oracle.
  id: totrans-3422
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整表/索引反射，如果索引报告一个在表中找不到的列，则会发出警告并跳过该列。这可能发生在一些特殊的系统列情况下，如在 Oracle 中观察到的情况。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-3423
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.8
- en: 'References: [#3180](https://www.sqlalchemy.org/trac/ticket/3180)'
  id: totrans-3424
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3180](https://www.sqlalchemy.org/trac/ticket/3180)
- en: '**[sql] [bug]**'
  id: totrans-3425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in CTE where `literal_binds` compiler argument would not be always
    be correctly propagated when one CTE referred to another aliased CTE in a statement.
  id: totrans-3426
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 CTE 中的错误，当一个 CTE 引用语句中的另一个别名 CTE 时，`literal_binds`编译器参数不会始终正确传播。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-3427
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.8
- en: 'References: [#3154](https://www.sqlalchemy.org/trac/ticket/3154)'
  id: totrans-3428
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3154](https://www.sqlalchemy.org/trac/ticket/3154)
- en: '**[sql] [bug]**'
  id: totrans-3429
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed 0.9.7 regression caused by [#3067](https://www.sqlalchemy.org/trac/ticket/3067)
    in conjunction with a mis-named unit test such that so-called “schema” types like
    [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean")
    and [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    could no longer be pickled.
  id: totrans-3430
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由[#3067](https://www.sqlalchemy.org/trac/ticket/3067)引起的 0.9.7 回归，与一个命名错误的单元测试一起导致所谓的“模式”类型如[`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean")和[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum")无法再被 pickle。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-3431
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.8
- en: 'References: [#3067](https://www.sqlalchemy.org/trac/ticket/3067), [#3144](https://www.sqlalchemy.org/trac/ticket/3144)'
  id: totrans-3432
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3067](https://www.sqlalchemy.org/trac/ticket/3067), [#3144](https://www.sqlalchemy.org/trac/ticket/3144)
- en: '**[sql] [bug]**'
  id: totrans-3433
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fix bug in naming convention feature where using a check constraint convention
    that includes `constraint_name` would then force all [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean") and [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") types to require names as well, as these implicitly create
    a constraint, even if the ultimate target backend were one that does not require
    generation of the constraint such as PostgreSQL. The mechanics of naming conventions
    for these particular constraints has been reorganized such that the naming determination
    is done at DDL compile time, rather than at constraint/table construction time.
  id: totrans-3434
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了命名约定功能中的错误，其中使用包含`constraint_name`的检查约定会强制所有[`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean")和[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum")类型也需要名称，因为这些隐式创建约束，即使最终目标后端不需要生成约束，比如 PostgreSQL。这些特定约束的命名约定机制已经重新组织，使得命名确定在
    DDL 编译时完成，而不是在约束/表构建时完成。
- en: 'This change is also **backported** to: 0.9.7'
  id: totrans-3435
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.7
- en: 'References: [#3067](https://www.sqlalchemy.org/trac/ticket/3067)'
  id: totrans-3436
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3067](https://www.sqlalchemy.org/trac/ticket/3067)
- en: '**[sql] [bug]**'
  id: totrans-3437
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in common table expressions whereby positional bound parameters could
    be expressed in the wrong final order when CTEs were nested in certain ways.
  id: totrans-3438
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了公共表达式中的错误，其中当 CTE 以某种方式嵌套时，位置绑定参数可能以错误的最终顺序表示。
- en: 'This change is also **backported** to: 0.9.7'
  id: totrans-3439
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.7
- en: 'References: [#3090](https://www.sqlalchemy.org/trac/ticket/3090)'
  id: totrans-3440
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3090](https://www.sqlalchemy.org/trac/ticket/3090)
- en: '**[sql] [bug]**'
  id: totrans-3441
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where multi-valued [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") construct would fail to check subsequent values
    entries beyond the first one given for literal SQL expressions.
  id: totrans-3442
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了多值[`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")构造失败检查后续值条目的错误，超出第一个给定的字面
    SQL 表达式。
- en: 'This change is also **backported** to: 0.9.7'
  id: totrans-3443
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.7
- en: 'References: [#3069](https://www.sqlalchemy.org/trac/ticket/3069)'
  id: totrans-3444
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3069](https://www.sqlalchemy.org/trac/ticket/3069)
- en: '**[sql] [bug]**'
  id: totrans-3445
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Added a “str()” step to the dialect_kwargs iteration for Python version < 2.6.5,
    working around the “no unicode keyword arg” bug as these args are passed along
    as keyword args within some reflection processes.
  id: totrans-3446
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 Python 版本 < 2.6.5 的 dialect_kwargs 迭代添加了一个“str()”步骤，解决了“无 unicode 关键字参数”错误，因为这些参数在某些反射过程中作为关键字参数传递。
- en: 'This change is also **backported** to: 0.9.7'
  id: totrans-3447
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.7
- en: 'References: [#3123](https://www.sqlalchemy.org/trac/ticket/3123)'
  id: totrans-3448
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3123](https://www.sqlalchemy.org/trac/ticket/3123)
- en: '**[sql] [bug]**'
  id: totrans-3449
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The [`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") method will now accept a type class
    as an argument which is internally converted to an instance, using the same convention
    long established by other constructs such as [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column").
  id: totrans-3450
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant")方法现在将接受一个类型类作为参数，该参数在内部转换为一个实例，使用其他构��（如[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")）长期以来建立的相同约定。'
- en: 'This change is also **backported** to: 0.9.7'
  id: totrans-3451
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.7
- en: 'References: [#3122](https://www.sqlalchemy.org/trac/ticket/3122)'
  id: totrans-3452
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3122](https://www.sqlalchemy.org/trac/ticket/3122)
- en: '**[sql] [bug]**'
  id: totrans-3453
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The [`Column.nullable`](../core/metadata.html#sqlalchemy.schema.Column.params.nullable
    "sqlalchemy.schema.Column") flag is implicitly set to `False` when that [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") is referred to in an explicit [`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") for that table. This behavior now matches
    that of when the [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    itself has the [`Column.primary_key`](../core/metadata.html#sqlalchemy.schema.Column.params.primary_key
    "sqlalchemy.schema.Column") flag set to `True`, which is intended to be an exactly
    equivalent case.
  id: totrans-3454
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当表中的[`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")在显式的[`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint")中被引用时，[`Column.nullable`](../core/metadata.html#sqlalchemy.schema.Column.params.nullable
    "sqlalchemy.schema.Column")标志会被隐式设置为`False`。这种行为现在与[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")本身的[`Column.primary_key`](../core/metadata.html#sqlalchemy.schema.Column.params.primary_key
    "sqlalchemy.schema.Column")标志设置为`True`时的行为相匹配，这是一个完全等效的情况。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-3455
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.5
- en: 'References: [#3023](https://www.sqlalchemy.org/trac/ticket/3023)'
  id: totrans-3456
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3023](https://www.sqlalchemy.org/trac/ticket/3023)
- en: '**[sql] [bug]**'
  id: totrans-3457
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where the [`Operators.__and__()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.__and__
    "sqlalchemy.sql.expression.Operators.__and__"), [`Operators.__or__()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.__or__
    "sqlalchemy.sql.expression.Operators.__or__") and [`Operators.__invert__()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.__invert__
    "sqlalchemy.sql.expression.Operators.__invert__") operator overload methods could
    not be overridden within a custom [`Comparator`](../core/type_api.html#sqlalchemy.types.TypeEngine.Comparator
    "sqlalchemy.types.TypeEngine.Comparator") implementation.
  id: totrans-3458
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Operators.__and__()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.__and__
    "sqlalchemy.sql.expression.Operators.__and__")、[`Operators.__or__()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.__or__
    "sqlalchemy.sql.expression.Operators.__or__")和[`Operators.__invert__()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.__invert__
    "sqlalchemy.sql.expression.Operators.__invert__")运算符重载方法无法在自定义[`Comparator`](../core/type_api.html#sqlalchemy.types.TypeEngine.Comparator
    "sqlalchemy.types.TypeEngine.Comparator")实现中被覆盖的bug。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-3459
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.5
- en: 'References: [#3012](https://www.sqlalchemy.org/trac/ticket/3012)'
  id: totrans-3460
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3012](https://www.sqlalchemy.org/trac/ticket/3012)
- en: '**[sql] [bug]**'
  id: totrans-3461
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in new [`DialectKWArgs.argument_for()`](../core/foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") method where adding an argument
    for a construct not previously included for any special arguments would fail.
  id: totrans-3462
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新的[`DialectKWArgs.argument_for()`](../core/foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for")方法中的一个bug，之前未包含任何特殊参数的构造添加参数将失败的问题。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-3463
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.5
- en: 'References: [#3024](https://www.sqlalchemy.org/trac/ticket/3024)'
  id: totrans-3464
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3024](https://www.sqlalchemy.org/trac/ticket/3024)
- en: '**[sql] [bug]**'
  id: totrans-3465
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed regression introduced in 0.9 where new “ORDER BY <labelname>” feature
    from [#1068](https://www.sqlalchemy.org/trac/ticket/1068) would not apply quoting
    rules to the label name as rendered in the ORDER BY.
  id: totrans-3466
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了0.9版本中引入的回归问题，即从[#1068](https://www.sqlalchemy.org/trac/ticket/1068)中的新“ORDER
    BY <labelname>”功能不会将标签名称在ORDER BY中呈现时应用引用规则。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-3467
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.5
- en: 'References: [#1068](https://www.sqlalchemy.org/trac/ticket/1068), [#3020](https://www.sqlalchemy.org/trac/ticket/3020)'
  id: totrans-3468
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1068](https://www.sqlalchemy.org/trac/ticket/1068), [#3020](https://www.sqlalchemy.org/trac/ticket/3020)
- en: '**[sql] [bug]**'
  id: totrans-3469
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Restored the import for [`Function`](../core/functions.html#sqlalchemy.sql.functions.Function
    "sqlalchemy.sql.functions.Function") to the `sqlalchemy.sql.expression` import
    namespace, which was removed at the beginning of 0.9.
  id: totrans-3470
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 恢复了 [`Function`](../core/functions.html#sqlalchemy.sql.functions.Function "sqlalchemy.sql.functions.Function")
    的导入到 `sqlalchemy.sql.expression` 导入命名空间，该导入在 0.9 初始时被移除。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-3471
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.9.5
- en: '**[sql] [bug]**'
  id: totrans-3472
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The multi-values version of [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") has been repaired to work more usefully
    with tables that have Python- side default values and/or functions, as well as
    server-side defaults. The feature will now work with a dialect that uses “positional”
    parameters; a Python callable will also be invoked individually for each row just
    as is the case with an “executemany” style invocation; a server- side default
    column will no longer implicitly receive the value explicitly specified for the
    first row, instead refusing to invoke without an explicit value.
  id: totrans-3473
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") 的多值版本已修复，可以更有效地与具有 Python 端默认值和/或函数以及服务器端默认值的表一起使用。该功能现在可以与使用“位置”参数的方言一起工作；Python
    可调用对象也将像“executemany”样式调用一样为每一行单独调用；服务器端默认列将不再隐式接收明确为第一行指定的值，而是拒绝在没有明确值的情况下调用。'
- en: See also
  id: totrans-3474
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Python-side defaults invoked for each row individually when using a multivalued
    insert](migration_10.html#bug-3288)'
  id: totrans-3475
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[使用多值插入时为每行单独调用 Python 端默认值](migration_10.html#bug-3288)'
- en: 'References: [#3288](https://www.sqlalchemy.org/trac/ticket/3288)'
  id: totrans-3476
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3288](https://www.sqlalchemy.org/trac/ticket/3288)
- en: '**[sql] [bug]**'
  id: totrans-3477
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in [`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata") method where the [`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") associated with a [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean") or [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") type object would be doubled in the target table. The
    copy process now tracks the production of this constraint object as local to a
    type object.
  id: totrans-3478
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata") 方法中的 bug，其中与 [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean") 或 [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") 类型对象关联的 [`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") 将在目标表中重复。现在的复制过程跟踪此约束对象的生成作为类型对象的本地对象。
- en: 'References: [#3260](https://www.sqlalchemy.org/trac/ticket/3260)'
  id: totrans-3479
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3260](https://www.sqlalchemy.org/trac/ticket/3260)
- en: '**[sql] [bug]**'
  id: totrans-3480
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The behavioral contract of the [`ForeignKeyConstraint.columns`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint.columns
    "sqlalchemy.schema.ForeignKeyConstraint.columns") collection has been made consistent;
    this attribute is now a [`ColumnCollection`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") like that of all other constraints
    and is initialized at the point when the constraint is associated with a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table").
  id: totrans-3481
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`ForeignKeyConstraint.columns`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint.columns
    "sqlalchemy.schema.ForeignKeyConstraint.columns") 集合的行为契约已经一致化；此属性现在像所有其他约束一样是一个
    [`ColumnCollection`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")，并在约束与 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 关联时初始化。'
- en: See also
  id: totrans-3482
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[ForeignKeyConstraint.columns is now a ColumnCollection](migration_10.html#change-3243)'
  id: totrans-3483
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[ForeignKeyConstraint.columns 现在是 ColumnCollection](migration_10.html#change-3243)'
- en: 'References: [#3243](https://www.sqlalchemy.org/trac/ticket/3243)'
  id: totrans-3484
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3243](https://www.sqlalchemy.org/trac/ticket/3243)
- en: '**[sql] [bug]**'
  id: totrans-3485
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The [`Column.key`](../core/metadata.html#sqlalchemy.schema.Column.key "sqlalchemy.schema.Column.key")
    attribute is now used as the source of anonymous bound parameter names within
    expressions, to match the existing use of this value as the key when rendered
    in an INSERT or UPDATE statement. This allows [`Column.key`](../core/metadata.html#sqlalchemy.schema.Column.key
    "sqlalchemy.schema.Column.key") to be used as a “substitute” string to work around
    a difficult column name that doesn’t translate well into a bound parameter name.
    Note that the paramstyle is configurable on [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") in any case, and most DBAPIs today support a named
    and positional style.
  id: totrans-3486
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Column.key`](../core/metadata.html#sqlalchemy.schema.Column.key "sqlalchemy.schema.Column.key")
    属性现在用作表达式中匿名绑定参数名称的来源，以匹配此值在 INSERT 或 UPDATE 语句中呈现时的现有用法。这允许 [`Column.key`](../core/metadata.html#sqlalchemy.schema.Column.key
    "sqlalchemy.schema.Column.key") 用作“替代”字符串，以解决一个难以转换为绑定参数名称的困难列名。请注意，无论如何，paramstyle
    在 [`create_engine()`](../core/engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")
    中是可配置的，并且今天大多数 DBAPI 都支持命名和位置样式。'
- en: 'References: [#3245](https://www.sqlalchemy.org/trac/ticket/3245)'
  id: totrans-3487
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3245](https://www.sqlalchemy.org/trac/ticket/3245)
- en: '**[sql] [bug]**'
  id: totrans-3488
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed the name of the [`PoolEvents.reset.dbapi_connection`](../core/events.html#sqlalchemy.events.PoolEvents.reset.params.dbapi_connection
    "sqlalchemy.events.PoolEvents.reset") parameter as passed to this event; in particular
    this affects usage of the “named” argument style for this event. Pull request
    courtesy Jason Goldberger.
  id: totrans-3489
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了传递给此事件的 [`PoolEvents.reset.dbapi_connection`](../core/events.html#sqlalchemy.events.PoolEvents.reset.params.dbapi_connection
    "sqlalchemy.events.PoolEvents.reset") 参数的名称；特别是这会影响此事件的“命名”参数样式的使用。感谢 Jason Goldberger
    提交的拉取请求。
- en: '**[sql] [bug]**'
  id: totrans-3490
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Reversing a change that was made in 0.9, the “singleton” nature of the “constants”
    [`null()`](../core/sqlelement.html#sqlalchemy.sql.expression.null "sqlalchemy.sql.expression.null"),
    [`true()`](../core/sqlelement.html#sqlalchemy.sql.expression.true "sqlalchemy.sql.expression.true"),
    and [`false()`](../core/sqlelement.html#sqlalchemy.sql.expression.false "sqlalchemy.sql.expression.false")
    has been reverted. These functions returning a “singleton” object had the effect
    that different instances would be treated as the same regardless of lexical use,
    which in particular would impact the rendering of the columns clause of a SELECT
    statement.
  id: totrans-3491
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 恢复了在 0.9 版本中所做的更改，即“常量” [`null()`](../core/sqlelement.html#sqlalchemy.sql.expression.null
    "sqlalchemy.sql.expression.null")、[`true()`](../core/sqlelement.html#sqlalchemy.sql.expression.true
    "sqlalchemy.sql.expression.true") 和 [`false()`](../core/sqlelement.html#sqlalchemy.sql.expression.false
    "sqlalchemy.sql.expression.false") 的“单例”特性已被还原。这些函数返回一个“单例”对象的效果是，不同的实例将被视为相同，而不考虑其词法使用，这特别会影响
    SELECT 语句的列子句的渲染。
- en: See also
  id: totrans-3492
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[null(), false() and true() constants are no longer singletons](migration_10.html#bug-3170)'
  id: totrans-3493
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[null()、false() 和 true() 常量不再是单例](migration_10.html#bug-3170)'
- en: 'References: [#3170](https://www.sqlalchemy.org/trac/ticket/3170)'
  id: totrans-3494
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3170](https://www.sqlalchemy.org/trac/ticket/3170)
- en: '**[sql] [bug] [engine]**'
  id: totrans-3495
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [engine]**'
- en: Fixed bug where a “branched” connection, that is the kind you get when you call
    `Connection.connect()`, would not share invalidation status with the parent. The
    architecture of branching has been tweaked a bit so that the branched connection
    defers to the parent for all invalidation status and operations.
  id: totrans-3496
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即“分支”连接（当您调用 `Connection.connect()` 时获得的连接）不会与父连接共享失效状态。分支连接的架构稍作调整，使分支连接在所有失效状态和操作上都遵从父连接。
- en: 'References: [#3215](https://www.sqlalchemy.org/trac/ticket/3215)'
  id: totrans-3497
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3215](https://www.sqlalchemy.org/trac/ticket/3215)
- en: '**[sql] [bug] [engine]**'
  id: totrans-3498
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [engine]**'
- en: Fixed bug where a “branched” connection, that is the kind you get when you call
    `Connection.connect()`, would not share transaction status with the parent. The
    architecture of branching has been tweaked a bit so that the branched connection
    defers to the parent for all transactional status and operations.
  id: totrans-3499
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即“分支”连接（当您调用 `Connection.connect()` 时获得的连接）不会与父连接共享事务状态。分支连接的架构稍作调整，使分支连接在所有事务状态和操作上都遵从父连接。
- en: 'References: [#3190](https://www.sqlalchemy.org/trac/ticket/3190)'
  id: totrans-3500
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3190](https://www.sqlalchemy.org/trac/ticket/3190)
- en: '**[sql] [bug]**'
  id: totrans-3501
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Using [`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select") now implies `inline=True` on [`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert"). This helps to fix a bug where an INSERT…FROM
    SELECT construct would inadvertently be compiled as “implicit returning” on supporting
    backends, which would cause breakage in the case of an INSERT that inserts zero
    rows (as implicit returning expects a row), as well as arbitrary return data in
    the case of an INSERT that inserts multiple rows (e.g. only the first row of many).
    A similar change is also applied to an INSERT..VALUES with multiple parameter
    sets; implicit RETURNING will no longer emit for this statement either. As both
    of these constructs deal with variable numbers of rows, the `ResultProxy.inserted_primary_key`
    accessor does not apply. Previously, there was a documentation note that one may
    prefer `inline=True` with INSERT..FROM SELECT as some databases don’t support
    returning and therefore can’t do “implicit” returning, but there’s no reason an
    INSERT…FROM SELECT needs implicit returning in any case. Regular explicit [`Insert.returning()`](../core/dml.html#sqlalchemy.sql.expression.Insert.returning
    "sqlalchemy.sql.expression.Insert.returning") should be used to return variable
    numbers of result rows if inserted data is needed.
  id: totrans-3502
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用[`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select")现在隐含在[`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert")上使用`inline=True`。这有助于修复一个bug，即在支持的后端上，INSERT…FROM
    SELECT结构会被错误地编译为“隐式返回”，这会导致在插入零行的情况下出现故障（因为隐式返回期望一行），以及在插入多行的情况下出现任意返回数据（例如，只有许多行中的第一行）。类似的更改也适用于具有多个参数集的INSERT..VALUES；对于此语句，隐式RETURNING也不再发出。由于这两个构造处理可变数量的行，因此`ResultProxy.inserted_primary_key`访问器不适用。以前，有一个文档注释，即对于一些数据库不支持返回并且因此无法执行“隐式”返回的情况，可能更喜欢在INSERT..FROM
    SELECT中使用`inline=True`，但无论如何，INSERT…FROM SELECT都不需要隐式返回。如果需要返回插入的数据的可变数量的结果行，则应使用常规的显式[`Insert.returning()`](../core/dml.html#sqlalchemy.sql.expression.Insert.returning
    "sqlalchemy.sql.expression.Insert.returning")。
- en: 'References: [#3169](https://www.sqlalchemy.org/trac/ticket/3169)'
  id: totrans-3503
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3169](https://www.sqlalchemy.org/trac/ticket/3169)
- en: '**[sql] [enhancement]**'
  id: totrans-3504
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL] [增强]**'
- en: Custom dialects that implement [`GenericTypeCompiler`](../core/internals.html#sqlalchemy.sql.compiler.GenericTypeCompiler
    "sqlalchemy.sql.compiler.GenericTypeCompiler") can now be constructed such that
    the visit methods receive an indication of the owning expression object, if any.
    Any visit method that accepts keyword arguments (e.g. `**kw`) will in most cases
    receive a keyword argument `type_expression`, referring to the expression object
    that the type is contained within. For columns in DDL, the dialect’s compiler
    class may need to alter its `get_column_specification()` method to support this
    as well. The `UserDefinedType.get_col_spec()` method will also receive `type_expression`
    if it provides `**kw` in its argument signature.
  id: totrans-3505
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 实现了[`GenericTypeCompiler`](../core/internals.html#sqlalchemy.sql.compiler.GenericTypeCompiler
    "sqlalchemy.sql.compiler.GenericTypeCompiler")的自定义方言现在可以构造，以便访问方法接收所属表达式对象的指示，如果有的话。大多数情况下，接受关键字参数（例如，`**kw`）的访问方法将接收一个关键字参数`type_expression`，指的是类型所包含的表达式对象。对于DDL中的列，方言的编译器类可能需要修改其`get_column_specification()`方法以支持此功能。如果`UserDefinedType.get_col_spec()`在其参数签名中提供了`**kw`，则还将接收`type_expression`。
- en: 'References: [#3074](https://www.sqlalchemy.org/trac/ticket/3074)'
  id: totrans-3506
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3074](https://www.sqlalchemy.org/trac/ticket/3074)
- en: schema
  id: totrans-3507
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: '**[schema] [feature]**'
  id: totrans-3508
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [特性]**'
- en: The DDL generation system of [`MetaData.create_all()`](../core/metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") and [`MetaData.drop_all()`](../core/metadata.html#sqlalchemy.schema.MetaData.drop_all
    "sqlalchemy.schema.MetaData.drop_all") has been enhanced to in most cases automatically
    handle the case of mutually dependent foreign key constraints; the need for the
    [`ForeignKeyConstraint.use_alter`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint.params.use_alter
    "sqlalchemy.schema.ForeignKeyConstraint") flag is greatly reduced. The system
    also works for constraints which aren’t given a name up front; only in the case
    of DROP is a name required for at least one of the constraints involved in the
    cycle.
  id: totrans-3509
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`MetaData.create_all()`](../core/metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") 和 [`MetaData.drop_all()`](../core/metadata.html#sqlalchemy.schema.MetaData.drop_all
    "sqlalchemy.schema.MetaData.drop_all") 的 DDL 生成系统已经增强，以自动处理大多数情况下的互相依赖的外键约束；对于约束，极大地减少了对
    [`ForeignKeyConstraint.use_alter`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint.params.use_alter
    "sqlalchemy.schema.ForeignKeyConstraint") 标志的需求。该系统还适用于没有预先给定名称的约束；只有在 DROP 情况下，才需要至少一个约束的名称与循环相关联。'
- en: See also
  id: totrans-3510
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[The use_alter flag on ForeignKeyConstraint is (usually) no longer needed](migration_10.html#feature-3282)'
  id: totrans-3511
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[ForeignKeyConstraint 上的 use_alter 标志（通常）不再需要](migration_10.html#feature-3282)'
- en: 'References: [#3282](https://www.sqlalchemy.org/trac/ticket/3282)'
  id: totrans-3512
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3282](https://www.sqlalchemy.org/trac/ticket/3282)
- en: '**[schema] [feature]**'
  id: totrans-3513
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [特性]**'
- en: Added a new accessor [`Table.foreign_key_constraints`](../core/metadata.html#sqlalchemy.schema.Table.foreign_key_constraints
    "sqlalchemy.schema.Table.foreign_key_constraints") to complement the [`Table.foreign_keys`](../core/metadata.html#sqlalchemy.schema.Table.foreign_keys
    "sqlalchemy.schema.Table.foreign_keys") collection, as well as [`ForeignKeyConstraint.referred_table`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint.referred_table
    "sqlalchemy.schema.ForeignKeyConstraint.referred_table").
  id: totrans-3514
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的访问器 [`Table.foreign_key_constraints`](../core/metadata.html#sqlalchemy.schema.Table.foreign_key_constraints
    "sqlalchemy.schema.Table.foreign_key_constraints") 来补充 [`Table.foreign_keys`](../core/metadata.html#sqlalchemy.schema.Table.foreign_keys
    "sqlalchemy.schema.Table.foreign_keys") 集合，以及 [`ForeignKeyConstraint.referred_table`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint.referred_table
    "sqlalchemy.schema.ForeignKeyConstraint.referred_table")。
- en: '**[schema] [bug]**'
  id: totrans-3515
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [错误]**'
- en: The [`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") construct now supports naming conventions
    that include the token `%(column_0_name)s`; the constraint expression is scanned
    for columns. Additionally, naming conventions for check constraints that don’t
    include the `%(constraint_name)s` token will now work for [`SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType")- generated constraints, such as those of [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean") and [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum"); this stopped working in 0.9.7 due to [#3067](https://www.sqlalchemy.org/trac/ticket/3067).
  id: totrans-3516
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") 构造现在支持包含令牌 `%(column_0_name)s` 的命名约定；约束表达式会扫描列。此外，不包括
    `%(constraint_name)s` 令牌的检查约束的命名约定现在也适用于 [`SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType") 生成的约束，例如 [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean") 和 [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") 的约束；这在 0.9.7 中停止工作，原因是 [#3067](https://www.sqlalchemy.org/trac/ticket/3067)。'
- en: See also
  id: totrans-3517
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Naming CHECK Constraints](../core/constraints.html#naming-check-constraints)'
  id: totrans-3518
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[命名 CHECK 约束](../core/constraints.html#naming-check-constraints)'
- en: '[Configuring Naming for Boolean, Enum, and other schema types](../core/constraints.html#naming-schematypes)'
  id: totrans-3519
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[配置布尔值、枚举和其他模式类型的命名](../core/constraints.html#naming-schematypes)'
- en: 'References: [#3067](https://www.sqlalchemy.org/trac/ticket/3067), [#3299](https://www.sqlalchemy.org/trac/ticket/3299)'
  id: totrans-3520
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3067](https://www.sqlalchemy.org/trac/ticket/3067)，[#3299](https://www.sqlalchemy.org/trac/ticket/3299)
- en: postgresql
  id: totrans-3521
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-3522
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [特性]**'
- en: Added support for the `CONCURRENTLY` keyword with PostgreSQL indexes, established
    using `postgresql_concurrently`. Pull request courtesy Iuri de Silvio.
  id: totrans-3523
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对使用 `postgresql_concurrently` 建立的 PostgreSQL 索引的 `CONCURRENTLY` 关键字的支持。拉取请求由
    Iuri de Silvio 提供。
- en: See also
  id: totrans-3524
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Indexes with CONCURRENTLY](../dialects/postgresql.html#postgresql-index-concurrently)'
  id: totrans-3525
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[CONCURRENTLY 创建索引](../dialects/postgresql.html#postgresql-index-concurrently)'
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-3526
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被 **回溯** 至：0.9.9
- en: '**[postgresql] [feature] [pg8000]**'
  id: totrans-3527
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [特性] [pg8000]**'
- en: Support is added for “sane multi row count” with the pg8000 driver, which applies
    mostly to when using versioning with the ORM. The feature is version-detected
    based on pg8000 1.9.14 or greater in use. Pull request courtesy Tony Locke.
  id: totrans-3528
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为pg8000驱动程序添加了“合理的多行计数”支持，主要适用于在ORM中使用版本控制时。该功能基于使用pg8000 1.9.14或更高版本进行版本检测。感谢Tony
    Locke的拉取请求。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-3529
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.8
- en: '**[postgresql] [feature]**'
  id: totrans-3530
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added kw argument `postgresql_regconfig` to the [`ColumnOperators.match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") operator, allows the “reg config”
    argument to be specified to the `to_tsquery()` function emitted. Pull request
    courtesy Jonathan Vanasco.
  id: totrans-3531
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[`ColumnOperators.match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match")操作符中添加了kw参数`postgresql_regconfig`，允许指定“reg
    config”参数传递给`to_tsquery()`函数。感谢Jonathan Vanasco的拉取请求。
- en: 'This change is also **backported** to: 0.9.7'
  id: totrans-3532
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.7
- en: 'References: [#3078](https://www.sqlalchemy.org/trac/ticket/3078)'
  id: totrans-3533
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3078](https://www.sqlalchemy.org/trac/ticket/3078)
- en: '**[postgresql] [feature]**'
  id: totrans-3534
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added support for PostgreSQL JSONB via [`JSONB`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB
    "sqlalchemy.dialects.postgresql.JSONB"). Pull request courtesy Damian Dimmich.
  id: totrans-3535
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过[`JSONB`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB
    "sqlalchemy.dialects.postgresql.JSONB")添加了对PostgreSQL JSONB的支持。感谢Damian Dimmich的拉取请求。
- en: 'This change is also **backported** to: 0.9.7'
  id: totrans-3536
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.7
- en: '**[postgresql] [feature]**'
  id: totrans-3537
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added support for AUTOCOMMIT isolation level when using the pg8000 DBAPI. Pull
    request courtesy Tony Locke.
  id: totrans-3538
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用pg8000 DBAPI时，添加了对“AUTOCOMMIT”隔离级别的支持。感谢Tony Locke的拉取请求。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-3539
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.5
- en: '**[postgresql] [feature]**'
  id: totrans-3540
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added a new flag [`ARRAY.zero_indexes`](../core/type_basics.html#sqlalchemy.types.ARRAY.params.zero_indexes
    "sqlalchemy.types.ARRAY") to the PostgreSQL [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") type. When set to `True`, a value of one will be added
    to all array index values before passing to the database, allowing better interoperability
    between Python style zero-based indexes and PostgreSQL one-based indexes. Pull
    request courtesy Alexey Terentev.
  id: totrans-3541
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为PostgreSQL [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")类型添加了一个新标志[`ARRAY.zero_indexes`](../core/type_basics.html#sqlalchemy.types.ARRAY.params.zero_indexes
    "sqlalchemy.types.ARRAY")。当设置为`True`时，将在传递给数据库之前将所有数组索引值加一，从而在Python风格的从零开始索引和PostgreSQL从一开始索引之间实现更好的互操作性。感谢Alexey
    Terentev的拉取请求。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-3542
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.5
- en: 'References: [#2785](https://www.sqlalchemy.org/trac/ticket/2785)'
  id: totrans-3543
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2785](https://www.sqlalchemy.org/trac/ticket/2785)
- en: '**[postgresql] [feature]**'
  id: totrans-3544
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: The PG8000 dialect now supports the [`create_engine.encoding`](../core/engines.html#sqlalchemy.create_engine.params.encoding
    "sqlalchemy.create_engine") parameter, by setting up the client encoding on the
    connection which is then intercepted by pg8000\. Pull request courtesy Tony Locke.
  id: totrans-3545
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: PG8000方言现在支持[`create_engine.encoding`](../core/engines.html#sqlalchemy.create_engine.params.encoding
    "sqlalchemy.create_engine")参数，通过在连接上设置客户端编码，然后被pg8000拦截。感谢Tony Locke的拉取请求。
- en: '**[postgresql] [feature]**'
  id: totrans-3546
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added support for PG8000’s native JSONB feature. Pull request courtesy Tony
    Locke.
  id: totrans-3547
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 支持PG8000的原生JSONB功能。感谢Tony Locke的拉取请求。
- en: '**[postgresql] [feature] [pypy]**'
  id: totrans-3548
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature] [pypy]**'
- en: Added support for the psycopg2cffi DBAPI on pypy. Pull request courtesy shauns.
  id: totrans-3549
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 支持在pypy上使用psycopg2cffi DBAPI。感谢shauns的拉取请求。
- en: See also
  id: totrans-3550
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`sqlalchemy.dialects.postgresql.psycopg2cffi`](../dialects/postgresql.html#module-sqlalchemy.dialects.postgresql.psycopg2cffi
    "sqlalchemy.dialects.postgresql.psycopg2cffi")'
  id: totrans-3551
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`sqlalchemy.dialects.postgresql.psycopg2cffi`](../dialects/postgresql.html#module-sqlalchemy.dialects.postgresql.psycopg2cffi
    "sqlalchemy.dialects.postgresql.psycopg2cffi")'
- en: 'References: [#3052](https://www.sqlalchemy.org/trac/ticket/3052)'
  id: totrans-3552
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3052](https://www.sqlalchemy.org/trac/ticket/3052)
- en: '**[postgresql] [feature]**'
  id: totrans-3553
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added support for the FILTER keyword as applied to aggregate functions, supported
    by PostgreSQL 9.4\. Pull request courtesy Ilja Everilä.
  id: totrans-3554
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对聚合函数应用的FILTER关键字的支持，由PostgreSQL 9.4支持。感谢Ilja Everilä的拉取请求。
- en: See also
  id: totrans-3555
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[PostgreSQL FILTER keyword](migration_10.html#feature-gh134)'
  id: totrans-3556
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[PostgreSQL FILTER关键字](migration_10.html#feature-gh134)'
- en: '**[postgresql] [feature]**'
  id: totrans-3557
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Support has been added for reflection of materialized views and foreign tables,
    as well as support for materialized views within [`Inspector.get_view_names()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_view_names
    "sqlalchemy.engine.reflection.Inspector.get_view_names"), and a new method [`PGInspector.get_foreign_table_names()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.base.PGInspector.get_foreign_table_names
    "sqlalchemy.dialects.postgresql.base.PGInspector.get_foreign_table_names") available
    on the PostgreSQL version of [`Inspector`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector"). Pull request courtesy Rodrigo Menezes.
  id: totrans-3558
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对物化视图和外部表的反射支持，以及对[`Inspector.get_view_names()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_view_names
    "sqlalchemy.engine.reflection.Inspector.get_view_names")中的物化视图的支持，以及在PostgreSQL版本的[`Inspector`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector")上可用的新方法[`PGInspector.get_foreign_table_names()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.base.PGInspector.get_foreign_table_names
    "sqlalchemy.dialects.postgresql.base.PGInspector.get_foreign_table_names")。拉取请求由Rodrigo
    Menezes提供。
- en: See also
  id: totrans-3559
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[PostgreSQL Dialect reflects Materialized Views, Foreign Tables](migration_10.html#feature-2891)'
  id: totrans-3560
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[PostgreSQL方言反映了物化视图、外部表](migration_10.html#feature-2891)'
- en: 'References: [#2891](https://www.sqlalchemy.org/trac/ticket/2891)'
  id: totrans-3561
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2891](https://www.sqlalchemy.org/trac/ticket/2891)
- en: '**[postgresql] [feature]**'
  id: totrans-3562
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added support for PG table options TABLESPACE, ON COMMIT, WITH(OUT) OIDS, and
    INHERITS, when rendering DDL via the [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") construct. Pull request courtesy malikdiarra.
  id: totrans-3563
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在通过[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")构造渲染DDL时，添加了对PG表选项TABLESPACE、ON
    COMMIT、WITH(OUT) OIDS和INHERITS的支持。拉取请求由malikdiarra提供。
- en: See also
  id: totrans-3564
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[PostgreSQL Table Options](../dialects/postgresql.html#postgresql-table-options)'
  id: totrans-3565
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[PostgreSQL表选项](../dialects/postgresql.html#postgresql-table-options)'
- en: 'References: [#2051](https://www.sqlalchemy.org/trac/ticket/2051)'
  id: totrans-3566
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2051](https://www.sqlalchemy.org/trac/ticket/2051)
- en: '**[postgresql] [feature]**'
  id: totrans-3567
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added new method [`PGInspector.get_enums()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.base.PGInspector.get_enums
    "sqlalchemy.dialects.postgresql.base.PGInspector.get_enums"), when using the inspector
    for PostgreSQL will provide a list of ENUM types. Pull request courtesy Ilya Pekelny.
  id: totrans-3568
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新方法[`PGInspector.get_enums()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.base.PGInspector.get_enums
    "sqlalchemy.dialects.postgresql.base.PGInspector.get_enums")，在使用PostgreSQL检查器时将提供ENUM类型列表。拉取请求由Ilya
    Pekelny提供。
- en: '**[postgresql] [bug]**'
  id: totrans-3569
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added the `hashable=False` flag to the PG [`HSTORE`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.HSTORE
    "sqlalchemy.dialects.postgresql.HSTORE") type, which is needed to allow the ORM
    to skip over trying to “hash” an ORM-mapped HSTORE column when requesting it in
    a mixed column/entity list. Patch courtesy Gunnlaugur Þór Briem.
  id: totrans-3570
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在PG [`HSTORE`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.HSTORE
    "sqlalchemy.dialects.postgresql.HSTORE") 类型中添加了`hashable=False`标志，这是为了允许ORM在请求混合列/实体列表中的ORM映射的HSTORE列时跳过“哈希”操作所需的。补丁由Gunnlaugur
    Þór Briem提供。
- en: 'This change is also **backported** to: 0.9.5, 0.8.7'
  id: totrans-3571
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.5, 0.8.7
- en: 'References: [#3053](https://www.sqlalchemy.org/trac/ticket/3053)'
  id: totrans-3572
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3053](https://www.sqlalchemy.org/trac/ticket/3053)
- en: '**[postgresql] [bug]**'
  id: totrans-3573
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added a new “disconnect” message “connection has been closed unexpectedly”.
    This appears to be related to newer versions of SSL. Pull request courtesy Antti
    Haapala.
  id: totrans-3574
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的“断开连接”消息“连接意外关闭”。这似乎与较新版本的SSL有关。拉取请求由Antti Haapala提供。
- en: 'This change is also **backported** to: 0.9.5, 0.8.7'
  id: totrans-3575
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.5, 0.8.7
- en: '**[postgresql] [bug]**'
  id: totrans-3576
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Repaired support for PostgreSQL UUID types in conjunction with the ARRAY type
    when using psycopg2\. The psycopg2 dialect now employs use of the psycopg2.extras.register_uuid()
    hook so that UUID values are always passed to/from the DBAPI as UUID() objects.
    The [`UUID.as_uuid`](../core/type_basics.html#sqlalchemy.types.UUID.params.as_uuid
    "sqlalchemy.types.UUID") flag is still honored, except with psycopg2 we need to
    convert returned UUID objects back into strings when this is disabled.
  id: totrans-3577
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用psycopg2时与ARRAY类型一起支持PostgreSQL UUID类型的问题。psycopg2方言现在使用psycopg2.extras.register_uuid()钩子，以便始终将UUID值作为UUID()对象传递到/从DBAPI。[`UUID.as_uuid`](../core/type_basics.html#sqlalchemy.types.UUID.params.as_uuid
    "sqlalchemy.types.UUID")标志仍然受到尊重，但是对于psycopg2，当禁用此标志时，我们需要将返回的UUID对象转换回字符串。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-3578
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.9
- en: 'References: [#2940](https://www.sqlalchemy.org/trac/ticket/2940)'
  id: totrans-3579
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2940](https://www.sqlalchemy.org/trac/ticket/2940)
- en: '**[postgresql] [bug]**'
  id: totrans-3580
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added support for the `postgresql.JSONB` datatype when using psycopg2 2.5.4
    or greater, which features native conversion of JSONB data so that SQLAlchemy’s
    converters must be disabled; additionally, the newly added psycopg2 extension
    `extras.register_default_jsonb` is used to establish a JSON deserializer passed
    to the dialect via the `json_deserializer` argument. Also repaired the PostgreSQL
    integration tests which weren’t actually round-tripping the JSONB type as opposed
    to the JSON type. Pull request courtesy Mateusz Susik.
  id: totrans-3581
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用psycopg2 2.5.4或更高版本时，添加了对`postgresql.JSONB`数据类型的支持，该版本具有原生的JSONB数据转换，因此必须禁用SQLAlchemy的转换器；此外，还使用了新添加的psycopg2扩展`extras.register_default_jsonb`来建立通过`json_deserializer`参数传递给方言的JSON反序列化器。还修复了PostgreSQL集成测试，这些测试实际上并没有往返传输JSONB类型，而是JSON类型。感谢Mateusz
    Susik的拉取请求。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-3582
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.9
- en: '**[postgresql] [bug]**'
  id: totrans-3583
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Repaired the use of the “array_oid” flag when registering the HSTORE type with
    older psycopg2 versions < 2.4.3, which does not support this flag, as well as
    use of the native json serializer hook “register_default_json” with user-defined
    `json_deserializer` on psycopg2 versions < 2.5, which does not include native
    json.
  id: totrans-3584
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用旧的psycopg2版本< 2.4.3注册HSTORE类型时使用“array_oid”标志的问题，该版本不支持此标志，以及在psycopg2版本<
    2.5上使用本机json序列化器钩子“register_default_json”与用户定义的`json_deserializer`时的问��，该版本不包括本机json。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-3585
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.9
- en: '**[postgresql] [bug]**'
  id: totrans-3586
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug where PostgreSQL dialect would fail to render an expression in an
    [`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    that did not correspond directly to a table-bound column; typically when a [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct was one of the expressions within
    the index; or could misinterpret the list of expressions if one or more of them
    were such an expression.
  id: totrans-3587
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了PostgreSQL方言在[`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")中无法正确渲染表绑定列之外的表达式的错误；通常情况下，如果`text()`构造是索引中的表达式之一，或者如果其中一个或多个表达式是这样的构造，则可能会误解表达式列表。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-3588
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.9
- en: 'References: [#3174](https://www.sqlalchemy.org/trac/ticket/3174)'
  id: totrans-3589
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3174](https://www.sqlalchemy.org/trac/ticket/3174)
- en: '**[postgresql] [bug]**'
  id: totrans-3590
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: 'A revisit to this issue first patched in 0.9.5, apparently psycopg2’s `.closed`
    accessor is not as reliable as we assumed, so we have added an explicit check
    for the exception messages “SSL SYSCALL error: Bad file descriptor” and “SSL SYSCALL
    error: EOF detected” when detecting an is-disconnect scenario. We will continue
    to consult psycopg2’s connection.closed as a first check.'
  id: totrans-3591
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '重新审视了首次在0.9.5中修补的此问题，显然psycopg2的`.closed`访问器并不像我们所认为的那样可靠，因此我们已经添加了一个显式检查异常消息“SSL
    SYSCALL error: Bad file descriptor”和“SSL SYSCALL error: EOF detected”以检测断开连接的情况。我们将继续将psycopg2的connection.closed作为第一次检查。'
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-3592
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.8
- en: 'References: [#3021](https://www.sqlalchemy.org/trac/ticket/3021)'
  id: totrans-3593
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3021](https://www.sqlalchemy.org/trac/ticket/3021)
- en: '**[postgresql] [bug]**'
  id: totrans-3594
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: 'Fixed bug where PostgreSQL JSON type was not able to persist or otherwise render
    a SQL NULL column value, rather than a JSON-encoded `''null''`. To support this
    case, changes are as follows:'
  id: totrans-3595
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了PostgreSQL JSON类型无法持久化或以其他方式渲染SQL NULL列值而不是JSON编码的`'null'`的错误。为支持此情况，更改如下：
- en: The value [`null()`](../core/sqlelement.html#sqlalchemy.sql.expression.null
    "sqlalchemy.sql.expression.null") can now be specified, which will always result
    in a NULL value resulting in the statement.
  id: totrans-3596
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在可以指定值[`null()`](../core/sqlelement.html#sqlalchemy.sql.expression.null "sqlalchemy.sql.expression.null")，这将始终导致语句中的NULL值。
- en: A new parameter [`JSON.none_as_null`](../core/type_basics.html#sqlalchemy.types.JSON.params.none_as_null
    "sqlalchemy.types.JSON") is added, which when True indicates that the Python `None`
    value should be persisted as SQL NULL, rather than JSON-encoded `'null'`.
  id: totrans-3597
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了一个新参数[`JSON.none_as_null`](../core/type_basics.html#sqlalchemy.types.JSON.params.none_as_null
    "sqlalchemy.types.JSON")，当为True时表示Python的`None`值应该被持久化为SQL NULL，而不是JSON编码的`'null'`。
- en: Retrieval of NULL as None is also repaired for DBAPIs other than psycopg2, namely
    pg8000.
  id: totrans-3598
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于除了psycopg2之外的其他DBAPI，如pg8000，也修复了将NULL检索为None的问题。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-3599
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.8
- en: 'References: [#3159](https://www.sqlalchemy.org/trac/ticket/3159)'
  id: totrans-3600
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3159](https://www.sqlalchemy.org/trac/ticket/3159)
- en: '**[postgresql] [bug]**'
  id: totrans-3601
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: The exception wrapping system for DBAPI errors can now accommodate non-standard
    DBAPI exceptions, such as the psycopg2 TransactionRollbackError. These exceptions
    will now be raised using the closest available subclass in `sqlalchemy.exc`, in
    the case of TransactionRollbackError, `sqlalchemy.exc.OperationalError`.
  id: totrans-3602
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于DBAPI错误的异常包装系统现在可以容纳非标准的DBAPI异常，例如psycopg2的TransactionRollbackError。这些异常现在将使用`sqlalchemy.exc`中最接近的可用子类引发，在TransactionRollbackError的情况下，使用`sqlalchemy.exc.OperationalError`。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-3603
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.8
- en: 'References: [#3075](https://www.sqlalchemy.org/trac/ticket/3075)'
  id: totrans-3604
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3075](https://www.sqlalchemy.org/trac/ticket/3075)
- en: '**[postgresql] [bug]**'
  id: totrans-3605
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug in [`array`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.array
    "sqlalchemy.dialects.postgresql.array") object where comparison to a plain Python
    list would fail to use the correct array constructor. Pull request courtesy Andrew.
  id: totrans-3606
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`array`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.array
    "sqlalchemy.dialects.postgresql.array")对象中的错误，其中与普通Python列表的比较将无法使用正确的数组构造函数。感谢Andrew的拉取请求。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-3607
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.8
- en: 'References: [#3141](https://www.sqlalchemy.org/trac/ticket/3141)'
  id: totrans-3608
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3141](https://www.sqlalchemy.org/trac/ticket/3141)
- en: '**[postgresql] [bug]**'
  id: totrans-3609
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added a supported [`FunctionElement.alias()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.alias
    "sqlalchemy.sql.functions.FunctionElement.alias") method to functions, e.g. the
    `func` construct. Previously, behavior for this method was undefined. The current
    behavior mimics that of pre-0.9.4, which is that the function is turned into a
    single-column FROM clause with the given alias name, where the column itself is
    anonymously named.
  id: totrans-3610
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为函数添加了支持的[`FunctionElement.alias()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.alias
    "sqlalchemy.sql.functions.FunctionElement.alias")方法，例如`func`构造。先前，此方法的行为是未定义的。当前行为模仿了0.9.4之前的行为，即将函数转换为具有给定别名的单列FROM子句，其中列本身是匿名命名的。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-3611
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.8
- en: 'References: [#3137](https://www.sqlalchemy.org/trac/ticket/3137)'
  id: totrans-3612
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3137](https://www.sqlalchemy.org/trac/ticket/3137)
- en: '**[postgresql] [bug] [pg8000]**'
  id: totrans-3613
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug] [pg8000]**'
- en: Fixed bug introduced in 0.9.5 by new pg8000 isolation level feature where engine-level
    isolation level parameter would raise an error on connect.
  id: totrans-3614
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了0.9.5中由新的pg8000隔离级别功能引入的错误，其中引擎级隔离级别参数在连接时会引发错误。
- en: 'This change is also **backported** to: 0.9.7'
  id: totrans-3615
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.7
- en: 'References: [#3134](https://www.sqlalchemy.org/trac/ticket/3134)'
  id: totrans-3616
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3134](https://www.sqlalchemy.org/trac/ticket/3134)
- en: '**[postgresql] [bug]**'
  id: totrans-3617
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: The psycopg2 `.closed` accessor is now consulted when determining if an exception
    is a “disconnect” error; ideally, this should remove the need for any other inspection
    of the exception message to detect disconnect, however we will leave those existing
    messages in place as a fallback. This should be able to handle newer cases like
    “SSL EOF” conditions. Pull request courtesy Dirk Mueller.
  id: totrans-3618
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在在确定异常是否为“断开连接”错误时，将咨询psycopg2的`.closed`访问器；理想情况下，这应该消除对异常消息的任何其他检查以检测断开连接的需要，但我们将保留这些现有消息作为备用。这应该能够处理新的情况，如“SSL
    EOF”条件。感谢Dirk Mueller的拉取请求。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-3619
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.5
- en: 'References: [#3021](https://www.sqlalchemy.org/trac/ticket/3021)'
  id: totrans-3620
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3021](https://www.sqlalchemy.org/trac/ticket/3021)
- en: '**[postgresql] [bug]**'
  id: totrans-3621
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: The PostgreSQL [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM") type will emit a DROP TYPE instruction
    when a plain `table.drop()` is called, assuming the object is not associated directly
    with a [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    object. In order to accommodate the use case of an enumerated type shared between
    multiple tables, the type should be associated directly with the [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object; in this case the type will only be created
    at the metadata level, or if created directly. The rules for create/drop of PostgreSQL
    enumerated types have been highly reworked in general.
  id: totrans-3622
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: PostgreSQL [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM") 类型在调用普通的 `table.drop()` 时将发出 DROP TYPE
    指令，假设对象没有直接与 [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    对象关联。为了适应在多个表之间共享枚举类型的用例，该类型应直接与 [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") 对象关联；在这种情况下，该类型仅在元数据级别创建，或者如果直接创建。一般来说，已经对 PostgreSQL
    枚举类型的创建/删除规则进行了高度改进。
- en: See also
  id: totrans-3623
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Overhaul of ENUM type create/drop rules](migration_10.html#change-3319)'
  id: totrans-3624
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[ENUM 类型创建/删除规则的全面改进](migration_10.html#change-3319)'
- en: 'References: [#3319](https://www.sqlalchemy.org/trac/ticket/3319)'
  id: totrans-3625
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3319](https://www.sqlalchemy.org/trac/ticket/3319)
- en: '**[postgresql] [bug]**'
  id: totrans-3626
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: The `PGDialect.has_table()` method will now query against `pg_catalog.pg_table_is_visible(c.oid)`,
    rather than testing for an exact schema match, when the schema name is None; this
    so that the method will also illustrate that temporary tables are present. Note
    that this is a behavioral change, as PostgreSQL allows a non-temporary table to
    silently overwrite an existing temporary table of the same name, so this changes
    the behavior of `checkfirst` in that unusual scenario.
  id: totrans-3627
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`PGDialect.has_table()` 方法现在将查询 `pg_catalog.pg_table_is_visible(c.oid)`，而不是在模式名称为
    None 时测试精确的模式匹配；这样该方法也将显示临时表的存在。请注意，这是一项行为更改，因为 PostgreSQL 允许非临时表悄悄地覆盖同名的现有临时表，因此这会改变在这种不寻常情况下
    `checkfirst` 的行为。'
- en: See also
  id: totrans-3628
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[PostgreSQL has_table() now works for temporary tables](migration_10.html#change-3264)'
  id: totrans-3629
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[PostgreSQL 的 has_table() 现在适用于临时表](migration_10.html#change-3264)'
- en: 'References: [#3264](https://www.sqlalchemy.org/trac/ticket/3264)'
  id: totrans-3630
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3264](https://www.sqlalchemy.org/trac/ticket/3264)
- en: '**[postgresql] [enhancement]**'
  id: totrans-3631
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [enhancement]**'
- en: Added a new type [`OID`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.OID
    "sqlalchemy.dialects.postgresql.OID") to the PostgreSQL dialect. While “oid” is
    generally a private type within PG that is not exposed in modern versions, there
    are some PG use cases such as large object support where these types might be
    exposed, as well as within some user-reported schema reflection use cases.
  id: totrans-3632
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 PostgreSQL 方言中添加了一个新类型 [`OID`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.OID
    "sqlalchemy.dialects.postgresql.OID")。虽然“oid”通常是 PG 中的私有类型，在现代版本中不会暴露，但在某些 PG
    使用情况下（如大对象支持）可能会暴露这些类型，以及在一些用户报告的模式反射使用情况中。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-3633
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.9.5
- en: 'References: [#3002](https://www.sqlalchemy.org/trac/ticket/3002)'
  id: totrans-3634
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3002](https://www.sqlalchemy.org/trac/ticket/3002)
- en: mysql
  id: totrans-3635
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [feature]**'
  id: totrans-3636
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [feature]**'
- en: The MySQL dialect now renders TIMESTAMP with NULL / NOT NULL in all cases, so
    that MySQL 5.6.6 with the `explicit_defaults_for_timestamp` flag enabled will
    will allow TIMESTAMP to continue to work as expected when `nullable=False`. Existing
    applications are unaffected as SQLAlchemy has always emitted NULL for a TIMESTAMP
    column that is `nullable=True`.
  id: totrans-3637
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL 方言现在在所有情况下都使用 NULL / NOT NULL 渲染 TIMESTAMP，因此启用了 `explicit_defaults_for_timestamp`
    标志的 MySQL 5.6.6 将允许 TIMESTAMP 在 `nullable=False` 时继续按预期工作。现有应用程序不受影响，因为 SQLAlchemy
    一直为 `nullable=True` 的 TIMESTAMP 列发出 NULL。
- en: See also
  id: totrans-3638
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[MySQL TIMESTAMP Type now renders NULL / NOT NULL in all cases](migration_10.html#change-3155)'
  id: totrans-3639
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[MySQL TIMESTAMP 类型现在在所有情况下都渲染 NULL / NOT NULL](migration_10.html#change-3155)'
- en: '[TIMESTAMP Columns and NULL](../dialects/mysql.html#mysql-timestamp-null)'
  id: totrans-3640
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[TIMESTAMP 列和 NULL](../dialects/mysql.html#mysql-timestamp-null)'
- en: 'References: [#3155](https://www.sqlalchemy.org/trac/ticket/3155)'
  id: totrans-3641
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3155](https://www.sqlalchemy.org/trac/ticket/3155)
- en: '**[mysql] [feature]**'
  id: totrans-3642
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [feature]**'
- en: Updated the “supports_unicode_statements” flag to True for MySQLdb and Pymysql
    under Python 2\. This refers to the SQL statements themselves, not the parameters,
    and affects issues such as table and column names using non-ASCII characters.
    These drivers both appear to support Python 2 Unicode objects without issue in
    modern versions.
  id: totrans-3643
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将“supports_unicode_statements”标志更新为True，适用于Python 2下的MySQLdb和Pymysql。这指的是SQL语句本身，而不是参数，影响到使用非ASCII字符的表和列名等问题。这两个驱动程序在现代版本中似乎都支持Python
    2 Unicode对象而没有问题。
- en: 'References: [#3121](https://www.sqlalchemy.org/trac/ticket/3121)'
  id: totrans-3644
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3121](https://www.sqlalchemy.org/trac/ticket/3121)
- en: '**[mysql] [change]**'
  id: totrans-3645
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [change]**'
- en: The `gaerdbms` dialect is no longer necessary, and emits a deprecation warning.
    Google now recommends using the MySQLdb dialect directly.
  id: totrans-3646
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`gaerdbms`方言不再必要，并发出弃用警告。Google现在建议直接使用MySQLdb方言。'
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-3647
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.9.9
- en: 'References: [#3275](https://www.sqlalchemy.org/trac/ticket/3275)'
  id: totrans-3648
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3275](https://www.sqlalchemy.org/trac/ticket/3275)
- en: '**[mysql] [bug]**'
  id: totrans-3649
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: MySQL error 2014 “commands out of sync” appears to be raised as a ProgrammingError,
    not OperationalError, in modern MySQL-Python versions; all MySQL error codes that
    are tested for “is disconnect” are now checked within OperationalError and ProgrammingError
    regardless.
  id: totrans-3650
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL错误2014“commands out of sync”似乎在现代MySQL-Python版本中被提升为ProgrammingError，而不是OperationalError；所有被测试为“is
    disconnect”的MySQL错误代码现在都在OperationalError和ProgrammingError中进行检查。
- en: 'This change is also **backported** to: 0.9.7, 0.8.7'
  id: totrans-3651
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.9.7, 0.8.7
- en: 'References: [#3101](https://www.sqlalchemy.org/trac/ticket/3101)'
  id: totrans-3652
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3101](https://www.sqlalchemy.org/trac/ticket/3101)
- en: '**[mysql] [bug]**'
  id: totrans-3653
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed bug where column names added to `mysql_length` parameter on an index needed
    to have the same quoting for quoted names in order to be recognized. The fix makes
    the quotes optional but also provides the old behavior for backwards compatibility
    with those using the workaround.
  id: totrans-3654
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即在索引的`mysql_length`参数上添加列名时，需要对带引号的名称使用相同的引号才能被识别。修复使引号变为可选，但也为那些使用这种解决方法的人提供了旧的行为以保持向后兼容。
- en: 'This change is also **backported** to: 0.9.5, 0.8.7'
  id: totrans-3655
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.9.5, 0.8.7
- en: 'References: [#3085](https://www.sqlalchemy.org/trac/ticket/3085)'
  id: totrans-3656
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3085](https://www.sqlalchemy.org/trac/ticket/3085)
- en: '**[mysql] [bug]**'
  id: totrans-3657
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Added support for reflecting tables where an index includes KEY_BLOCK_SIZE using
    an equal sign. Pull request courtesy Sean McGivern.
  id: totrans-3658
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对包含KEY_BLOCK_SIZE的索引的表进行反射的支持，使用等号。感谢Sean McGivern的拉取请求。
- en: 'This change is also **backported** to: 0.9.5, 0.8.7'
  id: totrans-3659
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.9.5, 0.8.7
- en: '**[mysql] [bug]**'
  id: totrans-3660
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Added a version check to the MySQLdb dialect surrounding the check for ‘utf8_bin’
    collation, as this fails on MySQL server < 5.0.
  id: totrans-3661
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在MySQLdb方言周围添加了一个版本检查，用于检查‘utf8_bin’排序规则，因为这在MySQL服务器<5.0上失败。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-3662
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.9.9
- en: 'References: [#3274](https://www.sqlalchemy.org/trac/ticket/3274)'
  id: totrans-3663
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3274](https://www.sqlalchemy.org/trac/ticket/3274)
- en: '**[mysql] [bug] [mysqlconnector]**'
  id: totrans-3664
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug] [mysqlconnector]**'
- en: Mysqlconnector as of version 2.0, probably as a side effect of the python 3
    merge, now does not expect percent signs (e.g. as used as the modulus operator
    and others) to be doubled, even when using the “pyformat” bound parameter format
    (this change is not documented by Mysqlconnector). The dialect now checks for
    py2k and for mysqlconnector less than version 2.0 when detecting if the modulus
    operator should be rendered as `%%` or `%`.
  id: totrans-3665
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Mysqlconnector在2.0版本中，可能是由于Python 3合并的副作用，现在不再期望百分号（例如用作模运算符和其他用途）被加倍，即使使用“pyformat”绑定参数格式（这个更改没有被Mysqlconnector记录）。方言现在在检测模运算符应该呈现为`%%`还是`%`时，检查py2k和mysqlconnector小于2.0版本。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-3666
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.9.8
- en: '**[mysql] [bug] [mysqlconnector]**'
  id: totrans-3667
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug] [mysqlconnector]**'
- en: Unicode SQL is now passed for MySQLconnector version 2.0 and above; for Py2k
    and MySQL < 2.0, strings are encoded.
  id: totrans-3668
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在对于MySQLconnector 2.0及以上版本传递Unicode SQL；对于Py2k和MySQL < 2.0，字符串被编码。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-3669
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.9.8
- en: '**[mysql] [bug]**'
  id: totrans-3670
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: The MySQL dialect now supports CAST on types that are constructed as [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") objects.
  id: totrans-3671
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL方言现在支持在构造为[`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")对象的类型上进行CAST。
- en: '**[mysql] [bug]**'
  id: totrans-3672
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: A warning is emitted when [`cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.cast
    "sqlalchemy.sql.expression.cast") is used with the MySQL dialect on a type where
    MySQL does not support CAST; MySQL only supports CAST on a subset of datatypes.
    SQLAlchemy has for a long time just omitted the CAST for unsupported types in
    the case of MySQL. While we don’t want to change this now, we emit a warning to
    show that it’s taken place. A warning is also emitted when a CAST is used with
    an older MySQL version (< 4) that doesn’t support CAST at all, it’s skipped in
    this case as well.
  id: totrans-3673
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当在 MySQL 方言上使用 [`cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.cast
    "sqlalchemy.sql.expression.cast") 转换不支持的类型时，会发出警告；MySQL 仅支持对部分数据类型进行转换。长期以来，SQLAlchemy
    在 MySQL 的情况下仅省略了不支持类型的 CAST。虽然我们现在不希望改变这一点，但我们发出警告以显示已经发生的情况。当使用不支持 CAST 的旧版 MySQL（<
    4）时，也会发出警告，在这种情况下也会被跳过。
- en: 'References: [#3237](https://www.sqlalchemy.org/trac/ticket/3237)'
  id: totrans-3674
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3237](https://www.sqlalchemy.org/trac/ticket/3237)
- en: '**[mysql] [bug]**'
  id: totrans-3675
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: The [`SET`](../dialects/mysql.html#sqlalchemy.dialects.mysql.SET "sqlalchemy.dialects.mysql.SET")
    type has been overhauled to no longer assume that the empty string, or a set with
    a single empty string value, is in fact a set with a single empty string; instead,
    this is by default treated as the empty set. In order to handle persistence of
    a [`SET`](../dialects/mysql.html#sqlalchemy.dialects.mysql.SET "sqlalchemy.dialects.mysql.SET")
    that actually wants to include the blank value `''` as a legitimate value, a new
    bitwise operational mode is added which is enabled by the [`SET.retrieve_as_bitwise`](../dialects/mysql.html#sqlalchemy.dialects.mysql.SET.params.retrieve_as_bitwise
    "sqlalchemy.dialects.mysql.SET") flag, which will persist and retrieve values
    unambiguously using their bitflag positioning. Storage and retrieval of unicode
    values for driver configurations that aren’t converting unicode natively is also
    repaired.
  id: totrans-3676
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`SET`](../dialects/mysql.html#sqlalchemy.dialects.mysql.SET "sqlalchemy.dialects.mysql.SET")
    类型已经重构，不再假设空字符串或包含单个空字符串值的集合实际上是包含单个空字符串的集合；相反，默认情况下将其视为空集。为了处理实际上希望包含空白值 `''''`
    作为合法值的 [`SET`](../dialects/mysql.html#sqlalchemy.dialects.mysql.SET "sqlalchemy.dialects.mysql.SET")
    的持久性，添加了一种新的位操作模式，该模式通过 [`SET.retrieve_as_bitwise`](../dialects/mysql.html#sqlalchemy.dialects.mysql.SET.params.retrieve_as_bitwise
    "sqlalchemy.dialects.mysql.SET") 标志启用，该标志将使用它们的位标志位置明确地持久化和检索值。还修复了对于不本地转换 Unicode
    的驱动程序配置的 Unicode 值的存储和检索。'
- en: See also
  id: totrans-3677
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[MySQL SET Type Overhauled to support empty sets, unicode, blank value handling](migration_10.html#change-3283)'
  id: totrans-3678
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[MySQL SET 类型重构以支持空集合、Unicode、空值处理](migration_10.html#change-3283)'
- en: 'References: [#3283](https://www.sqlalchemy.org/trac/ticket/3283)'
  id: totrans-3679
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3283](https://www.sqlalchemy.org/trac/ticket/3283)
- en: '**[mysql] [bug]**'
  id: totrans-3680
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: The [`ColumnOperators.match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") operator is now handled such
    that the return type is not strictly assumed to be boolean; it now returns a [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean") subclass called [`MatchType`](../core/type_basics.html#sqlalchemy.types.MatchType
    "sqlalchemy.types.MatchType"). The type will still produce boolean behavior when
    used in Python expressions, however the dialect can override its behavior at result
    time. In the case of MySQL, while the MATCH operator is typically used in a boolean
    context within an expression, if one actually queries for the value of a match
    expression, a floating point value is returned; this value is not compatible with
    SQLAlchemy’s C-based boolean processor, so MySQL’s result-set behavior now follows
    that of the [`Float`](../core/type_basics.html#sqlalchemy.types.Float "sqlalchemy.types.Float")
    type. A new operator object `notmatch_op` is also added to better allow dialects
    to define the negation of a match operation.
  id: totrans-3681
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") 运算符现在处理方式不再严格假定返回类型为布尔值；现在返回一个名为
    [`MatchType`](../core/type_basics.html#sqlalchemy.types.MatchType "sqlalchemy.types.MatchType")
    的 [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean")
    子类。当在 Python 表达式中使用时，该类型仍然会产生布尔行为，但是方言可以在结果时间覆盖其行为。在 MySQL 的情况下，虽然 MATCH 运算符通常在表达式的布尔上下文中使用，但如果实际上查询匹配表达式的值，则返回一个浮点值；此值与
    SQLAlchemy 的基于 C 的布尔处理器不兼容，因此 MySQL 的结果集行为现在遵循 [`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float") 类型的行为。还添加了一个新的运算符对象 `notmatch_op`，以更好地允许方言定义匹配操作的否定。'
- en: See also
  id: totrans-3682
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[The match() operator now returns an agnostic MatchType compatible with MySQL’s
    floating point return value](migration_10.html#change-3263)'
  id: totrans-3683
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[match()运算符现在返回与MySQL的浮点返回值兼容的MatchType](migration_10.html#change-3263)'
- en: 'References: [#3263](https://www.sqlalchemy.org/trac/ticket/3263)'
  id: totrans-3684
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3263](https://www.sqlalchemy.org/trac/ticket/3263)
- en: '**[mysql] [bug]**'
  id: totrans-3685
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: MySQL boolean symbols “true”, “false” work again. 0.9’s change in [#2682](https://www.sqlalchemy.org/trac/ticket/2682)
    disallowed the MySQL dialect from making use of the “true” and “false” symbols
    in the context of “IS” / “IS NOT”, but MySQL supports this syntax even though
    it has no boolean type. MySQL remains “non native boolean”, but the [`true()`](../core/sqlelement.html#sqlalchemy.sql.expression.true
    "sqlalchemy.sql.expression.true") and [`false()`](../core/sqlelement.html#sqlalchemy.sql.expression.false
    "sqlalchemy.sql.expression.false") symbols again produce the keywords “true” and
    “false”, so that an expression like `column.is_(true())` again works on MySQL.
  id: totrans-3686
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL布尔符号“true”、“false”再次有效。0.9版本中的[#2682](https://www.sqlalchemy.org/trac/ticket/2682)更改禁止了MySQL方言在“IS”/“IS
    NOT”的上下文中使用“true”和“false”符号，但MySQL支持这种语法，尽管它没有布尔类型。MySQL仍然是“非本机布尔”，但[`true()`](../core/sqlelement.html#sqlalchemy.sql.expression.true
    "sqlalchemy.sql.expression.true")和[`false()`](../core/sqlelement.html#sqlalchemy.sql.expression.false
    "sqlalchemy.sql.expression.false")符号再次生成关键字“true”和“false”，因此像`column.is_(true())`这样的表达式在MySQL上再次有效。
- en: See also
  id: totrans-3687
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[MySQL boolean symbols “true”, “false” work again](migration_10.html#bug-3186)'
  id: totrans-3688
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[MySQL布尔符号“true”、“false”再次有效](migration_10.html#bug-3186)'
- en: 'References: [#3186](https://www.sqlalchemy.org/trac/ticket/3186)'
  id: totrans-3689
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3186](https://www.sqlalchemy.org/trac/ticket/3186)
- en: '**[mysql] [bug]**'
  id: totrans-3690
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: The MySQL dialect will now disable `ConnectionEvents.handle_error()` events
    from firing for those statements which it uses internally to detect if a table
    exists or not. This is achieved using an execution option `skip_user_error_events`
    that disables the handle error event for the scope of that execution. In this
    way, user code that rewrites exceptions doesn’t need to worry about the MySQL
    dialect or other dialects that occasionally need to catch SQLAlchemy specific
    exceptions.
  id: totrans-3691
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL方言现在将禁用`ConnectionEvents.handle_error()`事件，以便对于其内部用于检测表是否存在的语句，不会触发该事件。这是通过使用一个执行选项`skip_user_error_events`来实现的，该选项在该执行范围内禁用了处理错误事件。通过这种方式，重写异常的用户代码不需要担心MySQL方言或其他偶尔需要捕获SQLAlchemy特定异常的方言。
- en: '**[mysql] [bug]**'
  id: totrans-3692
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Changed the default value of “raise_on_warnings” to False for MySQLconnector.
    This was set at True for some reason. The “buffered” flag unfortunately must stay
    at True as MySQLconnector does not allow a cursor to be closed unless all results
    are fully fetched.
  id: totrans-3693
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将“raise_on_warnings”的默认值更改为False以适用于MySQLconnector。由于某种原因，这被设置为True。不幸的是，“buffered”标志必须保持为True，因为MySQLconnector不允许关闭游标，除非所有结果都被完全获取。
- en: 'References: [#2515](https://www.sqlalchemy.org/trac/ticket/2515)'
  id: totrans-3694
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2515](https://www.sqlalchemy.org/trac/ticket/2515)
- en: sqlite
  id: totrans-3695
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [feature]**'
  id: totrans-3696
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [feature]**'
- en: Added support for partial indexes (e.g. with a WHERE clause) on SQLite. Pull
    request courtesy Kai Groner.
  id: totrans-3697
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对SQLite上的部分索引（例如带有WHERE子句）的支持。感谢Kai Groner的拉取请求。
- en: See also
  id: totrans-3698
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Partial Indexes](../dialects/sqlite.html#sqlite-partial-index)'
  id: totrans-3699
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[部分索引](../dialects/sqlite.html#sqlite-partial-index)'
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-3700
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.9
- en: '**[sqlite] [feature]**'
  id: totrans-3701
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [feature]**'
- en: Added a new SQLite backend for the SQLCipher backend. This backend provides
    for encrypted SQLite databases using the pysqlcipher Python driver, which is very
    similar to the pysqlite driver.
  id: totrans-3702
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为SQLCipher后端添加了一个新的SQLite后端。该后端使用pysqlcipher Python驱动程序提供加密的SQLite数据库，该驱动程序与pysqlite驱动程序非常相似。
- en: See also
  id: totrans-3703
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`pysqlcipher`](../dialects/sqlite.html#module-sqlalchemy.dialects.sqlite.pysqlcipher
    "sqlalchemy.dialects.sqlite.pysqlcipher")'
  id: totrans-3704
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`pysqlcipher`](../dialects/sqlite.html#module-sqlalchemy.dialects.sqlite.pysqlcipher
    "sqlalchemy.dialects.sqlite.pysqlcipher")'
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-3705
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.9
- en: '**[sqlite] [bug]**'
  id: totrans-3706
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: When selecting from a UNION using an attached database file, the pysqlite driver
    reports column names in cursor.description as ‘dbname.tablename.colname’, instead
    of ‘tablename.colname’ as it normally does for a UNION (note that it’s supposed
    to just be ‘colname’ for both, but we work around it). The column translation
    logic here has been adjusted to retrieve the rightmost token, rather than the
    second token, so it works in both cases. Workaround courtesy Tony Roberts.
  id: totrans-3707
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用附加数据库文件从 UNION 中进行选择时，pysqlite 驱动程序将列名报告为 ‘dbname.tablename.colname’，而不是通常对于
    UNION 的 ‘tablename.colname’（请注意，对于两者，应该只是 ‘colname’，但我们对此进行了处理）。此处的列翻译逻辑已经调整为检索最右边的标记，而不是第二个标记，因此在两种情况下都有效。感谢
    Tony Roberts 提供的解决方法。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-3708
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.8
- en: 'References: [#3211](https://www.sqlalchemy.org/trac/ticket/3211)'
  id: totrans-3709
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3211](https://www.sqlalchemy.org/trac/ticket/3211)
- en: '**[sqlite] [bug]**'
  id: totrans-3710
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Fixed a SQLite join rewriting issue where a subquery that is embedded as a scalar
    subquery such as within an IN would receive inappropriate substitutions from the
    enclosing query, if the same table were present inside the subquery as were in
    the enclosing query such as in a joined inheritance scenario.
  id: totrans-3711
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 SQLite 连接重写问题，其中一个作为标量子查询嵌入的子查询（例如在 IN 中）会从包含查询中接收不适当的替换，如果相同的表在子查询中存在，如在连接继承场景中。
- en: 'This change is also **backported** to: 0.9.7'
  id: totrans-3712
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.7
- en: 'References: [#3130](https://www.sqlalchemy.org/trac/ticket/3130)'
  id: totrans-3713
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3130](https://www.sqlalchemy.org/trac/ticket/3130)
- en: '**[sqlite] [bug]**'
  id: totrans-3714
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: UNIQUE and FOREIGN KEY constraints are now fully reflected on SQLite both with
    and without names. Previously, foreign key names were ignored and unnamed unique
    constraints were skipped. Thanks to Jon Nelson for assistance with this.
  id: totrans-3715
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在在 SQLite 上完全反映了唯一约束和外键约束，无论是否有名称。之前，外键名称被忽略，未命名的唯一约束被跳过。感谢 Jon Nelson 的帮助。
- en: 'References: [#3244](https://www.sqlalchemy.org/trac/ticket/3244), [#3261](https://www.sqlalchemy.org/trac/ticket/3261)'
  id: totrans-3716
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3244](https://www.sqlalchemy.org/trac/ticket/3244), [#3261](https://www.sqlalchemy.org/trac/ticket/3261)
- en: '**[sqlite] [bug]**'
  id: totrans-3717
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: The SQLite dialect, when using the [`DATE`](../dialects/sqlite.html#sqlalchemy.dialects.sqlite.DATE
    "sqlalchemy.dialects.sqlite.DATE"), [`TIME`](../dialects/sqlite.html#sqlalchemy.dialects.sqlite.TIME
    "sqlalchemy.dialects.sqlite.TIME"), or [`DATETIME`](../dialects/sqlite.html#sqlalchemy.dialects.sqlite.DATETIME
    "sqlalchemy.dialects.sqlite.DATETIME") types, and given a `storage_format` that
    only renders numbers, will render the types in DDL as `DATE_CHAR`, `TIME_CHAR`,
    and `DATETIME_CHAR`, so that despite the lack of alpha characters in the values,
    the column will still deliver the “text affinity”. Normally this is not needed,
    as the textual values within the default storage formats already imply text.
  id: totrans-3718
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用 [`DATE`](../dialects/sqlite.html#sqlalchemy.dialects.sqlite.DATE "sqlalchemy.dialects.sqlite.DATE")、[`TIME`](../dialects/sqlite.html#sqlalchemy.dialects.sqlite.TIME
    "sqlalchemy.dialects.sqlite.TIME") 或 [`DATETIME`](../dialects/sqlite.html#sqlalchemy.dialects.sqlite.DATETIME
    "sqlalchemy.dialects.sqlite.DATETIME") 类型的 SQLite 方言，并给定一个只呈现数字的 `storage_format`，将在
    DDL 中将类型呈现为 `DATE_CHAR`、`TIME_CHAR` 和 `DATETIME_CHAR`，以便尽管值中缺少字母字符，列仍会提供“文本亲和性”。通常情况下，这是不需要的，因为默认存储格式中的文本值已经暗示了文本。
- en: See also
  id: totrans-3719
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Date and Time Types](../dialects/sqlite.html#sqlite-datetime)'
  id: totrans-3720
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[日期和时间类型](../dialects/sqlite.html#sqlite-datetime)'
- en: 'References: [#3257](https://www.sqlalchemy.org/trac/ticket/3257)'
  id: totrans-3721
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3257](https://www.sqlalchemy.org/trac/ticket/3257)
- en: '**[sqlite] [bug]**'
  id: totrans-3722
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: SQLite now supports reflection of unique constraints from temp tables; previously,
    this would fail with a TypeError. Pull request courtesy Johannes Erdfelt.
  id: totrans-3723
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLite 现在支持从临时表反射唯一约束；之前，这会导致 TypeError 错误。感谢 Johannes Erdfelt 提交的拉取请求。
- en: See also
  id: totrans-3724
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[SQLite/Oracle have distinct methods for temporary table/view name reporting](migration_10.html#change-3204)
    - changes regarding SQLite temporary table and view reflection.'
  id: totrans-3725
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[SQLite/Oracle 有不同的临时表/视图名称报告方法](migration_10.html#change-3204) - 有关 SQLite
    临时表和视图反射的更改。'
- en: 'References: [#3203](https://www.sqlalchemy.org/trac/ticket/3203)'
  id: totrans-3726
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3203](https://www.sqlalchemy.org/trac/ticket/3203)
- en: '**[sqlite] [bug]**'
  id: totrans-3727
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Added [`Inspector.get_temp_table_names()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_temp_table_names
    "sqlalchemy.engine.reflection.Inspector.get_temp_table_names") and [`Inspector.get_temp_view_names()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_temp_view_names
    "sqlalchemy.engine.reflection.Inspector.get_temp_view_names"); currently, only
    the SQLite and Oracle dialects support these methods. The return of temporary
    table and view names has been **removed** from SQLite and Oracle’s version of
    [`Inspector.get_table_names()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_table_names
    "sqlalchemy.engine.reflection.Inspector.get_table_names") and [`Inspector.get_view_names()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_view_names
    "sqlalchemy.engine.reflection.Inspector.get_view_names"); other database backends
    cannot support this information (such as MySQL), and the scope of operation is
    different in that the tables can be local to a session and typically aren’t supported
    in remote schemas.
  id: totrans-3728
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了[`Inspector.get_temp_table_names()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_temp_table_names
    "sqlalchemy.engine.reflection.Inspector.get_temp_table_names")和[`Inspector.get_temp_view_names()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_temp_view_names
    "sqlalchemy.engine.reflection.Inspector.get_temp_view_names")；目前，只有 SQLite 和 Oracle
    方言支持这些方法。临时表和视图名称的返回已从 SQLite 和 Oracle 的版本[`Inspector.get_table_names()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_table_names
    "sqlalchemy.engine.reflection.Inspector.get_table_names")和[`Inspector.get_view_names()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_view_names
    "sqlalchemy.engine.reflection.Inspector.get_view_names")中**移除**；其他数据库后端不支持此信息（如
    MySQL），操作范围也不同，因为表可以是会话本地的，通常不支持远程模式中的表。
- en: See also
  id: totrans-3729
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[SQLite/Oracle have distinct methods for temporary table/view name reporting](migration_10.html#change-3204)'
  id: totrans-3730
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[SQLite/Oracle 有不同的临时表/视图名称报告方法](migration_10.html#change-3204)'
- en: 'References: [#3204](https://www.sqlalchemy.org/trac/ticket/3204)'
  id: totrans-3731
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3204](https://www.sqlalchemy.org/trac/ticket/3204)
- en: mssql
  id: totrans-3732
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [feature]**'
  id: totrans-3733
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [feature]**'
- en: Enabled “multivalues insert” for SQL Server 2008\. Pull request courtesy Albert
    Cervin. Also expanded the checks for “IDENTITY INSERT” mode to include when the
    identity key is present in the VALUEs clause of the statement.
  id: totrans-3734
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 SQL Server 2008 启用了“多值插入”。感谢 Albert Cervin 提交的拉取请求。还扩展了“IDENTITY INSERT”模式的检查，以包括当标识键出现在语句的
    VALUEs 子句中时。
- en: 'This change is also **backported** to: 0.9.7'
  id: totrans-3735
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还**反向移植**到：0.9.7
- en: '**[mssql] [feature]**'
  id: totrans-3736
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [feature]**'
- en: SQL Server 2012 now recommends VARCHAR(max), NVARCHAR(max), VARBINARY(max) for
    large text/binary types. The MSSQL dialect will now respect this based on version
    detection, as well as the new `deprecate_large_types` flag.
  id: totrans-3737
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQL Server 2012 现在推荐对于大文本/二进制类型使用 VARCHAR(max), NVARCHAR(max), VARBINARY(max)。MSSQL
    方言现在会根据版本检测以及新的`deprecate_large_types`标志来尊重这一点。
- en: See also
  id: totrans-3738
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Large Text/Binary Type Deprecation](../dialects/mssql.html#mssql-large-type-deprecation)'
  id: totrans-3739
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[大文本/二进制类型弃用](../dialects/mssql.html#mssql-large-type-deprecation)'
- en: 'References: [#3039](https://www.sqlalchemy.org/trac/ticket/3039)'
  id: totrans-3740
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3039](https://www.sqlalchemy.org/trac/ticket/3039)
- en: '**[mssql] [changed]**'
  id: totrans-3741
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [changed]**'
- en: The hostname-based connection format for SQL Server when using pyodbc will no
    longer specify a default “driver name”, and a warning is emitted if this is missing.
    The optimal driver name for SQL Server changes frequently and is per-platform,
    so hostname based connections need to specify this. DSN-based connections are
    preferred.
  id: totrans-3742
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用 pyodbc 时，基于主机名的 SQL Server 连接格式将不再指定默认的“驱动程序名称”，如果缺少此项将发出警告。SQL Server 的最佳驱动程序名称经常更改，并且是每个平台的，因此基于主机名的连接需要指定此项。优先使用
    DSN-based 连接。
- en: See also
  id: totrans-3743
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[PyODBC driver name is required with hostname-based SQL Server connections](migration_10.html#change-3182)'
  id: totrans-3744
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[基于主机名的 SQL Server 连接需要 PyODBC 驱动程序名称](migration_10.html#change-3182)'
- en: 'References: [#3182](https://www.sqlalchemy.org/trac/ticket/3182)'
  id: totrans-3745
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3182](https://www.sqlalchemy.org/trac/ticket/3182)
- en: '**[mssql] [bug]**'
  id: totrans-3746
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Added statement encoding to the “SET IDENTITY_INSERT” statements which operate
    when an explicit INSERT is being interjected into an IDENTITY column, to support
    non-ascii table identifiers on drivers such as pyodbc + unix + py2k that don’t
    support unicode statements.
  id: totrans-3747
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对“SET IDENTITY_INSERT”语句的语句编码，当明确在 IDENTITY 列中插入时进行操作，以支持在不支持 Unicode 语句的驱动程序（如
    pyodbc + unix + py2k）上使用非 ASCII 表标识符。
- en: 'This change is also **backported** to: 0.9.7, 0.8.7'
  id: totrans-3748
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还**反向移植**到：0.9.7, 0.8.7
- en: '**[mssql] [bug]**'
  id: totrans-3749
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: In the SQL Server pyodbc dialect, repaired the implementation for the `description_encoding`
    dialect parameter, which when not explicitly set was preventing cursor.description
    from being parsed correctly in the case of result sets that contained names in
    alternate encodings. This parameter shouldn’t be needed going forward.
  id: totrans-3750
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在SQL Server pyodbc方言中，修复了`description_encoding`方言参数的实现，当未明确设置时，会导致无法正确解析包含其他编码名称的结果集中的cursor.description。未来不应该需要此参数。
- en: 'This change is also **backported** to: 0.9.7, 0.8.7'
  id: totrans-3751
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.9.7, 0.8.7
- en: 'References: [#3091](https://www.sqlalchemy.org/trac/ticket/3091)'
  id: totrans-3752
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3091](https://www.sqlalchemy.org/trac/ticket/3091)
- en: '**[mssql] [bug]**'
  id: totrans-3753
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed the version string detection in the pymssql dialect to work with Microsoft
    SQL Azure, which changes the word “SQL Server” to “SQL Azure”.
  id: totrans-3754
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在pymssql方言中检测版本字符串以与Microsoft SQL Azure一起使用的问题，后者将“SQL Server”更改为“SQL Azure”。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-3755
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.9.8
- en: 'References: [#3151](https://www.sqlalchemy.org/trac/ticket/3151)'
  id: totrans-3756
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3151](https://www.sqlalchemy.org/trac/ticket/3151)
- en: '**[mssql] [bug]**'
  id: totrans-3757
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Revised the query used to determine the current default schema name to use the
    `database_principal_id()` function in conjunction with the `sys.database_principals`
    view so that we can determine the default schema independently of the type of
    login in progress (e.g., SQL Server, Windows, etc).
  id: totrans-3758
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修订了用于确定当前默认模式名称的查询，使用`database_principal_id()`函数与`sys.database_principals`视图结合使用，以便我们可以独立于正在进行的登录类型（例如，SQL
    Server，Windows等）确定默认模式。。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-3759
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.9.5
- en: 'References: [#3025](https://www.sqlalchemy.org/trac/ticket/3025)'
  id: totrans-3760
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3025](https://www.sqlalchemy.org/trac/ticket/3025)
- en: oracle
  id: totrans-3761
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [feature]**'
  id: totrans-3762
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [feature]**'
- en: Added support for cx_oracle connections to a specific service name, as opposed
    to a tns name, by passing `?service_name=<name>` to the URL. Pull request courtesy
    Sławomir Ehlert.
  id: totrans-3763
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对cx_oracle连接到特定服务名称的支持，而不是传递`?service_name=<name>`到URL的tns名称。感谢Sławomir Ehlert的拉取请求。
- en: '**[oracle] [feature]**'
  id: totrans-3764
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [feature]**'
- en: 'New Oracle DDL features for tables, indexes: COMPRESS, BITMAP. Patch courtesy
    Gabor Gombas.'
  id: totrans-3765
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为表和索引添加了新的Oracle DDL功能：COMPRESS，BITMAP。补丁由Gabor Gombas提供。
- en: '**[oracle] [feature]**'
  id: totrans-3766
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [feature]**'
- en: Added support for CTEs under Oracle. This includes some tweaks to the aliasing
    syntax, as well as a new CTE feature `CTE.suffix_with()`, which is useful for
    adding in special Oracle-specific directives to the CTE.
  id: totrans-3767
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对Oracle下CTE的支持。这包括对别名语法的一些调整，以及一个新的CTE功能`CTE.suffix_with()`，用于向CTE添加特殊的Oracle特定指令。
- en: See also
  id: totrans-3768
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Improved support for CTEs in Oracle](migration_10.html#change-3220)'
  id: totrans-3769
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[改进了Oracle中CTE的支持](migration_10.html#change-3220)'
- en: 'References: [#3220](https://www.sqlalchemy.org/trac/ticket/3220)'
  id: totrans-3770
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3220](https://www.sqlalchemy.org/trac/ticket/3220)
- en: '**[oracle] [feature]**'
  id: totrans-3771
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [feature]**'
- en: Added support for the Oracle table option ON COMMIT.
  id: totrans-3772
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对Oracle表选项ON COMMIT的支持。
- en: '**[oracle] [bug]**'
  id: totrans-3773
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed long-standing bug in Oracle dialect where bound parameter names that started
    with numbers would not be quoted, as Oracle doesn’t like numerics in bound parameter
    names.
  id: totrans-3774
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Oracle方言中长期存在的bug，即以数字开头的绑定参数名称不会被引用，因为Oracle不喜欢绑定参数名称中的数字。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-3775
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.9.8
- en: 'References: [#2138](https://www.sqlalchemy.org/trac/ticket/2138)'
  id: totrans-3776
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2138](https://www.sqlalchemy.org/trac/ticket/2138)
- en: '**[oracle] [bug] [tests]**'
  id: totrans-3777
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug] [tests]**'
- en: Fixed bug in oracle dialect test suite where in one test, ‘username’ was assumed
    to be in the database URL, even though this might not be the case.
  id: totrans-3778
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了oracle方言测试套件中的bug，在一个测试中，假定‘username’在数据库URL中，即使这可能并非如此。
- en: 'This change is also **backported** to: 0.9.7'
  id: totrans-3779
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.9.7
- en: 'References: [#3128](https://www.sqlalchemy.org/trac/ticket/3128)'
  id: totrans-3780
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3128](https://www.sqlalchemy.org/trac/ticket/3128)
- en: '**[oracle] [bug]**'
  id: totrans-3781
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: An alias name will be properly quoted when referred to using the `%(name)s`
    token inside the [`Select.with_hint()`](../core/selectable.html#sqlalchemy.sql.expression.Select.with_hint
    "sqlalchemy.sql.expression.Select.with_hint") method. Previously, the Oracle backend
    hadn’t implemented this quoting.
  id: totrans-3782
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当在[`Select.with_hint()`](../core/selectable.html#sqlalchemy.sql.expression.Select.with_hint
    "sqlalchemy.sql.expression.Select.with_hint")方法中使用`%(name)s`标记引用别名时，别名将被正确引用。之前，Oracle后端尚未实现此引用。
- en: tests
  id: totrans-3783
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [bug]**'
  id: totrans-3784
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[tests] [bug]**'
- en: Fixed bug where “python setup.py test” wasn’t calling into distutils appropriately,
    and errors would be emitted at the end of the test suite.
  id: totrans-3785
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“python setup.py test”未适当调用distutils的错误，错误将在测试套件结束时发出。
- en: 'This change is also **backported** to: 0.9.7'
  id: totrans-3786
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**至：0.9.7
- en: '**[tests] [bug] [py3k]**'
  id: totrans-3787
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[测试] [bug] [py3k]**'
- en: Corrected for some deprecation warnings involving the `imp` module and Python
    3.3 or greater, when running tests. Pull request courtesy Matt Chisholm.
  id: totrans-3788
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修正了涉及`imp`模块和Python 3.3或更高版本的一些弃用警告，在运行测试时。感谢Matt Chisholm的拉取请求。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-3789
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**至：0.9.5
- en: 'References: [#2830](https://www.sqlalchemy.org/trac/ticket/2830)'
  id: totrans-3790
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2830](https://www.sqlalchemy.org/trac/ticket/2830)
- en: misc
  id: totrans-3791
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[feature] [ext]**'
  id: totrans-3792
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[功能] [扩展]**'
- en: Added a new extension suite [`sqlalchemy.ext.baked`](../orm/extensions/baked.html#module-sqlalchemy.ext.baked
    "sqlalchemy.ext.baked"). This simple but unusual system allows for a dramatic
    savings in Python overhead for the construction and processing of orm [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") objects, from query construction up through rendering
    of a string SQL statement.
  id: totrans-3793
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的扩展套件[`sqlalchemy.ext.baked`](../orm/extensions/baked.html#module-sqlalchemy.ext.baked
    "sqlalchemy.ext.baked")。这个简单但不寻常的系统允许在构建和处理orm [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象时大大节省Python开销，从查询构建到渲染字符串SQL语句。
- en: See also
  id: totrans-3794
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Baked Queries](../orm/extensions/baked.html)'
  id: totrans-3795
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[烘焙查询](../orm/extensions/baked.html)'
- en: 'References: [#3054](https://www.sqlalchemy.org/trac/ticket/3054)'
  id: totrans-3796
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3054](https://www.sqlalchemy.org/trac/ticket/3054)
- en: '**[feature] [ext]**'
  id: totrans-3797
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[功能] [扩展]**'
- en: The [`sqlalchemy.ext.automap`](../orm/extensions/automap.html#module-sqlalchemy.ext.automap
    "sqlalchemy.ext.automap") extension will now set `cascade="all, delete-orphan"`
    automatically on a one-to-many relationship/backref where the foreign key is detected
    as containing one or more non-nullable columns. This argument is present in the
    keywords passed to [`generate_relationship()`](../orm/extensions/automap.html#sqlalchemy.ext.automap.generate_relationship
    "sqlalchemy.ext.automap.generate_relationship") in this case and can still be
    overridden. Additionally, if the [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") specifies `ondelete="CASCADE"` for a
    non-nullable or `ondelete="SET NULL"` for a nullable set of columns, the argument
    `passive_deletes=True` is also added to the relationship. Note that not all backends
    support reflection of ondelete, but backends that do include PostgreSQL and MySQL.
  id: totrans-3798
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`sqlalchemy.ext.automap`](../orm/extensions/automap.html#module-sqlalchemy.ext.automap
    "sqlalchemy.ext.automap")扩展现在将自动在检测到包含一个或多个非空列的外键的一对多关系/backref上设置`cascade="all,
    delete-orphan"`。在这种情况下，此参数存在于传递给[`generate_relationship()`](../orm/extensions/automap.html#sqlalchemy.ext.automap.generate_relationship
    "sqlalchemy.ext.automap.generate_relationship")的关键字中，仍然可以被覆盖。此外，如果[`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")为非空列指定了`ondelete="CASCADE"`或为可空列指定了`ondelete="SET
    NULL"`，则还会将参数`passive_deletes=True`添加到关系中。请注意，并非所有后端都支持ondelete的反射，但支持反射的后端包括PostgreSQL和MySQL。'
- en: 'References: [#3210](https://www.sqlalchemy.org/trac/ticket/3210)'
  id: totrans-3799
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3210](https://www.sqlalchemy.org/trac/ticket/3210)
- en: '**[bug] [declarative]**'
  id: totrans-3800
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [声明性]**'
- en: The `__mapper_args__` dictionary is copied from a declarative mixin or abstract
    class when accessed, so that modifications made to this dictionary by declarative
    itself won’t conflict with that of other mappings. The dictionary is modified
    regarding the `version_id_col` and `polymorphic_on` arguments, replacing the column
    within with the one that is officially mapped to the local class/table.
  id: totrans-3801
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当访问`__mapper_args__`字典时，会从声明性mixin或抽象类中复制，以便声明性本身对该字典所做的修改不会与其他映射发生冲突。该字典在`version_id_col`和`polymorphic_on`参数方面进行修改，用本地类/表正式映射的列替换其中的列。
- en: 'This change is also **backported** to: 0.9.5, 0.8.7'
  id: totrans-3802
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**至：0.9.5，0.8.7
- en: 'References: [#3062](https://www.sqlalchemy.org/trac/ticket/3062)'
  id: totrans-3803
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3062](https://www.sqlalchemy.org/trac/ticket/3062)
- en: '**[bug] [ext]**'
  id: totrans-3804
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [扩展]**'
- en: Fixed bug in mutable extension where [`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict") did not report change events for the `setdefault()`
    dictionary operation.
  id: totrans-3805
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了可变扩展中的一个bug，[`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict")未对`setdefault()`字典操作报告更改事件。
- en: 'This change is also **backported** to: 0.9.5, 0.8.7'
  id: totrans-3806
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**至：0.9.5，0.8.7
- en: 'References: [#3051](https://www.sqlalchemy.org/trac/ticket/3051), [#3093](https://www.sqlalchemy.org/trac/ticket/3093)'
  id: totrans-3807
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3051](https://www.sqlalchemy.org/trac/ticket/3051)，[#3093](https://www.sqlalchemy.org/trac/ticket/3093)
- en: '**[bug] [ext]**'
  id: totrans-3808
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [扩展]**'
- en: Fixed bug where [`MutableDict.setdefault()`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict.setdefault
    "sqlalchemy.ext.mutable.MutableDict.setdefault") didn’t return the existing or
    new value (this bug was not released in any 0.8 version). Pull request courtesy
    Thomas Hervé.
  id: totrans-3809
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`MutableDict.setdefault()`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict.setdefault
    "sqlalchemy.ext.mutable.MutableDict.setdefault")没有返回现有值或新值的错误（这个bug没有在任何0.8版本中发布）。感谢Thomas
    Hervé提供的拉取请求。
- en: 'This change is also **backported** to: 0.9.5, 0.8.7'
  id: totrans-3810
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.9.5, 0.8.7
- en: 'References: [#3051](https://www.sqlalchemy.org/trac/ticket/3051), [#3093](https://www.sqlalchemy.org/trac/ticket/3093)'
  id: totrans-3811
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3051](https://www.sqlalchemy.org/trac/ticket/3051), [#3093](https://www.sqlalchemy.org/trac/ticket/3093)
- en: '**[bug] [ext] [py3k]**'
  id: totrans-3812
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext] [py3k]**'
- en: Fixed bug where the association proxy list class would not interpret slices
    correctly under Py3K. Pull request courtesy Gilles Dartiguelongue.
  id: totrans-3813
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在Py3K下关联代理列表类无法正确解释切片的错误。感谢Gilles Dartiguelongue提供的拉取请求。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-3814
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.9.9
- en: '**[bug] [declarative]**'
  id: totrans-3815
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [declarative]**'
- en: Fixed an unlikely race condition observed in some exotic end-user setups, where
    the attempt to check for “duplicate class name” in declarative would hit upon
    a not-totally-cleaned-up weak reference related to some other class being removed;
    the check here now ensures the weakref still references an object before calling
    upon it further.
  id: totrans-3816
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一种在一些奇特的最终用户设置中观察到的不太可能的竞争条件，其中在声明中尝试检查“重复类名”时会遇到与其他被移除的类相关的未完全清理的弱引用；这里的检查现在确保在进一步调用之前弱引用仍然引用一个对象。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-3817
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.9.8
- en: 'References: [#3208](https://www.sqlalchemy.org/trac/ticket/3208)'
  id: totrans-3818
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3208](https://www.sqlalchemy.org/trac/ticket/3208)
- en: '**[bug] [ext]**'
  id: totrans-3819
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug in ordering list where the order of items would be thrown off during
    a collection replace event, if the reorder_on_append flag were set to True. The
    fix ensures that the ordering list only impacts the list that is explicitly associated
    with the object.
  id: totrans-3820
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在排序列表中的一个错误，其中如果将reorder_on_append标志设置为True，则在集合替换事件期间项目的顺序会被打乱。修复确保排序列表仅影响与对象明确关联的列表。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-3821
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.9.8
- en: 'References: [#3191](https://www.sqlalchemy.org/trac/ticket/3191)'
  id: totrans-3822
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3191](https://www.sqlalchemy.org/trac/ticket/3191)
- en: '**[bug] [ext]**'
  id: totrans-3823
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug where [`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict") failed to implement the `update()` dictionary
    method, thus not catching changes. Pull request courtesy Matt Chisholm.
  id: totrans-3824
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict")未实现`update()`字典方法的错误，因此未捕获更改。感谢Matt Chisholm提供的拉取请求。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-3825
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.9.8
- en: '**[bug] [ext]**'
  id: totrans-3826
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug where a custom subclass of [`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict") would not show up in a “coerce” operation,
    and would instead return a plain [`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict"). Pull request courtesy Matt Chisholm.
  id: totrans-3827
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict")的自定义子类在“强制”操作中不会显示，并且会返回一个普通的[`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict")的错误。感谢Matt Chisholm提供的拉取请求。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-3828
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.9.8
- en: '**[bug] [pool]**'
  id: totrans-3829
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [pool]**'
- en: Fixed bug in connection pool logging where the “connection checked out” debug
    logging message would not emit if the logging were set up using `logging.setLevel()`,
    rather than using the `echo_pool` flag. Tests to assert this logging have been
    added. This is a regression that was introduced in 0.9.0.
  id: totrans-3830
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了连接池日志记录中的错误，其中“连接已检出”调试日志记录消息不会在使用`logging.setLevel()`设置日志记录而不是使用`echo_pool`标志时发出。已添加用于断言此日志记录的测试。这是在0.9.0中引入的一个回退。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-3831
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.9.8
- en: 'References: [#3168](https://www.sqlalchemy.org/trac/ticket/3168)'
  id: totrans-3832
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3168](https://www.sqlalchemy.org/trac/ticket/3168)
- en: '**[bug] [declarative]**'
  id: totrans-3833
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [declarative]**'
- en: Fixed bug when the declarative `__abstract__` flag was not being distinguished
    for when it was actually the value `False`. The `__abstract__` flag needs to actually
    evaluate to a True value at the level being tested.
  id: totrans-3834
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当声明的`__abstract__`标志未被区分为实际上是值`False`时的错误。`__abstract__`标志需要在被测试的级别实际上评估为True值。
- en: 'This change is also **backported** to: 0.9.7'
  id: totrans-3835
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.7
- en: 'References: [#3097](https://www.sqlalchemy.org/trac/ticket/3097)'
  id: totrans-3836
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3097](https://www.sqlalchemy.org/trac/ticket/3097)
- en: '**[bug] [testsuite]**'
  id: totrans-3837
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [测试套件]**'
- en: In public test suite, changed to use of `String(40)` from less-supported `Text`
    in `StringTest.test_literal_backslashes`. Pullreq courtesy Jan.
  id: totrans-3838
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在公共测试套件中，从不太受支持的`Text`更改为使用`String(40)`在`StringTest.test_literal_backslashes`中。Pullreq由Jan提供。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-3839
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.5
- en: '**[removed]**'
  id: totrans-3840
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[已移除]**'
- en: The Drizzle dialect has been removed from the Core; it is now available as [sqlalchemy-drizzle](https://bitbucket.org/zzzeek/sqlalchemy-drizzle),
    an independent, third party dialect. The dialect is still based almost entirely
    off of the MySQL dialect present in SQLAlchemy.
  id: totrans-3841
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Drizzle方言已从核心中移除；现在作为[sqlalchemy-drizzle](https://bitbucket.org/zzzeek/sqlalchemy-drizzle)提供，这是一个独立的第三方方言。该方言几乎完全基于SQLAlchemy中存在的MySQL方言。
- en: See also
  id: totrans-3842
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Drizzle Dialect is now an External Dialect](migration_10.html#change-2984)'
  id: totrans-3843
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Drizzle方言现在是外部方言](migration_10.html#change-2984)'
- en: general
  id: totrans-3844
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通用
- en: '**[general] [feature]**'
  id: totrans-3845
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[通用] [特性]**'
- en: Structural memory use has been improved via much more significant use of `__slots__`
    for many internal objects. This optimization is particularly geared towards the
    base memory size of large applications that have lots of tables and columns, and
    greatly reduces memory size for a variety of high-volume objects including event
    listening internals, comparator objects and parts of the ORM attribute and loader
    strategy system.
  id: totrans-3846
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过更多地使用`__slots__`来改进结构内存使用。这种优化特别针对具有大量表和列的大型应用程序的基本内存大小，并大大减少了各种高容量对象的内存大小，包括事件监听内部、比较器对象以及ORM属性和加载器策略系统的部分。
- en: See also
  id: totrans-3847
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Significant Improvements in Structural Memory Use](migration_10.html#feature-slots)'
  id: totrans-3848
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[结构内存使用的显着改进](migration_10.html#feature-slots)'
- en: '**[general] [bug]**'
  id: totrans-3849
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[通用] [错误]**'
- en: The `__module__` attribute is now set for all those SQL and ORM functions that
    are derived as “public factory” symbols, which should assist with documentation
    tools being able to report on the target module.
  id: totrans-3850
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于所有那些作为“公共工厂”符号派生的SQL和ORM函数，现在设置了`__module__`属性，这应有助于文档工具能够报告目标模块。
- en: 'References: [#3218](https://www.sqlalchemy.org/trac/ticket/3218)'
  id: totrans-3851
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3218](https://www.sqlalchemy.org/trac/ticket/3218)
- en: orm
  id: totrans-3852
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM
- en: '**[orm] [feature]**'
  id: totrans-3853
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [特性]**'
- en: Added a new entry `"entity"` to the dictionaries returned by [`Query.column_descriptions`](../orm/queryguide/query.html#sqlalchemy.orm.Query.column_descriptions
    "sqlalchemy.orm.Query.column_descriptions"). This refers to the primary ORM mapped
    class or aliased class that is referred to by the expression. Compared to the
    existing entry for `"type"`, it will always be a mapped entity, even if extracted
    from a column expression, or None if the given expression is a pure core expression.
    See also [#3403](https://www.sqlalchemy.org/trac/ticket/3403) which repaired a
    regression in this feature which was unreleased in 0.9.10 but was released in
    the 1.0 version.
  id: totrans-3854
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[`Query.column_descriptions`](../orm/queryguide/query.html#sqlalchemy.orm.Query.column_descriptions
    "sqlalchemy.orm.Query.column_descriptions")返回的字典中添加了一个新条目`"entity"`。这指的是由表达式引用的主要ORM映射类或别名类。与现有的`"type"`条目相比，它将始终是一个映射实体，即使从列表达式中提取，或者如果给定表达式是一个纯核心表达式，则为None。另请参见[#3403](https://www.sqlalchemy.org/trac/ticket/3403)，修复了此功能中的一个回归，该回归在0.9.10中未发布，但在1.0版本中发布。
- en: 'This change is also **backported** to: 0.9.10'
  id: totrans-3855
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.10
- en: 'References: [#3320](https://www.sqlalchemy.org/trac/ticket/3320)'
  id: totrans-3856
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3320](https://www.sqlalchemy.org/trac/ticket/3320)
- en: '**[orm] [feature]**'
  id: totrans-3857
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [特性]**'
- en: Added new parameter [`Session.connection.execution_options`](../orm/session_api.html#sqlalchemy.orm.Session.connection.params.execution_options
    "sqlalchemy.orm.Session.connection") which may be used to set up execution options
    on a [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    when it is first checked out, before the transaction has begun. This is used to
    set up options such as isolation level on the connection before the transaction
    starts.
  id: totrans-3858
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新参数[`Session.connection.execution_options`](../orm/session_api.html#sqlalchemy.orm.Session.connection.params.execution_options
    "sqlalchemy.orm.Session.connection")，可用于在事务开始之前首次检出[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")时设置执行选项。这用于在事务开始之前在连接上设置选项，如隔离级别。
- en: See also
  id: totrans-3859
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Setting Transaction Isolation Levels / DBAPI AUTOCOMMIT](../orm/session_transaction.html#session-transaction-isolation)
    - new documentation section detailing best practices for setting transaction isolation
    with sessions.'
  id: totrans-3860
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[设置事务隔离级别 / DBAPI AUTOCOMMIT](../orm/session_transaction.html#session-transaction-isolation)
    - 新的文档章节详细介绍了使用会话设置事务隔离的最佳实践。'
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-3861
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也**回溯**到：0.9.9
- en: 'References: [#3296](https://www.sqlalchemy.org/trac/ticket/3296)'
  id: totrans-3862
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3296](https://www.sqlalchemy.org/trac/ticket/3296)
- en: '**[orm] [feature]**'
  id: totrans-3863
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new method [`Session.invalidate()`](../orm/session_api.html#sqlalchemy.orm.Session.invalidate
    "sqlalchemy.orm.Session.invalidate"), functions similarly to [`Session.close()`](../orm/session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close"), except also calls [`Connection.invalidate()`](../core/connections.html#sqlalchemy.engine.Connection.invalidate
    "sqlalchemy.engine.Connection.invalidate") on all connections, guaranteeing that
    they will not be returned to the connection pool. This is useful in situations
    e.g. dealing with gevent timeouts when it is not safe to use the connection further,
    even for rollbacks.
  id: totrans-3864
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的方法[`Session.invalidate()`](../orm/session_api.html#sqlalchemy.orm.Session.invalidate
    "sqlalchemy.orm.Session.invalidate")，功能类似于[`Session.close()`](../orm/session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close")，除了还调用所有连接上的[`Connection.invalidate()`](../core/connections.html#sqlalchemy.engine.Connection.invalidate
    "sqlalchemy.engine.Connection.invalidate")，以确保它们不会返回到连接池中。这在处理 gevent 超时等情况时非常有用，此时不安全继续使用连接，即使是用于回滚也是如此。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-3865
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也**回溯**到：0.9.9
- en: '**[orm] [feature]**'
  id: totrans-3866
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: The “primaryjoin” model has been stretched a bit further to allow a join condition
    that is strictly from a single column to itself, translated through some kind
    of SQL function or expression. This is kind of experimental, but the first proof
    of concept is a “materialized path” join condition where a path string is compared
    to itself using “like”. The [`ColumnOperators.like()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like") operator has also been added
    to the list of valid operators to use in a primaryjoin condition.
  id: totrans-3867
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “primaryjoin”模型被进一步扩展，允许一个严格从单个列到其自身的连接条件，通过某种SQL函数或表达式转换。这有点是实验性的，但第一个概念验证是一个“材料化路径”连接条件，其中一个路径字符串与自身使用“like”进行比较。[`ColumnOperators.like()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")操作符也已添加到在primaryjoin条件中使用的有效操作符列表中。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-3868
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也**回溯**到：0.9.5
- en: 'References: [#3029](https://www.sqlalchemy.org/trac/ticket/3029)'
  id: totrans-3869
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3029](https://www.sqlalchemy.org/trac/ticket/3029)
- en: '**[orm] [feature]**'
  id: totrans-3870
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new utility function [`make_transient_to_detached()`](../orm/session_api.html#sqlalchemy.orm.make_transient_to_detached
    "sqlalchemy.orm.make_transient_to_detached") which can be used to manufacture
    objects that behave as though they were loaded from a session, then detached.
    Attributes that aren’t present are marked as expired, and the object can be added
    to a Session where it will act like a persistent one.
  id: totrans-3871
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的实用函数[`make_transient_to_detached()`](../orm/session_api.html#sqlalchemy.orm.make_transient_to_detached
    "sqlalchemy.orm.make_transient_to_detached")，可用于制造行为就像从会话加载然后分离的对象。不存在的属性标记为过期，对象可以添加到会话中，在那里它将表现得像持久对象一样。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-3872
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也**回溯**到：0.9.5
- en: 'References: [#3017](https://www.sqlalchemy.org/trac/ticket/3017)'
  id: totrans-3873
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3017](https://www.sqlalchemy.org/trac/ticket/3017)
- en: '**[orm] [feature]**'
  id: totrans-3874
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added a new event suite [`QueryEvents`](../orm/events.html#sqlalchemy.orm.QueryEvents
    "sqlalchemy.orm.QueryEvents"). The [`QueryEvents.before_compile()`](../orm/events.html#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile") event allows the creation of functions
    which may place additional modifications to [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") objects before the construction of the SELECT statement.
    It is hoped that this event be made much more useful via the advent of a new inspection
    system that will allow for detailed modifications to be made against [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") objects in an automated fashion.
  id: totrans-3875
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的事件套件[`QueryEvents`](../orm/events.html#sqlalchemy.orm.QueryEvents "sqlalchemy.orm.QueryEvents")。[`QueryEvents.before_compile()`](../orm/events.html#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile")事件允许创建函数，在构建SELECT语句之前对[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象进行额外修改。希望通过引入一个新的检查系统，使这个事件变得更加有用，该系统将允许对[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象进行详细的自动修改。
- en: See also
  id: totrans-3876
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`QueryEvents`](../orm/events.html#sqlalchemy.orm.QueryEvents "sqlalchemy.orm.QueryEvents")'
  id: totrans-3877
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`QueryEvents`](../orm/events.html#sqlalchemy.orm.QueryEvents "sqlalchemy.orm.QueryEvents")'
- en: 'References: [#3317](https://www.sqlalchemy.org/trac/ticket/3317)'
  id: totrans-3878
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3317](https://www.sqlalchemy.org/trac/ticket/3317)
- en: '**[orm] [feature]**'
  id: totrans-3879
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: The subquery wrapping which occurs when joined eager loading is used with a
    one-to-many query that also features LIMIT, OFFSET, or DISTINCT has been disabled
    in the case of a one-to-one relationship, that is a one-to-many with [`relationship.uselist`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.uselist
    "sqlalchemy.orm.relationship") set to False. This will produce more efficient
    queries in these cases.
  id: totrans-3880
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用一对多查询并且还包含LIMIT、OFFSET或DISTINCT时，与一对一关系一起使用连接预加载时发生的子查询包装已在一对多关系中禁用，即一对多关系中[`relationship.uselist`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.uselist
    "sqlalchemy.orm.relationship")设置为False。这将在这些情况下产生更有效的查询。
- en: See also
  id: totrans-3881
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Subqueries no longer applied to uselist=False joined eager loads](migration_10.html#change-3249)'
  id: totrans-3882
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[不再应用子查询于uselist=False的连接预加载](migration_10.html#change-3249)'
- en: 'References: [#3249](https://www.sqlalchemy.org/trac/ticket/3249)'
  id: totrans-3883
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3249](https://www.sqlalchemy.org/trac/ticket/3249)
- en: '**[orm] [feature]**'
  id: totrans-3884
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Mapped state internals have been reworked to allow for a 50% reduction in callcounts
    specific to the “expiration” of objects, as in the “auto expire” feature of [`Session.commit()`](../orm/session_api.html#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit") and for [`Session.expire_all()`](../orm/session_api.html#sqlalchemy.orm.Session.expire_all
    "sqlalchemy.orm.Session.expire_all"), as well as in the “cleanup” step which occurs
    when object states are garbage collected.
  id: totrans-3885
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 映射状态内部已经重新设计，以允许在对象“过期”时（如[`Session.commit()`](../orm/session_api.html#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit")和[`Session.expire_all()`](../orm/session_api.html#sqlalchemy.orm.Session.expire_all
    "sqlalchemy.orm.Session.expire_all")的“自动过期”功能中）以及在对象状态被垃圾回收时发生的“清理”步骤中减少50%的调用次数。
- en: 'References: [#3307](https://www.sqlalchemy.org/trac/ticket/3307)'
  id: totrans-3886
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3307](https://www.sqlalchemy.org/trac/ticket/3307)
- en: '**[orm] [feature]**'
  id: totrans-3887
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: A warning is emitted when the same polymorphic identity is assigned to two different
    mappers in the same hierarchy. This is typically a user error and means that the
    two different mapping types cannot be correctly distinguished at load time. Pull
    request courtesy Sebastian Bank.
  id: totrans-3888
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当在同一层次结构中为两个不同的映射器分配相同的多态标识时，会发出警告。这通常是用户错误，意味着在加载时无法正确区分这两种不同的映射类型。感谢Sebastian
    Bank的Pull请求。
- en: 'References: [#3262](https://www.sqlalchemy.org/trac/ticket/3262)'
  id: totrans-3889
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3262](https://www.sqlalchemy.org/trac/ticket/3262)
- en: '**[orm] [feature]**'
  id: totrans-3890
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: A new series of [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    methods which provide hooks directly into the unit of work’s facility for emitting
    INSERT and UPDATE statements has been created. When used correctly, this expert-oriented
    system can allow ORM-mappings to be used to generate bulk insert and update statements
    batched into executemany groups, allowing the statements to proceed at speeds
    that rival direct use of the Core.
  id: totrans-3891
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建了一系列新的[`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")方法，直接提供钩子进入工作单元的插入和更新语句发射设施。当正确使用时，这个面向专家的系统可以允许ORM映射生成批量插入和更新语句，分批执行，使语句的执行速度���以与直接使用Core相媲美。
- en: See also
  id: totrans-3892
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bulk Operations](../orm/persistence_techniques.html#bulk-operations)'
  id: totrans-3893
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[批量操作](../orm/persistence_techniques.html#bulk-operations)'
- en: 'References: [#3100](https://www.sqlalchemy.org/trac/ticket/3100)'
  id: totrans-3894
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3100](https://www.sqlalchemy.org/trac/ticket/3100)
- en: '**[orm] [feature]**'
  id: totrans-3895
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Added a parameter [`Query.join.isouter`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join.params.isouter
    "sqlalchemy.orm.Query.join") which is synonymous with calling [`Query.outerjoin()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.outerjoin
    "sqlalchemy.orm.Query.outerjoin"); this flag is to provide a more consistent interface
    compared to Core [`FromClause.join()`](../core/selectable.html#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join"). Pull request courtesy Jonathan Vanasco.
  id: totrans-3896
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个参数[`Query.join.isouter`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join.params.isouter
    "sqlalchemy.orm.Query.join")，它与调用[`Query.outerjoin()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.outerjoin
    "sqlalchemy.orm.Query.outerjoin")是同义的；此标志旨在提供与Core [`FromClause.join()`](../core/selectable.html#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join")更一致的接口。感谢Jonathan Vanasco提供的拉取请求。
- en: 'References: [#3217](https://www.sqlalchemy.org/trac/ticket/3217)'
  id: totrans-3897
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3217](https://www.sqlalchemy.org/trac/ticket/3217)
- en: '**[orm] [feature]**'
  id: totrans-3898
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Added new event handlers [`AttributeEvents.init_collection()`](../orm/events.html#sqlalchemy.orm.AttributeEvents.init_collection
    "sqlalchemy.orm.AttributeEvents.init_collection") and [`AttributeEvents.dispose_collection()`](../orm/events.html#sqlalchemy.orm.AttributeEvents.dispose_collection
    "sqlalchemy.orm.AttributeEvents.dispose_collection"), which track when a collection
    is first associated with an instance and when it is replaced. These handlers supersede
    the `collection.linker()` annotation. The old hook remains supported through an
    event adapter.
  id: totrans-3899
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的事件处理程序[`AttributeEvents.init_collection()`](../orm/events.html#sqlalchemy.orm.AttributeEvents.init_collection
    "sqlalchemy.orm.AttributeEvents.init_collection")和[`AttributeEvents.dispose_collection()`](../orm/events.html#sqlalchemy.orm.AttributeEvents.dispose_collection
    "sqlalchemy.orm.AttributeEvents.dispose_collection")，用于跟踪何时首次将集合与实例关联以及何时替换集合。这些处理程序取代了`collection.linker()`注释。通过事件适配器仍支持旧钩子。
- en: '**[orm] [feature]**'
  id: totrans-3900
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: The [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    will raise an exception when [`Query.yield_per()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.yield_per
    "sqlalchemy.orm.Query.yield_per") is used with mappings or options where either
    subquery eager loading, or joined eager loading with collections, would take place.
    These loading strategies are not currently compatible with yield_per, so by raising
    this error, the method is safer to use. Eager loads can be disabled with the `lazyload('*')`
    option or [`Query.enable_eagerloads()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.enable_eagerloads
    "sqlalchemy.orm.Query.enable_eagerloads").
  id: totrans-3901
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当在映射或选项中使用[`Query.yield_per()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.yield_per
    "sqlalchemy.orm.Query.yield_per")时，[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")将引发异常。这些加载策略目前与`yield_per`不兼容，因此通过引发此错误，该方法更安全。可以使用`lazyload('*')`选项或[`Query.enable_eagerloads()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.enable_eagerloads
    "sqlalchemy.orm.Query.enable_eagerloads")来禁用急加载。
- en: See also
  id: totrans-3902
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Joined/Subquery eager loading explicitly disallowed with yield_per](migration_10.html#migration-yield-per-eager-loading)'
  id: totrans-3903
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[使用yield_per明确禁止连接/子查询急加载](migration_10.html#migration-yield-per-eager-loading)'
- en: '**[orm] [feature]**'
  id: totrans-3904
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: A new implementation for `KeyedTuple` used by the [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object offers dramatic speed improvements when fetching
    large numbers of column-oriented rows.
  id: totrans-3905
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")对象使用的`KeyedTuple`的新实现在获取大量基于列的行时提供了显著的速度改进。
- en: See also
  id: totrans-3906
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New KeyedTuple implementation dramatically faster](migration_10.html#feature-3176)'
  id: totrans-3907
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[新的KeyedTuple实现速度显著提升](migration_10.html#feature-3176)'
- en: 'References: [#3176](https://www.sqlalchemy.org/trac/ticket/3176)'
  id: totrans-3908
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3176](https://www.sqlalchemy.org/trac/ticket/3176)
- en: '**[orm] [feature]**'
  id: totrans-3909
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: The behavior of [`joinedload.innerjoin`](../orm/queryguide/relationships.html#sqlalchemy.orm.joinedload.params.innerjoin
    "sqlalchemy.orm.joinedload") as well as [`relationship.innerjoin`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.innerjoin
    "sqlalchemy.orm.relationship") is now to use “nested” inner joins, that is, right-nested,
    as the default behavior when an inner join joined eager load is chained to an
    outer join eager load.
  id: totrans-3910
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`joinedload.innerjoin`](../orm/queryguide/relationships.html#sqlalchemy.orm.joinedload.params.innerjoin
    "sqlalchemy.orm.joinedload")以及[`relationship.innerjoin`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.innerjoin
    "sqlalchemy.orm.relationship")的行为现在是使用“嵌套”内连接，即右嵌套，作为外连接贪婪加载链接到内连接贪婪加载时的默认行为。'
- en: See also
  id: totrans-3911
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Right inner join nesting now the default for joinedload with innerjoin=True](migration_10.html#migration-3008)'
  id: totrans-3912
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[使用innerjoin=True的joinedload现在默认为右内连接嵌套](migration_10.html#migration-3008)'
- en: 'References: [#3008](https://www.sqlalchemy.org/trac/ticket/3008)'
  id: totrans-3913
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3008](https://www.sqlalchemy.org/trac/ticket/3008)
- en: '**[orm] [feature]**'
  id: totrans-3914
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [特性]**'
- en: UPDATE statements can now be batched within an ORM flush into more performant
    executemany() call, similarly to how INSERT statements can be batched; this will
    be invoked within flush to the degree that subsequent UPDATE statements for the
    same mapping and table involve the identical columns within the VALUES clause,
    that no SET-level SQL expressions are embedded, and that the versioning requirements
    for the mapping are compatible with the backend dialect’s ability to return a
    correct rowcount for an executemany operation.
  id: totrans-3915
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以将UPDATE语句批处理到ORM刷新中，以更高效地执行executemany()调用，类似于可以将INSERT语句批处理；这将在刷新中被调用，以便后续针对相同映射和表的UPDATE语句涉及VALUES子句中的相同列，没有嵌入SET级别的SQL表达式，并且映射的版本要求与后端方言能够返回executemany操作的正确行数的兼容性。
- en: '**[orm] [feature]**'
  id: totrans-3916
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [特性]**'
- en: The `info` parameter has been added to the constructor for [`SynonymProperty`](../orm/internals.html#sqlalchemy.orm.SynonymProperty
    "sqlalchemy.orm.SynonymProperty") and `ComparableProperty`.
  id: totrans-3917
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`info`参数已添加到[`SynonymProperty`](../orm/internals.html#sqlalchemy.orm.SynonymProperty
    "sqlalchemy.orm.SynonymProperty")和`ComparableProperty`的构造函数中。'
- en: 'References: [#2963](https://www.sqlalchemy.org/trac/ticket/2963)'
  id: totrans-3918
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2963](https://www.sqlalchemy.org/trac/ticket/2963)
- en: '**[orm] [feature]**'
  id: totrans-3919
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [特性]**'
- en: The `InspectionAttr.info` collection is now moved down to [`InspectionAttr`](../orm/internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.InspectionAttr"), where in addition to being available on all
    [`MapperProperty`](../orm/internals.html#sqlalchemy.orm.MapperProperty "sqlalchemy.orm.MapperProperty")
    objects, it is also now available on hybrid properties, association proxies, when
    accessed via [`Mapper.all_orm_descriptors`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors").
  id: totrans-3920
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`InspectionAttr.info`集合现在已移至[`InspectionAttr`](../orm/internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.InspectionAttr")，除了在所有[`MapperProperty`](../orm/internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty")对象上可用外，还可在混合属性、关联代理上使用，通过[`Mapper.all_orm_descriptors`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors")访问时也可用。'
- en: 'References: [#2971](https://www.sqlalchemy.org/trac/ticket/2971)'
  id: totrans-3921
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2971](https://www.sqlalchemy.org/trac/ticket/2971)
- en: '**[orm] [change]**'
  id: totrans-3922
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [更改]**'
- en: Mapped attributes marked as deferred without explicit undeferral will now remain
    “deferred” even if their column is otherwise present in the result set in some
    way. This is a performance enhancement in that an ORM load no longer spends time
    searching for each deferred column when the result set is obtained. However, for
    an application that has been relying upon this, an explicit [`undefer()`](../orm/queryguide/columns.html#sqlalchemy.orm.undefer
    "sqlalchemy.orm.undefer") or similar option should now be used.
  id: totrans-3923
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 映射属性标记为延迟加载，没有明确取消延迟加载的情况下，即使它们的列以某种方式出现在结果集中，现在也将保持“延迟加载”。 这是一个性能增强，因为ORM加载不再花时间搜索每个延迟加载的列。
    但是，对于一直依赖此功能的应用程序，现在应该使用明确的[`undefer()`](../orm/queryguide/columns.html#sqlalchemy.orm.undefer
    "sqlalchemy.orm.undefer")或类似选项。
- en: '**[orm] [changed]**'
  id: totrans-3924
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [更改]**'
- en: The `proc()` callable passed to the `create_row_processor()` method of custom
    [`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")
    classes now accepts only a single “row” argument.
  id: totrans-3925
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 传递给自定义[`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")类的`create_row_processor()`方法的`proc()`可调用对象现在只接受一个“row”参数。
- en: See also
  id: totrans-3926
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[API Change for new Bundle feature when custom row loaders are used](migration_10.html#bundle-api-change)'
  id: totrans-3927
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[在使用自定义行加载程序时，新Bundle功能的API更改](migration_10.html#bundle-api-change)'
- en: '**[orm] [changed]**'
  id: totrans-3928
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [更改]**'
- en: 'Deprecated event hooks removed: `populate_instance`, `create_instance`, `translate_row`,
    `append_result`'
  id: totrans-3929
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 弃用的事件钩子已移除：`populate_instance`，`create_instance`，`translate_row`，`append_result`
- en: See also
  id: totrans-3930
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Deprecated ORM Event Hooks Removed](migration_10.html#migration-deprecated-orm-events)'
  id: totrans-3931
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[已移除的弃用ORM事件钩子](migration_10.html#migration-deprecated-orm-events)'
- en: '**[orm] [bug]**'
  id: totrans-3932
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in subquery eager loading where a long chain of eager loads across
    a polymorphic-subclass boundary in conjunction with polymorphic loading would
    fail to locate the subclass-link in the chain, erroring out with a missing property
    name on an [`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass").
  id: totrans-3933
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了子查询急加载中的bug，其中在跨多态子类边界的长链急加载与多态加载相结合时，无法定位链���的子类链接，导致在一个[`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass")上缺少属性名称的错误。
- en: 'This change is also **backported** to: 0.9.5, 0.8.7'
  id: totrans-3934
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还**回溯**到：0.9.5, 0.8.7
- en: 'References: [#3055](https://www.sqlalchemy.org/trac/ticket/3055)'
  id: totrans-3935
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3055](https://www.sqlalchemy.org/trac/ticket/3055)
- en: '**[orm] [bug]**'
  id: totrans-3936
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed ORM bug where the [`class_mapper()`](../orm/mapping_api.html#sqlalchemy.orm.class_mapper
    "sqlalchemy.orm.class_mapper") function would mask AttributeErrors or KeyErrors
    that should raise during mapper configuration due to user errors. The catch for
    attribute/keyerror has been made more specific to not include the configuration
    step.
  id: totrans-3937
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了ORM中的一个bug，[`class_mapper()`](../orm/mapping_api.html#sqlalchemy.orm.class_mapper
    "sqlalchemy.orm.class_mapper")函数会掩盖应在映射器配置期间引发的AttributeErrors或KeyErrors，这是由于用户错误导致的。对于属性/键错误的捕获已经更具体，不包括配置步骤。
- en: 'This change is also **backported** to: 0.9.5, 0.8.7'
  id: totrans-3938
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还**回溯**到：0.9.5, 0.8.7
- en: 'References: [#3047](https://www.sqlalchemy.org/trac/ticket/3047)'
  id: totrans-3939
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3047](https://www.sqlalchemy.org/trac/ticket/3047)
- en: '**[orm] [bug]**'
  id: totrans-3940
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bugs in ORM object comparisons where comparison of many-to-one `!= None`
    would fail if the source were an aliased class, or if the query needed to apply
    special aliasing to the expression due to aliased joins or polymorphic querying;
    also fixed bug in the case where comparing a many-to-one to an object state would
    fail if the query needed to apply special aliasing due to aliased joins or polymorphic
    querying.
  id: totrans-3941
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了ORM对象比较中的错误，其中对于多对一的`!= None`比较，如果源是一个别名类，或者如果查询需要对表达式应用特殊别名处理，由于别名连接或多态查询而失败；还修复了一种情况，即如果比较多对一与对象状态，如果查询需要应用特殊别名处理，由于别名连接或多态查询而失败。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-3942
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还**回溯**到：0.9.9
- en: 'References: [#3310](https://www.sqlalchemy.org/trac/ticket/3310)'
  id: totrans-3943
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3310](https://www.sqlalchemy.org/trac/ticket/3310)
- en: '**[orm] [bug]**'
  id: totrans-3944
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where internal assertion would fail in the case where an `after_rollback()`
    handler for a [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    incorrectly adds state to that [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") within the handler, and the task to warn and remove
    this state (established by [#2389](https://www.sqlalchemy.org/trac/ticket/2389))
    attempts to proceed.
  id: totrans-3945
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，在这种情况下，当一个`after_rollback()`处理程序为一个[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")错误地在处理程序内向该[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")添加状态时，内部断言将失败，并且警告和删除此状态的任务（由[#2389](https://www.sqlalchemy.org/trac/ticket/2389)建立）尝试继续进行。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-3946
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还**回溯**到：0.9.9
- en: 'References: [#3309](https://www.sqlalchemy.org/trac/ticket/3309)'
  id: totrans-3947
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3309](https://www.sqlalchemy.org/trac/ticket/3309)
- en: '**[orm] [bug]**'
  id: totrans-3948
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where TypeError raised when [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") called with unknown kw arguments would raise its
    own TypeError due to broken formatting. Pull request courtesy Malthe Borch.
  id: totrans-3949
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，当[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")调用带有未知kw参数时，由于格式错误导致其自身引发TypeError的TypeError。感谢Malthe
    Borch的拉取请求。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-3950
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还**回溯**到：0.9.9
- en: '**[orm] [bug]**'
  id: totrans-3951
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in lazy loading SQL construction whereby a complex primaryjoin that
    referred to the same “local” column multiple times in the “column that points
    to itself” style of self-referential join would not be substituted in all cases.
    The logic to determine substitutions here has been reworked to be more open-ended.
  id: totrans-3952
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了懒加载SQL构造中的bug，其中一个复杂的primaryjoin在“指向自身的列”的自引用连接风格中多次引用相同的“本地”列时，在所有情况下都不会被替换。这里确定替换的逻辑已经重新制定为更加开放式。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-3953
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还被**回溯**到：0.9.9
- en: 'References: [#3300](https://www.sqlalchemy.org/trac/ticket/3300)'
  id: totrans-3954
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#3300](https://www.sqlalchemy.org/trac/ticket/3300)
- en: '**[orm] [bug]**'
  id: totrans-3955
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: The “wildcard” loader options, in particular the one set up by the [`load_only()`](../orm/queryguide/columns.html#sqlalchemy.orm.load_only
    "sqlalchemy.orm.load_only") option to cover all attributes not explicitly mentioned,
    now takes into account the superclasses of a given entity, if that entity is mapped
    with inheritance mapping, so that attribute names within the superclasses are
    also omitted from the load. Additionally, the polymorphic discriminator column
    is unconditionally included in the list, just in the same way that primary key
    columns are, so that even with load_only() set up, polymorphic loading of subtypes
    continues to function correctly.
  id: totrans-3956
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “通配符”加载器选项，特别是由[`load_only()`](../orm/queryguide/columns.html#sqlalchemy.orm.load_only
    "sqlalchemy.orm.load_only")选项设置的选项，以覆盖未明确提及的所有属性，现在考虑了给定实体的超类，如果该实体使用继承映射进行映射，则超类中的属性名称也将从加载中省略。此外，多态鉴别器列无条件地包含在列表中，就像主键列一样，以便即使设置了load_only()，子类型的多态加载也能继续正常工作。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-3957
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还被**回溯**到：0.9.9
- en: 'References: [#3287](https://www.sqlalchemy.org/trac/ticket/3287)'
  id: totrans-3958
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#3287](https://www.sqlalchemy.org/trac/ticket/3287)
- en: '**[orm] [bug] [pypy]**'
  id: totrans-3959
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误] [pypy]**'
- en: Fixed bug where if an exception were thrown at the start of a [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") before it fetched results, particularly when row processors
    can’t be formed, the cursor would stay open with results pending and not actually
    be closed. This is typically only an issue on an interpreter like PyPy where the
    cursor isn’t immediately GC’ed, and can in some circumstances lead to transactions/
    locks being open longer than is desirable.
  id: totrans-3960
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即如果在 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    开始之前抛出异常，特别是当无法形成行处理器时，游标将保持打开状态并且不会实际关闭结果。这通常仅在像PyPy这样的解释器上是一个问题，其中游标不会立即被GC清除，在某些情况下可能导致事务/锁定的打开时间比预期的长。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-3961
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还被**回溯**到：0.9.9
- en: 'References: [#3285](https://www.sqlalchemy.org/trac/ticket/3285)'
  id: totrans-3962
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#3285](https://www.sqlalchemy.org/trac/ticket/3285)
- en: '**[orm] [bug]**'
  id: totrans-3963
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed a leak which would occur in the unsupported and highly non-recommended
    use case of replacing a relationship on a fixed mapped class many times, referring
    to an arbitrarily growing number of target mappers. A warning is emitted when
    the old relationship is replaced, however if the mapping were already used for
    querying, the old relationship would still be referenced within some registries.
  id: totrans-3964
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个泄漏，该泄漏将在不支持且极不推荐的用例中发生，即在固定映射类上多次替换关系，引用任意增长的目标映射器的数量。当旧关系被替换时会发出警告，但是如果映射已用于查询，则旧关系仍将在某些注册表中引用。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-3965
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还被**回溯**到：0.9.9
- en: 'References: [#3251](https://www.sqlalchemy.org/trac/ticket/3251)'
  id: totrans-3966
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#3251](https://www.sqlalchemy.org/trac/ticket/3251)
- en: '**[orm] [bug] [sqlite]**'
  id: totrans-3967
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误] [sqlite]**'
- en: Fixed bug regarding expression mutations which could express itself as a “Could
    not locate column” error when using [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") to select from multiple, anonymous column entities when
    querying against SQLite, as a side effect of the “join rewriting” feature used
    by the SQLite dialect.
  id: totrans-3968
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了表达式变异的错误，当使用[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")从多个匿名列实体中选择时，如果针对SQLite进行查询，作为“联接重写”功能的副作用的一部分，可能会导致“找不到列”的错误。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-3969
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还被**回溯**到：0.9.9
- en: 'References: [#3241](https://www.sqlalchemy.org/trac/ticket/3241)'
  id: totrans-3970
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#3241](https://www.sqlalchemy.org/trac/ticket/3241)
- en: '**[orm] [bug]**'
  id: totrans-3971
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed bug where the ON clause for [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join"), and [`Query.outerjoin()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.outerjoin
    "sqlalchemy.orm.Query.outerjoin") to a single-inheritance subclass using `of_type()`
    would not render the “single table criteria” in the ON clause if the `from_joinpoint=True`
    flag were set.
  id: totrans-3972
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用`of_type()`将 [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") 和 [`Query.outerjoin()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.outerjoin
    "sqlalchemy.orm.Query.outerjoin") 加入到单继承子类时的ON子句的错误，如果设置了`from_joinpoint=True`标志，则不会在ON子句中呈现“单表条件”。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-3973
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.9
- en: 'References: [#3232](https://www.sqlalchemy.org/trac/ticket/3232)'
  id: totrans-3974
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3232](https://www.sqlalchemy.org/trac/ticket/3232)
- en: '**[orm] [bug] [engine]**'
  id: totrans-3975
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [engine]**'
- en: Fixed bug that affected generally the same classes of event as that of [#3199](https://www.sqlalchemy.org/trac/ticket/3199),
    when the `named=True` parameter would be used. Some events would fail to register,
    and others would not invoke the event arguments correctly, generally in the case
    of when an event was “wrapped” for adaption in some other way. The “named” mechanics
    have been rearranged to not interfere with the argument signature expected by
    internal wrapper functions.
  id: totrans-3976
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，影响了与[#3199__](https状况类似的事件类别](https://www.sqlalchemy.org/trac/ticket/3199)，当使用`named=True`参数时，一些事件将无法注册，而其他事件将无法正确调用事件参数，通常在事件被“包装”以适应其他方式时。
    “命名”机制已重新排列，以不干扰内部包装函数所期望的参数签名。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-3977
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.8
- en: 'References: [#3197](https://www.sqlalchemy.org/trac/ticket/3197)'
  id: totrans-3978
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3197](https://www.sqlalchemy.org/trac/ticket/3197)
- en: '**[orm] [bug]**'
  id: totrans-3979
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug that affected many classes of event, particularly ORM events but also
    engine events, where the usual logic of “de duplicating” a redundant call to [`listen()`](../core/event.html#sqlalchemy.event.listen
    "sqlalchemy.event.listen") with the same arguments would fail, for those events
    where the listener function is wrapped. An assertion would be hit within registry.py.
    This assertion has now been integrated into the deduplication check, with the
    added bonus of a simpler means of checking deduplication across the board.
  id: totrans-3980
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，影响了许多事件类别，特别是ORM事件，但也包括引擎事件，其中“去重复”使用相同参数调用[`listen()`](../core/event.html#sqlalchemy.event.listen
    "sqlalchemy.event.listen")的常规逻辑将失败，对于那些监听器函数被包装的事件。在registry.py中会触发一个断言。现在，此断言已集成到去重复检查中，并且还有一个更简单的方法来全面检查去重复。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-3981
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.8
- en: 'References: [#3199](https://www.sqlalchemy.org/trac/ticket/3199)'
  id: totrans-3982
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3199](https://www.sqlalchemy.org/trac/ticket/3199)
- en: '**[orm] [bug]**'
  id: totrans-3983
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed warning that would emit when a complex self-referential primaryjoin contained
    functions, while at the same time remote_side was specified; the warning would
    suggest setting “remote side”. It now only emits if remote_side isn’t present.
  id: totrans-3984
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个警告，当一个复杂的自引用primaryjoin包含函数时会发出警告，同时指定了remote_side；警告会建议设置“remote side”。现在只有在remote_side不存在时才会发出警告。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-3985
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.8
- en: 'References: [#3194](https://www.sqlalchemy.org/trac/ticket/3194)'
  id: totrans-3986
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3194](https://www.sqlalchemy.org/trac/ticket/3194)
- en: '**[orm] [bug] [eagerloading]**'
  id: totrans-3987
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [eagerloading]**'
- en: Fixed a regression caused by [#2976](https://www.sqlalchemy.org/trac/ticket/2976)
    released in 0.9.4 where the “outer join” propagation along a chain of joined eager
    loads would incorrectly convert an “inner join” along a sibling join path into
    an outer join as well, when only descendant paths should be receiving the “outer
    join” propagation; additionally, fixed related issue where “nested” join propagation
    would take place inappropriately between two sibling join paths.
  id: totrans-3988
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个由0.9.4中引起的回归问题，该问题由[#2976](https://www.sqlalchemy.org/trac/ticket/2976)引起，当沿着一系列连接的贪婪加载传播“外连接”时，会错误地将沿着兄弟连接路径的“内连接”转换为外连接，当只有后代路径应该接收“外连接”传播时；此外，还修复了“嵌套”连接传播在两个兄弟连接路径之间的不当发生的相关问题。
- en: 'This change is also **backported** to: 0.9.7'
  id: totrans-3989
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.7
- en: 'References: [#3131](https://www.sqlalchemy.org/trac/ticket/3131)'
  id: totrans-3990
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3131](https://www.sqlalchemy.org/trac/ticket/3131)
- en: '**[orm] [bug]**'
  id: totrans-3991
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a regression from 0.9.0 due to [#2736](https://www.sqlalchemy.org/trac/ticket/2736)
    where the [`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from") method no longer set up the “from entity”
    of the [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object correctly, so that subsequent [`Query.filter_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.filter_by
    "sqlalchemy.orm.Query.filter_by") or [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") calls would fail to check the appropriate “from”
    entity when searching for attributes by string name.
  id: totrans-3992
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了从0.9.0中的回归，由于[#2736](https://www.sqlalchemy.org/trac/ticket/2736)导致[`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from")方法不再正确设置[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象的“from实体”，因此后续的[`Query.filter_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.filter_by
    "sqlalchemy.orm.Query.filter_by")或[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")调用将无法在按字符串名称搜索属性时检查适当的“from”实体。
- en: 'This change is also **backported** to: 0.9.7'
  id: totrans-3993
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**至：0.9.7
- en: 'References: [#2736](https://www.sqlalchemy.org/trac/ticket/2736), [#3083](https://www.sqlalchemy.org/trac/ticket/3083)'
  id: totrans-3994
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2736](https://www.sqlalchemy.org/trac/ticket/2736), [#3083](https://www.sqlalchemy.org/trac/ticket/3083)
- en: '**[orm] [bug]**'
  id: totrans-3995
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where items that were persisted, deleted, or had a primary key change
    within a savepoint block would not participate in being restored to their former
    state (not in session, in session, previous PK) after the outer transaction were
    rolled back.
  id: totrans-3996
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在保存点块内持久化、删除或主键更改的项目在外部事务回滚后不参与恢复到其先前状态（不在会话中、在会话中、先前的主键）的错误。
- en: 'This change is also **backported** to: 0.9.7'
  id: totrans-3997
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**至：0.9.7
- en: 'References: [#3108](https://www.sqlalchemy.org/trac/ticket/3108)'
  id: totrans-3998
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3108](https://www.sqlalchemy.org/trac/ticket/3108)
- en: '**[orm] [bug]**'
  id: totrans-3999
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in subquery eager loading in conjunction with [`with_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic"), the targeting of entities and columns in the
    subquery load has been made more accurate with respect to this type of entity
    and others.
  id: totrans-4000
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了与[`with_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic")一起使用的子查询急加载中的错误，子查询加载中对实体和列的定位相对于此类型的实体和其他实体更加准确。
- en: 'This change is also **backported** to: 0.9.7'
  id: totrans-4001
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**至：0.9.7
- en: 'References: [#3106](https://www.sqlalchemy.org/trac/ticket/3106)'
  id: totrans-4002
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3106](https://www.sqlalchemy.org/trac/ticket/3106)
- en: '**[orm] [bug]**'
  id: totrans-4003
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Additional checks have been added for the case where an inheriting mapper is
    implicitly combining one of its column-based attributes with that of the parent,
    where those columns normally don’t necessarily share the same value. This is an
    extension of an existing check that was added via [#1892](https://www.sqlalchemy.org/trac/ticket/1892);
    however this new check emits only a warning, instead of an exception, to allow
    for applications that may be relying upon the existing behavior.
  id: totrans-4004
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 针对继承映射器隐式组合其基于列的属性之一与父级属性之一的情况添加了额外的检查，其中这些列通常不一定共享相同的值。这是通过[#1892](https://www.sqlalchemy.org/trac/ticket/1892)添加的现有检查的扩展；然而，这个新检查只发出警告，而不是异常，以允许依赖于现有行为的应用程序。
- en: See also
  id: totrans-4005
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[I’m getting a warning or error about “Implicitly combining column X under
    attribute Y”](../faq/ormconfiguration.html#faq-combining-columns)'
  id: totrans-4006
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[我收到关于“隐式组合列 X 在属性 Y 下”的警告或错误](../faq/ormconfiguration.html#faq-combining-columns)'
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-4007
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**至：0.9.5
- en: 'References: [#3042](https://www.sqlalchemy.org/trac/ticket/3042)'
  id: totrans-4008
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3042](https://www.sqlalchemy.org/trac/ticket/3042)
- en: '**[orm] [bug]**'
  id: totrans-4009
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Modified the behavior of [`load_only()`](../orm/queryguide/columns.html#sqlalchemy.orm.load_only
    "sqlalchemy.orm.load_only") such that primary key columns are always added to
    the list of columns to be “undeferred”; otherwise, the ORM can’t load the row’s
    identity. Apparently, one can defer the mapped primary keys and the ORM will fail,
    that hasn’t been changed. But as load_only is essentially saying “defer all but
    X”, it’s more critical that PK cols not be part of this deferral.
  id: totrans-4010
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了[`load_only()`](../orm/queryguide/columns.html#sqlalchemy.orm.load_only "sqlalchemy.orm.load_only")的行为，使得主键列始终添加到“未推迟”列的列表中；否则，ORM无法加载行的标识。显然，可以推迟映射的主键，ORM将失败，这一点没有改变。但是，由于load_only基本上是说“推迟除
    X 外的所有列”，因此更重要的是PK列不参与此推迟。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-4011
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.5
- en: 'References: [#3080](https://www.sqlalchemy.org/trac/ticket/3080)'
  id: totrans-4012
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3080](https://www.sqlalchemy.org/trac/ticket/3080)
- en: '**[orm] [bug]**'
  id: totrans-4013
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a few edge cases which arise in the so-called “row switch” scenario, where
    an INSERT/DELETE can be turned into an UPDATE. In this situation, a many-to-one
    relationship set to None, or in some cases a scalar attribute set to None, may
    not be detected as a net change in value, and therefore the UPDATE would not reset
    what was on the previous row. This is due to some as-yet unresolved side effects
    of the way attribute history works in terms of implicitly assuming None isn’t
    really a “change” for a previously un-set attribute. See also [#3061](https://www.sqlalchemy.org/trac/ticket/3061).
  id: totrans-4014
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一些边缘情况，这些情况出现在所谓的“行切换”场景中，其中 INSERT/DELETE 可以转换为 UPDATE。在这种情况下，将一个多对一关系设置为
    None，或者在某些情况下将标量属性设置为 None，可能不会被检测为值的净变化，因此 UPDATE 不会重置前一行的内容。这是由于属性历史的一些尚未解决的副作用，隐式地假定
    None 对于先前未设置的属性并不真正是一个“变化”。另请参见 [#3061](https://www.sqlalchemy.org/trac/ticket/3061)。
- en: Note
  id: totrans-4015
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: This change has been **REVERTED** in 0.9.6\. The full fix will be in version
    1.0 of SQLAlchemy.
  id: totrans-4016
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改已在 0.9.6 版本中**撤销**。完整的修复将在 SQLAlchemy 的 1.0 版本中实现。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-4017
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.5
- en: 'References: [#3060](https://www.sqlalchemy.org/trac/ticket/3060)'
  id: totrans-4018
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3060](https://www.sqlalchemy.org/trac/ticket/3060)
- en: '**[orm] [bug]**'
  id: totrans-4019
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Related to [#3060](https://www.sqlalchemy.org/trac/ticket/3060), an adjustment
    has been made to the unit of work such that loading for related many-to-one objects
    is slightly more aggressive, in the case of a graph of self-referential objects
    that are to be deleted; the load of related objects is to help determine the correct
    order for deletion if passive_deletes is not set.
  id: totrans-4020
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与 [#3060](https://www.sqlalchemy.org/trac/ticket/3060) 相关，对工作单元进行了调整，以便在要删除的自引用对象图中，加载相关的多对一对象更加积极；加载相关对象有助于确定删除顺序的正确顺序，如果未设置
    passive_deletes。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-4021
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.5
- en: '**[orm] [bug]**'
  id: totrans-4022
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in SQLite join rewriting where anonymized column names due to repeats
    would not correctly be rewritten in subqueries. This would affect SELECT queries
    with any kind of subquery + join.
  id: totrans-4023
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 SQLite 连接重写中的一个 bug，由于重复导致的匿名列名不会在子查询中正确重写。这会影响带有任何类型子查询 + 连接的 SELECT 查询。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-4024
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.5
- en: 'References: [#3057](https://www.sqlalchemy.org/trac/ticket/3057)'
  id: totrans-4025
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3057](https://www.sqlalchemy.org/trac/ticket/3057)
- en: '**[orm] [bug] [sql]**'
  id: totrans-4026
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [sql]**'
- en: Fixes to the newly enhanced boolean coercion in [#2804](https://www.sqlalchemy.org/trac/ticket/2804)
    where the new rules for “where” and “having” wouldn’t take effect for the “whereclause”
    and “having” kw arguments of the [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct, which is also what [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") uses so wasn’t working in the ORM either.
  id: totrans-4027
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 [#2804](https://www.sqlalchemy.org/trac/ticket/2804) 中新增的布尔强制转换的 bug，新的“where”和“having”规则不会对
    [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    构造函数的“whereclause”和“having”关键字参数产生影响，这也是 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 使用的内容，因此在 ORM 中也无法正常工作。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-4028
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.5
- en: 'References: [#3013](https://www.sqlalchemy.org/trac/ticket/3013)'
  id: totrans-4029
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3013](https://www.sqlalchemy.org/trac/ticket/3013)
- en: '**[orm] [bug]**'
  id: totrans-4030
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where the session attachment error “object is already attached to
    session X” would fail to prevent the object from also being attached to the new
    session, in the case that execution continued after the error raise occurred.
  id: totrans-4031
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即会话附加错误“对象已附加到会话 X”将无法阻止对象在错误引发后继续执行的情况下也被附加到新会话中。
- en: 'References: [#3301](https://www.sqlalchemy.org/trac/ticket/3301)'
  id: totrans-4032
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3301](https://www.sqlalchemy.org/trac/ticket/3301)
- en: '**[orm] [bug]**'
  id: totrans-4033
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The primary [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    of a [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    is now passed to the [`Session.get_bind()`](../orm/session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") method when calling upon [`Query.count()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.count
    "sqlalchemy.orm.Query.count"), [`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update"), [`Query.delete()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.delete
    "sqlalchemy.orm.Query.delete"), as well as queries against mapped columns, [`column_property`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property") objects, and SQL functions and expressions derived
    from mapped columns. This allows sessions that rely upon either customized [`Session.get_bind()`](../orm/session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") schemes or “bound” metadata to work in all
    relevant cases.
  id: totrans-4034
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当调用[`Query.count()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.count
    "sqlalchemy.orm.Query.count")、[`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update")、[`Query.delete()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.delete
    "sqlalchemy.orm.Query.delete")以及针对映射列、[`column_property`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property")对象和从映射列派生的SQL函数和表达式的查询时，[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")的主要[`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")现在会传递给[`Session.get_bind()`](../orm/session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind")方法。这样，依赖于自定义[`Session.get_bind()`](../orm/session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind")方案或“绑定”元数据的会话可以在所有相关情况下工作。
- en: See also
  id: totrans-4035
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[Session.get_bind() will receive the Mapper in all relevant Query cases](migration_10.html#bug-3227)'
  id: totrans-4036
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[在所有相关查询情况下，Session.get_bind()将接收Mapper](migration_10.html#bug-3227)'
- en: 'References: [#1326](https://www.sqlalchemy.org/trac/ticket/1326), [#3227](https://www.sqlalchemy.org/trac/ticket/3227),
    [#3242](https://www.sqlalchemy.org/trac/ticket/3242)'
  id: totrans-4037
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1326](https://www.sqlalchemy.org/trac/ticket/1326), [#3227](https://www.sqlalchemy.org/trac/ticket/3227),
    [#3242](https://www.sqlalchemy.org/trac/ticket/3242)
- en: '**[orm] [bug]**'
  id: totrans-4038
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The [`PropComparator.of_type()`](../orm/internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type") modifier has been improved in conjunction
    with loader directives such as [`joinedload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.joinedload
    "sqlalchemy.orm.joinedload") and [`contains_eager()`](../orm/queryguide/relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") such that if two [`PropComparator.of_type()`](../orm/internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type") modifiers of the same base type/path
    are encountered, they will be joined together into a single “polymorphic” entity,
    rather than replacing the entity of type A with the one of type B. E.g. a joinedload
    of `A.b.of_type(BSub1)->BSub1.c` combined with joinedload of `A.b.of_type(BSub2)->BSub2.c`
    will create a single joinedload of `A.b.of_type((BSub1, BSub2)) -> BSub1.c, BSub2.c`,
    without the need for the `with_polymorphic` to be explicit in the query.
  id: totrans-4039
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与[`joinedload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.joinedload
    "sqlalchemy.orm.joinedload")和[`contains_eager()`](../orm/queryguide/relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager")等加载器指令一起，[`PropComparator.of_type()`](../orm/internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type")修饰符已经改进，以便在遇到相同基本类型/路径的两个[`PropComparator.of_type()`](../orm/internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type")修饰符时，它们将被合并为单个“多态”实体，而不是用类型B的实体替换类型A的实体。例如，`A.b.of_type(BSub1)->BSub1.c`的joinedload与`A.b.of_type(BSub2)->BSub2.c`的joinedload将创建一个单个的joinedload，即`A.b.of_type((BSub1,
    BSub2)) -> BSub1.c, BSub2.c`，而不需要在查询中显式使用`with_polymorphic`。
- en: See also
  id: totrans-4040
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[Eager Loading of Polymorphic Subtypes](../orm/queryguide/inheritance.html#eagerloading-polymorphic-subtypes)
    - contains an updated example illustrating the new format.'
  id: totrans-4041
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[多态子类型的急加载](../orm/queryguide/inheritance.html#eagerloading-polymorphic-subtypes)
    - 包含一个更新的示例，展示了新的格式。'
- en: 'References: [#3256](https://www.sqlalchemy.org/trac/ticket/3256)'
  id: totrans-4042
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3256](https://www.sqlalchemy.org/trac/ticket/3256)
- en: '**[orm] [bug]**'
  id: totrans-4043
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Repaired support of the `copy.deepcopy()` call when used by the [`CascadeOptions`](../orm/internals.html#sqlalchemy.orm.CascadeOptions
    "sqlalchemy.orm.util.CascadeOptions") argument, which occurs if `copy.deepcopy()`
    is being used with [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") (not an officially supported use case). Pull request
    courtesy duesenfranz.
  id: totrans-4044
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用[`CascadeOptions`](../orm/internals.html#sqlalchemy.orm.CascadeOptions
    "sqlalchemy.orm.util.CascadeOptions")参数时，`copy.deepcopy()`调用的支持，这种情况发生在`copy.deepcopy()`与[`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")一起使用时（这不是官方支持的用例）。感谢 duesenfranz 的拉取请求。
- en: '**[orm] [bug]**'
  id: totrans-4045
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where [`Session.expunge()`](../orm/session_api.html#sqlalchemy.orm.Session.expunge
    "sqlalchemy.orm.Session.expunge") would not fully detach the given object if the
    object had been subject to a delete operation that was flushed, but not committed.
    This would also affect related operations like [`make_transient()`](../orm/session_api.html#sqlalchemy.orm.make_transient
    "sqlalchemy.orm.make_transient").
  id: totrans-4046
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Session.expunge()`](../orm/session_api.html#sqlalchemy.orm.Session.expunge
    "sqlalchemy.orm.Session.expunge")在对象经历了已刷新但未提交的删除操作时不会完全分离给定对象的错误。这也会影响到类似[`make_transient()`](../orm/session_api.html#sqlalchemy.orm.make_transient
    "sqlalchemy.orm.make_transient")的相关操作。
- en: See also
  id: totrans-4047
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[session.expunge() will fully detach an object that’s been deleted](migration_10.html#bug-3139)'
  id: totrans-4048
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[session.expunge() 现在会完全分离已删除的对象](migration_10.html#bug-3139)'
- en: 'References: [#3139](https://www.sqlalchemy.org/trac/ticket/3139)'
  id: totrans-4049
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3139](https://www.sqlalchemy.org/trac/ticket/3139)
- en: '**[orm] [bug]**'
  id: totrans-4050
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: A warning is emitted in the case of multiple relationships that ultimately will
    populate a foreign key column in conflict with another, where the relationships
    are attempting to copy values from different source columns. This occurs in the
    case where composite foreign keys with overlapping columns are mapped to relationships
    that each refer to a different referenced column. A new documentation section
    illustrates the example as well as how to overcome the issue by specifying “foreign”
    columns specifically on a per-relationship basis.
  id: totrans-4051
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在多个关系最终将填充与另一个冲突的外键列的情况下，会发出警告，其中关系试图从不同源列复制值。这发生在将具有重叠列的复合外键映射到每个引用列不同的关系的情况下。一个新的文档部分说明了示例以及如何通过在每个关系上明确指定“外键”列来克服该问题。
- en: See also
  id: totrans-4052
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Overlapping Foreign Keys](../orm/join_conditions.html#relationship-overlapping-foreignkeys)'
  id: totrans-4053
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[重叠的外键](../orm/join_conditions.html#relationship-overlapping-foreignkeys)'
- en: 'References: [#3230](https://www.sqlalchemy.org/trac/ticket/3230)'
  id: totrans-4054
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3230](https://www.sqlalchemy.org/trac/ticket/3230)
- en: '**[orm] [bug]**'
  id: totrans-4055
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The [`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update") method will now convert string key names in the
    given dictionary of values into mapped attribute names against the mapped class
    being updated. Previously, string names were taken in directly and passed to the
    core update statement without any means to resolve against the mapped entity.
    Support for synonyms and hybrid attributes as the subject attributes of [`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update") are also supported.
  id: totrans-4056
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update")方法现在将给定值字典中的字符串键名转换为针对正在更新的映射类的映射属性名。以前，字符串名称直接被接受并传递给核心更新语句，没有任何方法可以解析到映射实体。[`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update")的主题属性也支持同义词和混合属性。'
- en: See also
  id: totrans-4057
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[query.update() now resolves string names into mapped attribute names](migration_10.html#bug-3228)'
  id: totrans-4058
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[query.update() 现在会将字符串名称解析为映射属性名称](migration_10.html#bug-3228)'
- en: 'References: [#3228](https://www.sqlalchemy.org/trac/ticket/3228)'
  id: totrans-4059
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3228](https://www.sqlalchemy.org/trac/ticket/3228)
- en: '**[orm] [bug]**'
  id: totrans-4060
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Improvements to the mechanism used by [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") to locate “binds” (e.g. engines to use), such engines
    can be associated with mixin classes, concrete subclasses, as well as a wider
    variety of table metadata such as joined inheritance tables.
  id: totrans-4061
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了[`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")用于定位“绑定”（例如要使用的引擎）的机制，这些引擎可以与混合类、具体子类以及更广泛的表元数据（如联合继承表）关联。
- en: See also
  id: totrans-4062
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Session.get_bind() handles a wider variety of inheritance scenarios](migration_10.html#bug-3035)'
  id: totrans-4063
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Session.get_bind() 处理更广泛的继承场景](migration_10.html#bug-3035)'
- en: 'References: [#3035](https://www.sqlalchemy.org/trac/ticket/3035)'
  id: totrans-4064
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3035](https://www.sqlalchemy.org/trac/ticket/3035)
- en: '**[orm] [bug]**'
  id: totrans-4065
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in single table inheritance where a chain of joins that included the
    same single inh entity more than once (normally this should raise an error) could,
    in some cases depending on what was being joined “from”, implicitly alias the
    second case of the single inh entity, producing a query that “worked”. But as
    this implicit aliasing is not intended in the case of single table inheritance,
    it didn’t really “work” fully and was very misleading, since it wouldn’t always
    appear.
  id: totrans-4066
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了单表继承中的错误，其中包含同一单一继承实体超过一次的连接链（通常应该引发错误）可能在某些情况下，取决于从何处连接，隐式别名第二次单一继承实体的情况，生成一个“有效”的查询。但由于在单表继承的情况下并不打算进行这种隐式别名处理，因此它并没有完全“有效”，并且非常具有误导性，因为它并不总是出现。
- en: See also
  id: totrans-4067
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Changes and fixes in handling of duplicate join targets](migration_10.html#bug-3233)'
  id: totrans-4068
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[处理重复连接目标的更改和修复](migration_10.html#bug-3233)'
- en: 'References: [#3233](https://www.sqlalchemy.org/trac/ticket/3233)'
  id: totrans-4069
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3233](https://www.sqlalchemy.org/trac/ticket/3233)
- en: '**[orm] [bug]**'
  id: totrans-4070
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The ON clause rendered when using [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join"), [`Query.outerjoin()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.outerjoin
    "sqlalchemy.orm.Query.outerjoin"), or the standalone [`join()`](../orm/queryguide/api.html#sqlalchemy.orm.join
    "sqlalchemy.orm.join") / [`outerjoin()`](../orm/queryguide/api.html#sqlalchemy.orm.outerjoin
    "sqlalchemy.orm.outerjoin") functions to a single-inheritance subclass will now
    include the “single table criteria” in the ON clause even if the ON clause is
    otherwise hand-rolled; it is now added to the criteria using AND, the same way
    as if joining to a single-table target using relationship or similar.
  id: totrans-4071
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")、[`Query.outerjoin()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.outerjoin
    "sqlalchemy.orm.Query.outerjoin")或独立的[`join()`](../orm/queryguide/api.html#sqlalchemy.orm.join
    "sqlalchemy.orm.join") / [`outerjoin()`](../orm/queryguide/api.html#sqlalchemy.orm.outerjoin
    "sqlalchemy.orm.outerjoin")函数连接到单继承子类时，ON子句现在将包括“单表条件”在ON子句中，即使ON子句是手动编写的；它现在被添加到条件中使用AND，就像如果使用关系或类似方法连接到单表目标时一样。
- en: This is sort of in-between feature and bug.
  id: totrans-4072
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这有点介于特性和错误之间。
- en: See also
  id: totrans-4073
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[single-table-inheritance criteria added to all ON clauses unconditionally](migration_10.html#migration-3222)'
  id: totrans-4074
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[单表继承条件已无条件地添加到所有ON子句中](migration_10.html#migration-3222)'
- en: 'References: [#3222](https://www.sqlalchemy.org/trac/ticket/3222)'
  id: totrans-4075
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3222](https://www.sqlalchemy.org/trac/ticket/3222)
- en: '**[orm] [bug]**'
  id: totrans-4076
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: A major rework to the behavior of expression labels, most specifically when
    used with ColumnProperty constructs with custom SQL expressions and in conjunction
    with the “order by labels” logic first introduced in 0.9\. Fixes include that
    an `order_by(Entity.some_col_prop)` will now make use of “order by label” rules
    even if Entity has been subject to aliasing, either via inheritance rendering
    or via the use of the `aliased()` construct; rendering of the same column property
    multiple times with aliasing (e.g. `query(Entity.some_prop, entity_alias.some_prop)`)
    will label each occurrence of the entity with a distinct label, and additionally
    “order by label” rules will work for both (e.g. `order_by(Entity.some_prop, entity_alias.some_prop)`).
    Additional issues that could prevent the “order by label” logic from working in
    0.9, most notably that the state of a Label could change such that “order by label”
    would stop working depending on how things were called, has been fixed.
  id: totrans-4077
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对表达式标签的行为进行了重大改进，特别是在与具有自定义SQL表达式的ColumnProperty构造和与0.9中首次引入的“按标签排序”逻辑结合使用时。修复包括`order_by(Entity.some_col_prop)`现在将使用“按标签排序”规则，即使Entity已经经历了别名处理，无论是通过继承渲染还是通过使用`aliased()`构造；多次使用别名渲染相同列属性（例如`query(Entity.some_prop,
    entity_alias.some_prop)`)将为实体的每次出现使用不同的标签，此外，“按标签排序”规则将适用于两者（例如`order_by(Entity.some_prop,
    entity_alias.some_prop)`）。在0.9中可能阻止“按标签排序”逻辑工作的其他问题，尤其是标签的状态可能会发生变化，导致“按标签排序”停止工作，具体取决于如何调用的问题已经修复。
- en: See also
  id: totrans-4078
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[ColumnProperty constructs work a lot better with aliases, order_by](migration_10.html#bug-3188)'
  id: totrans-4079
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[ColumnProperty构造在别名、order_by中表现更好](migration_10.html#bug-3188)'
- en: 'References: [#3148](https://www.sqlalchemy.org/trac/ticket/3148), [#3188](https://www.sqlalchemy.org/trac/ticket/3188)'
  id: totrans-4080
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3148](https://www.sqlalchemy.org/trac/ticket/3148)，[#3188](https://www.sqlalchemy.org/trac/ticket/3188)
- en: '**[orm] [bug]**'
  id: totrans-4081
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Changed the approach by which the “single inheritance criterion” is applied,
    when using `Query.from_self()`, or its common user [`Query.count()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.count
    "sqlalchemy.orm.Query.count"). The criteria to limit rows to those with a certain
    type is now indicated on the inside subquery, not the outside one, so that even
    if the “type” column is not available in the columns clause, we can filter on
    it on the “inner” query.
  id: totrans-4082
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更改了使用`Query.from_self()`或其常见用户[`Query.count()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.count
    "sqlalchemy.orm.Query.count")时应用“单继承条件”的方法。现在，将限制行数的条件指示在内部子查询中，而不是外部子查询中，因此即使“type”列不在列子句中，我们也可以在“内部”查询中对其进行过滤。
- en: See also
  id: totrans-4083
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Change to single-table-inheritance criteria when using from_self(), count()](migration_10.html#migration-3177)'
  id: totrans-4084
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[使用from_self()，count()时更改为单表继承条件](migration_10.html#migration-3177)'
- en: 'References: [#3177](https://www.sqlalchemy.org/trac/ticket/3177)'
  id: totrans-4085
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3177](https://www.sqlalchemy.org/trac/ticket/3177)
- en: '**[orm] [bug]**'
  id: totrans-4086
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Made a small adjustment to the mechanics of lazy loading, such that it has less
    chance of interfering with a joinload() in the very rare circumstance that an
    object points to itself; in this scenario, the object refers to itself while loading
    its attributes which can cause a mixup between loaders. The use case of “object
    points to itself” is not fully supported, but the fix also removes some overhead
    so for now is part of testing.
  id: totrans-4087
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对延迟加载的机制进行了小调整，以减少在极少情况下干扰joinload()的机会；在这种情况下，对象在加载其属性时指向自身，这可能导致加载器之间的混淆。“对象指向自身”的用例并未得到完全支持，但修复也减少了一些开销，因此目前是测试的一部分。
- en: 'References: [#3145](https://www.sqlalchemy.org/trac/ticket/3145)'
  id: totrans-4088
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3145](https://www.sqlalchemy.org/trac/ticket/3145)
- en: '**[orm] [bug]**'
  id: totrans-4089
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The “resurrect” ORM event has been removed. This event hook had no purpose since
    the old “mutable attribute” system was removed in 0.8.
  id: totrans-4090
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已删除“复活”ORM事件。自从0.8版本中删除了旧的“可变属性”系统后，此事件挂钩已经没有意义。
- en: 'References: [#3171](https://www.sqlalchemy.org/trac/ticket/3171)'
  id: totrans-4091
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3171](https://www.sqlalchemy.org/trac/ticket/3171)
- en: '**[orm] [bug]**'
  id: totrans-4092
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where attribute “set” events or columns with `@validates` would have
    events triggered within the flush process, when those columns were the targets
    of a “fetch and populate” operation, such as an autoincremented primary key, a
    Python side default, or a server-side default “eagerly” fetched via RETURNING.
  id: totrans-4093
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在刷新过程中触发属性“set”事件或具有`@validates`的列的错误，当这些列是“获取和填充”操作的目标时，例如自增主键，Python端默认值或通过RETURNING“急切”获取的服务器端默认值。
- en: 'References: [#3167](https://www.sqlalchemy.org/trac/ticket/3167)'
  id: totrans-4094
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3167](https://www.sqlalchemy.org/trac/ticket/3167)
- en: '**[orm] [bug] [py3k]**'
  id: totrans-4095
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [py3k]**'
- en: The [`IdentityMap`](../orm/internals.html#sqlalchemy.orm.IdentityMap "sqlalchemy.orm.IdentityMap")
    exposed from [`Session.identity_map`](../orm/session_api.html#sqlalchemy.orm.Session.identity_map
    "sqlalchemy.orm.Session.identity_map") now returns lists for `items()` and `values()`
    in Py3K. Early porting to Py3K here had these returning iterators, when they technically
    should be “iterable views”..for now, lists are OK.
  id: totrans-4096
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从[`Session.identity_map`](../orm/session_api.html#sqlalchemy.orm.Session.identity_map
    "sqlalchemy.orm.Session.identity_map")暴露的[`IdentityMap`](../orm/internals.html#sqlalchemy.orm.IdentityMap
    "sqlalchemy.orm.IdentityMap")现在在Py3K中为`items()`和`values()`返回列表。早期移植到Py3K时，这些返回迭代器，但从技术上讲应该是“可迭代视图”..目前，列表是可以的。
- en: '**[orm] [bug]**'
  id: totrans-4097
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The “evaluator” for query.update()/delete() won’t work with multi-table updates,
    and needs to be set to synchronize_session=False or synchronize_session=’fetch’;
    this now raises an exception, with a message to change the synchronize setting.
    This is upgraded from a warning emitted as of 0.9.7.
  id: totrans-4098
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于query.update()/delete()的“评估器”不适用于多表更新，需要将其设置为synchronize_session=False或synchronize_session=’fetch’；现在会引发异常，并提示更改同步设置。这是从0.9.7开始发出的警告升级。
- en: 'References: [#3117](https://www.sqlalchemy.org/trac/ticket/3117)'
  id: totrans-4099
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3117](https://www.sqlalchemy.org/trac/ticket/3117)
- en: '**[orm] [enhancement]**'
  id: totrans-4100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [enhancement]**'
- en: Adjustment to attribute mechanics concerning when a value is implicitly initialized
    to None via first access; this action, which has always resulted in a population
    of the attribute, no longer does so; the None value is returned but the underlying
    attribute receives no set event. This is consistent with how collections work
    and allows attribute mechanics to behave more consistently; in particular, getting
    an attribute with no value does not squash the event that should proceed if the
    value is actually set to None.
  id: totrans-4101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了属性机制，关于何时通过首次访问将值隐式初始化为 None；这一操作，一直导致属性的填充，现在不再这样；返回 None 值，但底层属性不接收设置事件。这与集合的工作方式一致，并允许属性机制更一致地行为；特别是，获取一个没有值的属性不会压制应该在实际将值设置为
    None 时进行的事件。
- en: See also
  id: totrans-4102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Changes to attribute events and other operations regarding attributes that
    have no pre-existing value](migration_10.html#migration-3061)'
  id: totrans-4103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[关于没有预先存在值的属性的属性事件和其他操作的更改](migration_10.html#migration-3061)'
- en: where bound parameters are rendered inline as strings based on a compile-time
    option. Work on this feature is courtesy of Dobes Vandermeer.
  id: totrans-4104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 其中绑定参数根据编译时选项作为字符串内联呈现。这一功能的工作由 Dobes Vandermeer 提供。
- en: See also
  id: totrans-4105
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 另请参阅
- en: ''
  id: totrans-4106
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Select/Query LIMIT / OFFSET may be specified as an arbitrary SQL expression](migration_10.html#feature-3034).'
  id: totrans-4107
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[选择/查询 LIMIT / OFFSET 可以指定为任意 SQL 表达式](migration_10.html#feature-3034)。'
- en: 'References: [#3061](https://www.sqlalchemy.org/trac/ticket/3061)'
  id: totrans-4108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3061](https://www.sqlalchemy.org/trac/ticket/3061)
- en: orm declarative
  id: totrans-4109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm 声明性
- en: '**[orm] [declarative] [feature]**'
  id: totrans-4110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [feature]**'
- en: The [`declared_attr`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr "sqlalchemy.orm.declared_attr")
    construct has newly improved behaviors and features in conjunction with declarative.
    The decorated function will now have access to the final column copies present
    on the local mixin when invoked, and will also be invoked exactly once for each
    mapped class, the returned result being memoized. A new modifier [`declared_attr.cascading`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr.cascading
    "sqlalchemy.orm.declared_attr.cascading") is added as well.
  id: totrans-4111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`declared_attr`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr "sqlalchemy.orm.declared_attr")
    构造在与声明性结合时具有新的改进行为和特性。装饰的函数在调用时现在将可以访问到本地混合类上的最终列副本，并且对于每个映射类将仅被调用一次，返回的结果将被缓存。同时还添加了一个新的修饰符
    [`declared_attr.cascading`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr.cascading
    "sqlalchemy.orm.declared_attr.cascading")。'
- en: See also
  id: totrans-4112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Improvements to declarative mixins, @declared_attr and related features](migration_10.html#feature-3150)'
  id: totrans-4113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[改进声明性混合类、@declared_attr 和相关特性](migration_10.html#feature-3150)'
- en: 'References: [#3150](https://www.sqlalchemy.org/trac/ticket/3150)'
  id: totrans-4114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3150](https://www.sqlalchemy.org/trac/ticket/3150)
- en: '**[orm] [declarative] [bug]**'
  id: totrans-4115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Fixed “‘NoneType’ object has no attribute ‘concrete’” error when using [`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase") in conjunction with a subclass
    that declares `__abstract__`.
  id: totrans-4116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用 [`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase") 与声明了 `__abstract__` 的子类时出现的“‘NoneType’
    对象没有 ‘concrete’ 属性”错误。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-4117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.8
- en: 'References: [#3185](https://www.sqlalchemy.org/trac/ticket/3185)'
  id: totrans-4118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3185](https://www.sqlalchemy.org/trac/ticket/3185)
- en: '**[orm] [declarative] [bug]**'
  id: totrans-4119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Fixed bug where using an `__abstract__` mixin in the middle of a declarative
    inheritance hierarchy would prevent attributes and configuration being correctly
    propagated from the base class to the inheriting class.
  id: totrans-4120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在声明性继承层次结构中使用 `__abstract__` 混合类会阻止属性和配置正确从基类传播到继承类的 bug。
- en: 'References: [#3219](https://www.sqlalchemy.org/trac/ticket/3219), [#3240](https://www.sqlalchemy.org/trac/ticket/3240)'
  id: totrans-4121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3219](https://www.sqlalchemy.org/trac/ticket/3219), [#3240](https://www.sqlalchemy.org/trac/ticket/3240)
- en: '**[orm] [declarative] [bug]**'
  id: totrans-4122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: A relationship set up with [`declared_attr`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr") on a [`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase") base class will now be configured
    on the abstract base mapping automatically, in addition to being set up on descendant
    concrete classes as usual.
  id: totrans-4123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用[`declared_attr`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr "sqlalchemy.orm.declared_attr")在[`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase")基类上设置的关系现在将自动配置在抽象基本映射上，除了像往常一样在后代具体类上设置。
- en: See also
  id: totrans-4124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Improvements to declarative mixins, @declared_attr and related features](migration_10.html#feature-3150)'
  id: totrans-4125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[改进声明性混合，@declared_attr 和相关功能](migration_10.html#feature-3150)'
- en: 'References: [#2670](https://www.sqlalchemy.org/trac/ticket/2670)'
  id: totrans-4126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2670](https://www.sqlalchemy.org/trac/ticket/2670)
- en: examples
  id: totrans-4127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples] [feature]**'
  id: totrans-4128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[示例] [特性]**'
- en: Added a new example illustrating materialized paths, using the latest relationship
    features. Example courtesy Jack Zhou.
  id: totrans-4129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新示例，演示了使用最新的关系特性的物化路径。示例由Jack Zhou提供。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-4130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.5
- en: '**[examples] [feature]**'
  id: totrans-4131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[示例] [特性]**'
- en: A new suite of examples dedicated to providing a detailed study into performance
    of SQLAlchemy ORM and Core, as well as the DBAPI, from multiple perspectives.
    The suite runs within a container that provides built in profiling displays both
    through console output as well as graphically via the RunSnake tool.
  id: totrans-4132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个新的示例套件，致力于从多个角度详细研究SQLAlchemy ORM和Core以及DBAPI的性能。该套件在一个容器中运行，通过控制台输出以及通过RunSnake工具图形化显示内置的性能分析。
- en: See also
  id: totrans-4133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Performance](../orm/examples.html#examples-performance)'
  id: totrans-4134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[性能](../orm/examples.html#examples-performance)'
- en: '**[examples] [bug]**'
  id: totrans-4135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[示例] [错误]**'
- en: Updated the [Versioning with a History Table](../orm/examples.html#examples-versioned-history)
    example such that mapped columns are re-mapped to match column names as well as
    grouping of columns; in particular, this allows columns that are explicitly grouped
    in a same-column-named joined inheritance scenario to be mapped in the same way
    in the history mappings, avoiding warnings added in the 0.9 series regarding this
    pattern and allowing the same view of attribute keys.
  id: totrans-4136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新了[带有历史表的版本控制](../orm/examples.html#examples-versioned-history)示例，使映射列重新映射以匹配列名以及列的分组；特别是，这允许在历史映射中以相同方式映射明确分组的列，避免了在0.9系列中关于此模式的警告，并允许属性键的相同视图。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-4137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.9
- en: '**[examples] [bug]**'
  id: totrans-4138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[示例] [错误]**'
- en: Fixed a bug in the examples/generic_associations/discriminator_on_association.py
    example, where the subclasses of AddressAssociation were not being mapped as “single
    table inheritance”, leading to problems when trying to use the mappings further.
  id: totrans-4139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了示例/generic_associations/discriminator_on_association.py中的一个错误，在这个示例中，AddressAssociation的子类没有被映射为“单表继承”，导致在尝试进一步使用映射时出现问题。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-4140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.9
- en: engine
  id: totrans-4141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [feature]**'
  id: totrans-4142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [特性]**'
- en: Added new user-space accessors for viewing transaction isolation levels; [`Connection.get_isolation_level()`](../core/connections.html#sqlalchemy.engine.Connection.get_isolation_level
    "sqlalchemy.engine.Connection.get_isolation_level"), [`Connection.default_isolation_level`](../core/connections.html#sqlalchemy.engine.Connection.default_isolation_level
    "sqlalchemy.engine.Connection.default_isolation_level").
  id: totrans-4143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了用于查看事务隔离级别的新用户空间访问器；[`Connection.get_isolation_level()`](../core/connections.html#sqlalchemy.engine.Connection.get_isolation_level
    "sqlalchemy.engine.Connection.get_isolation_level"), [`Connection.default_isolation_level`](../core/connections.html#sqlalchemy.engine.Connection.default_isolation_level
    "sqlalchemy.engine.Connection.default_isolation_level").
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-4144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.9
- en: '**[engine] [feature]**'
  id: totrans-4145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [特性]**'
- en: Added new event `ConnectionEvents.handle_error()`, a more fully featured and
    comprehensive replacement for `ConnectionEvents.dbapi_error()`.
  id: totrans-4146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新事件`ConnectionEvents.handle_error()`，这是对`ConnectionEvents.dbapi_error()`的更全面和全面的替代。
- en: 'This change is also **backported** to: 0.9.7'
  id: totrans-4147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.7
- en: 'References: [#3076](https://www.sqlalchemy.org/trac/ticket/3076)'
  id: totrans-4148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3076](https://www.sqlalchemy.org/trac/ticket/3076)
- en: '**[engine] [feature]**'
  id: totrans-4149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [特性]**'
- en: A new style of warning can be emitted which will “filter” up to N occurrences
    of a parameterized string. This allows parameterized warnings that can refer to
    their arguments to be delivered a fixed number of times until allowing Python
    warning filters to squelch them, and prevents memory from growing unbounded within
    Python’s warning registries.
  id: totrans-4150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以发出一种新风格的警告，该警告将“过滤”掉参数化字符串的 N 次出现。这允许参数化警告引用其参数，直到 Python 警告过滤器将其消除，并防止内存在
    Python 的警告注册表中无限增长。
- en: See also
  id: totrans-4151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Session.get_bind() handles a wider variety of inheritance scenarios](migration_10.html#feature-3178)'
  id: totrans-4152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Session.get_bind() 处理更广泛的继承场景](migration_10.html#feature-3178)'
- en: 'References: [#3178](https://www.sqlalchemy.org/trac/ticket/3178)'
  id: totrans-4153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3178](https://www.sqlalchemy.org/trac/ticket/3178)
- en: '**[engine] [bug]**'
  id: totrans-4154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误]**'
- en: Fixed bug in [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") and pool where the [`Connection.invalidate()`](../core/connections.html#sqlalchemy.engine.Connection.invalidate
    "sqlalchemy.engine.Connection.invalidate") method, or an invalidation due to a
    database disconnect, would fail if the `isolation_level` parameter had been used
    with [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options"); the “finalizer” that resets
    the isolation level would be called on the no longer opened connection.
  id: totrans-4155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")和池中的错误，其中[`Connection.invalidate()`](../core/connections.html#sqlalchemy.engine.Connection.invalidate
    "sqlalchemy.engine.Connection.invalidate")方法，或由于数据库断开连接而导致的失效，如果`isolation_level`参数与[`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")一起使用，则会失败；重置隔离级别的“终结器”将在不再打开的连接上调用。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-4156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.9.9
- en: 'References: [#3302](https://www.sqlalchemy.org/trac/ticket/3302)'
  id: totrans-4157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3302](https://www.sqlalchemy.org/trac/ticket/3302)
- en: '**[engine] [bug]**'
  id: totrans-4158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误]**'
- en: A warning is emitted if the `isolation_level` parameter is used with [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") when a [`Transaction`](../core/connections.html#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction") is in play; DBAPIs and/or SQLAlchemy dialects
    such as psycopg2, MySQLdb may implicitly rollback or commit the transaction, or
    not change the setting til next transaction, so this is never safe.
  id: totrans-4159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果在使用[`Transaction`](../core/connections.html#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction")时使用`isolation_level`参数与[`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")，则会发出警告；DBAPIs 和/或 SQLAlchemy
    方言（如 psycopg2、MySQLdb）可能会隐式回滚或提交事务，或者在下一个事务中不更改设置，因此这永远不安全。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-4160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.9.9
- en: 'References: [#3296](https://www.sqlalchemy.org/trac/ticket/3296)'
  id: totrans-4161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3296](https://www.sqlalchemy.org/trac/ticket/3296)
- en: '**[engine] [bug]**'
  id: totrans-4162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误]**'
- en: The execution options passed to an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") either via [`create_engine.execution_options`](../core/engines.html#sqlalchemy.create_engine.params.execution_options
    "sqlalchemy.create_engine") or [`Engine.update_execution_options()`](../core/connections.html#sqlalchemy.engine.Engine.update_execution_options
    "sqlalchemy.engine.Engine.update_execution_options") are not passed to the special
    [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    used to initialize the dialect within the “first connect” event; dialects will
    usually perform their own queries in this phase, and none of the current available
    options should be applied here. In particular, the “autocommit” option was causing
    an attempt to autocommit within this initial connect which would fail with an
    AttributeError due to the non-standard state of the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").
  id: totrans-4163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 传递给[`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")的执行选项，无论是通过[`create_engine.execution_options`](../core/engines.html#sqlalchemy.create_engine.params.execution_options
    "sqlalchemy.create_engine")还是[`Engine.update_execution_options()`](../core/connections.html#sqlalchemy.engine.Engine.update_execution_options
    "sqlalchemy.engine.Engine.update_execution_options")，都不会传递给用于在“第一次连接”事件中初始化方言的特殊[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")；方言通常会在此阶段执行自己的查询，并且不应在此应用任何当前可用的选项。特别是，“autocommit”选项导致在此初始连接中尝试自动提交，这将由于[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")的非标准状态而导致AttributeError。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-4164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.8
- en: 'References: [#3200](https://www.sqlalchemy.org/trac/ticket/3200)'
  id: totrans-4165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3200](https://www.sqlalchemy.org/trac/ticket/3200)
- en: '**[engine] [bug]**'
  id: totrans-4166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误]**'
- en: The string keys that are used to determine the columns impacted for an INSERT
    or UPDATE are now sorted when they contribute towards the “compiled cache” cache
    key. These keys were previously not deterministically ordered, meaning the same
    statement could be cached multiple times on equivalent keys, costing both in terms
    of memory as well as performance.
  id: totrans-4167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于确定插入或更新所影响列的字符串键现在在对“编译缓存”缓存键做出贡献时进行排序。这些键以前没有确定性地排序，这意味着相同的语句可能会根据等效键多次缓存，这既在内存方面又在性能方面造成了损失。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-4168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.8
- en: 'References: [#3165](https://www.sqlalchemy.org/trac/ticket/3165)'
  id: totrans-4169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3165](https://www.sqlalchemy.org/trac/ticket/3165)
- en: '**[engine] [bug]**'
  id: totrans-4170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引��] [错误]**'
- en: Fixed bug which would occur if a DBAPI exception occurs when the engine first
    connects and does its initial checks, and the exception is not a disconnect exception,
    yet the cursor raises an error when we try to close it. In this case the real
    exception would be quashed as we tried to log the cursor close exception via the
    connection pool and failed, as we were trying to access the pool’s logger in a
    way that is inappropriate in this very specific scenario.
  id: totrans-4171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即当引擎首次连接并进行初始检查时发生DBAPI异常，且异常不是断开异常，但是当我们尝试关闭光标时光标引发错误。在这种情况下，真正的异常将被扼杀，因为我们尝试通过连接池记录光标关闭异常并失败，因为我们试图以不适当的方式访问池的记录器，这在这种非常特定的情况下是不合适的。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-4172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.5
- en: 'References: [#3063](https://www.sqlalchemy.org/trac/ticket/3063)'
  id: totrans-4173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3063](https://www.sqlalchemy.org/trac/ticket/3063)
- en: '**[engine] [bug]**'
  id: totrans-4174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误]**'
- en: Fixed some “double invalidate” situations were detected where a connection invalidation
    could occur within an already critical section like a connection.close(); ultimately,
    these conditions are caused by the change in [#2907](https://www.sqlalchemy.org/trac/ticket/2907),
    in that the “reset on return” feature calls out to the Connection/Transaction
    in order to handle it, where “disconnect detection” might be caught. However,
    it’s possible that the more recent change in [#2985](https://www.sqlalchemy.org/trac/ticket/2985)
    made it more likely for this to be seen as the “connection invalidate” operation
    is much quicker, as the issue is more reproducible on 0.9.4 than 0.9.3.
  id: totrans-4175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一些检测到的“双重失效”情况，其中连接失效可能发生在已经处于关键部分（如connection.close()）的情况下；最终，这些条件是由于[#2907](https://www.sqlalchemy.org/trac/ticket/2907)中的更改引起的，因为“返回时重置”功能调用Connection/Transaction以处理它，其中可能会捕获“断开检测”。然而，最近在[#2985](https://www.sqlalchemy.org/trac/ticket/2985)中的更改可能使这种情况更容易被视为“连接失效”操作更快，因为在0.9.4上更容易复现这个问题，而不是在0.9.3上。
- en: Checks are now added within any section that an invalidate might occur to halt
    further disallowed operations on the invalidated connection. This includes two
    fixes both at the engine level and at the pool level. While the issue was observed
    with highly concurrent gevent cases, it could in theory occur in any kind of scenario
    where a disconnect occurs within the connection close operation.
  id: totrans-4176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在在可能发生无效的任何部分中添加检查以阻止在无效连接上进行进一步的不允许的操作。这包括引擎级别和池级别的两个修复。虽然这个问题在高度并发的gevent情况下被观察到，但理论上它可能发生在任何断开连接发生在连接关闭操作内的情况下。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-4177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.9.5
- en: 'References: [#3043](https://www.sqlalchemy.org/trac/ticket/3043)'
  id: totrans-4178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3043](https://www.sqlalchemy.org/trac/ticket/3043)
- en: '**[engine] [bug]**'
  id: totrans-4179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [错误]**'
- en: The engine-level error handling and wrapping routines will now take effect in
    all engine connection use cases, including when user-custom connect routines are
    used via the [`create_engine.creator`](../core/engines.html#sqlalchemy.create_engine.params.creator
    "sqlalchemy.create_engine") parameter, as well as when the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") encounters a connection error on revalidation.
  id: totrans-4180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引擎级别的错误处理和包装程序现在将在所有引擎连接使用情况下生效，包括当用户自定义连接程序通过[`create_engine.creator`](../core/engines.html#sqlalchemy.create_engine.params.creator
    "sqlalchemy.create_engine")参数使用时，以及当[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")在重新验证时遇到连接错误时。
- en: See also
  id: totrans-4181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[DBAPI exception wrapping and handle_error() event improvements](migration_10.html#change-3266)'
  id: totrans-4182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[DBAPI异常包装和handle_error()事件改进](migration_10.html#change-3266)'
- en: 'References: [#3266](https://www.sqlalchemy.org/trac/ticket/3266)'
  id: totrans-4183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3266](https://www.sqlalchemy.org/trac/ticket/3266)
- en: '**[engine] [bug]**'
  id: totrans-4184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [错误]**'
- en: Removing (or adding) an event listener at the same time that the event is being
    run itself, either from inside the listener or from a concurrent thread, now raises
    a RuntimeError, as the collection used is now an instance of `collections.deque()`
    and does not support changes while being iterated. Previously, a plain Python
    list was used where removal from inside the event itself would produce silent
    failures.
  id: totrans-4185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在事件运行时同时删除（或添加）事件监听器，无论是从监听器内部还是从并发线程中，现在会引发RuntimeError，因为现在使用的集合是`collections.deque()`的实例，不支持在迭代时进行更改。以前使用的是普通的Python列表，其中从事件本身内部删除会产生静默失败。
- en: 'References: [#3163](https://www.sqlalchemy.org/trac/ticket/3163)'
  id: totrans-4186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3163](https://www.sqlalchemy.org/trac/ticket/3163)
- en: sql
  id: totrans-4187
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-4188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [功能]**'
- en: Liberalized the contract for [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") a bit in that you can specify a [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") expression as the target; the index no longer
    needs to have a table-bound column present if the index is to be manually added
    to the table, either via inline declaration or via [`Table.append_constraint()`](../core/metadata.html#sqlalchemy.schema.Table.append_constraint
    "sqlalchemy.schema.Table.append_constraint").
  id: totrans-4189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")的合同中稍微放宽了一点，你可以指定一个[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")表达式作为目标；如果要手动将索引添加到表中，则索引不再需要存在绑定表列，可以通过内联声明或通过[`Table.append_constraint()`](../core/metadata.html#sqlalchemy.schema.Table.append_constraint
    "sqlalchemy.schema.Table.append_constraint")添加。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-4190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.9.5
- en: 'References: [#3028](https://www.sqlalchemy.org/trac/ticket/3028)'
  id: totrans-4191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3028](https://www.sqlalchemy.org/trac/ticket/3028)
- en: '**[sql] [feature]**'
  id: totrans-4192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [功能]**'
- en: Added new flag [`between.symmetric`](../core/sqlelement.html#sqlalchemy.sql.expression.between.params.symmetric
    "sqlalchemy.sql.expression.between"), when set to True renders “BETWEEN SYMMETRIC”.
    Also added a new negation operator “notbetween_op”, which now allows an expression
    like `~col.between(x, y)` to render as “col NOT BETWEEN x AND y”, rather than
    a parenthesized NOT string.
  id: totrans-4193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新标志[`between.symmetric`](../core/sqlelement.html#sqlalchemy.sql.expression.between.params.symmetric
    "sqlalchemy.sql.expression.between")，当设置为True时呈现“BETWEEN SYMMETRIC”。还添加了一个新的否定运算符“notbetween_op”，现在允许像`~col.between(x,
    y)`这样的表达式呈现为“col NOT BETWEEN x AND y”，而不是一个带括号的NOT字符串。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-4194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.9.5
- en: 'References: [#2990](https://www.sqlalchemy.org/trac/ticket/2990)'
  id: totrans-4195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2990](https://www.sqlalchemy.org/trac/ticket/2990)
- en: '**[sql] [feature]**'
  id: totrans-4196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [功能]**'
- en: The SQL compiler now generates the mapping of expected columns such that they
    are matched to the received result set positionally, rather than by name. Originally,
    this was seen as a way to handle cases where we had columns returned with difficult-to-predict
    names, though in modern use that issue has been overcome by anonymous labeling.
    In this version, the approach basically reduces function call count per-result
    by a few dozen calls, or more for larger sets of result columns. The approach
    still degrades into a modern version of the old approach if any discrepancy in
    size exists between the compiled set of columns versus what was received, so there’s
    no issue for partially or fully textual compilation scenarios where these lists
    might not line up.
  id: totrans-4197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在SQL编译器生成预期列的映射，使其按位置匹配接收到的结果集，而不是按名称匹配。最初，这被视为一种处理列返回具有难以预测名称的情况的方法，尽管在现代使用中，这个问题已经通过匿名标记得以解决。在这个版本中，这种方法基本上通过减少每个结果的函数调用次数几十次，或者对于更大的结果列集合来说更多。如果编译的列集合与接收到的列存在大小上的任何差异，这种方法仍然会退化为旧方法的现代版本，因此在这些列表可能不对齐的部分或完全文本编译场景中没有问题。
- en: 'References: [#918](https://www.sqlalchemy.org/trac/ticket/918)'
  id: totrans-4198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#918](https://www.sqlalchemy.org/trac/ticket/918)
- en: '**[sql] [feature]**'
  id: totrans-4199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Literal values within a [`DefaultClause`](../core/defaults.html#sqlalchemy.schema.DefaultClause
    "sqlalchemy.schema.DefaultClause"), which is invoked when using the [`Column.server_default`](../core/metadata.html#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column") parameter, will now be rendered using the “inline”
    compiler, so that they are rendered as-is, rather than as bound parameters.
  id: totrans-4200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[`DefaultClause`](../core/defaults.html#sqlalchemy.schema.DefaultClause "sqlalchemy.schema.DefaultClause")中的字面值，当使用[`Column.server_default`](../core/metadata.html#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column")参数时被调用，现在将使用“内联”编译器呈现，以便它们按原样呈现，而不是作为绑定参数。
- en: See also
  id: totrans-4201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Column server defaults now render literal values](migration_10.html#change-3087)'
  id: totrans-4202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[列服务器默认值现在呈现字面值](migration_10.html#change-3087)'
- en: 'References: [#3087](https://www.sqlalchemy.org/trac/ticket/3087)'
  id: totrans-4203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3087](https://www.sqlalchemy.org/trac/ticket/3087)
- en: '**[sql] [feature]**'
  id: totrans-4204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: The type of expression is reported when an object passed to a SQL expression
    unit can’t be interpreted as a SQL fragment; pull request courtesy Ryan P. Kelly.
  id: totrans-4205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当传递给SQL表达式单元的对象无法解释为SQL片段时，报告表达式的类型；感谢 Ryan P. Kelly 的拉取请求。
- en: '**[sql] [feature]**'
  id: totrans-4206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added a new parameter [`Table.tometadata.name`](../core/metadata.html#sqlalchemy.schema.Table.tometadata.params.name
    "sqlalchemy.schema.Table.tometadata") to the [`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata") method. Similar to [`Table.tometadata.schema`](../core/metadata.html#sqlalchemy.schema.Table.tometadata.params.schema
    "sqlalchemy.schema.Table.tometadata"), this argument causes the newly copied [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") to take on the new name instead of the existing one.
    An interesting capability this adds is that of copying a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object to the *same* [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") target with a new name. Pull request courtesy n.d.
    parker.
  id: totrans-4207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向[`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata")方法添加了一个新参数[`Table.tometadata.name`](../core/metadata.html#sqlalchemy.schema.Table.tometadata.params.name
    "sqlalchemy.schema.Table.tometadata")。类似于[`Table.tometadata.schema`](../core/metadata.html#sqlalchemy.schema.Table.tometadata.params.schema
    "sqlalchemy.schema.Table.tometadata")，这个参数使得新复制的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")采用新名称而不是现有名称。这个功能的一个有趣的能力是，可以将[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象复制到*相同的* [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") 目标上并赋予新名称。感谢 n.d. parker 的拉取请求。
- en: '**[sql] [feature]**'
  id: totrans-4208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Exception messages have been spiffed up a bit. The SQL statement and parameters
    are not displayed if None, reducing confusion for error messages that weren’t
    related to a statement. The full module and classname for the DBAPI-level exception
    is displayed, making it clear that this is a wrapped DBAPI exception. The statement
    and parameters themselves are bounded within a bracketed sections to better isolate
    them from the error message and from each other.
  id: totrans-4209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 异常消息稍作调整。如果为 None，则不显示 SQL 语句和参数，减少与语句无关的错误消息的混淆。显示了 DBAPI 级别异常的完整模块和类名，清楚地表明这是一个包装的
    DBAPI 异常。语句和参数本身被限定在括号内，以更好地将它们与错误消息和彼此隔离。
- en: 'References: [#3172](https://www.sqlalchemy.org/trac/ticket/3172)'
  id: totrans-4210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3172](https://www.sqlalchemy.org/trac/ticket/3172)
- en: '**[sql] [feature]**'
  id: totrans-4211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: '[`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select") now includes Python and SQL-expression
    defaults if otherwise unspecified; the limitation where non- server column defaults
    aren’t included in an INSERT FROM SELECT is now lifted and these expressions are
    rendered as constants into the SELECT statement.'
  id: totrans-4212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select") 现在包括 Python 和 SQL 表达式默认值，如果未指定其他值；解除了非服务器列默认值不包含在
    INSERT FROM SELECT 中的限制，并且这些表达式被渲染为常量插入到 SELECT 语句中。'
- en: See also
  id: totrans-4213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[INSERT FROM SELECT now includes Python and SQL-expression defaults](migration_10.html#feature-insert-from-select-defaults)'
  id: totrans-4214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[INSERT FROM SELECT 现在包括 Python 和 SQL 表达式默认值](migration_10.html#feature-insert-from-select-defaults)'
- en: '**[sql] [feature]**'
  id: totrans-4215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: The [`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") construct is now included when reflecting
    a [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object, for databases where this is applicable. In order to achieve this with
    sufficient accuracy, MySQL and PostgreSQL now contain features that correct for
    the duplication of indexes and unique constraints when reflecting tables, indexes,
    and constraints. In the case of MySQL, there is not actually a “unique constraint”
    concept independent of a “unique index”, so for this backend [`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") continues to remain non-present for a reflected
    [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table").
    For PostgreSQL, the query used to detect indexes against `pg_index` has been improved
    to check for the same construct in `pg_constraint`, and the implicitly constructed
    unique index is not included with a reflected [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table").
  id: totrans-4216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当反射一个 [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    对象时，现在会包含 [`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") 构造，适用于这种情况的数据库。为了以足够的准确性实现这一点，MySQL 和 PostgreSQL
    现在包含了在反射表、索引和约束时纠正索引和唯一约束重复的功能。对于 MySQL，实际上并没有独立于“唯一索引”的“唯一约束”概念，因此对于这个后端，反射的
    [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    中仍然不包含 [`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint")。对于 PostgreSQL，用于检测 `pg_index` 中的索引的查询已经改进，以检查
    `pg_constraint` 中的相同构造，并且在反射的 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 中不包含隐式构造的唯一索引。
- en: In both cases, the [`Inspector.get_indexes()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_indexes
    "sqlalchemy.engine.reflection.Inspector.get_indexes") and the [`Inspector.get_unique_constraints()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_unique_constraints
    "sqlalchemy.engine.reflection.Inspector.get_unique_constraints") methods return
    both constructs individually, but include a new token `duplicates_constraint`
    in the case of PostgreSQL or `duplicates_index` in the case of MySQL to indicate
    when this condition is detected. Pull request courtesy Johannes Erdfelt.
  id: totrans-4217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这两种情况下，[`Inspector.get_indexes()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_indexes
    "sqlalchemy.engine.reflection.Inspector.get_indexes") 和 [`Inspector.get_unique_constraints()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_unique_constraints
    "sqlalchemy.engine.reflection.Inspector.get_unique_constraints") 方法分别返回这两种构造，但在
    PostgreSQL 的情况下包含一个新的标记 `duplicates_constraint`，在 MySQL 的情况下包含一个 `duplicates_index`
    标记以指示检测到此条件时。感谢 Johannes Erdfelt 提交的拉取请求。
- en: See also
  id: totrans-4218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[UniqueConstraint is now part of the Table reflection process](migration_10.html#feature-3184)'
  id: totrans-4219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[UniqueConstraint 现在已经成为表反射过程的一部分](migration_10.html#feature-3184)'
- en: 'References: [#3184](https://www.sqlalchemy.org/trac/ticket/3184)'
  id: totrans-4220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3184](https://www.sqlalchemy.org/trac/ticket/3184)
- en: '**[sql] [feature]**'
  id: totrans-4221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**-   [sql] [功能]**'
- en: Added new method [`Select.with_statement_hint()`](../core/selectable.html#sqlalchemy.sql.expression.Select.with_statement_hint
    "sqlalchemy.sql.expression.Select.with_statement_hint") and ORM method [`Query.with_statement_hint()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.with_statement_hint
    "sqlalchemy.orm.Query.with_statement_hint") to support statement-level hints that
    are not specific to a table.
  id: totrans-4222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新方法 [`Select.with_statement_hint()`](../core/selectable.html#sqlalchemy.sql.expression.Select.with_statement_hint
    "sqlalchemy.sql.expression.Select.with_statement_hint") 和 ORM 方法 [`Query.with_statement_hint()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.with_statement_hint
    "sqlalchemy.orm.Query.with_statement_hint") 以支持���特定于表的语句级提示。
- en: 'References: [#3206](https://www.sqlalchemy.org/trac/ticket/3206)'
  id: totrans-4223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3206](https://www.sqlalchemy.org/trac/ticket/3206)
- en: '**[sql] [feature]**'
  id: totrans-4224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**-   [sql] [功能]**'
- en: The `info` parameter has been added as a constructor argument to all schema
    constructs including [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData"), [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index"), [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey"), [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint"), [`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint"), [`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint"), [`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint").
  id: totrans-4225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`info` 参数已添加为所有模式构造的构造函数参数，包括 [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")、[`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")、[`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey")、[`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")、[`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint")、[`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint")、[`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint")。'
- en: 'References: [#2963](https://www.sqlalchemy.org/trac/ticket/2963)'
  id: totrans-4226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2963](https://www.sqlalchemy.org/trac/ticket/2963)
- en: '**[sql] [feature]**'
  id: totrans-4227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**-   [sql] [功能]**'
- en: The [`Table.autoload_with`](../core/metadata.html#sqlalchemy.schema.Table.params.autoload_with
    "sqlalchemy.schema.Table") flag now implies that [`Table.autoload`](../core/metadata.html#sqlalchemy.schema.Table.params.autoload
    "sqlalchemy.schema.Table") should be `True`. Pull request courtesy Malik Diarra.
  id: totrans-4228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Table.autoload_with`](../core/metadata.html#sqlalchemy.schema.Table.params.autoload_with
    "sqlalchemy.schema.Table") 标志现在意味着 [`Table.autoload`](../core/metadata.html#sqlalchemy.schema.Table.params.autoload
    "sqlalchemy.schema.Table") 应为 `True`。感谢 Malik Diarra 的拉取请求。'
- en: 'References: [#3027](https://www.sqlalchemy.org/trac/ticket/3027)'
  id: totrans-4229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3027](https://www.sqlalchemy.org/trac/ticket/3027)
- en: '**[sql] [feature]**'
  id: totrans-4230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**-   [sql] [功能]**'
- en: The [`Select.limit()`](../core/selectable.html#sqlalchemy.sql.expression.Select.limit
    "sqlalchemy.sql.expression.Select.limit") and [`Select.offset()`](../core/selectable.html#sqlalchemy.sql.expression.Select.offset
    "sqlalchemy.sql.expression.Select.offset") methods now accept any SQL expression,
    in addition to integer values, as arguments. Typically this is used to allow a
    bound parameter to be passed, which can be substituted with a value later thus
    allowing Python-side caching of the SQL query. The implementation here is fully
    backwards compatible with existing third party dialects, however those dialects
    which implement special LIMIT/OFFSET systems will need modification in order to
    take advantage of the new capabilities. Limit and offset also support “literal_binds”
    mode,
  id: totrans-4231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Select.limit()`](../core/selectable.html#sqlalchemy.sql.expression.Select.limit
    "sqlalchemy.sql.expression.Select.limit") 和 [`Select.offset()`](../core/selectable.html#sqlalchemy.sql.expression.Select.offset
    "sqlalchemy.sql.expression.Select.offset") 方法现在接受任何 SQL 表达式作为参数，而不仅仅是整数值。通常用于允许传递绑定参数，稍后可以用值替换，从而允许在
    Python 端缓存 SQL 查询。这里的实现完全向后兼容现有的第三方方言，但那些实现特殊 LIMIT/OFFSET 系统的方言需要修改以利用新功能。Limit
    和 offset 还支持“literal_binds”模式，'
- en: 'References: [#3034](https://www.sqlalchemy.org/trac/ticket/3034)'
  id: totrans-4232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3034](https://www.sqlalchemy.org/trac/ticket/3034)
- en: '**[sql] [changed]**'
  id: totrans-4233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**-   [sql] [更改]**'
- en: The [`column()`](../core/sqlelement.html#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column")
    and [`table()`](../core/selectable.html#sqlalchemy.sql.expression.table "sqlalchemy.sql.expression.table")
    constructs are now importable from the “from sqlalchemy” namespace, just like
    every other Core construct.
  id: totrans-4234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`column()`](../core/sqlelement.html#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column")和[`table()`](../core/selectable.html#sqlalchemy.sql.expression.table
    "sqlalchemy.sql.expression.table")构造现在可以从“from sqlalchemy”命名空间导入，就像每个其他核心构造一样。'
- en: '**[sql] [changed]**'
  id: totrans-4235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [changed]**'
- en: The implicit conversion of strings to [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") constructs when passed to most builder methods
    of [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    as well as [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    now emits a warning with just the plain string sent. The textual conversion still
    proceeds normally, however. The only method that accepts a string without a warning
    are the “label reference” methods like order_by(), group_by(); these functions
    will now at compile time attempt to resolve a single string argument to a column
    or label expression present in the selectable; if none is located, the expression
    still renders, but you get the warning again. The rationale here is that the implicit
    conversion from string to text is more unexpected than not these days, and it
    is better that the user send more direction to the Core / ORM when passing a raw
    string as to what direction should be taken. Core/ORM tutorials have been updated
    to go more in depth as to how text is handled.
  id: totrans-4236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当传递给[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")的大多数构建器方法以及[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")时，将字符串隐式转换为[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")构造时，现在会发出警告，只发送纯字符串。文本转换仍然正常进行。唯一不会发出警告的方法是“标签引用”方法，如order_by()，group_by()；这些函数现在在编译时将尝试将单个字符串参数解析为可选择的列或标签表达式；如果找不到任何内容，则表达式仍会呈现，但您会再次收到警告。这里的理由是，从字符串到文本的隐式转换现在比以往更加意外，当用户将原始字符串传递给Core
    / ORM时，最好让用户提供更多方向以确定应采取什么方向。 Core / ORM 教程已更新，以更深入地介绍文本的处理。
- en: See also
  id: totrans-4237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Warnings emitted when coercing full SQL fragments into text()](migration_10.html#migration-2992)'
  id: totrans-4238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[将完整的 SQL 片段强制转换为 text() 时发出的警告](migration_10.html#migration-2992)'
- en: 'References: [#2992](https://www.sqlalchemy.org/trac/ticket/2992)'
  id: totrans-4239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2992](https://www.sqlalchemy.org/trac/ticket/2992)
- en: '**[sql] [bug]**'
  id: totrans-4240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    and other [`SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType") subclasses where direct association of the type
    with a [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    would lead to a hang when events (like create events) were emitted on the [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData").
  id: totrans-4241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")和其他[`SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType")子类中的错误，直接将类型与[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")关联会导致在[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")上发出事件（如创建事件）时挂起。
- en: 'This change is also **backported** to: 0.9.7, 0.8.7'
  id: totrans-4242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.7, 0.8.7
- en: 'References: [#3124](https://www.sqlalchemy.org/trac/ticket/3124)'
  id: totrans-4243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3124](https://www.sqlalchemy.org/trac/ticket/3124)
- en: '**[sql] [bug]**'
  id: totrans-4244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed a bug within the custom operator plus [`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") system, whereby using a [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") in conjunction with variant would fail with
    an MRO error when a comparison operator was used.
  id: totrans-4245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在自定义操作符加法[`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant")系统中的一个错误，当与变体一起使用[`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")时，如果使用比较运算符，则会出现MRO错误。
- en: 'This change is also **backported** to: 0.9.7, 0.8.7'
  id: totrans-4246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.7, 0.8.7
- en: 'References: [#3102](https://www.sqlalchemy.org/trac/ticket/3102)'
  id: totrans-4247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3102](https://www.sqlalchemy.org/trac/ticket/3102)
- en: '**[sql] [bug]**'
  id: totrans-4248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in INSERT..FROM SELECT construct where selecting from a UNION would
    wrap the union in an anonymous (e.g. unlabeled) subquery.
  id: totrans-4249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在INSERT..FROM SELECT结构中的bug，从UNION中选择会将联合包装在一个匿名（例如未标记）子查询中。
- en: 'This change is also **backported** to: 0.9.5, 0.8.7'
  id: totrans-4250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.5, 0.8.7
- en: 'References: [#3044](https://www.sqlalchemy.org/trac/ticket/3044)'
  id: totrans-4251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3044](https://www.sqlalchemy.org/trac/ticket/3044)
- en: '**[sql] [bug]**'
  id: totrans-4252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where [`Table.update()`](../core/metadata.html#sqlalchemy.schema.Table.update
    "sqlalchemy.schema.Table.update") and [`Table.delete()`](../core/metadata.html#sqlalchemy.schema.Table.delete
    "sqlalchemy.schema.Table.delete") would produce an empty WHERE clause when an
    empty [`and_()`](../core/sqlelement.html#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_")
    or [`or_()`](../core/sqlelement.html#sqlalchemy.sql.expression.or_ "sqlalchemy.sql.expression.or_")
    or other blank expression were applied. This is now consistent with that of [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select").
  id: totrans-4253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，[`Table.update()`](../core/metadata.html#sqlalchemy.schema.Table.update
    "sqlalchemy.schema.Table.update")和[`Table.delete()`](../core/metadata.html#sqlalchemy.schema.Table.delete
    "sqlalchemy.schema.Table.delete")在应用空的[`and_()`](../core/sqlelement.html#sqlalchemy.sql.expression.and_
    "sqlalchemy.sql.expression.and_")或[`or_()`](../core/sqlelement.html#sqlalchemy.sql.expression.or_
    "sqlalchemy.sql.expression.or_")或其他空表达式时会产生空的WHERE子句。现在与[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")的行为一致。
- en: 'This change is also **backported** to: 0.9.5, 0.8.7'
  id: totrans-4254
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.5, 0.8.7
- en: 'References: [#3045](https://www.sqlalchemy.org/trac/ticket/3045)'
  id: totrans-4255
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3045](https://www.sqlalchemy.org/trac/ticket/3045)
- en: '**[sql] [bug]**'
  id: totrans-4256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Added the `native_enum` flag to the `__repr__()` output of [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum"), which is mostly important when using it with Alembic
    autogenerate. Pull request courtesy Dimitris Theodorou.
  id: totrans-4257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")的`__repr__()`输出中添加了`native_enum`标志，当与Alembic
    autogenerate一起使用时非常重要。感谢Dimitris Theodorou的拉取请求。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-4258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.9
- en: '**[sql] [bug]**'
  id: totrans-4259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where using a [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") that implemented a type that was also a [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") would fail with Python’s “Cannot create a consistent
    method resolution order (MRO)” error, when any kind of SQL comparison expression
    were used against an object using this type.
  id: totrans-4260
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，使用实现了也是[`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")的类型会在针对使用此类型的对象使用任何类型的SQL比较表达式时失败，Python会出现“无法创建一致的方法解析顺序（MRO）”错误。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-4261
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.9
- en: 'References: [#3278](https://www.sqlalchemy.org/trac/ticket/3278)'
  id: totrans-4262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3278](https://www.sqlalchemy.org/trac/ticket/3278)
- en: '**[sql] [bug]**'
  id: totrans-4263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where the columns from a SELECT embedded in an INSERT, either through
    the values clause or as a “from select”, would pollute the column types used in
    the result set produced by the RETURNING clause when columns from both statements
    shared the same name, leading to potential errors or mis-adaptation when retrieving
    the returning rows.
  id: totrans-4264
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，SELECT嵌入到INSERT中，通过值子句或作为“from select”，当两个语句的列共享相同名称时，会污染由RETURNING子句产生的结果集中使用的列类型，导致在检索返回行时可能出现错误或误适应。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-4265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.9
- en: 'References: [#3248](https://www.sqlalchemy.org/trac/ticket/3248)'
  id: totrans-4266
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3248](https://www.sqlalchemy.org/trac/ticket/3248)
- en: '**[sql] [bug]**'
  id: totrans-4267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where a fair number of SQL elements within the sql package would fail
    to `__repr__()` successfully, due to a missing `description` attribute that would
    then invoke a recursion overflow when an internal AttributeError would then re-invoke
    `__repr__()`.
  id: totrans-4268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，在sql包中的大量SQL元素无法成功执行`__repr__()`，因为缺少一个`description`属性，然后会在内部AttributeError重新调用`__repr__()`时触发递归溢出。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-4269
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.8
- en: 'References: [#3195](https://www.sqlalchemy.org/trac/ticket/3195)'
  id: totrans-4270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3195](https://www.sqlalchemy.org/trac/ticket/3195)
- en: '**[sql] [bug]**'
  id: totrans-4271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: An adjustment to table/index reflection such that if an index reports a column
    that isn’t found to be present in the table, a warning is emitted and the column
    is skipped. This can occur for some special system column situations as has been
    observed with Oracle.
  id: totrans-4272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了表/索引反射，如果索引报告一个在表中找不到的列，将发出警告并跳过该列。这可能发生在一些特殊的系统列情况下，如在Oracle中观察到的情况。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-4273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.8
- en: 'References: [#3180](https://www.sqlalchemy.org/trac/ticket/3180)'
  id: totrans-4274
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3180](https://www.sqlalchemy.org/trac/ticket/3180)
- en: '**[sql] [bug]**'
  id: totrans-4275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in CTE where `literal_binds` compiler argument would not be always
    be correctly propagated when one CTE referred to another aliased CTE in a statement.
  id: totrans-4276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了CTE中的一个bug，即当一个CTE引用另一个别名CTE时，`literal_binds`编译器参数不会始终正确传播的问题。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-4277
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.8
- en: 'References: [#3154](https://www.sqlalchemy.org/trac/ticket/3154)'
  id: totrans-4278
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3154](https://www.sqlalchemy.org/trac/ticket/3154)
- en: '**[sql] [bug]**'
  id: totrans-4279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed 0.9.7 regression caused by [#3067](https://www.sqlalchemy.org/trac/ticket/3067)
    in conjunction with a mis-named unit test such that so-called “schema” types like
    [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean")
    and [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    could no longer be pickled.
  id: totrans-4280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由[#3067](https://www.sqlalchemy.org/trac/ticket/3067)引起的0.9.7回归，与一个命名错误的单元测试一起，导致所谓的“模式”类型如[`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean")和[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum")无法再被pickle。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-4281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.8
- en: 'References: [#3067](https://www.sqlalchemy.org/trac/ticket/3067), [#3144](https://www.sqlalchemy.org/trac/ticket/3144)'
  id: totrans-4282
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3067](https://www.sqlalchemy.org/trac/ticket/3067)，[#3144](https://www.sqlalchemy.org/trac/ticket/3144)
- en: '**[sql] [bug]**'
  id: totrans-4283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fix bug in naming convention feature where using a check constraint convention
    that includes `constraint_name` would then force all [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean") and [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") types to require names as well, as these implicitly create
    a constraint, even if the ultimate target backend were one that does not require
    generation of the constraint such as PostgreSQL. The mechanics of naming conventions
    for these particular constraints has been reorganized such that the naming determination
    is done at DDL compile time, rather than at constraint/table construction time.
  id: totrans-4284
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了命名约定功能中的bug，其中使用包含`constraint_name`的检查约定将强制所有[`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean")和[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum")类型也需要名称，因为这些隐式创建约束，即使最终目标后端不需要生成约束，如PostgreSQL。这些特定约束的命名约定机制已重新组织，使得命名确定在DDL编译时进行，而不是在约束/表构建时进行。
- en: 'This change is also **backported** to: 0.9.7'
  id: totrans-4285
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.7
- en: 'References: [#3067](https://www.sqlalchemy.org/trac/ticket/3067)'
  id: totrans-4286
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3067](https://www.sqlalchemy.org/trac/ticket/3067)
- en: '**[sql] [bug]**'
  id: totrans-4287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in common table expressions whereby positional bound parameters could
    be expressed in the wrong final order when CTEs were nested in certain ways.
  id: totrans-4288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了通用表达式中的一个bug，即当CTE在某些方式中嵌套时，位置绑定参数可能以错误的最终顺序表达的问题。
- en: 'This change is also **backported** to: 0.9.7'
  id: totrans-4289
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.7
- en: 'References: [#3090](https://www.sqlalchemy.org/trac/ticket/3090)'
  id: totrans-4290
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3090](https://www.sqlalchemy.org/trac/ticket/3090)
- en: '**[sql] [bug]**'
  id: totrans-4291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where multi-valued [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") construct would fail to check subsequent values
    entries beyond the first one given for literal SQL expressions.
  id: totrans-4292
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了多值[`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")构造中的bug，使其无法检查除第一个给定的字面SQL表达式值条目之外的后续值条目。
- en: 'This change is also **backported** to: 0.9.7'
  id: totrans-4293
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.7
- en: 'References: [#3069](https://www.sqlalchemy.org/trac/ticket/3069)'
  id: totrans-4294
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3069](https://www.sqlalchemy.org/trac/ticket/3069)
- en: '**[sql] [bug]**'
  id: totrans-4295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Added a “str()” step to the dialect_kwargs iteration for Python version < 2.6.5,
    working around the “no unicode keyword arg” bug as these args are passed along
    as keyword args within some reflection processes.
  id: totrans-4296
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为Python版本< 2.6.5的dialect_kwargs迭代添加了一个“str()”步骤，解决了“无unicode关键字参数”bug，因为这些参数在某些反射过程中作为关键字参数传递。
- en: 'This change is also **backported** to: 0.9.7'
  id: totrans-4297
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.7
- en: 'References: [#3123](https://www.sqlalchemy.org/trac/ticket/3123)'
  id: totrans-4298
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3123](https://www.sqlalchemy.org/trac/ticket/3123)
- en: '**[sql] [bug]**'
  id: totrans-4299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The [`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") method will now accept a type class
    as an argument which is internally converted to an instance, using the same convention
    long established by other constructs such as [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column").
  id: totrans-4300
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") 方法现在将接受类型类作为参数，该参数将被内部转换为一个实例，使用已经被其他构造（如[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")）长期建立的相同约定。'
- en: 'This change is also **backported** to: 0.9.7'
  id: totrans-4301
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还被**回溯**到：0.9.7
- en: 'References: [#3122](https://www.sqlalchemy.org/trac/ticket/3122)'
  id: totrans-4302
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3122](https://www.sqlalchemy.org/trac/ticket/3122)
- en: '**[sql] [bug]**'
  id: totrans-4303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The [`Column.nullable`](../core/metadata.html#sqlalchemy.schema.Column.params.nullable
    "sqlalchemy.schema.Column") flag is implicitly set to `False` when that [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") is referred to in an explicit [`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") for that table. This behavior now matches
    that of when the [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    itself has the [`Column.primary_key`](../core/metadata.html#sqlalchemy.schema.Column.params.primary_key
    "sqlalchemy.schema.Column") flag set to `True`, which is intended to be an exactly
    equivalent case.
  id: totrans-4304
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当该表中的[`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")在显式[`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint")中引用时，[`Column.nullable`](../core/metadata.html#sqlalchemy.schema.Column.params.nullable
    "sqlalchemy.schema.Column")标志被隐式设置为`False`。现在，该行为与[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")本身的[`Column.primary_key`](../core/metadata.html#sqlalchemy.schema.Column.params.primary_key
    "sqlalchemy.schema.Column")标志设置为`True`时相匹配，这被认为是一个完全等效的情况。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-4305
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还被**回溯**到：0.9.5
- en: 'References: [#3023](https://www.sqlalchemy.org/trac/ticket/3023)'
  id: totrans-4306
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3023](https://www.sqlalchemy.org/trac/ticket/3023)
- en: '**[sql] [bug]**'
  id: totrans-4307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where the [`Operators.__and__()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.__and__
    "sqlalchemy.sql.expression.Operators.__and__"), [`Operators.__or__()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.__or__
    "sqlalchemy.sql.expression.Operators.__or__") and [`Operators.__invert__()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.__invert__
    "sqlalchemy.sql.expression.Operators.__invert__") operator overload methods could
    not be overridden within a custom [`Comparator`](../core/type_api.html#sqlalchemy.types.TypeEngine.Comparator
    "sqlalchemy.types.TypeEngine.Comparator") implementation.
  id: totrans-4308
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在自定义[`Comparator`](../core/type_api.html#sqlalchemy.types.TypeEngine.Comparator
    "sqlalchemy.types.TypeEngine.Comparator")实现中无法重写[`Operators.__and__()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.__and__
    "sqlalchemy.sql.expression.Operators.__and__")、[`Operators.__or__()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.__or__
    "sqlalchemy.sql.expression.Operators.__or__")和[`Operators.__invert__()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.__invert__
    "sqlalchemy.sql.expression.Operators.__invert__")运算符重载方法的错误。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-4309
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还被**回溯**到：0.9.5
- en: 'References: [#3012](https://www.sqlalchemy.org/trac/ticket/3012)'
  id: totrans-4310
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3012](https://www.sqlalchemy.org/trac/ticket/3012)
- en: '**[sql] [bug]**'
  id: totrans-4311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in new [`DialectKWArgs.argument_for()`](../core/foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") method where adding an argument
    for a construct not previously included for any special arguments would fail.
  id: totrans-4312
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在新的[`DialectKWArgs.argument_for()`](../core/foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for")方法中的错误，在这种方法中，添加一个对于以前未包含在任何特殊参数中的构造的参数将会失败。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-4313
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还被**回溯**到：0.9.5
- en: 'References: [#3024](https://www.sqlalchemy.org/trac/ticket/3024)'
  id: totrans-4314
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3024](https://www.sqlalchemy.org/trac/ticket/3024)
- en: '**[sql] [bug]**'
  id: totrans-4315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed regression introduced in 0.9 where new “ORDER BY <labelname>” feature
    from [#1068](https://www.sqlalchemy.org/trac/ticket/1068) would not apply quoting
    rules to the label name as rendered in the ORDER BY.
  id: totrans-4316
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 0.9 版本中引入的回归，即从[#1068](https://www.sqlalchemy.org/trac/ticket/1068)中的新“ORDER
    BY <labelname>”功能不会将标签名称渲染到ORDER BY中应用引用规则的情况。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-4317
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还被**回溯**到：0.9.5
- en: 'References: [#1068](https://www.sqlalchemy.org/trac/ticket/1068), [#3020](https://www.sqlalchemy.org/trac/ticket/3020)'
  id: totrans-4318
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1068](https://www.sqlalchemy.org/trac/ticket/1068), [#3020](https://www.sqlalchemy.org/trac/ticket/3020)
- en: '**[sql] [bug]**'
  id: totrans-4319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Restored the import for [`Function`](../core/functions.html#sqlalchemy.sql.functions.Function
    "sqlalchemy.sql.functions.Function") to the `sqlalchemy.sql.expression` import
    namespace, which was removed at the beginning of 0.9.
  id: totrans-4320
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Function`](../core/functions.html#sqlalchemy.sql.functions.Function "sqlalchemy.sql.functions.Function")
    的导入已经恢复到了 `sqlalchemy.sql.expression` 导入命名空间中，这是在 0.9 版本初期移除的。'
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-4321
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被 **回溯** 到了：0.9.5
- en: '**[sql] [bug]**'
  id: totrans-4322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The multi-values version of [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") has been repaired to work more usefully
    with tables that have Python- side default values and/or functions, as well as
    server-side defaults. The feature will now work with a dialect that uses “positional”
    parameters; a Python callable will also be invoked individually for each row just
    as is the case with an “executemany” style invocation; a server- side default
    column will no longer implicitly receive the value explicitly specified for the
    first row, instead refusing to invoke without an explicit value.
  id: totrans-4323
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") 的多值版本已修复，可以更有用地与具有 Python 端默认值和/或函数以及服务器端默认值的表一起使用。该功能现在可以在使用“位置参数”的方言中工作；一个
    Python 可调用对象也将与“executemany”风格的调用一样，为每一行单独调用；服务器端默认列将不再隐式地接收显式指定给第一行的值，而是拒绝不带显式值的调用。'
- en: See also
  id: totrans-4324
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另见
- en: '[Python-side defaults invoked for each row individually when using a multivalued
    insert](migration_10.html#bug-3288)'
  id: totrans-4325
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用多值插入时，每行都会单独调用 Python 端默认值（Python-side defaults）。
- en: 'References: [#3288](https://www.sqlalchemy.org/trac/ticket/3288)'
  id: totrans-4326
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3288](https://www.sqlalchemy.org/trac/ticket/3288)
- en: '**[sql] [bug]**'
  id: totrans-4327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in [`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata") method where the [`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") associated with a [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean") or [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") type object would be doubled in the target table. The
    copy process now tracks the production of this constraint object as local to a
    type object.
  id: totrans-4328
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata") 方法中的错误，其中与 [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean") 或 [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") 类型对象相关联的 [`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") 将在目标表中重复。现在的复制过程将这个约束对象的生成跟踪为局部于类型对象。
- en: 'References: [#3260](https://www.sqlalchemy.org/trac/ticket/3260)'
  id: totrans-4329
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3260](https://www.sqlalchemy.org/trac/ticket/3260)
- en: '**[sql] [bug]**'
  id: totrans-4330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The behavioral contract of the [`ForeignKeyConstraint.columns`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint.columns
    "sqlalchemy.schema.ForeignKeyConstraint.columns") collection has been made consistent;
    this attribute is now a [`ColumnCollection`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") like that of all other constraints
    and is initialized at the point when the constraint is associated with a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table").
  id: totrans-4331
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`ForeignKeyConstraint.columns`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint.columns
    "sqlalchemy.schema.ForeignKeyConstraint.columns") 集合的行为契约已经一致化；此属性现在像所有其他约束一样是一个
    [`ColumnCollection`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")，并在约束与 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 关联时初始化。'
- en: See also
  id: totrans-4332
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另见
- en: '[ForeignKeyConstraint.columns is now a ColumnCollection](migration_10.html#change-3243)'
  id: totrans-4333
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`ForeignKeyConstraint.columns`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint.columns
    "sqlalchemy.schema.ForeignKeyConstraint.columns") 现在是一个 [`ColumnCollection`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")。'
- en: 'References: [#3243](https://www.sqlalchemy.org/trac/ticket/3243)'
  id: totrans-4334
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3243](https://www.sqlalchemy.org/trac/ticket/3243)
- en: '**[sql] [bug]**'
  id: totrans-4335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The [`Column.key`](../core/metadata.html#sqlalchemy.schema.Column.key "sqlalchemy.schema.Column.key")
    attribute is now used as the source of anonymous bound parameter names within
    expressions, to match the existing use of this value as the key when rendered
    in an INSERT or UPDATE statement. This allows [`Column.key`](../core/metadata.html#sqlalchemy.schema.Column.key
    "sqlalchemy.schema.Column.key") to be used as a “substitute” string to work around
    a difficult column name that doesn’t translate well into a bound parameter name.
    Note that the paramstyle is configurable on [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") in any case, and most DBAPIs today support a named
    and positional style.
  id: totrans-4336
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Column.key`](../core/metadata.html#sqlalchemy.schema.Column.key "sqlalchemy.schema.Column.key")
    属性现在用作表达式中匿名绑定参数名称的来源，以匹配此值在 INSERT 或 UPDATE 语句中呈现时作为键的现有使用情况。这允许 [`Column.key`](../core/metadata.html#sqlalchemy.schema.Column.key
    "sqlalchemy.schema.Column.key") 用作“替代”字符串，以解决一个不太适合作为绑定参数名称的困难列名。请注意，无论如何，`create_engine()`
    上的 paramstyle 都是可配置的，并且今天的大多数 DBAPI 都支持命名和位置样式。'
- en: 'References: [#3245](https://www.sqlalchemy.org/trac/ticket/3245)'
  id: totrans-4337
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3245](https://www.sqlalchemy.org/trac/ticket/3245)
- en: '**[sql] [bug]**'
  id: totrans-4338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed the name of the [`PoolEvents.reset.dbapi_connection`](../core/events.html#sqlalchemy.events.PoolEvents.reset.params.dbapi_connection
    "sqlalchemy.events.PoolEvents.reset") parameter as passed to this event; in particular
    this affects usage of the “named” argument style for this event. Pull request
    courtesy Jason Goldberger.
  id: totrans-4339
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`PoolEvents.reset.dbapi_connection`](../core/events.html#sqlalchemy.events.PoolEvents.reset.params.dbapi_connection
    "sqlalchemy.events.PoolEvents.reset") 参数在传递给此事件时的名称；特别是这会影响到此事件的“命名”参数样式的使用。感谢
    Jason Goldberger 的 Pull 请求。
- en: '**[sql] [bug]**'
  id: totrans-4340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Reversing a change that was made in 0.9, the “singleton” nature of the “constants”
    [`null()`](../core/sqlelement.html#sqlalchemy.sql.expression.null "sqlalchemy.sql.expression.null"),
    [`true()`](../core/sqlelement.html#sqlalchemy.sql.expression.true "sqlalchemy.sql.expression.true"),
    and [`false()`](../core/sqlelement.html#sqlalchemy.sql.expression.false "sqlalchemy.sql.expression.false")
    has been reverted. These functions returning a “singleton” object had the effect
    that different instances would be treated as the same regardless of lexical use,
    which in particular would impact the rendering of the columns clause of a SELECT
    statement.
  id: totrans-4341
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 撤销了在 0.9 中进行的更改，即“常量”[`null()`](../core/sqlelement.html#sqlalchemy.sql.expression.null
    "sqlalchemy.sql.expression.null")、[`true()`](../core/sqlelement.html#sqlalchemy.sql.expression.true
    "sqlalchemy.sql.expression.true") 和 [`false()`](../core/sqlelement.html#sqlalchemy.sql.expression.false
    "sqlalchemy.sql.expression.false") 的“单例”性质已经恢复。这些返回“单例”对象的函数会导致不同的实例无论在语法上如何使用都会被视为相同，特别是会影响到
    SELECT 语句的列子句的渲染。
- en: See also
  id: totrans-4342
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另见
- en: '[null(), false() and true() constants are no longer singletons](migration_10.html#bug-3170)'
  id: totrans-4343
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`null()`、`false()` 和 `true()` 常量不再是单例](migration_10.html#bug-3170)'
- en: 'References: [#3170](https://www.sqlalchemy.org/trac/ticket/3170)'
  id: totrans-4344
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3170](https://www.sqlalchemy.org/trac/ticket/3170)
- en: '**[sql] [bug] [engine]**'
  id: totrans-4345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [engine]**'
- en: Fixed bug where a “branched” connection, that is the kind you get when you call
    `Connection.connect()`, would not share invalidation status with the parent. The
    architecture of branching has been tweaked a bit so that the branched connection
    defers to the parent for all invalidation status and operations.
  id: totrans-4346
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即“分支”连接（即调用 `Connection.connect()` 时获得的连接）未与父连接共享失效状态的问题。分支架构已经进行了微调，使得分支连接在所有失效状态和操作上都
    defer 到父连接。
- en: 'References: [#3215](https://www.sqlalchemy.org/trac/ticket/3215)'
  id: totrans-4347
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3215](https://www.sqlalchemy.org/trac/ticket/3215)
- en: '**[sql] [bug] [engine]**'
  id: totrans-4348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [engine]**'
- en: Fixed bug where a “branched” connection, that is the kind you get when you call
    `Connection.connect()`, would not share transaction status with the parent. The
    architecture of branching has been tweaked a bit so that the branched connection
    defers to the parent for all transactional status and operations.
  id: totrans-4349
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即“分支”连接（即调用 `Connection.connect()` 时获得的连接）未与父连接共享事务状态的问题。分支架构已经进行了微调，使得分支连接在所有事务状态和操作上都
    defer 到父连接。
- en: 'References: [#3190](https://www.sqlalchemy.org/trac/ticket/3190)'
  id: totrans-4350
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3190](https://www.sqlalchemy.org/trac/ticket/3190)
- en: '**[sql] [bug]**'
  id: totrans-4351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Using [`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select") now implies `inline=True` on [`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert"). This helps to fix a bug where an INSERT…FROM
    SELECT construct would inadvertently be compiled as “implicit returning” on supporting
    backends, which would cause breakage in the case of an INSERT that inserts zero
    rows (as implicit returning expects a row), as well as arbitrary return data in
    the case of an INSERT that inserts multiple rows (e.g. only the first row of many).
    A similar change is also applied to an INSERT..VALUES with multiple parameter
    sets; implicit RETURNING will no longer emit for this statement either. As both
    of these constructs deal with variable numbers of rows, the `ResultProxy.inserted_primary_key`
    accessor does not apply. Previously, there was a documentation note that one may
    prefer `inline=True` with INSERT..FROM SELECT as some databases don’t support
    returning and therefore can’t do “implicit” returning, but there’s no reason an
    INSERT…FROM SELECT needs implicit returning in any case. Regular explicit [`Insert.returning()`](../core/dml.html#sqlalchemy.sql.expression.Insert.returning
    "sqlalchemy.sql.expression.Insert.returning") should be used to return variable
    numbers of result rows if inserted data is needed.
  id: totrans-4352
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在在使用[`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select")时，[`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert")会隐含`inline=True`。这有助于修复一个bug，即在支持的后端上，INSERT…FROM
    SELECT结构会被错误地编译为“隐式返回”，这会导致在插入零行的情况下出现故障（因为隐式返回期望一行），以及在插入多行的情况下出现任意返回数据（例如，多行中的第一行）。对于具有多个参数集的INSERT..VALUES，也应用了类似的更改；隐式RETURNING也不再为此语句发出。由于这两个结构处理可变数量的行，因此`ResultProxy.inserted_primary_key`访问器不适用。以前有一个文档注释，指出在INSERT..FROM
    SELECT中可能更喜欢`inline=True`，因为一些数据库不支持返回，因此无法进行“隐式”返回，但无论如何，INSERT…FROM SELECT都不需要隐式返回。如果需要返回插入的数据的可变数量的结果行，则应使用常规的显式[`Insert.returning()`](../core/dml.html#sqlalchemy.sql.expression.Insert.returning
    "sqlalchemy.sql.expression.Insert.returning")。
- en: 'References: [#3169](https://www.sqlalchemy.org/trac/ticket/3169)'
  id: totrans-4353
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3169](https://www.sqlalchemy.org/trac/ticket/3169)
- en: '**[sql] [enhancement]**'
  id: totrans-4354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [增强]**'
- en: Custom dialects that implement [`GenericTypeCompiler`](../core/internals.html#sqlalchemy.sql.compiler.GenericTypeCompiler
    "sqlalchemy.sql.compiler.GenericTypeCompiler") can now be constructed such that
    the visit methods receive an indication of the owning expression object, if any.
    Any visit method that accepts keyword arguments (e.g. `**kw`) will in most cases
    receive a keyword argument `type_expression`, referring to the expression object
    that the type is contained within. For columns in DDL, the dialect’s compiler
    class may need to alter its `get_column_specification()` method to support this
    as well. The `UserDefinedType.get_col_spec()` method will also receive `type_expression`
    if it provides `**kw` in its argument signature.
  id: totrans-4355
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '现在可以构建实现[`GenericTypeCompiler`](../core/internals.html#sqlalchemy.sql.compiler.GenericTypeCompiler
    "sqlalchemy.sql.compiler.GenericTypeCompiler")的自定义方言，以便访问方法接收所属表达式对象的指示，如果有的话。大多数情况下接受关键字参数（例如，`**kw`）的访问方法将接收一个关键字参数`type_expression`，指的是类型所包含的表达式对象。对于DDL中的列，方言的编译器类可能还需要修改其`get_column_specification()`方法以支持此功能。如果`UserDefinedType.get_col_spec()`在其参数签名中提供了`**kw`，则还将接收`type_expression`。 '
- en: 'References: [#3074](https://www.sqlalchemy.org/trac/ticket/3074)'
  id: totrans-4356
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3074](https://www.sqlalchemy.org/trac/ticket/3074)
- en: schema
  id: totrans-4357
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: '**[schema] [feature]**'
  id: totrans-4358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [特性]**'
- en: The DDL generation system of [`MetaData.create_all()`](../core/metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") and [`MetaData.drop_all()`](../core/metadata.html#sqlalchemy.schema.MetaData.drop_all
    "sqlalchemy.schema.MetaData.drop_all") has been enhanced to in most cases automatically
    handle the case of mutually dependent foreign key constraints; the need for the
    [`ForeignKeyConstraint.use_alter`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint.params.use_alter
    "sqlalchemy.schema.ForeignKeyConstraint") flag is greatly reduced. The system
    also works for constraints which aren’t given a name up front; only in the case
    of DROP is a name required for at least one of the constraints involved in the
    cycle.
  id: totrans-4359
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`MetaData.create_all()`](../core/metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all")和[`MetaData.drop_all()`](../core/metadata.html#sqlalchemy.schema.MetaData.drop_all
    "sqlalchemy.schema.MetaData.drop_all")的DDL生成系统已经增强，大多数情况下可以自动处理相互依赖的外键约束的情况；对于[`ForeignKeyConstraint.use_alter`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint.params.use_alter
    "sqlalchemy.schema.ForeignKeyConstraint")标志的需求大大减少。该系统还适用于没有提前命名的约束；只有在DROP的情况下，循环中涉及的约束至少需要一个名称。'
- en: See also
  id: totrans-4360
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[The use_alter flag on ForeignKeyConstraint is (usually) no longer needed](migration_10.html#feature-3282)'
  id: totrans-4361
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[ForeignKeyConstraint上的use_alter标志（通常）不再需要](migration_10.html#feature-3282)'
- en: 'References: [#3282](https://www.sqlalchemy.org/trac/ticket/3282)'
  id: totrans-4362
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3282](https://www.sqlalchemy.org/trac/ticket/3282)
- en: '**[schema] [feature]**'
  id: totrans-4363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [功能]**'
- en: Added a new accessor [`Table.foreign_key_constraints`](../core/metadata.html#sqlalchemy.schema.Table.foreign_key_constraints
    "sqlalchemy.schema.Table.foreign_key_constraints") to complement the [`Table.foreign_keys`](../core/metadata.html#sqlalchemy.schema.Table.foreign_keys
    "sqlalchemy.schema.Table.foreign_keys") collection, as well as [`ForeignKeyConstraint.referred_table`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint.referred_table
    "sqlalchemy.schema.ForeignKeyConstraint.referred_table").
  id: totrans-4364
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的访问器[`Table.foreign_key_constraints`](../core/metadata.html#sqlalchemy.schema.Table.foreign_key_constraints
    "sqlalchemy.schema.Table.foreign_key_constraints")来补充[`Table.foreign_keys`](../core/metadata.html#sqlalchemy.schema.Table.foreign_keys
    "sqlalchemy.schema.Table.foreign_keys")集合，以及[`ForeignKeyConstraint.referred_table`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint.referred_table
    "sqlalchemy.schema.ForeignKeyConstraint.referred_table")。
- en: '**[schema] [bug]**'
  id: totrans-4365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [错误]**'
- en: The [`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") construct now supports naming conventions
    that include the token `%(column_0_name)s`; the constraint expression is scanned
    for columns. Additionally, naming conventions for check constraints that don’t
    include the `%(constraint_name)s` token will now work for [`SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType")- generated constraints, such as those of [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean") and [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum"); this stopped working in 0.9.7 due to [#3067](https://www.sqlalchemy.org/trac/ticket/3067).
  id: totrans-4366
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint")构造现在支持包含`%(column_0_name)s`标记的命名约定；约束表达式会扫描列。此外，不包含`%(constraint_name)s`标记的检查约束的命名约定现在也适用于由[`SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType")生成的约束，例如[`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean")和[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum")的约束；这在0.9.7中停止工作是因为[#3067](https://www.sqlalchemy.org/trac/ticket/3067)。'
- en: See also
  id: totrans-4367
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[Naming CHECK Constraints](../core/constraints.html#naming-check-constraints)'
  id: totrans-4368
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[命名CHECK约束](../core/constraints.html#naming-check-constraints)'
- en: '[Configuring Naming for Boolean, Enum, and other schema types](../core/constraints.html#naming-schematypes)'
  id: totrans-4369
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[为布尔值、枚举和其他模式类型配置命名](../core/constraints.html#naming-schematypes)'
- en: 'References: [#3067](https://www.sqlalchemy.org/trac/ticket/3067), [#3299](https://www.sqlalchemy.org/trac/ticket/3299)'
  id: totrans-4370
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3067](https://www.sqlalchemy.org/trac/ticket/3067), [#3299](https://www.sqlalchemy.org/trac/ticket/3299)
- en: postgresql
  id: totrans-4371
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-4372
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [功能]**'
- en: Added support for the `CONCURRENTLY` keyword with PostgreSQL indexes, established
    using `postgresql_concurrently`. Pull request courtesy Iuri de Silvio.
  id: totrans-4373
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对使用`postgresql_concurrently`建立的PostgreSQL索引的`CONCURRENTLY`关键字的支持。感谢Iuri de
    Silvio的拉取请求。
- en: See also
  id: totrans-4374
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[Indexes with CONCURRENTLY](../dialects/postgresql.html#postgresql-index-concurrently)'
  id: totrans-4375
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[使用CONCURRENTLY的索引](../dialects/postgresql.html#postgresql-index-concurrently)'
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-4376
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**至：0.9.9
- en: '**[postgresql] [feature] [pg8000]**'
  id: totrans-4377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [功能] [pg8000]**'
- en: Support is added for “sane multi row count” with the pg8000 driver, which applies
    mostly to when using versioning with the ORM. The feature is version-detected
    based on pg8000 1.9.14 or greater in use. Pull request courtesy Tony Locke.
  id: totrans-4378
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用pg8000驱动程序添加了“sane multi row count”支持，主要适用于在ORM中使用版本控制时。该功能基于使用pg8000 1.9.14或更高版本进行版本检测。Pull
    request 由Tony Locke提供。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-4379
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还**回溯**到：0.9.8
- en: '**[postgresql] [feature]**'
  id: totrans-4380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added kw argument `postgresql_regconfig` to the [`ColumnOperators.match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") operator, allows the “reg config”
    argument to be specified to the `to_tsquery()` function emitted. Pull request
    courtesy Jonathan Vanasco.
  id: totrans-4381
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为[`ColumnOperators.match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match")操作符添加了kw参数`postgresql_regconfig`，允许指定“reg
    config”参数以发出`to_tsquery()`函数。Pull request 由Jonathan Vanasco提供。
- en: 'This change is also **backported** to: 0.9.7'
  id: totrans-4382
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还**回溯**到：0.9.7
- en: 'References: [#3078](https://www.sqlalchemy.org/trac/ticket/3078)'
  id: totrans-4383
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3078](https://www.sqlalchemy.org/trac/ticket/3078)
- en: '**[postgresql] [feature]**'
  id: totrans-4384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added support for PostgreSQL JSONB via [`JSONB`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB
    "sqlalchemy.dialects.postgresql.JSONB"). Pull request courtesy Damian Dimmich.
  id: totrans-4385
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过[`JSONB`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB
    "sqlalchemy.dialects.postgresql.JSONB")添加对PostgreSQL JSONB的支持。Pull request 由Damian
    Dimmich提供。
- en: 'This change is also **backported** to: 0.9.7'
  id: totrans-4386
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还**回溯**到：0.9.7
- en: '**[postgresql] [feature]**'
  id: totrans-4387
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added support for AUTOCOMMIT isolation level when using the pg8000 DBAPI. Pull
    request courtesy Tony Locke.
  id: totrans-4388
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用pg8000 DBAPI时，添加了对AUTOCOMMIT隔离级别的支持。Pull request 由Tony Locke提供。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-4389
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还**回溯**到：0.9.5
- en: '**[postgresql] [feature]**'
  id: totrans-4390
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added a new flag [`ARRAY.zero_indexes`](../core/type_basics.html#sqlalchemy.types.ARRAY.params.zero_indexes
    "sqlalchemy.types.ARRAY") to the PostgreSQL [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") type. When set to `True`, a value of one will be added
    to all array index values before passing to the database, allowing better interoperability
    between Python style zero-based indexes and PostgreSQL one-based indexes. Pull
    request courtesy Alexey Terentev.
  id: totrans-4391
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为PostgreSQL [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")类型添加了一个新标志[`ARRAY.zero_indexes`](../core/type_basics.html#sqlalchemy.types.ARRAY.params.zero_indexes
    "sqlalchemy.types.ARRAY")。当设置为`True`时，将在传递到数据库之前将所有数组索引值加一，从而允许Python风格的零基索引与PostgreSQL基索引之间更好地互操作。Pull
    request 由Alexey Terentev提供。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-4392
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还**回溯**到：0.9.5
- en: 'References: [#2785](https://www.sqlalchemy.org/trac/ticket/2785)'
  id: totrans-4393
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2785](https://www.sqlalchemy.org/trac/ticket/2785)
- en: '**[postgresql] [feature]**'
  id: totrans-4394
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: The PG8000 dialect now supports the [`create_engine.encoding`](../core/engines.html#sqlalchemy.create_engine.params.encoding
    "sqlalchemy.create_engine") parameter, by setting up the client encoding on the
    connection which is then intercepted by pg8000\. Pull request courtesy Tony Locke.
  id: totrans-4395
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: PG8000方言现在支持[`create_engine.encoding`](../core/engines.html#sqlalchemy.create_engine.params.encoding
    "sqlalchemy.create_engine")参数，通过在连接上设置客户端编码，然后被pg8000拦截。Pull request 由Tony Locke提供。
- en: '**[postgresql] [feature]**'
  id: totrans-4396
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added support for PG8000’s native JSONB feature. Pull request courtesy Tony
    Locke.
  id: totrans-4397
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对PG8000的原生JSONB功能的支持。Pull request 由Tony Locke提供。
- en: '**[postgresql] [feature] [pypy]**'
  id: totrans-4398
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature] [pypy]**'
- en: Added support for the psycopg2cffi DBAPI on pypy. Pull request courtesy shauns.
  id: totrans-4399
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对pypy上使用psycopg2cffi DBAPI的支持。Pull request 由shauns提供。
- en: See also
  id: totrans-4400
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`sqlalchemy.dialects.postgresql.psycopg2cffi`](../dialects/postgresql.html#module-sqlalchemy.dialects.postgresql.psycopg2cffi
    "sqlalchemy.dialects.postgresql.psycopg2cffi")'
  id: totrans-4401
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`sqlalchemy.dialects.postgresql.psycopg2cffi`](../dialects/postgresql.html#module-sqlalchemy.dialects.postgresql.psycopg2cffi
    "sqlalchemy.dialects.postgresql.psycopg2cffi")'
- en: 'References: [#3052](https://www.sqlalchemy.org/trac/ticket/3052)'
  id: totrans-4402
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3052](https://www.sqlalchemy.org/trac/ticket/3052)
- en: '**[postgresql] [feature]**'
  id: totrans-4403
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added support for the FILTER keyword as applied to aggregate functions, supported
    by PostgreSQL 9.4\. Pull request courtesy Ilja Everilä.
  id: totrans-4404
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加对聚合函数应用的FILTER关键字的支持，由PostgreSQL 9.4支持。Pull request 由Ilja Everilä提供。
- en: See also
  id: totrans-4405
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[PostgreSQL FILTER keyword](migration_10.html#feature-gh134)'
  id: totrans-4406
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[PostgreSQL FILTER 关键字](migration_10.html#feature-gh134)'
- en: '**[postgresql] [feature]**'
  id: totrans-4407
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Support has been added for reflection of materialized views and foreign tables,
    as well as support for materialized views within [`Inspector.get_view_names()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_view_names
    "sqlalchemy.engine.reflection.Inspector.get_view_names"), and a new method [`PGInspector.get_foreign_table_names()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.base.PGInspector.get_foreign_table_names
    "sqlalchemy.dialects.postgresql.base.PGInspector.get_foreign_table_names") available
    on the PostgreSQL version of [`Inspector`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector"). Pull request courtesy Rodrigo Menezes.
  id: totrans-4408
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已添加对物化视图和外部表的反射支持，以及对[`Inspector.get_view_names()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_view_names
    "sqlalchemy.engine.reflection.Inspector.get_view_names")中的物化视图的支持，并在 PostgreSQL
    版本的 [`Inspector`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector") 上提供了一个新方法 [`PGInspector.get_foreign_table_names()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.base.PGInspector.get_foreign_table_names
    "sqlalchemy.dialects.postgresql.base.PGInspector.get_foreign_table_names")。感谢
    Rodrigo Menezes 提交的拉取请求。
- en: See also
  id: totrans-4409
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[PostgreSQL Dialect reflects Materialized Views, Foreign Tables](migration_10.html#feature-2891)'
  id: totrans-4410
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[PostgreSQL 方言反映物化视图、外部表](migration_10.html#feature-2891)'
- en: 'References: [#2891](https://www.sqlalchemy.org/trac/ticket/2891)'
  id: totrans-4411
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2891](https://www.sqlalchemy.org/trac/ticket/2891)
- en: '**[postgresql] [feature]**'
  id: totrans-4412
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added support for PG table options TABLESPACE, ON COMMIT, WITH(OUT) OIDS, and
    INHERITS, when rendering DDL via the [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") construct. Pull request courtesy malikdiarra.
  id: totrans-4413
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在通过 [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    构造渲染 DDL 时，已添加对 PG 表选项 TABLESPACE、ON COMMIT、WITH(OUT) OIDS 和 INHERITS 的支持。感谢 malikdiarra
    提交的拉取请求。
- en: See also
  id: totrans-4414
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[PostgreSQL Table Options](../dialects/postgresql.html#postgresql-table-options)'
  id: totrans-4415
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[PostgreSQL 表选项](../dialects/postgresql.html#postgresql-table-options)'
- en: 'References: [#2051](https://www.sqlalchemy.org/trac/ticket/2051)'
  id: totrans-4416
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2051](https://www.sqlalchemy.org/trac/ticket/2051)
- en: '**[postgresql] [feature]**'
  id: totrans-4417
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added new method [`PGInspector.get_enums()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.base.PGInspector.get_enums
    "sqlalchemy.dialects.postgresql.base.PGInspector.get_enums"), when using the inspector
    for PostgreSQL will provide a list of ENUM types. Pull request courtesy Ilya Pekelny.
  id: totrans-4418
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新增了[`PGInspector.get_enums()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.base.PGInspector.get_enums
    "sqlalchemy.dialects.postgresql.base.PGInspector.get_enums")方法，当在 PostgreSQL 中使用
    inspector 时，将提供 ENUM 类型的列表。感谢 Ilya Pekelny 提交的拉取请求。
- en: '**[postgresql] [bug]**'
  id: totrans-4419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added the `hashable=False` flag to the PG [`HSTORE`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.HSTORE
    "sqlalchemy.dialects.postgresql.HSTORE") type, which is needed to allow the ORM
    to skip over trying to “hash” an ORM-mapped HSTORE column when requesting it in
    a mixed column/entity list. Patch courtesy Gunnlaugur Þór Briem.
  id: totrans-4420
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 PG [`HSTORE`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.HSTORE
    "sqlalchemy.dialects.postgresql.HSTORE") 类型添加了 `hashable=False` 标志，这是为了允许 ORM
    在请求混合列/实体列表中的 ORM 映射的 HSTORE 列时跳过尝试“哈希”它。感谢 Gunnlaugur Þór Briem 提交的补丁。
- en: 'This change is also **backported** to: 0.9.5, 0.8.7'
  id: totrans-4421
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.9.5, 0.8.7
- en: 'References: [#3053](https://www.sqlalchemy.org/trac/ticket/3053)'
  id: totrans-4422
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3053](https://www.sqlalchemy.org/trac/ticket/3053)
- en: '**[postgresql] [bug]**'
  id: totrans-4423
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added a new “disconnect” message “connection has been closed unexpectedly”.
    This appears to be related to newer versions of SSL. Pull request courtesy Antti
    Haapala.
  id: totrans-4424
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新增了一个新的“断开连接”消息“连接意外关闭”。这似乎与较新版本的 SSL 有关。感谢 Antti Haapala 提交的拉取请求。
- en: 'This change is also **backported** to: 0.9.5, 0.8.7'
  id: totrans-4425
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.9.5, 0.8.7
- en: '**[postgresql] [bug]**'
  id: totrans-4426
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Repaired support for PostgreSQL UUID types in conjunction with the ARRAY type
    when using psycopg2\. The psycopg2 dialect now employs use of the psycopg2.extras.register_uuid()
    hook so that UUID values are always passed to/from the DBAPI as UUID() objects.
    The [`UUID.as_uuid`](../core/type_basics.html#sqlalchemy.types.UUID.params.as_uuid
    "sqlalchemy.types.UUID") flag is still honored, except with psycopg2 we need to
    convert returned UUID objects back into strings when this is disabled.
  id: totrans-4427
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用 psycopg2 时与 ARRAY 类型一起支持 PostgreSQL UUID 类型的问题。现在 psycopg2 方言现在使用 psycopg2.extras.register_uuid()
    钩子，以便始终将 UUID 值传递到/从 DBAPI 作为 UUID() 对象。尽管仍然遵守 [`UUID.as_uuid`](../core/type_basics.html#sqlalchemy.types.UUID.params.as_uuid
    "sqlalchemy.types.UUID") 标志，但在禁用时，我们需要将返回的 UUID 对象转换回字符串。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-4428
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.9.9
- en: 'References: [#2940](https://www.sqlalchemy.org/trac/ticket/2940)'
  id: totrans-4429
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2940](https://www.sqlalchemy.org/trac/ticket/2940)
- en: '**[postgresql] [bug]**'
  id: totrans-4430
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added support for the `postgresql.JSONB` datatype when using psycopg2 2.5.4
    or greater, which features native conversion of JSONB data so that SQLAlchemy’s
    converters must be disabled; additionally, the newly added psycopg2 extension
    `extras.register_default_jsonb` is used to establish a JSON deserializer passed
    to the dialect via the `json_deserializer` argument. Also repaired the PostgreSQL
    integration tests which weren’t actually round-tripping the JSONB type as opposed
    to the JSON type. Pull request courtesy Mateusz Susik.
  id: totrans-4431
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用 psycopg2 2.5.4 或更高版本时，添加了对 `postgresql.JSONB` 数据类型的支持，该版本具有 JSONB 数据的本机转换，因此必须禁用
    SQLAlchemy 的转换器；此外，还使用了新添加的 psycopg2 扩展 `extras.register_default_jsonb` 来建立通过
    `json_deserializer` 参数传递给方言的 JSON 反序列化器。还修复了 PostgreSQL 集成测试，这些测试实际上并没有循环传输 JSONB
    类型，而不是 JSON 类型。拉取请求由 Mateusz Susik 提供。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-4432
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.9
- en: '**[postgresql] [bug]**'
  id: totrans-4433
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Repaired the use of the “array_oid” flag when registering the HSTORE type with
    older psycopg2 versions < 2.4.3, which does not support this flag, as well as
    use of the native json serializer hook “register_default_json” with user-defined
    `json_deserializer` on psycopg2 versions < 2.5, which does not include native
    json.
  id: totrans-4434
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用旧版本 psycopg2 < 2.4.3 时注册 HSTORE 类型时使用 “array_oid” 标志的问题，该版本不支持此标志，以及在
    psycopg2 版本 < 2.5 上使用本机 json 序列化器钩子 “register_default_json” 与用户定义的 `json_deserializer`
    一起使用，该版本不包括本机 json。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-4435
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.9
- en: '**[postgresql] [bug]**'
  id: totrans-4436
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug where PostgreSQL dialect would fail to render an expression in an
    [`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    that did not correspond directly to a table-bound column; typically when a [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct was one of the expressions within
    the index; or could misinterpret the list of expressions if one or more of them
    were such an expression.
  id: totrans-4437
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 PostgreSQL 方言无法渲染在 [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") 中的表绑定列之外的表达式的 bug；通常当 [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") 构造是索引中的表达式之一时；或者如果其中一个或多个是这样的表达式，则可能会误解表达式列表。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-4438
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.9
- en: 'References: [#3174](https://www.sqlalchemy.org/trac/ticket/3174)'
  id: totrans-4439
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3174](https://www.sqlalchemy.org/trac/ticket/3174)
- en: '**[postgresql] [bug]**'
  id: totrans-4440
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: 'A revisit to this issue first patched in 0.9.5, apparently psycopg2’s `.closed`
    accessor is not as reliable as we assumed, so we have added an explicit check
    for the exception messages “SSL SYSCALL error: Bad file descriptor” and “SSL SYSCALL
    error: EOF detected” when detecting an is-disconnect scenario. We will continue
    to consult psycopg2’s connection.closed as a first check.'
  id: totrans-4441
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '重新审视了首次在 0.9.5 中修补的问题，显然 psycopg2 的 `.closed` 访问器并不像我们假设的那样可靠，因此我们已经添加了一个明确检查异常消息“SSL
    SYSCALL error: Bad file descriptor”和“SSL SYSCALL error: EOF detected”以检测断开连接的情况。我们将继续将
    psycopg2 的 connection.closed 作为首要检查。'
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-4442
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.8
- en: 'References: [#3021](https://www.sqlalchemy.org/trac/ticket/3021)'
  id: totrans-4443
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3021](https://www.sqlalchemy.org/trac/ticket/3021)
- en: '**[postgresql] [bug]**'
  id: totrans-4444
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: 'Fixed bug where PostgreSQL JSON type was not able to persist or otherwise render
    a SQL NULL column value, rather than a JSON-encoded `''null''`. To support this
    case, changes are as follows:'
  id: totrans-4445
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 PostgreSQL JSON 类型无法持久化或以 JSON 编码的 `'null'` 而不是 SQL NULL 列值进行渲染的 bug。为支持此情况，更改如下：
- en: The value [`null()`](../core/sqlelement.html#sqlalchemy.sql.expression.null
    "sqlalchemy.sql.expression.null") can now be specified, which will always result
    in a NULL value resulting in the statement.
  id: totrans-4446
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以指定值 [`null()`](../core/sqlelement.html#sqlalchemy.sql.expression.null "sqlalchemy.sql.expression.null")，这将始终导致语句中的
    NULL 值。
- en: A new parameter [`JSON.none_as_null`](../core/type_basics.html#sqlalchemy.types.JSON.params.none_as_null
    "sqlalchemy.types.JSON") is added, which when True indicates that the Python `None`
    value should be persisted as SQL NULL, rather than JSON-encoded `'null'`.
  id: totrans-4447
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了一个新参数 [`JSON.none_as_null`](../core/type_basics.html#sqlalchemy.types.JSON.params.none_as_null
    "sqlalchemy.types.JSON")，当为 True 时表示 Python 的 `None` 值应该被持久化为 SQL NULL，而不是 JSON
    编码的 `'null'`。
- en: Retrieval of NULL as None is also repaired for DBAPIs other than psycopg2, namely
    pg8000.
  id: totrans-4448
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于除 psycopg2 外的其他 DBAPI，检索 NULL 作为 None 也已修复，即 pg8000。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-4449
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.8
- en: 'References: [#3159](https://www.sqlalchemy.org/trac/ticket/3159)'
  id: totrans-4450
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3159](https://www.sqlalchemy.org/trac/ticket/3159)
- en: '**[postgresql] [bug]**'
  id: totrans-4451
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: The exception wrapping system for DBAPI errors can now accommodate non-standard
    DBAPI exceptions, such as the psycopg2 TransactionRollbackError. These exceptions
    will now be raised using the closest available subclass in `sqlalchemy.exc`, in
    the case of TransactionRollbackError, `sqlalchemy.exc.OperationalError`.
  id: totrans-4452
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: DBAPI错误的异常包装系统现在可以适应非标准的DBAPI异常，例如psycopg2 TransactionRollbackError。这些异常现在将使用`sqlalchemy.exc`中最接近的可用子类引发，在TransactionRollbackError的情况下，是`sqlalchemy.exc.OperationalError`。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-4453
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.8
- en: 'References: [#3075](https://www.sqlalchemy.org/trac/ticket/3075)'
  id: totrans-4454
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3075](https://www.sqlalchemy.org/trac/ticket/3075)
- en: '**[postgresql] [bug]**'
  id: totrans-4455
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug in [`array`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.array
    "sqlalchemy.dialects.postgresql.array") object where comparison to a plain Python
    list would fail to use the correct array constructor. Pull request courtesy Andrew.
  id: totrans-4456
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`array`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.array
    "sqlalchemy.dialects.postgresql.array")对象中的错误，在与普通Python列表的比较中未能使用正确的数组构造函数。感谢Andrew提供的拉取请求。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-4457
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.8
- en: 'References: [#3141](https://www.sqlalchemy.org/trac/ticket/3141)'
  id: totrans-4458
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3141](https://www.sqlalchemy.org/trac/ticket/3141)
- en: '**[postgresql] [bug]**'
  id: totrans-4459
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added a supported [`FunctionElement.alias()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.alias
    "sqlalchemy.sql.functions.FunctionElement.alias") method to functions, e.g. the
    `func` construct. Previously, behavior for this method was undefined. The current
    behavior mimics that of pre-0.9.4, which is that the function is turned into a
    single-column FROM clause with the given alias name, where the column itself is
    anonymously named.
  id: totrans-4460
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为函数添加了一个支持的[`FunctionElement.alias()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.alias
    "sqlalchemy.sql.functions.FunctionElement.alias")方法，例如`func`构造。以前，该方法的行为未定义。当前行为模仿了0.9.4之前的行为，即将函数转换为具有给定别名的单列FROM子句，其中列本身被匿名命名。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-4461
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.8
- en: 'References: [#3137](https://www.sqlalchemy.org/trac/ticket/3137)'
  id: totrans-4462
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3137](https://www.sqlalchemy.org/trac/ticket/3137)
- en: '**[postgresql] [bug] [pg8000]**'
  id: totrans-4463
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug] [pg8000]**'
- en: Fixed bug introduced in 0.9.5 by new pg8000 isolation level feature where engine-level
    isolation level parameter would raise an error on connect.
  id: totrans-4464
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了0.9.5中由新的pg8000隔离级别功能引入的错误，其中引擎级别的隔离级别参数在连接时会引发错误。
- en: 'This change is also **backported** to: 0.9.7'
  id: totrans-4465
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.7
- en: 'References: [#3134](https://www.sqlalchemy.org/trac/ticket/3134)'
  id: totrans-4466
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3134](https://www.sqlalchemy.org/trac/ticket/3134)
- en: '**[postgresql] [bug]**'
  id: totrans-4467
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: The psycopg2 `.closed` accessor is now consulted when determining if an exception
    is a “disconnect” error; ideally, this should remove the need for any other inspection
    of the exception message to detect disconnect, however we will leave those existing
    messages in place as a fallback. This should be able to handle newer cases like
    “SSL EOF” conditions. Pull request courtesy Dirk Mueller.
  id: totrans-4468
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，在确定异常是否为“断开”错误时，将查看psycopg2`.closed`访问器；理想情况下，这应该消除任何其他检查异常消息以检测断开的需要，但是我们将保留这些现有消息作为后备。这应该能够处理新的情况，例如“SSL
    EOF”条件。感谢Dirk Mueller提供的拉取请求。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-4469
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.9.5
- en: 'References: [#3021](https://www.sqlalchemy.org/trac/ticket/3021)'
  id: totrans-4470
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3021](https://www.sqlalchemy.org/trac/ticket/3021)
- en: '**[postgresql] [bug]**'
  id: totrans-4471
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: The PostgreSQL [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM") type will emit a DROP TYPE instruction
    when a plain `table.drop()` is called, assuming the object is not associated directly
    with a [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    object. In order to accommodate the use case of an enumerated type shared between
    multiple tables, the type should be associated directly with the [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object; in this case the type will only be created
    at the metadata level, or if created directly. The rules for create/drop of PostgreSQL
    enumerated types have been highly reworked in general.
  id: totrans-4472
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当调用普通的`table.drop()`时，PostgreSQL [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM") 类型将发出 DROP TYPE 指令，假设对象没有直接与[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")对象关联。为了适应在多个表之间共享枚举类型的用例，该类型应直接与[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")对象关联；在这种情况下，类型仅在元数据级别创建，或者如果直接创建。一般来说，已经对创建/删除 PostgreSQL
    枚举类型的规则进行了大幅改进。
- en: See also
  id: totrans-4473
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Overhaul of ENUM type create/drop rules](migration_10.html#change-3319)'
  id: totrans-4474
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[ENUM 类型创建/删除规则的全面改进](migration_10.html#change-3319)'
- en: 'References: [#3319](https://www.sqlalchemy.org/trac/ticket/3319)'
  id: totrans-4475
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3319](https://www.sqlalchemy.org/trac/ticket/3319)
- en: '**[postgresql] [bug]**'
  id: totrans-4476
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [错误]**'
- en: The `PGDialect.has_table()` method will now query against `pg_catalog.pg_table_is_visible(c.oid)`,
    rather than testing for an exact schema match, when the schema name is None; this
    so that the method will also illustrate that temporary tables are present. Note
    that this is a behavioral change, as PostgreSQL allows a non-temporary table to
    silently overwrite an existing temporary table of the same name, so this changes
    the behavior of `checkfirst` in that unusual scenario.
  id: totrans-4477
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`PGDialect.has_table()` 方法现在将针对`pg_catalog.pg_table_is_visible(c.oid)`进行查询，而不是在模式名称为
    None 时测试精确的模式匹配；这样该方法也将显示出临时表的存在。请注意，这是一项行为更改，因为 PostgreSQL 允许非临时表悄悄地覆盖同名的现有临时表，因此这会改变`checkfirst`在这种不寻常情况下的行为。'
- en: See also
  id: totrans-4478
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[PostgreSQL has_table() now works for temporary tables](migration_10.html#change-3264)'
  id: totrans-4479
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[PostgreSQL has_table() 现在适用于临时表](migration_10.html#change-3264)'
- en: 'References: [#3264](https://www.sqlalchemy.org/trac/ticket/3264)'
  id: totrans-4480
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3264](https://www.sqlalchemy.org/trac/ticket/3264)
- en: '**[postgresql] [enhancement]**'
  id: totrans-4481
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [增强]**'
- en: Added a new type [`OID`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.OID
    "sqlalchemy.dialects.postgresql.OID") to the PostgreSQL dialect. While “oid” is
    generally a private type within PG that is not exposed in modern versions, there
    are some PG use cases such as large object support where these types might be
    exposed, as well as within some user-reported schema reflection use cases.
  id: totrans-4482
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 PostgreSQL 方言添加了一个新类型[`OID`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.OID
    "sqlalchemy.dialects.postgresql.OID")。虽然“oid”通常是 PG 中的私有类型，在现代版本中不会公开，但在某些 PG
    使用情况下（如大对象支持）可能会公开这些类型，以及在一些用户报告的模式反射使用情况中可能会公开这些类型。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-4483
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.9.5
- en: 'References: [#3002](https://www.sqlalchemy.org/trac/ticket/3002)'
  id: totrans-4484
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3002](https://www.sqlalchemy.org/trac/ticket/3002)
- en: mysql
  id: totrans-4485
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [feature]**'
  id: totrans-4486
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [功能]**'
- en: The MySQL dialect now renders TIMESTAMP with NULL / NOT NULL in all cases, so
    that MySQL 5.6.6 with the `explicit_defaults_for_timestamp` flag enabled will
    will allow TIMESTAMP to continue to work as expected when `nullable=False`. Existing
    applications are unaffected as SQLAlchemy has always emitted NULL for a TIMESTAMP
    column that is `nullable=True`.
  id: totrans-4487
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL 方言现在在所有情况下都使用 NULL / NOT NULL 渲染 TIMESTAMP，因此启用了`explicit_defaults_for_timestamp`标志的
    MySQL 5.6.6 将允许 TIMESTAMP 在`nullable=False`时继续按预期工作。现有应用程序不受影响，因为 SQLAlchemy 一直为`nullable=True`的
    TIMESTAMP 列发出 NULL。
- en: See also
  id: totrans-4488
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[MySQL TIMESTAMP Type now renders NULL / NOT NULL in all cases](migration_10.html#change-3155)'
  id: totrans-4489
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL TIMESTAMP 类型现在在所有情况下都渲染为 NULL / NOT NULL
- en: '[TIMESTAMP Columns and NULL](../dialects/mysql.html#mysql-timestamp-null)'
  id: totrans-4490
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[TIMESTAMP 列和 NULL](../dialects/mysql.html#mysql-timestamp-null)'
- en: 'References: [#3155](https://www.sqlalchemy.org/trac/ticket/3155)'
  id: totrans-4491
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3155](https://www.sqlalchemy.org/trac/ticket/3155)
- en: '**[mysql] [feature]**'
  id: totrans-4492
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [功能]**'
- en: Updated the “supports_unicode_statements” flag to True for MySQLdb and Pymysql
    under Python 2\. This refers to the SQL statements themselves, not the parameters,
    and affects issues such as table and column names using non-ASCII characters.
    These drivers both appear to support Python 2 Unicode objects without issue in
    modern versions.
  id: totrans-4493
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 “supports_unicode_statements” 标志更新为 True，对于 Python 2 下的 MySQLdb 和 Pymysql。这是指
    SQL 语句本身，而不是参数，影响到使用非 ASCII 字符的表和列名等问题。这些驱动程序在现代版本中似乎都支持 Python 2 Unicode 对象而没有问题。
- en: 'References: [#3121](https://www.sqlalchemy.org/trac/ticket/3121)'
  id: totrans-4494
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3121](https://www.sqlalchemy.org/trac/ticket/3121)
- en: '**[mysql] [change]**'
  id: totrans-4495
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [change]**'
- en: The `gaerdbms` dialect is no longer necessary, and emits a deprecation warning.
    Google now recommends using the MySQLdb dialect directly.
  id: totrans-4496
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`gaerdbms` 方言已不再必要，并发出了弃用警告。 Google 现在建议直接使用 MySQLdb 方言。'
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-4497
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个变更也**被回溯**到：0.9.9
- en: 'References: [#3275](https://www.sqlalchemy.org/trac/ticket/3275)'
  id: totrans-4498
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3275](https://www.sqlalchemy.org/trac/ticket/3275)
- en: '**[mysql] [bug]**'
  id: totrans-4499
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: MySQL error 2014 “commands out of sync” appears to be raised as a ProgrammingError,
    not OperationalError, in modern MySQL-Python versions; all MySQL error codes that
    are tested for “is disconnect” are now checked within OperationalError and ProgrammingError
    regardless.
  id: totrans-4500
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL 错误 2014 “命令不同步” 现在似乎被作为 ProgrammingError 而不是 OperationalError 引发，在现代 MySQL-Python
    版本中所有测试过的 MySQL 错误代码 “is disconnect” 现在都在 OperationalError 和 ProgrammingError
    中进行检查。
- en: 'This change is also **backported** to: 0.9.7, 0.8.7'
  id: totrans-4501
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个变更也**被回溯**到：0.9.7, 0.8.7
- en: 'References: [#3101](https://www.sqlalchemy.org/trac/ticket/3101)'
  id: totrans-4502
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3101](https://www.sqlalchemy.org/trac/ticket/3101)
- en: '**[mysql] [bug]**'
  id: totrans-4503
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed bug where column names added to `mysql_length` parameter on an index needed
    to have the same quoting for quoted names in order to be recognized. The fix makes
    the quotes optional but also provides the old behavior for backwards compatibility
    with those using the workaround.
  id: totrans-4504
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，在索引的 `mysql_length` 参数上添加的列名需要具有相同的引号才能被识别。修复使引号变成可选，但也为那些使用此解决方法的人提供了旧的行为，以保持向后兼容性。
- en: 'This change is also **backported** to: 0.9.5, 0.8.7'
  id: totrans-4505
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个变更也**被回溯**到：0.9.5, 0.8.7
- en: 'References: [#3085](https://www.sqlalchemy.org/trac/ticket/3085)'
  id: totrans-4506
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3085](https://www.sqlalchemy.org/trac/ticket/3085)
- en: '**[mysql] [bug]**'
  id: totrans-4507
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Added support for reflecting tables where an index includes KEY_BLOCK_SIZE using
    an equal sign. Pull request courtesy Sean McGivern.
  id: totrans-4508
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对包含 KEY_BLOCK_SIZE 的索引的反射表的支持，使用等号。拉取请求由肖恩·麦克吉文提供。
- en: 'This change is also **backported** to: 0.9.5, 0.8.7'
  id: totrans-4509
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个变更也**被回溯**到：0.9.5, 0.8.7
- en: '**[mysql] [bug]**'
  id: totrans-4510
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Added a version check to the MySQLdb dialect surrounding the check for ‘utf8_bin’
    collation, as this fails on MySQL server < 5.0.
  id: totrans-4511
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 MySQLdb 方言周围添加了一个版本检查，用于检查 ‘utf8_bin’ 校对，因为这在 MySQL 服务器 < 5.0 上失败。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-4512
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个变更也**被回溯**到：0.9.9
- en: 'References: [#3274](https://www.sqlalchemy.org/trac/ticket/3274)'
  id: totrans-4513
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3274](https://www.sqlalchemy.org/trac/ticket/3274)
- en: '**[mysql] [bug] [mysqlconnector]**'
  id: totrans-4514
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug] [mysqlconnector]**'
- en: Mysqlconnector as of version 2.0, probably as a side effect of the python 3
    merge, now does not expect percent signs (e.g. as used as the modulus operator
    and others) to be doubled, even when using the “pyformat” bound parameter format
    (this change is not documented by Mysqlconnector). The dialect now checks for
    py2k and for mysqlconnector less than version 2.0 when detecting if the modulus
    operator should be rendered as `%%` or `%`.
  id: totrans-4515
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自 MySQLconnector 版本 2.0 起，可能作为 python 3 合并的副作用，现在不再期望百分号（例如作为模运算符和其他）加倍，即使使用
    “pyformat” 绑定参数格式（这个变更未被 MySQLconnector 记录）。方言现在在检测模运算符应该呈现为 `%%` 还是 `%` 时，检查了
    py2k 和 mysqlconnector 小于版本 2.0。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-4516
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个变更也**被回溯**到：0.9.8
- en: '**[mysql] [bug] [mysqlconnector]**'
  id: totrans-4517
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug] [mysqlconnector]**'
- en: Unicode SQL is now passed for MySQLconnector version 2.0 and above; for Py2k
    and MySQL < 2.0, strings are encoded.
  id: totrans-4518
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在对于 MySQLconnector 版本 2.0 及以上版本，Unicode SQL 被传递；对于 Py2k 和 MySQL < 2.0，字符串被编码。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-4519
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个变更也**被回溯**到：0.9.8
- en: '**[mysql] [bug]**'
  id: totrans-4520
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: The MySQL dialect now supports CAST on types that are constructed as [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") objects.
  id: totrans-4521
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL 方言现在支持在构造为[`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")对象的类型上进行 CAST。
- en: '**[mysql] [bug]**'
  id: totrans-4522
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: A warning is emitted when [`cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.cast
    "sqlalchemy.sql.expression.cast") is used with the MySQL dialect on a type where
    MySQL does not support CAST; MySQL only supports CAST on a subset of datatypes.
    SQLAlchemy has for a long time just omitted the CAST for unsupported types in
    the case of MySQL. While we don’t want to change this now, we emit a warning to
    show that it’s taken place. A warning is also emitted when a CAST is used with
    an older MySQL version (< 4) that doesn’t support CAST at all, it’s skipped in
    this case as well.
  id: totrans-4523
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当在 MySQL 方言上使用 [`cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.cast
    "sqlalchemy.sql.expression.cast") 时，如果 MySQL 不支持 CAST 的类型，则会发出警告；MySQL 只支持对部分数据类型进行
    CAST。长期以来，SQLAlchemy 在 MySQL 的情况下仅省略不支持的类型的 CAST。虽然我们现在不想更改这一点，但我们会发出警告以表明已经发生了这种情况。当在旧版本的
    MySQL（< 4）中使用 CAST 时，MySQL 完全不支持 CAST 时，也会发出警告，此时也会跳过 CAST。
- en: 'References: [#3237](https://www.sqlalchemy.org/trac/ticket/3237)'
  id: totrans-4524
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3237](https://www.sqlalchemy.org/trac/ticket/3237)
- en: '**[mysql] [bug]**'
  id: totrans-4525
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: The [`SET`](../dialects/mysql.html#sqlalchemy.dialects.mysql.SET "sqlalchemy.dialects.mysql.SET")
    type has been overhauled to no longer assume that the empty string, or a set with
    a single empty string value, is in fact a set with a single empty string; instead,
    this is by default treated as the empty set. In order to handle persistence of
    a [`SET`](../dialects/mysql.html#sqlalchemy.dialects.mysql.SET "sqlalchemy.dialects.mysql.SET")
    that actually wants to include the blank value `''` as a legitimate value, a new
    bitwise operational mode is added which is enabled by the [`SET.retrieve_as_bitwise`](../dialects/mysql.html#sqlalchemy.dialects.mysql.SET.params.retrieve_as_bitwise
    "sqlalchemy.dialects.mysql.SET") flag, which will persist and retrieve values
    unambiguously using their bitflag positioning. Storage and retrieval of unicode
    values for driver configurations that aren’t converting unicode natively is also
    repaired.
  id: totrans-4526
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`SET`](../dialects/mysql.html#sqlalchemy.dialects.mysql.SET "sqlalchemy.dialects.mysql.SET")
    类型已进行了彻底改版，不再假设空字符串或只有一个空字符串值的集合实际上是只有一个空字符串的集合；相反，默认情况下，这被视为空集。为了处理实际上希望将空值 `''''`
    包含为合法值的 [`SET`](../dialects/mysql.html#sqlalchemy.dialects.mysql.SET "sqlalchemy.dialects.mysql.SET")
    的持久性，添加了一个新的按位运算模式，通过 [`SET.retrieve_as_bitwise`](../dialects/mysql.html#sqlalchemy.dialects.mysql.SET.params.retrieve_as_bitwise
    "sqlalchemy.dialects.mysql.SET") 标志启用，这将以位标志的位置持久化和检索值，使其不含糊。修复了对未原生转换 Unicode
    的驱动程序配置的 Unicode 值的存储和检索。'
- en: See also
  id: totrans-4527
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[MySQL SET Type Overhauled to support empty sets, unicode, blank value handling](migration_10.html#change-3283)'
  id: totrans-4528
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[MySQL SET 类型进行了彻底改版，以支持空集、Unicode、空值处理](migration_10.html#change-3283)'
- en: 'References: [#3283](https://www.sqlalchemy.org/trac/ticket/3283)'
  id: totrans-4529
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3283](https://www.sqlalchemy.org/trac/ticket/3283)
- en: '**[mysql] [bug]**'
  id: totrans-4530
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: The [`ColumnOperators.match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") operator is now handled such
    that the return type is not strictly assumed to be boolean; it now returns a [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean") subclass called [`MatchType`](../core/type_basics.html#sqlalchemy.types.MatchType
    "sqlalchemy.types.MatchType"). The type will still produce boolean behavior when
    used in Python expressions, however the dialect can override its behavior at result
    time. In the case of MySQL, while the MATCH operator is typically used in a boolean
    context within an expression, if one actually queries for the value of a match
    expression, a floating point value is returned; this value is not compatible with
    SQLAlchemy’s C-based boolean processor, so MySQL’s result-set behavior now follows
    that of the [`Float`](../core/type_basics.html#sqlalchemy.types.Float "sqlalchemy.types.Float")
    type. A new operator object `notmatch_op` is also added to better allow dialects
    to define the negation of a match operation.
  id: totrans-4531
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") 操作现在被处理，不再严格假定返回类型为布尔值；现在返回一个名为
    [`MatchType`](../core/type_basics.html#sqlalchemy.types.MatchType "sqlalchemy.types.MatchType")
    的 [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean")
    子类。当在 Python 表达式中使用时，该类型仍将产生布尔行为，但方言可以在结果时重写其行为。在 MySQL 的情况下，虽然 MATCH 运算符通常在表达式中的布尔上下文中使用，但如果实际上查询匹配表达式的值，则会返回浮点值；此值与
    SQLAlchemy 的基于 C 的布尔处理器不兼容，因此 MySQL 的结果集行为现在遵循 [`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float") 类型的行为。还添加了一个新的运算符对象 `notmatch_op`，以更好地允许方言定义匹配操作的否定。'
- en: See also
  id: totrans-4532
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[The match() operator now returns an agnostic MatchType compatible with MySQL’s
    floating point return value](migration_10.html#change-3263)'
  id: totrans-4533
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[match() 运算符现在返回与 MySQL 浮点返回值兼容的不可知 MatchType](migration_10.html#change-3263)'
- en: 'References: [#3263](https://www.sqlalchemy.org/trac/ticket/3263)'
  id: totrans-4534
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3263](https://www.sqlalchemy.org/trac/ticket/3263)
- en: '**[mysql] [bug]**'
  id: totrans-4535
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: MySQL boolean symbols “true”, “false” work again. 0.9’s change in [#2682](https://www.sqlalchemy.org/trac/ticket/2682)
    disallowed the MySQL dialect from making use of the “true” and “false” symbols
    in the context of “IS” / “IS NOT”, but MySQL supports this syntax even though
    it has no boolean type. MySQL remains “non native boolean”, but the [`true()`](../core/sqlelement.html#sqlalchemy.sql.expression.true
    "sqlalchemy.sql.expression.true") and [`false()`](../core/sqlelement.html#sqlalchemy.sql.expression.false
    "sqlalchemy.sql.expression.false") symbols again produce the keywords “true” and
    “false”, so that an expression like `column.is_(true())` again works on MySQL.
  id: totrans-4536
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL 布尔符号“true”、“false”再次有效。0.9 中的更改[#2682](https://www.sqlalchemy.org/trac/ticket/2682)
    禁止了 MySQL 方言在“IS”/“IS NOT”的上下文中使用“true”和“false”符号，但 MySQL 支持这种语法，即使它没有布尔类型。MySQL
    仍然是“非本地布尔”，但 [`true()`](../core/sqlelement.html#sqlalchemy.sql.expression.true
    "sqlalchemy.sql.expression.true") 和 [`false()`](../core/sqlelement.html#sqlalchemy.sql.expression.false
    "sqlalchemy.sql.expression.false") 符号再次生成关键字“true”和“false”，因此像 `column.is_(true())`
    这样的表达式在 MySQL 上再次有效。
- en: See also
  id: totrans-4537
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[MySQL boolean symbols “true”, “false” work again](migration_10.html#bug-3186)'
  id: totrans-4538
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[MySQL 布尔符号“true”、“false”再次有效](migration_10.html#bug-3186)'
- en: 'References: [#3186](https://www.sqlalchemy.org/trac/ticket/3186)'
  id: totrans-4539
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3186](https://www.sqlalchemy.org/trac/ticket/3186)
- en: '**[mysql] [bug]**'
  id: totrans-4540
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: The MySQL dialect will now disable `ConnectionEvents.handle_error()` events
    from firing for those statements which it uses internally to detect if a table
    exists or not. This is achieved using an execution option `skip_user_error_events`
    that disables the handle error event for the scope of that execution. In this
    way, user code that rewrites exceptions doesn’t need to worry about the MySQL
    dialect or other dialects that occasionally need to catch SQLAlchemy specific
    exceptions.
  id: totrans-4541
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL 方言现在将禁用 `ConnectionEvents.handle_error()` 事件，以防止其内部使用的语句触发该事件以检测表是否存在。这是通过使用一个执行选项
    `skip_user_error_events` 来实现的，该选项在该执行范围内禁用了处理错误事件。这样，重写异常的用户代码不需要担心 MySQL 方言或其他偶尔需要捕获
    SQLAlchemy 特定异常的方言。
- en: '**[mysql] [bug]**'
  id: totrans-4542
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Changed the default value of “raise_on_warnings” to False for MySQLconnector.
    This was set at True for some reason. The “buffered” flag unfortunately must stay
    at True as MySQLconnector does not allow a cursor to be closed unless all results
    are fully fetched.
  id: totrans-4543
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 MySQLconnector 的 “raise_on_warnings” 默认值更改为 False。出于某种原因，这个值被设置为 True。不幸的是，“buffered”
    标志必须保持为 True，因为 MySQLconnector 不允许关闭游标，除非所有结果都被完全获取。
- en: 'References: [#2515](https://www.sqlalchemy.org/trac/ticket/2515)'
  id: totrans-4544
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2515](https://www.sqlalchemy.org/trac/ticket/2515)
- en: sqlite
  id: totrans-4545
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [feature]**'
  id: totrans-4546
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [feature]**'
- en: Added support for partial indexes (e.g. with a WHERE clause) on SQLite. Pull
    request courtesy Kai Groner.
  id: totrans-4547
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 SQLite 上增加了对部分索引（例如带有 WHERE 子句）的支持。感谢 Kai Groner 提交的拉取请求。
- en: See also
  id: totrans-4548
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Partial Indexes](../dialects/sqlite.html#sqlite-partial-index)'
  id: totrans-4549
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[部分索引](../dialects/sqlite.html#sqlite-partial-index)'
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-4550
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.9
- en: '**[sqlite] [feature]**'
  id: totrans-4551
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [feature]**'
- en: Added a new SQLite backend for the SQLCipher backend. This backend provides
    for encrypted SQLite databases using the pysqlcipher Python driver, which is very
    similar to the pysqlite driver.
  id: totrans-4552
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的 SQLite 后端用于 SQLCipher 后端。该后端使用 pysqlcipher Python 驱动程序提供加密的 SQLite 数据库，该驱动程序与
    pysqlite 驱动程序非常相似。
- en: See also
  id: totrans-4553
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`pysqlcipher`](../dialects/sqlite.html#module-sqlalchemy.dialects.sqlite.pysqlcipher
    "sqlalchemy.dialects.sqlite.pysqlcipher")'
  id: totrans-4554
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`pysqlcipher`](../dialects/sqlite.html#module-sqlalchemy.dialects.sqlite.pysqlcipher
    "sqlalchemy.dialects.sqlite.pysqlcipher")'
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-4555
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.9
- en: '**[sqlite] [bug]**'
  id: totrans-4556
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: When selecting from a UNION using an attached database file, the pysqlite driver
    reports column names in cursor.description as ‘dbname.tablename.colname’, instead
    of ‘tablename.colname’ as it normally does for a UNION (note that it’s supposed
    to just be ‘colname’ for both, but we work around it). The column translation
    logic here has been adjusted to retrieve the rightmost token, rather than the
    second token, so it works in both cases. Workaround courtesy Tony Roberts.
  id: totrans-4557
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用附加数据库文件从 UNION 中选择时，pysqlite 驱动程序在 cursor.description 中报告列名为'dbname.tablename.colname'，而不是'
    tablename.colname'，如其对于 UNION 通常做的（请注意，对于两者来说，它应该只是'colname'，但我们绕过了它）。这里的列转换逻辑已调整为检索最右边的标记，而不是第二个标记，因此在两种情况下都有效。Tony
    Roberts 提供了解决方法。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-4558
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**被回溯**至：0.9.8
- en: 'References: [#3211](https://www.sqlalchemy.org/trac/ticket/3211)'
  id: totrans-4559
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3211](https://www.sqlalchemy.org/trac/ticket/3211)
- en: '**[sqlite] [bug]**'
  id: totrans-4560
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Fixed a SQLite join rewriting issue where a subquery that is embedded as a scalar
    subquery such as within an IN would receive inappropriate substitutions from the
    enclosing query, if the same table were present inside the subquery as were in
    the enclosing query such as in a joined inheritance scenario.
  id: totrans-4561
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 SQLite 连接重写问题，在此问题中，嵌入为标量子查询的子查询（例如在 IN 中），如果相同的表在子查询中存在，并且在封闭查询中存在，例如在连接的继承场景中，将从封闭查询中接收不合适的替换。
- en: 'This change is also **backported** to: 0.9.7'
  id: totrans-4562
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**被回溯**至：0.9.7
- en: 'References: [#3130](https://www.sqlalchemy.org/trac/ticket/3130)'
  id: totrans-4563
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3130](https://www.sqlalchemy.org/trac/ticket/3130)
- en: '**[sqlite] [bug]**'
  id: totrans-4564
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: UNIQUE and FOREIGN KEY constraints are now fully reflected on SQLite both with
    and without names. Previously, foreign key names were ignored and unnamed unique
    constraints were skipped. Thanks to Jon Nelson for assistance with this.
  id: totrans-4565
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 SQLite 中，唯一约束和外键约束现在完全反映在命名和未命名的情况下。以前，外键名称被忽略，未命名的唯一约束被跳过。感谢乔恩·尼尔森（Jon Nelson）的协助。
- en: 'References: [#3244](https://www.sqlalchemy.org/trac/ticket/3244), [#3261](https://www.sqlalchemy.org/trac/ticket/3261)'
  id: totrans-4566
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3244](https://www.sqlalchemy.org/trac/ticket/3244)，[#3261](https://www.sqlalchemy.org/trac/ticket/3261)
- en: '**[sqlite] [bug]**'
  id: totrans-4567
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: The SQLite dialect, when using the [`DATE`](../dialects/sqlite.html#sqlalchemy.dialects.sqlite.DATE
    "sqlalchemy.dialects.sqlite.DATE"), [`TIME`](../dialects/sqlite.html#sqlalchemy.dialects.sqlite.TIME
    "sqlalchemy.dialects.sqlite.TIME"), or [`DATETIME`](../dialects/sqlite.html#sqlalchemy.dialects.sqlite.DATETIME
    "sqlalchemy.dialects.sqlite.DATETIME") types, and given a `storage_format` that
    only renders numbers, will render the types in DDL as `DATE_CHAR`, `TIME_CHAR`,
    and `DATETIME_CHAR`, so that despite the lack of alpha characters in the values,
    the column will still deliver the “text affinity”. Normally this is not needed,
    as the textual values within the default storage formats already imply text.
  id: totrans-4568
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用 [`DATE`](../dialects/sqlite.html#sqlalchemy.dialects.sqlite.DATE "sqlalchemy.dialects.sqlite.DATE")、[`TIME`](../dialects/sqlite.html#sqlalchemy.dialects.sqlite.TIME
    "sqlalchemy.dialects.sqlite.TIME") 或 [`DATETIME`](../dialects/sqlite.html#sqlalchemy.dialects.sqlite.DATETIME
    "sqlalchemy.dialects.sqlite.DATETIME") 类型时，SQLite 方言，如果给出的 `storage_format` 仅呈现数字，则将在
    DDL 中将类型呈现为 `DATE_CHAR`、`TIME_CHAR` 和 `DATETIME_CHAR`，以便尽管值中缺少字母字符，但列仍将传递“文本亲和性”。通常情况下，这是不需要的，因为默认存储格式中的文本值已经暗示了文本。
- en: See also
  id: totrans-4569
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Date and Time Types](../dialects/sqlite.html#sqlite-datetime)'
  id: totrans-4570
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[日期和时间类型](../dialects/sqlite.html#sqlite-datetime)'
- en: 'References: [#3257](https://www.sqlalchemy.org/trac/ticket/3257)'
  id: totrans-4571
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3257](https://www.sqlalchemy.org/trac/ticket/3257)
- en: '**[sqlite] [bug]**'
  id: totrans-4572
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: SQLite now supports reflection of unique constraints from temp tables; previously,
    this would fail with a TypeError. Pull request courtesy Johannes Erdfelt.
  id: totrans-4573
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLite 现在支持从临时表中反射唯一约束；以前，这将导致 TypeError。拉取请求由 Johannes Erdfelt 提供。
- en: See also
  id: totrans-4574
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[SQLite/Oracle have distinct methods for temporary table/view name reporting](migration_10.html#change-3204)
    - changes regarding SQLite temporary table and view reflection.'
  id: totrans-4575
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[SQLite/Oracle 有不同的临时表/视图名称报告方法](migration_10.html#change-3204) - 关于 SQLite
    临时表和视图反射的更改。'
- en: 'References: [#3203](https://www.sqlalchemy.org/trac/ticket/3203)'
  id: totrans-4576
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3203](https://www.sqlalchemy.org/trac/ticket/3203)
- en: '**[sqlite] [bug]**'
  id: totrans-4577
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Added [`Inspector.get_temp_table_names()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_temp_table_names
    "sqlalchemy.engine.reflection.Inspector.get_temp_table_names") and [`Inspector.get_temp_view_names()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_temp_view_names
    "sqlalchemy.engine.reflection.Inspector.get_temp_view_names"); currently, only
    the SQLite and Oracle dialects support these methods. The return of temporary
    table and view names has been **removed** from SQLite and Oracle’s version of
    [`Inspector.get_table_names()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_table_names
    "sqlalchemy.engine.reflection.Inspector.get_table_names") and [`Inspector.get_view_names()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_view_names
    "sqlalchemy.engine.reflection.Inspector.get_view_names"); other database backends
    cannot support this information (such as MySQL), and the scope of operation is
    different in that the tables can be local to a session and typically aren’t supported
    in remote schemas.
  id: totrans-4578
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '添加了[`Inspector.get_temp_table_names()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_temp_table_names
    "sqlalchemy.engine.reflection.Inspector.get_temp_table_names")和[`Inspector.get_temp_view_names()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_temp_view_names
    "sqlalchemy.engine.reflection.Inspector.get_temp_view_names")；目前，只有SQLite和Oracle方言支持这些方法。临时表和视图名称的返回已从SQLite和Oracle版本的[`Inspector.get_table_names()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_table_names
    "sqlalchemy.engine.reflection.Inspector.get_table_names")和[`Inspector.get_view_names()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_view_names
    "sqlalchemy.engine.reflection.Inspector.get_view_names")中**移除**；其他数据库后端不支持此信息（如MySQL），操作范围也不同，因为表可以是会话本地的，通常不支持远程模式中的表。 '
- en: See also
  id: totrans-4579
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[SQLite/Oracle have distinct methods for temporary table/view name reporting](migration_10.html#change-3204)'
  id: totrans-4580
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[SQLite/Oracle有用于报告临时表/视图名称的不同方法](migration_10.html#change-3204)'
- en: 'References: [#3204](https://www.sqlalchemy.org/trac/ticket/3204)'
  id: totrans-4581
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3204](https://www.sqlalchemy.org/trac/ticket/3204)
- en: mssql
  id: totrans-4582
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [feature]**'
  id: totrans-4583
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [功能]**'
- en: Enabled “multivalues insert” for SQL Server 2008\. Pull request courtesy Albert
    Cervin. Also expanded the checks for “IDENTITY INSERT” mode to include when the
    identity key is present in the VALUEs clause of the statement.
  id: totrans-4584
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为SQL Server 2008启用了“多值插入”。感谢Albert Cervin提供的拉取请求。还扩展了对“IDENTITY INSERT”模式的检查，以包括当标识键出现在语句的VALUEs子句中时。
- en: 'This change is also **backported** to: 0.9.7'
  id: totrans-4585
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.7
- en: '**[mssql] [feature]**'
  id: totrans-4586
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [功能]**'
- en: SQL Server 2012 now recommends VARCHAR(max), NVARCHAR(max), VARBINARY(max) for
    large text/binary types. The MSSQL dialect will now respect this based on version
    detection, as well as the new `deprecate_large_types` flag.
  id: totrans-4587
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQL Server 2012现在推荐对于大文本/二进制类型使用VARCHAR(max)、NVARCHAR(max)、VARBINARY(max)。MSSQL方言现在会根据版本检测以及新的`deprecate_large_types`标志来尊重这一点。
- en: See also
  id: totrans-4588
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[Large Text/Binary Type Deprecation](../dialects/mssql.html#mssql-large-type-deprecation)'
  id: totrans-4589
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[大文本/二进制类型弃用](../dialects/mssql.html#mssql-large-type-deprecation)'
- en: 'References: [#3039](https://www.sqlalchemy.org/trac/ticket/3039)'
  id: totrans-4590
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3039](https://www.sqlalchemy.org/trac/ticket/3039)
- en: '**[mssql] [changed]**'
  id: totrans-4591
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [更改]**'
- en: The hostname-based connection format for SQL Server when using pyodbc will no
    longer specify a default “driver name”, and a warning is emitted if this is missing.
    The optimal driver name for SQL Server changes frequently and is per-platform,
    so hostname based connections need to specify this. DSN-based connections are
    preferred.
  id: totrans-4592
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用pyodbc时，SQL Server的基于主机名的连接格式将不再指定默认的“驱动程序名称”，如果缺少此项将发出警告。SQL Server的最佳驱动程序名称经常变化，并且是每个平台独立的，因此基于主机名的连接需要指定此项。优先使用基于DSN的连接。
- en: See also
  id: totrans-4593
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[PyODBC driver name is required with hostname-based SQL Server connections](migration_10.html#change-3182)'
  id: totrans-4594
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[基于主机名的SQL Server连接需要PyODBC驱动程序名称](migration_10.html#change-3182)'
- en: 'References: [#3182](https://www.sqlalchemy.org/trac/ticket/3182)'
  id: totrans-4595
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3182](https://www.sqlalchemy.org/trac/ticket/3182)
- en: '**[mssql] [bug]**'
  id: totrans-4596
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [错误]**'
- en: Added statement encoding to the “SET IDENTITY_INSERT” statements which operate
    when an explicit INSERT is being interjected into an IDENTITY column, to support
    non-ascii table identifiers on drivers such as pyodbc + unix + py2k that don’t
    support unicode statements.
  id: totrans-4597
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在“SET IDENTITY_INSERT”语句中添加了语句编码，当明确地向标识列插入一个INSERT时，以支持在不支持unicode语句的驱动程序（如pyodbc
    + unix + py2k）上使用非ascii表标识符。
- en: 'This change is also **backported** to: 0.9.7, 0.8.7'
  id: totrans-4598
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.7, 0.8.7
- en: '**[mssql] [bug]**'
  id: totrans-4599
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [错误]**'
- en: In the SQL Server pyodbc dialect, repaired the implementation for the `description_encoding`
    dialect parameter, which when not explicitly set was preventing cursor.description
    from being parsed correctly in the case of result sets that contained names in
    alternate encodings. This parameter shouldn’t be needed going forward.
  id: totrans-4600
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 SQL Server pyodbc 方言中，修复了 `description_encoding` 方言参数的实现，当未显式设置时，会导致在包含其他编码名称的结果集中，cursor.description
    无法正确解析的情况。未来不应该需要此参数。
- en: 'This change is also **backported** to: 0.9.7, 0.8.7'
  id: totrans-4601
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.7, 0.8.7
- en: 'References: [#3091](https://www.sqlalchemy.org/trac/ticket/3091)'
  id: totrans-4602
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3091](https://www.sqlalchemy.org/trac/ticket/3091)
- en: '**[mssql] [bug]**'
  id: totrans-4603
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed the version string detection in the pymssql dialect to work with Microsoft
    SQL Azure, which changes the word “SQL Server” to “SQL Azure”.
  id: totrans-4604
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 pymssql 方言中版本字符串检测的问题，以便与 Microsoft SQL Azure 一起工作，后者将“SQL Server”更改为“SQL
    Azure”。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-4605
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.8
- en: 'References: [#3151](https://www.sqlalchemy.org/trac/ticket/3151)'
  id: totrans-4606
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3151](https://www.sqlalchemy.org/trac/ticket/3151)
- en: '**[mssql] [bug]**'
  id: totrans-4607
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Revised the query used to determine the current default schema name to use the
    `database_principal_id()` function in conjunction with the `sys.database_principals`
    view so that we can determine the default schema independently of the type of
    login in progress (e.g., SQL Server, Windows, etc).
  id: totrans-4608
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修订了用于确定当前默认模式名称的查询，使用 `database_principal_id()` 函数与 `sys.database_principals`
    视图结合使用，以便我们可以独立于正在进行的登录类型（例如，SQL Server、Windows 等）确定默认模式。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-4609
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.5
- en: 'References: [#3025](https://www.sqlalchemy.org/trac/ticket/3025)'
  id: totrans-4610
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3025](https://www.sqlalchemy.org/trac/ticket/3025)
- en: oracle
  id: totrans-4611
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [feature]**'
  id: totrans-4612
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [feature]**'
- en: Added support for cx_oracle connections to a specific service name, as opposed
    to a tns name, by passing `?service_name=<name>` to the URL. Pull request courtesy
    Sławomir Ehlert.
  id: totrans-4613
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对 cx_oracle 连接到特定服务名称的支持，而不是 tns 名称，通过在 URL 中传递 `?service_name=<name>`。感谢
    Sławomir Ehlert 提交的拉取请求。
- en: '**[oracle] [feature]**'
  id: totrans-4614
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [feature]**'
- en: 'New Oracle DDL features for tables, indexes: COMPRESS, BITMAP. Patch courtesy
    Gabor Gombas.'
  id: totrans-4615
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Oracle 表、索引的新 DDL 功能：COMPRESS、BITMAP。补丁由 Gabor Gombas 提供。
- en: '**[oracle] [feature]**'
  id: totrans-4616
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [feature]**'
- en: Added support for CTEs under Oracle. This includes some tweaks to the aliasing
    syntax, as well as a new CTE feature `CTE.suffix_with()`, which is useful for
    adding in special Oracle-specific directives to the CTE.
  id: totrans-4617
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对 Oracle 下 CTE 的支持。这包括对别名语法的一些调整，以及一个新的 CTE 功能 `CTE.suffix_with()`，用于向 CTE
    添加特殊的 Oracle 特定指令。
- en: See also
  id: totrans-4618
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Improved support for CTEs in Oracle](migration_10.html#change-3220)'
  id: totrans-4619
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[改进了 Oracle 中 CTE 的支持](migration_10.html#change-3220)'
- en: 'References: [#3220](https://www.sqlalchemy.org/trac/ticket/3220)'
  id: totrans-4620
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3220](https://www.sqlalchemy.org/trac/ticket/3220)
- en: '**[oracle] [feature]**'
  id: totrans-4621
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [feature]**'
- en: Added support for the Oracle table option ON COMMIT.
  id: totrans-4622
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对 Oracle 表选项 ON COMMIT 的支持。
- en: '**[oracle] [bug]**'
  id: totrans-4623
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed long-standing bug in Oracle dialect where bound parameter names that started
    with numbers would not be quoted, as Oracle doesn’t like numerics in bound parameter
    names.
  id: totrans-4624
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 Oracle 方言中长期存在的 bug，即以数字开头的绑定参数名称不会被引用，因为 Oracle 不喜欢绑定参数名称中有数字。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-4625
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.8
- en: 'References: [#2138](https://www.sqlalchemy.org/trac/ticket/2138)'
  id: totrans-4626
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2138](https://www.sqlalchemy.org/trac/ticket/2138)
- en: '**[oracle] [bug] [tests]**'
  id: totrans-4627
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug] [tests]**'
- en: Fixed bug in oracle dialect test suite where in one test, ‘username’ was assumed
    to be in the database URL, even though this might not be the case.
  id: totrans-4628
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 Oracle 方言测试套件中的一个 bug，在一个测试中，假定‘username’在数据库 URL 中，尽管这可能并非如此。
- en: 'This change is also **backported** to: 0.9.7'
  id: totrans-4629
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.7
- en: 'References: [#3128](https://www.sqlalchemy.org/trac/ticket/3128)'
  id: totrans-4630
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3128](https://www.sqlalchemy.org/trac/ticket/3128)
- en: '**[oracle] [bug]**'
  id: totrans-4631
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: An alias name will be properly quoted when referred to using the `%(name)s`
    token inside the [`Select.with_hint()`](../core/selectable.html#sqlalchemy.sql.expression.Select.with_hint
    "sqlalchemy.sql.expression.Select.with_hint") method. Previously, the Oracle backend
    hadn’t implemented this quoting.
  id: totrans-4632
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当在 [`Select.with_hint()`](../core/selectable.html#sqlalchemy.sql.expression.Select.with_hint
    "sqlalchemy.sql.expression.Select.with_hint") ��法中使用 `%(name)s` 标记引用别名时，别名将被正确引用。以前，Oracle
    后端尚未实现此引用。
- en: tests
  id: totrans-4633
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [bug]**'
  id: totrans-4634
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[tests] [bug]**'
- en: Fixed bug where “python setup.py test” wasn’t calling into distutils appropriately,
    and errors would be emitted at the end of the test suite.
  id: totrans-4635
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“python setup.py test”未正确调用 distutils 的 bug，并且错误将在测试套件结束时发出。
- en: 'This change is also **backported** to: 0.9.7'
  id: totrans-4636
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.7
- en: '**[tests] [bug] [py3k]**'
  id: totrans-4637
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[测试] [错误] [py3k]**'
- en: Corrected for some deprecation warnings involving the `imp` module and Python
    3.3 or greater, when running tests. Pull request courtesy Matt Chisholm.
  id: totrans-4638
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修正了一些涉及`imp`模块和Python 3.3或更高版本的弃用警告，在运行测试时。感谢Matt Chisholm提供的拉取请求。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-4639
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.5
- en: 'References: [#2830](https://www.sqlalchemy.org/trac/ticket/2830)'
  id: totrans-4640
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2830](https://www.sqlalchemy.org/trac/ticket/2830)
- en: misc
  id: totrans-4641
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[feature] [ext]**'
  id: totrans-4642
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[特性] [扩展]**'
- en: Added a new extension suite [`sqlalchemy.ext.baked`](../orm/extensions/baked.html#module-sqlalchemy.ext.baked
    "sqlalchemy.ext.baked"). This simple but unusual system allows for a dramatic
    savings in Python overhead for the construction and processing of orm [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") objects, from query construction up through rendering
    of a string SQL statement.
  id: totrans-4643
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的扩展套件[`sqlalchemy.ext.baked`](../orm/extensions/baked.html#module-sqlalchemy.ext.baked
    "sqlalchemy.ext.baked")。这个简单但不寻常的系统可以大大节省Python在构建和处理orm [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象时的开销，从查询构建到渲染字符串SQL语句。
- en: See also
  id: totrans-4644
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Baked Queries](../orm/extensions/baked.html)'
  id: totrans-4645
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[烘焙查询](../orm/extensions/baked.html)'
- en: 'References: [#3054](https://www.sqlalchemy.org/trac/ticket/3054)'
  id: totrans-4646
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3054](https://www.sqlalchemy.org/trac/ticket/3054)
- en: '**[feature] [ext]**'
  id: totrans-4647
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[特性] [扩展]**'
- en: The [`sqlalchemy.ext.automap`](../orm/extensions/automap.html#module-sqlalchemy.ext.automap
    "sqlalchemy.ext.automap") extension will now set `cascade="all, delete-orphan"`
    automatically on a one-to-many relationship/backref where the foreign key is detected
    as containing one or more non-nullable columns. This argument is present in the
    keywords passed to [`generate_relationship()`](../orm/extensions/automap.html#sqlalchemy.ext.automap.generate_relationship
    "sqlalchemy.ext.automap.generate_relationship") in this case and can still be
    overridden. Additionally, if the [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") specifies `ondelete="CASCADE"` for a
    non-nullable or `ondelete="SET NULL"` for a nullable set of columns, the argument
    `passive_deletes=True` is also added to the relationship. Note that not all backends
    support reflection of ondelete, but backends that do include PostgreSQL and MySQL.
  id: totrans-4648
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`sqlalchemy.ext.automap`](../orm/extensions/automap.html#module-sqlalchemy.ext.automap
    "sqlalchemy.ext.automap")扩展现在会自动在检测到包含一个或多个非空列的外键的一对多关系/反向引用上设置`cascade="all,
    delete-orphan"`。在这种情况下，此参数存在于传递给[`generate_relationship()`](../orm/extensions/automap.html#sqlalchemy.ext.automap.generate_relationship
    "sqlalchemy.ext.automap.generate_relationship")的关键字中，仍然可以被覆盖。此外，如果[`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")为非空或可空列指定了`ondelete="CASCADE"`或`ondelete="SET
    NULL"`，则还会将参数`passive_deletes=True`添加到关系中。请注意，并非所有后端都支持ondelete的反射，但支持反射的后端包括PostgreSQL和MySQL。'
- en: 'References: [#3210](https://www.sqlalchemy.org/trac/ticket/3210)'
  id: totrans-4649
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3210](https://www.sqlalchemy.org/trac/ticket/3210)
- en: '**[bug] [declarative]**'
  id: totrans-4650
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [声明式]**'
- en: The `__mapper_args__` dictionary is copied from a declarative mixin or abstract
    class when accessed, so that modifications made to this dictionary by declarative
    itself won’t conflict with that of other mappings. The dictionary is modified
    regarding the `version_id_col` and `polymorphic_on` arguments, replacing the column
    within with the one that is officially mapped to the local class/table.
  id: totrans-4651
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当访问时，`__mapper_args__`字典是从声明性mixin或抽象类复制过来的，因此声明性本身对此字典所做的修改不会与其他映射的冲突。关于`version_id_col`和`polymorphic_on`参数，字典被修改，用本地类/表正式映射的列替换其中的列。
- en: 'This change is also **backported** to: 0.9.5, 0.8.7'
  id: totrans-4652
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.5, 0.8.7
- en: 'References: [#3062](https://www.sqlalchemy.org/trac/ticket/3062)'
  id: totrans-4653
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3062](https://www.sqlalchemy.org/trac/ticket/3062)
- en: '**[bug] [ext]**'
  id: totrans-4654
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [扩展]**'
- en: Fixed bug in mutable extension where [`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict") did not report change events for the `setdefault()`
    dictionary operation.
  id: totrans-4655
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了可变扩展中的一个错误，[`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict")未为`setdefault()`字典操作报告更改事件。
- en: 'This change is also **backported** to: 0.9.5, 0.8.7'
  id: totrans-4656
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.5, 0.8.7
- en: 'References: [#3051](https://www.sqlalchemy.org/trac/ticket/3051), [#3093](https://www.sqlalchemy.org/trac/ticket/3093)'
  id: totrans-4657
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3051](https://www.sqlalchemy.org/trac/ticket/3051), [#3093](https://www.sqlalchemy.org/trac/ticket/3093)
- en: '**[bug] [ext]**'
  id: totrans-4658
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [扩展]**'
- en: Fixed bug where [`MutableDict.setdefault()`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict.setdefault
    "sqlalchemy.ext.mutable.MutableDict.setdefault") didn’t return the existing or
    new value (this bug was not released in any 0.8 version). Pull request courtesy
    Thomas Hervé.
  id: totrans-4659
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`MutableDict.setdefault()`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict.setdefault
    "sqlalchemy.ext.mutable.MutableDict.setdefault")未返回现有值或新值的错误（此错误未在任何0.8版本中发布）。感谢Thomas
    Hervé提供的拉取请求。
- en: 'This change is also **backported** to: 0.9.5, 0.8.7'
  id: totrans-4660
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.5, 0.8.7
- en: 'References: [#3051](https://www.sqlalchemy.org/trac/ticket/3051), [#3093](https://www.sqlalchemy.org/trac/ticket/3093)'
  id: totrans-4661
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3051](https://www.sqlalchemy.org/trac/ticket/3051), [#3093](https://www.sqlalchemy.org/trac/ticket/3093)
- en: '**[bug] [ext] [py3k]**'
  id: totrans-4662
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [扩展] [py3k]**'
- en: Fixed bug where the association proxy list class would not interpret slices
    correctly under Py3K. Pull request courtesy Gilles Dartiguelongue.
  id: totrans-4663
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关联代理列表类在Py3K下无法正确解释切片的错误。感谢Gilles Dartiguelongue提供的拉取请求。
- en: 'This change is also **backported** to: 0.9.9'
  id: totrans-4664
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.9
- en: '**[bug] [declarative]**'
  id: totrans-4665
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [声明式]**'
- en: Fixed an unlikely race condition observed in some exotic end-user setups, where
    the attempt to check for “duplicate class name” in declarative would hit upon
    a not-totally-cleaned-up weak reference related to some other class being removed;
    the check here now ensures the weakref still references an object before calling
    upon it further.
  id: totrans-4666
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在一些奇特的最终用户设置中观察到的不太可能的竞争条件，其中在声明式中检查“重复类名”时会遇到与其他被移除的类相关的未完全清理的弱引用；此处的检查现在确保弱引用在进一步调用之前仍然引用一个对象。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-4667
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.8
- en: 'References: [#3208](https://www.sqlalchemy.org/trac/ticket/3208)'
  id: totrans-4668
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3208](https://www.sqlalchemy.org/trac/ticket/3208)
- en: '**[bug] [ext]**'
  id: totrans-4669
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [扩展]**'
- en: Fixed bug in ordering list where the order of items would be thrown off during
    a collection replace event, if the reorder_on_append flag were set to True. The
    fix ensures that the ordering list only impacts the list that is explicitly associated
    with the object.
  id: totrans-4670
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了有序列表中的错误，其中在集合替换事件期间，如果将`reorder_on_append`标志设置为True，则项目的顺序会被打乱。修复确保有序列表仅影响与对象明确关联的列表。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-4671
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.8
- en: 'References: [#3191](https://www.sqlalchemy.org/trac/ticket/3191)'
  id: totrans-4672
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3191](https://www.sqlalchemy.org/trac/ticket/3191)
- en: '**[bug] [ext]**'
  id: totrans-4673
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [扩展]**'
- en: Fixed bug where [`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict") failed to implement the `update()` dictionary
    method, thus not catching changes. Pull request courtesy Matt Chisholm.
  id: totrans-4674
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict")未实现`update()`字典方法，因此未捕获更改的错误。感谢Matt Chisholm提供的拉取请求。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-4675
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.8
- en: '**[bug] [ext]**'
  id: totrans-4676
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [扩展]**'
- en: Fixed bug where a custom subclass of [`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict") would not show up in a “coerce” operation,
    and would instead return a plain [`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict"). Pull request courtesy Matt Chisholm.
  id: totrans-4677
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了自定义[`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict")的子类在“强制”操作中不会显示，并且会返回一个普通的[`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict")的错误。感谢Matt Chisholm提供的拉取请求。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-4678
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.8
- en: '**[bug] [pool]**'
  id: totrans-4679
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [池]**'
- en: Fixed bug in connection pool logging where the “connection checked out” debug
    logging message would not emit if the logging were set up using `logging.setLevel()`,
    rather than using the `echo_pool` flag. Tests to assert this logging have been
    added. This is a regression that was introduced in 0.9.0.
  id: totrans-4680
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了连接池日志记录中的错误，其中“连接已检出”调试日志消息不会在使用`logging.setLevel()`设置日志记录时发出，而不是使用`echo_pool`标志。已添加用于断言此日志记录的测试。这是在0.9.0中引入的一个回归。
- en: 'This change is also **backported** to: 0.9.8'
  id: totrans-4681
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.9.8
- en: 'References: [#3168](https://www.sqlalchemy.org/trac/ticket/3168)'
  id: totrans-4682
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3168](https://www.sqlalchemy.org/trac/ticket/3168)
- en: '**[bug] [declarative]**'
  id: totrans-4683
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [声明式]**'
- en: Fixed bug when the declarative `__abstract__` flag was not being distinguished
    for when it was actually the value `False`. The `__abstract__` flag needs to actually
    evaluate to a True value at the level being tested.
  id: totrans-4684
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当声明式`__abstract__`标志未被区分为实际值`False`时的错误。`__abstract__`标志需要在被测试的级别实际评估为True。
- en: 'This change is also **backported** to: 0.9.7'
  id: totrans-4685
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.9.7
- en: 'References: [#3097](https://www.sqlalchemy.org/trac/ticket/3097)'
  id: totrans-4686
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3097](https://www.sqlalchemy.org/trac/ticket/3097)
- en: '**[bug] [testsuite]**'
  id: totrans-4687
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [测试套件]**'
- en: In public test suite, changed to use of `String(40)` from less-supported `Text`
    in `StringTest.test_literal_backslashes`. Pullreq courtesy Jan.
  id: totrans-4688
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在公共测试套件中，从不太受支持的`Text`更改为使用`String(40)`在`StringTest.test_literal_backslashes`中。Pullreq由Jan提供。
- en: 'This change is also **backported** to: 0.9.5'
  id: totrans-4689
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.9.5
- en: '**[removed]**'
  id: totrans-4690
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[已移除]**'
- en: The Drizzle dialect has been removed from the Core; it is now available as [sqlalchemy-drizzle](https://bitbucket.org/zzzeek/sqlalchemy-drizzle),
    an independent, third party dialect. The dialect is still based almost entirely
    off of the MySQL dialect present in SQLAlchemy.
  id: totrans-4691
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Drizzle方言已从核心中移除；现在作为[sqlalchemy-drizzle](https://bitbucket.org/zzzeek/sqlalchemy-drizzle)提供，这是一个独立的第三方方言。该方言仍然几乎完全基于SQLAlchemy中存在的MySQL方言。
- en: See also
  id: totrans-4692
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Drizzle Dialect is now an External Dialect](migration_10.html#change-2984)'
  id: totrans-4693
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Drizzle方言现在是外部方言](migration_10.html#change-2984)'
