- en: MetaData / Schema
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sqlalchemy.org/en/20/faq/metadata_schema.html](https://docs.sqlalchemy.org/en/20/faq/metadata_schema.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[My program is hanging when I say `table.drop()` / `metadata.drop_all()`](#my-program-is-hanging-when-i-say-table-drop-metadata-drop-all)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Does SQLAlchemy support ALTER TABLE, CREATE VIEW, CREATE TRIGGER, Schema Upgrade
    Functionality?](#does-sqlalchemy-support-alter-table-create-view-create-trigger-schema-upgrade-functionality)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How can I sort Table objects in order of their dependency?](#how-can-i-sort-table-objects-in-order-of-their-dependency)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How can I get the CREATE TABLE/ DROP TABLE output as a string?](#how-can-i-get-the-create-table-drop-table-output-as-a-string)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How can I subclass Table/Column to provide certain behaviors/configurations?](#how-can-i-subclass-table-column-to-provide-certain-behaviors-configurations)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: My program is hanging when I say `table.drop()` / `metadata.drop_all()`
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This usually corresponds to two conditions: 1\. using PostgreSQL, which is
    really strict about table locks, and 2\. you have a connection still open which
    contains locks on the table and is distinct from the connection being used for
    the DROP statement. Heres the most minimal version of the pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Above, a connection pool connection is still checked out; furthermore, the result
    object above also maintains a link to this connection. If “implicit execution”
    is used, the result will hold this connection opened until the result object is
    closed or all rows are exhausted.
  prefs: []
  type: TYPE_NORMAL
- en: The call to `mytable.drop(engine)` attempts to emit DROP TABLE on a second connection
    procured from the [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") which will lock.
  prefs: []
  type: TYPE_NORMAL
- en: 'The solution is to close out all connections before emitting DROP TABLE:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Does SQLAlchemy support ALTER TABLE, CREATE VIEW, CREATE TRIGGER, Schema Upgrade
    Functionality?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: General ALTER support isn’t present in SQLAlchemy directly. For special DDL
    on an ad-hoc basis, the [`DDL`](../core/ddl.html#sqlalchemy.schema.DDL "sqlalchemy.schema.DDL")
    and related constructs can be used. See [Customizing DDL](../core/ddl.html) for
    a discussion on this subject.
  prefs: []
  type: TYPE_NORMAL
- en: A more comprehensive option is to use schema migration tools, such as Alembic
    or SQLAlchemy-Migrate; see [Altering Database Objects through Migrations](../core/metadata.html#schema-migrations)
    for discussion on this.
  prefs: []
  type: TYPE_NORMAL
- en: How can I sort Table objects in order of their dependency?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is available via the [`MetaData.sorted_tables`](../core/metadata.html#sqlalchemy.schema.MetaData.sorted_tables
    "sqlalchemy.schema.MetaData.sorted_tables") function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '## How can I get the CREATE TABLE/ DROP TABLE output as a string?'
  prefs: []
  type: TYPE_NORMAL
- en: 'Modern SQLAlchemy has clause constructs which represent DDL operations. These
    can be rendered to strings like any other SQL expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'To get the string specific to a certain engine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'There’s also a special form of [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") available via [`create_mock_engine()`](../core/engines.html#sqlalchemy.create_mock_engine
    "sqlalchemy.create_mock_engine") that allows one to dump an entire metadata creation
    sequence as a string, using this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The [Alembic](https://alembic.sqlalchemy.org) tool also supports an “offline”
    SQL generation mode that renders database migrations as SQL scripts.
  prefs: []
  type: TYPE_NORMAL
- en: How can I subclass Table/Column to provide certain behaviors/configurations?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    and [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    are not good targets for direct subclassing. However, there are simple ways to
    get on-construction behaviors using creation functions, and behaviors related
    to the linkages between schema objects such as constraint conventions or naming
    conventions using attachment events. An example of many of these techniques can
    be seen at [Naming Conventions](https://www.sqlalchemy.org/trac/wiki/UsageRecipes/NamingConventions).'
  prefs: []
  type: TYPE_NORMAL
- en: My program is hanging when I say `table.drop()` / `metadata.drop_all()`
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This usually corresponds to two conditions: 1\. using PostgreSQL, which is
    really strict about table locks, and 2\. you have a connection still open which
    contains locks on the table and is distinct from the connection being used for
    the DROP statement. Heres the most minimal version of the pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Above, a connection pool connection is still checked out; furthermore, the result
    object above also maintains a link to this connection. If “implicit execution”
    is used, the result will hold this connection opened until the result object is
    closed or all rows are exhausted.
  prefs: []
  type: TYPE_NORMAL
- en: The call to `mytable.drop(engine)` attempts to emit DROP TABLE on a second connection
    procured from the [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") which will lock.
  prefs: []
  type: TYPE_NORMAL
- en: 'The solution is to close out all connections before emitting DROP TABLE:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Does SQLAlchemy support ALTER TABLE, CREATE VIEW, CREATE TRIGGER, Schema Upgrade
    Functionality?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: General ALTER support isn’t present in SQLAlchemy directly. For special DDL
    on an ad-hoc basis, the [`DDL`](../core/ddl.html#sqlalchemy.schema.DDL "sqlalchemy.schema.DDL")
    and related constructs can be used. See [Customizing DDL](../core/ddl.html) for
    a discussion on this subject.
  prefs: []
  type: TYPE_NORMAL
- en: A more comprehensive option is to use schema migration tools, such as Alembic
    or SQLAlchemy-Migrate; see [Altering Database Objects through Migrations](../core/metadata.html#schema-migrations)
    for discussion on this.
  prefs: []
  type: TYPE_NORMAL
- en: How can I sort Table objects in order of their dependency?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is available via the [`MetaData.sorted_tables`](../core/metadata.html#sqlalchemy.schema.MetaData.sorted_tables
    "sqlalchemy.schema.MetaData.sorted_tables") function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '## How can I get the CREATE TABLE/ DROP TABLE output as a string?'
  prefs: []
  type: TYPE_NORMAL
- en: 'Modern SQLAlchemy has clause constructs which represent DDL operations. These
    can be rendered to strings like any other SQL expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'To get the string specific to a certain engine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'There’s also a special form of [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") available via [`create_mock_engine()`](../core/engines.html#sqlalchemy.create_mock_engine
    "sqlalchemy.create_mock_engine") that allows one to dump an entire metadata creation
    sequence as a string, using this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The [Alembic](https://alembic.sqlalchemy.org) tool also supports an “offline”
    SQL generation mode that renders database migrations as SQL scripts.
  prefs: []
  type: TYPE_NORMAL
- en: How can I subclass Table/Column to provide certain behaviors/configurations?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    and [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    are not good targets for direct subclassing. However, there are simple ways to
    get on-construction behaviors using creation functions, and behaviors related
    to the linkages between schema objects such as constraint conventions or naming
    conventions using attachment events. An example of many of these techniques can
    be seen at [Naming Conventions](https://www.sqlalchemy.org/trac/wiki/UsageRecipes/NamingConventions).'
  prefs: []
  type: TYPE_NORMAL
