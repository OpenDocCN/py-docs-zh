- en: Overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sqlalchemy.org/en/20/intro.html](https://docs.sqlalchemy.org/en/20/intro.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The SQLAlchemy SQL Toolkit and Object Relational Mapper is a comprehensive
    set of tools for working with databases and Python. It has several distinct areas
    of functionality which can be used individually or combined together. Its major
    components are illustrated below, with component dependencies organized into layers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![_images/sqla_arch_small.png](../Images/c88b81f4a190846335f16b421dda67b0.png)'
  prefs: []
  type: TYPE_IMG
- en: Above, the two most significant front-facing portions of SQLAlchemy are the
    **Object Relational Mapper (ORM)** and the **Core**.
  prefs: []
  type: TYPE_NORMAL
- en: Core contains the breadth of SQLAlchemy’s SQL and database integration and description
    services, the most prominent part of this being the **SQL Expression Language**.
  prefs: []
  type: TYPE_NORMAL
- en: The SQL Expression Language is a toolkit on its own, independent of the ORM
    package, which provides a system of constructing SQL expressions represented by
    composable objects, which can then be “executed” against a target database within
    the scope of a specific transaction, returning a result set. Inserts, updates
    and deletes (i.e. [DML](glossary.html#term-DML)) are achieved by passing SQL expression
    objects representing these statements along with dictionaries that represent parameters
    to be used with each statement.
  prefs: []
  type: TYPE_NORMAL
- en: The ORM builds upon Core to provide a means of working with a domain object
    model mapped to a database schema. When using the ORM, SQL statements are constructed
    in mostly the same way as when using Core, however the task of DML, which here
    refers to the persistence of business objects in a database, is automated using
    a pattern called [unit of work](glossary.html#term-unit-of-work), which translates
    changes in state against mutable objects into INSERT, UPDATE and DELETE constructs
    which are then invoked in terms of those objects. SELECT statements are also augmented
    by ORM-specific automations and object-centric querying capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Whereas working with Core and the SQL Expression language presents a schema-centric
    view of the database, along with a programming paradigm that is oriented around
    immutability, the ORM builds on top of this a domain-centric view of the database
    with a programming paradigm that is more explicitly object-oriented and reliant
    upon mutability. Since a relational database is itself a mutable service, the
    difference is that Core/SQL Expression language is command oriented whereas the
    ORM is state oriented.
  prefs: []
  type: TYPE_NORMAL
- en: '## Documentation Overview'
  prefs: []
  type: TYPE_NORMAL
- en: 'The documentation is separated into four sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '[SQLAlchemy Unified Tutorial](tutorial/index.html#unified-tutorial) - this
    all-new tutorial for the 1.4/2.0 series of SQLAlchemy introduces the entire library
    holistically, starting from a description of Core and working more and more towards
    ORM-specific concepts. New users, as well as users coming from the 1.x series
    of SQLAlchemy, should start here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[SQLAlchemy ORM](orm/index.html) - In this section, reference documentation
    for the ORM is presented.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[SQLAlchemy Core](core/index.html) - Here, reference documentation for everything
    else within Core is presented. SQLAlchemy engine, connection, and pooling services
    are also described here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Dialects](dialects/index.html) - Provides reference documentation for all
    [dialect](glossary.html#term-dialect) implementations, including [DBAPI](glossary.html#term-DBAPI)
    specifics.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code Examples
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Working code examples, mostly regarding the ORM, are included in the SQLAlchemy
    distribution. A description of all the included example applications is at [ORM
    Examples](orm/examples.html).
  prefs: []
  type: TYPE_NORMAL
- en: There is also a wide variety of examples involving both core SQLAlchemy constructs
    as well as the ORM on the wiki. See [Theatrum Chemicum](https://www.sqlalchemy.org/trac/wiki/UsageRecipes).
  prefs: []
  type: TYPE_NORMAL
- en: '## Installation Guide'
  prefs: []
  type: TYPE_NORMAL
- en: Supported Platforms
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'SQLAlchemy supports the following platforms:'
  prefs: []
  type: TYPE_NORMAL
- en: cPython 3.7 and higher
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python-3 compatible versions of [PyPy](http://pypy.org/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in version 2.0: SQLAlchemy now targets Python 3.7 and above.'
  prefs: []
  type: TYPE_NORMAL
- en: AsyncIO Support
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: SQLAlchemy’s `asyncio` support depends upon the [greenlet](https://pypi.org/project/greenlet/)
    project. This dependency will be installed by default on common machine platforms,
    however is not supported on every architecture and also may not install by default
    on less common architectures. See the section [Asyncio Platform Installation Notes
    (Including Apple M1)](orm/extensions/asyncio.html#asyncio-install) for additional
    details on ensuring asyncio support is present.
  prefs: []
  type: TYPE_NORMAL
- en: Supported Installation Methods
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: SQLAlchemy installation is via standard Python methodologies that are based
    on [setuptools](https://pypi.org/project/setuptools/), either by referring to
    `setup.py` directly or by using [pip](https://pypi.org/project/pip/) or other
    setuptools-compatible approaches.
  prefs: []
  type: TYPE_NORMAL
- en: Install via pip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When `pip` is available, the distribution can be downloaded from PyPI and installed
    in one step:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This command will download the latest **released** version of SQLAlchemy from
    the [Python Cheese Shop](https://pypi.org/project/SQLAlchemy) and install it to
    your system. For most common platforms, a Python Wheel file will be downloaded
    which provides native Cython / C extensions prebuilt.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to install the latest **prerelease** version, such as `2.0.0b1`, pip
    requires that the `--pre` flag be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Where above, if the most recent version is a prerelease, it will be installed
    instead of the latest released version.
  prefs: []
  type: TYPE_NORMAL
- en: Installing manually from the source distribution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When not installing from pip, the source distribution may be installed using
    the `setup.py` script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The source install is platform agnostic and will install on any platform regardless
    of whether or not Cython / C build tools are installed. As the next section [Building
    the Cython Extensions](#c-extensions) details, `setup.py` will attempt to build
    using Cython / C if possible but will fall back to a pure Python installation
    otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: '### Building the Cython Extensions'
  prefs: []
  type: TYPE_NORMAL
- en: SQLAlchemy includes [Cython](https://cython.org/) extensions which provide an
    extra speed boost within various areas, with a current emphasis on the speed of
    Core result sets.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 2.0: The SQLAlchemy C extensions have been rewritten using
    Cython.'
  prefs: []
  type: TYPE_NORMAL
- en: '`setup.py` will automatically build the extensions if an appropriate platform
    is detected, assuming the Cython package is installed. A complete manual build
    looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Source builds may also be performed using [**PEP 517**](https://peps.python.org/pep-0517/)
    techniques, such as using [build](https://pypi.org/project/build/):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: If the build of the Cython extensions fails due to Cython not being installed,
    a missing compiler or other issue, the setup process will output a warning message
    and re-run the build without the Cython extensions upon completion, reporting
    final status.
  prefs: []
  type: TYPE_NORMAL
- en: 'To run the build/install without even attempting to compile the Cython extensions,
    the `DISABLE_SQLALCHEMY_CEXT` environment variable may be specified. The use case
    for this is either for special testing circumstances, or in the rare case of compatibility/build
    issues not overcome by the usual “rebuild” mechanism:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Installing a Database API
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: SQLAlchemy is designed to operate with a [DBAPI](glossary.html#term-DBAPI) implementation
    built for a particular database, and includes support for the most popular databases.
    The individual database sections in [Dialects](dialects/index.html) enumerate
    the available DBAPIs for each database, including external links.
  prefs: []
  type: TYPE_NORMAL
- en: Checking the Installed SQLAlchemy Version
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This documentation covers SQLAlchemy version 2.0\. If you’re working on a system
    that already has SQLAlchemy installed, check the version from your Python prompt
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Next Steps
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'With SQLAlchemy installed, new and old users alike can [Proceed to the SQLAlchemy
    Tutorial](tutorial/index.html#unified-tutorial).  ## 1.x to 2.0 Migration'
  prefs: []
  type: TYPE_NORMAL
- en: 'Notes on the new API released in SQLAlchemy 2.0 is available here at [SQLAlchemy
    2.0 - Major Migration Guide](changelog/migration_20.html).  ## Documentation Overview'
  prefs: []
  type: TYPE_NORMAL
- en: 'The documentation is separated into four sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '[SQLAlchemy Unified Tutorial](tutorial/index.html#unified-tutorial) - this
    all-new tutorial for the 1.4/2.0 series of SQLAlchemy introduces the entire library
    holistically, starting from a description of Core and working more and more towards
    ORM-specific concepts. New users, as well as users coming from the 1.x series
    of SQLAlchemy, should start here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[SQLAlchemy ORM](orm/index.html) - In this section, reference documentation
    for the ORM is presented.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[SQLAlchemy Core](core/index.html) - Here, reference documentation for everything
    else within Core is presented. SQLAlchemy engine, connection, and pooling services
    are also described here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Dialects](dialects/index.html) - Provides reference documentation for all
    [dialect](glossary.html#term-dialect) implementations, including [DBAPI](glossary.html#term-DBAPI)
    specifics.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code Examples
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Working code examples, mostly regarding the ORM, are included in the SQLAlchemy
    distribution. A description of all the included example applications is at [ORM
    Examples](orm/examples.html).
  prefs: []
  type: TYPE_NORMAL
- en: There is also a wide variety of examples involving both core SQLAlchemy constructs
    as well as the ORM on the wiki. See [Theatrum Chemicum](https://www.sqlalchemy.org/trac/wiki/UsageRecipes).
  prefs: []
  type: TYPE_NORMAL
- en: '## Installation Guide'
  prefs: []
  type: TYPE_NORMAL
- en: Supported Platforms
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'SQLAlchemy supports the following platforms:'
  prefs: []
  type: TYPE_NORMAL
- en: cPython 3.7 and higher
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python-3 compatible versions of [PyPy](http://pypy.org/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in version 2.0: SQLAlchemy now targets Python 3.7 and above.'
  prefs: []
  type: TYPE_NORMAL
- en: AsyncIO Support
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: SQLAlchemy’s `asyncio` support depends upon the [greenlet](https://pypi.org/project/greenlet/)
    project. This dependency will be installed by default on common machine platforms,
    however is not supported on every architecture and also may not install by default
    on less common architectures. See the section [Asyncio Platform Installation Notes
    (Including Apple M1)](orm/extensions/asyncio.html#asyncio-install) for additional
    details on ensuring asyncio support is present.
  prefs: []
  type: TYPE_NORMAL
- en: Supported Installation Methods
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: SQLAlchemy installation is via standard Python methodologies that are based
    on [setuptools](https://pypi.org/project/setuptools/), either by referring to
    `setup.py` directly or by using [pip](https://pypi.org/project/pip/) or other
    setuptools-compatible approaches.
  prefs: []
  type: TYPE_NORMAL
- en: Install via pip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When `pip` is available, the distribution can be downloaded from PyPI and installed
    in one step:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This command will download the latest **released** version of SQLAlchemy from
    the [Python Cheese Shop](https://pypi.org/project/SQLAlchemy) and install it to
    your system. For most common platforms, a Python Wheel file will be downloaded
    which provides native Cython / C extensions prebuilt.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to install the latest **prerelease** version, such as `2.0.0b1`, pip
    requires that the `--pre` flag be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Where above, if the most recent version is a prerelease, it will be installed
    instead of the latest released version.
  prefs: []
  type: TYPE_NORMAL
- en: Installing manually from the source distribution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When not installing from pip, the source distribution may be installed using
    the `setup.py` script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The source install is platform agnostic and will install on any platform regardless
    of whether or not Cython / C build tools are installed. As the next section [Building
    the Cython Extensions](#c-extensions) details, `setup.py` will attempt to build
    using Cython / C if possible but will fall back to a pure Python installation
    otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: '### Building the Cython Extensions'
  prefs: []
  type: TYPE_NORMAL
- en: SQLAlchemy includes [Cython](https://cython.org/) extensions which provide an
    extra speed boost within various areas, with a current emphasis on the speed of
    Core result sets.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 2.0: The SQLAlchemy C extensions have been rewritten using
    Cython.'
  prefs: []
  type: TYPE_NORMAL
- en: '`setup.py` will automatically build the extensions if an appropriate platform
    is detected, assuming the Cython package is installed. A complete manual build
    looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Source builds may also be performed using [**PEP 517**](https://peps.python.org/pep-0517/)
    techniques, such as using [build](https://pypi.org/project/build/):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: If the build of the Cython extensions fails due to Cython not being installed,
    a missing compiler or other issue, the setup process will output a warning message
    and re-run the build without the Cython extensions upon completion, reporting
    final status.
  prefs: []
  type: TYPE_NORMAL
- en: 'To run the build/install without even attempting to compile the Cython extensions,
    the `DISABLE_SQLALCHEMY_CEXT` environment variable may be specified. The use case
    for this is either for special testing circumstances, or in the rare case of compatibility/build
    issues not overcome by the usual “rebuild” mechanism:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Installing a Database API
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: SQLAlchemy is designed to operate with a [DBAPI](glossary.html#term-DBAPI) implementation
    built for a particular database, and includes support for the most popular databases.
    The individual database sections in [Dialects](dialects/index.html) enumerate
    the available DBAPIs for each database, including external links.
  prefs: []
  type: TYPE_NORMAL
- en: Checking the Installed SQLAlchemy Version
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This documentation covers SQLAlchemy version 2.0\. If you’re working on a system
    that already has SQLAlchemy installed, check the version from your Python prompt
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Next Steps
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With SQLAlchemy installed, new and old users alike can [Proceed to the SQLAlchemy
    Tutorial](tutorial/index.html#unified-tutorial).
  prefs: []
  type: TYPE_NORMAL
- en: Supported Platforms
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'SQLAlchemy supports the following platforms:'
  prefs: []
  type: TYPE_NORMAL
- en: cPython 3.7 and higher
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python-3 compatible versions of [PyPy](http://pypy.org/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in version 2.0: SQLAlchemy now targets Python 3.7 and above.'
  prefs: []
  type: TYPE_NORMAL
- en: AsyncIO Support
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: SQLAlchemy’s `asyncio` support depends upon the [greenlet](https://pypi.org/project/greenlet/)
    project. This dependency will be installed by default on common machine platforms,
    however is not supported on every architecture and also may not install by default
    on less common architectures. See the section [Asyncio Platform Installation Notes
    (Including Apple M1)](orm/extensions/asyncio.html#asyncio-install) for additional
    details on ensuring asyncio support is present.
  prefs: []
  type: TYPE_NORMAL
- en: Supported Installation Methods
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: SQLAlchemy installation is via standard Python methodologies that are based
    on [setuptools](https://pypi.org/project/setuptools/), either by referring to
    `setup.py` directly or by using [pip](https://pypi.org/project/pip/) or other
    setuptools-compatible approaches.
  prefs: []
  type: TYPE_NORMAL
- en: Install via pip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When `pip` is available, the distribution can be downloaded from PyPI and installed
    in one step:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This command will download the latest **released** version of SQLAlchemy from
    the [Python Cheese Shop](https://pypi.org/project/SQLAlchemy) and install it to
    your system. For most common platforms, a Python Wheel file will be downloaded
    which provides native Cython / C extensions prebuilt.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to install the latest **prerelease** version, such as `2.0.0b1`, pip
    requires that the `--pre` flag be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Where above, if the most recent version is a prerelease, it will be installed
    instead of the latest released version.
  prefs: []
  type: TYPE_NORMAL
- en: Installing manually from the source distribution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When not installing from pip, the source distribution may be installed using
    the `setup.py` script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The source install is platform agnostic and will install on any platform regardless
    of whether or not Cython / C build tools are installed. As the next section [Building
    the Cython Extensions](#c-extensions) details, `setup.py` will attempt to build
    using Cython / C if possible but will fall back to a pure Python installation
    otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: '### Building the Cython Extensions'
  prefs: []
  type: TYPE_NORMAL
- en: SQLAlchemy includes [Cython](https://cython.org/) extensions which provide an
    extra speed boost within various areas, with a current emphasis on the speed of
    Core result sets.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 2.0: The SQLAlchemy C extensions have been rewritten using
    Cython.'
  prefs: []
  type: TYPE_NORMAL
- en: '`setup.py` will automatically build the extensions if an appropriate platform
    is detected, assuming the Cython package is installed. A complete manual build
    looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Source builds may also be performed using [**PEP 517**](https://peps.python.org/pep-0517/)
    techniques, such as using [build](https://pypi.org/project/build/):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: If the build of the Cython extensions fails due to Cython not being installed,
    a missing compiler or other issue, the setup process will output a warning message
    and re-run the build without the Cython extensions upon completion, reporting
    final status.
  prefs: []
  type: TYPE_NORMAL
- en: 'To run the build/install without even attempting to compile the Cython extensions,
    the `DISABLE_SQLALCHEMY_CEXT` environment variable may be specified. The use case
    for this is either for special testing circumstances, or in the rare case of compatibility/build
    issues not overcome by the usual “rebuild” mechanism:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Installing a Database API
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: SQLAlchemy is designed to operate with a [DBAPI](glossary.html#term-DBAPI) implementation
    built for a particular database, and includes support for the most popular databases.
    The individual database sections in [Dialects](dialects/index.html) enumerate
    the available DBAPIs for each database, including external links.
  prefs: []
  type: TYPE_NORMAL
- en: Checking the Installed SQLAlchemy Version
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This documentation covers SQLAlchemy version 2.0\. If you’re working on a system
    that already has SQLAlchemy installed, check the version from your Python prompt
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Next Steps
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With SQLAlchemy installed, new and old users alike can [Proceed to the SQLAlchemy
    Tutorial](tutorial/index.html#unified-tutorial).
  prefs: []
  type: TYPE_NORMAL
- en: '## 1.x to 2.0 Migration'
  prefs: []
  type: TYPE_NORMAL
- en: Notes on the new API released in SQLAlchemy 2.0 is available here at [SQLAlchemy
    2.0 - Major Migration Guide](changelog/migration_20.html).
  prefs: []
  type: TYPE_NORMAL
