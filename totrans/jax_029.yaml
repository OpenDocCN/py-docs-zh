- en: Type promotion semantics
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[`jax.readthedocs.io/en/latest/type_promotion.html`](https://jax.readthedocs.io/en/latest/type_promotion.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This document describes JAX’s type promotion rules–i.e., the result of `jax.numpy.promote_types()`
    for each pair of types. For some background on the considerations that went into
    the design of what is described below, see [Design of Type Promotion Semantics
    for JAX](https://jax.readthedocs.io/en/latest/jep/9407-type-promotion.html).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 'JAX’s type promotion behavior is determined via the following type promotion
    lattice:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: '![_images/type_lattice.svg](img/5bcb61d2d26437cb91bbfc4057949d61.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
- en: 'where, for example:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: '`b1` means `np.bool_`,'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`i2` means `np.int16`,'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`u4` means `np.uint32`,'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bf` means `np.bfloat16`,'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`f2` means `np.float16`,'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`c8` means `np.complex64`,'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`i*` means Python `int` or weakly-typed `int`,'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`f*` means Python `float` or weakly-typed `float`, and'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`c*` means Python `complex` or weakly-typed `complex`.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (for more about weak types, see Weakly-typed values in JAX below).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: 'Promotion between any two types is given by their [join](https://en.wikipedia.org/wiki/Join_and_meet)
    on this lattice, which generates the following binary promotion table:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '|  | b1 | u1 | u2 | u4 | u8 | i1 | i2 | i4 | i8 | bf | f2 | f4 | f8 | c8 |
    c16 | i* | f* | c* |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
- en: '| b1 | b1 | u1 | u2 | u4 | u8 | i1 | i2 | i4 | i8 | bf | f2 | f4 | f8 | c8
    | c16 | i* | f* | c* |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
- en: '| u1 | u1 | u1 | u2 | u4 | u8 | i2 | i2 | i4 | i8 | bf | f2 | f4 | f8 | c8
    | c16 | u1 | f* | c* |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
- en: '| u2 | u2 | u2 | u2 | u4 | u8 | i4 | i4 | i4 | i8 | bf | f2 | f4 | f8 | c8
    | c16 | u2 | f* | c* |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
- en: '| u4 | u4 | u4 | u4 | u4 | u8 | i8 | i8 | i8 | i8 | bf | f2 | f4 | f8 | c8
    | c16 | u4 | f* | c* |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
- en: '| u8 | u8 | u8 | u8 | u8 | u8 | f* | f* | f* | f* | bf | f2 | f4 | f8 | c8
    | c16 | u8 | f* | c* |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
- en: '| i1 | i1 | i2 | i4 | i8 | f* | i1 | i2 | i4 | i8 | bf | f2 | f4 | f8 | c8
    | c16 | i1 | f* | c* |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
- en: '| i2 | i2 | i2 | i4 | i8 | f* | i2 | i2 | i4 | i8 | bf | f2 | f4 | f8 | c8
    | c16 | i2 | f* | c* |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
- en: '| i4 | i4 | i4 | i4 | i8 | f* | i4 | i4 | i4 | i8 | bf | f2 | f4 | f8 | c8
    | c16 | i4 | f* | c* |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
- en: '| i8 | i8 | i8 | i8 | i8 | f* | i8 | i8 | i8 | i8 | bf | f2 | f4 | f8 | c8
    | c16 | i8 | f* | c* |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
- en: '| bf | bf | bf | bf | bf | bf | bf | bf | bf | bf | bf | f4 | f4 | f8 | c8
    | c16 | bf | bf | c8 |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
- en: '| f2 | f2 | f2 | f2 | f2 | f2 | f2 | f2 | f2 | f2 | f4 | f2 | f4 | f8 | c8
    | c16 | f2 | f2 | c8 |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
- en: '| f4 | f4 | f4 | f4 | f4 | f4 | f4 | f4 | f4 | f4 | f4 | f4 | f4 | f8 | c8
    | c16 | f4 | f4 | c8 |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
- en: '| f8 | f8 | f8 | f8 | f8 | f8 | f8 | f8 | f8 | f8 | f8 | f8 | f8 | f8 | c16
    | c16 | f8 | f8 | c16 |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
- en: '| c8 | c8 | c8 | c8 | c8 | c8 | c8 | c8 | c8 | c8 | c8 | c8 | c8 | c16 | c8
    | c16 | c8 | c8 | c8 |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
- en: '| c16 | c16 | c16 | c16 | c16 | c16 | c16 | c16 | c16 | c16 | c16 | c16 | c16
    | c16 | c16 | c16 | c16 | c16 | c16 |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
- en: '| i* | i* | u1 | u2 | u4 | u8 | i1 | i2 | i4 | i8 | bf | f2 | f4 | f8 | c8
    | c16 | i* | f* | c* |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
- en: '| f* | f* | f* | f* | f* | f* | f* | f* | f* | f* | bf | f2 | f4 | f8 | c8
    | c16 | f* | f* | c* |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
- en: '| c* | c* | c* | c* | c* | c* | c* | c* | c* | c* | c8 | c8 | c8 | c16 | c8
    | c16 | c* | c* | c* |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| c* | c* | c* | c* | c* | c* | c* | c* | c* | c* | c8 | c8 | c8 | c16 | c8
    | c16 | c* | c* | c* |'
- en: 'Jax’s type promotion rules differ from those of NumPy, as given by [`numpy.promote_types()`](https://numpy.org/doc/stable/reference/generated/numpy.promote_types.html#numpy.promote_types
    "(in NumPy v2.0)"), in those cells highlighted with a green background in the
    table above. There are three key classes of differences:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: JAX 的类型提升规则与 NumPy 的不同，如[`numpy.promote_types()`](https://numpy.org/doc/stable/reference/generated/numpy.promote_types.html#numpy.promote_types
    "(in NumPy v2.0)") 所示，在上述表格中以绿色背景标出的单元格中。主要有三类区别：
- en: When promoting a weakly typed value against a typed JAX value of the same category,
    JAX always prefers the precision of the JAX value. For example, `jnp.int16(1)
    + 1` will return `int16` rather than promoting to `int64` as in NumPy. Note that
    this applies only to Python scalar values; if the constant is a NumPy array then
    the above lattice is used for type promotion. For example, `jnp.int16(1) + np.array(1)`
    will return `int64`.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当将弱类型值与相同类别的 JAX 类型化值进行提升时，JAX 总是偏向于 JAX 值的精度。例如，`jnp.int16(1) + 1` 将返回 `int16`
    而不是像 NumPy 中那样提升为 `int64`。请注意，这仅适用于 Python 标量值；如果常量是 NumPy 数组，则使用上述格子结构进行类型提升。例如，`jnp.int16(1)
    + np.array(1)` 将返回 `int64`。
- en: When promoting an integer or boolean type against a floating-point or complex
    type, JAX always prefers the type of the floating-point or complex type.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当将整数或布尔类型与浮点或复数类型进行提升时，JAX 总是偏向于浮点或复数类型的类型。
- en: JAX supports the [bfloat16](https://en.wikipedia.org/wiki/Bfloat16_floating-point_format)
    non-standard 16-bit floating point type (`jax.numpy.bfloat16`), which is useful
    for neural network training. The only notable promotion behavior is with respect
    to IEEE-754 `float16`, with which `bfloat16` promotes to a `float32`.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JAX 支持[bfloat16](https://en.wikipedia.org/wiki/Bfloat16_floating-point_format)非标准的
    16 位浮点类型 (`jax.numpy.bfloat16`)，这对神经网络训练非常有用。唯一显著的提升行为是对 IEEE-754 `float16` 的处理，其中
    `bfloat16` 提升为 `float32`。
- en: The differences between NumPy and JAX are motivated by the fact that accelerator
    devices, such as GPUs and TPUs, either pay a significant performance penalty to
    use 64-bit floating point types (GPUs) or do not support 64-bit floating point
    types at all (TPUs). Classic NumPy’s promotion rules are too willing to overpromote
    to 64-bit types, which is problematic for a system designed to run on accelerators.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 和 JAX 之间的差异是因为加速设备（如 GPU 和 TPU）在使用 64 位浮点类型时要么支付显著的性能代价（GPU），要么根本不支持 64
    位浮点类型（TPU）。经典 NumPy 的提升规则过于倾向于过度提升到 64 位类型，这对设计用于加速器上运行的系统来说是个问题。
- en: JAX uses floating point promotion rules that are more suited to modern accelerator
    devices and are less aggressive about promoting floating point types. The promotion
    rules used by JAX for floating-point types are similar to those used by PyTorch.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: JAX 使用的浮点提升规则更适用于现代加速设备，并且在浮点类型的提升上更为谨慎。JAX 用于浮点类型的提升规则类似于 PyTorch 的规则。
- en: Effects of Python operator dispatch
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python 运算符分派的效果
- en: Keep in mind that Python operators like + will dispatch based on the Python
    type of the two values being added. This means that, for example, `np.int16(1)
    + 1` will promote using NumPy rules, whereas `jnp.int16(1) + 1` will promote using
    JAX rules. This can lead to potentially confusing non-associative promotion semantics
    when the two types of promotion are combined; for example with `np.int16(1) +
    1 + jnp.int16(1)`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，Python 运算符如加号（+）会根据两个待加值的 Python 类型进行分派。这意味着，例如 `np.int16(1) + 1` 将按照 NumPy
    的规则进行提升，而 `jnp.int16(1) + 1` 则按照 JAX 的规则进行提升。当两种提升类型结合使用时，可能导致令人困惑的非关联提升语义；例如
    `np.int16(1) + 1 + jnp.int16(1)`。
- en: '## Weakly-typed values in JAX'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '## JAX 中的弱类型数值'
- en: '*Weakly-typed* values in JAX can in most cases be thought of as having promotion
    behavior equivalent to that of Python scalars, such as the integer scalar `2`
    in the following:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，JAX 中的*弱类型*值可以被视为具有与 Python 标量等效的提升行为，例如以下整数标量 `2`：
- en: '[PRE0]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'JAX’s weak type framework is designed to prevent unwanted type promotion within
    binary operations between JAX values and values with no explicitly user-specified
    type, such as Python scalar literals. For example, if `2` were not treated as
    weakly-typed, the expression above would lead to an implicit type promotion:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: JAX 的弱类型框架旨在防止在 JAX 值与没有明确用户指定类型的值（如 Python 标量文字）之间的二进制操作中出现不需要的类型提升。例如，如果 `2`
    不被视为弱类型，则上述表达式将导致隐式类型提升。
- en: '[PRE1]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'When used in JAX, Python scalars are sometimes promoted to `DeviceArray` objects,
    for example during JIT compilation. To maintain the desired promotion semantics
    in this case, `DeviceArray` objects carry a `weak_type` flag that can be seen
    in an array’s string representation:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JAX 中使用时，Python 标量有时会被提升为`DeviceArray`对象，例如在 JIT 编译期间。为了在这种情况下保持所需的提升语义，`DeviceArray`对象携带一个`weak_type`标志，该标志可以在数组的字符串表示中看到：
- en: '[PRE2]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If the `dtype` is specified explicitly, it will instead result in a standard
    strongly-typed array value:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果显式指定了`dtype`，则会导致标准的强类型数组值：
- en: '[PRE3]  ## Strict dtype promotion'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE3]  ## 严格的dtype提升'
- en: 'In some contexts it can be useful to disable implicit type promotion behavior,
    and instead require all promotions to be explicit. This can be done in JAX by
    setting the `jax_numpy_dtype_promtion` flag to `''strict''`. Locally, it can be
    done with acontext manager:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，禁用隐式类型提升行为并要求所有提升都是显式的可能很有用。可以通过在 JAX 中将`jax_numpy_dtype_promotion`标志设置为`'strict'`来实现。在本地，可以通过上下文管理器来完成：
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'For convenience, strict promotion mode will still allow safe weakly-typed promotions,
    so you can still write code code that mixes JAX arrays and Python scalars:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便起见，严格提升模式仍将允许安全的弱类型提升，因此您仍然可以编写混合使用 JAX 数组和 Python 标量的代码：
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If you would prefer to set the configuration globally, you can do so using
    the standard configuration update:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望全局设置配置，则可以使用标准配置更新：
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To restore the default standard type promotion, set this configuration to `''standard''`:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 要恢复默认的标准类型提升，请将此配置设置为`'standard'`：
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
