- en: Shape polymorphism
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 形状多态性
- en: 原文：[`jax.readthedocs.io/en/latest/export/shape_poly.html`](https://jax.readthedocs.io/en/latest/export/shape_poly.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[`jax.readthedocs.io/en/latest/export/shape_poly.html`](https://jax.readthedocs.io/en/latest/export/shape_poly.html)
- en: 'When JAX is used in JIT mode, a function will be traced, lowered to StableHLO,
    and compiled for each combination of input types and shapes. After exporting a
    function and deserializing it on another system we don’t have the Python sources
    available anymore, so we cannot re-trace and re-lower it. **Shape polymorphism**
    is a feature of JAX export to allow some exported functions to be used for a whole
    family of input shapes. These functions are traced and lowered once, during exporting,
    and `Exported` object contains the information needed to be able to compile and
    execute the function on many concrete input shapes. We do this by specifying shapes
    that contain dimension variables (symbolic shapes) when exporting, as in the following
    example:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用JIT模式的JAX时，函数将被跟踪、降级到StableHLO，并针对每种输入类型和形状组合进行编译。在导出函数并在另一个系统上反序列化后，我们就无法再使用Python源代码，因此无法重新跟踪和重新降级它。**形状多态性**是JAX导出的一个特性，允许一些导出函数用于整个输入形状家族。这些函数在导出时只被跟踪和降级一次，并且`Exported`对象包含编译和执行该函数所需的信息，可以在许多具体输入形状上进行编译和执行。我们通过在导出时指定包含维度变量（符号形状）的形状来实现这一点，例如下面的示例：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note that such functions are still re-compiled on demand for each concrete input
    shapes they are invoked on. Only the tracing and the lowering are saved.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，此类函数仍会按需为每个具体输入形状重新编译。仅跟踪和降级是保存的。
- en: The `jax.export.symbolic_shape()` is used in the above example to parse a string
    representation of a symbolic shape into dimension expressions objects (of type
    `_DimExpr`) that are usable in place of integer constants to construct shapes.
    The dimension expression objects overload most integer operators, so you can use
    them as you’d use integer constants in most cases. See Computing with dimension
    variables for more details.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，`jax.export.symbolic_shape()` 用于解析符号形状的字符串表示，将其转换为可以用于构造形状的维度表达式对象（类型为
    `_DimExpr`）。维度表达式对象重载了大多数整数运算符，因此在大多数情况下可以像使用整数常量一样使用它们。详细信息请参阅使用维度变量进行计算。
- en: 'Additionally, we provide the `jax.export.symbolic_args_specs()` that can be
    used to construct pytrees of `jax.ShapeDtypeStruct` objects based on a polymorphic
    shape specification:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，我们提供了`jax.export.symbolic_args_specs()`，可用于根据多态形状规范构建`jax.ShapeDtypeStruct`对象的pytrees：
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note how the polymorphic shape specification `"a, ..."` contains the placeholder
    `...` to be filled from the concrete shapes of the concrete shapes of the arguments
    `(x, y)`. The placeholder `...` stands for 0 or more dimensions, while the placeholder
    `_` stands for one dimension. The `jax.export.symbolic_args_specs()` supports
    pytrees of arguments, which are used to fill-in the dtypes and any placeholders.
    The function will construct a pytree of argument specifications (`jax.ShapeDtypeStruct`)
    matching the structure of the arguments passed to it. The polymorphic shapes specification
    can be a pytree prefix in cases where one specification should apply to multiple
    arguments, as in the above example. See [how optional parameters are matched to
    arguments](https://jax.readthedocs.io/en/latest/pytrees.html#applying-optional-parameters-to-pytrees).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 注意多态形状规范中的 `"a, ..."` 如何包含占位符 `...`，以从参数 `(x, y)` 的具体形状中填充。占位符 `...` 代表0个或多个维度，而占位符
    `_` 代表一个维度。`jax.export.symbolic_args_specs()` 支持参数的pytrees，用于填充dtypes和任何占位符。该函数将构造与传递给它的参数结构相匹配的参数规范pytree
    (`jax.ShapeDtypeStruct`)。在某些情况下，多个参数应用相同规范的前缀，如上例所示。请参阅[如何将可选参数匹配到参数](https://jax.readthedocs.io/en/latest/pytrees.html#applying-optional-parameters-to-pytrees)。
- en: 'A few examples of shape specifications:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 几个形状规范的示例：
- en: '`("(b, _, _)", None)` can be used for a function with two arguments, the first
    being a 3D array with a batch leading dimension that should be symbolic. The other
    dimensions for the first argument and the shape of the second argument are specialized
    based on the actual arguments. Note that the same specification would work if
    the first argument is a pytree of 3D arrays, all with the same leading dimension
    but possibly with different trailing dimensions. The value `None` for the second
    arugment means that the argument is not symbolic. Equivalently, one can use `...`.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`("(b, _, _)", None)` 可以用于具有两个参数的函数，第一个是具有应为符号的批处理前导维度的三维数组。基于实际参数专门化第一个参数的其他维度和第二个参数的形状。请注意，如果第一个参数是具有相同前导维度但可能具有不同尾部维度的多个三维数组的
    pytree，则相同的规范也适用。第二个参数的值`None`表示该参数不是符号化的。等效地，可以使用`...`。'
- en: '`("(batch, ...)", "(batch,)")` specifies that the two arguments have matching
    leading dimensions, the first argument has rank at least 1, and the second has
    rank 1.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`("(batch, ...)", "(batch,)")` 指定两个参数具有匹配的前导维度，第一个参数至少具有秩为 1，第二个具有秩为 1。'
- en: Correctness of shape polymorphism
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 形状多态的正确性
- en: 'We want to trust that the exported program produces the same results as the
    original JAX program when compiled and executed for any applicable concrete shapes.
    More precisely:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望信任导出的程序在编译和执行适用于任何具体形状时产生与原始 JAX 程序相同的结果。更确切地说：
- en: 'For any JAX function `f` and any argument specification `arg_spec` containing
    a symbolic shape, and any concrete argument `arg` whose shape matches `arg_spec`:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何 JAX 函数`f`和包含符号形状的参数规范`arg_spec`，以及任何形状与`arg_spec`匹配的具体参数`arg`：
- en: 'If the JAX native execution succeeds on the concrete argument: `res = f(arg)`,'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 JAX 本地执行在具体参数上成功：`res = f(arg)`，
- en: 'and if the exporting succeeds with symbolic shapes: `exp = export.export(f)(arg_spec)`,'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果导出使用符号形状成功：`exp = export.export(f)(arg_spec)`，
- en: 'then compiling and running the export will succeed with the same result: `res
    == exp.call(arg)`'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编译和运行导出程序将会成功并得到相同的结果：`res == exp.call(arg)`
- en: It is crucial to understand that `f(arg)` has the freedom to re-invoke the JAX
    tracing machinery, and in fact it does so for each distinct concrete `arg` shape,
    while the execution of `exp.call(arg)` cannot use JAX tracing anymore (this execution
    may happen in an environment where the source code of `f` is not available).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 非常重要的是理解`f(arg)`有自由重新调用 JAX 追踪机制，实际上对于每个不同的具体`arg`形状都会这样做，而`exp.call(arg)`的执行不能再使用
    JAX 追踪（这种执行可能发生在无法访问`f`源代码的环境中）。
- en: Ensuring this form of correctness is hard, and in the hardest cases exporting
    fails. The rest of this chapter describes how to handle these failures.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 确保这种正确性形式是困难的，在最困难的情况下，导出会失败。本章的其余部分描述了如何处理这些失败。
- en: '## Computing with dimension variables'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '## 使用维度变量进行计算'
- en: JAX keeps track of the shapes of all intermediate results. When those shapes
    depend on dimension variables JAX computes them as symbolic dimension expressions
    involving dimension variables. Dimension variables stand for integer values greater
    or equal to 1. The symbolic expressions can represent the result of applying arithmetic
    operators (add, sub, mul, floordiv, mod, including the NumPy variants `np.sum`,
    `np.prod`, etc.) **on dimension expressions and integers** (`int`, `np.int`, or
    anything convertible by `operator.index`). These symbolic dimensions can then
    be used in shape-parameters of JAX primitives and APIs, e.g., in `jnp.reshape`,
    `jnp.arange`, slicing indices, etc.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: JAX 跟踪所有中间结果的形状。当这些形状依赖于维度变量时，JAX 将它们计算为涉及维度变量的符号形状表达式。维度变量代表大于或等于 1 的整数值。这些符号表达式可以表示应用算术运算符（add、sub、mul、floordiv、mod，包括
    NumPy 变体 `np.sum`、`np.prod` 等）**在维度表达式和整数上**的结果（`int`、`np.int`，或者通过`operator.index`可转换的任何内容）。这些符号维度随后可以在
    JAX 原语和 API 的形状参数中使用，例如在`jnp.reshape`、`jnp.arange`、切片索引等。
- en: 'For example, in the following code to flatten a 2D array, the computation `x.shape[0]
    * x.shape[1]` computes the symbolic dimension `4 * b` as the new shape:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在以下代码中展平二维数组时，计算`x.shape[0] * x.shape[1]`将计算符号维度`4 * b`作为新形状：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: It is possible to convert dimension expressions explicitly to JAX arrays, with
    `jnp.array(x.shape[0])` or even `jnp.array(x.shape)`. The result of these operations
    can be used as regular JAX arrays, bug cannot be used anymore as dimensions in
    shapes.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 可以将维度表达式明确转换为 JAX 数组，例如`jnp.array(x.shape[0])`甚至`jnp.array(x.shape)`。这些操作的结果可以用作常规的
    JAX 数组，但不能再作为形状中的维度使用。
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'When a symbolic dimension is used in arithmetic operations with **non-integers**,
    e.g., `float`, `np.float`, `np.ndarray`, or JAX arrays, it is automatically converted
    to a JAX array using `jnp.array`. For example, in the function below all occurrences
    of `x.shape[0]` are converted implicitly to `jnp.array(x.shape[0])` because they
    are involved in operations with non-integer scalars or with JAX arrays:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当符号维度与**非整数**（如 `float`、`np.float`、`np.ndarray` 或 JAX 数组）进行算术运算时，它会自动转换为 JAX
    数组，使用 `jnp.array`。例如，在下面的函数中，`x.shape[0]` 的所有出现都会被隐式转换为 `jnp.array(x.shape[0])`，因为它们与非整数标量或
    JAX 数组参与了运算：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Another typical example is when computing averages (observe how `x.shape[0]`
    is automatically turned into a JAX array):'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个典型的例子是计算平均值（注意 `x.shape[0]` 如何自动转换为 JAX 数组）：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Errors in presence of shape polymorphism
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 存在形状多态性的错误
- en: 'Most JAX code assumes that the shapes of JAX arrays are tuples of integers,
    but with shape polymorphism some dimensions may be symbolic expressions. This
    can lead to a number of errors. For example, we can have the usual JAX shape check
    errors:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数 JAX 代码假定 JAX 数组的形状是整数元组，但是使用形状多态性时，某些维度可能是符号表达式。这可能导致多种错误。例如，我们可以遇到通常的 JAX
    形状检查错误：
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We can fix the above matmul example by specifying that the argument has shape
    `(v, v)`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过指定参数的形状`(v, v)`来修复上述矩阵乘法示例。
- en: Comparison of symbolic dimensions is partially supported
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 部分支持符号维度的比较
- en: 'Inside JAX there are a number of equality and inequality comparisons involving
    shapes, e.g., for doing shape checking or even for choosing the implementation
    for some primitives. Comparisons are supported as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JAX 内部存在多个形状比较的相等性和不等式比较，例如用于形状检查或甚至用于为某些原语选择实现。比较支持如下：
- en: 'equality is supported with a caveat: if the two symbolic dimensions denote
    the same value under all valuations for dimension variables, then equality evaluates
    to `True`, e.g., for `b + b == 2*b`; otherwise the equality evaluates to `False`.
    See below for a discussion of important consequences of this behavior.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持等式，但有一个注意事项：如果两个符号维度在所有维度变量的赋值下都表示相同的值，则等式求值为 `True`，例如对于 `b + b == 2*b`；否则等式求值为
    `False`。关于此行为的重要后果，请参见下文讨论。
- en: disequality is always the negation of equality.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不相等总是等于等式的否定。
- en: inequality is partially supported, in a similar way as partial equality. However,
    in this case we take into consideration that dimension variables range over strictly
    positive integers. E.g., `b >= 1`, `b >= 0`, `2 * a + b >= 3` are `True`, while
    `b >= 2`, `a >= b`, `a - b >= 0` are inconclusive and result in an exception.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不等式部分支持，类似于部分等式。然而，在这种情况下，我们考虑维度变量只取严格正整数。例如，`b >= 1`、`b >= 0`、`2 * a + b >=
    3` 是 `True`，而 `b >= 2`、`a >= b`、`a - b >= 0` 是不确定的并会导致异常。
- en: In cases where a comparison operation cannot be resolve to a boolean, we raise
    `InconclusiveDimensionOperation`. E.g.,
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在无法将比较操作解析为布尔值的情况下，我们会引发 `InconclusiveDimensionOperation`。例如，
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If you do get a `InconclusiveDimensionOperation`, you can try several strategies:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果出现 `InconclusiveDimensionOperation`，您可以尝试几种策略：
- en: If your code uses the built-in `max` or `min`, or the `np.max` or `np.min` then
    you can replace those with `core.max_dim` and `core.min_dim`, which have the effect
    of delaying the inequality comparison to the compilation time, when shapes become
    known.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您的代码使用内置的 `max` 或 `min`，或者使用 `np.max` 或 `np.min`，那么可以将它们替换为 `core.max_dim`
    和 `core.min_dim`，这样可以将不等式比较延迟到编译时，当形状已知时。
- en: Try to rewrite conditionals using `core.max_dim` and `core.min_dim`, e.g., instead
    of `d if d > 0 else 0` you can write `core.max_dim(d, 0)`.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试使用 `core.max_dim` 和 `core.min_dim` 重写条件语句，例如，代替 `d if d > 0 else 0`，您可以写成
    `core.max_dim(d, 0)`。
- en: Try to rewrite the code to be less dependent on the fact that dimensions should
    be integers, and rely on the fact that symbolic dimensions duck-type as integers
    for most arithmetic operations. E.g., instead of `int(d) + 5` write `d + 5`.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试重写代码，减少对维度应为整数的依赖，并依赖于符号维度在大多数算术运算中作为整数的鸭子类型。例如，代替 `int(d) + 5` 写成 `d + 5`。
- en: Specify symbolic constraints, as explained below.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按照下面的说明指定符号约束。
- en: User-specified symbolic constraints
  id: totrans-46
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 用户指定的符号约束
- en: 'By default, JAX assumes that all dimension variables range over values greater-or-equal
    to 1, and it tries to derive other simple inequalities from that, e.g.:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，JAX 假定所有维度变量的取值大于或等于 1，并试图从中推导出其他简单的不等式，例如：
- en: '`a + 2 >= 3`,'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`a + 2 >= 3`,'
- en: '`a * 2 >= 1`,'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`a * 2 >= 1`,'
- en: '`a + b + c >= 3`,'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`a + b + c >= 3`,'
- en: '`a // 4 >= 0`, `a**2 >= 1`, and so on.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`a // 4 >= 0`，`a**2 >= 1`，等等。'
- en: You can avoid some inequality comparison failures if you change the symbolic
    shape specifications to add **implicit** constraints for dimension sizes. E.g.,
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果将符号形状规范更改为维度大小的**隐式**约束，可以避免一些不等比较失败。例如，
- en: You can use `2*b` for a dimension to constrain it to be even and greater or
    equal to 2.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以使用 `2*b` 作为维度来约束它为偶数且大于或等于 2。
- en: You can use `b + 15` for a dimension to constrain it to be at least 16\. E.g.,
    the following code would fail without the `+ 15` part, because JAX will want to
    verify that slice sizes are at most as large as the axis size.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以使用 `b + 15` 作为维度来约束它至少为 16。例如，如果没有 `+ 15` 部分，以下代码会失败，因为 JAX 将希望验证切片大小至多不超过轴大小。
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Such implicit symbolic constraints are used for deciding comparisons and are
    checked at compile time, as explained below.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这些隐式符号约束用于决定比较，并且在编译时检查，如下所述。
- en: 'You can also specify **explicit** symbolic constraints:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以指定**显式**符号约束：
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The constraints form a conjunction together with the implicit constraints.
    You can specify `>=`, `<=`, and `==` constraints. At the moment, JAX has limited
    support for reasoning with symbolic constraints:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 约束与隐式约束一起形成一个连接。你可以指定 `>=`、`<=` 和 `==` 约束。目前，JAX 对符号约束的推理支持有限：
- en: You get the most from constraints of the form of a variable being greater-or-equal
    or less-or-equal to a constant. For example, from the constraints that `a >= 16`
    and `b >= 8` we can infer that `a + 2*b >= 32`.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于形式为变量大于或等于或小于或等于常数的约束，你可以得到最大的功效。例如，从 `a >= 16` 和 `b >= 8` 的约束中，我们可以推断出 `a
    + 2*b >= 32`。
- en: You get limited power when the constraint involves more complex expressions,
    e.g., from `a >= b + 8` we can infer that `a - b >= 8` but not that `a >= 9`.
    We may improve somewhat this area in the future.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当约束涉及更复杂的表达式时，例如从 `a >= b + 8` 我们可以推断出 `a - b >= 8`，但不能推断出 `a >= 9`。我们可能会在未来在这个领域有所改进。
- en: Equality constraints are treated as normalization rules. E.g., `floordiv(a,
    b) = c` works by replacing all occurences of the left-hand-side with the right-hand-side.
    You can only have equality constraints where the left-hand-side is a multiplication
    of factors, e.g, `a * b`, or `4 * a`, or `floordiv(a, b)`. Thus, the left-hand-side
    cannot contain addition or subtraction at the top-level.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 等式约束被视为归一化规则。例如，`floordiv(a, b) = c` 通过将所有左侧的出现替换为右侧来工作。只能有左侧是因子乘积的等式约束，例如 `a
    * b`，或 `4 * a`，或 `floordiv(a, b)`。因此，左侧不能包含顶层的加法或减法。
- en: 'The symbolic constraints can also help to work around the limitations in the
    JAX reasoning mechanisms. For example, in the code below JAX will attempt to prove
    that the slice size `x.shape[0] % 3`, which is the symbolic expression `mod(b,
    3)`, is less or equal to the axis size, which is `b`. This happens to be true
    for all strictly positive values of `b`, but it is not something JAX’s symbolic
    comparison rules can prove. Hence the following code raises an error:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 符号约束还可以帮助绕过 JAX 推理机制中的限制。例如，在下面的代码中，JAX 将尝试证明切片大小 `x.shape[0] % 3`，即符号表达式 `mod(b,
    3)`，小于或等于轴大小 `b`。对于所有严格正值的 `b` 来说，这是真的，但这并不是 JAX 符号比较规则能够证明的。因此，以下代码会引发错误：
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'One option here would be to restrict the code to work only on axis sizes that
    are multiple of `3` (by replacing `b` with `3*b` in the shape). Then, JAX would
    be able to simplify the modulo operation `mod(3*b, 3)` to `0`. Another option
    is to add a symbolic constraint with the exact inconclusive inequality that JAX
    is attempting to prove:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 一种选择是将代码限制为仅在轴大小是 `3` 的倍数上运行（通过在形状中用 `3*b` 替换 `b`）。然后，JAX 将能够将模运算 `mod(3*b,
    3)` 简化为 `0`。另一种选择是添加一个带有确切不确定不等式的符号约束，JAX 正试图证明：
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Just like the implicit constraints, the explicit symbolic constraints are checked
    at compile time, using the same mechanism as explained below.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 就像隐式约束一样，显式符号约束在编译时使用相同的机制进行检查，如下所述。
- en: Symbolic dimension scopes
  id: totrans-68
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 符号维度范围
- en: 'The symbolic constraints are stored in αn `jax.export.SymbolicScope` object,
    which is created implicitly for each call to `jax.export.symbolic_shapes()`. You
    must be careful to not mix symbolic expressions that use different scopes. For
    example, the following code will fail because `a1` and `a2` use different scopes
    (created by different invocations of `jax.export.symbolic_shape()`):'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 符号约束存储在一个αn `jax.export.SymbolicScope`对象中，它会隐式地为每次调用`jax.export.symbolic_shapes()`创建。您必须小心，不要混合使用不同范围的符号表达式。例如，下面的代码将失败，因为`a1`和`a2`使用了不同的范围（由不同调用`jax.export.symbolic_shape()`创建）：
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The symbolic expressions that originate from a single call to `jax.export.symbolic_shape()`
    share a scope and can be mixed up in arithmetic operations. The result would also
    share the same scope.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 源自单次调用`jax.export.symbolic_shape()`的符号表达式共享一个范围，并且可以在算术操作中混合使用。结果也将共享相同的范围。
- en: 'You can re-use scopes:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以重复使用范围：
- en: '[PRE13]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You can also create scopes explicitly:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以显式创建范围：
- en: '[PRE14]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: JAX tracing uses caches keyed partially by shapes, and symbolic shapes that
    are printed identically will be considered distinct if they use different scopes.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 'JAX跟踪使用部分以形状为键的缓存，并且如果它们使用不同的范围，则打印相同的符号形状将被视为不同的。 '
- en: Caveat for equality comparisons
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 相等性比较的注意事项
- en: The equality comparison returns `False` for `b + 1 == b` or `b == 0` (in which
    case it is certain that the dimensions are different for all values of the dimension
    variables), but also for `b == 1` and for `a == b`. This is unsound, and we ought
    to raise `core.InconclusiveDimensionOperation` because under some valuations the
    result should be `True` and under other valuations it should be `False`. We choose
    to make equality total thus allowing unsoundness because otherwise we may get
    spurious errors in presence of hash collisions when hashing dimension expressions
    or objects that include them (shapes, `core.AbstractValue`, `core.Jaxpr`). Besides
    the hashing errors, a partial semantics of equality leads to errors for the following
    expressions `b == a or b == b` or `b in [a, b]` even though the error is avoided
    if we change the order of the comparisons.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 相等比较返回`False`，对于`b + 1 == b`或`b == 0`（在这种情况下，对于所有维度变量的值，维度肯定不同），但对于`b == 1`和`a
    == b`也是如此。这是不稳定的，我们应该引发`core.InconclusiveDimensionOperation`，因为在某些估值下结果应该是`True`，在其他估值下应该是`False`。我们选择使相等性变得全面，从而允许不稳定性，因为否则在哈希碰撞存在时（哈希维度表达式或包含它们的对象时，如形状，`core.AbstractValue`，`core.Jaxpr`），我们可能会遇到虚假错误。除了哈希错误外，相等性的部分语义还会导致以下表达式的错误`b
    == a or b == b`或`b in [a, b]`，即使我们改变比较的顺序也能避免错误。
- en: 'Code of the form `if x.shape[0] != 1: raise NiceErrorMessage` is sound even
    with this treatment of equality, but code of the form `if x.shape[0] != 1: return
    1` is unsound.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '形式为`if x.shape[0] != 1: raise NiceErrorMessage`的代码在处理相等性时也是合理的，但形式为`if x.shape[0]
    != 1: return 1`的代码是不稳定的。'
- en: Dimension variables must be solvable from the input shapes
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 维度变量必须能够从输入形状中解决
- en: Currently, the only way to pass the values of dimension variables when an exported
    object is invoked is indirectly through the shapes of the array arguments. E.g.,
    the value of `b` can be inferred at the call site from the shape of the first
    argument of type `f32[b]`. This works well for most use cases, and it mirrors
    the calling convention of JIT functions.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，当调用导出对象时，通过数组参数的形状间接传递维度变量的值是唯一的方法。例如，可以在调用类型为`f32[b]`的第一个参数的形状中推断出`b`的值。这对大多数用例都很有效，并且它反映了JIT函数的调用约定。
- en: 'Sometimes you may want to export a function parameterized by an integer values
    that determines some shapes in the program. For example, we may want to export
    the function `my_top_k` defined below, parameterized by the value of `k`, which
    determined the shape of the result. The following attempt will lead to an error
    since the dimension variable `k` cannot be derived from the shape of the input
    `x: i32[4, 10]`:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '有时您可能希望导出一个由整数值参数化的函数，这些值确定程序中的某些形状。例如，我们可能希望导出下面定义的函数`my_top_k`，其由值`k`参数化，该值确定了结果的形状。下面的尝试将导致错误，因为维度变量`k`不能从输入`x:
    i32[4, 10]`的形状中推导出来：'
- en: '[PRE15]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In the future, we may add an additional mechanism to pass the values of dimension
    variables, besides implicitly through the input shapes. Meanwhile, the workaround
    for the above use case is to replace the function parameter `k` with an array
    of shape `(0, k)`, so that `k` can be derived from the input shape of an array.
    The first dimension is 0 to ensure that the whole array is empty and there is
    no performance penalty when we call the exported function.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 未来，我们可能会添加额外的机制来传递维度变量的值，除了通过输入形状隐式传递外。与此同时，解决上述用例的方法是将函数参数`k`替换为形状为`(0, k)`的数组，这样`k`可以从数组的输入形状中推导出来。第一个维度为0是为了确保整个数组为空，在调用导出函数时不会有性能惩罚。
- en: '[PRE16]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Another situation when you may get an error is when some dimension variables
    do appear in the input shapes, but in a non-linear expression that JAX cannot
    currently solve:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种可能出现错误的情况是一些维度变量出现在输入形状中，但以JAX目前无法解决的非线性表达式形式出现：
- en: '[PRE17]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Shape assertion errors
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 形状断言错误
- en: JAX assumes that dimension variables range over strictly positive integers,
    and this assumption is checked when the code is compiled for concrete input shapes.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: JAX假设维度变量在严格正整数范围内，这一假设在为具体输入形状编译代码时被检查。
- en: 'For example, given the symbolic input shape `(b, b, 2*d)`, JAX will generate
    code to check the following assertions when invoked with actual argument `arg`:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，对于符号输入形状`(b, b, 2*d)`，当使用实际参数`arg`调用时，JAX将生成代码来检查以下断言：
- en: '`arg.shape[0] >= 1`'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`arg.shape[0] >= 1`'
- en: '`arg.shape[1] == arg.shape[0]`'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`arg.shape[1] == arg.shape[0]`'
- en: '`arg.shape[2] % 2 == 0`'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`arg.shape[2] % 2 == 0`'
- en: '`arg.shape[2] // 2 >= 1`'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`arg.shape[2] // 2 >= 1`'
- en: 'For example, here is the error we get when we call the exported on an argument
    of shape `(3, 3, 5)`:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这是在对形状为`(3, 3, 5)`的参数调用导出函数时得到的错误：
- en: '[PRE18]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: These errors arise in a pre-processing step before the compilation.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这些错误出现在编译之前的预处理步骤中。
- en: Division of symbolic dimensions is partially supported
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 部分支持符号维度的除法
- en: JAX will attempt to simplify division and modulo operations, e.g., `(a * b +
    a) // (b + 1) == a` and `6*a + 4 % 3 == 1`. In particular, JAX will handle the
    cases when either (a) there is no remainder, or (b) the divisor is a constant
    in which case there may be a constant remainder.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: JAX将尝试简化除法和取模运算，例如`(a * b + a) // (b + 1) == a`和`6*a + 4 % 3 == 1`。特别地，JAX会处理以下情况：要么(a)没有余数，要么(b)除数是一个常数，此时可能有一个常数余数。
- en: 'For example, the code below results in a division error when trying to compute
    the inferred dimension for a `reshape` operation:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，尝试计算`reshape`操作的推断维度时，以下代码会导致除法错误：
- en: '[PRE19]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Note that the following will succeed:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 注意以下操作将成功：
- en: '[PRE20]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
