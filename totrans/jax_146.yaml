- en: jax.experimental.pjit module
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: jax.experimental.pjit 模块
- en: 原文：[`jax.readthedocs.io/en/latest/jax.experimental.pjit.html`](https://jax.readthedocs.io/en/latest/jax.experimental.pjit.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[`jax.readthedocs.io/en/latest/jax.experimental.pjit.html`](https://jax.readthedocs.io/en/latest/jax.experimental.pjit.html)
- en: '## API'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '## API'
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Makes `fun` compiled and automatically partitioned across multiple devices.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 使`fun`编译并自动跨多设备分区。
- en: 'NOTE: This function is now equivalent to jax.jit please use that instead. The
    returned function has semantics equivalent to those of `fun`, but is compiled
    to an XLA computation that runs across multiple devices (e.g. multiple GPUs or
    multiple TPU cores). This can be useful if the jitted version of `fun` would not
    fit in a single device’s memory, or to speed up `fun` by running each operation
    in parallel across multiple devices.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：此函数现在等同于 jax.jit，请改用其代替。返回的函数语义与`fun`相同，但编译为在多个设备（例如多个 GPU 或多个 TPU 核心）上并行运行的
    XLA 计算。如果`fun`的 jitted 版本无法适应单个设备的内存，或者为了通过在多个设备上并行运行每个操作来加速`fun`，这将非常有用。
- en: The partitioning over devices happens automatically based on the propagation
    of the input partitioning specified in `in_shardings` and the output partitioning
    specified in `out_shardings`. The resources specified in those two arguments must
    refer to mesh axes, as defined by the `jax.sharding.Mesh()` context manager. Note
    that the mesh definition at `pjit()` application time is ignored, and the returned
    function will use the mesh definition available at each call site.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 设备上的分区自动基于`in_shardings`中指定的输入分区传播以及`out_shardings`中指定的输出分区进行。这两个参数中指定的资源必须引用由`jax.sharding.Mesh()`上下文管理器定义的网格轴。请注意，`pjit()`应用时的网格定义将被忽略，并且返回的函数将使用每个调用站点可用的网格定义。
- en: Inputs to a `pjit()`’d function will be automatically partitioned across devices
    if they’re not already correctly partitioned based on `in_shardings`. In some
    scenarios, ensuring that the inputs are already correctly pre-partitioned can
    increase performance. For example, if passing the output of one `pjit()`’d function
    to another `pjit()`’d function (or the same `pjit()`’d function in a loop), make
    sure the relevant `out_shardings` match the corresponding `in_shardings`.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 未经正确分区的`pjit()`函数输入将自动跨设备分区。在某些情况下，确保输入已经正确预分区可能会提高性能。例如，如果将一个`pjit()`函数的输出传递给另一个`pjit()`函数（或者在循环中使用同一个`pjit()`函数），请确保相关的`out_shardings`与相应的`in_shardings`匹配。
- en: Note
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '**Multi-process platforms:** On multi-process platforms such as TPU pods, `pjit()`
    can be used to run computations across all available devices across processes.
    To achieve this, `pjit()` is designed to be used in SPMD Python programs, where
    every process is running the same Python code such that all processes run the
    same `pjit()`’d function in the same order.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**多进程平台：** 在诸如 TPU pods 的多进程平台上，`pjit()`可用于跨所有可用设备和进程运行计算。为实现此目的，`pjit()`设计为用于
    SPMD Python 程序，其中每个进程运行相同的 Python 代码，以便所有进程按相同顺序运行相同的`pjit()`函数。'
- en: When running in this configuration, the mesh should contain devices across all
    processes. All inputs arguments must be globally shaped. `fun` will still be executed
    across *all* devices in the mesh, including those from other processes, and will
    be given a global view of the data spread across multiple processes as a single
    array.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在此配置中运行时，网格应包含跨所有进程的设备。所有输入参数必须具有全局形状。`fun`仍将在网格中的*所有*设备上执行，包括来自其他进程的设备，并且将以全局视图处理跨多个进程展布的数据作为单个数组。
- en: The SPMD model also requires that the same multi-process `pjit()`’d functions
    must be run in the same order on all processes, but they can be interspersed with
    arbitrary operations running in a single process.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: SPMD 模型还要求所有进程中运行的相同多进程`pjit()`函数必须按相同顺序运行，但可以与在单个进程中运行的任意操作交替进行。
- en: 'Parameters:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**fun** ([*Callable*](https://docs.python.org/3/library/typing.html#typing.Callable
    "(in Python v3.12)")) – Function to be compiled. Should be a pure function, as
    side-effects may only be executed once. Its arguments and return value should
    be arrays, scalars, or (nested) standard Python containers (tuple/list/dict) thereof.
    Positional arguments indicated by `static_argnums` can be anything at all, provided
    they are hashable and have an equality operation defined. Static arguments are
    included as part of a compilation cache key, which is why hash and equality operators
    must be defined.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**fun**（[*Callable*](https://docs.python.org/3/library/typing.html#typing.Callable
    "(在 Python v3.12 中)")） - 要编译的函数。应为纯函数，因为副作用只能执行一次。其参数和返回值应为数组、标量或其（嵌套的）标准 Python
    容器（元组/列表/字典）。由 `static_argnums` 指示的位置参数可以是任何东西，只要它们是可散列的并且定义了相等操作。静态参数包含在编译缓存键中，这就是为什么必须定义哈希和相等运算符。'
- en: '**in_shardings** –'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**in_shardings** –'
- en: Pytree of structure matching that of arguments to `fun`, with all actual arguments
    replaced by resource assignment specifications. It is also valid to specify a
    pytree prefix (e.g. one value in place of a whole subtree), in which case the
    leaves get broadcast to all values in that subtree.
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与 `fun` 参数匹配的 pytree 结构，所有实际参数都替换为资源分配规范。还可以指定一个 pytree 前缀（例如，替换整个子树的一个值），在这种情况下，叶子将广播到该子树的所有值。
- en: The `in_shardings` argument is optional. JAX will infer the shardings from the
    input `jax.Array`’s, and defaults to replicating the input if the sharding cannot
    be inferred.
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`in_shardings` 参数是可选的。JAX 将从输入的 `jax.Array` 推断出分片，并在无法推断出分片时默认复制输入。'
- en: 'The valid resource assignment specifications are:'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有效的资源分配规范包括：
- en: '`Sharding`, which will decide how the value will be partitioned. With this,
    using a mesh context manager is not required.'
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Sharding`，它将决定如何分区值。使用网格上下文管理器时，不需要此操作。'
- en: '[`None`](https://docs.python.org/3/library/constants.html#None "(in Python
    v3.12)") is a special case whose semantics are:'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`None`](https://docs.python.org/3/library/constants.html#None "(在 Python v3.12
    中)") 是一种特殊情况，其语义为：'
- en: if the mesh context manager is *not* provided, JAX has the freedom to choose
    whatever sharding it wants. For in_shardings, JAX will mark is as replicated but
    this behavior can change in the future. For out_shardings, we will rely on the
    XLA GSPMD partitioner to determine the output shardings.
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果未提供网格上下文管理器，则 JAX 可以自由选择任何分片方式。对于 in_shardings，JAX 将其标记为复制，但此行为可能在将来更改。对于
    out_shardings，我们将依赖于 XLA GSPMD 分区器来确定输出的分片方式。
- en: If the mesh context manager is provided, None will imply that the value will
    be replicated on all devices of the mesh.
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果提供了网格上下文管理器，则 `None` 将意味着该值将复制到网格的所有设备上。
- en: For backwards compatibility, in_shardings still supports ingesting `PartitionSpec`.
    This option can *only* be used with the mesh context manager.
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了向后兼容，in_shardings 仍支持接受 `PartitionSpec`。此选项只能与网格上下文管理器一起使用。
- en: '`PartitionSpec`, a tuple of length at most equal to the rank of the partitioned
    value. Each element can be a [`None`](https://docs.python.org/3/library/constants.html#None
    "(in Python v3.12)"), a mesh axis or a tuple of mesh axes, and specifies the set
    of resources assigned to partition the value’s dimension matching its position
    in the spec.'
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PartitionSpec`，最多与分区值的秩相等长的元组。每个元素可以是 [`None`](https://docs.python.org/3/library/constants.html#None
    "(在 Python v3.12 中)")，一个网格轴或网格轴的元组，并指定分配给分区值维度的资源集，与其在规范中的位置匹配。'
- en: The size of every dimension has to be a multiple of the total number of resources
    assigned to it.
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每个维度的大小必须是其分配的总资源数的倍数。
- en: '**out_shardings** – Like `in_shardings`, but specifies resource assignment
    for function outputs. The `out_shardings` argument is optional. If not specified,
    `jax.jit()` will use GSPMD’s sharding propagation to determine how to shard the
    outputs.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**out_shardings** – 类似于 `in_shardings`，但指定了函数输出的资源分配。`out_shardings` 参数是可选的。如果未指定，`jax.jit()`
    将使用 GSPMD 的分片传播来确定如何分片输出。'
- en: '**static_argnums** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.12)") *|* [*Sequence*](https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence
    "(in Python v3.12)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.12)")*]* *|* *None*) –'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**static_argnums**（[*int*](https://docs.python.org/3/library/functions.html#int
    "(在 Python v3.12 中)") *|* [*Sequence*](https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence
    "(在 Python v3.12 中)") *[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(在 Python v3.12 中)")*]* *|* *None*) –'
- en: An optional int or collection of ints that specify which positional arguments
    to treat as static (compile-time constant). Operations that only depend on static
    arguments will be constant-folded in Python (during tracing), and so the corresponding
    argument values can be any Python object.
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的整数或整数集合，用于指定将哪些位置参数视为静态（编译时常量）。在 Python 中（在追踪期间），仅依赖于静态参数的操作将被常量折叠，因此相应的参数值可以是任何
    Python 对象。
- en: Static arguments should be hashable, meaning both `__hash__` and `__eq__` are
    implemented, and immutable. Calling the jitted function with different values
    for these constants will trigger recompilation. Arguments that are not arrays
    or containers thereof must be marked as static.
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 静态参数应该是可哈希的，即实现了 `__hash__` 和 `__eq__`，并且是不可变的。对于这些常量调用 jitted 函数时，使用不同的值将触发重新编译。不是数组或其容器的参数必须标记为静态。
- en: If `static_argnums` is not provided, no arguments are treated as static.
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果未提供 `static_argnums`，则不将任何参数视为静态。
- en: '**static_argnames** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)") *|* [*Iterable*](https://docs.python.org/3/library/collections.abc.html#collections.abc.Iterable
    "(in Python v3.12)")*[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)")*]* *|* *None*) – An optional string or collection of strings
    specifying which named arguments to treat as static (compile-time constant). See
    the comment on `static_argnums` for details. If not provided but `static_argnums`
    is set, the default is based on calling `inspect.signature(fun)` to find corresponding
    named arguments.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**static_argnames** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(在 Python v3.12)") *|* [*Iterable*](https://docs.python.org/3/library/collections.abc.html#collections.abc.Iterable
    "(在 Python v3.12)")*[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(在 Python v3.12)")*]* *|* *None*) – 可选的字符串或字符串集合，指定要视为静态（编译时常量）的命名参数。有关详细信息，请参阅关于
    `static_argnums` 的注释。如果未提供但设置了 `static_argnums`，则默认基于调用 `inspect.signature(fun)`
    查找相应的命名参数。'
- en: '**donate_argnums** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.12)") *|* [*Sequence*](https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence
    "(in Python v3.12)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.12)")*]* *|* *None*) –'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**donate_argnums** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(在 Python v3.12)") *|* [*Sequence*](https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence
    "(在 Python v3.12)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(在 Python v3.12)")*]* *|* *None*) –'
- en: Specify which positional argument buffers are “donated” to the computation.
    It is safe to donate argument buffers if you no longer need them once the computation
    has finished. In some cases XLA can make use of donated buffers to reduce the
    amount of memory needed to perform a computation, for example recycling one of
    your input buffers to store a result. You should not reuse buffers that you donate
    to a computation, JAX will raise an error if you try to. By default, no argument
    buffers are donated.
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 指定要“捐赠”给计算的位置参数缓冲区。如果计算结束后不再需要它们，捐赠参数缓冲区是安全的。在某些情况下，XLA 可以利用捐赠的缓冲区来减少执行计算所需的内存量，例如将您的一个输入缓冲区循环利用来存储结果。您不应重新使用捐赠给计算的缓冲区，如果尝试则
    JAX 会引发错误。默认情况下，不会捐赠任何参数缓冲区。
- en: If neither `donate_argnums` nor `donate_argnames` is provided, no arguments
    are donated. If `donate_argnums` is not provided but `donate_argnames` is, or
    vice versa, JAX uses `inspect.signature(fun)` to find any positional arguments
    that correspond to `donate_argnames` (or vice versa). If both `donate_argnums`
    and `donate_argnames` are provided, `inspect.signature` is not used, and only
    actual parameters listed in either `donate_argnums` or `donate_argnames` will
    be donated.
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果既未提供 `donate_argnums` 也未提供 `donate_argnames`，则不会捐赠任何参数。如果未提供 `donate_argnums`，但提供了
    `donate_argnames`，或者反之，则 JAX 使用 `inspect.signature(fun)` 查找与 `donate_argnames`
    相对应的任何位置参数（或反之）。如果同时提供了 `donate_argnums` 和 `donate_argnames`，则不使用 `inspect.signature`，并且只有在
    `donate_argnums` 或 `donate_argnames` 中列出的实际参数将被捐赠。
- en: For more details on buffer donation see the [FAQ](https://jax.readthedocs.io/en/latest/faq.html#buffer-donation).
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关缓冲区捐赠的更多详情，请参阅[FAQ](https://jax.readthedocs.io/en/latest/faq.html#buffer-donation)。
- en: '**donate_argnames** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)") *|* [*Iterable*](https://docs.python.org/3/library/collections.abc.html#collections.abc.Iterable
    "(in Python v3.12)")*[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)")*]* *|* *None*) – An optional string or collection of strings
    specifying which named arguments are donated to the computation. See the comment
    on `donate_argnums` for details. If not provided but `donate_argnums` is set,
    the default is based on calling `inspect.signature(fun)` to find corresponding
    named arguments.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**捐赠参数名** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(在
    Python v3.12 中)") *|* [*Iterable*](https://docs.python.org/3/library/collections.abc.html#collections.abc.Iterable
    "(在 Python v3.12 中)")*[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(在 Python v3.12 中)")*]* *|* *None*) – 一个可选的字符串或字符串集合，指定哪些命名参数将捐赠给计算。有关详细信息，请参见对
    `donate_argnums` 的注释。如果未提供但设置了 `donate_argnums`，则默认基于调用 `inspect.signature(fun)`
    查找相应的命名参数。'
- en: '**keep_unused** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.12)")) – If False (the default), arguments that JAX determines
    to be unused by fun *may* be dropped from resulting compiled XLA executables.
    Such arguments will not be transferred to the device nor provided to the underlying
    executable. If True, unused arguments will not be pruned.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**保留未使用** ([*bool*](https://docs.python.org/3/library/functions.html#bool "(在
    Python v3.12 中)")) – 如果为 False（默认值），JAX 确定 fun 未使用的参数 *可能* 会从生成的编译后 XLA 可执行文件中删除。这些参数将不会传输到设备，也不会提供给底层可执行文件。如果为
    True，则不会剪枝未使用的参数。'
- en: '**device** (*Device* *|* *None*) – This argument is deprecated. Please put
    your arguments on the device you want before passing them to jit. Optional, the
    Device the jitted function will run on. (Available devices can be retrieved via
    `jax.devices()`.) The default is inherited from XLA’s DeviceAssignment logic and
    is usually to use `jax.devices()[0]`.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设备** (*Device* *|* *None*) – 此参数已弃用。请在将参数传递给 jit 之前将您需要的设备置于其上。可选，jit 函数将在其上运行的设备。
    （可通过 `jax.devices()` 获取可用设备。）默认情况下，继承自 XLA 的 DeviceAssignment 逻辑，并通常使用 `jax.devices()[0]`。'
- en: '**backend** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.12)") *|* *None*) – This argument is deprecated. Please put your arguments
    on the backend you want before passing them to jit. Optional, a string representing
    the XLA backend: `''cpu''`, `''gpu''`, or `''tpu''`.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**后端** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(在 Python
    v3.12 中)") *|* *None*) – 此参数已弃用。请在将参数传递给 jit 之前将您需要的后端置于其前。可选，表示 XLA 后端的字符串：`''cpu''`、`''gpu''`
    或 `''tpu''`。'
- en: '**inline** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.12)"))'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内联** ([*bool*](https://docs.python.org/3/library/functions.html#bool "(在
    Python v3.12 中)"))'
- en: '**abstracted_axes** ([*Any*](https://docs.python.org/3/library/typing.html#typing.Any
    "(in Python v3.12)") *|* *None*)'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**抽象轴** ([*Any*](https://docs.python.org/3/library/typing.html#typing.Any "(在
    Python v3.12 中)") *|* *None*)'
- en: 'Returns:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: A wrapped version of `fun`, set up for just-in-time compilation and automatically
    partitioned by the mesh available at each call site.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`fun` 的包装版本，专为即时编译而设，并在每次调用点根据可用的网格自动分区。'
- en: 'Return type:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型：
- en: '*JitWrapped*'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '*JitWrapped*'
- en: 'For example, a convolution operator can be automatically partitioned over an
    arbitrary set of devices by a single `pjit()` application:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，卷积运算符可以通过单个 `pjit()` 应用自动分区到任意一组设备上：
- en: '[PRE1]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
