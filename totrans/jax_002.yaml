- en: Installing JAX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[`jax.readthedocs.io/en/latest/installation.html`](https://jax.readthedocs.io/en/latest/installation.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Using JAX requires installing two packages: `jax`, which is pure Python and
    cross-platform, and `jaxlib` which contains compiled binaries, and requires different
    builds for different operating systems and accelerators.'
  prefs: []
  type: TYPE_NORMAL
- en: '**TL;DR** For most users, a typical JAX installation may look something like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '**CPU-only (Linux/macOS/Windows)**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**GPU (NVIDIA, CUDA 12)**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**TPU (Google Cloud TPU VM)**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '## Supported platforms'
  prefs: []
  type: TYPE_NORMAL
- en: The table below shows all supported platforms and installation options. Check
    if your setup is supported; and if it says *“yes”* or *“experimental”*, then click
    on the corresponding link to learn how to install JAX in greater detail.
  prefs: []
  type: TYPE_NORMAL
- en: '|  | Linux, x86_64 | Linux, aarch64 | macOS, Intel x86_64, AMD GPU | macOS,
    Apple Silicon, ARM-based | Windows, x86_64 | Windows WSL2, x86_64 |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| CPU | yes | yes | yes | yes | yes | yes |'
  prefs: []
  type: TYPE_TB
- en: '| NVIDIA GPU | yes | yes | no | n/a | no | experimental |'
  prefs: []
  type: TYPE_TB
- en: '| Google Cloud TPU | yes | n/a | n/a | n/a | n/a | n/a |'
  prefs: []
  type: TYPE_TB
- en: '| AMD GPU | experimental | no | no | n/a | no | no |'
  prefs: []
  type: TYPE_TB
- en: '| Apple GPU | n/a | no | experimental | experimental | n/a | n/a |  ## CPU'
  prefs: []
  type: TYPE_NORMAL
- en: 'pip installation: CPU'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Currently, the JAX team releases `jaxlib` wheels for the following operating
    systems and architectures:'
  prefs: []
  type: TYPE_NORMAL
- en: Linux, x86_64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Linux, aarch64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: macOS, Intel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: macOS, Apple ARM-based
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows, x86_64 (*experimental*)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To install a CPU-only version of JAX, which might be useful for doing local
    development on a laptop, you can run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: On Windows, you may also need to install the [Microsoft Visual Studio 2019 Redistributable](https://learn.microsoft.com/en-US/cpp/windows/latest-supported-vc-redist?view=msvc-170#visual-studio-2015-2017-2019-and-2022)
    if it is not already installed on your machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'Other operating systems and architectures require building from source. Trying
    to pip install on other operating systems and architectures may lead to `jaxlib`
    not being installed alongside `jax`, although `jax` may successfully install (but
    fail at runtime).  ## NVIDIA GPU'
  prefs: []
  type: TYPE_NORMAL
- en: JAX supports NVIDIA GPUs that have SM version 5.2 (Maxwell) or newer. Note that
    Kepler-series GPUs are no longer supported by JAX since NVIDIA has dropped support
    for Kepler GPUs in its software.
  prefs: []
  type: TYPE_NORMAL
- en: You must first install the NVIDIA driver. You’re recommended to install the
    newest driver available from NVIDIA, but the driver version must be >= 525.60.13
    for CUDA 12 on Linux.
  prefs: []
  type: TYPE_NORMAL
- en: If you need to use a newer CUDA toolkit with an older driver, for example on
    a cluster where you cannot update the NVIDIA driver easily, you may be able to
    use the [CUDA forward compatibility packages](https://docs.nvidia.com/deploy/cuda-compatibility/)
    that NVIDIA provides for this purpose.
  prefs: []
  type: TYPE_NORMAL
- en: 'pip installation: NVIDIA GPU (CUDA, installed via pip, easier)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are two ways to install JAX with NVIDIA GPU support:'
  prefs: []
  type: TYPE_NORMAL
- en: Using NVIDIA CUDA and cuDNN installed from pip wheels
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a self-installed CUDA/cuDNN
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The JAX team strongly recommends installing CUDA and cuDNN using the pip wheels,
    since it is much easier!
  prefs: []
  type: TYPE_NORMAL
- en: NVIDIA has released CUDA pip packages only for x86_64 and aarch64; on other
    platforms you must use a local installation of CUDA.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'If JAX detects the wrong version of the NVIDIA CUDA libraries, there are several
    things you need to check:'
  prefs: []
  type: TYPE_NORMAL
- en: Make sure that `LD_LIBRARY_PATH` is not set, since `LD_LIBRARY_PATH` can override
    the NVIDIA CUDA libraries.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make sure that the NVIDIA CUDA libraries installed are those requested by JAX.
    Rerunning the installation command above should work.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'pip installation: NVIDIA GPU (CUDA, installed locally, harder)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you prefer to use a preinstalled copy of NVIDIA CUDA, you must first install
    NVIDIA [CUDA](https://developer.nvidia.com/cuda-downloads) and [cuDNN](https://developer.nvidia.com/CUDNN).
  prefs: []
  type: TYPE_NORMAL
- en: JAX provides pre-built CUDA-compatible wheels for **Linux x86_64 and Linux aarch64
    only**. Other combinations of operating system and architecture are possible,
    but require building from source (refer to Building from source to learn more}.
  prefs: []
  type: TYPE_NORMAL
- en: You should use an NVIDIA driver version that is at least as new as your [NVIDIA
    CUDA toolkit’s corresponding driver version](https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html#cuda-major-component-versions__table-cuda-toolkit-driver-versions).
    If you need to use a newer CUDA toolkit with an older driver, for example on a
    cluster where you cannot update the NVIDIA driver easily, you may be able to use
    the [CUDA forward compatibility packages](https://docs.nvidia.com/deploy/cuda-compatibility/)
    that NVIDIA provides for this purpose.
  prefs: []
  type: TYPE_NORMAL
- en: 'JAX currently ships one CUDA wheel variant:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Built with | Compatible with |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| CUDA 12.3 | CUDA >=12.1 |'
  prefs: []
  type: TYPE_TB
- en: '| CUDNN 9.0 | CUDNN >=9.0, <10.0 |'
  prefs: []
  type: TYPE_TB
- en: '| NCCL 2.19 | NCCL >=2.18 |'
  prefs: []
  type: TYPE_TB
- en: JAX checks the versions of your libraries, and will report an error if they
    are not sufficiently new. Setting the `JAX_SKIP_CUDA_CONSTRAINTS_CHECK` environment
    variable will disable the check, but using older versions of CUDA may lead to
    errors, or incorrect results.
  prefs: []
  type: TYPE_NORMAL
- en: NCCL is an optional dependency, required only if you are performing multi-GPU
    computations.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install, run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**These `pip` installations do not work with Windows, and may fail silently;
    refer to the table above.**'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find your CUDA version with the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: JAX uses `LD_LIBRARY_PATH` to find CUDA libraries and `PATH` to find binaries
    (`ptxas`, `nvlink`). Please make sure that these paths point to the correct CUDA
    installation.
  prefs: []
  type: TYPE_NORMAL
- en: Please let the JAX team know on [the GitHub issue tracker](https://github.com/google/jax/issues)
    if you run into any errors or problems with the pre-built wheels.
  prefs: []
  type: TYPE_NORMAL
- en: '### NVIDIA GPU Docker containers'
  prefs: []
  type: TYPE_NORMAL
- en: 'NVIDIA provides the [JAX Toolbox](https://github.com/NVIDIA/JAX-Toolbox) containers,
    which are bleeding edge containers containing nightly releases of jax and some
    models/frameworks.  ## Google Cloud TPU'
  prefs: []
  type: TYPE_NORMAL
- en: 'pip installation: Google Cloud TPU'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'JAX provides pre-built wheels for [Google Cloud TPU](https://cloud.google.com/tpu/docs/users-guide-tpu-vm).
    To install JAX along with appropriate versions of `jaxlib` and `libtpu`, you can
    run the following in your cloud TPU VM:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'For users of Colab (https://colab.research.google.com/), be sure you are using
    *TPU v2* and not the older, deprecated TPU runtime.  ## Apple Silicon GPU (ARM-based)'
  prefs: []
  type: TYPE_NORMAL
- en: 'pip installation: Apple ARM-based Silicon GPUs'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Apple provides an experimental Metal plugin for Apple ARM-based GPU hardware.
    For details, refer to [Apple’s JAX on Metal documentation](https://developer.apple.com/metal/jax/).
  prefs: []
  type: TYPE_NORMAL
- en: '**Note:** There are several caveats with the Metal plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: The Metal plugin is new and experimental and has a number of [known issues](https://github.com/google/jax/issues?q=is%3Aissue+is%3Aopen+label%3A%22Apple+GPU+%28Metal%29+plugin%22).
    Please report any issues on the JAX issue tracker.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Metal plugin currently requires very specific versions of `jax` and `jaxlib`.
    This restriction will be relaxed over time as the plugin API matures.  ## AMD
    GPU'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'JAX has experimental ROCm support. There are two ways to install JAX:'
  prefs: []
  type: TYPE_NORMAL
- en: Use [AMD’s Docker container](https://hub.docker.com/r/rocm/jax); or
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build from source (refer to Building from source — a section called *Additional
    notes for building a ROCM `jaxlib` for AMD GPUs*).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conda (community-supported)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Conda installation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There is a community-supported Conda build of `jax`. To install it using `conda`,
    simply run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'To install it on a machine with an NVIDIA GPU, run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Note the `cudatoolkit` distributed by `conda-forge` is missing `ptxas`, which
    JAX requires. You must therefore either install the `cuda-nvcc` package from the
    `nvidia` channel, or install CUDA on your machine separately so that `ptxas` is
    in your path. The channel order above is important (`conda-forge` before `nvidia`).
  prefs: []
  type: TYPE_NORMAL
- en: If you would like to override which release of CUDA is used by JAX, or to install
    the CUDA build on a machine without GPUs, follow the instructions in the [Tips
    & tricks](https://conda-forge.org/docs/user/tipsandtricks.html#installing-cuda-enabled-packages-like-tensorflow-and-pytorch)
    section of the `conda-forge` website.
  prefs: []
  type: TYPE_NORMAL
- en: Go to the `conda-forge` [jaxlib](https://github.com/conda-forge/jaxlib-feedstock#installing-jaxlib)
    and [jax](https://github.com/conda-forge/jax-feedstock#installing-jax) repositories
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: JAX nightly installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Nightly releases reflect the state of the main JAX repository at the time they
    are built, and may not pass the full test suite.
  prefs: []
  type: TYPE_NORMAL
- en: 'CPU only:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Google Cloud TPU:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'NVIDIA GPU (CUDA 12):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'NVIDIA GPU (CUDA 12) legacy:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the following for historical nightly releases of monolithic CUDA jaxlibs.
    You most likely do not want this; no further monolithic CUDA jaxlibs will be built
    and those that exist will expire by Sep 2024\. Use the “CUDA 12” option above.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '## Building JAX from source'
  prefs: []
  type: TYPE_NORMAL
- en: Refer to Building from source.
  prefs: []
  type: TYPE_NORMAL
- en: Installing older `jaxlib` wheels
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Due to storage limitations on the Python package index, the JAX team periodically
    removes older `jaxlib` wheels from the releases on http://pypi.org/project/jax.
    These can still be installed directly via the URLs here. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: For specific older GPU wheels, be sure to use the `jax_cuda_releases.html` URL;
    for example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
