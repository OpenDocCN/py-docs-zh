- en: jax.experimental.host_callback module
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[jax.experimental.host_callback 模块](https://jax.readthedocs.io/en/latest/jax.experimental.host_callback.html)'
- en: 原文：[`jax.readthedocs.io/en/latest/jax.experimental.host_callback.html`](https://jax.readthedocs.io/en/latest/jax.experimental.host_callback.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[`jax.readthedocs.io/en/latest/jax.experimental.host_callback.html`](https://jax.readthedocs.io/en/latest/jax.experimental.host_callback.html)
- en: Primitives for calling Python functions on the host from JAX accelerator code.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JAX 加速器代码中调用 Python 函数的原语。
- en: Warning
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: The host_callback APIs are deprecated as of March 20, 2024. The functionality
    is subsumed by the [new JAX external callbacks](https://jax.readthedocs.io/en/latest/notebooks/external_callbacks.html)
    See [google/jax#20385](https://github.com/google/jax/issues/20385).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 自 2024 年 3 月 20 日起，host_callback API 已弃用。功能已被 [新的 JAX 外部回调](https://jax.readthedocs.io/en/latest/notebooks/external_callbacks.html)
    所取代。请参阅 [google/jax#20385](https://github.com/google/jax/issues/20385)。
- en: This module introduces the host callback functions `call()`, `id_tap()`, and
    `id_print()`, that send their arguments from the device to the host and invoke
    user-defined Python functions on the host, optionally returning results back to
    the device computation.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 此模块介绍了主机回调函数 `call()`、`id_tap()` 和 `id_print()`，它们将其参数从设备发送到主机，并在主机上调用用户定义的
    Python 函数，可选地将结果返回到设备计算中。
- en: We show below how these functions can be used. We start with `call()`, and we
    discuss examples of calling from JAX to arbitrary Python functions on the CPU,
    e.g., to use NumPy CPU custom kernels. Then we show uses of `id_tap()` and `id_print()`,
    which have the restriction that they cannot return values from the host to the
    device. These primitives are generally faster because they are executed asynchronously
    with the device code. In particular, they can be used to tap into and to debug
    JAX code.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们展示了下面如何使用这些函数。我们从 `call()` 开始，并讨论从 JAX 调用 CPU 上任意 Python 函数的示例，例如使用 NumPy
    CPU 自定义核函数。然后我们展示了使用 `id_tap()` 和 `id_print()`，它们的限制是不能将主机返回值传回设备。这些原语通常更快，因为它们与设备代码异步执行。特别是它们可用于连接到和调试
    JAX 代码。
- en: Using `call()` to call a host function and return results to device
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 `call()` 调用主机函数并将结果返回给设备
- en: 'Use `call()` to invoke a computation on the host and return NumPy arrays to
    the device computation. Host computation is useful, e.g., when a device computation
    needs some data that requires I/O on the host, or it needs a library that is available
    on the host and you do not want to code it in JAX. For example, eigen decomposition
    for general matrices in JAX does not work on TPU. We can call the Numpy implementation
    from any JAX accelerator computation, using a host computation:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `call()` 调用主机上的计算并将 NumPy 数组返回给设备上的计算。主机计算在以下情况下非常有用，例如当设备计算需要一些需要在主机上进行
    I/O 的数据，或者它需要一个在主机上可用但不希望在 JAX 中编码的库时。例如，在 JAX 中一般矩阵的特征值分解在 TPU 上不起作用。我们可以从任何
    JAX 加速计算中调用 Numpy 实现，使用主机计算：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `call()` function and the Python host function both take a single argument
    and return a single result, but those can be pytrees. Note that we must tell the
    `call()` what shape and dtype to expect from the host invocation, using the `result_shape`
    keyword argument. This is important because the device code is compiled with that
    expectation. There will be an error raised at runtime if the actual invocation
    produces a different result shape. In general, **such errors and also exceptions
    raised by the host computation may be difficult to debug**. See the Debugging
    section below. This is a problem for `call()` but not for `id_tap()` because for
    the latter the device code does not expect a returned value.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`call()` 函数和 Python 主机函数都接受一个参数并返回一个结果，但这些可以是 pytrees。注意，我们必须告诉 `call()` 从主机调用中期望的形状和
    dtype，使用 `result_shape` 关键字参数。这很重要，因为设备代码是按照这个期望进行编译的。如果实际调用产生不同的结果形状，运行时会引发错误。通常，**这样的错误以及主机计算引发的异常可能很难调试**。请参见下面的调试部分。这对
    `call()` 是一个问题，但对于 `id_tap()` 不是，因为对于后者，设备代码不期望返回值。'
- en: 'The `call()` API can be used inside a jit or pmap computation or inside cond/scan/while
    control flow. When used inside `jax.pmap()`, there will be separate calls to the
    host from each of the participating devices:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`call()` API 可以在 jit 或 pmap 计算内部使用，或在 cond/scan/while 控制流内部使用。当在 `jax.pmap()`
    内部使用时，将从每个参与设备中分别调用主机：'
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note that `call()` does not support any JAX transformations, but as we show
    below one can make use of the existing support for [Custom differentiation in
    JAX](https://jax.readthedocs.io/en/latest/notebooks/Custom_derivative_rules_for_Python_code.html).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`call()`不支持任何 JAX 转换，但如下所示，可以利用现有的支持来[自定义 JAX 中的导数规则](https://jax.readthedocs.io/en/latest/notebooks/Custom_derivative_rules_for_Python_code.html)。
- en: Using `id_tap()` to call a Python function on the host, with no returned values
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`id_tap()`在主机上调用 Python 函数，不返回任何值。
- en: The `id_tap()` and `id_print()` are special cases of `call()`, when you just
    want the side effects of your Python callback. These functions have the advantage
    that once the arguments have been sent to the host, the device computation can
    proceed without waiting for the Python callback to return. For `id_tap()` you
    can specify your Python callback to be called, while `id_print()` uses a built-in
    callback that prints the arguments to stdout on the host. The Python function
    passed to `id_tap()` takes two positional arguments (the value tapped from the
    device computation along with a `transforms` tuple, described below). Optionally,
    the function may be passed a keyword argument `device` with the Device from which
    the value was tapped.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`id_tap()`和`id_print()`是`call()`的特殊情况，当您只希望 Python 回调的副作用时。这些函数的优点是一旦参数已发送到主机，设备计算可以继续进行，而无需等待
    Python 回调返回。对于`id_tap()`，您可以指定要调用的 Python 回调函数，而`id_print()`则使用一个内置回调，在主机的标准输出中打印参数。传递给`id_tap()`的
    Python 函数接受两个位置参数（从设备计算中获取的值以及一个`transforms`元组，如下所述）。可选地，该函数可以通过关键字参数`device`传递设备从中获取的设备。'
- en: 'A few examples:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 几个示例：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The above examples can all be adapted to use `id_print()` instead, with the
    difference that `id_print()` prints on the host the positional argument, along
    with any additional kwargs and the automatic kwarg `transforms`.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 所有上述示例都可以改用`id_print()`，只是`id_print()`会在主机上打印位置参数，以及任何额外的关键字参数和自动关键字参数`transforms`之间的区别。
- en: Using `barrier_wait()` to wait until all callbacks have executed
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`barrier_wait()`等待所有回调函数执行结束。
- en: 'If your Python callbacks have side-effects you may need to wait until the computation
    has finished to ensure that the side-effects have been observed. You can use the
    `barrier_wait()` function for that purpose:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的 Python 回调函数有副作用，可能需要等到计算完成，以确保副作用已被观察到。你可以使用`barrier_wait()`函数来实现这一目的：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note that `barrier_wait()` will start one tiny computation with one tap on each
    of the jax.local_devices() and will wait for all these taps to be received.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`barrier_wait()`将在`jax.local_devices()`的每个设备上启动一个微小的计算，并等待所有这些计算的结果被接收。
- en: 'An alternative to using `barrier_wait()` is to just wait for the end of the
    computation, if all the callbacks are `call()`:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 一个替代方案是使用`barrier_wait()`仅等待计算结束，如果所有回调都是`call()`的话：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Behavior under parallelization transformations
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 并行化转换下的行为
- en: 'In presence of `jax.pmap()` the code will run on multiple devices and each
    device will tap its values independently. It may be helpful to use the `tap_with_device`
    option for `id_print()` or `id_tap()`, so that you see which device is sending
    which data:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在存在`jax.pmap()`的情况下，代码将在多个设备上运行，并且每个设备将独立地执行其值。建议为`id_print()`或`id_tap()`使用`tap_with_device`选项可能会有所帮助，以便查看哪个设备发送了哪些数据：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: When using `jax.pmap()` with multiple devices on multiple hosts, every host
    will receive callbacks from all of its local devices, with an operand that corresponds
    to each device slice. For a `call()`, the callback must return to each device
    only the slice of the result that pertains to the corresponding device.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`jax.pmap()`和多个主机上的多个设备时，每个主机将从其所有本地设备接收回调，带有与每个设备切片对应的操作数。对于`call()`，回调必须仅向每个设备返回与相应设备相关的结果切片。
- en: 'When using the experimental `pjit.pjit()` the code will run on multiple devices
    on different shards of the input. The current implementation of host callbacks
    will ensure that a single device will collect and outfeed the entire operand,
    in a single callback. The callback function is supposed to return the entire array,
    which will then be sent in a single infeed to the same device that issued the
    outfeed. This device is then responsible for sending the required shards to the
    other devices:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用实验性的`pjit.pjit()`时，代码将在多个设备上运行，并在输入的不同分片上。当前主机回调的实现将确保单个设备将收集并输出整个操作数，在单个回调中。回调函数应返回整个数组，然后将其发送到发出输出的同一设备的单个进料中。然后，此设备负责将所需的分片发送到其他设备：
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note that the collection of the operand on one device may result in OOM if the
    operand was sharded across devices.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在一个设备上收集操作数可能会导致内存不足，如果操作数分布在多个设备上则情况类似。
- en: When using `pjit.pjit()` with multiple devices on multiple hosts, only the host
    for the device 0 (w.r.t. the mesh) will receive the callback, with the operand
    collected from all participating devices on all hosts. For a `call()`, the callback
    must return the entire array for all devices on all hosts.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当在多个设备上的多个主机上使用 `pjit.pjit()` 时，仅设备 0（相对于网格）上的主机将接收回调，其操作数来自所有参与设备上的所有主机。对于
    `call()`，回调必须返回所有设备上所有主机的整个数组。
- en: Behavior under JAX autodiff transformations
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 JAX 自动微分转换下的行为
- en: 'When used under a JAX autodiff transformation, the host callback functions
    operate on the primal values only. Consider the following example:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JAX 自动微分转换下使用时，主机回调函数仅处理原始值。考虑以下示例：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: (You can see these examples tested in host_callback_test.HostCallbackTapTest.test_tap_transforms.)
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: （您可以在 `host_callback_test.HostCallbackTapTest.test_tap_transforms` 中查看这些示例的测试。）
- en: 'When used under `jax.jvp()` there will be one callback with the primal values
    only:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当在 `jax.jvp()` 下使用时，仅会有一个回调处理原始值：
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Similarly for `jax.grad()`, we get a callback from the forward computation
    only:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，对于 `jax.grad()`，我们仅从前向计算中得到一个回调：
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If you want to invoke the callback on the tangents during a `jax.jvp()`, you
    can use a custom_jvp. For example, you can define a function that does nothing
    interesting except that its custom_jvp will print the tangents:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想在 `jax.jvp()` 中对切线进行回调处理，可以使用 `custom_jvp`。例如，您可以定义一个除了其 `custom_jvp` 会打印切线之外无趣的函数：
- en: '[PRE10]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then you use this function in the places where you want to tap the tangents:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以在想要触发切线的位置使用此函数：
- en: '[PRE11]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You can do a similar thing for the cotangents during `jax.grad()`. This time
    you must be careful to use in the rest of the computation the values whose cotangents
    you want to tap. Hence we make the `print_cotangents` return its argument:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 `jax.grad()` 中做类似的事情来处理余切。这时，您必须小心使用在其余计算中需要的余切值。因此，我们使 `print_cotangents`
    返回其参数：
- en: '[PRE12]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'If you use `ad_checkpoint.checkpoint()` to rematerialize the residuals for
    the backward pass, then the callbacks from the primal computation will be called
    twice:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用 `ad_checkpoint.checkpoint()` 来重新生成反向传播的残差，则原始计算中的回调将被调用两次：
- en: '[PRE13]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The callbacks are, in order from: the primal computation of the inner `power3`,
    the primal computation of the outer `power3`, and the rematerialization of the
    residuals for the inner `power3`.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这些回调依次是：内部 `power3` 的原始计算，外部 `power3` 的原始计算，以及内部 `power3` 的残差重新生成。
- en: Behavior under jax.vmap
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 `jax.vmap` 下的行为
- en: The host callback functions `id_print()` and `id_tap()` support the vectorization
    transformation `jax.vmap()`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 主机回调函数 `id_print()` 和 `id_tap()` 支持矢量化转换 `jax.vmap()`。
- en: 'For `jax.vmap()` the arguments to the callback are batched, and the callback
    function is passed an additional special `transforms` containing a list of transformation
    descriptors in the form `("batch", {"batch_dims": ...})`, where `` ...` `` denotes
    the batched dimensions for the tapped values (one entry per argument, ` None`
    denotes an argument that was broadcast).'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '对于 `jax.vmap()`，回调的参数是批量处理的，并且回调函数会传递一个特殊的 `transforms`，其中包含转换描述符列表，格式为 `("batch",
    {"batch_dims": ...})`，其中 `...` 表示被触发值的批处理维度（每个参数一个条目，`None` 表示广播的参数）。'
- en: 'jax.vmap(power3)(np.array([2., 3.])) # transforms: [(‘batch’, {‘batch_dims’:
    (0, 0)})] what: x,x² : ([2., 3.], [4., 9.])'
  id: totrans-53
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`jax.vmap(power3)(np.array([2., 3.]))` # transforms: [(‘batch’, {‘batch_dims’:
    (0, 0)})] what: x,x² : ([2., 3.], [4., 9.])'
- en: See documentation for `id_tap()`, `id_print()`, and `call()`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅 `id_tap()`、`id_print()` 和 `call()` 的文档。
- en: For more usage example, see tests/host_callback_test.py.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 更多用法示例，请参阅 `tests/host_callback_test.py`。
- en: Using `call()` to call a TensorFlow function, with reverse-mode autodiff support
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 `call()` 调用 TensorFlow 函数，支持反向模式自动微分
- en: Another possible use for host computation is to invoke a library written for
    another framework, such as TensorFlow. In this case it becomes interesting to
    support JAX autodiff for host callbacks by deferring to the autodiff mechanism
    in TensorFlow, using the `jax.custom_vjp()` mechanism.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 主机计算的另一个可能用途是调用为另一个框架编写的库，如 TensorFlow。在这种情况下，通过使用 `jax.custom_vjp()` 机制来支持主机回调的
    JAX 自动微分变得有趣。
- en: This is relatively easy to do, once one understands both the JAX custom VJP
    and the TensorFlow autodiff mechanisms. The code for how this can be done is shown
    in the `call_tf_full_ad` function in [host_callback_to_tf_test.py](https://github.com/google/jax/blob/main/tests/host_callback_to_tf_test.py).
    This example supports arbitrary higher-order differentiation as well.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦理解了 JAX 自定义 VJP 和 TensorFlow autodiff 机制，这就相对容易做到。可以在 [host_callback_to_tf_test.py](https://github.com/google/jax/blob/main/tests/host_callback_to_tf_test.py)
    中的 `call_tf_full_ad` 函数中看到如何实现这一点。该示例还支持任意高阶微分。
- en: Note that if you just want to call TensorFlow functions from JAX, you can also
    use the [jax2tf.call_tf function](https://github.com/google/jax/blob/main/jax/experimental/jax2tf/call_tf.py).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果只想从 JAX 调用 TensorFlow 函数，也可以使用 [jax2tf.call_tf function](https://github.com/google/jax/blob/main/jax/experimental/jax2tf/call_tf.py)。
- en: Using `call()` to call a JAX function on another device, with reverse-mode autodiff
    support
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 `call()` 在另一个设备上调用 JAX 函数，支持反向模式自动微分
- en: It should not be surprising that we can use host computation to invoke a JAX
    computation on another device. The arguments are sent from the accelerator to
    the host, and then to the outside device on which the JAX host computation will
    run, and then the results are sent back to the original accelerator.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用主机计算来调用另一个设备上的 JAX 计算，并不奇怪。参数从加速器发送到主机，然后发送到将运行 JAX 主机计算的外部设备，然后将结果发送回原始加速器。
- en: The code for how this can be done is shown in the `call_jax_other_device function`
    in [host_callback_test.py](https://github.com/google/jax/blob/main/tests/host_callback_test.py).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在 [host_callback_test.py](https://github.com/google/jax/blob/main/tests/host_callback_test.py)
    中的 `call_jax_other_device function` 中看到如何实现这一点。
- en: Low-level details and debugging
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 低级细节和调试
- en: The host callback functions will be executed for each device in the order in
    which the send operations were performed on the device.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 主机回调函数将按照在设备上执行发送操作的顺序执行。
- en: The host callback functions for multiple devices may be interleaved. The data
    from the devices is received by separate threads managed by the JAX runtime (one
    thread per device). The runtime maintains a buffer of configurable size (see the
    flag `--jax_host_callback_max_queue_byte_size`). When the buffer is full, all
    the receiving threads are paused which eventually pauses the computation on devices.
    The runtime has one additional thread for each device to invoke the Python user
    functions with the received data. If the processing of the callbacks is slow,
    it may actually lead to the runtime buffer filling up, and eventually pausing
    the computation on the devices when they need to send something. For more details
    on the outfeed receiver runtime mechanism see [runtime code](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/compiler/xla/python/outfeed_receiver.cc).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 多个设备的主机回调函数可能会交错执行。设备数据由 JAX 运行时管理的单独线程接收（每个设备一个线程）。运行时维护一个可配置大小的缓冲区（参见标志 `--jax_host_callback_max_queue_byte_size`）。当缓冲区满时，所有接收线程将被暂停，最终暂停设备上的计算。对于更多关于
    outfeed 接收器运行时机制的细节，请参阅 [runtime code](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/compiler/xla/python/outfeed_receiver.cc)。
- en: In order to pause the execution until all data from computations already started
    on devices has arrived and has been processed, use `barrier_wait()`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 要等待已经启动在设备上的计算的所有数据到达并被处理，可以使用 `barrier_wait()`。
- en: Exceptions from the user-defined callback functions are logged along with their
    stack traces, but the receiving threads are not stopped. Instead the last exception
    is recorded and the subsequent `barrier_wait()` will raise `CallbackException`
    if any exception had occurred in one of the tap functions. This exception will
    include the text and the stack trace of the last exception encountered.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 用户定义的回调函数抛出的异常以及它们的堆栈跟踪都会被记录，但接收线程不会停止。相反，最后一个异常被记录，并且随后的 `barrier_wait()` 将在任何一个
    tap 函数中发生异常时引发 `CallbackException`。此异常将包含最后异常的文本和堆栈跟踪。
- en: One further complication arises for callback functions that must return results
    to the call origin device, such as `call()`. This is handled differently on CPU/GPU
    devices compared to TPU devices.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 对于必须将结果返回给调用原点设备的回调函数（如`call()`），存在进一步的复杂性。这在 CPU/GPU 设备与 TPU 设备上处理方式不同。
- en: 'On CPU/GPU devices, in order to avoid the device computation being stuck waiting
    for a result that will never arrive, in case of any error during the processing
    of the callback (whether raised by the user-code itself or due to a mismatch of
    the returned value and the expected return_shape) we send the device a “fake”
    result of shape `int8[12345]`. This will make the device computation abort because
    the received data is different than the one that it expects. On CPU the runtime
    will crash with a distinctive error message:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在 CPU/GPU 设备上，为了避免设备计算因等待永远不会到达的结果而陷入困境，在处理回调过程中出现任何错误（无论是由用户代码自身引发还是由于返回值与期望返回形状不匹配而引发），我们会向设备发送一个形状为
    `int8[12345]` 的“虚假”结果。这将导致设备计算中止，因为接收到的数据与其预期的数据不同。在 CPU 上，运行时将崩溃并显示特定的错误消息：
- en: '`` ` Check failed: buffer->length() == buffer_length (12345 vs. ...) ` ``'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`` ` 检查失败：buffer->length() == buffer_length (12345 vs. ...) ` ``'
- en: 'On GPU, the failure is more user-friendly and will be surfaced to the Python
    program as:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在 GPU 上，这种失败会更加用户友好，并将其作为以下形式暴露给 Python 程序：
- en: '`` ` RET_CHECK failure ... Mismatch between infeed source buffer shape s8[12345]
    ... ` ``'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`` ` RET_CHECK 失败 ... 输入源缓冲区形状为 s8[12345] 不匹配 ... ` ``'
- en: To debug the underlying cause for these messages, see the Debugging section.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 要调试这些消息的根本原因，请参阅调试部分。
- en: On TPU devices, there is currently no shape check for infeed, so we take the
    safer route of not sending this fake result in case of errors. This means that
    the computation will hang, and no exception will be raised (but any exceptions
    in the callback functions will still appear in the logs).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在 TPU 设备上，目前没有对输入源进行形状检查，因此我们采取更安全的方式，在出现错误时不发送此虚假结果。这意味着计算将会挂起，且不会引发异常（但回调函数中的任何异常仍将出现在日志中）。
- en: The current implementation uses the outfeed mechanism provided by XLA. The mechanism
    itself is quite primitive in the sense that a receiver must know exactly the shape
    of each incoming packet, and how many packets are expected. This makes it hard
    to use for multiple kinds of data in the same computation, and it is practically
    impossible to use it under conditionals or in loops of non-constant iteration
    count. Furthermore, code that uses the outfeed mechanism directly cannot be transformed
    by JAX. All these limitations are addressed by the host callback functions. The
    tapping API introduced here makes it easy to share the outfeed mechanism for multiple
    purposes, while supporting all transformations.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 当前实现使用 XLA 提供的出料机制。该机制本身在某种程度上相当原始，因为接收器必须准确知道每个传入数据包的形状和预期的数据包数量。这使得它在同一计算中难以用于多种数据类型，并且在非常量迭代次数的条件或循环中几乎不可能使用。此外，直接使用出料机制的代码无法由
    JAX 进行转换。所有这些限制都通过主机回调函数得到解决。此处引入的 tapping API 可以轻松地用于多种目的共享出料机制，同时支持所有转换。
- en: '**Note that after you have used the host callback functions, you cannot use
    lax.outfeed directly**. You may want to `stop_outfeed_receiver()` if you later
    need to use lax.outfeed.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意，在使用主机回调函数后，您不能直接使用 lax.outfeed**。如果以后需要使用 lax.outfeed，则可能需要 `stop_outfeed_receiver()`。'
- en: Since the actual calls to your callback functions are made from the C++ receiver,
    it may be hard to debug the calls. In particular, the stack trace will not include
    the calling code. You can use the flag `jax_host_callback_inline` (or the environment
    variable `JAX_HOST_CALLBACK_INLINE`) to ensure that the calls to the callbacks
    are inlined. This works only if the calls are outside a staging context (`jit()`
    or a control-flow primitive).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 由于实际调用您的回调函数是从 C++ 接收器进行的，因此调试这些调用可能会很困难。特别是，堆栈跟踪不会包含调用代码。您可以使用标志 `jax_host_callback_inline`（或环境变量
    `JAX_HOST_CALLBACK_INLINE`）确保回调函数的调用是内联的。这仅在调用位于非常量迭代次数的阶段上下文之外时有效（例如 `jit()`
    或控制流原语）。
- en: The C++ [receiver](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/compiler/xla/python/outfeed_receiver.cc)
    is started automatically on the first call to `id_tap()`. In order to stop it
    properly, upon start an `atexit` handler is registered to call `barrier_wait()`
    with the logging name “at_exit”.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: C++ [接收器](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/compiler/xla/python/outfeed_receiver.cc)
    会在首次调用 `id_tap()` 时自动启动。为了正确停止它，在启动时注册了一个 `atexit` 处理程序，以带有日志名称“at_exit”调用 `barrier_wait()`。
- en: There are a few environment variables that you can use to turn on logging for
    the C++ outfeed [receiver backend](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/compiler/xla/python/outfeed_receiver.cc).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个环境变量可用于启用 C++ outfeed 接收器后端的日志记录（[接收器后端](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/compiler/xla/python/outfeed_receiver.cc)）。
- en: '`TF_CPP_MIN_LOG_LEVEL=0`: will turn on INFO logging, needed for all below.'
  id: totrans-80
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TF_CPP_MIN_LOG_LEVEL=0`：将 INFO 日志打开，适用于以下所有内容。'
- en: ''
  id: totrans-81
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-82
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`TF_CPP_MIN_VLOG_LEVEL=3`: will make all VLOG logging up to level 3 behave
    like INFO logs. This may be too much, but you will see which modules are logging
    relevant info, and then you can select which modules to log from.'
  id: totrans-83
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TF_CPP_MIN_VLOG_LEVEL=3`：将所有 VLOG 日志级别为 3 的行为设为 INFO 日志。这可能有些过多，但你将看到哪些模块记录了相关信息，然后你可以选择从哪些模块记录日志。'
- en: ''
  id: totrans-84
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-85
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`TF_CPP_VMODULE=<module_name>=3` (the module name can be either C++ or Python,
    without the extension).'
  id: totrans-86
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TF_CPP_VMODULE=<module_name>=3`（模块名可以是 C++ 或 Python，不带扩展名）。'
- en: You should also use the `--verbosity=2` flag so that you see the logs from Python.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 你还应该使用 `--verbosity=2` 标志，这样你就可以看到 Python 的日志。
- en: 'For example, you can try to enable logging in the `host_callback` module: `TF_CPP_MIN_LOG_LEVEL=0
    TF_CPP_VMODULE=host_callback=3 python tests/host_callback_test.py --verbosity=2
    HostCallbackIdTapTest.test_tap_jit_simple`'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你可以尝试在 `host_callback` 模块中启用日志记录：`TF_CPP_MIN_LOG_LEVEL=0 TF_CPP_VMODULE=host_callback=3
    python tests/host_callback_test.py --verbosity=2 HostCallbackIdTapTest.test_tap_jit_simple`
- en: 'If you want to enable logging in lower-level implementation modules try: `TF_CPP_MIN_LOG_LEVEL=0
    TF_CPP_VMODULE=outfeed_receiver=3,host_callback=3,outfeed_receiver_py=3,outfeed_thunk=3,infeed_thunk=3,cpu_transfer_manager=3,cpu_runtime=3,xfeed_manager=3,pjrt_client=3
    python tests/host_callback_test.py --verbosity=2 HostCallbackIdTapTest.test_tap_jit_simple`'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在更低级别的实现模块中启用日志记录，请尝试：`TF_CPP_MIN_LOG_LEVEL=0 TF_CPP_VMODULE=outfeed_receiver=3,host_callback=3,outfeed_receiver_py=3,outfeed_thunk=3,infeed_thunk=3,cpu_transfer_manager=3,cpu_runtime=3,xfeed_manager=3,pjrt_client=3
    python tests/host_callback_test.py --verbosity=2 HostCallbackIdTapTest.test_tap_jit_simple`
- en: (For bazel tests use –test_arg=–vmodule=…
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: （对于 bazel 测试，请使用 –test_arg=–vmodule=…
- en: 'Still to do:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 仍需完成：
- en: More performance tests.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更多性能测试。
- en: Explore implementation with outside compilation for TPU.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索在 TPU 上进行外部编译实现。
- en: Explore implementation with XLA CustomCall for CPU and GPU.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索在 CPU 和 GPU 上使用 XLA CustomCall 进行实现。
- en: API
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: API
- en: '| `id_tap`(tap_func, arg, *[, result, ...]) | Host-callback tap primitive,
    like identity function with a call to `tap_func`. |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| `id_tap`(tap_func, arg, *[, result, ...]) | 主机回调 tap 原语，类似于带有 `tap_func`
    调用的恒等函数。 |'
- en: '| `id_print`(arg, *[, result, tap_with_device, ...]) | Like `id_tap()` with
    a printing tap function. |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| `id_print`(arg, *[, result, tap_with_device, ...]) | 类似于 `id_tap()`，带有打印
    tap 函数。 |'
- en: '| `call`(callback_func, arg, *[, result_shape, ...]) | Make a call to the host,
    and expect a result. |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| `call`(callback_func, arg, *[, result_shape, ...]) | 调用主机，并期望得到结果。 |'
- en: '| `barrier_wait`([logging_name]) | Blocks the calling thread until all current
    outfeed is processed. |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| `barrier_wait`([logging_name]) | 阻塞调用线程，直到所有当前 outfeed 处理完毕。 |'
- en: '| `CallbackException` | Signals that some callback function had exceptions.
    |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| `CallbackException` | 表示某些回调函数发生异常。 |'
