- en: 'jax.remat / jax.checkpoint changes: what you need to know'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: jax.remat / jax.checkpoint 更改：您需要了解的内容
- en: 原文：[`jax.readthedocs.io/en/latest/jep/11830-new-remat-checkpoint.html`](https://jax.readthedocs.io/en/latest/jep/11830-new-remat-checkpoint.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[`jax.readthedocs.io/en/latest/jep/11830-new-remat-checkpoint.html`](https://jax.readthedocs.io/en/latest/jep/11830-new-remat-checkpoint.html)
- en: Contents
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内容
- en: What’s going on?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发生了什么？
- en: How can I disable the change, and go back to the old behavior for now?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何暂时禁用更改并回到旧的行为？
- en: Why are we doing this?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么我们要这样做？
- en: What are the possible issues after the upgrade?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 升级后可能出现的问题有哪些？
- en: What’s going on?
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发生了什么？
- en: As of [#11830](https://github.com/google/jax/pull/11830) we’re switching on
    a new implementation of `jax.checkpoint()`, aka `jax.remat()` (the two names are
    aliases of one another). **For most code, there will be no changes.** But there
    may be some observable differences in edge cases; see What are the possible issues
    after the upgrade?
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 自 [#11830](https://github.com/google/jax/pull/11830) 开始，我们正在启用新的 `jax.checkpoint()`
    实现，也称为 `jax.remat()`（两个名称是互为别名）。**对于大多数代码，不会有任何更改。** 但在边缘情况下可能会有一些可观察的差异；参见升级后可能出现的问题有哪些？
- en: How can I disable the change, and go back to the old behavior for now?
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何暂时禁用更改并回到旧的行为？
- en: 'In case you have a problem with this change, **through version `jax==0.3.16`**
    it is possible to switch off the new implementation by setting the `jax_new_checkpoint`
    config option to be False, in any one of these ways:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对此更改有问题，**截至 `jax==0.3.16` 版本**，可以通过将 `jax_new_checkpoint` 配置选项设置为 `False`
    关闭新实现，以下是任何一种方法：
- en: set the shell environment variable `JAX_NEW_CHECKPOINT=0`;
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置 shell 环境变量 `JAX_NEW_CHECKPOINT=0`；
- en: execute `jax.config.update('jax_new_checkpoint', False)`;
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行 `jax.config.update('jax_new_checkpoint', False)`；
- en: if you parse flags with `absl`, pass the `--jax_new_checkpoint=False` option.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您使用 `absl` 解析标志，请传递 `--jax_new_checkpoint=False` 选项。
- en: If you need to revert to the old implementation, **please reach out** on a GitHub
    issue so that we can make the new implementation work for you.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要恢复到旧版本，请在GitHub问题上联系我们，以便我们为您使新版本正常工作。
- en: As of `jax==0.3.17` the `jax_new_checkpoint` config option is no longer available.
    If you have an issue, please reach out on [the issue tracker](https://github.com/google/jax/issues)
    so we can help fix it!
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `jax==0.3.17` 版本开始，不再提供 `jax_new_checkpoint` 配置选项。如果您遇到问题，请在[问题跟踪器](https://github.com/google/jax/issues)上联系我们以帮助解决！
- en: Why are we doing this?
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么我们要这样做？
- en: At the time of writing, JAX has two parallel implementations of `jax.checkpoint`.
    The new one has been used for months (e.g. by Pax and Flaxformer/T5X) on an opt-in
    basis. But it hasn’t been on-by-default.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 截至撰写时，JAX有两个并行实现的 `jax.checkpoint`。新版本已经在几个月内（例如Pax和Flaxformer/T5X）按选择使用。但默认情况下尚未启用。
- en: We want to switch the new implementation to be on-by-default, and then delete
    the old implementation. Using the new implementation, and removing the old implementation,
    gives users several benefits.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望将新实现设置为默认启用，并删除旧实现。使用新实现并删除旧实现将为用户带来多种好处。
- en: User-customizable rematerialization policies
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用户可定制的重新材料化策略
- en: The main upside of the new implementation is a new feature corresponding to
    the `policy` argument. The idea is to give precise user control over what intermediates
    get saved (versus rematerialized) during the forward pass of automatic differentiation.
    By exercising this control over the memory-usage vs recomputation tradeoff, users
    can get significant performance wins, especially in large models and in our LLM
    MLPerf submission!
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 新实现的主要优势是与 `policy` 参数对应的新功能。其目的是在自动微分的前向传递过程中，精确控制哪些中间结果保存（而不是重新计算）。通过控制内存使用与重新计算之间的权衡，用户可以获得显著的性能优势，尤其是在大型模型和我们的LLM
    MLPerf提交中！
- en: 'The full documentation for this feature is still forthcoming, but here’s a
    quick example:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 此功能的完整文档尚未发布，但以下是一个快速示例：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: By applying `jax.checkpoint` with `policy=jax.checkpoint_policies.checkpoint_dots`
    here, we ensure that only the results of matrix multiplies are allowed to be saved
    during the forward pass. The Jacobian coefficient values from `cos` applications,
    and the values of `sin` applications needed to compute them, are not saved from
    the forward pass and are instead recomputed during the backward pass. (Policies
    like this one can be effective on TPUs, where elementwise computations are effectively
    free but results from the matrix unit are worth saving.)
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在这里应用`jax.checkpoint`与`policy=jax.checkpoint_policies.checkpoint_dots`，我们确保只有矩阵乘法的结果在正向传播期间被保存。从`cos`应用中得到的雅可比系数值以及计算它们所需的`sin`应用的值在正向传播期间不会被保存，而是在反向传播期间重新计算。（像这样的策略在TPU上非常有效，其中逐元素计算实际上是免费的，但来自矩阵单元的结果值是值得保存的。）
- en: Ability to rematerialize constants, not just operations with data dependence
    on arguments
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 能够重新生成常数，而不仅仅是依赖于参数的操作
- en: 'The old `jax.checkpoint` implementation couldn’t actually rematerialize computations
    without a data dependence on arguments to the decorated function. Consider this
    toy example:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 旧的`jax.checkpoint`实现实际上不能在没有对装饰函数参数的数据依赖时重新生成计算。考虑这个玩具示例：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The old `jax.checkpoint` implementation was forced to save the value of `a`,
    which could require a lot of memory. The new `jax.checkpoint` implementation can
    rematerialize rather than save the value of `a`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 旧的`jax.checkpoint`实现被迫保存`a`的值，这可能需要大量内存。新的`jax.checkpoint`实现可以重新生成而不是保存`a`的值。
- en: Significantly less Python overhead in some cases
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在某些情况下显著减少Python开销
- en: The new `jax.checkpoint` incurs significantly less Python overhead in some cases.
    [Simple overhead benchmarks](https://github.com/google/jax/blob/88636d2b649bfa31fa58a30ea15c925f35637397/benchmarks/api_benchmark.py#L511-L539)
    got 10x faster. These overheads only arise in eager op-by-op execution, so in
    the common case of using a `jax.checkpoint` under a `jax.jit` or similar the speedups
    aren’t relevant. But still, nice!
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，新的`jax.checkpoint`在Python开销方面显著减少。[简单的开销基准测试](https://github.com/google/jax/blob/88636d2b649bfa31fa58a30ea15c925f35637397/benchmarks/api_benchmark.py#L511-L539)变快了10倍。这些开销只在急切的逐步执行中出现，因此在通常情况下，在`jax.jit`或类似方法下使用`jax.checkpoint`时，这些加速并不相关。但仍然很不错！
- en: Enabling new JAX features by simplifying internals
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过简化内部结构启用新的JAX功能
- en: This change unlocks big future user benefits too, like custom batching rules
    (the `vmap` analogue of `custom_vjp`) and a forward-differentiable upgrade to
    `custom_vjp`. It also significantly reduces complexity in parts of the JAX codebase,
    which will be good for maintainability and bug-fixing in general.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这个改变也为未来用户带来了很大的好处，比如自定义批处理规则（`vmap`的类比`custom_vjp`）以及`custom_vjp`的向前可微升级。它还显著减少了JAX代码库中某些部分的复杂性，这对于一般的可维护性和错误修复都是有好处的。
- en: What are the possible issues after the upgrade?
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 升级后可能出现的问题是什么？
- en: Innocuous numerical changes
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 无害的数值变化
- en: Because the new implementation can rematerialize more computations, including
    those of potentially large constants, some code may see small numerical changes.
    The magnitude of any numerical changes should be within the range we expect from
    changing compiler optimizations, like reordering of floating point operations.
    But some overly tight test tolerances may need to be slightly relaxed.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 因为新的实现可以重新生成更多的计算，包括那些可能很大的常数，所以一些代码可能会看到小的数值变化。任何数值变化的幅度应该在我们预期的编译器优化变化范围内，例如浮点操作的重新排序。但某些过于严格的测试容差可能需要略微放宽。
- en: The `concrete=True` option is removed.
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选项`concrete=True`被移除了。
- en: The old `jax.checkpoint` implementation had a boolean `concrete` option, which
    allowed tracing on concrete Python values (rather than delaying all computations
    and only tracing on abstracted values). That option was seldom used, and in the
    cases where it was used there were much simpler alternatives. So we removed the
    option in the new `jax.checkpoint`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 旧的`jax.checkpoint`实现有一个布尔选项`concrete`，允许跟踪具体的Python值（而不是延迟所有计算，并仅在抽象值上进行跟踪）。该选项很少被使用，而在使用它的情况下，有更简单的替代方案。因此，在新的`jax.checkpoint`中我们移除了这个选项。
- en: 'For example, the overwhelmingly common use of `concrete=True` in Google code
    was to support passing an argument like `is_training`:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在Google代码中，使用`concrete=True`的压倒性常见用法是支持传递像`is_training`这样的参数：
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'With the new `jax.checkpoint` implementation, we can accomplish the same using
    the `static\_argnums` option:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 使用新的`jax.checkpoint`实现，我们可以使用`static\_argnums`选项完成相同的功能：
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If `jax.numpy` operations need to be performed on static arguments, with their
    numerical results computed during Python tracing rather than delayed, we can use
    `static_argnums` with `jax.ensure_compile_time_eval()`. But it seems unlikely
    that you’d need this!
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要在静态参数上执行`jax.numpy`操作，并且它们的数值结果在 Python 追踪期间计算而不是延迟计算，我们可以使用`jax.ensure_compile_time_eval()`与`static_argnums`。但似乎你不太可能需要这样做！
