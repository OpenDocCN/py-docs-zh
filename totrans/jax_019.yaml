- en: Profiling JAX programs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对JAX程序进行性能分析
- en: 原文：[`jax.readthedocs.io/en/latest/profiling.html`](https://jax.readthedocs.io/en/latest/profiling.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[`jax.readthedocs.io/en/latest/profiling.html`](https://jax.readthedocs.io/en/latest/profiling.html)
- en: Viewing program traces with Perfetto
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Perfetto查看程序跟踪
- en: We can use the JAX profiler to generate traces of a JAX program that can be
    visualized using the [Perfetto visualizer](https://ui.perfetto.dev). Currently,
    this method blocks the program until a link is clicked and the Perfetto UI loads
    the trace. If you wish to get profiling information without any interaction, check
    out the Tensorboard profiler below.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用JAX分析器生成可以使用[Perfetto可视化工具](https://ui.perfetto.dev)查看的JAX程序的跟踪。目前，此方法会阻塞程序，直到点击链接并加载Perfetto
    UI以打开跟踪为止。如果您希望获取性能分析信息而无需任何交互，请查看下面的Tensorboard分析器。
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: After this computation is done, the program will prompt you to open a link to
    `ui.perfetto.dev`. When you open the link, the Perfetto UI will load the trace
    file and open a visualizer.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 计算完成后，程序会提示您打开链接到`ui.perfetto.dev`。打开链接后，Perfetto UI将加载跟踪文件并打开可视化工具。
- en: '![Perfetto trace viewer](img/9357f9090a2d8149fbef99811b8ed0f2.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![Perfetto跟踪查看器](img/9357f9090a2d8149fbef99811b8ed0f2.png)'
- en: Program execution will continue after loading the link. The link is no longer
    valid after opening once, but it will redirect to a new URL that remains valid.
    You can then click the “Share” button in the Perfetto UI to create a permalink
    to the trace that can be shared with others.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 加载链接后，程序执行将继续。链接在打开一次后将不再有效，但将重定向到一个保持有效的新URL。然后，您可以在Perfetto UI中单击“共享”按钮，创建可与他人共享的跟踪的永久链接。
- en: Remote profiling
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 远程分析
- en: 'When profiling code that is running remotely (for example on a hosted VM),
    you need to establish an SSH tunnel on port 9001 for the link to work. You can
    do that with this command:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在对远程运行的代码进行性能分析（例如在托管的虚拟机上）时，您需要在端口9001上建立SSH隧道以使链接工作。您可以使用以下命令执行此操作：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'or if you’re using Google Cloud:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 或者如果您正在使用Google Cloud：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Manual capture
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 手动捕获
- en: Instead of capturing traces programmatically using `jax.profiler.trace`, you
    can instead start a profiling server in the script of interest by calling `jax.profiler.start_server(<port>)`.
    If you only need the profiler server to be active for a portion of your script,
    you can shut it down by calling `jax.profiler.stop_server()`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是使用`jax.profiler.trace`以编程方式捕获跟踪，您可以通过在感兴趣的脚本中调用`jax.profiler.start_server(<port>)`来启动分析服务器。如果您只需在脚本的某部分保持分析服务器活动，则可以通过调用`jax.profiler.stop_server()`来关闭它。
- en: 'Once the script is running and after the profiler server has started, we can
    manually capture and trace by running:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本运行后并且分析服务器已启动后，我们可以通过运行以下命令手动捕获和跟踪：
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: By default, the resulting trace information is dumped into a temporary directory
    but this can be overridden by passing in `--log_dir=<directory of choice>`. Also,
    by default, the program will prompt you to open a link to `ui.perfetto.dev`. When
    you open the link, the Perfetto UI will load the trace file and open a visualizer.
    This feature is disabled by passing in `--no_perfetto_link` into the command.
    Alternatively, you can also point Tensorboard to the `log_dir` to analyze the
    trace (see the “Tensorboard Profiling” section below).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，生成的跟踪信息会被转储到临时目录中，但可以通过传递`--log_dir=<自定义目录>`来覆盖此设置。另外，默认情况下，程序将提示您打开链接到`ui.perfetto.dev`。打开链接后，Perfetto
    UI将加载跟踪文件并打开可视化工具。通过传递`--no_perfetto_link`命令可以禁用此功能。或者，您也可以将Tensorboard指向`log_dir`以分析跟踪（参见下面的“Tensorboard分析”部分）。
- en: '## TensorBoard profiling'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '## TensorBoard性能分析'
- en: '[TensorBoard’s profiler](https://www.tensorflow.org/tensorboard/tensorboard_profiling_keras)
    can be used to profile JAX programs. Tensorboard is a great way to acquire and
    visualize performance traces and profiles of your program, including activity
    on GPU and TPU. The end result looks something like this:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[TensorBoard的分析器](https://www.tensorflow.org/tensorboard/tensorboard_profiling_keras)可用于分析JAX程序。Tensorboard是获取和可视化程序性能跟踪和分析（包括GPU和TPU上的活动）的好方法。最终结果看起来类似于这样：'
- en: '![TensorBoard profiler example](img/21e301e55032925d9ef8c8e8b171cf4f.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![TensorBoard分析器示例](img/21e301e55032925d9ef8c8e8b171cf4f.png)'
- en: Installation
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装
- en: The TensorBoard profiler is only available with the version of TensorBoard bundled
    with TensorFlow.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: TensorBoard分析器仅与捆绑有TensorFlow的TensorBoard版本一起提供。
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If you already have TensorFlow installed, you only need to install the `tensorboard-plugin-profile`
    pip package. Be careful to only install one version of TensorFlow or TensorBoard,
    otherwise you may encounter the “duplicate plugins” error described below. See
    [`www.tensorflow.org/guide/profiler`](https://www.tensorflow.org/guide/profiler)
    for more information on installing TensorBoard.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已安装了TensorFlow，则只需安装`tensorboard-plugin-profile` pip包。请注意仅安装一个版本的TensorFlow或TensorBoard，否则可能会遇到下面描述的“重复插件”错误。有关安装TensorBoard的更多信息，请参见[`www.tensorflow.org/guide/profiler`](https://www.tensorflow.org/guide/profiler)。
- en: Programmatic capture
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 程序化捕获
- en: You can instrument your code to capture a profiler trace via the `jax.profiler.start_trace()`
    and `jax.profiler.stop_trace()` methods. Call `start_trace()` with the directory
    to write trace files to. This should be the same `--logdir` directory used to
    start TensorBoard. Then, you can use TensorBoard to view the traces.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过`jax.profiler.start_trace()`和`jax.profiler.stop_trace()`方法来配置您的代码以捕获性能分析器的追踪。调用`start_trace()`时需要指定写入追踪文件的目录。这个目录应该与启动TensorBoard时使用的`--logdir`目录相同。然后，您可以使用TensorBoard来查看这些追踪信息。
- en: 'For example, to take a profiler trace:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要获取性能分析器的追踪：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note the `block_until_ready()` call. We use this to make sure on-device execution
    is captured by the trace. See Asynchronous dispatch for details on why this is
    necessary.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`block_until_ready()`调用。我们使用这个函数来确保设备上的执行被追踪到。有关为什么需要这样做的详细信息，请参见异步调度部分。
- en: 'You can also use the `jax.profiler.trace()` context manager as an alternative
    to `start_trace` and `stop_trace`:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用`jax.profiler.trace()`上下文管理器作为`start_trace`和`stop_trace`的替代方法：
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To view the trace, first start TensorBoard if you haven’t already:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看追踪信息，请首先启动TensorBoard（如果尚未启动）：
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You should be able to load TensorBoard at [`localhost:6006/`](http://localhost:6006/)
    in this example. You can specify a different port with the `--port` flag. See
    Profiling on a remote machine below if running JAX on a remote server.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，您应该能够在[`localhost:6006/`](http://localhost:6006/)加载TensorBoard。您可以使用`--port`标志指定不同的端口。如果在远程服务器上运行JAX，请参见下面的远程机器上的分析。
- en: Then, either select “Profile” in the upper-right dropdown menu, or go directly
    to [`localhost:6006/#profile`](http://localhost:6006/#profile). Available traces
    appear in the “Runs” dropdown menu on the left. Select the run you’re interested
    in, and then under “Tools”, select `trace_viewer`. You should now see a timeline
    of the execution. You can use the WASD keys to navigate the trace, and click or
    drag to select events to see more details at the bottom. See [these TensorFlow
    docs](https://www.tensorflow.org/tensorboard/tensorboard_profiling_keras#use_the_tensorflow_profiler_to_profile_model_training_performance)
    for more details on using the trace viewer.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，要么在右上角的下拉菜单中选择“Profile”，要么直接访问[`localhost:6006/#profile`](http://localhost:6006/#profile)。可用的追踪信息会显示在左侧的“Runs”下拉菜单中。选择您感兴趣的运行，并在“Tools”下选择`trace_viewer`。现在您应该能看到执行时间轴。您可以使用WASD键来导航追踪信息，点击或拖动以选择事件并查看底部的更多详细信息。有关使用追踪查看器的更多详细信息，请参阅[这些TensorFlow文档](https://www.tensorflow.org/tensorboard/tensorboard_profiling_keras#use_the_tensorflow_profiler_to_profile_model_training_performance)。
- en: You can also use the `memory_viewer`, `op_profile`, and `graph_viewer` tools.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用`memory_viewer`、`op_profile`和`graph_viewer`工具。
- en: Manual capture via TensorBoard
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过TensorBoard手动捕获
- en: The following are instructions for capturing a manually-triggered N-second trace
    from a running program.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是从运行中的程序中手动触发N秒追踪的捕获说明。
- en: 'Start a TensorBoard server:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动TensorBoard服务器：
- en: '[PRE8]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: You should be able to load TensorBoard at [`localhost:6006/`](http://localhost:6006/).
    You can specify a different port with the `--port` flag. See Profiling on a remote
    machine below if running JAX on a remote server.
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[`localhost:6006/`](http://localhost:6006/)处应该能够加载TensorBoard。您可以使用`--port`标志指定不同的端口。如果在远程服务器上运行JAX，请参见下面的远程机器上的分析。
- en: 'In the Python program or process you’d like to profile, add the following somewhere
    near the beginning:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您希望进行分析的Python程序或进程中，将以下内容添加到开头的某个位置：
- en: '[PRE9]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This starts the profiler server that TensorBoard connects to. The profiler server
    must be running before you move on to the next step. When you’re done using the
    server, you can call `jax.profiler.stop_server()` to shut it down.
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将启动TensorBoard连接到的性能分析器服务器。在继续下一步之前，必须先运行性能分析器服务器。完成后，可以调用`jax.profiler.stop_server()`来关闭它。
- en: If you’d like to profile a snippet of a long-running program (e.g. a long training
    loop), you can put this at the beginning of the program and start your program
    as usual. If you’d like to profile a short program (e.g. a microbenchmark), one
    option is to start the profiler server in an IPython shell, and run the short
    program with `%run` after starting the capture in the next step. Another option
    is to start the profiler server at the beginning of the program and use `time.sleep()`
    to give you enough time to start the capture.
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你想要分析一个长时间运行的程序片段（例如长时间的训练循环），你可以将此代码放在程序开头并像往常一样启动程序。如果你想要分析一个短程序（例如微基准测试），一种选择是在IPython
    shell中启动分析器服务器，并在下一步开始捕获后用 `%run` 运行短程序。另一种选择是在程序开头启动分析器服务器，并使用 `time.sleep()`
    给你足够的时间启动捕获。
- en: Open [`localhost:6006/#profile`](http://localhost:6006/#profile), and click
    the “CAPTURE PROFILE” button in the upper left. Enter “localhost:9999” as the
    profile service URL (this is the address of the profiler server you started in
    the previous step). Enter the number of milliseconds you’d like to profile for,
    and click “CAPTURE”.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开[`localhost:6006/#profile`](http://localhost:6006/#profile)，并点击左上角的“CAPTURE
    PROFILE”按钮。将“localhost:9999”作为分析服务的URL（这是你在上一步中启动的分析器服务器的地址）。输入你想要进行分析的毫秒数，然后点击“CAPTURE”。
- en: If the code you’d like to profile isn’t already running (e.g. if you started
    the profiler server in a Python shell), run it while the capture is running.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你想要分析的代码尚未运行（例如在Python shell中启动了分析器服务器），请在进行捕获时运行它。
- en: After the capture finishes, TensorBoard should automatically refresh. (Not all
    of the TensorBoard profiling features are hooked up with JAX, so it may initially
    look like nothing was captured.) On the left under “Tools”, select `trace_viewer`.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 捕获完成后，TensorBoard应会自动刷新。（并非所有TensorBoard分析功能都与JAX连接，所以初始时看起来可能没有捕获到任何内容。）在左侧的“工具”下，选择
    `trace_viewer`。
- en: You should now see a timeline of the execution. You can use the WASD keys to
    navigate the trace, and click or drag to select events to see more details at
    the bottom. See [these TensorFlow docs](https://www.tensorflow.org/tensorboard/tensorboard_profiling_keras#use_the_tensorflow_profiler_to_profile_model_training_performance)
    for more details on using the trace viewer.
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在你应该可以看到执行的时间轴。你可以使用WASD键来导航跟踪，点击或拖动选择事件以在底部查看更多详细信息。参见[这些TensorFlow文档](https://www.tensorflow.org/tensorboard/tensorboard_profiling_keras#use_the_tensorflow_profiler_to_profile_model_training_performance)获取有关使用跟踪查看器的更多详细信息。
- en: You can also use the `memory_viewer`, `op_profile`, and `graph_viewer` tools.
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你也可以使用 `memory_viewer`、`op_profile` 和 `graph_viewer` 工具。
- en: Adding custom trace events
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加自定义跟踪事件
- en: By default, the events in the trace viewer are mostly low-level internal JAX
    functions. You can add your own events and functions by using `jax.profiler.TraceAnnotation`
    and `jax.profiler.annotate_function()` in your code.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，跟踪查看器中的事件大多是低级内部JAX函数。你可以使用 `jax.profiler.TraceAnnotation` 和 `jax.profiler.annotate_function()`
    在你的代码中添加自定义事件和函数。
- en: Troubleshooting
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 故障排除
- en: GPU profiling
  id: totrans-54
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: GPU 分析
- en: Programs running on GPU should produce traces for the GPU streams near the top
    of the trace viewer. If you’re only seeing the host traces, check your program
    logs and/or output for the following error messages.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 运行在GPU上的程序应该在跟踪查看器顶部附近生成GPU流的跟踪。如果只看到主机跟踪，请检查程序日志和/或输出，查看以下错误消息。
- en: '**If you get an error like: `Could not load dynamic library ''libcupti.so.10.1''`**'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果出现类似 `Could not load dynamic library ''libcupti.so.10.1''` 的错误**'
- en: 'Full error:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 完整错误：
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Add the path to `libcupti.so` to the environment variable `LD_LIBRARY_PATH`.
    (Try `locate libcupti.so` to find the path.) For example:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 将`libcupti.so`的路径添加到环境变量`LD_LIBRARY_PATH`中。（尝试使用`locate libcupti.so`来找到路径。）例如：
- en: '[PRE11]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: If you still get the `Could not load dynamic library` message after doing this,
    check if the GPU trace shows up in the trace viewer anyway. This message sometimes
    occurs even when everything is working, since it looks for the `libcupti` library
    in multiple places.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在做了以上步骤后仍然收到 `Could not load dynamic library` 错误消息，请检查GPU跟踪是否仍然显示在跟踪查看器中。有时即使一切正常，它也会出现此消息，因为它在多个位置查找
    `libcupti` 库。
- en: '**If you get an error like: `failed with error CUPTI_ERROR_INSUFFICIENT_PRIVILEGES`**'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果出现类似 `failed with error CUPTI_ERROR_INSUFFICIENT_PRIVILEGES` 的错误**'
- en: 'Full error:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 完整错误：
- en: '[PRE12]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Run the following commands (note this requires a reboot):'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令（注意这将需要重新启动）：
- en: '[PRE13]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: See [NVIDIA’s documentation on this error](https://developer.nvidia.com/nvidia-development-tools-solutions-err-nvgpuctrperm-cupti)
    for more information.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 查看更多关于此错误的信息，请参阅[NVIDIA的文档](https://developer.nvidia.com/nvidia-development-tools-solutions-err-nvgpuctrperm-cupti)。
- en: '#### Profiling on a remote machine'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '#### 在远程机器上进行性能分析'
- en: 'If the JAX program you’d like to profile is running on a remote machine, one
    option is to run all the instructions above on the remote machine (in particular,
    start the TensorBoard server on the remote machine), then use SSH local port forwarding
    to access the TensorBoard web UI from your local machine. Use the following SSH
    command to forward the default TensorBoard port 6006 from the local to the remote
    machine:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要分析的JAX程序正在远程机器上运行，一种选择是在远程机器上执行上述所有说明（特别是在远程机器上启动TensorBoard服务器），然后使用SSH本地端口转发从本地访问TensorBoard
    Web UI。使用以下SSH命令将默认的TensorBoard端口6006从本地转发到远程机器：
- en: '[PRE14]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'or if you’re using Google Cloud:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 或者如果您正在使用Google Cloud：
- en: '[PRE15]  #### Multiple TensorBoard installs'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE15]  #### 多个TensorBoard安装'
- en: '**If starting TensorBoard fails with an error like: `ValueError: Duplicate
    plugins for name projector`**'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果启动TensorBoard失败，并出现类似于`ValueError: Duplicate plugins for name projector`的错误**'
- en: 'It’s often because there are two versions of TensorBoard and/or TensorFlow
    installed (e.g. the `tensorflow`, `tf-nightly`, `tensorboard`, and `tb-nightly`
    pip packages all include TensorBoard). Uninstalling a single pip package can result
    in the `tensorboard` executable being removed which is then hard to replace, so
    it may be necessary to uninstall everything and reinstall a single version:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这通常是因为安装了两个版本的TensorBoard和/或TensorFlow（例如，`tensorflow`、`tf-nightly`、`tensorboard`和`tb-nightly`
    pip包都包含TensorBoard）。卸载一个pip包可能会导致`tensorboard`可执行文件被移除，难以替换，因此可能需要卸载所有内容并重新安装单个版本：
- en: '[PRE16]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Nsight
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Nsight
- en: NVIDIA’s `Nsight` tools can be used to trace and profile JAX code on GPU. For
    details, see the [`Nsight` documentation](https://developer.nvidia.com/tools-overview).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: NVIDIA的`Nsight`工具可用于跟踪和分析GPU上的JAX代码。有关详情，请参阅[`Nsight`文档](https://developer.nvidia.com/tools-overview)。
