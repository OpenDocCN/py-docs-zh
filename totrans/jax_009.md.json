["```py\nimport jax\nimport jax.numpy as jnp\n\nx = jnp.arange(5)\nw = jnp.array([2., 3., 4.])\n\ndef convolve(x, w):\n  output = []\n  for i in range(1, len(x)-1):\n    output.append(jnp.dot(x[i-1:i+2], w))\n  return jnp.array(output)\n\nconvolve(x, w) \n```", "```py\nArray([11., 20., 29.], dtype=float32) \n```", "```py\nxs = jnp.stack([x, x])\nws = jnp.stack([w, w]) \n```", "```py\ndef manually_batched_convolve(xs, ws):\n  output = []\n  for i in range(xs.shape[0]):\n    output.append(convolve(xs[i], ws[i]))\n  return jnp.stack(output)\n\nmanually_batched_convolve(xs, ws) \n```", "```py\nArray([[11., 20., 29.],\n       [11., 20., 29.]], dtype=float32) \n```", "```py\ndef manually_vectorized_convolve(xs, ws):\n  output = []\n  for i in range(1, xs.shape[-1] -1):\n    output.append(jnp.sum(xs[:, i-1:i+2] * ws, axis=1))\n  return jnp.stack(output, axis=1)\n\nmanually_vectorized_convolve(xs, ws) \n```", "```py\nArray([[11., 20., 29.],\n       [11., 20., 29.]], dtype=float32) \n```", "```py\nauto_batch_convolve = jax.vmap(convolve)\n\nauto_batch_convolve(xs, ws) \n```", "```py\nArray([[11., 20., 29.],\n       [11., 20., 29.]], dtype=float32) \n```", "```py\nauto_batch_convolve_v2 = jax.vmap(convolve, in_axes=1, out_axes=1)\n\nxst = jnp.transpose(xs)\nwst = jnp.transpose(ws)\n\nauto_batch_convolve_v2(xst, wst) \n```", "```py\nArray([[11., 11.],\n       [20., 20.],\n       [29., 29.]], dtype=float32) \n```", "```py\nbatch_convolve_v3 = jax.vmap(convolve, in_axes=[0, None])\n\nbatch_convolve_v3(xs, w) \n```", "```py\nArray([[11., 20., 29.],\n       [11., 20., 29.]], dtype=float32) \n```", "```py\njitted_batch_convolve = jax.jit(auto_batch_convolve)\n\njitted_batch_convolve(xs, ws) \n```", "```py\nArray([[11., 20., 29.],\n       [11., 20., 29.]], dtype=float32) \n```"]