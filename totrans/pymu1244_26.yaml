- en: Archive
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pymupdf.readthedocs.io/en/latest/archive-class.html](https://pymupdf.readthedocs.io/en/latest/archive-class.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*   New in v1.21.0'
  prefs: []
  type: TYPE_NORMAL
- en: This class represents a generalization of file folders and container files like
    ZIP and TAR archives. Archives allow accessing arbitrary collections of file folders,
    ZIP / TAR files and single binary data elements as if they all were part of one
    hierarchical tree of folders.
  prefs: []
  type: TYPE_NORMAL
- en: In PyMuPDF, archives are currently only used by [Story](story-class.html#story)
    objects to specify where to look for fonts, images and other resources.
  prefs: []
  type: TYPE_NORMAL
- en: '| **Method / Attribute** | **Short Description** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [`Archive.add()`](#Archive.add "Archive.add") | add new data to the archive
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Archive.has_entry()`](#Archive.has_entry "Archive.has_entry") | check if
    given name is a member |'
  prefs: []
  type: TYPE_TB
- en: '| [`Archive.read_entry()`](#Archive.read_entry "Archive.read_entry") | read
    the data given by the name |'
  prefs: []
  type: TYPE_TB
- en: '| [`Archive.entry_list`](#Archive.entry_list "Archive.entry_list") | list[dict]
    of archive items |'
  prefs: []
  type: TYPE_TB
- en: '**Class API**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Creates a new archive. Without parameters, an empty archive is created.
  prefs: []
  type: TYPE_NORMAL
- en: 'If provided, `content` may be one of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'another Archive: the archive is being made a sub-archive of the new one.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'a string: this must be the name of a local folder or file. `pathlib.Path` objects
    are also supported.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A **folder** will be converted to a sub-archive, so its files (and any sub-folders)
    can be accessed by their names.
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: A **file** will be read with mode `"rb"` and these binary data (a `bytes` object)
    be treated as a single-member sub-archive. In this case, the `path` parameter
    is **mandatory** and should be the member name under which this item can be found
    / retrieved.
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: 'a `zipfile.ZipFile` or `tarfile.TarFile` object: Will be added as a sub-archive.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'a Python binary object (`bytes`, `bytearray`, `io.BytesIO`): this will add
    a single-member sub-archive. In this case, the `path` parameter is **mandatory**
    and should be the member name under which this item can be found / retrieved.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'a tuple `(data, name)`: This will add a single-member sub-archive with the
    member name [`name`](colorspace.html#Colorspace.name "Colorspace.name"). `data`
    may be a Python binary object or a local file name (in which case its binary file
    content is used). Use this format if you need to specify `path`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'a Python sequence: This is a convenience format to specify any combination
    of the above.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If provided, `path` must be a string.
  prefs: []
  type: TYPE_NORMAL
- en: If `content` is either binary data or a file name, this parameter is mandatory
    and must be the name under which the data can be found.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Otherwise this parameter is optional. It can be used to simulate a folder name
    or a mount point, under which this sub-archive’s elements can be found. For example
    this specification `Archive((data, "name"), "path")` means that `data` will be
    found using the element name `"path/name"`. Similar is true for other sub-archives:
    to retrieve members of a ZIP sub-archive, their names must be prefixed with `"path/"`.
    The main purpose of this parameter probably is to differentiate between duplicate
    names.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If duplicate entry names exist in the archive, always the last entry with that
    name will be found / retrieved. During archive creation, or appending more data
    to an archive (see [`Archive.add()`](#Archive.add "Archive.add")) no check for
    duplicates will be made. Use the `path` parameter to prevent this from happening.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Append a sub-archive. The meaning of the parameters are exactly the same as
    explained above. Of course, parameter `content` is not optional here.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Checks whether an entry exists in any of the sub-archives.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**name** (*str*) – The fully qualified name of the entry. So must include any
    `path` prefix under which the entry’s sub-archive has been added.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '`True` or `False`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Retrieve the data of an entry.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**name** (*str*) – The fully qualified name of the entry. So must include any
    `path` prefix under which the entry’s sub-archive has been added.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: The binary data (`bytes`) of the entry. If not found, an exception is raised.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'A list of the archive’s sub-archives. Each list item is a dictionary with the
    following keys:'
  prefs: []
  type: TYPE_NORMAL
- en: '`entries` – a list of (top-level) entry names in this sub-archive.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fmt` – the format of the sub-archive. This is one of the strings “dir” (file
    folder), “zip” (ZIP archive), “tar” (TAR archive), or “tree” for single binary
    entries or file content.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`path` – the value of the `path` parameter under which this sub-archive was
    added.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Example:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Do you have any feedback on this page?
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: This software is provided AS-IS with no warranty, either express or implied.
    This software is distributed under license and may not be copied, modified or
    distributed except as expressly authorized under the terms of that license. Refer
    to licensing information at [artifex.com](https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link)
    or contact Artifex Software Inc., 39 Mesa Street, Suite 108A, San Francisco CA
    94129, United States for further information.
  prefs: []
  type: TYPE_NORMAL
- en: This documentation covers all versions up to 1.24.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[![Discord logo](../Images/66cbb5081103a580193aa66c87b90d9a.png)](https://discord.gg/TSpYGBW4eq)'
  prefs: []
  type: TYPE_NORMAL
