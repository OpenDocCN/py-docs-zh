["```py\n>>> xreflen = doc.xref_length()  # length of objects table\n>>> for xref in range(1, xreflen):  # skip item 0!\n print(\"\")\n print(\"object %i (stream: %s)\" % (xref, doc.xref_is_stream(xref)))\n print(doc.xref_object(xref, compressed=False)) \n```", "```py\nobject 1 (stream: False)\n<<\n    /ModDate (D:20170314122233-04'00')\n    /PXCViewerInfo (PDF-XChange Viewer;2.5.312.1;Feb  9 2015;12:00:06;D:20170314122233-04'00')\n>>\n\nobject 2 (stream: False)\n<<\n    /Type /Catalog\n    /Pages 3 0 R\n>>\n\nobject 3 (stream: False)\n<<\n    /Kids [ 4 0 R 5 0 R ]\n    /Type /Pages\n    /Count 2\n>>\n\nobject 4 (stream: False)\n<<\n    /Type /Page\n    /Annots [ 6 0 R ]\n    /Parent 3 0 R\n    /Contents 7 0 R\n    /MediaBox [ 0 0 595 842 ]\n    /Resources 8 0 R\n>>\n...\nobject 7 (stream: True)\n<<\n    /Length 494\n    /Filter /FlateDecode\n>>\n... \n```", "```py\n>>> xreflen = doc.xref_length() # number of objects in file\n>>> for xref in range(1, xreflen): # skip item 0!\n if stream := doc.xref_stream(xref):\n # do something with it (it is a bytes object or None)\n # e.g. just write it back:\n doc.update_stream(xref, stream) \n```", "```py\n>>> # method 1: use the MuPDF clean function\n>>> page.clean_contents()  # cleans and combines multiple Contents\n>>> xref = page.get_contents()[0]  # only one /Contents now!\n>>> cont = doc.xref_stream(xref)\n>>> # this has also reformatted the PDF commands\n\n>>> # method 2: extract concatenated contents\n>>> cont = page.read_contents()\n>>> # the /Contents source itself is unmodified \n```", "```py\n>>> import pymupdf\n>>> doc=pymupdf.open(\"PyMuPDF.pdf\")\n>>> cat = doc.pdf_catalog()  # get xref of the /Catalog\n>>> print(doc.xref_object(cat))  # print object definition\n<<\n /Type/Catalog                 % object type\n /Pages 3593 0 R               % points to page tree\n /OpenAction 225 0 R           % action to perform on open\n /Names 3832 0 R               % points to global names tree\n /PageMode /UseOutlines        % initially show the TOC\n /PageLabels<</Nums[0<</S/D>>2<</S/r>>8<</S/D>>]>> % labels given to pages\n /Outlines 3835 0 R            % points to outline tree\n>> \n```", "```py\n>>> import pymupdf\n>>> doc=pymupdf.open(\"PyMuPDF.pdf\")\n>>> print(doc.xref_object(-1))  # or: print(doc.pdf_trailer())\n<<\n/Type /XRef\n/Index [ 0 8263 ]\n/Size 8263\n/W [ 1 3 1 ]\n/Root 8260 0 R\n/Info 8261 0 R\n/ID [ <4339B9CEE46C2CD28A79EBDDD67CC9B3> <4339B9CEE46C2CD28A79EBDDD67CC9B3> ]\n/Length 19883\n/Filter /FlateDecode\n>>\n>>> \n```", "```py\n>>> xmlmetadata = doc.get_xml_metadata()\n>>> print(xmlmetadata)\n<?xpacket begin=\"\\ufeff\" id=\"W5M0MpCehiHzreSzNTczkc9d\"?>\n<x:xmpmeta  x:xmptk=\"3.1-702\">\n<rdf:RDF >\n...\nomitted data\n...\n<?xpacket end=\"w\"?> \n```", "```py\n>>> # write back modified XML metadata:\n>>> doc.set_xml_metadata(xmlmetadata)\n>>>\n>>> # XML metadata can be deleted like this:\n>>> doc.del_xml_metadata() \n```", "```py\n# ---------------------\n# standard metadata\n# ---------------------\npprint(doc.metadata)\n{'author': 'PRINCE',\n 'creationDate': \"D:2010102417034406'-30'\",\n 'creator': 'PrimoPDF http://www.primopdf.com/',\n 'encryption': None,\n 'format': 'PDF 1.4',\n 'keywords': '',\n 'modDate': \"D:20200725062431-04'00'\",\n 'producer': 'macOS Version 10.15.6 (Build 19G71a) Quartz PDFContext, '\n             'AppendMode 1.1',\n 'subject': '',\n 'title': 'Full page fax print',\n 'trapped': ''} \n```", "```py\n# ----------------------------------\n# metadata including private items\n# ----------------------------------\nmetadata = {}  # make my own metadata dict\nwhat, value = doc.xref_get_key(-1, \"Info\")  # /Info key in the trailer\nif what != \"xref\":\n    pass  # PDF has no metadata\nelse:\n    xref = int(value.replace(\"0 R\", \"\"))  # extract the metadata xref\n    for key in doc.xref_get_keys(xref):\n        metadata[key] = doc.xref_get_key(xref, key)[1]\npprint(metadata)\n{'Author': 'PRINCE',\n 'CreationDate': \"D:2010102417034406'-30'\",\n 'Creator': 'PrimoPDF http://www.primopdf.com/',\n 'ModDate': \"D:20200725062431-04'00'\",\n 'PXCViewerInfo': 'PDF-XChange Viewer;2.5.312.1;Feb  9 '\n                 \"2015;12:00:06;D:20200725062431-04'00'\",\n 'Producer': 'macOS Version 10.15.6 (Build 19G71a) Quartz PDFContext, '\n             'AppendMode 1.1',\n 'Title': 'Full page fax print'}\n# ---------------------------------------------------------------\n# note the additional 'PXCViewerInfo' key - ignored in standard!\n# --------------------------------------------------------------- \n```", "```py\nwhat, value = doc.xref_get_key(-1, \"Info\")  # /Info key in the trailer\nif what != \"xref\":\n    raise ValueError(\"PDF has no metadata\")\nxref = int(value.replace(\"0 R\", \"\"))  # extract the metadata xref\n# add some private information\ndoc.xref_set_key(xref, \"mykey\", pymupdf.get_pdf_str(\"北京 is Beijing\"))\n#\n# after executing the previous code snippet, we will see this:\npprint(metadata)\n{'Author': 'PRINCE',\n 'CreationDate': \"D:2010102417034406'-30'\",\n 'Creator': 'PrimoPDF http://www.primopdf.com/',\n 'ModDate': \"D:20200725062431-04'00'\",\n 'PXCViewerInfo': 'PDF-XChange Viewer;2.5.312.1;Feb  9 '\n                  \"2015;12:00:06;D:20200725062431-04'00'\",\n 'Producer': 'macOS Version 10.15.6 (Build 19G71a) Quartz PDFContext, '\n             'AppendMode 1.1',\n 'Title': 'Full page fax print',\n 'mykey': '北京 is Beijing'} \n```", "```py\n    In [1]: import pymupdf\n    In [2]: doc = pymupdf.open(\"pymupdf.pdf\")\n    In [3]: page = doc[0]\n    In [4]: from pprint import pprint\n    In [5]: pprint(doc.xref_get_keys(page.xref))\n    ('Type', 'Contents', 'Resources', 'MediaBox', 'Parent') \n    ```", "```py\n    In [6]: print(doc.xref_object(page.xref))\n    <<\n      /Type /Page\n      /Contents 1297 0 R\n      /Resources 1296 0 R\n      /MediaBox [ 0 0 612 792 ]\n      /Parent 1301 0 R\n    >> \n    ```", "```py\n    In [7]: doc.xref_get_key(page.xref, \"MediaBox\")\n    Out[7]: ('array', '[0 0 612 792]') \n    ```", "```py\n    In [9]: for key in doc.xref_get_keys(page.xref):\n    ...:        print(\"%s = %s\" % (key, doc.xref_get_key(page.xref, key)))\n    ...:\n    Type = ('name', '/Page')\n    Contents = ('xref', '1297 0 R')\n    Resources = ('xref', '1296 0 R')\n    MediaBox = ('array', '[0 0 612 792]')\n    Parent = ('xref', '1301 0 R') \n    ```", "```py\n    In [11]: doc.xref_get_key(page.xref, \"Rotate\")  # no rotation set:\n    Out[11]: ('null', 'null')\n    In [12]: doc.xref_set_key(page.xref, \"Rotate\", \"90\")  # insert a new key\n    In [13]: print(doc.xref_object(page.xref))  # confirm success\n    <<\n      /Type /Page\n      /Contents 1297 0 R\n      /Resources 1296 0 R\n      /MediaBox [ 0 0 612 792 ]\n      /Parent 1301 0 R\n      /Rotate 90\n    >> \n    ```", "```py\n    In [15]: print(doc.xref_object(page.xref))\n    <<\n      /Type /Page\n      /Contents 1297 0 R\n      /Resources <<\n        /XObject <<\n          /Im1 1291 0 R\n        >>\n        /Font <<\n          /F39 1299 0 R\n          /F40 1300 0 R\n        >>\n      >>\n      /MediaBox [ 0 0 612 792 ]\n      /Parent 1301 0 R\n      /Rotate 90\n    >> \n    ```", "```py\n    In [16]: doc.xref_get_key(page.xref, \"Resources/XObject/Im1\")\n    Out[16]: ('xref', '1291 0 R') \n    ```", "```py\n    In [17]: doc.xref_set_key(page.xref, \"Resources/XObject/Im1\", \"9999 0 R\")\n    In [18]: print(doc.xref_object(page.xref))  # confirm success:\n    <<\n      /Type /Page\n      /Contents 1297 0 R\n      /Resources <<\n        /XObject <<\n          /Im1 9999 0 R\n        >>\n        /Font <<\n          /F39 1299 0 R\n          /F40 1300 0 R\n        >>\n      >>\n      /MediaBox [ 0 0 612 792 ]\n      /Parent 1301 0 R\n      /Rotate 90\n    >> \n    ```", "```py\n    In [5]: print(doc.xref_object(xref))  # some existing PDF object:\n    <<\n      /A <<\n      >>\n    >>\n    In [6]: # the following will create 'B', 'C' and 'D'\n    In [7]: doc.xref_set_key(xref, \"A/B/C/D\", \"[1 2 3 4]\")\n    In [8]: print(doc.xref_object(xref))  # check out what happened:\n    <<\n      /A <<\n        /B <<\n          /C <<\n            /D [ 1 2 3 4 ]\n          >>\n        >>\n      >>\n    >> \n    ```", "```py\n    In [9]: # 'D' is an array, no dictionary!\n    In [10]: doc.xref_set_key(xref, \"A/B/C/D/E\", \"(hello)\")\n    mupdf: not a dict (array)\n    --- ... ---\n    RuntimeError: not a dict (array) \n    ```", "```py\n    In [13]: # the following object points to an xref\n    In [14]: print(doc.xref_object(4))\n    <<\n      /E 3 0 R\n    >>\n    In [15]: # 'E' is an indirect object and cannot be modified here!\n    In [16]: doc.xref_set_key(4, \"E/F\", \"90\")\n    mupdf: path to 'F' has indirects\n    --- ... ---\n    RuntimeError: path to 'F' has indirects \n    ```", "```py\n>>> xreflen = doc.xref_length()  # length of objects table\n>>> for xref in range(1, xreflen):  # skip item 0!\n print(\"\")\n print(\"object %i (stream: %s)\" % (xref, doc.xref_is_stream(xref)))\n print(doc.xref_object(xref, compressed=False)) \n```", "```py\nobject 1 (stream: False)\n<<\n    /ModDate (D:20170314122233-04'00')\n    /PXCViewerInfo (PDF-XChange Viewer;2.5.312.1;Feb  9 2015;12:00:06;D:20170314122233-04'00')\n>>\n\nobject 2 (stream: False)\n<<\n    /Type /Catalog\n    /Pages 3 0 R\n>>\n\nobject 3 (stream: False)\n<<\n    /Kids [ 4 0 R 5 0 R ]\n    /Type /Pages\n    /Count 2\n>>\n\nobject 4 (stream: False)\n<<\n    /Type /Page\n    /Annots [ 6 0 R ]\n    /Parent 3 0 R\n    /Contents 7 0 R\n    /MediaBox [ 0 0 595 842 ]\n    /Resources 8 0 R\n>>\n...\nobject 7 (stream: True)\n<<\n    /Length 494\n    /Filter /FlateDecode\n>>\n... \n```", "```py\n>>> xreflen = doc.xref_length() # number of objects in file\n>>> for xref in range(1, xreflen): # skip item 0!\n if stream := doc.xref_stream(xref):\n # do something with it (it is a bytes object or None)\n # e.g. just write it back:\n doc.update_stream(xref, stream) \n```", "```py\n>>> # method 1: use the MuPDF clean function\n>>> page.clean_contents()  # cleans and combines multiple Contents\n>>> xref = page.get_contents()[0]  # only one /Contents now!\n>>> cont = doc.xref_stream(xref)\n>>> # this has also reformatted the PDF commands\n\n>>> # method 2: extract concatenated contents\n>>> cont = page.read_contents()\n>>> # the /Contents source itself is unmodified \n```", "```py\n>>> import pymupdf\n>>> doc=pymupdf.open(\"PyMuPDF.pdf\")\n>>> cat = doc.pdf_catalog()  # get xref of the /Catalog\n>>> print(doc.xref_object(cat))  # print object definition\n<<\n /Type/Catalog                 % object type\n /Pages 3593 0 R               % points to page tree\n /OpenAction 225 0 R           % action to perform on open\n /Names 3832 0 R               % points to global names tree\n /PageMode /UseOutlines        % initially show the TOC\n /PageLabels<</Nums[0<</S/D>>2<</S/r>>8<</S/D>>]>> % labels given to pages\n /Outlines 3835 0 R            % points to outline tree\n>> \n```", "```py\n>>> import pymupdf\n>>> doc=pymupdf.open(\"PyMuPDF.pdf\")\n>>> print(doc.xref_object(-1))  # or: print(doc.pdf_trailer())\n<<\n/Type /XRef\n/Index [ 0 8263 ]\n/Size 8263\n/W [ 1 3 1 ]\n/Root 8260 0 R\n/Info 8261 0 R\n/ID [ <4339B9CEE46C2CD28A79EBDDD67CC9B3> <4339B9CEE46C2CD28A79EBDDD67CC9B3> ]\n/Length 19883\n/Filter /FlateDecode\n>>\n>>> \n```", "```py\n>>> xmlmetadata = doc.get_xml_metadata()\n>>> print(xmlmetadata)\n<?xpacket begin=\"\\ufeff\" id=\"W5M0MpCehiHzreSzNTczkc9d\"?>\n<x:xmpmeta  x:xmptk=\"3.1-702\">\n<rdf:RDF >\n...\nomitted data\n...\n<?xpacket end=\"w\"?> \n```", "```py\n>>> # write back modified XML metadata:\n>>> doc.set_xml_metadata(xmlmetadata)\n>>>\n>>> # XML metadata can be deleted like this:\n>>> doc.del_xml_metadata() \n```", "```py\n# ---------------------\n# standard metadata\n# ---------------------\npprint(doc.metadata)\n{'author': 'PRINCE',\n 'creationDate': \"D:2010102417034406'-30'\",\n 'creator': 'PrimoPDF http://www.primopdf.com/',\n 'encryption': None,\n 'format': 'PDF 1.4',\n 'keywords': '',\n 'modDate': \"D:20200725062431-04'00'\",\n 'producer': 'macOS Version 10.15.6 (Build 19G71a) Quartz PDFContext, '\n             'AppendMode 1.1',\n 'subject': '',\n 'title': 'Full page fax print',\n 'trapped': ''} \n```", "```py\n# ----------------------------------\n# metadata including private items\n# ----------------------------------\nmetadata = {}  # make my own metadata dict\nwhat, value = doc.xref_get_key(-1, \"Info\")  # /Info key in the trailer\nif what != \"xref\":\n    pass  # PDF has no metadata\nelse:\n    xref = int(value.replace(\"0 R\", \"\"))  # extract the metadata xref\n    for key in doc.xref_get_keys(xref):\n        metadata[key] = doc.xref_get_key(xref, key)[1]\npprint(metadata)\n{'Author': 'PRINCE',\n 'CreationDate': \"D:2010102417034406'-30'\",\n 'Creator': 'PrimoPDF http://www.primopdf.com/',\n 'ModDate': \"D:20200725062431-04'00'\",\n 'PXCViewerInfo': 'PDF-XChange Viewer;2.5.312.1;Feb  9 '\n                 \"2015;12:00:06;D:20200725062431-04'00'\",\n 'Producer': 'macOS Version 10.15.6 (Build 19G71a) Quartz PDFContext, '\n             'AppendMode 1.1',\n 'Title': 'Full page fax print'}\n# ---------------------------------------------------------------\n# note the additional 'PXCViewerInfo' key - ignored in standard!\n# --------------------------------------------------------------- \n```", "```py\nwhat, value = doc.xref_get_key(-1, \"Info\")  # /Info key in the trailer\nif what != \"xref\":\n    raise ValueError(\"PDF has no metadata\")\nxref = int(value.replace(\"0 R\", \"\"))  # extract the metadata xref\n# add some private information\ndoc.xref_set_key(xref, \"mykey\", pymupdf.get_pdf_str(\"北京 is Beijing\"))\n#\n# after executing the previous code snippet, we will see this:\npprint(metadata)\n{'Author': 'PRINCE',\n 'CreationDate': \"D:2010102417034406'-30'\",\n 'Creator': 'PrimoPDF http://www.primopdf.com/',\n 'ModDate': \"D:20200725062431-04'00'\",\n 'PXCViewerInfo': 'PDF-XChange Viewer;2.5.312.1;Feb  9 '\n                  \"2015;12:00:06;D:20200725062431-04'00'\",\n 'Producer': 'macOS Version 10.15.6 (Build 19G71a) Quartz PDFContext, '\n             'AppendMode 1.1',\n 'Title': 'Full page fax print',\n 'mykey': '北京 is Beijing'} \n```", "```py\n    In [1]: import pymupdf\n    In [2]: doc = pymupdf.open(\"pymupdf.pdf\")\n    In [3]: page = doc[0]\n    In [4]: from pprint import pprint\n    In [5]: pprint(doc.xref_get_keys(page.xref))\n    ('Type', 'Contents', 'Resources', 'MediaBox', 'Parent') \n    ```", "```py\n    In [6]: print(doc.xref_object(page.xref))\n    <<\n      /Type /Page\n      /Contents 1297 0 R\n      /Resources 1296 0 R\n      /MediaBox [ 0 0 612 792 ]\n      /Parent 1301 0 R\n    >> \n    ```", "```py\n    In [7]: doc.xref_get_key(page.xref, \"MediaBox\")\n    Out[7]: ('array', '[0 0 612 792]') \n    ```", "```py\n    In [9]: for key in doc.xref_get_keys(page.xref):\n    ...:        print(\"%s = %s\" % (key, doc.xref_get_key(page.xref, key)))\n    ...:\n    Type = ('name', '/Page')\n    Contents = ('xref', '1297 0 R')\n    Resources = ('xref', '1296 0 R')\n    MediaBox = ('array', '[0 0 612 792]')\n    Parent = ('xref', '1301 0 R') \n    ```", "```py\n    In [11]: doc.xref_get_key(page.xref, \"Rotate\")  # no rotation set:\n    Out[11]: ('null', 'null')\n    In [12]: doc.xref_set_key(page.xref, \"Rotate\", \"90\")  # insert a new key\n    In [13]: print(doc.xref_object(page.xref))  # confirm success\n    <<\n      /Type /Page\n      /Contents 1297 0 R\n      /Resources 1296 0 R\n      /MediaBox [ 0 0 612 792 ]\n      /Parent 1301 0 R\n      /Rotate 90\n    >> \n    ```", "```py\n    In [15]: print(doc.xref_object(page.xref))\n    <<\n      /Type /Page\n      /Contents 1297 0 R\n      /Resources <<\n        /XObject <<\n          /Im1 1291 0 R\n        >>\n        /Font <<\n          /F39 1299 0 R\n          /F40 1300 0 R\n        >>\n      >>\n      /MediaBox [ 0 0 612 792 ]\n      /Parent 1301 0 R\n      /Rotate 90\n    >> \n    ```", "```py\n    In [16]: doc.xref_get_key(page.xref, \"Resources/XObject/Im1\")\n    Out[16]: ('xref', '1291 0 R') \n    ```", "```py\n    In [17]: doc.xref_set_key(page.xref, \"Resources/XObject/Im1\", \"9999 0 R\")\n    In [18]: print(doc.xref_object(page.xref))  # confirm success:\n    <<\n      /Type /Page\n      /Contents 1297 0 R\n      /Resources <<\n        /XObject <<\n          /Im1 9999 0 R\n        >>\n        /Font <<\n          /F39 1299 0 R\n          /F40 1300 0 R\n        >>\n      >>\n      /MediaBox [ 0 0 612 792 ]\n      /Parent 1301 0 R\n      /Rotate 90\n    >> \n    ```", "```py\n    In [5]: print(doc.xref_object(xref))  # some existing PDF object:\n    <<\n      /A <<\n      >>\n    >>\n    In [6]: # the following will create 'B', 'C' and 'D'\n    In [7]: doc.xref_set_key(xref, \"A/B/C/D\", \"[1 2 3 4]\")\n    In [8]: print(doc.xref_object(xref))  # check out what happened:\n    <<\n      /A <<\n        /B <<\n          /C <<\n            /D [ 1 2 3 4 ]\n          >>\n        >>\n      >>\n    >> \n    ```", "```py\n    In [9]: # 'D' is an array, no dictionary!\n    In [10]: doc.xref_set_key(xref, \"A/B/C/D/E\", \"(hello)\")\n    mupdf: not a dict (array)\n    --- ... ---\n    RuntimeError: not a dict (array) \n    ```", "```py\n    In [13]: # the following object points to an xref\n    In [14]: print(doc.xref_object(4))\n    <<\n      /E 3 0 R\n    >>\n    In [15]: # 'E' is an indirect object and cannot be modified here!\n    In [16]: doc.xref_set_key(4, \"E/F\", \"90\")\n    mupdf: path to 'F' has indirects\n    --- ... ---\n    RuntimeError: path to 'F' has indirects \n    ```"]