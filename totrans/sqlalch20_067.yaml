- en: Declarative Extensions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 声明式扩展
- en: 原文：[https://docs.sqlalchemy.org/en/20/orm/extensions/declarative/index.html](https://docs.sqlalchemy.org/en/20/orm/extensions/declarative/index.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/orm/extensions/declarative/index.html](https://docs.sqlalchemy.org/en/20/orm/extensions/declarative/index.html)
- en: Extensions specific to the [Declarative](../../mapping_styles.html#orm-declarative-mapping)
    mapping API.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[声明式](../../mapping_styles.html#orm-declarative-mapping)映射 API 特定的扩展。'
- en: 'Changed in version 1.4: The vast majority of the Declarative extension is now
    integrated into the SQLAlchemy ORM and is importable from the `sqlalchemy.orm`
    namespace. See the documentation at [Declarative Mapping](../../mapping_styles.html#orm-declarative-mapping)
    for new documentation. For an overview of the change, see [Declarative is now
    integrated into the ORM with new features](../../../changelog/migration_14.html#change-5508).'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4 版本更改：绝大部分声明式扩展现在已整合到 SQLAlchemy ORM 中，并可从 `sqlalchemy.orm` 命名空间导入。请参阅[声明式映射](../../mapping_styles.html#orm-declarative-mapping)的文档以获取新文档。有关更改的概述，请参阅[声明式现已与
    ORM 整合，并带有新功能](../../../changelog/migration_14.html#change-5508)。
- en: '| Object Name | Description |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [AbstractConcreteBase](#sqlalchemy.ext.declarative.AbstractConcreteBase)
    | A helper class for ‘concrete’ declarative mappings. |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| [AbstractConcreteBase](#sqlalchemy.ext.declarative.AbstractConcreteBase)
    | 一个用于“具体”声明式映射的辅助类。|'
- en: '| [ConcreteBase](#sqlalchemy.ext.declarative.ConcreteBase) | A helper class
    for ‘concrete’ declarative mappings. |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| [ConcreteBase](#sqlalchemy.ext.declarative.ConcreteBase) | 一个用于“具体”声明式映射的辅助类。
    |'
- en: '| [DeferredReflection](#sqlalchemy.ext.declarative.DeferredReflection) | A
    helper class for construction of mappings based on a deferred reflection step.
    |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| [DeferredReflection](#sqlalchemy.ext.declarative.DeferredReflection) | 一个用于基于延迟反射步骤构建映射的辅助类。
    |'
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: A helper class for ‘concrete’ declarative mappings.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 一个用于“具体”声明式映射的辅助类。
- en: '[`AbstractConcreteBase`](#sqlalchemy.ext.declarative.AbstractConcreteBase "sqlalchemy.ext.declarative.AbstractConcreteBase")
    will use the [`polymorphic_union()`](../../mapping_api.html#sqlalchemy.orm.polymorphic_union
    "sqlalchemy.orm.polymorphic_union") function automatically, against all tables
    mapped as a subclass to this class. The function is called via the `__declare_first__()`
    function, which is essentially a hook for the [`before_configured()`](../../events.html#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured") event.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AbstractConcreteBase`](#sqlalchemy.ext.declarative.AbstractConcreteBase "sqlalchemy.ext.declarative.AbstractConcreteBase")
    将自动使用 [`polymorphic_union()`](../../mapping_api.html#sqlalchemy.orm.polymorphic_union
    "sqlalchemy.orm.polymorphic_union") 函数，对所有作为此类的子类映射的表执行。该函数通过 `__declare_first__()`
    函数调用，这实际上是一个 [`before_configured()`](../../events.html#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured") 事件的钩子。'
- en: '[`AbstractConcreteBase`](#sqlalchemy.ext.declarative.AbstractConcreteBase "sqlalchemy.ext.declarative.AbstractConcreteBase")
    applies [`Mapper`](../../mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    for its immediately inheriting class, as would occur for any other declarative
    mapped class. However, the [`Mapper`](../../mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") is not mapped to any particular [`Table`](../../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object. Instead, it’s mapped directly to the “polymorphic”
    selectable produced by [`polymorphic_union()`](../../mapping_api.html#sqlalchemy.orm.polymorphic_union
    "sqlalchemy.orm.polymorphic_union"), and performs no persistence operations on
    its own. Compare to [`ConcreteBase`](#sqlalchemy.ext.declarative.ConcreteBase
    "sqlalchemy.ext.declarative.ConcreteBase"), which maps its immediately inheriting
    class to an actual [`Table`](../../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") that stores rows directly.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AbstractConcreteBase`](#sqlalchemy.ext.declarative.AbstractConcreteBase "sqlalchemy.ext.declarative.AbstractConcreteBase")
    应用 [`Mapper`](../../mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    到其直接继承的类，就像对任何其他声明式映射的类一样。然而，[`Mapper`](../../mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") 没有映射到任何特定的 [`Table`](../../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 对象。相反，它直接映射到由 [`polymorphic_union()`](../../mapping_api.html#sqlalchemy.orm.polymorphic_union
    "sqlalchemy.orm.polymorphic_union") 产生的“多态”可选择的对象，并且不执行自己的持久化操作。与 [`ConcreteBase`](#sqlalchemy.ext.declarative.ConcreteBase
    "sqlalchemy.ext.declarative.ConcreteBase") 相比，后者将其直接继承的类映射到直接存储行的实际 [`Table`](../../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")。'
- en: Note
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The [`AbstractConcreteBase`](#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase") delays the mapper creation
    of the base class until all the subclasses have been defined, as it needs to create
    a mapping against a selectable that will include all subclass tables. In order
    to achieve this, it waits for the **mapper configuration event** to occur, at
    which point it scans through all the configured subclasses and sets up a mapping
    that will query against all subclasses at once.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AbstractConcreteBase`](#sqlalchemy.ext.declarative.AbstractConcreteBase "sqlalchemy.ext.declarative.AbstractConcreteBase")延迟了基类的映射器创建，直到所有子类都已定义，因为它需要创建一个针对包含所有子类表的可选择项的映射。为了实现这一点，它等待**映射器配置事件**发生，然后扫描所有配置的子类，并设置一个将一次性查询所有子类的映射。'
- en: 'While this event is normally invoked automatically, in the case of [`AbstractConcreteBase`](#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase"), it may be necessary to invoke
    it explicitly after **all** subclass mappings are defined, if the first operation
    is to be a query against this base class. To do so, once all the desired classes
    have been configured, the [`registry.configure()`](../../mapping_api.html#sqlalchemy.orm.registry.configure
    "sqlalchemy.orm.registry.configure") method on the [`registry`](../../mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") in use can be invoked, which is available in relation
    to a particular declarative base class:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然此事件通常会自动调用，但在[`AbstractConcreteBase`](#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase")的情况下，如果第一个操作是针对此基类的查询，则可能需要在定义所有子类映射之后显式调用它。为此，一旦所有期望的类都已配置，可以调用正在使用的[`registry`](../../mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry")上的[`registry.configure()`](../../mapping_api.html#sqlalchemy.orm.registry.configure
    "sqlalchemy.orm.registry.configure")方法，该方法可在特定声明基类的关系中使用：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Example:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The abstract base class is handled by declarative in a special way; at class
    configuration time, it behaves like a declarative mixin or an `__abstract__` base
    class. Once classes are configured and mappings are produced, it then gets mapped
    itself, but after all of its descendants. This is a very unique system of mapping
    not found in any other SQLAlchemy API feature.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 抽象基类在声明时以一种特殊的方式处理；在类配置时，它的行为类似于声明式的混入或`__abstract__`基类。一旦类被配置并生成映射，它会被映射自身，但在其所有子类之后。这是在任何其他SQLAlchemy
    API功能中都找不到的非常独特的映射系统。
- en: 'Using this approach, we can specify columns and properties that will take place
    on mapped subclasses, in the way that we normally do as in [Mixin and Custom Base
    Classes](mixins.html#declarative-mixins):'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种方法，我们可以指定将在映射的子类上发生的列和属性，就像我们通常在[Mixin和自定义基类](mixins.html#declarative-mixins)中所做的那样：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'When we make use of our mappings however, both `Manager` and `Employee` will
    have an independently usable `.company` attribute:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当我们使用我们的映射时，`Manager`和`Employee`都将拥有一个可独立使用的`.company`属性：
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Parameters:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**strict_attrs** –'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**strict_attrs** –'
- en: when specified on the base class, “strict” attribute mode is enabled which attempts
    to limit ORM mapped attributes on the base class to only those that are immediately
    present, while still preserving “polymorphic” loading behavior.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当在基类上指定时，“严格”属性模式被启用，试图将基类上的ORM映射属性限制为仅当下立即存在的属性，同时仍保留“多态”加载行为。
- en: New in version 2.0.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0版中新增。
- en: See also
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ConcreteBase`](#sqlalchemy.ext.declarative.ConcreteBase "sqlalchemy.ext.declarative.ConcreteBase")'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ConcreteBase`](#sqlalchemy.ext.declarative.ConcreteBase "sqlalchemy.ext.declarative.ConcreteBase")'
- en: '[Concrete Table Inheritance](../../inheritance.html#concrete-inheritance)'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[具体表继承](../../inheritance.html#concrete-inheritance)'
- en: '[Abstract Concrete Classes](../../inheritance.html#abstract-concrete-base)'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '[抽象具体类](../../inheritance.html#abstract-concrete-base)'
- en: '**Class signature**'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.ext.declarative.AbstractConcreteBase`](#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase") ([`sqlalchemy.ext.declarative.extensions.ConcreteBase`](#sqlalchemy.ext.declarative.ConcreteBase
    "sqlalchemy.ext.declarative.extensions.ConcreteBase"))
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.ext.declarative.AbstractConcreteBase`](#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase") ([`sqlalchemy.ext.declarative.extensions.ConcreteBase`](#sqlalchemy.ext.declarative.ConcreteBase
    "sqlalchemy.ext.declarative.extensions.ConcreteBase"))
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: A helper class for ‘concrete’ declarative mappings.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 用于‘具体’声明映射的辅助类。
- en: '[`ConcreteBase`](#sqlalchemy.ext.declarative.ConcreteBase "sqlalchemy.ext.declarative.ConcreteBase")
    will use the [`polymorphic_union()`](../../mapping_api.html#sqlalchemy.orm.polymorphic_union
    "sqlalchemy.orm.polymorphic_union") function automatically, against all tables
    mapped as a subclass to this class. The function is called via the `__declare_last__()`
    function, which is essentially a hook for the [`after_configured()`](../../events.html#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured") event.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ConcreteBase`](#sqlalchemy.ext.declarative.ConcreteBase "sqlalchemy.ext.declarative.ConcreteBase")
    会自动使用 [`polymorphic_union()`](../../mapping_api.html#sqlalchemy.orm.polymorphic_union
    "sqlalchemy.orm.polymorphic_union") 函数，针对所有映射为该类的子类的表。该函数通过 `__declare_last__()`
    函数调用，这实质上是 [`after_configured()`](../../events.html#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured") 事件的钩子。'
- en: '[`ConcreteBase`](#sqlalchemy.ext.declarative.ConcreteBase "sqlalchemy.ext.declarative.ConcreteBase")
    produces a mapped table for the class itself. Compare to [`AbstractConcreteBase`](#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase"), which does not.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ConcreteBase`](#sqlalchemy.ext.declarative.ConcreteBase "sqlalchemy.ext.declarative.ConcreteBase")
    为类本身生成一个映射表。与 [`AbstractConcreteBase`](#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase") 相比，后者不会。'
- en: 'Example:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The name of the discriminator column used by [`polymorphic_union()`](../../mapping_api.html#sqlalchemy.orm.polymorphic_union
    "sqlalchemy.orm.polymorphic_union") defaults to the name `type`. To suit the use
    case of a mapping where an actual column in a mapped table is already named `type`,
    the discriminator name can be configured by setting the `_concrete_discriminator_name`
    attribute:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '[`polymorphic_union()`](../../mapping_api.html#sqlalchemy.orm.polymorphic_union
    "sqlalchemy.orm.polymorphic_union") 使用的鉴别器列的默认名称为 `type`。为了适应映射的用例，其中映射表中的实际列已命名为
    `type`，可以通过设置 `_concrete_discriminator_name` 属性来配置鉴别器名称：'
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'New in version 1.3.19: Added the `_concrete_discriminator_name` attribute to
    [`ConcreteBase`](#sqlalchemy.ext.declarative.ConcreteBase "sqlalchemy.ext.declarative.ConcreteBase")
    so that the virtual discriminator column name can be customized.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.3.19 中新增：为 [`ConcreteBase`](#sqlalchemy.ext.declarative.ConcreteBase "sqlalchemy.ext.declarative.ConcreteBase")
    添加了 `_concrete_discriminator_name` 属性，以便自定义虚拟鉴别器列名称。
- en: 'Changed in version 1.4.2: The `_concrete_discriminator_name` attribute need
    only be placed on the basemost class to take correct effect for all subclasses.
    An explicit error message is now raised if the mapped column names conflict with
    the discriminator name, whereas in the 1.3.x series there would be some warnings
    and then a non-useful query would be generated.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.4.2 中更改：只需将 `_concrete_discriminator_name` 属性放置在最基类上即可使所有子类正确生效。如果映射列名称与鉴别器名称冲突，则现在会显示显式错误消息，而在
    1.3.x 系列中会有一些警告，然后生成一个无用的查询。
- en: See also
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`AbstractConcreteBase`](#sqlalchemy.ext.declarative.AbstractConcreteBase "sqlalchemy.ext.declarative.AbstractConcreteBase")'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AbstractConcreteBase`](#sqlalchemy.ext.declarative.AbstractConcreteBase "sqlalchemy.ext.declarative.AbstractConcreteBase")'
- en: '[Concrete Table Inheritance](../../inheritance.html#concrete-inheritance)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[具体表继承](../../inheritance.html#concrete-inheritance)'
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: A helper class for construction of mappings based on a deferred reflection step.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 一个用于基于延迟反射步骤构建映射的辅助类。
- en: Normally, declarative can be used with reflection by setting a [`Table`](../../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object using autoload_with=engine as the `__table__`
    attribute on a declarative class. The caveat is that the [`Table`](../../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") must be fully reflected, or at the very least have
    a primary key column, at the point at which a normal declarative mapping is constructed,
    meaning the [`Engine`](../../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") must be available at class declaration time.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，通过将一个 [`Table`](../../../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    对象设置为具有 autoload_with=engine 的 `__table__` 属性，可以使用反射来使用声明。一个声明性类。需要注意的是，在构建普通声明性映射的时候，[`Table`](../../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 必须是完全反映的，或者至少有一个主键列，这意味着在类声明时必须可用 [`Engine`](../../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")。
- en: 'The [`DeferredReflection`](#sqlalchemy.ext.declarative.DeferredReflection "sqlalchemy.ext.declarative.DeferredReflection")
    mixin moves the construction of mappers to be at a later point, after a specific
    method is called which first reflects all [`Table`](../../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects created so far. Classes can define it as such:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DeferredReflection`](#sqlalchemy.ext.declarative.DeferredReflection "sqlalchemy.ext.declarative.DeferredReflection")
    mixin 将映射器的构建移动到稍后的时间点，在调用首先反射到目前为止创建的所有 [`Table`](../../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 对象的特定方法之后。类可以定义如下：'
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Above, `MyClass` is not yet mapped. After a series of classes have been defined
    in the above fashion, all tables can be reflected and mappings created using [`prepare()`](#sqlalchemy.ext.declarative.DeferredReflection.prepare
    "sqlalchemy.ext.declarative.DeferredReflection.prepare"):'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面，`MyClass` 还没有映射。在上述方式定义了一系列类之后，可以使用 [`prepare()`](#sqlalchemy.ext.declarative.DeferredReflection.prepare
    "sqlalchemy.ext.declarative.DeferredReflection.prepare") 反射所有表并创建映射：
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The [`DeferredReflection`](#sqlalchemy.ext.declarative.DeferredReflection "sqlalchemy.ext.declarative.DeferredReflection")
    mixin can be applied to individual classes, used as the base for the declarative
    base itself, or used in a custom abstract class. Using an abstract base allows
    that only a subset of classes to be prepared for a particular prepare step, which
    is necessary for applications that use more than one engine. For example, if an
    application has two engines, you might use two bases, and prepare each separately,
    e.g.:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DeferredReflection`](#sqlalchemy.ext.declarative.DeferredReflection "sqlalchemy.ext.declarative.DeferredReflection")
    mixin 可以应用于单个类，用作声明基类本身，或用于自定义抽象类。使用抽象基类允许仅为特定准备步骤准备一部分类，这对于使用多个引擎的应用程序是必要的。例如，如果一个应用程序有两个引擎，您可能会使用两个基类，并分别准备每个基类，例如：'
- en: '[PRE11]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Above, the class hierarchies for `ReflectedOne` and `ReflectedTwo` can be configured
    separately:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面，`ReflectedOne` 和 `ReflectedTwo` 的类层次结构可以分别配置：
- en: '[PRE12]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '**Members**'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[prepare()](#sqlalchemy.ext.declarative.DeferredReflection.prepare)'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '[prepare()](#sqlalchemy.ext.declarative.DeferredReflection.prepare)'
- en: See also
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using DeferredReflection](../../declarative_tables.html#orm-declarative-reflected-deferred-reflection)
    - in the [Table Configuration with Declarative](../../declarative_tables.html)
    section.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 DeferredReflection](../../declarative_tables.html#orm-declarative-reflected-deferred-reflection)
    - 在 [使用声明式配置表](../../declarative_tables.html) 部分。'
- en: '[PRE13]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Reflect all [`Table`](../../../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects for all current [`DeferredReflection`](#sqlalchemy.ext.declarative.DeferredReflection
    "sqlalchemy.ext.declarative.DeferredReflection") subclasses
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 反射所有当前 [`DeferredReflection`](#sqlalchemy.ext.declarative.DeferredReflection
    "sqlalchemy.ext.declarative.DeferredReflection") 子类的所有 [`Table`](../../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 对象
- en: 'Parameters:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`bind` –'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bind` –'
- en: '[`Engine`](../../../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    or [`Connection`](../../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") instance'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Engine`](../../../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    或 [`Connection`](../../../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    实例'
- en: '..versionchanged:: 2.0.16 a [`Connection`](../../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") is also accepted.'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '..versionchanged:: 2.0.16 现在也接受 [`Connection`](../../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")。'
- en: '`**reflect_kw` –'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**reflect_kw` –'
- en: additional keyword arguments passed to [`MetaData.reflect()`](../../../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect"), such as [`MetaData.reflect.views`](../../../core/metadata.html#sqlalchemy.schema.MetaData.reflect.params.views
    "sqlalchemy.schema.MetaData.reflect").
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 传递给 [`MetaData.reflect()`](../../../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") 的其他关键字参数，例如 [`MetaData.reflect.views`](../../../core/metadata.html#sqlalchemy.schema.MetaData.reflect.params.views
    "sqlalchemy.schema.MetaData.reflect")。
- en: New in version 2.0.16.
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版本 2.0.16 中的内容。
