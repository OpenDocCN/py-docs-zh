- en: Describing Databases with MetaData
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sqlalchemy.org/en/20/core/metadata.html](https://docs.sqlalchemy.org/en/20/core/metadata.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This section discusses the fundamental [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table"),
    [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column") and [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") objects.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Working with Database Metadata](../tutorial/metadata.html#tutorial-working-with-metadata)
    - tutorial introduction to SQLAlchemy’s database metadata concept in the [SQLAlchemy
    Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: 'A collection of metadata entities is stored in an object aptly named [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData") is a
    container object that keeps together many different features of a database (or
    multiple databases) being described.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To represent a table, use the [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    class. Its two primary arguments are the table name, then the [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object which it will be associated with. The remaining
    positional arguments are mostly [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    objects describing each column:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Above, a table called `user` is described, which contains four columns. The
    primary key of the table consists of the `user_id` column. Multiple columns may
    be assigned the `primary_key=True` flag which denotes a multi-column primary key,
    known as a *composite* primary key.
  prefs: []
  type: TYPE_NORMAL
- en: Note also that each column describes its datatype using objects corresponding
    to genericized types, such as [`Integer`](type_basics.html#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer") and [`String`](type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String"). SQLAlchemy features dozens of types of varying levels
    of specificity as well as the ability to create custom types. Documentation on
    the type system can be found at [SQL Datatype Objects](types.html).
  prefs: []
  type: TYPE_NORMAL
- en: '## Accessing Tables and Columns'
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    object contains all of the schema constructs we’ve associated with it. It supports
    a few methods of accessing these table objects, such as the `sorted_tables` accessor
    which returns a list of each [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object in order of foreign key dependency (that is, each table is preceded by
    all tables which it references):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In most cases, individual [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects have been explicitly declared, and these objects are typically accessed
    directly as module-level variables in an application. Once a [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") has been defined, it has a full set of accessors which
    allow inspection of its properties. Given the following [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Note the [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    object used in this table - this construct defines a reference to a remote table,
    and is fully described in [Defining Foreign Keys](constraints.html#metadata-foreignkeys).
    Methods of accessing information about this table include:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: The [`FromClause.c`](selectable.html#sqlalchemy.sql.expression.FromClause.c
    "sqlalchemy.sql.expression.FromClause.c") collection, synonymous with the [`FromClause.columns`](selectable.html#sqlalchemy.sql.expression.FromClause.columns
    "sqlalchemy.sql.expression.FromClause.columns") collection, is an instance of
    [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection"), which provides a **dictionary-like
    interface** to the collection of columns. Names are ordinarily accessed like attribute
    names, e.g. `employees.c.employee_name`. However for special names with spaces
    or those that match the names of dictionary methods such as [`ColumnCollection.keys()`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection.keys
    "sqlalchemy.sql.expression.ColumnCollection.keys") or [`ColumnCollection.values()`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection.values
    "sqlalchemy.sql.expression.ColumnCollection.values"), indexed access must be used,
    such as `employees.c['values']` or `employees.c["some column"]`. See [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") for further information.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and Dropping Database Tables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once you’ve defined some [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects, assuming you’re working with a brand new database one thing you might
    want to do is issue CREATE statements for those tables and their related constructs
    (as an aside, it’s also quite possible that you *don’t* want to do this, if you
    already have some preferred methodology such as tools included with your database
    or an existing scripting system - if that’s the case, feel free to skip this section
    - SQLAlchemy has no requirement that it be used to create your tables).
  prefs: []
  type: TYPE_NORMAL
- en: 'The usual way to issue CREATE is to use [`create_all()`](#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") on the [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object. This method will issue queries that first
    check for the existence of each individual table, and if not found will issue
    the CREATE statements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[`create_all()`](#sqlalchemy.schema.MetaData.create_all "sqlalchemy.schema.MetaData.create_all")
    creates foreign key constraints between tables usually inline with the table definition
    itself, and for this reason it also generates the tables in order of their dependency.
    There are options to change this behavior such that `ALTER TABLE` is used instead.'
  prefs: []
  type: TYPE_NORMAL
- en: Dropping all tables is similarly achieved using the [`drop_all()`](#sqlalchemy.schema.MetaData.drop_all
    "sqlalchemy.schema.MetaData.drop_all") method. This method does the exact opposite
    of [`create_all()`](#sqlalchemy.schema.MetaData.create_all "sqlalchemy.schema.MetaData.create_all")
    - the presence of each table is checked first, and tables are dropped in reverse
    order of dependency.
  prefs: []
  type: TYPE_NORMAL
- en: 'Creating and dropping individual tables can be done via the `create()` and
    `drop()` methods of [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table").
    These methods by default issue the CREATE or DROP regardless of the table being
    present:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '`drop()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'To enable the “check first for the table existing” logic, add the `checkfirst=True`
    argument to `create()` or `drop()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '## Altering Database Objects through Migrations'
  prefs: []
  type: TYPE_NORMAL
- en: While SQLAlchemy directly supports emitting CREATE and DROP statements for schema
    constructs, the ability to alter those constructs, usually via the ALTER statement
    as well as other database-specific constructs, is outside of the scope of SQLAlchemy
    itself. While it’s easy enough to emit ALTER statements and similar by hand, such
    as by passing a [`text()`](sqlelement.html#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")
    construct to [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") or by using the [`DDL`](ddl.html#sqlalchemy.schema.DDL
    "sqlalchemy.schema.DDL") construct, it’s a common practice to automate the maintenance
    of database schemas in relation to application code using schema migration tools.
  prefs: []
  type: TYPE_NORMAL
- en: The SQLAlchemy project offers the [Alembic](https://alembic.sqlalchemy.org)
    migration tool for this purpose. Alembic features a highly customizable environment
    and a minimalistic usage pattern, supporting such features as transactional DDL,
    automatic generation of “candidate” migrations, an “offline” mode which generates
    SQL scripts, and support for branch resolution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alembic supersedes the [SQLAlchemy-Migrate](https://github.com/openstack/sqlalchemy-migrate)
    project, which is the original migration tool for SQLAlchemy and is now considered
    legacy.  ## Specifying the Schema Name'
  prefs: []
  type: TYPE_NORMAL
- en: Most databases support the concept of multiple “schemas” - namespaces that refer
    to alternate sets of tables and other constructs. The server-side geometry of
    a “schema” takes many forms, including names of “schemas” under the scope of a
    particular database (e.g. PostgreSQL schemas), named sibling databases (e.g. MySQL
    / MariaDB access to other databases on the same server), as well as other concepts
    like tables owned by other usernames (Oracle, SQL Server) or even names that refer
    to alternate database files (SQLite ATTACH) or remote servers (Oracle DBLINK with
    synonyms).
  prefs: []
  type: TYPE_NORMAL
- en: What all of the above approaches have (mostly) in common is that there’s a way
    of referencing this alternate set of tables using a string name. SQLAlchemy refers
    to this name as the **schema name**. Within SQLAlchemy, this is nothing more than
    a string name which is associated with a [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object, and is then rendered into SQL statements in a manner appropriate to the
    target database such that the table is referenced in its remote “schema”, whatever
    mechanism that is on the target database.
  prefs: []
  type: TYPE_NORMAL
- en: The “schema” name may be associated directly with a [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") using the [`Table.schema`](#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table") argument; when using the ORM with [declarative table](../orm/declarative_tables.html)
    configuration, the parameter is passed using the `__table_args__` parameter dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: The “schema” name may also be associated with the [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object where it will take effect automatically for
    all [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") objects associated
    with that [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    that don’t otherwise specify their own name. Finally, SQLAlchemy also supports
    a “dynamic” schema name system that is often used for multi-tenant applications
    such that a single set of [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    metadata may refer to a dynamically configured set of schema names on a per-connection
    or per-statement basis.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Explicit Schema Name with Declarative Table](../orm/declarative_tables.html#orm-declarative-table-schema-name)
    - schema name specification when using the ORM [declarative table](../orm/declarative_tables.html)
    configuration'
  prefs: []
  type: TYPE_NORMAL
- en: 'The most basic example is that of the [`Table.schema`](#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table") argument using a Core [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'SQL that is rendered using this [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table"),
    such as the SELECT statement below, will explicitly qualify the table name `financial_info`
    with the `remote_banks` schema name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'When a [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") object
    is declared with an explicit schema name, it is stored in the internal [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") namespace using the combination of the schema and
    table name. We can view this in the [`MetaData.tables`](#sqlalchemy.schema.MetaData.tables
    "sqlalchemy.schema.MetaData.tables") collection by searching for the key `''remote_banks.financial_info''`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This dotted name is also what must be used when referring to the table for
    use with the [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    or [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") objects, even if the referring table
    is also in that same schema:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The [`Table.schema`](#sqlalchemy.schema.Table.params.schema "sqlalchemy.schema.Table")
    argument may also be used with certain dialects to indicate a multiple-token (e.g.
    dotted) path to a particular table. This is particularly important on a database
    such as Microsoft SQL Server where there are often dotted “database/owner” tokens.
    The tokens may be placed directly in the name at once, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Multipart Schema Names](../dialects/mssql.html#multipart-schema-names) - describes
    use of dotted schema names with the SQL Server dialect.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Reflecting Tables from Other Schemas](reflection.html#metadata-reflection-schemas)'
  prefs: []
  type: TYPE_NORMAL
- en: '### Specifying a Default Schema Name with MetaData'
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    object may also set up an explicit default option for all [`Table.schema`](#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table") parameters by passing the [`MetaData.schema`](#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData") argument to the top level [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") construct:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Above, for any [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object (or [`Sequence`](defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    object directly associated with the [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData"))
    which leaves the [`Table.schema`](#sqlalchemy.schema.Table.params.schema "sqlalchemy.schema.Table")
    parameter at its default of `None` will instead act as though the parameter were
    set to the value `"remote_banks"`. This includes that the [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") is cataloged in the [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") using the schema-qualified name, that is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'When using the [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") or [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") objects to refer to this table, either
    the schema-qualified name or the non-schema-qualified name may be used to refer
    to the `remote_banks.financial_info` table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'When using a [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    object that sets [`MetaData.schema`](#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData"), a [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    that wishes to specify that it should not be schema qualified may use the special
    symbol `BLANK_SCHEMA`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`MetaData.schema`](#sqlalchemy.schema.MetaData.params.schema "sqlalchemy.schema.MetaData")  ###
    Applying Dynamic Schema Naming Conventions'
  prefs: []
  type: TYPE_NORMAL
- en: The names used by the [`Table.schema`](#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table") parameter may also be applied against a lookup that
    is dynamic on a per-connection or per-execution basis, so that for example in
    multi-tenant situations, each transaction or statement may be targeted at a specific
    set of schema names that change. The section [Translation of Schema Names](connections.html#schema-translating)
    describes how this feature is used.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Translation of Schema Names](connections.html#schema-translating)  ### Setting
    a Default Schema for New Connections'
  prefs: []
  type: TYPE_NORMAL
- en: The above approaches all refer to methods of including an explicit schema-name
    within SQL statements. Database connections in fact feature the concept of a “default”
    schema, which is the name of the “schema” (or database, owner, etc.) that takes
    place if a table name is not explicitly schema-qualified. These names are usually
    configured at the login level, such as when connecting to a PostgreSQL database,
    the default “schema” is called “public”.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are often cases where the default “schema” cannot be set via the login
    itself and instead would usefully be configured each time a connection is made,
    using a statement such as “SET SEARCH_PATH” on PostgreSQL or “ALTER SESSION” on
    Oracle. These approaches may be achieved by using the `PoolEvents.connect()` event,
    which allows access to the DBAPI connection when it is first created. For example,
    to set the Oracle CURRENT_SCHEMA variable to an alternate name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Above, the `set_current_schema()` event handler will take place immediately
    when the above [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    first connects; as the event is “inserted” into the beginning of the handler list,
    it will also take place before the dialect’s own event handlers are run, in particular
    including the one that will determine the “default schema” for the connection.
  prefs: []
  type: TYPE_NORMAL
- en: For other databases, consult the database and/or dialect documentation for specific
    information regarding how default schemas are configured.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4.0b2: The above recipe now works without the need to
    establish additional event handlers.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Setting Alternate Search Paths on Connect](../dialects/postgresql.html#postgresql-alternate-search-path)
    - in the [PostgreSQL](../dialects/postgresql.html) dialect documentation.'
  prefs: []
  type: TYPE_NORMAL
- en: Schemas and Reflection
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The schema feature of SQLAlchemy interacts with the table reflection feature
    introduced at [Reflecting Database Objects](reflection.html). See the section
    [Reflecting Tables from Other Schemas](reflection.html#metadata-reflection-schemas)
    for additional details on how this works.
  prefs: []
  type: TYPE_NORMAL
- en: Backend-Specific Options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") supports database-specific
    options. For example, MySQL has different table backend types, including “MyISAM”
    and “InnoDB”. This can be expressed with [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    using `mysql_engine`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Other backends may support table-level options as well - these would be described
    in the individual documentation sections for each dialect.
  prefs: []
  type: TYPE_NORMAL
- en: Column, Table, MetaData API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [Column](#sqlalchemy.schema.Column) | Represents a column in a database table.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [insert_sentinel](#sqlalchemy.schema.insert_sentinel)([name, type_], *, [default,
    omit_from_statements]) | Provides a surrogate [`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") that will act as a dedicated insert [sentinel](../glossary.html#term-sentinel)
    column, allowing efficient bulk inserts with deterministic RETURNING sorting for
    tables that don’t otherwise have qualifying primary key configurations. |'
  prefs: []
  type: TYPE_TB
- en: '| [MetaData](#sqlalchemy.schema.MetaData) | A collection of [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects and their associated schema constructs. |'
  prefs: []
  type: TYPE_TB
- en: '| [SchemaConst](#sqlalchemy.schema.SchemaConst) | An enumeration. |'
  prefs: []
  type: TYPE_TB
- en: '| [SchemaItem](#sqlalchemy.schema.SchemaItem) | Base class for items that define
    a database schema. |'
  prefs: []
  type: TYPE_TB
- en: '| [Table](#sqlalchemy.schema.Table) | Represent a table in a database. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Refers to [`SchemaConst.BLANK_SCHEMA`](#sqlalchemy.schema.SchemaConst.BLANK_SCHEMA
    "sqlalchemy.schema.SchemaConst.BLANK_SCHEMA").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Refers to [`SchemaConst.RETAIN_SCHEMA`](#sqlalchemy.schema.SchemaConst.RETAIN_SCHEMA
    "sqlalchemy.schema.SchemaConst.RETAIN_SCHEMA")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Represents a column in a database table.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[__eq__()](#sqlalchemy.schema.Column.__eq__), [__init__()](#sqlalchemy.schema.Column.__init__),
    [__le__()](#sqlalchemy.schema.Column.__le__), [__lt__()](#sqlalchemy.schema.Column.__lt__),
    [__ne__()](#sqlalchemy.schema.Column.__ne__), [all_()](#sqlalchemy.schema.Column.all_),
    [anon_key_label](#sqlalchemy.schema.Column.anon_key_label), [anon_label](#sqlalchemy.schema.Column.anon_label),
    [any_()](#sqlalchemy.schema.Column.any_), [argument_for()](#sqlalchemy.schema.Column.argument_for),
    [asc()](#sqlalchemy.schema.Column.asc), [between()](#sqlalchemy.schema.Column.between),
    [bitwise_and()](#sqlalchemy.schema.Column.bitwise_and), [bitwise_lshift()](#sqlalchemy.schema.Column.bitwise_lshift),
    [bitwise_not()](#sqlalchemy.schema.Column.bitwise_not), [bitwise_or()](#sqlalchemy.schema.Column.bitwise_or),
    [bitwise_rshift()](#sqlalchemy.schema.Column.bitwise_rshift), [bitwise_xor()](#sqlalchemy.schema.Column.bitwise_xor),
    [bool_op()](#sqlalchemy.schema.Column.bool_op), [cast()](#sqlalchemy.schema.Column.cast),
    [collate()](#sqlalchemy.schema.Column.collate), [compare()](#sqlalchemy.schema.Column.compare),
    [compile()](#sqlalchemy.schema.Column.compile), [concat()](#sqlalchemy.schema.Column.concat),
    [contains()](#sqlalchemy.schema.Column.contains), [copy()](#sqlalchemy.schema.Column.copy),
    [desc()](#sqlalchemy.schema.Column.desc), [dialect_kwargs](#sqlalchemy.schema.Column.dialect_kwargs),
    [dialect_options](#sqlalchemy.schema.Column.dialect_options), [distinct()](#sqlalchemy.schema.Column.distinct),
    [endswith()](#sqlalchemy.schema.Column.endswith), [expression](#sqlalchemy.schema.Column.expression),
    [foreign_keys](#sqlalchemy.schema.Column.foreign_keys), [get_children()](#sqlalchemy.schema.Column.get_children),
    [icontains()](#sqlalchemy.schema.Column.icontains), [iendswith()](#sqlalchemy.schema.Column.iendswith),
    [ilike()](#sqlalchemy.schema.Column.ilike), [in_()](#sqlalchemy.schema.Column.in_),
    [index](#sqlalchemy.schema.Column.index), [info](#sqlalchemy.schema.Column.info),
    [inherit_cache](#sqlalchemy.schema.Column.inherit_cache), [is_()](#sqlalchemy.schema.Column.is_),
    [is_distinct_from()](#sqlalchemy.schema.Column.is_distinct_from), [is_not()](#sqlalchemy.schema.Column.is_not),
    [is_not_distinct_from()](#sqlalchemy.schema.Column.is_not_distinct_from), [isnot()](#sqlalchemy.schema.Column.isnot),
    [isnot_distinct_from()](#sqlalchemy.schema.Column.isnot_distinct_from), [istartswith()](#sqlalchemy.schema.Column.istartswith),
    [key](#sqlalchemy.schema.Column.key), [kwargs](#sqlalchemy.schema.Column.kwargs),
    [label()](#sqlalchemy.schema.Column.label), [like()](#sqlalchemy.schema.Column.like),
    [match()](#sqlalchemy.schema.Column.match), [not_ilike()](#sqlalchemy.schema.Column.not_ilike),
    [not_in()](#sqlalchemy.schema.Column.not_in), [not_like()](#sqlalchemy.schema.Column.not_like),
    [notilike()](#sqlalchemy.schema.Column.notilike), [notin_()](#sqlalchemy.schema.Column.notin_),
    [notlike()](#sqlalchemy.schema.Column.notlike), [nulls_first()](#sqlalchemy.schema.Column.nulls_first),
    [nulls_last()](#sqlalchemy.schema.Column.nulls_last), [nullsfirst()](#sqlalchemy.schema.Column.nullsfirst),
    [nullslast()](#sqlalchemy.schema.Column.nullslast), [op()](#sqlalchemy.schema.Column.op),
    [operate()](#sqlalchemy.schema.Column.operate), [params()](#sqlalchemy.schema.Column.params),
    [proxy_set](#sqlalchemy.schema.Column.proxy_set), [references()](#sqlalchemy.schema.Column.references),
    [regexp_match()](#sqlalchemy.schema.Column.regexp_match), [regexp_replace()](#sqlalchemy.schema.Column.regexp_replace),
    [reverse_operate()](#sqlalchemy.schema.Column.reverse_operate), [self_group()](#sqlalchemy.schema.Column.self_group),
    [shares_lineage()](#sqlalchemy.schema.Column.shares_lineage), [startswith()](#sqlalchemy.schema.Column.startswith),
    [timetuple](#sqlalchemy.schema.Column.timetuple), [unique](#sqlalchemy.schema.Column.unique),
    [unique_params()](#sqlalchemy.schema.Column.unique_params)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.schema.Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    ([`sqlalchemy.sql.base.DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs"), [`sqlalchemy.schema.SchemaItem`](#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem"), [`sqlalchemy.sql.expression.ColumnClause`](sqlelement.html#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__eq__` *method
    of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `==` operator.
  prefs: []
  type: TYPE_NORMAL
- en: In a column context, produces the clause `a = b`. If the target is `None`, produces
    `a IS NULL`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Construct a new `Column` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The name of this column as represented in the database. This argument may be
    the first positional argument, or specified via keyword.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Names which contain no upper case characters will be treated as case insensitive
    names, and will not be quoted unless they are a reserved word. Names with any
    number of upper case characters will be quoted and sent exactly. Note that this
    behavior applies even for databases which standardize upper case names as case
    insensitive such as Oracle.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The name field may be omitted at construction time and applied later, at any
    time before the Column is associated with a [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"). This is to support convenient usage within the [`declarative`](../orm/extensions/declarative/api.html#module-sqlalchemy.ext.declarative
    "sqlalchemy.ext.declarative") extension.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`type_` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The column’s type, indicated using an instance which subclasses [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"). If no arguments are required for the type, the
    class of the type can be sent as well, e.g.:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `type` argument may be the second positional argument or specified by keyword.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If the `type` is `None` or is omitted, it will first default to the special
    type [`NullType`](type_api.html#sqlalchemy.types.NullType "sqlalchemy.types.NullType").
    If and when this [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    is made to refer to another column using [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") and/or [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint"), the type of the remote-referenced column
    will be copied to this column as well, at the moment that the foreign key is resolved
    against that remote [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    object.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`*args` – Additional positional arguments include various [`SchemaItem`](#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem") derived constructs which will be applied as options
    to the column. These include instances of [`Constraint`](constraints.html#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint"), [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey"), [`ColumnDefault`](defaults.html#sqlalchemy.schema.ColumnDefault
    "sqlalchemy.schema.ColumnDefault"), [`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence"), [`Computed`](defaults.html#sqlalchemy.schema.Computed
    "sqlalchemy.schema.Computed") [`Identity`](defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity"). In some cases an equivalent keyword argument is
    available such as `server_default`, `default` and `unique`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autoincrement` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set up “auto increment” semantics for an **integer primary key column with no
    foreign key dependencies** (see later in this docstring for a more specific definition).
    This may influence the [DDL](../glossary.html#term-DDL) that will be emitted for
    this column during a table create, as well as how the column will be considered
    when INSERT statements are compiled and executed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The default value is the string `"auto"`, which indicates that a single-column
    (i.e. non-composite) primary key that is of an INTEGER type with no other client-side
    or server-side default constructs indicated should receive auto increment semantics
    automatically. Other values include `True` (force this column to have auto-increment
    semantics for a [composite primary key](../glossary.html#term-composite-primary-key)
    as well), `False` (this column should never have auto-increment semantics), and
    the string `"ignore_fk"` (special-case for foreign key columns, see below).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The term “auto increment semantics” refers both to the kind of DDL that will
    be emitted for the column within a CREATE TABLE statement, when methods such as
    [`MetaData.create_all()`](#sqlalchemy.schema.MetaData.create_all "sqlalchemy.schema.MetaData.create_all")
    and [`Table.create()`](#sqlalchemy.schema.Table.create "sqlalchemy.schema.Table.create")
    are invoked, as well as how the column will be considered when an INSERT statement
    is compiled and emitted to the database:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`DDL rendering` (i.e. [`MetaData.create_all()`](#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all"), [`Table.create()`](#sqlalchemy.schema.Table.create
    "sqlalchemy.schema.Table.create")): When used on a [`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") that has no other default-generating construct associated
    with it (such as a [`Sequence`](defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    or [`Identity`](defaults.html#sqlalchemy.schema.Identity "sqlalchemy.schema.Identity")
    construct), the parameter will imply that database-specific keywords such as PostgreSQL
    `SERIAL`, MySQL `AUTO_INCREMENT`, or `IDENTITY` on SQL Server should also be rendered.
    Not every database backend has an “implied” default generator available; for example
    the Oracle backend always needs an explicit construct such as [`Identity`](defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity") to be included with a [`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") in order for the DDL rendered to include auto-generating
    constructs to also be produced in the database.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`INSERT semantics` (i.e. when a [`insert()`](dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert") construct is compiled into a SQL string and
    is then executed on a database using [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") or equivalent): A single-row INSERT statement
    will be known to produce a new integer primary key value automatically for this
    column, which will be accessible after the statement is invoked via the [`CursorResult.inserted_primary_key`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key") attribute upon the [`Result`](connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object. This also applies towards use of the ORM when
    ORM-mapped objects are persisted to the database, indicating that a new integer
    primary key will be available to become part of the [identity key](../glossary.html#term-identity-key)
    for that object. This behavior takes place regardless of what DDL constructs are
    associated with the [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    and is independent of the “DDL Rendering” behavior discussed in the previous note
    above.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The parameter may be set to `True` to indicate that a column which is part of
    a composite (i.e. multi-column) primary key should have autoincrement semantics,
    though note that only one column within a primary key may have this setting. It
    can also be set to `True` to indicate autoincrement semantics on a column that
    has a client-side or server-side default configured, however note that not all
    dialects can accommodate all styles of default as an “autoincrement”. It can also
    be set to `False` on a single-column primary key that has a datatype of INTEGER
    in order to disable auto increment semantics for that column.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The setting *only* has an effect for columns which are:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Integer derived (i.e. INT, SMALLINT, BIGINT).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Part of the primary key
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Not referring to another column via [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey"), unless the value is specified as `''ignore_fk''`:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: It is typically not desirable to have “autoincrement” enabled on a column that
    refers to another via foreign key, as such a column is required to refer to a
    value that originates from elsewhere.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The setting has these effects on columns that meet the above criteria:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'DDL issued for the column, if the column does not already include a default
    generating construct supported by the backend such as [`Identity`](defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity"), will include database-specific keywords intended
    to signify this column as an “autoincrement” column for specific backends. Behavior
    for primary SQLAlchemy dialects includes:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: AUTO INCREMENT on MySQL and MariaDB
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: SERIAL on PostgreSQL
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: IDENTITY on MS-SQL - this occurs even without the [`Identity`](defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity") construct as the [`Column.autoincrement`](#sqlalchemy.schema.Column.params.autoincrement
    "sqlalchemy.schema.Column") parameter pre-dates this construct.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: SQLite - SQLite integer primary key columns are implicitly “auto incrementing”
    and no additional keywords are rendered; to render the special SQLite keyword
    `AUTOINCREMENT` is not included as this is unnecessary and not recommended by
    the database vendor. See the section [SQLite Auto Incrementing Behavior](../dialects/sqlite.html#sqlite-autoincrement)
    for more background.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Oracle - The Oracle dialect has no default “autoincrement” feature available
    at this time, instead the [`Identity`](defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity") construct is recommended to achieve this (the [`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") construct may also be used).
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Third-party dialects - consult those dialects’ documentation for details on
    their specific behaviors.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When a single-row [`insert()`](dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert")
    construct is compiled and executed, which does not set the [`Insert.inline()`](dml.html#sqlalchemy.sql.expression.Insert.inline
    "sqlalchemy.sql.expression.Insert.inline") modifier, newly generated primary key
    values for this column will be automatically retrieved upon statement execution
    using a method specific to the database driver in use:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: MySQL, SQLite - calling upon `cursor.lastrowid()` (see [https://www.python.org/dev/peps/pep-0249/#lastrowid](https://www.python.org/dev/peps/pep-0249/#lastrowid))
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: PostgreSQL, SQL Server, Oracle - use RETURNING or an equivalent construct when
    rendering an INSERT statement, and then retrieving the newly generated primary
    key values after execution
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: PostgreSQL, Oracle for [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects that set [`Table.implicit_returning`](#sqlalchemy.schema.Table.params.implicit_returning
    "sqlalchemy.schema.Table") to False - for a [`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") only, the [`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") is invoked explicitly before the INSERT statement
    takes place so that the newly generated primary key value is available to the
    client
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: SQL Server for [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects that set [`Table.implicit_returning`](#sqlalchemy.schema.Table.params.implicit_returning
    "sqlalchemy.schema.Table") to False - the `SELECT scope_identity()` construct
    is used after the INSERT statement is invoked to retrieve the newly generated
    primary key value.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Third-party dialects - consult those dialects’ documentation for details on
    their specific behaviors.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For multiple-row [`insert()`](dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert")
    constructs invoked with a list of parameters (i.e. “executemany” semantics), primary-key
    retrieving behaviors are generally disabled, however there may be special APIs
    that may be used to retrieve lists of new primary key values for an “executemany”,
    such as the psycopg2 “fast insertmany” feature. Such features are very new and
    may not yet be well covered in documentation.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`default` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A scalar, Python callable, or [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") expression representing the *default
    value* for this column, which will be invoked upon insert if this column is otherwise
    not specified in the VALUES clause of the insert. This is a shortcut to using
    [`ColumnDefault`](defaults.html#sqlalchemy.schema.ColumnDefault "sqlalchemy.schema.ColumnDefault")
    as a positional argument; see that class for full detail on the structure of the
    argument.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Contrast this argument to [`Column.server_default`](#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column") which creates a default generator on the database
    side.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Column INSERT/UPDATE Defaults](defaults.html)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`doc` – optional String that can be used by the ORM or similar to document
    attributes on the Python side. This attribute does `not` render SQL comments;
    use the [`Column.comment`](#sqlalchemy.schema.Column.params.comment "sqlalchemy.schema.Column")
    parameter for this purpose.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`key` – An optional string identifier which will identify this `Column` object
    on the [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table"). When a key
    is provided, this is the only identifier referencing the `Column` within the application,
    including ORM attribute mapping; the `name` field is used only when rendering
    SQL.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`index` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When `True`, indicates that a [`Index`](constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") construct will be automatically generated for this
    [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column"), which will result
    in a “CREATE INDEX” statement being emitted for the [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") when the DDL create operation is invoked.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Using this flag is equivalent to making use of the [`Index`](constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") construct explicitly at the level of the [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") construct itself:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To add the [`Index.unique`](constraints.html#sqlalchemy.schema.Index.params.unique
    "sqlalchemy.schema.Index") flag to the [`Index`](constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index"), set both the [`Column.unique`](#sqlalchemy.schema.Column.params.unique
    "sqlalchemy.schema.Column") and [`Column.index`](#sqlalchemy.schema.Column.params.index
    "sqlalchemy.schema.Column") flags to True simultaneously, which will have the
    effect of rendering the “CREATE UNIQUE INDEX” DDL instruction instead of “CREATE
    INDEX”.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The name of the index is generated using the [default naming convention](constraints.html#constraint-default-naming-convention)
    which for the [`Index`](constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    construct is of the form `ix_<tablename>_<columnname>`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As this flag is intended only as a convenience for the common case of adding
    a single-column, default configured index to a table definition, explicit use
    of the [`Index`](constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    construct should be preferred for most use cases, including composite indexes
    that encompass more than one column, indexes with SQL expressions or ordering,
    backend-specific index configuration options, and indexes that use a specific
    name.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: the [`Column.index`](#sqlalchemy.schema.Column.index "sqlalchemy.schema.Column.index")
    attribute on [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    **does not indicate** if this column is indexed or not, only if this flag was
    explicitly set here. To view indexes on a column, view the [`Table.indexes`](#sqlalchemy.schema.Table.indexes
    "sqlalchemy.schema.Table.indexes") collection or use [`Inspector.get_indexes()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_indexes
    "sqlalchemy.engine.reflection.Inspector.get_indexes").
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Indexes](constraints.html#schema-indexes)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Configuring Constraint Naming Conventions](constraints.html#constraint-naming-conventions)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`Column.unique`](#sqlalchemy.schema.Column.params.unique "sqlalchemy.schema.Column")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`info` – Optional data dictionary which will be populated into the [`SchemaItem.info`](#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info") attribute of this object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nullable` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When set to `False`, will cause the “NOT NULL” phrase to be added when generating
    DDL for the column. When `True`, will normally generate nothing (in SQL this defaults
    to “NULL”), except in some very specific backend-specific edge cases where “NULL”
    may render explicitly. Defaults to `True` unless [`Column.primary_key`](#sqlalchemy.schema.Column.params.primary_key
    "sqlalchemy.schema.Column") is also `True` or the column specifies a `Identity`,
    in which case it defaults to `False`. This parameter is only used when issuing
    CREATE TABLE statements.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When the column specifies a `Identity` this parameter is in general ignored
    by the DDL compiler. The PostgreSQL database allows nullable identity column by
    setting this parameter to `True` explicitly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`onupdate` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A scalar, Python callable, or [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") representing a default value to be
    applied to the column within UPDATE statements, which will be invoked upon update
    if this column is not present in the SET clause of the update. This is a shortcut
    to using [`ColumnDefault`](defaults.html#sqlalchemy.schema.ColumnDefault "sqlalchemy.schema.ColumnDefault")
    as a positional argument with `for_update=True`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Column INSERT/UPDATE Defaults](defaults.html#metadata-defaults) - complete
    discussion of onupdate'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`primary_key` – If `True`, marks this column as a primary key column. Multiple
    columns can have this flag set to specify composite primary keys. As an alternative,
    the primary key of a [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    can be specified via an explicit [`PrimaryKeyConstraint`](constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`server_default` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A [`FetchedValue`](defaults.html#sqlalchemy.schema.FetchedValue "sqlalchemy.schema.FetchedValue")
    instance, str, Unicode or [`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct representing the DDL DEFAULT value
    for the column.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'String types will be emitted as-is, surrounded by single quotes:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'A [`text()`](sqlelement.html#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")
    expression will be rendered as-is, without quotes:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Strings and text() will be converted into a [`DefaultClause`](defaults.html#sqlalchemy.schema.DefaultClause
    "sqlalchemy.schema.DefaultClause") object upon initialization.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'This parameter can also accept complex combinations of contextually valid SQLAlchemy
    expressions or constructs:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The above results in a table created with the following SQL:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use [`FetchedValue`](defaults.html#sqlalchemy.schema.FetchedValue "sqlalchemy.schema.FetchedValue")
    to indicate that an already-existing column will generate a default value on the
    database side which will be available to SQLAlchemy for post-fetch after inserts.
    This construct does not specify any DDL and the implementation is left to the
    database, such as via a trigger.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Server-invoked DDL-Explicit Default Expressions](defaults.html#server-defaults)
    - complete discussion of server side defaults'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`server_onupdate` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A [`FetchedValue`](defaults.html#sqlalchemy.schema.FetchedValue "sqlalchemy.schema.FetchedValue")
    instance representing a database-side default generation function, such as a trigger.
    This indicates to SQLAlchemy that a newly generated value will be available after
    updates. This construct does not actually implement any kind of generation function
    within the database, which instead must be specified separately.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This directive **does not** currently produce MySQL’s “ON UPDATE CURRENT_TIMESTAMP()”
    clause. See [Rendering ON UPDATE CURRENT TIMESTAMP for MySQL / MariaDB’s explicit_defaults_for_timestamp](../dialects/mysql.html#mysql-timestamp-onupdate)
    for background on how to produce this clause.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Marking Implicitly Generated Values, timestamps, and Triggered Columns](defaults.html#triggered-columns)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`quote` – Force quoting of this column’s name on or off, corresponding to `True`
    or `False`. When left at its default of `None`, the column identifier will be
    quoted according to whether the name is case sensitive (identifiers with at least
    one upper case character are treated as case sensitive), or if it’s a reserved
    word. This flag is only needed to force quoting of a reserved word which is not
    known by the SQLAlchemy dialect.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`unique` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When `True`, and the [`Column.index`](#sqlalchemy.schema.Column.params.index
    "sqlalchemy.schema.Column") parameter is left at its default value of `False`,
    indicates that a [`UniqueConstraint`](constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") construct will be automatically generated
    for this [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column"), which
    will result in a “UNIQUE CONSTRAINT” clause referring to this column being included
    in the `CREATE TABLE` statement emitted, when the DDL create operation for the
    [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") object is invoked.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When this flag is `True` while the [`Column.index`](#sqlalchemy.schema.Column.params.index
    "sqlalchemy.schema.Column") parameter is simultaneously set to `True`, the effect
    instead is that a [`Index`](constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    construct which includes the [`Index.unique`](constraints.html#sqlalchemy.schema.Index.params.unique
    "sqlalchemy.schema.Index") parameter set to `True` is generated. See the documentation
    for [`Column.index`](#sqlalchemy.schema.Column.params.index "sqlalchemy.schema.Column")
    for additional detail.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Using this flag is equivalent to making use of the [`UniqueConstraint`](constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") construct explicitly at the level of the
    [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") construct itself:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The [`UniqueConstraint.name`](constraints.html#sqlalchemy.schema.UniqueConstraint.params.name
    "sqlalchemy.schema.UniqueConstraint") parameter of the unique constraint object
    is left at its default value of `None`; in the absence of a [naming convention](constraints.html#constraint-naming-conventions)
    for the enclosing [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData"),
    the UNIQUE CONSTRAINT construct will be emitted as unnamed, which typically invokes
    a database-specific naming convention to take place.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As this flag is intended only as a convenience for the common case of adding
    a single-column, default configured unique constraint to a table definition, explicit
    use of the [`UniqueConstraint`](constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") construct should be preferred for most use
    cases, including composite constraints that encompass more than one column, backend-specific
    index configuration options, and constraints that use a specific name.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: the [`Column.unique`](#sqlalchemy.schema.Column.unique "sqlalchemy.schema.Column.unique")
    attribute on [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    **does not indicate** if this column has a unique constraint or not, only if this
    flag was explicitly set here. To view indexes and unique constraints that may
    involve this column, view the [`Table.indexes`](#sqlalchemy.schema.Table.indexes
    "sqlalchemy.schema.Table.indexes") and/or [`Table.constraints`](#sqlalchemy.schema.Table.constraints
    "sqlalchemy.schema.Table.constraints") collections or use [`Inspector.get_indexes()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_indexes
    "sqlalchemy.engine.reflection.Inspector.get_indexes") and/or [`Inspector.get_unique_constraints()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_unique_constraints
    "sqlalchemy.engine.reflection.Inspector.get_unique_constraints")
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[UNIQUE Constraint](constraints.html#schema-unique-constraint)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Configuring Constraint Naming Conventions](constraints.html#constraint-naming-conventions)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`Column.index`](#sqlalchemy.schema.Column.params.index "sqlalchemy.schema.Column")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`system` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When `True`, indicates this is a “system” column, that is a column which is
    automatically made available by the database, and should not be included in the
    columns list for a `CREATE TABLE` statement.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For more elaborate scenarios where columns should be conditionally rendered
    differently on different backends, consider custom compilation rules for [`CreateColumn`](ddl.html#sqlalchemy.schema.CreateColumn
    "sqlalchemy.schema.CreateColumn").
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`comment` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optional string that will render an SQL comment on table creation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'New in version 1.2: Added the [`Column.comment`](#sqlalchemy.schema.Column.params.comment
    "sqlalchemy.schema.Column") parameter to [`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column").'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`insert_sentinel` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Marks this [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    as an [insert sentinel](../glossary.html#term-insert-sentinel) used for optimizing
    the performance of the [insertmanyvalues](../glossary.html#term-insertmanyvalues)
    feature for tables that don’t otherwise have qualifying primary key configurations.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 2.0.10.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`insert_sentinel()`](#sqlalchemy.schema.insert_sentinel "sqlalchemy.schema.insert_sentinel")
    - all in one helper for declaring sentinel columns'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[“Insert Many Values” Behavior for INSERT statements](connections.html#engine-insertmanyvalues)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Configuring Sentinel Columns](connections.html#engine-insertmanyvalues-sentinel-columns)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__le__` *method
    of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `<=` operator.
  prefs: []
  type: TYPE_NORMAL
- en: In a column context, produces the clause `a <= b`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__lt__` *method
    of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `<` operator.
  prefs: []
  type: TYPE_NORMAL
- en: In a column context, produces the clause `a < b`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__ne__` *method
    of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `!=` operator.
  prefs: []
  type: TYPE_NORMAL
- en: In a column context, produces the clause `a != b`. If the target is `None`,
    produces `a IS NOT NULL`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.all_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce an [`all_()`](sqlelement.html#sqlalchemy.sql.expression.all_ "sqlalchemy.sql.expression.all_")
    clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: See the documentation for [`all_()`](sqlelement.html#sqlalchemy.sql.expression.all_
    "sqlalchemy.sql.expression.all_") for examples.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: be sure to not confuse the newer [`ColumnOperators.all_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") method with the **legacy** version
    of this method, the [`Comparator.all()`](type_basics.html#sqlalchemy.types.ARRAY.Comparator.all
    "sqlalchemy.types.ARRAY.Comparator.all") method that’s specific to [`ARRAY`](type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY"), which uses a different calling style.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnElement.anon_key_label`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.anon_key_label
    "sqlalchemy.sql.expression.ColumnElement.anon_key_label") *attribute of* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.4: The [`ColumnElement.anon_key_label`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.anon_key_label
    "sqlalchemy.sql.expression.ColumnElement.anon_key_label") attribute is now private,
    and the public accessor is deprecated.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnElement.anon_label`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.anon_label
    "sqlalchemy.sql.expression.ColumnElement.anon_label") *attribute of* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.4: The [`ColumnElement.anon_label`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.anon_label
    "sqlalchemy.sql.expression.ColumnElement.anon_label") attribute is now private,
    and the public accessor is deprecated.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.any_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce an [`any_()`](sqlelement.html#sqlalchemy.sql.expression.any_ "sqlalchemy.sql.expression.any_")
    clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: See the documentation for [`any_()`](sqlelement.html#sqlalchemy.sql.expression.any_
    "sqlalchemy.sql.expression.any_") for examples.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: be sure to not confuse the newer [`ColumnOperators.any_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") method with the **legacy** version
    of this method, the [`Comparator.any()`](type_basics.html#sqlalchemy.types.ARRAY.Comparator.any
    "sqlalchemy.types.ARRAY.Comparator.any") method that’s specific to [`ARRAY`](type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY"), which uses a different calling style.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") *method of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  prefs: []
  type: TYPE_NORMAL
- en: Add a new kind of dialect-specific keyword argument for this class.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: The [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") method is a per-argument way
    adding extra arguments to the [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") dictionary. This
    dictionary provides a list of argument names accepted by various schema-level
    constructs on behalf of a dialect.
  prefs: []
  type: TYPE_NORMAL
- en: New dialects should typically specify this dictionary all at once as a data
    member of the dialect class. The use case for ad-hoc addition of argument names
    is typically for end-user code that is also using a custom compilation scheme
    which consumes the additional arguments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`dialect_name` – name of a dialect. The dialect must be locatable, else a [`NoSuchModuleError`](exceptions.html#sqlalchemy.exc.NoSuchModuleError
    "sqlalchemy.exc.NoSuchModuleError") is raised. The dialect must also include an
    existing [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") collection, indicating
    that it participates in the keyword-argument validation and default system, else
    [`ArgumentError`](exceptions.html#sqlalchemy.exc.ArgumentError "sqlalchemy.exc.ArgumentError")
    is raised. If the dialect does not include this collection, then any keyword argument
    can be specified on behalf of this dialect already. All dialects packaged within
    SQLAlchemy include this collection, however for third party dialects, support
    may vary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`argument_name` – name of the parameter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`default` – default value of the parameter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.asc()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.asc
    "sqlalchemy.sql.expression.ColumnOperators.asc") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`asc()`](sqlelement.html#sqlalchemy.sql.expression.asc "sqlalchemy.sql.expression.asc")
    clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.between()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.between
    "sqlalchemy.sql.expression.ColumnOperators.between") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`between()`](sqlelement.html#sqlalchemy.sql.expression.between "sqlalchemy.sql.expression.between")
    clause against the parent object, given the lower and upper range.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.bitwise_and()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_and
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_and") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a bitwise AND operation, typically via the `&` operator.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Bitwise Operators](operators.html#operators-bitwise)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.bitwise_lshift()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a bitwise LSHIFT operation, typically via the `<<` operator.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Bitwise Operators](operators.html#operators-bitwise)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.bitwise_not()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_not
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_not") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a bitwise NOT operation, typically via the `~` operator.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Bitwise Operators](operators.html#operators-bitwise)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.bitwise_or()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_or
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_or") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a bitwise OR operation, typically via the `|` operator.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Bitwise Operators](operators.html#operators-bitwise)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.bitwise_rshift()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a bitwise RSHIFT operation, typically via the `>>` operator.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Bitwise Operators](operators.html#operators-bitwise)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.bitwise_xor()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_xor
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_xor") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a bitwise XOR operation, typically via the `^` operator, or `#` for
    PostgreSQL.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Bitwise Operators](operators.html#operators-bitwise)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Operators.bool_op()`](sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") *method of* [`Operators`](sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a custom boolean operator.
  prefs: []
  type: TYPE_NORMAL
- en: This method is shorthand for calling [`Operators.op()`](sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") and passing the [`Operators.op.is_comparison`](sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op") flag with True. A key advantage to using
    [`Operators.bool_op()`](sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") is that when using column constructs,
    the “boolean” nature of the returned expression will be present for [**PEP 484**](https://peps.python.org/pep-0484/)
    purposes.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Operators.op()`](sqlelement.html#sqlalchemy.sql.expression.Operators.op "sqlalchemy.sql.expression.Operators.op")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnElement.cast()`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.cast
    "sqlalchemy.sql.expression.ColumnElement.cast") *method of* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a type cast, i.e. `CAST(<expression> AS <type>)`.
  prefs: []
  type: TYPE_NORMAL
- en: This is a shortcut to the [`cast()`](sqlelement.html#sqlalchemy.sql.expression.cast
    "sqlalchemy.sql.expression.cast") function.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Data Casts and Type Coercion](../tutorial/data_select.html#tutorial-casts)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`cast()`](sqlelement.html#sqlalchemy.sql.expression.cast "sqlalchemy.sql.expression.cast")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`type_coerce()`](sqlelement.html#sqlalchemy.sql.expression.type_coerce "sqlalchemy.sql.expression.type_coerce")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.collate()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.collate
    "sqlalchemy.sql.expression.ColumnOperators.collate") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`collate()`](sqlelement.html#sqlalchemy.sql.expression.collate "sqlalchemy.sql.expression.collate")
    clause against the parent object, given the collation string.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`collate()`](sqlelement.html#sqlalchemy.sql.expression.collate "sqlalchemy.sql.expression.collate")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ClauseElement.compare()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.compare
    "sqlalchemy.sql.expression.ClauseElement.compare") *method of* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
  prefs: []
  type: TYPE_NORMAL
- en: Compare this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") to the given [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  prefs: []
  type: TYPE_NORMAL
- en: Subclasses should override the default behavior, which is a straight identity
    comparison.
  prefs: []
  type: TYPE_NORMAL
- en: '**kw are arguments consumed by subclass `compare()` methods and may be used
    to modify the criteria for comparison (see [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `CompilerElement.compile()` *method of* `CompilerElement`'
  prefs: []
  type: TYPE_NORMAL
- en: Compile this SQL expression.
  prefs: []
  type: TYPE_NORMAL
- en: The return value is a [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object. Calling `str()` or `unicode()` on the returned
    value will yield a string representation of the result. The [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object also can return a dictionary of bind parameter
    names and values using the `params` accessor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`bind` – An [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    or [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    which can provide a [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    in order to generate a [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object. If the `bind` and `dialect` parameters are
    both omitted, a default SQL compiler is used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`column_keys` – Used for INSERT and UPDATE statements, a list of column names
    which should be present in the VALUES clause of the compiled statement. If `None`,
    all columns from the target table object are rendered.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dialect` – A [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    instance which can generate a [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object. This argument takes precedence over the
    `bind` argument.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`compile_kwargs` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'optional dictionary of additional parameters that will be passed through to
    the compiler within all “visit” methods. This allows any custom flag to be passed
    through to a custom compilation construct, for example. It is also used for the
    case of passing the `literal_binds` flag through:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[How do I render SQL expressions as strings, possibly with bound parameters
    inlined?](../faq/sqlexpressions.html#faq-sql-expression-string)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.concat()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.concat
    "sqlalchemy.sql.expression.ColumnOperators.concat") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the ‘concat’ operator.
  prefs: []
  type: TYPE_NORMAL
- en: In a column context, produces the clause `a || b`, or uses the `concat()` operator
    on MySQL.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.contains()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the ‘contains’ operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Produces a LIKE expression that tests against a match for the middle of a string
    value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.contains.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.contains.escape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.contains") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.contains.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains") flag is set to True.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autoescape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With the value of `:param` as `"foo/%bar"`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The parameter may also be combined with [`ColumnOperators.contains.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains"):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.startswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.endswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.like()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Deprecated since version 1.4: The [`Column.copy()`](#sqlalchemy.schema.Column.copy
    "sqlalchemy.schema.Column.copy") method is deprecated and will be removed in a
    future release.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.desc()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.desc
    "sqlalchemy.sql.expression.ColumnOperators.desc") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`desc()`](sqlelement.html#sqlalchemy.sql.expression.desc "sqlalchemy.sql.expression.desc")
    clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  prefs: []
  type: TYPE_NORMAL
- en: A collection of keyword arguments specified as dialect-specific options to this
    construct.
  prefs: []
  type: TYPE_NORMAL
- en: The arguments are present here in their original `<dialect>_<kwarg>` format.
    Only arguments that were actually passed are included; unlike the [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") collection, which contains
    all options known by this dialect including defaults.
  prefs: []
  type: TYPE_NORMAL
- en: The collection is also writable; keys are accepted of the form `<dialect>_<kwarg>`
    where the value will be assembled into the list of options.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") - nested dictionary form'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  prefs: []
  type: TYPE_NORMAL
- en: A collection of keyword arguments specified as dialect-specific options to this
    construct.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a two-level nested registry, keyed to `<dialect_name>` and `<argument_name>`.
    For example, the `postgresql_where` argument would be locatable as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: New in version 0.9.2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") - flat dictionary form'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.distinct()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.distinct
    "sqlalchemy.sql.expression.ColumnOperators.distinct") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`distinct()`](sqlelement.html#sqlalchemy.sql.expression.distinct
    "sqlalchemy.sql.expression.distinct") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.endswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the ‘endswith’ operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Produces a LIKE expression that tests against a match for the end of a string
    value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.endswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.endswith.escape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.endswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") flag is set to True.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autoescape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With the value of `:param` as `"foo/%bar"`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The parameter may also be combined with [`ColumnOperators.endswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith"):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.startswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.contains()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.like()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnElement.expression`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.expression
    "sqlalchemy.sql.expression.ColumnElement.expression") *attribute of* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a column expression.
  prefs: []
  type: TYPE_NORMAL
- en: Part of the inspection interface; returns self.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnElement.foreign_keys`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.foreign_keys
    "sqlalchemy.sql.expression.ColumnElement.foreign_keys") *attribute of* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
  prefs: []
  type: TYPE_NORMAL
- en: A collection of all [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") marker objects associated with this [`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column").
  prefs: []
  type: TYPE_NORMAL
- en: Each object is a member of a [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")-wide
    [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Table.foreign_keys`](#sqlalchemy.schema.Table.foreign_keys "sqlalchemy.schema.Table.foreign_keys")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnClause.get_children()`](sqlelement.html#sqlalchemy.sql.expression.ColumnClause.get_children
    "sqlalchemy.sql.expression.ColumnClause.get_children") *method of* [`ColumnClause`](sqlelement.html#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause")'
  prefs: []
  type: TYPE_NORMAL
- en: Return immediate child `HasTraverseInternals` elements of this `HasTraverseInternals`.
  prefs: []
  type: TYPE_NORMAL
- en: This is used for visit traversal.
  prefs: []
  type: TYPE_NORMAL
- en: '**kw may contain flags that change the collection that is returned, for example
    to return a subset of items in order to cut down on larger traversals, or to return
    child items from a different context (such as schema-level collections instead
    of clause-level).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.icontains()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains
    "sqlalchemy.sql.expression.ColumnOperators.icontains") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `icontains` operator, e.g. case insensitive version of [`ColumnOperators.contains()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains").
  prefs: []
  type: TYPE_NORMAL
- en: 'Produces a LIKE expression that tests against an insensitive match for the
    middle of a string value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.icontains.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.icontains.escape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.icontains.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") flag is set to True.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autoescape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With the value of `:param` as `"foo/%bar"`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The parameter may also be combined with [`ColumnOperators.contains.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains"):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.contains()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.iendswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `iendswith` operator, e.g. case insensitive version of [`ColumnOperators.endswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith").
  prefs: []
  type: TYPE_NORMAL
- en: 'Produces a LIKE expression that tests against an insensitive match for the
    end of a string value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.iendswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.iendswith.escape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.iendswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") flag is set to True.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autoescape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With the value of `:param` as `"foo/%bar"`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The parameter may also be combined with [`ColumnOperators.iendswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith"):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.endswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.ilike()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `ilike` operator, e.g. case insensitive LIKE.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a column context, produces an expression either of the form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: 'Or on backends that support the ILIKE operator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'optional escape character, renders the `ESCAPE` keyword, e.g.:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.like()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.in_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `in` operator.
  prefs: []
  type: TYPE_NORMAL
- en: In a column context, produces the clause `column IN <other>`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The given parameter `other` may be:'
  prefs: []
  type: TYPE_NORMAL
- en: 'A list of literal values, e.g.:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In this calling form, the list of items is converted to a set of bound parameters
    the same length as the list given:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'A list of tuples may be provided if the comparison is against a [`tuple_()`](sqlelement.html#sqlalchemy.sql.expression.tuple_
    "sqlalchemy.sql.expression.tuple_") containing multiple expressions:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'An empty list, e.g.:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In this calling form, the expression renders an “empty set” expression. These
    expressions are tailored to individual backends and are generally trying to get
    an empty SELECT statement as a subquery. Such as on SQLite, the expression is:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Changed in version 1.4: empty IN expressions now use an execution-time generated
    SELECT subquery in all cases.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'A bound parameter, e.g. [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam"), may be used if it includes the [`bindparam.expanding`](sqlelement.html#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam") flag:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In this calling form, the expression renders a special non-SQL placeholder
    expression that looks like:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This placeholder expression is intercepted at statement execution time to be
    converted into the variable number of bound parameter form illustrated earlier.
    If the statement were executed as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The database would be passed a bound parameter for each value:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'New in version 1.2: added “expanding” bound parameters'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If an empty list is passed, a special “empty list” expression, which is specific
    to the database in use, is rendered. On SQLite this would be:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'New in version 1.3: “expanding” bound parameters now support empty lists'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'a [`select()`](selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    construct, which is usually a correlated scalar select:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In this calling form, [`ColumnOperators.in_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") renders as given:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**other** – a list of literals, a [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct, or a [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") construct that includes the [`bindparam.expanding`](sqlelement.html#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam") flag set to True.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: The value of the [`Column.index`](#sqlalchemy.schema.Column.params.index "sqlalchemy.schema.Column")
    parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Does not indicate if this [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    is actually indexed or not; use [`Table.indexes`](#sqlalchemy.schema.Table.indexes
    "sqlalchemy.schema.Table.indexes").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Table.indexes`](#sqlalchemy.schema.Table.indexes "sqlalchemy.schema.Table.indexes")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`SchemaItem.info`](#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info") *attribute of* [`SchemaItem`](#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem")'
  prefs: []
  type: TYPE_NORMAL
- en: Info dictionary associated with the object, allowing user-defined data to be
    associated with this [`SchemaItem`](#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem").
  prefs: []
  type: TYPE_NORMAL
- en: The dictionary is automatically generated when first accessed. It can also be
    specified in the constructor of some objects, such as [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") and [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: Indicate if this [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") instance should make use of the cache
    key generation scheme used by its immediate superclass.
  prefs: []
  type: TYPE_NORMAL
- en: The attribute defaults to `None`, which indicates that a construct has not yet
    taken into account whether or not its appropriate for it to participate in caching;
    this is functionally equivalent to setting the value to `False`, except that a
    warning is also emitted.
  prefs: []
  type: TYPE_NORMAL
- en: This flag can be set to `True` on a particular class, if the SQL that corresponds
    to the object does not change based on attributes which are local to this class,
    and not its superclass.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Enabling Caching Support for Custom Constructs](compiler.html#compilerext-caching)
    - General guideslines for setting the [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute for third-party
    or user defined SQL constructs.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.is_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `IS` operator.
  prefs: []
  type: TYPE_NORMAL
- en: Normally, `IS` is generated automatically when comparing to a value of `None`,
    which resolves to `NULL`. However, explicit usage of `IS` may be desirable if
    comparing to boolean values on certain platforms.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.is_not()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.is_distinct_from()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_distinct_from") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `IS DISTINCT FROM` operator.
  prefs: []
  type: TYPE_NORMAL
- en: Renders “a IS DISTINCT FROM b” on most platforms; on some such as SQLite may
    render “a IS NOT b”.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.is_not()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `IS NOT` operator.
  prefs: []
  type: TYPE_NORMAL
- en: Normally, `IS NOT` is generated automatically when comparing to a value of `None`,
    which resolves to `NULL`. However, explicit usage of `IS NOT` may be desirable
    if comparing to boolean values on certain platforms.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `is_not()` operator is renamed from `isnot()` in
    previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.is_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.is_not_distinct_from()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_not_distinct_from") *method of*
    [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `IS NOT DISTINCT FROM` operator.
  prefs: []
  type: TYPE_NORMAL
- en: Renders “a IS NOT DISTINCT FROM b” on most platforms; on some such as SQLite
    may render “a IS b”.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `is_not_distinct_from()` operator is renamed from
    `isnot_distinct_from()` in previous releases. The previous name remains available
    for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.isnot()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot
    "sqlalchemy.sql.expression.ColumnOperators.isnot") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `IS NOT` operator.
  prefs: []
  type: TYPE_NORMAL
- en: Normally, `IS NOT` is generated automatically when comparing to a value of `None`,
    which resolves to `NULL`. However, explicit usage of `IS NOT` may be desirable
    if comparing to boolean values on certain platforms.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `is_not()` operator is renamed from `isnot()` in
    previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.is_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.isnot_distinct_from()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `IS NOT DISTINCT FROM` operator.
  prefs: []
  type: TYPE_NORMAL
- en: Renders “a IS NOT DISTINCT FROM b” on most platforms; on some such as SQLite
    may render “a IS b”.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `is_not_distinct_from()` operator is renamed from
    `isnot_distinct_from()` in previous releases. The previous name remains available
    for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.istartswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `istartswith` operator, e.g. case insensitive version of [`ColumnOperators.startswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith").
  prefs: []
  type: TYPE_NORMAL
- en: 'Produces a LIKE expression that tests against an insensitive match for the
    start of a string value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.istartswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.istartswith.escape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.istartswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") flag is set to True.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autoescape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With the value of `:param` as `"foo/%bar"`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The parameter may also be combined with [`ColumnOperators.istartswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith"):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.startswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnElement.key`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.key
    "sqlalchemy.sql.expression.ColumnElement.key") *attribute of* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
  prefs: []
  type: TYPE_NORMAL
- en: The ‘key’ that in some circumstances refers to this object in a Python namespace.
  prefs: []
  type: TYPE_NORMAL
- en: This typically refers to the “key” of the column as present in the `.c` collection
    of a selectable, e.g. `sometable.c["somekey"]` would return a [`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") with a `.key` of “somekey”.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`DialectKWArgs.kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.kwargs
    "sqlalchemy.sql.base.DialectKWArgs.kwargs") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  prefs: []
  type: TYPE_NORMAL
- en: A synonym for [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnElement.label()`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.label
    "sqlalchemy.sql.expression.ColumnElement.label") *method of* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a column label, i.e. `<columnname> AS <name>`.
  prefs: []
  type: TYPE_NORMAL
- en: This is a shortcut to the [`label()`](sqlelement.html#sqlalchemy.sql.expression.label
    "sqlalchemy.sql.expression.label") function.
  prefs: []
  type: TYPE_NORMAL
- en: If ‘name’ is `None`, an anonymous label name will be generated.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.like()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `like` operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a column context, produces the expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'optional escape character, renders the `ESCAPE` keyword, e.g.:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.ilike()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.match()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implements a database-specific ‘match’ operator.
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.match()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") attempts to resolve to a MATCH-like
    function or operator provided by the backend. Examples include:'
  prefs: []
  type: TYPE_NORMAL
- en: PostgreSQL - renders `x @@ plainto_tsquery(y)`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in version 2.0: `plainto_tsquery()` is used instead of `to_tsquery()`
    for PostgreSQL now; for compatibility with other forms, see [Full Text Search](../dialects/postgresql.html#postgresql-match).'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: MySQL - renders `MATCH (x) AGAINST (y IN BOOLEAN MODE)`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`match`](../dialects/mysql.html#sqlalchemy.dialects.mysql.match "sqlalchemy.dialects.mysql.match")
    - MySQL specific construct with additional features.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Oracle - renders `CONTAINS(x, y)`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: other backends may provide special implementations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backends without any special implementation will emit the operator as “MATCH”.
    This is compatible with SQLite, for example.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.not_ilike()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_ilike
    "sqlalchemy.sql.expression.ColumnOperators.not_ilike") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: implement the `NOT ILIKE` operator.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to using negation with [`ColumnOperators.ilike()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike"), i.e. `~x.ilike(y)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `not_ilike()` operator is renamed from `notilike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.ilike()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.not_in()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: implement the `NOT IN` operator.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to using negation with [`ColumnOperators.in_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_"), i.e. `~x.in_(y)`.
  prefs: []
  type: TYPE_NORMAL
- en: In the case that `other` is an empty sequence, the compiler produces an “empty
    not in” expression. This defaults to the expression “1 = 1” to produce true in
    all cases. The [`create_engine.empty_in_strategy`](engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine") may be used to alter this behavior.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `not_in()` operator is renamed from `notin_()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.2: The [`ColumnOperators.in_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") and [`ColumnOperators.not_in()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") operators now produce a “static”
    expression for an empty IN sequence by default.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.in_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.not_like()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_like
    "sqlalchemy.sql.expression.ColumnOperators.not_like") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: implement the `NOT LIKE` operator.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to using negation with [`ColumnOperators.like()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like"), i.e. `~x.like(y)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `not_like()` operator is renamed from `notlike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.like()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.notilike()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notilike
    "sqlalchemy.sql.expression.ColumnOperators.notilike") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: implement the `NOT ILIKE` operator.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to using negation with [`ColumnOperators.ilike()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike"), i.e. `~x.ilike(y)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `not_ilike()` operator is renamed from `notilike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.ilike()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.notin_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notin_
    "sqlalchemy.sql.expression.ColumnOperators.notin_") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: implement the `NOT IN` operator.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to using negation with [`ColumnOperators.in_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_"), i.e. `~x.in_(y)`.
  prefs: []
  type: TYPE_NORMAL
- en: In the case that `other` is an empty sequence, the compiler produces an “empty
    not in” expression. This defaults to the expression “1 = 1” to produce true in
    all cases. The [`create_engine.empty_in_strategy`](engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine") may be used to alter this behavior.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `not_in()` operator is renamed from `notin_()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.2: The [`ColumnOperators.in_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") and [`ColumnOperators.not_in()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") operators now produce a “static”
    expression for an empty IN sequence by default.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.in_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.notlike()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notlike
    "sqlalchemy.sql.expression.ColumnOperators.notlike") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: implement the `NOT LIKE` operator.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to using negation with [`ColumnOperators.like()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like"), i.e. `~x.like(y)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `not_like()` operator is renamed from `notlike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.like()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.nulls_first()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nulls_first
    "sqlalchemy.sql.expression.ColumnOperators.nulls_first") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`nulls_first()`](sqlelement.html#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `nulls_first()` operator is renamed from `nullsfirst()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.nulls_last()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nulls_last
    "sqlalchemy.sql.expression.ColumnOperators.nulls_last") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`nulls_last()`](sqlelement.html#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `nulls_last()` operator is renamed from `nullslast()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.nullsfirst()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nullsfirst
    "sqlalchemy.sql.expression.ColumnOperators.nullsfirst") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`nulls_first()`](sqlelement.html#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `nulls_first()` operator is renamed from `nullsfirst()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.nullslast()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nullslast
    "sqlalchemy.sql.expression.ColumnOperators.nullslast") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`nulls_last()`](sqlelement.html#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `nulls_last()` operator is renamed from `nullslast()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Operators.op()`](sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") *method of* [`Operators`](sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a generic operator function.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: 'produces:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: 'This function can also be used to make bitwise operators explicit. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: is a bitwise AND of the value in `somecolumn`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`opstring` – a string which will be output as the infix operator between this
    element and the expression passed to the generated function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`precedence` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: precedence which the database is expected to apply to the operator in SQL expressions.
    This integer value acts as a hint for the SQL compiler to know when explicit parenthesis
    should be rendered around a particular operation. A lower number will cause the
    expression to be parenthesized when applied against another operator with higher
    precedence. The default value of `0` is lower than all operators except for the
    comma (`,`) and `AS` operators. A value of 100 will be higher or equal to all
    operators, and -100 will be lower than or equal to all operators.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[I’m using op() to generate a custom operator and my parenthesis are not coming
    out correctly](../faq/sqlexpressions.html#faq-sql-expression-op-parenthesis) -
    detailed description of how the SQLAlchemy SQL compiler renders parenthesis'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`is_comparison` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: legacy; if True, the operator will be considered as a “comparison” operator,
    that is which evaluates to a boolean true/false value, like `==`, `>`, etc. This
    flag is provided so that ORM relationships can establish that the operator is
    a comparison operator when used in a custom join condition.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Using the `is_comparison` parameter is superseded by using the [`Operators.bool_op()`](sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") method instead; this more succinct
    operator sets this parameter automatically, but also provides correct [**PEP 484**](https://peps.python.org/pep-0484/)
    typing support as the returned object will express a “boolean” datatype, i.e.
    `BinaryExpression[bool]`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`return_type` – a [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class or object that will force the return type
    of an expression produced by this operator to be of that type. By default, operators
    that specify [`Operators.op.is_comparison`](sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op") will resolve to [`Boolean`](type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean"), and those that do not will be of the same type as
    the left-hand operand.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`python_impl` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: an optional Python function that can evaluate two Python values in the same
    way as this operator works when run on the database server. Useful for in-Python
    SQL expression evaluation functions, such as for ORM hybrid attributes, and the
    ORM “evaluator” used to match objects in a session after a multi-row update or
    delete.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE155]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The operator for the above expression will also work for non-SQL left and right
    objects:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE156]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: New in version 2.0.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Operators.bool_op()`](sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Redefining and Creating New Operators](custom_types.html#types-operators)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Using custom operators in join conditions](../orm/join_conditions.html#relationship-custom-operator)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnElement.operate()`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.operate
    "sqlalchemy.sql.expression.ColumnElement.operate") *method of* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
  prefs: []
  type: TYPE_NORMAL
- en: Operate on an argument.
  prefs: []
  type: TYPE_NORMAL
- en: This is the lowest level of operation, raises `NotImplementedError` by default.
  prefs: []
  type: TYPE_NORMAL
- en: 'Overriding this on a subclass can allow common behavior to be applied to all
    operations. For example, overriding [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") to apply `func.lower()` to the left
    and right side:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`op` – Operator callable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`*other` – the ‘other’ side of the operation. Will be a single scalar for most
    operations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**kwargs` – modifiers. These may be passed by special operators such as `ColumnOperators.contains()`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `Immutable.params()` *method of* `Immutable`'
  prefs: []
  type: TYPE_NORMAL
- en: Return a copy with [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") elements replaced.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns a copy of this ClauseElement with [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") elements replaced with values taken from
    the given dictionary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnElement.proxy_set`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.proxy_set
    "sqlalchemy.sql.expression.ColumnElement.proxy_set") *attribute of* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
  prefs: []
  type: TYPE_NORMAL
- en: set of all columns we are proxying
  prefs: []
  type: TYPE_NORMAL
- en: as of 2.0 this is explicitly deannotated columns. previously it was effectively
    deannotated columns but wasn’t enforced. annotated columns should basically not
    go into sets if at all possible because their hashing behavior is very non-performant.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: Return True if this Column references the given column via foreign key.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.regexp_match()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implements a database-specific ‘regexp match’ operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE164]'
  prefs: []
  type: TYPE_PRE
- en: '[`ColumnOperators.regexp_match()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") attempts to resolve
    to a REGEXP-like function or operator provided by the backend, however the specific
    regular expression syntax and flags available are **not backend agnostic**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples include:'
  prefs: []
  type: TYPE_NORMAL
- en: PostgreSQL - renders `x ~ y` or `x !~ y` when negated.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Oracle - renders `REGEXP_LIKE(x, y)`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SQLite - uses SQLite’s `REGEXP` placeholder operator and calls into the Python
    `re.match()` builtin.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: other backends may provide special implementations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backends without any special implementation will emit the operator as “REGEXP”
    or “NOT REGEXP”. This is compatible with SQLite and MySQL, for example.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Regular expression support is currently implemented for Oracle, PostgreSQL,
    MySQL and MariaDB. Partial support is available for SQLite. Support among third-party
    dialects may vary.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pattern` – The regular expression pattern string or column clause.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flags` – Any regular expression string flags to apply, passed as plain Python
    string only. These flags are backend specific. Some backends, like PostgreSQL
    and MariaDB, may alternatively specify the flags as part of the pattern. When
    using the ignore case flag ‘i’ in PostgreSQL, the ignore case regexp match operator
    `~*` or `!~*` will be used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4.48,: 2.0.18 Note that due to an implementation error,
    the “flags” parameter previously accepted SQL expression objects such as column
    expressions in addition to plain Python strings. This implementation did not work
    correctly with caching and was removed; strings only should be passed for the
    “flags” parameter, as these flags are rendered as literal inline values within
    SQL expressions.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.regexp_replace()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE165]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.regexp_replace()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implements a database-specific ‘regexp replace’ operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE166]'
  prefs: []
  type: TYPE_PRE
- en: '[`ColumnOperators.regexp_replace()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") attempts to resolve
    to a REGEXP_REPLACE-like function provided by the backend, that usually emit the
    function `REGEXP_REPLACE()`. However, the specific regular expression syntax and
    flags available are **not backend agnostic**.'
  prefs: []
  type: TYPE_NORMAL
- en: Regular expression replacement support is currently implemented for Oracle,
    PostgreSQL, MySQL 8 or greater and MariaDB. Support among third-party dialects
    may vary.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pattern` – The regular expression pattern string or column clause.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pattern` – The replacement string or column clause.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flags` – Any regular expression string flags to apply, passed as plain Python
    string only. These flags are backend specific. Some backends, like PostgreSQL
    and MariaDB, may alternatively specify the flags as part of the pattern.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4.48,: 2.0.18 Note that due to an implementation error,
    the “flags” parameter previously accepted SQL expression objects such as column
    expressions in addition to plain Python strings. This implementation did not work
    correctly with caching and was removed; strings only should be passed for the
    “flags” parameter, as these flags are rendered as literal inline values within
    SQL expressions.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.regexp_match()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE167]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnElement.reverse_operate()`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.reverse_operate
    "sqlalchemy.sql.expression.ColumnElement.reverse_operate") *method of* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
  prefs: []
  type: TYPE_NORMAL
- en: Reverse operate on an argument.
  prefs: []
  type: TYPE_NORMAL
- en: Usage is the same as [`operate()`](#sqlalchemy.schema.Column.operate "sqlalchemy.schema.Column.operate").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE168]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnElement.self_group()`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.self_group
    "sqlalchemy.sql.expression.ColumnElement.self_group") *method of* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
  prefs: []
  type: TYPE_NORMAL
- en: Apply a ‘grouping’ to this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  prefs: []
  type: TYPE_NORMAL
- en: This method is overridden by subclasses to return a “grouping” construct, i.e.
    parenthesis. In particular it’s used by “binary” expressions to provide a grouping
    around themselves when placed into a larger expression, as well as by [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs when placed into the FROM clause
    of another [`select()`](selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select").
    (Note that subqueries should be normally created using the [`Select.alias()`](selectable.html#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") method, as many platforms require nested
    SELECT statements to be named).
  prefs: []
  type: TYPE_NORMAL
- en: As expressions are composed together, the application of [`self_group()`](#sqlalchemy.schema.Column.self_group
    "sqlalchemy.schema.Column.self_group") is automatic - end-user code should never
    need to use this method directly. Note that SQLAlchemy’s clause constructs take
    operator precedence into account - so parenthesis might not be needed, for example,
    in an expression like `x OR (y AND z)` - AND takes precedence over OR.
  prefs: []
  type: TYPE_NORMAL
- en: The base [`self_group()`](#sqlalchemy.schema.Column.self_group "sqlalchemy.schema.Column.self_group")
    method of [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") just returns self.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE169]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnElement.shares_lineage()`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.shares_lineage
    "sqlalchemy.sql.expression.ColumnElement.shares_lineage") *method of* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
  prefs: []
  type: TYPE_NORMAL
- en: Return True if the given [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") has a common ancestor to this [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE170]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.startswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `startswith` operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Produces a LIKE expression that tests against a match for the start of a string
    value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE171]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE172]'
  prefs: []
  type: TYPE_PRE
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.startswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.startswith.escape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.startswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") flag is set to True.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autoescape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE173]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE174]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With the value of `:param` as `"foo/%bar"`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE175]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE176]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The parameter may also be combined with [`ColumnOperators.startswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith"):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE177]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.endswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.contains()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.like()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE178]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.timetuple`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.timetuple
    "sqlalchemy.sql.expression.ColumnOperators.timetuple") *attribute of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Hack, allows datetime objects to be compared on the LHS.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE179]'
  prefs: []
  type: TYPE_PRE
- en: The value of the [`Column.unique`](#sqlalchemy.schema.Column.params.unique "sqlalchemy.schema.Column")
    parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Does not indicate if this [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    is actually subject to a unique constraint or not; use [`Table.indexes`](#sqlalchemy.schema.Table.indexes
    "sqlalchemy.schema.Table.indexes") and [`Table.constraints`](#sqlalchemy.schema.Table.constraints
    "sqlalchemy.schema.Table.constraints").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Table.indexes`](#sqlalchemy.schema.Table.indexes "sqlalchemy.schema.Table.indexes")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Table.constraints`](#sqlalchemy.schema.Table.constraints "sqlalchemy.schema.Table.constraints").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE180]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `Immutable.unique_params()` *method of* `Immutable`'
  prefs: []
  type: TYPE_NORMAL
- en: Return a copy with [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") elements replaced.
  prefs: []
  type: TYPE_NORMAL
- en: Same functionality as [`ClauseElement.params()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.params
    "sqlalchemy.sql.expression.ClauseElement.params"), except adds unique=True to
    affected bind parameters so that multiple statements can be used.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE181]'
  prefs: []
  type: TYPE_PRE
- en: A collection of [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects and their associated schema constructs.
  prefs: []
  type: TYPE_NORMAL
- en: Holds a collection of [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects as well as an optional binding to an [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") or [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"). If bound, the [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects in the collection and their columns may participate
    in implicit SQL execution.
  prefs: []
  type: TYPE_NORMAL
- en: The [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") objects themselves
    are stored in the [`MetaData.tables`](#sqlalchemy.schema.MetaData.tables "sqlalchemy.schema.MetaData.tables")
    dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: '[`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData") is a
    thread-safe object for read operations. Construction of new tables within a single
    [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData") object,
    either explicitly or via reflection, may not be completely thread-safe.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Describing Databases with MetaData](#metadata-describing) - Introduction to
    database metadata'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[__init__()](#sqlalchemy.schema.MetaData.__init__), [clear()](#sqlalchemy.schema.MetaData.clear),
    [create_all()](#sqlalchemy.schema.MetaData.create_all), [drop_all()](#sqlalchemy.schema.MetaData.drop_all),
    [reflect()](#sqlalchemy.schema.MetaData.reflect), [remove()](#sqlalchemy.schema.MetaData.remove),
    [sorted_tables](#sqlalchemy.schema.MetaData.sorted_tables), [tables](#sqlalchemy.schema.MetaData.tables)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.schema.MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    (`sqlalchemy.schema.HasSchemaAttr`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE182]'
  prefs: []
  type: TYPE_PRE
- en: Create a new MetaData object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`schema` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The default schema to use for the [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table"),
    [`Sequence`](defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence"),
    and potentially other objects associated with this [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData"). Defaults to `None`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Specifying a Default Schema Name with MetaData](#schema-metadata-schema-name)
    - details on how the [`MetaData.schema`](#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData") parameter is used.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`Table.schema`](#sqlalchemy.schema.Table.params.schema "sqlalchemy.schema.Table")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`Sequence.schema`](defaults.html#sqlalchemy.schema.Sequence.params.schema
    "sqlalchemy.schema.Sequence")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`quote_schema` – Sets the `quote_schema` flag for those [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), [`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence"), and other objects which make usage of the local
    `schema` name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`info` – Optional data dictionary which will be populated into the [`SchemaItem.info`](#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info") attribute of this object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`naming_convention` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a dictionary referring to values which will establish default naming conventions
    for [`Constraint`](constraints.html#sqlalchemy.schema.Constraint "sqlalchemy.schema.Constraint")
    and [`Index`](constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    objects, for those objects which are not given a name explicitly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The keys of this dictionary may be:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: a constraint or Index class, e.g. the [`UniqueConstraint`](constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint"), [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") class, the [`Index`](constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") class
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: a string mnemonic for one of the known constraint classes; `"fk"`, `"pk"`, `"ix"`,
    `"ck"`, `"uq"` for foreign key, primary key, index, check, and unique constraint,
    respectively.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: the string name of a user-defined “token” that can be used to define new naming
    tokens.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The values associated with each “constraint class” or “constraint mnemonic”
    key are string naming templates, such as `"uq_%(table_name)s_%(column_0_name)s"`,
    which describe how the name should be composed. The values associated with user-defined
    “token” keys should be callables of the form `fn(constraint, table)`, which accepts
    the constraint/index object and [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    as arguments, returning a string result.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The built-in names are as follows, some of which may only be available for
    certain types of constraint:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`%(table_name)s` - the name of the [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object associated with the constraint.'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`%(referred_table_name)s` - the name of the [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object associated with the referencing target of a
    [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint").'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`%(column_0_name)s` - the name of the [`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") at index position “0” within the constraint.'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`%(column_0N_name)s` - the name of all [`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects in order within the constraint, joined without
    a separator.'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`%(column_0_N_name)s` - the name of all [`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects in order within the constraint, joined with
    an underscore as a separator.'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`%(column_0_label)s`, `%(column_0N_label)s`, `%(column_0_N_label)s` - the label
    of either the zeroth [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    or all `Columns`, separated with or without an underscore'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`%(column_0_key)s`, `%(column_0N_key)s`, `%(column_0_N_key)s` - the key of
    either the zeroth [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    or all `Columns`, separated with or without an underscore'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`%(referred_column_0_name)s`, `%(referred_column_0N_name)s` `%(referred_column_0_N_name)s`,
    `%(referred_column_0_key)s`, `%(referred_column_0N_key)s`, … column tokens which
    render the names/keys/labels of columns that are referenced by a [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint").'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`%(constraint_name)s` - a special key that refers to the existing name given
    to the constraint. When this key is present, the [`Constraint`](constraints.html#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint") object’s existing name will be replaced with one
    that is composed from template string that uses this token. When this token is
    present, it is required that the [`Constraint`](constraints.html#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint") is given an explicit name ahead of time.'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'user-defined: any additional token may be implemented by passing it along with
    a `fn(constraint, table)` callable to the naming_convention dictionary.'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: 'New in version 1.3.0: - added new `%(column_0N_name)s`, `%(column_0_N_name)s`,
    and related tokens that produce concatenations of names, keys, or labels for all
    columns referred to by a given constraint.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Configuring Constraint Naming Conventions](constraints.html#constraint-naming-conventions)
    - for detailed usage examples.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE183]'
  prefs: []
  type: TYPE_PRE
- en: Clear all Table objects from this MetaData.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE184]'
  prefs: []
  type: TYPE_PRE
- en: Create all tables stored in this metadata.
  prefs: []
  type: TYPE_NORMAL
- en: Conditional by default, will not attempt to recreate tables already present
    in the target database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`bind` – A [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    or [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    used to access the database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tables` – Optional list of `Table` objects, which is a subset of the total
    tables in the `MetaData` (others are ignored).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`checkfirst` – Defaults to True, don’t issue CREATEs for tables already present
    in the target database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE185]'
  prefs: []
  type: TYPE_PRE
- en: Drop all tables stored in this metadata.
  prefs: []
  type: TYPE_NORMAL
- en: Conditional by default, will not attempt to drop tables not present in the target
    database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`bind` – A [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    or [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    used to access the database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tables` – Optional list of `Table` objects, which is a subset of the total
    tables in the `MetaData` (others are ignored).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`checkfirst` – Defaults to True, only issue DROPs for tables confirmed to be
    present in the target database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE186]'
  prefs: []
  type: TYPE_PRE
- en: Load all available table definitions from the database.
  prefs: []
  type: TYPE_NORMAL
- en: Automatically creates `Table` entries in this `MetaData` for any table available
    in the database but not yet present in the `MetaData`. May be called multiple
    times to pick up tables recently added to the database, however no special action
    is taken if a table in this `MetaData` no longer exists in the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`bind` – A [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    or [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    used to access the database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`schema` – Optional, query and reflect tables from an alternate schema. If
    None, the schema associated with this [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") is used, if any.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`views` – If True, also reflect views (materialized and plain).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`only` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optional. Load only a sub-set of available named tables. May be specified as
    a sequence of names or a callable.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If a sequence of names is provided, only those tables will be reflected. An
    error is raised if a table is requested but not available. Named tables already
    present in this `MetaData` are ignored.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If a callable is provided, it will be used as a boolean predicate to filter
    the list of potential table names. The callable is called with a table name and
    this `MetaData` instance as positional arguments and should return a true value
    for any table to reflect.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`extend_existing` – Passed along to each [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") as [`Table.extend_existing`](#sqlalchemy.schema.Table.params.extend_existing
    "sqlalchemy.schema.Table").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autoload_replace` – Passed along to each [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") as [`Table.autoload_replace`](#sqlalchemy.schema.Table.params.autoload_replace
    "sqlalchemy.schema.Table").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`resolve_fks` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: if True, reflect [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects linked to [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") objects located in each [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"). For [`MetaData.reflect()`](#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect"), this has the effect of reflecting related
    tables that might otherwise not be in the list of tables being reflected, for
    example if the referenced table is in a different schema or is omitted via the
    [`MetaData.reflect.only`](#sqlalchemy.schema.MetaData.reflect.params.only "sqlalchemy.schema.MetaData.reflect")
    parameter. When False, [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") objects are not followed to the [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") in which they link, however if the related table is
    also part of the list of tables that would be reflected in any case, the [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") object will still resolve to its related [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") after the [`MetaData.reflect()`](#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") operation is complete. Defaults to True.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 1.3.0.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`Table.resolve_fks`](#sqlalchemy.schema.Table.params.resolve_fks "sqlalchemy.schema.Table")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`**dialect_kwargs` – Additional keyword arguments not mentioned above are dialect
    specific, and passed in the form `<dialectname>_<argname>`. See the documentation
    regarding an individual dialect at [Dialects](../dialects/index.html) for detail
    on documented arguments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Reflecting Database Objects](reflection.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`DDLEvents.column_reflect()`](events.html#sqlalchemy.events.DDLEvents.column_reflect
    "sqlalchemy.events.DDLEvents.column_reflect") - Event used to customize the reflected
    columns. Usually used to generalize the types using [`TypeEngine.as_generic()`](type_api.html#sqlalchemy.types.TypeEngine.as_generic
    "sqlalchemy.types.TypeEngine.as_generic")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Reflecting with Database-Agnostic Types](reflection.html#metadata-reflection-dbagnostic-types)
    - describes how to reflect tables using general types.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE187]'
  prefs: []
  type: TYPE_PRE
- en: Remove the given Table object from this MetaData.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE188]'
  prefs: []
  type: TYPE_PRE
- en: Returns a list of [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects sorted in order of foreign key dependency.
  prefs: []
  type: TYPE_NORMAL
- en: The sorting will place [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects that have dependencies first, before the dependencies themselves, representing
    the order in which they can be created. To get the order in which the tables would
    be dropped, use the `reversed()` Python built-in.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: The [`MetaData.sorted_tables`](#sqlalchemy.schema.MetaData.sorted_tables "sqlalchemy.schema.MetaData.sorted_tables")
    attribute cannot by itself accommodate automatic resolution of dependency cycles
    between tables, which are usually caused by mutually dependent foreign key constraints.
    When these cycles are detected, the foreign keys of these tables are omitted from
    consideration in the sort. A warning is emitted when this condition occurs, which
    will be an exception raise in a future release. Tables which are not part of the
    cycle will still be returned in dependency order.
  prefs: []
  type: TYPE_NORMAL
- en: To resolve these cycles, the [`ForeignKeyConstraint.use_alter`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint.params.use_alter
    "sqlalchemy.schema.ForeignKeyConstraint") parameter may be applied to those constraints
    which create a cycle. Alternatively, the [`sort_tables_and_constraints()`](ddl.html#sqlalchemy.schema.sort_tables_and_constraints
    "sqlalchemy.schema.sort_tables_and_constraints") function will automatically return
    foreign key constraints in a separate collection when cycles are detected so that
    they may be applied to a schema separately.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.3.17: - a warning is emitted when [`MetaData.sorted_tables`](#sqlalchemy.schema.MetaData.sorted_tables
    "sqlalchemy.schema.MetaData.sorted_tables") cannot perform a proper sort due to
    cyclical dependencies. This will be an exception in a future release. Additionally,
    the sort will continue to return other tables not involved in the cycle in dependency
    order which was not the case previously.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sort_tables()`](ddl.html#sqlalchemy.schema.sort_tables "sqlalchemy.schema.sort_tables")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`sort_tables_and_constraints()`](ddl.html#sqlalchemy.schema.sort_tables_and_constraints
    "sqlalchemy.schema.sort_tables_and_constraints")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`MetaData.tables`](#sqlalchemy.schema.MetaData.tables "sqlalchemy.schema.MetaData.tables")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Inspector.get_table_names()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_table_names
    "sqlalchemy.engine.reflection.Inspector.get_table_names")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Inspector.get_sorted_table_and_fkc_names()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_sorted_table_and_fkc_names
    "sqlalchemy.engine.reflection.Inspector.get_sorted_table_and_fkc_names")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE189]'
  prefs: []
  type: TYPE_PRE
- en: A dictionary of [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects keyed to their name or “table key”.
  prefs: []
  type: TYPE_NORMAL
- en: The exact key is that determined by the [`Table.key`](#sqlalchemy.schema.Table.key
    "sqlalchemy.schema.Table.key") attribute; for a table with no [`Table.schema`](#sqlalchemy.schema.Table.schema
    "sqlalchemy.schema.Table.schema") attribute, this is the same as `Table.name`.
    For a table with a schema, it is typically of the form `schemaname.tablename`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`MetaData.sorted_tables`](#sqlalchemy.schema.MetaData.sorted_tables "sqlalchemy.schema.MetaData.sorted_tables")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE190]'
  prefs: []
  type: TYPE_PRE
- en: An enumeration.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[BLANK_SCHEMA](#sqlalchemy.schema.SchemaConst.BLANK_SCHEMA), [NULL_UNSPECIFIED](#sqlalchemy.schema.SchemaConst.NULL_UNSPECIFIED),
    [RETAIN_SCHEMA](#sqlalchemy.schema.SchemaConst.RETAIN_SCHEMA)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.schema.SchemaConst`](#sqlalchemy.schema.SchemaConst "sqlalchemy.schema.SchemaConst")
    (`enum.Enum`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE191]'
  prefs: []
  type: TYPE_PRE
- en: Symbol indicating that a [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    or [`Sequence`](defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    should have ‘None’ for its schema, even if the parent [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") has specified a schema.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`MetaData.schema`](#sqlalchemy.schema.MetaData.params.schema "sqlalchemy.schema.MetaData")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Table.schema`](#sqlalchemy.schema.Table.params.schema "sqlalchemy.schema.Table")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Sequence.schema`](defaults.html#sqlalchemy.schema.Sequence.params.schema
    "sqlalchemy.schema.Sequence")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE192]'
  prefs: []
  type: TYPE_PRE
- en: Symbol indicating the “nullable” keyword was not passed to a Column.
  prefs: []
  type: TYPE_NORMAL
- en: This is used to distinguish between the use case of passing `nullable=None`
    to a [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column"), which has
    special meaning on some backends such as SQL Server.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE193]'
  prefs: []
  type: TYPE_PRE
- en: Symbol indicating that a [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table"),
    [`Sequence`](defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    or in some cases a [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") object, in situations where the object is being
    copied for a [`Table.to_metadata()`](#sqlalchemy.schema.Table.to_metadata "sqlalchemy.schema.Table.to_metadata")
    operation, should retain the schema name that it already has.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE194]'
  prefs: []
  type: TYPE_PRE
- en: Base class for items that define a database schema.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[info](#sqlalchemy.schema.SchemaItem.info)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.schema.SchemaItem`](#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")
    (`sqlalchemy.sql.expression.SchemaEventTarget`, [`sqlalchemy.sql.visitors.Visitable`](visitors.html#sqlalchemy.sql.visitors.Visitable
    "sqlalchemy.sql.visitors.Visitable"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE195]'
  prefs: []
  type: TYPE_PRE
- en: Info dictionary associated with the object, allowing user-defined data to be
    associated with this [`SchemaItem`](#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem").
  prefs: []
  type: TYPE_NORMAL
- en: The dictionary is automatically generated when first accessed. It can also be
    specified in the constructor of some objects, such as [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") and [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE196]'
  prefs: []
  type: TYPE_PRE
- en: Provides a surrogate [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    that will act as a dedicated insert [sentinel](../glossary.html#term-sentinel)
    column, allowing efficient bulk inserts with deterministic RETURNING sorting for
    tables that don’t otherwise have qualifying primary key configurations.
  prefs: []
  type: TYPE_NORMAL
- en: Adding this column to a [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object requires that a corresponding database table actually has this column present,
    so if adding it to an existing model, existing database tables would need to be
    migrated (e.g. using ALTER TABLE or similar) to include this column.
  prefs: []
  type: TYPE_NORMAL
- en: For background on how this object is used, see the section [Configuring Sentinel
    Columns](connections.html#engine-insertmanyvalues-sentinel-columns) as part of
    the section [“Insert Many Values” Behavior for INSERT statements](connections.html#engine-insertmanyvalues).
  prefs: []
  type: TYPE_NORMAL
- en: The [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column") returned
    will be a nullable integer column by default and make use of a sentinel-specific
    default generator used only in “insertmanyvalues” operations.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`orm_insert_sentinel()`](../orm/mapping_api.html#sqlalchemy.orm.orm_insert_sentinel
    "sqlalchemy.orm.orm_insert_sentinel")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Column.insert_sentinel`](#sqlalchemy.schema.Column.params.insert_sentinel
    "sqlalchemy.schema.Column")'
  prefs: []
  type: TYPE_NORMAL
- en: '[“Insert Many Values” Behavior for INSERT statements](connections.html#engine-insertmanyvalues)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Configuring Sentinel Columns](connections.html#engine-insertmanyvalues-sentinel-columns)'
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.10.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE197]'
  prefs: []
  type: TYPE_PRE
- en: Represent a table in a database.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE198]'
  prefs: []
  type: TYPE_PRE
- en: The [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") object constructs
    a unique instance of itself based on its name and optional schema name within
    the given [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    object. Calling the [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    constructor with the same name and same [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") argument a second time will return the *same* [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object - in this way the [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") constructor acts as a registry function.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Describing Databases with MetaData](#metadata-describing) - Introduction to
    database metadata'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[__init__()](#sqlalchemy.schema.Table.__init__), [add_is_dependent_on()](#sqlalchemy.schema.Table.add_is_dependent_on),
    [alias()](#sqlalchemy.schema.Table.alias), [append_column()](#sqlalchemy.schema.Table.append_column),
    [append_constraint()](#sqlalchemy.schema.Table.append_constraint), [argument_for()](#sqlalchemy.schema.Table.argument_for),
    [autoincrement_column](#sqlalchemy.schema.Table.autoincrement_column), [c](#sqlalchemy.schema.Table.c),
    [columns](#sqlalchemy.schema.Table.columns), [compare()](#sqlalchemy.schema.Table.compare),
    [compile()](#sqlalchemy.schema.Table.compile), [constraints](#sqlalchemy.schema.Table.constraints),
    [corresponding_column()](#sqlalchemy.schema.Table.corresponding_column), [create()](#sqlalchemy.schema.Table.create),
    [delete()](#sqlalchemy.schema.Table.delete), [description](#sqlalchemy.schema.Table.description),
    [dialect_kwargs](#sqlalchemy.schema.Table.dialect_kwargs), [dialect_options](#sqlalchemy.schema.Table.dialect_options),
    [drop()](#sqlalchemy.schema.Table.drop), [entity_namespace](#sqlalchemy.schema.Table.entity_namespace),
    [exported_columns](#sqlalchemy.schema.Table.exported_columns), [foreign_key_constraints](#sqlalchemy.schema.Table.foreign_key_constraints),
    [foreign_keys](#sqlalchemy.schema.Table.foreign_keys), [get_children()](#sqlalchemy.schema.Table.get_children),
    [implicit_returning](#sqlalchemy.schema.Table.implicit_returning), [indexes](#sqlalchemy.schema.Table.indexes),
    [info](#sqlalchemy.schema.Table.info), [inherit_cache](#sqlalchemy.schema.Table.inherit_cache),
    [insert()](#sqlalchemy.schema.Table.insert), [is_derived_from()](#sqlalchemy.schema.Table.is_derived_from),
    [join()](#sqlalchemy.schema.Table.join), [key](#sqlalchemy.schema.Table.key),
    [kwargs](#sqlalchemy.schema.Table.kwargs), [lateral()](#sqlalchemy.schema.Table.lateral),
    [outerjoin()](#sqlalchemy.schema.Table.outerjoin), [params()](#sqlalchemy.schema.Table.params),
    [primary_key](#sqlalchemy.schema.Table.primary_key), [replace_selectable()](#sqlalchemy.schema.Table.replace_selectable),
    [schema](#sqlalchemy.schema.Table.schema), [select()](#sqlalchemy.schema.Table.select),
    [self_group()](#sqlalchemy.schema.Table.self_group), [table_valued()](#sqlalchemy.schema.Table.table_valued),
    [tablesample()](#sqlalchemy.schema.Table.tablesample), [to_metadata()](#sqlalchemy.schema.Table.to_metadata),
    [tometadata()](#sqlalchemy.schema.Table.tometadata), [unique_params()](#sqlalchemy.schema.Table.unique_params),
    [update()](#sqlalchemy.schema.Table.update)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.schema.Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    ([`sqlalchemy.sql.base.DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs"), `sqlalchemy.schema.HasSchemaAttr`, [`sqlalchemy.sql.expression.TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause"), `sqlalchemy.inspection.Inspectable`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE199]'
  prefs: []
  type: TYPE_PRE
- en: Constructor for [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The name of this table as represented in the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The table name, along with the value of the `schema` parameter, forms a key
    which uniquely identifies this [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    within the owning [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    collection. Additional calls to [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    with the same name, metadata, and schema name will return the same [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Names which contain no upper case characters will be treated as case insensitive
    names, and will not be quoted unless they are a reserved word or contain special
    characters. A name with any number of upper case characters is considered to be
    case sensitive, and will be sent as quoted.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To enable unconditional quoting for the table name, specify the flag `quote=True`
    to the constructor, or use the [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name") construct to specify the name.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`metadata` – a [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    object which will contain this table. The metadata is used as a point of association
    of this table with other tables which are referenced via foreign key. It also
    may be used to associate this table with a particular [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") or [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`*args` – Additional positional arguments are used primarily to add the list
    of [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column") objects contained
    within this table. Similar to the style of a CREATE TABLE statement, other [`SchemaItem`](#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem") constructs may be added here, including [`PrimaryKeyConstraint`](constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint"), and [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autoload_replace` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defaults to `True`; when using [`Table.autoload_with`](#sqlalchemy.schema.Table.params.autoload_with
    "sqlalchemy.schema.Table") in conjunction with [`Table.extend_existing`](#sqlalchemy.schema.Table.params.extend_existing
    "sqlalchemy.schema.Table"), indicates that [`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects present in the already-existing [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object should be replaced with columns of the same
    name retrieved from the autoload process. When `False`, columns already present
    under existing names will be omitted from the reflection process.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note that this setting does not impact [`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects specified programmatically within the call
    to [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") that also is
    autoloading; those [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    objects will always replace existing columns of the same name when [`Table.extend_existing`](#sqlalchemy.schema.Table.params.extend_existing
    "sqlalchemy.schema.Table") is `True`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`Table.autoload_with`](#sqlalchemy.schema.Table.params.autoload_with "sqlalchemy.schema.Table")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`Table.extend_existing`](#sqlalchemy.schema.Table.params.extend_existing "sqlalchemy.schema.Table")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`autoload_with` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    or [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object, or a [`Inspector`](reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector") object as returned by [`inspect()`](inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect") against one, with which this [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object will be reflected. When set to a non-None value,
    the autoload process will take place for this table against the given engine or
    connection.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Reflecting Database Objects](reflection.html)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`DDLEvents.column_reflect()`](events.html#sqlalchemy.events.DDLEvents.column_reflect
    "sqlalchemy.events.DDLEvents.column_reflect")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Reflecting with Database-Agnostic Types](reflection.html#metadata-reflection-dbagnostic-types)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`extend_existing` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When `True`, indicates that if this [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    is already present in the given [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData"),
    apply further arguments within the constructor to the existing [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table").
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If [`Table.extend_existing`](#sqlalchemy.schema.Table.params.extend_existing
    "sqlalchemy.schema.Table") or [`Table.keep_existing`](#sqlalchemy.schema.Table.params.keep_existing
    "sqlalchemy.schema.Table") are not set, and the given name of the new [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") refers to a [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    that is already present in the target [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") collection, and this [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") specifies additional columns or other constructs or
    flags that modify the table’s state, an error is raised. The purpose of these
    two mutually-exclusive flags is to specify what action should be taken when a
    [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") is specified that
    matches an existing [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table"),
    yet specifies additional constructs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`Table.extend_existing`](#sqlalchemy.schema.Table.params.extend_existing "sqlalchemy.schema.Table")
    will also work in conjunction with [`Table.autoload_with`](#sqlalchemy.schema.Table.params.autoload_with
    "sqlalchemy.schema.Table") to run a new reflection operation against the database,
    even if a [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") of the
    same name is already present in the target [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData"); newly reflected [`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects and other options will be added into the state
    of the [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table"), potentially
    overwriting existing columns and options of the same name.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'As is always the case with [`Table.autoload_with`](#sqlalchemy.schema.Table.params.autoload_with
    "sqlalchemy.schema.Table"), [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    objects can be specified in the same [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    constructor, which will take precedence. Below, the existing table `mytable` will
    be augmented with [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    objects both reflected from the database, as well as the given [`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") named “y”:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE200]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`Table.autoload_with`](#sqlalchemy.schema.Table.params.autoload_with "sqlalchemy.schema.Table")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`Table.autoload_replace`](#sqlalchemy.schema.Table.params.autoload_replace
    "sqlalchemy.schema.Table")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`Table.keep_existing`](#sqlalchemy.schema.Table.params.keep_existing "sqlalchemy.schema.Table")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`implicit_returning` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: True by default - indicates that RETURNING can be used, typically by the ORM,
    in order to fetch server-generated values such as primary key values and server
    side defaults, on those backends which support RETURNING.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In modern SQLAlchemy there is generally no reason to alter this setting, except
    for some backend specific cases (see [Triggers](../dialects/mssql.html#mssql-triggers)
    in the SQL Server dialect documentation for one such example).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`include_columns` – A list of strings indicating a subset of columns to be
    loaded via the `autoload` operation; table columns who aren’t present in this
    list will not be represented on the resulting `Table` object. Defaults to `None`
    which indicates all columns should be reflected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`resolve_fks` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Whether or not to reflect [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects related to this one via [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") objects, when [`Table.autoload_with`](#sqlalchemy.schema.Table.params.autoload_with
    "sqlalchemy.schema.Table") is specified. Defaults to True. Set to False to disable
    reflection of related tables as [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") objects are encountered; may be used either to
    save on SQL calls or to avoid issues with related tables that can’t be accessed.
    Note that if a related table is already present in the [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") collection, or becomes present later, a [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") object associated with this [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") will resolve to that table normally.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 1.3.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`MetaData.reflect.resolve_fks`](#sqlalchemy.schema.MetaData.reflect.params.resolve_fks
    "sqlalchemy.schema.MetaData.reflect")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`info` – Optional data dictionary which will be populated into the [`SchemaItem.info`](#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info") attribute of this object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`keep_existing` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When `True`, indicates that if this Table is already present in the given [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData"), ignore further arguments within the constructor
    to the existing [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table"),
    and return the [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") object
    as originally created. This is to allow a function that wishes to define a new
    [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") on first call, but
    on subsequent calls will return the same [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table"),
    without any of the declarations (particularly constraints) being applied a second
    time.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If [`Table.extend_existing`](#sqlalchemy.schema.Table.params.extend_existing
    "sqlalchemy.schema.Table") or [`Table.keep_existing`](#sqlalchemy.schema.Table.params.keep_existing
    "sqlalchemy.schema.Table") are not set, and the given name of the new [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") refers to a [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    that is already present in the target [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") collection, and this [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") specifies additional columns or other constructs or
    flags that modify the table’s state, an error is raised. The purpose of these
    two mutually-exclusive flags is to specify what action should be taken when a
    [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") is specified that
    matches an existing [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table"),
    yet specifies additional constructs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`Table.extend_existing`](#sqlalchemy.schema.Table.params.extend_existing "sqlalchemy.schema.Table")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`listeners` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A list of tuples of the form `(<eventname>, <fn>)` which will be passed to
    [`listen()`](event.html#sqlalchemy.event.listen "sqlalchemy.event.listen") upon
    construction. This alternate hook to [`listen()`](event.html#sqlalchemy.event.listen
    "sqlalchemy.event.listen") allows the establishment of a listener function specific
    to this [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") before the
    “autoload” process begins. Historically this has been intended for use with the
    [`DDLEvents.column_reflect()`](events.html#sqlalchemy.events.DDLEvents.column_reflect
    "sqlalchemy.events.DDLEvents.column_reflect") event, however note that this event
    hook may now be associated with the [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    object directly:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE201]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`DDLEvents.column_reflect()`](events.html#sqlalchemy.events.DDLEvents.column_reflect
    "sqlalchemy.events.DDLEvents.column_reflect")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`must_exist` – When `True`, indicates that this Table must already be present
    in the given [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    collection, else an exception is raised.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`prefixes` – A list of strings to insert after CREATE in the CREATE TABLE statement.
    They will be separated by spaces.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`quote` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Force quoting of this table’s name on or off, corresponding to `True` or `False`.
    When left at its default of `None`, the column identifier will be quoted according
    to whether the name is case sensitive (identifiers with at least one upper case
    character are treated as case sensitive), or if it’s a reserved word. This flag
    is only needed to force quoting of a reserved word which is not known by the SQLAlchemy
    dialect.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: setting this flag to `False` will not provide case-insensitive behavior for
    table reflection; table reflection will always search for a mixed-case name in
    a case sensitive fashion. Case insensitive names are specified in SQLAlchemy only
    by stating the name with all lower case characters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`quote_schema` – same as ‘quote’ but applies to the schema identifier.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`schema` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The schema name for this table, which is required if the table resides in a
    schema other than the default selected schema for the engine’s database connection.
    Defaults to `None`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If the owning [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    of this [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") specifies
    its own [`MetaData.schema`](#sqlalchemy.schema.MetaData.params.schema "sqlalchemy.schema.MetaData")
    parameter, then that schema name will be applied to this [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") if the schema parameter here is set to `None`. To set
    a blank schema name on a [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    that would otherwise use the schema set on the owning [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData"), specify the special symbol [`BLANK_SCHEMA`](#sqlalchemy.schema.SchemaConst.BLANK_SCHEMA
    "sqlalchemy.schema.SchemaConst.BLANK_SCHEMA").
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The quoting rules for the schema name are the same as those for the `name` parameter,
    in that quoting is applied for reserved words or case-sensitive names; to enable
    unconditional quoting for the schema name, specify the flag `quote_schema=True`
    to the constructor, or use the [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name") construct to specify the name.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`comment` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optional string that will render an SQL comment on table creation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'New in version 1.2: Added the [`Table.comment`](#sqlalchemy.schema.Table.params.comment
    "sqlalchemy.schema.Table") parameter to [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table").'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`**kw` – Additional keyword arguments not mentioned above are dialect specific,
    and passed in the form `<dialectname>_<argname>`. See the documentation regarding
    an individual dialect at [Dialects](../dialects/index.html) for detail on documented
    arguments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE202]'
  prefs: []
  type: TYPE_PRE
- en: Add a ‘dependency’ for this Table.
  prefs: []
  type: TYPE_NORMAL
- en: This is another Table object which must be created first before this one can,
    or dropped after this one.
  prefs: []
  type: TYPE_NORMAL
- en: Usually, dependencies between tables are determined via ForeignKey objects.
    However, for other situations that create dependencies outside of foreign keys
    (rules, inheriting), this method can manually establish such a link.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE203]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`FromClause.alias()`](selectable.html#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") *method of* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  prefs: []
  type: TYPE_NORMAL
- en: Return an alias of this [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE204]'
  prefs: []
  type: TYPE_PRE
- en: The above code creates an [`Alias`](selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") object which can be used as a FROM clause in
    any SELECT statement.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Using Aliases](../tutorial/data_select.html#tutorial-using-aliases)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`alias()`](selectable.html#sqlalchemy.sql.expression.alias "sqlalchemy.sql.expression.alias")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE205]'
  prefs: []
  type: TYPE_PRE
- en: Append a [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column") to
    this [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table").
  prefs: []
  type: TYPE_NORMAL
- en: The “key” of the newly added [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column"),
    i.e. the value of its `.key` attribute, will then be available in the `.c` collection
    of this [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table"), and the
    column definition will be included in any CREATE TABLE, SELECT, UPDATE, etc. statements
    generated from this [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    construct.
  prefs: []
  type: TYPE_NORMAL
- en: Note that this does **not** change the definition of the table as it exists
    within any underlying database, assuming that table has already been created in
    the database. Relational databases support the addition of columns to existing
    tables using the SQL ALTER command, which would need to be emitted for an already-existing
    table that doesn’t contain the newly added column.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**replace_existing** –'
  prefs: []
  type: TYPE_NORMAL
- en: When `True`, allows replacing existing columns. When `False`, the default, an
    warning will be raised if a column with the same `.key` already exists. A future
    version of sqlalchemy will instead rise a warning.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE206]'
  prefs: []
  type: TYPE_PRE
- en: Append a [`Constraint`](constraints.html#sqlalchemy.schema.Constraint "sqlalchemy.schema.Constraint")
    to this [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table").
  prefs: []
  type: TYPE_NORMAL
- en: This has the effect of the constraint being included in any future CREATE TABLE
    statement, assuming specific DDL creation events have not been associated with
    the given [`Constraint`](constraints.html#sqlalchemy.schema.Constraint "sqlalchemy.schema.Constraint")
    object.
  prefs: []
  type: TYPE_NORMAL
- en: Note that this does **not** produce the constraint within the relational database
    automatically, for a table that already exists in the database. To add a constraint
    to an existing relational database table, the SQL ALTER command must be used.
    SQLAlchemy also provides the [`AddConstraint`](ddl.html#sqlalchemy.schema.AddConstraint
    "sqlalchemy.schema.AddConstraint") construct which can produce this SQL when invoked
    as an executable clause.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE207]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") *method of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  prefs: []
  type: TYPE_NORMAL
- en: Add a new kind of dialect-specific keyword argument for this class.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE208]'
  prefs: []
  type: TYPE_PRE
- en: The [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") method is a per-argument way
    adding extra arguments to the [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") dictionary. This
    dictionary provides a list of argument names accepted by various schema-level
    constructs on behalf of a dialect.
  prefs: []
  type: TYPE_NORMAL
- en: New dialects should typically specify this dictionary all at once as a data
    member of the dialect class. The use case for ad-hoc addition of argument names
    is typically for end-user code that is also using a custom compilation scheme
    which consumes the additional arguments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`dialect_name` – name of a dialect. The dialect must be locatable, else a [`NoSuchModuleError`](exceptions.html#sqlalchemy.exc.NoSuchModuleError
    "sqlalchemy.exc.NoSuchModuleError") is raised. The dialect must also include an
    existing [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") collection, indicating
    that it participates in the keyword-argument validation and default system, else
    [`ArgumentError`](exceptions.html#sqlalchemy.exc.ArgumentError "sqlalchemy.exc.ArgumentError")
    is raised. If the dialect does not include this collection, then any keyword argument
    can be specified on behalf of this dialect already. All dialects packaged within
    SQLAlchemy include this collection, however for third party dialects, support
    may vary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`argument_name` – name of the parameter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`default` – default value of the parameter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE209]'
  prefs: []
  type: TYPE_PRE
- en: Returns the [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    object which currently represents the “auto increment” column, if any, else returns
    None.
  prefs: []
  type: TYPE_NORMAL
- en: This is based on the rules for [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    as defined by the [`Column.autoincrement`](#sqlalchemy.schema.Column.params.autoincrement
    "sqlalchemy.schema.Column") parameter, which generally means the column within
    a single integer column primary key constraint that is not constrained by a foreign
    key. If the table does not have such a primary key constraint, then there’s no
    “autoincrement” column. A [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    may have only one column defined as the “autoincrement” column.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.4.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Column.autoincrement`](#sqlalchemy.schema.Column.params.autoincrement "sqlalchemy.schema.Column")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE210]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`FromClause.c`](selectable.html#sqlalchemy.sql.expression.FromClause.c
    "sqlalchemy.sql.expression.FromClause.c") *attribute of* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  prefs: []
  type: TYPE_NORMAL
- en: A synonym for [`FromClause.columns`](selectable.html#sqlalchemy.sql.expression.FromClause.columns
    "sqlalchemy.sql.expression.FromClause.columns")
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE211]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`FromClause.columns`](selectable.html#sqlalchemy.sql.expression.FromClause.columns
    "sqlalchemy.sql.expression.FromClause.columns") *attribute of* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  prefs: []
  type: TYPE_NORMAL
- en: A named-based collection of [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") objects maintained by this [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`columns`](#sqlalchemy.schema.Table.columns "sqlalchemy.schema.Table.columns"),
    or [`c`](#sqlalchemy.schema.Table.c "sqlalchemy.schema.Table.c") collection, is
    the gateway to the construction of SQL expressions using table-bound or other
    selectable-bound columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE212]'
  prefs: []
  type: TYPE_PRE
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE213]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ClauseElement.compare()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.compare
    "sqlalchemy.sql.expression.ClauseElement.compare") *method of* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
  prefs: []
  type: TYPE_NORMAL
- en: Compare this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") to the given [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  prefs: []
  type: TYPE_NORMAL
- en: Subclasses should override the default behavior, which is a straight identity
    comparison.
  prefs: []
  type: TYPE_NORMAL
- en: '**kw are arguments consumed by subclass `compare()` methods and may be used
    to modify the criteria for comparison (see [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE214]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `CompilerElement.compile()` *method of* `CompilerElement`'
  prefs: []
  type: TYPE_NORMAL
- en: Compile this SQL expression.
  prefs: []
  type: TYPE_NORMAL
- en: The return value is a [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object. Calling `str()` or `unicode()` on the returned
    value will yield a string representation of the result. The [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object also can return a dictionary of bind parameter
    names and values using the `params` accessor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`bind` – An [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    or [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    which can provide a [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    in order to generate a [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object. If the `bind` and `dialect` parameters are
    both omitted, a default SQL compiler is used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`column_keys` – Used for INSERT and UPDATE statements, a list of column names
    which should be present in the VALUES clause of the compiled statement. If `None`,
    all columns from the target table object are rendered.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dialect` – A [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    instance which can generate a [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object. This argument takes precedence over the
    `bind` argument.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`compile_kwargs` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'optional dictionary of additional parameters that will be passed through to
    the compiler within all “visit” methods. This allows any custom flag to be passed
    through to a custom compilation construct, for example. It is also used for the
    case of passing the `literal_binds` flag through:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE215]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[How do I render SQL expressions as strings, possibly with bound parameters
    inlined?](../faq/sqlexpressions.html#faq-sql-expression-string)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE216]'
  prefs: []
  type: TYPE_PRE
- en: A collection of all [`Constraint`](constraints.html#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint") objects associated with this [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table").
  prefs: []
  type: TYPE_NORMAL
- en: Includes [`PrimaryKeyConstraint`](constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint"), [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint"), [`UniqueConstraint`](constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint"), [`CheckConstraint`](constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint"). A separate collection [`Table.foreign_key_constraints`](#sqlalchemy.schema.Table.foreign_key_constraints
    "sqlalchemy.schema.Table.foreign_key_constraints") refers to the collection of
    all [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") objects, and the [`Table.primary_key`](#sqlalchemy.schema.Table.primary_key
    "sqlalchemy.schema.Table.primary_key") attribute refers to the single [`PrimaryKeyConstraint`](constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") associated with the [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Table.constraints`](#sqlalchemy.schema.Table.constraints "sqlalchemy.schema.Table.constraints")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Table.primary_key`](#sqlalchemy.schema.Table.primary_key "sqlalchemy.schema.Table.primary_key")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Table.foreign_key_constraints`](#sqlalchemy.schema.Table.foreign_key_constraints
    "sqlalchemy.schema.Table.foreign_key_constraints")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Table.indexes`](#sqlalchemy.schema.Table.indexes "sqlalchemy.schema.Table.indexes")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Inspector`](reflection.html#sqlalchemy.engine.reflection.Inspector "sqlalchemy.engine.reflection.Inspector")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE217]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Selectable.corresponding_column()`](selectable.html#sqlalchemy.sql.expression.Selectable.corresponding_column
    "sqlalchemy.sql.expression.Selectable.corresponding_column") *method of* [`Selectable`](selectable.html#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
  prefs: []
  type: TYPE_NORMAL
- en: Given a [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"), return the exported [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") object from the [`Selectable.exported_columns`](selectable.html#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") collection of this [`Selectable`](selectable.html#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable") which corresponds to that original [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") via a common ancestor column.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`column` – the target [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") to be matched.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`require_embedded` – only return corresponding columns for the given [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"), if the given [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") is actually present within a sub-element
    of this [`Selectable`](selectable.html#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable").
    Normally the column will match if it merely shares a common ancestor with one
    of the exported columns of this [`Selectable`](selectable.html#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Selectable.exported_columns`](selectable.html#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") - the [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") that is used for the operation.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnCollection.corresponding_column()`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection.corresponding_column
    "sqlalchemy.sql.expression.ColumnCollection.corresponding_column") - implementation
    method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE218]'
  prefs: []
  type: TYPE_PRE
- en: Issue a `CREATE` statement for this [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table"),
    using the given [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    or [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    for connectivity.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`MetaData.create_all()`](#sqlalchemy.schema.MetaData.create_all "sqlalchemy.schema.MetaData.create_all").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE219]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`TableClause.delete()`](selectable.html#sqlalchemy.sql.expression.TableClause.delete
    "sqlalchemy.sql.expression.TableClause.delete") *method of* [`TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause")'
  prefs: []
  type: TYPE_NORMAL
- en: Generate a [`delete()`](dml.html#sqlalchemy.sql.expression.delete "sqlalchemy.sql.expression.delete")
    construct against this [`TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause").
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE220]'
  prefs: []
  type: TYPE_PRE
- en: See [`delete()`](dml.html#sqlalchemy.sql.expression.delete "sqlalchemy.sql.expression.delete")
    for argument and usage information.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE221]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`TableClause.description`](selectable.html#sqlalchemy.sql.expression.TableClause.description
    "sqlalchemy.sql.expression.TableClause.description") *attribute of* [`TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE222]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  prefs: []
  type: TYPE_NORMAL
- en: A collection of keyword arguments specified as dialect-specific options to this
    construct.
  prefs: []
  type: TYPE_NORMAL
- en: The arguments are present here in their original `<dialect>_<kwarg>` format.
    Only arguments that were actually passed are included; unlike the [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") collection, which contains
    all options known by this dialect including defaults.
  prefs: []
  type: TYPE_NORMAL
- en: The collection is also writable; keys are accepted of the form `<dialect>_<kwarg>`
    where the value will be assembled into the list of options.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") - nested dictionary form'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE223]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  prefs: []
  type: TYPE_NORMAL
- en: A collection of keyword arguments specified as dialect-specific options to this
    construct.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a two-level nested registry, keyed to `<dialect_name>` and `<argument_name>`.
    For example, the `postgresql_where` argument would be locatable as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE224]'
  prefs: []
  type: TYPE_PRE
- en: New in version 0.9.2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") - flat dictionary form'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE225]'
  prefs: []
  type: TYPE_PRE
- en: Issue a `DROP` statement for this [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table"),
    using the given [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    or [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    for connectivity.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`MetaData.drop_all()`](#sqlalchemy.schema.MetaData.drop_all "sqlalchemy.schema.MetaData.drop_all").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE226]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`FromClause.entity_namespace`](selectable.html#sqlalchemy.sql.expression.FromClause.entity_namespace
    "sqlalchemy.sql.expression.FromClause.entity_namespace") *attribute of* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a namespace used for name-based access in SQL expressions.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the namespace that is used to resolve “filter_by()” type expressions,
    such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE227]'
  prefs: []
  type: TYPE_PRE
- en: It defaults to the `.c` collection, however internally it can be overridden
    using the “entity_namespace” annotation to deliver alternative results.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE228]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`FromClause.exported_columns`](selectable.html#sqlalchemy.sql.expression.FromClause.exported_columns
    "sqlalchemy.sql.expression.FromClause.exported_columns") *attribute of* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  prefs: []
  type: TYPE_NORMAL
- en: A [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") that represents the “exported” columns
    of this [`Selectable`](selectable.html#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable").
  prefs: []
  type: TYPE_NORMAL
- en: The “exported” columns for a [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") object are synonymous with the [`FromClause.columns`](selectable.html#sqlalchemy.sql.expression.FromClause.columns
    "sqlalchemy.sql.expression.FromClause.columns") collection.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Selectable.exported_columns`](selectable.html#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`SelectBase.exported_columns`](selectable.html#sqlalchemy.sql.expression.SelectBase.exported_columns
    "sqlalchemy.sql.expression.SelectBase.exported_columns")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE229]'
  prefs: []
  type: TYPE_PRE
- en: '[`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") objects referred to by this [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table").'
  prefs: []
  type: TYPE_NORMAL
- en: This list is produced from the collection of [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") objects currently associated.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Table.constraints`](#sqlalchemy.schema.Table.constraints "sqlalchemy.schema.Table.constraints")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Table.foreign_keys`](#sqlalchemy.schema.Table.foreign_keys "sqlalchemy.schema.Table.foreign_keys")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Table.indexes`](#sqlalchemy.schema.Table.indexes "sqlalchemy.schema.Table.indexes")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE230]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`FromClause.foreign_keys`](selectable.html#sqlalchemy.sql.expression.FromClause.foreign_keys
    "sqlalchemy.sql.expression.FromClause.foreign_keys") *attribute of* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  prefs: []
  type: TYPE_NORMAL
- en: Return the collection of [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") marker objects which this FromClause references.
  prefs: []
  type: TYPE_NORMAL
- en: Each [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    is a member of a [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")-wide
    [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Table.foreign_key_constraints`](#sqlalchemy.schema.Table.foreign_key_constraints
    "sqlalchemy.schema.Table.foreign_key_constraints")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE231]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `HasTraverseInternals.get_children()` *method of* `HasTraverseInternals`'
  prefs: []
  type: TYPE_NORMAL
- en: Return immediate child `HasTraverseInternals` elements of this `HasTraverseInternals`.
  prefs: []
  type: TYPE_NORMAL
- en: This is used for visit traversal.
  prefs: []
  type: TYPE_NORMAL
- en: '**kw may contain flags that change the collection that is returned, for example
    to return a subset of items in order to cut down on larger traversals, or to return
    child items from a different context (such as schema-level collections instead
    of clause-level).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE232]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`TableClause.implicit_returning`](selectable.html#sqlalchemy.sql.expression.TableClause.implicit_returning
    "sqlalchemy.sql.expression.TableClause.implicit_returning") *attribute of* [`TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause "sqlalchemy.sql.expression.TableClause")
    doesn’t support having a primary key or column -level defaults, so implicit returning
    doesn’t apply.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE233]'
  prefs: []
  type: TYPE_PRE
- en: A collection of all [`Index`](constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    objects associated with this [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Inspector.get_indexes()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_indexes
    "sqlalchemy.engine.reflection.Inspector.get_indexes")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE234]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`SchemaItem.info`](#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info") *attribute of* [`SchemaItem`](#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem")'
  prefs: []
  type: TYPE_NORMAL
- en: Info dictionary associated with the object, allowing user-defined data to be
    associated with this [`SchemaItem`](#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem").
  prefs: []
  type: TYPE_NORMAL
- en: The dictionary is automatically generated when first accessed. It can also be
    specified in the constructor of some objects, such as [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") and [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE235]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `HasCacheKey.inherit_cache` *attribute of* [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.cache_key.HasCacheKey")'
  prefs: []
  type: TYPE_NORMAL
- en: Indicate if this [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") instance should make use of the cache
    key generation scheme used by its immediate superclass.
  prefs: []
  type: TYPE_NORMAL
- en: The attribute defaults to `None`, which indicates that a construct has not yet
    taken into account whether or not its appropriate for it to participate in caching;
    this is functionally equivalent to setting the value to `False`, except that a
    warning is also emitted.
  prefs: []
  type: TYPE_NORMAL
- en: This flag can be set to `True` on a particular class, if the SQL that corresponds
    to the object does not change based on attributes which are local to this class,
    and not its superclass.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Enabling Caching Support for Custom Constructs](compiler.html#compilerext-caching)
    - General guideslines for setting the [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute for third-party
    or user defined SQL constructs.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE236]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`TableClause.insert()`](selectable.html#sqlalchemy.sql.expression.TableClause.insert
    "sqlalchemy.sql.expression.TableClause.insert") *method of* [`TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause")'
  prefs: []
  type: TYPE_NORMAL
- en: Generate an [`Insert`](dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    construct against this [`TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause").
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE237]'
  prefs: []
  type: TYPE_PRE
- en: See [`insert()`](dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert")
    for argument and usage information.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE238]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`FromClause.is_derived_from()`](selectable.html#sqlalchemy.sql.expression.FromClause.is_derived_from
    "sqlalchemy.sql.expression.FromClause.is_derived_from") *method of* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  prefs: []
  type: TYPE_NORMAL
- en: Return `True` if this [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") is ‘derived’ from the given `FromClause`.
  prefs: []
  type: TYPE_NORMAL
- en: An example would be an Alias of a Table is derived from that Table.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE239]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`FromClause.join()`](selectable.html#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join") *method of* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a [`Join`](selectable.html#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    from this [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") to another `FromClause`.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE240]'
  prefs: []
  type: TYPE_PRE
- en: 'would emit SQL along the lines of:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE241]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`right` – the right side of the join; this is any [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") object such as a [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object, and may also be a selectable-compatible object
    such as an ORM-mapped class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onclause` – a SQL expression representing the ON clause of the join. If left
    at `None`, [`FromClause.join()`](selectable.html#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join") will attempt to join the two tables
    based on a foreign key relationship.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`isouter` – if True, render a LEFT OUTER JOIN, instead of JOIN.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`full` – if True, render a FULL OUTER JOIN, instead of LEFT OUTER JOIN. Implies
    [`FromClause.join.isouter`](selectable.html#sqlalchemy.sql.expression.FromClause.join.params.isouter
    "sqlalchemy.sql.expression.FromClause.join").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`join()`](selectable.html#sqlalchemy.sql.expression.join "sqlalchemy.sql.expression.join")
    - standalone function'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Join`](selectable.html#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    - the type of object produced'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE242]'
  prefs: []
  type: TYPE_PRE
- en: Return the ‘key’ for this [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table").
  prefs: []
  type: TYPE_NORMAL
- en: This value is used as the dictionary key within the [`MetaData.tables`](#sqlalchemy.schema.MetaData.tables
    "sqlalchemy.schema.MetaData.tables") collection. It is typically the same as that
    of `Table.name` for a table with no [`Table.schema`](#sqlalchemy.schema.Table.schema
    "sqlalchemy.schema.Table.schema") set; otherwise it is typically of the form `schemaname.tablename`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE243]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`DialectKWArgs.kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.kwargs
    "sqlalchemy.sql.base.DialectKWArgs.kwargs") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  prefs: []
  type: TYPE_NORMAL
- en: A synonym for [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE244]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Selectable.lateral()`](selectable.html#sqlalchemy.sql.expression.Selectable.lateral
    "sqlalchemy.sql.expression.Selectable.lateral") *method of* [`Selectable`](selectable.html#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a LATERAL alias of this [`Selectable`](selectable.html#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable").
  prefs: []
  type: TYPE_NORMAL
- en: The return value is the [`Lateral`](selectable.html#sqlalchemy.sql.expression.Lateral
    "sqlalchemy.sql.expression.Lateral") construct also provided by the top-level
    [`lateral()`](selectable.html#sqlalchemy.sql.expression.lateral "sqlalchemy.sql.expression.lateral")
    function.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[LATERAL correlation](../tutorial/data_select.html#tutorial-lateral-correlation)
    - overview of usage.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE245]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`FromClause.outerjoin()`](selectable.html#sqlalchemy.sql.expression.FromClause.outerjoin
    "sqlalchemy.sql.expression.FromClause.outerjoin") *method of* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a [`Join`](selectable.html#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    from this [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") to another `FromClause`, with the “isouter”
    flag set to True.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE246]'
  prefs: []
  type: TYPE_PRE
- en: 'The above is equivalent to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE247]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`right` – the right side of the join; this is any [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") object such as a [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object, and may also be a selectable-compatible object
    such as an ORM-mapped class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onclause` – a SQL expression representing the ON clause of the join. If left
    at `None`, [`FromClause.join()`](selectable.html#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join") will attempt to join the two tables
    based on a foreign key relationship.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`full` – if True, render a FULL OUTER JOIN, instead of LEFT OUTER JOIN.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`FromClause.join()`](selectable.html#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Join`](selectable.html#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE248]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `Immutable.params()` *method of* `Immutable`'
  prefs: []
  type: TYPE_NORMAL
- en: Return a copy with [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") elements replaced.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns a copy of this ClauseElement with [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") elements replaced with values taken from
    the given dictionary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE249]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE250]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`FromClause.primary_key`](selectable.html#sqlalchemy.sql.expression.FromClause.primary_key
    "sqlalchemy.sql.expression.FromClause.primary_key") *attribute of* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  prefs: []
  type: TYPE_NORMAL
- en: Return the iterable collection of [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    objects which comprise the primary key of this `_selectable.FromClause`.
  prefs: []
  type: TYPE_NORMAL
- en: For a [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") object,
    this collection is represented by the [`PrimaryKeyConstraint`](constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") which itself is an iterable collection
    of [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column") objects.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE251]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Selectable.replace_selectable()`](selectable.html#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") *method of* [`Selectable`](selectable.html#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
  prefs: []
  type: TYPE_NORMAL
- en: Replace all occurrences of [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") ‘old’ with the given [`Alias`](selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") object, returning a copy of this [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.4: The [`Selectable.replace_selectable()`](selectable.html#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") method is deprecated,
    and will be removed in a future release. Similar functionality is available via
    the sqlalchemy.sql.visitors module.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE252]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`FromClause.schema`](selectable.html#sqlalchemy.sql.expression.FromClause.schema
    "sqlalchemy.sql.expression.FromClause.schema") *attribute of* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  prefs: []
  type: TYPE_NORMAL
- en: Define the ‘schema’ attribute for this [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: This is typically `None` for most objects except that of [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), where it is taken as the value of the [`Table.schema`](#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table") argument.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE253]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`FromClause.select()`](selectable.html#sqlalchemy.sql.expression.FromClause.select
    "sqlalchemy.sql.expression.FromClause.select") *method of* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a SELECT of this [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE254]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`select()`](selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    - general purpose method which allows for arbitrary column lists.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE255]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ClauseElement.self_group()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.self_group
    "sqlalchemy.sql.expression.ClauseElement.self_group") *method of* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
  prefs: []
  type: TYPE_NORMAL
- en: Apply a ‘grouping’ to this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  prefs: []
  type: TYPE_NORMAL
- en: This method is overridden by subclasses to return a “grouping” construct, i.e.
    parenthesis. In particular it’s used by “binary” expressions to provide a grouping
    around themselves when placed into a larger expression, as well as by [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs when placed into the FROM clause
    of another [`select()`](selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select").
    (Note that subqueries should be normally created using the [`Select.alias()`](selectable.html#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") method, as many platforms require nested
    SELECT statements to be named).
  prefs: []
  type: TYPE_NORMAL
- en: As expressions are composed together, the application of [`self_group()`](#sqlalchemy.schema.Table.self_group
    "sqlalchemy.schema.Table.self_group") is automatic - end-user code should never
    need to use this method directly. Note that SQLAlchemy’s clause constructs take
    operator precedence into account - so parenthesis might not be needed, for example,
    in an expression like `x OR (y AND z)` - AND takes precedence over OR.
  prefs: []
  type: TYPE_NORMAL
- en: The base [`self_group()`](#sqlalchemy.schema.Table.self_group "sqlalchemy.schema.Table.self_group")
    method of [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") just returns self.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE256]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `NamedFromClause.table_valued()` *method of* `NamedFromClause`'
  prefs: []
  type: TYPE_NORMAL
- en: Return a `TableValuedColumn` object for this [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: A `TableValuedColumn` is a [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") that represents a complete row in a
    table. Support for this construct is backend dependent, and is supported in various
    forms by backends such as PostgreSQL, Oracle and SQL Server.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE257]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.4.0b2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Working with SQL Functions](../tutorial/data_select.html#tutorial-functions)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE258]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`FromClause.tablesample()`](selectable.html#sqlalchemy.sql.expression.FromClause.tablesample
    "sqlalchemy.sql.expression.FromClause.tablesample") *method of* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a TABLESAMPLE alias of this [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: The return value is the [`TableSample`](selectable.html#sqlalchemy.sql.expression.TableSample
    "sqlalchemy.sql.expression.TableSample") construct also provided by the top-level
    [`tablesample()`](selectable.html#sqlalchemy.sql.expression.tablesample "sqlalchemy.sql.expression.tablesample")
    function.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`tablesample()`](selectable.html#sqlalchemy.sql.expression.tablesample "sqlalchemy.sql.expression.tablesample")
    - usage guidelines and parameters'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE259]'
  prefs: []
  type: TYPE_PRE
- en: Return a copy of this [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    associated with a different [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData").
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE260]'
  prefs: []
  type: TYPE_PRE
- en: 'Changed in version 1.4: The [`Table.to_metadata()`](#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata") function was renamed from [`Table.tometadata()`](#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata").'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`metadata` – Target [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    object, into which the new [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object will be created.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`schema` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'optional string name indicating the target schema. Defaults to the special
    symbol [`RETAIN_SCHEMA`](#sqlalchemy.schema.SchemaConst.RETAIN_SCHEMA "sqlalchemy.schema.SchemaConst.RETAIN_SCHEMA")
    which indicates that no change to the schema name should be made in the new [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"). If set to a string name, the new [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") will have this new name as the `.schema`. If set to
    `None`, the schema will be set to that of the schema set on the target [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData"), which is typically `None` as well, unless set explicitly:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE261]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`referred_schema_fn` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: optional callable which can be supplied in order to provide for the schema name
    that should be assigned to the referenced table of a [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint"). The callable accepts this parent [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), the target schema that we are changing to, the [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") object, and the existing “target schema”
    of that constraint. The function should return the string schema name that should
    be applied. To reset the schema to “none”, return the symbol `BLANK_SCHEMA`. To
    effect no change, return `None` or `RETAIN_SCHEMA`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Changed in version 1.4.33: The `referred_schema_fn` function may return the
    `BLANK_SCHEMA` or `RETAIN_SCHEMA` symbols.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE262]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`name` – optional string name indicating the target table name. If not specified
    or None, the table name is retained. This allows a [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") to be copied to the same [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") target with a new name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE263]'
  prefs: []
  type: TYPE_PRE
- en: Return a copy of this [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    associated with a different [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData").
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.4: [`Table.tometadata()`](#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata") is renamed to [`Table.to_metadata()`](#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata")'
  prefs: []
  type: TYPE_NORMAL
- en: See [`Table.to_metadata()`](#sqlalchemy.schema.Table.to_metadata "sqlalchemy.schema.Table.to_metadata")
    for a full description.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE264]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `Immutable.unique_params()` *method of* `Immutable`'
  prefs: []
  type: TYPE_NORMAL
- en: Return a copy with [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") elements replaced.
  prefs: []
  type: TYPE_NORMAL
- en: Same functionality as [`ClauseElement.params()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.params
    "sqlalchemy.sql.expression.ClauseElement.params"), except adds unique=True to
    affected bind parameters so that multiple statements can be used.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE265]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`TableClause.update()`](selectable.html#sqlalchemy.sql.expression.TableClause.update
    "sqlalchemy.sql.expression.TableClause.update") *method of* [`TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause")'
  prefs: []
  type: TYPE_NORMAL
- en: Generate an [`update()`](dml.html#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update")
    construct against this [`TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause").
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE266]'
  prefs: []
  type: TYPE_PRE
- en: See [`update()`](dml.html#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update")
    for argument and usage information.
  prefs: []
  type: TYPE_NORMAL
- en: '## Accessing Tables and Columns'
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    object contains all of the schema constructs we’ve associated with it. It supports
    a few methods of accessing these table objects, such as the `sorted_tables` accessor
    which returns a list of each [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object in order of foreign key dependency (that is, each table is preceded by
    all tables which it references):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE267]'
  prefs: []
  type: TYPE_PRE
- en: 'In most cases, individual [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects have been explicitly declared, and these objects are typically accessed
    directly as module-level variables in an application. Once a [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") has been defined, it has a full set of accessors which
    allow inspection of its properties. Given the following [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE268]'
  prefs: []
  type: TYPE_PRE
- en: 'Note the [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    object used in this table - this construct defines a reference to a remote table,
    and is fully described in [Defining Foreign Keys](constraints.html#metadata-foreignkeys).
    Methods of accessing information about this table include:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE269]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: The [`FromClause.c`](selectable.html#sqlalchemy.sql.expression.FromClause.c
    "sqlalchemy.sql.expression.FromClause.c") collection, synonymous with the [`FromClause.columns`](selectable.html#sqlalchemy.sql.expression.FromClause.columns
    "sqlalchemy.sql.expression.FromClause.columns") collection, is an instance of
    [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection"), which provides a **dictionary-like
    interface** to the collection of columns. Names are ordinarily accessed like attribute
    names, e.g. `employees.c.employee_name`. However for special names with spaces
    or those that match the names of dictionary methods such as [`ColumnCollection.keys()`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection.keys
    "sqlalchemy.sql.expression.ColumnCollection.keys") or [`ColumnCollection.values()`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection.values
    "sqlalchemy.sql.expression.ColumnCollection.values"), indexed access must be used,
    such as `employees.c['values']` or `employees.c["some column"]`. See [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") for further information.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and Dropping Database Tables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once you’ve defined some [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects, assuming you’re working with a brand new database one thing you might
    want to do is issue CREATE statements for those tables and their related constructs
    (as an aside, it’s also quite possible that you *don’t* want to do this, if you
    already have some preferred methodology such as tools included with your database
    or an existing scripting system - if that’s the case, feel free to skip this section
    - SQLAlchemy has no requirement that it be used to create your tables).
  prefs: []
  type: TYPE_NORMAL
- en: 'The usual way to issue CREATE is to use [`create_all()`](#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") on the [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object. This method will issue queries that first
    check for the existence of each individual table, and if not found will issue
    the CREATE statements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE270]'
  prefs: []
  type: TYPE_PRE
- en: '[`create_all()`](#sqlalchemy.schema.MetaData.create_all "sqlalchemy.schema.MetaData.create_all")
    creates foreign key constraints between tables usually inline with the table definition
    itself, and for this reason it also generates the tables in order of their dependency.
    There are options to change this behavior such that `ALTER TABLE` is used instead.'
  prefs: []
  type: TYPE_NORMAL
- en: Dropping all tables is similarly achieved using the [`drop_all()`](#sqlalchemy.schema.MetaData.drop_all
    "sqlalchemy.schema.MetaData.drop_all") method. This method does the exact opposite
    of [`create_all()`](#sqlalchemy.schema.MetaData.create_all "sqlalchemy.schema.MetaData.create_all")
    - the presence of each table is checked first, and tables are dropped in reverse
    order of dependency.
  prefs: []
  type: TYPE_NORMAL
- en: 'Creating and dropping individual tables can be done via the `create()` and
    `drop()` methods of [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table").
    These methods by default issue the CREATE or DROP regardless of the table being
    present:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE271]'
  prefs: []
  type: TYPE_PRE
- en: '`drop()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE272]'
  prefs: []
  type: TYPE_PRE
- en: 'To enable the “check first for the table existing” logic, add the `checkfirst=True`
    argument to `create()` or `drop()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE273]'
  prefs: []
  type: TYPE_PRE
- en: '## Altering Database Objects through Migrations'
  prefs: []
  type: TYPE_NORMAL
- en: While SQLAlchemy directly supports emitting CREATE and DROP statements for schema
    constructs, the ability to alter those constructs, usually via the ALTER statement
    as well as other database-specific constructs, is outside of the scope of SQLAlchemy
    itself. While it’s easy enough to emit ALTER statements and similar by hand, such
    as by passing a [`text()`](sqlelement.html#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")
    construct to [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") or by using the [`DDL`](ddl.html#sqlalchemy.schema.DDL
    "sqlalchemy.schema.DDL") construct, it’s a common practice to automate the maintenance
    of database schemas in relation to application code using schema migration tools.
  prefs: []
  type: TYPE_NORMAL
- en: The SQLAlchemy project offers the [Alembic](https://alembic.sqlalchemy.org)
    migration tool for this purpose. Alembic features a highly customizable environment
    and a minimalistic usage pattern, supporting such features as transactional DDL,
    automatic generation of “candidate” migrations, an “offline” mode which generates
    SQL scripts, and support for branch resolution.
  prefs: []
  type: TYPE_NORMAL
- en: Alembic supersedes the [SQLAlchemy-Migrate](https://github.com/openstack/sqlalchemy-migrate)
    project, which is the original migration tool for SQLAlchemy and is now considered
    legacy.
  prefs: []
  type: TYPE_NORMAL
- en: '## Specifying the Schema Name'
  prefs: []
  type: TYPE_NORMAL
- en: Most databases support the concept of multiple “schemas” - namespaces that refer
    to alternate sets of tables and other constructs. The server-side geometry of
    a “schema” takes many forms, including names of “schemas” under the scope of a
    particular database (e.g. PostgreSQL schemas), named sibling databases (e.g. MySQL
    / MariaDB access to other databases on the same server), as well as other concepts
    like tables owned by other usernames (Oracle, SQL Server) or even names that refer
    to alternate database files (SQLite ATTACH) or remote servers (Oracle DBLINK with
    synonyms).
  prefs: []
  type: TYPE_NORMAL
- en: What all of the above approaches have (mostly) in common is that there’s a way
    of referencing this alternate set of tables using a string name. SQLAlchemy refers
    to this name as the **schema name**. Within SQLAlchemy, this is nothing more than
    a string name which is associated with a [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object, and is then rendered into SQL statements in a manner appropriate to the
    target database such that the table is referenced in its remote “schema”, whatever
    mechanism that is on the target database.
  prefs: []
  type: TYPE_NORMAL
- en: The “schema” name may be associated directly with a [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") using the [`Table.schema`](#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table") argument; when using the ORM with [declarative table](../orm/declarative_tables.html)
    configuration, the parameter is passed using the `__table_args__` parameter dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: The “schema” name may also be associated with the [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object where it will take effect automatically for
    all [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") objects associated
    with that [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    that don’t otherwise specify their own name. Finally, SQLAlchemy also supports
    a “dynamic” schema name system that is often used for multi-tenant applications
    such that a single set of [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    metadata may refer to a dynamically configured set of schema names on a per-connection
    or per-statement basis.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Explicit Schema Name with Declarative Table](../orm/declarative_tables.html#orm-declarative-table-schema-name)
    - schema name specification when using the ORM [declarative table](../orm/declarative_tables.html)
    configuration'
  prefs: []
  type: TYPE_NORMAL
- en: 'The most basic example is that of the [`Table.schema`](#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table") argument using a Core [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE274]'
  prefs: []
  type: TYPE_PRE
- en: 'SQL that is rendered using this [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table"),
    such as the SELECT statement below, will explicitly qualify the table name `financial_info`
    with the `remote_banks` schema name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE275]'
  prefs: []
  type: TYPE_PRE
- en: 'When a [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") object
    is declared with an explicit schema name, it is stored in the internal [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") namespace using the combination of the schema and
    table name. We can view this in the [`MetaData.tables`](#sqlalchemy.schema.MetaData.tables
    "sqlalchemy.schema.MetaData.tables") collection by searching for the key `''remote_banks.financial_info''`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE276]'
  prefs: []
  type: TYPE_PRE
- en: 'This dotted name is also what must be used when referring to the table for
    use with the [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    or [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") objects, even if the referring table
    is also in that same schema:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE277]'
  prefs: []
  type: TYPE_PRE
- en: 'The [`Table.schema`](#sqlalchemy.schema.Table.params.schema "sqlalchemy.schema.Table")
    argument may also be used with certain dialects to indicate a multiple-token (e.g.
    dotted) path to a particular table. This is particularly important on a database
    such as Microsoft SQL Server where there are often dotted “database/owner” tokens.
    The tokens may be placed directly in the name at once, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE278]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Multipart Schema Names](../dialects/mssql.html#multipart-schema-names) - describes
    use of dotted schema names with the SQL Server dialect.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Reflecting Tables from Other Schemas](reflection.html#metadata-reflection-schemas)'
  prefs: []
  type: TYPE_NORMAL
- en: '### Specifying a Default Schema Name with MetaData'
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    object may also set up an explicit default option for all [`Table.schema`](#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table") parameters by passing the [`MetaData.schema`](#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData") argument to the top level [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") construct:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE279]'
  prefs: []
  type: TYPE_PRE
- en: 'Above, for any [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object (or [`Sequence`](defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    object directly associated with the [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData"))
    which leaves the [`Table.schema`](#sqlalchemy.schema.Table.params.schema "sqlalchemy.schema.Table")
    parameter at its default of `None` will instead act as though the parameter were
    set to the value `"remote_banks"`. This includes that the [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") is cataloged in the [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") using the schema-qualified name, that is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE280]'
  prefs: []
  type: TYPE_PRE
- en: 'When using the [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") or [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") objects to refer to this table, either
    the schema-qualified name or the non-schema-qualified name may be used to refer
    to the `remote_banks.financial_info` table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE281]'
  prefs: []
  type: TYPE_PRE
- en: 'When using a [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    object that sets [`MetaData.schema`](#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData"), a [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    that wishes to specify that it should not be schema qualified may use the special
    symbol `BLANK_SCHEMA`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE282]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`MetaData.schema`](#sqlalchemy.schema.MetaData.params.schema "sqlalchemy.schema.MetaData")  ###
    Applying Dynamic Schema Naming Conventions'
  prefs: []
  type: TYPE_NORMAL
- en: The names used by the [`Table.schema`](#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table") parameter may also be applied against a lookup that
    is dynamic on a per-connection or per-execution basis, so that for example in
    multi-tenant situations, each transaction or statement may be targeted at a specific
    set of schema names that change. The section [Translation of Schema Names](connections.html#schema-translating)
    describes how this feature is used.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Translation of Schema Names](connections.html#schema-translating)  ### Setting
    a Default Schema for New Connections'
  prefs: []
  type: TYPE_NORMAL
- en: The above approaches all refer to methods of including an explicit schema-name
    within SQL statements. Database connections in fact feature the concept of a “default”
    schema, which is the name of the “schema” (or database, owner, etc.) that takes
    place if a table name is not explicitly schema-qualified. These names are usually
    configured at the login level, such as when connecting to a PostgreSQL database,
    the default “schema” is called “public”.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are often cases where the default “schema” cannot be set via the login
    itself and instead would usefully be configured each time a connection is made,
    using a statement such as “SET SEARCH_PATH” on PostgreSQL or “ALTER SESSION” on
    Oracle. These approaches may be achieved by using the `PoolEvents.connect()` event,
    which allows access to the DBAPI connection when it is first created. For example,
    to set the Oracle CURRENT_SCHEMA variable to an alternate name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE283]'
  prefs: []
  type: TYPE_PRE
- en: Above, the `set_current_schema()` event handler will take place immediately
    when the above [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    first connects; as the event is “inserted” into the beginning of the handler list,
    it will also take place before the dialect’s own event handlers are run, in particular
    including the one that will determine the “default schema” for the connection.
  prefs: []
  type: TYPE_NORMAL
- en: For other databases, consult the database and/or dialect documentation for specific
    information regarding how default schemas are configured.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4.0b2: The above recipe now works without the need to
    establish additional event handlers.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Setting Alternate Search Paths on Connect](../dialects/postgresql.html#postgresql-alternate-search-path)
    - in the [PostgreSQL](../dialects/postgresql.html) dialect documentation.'
  prefs: []
  type: TYPE_NORMAL
- en: Schemas and Reflection
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The schema feature of SQLAlchemy interacts with the table reflection feature
    introduced at [Reflecting Database Objects](reflection.html). See the section
    [Reflecting Tables from Other Schemas](reflection.html#metadata-reflection-schemas)
    for additional details on how this works.
  prefs: []
  type: TYPE_NORMAL
- en: '### Specifying a Default Schema Name with MetaData'
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    object may also set up an explicit default option for all [`Table.schema`](#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table") parameters by passing the [`MetaData.schema`](#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData") argument to the top level [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") construct:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE284]'
  prefs: []
  type: TYPE_PRE
- en: 'Above, for any [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object (or [`Sequence`](defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    object directly associated with the [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData"))
    which leaves the [`Table.schema`](#sqlalchemy.schema.Table.params.schema "sqlalchemy.schema.Table")
    parameter at its default of `None` will instead act as though the parameter were
    set to the value `"remote_banks"`. This includes that the [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") is cataloged in the [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") using the schema-qualified name, that is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE285]'
  prefs: []
  type: TYPE_PRE
- en: 'When using the [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") or [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") objects to refer to this table, either
    the schema-qualified name or the non-schema-qualified name may be used to refer
    to the `remote_banks.financial_info` table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE286]'
  prefs: []
  type: TYPE_PRE
- en: 'When using a [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    object that sets [`MetaData.schema`](#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData"), a [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    that wishes to specify that it should not be schema qualified may use the special
    symbol `BLANK_SCHEMA`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE287]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`MetaData.schema`](#sqlalchemy.schema.MetaData.params.schema "sqlalchemy.schema.MetaData")'
  prefs: []
  type: TYPE_NORMAL
- en: '### Applying Dynamic Schema Naming Conventions'
  prefs: []
  type: TYPE_NORMAL
- en: The names used by the [`Table.schema`](#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table") parameter may also be applied against a lookup that
    is dynamic on a per-connection or per-execution basis, so that for example in
    multi-tenant situations, each transaction or statement may be targeted at a specific
    set of schema names that change. The section [Translation of Schema Names](connections.html#schema-translating)
    describes how this feature is used.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Translation of Schema Names](connections.html#schema-translating)'
  prefs: []
  type: TYPE_NORMAL
- en: '### Setting a Default Schema for New Connections'
  prefs: []
  type: TYPE_NORMAL
- en: The above approaches all refer to methods of including an explicit schema-name
    within SQL statements. Database connections in fact feature the concept of a “default”
    schema, which is the name of the “schema” (or database, owner, etc.) that takes
    place if a table name is not explicitly schema-qualified. These names are usually
    configured at the login level, such as when connecting to a PostgreSQL database,
    the default “schema” is called “public”.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are often cases where the default “schema” cannot be set via the login
    itself and instead would usefully be configured each time a connection is made,
    using a statement such as “SET SEARCH_PATH” on PostgreSQL or “ALTER SESSION” on
    Oracle. These approaches may be achieved by using the `PoolEvents.connect()` event,
    which allows access to the DBAPI connection when it is first created. For example,
    to set the Oracle CURRENT_SCHEMA variable to an alternate name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE288]'
  prefs: []
  type: TYPE_PRE
- en: Above, the `set_current_schema()` event handler will take place immediately
    when the above [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    first connects; as the event is “inserted” into the beginning of the handler list,
    it will also take place before the dialect’s own event handlers are run, in particular
    including the one that will determine the “default schema” for the connection.
  prefs: []
  type: TYPE_NORMAL
- en: For other databases, consult the database and/or dialect documentation for specific
    information regarding how default schemas are configured.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4.0b2: The above recipe now works without the need to
    establish additional event handlers.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Setting Alternate Search Paths on Connect](../dialects/postgresql.html#postgresql-alternate-search-path)
    - in the [PostgreSQL](../dialects/postgresql.html) dialect documentation.'
  prefs: []
  type: TYPE_NORMAL
- en: Schemas and Reflection
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The schema feature of SQLAlchemy interacts with the table reflection feature
    introduced at [Reflecting Database Objects](reflection.html). See the section
    [Reflecting Tables from Other Schemas](reflection.html#metadata-reflection-schemas)
    for additional details on how this works.
  prefs: []
  type: TYPE_NORMAL
- en: Backend-Specific Options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") supports database-specific
    options. For example, MySQL has different table backend types, including “MyISAM”
    and “InnoDB”. This can be expressed with [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    using `mysql_engine`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE289]'
  prefs: []
  type: TYPE_PRE
- en: Other backends may support table-level options as well - these would be described
    in the individual documentation sections for each dialect.
  prefs: []
  type: TYPE_NORMAL
- en: Column, Table, MetaData API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [Column](#sqlalchemy.schema.Column) | Represents a column in a database table.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [insert_sentinel](#sqlalchemy.schema.insert_sentinel)([name, type_], *, [default,
    omit_from_statements]) | Provides a surrogate [`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") that will act as a dedicated insert [sentinel](../glossary.html#term-sentinel)
    column, allowing efficient bulk inserts with deterministic RETURNING sorting for
    tables that don’t otherwise have qualifying primary key configurations. |'
  prefs: []
  type: TYPE_TB
- en: '| [MetaData](#sqlalchemy.schema.MetaData) | A collection of [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects and their associated schema constructs. |'
  prefs: []
  type: TYPE_TB
- en: '| [SchemaConst](#sqlalchemy.schema.SchemaConst) | An enumeration. |'
  prefs: []
  type: TYPE_TB
- en: '| [SchemaItem](#sqlalchemy.schema.SchemaItem) | Base class for items that define
    a database schema. |'
  prefs: []
  type: TYPE_TB
- en: '| [Table](#sqlalchemy.schema.Table) | Represent a table in a database. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE290]'
  prefs: []
  type: TYPE_PRE
- en: Refers to [`SchemaConst.BLANK_SCHEMA`](#sqlalchemy.schema.SchemaConst.BLANK_SCHEMA
    "sqlalchemy.schema.SchemaConst.BLANK_SCHEMA").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE291]'
  prefs: []
  type: TYPE_PRE
- en: Refers to [`SchemaConst.RETAIN_SCHEMA`](#sqlalchemy.schema.SchemaConst.RETAIN_SCHEMA
    "sqlalchemy.schema.SchemaConst.RETAIN_SCHEMA")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE292]'
  prefs: []
  type: TYPE_PRE
- en: Represents a column in a database table.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[__eq__()](#sqlalchemy.schema.Column.__eq__), [__init__()](#sqlalchemy.schema.Column.__init__),
    [__le__()](#sqlalchemy.schema.Column.__le__), [__lt__()](#sqlalchemy.schema.Column.__lt__),
    [__ne__()](#sqlalchemy.schema.Column.__ne__), [all_()](#sqlalchemy.schema.Column.all_),
    [anon_key_label](#sqlalchemy.schema.Column.anon_key_label), [anon_label](#sqlalchemy.schema.Column.anon_label),
    [any_()](#sqlalchemy.schema.Column.any_), [argument_for()](#sqlalchemy.schema.Column.argument_for),
    [asc()](#sqlalchemy.schema.Column.asc), [between()](#sqlalchemy.schema.Column.between),
    [bitwise_and()](#sqlalchemy.schema.Column.bitwise_and), [bitwise_lshift()](#sqlalchemy.schema.Column.bitwise_lshift),
    [bitwise_not()](#sqlalchemy.schema.Column.bitwise_not), [bitwise_or()](#sqlalchemy.schema.Column.bitwise_or),
    [bitwise_rshift()](#sqlalchemy.schema.Column.bitwise_rshift), [bitwise_xor()](#sqlalchemy.schema.Column.bitwise_xor),
    [bool_op()](#sqlalchemy.schema.Column.bool_op), [cast()](#sqlalchemy.schema.Column.cast),
    [collate()](#sqlalchemy.schema.Column.collate), [compare()](#sqlalchemy.schema.Column.compare),
    [compile()](#sqlalchemy.schema.Column.compile), [concat()](#sqlalchemy.schema.Column.concat),
    [contains()](#sqlalchemy.schema.Column.contains), [copy()](#sqlalchemy.schema.Column.copy),
    [desc()](#sqlalchemy.schema.Column.desc), [dialect_kwargs](#sqlalchemy.schema.Column.dialect_kwargs),
    [dialect_options](#sqlalchemy.schema.Column.dialect_options), [distinct()](#sqlalchemy.schema.Column.distinct),
    [endswith()](#sqlalchemy.schema.Column.endswith), [expression](#sqlalchemy.schema.Column.expression),
    [foreign_keys](#sqlalchemy.schema.Column.foreign_keys), [get_children()](#sqlalchemy.schema.Column.get_children),
    [icontains()](#sqlalchemy.schema.Column.icontains), [iendswith()](#sqlalchemy.schema.Column.iendswith),
    [ilike()](#sqlalchemy.schema.Column.ilike), [in_()](#sqlalchemy.schema.Column.in_),
    [index](#sqlalchemy.schema.Column.index), [info](#sqlalchemy.schema.Column.info),
    [inherit_cache](#sqlalchemy.schema.Column.inherit_cache), [is_()](#sqlalchemy.schema.Column.is_),
    [is_distinct_from()](#sqlalchemy.schema.Column.is_distinct_from), [is_not()](#sqlalchemy.schema.Column.is_not),
    [is_not_distinct_from()](#sqlalchemy.schema.Column.is_not_distinct_from), [isnot()](#sqlalchemy.schema.Column.isnot),
    [isnot_distinct_from()](#sqlalchemy.schema.Column.isnot_distinct_from), [istartswith()](#sqlalchemy.schema.Column.istartswith),
    [key](#sqlalchemy.schema.Column.key), [kwargs](#sqlalchemy.schema.Column.kwargs),
    [label()](#sqlalchemy.schema.Column.label), [like()](#sqlalchemy.schema.Column.like),
    [match()](#sqlalchemy.schema.Column.match), [not_ilike()](#sqlalchemy.schema.Column.not_ilike),
    [not_in()](#sqlalchemy.schema.Column.not_in), [not_like()](#sqlalchemy.schema.Column.not_like),
    [notilike()](#sqlalchemy.schema.Column.notilike), [notin_()](#sqlalchemy.schema.Column.notin_),
    [notlike()](#sqlalchemy.schema.Column.notlike), [nulls_first()](#sqlalchemy.schema.Column.nulls_first),
    [nulls_last()](#sqlalchemy.schema.Column.nulls_last), [nullsfirst()](#sqlalchemy.schema.Column.nullsfirst),
    [nullslast()](#sqlalchemy.schema.Column.nullslast), [op()](#sqlalchemy.schema.Column.op),
    [operate()](#sqlalchemy.schema.Column.operate), [params()](#sqlalchemy.schema.Column.params),
    [proxy_set](#sqlalchemy.schema.Column.proxy_set), [references()](#sqlalchemy.schema.Column.references),
    [regexp_match()](#sqlalchemy.schema.Column.regexp_match), [regexp_replace()](#sqlalchemy.schema.Column.regexp_replace),
    [reverse_operate()](#sqlalchemy.schema.Column.reverse_operate), [self_group()](#sqlalchemy.schema.Column.self_group),
    [shares_lineage()](#sqlalchemy.schema.Column.shares_lineage), [startswith()](#sqlalchemy.schema.Column.startswith),
    [timetuple](#sqlalchemy.schema.Column.timetuple), [unique](#sqlalchemy.schema.Column.unique),
    [unique_params()](#sqlalchemy.schema.Column.unique_params)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.schema.Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    ([`sqlalchemy.sql.base.DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs"), [`sqlalchemy.schema.SchemaItem`](#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem"), [`sqlalchemy.sql.expression.ColumnClause`](sqlelement.html#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE293]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__eq__` *method
    of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `==` operator.
  prefs: []
  type: TYPE_NORMAL
- en: In a column context, produces the clause `a = b`. If the target is `None`, produces
    `a IS NULL`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE294]'
  prefs: []
  type: TYPE_PRE
- en: Construct a new `Column` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The name of this column as represented in the database. This argument may be
    the first positional argument, or specified via keyword.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Names which contain no upper case characters will be treated as case insensitive
    names, and will not be quoted unless they are a reserved word. Names with any
    number of upper case characters will be quoted and sent exactly. Note that this
    behavior applies even for databases which standardize upper case names as case
    insensitive such as Oracle.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The name field may be omitted at construction time and applied later, at any
    time before the Column is associated with a [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"). This is to support convenient usage within the [`declarative`](../orm/extensions/declarative/api.html#module-sqlalchemy.ext.declarative
    "sqlalchemy.ext.declarative") extension.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`type_` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The column’s type, indicated using an instance which subclasses [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"). If no arguments are required for the type, the
    class of the type can be sent as well, e.g.:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE295]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `type` argument may be the second positional argument or specified by keyword.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If the `type` is `None` or is omitted, it will first default to the special
    type [`NullType`](type_api.html#sqlalchemy.types.NullType "sqlalchemy.types.NullType").
    If and when this [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    is made to refer to another column using [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") and/or [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint"), the type of the remote-referenced column
    will be copied to this column as well, at the moment that the foreign key is resolved
    against that remote [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    object.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`*args` – Additional positional arguments include various [`SchemaItem`](#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem") derived constructs which will be applied as options
    to the column. These include instances of [`Constraint`](constraints.html#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint"), [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey"), [`ColumnDefault`](defaults.html#sqlalchemy.schema.ColumnDefault
    "sqlalchemy.schema.ColumnDefault"), [`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence"), [`Computed`](defaults.html#sqlalchemy.schema.Computed
    "sqlalchemy.schema.Computed") [`Identity`](defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity"). In some cases an equivalent keyword argument is
    available such as `server_default`, `default` and `unique`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autoincrement` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set up “auto increment” semantics for an **integer primary key column with no
    foreign key dependencies** (see later in this docstring for a more specific definition).
    This may influence the [DDL](../glossary.html#term-DDL) that will be emitted for
    this column during a table create, as well as how the column will be considered
    when INSERT statements are compiled and executed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The default value is the string `"auto"`, which indicates that a single-column
    (i.e. non-composite) primary key that is of an INTEGER type with no other client-side
    or server-side default constructs indicated should receive auto increment semantics
    automatically. Other values include `True` (force this column to have auto-increment
    semantics for a [composite primary key](../glossary.html#term-composite-primary-key)
    as well), `False` (this column should never have auto-increment semantics), and
    the string `"ignore_fk"` (special-case for foreign key columns, see below).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The term “auto increment semantics” refers both to the kind of DDL that will
    be emitted for the column within a CREATE TABLE statement, when methods such as
    [`MetaData.create_all()`](#sqlalchemy.schema.MetaData.create_all "sqlalchemy.schema.MetaData.create_all")
    and [`Table.create()`](#sqlalchemy.schema.Table.create "sqlalchemy.schema.Table.create")
    are invoked, as well as how the column will be considered when an INSERT statement
    is compiled and emitted to the database:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`DDL rendering` (i.e. [`MetaData.create_all()`](#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all"), [`Table.create()`](#sqlalchemy.schema.Table.create
    "sqlalchemy.schema.Table.create")): When used on a [`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") that has no other default-generating construct associated
    with it (such as a [`Sequence`](defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    or [`Identity`](defaults.html#sqlalchemy.schema.Identity "sqlalchemy.schema.Identity")
    construct), the parameter will imply that database-specific keywords such as PostgreSQL
    `SERIAL`, MySQL `AUTO_INCREMENT`, or `IDENTITY` on SQL Server should also be rendered.
    Not every database backend has an “implied” default generator available; for example
    the Oracle backend always needs an explicit construct such as [`Identity`](defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity") to be included with a [`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") in order for the DDL rendered to include auto-generating
    constructs to also be produced in the database.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`INSERT semantics` (i.e. when a [`insert()`](dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert") construct is compiled into a SQL string and
    is then executed on a database using [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") or equivalent): A single-row INSERT statement
    will be known to produce a new integer primary key value automatically for this
    column, which will be accessible after the statement is invoked via the [`CursorResult.inserted_primary_key`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key") attribute upon the [`Result`](connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object. This also applies towards use of the ORM when
    ORM-mapped objects are persisted to the database, indicating that a new integer
    primary key will be available to become part of the [identity key](../glossary.html#term-identity-key)
    for that object. This behavior takes place regardless of what DDL constructs are
    associated with the [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    and is independent of the “DDL Rendering” behavior discussed in the previous note
    above.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The parameter may be set to `True` to indicate that a column which is part of
    a composite (i.e. multi-column) primary key should have autoincrement semantics,
    though note that only one column within a primary key may have this setting. It
    can also be set to `True` to indicate autoincrement semantics on a column that
    has a client-side or server-side default configured, however note that not all
    dialects can accommodate all styles of default as an “autoincrement”. It can also
    be set to `False` on a single-column primary key that has a datatype of INTEGER
    in order to disable auto increment semantics for that column.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The setting *only* has an effect for columns which are:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Integer derived (i.e. INT, SMALLINT, BIGINT).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Part of the primary key
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Not referring to another column via [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey"), unless the value is specified as `''ignore_fk''`:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE296]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: It is typically not desirable to have “autoincrement” enabled on a column that
    refers to another via foreign key, as such a column is required to refer to a
    value that originates from elsewhere.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The setting has these effects on columns that meet the above criteria:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'DDL issued for the column, if the column does not already include a default
    generating construct supported by the backend such as [`Identity`](defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity"), will include database-specific keywords intended
    to signify this column as an “autoincrement” column for specific backends. Behavior
    for primary SQLAlchemy dialects includes:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: AUTO INCREMENT on MySQL and MariaDB
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: SERIAL on PostgreSQL
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: IDENTITY on MS-SQL - this occurs even without the [`Identity`](defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity") construct as the [`Column.autoincrement`](#sqlalchemy.schema.Column.params.autoincrement
    "sqlalchemy.schema.Column") parameter pre-dates this construct.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: SQLite - SQLite integer primary key columns are implicitly “auto incrementing”
    and no additional keywords are rendered; to render the special SQLite keyword
    `AUTOINCREMENT` is not included as this is unnecessary and not recommended by
    the database vendor. See the section [SQLite Auto Incrementing Behavior](../dialects/sqlite.html#sqlite-autoincrement)
    for more background.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Oracle - The Oracle dialect has no default “autoincrement” feature available
    at this time, instead the [`Identity`](defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity") construct is recommended to achieve this (the [`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") construct may also be used).
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Third-party dialects - consult those dialects’ documentation for details on
    their specific behaviors.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When a single-row [`insert()`](dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert")
    construct is compiled and executed, which does not set the [`Insert.inline()`](dml.html#sqlalchemy.sql.expression.Insert.inline
    "sqlalchemy.sql.expression.Insert.inline") modifier, newly generated primary key
    values for this column will be automatically retrieved upon statement execution
    using a method specific to the database driver in use:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: MySQL, SQLite - calling upon `cursor.lastrowid()` (see [https://www.python.org/dev/peps/pep-0249/#lastrowid](https://www.python.org/dev/peps/pep-0249/#lastrowid))
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: PostgreSQL, SQL Server, Oracle - use RETURNING or an equivalent construct when
    rendering an INSERT statement, and then retrieving the newly generated primary
    key values after execution
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: PostgreSQL, Oracle for [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects that set [`Table.implicit_returning`](#sqlalchemy.schema.Table.params.implicit_returning
    "sqlalchemy.schema.Table") to False - for a [`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") only, the [`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") is invoked explicitly before the INSERT statement
    takes place so that the newly generated primary key value is available to the
    client
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: SQL Server for [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects that set [`Table.implicit_returning`](#sqlalchemy.schema.Table.params.implicit_returning
    "sqlalchemy.schema.Table") to False - the `SELECT scope_identity()` construct
    is used after the INSERT statement is invoked to retrieve the newly generated
    primary key value.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Third-party dialects - consult those dialects’ documentation for details on
    their specific behaviors.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For multiple-row [`insert()`](dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert")
    constructs invoked with a list of parameters (i.e. “executemany” semantics), primary-key
    retrieving behaviors are generally disabled, however there may be special APIs
    that may be used to retrieve lists of new primary key values for an “executemany”,
    such as the psycopg2 “fast insertmany” feature. Such features are very new and
    may not yet be well covered in documentation.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`default` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A scalar, Python callable, or [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") expression representing the *default
    value* for this column, which will be invoked upon insert if this column is otherwise
    not specified in the VALUES clause of the insert. This is a shortcut to using
    [`ColumnDefault`](defaults.html#sqlalchemy.schema.ColumnDefault "sqlalchemy.schema.ColumnDefault")
    as a positional argument; see that class for full detail on the structure of the
    argument.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Contrast this argument to [`Column.server_default`](#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column") which creates a default generator on the database
    side.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Column INSERT/UPDATE Defaults](defaults.html)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`doc` – optional String that can be used by the ORM or similar to document
    attributes on the Python side. This attribute does `not` render SQL comments;
    use the [`Column.comment`](#sqlalchemy.schema.Column.params.comment "sqlalchemy.schema.Column")
    parameter for this purpose.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`key` – An optional string identifier which will identify this `Column` object
    on the [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table"). When a key
    is provided, this is the only identifier referencing the `Column` within the application,
    including ORM attribute mapping; the `name` field is used only when rendering
    SQL.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`index` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When `True`, indicates that a [`Index`](constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") construct will be automatically generated for this
    [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column"), which will result
    in a “CREATE INDEX” statement being emitted for the [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") when the DDL create operation is invoked.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Using this flag is equivalent to making use of the [`Index`](constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") construct explicitly at the level of the [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") construct itself:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE297]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To add the [`Index.unique`](constraints.html#sqlalchemy.schema.Index.params.unique
    "sqlalchemy.schema.Index") flag to the [`Index`](constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index"), set both the [`Column.unique`](#sqlalchemy.schema.Column.params.unique
    "sqlalchemy.schema.Column") and [`Column.index`](#sqlalchemy.schema.Column.params.index
    "sqlalchemy.schema.Column") flags to True simultaneously, which will have the
    effect of rendering the “CREATE UNIQUE INDEX” DDL instruction instead of “CREATE
    INDEX”.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The name of the index is generated using the [default naming convention](constraints.html#constraint-default-naming-convention)
    which for the [`Index`](constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    construct is of the form `ix_<tablename>_<columnname>`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As this flag is intended only as a convenience for the common case of adding
    a single-column, default configured index to a table definition, explicit use
    of the [`Index`](constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    construct should be preferred for most use cases, including composite indexes
    that encompass more than one column, indexes with SQL expressions or ordering,
    backend-specific index configuration options, and indexes that use a specific
    name.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: the [`Column.index`](#sqlalchemy.schema.Column.index "sqlalchemy.schema.Column.index")
    attribute on [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    **does not indicate** if this column is indexed or not, only if this flag was
    explicitly set here. To view indexes on a column, view the [`Table.indexes`](#sqlalchemy.schema.Table.indexes
    "sqlalchemy.schema.Table.indexes") collection or use [`Inspector.get_indexes()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_indexes
    "sqlalchemy.engine.reflection.Inspector.get_indexes").
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Indexes](constraints.html#schema-indexes)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Configuring Constraint Naming Conventions](constraints.html#constraint-naming-conventions)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`Column.unique`](#sqlalchemy.schema.Column.params.unique "sqlalchemy.schema.Column")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`info` – Optional data dictionary which will be populated into the [`SchemaItem.info`](#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info") attribute of this object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nullable` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When set to `False`, will cause the “NOT NULL” phrase to be added when generating
    DDL for the column. When `True`, will normally generate nothing (in SQL this defaults
    to “NULL”), except in some very specific backend-specific edge cases where “NULL”
    may render explicitly. Defaults to `True` unless [`Column.primary_key`](#sqlalchemy.schema.Column.params.primary_key
    "sqlalchemy.schema.Column") is also `True` or the column specifies a `Identity`,
    in which case it defaults to `False`. This parameter is only used when issuing
    CREATE TABLE statements.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When the column specifies a `Identity` this parameter is in general ignored
    by the DDL compiler. The PostgreSQL database allows nullable identity column by
    setting this parameter to `True` explicitly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`onupdate` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A scalar, Python callable, or [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") representing a default value to be
    applied to the column within UPDATE statements, which will be invoked upon update
    if this column is not present in the SET clause of the update. This is a shortcut
    to using [`ColumnDefault`](defaults.html#sqlalchemy.schema.ColumnDefault "sqlalchemy.schema.ColumnDefault")
    as a positional argument with `for_update=True`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Column INSERT/UPDATE Defaults](defaults.html#metadata-defaults) - complete
    discussion of onupdate'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`primary_key` – If `True`, marks this column as a primary key column. Multiple
    columns can have this flag set to specify composite primary keys. As an alternative,
    the primary key of a [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    can be specified via an explicit [`PrimaryKeyConstraint`](constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`server_default` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A [`FetchedValue`](defaults.html#sqlalchemy.schema.FetchedValue "sqlalchemy.schema.FetchedValue")
    instance, str, Unicode or [`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct representing the DDL DEFAULT value
    for the column.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'String types will be emitted as-is, surrounded by single quotes:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE298]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'A [`text()`](sqlelement.html#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")
    expression will be rendered as-is, without quotes:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE299]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Strings and text() will be converted into a [`DefaultClause`](defaults.html#sqlalchemy.schema.DefaultClause
    "sqlalchemy.schema.DefaultClause") object upon initialization.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'This parameter can also accept complex combinations of contextually valid SQLAlchemy
    expressions or constructs:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE300]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The above results in a table created with the following SQL:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE301]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use [`FetchedValue`](defaults.html#sqlalchemy.schema.FetchedValue "sqlalchemy.schema.FetchedValue")
    to indicate that an already-existing column will generate a default value on the
    database side which will be available to SQLAlchemy for post-fetch after inserts.
    This construct does not specify any DDL and the implementation is left to the
    database, such as via a trigger.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Server-invoked DDL-Explicit Default Expressions](defaults.html#server-defaults)
    - complete discussion of server side defaults'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`server_onupdate` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A [`FetchedValue`](defaults.html#sqlalchemy.schema.FetchedValue "sqlalchemy.schema.FetchedValue")
    instance representing a database-side default generation function, such as a trigger.
    This indicates to SQLAlchemy that a newly generated value will be available after
    updates. This construct does not actually implement any kind of generation function
    within the database, which instead must be specified separately.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This directive **does not** currently produce MySQL’s “ON UPDATE CURRENT_TIMESTAMP()”
    clause. See [Rendering ON UPDATE CURRENT TIMESTAMP for MySQL / MariaDB’s explicit_defaults_for_timestamp](../dialects/mysql.html#mysql-timestamp-onupdate)
    for background on how to produce this clause.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Marking Implicitly Generated Values, timestamps, and Triggered Columns](defaults.html#triggered-columns)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`quote` – Force quoting of this column’s name on or off, corresponding to `True`
    or `False`. When left at its default of `None`, the column identifier will be
    quoted according to whether the name is case sensitive (identifiers with at least
    one upper case character are treated as case sensitive), or if it’s a reserved
    word. This flag is only needed to force quoting of a reserved word which is not
    known by the SQLAlchemy dialect.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`unique` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When `True`, and the [`Column.index`](#sqlalchemy.schema.Column.params.index
    "sqlalchemy.schema.Column") parameter is left at its default value of `False`,
    indicates that a [`UniqueConstraint`](constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") construct will be automatically generated
    for this [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column"), which
    will result in a “UNIQUE CONSTRAINT” clause referring to this column being included
    in the `CREATE TABLE` statement emitted, when the DDL create operation for the
    [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") object is invoked.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When this flag is `True` while the [`Column.index`](#sqlalchemy.schema.Column.params.index
    "sqlalchemy.schema.Column") parameter is simultaneously set to `True`, the effect
    instead is that a [`Index`](constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    construct which includes the [`Index.unique`](constraints.html#sqlalchemy.schema.Index.params.unique
    "sqlalchemy.schema.Index") parameter set to `True` is generated. See the documentation
    for [`Column.index`](#sqlalchemy.schema.Column.params.index "sqlalchemy.schema.Column")
    for additional detail.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Using this flag is equivalent to making use of the [`UniqueConstraint`](constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") construct explicitly at the level of the
    [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") construct itself:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE302]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The [`UniqueConstraint.name`](constraints.html#sqlalchemy.schema.UniqueConstraint.params.name
    "sqlalchemy.schema.UniqueConstraint") parameter of the unique constraint object
    is left at its default value of `None`; in the absence of a [naming convention](constraints.html#constraint-naming-conventions)
    for the enclosing [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData"),
    the UNIQUE CONSTRAINT construct will be emitted as unnamed, which typically invokes
    a database-specific naming convention to take place.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As this flag is intended only as a convenience for the common case of adding
    a single-column, default configured unique constraint to a table definition, explicit
    use of the [`UniqueConstraint`](constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") construct should be preferred for most use
    cases, including composite constraints that encompass more than one column, backend-specific
    index configuration options, and constraints that use a specific name.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: the [`Column.unique`](#sqlalchemy.schema.Column.unique "sqlalchemy.schema.Column.unique")
    attribute on [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    **does not indicate** if this column has a unique constraint or not, only if this
    flag was explicitly set here. To view indexes and unique constraints that may
    involve this column, view the [`Table.indexes`](#sqlalchemy.schema.Table.indexes
    "sqlalchemy.schema.Table.indexes") and/or [`Table.constraints`](#sqlalchemy.schema.Table.constraints
    "sqlalchemy.schema.Table.constraints") collections or use [`Inspector.get_indexes()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_indexes
    "sqlalchemy.engine.reflection.Inspector.get_indexes") and/or [`Inspector.get_unique_constraints()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_unique_constraints
    "sqlalchemy.engine.reflection.Inspector.get_unique_constraints")
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[UNIQUE Constraint](constraints.html#schema-unique-constraint)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Configuring Constraint Naming Conventions](constraints.html#constraint-naming-conventions)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`Column.index`](#sqlalchemy.schema.Column.params.index "sqlalchemy.schema.Column")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`system` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When `True`, indicates this is a “system” column, that is a column which is
    automatically made available by the database, and should not be included in the
    columns list for a `CREATE TABLE` statement.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For more elaborate scenarios where columns should be conditionally rendered
    differently on different backends, consider custom compilation rules for [`CreateColumn`](ddl.html#sqlalchemy.schema.CreateColumn
    "sqlalchemy.schema.CreateColumn").
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`comment` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optional string that will render an SQL comment on table creation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'New in version 1.2: Added the [`Column.comment`](#sqlalchemy.schema.Column.params.comment
    "sqlalchemy.schema.Column") parameter to [`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column").'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`insert_sentinel` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Marks this [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    as an [insert sentinel](../glossary.html#term-insert-sentinel) used for optimizing
    the performance of the [insertmanyvalues](../glossary.html#term-insertmanyvalues)
    feature for tables that don’t otherwise have qualifying primary key configurations.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 2.0.10.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`insert_sentinel()`](#sqlalchemy.schema.insert_sentinel "sqlalchemy.schema.insert_sentinel")
    - all in one helper for declaring sentinel columns'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[“Insert Many Values” Behavior for INSERT statements](connections.html#engine-insertmanyvalues)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Configuring Sentinel Columns](connections.html#engine-insertmanyvalues-sentinel-columns)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE303]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__le__` *method
    of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `<=` operator.
  prefs: []
  type: TYPE_NORMAL
- en: In a column context, produces the clause `a <= b`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE304]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__lt__` *method
    of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `<` operator.
  prefs: []
  type: TYPE_NORMAL
- en: In a column context, produces the clause `a < b`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE305]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__ne__` *method
    of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `!=` operator.
  prefs: []
  type: TYPE_NORMAL
- en: In a column context, produces the clause `a != b`. If the target is `None`,
    produces `a IS NOT NULL`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE306]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.all_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce an [`all_()`](sqlelement.html#sqlalchemy.sql.expression.all_ "sqlalchemy.sql.expression.all_")
    clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: See the documentation for [`all_()`](sqlelement.html#sqlalchemy.sql.expression.all_
    "sqlalchemy.sql.expression.all_") for examples.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: be sure to not confuse the newer [`ColumnOperators.all_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") method with the **legacy** version
    of this method, the [`Comparator.all()`](type_basics.html#sqlalchemy.types.ARRAY.Comparator.all
    "sqlalchemy.types.ARRAY.Comparator.all") method that’s specific to [`ARRAY`](type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY"), which uses a different calling style.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE307]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnElement.anon_key_label`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.anon_key_label
    "sqlalchemy.sql.expression.ColumnElement.anon_key_label") *attribute of* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.4: The [`ColumnElement.anon_key_label`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.anon_key_label
    "sqlalchemy.sql.expression.ColumnElement.anon_key_label") attribute is now private,
    and the public accessor is deprecated.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE308]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnElement.anon_label`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.anon_label
    "sqlalchemy.sql.expression.ColumnElement.anon_label") *attribute of* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.4: The [`ColumnElement.anon_label`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.anon_label
    "sqlalchemy.sql.expression.ColumnElement.anon_label") attribute is now private,
    and the public accessor is deprecated.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE309]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.any_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce an [`any_()`](sqlelement.html#sqlalchemy.sql.expression.any_ "sqlalchemy.sql.expression.any_")
    clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: See the documentation for [`any_()`](sqlelement.html#sqlalchemy.sql.expression.any_
    "sqlalchemy.sql.expression.any_") for examples.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: be sure to not confuse the newer [`ColumnOperators.any_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") method with the **legacy** version
    of this method, the [`Comparator.any()`](type_basics.html#sqlalchemy.types.ARRAY.Comparator.any
    "sqlalchemy.types.ARRAY.Comparator.any") method that’s specific to [`ARRAY`](type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY"), which uses a different calling style.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE310]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") *method of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  prefs: []
  type: TYPE_NORMAL
- en: Add a new kind of dialect-specific keyword argument for this class.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE311]'
  prefs: []
  type: TYPE_PRE
- en: The [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") method is a per-argument way
    adding extra arguments to the [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") dictionary. This
    dictionary provides a list of argument names accepted by various schema-level
    constructs on behalf of a dialect.
  prefs: []
  type: TYPE_NORMAL
- en: New dialects should typically specify this dictionary all at once as a data
    member of the dialect class. The use case for ad-hoc addition of argument names
    is typically for end-user code that is also using a custom compilation scheme
    which consumes the additional arguments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`dialect_name` – name of a dialect. The dialect must be locatable, else a [`NoSuchModuleError`](exceptions.html#sqlalchemy.exc.NoSuchModuleError
    "sqlalchemy.exc.NoSuchModuleError") is raised. The dialect must also include an
    existing [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") collection, indicating
    that it participates in the keyword-argument validation and default system, else
    [`ArgumentError`](exceptions.html#sqlalchemy.exc.ArgumentError "sqlalchemy.exc.ArgumentError")
    is raised. If the dialect does not include this collection, then any keyword argument
    can be specified on behalf of this dialect already. All dialects packaged within
    SQLAlchemy include this collection, however for third party dialects, support
    may vary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`argument_name` – name of the parameter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`default` – default value of the parameter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE312]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.asc()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.asc
    "sqlalchemy.sql.expression.ColumnOperators.asc") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`asc()`](sqlelement.html#sqlalchemy.sql.expression.asc "sqlalchemy.sql.expression.asc")
    clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE313]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.between()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.between
    "sqlalchemy.sql.expression.ColumnOperators.between") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`between()`](sqlelement.html#sqlalchemy.sql.expression.between "sqlalchemy.sql.expression.between")
    clause against the parent object, given the lower and upper range.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE314]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.bitwise_and()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_and
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_and") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a bitwise AND operation, typically via the `&` operator.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Bitwise Operators](operators.html#operators-bitwise)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE315]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.bitwise_lshift()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a bitwise LSHIFT operation, typically via the `<<` operator.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Bitwise Operators](operators.html#operators-bitwise)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE316]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.bitwise_not()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_not
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_not") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a bitwise NOT operation, typically via the `~` operator.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Bitwise Operators](operators.html#operators-bitwise)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE317]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.bitwise_or()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_or
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_or") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a bitwise OR operation, typically via the `|` operator.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Bitwise Operators](operators.html#operators-bitwise)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE318]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.bitwise_rshift()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a bitwise RSHIFT operation, typically via the `>>` operator.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Bitwise Operators](operators.html#operators-bitwise)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE319]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.bitwise_xor()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_xor
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_xor") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a bitwise XOR operation, typically via the `^` operator, or `#` for
    PostgreSQL.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Bitwise Operators](operators.html#operators-bitwise)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE320]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Operators.bool_op()`](sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") *method of* [`Operators`](sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a custom boolean operator.
  prefs: []
  type: TYPE_NORMAL
- en: This method is shorthand for calling [`Operators.op()`](sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") and passing the [`Operators.op.is_comparison`](sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op") flag with True. A key advantage to using
    [`Operators.bool_op()`](sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") is that when using column constructs,
    the “boolean” nature of the returned expression will be present for [**PEP 484**](https://peps.python.org/pep-0484/)
    purposes.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Operators.op()`](sqlelement.html#sqlalchemy.sql.expression.Operators.op "sqlalchemy.sql.expression.Operators.op")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE321]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnElement.cast()`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.cast
    "sqlalchemy.sql.expression.ColumnElement.cast") *method of* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a type cast, i.e. `CAST(<expression> AS <type>)`.
  prefs: []
  type: TYPE_NORMAL
- en: This is a shortcut to the [`cast()`](sqlelement.html#sqlalchemy.sql.expression.cast
    "sqlalchemy.sql.expression.cast") function.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Data Casts and Type Coercion](../tutorial/data_select.html#tutorial-casts)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`cast()`](sqlelement.html#sqlalchemy.sql.expression.cast "sqlalchemy.sql.expression.cast")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`type_coerce()`](sqlelement.html#sqlalchemy.sql.expression.type_coerce "sqlalchemy.sql.expression.type_coerce")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE322]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.collate()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.collate
    "sqlalchemy.sql.expression.ColumnOperators.collate") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`collate()`](sqlelement.html#sqlalchemy.sql.expression.collate "sqlalchemy.sql.expression.collate")
    clause against the parent object, given the collation string.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`collate()`](sqlelement.html#sqlalchemy.sql.expression.collate "sqlalchemy.sql.expression.collate")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE323]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ClauseElement.compare()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.compare
    "sqlalchemy.sql.expression.ClauseElement.compare") *method of* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
  prefs: []
  type: TYPE_NORMAL
- en: Compare this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") to the given [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  prefs: []
  type: TYPE_NORMAL
- en: Subclasses should override the default behavior, which is a straight identity
    comparison.
  prefs: []
  type: TYPE_NORMAL
- en: '**kw are arguments consumed by subclass `compare()` methods and may be used
    to modify the criteria for comparison (see [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE324]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `CompilerElement.compile()` *method of* `CompilerElement`'
  prefs: []
  type: TYPE_NORMAL
- en: Compile this SQL expression.
  prefs: []
  type: TYPE_NORMAL
- en: The return value is a [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object. Calling `str()` or `unicode()` on the returned
    value will yield a string representation of the result. The [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object also can return a dictionary of bind parameter
    names and values using the `params` accessor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`bind` – An [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    or [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    which can provide a [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    in order to generate a [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object. If the `bind` and `dialect` parameters are
    both omitted, a default SQL compiler is used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`column_keys` – Used for INSERT and UPDATE statements, a list of column names
    which should be present in the VALUES clause of the compiled statement. If `None`,
    all columns from the target table object are rendered.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dialect` – A [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    instance which can generate a [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object. This argument takes precedence over the
    `bind` argument.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`compile_kwargs` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'optional dictionary of additional parameters that will be passed through to
    the compiler within all “visit” methods. This allows any custom flag to be passed
    through to a custom compilation construct, for example. It is also used for the
    case of passing the `literal_binds` flag through:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE325]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[How do I render SQL expressions as strings, possibly with bound parameters
    inlined?](../faq/sqlexpressions.html#faq-sql-expression-string)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE326]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.concat()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.concat
    "sqlalchemy.sql.expression.ColumnOperators.concat") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the ‘concat’ operator.
  prefs: []
  type: TYPE_NORMAL
- en: In a column context, produces the clause `a || b`, or uses the `concat()` operator
    on MySQL.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE327]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.contains()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the ‘contains’ operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Produces a LIKE expression that tests against a match for the middle of a string
    value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE328]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE329]'
  prefs: []
  type: TYPE_PRE
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.contains.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.contains.escape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.contains") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.contains.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains") flag is set to True.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autoescape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE330]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE331]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With the value of `:param` as `"foo/%bar"`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE332]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE333]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The parameter may also be combined with [`ColumnOperators.contains.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains"):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE334]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.startswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.endswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.like()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE335]'
  prefs: []
  type: TYPE_PRE
- en: 'Deprecated since version 1.4: The [`Column.copy()`](#sqlalchemy.schema.Column.copy
    "sqlalchemy.schema.Column.copy") method is deprecated and will be removed in a
    future release.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE336]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.desc()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.desc
    "sqlalchemy.sql.expression.ColumnOperators.desc") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`desc()`](sqlelement.html#sqlalchemy.sql.expression.desc "sqlalchemy.sql.expression.desc")
    clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE337]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  prefs: []
  type: TYPE_NORMAL
- en: A collection of keyword arguments specified as dialect-specific options to this
    construct.
  prefs: []
  type: TYPE_NORMAL
- en: The arguments are present here in their original `<dialect>_<kwarg>` format.
    Only arguments that were actually passed are included; unlike the [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") collection, which contains
    all options known by this dialect including defaults.
  prefs: []
  type: TYPE_NORMAL
- en: The collection is also writable; keys are accepted of the form `<dialect>_<kwarg>`
    where the value will be assembled into the list of options.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") - nested dictionary form'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE338]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  prefs: []
  type: TYPE_NORMAL
- en: A collection of keyword arguments specified as dialect-specific options to this
    construct.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a two-level nested registry, keyed to `<dialect_name>` and `<argument_name>`.
    For example, the `postgresql_where` argument would be locatable as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE339]'
  prefs: []
  type: TYPE_PRE
- en: New in version 0.9.2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") - flat dictionary form'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE340]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.distinct()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.distinct
    "sqlalchemy.sql.expression.ColumnOperators.distinct") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`distinct()`](sqlelement.html#sqlalchemy.sql.expression.distinct
    "sqlalchemy.sql.expression.distinct") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE341]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.endswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the ‘endswith’ operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Produces a LIKE expression that tests against a match for the end of a string
    value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE342]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE343]'
  prefs: []
  type: TYPE_PRE
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.endswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.endswith.escape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.endswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") flag is set to True.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autoescape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE344]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE345]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With the value of `:param` as `"foo/%bar"`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE346]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE347]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The parameter may also be combined with [`ColumnOperators.endswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith"):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE348]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.startswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.contains()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.like()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE349]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnElement.expression`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.expression
    "sqlalchemy.sql.expression.ColumnElement.expression") *attribute of* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a column expression.
  prefs: []
  type: TYPE_NORMAL
- en: Part of the inspection interface; returns self.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE350]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnElement.foreign_keys`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.foreign_keys
    "sqlalchemy.sql.expression.ColumnElement.foreign_keys") *attribute of* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
  prefs: []
  type: TYPE_NORMAL
- en: A collection of all [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") marker objects associated with this [`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column").
  prefs: []
  type: TYPE_NORMAL
- en: Each object is a member of a [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")-wide
    [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Table.foreign_keys`](#sqlalchemy.schema.Table.foreign_keys "sqlalchemy.schema.Table.foreign_keys")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE351]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnClause.get_children()`](sqlelement.html#sqlalchemy.sql.expression.ColumnClause.get_children
    "sqlalchemy.sql.expression.ColumnClause.get_children") *method of* [`ColumnClause`](sqlelement.html#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause")'
  prefs: []
  type: TYPE_NORMAL
- en: Return immediate child `HasTraverseInternals` elements of this `HasTraverseInternals`.
  prefs: []
  type: TYPE_NORMAL
- en: This is used for visit traversal.
  prefs: []
  type: TYPE_NORMAL
- en: '**kw may contain flags that change the collection that is returned, for example
    to return a subset of items in order to cut down on larger traversals, or to return
    child items from a different context (such as schema-level collections instead
    of clause-level).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE352]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.icontains()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains
    "sqlalchemy.sql.expression.ColumnOperators.icontains") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `icontains` operator, e.g. case insensitive version of [`ColumnOperators.contains()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains").
  prefs: []
  type: TYPE_NORMAL
- en: 'Produces a LIKE expression that tests against an insensitive match for the
    middle of a string value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE353]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE354]'
  prefs: []
  type: TYPE_PRE
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.icontains.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.icontains.escape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.icontains.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") flag is set to True.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autoescape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE355]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE356]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With the value of `:param` as `"foo/%bar"`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE357]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE358]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The parameter may also be combined with [`ColumnOperators.contains.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains"):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE359]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.contains()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE360]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.iendswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `iendswith` operator, e.g. case insensitive version of [`ColumnOperators.endswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith").
  prefs: []
  type: TYPE_NORMAL
- en: 'Produces a LIKE expression that tests against an insensitive match for the
    end of a string value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE361]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE362]'
  prefs: []
  type: TYPE_PRE
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.iendswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.iendswith.escape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.iendswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") flag is set to True.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autoescape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE363]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE364]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With the value of `:param` as `"foo/%bar"`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE365]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE366]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The parameter may also be combined with [`ColumnOperators.iendswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith"):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE367]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.endswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE368]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.ilike()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `ilike` operator, e.g. case insensitive LIKE.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a column context, produces an expression either of the form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE369]'
  prefs: []
  type: TYPE_PRE
- en: 'Or on backends that support the ILIKE operator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE370]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE371]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'optional escape character, renders the `ESCAPE` keyword, e.g.:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE372]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.like()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE373]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.in_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `in` operator.
  prefs: []
  type: TYPE_NORMAL
- en: In a column context, produces the clause `column IN <other>`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The given parameter `other` may be:'
  prefs: []
  type: TYPE_NORMAL
- en: 'A list of literal values, e.g.:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE374]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In this calling form, the list of items is converted to a set of bound parameters
    the same length as the list given:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE375]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'A list of tuples may be provided if the comparison is against a [`tuple_()`](sqlelement.html#sqlalchemy.sql.expression.tuple_
    "sqlalchemy.sql.expression.tuple_") containing multiple expressions:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE376]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'An empty list, e.g.:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE377]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In this calling form, the expression renders an “empty set” expression. These
    expressions are tailored to individual backends and are generally trying to get
    an empty SELECT statement as a subquery. Such as on SQLite, the expression is:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE378]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Changed in version 1.4: empty IN expressions now use an execution-time generated
    SELECT subquery in all cases.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'A bound parameter, e.g. [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam"), may be used if it includes the [`bindparam.expanding`](sqlelement.html#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam") flag:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE379]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In this calling form, the expression renders a special non-SQL placeholder
    expression that looks like:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE380]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This placeholder expression is intercepted at statement execution time to be
    converted into the variable number of bound parameter form illustrated earlier.
    If the statement were executed as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE381]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The database would be passed a bound parameter for each value:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE382]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'New in version 1.2: added “expanding” bound parameters'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If an empty list is passed, a special “empty list” expression, which is specific
    to the database in use, is rendered. On SQLite this would be:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE383]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'New in version 1.3: “expanding” bound parameters now support empty lists'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'a [`select()`](selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    construct, which is usually a correlated scalar select:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE384]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In this calling form, [`ColumnOperators.in_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") renders as given:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE385]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**other** – a list of literals, a [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct, or a [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") construct that includes the [`bindparam.expanding`](sqlelement.html#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam") flag set to True.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE386]'
  prefs: []
  type: TYPE_PRE
- en: The value of the [`Column.index`](#sqlalchemy.schema.Column.params.index "sqlalchemy.schema.Column")
    parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Does not indicate if this [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    is actually indexed or not; use [`Table.indexes`](#sqlalchemy.schema.Table.indexes
    "sqlalchemy.schema.Table.indexes").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Table.indexes`](#sqlalchemy.schema.Table.indexes "sqlalchemy.schema.Table.indexes")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE387]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`SchemaItem.info`](#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info") *attribute of* [`SchemaItem`](#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem")'
  prefs: []
  type: TYPE_NORMAL
- en: Info dictionary associated with the object, allowing user-defined data to be
    associated with this [`SchemaItem`](#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem").
  prefs: []
  type: TYPE_NORMAL
- en: The dictionary is automatically generated when first accessed. It can also be
    specified in the constructor of some objects, such as [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") and [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE388]'
  prefs: []
  type: TYPE_PRE
- en: Indicate if this [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") instance should make use of the cache
    key generation scheme used by its immediate superclass.
  prefs: []
  type: TYPE_NORMAL
- en: The attribute defaults to `None`, which indicates that a construct has not yet
    taken into account whether or not its appropriate for it to participate in caching;
    this is functionally equivalent to setting the value to `False`, except that a
    warning is also emitted.
  prefs: []
  type: TYPE_NORMAL
- en: This flag can be set to `True` on a particular class, if the SQL that corresponds
    to the object does not change based on attributes which are local to this class,
    and not its superclass.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Enabling Caching Support for Custom Constructs](compiler.html#compilerext-caching)
    - General guideslines for setting the [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute for third-party
    or user defined SQL constructs.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE389]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.is_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `IS` operator.
  prefs: []
  type: TYPE_NORMAL
- en: Normally, `IS` is generated automatically when comparing to a value of `None`,
    which resolves to `NULL`. However, explicit usage of `IS` may be desirable if
    comparing to boolean values on certain platforms.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.is_not()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE390]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.is_distinct_from()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_distinct_from") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `IS DISTINCT FROM` operator.
  prefs: []
  type: TYPE_NORMAL
- en: Renders “a IS DISTINCT FROM b” on most platforms; on some such as SQLite may
    render “a IS NOT b”.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE391]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.is_not()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `IS NOT` operator.
  prefs: []
  type: TYPE_NORMAL
- en: Normally, `IS NOT` is generated automatically when comparing to a value of `None`,
    which resolves to `NULL`. However, explicit usage of `IS NOT` may be desirable
    if comparing to boolean values on certain platforms.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `is_not()` operator is renamed from `isnot()` in
    previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.is_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE392]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.is_not_distinct_from()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_not_distinct_from") *method of*
    [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `IS NOT DISTINCT FROM` operator.
  prefs: []
  type: TYPE_NORMAL
- en: Renders “a IS NOT DISTINCT FROM b” on most platforms; on some such as SQLite
    may render “a IS b”.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `is_not_distinct_from()` operator is renamed from
    `isnot_distinct_from()` in previous releases. The previous name remains available
    for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE393]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.isnot()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot
    "sqlalchemy.sql.expression.ColumnOperators.isnot") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `IS NOT` operator.
  prefs: []
  type: TYPE_NORMAL
- en: Normally, `IS NOT` is generated automatically when comparing to a value of `None`,
    which resolves to `NULL`. However, explicit usage of `IS NOT` may be desirable
    if comparing to boolean values on certain platforms.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `is_not()` operator is renamed from `isnot()` in
    previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.is_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE394]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.isnot_distinct_from()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `IS NOT DISTINCT FROM` operator.
  prefs: []
  type: TYPE_NORMAL
- en: Renders “a IS NOT DISTINCT FROM b” on most platforms; on some such as SQLite
    may render “a IS b”.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `is_not_distinct_from()` operator is renamed from
    `isnot_distinct_from()` in previous releases. The previous name remains available
    for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE395]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.istartswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `istartswith` operator, e.g. case insensitive version of [`ColumnOperators.startswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith").
  prefs: []
  type: TYPE_NORMAL
- en: 'Produces a LIKE expression that tests against an insensitive match for the
    start of a string value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE396]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE397]'
  prefs: []
  type: TYPE_PRE
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.istartswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.istartswith.escape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.istartswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") flag is set to True.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autoescape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE398]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE399]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With the value of `:param` as `"foo/%bar"`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE400]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE401]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The parameter may also be combined with [`ColumnOperators.istartswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith"):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE402]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.startswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE403]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnElement.key`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.key
    "sqlalchemy.sql.expression.ColumnElement.key") *attribute of* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
  prefs: []
  type: TYPE_NORMAL
- en: The ‘key’ that in some circumstances refers to this object in a Python namespace.
  prefs: []
  type: TYPE_NORMAL
- en: This typically refers to the “key” of the column as present in the `.c` collection
    of a selectable, e.g. `sometable.c["somekey"]` would return a [`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") with a `.key` of “somekey”.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE404]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`DialectKWArgs.kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.kwargs
    "sqlalchemy.sql.base.DialectKWArgs.kwargs") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  prefs: []
  type: TYPE_NORMAL
- en: A synonym for [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE405]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnElement.label()`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.label
    "sqlalchemy.sql.expression.ColumnElement.label") *method of* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a column label, i.e. `<columnname> AS <name>`.
  prefs: []
  type: TYPE_NORMAL
- en: This is a shortcut to the [`label()`](sqlelement.html#sqlalchemy.sql.expression.label
    "sqlalchemy.sql.expression.label") function.
  prefs: []
  type: TYPE_NORMAL
- en: If ‘name’ is `None`, an anonymous label name will be generated.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE406]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.like()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `like` operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a column context, produces the expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE407]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE408]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'optional escape character, renders the `ESCAPE` keyword, e.g.:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE409]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.ilike()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE410]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.match()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implements a database-specific ‘match’ operator.
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.match()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") attempts to resolve to a MATCH-like
    function or operator provided by the backend. Examples include:'
  prefs: []
  type: TYPE_NORMAL
- en: PostgreSQL - renders `x @@ plainto_tsquery(y)`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in version 2.0: `plainto_tsquery()` is used instead of `to_tsquery()`
    for PostgreSQL now; for compatibility with other forms, see [Full Text Search](../dialects/postgresql.html#postgresql-match).'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: MySQL - renders `MATCH (x) AGAINST (y IN BOOLEAN MODE)`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`match`](../dialects/mysql.html#sqlalchemy.dialects.mysql.match "sqlalchemy.dialects.mysql.match")
    - MySQL specific construct with additional features.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Oracle - renders `CONTAINS(x, y)`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: other backends may provide special implementations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backends without any special implementation will emit the operator as “MATCH”.
    This is compatible with SQLite, for example.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE411]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.not_ilike()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_ilike
    "sqlalchemy.sql.expression.ColumnOperators.not_ilike") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: implement the `NOT ILIKE` operator.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to using negation with [`ColumnOperators.ilike()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike"), i.e. `~x.ilike(y)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `not_ilike()` operator is renamed from `notilike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.ilike()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE412]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.not_in()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: implement the `NOT IN` operator.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to using negation with [`ColumnOperators.in_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_"), i.e. `~x.in_(y)`.
  prefs: []
  type: TYPE_NORMAL
- en: In the case that `other` is an empty sequence, the compiler produces an “empty
    not in” expression. This defaults to the expression “1 = 1” to produce true in
    all cases. The [`create_engine.empty_in_strategy`](engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine") may be used to alter this behavior.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `not_in()` operator is renamed from `notin_()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.2: The [`ColumnOperators.in_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") and [`ColumnOperators.not_in()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") operators now produce a “static”
    expression for an empty IN sequence by default.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.in_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE413]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.not_like()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_like
    "sqlalchemy.sql.expression.ColumnOperators.not_like") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: implement the `NOT LIKE` operator.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to using negation with [`ColumnOperators.like()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like"), i.e. `~x.like(y)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `not_like()` operator is renamed from `notlike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.like()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE414]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.notilike()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notilike
    "sqlalchemy.sql.expression.ColumnOperators.notilike") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: implement the `NOT ILIKE` operator.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to using negation with [`ColumnOperators.ilike()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike"), i.e. `~x.ilike(y)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `not_ilike()` operator is renamed from `notilike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.ilike()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE415]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.notin_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notin_
    "sqlalchemy.sql.expression.ColumnOperators.notin_") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: implement the `NOT IN` operator.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to using negation with [`ColumnOperators.in_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_"), i.e. `~x.in_(y)`.
  prefs: []
  type: TYPE_NORMAL
- en: In the case that `other` is an empty sequence, the compiler produces an “empty
    not in” expression. This defaults to the expression “1 = 1” to produce true in
    all cases. The [`create_engine.empty_in_strategy`](engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine") may be used to alter this behavior.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `not_in()` operator is renamed from `notin_()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.2: The [`ColumnOperators.in_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") and [`ColumnOperators.not_in()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") operators now produce a “static”
    expression for an empty IN sequence by default.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.in_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE416]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.notlike()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notlike
    "sqlalchemy.sql.expression.ColumnOperators.notlike") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: implement the `NOT LIKE` operator.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to using negation with [`ColumnOperators.like()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like"), i.e. `~x.like(y)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `not_like()` operator is renamed from `notlike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.like()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE417]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.nulls_first()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nulls_first
    "sqlalchemy.sql.expression.ColumnOperators.nulls_first") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`nulls_first()`](sqlelement.html#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `nulls_first()` operator is renamed from `nullsfirst()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE418]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.nulls_last()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nulls_last
    "sqlalchemy.sql.expression.ColumnOperators.nulls_last") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`nulls_last()`](sqlelement.html#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `nulls_last()` operator is renamed from `nullslast()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE419]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.nullsfirst()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nullsfirst
    "sqlalchemy.sql.expression.ColumnOperators.nullsfirst") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`nulls_first()`](sqlelement.html#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `nulls_first()` operator is renamed from `nullsfirst()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE420]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.nullslast()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nullslast
    "sqlalchemy.sql.expression.ColumnOperators.nullslast") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`nulls_last()`](sqlelement.html#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `nulls_last()` operator is renamed from `nullslast()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE421]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Operators.op()`](sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") *method of* [`Operators`](sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a generic operator function.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE422]'
  prefs: []
  type: TYPE_PRE
- en: 'produces:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE423]'
  prefs: []
  type: TYPE_PRE
- en: 'This function can also be used to make bitwise operators explicit. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE424]'
  prefs: []
  type: TYPE_PRE
- en: is a bitwise AND of the value in `somecolumn`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`opstring` – a string which will be output as the infix operator between this
    element and the expression passed to the generated function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`precedence` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: precedence which the database is expected to apply to the operator in SQL expressions.
    This integer value acts as a hint for the SQL compiler to know when explicit parenthesis
    should be rendered around a particular operation. A lower number will cause the
    expression to be parenthesized when applied against another operator with higher
    precedence. The default value of `0` is lower than all operators except for the
    comma (`,`) and `AS` operators. A value of 100 will be higher or equal to all
    operators, and -100 will be lower than or equal to all operators.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[I’m using op() to generate a custom operator and my parenthesis are not coming
    out correctly](../faq/sqlexpressions.html#faq-sql-expression-op-parenthesis) -
    detailed description of how the SQLAlchemy SQL compiler renders parenthesis'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`is_comparison` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: legacy; if True, the operator will be considered as a “comparison” operator,
    that is which evaluates to a boolean true/false value, like `==`, `>`, etc. This
    flag is provided so that ORM relationships can establish that the operator is
    a comparison operator when used in a custom join condition.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Using the `is_comparison` parameter is superseded by using the [`Operators.bool_op()`](sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") method instead; this more succinct
    operator sets this parameter automatically, but also provides correct [**PEP 484**](https://peps.python.org/pep-0484/)
    typing support as the returned object will express a “boolean” datatype, i.e.
    `BinaryExpression[bool]`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`return_type` – a [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class or object that will force the return type
    of an expression produced by this operator to be of that type. By default, operators
    that specify [`Operators.op.is_comparison`](sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op") will resolve to [`Boolean`](type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean"), and those that do not will be of the same type as
    the left-hand operand.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`python_impl` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: an optional Python function that can evaluate two Python values in the same
    way as this operator works when run on the database server. Useful for in-Python
    SQL expression evaluation functions, such as for ORM hybrid attributes, and the
    ORM “evaluator” used to match objects in a session after a multi-row update or
    delete.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE425]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The operator for the above expression will also work for non-SQL left and right
    objects:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE426]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: New in version 2.0.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Operators.bool_op()`](sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Redefining and Creating New Operators](custom_types.html#types-operators)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Using custom operators in join conditions](../orm/join_conditions.html#relationship-custom-operator)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE427]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnElement.operate()`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.operate
    "sqlalchemy.sql.expression.ColumnElement.operate") *method of* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
  prefs: []
  type: TYPE_NORMAL
- en: Operate on an argument.
  prefs: []
  type: TYPE_NORMAL
- en: This is the lowest level of operation, raises `NotImplementedError` by default.
  prefs: []
  type: TYPE_NORMAL
- en: 'Overriding this on a subclass can allow common behavior to be applied to all
    operations. For example, overriding [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") to apply `func.lower()` to the left
    and right side:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE428]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`op` – Operator callable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`*other` – the ‘other’ side of the operation. Will be a single scalar for most
    operations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**kwargs` – modifiers. These may be passed by special operators such as `ColumnOperators.contains()`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE429]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `Immutable.params()` *method of* `Immutable`'
  prefs: []
  type: TYPE_NORMAL
- en: Return a copy with [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") elements replaced.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns a copy of this ClauseElement with [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") elements replaced with values taken from
    the given dictionary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE430]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE431]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnElement.proxy_set`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.proxy_set
    "sqlalchemy.sql.expression.ColumnElement.proxy_set") *attribute of* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
  prefs: []
  type: TYPE_NORMAL
- en: set of all columns we are proxying
  prefs: []
  type: TYPE_NORMAL
- en: as of 2.0 this is explicitly deannotated columns. previously it was effectively
    deannotated columns but wasn’t enforced. annotated columns should basically not
    go into sets if at all possible because their hashing behavior is very non-performant.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE432]'
  prefs: []
  type: TYPE_PRE
- en: Return True if this Column references the given column via foreign key.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE433]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.regexp_match()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implements a database-specific ‘regexp match’ operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE434]'
  prefs: []
  type: TYPE_PRE
- en: '[`ColumnOperators.regexp_match()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") attempts to resolve
    to a REGEXP-like function or operator provided by the backend, however the specific
    regular expression syntax and flags available are **not backend agnostic**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples include:'
  prefs: []
  type: TYPE_NORMAL
- en: PostgreSQL - renders `x ~ y` or `x !~ y` when negated.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Oracle - renders `REGEXP_LIKE(x, y)`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SQLite - uses SQLite’s `REGEXP` placeholder operator and calls into the Python
    `re.match()` builtin.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: other backends may provide special implementations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backends without any special implementation will emit the operator as “REGEXP”
    or “NOT REGEXP”. This is compatible with SQLite and MySQL, for example.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Regular expression support is currently implemented for Oracle, PostgreSQL,
    MySQL and MariaDB. Partial support is available for SQLite. Support among third-party
    dialects may vary.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pattern` – The regular expression pattern string or column clause.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flags` – Any regular expression string flags to apply, passed as plain Python
    string only. These flags are backend specific. Some backends, like PostgreSQL
    and MariaDB, may alternatively specify the flags as part of the pattern. When
    using the ignore case flag ‘i’ in PostgreSQL, the ignore case regexp match operator
    `~*` or `!~*` will be used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4.48,: 2.0.18 Note that due to an implementation error,
    the “flags” parameter previously accepted SQL expression objects such as column
    expressions in addition to plain Python strings. This implementation did not work
    correctly with caching and was removed; strings only should be passed for the
    “flags” parameter, as these flags are rendered as literal inline values within
    SQL expressions.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.regexp_replace()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE435]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.regexp_replace()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implements a database-specific ‘regexp replace’ operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE436]'
  prefs: []
  type: TYPE_PRE
- en: '[`ColumnOperators.regexp_replace()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") attempts to resolve
    to a REGEXP_REPLACE-like function provided by the backend, that usually emit the
    function `REGEXP_REPLACE()`. However, the specific regular expression syntax and
    flags available are **not backend agnostic**.'
  prefs: []
  type: TYPE_NORMAL
- en: Regular expression replacement support is currently implemented for Oracle,
    PostgreSQL, MySQL 8 or greater and MariaDB. Support among third-party dialects
    may vary.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pattern` – The regular expression pattern string or column clause.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pattern` – The replacement string or column clause.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flags` – Any regular expression string flags to apply, passed as plain Python
    string only. These flags are backend specific. Some backends, like PostgreSQL
    and MariaDB, may alternatively specify the flags as part of the pattern.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4.48,: 2.0.18 Note that due to an implementation error,
    the “flags” parameter previously accepted SQL expression objects such as column
    expressions in addition to plain Python strings. This implementation did not work
    correctly with caching and was removed; strings only should be passed for the
    “flags” parameter, as these flags are rendered as literal inline values within
    SQL expressions.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.regexp_match()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE437]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnElement.reverse_operate()`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.reverse_operate
    "sqlalchemy.sql.expression.ColumnElement.reverse_operate") *method of* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
  prefs: []
  type: TYPE_NORMAL
- en: Reverse operate on an argument.
  prefs: []
  type: TYPE_NORMAL
- en: Usage is the same as [`operate()`](#sqlalchemy.schema.Column.operate "sqlalchemy.schema.Column.operate").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE438]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnElement.self_group()`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.self_group
    "sqlalchemy.sql.expression.ColumnElement.self_group") *method of* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
  prefs: []
  type: TYPE_NORMAL
- en: Apply a ‘grouping’ to this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  prefs: []
  type: TYPE_NORMAL
- en: This method is overridden by subclasses to return a “grouping” construct, i.e.
    parenthesis. In particular it’s used by “binary” expressions to provide a grouping
    around themselves when placed into a larger expression, as well as by [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs when placed into the FROM clause
    of another [`select()`](selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select").
    (Note that subqueries should be normally created using the [`Select.alias()`](selectable.html#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") method, as many platforms require nested
    SELECT statements to be named).
  prefs: []
  type: TYPE_NORMAL
- en: As expressions are composed together, the application of [`self_group()`](#sqlalchemy.schema.Column.self_group
    "sqlalchemy.schema.Column.self_group") is automatic - end-user code should never
    need to use this method directly. Note that SQLAlchemy’s clause constructs take
    operator precedence into account - so parenthesis might not be needed, for example,
    in an expression like `x OR (y AND z)` - AND takes precedence over OR.
  prefs: []
  type: TYPE_NORMAL
- en: The base [`self_group()`](#sqlalchemy.schema.Column.self_group "sqlalchemy.schema.Column.self_group")
    method of [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") just returns self.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE439]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnElement.shares_lineage()`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.shares_lineage
    "sqlalchemy.sql.expression.ColumnElement.shares_lineage") *method of* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
  prefs: []
  type: TYPE_NORMAL
- en: Return True if the given [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") has a common ancestor to this [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE440]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.startswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `startswith` operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Produces a LIKE expression that tests against a match for the start of a string
    value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE441]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE442]'
  prefs: []
  type: TYPE_PRE
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.startswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.startswith.escape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.startswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") flag is set to True.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autoescape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE443]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE444]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With the value of `:param` as `"foo/%bar"`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE445]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE446]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The parameter may also be combined with [`ColumnOperators.startswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith"):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE447]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.endswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.contains()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.like()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE448]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.timetuple`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.timetuple
    "sqlalchemy.sql.expression.ColumnOperators.timetuple") *attribute of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Hack, allows datetime objects to be compared on the LHS.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE449]'
  prefs: []
  type: TYPE_PRE
- en: The value of the [`Column.unique`](#sqlalchemy.schema.Column.params.unique "sqlalchemy.schema.Column")
    parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Does not indicate if this [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    is actually subject to a unique constraint or not; use [`Table.indexes`](#sqlalchemy.schema.Table.indexes
    "sqlalchemy.schema.Table.indexes") and [`Table.constraints`](#sqlalchemy.schema.Table.constraints
    "sqlalchemy.schema.Table.constraints").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Table.indexes`](#sqlalchemy.schema.Table.indexes "sqlalchemy.schema.Table.indexes")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Table.constraints`](#sqlalchemy.schema.Table.constraints "sqlalchemy.schema.Table.constraints").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE450]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `Immutable.unique_params()` *method of* `Immutable`'
  prefs: []
  type: TYPE_NORMAL
- en: Return a copy with [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") elements replaced.
  prefs: []
  type: TYPE_NORMAL
- en: Same functionality as [`ClauseElement.params()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.params
    "sqlalchemy.sql.expression.ClauseElement.params"), except adds unique=True to
    affected bind parameters so that multiple statements can be used.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE451]'
  prefs: []
  type: TYPE_PRE
- en: A collection of [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects and their associated schema constructs.
  prefs: []
  type: TYPE_NORMAL
- en: Holds a collection of [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects as well as an optional binding to an [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") or [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"). If bound, the [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects in the collection and their columns may participate
    in implicit SQL execution.
  prefs: []
  type: TYPE_NORMAL
- en: The [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") objects themselves
    are stored in the [`MetaData.tables`](#sqlalchemy.schema.MetaData.tables "sqlalchemy.schema.MetaData.tables")
    dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: '[`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData") is a
    thread-safe object for read operations. Construction of new tables within a single
    [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData") object,
    either explicitly or via reflection, may not be completely thread-safe.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Describing Databases with MetaData](#metadata-describing) - Introduction to
    database metadata'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[__init__()](#sqlalchemy.schema.MetaData.__init__), [clear()](#sqlalchemy.schema.MetaData.clear),
    [create_all()](#sqlalchemy.schema.MetaData.create_all), [drop_all()](#sqlalchemy.schema.MetaData.drop_all),
    [reflect()](#sqlalchemy.schema.MetaData.reflect), [remove()](#sqlalchemy.schema.MetaData.remove),
    [sorted_tables](#sqlalchemy.schema.MetaData.sorted_tables), [tables](#sqlalchemy.schema.MetaData.tables)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.schema.MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    (`sqlalchemy.schema.HasSchemaAttr`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE452]'
  prefs: []
  type: TYPE_PRE
- en: Create a new MetaData object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`schema` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The default schema to use for the [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table"),
    [`Sequence`](defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence"),
    and potentially other objects associated with this [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData"). Defaults to `None`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Specifying a Default Schema Name with MetaData](#schema-metadata-schema-name)
    - details on how the [`MetaData.schema`](#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData") parameter is used.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`Table.schema`](#sqlalchemy.schema.Table.params.schema "sqlalchemy.schema.Table")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`Sequence.schema`](defaults.html#sqlalchemy.schema.Sequence.params.schema
    "sqlalchemy.schema.Sequence")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`quote_schema` – Sets the `quote_schema` flag for those [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), [`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence"), and other objects which make usage of the local
    `schema` name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`info` – Optional data dictionary which will be populated into the [`SchemaItem.info`](#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info") attribute of this object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`naming_convention` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a dictionary referring to values which will establish default naming conventions
    for [`Constraint`](constraints.html#sqlalchemy.schema.Constraint "sqlalchemy.schema.Constraint")
    and [`Index`](constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    objects, for those objects which are not given a name explicitly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The keys of this dictionary may be:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: a constraint or Index class, e.g. the [`UniqueConstraint`](constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint"), [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") class, the [`Index`](constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") class
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: a string mnemonic for one of the known constraint classes; `"fk"`, `"pk"`, `"ix"`,
    `"ck"`, `"uq"` for foreign key, primary key, index, check, and unique constraint,
    respectively.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: the string name of a user-defined “token” that can be used to define new naming
    tokens.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The values associated with each “constraint class” or “constraint mnemonic”
    key are string naming templates, such as `"uq_%(table_name)s_%(column_0_name)s"`,
    which describe how the name should be composed. The values associated with user-defined
    “token” keys should be callables of the form `fn(constraint, table)`, which accepts
    the constraint/index object and [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    as arguments, returning a string result.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The built-in names are as follows, some of which may only be available for
    certain types of constraint:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`%(table_name)s` - the name of the [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object associated with the constraint.'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`%(referred_table_name)s` - the name of the [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object associated with the referencing target of a
    [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint").'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`%(column_0_name)s` - the name of the [`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") at index position “0” within the constraint.'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`%(column_0N_name)s` - the name of all [`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects in order within the constraint, joined without
    a separator.'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`%(column_0_N_name)s` - the name of all [`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects in order within the constraint, joined with
    an underscore as a separator.'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`%(column_0_label)s`, `%(column_0N_label)s`, `%(column_0_N_label)s` - the label
    of either the zeroth [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    or all `Columns`, separated with or without an underscore'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`%(column_0_key)s`, `%(column_0N_key)s`, `%(column_0_N_key)s` - the key of
    either the zeroth [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    or all `Columns`, separated with or without an underscore'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`%(referred_column_0_name)s`, `%(referred_column_0N_name)s` `%(referred_column_0_N_name)s`,
    `%(referred_column_0_key)s`, `%(referred_column_0N_key)s`, … column tokens which
    render the names/keys/labels of columns that are referenced by a [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint").'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`%(constraint_name)s` - a special key that refers to the existing name given
    to the constraint. When this key is present, the [`Constraint`](constraints.html#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint") object’s existing name will be replaced with one
    that is composed from template string that uses this token. When this token is
    present, it is required that the [`Constraint`](constraints.html#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint") is given an explicit name ahead of time.'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'user-defined: any additional token may be implemented by passing it along with
    a `fn(constraint, table)` callable to the naming_convention dictionary.'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: 'New in version 1.3.0: - added new `%(column_0N_name)s`, `%(column_0_N_name)s`,
    and related tokens that produce concatenations of names, keys, or labels for all
    columns referred to by a given constraint.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Configuring Constraint Naming Conventions](constraints.html#constraint-naming-conventions)
    - for detailed usage examples.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE453]'
  prefs: []
  type: TYPE_PRE
- en: Clear all Table objects from this MetaData.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE454]'
  prefs: []
  type: TYPE_PRE
- en: Create all tables stored in this metadata.
  prefs: []
  type: TYPE_NORMAL
- en: Conditional by default, will not attempt to recreate tables already present
    in the target database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`bind` – A [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    or [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    used to access the database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tables` – Optional list of `Table` objects, which is a subset of the total
    tables in the `MetaData` (others are ignored).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`checkfirst` – Defaults to True, don’t issue CREATEs for tables already present
    in the target database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE455]'
  prefs: []
  type: TYPE_PRE
- en: Drop all tables stored in this metadata.
  prefs: []
  type: TYPE_NORMAL
- en: Conditional by default, will not attempt to drop tables not present in the target
    database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`bind` – A [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    or [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    used to access the database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tables` – Optional list of `Table` objects, which is a subset of the total
    tables in the `MetaData` (others are ignored).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`checkfirst` – Defaults to True, only issue DROPs for tables confirmed to be
    present in the target database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE456]'
  prefs: []
  type: TYPE_PRE
- en: Load all available table definitions from the database.
  prefs: []
  type: TYPE_NORMAL
- en: Automatically creates `Table` entries in this `MetaData` for any table available
    in the database but not yet present in the `MetaData`. May be called multiple
    times to pick up tables recently added to the database, however no special action
    is taken if a table in this `MetaData` no longer exists in the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`bind` – A [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    or [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    used to access the database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`schema` – Optional, query and reflect tables from an alternate schema. If
    None, the schema associated with this [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") is used, if any.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`views` – If True, also reflect views (materialized and plain).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`only` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optional. Load only a sub-set of available named tables. May be specified as
    a sequence of names or a callable.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If a sequence of names is provided, only those tables will be reflected. An
    error is raised if a table is requested but not available. Named tables already
    present in this `MetaData` are ignored.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If a callable is provided, it will be used as a boolean predicate to filter
    the list of potential table names. The callable is called with a table name and
    this `MetaData` instance as positional arguments and should return a true value
    for any table to reflect.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`extend_existing` – Passed along to each [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") as [`Table.extend_existing`](#sqlalchemy.schema.Table.params.extend_existing
    "sqlalchemy.schema.Table").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autoload_replace` – Passed along to each [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") as [`Table.autoload_replace`](#sqlalchemy.schema.Table.params.autoload_replace
    "sqlalchemy.schema.Table").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`resolve_fks` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: if True, reflect [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects linked to [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") objects located in each [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"). For [`MetaData.reflect()`](#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect"), this has the effect of reflecting related
    tables that might otherwise not be in the list of tables being reflected, for
    example if the referenced table is in a different schema or is omitted via the
    [`MetaData.reflect.only`](#sqlalchemy.schema.MetaData.reflect.params.only "sqlalchemy.schema.MetaData.reflect")
    parameter. When False, [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") objects are not followed to the [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") in which they link, however if the related table is
    also part of the list of tables that would be reflected in any case, the [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") object will still resolve to its related [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") after the [`MetaData.reflect()`](#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") operation is complete. Defaults to True.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 1.3.0.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`Table.resolve_fks`](#sqlalchemy.schema.Table.params.resolve_fks "sqlalchemy.schema.Table")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`**dialect_kwargs` – Additional keyword arguments not mentioned above are dialect
    specific, and passed in the form `<dialectname>_<argname>`. See the documentation
    regarding an individual dialect at [Dialects](../dialects/index.html) for detail
    on documented arguments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Reflecting Database Objects](reflection.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`DDLEvents.column_reflect()`](events.html#sqlalchemy.events.DDLEvents.column_reflect
    "sqlalchemy.events.DDLEvents.column_reflect") - Event used to customize the reflected
    columns. Usually used to generalize the types using [`TypeEngine.as_generic()`](type_api.html#sqlalchemy.types.TypeEngine.as_generic
    "sqlalchemy.types.TypeEngine.as_generic")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Reflecting with Database-Agnostic Types](reflection.html#metadata-reflection-dbagnostic-types)
    - describes how to reflect tables using general types.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE457]'
  prefs: []
  type: TYPE_PRE
- en: Remove the given Table object from this MetaData.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE458]'
  prefs: []
  type: TYPE_PRE
- en: Returns a list of [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects sorted in order of foreign key dependency.
  prefs: []
  type: TYPE_NORMAL
- en: The sorting will place [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects that have dependencies first, before the dependencies themselves, representing
    the order in which they can be created. To get the order in which the tables would
    be dropped, use the `reversed()` Python built-in.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: The [`MetaData.sorted_tables`](#sqlalchemy.schema.MetaData.sorted_tables "sqlalchemy.schema.MetaData.sorted_tables")
    attribute cannot by itself accommodate automatic resolution of dependency cycles
    between tables, which are usually caused by mutually dependent foreign key constraints.
    When these cycles are detected, the foreign keys of these tables are omitted from
    consideration in the sort. A warning is emitted when this condition occurs, which
    will be an exception raise in a future release. Tables which are not part of the
    cycle will still be returned in dependency order.
  prefs: []
  type: TYPE_NORMAL
- en: To resolve these cycles, the [`ForeignKeyConstraint.use_alter`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint.params.use_alter
    "sqlalchemy.schema.ForeignKeyConstraint") parameter may be applied to those constraints
    which create a cycle. Alternatively, the [`sort_tables_and_constraints()`](ddl.html#sqlalchemy.schema.sort_tables_and_constraints
    "sqlalchemy.schema.sort_tables_and_constraints") function will automatically return
    foreign key constraints in a separate collection when cycles are detected so that
    they may be applied to a schema separately.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.3.17: - a warning is emitted when [`MetaData.sorted_tables`](#sqlalchemy.schema.MetaData.sorted_tables
    "sqlalchemy.schema.MetaData.sorted_tables") cannot perform a proper sort due to
    cyclical dependencies. This will be an exception in a future release. Additionally,
    the sort will continue to return other tables not involved in the cycle in dependency
    order which was not the case previously.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sort_tables()`](ddl.html#sqlalchemy.schema.sort_tables "sqlalchemy.schema.sort_tables")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`sort_tables_and_constraints()`](ddl.html#sqlalchemy.schema.sort_tables_and_constraints
    "sqlalchemy.schema.sort_tables_and_constraints")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`MetaData.tables`](#sqlalchemy.schema.MetaData.tables "sqlalchemy.schema.MetaData.tables")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Inspector.get_table_names()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_table_names
    "sqlalchemy.engine.reflection.Inspector.get_table_names")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Inspector.get_sorted_table_and_fkc_names()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_sorted_table_and_fkc_names
    "sqlalchemy.engine.reflection.Inspector.get_sorted_table_and_fkc_names")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE459]'
  prefs: []
  type: TYPE_PRE
- en: A dictionary of [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects keyed to their name or “table key”.
  prefs: []
  type: TYPE_NORMAL
- en: The exact key is that determined by the [`Table.key`](#sqlalchemy.schema.Table.key
    "sqlalchemy.schema.Table.key") attribute; for a table with no [`Table.schema`](#sqlalchemy.schema.Table.schema
    "sqlalchemy.schema.Table.schema") attribute, this is the same as `Table.name`.
    For a table with a schema, it is typically of the form `schemaname.tablename`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`MetaData.sorted_tables`](#sqlalchemy.schema.MetaData.sorted_tables "sqlalchemy.schema.MetaData.sorted_tables")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE460]'
  prefs: []
  type: TYPE_PRE
- en: An enumeration.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[BLANK_SCHEMA](#sqlalchemy.schema.SchemaConst.BLANK_SCHEMA), [NULL_UNSPECIFIED](#sqlalchemy.schema.SchemaConst.NULL_UNSPECIFIED),
    [RETAIN_SCHEMA](#sqlalchemy.schema.SchemaConst.RETAIN_SCHEMA)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.schema.SchemaConst`](#sqlalchemy.schema.SchemaConst "sqlalchemy.schema.SchemaConst")
    (`enum.Enum`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE461]'
  prefs: []
  type: TYPE_PRE
- en: Symbol indicating that a [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    or [`Sequence`](defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    should have ‘None’ for its schema, even if the parent [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") has specified a schema.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`MetaData.schema`](#sqlalchemy.schema.MetaData.params.schema "sqlalchemy.schema.MetaData")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Table.schema`](#sqlalchemy.schema.Table.params.schema "sqlalchemy.schema.Table")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Sequence.schema`](defaults.html#sqlalchemy.schema.Sequence.params.schema
    "sqlalchemy.schema.Sequence")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE462]'
  prefs: []
  type: TYPE_PRE
- en: Symbol indicating the “nullable” keyword was not passed to a Column.
  prefs: []
  type: TYPE_NORMAL
- en: This is used to distinguish between the use case of passing `nullable=None`
    to a [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column"), which has
    special meaning on some backends such as SQL Server.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE463]'
  prefs: []
  type: TYPE_PRE
- en: Symbol indicating that a [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table"),
    [`Sequence`](defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    or in some cases a [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") object, in situations where the object is being
    copied for a [`Table.to_metadata()`](#sqlalchemy.schema.Table.to_metadata "sqlalchemy.schema.Table.to_metadata")
    operation, should retain the schema name that it already has.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE464]'
  prefs: []
  type: TYPE_PRE
- en: Base class for items that define a database schema.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[info](#sqlalchemy.schema.SchemaItem.info)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.schema.SchemaItem`](#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")
    (`sqlalchemy.sql.expression.SchemaEventTarget`, [`sqlalchemy.sql.visitors.Visitable`](visitors.html#sqlalchemy.sql.visitors.Visitable
    "sqlalchemy.sql.visitors.Visitable"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE465]'
  prefs: []
  type: TYPE_PRE
- en: Info dictionary associated with the object, allowing user-defined data to be
    associated with this [`SchemaItem`](#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem").
  prefs: []
  type: TYPE_NORMAL
- en: The dictionary is automatically generated when first accessed. It can also be
    specified in the constructor of some objects, such as [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") and [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE466]'
  prefs: []
  type: TYPE_PRE
- en: Provides a surrogate [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    that will act as a dedicated insert [sentinel](../glossary.html#term-sentinel)
    column, allowing efficient bulk inserts with deterministic RETURNING sorting for
    tables that don’t otherwise have qualifying primary key configurations.
  prefs: []
  type: TYPE_NORMAL
- en: Adding this column to a [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object requires that a corresponding database table actually has this column present,
    so if adding it to an existing model, existing database tables would need to be
    migrated (e.g. using ALTER TABLE or similar) to include this column.
  prefs: []
  type: TYPE_NORMAL
- en: For background on how this object is used, see the section [Configuring Sentinel
    Columns](connections.html#engine-insertmanyvalues-sentinel-columns) as part of
    the section [“Insert Many Values” Behavior for INSERT statements](connections.html#engine-insertmanyvalues).
  prefs: []
  type: TYPE_NORMAL
- en: The [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column") returned
    will be a nullable integer column by default and make use of a sentinel-specific
    default generator used only in “insertmanyvalues” operations.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`orm_insert_sentinel()`](../orm/mapping_api.html#sqlalchemy.orm.orm_insert_sentinel
    "sqlalchemy.orm.orm_insert_sentinel")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Column.insert_sentinel`](#sqlalchemy.schema.Column.params.insert_sentinel
    "sqlalchemy.schema.Column")'
  prefs: []
  type: TYPE_NORMAL
- en: '[“Insert Many Values” Behavior for INSERT statements](connections.html#engine-insertmanyvalues)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Configuring Sentinel Columns](connections.html#engine-insertmanyvalues-sentinel-columns)'
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.10.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE467]'
  prefs: []
  type: TYPE_PRE
- en: Represent a table in a database.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE468]'
  prefs: []
  type: TYPE_PRE
- en: The [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") object constructs
    a unique instance of itself based on its name and optional schema name within
    the given [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    object. Calling the [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    constructor with the same name and same [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") argument a second time will return the *same* [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object - in this way the [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") constructor acts as a registry function.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Describing Databases with MetaData](#metadata-describing) - Introduction to
    database metadata'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[__init__()](#sqlalchemy.schema.Table.__init__), [add_is_dependent_on()](#sqlalchemy.schema.Table.add_is_dependent_on),
    [alias()](#sqlalchemy.schema.Table.alias), [append_column()](#sqlalchemy.schema.Table.append_column),
    [append_constraint()](#sqlalchemy.schema.Table.append_constraint), [argument_for()](#sqlalchemy.schema.Table.argument_for),
    [autoincrement_column](#sqlalchemy.schema.Table.autoincrement_column), [c](#sqlalchemy.schema.Table.c),
    [columns](#sqlalchemy.schema.Table.columns), [compare()](#sqlalchemy.schema.Table.compare),
    [compile()](#sqlalchemy.schema.Table.compile), [constraints](#sqlalchemy.schema.Table.constraints),
    [corresponding_column()](#sqlalchemy.schema.Table.corresponding_column), [create()](#sqlalchemy.schema.Table.create),
    [delete()](#sqlalchemy.schema.Table.delete), [description](#sqlalchemy.schema.Table.description),
    [dialect_kwargs](#sqlalchemy.schema.Table.dialect_kwargs), [dialect_options](#sqlalchemy.schema.Table.dialect_options),
    [drop()](#sqlalchemy.schema.Table.drop), [entity_namespace](#sqlalchemy.schema.Table.entity_namespace),
    [exported_columns](#sqlalchemy.schema.Table.exported_columns), [foreign_key_constraints](#sqlalchemy.schema.Table.foreign_key_constraints),
    [foreign_keys](#sqlalchemy.schema.Table.foreign_keys), [get_children()](#sqlalchemy.schema.Table.get_children),
    [implicit_returning](#sqlalchemy.schema.Table.implicit_returning), [indexes](#sqlalchemy.schema.Table.indexes),
    [info](#sqlalchemy.schema.Table.info), [inherit_cache](#sqlalchemy.schema.Table.inherit_cache),
    [insert()](#sqlalchemy.schema.Table.insert), [is_derived_from()](#sqlalchemy.schema.Table.is_derived_from),
    [join()](#sqlalchemy.schema.Table.join), [key](#sqlalchemy.schema.Table.key),
    [kwargs](#sqlalchemy.schema.Table.kwargs), [lateral()](#sqlalchemy.schema.Table.lateral),
    [outerjoin()](#sqlalchemy.schema.Table.outerjoin), [params()](#sqlalchemy.schema.Table.params),
    [primary_key](#sqlalchemy.schema.Table.primary_key), [replace_selectable()](#sqlalchemy.schema.Table.replace_selectable),
    [schema](#sqlalchemy.schema.Table.schema), [select()](#sqlalchemy.schema.Table.select),
    [self_group()](#sqlalchemy.schema.Table.self_group), [table_valued()](#sqlalchemy.schema.Table.table_valued),
    [tablesample()](#sqlalchemy.schema.Table.tablesample), [to_metadata()](#sqlalchemy.schema.Table.to_metadata),
    [tometadata()](#sqlalchemy.schema.Table.tometadata), [unique_params()](#sqlalchemy.schema.Table.unique_params),
    [update()](#sqlalchemy.schema.Table.update)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.schema.Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    ([`sqlalchemy.sql.base.DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs"), `sqlalchemy.schema.HasSchemaAttr`, [`sqlalchemy.sql.expression.TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause"), `sqlalchemy.inspection.Inspectable`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE469]'
  prefs: []
  type: TYPE_PRE
- en: Constructor for [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The name of this table as represented in the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The table name, along with the value of the `schema` parameter, forms a key
    which uniquely identifies this [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    within the owning [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    collection. Additional calls to [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    with the same name, metadata, and schema name will return the same [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Names which contain no upper case characters will be treated as case insensitive
    names, and will not be quoted unless they are a reserved word or contain special
    characters. A name with any number of upper case characters is considered to be
    case sensitive, and will be sent as quoted.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To enable unconditional quoting for the table name, specify the flag `quote=True`
    to the constructor, or use the [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name") construct to specify the name.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`metadata` – a [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    object which will contain this table. The metadata is used as a point of association
    of this table with other tables which are referenced via foreign key. It also
    may be used to associate this table with a particular [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") or [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`*args` – Additional positional arguments are used primarily to add the list
    of [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column") objects contained
    within this table. Similar to the style of a CREATE TABLE statement, other [`SchemaItem`](#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem") constructs may be added here, including [`PrimaryKeyConstraint`](constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint"), and [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autoload_replace` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defaults to `True`; when using [`Table.autoload_with`](#sqlalchemy.schema.Table.params.autoload_with
    "sqlalchemy.schema.Table") in conjunction with [`Table.extend_existing`](#sqlalchemy.schema.Table.params.extend_existing
    "sqlalchemy.schema.Table"), indicates that [`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects present in the already-existing [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object should be replaced with columns of the same
    name retrieved from the autoload process. When `False`, columns already present
    under existing names will be omitted from the reflection process.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note that this setting does not impact [`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects specified programmatically within the call
    to [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") that also is
    autoloading; those [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    objects will always replace existing columns of the same name when [`Table.extend_existing`](#sqlalchemy.schema.Table.params.extend_existing
    "sqlalchemy.schema.Table") is `True`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`Table.autoload_with`](#sqlalchemy.schema.Table.params.autoload_with "sqlalchemy.schema.Table")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`Table.extend_existing`](#sqlalchemy.schema.Table.params.extend_existing "sqlalchemy.schema.Table")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`autoload_with` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    or [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object, or a [`Inspector`](reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector") object as returned by [`inspect()`](inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect") against one, with which this [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object will be reflected. When set to a non-None value,
    the autoload process will take place for this table against the given engine or
    connection.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Reflecting Database Objects](reflection.html)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`DDLEvents.column_reflect()`](events.html#sqlalchemy.events.DDLEvents.column_reflect
    "sqlalchemy.events.DDLEvents.column_reflect")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Reflecting with Database-Agnostic Types](reflection.html#metadata-reflection-dbagnostic-types)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`extend_existing` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When `True`, indicates that if this [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    is already present in the given [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData"),
    apply further arguments within the constructor to the existing [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table").
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If [`Table.extend_existing`](#sqlalchemy.schema.Table.params.extend_existing
    "sqlalchemy.schema.Table") or [`Table.keep_existing`](#sqlalchemy.schema.Table.params.keep_existing
    "sqlalchemy.schema.Table") are not set, and the given name of the new [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") refers to a [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    that is already present in the target [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") collection, and this [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") specifies additional columns or other constructs or
    flags that modify the table’s state, an error is raised. The purpose of these
    two mutually-exclusive flags is to specify what action should be taken when a
    [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") is specified that
    matches an existing [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table"),
    yet specifies additional constructs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`Table.extend_existing`](#sqlalchemy.schema.Table.params.extend_existing "sqlalchemy.schema.Table")
    will also work in conjunction with [`Table.autoload_with`](#sqlalchemy.schema.Table.params.autoload_with
    "sqlalchemy.schema.Table") to run a new reflection operation against the database,
    even if a [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") of the
    same name is already present in the target [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData"); newly reflected [`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects and other options will be added into the state
    of the [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table"), potentially
    overwriting existing columns and options of the same name.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'As is always the case with [`Table.autoload_with`](#sqlalchemy.schema.Table.params.autoload_with
    "sqlalchemy.schema.Table"), [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    objects can be specified in the same [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    constructor, which will take precedence. Below, the existing table `mytable` will
    be augmented with [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    objects both reflected from the database, as well as the given [`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") named “y”:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE470]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`Table.autoload_with`](#sqlalchemy.schema.Table.params.autoload_with "sqlalchemy.schema.Table")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`Table.autoload_replace`](#sqlalchemy.schema.Table.params.autoload_replace
    "sqlalchemy.schema.Table")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`Table.keep_existing`](#sqlalchemy.schema.Table.params.keep_existing "sqlalchemy.schema.Table")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`implicit_returning` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: True by default - indicates that RETURNING can be used, typically by the ORM,
    in order to fetch server-generated values such as primary key values and server
    side defaults, on those backends which support RETURNING.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In modern SQLAlchemy there is generally no reason to alter this setting, except
    for some backend specific cases (see [Triggers](../dialects/mssql.html#mssql-triggers)
    in the SQL Server dialect documentation for one such example).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`include_columns` – A list of strings indicating a subset of columns to be
    loaded via the `autoload` operation; table columns who aren’t present in this
    list will not be represented on the resulting `Table` object. Defaults to `None`
    which indicates all columns should be reflected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`resolve_fks` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Whether or not to reflect [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects related to this one via [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") objects, when [`Table.autoload_with`](#sqlalchemy.schema.Table.params.autoload_with
    "sqlalchemy.schema.Table") is specified. Defaults to True. Set to False to disable
    reflection of related tables as [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") objects are encountered; may be used either to
    save on SQL calls or to avoid issues with related tables that can’t be accessed.
    Note that if a related table is already present in the [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") collection, or becomes present later, a [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") object associated with this [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") will resolve to that table normally.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 1.3.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`MetaData.reflect.resolve_fks`](#sqlalchemy.schema.MetaData.reflect.params.resolve_fks
    "sqlalchemy.schema.MetaData.reflect")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`info` – Optional data dictionary which will be populated into the [`SchemaItem.info`](#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info") attribute of this object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`keep_existing` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When `True`, indicates that if this Table is already present in the given [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData"), ignore further arguments within the constructor
    to the existing [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table"),
    and return the [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") object
    as originally created. This is to allow a function that wishes to define a new
    [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") on first call, but
    on subsequent calls will return the same [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table"),
    without any of the declarations (particularly constraints) being applied a second
    time.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If [`Table.extend_existing`](#sqlalchemy.schema.Table.params.extend_existing
    "sqlalchemy.schema.Table") or [`Table.keep_existing`](#sqlalchemy.schema.Table.params.keep_existing
    "sqlalchemy.schema.Table") are not set, and the given name of the new [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") refers to a [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    that is already present in the target [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") collection, and this [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") specifies additional columns or other constructs or
    flags that modify the table’s state, an error is raised. The purpose of these
    two mutually-exclusive flags is to specify what action should be taken when a
    [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") is specified that
    matches an existing [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table"),
    yet specifies additional constructs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`Table.extend_existing`](#sqlalchemy.schema.Table.params.extend_existing "sqlalchemy.schema.Table")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`listeners` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A list of tuples of the form `(<eventname>, <fn>)` which will be passed to
    [`listen()`](event.html#sqlalchemy.event.listen "sqlalchemy.event.listen") upon
    construction. This alternate hook to [`listen()`](event.html#sqlalchemy.event.listen
    "sqlalchemy.event.listen") allows the establishment of a listener function specific
    to this [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") before the
    “autoload” process begins. Historically this has been intended for use with the
    [`DDLEvents.column_reflect()`](events.html#sqlalchemy.events.DDLEvents.column_reflect
    "sqlalchemy.events.DDLEvents.column_reflect") event, however note that this event
    hook may now be associated with the [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    object directly:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE471]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`DDLEvents.column_reflect()`](events.html#sqlalchemy.events.DDLEvents.column_reflect
    "sqlalchemy.events.DDLEvents.column_reflect")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`must_exist` – When `True`, indicates that this Table must already be present
    in the given [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    collection, else an exception is raised.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`prefixes` – A list of strings to insert after CREATE in the CREATE TABLE statement.
    They will be separated by spaces.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`quote` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Force quoting of this table’s name on or off, corresponding to `True` or `False`.
    When left at its default of `None`, the column identifier will be quoted according
    to whether the name is case sensitive (identifiers with at least one upper case
    character are treated as case sensitive), or if it’s a reserved word. This flag
    is only needed to force quoting of a reserved word which is not known by the SQLAlchemy
    dialect.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: setting this flag to `False` will not provide case-insensitive behavior for
    table reflection; table reflection will always search for a mixed-case name in
    a case sensitive fashion. Case insensitive names are specified in SQLAlchemy only
    by stating the name with all lower case characters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`quote_schema` – same as ‘quote’ but applies to the schema identifier.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`schema` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The schema name for this table, which is required if the table resides in a
    schema other than the default selected schema for the engine’s database connection.
    Defaults to `None`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If the owning [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    of this [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") specifies
    its own [`MetaData.schema`](#sqlalchemy.schema.MetaData.params.schema "sqlalchemy.schema.MetaData")
    parameter, then that schema name will be applied to this [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") if the schema parameter here is set to `None`. To set
    a blank schema name on a [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    that would otherwise use the schema set on the owning [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData"), specify the special symbol [`BLANK_SCHEMA`](#sqlalchemy.schema.SchemaConst.BLANK_SCHEMA
    "sqlalchemy.schema.SchemaConst.BLANK_SCHEMA").
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The quoting rules for the schema name are the same as those for the `name` parameter,
    in that quoting is applied for reserved words or case-sensitive names; to enable
    unconditional quoting for the schema name, specify the flag `quote_schema=True`
    to the constructor, or use the [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name") construct to specify the name.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`comment` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optional string that will render an SQL comment on table creation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'New in version 1.2: Added the [`Table.comment`](#sqlalchemy.schema.Table.params.comment
    "sqlalchemy.schema.Table") parameter to [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table").'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`**kw` – Additional keyword arguments not mentioned above are dialect specific,
    and passed in the form `<dialectname>_<argname>`. See the documentation regarding
    an individual dialect at [Dialects](../dialects/index.html) for detail on documented
    arguments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE472]'
  prefs: []
  type: TYPE_PRE
- en: Add a ‘dependency’ for this Table.
  prefs: []
  type: TYPE_NORMAL
- en: This is another Table object which must be created first before this one can,
    or dropped after this one.
  prefs: []
  type: TYPE_NORMAL
- en: Usually, dependencies between tables are determined via ForeignKey objects.
    However, for other situations that create dependencies outside of foreign keys
    (rules, inheriting), this method can manually establish such a link.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE473]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`FromClause.alias()`](selectable.html#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") *method of* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  prefs: []
  type: TYPE_NORMAL
- en: Return an alias of this [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE474]'
  prefs: []
  type: TYPE_PRE
- en: The above code creates an [`Alias`](selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") object which can be used as a FROM clause in
    any SELECT statement.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Using Aliases](../tutorial/data_select.html#tutorial-using-aliases)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`alias()`](selectable.html#sqlalchemy.sql.expression.alias "sqlalchemy.sql.expression.alias")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE475]'
  prefs: []
  type: TYPE_PRE
- en: Append a [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column") to
    this [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table").
  prefs: []
  type: TYPE_NORMAL
- en: The “key” of the newly added [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column"),
    i.e. the value of its `.key` attribute, will then be available in the `.c` collection
    of this [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table"), and the
    column definition will be included in any CREATE TABLE, SELECT, UPDATE, etc. statements
    generated from this [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    construct.
  prefs: []
  type: TYPE_NORMAL
- en: Note that this does **not** change the definition of the table as it exists
    within any underlying database, assuming that table has already been created in
    the database. Relational databases support the addition of columns to existing
    tables using the SQL ALTER command, which would need to be emitted for an already-existing
    table that doesn’t contain the newly added column.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**replace_existing** –'
  prefs: []
  type: TYPE_NORMAL
- en: When `True`, allows replacing existing columns. When `False`, the default, an
    warning will be raised if a column with the same `.key` already exists. A future
    version of sqlalchemy will instead rise a warning.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE476]'
  prefs: []
  type: TYPE_PRE
- en: Append a [`Constraint`](constraints.html#sqlalchemy.schema.Constraint "sqlalchemy.schema.Constraint")
    to this [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table").
  prefs: []
  type: TYPE_NORMAL
- en: This has the effect of the constraint being included in any future CREATE TABLE
    statement, assuming specific DDL creation events have not been associated with
    the given [`Constraint`](constraints.html#sqlalchemy.schema.Constraint "sqlalchemy.schema.Constraint")
    object.
  prefs: []
  type: TYPE_NORMAL
- en: Note that this does **not** produce the constraint within the relational database
    automatically, for a table that already exists in the database. To add a constraint
    to an existing relational database table, the SQL ALTER command must be used.
    SQLAlchemy also provides the [`AddConstraint`](ddl.html#sqlalchemy.schema.AddConstraint
    "sqlalchemy.schema.AddConstraint") construct which can produce this SQL when invoked
    as an executable clause.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE477]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") *method of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  prefs: []
  type: TYPE_NORMAL
- en: Add a new kind of dialect-specific keyword argument for this class.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE478]'
  prefs: []
  type: TYPE_PRE
- en: The [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") method is a per-argument way
    adding extra arguments to the [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") dictionary. This
    dictionary provides a list of argument names accepted by various schema-level
    constructs on behalf of a dialect.
  prefs: []
  type: TYPE_NORMAL
- en: New dialects should typically specify this dictionary all at once as a data
    member of the dialect class. The use case for ad-hoc addition of argument names
    is typically for end-user code that is also using a custom compilation scheme
    which consumes the additional arguments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`dialect_name` – name of a dialect. The dialect must be locatable, else a [`NoSuchModuleError`](exceptions.html#sqlalchemy.exc.NoSuchModuleError
    "sqlalchemy.exc.NoSuchModuleError") is raised. The dialect must also include an
    existing [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") collection, indicating
    that it participates in the keyword-argument validation and default system, else
    [`ArgumentError`](exceptions.html#sqlalchemy.exc.ArgumentError "sqlalchemy.exc.ArgumentError")
    is raised. If the dialect does not include this collection, then any keyword argument
    can be specified on behalf of this dialect already. All dialects packaged within
    SQLAlchemy include this collection, however for third party dialects, support
    may vary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`argument_name` – name of the parameter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`default` – default value of the parameter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE479]'
  prefs: []
  type: TYPE_PRE
- en: Returns the [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    object which currently represents the “auto increment” column, if any, else returns
    None.
  prefs: []
  type: TYPE_NORMAL
- en: This is based on the rules for [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    as defined by the [`Column.autoincrement`](#sqlalchemy.schema.Column.params.autoincrement
    "sqlalchemy.schema.Column") parameter, which generally means the column within
    a single integer column primary key constraint that is not constrained by a foreign
    key. If the table does not have such a primary key constraint, then there’s no
    “autoincrement” column. A [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    may have only one column defined as the “autoincrement” column.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.4.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Column.autoincrement`](#sqlalchemy.schema.Column.params.autoincrement "sqlalchemy.schema.Column")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE480]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`FromClause.c`](selectable.html#sqlalchemy.sql.expression.FromClause.c
    "sqlalchemy.sql.expression.FromClause.c") *attribute of* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  prefs: []
  type: TYPE_NORMAL
- en: A synonym for [`FromClause.columns`](selectable.html#sqlalchemy.sql.expression.FromClause.columns
    "sqlalchemy.sql.expression.FromClause.columns")
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE481]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`FromClause.columns`](selectable.html#sqlalchemy.sql.expression.FromClause.columns
    "sqlalchemy.sql.expression.FromClause.columns") *attribute of* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  prefs: []
  type: TYPE_NORMAL
- en: A named-based collection of [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") objects maintained by this [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`columns`](#sqlalchemy.schema.Table.columns "sqlalchemy.schema.Table.columns"),
    or [`c`](#sqlalchemy.schema.Table.c "sqlalchemy.schema.Table.c") collection, is
    the gateway to the construction of SQL expressions using table-bound or other
    selectable-bound columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE482]'
  prefs: []
  type: TYPE_PRE
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE483]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ClauseElement.compare()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.compare
    "sqlalchemy.sql.expression.ClauseElement.compare") *method of* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
  prefs: []
  type: TYPE_NORMAL
- en: Compare this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") to the given [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  prefs: []
  type: TYPE_NORMAL
- en: Subclasses should override the default behavior, which is a straight identity
    comparison.
  prefs: []
  type: TYPE_NORMAL
- en: '**kw are arguments consumed by subclass `compare()` methods and may be used
    to modify the criteria for comparison (see [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE484]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `CompilerElement.compile()` *method of* `CompilerElement`'
  prefs: []
  type: TYPE_NORMAL
- en: Compile this SQL expression.
  prefs: []
  type: TYPE_NORMAL
- en: The return value is a [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object. Calling `str()` or `unicode()` on the returned
    value will yield a string representation of the result. The [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object also can return a dictionary of bind parameter
    names and values using the `params` accessor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`bind` – An [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    or [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    which can provide a [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    in order to generate a [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object. If the `bind` and `dialect` parameters are
    both omitted, a default SQL compiler is used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`column_keys` – Used for INSERT and UPDATE statements, a list of column names
    which should be present in the VALUES clause of the compiled statement. If `None`,
    all columns from the target table object are rendered.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dialect` – A [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    instance which can generate a [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object. This argument takes precedence over the
    `bind` argument.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`compile_kwargs` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'optional dictionary of additional parameters that will be passed through to
    the compiler within all “visit” methods. This allows any custom flag to be passed
    through to a custom compilation construct, for example. It is also used for the
    case of passing the `literal_binds` flag through:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE485]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[How do I render SQL expressions as strings, possibly with bound parameters
    inlined?](../faq/sqlexpressions.html#faq-sql-expression-string)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE486]'
  prefs: []
  type: TYPE_PRE
- en: A collection of all [`Constraint`](constraints.html#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint") objects associated with this [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table").
  prefs: []
  type: TYPE_NORMAL
- en: Includes [`PrimaryKeyConstraint`](constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint"), [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint"), [`UniqueConstraint`](constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint"), [`CheckConstraint`](constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint"). A separate collection [`Table.foreign_key_constraints`](#sqlalchemy.schema.Table.foreign_key_constraints
    "sqlalchemy.schema.Table.foreign_key_constraints") refers to the collection of
    all [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") objects, and the [`Table.primary_key`](#sqlalchemy.schema.Table.primary_key
    "sqlalchemy.schema.Table.primary_key") attribute refers to the single [`PrimaryKeyConstraint`](constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") associated with the [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Table.constraints`](#sqlalchemy.schema.Table.constraints "sqlalchemy.schema.Table.constraints")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Table.primary_key`](#sqlalchemy.schema.Table.primary_key "sqlalchemy.schema.Table.primary_key")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Table.foreign_key_constraints`](#sqlalchemy.schema.Table.foreign_key_constraints
    "sqlalchemy.schema.Table.foreign_key_constraints")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Table.indexes`](#sqlalchemy.schema.Table.indexes "sqlalchemy.schema.Table.indexes")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Inspector`](reflection.html#sqlalchemy.engine.reflection.Inspector "sqlalchemy.engine.reflection.Inspector")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE487]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Selectable.corresponding_column()`](selectable.html#sqlalchemy.sql.expression.Selectable.corresponding_column
    "sqlalchemy.sql.expression.Selectable.corresponding_column") *method of* [`Selectable`](selectable.html#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
  prefs: []
  type: TYPE_NORMAL
- en: Given a [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"), return the exported [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") object from the [`Selectable.exported_columns`](selectable.html#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") collection of this [`Selectable`](selectable.html#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable") which corresponds to that original [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") via a common ancestor column.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`column` – the target [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") to be matched.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`require_embedded` – only return corresponding columns for the given [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"), if the given [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") is actually present within a sub-element
    of this [`Selectable`](selectable.html#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable").
    Normally the column will match if it merely shares a common ancestor with one
    of the exported columns of this [`Selectable`](selectable.html#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Selectable.exported_columns`](selectable.html#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") - the [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") that is used for the operation.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnCollection.corresponding_column()`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection.corresponding_column
    "sqlalchemy.sql.expression.ColumnCollection.corresponding_column") - implementation
    method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE488]'
  prefs: []
  type: TYPE_PRE
- en: Issue a `CREATE` statement for this [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table"),
    using the given [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    or [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    for connectivity.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`MetaData.create_all()`](#sqlalchemy.schema.MetaData.create_all "sqlalchemy.schema.MetaData.create_all").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE489]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`TableClause.delete()`](selectable.html#sqlalchemy.sql.expression.TableClause.delete
    "sqlalchemy.sql.expression.TableClause.delete") *method of* [`TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause")'
  prefs: []
  type: TYPE_NORMAL
- en: Generate a [`delete()`](dml.html#sqlalchemy.sql.expression.delete "sqlalchemy.sql.expression.delete")
    construct against this [`TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause").
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE490]'
  prefs: []
  type: TYPE_PRE
- en: See [`delete()`](dml.html#sqlalchemy.sql.expression.delete "sqlalchemy.sql.expression.delete")
    for argument and usage information.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE491]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`TableClause.description`](selectable.html#sqlalchemy.sql.expression.TableClause.description
    "sqlalchemy.sql.expression.TableClause.description") *attribute of* [`TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE492]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  prefs: []
  type: TYPE_NORMAL
- en: A collection of keyword arguments specified as dialect-specific options to this
    construct.
  prefs: []
  type: TYPE_NORMAL
- en: The arguments are present here in their original `<dialect>_<kwarg>` format.
    Only arguments that were actually passed are included; unlike the [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") collection, which contains
    all options known by this dialect including defaults.
  prefs: []
  type: TYPE_NORMAL
- en: The collection is also writable; keys are accepted of the form `<dialect>_<kwarg>`
    where the value will be assembled into the list of options.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") - nested dictionary form'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE493]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  prefs: []
  type: TYPE_NORMAL
- en: A collection of keyword arguments specified as dialect-specific options to this
    construct.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a two-level nested registry, keyed to `<dialect_name>` and `<argument_name>`.
    For example, the `postgresql_where` argument would be locatable as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE494]'
  prefs: []
  type: TYPE_PRE
- en: New in version 0.9.2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") - flat dictionary form'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE495]'
  prefs: []
  type: TYPE_PRE
- en: Issue a `DROP` statement for this [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table"),
    using the given [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    or [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    for connectivity.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`MetaData.drop_all()`](#sqlalchemy.schema.MetaData.drop_all "sqlalchemy.schema.MetaData.drop_all").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE496]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`FromClause.entity_namespace`](selectable.html#sqlalchemy.sql.expression.FromClause.entity_namespace
    "sqlalchemy.sql.expression.FromClause.entity_namespace") *attribute of* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a namespace used for name-based access in SQL expressions.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the namespace that is used to resolve “filter_by()” type expressions,
    such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE497]'
  prefs: []
  type: TYPE_PRE
- en: It defaults to the `.c` collection, however internally it can be overridden
    using the “entity_namespace” annotation to deliver alternative results.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE498]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`FromClause.exported_columns`](selectable.html#sqlalchemy.sql.expression.FromClause.exported_columns
    "sqlalchemy.sql.expression.FromClause.exported_columns") *attribute of* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  prefs: []
  type: TYPE_NORMAL
- en: A [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") that represents the “exported” columns
    of this [`Selectable`](selectable.html#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable").
  prefs: []
  type: TYPE_NORMAL
- en: The “exported” columns for a [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") object are synonymous with the [`FromClause.columns`](selectable.html#sqlalchemy.sql.expression.FromClause.columns
    "sqlalchemy.sql.expression.FromClause.columns") collection.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Selectable.exported_columns`](selectable.html#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`SelectBase.exported_columns`](selectable.html#sqlalchemy.sql.expression.SelectBase.exported_columns
    "sqlalchemy.sql.expression.SelectBase.exported_columns")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE499]'
  prefs: []
  type: TYPE_PRE
- en: '[`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") objects referred to by this [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table").'
  prefs: []
  type: TYPE_NORMAL
- en: This list is produced from the collection of [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") objects currently associated.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Table.constraints`](#sqlalchemy.schema.Table.constraints "sqlalchemy.schema.Table.constraints")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Table.foreign_keys`](#sqlalchemy.schema.Table.foreign_keys "sqlalchemy.schema.Table.foreign_keys")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Table.indexes`](#sqlalchemy.schema.Table.indexes "sqlalchemy.schema.Table.indexes")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE500]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`FromClause.foreign_keys`](selectable.html#sqlalchemy.sql.expression.FromClause.foreign_keys
    "sqlalchemy.sql.expression.FromClause.foreign_keys") *attribute of* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  prefs: []
  type: TYPE_NORMAL
- en: Return the collection of [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") marker objects which this FromClause references.
  prefs: []
  type: TYPE_NORMAL
- en: Each [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    is a member of a [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")-wide
    [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Table.foreign_key_constraints`](#sqlalchemy.schema.Table.foreign_key_constraints
    "sqlalchemy.schema.Table.foreign_key_constraints")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE501]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `HasTraverseInternals.get_children()` *method of* `HasTraverseInternals`'
  prefs: []
  type: TYPE_NORMAL
- en: Return immediate child `HasTraverseInternals` elements of this `HasTraverseInternals`.
  prefs: []
  type: TYPE_NORMAL
- en: This is used for visit traversal.
  prefs: []
  type: TYPE_NORMAL
- en: '**kw may contain flags that change the collection that is returned, for example
    to return a subset of items in order to cut down on larger traversals, or to return
    child items from a different context (such as schema-level collections instead
    of clause-level).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE502]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`TableClause.implicit_returning`](selectable.html#sqlalchemy.sql.expression.TableClause.implicit_returning
    "sqlalchemy.sql.expression.TableClause.implicit_returning") *attribute of* [`TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause "sqlalchemy.sql.expression.TableClause")
    doesn’t support having a primary key or column -level defaults, so implicit returning
    doesn’t apply.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE503]'
  prefs: []
  type: TYPE_PRE
- en: A collection of all [`Index`](constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    objects associated with this [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Inspector.get_indexes()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_indexes
    "sqlalchemy.engine.reflection.Inspector.get_indexes")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE504]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`SchemaItem.info`](#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info") *attribute of* [`SchemaItem`](#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem")'
  prefs: []
  type: TYPE_NORMAL
- en: Info dictionary associated with the object, allowing user-defined data to be
    associated with this [`SchemaItem`](#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem").
  prefs: []
  type: TYPE_NORMAL
- en: The dictionary is automatically generated when first accessed. It can also be
    specified in the constructor of some objects, such as [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") and [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE505]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `HasCacheKey.inherit_cache` *attribute of* [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.cache_key.HasCacheKey")'
  prefs: []
  type: TYPE_NORMAL
- en: Indicate if this [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") instance should make use of the cache
    key generation scheme used by its immediate superclass.
  prefs: []
  type: TYPE_NORMAL
- en: The attribute defaults to `None`, which indicates that a construct has not yet
    taken into account whether or not its appropriate for it to participate in caching;
    this is functionally equivalent to setting the value to `False`, except that a
    warning is also emitted.
  prefs: []
  type: TYPE_NORMAL
- en: This flag can be set to `True` on a particular class, if the SQL that corresponds
    to the object does not change based on attributes which are local to this class,
    and not its superclass.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Enabling Caching Support for Custom Constructs](compiler.html#compilerext-caching)
    - General guideslines for setting the [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute for third-party
    or user defined SQL constructs.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE506]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`TableClause.insert()`](selectable.html#sqlalchemy.sql.expression.TableClause.insert
    "sqlalchemy.sql.expression.TableClause.insert") *method of* [`TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause")'
  prefs: []
  type: TYPE_NORMAL
- en: Generate an [`Insert`](dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    construct against this [`TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause").
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE507]'
  prefs: []
  type: TYPE_PRE
- en: See [`insert()`](dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert")
    for argument and usage information.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE508]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`FromClause.is_derived_from()`](selectable.html#sqlalchemy.sql.expression.FromClause.is_derived_from
    "sqlalchemy.sql.expression.FromClause.is_derived_from") *method of* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  prefs: []
  type: TYPE_NORMAL
- en: Return `True` if this [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") is ‘derived’ from the given `FromClause`.
  prefs: []
  type: TYPE_NORMAL
- en: An example would be an Alias of a Table is derived from that Table.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE509]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`FromClause.join()`](selectable.html#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join") *method of* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a [`Join`](selectable.html#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    from this [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") to another `FromClause`.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE510]'
  prefs: []
  type: TYPE_PRE
- en: 'would emit SQL along the lines of:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE511]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`right` – the right side of the join; this is any [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") object such as a [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object, and may also be a selectable-compatible object
    such as an ORM-mapped class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onclause` – a SQL expression representing the ON clause of the join. If left
    at `None`, [`FromClause.join()`](selectable.html#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join") will attempt to join the two tables
    based on a foreign key relationship.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`isouter` – if True, render a LEFT OUTER JOIN, instead of JOIN.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`full` – if True, render a FULL OUTER JOIN, instead of LEFT OUTER JOIN. Implies
    [`FromClause.join.isouter`](selectable.html#sqlalchemy.sql.expression.FromClause.join.params.isouter
    "sqlalchemy.sql.expression.FromClause.join").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`join()`](selectable.html#sqlalchemy.sql.expression.join "sqlalchemy.sql.expression.join")
    - standalone function'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Join`](selectable.html#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    - the type of object produced'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE512]'
  prefs: []
  type: TYPE_PRE
- en: Return the ‘key’ for this [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table").
  prefs: []
  type: TYPE_NORMAL
- en: This value is used as the dictionary key within the [`MetaData.tables`](#sqlalchemy.schema.MetaData.tables
    "sqlalchemy.schema.MetaData.tables") collection. It is typically the same as that
    of `Table.name` for a table with no [`Table.schema`](#sqlalchemy.schema.Table.schema
    "sqlalchemy.schema.Table.schema") set; otherwise it is typically of the form `schemaname.tablename`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE513]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`DialectKWArgs.kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.kwargs
    "sqlalchemy.sql.base.DialectKWArgs.kwargs") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  prefs: []
  type: TYPE_NORMAL
- en: A synonym for [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE514]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Selectable.lateral()`](selectable.html#sqlalchemy.sql.expression.Selectable.lateral
    "sqlalchemy.sql.expression.Selectable.lateral") *method of* [`Selectable`](selectable.html#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a LATERAL alias of this [`Selectable`](selectable.html#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable").
  prefs: []
  type: TYPE_NORMAL
- en: The return value is the [`Lateral`](selectable.html#sqlalchemy.sql.expression.Lateral
    "sqlalchemy.sql.expression.Lateral") construct also provided by the top-level
    [`lateral()`](selectable.html#sqlalchemy.sql.expression.lateral "sqlalchemy.sql.expression.lateral")
    function.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[LATERAL correlation](../tutorial/data_select.html#tutorial-lateral-correlation)
    - overview of usage.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE515]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`FromClause.outerjoin()`](selectable.html#sqlalchemy.sql.expression.FromClause.outerjoin
    "sqlalchemy.sql.expression.FromClause.outerjoin") *method of* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a [`Join`](selectable.html#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    from this [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") to another `FromClause`, with the “isouter”
    flag set to True.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE516]'
  prefs: []
  type: TYPE_PRE
- en: 'The above is equivalent to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE517]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`right` – the right side of the join; this is any [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") object such as a [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object, and may also be a selectable-compatible object
    such as an ORM-mapped class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onclause` – a SQL expression representing the ON clause of the join. If left
    at `None`, [`FromClause.join()`](selectable.html#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join") will attempt to join the two tables
    based on a foreign key relationship.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`full` – if True, render a FULL OUTER JOIN, instead of LEFT OUTER JOIN.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`FromClause.join()`](selectable.html#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Join`](selectable.html#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE518]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `Immutable.params()` *method of* `Immutable`'
  prefs: []
  type: TYPE_NORMAL
- en: Return a copy with [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") elements replaced.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns a copy of this ClauseElement with [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") elements replaced with values taken from
    the given dictionary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE519]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE520]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`FromClause.primary_key`](selectable.html#sqlalchemy.sql.expression.FromClause.primary_key
    "sqlalchemy.sql.expression.FromClause.primary_key") *attribute of* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  prefs: []
  type: TYPE_NORMAL
- en: Return the iterable collection of [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    objects which comprise the primary key of this `_selectable.FromClause`.
  prefs: []
  type: TYPE_NORMAL
- en: For a [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") object,
    this collection is represented by the [`PrimaryKeyConstraint`](constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") which itself is an iterable collection
    of [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column") objects.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE521]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Selectable.replace_selectable()`](selectable.html#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") *method of* [`Selectable`](selectable.html#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
  prefs: []
  type: TYPE_NORMAL
- en: Replace all occurrences of [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") ‘old’ with the given [`Alias`](selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") object, returning a copy of this [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.4: The [`Selectable.replace_selectable()`](selectable.html#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") method is deprecated,
    and will be removed in a future release. Similar functionality is available via
    the sqlalchemy.sql.visitors module.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE522]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`FromClause.schema`](selectable.html#sqlalchemy.sql.expression.FromClause.schema
    "sqlalchemy.sql.expression.FromClause.schema") *attribute of* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  prefs: []
  type: TYPE_NORMAL
- en: Define the ‘schema’ attribute for this [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: This is typically `None` for most objects except that of [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), where it is taken as the value of the [`Table.schema`](#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table") argument.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE523]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`FromClause.select()`](selectable.html#sqlalchemy.sql.expression.FromClause.select
    "sqlalchemy.sql.expression.FromClause.select") *method of* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a SELECT of this [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE524]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`select()`](selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    - general purpose method which allows for arbitrary column lists.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE525]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ClauseElement.self_group()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.self_group
    "sqlalchemy.sql.expression.ClauseElement.self_group") *method of* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
  prefs: []
  type: TYPE_NORMAL
- en: Apply a ‘grouping’ to this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  prefs: []
  type: TYPE_NORMAL
- en: This method is overridden by subclasses to return a “grouping” construct, i.e.
    parenthesis. In particular it’s used by “binary” expressions to provide a grouping
    around themselves when placed into a larger expression, as well as by [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs when placed into the FROM clause
    of another [`select()`](selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select").
    (Note that subqueries should be normally created using the [`Select.alias()`](selectable.html#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") method, as many platforms require nested
    SELECT statements to be named).
  prefs: []
  type: TYPE_NORMAL
- en: As expressions are composed together, the application of [`self_group()`](#sqlalchemy.schema.Table.self_group
    "sqlalchemy.schema.Table.self_group") is automatic - end-user code should never
    need to use this method directly. Note that SQLAlchemy’s clause constructs take
    operator precedence into account - so parenthesis might not be needed, for example,
    in an expression like `x OR (y AND z)` - AND takes precedence over OR.
  prefs: []
  type: TYPE_NORMAL
- en: The base [`self_group()`](#sqlalchemy.schema.Table.self_group "sqlalchemy.schema.Table.self_group")
    method of [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") just returns self.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE526]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `NamedFromClause.table_valued()` *method of* `NamedFromClause`'
  prefs: []
  type: TYPE_NORMAL
- en: Return a `TableValuedColumn` object for this [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: A `TableValuedColumn` is a [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") that represents a complete row in a
    table. Support for this construct is backend dependent, and is supported in various
    forms by backends such as PostgreSQL, Oracle and SQL Server.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE527]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.4.0b2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Working with SQL Functions](../tutorial/data_select.html#tutorial-functions)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE528]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`FromClause.tablesample()`](selectable.html#sqlalchemy.sql.expression.FromClause.tablesample
    "sqlalchemy.sql.expression.FromClause.tablesample") *method of* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a TABLESAMPLE alias of this [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  prefs: []
  type: TYPE_NORMAL
- en: The return value is the [`TableSample`](selectable.html#sqlalchemy.sql.expression.TableSample
    "sqlalchemy.sql.expression.TableSample") construct also provided by the top-level
    [`tablesample()`](selectable.html#sqlalchemy.sql.expression.tablesample "sqlalchemy.sql.expression.tablesample")
    function.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`tablesample()`](selectable.html#sqlalchemy.sql.expression.tablesample "sqlalchemy.sql.expression.tablesample")
    - usage guidelines and parameters'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE529]'
  prefs: []
  type: TYPE_PRE
- en: Return a copy of this [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    associated with a different [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData").
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE530]'
  prefs: []
  type: TYPE_PRE
- en: 'Changed in version 1.4: The [`Table.to_metadata()`](#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata") function was renamed from [`Table.tometadata()`](#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata").'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`metadata` – Target [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    object, into which the new [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object will be created.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`schema` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'optional string name indicating the target schema. Defaults to the special
    symbol [`RETAIN_SCHEMA`](#sqlalchemy.schema.SchemaConst.RETAIN_SCHEMA "sqlalchemy.schema.SchemaConst.RETAIN_SCHEMA")
    which indicates that no change to the schema name should be made in the new [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"). If set to a string name, the new [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") will have this new name as the `.schema`. If set to
    `None`, the schema will be set to that of the schema set on the target [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData"), which is typically `None` as well, unless set explicitly:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE531]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`referred_schema_fn` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: optional callable which can be supplied in order to provide for the schema name
    that should be assigned to the referenced table of a [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint"). The callable accepts this parent [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), the target schema that we are changing to, the [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") object, and the existing “target schema”
    of that constraint. The function should return the string schema name that should
    be applied. To reset the schema to “none”, return the symbol `BLANK_SCHEMA`. To
    effect no change, return `None` or `RETAIN_SCHEMA`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Changed in version 1.4.33: The `referred_schema_fn` function may return the
    `BLANK_SCHEMA` or `RETAIN_SCHEMA` symbols.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE532]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`name` – optional string name indicating the target table name. If not specified
    or None, the table name is retained. This allows a [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") to be copied to the same [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") target with a new name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE533]'
  prefs: []
  type: TYPE_PRE
- en: Return a copy of this [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    associated with a different [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData").
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.4: [`Table.tometadata()`](#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata") is renamed to [`Table.to_metadata()`](#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata")'
  prefs: []
  type: TYPE_NORMAL
- en: See [`Table.to_metadata()`](#sqlalchemy.schema.Table.to_metadata "sqlalchemy.schema.Table.to_metadata")
    for a full description.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE534]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `Immutable.unique_params()` *method of* `Immutable`'
  prefs: []
  type: TYPE_NORMAL
- en: Return a copy with [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") elements replaced.
  prefs: []
  type: TYPE_NORMAL
- en: Same functionality as [`ClauseElement.params()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.params
    "sqlalchemy.sql.expression.ClauseElement.params"), except adds unique=True to
    affected bind parameters so that multiple statements can be used.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE535]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`TableClause.update()`](selectable.html#sqlalchemy.sql.expression.TableClause.update
    "sqlalchemy.sql.expression.TableClause.update") *method of* [`TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause")'
  prefs: []
  type: TYPE_NORMAL
- en: Generate an [`update()`](dml.html#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update")
    construct against this [`TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause").
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE536]'
  prefs: []
  type: TYPE_PRE
- en: See [`update()`](dml.html#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update")
    for argument and usage information.
  prefs: []
  type: TYPE_NORMAL
