- en: Describing Databases with MetaData
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 描述数据库与元数据
- en: 原文：[https://docs.sqlalchemy.org/en/20/core/metadata.html](https://docs.sqlalchemy.org/en/20/core/metadata.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/core/metadata.html](https://docs.sqlalchemy.org/en/20/core/metadata.html)
- en: This section discusses the fundamental [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table"),
    [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column") and [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") objects.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本节讨论了基本的[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")、[`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")和[`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")对象。
- en: See also
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[Working with Database Metadata](../tutorial/metadata.html#tutorial-working-with-metadata)
    - tutorial introduction to SQLAlchemy’s database metadata concept in the [SQLAlchemy
    Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用数据库元数据](../tutorial/metadata.html#tutorial-working-with-metadata) - SQLAlchemy的数据库元数据概念入门教程，位于[SQLAlchemy统一教程](../tutorial/index.html#unified-tutorial)中'
- en: 'A collection of metadata entities is stored in an object aptly named [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData"):'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 一个元数据实体的集合存储在一个名为[`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")的对象中：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData") is a
    container object that keeps together many different features of a database (or
    multiple databases) being described.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")是一个容器对象，它将数据库（或多个数据库）的许多不同特征组合在一起进行描述。'
- en: 'To represent a table, use the [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    class. Its two primary arguments are the table name, then the [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object which it will be associated with. The remaining
    positional arguments are mostly [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    objects describing each column:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要表示一个表，请使用[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")类。它的两个主要参数是表名称，然后是它将关联的[`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")对象。其余的位置参数大多是描述每列的[`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Above, a table called `user` is described, which contains four columns. The
    primary key of the table consists of the `user_id` column. Multiple columns may
    be assigned the `primary_key=True` flag which denotes a multi-column primary key,
    known as a *composite* primary key.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 上面描述了一个名为`user`的表，其中包含四列。表的主键由`user_id`列组成。可以将多个列分配`primary_key=True`标志，表示多列主键，称为*复合*主键。
- en: Note also that each column describes its datatype using objects corresponding
    to genericized types, such as [`Integer`](type_basics.html#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer") and [`String`](type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String"). SQLAlchemy features dozens of types of varying levels
    of specificity as well as the ability to create custom types. Documentation on
    the type system can be found at [SQL Datatype Objects](types.html).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意，每个列使用与通用化类型对应的对象来描述其数据类型，例如[`Integer`](type_basics.html#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer")和[`String`](type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String")。SQLAlchemy具有几十种不同级别的类型以及创建自定义类型的能力。有关类型系统的文档可以在[SQL数据类型对象](types.html)中找到。
- en: '## Accessing Tables and Columns'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '## 访问表和列'
- en: 'The [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    object contains all of the schema constructs we’ve associated with it. It supports
    a few methods of accessing these table objects, such as the `sorted_tables` accessor
    which returns a list of each [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object in order of foreign key dependency (that is, each table is preceded by
    all tables which it references):'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")对象包含了我们与其关联的所有模式构造。它支持几种访问这些表对象的方法，例如`sorted_tables`访问器，它以外键依赖顺序返回每个[`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象的列表（也就是说，每个表都在其引用的所有表之前）：'
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In most cases, individual [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects have been explicitly declared, and these objects are typically accessed
    directly as module-level variables in an application. Once a [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") has been defined, it has a full set of accessors which
    allow inspection of its properties. Given the following [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") definition:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，单个[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象已经被明确声明，并且这些对象通常直接作为应用程序中的模块级变量访问。
    一旦定义了一个[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")，它就有了一整套访问器，允许检查其属性。
    给定以下[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")定义：
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Note the [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    object used in this table - this construct defines a reference to a remote table,
    and is fully described in [Defining Foreign Keys](constraints.html#metadata-foreignkeys).
    Methods of accessing information about this table include:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意在这个表中使用的[`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")对象
    - 这个结构定义了对远程表的引用，并在[定义外键](constraints.html#metadata-foreignkeys)中进行了全面描述。 访问关于这个表的信息的方法包括：
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Tip
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The [`FromClause.c`](selectable.html#sqlalchemy.sql.expression.FromClause.c
    "sqlalchemy.sql.expression.FromClause.c") collection, synonymous with the [`FromClause.columns`](selectable.html#sqlalchemy.sql.expression.FromClause.columns
    "sqlalchemy.sql.expression.FromClause.columns") collection, is an instance of
    [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection"), which provides a **dictionary-like
    interface** to the collection of columns. Names are ordinarily accessed like attribute
    names, e.g. `employees.c.employee_name`. However for special names with spaces
    or those that match the names of dictionary methods such as [`ColumnCollection.keys()`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection.keys
    "sqlalchemy.sql.expression.ColumnCollection.keys") or [`ColumnCollection.values()`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection.values
    "sqlalchemy.sql.expression.ColumnCollection.values"), indexed access must be used,
    such as `employees.c['values']` or `employees.c["some column"]`. See [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") for further information.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FromClause.c`](selectable.html#sqlalchemy.sql.expression.FromClause.c "sqlalchemy.sql.expression.FromClause.c")集合，与[`FromClause.columns`](selectable.html#sqlalchemy.sql.expression.FromClause.columns
    "sqlalchemy.sql.expression.FromClause.columns")集合同义，是[`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")的一个实例，它提供了类似于字典的接口来访问列集合。 名称通常像属性名称那样访问，例如
    `employees.c.employee_name`。 但是，对于具有空格的特殊名称或与字典方法名称匹配的名称，例如[`ColumnCollection.keys()`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection.keys
    "sqlalchemy.sql.expression.ColumnCollection.keys")或[`ColumnCollection.values()`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection.values
    "sqlalchemy.sql.expression.ColumnCollection.values")，必须使用索引访问，例如 `employees.c[''values'']`
    或 `employees.c["some column"]`。 有关更多信息，请参阅[`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")。'
- en: Creating and Dropping Database Tables
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建和删除数据库表
- en: Once you’ve defined some [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects, assuming you’re working with a brand new database one thing you might
    want to do is issue CREATE statements for those tables and their related constructs
    (as an aside, it’s also quite possible that you *don’t* want to do this, if you
    already have some preferred methodology such as tools included with your database
    or an existing scripting system - if that’s the case, feel free to skip this section
    - SQLAlchemy has no requirement that it be used to create your tables).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您定义了一些[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象，假设您正在使用全新的数据库，您可能想要做的一件事是为这些表及其相关结构发出CREATE语句（顺便说一句，如果您已经有了一些首选的方法，比如与数据库一起提供的工具或现有的脚本系统
    - 如果是这种情况，请随意跳过此部分 - SQLAlchemy不要求使用它来创建您的表）。
- en: 'The usual way to issue CREATE is to use [`create_all()`](#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") on the [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object. This method will issue queries that first
    check for the existence of each individual table, and if not found will issue
    the CREATE statements:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 发出CREATE的常规方式是在[`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")对象上使用[`create_all()`](#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all")。此方法将发出查询，首先检查每个单独表的存在性，如果未找到，则发出CREATE语句：
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[`create_all()`](#sqlalchemy.schema.MetaData.create_all "sqlalchemy.schema.MetaData.create_all")
    creates foreign key constraints between tables usually inline with the table definition
    itself, and for this reason it also generates the tables in order of their dependency.
    There are options to change this behavior such that `ALTER TABLE` is used instead.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[`create_all()`](#sqlalchemy.schema.MetaData.create_all "sqlalchemy.schema.MetaData.create_all")通常在表定义本身内联创建表之间的外键约束，并且出于这个原因，它也按照它们的依赖顺序生成表。有选项可以更改此行为，使其使用`ALTER
    TABLE`。'
- en: Dropping all tables is similarly achieved using the [`drop_all()`](#sqlalchemy.schema.MetaData.drop_all
    "sqlalchemy.schema.MetaData.drop_all") method. This method does the exact opposite
    of [`create_all()`](#sqlalchemy.schema.MetaData.create_all "sqlalchemy.schema.MetaData.create_all")
    - the presence of each table is checked first, and tables are dropped in reverse
    order of dependency.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，使用[`drop_all()`](#sqlalchemy.schema.MetaData.drop_all "sqlalchemy.schema.MetaData.drop_all")方法可以删除所有表。此方法与[`create_all()`](#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all")完全相反-首先检查每个表的存在性，然后按依赖关系的相反顺序删除表。
- en: 'Creating and dropping individual tables can be done via the `create()` and
    `drop()` methods of [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table").
    These methods by default issue the CREATE or DROP regardless of the table being
    present:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 创建和删除单个表可以通过[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")的`create()`和`drop()`方法来完成。这些方法默认情况下会发出CREATE或DROP命令，而不管表是否存在：
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`drop()` method:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`drop()`方法：'
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To enable the “check first for the table existing” logic, add the `checkfirst=True`
    argument to `create()` or `drop()`:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用“首先检查表是否存在”的逻辑，请在`create()`或`drop()`中添加`checkfirst=True`参数：
- en: '[PRE8]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '## Altering Database Objects through Migrations'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '## 通过迁移修改数据库对象'
- en: While SQLAlchemy directly supports emitting CREATE and DROP statements for schema
    constructs, the ability to alter those constructs, usually via the ALTER statement
    as well as other database-specific constructs, is outside of the scope of SQLAlchemy
    itself. While it’s easy enough to emit ALTER statements and similar by hand, such
    as by passing a [`text()`](sqlelement.html#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")
    construct to [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") or by using the [`DDL`](ddl.html#sqlalchemy.schema.DDL
    "sqlalchemy.schema.DDL") construct, it’s a common practice to automate the maintenance
    of database schemas in relation to application code using schema migration tools.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然SQLAlchemy直接支持为模式构造发出CREATE和DROP语句，但是修改这些构造的能力，通常通过ALTER语句以及其他特定于数据库的构造，超出了SQLAlchemy本身的范围。虽然手动发出ALTER语句等很容易，例如通过将[`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")构造传递给[`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")或使用[`DDL`](ddl.html#sqlalchemy.schema.DDL
    "sqlalchemy.schema.DDL")构造，但通常的做法是使用模式迁移工具自动化维护数据库模式与应用程序代码的关系。
- en: The SQLAlchemy project offers the [Alembic](https://alembic.sqlalchemy.org)
    migration tool for this purpose. Alembic features a highly customizable environment
    and a minimalistic usage pattern, supporting such features as transactional DDL,
    automatic generation of “candidate” migrations, an “offline” mode which generates
    SQL scripts, and support for branch resolution.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy项目为此提供了[Alembic](https://alembic.sqlalchemy.org)迁移工具。Alembic具有高度可定制的环境和极简的使用模式，支持诸如事务DDL、自动生成“候选”迁移、生成SQL脚本的“脱机”模式以及分支解析支持等功能。
- en: 'Alembic supersedes the [SQLAlchemy-Migrate](https://github.com/openstack/sqlalchemy-migrate)
    project, which is the original migration tool for SQLAlchemy and is now considered
    legacy.  ## Specifying the Schema Name'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Alembic取代了[SQLAlchemy-Migrate](https://github.com/openstack/sqlalchemy-migrate)项目，这是SQLAlchemy的原始迁移工具，现在被视为遗留工具。##
    指定模式名称
- en: Most databases support the concept of multiple “schemas” - namespaces that refer
    to alternate sets of tables and other constructs. The server-side geometry of
    a “schema” takes many forms, including names of “schemas” under the scope of a
    particular database (e.g. PostgreSQL schemas), named sibling databases (e.g. MySQL
    / MariaDB access to other databases on the same server), as well as other concepts
    like tables owned by other usernames (Oracle, SQL Server) or even names that refer
    to alternate database files (SQLite ATTACH) or remote servers (Oracle DBLINK with
    synonyms).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数数据库支持多个“模式”（schemas）的概念 - 指代备选表格和其他结构的命名空间。一个“模式”的服务器端几何形状有多种形式，包括特定数据库范围内的“模式”名称（例如
    PostgreSQL 模式）、命名的同级数据库（例如 MySQL / MariaDB 访问同一服务器上的其他数据库）、以及其他概念，比如其他用户名拥有的表格（Oracle、SQL
    Server）甚至是指代备选数据库文件（SQLite ATTACH）或远程服务器（Oracle DBLINK with synonyms）的名称。
- en: What all of the above approaches have (mostly) in common is that there’s a way
    of referencing this alternate set of tables using a string name. SQLAlchemy refers
    to this name as the **schema name**. Within SQLAlchemy, this is nothing more than
    a string name which is associated with a [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object, and is then rendered into SQL statements in a manner appropriate to the
    target database such that the table is referenced in its remote “schema”, whatever
    mechanism that is on the target database.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 所有上述方法（大多数）共同之处在于有一种引用这个备选表格集的方式，使用一个字符串名称。SQLAlchemy 将这个名称称为**模式名称**。在SQLAlchemy中，这只是一个与[`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象关联的字符串名称，然后以适合目标数据库的方式渲染成 SQL 语句，以便表格在其远程“模式”中被引用，无论目标数据库上的机制是什么。
- en: The “schema” name may be associated directly with a [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") using the [`Table.schema`](#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table") argument; when using the ORM with [declarative table](../orm/declarative_tables.html)
    configuration, the parameter is passed using the `__table_args__` parameter dictionary.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: “模式”名称可以直接与[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")关联，使用[`Table.schema`](#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table")参数；当使用 ORM 与[声明式表格](../orm/declarative_tables.html)配置时，参数通过`__table_args__`参数字典传递。
- en: The “schema” name may also be associated with the [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object where it will take effect automatically for
    all [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") objects associated
    with that [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    that don’t otherwise specify their own name. Finally, SQLAlchemy also supports
    a “dynamic” schema name system that is often used for multi-tenant applications
    such that a single set of [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    metadata may refer to a dynamically configured set of schema names on a per-connection
    or per-statement basis.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: “模式”名称也可以与[`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")对象关联，在这种情况下，它将自动对所有与该[`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")关联的未另行指定名称的[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象生效。最后，SQLAlchemy还支持一种“动态”模式名称系统，通常用于多租户应用程序，以便单个[`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")元数据集可以根据每个连接或每个语句的基础动态配置的模式名称集。
- en: See also
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Explicit Schema Name with Declarative Table](../orm/declarative_tables.html#orm-declarative-table-schema-name)
    - schema name specification when using the ORM [declarative table](../orm/declarative_tables.html)
    configuration'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用声明式表格的显式模式名称](../orm/declarative_tables.html#orm-declarative-table-schema-name)
    - 在使用 ORM [声明式表格](../orm/declarative_tables.html)配置时指定模式名称'
- en: 'The most basic example is that of the [`Table.schema`](#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table") argument using a Core [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 最基本的例子是使用 Core [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    对象的[`Table.schema`](#sqlalchemy.schema.Table.params.schema "sqlalchemy.schema.Table")参数，如下所示：
- en: '[PRE9]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'SQL that is rendered using this [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table"),
    such as the SELECT statement below, will explicitly qualify the table name `financial_info`
    with the `remote_banks` schema name:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")渲染的 SQL，比如下面的
    SELECT 语句，将会明确使用`remote_banks`模式名称来限定表格名称`financial_info`：
- en: '[PRE10]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'When a [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") object
    is declared with an explicit schema name, it is stored in the internal [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") namespace using the combination of the schema and
    table name. We can view this in the [`MetaData.tables`](#sqlalchemy.schema.MetaData.tables
    "sqlalchemy.schema.MetaData.tables") collection by searching for the key `''remote_banks.financial_info''`:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用显式模式名称声明[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象时，它将使用模式和表名的组合存储在内部[`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")命名空间中。我们可以通过搜索键`'remote_banks.financial_info'`在[`MetaData.tables`](#sqlalchemy.schema.MetaData.tables
    "sqlalchemy.schema.MetaData.tables")集合中查看此内容：
- en: '[PRE11]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This dotted name is also what must be used when referring to the table for
    use with the [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    or [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") objects, even if the referring table
    is also in that same schema:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 此点名也是在引用用于与[`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")或[`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")对象一起使用的表时必须使用的内容，即使引用表也在同一模式中：
- en: '[PRE12]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The [`Table.schema`](#sqlalchemy.schema.Table.params.schema "sqlalchemy.schema.Table")
    argument may also be used with certain dialects to indicate a multiple-token (e.g.
    dotted) path to a particular table. This is particularly important on a database
    such as Microsoft SQL Server where there are often dotted “database/owner” tokens.
    The tokens may be placed directly in the name at once, such as:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 参数[`Table.schema`](#sqlalchemy.schema.Table.params.schema "sqlalchemy.schema.Table")也可以与某些方言一起使用，以指示到特定表的多个标记路径（例如，点分）。
- en: '[PRE13]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: See also
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Multipart Schema Names](../dialects/mssql.html#multipart-schema-names) - describes
    use of dotted schema names with the SQL Server dialect.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '[多部分模式名称](../dialects/mssql.html#multipart-schema-names) - 描述了在 SQL Server
    方言中使用点分模式名称的情况。'
- en: '[Reflecting Tables from Other Schemas](reflection.html#metadata-reflection-schemas)'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[从其他模式反射表](reflection.html#metadata-reflection-schemas)'
- en: '### Specifying a Default Schema Name with MetaData'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '### 使用 MetaData 指定默认模式名称'
- en: 'The [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    object may also set up an explicit default option for all [`Table.schema`](#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table") parameters by passing the [`MetaData.schema`](#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData") argument to the top level [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") construct:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")对象还可以通过将[`MetaData.schema`](#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData")参数传递给顶层[`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")构造来为所有[`Table.schema`](#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table")参数设置一个明确的默认选项：'
- en: '[PRE14]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Above, for any [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object (or [`Sequence`](defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    object directly associated with the [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData"))
    which leaves the [`Table.schema`](#sqlalchemy.schema.Table.params.schema "sqlalchemy.schema.Table")
    parameter at its default of `None` will instead act as though the parameter were
    set to the value `"remote_banks"`. This includes that the [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") is cataloged in the [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") using the schema-qualified name, that is:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 以上，对于任何（直接与[`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")相关联的[`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象或[`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")对象）将[`Table.schema`](#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table")参数保持在其默认值`None`的情况，将会作为参数设置为值`"remote_banks"`。这包括使用模式限定名称在[`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")中对[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")进行目录化，即：
- en: '[PRE15]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'When using the [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") or [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") objects to refer to this table, either
    the schema-qualified name or the non-schema-qualified name may be used to refer
    to the `remote_banks.financial_info` table:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用[`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")或[`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")对象引用此表时，可以使用模式限定名称或非模式限定名称来引用`remote_banks.financial_info`表：
- en: '[PRE16]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'When using a [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    object that sets [`MetaData.schema`](#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData"), a [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    that wishes to specify that it should not be schema qualified may use the special
    symbol `BLANK_SCHEMA`:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用设置了[`MetaData.schema`](#sqlalchemy.schema.MetaData.params.schema "sqlalchemy.schema.MetaData")的[`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")对象时，希望指定不应限定模式的[`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")可以使用特殊符号`BLANK_SCHEMA`：
- en: '[PRE17]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: See also
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`MetaData.schema`](#sqlalchemy.schema.MetaData.params.schema "sqlalchemy.schema.MetaData")  ###
    Applying Dynamic Schema Naming Conventions'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MetaData.schema`](#sqlalchemy.schema.MetaData.params.schema "sqlalchemy.schema.MetaData")  ###
    应用动态模式命名约定'
- en: The names used by the [`Table.schema`](#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table") parameter may also be applied against a lookup that
    is dynamic on a per-connection or per-execution basis, so that for example in
    multi-tenant situations, each transaction or statement may be targeted at a specific
    set of schema names that change. The section [Translation of Schema Names](connections.html#schema-translating)
    describes how this feature is used.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Table.schema`](#sqlalchemy.schema.Table.params.schema "sqlalchemy.schema.Table")参数使用的名称也可以应用于对每个连接或每个执行动态的查找，因此例如在多租户情况下，每个事务或语句可能针对一组不同的模式名称进行定位。本节[模式名称的翻译](connections.html#schema-translating)描述了如何使用此功能。'
- en: See also
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[Translation of Schema Names](connections.html#schema-translating)  ### Setting
    a Default Schema for New Connections'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[模式名称的翻译](connections.html#schema-translating)  ### 为新连接设置默认模式'
- en: The above approaches all refer to methods of including an explicit schema-name
    within SQL statements. Database connections in fact feature the concept of a “default”
    schema, which is the name of the “schema” (or database, owner, etc.) that takes
    place if a table name is not explicitly schema-qualified. These names are usually
    configured at the login level, such as when connecting to a PostgreSQL database,
    the default “schema” is called “public”.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 上述方法都涉及在SQL语句中包含显式模式名称的方法。数据库连接实际上具有“默认”模式的概念，这是一个“模式”（或数据库、所有者等）的名称，如果表名没有显式地限定模式，则会发生。这些名称通常在登录级别配置，例如连接到PostgreSQL数据库时，默认的“模式”称为“public”。
- en: 'There are often cases where the default “schema” cannot be set via the login
    itself and instead would usefully be configured each time a connection is made,
    using a statement such as “SET SEARCH_PATH” on PostgreSQL or “ALTER SESSION” on
    Oracle. These approaches may be achieved by using the `PoolEvents.connect()` event,
    which allows access to the DBAPI connection when it is first created. For example,
    to set the Oracle CURRENT_SCHEMA variable to an alternate name:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，默认的“模式”无法通过登录本身设置，而是在每次建立连接时有用地配置，使用诸如在PostgreSQL上使用“SET SEARCH_PATH”或在Oracle上使用“ALTER
    SESSION”的语句。这些方法可以通过使用`PoolEvents.connect()`事件来实现，该事件允许在首次创建DBAPI连接时访问该连接。例如，要将Oracle的CURRENT_SCHEMA变量设置为替代名称：
- en: '[PRE18]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Above, the `set_current_schema()` event handler will take place immediately
    when the above [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    first connects; as the event is “inserted” into the beginning of the handler list,
    it will also take place before the dialect’s own event handlers are run, in particular
    including the one that will determine the “default schema” for the connection.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述情况中，当上述[`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")首次连接时，`set_current_schema()`事件处理程序将立即发生；由于该事件被“插入”到处理程序列表的开头，因此它将在方言自己的事件处理程序运行之前发生，特别是包括确定连接的“默认模式”的事件处理程序。
- en: For other databases, consult the database and/or dialect documentation for specific
    information regarding how default schemas are configured.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 对于其他数据库，请查阅特定信息的数据库和/或方言文档，了解如何配置默认模式的详细信息。
- en: 'Changed in version 1.4.0b2: The above recipe now works without the need to
    establish additional event handlers.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本 1.4.0b2 中更改：上述方法现在无需建立额外的事件处理程序即可运行。
- en: See also
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Setting Alternate Search Paths on Connect](../dialects/postgresql.html#postgresql-alternate-search-path)
    - in the [PostgreSQL](../dialects/postgresql.html) dialect documentation.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '[在 Connect 上设置备用搜索路径](../dialects/postgresql.html#postgresql-alternate-search-path)
    - 在 [PostgreSQL](../dialects/postgresql.html) 方言文档中。'
- en: Schemas and Reflection
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式和反射
- en: The schema feature of SQLAlchemy interacts with the table reflection feature
    introduced at [Reflecting Database Objects](reflection.html). See the section
    [Reflecting Tables from Other Schemas](reflection.html#metadata-reflection-schemas)
    for additional details on how this works.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 的模式功能与在 [反射数据库对象](reflection.html) 中介绍的表反射功能相互作用。请参阅 [从其他模式反射表](reflection.html#metadata-reflection-schemas)
    部分，了解此功能的更多详细信息。
- en: Backend-Specific Options
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 后端特定选项
- en: '[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") supports database-specific
    options. For example, MySQL has different table backend types, including “MyISAM”
    and “InnoDB”. This can be expressed with [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    using `mysql_engine`:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") 支持特定于数据库的选项。例如，MySQL
    有不同的表后端类型，包括“MyISAM”和“InnoDB”。这可以通过 [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    使用 `mysql_engine` 表达：'
- en: '[PRE19]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Other backends may support table-level options as well - these would be described
    in the individual documentation sections for each dialect.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 其他后端可能也支持表级选项 - 这些将在每个方言的个别文档部分中描述。
- en: Column, Table, MetaData API
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列、表、MetaData API
- en: '| Object Name | Description |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [Column](#sqlalchemy.schema.Column) | Represents a column in a database table.
    |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| [列](#sqlalchemy.schema.Column) | 代表数据库表中的列。 |'
- en: '| [insert_sentinel](#sqlalchemy.schema.insert_sentinel)([name, type_], *, [default,
    omit_from_statements]) | Provides a surrogate [`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") that will act as a dedicated insert [sentinel](../glossary.html#term-sentinel)
    column, allowing efficient bulk inserts with deterministic RETURNING sorting for
    tables that don’t otherwise have qualifying primary key configurations. |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| [insert_sentinel](#sqlalchemy.schema.insert_sentinel)([name, type_], *, [default,
    omit_from_statements]) | 提供一个虚拟的 [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")，将作为专用的插入
    [sentinel](../glossary.html#term-sentinel) 列，允许对没有其他符合主键配置的表进行高效的批量插入，并具有确定性的
    RETURNING 排序。 |'
- en: '| [MetaData](#sqlalchemy.schema.MetaData) | A collection of [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects and their associated schema constructs. |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| [MetaData](#sqlalchemy.schema.MetaData) | 一组 [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 对象及其关联的模式构造。 |'
- en: '| [SchemaConst](#sqlalchemy.schema.SchemaConst) | An enumeration. |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| [SchemaConst](#sqlalchemy.schema.SchemaConst) | 一个枚举。 |'
- en: '| [SchemaItem](#sqlalchemy.schema.SchemaItem) | Base class for items that define
    a database schema. |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| [SchemaItem](#sqlalchemy.schema.SchemaItem) | 用于定义数据库模式的项目的基类。 |'
- en: '| [Table](#sqlalchemy.schema.Table) | Represent a table in a database. |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| [表](#sqlalchemy.schema.Table) | 代表数据库中的表。 |'
- en: '[PRE20]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Refers to [`SchemaConst.BLANK_SCHEMA`](#sqlalchemy.schema.SchemaConst.BLANK_SCHEMA
    "sqlalchemy.schema.SchemaConst.BLANK_SCHEMA").
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 指的是 [`SchemaConst.BLANK_SCHEMA`](#sqlalchemy.schema.SchemaConst.BLANK_SCHEMA
    "sqlalchemy.schema.SchemaConst.BLANK_SCHEMA")。
- en: '[PRE21]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Refers to [`SchemaConst.RETAIN_SCHEMA`](#sqlalchemy.schema.SchemaConst.RETAIN_SCHEMA
    "sqlalchemy.schema.SchemaConst.RETAIN_SCHEMA")
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 指的是 [`SchemaConst.RETAIN_SCHEMA`](#sqlalchemy.schema.SchemaConst.RETAIN_SCHEMA
    "sqlalchemy.schema.SchemaConst.RETAIN_SCHEMA")
- en: '[PRE22]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Represents a column in a database table.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 代表数据库表中的列。
- en: '**Members**'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__eq__()](#sqlalchemy.schema.Column.__eq__), [__init__()](#sqlalchemy.schema.Column.__init__),
    [__le__()](#sqlalchemy.schema.Column.__le__), [__lt__()](#sqlalchemy.schema.Column.__lt__),
    [__ne__()](#sqlalchemy.schema.Column.__ne__), [all_()](#sqlalchemy.schema.Column.all_),
    [anon_key_label](#sqlalchemy.schema.Column.anon_key_label), [anon_label](#sqlalchemy.schema.Column.anon_label),
    [any_()](#sqlalchemy.schema.Column.any_), [argument_for()](#sqlalchemy.schema.Column.argument_for),
    [asc()](#sqlalchemy.schema.Column.asc), [between()](#sqlalchemy.schema.Column.between),
    [bitwise_and()](#sqlalchemy.schema.Column.bitwise_and), [bitwise_lshift()](#sqlalchemy.schema.Column.bitwise_lshift),
    [bitwise_not()](#sqlalchemy.schema.Column.bitwise_not), [bitwise_or()](#sqlalchemy.schema.Column.bitwise_or),
    [bitwise_rshift()](#sqlalchemy.schema.Column.bitwise_rshift), [bitwise_xor()](#sqlalchemy.schema.Column.bitwise_xor),
    [bool_op()](#sqlalchemy.schema.Column.bool_op), [cast()](#sqlalchemy.schema.Column.cast),
    [collate()](#sqlalchemy.schema.Column.collate), [compare()](#sqlalchemy.schema.Column.compare),
    [compile()](#sqlalchemy.schema.Column.compile), [concat()](#sqlalchemy.schema.Column.concat),
    [contains()](#sqlalchemy.schema.Column.contains), [copy()](#sqlalchemy.schema.Column.copy),
    [desc()](#sqlalchemy.schema.Column.desc), [dialect_kwargs](#sqlalchemy.schema.Column.dialect_kwargs),
    [dialect_options](#sqlalchemy.schema.Column.dialect_options), [distinct()](#sqlalchemy.schema.Column.distinct),
    [endswith()](#sqlalchemy.schema.Column.endswith), [expression](#sqlalchemy.schema.Column.expression),
    [foreign_keys](#sqlalchemy.schema.Column.foreign_keys), [get_children()](#sqlalchemy.schema.Column.get_children),
    [icontains()](#sqlalchemy.schema.Column.icontains), [iendswith()](#sqlalchemy.schema.Column.iendswith),
    [ilike()](#sqlalchemy.schema.Column.ilike), [in_()](#sqlalchemy.schema.Column.in_),
    [index](#sqlalchemy.schema.Column.index), [info](#sqlalchemy.schema.Column.info),
    [inherit_cache](#sqlalchemy.schema.Column.inherit_cache), [is_()](#sqlalchemy.schema.Column.is_),
    [is_distinct_from()](#sqlalchemy.schema.Column.is_distinct_from), [is_not()](#sqlalchemy.schema.Column.is_not),
    [is_not_distinct_from()](#sqlalchemy.schema.Column.is_not_distinct_from), [isnot()](#sqlalchemy.schema.Column.isnot),
    [isnot_distinct_from()](#sqlalchemy.schema.Column.isnot_distinct_from), [istartswith()](#sqlalchemy.schema.Column.istartswith),
    [key](#sqlalchemy.schema.Column.key), [kwargs](#sqlalchemy.schema.Column.kwargs),
    [label()](#sqlalchemy.schema.Column.label), [like()](#sqlalchemy.schema.Column.like),
    [match()](#sqlalchemy.schema.Column.match), [not_ilike()](#sqlalchemy.schema.Column.not_ilike),
    [not_in()](#sqlalchemy.schema.Column.not_in), [not_like()](#sqlalchemy.schema.Column.not_like),
    [notilike()](#sqlalchemy.schema.Column.notilike), [notin_()](#sqlalchemy.schema.Column.notin_),
    [notlike()](#sqlalchemy.schema.Column.notlike), [nulls_first()](#sqlalchemy.schema.Column.nulls_first),
    [nulls_last()](#sqlalchemy.schema.Column.nulls_last), [nullsfirst()](#sqlalchemy.schema.Column.nullsfirst),
    [nullslast()](#sqlalchemy.schema.Column.nullslast), [op()](#sqlalchemy.schema.Column.op),
    [operate()](#sqlalchemy.schema.Column.operate), [params()](#sqlalchemy.schema.Column.params),
    [proxy_set](#sqlalchemy.schema.Column.proxy_set), [references()](#sqlalchemy.schema.Column.references),
    [regexp_match()](#sqlalchemy.schema.Column.regexp_match), [regexp_replace()](#sqlalchemy.schema.Column.regexp_replace),
    [reverse_operate()](#sqlalchemy.schema.Column.reverse_operate), [self_group()](#sqlalchemy.schema.Column.self_group),
    [shares_lineage()](#sqlalchemy.schema.Column.shares_lineage), [startswith()](#sqlalchemy.schema.Column.startswith),
    [timetuple](#sqlalchemy.schema.Column.timetuple), [unique](#sqlalchemy.schema.Column.unique),
    [unique_params()](#sqlalchemy.schema.Column.unique_params)'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '[__eq__()](#sqlalchemy.schema.Column.__eq__), [__init__()](#sqlalchemy.schema.Column.__init__),
    [__le__()](#sqlalchemy.schema.Column.__le__), [__lt__()](#sqlalchemy.schema.Column.__lt__),
    [__ne__()](#sqlalchemy.schema.Column.__ne__), [all_()](#sqlalchemy.schema.Column.all_),
    [anon_key_label](#sqlalchemy.schema.Column.anon_key_label), [anon_label](#sqlalchemy.schema.Column.anon_label),
    [any_()](#sqlalchemy.schema.Column.any_), [argument_for()](#sqlalchemy.schema.Column.argument_for),
    [asc()](#sqlalchemy.schema.Column.asc), [between()](#sqlalchemy.schema.Column.between),
    [bitwise_and()](#sqlalchemy.schema.Column.bitwise_and), [bitwise_lshift()](#sqlalchemy.schema.Column.bitwise_lshift),
    [bitwise_not()](#sqlalchemy.schema.Column.bitwise_not), [bitwise_or()](#sqlalchemy.schema.Column.bitwise_or),
    [bitwise_rshift()](#sqlalchemy.schema.Column.bitwise_rshift), [bitwise_xor()](#sqlalchemy.schema.Column.bitwise_xor),
    [bool_op()](#sqlalchemy.schema.Column.bool_op), [cast()](#sqlalchemy.schema.Column.cast),
    [collate()](#sqlalchemy.schema.Column.collate), [compare()](#sqlalchemy.schema.Column.compare),
    [compile()](#sqlalchemy.schema.Column.compile), [concat()](#sqlalchemy.schema.Column.concat),
    [contains()](#sqlalchemy.schema.Column.contains), [copy()](#sqlalchemy.schema.Column.copy),
    [desc()](#sqlalchemy.schema.Column.desc), [dialect_kwargs](#sqlalchemy.schema.Column.dialect_kwargs),
    [dialect_options](#sqlalchemy.schema.Column.dialect_options), [distinct()](#sqlalchemy.schema.Column.distinct),
    [endswith()](#sqlalchemy.schema.Column.endswith), [expression](#sqlalchemy.schema.Column.expression),
    [foreign_keys](#sqlalchemy.schema.Column.foreign_keys), [get_children()](#sqlalchemy.schema.Column.get_children),
    [icontains()](#sqlalchemy.schema.Column.icontains), [iendswith()](#sqlalchemy.schema.Column.iendswith),
    [ilike()](#sqlalchemy.schema.Column.ilike), [in_()](#sqlalchemy.schema.Column.in_),
    [index](#sqlalchemy.schema.Column.index), [info](#sqlalchemy.schema.Column.info),
    [inherit_cache](#sqlalchemy.schema.Column.inherit_cache), [is_()](#sqlalchemy.schema.Column.is_),
    [is_distinct_from()](#sqlalchemy.schema.Column.is_distinct_from), [is_not()](#sqlalchemy.schema.Column.is_not),
    [is_not_distinct_from()](#sqlalchemy.schema.Column.is_not_distinct_from), [isnot()](#sqlalchemy.schema.Column.isnot),
    [isnot_distinct_from()](#sqlalchemy.schema.Column.isnot_distinct_from), [istartswith()](#sqlalchemy.schema.Column.istartswith),
    [key](#sqlalchemy.schema.Column.key), [kwargs](#sqlalchemy.schema.Column.kwargs),
    [label()](#sqlalchemy.schema.Column.label), [like()](#sqlalchemy.schema.Column.like),
    [match()](#sqlalchemy.schema.Column.match), [not_ilike()](#sqlalchemy.schema.Column.not_ilike),
    [not_in()](#sqlalchemy.schema.Column.not_in), [not_like()](#sqlalchemy.schema.Column.not_like),
    [notilike()](#sqlalchemy.schema.Column.notilike), [notin_()](#sqlalchemy.schema.Column.notin_),
    [notlike()](#sqlalchemy.schema.Column.notlike), [nulls_first()](#sqlalchemy.schema.Column.nulls_first),
    [nulls_last()](#sqlalchemy.schema.Column.nulls_last), [nullsfirst()](#sqlalchemy.schema.Column.nullsfirst),
    [nullslast()](#sqlalchemy.schema.Column.nullslast), [op()](#sqlalchemy.schema.Column.op),
    [operate()](#sqlalchemy.schema.Column.operate), [params()](#sqlalchemy.schema.Column.params),
    [proxy_set](#sqlalchemy.schema.Column.proxy_set), [references()](#sqlalchemy.schema.Column.references),
    [regexp_match()](#sqlalchemy.schema.Column.regexp_match), [regexp_replace()](#sqlalchemy.schema.Column.regexp_replace),
    [reverse_operate()](#sqlalchemy.schema.Column.reverse_operate), [self_group()](#sqlalchemy.schema.Column.self_group),
    [shares_lineage()](#sqlalchemy.schema.Column.shares_lineage), [startswith()](#sqlalchemy.schema.Column.startswith),
    [timetuple](#sqlalchemy.schema.Column.timetuple), [unique](#sqlalchemy.schema.Column.unique),
    [unique_params()](#sqlalchemy.schema.Column.unique_params)'
- en: '**Class signature**'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    ([`sqlalchemy.sql.base.DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs"), [`sqlalchemy.schema.SchemaItem`](#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem"), [`sqlalchemy.sql.expression.ColumnClause`](sqlelement.html#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause"))
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.schema.Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")（[`sqlalchemy.sql.base.DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")，[`sqlalchemy.schema.SchemaItem`](#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem")，[`sqlalchemy.sql.expression.ColumnClause`](sqlelement.html#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause")）
- en: '[PRE23]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__eq__` *method
    of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") *的* `sqlalchemy.sql.expression.ColumnOperators.__eq__`
    *方法*'
- en: Implement the `==` operator.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`==`运算符。
- en: In a column context, produces the clause `a = b`. If the target is `None`, produces
    `a IS NULL`.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句`a = b`。如果目标是`None`，则生成`a IS NULL`。
- en: '[PRE24]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Construct a new `Column` object.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个新的`Column`对象。
- en: 'Parameters:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`name` –'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` –'
- en: The name of this column as represented in the database. This argument may be
    the first positional argument, or specified via keyword.
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在数据库中表示此列的名称。此参数可以是第一个位置参数，也可以通过关键字指定。
- en: Names which contain no upper case characters will be treated as case insensitive
    names, and will not be quoted unless they are a reserved word. Names with any
    number of upper case characters will be quoted and sent exactly. Note that this
    behavior applies even for databases which standardize upper case names as case
    insensitive such as Oracle.
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不包含大写字符的名称将被视为大小写不敏感的名称，并且除非它们是保留字，否则不会被引用。包含任意数量大写字符的名称将被引用并发送完全相同。请注意，即使对于标准化大写名称为大小写不敏感的数据库（例如Oracle），此行为也适用。
- en: The name field may be omitted at construction time and applied later, at any
    time before the Column is associated with a [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"). This is to support convenient usage within the [`declarative`](../orm/extensions/declarative/api.html#module-sqlalchemy.ext.declarative
    "sqlalchemy.ext.declarative") extension.
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 名称字段可以在构建时省略，并在与[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")关联之前的任何时候应用。这是为了支持在[`declarative`](../orm/extensions/declarative/api.html#module-sqlalchemy.ext.declarative
    "sqlalchemy.ext.declarative")扩展中的方便使用。
- en: '`type_` –'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type_` –'
- en: 'The column’s type, indicated using an instance which subclasses [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"). If no arguments are required for the type, the
    class of the type can be sent as well, e.g.:'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 列的类型，使用一个继承自[`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine")的实例来表示。如果类型不需要参数，则也可以发送类型的类，例如：
- en: '[PRE25]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The `type` argument may be the second positional argument or specified by keyword.
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`type`参数可以是第二个位置参数或通过关键字指定。'
- en: If the `type` is `None` or is omitted, it will first default to the special
    type [`NullType`](type_api.html#sqlalchemy.types.NullType "sqlalchemy.types.NullType").
    If and when this [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    is made to refer to another column using [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") and/or [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint"), the type of the remote-referenced column
    will be copied to this column as well, at the moment that the foreign key is resolved
    against that remote [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    object.
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果`type`为`None`或省略，则首先默认为特殊类型[`NullType`](type_api.html#sqlalchemy.types.NullType
    "sqlalchemy.types.NullType")。如果并且当此[`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")被指定为引用另一列时，使用[`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey")和/或[`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")，远程引用列的类型也将被复制到此列中，在解析外键与该远程[`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象相匹配的时刻。
- en: '`*args` – Additional positional arguments include various [`SchemaItem`](#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem") derived constructs which will be applied as options
    to the column. These include instances of [`Constraint`](constraints.html#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint"), [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey"), [`ColumnDefault`](defaults.html#sqlalchemy.schema.ColumnDefault
    "sqlalchemy.schema.ColumnDefault"), [`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence"), [`Computed`](defaults.html#sqlalchemy.schema.Computed
    "sqlalchemy.schema.Computed") [`Identity`](defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity"). In some cases an equivalent keyword argument is
    available such as `server_default`, `default` and `unique`.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*args` – 附加的位置参数包括各种派生自[`SchemaItem`](#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")的构造，这些构造将作为选项应用于列。这些包括[`Constraint`](constraints.html#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint")、[`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey")、[`ColumnDefault`](defaults.html#sqlalchemy.schema.ColumnDefault
    "sqlalchemy.schema.ColumnDefault")、[`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")、[`Computed`](defaults.html#sqlalchemy.schema.Computed
    "sqlalchemy.schema.Computed")和[`Identity`](defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity")的实例。在某些情况下，可能会提供等效的关键字参数，例如`server_default`、`default`和`unique`。'
- en: '`autoincrement` –'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoincrement` –'
- en: Set up “auto increment” semantics for an **integer primary key column with no
    foreign key dependencies** (see later in this docstring for a more specific definition).
    This may influence the [DDL](../glossary.html#term-DDL) that will be emitted for
    this column during a table create, as well as how the column will be considered
    when INSERT statements are compiled and executed.
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为**没有外键依赖的整数主键列设置“自动递增”语义**（有关更具体的定义，请参见本文档字符串后面）。这可能会影响在创建表期间为此列发出的[DDL](../glossary.html#term-DDL)，以及在编译和执行INSERT语句时如何考虑该列。
- en: The default value is the string `"auto"`, which indicates that a single-column
    (i.e. non-composite) primary key that is of an INTEGER type with no other client-side
    or server-side default constructs indicated should receive auto increment semantics
    automatically. Other values include `True` (force this column to have auto-increment
    semantics for a [composite primary key](../glossary.html#term-composite-primary-key)
    as well), `False` (this column should never have auto-increment semantics), and
    the string `"ignore_fk"` (special-case for foreign key columns, see below).
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认值是字符串`"auto"`，表示应自动为单列（即非复合）主键提供自动递增语义，该主键为INTEGER类型且没有其他客户端或服务器端默认构造指示。其他值包括`True`（强制此列具有自动递增语义以供[复合主键](../glossary.html#term-composite-primary-key)使用）、`False`（此列永远不应具有自动递增语义）和字符串`"ignore_fk"`（外键列的特殊情况，请参见下文）。
- en: 'The term “auto increment semantics” refers both to the kind of DDL that will
    be emitted for the column within a CREATE TABLE statement, when methods such as
    [`MetaData.create_all()`](#sqlalchemy.schema.MetaData.create_all "sqlalchemy.schema.MetaData.create_all")
    and [`Table.create()`](#sqlalchemy.schema.Table.create "sqlalchemy.schema.Table.create")
    are invoked, as well as how the column will be considered when an INSERT statement
    is compiled and emitted to the database:'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “自动递增语义”一词既指在CREATE TABLE语句中为列发出的DDL的类型，也指在调用诸如[`MetaData.create_all()`](#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all")和[`Table.create()`](#sqlalchemy.schema.Table.create
    "sqlalchemy.schema.Table.create")等方法时，以及在编译和发出INSERT语句到数据库时如何考虑该列：
- en: '`DDL rendering` (i.e. [`MetaData.create_all()`](#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all"), [`Table.create()`](#sqlalchemy.schema.Table.create
    "sqlalchemy.schema.Table.create")): When used on a [`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") that has no other default-generating construct associated
    with it (such as a [`Sequence`](defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    or [`Identity`](defaults.html#sqlalchemy.schema.Identity "sqlalchemy.schema.Identity")
    construct), the parameter will imply that database-specific keywords such as PostgreSQL
    `SERIAL`, MySQL `AUTO_INCREMENT`, or `IDENTITY` on SQL Server should also be rendered.
    Not every database backend has an “implied” default generator available; for example
    the Oracle backend always needs an explicit construct such as [`Identity`](defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity") to be included with a [`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") in order for the DDL rendered to include auto-generating
    constructs to also be produced in the database.'
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DDL 渲染`（即，[`MetaData.create_all()`](#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all")，[`Table.create()`](#sqlalchemy.schema.Table.create
    "sqlalchemy.schema.Table.create")）：当用于没有其他默认生成构造与之关联的 [`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")（例如 [`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") 或 [`Identity`](defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity") 构造）时，该参数将暗示应该渲染数据库特定的关键字，如 PostgreSQL 中的 `SERIAL`，MySQL
    中的 `AUTO_INCREMENT`，或 SQL Server 中的 `IDENTITY`。并非每个数据库后端都有“隐式”的默认生成器可用；例如，Oracle
    后端总是需要一个显式的构造，例如 [`Identity`](defaults.html#sqlalchemy.schema.Identity "sqlalchemy.schema.Identity")，以便在渲染的
    DDL 中包括自动生成的构造，也在数据库中生成。'
- en: '`INSERT semantics` (i.e. when a [`insert()`](dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert") construct is compiled into a SQL string and
    is then executed on a database using [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") or equivalent): A single-row INSERT statement
    will be known to produce a new integer primary key value automatically for this
    column, which will be accessible after the statement is invoked via the [`CursorResult.inserted_primary_key`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key") attribute upon the [`Result`](connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object. This also applies towards use of the ORM when
    ORM-mapped objects are persisted to the database, indicating that a new integer
    primary key will be available to become part of the [identity key](../glossary.html#term-identity-key)
    for that object. This behavior takes place regardless of what DDL constructs are
    associated with the [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    and is independent of the “DDL Rendering” behavior discussed in the previous note
    above.'
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`INSERT` 语义（即，当 [`insert()`](dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert")
    构造编译成 SQL 字符串并使用 [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") 或等效方法在数据库上执行时）：单行 INSERT 语句将自动为此列生成一个新的整数主键值，该值在语句被调用后可通过
    [`Result`](connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    对象上的 [`CursorResult.inserted_primary_key`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key") 属性访问。当使用 ORM 持久化 ORM 映射对象到数据库时，这也适用，表示一个新的整数主键将可用作该对象的
    [identity key](../glossary.html#term-identity-key) 的一部分。无论与 [`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 关联的 DDL 构造是什么，此行为都会发生，并且与上面讨论的“DDL 渲染”行为无关。'
- en: The parameter may be set to `True` to indicate that a column which is part of
    a composite (i.e. multi-column) primary key should have autoincrement semantics,
    though note that only one column within a primary key may have this setting. It
    can also be set to `True` to indicate autoincrement semantics on a column that
    has a client-side or server-side default configured, however note that not all
    dialects can accommodate all styles of default as an “autoincrement”. It can also
    be set to `False` on a single-column primary key that has a datatype of INTEGER
    in order to disable auto increment semantics for that column.
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该参数可以设置为 `True`，以指示作为复合（即多列）主键的列应具有自动递增语义，但请注意，主键中仅有一个列可以具有此设置。它还可以设置为 `True`，以指示在具有客户端或服务器端默认配置的列上具有自动递增语义，但请注意，并非所有方言都可以适应所有样式的默认值作为“自动递增”。它还可以在具有
    INTEGER 数据类型的单列主键上设置为 `False`，以禁用该列的自动递增语义。
- en: 'The setting *only* has an effect for columns which are:'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*仅*对以下列有效：'
- en: Integer derived (i.e. INT, SMALLINT, BIGINT).
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 整数衍生（即 INT、SMALLINT、BIGINT）。
- en: Part of the primary key
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主键的一部分
- en: 'Not referring to another column via [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey"), unless the value is specified as `''ignore_fk''`:'
  id: totrans-130
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不通过[`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")来引用另一列，除非该值被指定为`'ignore_fk'`：
- en: '[PRE26]'
  id: totrans-131
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: It is typically not desirable to have “autoincrement” enabled on a column that
    refers to another via foreign key, as such a column is required to refer to a
    value that originates from elsewhere.
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通常不希望启用“自动递增”功能于通过外键引用另一列的情况，因为这样的列必须引用源自其他地方的值。
- en: 'The setting has these effects on columns that meet the above criteria:'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该设置对满足上述条件的列有以下效果：
- en: 'DDL issued for the column, if the column does not already include a default
    generating construct supported by the backend such as [`Identity`](defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity"), will include database-specific keywords intended
    to signify this column as an “autoincrement” column for specific backends. Behavior
    for primary SQLAlchemy dialects includes:'
  id: totrans-134
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果列尚未包括由后端支持的默认生成结构（如 [`Identity`](defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity")），则为该列发出的 DDL 将包含特定于数据库的关键字，用于表示该列为特定后端的“自动递增”列。主要
    SQLAlchemy 方言的行为包括：
- en: AUTO INCREMENT on MySQL and MariaDB
  id: totrans-135
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL 和 MariaDB 上的 AUTO INCREMENT
- en: SERIAL on PostgreSQL
  id: totrans-136
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 PostgreSQL 上的 SERIAL
- en: IDENTITY on MS-SQL - this occurs even without the [`Identity`](defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity") construct as the [`Column.autoincrement`](#sqlalchemy.schema.Column.params.autoincrement
    "sqlalchemy.schema.Column") parameter pre-dates this construct.
  id: totrans-137
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: MS-SQL 上的 IDENTITY - 即使没有 [`Identity`](defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity") 结构，这也会发生，因为 [`Column.autoincrement`](#sqlalchemy.schema.Column.params.autoincrement
    "sqlalchemy.schema.Column") 参数早于此结构存在。
- en: SQLite - SQLite integer primary key columns are implicitly “auto incrementing”
    and no additional keywords are rendered; to render the special SQLite keyword
    `AUTOINCREMENT` is not included as this is unnecessary and not recommended by
    the database vendor. See the section [SQLite Auto Incrementing Behavior](../dialects/sqlite.html#sqlite-autoincrement)
    for more background.
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQLite - SQLite 整数主键列隐式为“自动递增”，不会渲染任何附加关键字；不包括特殊的 SQLite 关键字 `AUTOINCREMENT`，因为这是不必要的，也不被数据库供应商推荐。有关更多背景信息，请参阅[SQLite
    自动递增行为](../dialects/sqlite.html#sqlite-autoincrement)部分。
- en: Oracle - The Oracle dialect has no default “autoincrement” feature available
    at this time, instead the [`Identity`](defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity") construct is recommended to achieve this (the [`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") construct may also be used).
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Oracle - Oracle 方言目前没有默认的“自动递增”功能可用，因此建议使用 [`Identity`](defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity") 结构来实现此目的（也可以使用 [`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") 结构）。
- en: Third-party dialects - consult those dialects’ documentation for details on
    their specific behaviors.
  id: totrans-140
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三方方言 - 请参阅这些方言的文档，了解其特定行为的详情。
- en: 'When a single-row [`insert()`](dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert")
    construct is compiled and executed, which does not set the [`Insert.inline()`](dml.html#sqlalchemy.sql.expression.Insert.inline
    "sqlalchemy.sql.expression.Insert.inline") modifier, newly generated primary key
    values for this column will be automatically retrieved upon statement execution
    using a method specific to the database driver in use:'
  id: totrans-141
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当编译并执行单行[`insert()`](dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert")构造时，该构造未设置[`Insert.inline()`](dml.html#sqlalchemy.sql.expression.Insert.inline
    "sqlalchemy.sql.expression.Insert.inline")修饰符，并且使用的数据库驱动程序不会自动在语句执行时检索新生成的主键值时，将自动检索此列的新生成的主键值：
- en: MySQL, SQLite - calling upon `cursor.lastrowid()` (see [https://www.python.org/dev/peps/pep-0249/#lastrowid](https://www.python.org/dev/peps/pep-0249/#lastrowid))
  id: totrans-142
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL、SQLite - 调用 `cursor.lastrowid()`（请参阅[https://www.python.org/dev/peps/pep-0249/#lastrowid](https://www.python.org/dev/peps/pep-0249/#lastrowid)）
- en: PostgreSQL, SQL Server, Oracle - use RETURNING or an equivalent construct when
    rendering an INSERT statement, and then retrieving the newly generated primary
    key values after execution
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: PostgreSQL、SQL Server、Oracle - 在渲染 INSERT 语句时使用 RETURNING 或等效结构，并在执行后检索新生成的主键值。
- en: PostgreSQL, Oracle for [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects that set [`Table.implicit_returning`](#sqlalchemy.schema.Table.params.implicit_returning
    "sqlalchemy.schema.Table") to False - for a [`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") only, the [`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") is invoked explicitly before the INSERT statement
    takes place so that the newly generated primary key value is available to the
    client
  id: totrans-144
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于将 [`Table.implicit_returning`](#sqlalchemy.schema.Table.params.implicit_returning
    "sqlalchemy.schema.Table") 设置为 False 的[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象的
    PostgreSQL、Oracle - 仅对于 [`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")，在执行 INSERT 语句之前显式调用 [`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")，以便新生成的主键值对客户端可用。
- en: SQL Server for [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects that set [`Table.implicit_returning`](#sqlalchemy.schema.Table.params.implicit_returning
    "sqlalchemy.schema.Table") to False - the `SELECT scope_identity()` construct
    is used after the INSERT statement is invoked to retrieve the newly generated
    primary key value.
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于将 [`Table.implicit_returning`](#sqlalchemy.schema.Table.params.implicit_returning
    "sqlalchemy.schema.Table") 设置为 False 的[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象的
    SQL Server - 在调用 INSERT 语句后使用 `SELECT scope_identity()` 构造来检索新生成的主键值。
- en: Third-party dialects - consult those dialects’ documentation for details on
    their specific behaviors.
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三方方言 - 请查阅这些方言的文档，了解其特定行为的详细信息。
- en: For multiple-row [`insert()`](dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert")
    constructs invoked with a list of parameters (i.e. “executemany” semantics), primary-key
    retrieving behaviors are generally disabled, however there may be special APIs
    that may be used to retrieve lists of new primary key values for an “executemany”,
    such as the psycopg2 “fast insertmany” feature. Such features are very new and
    may not yet be well covered in documentation.
  id: totrans-147
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于使用参数列表（即“executemany”语义）调用的多行[`insert()`](dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert")构造，通常会禁用主键检索行为，但是可能有特殊的 API 可以用于检索“executemany”中新主键值的列表，例如
    psycopg2 的“fast insertmany”功能。此类功能非常新，可能尚未在文档中充分介绍。
- en: '`default` –'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default` –'
- en: A scalar, Python callable, or [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") expression representing the *default
    value* for this column, which will be invoked upon insert if this column is otherwise
    not specified in the VALUES clause of the insert. This is a shortcut to using
    [`ColumnDefault`](defaults.html#sqlalchemy.schema.ColumnDefault "sqlalchemy.schema.ColumnDefault")
    as a positional argument; see that class for full detail on the structure of the
    argument.
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 表示此列的*默认值*的标量、Python 可调用对象或[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")表达式，如果此列在 INSERT 的 VALUES 子句中未指定，则将在插入时调用此值。这是使用[`ColumnDefault`](defaults.html#sqlalchemy.schema.ColumnDefault
    "sqlalchemy.schema.ColumnDefault")作为位置参数的一种快捷方式；请参阅该类以获取有关参数结构的完整详细信息。
- en: Contrast this argument to [`Column.server_default`](#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column") which creates a default generator on the database
    side.
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将此参数与[`Column.server_default`](#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column")进行对比，后者在数据库端创建默认生成器。
- en: See also
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[Column INSERT/UPDATE Defaults](defaults.html)'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[列插入/更新默认值](defaults.html)'
- en: '`doc` – optional String that can be used by the ORM or similar to document
    attributes on the Python side. This attribute does `not` render SQL comments;
    use the [`Column.comment`](#sqlalchemy.schema.Column.params.comment "sqlalchemy.schema.Column")
    parameter for this purpose.'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`doc` – 可选的字符串，可被ORM或类似的程序用于在Python端记录属性。此属性不会渲染SQL注释；为此目的，请使用[`Column.comment`](#sqlalchemy.schema.Column.params.comment
    "sqlalchemy.schema.Column")参数。'
- en: '`key` – An optional string identifier which will identify this `Column` object
    on the [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table"). When a key
    is provided, this is the only identifier referencing the `Column` within the application,
    including ORM attribute mapping; the `name` field is used only when rendering
    SQL.'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`key` – 可选的字符串标识符，将用于标识此`Column`对象在[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")上。提供关键字时，这是应用程序中引用`Column`的唯一标识符，包括ORM属性映射；`name`字段仅在渲染SQL时使用。'
- en: '`index` –'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index` –'
- en: When `True`, indicates that a [`Index`](constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") construct will be automatically generated for this
    [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column"), which will result
    in a “CREATE INDEX” statement being emitted for the [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") when the DDL create operation is invoked.
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当为`True`时，表示将为此[`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")自动生成一个[`Index`](constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")构造，这将导致在调用DDL创建操作时为[`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")发出“CREATE INDEX”语句。
- en: 'Using this flag is equivalent to making use of the [`Index`](constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") construct explicitly at the level of the [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") construct itself:'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用此标志等效于在[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")构造本身的层次上显式使用[`Index`](constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")构造：
- en: '[PRE27]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: To add the [`Index.unique`](constraints.html#sqlalchemy.schema.Index.params.unique
    "sqlalchemy.schema.Index") flag to the [`Index`](constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index"), set both the [`Column.unique`](#sqlalchemy.schema.Column.params.unique
    "sqlalchemy.schema.Column") and [`Column.index`](#sqlalchemy.schema.Column.params.index
    "sqlalchemy.schema.Column") flags to True simultaneously, which will have the
    effect of rendering the “CREATE UNIQUE INDEX” DDL instruction instead of “CREATE
    INDEX”.
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 若要将[`Index.unique`](constraints.html#sqlalchemy.schema.Index.params.unique "sqlalchemy.schema.Index")标志添加到[`Index`](constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")中，请同时将[`Column.unique`](#sqlalchemy.schema.Column.params.unique
    "sqlalchemy.schema.Column")和[`Column.index`](#sqlalchemy.schema.Column.params.index
    "sqlalchemy.schema.Column")标志设置为True，这将导致发出“CREATE UNIQUE INDEX”DDL指令而不是“CREATE
    INDEX”。
- en: The name of the index is generated using the [default naming convention](constraints.html#constraint-default-naming-convention)
    which for the [`Index`](constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    construct is of the form `ix_<tablename>_<columnname>`.
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 索引的名称使用[默认命名约定](constraints.html#constraint-default-naming-convention)生成，对于[`Index`](constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")构造，其形式为`ix_<tablename>_<columnname>`。
- en: As this flag is intended only as a convenience for the common case of adding
    a single-column, default configured index to a table definition, explicit use
    of the [`Index`](constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    construct should be preferred for most use cases, including composite indexes
    that encompass more than one column, indexes with SQL expressions or ordering,
    backend-specific index configuration options, and indexes that use a specific
    name.
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于此标志仅旨在为常见情况（向表定义添加单列默认配置的索引）提供便利，因此大多数情况下应首选显式使用[`Index`](constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")构造，包括跨越多个列的复合索引，具有SQL表达式或排序的索引，后端特定的索引配置选项以及使用特定名称的索引。
- en: Note
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: the [`Column.index`](#sqlalchemy.schema.Column.index "sqlalchemy.schema.Column.index")
    attribute on [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    **does not indicate** if this column is indexed or not, only if this flag was
    explicitly set here. To view indexes on a column, view the [`Table.indexes`](#sqlalchemy.schema.Table.indexes
    "sqlalchemy.schema.Table.indexes") collection or use [`Inspector.get_indexes()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_indexes
    "sqlalchemy.engine.reflection.Inspector.get_indexes").
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Column.index`](#sqlalchemy.schema.Column.index "sqlalchemy.schema.Column.index")属性在[`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")上**并不表示**此列是否已建立索引，只表示此标志是否在此处明确设置。要查看列上的索引，请查看[`Table.indexes`](#sqlalchemy.schema.Table.indexes
    "sqlalchemy.schema.Table.indexes")集合或使用[`Inspector.get_indexes()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_indexes
    "sqlalchemy.engine.reflection.Inspector.get_indexes")。'
- en: See also
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Indexes](constraints.html#schema-indexes)'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[索引](constraints.html#schema-indexes)'
- en: '[Configuring Constraint Naming Conventions](constraints.html#constraint-naming-conventions)'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[配置约束命名约定](constraints.html#constraint-naming-conventions)'
- en: '[`Column.unique`](#sqlalchemy.schema.Column.params.unique "sqlalchemy.schema.Column")'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Column.unique`](#sqlalchemy.schema.Column.params.unique "sqlalchemy.schema.Column")'
- en: '`info` – Optional data dictionary which will be populated into the [`SchemaItem.info`](#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info") attribute of this object.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`info` – 可选数据字典，将填充到此对象的[`SchemaItem.info`](#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info")属性中。'
- en: '`nullable` –'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nullable` –'
- en: When set to `False`, will cause the “NOT NULL” phrase to be added when generating
    DDL for the column. When `True`, will normally generate nothing (in SQL this defaults
    to “NULL”), except in some very specific backend-specific edge cases where “NULL”
    may render explicitly. Defaults to `True` unless [`Column.primary_key`](#sqlalchemy.schema.Column.params.primary_key
    "sqlalchemy.schema.Column") is also `True` or the column specifies a `Identity`,
    in which case it defaults to `False`. This parameter is only used when issuing
    CREATE TABLE statements.
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当设置为`False`时，在生成列的DDL时将添加“NOT NULL”短语。当设置为`True`时，通常不会生成任何内容（在SQL中默认为“NULL”），除非在一些非常特定的后端特定边缘情况下，“NULL”可能会显式呈现。除非[`Column.primary_key`](#sqlalchemy.schema.Column.params.primary_key
    "sqlalchemy.schema.Column")也为`True`或列指定为`Identity`，否则默认为`True`。此参数仅在发出CREATE TABLE语句时使用。
- en: Note
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: When the column specifies a `Identity` this parameter is in general ignored
    by the DDL compiler. The PostgreSQL database allows nullable identity column by
    setting this parameter to `True` explicitly.
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当列指定为`Identity`时，DDL编译器通常会忽略此参数。PostgreSQL数据库允许通过将此参数显式设置为`True`来创建可空的标识列。
- en: '`onupdate` –'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onupdate` –'
- en: A scalar, Python callable, or [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") representing a default value to be
    applied to the column within UPDATE statements, which will be invoked upon update
    if this column is not present in the SET clause of the update. This is a shortcut
    to using [`ColumnDefault`](defaults.html#sqlalchemy.schema.ColumnDefault "sqlalchemy.schema.ColumnDefault")
    as a positional argument with `for_update=True`.
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个标量、Python可调用对象或[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")，表示要应用于列的默认值，在UPDATE语句中将在更新时调用，如果此列不在UPDATE语句的SET子句中，则将被应用。这是使用[`ColumnDefault`](defaults.html#sqlalchemy.schema.ColumnDefault
    "sqlalchemy.schema.ColumnDefault")作为位置参数与`for_update=True`的快捷方式。
- en: See also
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Column INSERT/UPDATE Defaults](defaults.html#metadata-defaults) - complete
    discussion of onupdate'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[列插入/更新默认值](defaults.html#metadata-defaults) - 完整讨论onupdate'
- en: '`primary_key` – If `True`, marks this column as a primary key column. Multiple
    columns can have this flag set to specify composite primary keys. As an alternative,
    the primary key of a [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    can be specified via an explicit [`PrimaryKeyConstraint`](constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") object.'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`primary_key` – 如果为`True`，将此列标记为主键列。可以将多个列设置此标志以指定复合主键。作为替代，可以通过显式的[`PrimaryKeyConstraint`](constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint")对象来指定[`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")的主键。'
- en: '`server_default` –'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`server_default` –'
- en: A [`FetchedValue`](defaults.html#sqlalchemy.schema.FetchedValue "sqlalchemy.schema.FetchedValue")
    instance, str, Unicode or [`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct representing the DDL DEFAULT value
    for the column.
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个[`FetchedValue`](defaults.html#sqlalchemy.schema.FetchedValue "sqlalchemy.schema.FetchedValue")实例、str、Unicode或[`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")构造，表示列的DDL DEFAULT值。
- en: 'String types will be emitted as-is, surrounded by single quotes:'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 字符串类型将原样输出，用单引号括起来：
- en: '[PRE28]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'A [`text()`](sqlelement.html#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")
    expression will be rendered as-is, without quotes:'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`text()`](sqlelement.html#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")表达式将原样呈现，不带引号：'
- en: '[PRE29]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Strings and text() will be converted into a [`DefaultClause`](defaults.html#sqlalchemy.schema.DefaultClause
    "sqlalchemy.schema.DefaultClause") object upon initialization.
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 字符串和text()将在初始化时转换为[`DefaultClause`](defaults.html#sqlalchemy.schema.DefaultClause
    "sqlalchemy.schema.DefaultClause")对象。
- en: 'This parameter can also accept complex combinations of contextually valid SQLAlchemy
    expressions or constructs:'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该参数还可以接受上下文中有效的SQLAlchemy表达式或构造的复杂组合：
- en: '[PRE30]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The above results in a table created with the following SQL:'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以上结果将创建一个带有以下SQL的表：
- en: '[PRE31]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Use [`FetchedValue`](defaults.html#sqlalchemy.schema.FetchedValue "sqlalchemy.schema.FetchedValue")
    to indicate that an already-existing column will generate a default value on the
    database side which will be available to SQLAlchemy for post-fetch after inserts.
    This construct does not specify any DDL and the implementation is left to the
    database, such as via a trigger.
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用[`FetchedValue`](defaults.html#sqlalchemy.schema.FetchedValue "sqlalchemy.schema.FetchedValue")表示数据库端已存在的列将生成一个默认值，在插入后可由SQLAlchemy进行后获取。这种构造不指定任何DDL，实现留给数据库处理，比如通过触发器。
- en: See also
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参见
- en: '[Server-invoked DDL-Explicit Default Expressions](defaults.html#server-defaults)
    - complete discussion of server side defaults'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[服务器调用的DDL-显式默认表达式](defaults.html#server-defaults) - 服务器端默认值的完整讨论'
- en: '`server_onupdate` –'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`server_onupdate` –'
- en: A [`FetchedValue`](defaults.html#sqlalchemy.schema.FetchedValue "sqlalchemy.schema.FetchedValue")
    instance representing a database-side default generation function, such as a trigger.
    This indicates to SQLAlchemy that a newly generated value will be available after
    updates. This construct does not actually implement any kind of generation function
    within the database, which instead must be specified separately.
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`FetchedValue`](defaults.html#sqlalchemy.schema.FetchedValue "sqlalchemy.schema.FetchedValue")实例表示数据库端的默认生成函数，比如触发器。这表明对SQLAlchemy而言，新生成的值将在更新后可用。这种构造实际上并不在数据库内部实现任何生成函数，而是必须单独指定。'
- en: Warning
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 警告
- en: This directive **does not** currently produce MySQL’s “ON UPDATE CURRENT_TIMESTAMP()”
    clause. See [Rendering ON UPDATE CURRENT TIMESTAMP for MySQL / MariaDB’s explicit_defaults_for_timestamp](../dialects/mysql.html#mysql-timestamp-onupdate)
    for background on how to produce this clause.
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此指令**当前不会**生成MySQL的“ON UPDATE CURRENT_TIMESTAMP()”子句。有关如何生成此子句的背景，请参阅[为MySQL
    / MariaDB的explicit_defaults_for_timestamp渲染ON UPDATE CURRENT TIMESTAMP](../dialects/mysql.html#mysql-timestamp-onupdate)。
- en: See also
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参见
- en: '[Marking Implicitly Generated Values, timestamps, and Triggered Columns](defaults.html#triggered-columns)'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[标记隐式生成的值、时间戳和触发列](defaults.html#triggered-columns)'
- en: '`quote` – Force quoting of this column’s name on or off, corresponding to `True`
    or `False`. When left at its default of `None`, the column identifier will be
    quoted according to whether the name is case sensitive (identifiers with at least
    one upper case character are treated as case sensitive), or if it’s a reserved
    word. This flag is only needed to force quoting of a reserved word which is not
    known by the SQLAlchemy dialect.'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`quote` – 强制打开或关闭对此列名称的引用，对应`True`或`False`。当保持默认值`None`时，根据列标识符是否区分大小写（至少有一个大写字符的标识符被视为区分大小写），或者是否是保留字来引用列标识符。只有在需要强制引用SQLAlchemy方言未知的保留字时才需要此标志。'
- en: '`unique` –'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unique` –'
- en: When `True`, and the [`Column.index`](#sqlalchemy.schema.Column.params.index
    "sqlalchemy.schema.Column") parameter is left at its default value of `False`,
    indicates that a [`UniqueConstraint`](constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") construct will be automatically generated
    for this [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column"), which
    will result in a “UNIQUE CONSTRAINT” clause referring to this column being included
    in the `CREATE TABLE` statement emitted, when the DDL create operation for the
    [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") object is invoked.
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当值为`True`时，且[`Column.index`](#sqlalchemy.schema.Column.params.index "sqlalchemy.schema.Column")参数保持默认值`False`，表示将自动生成一个[`UniqueConstraint`](constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint")构造用于此[`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")，这将导致在调用[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象的DDL创建操作时，在`CREATE
    TABLE`语句中包含引用此列的“UNIQUE CONSTRAINT”子句。
- en: When this flag is `True` while the [`Column.index`](#sqlalchemy.schema.Column.params.index
    "sqlalchemy.schema.Column") parameter is simultaneously set to `True`, the effect
    instead is that a [`Index`](constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    construct which includes the [`Index.unique`](constraints.html#sqlalchemy.schema.Index.params.unique
    "sqlalchemy.schema.Index") parameter set to `True` is generated. See the documentation
    for [`Column.index`](#sqlalchemy.schema.Column.params.index "sqlalchemy.schema.Column")
    for additional detail.
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当此标志为`True`而同时将[`Column.index`](#sqlalchemy.schema.Column.params.index "sqlalchemy.schema.Column")参数设置为`True`时，效果实际上是生成一个包含[`Index.unique`](constraints.html#sqlalchemy.schema.Index.params.unique
    "sqlalchemy.schema.Index")参数设置为`True`的[`Index`](constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")构造。有关详细信息，请参阅[`Column.index`](#sqlalchemy.schema.Column.params.index
    "sqlalchemy.schema.Column")的文档。
- en: 'Using this flag is equivalent to making use of the [`UniqueConstraint`](constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") construct explicitly at the level of the
    [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") construct itself:'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用此标志等效于在[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")构造本身的级别上显式使用[`UniqueConstraint`](constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint")构造：
- en: '[PRE32]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The [`UniqueConstraint.name`](constraints.html#sqlalchemy.schema.UniqueConstraint.params.name
    "sqlalchemy.schema.UniqueConstraint") parameter of the unique constraint object
    is left at its default value of `None`; in the absence of a [naming convention](constraints.html#constraint-naming-conventions)
    for the enclosing [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData"),
    the UNIQUE CONSTRAINT construct will be emitted as unnamed, which typically invokes
    a database-specific naming convention to take place.
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 唯一约束对象的[`UniqueConstraint.name`](constraints.html#sqlalchemy.schema.UniqueConstraint.params.name
    "sqlalchemy.schema.UniqueConstraint")参数保持其默认值为`None`；在缺少封闭的[`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")的[naming convention](constraints.html#constraint-naming-conventions)时，唯一约束构造将被发出为未命名的，这通常会调用数据库特定的命名约定来发生。
- en: As this flag is intended only as a convenience for the common case of adding
    a single-column, default configured unique constraint to a table definition, explicit
    use of the [`UniqueConstraint`](constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") construct should be preferred for most use
    cases, including composite constraints that encompass more than one column, backend-specific
    index configuration options, and constraints that use a specific name.
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于此标志仅用作在表定义中添加单列，默认配置的唯一约束的便利，因此在大多数用例中应优先使用[`UniqueConstraint`](constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint")构造的显式使用，包括涵盖多个列的复合约束、特定于后端的索引配置选项以及使用特定名称的约束。
- en: Note
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: the [`Column.unique`](#sqlalchemy.schema.Column.unique "sqlalchemy.schema.Column.unique")
    attribute on [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    **does not indicate** if this column has a unique constraint or not, only if this
    flag was explicitly set here. To view indexes and unique constraints that may
    involve this column, view the [`Table.indexes`](#sqlalchemy.schema.Table.indexes
    "sqlalchemy.schema.Table.indexes") and/or [`Table.constraints`](#sqlalchemy.schema.Table.constraints
    "sqlalchemy.schema.Table.constraints") collections or use [`Inspector.get_indexes()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_indexes
    "sqlalchemy.engine.reflection.Inspector.get_indexes") and/or [`Inspector.get_unique_constraints()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_unique_constraints
    "sqlalchemy.engine.reflection.Inspector.get_unique_constraints")
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")上的[`Column.unique`](#sqlalchemy.schema.Column.unique
    "sqlalchemy.schema.Column.unique")属性**并不表示**此列是否具有唯一约束，只表示此标志是否在此处明确设置了。要查看涉及此列的索引和唯一约束，请查看[`Table.indexes`](#sqlalchemy.schema.Table.indexes
    "sqlalchemy.schema.Table.indexes")和/或[`Table.constraints`](#sqlalchemy.schema.Table.constraints
    "sqlalchemy.schema.Table.constraints")集合，或使用[`Inspector.get_indexes()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_indexes
    "sqlalchemy.engine.reflection.Inspector.get_indexes")和/或[`Inspector.get_unique_constraints()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_unique_constraints
    "sqlalchemy.engine.reflection.Inspector.get_unique_constraints")'
- en: See also
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[UNIQUE Constraint](constraints.html#schema-unique-constraint)'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[唯一约束](constraints.html#schema-unique-constraint)'
- en: '[Configuring Constraint Naming Conventions](constraints.html#constraint-naming-conventions)'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[配置约束命名约定](constraints.html#constraint-naming-conventions)'
- en: '[`Column.index`](#sqlalchemy.schema.Column.params.index "sqlalchemy.schema.Column")'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Column.index`](#sqlalchemy.schema.Column.params.index "sqlalchemy.schema.Column")'
- en: '`system` –'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`system` –'
- en: When `True`, indicates this is a “system” column, that is a column which is
    automatically made available by the database, and should not be included in the
    columns list for a `CREATE TABLE` statement.
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当为`True`时，表示这是一个“系统”列，即数据库自动提供的列，并且不应包含在`CREATE TABLE`语句的列列表中。
- en: For more elaborate scenarios where columns should be conditionally rendered
    differently on different backends, consider custom compilation rules for [`CreateColumn`](ddl.html#sqlalchemy.schema.CreateColumn
    "sqlalchemy.schema.CreateColumn").
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于更复杂的场景，其中列应在不同的后端上以不同的条件呈现，请考虑[`CreateColumn`](ddl.html#sqlalchemy.schema.CreateColumn
    "sqlalchemy.schema.CreateColumn")的自定义编译规则。
- en: '`comment` –'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`comment` –'
- en: Optional string that will render an SQL comment on table creation.
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在表创建时可选的字符串，将在SQL注释中显示。
- en: 'New in version 1.2: Added the [`Column.comment`](#sqlalchemy.schema.Column.params.comment
    "sqlalchemy.schema.Column") parameter to [`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column").'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新功能在版本1.2中：将[`Column.comment`](#sqlalchemy.schema.Column.params.comment "sqlalchemy.schema.Column")参数添加到[`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")。
- en: '`insert_sentinel` –'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`insert_sentinel` –'
- en: Marks this [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    as an [insert sentinel](../glossary.html#term-insert-sentinel) used for optimizing
    the performance of the [insertmanyvalues](../glossary.html#term-insertmanyvalues)
    feature for tables that don’t otherwise have qualifying primary key configurations.
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将此[`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")标记为[插入标记](../glossary.html#term-insert-sentinel)，用于优化对于没有其他限定主键配置的表的[insertmanyvalues](../glossary.html#term-insertmanyvalues)功能的性能。
- en: New in version 2.0.10.
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新功能在版本2.0.10中引入。
- en: See also
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`insert_sentinel()`](#sqlalchemy.schema.insert_sentinel "sqlalchemy.schema.insert_sentinel")
    - all in one helper for declaring sentinel columns'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`insert_sentinel()`](#sqlalchemy.schema.insert_sentinel "sqlalchemy.schema.insert_sentinel")
    - 一站式助手，用于声明哨兵列'
- en: '[“Insert Many Values” Behavior for INSERT statements](connections.html#engine-insertmanyvalues)'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[“插入多个值”INSERT语句行为](connections.html#engine-insertmanyvalues)'
- en: '[Configuring Sentinel Columns](connections.html#engine-insertmanyvalues-sentinel-columns)'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[配置 Sentinel 列](connections.html#engine-insertmanyvalues-sentinel-columns)'
- en: '[PRE33]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__le__` *method
    of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") *的* `sqlalchemy.sql.expression.ColumnOperators.__le__`
    *方法继承*'
- en: Implement the `<=` operator.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`<=`运算符。
- en: In a column context, produces the clause `a <= b`.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句`a <= b`。
- en: '[PRE34]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__lt__` *method
    of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") *的* `sqlalchemy.sql.expression.ColumnOperators.__lt__`
    *方法。'
- en: Implement the `<` operator.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`<`运算符。
- en: In a column context, produces the clause `a < b`.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句`a < b`。
- en: '[PRE35]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__ne__` *method
    of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") *的* `sqlalchemy.sql.expression.ColumnOperators.__ne__`
    *方法。'
- en: Implement the `!=` operator.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`!=`运算符。
- en: In a column context, produces the clause `a != b`. If the target is `None`,
    produces `a IS NOT NULL`.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句`a != b`。如果目标是`None`，则生成`a IS NOT NULL`。
- en: '[PRE36]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '*inherited from the* [`ColumnOperators.all_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") *的* [`ColumnOperators.all_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") *方法。'
- en: Produce an [`all_()`](sqlelement.html#sqlalchemy.sql.expression.all_ "sqlalchemy.sql.expression.all_")
    clause against the parent object.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 生成针对父对象的[`all_()`](sqlelement.html#sqlalchemy.sql.expression.all_ "sqlalchemy.sql.expression.all_")子句。
- en: See the documentation for [`all_()`](sqlelement.html#sqlalchemy.sql.expression.all_
    "sqlalchemy.sql.expression.all_") for examples.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[`all_()`](sqlelement.html#sqlalchemy.sql.expression.all_ "sqlalchemy.sql.expression.all_")的文档以获取示例。
- en: Note
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: be sure to not confuse the newer [`ColumnOperators.all_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") method with the **legacy** version
    of this method, the [`Comparator.all()`](type_basics.html#sqlalchemy.types.ARRAY.Comparator.all
    "sqlalchemy.types.ARRAY.Comparator.all") method that’s specific to [`ARRAY`](type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY"), which uses a different calling style.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 请确保不要混淆较新的[`ColumnOperators.all_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_")方法与此方法的**旧版**版本，即专用于[`ARRAY`](type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY")的[`Comparator.all()`](type_basics.html#sqlalchemy.types.ARRAY.Comparator.all
    "sqlalchemy.types.ARRAY.Comparator.all")方法，其使用不同的调用风格。
- en: '[PRE37]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '*inherited from the* [`ColumnElement.anon_key_label`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.anon_key_label
    "sqlalchemy.sql.expression.ColumnElement.anon_key_label") *attribute of* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") *的* [`ColumnElement.anon_key_label`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.anon_key_label
    "sqlalchemy.sql.expression.ColumnElement.anon_key_label") *属性。'
- en: 'Deprecated since version 1.4: The [`ColumnElement.anon_key_label`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.anon_key_label
    "sqlalchemy.sql.expression.ColumnElement.anon_key_label") attribute is now private,
    and the public accessor is deprecated.'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.4起弃用：[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") *的* [`ColumnElement.anon_key_label`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.anon_key_label
    "sqlalchemy.sql.expression.ColumnElement.anon_key_label") *属性现在是私有的，公共访问器已弃用。
- en: '[PRE38]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '*inherited from the* [`ColumnElement.anon_label`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.anon_label
    "sqlalchemy.sql.expression.ColumnElement.anon_label") *attribute of* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") *的* [`ColumnElement.anon_label`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.anon_label
    "sqlalchemy.sql.expression.ColumnElement.anon_label") *属性。'
- en: 'Deprecated since version 1.4: The [`ColumnElement.anon_label`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.anon_label
    "sqlalchemy.sql.expression.ColumnElement.anon_label") attribute is now private,
    and the public accessor is deprecated.'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.4起弃用：[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") *的* [`ColumnElement.anon_label`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.anon_label
    "sqlalchemy.sql.expression.ColumnElement.anon_label") *属性现在是私有的，公共访问器已弃用。
- en: '[PRE39]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '*inherited from the* [`ColumnOperators.any_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.any_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") *。'
- en: Produce an [`any_()`](sqlelement.html#sqlalchemy.sql.expression.any_ "sqlalchemy.sql.expression.any_")
    clause against the parent object.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 对父对象生成一个 [`any_()`](sqlelement.html#sqlalchemy.sql.expression.any_ "sqlalchemy.sql.expression.any_")
    *子句*。
- en: See the documentation for [`any_()`](sqlelement.html#sqlalchemy.sql.expression.any_
    "sqlalchemy.sql.expression.any_") for examples.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 有关示例，请参阅 [`any_()`](sqlelement.html#sqlalchemy.sql.expression.any_ "sqlalchemy.sql.expression.any_")
    *的文档*。
- en: Note
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: be sure to not confuse the newer [`ColumnOperators.any_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") method with the **legacy** version
    of this method, the [`Comparator.any()`](type_basics.html#sqlalchemy.types.ARRAY.Comparator.any
    "sqlalchemy.types.ARRAY.Comparator.any") method that’s specific to [`ARRAY`](type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY"), which uses a different calling style.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 请务必不要混淆较新的 [`ColumnOperators.any_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") *方法与该方法的* **旧版**，[`Comparator.any()`](type_basics.html#sqlalchemy.types.ARRAY.Comparator.any
    "sqlalchemy.types.ARRAY.Comparator.any") *，该方法专用于* [`ARRAY`](type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") *，其调用方式不同。
- en: '[PRE40]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '*inherited from the* [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") *method of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") *方法的* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs") *。'
- en: Add a new kind of dialect-specific keyword argument for this class.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 为这个类添加一种新的特定于方言的关键字参数。
- en: 'E.g.:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE41]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") method is a per-argument way
    adding extra arguments to the [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") dictionary. This
    dictionary provides a list of argument names accepted by various schema-level
    constructs on behalf of a dialect.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") *方法是一种逐个参数的方式向* [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") *字典添加额外参数。此字典为方言代表的各种架构级别构造提供了一组接受的参数名称。'
- en: New dialects should typically specify this dictionary all at once as a data
    member of the dialect class. The use case for ad-hoc addition of argument names
    is typically for end-user code that is also using a custom compilation scheme
    which consumes the additional arguments.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 新的方言通常应将此字典一次性指定为方言类的数据成员。通常，用于添加额外参数名称的即席用例是对自定义编译方案也使用额外参数的最终用户代码。
- en: 'Parameters:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dialect_name` – name of a dialect. The dialect must be locatable, else a [`NoSuchModuleError`](exceptions.html#sqlalchemy.exc.NoSuchModuleError
    "sqlalchemy.exc.NoSuchModuleError") is raised. The dialect must also include an
    existing [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") collection, indicating
    that it participates in the keyword-argument validation and default system, else
    [`ArgumentError`](exceptions.html#sqlalchemy.exc.ArgumentError "sqlalchemy.exc.ArgumentError")
    is raised. If the dialect does not include this collection, then any keyword argument
    can be specified on behalf of this dialect already. All dialects packaged within
    SQLAlchemy include this collection, however for third party dialects, support
    may vary.'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect_name` – 方言的名称。方言必须是可定位的，否则会引发[`NoSuchModuleError`](exceptions.html#sqlalchemy.exc.NoSuchModuleError
    "sqlalchemy.exc.NoSuchModuleError")。方言还必须包括一个现有的[`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments")集合，表示它参与关键字参数验证和默认系统，否则会引发[`ArgumentError`](exceptions.html#sqlalchemy.exc.ArgumentError
    "sqlalchemy.exc.ArgumentError")。如果方言不包括此集合，则已经可以代表该方言指定任何关键字参数。SQLAlchemy内置的所有方言都包括此集合，但对于第三方方言，支持可能有所不同。'
- en: '`argument_name` – name of the parameter.'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`argument_name` – 参数的名称。'
- en: '`default` – default value of the parameter.'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default` – 参数的默认值。'
- en: '[PRE42]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '*inherited from the* [`ColumnOperators.asc()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.asc
    "sqlalchemy.sql.expression.ColumnOperators.asc") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.asc()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.asc
    "sqlalchemy.sql.expression.ColumnOperators.asc") *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`asc()`](sqlelement.html#sqlalchemy.sql.expression.asc "sqlalchemy.sql.expression.asc")
    clause against the parent object.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 根据父对象生成一个[`asc()`](sqlelement.html#sqlalchemy.sql.expression.asc "sqlalchemy.sql.expression.asc")子句。
- en: '[PRE43]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '*inherited from the* [`ColumnOperators.between()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.between
    "sqlalchemy.sql.expression.ColumnOperators.between") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.between()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.between
    "sqlalchemy.sql.expression.ColumnOperators.between") *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`between()`](sqlelement.html#sqlalchemy.sql.expression.between "sqlalchemy.sql.expression.between")
    clause against the parent object, given the lower and upper range.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 根据下限和上限生成一个[`between()`](sqlelement.html#sqlalchemy.sql.expression.between "sqlalchemy.sql.expression.between")子句。
- en: '[PRE44]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '*inherited from the* [`ColumnOperators.bitwise_and()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_and
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_and") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.bitwise_and()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_and
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_and") *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a bitwise AND operation, typically via the `&` operator.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 执行位与操作，通常使用`&`运算符。
- en: New in version 2.0.2.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 在2.0.2版本中新增。
- en: See also
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Bitwise Operators](operators.html#operators-bitwise)'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '[位运算符](operators.html#operators-bitwise)'
- en: '[PRE45]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '*inherited from the* [`ColumnOperators.bitwise_lshift()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.bitwise_lshift()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift") *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a bitwise LSHIFT operation, typically via the `<<` operator.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 执行位左移操作，通常使用`<<`运算符。
- en: New in version 2.0.2.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 在2.0.2版本中新增。
- en: See also
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Bitwise Operators](operators.html#operators-bitwise)'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '[位运算符](operators.html#operators-bitwise)'
- en: '[PRE46]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '*inherited from the* [`ColumnOperators.bitwise_not()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_not
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_not") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.bitwise_not()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_not
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_not") *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a bitwise NOT operation, typically via the `~` operator.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 执行位非操作，通常通过`~`运算符实现。
- en: New in version 2.0.2.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0.2 中新增。
- en: See also
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](operators.html#operators-bitwise)'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '[位运算符](operators.html#operators-bitwise)'
- en: '[PRE47]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '*inherited from the* [`ColumnOperators.bitwise_or()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_or
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_or") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.bitwise_or()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_or
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_or") *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a bitwise OR operation, typically via the `|` operator.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 执行位或操作，通常通过`|`运算符实现。
- en: New in version 2.0.2.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0.2 中新增。
- en: See also
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](operators.html#operators-bitwise)'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '[位运算符](operators.html#operators-bitwise)'
- en: '[PRE48]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '*inherited from the* [`ColumnOperators.bitwise_rshift()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.bitwise_rshift()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift") *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a bitwise RSHIFT operation, typically via the `>>` operator.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 执行位右移操作，通常通过`>>`运算符实现。
- en: New in version 2.0.2.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0.2 中新增。
- en: See also
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](operators.html#operators-bitwise)'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '[位运算符](operators.html#operators-bitwise)'
- en: '[PRE49]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '*inherited from the* [`ColumnOperators.bitwise_xor()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_xor
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_xor") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.bitwise_xor()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_xor
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_xor") *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a bitwise XOR operation, typically via the `^` operator, or `#` for
    PostgreSQL.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 执行位异或操作，通常通过`^`运算符实现，或者对于 PostgreSQL 使用`#`。
- en: New in version 2.0.2.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0.2 中新增。
- en: See also
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](operators.html#operators-bitwise)'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '[位运算符](operators.html#operators-bitwise)'
- en: '[PRE50]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '*inherited from the* [`Operators.bool_op()`](sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") *method of* [`Operators`](sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Operators.bool_op()`](sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") *方法的* [`Operators`](sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
- en: Return a custom boolean operator.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 返回自定义布尔运算符。
- en: This method is shorthand for calling [`Operators.op()`](sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") and passing the [`Operators.op.is_comparison`](sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op") flag with True. A key advantage to using
    [`Operators.bool_op()`](sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") is that when using column constructs,
    the “boolean” nature of the returned expression will be present for [**PEP 484**](https://peps.python.org/pep-0484/)
    purposes.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法是调用 [`Operators.op()`](sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") 并传递 [`Operators.op.is_comparison`](sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op") 标志为 True 的简写。 使用 [`Operators.bool_op()`](sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") 的一个关键优势是，在使用列构造时，返回表达式的“布尔”性质将出现在
    [**PEP 484**](https://peps.python.org/pep-0484/) 目的中。
- en: See also
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Operators.op()`](sqlelement.html#sqlalchemy.sql.expression.Operators.op "sqlalchemy.sql.expression.Operators.op")'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Operators.op()`](sqlelement.html#sqlalchemy.sql.expression.Operators.op "sqlalchemy.sql.expression.Operators.op")'
- en: '[PRE51]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '*inherited from the* [`ColumnElement.cast()`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.cast
    "sqlalchemy.sql.expression.ColumnElement.cast") *method of* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnElement.cast()`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.cast
    "sqlalchemy.sql.expression.ColumnElement.cast") *方法，来自于* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
- en: Produce a type cast, i.e. `CAST(<expression> AS <type>)`.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 生成类型转换，即 `CAST(<expression> AS <type>)`。
- en: This is a shortcut to the [`cast()`](sqlelement.html#sqlalchemy.sql.expression.cast
    "sqlalchemy.sql.expression.cast") function.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个快捷方式到 [`cast()`](sqlelement.html#sqlalchemy.sql.expression.cast "sqlalchemy.sql.expression.cast")
    函数。
- en: See also
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[Data Casts and Type Coercion](../tutorial/data_select.html#tutorial-casts)'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '[数据转换和类型强制转换](../tutorial/data_select.html#tutorial-casts)'
- en: '[`cast()`](sqlelement.html#sqlalchemy.sql.expression.cast "sqlalchemy.sql.expression.cast")'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '[`cast()`](sqlelement.html#sqlalchemy.sql.expression.cast "sqlalchemy.sql.expression.cast")'
- en: '[`type_coerce()`](sqlelement.html#sqlalchemy.sql.expression.type_coerce "sqlalchemy.sql.expression.type_coerce")'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '[`type_coerce()`](sqlelement.html#sqlalchemy.sql.expression.type_coerce "sqlalchemy.sql.expression.type_coerce")'
- en: '[PRE52]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '*inherited from the* [`ColumnOperators.collate()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.collate
    "sqlalchemy.sql.expression.ColumnOperators.collate") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.collate()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.collate
    "sqlalchemy.sql.expression.ColumnOperators.collate") *方法，来自于* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`collate()`](sqlelement.html#sqlalchemy.sql.expression.collate "sqlalchemy.sql.expression.collate")
    clause against the parent object, given the collation string.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个针对父对象的 [`collate()`](sqlelement.html#sqlalchemy.sql.expression.collate "sqlalchemy.sql.expression.collate")
    子句，给定排序规则字符串。
- en: See also
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[`collate()`](sqlelement.html#sqlalchemy.sql.expression.collate "sqlalchemy.sql.expression.collate")'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '[`collate()`](sqlelement.html#sqlalchemy.sql.expression.collate "sqlalchemy.sql.expression.collate")'
- en: '[PRE53]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '*inherited from the* [`ClauseElement.compare()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.compare
    "sqlalchemy.sql.expression.ClauseElement.compare") *method of* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ClauseElement.compare()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.compare
    "sqlalchemy.sql.expression.ClauseElement.compare") *方法，来自于* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
- en: Compare this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") to the given [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 将此 [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") 与给定的 [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") 进行比较。
- en: Subclasses should override the default behavior, which is a straight identity
    comparison.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 子类应该覆盖默认行为，即直接的标识比较。
- en: '**kw are arguments consumed by subclass `compare()` methods and may be used
    to modify the criteria for comparison (see [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")).'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: '**kw 是子类 `compare()` 方法消耗的参数，可能用于修改比较的条件（请参阅 [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")）。'
- en: '[PRE54]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '*inherited from the* `CompilerElement.compile()` *method of* `CompilerElement`'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `CompilerElement.compile()` *方法，来自于* `CompilerElement`'
- en: Compile this SQL expression.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 编译这个 SQL 表达式。
- en: The return value is a [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object. Calling `str()` or `unicode()` on the returned
    value will yield a string representation of the result. The [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object also can return a dictionary of bind parameter
    names and values using the `params` accessor.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 返回值是一个 [`Compiled`](internals.html#sqlalchemy.engine.Compiled "sqlalchemy.engine.Compiled")
    对象。调用返回值的 `str()` 或 `unicode()` 方法将得到结果的字符串表示。[`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") 对象还可以使用 `params` 访问器返回一个绑定参数名称和值的字典。
- en: 'Parameters:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: '参数:'
- en: '`bind` – An [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    or [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    which can provide a [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    in order to generate a [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object. If the `bind` and `dialect` parameters are
    both omitted, a default SQL compiler is used.'
  id: totrans-337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bind` – 一个[`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")或[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")，它可以提供一个[`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect")以生成一个[`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled")对象。如果省略了`bind`和`dialect`参数，则使用默认的SQL编译器。'
- en: '`column_keys` – Used for INSERT and UPDATE statements, a list of column names
    which should be present in the VALUES clause of the compiled statement. If `None`,
    all columns from the target table object are rendered.'
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`column_keys` – 用于INSERT和UPDATE语句，列名列表，应出现在编译语句的VALUES子句中。如果为`None`，则从目标表对象中呈现所有列。'
- en: '`dialect` – A [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    instance which can generate a [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object. This argument takes precedence over the
    `bind` argument.'
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect` – 一个[`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")实例，可以生成一个[`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled")对象。此参数优先于`bind`参数。'
- en: '`compile_kwargs` –'
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`compile_kwargs` –'
- en: 'optional dictionary of additional parameters that will be passed through to
    the compiler within all “visit” methods. This allows any custom flag to be passed
    through to a custom compilation construct, for example. It is also used for the
    case of passing the `literal_binds` flag through:'
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的额外参数字典，将在所有“visit”方法中传递给编译器。这允许将任何自定义标志传递给自定义编译结构，例如。也用于通过`literal_binds`标志传递的情况：
- en: '[PRE55]'
  id: totrans-342
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: See also
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[How do I render SQL expressions as strings, possibly with bound parameters
    inlined?](../faq/sqlexpressions.html#faq-sql-expression-string)'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: '[如何将SQL表达式渲染为字符串，可能带有内联的绑定参数？](../faq/sqlexpressions.html#faq-sql-expression-string)'
- en: '[PRE56]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '*inherited from the* [`ColumnOperators.concat()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.concat
    "sqlalchemy.sql.expression.ColumnOperators.concat") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.concat()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.concat
    "sqlalchemy.sql.expression.ColumnOperators.concat") *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the ‘concat’ operator.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 实现‘concat’运算符。
- en: In a column context, produces the clause `a || b`, or uses the `concat()` operator
    on MySQL.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句`a || b`，或在MySQL上使用`concat()`运算符。
- en: '[PRE57]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '*inherited from the* [`ColumnOperators.contains()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.contains()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains") *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the ‘contains’ operator.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 实现‘contains’运算符。
- en: 'Produces a LIKE expression that tests against a match for the middle of a string
    value:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个LIKE表达式，测试字符串值的中间匹配：
- en: '[PRE58]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'E.g.:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE59]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.contains.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.contains.escape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.contains") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 由于操作符使用`LIKE`，存在于<other>表达式中的通配符字符`"%"`和`"_"`也将像通配符一样工作。对于字面字符串值，可以设置[`ColumnOperators.contains.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains")标志为`True`，以对字符串值中这些字符的出现应用转义，使它们匹配为自身而不是通配符字符。或者，[`ColumnOperators.contains.escape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.contains")参数将建立一个给定字符作为转义字符，当目标表达式不是字面字符串时，这可能会有所帮助。
- en: 'Parameters:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.contains.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains") flag is set to True.'
  id: totrans-358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要比较的表达式。这通常是一个普通的字符串值，但也可以是任意的 SQL 表达式。除非设置了[`ColumnOperators.contains.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains")标志为 True，否则 LIKE 通配符字符`%`和`_`不会被默认转义。'
- en: '`autoescape` –'
  id: totrans-359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-360
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值；当为 True 时，在 LIKE 表达式中建立一个转义字符，然后将其应用于比较值中所有出现的`"%"`、`"_"`和转义字符本身，假定比较值是字面字符串而不是
    SQL 表达式。
- en: 'An expression such as:'
  id: totrans-361
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE60]'
  id: totrans-362
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Will render as:'
  id: totrans-363
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将渲染为：
- en: '[PRE61]'
  id: totrans-364
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-365
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 其值为`:param`时，将呈现为`"foo/%bar"`。
- en: '`escape` –'
  id: totrans-366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-367
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字符，当给定时将使用`ESCAPE`关键字将其建立为转义字符。然后，可以将此字符放在`%`和`_`的出现之前，以允许它们作为自身而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-368
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE62]'
  id: totrans-369
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Will render as:'
  id: totrans-370
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将渲染为：
- en: '[PRE63]'
  id: totrans-371
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'The parameter may also be combined with [`ColumnOperators.contains.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains"):'
  id: totrans-372
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该参数还可以与[`ColumnOperators.contains.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains")结合使用：
- en: '[PRE64]'
  id: totrans-373
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-374
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述情况中，给定的字面参数将在传递到数据库之前转换为`"foo^%bar^^bat"`。
- en: See also
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.startswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.startswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
- en: '[`ColumnOperators.endswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.endswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
- en: '[`ColumnOperators.like()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE65]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Deprecated since version 1.4: The [`Column.copy()`](#sqlalchemy.schema.Column.copy
    "sqlalchemy.schema.Column.copy") method is deprecated and will be removed in a
    future release.'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.4起已弃用：[`Column.copy()`](#sqlalchemy.schema.Column.copy "sqlalchemy.schema.Column.copy")方法已弃用，将在将来的版本中删除。
- en: '[PRE66]'
  id: totrans-381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '*inherited from the* [`ColumnOperators.desc()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.desc
    "sqlalchemy.sql.expression.ColumnOperators.desc") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.desc()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.desc
    "sqlalchemy.sql.expression.ColumnOperators.desc") *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`desc()`](sqlelement.html#sqlalchemy.sql.expression.desc "sqlalchemy.sql.expression.desc")
    clause against the parent object.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 对父对象生成 [`desc()`](sqlelement.html#sqlalchemy.sql.expression.desc "sqlalchemy.sql.expression.desc")
    子句。
- en: '[PRE67]'
  id: totrans-384
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '*inherited from the* [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") *属性的* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
- en: A collection of keyword arguments specified as dialect-specific options to this
    construct.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 作为方言特定选项指定的关键字参数的集合。
- en: The arguments are present here in their original `<dialect>_<kwarg>` format.
    Only arguments that were actually passed are included; unlike the [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") collection, which contains
    all options known by this dialect including defaults.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的参数以其原始的 `<dialect>_<kwarg>` 格式存在。只包括实际传递的参数；不同于 [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") 集合，该集合包含了此方言已知的所有选项，包括默认值。
- en: The collection is also writable; keys are accepted of the form `<dialect>_<kwarg>`
    where the value will be assembled into the list of options.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 该集合也是可写的；接受形式为`<dialect>_<kwarg>`的键，其值将被组装到选项列表中。
- en: See also
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") - nested dictionary form'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") - 嵌套字典形式'
- en: '[PRE68]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '*inherited from the* [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") *属性的* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
- en: A collection of keyword arguments specified as dialect-specific options to this
    construct.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 作为方言特定选项指定的关键字参数的集合。
- en: 'This is a two-level nested registry, keyed to `<dialect_name>` and `<argument_name>`.
    For example, the `postgresql_where` argument would be locatable as:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个两级嵌套的注册表，键入为 `<dialect_name>` 和 `<argument_name>`。例如，`postgresql_where`
    参数可以定位为：
- en: '[PRE69]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: New in version 0.9.2.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本 0.9.2 中新增。
- en: See also
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") - flat dictionary form'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") - 平面字典形式'
- en: '[PRE70]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '*inherited from the* [`ColumnOperators.distinct()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.distinct
    "sqlalchemy.sql.expression.ColumnOperators.distinct") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.distinct()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.distinct
    "sqlalchemy.sql.expression.ColumnOperators.distinct") *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`distinct()`](sqlelement.html#sqlalchemy.sql.expression.distinct
    "sqlalchemy.sql.expression.distinct") clause against the parent object.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 对父对象生成 [`distinct()`](sqlelement.html#sqlalchemy.sql.expression.distinct "sqlalchemy.sql.expression.distinct")
    子句。
- en: '[PRE71]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '*inherited from the* [`ColumnOperators.endswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.endswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith") *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the ‘endswith’ operator.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 'endswith' 操作符。
- en: 'Produces a LIKE expression that tests against a match for the end of a string
    value:'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 产生一个 LIKE 表达式，用于测试字符串值的末尾是否匹配：
- en: '[PRE72]'
  id: totrans-406
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'E.g.:'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE73]'
  id: totrans-408
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.endswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.endswith.escape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 由于该操作符使用了 `LIKE`，因此存在于 <other> 表达式内部的通配符字符 `"%"` 和 `"_"` 也将像通配符一样行事。对于文本字符串值，可以将
    [`ColumnOperators.endswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") 标志设置为 `True`，以对字符串值中这些字符的出现进行转义，使它们与自身匹配而不是作为通配符字符。或者，[`ColumnOperators.endswith.escape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") 参数将确立给定字符作为转义字符，当目标表达式不是文本字符串时可能会有用。
- en: 'Parameters:'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.endswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") flag is set to True.'
  id: totrans-411
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要比较的表达式。通常是一个普通字符串值，但也可以是任意的 SQL 表达式。除非将 [`ColumnOperators.endswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") 标志设置为 True，否则不会默认转义 LIKE
    通配符字符 `%` 和 `_`。'
- en: '`autoescape` –'
  id: totrans-412
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-413
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值；当为 True 时，在 LIKE 表达式中建立一个转义字符，然后将其应用于比较值中所有的 `"%"`、`"_"` 和转义字符本身，假设比较值是一个文本字符串而不是
    SQL 表达式。
- en: 'An expression such as:'
  id: totrans-414
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 诸如：
- en: '[PRE74]'
  id: totrans-415
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Will render as:'
  id: totrans-416
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 渲染为：
- en: '[PRE75]'
  id: totrans-417
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-418
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以 `:param` 的值为 `"foo/%bar"`。
- en: '`escape` –'
  id: totrans-419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-420
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字符，当提供时将以 `ESCAPE` 关键字呈现，以建立该字符作为转义字符。然后，此字符可以放置在 `%` 和 `_` 前面，使它们可以作为自己而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-421
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 诸如：
- en: '[PRE76]'
  id: totrans-422
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Will render as:'
  id: totrans-423
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 渲染为：
- en: '[PRE77]'
  id: totrans-424
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'The parameter may also be combined with [`ColumnOperators.endswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith"):'
  id: totrans-425
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参数也可以与 [`ColumnOperators.endswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") 结合使用：
- en: '[PRE78]'
  id: totrans-426
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-427
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述示例中，给定的文本参数将在传递到数据库之前转换为 `"foo^%bar^^bat"`。
- en: See also
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见：
- en: '[`ColumnOperators.startswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.startswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
- en: '[`ColumnOperators.contains()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.contains()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
- en: '[`ColumnOperators.like()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE79]'
  id: totrans-432
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '*inherited from the* [`ColumnElement.expression`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.expression
    "sqlalchemy.sql.expression.ColumnElement.expression") *attribute of* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnElement.expression`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.expression
    "sqlalchemy.sql.expression.ColumnElement.expression") *属性的* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
- en: Return a column expression.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 返回列表达式。
- en: Part of the inspection interface; returns self.
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 检查接口的一部分；返回 self。
- en: '[PRE80]'
  id: totrans-436
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '*inherited from the* [`ColumnElement.foreign_keys`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.foreign_keys
    "sqlalchemy.sql.expression.ColumnElement.foreign_keys") *attribute of* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnElement.foreign_keys`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.foreign_keys
    "sqlalchemy.sql.expression.ColumnElement.foreign_keys") *属性的* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
- en: A collection of all [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") marker objects associated with this [`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column").
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 与此 [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column") 关联的所有 [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") 标记对象的集合。
- en: Each object is a member of a [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")-wide
    [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint").
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 每个对象都是 [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") 范围内的 [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") 的成员。
- en: See also
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Table.foreign_keys`](#sqlalchemy.schema.Table.foreign_keys "sqlalchemy.schema.Table.foreign_keys")'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Table.foreign_keys`](#sqlalchemy.schema.Table.foreign_keys "sqlalchemy.schema.Table.foreign_keys")'
- en: '[PRE81]'
  id: totrans-442
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '*inherited from the* [`ColumnClause.get_children()`](sqlelement.html#sqlalchemy.sql.expression.ColumnClause.get_children
    "sqlalchemy.sql.expression.ColumnClause.get_children") *method of* [`ColumnClause`](sqlelement.html#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause")'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnClause.get_children()`](sqlelement.html#sqlalchemy.sql.expression.ColumnClause.get_children
    "sqlalchemy.sql.expression.ColumnClause.get_children") *方法的* [`ColumnClause`](sqlelement.html#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause")'
- en: Return immediate child `HasTraverseInternals` elements of this `HasTraverseInternals`.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此 `HasTraverseInternals` 的即时子元素。
- en: This is used for visit traversal.
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 这用于访问遍历。
- en: '**kw may contain flags that change the collection that is returned, for example
    to return a subset of items in order to cut down on larger traversals, or to return
    child items from a different context (such as schema-level collections instead
    of clause-level).'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: '**kw 可能包含更改返回的集合的标志，例如返回子项的子集以减少更大的遍历，或者从不同的上下文（例如模式级别的集合而不是从子句级别）返回子项。'
- en: '[PRE82]'
  id: totrans-447
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '*inherited from the* [`ColumnOperators.icontains()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains
    "sqlalchemy.sql.expression.ColumnOperators.icontains") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.icontains()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains
    "sqlalchemy.sql.expression.ColumnOperators.icontains") *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `icontains` operator, e.g. case insensitive version of [`ColumnOperators.contains()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains").
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `icontains` 运算符，例如 [`ColumnOperators.contains()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains") 的不区分大小写版本。
- en: 'Produces a LIKE expression that tests against an insensitive match for the
    middle of a string value:'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个 LIKE 表达式，用于对字符串值的中间进行不区分大小写的匹配：
- en: '[PRE83]'
  id: totrans-451
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'E.g.:'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE84]'
  id: totrans-453
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.icontains.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.icontains.escape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 由于该操作符使用了`LIKE`，所以在<other>表达式内部存在的通配符字符`"%"`和`"_"`也将像通配符一样起作用。对于字面字符串值，可以设置[`ColumnOperators.icontains.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.icontains")标志为`True`，对字符串值内这些字符的出现应用转义，使它们匹配为它们自身而不是通配符字符。或者，[`ColumnOperators.icontains.escape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.icontains")参数将建立一个给定的字符作为转义字符，当目标表达式不是字面字符串时，这可能会有所帮助。
- en: 'Parameters:'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.icontains.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") flag is set to True.'
  id: totrans-456
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要比较的表达式。这通常是一个普通字符串值，但也可以是任意的SQL表达式。除非将[`ColumnOperators.icontains.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.icontains")标志设置为`True`，否则`LIKE`通配符字符`%`和`_`默认不会转义。'
- en: '`autoescape` –'
  id: totrans-457
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-458
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`boolean`；当为`True`时，在`LIKE`表达式中建立一个转义字符，然后将其应用于比较值内所有出现的`"%"`、`"_"`和转义字符本身，这里假定比较值是一个字面字符串而不是一个SQL表达式。'
- en: 'An expression such as:'
  id: totrans-459
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个类似如下的表达式：
- en: '[PRE85]'
  id: totrans-460
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'Will render as:'
  id: totrans-461
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将渲染为：
- en: '[PRE86]'
  id: totrans-462
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-463
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以`:param`的值为`"foo/%bar"`。
- en: '`escape` –'
  id: totrans-464
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-465
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当给定一个字符时，将以`ESCAPE`关键字渲染该字符以将其建立为转义字符。然后，可以将该字符放在`%`和`_`的前面以允许它们作为它们自身而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-466
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个类似如下的表达式：
- en: '[PRE87]'
  id: totrans-467
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'Will render as:'
  id: totrans-468
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将渲染为：
- en: '[PRE88]'
  id: totrans-469
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'The parameter may also be combined with [`ColumnOperators.contains.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains"):'
  id: totrans-470
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该参数也可以与[`ColumnOperators.contains.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains")结合使用：
- en: '[PRE89]'
  id: totrans-471
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE89]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-472
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述情况下，给定的字面参数将在传递到数据库之前转换为`"foo^%bar^^bat"`。
- en: See also
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`ColumnOperators.contains()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.contains()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
- en: '[PRE90]'
  id: totrans-475
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '*inherited from the* [`ColumnOperators.iendswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.iendswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `iendswith` operator, e.g. case insensitive version of [`ColumnOperators.endswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith").
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`iendswith`操作符，例如，[`ColumnOperators.endswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")的不区分大小写版本。
- en: 'Produces a LIKE expression that tests against an insensitive match for the
    end of a string value:'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 产生一个LIKE表达式，用于对字符串值的结尾进行不区分大小写匹配：
- en: '[PRE91]'
  id: totrans-479
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'E.g.:'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE92]'
  id: totrans-481
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.iendswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.iendswith.escape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: 由于运算符使用`LIKE`，所以存在于<other>表达式中的通配符字符`"%"`和`"_"`也会像通配符一样起作用。对于字面字符串值，可以将标志[`ColumnOperators.iendswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith")设置为`True`，以对字符串值中这些字符的出现进行转义，使它们作为自身而不是通配符字符进行匹配。或者，参数[`ColumnOperators.iendswith.escape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith")将建立一个给定的字符作为转义字符，当目标表达式不是字面字符串时可以派上用场。
- en: 'Parameters:'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.iendswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") flag is set to True.'
  id: totrans-484
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要进行比较的表达式。这通常是一个简单的字符串值，但也可以是任意的SQL表达式。除非将标志[`ColumnOperators.iendswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith")设置为True，否则不会转义LIKE通配符`%`和`_`。'
- en: '`autoescape` –'
  id: totrans-485
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-486
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值；当为True时，在LIKE表达式中建立一个转义字符，然后将其应用于比较值中的所有`"%"`、`"_"`和转义字符本身的出现，假设比较值是一个字面字符串而不是SQL表达式。
- en: 'An expression such as:'
  id: totrans-487
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 诸如：
- en: '[PRE93]'
  id: totrans-488
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'Will render as:'
  id: totrans-489
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE94]'
  id: totrans-490
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE94]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-491
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 其中，`:param`的值为`"foo/%bar"`。
- en: '`escape` –'
  id: totrans-492
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-493
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字符，当给定时，将使用`ESCAPE`关键字将该字符建立为转义字符。然后，该字符可以放在`%`和`_`之前，以允许它们作为自身而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-494
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 诸如：
- en: '[PRE95]'
  id: totrans-495
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'Will render as:'
  id: totrans-496
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE96]'
  id: totrans-497
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 'The parameter may also be combined with [`ColumnOperators.iendswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith"):'
  id: totrans-498
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参数也可以与[`ColumnOperators.iendswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith")组合：
- en: '[PRE97]'
  id: totrans-499
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE97]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-500
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上面的例子中，给定的字面参数将在传递到数据库之前被转换为`"foo^%bar^^bat"`。
- en: See also
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.endswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.endswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
- en: '[PRE98]'
  id: totrans-503
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '*inherited from the* [`ColumnOperators.ilike()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.ilike()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike") *的方法* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `ilike` operator, e.g. case insensitive LIKE.
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`ilike`运算符，例如不区分大小写的LIKE。
- en: 'In a column context, produces an expression either of the form:'
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，产生形式为：
- en: '[PRE99]'
  id: totrans-507
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'Or on backends that support the ILIKE operator:'
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 或者在支持 ILIKE 运算符的后端上：
- en: '[PRE100]'
  id: totrans-509
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: 'E.g.:'
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE101]'
  id: totrans-511
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: 'Parameters:'
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared'
  id: totrans-513
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要比较的表达式'
- en: '`escape` –'
  id: totrans-514
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: 'optional escape character, renders the `ESCAPE` keyword, e.g.:'
  id: totrans-515
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的转义字符，渲染 `ESCAPE` 关键字，例如：
- en: '[PRE102]'
  id: totrans-516
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE102]'
- en: See also
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`ColumnOperators.like()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE103]'
  id: totrans-519
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '*inherited from the* [`ColumnOperators.in_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.in_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `in` operator.
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `in` 运算符。
- en: In a column context, produces the clause `column IN <other>`.
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句 `column IN <other>`。
- en: 'The given parameter `other` may be:'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 给定的参数 `other` 可能是：
- en: 'A list of literal values, e.g.:'
  id: totrans-524
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个字面值列表，例如：
- en: '[PRE104]'
  id: totrans-525
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'In this calling form, the list of items is converted to a set of bound parameters
    the same length as the list given:'
  id: totrans-526
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这种调用形式中，项目列表转换为与给定列表长度相同的一组绑定参数：
- en: '[PRE105]'
  id: totrans-527
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'A list of tuples may be provided if the comparison is against a [`tuple_()`](sqlelement.html#sqlalchemy.sql.expression.tuple_
    "sqlalchemy.sql.expression.tuple_") containing multiple expressions:'
  id: totrans-528
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果比较是针对包含多个表达式的 [`tuple_()`](sqlelement.html#sqlalchemy.sql.expression.tuple_
    "sqlalchemy.sql.expression.tuple_")，则可以提供元组列表：
- en: '[PRE106]'
  id: totrans-529
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'An empty list, e.g.:'
  id: totrans-530
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个空列表，例如：
- en: '[PRE107]'
  id: totrans-531
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE107]'
- en: 'In this calling form, the expression renders an “empty set” expression. These
    expressions are tailored to individual backends and are generally trying to get
    an empty SELECT statement as a subquery. Such as on SQLite, the expression is:'
  id: totrans-532
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这种调用形式中，表达式渲染为“空集”表达式。这些表达式针对各个后端进行了定制，通常试图将空的 SELECT 语句作为子查询。例如在 SQLite 上，表达式是：
- en: '[PRE108]'
  id: totrans-533
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE108]'
- en: 'Changed in version 1.4: empty IN expressions now use an execution-time generated
    SELECT subquery in all cases.'
  id: totrans-534
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本 1.4 开始：在所有情况下，空的 IN 表达式现在使用执行时生成的 SELECT 子查询。
- en: 'A bound parameter, e.g. [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam"), may be used if it includes the [`bindparam.expanding`](sqlelement.html#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam") flag:'
  id: totrans-535
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以使用绑定参数，例如 [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")，如果它包含 [`bindparam.expanding`](sqlelement.html#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam") 标志：
- en: '[PRE109]'
  id: totrans-536
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE109]'
- en: 'In this calling form, the expression renders a special non-SQL placeholder
    expression that looks like:'
  id: totrans-537
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这种调用形式中，表达式渲染为一个特殊的非 SQL 占位符表达式，看起来像：
- en: '[PRE110]'
  id: totrans-538
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE110]'
- en: 'This placeholder expression is intercepted at statement execution time to be
    converted into the variable number of bound parameter form illustrated earlier.
    If the statement were executed as:'
  id: totrans-539
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个占位符表达式在语句执行时被拦截，转换为前面所示的可变数量的绑定参数形式。如果执行语句如下：
- en: '[PRE111]'
  id: totrans-540
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE111]'
- en: 'The database would be passed a bound parameter for each value:'
  id: totrans-541
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 数据库将为每个值传递一个绑定参数：
- en: '[PRE112]'
  id: totrans-542
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE112]'
- en: 'New in version 1.2: added “expanding” bound parameters'
  id: totrans-543
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版本 1.2 中添加了“扩展”绑定参数
- en: 'If an empty list is passed, a special “empty list” expression, which is specific
    to the database in use, is rendered. On SQLite this would be:'
  id: totrans-544
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果传递了空列表，则渲染一个特殊的“空列表”表达式，该表达式特定于正在使用的数据库。在 SQLite 上，这将是：
- en: '[PRE113]'
  id: totrans-545
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE113]'
- en: 'New in version 1.3: “expanding” bound parameters now support empty lists'
  id: totrans-546
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版本 1.3 中：现在“扩展”绑定参数支持空列表
- en: 'a [`select()`](selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    construct, which is usually a correlated scalar select:'
  id: totrans-547
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 [`select()`](selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    构造，通常是一个相关的标量选择：
- en: '[PRE114]'
  id: totrans-548
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE114]'
- en: 'In this calling form, [`ColumnOperators.in_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") renders as given:'
  id: totrans-549
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这种调用形式中，[`ColumnOperators.in_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") 渲染如下：
- en: '[PRE115]'
  id: totrans-550
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE115]'
- en: 'Parameters:'
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**other** – a list of literals, a [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct, or a [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") construct that includes the [`bindparam.expanding`](sqlelement.html#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam") flag set to True.'
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: '**other** – 一个字面量列表，一个 [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造，或者一个包含 [`bindparam.expanding`](sqlelement.html#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam") 标志设置为 True 的 [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") 构造。'
- en: '[PRE116]'
  id: totrans-553
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: The value of the [`Column.index`](#sqlalchemy.schema.Column.params.index "sqlalchemy.schema.Column")
    parameter.
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Column.index`](#sqlalchemy.schema.Column.params.index "sqlalchemy.schema.Column")
    参数的值。'
- en: Does not indicate if this [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    is actually indexed or not; use [`Table.indexes`](#sqlalchemy.schema.Table.indexes
    "sqlalchemy.schema.Table.indexes").
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: 不指示此 [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column") 是否实际上已经索引化；请使用
    [`Table.indexes`](#sqlalchemy.schema.Table.indexes "sqlalchemy.schema.Table.indexes")。
- en: See also
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Table.indexes`](#sqlalchemy.schema.Table.indexes "sqlalchemy.schema.Table.indexes")'
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Table.indexes`](#sqlalchemy.schema.Table.indexes "sqlalchemy.schema.Table.indexes")'
- en: '[PRE117]'
  id: totrans-558
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '*inherited from the* [`SchemaItem.info`](#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info") *attribute of* [`SchemaItem`](#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem")'
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SchemaItem.info`](#sqlalchemy.schema.SchemaItem.info "sqlalchemy.schema.SchemaItem.info")
    *属性的* [`SchemaItem`](#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")。'
- en: Info dictionary associated with the object, allowing user-defined data to be
    associated with this [`SchemaItem`](#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem").
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: 与对象相关联的信息字典，允许将用户定义的数据与此 [`SchemaItem`](#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")
    关联。
- en: The dictionary is automatically generated when first accessed. It can also be
    specified in the constructor of some objects, such as [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") and [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column").
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: 字典在第一次访问时会自动生成。它还可以在某些对象的构造函数中指定，例如 [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    和 [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")。
- en: '[PRE118]'
  id: totrans-562
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: Indicate if this [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") instance should make use of the cache
    key generation scheme used by its immediate superclass.
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: 指示此 [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey "sqlalchemy.sql.traversals.HasCacheKey")
    实例是否应该使用其直接超类使用的缓存键生成方案。
- en: The attribute defaults to `None`, which indicates that a construct has not yet
    taken into account whether or not its appropriate for it to participate in caching;
    this is functionally equivalent to setting the value to `False`, except that a
    warning is also emitted.
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: 此属性默认为 `None`，表示构造尚未考虑其是否适合参与缓存；这在功能上等同于将值设置为 `False`，除了还会发出警告。
- en: This flag can be set to `True` on a particular class, if the SQL that corresponds
    to the object does not change based on attributes which are local to this class,
    and not its superclass.
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: 如果与此类局部而非其超类相关的属性不会更改与对象对应的 SQL，则可以在特定类上将此标志设置为 `True`。
- en: See also
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Enabling Caching Support for Custom Constructs](compiler.html#compilerext-caching)
    - General guideslines for setting the [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute for third-party
    or user defined SQL constructs.'
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: '[为自定义构造启用缓存支持](compiler.html#compilerext-caching) - 有关设置特定类的 [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") 属性以供第三方或用户定义的 SQL 构造使用的一般指南。'
- en: '[PRE119]'
  id: totrans-568
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '*inherited from the* [`ColumnOperators.is_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.is_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_") *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")。'
- en: Implement the `IS` operator.
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `IS` 操作符。
- en: Normally, `IS` is generated automatically when comparing to a value of `None`,
    which resolves to `NULL`. However, explicit usage of `IS` may be desirable if
    comparing to boolean values on certain platforms.
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，与`None`值比较时会自动生成`IS`，其解析为`NULL`。然而，在某些平台上，如果要与布尔值进行比较，则可能需要显式使用`IS`。
- en: See also
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.is_not()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not")'
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.is_not()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not")'
- en: '[PRE120]'
  id: totrans-574
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '*inherited from the* [`ColumnOperators.is_distinct_from()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_distinct_from") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.is_distinct_from()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_distinct_from") *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `IS DISTINCT FROM` operator.
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`IS DISTINCT FROM`操作符。
- en: Renders “a IS DISTINCT FROM b” on most platforms; on some such as SQLite may
    render “a IS NOT b”.
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数平台上呈现为“a IS DISTINCT FROM b”；在某些平台上，如SQLite可能呈现为“a IS NOT b”。
- en: '[PRE121]'
  id: totrans-578
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '*inherited from the* [`ColumnOperators.is_not()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.is_not()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not") *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `IS NOT` operator.
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`IS NOT`操作符。
- en: Normally, `IS NOT` is generated automatically when comparing to a value of `None`,
    which resolves to `NULL`. However, explicit usage of `IS NOT` may be desirable
    if comparing to boolean values on certain platforms.
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，与`None`值比较时会自动生成`IS NOT`，其解析为`NULL`。然而，在某些平台上，如果要与布尔值进行比较，则可能需要显式使用`IS
    NOT`。
- en: 'Changed in version 1.4: The `is_not()` operator is renamed from `isnot()` in
    previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4版本更改：`is_not()`操作符从先前版本的`isnot()`重新命名。以前的名称仍然可用于向后兼容。
- en: See also
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.is_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_")'
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.is_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_")'
- en: '[PRE122]'
  id: totrans-585
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '*inherited from the* [`ColumnOperators.is_not_distinct_from()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_not_distinct_from") *method of*
    [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.is_not_distinct_from()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_not_distinct_from") *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `IS NOT DISTINCT FROM` operator.
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`IS NOT DISTINCT FROM`操作符。
- en: Renders “a IS NOT DISTINCT FROM b” on most platforms; on some such as SQLite
    may render “a IS b”.
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数平台上呈现为“a IS NOT DISTINCT FROM b”；在某些平台上，如SQLite可能呈现为“a IS b”。
- en: 'Changed in version 1.4: The `is_not_distinct_from()` operator is renamed from
    `isnot_distinct_from()` in previous releases. The previous name remains available
    for backwards compatibility.'
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4版本更改：`is_not_distinct_from()`操作符从先前版本的`isnot_distinct_from()`重新命名。以前的名称仍然可用于向后兼容。
- en: '[PRE123]'
  id: totrans-590
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '*inherited from the* [`ColumnOperators.isnot()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot
    "sqlalchemy.sql.expression.ColumnOperators.isnot") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.isnot()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot
    "sqlalchemy.sql.expression.ColumnOperators.isnot") *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `IS NOT` operator.
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`IS NOT`操作符。
- en: Normally, `IS NOT` is generated automatically when comparing to a value of `None`,
    which resolves to `NULL`. However, explicit usage of `IS NOT` may be desirable
    if comparing to boolean values on certain platforms.
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，与`None`值比较时会自动生成`IS NOT`，其解析为`NULL`。然而，在某些平台上，如果要与布尔值进行比较，则可能需要显式使用`IS
    NOT`。
- en: 'Changed in version 1.4: The `is_not()` operator is renamed from `isnot()` in
    previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4 开始更改：`is_not()` 操作符在之前的版本中从`isnot()`重命名。以确保向后兼容性仍可使用之前的名称。
- en: See also
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.is_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_")'
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.is_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_")'
- en: '[PRE124]'
  id: totrans-597
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '*inherited from the* [`ColumnOperators.isnot_distinct_from()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.isnot_distinct_from()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from") *的方法* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `IS NOT DISTINCT FROM` operator.
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `IS NOT DISTINCT FROM` 操作符。
- en: Renders “a IS NOT DISTINCT FROM b” on most platforms; on some such as SQLite
    may render “a IS b”.
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数平台上呈现“a IS NOT DISTINCT FROM b”；在某些平台上，例如 SQLite 可能会呈现“a IS b”。
- en: 'Changed in version 1.4: The `is_not_distinct_from()` operator is renamed from
    `isnot_distinct_from()` in previous releases. The previous name remains available
    for backwards compatibility.'
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4 开始更改：`is_not_distinct_from()` 操作符在之前的版本中从 `isnot_distinct_from()` 重命名。以确保向后兼容性仍可使用之前的名称。
- en: '[PRE125]'
  id: totrans-602
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '*inherited from the* [`ColumnOperators.istartswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.istartswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") *的方法* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `istartswith` operator, e.g. case insensitive version of [`ColumnOperators.startswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith").
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `istartswith` 操作符，例如 [`ColumnOperators.startswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith") 的不区分大小写版本。
- en: 'Produces a LIKE expression that tests against an insensitive match for the
    start of a string value:'
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个 LIKE 表达式，用于对字符串值的开头进行不区分大小写的匹配：
- en: '[PRE126]'
  id: totrans-606
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: 'E.g.:'
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE127]'
  id: totrans-608
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.istartswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.istartswith.escape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: 由于操作符使用`LIKE`，存在于<other>表达式内部的通配符字符`"%"`和`"_"`也会像通配符一样起作用。对于文字字符串值，可以将[`ColumnOperators.istartswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith")标志设置为`True`，以对字符串值内的这些字符应用转义，使它们匹配为自己而不是通配符字符。或者，[`ColumnOperators.istartswith.escape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith")参数将建立一个给定的字符作为转义字符，当目标表达式不是文字字符串时可以派上用场。
- en: 'Parameters:'
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.istartswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") flag is set to True.'
  id: totrans-611
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要比较的表达式。通常这是一个纯文本字符串值，但也可以是任意的 SQL 表达式。LIKE 通配符字符 `%` 和 `_` 默认情况下不会被转义，除非设置了[`ColumnOperators.istartswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith")标志为True。'
- en: '`autoescape` –'
  id: totrans-612
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-613
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值；当为True时，在LIKE表达式中建立一个转义字符，然后将其应用于比较值中的所有`"%"`、`"_"`和转义字符本身的出现，假定比较值为文字字符串而不是SQL表达式。
- en: 'An expression such as:'
  id: totrans-614
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE128]'
  id: totrans-615
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE128]'
- en: 'Will render as:'
  id: totrans-616
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE129]'
  id: totrans-617
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE129]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-618
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 具有值`:param`为`"foo/%bar"`。
- en: '`escape` –'
  id: totrans-619
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-620
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字符，当给定时，将使用`ESCAPE`关键字将其呈现为转义字符。然后可以将此字符放在`%`和`_`之前，以使它们作为自身而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-621
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE130]'
  id: totrans-622
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE130]'
- en: 'Will render as:'
  id: totrans-623
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE131]'
  id: totrans-624
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE131]'
- en: 'The parameter may also be combined with [`ColumnOperators.istartswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith"):'
  id: totrans-625
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参数也可以与[`ColumnOperators.istartswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith")结合使用：
- en: '[PRE132]'
  id: totrans-626
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE132]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-627
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述情况下，给定的文字参数将在传递到数据库之前转换为`"foo^%bar^^bat"`。
- en: See also
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`ColumnOperators.startswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.startswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
- en: '[PRE133]'
  id: totrans-630
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '*inherited from the* [`ColumnElement.key`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.key
    "sqlalchemy.sql.expression.ColumnElement.key") *attribute of* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnElement.key`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.key
    "sqlalchemy.sql.expression.ColumnElement.key") *属性的* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
- en: The ‘key’ that in some circumstances refers to this object in a Python namespace.
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下指代此对象在Python命名空间中的‘key’。
- en: This typically refers to the “key” of the column as present in the `.c` collection
    of a selectable, e.g. `sometable.c["somekey"]` would return a [`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") with a `.key` of “somekey”.
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: 这通常指的是在可选择的`.c`集合中表示的列的“键”，例如`somekey`的`somekey`将返回一个[`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")，其`.key`为“somekey”。
- en: '[PRE134]'
  id: totrans-634
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '*inherited from the* [`DialectKWArgs.kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.kwargs
    "sqlalchemy.sql.base.DialectKWArgs.kwargs") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs.kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.kwargs
    "sqlalchemy.sql.base.DialectKWArgs.kwargs") *属性的* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
- en: A synonym for [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs").
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs")的同义词。'
- en: '[PRE135]'
  id: totrans-637
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: '*inherited from the* [`ColumnElement.label()`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.label
    "sqlalchemy.sql.expression.ColumnElement.label") *method of* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnElement.label()`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.label
    "sqlalchemy.sql.expression.ColumnElement.label") *方法的* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
- en: Produce a column label, i.e. `<columnname> AS <name>`.
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个列标签，即`<columnname> AS <name>`。
- en: This is a shortcut to the [`label()`](sqlelement.html#sqlalchemy.sql.expression.label
    "sqlalchemy.sql.expression.label") function.
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: 这是[`label()`](sqlelement.html#sqlalchemy.sql.expression.label "sqlalchemy.sql.expression.label")函数的快捷方式。
- en: If ‘name’ is `None`, an anonymous label name will be generated.
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
  zh: 如果‘name’为`None`，将生成一个匿名标签名称。
- en: '[PRE136]'
  id: totrans-642
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '*inherited from the* [`ColumnOperators.like()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.like()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like") *的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") *方法*'
- en: Implement the `like` operator.
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `like` 运算符。
- en: 'In a column context, produces the expression:'
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成表达式：
- en: '[PRE137]'
  id: totrans-646
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: 'E.g.:'
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE138]'
  id: totrans-648
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: 'Parameters:'
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared'
  id: totrans-650
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要比较的表达式'
- en: '`escape` –'
  id: totrans-651
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: 'optional escape character, renders the `ESCAPE` keyword, e.g.:'
  id: totrans-652
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的转义字符，呈现`ESCAPE`关键字，例如：
- en: '[PRE139]'
  id: totrans-653
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE139]'
- en: See also
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.ilike()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.ilike()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
- en: '[PRE140]'
  id: totrans-656
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '*inherited from the* [`ColumnOperators.match()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.match()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") *的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implements a database-specific ‘match’ operator.
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
  zh: 实现特定于数据库的 'match' 运算符。
- en: '[`ColumnOperators.match()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") attempts to resolve to a MATCH-like
    function or operator provided by the backend. Examples include:'
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.match()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") 尝试解析由后端提供的类似 MATCH 的函数或运算符。示例包括：'
- en: PostgreSQL - renders `x @@ plainto_tsquery(y)`
  id: totrans-660
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PostgreSQL - 呈现 `x @@ plainto_tsquery(y)`
- en: 'Changed in version 2.0: `plainto_tsquery()` is used instead of `to_tsquery()`
    for PostgreSQL now; for compatibility with other forms, see [Full Text Search](../dialects/postgresql.html#postgresql-match).'
  id: totrans-661
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 版本 2.0 中的更改：现在对于 PostgreSQL，使用 `plainto_tsquery()` 而不是 `to_tsquery()`；为了与其他形式兼容，请参阅
    [全文搜索](../dialects/postgresql.html#postgresql-match)。
- en: MySQL - renders `MATCH (x) AGAINST (y IN BOOLEAN MODE)`
  id: totrans-662
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL - 呈现 `MATCH (x) AGAINST (y IN BOOLEAN MODE)`
- en: See also
  id: totrans-663
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`match`](../dialects/mysql.html#sqlalchemy.dialects.mysql.match "sqlalchemy.dialects.mysql.match")
    - MySQL specific construct with additional features.'
  id: totrans-664
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`match`](../dialects/mysql.html#sqlalchemy.dialects.mysql.match "sqlalchemy.dialects.mysql.match")
    - 具有附加功能的 MySQL 特定构造。'
- en: Oracle - renders `CONTAINS(x, y)`
  id: totrans-665
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Oracle - 呈现 `CONTAINS(x, y)`
- en: other backends may provide special implementations.
  id: totrans-666
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他后端可能提供特殊实现。
- en: Backends without any special implementation will emit the operator as “MATCH”.
    This is compatible with SQLite, for example.
  id: totrans-667
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有任何特殊实现的后端将发出操作符为“MATCH”。例如，这与 SQLite 兼容。
- en: '[PRE141]'
  id: totrans-668
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '*inherited from the* [`ColumnOperators.not_ilike()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_ilike
    "sqlalchemy.sql.expression.ColumnOperators.not_ilike") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.not_ilike()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_ilike
    "sqlalchemy.sql.expression.ColumnOperators.not_ilike") *的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: implement the `NOT ILIKE` operator.
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `NOT ILIKE` 运算符。
- en: This is equivalent to using negation with [`ColumnOperators.ilike()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike"), i.e. `~x.ilike(y)`.
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于使用 [`ColumnOperators.ilike()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike") 的否定，即 `~x.ilike(y)`。
- en: 'Changed in version 1.4: The `not_ilike()` operator is renamed from `notilike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中的更改：`not_ilike()` 运算符从以前的版本中的 `notilike()` 重命名。以前的名称仍可用于向后兼容。
- en: See also
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.ilike()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.ilike()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
- en: '[PRE142]'
  id: totrans-675
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '*inherited from the* [`ColumnOperators.not_in()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.not_in()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") *的方法* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: implement the `NOT IN` operator.
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `NOT IN` 运算符。
- en: This is equivalent to using negation with [`ColumnOperators.in_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_"), i.e. `~x.in_(y)`.
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于对 [`ColumnOperators.in_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") 进行取反操作，即 `~x.in_(y)`。
- en: In the case that `other` is an empty sequence, the compiler produces an “empty
    not in” expression. This defaults to the expression “1 = 1” to produce true in
    all cases. The [`create_engine.empty_in_strategy`](engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine") may be used to alter this behavior.
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `other` 是一个空序列，则编译器会生成一个“空的不在”表达式。 默认情况下，这会转换为表达式 “1 = 1” 以在所有情况下产生 true。
    可以使用 [`create_engine.empty_in_strategy`](engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine") 来更改此行为。
- en: 'Changed in version 1.4: The `not_in()` operator is renamed from `notin_()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-680
  prefs: []
  type: TYPE_NORMAL
  zh: 在 1.4 版本中有所变动：`not_in()` 运算符从先前的 `notin_()` 改名为 `not_in()`。 先前的名称仍可用于向后兼容。
- en: 'Changed in version 1.2: The [`ColumnOperators.in_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") and [`ColumnOperators.not_in()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") operators now produce a “static”
    expression for an empty IN sequence by default.'
  id: totrans-681
  prefs: []
  type: TYPE_NORMAL
  zh: 在 1.2 版本中有所变动：[`ColumnOperators.in_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") 和 [`ColumnOperators.not_in()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") 运算符现在默认生成一个空的 IN 序列的“静态”表达式。
- en: See also
  id: totrans-682
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.in_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")'
  id: totrans-683
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.in_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")'
- en: '[PRE143]'
  id: totrans-684
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '*inherited from the* [`ColumnOperators.not_like()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_like
    "sqlalchemy.sql.expression.ColumnOperators.not_like") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.not_like()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_like
    "sqlalchemy.sql.expression.ColumnOperators.not_like") *的方法* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: implement the `NOT LIKE` operator.
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `NOT LIKE` 运算符。
- en: This is equivalent to using negation with [`ColumnOperators.like()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like"), i.e. `~x.like(y)`.
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于对 [`ColumnOperators.like()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like") 进行取反操作，即 `~x.like(y)`。
- en: 'Changed in version 1.4: The `not_like()` operator is renamed from `notlike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-688
  prefs: []
  type: TYPE_NORMAL
  zh: 在 1.4 版本中有所变动：`not_like()` 运算符从先前的 `notlike()` 改名为 `not_like()`。 先前的名称仍可用于向后兼容。
- en: See also
  id: totrans-689
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.like()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE144]'
  id: totrans-691
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '*inherited from the* [`ColumnOperators.notilike()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notilike
    "sqlalchemy.sql.expression.ColumnOperators.notilike") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.notilike()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notilike
    "sqlalchemy.sql.expression.ColumnOperators.notilike") *的方法* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: implement the `NOT ILIKE` operator.
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `NOT ILIKE` 运算符。
- en: This is equivalent to using negation with [`ColumnOperators.ilike()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike"), i.e. `~x.ilike(y)`.
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于对 [`ColumnOperators.ilike()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike") 进行取反操作，即 `~x.ilike(y)`。
- en: 'Changed in version 1.4: The `not_ilike()` operator is renamed from `notilike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.4版本中更改：`not_ilike()`运算符在之前的版本中从`notilike()`重命名。以前的名称仍然可用于向后兼容。
- en: See also
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`ColumnOperators.ilike()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.ilike()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
- en: '[PRE145]'
  id: totrans-698
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '*inherited from the* [`ColumnOperators.notin_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notin_
    "sqlalchemy.sql.expression.ColumnOperators.notin_") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.notin_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notin_
    "sqlalchemy.sql.expression.ColumnOperators.notin_") *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: implement the `NOT IN` operator.
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`NOT IN`运算符。
- en: This is equivalent to using negation with [`ColumnOperators.in_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_"), i.e. `~x.in_(y)`.
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于对 [`ColumnOperators.in_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") 使用否定，即 `~x.in_(y)`。
- en: In the case that `other` is an empty sequence, the compiler produces an “empty
    not in” expression. This defaults to the expression “1 = 1” to produce true in
    all cases. The [`create_engine.empty_in_strategy`](engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine") may be used to alter this behavior.
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`other`是空序列，则编译器生成一个“空的不在其中”表达式。默认情况下，这默认为表达式“1 = 1”，在所有情况下都产生true。[`create_engine.empty_in_strategy`](engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine") 可用于更改此行为。
- en: 'Changed in version 1.4: The `not_in()` operator is renamed from `notin_()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-703
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.4版本中更改：`not_in()`运算符在之前的版本中从`notin_()`重命名。以前的名称仍然可用于向后兼容。
- en: 'Changed in version 1.2: The [`ColumnOperators.in_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") and [`ColumnOperators.not_in()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") operators now produce a “static”
    expression for an empty IN sequence by default.'
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.2版本中更改：[`ColumnOperators.in_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") 和 [`ColumnOperators.not_in()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") 运算符现在默认情况下生成一个“静态”表达式以表示空的IN序列。
- en: See also
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`ColumnOperators.in_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")'
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.in_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")'
- en: '[PRE146]'
  id: totrans-707
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '*inherited from the* [`ColumnOperators.notlike()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notlike
    "sqlalchemy.sql.expression.ColumnOperators.notlike") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.notlike()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notlike
    "sqlalchemy.sql.expression.ColumnOperators.notlike") *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: implement the `NOT LIKE` operator.
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`NOT LIKE`运算符。
- en: This is equivalent to using negation with [`ColumnOperators.like()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like"), i.e. `~x.like(y)`.
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于对 [`ColumnOperators.like()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like") 使用否定，即 `~x.like(y)`。
- en: 'Changed in version 1.4: The `not_like()` operator is renamed from `notlike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.4版本中更改：`not_like()`运算符在之前的版本中从`notlike()`重命名。以前的名称仍然可用于向后兼容。
- en: See also
  id: totrans-712
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`ColumnOperators.like()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE147]'
  id: totrans-714
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '*inherited from the* [`ColumnOperators.nulls_first()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nulls_first
    "sqlalchemy.sql.expression.ColumnOperators.nulls_first") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.nulls_first()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nulls_first
    "sqlalchemy.sql.expression.ColumnOperators.nulls_first") *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`nulls_first()`](sqlelement.html#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first") clause against the parent object.
  id: totrans-716
  prefs: []
  type: TYPE_NORMAL
  zh: 对父对象生成一个[`nulls_first()`](sqlelement.html#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first")子句。
- en: 'Changed in version 1.4: The `nulls_first()` operator is renamed from `nullsfirst()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.4版本中更改：`nulls_first()`运算符在以前的版本中从`nullsfirst()`改名。 以前的名称仍然可用于向后兼容。
- en: '[PRE148]'
  id: totrans-718
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '*inherited from the* [`ColumnOperators.nulls_last()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nulls_last
    "sqlalchemy.sql.expression.ColumnOperators.nulls_last") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.nulls_last()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nulls_last
    "sqlalchemy.sql.expression.ColumnOperators.nulls_last") *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`nulls_last()`](sqlelement.html#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last") clause against the parent object.
  id: totrans-720
  prefs: []
  type: TYPE_NORMAL
  zh: 对父对象生成一个[`nulls_last()`](sqlelement.html#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last")子句。
- en: 'Changed in version 1.4: The `nulls_last()` operator is renamed from `nullslast()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.4版本中更改：`nulls_last()`运算符在以前的版本中从`nullslast()`改名。 以前的名称仍然可用于向后兼容。
- en: '[PRE149]'
  id: totrans-722
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: '*inherited from the* [`ColumnOperators.nullsfirst()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nullsfirst
    "sqlalchemy.sql.expression.ColumnOperators.nullsfirst") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.nullsfirst()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nullsfirst
    "sqlalchemy.sql.expression.ColumnOperators.nullsfirst") *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`nulls_first()`](sqlelement.html#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first") clause against the parent object.
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
  zh: 对父对象生成一个[`nulls_first()`](sqlelement.html#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first")子句。
- en: 'Changed in version 1.4: The `nulls_first()` operator is renamed from `nullsfirst()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.4版本中更改：`nulls_first()`运算符在以前的版本中从`nullsfirst()`改名。 以前的名称仍然可用于向后兼容。
- en: '[PRE150]'
  id: totrans-726
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: '*inherited from the* [`ColumnOperators.nullslast()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nullslast
    "sqlalchemy.sql.expression.ColumnOperators.nullslast") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.nullslast()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nullslast
    "sqlalchemy.sql.expression.ColumnOperators.nullslast") *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`nulls_last()`](sqlelement.html#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last") clause against the parent object.
  id: totrans-728
  prefs: []
  type: TYPE_NORMAL
  zh: 对父对象生成一个[`nulls_last()`](sqlelement.html#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last")子句。
- en: 'Changed in version 1.4: The `nulls_last()` operator is renamed from `nullslast()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.4版本中更改：`nulls_last()`运算符在以前的版本中从`nullslast()`改名。 以前的名称仍然可用于向后兼容。
- en: '[PRE151]'
  id: totrans-730
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: '*inherited from the* [`Operators.op()`](sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") *method of* [`Operators`](sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Operators.op()`](sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") *方法的* [`Operators`](sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
- en: Produce a generic operator function.
  id: totrans-732
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个通用操作函数。
- en: 'e.g.:'
  id: totrans-733
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE152]'
  id: totrans-734
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: 'produces:'
  id: totrans-735
  prefs: []
  type: TYPE_NORMAL
  zh: 产生：
- en: '[PRE153]'
  id: totrans-736
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: 'This function can also be used to make bitwise operators explicit. For example:'
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数还可用于使按位运算符明确。 例如：
- en: '[PRE154]'
  id: totrans-738
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: is a bitwise AND of the value in `somecolumn`.
  id: totrans-739
  prefs: []
  type: TYPE_NORMAL
  zh: 是`somecolumn`中值的按位与。
- en: 'Parameters:'
  id: totrans-740
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`opstring` – a string which will be output as the infix operator between this
    element and the expression passed to the generated function.'
  id: totrans-741
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`opstring` – 将作为此元素与传递给生成函数的表达式之间的中缀操作符输出的字符串。'
- en: '`precedence` –'
  id: totrans-742
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`precedence` –'
- en: precedence which the database is expected to apply to the operator in SQL expressions.
    This integer value acts as a hint for the SQL compiler to know when explicit parenthesis
    should be rendered around a particular operation. A lower number will cause the
    expression to be parenthesized when applied against another operator with higher
    precedence. The default value of `0` is lower than all operators except for the
    comma (`,`) and `AS` operators. A value of 100 will be higher or equal to all
    operators, and -100 will be lower than or equal to all operators.
  id: totrans-743
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 数据库预期应用于 SQL 表达式中操作符的优先级。这个整数值作为 SQL 编译器的提示，用于确定何时应该在特定操作周围呈现显式括号。较低的数字将导致在与具有较高优先级的其他操作符应用时对表达式进行括号化。默认值`0`低于所有操作符，除了逗号（`,`）和`AS`操作符。值为100时，将高于或等于所有操作符，而-100将低于或等于所有操作符。
- en: See also
  id: totrans-744
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[I’m using op() to generate a custom operator and my parenthesis are not coming
    out correctly](../faq/sqlexpressions.html#faq-sql-expression-op-parenthesis) -
    detailed description of how the SQLAlchemy SQL compiler renders parenthesis'
  id: totrans-745
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[我正在使用 op() 生成自定义操作符，但我的括号不正确](../faq/sqlexpressions.html#faq-sql-expression-op-parenthesis)
    - SQLAlchemy SQL 编译器呈现括号的详细描述'
- en: '`is_comparison` –'
  id: totrans-746
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_comparison` –'
- en: legacy; if True, the operator will be considered as a “comparison” operator,
    that is which evaluates to a boolean true/false value, like `==`, `>`, etc. This
    flag is provided so that ORM relationships can establish that the operator is
    a comparison operator when used in a custom join condition.
  id: totrans-747
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 传统；如果为 True，则将该操作符视为“比较”运算符，即评估为布尔值的运算符，如 `==`、`>` 等。提供此标志是为了使 ORM 关系可以在自定义连接条件中使用操作符时，建立该操作符是比较运算符的关系。
- en: Using the `is_comparison` parameter is superseded by using the [`Operators.bool_op()`](sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") method instead; this more succinct
    operator sets this parameter automatically, but also provides correct [**PEP 484**](https://peps.python.org/pep-0484/)
    typing support as the returned object will express a “boolean” datatype, i.e.
    `BinaryExpression[bool]`.
  id: totrans-748
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用`is_comparison`参数已被使用[`Operators.bool_op()`](sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op")方法取代；此更简洁的运算符会自动设置此参数，但也提供了正确的[**PEP
    484**](https://peps.python.org/pep-0484/)类型支持，因为返回的对象将表示“布尔”数据类型，即 `BinaryExpression[bool]`。
- en: '`return_type` – a [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class or object that will force the return type
    of an expression produced by this operator to be of that type. By default, operators
    that specify [`Operators.op.is_comparison`](sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op") will resolve to [`Boolean`](type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean"), and those that do not will be of the same type as
    the left-hand operand.'
  id: totrans-749
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_type` – 一个[`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")类或对象，将强制由此操作符产生的表达式的返回类型为该类型。默认情况下，指定[`Operators.op.is_comparison`](sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op")的运算符将解析为[`Boolean`](type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean")，而未指定的将与左操作数的类型相同。'
- en: '`python_impl` –'
  id: totrans-750
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`python_impl` –'
- en: an optional Python function that can evaluate two Python values in the same
    way as this operator works when run on the database server. Useful for in-Python
    SQL expression evaluation functions, such as for ORM hybrid attributes, and the
    ORM “evaluator” used to match objects in a session after a multi-row update or
    delete.
  id: totrans-751
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的 Python 函数，可以以与在数据库服务器上运行此操作符时相同的方式评估两个 Python 值。对于在 Python 中的 SQL 表达式评估函数非常有用，例如用于
    ORM 混合属性的函数，以及用于匹配多行更新或删除后会话中的对象的 ORM“评估器”。
- en: 'e.g.:'
  id: totrans-752
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE155]'
  id: totrans-753
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE155]'
- en: 'The operator for the above expression will also work for non-SQL left and right
    objects:'
  id: totrans-754
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述表达式的运算符也将适用于非 SQL 左和右对象：
- en: '[PRE156]'
  id: totrans-755
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE156]'
- en: New in version 2.0.
  id: totrans-756
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 2.0 版本中的新功能。
- en: See also
  id: totrans-757
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Operators.bool_op()`](sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op")'
  id: totrans-758
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Operators.bool_op()`](sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op")'
- en: '[Redefining and Creating New Operators](custom_types.html#types-operators)'
  id: totrans-759
  prefs: []
  type: TYPE_NORMAL
  zh: '[重新定义和创建新的操作符](custom_types.html#types-operators)'
- en: '[Using custom operators in join conditions](../orm/join_conditions.html#relationship-custom-operator)'
  id: totrans-760
  prefs: []
  type: TYPE_NORMAL
  zh: '[在连接条件中使用自定义操作符](../orm/join_conditions.html#relationship-custom-operator)'
- en: '[PRE157]'
  id: totrans-761
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: '*inherited from the* [`ColumnElement.operate()`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.operate
    "sqlalchemy.sql.expression.ColumnElement.operate") *method of* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
  id: totrans-762
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnElement.operate()`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.operate
    "sqlalchemy.sql.expression.ColumnElement.operate") *方法的* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
- en: Operate on an argument.
  id: totrans-763
  prefs: []
  type: TYPE_NORMAL
  zh: 对参数进行操作。
- en: This is the lowest level of operation, raises `NotImplementedError` by default.
  id: totrans-764
  prefs: []
  type: TYPE_NORMAL
  zh: 这是操作的最低级别，默认情况下引发 `NotImplementedError`。
- en: 'Overriding this on a subclass can allow common behavior to be applied to all
    operations. For example, overriding [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") to apply `func.lower()` to the left
    and right side:'
  id: totrans-765
  prefs: []
  type: TYPE_NORMAL
  zh: 在子类上覆盖这个方法可以使常见行为应用于所有操作。例如，覆盖 [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") 以将 `func.lower()` 应用于左右两侧：
- en: '[PRE158]'
  id: totrans-766
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: 'Parameters:'
  id: totrans-767
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`op` – Operator callable.'
  id: totrans-768
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`op` – 操作符可调用。'
- en: '`*other` – the ‘other’ side of the operation. Will be a single scalar for most
    operations.'
  id: totrans-769
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*other` – 操作的‘另一’侧。对于大多数操作，将是单个标量。'
- en: '`**kwargs` – modifiers. These may be passed by special operators such as `ColumnOperators.contains()`.'
  id: totrans-770
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kwargs` – 修饰符。这些可能由特殊操作符（如 `ColumnOperators.contains()`）传递。'
- en: '[PRE159]'
  id: totrans-771
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: '*inherited from the* `Immutable.params()` *method of* `Immutable`'
  id: totrans-772
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `Immutable.params()` *方法的* `Immutable`'
- en: Return a copy with [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") elements replaced.
  id: totrans-773
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个替换了 [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") 元素的副本。
- en: 'Returns a copy of this ClauseElement with [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") elements replaced with values taken from
    the given dictionary:'
  id: totrans-774
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此 ClauseElement 的副本，其中的 [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") 元素替换为给定字典中的值：
- en: '[PRE160]'
  id: totrans-775
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: '[PRE161]'
  id: totrans-776
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: '*inherited from the* [`ColumnElement.proxy_set`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.proxy_set
    "sqlalchemy.sql.expression.ColumnElement.proxy_set") *attribute of* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
  id: totrans-777
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnElement.proxy_set`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.proxy_set
    "sqlalchemy.sql.expression.ColumnElement.proxy_set") *属性的* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
- en: set of all columns we are proxying
  id: totrans-778
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在代理的所有列的集合
- en: as of 2.0 this is explicitly deannotated columns. previously it was effectively
    deannotated columns but wasn’t enforced. annotated columns should basically not
    go into sets if at all possible because their hashing behavior is very non-performant.
  id: totrans-779
  prefs: []
  type: TYPE_NORMAL
  zh: 从 2.0 版本开始，这些列明确地被取消注释。以前它们实际上是取消注释的列，但没有强制执行。如果可能的话，注释列基本上不应该进入集合，因为它们的哈希行为非常低效。
- en: '[PRE162]'
  id: totrans-780
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: Return True if this Column references the given column via foreign key.
  id: totrans-781
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此列通过外键引用给定列，则返回 True。
- en: '[PRE163]'
  id: totrans-782
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: '*inherited from the* [`ColumnOperators.regexp_match()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-783
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.regexp_match()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implements a database-specific ‘regexp match’ operator.
  id: totrans-784
  prefs: []
  type: TYPE_NORMAL
  zh: 实现特定于数据库的‘regexp match’运算符。
- en: 'E.g.:'
  id: totrans-785
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE164]'
  id: totrans-786
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: '[`ColumnOperators.regexp_match()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") attempts to resolve
    to a REGEXP-like function or operator provided by the backend, however the specific
    regular expression syntax and flags available are **not backend agnostic**.'
  id: totrans-787
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.regexp_match()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") 尝试解析为后端提供的类似 REGEXP
    的函数或操作符，但特定的正则表达式语法和可用标志**不是后端通用的**。'
- en: 'Examples include:'
  id: totrans-788
  prefs: []
  type: TYPE_NORMAL
  zh: 示例包括：
- en: PostgreSQL - renders `x ~ y` or `x !~ y` when negated.
  id: totrans-789
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PostgreSQL - 在否定时渲染 `x ~ y` 或 `x !~ y`。
- en: Oracle - renders `REGEXP_LIKE(x, y)`
  id: totrans-790
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Oracle - 渲染 `REGEXP_LIKE(x, y)`
- en: SQLite - uses SQLite’s `REGEXP` placeholder operator and calls into the Python
    `re.match()` builtin.
  id: totrans-791
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQLite - 使用 SQLite 的 `REGEXP` 占位符操作符，并调用 Python 的 `re.match()` 内置函数。
- en: other backends may provide special implementations.
  id: totrans-792
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他后端可能提供特殊的实现。
- en: Backends without any special implementation will emit the operator as “REGEXP”
    or “NOT REGEXP”. This is compatible with SQLite and MySQL, for example.
  id: totrans-793
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有任何特殊实现的后端将生成操作符“REGEXP”或“NOT REGEXP”。例如，这与 SQLite 和 MySQL 兼容。
- en: Regular expression support is currently implemented for Oracle, PostgreSQL,
    MySQL and MariaDB. Partial support is available for SQLite. Support among third-party
    dialects may vary.
  id: totrans-794
  prefs: []
  type: TYPE_NORMAL
  zh: 目前为止，Oracle、PostgreSQL、MySQL 和 MariaDB 实现了正则表达式支持。SQLite 提供了部分支持。第三方方言的支持可能有所不同。
- en: 'Parameters:'
  id: totrans-795
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`pattern` – The regular expression pattern string or column clause.'
  id: totrans-796
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pattern` – 正则表达式模式字符串或列子句。'
- en: '`flags` – Any regular expression string flags to apply, passed as plain Python
    string only. These flags are backend specific. Some backends, like PostgreSQL
    and MariaDB, may alternatively specify the flags as part of the pattern. When
    using the ignore case flag ‘i’ in PostgreSQL, the ignore case regexp match operator
    `~*` or `!~*` will be used.'
  id: totrans-797
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flags` – 要应用的任何正则表达式字符串标志，仅作为纯 Python 字符串传递。这些标志是后端特定的。某些后端，例如 PostgreSQL
    和 MariaDB，可能会将标志作为模式的一部分指定。在 PostgreSQL 中使用忽略大小写标志 ''i'' 时，将使用忽略大小写正则表达式匹配运算符
    `~*` 或 `!~*`。'
- en: New in version 1.4.
  id: totrans-798
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4 中新增。
- en: 'Changed in version 1.4.48,: 2.0.18 Note that due to an implementation error,
    the “flags” parameter previously accepted SQL expression objects such as column
    expressions in addition to plain Python strings. This implementation did not work
    correctly with caching and was removed; strings only should be passed for the
    “flags” parameter, as these flags are rendered as literal inline values within
    SQL expressions.'
  id: totrans-799
  prefs: []
  type: TYPE_NORMAL
  zh: '在版本 1.4.48 中更改，: 2.0.18 请注意，由于实现错误，先前的“flags”参数接受了 SQL 表达式对象，例如列表达式，而不仅仅是纯
    Python 字符串。这个实现与缓存一起使用时不会正常工作，并且已被删除；只应传递字符串给“flags”参数，因为这些标志会作为 SQL 表达式中的文字内联值呈现。'
- en: See also
  id: totrans-800
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.regexp_replace()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace")'
  id: totrans-801
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.regexp_replace()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace")'
- en: '[PRE165]'
  id: totrans-802
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: '*inherited from the* [`ColumnOperators.regexp_replace()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-803
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.regexp_replace()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implements a database-specific ‘regexp replace’ operator.
  id: totrans-804
  prefs: []
  type: TYPE_NORMAL
  zh: 实现了特定于数据库的“regexp replace”运算符。
- en: 'E.g.:'
  id: totrans-805
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE166]'
  id: totrans-806
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: '[`ColumnOperators.regexp_replace()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") attempts to resolve
    to a REGEXP_REPLACE-like function provided by the backend, that usually emit the
    function `REGEXP_REPLACE()`. However, the specific regular expression syntax and
    flags available are **not backend agnostic**.'
  id: totrans-807
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.regexp_replace()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") 尝试解析后端提供的类似 REGEXP_REPLACE
    的函数，通常会生成函数 `REGEXP_REPLACE()`。然而，特定的正则表达式语法和可用标志**不是跨后端通用的**。'
- en: Regular expression replacement support is currently implemented for Oracle,
    PostgreSQL, MySQL 8 or greater and MariaDB. Support among third-party dialects
    may vary.
  id: totrans-808
  prefs: []
  type: TYPE_NORMAL
  zh: 目前仅为 Oracle、PostgreSQL、MySQL 8 或更高版本和 MariaDB 实现了正则表达式替换支持。第三方方言的支持可能有所不同。
- en: 'Parameters:'
  id: totrans-809
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`pattern` – The regular expression pattern string or column clause.'
  id: totrans-810
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pattern` – 正则表达式模式字符串或列子句。'
- en: '`pattern` – The replacement string or column clause.'
  id: totrans-811
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pattern` – 替换字符串或列子句。'
- en: '`flags` – Any regular expression string flags to apply, passed as plain Python
    string only. These flags are backend specific. Some backends, like PostgreSQL
    and MariaDB, may alternatively specify the flags as part of the pattern.'
  id: totrans-812
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flags` – 要应用的任何正则表达式字符串标志，仅作为纯 Python 字符串传递。这些标志是后端特定的。某些后端，例如 PostgreSQL
    和 MariaDB，可能会将标志作为模式的一部分指定。'
- en: New in version 1.4.
  id: totrans-813
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4 中新增。
- en: 'Changed in version 1.4.48,: 2.0.18 Note that due to an implementation error,
    the “flags” parameter previously accepted SQL expression objects such as column
    expressions in addition to plain Python strings. This implementation did not work
    correctly with caching and was removed; strings only should be passed for the
    “flags” parameter, as these flags are rendered as literal inline values within
    SQL expressions.'
  id: totrans-814
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本1.4.48更改为：2.0.18 请注意，由于实现错误，以前“flags”参数接受SQL表达式对象，例如列表达式，而不仅仅是普通的Python字符串。
    这种实现与缓存不正确，因此已删除；应该仅传递字符串作为“flags”参数，因为这些标志将作为SQL表达式中的文字内联值呈现。
- en: See also
  id: totrans-815
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.regexp_match()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match")'
  id: totrans-816
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.regexp_match()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match")'
- en: '[PRE167]'
  id: totrans-817
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: '*inherited from the* [`ColumnElement.reverse_operate()`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.reverse_operate
    "sqlalchemy.sql.expression.ColumnElement.reverse_operate") *method of* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
  id: totrans-818
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnElement.reverse_operate()`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.reverse_operate
    "sqlalchemy.sql.expression.ColumnElement.reverse_operate") *方法的* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
- en: Reverse operate on an argument.
  id: totrans-819
  prefs: []
  type: TYPE_NORMAL
  zh: 对参数进行反向操作。
- en: Usage is the same as [`operate()`](#sqlalchemy.schema.Column.operate "sqlalchemy.schema.Column.operate").
  id: totrans-820
  prefs: []
  type: TYPE_NORMAL
  zh: 使用方式与[`operate()`](#sqlalchemy.schema.Column.operate "sqlalchemy.schema.Column.operate")相同。
- en: '[PRE168]'
  id: totrans-821
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: '*inherited from the* [`ColumnElement.self_group()`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.self_group
    "sqlalchemy.sql.expression.ColumnElement.self_group") *method of* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
  id: totrans-822
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnElement.self_group()`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.self_group
    "sqlalchemy.sql.expression.ColumnElement.self_group") *方法的* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
- en: Apply a ‘grouping’ to this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  id: totrans-823
  prefs: []
  type: TYPE_NORMAL
  zh: 对这个[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")应用一个“分组”。
- en: This method is overridden by subclasses to return a “grouping” construct, i.e.
    parenthesis. In particular it’s used by “binary” expressions to provide a grouping
    around themselves when placed into a larger expression, as well as by [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs when placed into the FROM clause
    of another [`select()`](selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select").
    (Note that subqueries should be normally created using the [`Select.alias()`](selectable.html#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") method, as many platforms require nested
    SELECT statements to be named).
  id: totrans-824
  prefs: []
  type: TYPE_NORMAL
  zh: 子类重写此方法以返回一个“分组”构造，即括号。特别是当“二进制”表达式被放置到更大的表达式中时，它们会提供一个围绕自身的分组，以及当[`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")构造被放置到另一个[`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")的FROM子句中时。 （请注意，子查询通常应使用[`Select.alias()`](selectable.html#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias")方法创建，因为许多平台要求嵌套的SELECT语句必须被命名）。
- en: As expressions are composed together, the application of [`self_group()`](#sqlalchemy.schema.Column.self_group
    "sqlalchemy.schema.Column.self_group") is automatic - end-user code should never
    need to use this method directly. Note that SQLAlchemy’s clause constructs take
    operator precedence into account - so parenthesis might not be needed, for example,
    in an expression like `x OR (y AND z)` - AND takes precedence over OR.
  id: totrans-825
  prefs: []
  type: TYPE_NORMAL
  zh: 当表达式组合在一起时，[`self_group()`](#sqlalchemy.schema.Column.self_group "sqlalchemy.schema.Column.self_group")的应用是自动的
    - 最终用户代码不应直接使用此方法。 请注意，SQLAlchemy的子句构造会考虑运算符优先级 - ���此在表达式中可能不需要括号，例如，`x OR (y
    AND z)` - AND优先于OR。
- en: The base [`self_group()`](#sqlalchemy.schema.Column.self_group "sqlalchemy.schema.Column.self_group")
    method of [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") just returns self.
  id: totrans-826
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement "sqlalchemy.sql.expression.ClauseElement")的基本[`self_group()`](#sqlalchemy.schema.Column.self_group
    "sqlalchemy.schema.Column.self_group")方法只返回自身。'
- en: '[PRE169]'
  id: totrans-827
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: '*inherited from the* [`ColumnElement.shares_lineage()`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.shares_lineage
    "sqlalchemy.sql.expression.ColumnElement.shares_lineage") *method of* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
  id: totrans-828
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnElement.shares_lineage()`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.shares_lineage
    "sqlalchemy.sql.expression.ColumnElement.shares_lineage") *方法的* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
- en: Return True if the given [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") has a common ancestor to this [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement").
  id: totrans-829
  prefs: []
  type: TYPE_NORMAL
  zh: 如果给定的[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")与此[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")具有共同的祖先，则返回True。
- en: '[PRE170]'
  id: totrans-830
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: '*inherited from the* [`ColumnOperators.startswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-831
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.startswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith") *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `startswith` operator.
  id: totrans-832
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`startswith`运算符。
- en: 'Produces a LIKE expression that tests against a match for the start of a string
    value:'
  id: totrans-833
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个LIKE表达式，用于测试字符串值的开头是否匹配：
- en: '[PRE171]'
  id: totrans-834
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: 'E.g.:'
  id: totrans-835
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE172]'
  id: totrans-836
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.startswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.startswith.escape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-837
  prefs: []
  type: TYPE_NORMAL
  zh: 由于该运算符使用`LIKE`，存在于<other>表达式中的通配符字符`%`和`_`也将像通配符一样起作用。对于字面字符串值，可以将[`ColumnOperators.startswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith")标志设置为`True`，以对字符串值中这些字符的出现应用转义，使它们匹配为自身而不是通配符字符。或者，[`ColumnOperators.startswith.escape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.startswith")参数将建立一个给定字符作为转义字符，当目标表达式不是字面字符串时可能会有用。
- en: 'Parameters:'
  id: totrans-838
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.startswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") flag is set to True.'
  id: totrans-839
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要比较的表达式。通常是一个普通字符串值，但也可以是任意的SQL表达式。除非设置[`ColumnOperators.startswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith")标志为True，否则LIKE通配符字符`%`和`_`默认不会被转义。'
- en: '`autoescape` –'
  id: totrans-840
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-841
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值；当为True时，在LIKE表达式中建立一个转义字符，然后将其应用于比较值中的所有出现的`"%"`、`"_"`和转义字符本身，假定比较值是一个字面字符串而不是SQL表达式。
- en: 'An expression such as:'
  id: totrans-842
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个表达式如下：
- en: '[PRE173]'
  id: totrans-843
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE173]'
- en: 'Will render as:'
  id: totrans-844
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE174]'
  id: totrans-845
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE174]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-846
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 具有值`:param`为`"foo/%bar"`。
- en: '`escape` –'
  id: totrans-847
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-848
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字符，当给定时将使用`ESCAPE`关键字来建立该字符作为转义字符。然后可以将该字符放在`%`和`_`之前，以允许它们作为自身而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-849
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个表达式如下：
- en: '[PRE175]'
  id: totrans-850
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE175]'
- en: 'Will render as:'
  id: totrans-851
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE176]'
  id: totrans-852
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE176]'
- en: 'The parameter may also be combined with [`ColumnOperators.startswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith"):'
  id: totrans-853
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参数也可以与[`ColumnOperators.startswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith")结合使用：
- en: '[PRE177]'
  id: totrans-854
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE177]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-855
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述情况下，给定的文字参数将在传递到数据库之前转换为`"foo^%bar^^bat"`。
- en: See also
  id: totrans-856
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`ColumnOperators.endswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
  id: totrans-857
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.endswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
- en: '[`ColumnOperators.contains()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
  id: totrans-858
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.contains()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
- en: '[`ColumnOperators.like()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-859
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE178]'
  id: totrans-860
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: '*inherited from the* [`ColumnOperators.timetuple`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.timetuple
    "sqlalchemy.sql.expression.ColumnOperators.timetuple") *attribute of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-861
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") *的* [`ColumnOperators.timetuple`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.timetuple
    "sqlalchemy.sql.expression.ColumnOperators.timetuple") *属性*'
- en: Hack, allows datetime objects to be compared on the LHS.
  id: totrans-862
  prefs: []
  type: TYPE_NORMAL
  zh: Hack，允许在左侧比较datetime对象。
- en: '[PRE179]'
  id: totrans-863
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: The value of the [`Column.unique`](#sqlalchemy.schema.Column.params.unique "sqlalchemy.schema.Column")
    parameter.
  id: totrans-864
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Column.unique`](#sqlalchemy.schema.Column.params.unique "sqlalchemy.schema.Column")参数的值。'
- en: Does not indicate if this [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    is actually subject to a unique constraint or not; use [`Table.indexes`](#sqlalchemy.schema.Table.indexes
    "sqlalchemy.schema.Table.indexes") and [`Table.constraints`](#sqlalchemy.schema.Table.constraints
    "sqlalchemy.schema.Table.constraints").
  id: totrans-865
  prefs: []
  type: TYPE_NORMAL
  zh: 不指示此[`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")是否实际上受到唯一约束的影响；请使用[`Table.indexes`](#sqlalchemy.schema.Table.indexes
    "sqlalchemy.schema.Table.indexes")和[`Table.constraints`](#sqlalchemy.schema.Table.constraints
    "sqlalchemy.schema.Table.constraints")。
- en: See also
  id: totrans-866
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Table.indexes`](#sqlalchemy.schema.Table.indexes "sqlalchemy.schema.Table.indexes")'
  id: totrans-867
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Table.indexes`](#sqlalchemy.schema.Table.indexes "sqlalchemy.schema.Table.indexes")'
- en: '[`Table.constraints`](#sqlalchemy.schema.Table.constraints "sqlalchemy.schema.Table.constraints").'
  id: totrans-868
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Table.constraints`](#sqlalchemy.schema.Table.constraints "sqlalchemy.schema.Table.constraints")。'
- en: '[PRE180]'
  id: totrans-869
  prefs: []
  type: TYPE_PRE
  zh: '[PRE180]'
- en: '*inherited from the* `Immutable.unique_params()` *method of* `Immutable`'
  id: totrans-870
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `Immutable` *的* `Immutable.unique_params()` *方法*'
- en: Return a copy with [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") elements replaced.
  id: totrans-871
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个副本，其中[`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")元素被替换。
- en: Same functionality as [`ClauseElement.params()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.params
    "sqlalchemy.sql.expression.ClauseElement.params"), except adds unique=True to
    affected bind parameters so that multiple statements can be used.
  id: totrans-872
  prefs: []
  type: TYPE_NORMAL
  zh: 与[`ClauseElement.params()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.params
    "sqlalchemy.sql.expression.ClauseElement.params")具有相同功能，只是对受影响的绑定参数添加了unique=True，以便可以使用多个语句。
- en: '[PRE181]'
  id: totrans-873
  prefs: []
  type: TYPE_PRE
  zh: '[PRE181]'
- en: A collection of [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects and their associated schema constructs.
  id: totrans-874
  prefs: []
  type: TYPE_NORMAL
  zh: 一组[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象及其关联的模式构造。
- en: Holds a collection of [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects as well as an optional binding to an [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") or [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"). If bound, the [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects in the collection and their columns may participate
    in implicit SQL execution.
  id: totrans-875
  prefs: []
  type: TYPE_NORMAL
  zh: 包含一组[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象以及一个可选的绑定到[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")或[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")的集合。如果绑定，集合中的[`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象及其列可以参与隐式SQL执行。
- en: The [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") objects themselves
    are stored in the [`MetaData.tables`](#sqlalchemy.schema.MetaData.tables "sqlalchemy.schema.MetaData.tables")
    dictionary.
  id: totrans-876
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") 对象本身存储在[`MetaData.tables`](#sqlalchemy.schema.MetaData.tables
    "sqlalchemy.schema.MetaData.tables") 字典中。'
- en: '[`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData") is a
    thread-safe object for read operations. Construction of new tables within a single
    [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData") object,
    either explicitly or via reflection, may not be completely thread-safe.'
  id: totrans-877
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData") 是一个线程安全的对象，用于读取操作。在单个[`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") 对象内构建新表，无论是显式地还是通过反射，可能并不完全线程安全。'
- en: See also
  id: totrans-878
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Describing Databases with MetaData](#metadata-describing) - Introduction to
    database metadata'
  id: totrans-879
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 MetaData 描述数据库](#metadata-describing) - 介绍数据库元数据'
- en: '**Members**'
  id: totrans-880
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.schema.MetaData.__init__), [clear()](#sqlalchemy.schema.MetaData.clear),
    [create_all()](#sqlalchemy.schema.MetaData.create_all), [drop_all()](#sqlalchemy.schema.MetaData.drop_all),
    [reflect()](#sqlalchemy.schema.MetaData.reflect), [remove()](#sqlalchemy.schema.MetaData.remove),
    [sorted_tables](#sqlalchemy.schema.MetaData.sorted_tables), [tables](#sqlalchemy.schema.MetaData.tables)'
  id: totrans-881
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.schema.MetaData.__init__), [clear()](#sqlalchemy.schema.MetaData.clear),
    [create_all()](#sqlalchemy.schema.MetaData.create_all), [drop_all()](#sqlalchemy.schema.MetaData.drop_all),
    [reflect()](#sqlalchemy.schema.MetaData.reflect), [remove()](#sqlalchemy.schema.MetaData.remove),
    [sorted_tables](#sqlalchemy.schema.MetaData.sorted_tables), [tables](#sqlalchemy.schema.MetaData.tables)'
- en: '**Class signature**'
  id: totrans-882
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    (`sqlalchemy.schema.HasSchemaAttr`)
  id: totrans-883
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.schema.MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    (`sqlalchemy.schema.HasSchemaAttr`)
- en: '[PRE182]'
  id: totrans-884
  prefs: []
  type: TYPE_PRE
  zh: '[PRE182]'
- en: Create a new MetaData object.
  id: totrans-885
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的 MetaData 对象。
- en: 'Parameters:'
  id: totrans-886
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`schema` –'
  id: totrans-887
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` –'
- en: The default schema to use for the [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table"),
    [`Sequence`](defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence"),
    and potentially other objects associated with this [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData"). Defaults to `None`.
  id: totrans-888
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认要用于[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")、[`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")和可能与此[`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")关联的其他对象的模式。默认为
    `None`。
- en: See also
  id: totrans-889
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Specifying a Default Schema Name with MetaData](#schema-metadata-schema-name)
    - details on how the [`MetaData.schema`](#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData") parameter is used.'
  id: totrans-890
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[使用 MetaData 指定默认模式名称](#schema-metadata-schema-name) - 有关如何使用[`MetaData.schema`](#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData")参数的详细信息。'
- en: '[`Table.schema`](#sqlalchemy.schema.Table.params.schema "sqlalchemy.schema.Table")'
  id: totrans-891
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Table.schema`](#sqlalchemy.schema.Table.params.schema "sqlalchemy.schema.Table")'
- en: '[`Sequence.schema`](defaults.html#sqlalchemy.schema.Sequence.params.schema
    "sqlalchemy.schema.Sequence")'
  id: totrans-892
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Sequence.schema`](defaults.html#sqlalchemy.schema.Sequence.params.schema
    "sqlalchemy.schema.Sequence")'
- en: '`quote_schema` – Sets the `quote_schema` flag for those [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), [`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence"), and other objects which make usage of the local
    `schema` name.'
  id: totrans-893
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`quote_schema` – 为那些使用本地 `schema` 名称的[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")、[`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")和其他对象设置 `quote_schema` 标志。'
- en: '`info` – Optional data dictionary which will be populated into the [`SchemaItem.info`](#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info") attribute of this object.'
  id: totrans-894
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`info` – 可选数据字典，将填充到此对象的[`SchemaItem.info`](#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info")属性中。'
- en: '`naming_convention` –'
  id: totrans-895
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`naming_convention` –'
- en: a dictionary referring to values which will establish default naming conventions
    for [`Constraint`](constraints.html#sqlalchemy.schema.Constraint "sqlalchemy.schema.Constraint")
    and [`Index`](constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    objects, for those objects which are not given a name explicitly.
  id: totrans-896
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字典，指向将为未明确命名的[`Constraint`](constraints.html#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint")和[`Index`](constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")对象建立默认命名约定的值。
- en: 'The keys of this dictionary may be:'
  id: totrans-897
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此字典的键可能是：
- en: a constraint or Index class, e.g. the [`UniqueConstraint`](constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint"), [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") class, the [`Index`](constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") class
  id: totrans-898
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 约束或索引类，例如[`UniqueConstraint`](constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint")类、[`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")类、[`Index`](constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")类
- en: a string mnemonic for one of the known constraint classes; `"fk"`, `"pk"`, `"ix"`,
    `"ck"`, `"uq"` for foreign key, primary key, index, check, and unique constraint,
    respectively.
  id: totrans-899
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已知约束类别之一的字符串助记符；分别为外键（"fk"）、主键（"pk"）、索引（"ix"）、检查（"ck"）和唯一约束（"uq"）。
- en: the string name of a user-defined “token” that can be used to define new naming
    tokens.
  id: totrans-900
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户定义的“token”的字符串名称，可用于定义新的命名标记。
- en: The values associated with each “constraint class” or “constraint mnemonic”
    key are string naming templates, such as `"uq_%(table_name)s_%(column_0_name)s"`,
    which describe how the name should be composed. The values associated with user-defined
    “token” keys should be callables of the form `fn(constraint, table)`, which accepts
    the constraint/index object and [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    as arguments, returning a string result.
  id: totrans-901
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与每个“约束类”或“约束助记符”键关联的值是命名模板字符串，例如`"uq_%(table_name)s_%(column_0_name)s"`，描述了名称应该如何组成。与用户定义的“token”键关联的值应该是形式为`fn(constraint,
    table)`的可调用对象，接受约束/索引对象和[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")作为参数，返回一个字符串结果。
- en: 'The built-in names are as follows, some of which may only be available for
    certain types of constraint:'
  id: totrans-902
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 内置名称如下，其中一些可能仅适用于某些类型的约束：
- en: '`%(table_name)s` - the name of the [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object associated with the constraint.'
  id: totrans-903
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%(table_name)s` - 与约束相关联的[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象的名称。'
- en: ''
  id: totrans-904
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-905
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`%(referred_table_name)s` - the name of the [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object associated with the referencing target of a
    [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint").'
  id: totrans-906
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%(referred_table_name)s` - 与[`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")的引用目标相关联的[`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象的名称。'
- en: ''
  id: totrans-907
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-908
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`%(column_0_name)s` - the name of the [`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") at index position “0” within the constraint.'
  id: totrans-909
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%(column_0_name)s` - 约束内索引位置“0”处的[`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")的名称。'
- en: ''
  id: totrans-910
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-911
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`%(column_0N_name)s` - the name of all [`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects in order within the constraint, joined without
    a separator.'
  id: totrans-912
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%(column_0N_name)s` - 约束内所有[`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")对象的名称，按顺序不使用分隔符连接。'
- en: ''
  id: totrans-913
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-914
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`%(column_0_N_name)s` - the name of all [`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects in order within the constraint, joined with
    an underscore as a separator.'
  id: totrans-915
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%(column_0_N_name)s` - 约束内所有[`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")对象的名称，按顺序用下划线分隔。'
- en: ''
  id: totrans-916
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-917
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`%(column_0_label)s`, `%(column_0N_label)s`, `%(column_0_N_label)s` - the label
    of either the zeroth [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    or all `Columns`, separated with or without an underscore'
  id: totrans-918
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%(column_0_label)s`、`%(column_0N_label)s`、`%(column_0_N_label)s` - 零号[`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")或所有`Columns`的标签，用下划线分隔或不分隔。'
- en: ''
  id: totrans-919
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-920
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`%(column_0_key)s`, `%(column_0N_key)s`, `%(column_0_N_key)s` - the key of
    either the zeroth [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    or all `Columns`, separated with or without an underscore'
  id: totrans-921
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%(column_0_key)s`、`%(column_0N_key)s`、`%(column_0_N_key)s` - 零号[`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")或所有`Columns`的键，用下划线分隔或不分隔。'
- en: ''
  id: totrans-922
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-923
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`%(referred_column_0_name)s`, `%(referred_column_0N_name)s` `%(referred_column_0_N_name)s`,
    `%(referred_column_0_key)s`, `%(referred_column_0N_key)s`, … column tokens which
    render the names/keys/labels of columns that are referenced by a [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint").'
  id: totrans-924
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%(referred_column_0_name)s`、`%(referred_column_0N_name)s`、`%(referred_column_0_N_name)s`、`%(referred_column_0_key)s`、`%(referred_column_0N_key)s`、…渲染由[`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")引用的列的名称/键/标签的列标记。'
- en: ''
  id: totrans-925
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-926
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`%(constraint_name)s` - a special key that refers to the existing name given
    to the constraint. When this key is present, the [`Constraint`](constraints.html#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint") object’s existing name will be replaced with one
    that is composed from template string that uses this token. When this token is
    present, it is required that the [`Constraint`](constraints.html#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint") is given an explicit name ahead of time.'
  id: totrans-927
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%(constraint_name)s` - 一个特殊键，指代约束已存在的名称。当存在此键时，[`Constraint`](constraints.html#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint") 对象的现有名称将被替换为使用此标记的模板字符串组成的名称。当存在此标记时，要求在此之前明确给出
    [`Constraint`](constraints.html#sqlalchemy.schema.Constraint "sqlalchemy.schema.Constraint")
    的名称。'
- en: ''
  id: totrans-928
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-929
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'user-defined: any additional token may be implemented by passing it along with
    a `fn(constraint, table)` callable to the naming_convention dictionary.'
  id: totrans-930
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户定义：通过将其与 `fn(constraint, table)` 可调用对象一起传递给 naming_convention 字典，可以实现任何额外的标记。
- en: 'New in version 1.3.0: - added new `%(column_0N_name)s`, `%(column_0_N_name)s`,
    and related tokens that produce concatenations of names, keys, or labels for all
    columns referred to by a given constraint.'
  id: totrans-931
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版本 1.3.0 中新增：- 添加了新的 `%(column_0N_name)s`、`%(column_0_N_name)s` 等相关标记，用于生成由给定约束引用的所有列的名称、键或标签的连接。
- en: See also
  id: totrans-932
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Configuring Constraint Naming Conventions](constraints.html#constraint-naming-conventions)
    - for detailed usage examples.'
  id: totrans-933
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[配置约束命名约定](constraints.html#constraint-naming-conventions) - 详细的使用示例。'
- en: '[PRE183]'
  id: totrans-934
  prefs: []
  type: TYPE_PRE
  zh: '[PRE183]'
- en: Clear all Table objects from this MetaData.
  id: totrans-935
  prefs: []
  type: TYPE_NORMAL
  zh: 从此 MetaData 中清除所有 Table 对象。
- en: '[PRE184]'
  id: totrans-936
  prefs: []
  type: TYPE_PRE
  zh: '[PRE184]'
- en: Create all tables stored in this metadata.
  id: totrans-937
  prefs: []
  type: TYPE_NORMAL
  zh: 创建存储在此元数据中的所有表。
- en: Conditional by default, will not attempt to recreate tables already present
    in the target database.
  id: totrans-938
  prefs: []
  type: TYPE_NORMAL
  zh: 默认为条件性操作，不会尝试重新创建已经存在于目标数据库中的表。
- en: 'Parameters:'
  id: totrans-939
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`bind` – A [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    or [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    used to access the database.'
  id: totrans-940
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bind` – 用于访问数据库的 [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 或 [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")。 '
- en: '`tables` – Optional list of `Table` objects, which is a subset of the total
    tables in the `MetaData` (others are ignored).'
  id: totrans-941
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tables` – 可选的 `Table` 对象列表，是 `MetaData` 中总表的子集（其他表将被忽略）。'
- en: '`checkfirst` – Defaults to True, don’t issue CREATEs for tables already present
    in the target database.'
  id: totrans-942
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`checkfirst` – 默认为 True，不会为已经存在于目标数据库中的表发出 CREATE 语句。'
- en: '[PRE185]'
  id: totrans-943
  prefs: []
  type: TYPE_PRE
  zh: '[PRE185]'
- en: Drop all tables stored in this metadata.
  id: totrans-944
  prefs: []
  type: TYPE_NORMAL
  zh: 删除存储在此元数据中的所有表。
- en: Conditional by default, will not attempt to drop tables not present in the target
    database.
  id: totrans-945
  prefs: []
  type: TYPE_NORMAL
  zh: 默认为条件性操作，不会尝试删除目标数据库中不存在的表。
- en: 'Parameters:'
  id: totrans-946
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`bind` – A [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    or [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    used to access the database.'
  id: totrans-947
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bind` – 用于访问数据库的 [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 或 [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")。'
- en: '`tables` – Optional list of `Table` objects, which is a subset of the total
    tables in the `MetaData` (others are ignored).'
  id: totrans-948
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tables` – 可选的 `Table` 对象列表，是 `MetaData` 中总表的子集（其他表将被忽略）。'
- en: '`checkfirst` – Defaults to True, only issue DROPs for tables confirmed to be
    present in the target database.'
  id: totrans-949
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`checkfirst` – 默认为 True，仅对确认存在于目标数据库中的表发出 DROP 语句。'
- en: '[PRE186]'
  id: totrans-950
  prefs: []
  type: TYPE_PRE
  zh: '[PRE186]'
- en: Load all available table definitions from the database.
  id: totrans-951
  prefs: []
  type: TYPE_NORMAL
  zh: 从数据库加载所有可用的表定义。
- en: Automatically creates `Table` entries in this `MetaData` for any table available
    in the database but not yet present in the `MetaData`. May be called multiple
    times to pick up tables recently added to the database, however no special action
    is taken if a table in this `MetaData` no longer exists in the database.
  id: totrans-952
  prefs: []
  type: TYPE_NORMAL
  zh: 自动在此 `MetaData` 中为数据库中任何尚未存在于 `MetaData` 中的表创建 `Table` 条目。可以多次调用以获取最近添加到数据库中的表，但是如果
    `MetaData` 中的表在数据库中不再存在，则不会采取任何特殊操作。
- en: 'Parameters:'
  id: totrans-953
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`bind` – A [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    or [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    used to access the database.'
  id: totrans-954
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bind` – 用于访问数据库的 [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 或 [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")。'
- en: '`schema` – Optional, query and reflect tables from an alternate schema. If
    None, the schema associated with this [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") is used, if any.'
  id: totrans-955
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` – 可选，从替代模式查询和反映表。如果为None，则使用与此[`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")关联的模式（如果有）。'
- en: '`views` – If True, also reflect views (materialized and plain).'
  id: totrans-956
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`views` – 如果为True，则还反映视图（物化和普通）。'
- en: '`only` –'
  id: totrans-957
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`only` –'
- en: Optional. Load only a sub-set of available named tables. May be specified as
    a sequence of names or a callable.
  id: totrans-958
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选。仅加载可用命名表的子集。可以指定为名称序列或可调用对象。
- en: If a sequence of names is provided, only those tables will be reflected. An
    error is raised if a table is requested but not available. Named tables already
    present in this `MetaData` are ignored.
  id: totrans-959
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果提供了一系列名称，则只会反映这些表。如果请求了一个表但该表不存在，则会引发错误。已经存在于此`MetaData`中的命名表将被忽略。
- en: If a callable is provided, it will be used as a boolean predicate to filter
    the list of potential table names. The callable is called with a table name and
    this `MetaData` instance as positional arguments and should return a true value
    for any table to reflect.
  id: totrans-960
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果提供了可调用对象，则将其用作布尔谓词，以过滤潜在表名称列表。可调用对象将以表名称和此`MetaData`实例作为位置参数调用，并应为任何要反映的表返回一个真值。
- en: '`extend_existing` – Passed along to each [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") as [`Table.extend_existing`](#sqlalchemy.schema.Table.params.extend_existing
    "sqlalchemy.schema.Table").'
  id: totrans-961
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`extend_existing` – 传递给每个[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")作为[`Table.extend_existing`](#sqlalchemy.schema.Table.params.extend_existing
    "sqlalchemy.schema.Table")。'
- en: '`autoload_replace` – Passed along to each [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") as [`Table.autoload_replace`](#sqlalchemy.schema.Table.params.autoload_replace
    "sqlalchemy.schema.Table").'
  id: totrans-962
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoload_replace` – 传递给每个[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")作为[`Table.autoload_replace`](#sqlalchemy.schema.Table.params.autoload_replace
    "sqlalchemy.schema.Table")。'
- en: '`resolve_fks` –'
  id: totrans-963
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`resolve_fks` –'
- en: if True, reflect [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects linked to [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") objects located in each [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"). For [`MetaData.reflect()`](#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect"), this has the effect of reflecting related
    tables that might otherwise not be in the list of tables being reflected, for
    example if the referenced table is in a different schema or is omitted via the
    [`MetaData.reflect.only`](#sqlalchemy.schema.MetaData.reflect.params.only "sqlalchemy.schema.MetaData.reflect")
    parameter. When False, [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") objects are not followed to the [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") in which they link, however if the related table is
    also part of the list of tables that would be reflected in any case, the [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") object will still resolve to its related [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") after the [`MetaData.reflect()`](#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") operation is complete. Defaults to True.
  id: totrans-964
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果为True，则反映[`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")对象位于每个[`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")中的[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象。对于[`MetaData.reflect()`](#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect")，这将导致反映可能不在要反映的表列表中的相关表，例如，如果引用的表位于不同模式中或通过[`MetaData.reflect.only`](#sqlalchemy.schema.MetaData.reflect.params.only
    "sqlalchemy.schema.MetaData.reflect")参数省略。当为False时，不会跟随[`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey")对象到它们链接的[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")，但是如果相关表也是无论如何将被反映的表列表的一部分，则在[`MetaData.reflect()`](#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect")操作完成后，[`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey")对象仍将解析为其相关的[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")。默认为True。
- en: New in version 1.3.0.
  id: totrans-965
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本1.3.0中的新功能。
- en: See also
  id: totrans-966
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Table.resolve_fks`](#sqlalchemy.schema.Table.params.resolve_fks "sqlalchemy.schema.Table")'
  id: totrans-967
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Table.resolve_fks`](#sqlalchemy.schema.Table.params.resolve_fks "sqlalchemy.schema.Table")'
- en: '`**dialect_kwargs` – Additional keyword arguments not mentioned above are dialect
    specific, and passed in the form `<dialectname>_<argname>`. See the documentation
    regarding an individual dialect at [Dialects](../dialects/index.html) for detail
    on documented arguments.'
  id: totrans-968
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**dialect_kwargs` – 上述未提及的额外关键字参数是特定于方言的，并以`<dialectname>_<argname>`的形式传递。有关各个方言的文档参数的详细信息，请参阅[Dialects](../dialects/index.html)。'
- en: See also
  id: totrans-969
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Reflecting Database Objects](reflection.html)'
  id: totrans-970
  prefs: []
  type: TYPE_NORMAL
  zh: '[反射数据库对象](reflection.html)'
- en: '[`DDLEvents.column_reflect()`](events.html#sqlalchemy.events.DDLEvents.column_reflect
    "sqlalchemy.events.DDLEvents.column_reflect") - Event used to customize the reflected
    columns. Usually used to generalize the types using [`TypeEngine.as_generic()`](type_api.html#sqlalchemy.types.TypeEngine.as_generic
    "sqlalchemy.types.TypeEngine.as_generic")'
  id: totrans-971
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DDLEvents.column_reflect()`](events.html#sqlalchemy.events.DDLEvents.column_reflect
    "sqlalchemy.events.DDLEvents.column_reflect") - 用于自定义反射列的事件。通常用于使用[`TypeEngine.as_generic()`](type_api.html#sqlalchemy.types.TypeEngine.as_generic
    "sqlalchemy.types.TypeEngine.as_generic")泛化类型。'
- en: '[Reflecting with Database-Agnostic Types](reflection.html#metadata-reflection-dbagnostic-types)
    - describes how to reflect tables using general types.'
  id: totrans-972
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用与数据库无关的类型进行反射](reflection.html#metadata-reflection-dbagnostic-types) - 描述如何使用通用类型反射表。'
- en: '[PRE187]'
  id: totrans-973
  prefs: []
  type: TYPE_PRE
  zh: '[PRE187]'
- en: Remove the given Table object from this MetaData.
  id: totrans-974
  prefs: []
  type: TYPE_NORMAL
  zh: 从此MetaData中删除给定的Table对象。
- en: '[PRE188]'
  id: totrans-975
  prefs: []
  type: TYPE_PRE
  zh: '[PRE188]'
- en: Returns a list of [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects sorted in order of foreign key dependency.
  id: totrans-976
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个按外键依赖顺序排序的[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象列表。
- en: The sorting will place [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects that have dependencies first, before the dependencies themselves, representing
    the order in which they can be created. To get the order in which the tables would
    be dropped, use the `reversed()` Python built-in.
  id: totrans-977
  prefs: []
  type: TYPE_NORMAL
  zh: 排序将会先放置具有依赖关系的[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象，然后才是依赖对象本身，代表着它们可以被创建的顺序。要获取表被删除的顺序，请使用`reversed()`
    Python内置函数。
- en: Warning
  id: totrans-978
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: The [`MetaData.sorted_tables`](#sqlalchemy.schema.MetaData.sorted_tables "sqlalchemy.schema.MetaData.sorted_tables")
    attribute cannot by itself accommodate automatic resolution of dependency cycles
    between tables, which are usually caused by mutually dependent foreign key constraints.
    When these cycles are detected, the foreign keys of these tables are omitted from
    consideration in the sort. A warning is emitted when this condition occurs, which
    will be an exception raise in a future release. Tables which are not part of the
    cycle will still be returned in dependency order.
  id: totrans-979
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MetaData.sorted_tables`](#sqlalchemy.schema.MetaData.sorted_tables "sqlalchemy.schema.MetaData.sorted_tables")属性本身无法自动解决表之间的依赖关系循环，这通常是由相互依赖的外键约束引起的。当检测到这些循环时，这些表的外键将被从排序考虑中省略。当这种情况发生时会发出警告，这将在未来版本中引发异常。不属于循环的表仍将按照依赖关系顺序返回。'
- en: To resolve these cycles, the [`ForeignKeyConstraint.use_alter`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint.params.use_alter
    "sqlalchemy.schema.ForeignKeyConstraint") parameter may be applied to those constraints
    which create a cycle. Alternatively, the [`sort_tables_and_constraints()`](ddl.html#sqlalchemy.schema.sort_tables_and_constraints
    "sqlalchemy.schema.sort_tables_and_constraints") function will automatically return
    foreign key constraints in a separate collection when cycles are detected so that
    they may be applied to a schema separately.
  id: totrans-980
  prefs: []
  type: TYPE_NORMAL
  zh: 要解决这些循环依赖，可以将[`ForeignKeyConstraint.use_alter`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint.params.use_alter
    "sqlalchemy.schema.ForeignKeyConstraint")参数应用于创建循环的约束。或者，当检测到循环时，[`sort_tables_and_constraints()`](ddl.html#sqlalchemy.schema.sort_tables_and_constraints
    "sqlalchemy.schema.sort_tables_and_constraints")函数将自动将外键约束返回到一个单独的集合中，以便可以单独应用到架构中。
- en: 'Changed in version 1.3.17: - a warning is emitted when [`MetaData.sorted_tables`](#sqlalchemy.schema.MetaData.sorted_tables
    "sqlalchemy.schema.MetaData.sorted_tables") cannot perform a proper sort due to
    cyclical dependencies. This will be an exception in a future release. Additionally,
    the sort will continue to return other tables not involved in the cycle in dependency
    order which was not the case previously.'
  id: totrans-981
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.3.17开始更改：当由于循环依赖关系而无法进行适当排序时，将发出警告[`MetaData.sorted_tables`](#sqlalchemy.schema.MetaData.sorted_tables
    "sqlalchemy.schema.MetaData.sorted_tables")。这将在未来版本中成为异常。此外，排序将继续返回未涉及循环的其他表，其顺序为依赖顺序，这在以前不是这样的。
- en: See also
  id: totrans-982
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`sort_tables()`](ddl.html#sqlalchemy.schema.sort_tables "sqlalchemy.schema.sort_tables")'
  id: totrans-983
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sort_tables()`](ddl.html#sqlalchemy.schema.sort_tables "sqlalchemy.schema.sort_tables")'
- en: '[`sort_tables_and_constraints()`](ddl.html#sqlalchemy.schema.sort_tables_and_constraints
    "sqlalchemy.schema.sort_tables_and_constraints")'
  id: totrans-984
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sort_tables_and_constraints()`](ddl.html#sqlalchemy.schema.sort_tables_and_constraints
    "sqlalchemy.schema.sort_tables_and_constraints")'
- en: '[`MetaData.tables`](#sqlalchemy.schema.MetaData.tables "sqlalchemy.schema.MetaData.tables")'
  id: totrans-985
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MetaData.tables`](#sqlalchemy.schema.MetaData.tables "sqlalchemy.schema.MetaData.tables")'
- en: '[`Inspector.get_table_names()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_table_names
    "sqlalchemy.engine.reflection.Inspector.get_table_names")'
  id: totrans-986
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Inspector.get_table_names()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_table_names
    "sqlalchemy.engine.reflection.Inspector.get_table_names")'
- en: '[`Inspector.get_sorted_table_and_fkc_names()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_sorted_table_and_fkc_names
    "sqlalchemy.engine.reflection.Inspector.get_sorted_table_and_fkc_names")'
  id: totrans-987
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Inspector.get_sorted_table_and_fkc_names()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_sorted_table_and_fkc_names
    "sqlalchemy.engine.reflection.Inspector.get_sorted_table_and_fkc_names")'
- en: '[PRE189]'
  id: totrans-988
  prefs: []
  type: TYPE_PRE
  zh: '[PRE189]'
- en: A dictionary of [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects keyed to their name or “table key”.
  id: totrans-989
  prefs: []
  type: TYPE_NORMAL
  zh: 一个由[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象组成的字典，按它们的名称或“表键”键控。
- en: The exact key is that determined by the [`Table.key`](#sqlalchemy.schema.Table.key
    "sqlalchemy.schema.Table.key") attribute; for a table with no [`Table.schema`](#sqlalchemy.schema.Table.schema
    "sqlalchemy.schema.Table.schema") attribute, this is the same as `Table.name`.
    For a table with a schema, it is typically of the form `schemaname.tablename`.
  id: totrans-990
  prefs: []
  type: TYPE_NORMAL
  zh: 确定的键由[`Table.key`](#sqlalchemy.schema.Table.key "sqlalchemy.schema.Table.key")属性决定；对于没有[`Table.schema`](#sqlalchemy.schema.Table.schema
    "sqlalchemy.schema.Table.schema")属性的表，这与`Table.name`相同。对于具有模式的表，它通常采用`schemaname.tablename`的形式。
- en: See also
  id: totrans-991
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`MetaData.sorted_tables`](#sqlalchemy.schema.MetaData.sorted_tables "sqlalchemy.schema.MetaData.sorted_tables")'
  id: totrans-992
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MetaData.sorted_tables`](#sqlalchemy.schema.MetaData.sorted_tables "sqlalchemy.schema.MetaData.sorted_tables")'
- en: '[PRE190]'
  id: totrans-993
  prefs: []
  type: TYPE_PRE
  zh: '[PRE190]'
- en: An enumeration.
  id: totrans-994
  prefs: []
  type: TYPE_NORMAL
  zh: 一个枚举。
- en: '**Members**'
  id: totrans-995
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[BLANK_SCHEMA](#sqlalchemy.schema.SchemaConst.BLANK_SCHEMA), [NULL_UNSPECIFIED](#sqlalchemy.schema.SchemaConst.NULL_UNSPECIFIED),
    [RETAIN_SCHEMA](#sqlalchemy.schema.SchemaConst.RETAIN_SCHEMA)'
  id: totrans-996
  prefs: []
  type: TYPE_NORMAL
  zh: '[BLANK_SCHEMA](#sqlalchemy.schema.SchemaConst.BLANK_SCHEMA), [NULL_UNSPECIFIED](#sqlalchemy.schema.SchemaConst.NULL_UNSPECIFIED),
    [RETAIN_SCHEMA](#sqlalchemy.schema.SchemaConst.RETAIN_SCHEMA)'
- en: '**Class signature**'
  id: totrans-997
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.SchemaConst`](#sqlalchemy.schema.SchemaConst "sqlalchemy.schema.SchemaConst")
    (`enum.Enum`)
  id: totrans-998
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.schema.SchemaConst`](#sqlalchemy.schema.SchemaConst "sqlalchemy.schema.SchemaConst")
    (`enum.Enum`)
- en: '[PRE191]'
  id: totrans-999
  prefs: []
  type: TYPE_PRE
  zh: '[PRE191]'
- en: Symbol indicating that a [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    or [`Sequence`](defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    should have ‘None’ for its schema, even if the parent [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") has specified a schema.
  id: totrans-1000
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一个[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")或[`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")应该具有“None”作为其模式，即使父[`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")已指定了一个模式。
- en: See also
  id: totrans-1001
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`MetaData.schema`](#sqlalchemy.schema.MetaData.params.schema "sqlalchemy.schema.MetaData")'
  id: totrans-1002
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MetaData.schema`](#sqlalchemy.schema.MetaData.params.schema "sqlalchemy.schema.MetaData")'
- en: '[`Table.schema`](#sqlalchemy.schema.Table.params.schema "sqlalchemy.schema.Table")'
  id: totrans-1003
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Table.schema`](#sqlalchemy.schema.Table.params.schema "sqlalchemy.schema.Table")'
- en: '[`Sequence.schema`](defaults.html#sqlalchemy.schema.Sequence.params.schema
    "sqlalchemy.schema.Sequence")'
  id: totrans-1004
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Sequence.schema`](defaults.html#sqlalchemy.schema.Sequence.params.schema
    "sqlalchemy.schema.Sequence")'
- en: '[PRE192]'
  id: totrans-1005
  prefs: []
  type: TYPE_PRE
  zh: '[PRE192]'
- en: Symbol indicating the “nullable” keyword was not passed to a Column.
  id: totrans-1006
  prefs: []
  type: TYPE_NORMAL
  zh: 表示“nullable”关键字未传递给Column的符号。
- en: This is used to distinguish between the use case of passing `nullable=None`
    to a [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column"), which has
    special meaning on some backends such as SQL Server.
  id: totrans-1007
  prefs: []
  type: TYPE_NORMAL
  zh: 这用于区分向[`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")传递`nullable=None`的用例，这在某些后端（如SQL
    Server）上具有特殊含义。
- en: '[PRE193]'
  id: totrans-1008
  prefs: []
  type: TYPE_PRE
  zh: '[PRE193]'
- en: Symbol indicating that a [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table"),
    [`Sequence`](defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    or in some cases a [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") object, in situations where the object is being
    copied for a [`Table.to_metadata()`](#sqlalchemy.schema.Table.to_metadata "sqlalchemy.schema.Table.to_metadata")
    operation, should retain the schema name that it already has.
  id: totrans-1009
  prefs: []
  type: TYPE_NORMAL
  zh: 表示[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")、[`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")或在某些情况下表示[`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey")对象的符号，在进行[`Table.to_metadata()`](#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata")操作时，应保留其已有的模式名称。
- en: '[PRE194]'
  id: totrans-1010
  prefs: []
  type: TYPE_PRE
  zh: '[PRE194]'
- en: Base class for items that define a database schema.
  id: totrans-1011
  prefs: []
  type: TYPE_NORMAL
  zh: 定义数据库模式的项目的基类。
- en: '**Members**'
  id: totrans-1012
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[info](#sqlalchemy.schema.SchemaItem.info)'
  id: totrans-1013
  prefs: []
  type: TYPE_NORMAL
  zh: '[info](#sqlalchemy.schema.SchemaItem.info)'
- en: '**Class signature**'
  id: totrans-1014
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.SchemaItem`](#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")
    (`sqlalchemy.sql.expression.SchemaEventTarget`, [`sqlalchemy.sql.visitors.Visitable`](visitors.html#sqlalchemy.sql.visitors.Visitable
    "sqlalchemy.sql.visitors.Visitable"))
  id: totrans-1015
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.schema.SchemaItem`](#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")（`sqlalchemy.sql.expression.SchemaEventTarget`，[`sqlalchemy.sql.visitors.Visitable`](visitors.html#sqlalchemy.sql.visitors.Visitable
    "sqlalchemy.sql.visitors.Visitable")）
- en: '[PRE195]'
  id: totrans-1016
  prefs: []
  type: TYPE_PRE
  zh: '[PRE195]'
- en: Info dictionary associated with the object, allowing user-defined data to be
    associated with this [`SchemaItem`](#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem").
  id: totrans-1017
  prefs: []
  type: TYPE_NORMAL
  zh: 与对象关联的信息字典，允许将用户定义的数据与此[`SchemaItem`](#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")关联。
- en: The dictionary is automatically generated when first accessed. It can also be
    specified in the constructor of some objects, such as [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") and [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column").
  id: totrans-1018
  prefs: []
  type: TYPE_NORMAL
  zh: 字典在首次访问时会自动生成。它也可以在某些对象的构造函数中指定，例如[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")和[`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")。
- en: '[PRE196]'
  id: totrans-1019
  prefs: []
  type: TYPE_PRE
  zh: '[PRE196]'
- en: Provides a surrogate [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    that will act as a dedicated insert [sentinel](../glossary.html#term-sentinel)
    column, allowing efficient bulk inserts with deterministic RETURNING sorting for
    tables that don’t otherwise have qualifying primary key configurations.
  id: totrans-1020
  prefs: []
  type: TYPE_NORMAL
  zh: 提供一个代理[`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")，将充当专用的插入[哨兵](../glossary.html#term-sentinel)列，允许对不具有相应主键配置的表进行有效的批量插入，并确保按顺序进行RETURNING排序。
- en: Adding this column to a [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object requires that a corresponding database table actually has this column present,
    so if adding it to an existing model, existing database tables would need to be
    migrated (e.g. using ALTER TABLE or similar) to include this column.
  id: totrans-1021
  prefs: []
  type: TYPE_NORMAL
  zh: 将此列添加到[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象需要确保相应的数据库表实际上包含此列，因此如果将其添加到现有模型中，则需要对现有数据库表进行迁移（例如使用ALTER
    TABLE或类似的操作）以包含此列。
- en: For background on how this object is used, see the section [Configuring Sentinel
    Columns](connections.html#engine-insertmanyvalues-sentinel-columns) as part of
    the section [“Insert Many Values” Behavior for INSERT statements](connections.html#engine-insertmanyvalues).
  id: totrans-1022
  prefs: []
  type: TYPE_NORMAL
  zh: 有关此对象的使用背景，请参阅部分[配置哨兵列](connections.html#engine-insertmanyvalues-sentinel-columns)，作为部分[“插入多个值”行为的INSERT语句](connections.html#engine-insertmanyvalues)的一部分。
- en: The [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column") returned
    will be a nullable integer column by default and make use of a sentinel-specific
    default generator used only in “insertmanyvalues” operations.
  id: totrans-1023
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的[`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")默认将是可空的整数列，并且仅在“insertmanyvalues”操作中使用哨兵特定的默认生成器。
- en: See also
  id: totrans-1024
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`orm_insert_sentinel()`](../orm/mapping_api.html#sqlalchemy.orm.orm_insert_sentinel
    "sqlalchemy.orm.orm_insert_sentinel")'
  id: totrans-1025
  prefs: []
  type: TYPE_NORMAL
  zh: '[`orm_insert_sentinel()`](../orm/mapping_api.html#sqlalchemy.orm.orm_insert_sentinel
    "sqlalchemy.orm.orm_insert_sentinel")'
- en: '[`Column.insert_sentinel`](#sqlalchemy.schema.Column.params.insert_sentinel
    "sqlalchemy.schema.Column")'
  id: totrans-1026
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Column.insert_sentinel`](#sqlalchemy.schema.Column.params.insert_sentinel
    "sqlalchemy.schema.Column")'
- en: '[“Insert Many Values” Behavior for INSERT statements](connections.html#engine-insertmanyvalues)'
  id: totrans-1027
  prefs: []
  type: TYPE_NORMAL
  zh: '[“插入多个值”行为的INSERT语句](connections.html#engine-insertmanyvalues)'
- en: '[Configuring Sentinel Columns](connections.html#engine-insertmanyvalues-sentinel-columns)'
  id: totrans-1028
  prefs: []
  type: TYPE_NORMAL
  zh: '[配置哨兵列](connections.html#engine-insertmanyvalues-sentinel-columns)'
- en: New in version 2.0.10.
  id: totrans-1029
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0.10 中新增。
- en: '[PRE197]'
  id: totrans-1030
  prefs: []
  type: TYPE_PRE
  zh: '[PRE197]'
- en: Represent a table in a database.
  id: totrans-1031
  prefs: []
  type: TYPE_NORMAL
  zh: 表示数据库中的表。
- en: 'e.g.:'
  id: totrans-1032
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE198]'
  id: totrans-1033
  prefs: []
  type: TYPE_PRE
  zh: '[PRE198]'
- en: The [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") object constructs
    a unique instance of itself based on its name and optional schema name within
    the given [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    object. Calling the [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    constructor with the same name and same [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") argument a second time will return the *same* [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object - in this way the [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") constructor acts as a registry function.
  id: totrans-1034
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") 对象根据其名称和可选模式名称在给定的
    [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData") 对象中构建一个独特的实例。使用相同的名称和相同的
    [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData") 参数再次调用
    [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") 构造函数将返回*相同*的 [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 对象 - 这样，[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    构造函数就像一个注册函数。'
- en: See also
  id: totrans-1035
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Describing Databases with MetaData](#metadata-describing) - Introduction to
    database metadata'
  id: totrans-1036
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 MetaData 描述数据库](#metadata-describing) - 数据库元数据介绍'
- en: '**Members**'
  id: totrans-1037
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.schema.Table.__init__), [add_is_dependent_on()](#sqlalchemy.schema.Table.add_is_dependent_on),
    [alias()](#sqlalchemy.schema.Table.alias), [append_column()](#sqlalchemy.schema.Table.append_column),
    [append_constraint()](#sqlalchemy.schema.Table.append_constraint), [argument_for()](#sqlalchemy.schema.Table.argument_for),
    [autoincrement_column](#sqlalchemy.schema.Table.autoincrement_column), [c](#sqlalchemy.schema.Table.c),
    [columns](#sqlalchemy.schema.Table.columns), [compare()](#sqlalchemy.schema.Table.compare),
    [compile()](#sqlalchemy.schema.Table.compile), [constraints](#sqlalchemy.schema.Table.constraints),
    [corresponding_column()](#sqlalchemy.schema.Table.corresponding_column), [create()](#sqlalchemy.schema.Table.create),
    [delete()](#sqlalchemy.schema.Table.delete), [description](#sqlalchemy.schema.Table.description),
    [dialect_kwargs](#sqlalchemy.schema.Table.dialect_kwargs), [dialect_options](#sqlalchemy.schema.Table.dialect_options),
    [drop()](#sqlalchemy.schema.Table.drop), [entity_namespace](#sqlalchemy.schema.Table.entity_namespace),
    [exported_columns](#sqlalchemy.schema.Table.exported_columns), [foreign_key_constraints](#sqlalchemy.schema.Table.foreign_key_constraints),
    [foreign_keys](#sqlalchemy.schema.Table.foreign_keys), [get_children()](#sqlalchemy.schema.Table.get_children),
    [implicit_returning](#sqlalchemy.schema.Table.implicit_returning), [indexes](#sqlalchemy.schema.Table.indexes),
    [info](#sqlalchemy.schema.Table.info), [inherit_cache](#sqlalchemy.schema.Table.inherit_cache),
    [insert()](#sqlalchemy.schema.Table.insert), [is_derived_from()](#sqlalchemy.schema.Table.is_derived_from),
    [join()](#sqlalchemy.schema.Table.join), [key](#sqlalchemy.schema.Table.key),
    [kwargs](#sqlalchemy.schema.Table.kwargs), [lateral()](#sqlalchemy.schema.Table.lateral),
    [outerjoin()](#sqlalchemy.schema.Table.outerjoin), [params()](#sqlalchemy.schema.Table.params),
    [primary_key](#sqlalchemy.schema.Table.primary_key), [replace_selectable()](#sqlalchemy.schema.Table.replace_selectable),
    [schema](#sqlalchemy.schema.Table.schema), [select()](#sqlalchemy.schema.Table.select),
    [self_group()](#sqlalchemy.schema.Table.self_group), [table_valued()](#sqlalchemy.schema.Table.table_valued),
    [tablesample()](#sqlalchemy.schema.Table.tablesample), [to_metadata()](#sqlalchemy.schema.Table.to_metadata),
    [tometadata()](#sqlalchemy.schema.Table.tometadata), [unique_params()](#sqlalchemy.schema.Table.unique_params),
    [update()](#sqlalchemy.schema.Table.update)'
  id: totrans-1038
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.schema.Table.__init__), [add_is_dependent_on()](#sqlalchemy.schema.Table.add_is_dependent_on),
    [alias()](#sqlalchemy.schema.Table.alias), [append_column()](#sqlalchemy.schema.Table.append_column),
    [append_constraint()](#sqlalchemy.schema.Table.append_constraint), [argument_for()](#sqlalchemy.schema.Table.argument_for),
    [autoincrement_column](#sqlalchemy.schema.Table.autoincrement_column), [c](#sqlalchemy.schema.Table.c),
    [columns](#sqlalchemy.schema.Table.columns), [compare()](#sqlalchemy.schema.Table.compare),
    [compile()](#sqlalchemy.schema.Table.compile), [constraints](#sqlalchemy.schema.Table.constraints),
    [corresponding_column()](#sqlalchemy.schema.Table.corresponding_column), [create()](#sqlalchemy.schema.Table.create),
    [delete()](#sqlalchemy.schema.Table.delete), [description](#sqlalchemy.schema.Table.description),
    [dialect_kwargs](#sqlalchemy.schema.Table.dialect_kwargs), [dialect_options](#sqlalchemy.schema.Table.dialect_options),
    [drop()](#sqlalchemy.schema.Table.drop), [entity_namespace](#sqlalchemy.schema.Table.entity_namespace),
    [exported_columns](#sqlalchemy.schema.Table.exported_columns), [foreign_key_constraints](#sqlalchemy.schema.Table.foreign_key_constraints),
    [foreign_keys](#sqlalchemy.schema.Table.foreign_keys), [get_children()](#sqlalchemy.schema.Table.get_children),
    [implicit_returning](#sqlalchemy.schema.Table.implicit_returning), [indexes](#sqlalchemy.schema.Table.indexes),
    [info](#sqlalchemy.schema.Table.info), [inherit_cache](#sqlalchemy.schema.Table.inherit_cache),
    [insert()](#sqlalchemy.schema.Table.insert), [is_derived_from()](#sqlalchemy.schema.Table.is_derived_from),
    [join()](#sqlalchemy.schema.Table.join), [key](#sqlalchemy.schema.Table.key),
    [kwargs](#sqlalchemy.schema.Table.kwargs), [lateral()](#sqlalchemy.schema.Table.lateral),
    [outerjoin()](#sqlalchemy.schema.Table.outerjoin), [params()](#sqlalchemy.schema.Table.params),
    [primary_key](#sqlalchemy.schema.Table.primary_key), [replace_selectable()](#sqlalchemy.schema.Table.replace_selectable),
    [schema](#sqlalchemy.schema.Table.schema), [select()](#sqlalchemy.schema.Table.select),
    [self_group()](#sqlalchemy.schema.Table.self_group), [table_valued()](#sqlalchemy.schema.Table.table_valued),
    [tablesample()](#sqlalchemy.schema.Table.tablesample), [to_metadata()](#sqlalchemy.schema.Table.to_metadata),
    [tometadata()](#sqlalchemy.schema.Table.tometadata), [unique_params()](#sqlalchemy.schema.Table.unique_params),
    [update()](#sqlalchemy.schema.Table.update)'
- en: '**Class signature**'
  id: totrans-1039
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    ([`sqlalchemy.sql.base.DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs"), `sqlalchemy.schema.HasSchemaAttr`, [`sqlalchemy.sql.expression.TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause"), `sqlalchemy.inspection.Inspectable`)
  id: totrans-1040
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.schema.Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    ([`sqlalchemy.sql.base.DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs"), `sqlalchemy.schema.HasSchemaAttr`, [`sqlalchemy.sql.expression.TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause"), `sqlalchemy.inspection.Inspectable`)
- en: '[PRE199]'
  id: totrans-1041
  prefs: []
  type: TYPE_PRE
  zh: '[PRE199]'
- en: Constructor for [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table").
  id: totrans-1042
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")的构造函数。'
- en: 'Parameters:'
  id: totrans-1043
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`name` –'
  id: totrans-1044
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` –'
- en: The name of this table as represented in the database.
  id: totrans-1045
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此表在数据库中表示的名称。
- en: The table name, along with the value of the `schema` parameter, forms a key
    which uniquely identifies this [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    within the owning [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    collection. Additional calls to [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    with the same name, metadata, and schema name will return the same [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object.
  id: totrans-1046
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 表名，以及`schema`参数的值，形成一个键，唯一标识拥有的[`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")集合中的此[`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")。对具有相同名称、元数据和模式名称的[`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")进行的其他调用将返回相同的[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象。
- en: Names which contain no upper case characters will be treated as case insensitive
    names, and will not be quoted unless they are a reserved word or contain special
    characters. A name with any number of upper case characters is considered to be
    case sensitive, and will be sent as quoted.
  id: totrans-1047
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不包含大写字符的名称将被视为不区分大小写的名称，并且除非它们是保留字或包含特殊字符，否则不会被引用。包含任何数量大写字符的名称被视为区分大小写的名称，并将被发送为引用。
- en: To enable unconditional quoting for the table name, specify the flag `quote=True`
    to the constructor, or use the [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name") construct to specify the name.
  id: totrans-1048
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要为表名启用无条件引用，请在构造函数中指定标志`quote=True`，或使用[`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")构造来指定名称。
- en: '`metadata` – a [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    object which will contain this table. The metadata is used as a point of association
    of this table with other tables which are referenced via foreign key. It also
    may be used to associate this table with a particular [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") or [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine").'
  id: totrans-1049
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`metadata` – 一个包含此表的[`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")对象。元数据用作将此表与通过外键引用的其他表关联的关联点。它还可以用于将此表与特定的[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")或[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")关联起来。'
- en: '`*args` – Additional positional arguments are used primarily to add the list
    of [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column") objects contained
    within this table. Similar to the style of a CREATE TABLE statement, other [`SchemaItem`](#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem") constructs may be added here, including [`PrimaryKeyConstraint`](constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint"), and [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint").'
  id: totrans-1050
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*args` – 附加的位置参数主要用于添加包含在此表中的[`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")对象的列表。类似于CREATE
    TABLE语句的风格，其他[`SchemaItem`](#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")构造可以在此处添加，包括[`PrimaryKeyConstraint`](constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint")和[`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")。'
- en: '`autoload_replace` –'
  id: totrans-1051
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoload_replace` –'
- en: Defaults to `True`; when using [`Table.autoload_with`](#sqlalchemy.schema.Table.params.autoload_with
    "sqlalchemy.schema.Table") in conjunction with [`Table.extend_existing`](#sqlalchemy.schema.Table.params.extend_existing
    "sqlalchemy.schema.Table"), indicates that [`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects present in the already-existing [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object should be replaced with columns of the same
    name retrieved from the autoload process. When `False`, columns already present
    under existing names will be omitted from the reflection process.
  id: totrans-1052
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认为`True`；当与[`Table.extend_existing`](#sqlalchemy.schema.Table.params.extend_existing
    "sqlalchemy.schema.Table")一起使用[`Table.autoload_with`](#sqlalchemy.schema.Table.params.autoload_with
    "sqlalchemy.schema.Table")时，指示应该用从autoload过程中检索到的相同名称的列替换已存在的[`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象中存在的[`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")对象。当为`False`时，已存在的列将被省略不包括在反射过程中。
- en: Note that this setting does not impact [`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects specified programmatically within the call
    to [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") that also is
    autoloading; those [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    objects will always replace existing columns of the same name when [`Table.extend_existing`](#sqlalchemy.schema.Table.params.extend_existing
    "sqlalchemy.schema.Table") is `True`.
  id: totrans-1053
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，此设置不会影响通过调用[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")程序指定的[`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象；当[`Table.extend_existing`](#sqlalchemy.schema.Table.params.extend_existing
    "sqlalchemy.schema.Table")为`True`时，这些[`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")对象将始终替换同名的现有列。
- en: See also
  id: totrans-1054
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Table.autoload_with`](#sqlalchemy.schema.Table.params.autoload_with "sqlalchemy.schema.Table")'
  id: totrans-1055
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Table.autoload_with`](#sqlalchemy.schema.Table.params.autoload_with "sqlalchemy.schema.Table")'
- en: '[`Table.extend_existing`](#sqlalchemy.schema.Table.params.extend_existing "sqlalchemy.schema.Table")'
  id: totrans-1056
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Table.extend_existing`](#sqlalchemy.schema.Table.params.extend_existing "sqlalchemy.schema.Table")'
- en: '`autoload_with` –'
  id: totrans-1057
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoload_with` –'
- en: An [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    or [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object, or a [`Inspector`](reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector") object as returned by [`inspect()`](inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect") against one, with which this [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object will be reflected. When set to a non-None value,
    the autoload process will take place for this table against the given engine or
    connection.
  id: totrans-1058
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个[`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")或[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象，或由[`inspect()`](inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect")针对其中一个返回的[`Inspector`](reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector")对象，其将反映此[`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象。当设置为非`None`值时，autoload 过程将在此表针对给定的引擎或连接上进行。
- en: See also
  id: totrans-1059
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Reflecting Database Objects](reflection.html)'
  id: totrans-1060
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[反映数据库对象](reflection.html)'
- en: '[`DDLEvents.column_reflect()`](events.html#sqlalchemy.events.DDLEvents.column_reflect
    "sqlalchemy.events.DDLEvents.column_reflect")'
  id: totrans-1061
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`DDLEvents.column_reflect()`](events.html#sqlalchemy.events.DDLEvents.column_reflect
    "sqlalchemy.events.DDLEvents.column_reflect")'
- en: '[Reflecting with Database-Agnostic Types](reflection.html#metadata-reflection-dbagnostic-types)'
  id: totrans-1062
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[使用与数据库无关的类型进行反射](reflection.html#metadata-reflection-dbagnostic-types)'
- en: '`extend_existing` –'
  id: totrans-1063
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`extend_existing` –'
- en: When `True`, indicates that if this [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    is already present in the given [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData"),
    apply further arguments within the constructor to the existing [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table").
  id: totrans-1064
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当为`True`时，表示如果此[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")已经存在于给定的[`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")中，则将构造函数中的进一步参数应用于现有的[`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")。
- en: If [`Table.extend_existing`](#sqlalchemy.schema.Table.params.extend_existing
    "sqlalchemy.schema.Table") or [`Table.keep_existing`](#sqlalchemy.schema.Table.params.keep_existing
    "sqlalchemy.schema.Table") are not set, and the given name of the new [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") refers to a [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    that is already present in the target [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") collection, and this [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") specifies additional columns or other constructs or
    flags that modify the table’s state, an error is raised. The purpose of these
    two mutually-exclusive flags is to specify what action should be taken when a
    [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") is specified that
    matches an existing [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table"),
    yet specifies additional constructs.
  id: totrans-1065
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果未设置[`Table.extend_existing`](#sqlalchemy.schema.Table.params.extend_existing
    "sqlalchemy.schema.Table")或[`Table.keep_existing`](#sqlalchemy.schema.Table.params.keep_existing
    "sqlalchemy.schema.Table")，并且新[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")的给定名称指的是目标[`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")集合中已经存在的[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")，并且此[`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")指定了额外的列或其他构造或修改表状态的标志，将引发错误。这两个互斥标志的目的是指定在指定匹配现有[`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")但指定了其他构造的情况下应采取什么操作。
- en: '[`Table.extend_existing`](#sqlalchemy.schema.Table.params.extend_existing "sqlalchemy.schema.Table")
    will also work in conjunction with [`Table.autoload_with`](#sqlalchemy.schema.Table.params.autoload_with
    "sqlalchemy.schema.Table") to run a new reflection operation against the database,
    even if a [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") of the
    same name is already present in the target [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData"); newly reflected [`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects and other options will be added into the state
    of the [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table"), potentially
    overwriting existing columns and options of the same name.'
  id: totrans-1066
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Table.extend_existing`](#sqlalchemy.schema.Table.params.extend_existing "sqlalchemy.schema.Table")也将与[`Table.autoload_with`](#sqlalchemy.schema.Table.params.autoload_with
    "sqlalchemy.schema.Table")一起工作，针对数据库运行新的反射操作，即使目标[`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")中已经存在同名的[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")；新反射的[`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象和其他选项将被添加到[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")的状态中，可能会覆盖同名的现有列和选项。'
- en: 'As is always the case with [`Table.autoload_with`](#sqlalchemy.schema.Table.params.autoload_with
    "sqlalchemy.schema.Table"), [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    objects can be specified in the same [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    constructor, which will take precedence. Below, the existing table `mytable` will
    be augmented with [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    objects both reflected from the database, as well as the given [`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") named “y”:'
  id: totrans-1067
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与[`Table.autoload_with`](#sqlalchemy.schema.Table.params.autoload_with "sqlalchemy.schema.Table")一直如此，[`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象可以在同一[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")构造函数中指定，这将优先考虑。下面，现有表`mytable`将被增加，其中包括从数据库反射的[`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象，以及给定的名为“y”的[`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")：
- en: '[PRE200]'
  id: totrans-1068
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE200]'
- en: See also
  id: totrans-1069
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Table.autoload_with`](#sqlalchemy.schema.Table.params.autoload_with "sqlalchemy.schema.Table")'
  id: totrans-1070
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Table.autoload_with`](#sqlalchemy.schema.Table.params.autoload_with "sqlalchemy.schema.Table")'
- en: '[`Table.autoload_replace`](#sqlalchemy.schema.Table.params.autoload_replace
    "sqlalchemy.schema.Table")'
  id: totrans-1071
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Table.autoload_replace`](#sqlalchemy.schema.Table.params.autoload_replace
    "sqlalchemy.schema.Table")'
- en: '[`Table.keep_existing`](#sqlalchemy.schema.Table.params.keep_existing "sqlalchemy.schema.Table")'
  id: totrans-1072
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Table.keep_existing`](#sqlalchemy.schema.Table.params.keep_existing "sqlalchemy.schema.Table")'
- en: '`implicit_returning` –'
  id: totrans-1073
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`implicit_returning` –'
- en: True by default - indicates that RETURNING can be used, typically by the ORM,
    in order to fetch server-generated values such as primary key values and server
    side defaults, on those backends which support RETURNING.
  id: totrans-1074
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认为True - 表示可以使用RETURNING，通常由ORM使用，以获取服务器生成的值，如主键值和服务器端默认值，在支持RETURNING的后端上。
- en: In modern SQLAlchemy there is generally no reason to alter this setting, except
    for some backend specific cases (see [Triggers](../dialects/mssql.html#mssql-triggers)
    in the SQL Server dialect documentation for one such example).
  id: totrans-1075
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在现代SQLAlchemy中，通常没有理由更改此设置，除非是一些特定于后端的情况（请参阅SQL Server方言文档中的[Triggers](../dialects/mssql.html#mssql-triggers)以获取一个示例）。
- en: '`include_columns` – A list of strings indicating a subset of columns to be
    loaded via the `autoload` operation; table columns who aren’t present in this
    list will not be represented on the resulting `Table` object. Defaults to `None`
    which indicates all columns should be reflected.'
  id: totrans-1076
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`include_columns` – 一个字符串列表，指示通过`autoload`操作加载的列的子集；不在此列表中的表列将不会在生成的`Table`对象上表示。默认为`None`，表示应反映所有列。'
- en: '`resolve_fks` –'
  id: totrans-1077
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`resolve_fks` –'
- en: Whether or not to reflect [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects related to this one via [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") objects, when [`Table.autoload_with`](#sqlalchemy.schema.Table.params.autoload_with
    "sqlalchemy.schema.Table") is specified. Defaults to True. Set to False to disable
    reflection of related tables as [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") objects are encountered; may be used either to
    save on SQL calls or to avoid issues with related tables that can’t be accessed.
    Note that if a related table is already present in the [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") collection, or becomes present later, a [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") object associated with this [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") will resolve to that table normally.
  id: totrans-1078
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 是否反映与此对象相关的 [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") 对象，通过
    [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    对象，当指定 [`Table.autoload_with`](#sqlalchemy.schema.Table.params.autoload_with "sqlalchemy.schema.Table")
    时。默认为 True。设置为 False 以禁用通过 [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") 对象反映相关表；可以用于节省 SQL 调用或避免无法访问的相关表的问题。请注意，如果相关表已经存在于
    [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData") 集合中，或者稍后存在，与此
    [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") 关联的 [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") 对象将正常解析为该表。
- en: New in version 1.3.
  id: totrans-1079
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 1.3 版本中的新功能。
- en: See also
  id: totrans-1080
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另见
- en: '[`MetaData.reflect.resolve_fks`](#sqlalchemy.schema.MetaData.reflect.params.resolve_fks
    "sqlalchemy.schema.MetaData.reflect")'
  id: totrans-1081
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`MetaData.reflect.resolve_fks`](#sqlalchemy.schema.MetaData.reflect.params.resolve_fks
    "sqlalchemy.schema.MetaData.reflect")'
- en: '`info` – Optional data dictionary which will be populated into the [`SchemaItem.info`](#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info") attribute of this object.'
  id: totrans-1082
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`info` – 将填充到此对象的 [`SchemaItem.info`](#sqlalchemy.schema.SchemaItem.info "sqlalchemy.schema.SchemaItem.info")
    属性中的可选数据字典。'
- en: '`keep_existing` –'
  id: totrans-1083
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`keep_existing` –'
- en: When `True`, indicates that if this Table is already present in the given [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData"), ignore further arguments within the constructor
    to the existing [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table"),
    and return the [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") object
    as originally created. This is to allow a function that wishes to define a new
    [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") on first call, but
    on subsequent calls will return the same [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table"),
    without any of the declarations (particularly constraints) being applied a second
    time.
  id: totrans-1084
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当设置为 `True` 时，表示如果这个 `Table` 已经存在于给定的 [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") 中，则忽略构造函数内部的进一步参数，并将 [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 对象返回为最初创建的对象。这是为了允许一个希望在第一次调用时定义一个新的 [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 的函数，但在后续调用中将返回相同的 [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")，而不会应用任何声明（特别是约束）第二次。
- en: If [`Table.extend_existing`](#sqlalchemy.schema.Table.params.extend_existing
    "sqlalchemy.schema.Table") or [`Table.keep_existing`](#sqlalchemy.schema.Table.params.keep_existing
    "sqlalchemy.schema.Table") are not set, and the given name of the new [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") refers to a [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    that is already present in the target [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") collection, and this [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") specifies additional columns or other constructs or
    flags that modify the table’s state, an error is raised. The purpose of these
    two mutually-exclusive flags is to specify what action should be taken when a
    [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") is specified that
    matches an existing [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table"),
    yet specifies additional constructs.
  id: totrans-1085
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果未设置[`Table.extend_existing`](#sqlalchemy.schema.Table.params.extend_existing
    "sqlalchemy.schema.Table")或[`Table.keep_existing`](#sqlalchemy.schema.Table.params.keep_existing
    "sqlalchemy.schema.Table")，并且新[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")的给定名称引用的[`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")已经存在于目标[`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")集合中，并且这个[`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")指定了额外的列或其他构造或修改表状态的标志，将引发错误。这两个互斥标志的目的是指定当指定一个与现有的[`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")匹配的[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")时应该采取什么操作，而又指定了额外的构造。
- en: See also
  id: totrans-1086
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[`Table.extend_existing`](#sqlalchemy.schema.Table.params.extend_existing "sqlalchemy.schema.Table")'
  id: totrans-1087
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Table.extend_existing`](#sqlalchemy.schema.Table.params.extend_existing "sqlalchemy.schema.Table")'
- en: '`listeners` –'
  id: totrans-1088
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`listeners` –'
- en: 'A list of tuples of the form `(<eventname>, <fn>)` which will be passed to
    [`listen()`](event.html#sqlalchemy.event.listen "sqlalchemy.event.listen") upon
    construction. This alternate hook to [`listen()`](event.html#sqlalchemy.event.listen
    "sqlalchemy.event.listen") allows the establishment of a listener function specific
    to this [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") before the
    “autoload” process begins. Historically this has been intended for use with the
    [`DDLEvents.column_reflect()`](events.html#sqlalchemy.events.DDLEvents.column_reflect
    "sqlalchemy.events.DDLEvents.column_reflect") event, however note that this event
    hook may now be associated with the [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    object directly:'
  id: totrans-1089
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个形如 `(<eventname>, <fn>)` 的元组列表，将在构造时传递给[`listen()`](event.html#sqlalchemy.event.listen
    "sqlalchemy.event.listen")。这个替代钩子用于在“自动加载”过程开始之前针对这个[`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")建立特定的监听函数。历史上，这被用于与[`DDLEvents.column_reflect()`](events.html#sqlalchemy.events.DDLEvents.column_reflect
    "sqlalchemy.events.DDLEvents.column_reflect")事件一起使用，但请注意，现在这个事件钩子可以直接与[`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")对象关联：
- en: '[PRE201]'
  id: totrans-1090
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE201]'
- en: See also
  id: totrans-1091
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[`DDLEvents.column_reflect()`](events.html#sqlalchemy.events.DDLEvents.column_reflect
    "sqlalchemy.events.DDLEvents.column_reflect")'
  id: totrans-1092
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`DDLEvents.column_reflect()`](events.html#sqlalchemy.events.DDLEvents.column_reflect
    "sqlalchemy.events.DDLEvents.column_reflect")'
- en: '`must_exist` – When `True`, indicates that this Table must already be present
    in the given [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    collection, else an exception is raised.'
  id: totrans-1093
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`must_exist` – 当为`True`时，表示这个Table必须已经存在于给定的[`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")集合中，否则会引发异常。'
- en: '`prefixes` – A list of strings to insert after CREATE in the CREATE TABLE statement.
    They will be separated by spaces.'
  id: totrans-1094
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`prefixes` – 在CREATE TABLE语句中在CREATE之后插入的字符串列表。它们将用空格分隔。'
- en: '`quote` –'
  id: totrans-1095
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`quote` –'
- en: Force quoting of this table’s name on or off, corresponding to `True` or `False`.
    When left at its default of `None`, the column identifier will be quoted according
    to whether the name is case sensitive (identifiers with at least one upper case
    character are treated as case sensitive), or if it’s a reserved word. This flag
    is only needed to force quoting of a reserved word which is not known by the SQLAlchemy
    dialect.
  id: totrans-1096
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 强制对这个表的名称进行引用，对应为`True`或`False`。当保持默认值`None`时，根据名称是否区分大小写（至少有一个大写字符的标识符被视为区分大小写），或者是否为保留字来引用列标识符。这个标志只需要强制引用一个SQLAlchemy方言不知道的保留字。
- en: Note
  id: totrans-1097
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: setting this flag to `False` will not provide case-insensitive behavior for
    table reflection; table reflection will always search for a mixed-case name in
    a case sensitive fashion. Case insensitive names are specified in SQLAlchemy only
    by stating the name with all lower case characters.
  id: totrans-1098
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将此标志设置为`False`将不会为表反射提供不区分大小写的行为；表反射将始终以区分大小写的方式搜索混合大小写名称。 在SQLAlchemy中，仅通过使用所有小写字符的名称来指定不区分大小写的名称。
- en: '`quote_schema` – same as ‘quote’ but applies to the schema identifier.'
  id: totrans-1099
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`quote_schema` – 与‘quote’相同，但适用于模式标识符。'
- en: '`schema` –'
  id: totrans-1100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` –'
- en: The schema name for this table, which is required if the table resides in a
    schema other than the default selected schema for the engine’s database connection.
    Defaults to `None`.
  id: totrans-1101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此表的模式名称，如果该表位于引擎的数据库连接的默认选择模式之外的模式中，则此名称是必需的。 默认为`None`。
- en: If the owning [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    of this [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") specifies
    its own [`MetaData.schema`](#sqlalchemy.schema.MetaData.params.schema "sqlalchemy.schema.MetaData")
    parameter, then that schema name will be applied to this [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") if the schema parameter here is set to `None`. To set
    a blank schema name on a [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    that would otherwise use the schema set on the owning [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData"), specify the special symbol [`BLANK_SCHEMA`](#sqlalchemy.schema.SchemaConst.BLANK_SCHEMA
    "sqlalchemy.schema.SchemaConst.BLANK_SCHEMA").
  id: totrans-1102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果此[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")的所有者[`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")指定了自己的[`MetaData.schema`](#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData")参数，则如果此处的模式参数设置为`None`，则该模式名称将应用于此[`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")。 要在否则将使用所设置的模式的[`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")上指定空白模式名称的[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")，请指定特殊符号[`BLANK_SCHEMA`](#sqlalchemy.schema.SchemaConst.BLANK_SCHEMA
    "sqlalchemy.schema.SchemaConst.BLANK_SCHEMA")。
- en: The quoting rules for the schema name are the same as those for the `name` parameter,
    in that quoting is applied for reserved words or case-sensitive names; to enable
    unconditional quoting for the schema name, specify the flag `quote_schema=True`
    to the constructor, or use the [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name") construct to specify the name.
  id: totrans-1103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 模式名称的引号规则与`name`参数的引号规则相同，即针对保留字或区分大小写的名称应用引号； 要为模式名称启用无条件引号，请将`quote_schema=True`标志传递给构造函数，或使用[`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")构造来指定名称。
- en: '`comment` –'
  id: totrans-1104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`comment` –'
- en: Optional string that will render an SQL comment on table creation.
  id: totrans-1105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选字符串，将在表创建时渲染SQL注释。
- en: 'New in version 1.2: Added the [`Table.comment`](#sqlalchemy.schema.Table.params.comment
    "sqlalchemy.schema.Table") parameter to [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table").'
  id: totrans-1106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自版本1.2新增：在[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")中添加了[`Table.comment`](#sqlalchemy.schema.Table.params.comment
    "sqlalchemy.schema.Table")参数。
- en: '`**kw` – Additional keyword arguments not mentioned above are dialect specific,
    and passed in the form `<dialectname>_<argname>`. See the documentation regarding
    an individual dialect at [Dialects](../dialects/index.html) for detail on documented
    arguments.'
  id: totrans-1107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` – 未提及的其他关键字参数是特定于方言的，并以`<dialectname>_<argname>`的形式传递。 有关详细信息，请参阅个别方言的文档[Dialects](../dialects/index.html)。'
- en: '[PRE202]'
  id: totrans-1108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE202]'
- en: Add a ‘dependency’ for this Table.
  id: totrans-1109
  prefs: []
  type: TYPE_NORMAL
  zh: 为此表添加一个“dependency”。
- en: This is another Table object which must be created first before this one can,
    or dropped after this one.
  id: totrans-1110
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一个必须在此表之前创建或在此表之后删除的Table对象。
- en: Usually, dependencies between tables are determined via ForeignKey objects.
    However, for other situations that create dependencies outside of foreign keys
    (rules, inheriting), this method can manually establish such a link.
  id: totrans-1111
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，表之间的依赖关系是通过ForeignKey对象确定的。 但是，对于创建在外键之外的依赖关系的其他情况（规则，继承），此方法可以手动建立这样的链接。
- en: '[PRE203]'
  id: totrans-1112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE203]'
- en: '*inherited from the* [`FromClause.alias()`](selectable.html#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") *method of* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  id: totrans-1113
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FromClause.alias()`](selectable.html#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause") *方法的* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
- en: Return an alias of this [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-1114
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此 [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    的别名。
- en: 'E.g.:'
  id: totrans-1115
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE204]'
  id: totrans-1116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE204]'
- en: The above code creates an [`Alias`](selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") object which can be used as a FROM clause in
    any SELECT statement.
  id: totrans-1117
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码创建了一个 [`Alias`](selectable.html#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    对象，可以在任何 SELECT 语句中作为 FROM 子句使用。
- en: See also
  id: totrans-1118
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using Aliases](../tutorial/data_select.html#tutorial-using-aliases)'
  id: totrans-1119
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用别名](../tutorial/data_select.html#tutorial-using-aliases)'
- en: '[`alias()`](selectable.html#sqlalchemy.sql.expression.alias "sqlalchemy.sql.expression.alias")'
  id: totrans-1120
  prefs: []
  type: TYPE_NORMAL
  zh: '[`alias()`](selectable.html#sqlalchemy.sql.expression.alias "sqlalchemy.sql.expression.alias")'
- en: '[PRE205]'
  id: totrans-1121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE205]'
- en: Append a [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column") to
    this [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table").
  id: totrans-1122
  prefs: []
  type: TYPE_NORMAL
  zh: 向此 [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") 添加一个 [`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")。
- en: The “key” of the newly added [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column"),
    i.e. the value of its `.key` attribute, will then be available in the `.c` collection
    of this [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table"), and the
    column definition will be included in any CREATE TABLE, SELECT, UPDATE, etc. statements
    generated from this [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    construct.
  id: totrans-1123
  prefs: []
  type: TYPE_NORMAL
  zh: 新添加的 [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column") 的“键”，即其
    `.key` 属性的值，将在此 [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    的 `.c` 集合中可用，并且该列定义将包含在从此 [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    构造生成的任何 CREATE TABLE、SELECT、UPDATE 等语句中。
- en: Note that this does **not** change the definition of the table as it exists
    within any underlying database, assuming that table has already been created in
    the database. Relational databases support the addition of columns to existing
    tables using the SQL ALTER command, which would need to be emitted for an already-existing
    table that doesn’t contain the newly added column.
  id: totrans-1124
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这 **不会** 更改表的定义，因为它存在于任何底层数据库中，假设该表已经在数据库中创建。关系数据库支持向现有表添加列，使用 SQL ALTER
    命令即可，对于已存在但不包含新增列的表，需要发出此命令。
- en: 'Parameters:'
  id: totrans-1125
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**replace_existing** –'
  id: totrans-1126
  prefs: []
  type: TYPE_NORMAL
  zh: '**replace_existing** –'
- en: When `True`, allows replacing existing columns. When `False`, the default, an
    warning will be raised if a column with the same `.key` already exists. A future
    version of sqlalchemy will instead rise a warning.
  id: totrans-1127
  prefs: []
  type: TYPE_NORMAL
  zh: 当为 `True` 时，允许替换现有列。当为 `False`（默认）时，如果具有相同 `.key` 的列已存在，则会发出警告。未来版本的 SQLAlchemy
    将会发出警告。
- en: New in version 1.4.0.
  id: totrans-1128
  prefs: []
  type: TYPE_NORMAL
  zh: 在 1.4.0 版中新增。
- en: '[PRE206]'
  id: totrans-1129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE206]'
- en: Append a [`Constraint`](constraints.html#sqlalchemy.schema.Constraint "sqlalchemy.schema.Constraint")
    to this [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table").
  id: totrans-1130
  prefs: []
  type: TYPE_NORMAL
  zh: 向此 [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") 添加一个 [`Constraint`](constraints.html#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint")。
- en: This has the effect of the constraint being included in any future CREATE TABLE
    statement, assuming specific DDL creation events have not been associated with
    the given [`Constraint`](constraints.html#sqlalchemy.schema.Constraint "sqlalchemy.schema.Constraint")
    object.
  id: totrans-1131
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使约束包含在任何将来的 CREATE TABLE 语句中，假设没有将特定的 DDL 创建事件与给定的 [`Constraint`](constraints.html#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint") 对象关联。
- en: Note that this does **not** produce the constraint within the relational database
    automatically, for a table that already exists in the database. To add a constraint
    to an existing relational database table, the SQL ALTER command must be used.
    SQLAlchemy also provides the [`AddConstraint`](ddl.html#sqlalchemy.schema.AddConstraint
    "sqlalchemy.schema.AddConstraint") construct which can produce this SQL when invoked
    as an executable clause.
  id: totrans-1132
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这 **不会** 自动在关系数据库中生成约束，对于已经存在于数据库中的表。要向现有的关系数据库表添加约束，必须使用 SQL ALTER 命令。SQLAlchemy
    还提供了 [`AddConstraint`](ddl.html#sqlalchemy.schema.AddConstraint "sqlalchemy.schema.AddConstraint")
    结构，当作为可执行子句调用时，可以生成此 SQL。
- en: '[PRE207]'
  id: totrans-1133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE207]'
- en: '*inherited from the* [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") *method of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-1134
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs "sqlalchemy.sql.base.DialectKWArgs")
    *类的* [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") *方法*'
- en: Add a new kind of dialect-specific keyword argument for this class.
  id: totrans-1135
  prefs: []
  type: TYPE_NORMAL
  zh: 为此类添加一种新的特定于方言的关键字参数。
- en: 'E.g.:'
  id: totrans-1136
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE208]'
  id: totrans-1137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE208]'
- en: The [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") method is a per-argument way
    adding extra arguments to the [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") dictionary. This
    dictionary provides a list of argument names accepted by various schema-level
    constructs on behalf of a dialect.
  id: totrans-1138
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") 方法是一种通过将额外参数添加到[`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") 字典中的一种方法来为每个参数添加额外参数的方法。此字典为代表方言的各种模式级别构造提供了接受的参数名称列表。'
- en: New dialects should typically specify this dictionary all at once as a data
    member of the dialect class. The use case for ad-hoc addition of argument names
    is typically for end-user code that is also using a custom compilation scheme
    which consumes the additional arguments.
  id: totrans-1139
  prefs: []
  type: TYPE_NORMAL
  zh: 新的方言通常应该一次性指定该字典，作为方言类的数据成员。通常情况下，用于额外添加参数名称的用例是针对同时使用自定义编译方案的最终用户代码，该编译方案使用额外的参数。
- en: 'Parameters:'
  id: totrans-1140
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dialect_name` – name of a dialect. The dialect must be locatable, else a [`NoSuchModuleError`](exceptions.html#sqlalchemy.exc.NoSuchModuleError
    "sqlalchemy.exc.NoSuchModuleError") is raised. The dialect must also include an
    existing [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") collection, indicating
    that it participates in the keyword-argument validation and default system, else
    [`ArgumentError`](exceptions.html#sqlalchemy.exc.ArgumentError "sqlalchemy.exc.ArgumentError")
    is raised. If the dialect does not include this collection, then any keyword argument
    can be specified on behalf of this dialect already. All dialects packaged within
    SQLAlchemy include this collection, however for third party dialects, support
    may vary.'
  id: totrans-1141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect_name` – 方言的名称。方言必须是可定位的，否则会引发[`NoSuchModuleError`](exceptions.html#sqlalchemy.exc.NoSuchModuleError
    "sqlalchemy.exc.NoSuchModuleError")。方言还必须包含现有的[`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments")集合，表示它参与关键字参数验证和默认系统，否则会引发[`ArgumentError`](exceptions.html#sqlalchemy.exc.ArgumentError
    "sqlalchemy.exc.ArgumentError")。如果方言不包含此集合，则可以为此方言已经指定任何关键字参数。SQLAlchemy中的所有打包的方言都包括此集合，但是对于第三方方言，支持可能有所不同。'
- en: '`argument_name` – name of the parameter.'
  id: totrans-1142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`argument_name` – 参数的名称。'
- en: '`default` – default value of the parameter.'
  id: totrans-1143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default` – 参数的默认值。'
- en: '[PRE209]'
  id: totrans-1144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE209]'
- en: Returns the [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    object which currently represents the “auto increment” column, if any, else returns
    None.
  id: totrans-1145
  prefs: []
  type: TYPE_NORMAL
  zh: 返回当前表示“自动增量”列的[`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")对象，如果没有，则返回None。
- en: This is based on the rules for [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    as defined by the [`Column.autoincrement`](#sqlalchemy.schema.Column.params.autoincrement
    "sqlalchemy.schema.Column") parameter, which generally means the column within
    a single integer column primary key constraint that is not constrained by a foreign
    key. If the table does not have such a primary key constraint, then there’s no
    “autoincrement” column. A [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    may have only one column defined as the “autoincrement” column.
  id: totrans-1146
  prefs: []
  type: TYPE_NORMAL
  zh: 这基于由[`Column.autoincrement`](#sqlalchemy.schema.Column.params.autoincrement
    "sqlalchemy.schema.Column")参数定义的[`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")的规则，通常意味着不受外键约束的单个整数列主键约束中的列。如果表没有这样的主键约束，则没有“自动增量”列。一个[`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")只能定义一个列作为“自动增量”列。
- en: New in version 2.0.4.
  id: totrans-1147
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本2.0.4开始新的。
- en: See also
  id: totrans-1148
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Column.autoincrement`](#sqlalchemy.schema.Column.params.autoincrement "sqlalchemy.schema.Column")'
  id: totrans-1149
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Column.autoincrement`](#sqlalchemy.schema.Column.params.autoincrement "sqlalchemy.schema.Column")'
- en: '[PRE210]'
  id: totrans-1150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE210]'
- en: '*inherited from the* [`FromClause.c`](selectable.html#sqlalchemy.sql.expression.FromClause.c
    "sqlalchemy.sql.expression.FromClause.c") *attribute of* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  id: totrans-1151
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    *属性的* [`FromClause.c`](selectable.html#sqlalchemy.sql.expression.FromClause.c
    "sqlalchemy.sql.expression.FromClause")'
- en: A synonym for [`FromClause.columns`](selectable.html#sqlalchemy.sql.expression.FromClause.columns
    "sqlalchemy.sql.expression.FromClause.columns")
  id: totrans-1152
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FromClause.columns`](selectable.html#sqlalchemy.sql.expression.FromClause.columns
    "sqlalchemy.sql.expression.FromClause.columns") 的同义词'
- en: 'Returns:'
  id: totrans-1153
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")
  id: totrans-1154
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")
- en: '[PRE211]'
  id: totrans-1155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE211]'
- en: '*inherited from the* [`FromClause.columns`](selectable.html#sqlalchemy.sql.expression.FromClause.columns
    "sqlalchemy.sql.expression.FromClause.columns") *attribute of* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  id: totrans-1156
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FromClause.columns`](selectable.html#sqlalchemy.sql.expression.FromClause.columns
    "sqlalchemy.sql.expression.FromClause.columns") *属性的* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
- en: A named-based collection of [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") objects maintained by this [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-1157
  prefs: []
  type: TYPE_NORMAL
  zh: 由此 [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    维护的基于名称的 [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") 对象集合。
- en: 'The [`columns`](#sqlalchemy.schema.Table.columns "sqlalchemy.schema.Table.columns"),
    or [`c`](#sqlalchemy.schema.Table.c "sqlalchemy.schema.Table.c") collection, is
    the gateway to the construction of SQL expressions using table-bound or other
    selectable-bound columns:'
  id: totrans-1158
  prefs: []
  type: TYPE_NORMAL
  zh: '[`columns`](#sqlalchemy.schema.Table.columns "sqlalchemy.schema.Table.columns")
    或 [`c`](#sqlalchemy.schema.Table.c "sqlalchemy.schema.Table.c") 集合，是使用绑定到表或其他可选择的列构建
    SQL 表达式的入口点：'
- en: '[PRE212]'
  id: totrans-1159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE212]'
- en: 'Returns:'
  id: totrans-1160
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") object.
  id: totrans-1161
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") 对象。
- en: '[PRE213]'
  id: totrans-1162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE213]'
- en: '*inherited from the* [`ClauseElement.compare()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.compare
    "sqlalchemy.sql.expression.ClauseElement.compare") *method of* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
  id: totrans-1163
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ClauseElement.compare()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.compare
    "sqlalchemy.sql.expression.ClauseElement.compare") *方法的* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
- en: Compare this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") to the given [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  id: totrans-1164
  prefs: []
  type: TYPE_NORMAL
  zh: 将此 [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") 与给定的 [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") 进行比较。
- en: Subclasses should override the default behavior, which is a straight identity
    comparison.
  id: totrans-1165
  prefs: []
  type: TYPE_NORMAL
  zh: 子类应该覆盖默认行为，即直接标识比较。
- en: '**kw are arguments consumed by subclass `compare()` methods and may be used
    to modify the criteria for comparison (see [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")).'
  id: totrans-1166
  prefs: []
  type: TYPE_NORMAL
  zh: '**kw 是子类 `compare()` 方法消耗的参数，可以用于修改比较的标准（参见 [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")）。'
- en: '[PRE214]'
  id: totrans-1167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE214]'
- en: '*inherited from the* `CompilerElement.compile()` *method of* `CompilerElement`'
  id: totrans-1168
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `CompilerElement.compile()` *方法的* `CompilerElement`'
- en: Compile this SQL expression.
  id: totrans-1169
  prefs: []
  type: TYPE_NORMAL
  zh: 编译此 SQL 表达式。
- en: The return value is a [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object. Calling `str()` or `unicode()` on the returned
    value will yield a string representation of the result. The [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object also can return a dictionary of bind parameter
    names and values using the `params` accessor.
  id: totrans-1170
  prefs: []
  type: TYPE_NORMAL
  zh: 返回值是一个 [`Compiled`](internals.html#sqlalchemy.engine.Compiled "sqlalchemy.engine.Compiled")
    对象。对返回值调用 `str()` 或 `unicode()` 将产生结果的字符串表示。[`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") 对象还可以使用 `params` 访问器返回绑定参数名称和值的字典。
- en: 'Parameters:'
  id: totrans-1171
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`bind` – An [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    or [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    which can provide a [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    in order to generate a [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object. If the `bind` and `dialect` parameters are
    both omitted, a default SQL compiler is used.'
  id: totrans-1172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bind` – 一个可以提供[`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")以生成[`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled")对象的[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")或[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")。如果`bind`和`dialect`参数都被省略，将使用默认的SQL编译器。'
- en: '`column_keys` – Used for INSERT and UPDATE statements, a list of column names
    which should be present in the VALUES clause of the compiled statement. If `None`,
    all columns from the target table object are rendered.'
  id: totrans-1173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`column_keys` – 用于INSERT和UPDATE语句，应在编译语句的VALUES子句中出现的列名列表。如果为`None`，则渲染目标表对象的所有列。'
- en: '`dialect` – A [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    instance which can generate a [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object. This argument takes precedence over the
    `bind` argument.'
  id: totrans-1174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect` – 一个可以生成[`Compiled`](internals.html#sqlalchemy.engine.Compiled "sqlalchemy.engine.Compiled")对象的[`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect")实例。此参数优先于`bind`参数。'
- en: '`compile_kwargs` –'
  id: totrans-1175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`compile_kwargs` –'
- en: 'optional dictionary of additional parameters that will be passed through to
    the compiler within all “visit” methods. This allows any custom flag to be passed
    through to a custom compilation construct, for example. It is also used for the
    case of passing the `literal_binds` flag through:'
  id: totrans-1176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的附加参数字典，将在所有“visit”方法中传递给编译器。这允许将任何自定义标志传递给自定义编译结构，例如。它还用于通过`literal_binds`标志传递的情况：
- en: '[PRE215]'
  id: totrans-1177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE215]'
- en: See also
  id: totrans-1178
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[How do I render SQL expressions as strings, possibly with bound parameters
    inlined?](../faq/sqlexpressions.html#faq-sql-expression-string)'
  id: totrans-1179
  prefs: []
  type: TYPE_NORMAL
  zh: '[如何将SQL表达式呈现为字符串，可能包含内联的绑定参数？](../faq/sqlexpressions.html#faq-sql-expression-string)'
- en: '[PRE216]'
  id: totrans-1180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE216]'
- en: A collection of all [`Constraint`](constraints.html#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint") objects associated with this [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table").
  id: totrans-1181
  prefs: []
  type: TYPE_NORMAL
  zh: 与此[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")相关联的所有[`Constraint`](constraints.html#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint")对象的集合。
- en: Includes [`PrimaryKeyConstraint`](constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint"), [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint"), [`UniqueConstraint`](constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint"), [`CheckConstraint`](constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint"). A separate collection [`Table.foreign_key_constraints`](#sqlalchemy.schema.Table.foreign_key_constraints
    "sqlalchemy.schema.Table.foreign_key_constraints") refers to the collection of
    all [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") objects, and the [`Table.primary_key`](#sqlalchemy.schema.Table.primary_key
    "sqlalchemy.schema.Table.primary_key") attribute refers to the single [`PrimaryKeyConstraint`](constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") associated with the [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table").
  id: totrans-1182
  prefs: []
  type: TYPE_NORMAL
  zh: 包括[`PrimaryKeyConstraint`](constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint")、[`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")、[`UniqueConstraint`](constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint")、[`CheckConstraint`](constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint")。一个单独的集合[`Table.foreign_key_constraints`](#sqlalchemy.schema.Table.foreign_key_constraints
    "sqlalchemy.schema.Table.foreign_key_constraints")指的是所有与该[`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")相关联的[`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")对象的集合，而[`Table.primary_key`](#sqlalchemy.schema.Table.primary_key
    "sqlalchemy.schema.Table.primary_key")属性指的是与该[`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")相关联的单个[`PrimaryKeyConstraint`](constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint")。
- en: See also
  id: totrans-1183
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Table.constraints`](#sqlalchemy.schema.Table.constraints "sqlalchemy.schema.Table.constraints")'
  id: totrans-1184
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Table.constraints`](#sqlalchemy.schema.Table.constraints "sqlalchemy.schema.Table.constraints")'
- en: '[`Table.primary_key`](#sqlalchemy.schema.Table.primary_key "sqlalchemy.schema.Table.primary_key")'
  id: totrans-1185
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Table.primary_key`](#sqlalchemy.schema.Table.primary_key "sqlalchemy.schema.Table.primary_key")'
- en: '[`Table.foreign_key_constraints`](#sqlalchemy.schema.Table.foreign_key_constraints
    "sqlalchemy.schema.Table.foreign_key_constraints")'
  id: totrans-1186
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Table.foreign_key_constraints`](#sqlalchemy.schema.Table.foreign_key_constraints
    "sqlalchemy.schema.Table.foreign_key_constraints")'
- en: '[`Table.indexes`](#sqlalchemy.schema.Table.indexes "sqlalchemy.schema.Table.indexes")'
  id: totrans-1187
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Table.indexes`](#sqlalchemy.schema.Table.indexes "sqlalchemy.schema.Table.indexes")'
- en: '[`Inspector`](reflection.html#sqlalchemy.engine.reflection.Inspector "sqlalchemy.engine.reflection.Inspector")'
  id: totrans-1188
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Inspector`](reflection.html#sqlalchemy.engine.reflection.Inspector "sqlalchemy.engine.reflection.Inspector")'
- en: '[PRE217]'
  id: totrans-1189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE217]'
- en: '*inherited from the* [`Selectable.corresponding_column()`](selectable.html#sqlalchemy.sql.expression.Selectable.corresponding_column
    "sqlalchemy.sql.expression.Selectable.corresponding_column") *method of* [`Selectable`](selectable.html#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
  id: totrans-1190
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Selectable.corresponding_column()`](selectable.html#sqlalchemy.sql.expression.Selectable.corresponding_column
    "sqlalchemy.sql.expression.Selectable.corresponding_column") *方法的* [`Selectable`](selectable.html#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
- en: Given a [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"), return the exported [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") object from the [`Selectable.exported_columns`](selectable.html#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") collection of this [`Selectable`](selectable.html#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable") which corresponds to that original [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") via a common ancestor column.
  id: totrans-1191
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")，从此[`Selectable`](selectable.html#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")的[`Selectable.exported_columns`](selectable.html#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns")集合中返回与该原始[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")通过共同祖先列对应的导出[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")对象。
- en: 'Parameters:'
  id: totrans-1192
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`column` – the target [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") to be matched.'
  id: totrans-1193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`column` – 要匹配的目标[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")。'
- en: '`require_embedded` – only return corresponding columns for the given [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"), if the given [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") is actually present within a sub-element
    of this [`Selectable`](selectable.html#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable").
    Normally the column will match if it merely shares a common ancestor with one
    of the exported columns of this [`Selectable`](selectable.html#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable").'
  id: totrans-1194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`require_embedded` – 只返回给定[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")对应的列，如果给定的[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")实际上存在于此[`Selectable`](selectable.html#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")的子元素中。通常，如果列仅与此[`Selectable`](selectable.html#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")的导出列之一共享共同的祖先，则列将匹配。'
- en: See also
  id: totrans-1195
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Selectable.exported_columns`](selectable.html#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") - the [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") that is used for the operation.'
  id: totrans-1196
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Selectable.exported_columns`](selectable.html#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") - 用于操作的[`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")。'
- en: '[`ColumnCollection.corresponding_column()`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection.corresponding_column
    "sqlalchemy.sql.expression.ColumnCollection.corresponding_column") - implementation
    method.'
  id: totrans-1197
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnCollection.corresponding_column()`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection.corresponding_column
    "sqlalchemy.sql.expression.ColumnCollection") - 实现方法。'
- en: '[PRE218]'
  id: totrans-1198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE218]'
- en: Issue a `CREATE` statement for this [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table"),
    using the given [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    or [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    for connectivity.
  id: totrans-1199
  prefs: []
  type: TYPE_NORMAL
  zh: 为此 [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") 发出一个 `CREATE`
    语句，使用给定的 [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    或 [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    进行连接。
- en: See also
  id: totrans-1200
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[`MetaData.create_all()`](#sqlalchemy.schema.MetaData.create_all "sqlalchemy.schema.MetaData.create_all").'
  id: totrans-1201
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MetaData.create_all()`](#sqlalchemy.schema.MetaData.create_all "sqlalchemy.schema.MetaData.create_all").'
- en: '[PRE219]'
  id: totrans-1202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE219]'
- en: '*inherited from the* [`TableClause.delete()`](selectable.html#sqlalchemy.sql.expression.TableClause.delete
    "sqlalchemy.sql.expression.TableClause.delete") *method of* [`TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause")'
  id: totrans-1203
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`TableClause.delete()`](selectable.html#sqlalchemy.sql.expression.TableClause.delete
    "sqlalchemy.sql.expression.TableClause.delete") *方法的* [`TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause")'
- en: Generate a [`delete()`](dml.html#sqlalchemy.sql.expression.delete "sqlalchemy.sql.expression.delete")
    construct against this [`TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause").
  id: totrans-1204
  prefs: []
  type: TYPE_NORMAL
  zh: 针对此 [`TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause "sqlalchemy.sql.expression.TableClause")
    生成一个 [`delete()`](dml.html#sqlalchemy.sql.expression.delete "sqlalchemy.sql.expression.delete")
    构造。
- en: 'E.g.:'
  id: totrans-1205
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE220]'
  id: totrans-1206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE220]'
- en: See [`delete()`](dml.html#sqlalchemy.sql.expression.delete "sqlalchemy.sql.expression.delete")
    for argument and usage information.
  id: totrans-1207
  prefs: []
  type: TYPE_NORMAL
  zh: 有关参数和用法信息，请参阅[`delete()`](dml.html#sqlalchemy.sql.expression.delete "sqlalchemy.sql.expression.delete")。
- en: '[PRE221]'
  id: totrans-1208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE221]'
- en: '*inherited from the* [`TableClause.description`](selectable.html#sqlalchemy.sql.expression.TableClause.description
    "sqlalchemy.sql.expression.TableClause.description") *attribute of* [`TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause")'
  id: totrans-1209
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`TableClause.description`](selectable.html#sqlalchemy.sql.expression.TableClause.description
    "sqlalchemy.sql.expression.TableClause.description") *属性的* [`TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause")'
- en: '[PRE222]'
  id: totrans-1210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE222]'
- en: '*inherited from the* [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-1211
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") *属性的* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
- en: A collection of keyword arguments specified as dialect-specific options to this
    construct.
  id: totrans-1212
  prefs: []
  type: TYPE_NORMAL
  zh: 作为方言特定选项指定的关键字参数集合。
- en: The arguments are present here in their original `<dialect>_<kwarg>` format.
    Only arguments that were actually passed are included; unlike the [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") collection, which contains
    all options known by this dialect including defaults.
  id: totrans-1213
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的参数以其原始的 `<dialect>_<kwarg>` 格式呈现。只包括实际传递的参数；不像 [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") 集合那样，其中包含了此方言的所有已知选项，包括默认值。
- en: The collection is also writable; keys are accepted of the form `<dialect>_<kwarg>`
    where the value will be assembled into the list of options.
  id: totrans-1214
  prefs: []
  type: TYPE_NORMAL
  zh: 此集合也是可写的；键采用 `<dialect>_<kwarg>` 形式，其中的值将被组装到选项列表中。
- en: See also
  id: totrans-1215
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") - nested dictionary form'
  id: totrans-1216
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") - 嵌套字典形式'
- en: '[PRE223]'
  id: totrans-1217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE223]'
- en: '*inherited from the* [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-1218
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") *属性的* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
- en: A collection of keyword arguments specified as dialect-specific options to this
    construct.
  id: totrans-1219
  prefs: []
  type: TYPE_NORMAL
  zh: 作为方言特定选项指定的关键字参数集合。
- en: 'This is a two-level nested registry, keyed to `<dialect_name>` and `<argument_name>`.
    For example, the `postgresql_where` argument would be locatable as:'
  id: totrans-1220
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个两级嵌套注册表，键为 `<dialect_name>` 和 `<argument_name>`。例如，`postgresql_where` 参数可以定位为：
- en: '[PRE224]'
  id: totrans-1221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE224]'
- en: New in version 0.9.2.
  id: totrans-1222
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本0.9.2新增。
- en: See also
  id: totrans-1223
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") - flat dictionary form'
  id: totrans-1224
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") - 平面字典形式'
- en: '[PRE225]'
  id: totrans-1225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE225]'
- en: Issue a `DROP` statement for this [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table"),
    using the given [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    or [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    for connectivity.
  id: totrans-1226
  prefs: []
  type: TYPE_NORMAL
  zh: 使用给定的 [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    或 [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    发出此 [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") 的`DROP`语句以进行连接。
- en: See also
  id: totrans-1227
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`MetaData.drop_all()`](#sqlalchemy.schema.MetaData.drop_all "sqlalchemy.schema.MetaData.drop_all").'
  id: totrans-1228
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MetaData.drop_all()`](#sqlalchemy.schema.MetaData.drop_all "sqlalchemy.schema.MetaData.drop_all").'
- en: '[PRE226]'
  id: totrans-1229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE226]'
- en: '*inherited from the* [`FromClause.entity_namespace`](selectable.html#sqlalchemy.sql.expression.FromClause.entity_namespace
    "sqlalchemy.sql.expression.FromClause.entity_namespace") *attribute of* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  id: totrans-1230
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FromClause.entity_namespace`](selectable.html#sqlalchemy.sql.expression.FromClause.entity_namespace
    "sqlalchemy.sql.expression.FromClause.entity_namespace") *属性的* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
- en: Return a namespace used for name-based access in SQL expressions.
  id: totrans-1231
  prefs: []
  type: TYPE_NORMAL
  zh: 返回用于 SQL 表达式中基于名称访问的命名空间。
- en: 'This is the namespace that is used to resolve “filter_by()” type expressions,
    such as:'
  id: totrans-1232
  prefs: []
  type: TYPE_NORMAL
  zh: 这是用于解析“filter_by()”类型表达式的命名空间，例如：
- en: '[PRE227]'
  id: totrans-1233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE227]'
- en: It defaults to the `.c` collection, however internally it can be overridden
    using the “entity_namespace” annotation to deliver alternative results.
  id: totrans-1234
  prefs: []
  type: TYPE_NORMAL
  zh: 默认为`.c`集合，但在内部可以使用“entity_namespace”注解进行覆盖以提供替代结果。
- en: '[PRE228]'
  id: totrans-1235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE228]'
- en: '*inherited from the* [`FromClause.exported_columns`](selectable.html#sqlalchemy.sql.expression.FromClause.exported_columns
    "sqlalchemy.sql.expression.FromClause.exported_columns") *attribute of* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  id: totrans-1236
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FromClause.exported_columns`](selectable.html#sqlalchemy.sql.expression.FromClause.exported_columns
    "sqlalchemy.sql.expression.FromClause.exported_columns") *属性的* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
- en: A [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") that represents the “exported” columns
    of this [`Selectable`](selectable.html#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable").
  id: totrans-1237
  prefs: []
  type: TYPE_NORMAL
  zh: 代表此 [`Selectable`](selectable.html#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable")
    的“导出”列的 [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")。
- en: The “exported” columns for a [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") object are synonymous with the [`FromClause.columns`](selectable.html#sqlalchemy.sql.expression.FromClause.columns
    "sqlalchemy.sql.expression.FromClause.columns") collection.
  id: totrans-1238
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    对象的“导出”列与 [`FromClause.columns`](selectable.html#sqlalchemy.sql.expression.FromClause.columns
    "sqlalchemy.sql.expression.FromClause.columns") 集合是同义词。'
- en: New in version 1.4.
  id: totrans-1239
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.4新增。
- en: See also
  id: totrans-1240
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Selectable.exported_columns`](selectable.html#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns")'
  id: totrans-1241
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Selectable.exported_columns`](selectable.html#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns")'
- en: '[`SelectBase.exported_columns`](selectable.html#sqlalchemy.sql.expression.SelectBase.exported_columns
    "sqlalchemy.sql.expression.SelectBase.exported_columns")'
  id: totrans-1242
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SelectBase.exported_columns`](selectable.html#sqlalchemy.sql.expression.SelectBase.exported_columns
    "sqlalchemy.sql.expression.SelectBase.exported_columns")'
- en: '[PRE229]'
  id: totrans-1243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE229]'
- en: '[`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") objects referred to by this [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table").'
  id: totrans-1244
  prefs: []
  type: TYPE_NORMAL
  zh: 被此 [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") 引用的 [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") 对象。
- en: This list is produced from the collection of [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") objects currently associated.
  id: totrans-1245
  prefs: []
  type: TYPE_NORMAL
  zh: 此列表是当前关联的 [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    对象集合生成的。
- en: See also
  id: totrans-1246
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Table.constraints`](#sqlalchemy.schema.Table.constraints "sqlalchemy.schema.Table.constraints")'
  id: totrans-1247
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Table.constraints`](#sqlalchemy.schema.Table.constraints "sqlalchemy.schema.Table.constraints")'
- en: '[`Table.foreign_keys`](#sqlalchemy.schema.Table.foreign_keys "sqlalchemy.schema.Table.foreign_keys")'
  id: totrans-1248
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Table.foreign_keys`](#sqlalchemy.schema.Table.foreign_keys "sqlalchemy.schema.Table.foreign_keys")'
- en: '[`Table.indexes`](#sqlalchemy.schema.Table.indexes "sqlalchemy.schema.Table.indexes")'
  id: totrans-1249
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Table.indexes`](#sqlalchemy.schema.Table.indexes "sqlalchemy.schema.Table.indexes")'
- en: '[PRE230]'
  id: totrans-1250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE230]'
- en: '*inherited from the* [`FromClause.foreign_keys`](selectable.html#sqlalchemy.sql.expression.FromClause.foreign_keys
    "sqlalchemy.sql.expression.FromClause.foreign_keys") *attribute of* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  id: totrans-1251
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FromClause.foreign_keys`](selectable.html#sqlalchemy.sql.expression.FromClause.foreign_keys
    "sqlalchemy.sql.expression.FromClause.foreign_keys") *属性的* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
- en: Return the collection of [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") marker objects which this FromClause references.
  id: totrans-1252
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此FromClause引用的所有[`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey")标记对象的集合。
- en: Each [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    is a member of a [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")-wide
    [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint").
  id: totrans-1253
  prefs: []
  type: TYPE_NORMAL
  zh: 每个[`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")都是[`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")范围内的[`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")的成员。
- en: See also
  id: totrans-1254
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Table.foreign_key_constraints`](#sqlalchemy.schema.Table.foreign_key_constraints
    "sqlalchemy.schema.Table.foreign_key_constraints")'
  id: totrans-1255
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Table.foreign_key_constraints`](#sqlalchemy.schema.Table.foreign_key_constraints
    "sqlalchemy.schema.Table.foreign_key_constraints")'
- en: '[PRE231]'
  id: totrans-1256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE231]'
- en: '*inherited from the* `HasTraverseInternals.get_children()` *method of* `HasTraverseInternals`'
  id: totrans-1257
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `HasTraverseInternals.get_children()` *方法的* `HasTraverseInternals`'
- en: Return immediate child `HasTraverseInternals` elements of this `HasTraverseInternals`.
  id: totrans-1258
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此`HasTraverseInternals`的直接子级`HasTraverseInternals`元素。
- en: This is used for visit traversal.
  id: totrans-1259
  prefs: []
  type: TYPE_NORMAL
  zh: 这用于访问遍历。
- en: '**kw may contain flags that change the collection that is returned, for example
    to return a subset of items in order to cut down on larger traversals, or to return
    child items from a different context (such as schema-level collections instead
    of clause-level).'
  id: totrans-1260
  prefs: []
  type: TYPE_NORMAL
  zh: '**kw可能包含更改返回的集合的标志，例如返回子集以减少较大遍历的项，或者从不同上下文（例如模式级集合而不是子句级）返回子项。'
- en: '[PRE232]'
  id: totrans-1261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE232]'
- en: '*inherited from the* [`TableClause.implicit_returning`](selectable.html#sqlalchemy.sql.expression.TableClause.implicit_returning
    "sqlalchemy.sql.expression.TableClause.implicit_returning") *attribute of* [`TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause")'
  id: totrans-1262
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`TableClause.implicit_returning`](selectable.html#sqlalchemy.sql.expression.TableClause.implicit_returning
    "sqlalchemy.sql.expression.TableClause.implicit_returning") *属性的* [`TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause")'
- en: '[`TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause "sqlalchemy.sql.expression.TableClause")
    doesn’t support having a primary key or column -level defaults, so implicit returning
    doesn’t apply.'
  id: totrans-1263
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause "sqlalchemy.sql.expression.TableClause")不支持具有主键或列级默认值，因此隐式返回不适用。'
- en: '[PRE233]'
  id: totrans-1264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE233]'
- en: A collection of all [`Index`](constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    objects associated with this [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table").
  id: totrans-1265
  prefs: []
  type: TYPE_NORMAL
  zh: 与此[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")相关联的所有[`Index`](constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")对象的集合。
- en: See also
  id: totrans-1266
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Inspector.get_indexes()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_indexes
    "sqlalchemy.engine.reflection.Inspector.get_indexes")'
  id: totrans-1267
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Inspector.get_indexes()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_indexes
    "sqlalchemy.engine.reflection.Inspector.get_indexes")'
- en: '[PRE234]'
  id: totrans-1268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE234]'
- en: '*inherited from the* [`SchemaItem.info`](#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info") *attribute of* [`SchemaItem`](#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem")'
  id: totrans-1269
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SchemaItem.info`](#sqlalchemy.schema.SchemaItem.info "sqlalchemy.schema.SchemaItem.info")
    *属性的* [`SchemaItem`](#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")'
- en: Info dictionary associated with the object, allowing user-defined data to be
    associated with this [`SchemaItem`](#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem").
  id: totrans-1270
  prefs: []
  type: TYPE_NORMAL
  zh: 与对象关联的信息字典，允许将用户定义的数据与此[`SchemaItem`](#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")关联。
- en: The dictionary is automatically generated when first accessed. It can also be
    specified in the constructor of some objects, such as [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") and [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column").
  id: totrans-1271
  prefs: []
  type: TYPE_NORMAL
  zh: 当首次访问时，该字典会自动生成。也可以在某些对象的构造函数中指定，例如 [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    和 [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")。
- en: '[PRE235]'
  id: totrans-1272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE235]'
- en: '*inherited from the* `HasCacheKey.inherit_cache` *attribute of* [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.cache_key.HasCacheKey")'
  id: totrans-1273
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.cache_key.HasCacheKey") *属性的* [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.cache_key.HasCacheKey") *对象*'
- en: Indicate if this [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") instance should make use of the cache
    key generation scheme used by its immediate superclass.
  id: totrans-1274
  prefs: []
  type: TYPE_NORMAL
  zh: 指示此 [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey "sqlalchemy.sql.traversals.HasCacheKey")
    实例是否应使用其直接超类使用的缓存密钥生成方案。
- en: The attribute defaults to `None`, which indicates that a construct has not yet
    taken into account whether or not its appropriate for it to participate in caching;
    this is functionally equivalent to setting the value to `False`, except that a
    warning is also emitted.
  id: totrans-1275
  prefs: []
  type: TYPE_NORMAL
  zh: 该属性默认为`None`，表示构造尚未考虑是否适合参与缓存；这在功能上等同于将值设置为`False`，只是还会发出警告。
- en: This flag can be set to `True` on a particular class, if the SQL that corresponds
    to the object does not change based on attributes which are local to this class,
    and not its superclass.
  id: totrans-1276
  prefs: []
  type: TYPE_NORMAL
  zh: 如果与此类本地属性而不是其超类相关的属性不会更改与对象对应的SQL，则可以将此标志设置为 `True`。
- en: See also
  id: totrans-1277
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Enabling Caching Support for Custom Constructs](compiler.html#compilerext-caching)
    - General guideslines for setting the [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute for third-party
    or user defined SQL constructs.'
  id: totrans-1278
  prefs: []
  type: TYPE_NORMAL
  zh: '[为自定义构造启用缓存支持](compiler.html#compilerext-caching) - 设置第三方或用户定义的SQL构造的[`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") 属性的一般指南。'
- en: '[PRE236]'
  id: totrans-1279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE236]'
- en: '*inherited from the* [`TableClause.insert()`](selectable.html#sqlalchemy.sql.expression.TableClause.insert
    "sqlalchemy.sql.expression.TableClause.insert") *method of* [`TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause")'
  id: totrans-1280
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`TableClause.insert()`](selectable.html#sqlalchemy.sql.expression.TableClause.insert
    "sqlalchemy.sql.expression.TableClause.insert") *方法的* [`TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause") *对象*'
- en: Generate an [`Insert`](dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    construct against this [`TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause").
  id: totrans-1281
  prefs: []
  type: TYPE_NORMAL
  zh: 针对此 [`TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause "sqlalchemy.sql.expression.TableClause")
    生成一个 [`Insert`](dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    构造。
- en: 'E.g.:'
  id: totrans-1282
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE237]'
  id: totrans-1283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE237]'
- en: See [`insert()`](dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert")
    for argument and usage information.
  id: totrans-1284
  prefs: []
  type: TYPE_NORMAL
  zh: 有关参数和用法信息，请参阅 [`insert()`](dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert")。
- en: '[PRE238]'
  id: totrans-1285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE238]'
- en: '*inherited from the* [`FromClause.is_derived_from()`](selectable.html#sqlalchemy.sql.expression.FromClause.is_derived_from
    "sqlalchemy.sql.expression.FromClause.is_derived_from") *method of* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  id: totrans-1286
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FromClause.is_derived_from()`](selectable.html#sqlalchemy.sql.expression.FromClause.is_derived_from
    "sqlalchemy.sql.expression.FromClause.is_derived_from") *方法的* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") *对象*'
- en: Return `True` if this [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") is ‘derived’ from the given `FromClause`.
  id: totrans-1287
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此 [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    从给定的 `FromClause`‘派生’，则返回`True`。
- en: An example would be an Alias of a Table is derived from that Table.
  id: totrans-1288
  prefs: []
  type: TYPE_NORMAL
  zh: 一个例子就是一个表的别名是从该表派生出来的。
- en: '[PRE239]'
  id: totrans-1289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE239]'
- en: '*inherited from the* [`FromClause.join()`](selectable.html#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join") *method of* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  id: totrans-1290
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FromClause.join()`](selectable.html#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join") *方法的* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") *对象*'
- en: Return a [`Join`](selectable.html#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    from this [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") to another `FromClause`.
  id: totrans-1291
  prefs: []
  type: TYPE_NORMAL
  zh: 从此[`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")返回到另一个`FromClause`的[`Join`](selectable.html#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join")。
- en: 'E.g.:'
  id: totrans-1292
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE240]'
  id: totrans-1293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE240]'
- en: 'would emit SQL along the lines of:'
  id: totrans-1294
  prefs: []
  type: TYPE_NORMAL
  zh: 会生成类似以下的SQL：
- en: '[PRE241]'
  id: totrans-1295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE241]'
- en: 'Parameters:'
  id: totrans-1296
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`right` – the right side of the join; this is any [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") object such as a [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object, and may also be a selectable-compatible object
    such as an ORM-mapped class.'
  id: totrans-1297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`right` – 连接的右侧；这是任何[`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")对象，如[`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象，也可以是可选择兼容的对象，如ORM映射类。'
- en: '`onclause` – a SQL expression representing the ON clause of the join. If left
    at `None`, [`FromClause.join()`](selectable.html#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join") will attempt to join the two tables
    based on a foreign key relationship.'
  id: totrans-1298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onclause` – 一个代表连接的ON子句的SQL表达式。如果保持为`None`，[`FromClause.join()`](selectable.html#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join") 将尝试基于外键关系连接这两个表。'
- en: '`isouter` – if True, render a LEFT OUTER JOIN, instead of JOIN.'
  id: totrans-1299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isouter` – 如果为True，则渲染一个LEFT OUTER JOIN，而不是JOIN。'
- en: '`full` – if True, render a FULL OUTER JOIN, instead of LEFT OUTER JOIN. Implies
    [`FromClause.join.isouter`](selectable.html#sqlalchemy.sql.expression.FromClause.join.params.isouter
    "sqlalchemy.sql.expression.FromClause.join").'
  id: totrans-1300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`full` – 如果为True，则渲染一个FULL OUTER JOIN，而不是LEFT OUTER JOIN。暗示[`FromClause.join.isouter`](selectable.html#sqlalchemy.sql.expression.FromClause.join.params.isouter
    "sqlalchemy.sql.expression.FromClause.join")。'
- en: See also
  id: totrans-1301
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`join()`](selectable.html#sqlalchemy.sql.expression.join "sqlalchemy.sql.expression.join")
    - standalone function'
  id: totrans-1302
  prefs: []
  type: TYPE_NORMAL
  zh: '[`join()`](selectable.html#sqlalchemy.sql.expression.join "sqlalchemy.sql.expression.join")
    - 独立函数'
- en: '[`Join`](selectable.html#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    - the type of object produced'
  id: totrans-1303
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Join`](selectable.html#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    - 生成的对象类型'
- en: '[PRE242]'
  id: totrans-1304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE242]'
- en: Return the ‘key’ for this [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table").
  id: totrans-1305
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")的‘key’。
- en: This value is used as the dictionary key within the [`MetaData.tables`](#sqlalchemy.schema.MetaData.tables
    "sqlalchemy.schema.MetaData.tables") collection. It is typically the same as that
    of `Table.name` for a table with no [`Table.schema`](#sqlalchemy.schema.Table.schema
    "sqlalchemy.schema.Table.schema") set; otherwise it is typically of the form `schemaname.tablename`.
  id: totrans-1306
  prefs: []
  type: TYPE_NORMAL
  zh: 此值用作[`MetaData.tables`](#sqlalchemy.schema.MetaData.tables "sqlalchemy.schema.MetaData.tables")集合中的字典键。对于没有设置[`Table.schema`](#sqlalchemy.schema.Table.schema
    "sqlalchemy.schema.Table.schema")的表，通常与`Table.name`相同；否则，通常为`schemaname.tablename`形式。
- en: '[PRE243]'
  id: totrans-1307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE243]'
- en: '*inherited from the* [`DialectKWArgs.kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.kwargs
    "sqlalchemy.sql.base.DialectKWArgs.kwargs") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-1308
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs.kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.kwargs
    "sqlalchemy.sql.base.DialectKWArgs.kwargs") *属性的* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
- en: A synonym for [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs").
  id: totrans-1309
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs")的同义词。'
- en: '[PRE244]'
  id: totrans-1310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE244]'
- en: '*inherited from the* [`Selectable.lateral()`](selectable.html#sqlalchemy.sql.expression.Selectable.lateral
    "sqlalchemy.sql.expression.Selectable.lateral") *method of* [`Selectable`](selectable.html#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
  id: totrans-1311
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Selectable.lateral()`](selectable.html#sqlalchemy.sql.expression.Selectable.lateral
    "sqlalchemy.sql.expression.Selectable.lateral") *方法的* [`Selectable`](selectable.html#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
- en: Return a LATERAL alias of this [`Selectable`](selectable.html#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable").
  id: totrans-1312
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此[`Selectable`](selectable.html#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable")的LATERAL别名。
- en: The return value is the [`Lateral`](selectable.html#sqlalchemy.sql.expression.Lateral
    "sqlalchemy.sql.expression.Lateral") construct also provided by the top-level
    [`lateral()`](selectable.html#sqlalchemy.sql.expression.lateral "sqlalchemy.sql.expression.lateral")
    function.
  id: totrans-1313
  prefs: []
  type: TYPE_NORMAL
  zh: 返回值是[`Lateral`](selectable.html#sqlalchemy.sql.expression.Lateral "sqlalchemy.sql.expression.Lateral")构造，也由顶级[`lateral()`](selectable.html#sqlalchemy.sql.expression.lateral
    "sqlalchemy.sql.expression.lateral")函数提供。
- en: See also
  id: totrans-1314
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[LATERAL correlation](../tutorial/data_select.html#tutorial-lateral-correlation)
    - overview of usage.'
  id: totrans-1315
  prefs: []
  type: TYPE_NORMAL
  zh: '[LATERAL correlation](../tutorial/data_select.html#tutorial-lateral-correlation)
    - 使用概述。'
- en: '[PRE245]'
  id: totrans-1316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE245]'
- en: '*inherited from the* [`FromClause.outerjoin()`](selectable.html#sqlalchemy.sql.expression.FromClause.outerjoin
    "sqlalchemy.sql.expression.FromClause.outerjoin") *method of* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  id: totrans-1317
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FromClause.outerjoin()`](selectable.html#sqlalchemy.sql.expression.FromClause.outerjoin
    "sqlalchemy.sql.expression.FromClause.outerjoin") *方法的* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
- en: Return a [`Join`](selectable.html#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    from this [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") to another `FromClause`, with the “isouter”
    flag set to True.
  id: totrans-1318
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个[`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")返回到另一个
    `FromClause` 的 [`Join`](selectable.html#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")，将“isouter”标志设置为
    True。
- en: 'E.g.:'
  id: totrans-1319
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE246]'
  id: totrans-1320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE246]'
- en: 'The above is equivalent to:'
  id: totrans-1321
  prefs: []
  type: TYPE_NORMAL
  zh: 上述等价于：
- en: '[PRE247]'
  id: totrans-1322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE247]'
- en: 'Parameters:'
  id: totrans-1323
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`right` – the right side of the join; this is any [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") object such as a [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object, and may also be a selectable-compatible object
    such as an ORM-mapped class.'
  id: totrans-1324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`right` – 连接的右侧；这是任何 [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") 对象，如 [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 对象，也可以是一个可选择兼容对象，如 ORM 映射类。'
- en: '`onclause` – a SQL expression representing the ON clause of the join. If left
    at `None`, [`FromClause.join()`](selectable.html#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join") will attempt to join the two tables
    based on a foreign key relationship.'
  id: totrans-1325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onclause` – 表示连接的 ON 子句的 SQL 表达式。如果保持为 `None`，[`FromClause.join()`](selectable.html#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join") 将尝试基于外键关系连接两个表。'
- en: '`full` – if True, render a FULL OUTER JOIN, instead of LEFT OUTER JOIN.'
  id: totrans-1326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`full` – 如果为 True，则渲染一个 FULL OUTER JOIN，而不是 LEFT OUTER JOIN。'
- en: See also
  id: totrans-1327
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`FromClause.join()`](selectable.html#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join")'
  id: totrans-1328
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FromClause.join()`](selectable.html#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join")'
- en: '[`Join`](selectable.html#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")'
  id: totrans-1329
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Join`](selectable.html#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")'
- en: '[PRE248]'
  id: totrans-1330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE248]'
- en: '*inherited from the* `Immutable.params()` *method of* `Immutable`'
  id: totrans-1331
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `Immutable.params()` *方法的* `Immutable`'
- en: Return a copy with [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") elements replaced.
  id: totrans-1332
  prefs: []
  type: TYPE_NORMAL
  zh: 返回带有 [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam "sqlalchemy.sql.expression.bindparam")
    元素替换的副本。
- en: 'Returns a copy of this ClauseElement with [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") elements replaced with values taken from
    the given dictionary:'
  id: totrans-1333
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此 ClauseElement 的副本，其中的 [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") 元素替换为给定字典中取出的值：
- en: '[PRE249]'
  id: totrans-1334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE249]'
- en: '[PRE250]'
  id: totrans-1335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE250]'
- en: '*inherited from the* [`FromClause.primary_key`](selectable.html#sqlalchemy.sql.expression.FromClause.primary_key
    "sqlalchemy.sql.expression.FromClause.primary_key") *attribute of* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  id: totrans-1336
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FromClause.primary_key`](selectable.html#sqlalchemy.sql.expression.FromClause.primary_key
    "sqlalchemy.sql.expression.FromClause.primary_key") *属性的* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
- en: Return the iterable collection of [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    objects which comprise the primary key of this `_selectable.FromClause`.
  id: totrans-1337
  prefs: []
  type: TYPE_NORMAL
  zh: 返回这个 `_selectable.FromClause` 的主键组成的 [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    对象的可迭代集合。
- en: For a [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") object,
    this collection is represented by the [`PrimaryKeyConstraint`](constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") which itself is an iterable collection
    of [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column") objects.
  id: totrans-1338
  prefs: []
  type: TYPE_NORMAL
  zh: 对于[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象，此集合由[`PrimaryKeyConstraint`](constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint")表示，它本身是一个[`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象的可迭代集合。
- en: '[PRE251]'
  id: totrans-1339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE251]'
- en: '*inherited from the* [`Selectable.replace_selectable()`](selectable.html#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") *method of* [`Selectable`](selectable.html#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
  id: totrans-1340
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Selectable.replace_selectable()`](selectable.html#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") *方法的* [`Selectable`](selectable.html#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
- en: Replace all occurrences of [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") ‘old’ with the given [`Alias`](selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") object, returning a copy of this [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-1341
  prefs: []
  type: TYPE_NORMAL
  zh: 使用给定的[`Alias`](selectable.html#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")对象替换所有出现的[`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") ‘old’，返回此[`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")的副本。
- en: 'Deprecated since version 1.4: The [`Selectable.replace_selectable()`](selectable.html#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") method is deprecated,
    and will be removed in a future release. Similar functionality is available via
    the sqlalchemy.sql.visitors module.'
  id: totrans-1342
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.4起已弃用：[`Selectable.replace_selectable()`](selectable.html#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable")方法已弃用，并将在将来的发布中删除。类似的功能可通过sqlalchemy.sql.visitors模块获得。
- en: '[PRE252]'
  id: totrans-1343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE252]'
- en: '*inherited from the* [`FromClause.schema`](selectable.html#sqlalchemy.sql.expression.FromClause.schema
    "sqlalchemy.sql.expression.FromClause.schema") *attribute of* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  id: totrans-1344
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FromClause.schema`](selectable.html#sqlalchemy.sql.expression.FromClause.schema
    "sqlalchemy.sql.expression.FromClause.schema") *属性的* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
- en: Define the ‘schema’ attribute for this [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-1345
  prefs: []
  type: TYPE_NORMAL
  zh: 为此[`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")定义‘schema’属性。
- en: This is typically `None` for most objects except that of [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), where it is taken as the value of the [`Table.schema`](#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table") argument.
  id: totrans-1346
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大多数对象，这通常是`None`，除了[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")的情况，其中它被视为[`Table.schema`](#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table")参数的值。
- en: '[PRE253]'
  id: totrans-1347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE253]'
- en: '*inherited from the* [`FromClause.select()`](selectable.html#sqlalchemy.sql.expression.FromClause.select
    "sqlalchemy.sql.expression.FromClause.select") *method of* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  id: totrans-1348
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FromClause.select()`](selectable.html#sqlalchemy.sql.expression.FromClause.select
    "sqlalchemy.sql.expression.FromClause.select") *方法的* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
- en: Return a SELECT of this [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-1349
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此[`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")的SELECT。
- en: 'e.g.:'
  id: totrans-1350
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE254]'
  id: totrans-1351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE254]'
- en: See also
  id: totrans-1352
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`select()`](selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    - general purpose method which allows for arbitrary column lists.'
  id: totrans-1353
  prefs: []
  type: TYPE_NORMAL
  zh: '[`select()`](selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    - 允许任意列列表的通用方法。'
- en: '[PRE255]'
  id: totrans-1354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE255]'
- en: '*inherited from the* [`ClauseElement.self_group()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.self_group
    "sqlalchemy.sql.expression.ClauseElement.self_group") *method of* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
  id: totrans-1355
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ClauseElement.self_group()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.self_group
    "sqlalchemy.sql.expression.ClauseElement.self_group") *方法的* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
- en: Apply a ‘grouping’ to this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  id: totrans-1356
  prefs: []
  type: TYPE_NORMAL
  zh: 对这个 [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") 进行“分组”。
- en: This method is overridden by subclasses to return a “grouping” construct, i.e.
    parenthesis. In particular it’s used by “binary” expressions to provide a grouping
    around themselves when placed into a larger expression, as well as by [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs when placed into the FROM clause
    of another [`select()`](selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select").
    (Note that subqueries should be normally created using the [`Select.alias()`](selectable.html#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") method, as many platforms require nested
    SELECT statements to be named).
  id: totrans-1357
  prefs: []
  type: TYPE_NORMAL
  zh: 子类将重写此方法以返回一个“分组”构造，即括号。特别是它被“二进制”表达式用于在放置到更大表达式中时提供自身周围的分组，以及被放置到另一个 [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 的 FROM 子句中的 [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造使用。（请注意，通常应使用 [`Select.alias()`](selectable.html#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") 方法创建子查询，因为许多平台要求嵌套的 SELECT 语句有名称）。
- en: As expressions are composed together, the application of [`self_group()`](#sqlalchemy.schema.Table.self_group
    "sqlalchemy.schema.Table.self_group") is automatic - end-user code should never
    need to use this method directly. Note that SQLAlchemy’s clause constructs take
    operator precedence into account - so parenthesis might not be needed, for example,
    in an expression like `x OR (y AND z)` - AND takes precedence over OR.
  id: totrans-1358
  prefs: []
  type: TYPE_NORMAL
  zh: 随着表达式的组合，[`self_group()`](#sqlalchemy.schema.Table.self_group "sqlalchemy.schema.Table.self_group")
    的应用是自动的 - 最终用户代码不应直接使用此方法。请注意，SQLAlchemy 的子句构造会考虑运算符优先级 - 因此，例如在表达式 `x OR (y AND
    z)` 中可能不需要括号 - AND 的优先级高于 OR。
- en: The base [`self_group()`](#sqlalchemy.schema.Table.self_group "sqlalchemy.schema.Table.self_group")
    method of [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") just returns self.
  id: totrans-1359
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement "sqlalchemy.sql.expression.ClauseElement")
    的基本方法 [`self_group()`](#sqlalchemy.schema.Table.self_group "sqlalchemy.schema.Table.self_group")
    只是返回自身。'
- en: '[PRE256]'
  id: totrans-1360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE256]'
- en: '*inherited from the* `NamedFromClause.table_valued()` *method of* `NamedFromClause`'
  id: totrans-1361
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `NamedFromClause.table_valued()` *方法的* `NamedFromClause`'
- en: Return a `TableValuedColumn` object for this [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-1362
  prefs: []
  type: TYPE_NORMAL
  zh: 为这个 [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    返回一个 `TableValuedColumn` 对象。
- en: A `TableValuedColumn` is a [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") that represents a complete row in a
    table. Support for this construct is backend dependent, and is supported in various
    forms by backends such as PostgreSQL, Oracle and SQL Server.
  id: totrans-1363
  prefs: []
  type: TYPE_NORMAL
  zh: '`TableValuedColumn` 是代表表中完整行的 [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")。对于这个构造的支持取决于后端，各后端以不同形式支持，如 PostgreSQL、Oracle
    和 SQL Server。'
- en: 'E.g.:'
  id: totrans-1364
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE257]'
  id: totrans-1365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE257]'
- en: New in version 1.4.0b2.
  id: totrans-1366
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4.0b2 中的新功能。
- en: See also
  id: totrans-1367
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Working with SQL Functions](../tutorial/data_select.html#tutorial-functions)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-1368
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 SQL 函数](../tutorial/data_select.html#tutorial-functions) - 在 [SQLAlchemy
    统一教程](../tutorial/index.html#unified-tutorial) 中'
- en: '[PRE258]'
  id: totrans-1369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE258]'
- en: '*inherited from the* [`FromClause.tablesample()`](selectable.html#sqlalchemy.sql.expression.FromClause.tablesample
    "sqlalchemy.sql.expression.FromClause.tablesample") *method of* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  id: totrans-1370
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FromClause.tablesample()`](selectable.html#sqlalchemy.sql.expression.FromClause.tablesample
    "sqlalchemy.sql.expression.FromClause.tablesample") *方法的* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
- en: Return a TABLESAMPLE alias of this [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-1371
  prefs: []
  type: TYPE_NORMAL
  zh: 返回这个 [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    的 TABLESAMPLE 别名。
- en: The return value is the [`TableSample`](selectable.html#sqlalchemy.sql.expression.TableSample
    "sqlalchemy.sql.expression.TableSample") construct also provided by the top-level
    [`tablesample()`](selectable.html#sqlalchemy.sql.expression.tablesample "sqlalchemy.sql.expression.tablesample")
    function.
  id: totrans-1372
  prefs: []
  type: TYPE_NORMAL
  zh: 返回值是由顶级[`tablesample()`](selectable.html#sqlalchemy.sql.expression.tablesample
    "sqlalchemy.sql.expression.tablesample")函数提供的[`TableSample`](selectable.html#sqlalchemy.sql.expression.TableSample
    "sqlalchemy.sql.expression.TableSample")构造。
- en: See also
  id: totrans-1373
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`tablesample()`](selectable.html#sqlalchemy.sql.expression.tablesample "sqlalchemy.sql.expression.tablesample")
    - usage guidelines and parameters'
  id: totrans-1374
  prefs: []
  type: TYPE_NORMAL
  zh: '[`tablesample()`](selectable.html#sqlalchemy.sql.expression.tablesample "sqlalchemy.sql.expression.tablesample")
    - 用法指南和参数'
- en: '[PRE259]'
  id: totrans-1375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE259]'
- en: Return a copy of this [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    associated with a different [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData").
  id: totrans-1376
  prefs: []
  type: TYPE_NORMAL
  zh: 返回与不同[`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")相关联的此[`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")的副本。
- en: 'E.g.:'
  id: totrans-1377
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE260]'
  id: totrans-1378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE260]'
- en: 'Changed in version 1.4: The [`Table.to_metadata()`](#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata") function was renamed from [`Table.tometadata()`](#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata").'
  id: totrans-1379
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改：[`Table.to_metadata()`](#sqlalchemy.schema.Table.to_metadata "sqlalchemy.schema.Table.to_metadata")函数的名称已从[`Table.tometadata()`](#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata")更改。
- en: 'Parameters:'
  id: totrans-1380
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`metadata` – Target [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    object, into which the new [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object will be created.'
  id: totrans-1381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`metadata` – 目标[`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")对象，新的[`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象将被创建到其中。'
- en: '`schema` –'
  id: totrans-1382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` –'
- en: 'optional string name indicating the target schema. Defaults to the special
    symbol [`RETAIN_SCHEMA`](#sqlalchemy.schema.SchemaConst.RETAIN_SCHEMA "sqlalchemy.schema.SchemaConst.RETAIN_SCHEMA")
    which indicates that no change to the schema name should be made in the new [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"). If set to a string name, the new [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") will have this new name as the `.schema`. If set to
    `None`, the schema will be set to that of the schema set on the target [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData"), which is typically `None` as well, unless set explicitly:'
  id: totrans-1383
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的字符串名称，指示目标模式。默认为特殊符号[`RETAIN_SCHEMA`](#sqlalchemy.schema.SchemaConst.RETAIN_SCHEMA
    "sqlalchemy.schema.SchemaConst.RETAIN_SCHEMA")，表示在新的[`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")中不应更改模式名称。如果设置为字符串名称，则新的[`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")将具有此新名称作为`.schema`。如果设置为`None`，则模式将设置为在目标[`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")上设置的模式，该模式通常也为`None`，除非明确设置：
- en: '[PRE261]'
  id: totrans-1384
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE261]'
- en: '`referred_schema_fn` –'
  id: totrans-1385
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`referred_schema_fn` –'
- en: optional callable which can be supplied in order to provide for the schema name
    that should be assigned to the referenced table of a [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint"). The callable accepts this parent [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), the target schema that we are changing to, the [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") object, and the existing “target schema”
    of that constraint. The function should return the string schema name that should
    be applied. To reset the schema to “none”, return the symbol `BLANK_SCHEMA`. To
    effect no change, return `None` or `RETAIN_SCHEMA`.
  id: totrans-1386
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的可调用函数，用于提供应分配给[`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")的引用表的模式名称。该可调用函数接受此父[`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")、我们要更改的目标模式、[`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")对象和该约束的现有“目标模式”。该函数应返回应应用的字符串模式名称。要重置模式为“none”，请返回符号`BLANK_SCHEMA`。要不进行更改，请返回`None`或`RETAIN_SCHEMA`。
- en: 'Changed in version 1.4.33: The `referred_schema_fn` function may return the
    `BLANK_SCHEMA` or `RETAIN_SCHEMA` symbols.'
  id: totrans-1387
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本1.4.33开始更改：`referred_schema_fn`函数可能返回`BLANK_SCHEMA`或`RETAIN_SCHEMA`符号。
- en: 'E.g.:'
  id: totrans-1388
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE262]'
  id: totrans-1389
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE262]'
- en: '`name` – optional string name indicating the target table name. If not specified
    or None, the table name is retained. This allows a [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") to be copied to the same [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") target with a new name.'
  id: totrans-1390
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 可选的字符串名称，指示目标表名称。如果未指定或为 None，则保留表名称。这允许将 [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 复制到具有新名称的相同 [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") 目标。'
- en: '[PRE263]'
  id: totrans-1391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE263]'
- en: Return a copy of this [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    associated with a different [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData").
  id: totrans-1392
  prefs: []
  type: TYPE_NORMAL
  zh: 返回与不同 [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    关联的此 [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") 的副本。
- en: 'Deprecated since version 1.4: [`Table.tometadata()`](#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata") is renamed to [`Table.to_metadata()`](#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata")'
  id: totrans-1393
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.4 弃用： [`Table.tometadata()`](#sqlalchemy.schema.Table.tometadata "sqlalchemy.schema.Table.tometadata")
    已重命名为 [`Table.to_metadata()`](#sqlalchemy.schema.Table.to_metadata "sqlalchemy.schema.Table.to_metadata")
- en: See [`Table.to_metadata()`](#sqlalchemy.schema.Table.to_metadata "sqlalchemy.schema.Table.to_metadata")
    for a full description.
  id: totrans-1394
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 [`Table.to_metadata()`](#sqlalchemy.schema.Table.to_metadata "sqlalchemy.schema.Table.to_metadata")
    获取完整描述。
- en: '[PRE264]'
  id: totrans-1395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE264]'
- en: '*inherited from the* `Immutable.unique_params()` *method of* `Immutable`'
  id: totrans-1396
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `Immutable.unique_params()` *方法的* `Immutable`'
- en: Return a copy with [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") elements replaced.
  id: totrans-1397
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个副本，其中 [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") 元素已替换。
- en: Same functionality as [`ClauseElement.params()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.params
    "sqlalchemy.sql.expression.ClauseElement.params"), except adds unique=True to
    affected bind parameters so that multiple statements can be used.
  id: totrans-1398
  prefs: []
  type: TYPE_NORMAL
  zh: 与 [`ClauseElement.params()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.params
    "sqlalchemy.sql.expression.ClauseElement.params") 相同的功能，只是将 unique=True 添加到受影响的绑定参数，以便可以使用多个语句。
- en: '[PRE265]'
  id: totrans-1399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE265]'
- en: '*inherited from the* [`TableClause.update()`](selectable.html#sqlalchemy.sql.expression.TableClause.update
    "sqlalchemy.sql.expression.TableClause.update") *method of* [`TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause")'
  id: totrans-1400
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`TableClause.update()`](selectable.html#sqlalchemy.sql.expression.TableClause.update
    "sqlalchemy.sql.expression.TableClause.update") *方法的* [`TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause")'
- en: Generate an [`update()`](dml.html#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update")
    construct against this [`TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause").
  id: totrans-1401
  prefs: []
  type: TYPE_NORMAL
  zh: 对此 [`TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause "sqlalchemy.sql.expression.TableClause")
    生成一个 [`update()`](dml.html#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update")
    构造。
- en: 'E.g.:'
  id: totrans-1402
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE266]'
  id: totrans-1403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE266]'
- en: See [`update()`](dml.html#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update")
    for argument and usage information.
  id: totrans-1404
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 [`update()`](dml.html#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update")
    获取参数和使用信息。
- en: '## Accessing Tables and Columns'
  id: totrans-1405
  prefs: []
  type: TYPE_NORMAL
  zh: '## 访问表和列'
- en: 'The [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    object contains all of the schema constructs we’ve associated with it. It supports
    a few methods of accessing these table objects, such as the `sorted_tables` accessor
    which returns a list of each [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object in order of foreign key dependency (that is, each table is preceded by
    all tables which it references):'
  id: totrans-1406
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData") 对象包含我们与之关联的所有模式构造。它支持几种访问这些表对象的方法，例如
    `sorted_tables` 访问器，它以外键依赖关系的顺序返回每个 [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    对象的列表（也就是说，每个表之前都有它引用的所有表）：'
- en: '[PRE267]'
  id: totrans-1407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE267]'
- en: 'In most cases, individual [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects have been explicitly declared, and these objects are typically accessed
    directly as module-level variables in an application. Once a [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") has been defined, it has a full set of accessors which
    allow inspection of its properties. Given the following [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") definition:'
  id: totrans-1408
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，单独的 [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") 对象已被明确声明，并且这些对象通常作为应用程序中的模块级变量直接访问。一旦定义了
    [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")，它就有了一整套访问器，允许检查其属性。给定以下
    [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") 定义：
- en: '[PRE268]'
  id: totrans-1409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE268]'
- en: 'Note the [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    object used in this table - this construct defines a reference to a remote table,
    and is fully described in [Defining Foreign Keys](constraints.html#metadata-foreignkeys).
    Methods of accessing information about this table include:'
  id: totrans-1410
  prefs: []
  type: TYPE_NORMAL
  zh: 注意此表中使用的 [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    对象 - 此构造定义了对远程表的引用，在[定义外键](constraints.html#metadata-foreignkeys)中完全描述了方法访问关于此表的信息包括：
- en: '[PRE269]'
  id: totrans-1411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE269]'
- en: Tip
  id: totrans-1412
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The [`FromClause.c`](selectable.html#sqlalchemy.sql.expression.FromClause.c
    "sqlalchemy.sql.expression.FromClause.c") collection, synonymous with the [`FromClause.columns`](selectable.html#sqlalchemy.sql.expression.FromClause.columns
    "sqlalchemy.sql.expression.FromClause.columns") collection, is an instance of
    [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection"), which provides a **dictionary-like
    interface** to the collection of columns. Names are ordinarily accessed like attribute
    names, e.g. `employees.c.employee_name`. However for special names with spaces
    or those that match the names of dictionary methods such as [`ColumnCollection.keys()`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection.keys
    "sqlalchemy.sql.expression.ColumnCollection.keys") or [`ColumnCollection.values()`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection.values
    "sqlalchemy.sql.expression.ColumnCollection.values"), indexed access must be used,
    such as `employees.c['values']` or `employees.c["some column"]`. See [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") for further information.
  id: totrans-1413
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FromClause.c`](selectable.html#sqlalchemy.sql.expression.FromClause.c "sqlalchemy.sql.expression.FromClause.c")
    集合，与[`FromClause.columns`](selectable.html#sqlalchemy.sql.expression.FromClause.columns
    "sqlalchemy.sql.expression.FromClause.columns") 集合同义，是[`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") 的一个实例，它提供了**类似字典的接口**来访问列集合。通常可以像访问属性名一样访问名称，例如`employees.c.employee_name`。但是对于具有空格的特殊名称或与字典方法名称匹配的名称，例如[`ColumnCollection.keys()`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection.keys
    "sqlalchemy.sql.expression.ColumnCollection.keys") 或 [`ColumnCollection.values()`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection.values
    "sqlalchemy.sql.expression.ColumnCollection.values")，必须使用索引访问，例如`employees.c[''values'']`
    或 `employees.c["some column"]`。有关详细信息，请参阅[`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")。'
- en: Creating and Dropping Database Tables
  id: totrans-1414
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建和删除数据库表
- en: Once you’ve defined some [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects, assuming you’re working with a brand new database one thing you might
    want to do is issue CREATE statements for those tables and their related constructs
    (as an aside, it’s also quite possible that you *don’t* want to do this, if you
    already have some preferred methodology such as tools included with your database
    or an existing scripting system - if that’s the case, feel free to skip this section
    - SQLAlchemy has no requirement that it be used to create your tables).
  id: totrans-1415
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您定义了一些 [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") 对象，假设您正在使用全新的数据库，您可能希望为这些表及其相关构造发出
    CREATE 语句（作为一种附带说明，如果您已经有一些首选方法，例如数据库中包含的工具或现有的脚本系统 - 如果是这种情况，请随时跳过此部分 - SQLAlchemy
    不要求使用它来创建您的表）。
- en: 'The usual way to issue CREATE is to use [`create_all()`](#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") on the [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object. This method will issue queries that first
    check for the existence of each individual table, and if not found will issue
    the CREATE statements:'
  id: totrans-1416
  prefs: []
  type: TYPE_NORMAL
  zh: 发出 CREATE 语句的常规方式是在 [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    对象上使用 [`create_all()`](#sqlalchemy.schema.MetaData.create_all "sqlalchemy.schema.MetaData.create_all")
    方法。此方法将发出查询，首先检查每个单独表的存在，如果未找到将发出 CREATE 语句：
- en: '[PRE270]'
  id: totrans-1417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE270]'
- en: '[`create_all()`](#sqlalchemy.schema.MetaData.create_all "sqlalchemy.schema.MetaData.create_all")
    creates foreign key constraints between tables usually inline with the table definition
    itself, and for this reason it also generates the tables in order of their dependency.
    There are options to change this behavior such that `ALTER TABLE` is used instead.'
  id: totrans-1418
  prefs: []
  type: TYPE_NORMAL
  zh: '[`create_all()`](#sqlalchemy.schema.MetaData.create_all "sqlalchemy.schema.MetaData.create_all")
    在表定义本身之间创建外键约束，通常会生成表的依赖顺序。有更改此行为的选项，使其使用`ALTER TABLE`。'
- en: Dropping all tables is similarly achieved using the [`drop_all()`](#sqlalchemy.schema.MetaData.drop_all
    "sqlalchemy.schema.MetaData.drop_all") method. This method does the exact opposite
    of [`create_all()`](#sqlalchemy.schema.MetaData.create_all "sqlalchemy.schema.MetaData.create_all")
    - the presence of each table is checked first, and tables are dropped in reverse
    order of dependency.
  id: totrans-1419
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，可以使用[`drop_all()`](#sqlalchemy.schema.MetaData.drop_all "sqlalchemy.schema.MetaData.drop_all")方法来删除所有表。此方法与[`create_all()`](#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all")完全相反-首先检查每个表的存在，并按依赖关系的相反顺序删除表。
- en: 'Creating and dropping individual tables can be done via the `create()` and
    `drop()` methods of [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table").
    These methods by default issue the CREATE or DROP regardless of the table being
    present:'
  id: totrans-1420
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")的`create()`和`drop()`方法来创建和删除单个表。这些方法默认情况下会无论表是否存在都发出CREATE或DROP：
- en: '[PRE271]'
  id: totrans-1421
  prefs: []
  type: TYPE_PRE
  zh: '[PRE271]'
- en: '`drop()` method:'
  id: totrans-1422
  prefs: []
  type: TYPE_NORMAL
  zh: '`drop()`方法：'
- en: '[PRE272]'
  id: totrans-1423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE272]'
- en: 'To enable the “check first for the table existing” logic, add the `checkfirst=True`
    argument to `create()` or `drop()`:'
  id: totrans-1424
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用“首先检查表是否存在”的逻辑，需要在`create()`或`drop()`中添加`checkfirst=True`参数：
- en: '[PRE273]'
  id: totrans-1425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE273]'
- en: '## Altering Database Objects through Migrations'
  id: totrans-1426
  prefs: []
  type: TYPE_NORMAL
  zh: '## 通过迁移修改数据库对象'
- en: While SQLAlchemy directly supports emitting CREATE and DROP statements for schema
    constructs, the ability to alter those constructs, usually via the ALTER statement
    as well as other database-specific constructs, is outside of the scope of SQLAlchemy
    itself. While it’s easy enough to emit ALTER statements and similar by hand, such
    as by passing a [`text()`](sqlelement.html#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")
    construct to [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") or by using the [`DDL`](ddl.html#sqlalchemy.schema.DDL
    "sqlalchemy.schema.DDL") construct, it’s a common practice to automate the maintenance
    of database schemas in relation to application code using schema migration tools.
  id: totrans-1427
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然SQLAlchemy直接支持发出用于模式构造的CREATE和DROP语句，但是通过ALTER语句以及其他特定于数据库的构造修改这些构造的能力通常不在SQLAlchemy本身的范围之内。尽管手工发出ALTER语句等很容易，比如通过将[`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")构造传递给[`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")或使用[`DDL`](ddl.html#sqlalchemy.schema.DDL
    "sqlalchemy.schema.DDL")构造，但是使用模式迁移工具自动维护与应用程序代码相关的数据库模式是一种常见做法。
- en: The SQLAlchemy project offers the [Alembic](https://alembic.sqlalchemy.org)
    migration tool for this purpose. Alembic features a highly customizable environment
    and a minimalistic usage pattern, supporting such features as transactional DDL,
    automatic generation of “candidate” migrations, an “offline” mode which generates
    SQL scripts, and support for branch resolution.
  id: totrans-1428
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy项目提供了[迁移工具Alembic](https://alembic.sqlalchemy.org)。Alembic具有高度可定制的环境和简约的使用模式，支持诸如事务性DDL、自动生成“候选”迁移、生成SQL脚本的“离线”模式以及分支解决支持等功能。
- en: Alembic supersedes the [SQLAlchemy-Migrate](https://github.com/openstack/sqlalchemy-migrate)
    project, which is the original migration tool for SQLAlchemy and is now considered
    legacy.
  id: totrans-1429
  prefs: []
  type: TYPE_NORMAL
  zh: Alembic取代了[SQLAlchemy-Migrate](https://github.com/openstack/sqlalchemy-migrate)项目，后者是SQLAlchemy的最初迁移工具，现在已被视为过时。
- en: '## Specifying the Schema Name'
  id: totrans-1430
  prefs: []
  type: TYPE_NORMAL
  zh: '## 指定模式名称'
- en: Most databases support the concept of multiple “schemas” - namespaces that refer
    to alternate sets of tables and other constructs. The server-side geometry of
    a “schema” takes many forms, including names of “schemas” under the scope of a
    particular database (e.g. PostgreSQL schemas), named sibling databases (e.g. MySQL
    / MariaDB access to other databases on the same server), as well as other concepts
    like tables owned by other usernames (Oracle, SQL Server) or even names that refer
    to alternate database files (SQLite ATTACH) or remote servers (Oracle DBLINK with
    synonyms).
  id: totrans-1431
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数数据库支持多个“模式”的概念-指代替代表集和其他构造的命名空间。 “模式”的服务器端几何形状采用多种形式，包括特定数据库范围内的“模式”名称（例如，PostgreSQL模式），命名的同级数据库（例如，MySQL
    / MariaDB访问同一服务器上的其他数据库），以及其他概念，如由其他用户名拥有的表（Oracle，SQL Server）甚至是指代替代数据库文件（SQLite
    ATTACH）或远程服务器（带有同义词的Oracle DBLINK）的名称。
- en: What all of the above approaches have (mostly) in common is that there’s a way
    of referencing this alternate set of tables using a string name. SQLAlchemy refers
    to this name as the **schema name**. Within SQLAlchemy, this is nothing more than
    a string name which is associated with a [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object, and is then rendered into SQL statements in a manner appropriate to the
    target database such that the table is referenced in its remote “schema”, whatever
    mechanism that is on the target database.
  id: totrans-1432
  prefs: []
  type: TYPE_NORMAL
  zh: 上述所有方法（大多数）的共同之处是，有一种引用此备选表集的方式，使用字符串名称。SQLAlchemy将此名称称为**模式名称**。在SQLAlchemy中，这只是一个与[`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象关联的字符串名称，然后以适合于目标数据库的方式呈现为SQL语句，从而在目标数据库上引用表时使用其远程“模式”。
- en: The “schema” name may be associated directly with a [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") using the [`Table.schema`](#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table") argument; when using the ORM with [declarative table](../orm/declarative_tables.html)
    configuration, the parameter is passed using the `__table_args__` parameter dictionary.
  id: totrans-1433
  prefs: []
  type: TYPE_NORMAL
  zh: “模式”名称可以直接与[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")关联，使用[`Table.schema`](#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table")参数；当使用ORM进行[声明性表](../orm/declarative_tables.html)配置时，该参数将通过`__table_args__`参数字典传递。
- en: The “schema” name may also be associated with the [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object where it will take effect automatically for
    all [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") objects associated
    with that [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    that don’t otherwise specify their own name. Finally, SQLAlchemy also supports
    a “dynamic” schema name system that is often used for multi-tenant applications
    such that a single set of [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    metadata may refer to a dynamically configured set of schema names on a per-connection
    or per-statement basis.
  id: totrans-1434
  prefs: []
  type: TYPE_NORMAL
  zh: “模式”名称也可以与[`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")对象关联，在此情况下，它将自动影响所有与该[`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")关联的[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象，这些对象不会另外指定自己的名称。最后，SQLAlchemy还支持一个“动态”模式名称系统，通常用于多租户应用程序，以便单个[`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")元数据集可以引用每个连接或语句基础上动态配置的模式名称集。
- en: See also
  id: totrans-1435
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Explicit Schema Name with Declarative Table](../orm/declarative_tables.html#orm-declarative-table-schema-name)
    - schema name specification when using the ORM [declarative table](../orm/declarative_tables.html)
    configuration'
  id: totrans-1436
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用声明性表的显式模式名称](../orm/declarative_tables.html#orm-declarative-table-schema-name)
    - 使用ORM[声明性表](../orm/declarative_tables.html)配置时的模式名称规范'
- en: 'The most basic example is that of the [`Table.schema`](#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table") argument using a Core [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object as follows:'
  id: totrans-1437
  prefs: []
  type: TYPE_NORMAL
  zh: 最基本的示例是使用Core [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象的[`Table.schema`](#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table")参数，如下所示：
- en: '[PRE274]'
  id: totrans-1438
  prefs: []
  type: TYPE_PRE
  zh: '[PRE274]'
- en: 'SQL that is rendered using this [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table"),
    such as the SELECT statement below, will explicitly qualify the table name `financial_info`
    with the `remote_banks` schema name:'
  id: totrans-1439
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")渲染的SQL，比如下面的SELECT语句，将明确限定表名`financial_info`与`remote_banks`模式名一起使用：
- en: '[PRE275]'
  id: totrans-1440
  prefs: []
  type: TYPE_PRE
  zh: '[PRE275]'
- en: 'When a [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") object
    is declared with an explicit schema name, it is stored in the internal [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") namespace using the combination of the schema and
    table name. We can view this in the [`MetaData.tables`](#sqlalchemy.schema.MetaData.tables
    "sqlalchemy.schema.MetaData.tables") collection by searching for the key `''remote_banks.financial_info''`:'
  id: totrans-1441
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用显式模式名称声明[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象时，它将使用模式和表名称的组合存储在内部[`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")命名空间中。我们可以在[`MetaData.tables`](#sqlalchemy.schema.MetaData.tables
    "sqlalchemy.schema.MetaData.tables")集合中查找键`'remote_banks.financial_info'`以查看这一点：
- en: '[PRE276]'
  id: totrans-1442
  prefs: []
  type: TYPE_PRE
  zh: '[PRE276]'
- en: 'This dotted name is also what must be used when referring to the table for
    use with the [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    or [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") objects, even if the referring table
    is also in that same schema:'
  id: totrans-1443
  prefs: []
  type: TYPE_NORMAL
  zh: 即使引用表时也必须使用此点名，以便与 [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") 或 [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") 对象一起使用，即使引用表也在同一个模式中：
- en: '[PRE277]'
  id: totrans-1444
  prefs: []
  type: TYPE_PRE
  zh: '[PRE277]'
- en: 'The [`Table.schema`](#sqlalchemy.schema.Table.params.schema "sqlalchemy.schema.Table")
    argument may also be used with certain dialects to indicate a multiple-token (e.g.
    dotted) path to a particular table. This is particularly important on a database
    such as Microsoft SQL Server where there are often dotted “database/owner” tokens.
    The tokens may be placed directly in the name at once, such as:'
  id: totrans-1445
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些方言中，也可以使用 [`Table.schema`](#sqlalchemy.schema.Table.params.schema "sqlalchemy.schema.Table")
    参数指定到达特定表的多令牌（例如，点分）路径。这在诸如 Microsoft SQL Server 这样的数据库上特别重要，因为通常会有点分的 “数据库/所有者”
    令牌。可以一次直接将令牌放在名称中，例如：
- en: '[PRE278]'
  id: totrans-1446
  prefs: []
  type: TYPE_PRE
  zh: '[PRE278]'
- en: See also
  id: totrans-1447
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Multipart Schema Names](../dialects/mssql.html#multipart-schema-names) - describes
    use of dotted schema names with the SQL Server dialect.'
  id: totrans-1448
  prefs: []
  type: TYPE_NORMAL
  zh: '[多部分模式名称](../dialects/mssql.html#multipart-schema-names) - 描述了在 SQL Server
    方言中使用点分模式名称的情况。'
- en: '[Reflecting Tables from Other Schemas](reflection.html#metadata-reflection-schemas)'
  id: totrans-1449
  prefs: []
  type: TYPE_NORMAL
  zh: '[从其他模式反映表](reflection.html#metadata-reflection-schemas)'
- en: '### Specifying a Default Schema Name with MetaData'
  id: totrans-1450
  prefs: []
  type: TYPE_NORMAL
  zh: '### 使用 MetaData 指定默认模式名称'
- en: 'The [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    object may also set up an explicit default option for all [`Table.schema`](#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table") parameters by passing the [`MetaData.schema`](#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData") argument to the top level [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") construct:'
  id: totrans-1451
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData") 对象也可以通过将
    [`MetaData.schema`](#sqlalchemy.schema.MetaData.params.schema "sqlalchemy.schema.MetaData")
    参数传递给顶级 [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    结构来设置所有 [`Table.schema`](#sqlalchemy.schema.Table.params.schema "sqlalchemy.schema.Table")
    参数的显式默认选项：'
- en: '[PRE279]'
  id: totrans-1452
  prefs: []
  type: TYPE_PRE
  zh: '[PRE279]'
- en: 'Above, for any [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object (or [`Sequence`](defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    object directly associated with the [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData"))
    which leaves the [`Table.schema`](#sqlalchemy.schema.Table.params.schema "sqlalchemy.schema.Table")
    parameter at its default of `None` will instead act as though the parameter were
    set to the value `"remote_banks"`. This includes that the [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") is cataloged in the [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") using the schema-qualified name, that is:'
  id: totrans-1453
  prefs: []
  type: TYPE_NORMAL
  zh: 以上，对于任何将 [`Table.schema`](#sqlalchemy.schema.Table.params.schema "sqlalchemy.schema.Table")
    参数保留在其默认值 `None` 的 [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    对象（或直接与 [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    关联的 [`Sequence`](defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    对象），将会像参数设置为值 `"remote_banks"` 一样。包括，[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    在 [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData") 中以模式限定名称进行分类，即：
- en: '[PRE280]'
  id: totrans-1454
  prefs: []
  type: TYPE_PRE
  zh: '[PRE280]'
- en: 'When using the [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") or [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") objects to refer to this table, either
    the schema-qualified name or the non-schema-qualified name may be used to refer
    to the `remote_banks.financial_info` table:'
  id: totrans-1455
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    或 [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") 对象引用此表时，可以使用模式限定名称或非模式限定名称来引用 `remote_banks.financial_info`
    表：
- en: '[PRE281]'
  id: totrans-1456
  prefs: []
  type: TYPE_PRE
  zh: '[PRE281]'
- en: 'When using a [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    object that sets [`MetaData.schema`](#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData"), a [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    that wishes to specify that it should not be schema qualified may use the special
    symbol `BLANK_SCHEMA`:'
  id: totrans-1457
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用设置了 [`MetaData.schema`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    的 [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData") 对象时，希望指定不应该被模式限定的
    [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") 可以使用特殊符号 `BLANK_SCHEMA`：
- en: '[PRE282]'
  id: totrans-1458
  prefs: []
  type: TYPE_PRE
  zh: '[PRE282]'
- en: See also
  id: totrans-1459
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`MetaData.schema`](#sqlalchemy.schema.MetaData.params.schema "sqlalchemy.schema.MetaData")  ###
    Applying Dynamic Schema Naming Conventions'
  id: totrans-1460
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MetaData.schema`](#sqlalchemy.schema.MetaData.params.schema "sqlalchemy.schema.MetaData")  ###
    应用动态模式命名约定'
- en: The names used by the [`Table.schema`](#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table") parameter may also be applied against a lookup that
    is dynamic on a per-connection or per-execution basis, so that for example in
    multi-tenant situations, each transaction or statement may be targeted at a specific
    set of schema names that change. The section [Translation of Schema Names](connections.html#schema-translating)
    describes how this feature is used.
  id: totrans-1461
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Table.schema`](#sqlalchemy.schema.Table.params.schema "sqlalchemy.schema.Table")
    参数使用的名称也可以针对每个连接或每个执行基础上的动态查找应用，因此例如在多租户情况下，每个事务或语句可以针对一组动态变化的模式名称。[模式名称的翻译](connections.html#schema-translating)
    部分描述了此功能的使用方式。'
- en: See also
  id: totrans-1462
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Translation of Schema Names](connections.html#schema-translating)  ### Setting
    a Default Schema for New Connections'
  id: totrans-1463
  prefs: []
  type: TYPE_NORMAL
  zh: '[模式名称的翻译](connections.html#schema-translating)  ### 为新连接设置默认模式'
- en: The above approaches all refer to methods of including an explicit schema-name
    within SQL statements. Database connections in fact feature the concept of a “default”
    schema, which is the name of the “schema” (or database, owner, etc.) that takes
    place if a table name is not explicitly schema-qualified. These names are usually
    configured at the login level, such as when connecting to a PostgreSQL database,
    the default “schema” is called “public”.
  id: totrans-1464
  prefs: []
  type: TYPE_NORMAL
  zh: 上述方法都是指在 SQL 语句中包含显式模式名称的方法。实际上，数据库连接具有“默认”模式的概念，这是在表名未明确指定模式的情况下发生的“模式”（或数据库，所有者等）的名称。这些名称通常在登录级别配置，例如，连接到
    PostgreSQL 数据库时，默认的“模式”称为 “public”。
- en: 'There are often cases where the default “schema” cannot be set via the login
    itself and instead would usefully be configured each time a connection is made,
    using a statement such as “SET SEARCH_PATH” on PostgreSQL or “ALTER SESSION” on
    Oracle. These approaches may be achieved by using the `PoolEvents.connect()` event,
    which allows access to the DBAPI connection when it is first created. For example,
    to set the Oracle CURRENT_SCHEMA variable to an alternate name:'
  id: totrans-1465
  prefs: []
  type: TYPE_NORMAL
  zh: 通常存在无法通过登录本身设置默认 “模式” 的情况，而是在每次建立连接时有用地配置的情况，例如在 PostgreSQL 上使用类似于 “SET SEARCH_PATH”
    的语句或在 Oracle 上使用 “ALTER SESSION”。可以通过使用 `PoolEvents.connect()` 事件来实现这些方法，该事件允许在首次创建时访问
    DBAPI 连接。例如，将 Oracle CURRENT_SCHEMA 变量设置为备用名称：
- en: '[PRE283]'
  id: totrans-1466
  prefs: []
  type: TYPE_PRE
  zh: '[PRE283]'
- en: Above, the `set_current_schema()` event handler will take place immediately
    when the above [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    first connects; as the event is “inserted” into the beginning of the handler list,
    it will also take place before the dialect’s own event handlers are run, in particular
    including the one that will determine the “default schema” for the connection.
  id: totrans-1467
  prefs: []
  type: TYPE_NORMAL
  zh: 上述 `set_current_schema()` 事件处理程序将在上述 [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 首次连接时立即发生；由于该事件被 “插入” 到处理程序列表的开头，因此它将在方言自身的事件处理程序运行之前发生，特别是包括确定连接的
    “默认模式” 的处理程序。
- en: For other databases, consult the database and/or dialect documentation for specific
    information regarding how default schemas are configured.
  id: totrans-1468
  prefs: []
  type: TYPE_NORMAL
  zh: 对于其他数据库，请参阅数据库和/或方言文档，以获取有关如何配置默认模式的具体信息。
- en: 'Changed in version 1.4.0b2: The above recipe now works without the need to
    establish additional event handlers.'
  id: totrans-1469
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4.0b2 开始更改：上述方法现在无需建立额外的事件处理程序即可工作。
- en: See also
  id: totrans-1470
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Setting Alternate Search Paths on Connect](../dialects/postgresql.html#postgresql-alternate-search-path)
    - in the [PostgreSQL](../dialects/postgresql.html) dialect documentation.'
  id: totrans-1471
  prefs: []
  type: TYPE_NORMAL
  zh: '[在连接时设置替代搜索路径](../dialects/postgresql.html#postgresql-alternate-search-path)
    - 在 [PostgreSQL](../dialects/postgresql.html) 方言文档中。'
- en: Schemas and Reflection
  id: totrans-1472
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式和反射
- en: The schema feature of SQLAlchemy interacts with the table reflection feature
    introduced at [Reflecting Database Objects](reflection.html). See the section
    [Reflecting Tables from Other Schemas](reflection.html#metadata-reflection-schemas)
    for additional details on how this works.
  id: totrans-1473
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 的模式特性与 [反射数据库对象](reflection.html) 中介绍的表反射特性相互作用。有关此工作原理的详细信息，请参阅
    [从其他模式反射表](reflection.html#metadata-reflection-schemas) 部分。
- en: '### Specifying a Default Schema Name with MetaData'
  id: totrans-1474
  prefs: []
  type: TYPE_NORMAL
  zh: '### 使用 MetaData 指定默认模式名称'
- en: 'The [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    object may also set up an explicit default option for all [`Table.schema`](#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table") parameters by passing the [`MetaData.schema`](#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData") argument to the top level [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") construct:'
  id: totrans-1475
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")对象还可以通过将[`MetaData.schema`](#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData")参数传递给顶层[`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")构造来为所有[`Table.schema`](#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table")参数设置显式默认选项：'
- en: '[PRE284]'
  id: totrans-1476
  prefs: []
  type: TYPE_PRE
  zh: '[PRE284]'
- en: 'Above, for any [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object (or [`Sequence`](defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    object directly associated with the [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData"))
    which leaves the [`Table.schema`](#sqlalchemy.schema.Table.params.schema "sqlalchemy.schema.Table")
    parameter at its default of `None` will instead act as though the parameter were
    set to the value `"remote_banks"`. This includes that the [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") is cataloged in the [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") using the schema-qualified name, that is:'
  id: totrans-1477
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象（或直接与[`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")相关联的[`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")对象），如果将[`Table.schema`](#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table")参数保留在默认值`None`，则会自动将参数视为值`"remote_banks"`。这包括[`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")在[`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")中以模式限定名称进行目录化，即：
- en: '[PRE285]'
  id: totrans-1478
  prefs: []
  type: TYPE_PRE
  zh: '[PRE285]'
- en: 'When using the [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") or [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") objects to refer to this table, either
    the schema-qualified name or the non-schema-qualified name may be used to refer
    to the `remote_banks.financial_info` table:'
  id: totrans-1479
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用[`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")或[`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")对象引用此表时，可以使用模式限定名称或非模式限定名称来引用`remote_banks.financial_info`表：
- en: '[PRE286]'
  id: totrans-1480
  prefs: []
  type: TYPE_PRE
  zh: '[PRE286]'
- en: 'When using a [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    object that sets [`MetaData.schema`](#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData"), a [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    that wishes to specify that it should not be schema qualified may use the special
    symbol `BLANK_SCHEMA`:'
  id: totrans-1481
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用设置了[`MetaData.schema`](#sqlalchemy.schema.MetaData.params.schema "sqlalchemy.schema.MetaData")的[`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")对象时，希望指定不应以模式限定方式命名的[`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")可以使用特殊符号`BLANK_SCHEMA`：
- en: '[PRE287]'
  id: totrans-1482
  prefs: []
  type: TYPE_PRE
  zh: '[PRE287]'
- en: See also
  id: totrans-1483
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`MetaData.schema`](#sqlalchemy.schema.MetaData.params.schema "sqlalchemy.schema.MetaData")'
  id: totrans-1484
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MetaData.schema`](#sqlalchemy.schema.MetaData.params.schema "sqlalchemy.schema.MetaData")'
- en: '### Applying Dynamic Schema Naming Conventions'
  id: totrans-1485
  prefs: []
  type: TYPE_NORMAL
  zh: '### 应用动态模式命名约定'
- en: The names used by the [`Table.schema`](#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table") parameter may also be applied against a lookup that
    is dynamic on a per-connection or per-execution basis, so that for example in
    multi-tenant situations, each transaction or statement may be targeted at a specific
    set of schema names that change. The section [Translation of Schema Names](connections.html#schema-translating)
    describes how this feature is used.
  id: totrans-1486
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Table.schema`](#sqlalchemy.schema.Table.params.schema "sqlalchemy.schema.Table")参数使用的名称也可以根据每个连接或每次执行动态应用于查找，因此例如在多租户情况下，每个事务或语句可以针对一组不断变化的模式名称。章节[模式名称的翻译](connections.html#schema-translating)描述了如何使用此功能。'
- en: See also
  id: totrans-1487
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Translation of Schema Names](connections.html#schema-translating)'
  id: totrans-1488
  prefs: []
  type: TYPE_NORMAL
  zh: '[模式名称的翻译](connections.html#schema-translating)'
- en: '### Setting a Default Schema for New Connections'
  id: totrans-1489
  prefs: []
  type: TYPE_NORMAL
  zh: '### 为新连接设置默认模式'
- en: The above approaches all refer to methods of including an explicit schema-name
    within SQL statements. Database connections in fact feature the concept of a “default”
    schema, which is the name of the “schema” (or database, owner, etc.) that takes
    place if a table name is not explicitly schema-qualified. These names are usually
    configured at the login level, such as when connecting to a PostgreSQL database,
    the default “schema” is called “public”.
  id: totrans-1490
  prefs: []
  type: TYPE_NORMAL
  zh: 上述方法都涉及在 SQL 语句中包含显式模式名称的方法。数据库连接实际上具有“默认”模式的概念，这是如果表名未显式指定模式限定符，则会发生的“模式”（或数据库、所有者等）的名称。这些名称通常在登录级别配置，例如，连接到
    PostgreSQL 数据库时，默认的“模式”称为“public”。
- en: 'There are often cases where the default “schema” cannot be set via the login
    itself and instead would usefully be configured each time a connection is made,
    using a statement such as “SET SEARCH_PATH” on PostgreSQL or “ALTER SESSION” on
    Oracle. These approaches may be achieved by using the `PoolEvents.connect()` event,
    which allows access to the DBAPI connection when it is first created. For example,
    to set the Oracle CURRENT_SCHEMA variable to an alternate name:'
  id: totrans-1491
  prefs: []
  type: TYPE_NORMAL
  zh: 通常存在无法通过登录本身设置默认“模式”的情况，而应在每次连接时有用地进行配置，例如，在 PostgreSQL 上使用类似 “SET SEARCH_PATH”
    的语句或在 Oracle 上使用 “ALTER SESSION”。这些方法可以通过使用 `PoolEvents.connect()` 事件来实现，该事件允许在首次创建
    DBAPI 连接时访问它。例如，将 Oracle 的 CURRENT_SCHEMA 变量设置为替代名称：
- en: '[PRE288]'
  id: totrans-1492
  prefs: []
  type: TYPE_PRE
  zh: '[PRE288]'
- en: Above, the `set_current_schema()` event handler will take place immediately
    when the above [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    first connects; as the event is “inserted” into the beginning of the handler list,
    it will also take place before the dialect’s own event handlers are run, in particular
    including the one that will determine the “default schema” for the connection.
  id: totrans-1493
  prefs: []
  type: TYPE_NORMAL
  zh: 上述 `set_current_schema()` 事件处理程序将在上述 [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 首次连接时立即发生；由于该事件被“插入”到处理程序列表的开头，因此它也将在方言自己的事件处理程序之前发生，特别是包括将为连接确定“默认模式”的事件处理程序。
- en: For other databases, consult the database and/or dialect documentation for specific
    information regarding how default schemas are configured.
  id: totrans-1494
  prefs: []
  type: TYPE_NORMAL
  zh: 对于其他数据库，请查阅数据库和/或方言文档，以获取有关如何配置默认模式的具体信息。
- en: 'Changed in version 1.4.0b2: The above recipe now works without the need to
    establish additional event handlers.'
  id: totrans-1495
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本 1.4.0b2 中更改：上述配方现在无需建立额外的事件处理程序即可工作。
- en: See also
  id: totrans-1496
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Setting Alternate Search Paths on Connect](../dialects/postgresql.html#postgresql-alternate-search-path)
    - in the [PostgreSQL](../dialects/postgresql.html) dialect documentation.'
  id: totrans-1497
  prefs: []
  type: TYPE_NORMAL
  zh: '[在连接时设置替代搜索路径](../dialects/postgresql.html#postgresql-alternate-search-path)
    - 参见 [PostgreSQL](../dialects/postgresql.html) 方言文档。'
- en: Schemas and Reflection
  id: totrans-1498
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式和反射
- en: The schema feature of SQLAlchemy interacts with the table reflection feature
    introduced at [Reflecting Database Objects](reflection.html). See the section
    [Reflecting Tables from Other Schemas](reflection.html#metadata-reflection-schemas)
    for additional details on how this works.
  id: totrans-1499
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 的模式特性与引入的表反射特性交互 [Reflecting Database Objects](reflection.html)。有关此工作原理的其他详细信息，请参阅
    [Reflecting Tables from Other Schemas](reflection.html#metadata-reflection-schemas)
    部分。
- en: Backend-Specific Options
  id: totrans-1500
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 特定于后端的选项
- en: '[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") supports database-specific
    options. For example, MySQL has different table backend types, including “MyISAM”
    and “InnoDB”. This can be expressed with [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    using `mysql_engine`:'
  id: totrans-1501
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") 支持特定于数据库的选项。例如，MySQL
    有不同的表后端类型，包括“MyISAM”和“InnoDB”。这可以通过 [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    使用 `mysql_engine` 来表示：'
- en: '[PRE289]'
  id: totrans-1502
  prefs: []
  type: TYPE_PRE
  zh: '[PRE289]'
- en: Other backends may support table-level options as well - these would be described
    in the individual documentation sections for each dialect.
  id: totrans-1503
  prefs: []
  type: TYPE_NORMAL
  zh: 其他后端可能也支持表级选项 - 这些将在每个方言的单独文档部分中描述。
- en: Column, Table, MetaData API
  id: totrans-1504
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列、表、MetaData API
- en: '| Object Name | Description |'
  id: totrans-1505
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-1506
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [Column](#sqlalchemy.schema.Column) | Represents a column in a database table.
    |'
  id: totrans-1507
  prefs: []
  type: TYPE_TB
  zh: '| [Column](#sqlalchemy.schema.Column) | 表示数据库表中的列。 |'
- en: '| [insert_sentinel](#sqlalchemy.schema.insert_sentinel)([name, type_], *, [default,
    omit_from_statements]) | Provides a surrogate [`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") that will act as a dedicated insert [sentinel](../glossary.html#term-sentinel)
    column, allowing efficient bulk inserts with deterministic RETURNING sorting for
    tables that don’t otherwise have qualifying primary key configurations. |'
  id: totrans-1508
  prefs: []
  type: TYPE_TB
  zh: '| [insert_sentinel](#sqlalchemy.schema.insert_sentinel)([name, type_], *, [default,
    omit_from_statements]) | 提供一个代理 [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")，它将作为专用的插入[sentinel](../glossary.html#term-sentinel)列，允许对没有合格的主键配置的表进行高效的批量插入，并且对返回排序具有确定性。
    |'
- en: '| [MetaData](#sqlalchemy.schema.MetaData) | A collection of [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects and their associated schema constructs. |'
  id: totrans-1509
  prefs: []
  type: TYPE_TB
  zh: '| [MetaData](#sqlalchemy.schema.MetaData) | 一组[`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象及其相关的模式构造。 |'
- en: '| [SchemaConst](#sqlalchemy.schema.SchemaConst) | An enumeration. |'
  id: totrans-1510
  prefs: []
  type: TYPE_TB
  zh: '| [SchemaConst](#sqlalchemy.schema.SchemaConst) | 一个枚举。 |'
- en: '| [SchemaItem](#sqlalchemy.schema.SchemaItem) | Base class for items that define
    a database schema. |'
  id: totrans-1511
  prefs: []
  type: TYPE_TB
  zh: '| [SchemaItem](#sqlalchemy.schema.SchemaItem) | 定义数据库模式的项目的基类。 |'
- en: '| [Table](#sqlalchemy.schema.Table) | Represent a table in a database. |'
  id: totrans-1512
  prefs: []
  type: TYPE_TB
  zh: '| [Table](#sqlalchemy.schema.Table) | 在数据库中表示一个表。 |'
- en: '[PRE290]'
  id: totrans-1513
  prefs: []
  type: TYPE_PRE
  zh: '[PRE290]'
- en: Refers to [`SchemaConst.BLANK_SCHEMA`](#sqlalchemy.schema.SchemaConst.BLANK_SCHEMA
    "sqlalchemy.schema.SchemaConst.BLANK_SCHEMA").
  id: totrans-1514
  prefs: []
  type: TYPE_NORMAL
  zh: 指的是 [`SchemaConst.BLANK_SCHEMA`](#sqlalchemy.schema.SchemaConst.BLANK_SCHEMA
    "sqlalchemy.schema.SchemaConst.BLANK_SCHEMA").
- en: '[PRE291]'
  id: totrans-1515
  prefs: []
  type: TYPE_PRE
  zh: '[PRE291]'
- en: Refers to [`SchemaConst.RETAIN_SCHEMA`](#sqlalchemy.schema.SchemaConst.RETAIN_SCHEMA
    "sqlalchemy.schema.SchemaConst.RETAIN_SCHEMA")
  id: totrans-1516
  prefs: []
  type: TYPE_NORMAL
  zh: 指的是 [`SchemaConst.RETAIN_SCHEMA`](#sqlalchemy.schema.SchemaConst.RETAIN_SCHEMA
    "sqlalchemy.schema.SchemaConst.RETAIN_SCHEMA")
- en: '[PRE292]'
  id: totrans-1517
  prefs: []
  type: TYPE_PRE
  zh: '[PRE292]'
- en: Represents a column in a database table.
  id: totrans-1518
  prefs: []
  type: TYPE_NORMAL
  zh: 表示数据库表中的列。
- en: '**Members**'
  id: totrans-1519
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__eq__()](#sqlalchemy.schema.Column.__eq__), [__init__()](#sqlalchemy.schema.Column.__init__),
    [__le__()](#sqlalchemy.schema.Column.__le__), [__lt__()](#sqlalchemy.schema.Column.__lt__),
    [__ne__()](#sqlalchemy.schema.Column.__ne__), [all_()](#sqlalchemy.schema.Column.all_),
    [anon_key_label](#sqlalchemy.schema.Column.anon_key_label), [anon_label](#sqlalchemy.schema.Column.anon_label),
    [any_()](#sqlalchemy.schema.Column.any_), [argument_for()](#sqlalchemy.schema.Column.argument_for),
    [asc()](#sqlalchemy.schema.Column.asc), [between()](#sqlalchemy.schema.Column.between),
    [bitwise_and()](#sqlalchemy.schema.Column.bitwise_and), [bitwise_lshift()](#sqlalchemy.schema.Column.bitwise_lshift),
    [bitwise_not()](#sqlalchemy.schema.Column.bitwise_not), [bitwise_or()](#sqlalchemy.schema.Column.bitwise_or),
    [bitwise_rshift()](#sqlalchemy.schema.Column.bitwise_rshift), [bitwise_xor()](#sqlalchemy.schema.Column.bitwise_xor),
    [bool_op()](#sqlalchemy.schema.Column.bool_op), [cast()](#sqlalchemy.schema.Column.cast),
    [collate()](#sqlalchemy.schema.Column.collate), [compare()](#sqlalchemy.schema.Column.compare),
    [compile()](#sqlalchemy.schema.Column.compile), [concat()](#sqlalchemy.schema.Column.concat),
    [contains()](#sqlalchemy.schema.Column.contains), [copy()](#sqlalchemy.schema.Column.copy),
    [desc()](#sqlalchemy.schema.Column.desc), [dialect_kwargs](#sqlalchemy.schema.Column.dialect_kwargs),
    [dialect_options](#sqlalchemy.schema.Column.dialect_options), [distinct()](#sqlalchemy.schema.Column.distinct),
    [endswith()](#sqlalchemy.schema.Column.endswith), [expression](#sqlalchemy.schema.Column.expression),
    [foreign_keys](#sqlalchemy.schema.Column.foreign_keys), [get_children()](#sqlalchemy.schema.Column.get_children),
    [icontains()](#sqlalchemy.schema.Column.icontains), [iendswith()](#sqlalchemy.schema.Column.iendswith),
    [ilike()](#sqlalchemy.schema.Column.ilike), [in_()](#sqlalchemy.schema.Column.in_),
    [index](#sqlalchemy.schema.Column.index), [info](#sqlalchemy.schema.Column.info),
    [inherit_cache](#sqlalchemy.schema.Column.inherit_cache), [is_()](#sqlalchemy.schema.Column.is_),
    [is_distinct_from()](#sqlalchemy.schema.Column.is_distinct_from), [is_not()](#sqlalchemy.schema.Column.is_not),
    [is_not_distinct_from()](#sqlalchemy.schema.Column.is_not_distinct_from), [isnot()](#sqlalchemy.schema.Column.isnot),
    [isnot_distinct_from()](#sqlalchemy.schema.Column.isnot_distinct_from), [istartswith()](#sqlalchemy.schema.Column.istartswith),
    [key](#sqlalchemy.schema.Column.key), [kwargs](#sqlalchemy.schema.Column.kwargs),
    [label()](#sqlalchemy.schema.Column.label), [like()](#sqlalchemy.schema.Column.like),
    [match()](#sqlalchemy.schema.Column.match), [not_ilike()](#sqlalchemy.schema.Column.not_ilike),
    [not_in()](#sqlalchemy.schema.Column.not_in), [not_like()](#sqlalchemy.schema.Column.not_like),
    [notilike()](#sqlalchemy.schema.Column.notilike), [notin_()](#sqlalchemy.schema.Column.notin_),
    [notlike()](#sqlalchemy.schema.Column.notlike), [nulls_first()](#sqlalchemy.schema.Column.nulls_first),
    [nulls_last()](#sqlalchemy.schema.Column.nulls_last), [nullsfirst()](#sqlalchemy.schema.Column.nullsfirst),
    [nullslast()](#sqlalchemy.schema.Column.nullslast), [op()](#sqlalchemy.schema.Column.op),
    [operate()](#sqlalchemy.schema.Column.operate), [params()](#sqlalchemy.schema.Column.params),
    [proxy_set](#sqlalchemy.schema.Column.proxy_set), [references()](#sqlalchemy.schema.Column.references),
    [regexp_match()](#sqlalchemy.schema.Column.regexp_match), [regexp_replace()](#sqlalchemy.schema.Column.regexp_replace),
    [reverse_operate()](#sqlalchemy.schema.Column.reverse_operate), [self_group()](#sqlalchemy.schema.Column.self_group),
    [shares_lineage()](#sqlalchemy.schema.Column.shares_lineage), [startswith()](#sqlalchemy.schema.Column.startswith),
    [timetuple](#sqlalchemy.schema.Column.timetuple), [unique](#sqlalchemy.schema.Column.unique),
    [unique_params()](#sqlalchemy.schema.Column.unique_params)'
  id: totrans-1520
  prefs: []
  type: TYPE_NORMAL
  zh: '[__eq__()](#sqlalchemy.schema.Column.__eq__), [__init__()](#sqlalchemy.schema.Column.__init__),
    [__le__()](#sqlalchemy.schema.Column.__le__), [__lt__()](#sqlalchemy.schema.Column.__lt__),
    [__ne__()](#sqlalchemy.schema.Column.__ne__), [all_()](#sqlalchemy.schema.Column.all_),
    [anon_key_label](#sqlalchemy.schema.Column.anon_key_label), [anon_label](#sqlalchemy.schema.Column.anon_label),
    [any_()](#sqlalchemy.schema.Column.any_), [argument_for()](#sqlalchemy.schema.Column.argument_for),
    [asc()](#sqlalchemy.schema.Column.asc), [between()](#sqlalchemy.schema.Column.between),
    [bitwise_and()](#sqlalchemy.schema.Column.bitwise_and), [bitwise_lshift()](#sqlalchemy.schema.Column.bitwise_lshift),
    [bitwise_not()](#sqlalchemy.schema.Column.bitwise_not), [bitwise_or()](#sqlalchemy.schema.Column.bitwise_or),
    [bitwise_rshift()](#sqlalchemy.schema.Column.bitwise_rshift), [bitwise_xor()](#sqlalchemy.schema.Column.bitwise_xor),
    [bool_op()](#sqlalchemy.schema.Column.bool_op), [cast()](#sqlalchemy.schema.Column.cast),
    [collate()](#sqlalchemy.schema.Column.collate), [compare()](#sqlalchemy.schema.Column.compare),
    [compile()](#sqlalchemy.schema.Column.compile), [concat()](#sqlalchemy.schema.Column.concat),
    [contains()](#sqlalchemy.schema.Column.contains), [copy()](#sqlalchemy.schema.Column.copy),
    [desc()](#sqlalchemy.schema.Column.desc), [dialect_kwargs](#sqlalchemy.schema.Column.dialect_kwargs),
    [dialect_options](#sqlalchemy.schema.Column.dialect_options), [distinct()](#sqlalchemy.schema.Column.distinct),
    [endswith()](#sqlalchemy.schema.Column.endswith), [expression](#sqlalchemy.schema.Column.expression),
    [foreign_keys](#sqlalchemy.schema.Column.foreign_keys), [get_children()](#sqlalchemy.schema.Column.get_children),
    [icontains()](#sqlalchemy.schema.Column.icontains), [iendswith()](#sqlalchemy.schema.Column.iendswith),
    [ilike()](#sqlalchemy.schema.Column.ilike), [in_()](#sqlalchemy.schema.Column.in_),
    [index](#sqlalchemy.schema.Column.index), [info](#sqlalchemy.schema.Column.info),
    [inherit_cache](#sqlalchemy.schema.Column.inherit_cache), [is_()](#sqlalchemy.schema.Column.is_),
    [is_distinct_from()](#sqlalchemy.schema.Column.is_distinct_from), [is_not()](#sqlalchemy.schema.Column.is_not),
    [is_not_distinct_from()](#sqlalchemy.schema.Column.is_not_distinct_from), [isnot()](#sqlalchemy.schema.Column.isnot),
    [isnot_distinct_from()](#sqlalchemy.schema.Column.isnot_distinct_from), [istartswith()](#sqlalchemy.schema.Column.istartswith),
    [key](#sqlalchemy.schema.Column.key), [kwargs](#sqlalchemy.schema.Column.kwargs),
    [label()](#sqlalchemy.schema.Column.label), [like()](#sqlalchemy.schema.Column.like),
    [match()](#sqlalchemy.schema.Column.match), [not_ilike()](#sqlalchemy.schema.Column.not_ilike),
    [not_in()](#sqlalchemy.schema.Column.not_in), [not_like()](#sqlalchemy.schema.Column.not_like),
    [notilike()](#sqlalchemy.schema.Column.notilike), [notin_()](#sqlalchemy.schema.Column.notin_),
    [notlike()](#sqlalchemy.schema.Column.notlike), [nulls_first()](#sqlalchemy.schema.Column.nulls_first),
    [nulls_last()](#sqlalchemy.schema.Column.nulls_last), [nullsfirst()](#sqlalchemy.schema.Column.nullsfirst),
    [nullslast()](#sqlalchemy.schema.Column.nullslast), [op()](#sqlalchemy.schema.Column.op),
    [operate()](#sqlalchemy.schema.Column.operate), [params()](#sqlalchemy.schema.Column.params),
    [proxy_set](#sqlalchemy.schema.Column.proxy_set), [references()](#sqlalchemy.schema.Column.references),
    [regexp_match()](#sqlalchemy.schema.Column.regexp_match), [regexp_replace()](#sqlalchemy.schema.Column.regexp_replace),
    [reverse_operate()](#sqlalchemy.schema.Column.reverse_operate), [self_group()](#sqlalchemy.schema.Column.self_group),
    [shares_lineage()](#sqlalchemy.schema.Column.shares_lineage), [startswith()](#sqlalchemy.schema.Column.startswith),
    [timetuple](#sqlalchemy.schema.Column.timetuple), [unique](#sqlalchemy.schema.Column.unique),
    [unique_params()](#sqlalchemy.schema.Column.unique_params)'
- en: '**Class signature**'
  id: totrans-1521
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    ([`sqlalchemy.sql.base.DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs"), [`sqlalchemy.schema.SchemaItem`](#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem"), [`sqlalchemy.sql.expression.ColumnClause`](sqlelement.html#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause"))
  id: totrans-1522
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.schema.Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    ([`sqlalchemy.sql.base.DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs"), [`sqlalchemy.schema.SchemaItem`](#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem"), [`sqlalchemy.sql.expression.ColumnClause`](sqlelement.html#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause"))
- en: '[PRE293]'
  id: totrans-1523
  prefs: []
  type: TYPE_PRE
  zh: '[PRE293]'
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__eq__` *method
    of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1524
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") *类的* `sqlalchemy.sql.expression.ColumnOperators.__eq__`
    *方法*'
- en: Implement the `==` operator.
  id: totrans-1525
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`==`运算符。
- en: In a column context, produces the clause `a = b`. If the target is `None`, produces
    `a IS NULL`.
  id: totrans-1526
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句`a = b`。如果目标为`None`，则生成`a IS NULL`。
- en: '[PRE294]'
  id: totrans-1527
  prefs: []
  type: TYPE_PRE
  zh: '[PRE294]'
- en: Construct a new `Column` object.
  id: totrans-1528
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个新的`Column`对象。
- en: 'Parameters:'
  id: totrans-1529
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`name` –'
  id: totrans-1530
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` –'
- en: The name of this column as represented in the database. This argument may be
    the first positional argument, or specified via keyword.
  id: totrans-1531
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此列在数据库中表示的名称。此参数可以是第一个位置参数，也可以通过关键字指定。
- en: Names which contain no upper case characters will be treated as case insensitive
    names, and will not be quoted unless they are a reserved word. Names with any
    number of upper case characters will be quoted and sent exactly. Note that this
    behavior applies even for databases which standardize upper case names as case
    insensitive such as Oracle.
  id: totrans-1532
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不包含大写字符的名称将被视为不区分大小写的名称，并且除非它们是保留字，否则不会被引用。包含任意数量大写字符的名称将被引用并且原样发送。请注意，即使对于标准化大写名称为不区分大小写的数据库（如
    Oracle）也适用此行为。
- en: The name field may be omitted at construction time and applied later, at any
    time before the Column is associated with a [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"). This is to support convenient usage within the [`declarative`](../orm/extensions/declarative/api.html#module-sqlalchemy.ext.declarative
    "sqlalchemy.ext.declarative") extension.
  id: totrans-1533
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以在构造时省略名称字段，并在任何时候在列与[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")关联之前应用。这是为了支持在[`declarative`](../orm/extensions/declarative/api.html#module-sqlalchemy.ext.declarative
    "sqlalchemy.ext.declarative")扩展中方便的使用。
- en: '`type_` –'
  id: totrans-1534
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type_` –'
- en: 'The column’s type, indicated using an instance which subclasses [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"). If no arguments are required for the type, the
    class of the type can be sent as well, e.g.:'
  id: totrans-1535
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 列的类型，使用一个子类化了[`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine")的实例指示。如果类型不需要任何参数，则也可以发送类型的类，例如：
- en: '[PRE295]'
  id: totrans-1536
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE295]'
- en: The `type` argument may be the second positional argument or specified by keyword.
  id: totrans-1537
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`type`参数可以是第二个位置参数，也可以通过关键字指定。'
- en: If the `type` is `None` or is omitted, it will first default to the special
    type [`NullType`](type_api.html#sqlalchemy.types.NullType "sqlalchemy.types.NullType").
    If and when this [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    is made to refer to another column using [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") and/or [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint"), the type of the remote-referenced column
    will be copied to this column as well, at the moment that the foreign key is resolved
    against that remote [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    object.
  id: totrans-1538
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果`type`为`None`或被省略，它将首先默认为特殊类型[`NullType`](type_api.html#sqlalchemy.types.NullType
    "sqlalchemy.types.NullType")。如果此[`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")通过[`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey")和/或[`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")参考到另一个列，并且在该外键被解析为远程[`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象的时刻，远程引用列的类型也将被复制到此列。
- en: '`*args` – Additional positional arguments include various [`SchemaItem`](#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem") derived constructs which will be applied as options
    to the column. These include instances of [`Constraint`](constraints.html#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint"), [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey"), [`ColumnDefault`](defaults.html#sqlalchemy.schema.ColumnDefault
    "sqlalchemy.schema.ColumnDefault"), [`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence"), [`Computed`](defaults.html#sqlalchemy.schema.Computed
    "sqlalchemy.schema.Computed") [`Identity`](defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity"). In some cases an equivalent keyword argument is
    available such as `server_default`, `default` and `unique`.'
  id: totrans-1539
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*args` – 附加的位置参数包括各种派生自[`SchemaItem`](#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")的构造，这些构造将被应用为列的选项。这些包括[`Constraint`](constraints.html#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint")、[`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey")、[`ColumnDefault`](defaults.html#sqlalchemy.schema.ColumnDefault
    "sqlalchemy.schema.ColumnDefault")、[`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")、[`Computed`](defaults.html#sqlalchemy.schema.Computed
    "sqlalchemy.schema.Computed")和[`Identity`](defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity")的实例。在某些情况下，还可以使用等效的关键字参数，如`server_default`、`default`和`unique`。'
- en: '`autoincrement` –'
  id: totrans-1540
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoincrement` –'
- en: Set up “auto increment” semantics for an **integer primary key column with no
    foreign key dependencies** (see later in this docstring for a more specific definition).
    This may influence the [DDL](../glossary.html#term-DDL) that will be emitted for
    this column during a table create, as well as how the column will be considered
    when INSERT statements are compiled and executed.
  id: totrans-1541
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 设置“自动递增”语义，用于**没有外键依赖的整数主键列**（详见本文档字符串后面的更具体定义）。这可能会影响在创建表时为该列发出的[DDL](../glossary.html#term-DDL)，以及编译和执行INSERT语句时该列的考虑方式。
- en: The default value is the string `"auto"`, which indicates that a single-column
    (i.e. non-composite) primary key that is of an INTEGER type with no other client-side
    or server-side default constructs indicated should receive auto increment semantics
    automatically. Other values include `True` (force this column to have auto-increment
    semantics for a [composite primary key](../glossary.html#term-composite-primary-key)
    as well), `False` (this column should never have auto-increment semantics), and
    the string `"ignore_fk"` (special-case for foreign key columns, see below).
  id: totrans-1542
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认值为字符串`"auto"`，表示应自动为具有整数类型且没有其他客户端或服务器端默认构造的单列（即非复合）主键接收自动递增语义。其他值包括`True`（强制此列对于[复合主键](../glossary.html#term-composite-primary-key)也具有自动递增语义），`False`（此列不应具有自动递增语义），以及字符串`"ignore_fk"`（外键列的特殊情况，请参见下文）。
- en: 'The term “auto increment semantics” refers both to the kind of DDL that will
    be emitted for the column within a CREATE TABLE statement, when methods such as
    [`MetaData.create_all()`](#sqlalchemy.schema.MetaData.create_all "sqlalchemy.schema.MetaData.create_all")
    and [`Table.create()`](#sqlalchemy.schema.Table.create "sqlalchemy.schema.Table.create")
    are invoked, as well as how the column will be considered when an INSERT statement
    is compiled and emitted to the database:'
  id: totrans-1543
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 术语“自动递增语义”既涉及在CREATE TABLE语句中为列发出的DDL的类型，当调用诸如[`MetaData.create_all()`](#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all")和[`Table.create()`](#sqlalchemy.schema.Table.create
    "sqlalchemy.schema.Table.create")之类的方法时，也涉及编译和发出INSERT语句到数据库时该列的考虑方式：
- en: '`DDL rendering` (i.e. [`MetaData.create_all()`](#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all"), [`Table.create()`](#sqlalchemy.schema.Table.create
    "sqlalchemy.schema.Table.create")): When used on a [`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") that has no other default-generating construct associated
    with it (such as a [`Sequence`](defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    or [`Identity`](defaults.html#sqlalchemy.schema.Identity "sqlalchemy.schema.Identity")
    construct), the parameter will imply that database-specific keywords such as PostgreSQL
    `SERIAL`, MySQL `AUTO_INCREMENT`, or `IDENTITY` on SQL Server should also be rendered.
    Not every database backend has an “implied” default generator available; for example
    the Oracle backend always needs an explicit construct such as [`Identity`](defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity") to be included with a [`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") in order for the DDL rendered to include auto-generating
    constructs to also be produced in the database.'
  id: totrans-1544
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DDL 渲染`（即 [`MetaData.create_all()`](#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all")、[`Table.create()`](#sqlalchemy.schema.Table.create
    "sqlalchemy.schema.Table.create") 等）：当应用于没有与之关联的其他默认生成构造（例如 [`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") 或 [`Identity`](defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity") 构造）的 [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    时，该参数将暗示应该还呈现数据库特定关键字，例如 PostgreSQL 的 `SERIAL`、MySQL 的 `AUTO_INCREMENT` 或 SQL
    Server 上的 `IDENTITY`。并非每个数据库后端都有“暗示”的默认生成器可用；例如 Oracle 后端总是需要在 [`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 中包含一个明确的构造（如 [`Identity`](defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity")）才能使 DDL 渲染中包括自动生成构造也被生成到数据库中。'
- en: '`INSERT semantics` (i.e. when a [`insert()`](dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert") construct is compiled into a SQL string and
    is then executed on a database using [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") or equivalent): A single-row INSERT statement
    will be known to produce a new integer primary key value automatically for this
    column, which will be accessible after the statement is invoked via the [`CursorResult.inserted_primary_key`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key") attribute upon the [`Result`](connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object. This also applies towards use of the ORM when
    ORM-mapped objects are persisted to the database, indicating that a new integer
    primary key will be available to become part of the [identity key](../glossary.html#term-identity-key)
    for that object. This behavior takes place regardless of what DDL constructs are
    associated with the [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    and is independent of the “DDL Rendering” behavior discussed in the previous note
    above.'
  id: totrans-1545
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`INSERT` 语义（即当 [`insert()`](dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert")
    构造编译为 SQL 字符串并使用 [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") 或等效方法在数据库上执行时）：单行 `INSERT` 语句将会自动为该列生成一个新的整数主键值，该值可在语句调用后通过
    [`Result`](connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    对象上的 [`CursorResult.inserted_primary_key`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key") 属性访问。当 ORM 将 ORM 映射对象持久化到数据库时，该行为也适用，表明一个新的整数主键将可用于成为该对象的
    [标识键](../glossary.html#term-identity-key) 的一部分。此行为与 [`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 关联的 DDL 构造无关，且独立于上述前一注中讨论的“DDL 渲染”行为。'
- en: The parameter may be set to `True` to indicate that a column which is part of
    a composite (i.e. multi-column) primary key should have autoincrement semantics,
    though note that only one column within a primary key may have this setting. It
    can also be set to `True` to indicate autoincrement semantics on a column that
    has a client-side or server-side default configured, however note that not all
    dialects can accommodate all styles of default as an “autoincrement”. It can also
    be set to `False` on a single-column primary key that has a datatype of INTEGER
    in order to disable auto increment semantics for that column.
  id: totrans-1546
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以将参数设置为 `True`，表示复合（即多列）主键的一部分的列应具有自动增量语义，但请注意，主键中只有一列可以具有此设置。也可以将其设置为 `True`，表示在客户端或服务器端配置了默认值的列应具有自动增量语义，但请注意，并非所有方言都能适应所有风格的默认值作为“自增”。也可以在数据类型为
    INTEGER 的单列主键上将其设置为 `False`，以禁用该列的自动增量语义。
- en: 'The setting *only* has an effect for columns which are:'
  id: totrans-1547
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*仅仅*对以下列有效：'
- en: Integer derived (i.e. INT, SMALLINT, BIGINT).
  id: totrans-1548
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 衍生整数（即 INT、SMALLINT、BIGINT）。
- en: Part of the primary key
  id: totrans-1549
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是主键的一部分
- en: 'Not referring to another column via [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey"), unless the value is specified as `''ignore_fk''`:'
  id: totrans-1550
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不通过 [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    引用另一列，除非指定值为 `'ignore_fk'`：
- en: '[PRE296]'
  id: totrans-1551
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE296]'
- en: It is typically not desirable to have “autoincrement” enabled on a column that
    refers to another via foreign key, as such a column is required to refer to a
    value that originates from elsewhere.
  id: totrans-1552
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在引用其他列的列上启用“自增”通常是不可取的，因为这样的列需要引用来自其他地方的值。
- en: 'The setting has these effects on columns that meet the above criteria:'
  id: totrans-1553
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对满足上述条件的列有以下影响：
- en: 'DDL issued for the column, if the column does not already include a default
    generating construct supported by the backend such as [`Identity`](defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity"), will include database-specific keywords intended
    to signify this column as an “autoincrement” column for specific backends. Behavior
    for primary SQLAlchemy dialects includes:'
  id: totrans-1554
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于列发出 DDL，如果列尚未包含后端支持的默认生成结构，如 [`Identity`](defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity")，则会包含特定于数据库的关键字，以表示此列为特定后端的“自增”列。主要 SQLAlchemy 方言的行为包括：
- en: AUTO INCREMENT on MySQL and MariaDB
  id: totrans-1555
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 MySQL 和 MariaDB 上的 AUTO INCREMENT
- en: SERIAL on PostgreSQL
  id: totrans-1556
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 PostgreSQL 上的 SERIAL
- en: IDENTITY on MS-SQL - this occurs even without the [`Identity`](defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity") construct as the [`Column.autoincrement`](#sqlalchemy.schema.Column.params.autoincrement
    "sqlalchemy.schema.Column") parameter pre-dates this construct.
  id: totrans-1557
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 MS-SQL 上的 IDENTITY - 这甚至在没有 [`Identity`](defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity") 结构的情况下也会发生，因为 [`Column.autoincrement`](#sqlalchemy.schema.Column.params.autoincrement
    "sqlalchemy.schema.Column") 参数早于此结构。
- en: SQLite - SQLite integer primary key columns are implicitly “auto incrementing”
    and no additional keywords are rendered; to render the special SQLite keyword
    `AUTOINCREMENT` is not included as this is unnecessary and not recommended by
    the database vendor. See the section [SQLite Auto Incrementing Behavior](../dialects/sqlite.html#sqlite-autoincrement)
    for more background.
  id: totrans-1558
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQLite - SQLite 整数主键列隐式“自动增长”，不需要添加额外的关键词；不包括特殊的 SQLite 关键词 `AUTOINCREMENT`，因为这是不必要的，也不被数据库厂商推荐。更多背景信息请参阅
    [SQLite Auto Incrementing Behavior](../dialects/sqlite.html#sqlite-autoincrement)
    章节。
- en: Oracle - The Oracle dialect has no default “autoincrement” feature available
    at this time, instead the [`Identity`](defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity") construct is recommended to achieve this (the [`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") construct may also be used).
  id: totrans-1559
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Oracle - 目前 Oracle 方言没有默认的“自增”功能可用，推荐使用 [`Identity`](defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity") 结构来实现此功能（也可以使用 [`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") 结构）。
- en: Third-party dialects - consult those dialects’ documentation for details on
    their specific behaviors.
  id: totrans-1560
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三方方言 - 请查阅这些方言的文档，了解其特定行为。
- en: 'When a single-row [`insert()`](dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert")
    construct is compiled and executed, which does not set the [`Insert.inline()`](dml.html#sqlalchemy.sql.expression.Insert.inline
    "sqlalchemy.sql.expression.Insert.inline") modifier, newly generated primary key
    values for this column will be automatically retrieved upon statement execution
    using a method specific to the database driver in use:'
  id: totrans-1561
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当编译和执行单行[`insert()`](dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert")构造时，如果没有设置[`Insert.inline()`](dml.html#sqlalchemy.sql.expression.Insert.inline
    "sqlalchemy.sql.expression.Insert.inline")修饰符，此列的新生成的主键值将在语句执行时自动通过特定于正在使用的数据库驱动程序的方法检索：
- en: MySQL, SQLite - calling upon `cursor.lastrowid()` (see [https://www.python.org/dev/peps/pep-0249/#lastrowid](https://www.python.org/dev/peps/pep-0249/#lastrowid))
  id: totrans-1562
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL，SQLite - 调用`cursor.lastrowid()`（参见[https://www.python.org/dev/peps/pep-0249/#lastrowid](https://www.python.org/dev/peps/pep-0249/#lastrowid)）
- en: PostgreSQL, SQL Server, Oracle - use RETURNING or an equivalent construct when
    rendering an INSERT statement, and then retrieving the newly generated primary
    key values after execution
  id: totrans-1563
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: PostgreSQL，SQL Server，Oracle - 在渲染INSERT语句时使用RETURNING或等效构造，然后在执行后检索新生成的主键值
- en: PostgreSQL, Oracle for [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects that set [`Table.implicit_returning`](#sqlalchemy.schema.Table.params.implicit_returning
    "sqlalchemy.schema.Table") to False - for a [`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") only, the [`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") is invoked explicitly before the INSERT statement
    takes place so that the newly generated primary key value is available to the
    client
  id: totrans-1564
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于将[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象的[`Table.implicit_returning`](#sqlalchemy.schema.Table.params.implicit_returning
    "sqlalchemy.schema.Table")设置为False的PostgreSQL，Oracle - 仅对于[`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")，在执行INSERT语句之前显式调用[`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")，以便新生成的主键值可供客户端使用
- en: SQL Server for [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects that set [`Table.implicit_returning`](#sqlalchemy.schema.Table.params.implicit_returning
    "sqlalchemy.schema.Table") to False - the `SELECT scope_identity()` construct
    is used after the INSERT statement is invoked to retrieve the newly generated
    primary key value.
  id: totrans-1565
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于将[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象的[`Table.implicit_returning`](#sqlalchemy.schema.Table.params.implicit_returning
    "sqlalchemy.schema.Table")设置为False的SQL Server - 在调用INSERT语句后使用`SELECT scope_identity()`构造来检索新生成的主键值。
- en: Third-party dialects - consult those dialects’ documentation for details on
    their specific behaviors.
  id: totrans-1566
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三方方言 - 请查阅这些方言的文档，了解它们特定行为的详细信息。
- en: For multiple-row [`insert()`](dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert")
    constructs invoked with a list of parameters (i.e. “executemany” semantics), primary-key
    retrieving behaviors are generally disabled, however there may be special APIs
    that may be used to retrieve lists of new primary key values for an “executemany”,
    such as the psycopg2 “fast insertmany” feature. Such features are very new and
    may not yet be well covered in documentation.
  id: totrans-1567
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于使用参数列表（即“executemany”语义）调用的多行[`insert()`](dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert")构造，通常会禁用主键检索行为，但可能有特殊的API可用于检索“executemany”的新主键值列表，例如psycopg2的“fast
    insertmany”功能。这些功能非常新，可能尚未在文档中充分介绍。
- en: '`default` –'
  id: totrans-1568
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default` -'
- en: A scalar, Python callable, or [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") expression representing the *default
    value* for this column, which will be invoked upon insert if this column is otherwise
    not specified in the VALUES clause of the insert. This is a shortcut to using
    [`ColumnDefault`](defaults.html#sqlalchemy.schema.ColumnDefault "sqlalchemy.schema.ColumnDefault")
    as a positional argument; see that class for full detail on the structure of the
    argument.
  id: totrans-1569
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 表示此列的*默认值*的标量、Python可调用对象或[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")表达式，如果此列在插入的VALUES子句中未指定，则将在插入时调用。这是使用[`ColumnDefault`](defaults.html#sqlalchemy.schema.ColumnDefault
    "sqlalchemy.schema.ColumnDefault")作为位置参数的快捷方式；请参阅该类以获取有关参数结构的完整详细信息。
- en: Contrast this argument to [`Column.server_default`](#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column") which creates a default generator on the database
    side.
  id: totrans-1570
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与[`Column.server_default`](#sqlalchemy.schema.Column.params.server_default "sqlalchemy.schema.Column")相对的是在数据库端创建默认生成器的默认值。
- en: See also
  id: totrans-1571
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Column INSERT/UPDATE Defaults](defaults.html)'
  id: totrans-1572
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[列INSERT/UPDATE默认值](defaults.html)'
- en: '`doc` – optional String that can be used by the ORM or similar to document
    attributes on the Python side. This attribute does `not` render SQL comments;
    use the [`Column.comment`](#sqlalchemy.schema.Column.params.comment "sqlalchemy.schema.Column")
    parameter for this purpose.'
  id: totrans-1573
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`doc` – 可选字符串，可由ORM或类似的东西用于文档化Python端的属性。此属性不会渲染SQL注释；用于此目的的是[`Column.comment`](#sqlalchemy.schema.Column.params.comment
    "sqlalchemy.schema.Column")参数。'
- en: '`key` – An optional string identifier which will identify this `Column` object
    on the [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table"). When a key
    is provided, this is the only identifier referencing the `Column` within the application,
    including ORM attribute mapping; the `name` field is used only when rendering
    SQL.'
  id: totrans-1574
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`key` – 一个可选的字符串标识符，将在[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")上识别此`Column`对象。当提供了一个key时，这是应用程序中唯一引用`Column`的标识符，包括ORM属性映射；`name`字段仅在渲染SQL时使用。'
- en: '`index` –'
  id: totrans-1575
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index` –'
- en: When `True`, indicates that a [`Index`](constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") construct will be automatically generated for this
    [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column"), which will result
    in a “CREATE INDEX” statement being emitted for the [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") when the DDL create operation is invoked.
  id: totrans-1576
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当`True`时，表示将为此[`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")自动生成一个[`Index`](constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")构造，这将导致在调用DDL创建操作时为[`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")发出“CREATE INDEX”语句。
- en: 'Using this flag is equivalent to making use of the [`Index`](constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") construct explicitly at the level of the [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") construct itself:'
  id: totrans-1577
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用此标志等同于在[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")构造本身的级别上显式使用[`Index`](constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")构造：
- en: '[PRE297]'
  id: totrans-1578
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE297]'
- en: To add the [`Index.unique`](constraints.html#sqlalchemy.schema.Index.params.unique
    "sqlalchemy.schema.Index") flag to the [`Index`](constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index"), set both the [`Column.unique`](#sqlalchemy.schema.Column.params.unique
    "sqlalchemy.schema.Column") and [`Column.index`](#sqlalchemy.schema.Column.params.index
    "sqlalchemy.schema.Column") flags to True simultaneously, which will have the
    effect of rendering the “CREATE UNIQUE INDEX” DDL instruction instead of “CREATE
    INDEX”.
  id: totrans-1579
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要将[`Index.unique`](constraints.html#sqlalchemy.schema.Index.params.unique "sqlalchemy.schema.Index")标志添加到[`Index`](constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")中，同时将[`Column.unique`](#sqlalchemy.schema.Column.params.unique
    "sqlalchemy.schema.Column")和[`Column.index`](#sqlalchemy.schema.Column.params.index
    "sqlalchemy.schema.Column")标志设置为True，这将导致渲染“CREATE UNIQUE INDEX”DDL指令而不是“CREATE
    INDEX”。
- en: The name of the index is generated using the [default naming convention](constraints.html#constraint-default-naming-convention)
    which for the [`Index`](constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    construct is of the form `ix_<tablename>_<columnname>`.
  id: totrans-1580
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 索引的名称使用[默认命名约定](constraints.html#constraint-default-naming-convention)，对于[`Index`](constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")构造，其形式为`ix_<tablename>_<columnname>`。
- en: As this flag is intended only as a convenience for the common case of adding
    a single-column, default configured index to a table definition, explicit use
    of the [`Index`](constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    construct should be preferred for most use cases, including composite indexes
    that encompass more than one column, indexes with SQL expressions or ordering,
    backend-specific index configuration options, and indexes that use a specific
    name.
  id: totrans-1581
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于此标志仅用作向表定义添加单列默认配置索引的常见情况的便利性，因此对于大多数用例，包括跨多列的复合索引、具有SQL表达式或排序的索引、特定于后端的索引配置选项以及使用特定名称的索引，应首选显式使用[`Index`](constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")构造。
- en: Note
  id: totrans-1582
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: the [`Column.index`](#sqlalchemy.schema.Column.index "sqlalchemy.schema.Column.index")
    attribute on [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    **does not indicate** if this column is indexed or not, only if this flag was
    explicitly set here. To view indexes on a column, view the [`Table.indexes`](#sqlalchemy.schema.Table.indexes
    "sqlalchemy.schema.Table.indexes") collection or use [`Inspector.get_indexes()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_indexes
    "sqlalchemy.engine.reflection.Inspector.get_indexes").
  id: totrans-1583
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Column.index`](#sqlalchemy.schema.Column.index "sqlalchemy.schema.Column.index")
    属性在 [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column") 上 **并不表示**
    此列是否已建立索引，只表示是否在此处显式设置了此标志。要查看列上的索引，请查看 [`Table.indexes`](#sqlalchemy.schema.Table.indexes
    "sqlalchemy.schema.Table.indexes") 集合或使用 [`Inspector.get_indexes()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_indexes
    "sqlalchemy.engine.reflection.Inspector.get_indexes")。'
- en: See also
  id: totrans-1584
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Indexes](constraints.html#schema-indexes)'
  id: totrans-1585
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[索引](constraints.html#schema-indexes)'
- en: '[Configuring Constraint Naming Conventions](constraints.html#constraint-naming-conventions)'
  id: totrans-1586
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[配置约束命名规范](constraints.html#constraint-naming-conventions)'
- en: '[`Column.unique`](#sqlalchemy.schema.Column.params.unique "sqlalchemy.schema.Column")'
  id: totrans-1587
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Column.unique`](#sqlalchemy.schema.Column.params.unique "sqlalchemy.schema.Column") '
- en: '`info` – Optional data dictionary which will be populated into the [`SchemaItem.info`](#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info") attribute of this object.'
  id: totrans-1588
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`info` – 可选数据字典，将填充到此对象的 [`SchemaItem.info`](#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info") 属性中。'
- en: '`nullable` –'
  id: totrans-1589
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nullable` –'
- en: When set to `False`, will cause the “NOT NULL” phrase to be added when generating
    DDL for the column. When `True`, will normally generate nothing (in SQL this defaults
    to “NULL”), except in some very specific backend-specific edge cases where “NULL”
    may render explicitly. Defaults to `True` unless [`Column.primary_key`](#sqlalchemy.schema.Column.params.primary_key
    "sqlalchemy.schema.Column") is also `True` or the column specifies a `Identity`,
    in which case it defaults to `False`. This parameter is only used when issuing
    CREATE TABLE statements.
  id: totrans-1590
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当设置为 `False` 时，将在生成列的DDL时添加“NOT NULL”短语。当设置为 `True` 时，通常不生成任何内容（在SQL中默认为“NULL”），除非在一些非常特定的后端特定情况下，“NULL”可能会被显式渲染。默认为
    `True`，除非 [`Column.primary_key`](#sqlalchemy.schema.Column.params.primary_key
    "sqlalchemy.schema.Column") 也为 `True` 或列指定了 `Identity`，在这种情况下默认为 `False`。此参数仅在发出
    CREATE TABLE 语句时使用。
- en: Note
  id: totrans-1591
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: When the column specifies a `Identity` this parameter is in general ignored
    by the DDL compiler. The PostgreSQL database allows nullable identity column by
    setting this parameter to `True` explicitly.
  id: totrans-1592
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当列指定了 `Identity` 时，DDL编译器通常会忽略此参数。PostgreSQL数据库允许通过将此参数显式设置为 `True` 来设置可空标识列。
- en: '`onupdate` –'
  id: totrans-1593
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onupdate` –'
- en: A scalar, Python callable, or [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") representing a default value to be
    applied to the column within UPDATE statements, which will be invoked upon update
    if this column is not present in the SET clause of the update. This is a shortcut
    to using [`ColumnDefault`](defaults.html#sqlalchemy.schema.ColumnDefault "sqlalchemy.schema.ColumnDefault")
    as a positional argument with `for_update=True`.
  id: totrans-1594
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 表示要应用于UPDATE语句中的列的默认值的标量、Python可调用对象或 [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")。如果该列在UPDATE的SET子句中不存在，将在更新时调用此默认值。这是使用
    [`ColumnDefault`](defaults.html#sqlalchemy.schema.ColumnDefault "sqlalchemy.schema.ColumnDefault")
    作为 `for_update=True` 的位置参数的一种捷径。
- en: See also
  id: totrans-1595
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Column INSERT/UPDATE Defaults](defaults.html#metadata-defaults) - complete
    discussion of onupdate'
  id: totrans-1596
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[列的INSERT/UPDATE默认值](defaults.html#metadata-defaults) - 对`onupdate`的完整讨论'
- en: '`primary_key` – If `True`, marks this column as a primary key column. Multiple
    columns can have this flag set to specify composite primary keys. As an alternative,
    the primary key of a [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    can be specified via an explicit [`PrimaryKeyConstraint`](constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") object.'
  id: totrans-1597
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`primary_key` – 如果设置为`True`，将该列标记为主键列。可以设置多个列具有此标志以指定复合主键。作为替代，可以通过显式的 [`PrimaryKeyConstraint`](constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") 对象来指定 [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 的主键。'
- en: '`server_default` –'
  id: totrans-1598
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`server_default` –'
- en: A [`FetchedValue`](defaults.html#sqlalchemy.schema.FetchedValue "sqlalchemy.schema.FetchedValue")
    instance, str, Unicode or [`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct representing the DDL DEFAULT value
    for the column.
  id: totrans-1599
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个[`FetchedValue`](defaults.html#sqlalchemy.schema.FetchedValue "sqlalchemy.schema.FetchedValue")实例，str，Unicode或[`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")构造，表示列的DDL DEFAULT值。
- en: 'String types will be emitted as-is, surrounded by single quotes:'
  id: totrans-1600
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 字符串类型将按原样输出，用单引号括起来：
- en: '[PRE298]'
  id: totrans-1601
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE298]'
- en: 'A [`text()`](sqlelement.html#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")
    expression will be rendered as-is, without quotes:'
  id: totrans-1602
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`text()`](sqlelement.html#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")表达式将按原样呈现，不带引号：'
- en: '[PRE299]'
  id: totrans-1603
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE299]'
- en: Strings and text() will be converted into a [`DefaultClause`](defaults.html#sqlalchemy.schema.DefaultClause
    "sqlalchemy.schema.DefaultClause") object upon initialization.
  id: totrans-1604
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 字符串和text()将在初始化时转换为[`DefaultClause`](defaults.html#sqlalchemy.schema.DefaultClause
    "sqlalchemy.schema.DefaultClause")对象。
- en: 'This parameter can also accept complex combinations of contextually valid SQLAlchemy
    expressions or constructs:'
  id: totrans-1605
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此参数还可以接受上下文有效的SQLAlchemy表达式或构造的复杂组合：
- en: '[PRE300]'
  id: totrans-1606
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE300]'
- en: 'The above results in a table created with the following SQL:'
  id: totrans-1607
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以上结果将创建一个使用以下SQL创建的表：
- en: '[PRE301]'
  id: totrans-1608
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE301]'
- en: Use [`FetchedValue`](defaults.html#sqlalchemy.schema.FetchedValue "sqlalchemy.schema.FetchedValue")
    to indicate that an already-existing column will generate a default value on the
    database side which will be available to SQLAlchemy for post-fetch after inserts.
    This construct does not specify any DDL and the implementation is left to the
    database, such as via a trigger.
  id: totrans-1609
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用[`FetchedValue`](defaults.html#sqlalchemy.schema.FetchedValue "sqlalchemy.schema.FetchedValue")表示已经存在的列将在数据库端生成默认值，该值将在插入后可供SQLAlchemy后获取。此构造不指定任何DDL，实现留给数据库，例如通过触发器。
- en: See also
  id: totrans-1610
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Server-invoked DDL-Explicit Default Expressions](defaults.html#server-defaults)
    - complete discussion of server side defaults'
  id: totrans-1611
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[服务器调用的DDL-显式默认表达式](defaults.html#server-defaults) - 有关服务器端默认值的完整讨论'
- en: '`server_onupdate` –'
  id: totrans-1612
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`server_onupdate` –'
- en: A [`FetchedValue`](defaults.html#sqlalchemy.schema.FetchedValue "sqlalchemy.schema.FetchedValue")
    instance representing a database-side default generation function, such as a trigger.
    This indicates to SQLAlchemy that a newly generated value will be available after
    updates. This construct does not actually implement any kind of generation function
    within the database, which instead must be specified separately.
  id: totrans-1613
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个[`FetchedValue`](defaults.html#sqlalchemy.schema.FetchedValue "sqlalchemy.schema.FetchedValue")实例，表示数据库端的默认生成函数，例如触发器。这告诉SQLAlchemy在更新后将可用新生成的值。此构造实际上不在数据库中实现任何生成函数，而必须单独指定。
- en: Warning
  id: totrans-1614
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 警告
- en: This directive **does not** currently produce MySQL’s “ON UPDATE CURRENT_TIMESTAMP()”
    clause. See [Rendering ON UPDATE CURRENT TIMESTAMP for MySQL / MariaDB’s explicit_defaults_for_timestamp](../dialects/mysql.html#mysql-timestamp-onupdate)
    for background on how to produce this clause.
  id: totrans-1615
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此指令**目前不会**生成MySQL的“ON UPDATE CURRENT_TIMESTAMP()”子句。请参阅[为MySQL / MariaDB的explicit_defaults_for_timestamp呈现ON
    UPDATE CURRENT TIMESTAMP](../dialects/mysql.html#mysql-timestamp-onupdate)以了解如何生成此子句的背景信息。
- en: See also
  id: totrans-1616
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Marking Implicitly Generated Values, timestamps, and Triggered Columns](defaults.html#triggered-columns)'
  id: totrans-1617
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[标记隐式生成的值、时间戳和触发列](defaults.html#triggered-columns)'
- en: '`quote` – Force quoting of this column’s name on or off, corresponding to `True`
    or `False`. When left at its default of `None`, the column identifier will be
    quoted according to whether the name is case sensitive (identifiers with at least
    one upper case character are treated as case sensitive), or if it’s a reserved
    word. This flag is only needed to force quoting of a reserved word which is not
    known by the SQLAlchemy dialect.'
  id: totrans-1618
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`quote` – 强制引用此列名，对应`True`或`False`。当保持默认值`None`时，列标识符将根据名称是否区分大小写（至少有一个大写字符的标识符被视为区分大小写），或者是否为保留字来引用。只有在需要强制引用SQLAlchemy方言不知道的保留字时才需要此标志。'
- en: '`unique` –'
  id: totrans-1619
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unique` –'
- en: When `True`, and the [`Column.index`](#sqlalchemy.schema.Column.params.index
    "sqlalchemy.schema.Column") parameter is left at its default value of `False`,
    indicates that a [`UniqueConstraint`](constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") construct will be automatically generated
    for this [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column"), which
    will result in a “UNIQUE CONSTRAINT” clause referring to this column being included
    in the `CREATE TABLE` statement emitted, when the DDL create operation for the
    [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") object is invoked.
  id: totrans-1620
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当为`True`时，并且[`Column.index`](#sqlalchemy.schema.Column.params.index "sqlalchemy.schema.Column")参数保持其默认值为`False`，表示将为此[`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")自动生成一个[`UniqueConstraint`](constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint")构造，这将导致在调用[`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象的DDL创建操作时，包含引用此列的“UNIQUE CONSTRAINT”子句的`CREATE TABLE`语句被发出。
- en: When this flag is `True` while the [`Column.index`](#sqlalchemy.schema.Column.params.index
    "sqlalchemy.schema.Column") parameter is simultaneously set to `True`, the effect
    instead is that a [`Index`](constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    construct which includes the [`Index.unique`](constraints.html#sqlalchemy.schema.Index.params.unique
    "sqlalchemy.schema.Index") parameter set to `True` is generated. See the documentation
    for [`Column.index`](#sqlalchemy.schema.Column.params.index "sqlalchemy.schema.Column")
    for additional detail.
  id: totrans-1621
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当此标志设置为`True`时，同时[`Column.index`](#sqlalchemy.schema.Column.params.index "sqlalchemy.schema.Column")参数也设置为`True`，则效果是生成一个包含[`Index.unique`](constraints.html#sqlalchemy.schema.Index.params.unique
    "sqlalchemy.schema.Index")参数设置为`True`的[`Index`](constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")构造。有关更多详细信息，请参阅[`Column.index`](#sqlalchemy.schema.Column.params.index
    "sqlalchemy.schema.Column")的文档。
- en: 'Using this flag is equivalent to making use of the [`UniqueConstraint`](constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") construct explicitly at the level of the
    [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") construct itself:'
  id: totrans-1622
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用此标志等效于在[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")构造本身的级别上显式使用[`UniqueConstraint`](constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint")构造：
- en: '[PRE302]'
  id: totrans-1623
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE302]'
- en: The [`UniqueConstraint.name`](constraints.html#sqlalchemy.schema.UniqueConstraint.params.name
    "sqlalchemy.schema.UniqueConstraint") parameter of the unique constraint object
    is left at its default value of `None`; in the absence of a [naming convention](constraints.html#constraint-naming-conventions)
    for the enclosing [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData"),
    the UNIQUE CONSTRAINT construct will be emitted as unnamed, which typically invokes
    a database-specific naming convention to take place.
  id: totrans-1624
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 唯一约束对象的[`UniqueConstraint.name`](constraints.html#sqlalchemy.schema.UniqueConstraint.params.name
    "sqlalchemy.schema.UniqueConstraint")参数保持其默认值为`None`；在缺乏对封闭的[`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")的[命名约定](constraints.html#constraint-naming-conventions)的情况下，唯一约束构造将被发出为未命名的，这通常会触发特定于数据库的命名约定。
- en: As this flag is intended only as a convenience for the common case of adding
    a single-column, default configured unique constraint to a table definition, explicit
    use of the [`UniqueConstraint`](constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") construct should be preferred for most use
    cases, including composite constraints that encompass more than one column, backend-specific
    index configuration options, and constraints that use a specific name.
  id: totrans-1625
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于此标志仅用作向表定义添加单列、默认配置的唯一约束的常见情况的便利性，因此在大多数用例中，应优先使用显式使用[`UniqueConstraint`](constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint")构造，包括涵盖多个列的复合约束、特定于后端的索引配置选项以及使用特定名称的约束。
- en: Note
  id: totrans-1626
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: the [`Column.unique`](#sqlalchemy.schema.Column.unique "sqlalchemy.schema.Column.unique")
    attribute on [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    **does not indicate** if this column has a unique constraint or not, only if this
    flag was explicitly set here. To view indexes and unique constraints that may
    involve this column, view the [`Table.indexes`](#sqlalchemy.schema.Table.indexes
    "sqlalchemy.schema.Table.indexes") and/or [`Table.constraints`](#sqlalchemy.schema.Table.constraints
    "sqlalchemy.schema.Table.constraints") collections or use [`Inspector.get_indexes()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_indexes
    "sqlalchemy.engine.reflection.Inspector.get_indexes") and/or [`Inspector.get_unique_constraints()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_unique_constraints
    "sqlalchemy.engine.reflection.Inspector.get_unique_constraints")
  id: totrans-1627
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Column.unique`](#sqlalchemy.schema.Column.unique "sqlalchemy.schema.Column.unique")
    属性在 [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column") 上**不表示**此列是否具有唯一约束，只表示此标志是否在此处被显式设置。要查看可能涉及此列的索引和唯一约束，请查看
    [`Table.indexes`](#sqlalchemy.schema.Table.indexes "sqlalchemy.schema.Table.indexes")
    和/或 [`Table.constraints`](#sqlalchemy.schema.Table.constraints "sqlalchemy.schema.Table.constraints")
    集合，或使用 [`Inspector.get_indexes()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_indexes
    "sqlalchemy.engine.reflection.Inspector.get_indexes") 和/或 [`Inspector.get_unique_constraints()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_unique_constraints
    "sqlalchemy.engine.reflection.Inspector.get_unique_constraints")'
- en: See also
  id: totrans-1628
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[UNIQUE Constraint](constraints.html#schema-unique-constraint)'
  id: totrans-1629
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[唯一约束](constraints.html#schema-unique-constraint)'
- en: '[Configuring Constraint Naming Conventions](constraints.html#constraint-naming-conventions)'
  id: totrans-1630
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[配置约束命名规范](constraints.html#constraint-naming-conventions)'
- en: '[`Column.index`](#sqlalchemy.schema.Column.params.index "sqlalchemy.schema.Column")'
  id: totrans-1631
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Column.index`](#sqlalchemy.schema.Column.params.index "sqlalchemy.schema.Column")'
- en: '`system` –'
  id: totrans-1632
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`system` –'
- en: When `True`, indicates this is a “system” column, that is a column which is
    automatically made available by the database, and should not be included in the
    columns list for a `CREATE TABLE` statement.
  id: totrans-1633
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当为 `True` 时，表示这是一个“系统”列，即数据库自动提供的列，不应包含在 `CREATE TABLE` 语句的列列表中。
- en: For more elaborate scenarios where columns should be conditionally rendered
    differently on different backends, consider custom compilation rules for [`CreateColumn`](ddl.html#sqlalchemy.schema.CreateColumn
    "sqlalchemy.schema.CreateColumn").
  id: totrans-1634
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于更加复杂的情景，在不同的后端条件下应该以不同方式渲染列的情况，考虑为[`CreateColumn`](ddl.html#sqlalchemy.schema.CreateColumn
    "sqlalchemy.schema.CreateColumn")自定义编译规则。
- en: '`comment` –'
  id: totrans-1635
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`comment` –'
- en: Optional string that will render an SQL comment on table creation.
  id: totrans-1636
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选字符串，将在表创建时渲染为 SQL 注释。
- en: 'New in version 1.2: Added the [`Column.comment`](#sqlalchemy.schema.Column.params.comment
    "sqlalchemy.schema.Column") parameter to [`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column").'
  id: totrans-1637
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本 1.2 中的新增内容：增加了 [`Column.comment`](#sqlalchemy.schema.Column.params.comment
    "sqlalchemy.schema.Column") 参数到 [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")。
- en: '`insert_sentinel` –'
  id: totrans-1638
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`insert_sentinel` –'
- en: Marks this [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    as an [insert sentinel](../glossary.html#term-insert-sentinel) used for optimizing
    the performance of the [insertmanyvalues](../glossary.html#term-insertmanyvalues)
    feature for tables that don’t otherwise have qualifying primary key configurations.
  id: totrans-1639
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将此 [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column") 标记为用于优化对于没有其他符合条件的主键配置的表的
    [insertmanyvalues](../glossary.html#term-insertmanyvalues) 功能性能的[插入标志](../glossary.html#term-insert-sentinel)。
- en: New in version 2.0.10.
  id: totrans-1640
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本 2.0.10 中的新增内容。
- en: See also
  id: totrans-1641
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`insert_sentinel()`](#sqlalchemy.schema.insert_sentinel "sqlalchemy.schema.insert_sentinel")
    - all in one helper for declaring sentinel columns'
  id: totrans-1642
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`insert_sentinel()`](#sqlalchemy.schema.insert_sentinel "sqlalchemy.schema.insert_sentinel")
    - 一站式助手，用于声明标志列'
- en: '[“Insert Many Values” Behavior for INSERT statements](connections.html#engine-insertmanyvalues)'
  id: totrans-1643
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[对于 INSERT 语句的“插入多个值”行为](connections.html#engine-insertmanyvalues)'
- en: '[Configuring Sentinel Columns](connections.html#engine-insertmanyvalues-sentinel-columns)'
  id: totrans-1644
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[配置标志列](connections.html#engine-insertmanyvalues-sentinel-columns)'
- en: '[PRE303]'
  id: totrans-1645
  prefs: []
  type: TYPE_PRE
  zh: '[PRE303]'
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__le__` *method
    of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1646
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") *的* `sqlalchemy.sql.expression.ColumnOperators.__le__`
    *方法*'
- en: Implement the `<=` operator.
  id: totrans-1647
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `<=` 运算符。
- en: In a column context, produces the clause `a <= b`.
  id: totrans-1648
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句 `a <= b`。
- en: '[PRE304]'
  id: totrans-1649
  prefs: []
  type: TYPE_PRE
  zh: '[PRE304]'
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__lt__` *method
    of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1650
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `sqlalchemy.sql.expression.ColumnOperators.__lt__` *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `<` operator.
  id: totrans-1651
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `<` 运算符。
- en: In a column context, produces the clause `a < b`.
  id: totrans-1652
  prefs: []
  type: TYPE_NORMAL
  zh: 在列的上下文中，生成子句 `a < b`。
- en: '[PRE305]'
  id: totrans-1653
  prefs: []
  type: TYPE_PRE
  zh: '[PRE305]'
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__ne__` *method
    of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1654
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `sqlalchemy.sql.expression.ColumnOperators.__ne__` *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `!=` operator.
  id: totrans-1655
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `!=` 运算符。
- en: In a column context, produces the clause `a != b`. If the target is `None`,
    produces `a IS NOT NULL`.
  id: totrans-1656
  prefs: []
  type: TYPE_NORMAL
  zh: 在列的上下文中，生成子句 `a != b`。如果目标是 `None`，则生成 `a IS NOT NULL`。
- en: '[PRE306]'
  id: totrans-1657
  prefs: []
  type: TYPE_PRE
  zh: '[PRE306]'
- en: '*inherited from the* [`ColumnOperators.all_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1658
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.all_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") *属性*'
- en: Produce an [`all_()`](sqlelement.html#sqlalchemy.sql.expression.all_ "sqlalchemy.sql.expression.all_")
    clause against the parent object.
  id: totrans-1659
  prefs: []
  type: TYPE_NORMAL
  zh: 针对父对象生成一个 [`all_()`](sqlelement.html#sqlalchemy.sql.expression.all_ "sqlalchemy.sql.expression.all_")
    子句。
- en: See the documentation for [`all_()`](sqlelement.html#sqlalchemy.sql.expression.all_
    "sqlalchemy.sql.expression.all_") for examples.
  id: totrans-1660
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅 [`all_()`](sqlelement.html#sqlalchemy.sql.expression.all_ "sqlalchemy.sql.expression.all_")
    的文档以获取示例。
- en: Note
  id: totrans-1661
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: be sure to not confuse the newer [`ColumnOperators.all_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") method with the **legacy** version
    of this method, the [`Comparator.all()`](type_basics.html#sqlalchemy.types.ARRAY.Comparator.all
    "sqlalchemy.types.ARRAY.Comparator.all") method that’s specific to [`ARRAY`](type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY"), which uses a different calling style.
  id: totrans-1662
  prefs: []
  type: TYPE_NORMAL
  zh: 请确保不要将较新的 [`ColumnOperators.all_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") 方法与此方法的 **传统** 版本混淆，即专用于 [`ARRAY`](type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") 的 [`Comparator.all()`](type_basics.html#sqlalchemy.types.ARRAY.Comparator.all
    "sqlalchemy.types.ARRAY.Comparator.all") 方法，其使用不同的调用风格。
- en: '[PRE307]'
  id: totrans-1663
  prefs: []
  type: TYPE_PRE
  zh: '[PRE307]'
- en: '*inherited from the* [`ColumnElement.anon_key_label`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.anon_key_label
    "sqlalchemy.sql.expression.ColumnElement.anon_key_label") *attribute of* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
  id: totrans-1664
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnElement.anon_key_label`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.anon_key_label
    "sqlalchemy.sql.expression.ColumnElement.anon_key_label") *属性的* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
- en: 'Deprecated since version 1.4: The [`ColumnElement.anon_key_label`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.anon_key_label
    "sqlalchemy.sql.expression.ColumnElement.anon_key_label") attribute is now private,
    and the public accessor is deprecated.'
  id: totrans-1665
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.4 弃用：[`ColumnElement.anon_key_label`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.anon_key_label
    "sqlalchemy.sql.expression.ColumnElement.anon_key_label") 属性现已私有化，公共访问器已弃用。
- en: '[PRE308]'
  id: totrans-1666
  prefs: []
  type: TYPE_PRE
  zh: '[PRE308]'
- en: '*inherited from the* [`ColumnElement.anon_label`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.anon_label
    "sqlalchemy.sql.expression.ColumnElement.anon_label") *attribute of* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
  id: totrans-1667
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnElement.anon_label`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.anon_label
    "sqlalchemy.sql.expression.ColumnElement.anon_label") *属性的* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
- en: 'Deprecated since version 1.4: The [`ColumnElement.anon_label`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.anon_label
    "sqlalchemy.sql.expression.ColumnElement.anon_label") attribute is now private,
    and the public accessor is deprecated.'
  id: totrans-1668
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.4 弃用：[`ColumnElement.anon_label`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.anon_label
    "sqlalchemy.sql.expression.ColumnElement.anon_label") 属性现已私有化，公共访问器已弃用。
- en: '[PRE309]'
  id: totrans-1669
  prefs: []
  type: TYPE_PRE
  zh: '[PRE309]'
- en: '*inherited from the* [`ColumnOperators.any_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1670
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.any_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce an [`any_()`](sqlelement.html#sqlalchemy.sql.expression.any_ "sqlalchemy.sql.expression.any_")
    clause against the parent object.
  id: totrans-1671
  prefs: []
  type: TYPE_NORMAL
  zh: 生成针对父对象的 [`any_()`](sqlelement.html#sqlalchemy.sql.expression.any_ "sqlalchemy.sql.expression.any_")
    子句。
- en: See the documentation for [`any_()`](sqlelement.html#sqlalchemy.sql.expression.any_
    "sqlalchemy.sql.expression.any_") for examples.
  id: totrans-1672
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅 [`any_()`](sqlelement.html#sqlalchemy.sql.expression.any_ "sqlalchemy.sql.expression.any_")
    的文档以获取示例。
- en: Note
  id: totrans-1673
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: be sure to not confuse the newer [`ColumnOperators.any_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") method with the **legacy** version
    of this method, the [`Comparator.any()`](type_basics.html#sqlalchemy.types.ARRAY.Comparator.any
    "sqlalchemy.types.ARRAY.Comparator.any") method that’s specific to [`ARRAY`](type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY"), which uses a different calling style.
  id: totrans-1674
  prefs: []
  type: TYPE_NORMAL
  zh: 一定不要将新版本的 [`ColumnOperators.any_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") 方法与**旧版**方法混淆，旧版方法是专用于 [`ARRAY`](type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") 的 [`Comparator.any()`](type_basics.html#sqlalchemy.types.ARRAY.Comparator.any
    "sqlalchemy.types.ARRAY.Comparator.any") 方法，其调用风格不同。
- en: '[PRE310]'
  id: totrans-1675
  prefs: []
  type: TYPE_PRE
  zh: '[PRE310]'
- en: '*inherited from the* [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") *method of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-1676
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") *方法的* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
- en: Add a new kind of dialect-specific keyword argument for this class.
  id: totrans-1677
  prefs: []
  type: TYPE_NORMAL
  zh: 为这个类添加一种新的方言特定的关键字参数。
- en: 'E.g.:'
  id: totrans-1678
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE311]'
  id: totrans-1679
  prefs: []
  type: TYPE_PRE
  zh: '[PRE311]'
- en: The [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") method is a per-argument way
    adding extra arguments to the [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") dictionary. This
    dictionary provides a list of argument names accepted by various schema-level
    constructs on behalf of a dialect.
  id: totrans-1680
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") 方法是一种逐个添加额外参数到 [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") 字典的方式。该字典为方言代表提供了一组被各种模式级构造接受的参数名称。'
- en: New dialects should typically specify this dictionary all at once as a data
    member of the dialect class. The use case for ad-hoc addition of argument names
    is typically for end-user code that is also using a custom compilation scheme
    which consumes the additional arguments.
  id: totrans-1681
  prefs: []
  type: TYPE_NORMAL
  zh: 新的方言通常应该一次性将此字典作为方言类的数据成员来指定。临时添加参数名称的用例通常是针对终端用户代码的，该代码还使用了消耗附加参数的自定义编译方案。
- en: 'Parameters:'
  id: totrans-1682
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dialect_name` – name of a dialect. The dialect must be locatable, else a [`NoSuchModuleError`](exceptions.html#sqlalchemy.exc.NoSuchModuleError
    "sqlalchemy.exc.NoSuchModuleError") is raised. The dialect must also include an
    existing [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") collection, indicating
    that it participates in the keyword-argument validation and default system, else
    [`ArgumentError`](exceptions.html#sqlalchemy.exc.ArgumentError "sqlalchemy.exc.ArgumentError")
    is raised. If the dialect does not include this collection, then any keyword argument
    can be specified on behalf of this dialect already. All dialects packaged within
    SQLAlchemy include this collection, however for third party dialects, support
    may vary.'
  id: totrans-1683
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect_name` – 方言的名称。方言必须是可定位的，否则会引发 [`NoSuchModuleError`](exceptions.html#sqlalchemy.exc.NoSuchModuleError
    "sqlalchemy.exc.NoSuchModuleError")。方言还必须包括一个现有的 [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") 集合，表示它参与关键字参数验证和默认系统，否则会引发
    [`ArgumentError`](exceptions.html#sqlalchemy.exc.ArgumentError "sqlalchemy.exc.ArgumentError")。如果方言不包括此集合，则可以代表该方言已经指定任何关键字参数。SQLAlchemy
    内置的所有方言都包含此集合，但是对于第三方方言，支持可能有所不同。'
- en: '`argument_name` – name of the parameter.'
  id: totrans-1684
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`argument_name` – 参数的名称。'
- en: '`default` – default value of the parameter.'
  id: totrans-1685
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default` – 参数的默认值。'
- en: '[PRE312]'
  id: totrans-1686
  prefs: []
  type: TYPE_PRE
  zh: '[PRE312]'
- en: '*inherited from the* [`ColumnOperators.asc()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.asc
    "sqlalchemy.sql.expression.ColumnOperators.asc") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1687
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.asc()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.asc
    "sqlalchemy.sql.expression.ColumnOperators.asc") *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`asc()`](sqlelement.html#sqlalchemy.sql.expression.asc "sqlalchemy.sql.expression.asc")
    clause against the parent object.
  id: totrans-1688
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个针对父对象的 [`asc()`](sqlelement.html#sqlalchemy.sql.expression.asc "sqlalchemy.sql.expression.asc")
    子句。
- en: '[PRE313]'
  id: totrans-1689
  prefs: []
  type: TYPE_PRE
  zh: '[PRE313]'
- en: '*inherited from the* [`ColumnOperators.between()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.between
    "sqlalchemy.sql.expression.ColumnOperators.between") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1690
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.between()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.between
    "sqlalchemy.sql.expression.ColumnOperators.between") *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`between()`](sqlelement.html#sqlalchemy.sql.expression.between "sqlalchemy.sql.expression.between")
    clause against the parent object, given the lower and upper range.
  id: totrans-1691
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个针对父对象的 [`between()`](sqlelement.html#sqlalchemy.sql.expression.between "sqlalchemy.sql.expression.between")
    子句，给定下限和上限。
- en: '[PRE314]'
  id: totrans-1692
  prefs: []
  type: TYPE_PRE
  zh: '[PRE314]'
- en: '*inherited from the* [`ColumnOperators.bitwise_and()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_and
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_and") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1693
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.bitwise_and()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_and
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_and") *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a bitwise AND operation, typically via the `&` operator.
  id: totrans-1694
  prefs: []
  type: TYPE_NORMAL
  zh: 执行按位 AND 操作，通常通过 `&` 运算符。
- en: New in version 2.0.2.
  id: totrans-1695
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0.2 中新增。
- en: See also
  id: totrans-1696
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](operators.html#operators-bitwise)'
  id: totrans-1697
  prefs: []
  type: TYPE_NORMAL
  zh: '[位运算符](operators.html#operators-bitwise)'
- en: '[PRE315]'
  id: totrans-1698
  prefs: []
  type: TYPE_PRE
  zh: '[PRE315]'
- en: '*inherited from the* [`ColumnOperators.bitwise_lshift()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1699
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.bitwise_lshift()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift") *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a bitwise LSHIFT operation, typically via the `<<` operator.
  id: totrans-1700
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个按位 LSHIFT 操作，通常通过 `<<` 运算符。
- en: New in version 2.0.2.
  id: totrans-1701
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0.2 中新增。
- en: See also
  id: totrans-1702
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](operators.html#operators-bitwise)'
  id: totrans-1703
  prefs: []
  type: TYPE_NORMAL
  zh: '[位运算符](operators.html#operators-bitwise)'
- en: '[PRE316]'
  id: totrans-1704
  prefs: []
  type: TYPE_PRE
  zh: '[PRE316]'
- en: '*inherited from the* [`ColumnOperators.bitwise_not()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_not
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_not") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1705
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.bitwise_not()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_not
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_not") *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a bitwise NOT operation, typically via the `~` operator.
  id: totrans-1706
  prefs: []
  type: TYPE_NORMAL
  zh: 执行按位非操作，通常通过 `~` 运算符。
- en: New in version 2.0.2.
  id: totrans-1707
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0.2 中的新功能。
- en: See also
  id: totrans-1708
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](operators.html#operators-bitwise)'
  id: totrans-1709
  prefs: []
  type: TYPE_NORMAL
  zh: '[位运算符](operators.html#operators-bitwise)'
- en: '[PRE317]'
  id: totrans-1710
  prefs: []
  type: TYPE_PRE
  zh: '[PRE317]'
- en: '*inherited from the* [`ColumnOperators.bitwise_or()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_or
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_or") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1711
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.bitwise_or()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_or
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_or") *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a bitwise OR operation, typically via the `|` operator.
  id: totrans-1712
  prefs: []
  type: TYPE_NORMAL
  zh: 执行按位或操作，通常通过 `|` 运算符。
- en: New in version 2.0.2.
  id: totrans-1713
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0.2 中的新功能。
- en: See also
  id: totrans-1714
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](operators.html#operators-bitwise)'
  id: totrans-1715
  prefs: []
  type: TYPE_NORMAL
  zh: '[位运算符](operators.html#operators-bitwise)'
- en: '[PRE318]'
  id: totrans-1716
  prefs: []
  type: TYPE_PRE
  zh: '[PRE318]'
- en: '*inherited from the* [`ColumnOperators.bitwise_rshift()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1717
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.bitwise_rshift()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift") *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a bitwise RSHIFT operation, typically via the `>>` operator.
  id: totrans-1718
  prefs: []
  type: TYPE_NORMAL
  zh: 执行按位右移操作，通常通过 `>>` 运算符。
- en: New in version 2.0.2.
  id: totrans-1719
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0.2 中的新功能。
- en: See also
  id: totrans-1720
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](operators.html#operators-bitwise)'
  id: totrans-1721
  prefs: []
  type: TYPE_NORMAL
  zh: '[位运算符](operators.html#operators-bitwise)'
- en: '[PRE319]'
  id: totrans-1722
  prefs: []
  type: TYPE_PRE
  zh: '[PRE319]'
- en: '*inherited from the* [`ColumnOperators.bitwise_xor()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_xor
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_xor") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1723
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.bitwise_xor()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_xor
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_xor") *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a bitwise XOR operation, typically via the `^` operator, or `#` for
    PostgreSQL.
  id: totrans-1724
  prefs: []
  type: TYPE_NORMAL
  zh: 执行按位异或操作，通常通过 `^` 运算符，或 PostgreSQL 中的 `#` 运算符。
- en: New in version 2.0.2.
  id: totrans-1725
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0.2 中的新功能。
- en: See also
  id: totrans-1726
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](operators.html#operators-bitwise)'
  id: totrans-1727
  prefs: []
  type: TYPE_NORMAL
  zh: '[位运算符](operators.html#operators-bitwise)'
- en: '[PRE320]'
  id: totrans-1728
  prefs: []
  type: TYPE_PRE
  zh: '[PRE320]'
- en: '*inherited from the* [`Operators.bool_op()`](sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") *method of* [`Operators`](sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  id: totrans-1729
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Operators.bool_op()`](sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") *方法的* [`Operators`](sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
- en: Return a custom boolean operator.
  id: totrans-1730
  prefs: []
  type: TYPE_NORMAL
  zh: 返回自定义布尔运算符。
- en: This method is shorthand for calling [`Operators.op()`](sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") and passing the [`Operators.op.is_comparison`](sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op") flag with True. A key advantage to using
    [`Operators.bool_op()`](sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") is that when using column constructs,
    the “boolean” nature of the returned expression will be present for [**PEP 484**](https://peps.python.org/pep-0484/)
    purposes.
  id: totrans-1731
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法是调用 [`Operators.op()`](sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") 并传递 [`Operators.op.is_comparison`](sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op") 标志为 True 的简写。 使用 [`Operators.bool_op()`](sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") 的一个关键优势是，在使用列构造时，返回表达式的“布尔”性质将出现在
    [**PEP 484**](https://peps.python.org/pep-0484/) 目的中。
- en: See also
  id: totrans-1732
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Operators.op()`](sqlelement.html#sqlalchemy.sql.expression.Operators.op "sqlalchemy.sql.expression.Operators.op")'
  id: totrans-1733
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Operators.op()`](sqlelement.html#sqlalchemy.sql.expression.Operators.op "sqlalchemy.sql.expression.Operators.op")'
- en: '[PRE321]'
  id: totrans-1734
  prefs: []
  type: TYPE_PRE
  zh: '[PRE321]'
- en: '*inherited from the* [`ColumnElement.cast()`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.cast
    "sqlalchemy.sql.expression.ColumnElement.cast") *method of* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
  id: totrans-1735
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnElement.cast()`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.cast
    "sqlalchemy.sql.expression.ColumnElement.cast") *方法的* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
- en: Produce a type cast, i.e. `CAST(<expression> AS <type>)`.
  id: totrans-1736
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个类型转换，即`CAST(<expression> AS <type>)`。
- en: This is a shortcut to the [`cast()`](sqlelement.html#sqlalchemy.sql.expression.cast
    "sqlalchemy.sql.expression.cast") function.
  id: totrans-1737
  prefs: []
  type: TYPE_NORMAL
  zh: 这是[`cast()`](sqlelement.html#sqlalchemy.sql.expression.cast "sqlalchemy.sql.expression.cast")函数的快捷方式。
- en: See also
  id: totrans-1738
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Data Casts and Type Coercion](../tutorial/data_select.html#tutorial-casts)'
  id: totrans-1739
  prefs: []
  type: TYPE_NORMAL
  zh: '[数据转换和类型强制转换](../tutorial/data_select.html#tutorial-casts)'
- en: '[`cast()`](sqlelement.html#sqlalchemy.sql.expression.cast "sqlalchemy.sql.expression.cast")'
  id: totrans-1740
  prefs: []
  type: TYPE_NORMAL
  zh: '[`cast()`](sqlelement.html#sqlalchemy.sql.expression.cast "sqlalchemy.sql.expression.cast")'
- en: '[`type_coerce()`](sqlelement.html#sqlalchemy.sql.expression.type_coerce "sqlalchemy.sql.expression.type_coerce")'
  id: totrans-1741
  prefs: []
  type: TYPE_NORMAL
  zh: '[`type_coerce()`](sqlelement.html#sqlalchemy.sql.expression.type_coerce "sqlalchemy.sql.expression.type_coerce")'
- en: '[PRE322]'
  id: totrans-1742
  prefs: []
  type: TYPE_PRE
  zh: '[PRE322]'
- en: '*inherited from the* [`ColumnOperators.collate()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.collate
    "sqlalchemy.sql.expression.ColumnOperators.collate") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1743
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.collate()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.collate
    "sqlalchemy.sql.expression.ColumnOperators.collate") *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`collate()`](sqlelement.html#sqlalchemy.sql.expression.collate "sqlalchemy.sql.expression.collate")
    clause against the parent object, given the collation string.
  id: totrans-1744
  prefs: []
  type: TYPE_NORMAL
  zh: 对父对象产生一个[`collate()`](sqlelement.html#sqlalchemy.sql.expression.collate "sqlalchemy.sql.expression.collate")子句，给定排序规则字符串。
- en: See also
  id: totrans-1745
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`collate()`](sqlelement.html#sqlalchemy.sql.expression.collate "sqlalchemy.sql.expression.collate")'
  id: totrans-1746
  prefs: []
  type: TYPE_NORMAL
  zh: '[`collate()`](sqlelement.html#sqlalchemy.sql.expression.collate "sqlalchemy.sql.expression.collate")'
- en: '[PRE323]'
  id: totrans-1747
  prefs: []
  type: TYPE_PRE
  zh: '[PRE323]'
- en: '*inherited from the* [`ClauseElement.compare()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.compare
    "sqlalchemy.sql.expression.ClauseElement.compare") *method of* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
  id: totrans-1748
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ClauseElement.compare()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.compare
    "sqlalchemy.sql.expression.ClauseElement.compare") *方法的* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
- en: Compare this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") to the given [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  id: totrans-1749
  prefs: []
  type: TYPE_NORMAL
  zh: 将此[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")与给定的[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")进行比较。
- en: Subclasses should override the default behavior, which is a straight identity
    comparison.
  id: totrans-1750
  prefs: []
  type: TYPE_NORMAL
  zh: 子类应该重写默认行为，这是一个简单的身份比较。
- en: '**kw are arguments consumed by subclass `compare()` methods and may be used
    to modify the criteria for comparison (see [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")).'
  id: totrans-1751
  prefs: []
  type: TYPE_NORMAL
  zh: '**kw 是子类 `compare()` 方法消耗的参数，可以用来修改比较的标准（参见[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")）。'
- en: '[PRE324]'
  id: totrans-1752
  prefs: []
  type: TYPE_PRE
  zh: '[PRE324]'
- en: '*inherited from the* `CompilerElement.compile()` *method of* `CompilerElement`'
  id: totrans-1753
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `CompilerElement.compile()` *方法的* `CompilerElement`'
- en: Compile this SQL expression.
  id: totrans-1754
  prefs: []
  type: TYPE_NORMAL
  zh: 编译这个 SQL 表达式。
- en: The return value is a [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object. Calling `str()` or `unicode()` on the returned
    value will yield a string representation of the result. The [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object also can return a dictionary of bind parameter
    names and values using the `params` accessor.
  id: totrans-1755
  prefs: []
  type: TYPE_NORMAL
  zh: 返回值是一个[`Compiled`](internals.html#sqlalchemy.engine.Compiled "sqlalchemy.engine.Compiled")对象。对返回值调用`str()`或`unicode()`将产生结果的字符串表示。[`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled")对象还可以使用`params`访问器返回绑定参数名称和值的字典。
- en: 'Parameters:'
  id: totrans-1756
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`bind` – An [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    or [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    which can provide a [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    in order to generate a [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object. If the `bind` and `dialect` parameters are
    both omitted, a default SQL compiler is used.'
  id: totrans-1757
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bind` – 一个[`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")或[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")，可以提供一个[`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect")以生成一个[`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled")对象。如果`bind`和`dialect`参数都被省略，将使用默认的SQL编译器。'
- en: '`column_keys` – Used for INSERT and UPDATE statements, a list of column names
    which should be present in the VALUES clause of the compiled statement. If `None`,
    all columns from the target table object are rendered.'
  id: totrans-1758
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`column_keys` – 用于INSERT和UPDATE语句，应该出现在编译语句的VALUES子句中的列名列表。如果为`None`，则从目标表对象中渲染所有列。'
- en: '`dialect` – A [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    instance which can generate a [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object. This argument takes precedence over the
    `bind` argument.'
  id: totrans-1759
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect` – 一个[`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")实例，可以生成一个[`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled")对象。此参数优先于`bind`参数。'
- en: '`compile_kwargs` –'
  id: totrans-1760
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`compile_kwargs` –'
- en: 'optional dictionary of additional parameters that will be passed through to
    the compiler within all “visit” methods. This allows any custom flag to be passed
    through to a custom compilation construct, for example. It is also used for the
    case of passing the `literal_binds` flag through:'
  id: totrans-1761
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的字典，其中包含将传递给所有“visit”方法中的编译器的附加参数。这允许将任何自定义标志传递给自定义编译结构，例如。它还用于通过传递`literal_binds`标志的情况：
- en: '[PRE325]'
  id: totrans-1762
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE325]'
- en: See also
  id: totrans-1763
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[How do I render SQL expressions as strings, possibly with bound parameters
    inlined?](../faq/sqlexpressions.html#faq-sql-expression-string)'
  id: totrans-1764
  prefs: []
  type: TYPE_NORMAL
  zh: '[如何将SQL表达式呈现为字符串，可能包含内联的绑定参数？](../faq/sqlexpressions.html#faq-sql-expression-string)'
- en: '[PRE326]'
  id: totrans-1765
  prefs: []
  type: TYPE_PRE
  zh: '[PRE326]'
- en: '*inherited from the* [`ColumnOperators.concat()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.concat
    "sqlalchemy.sql.expression.ColumnOperators.concat") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1766
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.concat()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.concat
    "sqlalchemy.sql.expression.ColumnOperators.concat") *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the ‘concat’ operator.
  id: totrans-1767
  prefs: []
  type: TYPE_NORMAL
  zh: 实现‘concat’操作符。
- en: In a column context, produces the clause `a || b`, or uses the `concat()` operator
    on MySQL.
  id: totrans-1768
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句`a || b`，或者在MySQL上使用`concat()`操作符。
- en: '[PRE327]'
  id: totrans-1769
  prefs: []
  type: TYPE_PRE
  zh: '[PRE327]'
- en: '*inherited from the* [`ColumnOperators.contains()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1770
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.contains()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains") *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the ‘contains’ operator.
  id: totrans-1771
  prefs: []
  type: TYPE_NORMAL
  zh: 实现‘contains’操作符。
- en: 'Produces a LIKE expression that tests against a match for the middle of a string
    value:'
  id: totrans-1772
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个LIKE表达式，测试字符串值的中间匹配：
- en: '[PRE328]'
  id: totrans-1773
  prefs: []
  type: TYPE_PRE
  zh: '[PRE328]'
- en: 'E.g.:'
  id: totrans-1774
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE329]'
  id: totrans-1775
  prefs: []
  type: TYPE_PRE
  zh: '[PRE329]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.contains.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.contains.escape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.contains") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-1776
  prefs: []
  type: TYPE_NORMAL
  zh: 由于操作符使用了`LIKE`，因此存在于<other>表达式中的通配符字符`"%"`和`"_"`也将像通配符一样起作用。对于字面字符串值，可以设置[`ColumnOperators.contains.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains")标志为`True`，以对字符串值内的这些字符出现进行转义，使它们作为自身而不是通配符字符匹配。或者，[`ColumnOperators.contains.escape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.contains")参数将建立给定字符作为转义字符，当目标表达式不是字面字符串时可以派上用场。
- en: 'Parameters:'
  id: totrans-1777
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.contains.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains") flag is set to True.'
  id: totrans-1778
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要比较的表达式。通常这是一个简单的字符串值，但也可以是任意的SQL表达式。默认情况下，不对LIKE通配符字符`%`和`_`进行转义，除非设置了[`ColumnOperators.contains.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains")标志为True。'
- en: '`autoescape` –'
  id: totrans-1779
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-1780
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值；当为True时，在LIKE表达式中建立一个转义字符，然后将其应用于比较值内的所有`"%"`、`"_"`和转义字符本身的出现，假定比较值为字面字符串而不是SQL表达式。
- en: 'An expression such as:'
  id: totrans-1781
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如下表达式：
- en: '[PRE330]'
  id: totrans-1782
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE330]'
- en: 'Will render as:'
  id: totrans-1783
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 渲染为：
- en: '[PRE331]'
  id: totrans-1784
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE331]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-1785
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以值`：param`为`"foo/%bar"`。
- en: '`escape` –'
  id: totrans-1786
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-1787
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字符，当给出时将使用`ESCAPE`关键字以建立该字符作为转义字符。然后，可以将此字符放置在`%`和`_`的前面，以允许它们作为自身而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-1788
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如下表达式：
- en: '[PRE332]'
  id: totrans-1789
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE332]'
- en: 'Will render as:'
  id: totrans-1790
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 渲染为：
- en: '[PRE333]'
  id: totrans-1791
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE333]'
- en: 'The parameter may also be combined with [`ColumnOperators.contains.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains"):'
  id: totrans-1792
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该参数也可以与[`ColumnOperators.contains.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains")组合使用：
- en: '[PRE334]'
  id: totrans-1793
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE334]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-1794
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述情况下，给定的字面参数将在传递给数据库之前转换为`"foo^%bar^^bat"`。
- en: See also
  id: totrans-1795
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.startswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
  id: totrans-1796
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.startswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
- en: '[`ColumnOperators.endswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
  id: totrans-1797
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.endswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
- en: '[`ColumnOperators.like()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-1798
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE335]'
  id: totrans-1799
  prefs: []
  type: TYPE_PRE
  zh: '[PRE335]'
- en: 'Deprecated since version 1.4: The [`Column.copy()`](#sqlalchemy.schema.Column.copy
    "sqlalchemy.schema.Column.copy") method is deprecated and will be removed in a
    future release.'
  id: totrans-1800
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.4起已弃用：[`Column.copy()`](#sqlalchemy.schema.Column.copy "sqlalchemy.schema.Column.copy")方法已弃用，将在将来的版本中删除。
- en: '[PRE336]'
  id: totrans-1801
  prefs: []
  type: TYPE_PRE
  zh: '[PRE336]'
- en: '*inherited from the* [`ColumnOperators.desc()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.desc
    "sqlalchemy.sql.expression.ColumnOperators.desc") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1802
  prefs: []
  type: TYPE_NORMAL
  zh: 继承自 [`ColumnOperators.desc()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.desc
    "sqlalchemy.sql.expression.ColumnOperators.desc") *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")
- en: Produce a [`desc()`](sqlelement.html#sqlalchemy.sql.expression.desc "sqlalchemy.sql.expression.desc")
    clause against the parent object.
  id: totrans-1803
  prefs: []
  type: TYPE_NORMAL
  zh: 生成针对父对象的 [`desc()`](sqlelement.html#sqlalchemy.sql.expression.desc "sqlalchemy.sql.expression.desc")
    子句。
- en: '[PRE337]'
  id: totrans-1804
  prefs: []
  type: TYPE_PRE
  zh: '[PRE337]'
- en: '*inherited from the* [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-1805
  prefs: []
  type: TYPE_NORMAL
  zh: 继承自 [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") *属性的* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")
- en: A collection of keyword arguments specified as dialect-specific options to this
    construct.
  id: totrans-1806
  prefs: []
  type: TYPE_NORMAL
  zh: 作为特定于方言的选项指定的关键字参数的集合，用于此结构。
- en: The arguments are present here in their original `<dialect>_<kwarg>` format.
    Only arguments that were actually passed are included; unlike the [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") collection, which contains
    all options known by this dialect including defaults.
  id: totrans-1807
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的参数以其原始 `<dialect>_<kwarg>` 格式呈现。仅包括实际传递的参数；不像 [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") 集合，该集合包含此方言已知的所有选项，包括默认值。
- en: The collection is also writable; keys are accepted of the form `<dialect>_<kwarg>`
    where the value will be assembled into the list of options.
  id: totrans-1808
  prefs: []
  type: TYPE_NORMAL
  zh: 集合也是可写的；接受形式为 `<dialect>_<kwarg>` 的键，其值将被组装到选项列表中。
- en: See also
  id: totrans-1809
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") - nested dictionary form'
  id: totrans-1810
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") - 嵌套字典形式'
- en: '[PRE338]'
  id: totrans-1811
  prefs: []
  type: TYPE_PRE
  zh: '[PRE338]'
- en: '*inherited from the* [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-1812
  prefs: []
  type: TYPE_NORMAL
  zh: 继承自 [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") *属性的* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")
- en: A collection of keyword arguments specified as dialect-specific options to this
    construct.
  id: totrans-1813
  prefs: []
  type: TYPE_NORMAL
  zh: 作为特定于方言的选项指定的关键字参数的集合，用于此结构。
- en: 'This is a two-level nested registry, keyed to `<dialect_name>` and `<argument_name>`.
    For example, the `postgresql_where` argument would be locatable as:'
  id: totrans-1814
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个两级嵌套的注册表，键入 `<dialect_name>` 和 `<argument_name>`。例如，`postgresql_where` 参数可以定位为：
- en: '[PRE339]'
  id: totrans-1815
  prefs: []
  type: TYPE_PRE
  zh: '[PRE339]'
- en: New in version 0.9.2.
  id: totrans-1816
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 0.9.2 开始新增。
- en: See also
  id: totrans-1817
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") - flat dictionary form'
  id: totrans-1818
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") - 平面字典形式'
- en: '[PRE340]'
  id: totrans-1819
  prefs: []
  type: TYPE_PRE
  zh: '[PRE340]'
- en: '*inherited from the* [`ColumnOperators.distinct()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.distinct
    "sqlalchemy.sql.expression.ColumnOperators.distinct") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1820
  prefs: []
  type: TYPE_NORMAL
  zh: 继承自 [`ColumnOperators.distinct()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.distinct
    "sqlalchemy.sql.expression.ColumnOperators.distinct") *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")
- en: Produce a [`distinct()`](sqlelement.html#sqlalchemy.sql.expression.distinct
    "sqlalchemy.sql.expression.distinct") clause against the parent object.
  id: totrans-1821
  prefs: []
  type: TYPE_NORMAL
  zh: 生成针对父对象的 [`distinct()`](sqlelement.html#sqlalchemy.sql.expression.distinct "sqlalchemy.sql.expression.distinct")
    子句。
- en: '[PRE341]'
  id: totrans-1822
  prefs: []
  type: TYPE_PRE
  zh: '[PRE341]'
- en: '*inherited from the* [`ColumnOperators.endswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1823
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`ColumnOperators.endswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith") *方法继承的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the ‘endswith’ operator.
  id: totrans-1824
  prefs: []
  type: TYPE_NORMAL
  zh: 实现“endswith”操作符。
- en: 'Produces a LIKE expression that tests against a match for the end of a string
    value:'
  id: totrans-1825
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个LIKE表达式，用于测试字符串值的结尾是否匹配：
- en: '[PRE342]'
  id: totrans-1826
  prefs: []
  type: TYPE_PRE
  zh: '[PRE342]'
- en: 'E.g.:'
  id: totrans-1827
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE343]'
  id: totrans-1828
  prefs: []
  type: TYPE_PRE
  zh: '[PRE343]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.endswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.endswith.escape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-1829
  prefs: []
  type: TYPE_NORMAL
  zh: 由于操作符使用`LIKE`，因此存在于<other>表达式内部的通配符字符`"%"`和`"_"`也将像通配符一样起作用。对于文字字符串值，可以将[`ColumnOperators.endswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith")标志设置为`True`，以将这些字符在字符串值内的出现进行转义，使它们匹配为自己而不是通配符字符。或者，[`ColumnOperators.endswith.escape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.endswith")参数将建立一个给定的字符作为转义字符，这在目标表达式不是文字字符串时可能会有用。
- en: 'Parameters:'
  id: totrans-1830
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.endswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") flag is set to True.'
  id: totrans-1831
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要比较的表达式。这通常是一个纯文字字符串值，但也可以是任意的SQL表达式。默认情况下，LIKE通配符字符`%`和`_`不会被转义，除非将[`ColumnOperators.endswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith")标志设置为True。'
- en: '`autoescape` –'
  id: totrans-1832
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-1833
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: boolean；当为True时，在LIKE表达式中建立一个转义字符，然后将其应用于比较值内所有出现的`"%"`、`"_"`和转义字符本身，假定该值为文字字符串而不是SQL表达式。
- en: 'An expression such as:'
  id: totrans-1834
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个表达式，例如：
- en: '[PRE344]'
  id: totrans-1835
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE344]'
- en: 'Will render as:'
  id: totrans-1836
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE345]'
  id: totrans-1837
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE345]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-1838
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用`param`的值为`"foo/%bar"`。
- en: '`escape` –'
  id: totrans-1839
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-1840
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字符，当给定时，将使用`ESCAPE`关键字将该字符确定为转义字符。然后可以将此字符放在`%`和`_`的前面，以允许它们作为自己而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-1841
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个表达式，例如：
- en: '[PRE346]'
  id: totrans-1842
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE346]'
- en: 'Will render as:'
  id: totrans-1843
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE347]'
  id: totrans-1844
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE347]'
- en: 'The parameter may also be combined with [`ColumnOperators.endswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith"):'
  id: totrans-1845
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参数也可以与[`ColumnOperators.endswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith")组合使用：
- en: '[PRE348]'
  id: totrans-1846
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE348]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-1847
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述示例中，给定的文字参数在传递到数据库之前将转换为`"foo^%bar^^bat"`。
- en: See also
  id: totrans-1848
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.startswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
  id: totrans-1849
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.startswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
- en: '[`ColumnOperators.contains()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
  id: totrans-1850
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.contains()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
- en: '[`ColumnOperators.like()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-1851
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE349]'
  id: totrans-1852
  prefs: []
  type: TYPE_PRE
  zh: '[PRE349]'
- en: '*inherited from the* [`ColumnElement.expression`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.expression
    "sqlalchemy.sql.expression.ColumnElement.expression") *attribute of* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
  id: totrans-1853
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`ColumnElement.expression`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.expression
    "sqlalchemy.sql.expression.ColumnElement.expression") *属性继承* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
- en: Return a column expression.
  id: totrans-1854
  prefs: []
  type: TYPE_NORMAL
  zh: 返回列表达式。
- en: Part of the inspection interface; returns self.
  id: totrans-1855
  prefs: []
  type: TYPE_NORMAL
  zh: 检查接口的一部分；返回自身。
- en: '[PRE350]'
  id: totrans-1856
  prefs: []
  type: TYPE_PRE
  zh: '[PRE350]'
- en: '*inherited from the* [`ColumnElement.foreign_keys`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.foreign_keys
    "sqlalchemy.sql.expression.ColumnElement.foreign_keys") *attribute of* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
  id: totrans-1857
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`ColumnElement.foreign_keys`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.foreign_keys
    "sqlalchemy.sql.expression.ColumnElement.foreign_keys") *属性继承* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
- en: A collection of all [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") marker objects associated with this [`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column").
  id: totrans-1858
  prefs: []
  type: TYPE_NORMAL
  zh: 所有与此 [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column") 关联的 [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") 标记对象的集合。
- en: Each object is a member of a [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")-wide
    [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint").
  id: totrans-1859
  prefs: []
  type: TYPE_NORMAL
  zh: 每个对象都是 [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") 范围内的 [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") 的成员。
- en: See also
  id: totrans-1860
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Table.foreign_keys`](#sqlalchemy.schema.Table.foreign_keys "sqlalchemy.schema.Table.foreign_keys")'
  id: totrans-1861
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Table.foreign_keys`](#sqlalchemy.schema.Table.foreign_keys "sqlalchemy.schema.Table.foreign_keys")'
- en: '[PRE351]'
  id: totrans-1862
  prefs: []
  type: TYPE_PRE
  zh: '[PRE351]'
- en: '*inherited from the* [`ColumnClause.get_children()`](sqlelement.html#sqlalchemy.sql.expression.ColumnClause.get_children
    "sqlalchemy.sql.expression.ColumnClause.get_children") *method of* [`ColumnClause`](sqlelement.html#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause")'
  id: totrans-1863
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`ColumnClause.get_children()`](sqlelement.html#sqlalchemy.sql.expression.ColumnClause.get_children
    "sqlalchemy.sql.expression.ColumnClause.get_children") *方法继承* [`ColumnClause`](sqlelement.html#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause")'
- en: Return immediate child `HasTraverseInternals` elements of this `HasTraverseInternals`.
  id: totrans-1864
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此 `HasTraverseInternals` 的直接子元素 `HasTraverseInternals`。
- en: This is used for visit traversal.
  id: totrans-1865
  prefs: []
  type: TYPE_NORMAL
  zh: 这用于访问遍历。
- en: '**kw may contain flags that change the collection that is returned, for example
    to return a subset of items in order to cut down on larger traversals, or to return
    child items from a different context (such as schema-level collections instead
    of clause-level).'
  id: totrans-1866
  prefs: []
  type: TYPE_NORMAL
  zh: '**kw 可以包含更改返回的集合的标志，例如以便返回子项的子集以减少较大的遍历量，或者从不同上下文（例如模式级集合而不是子句级别）返回子项。'
- en: '[PRE352]'
  id: totrans-1867
  prefs: []
  type: TYPE_PRE
  zh: '[PRE352]'
- en: '*inherited from the* [`ColumnOperators.icontains()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains
    "sqlalchemy.sql.expression.ColumnOperators.icontains") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1868
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`ColumnOperators.icontains()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains
    "sqlalchemy.sql.expression.ColumnOperators.icontains") *方法继承* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `icontains` operator, e.g. case insensitive version of [`ColumnOperators.contains()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains").
  id: totrans-1869
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `icontains` 运算符，例如 [`ColumnOperators.contains()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains") 的不区分大小写版本。
- en: 'Produces a LIKE expression that tests against an insensitive match for the
    middle of a string value:'
  id: totrans-1870
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个 LIKE 表达式，用于测试字符串值中间的不区分大小写的匹配：
- en: '[PRE353]'
  id: totrans-1871
  prefs: []
  type: TYPE_PRE
  zh: '[PRE353]'
- en: 'E.g.:'
  id: totrans-1872
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE354]'
  id: totrans-1873
  prefs: []
  type: TYPE_PRE
  zh: '[PRE354]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.icontains.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.icontains.escape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-1874
  prefs: []
  type: TYPE_NORMAL
  zh: 由于该操作符使用`LIKE`，因此在<other>表达式内部存在的通配符字符`"%"`和`"_"`也将像通配符一样运行。对于字面字符串值，可以将[`ColumnOperators.icontains.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.icontains")标志设置为True，以对字符串值内部这些字符的出现应用转义，使它们匹配为自身而不是通配符字符。或者，[`ColumnOperators.icontains.escape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.icontains")参数将建立给定字符作为转义字符，当目标表达式不是字面字符串时这可能会有用。
- en: 'Parameters:'
  id: totrans-1875
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.icontains.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") flag is set to True.'
  id: totrans-1876
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要比较的表达式。这通常是一个简单的字符串值，但也可以是任意的SQL表达式。LIKE通配符字符`%`和`_`默认情况下不会被转义，除非将[`ColumnOperators.icontains.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.icontains")标志设置为True。'
- en: '`autoescape` –'
  id: totrans-1877
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-1878
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: boolean；当为True时，在LIKE表达式中建立转义字符，然后将其应用于比较值中的所有出现的`"%"`、`"_"`和转义字符本身，假定比较值是字面字符串而不是SQL表达式。
- en: 'An expression such as:'
  id: totrans-1879
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如表达式：
- en: '[PRE355]'
  id: totrans-1880
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE355]'
- en: 'Will render as:'
  id: totrans-1881
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE356]'
  id: totrans-1882
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE356]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-1883
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将`:param`的值设为`"foo/%bar"`。
- en: '`escape` –'
  id: totrans-1884
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-1885
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字符，当给定时，将使用`ESCAPE`关键字来建立该字符作为转义字符。然后，可以将该字符放在`%`和`_`之前，以允许它们作为自身而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-1886
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如表达式：
- en: '[PRE357]'
  id: totrans-1887
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE357]'
- en: 'Will render as:'
  id: totrans-1888
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE358]'
  id: totrans-1889
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE358]'
- en: 'The parameter may also be combined with [`ColumnOperators.contains.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains"):'
  id: totrans-1890
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参数也可以与[`ColumnOperators.contains.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains")结合使用：
- en: '[PRE359]'
  id: totrans-1891
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE359]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-1892
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述情况下，给定的字面参数将在传递到数据库之前被转换为`"foo^%bar^^bat"`。
- en: See also
  id: totrans-1893
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.contains()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
  id: totrans-1894
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.contains()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
- en: '[PRE360]'
  id: totrans-1895
  prefs: []
  type: TYPE_PRE
  zh: '[PRE360]'
- en: '*inherited from the* [`ColumnOperators.iendswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1896
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.iendswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `iendswith` operator, e.g. case insensitive version of [`ColumnOperators.endswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith").
  id: totrans-1897
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`iendswith`操作符，例如，[`ColumnOperators.endswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")的不区分大小写版本。
- en: 'Produces a LIKE expression that tests against an insensitive match for the
    end of a string value:'
  id: totrans-1898
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个 LIKE 表达式，用于对字符串值的结尾进行大小写不敏感匹配：
- en: '[PRE361]'
  id: totrans-1899
  prefs: []
  type: TYPE_PRE
  zh: '[PRE361]'
- en: 'E.g.:'
  id: totrans-1900
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE362]'
  id: totrans-1901
  prefs: []
  type: TYPE_PRE
  zh: '[PRE362]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.iendswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.iendswith.escape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-1902
  prefs: []
  type: TYPE_NORMAL
  zh: 由于该运算符使用 `LIKE`，所以存在于 <other> 表达式内部的通配符字符 `"%"` 和 `"_"` 也会像通配符一样行为。对于字面字符串值，可以将
    [`ColumnOperators.iendswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") 标志设置为 `True`，以对字符串值内部的这些字符进行转义，使它们不会被识别为通配符字符而是作为自身匹配。或者，[`ColumnOperators.iendswith.escape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") 参数将建立一个给定的字符作为转义字符，当目标表达式不是字面字符串时会有用。
- en: 'Parameters:'
  id: totrans-1903
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.iendswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") flag is set to True.'
  id: totrans-1904
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 表达式用于比较。通常是一个普通字符串值，但也可以是任意的 SQL 表达式。LIKE 通配符字符 `%` 和 `_` 默认情况下不会被转义，除非
    [`ColumnOperators.iendswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") 标志设置为 True。'
- en: '`autoescape` –'
  id: totrans-1905
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-1906
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值；当为 True 时，在 LIKE 表达式中建立一个转义字符，然后将其应用于比较值中的所有 `"%"`、`"_"` 和转义字符本身的出现次数，假定比较值是一个字面字符串而不是
    SQL 表达式。
- en: 'An expression such as:'
  id: totrans-1907
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个如下的表达式：
- en: '[PRE363]'
  id: totrans-1908
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE363]'
- en: 'Will render as:'
  id: totrans-1909
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 渲染为：
- en: '[PRE364]'
  id: totrans-1910
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE364]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-1911
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 `:param` 参数值为 `"foo/%bar"`。
- en: '`escape` –'
  id: totrans-1912
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-1913
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 给定一个字符，将会在 `ESCAPE` 关键字后面呈现，将该字符作为转义字符。然后可以将此字符放在 `%` 和 `_` 的前面，以允许它们作为自身而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-1914
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个如下的表达式：
- en: '[PRE365]'
  id: totrans-1915
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE365]'
- en: 'Will render as:'
  id: totrans-1916
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 渲染为：
- en: '[PRE366]'
  id: totrans-1917
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE366]'
- en: 'The parameter may also be combined with [`ColumnOperators.iendswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith"):'
  id: totrans-1918
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该参数还可以与 [`ColumnOperators.iendswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") 结合使用：
- en: '[PRE367]'
  id: totrans-1919
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE367]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-1920
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述情况下，给定的字面参数将在传递到数据库之前转换为 `"foo^%bar^^bat"`。
- en: See also
  id: totrans-1921
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.endswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
  id: totrans-1922
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.endswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
- en: '[PRE368]'
  id: totrans-1923
  prefs: []
  type: TYPE_PRE
  zh: '[PRE368]'
- en: '*inherited from the* [`ColumnOperators.ilike()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1924
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.ilike()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike") *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `ilike` operator, e.g. case insensitive LIKE.
  id: totrans-1925
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `ilike` 运算符，例如大小写不敏感的 LIKE。
- en: 'In a column context, produces an expression either of the form:'
  id: totrans-1926
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成一个形如：
- en: '[PRE369]'
  id: totrans-1927
  prefs: []
  type: TYPE_PRE
  zh: '[PRE369]'
- en: 'Or on backends that support the ILIKE operator:'
  id: totrans-1928
  prefs: []
  type: TYPE_NORMAL
  zh: 或在支持 ILIKE 运算符的后端上：
- en: '[PRE370]'
  id: totrans-1929
  prefs: []
  type: TYPE_PRE
  zh: '[PRE370]'
- en: 'E.g.:'
  id: totrans-1930
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE371]'
  id: totrans-1931
  prefs: []
  type: TYPE_PRE
  zh: '[PRE371]'
- en: 'Parameters:'
  id: totrans-1932
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared'
  id: totrans-1933
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要比较的表达式'
- en: '`escape` –'
  id: totrans-1934
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: 'optional escape character, renders the `ESCAPE` keyword, e.g.:'
  id: totrans-1935
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的转义字符，呈现`ESCAPE`关键字，例如：
- en: '[PRE372]'
  id: totrans-1936
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE372]'
- en: See also
  id: totrans-1937
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`ColumnOperators.like()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-1938
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE373]'
  id: totrans-1939
  prefs: []
  type: TYPE_PRE
  zh: '[PRE373]'
- en: '*inherited from the* [`ColumnOperators.in_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1940
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.in_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") *的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") *方法*'
- en: Implement the `in` operator.
  id: totrans-1941
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `in` 运算符。
- en: In a column context, produces the clause `column IN <other>`.
  id: totrans-1942
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句`column IN <other>`。
- en: 'The given parameter `other` may be:'
  id: totrans-1943
  prefs: []
  type: TYPE_NORMAL
  zh: 给定参数`other`可以是：
- en: 'A list of literal values, e.g.:'
  id: totrans-1944
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个字面值列表，例如：
- en: '[PRE374]'
  id: totrans-1945
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE374]'
- en: 'In this calling form, the list of items is converted to a set of bound parameters
    the same length as the list given:'
  id: totrans-1946
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此调用形式中，项目列表将转换为与给定列表长度相同的一组绑定参数：
- en: '[PRE375]'
  id: totrans-1947
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE375]'
- en: 'A list of tuples may be provided if the comparison is against a [`tuple_()`](sqlelement.html#sqlalchemy.sql.expression.tuple_
    "sqlalchemy.sql.expression.tuple_") containing multiple expressions:'
  id: totrans-1948
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果比较是针对包含多个表达式的 [`tuple_()`](sqlelement.html#sqlalchemy.sql.expression.tuple_
    "sqlalchemy.sql.expression.tuple_")，则可以提供元组列表：
- en: '[PRE376]'
  id: totrans-1949
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE376]'
- en: 'An empty list, e.g.:'
  id: totrans-1950
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个空列表，例如：
- en: '[PRE377]'
  id: totrans-1951
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE377]'
- en: 'In this calling form, the expression renders an “empty set” expression. These
    expressions are tailored to individual backends and are generally trying to get
    an empty SELECT statement as a subquery. Such as on SQLite, the expression is:'
  id: totrans-1952
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此调用形式中，该表达式呈现一个“空集”表达式。这些表达式针对各个后端进行了定制，并且通常试图将一个空的 SELECT 语句作为子查询。例如在 SQLite
    上，该表达式是：
- en: '[PRE378]'
  id: totrans-1953
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE378]'
- en: 'Changed in version 1.4: empty IN expressions now use an execution-time generated
    SELECT subquery in all cases.'
  id: totrans-1954
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自 1.4 版本更改：在所有情况下，空 IN 表达式现在都使用运行时生成的 SELECT 子查询。
- en: 'A bound parameter, e.g. [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam"), may be used if it includes the [`bindparam.expanding`](sqlelement.html#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam") flag:'
  id: totrans-1955
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果包括 [`bindparam.expanding`](sqlelement.html#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam") 标志，则可以使用一个绑定参数，例如 [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")：
- en: '[PRE379]'
  id: totrans-1956
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE379]'
- en: 'In this calling form, the expression renders a special non-SQL placeholder
    expression that looks like:'
  id: totrans-1957
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此调用形式中，该表达式呈现一个特殊的非 SQL 占位符表达式，看起来像：
- en: '[PRE380]'
  id: totrans-1958
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE380]'
- en: 'This placeholder expression is intercepted at statement execution time to be
    converted into the variable number of bound parameter form illustrated earlier.
    If the statement were executed as:'
  id: totrans-1959
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此占位符表达式在语句执行时被拦截，以转换为前面所示的变量数目的绑定参数形式。如果执行语句为：
- en: '[PRE381]'
  id: totrans-1960
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE381]'
- en: 'The database would be passed a bound parameter for each value:'
  id: totrans-1961
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 数据库将传递一个绑定参数给每个值：
- en: '[PRE382]'
  id: totrans-1962
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE382]'
- en: 'New in version 1.2: added “expanding” bound parameters'
  id: totrans-1963
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自 1.2 版本新功能：添加了“扩展”绑定参数
- en: 'If an empty list is passed, a special “empty list” expression, which is specific
    to the database in use, is rendered. On SQLite this would be:'
  id: totrans-1964
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果传递了一个空列表，则呈现一个特殊的“空列表”表达式，该表达式特定于正在使用的数据库。在 SQLite 上，将会是：
- en: '[PRE383]'
  id: totrans-1965
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE383]'
- en: 'New in version 1.3: “expanding” bound parameters now support empty lists'
  id: totrans-1966
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自 1.3 版本新功能：“扩展”绑定参数现在支持空列表
- en: 'a [`select()`](selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    construct, which is usually a correlated scalar select:'
  id: totrans-1967
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 [`select()`](selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    构造，通常是一个相关的标量选择：
- en: '[PRE384]'
  id: totrans-1968
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE384]'
- en: 'In this calling form, [`ColumnOperators.in_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") renders as given:'
  id: totrans-1969
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此调用形式中，[`ColumnOperators.in_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") 的呈现如下：
- en: '[PRE385]'
  id: totrans-1970
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE385]'
- en: 'Parameters:'
  id: totrans-1971
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**other** – a list of literals, a [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct, or a [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") construct that includes the [`bindparam.expanding`](sqlelement.html#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam") flag set to True.'
  id: totrans-1972
  prefs: []
  type: TYPE_NORMAL
  zh: '**其他** – 一系列文字、[`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")构造，或包括[`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")构造，其中[`bindparam.expanding`](sqlelement.html#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam")标志设置为True。'
- en: '[PRE386]'
  id: totrans-1973
  prefs: []
  type: TYPE_PRE
  zh: '[PRE386]'
- en: The value of the [`Column.index`](#sqlalchemy.schema.Column.params.index "sqlalchemy.schema.Column")
    parameter.
  id: totrans-1974
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Column.index`](#sqlalchemy.schema.Column.params.index "sqlalchemy.schema.Column")参数的值。'
- en: Does not indicate if this [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    is actually indexed or not; use [`Table.indexes`](#sqlalchemy.schema.Table.indexes
    "sqlalchemy.schema.Table.indexes").
  id: totrans-1975
  prefs: []
  type: TYPE_NORMAL
  zh: 不指示此[`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")是否实际上已被索引；请使用[`Table.indexes`](#sqlalchemy.schema.Table.indexes
    "sqlalchemy.schema.Table.indexes")。
- en: See also
  id: totrans-1976
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Table.indexes`](#sqlalchemy.schema.Table.indexes "sqlalchemy.schema.Table.indexes")'
  id: totrans-1977
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Table.indexes`](#sqlalchemy.schema.Table.indexes "sqlalchemy.schema.Table.indexes")的值。'
- en: '[PRE387]'
  id: totrans-1978
  prefs: []
  type: TYPE_PRE
  zh: '[PRE387]'
- en: '*inherited from the* [`SchemaItem.info`](#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info") *attribute of* [`SchemaItem`](#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem")'
  id: totrans-1979
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SchemaItem.info`](#sqlalchemy.schema.SchemaItem.info "sqlalchemy.schema.SchemaItem.info")
    *属性的* [`SchemaItem`](#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")'
- en: Info dictionary associated with the object, allowing user-defined data to be
    associated with this [`SchemaItem`](#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem").
  id: totrans-1980
  prefs: []
  type: TYPE_NORMAL
  zh: 与该[`SchemaItem`](#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")关联的信息字典，允许将用户定义的数据与此关联。
- en: The dictionary is automatically generated when first accessed. It can also be
    specified in the constructor of some objects, such as [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") and [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column").
  id: totrans-1981
  prefs: []
  type: TYPE_NORMAL
  zh: 当首次访问时，字典会自动生成。也可以在某些对象的构造函数中指定，例如[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")和[`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")。
- en: '[PRE388]'
  id: totrans-1982
  prefs: []
  type: TYPE_PRE
  zh: '[PRE388]'
- en: Indicate if this [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") instance should make use of the cache
    key generation scheme used by its immediate superclass.
  id: totrans-1983
  prefs: []
  type: TYPE_NORMAL
  zh: 指示此[`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey "sqlalchemy.sql.traversals.HasCacheKey")实例是否应使用其直接超类使用的缓存键生成方案。
- en: The attribute defaults to `None`, which indicates that a construct has not yet
    taken into account whether or not its appropriate for it to participate in caching;
    this is functionally equivalent to setting the value to `False`, except that a
    warning is also emitted.
  id: totrans-1984
  prefs: []
  type: TYPE_NORMAL
  zh: 该属性默认为`None`，表示构造尚未考虑是否适合参与缓存；这在功能上等同于将值设置为`False`，只是还会发出警告。
- en: This flag can be set to `True` on a particular class, if the SQL that corresponds
    to the object does not change based on attributes which are local to this class,
    and not its superclass.
  id: totrans-1985
  prefs: []
  type: TYPE_NORMAL
  zh: 如果与此类本地相关而不是其超类的属性不会更改与对象对应的SQL，则可以在特定类上将此标志设置为`True`。
- en: See also
  id: totrans-1986
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Enabling Caching Support for Custom Constructs](compiler.html#compilerext-caching)
    - General guideslines for setting the [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute for third-party
    or user defined SQL constructs.'
  id: totrans-1987
  prefs: []
  type: TYPE_NORMAL
  zh: '[为自定义构造启用缓存支持](compiler.html#compilerext-caching) - 设置第三方或用户定义的SQL构造的[`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache")属性的一般指南。'
- en: '[PRE389]'
  id: totrans-1988
  prefs: []
  type: TYPE_PRE
  zh: '[PRE389]'
- en: '*inherited from the* [`ColumnOperators.is_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1989
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.is_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_") *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `IS` operator.
  id: totrans-1990
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`IS`运算符。
- en: Normally, `IS` is generated automatically when comparing to a value of `None`,
    which resolves to `NULL`. However, explicit usage of `IS` may be desirable if
    comparing to boolean values on certain platforms.
  id: totrans-1991
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当与`None`的值进行比较时，`IS`会自动生成，其解析为`NULL`。然而，在某些平台上，如果与布尔值进行比较，则可能希望显式使用`IS`。
- en: See also
  id: totrans-1992
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.is_not()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not")'
  id: totrans-1993
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.is_not()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not")'
- en: '[PRE390]'
  id: totrans-1994
  prefs: []
  type: TYPE_PRE
  zh: '[PRE390]'
- en: '*inherited from the* [`ColumnOperators.is_distinct_from()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_distinct_from") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1995
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.is_distinct_from()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_distinct_from") *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `IS DISTINCT FROM` operator.
  id: totrans-1996
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`IS DISTINCT FROM`运算符。
- en: Renders “a IS DISTINCT FROM b” on most platforms; on some such as SQLite may
    render “a IS NOT b”.
  id: totrans-1997
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数平台上渲染为“a IS DISTINCT FROM b”；在某些平台上，例如SQLite，可能会渲染为“a IS NOT b”。
- en: '[PRE391]'
  id: totrans-1998
  prefs: []
  type: TYPE_PRE
  zh: '[PRE391]'
- en: '*inherited from the* [`ColumnOperators.is_not()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1999
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.is_not()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not") *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `IS NOT` operator.
  id: totrans-2000
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`IS NOT`运算符。
- en: Normally, `IS NOT` is generated automatically when comparing to a value of `None`,
    which resolves to `NULL`. However, explicit usage of `IS NOT` may be desirable
    if comparing to boolean values on certain platforms.
  id: totrans-2001
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当与`None`的值进行比较时，`IS NOT`会自动生成，其解析为`NULL`。然而，在某些平台上，如果与布尔值进行比较，则可能希望显式使用`IS
    NOT`。
- en: 'Changed in version 1.4: The `is_not()` operator is renamed from `isnot()` in
    previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-2002
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始：`is_not()`运算符从先前版本的`isnot()`重命名。先前的名称仍然可用于向后兼容。
- en: See also
  id: totrans-2003
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.is_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_")'
  id: totrans-2004
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.is_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_")'
- en: '[PRE392]'
  id: totrans-2005
  prefs: []
  type: TYPE_PRE
  zh: '[PRE392]'
- en: '*inherited from the* [`ColumnOperators.is_not_distinct_from()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_not_distinct_from") *method of*
    [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2006
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.is_not_distinct_from()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_not_distinct_from") *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `IS NOT DISTINCT FROM` operator.
  id: totrans-2007
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`IS NOT DISTINCT FROM`运算符。
- en: Renders “a IS NOT DISTINCT FROM b” on most platforms; on some such as SQLite
    may render “a IS b”.
  id: totrans-2008
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数平台上渲染为“a IS NOT DISTINCT FROM b”；在某些平台上，例如SQLite，可能会渲染为“a IS b”。
- en: 'Changed in version 1.4: The `is_not_distinct_from()` operator is renamed from
    `isnot_distinct_from()` in previous releases. The previous name remains available
    for backwards compatibility.'
  id: totrans-2009
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始：`is_not_distinct_from()`运算符从先前版本的`isnot_distinct_from()`重命名。先前的名称仍然可用于向后兼容。
- en: '[PRE393]'
  id: totrans-2010
  prefs: []
  type: TYPE_PRE
  zh: '[PRE393]'
- en: '*inherited from the* [`ColumnOperators.isnot()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot
    "sqlalchemy.sql.expression.ColumnOperators.isnot") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2011
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.isnot()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot
    "sqlalchemy.sql.expression.ColumnOperators.isnot") *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `IS NOT` operator.
  id: totrans-2012
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`IS NOT`运算符。
- en: Normally, `IS NOT` is generated automatically when comparing to a value of `None`,
    which resolves to `NULL`. However, explicit usage of `IS NOT` may be desirable
    if comparing to boolean values on certain platforms.
  id: totrans-2013
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当与`None`的值进行比较时，`IS NOT`会自动生成，其解析为`NULL`。然而，在某些平台上，如果与布尔值进行比较，则可能希望显式使用`IS
    NOT`。
- en: 'Changed in version 1.4: The `is_not()` operator is renamed from `isnot()` in
    previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-2014
  prefs: []
  type: TYPE_NORMAL
  zh: 在 1.4 版本中更改：`is_not()`运算符从之前的版本中的`isnot()`更名。之前的名称仍可用于向后兼容。
- en: See also
  id: totrans-2015
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.is_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_")'
  id: totrans-2016
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.is_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_")'
- en: '[PRE394]'
  id: totrans-2017
  prefs: []
  type: TYPE_PRE
  zh: '[PRE394]'
- en: '*inherited from the* [`ColumnOperators.isnot_distinct_from()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2018
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.isnot_distinct_from()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from") *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `IS NOT DISTINCT FROM` operator.
  id: totrans-2019
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`IS NOT DISTINCT FROM`运算符。
- en: Renders “a IS NOT DISTINCT FROM b” on most platforms; on some such as SQLite
    may render “a IS b”.
  id: totrans-2020
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数平台上渲染为“a IS NOT DISTINCT FROM b”；在某些平台上如 SQLite 可以渲染为“a IS b”。
- en: 'Changed in version 1.4: The `is_not_distinct_from()` operator is renamed from
    `isnot_distinct_from()` in previous releases. The previous name remains available
    for backwards compatibility.'
  id: totrans-2021
  prefs: []
  type: TYPE_NORMAL
  zh: 在 1.4 版本中更改：`is_not_distinct_from()`运算符从之前的版本中的`isnot_distinct_from()`更名。之前的名称仍可用于向后兼容。
- en: '[PRE395]'
  id: totrans-2022
  prefs: []
  type: TYPE_PRE
  zh: '[PRE395]'
- en: '*inherited from the* [`ColumnOperators.istartswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2023
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.istartswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `istartswith` operator, e.g. case insensitive version of [`ColumnOperators.startswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith").
  id: totrans-2024
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`istartswith`运算符，例如 [`ColumnOperators.startswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith") 的不区分大小写版本。
- en: 'Produces a LIKE expression that tests against an insensitive match for the
    start of a string value:'
  id: totrans-2025
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个 LIKE 表达式，用于对字符串值的起始部分进行不区分大小写的匹配：
- en: '[PRE396]'
  id: totrans-2026
  prefs: []
  type: TYPE_PRE
  zh: '[PRE396]'
- en: 'E.g.:'
  id: totrans-2027
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE397]'
  id: totrans-2028
  prefs: []
  type: TYPE_PRE
  zh: '[PRE397]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.istartswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.istartswith.escape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-2029
  prefs: []
  type: TYPE_NORMAL
  zh: 由于该运算符使用了 `LIKE`，所以在 <other> 表达式中存在的通配符字符 `"%"` 和 `"_"` 也会像通配符一样运行。对于文字字符串值，可以将
    [`ColumnOperators.istartswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") 标志设置为 `True`，以对字符串值中这些字符的出现应用转义，以便它们与它们自身匹配，而不是作为通配符字符。或者，[`ColumnOperators.istartswith.escape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") 参数将建立一个给定字符作为转义字符，当目标表达式不是文字字符串时可以派上用场。
- en: 'Parameters:'
  id: totrans-2030
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.istartswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") flag is set to True.'
  id: totrans-2031
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要进行比较的表达式。通常这是一个纯字符串值，但也可以是任意的 SQL 表达式。除非设置了 [`ColumnOperators.istartswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") 标志为 True，否则默认情况下不会转义
    LIKE 通配符字符 `%` 和 `_`。'
- en: '`autoescape` –'
  id: totrans-2032
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-2033
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值；当为True时，在LIKE表达式中建立转义字符，然后将其应用于比较值中的所有`"%"`、`"_"`和转义字符本身的出现，假定比较值为文字字符串而不是SQL表达式。
- en: 'An expression such as:'
  id: totrans-2034
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE398]'
  id: totrans-2035
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE398]'
- en: 'Will render as:'
  id: totrans-2036
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 渲染为：
- en: '[PRE399]'
  id: totrans-2037
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE399]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-2038
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 值为`:param`，表示为`"foo/%bar"`。
- en: '`escape` –'
  id: totrans-2039
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-2040
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字符，当给出时，将使用`ESCAPE`关键字来将该字符作为转义字符。然后可以将此字符放置在`%`和`_`之前的位置，以允许它们作为自身而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-2041
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE400]'
  id: totrans-2042
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE400]'
- en: 'Will render as:'
  id: totrans-2043
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 渲染为：
- en: '[PRE401]'
  id: totrans-2044
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE401]'
- en: 'The parameter may also be combined with [`ColumnOperators.istartswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith"):'
  id: totrans-2045
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该参数也可以与[`ColumnOperators.istartswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith")结合使用：
- en: '[PRE402]'
  id: totrans-2046
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE402]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-2047
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述情况下，给定的字面参数将在传递到数据库之前转换为`"foo^%bar^^bat"`。
- en: See also
  id: totrans-2048
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`ColumnOperators.startswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
  id: totrans-2049
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.startswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
- en: '[PRE403]'
  id: totrans-2050
  prefs: []
  type: TYPE_PRE
  zh: '[PRE403]'
- en: '*inherited from the* [`ColumnElement.key`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.key
    "sqlalchemy.sql.expression.ColumnElement.key") *attribute of* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
  id: totrans-2051
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnElement.key`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.key
    "sqlalchemy.sql.expression.ColumnElement.key") *属性的* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
- en: The ‘key’ that in some circumstances refers to this object in a Python namespace.
  id: totrans-2052
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下指代Python命名空间中的该对象的‘key’。
- en: This typically refers to the “key” of the column as present in the `.c` collection
    of a selectable, e.g. `sometable.c["somekey"]` would return a [`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") with a `.key` of “somekey”.
  id: totrans-2053
  prefs: []
  type: TYPE_NORMAL
  zh: 这通常指的是在可选择的`.c`集合中作为列的“key”存在，例如，`sometable.c["somekey"]`将返回一个具有“somekey”作为`.key`的[`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")。
- en: '[PRE404]'
  id: totrans-2054
  prefs: []
  type: TYPE_PRE
  zh: '[PRE404]'
- en: '*inherited from the* [`DialectKWArgs.kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.kwargs
    "sqlalchemy.sql.base.DialectKWArgs.kwargs") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-2055
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs.kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.kwargs
    "sqlalchemy.sql.base.DialectKWArgs.kwargs") *属性的* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
- en: A synonym for [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs").
  id: totrans-2056
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs")的同义词。'
- en: '[PRE405]'
  id: totrans-2057
  prefs: []
  type: TYPE_PRE
  zh: '[PRE405]'
- en: '*inherited from the* [`ColumnElement.label()`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.label
    "sqlalchemy.sql.expression.ColumnElement.label") *method of* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
  id: totrans-2058
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnElement.label()`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.label
    "sqlalchemy.sql.expression.ColumnElement.label") *方法的* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
- en: Produce a column label, i.e. `<columnname> AS <name>`.
  id: totrans-2059
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个列标签，即`<columnname> AS <name>`。
- en: This is a shortcut to the [`label()`](sqlelement.html#sqlalchemy.sql.expression.label
    "sqlalchemy.sql.expression.label") function.
  id: totrans-2060
  prefs: []
  type: TYPE_NORMAL
  zh: 这是[`label()`](sqlelement.html#sqlalchemy.sql.expression.label "sqlalchemy.sql.expression.label")函数的快捷方式。
- en: If ‘name’ is `None`, an anonymous label name will be generated.
  id: totrans-2061
  prefs: []
  type: TYPE_NORMAL
  zh: 如果‘name’为`None`，将生成一个匿名标签名称。
- en: '[PRE406]'
  id: totrans-2062
  prefs: []
  type: TYPE_PRE
  zh: '[PRE406]'
- en: '*inherited from the* [`ColumnOperators.like()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2063
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.like()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like") *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `like` operator.
  id: totrans-2064
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `like` 操作符。
- en: 'In a column context, produces the expression:'
  id: totrans-2065
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，产生表达式：
- en: '[PRE407]'
  id: totrans-2066
  prefs: []
  type: TYPE_PRE
  zh: '[PRE407]'
- en: 'E.g.:'
  id: totrans-2067
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE408]'
  id: totrans-2068
  prefs: []
  type: TYPE_PRE
  zh: '[PRE408]'
- en: 'Parameters:'
  id: totrans-2069
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared'
  id: totrans-2070
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要比较的表达式'
- en: '`escape` –'
  id: totrans-2071
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: 'optional escape character, renders the `ESCAPE` keyword, e.g.:'
  id: totrans-2072
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选转义字符，渲染 `ESCAPE` 关键字，例如：
- en: '[PRE409]'
  id: totrans-2073
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE409]'
- en: See also
  id: totrans-2074
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`ColumnOperators.ilike()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
  id: totrans-2075
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.ilike()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
- en: '[PRE410]'
  id: totrans-2076
  prefs: []
  type: TYPE_PRE
  zh: '[PRE410]'
- en: '*inherited from the* [`ColumnOperators.match()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2077
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.match()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implements a database-specific ‘match’ operator.
  id: totrans-2078
  prefs: []
  type: TYPE_NORMAL
  zh: 实现特定于数据库的‘匹配’操作符。
- en: '[`ColumnOperators.match()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") attempts to resolve to a MATCH-like
    function or operator provided by the backend. Examples include:'
  id: totrans-2079
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.match()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") 尝试解析为后端提供的 MATCH 类似函数或操作符。示例包括：'
- en: PostgreSQL - renders `x @@ plainto_tsquery(y)`
  id: totrans-2080
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PostgreSQL - 渲染 `x @@ plainto_tsquery(y)`
- en: 'Changed in version 2.0: `plainto_tsquery()` is used instead of `to_tsquery()`
    for PostgreSQL now; for compatibility with other forms, see [Full Text Search](../dialects/postgresql.html#postgresql-match).'
  id: totrans-2081
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 版本 2.0 中的更改：现在 PostgreSQL 使用 `plainto_tsquery()` 代替 `to_tsquery()`；有关其他形式的兼容性，请参阅[全文搜索](../dialects/postgresql.html#postgresql-match)。
- en: MySQL - renders `MATCH (x) AGAINST (y IN BOOLEAN MODE)`
  id: totrans-2082
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL - 渲染 `MATCH (x) AGAINST (y IN BOOLEAN MODE)`
- en: See also
  id: totrans-2083
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`match`](../dialects/mysql.html#sqlalchemy.dialects.mysql.match "sqlalchemy.dialects.mysql.match")
    - MySQL specific construct with additional features.'
  id: totrans-2084
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`match`](../dialects/mysql.html#sqlalchemy.dialects.mysql.match "sqlalchemy.dialects.mysql.match")
    - 具有额外功能的 MySQL 特定构造。'
- en: Oracle - renders `CONTAINS(x, y)`
  id: totrans-2085
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Oracle - 渲染 `CONTAINS(x, y)`
- en: other backends may provide special implementations.
  id: totrans-2086
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他后端可能提供特殊实现。
- en: Backends without any special implementation will emit the operator as “MATCH”.
    This is compatible with SQLite, for example.
  id: totrans-2087
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有任何特殊实现的后端将作为“MATCH”发出操作符。例如，这与 SQLite 兼容。
- en: '[PRE411]'
  id: totrans-2088
  prefs: []
  type: TYPE_PRE
  zh: '[PRE411]'
- en: '*inherited from the* [`ColumnOperators.not_ilike()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_ilike
    "sqlalchemy.sql.expression.ColumnOperators.not_ilike") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2089
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.not_ilike()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_ilike
    "sqlalchemy.sql.expression.ColumnOperators.not_ilike") *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: implement the `NOT ILIKE` operator.
  id: totrans-2090
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `NOT ILIKE` 操作符。
- en: This is equivalent to using negation with [`ColumnOperators.ilike()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike"), i.e. `~x.ilike(y)`.
  id: totrans-2091
  prefs: []
  type: TYPE_NORMAL
  zh: 这等效于使用否定与 [`ColumnOperators.ilike()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")，即 `~x.ilike(y)`。
- en: 'Changed in version 1.4: The `not_ilike()` operator is renamed from `notilike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-2092
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中的更改：`not_ilike()` 操作符在以前的版本中从 `notilike()` 重命名。以前的名称仍可用于向后兼容。
- en: See also
  id: totrans-2093
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`ColumnOperators.ilike()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
  id: totrans-2094
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.ilike()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
- en: '[PRE412]'
  id: totrans-2095
  prefs: []
  type: TYPE_PRE
  zh: '[PRE412]'
- en: '*inherited from the* [`ColumnOperators.not_in()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2096
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") *的* [`ColumnOperators.not_in()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") *方法继承*'
- en: implement the `NOT IN` operator.
  id: totrans-2097
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`NOT IN`操作符。
- en: This is equivalent to using negation with [`ColumnOperators.in_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_"), i.e. `~x.in_(y)`.
  id: totrans-2098
  prefs: []
  type: TYPE_NORMAL
  zh: 这等同于在[`ColumnOperators.in_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")中使用否定，即`~x.in_(y)`。
- en: In the case that `other` is an empty sequence, the compiler produces an “empty
    not in” expression. This defaults to the expression “1 = 1” to produce true in
    all cases. The [`create_engine.empty_in_strategy`](engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine") may be used to alter this behavior.
  id: totrans-2099
  prefs: []
  type: TYPE_NORMAL
  zh: 当`other`是一个空序列时，编译器会生成一个“空不在”表达式。这默认为表达式“1 = 1”，在所有情况下产生true。[`create_engine.empty_in_strategy`](engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine") 可用于修改此行为。
- en: 'Changed in version 1.4: The `not_in()` operator is renamed from `notin_()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-2100
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.4版本中更改：`not_in()`操作符从先前版本的`notin_()`中改名。先前的名称仍可用于向后兼容性。
- en: 'Changed in version 1.2: The [`ColumnOperators.in_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") and [`ColumnOperators.not_in()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") operators now produce a “static”
    expression for an empty IN sequence by default.'
  id: totrans-2101
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.2版本中更改：[`ColumnOperators.in_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") 和 [`ColumnOperators.not_in()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") 操作现在默认情况下为一个空的IN序列生成“静态”表达式。
- en: See also
  id: totrans-2102
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.in_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")'
  id: totrans-2103
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.in_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")'
- en: '[PRE413]'
  id: totrans-2104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE413]'
- en: '*inherited from the* [`ColumnOperators.not_like()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_like
    "sqlalchemy.sql.expression.ColumnOperators.not_like") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2105
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") *的* [`ColumnOperators.not_like()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_like
    "sqlalchemy.sql.expression.ColumnOperators.not_like") *方法继承*'
- en: implement the `NOT LIKE` operator.
  id: totrans-2106
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`NOT LIKE`操作符。
- en: This is equivalent to using negation with [`ColumnOperators.like()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like"), i.e. `~x.like(y)`.
  id: totrans-2107
  prefs: []
  type: TYPE_NORMAL
  zh: 这等同于在[`ColumnOperators.like()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")中使用否定，即`~x.like(y)`。
- en: 'Changed in version 1.4: The `not_like()` operator is renamed from `notlike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-2108
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.4版本中更改：`not_like()`操作符从先前版本的`notlike()`中改名。先前的名称仍可用于向后兼容性。
- en: See also
  id: totrans-2109
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.like()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-2110
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE414]'
  id: totrans-2111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE414]'
- en: '*inherited from the* [`ColumnOperators.notilike()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notilike
    "sqlalchemy.sql.expression.ColumnOperators.notilike") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2112
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") *的* [`ColumnOperators.notilike()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notilike
    "sqlalchemy.sql.expression.ColumnOperators.notilike") *方法继承*'
- en: implement the `NOT ILIKE` operator.
  id: totrans-2113
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`NOT ILIKE`操作符。
- en: This is equivalent to using negation with [`ColumnOperators.ilike()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike"), i.e. `~x.ilike(y)`.
  id: totrans-2114
  prefs: []
  type: TYPE_NORMAL
  zh: 这等同于在[`ColumnOperators.ilike()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")中使用否定，即`~x.ilike(y)`。
- en: 'Changed in version 1.4: The `not_ilike()` operator is renamed from `notilike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-2115
  prefs: []
  type: TYPE_NORMAL
  zh: 从 1.4 版本开始更改：`not_ilike()` 操作符从先前版本的 `notilike()` 重命名为 `not_ilike()`。先前的名称仍可用于向后兼容。
- en: See also
  id: totrans-2116
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.ilike()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
  id: totrans-2117
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.ilike()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
- en: '[PRE415]'
  id: totrans-2118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE415]'
- en: '*inherited from the* [`ColumnOperators.notin_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notin_
    "sqlalchemy.sql.expression.ColumnOperators.notin_") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2119
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.notin_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notin_
    "sqlalchemy.sql.expression.ColumnOperators.notin_") *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: implement the `NOT IN` operator.
  id: totrans-2120
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `NOT IN` 操作符。
- en: This is equivalent to using negation with [`ColumnOperators.in_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_"), i.e. `~x.in_(y)`.
  id: totrans-2121
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于使用 [`ColumnOperators.in_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") 时使用否定，即 `~x.in_(y)`。
- en: In the case that `other` is an empty sequence, the compiler produces an “empty
    not in” expression. This defaults to the expression “1 = 1” to produce true in
    all cases. The [`create_engine.empty_in_strategy`](engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine") may be used to alter this behavior.
  id: totrans-2122
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `other` 为空序列的情况下，编译器会生成一个“空 not in” 表达式。默认情况下，这默认为表达式“1 = 1”，以在所有情况下产生 true。可以使用
    [`create_engine.empty_in_strategy`](engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine") 来更改此行为。
- en: 'Changed in version 1.4: The `not_in()` operator is renamed from `notin_()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-2123
  prefs: []
  type: TYPE_NORMAL
  zh: 从 1.4 版本开始更改：`not_in()` 操作符从先前版本的 `notin_()` 重命名为 `not_in()`。先前的名称仍可用于向后兼容。
- en: 'Changed in version 1.2: The [`ColumnOperators.in_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") and [`ColumnOperators.not_in()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") operators now produce a “static”
    expression for an empty IN sequence by default.'
  id: totrans-2124
  prefs: []
  type: TYPE_NORMAL
  zh: 从 1.2 版本开始更改：[`ColumnOperators.in_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") 和 [`ColumnOperators.not_in()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") 操作符现在默认情况下为空 IN 序列生成“静态”表达式。
- en: See also
  id: totrans-2125
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.in_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")'
  id: totrans-2126
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.in_()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")'
- en: '[PRE416]'
  id: totrans-2127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE416]'
- en: '*inherited from the* [`ColumnOperators.notlike()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notlike
    "sqlalchemy.sql.expression.ColumnOperators.notlike") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2128
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.notlike()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notlike
    "sqlalchemy.sql.expression.ColumnOperators.notlike") *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: implement the `NOT LIKE` operator.
  id: totrans-2129
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `NOT LIKE` 操作符。
- en: This is equivalent to using negation with [`ColumnOperators.like()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like"), i.e. `~x.like(y)`.
  id: totrans-2130
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于使用 [`ColumnOperators.like()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like") 时使用否定，即 `~x.like(y)`。
- en: 'Changed in version 1.4: The `not_like()` operator is renamed from `notlike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-2131
  prefs: []
  type: TYPE_NORMAL
  zh: 从 1.4 版本开始更改：`not_like()` 操作符从先前版本的 `notlike()` 重命名为 `not_like()`。先前的名称仍可用于向后兼容。
- en: See also
  id: totrans-2132
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.like()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-2133
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE417]'
  id: totrans-2134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE417]'
- en: '*inherited from the* [`ColumnOperators.nulls_first()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nulls_first
    "sqlalchemy.sql.expression.ColumnOperators.nulls_first") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2135
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.nulls_first()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nulls_first
    "sqlalchemy.sql.expression.ColumnOperators.nulls_first") *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`nulls_first()`](sqlelement.html#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first") clause against the parent object.
  id: totrans-2136
  prefs: []
  type: TYPE_NORMAL
  zh: 对父对象生成一个 [`nulls_first()`](sqlelement.html#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first") 子句。
- en: 'Changed in version 1.4: The `nulls_first()` operator is renamed from `nullsfirst()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-2137
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.4版本中更改：`nulls_first()` 操作符在先前版本中的名称已更改为 `nullsfirst()`。以前的名称仍可用于向后兼容。
- en: '[PRE418]'
  id: totrans-2138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE418]'
- en: '*inherited from the* [`ColumnOperators.nulls_last()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nulls_last
    "sqlalchemy.sql.expression.ColumnOperators.nulls_last") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2139
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.nulls_last()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nulls_last
    "sqlalchemy.sql.expression.ColumnOperators.nulls_last") *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`nulls_last()`](sqlelement.html#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last") clause against the parent object.
  id: totrans-2140
  prefs: []
  type: TYPE_NORMAL
  zh: 对父对象生成一个 [`nulls_last()`](sqlelement.html#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last") 子句。
- en: 'Changed in version 1.4: The `nulls_last()` operator is renamed from `nullslast()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-2141
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.4版本中更改：`nulls_last()` 操作符在先前版本中的名称已更改为 `nullslast()`。以前的名称仍可用于向后兼容。
- en: '[PRE419]'
  id: totrans-2142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE419]'
- en: '*inherited from the* [`ColumnOperators.nullsfirst()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nullsfirst
    "sqlalchemy.sql.expression.ColumnOperators.nullsfirst") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2143
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.nullsfirst()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nullsfirst
    "sqlalchemy.sql.expression.ColumnOperators.nullsfirst") *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`nulls_first()`](sqlelement.html#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first") clause against the parent object.
  id: totrans-2144
  prefs: []
  type: TYPE_NORMAL
  zh: 对父对象生成一个 [`nulls_first()`](sqlelement.html#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first") 子句。
- en: 'Changed in version 1.4: The `nulls_first()` operator is renamed from `nullsfirst()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-2145
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.4版本中更改：`nulls_first()` 操作符在先前版本中的名称已更改为 `nullsfirst()`。以前的名称仍可用于向后兼容。
- en: '[PRE420]'
  id: totrans-2146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE420]'
- en: '*inherited from the* [`ColumnOperators.nullslast()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nullslast
    "sqlalchemy.sql.expression.ColumnOperators.nullslast") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2147
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.nullslast()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nullslast
    "sqlalchemy.sql.expression.ColumnOperators.nullslast") *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`nulls_last()`](sqlelement.html#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last") clause against the parent object.
  id: totrans-2148
  prefs: []
  type: TYPE_NORMAL
  zh: 对父对象生成一个 [`nulls_last()`](sqlelement.html#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last") 子句。
- en: 'Changed in version 1.4: The `nulls_last()` operator is renamed from `nullslast()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-2149
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.4版本中更改：`nulls_last()` 操作符在先前版本中的名称已更改为 `nullslast()`。以前的名称仍可用于向后兼容。
- en: '[PRE421]'
  id: totrans-2150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE421]'
- en: '*inherited from the* [`Operators.op()`](sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") *method of* [`Operators`](sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  id: totrans-2151
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Operators.op()`](sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") *方法的* [`Operators`](sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
- en: Produce a generic operator function.
  id: totrans-2152
  prefs: []
  type: TYPE_NORMAL
  zh: 产生一个通用的运算符函数。
- en: 'e.g.:'
  id: totrans-2153
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE422]'
  id: totrans-2154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE422]'
- en: 'produces:'
  id: totrans-2155
  prefs: []
  type: TYPE_NORMAL
  zh: 生成：
- en: '[PRE423]'
  id: totrans-2156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE423]'
- en: 'This function can also be used to make bitwise operators explicit. For example:'
  id: totrans-2157
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数也可以用来明确位运算符。例如：
- en: '[PRE424]'
  id: totrans-2158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE424]'
- en: is a bitwise AND of the value in `somecolumn`.
  id: totrans-2159
  prefs: []
  type: TYPE_NORMAL
  zh: 是对`somecolumn`值的位与操作。
- en: 'Parameters:'
  id: totrans-2160
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`opstring` – a string which will be output as the infix operator between this
    element and the expression passed to the generated function.'
  id: totrans-2161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`opstring` – 将作为该元素与传递给生成函数的表达式之间的中缀运算符输出的字符串。'
- en: '`precedence` –'
  id: totrans-2162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`precedence` –'
- en: precedence which the database is expected to apply to the operator in SQL expressions.
    This integer value acts as a hint for the SQL compiler to know when explicit parenthesis
    should be rendered around a particular operation. A lower number will cause the
    expression to be parenthesized when applied against another operator with higher
    precedence. The default value of `0` is lower than all operators except for the
    comma (`,`) and `AS` operators. A value of 100 will be higher or equal to all
    operators, and -100 will be lower than or equal to all operators.
  id: totrans-2163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 数据库预计在SQL表达式中应用于运算符的优先级。这个整数值充当SQL编译器的提示，以便知道何时应该在特定操作周围呈现显式括号。较低的数字将导致表达式在应用于具有更高优先级的另一个运算符时被加括号。默认值为`0`，低于所有运算符，除了逗号（`,`）和`AS`运算符。值为100将高于或等于所有运算符，而-100将低于或等于所有运算符。
- en: See also
  id: totrans-2164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[I’m using op() to generate a custom operator and my parenthesis are not coming
    out correctly](../faq/sqlexpressions.html#faq-sql-expression-op-parenthesis) -
    detailed description of how the SQLAlchemy SQL compiler renders parenthesis'
  id: totrans-2165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[我正在使用op()生成自定义运算符，但是我的括号没有正确显示](../faq/sqlexpressions.html#faq-sql-expression-op-parenthesis)
    - SQLAlchemy SQL编译器如何呈现括号的详细描述'
- en: '`is_comparison` –'
  id: totrans-2166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_comparison` –'
- en: legacy; if True, the operator will be considered as a “comparison” operator,
    that is which evaluates to a boolean true/false value, like `==`, `>`, etc. This
    flag is provided so that ORM relationships can establish that the operator is
    a comparison operator when used in a custom join condition.
  id: totrans-2167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: legacy；如果为True，则将运算符视为“比较”运算符，即评估为布尔值真/假的运算符，如`==`，`>`等。提供此标志是为了让ORM关系能够在自定义连接条件中确定该运算符是比较运算符。
- en: Using the `is_comparison` parameter is superseded by using the [`Operators.bool_op()`](sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") method instead; this more succinct
    operator sets this parameter automatically, but also provides correct [**PEP 484**](https://peps.python.org/pep-0484/)
    typing support as the returned object will express a “boolean” datatype, i.e.
    `BinaryExpression[bool]`.
  id: totrans-2168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用`is_comparison`参数被使用[`Operators.bool_op()`](sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op")方法替代；这个更简洁的运算符会自动设置此参数，但也会提供正确的[**PEP
    484**](https://peps.python.org/pep-0484/)类型支持，因为返回的对象将表示“布尔”数据类型，即`BinaryExpression[bool]`。
- en: '`return_type` – a [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class or object that will force the return type
    of an expression produced by this operator to be of that type. By default, operators
    that specify [`Operators.op.is_comparison`](sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op") will resolve to [`Boolean`](type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean"), and those that do not will be of the same type as
    the left-hand operand.'
  id: totrans-2169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_type` – 一个[`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")类或对象，将强制由此运算符产生的表达式的返回类型为该类型。默认情况下，指定了[`Operators.op.is_comparison`](sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op")的运算符将解析为[`Boolean`](type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean")，而没有指定的将与左操作数的类型相同。'
- en: '`python_impl` –'
  id: totrans-2170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`python_impl` –'
- en: an optional Python function that can evaluate two Python values in the same
    way as this operator works when run on the database server. Useful for in-Python
    SQL expression evaluation functions, such as for ORM hybrid attributes, and the
    ORM “evaluator” used to match objects in a session after a multi-row update or
    delete.
  id: totrans-2171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个可选的Python函数，可以在数据库服务器上运行时以与该运算符相同的方式评估两个Python值。用于在Python中进行SQL表达式评估函数，例如用于ORM混合属性的，以及ORM“评估器”用于在多行更新或删除后匹配会话中的对象。
- en: 'e.g.:'
  id: totrans-2172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE425]'
  id: totrans-2173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE425]'
- en: 'The operator for the above expression will also work for non-SQL left and right
    objects:'
  id: totrans-2174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述表达式的运算符也将适用于非SQL左和右对象：
- en: '[PRE426]'
  id: totrans-2175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE426]'
- en: New in version 2.0.
  id: totrans-2176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 2.0版本中的新内容。
- en: See also
  id: totrans-2177
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Operators.bool_op()`](sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op")'
  id: totrans-2178
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Operators.bool_op()`](sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op")'
- en: '[Redefining and Creating New Operators](custom_types.html#types-operators)'
  id: totrans-2179
  prefs: []
  type: TYPE_NORMAL
  zh: '[重新定义和创建新运算符](custom_types.html#types-operators)'
- en: '[Using custom operators in join conditions](../orm/join_conditions.html#relationship-custom-operator)'
  id: totrans-2180
  prefs: []
  type: TYPE_NORMAL
  zh: '[在连接条件中使用自定义运算符](../orm/join_conditions.html#relationship-custom-operator)'
- en: '[PRE427]'
  id: totrans-2181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE427]'
- en: '*inherited from the* [`ColumnElement.operate()`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.operate
    "sqlalchemy.sql.expression.ColumnElement.operate") *method of* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
  id: totrans-2182
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnElement.operate()`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.operate
    "sqlalchemy.sql.expression.ColumnElement.operate") *方法的* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
- en: Operate on an argument.
  id: totrans-2183
  prefs: []
  type: TYPE_NORMAL
  zh: 对参数进行操作。
- en: This is the lowest level of operation, raises `NotImplementedError` by default.
  id: totrans-2184
  prefs: []
  type: TYPE_NORMAL
  zh: 这是操作的最低级别，默认情况下引发 `NotImplementedError`。
- en: 'Overriding this on a subclass can allow common behavior to be applied to all
    operations. For example, overriding [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") to apply `func.lower()` to the left
    and right side:'
  id: totrans-2185
  prefs: []
  type: TYPE_NORMAL
  zh: 在子类上覆盖此方法可以允许将通用行为应用于所有操作。例如，覆盖 [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") 以将 `func.lower()` 应用于左侧和右侧：
- en: '[PRE428]'
  id: totrans-2186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE428]'
- en: 'Parameters:'
  id: totrans-2187
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`op` – Operator callable.'
  id: totrans-2188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`op` – 运算符可调用。'
- en: '`*other` – the ‘other’ side of the operation. Will be a single scalar for most
    operations.'
  id: totrans-2189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*other` – 操作的“其他”一侧。对于大多数操作，将是单个标量。'
- en: '`**kwargs` – modifiers. These may be passed by special operators such as `ColumnOperators.contains()`.'
  id: totrans-2190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kwargs` – 修饰符。这些可能由特殊运算符（如 `ColumnOperators.contains()`）传递。'
- en: '[PRE429]'
  id: totrans-2191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE429]'
- en: '*inherited from the* `Immutable.params()` *method of* `Immutable`'
  id: totrans-2192
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `Immutable.params()` *方法的* `Immutable`'
- en: Return a copy with [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") elements replaced.
  id: totrans-2193
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个副本，其中包含替换了 [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") 元素的内容。
- en: 'Returns a copy of this ClauseElement with [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") elements replaced with values taken from
    the given dictionary:'
  id: totrans-2194
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此 ClauseElement 的副本，其中包含从给定字典中获取的值替换了 [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") 元素：
- en: '[PRE430]'
  id: totrans-2195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE430]'
- en: '[PRE431]'
  id: totrans-2196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE431]'
- en: '*inherited from the* [`ColumnElement.proxy_set`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.proxy_set
    "sqlalchemy.sql.expression.ColumnElement.proxy_set") *attribute of* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
  id: totrans-2197
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnElement.proxy_set`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.proxy_set
    "sqlalchemy.sql.expression.ColumnElement.proxy_set") *属性的* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
- en: set of all columns we are proxying
  id: totrans-2198
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在代理的所有列的集合
- en: as of 2.0 this is explicitly deannotated columns. previously it was effectively
    deannotated columns but wasn’t enforced. annotated columns should basically not
    go into sets if at all possible because their hashing behavior is very non-performant.
  id: totrans-2199
  prefs: []
  type: TYPE_NORMAL
  zh: 从 2.0 开始，这些是明确取消注释的列。以前是有效取消注释的列，但没有强制执行。如果可能的话，注释的列基本上不应该进入集合，因为它们的哈希行为非常低效。
- en: '[PRE432]'
  id: totrans-2200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE432]'
- en: Return True if this Column references the given column via foreign key.
  id: totrans-2201
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此列通过外键引用给定列，则返回 True。
- en: '[PRE433]'
  id: totrans-2202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE433]'
- en: '*inherited from the* [`ColumnOperators.regexp_match()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2203
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.regexp_match()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implements a database-specific ‘regexp match’ operator.
  id: totrans-2204
  prefs: []
  type: TYPE_NORMAL
  zh: 实现了一个特定于数据库的‘正则匹配’操作符。
- en: 'E.g.:'
  id: totrans-2205
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE434]'
  id: totrans-2206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE434]'
- en: '[`ColumnOperators.regexp_match()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") attempts to resolve
    to a REGEXP-like function or operator provided by the backend, however the specific
    regular expression syntax and flags available are **not backend agnostic**.'
  id: totrans-2207
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.regexp_match()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") 试图解析为后端提供的类似于 REGEXP
    的函数或运算符，但可用的特定正则表达式语法和标志 **不是后端通用**。'
- en: 'Examples include:'
  id: totrans-2208
  prefs: []
  type: TYPE_NORMAL
  zh: 示例包括：
- en: PostgreSQL - renders `x ~ y` or `x !~ y` when negated.
  id: totrans-2209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PostgreSQL - 当取反时渲染 `x ~ y` 或 `x !~ y`。
- en: Oracle - renders `REGEXP_LIKE(x, y)`
  id: totrans-2210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Oracle - 渲染 `REGEXP_LIKE(x, y)`
- en: SQLite - uses SQLite’s `REGEXP` placeholder operator and calls into the Python
    `re.match()` builtin.
  id: totrans-2211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQLite - 使用 SQLite 的 `REGEXP` 占位符操作符，并调用 Python 的 `re.match()` 内置函数。
- en: other backends may provide special implementations.
  id: totrans-2212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他后端可能提供特殊实现。
- en: Backends without any special implementation will emit the operator as “REGEXP”
    or “NOT REGEXP”. This is compatible with SQLite and MySQL, for example.
  id: totrans-2213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有任何特殊实现的后端将将操作符输出为“REGEXP”或“NOT REGEXP”。例如，这与 SQLite 和 MySQL 兼容。
- en: Regular expression support is currently implemented for Oracle, PostgreSQL,
    MySQL and MariaDB. Partial support is available for SQLite. Support among third-party
    dialects may vary.
  id: totrans-2214
  prefs: []
  type: TYPE_NORMAL
  zh: 正则表达式支持目前已在 Oracle、PostgreSQL、MySQL 和 MariaDB 中实现。对于 SQLite，部分支持可用。第三方方言中的支持可能有所不同。
- en: 'Parameters:'
  id: totrans-2215
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`pattern` – The regular expression pattern string or column clause.'
  id: totrans-2216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pattern` – 正则表达式模式字符串或列子句。'
- en: '`flags` – Any regular expression string flags to apply, passed as plain Python
    string only. These flags are backend specific. Some backends, like PostgreSQL
    and MariaDB, may alternatively specify the flags as part of the pattern. When
    using the ignore case flag ‘i’ in PostgreSQL, the ignore case regexp match operator
    `~*` or `!~*` will be used.'
  id: totrans-2217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flags` – 要应用的任何正则表达式字符串标志，仅作为普通 Python 字符串传递。这些标志是特定于后端的。一些后端，如 PostgreSQL
    和 MariaDB，可能会将标志作为模式的一部分指定。在 PostgreSQL 中使用忽略大小写标志‘i’ 时，将使用忽略大小写的正则表达式匹配操作符 `~*`
    或 `!~*`。'
- en: New in version 1.4.
  id: totrans-2218
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中的新功能。
- en: 'Changed in version 1.4.48,: 2.0.18 Note that due to an implementation error,
    the “flags” parameter previously accepted SQL expression objects such as column
    expressions in addition to plain Python strings. This implementation did not work
    correctly with caching and was removed; strings only should be passed for the
    “flags” parameter, as these flags are rendered as literal inline values within
    SQL expressions.'
  id: totrans-2219
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4.48 更改为：2.0.18 请注意，由于实现错误，“flags”参数先前接受了 SQL 表达式对象，例如列表达式，而不仅仅是普通的 Python
    字符串。这种实现与缓存不兼容，并已移除；应该仅传递字符串作为“flags”参数，因为这些标志将作为 SQL 表达式中的文字内联值呈现。
- en: See also
  id: totrans-2220
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`ColumnOperators.regexp_replace()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace")'
  id: totrans-2221
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.regexp_replace()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace")'
- en: '[PRE435]'
  id: totrans-2222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE435]'
- en: '*inherited from the* [`ColumnOperators.regexp_replace()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2223
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.regexp_replace()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implements a database-specific ‘regexp replace’ operator.
  id: totrans-2224
  prefs: []
  type: TYPE_NORMAL
  zh: 实现了特定于数据库的‘regexp replace’操作符。
- en: 'E.g.:'
  id: totrans-2225
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE436]'
  id: totrans-2226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE436]'
- en: '[`ColumnOperators.regexp_replace()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") attempts to resolve
    to a REGEXP_REPLACE-like function provided by the backend, that usually emit the
    function `REGEXP_REPLACE()`. However, the specific regular expression syntax and
    flags available are **not backend agnostic**.'
  id: totrans-2227
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.regexp_replace()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") 尝试解析为后端提供的类似 REGEXP_REPLACE
    的函数，通常会输出函数 `REGEXP_REPLACE()`。然而，特定的正则表达式语法和可用标志**并非后端通用**。'
- en: Regular expression replacement support is currently implemented for Oracle,
    PostgreSQL, MySQL 8 or greater and MariaDB. Support among third-party dialects
    may vary.
  id: totrans-2228
  prefs: []
  type: TYPE_NORMAL
  zh: 正则表达式替换支持目前已在 Oracle、PostgreSQL、MySQL 8 或更高版本和 MariaDB 中实现。第三方方言中的支持可能有所不同。
- en: 'Parameters:'
  id: totrans-2229
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`pattern` – The regular expression pattern string or column clause.'
  id: totrans-2230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pattern` – 正则表达式模式字符串或列子句。'
- en: '`pattern` – The replacement string or column clause.'
  id: totrans-2231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pattern` – 替换字符串或列子句。'
- en: '`flags` – Any regular expression string flags to apply, passed as plain Python
    string only. These flags are backend specific. Some backends, like PostgreSQL
    and MariaDB, may alternatively specify the flags as part of the pattern.'
  id: totrans-2232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flags` – 要应用的任何正则表达式字符串标志，仅作为普通 Python 字符串传递。这些标志是特定于后端的。一些后端，如 PostgreSQL
    和 MariaDB，可能会将标志作为模式的一部分指定。'
- en: New in version 1.4.
  id: totrans-2233
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中的新���能。
- en: 'Changed in version 1.4.48,: 2.0.18 Note that due to an implementation error,
    the “flags” parameter previously accepted SQL expression objects such as column
    expressions in addition to plain Python strings. This implementation did not work
    correctly with caching and was removed; strings only should be passed for the
    “flags” parameter, as these flags are rendered as literal inline values within
    SQL expressions.'
  id: totrans-2234
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本 1.4.48 中更改：2.0.18 请注意，由于实现错误，以前的“flags”参数接受 SQL 表达式对象，例如列表达式，而不仅仅是普通的 Python
    字符串。此实现与缓存一起使用时不起作用，并已删除；只应传递字符串作为“flags”参数，因为这些标志作为 SQL 表达式中的字面内联值呈现。
- en: See also
  id: totrans-2235
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.regexp_match()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match")'
  id: totrans-2236
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.regexp_match()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match")'
- en: '[PRE437]'
  id: totrans-2237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE437]'
- en: '*inherited from the* [`ColumnElement.reverse_operate()`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.reverse_operate
    "sqlalchemy.sql.expression.ColumnElement.reverse_operate") *method of* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
  id: totrans-2238
  prefs: []
  type: TYPE_NORMAL
  zh: 继承自 [`ColumnElement.reverse_operate()`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.reverse_operate
    "sqlalchemy.sql.expression.ColumnElement.reverse_operate") *方法的* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")
- en: Reverse operate on an argument.
  id: totrans-2239
  prefs: []
  type: TYPE_NORMAL
  zh: 对参数进行反向操作。
- en: Usage is the same as [`operate()`](#sqlalchemy.schema.Column.operate "sqlalchemy.schema.Column.operate").
  id: totrans-2240
  prefs: []
  type: TYPE_NORMAL
  zh: 用法与 [`operate()`](#sqlalchemy.schema.Column.operate "sqlalchemy.schema.Column.operate")
    相同。
- en: '[PRE438]'
  id: totrans-2241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE438]'
- en: '*inherited from the* [`ColumnElement.self_group()`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.self_group
    "sqlalchemy.sql.expression.ColumnElement.self_group") *method of* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
  id: totrans-2242
  prefs: []
  type: TYPE_NORMAL
  zh: 继承自 [`ColumnElement.self_group()`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.self_group
    "sqlalchemy.sql.expression.ColumnElement.self_group") *方法的* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")
- en: Apply a ‘grouping’ to this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  id: totrans-2243
  prefs: []
  type: TYPE_NORMAL
  zh: 将“分组”应用于此 [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")。
- en: This method is overridden by subclasses to return a “grouping” construct, i.e.
    parenthesis. In particular it’s used by “binary” expressions to provide a grouping
    around themselves when placed into a larger expression, as well as by [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs when placed into the FROM clause
    of another [`select()`](selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select").
    (Note that subqueries should be normally created using the [`Select.alias()`](selectable.html#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") method, as many platforms require nested
    SELECT statements to be named).
  id: totrans-2244
  prefs: []
  type: TYPE_NORMAL
  zh: 子类重写此方法以返回“分组”构造，即括号。特别是当“二进制”表达式放置到较大表达式中时，它们用于提供对自身的分组，以及当 [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造放置到另一个 [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 的 FROM 子句中时。 （请注意，通常应使用 [`Select.alias()`](selectable.html#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") 方法创建子查询，因为许多平台要求嵌套的 SELECT 语句具有名称）。
- en: As expressions are composed together, the application of [`self_group()`](#sqlalchemy.schema.Column.self_group
    "sqlalchemy.schema.Column.self_group") is automatic - end-user code should never
    need to use this method directly. Note that SQLAlchemy’s clause constructs take
    operator precedence into account - so parenthesis might not be needed, for example,
    in an expression like `x OR (y AND z)` - AND takes precedence over OR.
  id: totrans-2245
  prefs: []
  type: TYPE_NORMAL
  zh: 随着表达式的组合，[`self_group()`](#sqlalchemy.schema.Column.self_group "sqlalchemy.schema.Column.self_group")
    的应用是自动的 - 最终用户代码不应直接使用此方法。请注意，SQLAlchemy 的子句构造考虑了操作符优先级 - 因此，例如，在表达式 `x OR (y
    AND z)` 中可能不需要括号 - AND 优先于 OR。
- en: The base [`self_group()`](#sqlalchemy.schema.Column.self_group "sqlalchemy.schema.Column.self_group")
    method of [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") just returns self.
  id: totrans-2246
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement "sqlalchemy.sql.expression.ClauseElement")的基本
    [`self_group()`](#sqlalchemy.schema.Column.self_group "sqlalchemy.schema.Column.self_group")
    方法只返回自身。'
- en: '[PRE439]'
  id: totrans-2247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE439]'
- en: '*inherited from the* [`ColumnElement.shares_lineage()`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.shares_lineage
    "sqlalchemy.sql.expression.ColumnElement.shares_lineage") *method of* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
  id: totrans-2248
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnElement.shares_lineage()`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.shares_lineage
    "sqlalchemy.sql.expression.ColumnElement.shares_lineage") *方法的* [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")'
- en: Return True if the given [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") has a common ancestor to this [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement").
  id: totrans-2249
  prefs: []
  type: TYPE_NORMAL
  zh: 如果给定的 [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") 具有与此 [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") 的共同祖先，则返回True。
- en: '[PRE440]'
  id: totrans-2250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE440]'
- en: '*inherited from the* [`ColumnOperators.startswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith") *method of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2251
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.startswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith") *方法的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `startswith` operator.
  id: totrans-2252
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`startswith`运算符。
- en: 'Produces a LIKE expression that tests against a match for the start of a string
    value:'
  id: totrans-2253
  prefs: []
  type: TYPE_NORMAL
  zh: 产生一个LIKE表达式，用于测试字符串值的开头匹配：
- en: '[PRE441]'
  id: totrans-2254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE441]'
- en: 'E.g.:'
  id: totrans-2255
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE442]'
  id: totrans-2256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE442]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.startswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.startswith.escape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-2257
  prefs: []
  type: TYPE_NORMAL
  zh: 由于该运算符使用 `LIKE`，因此存在于 <other> 表达式内部的通配符字符 `"%"` 和 `"_"` 也将像通配符一样起作用。对于字面字符串值，可以将
    [`ColumnOperators.startswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") 标志设置为 `True`，以对字符串值内部这些字符的出现应用转义，使它们作为自身而不是通配符字符进行匹配。或者，[`ColumnOperators.startswith.escape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") 参数将建立一个给定的字符作为转义字符，当目标表达式不是字面字符串时可能会有用。
- en: 'Parameters:'
  id: totrans-2258
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.startswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") flag is set to True.'
  id: totrans-2259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要比较的表达式。通常这是一个简单的字符串值，但也可以是一个任意的SQL表达式。除非将 [`ColumnOperators.startswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") 标志设置为True，否则 LIKE 通配符字符
    `%` 和 `_` 默认不会被转义。'
- en: '`autoescape` –'
  id: totrans-2260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-2261
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值；当为True时，在LIKE表达式中建立一个转义字符，然后将其应用于比较值中所有出现的`"%"`、`"_"`和转义字符本身，假定比较值是一个字面字符串而不是一个SQL表达式。
- en: 'An expression such as:'
  id: totrans-2262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个如下的表达式：
- en: '[PRE443]'
  id: totrans-2263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE443]'
- en: 'Will render as:'
  id: totrans-2264
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE444]'
  id: totrans-2265
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE444]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-2266
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用`:param`的值为`"foo/%bar"`。
- en: '`escape` –'
  id: totrans-2267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-2268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字符，当给定时，将以 `ESCAPE` 关键字呈现以将该字符作为转义字符。然后可以在 `%` 和 `_` 的前面放置该字符，以允许它们作为它们自己而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-2269
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个如下的表达式：
- en: '[PRE445]'
  id: totrans-2270
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE445]'
- en: 'Will render as:'
  id: totrans-2271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE446]'
  id: totrans-2272
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE446]'
- en: 'The parameter may also be combined with [`ColumnOperators.startswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith"):'
  id: totrans-2273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参数也可以与[`ColumnOperators.startswith.autoescape`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith")结合使用：
- en: '[PRE447]'
  id: totrans-2274
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE447]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-2275
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述情况中，给定的字面参数将在传递到数据库之前转换为`"foo^%bar^^bat"`。
- en: See also
  id: totrans-2276
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`ColumnOperators.endswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
  id: totrans-2277
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.endswith()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
- en: '[`ColumnOperators.contains()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
  id: totrans-2278
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.contains()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
- en: '[`ColumnOperators.like()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-2279
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE448]'
  id: totrans-2280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE448]'
- en: '*inherited from the* [`ColumnOperators.timetuple`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.timetuple
    "sqlalchemy.sql.expression.ColumnOperators.timetuple") *attribute of* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2281
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.timetuple`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.timetuple
    "sqlalchemy.sql.expression.ColumnOperators.timetuple") *属性的* [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Hack, allows datetime objects to be compared on the LHS.
  id: totrans-2282
  prefs: []
  type: TYPE_NORMAL
  zh: Hack，允许在LHS上比较datetime对象。
- en: '[PRE449]'
  id: totrans-2283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE449]'
- en: The value of the [`Column.unique`](#sqlalchemy.schema.Column.params.unique "sqlalchemy.schema.Column")
    parameter.
  id: totrans-2284
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Column.unique`](#sqlalchemy.schema.Column.params.unique "sqlalchemy.schema.Column")参数的值。'
- en: Does not indicate if this [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    is actually subject to a unique constraint or not; use [`Table.indexes`](#sqlalchemy.schema.Table.indexes
    "sqlalchemy.schema.Table.indexes") and [`Table.constraints`](#sqlalchemy.schema.Table.constraints
    "sqlalchemy.schema.Table.constraints").
  id: totrans-2285
  prefs: []
  type: TYPE_NORMAL
  zh: 不表示此[`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")实际上是否受唯一约束的约束;
    使用[`Table.indexes`](#sqlalchemy.schema.Table.indexes "sqlalchemy.schema.Table.indexes")和[`Table.constraints`](#sqlalchemy.schema.Table.constraints
    "sqlalchemy.schema.Table.constraints")。
- en: See also
  id: totrans-2286
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`Table.indexes`](#sqlalchemy.schema.Table.indexes "sqlalchemy.schema.Table.indexes")'
  id: totrans-2287
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Table.indexes`](#sqlalchemy.schema.Table.indexes "sqlalchemy.schema.Table.indexes")'
- en: '[`Table.constraints`](#sqlalchemy.schema.Table.constraints "sqlalchemy.schema.Table.constraints").'
  id: totrans-2288
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Table.constraints`](#sqlalchemy.schema.Table.constraints "sqlalchemy.schema.Table.constraints")。'
- en: '[PRE450]'
  id: totrans-2289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE450]'
- en: '*inherited from the* `Immutable.unique_params()` *method of* `Immutable`'
  id: totrans-2290
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `Immutable.unique_params()` *方法的* `Immutable`'
- en: Return a copy with [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") elements replaced.
  id: totrans-2291
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个副本，其中[`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")元素被替换。
- en: Same functionality as [`ClauseElement.params()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.params
    "sqlalchemy.sql.expression.ClauseElement.params"), except adds unique=True to
    affected bind parameters so that multiple statements can be used.
  id: totrans-2292
  prefs: []
  type: TYPE_NORMAL
  zh: 与[`ClauseElement.params()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.params
    "sqlalchemy.sql.expression.ClauseElement.params")具有相同的功能，除了将unique=True添加到受影响的绑定参数，以便可以使用多个语句。
- en: '[PRE451]'
  id: totrans-2293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE451]'
- en: A collection of [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects and their associated schema constructs.
  id: totrans-2294
  prefs: []
  type: TYPE_NORMAL
  zh: 一个包含[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象及其关联模式结构的集合。
- en: Holds a collection of [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects as well as an optional binding to an [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") or [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"). If bound, the [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects in the collection and their columns may participate
    in implicit SQL execution.
  id: totrans-2295
  prefs: []
  type: TYPE_NORMAL
  zh: 包含一个[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象的集合，以及一个可选的绑定到[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")或[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")的绑定。如果绑定，则集合中的[`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象及其列可能会参与隐式SQL执行。
- en: The [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") objects themselves
    are stored in the [`MetaData.tables`](#sqlalchemy.schema.MetaData.tables "sqlalchemy.schema.MetaData.tables")
    dictionary.
  id: totrans-2296
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") 对象本身存储在 [`MetaData.tables`](#sqlalchemy.schema.MetaData.tables
    "sqlalchemy.schema.MetaData.tables") 字典中。'
- en: '[`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData") is a
    thread-safe object for read operations. Construction of new tables within a single
    [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData") object,
    either explicitly or via reflection, may not be completely thread-safe.'
  id: totrans-2297
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData") 是一个线程安全的对象，用于读操作。在单个
    [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData") 对象内构造新表，无论是显式地还是通过反射，可能不完全是线程安全的。'
- en: See also
  id: totrans-2298
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见
- en: '[Describing Databases with MetaData](#metadata-describing) - Introduction to
    database metadata'
  id: totrans-2299
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 MetaData 描述数据库](#metadata-describing) - 数据库元数据介绍'
- en: '**Members**'
  id: totrans-2300
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.schema.MetaData.__init__), [clear()](#sqlalchemy.schema.MetaData.clear),
    [create_all()](#sqlalchemy.schema.MetaData.create_all), [drop_all()](#sqlalchemy.schema.MetaData.drop_all),
    [reflect()](#sqlalchemy.schema.MetaData.reflect), [remove()](#sqlalchemy.schema.MetaData.remove),
    [sorted_tables](#sqlalchemy.schema.MetaData.sorted_tables), [tables](#sqlalchemy.schema.MetaData.tables)'
  id: totrans-2301
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.schema.MetaData.__init__), [clear()](#sqlalchemy.schema.MetaData.clear),
    [create_all()](#sqlalchemy.schema.MetaData.create_all), [drop_all()](#sqlalchemy.schema.MetaData.drop_all),
    [reflect()](#sqlalchemy.schema.MetaData.reflect), [remove()](#sqlalchemy.schema.MetaData.remove),
    [sorted_tables](#sqlalchemy.schema.MetaData.sorted_tables), [tables](#sqlalchemy.schema.MetaData.tables)'
- en: '**Class signature**'
  id: totrans-2302
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    (`sqlalchemy.schema.HasSchemaAttr`)
  id: totrans-2303
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.schema.MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    (`sqlalchemy.schema.HasSchemaAttr`)
- en: '[PRE452]'
  id: totrans-2304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE452]'
- en: Create a new MetaData object.
  id: totrans-2305
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的 MetaData 对象。
- en: 'Parameters:'
  id: totrans-2306
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`schema` –'
  id: totrans-2307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` –'
- en: The default schema to use for the [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table"),
    [`Sequence`](defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence"),
    and potentially other objects associated with this [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData"). Defaults to `None`.
  id: totrans-2308
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于 [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")、[`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") 和可能与此 [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    关联的其他对象的默认模式。默认为 `None`。
- en: See also
  id: totrans-2309
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参见
- en: '[Specifying a Default Schema Name with MetaData](#schema-metadata-schema-name)
    - details on how the [`MetaData.schema`](#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData") parameter is used.'
  id: totrans-2310
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[使用 MetaData 指定默认模式名称](#schema-metadata-schema-name) - 关于如何使用 [`MetaData.schema`](#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData") 参数的详细信息。'
- en: '[`Table.schema`](#sqlalchemy.schema.Table.params.schema "sqlalchemy.schema.Table")'
  id: totrans-2311
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Table.schema`](#sqlalchemy.schema.Table.params.schema "sqlalchemy.schema.Table")'
- en: '[`Sequence.schema`](defaults.html#sqlalchemy.schema.Sequence.params.schema
    "sqlalchemy.schema.Sequence")'
  id: totrans-2312
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Sequence.schema`](defaults.html#sqlalchemy.schema.Sequence.params.schema
    "sqlalchemy.schema.Sequence") '
- en: '`quote_schema` – Sets the `quote_schema` flag for those [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), [`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence"), and other objects which make usage of the local
    `schema` name.'
  id: totrans-2313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`quote_schema` – 为使用本地 `schema` 名称的那些 [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")、[`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") 和其他对象设置 `quote_schema` 标志。'
- en: '`info` – Optional data dictionary which will be populated into the [`SchemaItem.info`](#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info") attribute of this object.'
  id: totrans-2314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`info` – 可选数据字典，将填充到此对象的 [`SchemaItem.info`](#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info") 属性中。'
- en: '`naming_convention` –'
  id: totrans-2315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`naming_convention` –'
- en: a dictionary referring to values which will establish default naming conventions
    for [`Constraint`](constraints.html#sqlalchemy.schema.Constraint "sqlalchemy.schema.Constraint")
    and [`Index`](constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    objects, for those objects which are not given a name explicitly.
  id: totrans-2316
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字典，指向将为那些未明确给出名称的 [`Constraint`](constraints.html#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint") 和 [`Index`](constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") 对象建立默认命名约定的值。
- en: 'The keys of this dictionary may be:'
  id: totrans-2317
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此字典的键可以是：
- en: a constraint or Index class, e.g. the [`UniqueConstraint`](constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint"), [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") class, the [`Index`](constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") class
  id: totrans-2318
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个约束或索引类，例如[`UniqueConstraint`](constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint")类，[`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")类，[`Index`](constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")类
- en: a string mnemonic for one of the known constraint classes; `"fk"`, `"pk"`, `"ix"`,
    `"ck"`, `"uq"` for foreign key, primary key, index, check, and unique constraint,
    respectively.
  id: totrans-2319
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已知约束类之一的字符串助记符；分别为外键（"fk"），主键（"pk"），索引（"ix"），检查（"ck"），唯一约束（"uq"）。
- en: the string name of a user-defined “token” that can be used to define new naming
    tokens.
  id: totrans-2320
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户定义的可用于定义新命名标记的“令牌”的字符串名称。
- en: The values associated with each “constraint class” or “constraint mnemonic”
    key are string naming templates, such as `"uq_%(table_name)s_%(column_0_name)s"`,
    which describe how the name should be composed. The values associated with user-defined
    “token” keys should be callables of the form `fn(constraint, table)`, which accepts
    the constraint/index object and [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    as arguments, returning a string result.
  id: totrans-2321
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与每个“约束类”或“约束助记符”键关联的值是字符串命名模板，例如`"uq_%(table_name)s_%(column_0_name)s"`，描述了名称应如何组成。与用户定义的“令牌”键关联的值应该是形式为`fn(constraint,
    table)`的可调用对象，接受约束/索引对象和[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")作为参数，返回一个字符串结果。
- en: 'The built-in names are as follows, some of which may only be available for
    certain types of constraint:'
  id: totrans-2322
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 内置名称如下，其中一些可能仅适用于某些类型的约束：
- en: '`%(table_name)s` - the name of the [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object associated with the constraint.'
  id: totrans-2323
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%(table_name)s` - 与约束相关联的[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象的名称。'
- en: ''
  id: totrans-2324
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-2325
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`%(referred_table_name)s` - the name of the [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object associated with the referencing target of a
    [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint").'
  id: totrans-2326
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%(referred_table_name)s` - 与[`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")的引用目标相关联的[`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象的名称。'
- en: ''
  id: totrans-2327
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-2328
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`%(column_0_name)s` - the name of the [`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") at index position “0” within the constraint.'
  id: totrans-2329
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%(column_0_name)s` - 约束内索引位置“0”的[`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")的名称。'
- en: ''
  id: totrans-2330
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-2331
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`%(column_0N_name)s` - the name of all [`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects in order within the constraint, joined without
    a separator.'
  id: totrans-2332
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%(column_0N_name)s` - 约束内所有[`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")对象的名称按顺序连接而成，不带分隔符。'
- en: ''
  id: totrans-2333
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-2334
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`%(column_0_N_name)s` - the name of all [`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects in order within the constraint, joined with
    an underscore as a separator.'
  id: totrans-2335
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%(column_0_N_name)s` - 约束内所有[`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")对象的名称按顺序连接，用下划线作为分隔符。'
- en: ''
  id: totrans-2336
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-2337
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`%(column_0_label)s`, `%(column_0N_label)s`, `%(column_0_N_label)s` - the label
    of either the zeroth [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    or all `Columns`, separated with or without an underscore'
  id: totrans-2338
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%(column_0_label)s`，`%(column_0N_label)s`，`%(column_0_N_label)s` - 第零个[`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")或所有`Columns`的标签，用或不用下划线分隔'
- en: ''
  id: totrans-2339
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-2340
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`%(column_0_key)s`, `%(column_0N_key)s`, `%(column_0_N_key)s` - the key of
    either the zeroth [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    or all `Columns`, separated with or without an underscore'
  id: totrans-2341
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%(column_0_key)s`，`%(column_0N_key)s`，`%(column_0_N_key)s` - 第零个[`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")或所有`Columns`的键，用或不用下划线分隔。'
- en: ''
  id: totrans-2342
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-2343
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`%(referred_column_0_name)s`, `%(referred_column_0N_name)s` `%(referred_column_0_N_name)s`,
    `%(referred_column_0_key)s`, `%(referred_column_0N_key)s`, … column tokens which
    render the names/keys/labels of columns that are referenced by a [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint").'
  id: totrans-2344
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%(referred_column_0_name)s`，`%(referred_column_0N_name)s`，`%(referred_column_0_N_name)s`，`%(referred_column_0_key)s`，`%(referred_column_0N_key)s`，…渲染由[`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")引用的列的名称/键/标签的列标记。'
- en: ''
  id: totrans-2345
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-2346
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`%(constraint_name)s` - a special key that refers to the existing name given
    to the constraint. When this key is present, the [`Constraint`](constraints.html#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint") object’s existing name will be replaced with one
    that is composed from template string that uses this token. When this token is
    present, it is required that the [`Constraint`](constraints.html#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint") is given an explicit name ahead of time.'
  id: totrans-2347
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%(constraint_name)s` - 一个特殊的键，引用了约束的现有名称。当存在这个键时，[`Constraint`](constraints.html#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint") 对象的现有名称将被替换为使用此标记的模板字符串组成的名称。当存在此标记时，必须提前为 [`Constraint`](constraints.html#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint") 指定一个显式名称。'
- en: ''
  id: totrans-2348
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-2349
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'user-defined: any additional token may be implemented by passing it along with
    a `fn(constraint, table)` callable to the naming_convention dictionary.'
  id: totrans-2350
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户自定义：可以通过将其与 `fn(constraint, table)` 可调用对象一起传递到 naming_convention 字典中来实现任何其他标记。
- en: 'New in version 1.3.0: - added new `%(column_0N_name)s`, `%(column_0_N_name)s`,
    and related tokens that produce concatenations of names, keys, or labels for all
    columns referred to by a given constraint.'
  id: totrans-2351
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 1.3.0 版新增内容：- 添加了新的 `%(column_0N_name)s`、`%(column_0_N_name)s` 和相关标记，这些标记生成给定约束引用的所有列的名称、键或标签的串联。
- en: See also
  id: totrans-2352
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Configuring Constraint Naming Conventions](constraints.html#constraint-naming-conventions)
    - for detailed usage examples.'
  id: totrans-2353
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[配置约束命名约定](constraints.html#constraint-naming-conventions) - 详细的用法示例。'
- en: '[PRE453]'
  id: totrans-2354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE453]'
- en: Clear all Table objects from this MetaData.
  id: totrans-2355
  prefs: []
  type: TYPE_NORMAL
  zh: 从此 MetaData 中清除所有 Table 对象。
- en: '[PRE454]'
  id: totrans-2356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE454]'
- en: Create all tables stored in this metadata.
  id: totrans-2357
  prefs: []
  type: TYPE_NORMAL
  zh: 创建存储在此元数据中的所有表。
- en: Conditional by default, will not attempt to recreate tables already present
    in the target database.
  id: totrans-2358
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下是有条件的，不会尝试重新创建已经存在于目标数据库中的表。
- en: 'Parameters:'
  id: totrans-2359
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`bind` – A [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    or [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    used to access the database.'
  id: totrans-2360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bind` – 用于访问数据库的 [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 或 [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")。'
- en: '`tables` – Optional list of `Table` objects, which is a subset of the total
    tables in the `MetaData` (others are ignored).'
  id: totrans-2361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tables` – `Table` 对象的可选列表，这是 `MetaData` 中的总表的子集（其他表被忽略）。'
- en: '`checkfirst` – Defaults to True, don’t issue CREATEs for tables already present
    in the target database.'
  id: totrans-2362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`checkfirst` – 默认为 True，不会为已经存在于目标数据库中的表发出 CREATE 操作。'
- en: '[PRE455]'
  id: totrans-2363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE455]'
- en: Drop all tables stored in this metadata.
  id: totrans-2364
  prefs: []
  type: TYPE_NORMAL
  zh: 删除存储在此元数据中的所有表。
- en: Conditional by default, will not attempt to drop tables not present in the target
    database.
  id: totrans-2365
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下是有条件的，不会尝试删除目标数据库中不存在的表。
- en: 'Parameters:'
  id: totrans-2366
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`bind` – A [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    or [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    used to access the database.'
  id: totrans-2367
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bind` – 用于访问数据库的 [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 或 [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")。'
- en: '`tables` – Optional list of `Table` objects, which is a subset of the total
    tables in the `MetaData` (others are ignored).'
  id: totrans-2368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tables` – `Table` 对象的可选列表，这是 `MetaData` 中的总表的子集（其他表被忽略）。'
- en: '`checkfirst` – Defaults to True, only issue DROPs for tables confirmed to be
    present in the target database.'
  id: totrans-2369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`checkfirst` – 默认为 True，仅对确认存在于目标数据库中的表发出 DROP 操作。'
- en: '[PRE456]'
  id: totrans-2370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE456]'
- en: Load all available table definitions from the database.
  id: totrans-2371
  prefs: []
  type: TYPE_NORMAL
  zh: 从数据库加载所有可用的表定义。
- en: Automatically creates `Table` entries in this `MetaData` for any table available
    in the database but not yet present in the `MetaData`. May be called multiple
    times to pick up tables recently added to the database, however no special action
    is taken if a table in this `MetaData` no longer exists in the database.
  id: totrans-2372
  prefs: []
  type: TYPE_NORMAL
  zh: 自动在此 MetaData 中为数据库中尚未存在的任何表创建 `Table` 条目。可以多次调用以获取最近添加到数据库中的表，但如果此 `MetaData`
    中的表在数据库中不再存在，则不会采取任何特殊操作。
- en: 'Parameters:'
  id: totrans-2373
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`bind` – A [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    or [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    used to access the database.'
  id: totrans-2374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bind` – 用于访问数据库的 [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 或 [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")。'
- en: '`schema` – Optional, query and reflect tables from an alternate schema. If
    None, the schema associated with this [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") is used, if any.'
  id: totrans-2375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` – 可选，从替代模式查询和反映表。如果为None，则使用与此[`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")关联的模式（如果有）。'
- en: '`views` – If True, also reflect views (materialized and plain).'
  id: totrans-2376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`views` – 如果为True，则还反映视图（物化和普通）。'
- en: '`only` –'
  id: totrans-2377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`only` –'
- en: Optional. Load only a sub-set of available named tables. May be specified as
    a sequence of names or a callable.
  id: totrans-2378
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选。仅加载可用命名表的子集。可以指定为名称序列或可调用对象。
- en: If a sequence of names is provided, only those tables will be reflected. An
    error is raised if a table is requested but not available. Named tables already
    present in this `MetaData` are ignored.
  id: totrans-2379
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果提供了名称序列，则只会反映这些表。如果请求了一个表但该表不可用，则会引发错误。已经存在于此`MetaData`中的命名表将被忽略。
- en: If a callable is provided, it will be used as a boolean predicate to filter
    the list of potential table names. The callable is called with a table name and
    this `MetaData` instance as positional arguments and should return a true value
    for any table to reflect.
  id: totrans-2380
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果提供了可调用对象，则将用作布尔谓词来过滤潜在的表名称列表。可调用对象以表名称和此`MetaData`实例作为位置参数调用，并应为任何要反映的表返回一个真值。
- en: '`extend_existing` – Passed along to each [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") as [`Table.extend_existing`](#sqlalchemy.schema.Table.params.extend_existing
    "sqlalchemy.schema.Table").'
  id: totrans-2381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`extend_existing` – 传递给每个[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")作为[`Table.extend_existing`](#sqlalchemy.schema.Table.params.extend_existing
    "sqlalchemy.schema.Table")。'
- en: '`autoload_replace` – Passed along to each [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") as [`Table.autoload_replace`](#sqlalchemy.schema.Table.params.autoload_replace
    "sqlalchemy.schema.Table").'
  id: totrans-2382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoload_replace` – 传递给每个[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")作为[`Table.autoload_replace`](#sqlalchemy.schema.Table.params.autoload_replace
    "sqlalchemy.schema.Table")。'
- en: '`resolve_fks` –'
  id: totrans-2383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`resolve_fks` –'
- en: if True, reflect [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects linked to [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") objects located in each [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"). For [`MetaData.reflect()`](#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect"), this has the effect of reflecting related
    tables that might otherwise not be in the list of tables being reflected, for
    example if the referenced table is in a different schema or is omitted via the
    [`MetaData.reflect.only`](#sqlalchemy.schema.MetaData.reflect.params.only "sqlalchemy.schema.MetaData.reflect")
    parameter. When False, [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") objects are not followed to the [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") in which they link, however if the related table is
    also part of the list of tables that would be reflected in any case, the [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") object will still resolve to its related [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") after the [`MetaData.reflect()`](#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") operation is complete. Defaults to True.
  id: totrans-2384
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果为True，则反映与每个[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")中的[`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey")对象链接的[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")。对于[`MetaData.reflect()`](#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect")，这将导致反映可能不在要反映的表列表中的相关表，例如，如果引用的表位于不同的模式中或通过[`MetaData.reflect.only`](#sqlalchemy.schema.MetaData.reflect.params.only
    "sqlalchemy.schema.MetaData.reflect")参数被省略。当为False时，不会跟随[`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey")对象到它们链接的[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")，但是如果相关表也是反映表列表的一部分，那么在[`MetaData.reflect()`](#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect")操作完成后，[`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey")对象仍将解析为其相关的[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")。默认为True。
- en: New in version 1.3.0.
  id: totrans-2385
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 1.3.0版本中的新功能。
- en: See also
  id: totrans-2386
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Table.resolve_fks`](#sqlalchemy.schema.Table.params.resolve_fks "sqlalchemy.schema.Table")'
  id: totrans-2387
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Table.resolve_fks`](#sqlalchemy.schema.Table.params.resolve_fks "sqlalchemy.schema.Table")'
- en: '`**dialect_kwargs` – Additional keyword arguments not mentioned above are dialect
    specific, and passed in the form `<dialectname>_<argname>`. See the documentation
    regarding an individual dialect at [Dialects](../dialects/index.html) for detail
    on documented arguments.'
  id: totrans-2388
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**dialect_kwargs` – 未在上述提及的其他关键字参数是方言特定的，并以`<方言名称>_<参数名称>`的形式传递。有关详细记录参数的文档，请参阅[Dialects](../dialects/index.html)中有关单个方言的文档。'
- en: See also
  id: totrans-2389
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Reflecting Database Objects](reflection.html)'
  id: totrans-2390
  prefs: []
  type: TYPE_NORMAL
  zh: '[反映数据库对象](reflection.html)'
- en: '[`DDLEvents.column_reflect()`](events.html#sqlalchemy.events.DDLEvents.column_reflect
    "sqlalchemy.events.DDLEvents.column_reflect") - Event used to customize the reflected
    columns. Usually used to generalize the types using [`TypeEngine.as_generic()`](type_api.html#sqlalchemy.types.TypeEngine.as_generic
    "sqlalchemy.types.TypeEngine.as_generic")'
  id: totrans-2391
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DDLEvents.column_reflect()`](events.html#sqlalchemy.events.DDLEvents.column_reflect
    "sqlalchemy.events.DDLEvents.column_reflect") - 用于自定义反映列的事件。通常用于使用[`TypeEngine.as_generic()`](type_api.html#sqlalchemy.types.TypeEngine.as_generic
    "sqlalchemy.types.TypeEngine.as_generic")泛化类型。'
- en: '[Reflecting with Database-Agnostic Types](reflection.html#metadata-reflection-dbagnostic-types)
    - describes how to reflect tables using general types.'
  id: totrans-2392
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用与数据库无关的类型反映](reflection.html#metadata-reflection-dbagnostic-types) - 描述如何使用通用类型反映表格。'
- en: '[PRE457]'
  id: totrans-2393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE457]'
- en: Remove the given Table object from this MetaData.
  id: totrans-2394
  prefs: []
  type: TYPE_NORMAL
  zh: 从此MetaData中删除给定的Table对象。
- en: '[PRE458]'
  id: totrans-2395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE458]'
- en: Returns a list of [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects sorted in order of foreign key dependency.
  id: totrans-2396
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个按外键依赖顺序排序的[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象列表。
- en: The sorting will place [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects that have dependencies first, before the dependencies themselves, representing
    the order in which they can be created. To get the order in which the tables would
    be dropped, use the `reversed()` Python built-in.
  id: totrans-2397
  prefs: []
  type: TYPE_NORMAL
  zh: 排序将首先将具有依赖关系的[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象放置在依赖关系本身之前，表示它们可以被创建的顺序。要获取表格将被删除的顺序，请使用Python内置的`reversed()`。
- en: Warning
  id: totrans-2398
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: The [`MetaData.sorted_tables`](#sqlalchemy.schema.MetaData.sorted_tables "sqlalchemy.schema.MetaData.sorted_tables")
    attribute cannot by itself accommodate automatic resolution of dependency cycles
    between tables, which are usually caused by mutually dependent foreign key constraints.
    When these cycles are detected, the foreign keys of these tables are omitted from
    consideration in the sort. A warning is emitted when this condition occurs, which
    will be an exception raise in a future release. Tables which are not part of the
    cycle will still be returned in dependency order.
  id: totrans-2399
  prefs: []
  type: TYPE_NORMAL
  zh: 单独的[`MetaData.sorted_tables`](#sqlalchemy.schema.MetaData.sorted_tables "sqlalchemy.schema.MetaData.sorted_tables")属性本身不能自动解决表格之间的依赖循环，这些循环通常是由相互依赖的外键约束引起的。当检测到这些循环时，这些表的外键将被忽略在排序中考虑。当此条件发生时，会发出警告，这将在未来的版本中引发异常。仍将以依赖顺序返回不属于循环的表。
- en: To resolve these cycles, the [`ForeignKeyConstraint.use_alter`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint.params.use_alter
    "sqlalchemy.schema.ForeignKeyConstraint") parameter may be applied to those constraints
    which create a cycle. Alternatively, the [`sort_tables_and_constraints()`](ddl.html#sqlalchemy.schema.sort_tables_and_constraints
    "sqlalchemy.schema.sort_tables_and_constraints") function will automatically return
    foreign key constraints in a separate collection when cycles are detected so that
    they may be applied to a schema separately.
  id: totrans-2400
  prefs: []
  type: TYPE_NORMAL
  zh: 要解决这些循环，可以将[`ForeignKeyConstraint.use_alter`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint.params.use_alter
    "sqlalchemy.schema.ForeignKeyConstraint")参数应用于创建循环的那些约束。或者，当检测到循环时，[`sort_tables_and_constraints()`](ddl.html#sqlalchemy.schema.sort_tables_and_constraints
    "sqlalchemy.schema.sort_tables_and_constraints")函数将自动将外键约束返回到单独的集合中，以便可以将其应用于模式。
- en: 'Changed in version 1.3.17: - a warning is emitted when [`MetaData.sorted_tables`](#sqlalchemy.schema.MetaData.sorted_tables
    "sqlalchemy.schema.MetaData.sorted_tables") cannot perform a proper sort due to
    cyclical dependencies. This will be an exception in a future release. Additionally,
    the sort will continue to return other tables not involved in the cycle in dependency
    order which was not the case previously.'
  id: totrans-2401
  prefs: []
  type: TYPE_NORMAL
  zh: 从1.3.17版本开始更改：当由于循环依赖关系而无法对[`MetaData.sorted_tables`](#sqlalchemy.schema.MetaData.sorted_tables
    "sqlalchemy.schema.MetaData.sorted_tables")进行适当排序时，会发出警告。这将在未来的版本中引发异常。此外，排序将继续以先前不属于循环的其他表的依赖顺序返回其他表，这不是以前的情况。
- en: See also
  id: totrans-2402
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`sort_tables()`](ddl.html#sqlalchemy.schema.sort_tables "sqlalchemy.schema.sort_tables")'
  id: totrans-2403
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sort_tables()`](ddl.html#sqlalchemy.schema.sort_tables "sqlalchemy.schema.sort_tables")'
- en: '[`sort_tables_and_constraints()`](ddl.html#sqlalchemy.schema.sort_tables_and_constraints
    "sqlalchemy.schema.sort_tables_and_constraints")'
  id: totrans-2404
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sort_tables_and_constraints()`](ddl.html#sqlalchemy.schema.sort_tables_and_constraints
    "sqlalchemy.schema.sort_tables_and_constraints")'
- en: '[`MetaData.tables`](#sqlalchemy.schema.MetaData.tables "sqlalchemy.schema.MetaData.tables")'
  id: totrans-2405
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MetaData.tables`](#sqlalchemy.schema.MetaData.tables "sqlalchemy.schema.MetaData.tables")'
- en: '[`Inspector.get_table_names()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_table_names
    "sqlalchemy.engine.reflection.Inspector.get_table_names")'
  id: totrans-2406
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Inspector.get_table_names()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_table_names
    "sqlalchemy.engine.reflection.Inspector.get_table_names")'
- en: '[`Inspector.get_sorted_table_and_fkc_names()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_sorted_table_and_fkc_names
    "sqlalchemy.engine.reflection.Inspector.get_sorted_table_and_fkc_names")'
  id: totrans-2407
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Inspector.get_sorted_table_and_fkc_names()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_sorted_table_and_fkc_names
    "sqlalchemy.engine.reflection.Inspector.get_sorted_table_and_fkc_names")'
- en: '[PRE459]'
  id: totrans-2408
  prefs: []
  type: TYPE_PRE
  zh: '[PRE459]'
- en: A dictionary of [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects keyed to their name or “table key”.
  id: totrans-2409
  prefs: []
  type: TYPE_NORMAL
  zh: 一个以其名称或“表键”为键的[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象字典。
- en: The exact key is that determined by the [`Table.key`](#sqlalchemy.schema.Table.key
    "sqlalchemy.schema.Table.key") attribute; for a table with no [`Table.schema`](#sqlalchemy.schema.Table.schema
    "sqlalchemy.schema.Table.schema") attribute, this is the same as `Table.name`.
    For a table with a schema, it is typically of the form `schemaname.tablename`.
  id: totrans-2410
  prefs: []
  type: TYPE_NORMAL
  zh: 具体键是由[`Table.key`](#sqlalchemy.schema.Table.key "sqlalchemy.schema.Table.key")属性确定的；对于没有[`Table.schema`](#sqlalchemy.schema.Table.schema
    "sqlalchemy.schema.Table.schema")属性的表，这与`Table.name`相同。对于具有模式的表，通常是`schemaname.tablename`的形式。
- en: See also
  id: totrans-2411
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`MetaData.sorted_tables`](#sqlalchemy.schema.MetaData.sorted_tables "sqlalchemy.schema.MetaData.sorted_tables")'
  id: totrans-2412
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MetaData.sorted_tables`](#sqlalchemy.schema.MetaData.sorted_tables "sqlalchemy.schema.MetaData.sorted_tables")'
- en: '[PRE460]'
  id: totrans-2413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE460]'
- en: An enumeration.
  id: totrans-2414
  prefs: []
  type: TYPE_NORMAL
  zh: 一个枚举。
- en: '**Members**'
  id: totrans-2415
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[BLANK_SCHEMA](#sqlalchemy.schema.SchemaConst.BLANK_SCHEMA), [NULL_UNSPECIFIED](#sqlalchemy.schema.SchemaConst.NULL_UNSPECIFIED),
    [RETAIN_SCHEMA](#sqlalchemy.schema.SchemaConst.RETAIN_SCHEMA)'
  id: totrans-2416
  prefs: []
  type: TYPE_NORMAL
  zh: '[BLANK_SCHEMA](#sqlalchemy.schema.SchemaConst.BLANK_SCHEMA)，[NULL_UNSPECIFIED](#sqlalchemy.schema.SchemaConst.NULL_UNSPECIFIED)，[RETAIN_SCHEMA](#sqlalchemy.schema.SchemaConst.RETAIN_SCHEMA)'
- en: '**Class signature**'
  id: totrans-2417
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.SchemaConst`](#sqlalchemy.schema.SchemaConst "sqlalchemy.schema.SchemaConst")
    (`enum.Enum`)
  id: totrans-2418
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.schema.SchemaConst`](#sqlalchemy.schema.SchemaConst "sqlalchemy.schema.SchemaConst")
    (`enum.Enum`)
- en: '[PRE461]'
  id: totrans-2419
  prefs: []
  type: TYPE_PRE
  zh: '[PRE461]'
- en: Symbol indicating that a [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    or [`Sequence`](defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    should have ‘None’ for its schema, even if the parent [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") has specified a schema.
  id: totrans-2420
  prefs: []
  type: TYPE_NORMAL
  zh: 表示在某些情况下，即使父 [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    指定了模式，[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") 或 [`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") 应该具有“None”作为其模式。
- en: See also
  id: totrans-2421
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`MetaData.schema`](#sqlalchemy.schema.MetaData.params.schema "sqlalchemy.schema.MetaData")'
  id: totrans-2422
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MetaData.schema`](#sqlalchemy.schema.MetaData.params.schema "sqlalchemy.schema.MetaData")'
- en: '[`Table.schema`](#sqlalchemy.schema.Table.params.schema "sqlalchemy.schema.Table")'
  id: totrans-2423
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Table.schema`](#sqlalchemy.schema.Table.params.schema "sqlalchemy.schema.Table")'
- en: '[`Sequence.schema`](defaults.html#sqlalchemy.schema.Sequence.params.schema
    "sqlalchemy.schema.Sequence")'
  id: totrans-2424
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Sequence.schema`](defaults.html#sqlalchemy.schema.Sequence.params.schema
    "sqlalchemy.schema.Sequence")。'
- en: '[PRE462]'
  id: totrans-2425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE462]'
- en: Symbol indicating the “nullable” keyword was not passed to a Column.
  id: totrans-2426
  prefs: []
  type: TYPE_NORMAL
  zh: 表示“nullable”关键字未传递给列的符号。
- en: This is used to distinguish between the use case of passing `nullable=None`
    to a [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column"), which has
    special meaning on some backends such as SQL Server.
  id: totrans-2427
  prefs: []
  type: TYPE_NORMAL
  zh: 这用于区分将`nullable=None`传递给[`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")的用例，这在某些后端（如SQL
    Server）中具有特殊含义。
- en: '[PRE463]'
  id: totrans-2428
  prefs: []
  type: TYPE_PRE
  zh: '[PRE463]'
- en: Symbol indicating that a [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table"),
    [`Sequence`](defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    or in some cases a [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") object, in situations where the object is being
    copied for a [`Table.to_metadata()`](#sqlalchemy.schema.Table.to_metadata "sqlalchemy.schema.Table.to_metadata")
    operation, should retain the schema name that it already has.
  id: totrans-2429
  prefs: []
  type: TYPE_NORMAL
  zh: 表示在某些情况下，对于正在复制的 [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")、[`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") 或者 [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") 对象，应该保留其已经具有的模式名称。
- en: '[PRE464]'
  id: totrans-2430
  prefs: []
  type: TYPE_PRE
  zh: '[PRE464]'
- en: Base class for items that define a database schema.
  id: totrans-2431
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库模式定义项的基类。
- en: '**Members**'
  id: totrans-2432
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[info](#sqlalchemy.schema.SchemaItem.info)'
  id: totrans-2433
  prefs: []
  type: TYPE_NORMAL
  zh: '[info](#sqlalchemy.schema.SchemaItem.info)'
- en: '**Class signature**'
  id: totrans-2434
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.SchemaItem`](#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")
    (`sqlalchemy.sql.expression.SchemaEventTarget`, [`sqlalchemy.sql.visitors.Visitable`](visitors.html#sqlalchemy.sql.visitors.Visitable
    "sqlalchemy.sql.visitors.Visitable"))
  id: totrans-2435
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.schema.SchemaItem`](#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")
    (`sqlalchemy.sql.expression.SchemaEventTarget`, [`sqlalchemy.sql.visitors.Visitable`](visitors.html#sqlalchemy.sql.visitors.Visitable
    "sqlalchemy.sql.visitors.Visitable"))
- en: '[PRE465]'
  id: totrans-2436
  prefs: []
  type: TYPE_PRE
  zh: '[PRE465]'
- en: Info dictionary associated with the object, allowing user-defined data to be
    associated with this [`SchemaItem`](#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem").
  id: totrans-2437
  prefs: []
  type: TYPE_NORMAL
  zh: 与对象关联的信息字典，允许将用户定义的数据与此 [`SchemaItem`](#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")
    关联。
- en: The dictionary is automatically generated when first accessed. It can also be
    specified in the constructor of some objects, such as [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") and [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column").
  id: totrans-2438
  prefs: []
  type: TYPE_NORMAL
  zh: 字典在首次访问时会自动生成。它也可以在某些对象的构造函数中指定，例如 [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    和 [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")。
- en: '[PRE466]'
  id: totrans-2439
  prefs: []
  type: TYPE_PRE
  zh: '[PRE466]'
- en: Provides a surrogate [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    that will act as a dedicated insert [sentinel](../glossary.html#term-sentinel)
    column, allowing efficient bulk inserts with deterministic RETURNING sorting for
    tables that don’t otherwise have qualifying primary key configurations.
  id: totrans-2440
  prefs: []
  type: TYPE_NORMAL
  zh: 提供一个代理 [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column") ，它将充当专用的插入
    [sentinel](../glossary.html#term-sentinel) 列，允许对没有其他合格的主键配置的表进行高效的批量插入，并实现确定性的
    RETURNING 排序。
- en: Adding this column to a [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object requires that a corresponding database table actually has this column present,
    so if adding it to an existing model, existing database tables would need to be
    migrated (e.g. using ALTER TABLE or similar) to include this column.
  id: totrans-2441
  prefs: []
  type: TYPE_NORMAL
  zh: 将此列添加到 [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") 对象中需要确保相应的数据库表实际上具有此列，因此如果将其添加到现有模型中，则现有的数据库表需要进行迁移（例如使用
    ALTER TABLE 或类似操作）以包含此列。
- en: For background on how this object is used, see the section [Configuring Sentinel
    Columns](connections.html#engine-insertmanyvalues-sentinel-columns) as part of
    the section [“Insert Many Values” Behavior for INSERT statements](connections.html#engine-insertmanyvalues).
  id: totrans-2442
  prefs: []
  type: TYPE_NORMAL
  zh: 关于此对象的使用背景，请参阅部分 [配置 Sentinel 列](connections.html#engine-insertmanyvalues-sentinel-columns)
    作为部分 [“插入多个值” INSERT 语句的行为](connections.html#engine-insertmanyvalues)。
- en: The [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column") returned
    will be a nullable integer column by default and make use of a sentinel-specific
    default generator used only in “insertmanyvalues” operations.
  id: totrans-2443
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，返回的 [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column") 将是可空的整数列，并且仅在“insertmanyvalues”操作中使用特定于
    sentinel 的默认生成器。
- en: See also
  id: totrans-2444
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`orm_insert_sentinel()`](../orm/mapping_api.html#sqlalchemy.orm.orm_insert_sentinel
    "sqlalchemy.orm.orm_insert_sentinel")'
  id: totrans-2445
  prefs: []
  type: TYPE_NORMAL
  zh: '[`orm_insert_sentinel()`](../orm/mapping_api.html#sqlalchemy.orm.orm_insert_sentinel
    "sqlalchemy.orm.orm_insert_sentinel")'
- en: '[`Column.insert_sentinel`](#sqlalchemy.schema.Column.params.insert_sentinel
    "sqlalchemy.schema.Column")'
  id: totrans-2446
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Column.insert_sentinel`](#sqlalchemy.schema.Column.params.insert_sentinel
    "sqlalchemy.schema.Column")'
- en: '[“Insert Many Values” Behavior for INSERT statements](connections.html#engine-insertmanyvalues)'
  id: totrans-2447
  prefs: []
  type: TYPE_NORMAL
  zh: '[“插入多个值” INSERT 语句的行为](connections.html#engine-insertmanyvalues)'
- en: '[Configuring Sentinel Columns](connections.html#engine-insertmanyvalues-sentinel-columns)'
  id: totrans-2448
  prefs: []
  type: TYPE_NORMAL
  zh: '[配置 Sentinel 列](connections.html#engine-insertmanyvalues-sentinel-columns)'
- en: New in version 2.0.10.
  id: totrans-2449
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本中新增功能 2.0.10。
- en: '[PRE467]'
  id: totrans-2450
  prefs: []
  type: TYPE_PRE
  zh: '[PRE467]'
- en: Represent a table in a database.
  id: totrans-2451
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据库中表示一个表。
- en: 'e.g.:'
  id: totrans-2452
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE468]'
  id: totrans-2453
  prefs: []
  type: TYPE_PRE
  zh: '[PRE468]'
- en: The [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") object constructs
    a unique instance of itself based on its name and optional schema name within
    the given [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    object. Calling the [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    constructor with the same name and same [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") argument a second time will return the *same* [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object - in this way the [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") constructor acts as a registry function.
  id: totrans-2454
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") 对象根据其名称和可选模式名称在给定的
    [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData") 对象内构造唯一的实例。使用相同的名称和相同的
    [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData") 参数再次调用
    [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") 构造函数将返回相同的 [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 对象 - 这样 [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    构造函数充当注册函数。'
- en: See also
  id: totrans-2455
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[Describing Databases with MetaData](#metadata-describing) - Introduction to
    database metadata'
  id: totrans-2456
  prefs: []
  type: TYPE_NORMAL
  zh: '[描述数据库的元数据](#metadata-describing) - 数据库元数据介绍'
- en: '**Members**'
  id: totrans-2457
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.schema.Table.__init__), [add_is_dependent_on()](#sqlalchemy.schema.Table.add_is_dependent_on),
    [alias()](#sqlalchemy.schema.Table.alias), [append_column()](#sqlalchemy.schema.Table.append_column),
    [append_constraint()](#sqlalchemy.schema.Table.append_constraint), [argument_for()](#sqlalchemy.schema.Table.argument_for),
    [autoincrement_column](#sqlalchemy.schema.Table.autoincrement_column), [c](#sqlalchemy.schema.Table.c),
    [columns](#sqlalchemy.schema.Table.columns), [compare()](#sqlalchemy.schema.Table.compare),
    [compile()](#sqlalchemy.schema.Table.compile), [constraints](#sqlalchemy.schema.Table.constraints),
    [corresponding_column()](#sqlalchemy.schema.Table.corresponding_column), [create()](#sqlalchemy.schema.Table.create),
    [delete()](#sqlalchemy.schema.Table.delete), [description](#sqlalchemy.schema.Table.description),
    [dialect_kwargs](#sqlalchemy.schema.Table.dialect_kwargs), [dialect_options](#sqlalchemy.schema.Table.dialect_options),
    [drop()](#sqlalchemy.schema.Table.drop), [entity_namespace](#sqlalchemy.schema.Table.entity_namespace),
    [exported_columns](#sqlalchemy.schema.Table.exported_columns), [foreign_key_constraints](#sqlalchemy.schema.Table.foreign_key_constraints),
    [foreign_keys](#sqlalchemy.schema.Table.foreign_keys), [get_children()](#sqlalchemy.schema.Table.get_children),
    [implicit_returning](#sqlalchemy.schema.Table.implicit_returning), [indexes](#sqlalchemy.schema.Table.indexes),
    [info](#sqlalchemy.schema.Table.info), [inherit_cache](#sqlalchemy.schema.Table.inherit_cache),
    [insert()](#sqlalchemy.schema.Table.insert), [is_derived_from()](#sqlalchemy.schema.Table.is_derived_from),
    [join()](#sqlalchemy.schema.Table.join), [key](#sqlalchemy.schema.Table.key),
    [kwargs](#sqlalchemy.schema.Table.kwargs), [lateral()](#sqlalchemy.schema.Table.lateral),
    [outerjoin()](#sqlalchemy.schema.Table.outerjoin), [params()](#sqlalchemy.schema.Table.params),
    [primary_key](#sqlalchemy.schema.Table.primary_key), [replace_selectable()](#sqlalchemy.schema.Table.replace_selectable),
    [schema](#sqlalchemy.schema.Table.schema), [select()](#sqlalchemy.schema.Table.select),
    [self_group()](#sqlalchemy.schema.Table.self_group), [table_valued()](#sqlalchemy.schema.Table.table_valued),
    [tablesample()](#sqlalchemy.schema.Table.tablesample), [to_metadata()](#sqlalchemy.schema.Table.to_metadata),
    [tometadata()](#sqlalchemy.schema.Table.tometadata), [unique_params()](#sqlalchemy.schema.Table.unique_params),
    [update()](#sqlalchemy.schema.Table.update)'
  id: totrans-2458
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.schema.Table.__init__)，[add_is_dependent_on()](#sqlalchemy.schema.Table.add_is_dependent_on)，[alias()](#sqlalchemy.schema.Table.alias)，[append_column()](#sqlalchemy.schema.Table.append_column)，[append_constraint()](#sqlalchemy.schema.Table.append_constraint)，[argument_for()](#sqlalchemy.schema.Table.argument_for)，[autoincrement_column](#sqlalchemy.schema.Table.autoincrement_column)，[c](#sqlalchemy.schema.Table.c)，[columns](#sqlalchemy.schema.Table.columns)，[compare()](#sqlalchemy.schema.Table.compare)，[compile()](#sqlalchemy.schema.Table.compile)，[constraints](#sqlalchemy.schema.Table.constraints)，[corresponding_column()](#sqlalchemy.schema.Table.corresponding_column)，[create()](#sqlalchemy.schema.Table.create)，[delete()](#sqlalchemy.schema.Table.delete)，[description](#sqlalchemy.schema.Table.description)，[dialect_kwargs](#sqlalchemy.schema.Table.dialect_kwargs)，[dialect_options](#sqlalchemy.schema.Table.dialect_options)，[drop()](#sqlalchemy.schema.Table.drop)，[entity_namespace](#sqlalchemy.schema.Table.entity_namespace)，[exported_columns](#sqlalchemy.schema.Table.exported_columns)，[foreign_key_constraints](#sqlalchemy.schema.Table.foreign_key_constraints)，[foreign_keys](#sqlalchemy.schema.Table.foreign_keys)，[get_children()](#sqlalchemy.schema.Table.get_children)，[implicit_returning](#sqlalchemy.schema.Table.implicit_returning)，[indexes](#sqlalchemy.schema.Table.indexes)，[info](#sqlalchemy.schema.Table.info)，[inherit_cache](#sqlalchemy.schema.Table.inherit_cache)，[insert()](#sqlalchemy.schema.Table.insert)，[is_derived_from()](#sqlalchemy.schema.Table.is_derived_from)，[join()](#sqlalchemy.schema.Table.join)，[key](#sqlalchemy.schema.Table.key)，[kwargs](#sqlalchemy.schema.Table.kwargs)，[lateral()](#sqlalchemy.schema.Table.lateral)，[outerjoin()](#sqlalchemy.schema.Table.outerjoin)，[params()](#sqlalchemy.schema.Table.params)，[primary_key](#sqlalchemy.schema.Table.primary_key)，[replace_selectable()](#sqlalchemy.schema.Table.replace_selectable)，[schema](#sqlalchemy.schema.Table.schema)，[select()](#sqlalchemy.schema.Table.select)，[self_group()](#sqlalchemy.schema.Table.self_group)，[table_valued()](#sqlalchemy.schema.Table.table_valued)，[tablesample()](#sqlalchemy.schema.Table.tablesample)，[to_metadata()](#sqlalchemy.schema.Table.to_metadata)，[tometadata()](#sqlalchemy.schema.Table.tometadata)，[unique_params()](#sqlalchemy.schema.Table.unique_params)，[update()](#sqlalchemy.schema.Table.update)'
- en: '**Class signature**'
  id: totrans-2459
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    ([`sqlalchemy.sql.base.DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs"), `sqlalchemy.schema.HasSchemaAttr`, [`sqlalchemy.sql.expression.TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause"), `sqlalchemy.inspection.Inspectable`)
  id: totrans-2460
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.schema.Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")（[`sqlalchemy.sql.base.DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")，`sqlalchemy.schema.HasSchemaAttr`，[`sqlalchemy.sql.expression.TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause")，`sqlalchemy.inspection.Inspectable`）
- en: '[PRE469]'
  id: totrans-2461
  prefs: []
  type: TYPE_PRE
  zh: '[PRE469]'
- en: Constructor for [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table").
  id: totrans-2462
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") 的构造函数。'
- en: 'Parameters:'
  id: totrans-2463
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`name` –'
  id: totrans-2464
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` –'
- en: The name of this table as represented in the database.
  id: totrans-2465
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 数据库中表示此表的名称。
- en: The table name, along with the value of the `schema` parameter, forms a key
    which uniquely identifies this [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    within the owning [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    collection. Additional calls to [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    with the same name, metadata, and schema name will return the same [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object.
  id: totrans-2466
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 表名与 `schema` 参数的值一起形成一个键，唯一标识此 [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    在所属的 [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData") 集合中。对具有相同名称、元数据和模式名称的
    [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") 的其他调用将返回相同的 [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 对象。
- en: Names which contain no upper case characters will be treated as case insensitive
    names, and will not be quoted unless they are a reserved word or contain special
    characters. A name with any number of upper case characters is considered to be
    case sensitive, and will be sent as quoted.
  id: totrans-2467
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不含大写字符的名称将被视为大小写不敏感的名称，并且除非它们是保留字或包含特殊字符，否则不会被引用。任何数量的大写字符被视为区分大小写的名称，并将作为引号发送。
- en: To enable unconditional quoting for the table name, specify the flag `quote=True`
    to the constructor, or use the [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name") construct to specify the name.
  id: totrans-2468
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要为表名启用无条件引用，请在构造函数中指定标志 `quote=True`，或使用 [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name") 构造指定名称。
- en: '`metadata` – a [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    object which will contain this table. The metadata is used as a point of association
    of this table with other tables which are referenced via foreign key. It also
    may be used to associate this table with a particular [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") or [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine").'
  id: totrans-2469
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`metadata` – 一个 [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    对象，将包含此表。元数据用作将此表与其他通过外键引用的表关联的点。它也可以用于将此表与特定的 [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 或 [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 关联起来。'
- en: '`*args` – Additional positional arguments are used primarily to add the list
    of [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column") objects contained
    within this table. Similar to the style of a CREATE TABLE statement, other [`SchemaItem`](#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem") constructs may be added here, including [`PrimaryKeyConstraint`](constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint"), and [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint").'
  id: totrans-2470
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*args` – 主要用于添加此表中包含的 [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    对象列表的其他位置参数。类似于 CREATE TABLE 语句的风格，其他 [`SchemaItem`](#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem") 构造可以在此处添加，包括 [`PrimaryKeyConstraint`](constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") 和 [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")。'
- en: '`autoload_replace` –'
  id: totrans-2471
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoload_replace` –'
- en: Defaults to `True`; when using [`Table.autoload_with`](#sqlalchemy.schema.Table.params.autoload_with
    "sqlalchemy.schema.Table") in conjunction with [`Table.extend_existing`](#sqlalchemy.schema.Table.params.extend_existing
    "sqlalchemy.schema.Table"), indicates that [`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects present in the already-existing [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object should be replaced with columns of the same
    name retrieved from the autoload process. When `False`, columns already present
    under existing names will be omitted from the reflection process.
  id: totrans-2472
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认为 `True`；与 [`Table.extend_existing`](#sqlalchemy.schema.Table.params.extend_existing
    "sqlalchemy.schema.Table") 结合使用 [`Table.autoload_with`](#sqlalchemy.schema.Table.params.autoload_with
    "sqlalchemy.schema.Table") 时，指示已存在的 [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    对象中的 [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column") 对象应该被从 autoload
    过程中检索到的同名列替换。当 `False` 时，已存在的列将被从反射过程中省略。
- en: Note that this setting does not impact [`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects specified programmatically within the call
    to [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") that also is
    autoloading; those [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    objects will always replace existing columns of the same name when [`Table.extend_existing`](#sqlalchemy.schema.Table.params.extend_existing
    "sqlalchemy.schema.Table") is `True`.
  id: totrans-2473
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，此设置不会影响程序化指定的 [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    对象，在自动加载时也会替换具有相同名称的现有列，当 [`Table.extend_existing`](#sqlalchemy.schema.Table.params.extend_existing
    "sqlalchemy.schema.Table") 为 `True` 时。
- en: See also
  id: totrans-2474
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Table.autoload_with`](#sqlalchemy.schema.Table.params.autoload_with "sqlalchemy.schema.Table")'
  id: totrans-2475
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Table.autoload_with`](#sqlalchemy.schema.Table.params.autoload_with "sqlalchemy.schema.Table")'
- en: '[`Table.extend_existing`](#sqlalchemy.schema.Table.params.extend_existing "sqlalchemy.schema.Table")'
  id: totrans-2476
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Table.extend_existing`](#sqlalchemy.schema.Table.params.extend_existing "sqlalchemy.schema.Table")'
- en: '`autoload_with` –'
  id: totrans-2477
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoload_with` –'
- en: An [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    or [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object, or a [`Inspector`](reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector") object as returned by [`inspect()`](inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect") against one, with which this [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object will be reflected. When set to a non-None value,
    the autoload process will take place for this table against the given engine or
    connection.
  id: totrans-2478
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个 [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    或 [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    对象，或者通过 [`inspect()`](inspection.html#sqlalchemy.inspect "sqlalchemy.inspect")
    对其进行检查后返回的 [`Inspector`](reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector") 对象，其中此 [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 对象将被反射。当设置为非 None 值时，将对此表针对给定引擎或连接进行自动加载。
- en: See also
  id: totrans-2479
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Reflecting Database Objects](reflection.html)'
  id: totrans-2480
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[反射数据库对象](reflection.html)'
- en: '[`DDLEvents.column_reflect()`](events.html#sqlalchemy.events.DDLEvents.column_reflect
    "sqlalchemy.events.DDLEvents.column_reflect")'
  id: totrans-2481
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`DDLEvents.column_reflect()`](events.html#sqlalchemy.events.DDLEvents.column_reflect
    "sqlalchemy.events.DDLEvents.column_reflect")'
- en: '[Reflecting with Database-Agnostic Types](reflection.html#metadata-reflection-dbagnostic-types)'
  id: totrans-2482
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[使用数据库无关类型进行反射](reflection.html#metadata-reflection-dbagnostic-types)'
- en: '`extend_existing` –'
  id: totrans-2483
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`extend_existing` –'
- en: When `True`, indicates that if this [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    is already present in the given [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData"),
    apply further arguments within the constructor to the existing [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table").
  id: totrans-2484
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当设为`True`时，表示如果此 [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    已经存在于给定的 [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    中，则将构造函数中的进一步参数应用于现有的 [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")。
- en: If [`Table.extend_existing`](#sqlalchemy.schema.Table.params.extend_existing
    "sqlalchemy.schema.Table") or [`Table.keep_existing`](#sqlalchemy.schema.Table.params.keep_existing
    "sqlalchemy.schema.Table") are not set, and the given name of the new [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") refers to a [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    that is already present in the target [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") collection, and this [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") specifies additional columns or other constructs or
    flags that modify the table’s state, an error is raised. The purpose of these
    two mutually-exclusive flags is to specify what action should be taken when a
    [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") is specified that
    matches an existing [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table"),
    yet specifies additional constructs.
  id: totrans-2485
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果未设置 [`Table.extend_existing`](#sqlalchemy.schema.Table.params.extend_existing
    "sqlalchemy.schema.Table") 或 [`Table.keep_existing`](#sqlalchemy.schema.Table.params.keep_existing
    "sqlalchemy.schema.Table")，并且新 [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    的给定名称引用的是已经存在于目标 [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    集合中的 [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")，并且此 [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 指定了额外的列或其他结构或修改表状态的标志，那么将引发错误。这两个互斥标志的目的是指定当指定与现有 [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 匹配的 [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    时应采取的操作，但指定了其他构造。
- en: '[`Table.extend_existing`](#sqlalchemy.schema.Table.params.extend_existing "sqlalchemy.schema.Table")
    will also work in conjunction with [`Table.autoload_with`](#sqlalchemy.schema.Table.params.autoload_with
    "sqlalchemy.schema.Table") to run a new reflection operation against the database,
    even if a [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") of the
    same name is already present in the target [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData"); newly reflected [`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects and other options will be added into the state
    of the [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table"), potentially
    overwriting existing columns and options of the same name.'
  id: totrans-2486
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Table.extend_existing`](#sqlalchemy.schema.Table.params.extend_existing "sqlalchemy.schema.Table")
    - `Table.extend_existing`属性也将与[`Table.autoload_with`](#sqlalchemy.schema.Table.params.autoload_with
    "sqlalchemy.schema.Table")结合使用，针对数据库运行新的反射操作，即使目标[`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")中已经存在同名的[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")；新反射的[`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象和其他选项将被添加到[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")的状态中，可能会覆盖同名的现有列和选项。'
- en: 'As is always the case with [`Table.autoload_with`](#sqlalchemy.schema.Table.params.autoload_with
    "sqlalchemy.schema.Table"), [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    objects can be specified in the same [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    constructor, which will take precedence. Below, the existing table `mytable` will
    be augmented with [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    objects both reflected from the database, as well as the given [`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") named “y”:'
  id: totrans-2487
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与[`Table.autoload_with`](#sqlalchemy.schema.Table.params.autoload_with "sqlalchemy.schema.Table")一样，[`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象可以在同一[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")构造函数中指定，这将优先考虑。下面，现有表`mytable`将被用从数据库反射出的[`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象以及给定的名为“y”的[`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")对象增加：
- en: '[PRE470]'
  id: totrans-2488
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE470]'
- en: See also
  id: totrans-2489
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Table.autoload_with`](#sqlalchemy.schema.Table.params.autoload_with "sqlalchemy.schema.Table")'
  id: totrans-2490
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Table.autoload_with`](#sqlalchemy.schema.Table.params.autoload_with "sqlalchemy.schema.Table")
    - `Table.autoload_with`属性'
- en: '[`Table.autoload_replace`](#sqlalchemy.schema.Table.params.autoload_replace
    "sqlalchemy.schema.Table")'
  id: totrans-2491
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Table.autoload_replace`](#sqlalchemy.schema.Table.params.autoload_replace
    "sqlalchemy.schema.Table") - `Table.autoload_replace`属性'
- en: '[`Table.keep_existing`](#sqlalchemy.schema.Table.params.keep_existing "sqlalchemy.schema.Table")'
  id: totrans-2492
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Table.keep_existing`](#sqlalchemy.schema.Table.params.keep_existing "sqlalchemy.schema.Table")
    - `Table.keep_existing`属性'
- en: '`implicit_returning` –'
  id: totrans-2493
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`implicit_returning` – `implicit_returning`属性'
- en: True by default - indicates that RETURNING can be used, typically by the ORM,
    in order to fetch server-generated values such as primary key values and server
    side defaults, on those backends which support RETURNING.
  id: totrans-2494
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认为True - 表示返回值可以使用，通常由ORM使用，以便在支持RETURNING的后端上获取服务器生成的值，例如主键值和服务器端默认值。
- en: In modern SQLAlchemy there is generally no reason to alter this setting, except
    for some backend specific cases (see [Triggers](../dialects/mssql.html#mssql-triggers)
    in the SQL Server dialect documentation for one such example).
  id: totrans-2495
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在现代SQLAlchemy中，通常没有理由修改此设置，除了一些特定于后端的情况（有关一个这样的示例，请参见SQL Server方言文档中的[Triggers](../dialects/mssql.html#mssql-triggers)）。
- en: '`include_columns` – A list of strings indicating a subset of columns to be
    loaded via the `autoload` operation; table columns who aren’t present in this
    list will not be represented on the resulting `Table` object. Defaults to `None`
    which indicates all columns should be reflected.'
  id: totrans-2496
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`include_columns` – `include_columns`属性 - 一个字符串列表，指示要通过`autoload`操作加载的列的子集；不在此列表中的表列将不会在生成的`Table`对象上表示。默认为`None`，表示应反映所有列。'
- en: '`resolve_fks` –'
  id: totrans-2497
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`resolve_fks` – `resolve_fks`属性'
- en: Whether or not to reflect [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects related to this one via [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") objects, when [`Table.autoload_with`](#sqlalchemy.schema.Table.params.autoload_with
    "sqlalchemy.schema.Table") is specified. Defaults to True. Set to False to disable
    reflection of related tables as [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") objects are encountered; may be used either to
    save on SQL calls or to avoid issues with related tables that can’t be accessed.
    Note that if a related table is already present in the [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") collection, or becomes present later, a [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") object associated with this [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") will resolve to that table normally.
  id: totrans-2498
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 是否反映与此对象相关的[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象，当指定[`Table.autoload_with`](#sqlalchemy.schema.Table.params.autoload_with
    "sqlalchemy.schema.Table")时。默认为True。设置为False以禁用遇到的相关表的反射作为[`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey")对象；可以用于节省SQL调用或避免无法访问的相关表的问题。请注意，如果相关表已经存在于[`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")集合中，或稍后出现，与此[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")关联的[`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey")对象将正常解析到该表。
- en: New in version 1.3.
  id: totrans-2499
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本1.3中的新功能。
- en: See also
  id: totrans-2500
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`MetaData.reflect.resolve_fks`](#sqlalchemy.schema.MetaData.reflect.params.resolve_fks
    "sqlalchemy.schema.MetaData.reflect")'
  id: totrans-2501
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`MetaData.reflect.resolve_fks`](#sqlalchemy.schema.MetaData.reflect.params.resolve_fks
    "sqlalchemy.schema.MetaData.reflect")'
- en: '`info` – Optional data dictionary which will be populated into the [`SchemaItem.info`](#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info") attribute of this object.'
  id: totrans-2502
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`info` – 将填充到此对象的[`SchemaItem.info`](#sqlalchemy.schema.SchemaItem.info "sqlalchemy.schema.SchemaItem.info")属性中的可选数据字典。'
- en: '`keep_existing` –'
  id: totrans-2503
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`keep_existing` –'
- en: When `True`, indicates that if this Table is already present in the given [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData"), ignore further arguments within the constructor
    to the existing [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table"),
    and return the [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") object
    as originally created. This is to allow a function that wishes to define a new
    [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") on first call, but
    on subsequent calls will return the same [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table"),
    without any of the declarations (particularly constraints) being applied a second
    time.
  id: totrans-2504
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当为`True`时，表示如果此Table已经存在于给定的[`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")中，则忽略构造函数中现有[`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")的进一步参数，并将[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象返回为最初创建的对象。这是为了允许希望在第一次调用时定义新[`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")的函数，在后续调用中将返回相同的[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")，而不会再次应用任何声明（特别是约束）。
- en: If [`Table.extend_existing`](#sqlalchemy.schema.Table.params.extend_existing
    "sqlalchemy.schema.Table") or [`Table.keep_existing`](#sqlalchemy.schema.Table.params.keep_existing
    "sqlalchemy.schema.Table") are not set, and the given name of the new [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") refers to a [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    that is already present in the target [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") collection, and this [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") specifies additional columns or other constructs or
    flags that modify the table’s state, an error is raised. The purpose of these
    two mutually-exclusive flags is to specify what action should be taken when a
    [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") is specified that
    matches an existing [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table"),
    yet specifies additional constructs.
  id: totrans-2505
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果未设置[`Table.extend_existing`](#sqlalchemy.schema.Table.params.extend_existing
    "sqlalchemy.schema.Table")或[`Table.keep_existing`](#sqlalchemy.schema.Table.params.keep_existing
    "sqlalchemy.schema.Table")，并且新[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")的给定名称指的是目标[`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")集合中已经存在的一个[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")，并且这个[`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")指定了额外的列或其他构造或修改表状态的标志，将会引发错误。这两个互斥的标志的目的是指定当指定一个与现有[`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")匹配的[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")时应采取的操作，但指定了额外的构造。
- en: See also
  id: totrans-2506
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Table.extend_existing`](#sqlalchemy.schema.Table.params.extend_existing "sqlalchemy.schema.Table")'
  id: totrans-2507
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Table.extend_existing`](#sqlalchemy.schema.Table.params.extend_existing "sqlalchemy.schema.Table")'
- en: '`listeners` –'
  id: totrans-2508
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`listeners` –'
- en: 'A list of tuples of the form `(<eventname>, <fn>)` which will be passed to
    [`listen()`](event.html#sqlalchemy.event.listen "sqlalchemy.event.listen") upon
    construction. This alternate hook to [`listen()`](event.html#sqlalchemy.event.listen
    "sqlalchemy.event.listen") allows the establishment of a listener function specific
    to this [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") before the
    “autoload” process begins. Historically this has been intended for use with the
    [`DDLEvents.column_reflect()`](events.html#sqlalchemy.events.DDLEvents.column_reflect
    "sqlalchemy.events.DDLEvents.column_reflect") event, however note that this event
    hook may now be associated with the [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    object directly:'
  id: totrans-2509
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个形如`(<eventname>, <fn>)`的元组列表，将在构建时传递给[`listen()`](event.html#sqlalchemy.event.listen
    "sqlalchemy.event.listen")。这个替代的钩子用于在“autoload”过程开始之前建立一个特定于这个[`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")的监听器函数。历史上，这是用于与[`DDLEvents.column_reflect()`](events.html#sqlalchemy.events.DDLEvents.column_reflect
    "sqlalchemy.events.DDLEvents.column_reflect")事件一起使用的，但请注意，现在可以直接将此事件钩子与[`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")对象关联起来：
- en: '[PRE471]'
  id: totrans-2510
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE471]'
- en: See also
  id: totrans-2511
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`DDLEvents.column_reflect()`](events.html#sqlalchemy.events.DDLEvents.column_reflect
    "sqlalchemy.events.DDLEvents.column_reflect")'
  id: totrans-2512
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`DDLEvents.column_reflect()`](events.html#sqlalchemy.events.DDLEvents.column_reflect
    "sqlalchemy.events.DDLEvents.column_reflect")'
- en: '`must_exist` – When `True`, indicates that this Table must already be present
    in the given [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    collection, else an exception is raised.'
  id: totrans-2513
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`must_exist` – 当为`True`时，表示这个Table必须已经存在于给定的[`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")集合中，否则将引发异常。'
- en: '`prefixes` – A list of strings to insert after CREATE in the CREATE TABLE statement.
    They will be separated by spaces.'
  id: totrans-2514
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`prefixes` – 一个字符串列表，插入在CREATE TABLE语句中CREATE后面。它们将用空格分隔。'
- en: '`quote` –'
  id: totrans-2515
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`quote` –'
- en: Force quoting of this table’s name on or off, corresponding to `True` or `False`.
    When left at its default of `None`, the column identifier will be quoted according
    to whether the name is case sensitive (identifiers with at least one upper case
    character are treated as case sensitive), or if it’s a reserved word. This flag
    is only needed to force quoting of a reserved word which is not known by the SQLAlchemy
    dialect.
  id: totrans-2516
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 强制引用此表的名称打开或关闭，对应为`True`或`False`。当保持其默认值`None`时，根据名称是否区分大小写（至少有一个大写字符的标识符被视为区分大小写），或者它是否是保留字来引用列标识符。只有在需要强制引用SQLAlchemy方言不知道的保留字时才需要此标志。
- en: Note
  id: totrans-2517
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: setting this flag to `False` will not provide case-insensitive behavior for
    table reflection; table reflection will always search for a mixed-case name in
    a case sensitive fashion. Case insensitive names are specified in SQLAlchemy only
    by stating the name with all lower case characters.
  id: totrans-2518
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将此标志设置为 `False` 将不会为表反射提供不区分大小写的行为；表反射将始终以区分大小写的方式搜索混合大小写名称。 SQLAlchemy 中仅通过使用所有小写字符的名称来指定不区分大小写的名称。
- en: '`quote_schema` – same as ‘quote’ but applies to the schema identifier.'
  id: totrans-2519
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`quote_schema` - 与 ‘quote’ 相同，但适用于模式标识符。'
- en: '`schema` –'
  id: totrans-2520
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` -'
- en: The schema name for this table, which is required if the table resides in a
    schema other than the default selected schema for the engine’s database connection.
    Defaults to `None`.
  id: totrans-2521
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此表的模式名称，如果表位于引擎的数据库连接的默认选定模式之外的模式中，则需要。 默认为 `None`。
- en: If the owning [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    of this [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") specifies
    its own [`MetaData.schema`](#sqlalchemy.schema.MetaData.params.schema "sqlalchemy.schema.MetaData")
    parameter, then that schema name will be applied to this [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") if the schema parameter here is set to `None`. To set
    a blank schema name on a [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    that would otherwise use the schema set on the owning [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData"), specify the special symbol [`BLANK_SCHEMA`](#sqlalchemy.schema.SchemaConst.BLANK_SCHEMA
    "sqlalchemy.schema.SchemaConst.BLANK_SCHEMA").
  id: totrans-2522
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果此 [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") 的拥有者 [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") 指定了自己的 [`MetaData.schema`](#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData") 参数，则如果此处的模式参数设置为 `None`，则将该模式名称应用于此 [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")。 要在否则使用所设置的模式的拥有者 [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") 的 [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    上设置空白模式名称，请指定特殊符号 [`BLANK_SCHEMA`](#sqlalchemy.schema.SchemaConst.BLANK_SCHEMA
    "sqlalchemy.schema.SchemaConst.BLANK_SCHEMA")。
- en: The quoting rules for the schema name are the same as those for the `name` parameter,
    in that quoting is applied for reserved words or case-sensitive names; to enable
    unconditional quoting for the schema name, specify the flag `quote_schema=True`
    to the constructor, or use the [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name") construct to specify the name.
  id: totrans-2523
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 模式名称的引用规则与 `name` 参数的规则相同，即对保留字或区分大小写的名称应用引用； 要为模式名称启用无条件引用，请在构造函数中指定标志 `quote_schema=True`，或使用
    [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name "sqlalchemy.sql.expression.quoted_name")
    结构来指定名称。
- en: '`comment` –'
  id: totrans-2524
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`comment` -'
- en: Optional string that will render an SQL comment on table creation.
  id: totrans-2525
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选字符串，将在表创建时呈现 SQL 注释。
- en: 'New in version 1.2: Added the [`Table.comment`](#sqlalchemy.schema.Table.params.comment
    "sqlalchemy.schema.Table") parameter to [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table").'
  id: totrans-2526
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版本 1.2 中：添加了 [`Table.comment`](#sqlalchemy.schema.Table.params.comment "sqlalchemy.schema.Table")
    参数到 [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")。
- en: '`**kw` – Additional keyword arguments not mentioned above are dialect specific,
    and passed in the form `<dialectname>_<argname>`. See the documentation regarding
    an individual dialect at [Dialects](../dialects/index.html) for detail on documented
    arguments.'
  id: totrans-2527
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` - 上面未提及的附加关键字参数是特定于方言的，并以 `<dialectname>_<argname>` 的形式传递。 有关有关个别方言的文档中记录的参数的详细信息，请参阅
    [方言](../dialects/index.html) 中的个别方言的文档。'
- en: '[PRE472]'
  id: totrans-2528
  prefs: []
  type: TYPE_PRE
  zh: '[PRE472]'
- en: Add a ‘dependency’ for this Table.
  id: totrans-2529
  prefs: []
  type: TYPE_NORMAL
  zh: 为此表添加一个‘依赖’。
- en: This is another Table object which must be created first before this one can,
    or dropped after this one.
  id: totrans-2530
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一个必须在此之前创建的 Table 对象，或者在此之后删除的对象。
- en: Usually, dependencies between tables are determined via ForeignKey objects.
    However, for other situations that create dependencies outside of foreign keys
    (rules, inheriting), this method can manually establish such a link.
  id: totrans-2531
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，表之间的依赖关系是通过外键对象确定的。然而，对于创建外键以外的其他情况（规则、继承），可以手动建立这样的链接。
- en: '[PRE473]'
  id: totrans-2532
  prefs: []
  type: TYPE_PRE
  zh: '[PRE473]'
- en: '*inherited from the* [`FromClause.alias()`](selectable.html#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") *method of* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  id: totrans-2533
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FromClause.alias()`](selectable.html#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") *方法的* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
- en: Return an alias of this [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-2534
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此 [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    的别名。
- en: 'E.g.:'
  id: totrans-2535
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE474]'
  id: totrans-2536
  prefs: []
  type: TYPE_PRE
  zh: '[PRE474]'
- en: The above code creates an [`Alias`](selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") object which can be used as a FROM clause in
    any SELECT statement.
  id: totrans-2537
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码创建了一个 [`Alias`](selectable.html#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    对象，可在任何SELECT语句中用作FROM子句。
- en: See also
  id: totrans-2538
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[Using Aliases](../tutorial/data_select.html#tutorial-using-aliases)'
  id: totrans-2539
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用别名](../tutorial/data_select.html#tutorial-using-aliases)'
- en: '[`alias()`](selectable.html#sqlalchemy.sql.expression.alias "sqlalchemy.sql.expression.alias")'
  id: totrans-2540
  prefs: []
  type: TYPE_NORMAL
  zh: '[`alias()`](selectable.html#sqlalchemy.sql.expression.alias "sqlalchemy.sql.expression.alias") '
- en: '[PRE475]'
  id: totrans-2541
  prefs: []
  type: TYPE_PRE
  zh: '[PRE475]'
- en: Append a [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column") to
    this [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table").
  id: totrans-2542
  prefs: []
  type: TYPE_NORMAL
  zh: 向此 [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") 添加一个 [`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")。
- en: The “key” of the newly added [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column"),
    i.e. the value of its `.key` attribute, will then be available in the `.c` collection
    of this [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table"), and the
    column definition will be included in any CREATE TABLE, SELECT, UPDATE, etc. statements
    generated from this [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    construct.
  id: totrans-2543
  prefs: []
  type: TYPE_NORMAL
  zh: 新添加的 [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column") 的“键”，即其`.key`属性的值，将在此
    [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") 的`.c`集合中可用，并且列定义将包含在从此
    [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") 构造生成的任何CREATE TABLE、SELECT、UPDATE等语句中。
- en: Note that this does **not** change the definition of the table as it exists
    within any underlying database, assuming that table has already been created in
    the database. Relational databases support the addition of columns to existing
    tables using the SQL ALTER command, which would need to be emitted for an already-existing
    table that doesn’t contain the newly added column.
  id: totrans-2544
  prefs: []
  type: TYPE_NORMAL
  zh: '请注意，这不会更改表的定义，因为它存在于任何底层数据库中，假设该表已经在数据库中创建。关系数据库支持使用SQL ALTER命令向现有表添加列，这将需要对于已经存在但不包含新添加列的表发出。 '
- en: 'Parameters:'
  id: totrans-2545
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**replace_existing** –'
  id: totrans-2546
  prefs: []
  type: TYPE_NORMAL
  zh: '**replace_existing** –'
- en: When `True`, allows replacing existing columns. When `False`, the default, an
    warning will be raised if a column with the same `.key` already exists. A future
    version of sqlalchemy will instead rise a warning.
  id: totrans-2547
  prefs: []
  type: TYPE_NORMAL
  zh: 当为`True`时，允许替换现有列。当为`False`时，将会发出警告，如果具有相同`.key`的列已经存在。SQLAlchemy的将来版本将改为提出警告。
- en: New in version 1.4.0.
  id: totrans-2548
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4.0版本中的新功能。
- en: '[PRE476]'
  id: totrans-2549
  prefs: []
  type: TYPE_PRE
  zh: '[PRE476]'
- en: Append a [`Constraint`](constraints.html#sqlalchemy.schema.Constraint "sqlalchemy.schema.Constraint")
    to this [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table").
  id: totrans-2550
  prefs: []
  type: TYPE_NORMAL
  zh: 向此 [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") 添加一个 [`Constraint`](constraints.html#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint")。
- en: This has the effect of the constraint being included in any future CREATE TABLE
    statement, assuming specific DDL creation events have not been associated with
    the given [`Constraint`](constraints.html#sqlalchemy.schema.Constraint "sqlalchemy.schema.Constraint")
    object.
  id: totrans-2551
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做会使约束包含在任何未来的CREATE TABLE语句中，假设特定的DDL创建事件尚未与给定的[`Constraint`](constraints.html#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint")对象关联。
- en: Note that this does **not** produce the constraint within the relational database
    automatically, for a table that already exists in the database. To add a constraint
    to an existing relational database table, the SQL ALTER command must be used.
    SQLAlchemy also provides the [`AddConstraint`](ddl.html#sqlalchemy.schema.AddConstraint
    "sqlalchemy.schema.AddConstraint") construct which can produce this SQL when invoked
    as an executable clause.
  id: totrans-2552
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这不会自动在关系数据库中生成约束，对于已经存在于数据库中的表。要向现有的关系数据库表添加约束，必须使用SQL ALTER命令。SQLAlchemy还提供了当调用时可以生成此SQL的[`AddConstraint`](ddl.html#sqlalchemy.schema.AddConstraint
    "sqlalchemy.schema.AddConstraint")构造。
- en: '[PRE477]'
  id: totrans-2553
  prefs: []
  type: TYPE_PRE
  zh: '[PRE477]'
- en: '*inherited from the* [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") *method of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-2554
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") *方法的* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs") '
- en: Add a new kind of dialect-specific keyword argument for this class.
  id: totrans-2555
  prefs: []
  type: TYPE_NORMAL
  zh: 为此类添加一种新的特定于方言的关键字参数。
- en: 'E.g.:'
  id: totrans-2556
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE478]'
  id: totrans-2557
  prefs: []
  type: TYPE_PRE
  zh: '[PRE478]'
- en: The [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") method is a per-argument way
    adding extra arguments to the [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") dictionary. This
    dictionary provides a list of argument names accepted by various schema-level
    constructs on behalf of a dialect.
  id: totrans-2558
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") 方法是向 [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") 字典添加额外参数的逐参数方式。该字典提供了一组由方言代表的各种模式级构造所接受的参数名称。'
- en: New dialects should typically specify this dictionary all at once as a data
    member of the dialect class. The use case for ad-hoc addition of argument names
    is typically for end-user code that is also using a custom compilation scheme
    which consumes the additional arguments.
  id: totrans-2559
  prefs: []
  type: TYPE_NORMAL
  zh: 新方言通常应一次性将此字典指定为方言类的数据成员。通常情况下，对于临时添加参数名称的用例，是针对同时使用自定义编译方案的最终用户代码，该编译方案会使用额外的参数。
- en: 'Parameters:'
  id: totrans-2560
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dialect_name` – name of a dialect. The dialect must be locatable, else a [`NoSuchModuleError`](exceptions.html#sqlalchemy.exc.NoSuchModuleError
    "sqlalchemy.exc.NoSuchModuleError") is raised. The dialect must also include an
    existing [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") collection, indicating
    that it participates in the keyword-argument validation and default system, else
    [`ArgumentError`](exceptions.html#sqlalchemy.exc.ArgumentError "sqlalchemy.exc.ArgumentError")
    is raised. If the dialect does not include this collection, then any keyword argument
    can be specified on behalf of this dialect already. All dialects packaged within
    SQLAlchemy include this collection, however for third party dialects, support
    may vary.'
  id: totrans-2561
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect_name` – 方言名称。必须能够找到该方言，否则会引发[`NoSuchModuleError`](exceptions.html#sqlalchemy.exc.NoSuchModuleError
    "sqlalchemy.exc.NoSuchModuleError")。方言还必须包括现有的[`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments")集合，表明它参与关键字参数验证和默认系统，否则会引发[`ArgumentError`](exceptions.html#sqlalchemy.exc.ArgumentError
    "sqlalchemy.exc.ArgumentError")。如果方言不包括此集合，则可以已经代表该方言指定任何关键字参数。SQLAlchemy中打包的所有方言都包括此集合，但是对于第三方方言，支持可能有所不同。'
- en: '`argument_name` – name of the parameter.'
  id: totrans-2562
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`argument_name` – 参数名称。'
- en: '`default` – default value of the parameter.'
  id: totrans-2563
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default` – 参数的默认值。'
- en: '[PRE479]'
  id: totrans-2564
  prefs: []
  type: TYPE_PRE
  zh: '[PRE479]'
- en: Returns the [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    object which currently represents the “auto increment” column, if any, else returns
    None.
  id: totrans-2565
  prefs: []
  type: TYPE_NORMAL
  zh: 返回当前表示“自动增量”列（如果有）的[`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")对象；否则返回
    None。
- en: This is based on the rules for [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    as defined by the [`Column.autoincrement`](#sqlalchemy.schema.Column.params.autoincrement
    "sqlalchemy.schema.Column") parameter, which generally means the column within
    a single integer column primary key constraint that is not constrained by a foreign
    key. If the table does not have such a primary key constraint, then there’s no
    “autoincrement” column. A [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    may have only one column defined as the “autoincrement” column.
  id: totrans-2566
  prefs: []
  type: TYPE_NORMAL
  zh: 这基于[`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")的规则，由[`Column.autoincrement`](#sqlalchemy.schema.Column.params.autoincrement
    "sqlalchemy.schema.Column")参数定义，通常意味着在不受外键约束的单整数列主键约束内的列。如果表格没有这样的主键约束，那么就没有“自动增量”列。[`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")可能只有一个列被定义为“自动增量”列。
- en: New in version 2.0.4.
  id: totrans-2567
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0.4 中的新功能。
- en: See also
  id: totrans-2568
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Column.autoincrement`](#sqlalchemy.schema.Column.params.autoincrement "sqlalchemy.schema.Column")'
  id: totrans-2569
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Column.autoincrement`](#sqlalchemy.schema.Column.params.autoincrement "sqlalchemy.schema.Column")'
- en: '[PRE480]'
  id: totrans-2570
  prefs: []
  type: TYPE_PRE
  zh: '[PRE480]'
- en: '*inherited from the* [`FromClause.c`](selectable.html#sqlalchemy.sql.expression.FromClause.c
    "sqlalchemy.sql.expression.FromClause.c") *attribute of* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  id: totrans-2571
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    *的* [`FromClause.c`](selectable.html#sqlalchemy.sql.expression.FromClause.c "sqlalchemy.sql.expression.FromClause")
    *属性*'
- en: A synonym for [`FromClause.columns`](selectable.html#sqlalchemy.sql.expression.FromClause.columns
    "sqlalchemy.sql.expression.FromClause.columns")
  id: totrans-2572
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FromClause.columns`](selectable.html#sqlalchemy.sql.expression.FromClause.columns
    "sqlalchemy.sql.expression.FromClause.columns") 的同义词'
- en: 'Returns:'
  id: totrans-2573
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")
  id: totrans-2574
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")
- en: '[PRE481]'
  id: totrans-2575
  prefs: []
  type: TYPE_PRE
  zh: '[PRE481]'
- en: '*inherited from the* [`FromClause.columns`](selectable.html#sqlalchemy.sql.expression.FromClause.columns
    "sqlalchemy.sql.expression.FromClause.columns") *attribute of* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  id: totrans-2576
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FromClause.columns`](selectable.html#sqlalchemy.sql.expression.FromClause.columns
    "sqlalchemy.sql.expression.FromClause.columns") *属性的* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
- en: A named-based collection of [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") objects maintained by this [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-2577
  prefs: []
  type: TYPE_NORMAL
  zh: 由此 [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    维护的基于名称的 [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") 对象集合。
- en: 'The [`columns`](#sqlalchemy.schema.Table.columns "sqlalchemy.schema.Table.columns"),
    or [`c`](#sqlalchemy.schema.Table.c "sqlalchemy.schema.Table.c") collection, is
    the gateway to the construction of SQL expressions using table-bound or other
    selectable-bound columns:'
  id: totrans-2578
  prefs: []
  type: TYPE_NORMAL
  zh: '[`columns`](#sqlalchemy.schema.Table.columns "sqlalchemy.schema.Table.columns")
    或 [`c`](#sqlalchemy.schema.Table.c "sqlalchemy.schema.Table.c") 集合是使用表绑定或其他可选择绑定列构建
    SQL 表达式的门户：'
- en: '[PRE482]'
  id: totrans-2579
  prefs: []
  type: TYPE_PRE
  zh: '[PRE482]'
- en: 'Returns:'
  id: totrans-2580
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") object.
  id: totrans-2581
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") 对象。
- en: '[PRE483]'
  id: totrans-2582
  prefs: []
  type: TYPE_PRE
  zh: '[PRE483]'
- en: '*inherited from the* [`ClauseElement.compare()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.compare
    "sqlalchemy.sql.expression.ClauseElement.compare") *method of* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
  id: totrans-2583
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ClauseElement.compare()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.compare
    "sqlalchemy.sql.expression.ClauseElement.compare") *方法的* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
- en: Compare this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") to the given [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  id: totrans-2584
  prefs: []
  type: TYPE_NORMAL
  zh: 将此 [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") 与给定的 [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") 进行比较。
- en: Subclasses should override the default behavior, which is a straight identity
    comparison.
  id: totrans-2585
  prefs: []
  type: TYPE_NORMAL
  zh: 子类应重写默认行为，即直接标识比较。
- en: '**kw are arguments consumed by subclass `compare()` methods and may be used
    to modify the criteria for comparison (see [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")).'
  id: totrans-2586
  prefs: []
  type: TYPE_NORMAL
  zh: '**kw 是子类 `compare()` 方法消耗的参数，可以用于修改比较条件（参见 [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")）。'
- en: '[PRE484]'
  id: totrans-2587
  prefs: []
  type: TYPE_PRE
  zh: '[PRE484]'
- en: '*inherited from the* `CompilerElement.compile()` *method of* `CompilerElement`'
  id: totrans-2588
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `CompilerElement.compile()` *方法的* `CompilerElement`'
- en: Compile this SQL expression.
  id: totrans-2589
  prefs: []
  type: TYPE_NORMAL
  zh: 编译此 SQL 表达式。
- en: The return value is a [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object. Calling `str()` or `unicode()` on the returned
    value will yield a string representation of the result. The [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object also can return a dictionary of bind parameter
    names and values using the `params` accessor.
  id: totrans-2590
  prefs: []
  type: TYPE_NORMAL
  zh: 返回值是一个 [`Compiled`](internals.html#sqlalchemy.engine.Compiled "sqlalchemy.engine.Compiled")
    对象。调用返回值的 `str()` 或 `unicode()` 方法将产生结果的字符串表示。[`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") 对象还可以使用 `params` 访问器返回绑定参数名称和值的字典。
- en: 'Parameters:'
  id: totrans-2591
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`bind` – An [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    or [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    which can provide a [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    in order to generate a [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object. If the `bind` and `dialect` parameters are
    both omitted, a default SQL compiler is used.'
  id: totrans-2592
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bind` – 一个[`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    或 [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")，可以提供一个[`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect")以生成一个[`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled")对象。如果 `bind` 和 `dialect` 参数都被省略，则使用默认的 SQL 编译器。'
- en: '`column_keys` – Used for INSERT and UPDATE statements, a list of column names
    which should be present in the VALUES clause of the compiled statement. If `None`,
    all columns from the target table object are rendered.'
  id: totrans-2593
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`column_keys` – 用于 INSERT 和 UPDATE 语句，一个列名列表，应该出现在编译后的语句的 VALUES 子句中。如果为 `None`，则渲染目标表对象的所有列。'
- en: '`dialect` – A [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    instance which can generate a [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object. This argument takes precedence over the
    `bind` argument.'
  id: totrans-2594
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect` – 一个[`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")实例，可以生成一个[`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled")对象。此参数优先于`bind`参数。'
- en: '`compile_kwargs` –'
  id: totrans-2595
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`compile_kwargs` –'
- en: 'optional dictionary of additional parameters that will be passed through to
    the compiler within all “visit” methods. This allows any custom flag to be passed
    through to a custom compilation construct, for example. It is also used for the
    case of passing the `literal_binds` flag through:'
  id: totrans-2596
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 附加字典，其中包含将传递到所有“visit”方法中的其他参数。这允许将任何自定义标志传递给自定义编译构造，例如。它还用于传递 `literal_binds`
    标志的情况：
- en: '[PRE485]'
  id: totrans-2597
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE485]'
- en: See also
  id: totrans-2598
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[How do I render SQL expressions as strings, possibly with bound parameters
    inlined?](../faq/sqlexpressions.html#faq-sql-expression-string)'
  id: totrans-2599
  prefs: []
  type: TYPE_NORMAL
  zh: '[我如何将 SQL 表达式渲染为字符串，可能会内联绑定的参数？](../faq/sqlexpressions.html#faq-sql-expression-string)'
- en: '[PRE486]'
  id: totrans-2600
  prefs: []
  type: TYPE_PRE
  zh: '[PRE486]'
- en: A collection of all [`Constraint`](constraints.html#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint") objects associated with this [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table").
  id: totrans-2601
  prefs: []
  type: TYPE_NORMAL
  zh: 与此 [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") 关联的所有 [`Constraint`](constraints.html#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint") 对象的集合。
- en: Includes [`PrimaryKeyConstraint`](constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint"), [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint"), [`UniqueConstraint`](constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint"), [`CheckConstraint`](constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint"). A separate collection [`Table.foreign_key_constraints`](#sqlalchemy.schema.Table.foreign_key_constraints
    "sqlalchemy.schema.Table.foreign_key_constraints") refers to the collection of
    all [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") objects, and the [`Table.primary_key`](#sqlalchemy.schema.Table.primary_key
    "sqlalchemy.schema.Table.primary_key") attribute refers to the single [`PrimaryKeyConstraint`](constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") associated with the [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table").
  id: totrans-2602
  prefs: []
  type: TYPE_NORMAL
  zh: 包括[`PrimaryKeyConstraint`](constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint")、[`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")、[`UniqueConstraint`](constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint")、[`CheckConstraint`](constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint")。一个单独的集合[`Table.foreign_key_constraints`](#sqlalchemy.schema.Table.foreign_key_constraints
    "sqlalchemy.schema.Table.foreign_key_constraints") 指的是所有 [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") 对象的集合，而 [`Table.primary_key`](#sqlalchemy.schema.Table.primary_key
    "sqlalchemy.schema.Table.primary_key") 属性指的是与 [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 关联的单个 [`PrimaryKeyConstraint`](constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint")。
- en: See also
  id: totrans-2603
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Table.constraints`](#sqlalchemy.schema.Table.constraints "sqlalchemy.schema.Table.constraints")'
  id: totrans-2604
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Table.constraints`](#sqlalchemy.schema.Table.constraints "sqlalchemy.schema.Table.constraints")'
- en: '[`Table.primary_key`](#sqlalchemy.schema.Table.primary_key "sqlalchemy.schema.Table.primary_key")'
  id: totrans-2605
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Table.primary_key`](#sqlalchemy.schema.Table.primary_key "sqlalchemy.schema.Table.primary_key")'
- en: '[`Table.foreign_key_constraints`](#sqlalchemy.schema.Table.foreign_key_constraints
    "sqlalchemy.schema.Table.foreign_key_constraints")'
  id: totrans-2606
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Table.foreign_key_constraints`](#sqlalchemy.schema.Table.foreign_key_constraints
    "sqlalchemy.schema.Table.foreign_key_constraints")'
- en: '[`Table.indexes`](#sqlalchemy.schema.Table.indexes "sqlalchemy.schema.Table.indexes")'
  id: totrans-2607
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Table.indexes`](#sqlalchemy.schema.Table.indexes "sqlalchemy.schema.Table.indexes")'
- en: '[`Inspector`](reflection.html#sqlalchemy.engine.reflection.Inspector "sqlalchemy.engine.reflection.Inspector")'
  id: totrans-2608
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Inspector`](reflection.html#sqlalchemy.engine.reflection.Inspector "sqlalchemy.engine.reflection.Inspector")'
- en: '[PRE487]'
  id: totrans-2609
  prefs: []
  type: TYPE_PRE
  zh: '[PRE487]'
- en: '*inherited from the* [`Selectable.corresponding_column()`](selectable.html#sqlalchemy.sql.expression.Selectable.corresponding_column
    "sqlalchemy.sql.expression.Selectable.corresponding_column") *method of* [`Selectable`](selectable.html#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
  id: totrans-2610
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Selectable.corresponding_column()`](selectable.html#sqlalchemy.sql.expression.Selectable.corresponding_column
    "sqlalchemy.sql.expression.Selectable.corresponding_column") *方法的* [`Selectable`](selectable.html#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
- en: Given a [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"), return the exported [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") object from the [`Selectable.exported_columns`](selectable.html#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") collection of this [`Selectable`](selectable.html#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable") which corresponds to that original [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") via a common ancestor column.
  id: totrans-2611
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")，从此[`Selectable`](selectable.html#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")的[`Selectable.exported_columns`](selectable.html#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns")集合中返回与原始[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")通过共同祖先列对应的导出[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")对象。
- en: 'Parameters:'
  id: totrans-2612
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`column` – the target [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") to be matched.'
  id: totrans-2613
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`column` – 要匹配的目标[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")。'
- en: '`require_embedded` – only return corresponding columns for the given [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"), if the given [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") is actually present within a sub-element
    of this [`Selectable`](selectable.html#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable").
    Normally the column will match if it merely shares a common ancestor with one
    of the exported columns of this [`Selectable`](selectable.html#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable").'
  id: totrans-2614
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`require_embedded` – 只返回给定[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")对应的列，如果给定的[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")实际上存在于此[`Selectable`](selectable.html#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")的子元素中。通常，如果列仅与此[`Selectable`](selectable.html#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")的导出列之一共享共同的祖先，则列将匹配。'
- en: See also
  id: totrans-2615
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Selectable.exported_columns`](selectable.html#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") - the [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") that is used for the operation.'
  id: totrans-2616
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Selectable.exported_columns`](selectable.html#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns") - 用于操作的[`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")。'
- en: '[`ColumnCollection.corresponding_column()`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection.corresponding_column
    "sqlalchemy.sql.expression.ColumnCollection.corresponding_column") - implementation
    method.'
  id: totrans-2617
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnCollection.corresponding_column()`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection.corresponding_column
    "sqlalchemy.sql.expression.ColumnCollection.corresponding_column") - 实现方法。'
- en: '[PRE488]'
  id: totrans-2618
  prefs: []
  type: TYPE_PRE
  zh: '[PRE488]'
- en: Issue a `CREATE` statement for this [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table"),
    using the given [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    or [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    for connectivity.
  id: totrans-2619
  prefs: []
  type: TYPE_NORMAL
  zh: 使用给定的[`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")或[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")进行连接，为此[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")发出`CREATE`语句。
- en: See also
  id: totrans-2620
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[`MetaData.create_all()`](#sqlalchemy.schema.MetaData.create_all "sqlalchemy.schema.MetaData.create_all").'
  id: totrans-2621
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MetaData.create_all()`](#sqlalchemy.schema.MetaData.create_all "sqlalchemy.schema.MetaData.create_all")。'
- en: '[PRE489]'
  id: totrans-2622
  prefs: []
  type: TYPE_PRE
  zh: '[PRE489]'
- en: '*inherited from the* [`TableClause.delete()`](selectable.html#sqlalchemy.sql.expression.TableClause.delete
    "sqlalchemy.sql.expression.TableClause.delete") *method of* [`TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause")'
  id: totrans-2623
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`TableClause.delete()`](selectable.html#sqlalchemy.sql.expression.TableClause.delete
    "sqlalchemy.sql.expression.TableClause.delete") *方法的* [`TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause")'
- en: Generate a [`delete()`](dml.html#sqlalchemy.sql.expression.delete "sqlalchemy.sql.expression.delete")
    construct against this [`TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause").
  id: totrans-2624
  prefs: []
  type: TYPE_NORMAL
  zh: 生成针对此[`TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause "sqlalchemy.sql.expression.TableClause")的[`delete()`](dml.html#sqlalchemy.sql.expression.delete
    "sqlalchemy.sql.expression.delete")构造。
- en: 'E.g.:'
  id: totrans-2625
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE490]'
  id: totrans-2626
  prefs: []
  type: TYPE_PRE
  zh: '[PRE490]'
- en: See [`delete()`](dml.html#sqlalchemy.sql.expression.delete "sqlalchemy.sql.expression.delete")
    for argument and usage information.
  id: totrans-2627
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[`delete()`](dml.html#sqlalchemy.sql.expression.delete "sqlalchemy.sql.expression.delete")获取参数和使用信息。
- en: '[PRE491]'
  id: totrans-2628
  prefs: []
  type: TYPE_PRE
  zh: '[PRE491]'
- en: '*inherited from the* [`TableClause.description`](selectable.html#sqlalchemy.sql.expression.TableClause.description
    "sqlalchemy.sql.expression.TableClause.description") *attribute of* [`TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause")'
  id: totrans-2629
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`TableClause.description`](selectable.html#sqlalchemy.sql.expression.TableClause.description
    "sqlalchemy.sql.expression.TableClause.description") *属性的* [`TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause")'
- en: '[PRE492]'
  id: totrans-2630
  prefs: []
  type: TYPE_PRE
  zh: '[PRE492]'
- en: '*inherited from the* [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-2631
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") *属性的* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
- en: A collection of keyword arguments specified as dialect-specific options to this
    construct.
  id: totrans-2632
  prefs: []
  type: TYPE_NORMAL
  zh: 作为方言特定选项指定的关键字参数的集合。
- en: The arguments are present here in their original `<dialect>_<kwarg>` format.
    Only arguments that were actually passed are included; unlike the [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") collection, which contains
    all options known by this dialect including defaults.
  id: totrans-2633
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的参数以其原始的`<dialect>_<kwarg>`格式呈现。只包括实际传递的参数；不像[`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options")集合，该集合包含此方言的所有已知选项，包括默认值。
- en: The collection is also writable; keys are accepted of the form `<dialect>_<kwarg>`
    where the value will be assembled into the list of options.
  id: totrans-2634
  prefs: []
  type: TYPE_NORMAL
  zh: 该集合也是可写的；接受形式为`<dialect>_<kwarg>`的键，其中值将被组装成选项列表。
- en: See also
  id: totrans-2635
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") - nested dictionary form'
  id: totrans-2636
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") - 嵌套字典形式'
- en: '[PRE493]'
  id: totrans-2637
  prefs: []
  type: TYPE_PRE
  zh: '[PRE493]'
- en: '*inherited from the* [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-2638
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") *属性的* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
- en: A collection of keyword arguments specified as dialect-specific options to this
    construct.
  id: totrans-2639
  prefs: []
  type: TYPE_NORMAL
  zh: 作为方言特定选项指定的关键字参数的集合。
- en: 'This is a two-level nested registry, keyed to `<dialect_name>` and `<argument_name>`.
    For example, the `postgresql_where` argument would be locatable as:'
  id: totrans-2640
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个两级嵌套注册表，键为`<dialect_name>`和`<argument_name>`。例如，`postgresql_where`参数可以定位为：
- en: '[PRE494]'
  id: totrans-2641
  prefs: []
  type: TYPE_PRE
  zh: '[PRE494]'
- en: New in version 0.9.2.
  id: totrans-2642
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 0.9.2 中的新功能。
- en: See also
  id: totrans-2643
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见
- en: '[`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") - flat dictionary form'
  id: totrans-2644
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") - 平面字典形式'
- en: '[PRE495]'
  id: totrans-2645
  prefs: []
  type: TYPE_PRE
  zh: '[PRE495]'
- en: Issue a `DROP` statement for this [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table"),
    using the given [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    or [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    for connectivity.
  id: totrans-2646
  prefs: []
  type: TYPE_NORMAL
  zh: 使用给定的 [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    或 [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    发出此 [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") 的 `DROP` 语句以进行连接。
- en: See also
  id: totrans-2647
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见
- en: '[`MetaData.drop_all()`](#sqlalchemy.schema.MetaData.drop_all "sqlalchemy.schema.MetaData.drop_all").'
  id: totrans-2648
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MetaData.drop_all()`](#sqlalchemy.schema.MetaData.drop_all "sqlalchemy.schema.MetaData.drop_all").'
- en: '[PRE496]'
  id: totrans-2649
  prefs: []
  type: TYPE_PRE
  zh: '[PRE496]'
- en: '*inherited from the* [`FromClause.entity_namespace`](selectable.html#sqlalchemy.sql.expression.FromClause.entity_namespace
    "sqlalchemy.sql.expression.FromClause.entity_namespace") *attribute of* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  id: totrans-2650
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FromClause.entity_namespace`](selectable.html#sqlalchemy.sql.expression.FromClause.entity_namespace
    "sqlalchemy.sql.expression.FromClause.entity_namespace") *属性的* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
- en: Return a namespace used for name-based access in SQL expressions.
  id: totrans-2651
  prefs: []
  type: TYPE_NORMAL
  zh: 返回用于在 SQL 表达式中基于名称的访问的命名空间。
- en: 'This is the namespace that is used to resolve “filter_by()” type expressions,
    such as:'
  id: totrans-2652
  prefs: []
  type: TYPE_NORMAL
  zh: 这是用于解析“filter_by()”类型表达式的命名空间，例如：
- en: '[PRE497]'
  id: totrans-2653
  prefs: []
  type: TYPE_PRE
  zh: '[PRE497]'
- en: It defaults to the `.c` collection, however internally it can be overridden
    using the “entity_namespace” annotation to deliver alternative results.
  id: totrans-2654
  prefs: []
  type: TYPE_NORMAL
  zh: 它默认为 `.c` 集合，但是内部可以使用“entity_namespace”注解进行重写以提供替代结果。
- en: '[PRE498]'
  id: totrans-2655
  prefs: []
  type: TYPE_PRE
  zh: '[PRE498]'
- en: '*inherited from the* [`FromClause.exported_columns`](selectable.html#sqlalchemy.sql.expression.FromClause.exported_columns
    "sqlalchemy.sql.expression.FromClause.exported_columns") *attribute of* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  id: totrans-2656
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FromClause.exported_columns`](selectable.html#sqlalchemy.sql.expression.FromClause.exported_columns
    "sqlalchemy.sql.expression.FromClause.exported_columns") *属性的* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
- en: A [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") that represents the “exported” columns
    of this [`Selectable`](selectable.html#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable").
  id: totrans-2657
  prefs: []
  type: TYPE_NORMAL
  zh: 代表此 [`Selectable`](selectable.html#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable")
    的“导出”列的 [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")。
- en: The “exported” columns for a [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") object are synonymous with the [`FromClause.columns`](selectable.html#sqlalchemy.sql.expression.FromClause.columns
    "sqlalchemy.sql.expression.FromClause.columns") collection.
  id: totrans-2658
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    对象的“导出”列与 [`FromClause.columns`](selectable.html#sqlalchemy.sql.expression.FromClause.columns
    "sqlalchemy.sql.expression.FromClause.columns") 集合是同义词。'
- en: New in version 1.4.
  id: totrans-2659
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中的新功能。
- en: See also
  id: totrans-2660
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见
- en: '[`Selectable.exported_columns`](selectable.html#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns")'
  id: totrans-2661
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Selectable.exported_columns`](selectable.html#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns")'
- en: '[`SelectBase.exported_columns`](selectable.html#sqlalchemy.sql.expression.SelectBase.exported_columns
    "sqlalchemy.sql.expression.SelectBase.exported_columns")'
  id: totrans-2662
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SelectBase.exported_columns`](selectable.html#sqlalchemy.sql.expression.SelectBase.exported_columns
    "sqlalchemy.sql.expression.SelectBase.exported_columns")'
- en: '[PRE499]'
  id: totrans-2663
  prefs: []
  type: TYPE_PRE
  zh: '[PRE499]'
- en: '[`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") objects referred to by this [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table").'
  id: totrans-2664
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") 对象是由这个 [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 引用的。'
- en: This list is produced from the collection of [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") objects currently associated.
  id: totrans-2665
  prefs: []
  type: TYPE_NORMAL
  zh: 此列表是从当前关联的 [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    对象集合生成的。
- en: See also
  id: totrans-2666
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见
- en: '[`Table.constraints`](#sqlalchemy.schema.Table.constraints "sqlalchemy.schema.Table.constraints")'
  id: totrans-2667
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Table.constraints`](#sqlalchemy.schema.Table.constraints "sqlalchemy.schema.Table.constraints")'
- en: '[`Table.foreign_keys`](#sqlalchemy.schema.Table.foreign_keys "sqlalchemy.schema.Table.foreign_keys")'
  id: totrans-2668
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Table.foreign_keys`](#sqlalchemy.schema.Table.foreign_keys "sqlalchemy.schema.Table.foreign_keys")'
- en: '[`Table.indexes`](#sqlalchemy.schema.Table.indexes "sqlalchemy.schema.Table.indexes")'
  id: totrans-2669
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Table.indexes`](#sqlalchemy.schema.Table.indexes "sqlalchemy.schema.Table.indexes")'
- en: '[PRE500]'
  id: totrans-2670
  prefs: []
  type: TYPE_PRE
  zh: '[PRE500]'
- en: '*inherited from the* [`FromClause.foreign_keys`](selectable.html#sqlalchemy.sql.expression.FromClause.foreign_keys
    "sqlalchemy.sql.expression.FromClause.foreign_keys") *attribute of* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  id: totrans-2671
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FromClause.foreign_keys`](selectable.html#sqlalchemy.sql.expression.FromClause.foreign_keys
    "sqlalchemy.sql.expression.FromClause.foreign_keys") *属性的* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
- en: Return the collection of [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") marker objects which this FromClause references.
  id: totrans-2672
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此 FromClause 引用的所有 [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") 标记对象的集合。
- en: Each [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    is a member of a [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")-wide
    [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint").
  id: totrans-2673
  prefs: []
  type: TYPE_NORMAL
  zh: 每个[`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")都是[`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")范围内的[`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")的成员。
- en: See also
  id: totrans-2674
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Table.foreign_key_constraints`](#sqlalchemy.schema.Table.foreign_key_constraints
    "sqlalchemy.schema.Table.foreign_key_constraints")'
  id: totrans-2675
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Table.foreign_key_constraints`](#sqlalchemy.schema.Table.foreign_key_constraints
    "sqlalchemy.schema.Table.foreign_key_constraints")'
- en: '[PRE501]'
  id: totrans-2676
  prefs: []
  type: TYPE_PRE
  zh: '[PRE501]'
- en: '*inherited from the* `HasTraverseInternals.get_children()` *method of* `HasTraverseInternals`'
  id: totrans-2677
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `HasTraverseInternals.get_children()` *方法的* `HasTraverseInternals`'
- en: Return immediate child `HasTraverseInternals` elements of this `HasTraverseInternals`.
  id: totrans-2678
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此 `HasTraverseInternals` 的直接子 `HasTraverseInternals` 元素。
- en: This is used for visit traversal.
  id: totrans-2679
  prefs: []
  type: TYPE_NORMAL
  zh: 这用于访问遍历。
- en: '**kw may contain flags that change the collection that is returned, for example
    to return a subset of items in order to cut down on larger traversals, or to return
    child items from a different context (such as schema-level collections instead
    of clause-level).'
  id: totrans-2680
  prefs: []
  type: TYPE_NORMAL
  zh: '**kw 可能包含更改返回集合的标志，例如返回子集以减少更大的遍历，或者返回来自不同上下文（例如模式级集合而不是子句级集合）的子项。**'
- en: '[PRE502]'
  id: totrans-2681
  prefs: []
  type: TYPE_PRE
  zh: '[PRE502]'
- en: '*inherited from the* [`TableClause.implicit_returning`](selectable.html#sqlalchemy.sql.expression.TableClause.implicit_returning
    "sqlalchemy.sql.expression.TableClause.implicit_returning") *attribute of* [`TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause")'
  id: totrans-2682
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`TableClause.implicit_returning`](selectable.html#sqlalchemy.sql.expression.TableClause.implicit_returning
    "sqlalchemy.sql.expression.TableClause.implicit_returning") *属性的* [`TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause")'
- en: '[`TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause "sqlalchemy.sql.expression.TableClause")
    doesn’t support having a primary key or column -level defaults, so implicit returning
    doesn’t apply.'
  id: totrans-2683
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause "sqlalchemy.sql.expression.TableClause")
    不支持具有主键或列级默认值，因此隐式返回不适用。'
- en: '[PRE503]'
  id: totrans-2684
  prefs: []
  type: TYPE_PRE
  zh: '[PRE503]'
- en: A collection of all [`Index`](constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    objects associated with this [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table").
  id: totrans-2685
  prefs: []
  type: TYPE_NORMAL
  zh: 与此 [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") 关联的所有 [`Index`](constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") 对象的集合。
- en: See also
  id: totrans-2686
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Inspector.get_indexes()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_indexes
    "sqlalchemy.engine.reflection.Inspector.get_indexes")'
  id: totrans-2687
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Inspector.get_indexes()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_indexes
    "sqlalchemy.engine.reflection.Inspector.get_indexes")'
- en: '[PRE504]'
  id: totrans-2688
  prefs: []
  type: TYPE_PRE
  zh: '[PRE504]'
- en: '*inherited from the* [`SchemaItem.info`](#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info") *attribute of* [`SchemaItem`](#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem")'
  id: totrans-2689
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SchemaItem.info`](#sqlalchemy.schema.SchemaItem.info "sqlalchemy.schema.SchemaItem.info")
    *属性的* [`SchemaItem`](#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")'
- en: Info dictionary associated with the object, allowing user-defined data to be
    associated with this [`SchemaItem`](#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem").
  id: totrans-2690
  prefs: []
  type: TYPE_NORMAL
  zh: 与对象关联的信息字典，允许将用户定义的数据与此 [`SchemaItem`](#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")
    关联。
- en: The dictionary is automatically generated when first accessed. It can also be
    specified in the constructor of some objects, such as [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") and [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column").
  id: totrans-2691
  prefs: []
  type: TYPE_NORMAL
  zh: 字典在首次访问时会自动生成。它也可以在某些对象的构造函数中指定，例如[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")和[`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")。
- en: '[PRE505]'
  id: totrans-2692
  prefs: []
  type: TYPE_PRE
  zh: '[PRE505]'
- en: '*inherited from the* `HasCacheKey.inherit_cache` *attribute of* [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.cache_key.HasCacheKey")'
  id: totrans-2693
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `HasCacheKey.inherit_cache` *属性的* [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.cache_key.HasCacheKey")'
- en: Indicate if this [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") instance should make use of the cache
    key generation scheme used by its immediate superclass.
  id: totrans-2694
  prefs: []
  type: TYPE_NORMAL
  zh: 指示此[`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey "sqlalchemy.sql.traversals.HasCacheKey")实例是否应使用其直接超类使用的缓存键生成方案。
- en: The attribute defaults to `None`, which indicates that a construct has not yet
    taken into account whether or not its appropriate for it to participate in caching;
    this is functionally equivalent to setting the value to `False`, except that a
    warning is also emitted.
  id: totrans-2695
  prefs: []
  type: TYPE_NORMAL
  zh: 该属性默认为`None`，表示一个结构尚未考虑其是否适合参与缓存；这在功能上等同于将值设置为`False`，只是还会发出警告。
- en: This flag can be set to `True` on a particular class, if the SQL that corresponds
    to the object does not change based on attributes which are local to this class,
    and not its superclass.
  id: totrans-2696
  prefs: []
  type: TYPE_NORMAL
  zh: 这个标志可以在特定类上设置为`True`，如果对应于对象的SQL不基于本类的局部属性而变化，而不是基于其超类。
- en: See also
  id: totrans-2697
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[Enabling Caching Support for Custom Constructs](compiler.html#compilerext-caching)
    - General guideslines for setting the [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute for third-party
    or user defined SQL constructs.'
  id: totrans-2698
  prefs: []
  type: TYPE_NORMAL
  zh: '[为自定义结构启用缓存支持](compiler.html#compilerext-caching) - 设置第三方或用户定义的SQL结构的[`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache")属性的一般指南。'
- en: '[PRE506]'
  id: totrans-2699
  prefs: []
  type: TYPE_PRE
  zh: '[PRE506]'
- en: '*inherited from the* [`TableClause.insert()`](selectable.html#sqlalchemy.sql.expression.TableClause.insert
    "sqlalchemy.sql.expression.TableClause.insert") *method of* [`TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause")'
  id: totrans-2700
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`TableClause.insert()`](selectable.html#sqlalchemy.sql.expression.TableClause.insert
    "sqlalchemy.sql.expression.TableClause.insert") *方法的* [`TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause")'
- en: Generate an [`Insert`](dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    construct against this [`TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause").
  id: totrans-2701
  prefs: []
  type: TYPE_NORMAL
  zh: 生成针对此[`TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause "sqlalchemy.sql.expression.TableClause")的[`Insert`](dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert")构造。
- en: 'E.g.:'
  id: totrans-2702
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE507]'
  id: totrans-2703
  prefs: []
  type: TYPE_PRE
  zh: '[PRE507]'
- en: See [`insert()`](dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert")
    for argument and usage information.
  id: totrans-2704
  prefs: []
  type: TYPE_NORMAL
  zh: 有关参数和用法信息，请参阅[`insert()`](dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert")。
- en: '[PRE508]'
  id: totrans-2705
  prefs: []
  type: TYPE_PRE
  zh: '[PRE508]'
- en: '*inherited from the* [`FromClause.is_derived_from()`](selectable.html#sqlalchemy.sql.expression.FromClause.is_derived_from
    "sqlalchemy.sql.expression.FromClause.is_derived_from") *method of* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  id: totrans-2706
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FromClause.is_derived_from()`](selectable.html#sqlalchemy.sql.expression.FromClause.is_derived_from
    "sqlalchemy.sql.expression.FromClause.is_derived_from") *方法的* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
- en: Return `True` if this [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") is ‘derived’ from the given `FromClause`.
  id: totrans-2707
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此[`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")是从给定的`FromClause`‘派生’，则返回`True`。
- en: An example would be an Alias of a Table is derived from that Table.
  id: totrans-2708
  prefs: []
  type: TYPE_NORMAL
  zh: 一个示例是，表的别名派生自该表。
- en: '[PRE509]'
  id: totrans-2709
  prefs: []
  type: TYPE_PRE
  zh: '[PRE509]'
- en: '*inherited from the* [`FromClause.join()`](selectable.html#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join") *method of* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  id: totrans-2710
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FromClause.join()`](selectable.html#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join") *方法的* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
- en: Return a [`Join`](selectable.html#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    from this [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") to another `FromClause`.
  id: totrans-2711
  prefs: []
  type: TYPE_NORMAL
  zh: 从此[`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")返回到另一个`FromClause`的[`Join`](selectable.html#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join")。
- en: 'E.g.:'
  id: totrans-2712
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE510]'
  id: totrans-2713
  prefs: []
  type: TYPE_PRE
  zh: '[PRE510]'
- en: 'would emit SQL along the lines of:'
  id: totrans-2714
  prefs: []
  type: TYPE_NORMAL
  zh: 会生成类似以下的 SQL：
- en: '[PRE511]'
  id: totrans-2715
  prefs: []
  type: TYPE_PRE
  zh: '[PRE511]'
- en: 'Parameters:'
  id: totrans-2716
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`right` – the right side of the join; this is any [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") object such as a [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object, and may also be a selectable-compatible object
    such as an ORM-mapped class.'
  id: totrans-2717
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`right` – 连接的右侧；这是任何 [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") 对象，如 [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 对象，也可以是可选兼容对象，例如 ORM 映射的类。'
- en: '`onclause` – a SQL expression representing the ON clause of the join. If left
    at `None`, [`FromClause.join()`](selectable.html#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join") will attempt to join the two tables
    based on a foreign key relationship.'
  id: totrans-2718
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onclause` – 表示连接的 ON 子句的 SQL 表达式。如果保持为 `None`，[`FromClause.join()`](selectable.html#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join") 将尝试根据外键关系连接两个表。'
- en: '`isouter` – if True, render a LEFT OUTER JOIN, instead of JOIN.'
  id: totrans-2719
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isouter` – 如果为 True，则渲染一个 LEFT OUTER JOIN，而不是 JOIN。'
- en: '`full` – if True, render a FULL OUTER JOIN, instead of LEFT OUTER JOIN. Implies
    [`FromClause.join.isouter`](selectable.html#sqlalchemy.sql.expression.FromClause.join.params.isouter
    "sqlalchemy.sql.expression.FromClause.join").'
  id: totrans-2720
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`full` – 如果为 True，则渲染一个 FULL OUTER JOIN，而不是 LEFT OUTER JOIN。暗示 [`FromClause.join.isouter`](selectable.html#sqlalchemy.sql.expression.FromClause.join.params.isouter
    "sqlalchemy.sql.expression.FromClause.join")。'
- en: See also
  id: totrans-2721
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`join()`](selectable.html#sqlalchemy.sql.expression.join "sqlalchemy.sql.expression.join")
    - standalone function'
  id: totrans-2722
  prefs: []
  type: TYPE_NORMAL
  zh: '[`join()`](selectable.html#sqlalchemy.sql.expression.join "sqlalchemy.sql.expression.join")
    - 独立函数'
- en: '[`Join`](selectable.html#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    - the type of object produced'
  id: totrans-2723
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Join`](selectable.html#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    - 产生的对象类型'
- en: '[PRE512]'
  id: totrans-2724
  prefs: []
  type: TYPE_PRE
  zh: '[PRE512]'
- en: Return the ‘key’ for this [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table").
  id: totrans-2725
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此[`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")的 'key'。
- en: This value is used as the dictionary key within the [`MetaData.tables`](#sqlalchemy.schema.MetaData.tables
    "sqlalchemy.schema.MetaData.tables") collection. It is typically the same as that
    of `Table.name` for a table with no [`Table.schema`](#sqlalchemy.schema.Table.schema
    "sqlalchemy.schema.Table.schema") set; otherwise it is typically of the form `schemaname.tablename`.
  id: totrans-2726
  prefs: []
  type: TYPE_NORMAL
  zh: 此值用作 [`MetaData.tables`](#sqlalchemy.schema.MetaData.tables "sqlalchemy.schema.MetaData.tables")
    集合中的字典键。对于未设置 [`Table.schema`](#sqlalchemy.schema.Table.schema "sqlalchemy.schema.Table.schema")
    的表，它通常与 `Table.name` 相同；否则，通常是 `schemaname.tablename` 的形式。
- en: '[PRE513]'
  id: totrans-2727
  prefs: []
  type: TYPE_PRE
  zh: '[PRE513]'
- en: '*inherited from the* [`DialectKWArgs.kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.kwargs
    "sqlalchemy.sql.base.DialectKWArgs.kwargs") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-2728
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs.kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.kwargs
    "sqlalchemy.sql.base.DialectKWArgs.kwargs") *属性的* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
- en: A synonym for [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs").
  id: totrans-2729
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") 的同义词。'
- en: '[PRE514]'
  id: totrans-2730
  prefs: []
  type: TYPE_PRE
  zh: '[PRE514]'
- en: '*inherited from the* [`Selectable.lateral()`](selectable.html#sqlalchemy.sql.expression.Selectable.lateral
    "sqlalchemy.sql.expression.Selectable.lateral") *method of* [`Selectable`](selectable.html#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
  id: totrans-2731
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Selectable.lateral()`](selectable.html#sqlalchemy.sql.expression.Selectable.lateral
    "sqlalchemy.sql.expression.Selectable.lateral") *方法的* [`Selectable`](selectable.html#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
- en: Return a LATERAL alias of this [`Selectable`](selectable.html#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable").
  id: totrans-2732
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此[`Selectable`](selectable.html#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable")的
    LATERAL 别名。
- en: The return value is the [`Lateral`](selectable.html#sqlalchemy.sql.expression.Lateral
    "sqlalchemy.sql.expression.Lateral") construct also provided by the top-level
    [`lateral()`](selectable.html#sqlalchemy.sql.expression.lateral "sqlalchemy.sql.expression.lateral")
    function.
  id: totrans-2733
  prefs: []
  type: TYPE_NORMAL
  zh: 返回值也是顶级 [`lateral()`](selectable.html#sqlalchemy.sql.expression.lateral "sqlalchemy.sql.expression.lateral")
    函数提供的 [`Lateral`](selectable.html#sqlalchemy.sql.expression.Lateral "sqlalchemy.sql.expression.Lateral")
    构造。
- en: See also
  id: totrans-2734
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[LATERAL correlation](../tutorial/data_select.html#tutorial-lateral-correlation)
    - overview of usage.'
  id: totrans-2735
  prefs: []
  type: TYPE_NORMAL
  zh: '[LATERAL 关联](../tutorial/data_select.html#tutorial-lateral-correlation) - 用法概述。'
- en: '[PRE515]'
  id: totrans-2736
  prefs: []
  type: TYPE_PRE
  zh: '[PRE515]'
- en: '*inherited from the* [`FromClause.outerjoin()`](selectable.html#sqlalchemy.sql.expression.FromClause.outerjoin
    "sqlalchemy.sql.expression.FromClause.outerjoin") *method of* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  id: totrans-2737
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FromClause.outerjoin()`](selectable.html#sqlalchemy.sql.expression.FromClause.outerjoin
    "sqlalchemy.sql.expression.FromClause.outerjoin") *方法的* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
- en: Return a [`Join`](selectable.html#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    from this [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") to another `FromClause`, with the “isouter”
    flag set to True.
  id: totrans-2738
  prefs: []
  type: TYPE_NORMAL
  zh: 从此 [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    返回一个 [`Join`](selectable.html#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    到另一个 `FromClause`，并将 “isouter” 标志设置为 True。
- en: 'E.g.:'
  id: totrans-2739
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE516]'
  id: totrans-2740
  prefs: []
  type: TYPE_PRE
  zh: '[PRE516]'
- en: 'The above is equivalent to:'
  id: totrans-2741
  prefs: []
  type: TYPE_NORMAL
  zh: 上述相当于：
- en: '[PRE517]'
  id: totrans-2742
  prefs: []
  type: TYPE_PRE
  zh: '[PRE517]'
- en: 'Parameters:'
  id: totrans-2743
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`right` – the right side of the join; this is any [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") object such as a [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object, and may also be a selectable-compatible object
    such as an ORM-mapped class.'
  id: totrans-2744
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`right` – 连接的右侧；这是任何[`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") 对象，如[`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 对象，也可以是可选择兼容的对象，如 ORM 映射类。'
- en: '`onclause` – a SQL expression representing the ON clause of the join. If left
    at `None`, [`FromClause.join()`](selectable.html#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join") will attempt to join the two tables
    based on a foreign key relationship.'
  id: totrans-2745
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onclause` – 表示连接的 ON 子句的 SQL 表达式。如果保留为 `None`，[`FromClause.join()`](selectable.html#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join") 将尝试基于外键关系连接两个表。'
- en: '`full` – if True, render a FULL OUTER JOIN, instead of LEFT OUTER JOIN.'
  id: totrans-2746
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`full` – 如果为 True，则渲染 FULL OUTER JOIN，而不是 LEFT OUTER JOIN。'
- en: See also
  id: totrans-2747
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`FromClause.join()`](selectable.html#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join")'
  id: totrans-2748
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FromClause.join()`](selectable.html#sqlalchemy.sql.expression.FromClause.join
    "sqlalchemy.sql.expression.FromClause.join")'
- en: '[`Join`](selectable.html#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")'
  id: totrans-2749
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Join`](selectable.html#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")'
- en: '[PRE518]'
  id: totrans-2750
  prefs: []
  type: TYPE_PRE
  zh: '[PRE518]'
- en: '*inherited from the* `Immutable.params()` *method of* `Immutable`'
  id: totrans-2751
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `Immutable` 的 `Immutable.params()` *方法*'
- en: Return a copy with [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") elements replaced.
  id: totrans-2752
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个副本，并用 [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") 元素替换。
- en: 'Returns a copy of this ClauseElement with [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") elements replaced with values taken from
    the given dictionary:'
  id: totrans-2753
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此 ClauseElement 的副本，并用给定字典中的值替换[`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") 元素：
- en: '[PRE519]'
  id: totrans-2754
  prefs: []
  type: TYPE_PRE
  zh: '[PRE519]'
- en: '[PRE520]'
  id: totrans-2755
  prefs: []
  type: TYPE_PRE
  zh: '[PRE520]'
- en: '*inherited from the* [`FromClause.primary_key`](selectable.html#sqlalchemy.sql.expression.FromClause.primary_key
    "sqlalchemy.sql.expression.FromClause.primary_key") *attribute of* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  id: totrans-2756
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FromClause.primary_key`](selectable.html#sqlalchemy.sql.expression.FromClause.primary_key
    "sqlalchemy.sql.expression.FromClause.primary_key") *属性的* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
- en: Return the iterable collection of [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    objects which comprise the primary key of this `_selectable.FromClause`.
  id: totrans-2757
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此 `_selectable.FromClause` 的主键组成的可迭代列 [`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 对象集合。
- en: For a [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") object,
    this collection is represented by the [`PrimaryKeyConstraint`](constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") which itself is an iterable collection
    of [`Column`](#sqlalchemy.schema.Column "sqlalchemy.schema.Column") objects.
  id: totrans-2758
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table") 对象，此集合由 [`PrimaryKeyConstraint`](constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") 表示，它本身是一个可迭代的 [`Column`](#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 对象集合。
- en: '[PRE521]'
  id: totrans-2759
  prefs: []
  type: TYPE_PRE
  zh: '[PRE521]'
- en: '*inherited from the* [`Selectable.replace_selectable()`](selectable.html#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") *method of* [`Selectable`](selectable.html#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
  id: totrans-2760
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Selectable.replace_selectable()`](selectable.html#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") *方法的* [`Selectable`](selectable.html#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")'
- en: Replace all occurrences of [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") ‘old’ with the given [`Alias`](selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") object, returning a copy of this [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-2761
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有 [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    中的 ‘old’ 替换为给定的 [`Alias`](selectable.html#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    对象，返回此 [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    的副本。
- en: 'Deprecated since version 1.4: The [`Selectable.replace_selectable()`](selectable.html#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") method is deprecated,
    and will be removed in a future release. Similar functionality is available via
    the sqlalchemy.sql.visitors module.'
  id: totrans-2762
  prefs: []
  type: TYPE_NORMAL
  zh: 自 1.4 版本起已弃用：[`Selectable.replace_selectable()`](selectable.html#sqlalchemy.sql.expression.Selectable.replace_selectable
    "sqlalchemy.sql.expression.Selectable.replace_selectable") 方法已弃用，并将在将来的发布中删除。类似功能可通过
    sqlalchemy.sql.visitors 模块获得。
- en: '[PRE522]'
  id: totrans-2763
  prefs: []
  type: TYPE_PRE
  zh: '[PRE522]'
- en: '*inherited from the* [`FromClause.schema`](selectable.html#sqlalchemy.sql.expression.FromClause.schema
    "sqlalchemy.sql.expression.FromClause.schema") *attribute of* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  id: totrans-2764
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FromClause.schema`](selectable.html#sqlalchemy.sql.expression.FromClause.schema
    "sqlalchemy.sql.expression.FromClause.schema") *属性的* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
- en: Define the ‘schema’ attribute for this [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-2765
  prefs: []
  type: TYPE_NORMAL
  zh: 为此 [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    定义 ‘schema’ 属性。
- en: This is typically `None` for most objects except that of [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), where it is taken as the value of the [`Table.schema`](#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table") argument.
  id: totrans-2766
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大多数对象而言，这通常为 `None`，除了 [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    对象，其中它被视为 [`Table.schema`](#sqlalchemy.schema.Table.params.schema "sqlalchemy.schema.Table")
    参数的值。
- en: '[PRE523]'
  id: totrans-2767
  prefs: []
  type: TYPE_PRE
  zh: '[PRE523]'
- en: '*inherited from the* [`FromClause.select()`](selectable.html#sqlalchemy.sql.expression.FromClause.select
    "sqlalchemy.sql.expression.FromClause.select") *method of* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  id: totrans-2768
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FromClause.select()`](selectable.html#sqlalchemy.sql.expression.FromClause.select
    "sqlalchemy.sql.expression.FromClause.select") *方法的* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
- en: Return a SELECT of this [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-2769
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此 [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")
    的 SELECT。
- en: 'e.g.:'
  id: totrans-2770
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE524]'
  id: totrans-2771
  prefs: []
  type: TYPE_PRE
  zh: '[PRE524]'
- en: See also
  id: totrans-2772
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`select()`](selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    - general purpose method which allows for arbitrary column lists.'
  id: totrans-2773
  prefs: []
  type: TYPE_NORMAL
  zh: '[`select()`](selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    - 允许任意列列表的通用方法。'
- en: '[PRE525]'
  id: totrans-2774
  prefs: []
  type: TYPE_PRE
  zh: '[PRE525]'
- en: '*inherited from the* [`ClauseElement.self_group()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.self_group
    "sqlalchemy.sql.expression.ClauseElement.self_group") *method of* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
  id: totrans-2775
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ClauseElement.self_group()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.self_group
    "sqlalchemy.sql.expression.ClauseElement.self_group") *方法的* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
- en: Apply a ‘grouping’ to this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  id: totrans-2776
  prefs: []
  type: TYPE_NORMAL
  zh: 对这个[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")应用一个“分组”。
- en: This method is overridden by subclasses to return a “grouping” construct, i.e.
    parenthesis. In particular it’s used by “binary” expressions to provide a grouping
    around themselves when placed into a larger expression, as well as by [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs when placed into the FROM clause
    of another [`select()`](selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select").
    (Note that subqueries should be normally created using the [`Select.alias()`](selectable.html#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") method, as many platforms require nested
    SELECT statements to be named).
  id: totrans-2777
  prefs: []
  type: TYPE_NORMAL
  zh: 子类会重写这个方法以返回一个“分组”结构，即括号。特别地，它被“二进制”表达式用来在放置到更大的表达式中时提供一个围绕自己的分组，以及被[`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")构造用来放置到另一个[`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")的FROM子句中时。(注意，子查询通常应该使用[`Select.alias()`](selectable.html#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias")方法创建，因为许多平台要求嵌套的SELECT语句必须具名)。
- en: As expressions are composed together, the application of [`self_group()`](#sqlalchemy.schema.Table.self_group
    "sqlalchemy.schema.Table.self_group") is automatic - end-user code should never
    need to use this method directly. Note that SQLAlchemy’s clause constructs take
    operator precedence into account - so parenthesis might not be needed, for example,
    in an expression like `x OR (y AND z)` - AND takes precedence over OR.
  id: totrans-2778
  prefs: []
  type: TYPE_NORMAL
  zh: 当表达式被组合在一起时，[`self_group()`](#sqlalchemy.schema.Table.self_group "sqlalchemy.schema.Table.self_group")的应用是自动的
    - 最终用户代码不应直接使用此方法。注意，SQLAlchemy的子句构造会考虑运算符优先级 - 因此括号可能不是必需的，例如在`x OR (y AND z)`这样的表达式中
    - AND 优先于 OR。
- en: The base [`self_group()`](#sqlalchemy.schema.Table.self_group "sqlalchemy.schema.Table.self_group")
    method of [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") just returns self.
  id: totrans-2779
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement "sqlalchemy.sql.expression.ClauseElement")的基本[`self_group()`](#sqlalchemy.schema.Table.self_group
    "sqlalchemy.schema.Table.self_group")方法只返回自身。'
- en: '[PRE526]'
  id: totrans-2780
  prefs: []
  type: TYPE_PRE
  zh: '[PRE526]'
- en: '*inherited from the* `NamedFromClause.table_valued()` *method of* `NamedFromClause`'
  id: totrans-2781
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `NamedFromClause` 的 `NamedFromClause.table_valued()` *方法*'
- en: Return a `TableValuedColumn` object for this [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-2782
  prefs: []
  type: TYPE_NORMAL
  zh: 返回这个[`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")的`TableValuedColumn`对象。
- en: A `TableValuedColumn` is a [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") that represents a complete row in a
    table. Support for this construct is backend dependent, and is supported in various
    forms by backends such as PostgreSQL, Oracle and SQL Server.
  id: totrans-2783
  prefs: []
  type: TYPE_NORMAL
  zh: '`TableValuedColumn`是一个代表表中完整行的[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")。对于这个构造的支持依赖于后端，而且由后端以不同形式支持，例如 PostgreSQL、Oracle
    和 SQL Server。'
- en: 'E.g.:'
  id: totrans-2784
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE527]'
  id: totrans-2785
  prefs: []
  type: TYPE_PRE
  zh: '[PRE527]'
- en: New in version 1.4.0b2.
  id: totrans-2786
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4.0b2 中新增。
- en: See also
  id: totrans-2787
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[Working with SQL Functions](../tutorial/data_select.html#tutorial-functions)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-2788
  prefs: []
  type: TYPE_NORMAL
  zh: '[与 SQL 函数一起工作](../tutorial/data_select.html#tutorial-functions) - 在[SQLAlchemy
    统一教程](../tutorial/index.html#unified-tutorial)中'
- en: '[PRE528]'
  id: totrans-2789
  prefs: []
  type: TYPE_PRE
  zh: '[PRE528]'
- en: '*inherited from the* [`FromClause.tablesample()`](selectable.html#sqlalchemy.sql.expression.FromClause.tablesample
    "sqlalchemy.sql.expression.FromClause.tablesample") *method of* [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")'
  id: totrans-2790
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`FromClause.tablesample()`](selectable.html#sqlalchemy.sql.expression.FromClause.tablesample
    "sqlalchemy.sql.expression.FromClause.tablesample") *方法*'
- en: Return a TABLESAMPLE alias of this [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-2791
  prefs: []
  type: TYPE_NORMAL
  zh: 返回这个[`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")的
    TABLESAMPLE 别名。
- en: The return value is the [`TableSample`](selectable.html#sqlalchemy.sql.expression.TableSample
    "sqlalchemy.sql.expression.TableSample") construct also provided by the top-level
    [`tablesample()`](selectable.html#sqlalchemy.sql.expression.tablesample "sqlalchemy.sql.expression.tablesample")
    function.
  id: totrans-2792
  prefs: []
  type: TYPE_NORMAL
  zh: 返回值是由顶层[`tablesample()`](selectable.html#sqlalchemy.sql.expression.tablesample
    "sqlalchemy.sql.expression.tablesample")函数提供的[`TableSample`](selectable.html#sqlalchemy.sql.expression.TableSample
    "sqlalchemy.sql.expression.TableSample")构造。
- en: See also
  id: totrans-2793
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`tablesample()`](selectable.html#sqlalchemy.sql.expression.tablesample "sqlalchemy.sql.expression.tablesample")
    - usage guidelines and parameters'
  id: totrans-2794
  prefs: []
  type: TYPE_NORMAL
  zh: '[`tablesample()`](selectable.html#sqlalchemy.sql.expression.tablesample "sqlalchemy.sql.expression.tablesample")
    - 用法指南和参数'
- en: '[PRE529]'
  id: totrans-2795
  prefs: []
  type: TYPE_PRE
  zh: '[PRE529]'
- en: Return a copy of this [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    associated with a different [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData").
  id: totrans-2796
  prefs: []
  type: TYPE_NORMAL
  zh: 返回与不同的[`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")相关联的此[`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")的副本。
- en: 'E.g.:'
  id: totrans-2797
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE530]'
  id: totrans-2798
  prefs: []
  type: TYPE_PRE
  zh: '[PRE530]'
- en: 'Changed in version 1.4: The [`Table.to_metadata()`](#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata") function was renamed from [`Table.tometadata()`](#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata").'
  id: totrans-2799
  prefs: []
  type: TYPE_NORMAL
  zh: 从1.4版本开始更改：[`Table.to_metadata()`](#sqlalchemy.schema.Table.to_metadata "sqlalchemy.schema.Table.to_metadata")函数的名称已从[`Table.tometadata()`](#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata")更改。
- en: 'Parameters:'
  id: totrans-2800
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`metadata` – Target [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    object, into which the new [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object will be created.'
  id: totrans-2801
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`metadata` – 目标[`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")对象，将在其中创建新的[`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象。'
- en: '`schema` –'
  id: totrans-2802
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` –'
- en: 'optional string name indicating the target schema. Defaults to the special
    symbol [`RETAIN_SCHEMA`](#sqlalchemy.schema.SchemaConst.RETAIN_SCHEMA "sqlalchemy.schema.SchemaConst.RETAIN_SCHEMA")
    which indicates that no change to the schema name should be made in the new [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"). If set to a string name, the new [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") will have this new name as the `.schema`. If set to
    `None`, the schema will be set to that of the schema set on the target [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData"), which is typically `None` as well, unless set explicitly:'
  id: totrans-2803
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选字符串名称，指示目标模式。默认为特殊符号[`RETAIN_SCHEMA`](#sqlalchemy.schema.SchemaConst.RETAIN_SCHEMA
    "sqlalchemy.schema.SchemaConst.RETAIN_SCHEMA")，表示在新的[`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")中不应更改模式名称。如果设置为字符串名称，则新的[`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")将具有此新名称作为`.schema`。如果设置为`None`，则模式将设置为在目标[`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")上设置的模式，通常也是`None`，除非明确设置：
- en: '[PRE531]'
  id: totrans-2804
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE531]'
- en: '`referred_schema_fn` –'
  id: totrans-2805
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`referred_schema_fn` –'
- en: optional callable which can be supplied in order to provide for the schema name
    that should be assigned to the referenced table of a [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint"). The callable accepts this parent [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), the target schema that we are changing to, the [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") object, and the existing “target schema”
    of that constraint. The function should return the string schema name that should
    be applied. To reset the schema to “none”, return the symbol `BLANK_SCHEMA`. To
    effect no change, return `None` or `RETAIN_SCHEMA`.
  id: totrans-2806
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的可调用对象，可以提供应分配给[`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")的引用表的模式名称。可调用对象接受此父[`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")、我们正在更改的目标模式、[`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")对象以及该约束的现有“目标模式”。该函数应返回应用的字符串模式名称。要将模式重置为“无”，请返回符号`BLANK_SCHEMA`。要不进行更改，请返回`None`或`RETAIN_SCHEMA`。
- en: 'Changed in version 1.4.33: The `referred_schema_fn` function may return the
    `BLANK_SCHEMA` or `RETAIN_SCHEMA` symbols.'
  id: totrans-2807
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从1.4.33版本开始更改：`referred_schema_fn`函数可以返回`BLANK_SCHEMA`或`RETAIN_SCHEMA`符号。
- en: 'E.g.:'
  id: totrans-2808
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE532]'
  id: totrans-2809
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE532]'
- en: '`name` – optional string name indicating the target table name. If not specified
    or None, the table name is retained. This allows a [`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") to be copied to the same [`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") target with a new name.'
  id: totrans-2810
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 可选字符串名称，指示目标表名称。如果未指定或为 None，则保留表名称。这允许将[`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")复制到具有新名称的相同[`MetaData`](#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")目标。'
- en: '[PRE533]'
  id: totrans-2811
  prefs: []
  type: TYPE_PRE
  zh: '[PRE533]'
- en: Return a copy of this [`Table`](#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    associated with a different [`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData").
  id: totrans-2812
  prefs: []
  type: TYPE_NORMAL
  zh: 返回与不同[`MetaData`](#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")关联的此[`Table`](#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")的副本。
- en: 'Deprecated since version 1.4: [`Table.tometadata()`](#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata") is renamed to [`Table.to_metadata()`](#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata")'
  id: totrans-2813
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始弃用：[`Table.tometadata()`](#sqlalchemy.schema.Table.tometadata "sqlalchemy.schema.Table.tometadata")已更名为[`Table.to_metadata()`](#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata")
- en: See [`Table.to_metadata()`](#sqlalchemy.schema.Table.to_metadata "sqlalchemy.schema.Table.to_metadata")
    for a full description.
  id: totrans-2814
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[`Table.to_metadata()`](#sqlalchemy.schema.Table.to_metadata "sqlalchemy.schema.Table.to_metadata")获取完整描述。
- en: '[PRE534]'
  id: totrans-2815
  prefs: []
  type: TYPE_PRE
  zh: '[PRE534]'
- en: '*inherited from the* `Immutable.unique_params()` *method of* `Immutable`'
  id: totrans-2816
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `Immutable.unique_params()` *方法的* `Immutable` *对象*'
- en: Return a copy with [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") elements replaced.
  id: totrans-2817
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个副本，其中包含替换为[`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")元素的内容。
- en: Same functionality as [`ClauseElement.params()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.params
    "sqlalchemy.sql.expression.ClauseElement.params"), except adds unique=True to
    affected bind parameters so that multiple statements can be used.
  id: totrans-2818
  prefs: []
  type: TYPE_NORMAL
  zh: 与[`ClauseElement.params()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.params
    "sqlalchemy.sql.expression.ClauseElement.params")具有相同的功能，只是对受影响的绑定参数添加了unique=True，以便可以使用多个语句。
- en: '[PRE535]'
  id: totrans-2819
  prefs: []
  type: TYPE_PRE
  zh: '[PRE535]'
- en: '*inherited from the* [`TableClause.update()`](selectable.html#sqlalchemy.sql.expression.TableClause.update
    "sqlalchemy.sql.expression.TableClause.update") *method of* [`TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause")'
  id: totrans-2820
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`TableClause.update()`](selectable.html#sqlalchemy.sql.expression.TableClause.update
    "sqlalchemy.sql.expression.TableClause.update") *方法的* [`TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause") *对象*'
- en: Generate an [`update()`](dml.html#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update")
    construct against this [`TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause").
  id: totrans-2821
  prefs: []
  type: TYPE_NORMAL
  zh: 针对此[`TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause "sqlalchemy.sql.expression.TableClause")生成一个[`update()`](dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update")构造。
- en: 'E.g.:'
  id: totrans-2822
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE536]'
  id: totrans-2823
  prefs: []
  type: TYPE_PRE
  zh: '[PRE536]'
- en: See [`update()`](dml.html#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update")
    for argument and usage information.
  id: totrans-2824
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[`update()`](dml.html#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update")获取参数和用法信息。
