["```py\n>>> from sqlalchemy import text\n\n>>> with engine.connect() as conn:\n...     result = conn.execute(text(\"select 'hello world'\"))\n...     print(result.all())\nBEGIN  (implicit)\nselect  'hello world'\n[...]  ()\n[('hello world',)]\nROLLBACK \n```", "```py\n# \"commit as you go\"\n>>> with engine.connect() as conn:\n...     conn.execute(text(\"CREATE TABLE some_table (x int, y int)\"))\n...     conn.execute(\n...         text(\"INSERT INTO some_table (x, y) VALUES (:x, :y)\"),\n...         [{\"x\": 1, \"y\": 1}, {\"x\": 2, \"y\": 4}],\n...     )\n...     conn.commit()\nBEGIN  (implicit)\nCREATE  TABLE  some_table  (x  int,  y  int)\n[...]  ()\n<sqlalchemy.engine.cursor.CursorResult  object  at  0x...>\nINSERT  INTO  some_table  (x,  y)  VALUES  (?,  ?)\n[...]  [(1,  1),  (2,  4)]\n<sqlalchemy.engine.cursor.CursorResult  object  at  0x...>\nCOMMIT \n```", "```py\n# \"begin once\"\n>>> with engine.begin() as conn:\n...     conn.execute(\n...         text(\"INSERT INTO some_table (x, y) VALUES (:x, :y)\"),\n...         [{\"x\": 6, \"y\": 8}, {\"x\": 9, \"y\": 10}],\n...     )\nBEGIN  (implicit)\nINSERT  INTO  some_table  (x,  y)  VALUES  (?,  ?)\n[...]  [(6,  8),  (9,  10)]\n<sqlalchemy.engine.cursor.CursorResult  object  at  0x...>\nCOMMIT \n```", "```py\n>>> with engine.connect() as conn:\n...     result = conn.execute(text(\"SELECT x, y FROM some_table\"))\n...     for row in result:\n...         print(f\"x: {row.x}  y: {row.y}\")\nBEGIN  (implicit)\nSELECT  x,  y  FROM  some_table\n[...]  ()\nx: 1  y: 1\nx: 2  y: 4\nx: 6  y: 8\nx: 9  y: 10\nROLLBACK \n```", "```py\n    result = conn.execute(text(\"select x, y from some_table\"))\n\n    for x, y in result:\n        ...\n    ```", "```py\n    result = conn.execute(text(\"select x, y from some_table\"))\n\n    for row in result:\n        x = row[0]\n    ```", "```py\n    result = conn.execute(text(\"select x, y from some_table\"))\n\n    for row in result:\n        y = row.y\n\n        # illustrate use with Python f-strings\n        print(f\"Row: {row.x}  {y}\")\n    ```", "```py\n    result = conn.execute(text(\"select x, y from some_table\"))\n\n    for dict_row in result.mappings():\n        x = dict_row[\"x\"]\n        y = dict_row[\"y\"]\n    ```", "```py\n>>> with engine.connect() as conn:\n...     result = conn.execute(text(\"SELECT x, y FROM some_table WHERE y > :y\"), {\"y\": 2})\n...     for row in result:\n...         print(f\"x: {row.x}  y: {row.y}\")\nBEGIN  (implicit)\nSELECT  x,  y  FROM  some_table  WHERE  y  >  ?\n[...]  (2,)\nx: 2  y: 4\nx: 6  y: 8\nx: 9  y: 10\nROLLBACK \n```", "```py\n>>> with engine.connect() as conn:\n...     conn.execute(\n...         text(\"INSERT INTO some_table (x, y) VALUES (:x, :y)\"),\n...         [{\"x\": 11, \"y\": 12}, {\"x\": 13, \"y\": 14}],\n...     )\n...     conn.commit()\nBEGIN  (implicit)\nINSERT  INTO  some_table  (x,  y)  VALUES  (?,  ?)\n[...]  [(11,  12),  (13,  14)]\n<sqlalchemy.engine.cursor.CursorResult  object  at  0x...>\nCOMMIT \n```", "```py\n>>> from sqlalchemy.orm import Session\n\n>>> stmt = text(\"SELECT x, y FROM some_table WHERE y > :y ORDER BY x, y\")\n>>> with Session(engine) as session:\n...     result = session.execute(stmt, {\"y\": 6})\n...     for row in result:\n...         print(f\"x: {row.x}  y: {row.y}\")\nBEGIN  (implicit)\nSELECT  x,  y  FROM  some_table  WHERE  y  >  ?  ORDER  BY  x,  y\n[...]  (6,)\nx: 6  y: 8\nx: 9  y: 10\nx: 11  y: 12\nx: 13  y: 14\nROLLBACK \n```", "```py\n>>> with Session(engine) as session:\n...     result = session.execute(\n...         text(\"UPDATE some_table SET y=:y WHERE x=:x\"),\n...         [{\"x\": 9, \"y\": 11}, {\"x\": 13, \"y\": 15}],\n...     )\n...     session.commit()\nBEGIN  (implicit)\nUPDATE  some_table  SET  y=?  WHERE  x=?\n[...]  [(11,  9),  (15,  13)]\nCOMMIT \n```", "```py\n>>> from sqlalchemy import text\n\n>>> with engine.connect() as conn:\n...     result = conn.execute(text(\"select 'hello world'\"))\n...     print(result.all())\nBEGIN  (implicit)\nselect  'hello world'\n[...]  ()\n[('hello world',)]\nROLLBACK \n```", "```py\n# \"commit as you go\"\n>>> with engine.connect() as conn:\n...     conn.execute(text(\"CREATE TABLE some_table (x int, y int)\"))\n...     conn.execute(\n...         text(\"INSERT INTO some_table (x, y) VALUES (:x, :y)\"),\n...         [{\"x\": 1, \"y\": 1}, {\"x\": 2, \"y\": 4}],\n...     )\n...     conn.commit()\nBEGIN  (implicit)\nCREATE  TABLE  some_table  (x  int,  y  int)\n[...]  ()\n<sqlalchemy.engine.cursor.CursorResult  object  at  0x...>\nINSERT  INTO  some_table  (x,  y)  VALUES  (?,  ?)\n[...]  [(1,  1),  (2,  4)]\n<sqlalchemy.engine.cursor.CursorResult  object  at  0x...>\nCOMMIT \n```", "```py\n# \"begin once\"\n>>> with engine.begin() as conn:\n...     conn.execute(\n...         text(\"INSERT INTO some_table (x, y) VALUES (:x, :y)\"),\n...         [{\"x\": 6, \"y\": 8}, {\"x\": 9, \"y\": 10}],\n...     )\nBEGIN  (implicit)\nINSERT  INTO  some_table  (x,  y)  VALUES  (?,  ?)\n[...]  [(6,  8),  (9,  10)]\n<sqlalchemy.engine.cursor.CursorResult  object  at  0x...>\nCOMMIT \n```", "```py\n>>> with engine.connect() as conn:\n...     result = conn.execute(text(\"SELECT x, y FROM some_table\"))\n...     for row in result:\n...         print(f\"x: {row.x}  y: {row.y}\")\nBEGIN  (implicit)\nSELECT  x,  y  FROM  some_table\n[...]  ()\nx: 1  y: 1\nx: 2  y: 4\nx: 6  y: 8\nx: 9  y: 10\nROLLBACK \n```", "```py\n    result = conn.execute(text(\"select x, y from some_table\"))\n\n    for x, y in result:\n        ...\n    ```", "```py\n    result = conn.execute(text(\"select x, y from some_table\"))\n\n    for row in result:\n        x = row[0]\n    ```", "```py\n    result = conn.execute(text(\"select x, y from some_table\"))\n\n    for row in result:\n        y = row.y\n\n        # illustrate use with Python f-strings\n        print(f\"Row: {row.x}  {y}\")\n    ```", "```py\n    result = conn.execute(text(\"select x, y from some_table\"))\n\n    for dict_row in result.mappings():\n        x = dict_row[\"x\"]\n        y = dict_row[\"y\"]\n    ```", "```py\n>>> with engine.connect() as conn:\n...     result = conn.execute(text(\"SELECT x, y FROM some_table WHERE y > :y\"), {\"y\": 2})\n...     for row in result:\n...         print(f\"x: {row.x}  y: {row.y}\")\nBEGIN  (implicit)\nSELECT  x,  y  FROM  some_table  WHERE  y  >  ?\n[...]  (2,)\nx: 2  y: 4\nx: 6  y: 8\nx: 9  y: 10\nROLLBACK \n```", "```py\n>>> with engine.connect() as conn:\n...     conn.execute(\n...         text(\"INSERT INTO some_table (x, y) VALUES (:x, :y)\"),\n...         [{\"x\": 11, \"y\": 12}, {\"x\": 13, \"y\": 14}],\n...     )\n...     conn.commit()\nBEGIN  (implicit)\nINSERT  INTO  some_table  (x,  y)  VALUES  (?,  ?)\n[...]  [(11,  12),  (13,  14)]\n<sqlalchemy.engine.cursor.CursorResult  object  at  0x...>\nCOMMIT \n```", "```py\n>>> with engine.connect() as conn:\n...     result = conn.execute(text(\"SELECT x, y FROM some_table\"))\n...     for row in result:\n...         print(f\"x: {row.x}  y: {row.y}\")\nBEGIN  (implicit)\nSELECT  x,  y  FROM  some_table\n[...]  ()\nx: 1  y: 1\nx: 2  y: 4\nx: 6  y: 8\nx: 9  y: 10\nROLLBACK \n```", "```py\n    result = conn.execute(text(\"select x, y from some_table\"))\n\n    for x, y in result:\n        ...\n    ```", "```py\n    result = conn.execute(text(\"select x, y from some_table\"))\n\n    for row in result:\n        x = row[0]\n    ```", "```py\n    result = conn.execute(text(\"select x, y from some_table\"))\n\n    for row in result:\n        y = row.y\n\n        # illustrate use with Python f-strings\n        print(f\"Row: {row.x}  {y}\")\n    ```", "```py\n    result = conn.execute(text(\"select x, y from some_table\"))\n\n    for dict_row in result.mappings():\n        x = dict_row[\"x\"]\n        y = dict_row[\"y\"]\n    ```", "```py\n>>> with engine.connect() as conn:\n...     result = conn.execute(text(\"SELECT x, y FROM some_table WHERE y > :y\"), {\"y\": 2})\n...     for row in result:\n...         print(f\"x: {row.x}  y: {row.y}\")\nBEGIN  (implicit)\nSELECT  x,  y  FROM  some_table  WHERE  y  >  ?\n[...]  (2,)\nx: 2  y: 4\nx: 6  y: 8\nx: 9  y: 10\nROLLBACK \n```", "```py\n>>> with engine.connect() as conn:\n...     conn.execute(\n...         text(\"INSERT INTO some_table (x, y) VALUES (:x, :y)\"),\n...         [{\"x\": 11, \"y\": 12}, {\"x\": 13, \"y\": 14}],\n...     )\n...     conn.commit()\nBEGIN  (implicit)\nINSERT  INTO  some_table  (x,  y)  VALUES  (?,  ?)\n[...]  [(11,  12),  (13,  14)]\n<sqlalchemy.engine.cursor.CursorResult  object  at  0x...>\nCOMMIT \n```", "```py\n>>> from sqlalchemy.orm import Session\n\n>>> stmt = text(\"SELECT x, y FROM some_table WHERE y > :y ORDER BY x, y\")\n>>> with Session(engine) as session:\n...     result = session.execute(stmt, {\"y\": 6})\n...     for row in result:\n...         print(f\"x: {row.x}  y: {row.y}\")\nBEGIN  (implicit)\nSELECT  x,  y  FROM  some_table  WHERE  y  >  ?  ORDER  BY  x,  y\n[...]  (6,)\nx: 6  y: 8\nx: 9  y: 10\nx: 11  y: 12\nx: 13  y: 14\nROLLBACK \n```", "```py\n>>> with Session(engine) as session:\n...     result = session.execute(\n...         text(\"UPDATE some_table SET y=:y WHERE x=:x\"),\n...         [{\"x\": 9, \"y\": 11}, {\"x\": 13, \"y\": 15}],\n...     )\n...     session.commit()\nBEGIN  (implicit)\nUPDATE  some_table  SET  y=?  WHERE  x=?\n[...]  [(11,  9),  (15,  13)]\nCOMMIT \n```"]