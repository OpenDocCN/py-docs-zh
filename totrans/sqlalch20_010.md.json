["```py\n>>> squidward = User(name=\"squidward\", fullname=\"Squidward Tentacles\")\n>>> krabs = User(name=\"ehkrabs\", fullname=\"Eugene H. Krabs\")\n```", "```py\n>>> squidward\nUser(id=None, name='squidward', fullname='Squidward Tentacles')\n```", "```py\n>>> session = Session(engine)\n```", "```py\n>>> session.add(squidward)\n>>> session.add(krabs)\n```", "```py\n>>> session.new\nIdentitySet([User(id=None, name='squidward', fullname='Squidward Tentacles'), User(id=None, name='ehkrabs', fullname='Eugene H. Krabs')])\n```", "```py\n>>> session.flush()\nBEGIN  (implicit)\nINSERT  INTO  user_account  (name,  fullname)  VALUES  (?,  ?)  RETURNING  id\n[...  (insertmanyvalues)  1/2  (ordered;  batch  not  supported)]  ('squidward',  'Squidward Tentacles')\nINSERT  INTO  user_account  (name,  fullname)  VALUES  (?,  ?)  RETURNING  id\n[insertmanyvalues  2/2  (ordered;  batch  not  supported)]  ('ehkrabs',  'Eugene H. Krabs') \n```", "```py\n>>> squidward.id\n4\n>>> krabs.id\n5\n```", "```py\n>>> some_squidward = session.get(User, 4)\n>>> some_squidward\nUser(id=4, name='squidward', fullname='Squidward Tentacles')\n```", "```py\n>>> some_squidward is squidward\nTrue\n```", "```py\n>>> session.commit()\nCOMMIT\n```", "```py\n>>> sandy = session.execute(select(User).filter_by(name=\"sandy\")).scalar_one()\nBEGIN  (implicit)\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account\nWHERE  user_account.name  =  ?\n[...]  ('sandy',) \n```", "```py\n>>> sandy\nUser(id=2, name='sandy', fullname='Sandy Cheeks')\n```", "```py\n>>> sandy.fullname = \"Sandy Squirrel\"\n```", "```py\n>>> sandy in session.dirty\nTrue\n```", "```py\n>>> sandy_fullname = session.execute(select(User.fullname).where(User.id == 2)).scalar_one()\nUPDATE  user_account  SET  fullname=?  WHERE  user_account.id  =  ?\n[...]  ('Sandy Squirrel',  2)\nSELECT  user_account.fullname\nFROM  user_account\nWHERE  user_account.id  =  ?\n[...]  (2,)\n>>> print(sandy_fullname)\nSandy Squirrel\n```", "```py\n>>> sandy in session.dirty\nFalse\n```", "```py\n>>> patrick = session.get(User, 3)\nSELECT  user_account.id  AS  user_account_id,  user_account.name  AS  user_account_name,\nuser_account.fullname  AS  user_account_fullname\nFROM  user_account\nWHERE  user_account.id  =  ?\n[...]  (3,) \n```", "```py\n>>> session.delete(patrick)\n```", "```py\n>>> session.execute(select(User).where(User.name == \"patrick\")).first()\nSELECT  address.id  AS  address_id,  address.email_address  AS  address_email_address,\naddress.user_id  AS  address_user_id\nFROM  address\nWHERE  ?  =  address.user_id\n[...]  (3,)\nDELETE  FROM  user_account  WHERE  user_account.id  =  ?\n[...]  (3,)\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account\nWHERE  user_account.name  =  ?\n[...]  ('patrick',) \n```", "```py\n>>> patrick in session\nFalse\n```", "```py\n>>> session.rollback()\nROLLBACK\n```", "```py\n>>> sandy.__dict__\n{'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x...>}\n```", "```py\n>>> sandy.fullname\nBEGIN  (implicit)\nSELECT  user_account.id  AS  user_account_id,  user_account.name  AS  user_account_name,\nuser_account.fullname  AS  user_account_fullname\nFROM  user_account\nWHERE  user_account.id  =  ?\n[...]  (2,)\n'Sandy Cheeks'\n```", "```py\n>>> sandy.__dict__  \n{'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x...>,\n 'id': 2, 'name': 'sandy', 'fullname': 'Sandy Cheeks'}\n```", "```py\n>>> patrick in session\nTrue\n```", "```py\n>>> session.execute(select(User).where(User.name == \"patrick\")).scalar_one() is patrick\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account\nWHERE  user_account.name  =  ?\n[...]  ('patrick',)\nTrue\n```", "```py\n>>> session.close()\nROLLBACK \n```", "```py\n    # note that 'squidward.name' was just expired previously, so its value is unloaded\n    >>> squidward.name\n    Traceback (most recent call last):\n      ...\n    sqlalchemy.orm.exc.DetachedInstanceError: Instance <User at 0x...> is not bound to a Session; attribute refresh operation cannot proceed\n    ```", "```py\n    >>> session.add(squidward)\n    >>> squidward.name\n    BEGIN  (implicit)\n    SELECT  user_account.id  AS  user_account_id,  user_account.name  AS  user_account_name,  user_account.fullname  AS  user_account_fullname\n    FROM  user_account\n    WHERE  user_account.id  =  ?\n    [...]  (4,)\n    'squidward'\n    ```", "```py\n>>> squidward = User(name=\"squidward\", fullname=\"Squidward Tentacles\")\n>>> krabs = User(name=\"ehkrabs\", fullname=\"Eugene H. Krabs\")\n```", "```py\n>>> squidward\nUser(id=None, name='squidward', fullname='Squidward Tentacles')\n```", "```py\n>>> session = Session(engine)\n```", "```py\n>>> session.add(squidward)\n>>> session.add(krabs)\n```", "```py\n>>> session.new\nIdentitySet([User(id=None, name='squidward', fullname='Squidward Tentacles'), User(id=None, name='ehkrabs', fullname='Eugene H. Krabs')])\n```", "```py\n>>> session.flush()\nBEGIN  (implicit)\nINSERT  INTO  user_account  (name,  fullname)  VALUES  (?,  ?)  RETURNING  id\n[...  (insertmanyvalues)  1/2  (ordered;  batch  not  supported)]  ('squidward',  'Squidward Tentacles')\nINSERT  INTO  user_account  (name,  fullname)  VALUES  (?,  ?)  RETURNING  id\n[insertmanyvalues  2/2  (ordered;  batch  not  supported)]  ('ehkrabs',  'Eugene H. Krabs') \n```", "```py\n>>> squidward.id\n4\n>>> krabs.id\n5\n```", "```py\n>>> some_squidward = session.get(User, 4)\n>>> some_squidward\nUser(id=4, name='squidward', fullname='Squidward Tentacles')\n```", "```py\n>>> some_squidward is squidward\nTrue\n```", "```py\n>>> session.commit()\nCOMMIT\n```", "```py\n>>> squidward = User(name=\"squidward\", fullname=\"Squidward Tentacles\")\n>>> krabs = User(name=\"ehkrabs\", fullname=\"Eugene H. Krabs\")\n```", "```py\n>>> squidward\nUser(id=None, name='squidward', fullname='Squidward Tentacles')\n```", "```py\n>>> session = Session(engine)\n```", "```py\n>>> session.add(squidward)\n>>> session.add(krabs)\n```", "```py\n>>> session.new\nIdentitySet([User(id=None, name='squidward', fullname='Squidward Tentacles'), User(id=None, name='ehkrabs', fullname='Eugene H. Krabs')])\n```", "```py\n>>> session.flush()\nBEGIN  (implicit)\nINSERT  INTO  user_account  (name,  fullname)  VALUES  (?,  ?)  RETURNING  id\n[...  (insertmanyvalues)  1/2  (ordered;  batch  not  supported)]  ('squidward',  'Squidward Tentacles')\nINSERT  INTO  user_account  (name,  fullname)  VALUES  (?,  ?)  RETURNING  id\n[insertmanyvalues  2/2  (ordered;  batch  not  supported)]  ('ehkrabs',  'Eugene H. Krabs') \n```", "```py\n>>> squidward.id\n4\n>>> krabs.id\n5\n```", "```py\n>>> some_squidward = session.get(User, 4)\n>>> some_squidward\nUser(id=4, name='squidward', fullname='Squidward Tentacles')\n```", "```py\n>>> some_squidward is squidward\nTrue\n```", "```py\n>>> session.commit()\nCOMMIT\n```", "```py\n>>> sandy = session.execute(select(User).filter_by(name=\"sandy\")).scalar_one()\nBEGIN  (implicit)\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account\nWHERE  user_account.name  =  ?\n[...]  ('sandy',) \n```", "```py\n>>> sandy\nUser(id=2, name='sandy', fullname='Sandy Cheeks')\n```", "```py\n>>> sandy.fullname = \"Sandy Squirrel\"\n```", "```py\n>>> sandy in session.dirty\nTrue\n```", "```py\n>>> sandy_fullname = session.execute(select(User.fullname).where(User.id == 2)).scalar_one()\nUPDATE  user_account  SET  fullname=?  WHERE  user_account.id  =  ?\n[...]  ('Sandy Squirrel',  2)\nSELECT  user_account.fullname\nFROM  user_account\nWHERE  user_account.id  =  ?\n[...]  (2,)\n>>> print(sandy_fullname)\nSandy Squirrel\n```", "```py\n>>> sandy in session.dirty\nFalse\n```", "```py\n>>> patrick = session.get(User, 3)\nSELECT  user_account.id  AS  user_account_id,  user_account.name  AS  user_account_name,\nuser_account.fullname  AS  user_account_fullname\nFROM  user_account\nWHERE  user_account.id  =  ?\n[...]  (3,) \n```", "```py\n>>> session.delete(patrick)\n```", "```py\n>>> session.execute(select(User).where(User.name == \"patrick\")).first()\nSELECT  address.id  AS  address_id,  address.email_address  AS  address_email_address,\naddress.user_id  AS  address_user_id\nFROM  address\nWHERE  ?  =  address.user_id\n[...]  (3,)\nDELETE  FROM  user_account  WHERE  user_account.id  =  ?\n[...]  (3,)\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account\nWHERE  user_account.name  =  ?\n[...]  ('patrick',) \n```", "```py\n>>> patrick in session\nFalse\n```", "```py\n>>> session.rollback()\nROLLBACK\n```", "```py\n>>> sandy.__dict__\n{'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x...>}\n```", "```py\n>>> sandy.fullname\nBEGIN  (implicit)\nSELECT  user_account.id  AS  user_account_id,  user_account.name  AS  user_account_name,\nuser_account.fullname  AS  user_account_fullname\nFROM  user_account\nWHERE  user_account.id  =  ?\n[...]  (2,)\n'Sandy Cheeks'\n```", "```py\n>>> sandy.__dict__  \n{'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x...>,\n 'id': 2, 'name': 'sandy', 'fullname': 'Sandy Cheeks'}\n```", "```py\n>>> patrick in session\nTrue\n```", "```py\n>>> session.execute(select(User).where(User.name == \"patrick\")).scalar_one() is patrick\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account\nWHERE  user_account.name  =  ?\n[...]  ('patrick',)\nTrue\n```", "```py\n>>> session.close()\nROLLBACK \n```", "```py\n    # note that 'squidward.name' was just expired previously, so its value is unloaded\n    >>> squidward.name\n    Traceback (most recent call last):\n      ...\n    sqlalchemy.orm.exc.DetachedInstanceError: Instance <User at 0x...> is not bound to a Session; attribute refresh operation cannot proceed\n    ```", "```py\n    >>> session.add(squidward)\n    >>> squidward.name\n    BEGIN  (implicit)\n    SELECT  user_account.id  AS  user_account_id,  user_account.name  AS  user_account_name,  user_account.fullname  AS  user_account_fullname\n    FROM  user_account\n    WHERE  user_account.id  =  ?\n    [...]  (4,)\n    'squidward'\n    ```"]