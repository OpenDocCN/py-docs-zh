- en: jax.debug module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[`jax.readthedocs.io/en/latest/jax.debug.html`](https://jax.readthedocs.io/en/latest/jax.debug.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '## Runtime value debugging utilities'
  prefs: []
  type: TYPE_NORMAL
- en: jax.debug.print and jax.debug.breakpoint describes how to make use of JAX’s
    runtime value debugging features.
  prefs: []
  type: TYPE_NORMAL
- en: '| `callback`(callback, *args[, ordered]) | Calls a stageable Python callback.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `print`(fmt, *args[, ordered]) | Prints values and works in staged out JAX
    functions. |'
  prefs: []
  type: TYPE_TB
- en: '| `breakpoint`(*[, backend, filter_frames, ...]) | Enters a breakpoint at a
    point in a program. |'
  prefs: []
  type: TYPE_TB
- en: Sharding debugging utilities
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Functions that enable inspecting and visualizing array shardings inside (and
    outside) staged functions.
  prefs: []
  type: TYPE_NORMAL
- en: '| `inspect_array_sharding`(value, *, callback) | Enables inspecting array sharding
    inside JIT-ted functions. |'
  prefs: []
  type: TYPE_TB
- en: '| `visualize_array_sharding`(arr, **kwargs) | Visualizes an array''s sharding.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `visualize_sharding`(shape, sharding, *[, ...]) | Visualizes a `Sharding`
    using `rich`. |'
  prefs: []
  type: TYPE_TB
