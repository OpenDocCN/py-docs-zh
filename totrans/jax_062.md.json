["```py\ngit clone https://github.com/google/jax\ncd jax \n```", "```py\npip install jaxlib \n```", "```py\n    sudo apt install g++ python python3-dev \n    ```", "```py\npython build/build.py\npip install dist/*.whl  # installs jaxlib (includes XLA) \n```", "```py\npython build/build.py --python_version=3.12 \n```", "```py\n    python build/build.py --bazel_options=--override_repository=xla=/path/to/xla \n    ```", "```py\npacman -S patch coreutils \n```", "```py\npython .\\build\\build.py `\n  --enable_cuda `\n  --cuda_path='C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v10.1' `\n  --cudnn_path='C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v10.1' `\n  --cuda_version='10.1' `\n  --cudnn_version='7.6.5' \n```", "```py\nsudo apt install miopen-hip hipfft-dev rocrand-dev hipsparse-dev hipsolver-dev \\\n    rccl-dev rccl hip-dev rocfft-dev roctracer-dev hipblas-dev rocm-device-libs \n```", "```py\npython build/build.py --enable_rocm --rocm_path=/opt/rocm-5.7.0 \n```", "```py\ngit clone https://github.com/ROCmSoftwarePlatform/xla.git \n```", "```py\npython build/build.py --enable_rocm --rocm_path=/opt/rocm-5.7.0 \\\n  --bazel_options=--override_repository=xla=/path/to/xla-rocm \n```", "```py\npython build/build.py --python_version=3.12 \n```", "```py\n# Either add an entry to your `.bazelrc` file\nbuild --repo_env=HERMETIC_PYTHON_VERSION=3.12\n\n# OR pass it directly to your specific build command\nbazel build <target> --repo_env=HERMETIC_PYTHON_VERSION=3.12\n\n# OR set the environment variable globally in your shell:\nexport HERMETIC_PYTHON_VERSION=3.12 \n```", "```py\npython build/build.py --requirements_update --python_version=3.12 \n```", "```py\nbazel run //build:requirements.update --repo_env=HERMETIC_PYTHON_VERSION=3.12 \n```", "```py\nbazel run //build:requirements.update --repo_env=HERMETIC_PYTHON_VERSION=3.12 -- --pre \n```", "```py\necho -e \"\\n$(realpath jaxlib-0.4.27.dev20240416-cp312-cp312-manylinux2014_x86_64.whl)\" >> build/requirements.in\npython build/build.py --requirements_update --python_version=3.12 \n```", "```py\npython build/build.py --requirements_nightly_update --python_version=3.12 \n```", "```py\nbazel run //build:requirements_nightly.update --repo_env=HERMETIC_PYTHON_VERSION=3.12 \n```", "```py\nsudo apt-get update\nsudo apt-get build-dep python3 -y\nsudo apt-get install pkg-config zlib1g-dev libssl-dev -y\n# to  build scipy\nsudo apt-get install libopenblas-dev -y \n```", "```py\nbazel run //build:requirements_dev.update --repo_env=HERMETIC_PYTHON_VERSION=\"3.12\"\ncp build/requirements_lock_3_12.txt build/requirements_lock_3_13.txt\nbazel build //build:all_py_deps --repo_env=HERMETIC_PYTHON_VERSION=\"3.13\"\n# You may need to edit manually the resultant lock file, depending on how ready\n# your dependencies are for the new version of Python. \n```", "```py\npip install -e .  # installs jax \n```", "```py\npython build/build.py --configure_only \n```", "```py\nbazel test //tests:cpu_tests //tests:backend_independent_tests \n```", "```py\necho -e \"\\njaxlib >= 0.4.26\" >> build/requirements.in\npython build/build.py --requirements_update \n```", "```py\necho -e \"\\n$(realpath jaxlib-0.4.26-cp312-cp312-manylinux2014_x86_64.whl)\" >> build/requirements.in\npython build/build.py --requirements_update --python_version=3.12 \n```", "```py\nbazel test --//jax:build_jaxlib=false //tests:cpu_tests //tests:backend_independent_tests \n```", "```py\nbazel test //tests:gpu_tests --local_test_jobs=4 --test_tag_filters=multiaccelerator --//jax:build_jaxlib=false --test_env=XLA_PYTHON_CLIENT_ALLOCATOR=platform \n```", "```py\nNB_GPUS=2\nJOBS_PER_ACC=4\nJ=$((NB_GPUS * JOBS_PER_ACC))\nMULTI_GPU=\"--run_under $PWD/build/parallel_accelerator_execute.sh --test_env=JAX_ACCELERATOR_COUNT=${NB_GPUS} --test_env=JAX_TESTS_PER_ACCELERATOR=${JOBS_PER_ACC} --local_test_jobs=$J\"\nbazel test //tests:gpu_tests //tests:backend_independent_tests --test_env=XLA_PYTHON_CLIENT_PREALLOCATE=false --test_tag_filters=-multiaccelerator $MULTI_GPU \n```", "```py\npytest -n auto tests \n```", "```py\n# Bazel\nbazel test //tests/... --test_env=JAX_NUM_GENERATED_CASES=25` \n```", "```py\n# pytest\nJAX_NUM_GENERATED_CASES=25 pytest -n auto tests \n```", "```py\nJAX_ENABLE_X64=1 JAX_NUM_GENERATED_CASES=25 pytest -n auto tests \n```", "```py\nJAX_NUM_GENERATED_CASES=5 python tests/lax_numpy_test.py \n```", "```py\npython tests/lax_numpy_test.py --test_targets=\"testPad\" \n```", "```py\npytest docs \n```", "```py\npytest --doctest-modules jax/_src/numpy/lax_numpy.py \n```", "```py\npip install mypy\nmypy --config=pyproject.toml --show-error-codes jax \n```", "```py\npre-commit run mypy \n```", "```py\npip install ruff\nruff jax \n```", "```py\npre-commit run ruff \n```", "```py\npip install -r docs/requirements.txt \n```", "```py\nsphinx-build -b html docs docs/build/html -j auto \n```", "```py\nsphinx-build -b html -D nb_execution_mode=off docs docs/build/html -j auto \n```", "```py\npip install jupytext==1.16.0\njupytext --sync docs/notebooks/thinking_in_jax.ipynb \n```", "```py\ngit add docs -u  # pre-commit runs on files in git staging.\npre-commit run jupytext \n```", "```py\njupytext --set-formats ipynb,md:myst path/to/the/notebook.ipynb \n```", "```py\nmkvirtualenv jax-docs  # A new virtualenv\nmkdir jax-docs  # A new directory\ncd jax-docs\ngit clone --no-single-branch --depth 50 https://github.com/google/jax\ncd jax\ngit checkout --force origin/test-docs\ngit clean -d -f -f\nworkon jax-docs\n\npython -m pip install --upgrade --no-cache-dir pip\npython -m pip install --upgrade --no-cache-dir -I Pygments==2.3.1 setuptools==41.0.1 docutils==0.14 mock==1.0.1 pillow==5.4.1 alabaster>=0.7,<0.8,!=0.7.5 commonmark==0.8.1 recommonmark==0.5.0 'sphinx<2' 'sphinx-rtd-theme<0.5' 'readthedocs-sphinx-ext<1.1'\npython -m pip install --exists-action=w --no-cache-dir -r docs/requirements.txt\ncd docs\npython `which sphinx-build` -T -E -b html -d _build/doctrees-readthedocs -D language=en . _build/html \n```"]