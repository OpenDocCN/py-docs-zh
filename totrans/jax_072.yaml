- en: Jax and Jaxlib versioning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[`jax.readthedocs.io/en/latest/jep/9419-jax-versioning.html`](https://jax.readthedocs.io/en/latest/jep/9419-jax-versioning.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Why are `jax` and `jaxlib` separate packages?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We publish JAX as two separate Python wheels, namely `jax`, which is a pure
    Python wheel, and `jaxlib`, which is a mostly-C++ wheel that contains libraries
    such as:'
  prefs: []
  type: TYPE_NORMAL
- en: XLA,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pieces of LLVM used by XLA,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MLIR infrastructure, such as the StableHLO Python bindings.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JAX-specific C++ libraries for fast JIT and PyTree manipulation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We distribute separate `jax` and `jaxlib` packages because it makes it easy
    to work on the Python parts of JAX without having to build C++ code or even having
    a C++ toolchain installed. `jaxlib` is a large library that is not easy for many
    users to build, but most changes to JAX only touch Python code. By allowing the
    Python pieces to be updated independently of the C++ pieces, we improve the development
    velocity for Python changes.
  prefs: []
  type: TYPE_NORMAL
- en: In addition `jaxlib` is not cheap to build, but we want to be able to iterate
    on and run the JAX tests in environments without a lot of CPU, for example in
    Github Actions or on a laptop. Many of our CI builds simply use a prebuilt `jaxlib`,
    rather than needing to rebuild the C++ pieces of JAX on each PR.
  prefs: []
  type: TYPE_NORMAL
- en: As we will see, distributing `jax` and `jaxlib` separately comes with a cost,
    in that it requires that changes to `jaxlib` maintain a backward compatible API.
    However, we believe that on balance it is preferable to make Python changes easy,
    even if at the cost of making C++ changes slightly harder.
  prefs: []
  type: TYPE_NORMAL
- en: How are `jax` and `jaxlib` versioned?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Summary: `jax` and `jaxlib` share the same version number in the JAX source
    tree, but are released as separate Python packages. When installed, the `jax`
    package version must be greater than or equal to `jaxlib`’s version, and `jaxlib`’s
    version must be greater than or equal to the minimum `jaxlib` version specified
    by `jax`.'
  prefs: []
  type: TYPE_NORMAL
- en: Both `jax` and `jaxlib` releases are numbered `x.y.z`, where `x` is the major
    version, and `y` is the minor version, and `z` is an optional patch release. Version
    numbers must follow [PEP 440](https://www.python.org/dev/peps/pep-0440/). Version
    number comparisons are lexicographic comparisons on tuples of integers.
  prefs: []
  type: TYPE_NORMAL
- en: Each `jax` release has an associated minimum `jaxlib` version `mx.my.mz`. The
    minimum `jaxlib` version for `jax` version `x.y.z` must be no greater than `x.y.z`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For `jax` version `x.y.z` and `jaxlib` version `lx.ly.lz` to be compatible,
    the following must hold:'
  prefs: []
  type: TYPE_NORMAL
- en: The jaxlib version (`lx.ly.lz`) must be greater than or equal to the minimum
    jaxlib version (`mx.my.mz`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The jax version (`x.y.z`) must be greater than or equal to the jaxlib version
    (`lx.ly.lz`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These constraints imply the following rules for releases:'
  prefs: []
  type: TYPE_NORMAL
- en: '`jax` may be released on its own at any time, without updating `jaxlib`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a new `jaxlib` is released, a `jax` release must be made at the same time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These [version constraints](https://github.com/google/jax/blob/main/jax/version.py)
    are currently checked by `jax` at import time, instead of being expressed as Python
    package version constraints. `jax` checks the `jaxlib` version at runtime rather
    than using a `pip` package version constraint because we [provide separate `jaxlib`
    wheels](https://github.com/google/jax#installation) for a variety of hardware
    and software versions (e.g, GPU, TPU, etc.). Since we do not know which is the
    right choice for any given user, we do not want `pip` to install a `jaxlib` package
    for us automatically.
  prefs: []
  type: TYPE_NORMAL
- en: In the future, we hope to separate out the hardware-specific pieces of `jaxlib`
    into separate plugins, at which point the minimum version could be expressed as
    a Python package dependency. For now, we do provide platform-specific extra requirements
    that install a compatible jaxlib version, e.g., `jax[cuda]`.
  prefs: []
  type: TYPE_NORMAL
- en: How can I safely make changes to the API of `jaxlib`?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`jax` may drop compatibility with older `jaxlib` releases at any time, so long
    as the minimum `jaxlib` version is increased to a compatible version. However,
    note that the minimum `jaxlib`, even for unreleased versions of `jax`, must be
    a released version! This allows us to use released `jaxlib` wheels in our CI builds,
    and allows Python developers to work on `jax` at HEAD without ever needing to
    build `jaxlib`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For example, to remove an old backwards compatibility path in the `jax` Python
    code, it is sufficient to bump the minimum jaxlib version and then delete the
    compatibility path.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`jaxlib` may drop compatibility with older `jax` releases lower than its own
    release version number. The version constraints enforced by `jax` would forbid
    the use of an incompatible `jaxlib`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For example, for `jaxlib` to drop a Python binding API used by an older `jax`
    version, the `jaxlib` minor or major version number must be incremented.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If possible, changes to the `jaxlib` should be made in a backwards-compatible
    way.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In general `jaxlib` may freely change its API, so long as the rules about `jax`
    being compatible with all `jaxlib`s at least as new as the minimum version are
    followed. This implies that `jax` must always be compatible with at least two
    versions of `jaxlib`, namely, the last release, and the tip-of-tree version, effectively
    the next release. This is easier to do if compatibility is maintained, although
    incompatible changes can be made using version tests from `jax`; see below.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For example, it is usually safe to add a new function to `jaxlib`, but unsafe
    to remove an existing function or to change its signature if current `jax` is
    still using it. Changes to `jax` must work or degrade gracefully for all `jaxlib`
    releases greater than the minimum up to HEAD.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note that the compatibility rules here only apply to *released* versions of
    `jax` and `jaxlib`. They do not apply to unreleased versions; that is, it is ok
    to introduce and then remove an API from `jaxlib` if it is never released, or
    if no released `jax` version uses that API.
  prefs: []
  type: TYPE_NORMAL
- en: How is the source to `jaxlib` laid out?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`jaxlib` is split across two main repositories, namely the [`jaxlib/` subdirectory
    in the main JAX repository](https://github.com/google/jax/tree/main/jaxlib) and
    in the [XLA source tree, which lives inside the XLA repository](https://github.com/openxla/xla).
    The JAX-specific pieces inside XLA are primarily in the [`xla/python` subdirectory](https://github.com/tensorflow/tensorflow/tree/master/tensorflow/compiler/xla/python).'
  prefs: []
  type: TYPE_NORMAL
- en: The reason that C++ pieces of JAX, such as Python bindings and runtime components,
    are inside the XLA tree is partially historical and partially technical.
  prefs: []
  type: TYPE_NORMAL
- en: The historical reason is that originally the `xla/python` bindings were envisaged
    as general purpose Python bindings that might be shared with other frameworks.
    In practice this is increasingly less true, and `xla/python` incorporates a number
    of JAX-specific pieces and is likely to incorporate more. So it is probably best
    to simply think of `xla/python` as part of JAX.
  prefs: []
  type: TYPE_NORMAL
- en: The technical reason is that the XLA C++ API is not stable. By keeping the XLA:Python
    bindings in the XLA tree, their C++ implementation can be updated atomically with
    the C++ API of XLA. It is easier to maintain backward and forward compatibility
    of Python APIs than C++ ones, so `xla/python` exposes Python APIs and is responsible
    for maintaining backward compatibility at the Python level.
  prefs: []
  type: TYPE_NORMAL
- en: '`jaxlib` is built using Bazel out of the `jax` repository. The pieces of `jaxlib`
    from the XLA repository are incorporated into the build [as a Bazel submodule](https://github.com/google/jax/blob/main/WORKSPACE).
    To update the version of XLA used during the build, one must update the pinned
    version in the Bazel `WORKSPACE`. This is done manually on an as-needed basis,
    but can be overridden on a build-by-build basis.'
  prefs: []
  type: TYPE_NORMAL
- en: How do we make changes across the `jax` and `jaxlib` boundary between releases?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The jaxlib version is a coarse instrument: it only lets us reason about *releases*.'
  prefs: []
  type: TYPE_NORMAL
- en: However, since the `jax` and `jaxlib` code is split across repositories that
    cannot be updated atomically in a single change, we need to manage compatibility
    at a finer granularity than our release cycle. To manage fine-grained compatibility,
    we have additional versioning that is independent of the `jaxlib` release version
    numbers.
  prefs: []
  type: TYPE_NORMAL
- en: 'We maintain an additional version number (`_version`) in [`xla_client.py` in
    the XLA repository](https://github.com/openxla/xla/blob/main/xla/python/xla_client.py).
    The idea is that this version number, is defined in `xla/python` together with
    the C++ parts of JAX, is also accessible to JAX Python as `jax._src.lib.xla_extension_version`,
    and must be incremented every time that a change is made to the XLA/Python code
    that has backwards compatibility implications for `jax`. The JAX Python code can
    then use this version number to maintain backwards compatibility, e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note that this version number is in *addition* to the constraints on the released
    version numbers, that is, this version number exists to help manage compatibility
    during development for unreleased code. Releases must also follow the compatibility
    rules given above.
  prefs: []
  type: TYPE_NORMAL
