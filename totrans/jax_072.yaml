- en: Jax and Jaxlib versioning
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jax 和 Jaxlib 版本控制
- en: 原文：[`jax.readthedocs.io/en/latest/jep/9419-jax-versioning.html`](https://jax.readthedocs.io/en/latest/jep/9419-jax-versioning.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[`jax.readthedocs.io/en/latest/jep/9419-jax-versioning.html`](https://jax.readthedocs.io/en/latest/jep/9419-jax-versioning.html)
- en: Why are `jax` and `jaxlib` separate packages?
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么 `jax` 和 `jaxlib` 是独立的包？
- en: 'We publish JAX as two separate Python wheels, namely `jax`, which is a pure
    Python wheel, and `jaxlib`, which is a mostly-C++ wheel that contains libraries
    such as:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将 JAX 发布为两个独立的 Python 轮子，即纯 Python 轮子 `jax` 和主要由 C++ 组成的轮子 `jaxlib`，后者包含库，例如：
- en: XLA,
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: XLA，
- en: pieces of LLVM used by XLA,
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: XLA 使用的 LLVM 组件片段，
- en: MLIR infrastructure, such as the StableHLO Python bindings.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MLIR 基础设施，如 StableHLO Python 绑定。
- en: JAX-specific C++ libraries for fast JIT and PyTree manipulation.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 专门用于快速 JIT 和 PyTree 操作的 JAX 特定 C++ 库。
- en: We distribute separate `jax` and `jaxlib` packages because it makes it easy
    to work on the Python parts of JAX without having to build C++ code or even having
    a C++ toolchain installed. `jaxlib` is a large library that is not easy for many
    users to build, but most changes to JAX only touch Python code. By allowing the
    Python pieces to be updated independently of the C++ pieces, we improve the development
    velocity for Python changes.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们发布 `jax` 作为两个独立的 Python 轮子，即纯 Python 轮子 `jax` 和主要由 C++ 组成的轮子 `jaxlib`，后者包含如下库：
- en: In addition `jaxlib` is not cheap to build, but we want to be able to iterate
    on and run the JAX tests in environments without a lot of CPU, for example in
    Github Actions or on a laptop. Many of our CI builds simply use a prebuilt `jaxlib`,
    rather than needing to rebuild the C++ pieces of JAX on each PR.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，构建 `jaxlib` 不是廉价的，但我们希望能够在没有大量 CPU 的环境中迭代并运行 JAX 测试，例如在 Github Actions 或笔记本电脑上。我们的许多
    CI 构建都简单地使用预构建的 `jaxlib`，而不是在每个 PR 上重新构建 JAX 的 C++ 组件。
- en: As we will see, distributing `jax` and `jaxlib` separately comes with a cost,
    in that it requires that changes to `jaxlib` maintain a backward compatible API.
    However, we believe that on balance it is preferable to make Python changes easy,
    even if at the cost of making C++ changes slightly harder.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们将看到的，将 `jax` 和 `jaxlib` 分开发布也有一定成本，因为需要确保 `jaxlib` 的变更保持向后兼容的 API。然而，我们认为总体上，使得
    Python 的变更变得简单是可取的，即使这会稍微增加 C++ 变更的难度。
- en: How are `jax` and `jaxlib` versioned?
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`jax` 和 `jaxlib` 的版本如何确定？'
- en: 'Summary: `jax` and `jaxlib` share the same version number in the JAX source
    tree, but are released as separate Python packages. When installed, the `jax`
    package version must be greater than or equal to `jaxlib`’s version, and `jaxlib`’s
    version must be greater than or equal to the minimum `jaxlib` version specified
    by `jax`.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 概要：`jax` 和 `jaxlib` 在 JAX 源代码树中共享相同的版本号，但作为单独的 Python 包发布。安装时，`jax` 包版本必须大于或等于
    `jaxlib` 的版本，并且 `jaxlib` 的版本必须大于或等于 `jax` 指定的最小 `jaxlib` 版本。
- en: Both `jax` and `jaxlib` releases are numbered `x.y.z`, where `x` is the major
    version, and `y` is the minor version, and `z` is an optional patch release. Version
    numbers must follow [PEP 440](https://www.python.org/dev/peps/pep-0440/). Version
    number comparisons are lexicographic comparisons on tuples of integers.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`jax` 和 `jaxlib` 发布版本号均为 `x.y.z`，其中 `x` 是主版本号，`y` 是次版本号，`z` 是可选的补丁版本号。版本号必须遵循[PEP
    440](https://www.python.org/dev/peps/pep-0440/)。版本号比较是对整数元组的词典排序比较。'
- en: Each `jax` release has an associated minimum `jaxlib` version `mx.my.mz`. The
    minimum `jaxlib` version for `jax` version `x.y.z` must be no greater than `x.y.z`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 `jax` 发布版本都有一个关联的最小 `jaxlib` 版本 `mx.my.mz`。对于 `jax` 版本 `x.y.z`，其最小 `jaxlib`
    版本必须不大于 `x.y.z`。
- en: 'For `jax` version `x.y.z` and `jaxlib` version `lx.ly.lz` to be compatible,
    the following must hold:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `jax` 版本 `x.y.z` 和 `jaxlib` 版本 `lx.ly.lz` 兼容性要求如下：
- en: The jaxlib version (`lx.ly.lz`) must be greater than or equal to the minimum
    jaxlib version (`mx.my.mz`).
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jaxlib` 版本（`lx.ly.lz`）必须大于或等于最小的 `jaxlib` 版本（`mx.my.mz`）。'
- en: The jax version (`x.y.z`) must be greater than or equal to the jaxlib version
    (`lx.ly.lz`).
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax` 版本（`x.y.z`）必须大于或等于 `jaxlib` 版本（`lx.ly.lz`）。'
- en: 'These constraints imply the following rules for releases:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这些约束意味着发布需遵循以下规则：
- en: '`jax` may be released on its own at any time, without updating `jaxlib`.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以随时单独发布 `jax` 而不更新 `jaxlib`。
- en: If a new `jaxlib` is released, a `jax` release must be made at the same time.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果发布新版 `jaxlib`，必须同时发布一个 `jax` 版本。
- en: These [version constraints](https://github.com/google/jax/blob/main/jax/version.py)
    are currently checked by `jax` at import time, instead of being expressed as Python
    package version constraints. `jax` checks the `jaxlib` version at runtime rather
    than using a `pip` package version constraint because we [provide separate `jaxlib`
    wheels](https://github.com/google/jax#installation) for a variety of hardware
    and software versions (e.g, GPU, TPU, etc.). Since we do not know which is the
    right choice for any given user, we do not want `pip` to install a `jaxlib` package
    for us automatically.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当前 `jax` 在导入时检查这些[版本约束](https://github.com/google/jax/blob/main/jax/version.py)，而不是作为
    Python 包版本约束来表达。 `jax` 在运行时检查 `jaxlib` 版本，而不是使用 `pip` 包版本约束，因为我们为各种硬件和软件版本（如 GPU、TPU
    等）提供单独的[ `jaxlib` 轮子](https://github.com/google/jax#installation)。由于我们不知道哪种选择对任何给定用户来说是正确的，我们不希望
    `pip` 自动为我们安装 `jaxlib` 包。
- en: In the future, we hope to separate out the hardware-specific pieces of `jaxlib`
    into separate plugins, at which point the minimum version could be expressed as
    a Python package dependency. For now, we do provide platform-specific extra requirements
    that install a compatible jaxlib version, e.g., `jax[cuda]`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 将来，我们希望将 `jaxlib` 的硬件特定部分分离成单独的插件，届时最低版本可以表达为 Python 包依赖性。目前，我们确实提供特定平台的额外要求，以安装兼容的
    `jaxlib` 版本，例如 `jax[cuda]`。
- en: How can I safely make changes to the API of `jaxlib`?
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何安全地对 `jaxlib` 的 API 进行更改？
- en: '`jax` may drop compatibility with older `jaxlib` releases at any time, so long
    as the minimum `jaxlib` version is increased to a compatible version. However,
    note that the minimum `jaxlib`, even for unreleased versions of `jax`, must be
    a released version! This allows us to use released `jaxlib` wheels in our CI builds,
    and allows Python developers to work on `jax` at HEAD without ever needing to
    build `jaxlib`.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax` 可能随时停止与旧版本的 `jaxlib` 兼容，只要将最低 `jaxlib` 版本升级到兼容版本即可。但请注意，即使是对于尚未发布的 `jax`
    版本，最低 `jaxlib` 版本也必须是一个已发布的版本！这允许我们在持续集成构建中使用已发布的 `jaxlib` 轮子，并允许 Python 开发者在不需要构建
    `jaxlib` 的情况下在 HEAD 上工作。'
- en: For example, to remove an old backwards compatibility path in the `jax` Python
    code, it is sufficient to bump the minimum jaxlib version and then delete the
    compatibility path.
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如，要在 `jax` Python 代码中移除旧的向后兼容路径，只需提高最低 `jaxlib` 版本然后删除兼容路径即可。
- en: '`jaxlib` may drop compatibility with older `jax` releases lower than its own
    release version number. The version constraints enforced by `jax` would forbid
    the use of an incompatible `jaxlib`.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jaxlib` 可能会停止与低于其自身发布版本号的旧 `jax` 发行版的兼容性。 `jax` 强制执行的版本约束将禁止使用不兼容的 `jaxlib`。'
- en: For example, for `jaxlib` to drop a Python binding API used by an older `jax`
    version, the `jaxlib` minor or major version number must be incremented.
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如，要使 `jaxlib` 放弃一个旧的 `jax` 版本使用的 Python 绑定 API，必须增加 `jaxlib` 的次要或主要版本号。
- en: If possible, changes to the `jaxlib` should be made in a backwards-compatible
    way.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果可能，应以向后兼容的方式对 `jaxlib` 进行更改。
- en: In general `jaxlib` may freely change its API, so long as the rules about `jax`
    being compatible with all `jaxlib`s at least as new as the minimum version are
    followed. This implies that `jax` must always be compatible with at least two
    versions of `jaxlib`, namely, the last release, and the tip-of-tree version, effectively
    the next release. This is easier to do if compatibility is maintained, although
    incompatible changes can be made using version tests from `jax`; see below.
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通常，`jaxlib` 可以自由更改其 API，只要遵循 `jax` 必须与至少两个 `jaxlib` 版本兼容的规则。这意味着 `jax` 必须始终与至少两个
    `jaxlib` 版本兼容，即最后一个发布版本和最新版本（实际上是下一个发布版本）。如果保持兼容性，这将更容易实现，尽管可以通过 `jax` 的版本测试进行不兼容的更改；请参见下文。
- en: For example, it is usually safe to add a new function to `jaxlib`, but unsafe
    to remove an existing function or to change its signature if current `jax` is
    still using it. Changes to `jax` must work or degrade gracefully for all `jaxlib`
    releases greater than the minimum up to HEAD.
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如，通常可以安全地向 `jaxlib` 添加新功能，但是如果当前的 `jax` 仍在使用它，删除现有功能或更改其签名则是不安全的。对 `jax` 的更改必须在所有大于最低版本的
    `jaxlib` 发行版上运行或逐渐退化。
- en: Note that the compatibility rules here only apply to *released* versions of
    `jax` and `jaxlib`. They do not apply to unreleased versions; that is, it is ok
    to introduce and then remove an API from `jaxlib` if it is never released, or
    if no released `jax` version uses that API.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，此处的兼容性规则仅适用于*发布的*`jax`和`jaxlib`版本。它们不适用于未发布的版本；也就是说，如果从未发布或没有发布的`jax`版本使用该
    API，则可以引入并删除`jaxlib`中的 API。
- en: How is the source to `jaxlib` laid out?
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`jaxlib` 的源代码布局是怎样的？'
- en: '`jaxlib` is split across two main repositories, namely the [`jaxlib/` subdirectory
    in the main JAX repository](https://github.com/google/jax/tree/main/jaxlib) and
    in the [XLA source tree, which lives inside the XLA repository](https://github.com/openxla/xla).
    The JAX-specific pieces inside XLA are primarily in the [`xla/python` subdirectory](https://github.com/tensorflow/tensorflow/tree/master/tensorflow/compiler/xla/python).'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`jaxlib` 被分为两个主要的存储库，即[`jaxlib/`主 JAX 存储库的子目录](https://github.com/google/jax/tree/main/jaxlib)和[XLA
    源代码树，位于 XLA 存储库内部](https://github.com/openxla/xla)。XLA 内部的 JAX 特定部分主要位于[`xla/python`子目录](https://github.com/tensorflow/tensorflow/tree/master/tensorflow/compiler/xla/python)。'
- en: The reason that C++ pieces of JAX, such as Python bindings and runtime components,
    are inside the XLA tree is partially historical and partially technical.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: JAX 的 C++ 组件，如 Python 绑定和运行时组件，位于 XLA 树内部的原因部分是历史原因，部分是技术原因。
- en: The historical reason is that originally the `xla/python` bindings were envisaged
    as general purpose Python bindings that might be shared with other frameworks.
    In practice this is increasingly less true, and `xla/python` incorporates a number
    of JAX-specific pieces and is likely to incorporate more. So it is probably best
    to simply think of `xla/python` as part of JAX.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 历史原因是最初`xla/python`绑定被构想为通用 Python 绑定，可能与其他框架共享。实际上，这种情况越来越少见，`xla/python`包含了许多特定于
    JAX 的部分，并且可能会包含更多。因此，最好将`xla/python`简单地视为 JAX 的一部分。
- en: The technical reason is that the XLA C++ API is not stable. By keeping the XLA:Python
    bindings in the XLA tree, their C++ implementation can be updated atomically with
    the C++ API of XLA. It is easier to maintain backward and forward compatibility
    of Python APIs than C++ ones, so `xla/python` exposes Python APIs and is responsible
    for maintaining backward compatibility at the Python level.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 技术原因在于 XLA C++ API 不稳定。通过将 XLA:Python 绑定保留在 XLA 树中，可以将它们的 C++ 实现与 XLA 的 C++
    API 进行原子更新。在 Python API 层面上，维护 Python API 的向后和向前兼容性要比维护 C++ API 更容易，因此`xla/python`公开了
    Python API 并负责在 Python 层面上维护向后兼容性。
- en: '`jaxlib` is built using Bazel out of the `jax` repository. The pieces of `jaxlib`
    from the XLA repository are incorporated into the build [as a Bazel submodule](https://github.com/google/jax/blob/main/WORKSPACE).
    To update the version of XLA used during the build, one must update the pinned
    version in the Bazel `WORKSPACE`. This is done manually on an as-needed basis,
    but can be overridden on a build-by-build basis.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`jaxlib` 使用 Bazel 从`jax`存储库构建。来自 XLA 存储库的`jaxlib`部分被合并到构建中 [作为 Bazel 子模块](https://github.com/google/jax/blob/main/WORKSPACE)。要在构建过程中更新使用的
    XLA 版本，必须在 Bazel 的`WORKSPACE`中更新固定的版本。这是根据需要手动完成的，但可以根据构建的需求进行覆盖。'
- en: How do we make changes across the `jax` and `jaxlib` boundary between releases?
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在`jax`和`jaxlib`发布之间如何跨界修改？
- en: 'The jaxlib version is a coarse instrument: it only lets us reason about *releases*.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`jaxlib` 版本是一个粗糙的工具：它只能让我们推断*发布版本*。'
- en: However, since the `jax` and `jaxlib` code is split across repositories that
    cannot be updated atomically in a single change, we need to manage compatibility
    at a finer granularity than our release cycle. To manage fine-grained compatibility,
    we have additional versioning that is independent of the `jaxlib` release version
    numbers.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，由于`jax`和`jaxlib`代码分布在无法在单个更改中原子更新的存储库中，我们需要在比我们的发布周期更精细的粒度上管理兼容性。为了管理细粒度兼容性，我们有额外的版本控制，这与`jaxlib`发布版本号独立。
- en: 'We maintain an additional version number (`_version`) in [`xla_client.py` in
    the XLA repository](https://github.com/openxla/xla/blob/main/xla/python/xla_client.py).
    The idea is that this version number, is defined in `xla/python` together with
    the C++ parts of JAX, is also accessible to JAX Python as `jax._src.lib.xla_extension_version`,
    and must be incremented every time that a change is made to the XLA/Python code
    that has backwards compatibility implications for `jax`. The JAX Python code can
    then use this version number to maintain backwards compatibility, e.g.:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[XLA存储库中的`xla_client.py`](https://github.com/openxla/xla/blob/main/xla/python/xla_client.py)中维护了一个额外的版本号（`_version`）。其理念是，这个版本号在`xla/python`中与JAX的C++部分一起定义，也可以作为`jax._src.lib.xla_extension_version`被JAX
    Python访问，并且在每次对XLA/Python代码进行更改且这些更改对`jax`的向后兼容性有影响时，都必须递增。JAX Python代码可以利用这个版本号来维护向后兼容性，例如：
- en: '[PRE0]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note that this version number is in *addition* to the constraints on the released
    version numbers, that is, this version number exists to help manage compatibility
    during development for unreleased code. Releases must also follow the compatibility
    rules given above.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这个版本号是为了帮助管理开发中未发布代码的兼容性而存在的，与已发布版本号的约束*额外*。发布版本也必须遵循上述兼容性规则。
