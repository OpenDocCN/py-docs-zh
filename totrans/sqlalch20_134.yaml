- en: 0.7 Changelog
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 0.7 更新日志
- en: 原文：[https://docs.sqlalchemy.org/en/20/changelog/changelog_07.html](https://docs.sqlalchemy.org/en/20/changelog/changelog_07.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/changelog/changelog_07.html](https://docs.sqlalchemy.org/en/20/changelog/changelog_07.html)
- en: 0.7.11
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.7.11
- en: no release date
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 没有发布日期
- en: orm
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where list instrumentation would fail to represent a setslice of `[0:0]`
    correctly, which in particular could occur when using `insert(0, item)` with the
    association proxy. Due to some quirk in Python collections, the issue was much
    more likely with Python 3 rather than 2.
  id: totrans-6
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，列表操作会无法正确表示 `[0:0]` 的切片，尤其是在使用关联代理时可能发生。由于 Python 集合的一些怪癖，该问题在 Python
    3 中更有可能发生而不是在 Python 2 中。
- en: 'References: [#2807](https://www.sqlalchemy.org/trac/ticket/2807)'
  id: totrans-7
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2807](https://www.sqlalchemy.org/trac/ticket/2807)
- en: '**[orm] [bug]**'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: 'Fixed bug when a query of the form: `query(SubClass).options(subqueryload(Baseclass.attrname))`,
    where `SubClass` is a joined inh of `BaseClass`, would fail to apply the `JOIN`
    inside the subquery on the attribute load, producing a cartesian product. The
    populated results still tended to be correct as additional rows are just ignored,
    so this issue may be present as a performance degradation in applications that
    are otherwise working correctly.'
  id: totrans-9
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，当查询形式为：`query(SubClass).options(subqueryload(Baseclass.attrname))`，其中
    `SubClass` 是 `BaseClass` 的联接继承时，会在属性加载时未能在子查询中应用 `JOIN`，从而产生笛卡尔积。生成的结果仍然往往是正确的，因为额外的行只是被忽略，所以这个问题可能存在于其它方面正常工作的应用中作为性能下降。
- en: 'References: [#2699](https://www.sqlalchemy.org/trac/ticket/2699)'
  id: totrans-10
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2699](https://www.sqlalchemy.org/trac/ticket/2699)
- en: '**[orm] [bug]**'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in unit of work whereby a joined-inheritance subclass could insert
    the row for the “sub” table before the parent table, if the two tables had no
    ForeignKey constraints set up between them.
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了工作单元中的错误，即如果两个表之间没有设置 ForeignKey 约束，则联接继承子类可能会在父表之前插入“子”表的行。
- en: 'References: [#2689](https://www.sqlalchemy.org/trac/ticket/2689)'
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2689](https://www.sqlalchemy.org/trac/ticket/2689)
- en: '**[orm] [bug]**'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Improved the error message emitted when a “backref loop” is detected, that is
    when an attribute event triggers a bidirectional assignment between two other
    attributes with no end. This condition can occur not just when an object of the
    wrong type is assigned, but also when an attribute is mis-configured to backref
    into an existing backref pair.
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了当检测到“backref 循环”时发出的错误消息，即当属性事件触发两个其他属性之间的双向赋值时。这种情况不仅会在分配错误类型的对象时发生，还会在属性被错误配置为
    backref 到现有 backref 对时发生。
- en: 'References: [#2674](https://www.sqlalchemy.org/trac/ticket/2674)'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2674](https://www.sqlalchemy.org/trac/ticket/2674)
- en: '**[orm] [bug]**'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: A warning is emitted when a MapperProperty is assigned to a mapper that replaces
    an existing property, if the properties in question aren’t plain column-based
    properties. Replacement of relationship properties is rarely (ever?) what is intended
    and usually refers to a mapper mis-configuration. This will also warn if a backref
    configures itself on top of an existing one in an inheritance relationship (which
    is an error in 0.8).
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当将 MapperProperty 分配给替换现有属性的映射器时，如果涉及的属性不是基于普通列的属性，则会发出警告。很少（或者从来没有？）有人打算替换关系属性，通常是指映射器错误配置。如果在继承关系中
    backref 配置在现有的 backref 上（在 0.8 中是错误的），也会发出警告。
- en: 'References: [#2674](https://www.sqlalchemy.org/trac/ticket/2674)'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2674](https://www.sqlalchemy.org/trac/ticket/2674)
- en: engine
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: The regexp used by the `make_url()` function now parses ipv6 addresses, e.g.
    surrounded by brackets.
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`make_url()` 函数使用的正则表达式现在可以解析 ipv6 地址，例如用方括号括起来。'
- en: 'References: [#2851](https://www.sqlalchemy.org/trac/ticket/2851)'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2851](https://www.sqlalchemy.org/trac/ticket/2851)
- en: sql
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed regression dating back to 0.7.9 whereby the name of a CTE might not be
    properly quoted if it was referred to in multiple FROM clauses.
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了自 0.7.9 起存在的回归，即如果在多个 FROM 子句中引用了 CTE 的名称，则可能未正确引用该名称。
- en: 'References: [#2801](https://www.sqlalchemy.org/trac/ticket/2801)'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2801](https://www.sqlalchemy.org/trac/ticket/2801)
- en: '**[sql] [bug] [cte]**'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [cte]**'
- en: Fixed bug in common table expression system where if the CTE were used only
    as an `alias()` construct, it would not render using the WITH keyword.
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了公共表达式系统中的错误，如果 CTE 仅用作 `alias()` 构造，则不会使用 WITH 关键字进行渲染。
- en: 'References: [#2783](https://www.sqlalchemy.org/trac/ticket/2783)'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2783](https://www.sqlalchemy.org/trac/ticket/2783)
- en: '**[sql] [bug]**'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in [`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") DDL where the “quote” flag from a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") object would not be propagated.
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") DDL 中的 bug，其中来自[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 对象的“quote”标志不会传播。
- en: 'References: [#2784](https://www.sqlalchemy.org/trac/ticket/2784)'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2784](https://www.sqlalchemy.org/trac/ticket/2784)
- en: postgresql
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added support for PostgreSQL’s traditional SUBSTRING function syntax, renders
    as “SUBSTRING(x FROM y FOR z)” when regular `func.substring()` is used. Courtesy
    Gunnlaugur Þór Briem.
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对 PostgreSQL 传统 SUBSTRING 函数语法的支持，当使用常规的`func.substring()`时，呈现为“SUBSTRING(x
    FROM y FOR z)”。感谢 Gunnlaugur Þór Briem。
- en: 'References: [#2676](https://www.sqlalchemy.org/trac/ticket/2676)'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2676](https://www.sqlalchemy.org/trac/ticket/2676)
- en: mysql
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Updates to MySQL reserved words for versions 5.5, 5.6, courtesy Hanno Schlichting.
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新 MySQL 5.5、5.6 版本的保留字，感谢 Hanno Schlichting。
- en: 'References: [#2791](https://www.sqlalchemy.org/trac/ticket/2791)'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2791](https://www.sqlalchemy.org/trac/ticket/2791)
- en: tests
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [bug]**'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[tests] [bug]**'
- en: Fixed an import of “logging” in test_execute which was not working on some linux
    platforms.
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在某些 Linux 平台上无法在 test_execute 中导入“logging”的问题。
- en: 'References: [#2669](https://www.sqlalchemy.org/trac/ticket/2669), [pull request
    41](https://github.com/sqlalchemy/sqlalchemy/pull/41)'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2669](https://www.sqlalchemy.org/trac/ticket/2669)，[pull request 41](https://github.com/sqlalchemy/sqlalchemy/pull/41)
- en: 0.7.10
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.7.10
- en: 'Released: Thu Feb 7 2013'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2013年2月7日 星期四
- en: orm
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed potential memory leak which could occur if an arbitrary number of [`sessionmaker`](../orm/session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") objects were created. The anonymous subclass created
    by the sessionmaker, when dereferenced, would not be garbage collected due to
    remaining class-level references from the event package. This issue also applies
    to any custom system that made use of ad-hoc subclasses in conjunction with an
    event dispatcher.
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了潜在的内存泄漏问题，如果创建了任意数量的[`sessionmaker`](../orm/session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker")对象。当解除引用时，sessionmaker 创建的匿名子类由于事件包中保留的类级引用而无法被垃圾回收。这个问题也适用于任何与事件调度程序一起使用临时子类的自定义系统。
- en: 'References: [#2650](https://www.sqlalchemy.org/trac/ticket/2650)'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2650](https://www.sqlalchemy.org/trac/ticket/2650)
- en: '**[orm] [bug]**'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: '[`Query.merge_result()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.merge_result
    "sqlalchemy.orm.Query.merge_result") can now load rows from an outer join where
    an entity may be `None` without throwing an error.'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Query.merge_result()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.merge_result
    "sqlalchemy.orm.Query.merge_result") 现在可以从外连接加载行，其中一个实体可能为`None`而不会抛出错误。'
- en: 'References: [#2640](https://www.sqlalchemy.org/trac/ticket/2640)'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2640](https://www.sqlalchemy.org/trac/ticket/2640)
- en: '**[orm] [bug]**'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The [`MutableComposite`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableComposite
    "sqlalchemy.ext.mutable.MutableComposite") type did not allow for the [`MutableBase.coerce()`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableBase.coerce
    "sqlalchemy.ext.mutable.MutableBase.coerce") method to be used, even though the
    code seemed to indicate this intent, so this now works and a brief example is
    added. As a side-effect, the mechanics of this event handler have been changed
    so that new [`MutableComposite`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableComposite
    "sqlalchemy.ext.mutable.MutableComposite") types no longer add per-type global
    event handlers. Also in 0.8.0b2.
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`MutableComposite`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableComposite
    "sqlalchemy.ext.mutable.MutableComposite") 类型不允许使用[`MutableBase.coerce()`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableBase.coerce
    "sqlalchemy.ext.mutable.MutableBase.coerce") 方法，尽管代码似乎表明了这个意图，所以现在可以使用，并添加了一个简短的示例。作为副作用，此事件处理程序的机制已更改，以便新的[`MutableComposite`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableComposite
    "sqlalchemy.ext.mutable.MutableComposite") 类型不再添加每种类型的全局事件处理程序。也适用于 0.8.0b2 版本。'
- en: 'References: [#2624](https://www.sqlalchemy.org/trac/ticket/2624)'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2624](https://www.sqlalchemy.org/trac/ticket/2624)
- en: '**[orm] [bug]**'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed Session accounting bug whereby replacing a deleted object in the identity
    map with another object of the same primary key would raise a “conflicting state”
    error on rollback(), if the replaced primary key were established either via non-unitofwork-established
    INSERT statement or by primary key switch of another instance.
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Session计算错误的bug，替换已删除对象在身份映射中的另一个具有相同主键的对象会在rollback()时引发“冲突状态”错误，如果被替换的主键是通过非工作单位建立的INSERT语句或通过另一个实例的主键切换来建立的。
- en: 'References: [#2583](https://www.sqlalchemy.org/trac/ticket/2583)'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2583](https://www.sqlalchemy.org/trac/ticket/2583)
- en: engine
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") to correctly use the given [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"), if given, without opening a second connection
    from that connection’s [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine").
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect")在正确使用给定的[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")时不会打开第二个连接的错误，如果给定的话。
- en: 'References: [#2604](https://www.sqlalchemy.org/trac/ticket/2604)'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2604](https://www.sqlalchemy.org/trac/ticket/2604)
- en: sql
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Backported adjustment to `__repr__` for [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") to 0.7, allows [`PickleType`](../core/type_basics.html#sqlalchemy.types.PickleType
    "sqlalchemy.types.PickleType") to produce a clean `repr()` to help with Alembic.
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将`__repr__`调整为[`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")的调整反向移植到0.7，允许[`PickleType`](../core/type_basics.html#sqlalchemy.types.PickleType
    "sqlalchemy.types.PickleType")生成干净的`repr()`以帮助Alembic。
- en: 'References: [#2584](https://www.sqlalchemy.org/trac/ticket/2584), [#2594](https://www.sqlalchemy.org/trac/ticket/2594)'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2584](https://www.sqlalchemy.org/trac/ticket/2584), [#2594](https://www.sqlalchemy.org/trac/ticket/2594)
- en: '**[sql] [bug]**'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where [`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata") would fail if a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") had both a foreign key as well as an alternate “.key”
    name for the column.
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata")的错误，如果[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")同时具有外键和替代的“.key”名称，则会失败。
- en: 'References: [#2643](https://www.sqlalchemy.org/trac/ticket/2643)'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2643](https://www.sqlalchemy.org/trac/ticket/2643)
- en: '**[sql] [bug]**'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where using server_onupdate=<FetchedValue|DefaultClause> without passing
    the “for_update=True” flag would apply the default object to the server_default,
    blowing away whatever was there. The explicit for_update=True argument shouldn’t
    be needed with this usage (especially since the documentation shows an example
    without it being used) so it is now arranged internally using a copy of the given
    default object, if the flag isn’t set to what corresponds to that argument.
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在没有传递“for_update=True”标志的情况下使用server_onupdate=<FetchedValue|DefaultClause>时会将默认对象应用于server_default的错误，从而清除了那里的任何内容。不应该使用显式的for_update=True参数来进行此使用（特别是因为文档显示了一个不使用该参数的示例），因此现在如果该标志未设置为对应于该参数的内容，则会内部使用给定默认对象的副本。
- en: 'References: [#2631](https://www.sqlalchemy.org/trac/ticket/2631)'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2631](https://www.sqlalchemy.org/trac/ticket/2631)
- en: '**[sql] [gae] [mysql]**'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [gae] [mysql]**'
- en: Added a conditional import to the `gaerdbms` dialect which attempts to import
    rdbms_apiproxy vs. rdbms_googleapi to work on both dev and production platforms.
    Also now honors the `instance` attribute. Courtesy Sean Lynch. Also backported
    enhancements to allow username/password as well as fixing error code interpretation
    from 0.8.
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在`gaerdbms`方言中添加了条件导入，尝试导入rdbms_apiproxy和rdbms_googleapi以在开发和生产平台上工作。现在还支持`instance`属性。感谢Sean
    Lynch的贡献。还将增强功能反向移植，允许用户名/密码，并修复了从0.8开始的错误代码解释。
- en: 'References: [#2649](https://www.sqlalchemy.org/trac/ticket/2649)'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2649](https://www.sqlalchemy.org/trac/ticket/2649)
- en: mysql
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [feature]**'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [feature]**'
- en: Added “raise_on_warnings” flag to OurSQL dialect.
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在OurSQL方言中添加了“raise_on_warnings”标志。
- en: 'References: [#2523](https://www.sqlalchemy.org/trac/ticket/2523)'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2523](https://www.sqlalchemy.org/trac/ticket/2523)
- en: '**[mysql] [feature]**'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [feature]**'
- en: Added “read_timeout” flag to MySQLdb dialect.
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在MySQLdb方言中添加了“read_timeout”标志。
- en: 'References: [#2554](https://www.sqlalchemy.org/trac/ticket/2554)'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2554](https://www.sqlalchemy.org/trac/ticket/2554)
- en: sqlite
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: More adjustment to this SQLite related issue which was released in 0.7.9, to
    intercept legacy SQLite quoting characters when reflecting foreign keys. In addition
    to intercepting double quotes, other quoting characters such as brackets, backticks,
    and single quotes are now also intercepted.
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 针对这个与 SQLite 相关的问题作了更多调整，该问题已在 0.7.9 中发布，以拦截反映外键时的旧 SQLite 引用字符。除了拦截双引号之外，现在还拦截其他引用字符，如括号、反引号和单引号。
- en: 'References: [#2568](https://www.sqlalchemy.org/trac/ticket/2568)'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2568](https://www.sqlalchemy.org/trac/ticket/2568)
- en: mssql
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed bug whereby using “key” with Column in conjunction with “schema” for the
    owning Table would fail to locate result rows due to the MSSQL dialect’s “schema
    rendering” logic’s failure to take .key into account.
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即在与“schema”结合使用 Column 的“key”时，对于拥有表的“schema”会由于 MSSQL 方言的“schema 渲染”逻辑未考虑
    .key 而无法定位结果行的错误。
- en: '**[mssql] [bug]**'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Added a Py3K conditional around unnecessary .decode() call in mssql information
    schema, fixes reflection in Py3k.
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 mssql 信息模式中，增加了 Py3K 条件，围绕不必要的 .decode() 调用，修复了 Py3k 中反射的问题。
- en: 'References: [#2638](https://www.sqlalchemy.org/trac/ticket/2638)'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2638](https://www.sqlalchemy.org/trac/ticket/2638)
- en: oracle
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: The Oracle LONG type, while an unbounded text type, does not appear to use the
    cx_Oracle.LOB type when result rows are returned, so the dialect has been repaired
    to exclude LONG from having cx_Oracle.LOB filtering applied.
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Oracle LONG 类型，虽然是一个无界文本类型，但在返回结果行时似乎不使用 cx_Oracle.LOB 类型，因此方言已修复，以排除 LONG 从中获得
    cx_Oracle.LOB 过滤的情况。
- en: 'References: [#2620](https://www.sqlalchemy.org/trac/ticket/2620)'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2620](https://www.sqlalchemy.org/trac/ticket/2620)
- en: '**[oracle] [bug]**'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Repaired the usage of `.prepare()` in conjunction with cx_Oracle so that a return
    value of `False` will result in no call to `connection.commit()`, hence avoiding
    “no transaction” errors. Two-phase transactions have now been shown to work in
    a rudimental fashion with SQLAlchemy and cx_oracle, however are subject to caveats
    observed with the driver; check the documentation for details.
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在与 cx_Oracle 结合使用 `.prepare()` 时的用法，以便当返回值为 `False` 时，不会调用 `connection.commit()`，从而避免“无事务”错误。已经证明了
    SQLAlchemy 和 cx_oracle 与两阶段事务一起以基本方式工作，但受到与驱动程序观察到的警告的限制；请查看文档了解详情。
- en: 'References: [#2611](https://www.sqlalchemy.org/trac/ticket/2611)'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2611](https://www.sqlalchemy.org/trac/ticket/2611)
- en: '**[oracle] [bug]**'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: changed the list of cx_oracle types that are excluded from the setinputsizes()
    step to only include STRING and UNICODE; CLOB and NCLOB are removed. This is to
    work around cx_oracle behavior which is broken for the executemany() call. In
    0.8, this same change is applied however it is also configurable via the exclude_setinputsizes
    argument.
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更改了从 setinputsizes() 步骤中排除的 cx_oracle 类型列表，现在只包括 STRING 和 UNICODE；CLOB 和 NCLOB
    已移除。这是为了解决 cx_oracle 对 executemany() 调用的行为问题。在 0.8 中，相同的更改也适用，但也可以通过 exclude_setinputsizes
    参数进行配置。
- en: 'References: [#2561](https://www.sqlalchemy.org/trac/ticket/2561)'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2561](https://www.sqlalchemy.org/trac/ticket/2561)
- en: 0.7.9
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.7.9
- en: 'Released: Mon Oct 01 2012'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：Mon Oct 01 2012
- en: orm
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug mostly local to new AbstractConcreteBase helper where the “type” attribute
    from the superclass would not be overridden on the subclass to produce the “reserved
    for base” error message, instead placing a do-nothing attribute there. This was
    inconsistent vs. using ConcreteBase as well as all the behavior of classical concrete
    mappings, where the “type” column from the polymorphic base would be explicitly
    disabled on subclasses, unless overridden explicitly.
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个主要局限于新 AbstractConcreteBase 助手的错误，其中来自超类的“type”属性不会被子类覆盖，从而产生“保留给基类”的错误消息，而是在那里放置一个无操作属性。这与使用
    ConcreteBase 以及所有经典的具体映射行为不一致，在这些行为中，多态基类的“type”列会在子类上明确禁用，除非显式覆盖。
- en: '**[orm] [bug]**'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: A warning is emitted when lazy=’dynamic’ is combined with uselist=False. This
    is an exception raise in 0.8.
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当 lazy=’dynamic’ 与 uselist=False 结合时，会发出警告。这在 0.8 中会引发异常。
- en: '**[orm] [bug]**'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug whereby user error in related-object assignment could cause recursion
    overflow if the assignment triggered a backref of the same name as a bi-directional
    attribute on the incorrect class to the same target. An informative error is raised
    now.
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即相关对象赋值中的用户错误可能导致递归溢出，如果赋值触发与错误类上的双向属性同名的 backref 到相同的目标。现在会引发一个信息性错误。
- en: '**[orm] [bug]**'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where incorrect type information would be passed when the ORM would
    bind the “version” column, when using the “version” feature. Tests courtesy Daniel
    Miller.
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当ORM绑定“version”列时传递错误类型信息的bug，当使用“version”功能时。测试感谢Daniel Miller。
- en: 'References: [#2539](https://www.sqlalchemy.org/trac/ticket/2539)'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2539](https://www.sqlalchemy.org/trac/ticket/2539)
- en: '**[orm] [bug]**'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Extra logic has been added to the “flush” that occurs within Session.commit(),
    such that the extra state added by an after_flush() or after_flush_postexec()
    hook is also flushed in a subsequent flush, before the “commit” completes. Subsequent
    calls to flush() will continue until the after_flush hooks stop adding new state.
    An “overflow” counter of 100 is also in place, in the event of a broken after_flush()
    hook adding new content each time.
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在Session.commit()中发生的“flush”中添加了额外的逻辑，以便在随后的flush之前刷新由after_flush()或after_flush_postexec()钩子添加的额外状态，然后“commit”完成。后续调用flush()将继续，直到after_flush钩子停止添加新状态。在事件after_flush()钩子每次添加新内容时，还设置了一个“overflow”计数器为100。
- en: 'References: [#2566](https://www.sqlalchemy.org/trac/ticket/2566)'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2566](https://www.sqlalchemy.org/trac/ticket/2566)
- en: engine
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [feature]**'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: Dramatic improvement in memory usage of the event system; instance-level collections
    are no longer created for a particular type of event until instance-level listeners
    are established for that event.
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 事件系统的内存使用情况显著改善；直到为该事件建立了实例级别的监听器，才会为特定类型的事件创建实例级别集合。
- en: 'References: [#2516](https://www.sqlalchemy.org/trac/ticket/2516)'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2516](https://www.sqlalchemy.org/trac/ticket/2516)
- en: '**[engine] [bug]**'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed bug whereby a disconnect detect + dispose that occurs when the QueuePool
    has threads waiting for connections would leave those threads waiting for the
    duration of the timeout on the old pool (or indefinitely if timeout was disabled).
    The fix now notifies those waiters with a special exception case and has them
    move onto the new pool.
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当QueuePool有线程等待连接时发生的disconnect detect + dispose bug，会使这些线程等待旧池的超时时间（如果禁用超时，则会无限期等待）。现在修复了这个问题，通过特殊异常情况通知这些等待者，并让它们转移到新池。
- en: 'References: [#2522](https://www.sqlalchemy.org/trac/ticket/2522)'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2522](https://www.sqlalchemy.org/trac/ticket/2522)
- en: '**[engine] [bug]**'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Added gaerdbms import to mysql/__init__.py, the absence of which was preventing
    the new GAE dialect from being loaded.
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在mysql/__init__.py中添加了gaerdbms导入，缺少此导入会导致无法加载新的GAE方言。
- en: 'References: [#2529](https://www.sqlalchemy.org/trac/ticket/2529)'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2529](https://www.sqlalchemy.org/trac/ticket/2529)
- en: '**[engine] [bug]**'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed cextension bug whereby the “ambiguous column error” would fail to function
    properly if the given index were a Column object and not a string. Note there
    are still some column-targeting issues here which are fixed in 0.8.
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了cextension bug，其中如果给定的索引是Column对象而不是字符串，则“模糊列错误”将无法正常工作。请注意，这里仍然存在一些列定位问题，在0.8中已修复。
- en: 'References: [#2553](https://www.sqlalchemy.org/trac/ticket/2553)'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2553](https://www.sqlalchemy.org/trac/ticket/2553)
- en: '**[engine] [bug]**'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed the repr() of Enum to include the “name” and “native_enum” flags. Helps
    Alembic autogenerate.
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Enum的repr()，包括“name”和“native_enum”标志。有助于Alembic自动生成。
- en: sql
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed the DropIndex construct to support an Index associated with a Table in
    a remote schema.
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了DropIndex构造以支持与远程模式中的表关联的索引。
- en: 'References: [#2571](https://www.sqlalchemy.org/trac/ticket/2571)'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2571](https://www.sqlalchemy.org/trac/ticket/2571)
- en: '**[sql] [bug]**'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in over() construct whereby passing an empty list for either partition_by
    or order_by, as opposed to None, would fail to generate correctly. Courtesy Gunnlaugur
    Þór Briem.
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了over()构造中的bug，其中将空列表传递给partition_by或order_by，而不是None，将无法正确生成。感谢Gunnlaugur
    Þór Briem。
- en: 'References: [#2574](https://www.sqlalchemy.org/trac/ticket/2574)'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2574](https://www.sqlalchemy.org/trac/ticket/2574)
- en: '**[sql] [bug]**'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed CTE bug whereby positional bound parameters present in the CTEs themselves
    would corrupt the overall ordering of bound parameters. This primarily affected
    SQL Server as the platform with positional binds + CTE support.
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了CTE bug，其中CTE本身存在位置绑定参数会破坏绑定参数的整体排序。这主要影响支持位置绑定+ CTE支持的SQL Server平台。
- en: 'References: [#2521](https://www.sqlalchemy.org/trac/ticket/2521)'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2521](https://www.sqlalchemy.org/trac/ticket/2521)
- en: '**[sql] [bug]**'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed more un-intuitivenesses in CTEs which prevented referring to a CTE in
    a union of itself without it being aliased. CTEs now render uniquely on name,
    rendering the outermost CTE of a given name only - all other references are rendered
    just as the name. This even includes other CTE/SELECTs that refer to different
    versions of the same CTE object, such as a SELECT or a UNION ALL of that SELECT.
    We are somewhat loosening the usual link between object identity and lexical identity
    in this case. A true name conflict between two unrelated CTEs now raises an error.
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了CTE中更多的不直观问题，这些问题阻止了在不使用别名的情况下引用CTE自身的联合。现在，CTE根据名称唯一呈现，仅呈现给定名称的最外层CTE -
    所有其他引用只是作为名称呈现。这甚至包括引用不同版本的相同CTE对象的其他CTE/SELECT，比如引用该SELECT的SELECT或UNION ALL。在这种情况下，我们在对象标识和词法标识之间有些放松通常的联系。两个不相关的CTE之间的真实名称冲突现在会引发错误。
- en: '**[sql] [bug]**'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: quoting is applied to the column names inside the WITH RECURSIVE clause of a
    common table expression according to the quoting rules for the originating Column.
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在通用表达式的WITH RECURSIVE子句中，对列名应用引用规则，根据原始列的引用规则进行引用。
- en: 'References: [#2512](https://www.sqlalchemy.org/trac/ticket/2512)'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2512](https://www.sqlalchemy.org/trac/ticket/2512)
- en: '**[sql] [bug]**'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed regression introduced in 0.7.6 whereby the FROM list of a SELECT statement
    could be incorrect in certain “clone+replace” scenarios.
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在0.7.6中引入的回归问题，即在某些“clone+replace”场景中，SELECT语句的FROM列表可能不正确。
- en: 'References: [#2518](https://www.sqlalchemy.org/trac/ticket/2518)'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2518](https://www.sqlalchemy.org/trac/ticket/2518)
- en: '**[sql] [bug]**'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug whereby usage of a UNION or similar inside of an embedded subquery
    would interfere with result-column targeting, in the case that a result-column
    had the same ultimate name as a name inside the embedded UNION.
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '修复了在嵌���子查询中使用UNION或类似操作会干扰结果列定位的错误，即在结果列与嵌套UNION中的名称相同时。 '
- en: 'References: [#2552](https://www.sqlalchemy.org/trac/ticket/2552)'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2552](https://www.sqlalchemy.org/trac/ticket/2552)
- en: '**[sql] [bug]**'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed a regression since 0.6 regarding result-row targeting. It should be possible
    to use a select() statement with string based columns in it, that is select([‘id’,
    ‘name’]).select_from(‘mytable’), and have this statement be targetable by Column
    objects with those names; this is the mechanism by which query(MyClass).from_statement(some_statement)
    works. At some point the specific case of using select([‘id’]), which is equivalent
    to select([literal_column(‘id’)]), stopped working here, so this has been re-instated
    and of course tested.
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自0.6版本以来修复了一个关于结果行定位的回归问题。现在可以在select()语句中使用基于字符串的列，比如select(['id', 'name']).select_from('mytable')，并且可以通过具有这些名称的Column对象来定位该语句；这是query(MyClass).from_statement(some_statement)工作的机制。在某个时候，使用select(['id'])这种特定情况停止工作了，这等同于select([literal_column('id')])，所以这已经重新启用并当然进行了测试。
- en: 'References: [#2558](https://www.sqlalchemy.org/trac/ticket/2558)'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2558](https://www.sqlalchemy.org/trac/ticket/2558)
- en: '**[sql] [bug]**'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Added missing operators is_(), isnot() to the ColumnOperators base, so that
    these long-available operators are present as methods like all the other operators.
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将is_()和isnot()操作符添加到ColumnOperators基类中，以便这些长期可用的操作符作为其他操作符一样存在。
- en: 'References: [#2544](https://www.sqlalchemy.org/trac/ticket/2544)'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2544](https://www.sqlalchemy.org/trac/ticket/2544)
- en: postgresql
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Columns in reflected primary key constraint are now returned in the order in
    which the constraint itself defines them, rather than how the table orders them.
    Courtesy Gunnlaugur Þór Briem..
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 反射主键约束中的列现在按照约束本身定义的顺序返回，而不是表的顺序。感谢Gunnlaugur Þór Briem。
- en: 'References: [#2531](https://www.sqlalchemy.org/trac/ticket/2531)'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2531](https://www.sqlalchemy.org/trac/ticket/2531)
- en: '**[postgresql] [bug]**'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added ‘terminating connection’ to the list of messages we use to detect a disconnect
    with PG, which appears to be present in some versions when the server is restarted.
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将“terminating connection”添加到我们用于检测与PG断开连接的消息列表中，当服务器重新启动时，某些版本中似乎存在这种情况。
- en: 'References: [#2570](https://www.sqlalchemy.org/trac/ticket/2570)'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2570](https://www.sqlalchemy.org/trac/ticket/2570)
- en: mysql
  id: totrans-169
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Updated mysqlconnector interface to use updated “client flag” and “charset”
    APIs, courtesy David McNelis.
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新了mysqlconnector接口，使用了更新的“client flag”和“charset”API，感谢David McNelis。
- en: sqlite
  id: totrans-172
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [feature]**'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [feature]**'
- en: Added support for the localtimestamp() SQL function implemented in SQLite, courtesy
    Richard Mitchell.
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对SQLite中实现的localtimestamp() SQL函数的支持，感谢Richard Mitchell。
- en: '**[sqlite] [bug]**'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Adjusted a very old bugfix which attempted to work around a SQLite issue that
    itself was “fixed” as of sqlite 3.6.14, regarding quotes surrounding a table name
    when using the “foreign_key_list” pragma. The fix has been adjusted to not interfere
    with quotes that are *actually in the name* of a column or table, to as much a
    degree as possible; sqlite still doesn’t return the correct result for foreign_key_list()
    if the target table actually has quotes surrounding its name, as *part* of its
    name (i.e. “””mytable”””).
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了一个非常古老的bug修复，该修复试图解决一个SQLite问题，而该问题本身已在sqlite 3.6.14时“修复”，即在使用“foreign_key_list”pragma时，表名周围的引号问题。修复已调整为不干扰实际上在列或表的名称中*的引号，尽可能大程度地；如果目标表实际上在其名称周围有引号（即“”“mytable”””），则sqlite仍不会正确返回foreign_key_list()的结果。
- en: 'References: [#2568](https://www.sqlalchemy.org/trac/ticket/2568)'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#2568](https://www.sqlalchemy.org/trac/ticket/2568)
- en: '**[sqlite] [bug]**'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Adjusted column default reflection code to convert non-string values to string,
    to accommodate old SQLite versions that don’t deliver default info as a string.
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了列默认反射代码，将非字符串值转换为字符串，以适应旧版本SQLite不将默认信息作为字符串提供的情况。
- en: 'References: [#2265](https://www.sqlalchemy.org/trac/ticket/2265)'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#2265](https://www.sqlalchemy.org/trac/ticket/2265)
- en: mssql
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed compiler bug whereby using a correlated subquery within an ORDER BY would
    fail to render correctly if the statement also used LIMIT/OFFSET, due to mis-rendering
    within the ROW_NUMBER() OVER clause. Fix courtesy sayap
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了编译器错误，其中在ORDER BY中使用相关子查询将无法正确呈现，如果语句还使用了LIMIT/OFFSET，这是由于在ROW_NUMBER() OVER子句中的错误呈现导致的。修复由
    sayap 提供。
- en: 'References: [#2538](https://www.sqlalchemy.org/trac/ticket/2538)'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#2538](https://www.sqlalchemy.org/trac/ticket/2538)
- en: '**[mssql] [bug]**'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed compiler bug whereby a given select() would be modified if it had an “offset”
    attribute, causing the construct to not compile correctly a second time.
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了编译器错误，其中给定的select()如果具有“offset”属性，则会修改它，导致构造在第二次编译时无法正确编译。
- en: 'References: [#2545](https://www.sqlalchemy.org/trac/ticket/2545)'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#2545](https://www.sqlalchemy.org/trac/ticket/2545)
- en: '**[mssql] [bug]**'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed bug where reflection of primary key constraint would double up columns
    if the same constraint/table existed in multiple schemas.
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了主键约束的反射bug，如果相同的约束/表存在于多个模式中，则会使列加倍。
- en: 0.7.8
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.7.8
- en: 'Released: Sat Jun 16 2012'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2012年6月16日
- en: orm
  id: totrans-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: The ‘objects’ argument to flush() is no longer deprecated, as some valid use
    cases have been identified.
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: flush()的‘objects’参数不再被弃用，因为已经确定了一些有效的用例。
- en: '**[orm] [bug]**'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug whereby subqueryload() from a polymorphic mapping to a target would
    incur a new invocation of the query for each distinct class encountered in the
    polymorphic result.
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了subqueryload()从多态映射到目标的问题，将为多态结果中遇到的每个不同的类产生一个新的查询调用。
- en: 'References: [#2480](https://www.sqlalchemy.org/trac/ticket/2480)'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#2480](https://www.sqlalchemy.org/trac/ticket/2480)
- en: '**[orm] [bug]**'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in declarative whereby the precedence of columns in a joined-table,
    composite column (typically for id) would fail to be correct if the columns contained
    names distinct from their attribute names. This would cause things like primaryjoin
    conditions made against the entity attributes to be incorrect. Related to as this
    was supposed to be part of that, this is.
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在声明中的bug，其中加入表的列的优先级（通常是用于id的复合列）如果列包含与其属性名称不同的名称，则将无法正确。这将导致针对实体属性的主键条件不正确。与此相关，因为这应该是那个的一部分，这是。
- en: 'References: [#1892](https://www.sqlalchemy.org/trac/ticket/1892), [#2491](https://www.sqlalchemy.org/trac/ticket/2491)'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#1892](https://www.sqlalchemy.org/trac/ticket/1892)，[#2491](https://www.sqlalchemy.org/trac/ticket/2491)
- en: '**[orm] [bug]**'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed identity_key() function which was not accepting a scalar argument for
    the identity. .
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了identity_key()函数不接受标量参数作为标识的问题。
- en: 'References: [#2508](https://www.sqlalchemy.org/trac/ticket/2508)'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#2508](https://www.sqlalchemy.org/trac/ticket/2508)
- en: '**[orm] [bug]**'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug whereby populate_existing option would not propagate to subquery eager
    loaders. .
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了populate_existing选项不会传播到子查询急切加载程序的bug。
- en: 'References: [#2497](https://www.sqlalchemy.org/trac/ticket/2497)'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#2497](https://www.sqlalchemy.org/trac/ticket/2497)
- en: engine
  id: totrans-207
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [bug]**'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed memory leak in C version of result proxy whereby DBAPIs which don’t deliver
    pure Python tuples for result rows would fail to decrement refcounts correctly.
    The most prominently affected DBAPI is pyodbc.
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了结果代理的C版本中的内存泄漏bug，即不提供纯Python元组作为结果行的DBAPI将无法正确减少引用计数。受影响最严重的DBAPI是pyodbc。
- en: 'References: [#2489](https://www.sqlalchemy.org/trac/ticket/2489)'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2489](https://www.sqlalchemy.org/trac/ticket/2489)
- en: '**[engine] [bug]**'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed bug affecting Py3K whereby string positional parameters passed to engine/connection
    execute() would fail to be interpreted correctly, due to __iter__ being present
    on Py3K string..
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了影响Py3K的bug，即传递给engine/connection execute()的字符串位置参数将无法被正确解释，因为Py3K字符串上存在__iter__。
- en: 'References: [#2503](https://www.sqlalchemy.org/trac/ticket/2503)'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2503](https://www.sqlalchemy.org/trac/ticket/2503)
- en: sql
  id: totrans-214
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: added BIGINT to types.__all__, BIGINT, BINARY, VARBINARY to sqlalchemy module
    namespace, plus test to ensure this breakage doesn’t occur again.
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将BIGINT添加到types.__all__，将BIGINT、BINARY、VARBINARY添加到sqlalchemy模块命名空间，以及确保此破坏不会再次发���的测试。
- en: 'References: [#2499](https://www.sqlalchemy.org/trac/ticket/2499)'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2499](https://www.sqlalchemy.org/trac/ticket/2499)
- en: '**[sql] [bug]**'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Repaired common table expression rendering to function correctly when the SELECT
    statement contains UNION or other compound expressions, courtesy btbuilder.
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当SELECT语句包含UNION或其他复合表达式时，公共表达式渲染无法正确运行的bug，感谢btbuilder。
- en: 'References: [#2490](https://www.sqlalchemy.org/trac/ticket/2490)'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2490](https://www.sqlalchemy.org/trac/ticket/2490)
- en: '**[sql] [bug]**'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug whereby append_column() wouldn’t function correctly on a cloned select()
    construct, courtesy Gunnlaugur Þór Briem.
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在克隆的select()构造上append_column()无法正确运行的bug，感谢 Gunnlaugur Þór Briem。
- en: 'References: [#2482](https://www.sqlalchemy.org/trac/ticket/2482)'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2482](https://www.sqlalchemy.org/trac/ticket/2482)
- en: postgresql
  id: totrans-224
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: removed unnecessary table clause when reflecting enums,. Courtesy Gunnlaugur
    Þór Briem.
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了在反射枚举时不必要的表子句，感谢 Gunnlaugur Þór Briem。
- en: 'References: [#2510](https://www.sqlalchemy.org/trac/ticket/2510)'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2510](https://www.sqlalchemy.org/trac/ticket/2510)
- en: mysql
  id: totrans-228
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [feature]**'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [feature]**'
- en: Added a new dialect for Google App Engine. Courtesy Richie Foreman.
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的Google App Engine方言。感谢 Richie Foreman。
- en: 'References: [#2484](https://www.sqlalchemy.org/trac/ticket/2484)'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2484](https://www.sqlalchemy.org/trac/ticket/2484)
- en: oracle
  id: totrans-232
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Added ROWID to oracle.*.
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向oracle.*添加了ROWID。
- en: 'References: [#2483](https://www.sqlalchemy.org/trac/ticket/2483)'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2483](https://www.sqlalchemy.org/trac/ticket/2483)
- en: 0.7.7
  id: totrans-236
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.7.7
- en: 'Released: Sat May 05 2012'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2012年5月5日星期六
- en: orm
  id: totrans-238
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added prefix_with() method to Query, calls upon select().prefix_with() to allow
    placement of MySQL SELECT directives in statements. Courtesy Diana Clarke
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向Query添加了prefix_with()方法，调用select().prefix_with()以允许在语句中放置MySQL SELECT指令。感谢
    Diana Clarke。
- en: 'References: [#2443](https://www.sqlalchemy.org/trac/ticket/2443)'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2443](https://www.sqlalchemy.org/trac/ticket/2443)
- en: '**[orm] [feature]**'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new flag to @validates include_removes. When True, collection remove and
    attribute del events will also be sent to the validation function, which accepts
    an additional argument “is_remove” when this flag is used.
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新标志@validates include_removes。当为True时，集合删除和属性删除事件也将发送到验证函数，当使用此标志时，该函数将接受额外参数“is_remove”。
- en: '**[orm] [bug]**'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue in unit of work whereby setting a non-None self-referential many-to-one
    relationship to None would fail to persist the change if the former value was
    not already loaded..
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了工作单元中的问题，即将非None的自引用多对一关系设置为None时，如果前一个值尚未加载，则无法持久化更改。
- en: 'References: [#2477](https://www.sqlalchemy.org/trac/ticket/2477)'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2477](https://www.sqlalchemy.org/trac/ticket/2477)
- en: '**[orm] [bug]**'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in 0.7.6 introduced by whereby column_mapped_collection used against
    columns that were mapped as joins or other indirect selectables would fail to
    function.
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了0.7.6中引入的错误，即针对被映射为连接或其他间接可选择的列映射集合在使用时会失败的bug。
- en: 'References: [#2409](https://www.sqlalchemy.org/trac/ticket/2409)'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2409](https://www.sqlalchemy.org/trac/ticket/2409)
- en: '**[orm] [bug]**'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug whereby polymorphic_on column that’s not otherwise mapped on the class
    would be incorrectly included in a merge() operation, raising an error.
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即在merge()操作中不正确地包含未在类中映射的polymorphic_on列，导致错误。
- en: 'References: [#2449](https://www.sqlalchemy.org/trac/ticket/2449)'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2449](https://www.sqlalchemy.org/trac/ticket/2449)
- en: '**[orm] [bug]**'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in expression annotation mechanics which could lead to incorrect rendering
    of SELECT statements with aliases and joins, particularly when using column_property().
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了表达式注释机制中的错误，可能导致使用 column_property() 时，SELECT 语句的别名和连接渲染不正确。
- en: 'References: [#2453](https://www.sqlalchemy.org/trac/ticket/2453)'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2453](https://www.sqlalchemy.org/trac/ticket/2453)
- en: '**[orm] [bug]**'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug which would prevent OrderingList from being pickleable. Courtesy Jeff
    Dairiki
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 OrderingList 无法被 pickle 的 bug。感谢 Jeff Dairiki
- en: 'References: [#2454](https://www.sqlalchemy.org/trac/ticket/2454)'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2454](https://www.sqlalchemy.org/trac/ticket/2454)
- en: '**[orm] [bug]**'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in relationship comparisons whereby calling unimplemented methods
    like SomeClass.somerelationship.like() would produce a recursion overflow, instead
    of NotImplementedError.
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关系比较中的 bug，调用未实现的方法如 SomeClass.somerelationship.like() 会产生递归溢出，而不是 NotImplementedError。
- en: sql
  id: totrans-261
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added new connection event dbapi_error(). Is called for all DBAPI-level errors
    passing the original DBAPI exception before SQLAlchemy modifies the state of the
    cursor.
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的连接事件 dbapi_error()。对于所有 DBAPI 级别的错误，传递原始的 DBAPI 异常，在 SQLAlchemy 修改游标状态之前调用。
- en: '**[sql] [bug]**'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Removed warning when Index is created with no columns; while this might not
    be what the user intended, it is a valid use case as an Index could be a placeholder
    for just an index of a certain name.
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当 Index 创建时没有列时，移除警告；虽然这可能不是用户想要的，但作为一个 Index 可能只是某个名称的索引的占位符是一个有效的用例。
- en: '**[sql] [bug]**'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: If conn.begin() fails when calling “with engine.begin()”, the newly acquired
    Connection is closed explicitly before propagating the exception onward normally.
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果在调用“with engine.begin()”时 conn.begin() 失败，则新获取的 Connection 在正常传播异常之前会被显式关闭。
- en: '**[sql] [bug]**'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Add BINARY, VARBINARY to types.__all__.
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 BINARY、VARBINARY 添加到 types.__all__ 中。
- en: 'References: [#2474](https://www.sqlalchemy.org/trac/ticket/2474)'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2474](https://www.sqlalchemy.org/trac/ticket/2474)
- en: postgresql
  id: totrans-271
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: 'Added new for_update/with_lockmode() options for PostgreSQL: for_update=”read”/
    with_lockmode(“read”), for_update=”read_nowait”/ with_lockmode(“read_nowait”).
    These emit “FOR SHARE” and “FOR SHARE NOWAIT”, respectively. Courtesy Diana Clarke'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 PostgreSQL 添加了新的 for_update/with_lockmode() 选项：for_update=”read”/ with_lockmode(“read”)，for_update=”read_nowait”/
    with_lockmode(“read_nowait”)。这些分别发出“FOR SHARE”和“FOR SHARE NOWAIT”。感谢 Diana Clarke
- en: 'References: [#2445](https://www.sqlalchemy.org/trac/ticket/2445)'
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2445](https://www.sqlalchemy.org/trac/ticket/2445)
- en: '**[postgresql] [bug]**'
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: removed unnecessary table clause when reflecting domains.
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在反射域时删除了不必要的表子句。
- en: 'References: [#2473](https://www.sqlalchemy.org/trac/ticket/2473)'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2473](https://www.sqlalchemy.org/trac/ticket/2473)
- en: mysql
  id: totrans-278
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed bug whereby column name inside of “KEY” clause for autoincrement composite
    column with InnoDB would double quote a name that’s a reserved word. Courtesy
    Jeff Dairiki.
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 InnoDB 中自动增量复合列的“KEY”子句中的列名会双引号保留字的错误。感谢 Jeff Dairiki。
- en: 'References: [#2460](https://www.sqlalchemy.org/trac/ticket/2460)'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2460](https://www.sqlalchemy.org/trac/ticket/2460)
- en: '**[mysql] [bug]**'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed bug whereby get_view_names() for “information_schema” schema would fail
    to retrieve views marked as “SYSTEM VIEW”. courtesy Matthew Turland.
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了对“information_schema”模式的 get_view_names() 无法检索标记为“SYSTEM VIEW”的视图的 bug。感谢
    Matthew Turland.
- en: '**[mysql] [bug]**'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed bug whereby if cast() is used on a SQL expression whose type is not supported
    by cast() and therefore CAST isn’t rendered by the dialect, the order of evaluation
    could change if the casted expression required that it be grouped; grouping is
    now applied to those expressions.
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了如果在不支持 cast() 的 SQL 表达式上使用 cast() 并且因此方言未呈现 CAST，则评估顺序可能会更改的 bug；现在对这些表达式应用分组。
- en: 'References: [#2467](https://www.sqlalchemy.org/trac/ticket/2467)'
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2467](https://www.sqlalchemy.org/trac/ticket/2467)
- en: sqlite
  id: totrans-287
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [feature]**'
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [feature]**'
- en: Added SQLite execution option “sqlite_raw_colnames=True”, will bypass attempts
    to remove “.” from column names returned by SQLite cursor.description.
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 SQLite 执行选项“sqlite_raw_colnames=True”，将绕过 SQLite cursor.description 返回的列名中的“.”
    的尝试删除。
- en: 'References: [#2475](https://www.sqlalchemy.org/trac/ticket/2475)'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2475](https://www.sqlalchemy.org/trac/ticket/2475)
- en: '**[sqlite] [bug]**'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: When the primary key column of a Table is replaced, such as via extend_existing,
    the “auto increment” column used by insert() constructs is reset. Previously it
    would remain referring to the previous primary key column.
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当Table的主键列被替换时，例如通过extend_existing，由insert()构造使用的“自动增量”列将被重置。以前它会继续引用先前的主键列。
- en: 'References: [#2525](https://www.sqlalchemy.org/trac/ticket/2525)'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2525](https://www.sqlalchemy.org/trac/ticket/2525)
- en: mssql
  id: totrans-294
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [feature]**'
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [feature]**'
- en: Added interim create_engine flag supports_unicode_binds to PyODBC dialect, to
    force whether or not the dialect passes Python unicode literals to PyODBC or not.
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向PyODBC方言添加了临时create_engine标志supports_unicode_binds，以强制方言是否将Python unicode文字传递给PyODBC。
- en: '**[mssql] [bug]**'
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Repaired the use_scope_identity create_engine() flag when using the pyodbc dialect.
    Previously this flag would be ignored if set to False. When set to False, you’ll
    get “SELECT @@identity” after each INSERT to get at the last inserted ID, for
    those tables which have “implicit_returning” set to False.
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用pyodbc方言时使用use_scope_identity create_engine()标志的bug。以前，如果设置为False，此标志将被忽略。当设置为False时，每次INSERT后都会得到“SELECT
    @@identity”，以获取最后插入的ID，对于那些“implicit_returning”设置为False的表。
- en: '**[mssql] [bug]**'
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: UPDATE..FROM syntax with SQL Server requires that the updated table be present
    in the FROM clause when an alias of that table is also present in the FROM clause.
    The updated table is now always present in the FROM, when FROM is present in the
    first place. Courtesy sayap.
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用SQL Server的UPDATE..FROM语法要求在FROM子句中存在更新的表，当表的别名也存在于FROM子句中时。现在，当FROM存在时，更新的表总��存在于FROM中。感谢sayap。
- en: 'References: [#2468](https://www.sqlalchemy.org/trac/ticket/2468)'
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2468](https://www.sqlalchemy.org/trac/ticket/2468)
- en: 0.7.6
  id: totrans-302
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.7.6
- en: 'Released: Wed Mar 14 2012'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2012年3月14日
- en: orm
  id: totrans-304
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: 'Added “no_autoflush” context manager to Session, used with with: will temporarily
    disable autoflush.'
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向Session添加了“no_autoflush”上下文管理器，与with一起使用：将暂时禁用自动刷新。
- en: '**[orm] [feature]**'
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added cte() method to Query, invokes common table expression support from the
    Core (see below).
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在Query中添加了cte()方法，调用Core中的公共表达式支持（见下文）。
- en: 'References: [#1859](https://www.sqlalchemy.org/trac/ticket/1859)'
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1859](https://www.sqlalchemy.org/trac/ticket/1859)
- en: '**[orm] [feature]**'
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added the ability to query for Table-bound column names when using query(sometable).filter_by(colname=value).
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了在使用query(sometable).filter_by(colname=value)时查询绑定到表的列名的能力。
- en: 'References: [#2400](https://www.sqlalchemy.org/trac/ticket/2400)'
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2400](https://www.sqlalchemy.org/trac/ticket/2400)
- en: '**[orm] [bug]**'
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed event registration bug which would primarily show up as events not being
    registered with sessionmaker() instances created after the event was associated
    with the Session class.
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了事件注册bug，主要表现为在事件与创建事件之后与Session类关联的sessionmaker()实例未注册的情况。
- en: 'References: [#2424](https://www.sqlalchemy.org/trac/ticket/2424)'
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2424](https://www.sqlalchemy.org/trac/ticket/2424)
- en: '**[orm] [bug]**'
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug whereby a primaryjoin condition with a “literal” in it would raise
    an error on compile with certain kinds of deeply nested expressions which also
    needed to render the same bound parameter name more than once.
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即在具有“literal”的primaryjoin条件中，当需要多次呈现相同绑定参数名称的某些类型的深度嵌套表达式上编译时会引发错误。
- en: 'References: [#2425](https://www.sqlalchemy.org/trac/ticket/2425)'
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2425](https://www.sqlalchemy.org/trac/ticket/2425)
- en: '**[orm] [bug]**'
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Removed the check for number of rows affected when doing a multi-delete against
    mapped objects. If an ON DELETE CASCADE exists between two rows, we can’t get
    an accurate rowcount from the DBAPI; this particular count is not supported on
    most DBAPIs in any case, MySQLdb is the notable case where it is.
  id: totrans-320
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在对映对象进行多行删除时，移除了对受影响行数的检查。如果两行之间存在ON DELETE CASCADE，我们无法从DBAPI中获得准确的行数；在大多数DBAPI中，这种特定计数在任何情况下都不受支持，MySQLdb是一个明显的例外。
- en: 'References: [#2403](https://www.sqlalchemy.org/trac/ticket/2403)'
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2403](https://www.sqlalchemy.org/trac/ticket/2403)
- en: '**[orm] [bug]**'
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug whereby objects using attribute_mapped_collection or column_mapped_collection
    could not be pickled.
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用attribute_mapped_collection或column_mapped_collection的对象无法被pickle的bug。
- en: 'References: [#2409](https://www.sqlalchemy.org/trac/ticket/2409)'
  id: totrans-324
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2409](https://www.sqlalchemy.org/trac/ticket/2409)
- en: '**[orm] [bug]**'
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug whereby MappedCollection would not get the appropriate collection
    instrumentation if it were only used in a custom subclass that used @collection.internally_instrumented.
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 MappedCollection 在仅在使用了 @collection.internally_instrumented 的自定义子类中使用时无法获得适当的集合仪器的错误。
- en: 'References: [#2406](https://www.sqlalchemy.org/trac/ticket/2406)'
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2406](https://www.sqlalchemy.org/trac/ticket/2406)
- en: '**[orm] [bug]**'
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug whereby SQL adaption mechanics would fail in a very nested scenario
    involving joined-inheritance, joinedload(), limit(), and a derived function in
    the columns clause.
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 SQL 适配机制在涉及联合继承、joinedload()、limit() 和列子句中的衍生函数的非常嵌套的情况下会失败的 bug。
- en: 'References: [#2419](https://www.sqlalchemy.org/trac/ticket/2419)'
  id: totrans-330
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2419](https://www.sqlalchemy.org/trac/ticket/2419)
- en: '**[orm] [bug]**'
  id: totrans-331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed the repr() for CascadeOptions to include refresh-expire. Also reworked
    CascadeOptions to be a <frozenset>.
  id: totrans-332
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 CascadeOptions 的 repr() 以包括 refresh-expire。还重新设计了 CascadeOptions 以成为 <frozenset>。
- en: 'References: [#2417](https://www.sqlalchemy.org/trac/ticket/2417)'
  id: totrans-333
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2417](https://www.sqlalchemy.org/trac/ticket/2417)
- en: '**[orm] [bug]**'
  id: totrans-334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Improved the “declarative reflection” example to support single-table inheritance,
    multiple calls to prepare(), tables that are present in alternate schemas, establishing
    only a subset of classes as reflected.
  id: totrans-335
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了“声明式反射”示例，以支持单表继承，多次调用prepare()，在替代模式下存在的表，仅将一部分类作为反射。
- en: '**[orm] [bug]**'
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Scaled back the test applied within flush() to check for UPDATE against partially
    NULL PK within one table to only actually happen if there’s really an UPDATE to
    occur.
  id: totrans-337
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 缩小了 flush() 中应用的测试范围，以检查表内部分 NULL PK 的 UPDATE，只有在真正需要进行 UPDATE 时才会发生。
- en: 'References: [#2390](https://www.sqlalchemy.org/trac/ticket/2390)'
  id: totrans-338
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2390](https://www.sqlalchemy.org/trac/ticket/2390)
- en: '**[orm] [bug]**'
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug whereby if a method name conflicted with a column name, a TypeError
    would be raised when the mapper tried to inspect the __get__() method on the method
    object.
  id: totrans-340
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即如果方法名与列名冲突，则当 mapper 尝试检查方法对象上的 __get__() 方法时会引发 TypeError。
- en: 'References: [#2352](https://www.sqlalchemy.org/trac/ticket/2352)'
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2352](https://www.sqlalchemy.org/trac/ticket/2352)
- en: examples
  id: totrans-342
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples] [bug]**'
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples] [bug]**'
- en: Altered _params_from_query() function in Beaker example to pull bindparams from
    the fully compiled statement, as a quick means to get everything including subqueries
    in the columns clause, etc.
  id: totrans-344
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了 Beaker 示例中的 _params_from_query() 函数，以从完全编译的语句中获取 bindparams，作为获取包括子查询在内的所有内容（列子句中等等）的快速方法。
- en: engine
  id: totrans-345
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [feature]**'
  id: totrans-346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: Added “no_parameters=True” execution option for connections. If no parameters
    are present, will pass the statement as cursor.execute(statement), thereby invoking
    the DBAPIs behavior when no parameter collection is present; for psycopg2 and
    mysql-python, this means not interpreting % signs in the string. This only occurs
    with this option, and not just if the param list is blank, as otherwise this would
    produce inconsistent behavior of SQL expressions that normally escape percent
    signs (and while compiling, can’t know ahead of time if parameters will be present
    in some cases).
  id: totrans-347
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 “no_parameters=True” 执行选项用于连接。如果没有参数存在，则会将语句传递给 cursor.execute(statement)，从而调用
    DBAPI 在不存在参数集合时的行为；对于 psycopg2 和 mysql-python，这意味着不会解释字符串中的 % 符号。只有在此选项下才会发生这种情况，并且不仅仅是如果参数列表为空，否则这将产生通常会转义百分号的
    SQL 表达式的不一致行为（并且在编译时，无法提前知道在某些情况下是否会存在参数）。
- en: 'References: [#2407](https://www.sqlalchemy.org/trac/ticket/2407)'
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2407](https://www.sqlalchemy.org/trac/ticket/2407)
- en: '**[engine] [feature]**'
  id: totrans-349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: Added pool_reset_on_return argument to create_engine, allows control over “connection
    return” behavior. Also added new arguments ‘rollback’, ‘commit’, None to pool.reset_on_return
    to allow more control over connection return activity.
  id: totrans-350
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 pool_reset_on_return 参数到 create_engine，允许控制“连接返回”行为。还向 pool.reset_on_return
    添加了新参数 'rollback'、'commit'、None，以允许更多控制连接返回活动。
- en: 'References: [#2378](https://www.sqlalchemy.org/trac/ticket/2378)'
  id: totrans-351
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2378](https://www.sqlalchemy.org/trac/ticket/2378)
- en: '**[engine] [feature]**'
  id: totrans-352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: 'Added some decent context managers to Engine, Connection:'
  id: totrans-353
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 Engine、Connection 添加了一些不错的上下文管理器：
- en: '[PRE0]'
  id: totrans-354
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'and:'
  id: totrans-355
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 并且：
- en: '[PRE1]'
  id: totrans-356
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Both close out the connection when done, commit or rollback transaction with
    errors on engine.begin().
  id: totrans-357
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当完成时，都会关闭连接，并在 engine.begin() 时提交或回滚事务中的错误。
- en: '**[engine] [bug]**'
  id: totrans-358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Added execution_options() call to MockConnection (i.e., that used with strategy=”mock”)
    which acts as a pass through for arguments.
  id: totrans-359
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 MockConnection（即与 strategy=”mock” 一起使用的）添加了 execution_options() 调用，该调用作为参数的传递。
- en: sql
  id: totrans-360
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added support for SQL standard common table expressions (CTE), allowing SELECT
    objects as the CTE source (DML not yet supported). This is invoked via the cte()
    method on any select() construct.
  id: totrans-362
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对SQL标准通用表达式（CTE）的支持，允许将SELECT对象作为CTE源（尚不支持DML）。这通过在任何select()构造上调用cte()方法来调用。
- en: 'References: [#1859](https://www.sqlalchemy.org/trac/ticket/1859)'
  id: totrans-363
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1859](https://www.sqlalchemy.org/trac/ticket/1859)
- en: '**[sql] [bug]**'
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed memory leak in core which would occur when C extensions were used with
    particular types of result fetches, in particular when orm query.count() were
    called.
  id: totrans-365
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了核心中的内存泄漏问题，当使用特定类型的结果获取时会发生，特别是在调用orm query.count()时。
- en: 'References: [#2427](https://www.sqlalchemy.org/trac/ticket/2427)'
  id: totrans-366
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2427](https://www.sqlalchemy.org/trac/ticket/2427)
- en: '**[sql] [bug]**'
  id: totrans-367
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue whereby attribute-based column access on a row would raise AttributeError
    with non-C version, NoSuchColumnError with C version. Now raises AttributeError
    in both cases.
  id: totrans-368
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '修复了在行上基于属性的列访问会引发AttributeError（对于非C版本）或NoSuchColumnError（对于C版本）的问题。现在在两种情况下都引发AttributeError。 '
- en: 'References: [#2398](https://www.sqlalchemy.org/trac/ticket/2398)'
  id: totrans-369
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2398](https://www.sqlalchemy.org/trac/ticket/2398)
- en: '**[sql] [bug]**'
  id: totrans-370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Added support for using the .key of a Column as a string identifier in a result
    set row. The .key is currently listed as an “alternate” name for a column, and
    is superseded by the name of a column which has that key value as its regular
    name. For the next major release of SQLAlchemy we may reverse this precedence
    so that .key takes precedence, but this is not decided on yet.
  id: totrans-371
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对使用列的.key作为结果集行中的字符串标识符的支持。.key目前被列为列的“备用”名称，并且被具有该键值作为其常规名称的列所取代。对于SQLAlchemy的下一个主要版本，我们可能会颠倒这种优先顺序，使.key优先，但目前尚未决定。
- en: 'References: [#2392](https://www.sqlalchemy.org/trac/ticket/2392)'
  id: totrans-372
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2392](https://www.sqlalchemy.org/trac/ticket/2392)
- en: '**[sql] [bug]**'
  id: totrans-373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: A warning is emitted when a not-present column is stated in the values() clause
    of an insert() or update() construct. Will move to an exception in 0.8.
  id: totrans-374
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当在insert()或update()构造的values()子句中声明不存在的列时，会发出警告。将在0.8版本中转为异常。
- en: 'References: [#2413](https://www.sqlalchemy.org/trac/ticket/2413)'
  id: totrans-375
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2413](https://www.sqlalchemy.org/trac/ticket/2413)
- en: '**[sql] [bug]**'
  id: totrans-376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: A significant change to how labeling is applied to columns in SELECT statements
    allows “truncated” labels, that is label names that are generated in Python which
    exceed the maximum identifier length (note this is configurable via label_length
    on create_engine()), to be properly referenced when rendered inside of a subquery,
    as well as to be present in a result set row using their original in-Python names.
  id: totrans-377
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在SELECT语句中应用标签的方式发生了重大变化，允许“截断”标签，即在Python中生成的标签名称超过最大标识符长度时（请注意，这可以通过create_engine()上的label_length进行配置），在子查询中正确引用，并且在结果集行中使用它们的原始Python名称。
- en: 'References: [#2396](https://www.sqlalchemy.org/trac/ticket/2396)'
  id: totrans-378
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2396](https://www.sqlalchemy.org/trac/ticket/2396)
- en: '**[sql] [bug]**'
  id: totrans-379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in new “autoload_replace” flag which would fail to preserve the primary
    key constraint of the reflected table.
  id: totrans-380
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新“autoload_replace”标志中的错误，该错误会导致无法保留反射表的主键约束。
- en: 'References: [#2402](https://www.sqlalchemy.org/trac/ticket/2402)'
  id: totrans-381
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2402](https://www.sqlalchemy.org/trac/ticket/2402)
- en: '**[sql] [bug]**'
  id: totrans-382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Index will raise when arguments passed cannot be interpreted as columns or expressions.
    Will warn when Index is created with no columns at all.
  id: totrans-383
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当传递的参数无法解释为列或表达式时，Index将引发异常。当创建Index时没有任何列时将发出警告。
- en: 'References: [#2380](https://www.sqlalchemy.org/trac/ticket/2380)'
  id: totrans-384
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2380](https://www.sqlalchemy.org/trac/ticket/2380)
- en: mysql
  id: totrans-385
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [feature]**'
  id: totrans-386
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [feature]**'
- en: Added support for MySQL index and primary key constraint types (i.e. USING)
    via new mysql_using parameter to Index and PrimaryKeyConstraint, courtesy Diana
    Clarke.
  id: totrans-387
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过Index和PrimaryKeyConstraint的新mysql_using参数，添加了对MySQL索引和主键约束类型（即USING）的支持，感谢Diana
    Clarke。
- en: 'References: [#2386](https://www.sqlalchemy.org/trac/ticket/2386)'
  id: totrans-388
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2386](https://www.sqlalchemy.org/trac/ticket/2386)
- en: '**[mysql] [feature]**'
  id: totrans-389
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [feature]**'
- en: Added support for the “isolation_level” parameter to all MySQL dialects. Thanks
    to mu_mind for the patch here.
  id: totrans-390
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为所有MySQL方言添加了对“isolation_level”参数的支持。感谢mu_mind在这里的补丁。
- en: 'References: [#2394](https://www.sqlalchemy.org/trac/ticket/2394)'
  id: totrans-391
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2394](https://www.sqlalchemy.org/trac/ticket/2394)
- en: sqlite
  id: totrans-392
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-393
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Fixed bug in C extensions whereby string format would not be applied to a Numeric
    value returned as integer; this affected primarily SQLite which does not maintain
    numeric scale settings.
  id: totrans-394
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了C扩展中的错误，其中字符串格式不会应用于作为整数返回的Numeric值；这主要影响SQLite，因为它不维护数字比例设置。
- en: 'References: [#2432](https://www.sqlalchemy.org/trac/ticket/2432)'
  id: totrans-395
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2432](https://www.sqlalchemy.org/trac/ticket/2432)
- en: mssql
  id: totrans-396
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [feature]**'
  id: totrans-397
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [功能]**'
- en: Added support for MSSQL INSERT, UPDATE, and DELETE table hints, using new with_hint()
    method on UpdateBase.
  id: totrans-398
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对MSSQL INSERT、UPDATE和DELETE表提示的支持，使用UpdateBase上的新with_hint()方法。
- en: 'References: [#2430](https://www.sqlalchemy.org/trac/ticket/2430)'
  id: totrans-399
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2430](https://www.sqlalchemy.org/trac/ticket/2430)
- en: oracle
  id: totrans-400
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [feature]**'
  id: totrans-401
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [功能]**'
- en: Added a new create_engine() flag coerce_to_decimal=False, disables the precision
    numeric handling which can add lots of overhead by converting all numeric values
    to Decimal.
  id: totrans-402
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的create_engine()标志coerce_to_decimal=False，禁用了精度数字处理，可以通过将所有数字值转换为Decimal来增加大量开销。
- en: 'References: [#2399](https://www.sqlalchemy.org/trac/ticket/2399)'
  id: totrans-403
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2399](https://www.sqlalchemy.org/trac/ticket/2399)
- en: '**[oracle] [bug]**'
  id: totrans-404
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [错误]**'
- en: Added missing compilation support for LONG
  id: totrans-405
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为LONG添加了缺失的编译支持
- en: 'References: [#2401](https://www.sqlalchemy.org/trac/ticket/2401)'
  id: totrans-406
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2401](https://www.sqlalchemy.org/trac/ticket/2401)
- en: '**[oracle] [bug]**'
  id: totrans-407
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [错误]**'
- en: Added ‘LEVEL’ to the list of reserved words for Oracle.
  id: totrans-408
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将“LEVEL”添加到Oracle的保留字列表中。
- en: 'References: [#2435](https://www.sqlalchemy.org/trac/ticket/2435)'
  id: totrans-409
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2435](https://www.sqlalchemy.org/trac/ticket/2435)
- en: 0.7.5
  id: totrans-410
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.7.5
- en: 'Released: Sat Jan 28 2012'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2012年1月28日
- en: orm
  id: totrans-412
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-413
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Added “class_registry” argument to declarative_base(). Allows two or more declarative
    bases to share the same registry of class names.
  id: totrans-414
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了“class_registry”参数到declarative_base()。允许两个或更多声明基类共享相同的类名注册表。
- en: '**[orm] [feature]**'
  id: totrans-415
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: query.filter() accepts multiple criteria which will join via AND, i.e. query.filter(x==y,
    z>q, …)
  id: totrans-416
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query.filter()接受多个条件，这些条件将通过AND连接，即query.filter(x==y, z>q, …)
- en: '**[orm] [feature]**'
  id: totrans-417
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Added new capability to relationship loader options to allow “default” loader
    strategies. Pass ‘*’ to any of joinedload(), lazyload(), subqueryload(), or noload()
    and that becomes the loader strategy used for all relationships, except for those
    explicitly stated in the Query. Thanks to up-and-coming contributor Kent Bower
    for an exhaustive and well written test suite !
  id: totrans-418
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的关系加载器选项功能，允许“默认”加载器策略。将‘*’传递给joinedload()、lazyload()、subqueryload()或noload()中的任何一个，这将成为用于所有关系的加载器策略，除了在查询中明确声明的关系。感谢新兴贡献者Kent
    Bower提供了详尽而写得很好的测试套件！
- en: 'References: [#2351](https://www.sqlalchemy.org/trac/ticket/2351)'
  id: totrans-419
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2351](https://www.sqlalchemy.org/trac/ticket/2351)
- en: '**[orm] [feature]**'
  id: totrans-420
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: New declarative reflection example added, illustrates how best to mix table
    reflection with declarative as well as uses some new features from.
  id: totrans-421
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的声明性反射示例，说明了如何最好地将表反射与声明性混合使用，并使用了一些新功能。
- en: 'References: [#2356](https://www.sqlalchemy.org/trac/ticket/2356)'
  id: totrans-422
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2356](https://www.sqlalchemy.org/trac/ticket/2356)
- en: '**[orm] [bug]**'
  id: totrans-423
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed issue where modified session state established after a failed flush would
    be committed as part of the subsequent transaction that begins automatically after
    manual call to rollback(). The state of the session is checked within rollback(),
    and if new state is present, a warning is emitted and restore_snapshot() is called
    a second time, discarding those changes.
  id: totrans-424
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在失败的flush后建立的修改会作为随后由手动调用rollback()自动开始的事务的一部分提交的问题。在rollback()中检查会话的状态，如果存在新状态，则发出警告并第二次调用restore_snapshot()，丢弃这些更改。
- en: 'References: [#2389](https://www.sqlalchemy.org/trac/ticket/2389)'
  id: totrans-425
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2389](https://www.sqlalchemy.org/trac/ticket/2389)
- en: '**[orm] [bug]**'
  id: totrans-426
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed regression from 0.7.4 whereby using an already instrumented column from
    a superclass as “polymorphic_on” failed to resolve the underlying Column.
  id: totrans-427
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了从0.7.4中的回归，其中使用已经被超类作为“polymorphic_on”的列无法解析基础列的问题。
- en: 'References: [#2345](https://www.sqlalchemy.org/trac/ticket/2345)'
  id: totrans-428
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2345](https://www.sqlalchemy.org/trac/ticket/2345)
- en: '**[orm] [bug]**'
  id: totrans-429
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Raise an exception if xyzload_all() is used inappropriately with two non-connected
    relationships.
  id: totrans-430
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果两个未连接的关系不当地使用xyzload_all()，则引发异常。
- en: 'References: [#2370](https://www.sqlalchemy.org/trac/ticket/2370)'
  id: totrans-431
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2370](https://www.sqlalchemy.org/trac/ticket/2370)
- en: '**[orm] [bug]**'
  id: totrans-432
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed bug whereby event.listen(SomeClass) forced an entirely unnecessary compile
    of the mapper, making events very hard to set up at module import time (nobody
    noticed this ??)
  id: totrans-433
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，其中event.listen(SomeClass)强制进行了一个完全不必要的mapper编译，使得在模块导入时设置事件非常困难（没人注意到这个问题吗？）
- en: 'References: [#2367](https://www.sqlalchemy.org/trac/ticket/2367)'
  id: totrans-434
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2367](https://www.sqlalchemy.org/trac/ticket/2367)
- en: '**[orm] [bug]**'
  id: totrans-435
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug whereby hybrid_property didn’t work as a kw arg in any(), has().
  id: totrans-436
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，其中hybrid_property在any()、has()中作为kw参数时无法正常工作。
- en: '**[orm] [bug]**'
  id: totrans-437
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: ensure pickleability of all ORM exceptions for multiprocessing compatibility.
  id: totrans-438
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保所有ORM异常都可以pickle化，以实现多进程兼容性。
- en: 'References: [#2371](https://www.sqlalchemy.org/trac/ticket/2371)'
  id: totrans-439
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2371](https://www.sqlalchemy.org/trac/ticket/2371)
- en: '**[orm] [bug]**'
  id: totrans-440
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: implemented standard “can’t set attribute” / “can’t delete attribute” AttributeError
    when setattr/delattr used on a hybrid that doesn’t define fset or fdel.
  id: totrans-441
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当在一个混合属性上使用setattr/delattr时，如果混合属性没有定义fset或fdel，实现了标准的“无法设置属性”/“无法删除属性”AttributeError。
- en: 'References: [#2353](https://www.sqlalchemy.org/trac/ticket/2353)'
  id: totrans-442
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2353](https://www.sqlalchemy.org/trac/ticket/2353)
- en: '**[orm] [bug]**'
  id: totrans-443
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where unpickled object didn’t have enough of its state set up to work
    correctly within the unpickle() event established by the mutable object extension,
    if the object needed ORM attribute access within __eq__() or similar.
  id: totrans-444
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即未pickle化的对象在mutable对象扩展建立的unpickle()事件中没有设置足够的状态以在__eq__()或类似方法中正确工作，如果对象需要在__eq__()或类似方法中访问ORM属性。
- en: 'References: [#2362](https://www.sqlalchemy.org/trac/ticket/2362)'
  id: totrans-445
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2362](https://www.sqlalchemy.org/trac/ticket/2362)
- en: '**[orm] [bug]**'
  id: totrans-446
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where “merge” cascade could mis-interpret an unloaded attribute, if
    the load_on_pending flag were used with relationship(). Thanks to Kent Bower for
    tests.
  id: totrans-447
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，当使用relationship()的load_on_pending标志时，“merge”级联可能会错误地解释未加载的属性。感谢Kent
    Bower提供的测试。
- en: 'References: [#2374](https://www.sqlalchemy.org/trac/ticket/2374)'
  id: totrans-448
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2374](https://www.sqlalchemy.org/trac/ticket/2374)
- en: '**[orm]**'
  id: totrans-449
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed regression from 0.6 whereby if “load_on_pending” relationship() flag were
    used where a non-“get()” lazy clause needed to be emitted on a pending object,
    it would fail to load.
  id: totrans-450
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从0.6版本中修复了一个回归问题，即如果在一个待处理对象上需要发出非“get()”懒惰子句的情况下使用了“load_on_pending”relationship()标志，它将无法加载。
- en: examples
  id: totrans-451
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples] [feature]**'
  id: totrans-452
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples] [feature]**'
- en: Simplified the versioning example a bit to use a declarative mixin as well as
    an event listener, instead of a metaclass + SessionExtension.
  id: totrans-453
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 简化了版本示例，使用了声明性mixin以及事件监听器，而不是元类+SessionExtension。
- en: 'References: [#2313](https://www.sqlalchemy.org/trac/ticket/2313)'
  id: totrans-454
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2313](https://www.sqlalchemy.org/trac/ticket/2313)
- en: '**[examples] [bug]**'
  id: totrans-455
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples] [bug]**'
- en: Fixed large_collection.py to close the session before dropping tables.
  id: totrans-456
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了large_collection.py在删除表之前关闭会话的问题。
- en: 'References: [#2346](https://www.sqlalchemy.org/trac/ticket/2346)'
  id: totrans-457
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2346](https://www.sqlalchemy.org/trac/ticket/2346)
- en: engine
  id: totrans-458
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-459
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Added __reduce__ to StatementError, DBAPIError, column errors so that exceptions
    are pickleable, as when using multiprocessing. However, not all DBAPIs support
    this yet, such as psycopg2.
  id: totrans-460
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为StatementError、DBAPIError、列错误添加了__reduce__，以便异常在使用多进程时可pickle化。但是，目前并非所有的DBAPI都支持这一点，比如psycopg2。
- en: 'References: [#2371](https://www.sqlalchemy.org/trac/ticket/2371)'
  id: totrans-461
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2371](https://www.sqlalchemy.org/trac/ticket/2371)
- en: '**[engine] [bug]**'
  id: totrans-462
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Improved error messages when a non-string or invalid string is passed to any
    of the date/time processors used by SQLite, including C and Python versions.
  id: totrans-463
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当将非字符串或无效字符串传递给SQLite使用的任何日期/时间处理器之一时，包括C和Python版本时，改进了错误消息。
- en: 'References: [#2382](https://www.sqlalchemy.org/trac/ticket/2382)'
  id: totrans-464
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2382](https://www.sqlalchemy.org/trac/ticket/2382)
- en: '**[engine] [bug]**'
  id: totrans-465
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed bug whereby a table-bound Column object named “<a>_<b>” which matched
    a column labeled as “<tablename>_<colname>” could match inappropriately when targeting
    in a result set row.
  id: totrans-466
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，其中一个与表绑定的名为“<a>_<b>”的Column对象与标记为“<tablename>_<colname>”的列匹配时，可能会在结果集行中不当地匹配。
- en: 'References: [#2377](https://www.sqlalchemy.org/trac/ticket/2377)'
  id: totrans-467
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2377](https://www.sqlalchemy.org/trac/ticket/2377)
- en: '**[engine] [bug]**'
  id: totrans-468
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed bug in “mock” strategy whereby correct DDL visit method wasn’t called,
    resulting in “CREATE/DROP SEQUENCE” statements being duplicated
  id: totrans-469
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“mock”策略中的bug，其中未调用正确的DDL访问方法，导致“CREATE/DROP SEQUENCE”语句重复。
- en: 'References: [#2384](https://www.sqlalchemy.org/trac/ticket/2384)'
  id: totrans-470
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2384](https://www.sqlalchemy.org/trac/ticket/2384)
- en: sql
  id: totrans-471
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-472
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: New reflection feature “autoload_replace”; when set to False on Table, the Table
    can be autoloaded without existing columns being replaced. Allows more flexible
    chains of Table construction/reflection to be constructed, including that it helps
    with combining Declarative with table reflection. See the new example on the wiki.
  id: totrans-473
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新的反射功能“autoload_replace”；在表上设置为False时，可以加载表而不替换现有列。允许构建更灵活的表构造/反射链，包括它有助于将声明性与表反射结合起来。请参阅维基上的新示例。
- en: 'References: [#2356](https://www.sqlalchemy.org/trac/ticket/2356)'
  id: totrans-474
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2356](https://www.sqlalchemy.org/trac/ticket/2356)
- en: '**[sql] [feature]**'
  id: totrans-475
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added “false()” and “true()” expression constructs to sqlalchemy.sql namespace,
    though not part of __all__ as of yet.
  id: totrans-476
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在sqlalchemy.sql命名空间中添加了“false()”和“true()”表达式构造，尽管目前还不是__all__的一部分。
- en: '**[sql] [feature]**'
  id: totrans-477
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Dialect-specific compilers now raise CompileError for all type/statement compilation
    issues, instead of InvalidRequestError or ArgumentError. The DDL for CREATE TABLE
    will re-raise CompileError to include table/column information for the problematic
    column.
  id: totrans-478
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 特定于方言的编译器现在对所有类型/语句编译问题引发CompileError，而不是InvalidRequestError或ArgumentError。对于有问题的列，CREATE
    TABLE的DDL将重新引发CompileError以包含表/列信息。
- en: 'References: [#2361](https://www.sqlalchemy.org/trac/ticket/2361)'
  id: totrans-479
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2361](https://www.sqlalchemy.org/trac/ticket/2361)
- en: '**[sql] [bug]**'
  id: totrans-480
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Improved the API for add_column() such that if the same column is added to its
    own table, an error is not raised and the constraints don’t get doubled up. Also
    helps with some reflection/declarative patterns.
  id: totrans-481
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了add_column()的API，如果将相同的列添加到其自身的表中，则不会引发错误，并且约束不会被重复。还有助于一些反射/声明性模式。
- en: 'References: [#2356](https://www.sqlalchemy.org/trac/ticket/2356)'
  id: totrans-482
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2356](https://www.sqlalchemy.org/trac/ticket/2356)
- en: '**[sql] [bug]**'
  id: totrans-483
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where the “required” exception would not be raised for bindparam()
    with required=True, if the statement were given no parameters at all.
  id: totrans-484
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即当`bindparam()`中`required=True`时，如果语句没有给出任何参数，则不会引发“required”异常。
- en: 'References: [#2381](https://www.sqlalchemy.org/trac/ticket/2381)'
  id: totrans-485
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2381](https://www.sqlalchemy.org/trac/ticket/2381)
- en: mysql
  id: totrans-486
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-487
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: fixed regexp that filters out warnings for non-reflected “PARTITION” directives,
    thanks to George Reilly
  id: totrans-488
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个正则表达式，过滤掉非反射“PARTITION”指令的警告，感谢George Reilly
- en: 'References: [#2376](https://www.sqlalchemy.org/trac/ticket/2376)'
  id: totrans-489
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2376](https://www.sqlalchemy.org/trac/ticket/2376)
- en: sqlite
  id: totrans-490
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-491
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: the “name” of an FK constraint in SQLite is reflected as “None”, not “0” or
    other integer value. SQLite does not appear to support constraint naming in any
    case.
  id: totrans-492
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在SQLite中，FK约束的“name”反映为“None”，而不是“0”或其他整数值。SQLite似乎在任何情况下都不支持约束命名。
- en: 'References: [#2364](https://www.sqlalchemy.org/trac/ticket/2364)'
  id: totrans-493
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2364](https://www.sqlalchemy.org/trac/ticket/2364)
- en: '**[sqlite] [bug]**'
  id: totrans-494
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: sql.false() and sql.true() compile to 0 and 1, respectively in sqlite
  id: totrans-495
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: sql.false()和sql.true()在sqlite中分别编译为0和1
- en: 'References: [#2368](https://www.sqlalchemy.org/trac/ticket/2368)'
  id: totrans-496
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2368](https://www.sqlalchemy.org/trac/ticket/2368)
- en: '**[sqlite] [bug]**'
  id: totrans-497
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: removed an erroneous “raise” in the SQLite dialect when getting table names
    and view names, where logic is in place to fall back to an older version of SQLite
    that doesn’t have the “sqlite_temp_master” table.
  id: totrans-498
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在获取表名和视图名时，删除了SQLite方言中的一个错误的“raise”，其中逻辑设置为退回到没有“sqlite_temp_master”表的旧版本的SQLite。
- en: mssql
  id: totrans-499
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-500
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Adjusted the regexp used in the mssql.TIME type to ensure only six digits are
    received for the “microseconds” portion of the value, which is expected by Python’s
    datetime.time(). Note that support for sending microseconds doesn’t seem to be
    possible yet with pyodbc at least.
  id: totrans-501
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了在mssql.TIME类型中使用的正则表达式，以确保仅接收六位数字作为值的“microseconds”部分，这是Python的datetime.time()所期望的。请注意，至少在pyodbc中似乎尚不支持发送微秒。
- en: 'References: [#2340](https://www.sqlalchemy.org/trac/ticket/2340)'
  id: totrans-502
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2340](https://www.sqlalchemy.org/trac/ticket/2340)
- en: '**[mssql] [bug]**'
  id: totrans-503
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Dropped the “30 char” limit on pymssql, based on reports that it’s doing things
    better these days. pymssql hasn’t been well tested and as the DBAPI is in flux
    it’s still not clear what the status is on this driver and how SQLAlchemy’s implementation
    should adapt.
  id: totrans-504
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 根据有关pymssql做得更好的报告，取消了对pymssql的“30 char”限制。pymssql尚未经过充分测试，由于DBAPI正在变化，目前还不清楚该驱动程序的状态以及SQLAlchemy的实现应该如何适应。
- en: 'References: [#2347](https://www.sqlalchemy.org/trac/ticket/2347)'
  id: totrans-505
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2347](https://www.sqlalchemy.org/trac/ticket/2347)
- en: oracle
  id: totrans-506
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-507
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Added ORA-03135 to the never ending list of oracle “connection lost” errors
  id: totrans-508
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 ORA-03135 添加到永无止境的 Oracle “连接丢失”错误列表中
- en: 'References: [#2388](https://www.sqlalchemy.org/trac/ticket/2388)'
  id: totrans-509
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2388](https://www.sqlalchemy.org/trac/ticket/2388)
- en: misc
  id: totrans-510
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [core]**'
  id: totrans-511
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [core]**'
- en: Changed LRUCache, used by the mapper to cache INSERT/UPDATE/DELETE statements,
    to use an incrementing counter instead of a timestamp to track entries, for greater
    reliability versus using time.time(), which can cause test failures on some platforms.
  id: totrans-512
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将用于缓存 INSERT/UPDATE/DELETE 语句的映射器的 LRUCache 更改为使用递增计数器而不是时间戳来跟踪条目，以提高可靠性，而不是使用
    time.time()，后者可能会导致某些平台上的测试失败。
- en: 'References: [#2379](https://www.sqlalchemy.org/trac/ticket/2379)'
  id: totrans-513
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2379](https://www.sqlalchemy.org/trac/ticket/2379)
- en: '**[bug] [core]**'
  id: totrans-514
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [core]**'
- en: Added a boolean check for the “finalize” function within the pool connection
    proxy’s weakref callback before calling it, so that a warning isn’t emitted that
    this function is None when the application is exiting and gc has removed the function
    from the module before the weakref callback was invoked.
  id: totrans-515
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在调用池连接代理的弱引用回调函数之前，为“finalize”函数添加了一个布尔检查，以避免在应用程序退出时发出警告，当应用程序退出并且 gc 在调用弱引用回调之前从模块中删除函数时，不会发出此函数为
    None 的警告。
- en: 'References: [#2383](https://www.sqlalchemy.org/trac/ticket/2383)'
  id: totrans-516
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2383](https://www.sqlalchemy.org/trac/ticket/2383)
- en: '**[bug] [py3k]**'
  id: totrans-517
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [py3k]**'
- en: Fixed inappropriate usage of util.py3k flag and renamed it to util.py3k_warning,
    since this flag is intended to detect the -3 flag series of import restrictions
    only.
  id: totrans-518
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了对 util.py3k 标志的不当使用，并将其重命名为 util.py3k_warning，因为此标志仅用于检测 -3 标志系列的导入限制。
- en: 'References: [#2348](https://www.sqlalchemy.org/trac/ticket/2348)'
  id: totrans-519
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2348](https://www.sqlalchemy.org/trac/ticket/2348)
- en: 0.7.4
  id: totrans-520
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.7.4
- en: 'Released: Fri Dec 09 2011'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2011年12月09日星期五
- en: orm
  id: totrans-522
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-523
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: 'polymorphic_on now accepts many new kinds of values:'
  id: totrans-524
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: polymorphic_on 现在接受许多新类型的值：
- en: standalone expressions that aren’t otherwise mapped
  id: totrans-525
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 否则未映射的独立表达式
- en: ''
  id: totrans-526
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-527
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: column_property() objects
  id: totrans-528
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: column_property() 对象
- en: ''
  id: totrans-529
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-530
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: string names of any column_property() or attribute name of a mapped Column
  id: totrans-531
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何 column_property() 的字符串名称或映射列的属性名称
- en: The docs include an example using the case() construct, which is likely to be
    a common constructed used here. and part of
  id: totrans-532
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 文档包含了一个使用 case() 构造的示例，这很可能是一个常见的构造用法，并且是
- en: Standalone expressions in polymorphic_on propagate to single-table inheritance
    subclasses so that they are used in the WHERE /JOIN clause to limit rows to that
    subclass as is the usual behavior.
  id: totrans-533
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: polymorphic_on 中的独立表达式传播到单表继承子类，以便它们在 WHERE / JOIN 子句中用于限制行到该子类，这是通常的行为。
- en: 'References: [#2238](https://www.sqlalchemy.org/trac/ticket/2238), [#2345](https://www.sqlalchemy.org/trac/ticket/2345)'
  id: totrans-534
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2238](https://www.sqlalchemy.org/trac/ticket/2238), [#2345](https://www.sqlalchemy.org/trac/ticket/2345)
- en: '**[orm] [feature]**'
  id: totrans-535
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: IdentitySet supports the - operator as the same as difference(), handy when
    dealing with Session.dirty etc.
  id: totrans-536
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: IdentitySet 支持 - 运算符，与 difference() 相同，处理 Session.dirty 等时非常方便。
- en: 'References: [#2301](https://www.sqlalchemy.org/trac/ticket/2301)'
  id: totrans-537
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2301](https://www.sqlalchemy.org/trac/ticket/2301)
- en: '**[orm] [feature]**'
  id: totrans-538
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new value for Column autoincrement called “ignore_fk”, can be used to
    force autoincrement on a column that’s still part of a ForeignKeyConstraint. New
    example in the relationship docs illustrates its use.
  id: totrans-539
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 Column 的 autoincrement 添加了一个名为“ignore_fk”的新值，可用于强制在仍然属于 ForeignKeyConstraint
    的列上自动增量。关系文档中的新示例说明了其用法。
- en: '**[orm] [bug]**'
  id: totrans-540
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed backref behavior when “popping” the value off of a many-to-one in response
    to a removal from a stale one-to-many - the operation is skipped, since the many-to-one
    has since been updated.
  id: totrans-541
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在从陈旧的一对多中删除值时“弹出”值时的 backref 行为 - 该操作被跳过，因为一对多已经被更新。
- en: 'References: [#2315](https://www.sqlalchemy.org/trac/ticket/2315)'
  id: totrans-542
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2315](https://www.sqlalchemy.org/trac/ticket/2315)
- en: '**[orm] [bug]**'
  id: totrans-543
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: After some years of not doing this, added more granularity to the “is X a parent
    of Y” functionality, which is used when determining if the FK on “Y” needs to
    be “nulled out” as well as if “Y” should be deleted with delete-orphan cascade.
    The test now takes into account the Python identity of the parent as well its
    identity key, to see if the last known parent of Y is definitely X. If a decision
    can’t be made, a StaleDataError is raised. The conditions where this error is
    raised are fairly rare, requiring that the previous parent was garbage collected,
    and previously could very well inappropriately update/delete a record that’s since
    moved onto a new parent, though there may be some cases where “silent success”
    occurred previously that will now raise in the face of ambiguity. Expiring “Y”
    resets the “parent” tracker, meaning X.remove(Y) could then end up deleting Y
    even if X is stale, but this is the same behavior as before; it’s advised to expire
    X also in that case.
  id: totrans-544
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在多年不这样做之后，对“X是否为Y的父级”功能增加了更多细分，这在确定“Y”上的FK是否也需要“被置空”以及是否应该使用delete-orphan级联删除时使用。测试现在考虑了父级的Python标识以及其标识键，以查看Y的最后已知父级是否确实为X。如果无法做出决定，则会引发StaleDataError。引发此错误的条件非常罕见，要求以前的父级已被垃圾回收，并且以前可能会不适当地更新/删除已经移至新父级的记录，尽管以前可能会在面对模棱两可时产生“静默成功”的情况，但现在会引发错误。过期“Y”会重置“父级”跟踪器，这意味着X.remove(Y)可能会删除Y，即使X已过期，但这与以前的行为相同；建议在这种情况下也过期X。
- en: 'References: [#2264](https://www.sqlalchemy.org/trac/ticket/2264)'
  id: totrans-545
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2264](https://www.sqlalchemy.org/trac/ticket/2264)
- en: '**[orm] [bug]**'
  id: totrans-546
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: fixed inappropriate evaluation of user-mapped object in a boolean context within
    query.get(). Also in 0.6.9.
  id: totrans-547
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在query.get()中对用户映射对象在布尔上下文中的不适当评估。也在0.6.9中。
- en: 'References: [#2310](https://www.sqlalchemy.org/trac/ticket/2310)'
  id: totrans-548
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2310](https://www.sqlalchemy.org/trac/ticket/2310)
- en: '**[orm] [bug]**'
  id: totrans-549
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Added missing comma to PASSIVE_RETURN_NEVER_SET symbol
  id: totrans-550
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了缺失的逗号到PASSIVE_RETURN_NEVER_SET符号
- en: 'References: [#2304](https://www.sqlalchemy.org/trac/ticket/2304)'
  id: totrans-551
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2304](https://www.sqlalchemy.org/trac/ticket/2304)
- en: '**[orm] [bug]**'
  id: totrans-552
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Cls.column.collate(“some collation”) now works. Also in 0.6.9
  id: totrans-553
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Cls.column.collate(“some collation”)现在可以工作。也在0.6.9中
- en: 'References: [#1776](https://www.sqlalchemy.org/trac/ticket/1776)'
  id: totrans-554
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1776](https://www.sqlalchemy.org/trac/ticket/1776)
- en: '**[orm] [bug]**'
  id: totrans-555
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: the value of a composite attribute is now expired after an insert or update
    operation, instead of regenerated in place. This ensures that a column value which
    is expired within a flush will be loaded first, before the composite is regenerated
    using that value.
  id: totrans-556
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，在插入或更新操作后，复合属性的值会过期，而不是在原地重新生成。这确保了在刷新时过期的列值将首先被加载，然后再使用该值重新生成复合值。
- en: 'References: [#2309](https://www.sqlalchemy.org/trac/ticket/2309)'
  id: totrans-557
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2309](https://www.sqlalchemy.org/trac/ticket/2309)
- en: '**[orm] [bug]**'
  id: totrans-558
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The fix in also emits the “refresh” event when the composite value is loaded
    on access, even if all column values were already present, as is appropriate.
    This fixes the “mutable” extension which relies upon the “load” event to ensure
    the _parents dictionary is up to date, fixes. Thanks to Scott Torborg for the
    test case here.
  id: totrans-559
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当访问加载复合值时，即使所有列值已经存在，也会发出“refresh”事件的问题，这是合适的。这修复了依赖于“load”事件确保_parents字典是最新的“mutable”扩展。感谢Scott
    Torborg在这里提供的测试用例。
- en: 'References: [#2308](https://www.sqlalchemy.org/trac/ticket/2308), [#2309](https://www.sqlalchemy.org/trac/ticket/2309)'
  id: totrans-560
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2308](https://www.sqlalchemy.org/trac/ticket/2308)，[#2309](https://www.sqlalchemy.org/trac/ticket/2309)
- en: '**[orm] [bug]**'
  id: totrans-561
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug whereby a subclass of a subclass using concrete inheritance in conjunction
    with the new ConcreteBase or AbstractConcreteBase would fail to apply the subclasses
    deeper than one level to the “polymorphic loader” of each base
  id: totrans-562
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即使用具体继承与新的ConcreteBase或AbstractConcreteBase结合使用的子类的子类无法将超过一级的子类应用于每个基类的“多态加载器”。
- en: 'References: [#2312](https://www.sqlalchemy.org/trac/ticket/2312)'
  id: totrans-563
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2312](https://www.sqlalchemy.org/trac/ticket/2312)
- en: '**[orm] [bug]**'
  id: totrans-564
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug whereby a subclass of a subclass using the new AbstractConcreteBase
    would fail to acquire the correct “base_mapper” attribute when the “base” mapper
    was generated, thereby causing failures later on.
  id: totrans-565
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即使用新的AbstractConcreteBase的子类的子类在生成“base”映射器时无法获取正确的“base_mapper”属性，从而导致后续失败。
- en: 'References: [#2312](https://www.sqlalchemy.org/trac/ticket/2312)'
  id: totrans-566
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2312](https://www.sqlalchemy.org/trac/ticket/2312)
- en: '**[orm] [bug]**'
  id: totrans-567
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug whereby column_property() created against ORM-level column could be
    treated as a distinct entity when producing certain kinds of joined-inh joins.
  id: totrans-568
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了对 ORM 级列创建的 column_property() 在生成某些类型的 joined-inh 连接时可能被视为一个不同的实体的 bug。
- en: 'References: [#2316](https://www.sqlalchemy.org/trac/ticket/2316)'
  id: totrans-569
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2316](https://www.sqlalchemy.org/trac/ticket/2316)
- en: '**[orm] [bug]**'
  id: totrans-570
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed the error formatting raised when a tuple is inadvertently passed to session.query().
    Also in 0.6.9.
  id: totrans-571
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当意外传递元组给 session.query() 时引发的错误格式化。同时适用于 0.6.9 版本。
- en: 'References: [#2297](https://www.sqlalchemy.org/trac/ticket/2297)'
  id: totrans-572
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2297](https://www.sqlalchemy.org/trac/ticket/2297)
- en: '**[orm] [bug]**'
  id: totrans-573
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Calls to query.join() to a single-table inheritance subclass are now tracked,
    and are used to eliminate the additional WHERE.. IN criterion normally tacked
    on with single table inheritance, since the join should accommodate it. This allows
    OUTER JOIN to a single table subclass to produce the correct results, and overall
    will produce fewer WHERE criterion when dealing with single table inheritance
    joins.
  id: totrans-574
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 跟踪对单表继承子类的 query.join() 调用，并用它们来消除通常附加到单表继承的额外 WHERE.. IN 条件，因为 join 应该适应它。这允许
    OUTER JOIN 到单表子类产生正确的结果，并且在处理单表继承连接时将产生较少的 WHERE 条件。
- en: 'References: [#2328](https://www.sqlalchemy.org/trac/ticket/2328)'
  id: totrans-575
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2328](https://www.sqlalchemy.org/trac/ticket/2328)
- en: '**[orm] [bug]**'
  id: totrans-576
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: __table_args__ can now be passed as an empty tuple as well as an empty dict..
    Thanks to Fayaz Yusuf Khan for the patch.
  id: totrans-577
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: __table_args__ 现在可以传递为空元组或空字典。感谢 Fayaz Yusuf Khan 提交的补丁。
- en: 'References: [#2339](https://www.sqlalchemy.org/trac/ticket/2339)'
  id: totrans-578
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2339](https://www.sqlalchemy.org/trac/ticket/2339)
- en: '**[orm] [bug]**'
  id: totrans-579
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Updated warning message when setting delete-orphan without delete to no longer
    refer to 0.6, as we never got around to upgrading this to an exception. Ideally
    this might be better as an exception but it’s not critical either way.
  id: totrans-580
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当设置 delete-orphan 而没有删除时，更新警告消息不再引用 0.6 版本，因为我们从未升级为异常处理。理想情况下，这可能更好地作为一个异常，但无论如何都不是关键的。
- en: 'References: [#2325](https://www.sqlalchemy.org/trac/ticket/2325)'
  id: totrans-581
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2325](https://www.sqlalchemy.org/trac/ticket/2325)
- en: '**[orm] [bug]**'
  id: totrans-582
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in get_history() when referring to a composite attribute that has
    no value; added coverage for get_history() regarding composites which is otherwise
    just a userland function.
  id: totrans-583
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在引用没有值的复合属性时修复了 get_history() 中的错误；增加了对 composites 的 get_history() 的覆盖，否则这只是一个用户级功能。
- en: examples
  id: totrans-584
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples] [bug]**'
  id: totrans-585
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples] [bug]**'
- en: Fixed bug in history_meta.py example where the “unique” flag was not removed
    from a single-table-inheritance subclass which generates columns to put up onto
    the base.
  id: totrans-586
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 history_meta.py 示例中的 bug，在其中“unique”标志未从生成列放在基类上的单表继承子类中移除。
- en: engine
  id: totrans-587
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-588
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed bug whereby transaction.rollback() would throw an error on an invalidated
    connection if the transaction were a two-phase or savepoint transaction. For plain
    transactions, rollback() is a no-op if the connection is invalidated, so while
    it wasn’t 100% clear if it should be a no-op, at least now the interface is consistent.
  id: totrans-589
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 transaction.rollback() 在事务是两阶段或保存点事务时在无效连接上抛出错误的 bug。对于普通事务，如果连接无效，rollback()
    是一个空操作，所以虽然不清楚它是否应该是一个空操作，但至少现在接口是一致的。
- en: 'References: [#2317](https://www.sqlalchemy.org/trac/ticket/2317)'
  id: totrans-590
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2317](https://www.sqlalchemy.org/trac/ticket/2317)
- en: sql
  id: totrans-591
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-592
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: The update() construct can now accommodate multiple tables in the WHERE clause,
    which will render an “UPDATE..FROM” construct, recognized by PostgreSQL and MSSQL.
    When compiled on MySQL, will instead generate “UPDATE t1, t2, ..”. MySQL additionally
    can render against multiple tables in the SET clause, if Column objects are used
    as keys in the “values” parameter or generative method.
  id: totrans-593
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: update() 构造现在可以在 WHERE 子句中容纳多个表，这将生成一个“UPDATE..FROM”构造，由 PostgreSQL 和 MSSQL
    识别。在 MySQL 上编译时，将生成“UPDATE t1, t2, ..”。此外，如果“values”参数或生成方法中使用 Column 对象作为键，则
    MySQL 还可以在 SET 子句中渲染对多个表的更新。
- en: 'References: [#1944](https://www.sqlalchemy.org/trac/ticket/1944), [#2166](https://www.sqlalchemy.org/trac/ticket/2166)'
  id: totrans-594
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1944](https://www.sqlalchemy.org/trac/ticket/1944), [#2166](https://www.sqlalchemy.org/trac/ticket/2166)
- en: '**[sql] [feature]**'
  id: totrans-595
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added accessor to types called “python_type”, returns the rudimentary Python
    type object for a particular TypeEngine instance, if known, else raises NotImplementedError.
  id: totrans-596
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了名为“python_type”的类型访问器，返回特定 TypeEngine 实例的基本 Python 类型对象，如果已知，否则引发 NotImplementedError。
- en: 'References: [#77](https://www.sqlalchemy.org/trac/ticket/77)'
  id: totrans-597
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#77](https://www.sqlalchemy.org/trac/ticket/77)
- en: '**[sql] [bug]**'
  id: totrans-598
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL] [错误]**'
- en: related to, made some adjustments to the change from regarding the “from” list
    on a select(). The _froms collection is no longer memoized, as this simplifies
    various use cases and removes the need for a “warning” if a column is attached
    to a table after it was already used in an expression - the select() construct
    will now always produce the correct expression. There’s probably no real-world
    performance hit here; select() objects are almost always made ad-hoc, and systems
    that wish to optimize the re-use of a select() would be using the “compiled_cache”
    feature. A hit which would occur when calling select.bind has been reduced, but
    the vast majority of users shouldn’t be using “bound metadata” anyway :).
  id: totrans-599
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关于，对于关于select()中“from”列表的更改进行了一些调整。_froms集合不再被记忆，因为这简化了各种用例，并消除了在表在表达式中使用之后附加列时需要“警告”的需要
    - select()构造现在将始终生成正确的表达式。这里可能没有真实世界的性能损失；select()对象几乎总是临时制作的，希望优化select()的重用的系统将使用“compiled_cache”功能。调用select.bind时会减少一个命中，但绝大多数用户不应该使用“bound
    metadata”：）。
- en: 'References: [#2261](https://www.sqlalchemy.org/trac/ticket/2261), [#2316](https://www.sqlalchemy.org/trac/ticket/2316)'
  id: totrans-600
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2261](https://www.sqlalchemy.org/trac/ticket/2261), [#2316](https://www.sqlalchemy.org/trac/ticket/2316)
- en: '**[sql] [bug]**'
  id: totrans-601
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL] [错误]**'
- en: further tweak to the fix from, so that generative methods work a bit better
    off of cloned (this is almost a non-use case though). In particular this allows
    with_only_columns() to behave more consistently. Added additional documentation
    to with_only_columns() to clarify expected behavior, which changed as a result
    of.
  id: totrans-602
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 进一步调整了来自的修复，以便生成方法在克隆后更好地工作（尽管这几乎是一个不常见的用例）。特别是这允许with_only_columns()更一致地行为。添加了额外的文档以澄清with_only_columns()的预期行为，这是由于结果而改变的。
- en: 'References: [#2261](https://www.sqlalchemy.org/trac/ticket/2261), [#2319](https://www.sqlalchemy.org/trac/ticket/2319)'
  id: totrans-603
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2261](https://www.sqlalchemy.org/trac/ticket/2261), [#2319](https://www.sqlalchemy.org/trac/ticket/2319)
- en: schema
  id: totrans-604
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: '**[schema] [feature]**'
  id: totrans-605
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [特性]**'
- en: 'Added new support for remote “schemas”:'
  id: totrans-606
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对���程“模式”的新支持：
- en: '**[schema] [feature]**'
  id: totrans-607
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [特性]**'
- en: The “extend_existing” flag on Table now allows for the reflection process to
    take effect for a Table object that’s already been defined; when autoload=True
    and extend_existing=True are both set, the full set of columns will be reflected
    from the Table which will then *overwrite* those columns already present, rather
    than no activity occurring. Columns that are present directly in the autoload
    run will be used as always, however.
  id: totrans-608
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Table上的“extend_existing”标志现在允许反射过程对已经定义的Table对象生效；当autoload=True和extend_existing=True都设置时，将从Table中反射出完整的列集，然后将*覆盖*已经存在的列，而不是不发生任何活动。然而，直接在autoload运行中存在的列将像往常一样使用。
- en: 'References: [#1410](https://www.sqlalchemy.org/trac/ticket/1410)'
  id: totrans-609
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1410](https://www.sqlalchemy.org/trac/ticket/1410)
- en: '**[schema] [bug]**'
  id: totrans-610
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [错误]**'
- en: Fixed bug whereby TypeDecorator would return a stale value for _type_affinity,
    when using a TypeDecorator that “switches” types, like the CHAR/UUID type.
  id: totrans-611
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了TypeDecorator在使用“切换”类型的TypeDecorator时会返回过时值的错误，例如CHAR/UUID类型。
- en: '**[schema] [bug]**'
  id: totrans-612
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [错误]**'
- en: Fixed bug whereby “order_by=’foreign_key’” option to Inspector.get_table_names
    wasn’t implementing the sort properly, replaced with the existing sort algorithm
  id: totrans-613
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Inspector.get_table_names中“order_by='foreign_key'”选项未正确实现排序的错误，替换为现有的排序算法
- en: '**[schema] [bug]**'
  id: totrans-614
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [错误]**'
- en: the “name” of a column-level CHECK constraint, if present, is now rendered in
    the CREATE TABLE statement using “CONSTRAINT <name> CHECK <expression>”.
  id: totrans-615
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果存在列级CHECK约束的“name”，现在在CREATE TABLE语句中使用“CONSTRAINT <name> CHECK <expression>”进行呈现。
- en: 'References: [#2305](https://www.sqlalchemy.org/trac/ticket/2305)'
  id: totrans-616
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2305](https://www.sqlalchemy.org/trac/ticket/2305)
- en: '**[schema]**'
  id: totrans-617
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: MetaData() accepts “schema” and “quote_schema” arguments, which will be applied
    to the same-named arguments of a Table or Sequence which leaves these at their
    default of `None`.
  id: totrans-618
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MetaData()接受“schema”和“quote_schema”参数，这些参数将应用于同名参数的Table或Sequence，这些参数保持默认值为`None`。
- en: '**[schema]**'
  id: totrans-619
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: Sequence accepts “quote_schema” argument
  id: totrans-620
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Sequence接受“quote_schema”参数
- en: '**[schema]**'
  id: totrans-621
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: tometadata() for Table will use the “schema” of the incoming MetaData for the
    new Table if the schema argument is explicitly “None”
  id: totrans-622
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于Table，如果schema参数明确为“None”，tometadata()将使用传入的MetaData的“schema”来创建新的Table
- en: '**[schema]**'
  id: totrans-623
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: Added CreateSchema and DropSchema DDL constructs - these accept just the string
    name of a schema and a “quote” flag.
  id: totrans-624
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了CreateSchema和DropSchema DDL构造 - 这些仅接受模式的字符串名称和一个“quote”标志。
- en: '**[schema]**'
  id: totrans-625
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: When using default “schema” with MetaData, ForeignKey will also assume the “default”
    schema when locating remote table. This allows the “schema” argument on MetaData
    to be applied to any set of Table objects that otherwise don’t have a “schema”.
  id: totrans-626
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当在MetaData中使用默认“schema”时，ForeignKey在定位远程表时也会假定“default”模式。这允许将MetaData上的“schema”参数应用于任何一组否则没有“schema”的Table对象。
- en: '**[schema]**'
  id: totrans-627
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: a “has_schema” method has been implemented on dialect, but only works on PostgreSQL
    so far. Courtesy Manlio Perillo.
  id: totrans-628
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在方言上实现了一个“has_schema”方法，但目前只在PostgreSQL上有效。感谢Manlio Perillo。
- en: 'References: [#1679](https://www.sqlalchemy.org/trac/ticket/1679)'
  id: totrans-629
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1679](https://www.sqlalchemy.org/trac/ticket/1679)
- en: postgresql
  id: totrans-630
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-631
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added create_type constructor argument to pg.ENUM. When False, no CREATE/DROP
    or checking for the type will be performed as part of a table create/drop event;
    only the create()/drop)() methods called directly will do this. Helps with Alembic
    “offline” scripts.
  id: totrans-632
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了create_type构造函数参数到pg.ENUM。当为False时，在表创建/删除事件中不会执行CREATE/DROP或检查类型；只有直接调用create()/drop()方法时才会执行此操作。有助于Alembic的“离线”脚本。
- en: '**[postgresql] [bug]**'
  id: totrans-633
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: PostgreSQL dialect memoizes that an ENUM of a particular name was processed
    during a create/drop sequence. This allows a create/drop sequence to work without
    any calls to “checkfirst”, and also means with “checkfirst” turned on it only
    needs to check for the ENUM once.
  id: totrans-634
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: PostgreSQL方言会记忆一个特定名称的ENUM在创建/删除序列期间已被处理。这使得在不需要任何“checkfirst”调用的情况下，创建/删除序列可以正常工作，并且在打开“checkfirst”时，只需要检查ENUM一次。
- en: 'References: [#2311](https://www.sqlalchemy.org/trac/ticket/2311)'
  id: totrans-635
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2311](https://www.sqlalchemy.org/trac/ticket/2311)
- en: mysql
  id: totrans-636
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-637
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Unicode adjustments allow latest pymysql (post 0.4) to pass 100% on Python 2.
  id: totrans-638
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Unicode调整允许最新的pymysql（0.4之后）在Python 2上通过100%。
- en: mssql
  id: totrans-639
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [feature]**'
  id: totrans-640
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [feature]**'
- en: lifted the restriction on SAVEPOINT for SQL Server. All tests pass using it,
    it’s not known if there are deeper issues however.
  id: totrans-641
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 解除了对SQL Server的SAVEPOINT限制。所有测试都通过了，但不清楚是否存在更深层次的问题。
- en: 'References: [#822](https://www.sqlalchemy.org/trac/ticket/822)'
  id: totrans-642
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#822](https://www.sqlalchemy.org/trac/ticket/822)
- en: '**[mssql] [bug]**'
  id: totrans-643
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: repaired the with_hint() feature which wasn’t implemented correctly on MSSQL
    - usually used for the “WITH (NOLOCK)” hint (which you shouldn’t be using anyway
    ! use snapshot isolation instead :) )
  id: totrans-644
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在MSSQL上未正确实现的with_hint()功能 - 通常用于“WITH (NOLOCK)”提示（你不应该使用！应该使用快照隔离 :) ）
- en: 'References: [#2336](https://www.sqlalchemy.org/trac/ticket/2336)'
  id: totrans-645
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2336](https://www.sqlalchemy.org/trac/ticket/2336)
- en: '**[mssql] [bug]**'
  id: totrans-646
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: use new pyodbc version detection for _need_decimal_fix option.
  id: totrans-647
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用新的pyodbc版本检测选项来修复_need_decimal_fix。
- en: 'References: [#2318](https://www.sqlalchemy.org/trac/ticket/2318)'
  id: totrans-648
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2318](https://www.sqlalchemy.org/trac/ticket/2318)
- en: '**[mssql] [bug]**'
  id: totrans-649
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: don’t cast “table name” as NVARCHAR on SQL Server 2000\. Still mostly in the
    dark what incantations are needed to make PyODBC work fully with FreeTDS 0.91
    here, however.
  id: totrans-650
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不要在SQL Server 2000上将“表名”转换为NVARCHAR。然而，目前仍不清楚如何使PyODBC与FreeTDS 0.91完全配合。
- en: 'References: [#2343](https://www.sqlalchemy.org/trac/ticket/2343)'
  id: totrans-651
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2343](https://www.sqlalchemy.org/trac/ticket/2343)
- en: '**[mssql] [bug]**'
  id: totrans-652
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Decode incoming values when retrieving list of index names and the names of
    columns within those indexes.
  id: totrans-653
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 解码传入值以检索索引名称列表和这些索引中列的名称。
- en: 'References: [#2269](https://www.sqlalchemy.org/trac/ticket/2269)'
  id: totrans-654
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2269](https://www.sqlalchemy.org/trac/ticket/2269)
- en: misc
  id: totrans-655
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[feature] [ext]**'
  id: totrans-656
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[feature] [ext]**'
- en: Added an example to the hybrid docs of a “transformer” - a hybrid that returns
    a query-transforming callable in combination with a custom comparator. Uses a
    new method on Query called with_transformation(). The use case here is fairly
    experimental, but only adds one line of code to Query.
  id: totrans-657
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在混合文档中添加了一个“transformer”的示例 - 一个返回查询转换可调用对象的混合，与自定义比较器结合使用。使用Query上的新方法with_transformation()。这里的用例相当实验性，但只需在Query中添加一行代码。
- en: '**[bug] [pyodbc]**'
  id: totrans-658
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [pyodbc]**'
- en: pyodbc-based dialects now parse the pyodbc accurately as far as observed pyodbc
    strings, including such gems as “py3-3.0.1-beta4”
  id: totrans-659
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 基于pyodbc的方言现在可以准确解析pyodbc字符串，包括“py3-3.0.1-beta4”等珍贵内容。
- en: 'References: [#2318](https://www.sqlalchemy.org/trac/ticket/2318)'
  id: totrans-660
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2318](https://www.sqlalchemy.org/trac/ticket/2318)
- en: '**[bug] [ext]**'
  id: totrans-661
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: the @compiles decorator raises an informative error message when no “default”
    compilation handler is present, rather than KeyError.
  id: totrans-662
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当没有“默认”编译处理程序时，@compiles装饰器会引发一个信息性错误消息，而不是KeyError。
- en: 0.7.3
  id: totrans-663
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.7.3
- en: 'Released: Sun Oct 16 2011'
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2011年10月16日（星期日）
- en: general
  id: totrans-665
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通用
- en: '**[general]**'
  id: totrans-666
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[通用]**'
- en: Adjusted the “importlater” mechanism, which is used internally to resolve import
    cycles, such that the usage of __import__ is completed when the import of sqlalchemy
    or sqlalchemy.orm is done, thereby avoiding any usage of __import__ after the
    application starts new threads, fixes. Also in 0.6.9.
  id: totrans-667
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了“importlater”机制，该机制在内部用于解析导入循环，使得在导入sqlalchemy或sqlalchemy.orm之后完成了对__import__的使用，从而避免在应用程序启动新线程后使用__import__。修复。也适用于0.6.9版本。
- en: 'References: [#2279](https://www.sqlalchemy.org/trac/ticket/2279)'
  id: totrans-668
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2279](https://www.sqlalchemy.org/trac/ticket/2279)
- en: orm
  id: totrans-669
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM
- en: '**[orm]**'
  id: totrans-670
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Improved query.join() such that the “left” side can more flexibly be a non-ORM
    selectable, such as a subquery. A selectable placed in select_from() will now
    be used as the left side, favored over implicit usage of a mapped entity. If the
    join still fails based on lack of foreign keys, the error message includes this
    detail. Thanks to brianrhude on IRC for the test case.
  id: totrans-671
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了query.join()，使得“左”侧可以更灵活地是非ORM可选择的，例如一个子查询。现在放置在select_from()中的可选择项将被用作左侧，并优先于隐式使用映射的实体。如果基于外键缺失仍然失败，错误消息将包含此细节。感谢IRC上的brianrhude提供的测试用例。
- en: 'References: [#2298](https://www.sqlalchemy.org/trac/ticket/2298)'
  id: totrans-672
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2298](https://www.sqlalchemy.org/trac/ticket/2298)
- en: '**[orm]**'
  id: totrans-673
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Added after_soft_rollback() Session event. This event fires unconditionally
    whenever rollback() is called, regardless of if an actual DBAPI level rollback
    occurred. This event is specifically designed to allow operations with the Session
    to proceed after a rollback when the Session.is_active is True.
  id: totrans-674
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了after_soft_rollback() Session事件。无论是否发生实际的DBAPI级别回滚，此事件都会在调用rollback()时无条件触发。该事件专门设计用于在回滚后，当Session.is_active为True时，允许对Session进行操作。
- en: 'References: [#2241](https://www.sqlalchemy.org/trac/ticket/2241)'
  id: totrans-675
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2241](https://www.sqlalchemy.org/trac/ticket/2241)
- en: '**[orm]**'
  id: totrans-676
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: added “adapt_on_names” boolean flag to orm.aliased() construct. Allows an aliased()
    construct to link the ORM entity to a selectable that contains aggregates or other
    derived forms of a particular attribute, provided the name is the same as that
    of the entity mapped column.
  id: totrans-677
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向orm.aliased()构造添加了“adapt_on_names”布尔标志。允许一个aliased()构造将ORM实体链接到一个包含聚合或其他派生形式特定属性的可选择项，前提是名称与实体映射列的名称相同。
- en: '**[orm]**'
  id: totrans-678
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Added new flag expire_on_flush=False to column_property(), marks those properties
    that would otherwise be considered to be “readonly”, i.e. derived from SQL expressions,
    to retain their value after a flush has occurred, including if the parent object
    itself was involved in an update.
  id: totrans-679
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向column_property()添加了新标志expire_on_flush=False，将那些本来被视为“只读”的属性标记为，在刷新发生后保留它们的值，即使父对象本身参与了更新。
- en: '**[orm]**'
  id: totrans-680
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Enhanced the instrumentation in the ORM to support Py3K’s new argument style
    of “required kw arguments”, i.e. fn(a, b, *, c, d), fn(a, b, *args, c, d). Argument
    signatures of mapped object’s __init__ method will be preserved, including required
    kw rules.
  id: totrans-681
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增强了ORM中的仪器支持Py3K的新参数样式“必需的kw参数”，即fn(a, b, *, c, d)，fn(a, b, *args, c, d)。映射对象的__init__方法的参数签名将被保留，包括必需的kw规则。
- en: 'References: [#2237](https://www.sqlalchemy.org/trac/ticket/2237)'
  id: totrans-682
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2237](https://www.sqlalchemy.org/trac/ticket/2237)
- en: '**[orm]**'
  id: totrans-683
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Fixed bug in unit of work whereby detection of “cycles” among classes in highly
    interlinked patterns would not produce a deterministic result; thereby sometimes
    missing some nodes that should be considered cycles and causing further issues
    down the road. Note this bug is in 0.6 also; not backported at the moment.
  id: totrans-684
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了单位工作中的错误，即在高度相互链接的模式中的类之间检测“循环”时不会产生确定性结果；因此有时会漏掉一些应该被认为是循环的节点，并在后续出现问题。请注意，此错误也存在于0.6版本中；目前未进行回溯。
- en: 'References: [#2282](https://www.sqlalchemy.org/trac/ticket/2282)'
  id: totrans-685
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#2282](https://www.sqlalchemy.org/trac/ticket/2282)
- en: '**[orm]**'
  id: totrans-686
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: 'Fixed a variety of synonym()-related regressions from 0.6:'
  id: totrans-687
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从0.6版本中修复了各种与synonym()相关的回归问题：
- en: making a synonym against a synonym now works.
  id: totrans-688
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在允许对同义词进行同义词操作。
- en: ''
  id: totrans-689
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-690
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: synonyms made against a relationship() can be passed to query.join(), options
    sent to query.options(), passed by name to query.with_parent().
  id: totrans-691
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对relationship()创建的同义词可以传递给query.join()、传递给query.options()的选项，以及通过名称传递给query.with_parent()。
- en: '**[orm]**'
  id: totrans-692
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Fixed bug whereby mapper.order_by attribute would be ignored in the “inner”
    query within a subquery eager load. . Also in 0.6.9.
  id: totrans-693
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，其中mapper.order_by属性在子查询急加载中的“内部”查询中会被忽略。同时也在0.6.9版本中修复。
- en: 'References: [#2287](https://www.sqlalchemy.org/trac/ticket/2287)'
  id: totrans-694
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2287](https://www.sqlalchemy.org/trac/ticket/2287)
- en: '**[orm]**'
  id: totrans-695
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Identity map .discard() uses dict.pop(,None) internally instead of “del” to
    avoid KeyError/warning during a non-determinate gc teardown
  id: totrans-696
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Identity map .discard()在内部使用dict.pop(,None)而不是“del”来避免在非确定性gc拆除期间出现KeyError/警告。
- en: 'References: [#2267](https://www.sqlalchemy.org/trac/ticket/2267)'
  id: totrans-697
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2267](https://www.sqlalchemy.org/trac/ticket/2267)
- en: '**[orm]**'
  id: totrans-698
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed regression in new composite rewrite where deferred=True option failed
    due to missing import
  id: totrans-699
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新的composite重写中的回归，由于缺少导入而导致deferred=True选项失败。
- en: 'References: [#2253](https://www.sqlalchemy.org/trac/ticket/2253)'
  id: totrans-700
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2253](https://www.sqlalchemy.org/trac/ticket/2253)
- en: '**[orm]**'
  id: totrans-701
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Reinstated “comparator_factory” argument to composite(), removed when 0.7 was
    released.
  id: totrans-702
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重新引入了“comparator_factory”参数到composite()，在0.7发布时被移除。
- en: 'References: [#2248](https://www.sqlalchemy.org/trac/ticket/2248)'
  id: totrans-703
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2248](https://www.sqlalchemy.org/trac/ticket/2248)
- en: '**[orm]**'
  id: totrans-704
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug in query.join() which would occur in a complex multiple-overlapping
    path scenario, where the same table could be joined to twice. Thanks *much* to
    Dave Vitek for the excellent fix here.
  id: totrans-705
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在query.join()中出现的bug，在复杂的多重重叠路径场景中会发生，同一张表可能会被连接两次。特别感谢Dave Vitek在这里的出色修复。
- en: 'References: [#2247](https://www.sqlalchemy.org/trac/ticket/2247)'
  id: totrans-706
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2247](https://www.sqlalchemy.org/trac/ticket/2247)
- en: '**[orm]**'
  id: totrans-707
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query will convert an OFFSET of zero when slicing into None, so that needless
    OFFSET clauses are not invoked.
  id: totrans-708
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query将把OFFSET为零的切片转换为None，以避免不必要的OFFSET子句被调用。
- en: '**[orm]**'
  id: totrans-709
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Repaired edge case where mapper would fail to fully update internal state when
    a relationship on a new mapper would establish a backref on the first mapper.
  id: totrans-710
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个边缘情况，其中当新映射上的关系在第一个映射上建立一个backref时，mapper会无法完全更新内部状态。
- en: '**[orm]**'
  id: totrans-711
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby if __eq__() was redefined, a relationship many-to-one lazyload
    would hit the __eq__() and fail. Does not apply to 0.6.9.
  id: totrans-712
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即如果重新定义了__eq__()，一个关系多对一的lazyload会触发__eq__()并失败。不适用于0.6.9版本。
- en: 'References: [#2260](https://www.sqlalchemy.org/trac/ticket/2260)'
  id: totrans-713
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2260](https://www.sqlalchemy.org/trac/ticket/2260)
- en: '**[orm]**'
  id: totrans-714
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Calling class_mapper() and passing in an object that is not a “type” (i.e. a
    class that could potentially be mapped) now raises an informative ArgumentError,
    rather than UnmappedClassError.
  id: totrans-715
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调用class_mapper()并传入一个不是“类型”的对象（即可能被映射的类）现在会引发一个信息性的ArgumentError，而不是UnmappedClassError。
- en: 'References: [#2196](https://www.sqlalchemy.org/trac/ticket/2196)'
  id: totrans-716
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2196](https://www.sqlalchemy.org/trac/ticket/2196)
- en: '**[orm]**'
  id: totrans-717
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: New event hook, MapperEvents.after_configured(). Called after a configure()
    step has completed and mappers were in fact affected. Theoretically this event
    is called once per application, unless new mappings are constructed after existing
    ones have been used already.
  id: totrans-718
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新的事件钩子，MapperEvents.after_configured()。在configure()步骤完成并且映射实际受到影响后调用。理论上，该事件在应用程序中只调用一次，除非在已经使用现有映射之后构建新映射。
- en: '**[orm]**'
  id: totrans-719
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: When an open Session is garbage collected, the objects within it which remain
    are considered detached again when they are add()-ed to a new Session. This is
    accomplished by an extra check that the previous “session_key” doesn’t actually
    exist among the pool of Sessions.
  id: totrans-720
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当一个打开的Session被垃圾回收时，其中保留的对象再次被认为是分离的，当它们被add()-ed到一个新的Session时。这是通过额外检查前一个“session_key”是否实际存在于Sessions池中来实现的。
- en: 'References: [#2281](https://www.sqlalchemy.org/trac/ticket/2281)'
  id: totrans-721
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2281](https://www.sqlalchemy.org/trac/ticket/2281)
- en: '**[orm]**'
  id: totrans-722
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'New declarative features:'
  id: totrans-723
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新的声明性特性：
- en: __declare_last__() method, establishes an event listener for the class method
    that will be called when mappers are completed with the final “configure” step.
  id: totrans-724
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: __declare_last__()方法，为类方法建立一个事件监听器，当映射完成最终的“configure”步骤时将被调用。
- en: ''
  id: totrans-725
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-726
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: __abstract__ flag. The class will not be mapped at all when this flag is present
    on the class.
  id: totrans-727
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: __abstract__标志。当该标志存在于类上时，该类将不会被映射。
- en: ''
  id: totrans-728
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-729
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: New helper classes ConcreteBase, AbstractConcreteBase. Allow concrete mappings
    using declarative which automatically set up the “polymorphic_union” when the
    “configure” mapper step is invoked.
  id: totrans-730
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的辅助类ConcreteBase，AbstractConcreteBase。允许使用声明性进行具体映射，当“configure”映射步骤被调用时自动设置“polymorphic_union”。
- en: ''
  id: totrans-731
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-732
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: The mapper itself has semi-private methods that allow the “with_polymorphic”
    selectable to be assigned to the mapper after it has already been configured.
  id: totrans-733
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 映射器本身有半私有方法，允许在配置完成后将“with_polymorphic”可选分配给映射器。
- en: 'References: [#2239](https://www.sqlalchemy.org/trac/ticket/2239)'
  id: totrans-734
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2239](https://www.sqlalchemy.org/trac/ticket/2239)
- en: '**[orm]**'
  id: totrans-735
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Declarative will warn when a subclass’ base uses @declared_attr for a regular
    column - this attribute does not propagate to subclasses.
  id: totrans-736
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当子类的基类使用 @declared_attr 来定义常规列时，声明性将发出警告——此属性不会传播到子类。
- en: 'References: [#2283](https://www.sqlalchemy.org/trac/ticket/2283)'
  id: totrans-737
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2283](https://www.sqlalchemy.org/trac/ticket/2283)
- en: '**[orm]**'
  id: totrans-738
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The integer “id” used to link a mapped instance with its owning Session is now
    generated by a sequence generation function rather than id(Session), to eliminate
    the possibility of recycled id() values causing an incorrect result, no need to
    check that object actually in the session.
  id: totrans-739
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于将映射实例与其所属会话链接的整数“id”现在由序列生成函数生成，而不是 id(Session)，以消除回收的 id() 值可能导致不正确结果的可能性，无需检查对象实际是否在会话中。
- en: 'References: [#2280](https://www.sqlalchemy.org/trac/ticket/2280)'
  id: totrans-740
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2280](https://www.sqlalchemy.org/trac/ticket/2280)
- en: '**[orm]**'
  id: totrans-741
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Behavioral improvement: empty conjunctions such as and_() and or_() will be
    flattened in the context of an enclosing conjunction, i.e. and_(x, or_()) will
    produce ‘X’ and not ‘X AND ()’..'
  id: totrans-742
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 行为改进：空的连接词，如 and_() 和 or_()，在包含连接词的上下文中将被展开，即 and_(x, or_()) 将产生 'X' 而不是 'X
    AND ()'。
- en: 'References: [#2257](https://www.sqlalchemy.org/trac/ticket/2257)'
  id: totrans-743
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2257](https://www.sqlalchemy.org/trac/ticket/2257)
- en: '**[orm]**'
  id: totrans-744
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug regarding calculation of “from” list for a select() element. The “from”
    calc is now delayed, so that if the construct uses a Column object that is not
    yet attached to a Table, but is later associated with a Table, it generates SQL
    using the table as a FROM. This change impacted fairly deeply the mechanics of
    how the FROM list as well as the “correlates” collection is calculated, as some
    “clause adaption” schemes (these are used very heavily in the ORM) were relying
    upon the fact that the “froms” collection would typically be cached before the
    adaption completed. The rework allows it such that the “froms” collection can
    be cleared and re-generated at any time.
  id: totrans-745
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了有关选择器的“from”列表计算的错误。现在，“from”计算被延迟，所以如果构造使用尚未附加到表的列对象，但稍后与表关联，则会使用该表生成 SQL
    作为 FROM。这个更改对“froms”列表以及“correlates”集合的计算机制产生了相当深远的影响，因为一些“clause adaption”方案（这些方案在
    ORM 中被大量使用）依赖于“froms”集合通常在适应完成之前会被缓存的事实。重写允许在任何时候清除并重新生成“froms”集合。
- en: 'References: [#2261](https://www.sqlalchemy.org/trac/ticket/2261)'
  id: totrans-746
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2261](https://www.sqlalchemy.org/trac/ticket/2261)
- en: '**[orm]**'
  id: totrans-747
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby with_only_columns() method of Select would fail if a selectable
    were passed.. Also in 0.6.9.
  id: totrans-748
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 Select 的 with_only_columns() 方法如果传递了可选择对象，则会失败的错误。还包括在 0.6.9 版本中。
- en: 'References: [#2270](https://www.sqlalchemy.org/trac/ticket/2270)'
  id: totrans-749
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2270](https://www.sqlalchemy.org/trac/ticket/2270)
- en: examples
  id: totrans-750
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: examples
- en: '**[examples]**'
  id: totrans-751
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples]**'
- en: Adjusted dictlike-polymorphic.py example to apply the CAST such that it works
    on PG, other databases. Also in 0.6.9.
  id: totrans-752
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了 dictlike-polymorphic.py 示例以应用 CAST，使其在 PG 和其他数据库上运行。还包括在 0.6.9 版本中。
- en: 'References: [#2266](https://www.sqlalchemy.org/trac/ticket/2266)'
  id: totrans-753
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2266](https://www.sqlalchemy.org/trac/ticket/2266)
- en: engine
  id: totrans-754
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine]**'
  id: totrans-755
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: The recreate() method in all pool classes uses self.__class__ to get at the
    type of pool to produce, in the case of subclassing. Note there’s no usual need
    to subclass pools.
  id: totrans-756
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 所有池类中的 recreate() 方法都使用 self.__class__ 来获取要生成的池类型，以支持子类化的情况。请注意，通常不需要对池进行子类化。
- en: 'References: [#2254](https://www.sqlalchemy.org/trac/ticket/2254)'
  id: totrans-757
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2254](https://www.sqlalchemy.org/trac/ticket/2254)
- en: '**[engine]**'
  id: totrans-758
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: Improvement to multi-param statement logging, long lists of bound parameter
    sets will be compressed with an informative indicator of the compression taking
    place. Exception messages use the same improved formatting.
  id: totrans-759
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于多参数语句记录的改进，长列表的绑定参数集将使用信息性指示器进行压缩。异常消息使用相同的改进格式。
- en: 'References: [#2243](https://www.sqlalchemy.org/trac/ticket/2243)'
  id: totrans-760
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2243](https://www.sqlalchemy.org/trac/ticket/2243)
- en: '**[engine]**'
  id: totrans-761
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: Added optional “sa_pool_key” argument to pool.manage(dbapi).connect() so that
    serialization of args is not necessary.
  id: totrans-762
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 pool.manage(dbapi).connect() 中添加了可选的“sa_pool_key”参数，因此不需要对参数进行序列化。
- en: '**[engine]**'
  id: totrans-763
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: The entry point resolution supported by create_engine() now supports resolution
    of individual DBAPI drivers on top of a built-in or entry point-resolved dialect,
    using the standard ‘+’ notation - it’s converted to a ‘.’ before being resolved
    as an entry point.
  id: totrans-764
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: create_engine() 支持的入口点解析现在支持在内置或入口点解析的方言之上解析单独的 DBAPI 驱动程序，使用标准的‘+’符号 - 在解析为入口点之前会将其转换为‘.’。
- en: 'References: [#2286](https://www.sqlalchemy.org/trac/ticket/2286)'
  id: totrans-765
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2286](https://www.sqlalchemy.org/trac/ticket/2286)
- en: '**[engine]**'
  id: totrans-766
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: Added an exception catch + warning for the “return unicode detection” step within
    connect, allows databases that crash on NVARCHAR to continue initializing, assuming
    no NVARCHAR type implemented.
  id: totrans-767
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在连接中为“返回 unicode 检测”步骤添加了异常捕获和警告，允许在 NVARCHAR 上崩溃的数据库继续初始化，假设没有实现 NVARCHAR 类型。
- en: 'References: [#2299](https://www.sqlalchemy.org/trac/ticket/2299)'
  id: totrans-768
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2299](https://www.sqlalchemy.org/trac/ticket/2299)
- en: schema
  id: totrans-769
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: '**[schema]**'
  id: totrans-770
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: Modified Column.copy() to use _constructor(), which defaults to self.__class__,
    in order to create the new object. This allows easier support of subclassing Column.
  id: totrans-771
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了 Column.copy() 使用 _constructor()，默认为 self.__class__，以创建新对象。这样可以更容易地支持 Column
    的子类化。
- en: 'References: [#2284](https://www.sqlalchemy.org/trac/ticket/2284)'
  id: totrans-772
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2284](https://www.sqlalchemy.org/trac/ticket/2284)
- en: '**[schema]**'
  id: totrans-773
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: Added a slightly nicer __repr__() to SchemaItem classes. Note the repr here
    can’t fully support the “repr is the constructor” idea since schema items can
    be very deeply nested/cyclical, have late initialization of some things, etc.
  id: totrans-774
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 SchemaItem 类添加了稍微更好的 __repr__()。请注意，这里的 repr 无法完全支持“repr 是构造函数”的想法，因为模式项可以非常深度嵌套/循环，某些内容的初始化较晚，等等。
- en: 'References: [#2223](https://www.sqlalchemy.org/trac/ticket/2223)'
  id: totrans-775
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2223](https://www.sqlalchemy.org/trac/ticket/2223)
- en: postgresql
  id: totrans-776
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql]**'
  id: totrans-777
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Added “postgresql_using” argument to Index(), produces USING clause to specify
    index implementation for PG. . Thanks to Ryan P. Kelly for the patch.
  id: totrans-778
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Index() 中添加了“postgresql_using”参数，生成 USING 子句以指定 PG 的索引实现。感谢 Ryan P. Kelly
    提供的补丁。
- en: 'References: [#2290](https://www.sqlalchemy.org/trac/ticket/2290)'
  id: totrans-779
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2290](https://www.sqlalchemy.org/trac/ticket/2290)
- en: '**[postgresql]**'
  id: totrans-780
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Added client_encoding parameter to create_engine() when the postgresql+psycopg2
    dialect is used; calls the psycopg2 set_client_encoding() method with the value
    upon connect.
  id: totrans-781
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用 postgresql+psycopg2 方言时，为 create_engine() 添加了 client_encoding 参数；在连接时使用值调用
    psycopg2 的 set_client_encoding() 方法。
- en: 'References: [#1839](https://www.sqlalchemy.org/trac/ticket/1839)'
  id: totrans-782
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1839](https://www.sqlalchemy.org/trac/ticket/1839)
- en: '**[postgresql]**'
  id: totrans-783
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Fixed bug related to whereby the same modified index behavior in PG 9 affected
    primary key reflection on a renamed column.. Also in 0.6.9.
  id: totrans-784
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个与 PG 9 中修改的相同索引行为相关的错误，影响了重命名列上的主键反射。也适用于 0.6.9 版本。
- en: 'References: [#2141](https://www.sqlalchemy.org/trac/ticket/2141), [#2291](https://www.sqlalchemy.org/trac/ticket/2291)'
  id: totrans-785
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2141](https://www.sqlalchemy.org/trac/ticket/2141), [#2291](https://www.sqlalchemy.org/trac/ticket/2291)
- en: '**[postgresql]**'
  id: totrans-786
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Reflection functions for Table, Sequence no longer case insensitive. Names can
    be differ only in case and will be correctly distinguished.
  id: totrans-787
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'Table、Sequence 的反射函数不再区分大小写。名称只能在大小写上有区别，并且将被正确区分。 '
- en: 'References: [#2256](https://www.sqlalchemy.org/trac/ticket/2256)'
  id: totrans-788
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2256](https://www.sqlalchemy.org/trac/ticket/2256)
- en: '**[postgresql]**'
  id: totrans-789
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Use an atomic counter as the “random number” source for server side cursor names;
    conflicts have been reported in rare cases.
  id: totrans-790
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用原子计数器作为服务器端游标名称的“随机数”来源；在极少数情况下已报告冲突。
- en: '**[postgresql]**'
  id: totrans-791
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Narrowed the assumption made when reflecting a foreign-key referenced table
    with schema in the current search path; an explicit schema will be applied to
    the referenced table only if it actually matches that of the referencing table,
    which also has an explicit schema. Previously it was assumed that “current” schema
    was synonymous with the full search_path.
  id: totrans-792
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 缩小了在反射具有当前搜索路径中模式的外键引用表时所做的假设；仅当显式模式与引用表的模式匹配时，才会将显式模式应用于引用表。以前假定“当前”模式与完整搜索路径是同义词。
- en: 'References: [#2249](https://www.sqlalchemy.org/trac/ticket/2249)'
  id: totrans-793
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2249](https://www.sqlalchemy.org/trac/ticket/2249)
- en: mysql
  id: totrans-794
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-795
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: a CREATE TABLE will put the COLLATE option after CHARSET, which appears to be
    part of MySQL’s arbitrary rules regarding if it will actually work or not. Also
    in 0.6.9.
  id: totrans-796
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: CREATE TABLE 将在 CHARSET 之后放置 COLLATE 选项，这似乎是 MySQL 关于其是否实际工作的任意规则的一部分。也适用于 0.6.9
    版本。
- en: 'References: [#2225](https://www.sqlalchemy.org/trac/ticket/2225)'
  id: totrans-797
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2225](https://www.sqlalchemy.org/trac/ticket/2225)
- en: '**[mysql]**'
  id: totrans-798
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Added mysql_length parameter to Index construct, specifies “length” for indexes.
  id: totrans-799
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向Index构造添加了mysql_length参数，指定索引的“长度”。
- en: 'References: [#2293](https://www.sqlalchemy.org/trac/ticket/2293)'
  id: totrans-800
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2293](https://www.sqlalchemy.org/trac/ticket/2293)
- en: sqlite
  id: totrans-801
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite]**'
  id: totrans-802
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: Ensured that the same ValueError is raised for illegal date/time/datetime string
    parsed from the database regardless of whether C extensions are in use or not.
  id: totrans-803
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保无论是否使用C扩展，从数据库解析的非法日期/时间/日期时间字符串都会引发相同的ValueError。
- en: mssql
  id: totrans-804
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-805
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Changes to attempt support of FreeTDS 0.91 with Pyodbc. This includes that string
    binds are sent as Python unicode objects when FreeTDS 0.91 is detected, and a
    CAST(? AS NVARCHAR) is used when we detect for a table. However, I’d continue
    to characterize Pyodbc + FreeTDS 0.91 behavior as pretty crappy, there are still
    many queries such as used in reflection which cause a core dump on Linux, and
    it is not really usable at all on OSX, MemoryErrors abound and just plain broken
    unicode support.
  id: totrans-806
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 尝试支持FreeTDS 0.91与Pyodbc的结合。这包括当检测到FreeTDS 0.91时，将字符串绑定发送为Python unicode对象，并在检测到表时使用CAST(?
    AS NVARCHAR)。然而，我会继续将Pyodbc + FreeTDS 0.91的行为描述为相当糟糕，仍然有许多查询（例如在反射中使用的查询）在Linux上导致核心转储，在OSX上根本无法使用，MemoryErrors随处可见，而且对Unicode的支持完全有问题。
- en: 'References: [#2273](https://www.sqlalchemy.org/trac/ticket/2273)'
  id: totrans-807
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2273](https://www.sqlalchemy.org/trac/ticket/2273)
- en: '**[mssql]**'
  id: totrans-808
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: The behavior of =/!= when comparing a scalar select to a value will no longer
    produce IN/NOT IN as of 0.8; this behavior is a little too heavy handed (use `in_()`
    if you want to emit IN) and now emits a deprecation warning. To get the 0.8 behavior
    immediately and remove the warning, a compiler recipe is given at [https://www.sqlalchemy.org/docs/07/dialects/mssql.html#scalar-select-comparisons](https://www.sqlalchemy.org/docs/07/dialects/mssql.html#scalar-select-comparisons)
    to override the behavior of visit_binary().
  id: totrans-809
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当将标量选择与值进行比较时，= /！=的行为将不再产生IN / NOT IN，从0.8版本开始；这种行为有点过于武断（如果要发出IN，请使用`in_()`），现在会发出弃用警告。要立即获得0.8版本的行为并消除警告，可以在[https://www.sqlalchemy.org/docs/07/dialects/mssql.html#scalar-select-comparisons](https://www.sqlalchemy.org/docs/07/dialects/mssql.html#scalar-select-comparisons)给出一个编译器配方来覆盖visit_binary()的行为。
- en: 'References: [#2277](https://www.sqlalchemy.org/trac/ticket/2277)'
  id: totrans-810
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2277](https://www.sqlalchemy.org/trac/ticket/2277)
- en: '**[mssql]**'
  id: totrans-811
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: ”0” is accepted as an argument for limit() which will produce “TOP 0”.
  id: totrans-812
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “0”被接受为limit()的参数，将生成“TOP 0”。
- en: 'References: [#2222](https://www.sqlalchemy.org/trac/ticket/2222)'
  id: totrans-813
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2222](https://www.sqlalchemy.org/trac/ticket/2222)
- en: oracle
  id: totrans-814
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-815
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Fixed ReturningResultProxy for zxjdbc dialect.. Regression from 0.6.
  id: totrans-816
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了zxjdbc方言的ReturningResultProxy。从0.6版本开始的回归。
- en: 'References: [#2272](https://www.sqlalchemy.org/trac/ticket/2272)'
  id: totrans-817
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2272](https://www.sqlalchemy.org/trac/ticket/2272)
- en: '**[oracle]**'
  id: totrans-818
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: The String type now generates VARCHAR2 on Oracle which is recommended as the
    default VARCHAR. Added an explicit VARCHAR2 and NVARCHAR2 to the Oracle dialect
    as well. Using NVARCHAR still generates “NVARCHAR2” - there is no “NVARCHAR” on
    Oracle - this remains a slight breakage of the “uppercase types always give exactly
    that” policy. VARCHAR still generates “VARCHAR”, keeping with the policy. If Oracle
    were to ever define “VARCHAR” as something different as they claim (IMHO this
    will never happen), the type would be available.
  id: totrans-819
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在String类型在Oracle上生成VARCHAR2，这是推荐的默认VARCHAR。在Oracle方言中还添加了显式的VARCHAR2和NVARCHAR2。使用NVARCHAR仍然生成“NVARCHAR2”
    - 在Oracle上没有“NVARCHAR” - 这仍然是“大写类型始终给出完全相同结果”政策的轻微破坏。VARCHAR仍然生成“VARCHAR”，遵循该政策。如果Oracle曾经定义“VARCHAR”为他们声称的不同内容（在我看来永远不会发生），该类型将可用。
- en: 'References: [#2252](https://www.sqlalchemy.org/trac/ticket/2252)'
  id: totrans-820
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2252](https://www.sqlalchemy.org/trac/ticket/2252)
- en: misc
  id: totrans-821
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[types]**'
  id: totrans-822
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[types]**'
- en: Extra keyword arguments to the base Float type beyond “precision” and “asdecimal”
    are ignored; added a deprecation warning here and additional docs, related to
  id: totrans-823
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在“精度”和“asdecimal”之外的基本Float类型的额外关键字参数将被忽略；这里添加了一个弃用警告和额外的文档，相关于
- en: 'References: [#2258](https://www.sqlalchemy.org/trac/ticket/2258)'
  id: totrans-824
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2258](https://www.sqlalchemy.org/trac/ticket/2258)
- en: '**[ext]**'
  id: totrans-825
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: SQLSoup will not be included in version 0.8 of SQLAlchemy; while useful, we
    would like to keep SQLAlchemy itself focused on one ORM usage paradigm. SQLSoup
    will hopefully soon be superseded by a third party project.
  id: totrans-826
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLSoup将不包含在SQLAlchemy的0.8版本中；虽然很有用，但我们希望将SQLAlchemy本身专注于一种ORM使用范式。SQLSoup很快将被第三方项目取代。
- en: 'References: [#2262](https://www.sqlalchemy.org/trac/ticket/2262)'
  id: totrans-827
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2262](https://www.sqlalchemy.org/trac/ticket/2262)
- en: '**[ext]**'
  id: totrans-828
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: Added local_attr, remote_attr, attr accessors to AssociationProxy, providing
    quick access to the proxied attributes at the class level.
  id: totrans-829
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 AssociationProxy 添加了 local_attr、remote_attr 和 attr 访问器，提供了在类级别快速访问代理属性的能力。
- en: 'References: [#2236](https://www.sqlalchemy.org/trac/ticket/2236)'
  id: totrans-830
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2236](https://www.sqlalchemy.org/trac/ticket/2236)
- en: '**[ext]**'
  id: totrans-831
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: Changed the update() method on association proxy dictionary to use a duck typing
    approach, i.e. checks for “keys”, to discern between update({}) and update((a,
    b)). Previously, passing a dictionary that had tuples as keys would be misinterpreted
    as a sequence.
  id: totrans-832
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更改了关联代理字典上的 update() 方法，采用了鸭子类型方法，即检查“键”，以区分 update({}) 和 update((a, b))。以前，传递具有元组作为键的字典将被误解为序列。
- en: 'References: [#2275](https://www.sqlalchemy.org/trac/ticket/2275)'
  id: totrans-833
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2275](https://www.sqlalchemy.org/trac/ticket/2275)
- en: 0.7.2
  id: totrans-834
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.7.2
- en: 'Released: Sun Jul 31 2011'
  id: totrans-835
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2011 年 7 月 31 日（星期日）
- en: orm
  id: totrans-836
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-837
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Feature enhancement: joined and subquery loading will now traverse already-present
    related objects and collections in search of unpopulated attributes throughout
    the scope of the eager load being defined, so that the eager loading that is specified
    via mappings or query options unconditionally takes place for the full depth,
    populating whatever is not already populated. Previously, this traversal would
    stop if a related object or collection were already present leading to inconsistent
    behavior (though would save on loads/cycles for an already-loaded graph). For
    a subqueryload, this means that the additional SELECT statements emitted by subqueryload
    will invoke unconditionally, no matter how much of the existing graph is already
    present (hence the controversy). The previous behavior of “stopping” is still
    in effect when a query is the result of an attribute-initiated lazyload, as otherwise
    an “N+1” style of collection iteration can become needlessly expensive when the
    same related object is encountered repeatedly. There’s also an as-yet-not-public
    generative Query method _with_invoke_all_eagers() which selects old/new behavior'
  id: totrans-838
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 功能增强：现在，对已存在的相关对象和集合进行连接和子查询加载将会在已定义的急加载范围内遍历，以查找未填充的属性，从而使通过映射或查询选项指定的急加载无条件地进行到底，填充尚未填充的内容。此前，如果已存在相关对象或集合，则此遍历将停止，导致不一致的行为（尽管对于已加载的图表可以节省加载/循环）。对于子查询加载，这意味着子查询加载发出的额外的
    SELECT 语句将无条件地调用，无论现有图表的多少（因此引起了争议）。当查询是由属性发起的延迟加载的结果时，之前的“停止”行为仍然有效，否则当重复遇到相同的相关对象时，“N+1”风格的集合迭代会变得不必要昂贵。还有一个尚未公开的生成式
    Query 方法 _with_invoke_all_eagers()，它选择了旧/新的行为。
- en: 'References: [#2213](https://www.sqlalchemy.org/trac/ticket/2213)'
  id: totrans-839
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2213](https://www.sqlalchemy.org/trac/ticket/2213)
- en: '**[orm]**'
  id: totrans-840
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: A rework of “replacement traversal” within the ORM as it alters selectables
    to be against aliases of things (i.e. clause adaption) includes a fix for multiply-nested
    any()/has() constructs against a joined table structure.
  id: totrans-841
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 ORM 中对“替换遍历”进行了重新设计，因为它改变了可选择的内容以针对事物的别名（即子句调整），包括针对联接表结构的多重嵌套 any()/has()
    构造的修复。
- en: 'References: [#2195](https://www.sqlalchemy.org/trac/ticket/2195)'
  id: totrans-842
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2195](https://www.sqlalchemy.org/trac/ticket/2195)
- en: '**[orm]**'
  id: totrans-843
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug where query.join() + aliased=True from a joined-inh structure to itself
    on relationship() with join condition on the child table would convert the lead
    entity into the joined one inappropriately. Also in 0.6.9.
  id: totrans-844
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在具有 join 条件的关系的 join() + aliased=True 从联接继承结构到自身的 query.join() 时，不适当地将主要实体转换为联接实体的错误。同样适用于
    0.6.9 版本。
- en: 'References: [#2234](https://www.sqlalchemy.org/trac/ticket/2234)'
  id: totrans-845
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2234](https://www.sqlalchemy.org/trac/ticket/2234)
- en: '**[orm]**'
  id: totrans-846
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed regression from 0.6 where Session.add() against an object which contained
    None in a collection would raise an internal exception. Reverted this to 0.6’s
    behavior which is to accept the None but obviously nothing is persisted. Ideally,
    collections with None present or on append() should at least emit a warning, which
    is being considered for 0.8.
  id: totrans-847
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了从 0.6 版本中的回归，其中对包含集合中的 None 的对象执行 Session.add() 将引发内部异常。将此回滚到 0.6 版本的行为，即接受
    None，但显然不会持久化任何内容。理想情况下，存在 None 的集合或在 append() 上的集合至少应该发出警告，这将在 0.8 版本中考虑。
- en: 'References: [#2205](https://www.sqlalchemy.org/trac/ticket/2205)'
  id: totrans-848
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2205](https://www.sqlalchemy.org/trac/ticket/2205)
- en: '**[orm]**'
  id: totrans-849
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Load of a deferred() attribute on an object where row can’t be located raises
    ObjectDeletedError instead of failing later on; improved the message in ObjectDeletedError
    to include other conditions besides a simple “delete”.
  id: totrans-850
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在无法定位行的对象上加载了延迟属性引发 ObjectDeletedError，而不是稍后失败；改进了 ObjectDeletedError 中的消息，以包括除简单的“删除”外的其他条件。
- en: 'References: [#2191](https://www.sqlalchemy.org/trac/ticket/2191)'
  id: totrans-851
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2191](https://www.sqlalchemy.org/trac/ticket/2191)
- en: '**[orm]**'
  id: totrans-852
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed regression from 0.6 where a get history operation on some relationship()
    based attributes would fail when a lazyload would emit; this could trigger within
    a flush() under certain conditions. Thanks to the user who submitted the great
    test for this.
  id: totrans-853
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了从 0.6 版本中出现的回归，当某些基于 relationship() 的属性上的 get history 操作失败时，当懒加载发出时；在某些条件下，这可能会在
    flush() 中触发。感谢提交了这个出色测试的用户。
- en: 'References: [#2224](https://www.sqlalchemy.org/trac/ticket/2224)'
  id: totrans-854
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2224](https://www.sqlalchemy.org/trac/ticket/2224)
- en: '**[orm]**'
  id: totrans-855
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug apparent only in Python 3 whereby sorting of persistent + pending
    objects during flush would produce an illegal comparison, if the persistent object
    primary key is not a single integer. Also in 0.6.9
  id: totrans-856
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 Python 3 中显现的错误，即在 flush 期间对持久化 + 待定对象进行排序将产生非法比较，如果持久化对象的主键不是单个整数。也在 0.6.9
    版中。
- en: 'References: [#2228](https://www.sqlalchemy.org/trac/ticket/2228)'
  id: totrans-857
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2228](https://www.sqlalchemy.org/trac/ticket/2228)
- en: '**[orm]**'
  id: totrans-858
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby the source clause used by query.join() would be inconsistent
    if against a column expression that combined multiple entities together. Also
    in 0.6.9
  id: totrans-859
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即如果 query.join() 针对将多个实体组合在一起的列表达式，那么所使用的源子句将不一致。也在 0.6.9 版中。
- en: 'References: [#2197](https://www.sqlalchemy.org/trac/ticket/2197)'
  id: totrans-860
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2197](https://www.sqlalchemy.org/trac/ticket/2197)
- en: '**[orm]**'
  id: totrans-861
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby if a mapped class redefined __hash__() or __eq__() to something
    non-standard, which is a supported use case as SQLA should never consult these,
    the methods would be consulted if the class was part of a “composite” (i.e. non-single-entity)
    result set. Also in 0.6.9.
  id: totrans-862
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即如果映射类重新定义了 __hash__() 或 __eq__() 为非标准内容，这是一个受支持的用例，因为 SQLA 不应该查阅这些内容，那么如果该类是“复合”（即非单实体）结果集的一部分，则方法将被查阅。也在
    0.6.9 版中。
- en: 'References: [#2215](https://www.sqlalchemy.org/trac/ticket/2215)'
  id: totrans-863
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2215](https://www.sqlalchemy.org/trac/ticket/2215)
- en: '**[orm]**'
  id: totrans-864
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added public attribute “.validators” to Mapper, an immutable dictionary view
    of all attributes that have been decorated with the @validates decorator. courtesy
    Stefano Fontanelli
  id: totrans-865
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 Mapper 添加了公共属性“.validators”，这是所有已用@validates装饰器装饰过的属性的不可变字典视图。由 Stefano Fontanelli
    提供。
- en: 'References: [#2240](https://www.sqlalchemy.org/trac/ticket/2240)'
  id: totrans-866
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2240](https://www.sqlalchemy.org/trac/ticket/2240)
- en: '**[orm]**'
  id: totrans-867
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Fixed subtle bug that caused SQL to blow up if: column_property() against subquery
    + joinedload + LIMIT + order by the column property() occurred. . Also in 0.6.9'
  id: totrans-868
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个微妙的错误，如果：针对子查询的 column_property() + joinedload + LIMIT + 按列属性排序，会导致 SQL
    出现问题。也在 0.6.9 版中。
- en: 'References: [#2188](https://www.sqlalchemy.org/trac/ticket/2188)'
  id: totrans-869
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2188](https://www.sqlalchemy.org/trac/ticket/2188)
- en: '**[orm]**'
  id: totrans-870
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The join condition produced by with_parent as well as when using a “dynamic”
    relationship against a parent will generate unique bindparams, rather than incorrectly
    repeating the same bindparam. . Also in 0.6.9.
  id: totrans-871
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与 with_parent 生成的连接条件以及针对父级使用“动态”关系时将生成唯一的 bindparams，而不是错误地重复相同的 bindparam。也在
    0.6.9 版中。
- en: 'References: [#2207](https://www.sqlalchemy.org/trac/ticket/2207)'
  id: totrans-872
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2207](https://www.sqlalchemy.org/trac/ticket/2207)
- en: '**[orm]**'
  id: totrans-873
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added the same “columns-only” check to mapper.polymorphic_on as used when receiving
    user arguments to relationship.order_by, foreign_keys, remote_side, etc.
  id: totrans-874
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 mapper.polymorphic_on 添加了与接收到的用户参数到 relationship.order_by、foreign_keys、remote_side
    等时使用的“仅列”检查相同的检查。
- en: '**[orm]**'
  id: totrans-875
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby comparison of column expression to a Query() would not call
    as_scalar() on the underlying SELECT statement to produce a scalar subquery, in
    the way that occurs if you called it on Query().subquery().
  id: totrans-876
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即对比列表达式和 Query() 时不会调用底层 SELECT 语句的 as_scalar() 来生成标量子查询，方式与调用 Query().subquery()
    时发生的方式相同。
- en: 'References: [#2190](https://www.sqlalchemy.org/trac/ticket/2190)'
  id: totrans-877
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2190](https://www.sqlalchemy.org/trac/ticket/2190)
- en: '**[orm]**'
  id: totrans-878
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed declarative bug where a class inheriting from a superclass of the same
    name would fail due to an unnecessary lookup of the name in the _decl_class_registry.
  id: totrans-879
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了声明性错误，其中从相同名称的超类继承的类会由于在 _decl_class_registry 中进行不必要的查找而失败。
- en: 'References: [#2194](https://www.sqlalchemy.org/trac/ticket/2194)'
  id: totrans-880
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2194](https://www.sqlalchemy.org/trac/ticket/2194)
- en: '**[orm]**'
  id: totrans-881
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Repaired the “no statement condition” assertion in Query which would attempt
    to raise if a generative method were called after from_statement() were called..
    Also in 0.6.9.
  id: totrans-882
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Query中“无语句条件”断言的bug，如果在调用from_statement()之后调用生成方法，则会尝试引发异常。也在0.6.9版本中。
- en: 'References: [#2199](https://www.sqlalchemy.org/trac/ticket/2199)'
  id: totrans-883
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2199](https://www.sqlalchemy.org/trac/ticket/2199)
- en: examples
  id: totrans-884
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples]**'
  id: totrans-885
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples]**'
- en: Repaired the examples/versioning test runner to not rely upon SQLAlchemy test
    libs, nosetests must be run from within examples/versioning to get around setup.cfg
    breaking it.
  id: totrans-886
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了示例/versioning测试运行程序，不再依赖SQLAlchemy测试库，必须从examples/versioning中运行nosetests以避免setup.cfg破坏它。
- en: '**[examples]**'
  id: totrans-887
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples]**'
- en: Tweak to examples/versioning to pick the correct foreign key in a multi-level
    inheritance situation.
  id: totrans-888
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整示例/versioning以在多级继承情况下选择正确的外键。
- en: '**[examples]**'
  id: totrans-889
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples]**'
- en: Fixed the attribute shard example to check for bind param callable correctly
    in 0.7 style.
  id: totrans-890
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了属性shard示例，在0.7风格中正确检查绑定参数可调用的问题。
- en: engine
  id: totrans-891
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine]**'
  id: totrans-892
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: Context manager provided by Connection.begin() will issue rollback() if the
    commit() fails, not just if an exception occurs.
  id: totrans-893
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Connection.begin()提供的上下文管理器如果提交失败将发出rollback()，不仅在发生异常时。
- en: '**[engine]**'
  id: totrans-894
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: Use urllib.parse_qsl() in Python 2.6 and above, no deprecation warning about
    cgi.parse_qsl()
  id: totrans-895
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在Python 2.6及以上版本中使用urllib.parse_qsl()，不会有关于cgi.parse_qsl()的弃用警告。
- en: 'References: [#1682](https://www.sqlalchemy.org/trac/ticket/1682)'
  id: totrans-896
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1682](https://www.sqlalchemy.org/trac/ticket/1682)
- en: '**[engine]**'
  id: totrans-897
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: Added mixin class sqlalchemy.ext.DontWrapMixin. User-defined exceptions of this
    type are never wrapped in StatementException when they occur in the context of
    a statement execution.
  id: totrans-898
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了混合类sqlalchemy.ext.DontWrapMixin。当用户定义的此类型异常在语句执行上下文中发生时，永远不会被包装在StatementException中。
- en: '**[engine]**'
  id: totrans-899
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: StatementException wrapping will display the original exception class in the
    message.
  id: totrans-900
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: StatementException包装将在消息中显示原始异常类。
- en: '**[engine]**'
  id: totrans-901
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: Failures on connect which raise dbapi.Error will forward the error to dialect.is_disconnect()
    and set the “connection_invalidated” flag if the dialect knows this to be a potentially
    “retryable” condition. Only Oracle ORA-01033 implemented for now.
  id: totrans-902
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 连接失败引发dbapi.Error的情况将将错误转发给dialect.is_disconnect()，如果方言知道这是一个可能的“可重试”条件，则设置“connection_invalidated”标志。目前只实现了Oracle
    ORA-01033。
- en: 'References: [#2201](https://www.sqlalchemy.org/trac/ticket/2201)'
  id: totrans-903
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2201](https://www.sqlalchemy.org/trac/ticket/2201)
- en: sql
  id: totrans-904
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-905
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed two subtle bugs involving column correspondence in a selectable, one with
    the same labeled subquery repeated, the other when the label has been “grouped”
    and loses itself. Affects.
  id: totrans-906
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在selectable中涉及列对应的两个微妙bug，一个是重复使用相同标记的子查询，另一个是当标记被“分组”并丢失时。影响。
- en: 'References: [#2188](https://www.sqlalchemy.org/trac/ticket/2188)'
  id: totrans-907
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2188](https://www.sqlalchemy.org/trac/ticket/2188)
- en: schema
  id: totrans-908
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: schema
- en: '**[schema]**'
  id: totrans-909
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: 'New feature: with_variant() method on all types. Produces an instance of Variant(),
    a special TypeDecorator which will select the usage of a different type based
    on the dialect in use.'
  id: totrans-910
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新功能：所有类型上的with_variant()方法。生成Variant()的实例，一个特殊的TypeDecorator，根据使用的方言选择不同类型的用法。
- en: 'References: [#2187](https://www.sqlalchemy.org/trac/ticket/2187)'
  id: totrans-911
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2187](https://www.sqlalchemy.org/trac/ticket/2187)
- en: '**[schema]**'
  id: totrans-912
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: Added an informative error message when ForeignKeyConstraint refers to a column
    name in the parent that is not found. Also in 0.6.9.
  id: totrans-913
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当ForeignKeyConstraint引用父级中不存在的列名时，添加了一个信息丰富的错误消息。也在0.6.9版本中。
- en: '**[schema]**'
  id: totrans-914
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: Fixed bug whereby adaptation of old append_ddl_listener() function was passing
    unexpected **kw through to the Table event. Table gets no kws, the MetaData event
    in 0.6 would get “tables=somecollection”, this behavior is preserved.
  id: totrans-915
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了旧的append_ddl_listener()函数适配的bug，将意外的**kw传递给Table事件。Table不接受kw参数，0.6中的MetaData事件将获得“tables=somecollection”，此行为得以保留。
- en: 'References: [#2206](https://www.sqlalchemy.org/trac/ticket/2206)'
  id: totrans-916
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2206](https://www.sqlalchemy.org/trac/ticket/2206)
- en: '**[schema]**'
  id: totrans-917
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: Fixed bug where “autoincrement” detection on Table would fail if the type had
    no “affinity” value, in particular this would occur when using the UUID example
    on the site that uses TypeEngine as the “impl”.
  id: totrans-918
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Table上“autoincrement”检测失败的bug，如果类型没有“affinity”值，则会发生这种情况，特别是在使用TypeEngine作为“impl”的站点上使用UUID示例时会发生这种情况。
- en: '**[schema]**'
  id: totrans-919
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: Added an improved repr() to TypeEngine objects that will only display constructor
    args which are positional or kwargs that deviate from the default.
  id: totrans-920
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为TypeEngine对象添加了改进的repr()，只显示构造函数参数中的位置参数或与默认值不同的kwargs。
- en: 'References: [#2209](https://www.sqlalchemy.org/trac/ticket/2209)'
  id: totrans-921
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2209](https://www.sqlalchemy.org/trac/ticket/2209)
- en: postgresql
  id: totrans-922
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql]**'
  id: totrans-923
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Added new “postgresql_ops” argument to Index, allows specification of PostgreSQL
    operator classes for indexed columns. Courtesy Filip Zyzniewski.
  id: totrans-924
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为Index添加了新的“postgresql_ops”参数，允许为索引列指定PostgreSQL操作符类。感谢Filip Zyzniewski。
- en: 'References: [#2198](https://www.sqlalchemy.org/trac/ticket/2198)'
  id: totrans-925
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2198](https://www.sqlalchemy.org/trac/ticket/2198)
- en: mysql
  id: totrans-926
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-927
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Fixed OurSQL dialect to use ansi-neutral quote symbol “’” for XA commands instead
    of ‘”’. . Also in 0.6.9.
  id: totrans-928
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了OurSQL方言在XA命令中使用ansi-neutral引号符“’”而不是‘”’的问题。也在0.6.9版本中。
- en: 'References: [#2186](https://www.sqlalchemy.org/trac/ticket/2186)'
  id: totrans-929
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2186](https://www.sqlalchemy.org/trac/ticket/2186)
- en: sqlite
  id: totrans-930
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite]**'
  id: totrans-931
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: SQLite dialect no longer strips quotes off of reflected default value, allowing
    a round trip CREATE TABLE to work. This is consistent with other dialects that
    also maintain the exact form of the default.
  id: totrans-932
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLite方言不再剥离反射默认值的引号，允许往返CREATE TABLE正常工作。这与其他方言一致，它们也保持默认值的确切形式。
- en: 'References: [#2189](https://www.sqlalchemy.org/trac/ticket/2189)'
  id: totrans-933
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2189](https://www.sqlalchemy.org/trac/ticket/2189)
- en: mssql
  id: totrans-934
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-935
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Adjusted the pyodbc dialect such that bound values are passed as bytes and not
    unicode if the “Easysoft” unix drivers are detected. This is the same behavior
    as occurs with FreeTDS. Easysoft appears to segfault if Python unicodes are passed
    under certain circumstances.
  id: totrans-936
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了pyodbc方言，如果检测到“Easysoft” unix驱动程序，则绑定值将作为字节而不是Unicode传递。这与FreeTDS发生的行为相同。在某些情况下，Easysoft似乎会在传递Python
    Unicode时崩溃。
- en: oracle
  id: totrans-937
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-938
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Added ORA-00028 to disconnect codes, use cx_oracle _Error.code to get at the
    code,. Also in 0.6.9.
  id: totrans-939
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将ORA-00028添加到断开代码中，使用cx_oracle _Error.code来获取代码。也在0.6.9版本中。
- en: 'References: [#2200](https://www.sqlalchemy.org/trac/ticket/2200)'
  id: totrans-940
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2200](https://www.sqlalchemy.org/trac/ticket/2200)
- en: '**[oracle]**'
  id: totrans-941
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Added ORA-01033 to disconnect codes, which can be caught during a connection
    event.
  id: totrans-942
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了ORA-01033到断开代码中，可以在连接事件中捕获。
- en: 'References: [#2201](https://www.sqlalchemy.org/trac/ticket/2201)'
  id: totrans-943
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2201](https://www.sqlalchemy.org/trac/ticket/2201)
- en: '**[oracle]**'
  id: totrans-944
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: repaired the oracle.RAW type which did not generate the correct DDL. Also in
    0.6.9.
  id: totrans-945
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了oracle.RAW类型未生成正确DDL的问题。也在0.6.9版本中。
- en: 'References: [#2220](https://www.sqlalchemy.org/trac/ticket/2220)'
  id: totrans-946
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2220](https://www.sqlalchemy.org/trac/ticket/2220)
- en: '**[oracle]**'
  id: totrans-947
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: added CURRENT to reserved word list. Also in 0.6.9.
  id: totrans-948
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将CURRENT添加到保留字列表中。也在0.6.9版本中。
- en: 'References: [#2212](https://www.sqlalchemy.org/trac/ticket/2212)'
  id: totrans-949
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2212](https://www.sqlalchemy.org/trac/ticket/2212)
- en: '**[oracle]**'
  id: totrans-950
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Fixed bug in the mutable extension whereby if the same type were used twice
    in one mapping, the attributes beyond the first would not get instrumented.
  id: totrans-951
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了可变扩展中的一个错误，即如果在一个映射中两次使用相同类型，则第一个之后的属性不会被检测。
- en: '**[oracle]**'
  id: totrans-952
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Fixed bug in the mutable extension whereby if None or a non-corresponding type
    were set, an error would be raised. None is now accepted which assigns None to
    all attributes, illegal values raise ValueError.
  id: totrans-953
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了可变扩展中的一个错误，即如果设置为None或非对应类型，则会引发错误。现在接受None，将None分配给所有属性，非法值会引发ValueError。
- en: 0.7.1
  id: totrans-954
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.7.1
- en: 'Released: Sun Jun 05 2011'
  id: totrans-955
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2011年6月5日 星期日
- en: general
  id: totrans-956
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通用
- en: '**[general]**'
  id: totrans-957
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general]**'
- en: Added a workaround for Python bug 7511 where failure of C extension build does
    not raise an appropriate exception on Windows 64 bit + VC express
  id: totrans-958
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为Python bug 7511添加了一个解决方法，在Windows 64位+ VC express上，C扩展构建失败不会引发适当的异常。
- en: 'References: [#2184](https://www.sqlalchemy.org/trac/ticket/2184)'
  id: totrans-959
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2184](https://www.sqlalchemy.org/trac/ticket/2184)
- en: orm
  id: totrans-960
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-961
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: ”delete-orphan” cascade is now allowed on self-referential relationships - this
    since SQLA 0.7 no longer enforces “parent with no child” at the ORM level; this
    check is left up to foreign key nullability. Related to
  id: totrans-962
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在允许在自引用关系上使用“delete-orphan”级联 - 这是因为SQLA 0.7不再在ORM级别强制执行“父项没有子项”的检查；此检查留给外键的可空性。相关链接
- en: 'References: [#1912](https://www.sqlalchemy.org/trac/ticket/1912)'
  id: totrans-963
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1912](https://www.sqlalchemy.org/trac/ticket/1912)
- en: '**[orm]**'
  id: totrans-964
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Repaired new “mutable” extension to propagate events to subclasses correctly;
    don’t create multiple event listeners for subclasses either.
  id: totrans-965
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新的“mutable”扩展以正确传播事件到子类；也不要为子类创建多个事件监听器。
- en: 'References: [#2180](https://www.sqlalchemy.org/trac/ticket/2180)'
  id: totrans-966
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2180](https://www.sqlalchemy.org/trac/ticket/2180)
- en: '**[orm]**'
  id: totrans-967
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Modify the text of the message which occurs when the “identity” key isn’t detected
    on flush, to include the common cause that the Column isn’t set up to detect auto-increment
    correctly;. Also in 0.6.8.
  id: totrans-968
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了在刷新时未检测到“identity”键时出现的消息文本，以包括列未正确设置以正确检测自增的常见原因；也在 0.6.8 版本中。
- en: 'References: [#2170](https://www.sqlalchemy.org/trac/ticket/2170)'
  id: totrans-969
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2170](https://www.sqlalchemy.org/trac/ticket/2170)
- en: '**[orm]**'
  id: totrans-970
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug where transaction-level “deleted” collection wouldn’t be cleared of
    expunged states, raising an error if they later became transient. Also in 0.6.8.
  id: totrans-971
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了事务级别“deleted”集合不会清除已删除状态的 bug，如果它们后来变为瞬态，则会引发错误。也在 0.6.8 版本中。
- en: 'References: [#2182](https://www.sqlalchemy.org/trac/ticket/2182)'
  id: totrans-972
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2182](https://www.sqlalchemy.org/trac/ticket/2182)
- en: engine
  id: totrans-973
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine]**'
  id: totrans-974
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: 'Deprecate schema/SQL-oriented methods on Connection/Engine that were never
    well known and are redundant: reflecttable(), create(), drop(), text(), engine.func'
  id: totrans-975
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 废弃 Connection/Engine 上从未被广泛知晓且多余的 schema/SQL 导向方法：reflecttable()、create()、drop()、text()、engine.func
- en: '**[engine]**'
  id: totrans-976
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: Adjusted the __contains__() method of a RowProxy result row such that no exception
    throw is generated internally; NoSuchColumnError() also will generate its message
    regardless of whether or not the column construct can be coerced to a string..
    Also in 0.6.8.
  id: totrans-977
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了 RowProxy 结果行的 __contains__() 方法，使其在内部不会生成异常抛出；无论列构造是否可以强制转换为字符串，NoSuchColumnError()
    也将生成其消息。也在 0.6.8 版本中。
- en: 'References: [#2178](https://www.sqlalchemy.org/trac/ticket/2178)'
  id: totrans-978
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2178](https://www.sqlalchemy.org/trac/ticket/2178)
- en: sql
  id: totrans-979
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-980
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed bug whereby metadata.reflect(bind) would close a Connection passed as
    a bind argument. Regression from 0.6.
  id: totrans-981
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 metadata.reflect(bind) 会关闭传递为绑定参数的 Connection 的 bug。从 0.6 版本中的回归。
- en: '**[sql]**'
  id: totrans-982
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Streamlined the process by which a Select determines what’s in its ‘.c’ collection.
    Behaves identically, except that a raw ClauseList() passed to select([]) (which
    is not a documented case anyway) will now be expanded into its individual column
    elements instead of being ignored.
  id: totrans-983
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 简化了 Select 确定其‘.c’集合中内容的过程。行为完全相同，只是现在传递给 select([]) 的原始 ClauseList()（这本来就不是一个文档化的情况）将被扩展为其各个列元素，而不是被忽略。
- en: postgresql
  id: totrans-984
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql]**'
  id: totrans-985
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Some unit test fixes regarding numeric arrays, MATCH operator. A potential floating-point
    inaccuracy issue was fixed, and certain tests of the MATCH operator only execute
    within an EN-oriented locale for now. . Also in 0.6.8.
  id: totrans-986
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关于数字数组、MATCH 运算符的一些单元测试问题。修复了潜在的浮点精度问题，并且目前仅在 EN 本地环境中执行 MATCH 运算符的某些测试。也在
    0.6.8 版本中。
- en: 'References: [#2175](https://www.sqlalchemy.org/trac/ticket/2175)'
  id: totrans-987
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2175](https://www.sqlalchemy.org/trac/ticket/2175)
- en: mysql
  id: totrans-988
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-989
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Unit tests pass 100% on MySQL installed on windows.
  id: totrans-990
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 单元测试在安装在 Windows 上的 MySQL 上通过率达到 100%。
- en: '**[mysql]**'
  id: totrans-991
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Removed the “adjust casing” step that would fail when reflecting a table on
    MySQL on windows with a mixed case name. After some experimenting with a windows
    MySQL server, it’s been determined that this step wasn’t really helping the situation
    much; MySQL does not return FK names with proper casing on non-windows platforms
    either, and removing the step at least allows the reflection to act more like
    it does on other OSes. A warning here has been considered but its difficult to
    determine under what conditions such a warning can be raised, so punted on that
    for now - added some docs instead.
  id: totrans-992
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了在反射具有混合大小写名称的 MySQL 表时在 Windows 上“调整大小写”步骤。经过一些对 Windows MySQL 服务器的实验后，确定这一步骤实际上并没有帮助太多；MySQL
    在非 Windows 平台上也不会返回正确大小写的 FK 名称，移除这一步骤至少使反射更像在其他操作系统上的行为。考虑过在此处发出警告，但很难确定在什么条件下可以引发这样的警告，因此暂时搁置
    - 而是添加了一些文档。
- en: 'References: [#2181](https://www.sqlalchemy.org/trac/ticket/2181)'
  id: totrans-993
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2181](https://www.sqlalchemy.org/trac/ticket/2181)
- en: '**[mysql]**'
  id: totrans-994
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: supports_sane_rowcount will be set to False if using MySQLdb and the DBAPI doesn’t
    provide the constants.CLIENT module.
  id: totrans-995
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果使用 MySQLdb 并且 DBAPI 不提供 constants.CLIENT 模块，则 supports_sane_rowcount 将设置为
    False。
- en: sqlite
  id: totrans-996
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite]**'
  id: totrans-997
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: Accept None from cursor.fetchone() when “PRAGMA read_uncommitted” is called
    to determine current isolation mode at connect time and default to SERIALIZABLE;
    this to support SQLite versions pre-3.3.0 that did not have this feature.
  id: totrans-998
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在调用“PRAGMA read_uncommitted”以确定连接时的当前隔离模式并默认为 SERIALIZABLE 时，接受来自 cursor.fetchone()
    的 None；这是为了支持 SQLite 3.3.0 之前的版本，这些版本没有这个功能。
- en: 'References: [#2173](https://www.sqlalchemy.org/trac/ticket/2173)'
  id: totrans-999
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2173](https://www.sqlalchemy.org/trac/ticket/2173)
- en: 0.7.0
  id: totrans-1000
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.7.0
- en: 'Released: Fri May 20 2011'
  id: totrans-1001
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2011年5月20日 星期五
- en: orm
  id: totrans-1002
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-1003
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed regression introduced in 0.7b4 (!) whereby query.options(someoption(“nonexistent
    name”)) would fail to raise an error. Also added additional error catching for
    cases where the option would try to build off a column-based element, further
    fixed up some of the error messages tailored in
  id: totrans-1004
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 0.7b4 中引入的回归问题，即 query.options(someoption(“nonexistent name”)) 将无法引发错误。还为尝试基于基于列的元素构建选项的情况添加了额外的错误捕获，进一步修正了一些定制的错误消息
- en: 'References: [#2069](https://www.sqlalchemy.org/trac/ticket/2069)'
  id: totrans-1005
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2069](https://www.sqlalchemy.org/trac/ticket/2069)
- en: '**[orm]**'
  id: totrans-1006
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: query.count() emits “count(*)” instead of “count(1)”.
  id: totrans-1007
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query.count() 发出“count(*)”而不是“count(1)”。
- en: 'References: [#2162](https://www.sqlalchemy.org/trac/ticket/2162)'
  id: totrans-1008
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2162](https://www.sqlalchemy.org/trac/ticket/2162)
- en: '**[orm]**'
  id: totrans-1009
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fine tuning of Query clause adaptation when from_self(), union(), or other “select
    from myself” operation, such that plain SQL expression elements added to filter(),
    order_by() etc. which are present in the nested “from myself” query *will* be
    adapted in the same way an ORM expression element will, since these elements are
    otherwise not easily accessible.
  id: totrans-1010
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对查询子句适应进行微调，当使用 from_self()、union() 或其他“从自身选择”操作时，添加到 filter()、order_by() 等中的普通
    SQL 表达式元素将以与 ORM 表达式元素相同的方式进行适应，因为这些元素通常不容易访问。
- en: 'References: [#2155](https://www.sqlalchemy.org/trac/ticket/2155)'
  id: totrans-1011
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2155](https://www.sqlalchemy.org/trac/ticket/2155)
- en: '**[orm]**'
  id: totrans-1012
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug where determination of “self referential” relationship would fail
    with no workaround for joined-inh subclass related to itself, or joined-inh subclass
    related to a subclass of that with no cols in the sub-sub class in the join condition.
    Also in 0.6.8.
  id: totrans-1013
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“自引用”关系的确定会失败的 bug，对于没有解决方案的与自身相关的 joined-inh 子类，或者与没有在连接条件中的子子类的子类相关的 joined-inh
    子类。同样在 0.6.8 版本中。
- en: 'References: [#2149](https://www.sqlalchemy.org/trac/ticket/2149)'
  id: totrans-1014
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2149](https://www.sqlalchemy.org/trac/ticket/2149)
- en: '**[orm]**'
  id: totrans-1015
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: mapper() will ignore non-configured foreign keys to unrelated tables when determining
    inherit condition between parent and child class, but will raise as usual for
    unresolved columns and table names regarding the inherited table. This is an enhanced
    generalization of behavior that was already applied to declarative previously.
    0.6.8 has a more conservative version of this which doesn’t fundamentally alter
    how join conditions are determined.
  id: totrans-1016
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: mapper() 在确定父子类之间的继承条件时，会忽略与无关表的非配置外键，但对于未解析的列和关于继承表的表名，会像往常一样引发异常。这是对先前应用于声明性的行为的增强泛化。0.6.8
    版本有一个更保守的版本，不会从根本上改变确定连接条件的方式。
- en: 'References: [#2153](https://www.sqlalchemy.org/trac/ticket/2153)'
  id: totrans-1017
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2153](https://www.sqlalchemy.org/trac/ticket/2153)
- en: '**[orm]**'
  id: totrans-1018
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: It is an error to call query.get() when the given entity is not a single, full
    class entity or mapper (i.e. a column). This is a deprecation warning in 0.6.8.
  id: totrans-1019
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在给定实体不是单个完整类实体或映射器（即列）时调用 query.get() 是一个错误。这是在 0.6.8 版本中的一个弃用警告。
- en: 'References: [#2144](https://www.sqlalchemy.org/trac/ticket/2144)'
  id: totrans-1020
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2144](https://www.sqlalchemy.org/trac/ticket/2144)
- en: '**[orm]**'
  id: totrans-1021
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed a potential KeyError which under some circumstances could occur with the
    identity map, part of
  id: totrans-1022
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在某些情况下可能发生的与标识映射相关的潜在 KeyError，部分
- en: 'References: [#2148](https://www.sqlalchemy.org/trac/ticket/2148)'
  id: totrans-1023
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2148](https://www.sqlalchemy.org/trac/ticket/2148)
- en: '**[orm]**'
  id: totrans-1024
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added Query.with_session() method, switches Query to use a different session.
  id: totrans-1025
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 Query.with_session() 方法，将 Query 切换到使用不同的会话。
- en: '**[orm]**'
  id: totrans-1026
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: horizontal shard query should use execution options per connection as per
  id: totrans-1027
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 水平分片查询应根据每个连接使用执行选项
- en: 'References: [#2131](https://www.sqlalchemy.org/trac/ticket/2131)'
  id: totrans-1028
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2131](https://www.sqlalchemy.org/trac/ticket/2131)
- en: '**[orm]**'
  id: totrans-1029
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: a non_primary mapper will inherit the _identity_class of the primary mapper.
    This so that a non_primary established against a class that’s normally in an inheritance
    mapping will produce results that are identity-map compatible with that of the
    primary mapper (also in 0.6.8)
  id: totrans-1030
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 非主映射器将继承主映射器的 _identity_class。这样，针对通常处于继承映射中的类建立的非主映射器将产生与主映射器兼容的标识映射结果（也在 0.6.8
    版本中）。
- en: 'References: [#2151](https://www.sqlalchemy.org/trac/ticket/2151)'
  id: totrans-1031
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2151](https://www.sqlalchemy.org/trac/ticket/2151)
- en: '**[orm]**'
  id: totrans-1032
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed the error message emitted for “can’t execute syncrule for destination
    column ‘q’; mapper ‘X’ does not map this column” to reference the correct mapper.
    . Also in 0.6.8.
  id: totrans-1033
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“无法为目标列‘q’执行同步规则；映射‘X’未映射此列”发出的错误消息，以引用正确的映射。同样在 0.6.8 版本中。
- en: 'References: [#2163](https://www.sqlalchemy.org/trac/ticket/2163)'
  id: totrans-1034
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2163](https://www.sqlalchemy.org/trac/ticket/2163)
- en: '**[orm]**'
  id: totrans-1035
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: polymorphic_union() gets a “cast_nulls” option, disables the usage of CAST when
    it renders the labeled NULL columns.
  id: totrans-1036
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: polymorphic_union() 现在有一个“cast_nulls”选项，当渲染带标签的 NULL 列时禁用 CAST 的使用。
- en: 'References: [#1502](https://www.sqlalchemy.org/trac/ticket/1502)'
  id: totrans-1037
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1502](https://www.sqlalchemy.org/trac/ticket/1502)
- en: '**[orm]**'
  id: totrans-1038
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: polymorphic_union() renders the columns in their original table order, as according
    to the first table/selectable in the list of polymorphic unions in which they
    appear. (which is itself an unordered mapping unless you pass an OrderedDict).
  id: totrans-1039
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: polymorphic_union() 根据它们在多态联合列表中出现的第一个表/可选择的顺序呈现列。（除非传递了 OrderedDict，否则它本身是无序映射）。
- en: '**[orm]**'
  id: totrans-1040
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby mapper mapped to an anonymous alias would fail if logging
    were used, due to unescaped % sign in the alias name. Also in 0.6.8.
  id: totrans-1041
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即如果 mapper 映射到匿名别名，如果使用了日志记录，由于别名中未转义的 % 符号，将会失败。也在 0.6.8 版本中修复。
- en: 'References: [#2171](https://www.sqlalchemy.org/trac/ticket/2171)'
  id: totrans-1042
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2171](https://www.sqlalchemy.org/trac/ticket/2171)
- en: examples
  id: totrans-1043
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples]**'
  id: totrans-1044
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples]**'
- en: removed the ancient “polymorphic association” examples and replaced with an
    updated set of examples that use declarative mixins, “generic_associations”. Each
    presents an alternative table layout.
  id: totrans-1045
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 删除了古老的“多态关联”示例，并替换为使用声明性 mixin、“generic_associations”的更新示例集。每个示例呈现了一种替代的表布局。
- en: sql
  id: totrans-1046
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-1047
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed bug whereby nesting a label of a select() with another label in it would
    produce incorrect exported columns. Among other things this would break an ORM
    column_property() mapping against another column_property(). . Also in 0.6.8
  id: totrans-1048
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即在 select() 中嵌套另一个带有标签的 select() 会产生不正确的导出列。其中之一是会破坏针对另一个 column_property()
    的 ORM column_property() 映射。也在 0.6.8 版本中修复。
- en: 'References: [#2167](https://www.sqlalchemy.org/trac/ticket/2167)'
  id: totrans-1049
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2167](https://www.sqlalchemy.org/trac/ticket/2167)
- en: '**[sql]**'
  id: totrans-1050
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Changed the handling in determination of join conditions such that foreign key
    errors are only considered between the two given tables. That is, t1.join(t2)
    will report FK errors that involve ‘t1’ or ‘t2’, but anything involving ‘t3’ will
    be skipped. This affects join(), as well as ORM relationship and inherit condition
    logic.
  id: totrans-1051
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更改了确定连接条件的处理方式，使得外键错误仅在两个给定表之间考虑。也就是说，t1.join(t2) 将报告涉及‘t1’或‘t2’的 FK 错误，但涉及‘t3’的任何内容将被跳过。这影响
    join()，以及 ORM 关系和继承条件逻辑。
- en: '**[sql]**'
  id: totrans-1052
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Some improvements to error handling inside of the execute procedure to ensure
    auto-close connections are really closed when very unusual DBAPI errors occur.
  id: totrans-1053
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在执行过程中对错误处理进行了一些改进，以确保在发生非常不寻常的 DBAPI 错误时确实关闭自动关闭的连接。
- en: '**[sql]**'
  id: totrans-1054
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: metadata.reflect() and reflection.Inspector() had some reliance on GC to close
    connections which were internally procured, fixed this.
  id: totrans-1055
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: metadata.reflect() 和 reflection.Inspector() 在关闭内部获取的连接时有一些依赖于 GC，已修复。
- en: '**[sql]**'
  id: totrans-1056
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added explicit check for when Column .name is assigned as blank string
  id: totrans-1057
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 Column .name 赋空字符串时的显式检查。
- en: 'References: [#2140](https://www.sqlalchemy.org/trac/ticket/2140)'
  id: totrans-1058
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2140](https://www.sqlalchemy.org/trac/ticket/2140)
- en: '**[sql]**'
  id: totrans-1059
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed bug whereby if FetchedValue was passed to column server_onupdate, it would
    not have its parent “column” assigned, added test coverage for all column default
    assignment patterns. also in 0.6.8
  id: totrans-1060
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即如果将 FetchedValue 传递给 column server_onupdate，它将不会被分配给其父“column”，为所有列默认分配模式添加了测试覆盖。也在
    0.6.8 版本中修复。
- en: 'References: [#2147](https://www.sqlalchemy.org/trac/ticket/2147)'
  id: totrans-1061
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2147](https://www.sqlalchemy.org/trac/ticket/2147)
- en: postgresql
  id: totrans-1062
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql]**'
  id: totrans-1063
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Fixed the psycopg2_version parsing in the psycopg2 dialect.
  id: totrans-1064
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 psycopg2 方言中 psycopg2_version 解析的问题。
- en: '**[postgresql]**'
  id: totrans-1065
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Fixed bug affecting PG 9 whereby index reflection would fail if against a column
    whose name had changed. . Also in 0.6.8.
  id: totrans-1066
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了影响 PG 9 的 bug，当反射一个列名已更改的列时，索引反射会失败。也在 0.6.8 版本中修复。
- en: 'References: [#2141](https://www.sqlalchemy.org/trac/ticket/2141)'
  id: totrans-1067
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2141](https://www.sqlalchemy.org/trac/ticket/2141)
- en: mssql
  id: totrans-1068
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-1069
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Fixed bug in MSSQL dialect whereby the aliasing applied to a schema-qualified
    table would leak into enclosing select statements. Also in 0.6.8.
  id: totrans-1070
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 MSSQL 方言中的 bug，即对架构限定表进行别名处理会泄漏到封闭的 select 语句中。也在 0.6.8 版本中修复。
- en: 'References: [#2169](https://www.sqlalchemy.org/trac/ticket/2169)'
  id: totrans-1071
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2169](https://www.sqlalchemy.org/trac/ticket/2169)
- en: misc
  id: totrans-1072
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[no_tags]**'
  id: totrans-1073
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: This section documents those changes from 0.7b4 to 0.7.0\. For an overview of
    what’s new in SQLAlchemy 0.7, see [https://docs.sqlalchemy.org/en/latest/changelog/migration_07.html](https://docs.sqlalchemy.org/en/latest/changelog/migration_07.html)
  id: totrans-1074
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 本节记录了从0.7b4到0.7.0的更改。有关SQLAlchemy 0.7的新功能概述，请参阅[https://docs.sqlalchemy.org/en/latest/changelog/migration_07.html](https://docs.sqlalchemy.org/en/latest/changelog/migration_07.html)
- en: '**[documentation]**'
  id: totrans-1075
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[documentation]**'
- en: Removed the usage of the “collections.MutableMapping” abc from the ext.mutable
    docs as it was being used incorrectly and makes the example more difficult to
    understand in any case.
  id: totrans-1076
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从ext.mutable文档中删除了对“collections.MutableMapping” abc的使用，因为它被错误使用，并且在任何情况下都使示例更难理解。
- en: 'References: [#2152](https://www.sqlalchemy.org/trac/ticket/2152)'
  id: totrans-1077
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2152](https://www.sqlalchemy.org/trac/ticket/2152)
- en: '**[ext]**'
  id: totrans-1078
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: Fixed bugs in sqlalchemy.ext.mutable extension where None was not appropriately
    handled, replacement events were not appropriately handled.
  id: totrans-1079
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了sqlalchemy.ext.mutable扩展中的一些错误，其中未适当处理None，替换事件也未适当处理。
- en: 'References: [#2143](https://www.sqlalchemy.org/trac/ticket/2143)'
  id: totrans-1080
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2143](https://www.sqlalchemy.org/trac/ticket/2143)
- en: 0.7.0b4
  id: totrans-1081
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.7.0b4
- en: 'Released: Sun Apr 17 2011'
  id: totrans-1082
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2011年4月17日 星期日
- en: general
  id: totrans-1083
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: general
- en: '**[general]**'
  id: totrans-1084
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general]**'
- en: Changes to the format of CHANGES, this file. The format changes have been applied
    to the 0.7 releases.
  id: totrans-1085
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对CHANGES文件的格式进行了更改。这些格式更改已应用于0.7版本的发布。
- en: '**[general]**'
  id: totrans-1086
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general]**'
- en: The “-declarative” changes will now be listed directly under the “-orm” section,
    as these are closely related.
  id: totrans-1087
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “-declarative”更改现在将直接列在“-orm”部分下面，因为它们密切相关。
- en: '**[general]**'
  id: totrans-1088
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general]**'
- en: The 0.5 series changes have been moved to the file CHANGES_PRE_06 which replaces
    CHANGES_PRE_05.
  id: totrans-1089
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 0.5系列的更改已移至文件CHANGES_PRE_06，取代了CHANGES_PRE_05。
- en: '**[general]**'
  id: totrans-1090
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general]**'
- en: The changelog for 0.6.7 and subsequent within the 0.6 series is now listed only
    in the CHANGES file within the 0.6 branch. In the 0.7 CHANGES file (i.e. this
    file), all the 0.6 changes are listed inline within the 0.7 section in which they
    were also applied (since all 0.6 changes are in 0.7 as well). Changes that apply
    to an 0.6 version here are noted as are if any differences in implementation/behavior
    are present.
  id: totrans-1091
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 0.6.7版本及其后续版本的更改日志现在仅在0.6分支的CHANGES文件中列出。在0.7版本的CHANGES文件（即本文件）中，所有0.6的更改都内联列在它们被应用的0.7部分中（因为所有0.6的更改也在0.7中）。这里适用于0.6版本的更改被记录，如果存在实现/行为上的任何差异也会被注明。
- en: orm
  id: totrans-1092
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-1093
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Some fixes to “evaluate” and “fetch” evaluation when query.update(), query.delete()
    are called. The retrieval of records is done after autoflush in all cases, and
    before update/delete is emitted, guarding against unflushed data present as well
    as expired objects failing during the evaluation.
  id: totrans-1094
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当调用query.update()、query.delete()时，对“evaluate”和“fetch”评估进行了一些修复。在所有情况下，记录的检索都是在自动刷新之后进行的，并在发出更新/删除之前进行，以防止未刷新的数据存在以及在评估过程中出现过期对象失败。
- en: 'References: [#2122](https://www.sqlalchemy.org/trac/ticket/2122)'
  id: totrans-1095
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2122](https://www.sqlalchemy.org/trac/ticket/2122)
- en: '**[orm]**'
  id: totrans-1096
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Reworded the exception raised when a flush is attempted of a subclass that is
    not polymorphic against the supertype.
  id: totrans-1097
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重新修订了尝试刷新非多态子类的异常抛出时的异常。
- en: 'References: [#2063](https://www.sqlalchemy.org/trac/ticket/2063)'
  id: totrans-1098
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2063](https://www.sqlalchemy.org/trac/ticket/2063)
- en: '**[orm]**'
  id: totrans-1099
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Still more wording adjustments when a query option can’t find the target entity.
    Explain that the path must be from one of the root entities.
  id: totrans-1100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当查询选项无法找到目标实体时，对于路径必须从根实体之一开始的情况进行了更多措辞调整。解释了路径必须从根实体之一开始。
- en: '**[orm]**'
  id: totrans-1101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Some fixes to the state handling regarding backrefs, typically when autoflush=False,
    where the back-referenced collection wouldn’t properly handle add/removes with
    no net change. Thanks to Richard Murri for the test case + patch. (also in 0.6.7).
  id: totrans-1102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关于反向引用(backrefs)的状态处理进行了一些修复，通常在`autoflush=False`时，当反向引用的集合没有净变化时，无法正确处理添加/删除操作。感谢Richard
    Murri提供的测试用例和补丁（也适用于0.6.7版本）。
- en: 'References: [#2123](https://www.sqlalchemy.org/trac/ticket/2123)'
  id: totrans-1103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2123](https://www.sqlalchemy.org/trac/ticket/2123)
- en: '**[orm]**'
  id: totrans-1104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added checks inside the UOW to detect the unusual condition of being asked to
    UPDATE or DELETE on a primary key value that contains NULL in it.
  id: totrans-1105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在UOW内部添加了检查，以检测在主键值中包含NULL的异常条件被要求进行UPDATE或DELETE的异常条件。
- en: 'References: [#2127](https://www.sqlalchemy.org/trac/ticket/2127)'
  id: totrans-1106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2127](https://www.sqlalchemy.org/trac/ticket/2127)
- en: '**[orm]**'
  id: totrans-1107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Some refinements to attribute history. More changes are pending possibly in
    0.8, but for now history has been modified such that scalar history doesn’t have
    a “side effect” of populating None for a non-present value. This allows a slightly
    better ability to distinguish between a None set and no actual change, affects
    as well.
  id: totrans-1108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对属性历史进行了一些细微调整。更多的变化可能在0.8版本中进行，但目前历史已经被修改，使得标量历史不会为不存在的值填充None带来“副作用”。这样稍微更好地区分了None设置和实际变化的能力，也会受到影响。
- en: 'References: [#2127](https://www.sqlalchemy.org/trac/ticket/2127)'
  id: totrans-1109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2127](https://www.sqlalchemy.org/trac/ticket/2127)
- en: '**[orm]**'
  id: totrans-1110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: a “having” clause would be copied from the inside to the outside query if from_self()
    were used; in particular this would break an 0.7 style count() query. (also in
    0.6.7)
  id: totrans-1111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果使用了from_self()，则“having”子句将从内部复制到外部查询；特别是这会破坏0.7风格的count()查询。（也适用于0.6.7版本）
- en: 'References: [#2130](https://www.sqlalchemy.org/trac/ticket/2130)'
  id: totrans-1112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2130](https://www.sqlalchemy.org/trac/ticket/2130)
- en: '**[orm]**'
  id: totrans-1113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: the Query.execution_options() method now passes those options to the Connection
    rather than the SELECT statement, so that all available options including isolation
    level and compiled cache may be used.
  id: totrans-1114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query.execution_options()方法现在将这些选项传递给Connection而不是SELECT语句，以便可以使用所有可用选项，包括隔离级别��编译缓存。
- en: 'References: [#2131](https://www.sqlalchemy.org/trac/ticket/2131)'
  id: totrans-1115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2131](https://www.sqlalchemy.org/trac/ticket/2131)
- en: engine
  id: totrans-1116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine]**'
  id: totrans-1117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: The C extension is now enabled by default on CPython 2.x with a fallback to
    pure python if it fails to compile.
  id: totrans-1118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: C扩展现在在CPython 2.x上默认启用，如果编译失败则回退到纯Python。
- en: 'References: [#2129](https://www.sqlalchemy.org/trac/ticket/2129)'
  id: totrans-1119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2129](https://www.sqlalchemy.org/trac/ticket/2129)
- en: sql
  id: totrans-1120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-1121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The “compiled_cache” execution option now raises an error when passed to a SELECT
    statement rather than a Connection. Previously it was being ignored entirely.
    We may look into having this option work on a per-statement level at some point.
  id: totrans-1122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “compiled_cache”执行选项现在在传递给SELECT语句而不是Connection时会引发错误。以前它完全被忽略。我们可能会考虑在某个时候使此选项在每个语句级别上工作。
- en: 'References: [#2131](https://www.sqlalchemy.org/trac/ticket/2131)'
  id: totrans-1123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2131](https://www.sqlalchemy.org/trac/ticket/2131)
- en: '**[sql]**'
  id: totrans-1124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Restored the “catchall” constructor on the base TypeEngine class, with a deprecation
    warning. This so that code which does something like Integer(11) still succeeds.
  id: totrans-1125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 恢复了基本TypeEngine类上的“catchall”构造函数，并附带弃用警告。这样，像Integer(11)这样的代码仍然可以成功执行。
- en: '**[sql]**'
  id: totrans-1126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed regression whereby MetaData() coming back from unpickling did not keep
    track of new things it keeps track of now, i.e. collection of Sequence objects,
    list of schema names.
  id: totrans-1127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了反序列化后的MetaData()未能跟踪新内容的回归问题，即Sequence对象的集合、模式名称列表。
- en: 'References: [#2104](https://www.sqlalchemy.org/trac/ticket/2104)'
  id: totrans-1128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2104](https://www.sqlalchemy.org/trac/ticket/2104)
- en: '**[sql]**'
  id: totrans-1129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The limit/offset keywords to select() as well as the value passed to select.limit()/offset()
    will be coerced to integer. (also in 0.6.7)
  id: totrans-1130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 选择`select()`中的limit/offset关键字以及传递给`select.limit()/offset()`的值将被强制转换为整数。（也适用于0.6.7版本）
- en: 'References: [#2116](https://www.sqlalchemy.org/trac/ticket/2116)'
  id: totrans-1131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2116](https://www.sqlalchemy.org/trac/ticket/2116)
- en: '**[sql]**'
  id: totrans-1132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: fixed bug where “from” clause gathering from an over() clause would be an itertools.chain()
    and not a list, causing “can only concatenate list” TypeError when combined with
    other clauses.
  id: totrans-1133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了从over()子句中收集的“from”子句将成为itertools.chain()而不是列表的错误，导致与其他子句组合时出现“can only concatenate
    list” TypeError。
- en: '**[sql]**'
  id: totrans-1134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed incorrect usage of “,” in over() clause being placed between the “partition”
    and “order by” clauses.
  id: totrans-1135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在over()子句中错误使用“,”放置在“partition”和“order by”子句之间的问题。
- en: 'References: [#2134](https://www.sqlalchemy.org/trac/ticket/2134)'
  id: totrans-1136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2134](https://www.sqlalchemy.org/trac/ticket/2134)
- en: '**[sql]**'
  id: totrans-1137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Before/after attach events for PrimaryKeyConstraint now function, tests added
    for before/after events on all constraint types.
  id: totrans-1138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: PrimaryKeyConstraint的before/after attach事件现在起作用，为所有约束类型添加了before/after事件的测试。
- en: 'References: [#2105](https://www.sqlalchemy.org/trac/ticket/2105)'
  id: totrans-1139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2105](https://www.sqlalchemy.org/trac/ticket/2105)
- en: '**[sql]**'
  id: totrans-1140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added explicit true()/false() constructs to expression lib - coercion rules
    will intercept “False”/”True” into these constructs. In 0.6, the constructs were
    typically converted straight to string, which was no longer accepted in 0.7.
  id: totrans-1141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在表达式库中添加了显式的true()/false()构造 - 强制转换规则将“False”/“True”拦截到这些构造中。在0.6版本中，这些构造通常直接转换为字符串，而在0.7中不再接受。
- en: 'References: [#2117](https://www.sqlalchemy.org/trac/ticket/2117)'
  id: totrans-1142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2117](https://www.sqlalchemy.org/trac/ticket/2117)
- en: schema
  id: totrans-1143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: schema
- en: '**[schema]**'
  id: totrans-1144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: The ‘useexisting’ flag on Table has been superseded by a new pair of flags ‘keep_existing’
    and ‘extend_existing’. ‘extend_existing’ is equivalent to ‘useexisting’ - the
    existing Table is returned, and additional constructor elements are added. With
    ‘keep_existing’, the existing Table is returned, but additional constructor elements
    are not added - these elements are only applied when the Table is newly created.
  id: totrans-1145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Table 上的 ‘useexisting’ 标志已被新的 ‘keep_existing’ 和 ‘extend_existing’ 一对标志取代。‘extend_existing’
    等同于 ‘useexisting’ - 返回现有的 Table，并添加额外的构造元素。使用 ‘keep_existing’ 时，返回现有的 Table，但不添加额外的构造元素
    - 这些元素仅在新创建 Table 时应用。
- en: 'References: [#2109](https://www.sqlalchemy.org/trac/ticket/2109)'
  id: totrans-1146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2109](https://www.sqlalchemy.org/trac/ticket/2109)
- en: postgresql
  id: totrans-1147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql]**'
  id: totrans-1148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Psycopg2 for Python 3 is now supported.
  id: totrans-1149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在支持 Python 3 的 Psycopg2。
- en: '**[postgresql]**'
  id: totrans-1150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Fixed support for precision numerics when using pg8000.
  id: totrans-1151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用 pg8000 时支持精度数值的问题。
- en: 'References: [#2132](https://www.sqlalchemy.org/trac/ticket/2132)'
  id: totrans-1152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2132](https://www.sqlalchemy.org/trac/ticket/2132)
- en: sqlite
  id: totrans-1153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite]**'
  id: totrans-1154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: Fixed bug where reflection of foreign key created as “REFERENCES <tablename>”
    without col name would fail. (also in 0.6.7)
  id: totrans-1155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了反射外键时创建为 “REFERENCES <tablename>” 而没有列名的 bug。（也在 0.6.7 中）
- en: 'References: [#2115](https://www.sqlalchemy.org/trac/ticket/2115)'
  id: totrans-1156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2115](https://www.sqlalchemy.org/trac/ticket/2115)
- en: oracle
  id: totrans-1157
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-1158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Using column names that would require quotes for the column itself or for a
    name-generated bind parameter, such as names with special characters, underscores,
    non-ascii characters, now properly translate bind parameter keys when talking
    to cx_oracle. (Also in 0.6.7)
  id: totrans-1159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在在与 cx_oracle 通信时，使用需要为列本身或名称生成的绑定参数引号的列名，例如具有特殊字符、下划线、非 ASCII 字符的列名，正确地转换绑定参数键。（也在
    0.6.7 中）
- en: 'References: [#2100](https://www.sqlalchemy.org/trac/ticket/2100)'
  id: totrans-1160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2100](https://www.sqlalchemy.org/trac/ticket/2100)
- en: '**[oracle]**'
  id: totrans-1161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Oracle dialect adds use_binds_for_limits=False create_engine() flag, will render
    the LIMIT/OFFSET values inline instead of as binds, reported to modify the execution
    plan used by Oracle. (Also in 0.6.7)
  id: totrans-1162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Oracle 方言添加了 use_binds_for_limits=False create_engine() 标志，将 LIMIT/OFFSET 值内联呈现，而不是作为绑定，据报告修改了
    Oracle 使用的执行计划。（也在 0.6.7 中）
- en: 'References: [#2116](https://www.sqlalchemy.org/trac/ticket/2116)'
  id: totrans-1163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2116](https://www.sqlalchemy.org/trac/ticket/2116)
- en: misc
  id: totrans-1164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[types]**'
  id: totrans-1165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[types]**'
- en: REAL has been added to the core types. Supported by PostgreSQL, SQL Server,
    MySQL, SQLite. Note that the SQL Server and MySQL versions, which add extra arguments,
    are also still available from those dialects.
  id: totrans-1166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: REAL 已添加到核心类型。由 PostgreSQL、SQL Server、MySQL、SQLite 支持。请注意，SQL Server 和 MySQL
    版本，添加了额外的参数，仍然可以从这些方言中使用。
- en: 'References: [#2081](https://www.sqlalchemy.org/trac/ticket/2081)'
  id: totrans-1167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2081](https://www.sqlalchemy.org/trac/ticket/2081)
- en: '**[types]**'
  id: totrans-1168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[types]**'
- en: Added @event.listens_for() decorator, given target + event name, applies the
    decorated function as a listener.
  id: totrans-1169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 @event.listens_for() 装饰器，给定目标 + 事件名称，将装饰的函数应用为监听器。
- en: 'References: [#2106](https://www.sqlalchemy.org/trac/ticket/2106)'
  id: totrans-1170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2106](https://www.sqlalchemy.org/trac/ticket/2106)
- en: '**[pool]**'
  id: totrans-1171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[pool]**'
- en: AssertionPool now stores the traceback indicating where the currently checked
    out connection was acquired; this traceback is reported within the assertion raised
    upon a second concurrent checkout; courtesy Gunnlaugur Briem
  id: totrans-1172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: AssertionPool 现在存储了当前已检出连接获取的回溯信息；在第二次并发检出时，此回溯信息将在引发的断言中报告；由 Gunnlaugur Briem
    提供
- en: 'References: [#2103](https://www.sqlalchemy.org/trac/ticket/2103)'
  id: totrans-1173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2103](https://www.sqlalchemy.org/trac/ticket/2103)
- en: '**[pool]**'
  id: totrans-1174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[pool]**'
- en: The “pool.manage” feature doesn’t use pickle anymore to hash the arguments for
    each pool.
  id: totrans-1175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “pool.manage” 功能不再使用 pickle 来为每个 pool 哈希参数。
- en: '**[documentation]**'
  id: totrans-1176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[documentation]**'
- en: Documented SQLite DATE/TIME/DATETIME types. (also in 0.6.7)
  id: totrans-1177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 记录了 SQLite DATE/TIME/DATETIME 类型。（也在 0.6.7 中）
- en: 'References: [#2029](https://www.sqlalchemy.org/trac/ticket/2029)'
  id: totrans-1178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2029](https://www.sqlalchemy.org/trac/ticket/2029)
- en: '**[documentation]**'
  id: totrans-1179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[documentation]**'
- en: Fixed mutable extension docs to show the correct type-association methods.
  id: totrans-1180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修正了可变扩展文档，以显示正确的类型关联方法。
- en: 'References: [#2118](https://www.sqlalchemy.org/trac/ticket/2118)'
  id: totrans-1181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2118](https://www.sqlalchemy.org/trac/ticket/2118)
- en: 0.7.0b3
  id: totrans-1182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.7.0b3
- en: 'Released: Sun Mar 20 2011'
  id: totrans-1183
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2011 年 3 月 20 日 星期日
- en: general
  id: totrans-1184
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: general
- en: '**[general]**'
  id: totrans-1185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general]**'
- en: Lots of fixes to unit tests when run under PyPy (courtesy Alex Gaynor).
  id: totrans-1186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 PyPy 下运行时修复了许多单元测试问题（由 Alex Gaynor 提供）。
- en: orm
  id: totrans-1187
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-1188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Changed the underlying approach to query.count(). query.count() is now in all
    cases exactly:'
  id: totrans-1189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更改了查询.count() 的基础��法。现在，在所有情况下，查询.count() 精确地为：
- en: query.
  id: totrans-1190
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: query.
- en: ''
  id: totrans-1191
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: from_self(func.count(literal_column(‘1’))). scalar()
  id: totrans-1192
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: from_self(func.count(literal_column(‘1’))). scalar()
- en: That is, “select count(1) from (<full query>)”. This produces a subquery in
    all cases, but vastly simplifies all the guessing count() tried to do previously,
    which would still fail in many scenarios particularly when joined table inheritance
    and other joins were involved. If the subquery produced for an otherwise very
    simple count is really an issue, use query(func.count()) as an optimization.
  id: totrans-1193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 也就是说，“select count(1) from (<完整查询>)”。这在所有情况下都会产生一个子查询，但大大简化了之前 count() 尝试做的所有猜测，之前在许多情况下仍然会失败，特别是当涉及联接表继承和其他联接时。如果为否则非常简单的计数生成的子查询真的是一个问题，请使用
    query(func.count()) 进行优化。
- en: 'References: [#2093](https://www.sqlalchemy.org/trac/ticket/2093)'
  id: totrans-1194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2093](https://www.sqlalchemy.org/trac/ticket/2093)
- en: '**[orm]**'
  id: totrans-1195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: some changes to the identity map regarding rare weakref callbacks during iterations.
    The mutex has been removed as it apparently can cause a reentrant (i.e. in one
    thread) deadlock, perhaps when gc collects objects at the point of iteration in
    order to gain more memory. It is hoped that “dictionary changed during iteration”
    will be exceedingly rare as iteration methods internally acquire the full list
    of objects in a single values() call. Note 0.6.7 has a more conservative fix here
    which still keeps the mutex in place.
  id: totrans-1196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关于迭代过程中罕见的弱引用回调的身份映射发生了一些变化。已删除互斥体，因为显然可能会导致重入（即在一个线程中）死锁，也许是在迭代过程中 gc 在获取更多内存时收集对象时发生。希望“迭代过程中字典发生变化”会非常罕见，因为迭代方法在内部通过单个
    values() 调用获取完整的对象列表。请注意，0.6.7 在这里有一个更为保守的修复，仍然保留了互斥体。
- en: 'References: [#2087](https://www.sqlalchemy.org/trac/ticket/2087)'
  id: totrans-1197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2087](https://www.sqlalchemy.org/trac/ticket/2087)
- en: '**[orm]**'
  id: totrans-1198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: A tweak to the unit of work causes it to order the flush along relationship()
    dependencies even if the given objects don’t have any inter-attribute references
    in memory, which was the behavior in 0.5 and earlier, so a flush of Parent/Child
    with only foreign key/primary key set will succeed. This while still maintaining
    0.6 and above’s not generating a ton of useless internal dependency structures
    within the flush that don’t correspond to state actually within the current flush.
  id: totrans-1199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对工作单元进行微调，使其按照 relationship() 的依赖关系排序刷新，即使给定的对象在内存中没有任何属性间的引用，这是 0.5 及更早版本的行为，因此只设置外键/主键的
    Parent/Child 刷新将成功。同时，仍然保持 0.6 及以上版本在刷新时不生成大量与当前刷新状态实际不符的无用内部依赖结构。
- en: 'References: [#2082](https://www.sqlalchemy.org/trac/ticket/2082)'
  id: totrans-1200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2082](https://www.sqlalchemy.org/trac/ticket/2082)
- en: '**[orm]**'
  id: totrans-1201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Improvements to the error messages emitted when querying against column-only
    entities in conjunction with (typically incorrectly) using loader options, where
    the parent entity is not fully present.
  id: totrans-1202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在针对仅包含列的实体进行查询时与（通常不正确地）使用加载器选项一起使用时，改进了发出的错误消息，其中父实体不完全存在。
- en: 'References: [#2069](https://www.sqlalchemy.org/trac/ticket/2069)'
  id: totrans-1203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2069](https://www.sqlalchemy.org/trac/ticket/2069)
- en: '**[orm]**'
  id: totrans-1204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug in query.options() whereby a path applied to a lazyload using string
    keys could overlap a same named attribute on the wrong entity. Note 0.6.7 has
    a more conservative fix to this.
  id: totrans-1205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在查询选项（query.options()）中的一个 bug，即应用于使用字符串键的 lazyload 的路径可能会与错误实体上的同名属性重叠。请注意，0.6.7
    对此进行了更为保守的修复。
- en: 'References: [#2098](https://www.sqlalchemy.org/trac/ticket/2098)'
  id: totrans-1206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2098](https://www.sqlalchemy.org/trac/ticket/2098)
- en: examples
  id: totrans-1207
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 例子
- en: '**[examples]**'
  id: totrans-1208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[例子]**'
- en: Updated the association, association proxy examples to use declarative, added
    a new example dict_of_sets_with_default.py, a “pushing the envelope” example of
    association proxy.
  id: totrans-1209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新了关联、关联代理示例以使用声明式，并添加了一个新的示例 dict_of_sets_with_default.py，这是一个关联代理的“突破极限”示例。
- en: '**[examples]**'
  id: totrans-1210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[例子]**'
- en: The Beaker caching example allows a “query_cls” argument to the query_callable()
    function. (also in 0.6.7)
  id: totrans-1211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Beaker 缓存示例允许在 query_callable() 函数中传递一个“query_cls”参数。（也适用于 0.6.7）
- en: 'References: [#2090](https://www.sqlalchemy.org/trac/ticket/2090)'
  id: totrans-1212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2090](https://www.sqlalchemy.org/trac/ticket/2090)
- en: engine
  id: totrans-1213
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine]**'
  id: totrans-1214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: Fixed AssertionPool regression bug.
  id: totrans-1215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 AssertionPool 的回归 bug。
- en: 'References: [#2097](https://www.sqlalchemy.org/trac/ticket/2097)'
  id: totrans-1216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2097](https://www.sqlalchemy.org/trac/ticket/2097)
- en: '**[engine]**'
  id: totrans-1217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: Changed exception raised to ArgumentError when an invalid dialect is specified.
  id: totrans-1218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当指定无效的方言时，将引发 ArgumentError 异常。
- en: 'References: [#2060](https://www.sqlalchemy.org/trac/ticket/2060)'
  id: totrans-1219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2060](https://www.sqlalchemy.org/trac/ticket/2060)
- en: sql
  id: totrans-1220
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-1221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added a fully descriptive error message for the case where Column is subclassed
    and _make_proxy() fails to make a copy due to TypeError on the constructor. The
    method _constructor should be implemented in this case.
  id: totrans-1222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Column 被子类化且 _make_proxy() 由于构造函数的 TypeError 失败而无法进行复制时，添加了一个完整的描述性错误消息。在这种情况下应该实现
    _constructor 方法。
- en: '**[sql]**'
  id: totrans-1223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added new event “column_reflect” for Table objects. Receives the info dictionary
    about a Column before the object is generated within reflection, and allows modification
    to the dictionary for control over most aspects of the resulting Column including
    key, name, type, info dictionary.
  id: totrans-1224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 Table 对象添加了新的事件“column_reflect”。在反射内生成对象之前接收有关 Column 的信息字典，并允许修改字典以控制生成的
    Column 的大多数方面，包括键、名称、类型、信息字典。
- en: 'References: [#2095](https://www.sqlalchemy.org/trac/ticket/2095)'
  id: totrans-1225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2095](https://www.sqlalchemy.org/trac/ticket/2095)
- en: '**[sql]**'
  id: totrans-1226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: To help with the “column_reflect” event being used with specific Table objects
    instead of all instances of Table, listeners can be added to a Table object inline
    with its construction using a new argument “listeners”, a list of tuples of the
    form (<eventname>, <fn>), which are applied to the Table before the reflection
    process begins.
  id: totrans-1227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了帮助“column_reflect”事件与特定的 Table 对象一起使用而不是所有 Table 实例，可以在 Table 的构造过程中使用一个新的参数“listeners”来添加监听器，一个元组列表
    (<eventname>, <fn>)，它们在反射过程开始之前被应用于 Table。
- en: '**[sql]**'
  id: totrans-1228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added new generic function “next_value()”, accepts a Sequence object as its
    argument and renders the appropriate “next value” generation string on the target
    platform, if supported. Also provides “.next_value()” method on Sequence itself.
  id: totrans-1229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的通用函数“next_value()”，接受一个 Sequence 对象作为参数，并在目标平台上渲染适当的“next value”生成字符串，如果支持的话。也在
    Sequence 本身上提供了“.next_value()”方法。
- en: 'References: [#2085](https://www.sqlalchemy.org/trac/ticket/2085)'
  id: totrans-1230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2085](https://www.sqlalchemy.org/trac/ticket/2085)
- en: '**[sql]**'
  id: totrans-1231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: func.next_value() or other SQL expression can be embedded directly into an insert()
    construct, and if implicit or explicit “returning” is used in conjunction with
    a primary key column, the newly generated value will be present in result.inserted_primary_key.
  id: totrans-1232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: func.next_value() 或其他 SQL 表达式可以直接嵌入到 insert() 构造中，如果隐式或显式地与主键列一起使用“returning”，则新生成的值将出现在
    result.inserted_primary_key 中。
- en: 'References: [#2084](https://www.sqlalchemy.org/trac/ticket/2084)'
  id: totrans-1233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2084](https://www.sqlalchemy.org/trac/ticket/2084)
- en: '**[sql]**'
  id: totrans-1234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added accessors to ResultProxy “returns_rows”, “is_insert” (also in 0.6.7)
  id: totrans-1235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 ResultProxy 的访问器“returns_rows”、“is_insert” (也在0.6.7中)
- en: 'References: [#2089](https://www.sqlalchemy.org/trac/ticket/2089)'
  id: totrans-1236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2089](https://www.sqlalchemy.org/trac/ticket/2089)
- en: postgresql
  id: totrans-1237
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql]**'
  id: totrans-1238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Added RESERVED_WORDS for postgresql dialect. (also in 0.6.7)
  id: totrans-1239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 postgresql 方言添加了 RESERVED_WORDS。(也在0.6.7中)
- en: 'References: [#2092](https://www.sqlalchemy.org/trac/ticket/2092)'
  id: totrans-1240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2092](https://www.sqlalchemy.org/trac/ticket/2092)
- en: '**[postgresql]**'
  id: totrans-1241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Fixed the BIT type to allow a “length” parameter, “varying” parameter. Reflection
    also fixed. (also in 0.6.7)
  id: totrans-1242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 BIT 类型以允许“length”参数、“varying”参数。反射也已修复。(也在0.6.7中)
- en: 'References: [#2073](https://www.sqlalchemy.org/trac/ticket/2073)'
  id: totrans-1243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2073](https://www.sqlalchemy.org/trac/ticket/2073)
- en: mssql
  id: totrans-1244
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-1245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Rewrote the query used to get the definition of a view, typically when using
    the Inspector interface, to use sys.sql_modules instead of the information schema,
    thereby allowing views definitions longer than 4000 characters to be fully returned.
    (also in 0.6.7)
  id: totrans-1246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重写了用于获取视图定义的查询，通常在使用 Inspector 接口时使用 sys.sql_modules 而不是信息模式，从而允许超过 4000 个字符的视图定义被完全返回。(也在0.6.7中)
- en: 'References: [#2071](https://www.sqlalchemy.org/trac/ticket/2071)'
  id: totrans-1247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2071](https://www.sqlalchemy.org/trac/ticket/2071)
- en: misc
  id: totrans-1248
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[declarative]**'
  id: totrans-1249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative]**'
- en: Arguments in __mapper_args__ that aren’t “hashable” aren’t mistaken for always-hashable,
    possibly-column arguments. (also in 0.6.7)
  id: totrans-1250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`__mapper_args__` 中的非“可哈希”参数不会被误认为总是可哈希的，可能是列参数。(也在0.6.7中)'
- en: 'References: [#2091](https://www.sqlalchemy.org/trac/ticket/2091)'
  id: totrans-1251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2091](https://www.sqlalchemy.org/trac/ticket/2091)
- en: '**[firebird]**'
  id: totrans-1252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: The “implicit_returning” flag on create_engine() is honored if set to False.
    (also in 0.6.7)
  id: totrans-1253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果将“implicit_returning”标志设置为 False，则 create_engine() 上的“implicit_returning”标志将被尊重。(也在0.6.7中)
- en: 'References: [#2083](https://www.sqlalchemy.org/trac/ticket/2083)'
  id: totrans-1254
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2083](https://www.sqlalchemy.org/trac/ticket/2083)
- en: '**[informix]**'
  id: totrans-1255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[informix]**'
- en: Added RESERVED_WORDS informix dialect. (also in 0.6.7)
  id: totrans-1256
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 RESERVED_WORDS informix 方言。(也在0.6.7中)
- en: 'References: [#2092](https://www.sqlalchemy.org/trac/ticket/2092)'
  id: totrans-1257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2092](https://www.sqlalchemy.org/trac/ticket/2092)
- en: '**[ext]**'
  id: totrans-1258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: The horizontal_shard ShardedSession class accepts the common Session argument
    “query_cls” as a constructor argument, to enable further subclassing of ShardedQuery.
    (also in 0.6.7)
  id: totrans-1259
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: horizontal_shard ShardedSession 类接受公共 Session 参数“query_cls”作为构造函数参数，以便进一步对 ShardedQuery
    进行子类化（也适用于 0.6.7）。
- en: 'References: [#2090](https://www.sqlalchemy.org/trac/ticket/2090)'
  id: totrans-1260
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2090](https://www.sqlalchemy.org/trac/ticket/2090)
- en: 0.7.0b2
  id: totrans-1261
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.7.0b2
- en: 'Released: Sat Feb 19 2011'
  id: totrans-1262
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2011年2月19日
- en: orm
  id: totrans-1263
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-1264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby Session.merge() would call the load() event with one too few
    arguments.
  id: totrans-1265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即 Session.merge() 会调用 load() 事件但参数少了一个。
- en: 'References: [#2053](https://www.sqlalchemy.org/trac/ticket/2053)'
  id: totrans-1266
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2053](https://www.sqlalchemy.org/trac/ticket/2053)
- en: '**[orm]**'
  id: totrans-1267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added logic which prevents the generation of events from a MapperExtension or
    SessionExtension from generating do-nothing events for all the methods not overridden.
  id: totrans-1268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了逻辑，防止从 MapperExtension 或 SessionExtension 生成的事件为所有未覆盖的方法生成无用事件。
- en: 'References: [#2052](https://www.sqlalchemy.org/trac/ticket/2052)'
  id: totrans-1269
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2052](https://www.sqlalchemy.org/trac/ticket/2052)
- en: examples
  id: totrans-1270
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples]**'
  id: totrans-1271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples]**'
- en: Beaker example now takes into account ‘limit’ and ‘offset’, bind params within
    embedded FROM clauses (like when you use union() or from_self()) when generating
    a cache key.
  id: totrans-1272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在生成缓存键时，Beaker 示例现在考虑了嵌套的 FROM 子句中的 ‘limit’ 和 ‘offset’、绑定参数（比如在使用 union() 或
    from_self() 时）。
- en: sql
  id: totrans-1273
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-1274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Renamed the EngineEvents event class to ConnectionEvents. As these classes are
    never accessed directly by end-user code, this strictly is a documentation change
    for end users. Also simplified how events get linked to engines and connections
    internally.
  id: totrans-1275
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 EngineEvents 事件类重命名为 ConnectionEvents。由于这些类从未直接被终端用户代码访问，因此这严格来说是针对终端用户的文档更改。还简化了内部如何将事件与引擎和连接关联的方式。
- en: 'References: [#2059](https://www.sqlalchemy.org/trac/ticket/2059)'
  id: totrans-1276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2059](https://www.sqlalchemy.org/trac/ticket/2059)
- en: '**[sql]**'
  id: totrans-1277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The Sequence() construct, when passed a MetaData() object via its ‘metadata’
    argument, will be included in CREATE/DROP statements within metadata.create_all()
    and metadata.drop_all(), including “checkfirst” logic.
  id: totrans-1278
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当通过其 ‘metadata’ 参数传递一个 MetaData() 对象时，Sequence() 构造将包含在 CREATE/DROP 语句中，包括“checkfirst”逻辑。
- en: 'References: [#2055](https://www.sqlalchemy.org/trac/ticket/2055)'
  id: totrans-1279
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2055](https://www.sqlalchemy.org/trac/ticket/2055)
- en: '**[sql]**'
  id: totrans-1280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The Column.references() method now returns True if it has a foreign key referencing
    the given column exactly, not just its parent table.
  id: totrans-1281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Column.references() 方法现在在具有引用给定列的外键的情况下返回 True，而不仅仅是其父表。
- en: 'References: [#2064](https://www.sqlalchemy.org/trac/ticket/2064)'
  id: totrans-1282
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2064](https://www.sqlalchemy.org/trac/ticket/2064)
- en: postgresql
  id: totrans-1283
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql]**'
  id: totrans-1284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Fixed regression from 0.6 where SMALLINT and BIGINT types would both generate
    SERIAL on an integer PK column, instead of SMALLINT and BIGSERIAL
  id: totrans-1285
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从 0.6 版本开始修复了一个回归问题，其中 SMALLINT 和 BIGINT 类型都将在整数 PK 列上生成 SERIAL，而不是 SMALLINT
    和 BIGSERIAL。
- en: 'References: [#2065](https://www.sqlalchemy.org/trac/ticket/2065)'
  id: totrans-1286
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2065](https://www.sqlalchemy.org/trac/ticket/2065)
- en: misc
  id: totrans-1287
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[declarative]**'
  id: totrans-1288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative]**'
- en: Fixed regression whereby composite() with Column objects placed inline would
    fail to initialize. The Column objects can now be inline with the composite()
    or external and pulled in via name or object ref.
  id: totrans-1289
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个回归问题，即将 Column 对象与 composite() 内联将无法初始化。现在可以将 Column 对象与 composite() 内联或外部，并通过名称或对象引用引入。
- en: 'References: [#2058](https://www.sqlalchemy.org/trac/ticket/2058)'
  id: totrans-1290
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2058](https://www.sqlalchemy.org/trac/ticket/2058)
- en: '**[declarative]**'
  id: totrans-1291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative]**'
- en: Fix error message referencing old @classproperty name to reference @declared_attr
    (also in 0.6.7)
  id: totrans-1292
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了错误消息，该消息引用了旧的 @classproperty 名称，现在引用 @declared_attr（也适用于 0.6.7）。
- en: 'References: [#2061](https://www.sqlalchemy.org/trac/ticket/2061)'
  id: totrans-1293
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2061](https://www.sqlalchemy.org/trac/ticket/2061)
- en: '**[declarative]**'
  id: totrans-1294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative]**'
- en: the dictionary at the end of the __table_args__ tuple is now optional.
  id: totrans-1295
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: __table_args__ 元组末尾的字典现在是可选的。
- en: 'References: [#1468](https://www.sqlalchemy.org/trac/ticket/1468)'
  id: totrans-1296
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1468](https://www.sqlalchemy.org/trac/ticket/1468)
- en: '**[ext]**'
  id: totrans-1297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: Association proxy now has correct behavior for any(), has(), and contains()
    when proxying a many-to-one scalar attribute to a one-to-many collection (i.e.
    the reverse of the ‘typical’ association proxy use case)
  id: totrans-1298
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当代理一个多对一标量属性到一个一对多集合时，关联代理现在对 any()、has() 和 contains() 具有正确的行为（即‘典型’关联代理用例的反向）。
- en: 'References: [#2054](https://www.sqlalchemy.org/trac/ticket/2054)'
  id: totrans-1299
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2054](https://www.sqlalchemy.org/trac/ticket/2054)
- en: 0.7.0b1
  id: totrans-1300
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.7.0b1
- en: 'Released: Sat Feb 12 2011'
  id: totrans-1301
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2011年2月12日星期六
- en: general
  id: totrans-1302
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: general
- en: '**[general]**'
  id: totrans-1303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general]**'
- en: New event system, supersedes all extensions, listeners, etc.
  id: totrans-1304
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新的事件系统，取代所有扩展、监听器等。
- en: 'References: [#1902](https://www.sqlalchemy.org/trac/ticket/1902)'
  id: totrans-1305
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1902](https://www.sqlalchemy.org/trac/ticket/1902)
- en: '**[general]**'
  id: totrans-1306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general]**'
- en: Logging enhancements
  id: totrans-1307
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 日志增强
- en: 'References: [#1926](https://www.sqlalchemy.org/trac/ticket/1926)'
  id: totrans-1308
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1926](https://www.sqlalchemy.org/trac/ticket/1926)
- en: '**[general]**'
  id: totrans-1309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general]**'
- en: Setup no longer installs a Nose plugin
  id: totrans-1310
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 设置不再安装Nose插件
- en: 'References: [#1949](https://www.sqlalchemy.org/trac/ticket/1949)'
  id: totrans-1311
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1949](https://www.sqlalchemy.org/trac/ticket/1949)
- en: '**[general]**'
  id: totrans-1312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general]**'
- en: The “sqlalchemy.exceptions” alias in sys.modules has been removed. Base SQLA
    exceptions are available via “from sqlalchemy import exc”. The “exceptions” alias
    for “exc” remains in “sqlalchemy” for now, it’s just not patched into sys.modules.
  id: totrans-1313
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: sys.modules中的“sqlalchemy.exceptions”别名已被移除。基本SQLA异常可通过“from sqlalchemy import
    exc”获得。“exceptions”别名用于“exc”的“sqlalchemy”现在仍然存在，只是没有被打补丁到sys.modules中。
- en: orm
  id: totrans-1314
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-1315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: More succinct form of query.join(target, onclause)
  id: totrans-1316
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更简洁的查询.join(target, onclause)形式
- en: 'References: [#1923](https://www.sqlalchemy.org/trac/ticket/1923)'
  id: totrans-1317
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1923](https://www.sqlalchemy.org/trac/ticket/1923)
- en: '**[orm]**'
  id: totrans-1318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Hybrid Attributes, implements/supersedes synonym()
  id: totrans-1319
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 混合属性，实现/取代同义词()
- en: 'References: [#1903](https://www.sqlalchemy.org/trac/ticket/1903)'
  id: totrans-1320
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1903](https://www.sqlalchemy.org/trac/ticket/1903)
- en: '**[orm]**'
  id: totrans-1321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Rewrite of composites
  id: totrans-1322
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 复合体的重写
- en: 'References: [#2008](https://www.sqlalchemy.org/trac/ticket/2008)'
  id: totrans-1323
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2008](https://www.sqlalchemy.org/trac/ticket/2008)
- en: '**[orm]**'
  id: totrans-1324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Mutation Event Extension, supersedes “mutable=True”
  id: totrans-1325
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 变异事件扩展，取代“mutable=True”
- en: See also
  id: totrans-1326
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Mutation event extension, supersedes “mutable=True”](migration_07.html#migration-mutation-extension)'
  id: totrans-1327
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[变异事件扩展，取代“mutable=True”](migration_07.html#migration-mutation-extension)'
- en: '**[orm]**'
  id: totrans-1328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: PickleType and ARRAY mutability turned off by default
  id: totrans-1329
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: PickleType和ARRAY的可变性默认关闭
- en: 'References: [#1980](https://www.sqlalchemy.org/trac/ticket/1980)'
  id: totrans-1330
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1980](https://www.sqlalchemy.org/trac/ticket/1980)
- en: '**[orm]**'
  id: totrans-1331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Simplified polymorphic_on assignment
  id: totrans-1332
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 简化的多态_on赋值
- en: 'References: [#1895](https://www.sqlalchemy.org/trac/ticket/1895)'
  id: totrans-1333
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1895](https://www.sqlalchemy.org/trac/ticket/1895)
- en: '**[orm]**'
  id: totrans-1334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Flushing of Orphans that have no parent is allowed
  id: totrans-1335
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 允许刷新没有父级的孤立对象
- en: 'References: [#1912](https://www.sqlalchemy.org/trac/ticket/1912)'
  id: totrans-1336
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1912](https://www.sqlalchemy.org/trac/ticket/1912)
- en: '**[orm]**'
  id: totrans-1337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Adjusted flush accounting step to occur before the commit in the case of autocommit=True.
    This allows autocommit=True to work appropriately with expire_on_commit=True,
    and also allows post-flush session hooks to operate in the same transactional
    context as when autocommit=False.
  id: totrans-1338
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整刷新记账步骤，以在autocommit=True的情况下在提交之前发生。这允许autocommit=True与expire_on_commit=True正常工��，并且还允许后刷新会话钩子在与autocommit=False时相同的事务上下文中运行。
- en: 'References: [#2041](https://www.sqlalchemy.org/trac/ticket/2041)'
  id: totrans-1339
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2041](https://www.sqlalchemy.org/trac/ticket/2041)
- en: '**[orm]**'
  id: totrans-1340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Warnings generated when collection members, scalar referents not part of the
    flush
  id: totrans-1341
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在刷新时生成警告，集合成员，标量引用不是刷新的一部分
- en: 'References: [#1973](https://www.sqlalchemy.org/trac/ticket/1973)'
  id: totrans-1342
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1973](https://www.sqlalchemy.org/trac/ticket/1973)
- en: '**[orm]**'
  id: totrans-1343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Non-Table-derived constructs can be mapped
  id: totrans-1344
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 非表派生结构可以映射
- en: 'References: [#1876](https://www.sqlalchemy.org/trac/ticket/1876)'
  id: totrans-1345
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1876](https://www.sqlalchemy.org/trac/ticket/1876)
- en: '**[orm]**'
  id: totrans-1346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Tuple label names in Query Improved
  id: totrans-1347
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 查询改进中的元组标签名称
- en: 'References: [#1942](https://www.sqlalchemy.org/trac/ticket/1942)'
  id: totrans-1348
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1942](https://www.sqlalchemy.org/trac/ticket/1942)
- en: '**[orm]**'
  id: totrans-1349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Mapped column attributes reference the most specific column first
  id: totrans-1350
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 映射列属性首先引用最具体的列
- en: 'References: [#1892](https://www.sqlalchemy.org/trac/ticket/1892)'
  id: totrans-1351
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1892](https://www.sqlalchemy.org/trac/ticket/1892)
- en: '**[orm]**'
  id: totrans-1352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Mapping to joins with two or more same-named columns requires explicit declaration
  id: totrans-1353
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 映射到具有两个或更多同名列的连接需要明确声明
- en: 'References: [#1896](https://www.sqlalchemy.org/trac/ticket/1896)'
  id: totrans-1354
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1896](https://www.sqlalchemy.org/trac/ticket/1896)
- en: '**[orm]**'
  id: totrans-1355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Mapper requires that polymorphic_on column be present in the mapped selectable
  id: totrans-1356
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Mapper要求映射选择中存在多态_on列
- en: 'References: [#1875](https://www.sqlalchemy.org/trac/ticket/1875)'
  id: totrans-1357
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1875](https://www.sqlalchemy.org/trac/ticket/1875)
- en: '**[orm]**'
  id: totrans-1358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: compile_mappers() renamed configure_mappers(), simplified configuration internals
  id: totrans-1359
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: compile_mappers()重命名为configure_mappers()，简化配置内部
- en: 'References: [#1966](https://www.sqlalchemy.org/trac/ticket/1966)'
  id: totrans-1360
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1966](https://www.sqlalchemy.org/trac/ticket/1966)
- en: '**[orm]**'
  id: totrans-1361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: the aliased() function, if passed a SQL FromClause element (i.e. not a mapped
    class), will return element.alias() instead of raising an error on AliasedClass.
  id: totrans-1362
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果传递了一个SQL FromClause元素（即不是映射类），aliased()函数将返回element.alias()，而不是在AliasedClass上引发错误。
- en: 'References: [#2018](https://www.sqlalchemy.org/trac/ticket/2018)'
  id: totrans-1363
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2018](https://www.sqlalchemy.org/trac/ticket/2018)
- en: '**[orm]**'
  id: totrans-1364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Session.merge() will check the version id of the incoming state against that
    of the database, assuming the mapping uses version ids and incoming state has
    a version_id assigned, and raise StaleDataError if they don’t match.
  id: totrans-1365
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Session.merge() 将检查传入状态的版本id与数据库的版本id是否匹配，假设映射使用版本id并且传入状态已分配版本id，并在它们不匹配时引发StaleDataError。
- en: 'References: [#2027](https://www.sqlalchemy.org/trac/ticket/2027)'
  id: totrans-1366
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2027](https://www.sqlalchemy.org/trac/ticket/2027)
- en: '**[orm]**'
  id: totrans-1367
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Session.connection(), Session.execute() accept ‘bind’, to allow execute/connection
    operations to participate in the open transaction of an engine explicitly.
  id: totrans-1368
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Session.connection()、Session.execute()接受‘bind’，允许执行/连接操作显式参与引擎的打开事务。
- en: 'References: [#1996](https://www.sqlalchemy.org/trac/ticket/1996)'
  id: totrans-1369
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1996](https://www.sqlalchemy.org/trac/ticket/1996)
- en: '**[orm]**'
  id: totrans-1370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query.join(), Query.outerjoin(), eagerload(), eagerload_all(), others no longer
    allow lists of attributes as arguments (i.e. option([x, y, z]) form, deprecated
    since 0.5)
  id: totrans-1371
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query.join()、Query.outerjoin()、eagerload()、eagerload_all()等不再允许将属性列表作为参数（即option([x,
    y, z])形式，自0.5版本起已弃用）。
- en: '**[orm]**'
  id: totrans-1372
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: ScopedSession.mapper is removed (deprecated since 0.5).
  id: totrans-1373
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ScopedSession.mapper 已移除（自0.5版本起已弃用）。
- en: '**[orm]**'
  id: totrans-1374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Horizontal shard query places ‘shard_id’ in context.attributes where it’s accessible
    by the “load()” event.
  id: totrans-1375
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 水平分片查询将“shard_id”放在上下文属性中，可以通过“load()”事件访问。
- en: 'References: [#2031](https://www.sqlalchemy.org/trac/ticket/2031)'
  id: totrans-1376
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2031](https://www.sqlalchemy.org/trac/ticket/2031)
- en: '**[orm]**'
  id: totrans-1377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: A single contains_eager() call across multiple entities will indicate all collections
    along that path should load, instead of requiring distinct contains_eager() calls
    for each endpoint (which was never correctly documented).
  id: totrans-1378
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在多个实体上进行单个contains_eager()调用将指示沿该路径的所有集合应该加载，而不是要求为每个端点分别进行不同的contains_eager()调用（这从未被正确记录）。
- en: 'References: [#2032](https://www.sqlalchemy.org/trac/ticket/2032)'
  id: totrans-1379
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2032](https://www.sqlalchemy.org/trac/ticket/2032)
- en: '**[orm]**'
  id: totrans-1380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The “name” field used in orm.aliased() now renders in the resulting SQL statement.
  id: totrans-1381
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在orm.aliased()中使用的“name”字段现在在生成的SQL语句中呈现。
- en: '**[orm]**'
  id: totrans-1382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Session weak_instance_dict=False is deprecated.
  id: totrans-1383
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Session weak_instance_dict=False 已弃用。
- en: 'References: [#1473](https://www.sqlalchemy.org/trac/ticket/1473)'
  id: totrans-1384
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1473](https://www.sqlalchemy.org/trac/ticket/1473)
- en: '**[orm]**'
  id: totrans-1385
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: An exception is raised in the unusual case that an append or similar event on
    a collection occurs after the parent object has been dereferenced, which prevents
    the parent from being marked as “dirty” in the session. Was a warning in 0.6.6.
  id: totrans-1386
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在罕见情况下，如果在父对象被取消引用后发生附加或类似事件的情况，将引发异常，这将阻止父对象在会话中被标记为“脏”。在0.6.6版本中是一个警告。
- en: 'References: [#2046](https://www.sqlalchemy.org/trac/ticket/2046)'
  id: totrans-1387
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2046](https://www.sqlalchemy.org/trac/ticket/2046)
- en: '**[orm]**'
  id: totrans-1388
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query.distinct() now accepts column expressions as *args, interpreted by the
    PostgreSQL dialect as DISTINCT ON (<expr>).
  id: totrans-1389
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query.distinct() 现在接受列表达式作为*args，由PostgreSQL方言解释为DISTINCT ON (<expr>)。
- en: 'References: [#1069](https://www.sqlalchemy.org/trac/ticket/1069)'
  id: totrans-1390
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1069](https://www.sqlalchemy.org/trac/ticket/1069)
- en: '**[orm]**'
  id: totrans-1391
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Additional tuning to “many-to-one” relationship loads during a flush(). A change
    in version 0.6.6 ([ticket:2002]) required that more “unnecessary” m2o loads during
    a flush could occur. Extra loading modes have been added so that the SQL emitted
    in this specific use case is trimmed back, while still retrieving the information
    the flush needs in order to not miss anything.
  id: totrans-1392
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在flush()期间对“多对一”关系加载进行了额外调整。在0.6.6版本中的更改（[ticket:2002]）要求在flush期间可能发生更多“不必要”的m2o加载。已添加额外的加载模式，以便在这种特定情况下发出的SQL被修剪回来，同时仍然检索flush所需的信息，以免遗漏任何内容。
- en: 'References: [#2049](https://www.sqlalchemy.org/trac/ticket/2049)'
  id: totrans-1393
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2049](https://www.sqlalchemy.org/trac/ticket/2049)
- en: '**[orm]**'
  id: totrans-1394
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: the value of “passive” as passed to attributes.get_history() should be one of
    the constants defined in the attributes package. Sending True or False is deprecated.
  id: totrans-1395
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为传递给attributes.get_history()的“passive”值应该是attributes包中定义的常量之一。发送True或False已弃用。
- en: '**[orm]**'
  id: totrans-1396
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added a name argument to Query.subquery(), to allow a fixed name to be assigned
    to the alias object. (also in 0.6.7)
  id: totrans-1397
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个name参数到Query.subquery()，允许为别名对象分配一个固定的名称。（也适用于0.6.7版本）
- en: 'References: [#2030](https://www.sqlalchemy.org/trac/ticket/2030)'
  id: totrans-1398
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2030](https://www.sqlalchemy.org/trac/ticket/2030)
- en: '**[orm]**'
  id: totrans-1399
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: A warning is emitted when a joined-table inheriting mapper has no primary keys
    on the locally mapped table (but has pks on the superclass table). (also in 0.6.7)
  id: totrans-1400
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当连接表继承映射器在本地映射表上没有主键（但在超类表上有主键）时，会发出警告。（也适用于0.6.7版本）
- en: 'References: [#2019](https://www.sqlalchemy.org/trac/ticket/2019)'
  id: totrans-1401
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2019](https://www.sqlalchemy.org/trac/ticket/2019)
- en: '**[orm]**'
  id: totrans-1402
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug where “middle” class in a polymorphic hierarchy would have no ‘polymorphic_on’
    column if it didn’t also specify a ‘polymorphic_identity’, leading to strange
    errors upon refresh, wrong class loaded when querying from that target. Also emits
    the correct WHERE criterion when using single table inheritance. (also in 0.6.7)
  id: totrans-1403
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了多态层次结构中“中间”类如果没有指定“polymorphic_identity”列，就不会有“polymorphic_on”列的错误，导致刷新时出现奇怪的错误，从该目标查询时加载错误的类。在使用单表继承时也会发出正确的WHERE条件。（也适用于0.6.7版本）
- en: 'References: [#2038](https://www.sqlalchemy.org/trac/ticket/2038)'
  id: totrans-1404
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2038](https://www.sqlalchemy.org/trac/ticket/2038)
- en: '**[orm]**'
  id: totrans-1405
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug where a column with a SQL or server side default that was excluded
    from a mapping with include_properties or exclude_properties would result in UnmappedColumnError.
    (also in 0.6.7)
  id: totrans-1406
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即具有 SQL 或服务器端默认值的列被排除在包含属性或排除属性的映射中，会导致 UnmappedColumnError。（也适用于0.6.7版本）
- en: 'References: [#1995](https://www.sqlalchemy.org/trac/ticket/1995)'
  id: totrans-1407
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1995](https://www.sqlalchemy.org/trac/ticket/1995)
- en: '**[orm]**'
  id: totrans-1408
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: A warning is emitted in the unusual case that an append or similar event on
    a collection occurs after the parent object has been dereferenced, which prevents
    the parent from being marked as “dirty” in the session. This will be an exception
    in 0.7\. (also in 0.6.7)
  id: totrans-1409
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在罕见情况下，如果在父对象被取消引用后发生附加或类似事件的情况下，会发出警告，这会阻止父对象在会话中被标记为“脏”。这将在0.7版本中成为异常。（也适用于0.6.7版本）
- en: 'References: [#2046](https://www.sqlalchemy.org/trac/ticket/2046)'
  id: totrans-1410
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2046](https://www.sqlalchemy.org/trac/ticket/2046)
- en: sql
  id: totrans-1411
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-1412
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added over() function, method to FunctionElement classes, produces the _Over()
    construct which in turn generates “window functions”, i.e. “<window function>
    OVER (PARTITION BY <partition by>, ORDER BY <order by>)”.
  id: totrans-1413
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 over() 函数，FunctionElement 类的方法，生成 _Over() 构造，进而生成“窗口函数”，即“<window function>
    OVER (PARTITION BY <partition by>, ORDER BY <order by>)”。
- en: 'References: [#1844](https://www.sqlalchemy.org/trac/ticket/1844)'
  id: totrans-1414
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1844](https://www.sqlalchemy.org/trac/ticket/1844)
- en: '**[sql]**'
  id: totrans-1415
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: LIMIT/OFFSET clauses now use bind parameters
  id: totrans-1416
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: LIMIT/OFFSET 子句现在使用绑定参数
- en: 'References: [#805](https://www.sqlalchemy.org/trac/ticket/805)'
  id: totrans-1417
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#805](https://www.sqlalchemy.org/trac/ticket/805)
- en: '**[sql]**'
  id: totrans-1418
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: select.distinct() now accepts column expressions as *args, interpreted by the
    PostgreSQL dialect as DISTINCT ON (<expr>). Note this was already available via
    passing a list to the distinct keyword argument to select().
  id: totrans-1419
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: select.distinct() 现在接受列表达式作为 *args，由 PostgreSQL 方言解释为 DISTINCT ON (<expr>)。请注意，通过将列表传递给
    select() 的 distinct 关键字参数已经可以实现此功能。
- en: 'References: [#1069](https://www.sqlalchemy.org/trac/ticket/1069)'
  id: totrans-1420
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1069](https://www.sqlalchemy.org/trac/ticket/1069)
- en: '**[sql]**'
  id: totrans-1421
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: select.prefix_with() accepts multiple expressions (i.e. *expr), ‘prefix’ keyword
    argument to select() accepts a list or tuple.
  id: totrans-1422
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: select.prefix_with() 接受多个表达式（即 *expr），select() 的 'prefix' 关键字参数接受列表或元组。
- en: '**[sql]**'
  id: totrans-1423
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Passing a string to the distinct keyword argument of select() for the purpose
    of emitting special MySQL keywords (DISTINCTROW etc.) is deprecated - use prefix_with()
    for this.
  id: totrans-1424
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将字符串传递给 select() 的 distinct 关键字参数以发出特殊的 MySQL 关键字（DISTINCTROW 等）已被弃用 - 请使用 prefix_with()。
- en: '**[sql]**'
  id: totrans-1425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: TypeDecorator works with primary key columns
  id: totrans-1426
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: TypeDecorator 与主键列一起使用
- en: 'References: [#2005](https://www.sqlalchemy.org/trac/ticket/2005), [#2006](https://www.sqlalchemy.org/trac/ticket/2006)'
  id: totrans-1427
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2005](https://www.sqlalchemy.org/trac/ticket/2005), [#2006](https://www.sqlalchemy.org/trac/ticket/2006)
- en: '**[sql]**'
  id: totrans-1428
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: DDL() constructs now escape percent signs
  id: totrans-1429
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: DDL() 构造现在会转义百分号
- en: 'References: [#1897](https://www.sqlalchemy.org/trac/ticket/1897)'
  id: totrans-1430
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1897](https://www.sqlalchemy.org/trac/ticket/1897)
- en: '**[sql]**'
  id: totrans-1431
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Table.c / MetaData.tables refined a bit, don’t allow direct mutation
  id: totrans-1432
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Table.c / MetaData.tables 稍微调整，不允许直接变异
- en: 'References: [#1893](https://www.sqlalchemy.org/trac/ticket/1893), [#1917](https://www.sqlalchemy.org/trac/ticket/1917)'
  id: totrans-1433
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1893](https://www.sqlalchemy.org/trac/ticket/1893), [#1917](https://www.sqlalchemy.org/trac/ticket/1917)
- en: '**[sql]**'
  id: totrans-1434
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Callables passed to bindparam() don’t get evaluated
  id: totrans-1435
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 传递给 bindparam() 的可调用对象不会被评估
- en: 'References: [#1950](https://www.sqlalchemy.org/trac/ticket/1950)'
  id: totrans-1436
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1950](https://www.sqlalchemy.org/trac/ticket/1950)
- en: '**[sql]**'
  id: totrans-1437
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: types.type_map is now private, types._type_map
  id: totrans-1438
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: types.type_map 现在是私有的，types._type_map
- en: 'References: [#1870](https://www.sqlalchemy.org/trac/ticket/1870)'
  id: totrans-1439
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1870](https://www.sqlalchemy.org/trac/ticket/1870)
- en: '**[sql]**'
  id: totrans-1440
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Non-public Pool methods underscored
  id: totrans-1441
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 非公共的Pool方法已经加下划线标记
- en: 'References: [#1982](https://www.sqlalchemy.org/trac/ticket/1982)'
  id: totrans-1442
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1982](https://www.sqlalchemy.org/trac/ticket/1982)
- en: '**[sql]**'
  id: totrans-1443
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added NULLS FIRST and NULLS LAST support. It’s implemented as an extension to
    the asc() and desc() operators, called nullsfirst() and nullslast().
  id: totrans-1444
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了NULLS FIRST和NULLS LAST支持。它作为asc()和desc()操作符的扩展实现，称为nullsfirst()和nullslast()。
- en: 'References: [#723](https://www.sqlalchemy.org/trac/ticket/723)'
  id: totrans-1445
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#723](https://www.sqlalchemy.org/trac/ticket/723)
- en: '**[sql]**'
  id: totrans-1446
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The Index() construct can be created inline with a Table definition, using strings
    as column names, as an alternative to the creation of the index outside of the
    Table.
  id: totrans-1447
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Index()构造可以与Table定义内联创建，使用字符串作为列名，作为在Table之外创建索引的替代方法。
- en: '**[sql]**'
  id: totrans-1448
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: execution_options() on Connection accepts “isolation_level” argument, sets transaction
    isolation level for that connection only until returned to the connection pool,
    for those backends which support it (SQLite, PostgreSQL)
  id: totrans-1449
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Connection上的execution_options()接受“isolation_level”参数，仅为该连接设置事务隔离级别，直到返回到连接池，对于支持它的后端（SQLite，PostgreSQL）
- en: 'References: [#2001](https://www.sqlalchemy.org/trac/ticket/2001)'
  id: totrans-1450
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2001](https://www.sqlalchemy.org/trac/ticket/2001)
- en: '**[sql]**'
  id: totrans-1451
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: A TypeDecorator of Integer can be used with a primary key column, and the “autoincrement”
    feature of various dialects as well as the “sqlite_autoincrement” flag will honor
    the underlying database type as being Integer-based.
  id: totrans-1452
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Integer的TypeDecorator可以与主键列一起使用，并且各种方言的“autoincrement”特性以及“sqlite_autoincrement”标志将尊重底层数据库类型为基于Integer的情况。
- en: 'References: [#2005](https://www.sqlalchemy.org/trac/ticket/2005)'
  id: totrans-1453
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2005](https://www.sqlalchemy.org/trac/ticket/2005)
- en: '**[sql]**'
  id: totrans-1454
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Established consistency when server_default is present on an Integer PK column.
    SQLA doesn’t pre-fetch these, nor do they come back in cursor.lastrowid (DBAPI).
    Ensured all backends consistently return None in result.inserted_primary_key for
    these. Regarding reflection for this case, reflection of an int PK col with a
    server_default sets the “autoincrement” flag to False, except in the case of a
    PG SERIAL col where we detected a sequence default.
  id: totrans-1455
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当Integer主键列上存在server_default时确保了一致性。SQLA不会预取这些值，它们也不会在cursor.lastrowid（DBAPI）中返回。确保所有后端在这种情况下一致地在result.inserted_primary_key中返回None。关于这种情况的反射，具有server_default的int主键列的反射会将“autoincrement”标志设置为False，除了在检测到序列默认值的PG
    SERIAL列的情况下。
- en: 'References: [#2020](https://www.sqlalchemy.org/trac/ticket/2020), [#2021](https://www.sqlalchemy.org/trac/ticket/2021)'
  id: totrans-1456
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2020](https://www.sqlalchemy.org/trac/ticket/2020), [#2021](https://www.sqlalchemy.org/trac/ticket/2021)
- en: '**[sql]**'
  id: totrans-1457
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Result-row processors are applied to pre-executed SQL defaults, as well as cursor.lastrowid,
    when determining the contents of result.inserted_primary_key.
  id: totrans-1458
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在确定result.inserted_primary_key的内容时，结果行处理器会应用于预执行的SQL默认值，以及cursor.lastrowid。
- en: 'References: [#2006](https://www.sqlalchemy.org/trac/ticket/2006)'
  id: totrans-1459
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2006](https://www.sqlalchemy.org/trac/ticket/2006)
- en: '**[sql]**'
  id: totrans-1460
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Bind parameters present in the “columns clause” of a select are now auto-labeled
    like other “anonymous” clauses, which among other things allows their “type” to
    be meaningful when the row is fetched, as in result row processors.
  id: totrans-1461
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，在select语句的“columns clause”中存在的绑定参数会像其他“匿名”子句一样自动标记，这样在获取行时它们的“类型”就会有意义，就像结果行处理器一样。
- en: '**[sql]**'
  id: totrans-1462
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: TypeDecorator is present in the “sqlalchemy” import space.
  id: totrans-1463
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: TypeDecorator 存在于“sqlalchemy”导入空间中。
- en: '**[sql]**'
  id: totrans-1464
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Non-DBAPI errors which occur in the scope of an execute() call are now wrapped
    in sqlalchemy.exc.StatementError, and the text of the SQL statement and repr()
    of params is included. This makes it easier to identify statement executions which
    fail before the DBAPI becomes involved.
  id: totrans-1465
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在execute()调用范围内发生的非DBAPI错误现在被包装在sqlalchemy.exc.StatementError中，并包含SQL语句的文本和params的repr()。这样可以更容易地识别在DBAPI介入之前失败的语句执行。
- en: 'References: [#2015](https://www.sqlalchemy.org/trac/ticket/2015)'
  id: totrans-1466
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2015](https://www.sqlalchemy.org/trac/ticket/2015)
- en: '**[sql]**'
  id: totrans-1467
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The concept of associating a “.bind” directly with a ClauseElement has been
    explicitly moved to Executable, i.e. the mixin that describes ClauseElements which
    represent engine-executable constructs. This change is an improvement to internal
    organization and is unlikely to affect any real-world usage.
  id: totrans-1468
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将直接将“.bind”与ClauseElement关联的概念明确地移动到Executable，即描述表示引擎可执行构造的混合体。这个改变是对内部组织的改进，不太可能影响任何真实世界的使用。
- en: 'References: [#2048](https://www.sqlalchemy.org/trac/ticket/2048)'
  id: totrans-1469
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2048](https://www.sqlalchemy.org/trac/ticket/2048)
- en: '**[sql]**'
  id: totrans-1470
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Column.copy(), as used in table.tometadata(), copies the ‘doc’ attribute. (also
    in 0.6.7)
  id: totrans-1471
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Column.copy()，如在 table.tometadata() 中使用，将复制 'doc' 属性。（也适用于 0.6.7 版本）
- en: 'References: [#2028](https://www.sqlalchemy.org/trac/ticket/2028)'
  id: totrans-1472
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2028](https://www.sqlalchemy.org/trac/ticket/2028)
- en: '**[sql]**'
  id: totrans-1473
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added some defs to the resultproxy.c extension so that the extension compiles
    and runs on Python 2.4\. (also in 0.6.7)
  id: totrans-1474
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 resultproxy.c 扩展中添加了一些 defs，以便在 Python 2.4 上编译和运行扩展。（也适用于 0.6.7 版本）
- en: 'References: [#2023](https://www.sqlalchemy.org/trac/ticket/2023)'
  id: totrans-1475
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2023](https://www.sqlalchemy.org/trac/ticket/2023)
- en: '**[sql]**'
  id: totrans-1476
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The compiler extension now supports overriding the default compilation of expression._BindParamClause
    including that the auto-generated binds within the VALUES/SET clause of an insert()/update()
    statement will also use the new compilation rules. (also in 0.6.7)
  id: totrans-1477
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 编译器扩展现在支持覆盖默认的表达式编译。_BindParamClause，包括在 insert() / update() 语句的 VALUES/SET
    子句中自动生成的绑定也将使用新的编译规则。（也适用于 0.6.7 版本）
- en: 'References: [#2042](https://www.sqlalchemy.org/trac/ticket/2042)'
  id: totrans-1478
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2042](https://www.sqlalchemy.org/trac/ticket/2042)
- en: '**[sql]**'
  id: totrans-1479
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: SQLite dialect now uses NullPool for file-based databases
  id: totrans-1480
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLite 方言现在对于基于文件的数据库使用 NullPool。
- en: 'References: [#1921](https://www.sqlalchemy.org/trac/ticket/1921)'
  id: totrans-1481
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1921](https://www.sqlalchemy.org/trac/ticket/1921)
- en: '**[sql]**'
  id: totrans-1482
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The path given as the location of a sqlite database is now normalized via os.path.abspath(),
    so that directory changes within the process don’t affect the ultimate location
    of a relative file path.
  id: totrans-1483
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，作为 sqlite 数据库位置的路径通过 os.path.abspath() 进行标准化，以便进程内的目录更改不会影响相对文件路径的最终位置。
- en: 'References: [#2036](https://www.sqlalchemy.org/trac/ticket/2036)'
  id: totrans-1484
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2036](https://www.sqlalchemy.org/trac/ticket/2036)
- en: postgresql
  id: totrans-1485
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql]**'
  id: totrans-1486
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: When explicit sequence execution derives the name of the auto-generated sequence
    of a SERIAL column, which currently only occurs if implicit_returning=False, now
    accommodates if the table + column name is greater than 63 characters using the
    same logic PostgreSQL uses. (also in 0.6.7)
  id: totrans-1487
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当显式序列执行推断 SERIAL 列的自动生成序列的名称时，这仅在 implicit_returning=False 时发生，现在使用与 PostgreSQL
    相同的逻辑，适应如果表 + 列名大于 63 个字符。（也适用于 0.6.7 版本）
- en: 'References: [#1083](https://www.sqlalchemy.org/trac/ticket/1083)'
  id: totrans-1488
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1083](https://www.sqlalchemy.org/trac/ticket/1083)
- en: '**[postgresql]**'
  id: totrans-1489
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Added an additional libpq message to the list of “disconnect” exceptions, “could
    not receive data from server” (also in 0.6.7)
  id: totrans-1490
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个额外的 libpq 消息到“断开”异常列表中，“could not receive data from server”（也适用于 0.6.7
    版本）
- en: 'References: [#2044](https://www.sqlalchemy.org/trac/ticket/2044)'
  id: totrans-1491
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2044](https://www.sqlalchemy.org/trac/ticket/2044)
- en: mysql
  id: totrans-1492
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-1493
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: New DBAPI support for pymysql, a pure Python port of MySQL-python.
  id: totrans-1494
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新的 DBAPI 支持 pymysql，这是 MySQL-python 的纯 Python 移植。
- en: 'References: [#1991](https://www.sqlalchemy.org/trac/ticket/1991)'
  id: totrans-1495
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1991](https://www.sqlalchemy.org/trac/ticket/1991)
- en: '**[mysql]**'
  id: totrans-1496
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: oursql dialect accepts the same “ssl” arguments in create_engine() as that of
    MySQLdb. (also in 0.6.7)
  id: totrans-1497
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: oursql 方言在 create_engine() 中接受与 MySQLdb 相同的 “ssl” 参数。（也适用于 0.6.7 版本）
- en: 'References: [#2047](https://www.sqlalchemy.org/trac/ticket/2047)'
  id: totrans-1498
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2047](https://www.sqlalchemy.org/trac/ticket/2047)
- en: mssql
  id: totrans-1499
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-1500
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: the String/Unicode types, and their counterparts VARCHAR/ NVARCHAR, emit “max”
    as the length when no length is specified, so that the default length, normally
    ‘1’ as per SQL server documentation, is instead ‘unbounded’. This also occurs
    for the VARBINARY type..
  id: totrans-1501
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当没有指定长度时，String/Unicode 类型及其对应的 VARCHAR/NVARCHAR 类型将以 “max” 作为长度，因此默认长度，通常根据
    SQL Server 文档为 '1'，现在为 'unbounded'。对于 VARBINARY 类型也是如此。
- en: This behavior makes these types more closely compatible with PostgreSQL’s VARCHAR
    type which is similarly unbounded when no length is specified.
  id: totrans-1502
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当没有指定长度时，此行为使得这些类型更加兼容 PostgreSQL 的 VARCHAR 类型，后者在没有指定长度时同样是无界的。
- en: 'References: [#1833](https://www.sqlalchemy.org/trac/ticket/1833)'
  id: totrans-1503
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1833](https://www.sqlalchemy.org/trac/ticket/1833)
- en: misc
  id: totrans-1504
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[no_tags]**'
  id: totrans-1505
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: 'Detailed descriptions of each change below are described at: [https://docs.sqlalchemy.org/en/latest/changelog/migration_07.html](https://docs.sqlalchemy.org/en/latest/changelog/migration_07.html)'
  id: totrans-1506
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每个变化的详细描述如下：[https://docs.sqlalchemy.org/en/latest/changelog/migration_07.html](https://docs.sqlalchemy.org/en/latest/changelog/migration_07.html)
- en: '**[declarative]**'
  id: totrans-1507
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative]**'
- en: Added an explicit check for the case that the name ‘metadata’ is used for a
    column attribute on a declarative class. (also in 0.6.7)
  id: totrans-1508
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个显式检查的情况，即在声明类的列属性上使用名称 ‘metadata’。（也适用于 0.6.7 版本）
- en: 'References: [#2050](https://www.sqlalchemy.org/trac/ticket/2050)'
  id: totrans-1509
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2050](https://www.sqlalchemy.org/trac/ticket/2050)
- en: '**[firebird]**'
  id: totrans-1510
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: Some adjustments so that Interbase is supported as well. FB/Interbase version
    idents are parsed into a structure such as (8, 1, 1, ‘interbase’) or (2, 1, 588,
    ‘firebird’) so they can be distinguished.
  id: totrans-1511
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 进行了一些调整，以支持Interbase。FB/Interbase版本标识被解析为类似(8, 1, 1, ‘interbase’)或(2, 1, 588,
    ‘firebird’)的结构，以便区分它们。
- en: 'References: [#1885](https://www.sqlalchemy.org/trac/ticket/1885)'
  id: totrans-1512
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1885](https://www.sqlalchemy.org/trac/ticket/1885)
- en: 0.7.11
  id: totrans-1513
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.7.11
- en: no release date
  id: totrans-1514
  prefs: []
  type: TYPE_NORMAL
  zh: 无发布日期
- en: orm
  id: totrans-1515
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1516
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where list instrumentation would fail to represent a setslice of `[0:0]`
    correctly, which in particular could occur when using `insert(0, item)` with the
    association proxy. Due to some quirk in Python collections, the issue was much
    more likely with Python 3 rather than 2.
  id: totrans-1517
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了列表插入操作`insert(0, item)`时，列表仪器化无法正确表示`[0:0]`的bug，特别是在使用关联代理时可能发生。由于Python集合中的一些怪癖，这个问题在Python
    3中比在Python 2中更有可能发生。
- en: 'References: [#2807](https://www.sqlalchemy.org/trac/ticket/2807)'
  id: totrans-1518
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2807](https://www.sqlalchemy.org/trac/ticket/2807)
- en: '**[orm] [bug]**'
  id: totrans-1519
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: 'Fixed bug when a query of the form: `query(SubClass).options(subqueryload(Baseclass.attrname))`,
    where `SubClass` is a joined inh of `BaseClass`, would fail to apply the `JOIN`
    inside the subquery on the attribute load, producing a cartesian product. The
    populated results still tended to be correct as additional rows are just ignored,
    so this issue may be present as a performance degradation in applications that
    are otherwise working correctly.'
  id: totrans-1520
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，当查询形式为：`query(SubClass).options(subqueryload(Baseclass.attrname))`，其中`SubClass`是`BaseClass`的联接继承时，会导致在属性加载时子查询内部的`JOIN`未应用到，产生笛卡尔积。填充的结果仍然倾向于是正确的，因为额外的行只是被忽略，所以这个问题可能会在其他方面正常工作的应用程序中表现为性能下降。
- en: 'References: [#2699](https://www.sqlalchemy.org/trac/ticket/2699)'
  id: totrans-1521
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2699](https://www.sqlalchemy.org/trac/ticket/2699)
- en: '**[orm] [bug]**'
  id: totrans-1522
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in unit of work whereby a joined-inheritance subclass could insert
    the row for the “sub” table before the parent table, if the two tables had no
    ForeignKey constraints set up between them.
  id: totrans-1523
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在工作单元中的一个bug，即当两个表之间没有设置ForeignKey约束时，联接继承子类可能会在父表之前插入“子”表的行。
- en: 'References: [#2689](https://www.sqlalchemy.org/trac/ticket/2689)'
  id: totrans-1524
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2689](https://www.sqlalchemy.org/trac/ticket/2689)
- en: '**[orm] [bug]**'
  id: totrans-1525
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Improved the error message emitted when a “backref loop” is detected, that is
    when an attribute event triggers a bidirectional assignment between two other
    attributes with no end. This condition can occur not just when an object of the
    wrong type is assigned, but also when an attribute is mis-configured to backref
    into an existing backref pair.
  id: totrans-1526
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了在检测到“反向引用循环”时发出的错误消息，即当属性事件触发两个其他属性之间的双向赋值时。这种情况不仅会在分配错误类型的对象时发生，还会在属性被错误配置为反向引用到现有反向引用对时发生。
- en: 'References: [#2674](https://www.sqlalchemy.org/trac/ticket/2674)'
  id: totrans-1527
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2674](https://www.sqlalchemy.org/trac/ticket/2674)
- en: '**[orm] [bug]**'
  id: totrans-1528
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: A warning is emitted when a MapperProperty is assigned to a mapper that replaces
    an existing property, if the properties in question aren’t plain column-based
    properties. Replacement of relationship properties is rarely (ever?) what is intended
    and usually refers to a mapper mis-configuration. This will also warn if a backref
    configures itself on top of an existing one in an inheritance relationship (which
    is an error in 0.8).
  id: totrans-1529
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当将MapperProperty分配给替换现有属性的映射器时，如果涉及的属性不是简单的基于列的属性，则会发出警告。替换关系属性很少（或从未？）是预期的，通常指的是映射器配置错误。如果在继承关系中的现有属性上配置了backref以覆盖现有属性，也会发出警告（这在0.8中是一个错误）。
- en: 'References: [#2674](https://www.sqlalchemy.org/trac/ticket/2674)'
  id: totrans-1530
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2674](https://www.sqlalchemy.org/trac/ticket/2674)
- en: engine
  id: totrans-1531
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-1532
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: The regexp used by the `make_url()` function now parses ipv6 addresses, e.g.
    surrounded by brackets.
  id: totrans-1533
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`make_url()`函数使用的正则表达式现在可以解析ipv6地址，例如被方括号括起来的地址。'
- en: 'References: [#2851](https://www.sqlalchemy.org/trac/ticket/2851)'
  id: totrans-1534
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2851](https://www.sqlalchemy.org/trac/ticket/2851)
- en: sql
  id: totrans-1535
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1536
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed regression dating back to 0.7.9 whereby the name of a CTE might not be
    properly quoted if it was referred to in multiple FROM clauses.
  id: totrans-1537
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了自0.7.9以来的回归，即如果在多个FROM子句中引用了CTE的名称，则可能无法正确引用CTE的名称。
- en: 'References: [#2801](https://www.sqlalchemy.org/trac/ticket/2801)'
  id: totrans-1538
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2801](https://www.sqlalchemy.org/trac/ticket/2801)
- en: '**[sql] [bug] [cte]**'
  id: totrans-1539
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [cte]**'
- en: Fixed bug in common table expression system where if the CTE were used only
    as an `alias()` construct, it would not render using the WITH keyword.
  id: totrans-1540
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了公共表达式系统中的bug，如果CTE仅用作`alias()`构造，则不会使用WITH关键字进行呈现。
- en: 'References: [#2783](https://www.sqlalchemy.org/trac/ticket/2783)'
  id: totrans-1541
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2783](https://www.sqlalchemy.org/trac/ticket/2783)
- en: '**[sql] [bug]**'
  id: totrans-1542
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in [`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") DDL where the “quote” flag from a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") object would not be propagated.
  id: totrans-1543
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") DDL中的bug，其中[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象的“quote”标志不会传播的问题。
- en: 'References: [#2784](https://www.sqlalchemy.org/trac/ticket/2784)'
  id: totrans-1544
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2784](https://www.sqlalchemy.org/trac/ticket/2784)
- en: postgresql
  id: totrans-1545
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-1546
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added support for PostgreSQL’s traditional SUBSTRING function syntax, renders
    as “SUBSTRING(x FROM y FOR z)” when regular `func.substring()` is used. Courtesy
    Gunnlaugur Þór Briem.
  id: totrans-1547
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对PostgreSQL传统的SUBSTRING函数语法的支持，当使用常规`func.substring()`时，呈现为“SUBSTRING(x FROM
    y FOR z)”形式。感谢Gunnlaugur Þór Briem。
- en: 'References: [#2676](https://www.sqlalchemy.org/trac/ticket/2676)'
  id: totrans-1548
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2676](https://www.sqlalchemy.org/trac/ticket/2676)
- en: mysql
  id: totrans-1549
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-1550
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Updates to MySQL reserved words for versions 5.5, 5.6, courtesy Hanno Schlichting.
  id: totrans-1551
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新了MySQL版本5.5、5.6的保留字，感谢Hanno Schlichting。
- en: 'References: [#2791](https://www.sqlalchemy.org/trac/ticket/2791)'
  id: totrans-1552
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2791](https://www.sqlalchemy.org/trac/ticket/2791)
- en: tests
  id: totrans-1553
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [bug]**'
  id: totrans-1554
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[tests] [bug]**'
- en: Fixed an import of “logging” in test_execute which was not working on some linux
    platforms.
  id: totrans-1555
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在一些Linux平台上无法正常工作的test_execute中“logging”的导入问题。
- en: 'References: [#2669](https://www.sqlalchemy.org/trac/ticket/2669), [pull request
    41](https://github.com/sqlalchemy/sqlalchemy/pull/41)'
  id: totrans-1556
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2669](https://www.sqlalchemy.org/trac/ticket/2669)，[pull request 41](https://github.com/sqlalchemy/sqlalchemy/pull/41)
- en: orm
  id: totrans-1557
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1558
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where list instrumentation would fail to represent a setslice of `[0:0]`
    correctly, which in particular could occur when using `insert(0, item)` with the
    association proxy. Due to some quirk in Python collections, the issue was much
    more likely with Python 3 rather than 2.
  id: totrans-1559
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了列表插入操作`insert(0, item)`与关联代理一起使用时，列表插入操作`[0:0]`的错误表示问题，特别是在使用Python 3时更容易出现此问题，而不是Python
    2。
- en: 'References: [#2807](https://www.sqlalchemy.org/trac/ticket/2807)'
  id: totrans-1560
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2807](https://www.sqlalchemy.org/trac/ticket/2807)
- en: '**[orm] [bug]**'
  id: totrans-1561
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: 'Fixed bug when a query of the form: `query(SubClass).options(subqueryload(Baseclass.attrname))`,
    where `SubClass` is a joined inh of `BaseClass`, would fail to apply the `JOIN`
    inside the subquery on the attribute load, producing a cartesian product. The
    populated results still tended to be correct as additional rows are just ignored,
    so this issue may be present as a performance degradation in applications that
    are otherwise working correctly.'
  id: totrans-1562
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了查询形式为：`query(SubClass).options(subqueryload(Baseclass.attrname))`的bug，其中`SubClass`是`BaseClass`的联合继承，将无法在属性加载中应用子查询中的`JOIN`，导致产生笛卡尔积。填充的结果仍然往往是正确的，因为额外的行只是被忽略，所以这个问题可能存在于其他方面正常工作的应用程序中作为性能下降。
- en: 'References: [#2699](https://www.sqlalchemy.org/trac/ticket/2699)'
  id: totrans-1563
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2699](https://www.sqlalchemy.org/trac/ticket/2699)
- en: '**[orm] [bug]**'
  id: totrans-1564
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in unit of work whereby a joined-inheritance subclass could insert
    the row for the “sub” table before the parent table, if the two tables had no
    ForeignKey constraints set up between them.
  id: totrans-1565
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在联合继承子类在两个表之间没有设置外键约束的情况下，可能会在“sub”表之前插入父表的行的工作单元中的错误。
- en: 'References: [#2689](https://www.sqlalchemy.org/trac/ticket/2689)'
  id: totrans-1566
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2689](https://www.sqlalchemy.org/trac/ticket/2689)
- en: '**[orm] [bug]**'
  id: totrans-1567
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Improved the error message emitted when a “backref loop” is detected, that is
    when an attribute event triggers a bidirectional assignment between two other
    attributes with no end. This condition can occur not just when an object of the
    wrong type is assigned, but also when an attribute is mis-configured to backref
    into an existing backref pair.
  id: totrans-1568
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当检测到“backref循环”时，即当属性事件触发两个其他属性之间的双向赋值时，改进了发出的错误消息。这种情况不仅发生在分配错误类型的对象时，还发生在属性配置错误地反向引用到现有的反向引用对时。
- en: 'References: [#2674](https://www.sqlalchemy.org/trac/ticket/2674)'
  id: totrans-1569
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2674](https://www.sqlalchemy.org/trac/ticket/2674)
- en: '**[orm] [bug]**'
  id: totrans-1570
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: A warning is emitted when a MapperProperty is assigned to a mapper that replaces
    an existing property, if the properties in question aren’t plain column-based
    properties. Replacement of relationship properties is rarely (ever?) what is intended
    and usually refers to a mapper mis-configuration. This will also warn if a backref
    configures itself on top of an existing one in an inheritance relationship (which
    is an error in 0.8).
  id: totrans-1571
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当将MapperProperty分配给替换现有属性的映射器时，如果相关属性不是基于简单列的属性，则会发出警告。很少（甚至从未？）预期替换关系属性，并且通常指的是映射器配置错误。如果在继承关系中的现有属性之上配置了backref，则此警告还将警告（这在0.8中是错误的）。
- en: 'References: [#2674](https://www.sqlalchemy.org/trac/ticket/2674)'
  id: totrans-1572
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2674](https://www.sqlalchemy.org/trac/ticket/2674)
- en: engine
  id: totrans-1573
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-1574
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: The regexp used by the `make_url()` function now parses ipv6 addresses, e.g.
    surrounded by brackets.
  id: totrans-1575
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`make_url()`函数使用的正则表达式现在解析ipv6地址，例如，用方括号括起来。'
- en: 'References: [#2851](https://www.sqlalchemy.org/trac/ticket/2851)'
  id: totrans-1576
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2851](https://www.sqlalchemy.org/trac/ticket/2851)
- en: sql
  id: totrans-1577
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1578
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed regression dating back to 0.7.9 whereby the name of a CTE might not be
    properly quoted if it was referred to in multiple FROM clauses.
  id: totrans-1579
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了自0.7.9以来的退化，即如果在多个FROM子句中引用了CTE的名称，则可能无法正确引用该名称。
- en: 'References: [#2801](https://www.sqlalchemy.org/trac/ticket/2801)'
  id: totrans-1580
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2801](https://www.sqlalchemy.org/trac/ticket/2801)
- en: '**[sql] [bug] [cte]**'
  id: totrans-1581
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [cte]**'
- en: Fixed bug in common table expression system where if the CTE were used only
    as an `alias()` construct, it would not render using the WITH keyword.
  id: totrans-1582
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了公共表达式系统中的错误，在该系统中，如果CTE仅用作`alias()`构造，则不会使用WITH关键字呈现。
- en: 'References: [#2783](https://www.sqlalchemy.org/trac/ticket/2783)'
  id: totrans-1583
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2783](https://www.sqlalchemy.org/trac/ticket/2783)
- en: '**[sql] [bug]**'
  id: totrans-1584
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in [`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") DDL where the “quote” flag from a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") object would not be propagated.
  id: totrans-1585
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") DDL中的错误，其中来自[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象的“quote”标志不会被传播。
- en: 'References: [#2784](https://www.sqlalchemy.org/trac/ticket/2784)'
  id: totrans-1586
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2784](https://www.sqlalchemy.org/trac/ticket/2784)
- en: postgresql
  id: totrans-1587
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-1588
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added support for PostgreSQL’s traditional SUBSTRING function syntax, renders
    as “SUBSTRING(x FROM y FOR z)” when regular `func.substring()` is used. Courtesy
    Gunnlaugur Þór Briem.
  id: totrans-1589
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对PostgreSQL传统SUBSTRING函数语法的支持，当使用常规的`func.substring()`时，渲染为“SUBSTRING(x FROM
    y FOR z)” 。感谢Gunnlaugur Þór Briem。
- en: 'References: [#2676](https://www.sqlalchemy.org/trac/ticket/2676)'
  id: totrans-1590
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2676](https://www.sqlalchemy.org/trac/ticket/2676)
- en: mysql
  id: totrans-1591
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-1592
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Updates to MySQL reserved words for versions 5.5, 5.6, courtesy Hanno Schlichting.
  id: totrans-1593
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL版本5.5、5.6的保留字更新，感谢Hanno Schlichting。
- en: 'References: [#2791](https://www.sqlalchemy.org/trac/ticket/2791)'
  id: totrans-1594
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2791](https://www.sqlalchemy.org/trac/ticket/2791)
- en: tests
  id: totrans-1595
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: tests
- en: '**[tests] [bug]**'
  id: totrans-1596
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[tests] [bug]**'
- en: Fixed an import of “logging” in test_execute which was not working on some linux
    platforms.
  id: totrans-1597
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在test_execute中导入“logging”时在某些Linux平台上无法工作的问题。
- en: 'References: [#2669](https://www.sqlalchemy.org/trac/ticket/2669), [pull request
    41](https://github.com/sqlalchemy/sqlalchemy/pull/41)'
  id: totrans-1598
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2669](https://www.sqlalchemy.org/trac/ticket/2669)，[pull request 41](https://github.com/sqlalchemy/sqlalchemy/pull/41)
- en: 0.7.10
  id: totrans-1599
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.7.10
- en: 'Released: Thu Feb 7 2013'
  id: totrans-1600
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2013年2月7日星期四
- en: orm
  id: totrans-1601
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1602
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed potential memory leak which could occur if an arbitrary number of [`sessionmaker`](../orm/session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") objects were created. The anonymous subclass created
    by the sessionmaker, when dereferenced, would not be garbage collected due to
    remaining class-level references from the event package. This issue also applies
    to any custom system that made use of ad-hoc subclasses in conjunction with an
    event dispatcher.
  id: totrans-1603
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了潜在的内存泄漏问题，该问题可能在创建任意数量的[`sessionmaker`](../orm/session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker")对象时发生。当sessionmaker创建的匿名子类在解除引用时，由于事件包中仍然存在类级别的引用，该子类不会被垃圾收集。此问题也适用于与事件调度程序结合使用临时子类的任何自定义系统。
- en: 'References: [#2650](https://www.sqlalchemy.org/trac/ticket/2650)'
  id: totrans-1604
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2650](https://www.sqlalchemy.org/trac/ticket/2650)
- en: '**[orm] [bug]**'
  id: totrans-1605
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: '[`Query.merge_result()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.merge_result
    "sqlalchemy.orm.Query.merge_result") can now load rows from an outer join where
    an entity may be `None` without throwing an error.'
  id: totrans-1606
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Query.merge_result()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.merge_result
    "sqlalchemy.orm.Query.merge_result") 现在可以在外连接中加载可能为 `None` 的实体的行，而不会引发错误。'
- en: 'References: [#2640](https://www.sqlalchemy.org/trac/ticket/2640)'
  id: totrans-1607
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2640](https://www.sqlalchemy.org/trac/ticket/2640)
- en: '**[orm] [bug]**'
  id: totrans-1608
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The [`MutableComposite`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableComposite
    "sqlalchemy.ext.mutable.MutableComposite") type did not allow for the [`MutableBase.coerce()`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableBase.coerce
    "sqlalchemy.ext.mutable.MutableBase.coerce") method to be used, even though the
    code seemed to indicate this intent, so this now works and a brief example is
    added. As a side-effect, the mechanics of this event handler have been changed
    so that new [`MutableComposite`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableComposite
    "sqlalchemy.ext.mutable.MutableComposite") types no longer add per-type global
    event handlers. Also in 0.8.0b2.
  id: totrans-1609
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`MutableComposite`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableComposite
    "sqlalchemy.ext.mutable.MutableComposite") 类型以前不允许使用 [`MutableBase.coerce()`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableBase.coerce
    "sqlalchemy.ext.mutable.MutableBase.coerce") 方法，尽管代码似乎表明了这一意图，所以现在这个方法可以使用了，并添加了一个简短的示例。作为副作用，此事件处理程序的机制已更改，以便新的
    [`MutableComposite`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableComposite
    "sqlalchemy.ext.mutable.MutableComposite") 类型不再添加每个类型的全局事件处理程序。同时也是在 0.8.0b2 中。'
- en: 'References: [#2624](https://www.sqlalchemy.org/trac/ticket/2624)'
  id: totrans-1610
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2624](https://www.sqlalchemy.org/trac/ticket/2624)
- en: '**[orm] [bug]**'
  id: totrans-1611
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed Session accounting bug whereby replacing a deleted object in the identity
    map with another object of the same primary key would raise a “conflicting state”
    error on rollback(), if the replaced primary key were established either via non-unitofwork-established
    INSERT statement or by primary key switch of another instance.
  id: totrans-1612
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 Session 计算错误的 bug，当用另一个具有相同主键的对象替换身份映射中的已删除对象时，如果替换的主键是通过非工作单元建立的 INSERT
    语句或通过另一个实例的主键切换建立的，则在回滚（）时会引发“冲突状态”错误。
- en: 'References: [#2583](https://www.sqlalchemy.org/trac/ticket/2583)'
  id: totrans-1613
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2583](https://www.sqlalchemy.org/trac/ticket/2583)
- en: engine
  id: totrans-1614
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-1615
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") to correctly use the given [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"), if given, without opening a second connection
    from that connection’s [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine").
  id: totrans-1616
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") 以正确使用给定的 [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")，如果给定，而不是从该连接的 [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 中打开第二个连接。
- en: 'References: [#2604](https://www.sqlalchemy.org/trac/ticket/2604)'
  id: totrans-1617
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2604](https://www.sqlalchemy.org/trac/ticket/2604)
- en: sql
  id: totrans-1618
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1619
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Backported adjustment to `__repr__` for [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") to 0.7, allows [`PickleType`](../core/type_basics.html#sqlalchemy.types.PickleType
    "sqlalchemy.types.PickleType") to produce a clean `repr()` to help with Alembic.
  id: totrans-1620
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 回溯调整了 [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") 的 `__repr__` 到 0.7 版本，允许 [`PickleType`](../core/type_basics.html#sqlalchemy.types.PickleType
    "sqlalchemy.types.PickleType") 产生一个干净的 `repr()`，以帮助 Alembic。
- en: 'References: [#2584](https://www.sqlalchemy.org/trac/ticket/2584), [#2594](https://www.sqlalchemy.org/trac/ticket/2594)'
  id: totrans-1621
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2584](https://www.sqlalchemy.org/trac/ticket/2584), [#2594](https://www.sqlalchemy.org/trac/ticket/2594)
- en: '**[sql] [bug]**'
  id: totrans-1622
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where [`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata") would fail if a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") had both a foreign key as well as an alternate “.key”
    name for the column.
  id: totrans-1623
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当 [`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata") 既有外键又有列的备用 “.key” 名称时会失败的 bug。
- en: 'References: [#2643](https://www.sqlalchemy.org/trac/ticket/2643)'
  id: totrans-1624
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2643](https://www.sqlalchemy.org/trac/ticket/2643)
- en: '**[sql] [bug]**'
  id: totrans-1625
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where using server_onupdate=<FetchedValue|DefaultClause> without passing
    the “for_update=True” flag would apply the default object to the server_default,
    blowing away whatever was there. The explicit for_update=True argument shouldn’t
    be needed with this usage (especially since the documentation shows an example
    without it being used) so it is now arranged internally using a copy of the given
    default object, if the flag isn’t set to what corresponds to that argument.
  id: totrans-1626
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在不传递“for_update=True”标志的情况下使用 server_onupdate=<FetchedValue|DefaultClause>
    会将默认对象应用于 server_default，覆盖原有内容的 bug。在这种用法中不应该需要显式的 for_update=True 参数（特别是因为文档显示的示例没有使用它），因此现在在内部使用给定默认对象的副本来安排，如果标志未设置为对应于该参数的值。
- en: 'References: [#2631](https://www.sqlalchemy.org/trac/ticket/2631)'
  id: totrans-1627
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2631](https://www.sqlalchemy.org/trac/ticket/2631)
- en: '**[sql] [gae] [mysql]**'
  id: totrans-1628
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [gae] [mysql]**'
- en: Added a conditional import to the `gaerdbms` dialect which attempts to import
    rdbms_apiproxy vs. rdbms_googleapi to work on both dev and production platforms.
    Also now honors the `instance` attribute. Courtesy Sean Lynch. Also backported
    enhancements to allow username/password as well as fixing error code interpretation
    from 0.8.
  id: totrans-1629
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 `gaerdbms` 方言添加了条件导入，尝试导入 rdbms_apiproxy vs. rdbms_googleapi 以在开发和生产平台上同时工作。现在也支持
    `instance` 属性。感谢 Sean Lynch。还将增强功能回溯到允许用户名/密码以及修复从 0.8 中解释错误代码的问题。
- en: 'References: [#2649](https://www.sqlalchemy.org/trac/ticket/2649)'
  id: totrans-1630
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2649](https://www.sqlalchemy.org/trac/ticket/2649)
- en: mysql
  id: totrans-1631
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [feature]**'
  id: totrans-1632
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [feature]**'
- en: Added “raise_on_warnings” flag to OurSQL dialect.
  id: totrans-1633
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 OurSQL 方言添加了“raise_on_warnings”标志。
- en: 'References: [#2523](https://www.sqlalchemy.org/trac/ticket/2523)'
  id: totrans-1634
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2523](https://www.sqlalchemy.org/trac/ticket/2523)
- en: '**[mysql] [feature]**'
  id: totrans-1635
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [feature]**'
- en: Added “read_timeout” flag to MySQLdb dialect.
  id: totrans-1636
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 MySQLdb 方言添加了“read_timeout”标志。
- en: 'References: [#2554](https://www.sqlalchemy.org/trac/ticket/2554)'
  id: totrans-1637
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2554](https://www.sqlalchemy.org/trac/ticket/2554)
- en: sqlite
  id: totrans-1638
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-1639
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: More adjustment to this SQLite related issue which was released in 0.7.9, to
    intercept legacy SQLite quoting characters when reflecting foreign keys. In addition
    to intercepting double quotes, other quoting characters such as brackets, backticks,
    and single quotes are now also intercepted.
  id: totrans-1640
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于在 0.7.9 中发布的与 SQLite 相关的问题进行了更多调整，以拦截旧版 SQLite 引用外键时的引号字符。除了拦截双引号外，现在还拦截其他引号字符，如括号、反引号和单引号。
- en: 'References: [#2568](https://www.sqlalchemy.org/trac/ticket/2568)'
  id: totrans-1641
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2568](https://www.sqlalchemy.org/trac/ticket/2568)
- en: mssql
  id: totrans-1642
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-1643
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed bug whereby using “key” with Column in conjunction with “schema” for the
    owning Table would fail to locate result rows due to the MSSQL dialect’s “schema
    rendering” logic’s failure to take .key into account.
  id: totrans-1644
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在与 MSSQL 方言的“模式渲染”逻辑未考虑 .key 的情况下，在 Column 中使用“key”与拥有表的“模式”一起会导致无法定位结果行的
    bug。
- en: '**[mssql] [bug]**'
  id: totrans-1645
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Added a Py3K conditional around unnecessary .decode() call in mssql information
    schema, fixes reflection in Py3k.
  id: totrans-1646
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 mssql 信息模式中添加了 Py3K 条件，修复了不必要的 .decode() 调用，修复了 Py3k 中的反射问题。
- en: 'References: [#2638](https://www.sqlalchemy.org/trac/ticket/2638)'
  id: totrans-1647
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2638](https://www.sqlalchemy.org/trac/ticket/2638)
- en: oracle
  id: totrans-1648
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-1649
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: The Oracle LONG type, while an unbounded text type, does not appear to use the
    cx_Oracle.LOB type when result rows are returned, so the dialect has been repaired
    to exclude LONG from having cx_Oracle.LOB filtering applied.
  id: totrans-1650
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Oracle LONG 类型，虽然是一个无界文本类型，但在返回结果行时似乎没有使用 cx_Oracle.LOB 类型，因此方言已被修复，排除了对 LONG
    的 cx_Oracle.LOB 过滤应用。
- en: 'References: [#2620](https://www.sqlalchemy.org/trac/ticket/2620)'
  id: totrans-1651
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2620](https://www.sqlalchemy.org/trac/ticket/2620)
- en: '**[oracle] [bug]**'
  id: totrans-1652
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Repaired the usage of `.prepare()` in conjunction with cx_Oracle so that a return
    value of `False` will result in no call to `connection.commit()`, hence avoiding
    “no transaction” errors. Two-phase transactions have now been shown to work in
    a rudimental fashion with SQLAlchemy and cx_oracle, however are subject to caveats
    observed with the driver; check the documentation for details.
  id: totrans-1653
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在与 cx_Oracle 结合使用 `.prepare()` 时的用法，以便返回值为 `False` 时不会调用 `connection.commit()`，从而避免“无事务”错误。已经证明
    SQLAlchemy 和 cx_oracle 可以以一种基本的方式工作，但受到驱动程序观察到的警告的影响；请查看文档以获取详细信息。
- en: 'References: [#2611](https://www.sqlalchemy.org/trac/ticket/2611)'
  id: totrans-1654
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2611](https://www.sqlalchemy.org/trac/ticket/2611)
- en: '**[oracle] [bug]**'
  id: totrans-1655
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: changed the list of cx_oracle types that are excluded from the setinputsizes()
    step to only include STRING and UNICODE; CLOB and NCLOB are removed. This is to
    work around cx_oracle behavior which is broken for the executemany() call. In
    0.8, this same change is applied however it is also configurable via the exclude_setinputsizes
    argument.
  id: totrans-1656
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更改了从setinputsizes()步骤中排除的cx_oracle类型列表，仅包括STRING和UNICODE；CLOB和NCLOB已被移除。这是为了解决cx_oracle在executemany()调用中存在问题的行为。在0.8中，相同的更改也适用，但也可以通过exclude_setinputsizes参数进行配置。
- en: 'References: [#2561](https://www.sqlalchemy.org/trac/ticket/2561)'
  id: totrans-1657
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2561](https://www.sqlalchemy.org/trac/ticket/2561)
- en: orm
  id: totrans-1658
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1659
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed potential memory leak which could occur if an arbitrary number of [`sessionmaker`](../orm/session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") objects were created. The anonymous subclass created
    by the sessionmaker, when dereferenced, would not be garbage collected due to
    remaining class-level references from the event package. This issue also applies
    to any custom system that made use of ad-hoc subclasses in conjunction with an
    event dispatcher.
  id: totrans-1660
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了潜在的内存泄漏问题，如果创建了任意数量的[`sessionmaker`](../orm/session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker")对象，可能会发生。当通过sessionmaker创建的匿名子类被解引用时，由于事件包中仍然存在类级别的引用，该子类将无法被垃圾回收。这个问题也适用于任何与事件调度程序一起使用临时子类的自定义系统。
- en: 'References: [#2650](https://www.sqlalchemy.org/trac/ticket/2650)'
  id: totrans-1661
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2650](https://www.sqlalchemy.org/trac/ticket/2650)
- en: '**[orm] [bug]**'
  id: totrans-1662
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: '[`Query.merge_result()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.merge_result
    "sqlalchemy.orm.Query.merge_result") can now load rows from an outer join where
    an entity may be `None` without throwing an error.'
  id: totrans-1663
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Query.merge_result()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.merge_result
    "sqlalchemy.orm.Query.merge_result")现在可以从外连接中加载行，其中一个实体可能为`None`而不会抛出错误。'
- en: 'References: [#2640](https://www.sqlalchemy.org/trac/ticket/2640)'
  id: totrans-1664
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2640](https://www.sqlalchemy.org/trac/ticket/2640)
- en: '**[orm] [bug]**'
  id: totrans-1665
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The [`MutableComposite`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableComposite
    "sqlalchemy.ext.mutable.MutableComposite") type did not allow for the [`MutableBase.coerce()`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableBase.coerce
    "sqlalchemy.ext.mutable.MutableBase.coerce") method to be used, even though the
    code seemed to indicate this intent, so this now works and a brief example is
    added. As a side-effect, the mechanics of this event handler have been changed
    so that new [`MutableComposite`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableComposite
    "sqlalchemy.ext.mutable.MutableComposite") types no longer add per-type global
    event handlers. Also in 0.8.0b2.
  id: totrans-1666
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`MutableComposite`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableComposite
    "sqlalchemy.ext.mutable.MutableComposite")类型不允许使用[`MutableBase.coerce()`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableBase.coerce
    "sqlalchemy.ext.mutable.MutableBase.coerce")方法，尽管代码似乎表明了这一意图，所以现在可以使用，并添加了一个简短的示例。作为副作用，此事件处理程序的机制已更改，以便新的[`MutableComposite`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableComposite
    "sqlalchemy.ext.mutable.MutableComposite")类型不再添加每种类型的全局事件处理程序。也适用于0.8.0b2。'
- en: 'References: [#2624](https://www.sqlalchemy.org/trac/ticket/2624)'
  id: totrans-1667
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2624](https://www.sqlalchemy.org/trac/ticket/2624)
- en: '**[orm] [bug]**'
  id: totrans-1668
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed Session accounting bug whereby replacing a deleted object in the identity
    map with another object of the same primary key would raise a “conflicting state”
    error on rollback(), if the replaced primary key were established either via non-unitofwork-established
    INSERT statement or by primary key switch of another instance.
  id: totrans-1669
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Session计数错误的bug，即在身份映射中用另一个具有相同主键的对象替换已删除的对象，如果替换的主键是通过非工作单元建立的INSERT语句或通过另一个实例的主键切换建立的，则在rollback()时会引发“冲突状态”错误。
- en: 'References: [#2583](https://www.sqlalchemy.org/trac/ticket/2583)'
  id: totrans-1670
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2583](https://www.sqlalchemy.org/trac/ticket/2583)
- en: engine
  id: totrans-1671
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-1672
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") to correctly use the given [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"), if given, without opening a second connection
    from that connection’s [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine").
  id: totrans-1673
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect")以正确使用给定的[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")，如果给定的话，而不是从该连接的[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")中打开第二个连接。
- en: 'References: [#2604](https://www.sqlalchemy.org/trac/ticket/2604)'
  id: totrans-1674
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2604](https://www.sqlalchemy.org/trac/ticket/2604)
- en: sql
  id: totrans-1675
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1676
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Backported adjustment to `__repr__` for [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") to 0.7, allows [`PickleType`](../core/type_basics.html#sqlalchemy.types.PickleType
    "sqlalchemy.types.PickleType") to produce a clean `repr()` to help with Alembic.
  id: totrans-1677
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将对[`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")的`__repr__`的调整回溯到0.7版本，允许[`PickleType`](../core/type_basics.html#sqlalchemy.types.PickleType
    "sqlalchemy.types.PickleType")生成一个干净的`repr()`以帮助Alembic。
- en: 'References: [#2584](https://www.sqlalchemy.org/trac/ticket/2584), [#2594](https://www.sqlalchemy.org/trac/ticket/2594)'
  id: totrans-1678
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2584](https://www.sqlalchemy.org/trac/ticket/2584), [#2594](https://www.sqlalchemy.org/trac/ticket/2594)
- en: '**[sql] [bug]**'
  id: totrans-1679
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where [`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata") would fail if a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") had both a foreign key as well as an alternate “.key”
    name for the column.
  id: totrans-1680
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即如果一个Column既有外键又有列的替代“.key”名称，那么[`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata")将失败。
- en: 'References: [#2643](https://www.sqlalchemy.org/trac/ticket/2643)'
  id: totrans-1681
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2643](https://www.sqlalchemy.org/trac/ticket/2643)
- en: '**[sql] [bug]**'
  id: totrans-1682
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where using server_onupdate=<FetchedValue|DefaultClause> without passing
    the “for_update=True” flag would apply the default object to the server_default,
    blowing away whatever was there. The explicit for_update=True argument shouldn’t
    be needed with this usage (especially since the documentation shows an example
    without it being used) so it is now arranged internally using a copy of the given
    default object, if the flag isn’t set to what corresponds to that argument.
  id: totrans-1683
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即在没有传递“for_update=True”标志的情况下使用server_onupdate=<FetchedValue|DefaultClause>会将默认对象应用于server_default，覆盖原有内容。这种用法不应该需要显式的for_update=True参数（尤其是文档中显示的示例没有使用它），因此现在在内部使用给定默认对象的副本，如果标志未设置为对应该参数的值。
- en: 'References: [#2631](https://www.sqlalchemy.org/trac/ticket/2631)'
  id: totrans-1684
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2631](https://www.sqlalchemy.org/trac/ticket/2631)
- en: '**[sql] [gae] [mysql]**'
  id: totrans-1685
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [gae] [mysql]**'
- en: Added a conditional import to the `gaerdbms` dialect which attempts to import
    rdbms_apiproxy vs. rdbms_googleapi to work on both dev and production platforms.
    Also now honors the `instance` attribute. Courtesy Sean Lynch. Also backported
    enhancements to allow username/password as well as fixing error code interpretation
    from 0.8.
  id: totrans-1686
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在`gaerdbms`方言中添加了一个条件导入，尝试导入rdbms_apiproxy和rdbms_googleapi以在开发和生产平台上工作。现在也支持`instance`属性。感谢Sean
    Lynch。还将允许用户名/密码以及修复从0.8版本开始的错误代码解释的增强功能回溯。
- en: 'References: [#2649](https://www.sqlalchemy.org/trac/ticket/2649)'
  id: totrans-1687
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2649](https://www.sqlalchemy.org/trac/ticket/2649)
- en: mysql
  id: totrans-1688
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [feature]**'
  id: totrans-1689
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [feature]**'
- en: Added “raise_on_warnings” flag to OurSQL dialect.
  id: totrans-1690
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在OurSQL方言中添加了“raise_on_warnings”标志。
- en: 'References: [#2523](https://www.sqlalchemy.org/trac/ticket/2523)'
  id: totrans-1691
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2523](https://www.sqlalchemy.org/trac/ticket/2523)
- en: '**[mysql] [feature]**'
  id: totrans-1692
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [feature]**'
- en: Added “read_timeout” flag to MySQLdb dialect.
  id: totrans-1693
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在MySQLdb方言中添加了“read_timeout”标志。
- en: 'References: [#2554](https://www.sqlalchemy.org/trac/ticket/2554)'
  id: totrans-1694
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2554](https://www.sqlalchemy.org/trac/ticket/2554)
- en: sqlite
  id: totrans-1695
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-1696
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: More adjustment to this SQLite related issue which was released in 0.7.9, to
    intercept legacy SQLite quoting characters when reflecting foreign keys. In addition
    to intercepting double quotes, other quoting characters such as brackets, backticks,
    and single quotes are now also intercepted.
  id: totrans-1697
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对与0.7.9版本中发布的这个与SQLite相关的问题进行了进一步调整，以拦截反射外键时的传统SQLite引号字符。除了拦截双引号外，现在还拦截其他引号字符，如方括号、反引号和单引号。
- en: 'References: [#2568](https://www.sqlalchemy.org/trac/ticket/2568)'
  id: totrans-1698
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2568](https://www.sqlalchemy.org/trac/ticket/2568)
- en: mssql
  id: totrans-1699
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-1700
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed bug whereby using “key” with Column in conjunction with “schema” for the
    owning Table would fail to locate result rows due to the MSSQL dialect’s “schema
    rendering” logic’s failure to take .key into account.
  id: totrans-1701
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即在Column中与拥有Table的“schema”一起使用“key”会由于MSSQL方言的“schema渲染”逻辑未考虑.key而无法定位结果行。
- en: '**[mssql] [bug]**'
  id: totrans-1702
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Added a Py3K conditional around unnecessary .decode() call in mssql information
    schema, fixes reflection in Py3k.
  id: totrans-1703
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在mssql信息模式中添加了一个Py3K条件，解决了Py3k中反射的问题。
- en: 'References: [#2638](https://www.sqlalchemy.org/trac/ticket/2638)'
  id: totrans-1704
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2638](https://www.sqlalchemy.org/trac/ticket/2638)
- en: oracle
  id: totrans-1705
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-1706
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: The Oracle LONG type, while an unbounded text type, does not appear to use the
    cx_Oracle.LOB type when result rows are returned, so the dialect has been repaired
    to exclude LONG from having cx_Oracle.LOB filtering applied.
  id: totrans-1707
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'Oracle的LONG类型，虽然是一个无界文本类型，但在返回结果行时似乎不使用cx_Oracle.LOB类型，因此方言已被修复以排除LONG应用cx_Oracle.LOB过滤。 '
- en: 'References: [#2620](https://www.sqlalchemy.org/trac/ticket/2620)'
  id: totrans-1708
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2620](https://www.sqlalchemy.org/trac/ticket/2620)
- en: '**[oracle] [bug]**'
  id: totrans-1709
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Repaired the usage of `.prepare()` in conjunction with cx_Oracle so that a return
    value of `False` will result in no call to `connection.commit()`, hence avoiding
    “no transaction” errors. Two-phase transactions have now been shown to work in
    a rudimental fashion with SQLAlchemy and cx_oracle, however are subject to caveats
    observed with the driver; check the documentation for details.
  id: totrans-1710
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在与cx_Oracle一起使用`.prepare()`时的bug，以便返回值为`False`将导致不调用`connection.commit()`，从而避免“无事务”错误。已经证明在SQLAlchemy和cx_oracle中以一种基本方式工作两阶段事务，但受到与驱动程序观察到的警告的限制；查看文档以获取详细信息。
- en: 'References: [#2611](https://www.sqlalchemy.org/trac/ticket/2611)'
  id: totrans-1711
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2611](https://www.sqlalchemy.org/trac/ticket/2611)
- en: '**[oracle] [bug]**'
  id: totrans-1712
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: changed the list of cx_oracle types that are excluded from the setinputsizes()
    step to only include STRING and UNICODE; CLOB and NCLOB are removed. This is to
    work around cx_oracle behavior which is broken for the executemany() call. In
    0.8, this same change is applied however it is also configurable via the exclude_setinputsizes
    argument.
  id: totrans-1713
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更改了从`setinputsizes()`步骤中排除的cx_oracle类型列表，现在只包括STRING和UNICODE；CLOB和NCLOB已被移除。这是为了解决cx_oracle在executemany()调用中存在问题的情况。在0.8版本中，同样的更改也被应用，但也可以通过exclude_setinputsizes参数进行配置。
- en: 'References: [#2561](https://www.sqlalchemy.org/trac/ticket/2561)'
  id: totrans-1714
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2561](https://www.sqlalchemy.org/trac/ticket/2561)
- en: 0.7.9
  id: totrans-1715
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.7.9
- en: 'Released: Mon Oct 01 2012'
  id: totrans-1716
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2012年10月01日
- en: orm
  id: totrans-1717
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1718
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug mostly local to new AbstractConcreteBase helper where the “type” attribute
    from the superclass would not be overridden on the subclass to produce the “reserved
    for base” error message, instead placing a do-nothing attribute there. This was
    inconsistent vs. using ConcreteBase as well as all the behavior of classical concrete
    mappings, where the “type” column from the polymorphic base would be explicitly
    disabled on subclasses, unless overridden explicitly.
  id: totrans-1719
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了主要局限于新的AbstractConcreteBase辅助程序的bug，其中从超类继承的“type”属性不会在子类上被覆盖以生成“reserved
    for base”错误消息，而是在那里放置一个无效的属性。这与使用ConcreteBase以及所有经典具体映射的行为不一致，其中多态基类的“type”列在子类上会被显式禁用，除非显式覆盖。
- en: '**[orm] [bug]**'
  id: totrans-1720
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: A warning is emitted when lazy=’dynamic’ is combined with uselist=False. This
    is an exception raise in 0.8.
  id: totrans-1721
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当lazy='dynamic'与uselist=False组合时会发出警告。这在0.8中会引发异常。
- en: '**[orm] [bug]**'
  id: totrans-1722
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug whereby user error in related-object assignment could cause recursion
    overflow if the assignment triggered a backref of the same name as a bi-directional
    attribute on the incorrect class to the same target. An informative error is raised
    now.
  id: totrans-1723
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了用户在相关对象赋值中的错误可能导致递归溢出的bug，如果赋值触发了与同一目标上的双向属性同名的backref，则会引发信息性错误。
- en: '**[orm] [bug]**'
  id: totrans-1724
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where incorrect type information would be passed when the ORM would
    bind the “version” column, when using the “version” feature. Tests courtesy Daniel
    Miller.
  id: totrans-1725
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当ORM绑定“version”列时传递错误类型信息的bug，当使用“version”功能时。测试由Daniel Miller提供。
- en: 'References: [#2539](https://www.sqlalchemy.org/trac/ticket/2539)'
  id: totrans-1726
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2539](https://www.sqlalchemy.org/trac/ticket/2539)
- en: '**[orm] [bug]**'
  id: totrans-1727
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Extra logic has been added to the “flush” that occurs within Session.commit(),
    such that the extra state added by an after_flush() or after_flush_postexec()
    hook is also flushed in a subsequent flush, before the “commit” completes. Subsequent
    calls to flush() will continue until the after_flush hooks stop adding new state.
    An “overflow” counter of 100 is also in place, in the event of a broken after_flush()
    hook adding new content each time.
  id: totrans-1728
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在Session.commit()中发生的“flush”中添加了额外的逻辑，以便在随后的flush中也刷新由after_flush()或after_flush_postexec()钩子添加的额外状态，然后“commit”完成。后续对flush()的调用将继续，直到after_flush钩子停止添加新状态。在事件发生时，还有一个“overflow”计数器为100，以防一个破损的after_flush()钩子每次都添加新内容。
- en: 'References: [#2566](https://www.sqlalchemy.org/trac/ticket/2566)'
  id: totrans-1729
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2566](https://www.sqlalchemy.org/trac/ticket/2566)
- en: engine
  id: totrans-1730
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [feature]**'
  id: totrans-1731
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: Dramatic improvement in memory usage of the event system; instance-level collections
    are no longer created for a particular type of event until instance-level listeners
    are established for that event.
  id: totrans-1732
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 事件系统的内存使用显著改善；在为特定类型的事件建立实例级监听器之前，不再为该事件创建实例级集合。
- en: 'References: [#2516](https://www.sqlalchemy.org/trac/ticket/2516)'
  id: totrans-1733
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2516](https://www.sqlalchemy.org/trac/ticket/2516)
- en: '**[engine] [bug]**'
  id: totrans-1734
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed bug whereby a disconnect detect + dispose that occurs when the QueuePool
    has threads waiting for connections would leave those threads waiting for the
    duration of the timeout on the old pool (or indefinitely if timeout was disabled).
    The fix now notifies those waiters with a special exception case and has them
    move onto the new pool.
  id: totrans-1735
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即当 QueuePool 中有线程等待连接时，发生断开检测 + 丢弃会使这些线程在旧池的超时期间保持等待状态（如果禁用了超时，则会无限期等待）。修复现在使用一个特殊的异常情况通知这些等待线程，并使它们转移到新池中。
- en: 'References: [#2522](https://www.sqlalchemy.org/trac/ticket/2522)'
  id: totrans-1736
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2522](https://www.sqlalchemy.org/trac/ticket/2522)
- en: '**[engine] [bug]**'
  id: totrans-1737
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Added gaerdbms import to mysql/__init__.py, the absence of which was preventing
    the new GAE dialect from being loaded.
  id: totrans-1738
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 mysql/__init__.py 中添加了 gaerdbms 导入，缺少此导入会导致无法加载新的 GAE 方言。
- en: 'References: [#2529](https://www.sqlalchemy.org/trac/ticket/2529)'
  id: totrans-1739
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2529](https://www.sqlalchemy.org/trac/ticket/2529)
- en: '**[engine] [bug]**'
  id: totrans-1740
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed cextension bug whereby the “ambiguous column error” would fail to function
    properly if the given index were a Column object and not a string. Note there
    are still some column-targeting issues here which are fixed in 0.8.
  id: totrans-1741
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 cextension bug，即如果给定的索引是一个 Column 对象而不是字符串，则“模糊列错误”将无法正常工作。请注意，这里仍然存在一些列定位问题，在
    0.8 中已经修复。
- en: 'References: [#2553](https://www.sqlalchemy.org/trac/ticket/2553)'
  id: totrans-1742
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2553](https://www.sqlalchemy.org/trac/ticket/2553)
- en: '**[engine] [bug]**'
  id: totrans-1743
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed the repr() of Enum to include the “name” and “native_enum” flags. Helps
    Alembic autogenerate.
  id: totrans-1744
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 Enum 的 repr()，以包括 “name” 和 “native_enum” 标志。有助于 Alembic 自动生成。
- en: sql
  id: totrans-1745
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1746
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed the DropIndex construct to support an Index associated with a Table in
    a remote schema.
  id: totrans-1747
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 DropIndex 构造，以支持与远程模式中的表相关联的索引。
- en: 'References: [#2571](https://www.sqlalchemy.org/trac/ticket/2571)'
  id: totrans-1748
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2571](https://www.sqlalchemy.org/trac/ticket/2571)
- en: '**[sql] [bug]**'
  id: totrans-1749
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in over() construct whereby passing an empty list for either partition_by
    or order_by, as opposed to None, would fail to generate correctly. Courtesy Gunnlaugur
    Þór Briem.
  id: totrans-1750
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 over() 构造中的 bug，即当将空列表传递给 partition_by 或 order_by 中的任意一个时，而不是 None，会导致生成失败。由
    Gunnlaugur Þór Briem 提供。
- en: 'References: [#2574](https://www.sqlalchemy.org/trac/ticket/2574)'
  id: totrans-1751
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2574](https://www.sqlalchemy.org/trac/ticket/2574)
- en: '**[sql] [bug]**'
  id: totrans-1752
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed CTE bug whereby positional bound parameters present in the CTEs themselves
    would corrupt the overall ordering of bound parameters. This primarily affected
    SQL Server as the platform with positional binds + CTE support.
  id: totrans-1753
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 CTE bug，即 CTE 中存在的位置绑定参数会破坏绑定参数的整体顺序。这主要影响支持位置绑定 + CTE 的 SQL Server 平台。
- en: 'References: [#2521](https://www.sqlalchemy.org/trac/ticket/2521)'
  id: totrans-1754
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2521](https://www.sqlalchemy.org/trac/ticket/2521)
- en: '**[sql] [bug]**'
  id: totrans-1755
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed more un-intuitivenesses in CTEs which prevented referring to a CTE in
    a union of itself without it being aliased. CTEs now render uniquely on name,
    rendering the outermost CTE of a given name only - all other references are rendered
    just as the name. This even includes other CTE/SELECTs that refer to different
    versions of the same CTE object, such as a SELECT or a UNION ALL of that SELECT.
    We are somewhat loosening the usual link between object identity and lexical identity
    in this case. A true name conflict between two unrelated CTEs now raises an error.
  id: totrans-1756
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 CTE 中修复了更多的不直观问题，这些问题阻止了在没有别名的情况下引用 CTE 中的自身联合。现在，CTE 根据名称唯一地呈现，仅呈现给定名称的最外层
    CTE - 所有其他引用都只是名称。这甚至包括引用不同版本的同一 CTE 对象的其他 CTE/SELECT，比如对该 SELECT 或该 SELECT 的
    UNION ALL 的其他 CTE/SELECT 的引用。在这种情况下，我们在对象标识和词法标识之间有些放松了通常的链接。两个不相关的 CTE 之间的真正名称冲突现在会引发错误。
- en: '**[sql] [bug]**'
  id: totrans-1757
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: quoting is applied to the column names inside the WITH RECURSIVE clause of a
    common table expression according to the quoting rules for the originating Column.
  id: totrans-1758
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 common table expression 的 WITH RECURSIVE 子句中，对列名应用 quoting 规则，根据原始 Column
    的 quoting 规则。
- en: 'References: [#2512](https://www.sqlalchemy.org/trac/ticket/2512)'
  id: totrans-1759
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2512](https://www.sqlalchemy.org/trac/ticket/2512)
- en: '**[sql] [bug]**'
  id: totrans-1760
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed regression introduced in 0.7.6 whereby the FROM list of a SELECT statement
    could be incorrect in certain “clone+replace” scenarios.
  id: totrans-1761
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了0.7.6中引入的回归，即在某些“clone+replace”场景中，SELECT语句的FROM列表可能不正确。
- en: 'References: [#2518](https://www.sqlalchemy.org/trac/ticket/2518)'
  id: totrans-1762
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2518](https://www.sqlalchemy.org/trac/ticket/2518)
- en: '**[sql] [bug]**'
  id: totrans-1763
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug whereby usage of a UNION or similar inside of an embedded subquery
    would interfere with result-column targeting, in the case that a result-column
    had the same ultimate name as a name inside the embedded UNION.
  id: totrans-1764
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即在嵌套子查询中使用UNION或类似操作会干扰结果列的定位，如果结果列与嵌套UNION中的某个名称相同，则会出现问题。
- en: 'References: [#2552](https://www.sqlalchemy.org/trac/ticket/2552)'
  id: totrans-1765
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2552](https://www.sqlalchemy.org/trac/ticket/2552)
- en: '**[sql] [bug]**'
  id: totrans-1766
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed a regression since 0.6 regarding result-row targeting. It should be possible
    to use a select() statement with string based columns in it, that is select([‘id’,
    ‘name’]).select_from(‘mytable’), and have this statement be targetable by Column
    objects with those names; this is the mechanism by which query(MyClass).from_statement(some_statement)
    works. At some point the specific case of using select([‘id’]), which is equivalent
    to select([literal_column(‘id’)]), stopped working here, so this has been re-instated
    and of course tested.
  id: totrans-1767
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了自0.6以来的一个回归，涉及结果行定位。应该可以在其中使用基于字符串的列的select()语句，即select(['id', 'name']).select_from('mytable')，并且可以通过具有这些名称的Column对象定位此语句；这是query(MyClass).from_statement(some_statement)工作的机制。在某个时刻，使用select(['id'])的特定情况停止工作，这等同于select([literal_column('id')])，因此已重新实施并当然进行了测试。
- en: 'References: [#2558](https://www.sqlalchemy.org/trac/ticket/2558)'
  id: totrans-1768
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2558](https://www.sqlalchemy.org/trac/ticket/2558)
- en: '**[sql] [bug]**'
  id: totrans-1769
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Added missing operators is_(), isnot() to the ColumnOperators base, so that
    these long-available operators are present as methods like all the other operators.
  id: totrans-1770
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在ColumnOperators基类中添加了缺失的is_()和isnot()操作符，使得这些长期可用的操作符以方法的形式存在，就像其他操作符一样。
- en: 'References: [#2544](https://www.sqlalchemy.org/trac/ticket/2544)'
  id: totrans-1771
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2544](https://www.sqlalchemy.org/trac/ticket/2544)
- en: postgresql
  id: totrans-1772
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-1773
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Columns in reflected primary key constraint are now returned in the order in
    which the constraint itself defines them, rather than how the table orders them.
    Courtesy Gunnlaugur Þór Briem..
  id: totrans-1774
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 反射主键约束中的列现在按照约束本身定义它们的顺序返回，而不是表的顺序。感谢Gunnlaugur Þór Briem。
- en: 'References: [#2531](https://www.sqlalchemy.org/trac/ticket/2531)'
  id: totrans-1775
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2531](https://www.sqlalchemy.org/trac/ticket/2531)
- en: '**[postgresql] [bug]**'
  id: totrans-1776
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added ‘terminating connection’ to the list of messages we use to detect a disconnect
    with PG, which appears to be present in some versions when the server is restarted.
  id: totrans-1777
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将“terminating connection”��加到我们用于检测与PG断开连接的消息列表中，这在某些版本中似乎在服务器重新启动时出现。
- en: 'References: [#2570](https://www.sqlalchemy.org/trac/ticket/2570)'
  id: totrans-1778
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2570](https://www.sqlalchemy.org/trac/ticket/2570)
- en: mysql
  id: totrans-1779
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-1780
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Updated mysqlconnector interface to use updated “client flag” and “charset”
    APIs, courtesy David McNelis.
  id: totrans-1781
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新了mysqlconnector接口，使用了更新的“client flag”和“charset”API，感谢David McNelis。
- en: sqlite
  id: totrans-1782
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [feature]**'
  id: totrans-1783
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [feature]**'
- en: Added support for the localtimestamp() SQL function implemented in SQLite, courtesy
    Richard Mitchell.
  id: totrans-1784
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对SQLite中localtimestamp() SQL函数的支持，感谢Richard Mitchell。
- en: '**[sqlite] [bug]**'
  id: totrans-1785
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Adjusted a very old bugfix which attempted to work around a SQLite issue that
    itself was “fixed” as of sqlite 3.6.14, regarding quotes surrounding a table name
    when using the “foreign_key_list” pragma. The fix has been adjusted to not interfere
    with quotes that are *actually in the name* of a column or table, to as much a
    degree as possible; sqlite still doesn’t return the correct result for foreign_key_list()
    if the target table actually has quotes surrounding its name, as *part* of its
    name (i.e. “””mytable”””).
  id: totrans-1786
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了一个非常古老的bug修复，尝试解决一个SQLite问题，该问题在sqlite 3.6.14中已经“修复”，涉及在使用“foreign_key_list”
    pragma时表名周围的引号。修复已调整为不干扰实际在列或表名中的引号，尽可能地减少干扰；如果目标表的名称实际上在其名称中有引号（即“”“mytable”””），sqlite仍然不会正确返回foreign_key_list()的结果。
- en: 'References: [#2568](https://www.sqlalchemy.org/trac/ticket/2568)'
  id: totrans-1787
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2568](https://www.sqlalchemy.org/trac/ticket/2568)
- en: '**[sqlite] [bug]**'
  id: totrans-1788
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Adjusted column default reflection code to convert non-string values to string,
    to accommodate old SQLite versions that don’t deliver default info as a string.
  id: totrans-1789
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了列默认反射代码，将非字符串值转换为字符串，以适应旧的SQLite版本，这些版本不将默认信息作为字符串传递。
- en: 'References: [#2265](https://www.sqlalchemy.org/trac/ticket/2265)'
  id: totrans-1790
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2265](https://www.sqlalchemy.org/trac/ticket/2265)
- en: mssql
  id: totrans-1791
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-1792
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed compiler bug whereby using a correlated subquery within an ORDER BY would
    fail to render correctly if the statement also used LIMIT/OFFSET, due to mis-rendering
    within the ROW_NUMBER() OVER clause. Fix courtesy sayap
  id: totrans-1793
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了编译器错误，即在ORDER BY中使用相关子查询，如果语句还使用了LIMIT/OFFSET，由于ROW_NUMBER() OVER子句中的错误渲染，将无法正确呈现。修复由sayap提供。
- en: 'References: [#2538](https://www.sqlalchemy.org/trac/ticket/2538)'
  id: totrans-1794
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2538](https://www.sqlalchemy.org/trac/ticket/2538)
- en: '**[mssql] [bug]**'
  id: totrans-1795
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed compiler bug whereby a given select() would be modified if it had an “offset”
    attribute, causing the construct to not compile correctly a second time.
  id: totrans-1796
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了编译器错误，即如果给定的select()具有“offset”属性，则在第二次编译时，构造将无法正确编译。
- en: 'References: [#2545](https://www.sqlalchemy.org/trac/ticket/2545)'
  id: totrans-1797
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2545](https://www.sqlalchemy.org/trac/ticket/2545)
- en: '**[mssql] [bug]**'
  id: totrans-1798
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed bug where reflection of primary key constraint would double up columns
    if the same constraint/table existed in multiple schemas.
  id: totrans-1799
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即如果同一约束/表存在于多个模式中，则主键约束的反射会使列重复。
- en: orm
  id: totrans-1800
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1801
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug mostly local to new AbstractConcreteBase helper where the “type” attribute
    from the superclass would not be overridden on the subclass to produce the “reserved
    for base” error message, instead placing a do-nothing attribute there. This was
    inconsistent vs. using ConcreteBase as well as all the behavior of classical concrete
    mappings, where the “type” column from the polymorphic base would be explicitly
    disabled on subclasses, unless overridden explicitly.
  id: totrans-1802
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了主要局限于新的AbstractConcreteBase助手的错误，其中从超类继承的“type”属性不会在子类上被覆盖，以产生“保留给基类”的错误消息，而是在那里放置一个无效属性。这与使用ConcreteBase以及所有经典具体映射的行为不一致，其中多态基类的“type”列在子类上会被显式禁用，除非显式覆盖。
- en: '**[orm] [bug]**'
  id: totrans-1803
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: A warning is emitted when lazy=’dynamic’ is combined with uselist=False. This
    is an exception raise in 0.8.
  id: totrans-1804
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当lazy='dynamic'与uselist=False结合时，会发出警告。这在0.8中是一个异常。
- en: '**[orm] [bug]**'
  id: totrans-1805
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug whereby user error in related-object assignment could cause recursion
    overflow if the assignment triggered a backref of the same name as a bi-directional
    attribute on the incorrect class to the same target. An informative error is raised
    now.
  id: totrans-1806
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即在相关对象赋值中的用户错误可能会导致递归溢出，如果赋值触发了与不正确类上的同名双向属性相同名称的backref，则会引发一个信息性错误。
- en: '**[orm] [bug]**'
  id: totrans-1807
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where incorrect type information would be passed when the ORM would
    bind the “version” column, when using the “version” feature. Tests courtesy Daniel
    Miller.
  id: totrans-1808
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即当ORM绑定“version”列时，如果使用“version”功能，则会传递不正确的类型信息。测试由Daniel Miller提供。
- en: 'References: [#2539](https://www.sqlalchemy.org/trac/ticket/2539)'
  id: totrans-1809
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2539](https://www.sqlalchemy.org/trac/ticket/2539)
- en: '**[orm] [bug]**'
  id: totrans-1810
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Extra logic has been added to the “flush” that occurs within Session.commit(),
    such that the extra state added by an after_flush() or after_flush_postexec()
    hook is also flushed in a subsequent flush, before the “commit” completes. Subsequent
    calls to flush() will continue until the after_flush hooks stop adding new state.
    An “overflow” counter of 100 is also in place, in the event of a broken after_flush()
    hook adding new content each time.
  id: totrans-1811
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在Session.commit()中添加了额外的逻辑，使得在后续的flush中也会刷新由after_flush()或after_flush_postexec()钩子添加的额外状态，直到“commit”完成。后续对flush()的调用将继续，直到after_flush钩子停止添加新状态。在“overflow”计数器达到100时，如果由于破损的after_flush()钩子每次都添加新内容，则会触发。
- en: 'References: [#2566](https://www.sqlalchemy.org/trac/ticket/2566)'
  id: totrans-1812
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2566](https://www.sqlalchemy.org/trac/ticket/2566)
- en: engine
  id: totrans-1813
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [feature]**'
  id: totrans-1814
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: Dramatic improvement in memory usage of the event system; instance-level collections
    are no longer created for a particular type of event until instance-level listeners
    are established for that event.
  id: totrans-1815
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 事件系统的内存使用显著改善；直到为该事件建立了实例级别的监听器，才会为特定类型的事件创建实例级别的集合。
- en: 'References: [#2516](https://www.sqlalchemy.org/trac/ticket/2516)'
  id: totrans-1816
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2516](https://www.sqlalchemy.org/trac/ticket/2516)
- en: '**[engine] [bug]**'
  id: totrans-1817
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed bug whereby a disconnect detect + dispose that occurs when the QueuePool
    has threads waiting for connections would leave those threads waiting for the
    duration of the timeout on the old pool (or indefinitely if timeout was disabled).
    The fix now notifies those waiters with a special exception case and has them
    move onto the new pool.
  id: totrans-1818
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即当 QueuePool 中有线程等待连接时，断开检测 + 释放会使这些线程等待旧池的超时时间（或者如果禁用超时，则无限期等待）。现在修复通知这些等待者有一个特殊的异常情况，并让它们转移到新池。
- en: 'References: [#2522](https://www.sqlalchemy.org/trac/ticket/2522)'
  id: totrans-1819
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2522](https://www.sqlalchemy.org/trac/ticket/2522)
- en: '**[engine] [bug]**'
  id: totrans-1820
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Added gaerdbms import to mysql/__init__.py, the absence of which was preventing
    the new GAE dialect from being loaded.
  id: totrans-1821
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 mysql/__init__.py 中添加了 gaerdbms 导入，缺少此导入会导致无法加载新的 GAE 方言。
- en: 'References: [#2529](https://www.sqlalchemy.org/trac/ticket/2529)'
  id: totrans-1822
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2529](https://www.sqlalchemy.org/trac/ticket/2529)
- en: '**[engine] [bug]**'
  id: totrans-1823
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed cextension bug whereby the “ambiguous column error” would fail to function
    properly if the given index were a Column object and not a string. Note there
    are still some column-targeting issues here which are fixed in 0.8.
  id: totrans-1824
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 cextension 的 bug，当给定的索引是一个 Column 对象而不是一个字符串时，“模糊列错误”无法正常工作。请注意，这里仍然存在一些列定位问题，在
    0.8 版本中已修复。
- en: 'References: [#2553](https://www.sqlalchemy.org/trac/ticket/2553)'
  id: totrans-1825
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2553](https://www.sqlalchemy.org/trac/ticket/2553)
- en: '**[engine] [bug]**'
  id: totrans-1826
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed the repr() of Enum to include the “name” and “native_enum” flags. Helps
    Alembic autogenerate.
  id: totrans-1827
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 Enum 的 repr() 方法，包括“name”和“native_enum”标志。有助于 Alembic 的自动生成。
- en: sql
  id: totrans-1828
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1829
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed the DropIndex construct to support an Index associated with a Table in
    a remote schema.
  id: totrans-1830
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 DropIndex 构造以支持与远程模式中的表关联的索引。
- en: 'References: [#2571](https://www.sqlalchemy.org/trac/ticket/2571)'
  id: totrans-1831
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2571](https://www.sqlalchemy.org/trac/ticket/2571)
- en: '**[sql] [bug]**'
  id: totrans-1832
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in over() construct whereby passing an empty list for either partition_by
    or order_by, as opposed to None, would fail to generate correctly. Courtesy Gunnlaugur
    Þór Briem.
  id: totrans-1833
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 over() 构造中的 bug，即将空列表传递给 partition_by 或 order_by，而不是 None，将无法正确生成。感谢 Gunnlaugur
    Þór Briem。
- en: 'References: [#2574](https://www.sqlalchemy.org/trac/ticket/2574)'
  id: totrans-1834
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2574](https://www.sqlalchemy.org/trac/ticket/2574)
- en: '**[sql] [bug]**'
  id: totrans-1835
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed CTE bug whereby positional bound parameters present in the CTEs themselves
    would corrupt the overall ordering of bound parameters. This primarily affected
    SQL Server as the platform with positional binds + CTE support.
  id: totrans-1836
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 CTE 的 bug，即 CTE 本身中存在的位置绑定参数会破坏绑定参数的整体排序。这主要影响支持位置绑定 + CTE 支持的 SQL Server
    平台。
- en: 'References: [#2521](https://www.sqlalchemy.org/trac/ticket/2521)'
  id: totrans-1837
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2521](https://www.sqlalchemy.org/trac/ticket/2521)
- en: '**[sql] [bug]**'
  id: totrans-1838
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed more un-intuitivenesses in CTEs which prevented referring to a CTE in
    a union of itself without it being aliased. CTEs now render uniquely on name,
    rendering the outermost CTE of a given name only - all other references are rendered
    just as the name. This even includes other CTE/SELECTs that refer to different
    versions of the same CTE object, such as a SELECT or a UNION ALL of that SELECT.
    We are somewhat loosening the usual link between object identity and lexical identity
    in this case. A true name conflict between two unrelated CTEs now raises an error.
  id: totrans-1839
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 CTE 中的更多不直观之处，这些不直观之处阻止了在不使用别名的情况下引用 CTE 自身的联合。CTE 现在根据名称唯一呈现，仅呈现给定名称的最外层
    CTE - 所有其他引用只是作为名称呈现。这甚至包括引用同一 CTE 对象的其他 CTE/SELECT，例如引用该 SELECT 的 SELECT 或 UNION
    ALL。在这种情况下，我们在对象标识和词法标识之间有些放松通常的链接。两个不相关的 CTE 之间的真实名称冲突现在会引发错误。
- en: '**[sql] [bug]**'
  id: totrans-1840
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: quoting is applied to the column names inside the WITH RECURSIVE clause of a
    common table expression according to the quoting rules for the originating Column.
  id: totrans-1841
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在通用表达式 WITH RECURSIVE 子句中，对列名应用引用规则，根据原始列的引用规则。
- en: 'References: [#2512](https://www.sqlalchemy.org/trac/ticket/2512)'
  id: totrans-1842
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2512](https://www.sqlalchemy.org/trac/ticket/2512)
- en: '**[sql] [bug]**'
  id: totrans-1843
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed regression introduced in 0.7.6 whereby the FROM list of a SELECT statement
    could be incorrect in certain “clone+replace” scenarios.
  id: totrans-1844
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 0.7.6 版本中引入的回归，导致在某些“克隆+替换”场景中 SELECT 语句的 FROM 列表可能不正确。
- en: 'References: [#2518](https://www.sqlalchemy.org/trac/ticket/2518)'
  id: totrans-1845
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2518](https://www.sqlalchemy.org/trac/ticket/2518)
- en: '**[sql] [bug]**'
  id: totrans-1846
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug whereby usage of a UNION or similar inside of an embedded subquery
    would interfere with result-column targeting, in the case that a result-column
    had the same ultimate name as a name inside the embedded UNION.
  id: totrans-1847
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即在嵌套子查询中使用 UNION 或类似操作会干扰结果��定位，如果结果列与嵌套 UNION 中的名称相同，则会出现问题。
- en: 'References: [#2552](https://www.sqlalchemy.org/trac/ticket/2552)'
  id: totrans-1848
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2552](https://www.sqlalchemy.org/trac/ticket/2552)
- en: '**[sql] [bug]**'
  id: totrans-1849
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed a regression since 0.6 regarding result-row targeting. It should be possible
    to use a select() statement with string based columns in it, that is select([‘id’,
    ‘name’]).select_from(‘mytable’), and have this statement be targetable by Column
    objects with those names; this is the mechanism by which query(MyClass).from_statement(some_statement)
    works. At some point the specific case of using select([‘id’]), which is equivalent
    to select([literal_column(‘id’)]), stopped working here, so this has been re-instated
    and of course tested.
  id: totrans-1850
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了自 0.6 以来的一个回归问题，涉及结果行定位。应该可以使用一个带有字符串列的 select() 语句，即 select(['id', 'name']).select_from('mytable')，并且使这个语句可以被具有这些名称的
    Column 对象定位；这是 query(MyClass).from_statement(some_statement) 的机制。在某个时候，使用 select(['id'])
    的特定情况停止工作，这等同于 select([literal_column('id')])，因此已经重新安装并当然测试。
- en: 'References: [#2558](https://www.sqlalchemy.org/trac/ticket/2558)'
  id: totrans-1851
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2558](https://www.sqlalchemy.org/trac/ticket/2558)
- en: '**[sql] [bug]**'
  id: totrans-1852
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Added missing operators is_(), isnot() to the ColumnOperators base, so that
    these long-available operators are present as methods like all the other operators.
  id: totrans-1853
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了缺失的操作符 is_()，isnot() 到 ColumnOperators 基类，以便这些长期可用的操作符作为其他操作符一样作为方法存在。
- en: 'References: [#2544](https://www.sqlalchemy.org/trac/ticket/2544)'
  id: totrans-1854
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2544](https://www.sqlalchemy.org/trac/ticket/2544)
- en: postgresql
  id: totrans-1855
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-1856
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Columns in reflected primary key constraint are now returned in the order in
    which the constraint itself defines them, rather than how the table orders them.
    Courtesy Gunnlaugur Þór Briem..
  id: totrans-1857
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 反射主键约束中的列现在按照约束本身定义的顺序返回，而不是表如何排序它们的顺序。感谢 Gunnlaugur Þór Briem。
- en: 'References: [#2531](https://www.sqlalchemy.org/trac/ticket/2531)'
  id: totrans-1858
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2531](https://www.sqlalchemy.org/trac/ticket/2531)
- en: '**[postgresql] [bug]**'
  id: totrans-1859
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added ‘terminating connection’ to the list of messages we use to detect a disconnect
    with PG, which appears to be present in some versions when the server is restarted.
  id: totrans-1860
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将“terminating connection”添加到我们用于检测与 PG 断开连接的消息列表中，当服务器重新启动时，某些版本中似乎存在这种情况。
- en: 'References: [#2570](https://www.sqlalchemy.org/trac/ticket/2570)'
  id: totrans-1861
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2570](https://www.sqlalchemy.org/trac/ticket/2570)
- en: mysql
  id: totrans-1862
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-1863
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Updated mysqlconnector interface to use updated “client flag” and “charset”
    APIs, courtesy David McNelis.
  id: totrans-1864
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新了 mysqlconnector 接口，以使用更新的“client flag”和“charset” API，感谢 David McNelis。
- en: sqlite
  id: totrans-1865
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [feature]**'
  id: totrans-1866
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [feature]**'
- en: Added support for the localtimestamp() SQL function implemented in SQLite, courtesy
    Richard Mitchell.
  id: totrans-1867
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对 SQLite 中实现的 localtimestamp() SQL 函数的支持，感谢 Richard Mitchell。
- en: '**[sqlite] [bug]**'
  id: totrans-1868
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Adjusted a very old bugfix which attempted to work around a SQLite issue that
    itself was “fixed” as of sqlite 3.6.14, regarding quotes surrounding a table name
    when using the “foreign_key_list” pragma. The fix has been adjusted to not interfere
    with quotes that are *actually in the name* of a column or table, to as much a
    degree as possible; sqlite still doesn’t return the correct result for foreign_key_list()
    if the target table actually has quotes surrounding its name, as *part* of its
    name (i.e. “””mytable”””).
  id: totrans-1869
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了一个非常古老的错误修复，尝试解决一个 SQLite 问题，该问题本身在 sqlite 3.6.14 中已经“修复”，涉及在使用“foreign_key_list”
    pragma 时围绕表名的引号。修复已经调整为不干扰实际上在列或表名中的引号，尽可能地；如果目标表实际上在其名称周围有引号，作为其名称的一部分（即“”“mytable”””），sqlite
    仍然不会返回 foreign_key_list() 的正确结果。
- en: 'References: [#2568](https://www.sqlalchemy.org/trac/ticket/2568)'
  id: totrans-1870
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2568](https://www.sqlalchemy.org/trac/ticket/2568)
- en: '**[sqlite] [bug]**'
  id: totrans-1871
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Adjusted column default reflection code to convert non-string values to string,
    to accommodate old SQLite versions that don’t deliver default info as a string.
  id: totrans-1872
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了列默认反射代码，将非字符串值转换为字符串，以适应旧的 SQLite 版本，这些版本不将默认信息作为字符串传递。
- en: 'References: [#2265](https://www.sqlalchemy.org/trac/ticket/2265)'
  id: totrans-1873
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2265](https://www.sqlalchemy.org/trac/ticket/2265)
- en: mssql
  id: totrans-1874
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-1875
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed compiler bug whereby using a correlated subquery within an ORDER BY would
    fail to render correctly if the statement also used LIMIT/OFFSET, due to mis-rendering
    within the ROW_NUMBER() OVER clause. Fix courtesy sayap
  id: totrans-1876
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了编译器错误，其中在ORDER BY中使用相关子查询，如果语句还使用LIMIT/OFFSET，由于在ROW_NUMBER() OVER子句中的错误渲染而无法正确呈现。修复来自sayap。
- en: 'References: [#2538](https://www.sqlalchemy.org/trac/ticket/2538)'
  id: totrans-1877
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2538](https://www.sqlalchemy.org/trac/ticket/2538)
- en: '**[mssql] [bug]**'
  id: totrans-1878
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed compiler bug whereby a given select() would be modified if it had an “offset”
    attribute, causing the construct to not compile correctly a second time.
  id: totrans-1879
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了编译器错误，即如果给定的select()具有“offset”属性，则会修改该构造，导致第二次编译时构造不正确。
- en: 'References: [#2545](https://www.sqlalchemy.org/trac/ticket/2545)'
  id: totrans-1880
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2545](https://www.sqlalchemy.org/trac/ticket/2545)
- en: '**[mssql] [bug]**'
  id: totrans-1881
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed bug where reflection of primary key constraint would double up columns
    if the same constraint/table existed in multiple schemas.
  id: totrans-1882
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了主键约束的反射错误，如果相同的约束/表存在于多个模式中，则会使列重复。
- en: 0.7.8
  id: totrans-1883
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.7.8
- en: 'Released: Sat Jun 16 2012'
  id: totrans-1884
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2012年6月16日星期六
- en: orm
  id: totrans-1885
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-1886
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: The ‘objects’ argument to flush() is no longer deprecated, as some valid use
    cases have been identified.
  id: totrans-1887
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: flush()的“objects”参数不再被弃用，因为已经确定了一些有效的用例。
- en: '**[orm] [bug]**'
  id: totrans-1888
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug whereby subqueryload() from a polymorphic mapping to a target would
    incur a new invocation of the query for each distinct class encountered in the
    polymorphic result.
  id: totrans-1889
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即从多态映射到目标的subqueryload()将为多态结果中遇到的每个不同类别调用一个新的查询。
- en: 'References: [#2480](https://www.sqlalchemy.org/trac/ticket/2480)'
  id: totrans-1890
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参��：[#2480](https://www.sqlalchemy.org/trac/ticket/2480)
- en: '**[orm] [bug]**'
  id: totrans-1891
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in declarative whereby the precedence of columns in a joined-table,
    composite column (typically for id) would fail to be correct if the columns contained
    names distinct from their attribute names. This would cause things like primaryjoin
    conditions made against the entity attributes to be incorrect. Related to as this
    was supposed to be part of that, this is.
  id: totrans-1892
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了声明中的错误，其中连接表中的列的优先级（通常用于id）如果列包含与其属性名称不同的名称，则会失败。这将导致针对实体属性进行的primaryjoin条件不正确。相关于这应该是那个的一部分，这是。
- en: 'References: [#1892](https://www.sqlalchemy.org/trac/ticket/1892), [#2491](https://www.sqlalchemy.org/trac/ticket/2491)'
  id: totrans-1893
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1892](https://www.sqlalchemy.org/trac/ticket/1892)，[#2491](https://www.sqlalchemy.org/trac/ticket/2491)
- en: '**[orm] [bug]**'
  id: totrans-1894
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed identity_key() function which was not accepting a scalar argument for
    the identity. .
  id: totrans-1895
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了identity_key()函数不接受标量参数作为标识的问题。
- en: 'References: [#2508](https://www.sqlalchemy.org/trac/ticket/2508)'
  id: totrans-1896
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2508](https://www.sqlalchemy.org/trac/ticket/2508)
- en: '**[orm] [bug]**'
  id: totrans-1897
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug whereby populate_existing option would not propagate to subquery eager
    loaders. .
  id: totrans-1898
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了populate_existing选项无法传播到子查询急加载器的错误。
- en: 'References: [#2497](https://www.sqlalchemy.org/trac/ticket/2497)'
  id: totrans-1899
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2497](https://www.sqlalchemy.org/trac/ticket/2497)
- en: engine
  id: totrans-1900
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-1901
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed memory leak in C version of result proxy whereby DBAPIs which don’t deliver
    pure Python tuples for result rows would fail to decrement refcounts correctly.
    The most prominently affected DBAPI is pyodbc.
  id: totrans-1902
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了C版本结果代理中的内存泄漏问题，其中对于结果行不提供纯Python元组的DBAPI将无法正确减少引用计数。受影响最严重的DBAPI是pyodbc。
- en: 'References: [#2489](https://www.sqlalchemy.org/trac/ticket/2489)'
  id: totrans-1903
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2489](https://www.sqlalchemy.org/trac/ticket/2489)
- en: '**[engine] [bug]**'
  id: totrans-1904
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed bug affecting Py3K whereby string positional parameters passed to engine/connection
    execute() would fail to be interpreted correctly, due to __iter__ being present
    on Py3K string..
  id: totrans-1905
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了影响Py3K的错误，即传递给engine/connection execute()的字符串位置参数将无法正确解释，因为Py3K字符串上存在__iter__。
- en: 'References: [#2503](https://www.sqlalchemy.org/trac/ticket/2503)'
  id: totrans-1906
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2503](https://www.sqlalchemy.org/trac/ticket/2503)
- en: sql
  id: totrans-1907
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1908
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: added BIGINT to types.__all__, BIGINT, BINARY, VARBINARY to sqlalchemy module
    namespace, plus test to ensure this breakage doesn’t occur again.
  id: totrans-1909
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将BIGINT添加到types.__all__，将BIGINT、BINARY、VARBINARY添加到sqlalchemy模块命名空间，以及确保不再发生此类破坏的测试。
- en: 'References: [#2499](https://www.sqlalchemy.org/trac/ticket/2499)'
  id: totrans-1910
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2499](https://www.sqlalchemy.org/trac/ticket/2499)
- en: '**[sql] [bug]**'
  id: totrans-1911
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Repaired common table expression rendering to function correctly when the SELECT
    statement contains UNION or other compound expressions, courtesy btbuilder.
  id: totrans-1912
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当SELECT语句包含UNION或其他复合表达式时，公共表达式的正确渲染，感谢btbuilder。
- en: 'References: [#2490](https://www.sqlalchemy.org/trac/ticket/2490)'
  id: totrans-1913
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2490](https://www.sqlalchemy.org/trac/ticket/2490)
- en: '**[sql] [bug]**'
  id: totrans-1914
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug whereby append_column() wouldn’t function correctly on a cloned select()
    construct, courtesy Gunnlaugur Þór Briem.
  id: totrans-1915
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在克隆的 select() 构造上 append_column() 无法正确运行的错误。由 Gunnlaugur Þór Briem 提供。
- en: 'References: [#2482](https://www.sqlalchemy.org/trac/ticket/2482)'
  id: totrans-1916
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2482](https://www.sqlalchemy.org/trac/ticket/2482)
- en: postgresql
  id: totrans-1917
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-1918
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: removed unnecessary table clause when reflecting enums,. Courtesy Gunnlaugur
    Þór Briem.
  id: totrans-1919
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了在反射枚举时不必要的表子句。由 Gunnlaugur Þór Briem 提供。
- en: 'References: [#2510](https://www.sqlalchemy.org/trac/ticket/2510)'
  id: totrans-1920
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2510](https://www.sqlalchemy.org/trac/ticket/2510)
- en: mysql
  id: totrans-1921
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [feature]**'
  id: totrans-1922
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [feature]**'
- en: Added a new dialect for Google App Engine. Courtesy Richie Foreman.
  id: totrans-1923
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个用于 Google App Engine 的新方言。由 Richie Foreman 提供。
- en: 'References: [#2484](https://www.sqlalchemy.org/trac/ticket/2484)'
  id: totrans-1924
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2484](https://www.sqlalchemy.org/trac/ticket/2484)
- en: oracle
  id: totrans-1925
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-1926
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Added ROWID to oracle.*.
  id: totrans-1927
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 oracle.* 添加了 ROWID。
- en: 'References: [#2483](https://www.sqlalchemy.org/trac/ticket/2483)'
  id: totrans-1928
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2483](https://www.sqlalchemy.org/trac/ticket/2483)
- en: orm
  id: totrans-1929
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-1930
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: The ‘objects’ argument to flush() is no longer deprecated, as some valid use
    cases have been identified.
  id: totrans-1931
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: flush() 的 'objects' 参数不再被弃用，因为已经确定了一些有效的用例。
- en: '**[orm] [bug]**'
  id: totrans-1932
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug whereby subqueryload() from a polymorphic mapping to a target would
    incur a new invocation of the query for each distinct class encountered in the
    polymorphic result.
  id: totrans-1933
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了从多态映射到目标的 subqueryload() 会为多态结果中遇到的每个不同类别重新调用查询的错误。
- en: 'References: [#2480](https://www.sqlalchemy.org/trac/ticket/2480)'
  id: totrans-1934
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2480](https://www.sqlalchemy.org/trac/ticket/2480)
- en: '**[orm] [bug]**'
  id: totrans-1935
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in declarative whereby the precedence of columns in a joined-table,
    composite column (typically for id) would fail to be correct if the columns contained
    names distinct from their attribute names. This would cause things like primaryjoin
    conditions made against the entity attributes to be incorrect. Related to as this
    was supposed to be part of that, this is.
  id: totrans-1936
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在声明中，对于连接表的复合列（通常用于 id）中列的优先级不正确的错误，如果列的名称与其属性名称不同，将导致像针对实体属性制定的 primaryjoin
    条件不正确。这与此相关，应该是其中的一部分，这是。
- en: 'References: [#1892](https://www.sqlalchemy.org/trac/ticket/1892), [#2491](https://www.sqlalchemy.org/trac/ticket/2491)'
  id: totrans-1937
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1892](https://www.sqlalchemy.org/trac/ticket/1892), [#2491](https://www.sqlalchemy.org/trac/ticket/2491)
- en: '**[orm] [bug]**'
  id: totrans-1938
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed identity_key() function which was not accepting a scalar argument for
    the identity. .
  id: totrans-1939
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 identity_key() 函数不接受标量参数作为标识的问题。
- en: 'References: [#2508](https://www.sqlalchemy.org/trac/ticket/2508)'
  id: totrans-1940
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2508](https://www.sqlalchemy.org/trac/ticket/2508)
- en: '**[orm] [bug]**'
  id: totrans-1941
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug whereby populate_existing option would not propagate to subquery eager
    loaders. .
  id: totrans-1942
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 populate_existing 选项无法传播到子查询急加载器的错误。
- en: 'References: [#2497](https://www.sqlalchemy.org/trac/ticket/2497)'
  id: totrans-1943
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2497](https://www.sqlalchemy.org/trac/ticket/2497)
- en: engine
  id: totrans-1944
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-1945
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed memory leak in C version of result proxy whereby DBAPIs which don’t deliver
    pure Python tuples for result rows would fail to decrement refcounts correctly.
    The most prominently affected DBAPI is pyodbc.
  id: totrans-1946
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 C 版本的结果代理中的内存泄漏问题，即不提供纯 Python 元组用于结果行的 DBAPI 无法正确减少引用计数的问题。受影响最严重的 DBAPI
    是 pyodbc。
- en: 'References: [#2489](https://www.sqlalchemy.org/trac/ticket/2489)'
  id: totrans-1947
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2489](https://www.sqlalchemy.org/trac/ticket/2489)
- en: '**[engine] [bug]**'
  id: totrans-1948
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed bug affecting Py3K whereby string positional parameters passed to engine/connection
    execute() would fail to be interpreted correctly, due to __iter__ being present
    on Py3K string..
  id: totrans-1949
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了影响 Py3K 的 bug，即传递给 engine/connection execute() 的字符串位置参数无法正确解释的问题，因为 Py3K
    字符串上存在 __iter__。
- en: 'References: [#2503](https://www.sqlalchemy.org/trac/ticket/2503)'
  id: totrans-1950
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2503](https://www.sqlalchemy.org/trac/ticket/2503)
- en: sql
  id: totrans-1951
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1952
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: added BIGINT to types.__all__, BIGINT, BINARY, VARBINARY to sqlalchemy module
    namespace, plus test to ensure this breakage doesn’t occur again.
  id: totrans-1953
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 types.__all__ 添加了 BIGINT，向 sqlalchemy 模块命名空间添加了 BIGINT、BINARY、VARBINARY，并添加了测试以确保不再发生此类破坏。
- en: 'References: [#2499](https://www.sqlalchemy.org/trac/ticket/2499)'
  id: totrans-1954
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2499](https://www.sqlalchemy.org/trac/ticket/2499)
- en: '**[sql] [bug]**'
  id: totrans-1955
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Repaired common table expression rendering to function correctly when the SELECT
    statement contains UNION or other compound expressions, courtesy btbuilder.
  id: totrans-1956
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当 SELECT 语句包含 UNION 或其他复合表达式时，公共表达式渲染无法正确运行的问题。由 btbuilder 提供。
- en: 'References: [#2490](https://www.sqlalchemy.org/trac/ticket/2490)'
  id: totrans-1957
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2490](https://www.sqlalchemy.org/trac/ticket/2490)
- en: '**[sql] [bug]**'
  id: totrans-1958
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug whereby append_column() wouldn’t function correctly on a cloned select()
    construct, courtesy Gunnlaugur Þór Briem.
  id: totrans-1959
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在克隆的 select() 构造上不会正确运行 append_column() 的错误，由 Gunnlaugur Þór Briem 提供。
- en: 'References: [#2482](https://www.sqlalchemy.org/trac/ticket/2482)'
  id: totrans-1960
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2482](https://www.sqlalchemy.org/trac/ticket/2482)
- en: postgresql
  id: totrans-1961
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-1962
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: removed unnecessary table clause when reflecting enums,. Courtesy Gunnlaugur
    Þór Briem.
  id: totrans-1963
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了在反射枚举时不必要的表子句，由 Gunnlaugur Þór Briem 提供。
- en: 'References: [#2510](https://www.sqlalchemy.org/trac/ticket/2510)'
  id: totrans-1964
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2510](https://www.sqlalchemy.org/trac/ticket/2510)
- en: mysql
  id: totrans-1965
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [feature]**'
  id: totrans-1966
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [feature]**'
- en: Added a new dialect for Google App Engine. Courtesy Richie Foreman.
  id: totrans-1967
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 Google App Engine 的新方言。由 Richie Foreman 提供。
- en: 'References: [#2484](https://www.sqlalchemy.org/trac/ticket/2484)'
  id: totrans-1968
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2484](https://www.sqlalchemy.org/trac/ticket/2484)
- en: oracle
  id: totrans-1969
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-1970
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Added ROWID to oracle.*.
  id: totrans-1971
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 ROWID 添加到 oracle.*。
- en: 'References: [#2483](https://www.sqlalchemy.org/trac/ticket/2483)'
  id: totrans-1972
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2483](https://www.sqlalchemy.org/trac/ticket/2483)
- en: 0.7.7
  id: totrans-1973
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.7.7
- en: 'Released: Sat May 05 2012'
  id: totrans-1974
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：Sat May 05 2012
- en: orm
  id: totrans-1975
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-1976
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added prefix_with() method to Query, calls upon select().prefix_with() to allow
    placement of MySQL SELECT directives in statements. Courtesy Diana Clarke
  id: totrans-1977
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 Query 添加了 prefix_with() 方法，调用 select().prefix_with() 以允许在语句中放置 MySQL SELECT
    指令。由 Diana Clarke 提供。
- en: 'References: [#2443](https://www.sqlalchemy.org/trac/ticket/2443)'
  id: totrans-1978
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2443](https://www.sqlalchemy.org/trac/ticket/2443)
- en: '**[orm] [feature]**'
  id: totrans-1979
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new flag to @validates include_removes. When True, collection remove and
    attribute del events will also be sent to the validation function, which accepts
    an additional argument “is_remove” when this flag is used.
  id: totrans-1980
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的标志 @validates include_removes。当为 True 时，还将集合移除和属性删除事件发送到验证函数，当使用此标志时，该函数接受额外的参数“is_remove”。
- en: '**[orm] [bug]**'
  id: totrans-1981
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue in unit of work whereby setting a non-None self-referential many-to-one
    relationship to None would fail to persist the change if the former value was
    not already loaded..
  id: totrans-1982
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在工作单元中修复了一个问题，即将非空的自引用多对一关系设置为None时，如果原值尚未加载，则更改将无法持久化。
- en: 'References: [#2477](https://www.sqlalchemy.org/trac/ticket/2477)'
  id: totrans-1983
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2477](https://www.sqlalchemy.org/trac/ticket/2477)
- en: '**[orm] [bug]**'
  id: totrans-1984
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in 0.7.6 introduced by whereby column_mapped_collection used against
    columns that were mapped as joins or other indirect selectables would fail to
    function.
  id: totrans-1985
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 0.7.6 中引入的错误，即在针对已映射为联接或其他间接可选择项的列使用 column_mapped_collection 时，将无法正常运行。
- en: 'References: [#2409](https://www.sqlalchemy.org/trac/ticket/2409)'
  id: totrans-1986
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2409](https://www.sqlalchemy.org/trac/ticket/2409)
- en: '**[orm] [bug]**'
  id: totrans-1987
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug whereby polymorphic_on column that’s not otherwise mapped on the class
    would be incorrectly included in a merge() operation, raising an error.
  id: totrans-1988
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 polymorphic_on 列在类中未被映射时错误地包含在 merge() 操作中引发错误的错误。
- en: 'References: [#2449](https://www.sqlalchemy.org/trac/ticket/2449)'
  id: totrans-1989
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2449](https://www.sqlalchemy.org/trac/ticket/2449)
- en: '**[orm] [bug]**'
  id: totrans-1990
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in expression annotation mechanics which could lead to incorrect rendering
    of SELECT statements with aliases and joins, particularly when using column_property().
  id: totrans-1991
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了表达式注释机制中的错误，这可能导致 SELECT 语句的错误渲染，特别是在使用 column_property() 时使用别名和连接时。
- en: 'References: [#2453](https://www.sqlalchemy.org/trac/ticket/2453)'
  id: totrans-1992
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2453](https://www.sqlalchemy.org/trac/ticket/2453)
- en: '**[orm] [bug]**'
  id: totrans-1993
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug which would prevent OrderingList from being pickleable. Courtesy Jeff
    Dairiki
  id: totrans-1994
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了会阻止 OrderingList 可以 pickle 的错误。由 Jeff Dairiki 提供
- en: 'References: [#2454](https://www.sqlalchemy.org/trac/ticket/2454)'
  id: totrans-1995
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2454](https://www.sqlalchemy.org/trac/ticket/2454)
- en: '**[orm] [bug]**'
  id: totrans-1996
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in relationship comparisons whereby calling unimplemented methods
    like SomeClass.somerelationship.like() would produce a recursion overflow, instead
    of NotImplementedError.
  id: totrans-1997
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关系比较中的错误，即调用未实现的方法如 SomeClass.somerelationship.like() 将产生递归溢出，而不是 NotImplementedError。
- en: sql
  id: totrans-1998
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-1999
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added new connection event dbapi_error(). Is called for all DBAPI-level errors
    passing the original DBAPI exception before SQLAlchemy modifies the state of the
    cursor.
  id: totrans-2000
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的连接事件 dbapi_error()。在所有 DBAPI 级错误时调用，传递原始的 DBAPI 异常，然后 SQLAlchemy 修改游标的状态。
- en: '**[sql] [bug]**'
  id: totrans-2001
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Removed warning when Index is created with no columns; while this might not
    be what the user intended, it is a valid use case as an Index could be a placeholder
    for just an index of a certain name.
  id: totrans-2002
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了在创建索引时没有列时的警告；虽然这可能不是用户期望的行为，但作为索引只是某个名称的索引是有效的用例。
- en: '**[sql] [bug]**'
  id: totrans-2003
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: If conn.begin() fails when calling “with engine.begin()”, the newly acquired
    Connection is closed explicitly before propagating the exception onward normally.
  id: totrans-2004
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '如果在调用 “with engine.begin()” 时 conn.begin() 失败，则会在正常传播异常之前显式关闭新获取的 Connection。 '
- en: '**[sql] [bug]**'
  id: totrans-2005
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Add BINARY, VARBINARY to types.__all__.
  id: totrans-2006
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 BINARY 和 VARBINARY 添加到 types.__all__。
- en: 'References: [#2474](https://www.sqlalchemy.org/trac/ticket/2474)'
  id: totrans-2007
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2474](https://www.sqlalchemy.org/trac/ticket/2474)
- en: postgresql
  id: totrans-2008
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-2009
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: 'Added new for_update/with_lockmode() options for PostgreSQL: for_update=”read”/
    with_lockmode(“read”), for_update=”read_nowait”/ with_lockmode(“read_nowait”).
    These emit “FOR SHARE” and “FOR SHARE NOWAIT”, respectively. Courtesy Diana Clarke'
  id: totrans-2010
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 PostgreSQL 添加了新的 for_update/with_lockmode() 选项：for_update=”read”/ with_lockmode(“read”)，for_update=”read_nowait”/
    with_lockmode(“read_nowait”)。这些分别发出 “FOR SHARE” 和 “FOR SHARE NOWAIT”。感谢 Diana
    Clarke。
- en: 'References: [#2445](https://www.sqlalchemy.org/trac/ticket/2445)'
  id: totrans-2011
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2445](https://www.sqlalchemy.org/trac/ticket/2445)
- en: '**[postgresql] [bug]**'
  id: totrans-2012
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: removed unnecessary table clause when reflecting domains.
  id: totrans-2013
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在反射域时删除了不必要的表子句。
- en: 'References: [#2473](https://www.sqlalchemy.org/trac/ticket/2473)'
  id: totrans-2014
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2473](https://www.sqlalchemy.org/trac/ticket/2473)
- en: mysql
  id: totrans-2015
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-2016
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed bug whereby column name inside of “KEY” clause for autoincrement composite
    column with InnoDB would double quote a name that’s a reserved word. Courtesy
    Jeff Dairiki.
  id: totrans-2017
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即在 InnoDB 中使用自增复合列的“KEY”子句中的列名会双引号一个是保留字的名称。感谢 Jeff Dairiki。
- en: 'References: [#2460](https://www.sqlalchemy.org/trac/ticket/2460)'
  id: totrans-2018
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2460](https://www.sqlalchemy.org/trac/ticket/2460)
- en: '**[mysql] [bug]**'
  id: totrans-2019
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed bug whereby get_view_names() for “information_schema” schema would fail
    to retrieve views marked as “SYSTEM VIEW”. courtesy Matthew Turland.
  id: totrans-2020
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即当“information_schema”模式的 get_view_names() 无法检索标记为“SYSTEM VIEW”的视图时会失败。感谢
    Matthew Turland。
- en: '**[mysql] [bug]**'
  id: totrans-2021
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed bug whereby if cast() is used on a SQL expression whose type is not supported
    by cast() and therefore CAST isn’t rendered by the dialect, the order of evaluation
    could change if the casted expression required that it be grouped; grouping is
    now applied to those expressions.
  id: totrans-2022
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即如果 cast() 在不支持 cast() 的 SQL 表达式上使用，因此方言不会渲染 CAST，则如果转换的表达式需要分组，则评估顺序可能会更改；现在将对这些表达式应用分组。
- en: 'References: [#2467](https://www.sqlalchemy.org/trac/ticket/2467)'
  id: totrans-2023
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2467](https://www.sqlalchemy.org/trac/ticket/2467)
- en: sqlite
  id: totrans-2024
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [feature]**'
  id: totrans-2025
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [feature]**'
- en: Added SQLite execution option “sqlite_raw_colnames=True”, will bypass attempts
    to remove “.” from column names returned by SQLite cursor.description.
  id: totrans-2026
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 SQLite 执行选项 “sqlite_raw_colnames=True”，将绕过 SQLite cursor.description 返回的列名中的
    “.” 的尝试删除。
- en: 'References: [#2475](https://www.sqlalchemy.org/trac/ticket/2475)'
  id: totrans-2027
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2475](https://www.sqlalchemy.org/trac/ticket/2475)
- en: '**[sqlite] [bug]**'
  id: totrans-2028
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: When the primary key column of a Table is replaced, such as via extend_existing,
    the “auto increment” column used by insert() constructs is reset. Previously it
    would remain referring to the previous primary key column.
  id: totrans-2029
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当表的主键列被替换时，比如通过 extend_existing，由 insert() 构造函数使用的“自动增量”列会被重置。之前它会继续引用以前的主键列。
- en: 'References: [#2525](https://www.sqlalchemy.org/trac/ticket/2525)'
  id: totrans-2030
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2525](https://www.sqlalchemy.org/trac/ticket/2525)
- en: mssql
  id: totrans-2031
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [feature]**'
  id: totrans-2032
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [feature]**'
- en: Added interim create_engine flag supports_unicode_binds to PyODBC dialect, to
    force whether or not the dialect passes Python unicode literals to PyODBC or not.
  id: totrans-2033
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 PyODBC 方言添加了临时 create_engine 标志 supports_unicode_binds，以强制该方言是否将 Python unicode
    文字传递给 PyODBC。
- en: '**[mssql] [bug]**'
  id: totrans-2034
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Repaired the use_scope_identity create_engine() flag when using the pyodbc dialect.
    Previously this flag would be ignored if set to False. When set to False, you’ll
    get “SELECT @@identity” after each INSERT to get at the last inserted ID, for
    those tables which have “implicit_returning” set to False.
  id: totrans-2035
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用 pyodbc 方言时 use_scope_identity create_engine() 标志的问题。之前，如果设置为 False，此标志将被忽略。当设置为
    False 时，对于那些“implicit_returning”设置为 False 的表，将在每次插入后获得“SELECT @@identity”以获取最后插入的
    ID。
- en: '**[mssql] [bug]**'
  id: totrans-2036
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: UPDATE..FROM syntax with SQL Server requires that the updated table be present
    in the FROM clause when an alias of that table is also present in the FROM clause.
    The updated table is now always present in the FROM, when FROM is present in the
    first place. Courtesy sayap.
  id: totrans-2037
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 SQL Server 的 UPDATE..FROM 语法要求在 FROM 子句中存在被更新的表，当该表的别名也存在于 FROM 子句中时。如果 FROM
    子句首次出现，则更新后的表现在始终存在于 FROM 子句中。感谢 sayap。
- en: 'References: [#2468](https://www.sqlalchemy.org/trac/ticket/2468)'
  id: totrans-2038
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2468](https://www.sqlalchemy.org/trac/ticket/2468)
- en: orm
  id: totrans-2039
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-2040
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added prefix_with() method to Query, calls upon select().prefix_with() to allow
    placement of MySQL SELECT directives in statements. Courtesy Diana Clarke
  id: totrans-2041
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为Query添加了prefix_with()方法，调用select().prefix_with()以允许在语句中放置MySQL SELECT指令。感谢Diana
    Clarke
- en: 'References: [#2443](https://www.sqlalchemy.org/trac/ticket/2443)'
  id: totrans-2042
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2443](https://www.sqlalchemy.org/trac/ticket/2443)
- en: '**[orm] [feature]**'
  id: totrans-2043
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new flag to @validates include_removes. When True, collection remove and
    attribute del events will also be sent to the validation function, which accepts
    an additional argument “is_remove” when this flag is used.
  id: totrans-2044
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为@validates添加了新标志include_removes。当为True时，集合删除和属性删除事件也将发送到验证函数，当使用此标志时，验证函数将接受额外参数“is_remove”。
- en: '**[orm] [bug]**'
  id: totrans-2045
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue in unit of work whereby setting a non-None self-referential many-to-one
    relationship to None would fail to persist the change if the former value was
    not already loaded..
  id: totrans-2046
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了工作单元中的问题，即将非None的自引用多对一关系设置为None时，如果前一个值尚未加载，则无法持久化更改。
- en: 'References: [#2477](https://www.sqlalchemy.org/trac/ticket/2477)'
  id: totrans-2047
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2477](https://www.sqlalchemy.org/trac/ticket/2477)
- en: '**[orm] [bug]**'
  id: totrans-2048
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in 0.7.6 introduced by whereby column_mapped_collection used against
    columns that were mapped as joins or other indirect selectables would fail to
    function.
  id: totrans-2049
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了0.7.6版本中引入的bug，即对于被映射为连接或其他间接可选择的列使用column_mapped_collection会导致功能失效。
- en: 'References: [#2409](https://www.sqlalchemy.org/trac/ticket/2409)'
  id: totrans-2050
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2409](https://www.sqlalchemy.org/trac/ticket/2409)
- en: '**[orm] [bug]**'
  id: totrans-2051
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug whereby polymorphic_on column that’s not otherwise mapped on the class
    would be incorrectly included in a merge() operation, raising an error.
  id: totrans-2052
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了多态_on列未在类中映射的���况下错误地包含在merge()操作中的bug，导致错误。
- en: 'References: [#2449](https://www.sqlalchemy.org/trac/ticket/2449)'
  id: totrans-2053
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2449](https://www.sqlalchemy.org/trac/ticket/2449)
- en: '**[orm] [bug]**'
  id: totrans-2054
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in expression annotation mechanics which could lead to incorrect rendering
    of SELECT statements with aliases and joins, particularly when using column_property().
  id: totrans-2055
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了表达式注释机制中的bug，可能导致带有别名和连接的SELECT语句的不正确渲染，特别是在使用column_property()时。
- en: 'References: [#2453](https://www.sqlalchemy.org/trac/ticket/2453)'
  id: totrans-2056
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2453](https://www.sqlalchemy.org/trac/ticket/2453)
- en: '**[orm] [bug]**'
  id: totrans-2057
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug which would prevent OrderingList from being pickleable. Courtesy Jeff
    Dairiki
  id: totrans-2058
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了阻止OrderingList可被pickle的bug。感谢Jeff Dairiki
- en: 'References: [#2454](https://www.sqlalchemy.org/trac/ticket/2454)'
  id: totrans-2059
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2454](https://www.sqlalchemy.org/trac/ticket/2454)
- en: '**[orm] [bug]**'
  id: totrans-2060
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in relationship comparisons whereby calling unimplemented methods
    like SomeClass.somerelationship.like() would produce a recursion overflow, instead
    of NotImplementedError.
  id: totrans-2061
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关系比较中的bug，即调用未实现的方法（如SomeClass.somerelationship.like()）会导致递归溢出，而不是NotImplementedError。
- en: sql
  id: totrans-2062
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-2063
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added new connection event dbapi_error(). Is called for all DBAPI-level errors
    passing the original DBAPI exception before SQLAlchemy modifies the state of the
    cursor.
  id: totrans-2064
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的connection event dbapi_error()。对于所有DBAPI级别的错误，会在SQLAlchemy修改游标状态之前调用原始的DBAPI异常。
- en: '**[sql] [bug]**'
  id: totrans-2065
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Removed warning when Index is created with no columns; while this might not
    be what the user intended, it is a valid use case as an Index could be a placeholder
    for just an index of a certain name.
  id: totrans-2066
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当创建Index时没有列时移除警告；虽然这可能不是用户想要的，但作为一个只有特定名称的索引的占位符是有效的用例。
- en: '**[sql] [bug]**'
  id: totrans-2067
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: If conn.begin() fails when calling “with engine.begin()”, the newly acquired
    Connection is closed explicitly before propagating the exception onward normally.
  id: totrans-2068
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在调用“with engine.begin()”时，如果conn.begin()失败，则新获取的连接在正常传播异常之前会被显式关闭。
- en: '**[sql] [bug]**'
  id: totrans-2069
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Add BINARY, VARBINARY to types.__all__.
  id: totrans-2070
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将BINARY、VARBINARY添加到types.__all__中。
- en: 'References: [#2474](https://www.sqlalchemy.org/trac/ticket/2474)'
  id: totrans-2071
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2474](https://www.sqlalchemy.org/trac/ticket/2474)
- en: postgresql
  id: totrans-2072
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-2073
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: 'Added new for_update/with_lockmode() options for PostgreSQL: for_update=”read”/
    with_lockmode(“read”), for_update=”read_nowait”/ with_lockmode(“read_nowait”).
    These emit “FOR SHARE” and “FOR SHARE NOWAIT”, respectively. Courtesy Diana Clarke'
  id: totrans-2074
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为PostgreSQL添加了新的for_update/with_lockmode()选项：for_update=”read”/with_lockmode(“read”)，for_update=”read_nowait”/with_lockmode(“read_nowait”)。这些分别发出“FOR
    SHARE”和“FOR SHARE NOWAIT”。感谢Diana Clarke
- en: 'References: [#2445](https://www.sqlalchemy.org/trac/ticket/2445)'
  id: totrans-2075
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2445](https://www.sqlalchemy.org/trac/ticket/2445)
- en: '**[postgresql] [bug]**'
  id: totrans-2076
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: removed unnecessary table clause when reflecting domains.
  id: totrans-2077
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在反射域时移除了不必要的表子句。
- en: 'References: [#2473](https://www.sqlalchemy.org/trac/ticket/2473)'
  id: totrans-2078
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2473](https://www.sqlalchemy.org/trac/ticket/2473)
- en: mysql
  id: totrans-2079
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-2080
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed bug whereby column name inside of “KEY” clause for autoincrement composite
    column with InnoDB would double quote a name that’s a reserved word. Courtesy
    Jeff Dairiki.
  id: totrans-2081
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即对于 InnoDB 中具有自增复合列的“KEY”子句内的列名，会将名称重复引用为保留字。由 Jeff Dairiki 提供。
- en: 'References: [#2460](https://www.sqlalchemy.org/trac/ticket/2460)'
  id: totrans-2082
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2460](https://www.sqlalchemy.org/trac/ticket/2460)
- en: '**[mysql] [bug]**'
  id: totrans-2083
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed bug whereby get_view_names() for “information_schema” schema would fail
    to retrieve views marked as “SYSTEM VIEW”. courtesy Matthew Turland.
  id: totrans-2084
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即对于标记为“SYSTEM VIEW”的视图，get_view_names() 对于“information_schema”模式将无法检索到；由
    Matthew Turland 提供。
- en: '**[mysql] [bug]**'
  id: totrans-2085
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed bug whereby if cast() is used on a SQL expression whose type is not supported
    by cast() and therefore CAST isn’t rendered by the dialect, the order of evaluation
    could change if the casted expression required that it be grouped; grouping is
    now applied to those expressions.
  id: totrans-2086
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即如果对不支持的 SQL 表达式使用了 cast()，因此方言不会渲染 CAST，则如果要求对被转换的表达式进行分组，则评估顺序可能会更改；现在将对这些表达式应用分组。
- en: 'References: [#2467](https://www.sqlalchemy.org/trac/ticket/2467)'
  id: totrans-2087
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2467](https://www.sqlalchemy.org/trac/ticket/2467)
- en: sqlite
  id: totrans-2088
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [feature]**'
  id: totrans-2089
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [feature]**'
- en: Added SQLite execution option “sqlite_raw_colnames=True”, will bypass attempts
    to remove “.” from column names returned by SQLite cursor.description.
  id: totrans-2090
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '添加了 SQLite 执行选项“sqlite_raw_colnames=True”，将绕过 SQLite cursor.description 返回的列名中的“.”
    移除尝试。 '
- en: 'References: [#2475](https://www.sqlalchemy.org/trac/ticket/2475)'
  id: totrans-2091
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2475](https://www.sqlalchemy.org/trac/ticket/2475)
- en: '**[sqlite] [bug]**'
  id: totrans-2092
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: When the primary key column of a Table is replaced, such as via extend_existing,
    the “auto increment” column used by insert() constructs is reset. Previously it
    would remain referring to the previous primary key column.
  id: totrans-2093
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当替换 Table 的主键列时，例如通过 extend_existing，由 insert() 构造使用的“自动增量”列将被重置。以前，它将继续引用先前的主键列。
- en: 'References: [#2525](https://www.sqlalchemy.org/trac/ticket/2525)'
  id: totrans-2094
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2525](https://www.sqlalchemy.org/trac/ticket/2525)
- en: mssql
  id: totrans-2095
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [feature]**'
  id: totrans-2096
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [feature]**'
- en: Added interim create_engine flag supports_unicode_binds to PyODBC dialect, to
    force whether or not the dialect passes Python unicode literals to PyODBC or not.
  id: totrans-2097
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了临时 create_engine 标志 supports_unicode_binds 到 PyODBC 方言，用于强制该方言是否将 Python
    unicode 文字传递给 PyODBC。
- en: '**[mssql] [bug]**'
  id: totrans-2098
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Repaired the use_scope_identity create_engine() flag when using the pyodbc dialect.
    Previously this flag would be ignored if set to False. When set to False, you’ll
    get “SELECT @@identity” after each INSERT to get at the last inserted ID, for
    those tables which have “implicit_returning” set to False.
  id: totrans-2099
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用 pyodbc 方言时，使用 use_scope_identity create_engine() 标志的问题。以前，如果将此标志设置为 False，则会被忽略。当设置为
    False 时，每次 INSERT 后都会获得“SELECT @@identity”，以获取最后插入的 ID，对于那些将“implicit_returning”设置为
    False 的表。
- en: '**[mssql] [bug]**'
  id: totrans-2100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: UPDATE..FROM syntax with SQL Server requires that the updated table be present
    in the FROM clause when an alias of that table is also present in the FROM clause.
    The updated table is now always present in the FROM, when FROM is present in the
    first place. Courtesy sayap.
  id: totrans-2101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 SQL Server 的 UPDATE..FROM 语法要求在 FROM 子句中同时存在更新的表和该表的别名。现在，当 FROM 存在时，更新的表始终存在于
    FROM 中。由 sayap 提供。
- en: 'References: [#2468](https://www.sqlalchemy.org/trac/ticket/2468)'
  id: totrans-2102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2468](https://www.sqlalchemy.org/trac/ticket/2468)
- en: 0.7.6
  id: totrans-2103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.7.6
- en: 'Released: Wed Mar 14 2012'
  id: totrans-2104
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2012年3月14日（星期三）
- en: orm
  id: totrans-2105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-2106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: 'Added “no_autoflush” context manager to Session, used with with: will temporarily
    disable autoflush.'
  id: totrans-2107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 Session 添加了“no_autoflush”上下文管理器，与 with 一起使用：将暂时禁用自动刷新。
- en: '**[orm] [feature]**'
  id: totrans-2108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added cte() method to Query, invokes common table expression support from the
    Core (see below).
  id: totrans-2109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 Query 添加了 cte() 方法，调用来自 Core 的公共表达式支持（见下文）。
- en: 'References: [#1859](https://www.sqlalchemy.org/trac/ticket/1859)'
  id: totrans-2110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1859](https://www.sqlalchemy.org/trac/ticket/1859)
- en: '**[orm] [feature]**'
  id: totrans-2111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added the ability to query for Table-bound column names when using query(sometable).filter_by(colname=value).
  id: totrans-2112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了通过 query(sometable).filter_by(colname=value) 查询绑定到 Table 的列名的能力。
- en: 'References: [#2400](https://www.sqlalchemy.org/trac/ticket/2400)'
  id: totrans-2113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2400](https://www.sqlalchemy.org/trac/ticket/2400)
- en: '**[orm] [bug]**'
  id: totrans-2114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed event registration bug which would primarily show up as events not being
    registered with sessionmaker() instances created after the event was associated
    with the Session class.
  id: totrans-2115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个事件注册 bug，主要表现为在与 Session 类关联的事件在创建了 sessionmaker() 实例后未注册。
- en: 'References: [#2424](https://www.sqlalchemy.org/trac/ticket/2424)'
  id: totrans-2116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2424](https://www.sqlalchemy.org/trac/ticket/2424)
- en: '**[orm] [bug]**'
  id: totrans-2117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug whereby a primaryjoin condition with a “literal” in it would raise
    an error on compile with certain kinds of deeply nested expressions which also
    needed to render the same bound parameter name more than once.
  id: totrans-2118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即在主键连接条件中带有“literal”会在某些深度嵌套表达式中的编译时多次渲染相同的绑定参数名称时引发错误。
- en: 'References: [#2425](https://www.sqlalchemy.org/trac/ticket/2425)'
  id: totrans-2119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2425](https://www.sqlalchemy.org/trac/ticket/2425)
- en: '**[orm] [bug]**'
  id: totrans-2120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Removed the check for number of rows affected when doing a multi-delete against
    mapped objects. If an ON DELETE CASCADE exists between two rows, we can’t get
    an accurate rowcount from the DBAPI; this particular count is not supported on
    most DBAPIs in any case, MySQLdb is the notable case where it is.
  id: totrans-2121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了对执行多行删除时受影响行数的检查。如果两行之间存在 ON DELETE CASCADE，我们无法从 DBAPI 中获取准确的行数；在大多数情况下，这个特定计数也不受大多数
    DBAPI 的支持，MySQLdb 是一个例外情况。
- en: 'References: [#2403](https://www.sqlalchemy.org/trac/ticket/2403)'
  id: totrans-2122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2403](https://www.sqlalchemy.org/trac/ticket/2403)
- en: '**[orm] [bug]**'
  id: totrans-2123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug whereby objects using attribute_mapped_collection or column_mapped_collection
    could not be pickled.
  id: totrans-2124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即使用 attribute_mapped_collection 或 column_mapped_collection 的对象无法被 pickled。
- en: 'References: [#2409](https://www.sqlalchemy.org/trac/ticket/2409)'
  id: totrans-2125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2409](https://www.sqlalchemy.org/trac/ticket/2409)
- en: '**[orm] [bug]**'
  id: totrans-2126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug whereby MappedCollection would not get the appropriate collection
    instrumentation if it were only used in a custom subclass that used @collection.internally_instrumented.
  id: totrans-2127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即如果 MappedCollection 仅在使用了 @collection.internally_instrumented 的自定义子类中使用，则无法获得适当的集合工具。
- en: 'References: [#2406](https://www.sqlalchemy.org/trac/ticket/2406)'
  id: totrans-2128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2406](https://www.sqlalchemy.org/trac/ticket/2406)
- en: '**[orm] [bug]**'
  id: totrans-2129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug whereby SQL adaption mechanics would fail in a very nested scenario
    involving joined-inheritance, joinedload(), limit(), and a derived function in
    the columns clause.
  id: totrans-2130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即 SQL 适配机制在涉及联合继承、joinedload()、limit() 和列子句中的衍生函数的非常嵌套场景中会失败。
- en: 'References: [#2419](https://www.sqlalchemy.org/trac/ticket/2419)'
  id: totrans-2131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2419](https://www.sqlalchemy.org/trac/ticket/2419)
- en: '**[orm] [bug]**'
  id: totrans-2132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed the repr() for CascadeOptions to include refresh-expire. Also reworked
    CascadeOptions to be a <frozenset>.
  id: totrans-2133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 CascadeOptions 的 repr()，以包括 refresh-expire。同时重新设计了 CascadeOptions 为 <frozenset>。
- en: 'References: [#2417](https://www.sqlalchemy.org/trac/ticket/2417)'
  id: totrans-2134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2417](https://www.sqlalchemy.org/trac/ticket/2417)
- en: '**[orm] [bug]**'
  id: totrans-2135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Improved the “declarative reflection” example to support single-table inheritance,
    multiple calls to prepare(), tables that are present in alternate schemas, establishing
    only a subset of classes as reflected.
  id: totrans-2136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了“声明式反射”示例，以支持单表继承、多次调用 prepare()、存在于备选模式中的表以及仅建立一部分类作为反射。
- en: '**[orm] [bug]**'
  id: totrans-2137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Scaled back the test applied within flush() to check for UPDATE against partially
    NULL PK within one table to only actually happen if there’s really an UPDATE to
    occur.
  id: totrans-2138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 缩小了在 flush() 中应用的测试范围，仅在确实有更新时才检查对同一表中部分空主键的 UPDATE 是否存在。
- en: 'References: [#2390](https://www.sqlalchemy.org/trac/ticket/2390)'
  id: totrans-2139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2390](https://www.sqlalchemy.org/trac/ticket/2390)
- en: '**[orm] [bug]**'
  id: totrans-2140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug whereby if a method name conflicted with a column name, a TypeError
    would be raised when the mapper tried to inspect the __get__() method on the method
    object.
  id: totrans-2141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即如果方法名与列名冲突，当映射器尝试检查方法对象上的 __get__() 方法时，会引发 TypeError。
- en: 'References: [#2352](https://www.sqlalchemy.org/trac/ticket/2352)'
  id: totrans-2142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2352](https://www.sqlalchemy.org/trac/ticket/2352)
- en: examples
  id: totrans-2143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: examples
- en: '**[examples] [bug]**'
  id: totrans-2144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples] [bug]**'
- en: Altered _params_from_query() function in Beaker example to pull bindparams from
    the fully compiled statement, as a quick means to get everything including subqueries
    in the columns clause, etc.
  id: totrans-2145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Beaker 示例中修改了 _params_from_query() 函数，从完全编译的语句中提取绑定参数，作为获取包括列子句中的子查询等所有内容的快速手段。
- en: engine
  id: totrans-2146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [feature]**'
  id: totrans-2147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: Added “no_parameters=True” execution option for connections. If no parameters
    are present, will pass the statement as cursor.execute(statement), thereby invoking
    the DBAPIs behavior when no parameter collection is present; for psycopg2 and
    mysql-python, this means not interpreting % signs in the string. This only occurs
    with this option, and not just if the param list is blank, as otherwise this would
    produce inconsistent behavior of SQL expressions that normally escape percent
    signs (and while compiling, can’t know ahead of time if parameters will be present
    in some cases).
  id: totrans-2148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为连接添加了“no_parameters=True”执行选项。如果没有参数，则会将语句传递给cursor.execute(statement)，从而调用DBAPI在没有参数集合时的行为；对于psycopg2和mysql-python，这意味着不解释字符串中的%符号。只有在使用此选项时才会发生这种情况，而不仅仅是参数列表为空，否则这将产生SQL表达式的不一致行为，这些表达式通常会转义百分号（并且在编译时，有时无法提前知道参数是否存在）。
- en: 'References: [#2407](https://www.sqlalchemy.org/trac/ticket/2407)'
  id: totrans-2149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2407](https://www.sqlalchemy.org/trac/ticket/2407)
- en: '**[engine] [feature]**'
  id: totrans-2150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: Added pool_reset_on_return argument to create_engine, allows control over “connection
    return” behavior. Also added new arguments ‘rollback’, ‘commit’, None to pool.reset_on_return
    to allow more control over connection return activity.
  id: totrans-2151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了pool_reset_on_return参数到create_engine，允许控制“连接返回”行为。还添加了新参数‘rollback’，‘commit’，None到pool.reset_on_return，以允许更多控制连接返回活动。
- en: 'References: [#2378](https://www.sqlalchemy.org/trac/ticket/2378)'
  id: totrans-2152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2378](https://www.sqlalchemy.org/trac/ticket/2378)
- en: '**[engine] [feature]**'
  id: totrans-2153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: 'Added some decent context managers to Engine, Connection:'
  id: totrans-2154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为Engine、Connection添加了一些不错的上下文管理器：
- en: '[PRE2]'
  id: totrans-2155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'and:'
  id: totrans-2156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 并且：
- en: '[PRE3]'
  id: totrans-2157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Both close out the connection when done, commit or rollback transaction with
    errors on engine.begin().
  id: totrans-2158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在engine.begin()上完成连接时，无论是提交还是回滚事务都会关闭连接。
- en: '**[engine] [bug]**'
  id: totrans-2159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Added execution_options() call to MockConnection (i.e., that used with strategy=”mock”)
    which acts as a pass through for arguments.
  id: totrans-2160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在MockConnection（即与strategy=”mock”一起使用的连接）中添加了execution_options()调用，作为参数的传递。
- en: sql
  id: totrans-2161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-2162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added support for SQL standard common table expressions (CTE), allowing SELECT
    objects as the CTE source (DML not yet supported). This is invoked via the cte()
    method on any select() construct.
  id: totrans-2163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对SQL标准通用表达式（CTE）的支持，允许将SELECT对象作为CTE源（尚不支持DML）。这通过任何select()构造上的cte()方法调用。
- en: 'References: [#1859](https://www.sqlalchemy.org/trac/ticket/1859)'
  id: totrans-2164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1859](https://www.sqlalchemy.org/trac/ticket/1859)
- en: '**[sql] [bug]**'
  id: totrans-2165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed memory leak in core which would occur when C extensions were used with
    particular types of result fetches, in particular when orm query.count() were
    called.
  id: totrans-2166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用特定类型的结果获取时，当使用C扩展时会发生内存泄漏的核心问题，特别是在调用orm query.count()时。
- en: 'References: [#2427](https://www.sqlalchemy.org/trac/ticket/2427)'
  id: totrans-2167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2427](https://www.sqlalchemy.org/trac/ticket/2427)
- en: '**[sql] [bug]**'
  id: totrans-2168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue whereby attribute-based column access on a row would raise AttributeError
    with non-C version, NoSuchColumnError with C version. Now raises AttributeError
    in both cases.
  id: totrans-2169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在行上基于属性访问时，非C版本会引发AttributeError，C版本会引发NoSuchColumnError的问题。现在在两种情况下都会引发AttributeError。
- en: 'References: [#2398](https://www.sqlalchemy.org/trac/ticket/2398)'
  id: totrans-2170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2398](https://www.sqlalchemy.org/trac/ticket/2398)
- en: '**[sql] [bug]**'
  id: totrans-2171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Added support for using the .key of a Column as a string identifier in a result
    set row. The .key is currently listed as an “alternate” name for a column, and
    is superseded by the name of a column which has that key value as its regular
    name. For the next major release of SQLAlchemy we may reverse this precedence
    so that .key takes precedence, but this is not decided on yet.
  id: totrans-2172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了使用Column的.key作为结果集行的字符串标识符的支持。.key目前被列为列的“备用”名称，并且被具有该键值作为其常规名称的列所取代。对于SQLAlchemy的下一个主要版本，我们可能会反转这种优先顺序，使.key优先，但目前尚未决定。
- en: 'References: [#2392](https://www.sqlalchemy.org/trac/ticket/2392)'
  id: totrans-2173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2392](https://www.sqlalchemy.org/trac/ticket/2392)
- en: '**[sql] [bug]**'
  id: totrans-2174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: A warning is emitted when a not-present column is stated in the values() clause
    of an insert() or update() construct. Will move to an exception in 0.8.
  id: totrans-2175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在insert()或update()构造的values()子句中声明不存在的列时会发出警告。将在0.8版本中转为异常。
- en: 'References: [#2413](https://www.sqlalchemy.org/trac/ticket/2413)'
  id: totrans-2176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2413](https://www.sqlalchemy.org/trac/ticket/2413)
- en: '**[sql] [bug]**'
  id: totrans-2177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: A significant change to how labeling is applied to columns in SELECT statements
    allows “truncated” labels, that is label names that are generated in Python which
    exceed the maximum identifier length (note this is configurable via label_length
    on create_engine()), to be properly referenced when rendered inside of a subquery,
    as well as to be present in a result set row using their original in-Python names.
  id: totrans-2178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于在 SELECT 语句中应用标签的方式进行了重大更改，允许“截断”标签，即在 Python 中生成的标签名称超过最大标识符长度时（请注意，可以通过
    create_engine() 中的 label_length 进行配置），在子查询中正确引用，以及在结果集行中使用它们的原始 Python 名称。
- en: 'References: [#2396](https://www.sqlalchemy.org/trac/ticket/2396)'
  id: totrans-2179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2396](https://www.sqlalchemy.org/trac/ticket/2396)
- en: '**[sql] [bug]**'
  id: totrans-2180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in new “autoload_replace” flag which would fail to preserve the primary
    key constraint of the reflected table.
  id: totrans-2181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新的“autoload_replace”标志中的 bug，该 bug 会导致无法保留反射表的主键约束。
- en: 'References: [#2402](https://www.sqlalchemy.org/trac/ticket/2402)'
  id: totrans-2182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2402](https://www.sqlalchemy.org/trac/ticket/2402)
- en: '**[sql] [bug]**'
  id: totrans-2183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Index will raise when arguments passed cannot be interpreted as columns or expressions.
    Will warn when Index is created with no columns at all.
  id: totrans-2184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当传递的参数无法解释为列或表达式时，Index 将引发异常。当创建 Index 时没有传递任何列时将发出警告。
- en: 'References: [#2380](https://www.sqlalchemy.org/trac/ticket/2380)'
  id: totrans-2185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2380](https://www.sqlalchemy.org/trac/ticket/2380)
- en: mysql
  id: totrans-2186
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [feature]**'
  id: totrans-2187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [feature]**'
- en: Added support for MySQL index and primary key constraint types (i.e. USING)
    via new mysql_using parameter to Index and PrimaryKeyConstraint, courtesy Diana
    Clarke.
  id: totrans-2188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过 Index 和 PrimaryKeyConstraint 的新 mysql_using 参数，支持 MySQL 索引和主键约束类型（即 USING），感谢
    Diana Clarke。
- en: 'References: [#2386](https://www.sqlalchemy.org/trac/ticket/2386)'
  id: totrans-2189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2386](https://www.sqlalchemy.org/trac/ticket/2386)
- en: '**[mysql] [feature]**'
  id: totrans-2190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [feature]**'
- en: Added support for the “isolation_level” parameter to all MySQL dialects. Thanks
    to mu_mind for the patch here.
  id: totrans-2191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为所有 MySQL 方言添加了对“isolation_level”参数的支持。感谢 mu_mind 提供的补丁。
- en: 'References: [#2394](https://www.sqlalchemy.org/trac/ticket/2394)'
  id: totrans-2192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2394](https://www.sqlalchemy.org/trac/ticket/2394)
- en: sqlite
  id: totrans-2193
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-2194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Fixed bug in C extensions whereby string format would not be applied to a Numeric
    value returned as integer; this affected primarily SQLite which does not maintain
    numeric scale settings.
  id: totrans-2195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 C 扩展中的一个 bug，即当作为整数返回的 Numeric 值不会应用字符串格式；这主要影响了 SQLite，因为它不维护数字比例设置。
- en: 'References: [#2432](https://www.sqlalchemy.org/trac/ticket/2432)'
  id: totrans-2196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2432](https://www.sqlalchemy.org/trac/ticket/2432)
- en: mssql
  id: totrans-2197
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [feature]**'
  id: totrans-2198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [feature]**'
- en: Added support for MSSQL INSERT, UPDATE, and DELETE table hints, using new with_hint()
    method on UpdateBase.
  id: totrans-2199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 MSSQL INSERT、UPDATE 和 DELETE 表提示的支持，使用 UpdateBase 上的新 with_hint() 方法。
- en: 'References: [#2430](https://www.sqlalchemy.org/trac/ticket/2430)'
  id: totrans-2200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2430](https://www.sqlalchemy.org/trac/ticket/2430)
- en: oracle
  id: totrans-2201
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [feature]**'
  id: totrans-2202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [feature]**'
- en: Added a new create_engine() flag coerce_to_decimal=False, disables the precision
    numeric handling which can add lots of overhead by converting all numeric values
    to Decimal.
  id: totrans-2203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的 create_engine() 标志 coerce_to_decimal=False，禁用精确数值处理，可以通过将所有数值转换为 Decimal
    来增加大量开销。
- en: 'References: [#2399](https://www.sqlalchemy.org/trac/ticket/2399)'
  id: totrans-2204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2399](https://www.sqlalchemy.org/trac/ticket/2399)
- en: '**[oracle] [bug]**'
  id: totrans-2205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Added missing compilation support for LONG
  id: totrans-2206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 LONG 的缺失编译支持
- en: 'References: [#2401](https://www.sqlalchemy.org/trac/ticket/2401)'
  id: totrans-2207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2401](https://www.sqlalchemy.org/trac/ticket/2401)
- en: '**[oracle] [bug]**'
  id: totrans-2208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Added ‘LEVEL’ to the list of reserved words for Oracle.
  id: totrans-2209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将“LEVEL”添加到 Oracle 的保留字列表中。
- en: 'References: [#2435](https://www.sqlalchemy.org/trac/ticket/2435)'
  id: totrans-2210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2435](https://www.sqlalchemy.org/trac/ticket/2435)
- en: orm
  id: totrans-2211
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-2212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: 'Added “no_autoflush” context manager to Session, used with with: will temporarily
    disable autoflush.'
  id: totrans-2213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 Session 添加了“no_autoflush”上下文管理器，与 with 一起使用：将临时禁用自动刷新。
- en: '**[orm] [feature]**'
  id: totrans-2214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added cte() method to Query, invokes common table expression support from the
    Core (see below).
  id: totrans-2215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 Query 添加了 cte() 方法，调用 Core 中的公共表达式支持（见下文）。
- en: 'References: [#1859](https://www.sqlalchemy.org/trac/ticket/1859)'
  id: totrans-2216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1859](https://www.sqlalchemy.org/trac/ticket/1859)
- en: '**[orm] [feature]**'
  id: totrans-2217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added the ability to query for Table-bound column names when using query(sometable).filter_by(colname=value).
  id: totrans-2218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用 query(sometable).filter_by(colname=value) 时，添加了查询表绑定列名的功能。
- en: 'References: [#2400](https://www.sqlalchemy.org/trac/ticket/2400)'
  id: totrans-2219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2400](https://www.sqlalchemy.org/trac/ticket/2400)
- en: '**[orm] [bug]**'
  id: totrans-2220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed event registration bug which would primarily show up as events not being
    registered with sessionmaker() instances created after the event was associated
    with the Session class.
  id: totrans-2221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了事件注册 bug，主要表现为在与事件关联到 Session 类之后创建的 sessionmaker() 实例中未注册事件。
- en: 'References: [#2424](https://www.sqlalchemy.org/trac/ticket/2424)'
  id: totrans-2222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2424](https://www.sqlalchemy.org/trac/ticket/2424)
- en: '**[orm] [bug]**'
  id: totrans-2223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug whereby a primaryjoin condition with a “literal” in it would raise
    an error on compile with certain kinds of deeply nested expressions which also
    needed to render the same bound parameter name more than once.
  id: totrans-2224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，当主键连接条件中存在“字面值”时，在某些需要多次渲染相同绑定参数名称的深度嵌套表达式编译时会引发错误。
- en: 'References: [#2425](https://www.sqlalchemy.org/trac/ticket/2425)'
  id: totrans-2225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2425](https://www.sqlalchemy.org/trac/ticket/2425)
- en: '**[orm] [bug]**'
  id: totrans-2226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Removed the check for number of rows affected when doing a multi-delete against
    mapped objects. If an ON DELETE CASCADE exists between two rows, we can’t get
    an accurate rowcount from the DBAPI; this particular count is not supported on
    most DBAPIs in any case, MySQLdb is the notable case where it is.
  id: totrans-2227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了在对映射对象执行多重删除时检查受影响行数的检查。如果两行之间存在 ON DELETE CASCADE，则无法从 DBAPI 中获取准确的行数；在大多数
    DBAPI 中，此特定计数不受支持，MySQLdb 是一个显著的例外。
- en: 'References: [#2403](https://www.sqlalchemy.org/trac/ticket/2403)'
  id: totrans-2228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2403](https://www.sqlalchemy.org/trac/ticket/2403)
- en: '**[orm] [bug]**'
  id: totrans-2229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug whereby objects using attribute_mapped_collection or column_mapped_collection
    could not be pickled.
  id: totrans-2230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，使用 attribute_mapped_collection 或 column_mapped_collection 的对象无法被 pickle。
- en: 'References: [#2409](https://www.sqlalchemy.org/trac/ticket/2409)'
  id: totrans-2231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2409](https://www.sqlalchemy.org/trac/ticket/2409)
- en: '**[orm] [bug]**'
  id: totrans-2232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug whereby MappedCollection would not get the appropriate collection
    instrumentation if it were only used in a custom subclass that used @collection.internally_instrumented.
  id: totrans-2233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，当仅在使用了 @collection.internally_instrumented 的自定义子类中使用 attribute_mapped_collection
    或 column_mapped_collection 时，MappedCollection 将无法获得适当的集合仪器。
- en: 'References: [#2406](https://www.sqlalchemy.org/trac/ticket/2406)'
  id: totrans-2234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2406](https://www.sqlalchemy.org/trac/ticket/2406)
- en: '**[orm] [bug]**'
  id: totrans-2235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug whereby SQL adaption mechanics would fail in a very nested scenario
    involving joined-inheritance, joinedload(), limit(), and a derived function in
    the columns clause.
  id: totrans-2236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，当涉及到 joined-inheritance、joinedload()、limit() 和列子句中的派生函数的非常嵌套的情况时，SQL
    适配机制会失败。
- en: 'References: [#2419](https://www.sqlalchemy.org/trac/ticket/2419)'
  id: totrans-2237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2419](https://www.sqlalchemy.org/trac/ticket/2419)
- en: '**[orm] [bug]**'
  id: totrans-2238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed the repr() for CascadeOptions to include refresh-expire. Also reworked
    CascadeOptions to be a <frozenset>.
  id: totrans-2239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 CascadeOptions 的 repr()，以包含 refresh-expire。还重新设计了 CascadeOptions 为 <frozenset>。
- en: 'References: [#2417](https://www.sqlalchemy.org/trac/ticket/2417)'
  id: totrans-2240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2417](https://www.sqlalchemy.org/trac/ticket/2417)
- en: '**[orm] [bug]**'
  id: totrans-2241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Improved the “declarative reflection” example to support single-table inheritance,
    multiple calls to prepare(), tables that are present in alternate schemas, establishing
    only a subset of classes as reflected.
  id: totrans-2242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了“声明式反射”示例，以支持单表继承、多次调用 prepare()、存在于备选模式中的表，以及仅将部分类反映为反映的子集。
- en: '**[orm] [bug]**'
  id: totrans-2243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Scaled back the test applied within flush() to check for UPDATE against partially
    NULL PK within one table to only actually happen if there’s really an UPDATE to
    occur.
  id: totrans-2244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 缩小了在 flush() 中应用的测试范围，以检查在一个表内部对部分为空的主键进行 UPDATE，只有在真正有 UPDATE 发生时才会发生。
- en: 'References: [#2390](https://www.sqlalchemy.org/trac/ticket/2390)'
  id: totrans-2245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2390](https://www.sqlalchemy.org/trac/ticket/2390)
- en: '**[orm] [bug]**'
  id: totrans-2246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug whereby if a method name conflicted with a column name, a TypeError
    would be raised when the mapper tried to inspect the __get__() method on the method
    object.
  id: totrans-2247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，当方法名与列名冲突时，映射器尝试检查方法对象上的 __get__() 方法时会引发 TypeError。
- en: 'References: [#2352](https://www.sqlalchemy.org/trac/ticket/2352)'
  id: totrans-2248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2352](https://www.sqlalchemy.org/trac/ticket/2352)
- en: examples
  id: totrans-2249
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples] [bug]**'
  id: totrans-2250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples] [bug]**'
- en: Altered _params_from_query() function in Beaker example to pull bindparams from
    the fully compiled statement, as a quick means to get everything including subqueries
    in the columns clause, etc.
  id: totrans-2251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了 Beaker 示例中的 _params_from_query() 函数，从完全编译的语句中提取 bindparams，作为快速获取包括子查询在内的列子句中的一切的手段。
- en: engine
  id: totrans-2252
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [feature]**'
  id: totrans-2253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: Added “no_parameters=True” execution option for connections. If no parameters
    are present, will pass the statement as cursor.execute(statement), thereby invoking
    the DBAPIs behavior when no parameter collection is present; for psycopg2 and
    mysql-python, this means not interpreting % signs in the string. This only occurs
    with this option, and not just if the param list is blank, as otherwise this would
    produce inconsistent behavior of SQL expressions that normally escape percent
    signs (and while compiling, can’t know ahead of time if parameters will be present
    in some cases).
  id: totrans-2254
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对连接添加了“no_parameters=True”执行选项。如果没有参数，将会将语句传递给`cursor.execute(statement)`，从而调用DBAPI在没有参数集合时的行为；对于psycopg2和mysql-python，这意味着不解释字符串中的%符号。这仅在使用此选项时发生，并且不仅仅是如果参数列表为空，否则这将产生通常转义百分号的SQL表达式的不一致行为（并且在编译时，有时候无法提前知道参数是否存在）。
- en: 'References: [#2407](https://www.sqlalchemy.org/trac/ticket/2407)'
  id: totrans-2255
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2407](https://www.sqlalchemy.org/trac/ticket/2407)
- en: '**[engine] [feature]**'
  id: totrans-2256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: Added pool_reset_on_return argument to create_engine, allows control over “connection
    return” behavior. Also added new arguments ‘rollback’, ‘commit’, None to pool.reset_on_return
    to allow more control over connection return activity.
  id: totrans-2257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了pool_reset_on_return参数到create_engine，允许控制“连接返回”行为。还添加了新参数‘rollback’，‘commit’，None到pool.reset_on_return，以允许更多对连接返回活动的控制。
- en: 'References: [#2378](https://www.sqlalchemy.org/trac/ticket/2378)'
  id: totrans-2258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2378](https://www.sqlalchemy.org/trac/ticket/2378)
- en: '**[engine] [feature]**'
  id: totrans-2259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: 'Added some decent context managers to Engine, Connection:'
  id: totrans-2260
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为Engine、Connection添加了一些体面的上下文管理器：
- en: '[PRE4]'
  id: totrans-2261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'and:'
  id: totrans-2262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 和：
- en: '[PRE5]'
  id: totrans-2263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Both close out the connection when done, commit or rollback transaction with
    errors on engine.begin().
  id: totrans-2264
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在完成时关闭连接，使用engine.begin()提交或回滚事务时产生错误。
- en: '**[engine] [bug]**'
  id: totrans-2265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Added execution_options() call to MockConnection (i.e., that used with strategy=”mock”)
    which acts as a pass through for arguments.
  id: totrans-2266
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对MockConnection（即strategy=”mock”时使用的）添加了execution_options()调用，其作为参数的传递。
- en: sql
  id: totrans-2267
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-2268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added support for SQL standard common table expressions (CTE), allowing SELECT
    objects as the CTE source (DML not yet supported). This is invoked via the cte()
    method on any select() construct.
  id: totrans-2269
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对SQL标准通用表达式（CTE）的支持，允许SELECT对象作为CTE源（尚未支持DML）。这通过任何select()构造的cte()方法调用。
- en: 'References: [#1859](https://www.sqlalchemy.org/trac/ticket/1859)'
  id: totrans-2270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1859](https://www.sqlalchemy.org/trac/ticket/1859)
- en: '**[sql] [bug]**'
  id: totrans-2271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed memory leak in core which would occur when C extensions were used with
    particular types of result fetches, in particular when orm query.count() were
    called.
  id: totrans-2272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当C扩展与特定类型的结果提取一起使用时会发生的核心内存泄漏，特别是在调用orm query.count()时。
- en: 'References: [#2427](https://www.sqlalchemy.org/trac/ticket/2427)'
  id: totrans-2273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2427](https://www.sqlalchemy.org/trac/ticket/2427)
- en: '**[sql] [bug]**'
  id: totrans-2274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue whereby attribute-based column access on a row would raise AttributeError
    with non-C version, NoSuchColumnError with C version. Now raises AttributeError
    in both cases.
  id: totrans-2275
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在行上进行基于属性的列访问会引发AttributeError（对于非C版本）或NoSuchColumnError（对于C版本）的问题。现在在两种情况下都引发AttributeError。
- en: 'References: [#2398](https://www.sqlalchemy.org/trac/ticket/2398)'
  id: totrans-2276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2398](https://www.sqlalchemy.org/trac/ticket/2398)
- en: '**[sql] [bug]**'
  id: totrans-2277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Added support for using the .key of a Column as a string identifier in a result
    set row. The .key is currently listed as an “alternate” name for a column, and
    is superseded by the name of a column which has that key value as its regular
    name. For the next major release of SQLAlchemy we may reverse this precedence
    so that .key takes precedence, but this is not decided on yet.
  id: totrans-2278
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了使用列的.key作为结果集行中字符串标识符的支持。.key目前被列为列的“替代”名称，并且被具有该键值作为其常规名称的列所取代。对于SQLAlchemy的下一个主要版本，我们可能会改变这种优先级，以便.key优先，但目前尚未决定。
- en: 'References: [#2392](https://www.sqlalchemy.org/trac/ticket/2392)'
  id: totrans-2279
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2392](https://www.sqlalchemy.org/trac/ticket/2392)
- en: '**[sql] [bug]**'
  id: totrans-2280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: A warning is emitted when a not-present column is stated in the values() clause
    of an insert() or update() construct. Will move to an exception in 0.8.
  id: totrans-2281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在insert()或update()构造的values()子句中声明了不存在的列时会发出警告。将在0.8中移动到异常。
- en: 'References: [#2413](https://www.sqlalchemy.org/trac/ticket/2413)'
  id: totrans-2282
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2413](https://www.sqlalchemy.org/trac/ticket/2413)
- en: '**[sql] [bug]**'
  id: totrans-2283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: A significant change to how labeling is applied to columns in SELECT statements
    allows “truncated” labels, that is label names that are generated in Python which
    exceed the maximum identifier length (note this is configurable via label_length
    on create_engine()), to be properly referenced when rendered inside of a subquery,
    as well as to be present in a result set row using their original in-Python names.
  id: totrans-2284
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 SELECT 语句中应用到列的标签的应用方式发生了重大变化，允许“截断”标签，即在 Python 中生成的标签名称超过最大标识符长度时（请注意，这可以通过
    create_engine() 中的 label_length 进行配置），在子查询中正确引用，并且在结果集行中以其原始的 Python 名称存在。
- en: 'References: [#2396](https://www.sqlalchemy.org/trac/ticket/2396)'
  id: totrans-2285
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2396](https://www.sqlalchemy.org/trac/ticket/2396)
- en: '**[sql] [bug]**'
  id: totrans-2286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误]**'
- en: Fixed bug in new “autoload_replace” flag which would fail to preserve the primary
    key constraint of the reflected table.
  id: totrans-2287
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新的“autoload_replace”标志中的错误，该标志会失败地保留反映表的主键约束。
- en: 'References: [#2402](https://www.sqlalchemy.org/trac/ticket/2402)'
  id: totrans-2288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2402](https://www.sqlalchemy.org/trac/ticket/2402)
- en: '**[sql] [bug]**'
  id: totrans-2289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误]**'
- en: Index will raise when arguments passed cannot be interpreted as columns or expressions.
    Will warn when Index is created with no columns at all.
  id: totrans-2290
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当传递的参数无法解释为列或表达式时，Index 将引发错误。当创建 Index 时没有传递任何列时会发出警告。
- en: 'References: [#2380](https://www.sqlalchemy.org/trac/ticket/2380)'
  id: totrans-2291
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2380](https://www.sqlalchemy.org/trac/ticket/2380)
- en: mysql
  id: totrans-2292
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [feature]**'
  id: totrans-2293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [功能]**'
- en: Added support for MySQL index and primary key constraint types (i.e. USING)
    via new mysql_using parameter to Index and PrimaryKeyConstraint, courtesy Diana
    Clarke.
  id: totrans-2294
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过新的 mysql_using 参数向 Index 和 PrimaryKeyConstraint 添加了对 MySQL 索引和主键约束类型（即 USING）的支持，感谢
    Diana Clarke。
- en: 'References: [#2386](https://www.sqlalchemy.org/trac/ticket/2386)'
  id: totrans-2295
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2386](https://www.sqlalchemy.org/trac/ticket/2386)
- en: '**[mysql] [feature]**'
  id: totrans-2296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [功能]**'
- en: Added support for the “isolation_level” parameter to all MySQL dialects. Thanks
    to mu_mind for the patch here.
  id: totrans-2297
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向所有 MySQL 方言添加了“isolation_level”参数的支持。感谢 mu_mind 提供的补丁。
- en: 'References: [#2394](https://www.sqlalchemy.org/trac/ticket/2394)'
  id: totrans-2298
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2394](https://www.sqlalchemy.org/trac/ticket/2394)
- en: sqlite
  id: totrans-2299
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-2300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [错误]**'
- en: Fixed bug in C extensions whereby string format would not be applied to a Numeric
    value returned as integer; this affected primarily SQLite which does not maintain
    numeric scale settings.
  id: totrans-2301
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 C 扩展中的错误，即当作为整数返回的 Numeric 值不会应用字符串格式时出错；这主要影响了不维护数字精度设置的 SQLite。
- en: 'References: [#2432](https://www.sqlalchemy.org/trac/ticket/2432)'
  id: totrans-2302
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2432](https://www.sqlalchemy.org/trac/ticket/2432)
- en: mssql
  id: totrans-2303
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [feature]**'
  id: totrans-2304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [功能]**'
- en: Added support for MSSQL INSERT, UPDATE, and DELETE table hints, using new with_hint()
    method on UpdateBase.
  id: totrans-2305
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 MSSQL INSERT、UPDATE 和 DELETE 表提示的支持，使用 UpdateBase 上的新 with_hint() 方法。
- en: 'References: [#2430](https://www.sqlalchemy.org/trac/ticket/2430)'
  id: totrans-2306
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2430](https://www.sqlalchemy.org/trac/ticket/2430)
- en: oracle
  id: totrans-2307
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [feature]**'
  id: totrans-2308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [功能]**'
- en: Added a new create_engine() flag coerce_to_decimal=False, disables the precision
    numeric handling which can add lots of overhead by converting all numeric values
    to Decimal.
  id: totrans-2309
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的 create_engine() 标志 coerce_to_decimal=False，禁用精度数值处理，因为将所有数值转换为 Decimal
    可以增加大量开销。
- en: 'References: [#2399](https://www.sqlalchemy.org/trac/ticket/2399)'
  id: totrans-2310
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2399](https://www.sqlalchemy.org/trac/ticket/2399)
- en: '**[oracle] [bug]**'
  id: totrans-2311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [错误]**'
- en: Added missing compilation support for LONG
  id: totrans-2312
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 LONG 的编译支持的缺失。
- en: 'References: [#2401](https://www.sqlalchemy.org/trac/ticket/2401)'
  id: totrans-2313
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2401](https://www.sqlalchemy.org/trac/ticket/2401)
- en: '**[oracle] [bug]**'
  id: totrans-2314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [错误]**'
- en: Added ‘LEVEL’ to the list of reserved words for Oracle.
  id: totrans-2315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将“LEVEL”添加到 Oracle 的保留字列表中。
- en: 'References: [#2435](https://www.sqlalchemy.org/trac/ticket/2435)'
  id: totrans-2316
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2435](https://www.sqlalchemy.org/trac/ticket/2435)
- en: 0.7.5
  id: totrans-2317
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 版本：0.7.5
- en: 'Released: Sat Jan 28 2012'
  id: totrans-2318
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2012年1月28日（周六）
- en: orm
  id: totrans-2319
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-2320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Added “class_registry” argument to declarative_base(). Allows two or more declarative
    bases to share the same registry of class names.
  id: totrans-2321
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 declarative_base() 添加了“class_registry”参数。允许两个或更多声明基类共享相同的类名注册表。
- en: '**[orm] [feature]**'
  id: totrans-2322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: query.filter() accepts multiple criteria which will join via AND, i.e. query.filter(x==y,
    z>q, …)
  id: totrans-2323
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query.filter() 接受多个条件，它们将通过 AND 连接，即 query.filter(x==y, z>q, …)
- en: '**[orm] [feature]**'
  id: totrans-2324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Added new capability to relationship loader options to allow “default” loader
    strategies. Pass ‘*’ to any of joinedload(), lazyload(), subqueryload(), or noload()
    and that becomes the loader strategy used for all relationships, except for those
    explicitly stated in the Query. Thanks to up-and-coming contributor Kent Bower
    for an exhaustive and well written test suite !
  id: totrans-2325
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的功能，使关系加载器选项可以允许“默认”加载策略。将‘*’传递给 joinedload()、lazyload()、subqueryload()
    或 noload() 中的任何一个，这将成为用于所有关系的加载策略，除非在查询中明确指定了其他策略。感谢新兴贡献者 Kent Bower 提供了详尽而写得很好的测试套件！
- en: 'References: [#2351](https://www.sqlalchemy.org/trac/ticket/2351)'
  id: totrans-2326
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2351](https://www.sqlalchemy.org/trac/ticket/2351)
- en: '**[orm] [feature]**'
  id: totrans-2327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: New declarative reflection example added, illustrates how best to mix table
    reflection with declarative as well as uses some new features from.
  id: totrans-2328
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的声明式反射示例，演示了如何最好地将表反射与声明式混合使用，并使用了一些新功能。
- en: 'References: [#2356](https://www.sqlalchemy.org/trac/ticket/2356)'
  id: totrans-2329
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2356](https://www.sqlalchemy.org/trac/ticket/2356)
- en: '**[orm] [bug]**'
  id: totrans-2330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where modified session state established after a failed flush would
    be committed as part of the subsequent transaction that begins automatically after
    manual call to rollback(). The state of the session is checked within rollback(),
    and if new state is present, a warning is emitted and restore_snapshot() is called
    a second time, discarding those changes.
  id: totrans-2331
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在失败的 flush 后建立修改的会话状态会作为随后由手动调用 rollback() 后自动开始的事务的一部分提交的问题。在 rollback()
    中检查会话状态，如果存在新状态，则发出警告并第二次调用 restore_snapshot()，丢弃这些更改。
- en: 'References: [#2389](https://www.sqlalchemy.org/trac/ticket/2389)'
  id: totrans-2332
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2389](https://www.sqlalchemy.org/trac/ticket/2389)
- en: '**[orm] [bug]**'
  id: totrans-2333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression from 0.7.4 whereby using an already instrumented column from
    a superclass as “polymorphic_on” failed to resolve the underlying Column.
  id: totrans-2334
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了从 0.7.4 版本开始的回归问题，即使用超类中已经被检测的列作为“polymorphic_on”时无法解析基础列的问题。
- en: 'References: [#2345](https://www.sqlalchemy.org/trac/ticket/2345)'
  id: totrans-2335
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2345](https://www.sqlalchemy.org/trac/ticket/2345)
- en: '**[orm] [bug]**'
  id: totrans-2336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Raise an exception if xyzload_all() is used inappropriately with two non-connected
    relationships.
  id: totrans-2337
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果 xyzload_all() 与两个未连接的关系不当使用，则引发异常。
- en: 'References: [#2370](https://www.sqlalchemy.org/trac/ticket/2370)'
  id: totrans-2338
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2370](https://www.sqlalchemy.org/trac/ticket/2370)
- en: '**[orm] [bug]**'
  id: totrans-2339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug whereby event.listen(SomeClass) forced an entirely unnecessary compile
    of the mapper, making events very hard to set up at module import time (nobody
    noticed this ??)
  id: totrans-2340
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了事件监听器 event.listen(SomeClass) 强制进行完全不必要的映射器编译的 bug，使得在模块导入时设置事件非常困难（难道没有人注意到这个问题吗？）
- en: 'References: [#2367](https://www.sqlalchemy.org/trac/ticket/2367)'
  id: totrans-2341
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2367](https://www.sqlalchemy.org/trac/ticket/2367)
- en: '**[orm] [bug]**'
  id: totrans-2342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug whereby hybrid_property didn’t work as a kw arg in any(), has().
  id: totrans-2343
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 hybrid_property 作为 any()、has() 中的关键字参数时无法正常工作的 bug。
- en: '**[orm] [bug]**'
  id: totrans-2344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: ensure pickleability of all ORM exceptions for multiprocessing compatibility.
  id: totrans-2345
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保所有 ORM 异常都可以被 pickle，以实现多进程兼容性。
- en: 'References: [#2371](https://www.sqlalchemy.org/trac/ticket/2371)'
  id: totrans-2346
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2371](https://www.sqlalchemy.org/trac/ticket/2371)
- en: '**[orm] [bug]**'
  id: totrans-2347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: implemented standard “can’t set attribute” / “can’t delete attribute” AttributeError
    when setattr/delattr used on a hybrid that doesn’t define fset or fdel.
  id: totrans-2348
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 实现了标准的“无法设置属性”/“无法删除属性” AttributeError，当在混合属性上使用 setattr/delattr 时，如果没有定义 fset
    或 fdel。
- en: 'References: [#2353](https://www.sqlalchemy.org/trac/ticket/2353)'
  id: totrans-2349
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2353](https://www.sqlalchemy.org/trac/ticket/2353)
- en: '**[orm] [bug]**'
  id: totrans-2350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where unpickled object didn’t have enough of its state set up to work
    correctly within the unpickle() event established by the mutable object extension,
    if the object needed ORM attribute access within __eq__() or similar.
  id: totrans-2351
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了反序列化对象时，如果对象在 __eq__() 或类似方法中需要 ORM 属性访问，未设置足够状态以正确工作的 bug。
- en: 'References: [#2362](https://www.sqlalchemy.org/trac/ticket/2362)'
  id: totrans-2352
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2362](https://www.sqlalchemy.org/trac/ticket/2362)
- en: '**[orm] [bug]**'
  id: totrans-2353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where “merge” cascade could mis-interpret an unloaded attribute, if
    the load_on_pending flag were used with relationship(). Thanks to Kent Bower for
    tests.
  id: totrans-2354
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“合并”级联可能会错误解释未加载属性的 bug，如果在 relationship() 中使用了 load_on_pending 标志。感谢 Kent
    Bower 提供的测试。
- en: 'References: [#2374](https://www.sqlalchemy.org/trac/ticket/2374)'
  id: totrans-2355
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2374](https://www.sqlalchemy.org/trac/ticket/2374)
- en: '**[orm]**'
  id: totrans-2356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed regression from 0.6 whereby if “load_on_pending” relationship() flag were
    used where a non-“get()” lazy clause needed to be emitted on a pending object,
    it would fail to load.
  id: totrans-2357
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了从0.6版本开始的回归问题，即如果在挂起对象上需要发出非“get()”懒惰子句的“load_on_pending”relationship()标志，则加载将失败。
- en: examples
  id: totrans-2358
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples] [feature]**'
  id: totrans-2359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples] [feature]**'
- en: Simplified the versioning example a bit to use a declarative mixin as well as
    an event listener, instead of a metaclass + SessionExtension.
  id: totrans-2360
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 简化了版本示例，使用了一个声明性mixin和一个事件监听器，而不是元类+SessionExtension。
- en: 'References: [#2313](https://www.sqlalchemy.org/trac/ticket/2313)'
  id: totrans-2361
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2313](https://www.sqlalchemy.org/trac/ticket/2313)
- en: '**[examples] [bug]**'
  id: totrans-2362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples] [bug]**'
- en: Fixed large_collection.py to close the session before dropping tables.
  id: totrans-2363
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在删除表之前关闭会话的大型集合.py的问题。
- en: 'References: [#2346](https://www.sqlalchemy.org/trac/ticket/2346)'
  id: totrans-2364
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2346](https://www.sqlalchemy.org/trac/ticket/2346)
- en: engine
  id: totrans-2365
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [bug]**'
  id: totrans-2366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Added __reduce__ to StatementError, DBAPIError, column errors so that exceptions
    are pickleable, as when using multiprocessing. However, not all DBAPIs support
    this yet, such as psycopg2.
  id: totrans-2367
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为StatementError、DBAPIError、列错误添加了__reduce__，以便异常可被pickle化，例如在使用多进程时。但是，目前并非所有的DBAPI都支持这一点，比如psycopg2。
- en: 'References: [#2371](https://www.sqlalchemy.org/trac/ticket/2371)'
  id: totrans-2368
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2371](https://www.sqlalchemy.org/trac/ticket/2371)
- en: '**[engine] [bug]**'
  id: totrans-2369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Improved error messages when a non-string or invalid string is passed to any
    of the date/time processors used by SQLite, including C and Python versions.
  id: totrans-2370
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当向SQLite使用的任何日期/时间处理器传递非字符串或无效字符串时，改进了错误消息，包括C和Python版本。
- en: 'References: [#2382](https://www.sqlalchemy.org/trac/ticket/2382)'
  id: totrans-2371
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2382](https://www.sqlalchemy.org/trac/ticket/2382)
- en: '**[engine] [bug]**'
  id: totrans-2372
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed bug whereby a table-bound Column object named “<a>_<b>” which matched
    a column labeled as “<tablename>_<colname>” could match inappropriately when targeting
    in a result set row.
  id: totrans-2373
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即一个名为“<a>_<b>”的表绑定的Column对象与一个标记为“<tablename>_<colname>”的列匹配时，在定位结果集行时可能会不当匹配。
- en: 'References: [#2377](https://www.sqlalchemy.org/trac/ticket/2377)'
  id: totrans-2374
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2377](https://www.sqlalchemy.org/trac/ticket/2377)
- en: '**[engine] [bug]**'
  id: totrans-2375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed bug in “mock” strategy whereby correct DDL visit method wasn’t called,
    resulting in “CREATE/DROP SEQUENCE” statements being duplicated
  id: totrans-2376
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“mock”策略中未调用正确DDL访问方法的bug，导致“CREATE/DROP SEQUENCE”语句重复。
- en: 'References: [#2384](https://www.sqlalchemy.org/trac/ticket/2384)'
  id: totrans-2377
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2384](https://www.sqlalchemy.org/trac/ticket/2384)
- en: sql
  id: totrans-2378
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-2379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: New reflection feature “autoload_replace”; when set to False on Table, the Table
    can be autoloaded without existing columns being replaced. Allows more flexible
    chains of Table construction/reflection to be constructed, including that it helps
    with combining Declarative with table reflection. See the new example on the wiki.
  id: totrans-2380
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新的反射功能“autoload_replace”；当在Table上设置为False时，可以在不替换现有列的情况下自动加载Table。允许构建更灵活的Table构建/反射链，包括它有助于将声明性与表反射结合起来。请参阅维基上的新示例。
- en: 'References: [#2356](https://www.sqlalchemy.org/trac/ticket/2356)'
  id: totrans-2381
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2356](https://www.sqlalchemy.org/trac/ticket/2356)
- en: '**[sql] [feature]**'
  id: totrans-2382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added “false()” and “true()” expression constructs to sqlalchemy.sql namespace,
    though not part of __all__ as of yet.
  id: totrans-2383
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在sqlalchemy.sql命名空间中添加了“false()”和“true()”表达式构造，尽管目前还不是__all__的一部分。
- en: '**[sql] [feature]**'
  id: totrans-2384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Dialect-specific compilers now raise CompileError for all type/statement compilation
    issues, instead of InvalidRequestError or ArgumentError. The DDL for CREATE TABLE
    will re-raise CompileError to include table/column information for the problematic
    column.
  id: totrans-2385
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 特定方言的编译器现在对所有类型/语句编译问题引发CompileError，而不是InvalidRequestError或ArgumentError。对于CREATE
    TABLE的DDL，将重新引发CompileError以包含有问题的列的表/列信息。
- en: 'References: [#2361](https://www.sqlalchemy.org/trac/ticket/2361)'
  id: totrans-2386
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2361](https://www.sqlalchemy.org/trac/ticket/2361)
- en: '**[sql] [bug]**'
  id: totrans-2387
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Improved the API for add_column() such that if the same column is added to its
    own table, an error is not raised and the constraints don’t get doubled up. Also
    helps with some reflection/declarative patterns.
  id: totrans-2388
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了add_column()的API，如果将相同的列添加到其自己的表中，则不会引发错误，并且约束不会加倍。还有助于一些反射/声明性模式。
- en: 'References: [#2356](https://www.sqlalchemy.org/trac/ticket/2356)'
  id: totrans-2389
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2356](https://www.sqlalchemy.org/trac/ticket/2356)
- en: '**[sql] [bug]**'
  id: totrans-2390
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where the “required” exception would not be raised for bindparam()
    with required=True, if the statement were given no parameters at all.
  id: totrans-2391
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了如果给bindparam()传递required=True，但语句没有任何参数，则不会引发“required”异常的问题。
- en: 'References: [#2381](https://www.sqlalchemy.org/trac/ticket/2381)'
  id: totrans-2392
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2381](https://www.sqlalchemy.org/trac/ticket/2381)
- en: mysql
  id: totrans-2393
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-2394
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: fixed regexp that filters out warnings for non-reflected “PARTITION” directives,
    thanks to George Reilly
  id: totrans-2395
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了过滤掉非反射“PARTITION”指令警告的正则表达式，感谢George Reilly
- en: 'References: [#2376](https://www.sqlalchemy.org/trac/ticket/2376)'
  id: totrans-2396
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2376](https://www.sqlalchemy.org/trac/ticket/2376)
- en: sqlite
  id: totrans-2397
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-2398
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: the “name” of an FK constraint in SQLite is reflected as “None”, not “0” or
    other integer value. SQLite does not appear to support constraint naming in any
    case.
  id: totrans-2399
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在SQLite中，FK约束的“name”反映为“None”，而不是“0”或其他整数值。在任何情况下，SQLite似乎都不支持约束命名。
- en: 'References: [#2364](https://www.sqlalchemy.org/trac/ticket/2364)'
  id: totrans-2400
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2364](https://www.sqlalchemy.org/trac/ticket/2364)
- en: '**[sqlite] [bug]**'
  id: totrans-2401
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: sql.false() and sql.true() compile to 0 and 1, respectively in sqlite
  id: totrans-2402
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: sql.false()和sql.true()在sqlite中分别编译为0和1
- en: 'References: [#2368](https://www.sqlalchemy.org/trac/ticket/2368)'
  id: totrans-2403
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2368](https://www.sqlalchemy.org/trac/ticket/2368)
- en: '**[sqlite] [bug]**'
  id: totrans-2404
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: removed an erroneous “raise” in the SQLite dialect when getting table names
    and view names, where logic is in place to fall back to an older version of SQLite
    that doesn’t have the “sqlite_temp_master” table.
  id: totrans-2405
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在SQLite方言中，当获取表名和视图名时，删除了一个错误的“raise”，在那里逻辑是回退到一个没有“sqlite_temp_master”表的旧版本的SQLite。
- en: mssql
  id: totrans-2406
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-2407
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Adjusted the regexp used in the mssql.TIME type to ensure only six digits are
    received for the “microseconds” portion of the value, which is expected by Python’s
    datetime.time(). Note that support for sending microseconds doesn’t seem to be
    possible yet with pyodbc at least.
  id: totrans-2408
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了在mssql.TIME类型中使用的正则表达式，以确保仅接收值的“微秒”部分为六位数，这是Python的datetime.time()所期望的。请注意，目前似乎无法使用pyodbc发送微秒。
- en: 'References: [#2340](https://www.sqlalchemy.org/trac/ticket/2340)'
  id: totrans-2409
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2340](https://www.sqlalchemy.org/trac/ticket/2340)
- en: '**[mssql] [bug]**'
  id: totrans-2410
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Dropped the “30 char” limit on pymssql, based on reports that it’s doing things
    better these days. pymssql hasn’t been well tested and as the DBAPI is in flux
    it’s still not clear what the status is on this driver and how SQLAlchemy’s implementation
    should adapt.
  id: totrans-2411
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 根据报告，基于pymssql的“30 char”限制已被取消，因为它现在做得更好。pymssql尚未经过充分测试，由于DBAPI仍在变化中，目前还不清楚此驱动程��的状态以及SQLAlchemy的实现应如何调整。
- en: 'References: [#2347](https://www.sqlalchemy.org/trac/ticket/2347)'
  id: totrans-2412
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2347](https://www.sqlalchemy.org/trac/ticket/2347)
- en: oracle
  id: totrans-2413
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-2414
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Added ORA-03135 to the never ending list of oracle “connection lost” errors
  id: totrans-2415
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将ORA-03135添加到永无止境的oracle“连接丢失”错误列表中
- en: 'References: [#2388](https://www.sqlalchemy.org/trac/ticket/2388)'
  id: totrans-2416
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2388](https://www.sqlalchemy.org/trac/ticket/2388)
- en: misc
  id: totrans-2417
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[bug] [core]**'
  id: totrans-2418
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [core]**'
- en: Changed LRUCache, used by the mapper to cache INSERT/UPDATE/DELETE statements,
    to use an incrementing counter instead of a timestamp to track entries, for greater
    reliability versus using time.time(), which can cause test failures on some platforms.
  id: totrans-2419
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更改了由映射器使用的LRUCache，用于缓存INSERT/UPDATE/DELETE语句，以使用递增计数器而不是时间戳来跟踪条目，以提高可靠性，而不是使用time.time()，这可能会导致某些平台上的测试失败。
- en: 'References: [#2379](https://www.sqlalchemy.org/trac/ticket/2379)'
  id: totrans-2420
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2379](https://www.sqlalchemy.org/trac/ticket/2379)
- en: '**[bug] [core]**'
  id: totrans-2421
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [core]**'
- en: Added a boolean check for the “finalize” function within the pool connection
    proxy’s weakref callback before calling it, so that a warning isn’t emitted that
    this function is None when the application is exiting and gc has removed the function
    from the module before the weakref callback was invoked.
  id: totrans-2422
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在调用池连接代理的弱引用回调之前，添加了对“finalize”函数的布尔检查，以避免在应用程序退出时和gc在调用弱引用回调之前从模块中删除函数时发出警告，此函数为None。
- en: 'References: [#2383](https://www.sqlalchemy.org/trac/ticket/2383)'
  id: totrans-2423
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2383](https://www.sqlalchemy.org/trac/ticket/2383)
- en: '**[bug] [py3k]**'
  id: totrans-2424
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [py3k]**'
- en: Fixed inappropriate usage of util.py3k flag and renamed it to util.py3k_warning,
    since this flag is intended to detect the -3 flag series of import restrictions
    only.
  id: totrans-2425
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了对util.py3k标志的不当使用，并将其重命名为util.py3k_warning，因为此标志仅用于检测导入限制系列“-3”标志。
- en: 'References: [#2348](https://www.sqlalchemy.org/trac/ticket/2348)'
  id: totrans-2426
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2348](https://www.sqlalchemy.org/trac/ticket/2348)
- en: orm
  id: totrans-2427
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-2428
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added “class_registry” argument to declarative_base(). Allows two or more declarative
    bases to share the same registry of class names.
  id: totrans-2429
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在declarative_base()中添加了“class_registry”参数。允许两个或更多声明基类共享相同的类名注册表。
- en: '**[orm] [feature]**'
  id: totrans-2430
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: query.filter() accepts multiple criteria which will join via AND, i.e. query.filter(x==y,
    z>q, …)
  id: totrans-2431
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query.filter()接受多个标准，这些标准将通过AND连接，即query.filter(x==y, z>q, …)
- en: '**[orm] [feature]**'
  id: totrans-2432
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new capability to relationship loader options to allow “default” loader
    strategies. Pass ‘*’ to any of joinedload(), lazyload(), subqueryload(), or noload()
    and that becomes the loader strategy used for all relationships, except for those
    explicitly stated in the Query. Thanks to up-and-coming contributor Kent Bower
    for an exhaustive and well written test suite !
  id: totrans-2433
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了关系加载器选项的新功能，允许“默认”加载策略。将‘*’传递给joinedload()、lazyload()、subqueryload()或noload()中的任何一个，这将成为用于所有关系的加载策略，除了在查询中明确指定的那些关系之外。感谢新兴的贡献者Kent
    Bower为详尽而逻辑清晰的测试套件！
- en: 'References: [#2351](https://www.sqlalchemy.org/trac/ticket/2351)'
  id: totrans-2434
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2351](https://www.sqlalchemy.org/trac/ticket/2351)
- en: '**[orm] [feature]**'
  id: totrans-2435
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: New declarative reflection example added, illustrates how best to mix table
    reflection with declarative as well as uses some new features from.
  id: totrans-2436
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的声明式反射示例，说明了如何最好地将表反射与声明式混合使用，并使用了一些新功能。
- en: 'References: [#2356](https://www.sqlalchemy.org/trac/ticket/2356)'
  id: totrans-2437
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2356](https://www.sqlalchemy.org/trac/ticket/2356)
- en: '**[orm] [bug]**'
  id: totrans-2438
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where modified session state established after a failed flush would
    be committed as part of the subsequent transaction that begins automatically after
    manual call to rollback(). The state of the session is checked within rollback(),
    and if new state is present, a warning is emitted and restore_snapshot() is called
    a second time, discarding those changes.
  id: totrans-2439
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在失败的flush之后建立的修改会作为随后由手动调用rollback()自动开始的事务的一部分提交的问题。在rollback()内部检查会话的状态，如果存在新状态，则发出警告并第二次调用restore_snapshot()，丢弃这些更改。
- en: 'References: [#2389](https://www.sqlalchemy.org/trac/ticket/2389)'
  id: totrans-2440
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2389](https://www.sqlalchemy.org/trac/ticket/2389)
- en: '**[orm] [bug]**'
  id: totrans-2441
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression from 0.7.4 whereby using an already instrumented column from
    a superclass as “polymorphic_on” failed to resolve the underlying Column.
  id: totrans-2442
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了从0.7.4开始的回归，即使用已经被超类作为“polymorphic_on”的列失败地解析了底层列的问题。
- en: 'References: [#2345](https://www.sqlalchemy.org/trac/ticket/2345)'
  id: totrans-2443
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2345](https://www.sqlalchemy.org/trac/ticket/2345)
- en: '**[orm] [bug]**'
  id: totrans-2444
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Raise an exception if xyzload_all() is used inappropriately with two non-connected
    relationships.
  id: totrans-2445
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果xyzload_all()与两个未连接的关系不合适地使用，则引发异常。
- en: 'References: [#2370](https://www.sqlalchemy.org/trac/ticket/2370)'
  id: totrans-2446
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2370](https://www.sqlalchemy.org/trac/ticket/2370)
- en: '**[orm] [bug]**'
  id: totrans-2447
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug whereby event.listen(SomeClass) forced an entirely unnecessary compile
    of the mapper, making events very hard to set up at module import time (nobody
    noticed this ??)
  id: totrans-2448
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了事件监听（event.listen(SomeClass)）强制进行了完全不必要的映射器编译的错误，导致在模块导入时设置事件非常困难（竟然没有人注意到这个问题？？）
- en: 'References: [#2367](https://www.sqlalchemy.org/trac/ticket/2367)'
  id: totrans-2449
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2367](https://www.sqlalchemy.org/trac/ticket/2367)
- en: '**[orm] [bug]**'
  id: totrans-2450
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug whereby hybrid_property didn’t work as a kw arg in any(), has().
  id: totrans-2451
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了hybrid_property在any()、has()中无法作为关键字参数工作的错误。
- en: '**[orm] [bug]**'
  id: totrans-2452
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: ensure pickleability of all ORM exceptions for multiprocessing compatibility.
  id: totrans-2453
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保所有ORM异常都可以被pickle，以实现多处理兼容性。
- en: 'References: [#2371](https://www.sqlalchemy.org/trac/ticket/2371)'
  id: totrans-2454
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2371](https://www.sqlalchemy.org/trac/ticket/2371)
- en: '**[orm] [bug]**'
  id: totrans-2455
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: implemented standard “can’t set attribute” / “can’t delete attribute” AttributeError
    when setattr/delattr used on a hybrid that doesn’t define fset or fdel.
  id: totrans-2456
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 实现了在混合类型没有定义fset或fdel时，使用setattr/delattr设置或删除混合类型属性时引发标准“无法设置属性”/“无法删除属性”AttributeError。
- en: 'References: [#2353](https://www.sqlalchemy.org/trac/ticket/2353)'
  id: totrans-2457
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2353](https://www.sqlalchemy.org/trac/ticket/2353)
- en: '**[orm] [bug]**'
  id: totrans-2458
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where unpickled object didn’t have enough of its state set up to work
    correctly within the unpickle() event established by the mutable object extension,
    if the object needed ORM attribute access within __eq__() or similar.
  id: totrans-2459
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了无法正确设置未反pickle对象的状态的错误，在__eq__()或类似方法中需要ORM属性访问时，这些对象需要在可变对象扩展中建立的unpickle()事件内正确工作。
- en: 'References: [#2362](https://www.sqlalchemy.org/trac/ticket/2362)'
  id: totrans-2460
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2362](https://www.sqlalchemy.org/trac/ticket/2362)
- en: '**[orm] [bug]**'
  id: totrans-2461
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where “merge” cascade could mis-interpret an unloaded attribute, if
    the load_on_pending flag were used with relationship(). Thanks to Kent Bower for
    tests.
  id: totrans-2462
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“merge”级联可能错误解释未加载属性的错误，如果使用relationship()的load_on_pending标志。感谢Kent Bower提供的测试。
- en: 'References: [#2374](https://www.sqlalchemy.org/trac/ticket/2374)'
  id: totrans-2463
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2374](https://www.sqlalchemy.org/trac/ticket/2374)
- en: '**[orm]**'
  id: totrans-2464
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed regression from 0.6 whereby if “load_on_pending” relationship() flag were
    used where a non-“get()” lazy clause needed to be emitted on a pending object,
    it would fail to load.
  id: totrans-2465
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了从0.6版本中的回归，即如果在挂起对象上需要发出非“get()”延迟子句的“load_on_pending”relationship()标志被使用，它将无法加载。
- en: examples
  id: totrans-2466
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 例子
- en: '**[examples] [feature]**'
  id: totrans-2467
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[例子] [feature]**'
- en: Simplified the versioning example a bit to use a declarative mixin as well as
    an event listener, instead of a metaclass + SessionExtension.
  id: totrans-2468
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 简化了版本示例，使用了一个声明性的mixin和一个事件监听器，而不是一个元类+SessionExtension。
- en: 'References: [#2313](https://www.sqlalchemy.org/trac/ticket/2313)'
  id: totrans-2469
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2313](https://www.sqlalchemy.org/trac/ticket/2313)
- en: '**[examples] [bug]**'
  id: totrans-2470
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[例子] [bug]**'
- en: Fixed large_collection.py to close the session before dropping tables.
  id: totrans-2471
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了large_collection.py在删除表之前关闭会话的bug。
- en: 'References: [#2346](https://www.sqlalchemy.org/trac/ticket/2346)'
  id: totrans-2472
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2346](https://www.sqlalchemy.org/trac/ticket/2346)
- en: engine
  id: totrans-2473
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-2474
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Added __reduce__ to StatementError, DBAPIError, column errors so that exceptions
    are pickleable, as when using multiprocessing. However, not all DBAPIs support
    this yet, such as psycopg2.
  id: totrans-2475
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为StatementError、DBAPIError、列错误添加了__reduce__，以便异常可被pickle化，例如在使用多进程时。但是，目前并非所有DBAPI都支持这一点，比如psycopg2。
- en: 'References: [#2371](https://www.sqlalchemy.org/trac/ticket/2371)'
  id: totrans-2476
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2371](https://www.sqlalchemy.org/trac/ticket/2371)
- en: '**[engine] [bug]**'
  id: totrans-2477
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Improved error messages when a non-string or invalid string is passed to any
    of the date/time processors used by SQLite, including C and Python versions.
  id: totrans-2478
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当传递给SQLite的任何日期/时间处理器的非字符串或无效字符串时，改进了错误消息，包括C和Python版本。
- en: 'References: [#2382](https://www.sqlalchemy.org/trac/ticket/2382)'
  id: totrans-2479
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2382](https://www.sqlalchemy.org/trac/ticket/2382)
- en: '**[engine] [bug]**'
  id: totrans-2480
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed bug whereby a table-bound Column object named “<a>_<b>” which matched
    a column labeled as “<tablename>_<colname>” could match inappropriately when targeting
    in a result set row.
  id: totrans-2481
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即一个绑定到表的Column对象命名为“<a>_<b>”，与标记为“<tablename>_<colname>”的列匹配时，可能在目标结果集行中不恰当地匹配。
- en: 'References: [#2377](https://www.sqlalchemy.org/trac/ticket/2377)'
  id: totrans-2482
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2377](https://www.sqlalchemy.org/trac/ticket/2377)
- en: '**[engine] [bug]**'
  id: totrans-2483
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed bug in “mock” strategy whereby correct DDL visit method wasn’t called,
    resulting in “CREATE/DROP SEQUENCE” statements being duplicated
  id: totrans-2484
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“模拟”策略中的错误，其中正确的DDL访问方法未被调用，导致“CREATE/DROP SEQUENCE”语句被重复。
- en: 'References: [#2384](https://www.sqlalchemy.org/trac/ticket/2384)'
  id: totrans-2485
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2384](https://www.sqlalchemy.org/trac/ticket/2384)
- en: sql
  id: totrans-2486
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-2487
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: New reflection feature “autoload_replace”; when set to False on Table, the Table
    can be autoloaded without existing columns being replaced. Allows more flexible
    chains of Table construction/reflection to be constructed, including that it helps
    with combining Declarative with table reflection. See the new example on the wiki.
  id: totrans-2488
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新的反射功能“autoload_replace”；当在Table上设置为False时，可以自动加载Table而不替换现有列。允许构建更灵活的Table构建/反射���，包括它有助于将声明性与表反射结合起来。请参阅维基上的新示例。
- en: 'References: [#2356](https://www.sqlalchemy.org/trac/ticket/2356)'
  id: totrans-2489
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2356](https://www.sqlalchemy.org/trac/ticket/2356)
- en: '**[sql] [feature]**'
  id: totrans-2490
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added “false()” and “true()” expression constructs to sqlalchemy.sql namespace,
    though not part of __all__ as of yet.
  id: totrans-2491
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在sqlalchemy.sql命名空间中添加了“false()”和“true()”表达式构造，尽管目前还不是__all__的一部分。
- en: '**[sql] [feature]**'
  id: totrans-2492
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Dialect-specific compilers now raise CompileError for all type/statement compilation
    issues, instead of InvalidRequestError or ArgumentError. The DDL for CREATE TABLE
    will re-raise CompileError to include table/column information for the problematic
    column.
  id: totrans-2493
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 特定方言的编译器现在对所有类型/语句编译问题引发CompileError，而不是InvalidRequestError或ArgumentError。对于CREATE
    TABLE的DDL，将重新引发CompileError以包含有问题的列的表/列信息。
- en: 'References: [#2361](https://www.sqlalchemy.org/trac/ticket/2361)'
  id: totrans-2494
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2361](https://www.sqlalchemy.org/trac/ticket/2361)
- en: '**[sql] [bug]**'
  id: totrans-2495
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Improved the API for add_column() such that if the same column is added to its
    own table, an error is not raised and the constraints don’t get doubled up. Also
    helps with some reflection/declarative patterns.
  id: totrans-2496
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了add_column()的API，如果将相同的列添加到其自身的表中，不会引发错误，约束也不会重复。还有助于一些反射/声明性模式。
- en: 'References: [#2356](https://www.sqlalchemy.org/trac/ticket/2356)'
  id: totrans-2497
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2356](https://www.sqlalchemy.org/trac/ticket/2356)
- en: '**[sql] [bug]**'
  id: totrans-2498
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where the “required” exception would not be raised for bindparam()
    with required=True, if the statement were given no parameters at all.
  id: totrans-2499
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“required”异常不会对bindparam()使用required=True时引发，如果语句根本没有给出参数。
- en: 'References: [#2381](https://www.sqlalchemy.org/trac/ticket/2381)'
  id: totrans-2500
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2381](https://www.sqlalchemy.org/trac/ticket/2381)
- en: mysql
  id: totrans-2501
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-2502
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: fixed regexp that filters out warnings for non-reflected “PARTITION” directives,
    thanks to George Reilly
  id: totrans-2503
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了过滤��非反射“PARTITION”指令警告的正则表达式，感谢George Reilly
- en: 'References: [#2376](https://www.sqlalchemy.org/trac/ticket/2376)'
  id: totrans-2504
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2376](https://www.sqlalchemy.org/trac/ticket/2376)
- en: sqlite
  id: totrans-2505
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-2506
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: the “name” of an FK constraint in SQLite is reflected as “None”, not “0” or
    other integer value. SQLite does not appear to support constraint naming in any
    case.
  id: totrans-2507
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在SQLite中，外键约束的“name”反映为“None”，而不是“0”或其他整数值。在任何情况下，SQLite似乎都不支持约束命名。
- en: 'References: [#2364](https://www.sqlalchemy.org/trac/ticket/2364)'
  id: totrans-2508
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2364](https://www.sqlalchemy.org/trac/ticket/2364)
- en: '**[sqlite] [bug]**'
  id: totrans-2509
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: sql.false() and sql.true() compile to 0 and 1, respectively in sqlite
  id: totrans-2510
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在sqlite中，sql.false()和sql.true()分别编译为0和1。
- en: 'References: [#2368](https://www.sqlalchemy.org/trac/ticket/2368)'
  id: totrans-2511
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2368](https://www.sqlalchemy.org/trac/ticket/2368)
- en: '**[sqlite] [bug]**'
  id: totrans-2512
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: removed an erroneous “raise” in the SQLite dialect when getting table names
    and view names, where logic is in place to fall back to an older version of SQLite
    that doesn’t have the “sqlite_temp_master” table.
  id: totrans-2513
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在SQLite方言中，当获取表名和视图名时，删除了一个错误的“raise”，在那里逻辑已经设置好，以便回退到一个没有“sqlite_temp_master”表的旧版本的SQLite。
- en: mssql
  id: totrans-2514
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-2515
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Adjusted the regexp used in the mssql.TIME type to ensure only six digits are
    received for the “microseconds” portion of the value, which is expected by Python’s
    datetime.time(). Note that support for sending microseconds doesn’t seem to be
    possible yet with pyodbc at least.
  id: totrans-2516
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了mssql.TIME类型中使用的正则表达式，以确保仅接收“microseconds”部分的六位数字，这是Python的datetime.time()所期望的。请注意，目前似乎无法使用pyodbc发送微秒。
- en: 'References: [#2340](https://www.sqlalchemy.org/trac/ticket/2340)'
  id: totrans-2517
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2340](https://www.sqlalchemy.org/trac/ticket/2340)
- en: '**[mssql] [bug]**'
  id: totrans-2518
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Dropped the “30 char” limit on pymssql, based on reports that it’s doing things
    better these days. pymssql hasn’t been well tested and as the DBAPI is in flux
    it’s still not clear what the status is on this driver and how SQLAlchemy’s implementation
    should adapt.
  id: totrans-2519
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: pymssql上的“30 char”限制已被取消，根据报告称现在的情况更好。由于pymssql没有经过充分测试，而且DBAPI仍在变化中，目前还不清楚该驱动程序的状态以及SQLAlchemy的实现应该如何调整。
- en: 'References: [#2347](https://www.sqlalchemy.org/trac/ticket/2347)'
  id: totrans-2520
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2347](https://www.sqlalchemy.org/trac/ticket/2347)
- en: oracle
  id: totrans-2521
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-2522
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Added ORA-03135 to the never ending list of oracle “connection lost” errors
  id: totrans-2523
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将ORA-03135添加到永无止境的Oracle“连接丢失”错误列表中
- en: 'References: [#2388](https://www.sqlalchemy.org/trac/ticket/2388)'
  id: totrans-2524
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2388](https://www.sqlalchemy.org/trac/ticket/2388)
- en: misc
  id: totrans-2525
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [core]**'
  id: totrans-2526
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [core]**'
- en: Changed LRUCache, used by the mapper to cache INSERT/UPDATE/DELETE statements,
    to use an incrementing counter instead of a timestamp to track entries, for greater
    reliability versus using time.time(), which can cause test failures on some platforms.
  id: totrans-2527
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将用于缓存INSERT/UPDATE/DELETE语句的映射器的LRUCache更改为使用递增计数器而不是时间戳来跟踪条目，以提高可靠性，而不是使用time.time()，后者可能会导致某些平台上的测试失败。
- en: 'References: [#2379](https://www.sqlalchemy.org/trac/ticket/2379)'
  id: totrans-2528
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2379](https://www.sqlalchemy.org/trac/ticket/2379)
- en: '**[bug] [core]**'
  id: totrans-2529
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [core]**'
- en: Added a boolean check for the “finalize” function within the pool connection
    proxy’s weakref callback before calling it, so that a warning isn’t emitted that
    this function is None when the application is exiting and gc has removed the function
    from the module before the weakref callback was invoked.
  id: totrans-2530
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在调用池连接代理的弱引用回调之前，添加了对“finalize”函数的布尔检查，以避免在应用程序退出时发出警告，即当应用程序退出时，gc已将该函数从模块中删除，而弱引用回调尚未被调用。
- en: 'References: [#2383](https://www.sqlalchemy.org/trac/ticket/2383)'
  id: totrans-2531
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2383](https://www.sqlalchemy.org/trac/ticket/2383)
- en: '**[bug] [py3k]**'
  id: totrans-2532
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [py3k]**'
- en: Fixed inappropriate usage of util.py3k flag and renamed it to util.py3k_warning,
    since this flag is intended to detect the -3 flag series of import restrictions
    only.
  id: totrans-2533
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了util.py3k标志的不当使用，并将其重命名为util.py3k_warning，因为该标志仅用于检测导入限制系列“-3”标志。
- en: 'References: [#2348](https://www.sqlalchemy.org/trac/ticket/2348)'
  id: totrans-2534
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2348](https://www.sqlalchemy.org/trac/ticket/2348)
- en: 0.7.4
  id: totrans-2535
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.7.4
- en: 'Released: Fri Dec 09 2011'
  id: totrans-2536
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2011年12月09日
- en: orm
  id: totrans-2537
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-2538
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: 'polymorphic_on now accepts many new kinds of values:'
  id: totrans-2539
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: polymorphic_on现在接受许多新类型的值：
- en: standalone expressions that aren’t otherwise mapped
  id: totrans-2540
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未映射的独立表达式
- en: ''
  id: totrans-2541
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-2542
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: column_property() objects
  id: totrans-2543
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: column_property()对象
- en: ''
  id: totrans-2544
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-2545
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: string names of any column_property() or attribute name of a mapped Column
  id: totrans-2546
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何 column_property() 的字符串名称或映射列的属性名称
- en: The docs include an example using the case() construct, which is likely to be
    a common constructed used here. and part of
  id: totrans-2547
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 文档包含了一个使用 case() 构造的示例，这很可能是一个常见的构造。以及部分
- en: Standalone expressions in polymorphic_on propagate to single-table inheritance
    subclasses so that they are used in the WHERE /JOIN clause to limit rows to that
    subclass as is the usual behavior.
  id: totrans-2548
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 多态_on 中的独立表达式会传播到单表继承的子类中，以便它们被用于 WHERE / JOIN 子句来限制行为该子类的行为，这是通常的行为。
- en: 'References: [#2238](https://www.sqlalchemy.org/trac/ticket/2238), [#2345](https://www.sqlalchemy.org/trac/ticket/2345)'
  id: totrans-2549
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2238](https://www.sqlalchemy.org/trac/ticket/2238)，[#2345](https://www.sqlalchemy.org/trac/ticket/2345)
- en: '**[orm] [feature]**'
  id: totrans-2550
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: IdentitySet supports the - operator as the same as difference(), handy when
    dealing with Session.dirty etc.
  id: totrans-2551
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: IdentitySet 支持 `-` 运算符，与 `difference()` 相同，处理 Session.dirty 等情况时非常方便。
- en: 'References: [#2301](https://www.sqlalchemy.org/trac/ticket/2301)'
  id: totrans-2552
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2301](https://www.sqlalchemy.org/trac/ticket/2301)
- en: '**[orm] [feature]**'
  id: totrans-2553
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new value for Column autoincrement called “ignore_fk”, can be used to
    force autoincrement on a column that’s still part of a ForeignKeyConstraint. New
    example in the relationship docs illustrates its use.
  id: totrans-2554
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 Column autoincrement 的新值称为 “ignore_fk”，可用于强制对仍然是 ForeignKeyConstraint 一部分的列进行自增。关系文档中的新示例说明了其用法。
- en: '**[orm] [bug]**'
  id: totrans-2555
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed backref behavior when “popping” the value off of a many-to-one in response
    to a removal from a stale one-to-many - the operation is skipped, since the many-to-one
    has since been updated.
  id: totrans-2556
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在从陈旧的一对多中删除时，从多对一中“弹出”值时的反向引用行为 - 该操作被跳过，因为多对一已经被更新。
- en: 'References: [#2315](https://www.sqlalchemy.org/trac/ticket/2315)'
  id: totrans-2557
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2315](https://www.sqlalchemy.org/trac/ticket/2315)
- en: '**[orm] [bug]**'
  id: totrans-2558
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: After some years of not doing this, added more granularity to the “is X a parent
    of Y” functionality, which is used when determining if the FK on “Y” needs to
    be “nulled out” as well as if “Y” should be deleted with delete-orphan cascade.
    The test now takes into account the Python identity of the parent as well its
    identity key, to see if the last known parent of Y is definitely X. If a decision
    can’t be made, a StaleDataError is raised. The conditions where this error is
    raised are fairly rare, requiring that the previous parent was garbage collected,
    and previously could very well inappropriately update/delete a record that’s since
    moved onto a new parent, though there may be some cases where “silent success”
    occurred previously that will now raise in the face of ambiguity. Expiring “Y”
    resets the “parent” tracker, meaning X.remove(Y) could then end up deleting Y
    even if X is stale, but this is the same behavior as before; it’s advised to expire
    X also in that case.
  id: totrans-2559
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 几年后重新进行此操作，对“X 是否为 Y 的父级”功能添加了更多细粒度，这在确定是否需要将“Y”的 FK “null”掉以及是否应该使用 delete-orphan
    级联删除时使用。测试现在考虑到了父级的 Python 标识以及其标识键，以查看 Y 的最后已知父级是否确实为 X。如果无法做出决定，则会引发 StaleDataError。引发此错误的条件非常罕见，要求以前的父级已被垃圾回收，并且以前可能会不恰当地更新/删除已经移至新父级的记录，尽管以前可能存在一些“静默成功”的情况，但现在在面对不确定性时可能会引发。到期的
    “Y” 会重置 “父级” 跟踪器，这意味着 X.remove(Y) 可能会删除 Y，即使 X 已经过期，但这与以前的行为相同；在这种情况下也建议过期 X。
- en: 'References: [#2264](https://www.sqlalchemy.org/trac/ticket/2264)'
  id: totrans-2560
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2264](https://www.sqlalchemy.org/trac/ticket/2264)
- en: '**[orm] [bug]**'
  id: totrans-2561
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: fixed inappropriate evaluation of user-mapped object in a boolean context within
    query.get(). Also in 0.6.9.
  id: totrans-2562
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在查询.get() 中对用户映射对象进行布尔上下文中的不适当评估。同时也在 0.6.9 版本中。
- en: 'References: [#2310](https://www.sqlalchemy.org/trac/ticket/2310)'
  id: totrans-2563
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2310](https://www.sqlalchemy.org/trac/ticket/2310)
- en: '**[orm] [bug]**'
  id: totrans-2564
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Added missing comma to PASSIVE_RETURN_NEVER_SET symbol
  id: totrans-2565
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对 PASSIVE_RETURN_NEVER_SET 符号添加了缺失的逗号。
- en: 'References: [#2304](https://www.sqlalchemy.org/trac/ticket/2304)'
  id: totrans-2566
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2304](https://www.sqlalchemy.org/trac/ticket/2304)
- en: '**[orm] [bug]**'
  id: totrans-2567
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Cls.column.collate(“some collation”) now works. Also in 0.6.9
  id: totrans-2568
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Cls.column.collate(“some collation”) 现在可以工作。同时也在 0.6.9 版本中。
- en: 'References: [#1776](https://www.sqlalchemy.org/trac/ticket/1776)'
  id: totrans-2569
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1776](https://www.sqlalchemy.org/trac/ticket/1776)
- en: '**[orm] [bug]**'
  id: totrans-2570
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: the value of a composite attribute is now expired after an insert or update
    operation, instead of regenerated in place. This ensures that a column value which
    is expired within a flush will be loaded first, before the composite is regenerated
    using that value.
  id: totrans-2571
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 组合属性的值现在在插入或更新操作后会过期，而不是在原地重新生成。这确保了在刷新时过期的列值将首先被加载，然后再使用该值重新生成组合属性。
- en: 'References: [#2309](https://www.sqlalchemy.org/trac/ticket/2309)'
  id: totrans-2572
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2309](https://www.sqlalchemy.org/trac/ticket/2309)
- en: '**[orm] [bug]**'
  id: totrans-2573
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The fix in also emits the “refresh” event when the composite value is loaded
    on access, even if all column values were already present, as is appropriate.
    This fixes the “mutable” extension which relies upon the “load” event to ensure
    the _parents dictionary is up to date, fixes. Thanks to Scott Torborg for the
    test case here.
  id: totrans-2574
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当在访问时加载组合值时，即使所有列值已经存在，也会触发“refresh”事件的问题，这是适当的。这修复了依赖于“load”事件确保_parents字典是最新的“mutable”扩展，修复了的问题。感谢Scott
    Torborg在这里提供的测试用例。
- en: 'References: [#2308](https://www.sqlalchemy.org/trac/ticket/2308), [#2309](https://www.sqlalchemy.org/trac/ticket/2309)'
  id: totrans-2575
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2308](https://www.sqlalchemy.org/trac/ticket/2308), [#2309](https://www.sqlalchemy.org/trac/ticket/2309)
- en: '**[orm] [bug]**'
  id: totrans-2576
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug whereby a subclass of a subclass using concrete inheritance in conjunction
    with the new ConcreteBase or AbstractConcreteBase would fail to apply the subclasses
    deeper than one level to the “polymorphic loader” of each base
  id: totrans-2577
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即当一个子类使用具体继承与新的ConcreteBase或AbstractConcreteBase时，无法将深于一级的子类应用于每个基类的“多态加载器”。
- en: 'References: [#2312](https://www.sqlalchemy.org/trac/ticket/2312)'
  id: totrans-2578
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2312](https://www.sqlalchemy.org/trac/ticket/2312)
- en: '**[orm] [bug]**'
  id: totrans-2579
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug whereby a subclass of a subclass using the new AbstractConcreteBase
    would fail to acquire the correct “base_mapper” attribute when the “base” mapper
    was generated, thereby causing failures later on.
  id: totrans-2580
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即当一个子类使用新的AbstractConcreteBase时，其子类无法在生成“base”映射器时获取正确的“base_mapper”属性，从而导致后续失败。
- en: 'References: [#2312](https://www.sqlalchemy.org/trac/ticket/2312)'
  id: totrans-2581
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2312](https://www.sqlalchemy.org/trac/ticket/2312)
- en: '**[orm] [bug]**'
  id: totrans-2582
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug whereby column_property() created against ORM-level column could be
    treated as a distinct entity when producing certain kinds of joined-inh joins.
  id: totrans-2583
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当针对ORM级别的列创建column_property()时，在生成某些类型的joined-inh连接时可能会将其视为不同的实体的bug。
- en: 'References: [#2316](https://www.sqlalchemy.org/trac/ticket/2316)'
  id: totrans-2584
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2316](https://www.sqlalchemy.org/trac/ticket/2316)
- en: '**[orm] [bug]**'
  id: totrans-2585
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed the error formatting raised when a tuple is inadvertently passed to session.query().
    Also in 0.6.9.
  id: totrans-2586
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当不小心将元组传递给session.query()时引发的错误格式化。也在0.6.9中修复。
- en: 'References: [#2297](https://www.sqlalchemy.org/trac/ticket/2297)'
  id: totrans-2587
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2297](https://www.sqlalchemy.org/trac/ticket/2297)
- en: '**[orm] [bug]**'
  id: totrans-2588
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Calls to query.join() to a single-table inheritance subclass are now tracked,
    and are used to eliminate the additional WHERE.. IN criterion normally tacked
    on with single table inheritance, since the join should accommodate it. This allows
    OUTER JOIN to a single table subclass to produce the correct results, and overall
    will produce fewer WHERE criterion when dealing with single table inheritance
    joins.
  id: totrans-2589
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对单表继承子类进行query.join()调用现在被跟踪，并用于消除通常附加的额外的WHERE.. IN条件，因为连接应该适应它。这允许对单表子类进行OUTER
    JOIN以产生正确的结果，并且在处理单表继承连接时将产生更少的WHERE条件。
- en: 'References: [#2328](https://www.sqlalchemy.org/trac/ticket/2328)'
  id: totrans-2590
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2328](https://www.sqlalchemy.org/trac/ticket/2328)
- en: '**[orm] [bug]**'
  id: totrans-2591
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: __table_args__ can now be passed as an empty tuple as well as an empty dict..
    Thanks to Fayaz Yusuf Khan for the patch.
  id: totrans-2592
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: __table_args__现在可以作为空元组传递，也可以作为空字典传递。感谢Fayaz Yusuf Khan提供的补丁。
- en: 'References: [#2339](https://www.sqlalchemy.org/trac/ticket/2339)'
  id: totrans-2593
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2339](https://www.sqlalchemy.org/trac/ticket/2339)
- en: '**[orm] [bug]**'
  id: totrans-2594
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Updated warning message when setting delete-orphan without delete to no longer
    refer to 0.6, as we never got around to upgrading this to an exception. Ideally
    this might be better as an exception but it’s not critical either way.
  id: totrans-2595
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新了设置delete-orphan而没有delete时的警告消息，不再提及0.6，因为我们从未考虑将其升级为异常。理想情况下，这可能更好地作为一个异常，但无论如何都不是关键问题。
- en: 'References: [#2325](https://www.sqlalchemy.org/trac/ticket/2325)'
  id: totrans-2596
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2325](https://www.sqlalchemy.org/trac/ticket/2325)
- en: '**[orm] [bug]**'
  id: totrans-2597
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in get_history() when referring to a composite attribute that has
    no value; added coverage for get_history() regarding composites which is otherwise
    just a userland function.
  id: totrans-2598
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 get_history() 中引用没有值的复合属性时的 bug；增加了对 get_history() 的覆盖范围，关于复合属性，否则只是一个用户自定义函数。
- en: examples
  id: totrans-2599
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples] [bug]**'
  id: totrans-2600
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[示例] [bug]**'
- en: Fixed bug in history_meta.py example where the “unique” flag was not removed
    from a single-table-inheritance subclass which generates columns to put up onto
    the base.
  id: totrans-2601
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 history_meta.py 示例中的 bug，其中“unique”标志未从生成列放置到基类上的单表继承子类中移除。
- en: engine
  id: totrans-2602
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [bug]**'
  id: totrans-2603
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [bug]**'
- en: Fixed bug whereby transaction.rollback() would throw an error on an invalidated
    connection if the transaction were a two-phase or savepoint transaction. For plain
    transactions, rollback() is a no-op if the connection is invalidated, so while
    it wasn’t 100% clear if it should be a no-op, at least now the interface is consistent.
  id: totrans-2604
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当事务.rollback() 在事务是两阶段或保存点事务时，如果连接无效，则会在无效的连接上抛出错误的 bug。对于普通事务，如果连接无效，则 rollback()
    是一个空操作，因此虽然不是100% 清楚它是否应该是一个空操作，但至少现在接口是一致的。
- en: 'References: [#2317](https://www.sqlalchemy.org/trac/ticket/2317)'
  id: totrans-2605
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2317](https://www.sqlalchemy.org/trac/ticket/2317)
- en: sql
  id: totrans-2606
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-2607
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [特性]**'
- en: The update() construct can now accommodate multiple tables in the WHERE clause,
    which will render an “UPDATE..FROM” construct, recognized by PostgreSQL and MSSQL.
    When compiled on MySQL, will instead generate “UPDATE t1, t2, ..”. MySQL additionally
    can render against multiple tables in the SET clause, if Column objects are used
    as keys in the “values” parameter or generative method.
  id: totrans-2608
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，update() 构造可以容纳 WHERE 子句中的多个表，这将生成一个被 PostgreSQL 和 MSSQL 识别的“UPDATE..FROM”
    构造。在 MySQL 上编译时，将生成“UPDATE t1, t2, ..”。如果在“values”参数或生成方法中使用 Column 对象作为键，则 MySQL
    还可以针对 SET 子句中的多个表进行渲染。
- en: 'References: [#1944](https://www.sqlalchemy.org/trac/ticket/1944), [#2166](https://www.sqlalchemy.org/trac/ticket/2166)'
  id: totrans-2609
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1944](https://www.sqlalchemy.org/trac/ticket/1944), [#2166](https://www.sqlalchemy.org/trac/ticket/2166)
- en: '**[sql] [feature]**'
  id: totrans-2610
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [特性]**'
- en: Added accessor to types called “python_type”, returns the rudimentary Python
    type object for a particular TypeEngine instance, if known, else raises NotImplementedError.
  id: totrans-2611
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个名为“python_type”的类型访问器，如果已知，返回特定 TypeEngine 实例的基本 Python 类型对象，否则引发 NotImplementedError。
- en: 'References: [#77](https://www.sqlalchemy.org/trac/ticket/77)'
  id: totrans-2612
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#77](https://www.sqlalchemy.org/trac/ticket/77)
- en: '**[sql] [bug]**'
  id: totrans-2613
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: related to, made some adjustments to the change from regarding the “from” list
    on a select(). The _froms collection is no longer memoized, as this simplifies
    various use cases and removes the need for a “warning” if a column is attached
    to a table after it was already used in an expression - the select() construct
    will now always produce the correct expression. There’s probably no real-world
    performance hit here; select() objects are almost always made ad-hoc, and systems
    that wish to optimize the re-use of a select() would be using the “compiled_cache”
    feature. A hit which would occur when calling select.bind has been reduced, but
    the vast majority of users shouldn’t be using “bound metadata” anyway :).
  id: totrans-2614
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 相关的，对于关于 select() 中的“from”列表的更改进行了一些调整。_froms 集合不再被记忆化，因为这简化了各种用例，并消除了在表已经在表达式中使用后附加列时需要“警告”的需要
    - select() 构造现在将始终生成正确的表达式。这里可能没有真正的性能损失；select() 对象几乎总是临时制作的，并且希望优化 select()
    的系统将使用“compiled_cache”功能。调用 select.bind 时会减少一个命中，但绝大多数用户不应该使用“bound metadata”
    :).
- en: 'References: [#2261](https://www.sqlalchemy.org/trac/ticket/2261), [#2316](https://www.sqlalchemy.org/trac/ticket/2316)'
  id: totrans-2615
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2261](https://www.sqlalchemy.org/trac/ticket/2261), [#2316](https://www.sqlalchemy.org/trac/ticket/2316)
- en: '**[sql] [bug]**'
  id: totrans-2616
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: further tweak to the fix from, so that generative methods work a bit better
    off of cloned (this is almost a non-use case though). In particular this allows
    with_only_columns() to behave more consistently. Added additional documentation
    to with_only_columns() to clarify expected behavior, which changed as a result
    of.
  id: totrans-2617
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 进一步调整了对修复的修正，以便生成方法在克隆后更好地工作（尽管这几乎不是一个使用案例）。特别是这允许 with_only_columns() 表现更一致。添加了额外的文档到
    with_only_columns()，以澄清预期行为，这是由于结果而改变的。
- en: 'References: [#2261](https://www.sqlalchemy.org/trac/ticket/2261), [#2319](https://www.sqlalchemy.org/trac/ticket/2319)'
  id: totrans-2618
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2261](https://www.sqlalchemy.org/trac/ticket/2261), [#2319](https://www.sqlalchemy.org/trac/ticket/2319)
- en: schema
  id: totrans-2619
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: '**[schema] [feature]**'
  id: totrans-2620
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [特性]**'
- en: 'Added new support for remote “schemas”:'
  id: totrans-2621
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对远程“模式”的新支持：
- en: '**[schema] [feature]**'
  id: totrans-2622
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [特性]**'
- en: The “extend_existing” flag on Table now allows for the reflection process to
    take effect for a Table object that’s already been defined; when autoload=True
    and extend_existing=True are both set, the full set of columns will be reflected
    from the Table which will then *overwrite* those columns already present, rather
    than no activity occurring. Columns that are present directly in the autoload
    run will be used as always, however.
  id: totrans-2623
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Table 上的“extend_existing”标志现在允许反射过程对已经定义的 Table 对象生效；当 autoload=True 和 extend_existing=True
    都设置时，将从 Table 中反射出完整的列集，然后将覆盖已经存在的列，而不是不进行任何操作。然而，直接在 autoload 运行中存在的列将像往常一样使用。
- en: 'References: [#1410](https://www.sqlalchemy.org/trac/ticket/1410)'
  id: totrans-2624
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1410](https://www.sqlalchemy.org/trac/ticket/1410)
- en: '**[schema] [bug]**'
  id: totrans-2625
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [bug]**'
- en: Fixed bug whereby TypeDecorator would return a stale value for _type_affinity,
    when using a TypeDecorator that “switches” types, like the CHAR/UUID type.
  id: totrans-2626
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 TypeDecorator 在使用“切换”类型的 TypeDecorator（如 CHAR/UUID 类型）时返回过时值的 bug。
- en: '**[schema] [bug]**'
  id: totrans-2627
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [bug]**'
- en: Fixed bug whereby “order_by=’foreign_key’” option to Inspector.get_table_names
    wasn’t implementing the sort properly, replaced with the existing sort algorithm
  id: totrans-2628
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 Inspector.get_table_names 中“order_by='foreign_key'”选项未正确实现排序的 bug，替换为现有的排序算法
- en: '**[schema] [bug]**'
  id: totrans-2629
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [bug]**'
- en: the “name” of a column-level CHECK constraint, if present, is now rendered in
    the CREATE TABLE statement using “CONSTRAINT <name> CHECK <expression>”.
  id: totrans-2630
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果存在列级别的 CHECK 约束的“name”，则现在在 CREATE TABLE 语句中使用“CONSTRAINT <name> CHECK <expression>”来呈现。
- en: 'References: [#2305](https://www.sqlalchemy.org/trac/ticket/2305)'
  id: totrans-2631
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2305](https://www.sqlalchemy.org/trac/ticket/2305)
- en: '**[schema]**'
  id: totrans-2632
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: MetaData() accepts “schema” and “quote_schema” arguments, which will be applied
    to the same-named arguments of a Table or Sequence which leaves these at their
    default of `None`.
  id: totrans-2633
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MetaData() 接受“schema”和“quote_schema”参数，这些参数将应用于同名参数的 Table 或 Sequence，如果这些参数保持默认值`None`。
- en: '**[schema]**'
  id: totrans-2634
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: Sequence accepts “quote_schema” argument
  id: totrans-2635
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Sequence 接受“quote_schema”参数
- en: '**[schema]**'
  id: totrans-2636
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: tometadata() for Table will use the “schema” of the incoming MetaData for the
    new Table if the schema argument is explicitly “None”
  id: totrans-2637
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 Table，如果 schema 参数明确为“None”，则 tometadata() 方法将使用传入 MetaData 的“schema” 创建新
    Table
- en: '**[schema]**'
  id: totrans-2638
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: Added CreateSchema and DropSchema DDL constructs - these accept just the string
    name of a schema and a “quote” flag.
  id: totrans-2639
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 CreateSchema 和 DropSchema DDL 构造 - 这些仅接受模式的字符串名称和一个“quote”标志。
- en: '**[schema]**'
  id: totrans-2640
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: When using default “schema” with MetaData, ForeignKey will also assume the “default”
    schema when locating remote table. This allows the “schema” argument on MetaData
    to be applied to any set of Table objects that otherwise don’t have a “schema”.
  id: totrans-2641
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用默认的“schema”与 MetaData 时，ForeignKey 在定位远程表时也会假定“default” schema。这允许将 MetaData
    上的“schema”参数应用于任何一组 Table 对象，否则这些对象没有“schema”。
- en: '**[schema]**'
  id: totrans-2642
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: a “has_schema” method has been implemented on dialect, but only works on PostgreSQL
    so far. Courtesy Manlio Perillo.
  id: totrans-2643
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 dialect 上实现了一个“has_schema”方法，但目前只在 PostgreSQL 上有效。感谢 Manlio Perillo。
- en: 'References: [#1679](https://www.sqlalchemy.org/trac/ticket/1679)'
  id: totrans-2644
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1679](https://www.sqlalchemy.org/trac/ticket/1679)
- en: postgresql
  id: totrans-2645
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-2646
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added create_type constructor argument to pg.ENUM. When False, no CREATE/DROP
    or checking for the type will be performed as part of a table create/drop event;
    only the create()/drop)() methods called directly will do this. Helps with Alembic
    “offline” scripts.
  id: totrans-2647
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 create_type 构造参数到 pg.ENUM。当为 False 时，不会执行 CREATE/DROP 或检查类型作为表创建/删除事件的一部分；只有直接调用
    create()/drop() 方法时才会执行此操作。有助于 Alembic 的“离线”脚本。
- en: '**[postgresql] [bug]**'
  id: totrans-2648
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: PostgreSQL dialect memoizes that an ENUM of a particular name was processed
    during a create/drop sequence. This allows a create/drop sequence to work without
    any calls to “checkfirst”, and also means with “checkfirst” turned on it only
    needs to check for the ENUM once.
  id: totrans-2649
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: PostgreSQL dialect 缓存了特定名称的 ENUM 在创建/删除序列期间已处理。这使得在不需要任何“checkfirst”调用的情况下可以正常工作，并且在打开“checkfirst”时只需要检查
    ENUM 一次。
- en: 'References: [#2311](https://www.sqlalchemy.org/trac/ticket/2311)'
  id: totrans-2650
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2311](https://www.sqlalchemy.org/trac/ticket/2311)
- en: mysql
  id: totrans-2651
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-2652
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Unicode adjustments allow latest pymysql (post 0.4) to pass 100% on Python 2.
  id: totrans-2653
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Unicode 调整使最新的 pymysql（0.4 之后）在 Python 2 上通过了 100% 的测试。
- en: mssql
  id: totrans-2654
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [feature]**'
  id: totrans-2655
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [feature]**'
- en: lifted the restriction on SAVEPOINT for SQL Server. All tests pass using it,
    it’s not known if there are deeper issues however.
  id: totrans-2656
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 解除了 SQL Server 对 SAVEPOINT 的限制。所有测试都通过了，但不清楚是否存在更深层次的问题。
- en: 'References: [#822](https://www.sqlalchemy.org/trac/ticket/822)'
  id: totrans-2657
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#822](https://www.sqlalchemy.org/trac/ticket/822)
- en: '**[mssql] [bug]**'
  id: totrans-2658
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [错误]**'
- en: repaired the with_hint() feature which wasn’t implemented correctly on MSSQL
    - usually used for the “WITH (NOLOCK)” hint (which you shouldn’t be using anyway
    ! use snapshot isolation instead :) )
  id: totrans-2659
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 MSSQL 上未正确实现的 with_hint() 功能 - 通常用于“WITH (NOLOCK)”提示（你不应该使用它！改用快照隔离 :)
- en: 'References: [#2336](https://www.sqlalchemy.org/trac/ticket/2336)'
  id: totrans-2660
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2336](https://www.sqlalchemy.org/trac/ticket/2336)
- en: '**[mssql] [bug]**'
  id: totrans-2661
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [错误]**'
- en: use new pyodbc version detection for _need_decimal_fix option.
  id: totrans-2662
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 _need_decimal_fix 选项使用新的 pyodbc 版本检测。
- en: 'References: [#2318](https://www.sqlalchemy.org/trac/ticket/2318)'
  id: totrans-2663
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2318](https://www.sqlalchemy.org/trac/ticket/2318)
- en: '**[mssql] [bug]**'
  id: totrans-2664
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [错误]**'
- en: don’t cast “table name” as NVARCHAR on SQL Server 2000\. Still mostly in the
    dark what incantations are needed to make PyODBC work fully with FreeTDS 0.91
    here, however.
  id: totrans-2665
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不要在 SQL Server 2000 上将“表名”转换为 NVARCHAR。仍然不太清楚在这里完全使 PyODBC 与 FreeTDS 0.91 兼容需要哪些咒语。
- en: 'References: [#2343](https://www.sqlalchemy.org/trac/ticket/2343)'
  id: totrans-2666
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2343](https://www.sqlalchemy.org/trac/ticket/2343)
- en: '**[mssql] [bug]**'
  id: totrans-2667
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [错误]**'
- en: Decode incoming values when retrieving list of index names and the names of
    columns within those indexes.
  id: totrans-2668
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 解码在检索索引名称列表和这些索引中的列名称时的传入值。
- en: 'References: [#2269](https://www.sqlalchemy.org/trac/ticket/2269)'
  id: totrans-2669
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2269](https://www.sqlalchemy.org/trac/ticket/2269)
- en: misc
  id: totrans-2670
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[feature] [ext]**'
  id: totrans-2671
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[功能] [扩展]**'
- en: Added an example to the hybrid docs of a “transformer” - a hybrid that returns
    a query-transforming callable in combination with a custom comparator. Uses a
    new method on Query called with_transformation(). The use case here is fairly
    experimental, but only adds one line of code to Query.
  id: totrans-2672
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在混合文档中添加了一个“转换器”的示例 - 一个混合，它返回一个查询转换的可调用对象与自定义比较器结合使用。在 Query 上使用的新方法称为 with_transformation()。这里的用例相当实验性，但只需要在
    Query 中添加一行代码。
- en: '**[bug] [pyodbc]**'
  id: totrans-2673
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [pyodbc]**'
- en: pyodbc-based dialects now parse the pyodbc accurately as far as observed pyodbc
    strings, including such gems as “py3-3.0.1-beta4”
  id: totrans-2674
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 基于 pyodbc 的方言现在可以准确解析 pyodbc 字符串，包括“py3-3.0.1-beta4”等宝藏。
- en: 'References: [#2318](https://www.sqlalchemy.org/trac/ticket/2318)'
  id: totrans-2675
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2318](https://www.sqlalchemy.org/trac/ticket/2318)
- en: '**[bug] [ext]**'
  id: totrans-2676
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [扩展]**'
- en: the @compiles decorator raises an informative error message when no “default”
    compilation handler is present, rather than KeyError.
  id: totrans-2677
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当没有“默认”编译处理程序时，@compiles 装饰器引发一条信息丰富的错误消息，而不是 KeyError。
- en: orm
  id: totrans-2678
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-2679
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: 'polymorphic_on now accepts many new kinds of values:'
  id: totrans-2680
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: polymorphic_on 现在接受许多新种类的值：
- en: standalone expressions that aren’t otherwise mapped
  id: totrans-2681
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 否则不被映射的独立表达式
- en: ''
  id: totrans-2682
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-2683
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: column_property() objects
  id: totrans-2684
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: column_property() 对象
- en: ''
  id: totrans-2685
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-2686
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: string names of any column_property() or attribute name of a mapped Column
  id: totrans-2687
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何 column_property() 的字符串名称或映射 Column 的属性名称
- en: The docs include an example using the case() construct, which is likely to be
    a common constructed used here. and part of
  id: totrans-2688
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 文档包括一个使用 case() 构造的示例，这可能是一个常见的构造用法。和部分
- en: Standalone expressions in polymorphic_on propagate to single-table inheritance
    subclasses so that they are used in the WHERE /JOIN clause to limit rows to that
    subclass as is the usual behavior.
  id: totrans-2689
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: polymorphic_on 中的独立表达式传播到单表继承子类，因此它们被用于 WHERE /JOIN 子句以将行限制为该子类，这是通常的行为。
- en: 'References: [#2238](https://www.sqlalchemy.org/trac/ticket/2238), [#2345](https://www.sqlalchemy.org/trac/ticket/2345)'
  id: totrans-2690
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2238](https://www.sqlalchemy.org/trac/ticket/2238)，[#2345](https://www.sqlalchemy.org/trac/ticket/2345)
- en: '**[orm] [feature]**'
  id: totrans-2691
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: IdentitySet supports the - operator as the same as difference(), handy when
    dealing with Session.dirty etc.
  id: totrans-2692
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: IdentitySet 支持 - 运算符与 difference() 相同，处理 Session.dirty 等时非常方便。
- en: 'References: [#2301](https://www.sqlalchemy.org/trac/ticket/2301)'
  id: totrans-2693
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2301](https://www.sqlalchemy.org/trac/ticket/2301)
- en: '**[orm] [feature]**'
  id: totrans-2694
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Added new value for Column autoincrement called “ignore_fk”, can be used to
    force autoincrement on a column that’s still part of a ForeignKeyConstraint. New
    example in the relationship docs illustrates its use.
  id: totrans-2695
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了称为“ignore_fk”的 Column 自增值的新值，可用于强制在仍然属于 ForeignKeyConstraint 的列上自增。关系文档中的新示例说明了其用法。
- en: '**[orm] [bug]**'
  id: totrans-2696
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed backref behavior when “popping” the value off of a many-to-one in response
    to a removal from a stale one-to-many - the operation is skipped, since the many-to-one
    has since been updated.
  id: totrans-2697
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当从过时的一对多中删除时从多对一中“弹出”值的反向引用行为 - 该操作被跳过，因为多对一已经被更新。
- en: 'References: [#2315](https://www.sqlalchemy.org/trac/ticket/2315)'
  id: totrans-2698
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2315](https://www.sqlalchemy.org/trac/ticket/2315)
- en: '**[orm] [bug]**'
  id: totrans-2699
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: After some years of not doing this, added more granularity to the “is X a parent
    of Y” functionality, which is used when determining if the FK on “Y” needs to
    be “nulled out” as well as if “Y” should be deleted with delete-orphan cascade.
    The test now takes into account the Python identity of the parent as well its
    identity key, to see if the last known parent of Y is definitely X. If a decision
    can’t be made, a StaleDataError is raised. The conditions where this error is
    raised are fairly rare, requiring that the previous parent was garbage collected,
    and previously could very well inappropriately update/delete a record that’s since
    moved onto a new parent, though there may be some cases where “silent success”
    occurred previously that will now raise in the face of ambiguity. Expiring “Y”
    resets the “parent” tracker, meaning X.remove(Y) could then end up deleting Y
    even if X is stale, but this is the same behavior as before; it’s advised to expire
    X also in that case.
  id: totrans-2700
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 几年后，对“X是否是Y的父级”功能增加了更多细粒度的控制，这在确定“Y”的外键是否也需要“被置空”以及是否应该使用删除孤立级联时使用。测试现在考虑了父级的Python标识以及其标识键，以查看Y的上一个已知父级是否绝对是X。如果无法做出决定，则会引发StaleDataError。引发此错误的条件相当罕见，要求以前的父级已被垃圾收集，并且以前可能会不适当地更新/删除已经移至新父级的记录，尽管以前可能存在一些“静默成功”的情况，但现在在面对模糊性时将会引发。使“Y”过期会重置“父”跟踪器，这意味着X.remove(Y)然后可能会删除Y，即使X已过期，但这与以前的行为相同；建议在这种情况下也使X过期。
- en: 'References: [#2264](https://www.sqlalchemy.org/trac/ticket/2264)'
  id: totrans-2701
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2264](https://www.sqlalchemy.org/trac/ticket/2264)
- en: '**[orm] [bug]**'
  id: totrans-2702
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: fixed inappropriate evaluation of user-mapped object in a boolean context within
    query.get(). Also in 0.6.9.
  id: totrans-2703
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在query.get()中不适当评估用户映射对象的布尔上下文的错误。还在0.6.9中。
- en: 'References: [#2310](https://www.sqlalchemy.org/trac/ticket/2310)'
  id: totrans-2704
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2310](https://www.sqlalchemy.org/trac/ticket/2310)
- en: '**[orm] [bug]**'
  id: totrans-2705
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Added missing comma to PASSIVE_RETURN_NEVER_SET symbol
  id: totrans-2706
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了缺少的逗号到PASSIVE_RETURN_NEVER_SET符号
- en: 'References: [#2304](https://www.sqlalchemy.org/trac/ticket/2304)'
  id: totrans-2707
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2304](https://www.sqlalchemy.org/trac/ticket/2304)
- en: '**[orm] [bug]**'
  id: totrans-2708
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Cls.column.collate(“some collation”) now works. Also in 0.6.9
  id: totrans-2709
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Cls.column.collate(“some collation”)现在可以工作。也在0.6.9中。
- en: 'References: [#1776](https://www.sqlalchemy.org/trac/ticket/1776)'
  id: totrans-2710
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#1776](https://www.sqlalchemy.org/trac/ticket/1776)
- en: '**[orm] [bug]**'
  id: totrans-2711
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: the value of a composite attribute is now expired after an insert or update
    operation, instead of regenerated in place. This ensures that a column value which
    is expired within a flush will be loaded first, before the composite is regenerated
    using that value.
  id: totrans-2712
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，复合属性的值在插入或更新操作后会过期，而不是在原地重新生成。这确保了在刷新时过期的列值会首先被加载，然后才会使用该值重新生成复合值。
- en: 'References: [#2309](https://www.sqlalchemy.org/trac/ticket/2309)'
  id: totrans-2713
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2309](https://www.sqlalchemy.org/trac/ticket/2309)
- en: '**[orm] [bug]**'
  id: totrans-2714
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The fix in also emits the “refresh” event when the composite value is loaded
    on access, even if all column values were already present, as is appropriate.
    This fixes the “mutable” extension which relies upon the “load” event to ensure
    the _parents dictionary is up to date, fixes. Thanks to Scott Torborg for the
    test case here.
  id: totrans-2715
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当访问时加载复合值时也会发出“刷新”事件的问题，即使所有列值已经存在，这是合适的。这修复了依赖于“load”事件来确保_parents字典是最新的“mutable”扩展，修复。感谢Scott
    Torborg提供的测试用例。
- en: 'References: [#2308](https://www.sqlalchemy.org/trac/ticket/2308), [#2309](https://www.sqlalchemy.org/trac/ticket/2309)'
  id: totrans-2716
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2308](https://www.sqlalchemy.org/trac/ticket/2308)，[#2309](https://www.sqlalchemy.org/trac/ticket/2309)
- en: '**[orm] [bug]**'
  id: totrans-2717
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug whereby a subclass of a subclass using concrete inheritance in conjunction
    with the new ConcreteBase or AbstractConcreteBase would fail to apply the subclasses
    deeper than one level to the “polymorphic loader” of each base
  id: totrans-2718
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即使用新的ConcreteBase或AbstractConcreteBase与具体继承一起使用的子类的子类将无法将更深层次的子类应用于每个基类的“多态加载器”。
- en: 'References: [#2312](https://www.sqlalchemy.org/trac/ticket/2312)'
  id: totrans-2719
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2312](https://www.sqlalchemy.org/trac/ticket/2312)
- en: '**[orm] [bug]**'
  id: totrans-2720
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug whereby a subclass of a subclass using the new AbstractConcreteBase
    would fail to acquire the correct “base_mapper” attribute when the “base” mapper
    was generated, thereby causing failures later on.
  id: totrans-2721
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用新的AbstractConcreteBase的子类的子类在生成“基”映射器时无法获得正确的“base_mapper”属性的错误，从而导致后来的失败。
- en: 'References: [#2312](https://www.sqlalchemy.org/trac/ticket/2312)'
  id: totrans-2722
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2312](https://www.sqlalchemy.org/trac/ticket/2312)
- en: '**[orm] [bug]**'
  id: totrans-2723
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug whereby column_property() created against ORM-level column could be
    treated as a distinct entity when producing certain kinds of joined-inh joins.
  id: totrans-2724
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即当针对 ORM 级别的列创建 column_property() 时，在生成某些类型的联合继承联接时，可能会将其视为单独的实体。
- en: 'References: [#2316](https://www.sqlalchemy.org/trac/ticket/2316)'
  id: totrans-2725
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2316](https://www.sqlalchemy.org/trac/ticket/2316)
- en: '**[orm] [bug]**'
  id: totrans-2726
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed the error formatting raised when a tuple is inadvertently passed to session.query().
    Also in 0.6.9.
  id: totrans-2727
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当元组被错误地传递给 session.query() 时引发的错误格式化问题。也适用于 0.6.9 版本。
- en: 'References: [#2297](https://www.sqlalchemy.org/trac/ticket/2297)'
  id: totrans-2728
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2297](https://www.sqlalchemy.org/trac/ticket/2297)
- en: '**[orm] [bug]**'
  id: totrans-2729
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Calls to query.join() to a single-table inheritance subclass are now tracked,
    and are used to eliminate the additional WHERE.. IN criterion normally tacked
    on with single table inheritance, since the join should accommodate it. This allows
    OUTER JOIN to a single table subclass to produce the correct results, and overall
    will produce fewer WHERE criterion when dealing with single table inheritance
    joins.
  id: totrans-2730
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对单表继承子类的 query.join() 现在被跟踪，并且用于消除通常在单表继承时附加的额外 WHERE.. IN 准则，因为联接应该适应它。这允许对单表子类进行
    OUTER JOIN 以产生正确的结果，并且在处理单表继承联接时通常会生成更少的 WHERE 准则。
- en: 'References: [#2328](https://www.sqlalchemy.org/trac/ticket/2328)'
  id: totrans-2731
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2328](https://www.sqlalchemy.org/trac/ticket/2328)
- en: '**[orm] [bug]**'
  id: totrans-2732
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: __table_args__ can now be passed as an empty tuple as well as an empty dict..
    Thanks to Fayaz Yusuf Khan for the patch.
  id: totrans-2733
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: __table_args__ 现在可以作为空元组和空字典传递。感谢 Fayaz Yusuf Khan 提供的修补程序。
- en: 'References: [#2339](https://www.sqlalchemy.org/trac/ticket/2339)'
  id: totrans-2734
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2339](https://www.sqlalchemy.org/trac/ticket/2339)
- en: '**[orm] [bug]**'
  id: totrans-2735
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Updated warning message when setting delete-orphan without delete to no longer
    refer to 0.6, as we never got around to upgrading this to an exception. Ideally
    this might be better as an exception but it’s not critical either way.
  id: totrans-2736
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新了设置 delete-orphan 但没有删除时的警告消息，不再提到 0.6 版本，因为我们从未考虑过将其升级为异常。理想情况下，这可能更好地作为一个异常，但无论如何都不是关键。
- en: 'References: [#2325](https://www.sqlalchemy.org/trac/ticket/2325)'
  id: totrans-2737
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2325](https://www.sqlalchemy.org/trac/ticket/2325)
- en: '**[orm] [bug]**'
  id: totrans-2738
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed bug in get_history() when referring to a composite attribute that has
    no value; added coverage for get_history() regarding composites which is otherwise
    just a userland function.
  id: totrans-2739
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 get_history() 中修复了引用没有值的复合属性时的错误；为 get_history() 添加了关于否则只是一个用户自定义函数的复合的覆盖。
- en: examples
  id: totrans-2740
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples] [bug]**'
  id: totrans-2741
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[示例] [错误]**'
- en: Fixed bug in history_meta.py example where the “unique” flag was not removed
    from a single-table-inheritance subclass which generates columns to put up onto
    the base.
  id: totrans-2742
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 history_meta.py 示例中的错误，其中“unique”标志未从生成要放在基础上的列的单表继承子类中删除。
- en: engine
  id: totrans-2743
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [bug]**'
  id: totrans-2744
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误]**'
- en: Fixed bug whereby transaction.rollback() would throw an error on an invalidated
    connection if the transaction were a two-phase or savepoint transaction. For plain
    transactions, rollback() is a no-op if the connection is invalidated, so while
    it wasn’t 100% clear if it should be a no-op, at least now the interface is consistent.
  id: totrans-2745
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当事务.rollback()在事务是两阶段或保存点事务时，如果连接无效，则会抛出错误的错误。对于普通事务，如果连接无效，rollback() 是一个空操作，所以虽然不太清楚它是否应该是一个空操作，但至少现在接口是一致的。
- en: 'References: [#2317](https://www.sqlalchemy.org/trac/ticket/2317)'
  id: totrans-2746
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2317](https://www.sqlalchemy.org/trac/ticket/2317)
- en: sql
  id: totrans-2747
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-2748
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [功能]**'
- en: The update() construct can now accommodate multiple tables in the WHERE clause,
    which will render an “UPDATE..FROM” construct, recognized by PostgreSQL and MSSQL.
    When compiled on MySQL, will instead generate “UPDATE t1, t2, ..”. MySQL additionally
    can render against multiple tables in the SET clause, if Column objects are used
    as keys in the “values” parameter or generative method.
  id: totrans-2749
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: update() 构造现在可以在 WHERE 子句中容纳多个表格，这将生成一个被 PostgreSQL 和 MSSQL 识别的“UPDATE..FROM”构造。在
    MySQL 上编译时，将生成“UPDATE t1, t2, ..”。如果在“values”参数或生成方法中使用 Column 对象作为键，则 MySQL 还可以针对多个表格在
    SET 子句中渲染。
- en: 'References: [#1944](https://www.sqlalchemy.org/trac/ticket/1944), [#2166](https://www.sqlalchemy.org/trac/ticket/2166)'
  id: totrans-2750
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1944](https://www.sqlalchemy.org/trac/ticket/1944), [#2166](https://www.sqlalchemy.org/trac/ticket/2166)
- en: '**[sql] [feature]**'
  id: totrans-2751
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [功能]**'
- en: Added accessor to types called “python_type”, returns the rudimentary Python
    type object for a particular TypeEngine instance, if known, else raises NotImplementedError.
  id: totrans-2752
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了名为“python_type”的类型访问器，如果已知，则返回特定 TypeEngine 实例的基本 Python 类型对象，否则引发 NotImplementedError。
- en: 'References: [#77](https://www.sqlalchemy.org/trac/ticket/77)'
  id: totrans-2753
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#77](https://www.sqlalchemy.org/trac/ticket/77)
- en: '**[sql] [bug]**'
  id: totrans-2754
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误]**'
- en: related to, made some adjustments to the change from regarding the “from” list
    on a select(). The _froms collection is no longer memoized, as this simplifies
    various use cases and removes the need for a “warning” if a column is attached
    to a table after it was already used in an expression - the select() construct
    will now always produce the correct expression. There’s probably no real-world
    performance hit here; select() objects are almost always made ad-hoc, and systems
    that wish to optimize the re-use of a select() would be using the “compiled_cache”
    feature. A hit which would occur when calling select.bind has been reduced, but
    the vast majority of users shouldn’t be using “bound metadata” anyway :).
  id: totrans-2755
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关于，对select()的“from”列表的更改进行了一些调整。_froms集合不再被记忆，因为这简化了各种用例，并消除了在表达式中使用列后，如果在表达式中使用列后再将其附加到表中，则无需“警告”的需要
    - select()构造现在将始终生成正确的表达式。这里可能没有真实的性能损失；select()对象几乎总是临时制作的，并且希望优化select()的重用的系统将使用“compiled_cache”功能。调用select.bind时会减少一个命中，但绝大多数用户不应该使用“bound
    metadata”：）。
- en: 'References: [#2261](https://www.sqlalchemy.org/trac/ticket/2261), [#2316](https://www.sqlalchemy.org/trac/ticket/2316)'
  id: totrans-2756
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2261](https://www.sqlalchemy.org/trac/ticket/2261), [#2316](https://www.sqlalchemy.org/trac/ticket/2316)
- en: '**[sql] [bug]**'
  id: totrans-2757
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误]**'
- en: further tweak to the fix from, so that generative methods work a bit better
    off of cloned (this is almost a non-use case though). In particular this allows
    with_only_columns() to behave more consistently. Added additional documentation
    to with_only_columns() to clarify expected behavior, which changed as a result
    of.
  id: totrans-2758
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 进一步调整了修复，以便生成方法在克隆后更好地工作（尽管这几乎是一个非使用情况）。特别是这允许with_only_columns()更一致地行为。添加了额外的文档到with_only_columns()以澄清预期行为，这是由于结果而改变的。
- en: 'References: [#2261](https://www.sqlalchemy.org/trac/ticket/2261), [#2319](https://www.sqlalchemy.org/trac/ticket/2319)'
  id: totrans-2759
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2261](https://www.sqlalchemy.org/trac/ticket/2261), [#2319](https://www.sqlalchemy.org/trac/ticket/2319)
- en: schema
  id: totrans-2760
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: '**[schema] [feature]**'
  id: totrans-2761
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [功能]**'
- en: 'Added new support for remote “schemas”:'
  id: totrans-2762
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对远程“模式”的新支持：
- en: '**[schema] [feature]**'
  id: totrans-2763
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [功能]**'
- en: The “extend_existing” flag on Table now allows for the reflection process to
    take effect for a Table object that’s already been defined; when autoload=True
    and extend_existing=True are both set, the full set of columns will be reflected
    from the Table which will then *overwrite* those columns already present, rather
    than no activity occurring. Columns that are present directly in the autoload
    run will be used as always, however.
  id: totrans-2764
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Table上的“extend_existing”标志现在允许反射过程对已经定义的Table对象生效；当autoload=True和extend_existing=True都设置时，将从Table中反射出完整的列集，然后*覆盖*已经存在的列，而不是不发生任何活动。然而，直接在autoload运行中存在的列将像往常一样使用。
- en: 'References: [#1410](https://www.sqlalchemy.org/trac/ticket/1410)'
  id: totrans-2765
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1410](https://www.sqlalchemy.org/trac/ticket/1410)
- en: '**[schema] [bug]**'
  id: totrans-2766
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [错误]**'
- en: Fixed bug whereby TypeDecorator would return a stale value for _type_affinity,
    when using a TypeDecorator that “switches” types, like the CHAR/UUID type.
  id: totrans-2767
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了TypeDecorator在使用“切换”类型的TypeDecorator时会返回过时值的错误，比如CHAR/UUID类型。
- en: '**[schema] [bug]**'
  id: totrans-2768
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [错误]**'
- en: Fixed bug whereby “order_by=’foreign_key’” option to Inspector.get_table_names
    wasn’t implementing the sort properly, replaced with the existing sort algorithm
  id: totrans-2769
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Inspector.get_table_names中“order_by='foreign_key'”选项未正确实现排序的错误，替换为现有的排序算法
- en: '**[schema] [bug]**'
  id: totrans-2770
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [错误]**'
- en: the “name” of a column-level CHECK constraint, if present, is now rendered in
    the CREATE TABLE statement using “CONSTRAINT <name> CHECK <expression>”.
  id: totrans-2771
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果存在列级别的CHECK约束的“名称”，则现在在CREATE TABLE语句中使用“CONSTRAINT <name> CHECK <expression>”来呈现。
- en: 'References: [#2305](https://www.sqlalchemy.org/trac/ticket/2305)'
  id: totrans-2772
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2305](https://www.sqlalchemy.org/trac/ticket/2305)
- en: '**[schema]**'
  id: totrans-2773
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: MetaData() accepts “schema” and “quote_schema” arguments, which will be applied
    to the same-named arguments of a Table or Sequence which leaves these at their
    default of `None`.
  id: totrans-2774
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MetaData()接受“模式”和“quote_schema”参数，这些参数将应用于Table或Sequence的同名参数，这些参数保持默认值为`None`。
- en: '**[schema]**'
  id: totrans-2775
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: Sequence accepts “quote_schema” argument
  id: totrans-2776
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Sequence接受“quote_schema”参数
- en: '**[schema]**'
  id: totrans-2777
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: tometadata() for Table will use the “schema” of the incoming MetaData for the
    new Table if the schema argument is explicitly “None”
  id: totrans-2778
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于Table，如果schema参数明确为“None”，tometadata()将使用传入的MetaData的“模式”为新Table。
- en: '**[schema]**'
  id: totrans-2779
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: Added CreateSchema and DropSchema DDL constructs - these accept just the string
    name of a schema and a “quote” flag.
  id: totrans-2780
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了CreateSchema和DropSchema DDL构造 - 这些仅接受模式的字符串名称和“quote”标志。
- en: '**[schema]**'
  id: totrans-2781
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: When using default “schema” with MetaData, ForeignKey will also assume the “default”
    schema when locating remote table. This allows the “schema” argument on MetaData
    to be applied to any set of Table objects that otherwise don’t have a “schema”.
  id: totrans-2782
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用默认的“schema”与MetaData时，ForeignKey在定位远程表时也会假定“default”模式。这允许将MetaData上的“schema”参数应用于任何一组否则没有“schema”的Table对象。
- en: '**[schema]**'
  id: totrans-2783
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: a “has_schema” method has been implemented on dialect, but only works on PostgreSQL
    so far. Courtesy Manlio Perillo.
  id: totrans-2784
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在方言上实现了一个“has_schema”方法，但目前只在PostgreSQL上有效。感谢Manlio Perillo。
- en: 'References: [#1679](https://www.sqlalchemy.org/trac/ticket/1679)'
  id: totrans-2785
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1679](https://www.sqlalchemy.org/trac/ticket/1679)
- en: postgresql
  id: totrans-2786
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-2787
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added create_type constructor argument to pg.ENUM. When False, no CREATE/DROP
    or checking for the type will be performed as part of a table create/drop event;
    only the create()/drop)() methods called directly will do this. Helps with Alembic
    “offline” scripts.
  id: totrans-2788
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向pg.ENUM添加了create_type构造函数参数。当为False时，在表创建/删除事件中不会执行CREATE/DROP或检查类型；只有直接调用create()/drop()方法才会执行此操作。有助于Alembic的“离线”脚本。
- en: '**[postgresql] [bug]**'
  id: totrans-2789
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: PostgreSQL dialect memoizes that an ENUM of a particular name was processed
    during a create/drop sequence. This allows a create/drop sequence to work without
    any calls to “checkfirst”, and also means with “checkfirst” turned on it only
    needs to check for the ENUM once.
  id: totrans-2790
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: PostgreSQL方言在创建/删除序列期间缓存了特定名称的ENUM。这允许创建/删除序列在没有任何“checkfirst”调用的情况下工作，并且也意味着在打开“checkfirst”时只需要检查ENUM一次。
- en: 'References: [#2311](https://www.sqlalchemy.org/trac/ticket/2311)'
  id: totrans-2791
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2311](https://www.sqlalchemy.org/trac/ticket/2311)
- en: mysql
  id: totrans-2792
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-2793
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Unicode adjustments allow latest pymysql (post 0.4) to pass 100% on Python 2.
  id: totrans-2794
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Unicode调整允许最新的pymysql（0.4之后）在Python 2上通过100%。
- en: mssql
  id: totrans-2795
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [feature]**'
  id: totrans-2796
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [feature]**'
- en: lifted the restriction on SAVEPOINT for SQL Server. All tests pass using it,
    it’s not known if there are deeper issues however.
  id: totrans-2797
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 解除了对SQL Server的SAVEPOINT的限制。所有测试都通过了，但不清楚是否存在更深层次的问题。
- en: 'References: [#822](https://www.sqlalchemy.org/trac/ticket/822)'
  id: totrans-2798
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#822](https://www.sqlalchemy.org/trac/ticket/822)
- en: '**[mssql] [bug]**'
  id: totrans-2799
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: repaired the with_hint() feature which wasn’t implemented correctly on MSSQL
    - usually used for the “WITH (NOLOCK)” hint (which you shouldn’t be using anyway
    ! use snapshot isolation instead :) )
  id: totrans-2800
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在MSSQL上未��确实现的with_hint()功能 - 通常用于“WITH (NOLOCK)”提示（你不应该使用的！改用快照隔离 :)）
- en: 'References: [#2336](https://www.sqlalchemy.org/trac/ticket/2336)'
  id: totrans-2801
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2336](https://www.sqlalchemy.org/trac/ticket/2336)
- en: '**[mssql] [bug]**'
  id: totrans-2802
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: use new pyodbc version detection for _need_decimal_fix option.
  id: totrans-2803
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用新的pyodbc版本检测来确定_need_decimal_fix选项。
- en: 'References: [#2318](https://www.sqlalchemy.org/trac/ticket/2318)'
  id: totrans-2804
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2318](https://www.sqlalchemy.org/trac/ticket/2318)
- en: '**[mssql] [bug]**'
  id: totrans-2805
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: don’t cast “table name” as NVARCHAR on SQL Server 2000\. Still mostly in the
    dark what incantations are needed to make PyODBC work fully with FreeTDS 0.91
    here, however.
  id: totrans-2806
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不要在SQL Server 2000上将“表名”转换为NVARCHAR。然而，对于如何使PyODBC与FreeTDS 0.91完全配合，仍然大多数是未知的。
- en: 'References: [#2343](https://www.sqlalchemy.org/trac/ticket/2343)'
  id: totrans-2807
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2343](https://www.sqlalchemy.org/trac/ticket/2343)
- en: '**[mssql] [bug]**'
  id: totrans-2808
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Decode incoming values when retrieving list of index names and the names of
    columns within those indexes.
  id: totrans-2809
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在检索索引名称列表和这些索引中列的名称时，解码传入的值。
- en: 'References: [#2269](https://www.sqlalchemy.org/trac/ticket/2269)'
  id: totrans-2810
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2269](https://www.sqlalchemy.org/trac/ticket/2269)
- en: misc
  id: totrans-2811
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[feature] [ext]**'
  id: totrans-2812
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[feature] [ext]**'
- en: Added an example to the hybrid docs of a “transformer” - a hybrid that returns
    a query-transforming callable in combination with a custom comparator. Uses a
    new method on Query called with_transformation(). The use case here is fairly
    experimental, but only adds one line of code to Query.
  id: totrans-2813
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在混合文档中添加了一个“transformer”的示例 - 一个返回查询转换可调用对象的混合，结合自定义比较器。使用Query上的新方法with_transformation()。这里的用例相当实验性，但只需要向Query添加一行代码。
- en: '**[bug] [pyodbc]**'
  id: totrans-2814
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [pyodbc]**'
- en: pyodbc-based dialects now parse the pyodbc accurately as far as observed pyodbc
    strings, including such gems as “py3-3.0.1-beta4”
  id: totrans-2815
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 基于pyodbc的方言现在准确解析pyodbc字符串，包括诸如“py3-3.0.1-beta4”之类的珍品。
- en: 'References: [#2318](https://www.sqlalchemy.org/trac/ticket/2318)'
  id: totrans-2816
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2318](https://www.sqlalchemy.org/trac/ticket/2318)
- en: '**[bug] [ext]**'
  id: totrans-2817
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: the @compiles decorator raises an informative error message when no “default”
    compilation handler is present, rather than KeyError.
  id: totrans-2818
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当没有“default”编译处理程序时，@compiles装饰器会引发信息性错误消息，而不是KeyError。
- en: 0.7.3
  id: totrans-2819
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.7.3
- en: 'Released: Sun Oct 16 2011'
  id: totrans-2820
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2011年10月16日 星期日
- en: general
  id: totrans-2821
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通用
- en: '**[general]**'
  id: totrans-2822
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general]**'
- en: Adjusted the “importlater” mechanism, which is used internally to resolve import
    cycles, such that the usage of __import__ is completed when the import of sqlalchemy
    or sqlalchemy.orm is done, thereby avoiding any usage of __import__ after the
    application starts new threads, fixes. Also in 0.6.9.
  id: totrans-2823
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了“importlater”机制，该机制在内部用于解决导入循环，使得在导入sqlalchemy或sqlalchemy.orm之后完成__import__的使用，从而避免在应用程序启动新线程后使用__import__，修复了问题。也适用于0.6.9版本。
- en: 'References: [#2279](https://www.sqlalchemy.org/trac/ticket/2279)'
  id: totrans-2824
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2279](https://www.sqlalchemy.org/trac/ticket/2279)
- en: orm
  id: totrans-2825
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-2826
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Improved query.join() such that the “left” side can more flexibly be a non-ORM
    selectable, such as a subquery. A selectable placed in select_from() will now
    be used as the left side, favored over implicit usage of a mapped entity. If the
    join still fails based on lack of foreign keys, the error message includes this
    detail. Thanks to brianrhude on IRC for the test case.
  id: totrans-2827
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了query.join()，使“左”侧可以更灵活地是非ORM可选择项，例如子查询。放置在select_from()中的可选择项现在将被用作左侧，优先于隐式使用映射实体。如果基于外键不足而加入仍然失败，则错误消息将包含此详细信息。感谢IRC上的brianrhude提供测试用例。
- en: 'References: [#2298](https://www.sqlalchemy.org/trac/ticket/2298)'
  id: totrans-2828
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2298](https://www.sqlalchemy.org/trac/ticket/2298)
- en: '**[orm]**'
  id: totrans-2829
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added after_soft_rollback() Session event. This event fires unconditionally
    whenever rollback() is called, regardless of if an actual DBAPI level rollback
    occurred. This event is specifically designed to allow operations with the Session
    to proceed after a rollback when the Session.is_active is True.
  id: totrans-2830
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了after_soft_rollback() Session事件。无论是否发生实际的DBAPI级别回滚，此事件都会在调用rollback()时无条件触发。此事件专门设计用于在Session.is_active为True时允许在回滚后继续与Session进行操作。
- en: 'References: [#2241](https://www.sqlalchemy.org/trac/ticket/2241)'
  id: totrans-2831
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2241](https://www.sqlalchemy.org/trac/ticket/2241)
- en: '**[orm]**'
  id: totrans-2832
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added “adapt_on_names” boolean flag to orm.aliased() construct. Allows an aliased()
    construct to link the ORM entity to a selectable that contains aggregates or other
    derived forms of a particular attribute, provided the name is the same as that
    of the entity mapped column.
  id: totrans-2833
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在orm.aliased()构造中添加了“adapt_on_names”布尔标志。允许aliased()构造将ORM实体链接到包含聚合或其他派生形式特定属性的可选择项，前提是名称与实体映射列的名称相同。
- en: '**[orm]**'
  id: totrans-2834
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added new flag expire_on_flush=False to column_property(), marks those properties
    that would otherwise be considered to be “readonly”, i.e. derived from SQL expressions,
    to retain their value after a flush has occurred, including if the parent object
    itself was involved in an update.
  id: totrans-2835
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向column_property()添加了新标志expire_on_flush=False，标记那些在刷新后否则被视为“只读”的属性，即从SQL表达式派生，以保留它们的值，即使父对象本身参与了更新。
- en: '**[orm]**'
  id: totrans-2836
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Enhanced the instrumentation in the ORM to support Py3K’s new argument style
    of “required kw arguments”, i.e. fn(a, b, *, c, d), fn(a, b, *args, c, d). Argument
    signatures of mapped object’s __init__ method will be preserved, including required
    kw rules.
  id: totrans-2837
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增强了ORM中的仪器支持Py3K的新参数样式“required kw arguments”，即fn(a, b, *, c, d)，fn(a, b, *args,
    c, d)。映射对象的__init__方法的参数签名将被保留，包括必需的kw规则。
- en: 'References: [#2237](https://www.sqlalchemy.org/trac/ticket/2237)'
  id: totrans-2838
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2237](https://www.sqlalchemy.org/trac/ticket/2237)
- en: '**[orm]**'
  id: totrans-2839
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug in unit of work whereby detection of “cycles” among classes in highly
    interlinked patterns would not produce a deterministic result; thereby sometimes
    missing some nodes that should be considered cycles and causing further issues
    down the road. Note this bug is in 0.6 also; not backported at the moment.
  id: totrans-2840
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了工作单元中的错误，其中在高度相互链接的模式中的类之间检测“循环”不会产生确定性结果；因此，有时会错过应该被视为循环的一些节点，并在后续引起更多问题。请注意，此错误也存在于0.6版本中；目前尚未回溯。
- en: 'References: [#2282](https://www.sqlalchemy.org/trac/ticket/2282)'
  id: totrans-2841
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2282](https://www.sqlalchemy.org/trac/ticket/2282)
- en: '**[orm]**'
  id: totrans-2842
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Fixed a variety of synonym()-related regressions from 0.6:'
  id: totrans-2843
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了从0.6版本开始的各种与synonym()相关的回归问题：
- en: making a synonym against a synonym now works.
  id: totrans-2844
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在可以对同义词进行同义词处理。
- en: ''
  id: totrans-2845
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-2846
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: synonyms made against a relationship() can be passed to query.join(), options
    sent to query.options(), passed by name to query.with_parent().
  id: totrans-2847
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对relationship()创建的同义词可以传递给query.join()，传递给query.options()的选项，按名称传递给query.with_parent()。
- en: '**[orm]**'
  id: totrans-2848
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby mapper.order_by attribute would be ignored in the “inner”
    query within a subquery eager load. . Also in 0.6.9.
  id: totrans-2849
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在子查询的预加载中，“mapper.order_by” 属性将被“inner”查询中忽略的错误。同时也修复了 0.6.9 版本中的此问题。
- en: 'References: [#2287](https://www.sqlalchemy.org/trac/ticket/2287)'
  id: totrans-2850
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2287](https://www.sqlalchemy.org/trac/ticket/2287)
- en: '**[orm]**'
  id: totrans-2851
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Identity map .discard() uses dict.pop(,None) internally instead of “del” to
    avoid KeyError/warning during a non-determinate gc teardown
  id: totrans-2852
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Identity map 中的 `.discard()` 方法在内部使用 `dict.pop(,None)` 而不是 “del”，以避免在非确定性的垃圾回收拆除期间出现
    KeyError/警告。
- en: 'References: [#2267](https://www.sqlalchemy.org/trac/ticket/2267)'
  id: totrans-2853
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2267](https://www.sqlalchemy.org/trac/ticket/2267)
- en: '**[orm]**'
  id: totrans-2854
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed regression in new composite rewrite where deferred=True option failed
    due to missing import
  id: totrans-2855
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在新的复合重写中修复了由于缺少导入而导致 `deferred=True` 选项失败的错误。
- en: 'References: [#2253](https://www.sqlalchemy.org/trac/ticket/2253)'
  id: totrans-2856
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2253](https://www.sqlalchemy.org/trac/ticket/2253)
- en: '**[orm]**'
  id: totrans-2857
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Reinstated “comparator_factory” argument to composite(), removed when 0.7 was
    released.
  id: totrans-2858
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重新添加了 `composite()` 函数中的“comparator_factory”参数，该参数在 0.7 版本发布时被移除。
- en: 'References: [#2248](https://www.sqlalchemy.org/trac/ticket/2248)'
  id: totrans-2859
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2248](https://www.sqlalchemy.org/trac/ticket/2248)
- en: '**[orm]**'
  id: totrans-2860
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug in query.join() which would occur in a complex multiple-overlapping
    path scenario, where the same table could be joined to twice. Thanks *much* to
    Dave Vitek for the excellent fix here.
  id: totrans-2861
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在复杂的多重重叠路径方案中会发生的查询.join()中的错误，其中相同的表可能会被加入两次。感谢 Dave Vitek 在这里提供了出色的修复。
- en: 'References: [#2247](https://www.sqlalchemy.org/trac/ticket/2247)'
  id: totrans-2862
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2247](https://www.sqlalchemy.org/trac/ticket/2247)
- en: '**[orm]**'
  id: totrans-2863
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query will convert an OFFSET of zero when slicing into None, so that needless
    OFFSET clauses are not invoked.
  id: totrans-2864
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当切片的 `OFFSET` 为零时，查询将将其转换为 `None`，以避免调用不必要的 `OFFSET` 子句。
- en: '**[orm]**'
  id: totrans-2865
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Repaired edge case where mapper would fail to fully update internal state when
    a relationship on a new mapper would establish a backref on the first mapper.
  id: totrans-2866
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个极端情况，即当一个新的 mapper 上的关系在第一个 mapper 上建立反向引用时，mapper 会在更新内部状态时失败的情况。
- en: '**[orm]**'
  id: totrans-2867
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby if __eq__() was redefined, a relationship many-to-one lazyload
    would hit the __eq__() and fail. Does not apply to 0.6.9.
  id: totrans-2868
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即如果重新定义了 `__eq__()`，那么关系多对一的延迟加载会命中 `__eq__()` 并失败。不适用于 0.6.9。
- en: 'References: [#2260](https://www.sqlalchemy.org/trac/ticket/2260)'
  id: totrans-2869
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2260](https://www.sqlalchemy.org/trac/ticket/2260)
- en: '**[orm]**'
  id: totrans-2870
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Calling class_mapper() and passing in an object that is not a “type” (i.e. a
    class that could potentially be mapped) now raises an informative ArgumentError,
    rather than UnmappedClassError.
  id: totrans-2871
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调用 `class_mapper()` 并传入一个不是“type”的对象（即一个可能被映射的类）现在会引发一个信息性的 `ArgumentError`，而不是
    `UnmappedClassError`。
- en: 'References: [#2196](https://www.sqlalchemy.org/trac/ticket/2196)'
  id: totrans-2872
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2196](https://www.sqlalchemy.org/trac/ticket/2196)
- en: '**[orm]**'
  id: totrans-2873
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: New event hook, MapperEvents.after_configured(). Called after a configure()
    step has completed and mappers were in fact affected. Theoretically this event
    is called once per application, unless new mappings are constructed after existing
    ones have been used already.
  id: totrans-2874
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新的事件钩子 `MapperEvents.after_configured()`。在 configure() 步骤完成并且 mapper 实际受到影响后调用。理论上，除非在使用现有映射之后构建新映射，否则每个应用程序都会调用此事件一次。
- en: '**[orm]**'
  id: totrans-2875
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: When an open Session is garbage collected, the objects within it which remain
    are considered detached again when they are add()-ed to a new Session. This is
    accomplished by an extra check that the previous “session_key” doesn’t actually
    exist among the pool of Sessions.
  id: totrans-2876
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当一个打开的 Session 被垃圾回收时，其中保留的对象再次被添加到新的 Session 中时被视为分离。这是通过额外检查之前的“session_key”是否实际存在于
    Sessions 池中来完成的。
- en: 'References: [#2281](https://www.sqlalchemy.org/trac/ticket/2281)'
  id: totrans-2877
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2281](https://www.sqlalchemy.org/trac/ticket/2281)
- en: '**[orm]**'
  id: totrans-2878
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'New declarative features:'
  id: totrans-2879
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新的声明性特性：
- en: __declare_last__() method, establishes an event listener for the class method
    that will be called when mappers are completed with the final “configure” step.
  id: totrans-2880
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`__declare_last__()` 方法，为类方法建立一个事件监听器，在完成最终的“configure”步骤时将调用该方法。'
- en: ''
  id: totrans-2881
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-2882
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: __abstract__ flag. The class will not be mapped at all when this flag is present
    on the class.
  id: totrans-2883
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`__abstract__` 标志。当类上存在此标志时，该类将不被映射。'
- en: ''
  id: totrans-2884
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-2885
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: New helper classes ConcreteBase, AbstractConcreteBase. Allow concrete mappings
    using declarative which automatically set up the “polymorphic_union” when the
    “configure” mapper step is invoked.
  id: totrans-2886
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的辅助类 `ConcreteBase`，`AbstractConcreteBase`。允许使用声明性创建具体映射，当“configure” mapper
    步骤被调用时，将自动设置“polymorphic_union”。
- en: ''
  id: totrans-2887
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-2888
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: The mapper itself has semi-private methods that allow the “with_polymorphic”
    selectable to be assigned to the mapper after it has already been configured.
  id: totrans-2889
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 映射器本身具有半私有方法，允许在配置后将“with_polymorphic”可选择项分配给映射器。
- en: 'References: [#2239](https://www.sqlalchemy.org/trac/ticket/2239)'
  id: totrans-2890
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2239](https://www.sqlalchemy.org/trac/ticket/2239)
- en: '**[orm]**'
  id: totrans-2891
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Declarative will warn when a subclass’ base uses @declared_attr for a regular
    column - this attribute does not propagate to subclasses.
  id: totrans-2892
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当子类的基类使用@declared_attr用于常规列时，Declarative将发出警告-此属性不会传播到子类。
- en: 'References: [#2283](https://www.sqlalchemy.org/trac/ticket/2283)'
  id: totrans-2893
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2283](https://www.sqlalchemy.org/trac/ticket/2283)
- en: '**[orm]**'
  id: totrans-2894
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: The integer “id” used to link a mapped instance with its owning Session is now
    generated by a sequence generation function rather than id(Session), to eliminate
    the possibility of recycled id() values causing an incorrect result, no need to
    check that object actually in the session.
  id: totrans-2895
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于将映射实例与其所属会话关联的整数“id”现在由序列生成函数生成，而不是id(Session)，以消除回收的id()值可能导致不正确结果的可能性，无需检查对象是否实际在会话中。
- en: 'References: [#2280](https://www.sqlalchemy.org/trac/ticket/2280)'
  id: totrans-2896
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2280](https://www.sqlalchemy.org/trac/ticket/2280)
- en: '**[orm]**'
  id: totrans-2897
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: 'Behavioral improvement: empty conjunctions such as and_() and or_() will be
    flattened in the context of an enclosing conjunction, i.e. and_(x, or_()) will
    produce ‘X’ and not ‘X AND ()’..'
  id: totrans-2898
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 行为改进：空的连接词，如and_()和or_()将在封闭连接词的上下文中被展平，即and_(x, or_())将产生‘X’而不是‘X AND ()’。
- en: 'References: [#2257](https://www.sqlalchemy.org/trac/ticket/2257)'
  id: totrans-2899
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2257](https://www.sqlalchemy.org/trac/ticket/2257)
- en: '**[orm]**'
  id: totrans-2900
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Fixed bug regarding calculation of “from” list for a select() element. The “from”
    calc is now delayed, so that if the construct uses a Column object that is not
    yet attached to a Table, but is later associated with a Table, it generates SQL
    using the table as a FROM. This change impacted fairly deeply the mechanics of
    how the FROM list as well as the “correlates” collection is calculated, as some
    “clause adaption” schemes (these are used very heavily in the ORM) were relying
    upon the fact that the “froms” collection would typically be cached before the
    adaption completed. The rework allows it such that the “froms” collection can
    be cleared and re-generated at any time.
  id: totrans-2901
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了有关计算select()元素的“from”列表的错误。现在“from”计算被延迟，因此如果构造使用尚未附加到表的Column对象，但稍后与表关联，它将使用表作为FROM生成SQL。这个更改对FROM列表以及“correlates”集合的计算机制产生了相当深远的影响，因为一些“子句适应”方案（这些在ORM中被广泛使用）依赖于“froms”集合通常在适应完成之前被缓存的事实。重做允许“froms”集合可以随时清除并重新生成。
- en: 'References: [#2261](https://www.sqlalchemy.org/trac/ticket/2261)'
  id: totrans-2902
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2261](https://www.sqlalchemy.org/trac/ticket/2261)
- en: '**[orm]**'
  id: totrans-2903
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Fixed bug whereby with_only_columns() method of Select would fail if a selectable
    were passed.. Also in 0.6.9.
  id: totrans-2904
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Select的with_only_columns()方法如果传递了可选择项将失败的错误。也在0.6.9版本中。
- en: 'References: [#2270](https://www.sqlalchemy.org/trac/ticket/2270)'
  id: totrans-2905
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2270](https://www.sqlalchemy.org/trac/ticket/2270)
- en: examples
  id: totrans-2906
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples]**'
  id: totrans-2907
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[示例]**'
- en: Adjusted dictlike-polymorphic.py example to apply the CAST such that it works
    on PG, other databases. Also in 0.6.9.
  id: totrans-2908
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了dictlike-polymorphic.py示例，应用CAST使其在PG和其他数据库上运行。也在0.6.9版本中。
- en: 'References: [#2266](https://www.sqlalchemy.org/trac/ticket/2266)'
  id: totrans-2909
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2266](https://www.sqlalchemy.org/trac/ticket/2266)
- en: engine
  id: totrans-2910
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine]**'
  id: totrans-2911
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: The recreate() method in all pool classes uses self.__class__ to get at the
    type of pool to produce, in the case of subclassing. Note there’s no usual need
    to subclass pools.
  id: totrans-2912
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 所有池类中的recreate()方法使用self.__class__来获取要生成的池类型，在子类化的情况下。请注意，通常不需要对池进行子类化。
- en: 'References: [#2254](https://www.sqlalchemy.org/trac/ticket/2254)'
  id: totrans-2913
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2254](https://www.sqlalchemy.org/trac/ticket/2254)
- en: '**[engine]**'
  id: totrans-2914
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: Improvement to multi-param statement logging, long lists of bound parameter
    sets will be compressed with an informative indicator of the compression taking
    place. Exception messages use the same improved formatting.
  id: totrans-2915
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对多参数语句日志记录的改进，长列表的绑定参数集将被压缩，并提供有关正在进行的压缩的信息指示器。异常消息使用相同的改进格式。
- en: 'References: [#2243](https://www.sqlalchemy.org/trac/ticket/2243)'
  id: totrans-2916
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2243](https://www.sqlalchemy.org/trac/ticket/2243)
- en: '**[engine]**'
  id: totrans-2917
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: Added optional “sa_pool_key” argument to pool.manage(dbapi).connect() so that
    serialization of args is not necessary.
  id: totrans-2918
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了可选的“sa_pool_key”参数到pool.manage(dbapi).connect()，以便不需要序列化参数。
- en: '**[engine]**'
  id: totrans-2919
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: The entry point resolution supported by create_engine() now supports resolution
    of individual DBAPI drivers on top of a built-in or entry point-resolved dialect,
    using the standard ‘+’ notation - it’s converted to a ‘.’ before being resolved
    as an entry point.
  id: totrans-2920
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: create_engine() 支持的入口点解析现在支持在内置或入口点解析的方言上解析单独的 DBAPI 驱动程序，使用标准的“+”表示法 - 在解析为入口点之前，它会被转换为“.”。
- en: 'References: [#2286](https://www.sqlalchemy.org/trac/ticket/2286)'
  id: totrans-2921
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2286](https://www.sqlalchemy.org/trac/ticket/2286)
- en: '**[engine]**'
  id: totrans-2922
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: Added an exception catch + warning for the “return unicode detection” step within
    connect, allows databases that crash on NVARCHAR to continue initializing, assuming
    no NVARCHAR type implemented.
  id: totrans-2923
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对连接中“返回 unicode 检测”步骤的异常捕获和警告，允许在 NVARCHAR 上崩溃的数据库继续初始化，假设没有实现 NVARCHAR 类型。
- en: 'References: [#2299](https://www.sqlalchemy.org/trac/ticket/2299)'
  id: totrans-2924
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2299](https://www.sqlalchemy.org/trac/ticket/2299)
- en: schema
  id: totrans-2925
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: '**[schema]**'
  id: totrans-2926
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: Modified Column.copy() to use _constructor(), which defaults to self.__class__,
    in order to create the new object. This allows easier support of subclassing Column.
  id: totrans-2927
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了 Column.copy() 方法以使用 _constructor()，它默认为 self.__class__，以创建新对象。这样可以更容易地支持
    Column 的子类化。
- en: 'References: [#2284](https://www.sqlalchemy.org/trac/ticket/2284)'
  id: totrans-2928
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2284](https://www.sqlalchemy.org/trac/ticket/2284)
- en: '**[schema]**'
  id: totrans-2929
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: Added a slightly nicer __repr__() to SchemaItem classes. Note the repr here
    can’t fully support the “repr is the constructor” idea since schema items can
    be very deeply nested/cyclical, have late initialization of some things, etc.
  id: totrans-2930
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 SchemaItem 类添加了稍微更好的 __repr__()。注意，这里的 repr 不能完全支持“repr 就是构造函数”的想法，因为模式项可能会非常深层次地嵌套/循环，有些东西可能会延迟初始化等。
- en: 'References: [#2223](https://www.sqlalchemy.org/trac/ticket/2223)'
  id: totrans-2931
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2223](https://www.sqlalchemy.org/trac/ticket/2223)
- en: postgresql
  id: totrans-2932
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql]**'
  id: totrans-2933
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Added “postgresql_using” argument to Index(), produces USING clause to specify
    index implementation for PG. . Thanks to Ryan P. Kelly for the patch.
  id: totrans-2934
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 Index() 添加了“postgresql_using”参数，用于产生 USING 子句以指定 PG 的索引实现方式。感谢 Ryan P. Kelly
    提供补丁。
- en: 'References: [#2290](https://www.sqlalchemy.org/trac/ticket/2290)'
  id: totrans-2935
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2290](https://www.sqlalchemy.org/trac/ticket/2290)
- en: '**[postgresql]**'
  id: totrans-2936
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Added client_encoding parameter to create_engine() when the postgresql+psycopg2
    dialect is used; calls the psycopg2 set_client_encoding() method with the value
    upon connect.
  id: totrans-2937
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用 postgresql+psycopg2 方言时，create_engine() 添加了 client_encoding 参数；连接时调用 psycopg2
    的 set_client_encoding() 方法并传递值。
- en: 'References: [#1839](https://www.sqlalchemy.org/trac/ticket/1839)'
  id: totrans-2938
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1839](https://www.sqlalchemy.org/trac/ticket/1839)
- en: '**[postgresql]**'
  id: totrans-2939
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Fixed bug related to whereby the same modified index behavior in PG 9 affected
    primary key reflection on a renamed column.. Also in 0.6.9.
  id: totrans-2940
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，该 bug 与 PG 9 中修改索引行为影响重命名列上的主键反射有关。也出现在 0.6.9 版本中。
- en: 'References: [#2141](https://www.sqlalchemy.org/trac/ticket/2141), [#2291](https://www.sqlalchemy.org/trac/ticket/2291)'
  id: totrans-2941
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2141](https://www.sqlalchemy.org/trac/ticket/2141), [#2291](https://www.sqlalchemy.org/trac/ticket/2291)
- en: '**[postgresql]**'
  id: totrans-2942
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Reflection functions for Table, Sequence no longer case insensitive. Names can
    be differ only in case and will be correctly distinguished.
  id: totrans-2943
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 Table、Sequence 的反射函数不再区分大小写。名称只能在大小写上有所不同，并且将被正确区分。
- en: 'References: [#2256](https://www.sqlalchemy.org/trac/ticket/2256)'
  id: totrans-2944
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2256](https://www.sqlalchemy.org/trac/ticket/2256)
- en: '**[postgresql]**'
  id: totrans-2945
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Use an atomic counter as the “random number” source for server side cursor names;
    conflicts have been reported in rare cases.
  id: totrans-2946
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用原子计数器作为服务器端游标名称的“随机数”源；在极少数情况下报告了冲突。
- en: '**[postgresql]**'
  id: totrans-2947
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Narrowed the assumption made when reflecting a foreign-key referenced table
    with schema in the current search path; an explicit schema will be applied to
    the referenced table only if it actually matches that of the referencing table,
    which also has an explicit schema. Previously it was assumed that “current” schema
    was synonymous with the full search_path.
  id: totrans-2948
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 缩小了在反射当前搜索路径中具有模式的外键引用表时所做的假设范围；只有在引用表的模式确实与引用表的模式匹配时，才会应用显式模式到引用表。以前假设“当前”模式与完整的搜索路径是等同的。
- en: 'References: [#2249](https://www.sqlalchemy.org/trac/ticket/2249)'
  id: totrans-2949
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2249](https://www.sqlalchemy.org/trac/ticket/2249)
- en: mysql
  id: totrans-2950
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-2951
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: a CREATE TABLE will put the COLLATE option after CHARSET, which appears to be
    part of MySQL’s arbitrary rules regarding if it will actually work or not. Also
    in 0.6.9.
  id: totrans-2952
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: CREATE TABLE 将在 CHARSET 之后放置 COLLATE 选项，这似乎是 MySQL 关于它是否实际工作的任意规则的一部分。也出现在 0.6.9
    版本中。
- en: 'References: [#2225](https://www.sqlalchemy.org/trac/ticket/2225)'
  id: totrans-2953
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2225](https://www.sqlalchemy.org/trac/ticket/2225)
- en: '**[mysql]**'
  id: totrans-2954
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Added mysql_length parameter to Index construct, specifies “length” for indexes.
  id: totrans-2955
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向Index构造添加了mysql_length参数，指定索引的“长度”。
- en: 'References: [#2293](https://www.sqlalchemy.org/trac/ticket/2293)'
  id: totrans-2956
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2293](https://www.sqlalchemy.org/trac/ticket/2293)
- en: sqlite
  id: totrans-2957
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite]**'
  id: totrans-2958
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: Ensured that the same ValueError is raised for illegal date/time/datetime string
    parsed from the database regardless of whether C extensions are in use or not.
  id: totrans-2959
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保无论是否使用C扩展，从数据库解析的非法日期/时间/日期时间字符串都会引发相同的ValueError。
- en: mssql
  id: totrans-2960
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-2961
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Changes to attempt support of FreeTDS 0.91 with Pyodbc. This includes that string
    binds are sent as Python unicode objects when FreeTDS 0.91 is detected, and a
    CAST(? AS NVARCHAR) is used when we detect for a table. However, I’d continue
    to characterize Pyodbc + FreeTDS 0.91 behavior as pretty crappy, there are still
    many queries such as used in reflection which cause a core dump on Linux, and
    it is not really usable at all on OSX, MemoryErrors abound and just plain broken
    unicode support.
  id: totrans-2962
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 尝试支持FreeTDS 0.91与Pyodbc。这包括在检测到FreeTDS 0.91时将字符串绑定发送为Python unicode对象，并在检测到表时使用CAST(?
    AS NVARCHAR)。然而，我会继续将Pyodbc + FreeTDS 0.91的行为描述为相当糟糕，仍然有许多查询（例如在反射中使用的查询）在Linux上导致核心转储，在OSX上根本无法使用，MemoryErrors随处可见，对Unicode支持有严重问题。
- en: 'References: [#2273](https://www.sqlalchemy.org/trac/ticket/2273)'
  id: totrans-2963
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2273](https://www.sqlalchemy.org/trac/ticket/2273)
- en: '**[mssql]**'
  id: totrans-2964
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: The behavior of =/!= when comparing a scalar select to a value will no longer
    produce IN/NOT IN as of 0.8; this behavior is a little too heavy handed (use `in_()`
    if you want to emit IN) and now emits a deprecation warning. To get the 0.8 behavior
    immediately and remove the warning, a compiler recipe is given at [https://www.sqlalchemy.org/docs/07/dialects/mssql.html#scalar-select-comparisons](https://www.sqlalchemy.org/docs/07/dialects/mssql.html#scalar-select-comparisons)
    to override the behavior of visit_binary().
  id: totrans-2965
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当比较标量选择与值时，= /！=的行为将不再在0.8版本中产生IN / NOT IN；这种行为有点过于武断（如果要发出IN，请使用`in_()`），现在会发出弃用警告。要立即获得0.8版本的行为并消除警告，可以在[https://www.sqlalchemy.org/docs/07/dialects/mssql.html#scalar-select-comparisons](https://www.sqlalchemy.org/docs/07/dialects/mssql.html#scalar-select-comparisons)给出的编译器配方中覆盖visit_binary()的行为。
- en: 'References: [#2277](https://www.sqlalchemy.org/trac/ticket/2277)'
  id: totrans-2966
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2277](https://www.sqlalchemy.org/trac/ticket/2277)
- en: '**[mssql]**'
  id: totrans-2967
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: ”0” is accepted as an argument for limit() which will produce “TOP 0”.
  id: totrans-2968
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “0”被接受为limit()的参数，将产生“TOP 0”。
- en: 'References: [#2222](https://www.sqlalchemy.org/trac/ticket/2222)'
  id: totrans-2969
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2222](https://www.sqlalchemy.org/trac/ticket/2222)
- en: oracle
  id: totrans-2970
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-2971
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Fixed ReturningResultProxy for zxjdbc dialect.. Regression from 0.6.
  id: totrans-2972
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了zxjdbc方言的ReturningResultProxy。从0.6开始的回归。
- en: 'References: [#2272](https://www.sqlalchemy.org/trac/ticket/2272)'
  id: totrans-2973
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2272](https://www.sqlalchemy.org/trac/ticket/2272)
- en: '**[oracle]**'
  id: totrans-2974
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: The String type now generates VARCHAR2 on Oracle which is recommended as the
    default VARCHAR. Added an explicit VARCHAR2 and NVARCHAR2 to the Oracle dialect
    as well. Using NVARCHAR still generates “NVARCHAR2” - there is no “NVARCHAR” on
    Oracle - this remains a slight breakage of the “uppercase types always give exactly
    that” policy. VARCHAR still generates “VARCHAR”, keeping with the policy. If Oracle
    were to ever define “VARCHAR” as something different as they claim (IMHO this
    will never happen), the type would be available.
  id: totrans-2975
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: String类型现在在Oracle上生成VARCHAR2，这是推荐的默认VARCHAR。在Oracle方言中还添加了显式的VARCHAR2和NVARCHAR2。使用NVARCHAR仍然生成“NVARCHAR2”
    - 在Oracle上没有“NVARCHAR” - 这仍然是“大写类型始终给出确切内容”的政策的轻微破坏。VARCHAR仍然生成“VARCHAR”，遵循该政策。如果Oracle曾经定义“VARCHAR”为他们声称的不同内容（在我看���永远不会发生），该类型将可用。
- en: 'References: [#2252](https://www.sqlalchemy.org/trac/ticket/2252)'
  id: totrans-2976
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2252](https://www.sqlalchemy.org/trac/ticket/2252)
- en: misc
  id: totrans-2977
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[types]**'
  id: totrans-2978
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[types]**'
- en: Extra keyword arguments to the base Float type beyond “precision” and “asdecimal”
    are ignored; added a deprecation warning here and additional docs, related to
  id: totrans-2979
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 超出基本Float类型的“精度”和“asdecimal”之外的额外关键字参数将被忽略；这里添加了一个弃用警告和额外的文档，相关于
- en: 'References: [#2258](https://www.sqlalchemy.org/trac/ticket/2258)'
  id: totrans-2980
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2258](https://www.sqlalchemy.org/trac/ticket/2258)
- en: '**[ext]**'
  id: totrans-2981
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: SQLSoup will not be included in version 0.8 of SQLAlchemy; while useful, we
    would like to keep SQLAlchemy itself focused on one ORM usage paradigm. SQLSoup
    will hopefully soon be superseded by a third party project.
  id: totrans-2982
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLSoup将不包含在SQLAlchemy的0.8版本中；虽然有用，但我们希望保持SQLAlchemy本身专注于一个ORM使用范例。SQLSoup很快将被第三方项目取代。
- en: 'References: [#2262](https://www.sqlalchemy.org/trac/ticket/2262)'
  id: totrans-2983
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2262](https://www.sqlalchemy.org/trac/ticket/2262)
- en: '**[ext]**'
  id: totrans-2984
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: Added local_attr, remote_attr, attr accessors to AssociationProxy, providing
    quick access to the proxied attributes at the class level.
  id: totrans-2985
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 AssociationProxy 添加了 local_attr、remote_attr、attr 访问器，提供对类级别的代理属性的快速访问。
- en: 'References: [#2236](https://www.sqlalchemy.org/trac/ticket/2236)'
  id: totrans-2986
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2236](https://www.sqlalchemy.org/trac/ticket/2236)
- en: '**[ext]**'
  id: totrans-2987
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: Changed the update() method on association proxy dictionary to use a duck typing
    approach, i.e. checks for “keys”, to discern between update({}) and update((a,
    b)). Previously, passing a dictionary that had tuples as keys would be misinterpreted
    as a sequence.
  id: totrans-2988
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更改了关联代理字典上的 update() 方法，以使用鸭子类型方法，即检查“keys”，以区分 update({}) 和 update((a, b))。先前，传递具有元组作为键的字典会被错误解释为序列。
- en: 'References: [#2275](https://www.sqlalchemy.org/trac/ticket/2275)'
  id: totrans-2989
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2275](https://www.sqlalchemy.org/trac/ticket/2275)
- en: general
  id: totrans-2990
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一般
- en: '**[general]**'
  id: totrans-2991
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general]**'
- en: Adjusted the “importlater” mechanism, which is used internally to resolve import
    cycles, such that the usage of __import__ is completed when the import of sqlalchemy
    or sqlalchemy.orm is done, thereby avoiding any usage of __import__ after the
    application starts new threads, fixes. Also in 0.6.9.
  id: totrans-2992
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了“importlater”机制，该机制在内部用于解决导入循环，使得在导入 sqlalchemy 或 sqlalchemy.orm 后完成对 __import__
    的使用，从而避免在应用程序启动新线程后使用任何 __import__。也适用于 0.6.9 版本。
- en: 'References: [#2279](https://www.sqlalchemy.org/trac/ticket/2279)'
  id: totrans-2993
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2279](https://www.sqlalchemy.org/trac/ticket/2279)
- en: orm
  id: totrans-2994
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-2995
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Improved query.join() such that the “left” side can more flexibly be a non-ORM
    selectable, such as a subquery. A selectable placed in select_from() will now
    be used as the left side, favored over implicit usage of a mapped entity. If the
    join still fails based on lack of foreign keys, the error message includes this
    detail. Thanks to brianrhude on IRC for the test case.
  id: totrans-2996
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了 query.join()，使得“左”侧可以更灵活地是非 ORM 可选择的，比如子查询。放置在 select_from() 中的可选择项现在将用作左侧，优先于对映射实体的隐式使用。如果基于外键缺失而连接仍然失败，则错误消息将包含此详细信息。感谢
    IRC 上的 brianrhude 提供的测试用例。
- en: 'References: [#2298](https://www.sqlalchemy.org/trac/ticket/2298)'
  id: totrans-2997
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2298](https://www.sqlalchemy.org/trac/ticket/2298)
- en: '**[orm]**'
  id: totrans-2998
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added after_soft_rollback() Session event. This event fires unconditionally
    whenever rollback() is called, regardless of if an actual DBAPI level rollback
    occurred. This event is specifically designed to allow operations with the Session
    to proceed after a rollback when the Session.is_active is True.
  id: totrans-2999
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 after_soft_rollback() 会话事件。无论是否发生了实际的 DBAPI 级别的回滚，此事件都会无条件触发 rollback()
    被调用。此事件专门设计用于在 rollback() 后 Session.is_active 为 True 时允许会话操作继续进行。
- en: 'References: [#2241](https://www.sqlalchemy.org/trac/ticket/2241)'
  id: totrans-3000
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2241](https://www.sqlalchemy.org/trac/ticket/2241)
- en: '**[orm]**'
  id: totrans-3001
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added “adapt_on_names” boolean flag to orm.aliased() construct. Allows an aliased()
    construct to link the ORM entity to a selectable that contains aggregates or other
    derived forms of a particular attribute, provided the name is the same as that
    of the entity mapped column.
  id: totrans-3002
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 orm.aliased() 构造添加了“adapt_on_names”布尔标志。允许 aliased() 构造将 ORM 实体链接到包含聚合或特定属性的其他派生形式的可选择项，前提是名称与映射列的实体相同。
- en: '**[orm]**'
  id: totrans-3003
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added new flag expire_on_flush=False to column_property(), marks those properties
    that would otherwise be considered to be “readonly”, i.e. derived from SQL expressions,
    to retain their value after a flush has occurred, including if the parent object
    itself was involved in an update.
  id: totrans-3004
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 column_property() 添加了新标志 expire_on_flush=False，将那些否则被认为是“只读”的属性标记为，在刷新后保留它们的值，包括父对象本身参与更新的情况。
- en: '**[orm]**'
  id: totrans-3005
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Enhanced the instrumentation in the ORM to support Py3K’s new argument style
    of “required kw arguments”, i.e. fn(a, b, *, c, d), fn(a, b, *args, c, d). Argument
    signatures of mapped object’s __init__ method will be preserved, including required
    kw rules.
  id: totrans-3006
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增强了 ORM 中的仪器设备以支持 Py3K 的新参数样式“required kw arguments”，即 fn(a, b, *, c, d)，fn(a,
    b, *args, c, d)。映射对象的 __init__ 方法的参数签名将被保留，包括必需的 kw 规则。
- en: 'References: [#2237](https://www.sqlalchemy.org/trac/ticket/2237)'
  id: totrans-3007
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2237](https://www.sqlalchemy.org/trac/ticket/2237)
- en: '**[orm]**'
  id: totrans-3008
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug in unit of work whereby detection of “cycles” among classes in highly
    interlinked patterns would not produce a deterministic result; thereby sometimes
    missing some nodes that should be considered cycles and causing further issues
    down the road. Note this bug is in 0.6 also; not backported at the moment.
  id: totrans-3009
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了工作单元中的错误，其中在高度相互链接的模式中检测类之间的“循环”不会产生确定性结果；因此，有时会错过应该被视为循环的一些节点，并在后续引发更多问题。请注意，此错误也存在于
    0.6 版本中；目前没有回溯。
- en: 'References: [#2282](https://www.sqlalchemy.org/trac/ticket/2282)'
  id: totrans-3010
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2282](https://www.sqlalchemy.org/trac/ticket/2282)
- en: '**[orm]**'
  id: totrans-3011
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Fixed a variety of synonym()-related regressions from 0.6:'
  id: totrans-3012
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了从0.6版本中引入的各种synonym()-相关回归问题：
- en: making a synonym against a synonym now works.
  id: totrans-3013
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在对一个同义词进行同义词处理是有效的。
- en: ''
  id: totrans-3014
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-3015
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: synonyms made against a relationship() can be passed to query.join(), options
    sent to query.options(), passed by name to query.with_parent().
  id: totrans-3016
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与relationship()相关的同义词可以传递给query.join()、发送到query.options()的选项，并按名称传递给query.with_parent()。
- en: '**[orm]**'
  id: totrans-3017
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby mapper.order_by attribute would be ignored in the “inner”
    query within a subquery eager load. . Also in 0.6.9.
  id: totrans-3018
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，其中mapper.order_by属性在子查询贪婪加载中的“内部”查询中将被忽略。同时也在0.6.9版本中修复。
- en: 'References: [#2287](https://www.sqlalchemy.org/trac/ticket/2287)'
  id: totrans-3019
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2287](https://www.sqlalchemy.org/trac/ticket/2287)
- en: '**[orm]**'
  id: totrans-3020
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Identity map .discard() uses dict.pop(,None) internally instead of “del” to
    avoid KeyError/warning during a non-determinate gc teardown
  id: totrans-3021
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Identity map .discard()在内部使用dict.pop(,None)而不是“del”，以避免在非确定性gc拆除期间出现KeyError/警告。
- en: 'References: [#2267](https://www.sqlalchemy.org/trac/ticket/2267)'
  id: totrans-3022
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2267](https://www.sqlalchemy.org/trac/ticket/2267)
- en: '**[orm]**'
  id: totrans-3023
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed regression in new composite rewrite where deferred=True option failed
    due to missing import
  id: totrans-3024
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新的composite重写中由于缺少导入而导致deferred=True选项失败的回归问题。
- en: 'References: [#2253](https://www.sqlalchemy.org/trac/ticket/2253)'
  id: totrans-3025
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2253](https://www.sqlalchemy.org/trac/ticket/2253)
- en: '**[orm]**'
  id: totrans-3026
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Reinstated “comparator_factory” argument to composite(), removed when 0.7 was
    released.
  id: totrans-3027
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重新引入了composite()的“comparator_factory”参数，在0.7发布时删除。
- en: 'References: [#2248](https://www.sqlalchemy.org/trac/ticket/2248)'
  id: totrans-3028
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2248](https://www.sqlalchemy.org/trac/ticket/2248)
- en: '**[orm]**'
  id: totrans-3029
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug in query.join() which would occur in a complex multiple-overlapping
    path scenario, where the same table could be joined to twice. Thanks *much* to
    Dave Vitek for the excellent fix here.
  id: totrans-3030
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在复杂的多重重叠路径场景中会发生的query.join()中的bug，在此场景中，同一表可能会被连接两次。非常感谢Dave Vitek在这里的出色修复。
- en: 'References: [#2247](https://www.sqlalchemy.org/trac/ticket/2247)'
  id: totrans-3031
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2247](https://www.sqlalchemy.org/trac/ticket/2247)
- en: '**[orm]**'
  id: totrans-3032
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query will convert an OFFSET of zero when slicing into None, so that needless
    OFFSET clauses are not invoked.
  id: totrans-3033
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当查询（Query）将OFFSET设置为零时，将其转换为None，以避免不必要的OFFSET子句被调用。
- en: '**[orm]**'
  id: totrans-3034
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Repaired edge case where mapper would fail to fully update internal state when
    a relationship on a new mapper would establish a backref on the first mapper.
  id: totrans-3035
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个边缘情况，在新映射器上的关系（relationship）建立了第一个映射器上的反向引用时，mapper将无法完全更新内部状态。
- en: '**[orm]**'
  id: totrans-3036
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby if __eq__() was redefined, a relationship many-to-one lazyload
    would hit the __eq__() and fail. Does not apply to 0.6.9.
  id: totrans-3037
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，其中如果重新定义了__eq__()，则关系（relationship）多对一懒加载会触发__eq__()并失败。不适用于0.6.9版本。
- en: 'References: [#2260](https://www.sqlalchemy.org/trac/ticket/2260)'
  id: totrans-3038
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2260](https://www.sqlalchemy.org/trac/ticket/2260)
- en: '**[orm]**'
  id: totrans-3039
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Calling class_mapper() and passing in an object that is not a “type” (i.e. a
    class that could potentially be mapped) now raises an informative ArgumentError,
    rather than UnmappedClassError.
  id: totrans-3040
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调用class_mapper()并传入一个不是“类型”的对象（即可能被映射的类）现在会引发一个具有信息性的ArgumentError，而不是UnmappedClassError。
- en: 'References: [#2196](https://www.sqlalchemy.org/trac/ticket/2196)'
  id: totrans-3041
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2196](https://www.sqlalchemy.org/trac/ticket/2196)
- en: '**[orm]**'
  id: totrans-3042
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: New event hook, MapperEvents.after_configured(). Called after a configure()
    step has completed and mappers were in fact affected. Theoretically this event
    is called once per application, unless new mappings are constructed after existing
    ones have been used already.
  id: totrans-3043
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新的事件钩子，MapperEvents.after_configured()。在配置（configure()）步骤完成并实际受到影响的映射器（mappers）后调用。理论上，此事件每个应用程序调用一次，除非在已使用现有映射器之后构造新映射。
- en: '**[orm]**'
  id: totrans-3044
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: When an open Session is garbage collected, the objects within it which remain
    are considered detached again when they are add()-ed to a new Session. This is
    accomplished by an extra check that the previous “session_key” doesn’t actually
    exist among the pool of Sessions.
  id: totrans-3045
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当一个打开的Session被垃圾回收时，其中仍然存在的对象在被添加到新的Session时被认为是分离的。这是通过额外检查之前的“session_key”是否实际上存在于Sessions池中完成的。
- en: 'References: [#2281](https://www.sqlalchemy.org/trac/ticket/2281)'
  id: totrans-3046
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2281](https://www.sqlalchemy.org/trac/ticket/2281)
- en: '**[orm]**'
  id: totrans-3047
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'New declarative features:'
  id: totrans-3048
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新的声明性功能：
- en: __declare_last__() method, establishes an event listener for the class method
    that will be called when mappers are completed with the final “configure” step.
  id: totrans-3049
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: __declare_last__()方法，为类方法建立一个事件监听器，该监听器将在映射器（mappers）完成最终的“configure”步骤时调用。
- en: ''
  id: totrans-3050
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-3051
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: __abstract__ flag. The class will not be mapped at all when this flag is present
    on the class.
  id: totrans-3052
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: __abstract__ 标志。当类上存在此标志时，该类将不会被映射。
- en: ''
  id: totrans-3053
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-3054
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: New helper classes ConcreteBase, AbstractConcreteBase. Allow concrete mappings
    using declarative which automatically set up the “polymorphic_union” when the
    “configure” mapper step is invoked.
  id: totrans-3055
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的辅助类 ConcreteBase、AbstractConcreteBase。允许使用声明性进行具体映射，当“configure”映射器步骤被调用时，自动设置“polymorphic_union”。
- en: ''
  id: totrans-3056
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-3057
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: The mapper itself has semi-private methods that allow the “with_polymorphic”
    selectable to be assigned to the mapper after it has already been configured.
  id: totrans-3058
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 映射器本身具有半私有方法，允许在配置后将“with_polymorphic”可选择的分配给映射器。
- en: 'References: [#2239](https://www.sqlalchemy.org/trac/ticket/2239)'
  id: totrans-3059
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2239](https://www.sqlalchemy.org/trac/ticket/2239)
- en: '**[orm]**'
  id: totrans-3060
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Declarative will warn when a subclass’ base uses @declared_attr for a regular
    column - this attribute does not propagate to subclasses.
  id: totrans-3061
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当子类的基类使用 @declared_attr 用于常规列时，声明性将发出警告 - 此属性不会传播到子类。
- en: 'References: [#2283](https://www.sqlalchemy.org/trac/ticket/2283)'
  id: totrans-3062
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2283](https://www.sqlalchemy.org/trac/ticket/2283)
- en: '**[orm]**'
  id: totrans-3063
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The integer “id” used to link a mapped instance with its owning Session is now
    generated by a sequence generation function rather than id(Session), to eliminate
    the possibility of recycled id() values causing an incorrect result, no need to
    check that object actually in the session.
  id: totrans-3064
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于将映射实例与其所属会话关联的整数“id”现在由序列生成函数生成，而不是 id(Session)，以消除回收的 id() 值可能导致不正确结果的可能性，无需检查对象实际上是���在会话中。
- en: 'References: [#2280](https://www.sqlalchemy.org/trac/ticket/2280)'
  id: totrans-3065
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2280](https://www.sqlalchemy.org/trac/ticket/2280)
- en: '**[orm]**'
  id: totrans-3066
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Behavioral improvement: empty conjunctions such as and_() and or_() will be
    flattened in the context of an enclosing conjunction, i.e. and_(x, or_()) will
    produce ‘X’ and not ‘X AND ()’..'
  id: totrans-3067
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 行为改进：空连接词，如 and_() 和 or_()，将在包含连接词的上下文中被展开，即 and_(x, or_()) 将产生‘X’而不是‘X AND
    ()’。
- en: 'References: [#2257](https://www.sqlalchemy.org/trac/ticket/2257)'
  id: totrans-3068
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2257](https://www.sqlalchemy.org/trac/ticket/2257)
- en: '**[orm]**'
  id: totrans-3069
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug regarding calculation of “from” list for a select() element. The “from”
    calc is now delayed, so that if the construct uses a Column object that is not
    yet attached to a Table, but is later associated with a Table, it generates SQL
    using the table as a FROM. This change impacted fairly deeply the mechanics of
    how the FROM list as well as the “correlates” collection is calculated, as some
    “clause adaption” schemes (these are used very heavily in the ORM) were relying
    upon the fact that the “froms” collection would typically be cached before the
    adaption completed. The rework allows it such that the “froms” collection can
    be cleared and re-generated at any time.
  id: totrans-3070
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了有关计算“from”列表的 bug，用于 select() 元素。现在，“from”计算被延迟，因此如果构造使用尚未附加到表格但稍后与表格关联的
    Column 对象，则会生成使用表格作为 FROM 的 SQL。这个更改对 FROM 列表以及“correlates”集合的计算机制产生了相当深远的影响，因为一些“子句适应”方案（这些方案在
    ORM 中被大量使用）依赖于“froms”集合通常在适应完成之前被缓存的事实。重新设计使得“froms”集合可以随时清除并重新生成。
- en: 'References: [#2261](https://www.sqlalchemy.org/trac/ticket/2261)'
  id: totrans-3071
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2261](https://www.sqlalchemy.org/trac/ticket/2261)
- en: '**[orm]**'
  id: totrans-3072
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby with_only_columns() method of Select would fail if a selectable
    were passed.. Also in 0.6.9.
  id: totrans-3073
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即如果传递了可选择项，则 Select 的 with_only_columns() 方法将失败。也适用于 0.6.9 版本。
- en: 'References: [#2270](https://www.sqlalchemy.org/trac/ticket/2270)'
  id: totrans-3074
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2270](https://www.sqlalchemy.org/trac/ticket/2270)
- en: examples
  id: totrans-3075
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples]**'
  id: totrans-3076
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples]**'
- en: Adjusted dictlike-polymorphic.py example to apply the CAST such that it works
    on PG, other databases. Also in 0.6.9.
  id: totrans-3077
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整 dictlike-polymorphic.py 示例以应用 CAST，使其在 PG 和其他数据库上运行。也适用于 0.6.9 版本。
- en: 'References: [#2266](https://www.sqlalchemy.org/trac/ticket/2266)'
  id: totrans-3078
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2266](https://www.sqlalchemy.org/trac/ticket/2266)
- en: engine
  id: totrans-3079
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine]**'
  id: totrans-3080
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: The recreate() method in all pool classes uses self.__class__ to get at the
    type of pool to produce, in the case of subclassing. Note there’s no usual need
    to subclass pools.
  id: totrans-3081
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 所有池类中的 recreate() 方法使用 self.__class__ 来获取要生成的池类型，在子类化的情况下。请注意，通常不需要对池进行子类化。
- en: 'References: [#2254](https://www.sqlalchemy.org/trac/ticket/2254)'
  id: totrans-3082
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2254](https://www.sqlalchemy.org/trac/ticket/2254)
- en: '**[engine]**'
  id: totrans-3083
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: Improvement to multi-param statement logging, long lists of bound parameter
    sets will be compressed with an informative indicator of the compression taking
    place. Exception messages use the same improved formatting.
  id: totrans-3084
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进多参数语句记录，长列表的绑定参数集将被压缩，并附带有指示压缩正在进行的信息。异常消息使用相同的改进格式。
- en: 'References: [#2243](https://www.sqlalchemy.org/trac/ticket/2243)'
  id: totrans-3085
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2243](https://www.sqlalchemy.org/trac/ticket/2243)
- en: '**[engine]**'
  id: totrans-3086
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: Added optional “sa_pool_key” argument to pool.manage(dbapi).connect() so that
    serialization of args is not necessary.
  id: totrans-3087
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了可选的“sa_pool_key”参数到pool.manage(dbapi).connect()，这样就不需要对参数进行序列化。
- en: '**[engine]**'
  id: totrans-3088
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: The entry point resolution supported by create_engine() now supports resolution
    of individual DBAPI drivers on top of a built-in or entry point-resolved dialect,
    using the standard ‘+’ notation - it’s converted to a ‘.’ before being resolved
    as an entry point.
  id: totrans-3089
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: create_engine()现在支持解析单独的DBAPI驱动程序的入口点解析，使用标准的‘+’符号 - 在解析为入口点之前会将其转换为‘.’。
- en: 'References: [#2286](https://www.sqlalchemy.org/trac/ticket/2286)'
  id: totrans-3090
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2286](https://www.sqlalchemy.org/trac/ticket/2286)
- en: '**[engine]**'
  id: totrans-3091
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: Added an exception catch + warning for the “return unicode detection” step within
    connect, allows databases that crash on NVARCHAR to continue initializing, assuming
    no NVARCHAR type implemented.
  id: totrans-3092
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在连接中添加了一个异常捕获+警告，用于“返回unicode检测”步骤，允许在NVARCHAR上崩溃的数据库继续初始化，假设没有实现NVARCHAR类型。
- en: 'References: [#2299](https://www.sqlalchemy.org/trac/ticket/2299)'
  id: totrans-3093
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2299](https://www.sqlalchemy.org/trac/ticket/2299)
- en: schema
  id: totrans-3094
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: '**[schema]**'
  id: totrans-3095
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: Modified Column.copy() to use _constructor(), which defaults to self.__class__,
    in order to create the new object. This allows easier support of subclassing Column.
  id: totrans-3096
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了Column.copy()以使用_constructor()，默认为self.__class__，以创建新对象。这样可以更容易地支持Column的子类化。
- en: 'References: [#2284](https://www.sqlalchemy.org/trac/ticket/2284)'
  id: totrans-3097
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2284](https://www.sqlalchemy.org/trac/ticket/2284)
- en: '**[schema]**'
  id: totrans-3098
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: Added a slightly nicer __repr__() to SchemaItem classes. Note the repr here
    can’t fully support the “repr is the constructor” idea since schema items can
    be very deeply nested/cyclical, have late initialization of some things, etc.
  id: totrans-3099
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对SchemaItem类添加了稍微更好的__repr__()。请注意，这里的repr不能完全支持“repr即构造函数”的想法，因为模式项可以非常深层嵌套/循环，某些内容的初始化较晚等。
- en: 'References: [#2223](https://www.sqlalchemy.org/trac/ticket/2223)'
  id: totrans-3100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2223](https://www.sqlalchemy.org/trac/ticket/2223)
- en: postgresql
  id: totrans-3101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql]**'
  id: totrans-3102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Added “postgresql_using” argument to Index(), produces USING clause to specify
    index implementation for PG. . Thanks to Ryan P. Kelly for the patch.
  id: totrans-3103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向Index()添加了“postgresql_using”参数，生成USING子句以指定PG的索引实现方式。感谢Ryan P. Kelly的补丁。
- en: 'References: [#2290](https://www.sqlalchemy.org/trac/ticket/2290)'
  id: totrans-3104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2290](https://www.sqlalchemy.org/trac/ticket/2290)
- en: '**[postgresql]**'
  id: totrans-3105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Added client_encoding parameter to create_engine() when the postgresql+psycopg2
    dialect is used; calls the psycopg2 set_client_encoding() method with the value
    upon connect.
  id: totrans-3106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用postgresql+psycopg2方言时，向create_engine()添加client_encoding参数；在连接时调用psycopg2的set_client_encoding()方法并传递值。
- en: 'References: [#1839](https://www.sqlalchemy.org/trac/ticket/1839)'
  id: totrans-3107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1839](https://www.sqlalchemy.org/trac/ticket/1839)
- en: '**[postgresql]**'
  id: totrans-3108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Fixed bug related to whereby the same modified index behavior in PG 9 affected
    primary key reflection on a renamed column.. Also in 0.6.9.
  id: totrans-3109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个与PG 9中相同修改的索引行为影响重命名列上的主键反射的错误。也在0.6.9中修复。
- en: 'References: [#2141](https://www.sqlalchemy.org/trac/ticket/2141), [#2291](https://www.sqlalchemy.org/trac/ticket/2291)'
  id: totrans-3110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2141](https://www.sqlalchemy.org/trac/ticket/2141), [#2291](https://www.sqlalchemy.org/trac/ticket/2291)
- en: '**[postgresql]**'
  id: totrans-3111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Reflection functions for Table, Sequence no longer case insensitive. Names can
    be differ only in case and will be correctly distinguished.
  id: totrans-3112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Table、Sequence的反射函数不再区分大小写。名称只能在大小写上有所不同，并且将被正确区分。
- en: 'References: [#2256](https://www.sqlalchemy.org/trac/ticket/2256)'
  id: totrans-3113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2256](https://www.sqlalchemy.org/trac/ticket/2256)
- en: '**[postgresql]**'
  id: totrans-3114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Use an atomic counter as the “random number” source for server side cursor names;
    conflicts have been reported in rare cases.
  id: totrans-3115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用原子计数器作为服务器端游标名称的“随机数”来源；在极少数情况下已报告冲突。
- en: '**[postgresql]**'
  id: totrans-3116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Narrowed the assumption made when reflecting a foreign-key referenced table
    with schema in the current search path; an explicit schema will be applied to
    the referenced table only if it actually matches that of the referencing table,
    which also has an explicit schema. Previously it was assumed that “current” schema
    was synonymous with the full search_path.
  id: totrans-3117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 缩小了在反射具有当前搜索路径中模式的外键引用表时所做的假设；只有当显式模式与引用表的模式实际匹配时，才会将显式模式应用于引用表。先前假定“当前”模式与完整搜索路径是同义词。
- en: 'References: [#2249](https://www.sqlalchemy.org/trac/ticket/2249)'
  id: totrans-3118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2249](https://www.sqlalchemy.org/trac/ticket/2249)
- en: mysql
  id: totrans-3119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-3120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: a CREATE TABLE will put the COLLATE option after CHARSET, which appears to be
    part of MySQL’s arbitrary rules regarding if it will actually work or not. Also
    in 0.6.9.
  id: totrans-3121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: CREATE TABLE 将在 CHARSET 后放置 COLLATE 选项，这似乎是 MySQL 关于其是否实际工作的任意规则的一部分。也适用于 0.6.9
    版本。
- en: 'References: [#2225](https://www.sqlalchemy.org/trac/ticket/2225)'
  id: totrans-3122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2225](https://www.sqlalchemy.org/trac/ticket/2225)
- en: '**[mysql]**'
  id: totrans-3123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Added mysql_length parameter to Index construct, specifies “length” for indexes.
  id: totrans-3124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 Index 构造添加了 mysql_length 参数，指定索引的“length”。
- en: 'References: [#2293](https://www.sqlalchemy.org/trac/ticket/2293)'
  id: totrans-3125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2293](https://www.sqlalchemy.org/trac/ticket/2293)
- en: sqlite
  id: totrans-3126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite]**'
  id: totrans-3127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: Ensured that the same ValueError is raised for illegal date/time/datetime string
    parsed from the database regardless of whether C extensions are in use or not.
  id: totrans-3128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保无论是否使用 C 扩展，从数据库解析的非法日期/时间/日期时间字符串都会引发相同的 ValueError。
- en: mssql
  id: totrans-3129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-3130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Changes to attempt support of FreeTDS 0.91 with Pyodbc. This includes that string
    binds are sent as Python unicode objects when FreeTDS 0.91 is detected, and a
    CAST(? AS NVARCHAR) is used when we detect for a table. However, I’d continue
    to characterize Pyodbc + FreeTDS 0.91 behavior as pretty crappy, there are still
    many queries such as used in reflection which cause a core dump on Linux, and
    it is not really usable at all on OSX, MemoryErrors abound and just plain broken
    unicode support.
  id: totrans-3131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更改以尝试支持 FreeTDS 0.91 与 Pyodbc。当检测到 FreeTDS 0.91 时，字符串绑定将作为 Python unicode 对象发送，并且在检测到表时使用
    CAST(? AS NVARCHAR)。然而，我会继续将 Pyodbc + FreeTDS 0.91 的行为描述为相当糟糕，仍然有许多查询（例如在反射中使用的查询）在
    Linux 上导致核心转储，在 OSX 上根本无法使用，MemoryErrors 丰富，而且对 Unicode 的支持完全破碎。
- en: 'References: [#2273](https://www.sqlalchemy.org/trac/ticket/2273)'
  id: totrans-3132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2273](https://www.sqlalchemy.org/trac/ticket/2273)
- en: '**[mssql]**'
  id: totrans-3133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: The behavior of =/!= when comparing a scalar select to a value will no longer
    produce IN/NOT IN as of 0.8; this behavior is a little too heavy handed (use `in_()`
    if you want to emit IN) and now emits a deprecation warning. To get the 0.8 behavior
    immediately and remove the warning, a compiler recipe is given at [https://www.sqlalchemy.org/docs/07/dialects/mssql.html#scalar-select-comparisons](https://www.sqlalchemy.org/docs/07/dialects/mssql.html#scalar-select-comparisons)
    to override the behavior of visit_binary().
  id: totrans-3134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当将标量选择与值进行比较时，= /！= 的行为将不再在 0.8 版本中产生 IN / NOT IN；这种行为有点过于武断（如果要发出 IN，请使用 `in_()`），现在会发出弃用警告。要立即获得
    0.8 版本的行为并消除警告，可以在 [https://www.sqlalchemy.org/docs/07/dialects/mssql.html#scalar-select-comparisons](https://www.sqlalchemy.org/docs/07/dialects/mssql.html#scalar-select-comparisons)
    给出的编译器配方中覆盖 visit_binary() 的行为。
- en: 'References: [#2277](https://www.sqlalchemy.org/trac/ticket/2277)'
  id: totrans-3135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2277](https://www.sqlalchemy.org/trac/ticket/2277)
- en: '**[mssql]**'
  id: totrans-3136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: ”0” is accepted as an argument for limit() which will produce “TOP 0”.
  id: totrans-3137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “0” 被接受为 limit() 的参数，这将产生“TOP 0”。
- en: 'References: [#2222](https://www.sqlalchemy.org/trac/ticket/2222)'
  id: totrans-3138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2222](https://www.sqlalchemy.org/trac/ticket/2222)
- en: oracle
  id: totrans-3139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-3140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Fixed ReturningResultProxy for zxjdbc dialect.. Regression from 0.6.
  id: totrans-3141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 zxjdbc 方言的 ReturningResultProxy。从 0.6 版本开始的退化。
- en: 'References: [#2272](https://www.sqlalchemy.org/trac/ticket/2272)'
  id: totrans-3142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2272](https://www.sqlalchemy.org/trac/ticket/2272)
- en: '**[oracle]**'
  id: totrans-3143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: The String type now generates VARCHAR2 on Oracle which is recommended as the
    default VARCHAR. Added an explicit VARCHAR2 and NVARCHAR2 to the Oracle dialect
    as well. Using NVARCHAR still generates “NVARCHAR2” - there is no “NVARCHAR” on
    Oracle - this remains a slight breakage of the “uppercase types always give exactly
    that” policy. VARCHAR still generates “VARCHAR”, keeping with the policy. If Oracle
    were to ever define “VARCHAR” as something different as they claim (IMHO this
    will never happen), the type would be available.
  id: totrans-3144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: String 类型现在在 Oracle 上生成 VARCHAR2，这是推荐的默认 VARCHAR。在 Oracle 方言中还添加了显式的 VARCHAR2
    和 NVARCHAR2。使用 NVARCHAR 仍然生成“NVARCHAR2” - 在 Oracle 上没有“NVARCHAR” - 这仍然是“大写类型总是给出确切内容”的政策的轻微破坏。VARCHAR
    仍然生成“VARCHAR”，遵循该政策。如果 Oracle 曾经定义“VARCHAR”为他们声称的不同内容（在我看来永远不会发生），该类型将可用。
- en: 'References: [#2252](https://www.sqlalchemy.org/trac/ticket/2252)'
  id: totrans-3145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2252](https://www.sqlalchemy.org/trac/ticket/2252)
- en: misc
  id: totrans-3146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[types]**'
  id: totrans-3147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[types]**'
- en: Extra keyword arguments to the base Float type beyond “precision” and “asdecimal”
    are ignored; added a deprecation warning here and additional docs, related to
  id: totrans-3148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在基本 Float 类型之外的额外关键字参数“precision”和“asdecimal”将被忽略；在此处添加了弃用警告和额外文档，相关于
- en: 'References: [#2258](https://www.sqlalchemy.org/trac/ticket/2258)'
  id: totrans-3149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2258](https://www.sqlalchemy.org/trac/ticket/2258)
- en: '**[ext]**'
  id: totrans-3150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: SQLSoup will not be included in version 0.8 of SQLAlchemy; while useful, we
    would like to keep SQLAlchemy itself focused on one ORM usage paradigm. SQLSoup
    will hopefully soon be superseded by a third party project.
  id: totrans-3151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLSoup将不包含在SQLAlchemy的0.8版本中；虽然有用，但我们希望将SQLAlchemy本身集中在一个ORM使用范例上。SQLSoup希望很快会被第三方项目取代。
- en: 'References: [#2262](https://www.sqlalchemy.org/trac/ticket/2262)'
  id: totrans-3152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2262](https://www.sqlalchemy.org/trac/ticket/2262)
- en: '**[ext]**'
  id: totrans-3153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[扩展]**'
- en: Added local_attr, remote_attr, attr accessors to AssociationProxy, providing
    quick access to the proxied attributes at the class level.
  id: totrans-3154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为AssociationProxy添加了local_attr、remote_attr、attr访问器，提供了在类级别快速访问代理属性的功能。
- en: 'References: [#2236](https://www.sqlalchemy.org/trac/ticket/2236)'
  id: totrans-3155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2236](https://www.sqlalchemy.org/trac/ticket/2236)
- en: '**[ext]**'
  id: totrans-3156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[扩展]**'
- en: Changed the update() method on association proxy dictionary to use a duck typing
    approach, i.e. checks for “keys”, to discern between update({}) and update((a,
    b)). Previously, passing a dictionary that had tuples as keys would be misinterpreted
    as a sequence.
  id: totrans-3157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更改了关联代理字典上的update()方法，采用了鸭子类型的方法，即检查“键”，以区分update({})和update((a, b))。以前，传递具有元组作为键的字典会被误解为序列。
- en: 'References: [#2275](https://www.sqlalchemy.org/trac/ticket/2275)'
  id: totrans-3158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2275](https://www.sqlalchemy.org/trac/ticket/2275)
- en: 0.7.2
  id: totrans-3159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.7.2
- en: 'Released: Sun Jul 31 2011'
  id: totrans-3160
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2011年7月31日 星期日
- en: orm
  id: totrans-3161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM
- en: '**[orm]**'
  id: totrans-3162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: 'Feature enhancement: joined and subquery loading will now traverse already-present
    related objects and collections in search of unpopulated attributes throughout
    the scope of the eager load being defined, so that the eager loading that is specified
    via mappings or query options unconditionally takes place for the full depth,
    populating whatever is not already populated. Previously, this traversal would
    stop if a related object or collection were already present leading to inconsistent
    behavior (though would save on loads/cycles for an already-loaded graph). For
    a subqueryload, this means that the additional SELECT statements emitted by subqueryload
    will invoke unconditionally, no matter how much of the existing graph is already
    present (hence the controversy). The previous behavior of “stopping” is still
    in effect when a query is the result of an attribute-initiated lazyload, as otherwise
    an “N+1” style of collection iteration can become needlessly expensive when the
    same related object is encountered repeatedly. There’s also an as-yet-not-public
    generative Query method _with_invoke_all_eagers() which selects old/new behavior'
  id: totrans-3163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 功能增强：现在，连接和子查询加载将遍历已经存在的相关对象和集合，以查找未填充的属性，贯穿定义的急加载范围，以便通过映射或查询选项指定的急加载无条件地发生在整个深度上，填充尚未填充的内容。以前，如果已经存在相关对象或集合，此遍历将停止，导致不一致的行为（尽管会节省已加载图的加载/循环）。对于子查询加载，这意味着子查询加载发出的额外SELECT语句将无条件调用，无论现有图形的多少（因此有争议）。当查询是属性启动的延迟加载的结果时，以前的“停止”行为仍然有效，否则当重复遇到相同的相关对象时，“N+1”风格的集合迭代可能变得不必要昂贵。还有一个尚未公开的生成Query方法_with_invoke_all_eagers()，选择旧/新行为
- en: 'References: [#2213](https://www.sqlalchemy.org/trac/ticket/2213)'
  id: totrans-3164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2213](https://www.sqlalchemy.org/trac/ticket/2213)
- en: '**[orm]**'
  id: totrans-3165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: A rework of “replacement traversal” within the ORM as it alters selectables
    to be against aliases of things (i.e. clause adaption) includes a fix for multiply-nested
    any()/has() constructs against a joined table structure.
  id: totrans-3166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在ORM中重新设计了“替换遍历”，因为它会将可选择的内容更改为针对事物的别名（即子句适配），包括修复了针对连接表结构的多层嵌套any()/has()构造的问题。
- en: 'References: [#2195](https://www.sqlalchemy.org/trac/ticket/2195)'
  id: totrans-3167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2195](https://www.sqlalchemy.org/trac/ticket/2195)
- en: '**[orm]**'
  id: totrans-3168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Fixed bug where query.join() + aliased=True from a joined-inh structure to itself
    on relationship() with join condition on the child table would convert the lead
    entity into the joined one inappropriately. Also in 0.6.9.
  id: totrans-3169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即在relationship()上从一个连接到自身的joined-inh结构上使用query.join() + aliased=True，并且在子表上具有连接条件时，会不适当地将主实体转换为连接实体。也在0.6.9中。
- en: 'References: [#2234](https://www.sqlalchemy.org/trac/ticket/2234)'
  id: totrans-3170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2234](https://www.sqlalchemy.org/trac/ticket/2234)
- en: '**[orm]**'
  id: totrans-3171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Fixed regression from 0.6 where Session.add() against an object which contained
    None in a collection would raise an internal exception. Reverted this to 0.6’s
    behavior which is to accept the None but obviously nothing is persisted. Ideally,
    collections with None present or on append() should at least emit a warning, which
    is being considered for 0.8.
  id: totrans-3172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '修复了从0.6中的回归，其中Session.add()针对包含集合中的None的对象会引发内部异常。将此恢复为0.6的行为，即接受None，但显然不会持久化任何内容。理想情况下，存在None的集合或在append()上的集合至少应发出警告，这将在0.8中考虑。 '
- en: 'References: [#2205](https://www.sqlalchemy.org/trac/ticket/2205)'
  id: totrans-3173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2205](https://www.sqlalchemy.org/trac/ticket/2205)
- en: '**[orm]**'
  id: totrans-3174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Load of a deferred() attribute on an object where row can’t be located raises
    ObjectDeletedError instead of failing later on; improved the message in ObjectDeletedError
    to include other conditions besides a simple “delete”.
  id: totrans-3175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在无法定位行的对象上加载延迟属性会引发ObjectDeletedError，而不是稍后失败；改进了ObjectDeletedError中的消息，包括除了简单的“删除”之外的其他条件。
- en: 'References: [#2191](https://www.sqlalchemy.org/trac/ticket/2191)'
  id: totrans-3176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2191](https://www.sqlalchemy.org/trac/ticket/2191)
- en: '**[orm]**'
  id: totrans-3177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed regression from 0.6 where a get history operation on some relationship()
    based attributes would fail when a lazyload would emit; this could trigger within
    a flush() under certain conditions. Thanks to the user who submitted the great
    test for this.
  id: totrans-3178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了从0.6中的回归，其中对一些基于relationship()的属性执行get history操作时，当lazyload会发出时会失败；在某些条件下，这可能在flush()中触发。感谢提交了这个伟大测试的用户。
- en: 'References: [#2224](https://www.sqlalchemy.org/trac/ticket/2224)'
  id: totrans-3179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2224](https://www.sqlalchemy.org/trac/ticket/2224)
- en: '**[orm]**'
  id: totrans-3180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug apparent only in Python 3 whereby sorting of persistent + pending
    objects during flush would produce an illegal comparison, if the persistent object
    primary key is not a single integer. Also in 0.6.9
  id: totrans-3181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了仅在Python 3中明显的bug，即在flush期间对持久性+挂起对象进行排序会产生非法比较，如果持久性对象的主键不是单个整数。也在0.6.9中。
- en: 'References: [#2228](https://www.sqlalchemy.org/trac/ticket/2228)'
  id: totrans-3182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2228](https://www.sqlalchemy.org/trac/ticket/2228)
- en: '**[orm]**'
  id: totrans-3183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby the source clause used by query.join() would be inconsistent
    if against a column expression that combined multiple entities together. Also
    in 0.6.9
  id: totrans-3184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即query.join()使用的源子句在针对将多个实体组合在一起的列表达式时会不一致。也在0.6.9中。
- en: 'References: [#2197](https://www.sqlalchemy.org/trac/ticket/2197)'
  id: totrans-3185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2197](https://www.sqlalchemy.org/trac/ticket/2197)
- en: '**[orm]**'
  id: totrans-3186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby if a mapped class redefined __hash__() or __eq__() to something
    non-standard, which is a supported use case as SQLA should never consult these,
    the methods would be consulted if the class was part of a “composite” (i.e. non-single-entity)
    result set. Also in 0.6.9.
  id: totrans-3187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即如果映射类重新定义了__hash__()或__eq__()为非标准内容，这是一个受支持的用例，因为SQLA不应该查询这些内容，那么如果该类是“复合”（即非单实体）结果集的一部分，这些方法将被查询。也在0.6.9中。
- en: 'References: [#2215](https://www.sqlalchemy.org/trac/ticket/2215)'
  id: totrans-3188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2215](https://www.sqlalchemy.org/trac/ticket/2215)
- en: '**[orm]**'
  id: totrans-3189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added public attribute “.validators” to Mapper, an immutable dictionary view
    of all attributes that have been decorated with the @validates decorator. courtesy
    Stefano Fontanelli
  id: totrans-3190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向Mapper添加了公共属性“.validators”，这是所有已使用@validates装饰器装饰的属性的不可变字典视图。感谢Stefano Fontanelli
- en: 'References: [#2240](https://www.sqlalchemy.org/trac/ticket/2240)'
  id: totrans-3191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2240](https://www.sqlalchemy.org/trac/ticket/2240)
- en: '**[orm]**'
  id: totrans-3192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Fixed subtle bug that caused SQL to blow up if: column_property() against subquery
    + joinedload + LIMIT + order by the column property() occurred. . Also in 0.6.9'
  id: totrans-3193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个微妙的bug，导致SQL在以下情况下崩溃：column_property()针对子查询 + joinedload + LIMIT +按列属性排序。也在0.6.9中。
- en: 'References: [#2188](https://www.sqlalchemy.org/trac/ticket/2188)'
  id: totrans-3194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2188](https://www.sqlalchemy.org/trac/ticket/2188)
- en: '**[orm]**'
  id: totrans-3195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The join condition produced by with_parent as well as when using a “dynamic”
    relationship against a parent will generate unique bindparams, rather than incorrectly
    repeating the same bindparam. . Also in 0.6.9.
  id: totrans-3196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由with_parent生成的连接条件以及针对父级使用“dynamic”关系时将生成唯一的bindparams，而不是错误地重复相同的bindparam。也在0.6.9中。
- en: 'References: [#2207](https://www.sqlalchemy.org/trac/ticket/2207)'
  id: totrans-3197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2207](https://www.sqlalchemy.org/trac/ticket/2207)
- en: '**[orm]**'
  id: totrans-3198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added the same “columns-only” check to mapper.polymorphic_on as used when receiving
    user arguments to relationship.order_by, foreign_keys, remote_side, etc.
  id: totrans-3199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将“仅列”检查添加到mapper.polymorphic_on中，与接收relationship.order_by、foreign_keys、remote_side等用户参数时使用的检查相同。
- en: '**[orm]**'
  id: totrans-3200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby comparison of column expression to a Query() would not call
    as_scalar() on the underlying SELECT statement to produce a scalar subquery, in
    the way that occurs if you called it on Query().subquery().
  id: totrans-3201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了比较列表达式和Query()的bug，该比较不会调用as_scalar()来在基础SELECT语句上生成标量子查询，方式类似于如果在Query().subquery()上调用它时发生的情况。
- en: 'References: [#2190](https://www.sqlalchemy.org/trac/ticket/2190)'
  id: totrans-3202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2190](https://www.sqlalchemy.org/trac/ticket/2190)
- en: '**[orm]**'
  id: totrans-3203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed declarative bug where a class inheriting from a superclass of the same
    name would fail due to an unnecessary lookup of the name in the _decl_class_registry.
  id: totrans-3204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了声明性bug，当一个类继承自同名的超类时，由于在_decl_class_registry中不必要地查找名称，会导致失败。
- en: 'References: [#2194](https://www.sqlalchemy.org/trac/ticket/2194)'
  id: totrans-3205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2194](https://www.sqlalchemy.org/trac/ticket/2194)
- en: '**[orm]**'
  id: totrans-3206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Repaired the “no statement condition” assertion in Query which would attempt
    to raise if a generative method were called after from_statement() were called..
    Also in 0.6.9.
  id: totrans-3207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Query中的“无语句条件”断言，该断言在调用from_statement()之后调用生成方法时会尝试引发异常。也适用于0.6.9。
- en: 'References: [#2199](https://www.sqlalchemy.org/trac/ticket/2199)'
  id: totrans-3208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2199](https://www.sqlalchemy.org/trac/ticket/2199)
- en: examples
  id: totrans-3209
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples]**'
  id: totrans-3210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[示例]**'
- en: Repaired the examples/versioning test runner to not rely upon SQLAlchemy test
    libs, nosetests must be run from within examples/versioning to get around setup.cfg
    breaking it.
  id: totrans-3211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了示例/版本控制测试运行程序，不再依赖SQLAlchemy测试库，必须从示例/版本控制中运行nosetests以解决setup.cfg导致的问题。
- en: '**[examples]**'
  id: totrans-3212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[示例]**'
- en: Tweak to examples/versioning to pick the correct foreign key in a multi-level
    inheritance situation.
  id: totrans-3213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整示例/版本控制以在多层继承情况下选择正确的外键。
- en: '**[examples]**'
  id: totrans-3214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[示例]**'
- en: Fixed the attribute shard example to check for bind param callable correctly
    in 0.7 style.
  id: totrans-3215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了属性分片示例，以正确检查0.7风格中的绑定参数可调用性。
- en: engine
  id: totrans-3216
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine]**'
  id: totrans-3217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: Context manager provided by Connection.begin() will issue rollback() if the
    commit() fails, not just if an exception occurs.
  id: totrans-3218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由Connection.begin()提供的上下文管理器在提交失败时会执行rollback()，不仅在发生异常时。
- en: '**[engine]**'
  id: totrans-3219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: Use urllib.parse_qsl() in Python 2.6 and above, no deprecation warning about
    cgi.parse_qsl()
  id: totrans-3220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在Python 2.6及以上版本中使用urllib.parse_qsl()，不再发出有关cgi.parse_qsl()的弃用警告。
- en: 'References: [#1682](https://www.sqlalchemy.org/trac/ticket/1682)'
  id: totrans-3221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1682](https://www.sqlalchemy.org/trac/ticket/1682)
- en: '**[engine]**'
  id: totrans-3222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: Added mixin class sqlalchemy.ext.DontWrapMixin. User-defined exceptions of this
    type are never wrapped in StatementException when they occur in the context of
    a statement execution.
  id: totrans-3223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了mixin类sqlalchemy.ext.DontWrapMixin。在语句执行的上下文中发生时，此类型的用户定义异常永远不会在StatementException中包装。
- en: '**[engine]**'
  id: totrans-3224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: StatementException wrapping will display the original exception class in the
    message.
  id: totrans-3225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: StatementException包装将在消息中显示原始异常类。
- en: '**[engine]**'
  id: totrans-3226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: Failures on connect which raise dbapi.Error will forward the error to dialect.is_disconnect()
    and set the “connection_invalidated” flag if the dialect knows this to be a potentially
    “retryable” condition. Only Oracle ORA-01033 implemented for now.
  id: totrans-3227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 连接失败会引发dbapi.Error的错误将转发到dialect.is_disconnect()，如果方言知道这是一种可能的“可重试”条件，则设置“connection_invalidated”标志。目前只有Oracle
    ORA-01033实现。
- en: 'References: [#2201](https://www.sqlalchemy.org/trac/ticket/2201)'
  id: totrans-3228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2201](https://www.sqlalchemy.org/trac/ticket/2201)
- en: sql
  id: totrans-3229
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-3230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed two subtle bugs involving column correspondence in a selectable, one with
    the same labeled subquery repeated, the other when the label has been “grouped”
    and loses itself. Affects.
  id: totrans-3231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了两个关于可选择的列对应的微妙错误，一个是相同的标记子查询重复，另一个是当标签已被“分组”并丢失时。影响。
- en: 'References: [#2188](https://www.sqlalchemy.org/trac/ticket/2188)'
  id: totrans-3232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2188](https://www.sqlalchemy.org/trac/ticket/2188)
- en: schema
  id: totrans-3233
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: '**[schema]**'
  id: totrans-3234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: 'New feature: with_variant() method on all types. Produces an instance of Variant(),
    a special TypeDecorator which will select the usage of a different type based
    on the dialect in use.'
  id: totrans-3235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新特性：对所有类型增加了`with_variant()`方法。产生一个Variant()实例，这是一个特殊的TypeDecorator，根据当前使用的方言选择不同类型的用法。
- en: 'References: [#2187](https://www.sqlalchemy.org/trac/ticket/2187)'
  id: totrans-3236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2187](https://www.sqlalchemy.org/trac/ticket/2187)
- en: '**[schema]**'
  id: totrans-3237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: Added an informative error message when ForeignKeyConstraint refers to a column
    name in the parent that is not found. Also in 0.6.9.
  id: totrans-3238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当ForeignKeyConstraint引用父级中不存在的列名时，添加了一个信息性错误消息。也适用于0.6.9。
- en: '**[schema]**'
  id: totrans-3239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: Fixed bug whereby adaptation of old append_ddl_listener() function was passing
    unexpected **kw through to the Table event. Table gets no kws, the MetaData event
    in 0.6 would get “tables=somecollection”, this behavior is preserved.
  id: totrans-3240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了旧的append_ddl_listener()函数适应错误，通过到表事件的意外**kw。表不得到kws，0.6中的MetaData事件将得到“tables=somecollection”，这种行为得到保留。
- en: 'References: [#2206](https://www.sqlalchemy.org/trac/ticket/2206)'
  id: totrans-3241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2206](https://www.sqlalchemy.org/trac/ticket/2206)
- en: '**[schema]**'
  id: totrans-3242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: Fixed bug where “autoincrement” detection on Table would fail if the type had
    no “affinity” value, in particular this would occur when using the UUID example
    on the site that uses TypeEngine as the “impl”.
  id: totrans-3243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在表上检测“autoincrement”时的错误，如果类型没有“亲和性”值，特别是当在网站上使用TypeEngine作为“impl”的UUID示例时会发生这种情况。
- en: '**[schema]**'
  id: totrans-3244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: Added an improved repr() to TypeEngine objects that will only display constructor
    args which are positional or kwargs that deviate from the default.
  id: totrans-3245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为TypeEngine对象添加了改进的repr()，它只会显示位置参数或偏离默认值的kwargs。
- en: 'References: [#2209](https://www.sqlalchemy.org/trac/ticket/2209)'
  id: totrans-3246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2209](https://www.sqlalchemy.org/trac/ticket/2209)
- en: postgresql
  id: totrans-3247
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql]**'
  id: totrans-3248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Added new “postgresql_ops” argument to Index, allows specification of PostgreSQL
    operator classes for indexed columns. Courtesy Filip Zyzniewski.
  id: totrans-3249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的“postgresql_ops”参数到Index，允许为索引列指定PostgreSQL操作符类。由Filip Zyzniewski提供。
- en: 'References: [#2198](https://www.sqlalchemy.org/trac/ticket/2198)'
  id: totrans-3250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2198](https://www.sqlalchemy.org/trac/ticket/2198)
- en: mysql
  id: totrans-3251
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-3252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Fixed OurSQL dialect to use ansi-neutral quote symbol “’” for XA commands instead
    of ‘”’. . Also in 0.6.9.
  id: totrans-3253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了OurSQL方言，在XA命令中使用ansi-neutral引号符“’”而不是‘”’的错误。也在0.6.9中。
- en: 'References: [#2186](https://www.sqlalchemy.org/trac/ticket/2186)'
  id: totrans-3254
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2186](https://www.sqlalchemy.org/trac/ticket/2186)
- en: sqlite
  id: totrans-3255
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite]**'
  id: totrans-3256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: SQLite dialect no longer strips quotes off of reflected default value, allowing
    a round trip CREATE TABLE to work. This is consistent with other dialects that
    also maintain the exact form of the default.
  id: totrans-3257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLite方言不再从反映的默认值中去除引号，从而允许往返CREATE TABLE工作。这与其他方言一致，它们也保留默认值的精确形式。
- en: 'References: [#2189](https://www.sqlalchemy.org/trac/ticket/2189)'
  id: totrans-3258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2189](https://www.sqlalchemy.org/trac/ticket/2189)
- en: mssql
  id: totrans-3259
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-3260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Adjusted the pyodbc dialect such that bound values are passed as bytes and not
    unicode if the “Easysoft” unix drivers are detected. This is the same behavior
    as occurs with FreeTDS. Easysoft appears to segfault if Python unicodes are passed
    under certain circumstances.
  id: totrans-3261
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了pyodbc方言，如果检测到“Easysoft”unix驱动程序，则绑定值将作为字节而不是unicode传递。这与FreeTDS发生的行为相同。在某些情况下，Easysoft似乎会导致segfault，如果传递Python
    unicode。
- en: oracle
  id: totrans-3262
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-3263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Added ORA-00028 to disconnect codes, use cx_oracle _Error.code to get at the
    code,. Also in 0.6.9.
  id: totrans-3264
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了ORA-00028到断开连接代码中，使用cx_oracle _Error.code来获取代码，也在0.6.9中。
- en: 'References: [#2200](https://www.sqlalchemy.org/trac/ticket/2200)'
  id: totrans-3265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2200](https://www.sqlalchemy.org/trac/ticket/2200)
- en: '**[oracle]**'
  id: totrans-3266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Added ORA-01033 to disconnect codes, which can be caught during a connection
    event.
  id: totrans-3267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了ORA-01033到断开连接代码中，它可以在连接事件中捕获。
- en: 'References: [#2201](https://www.sqlalchemy.org/trac/ticket/2201)'
  id: totrans-3268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2201](https://www.sqlalchemy.org/trac/ticket/2201)
- en: '**[oracle]**'
  id: totrans-3269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: repaired the oracle.RAW type which did not generate the correct DDL. Also in
    0.6.9.
  id: totrans-3270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了oracle.RAW类型，它未生成正确的DDL。也在0.6.9中。
- en: 'References: [#2220](https://www.sqlalchemy.org/trac/ticket/2220)'
  id: totrans-3271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2220](https://www.sqlalchemy.org/trac/ticket/2220)
- en: '**[oracle]**'
  id: totrans-3272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: added CURRENT to reserved word list. Also in 0.6.9.
  id: totrans-3273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了CURRENT到保留字列表中。也在0.6.9中。
- en: 'References: [#2212](https://www.sqlalchemy.org/trac/ticket/2212)'
  id: totrans-3274
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2212](https://www.sqlalchemy.org/trac/ticket/2212)
- en: '**[oracle]**'
  id: totrans-3275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Fixed bug in the mutable extension whereby if the same type were used twice
    in one mapping, the attributes beyond the first would not get instrumented.
  id: totrans-3276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了可变扩展中的错误，其中如果一个映射中两次使用相同的类型，则第一个之后的属性不会被检测。
- en: '**[oracle]**'
  id: totrans-3277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Fixed bug in the mutable extension whereby if None or a non-corresponding type
    were set, an error would be raised. None is now accepted which assigns None to
    all attributes, illegal values raise ValueError.
  id: totrans-3278
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了可变扩展中的错误，其中如果设置为None或非对应类型，则会引发错误。现在接受None，将None分配给所有属性，非法值引发ValueError。
- en: orm
  id: totrans-3279
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-3280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Feature enhancement: joined and subquery loading will now traverse already-present
    related objects and collections in search of unpopulated attributes throughout
    the scope of the eager load being defined, so that the eager loading that is specified
    via mappings or query options unconditionally takes place for the full depth,
    populating whatever is not already populated. Previously, this traversal would
    stop if a related object or collection were already present leading to inconsistent
    behavior (though would save on loads/cycles for an already-loaded graph). For
    a subqueryload, this means that the additional SELECT statements emitted by subqueryload
    will invoke unconditionally, no matter how much of the existing graph is already
    present (hence the controversy). The previous behavior of “stopping” is still
    in effect when a query is the result of an attribute-initiated lazyload, as otherwise
    an “N+1” style of collection iteration can become needlessly expensive when the
    same related object is encountered repeatedly. There’s also an as-yet-not-public
    generative Query method _with_invoke_all_eagers() which selects old/new behavior'
  id: totrans-3281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 功能增强：现在，对已经存在的相关对象和集合进行 joined 和子查询加载，以搜索未填充的属性，这是在定义了急加载的范围内进行的，因此通过映射或查询选项指定的急加载将无条件地对整个深度进行加载，填充尚未填充的内容。之前，如果已经存在相关对象或集合，则此遍历将停止，导致不一致的行为（尽管对于已加载的图表会节省加载/循环）。对于子查询加载，这意味着子查询加载发出的额外
    SELECT 语句将无条件调用，无论现有图形的多少（因此引发了争议）。当查询是由属性启动的懒加载的结果时，先前的“停止”行为仍然有效，否则当重复遇到相同的相关对象时，“N+1”样式的集合迭代可能会变得不必要地昂贵。还有一个尚未公开的生成性
    Query 方法 _with_invoke_all_eagers()，它选择旧/新行为。
- en: 'References: [#2213](https://www.sqlalchemy.org/trac/ticket/2213)'
  id: totrans-3282
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2213](https://www.sqlalchemy.org/trac/ticket/2213)
- en: '**[orm]**'
  id: totrans-3283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: A rework of “replacement traversal” within the ORM as it alters selectables
    to be against aliases of things (i.e. clause adaption) includes a fix for multiply-nested
    any()/has() constructs against a joined table structure.
  id: totrans-3284
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对 ORM 中的“替换遍历”进行了重新设计，因为它会修改为针对事物的别名的可选择性（即子句适配），包括对针对加入表结构的多重嵌套 any()/has()
    构造的修复。
- en: 'References: [#2195](https://www.sqlalchemy.org/trac/ticket/2195)'
  id: totrans-3285
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2195](https://www.sqlalchemy.org/trac/ticket/2195)
- en: '**[orm]**'
  id: totrans-3286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug where query.join() + aliased=True from a joined-inh structure to itself
    on relationship() with join condition on the child table would convert the lead
    entity into the joined one inappropriately. Also in 0.6.9.
  id: totrans-3287
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即在 relationship() 中从一个关联到自身的 joined-inh 结构的子表上执行 query.join() + aliased=True
    时，会不适当地将主实体转换为已加入的实体。也适用于 0.6.9 版本。
- en: 'References: [#2234](https://www.sqlalchemy.org/trac/ticket/2234)'
  id: totrans-3288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2234](https://www.sqlalchemy.org/trac/ticket/2234)
- en: '**[orm]**'
  id: totrans-3289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed regression from 0.6 where Session.add() against an object which contained
    None in a collection would raise an internal exception. Reverted this to 0.6’s
    behavior which is to accept the None but obviously nothing is persisted. Ideally,
    collections with None present or on append() should at least emit a warning, which
    is being considered for 0.8.
  id: totrans-3290
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 0.6 版本中的一个退化，即针对一个包含空集合的对象进行 Session.add() 操作会引发内部异常的问题。将此恢复为 0.6 版本的行为，即接受空集合，但显然不会持久化任何内容。理想情况下，包含
    None 的集合或在 append() 时应至少发出警告，这将在 0.8 版本中考虑。
- en: 'References: [#2205](https://www.sqlalchemy.org/trac/ticket/2205)'
  id: totrans-3291
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2205](https://www.sqlalchemy.org/trac/ticket/2205)
- en: '**[orm]**'
  id: totrans-3292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Load of a deferred() attribute on an object where row can’t be located raises
    ObjectDeletedError instead of failing later on; improved the message in ObjectDeletedError
    to include other conditions besides a simple “delete”.
  id: totrans-3293
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在找不到行的对象上加载延迟属性时，会引发 ObjectDeletedError 而不是稍后失败；改进了 ObjectDeletedError 中的消息，以包括除了简单的“删除”之外的其他条件。
- en: 'References: [#2191](https://www.sqlalchemy.org/trac/ticket/2191)'
  id: totrans-3294
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2191](https://www.sqlalchemy.org/trac/ticket/2191)
- en: '**[orm]**'
  id: totrans-3295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed regression from 0.6 where a get history operation on some relationship()
    based attributes would fail when a lazyload would emit; this could trigger within
    a flush() under certain conditions. Thanks to the user who submitted the great
    test for this.
  id: totrans-3296
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 0.6 版本中的一个退化，在某些基于 relationship() 的属性上进行 get history 操作时，当懒加载会发出时会失败；这可能会在某些条件下在
    flush() 中触发。感谢提交了此问题的出色测试的用户。
- en: 'References: [#2224](https://www.sqlalchemy.org/trac/ticket/2224)'
  id: totrans-3297
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2224](https://www.sqlalchemy.org/trac/ticket/2224)
- en: '**[orm]**'
  id: totrans-3298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug apparent only in Python 3 whereby sorting of persistent + pending
    objects during flush would produce an illegal comparison, if the persistent object
    primary key is not a single integer. Also in 0.6.9
  id: totrans-3299
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了仅在Python 3中明显的bug，在刷新期间对持久性+挂起对象进行排序会产生非法比较，如果持久对象的主键不是单个整数。同时也在0.6.9中修复。
- en: 'References: [#2228](https://www.sqlalchemy.org/trac/ticket/2228)'
  id: totrans-3300
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2228](https://www.sqlalchemy.org/trac/ticket/2228)
- en: '**[orm]**'
  id: totrans-3301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby the source clause used by query.join() would be inconsistent
    if against a column expression that combined multiple entities together. Also
    in 0.6.9
  id: totrans-3302
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即query.join()使用的源子句在针对将多个实体组合在一起的列表达式时会不一致。同时也在0.6.9中修复。
- en: 'References: [#2197](https://www.sqlalchemy.org/trac/ticket/2197)'
  id: totrans-3303
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2197](https://www.sqlalchemy.org/trac/ticket/2197)
- en: '**[orm]**'
  id: totrans-3304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby if a mapped class redefined __hash__() or __eq__() to something
    non-standard, which is a supported use case as SQLA should never consult these,
    the methods would be consulted if the class was part of a “composite” (i.e. non-single-entity)
    result set. Also in 0.6.9.
  id: totrans-3305
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即如果映射类重新定义了__hash__()或__eq__()为非标准内容，这是一个受支持的用例，因为SQLA不应该查询这些方法，如果类是复合（即非单实体）结果集的一部分，这些方法将被查询。同时也在0.6.9中修复。
- en: 'References: [#2215](https://www.sqlalchemy.org/trac/ticket/2215)'
  id: totrans-3306
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2215](https://www.sqlalchemy.org/trac/ticket/2215)
- en: '**[orm]**'
  id: totrans-3307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added public attribute “.validators” to Mapper, an immutable dictionary view
    of all attributes that have been decorated with the @validates decorator. courtesy
    Stefano Fontanelli
  id: totrans-3308
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向Mapper添加了公共属性“.validators”，这是所有已使用@validates装饰器装饰的属性的不可变字典视图。由Stefano Fontanelli提供。
- en: 'References: [#2240](https://www.sqlalchemy.org/trac/ticket/2240)'
  id: totrans-3309
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2240](https://www.sqlalchemy.org/trac/ticket/2240)
- en: '**[orm]**'
  id: totrans-3310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Fixed subtle bug that caused SQL to blow up if: column_property() against subquery
    + joinedload + LIMIT + order by the column property() occurred. . Also in 0.6.9'
  id: totrans-3311
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个微妙的bug，导致如果发生了：对子查询的列属性(column_property()) + joinedload + LIMIT + 按列属性排序，SQL会出现问题。同时也在0.6.9中修复。
- en: 'References: [#2188](https://www.sqlalchemy.org/trac/ticket/2188)'
  id: totrans-3312
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2188](https://www.sqlalchemy.org/trac/ticket/2188)
- en: '**[orm]**'
  id: totrans-3313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The join condition produced by with_parent as well as when using a “dynamic”
    relationship against a parent will generate unique bindparams, rather than incorrectly
    repeating the same bindparam. . Also in 0.6.9.
  id: totrans-3314
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由with_parent生成的连接条件以及对父项使用“dynamic”关系时会生成唯一的bindparams，而不是错误地重复相同的bindparam。同时也在0.6.9中修复。
- en: 'References: [#2207](https://www.sqlalchemy.org/trac/ticket/2207)'
  id: totrans-3315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2207](https://www.sqlalchemy.org/trac/ticket/2207)
- en: '**[orm]**'
  id: totrans-3316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added the same “columns-only” check to mapper.polymorphic_on as used when receiving
    user arguments to relationship.order_by, foreign_keys, remote_side, etc.
  id: totrans-3317
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向mapper.polymorphic_on添加了与relationship.order_by、foreign_keys、remote_side等接收用户参数时使用的相同“仅列”检查。
- en: '**[orm]**'
  id: totrans-3318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby comparison of column expression to a Query() would not call
    as_scalar() on the underlying SELECT statement to produce a scalar subquery, in
    the way that occurs if you called it on Query().subquery().
  id: totrans-3319
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，使得对列表达式与Query()进行比较时不会调用底层SELECT语句上的as_scalar()方法来生成标量子查询，这种情况发生在如果你在Query().subquery()上调用它时发生。
- en: 'References: [#2190](https://www.sqlalchemy.org/trac/ticket/2190)'
  id: totrans-3320
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2190](https://www.sqlalchemy.org/trac/ticket/2190)
- en: '**[orm]**'
  id: totrans-3321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed declarative bug where a class inheriting from a superclass of the same
    name would fail due to an unnecessary lookup of the name in the _decl_class_registry.
  id: totrans-3322
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个声明性bug，在此bug中，从具有相同名称的超类继承的类将由于不必要地在_decl_class_registry中查找名称而失败。
- en: 'References: [#2194](https://www.sqlalchemy.org/trac/ticket/2194)'
  id: totrans-3323
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2194](https://www.sqlalchemy.org/trac/ticket/2194)
- en: '**[orm]**'
  id: totrans-3324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Repaired the “no statement condition” assertion in Query which would attempt
    to raise if a generative method were called after from_statement() were called..
    Also in 0.6.9.
  id: totrans-3325
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在调用from_statement()之后调用生成方法会尝试引发“无语句条件”断言的Query中的bug。同时也在0.6.9中修复。
- en: 'References: [#2199](https://www.sqlalchemy.org/trac/ticket/2199)'
  id: totrans-3326
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2199](https://www.sqlalchemy.org/trac/ticket/2199)
- en: examples
  id: totrans-3327
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples]**'
  id: totrans-3328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[示例]**'
- en: Repaired the examples/versioning test runner to not rely upon SQLAlchemy test
    libs, nosetests must be run from within examples/versioning to get around setup.cfg
    breaking it.
  id: totrans-3329
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了示例/版本化测试运行程序，不再依赖于SQLAlchemy测试库，nosetests必须在示例/版本化目录中运行以避免setup.cfg破坏它。
- en: '**[examples]**'
  id: totrans-3330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[示例]**'
- en: Tweak to examples/versioning to pick the correct foreign key in a multi-level
    inheritance situation.
  id: totrans-3331
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对示例/版本化进行微调以在多级继承情况下选择正确的外键。
- en: '**[examples]**'
  id: totrans-3332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[示例]**'
- en: Fixed the attribute shard example to check for bind param callable correctly
    in 0.7 style.
  id: totrans-3333
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了属性shard示例，以正确检查0.7风格中的绑定参数可调用。
- en: engine
  id: totrans-3334
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine]**'
  id: totrans-3335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: Context manager provided by Connection.begin() will issue rollback() if the
    commit() fails, not just if an exception occurs.
  id: totrans-3336
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Connection.begin()提供的上下文管理器如果提交失败，将执行rollback()，不仅在发生异常时执行。
- en: '**[engine]**'
  id: totrans-3337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: Use urllib.parse_qsl() in Python 2.6 and above, no deprecation warning about
    cgi.parse_qsl()
  id: totrans-3338
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在Python 2.6及以上版本中使用urllib.parse_qsl()，不会有关于cgi.parse_qsl()的弃用警告。
- en: 'References: [#1682](https://www.sqlalchemy.org/trac/ticket/1682)'
  id: totrans-3339
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1682](https://www.sqlalchemy.org/trac/ticket/1682)
- en: '**[engine]**'
  id: totrans-3340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: Added mixin class sqlalchemy.ext.DontWrapMixin. User-defined exceptions of this
    type are never wrapped in StatementException when they occur in the context of
    a statement execution.
  id: totrans-3341
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了mixin类sqlalchemy.ext.DontWrapMixin。当用户定义的此类型的异常在语句执行上下文中发生时，它们永远不会被包装在StatementException中。
- en: '**[engine]**'
  id: totrans-3342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: StatementException wrapping will display the original exception class in the
    message.
  id: totrans-3343
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: StatementException包装将在消息中显示原始异常类。
- en: '**[engine]**'
  id: totrans-3344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: Failures on connect which raise dbapi.Error will forward the error to dialect.is_disconnect()
    and set the “connection_invalidated” flag if the dialect knows this to be a potentially
    “retryable” condition. Only Oracle ORA-01033 implemented for now.
  id: totrans-3345
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 连接失败时引发dbapi.Error的错误将转发到dialect.is_disconnect()，如果方言知道这是一个可能的“可重试”条件，则设置“connection_invalidated”标志。目前仅实现了Oracle
    ORA-01033。
- en: 'References: [#2201](https://www.sqlalchemy.org/trac/ticket/2201)'
  id: totrans-3346
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2201](https://www.sqlalchemy.org/trac/ticket/2201)
- en: sql
  id: totrans-3347
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-3348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed two subtle bugs involving column correspondence in a selectable, one with
    the same labeled subquery repeated, the other when the label has been “grouped”
    and loses itself. Affects.
  id: totrans-3349
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了两个涉及可选择的列对应的微妙bug，一个是重复使用相同标记的子查询，另一个是标记已被“分组”且丢失自身。影响。
- en: 'References: [#2188](https://www.sqlalchemy.org/trac/ticket/2188)'
  id: totrans-3350
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2188](https://www.sqlalchemy.org/trac/ticket/2188)
- en: schema
  id: totrans-3351
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: schema
- en: '**[schema]**'
  id: totrans-3352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: 'New feature: with_variant() method on all types. Produces an instance of Variant(),
    a special TypeDecorator which will select the usage of a different type based
    on the dialect in use.'
  id: totrans-3353
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新功能：在所有类型上添加了with_variant()方法。生成Variant()的实例，这是一个特殊的TypeDecorator，根据使用的方言选择不同类型的用法。
- en: 'References: [#2187](https://www.sqlalchemy.org/trac/ticket/2187)'
  id: totrans-3354
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2187](https://www.sqlalchemy.org/trac/ticket/2187)
- en: '**[schema]**'
  id: totrans-3355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: Added an informative error message when ForeignKeyConstraint refers to a column
    name in the parent that is not found. Also in 0.6.9.
  id: totrans-3356
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当ForeignKeyConstraint引用父级中未找到的列名时，添加了一个信息性错误消息。也适用于0.6.9版本。
- en: '**[schema]**'
  id: totrans-3357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: Fixed bug whereby adaptation of old append_ddl_listener() function was passing
    unexpected **kw through to the Table event. Table gets no kws, the MetaData event
    in 0.6 would get “tables=somecollection”, this behavior is preserved.
  id: totrans-3358
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了旧的append_ddl_listener()函数适配的bug，该函数将意外地将**kw传递给Table事件。Table不接收kw参数，0.6版本中的MetaData事件将接收“tables=somecollection”，此行为得以保留。
- en: 'References: [#2206](https://www.sqlalchemy.org/trac/ticket/2206)'
  id: totrans-3359
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2206](https://www.sqlalchemy.org/trac/ticket/2206)
- en: '**[schema]**'
  id: totrans-3360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: Fixed bug where “autoincrement” detection on Table would fail if the type had
    no “affinity” value, in particular this would occur when using the UUID example
    on the site that uses TypeEngine as the “impl”.
  id: totrans-3361
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Table上“autoincrement”检测的bug，如果类型没有“affinity”值，则会失败，特别是在使用TypeEngine作为“impl”的站点上使用UUID示例时会发生这种情况。
- en: '**[schema]**'
  id: totrans-3362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: Added an improved repr() to TypeEngine objects that will only display constructor
    args which are positional or kwargs that deviate from the default.
  id: totrans-3363
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为TypeEngine对象添加了改进的repr()，只显示构造函数参数，这些参数是位置参数或与默认值不同的kwargs。
- en: 'References: [#2209](https://www.sqlalchemy.org/trac/ticket/2209)'
  id: totrans-3364
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2209](https://www.sqlalchemy.org/trac/ticket/2209)
- en: postgresql
  id: totrans-3365
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql]**'
  id: totrans-3366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Added new “postgresql_ops” argument to Index, allows specification of PostgreSQL
    operator classes for indexed columns. Courtesy Filip Zyzniewski.
  id: totrans-3367
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为Index添加了新的“postgresql_ops”参数，允许为索引列指定PostgreSQL操作符类。感谢Filip Zyzniewski。
- en: 'References: [#2198](https://www.sqlalchemy.org/trac/ticket/2198)'
  id: totrans-3368
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2198](https://www.sqlalchemy.org/trac/ticket/2198)
- en: mysql
  id: totrans-3369
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-3370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Fixed OurSQL dialect to use ansi-neutral quote symbol “’” for XA commands instead
    of ‘”’. . Also in 0.6.9.
  id: totrans-3371
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了OurSQL方言，使用ansi-neutral引号符“’”代替‘”’来执行XA命令。也适用于0.6.9版本。
- en: 'References: [#2186](https://www.sqlalchemy.org/trac/ticket/2186)'
  id: totrans-3372
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2186](https://www.sqlalchemy.org/trac/ticket/2186)
- en: sqlite
  id: totrans-3373
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite]**'
  id: totrans-3374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: SQLite dialect no longer strips quotes off of reflected default value, allowing
    a round trip CREATE TABLE to work. This is consistent with other dialects that
    also maintain the exact form of the default.
  id: totrans-3375
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLite方言不���剥离反射默认值的引号，允许往返CREATE TABLE正常工作。这与其他方言一致，它们也保持默认值的确切形式。
- en: 'References: [#2189](https://www.sqlalchemy.org/trac/ticket/2189)'
  id: totrans-3376
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2189](https://www.sqlalchemy.org/trac/ticket/2189)
- en: mssql
  id: totrans-3377
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-3378
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Adjusted the pyodbc dialect such that bound values are passed as bytes and not
    unicode if the “Easysoft” unix drivers are detected. This is the same behavior
    as occurs with FreeTDS. Easysoft appears to segfault if Python unicodes are passed
    under certain circumstances.
  id: totrans-3379
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了pyodbc方言，如果检测到“Easysoft” unix驱动程序，则绑定值将作为字节而不是Unicode传递。这与FreeTDS发生的行为相同。在某些情况下，Easysoft似乎会在传递Python
    Unicode时导致段错误。
- en: oracle
  id: totrans-3380
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-3381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Added ORA-00028 to disconnect codes, use cx_oracle _Error.code to get at the
    code,. Also in 0.6.9.
  id: totrans-3382
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将ORA-00028添加到断开连接代码中，使用cx_oracle _Error.code来获取代码。也适用于0.6.9版本。
- en: 'References: [#2200](https://www.sqlalchemy.org/trac/ticket/2200)'
  id: totrans-3383
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2200](https://www.sqlalchemy.org/trac/ticket/2200)
- en: '**[oracle]**'
  id: totrans-3384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Added ORA-01033 to disconnect codes, which can be caught during a connection
    event.
  id: totrans-3385
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将ORA-01033添加到断开连接代码中，可以在连接事件中捕获。
- en: 'References: [#2201](https://www.sqlalchemy.org/trac/ticket/2201)'
  id: totrans-3386
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2201](https://www.sqlalchemy.org/trac/ticket/2201)
- en: '**[oracle]**'
  id: totrans-3387
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: repaired the oracle.RAW type which did not generate the correct DDL. Also in
    0.6.9.
  id: totrans-3388
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了未生成正确DDL的oracle.RAW类型。也适用于0.6.9版本。
- en: 'References: [#2220](https://www.sqlalchemy.org/trac/ticket/2220)'
  id: totrans-3389
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2220](https://www.sqlalchemy.org/trac/ticket/2220)
- en: '**[oracle]**'
  id: totrans-3390
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: added CURRENT to reserved word list. Also in 0.6.9.
  id: totrans-3391
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将CURRENT添加到保留字列表中。也适用于0.6.9版本。
- en: 'References: [#2212](https://www.sqlalchemy.org/trac/ticket/2212)'
  id: totrans-3392
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2212](https://www.sqlalchemy.org/trac/ticket/2212)
- en: '**[oracle]**'
  id: totrans-3393
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Fixed bug in the mutable extension whereby if the same type were used twice
    in one mapping, the attributes beyond the first would not get instrumented.
  id: totrans-3394
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了可变扩展中的错误，如果在一个映射中两次使用相同类型，则第一个之后的属性将不会被激活。
- en: '**[oracle]**'
  id: totrans-3395
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Fixed bug in the mutable extension whereby if None or a non-corresponding type
    were set, an error would be raised. None is now accepted which assigns None to
    all attributes, illegal values raise ValueError.
  id: totrans-3396
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了可变扩展中的错误，如果设置为None或非对应类型，则会引发错误。现在接受None，将None分配给所有属性，非法值引发ValueError。
- en: 0.7.1
  id: totrans-3397
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.7.1
- en: 'Released: Sun Jun 05 2011'
  id: totrans-3398
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2011年6月5日星期日
- en: general
  id: totrans-3399
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通用
- en: '**[general]**'
  id: totrans-3400
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general]**'
- en: Added a workaround for Python bug 7511 where failure of C extension build does
    not raise an appropriate exception on Windows 64 bit + VC express
  id: totrans-3401
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为Python bug 7511添加了一个解决方法，在Windows 64位 + VC express上，C扩展构建失败不会引发适当的异常。
- en: 'References: [#2184](https://www.sqlalchemy.org/trac/ticket/2184)'
  id: totrans-3402
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2184](https://www.sqlalchemy.org/trac/ticket/2184)
- en: orm
  id: totrans-3403
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-3404
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: ”delete-orphan” cascade is now allowed on self-referential relationships - this
    since SQLA 0.7 no longer enforces “parent with no child” at the ORM level; this
    check is left up to foreign key nullability. Related to
  id: totrans-3405
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “delete-orphan”级联现在允许在自引用关系上使用 - 自SQLA 0.7以来不再在ORM级别强制执行“父级没有子级”的检查；此检查留给外键的可空性。相关内容
- en: 'References: [#1912](https://www.sqlalchemy.org/trac/ticket/1912)'
  id: totrans-3406
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1912](https://www.sqlalchemy.org/trac/ticket/1912)
- en: '**[orm]**'
  id: totrans-3407
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Repaired new “mutable” extension to propagate events to subclasses correctly;
    don’t create multiple event listeners for subclasses either.
  id: totrans-3408
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新的“mutable”扩展，以正确传播事件到子类；也不为子类创建多个事件侦听器。
- en: 'References: [#2180](https://www.sqlalchemy.org/trac/ticket/2180)'
  id: totrans-3409
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2180](https://www.sqlalchemy.org/trac/ticket/2180)
- en: '**[orm]**'
  id: totrans-3410
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Modify the text of the message which occurs when the “identity” key isn’t detected
    on flush, to include the common cause that the Column isn’t set up to detect auto-increment
    correctly;. Also in 0.6.8.
  id: totrans-3411
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了在刷新时未检测到“identity”键时出现的消息文本，包括常见原因，即列未正确设置以检测自增。也适用于0.6.8版本。
- en: 'References: [#2170](https://www.sqlalchemy.org/trac/ticket/2170)'
  id: totrans-3412
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2170](https://www.sqlalchemy.org/trac/ticket/2170)
- en: '**[orm]**'
  id: totrans-3413
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug where transaction-level “deleted” collection wouldn’t be cleared of
    expunged states, raising an error if they later became transient. Also in 0.6.8.
  id: totrans-3414
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了事务级别的“deleted”集合不会清除已删除状态的错误，如果它们后来变为瞬态，则会引发错误。也适用于0.6.8版本。
- en: 'References: [#2182](https://www.sqlalchemy.org/trac/ticket/2182)'
  id: totrans-3415
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2182](https://www.sqlalchemy.org/trac/ticket/2182)
- en: engine
  id: totrans-3416
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine]**'
  id: totrans-3417
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: 'Deprecate schema/SQL-oriented methods on Connection/Engine that were never
    well known and are redundant: reflecttable(), create(), drop(), text(), engine.func'
  id: totrans-3418
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 废弃Connection/Engine上从未被广泛知晓且多余的基于模式/SQL的方法：reflecttable()、create()、drop()、text()、engine.func
- en: '**[engine]**'
  id: totrans-3419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: Adjusted the __contains__() method of a RowProxy result row such that no exception
    throw is generated internally; NoSuchColumnError() also will generate its message
    regardless of whether or not the column construct can be coerced to a string..
    Also in 0.6.8.
  id: totrans-3420
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了RowProxy结果行的__contains__()方法，使其在内部不会生成异常；无论列构造是否可以强制转换为字符串，NoSuchColumnError()也会生成其消息。也在0.6.8中。
- en: 'References: [#2178](https://www.sqlalchemy.org/trac/ticket/2178)'
  id: totrans-3421
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2178](https://www.sqlalchemy.org/trac/ticket/2178)
- en: sql
  id: totrans-3422
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-3423
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed bug whereby metadata.reflect(bind) would close a Connection passed as
    a bind argument. Regression from 0.6.
  id: totrans-3424
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了metadata.reflect(bind)会关闭作为绑定参数传递的Connection的bug。从0.6开始的回归。
- en: '**[sql]**'
  id: totrans-3425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Streamlined the process by which a Select determines what’s in its ‘.c’ collection.
    Behaves identically, except that a raw ClauseList() passed to select([]) (which
    is not a documented case anyway) will now be expanded into its individual column
    elements instead of being ignored.
  id: totrans-3426
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 简化了Select确定其‘.c’集合中内容的过程。行为完全相同，只是传递给select([])的原始ClauseList()（这本来就不是一个文档化的情况）现在将被扩展为其各个列元素，而不是被忽略。
- en: postgresql
  id: totrans-3427
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql]**'
  id: totrans-3428
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Some unit test fixes regarding numeric arrays, MATCH operator. A potential floating-point
    inaccuracy issue was fixed, and certain tests of the MATCH operator only execute
    within an EN-oriented locale for now. . Also in 0.6.8.
  id: totrans-3429
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关于数字数组、MATCH运算符的一些单元测试修复。修复了潜在的浮点不准确问题，并且目前某些MATCH运算符的测试仅在EN定向的区域设置下执行。也在0.6.8中。
- en: 'References: [#2175](https://www.sqlalchemy.org/trac/ticket/2175)'
  id: totrans-3430
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2175](https://www.sqlalchemy.org/trac/ticket/2175)
- en: mysql
  id: totrans-3431
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-3432
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Unit tests pass 100% on MySQL installed on windows.
  id: totrans-3433
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 单元测试在安装在Windows上的MySQL上通过率达到100%。
- en: '**[mysql]**'
  id: totrans-3434
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Removed the “adjust casing” step that would fail when reflecting a table on
    MySQL on windows with a mixed case name. After some experimenting with a windows
    MySQL server, it’s been determined that this step wasn’t really helping the situation
    much; MySQL does not return FK names with proper casing on non-windows platforms
    either, and removing the step at least allows the reflection to act more like
    it does on other OSes. A warning here has been considered but its difficult to
    determine under what conditions such a warning can be raised, so punted on that
    for now - added some docs instead.
  id: totrans-3435
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了在反射具有混合大小写名称的MySQL上的表时会失败的“调整大小写”步骤。经过一些对Windows MySQL服务器的实验后，确定这一步骤并没有真正帮助解决问题；MySQL在非Windows平台上也不会返回带有正确大小写的FK名称，移除这一步骤至少使反射的行为更像在其他操作系统上的行为。这里考虑过发出警告，但很难确定在什么条件下可以发出这样的警告，所以暂时搁置了这个问题
    - 而是添加了一些文档。
- en: 'References: [#2181](https://www.sqlalchemy.org/trac/ticket/2181)'
  id: totrans-3436
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2181](https://www.sqlalchemy.org/trac/ticket/2181)
- en: '**[mysql]**'
  id: totrans-3437
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: supports_sane_rowcount will be set to False if using MySQLdb and the DBAPI doesn’t
    provide the constants.CLIENT module.
  id: totrans-3438
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果使用MySQLdb且DBAPI不提供constants.CLIENT模块，则supports_sane_rowcount将设置为False。
- en: sqlite
  id: totrans-3439
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite]**'
  id: totrans-3440
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: Accept None from cursor.fetchone() when “PRAGMA read_uncommitted” is called
    to determine current isolation mode at connect time and default to SERIALIZABLE;
    this to support SQLite versions pre-3.3.0 that did not have this feature.
  id: totrans-3441
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当调用“PRAGMA read_uncommitted”以确定连接时的当前隔离模式并默认为SERIALIZABLE时，接受来自cursor.fetchone()的None；这是为了支持SQLite版本3.3.0之前不具备此功能的情况。
- en: 'References: [#2173](https://www.sqlalchemy.org/trac/ticket/2173)'
  id: totrans-3442
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2173](https://www.sqlalchemy.org/trac/ticket/2173)
- en: general
  id: totrans-3443
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一般
- en: '**[general]**'
  id: totrans-3444
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general]**'
- en: Added a workaround for Python bug 7511 where failure of C extension build does
    not raise an appropriate exception on Windows 64 bit + VC express
  id: totrans-3445
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为Python bug 7511添加了一个解决方法，其中C扩展构建失败不会在Windows 64位+ VC express上引发适当的异常。
- en: 'References: [#2184](https://www.sqlalchemy.org/trac/ticket/2184)'
  id: totrans-3446
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2184](https://www.sqlalchemy.org/trac/ticket/2184)
- en: orm
  id: totrans-3447
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-3448
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: ”delete-orphan” cascade is now allowed on self-referential relationships - this
    since SQLA 0.7 no longer enforces “parent with no child” at the ORM level; this
    check is left up to foreign key nullability. Related to
  id: totrans-3449
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ”delete-orphan”级联现在允许在自引用关系上使用 - 这是因为SQLA 0.7不再在ORM级别强制执行“父项没有子项”的检查；此检查留给外键的可空性。相关的
- en: 'References: [#1912](https://www.sqlalchemy.org/trac/ticket/1912)'
  id: totrans-3450
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1912](https://www.sqlalchemy.org/trac/ticket/1912)
- en: '**[orm]**'
  id: totrans-3451
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Repaired new “mutable” extension to propagate events to subclasses correctly;
    don’t create multiple event listeners for subclasses either.
  id: totrans-3452
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新的“mutable”扩展正确传播事件到子类的问题；也不会为子类创建多个事件监听器。
- en: 'References: [#2180](https://www.sqlalchemy.org/trac/ticket/2180)'
  id: totrans-3453
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2180](https://www.sqlalchemy.org/trac/ticket/2180)
- en: '**[orm]**'
  id: totrans-3454
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Modify the text of the message which occurs when the “identity” key isn’t detected
    on flush, to include the common cause that the Column isn’t set up to detect auto-increment
    correctly;. Also in 0.6.8.
  id: totrans-3455
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了在刷新时未检测到“identity”键时出现的消息文本，以包括列未正确设置以正确检测自增的常见原因；也适用于0.6.8版本。
- en: 'References: [#2170](https://www.sqlalchemy.org/trac/ticket/2170)'
  id: totrans-3456
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2170](https://www.sqlalchemy.org/trac/ticket/2170)
- en: '**[orm]**'
  id: totrans-3457
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug where transaction-level “deleted” collection wouldn’t be cleared of
    expunged states, raising an error if they later became transient. Also in 0.6.8.
  id: totrans-3458
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了事务级别的“已删除”集合不会清除已删除状态的bug，如果后来变为瞬态，则会引发错误。也适用于0.6.8版本。
- en: 'References: [#2182](https://www.sqlalchemy.org/trac/ticket/2182)'
  id: totrans-3459
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2182](https://www.sqlalchemy.org/trac/ticket/2182)
- en: engine
  id: totrans-3460
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine]**'
  id: totrans-3461
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: 'Deprecate schema/SQL-oriented methods on Connection/Engine that were never
    well known and are redundant: reflecttable(), create(), drop(), text(), engine.func'
  id: totrans-3462
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在Connection/Engine上弃用了从未被广泛知晓且多余的基于模式/SQL的方法：reflecttable()、create()、drop()、text()、engine.func
- en: '**[engine]**'
  id: totrans-3463
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: Adjusted the __contains__() method of a RowProxy result row such that no exception
    throw is generated internally; NoSuchColumnError() also will generate its message
    regardless of whether or not the column construct can be coerced to a string..
    Also in 0.6.8.
  id: totrans-3464
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了RowProxy结果行的__contains__()方法，使其在内部不生成异常；无论列构造是否可以强制转换为字符串，NoSuchColumnError()也将生成其消息。也适用于0.6.8版本。
- en: 'References: [#2178](https://www.sqlalchemy.org/trac/ticket/2178)'
  id: totrans-3465
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2178](https://www.sqlalchemy.org/trac/ticket/2178)
- en: sql
  id: totrans-3466
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-3467
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed bug whereby metadata.reflect(bind) would close a Connection passed as
    a bind argument. Regression from 0.6.
  id: totrans-3468
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了metadata.reflect(bind)会关闭传递为绑定参数的Connection的bug。从0.6版本开始的回归。
- en: '**[sql]**'
  id: totrans-3469
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Streamlined the process by which a Select determines what’s in its ‘.c’ collection.
    Behaves identically, except that a raw ClauseList() passed to select([]) (which
    is not a documented case anyway) will now be expanded into its individual column
    elements instead of being ignored.
  id: totrans-3470
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 简化了Select确定其‘.c’集合中内容的过程。行为完全相同，只是传递给select([])的原始ClauseList()（这本来就不是一个文档化的情况）现在将被扩展为其各个列元素，而不是被忽略。
- en: postgresql
  id: totrans-3471
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql]**'
  id: totrans-3472
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Some unit test fixes regarding numeric arrays, MATCH operator. A potential floating-point
    inaccuracy issue was fixed, and certain tests of the MATCH operator only execute
    within an EN-oriented locale for now. . Also in 0.6.8.
  id: totrans-3473
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关于数字数组、MATCH运算符的一些单元测试问题。修复了潜在的浮点不精确性问题，并且目前某些MATCH运算符的测试仅在EN定向的区域设置下执行。也适用于0.6.8版本。
- en: 'References: [#2175](https://www.sqlalchemy.org/trac/ticket/2175)'
  id: totrans-3474
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2175](https://www.sqlalchemy.org/trac/ticket/2175)
- en: mysql
  id: totrans-3475
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-3476
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Unit tests pass 100% on MySQL installed on windows.
  id: totrans-3477
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 单元测试在安装在Windows上的MySQL上100%通过。
- en: '**[mysql]**'
  id: totrans-3478
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Removed the “adjust casing” step that would fail when reflecting a table on
    MySQL on windows with a mixed case name. After some experimenting with a windows
    MySQL server, it’s been determined that this step wasn’t really helping the situation
    much; MySQL does not return FK names with proper casing on non-windows platforms
    either, and removing the step at least allows the reflection to act more like
    it does on other OSes. A warning here has been considered but its difficult to
    determine under what conditions such a warning can be raised, so punted on that
    for now - added some docs instead.
  id: totrans-3479
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了在Windows上使用混合大小写名称的MySQL反射表时会失败的“调整大小写”步骤。经过一些对Windows MySQL服务器的实验后，确定这一步骤并没有真正帮助解决问题；MySQL在非Windows平台上也不会返回正确大小写的FK名称，移除这一步骤至少使反射表的行为更像在其他操作系统上的行为。考虑过在此处发出警告，但很难确定在什么条件下可以发出这样的警告，因此暂时搁置了这个想法
    - 只是添加了一些文档。
- en: 'References: [#2181](https://www.sqlalchemy.org/trac/ticket/2181)'
  id: totrans-3480
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2181](https://www.sqlalchemy.org/trac/ticket/2181)
- en: '**[mysql]**'
  id: totrans-3481
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: supports_sane_rowcount will be set to False if using MySQLdb and the DBAPI doesn’t
    provide the constants.CLIENT module.
  id: totrans-3482
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果使用MySQLdb并且DBAPI不提供constants.CLIENT模块，则supports_sane_rowcount将设置为False。
- en: sqlite
  id: totrans-3483
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite]**'
  id: totrans-3484
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: Accept None from cursor.fetchone() when “PRAGMA read_uncommitted” is called
    to determine current isolation mode at connect time and default to SERIALIZABLE;
    this to support SQLite versions pre-3.3.0 that did not have this feature.
  id: totrans-3485
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在调用“PRAGMA read_uncommitted”以确定连接时的当前隔离模式并默认为SERIALIZABLE时，接受来自cursor.fetchone()的None；这是为了支持SQLite版本3.3.0之前没有此功能的情况。
- en: 'References: [#2173](https://www.sqlalchemy.org/trac/ticket/2173)'
  id: totrans-3486
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2173](https://www.sqlalchemy.org/trac/ticket/2173)
- en: 0.7.0
  id: totrans-3487
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.7.0
- en: 'Released: Fri May 20 2011'
  id: totrans-3488
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2011年5月20日星期五
- en: orm
  id: totrans-3489
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-3490
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed regression introduced in 0.7b4 (!) whereby query.options(someoption(“nonexistent
    name”)) would fail to raise an error. Also added additional error catching for
    cases where the option would try to build off a column-based element, further
    fixed up some of the error messages tailored in
  id: totrans-3491
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在0.7b4中引入的回归，即query.options(someoption(“nonexistent name”))将无法引发错误。还为尝试基于基于列的元素构建选项的情况添加了额外的错误捕获，进一步修正了一些错误消息
- en: 'References: [#2069](https://www.sqlalchemy.org/trac/ticket/2069)'
  id: totrans-3492
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2069](https://www.sqlalchemy.org/trac/ticket/2069)
- en: '**[orm]**'
  id: totrans-3493
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: query.count() emits “count(*)” instead of “count(1)”.
  id: totrans-3494
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query.count()发出“count(*)”而不是“count(1)”。
- en: 'References: [#2162](https://www.sqlalchemy.org/trac/ticket/2162)'
  id: totrans-3495
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2162](https://www.sqlalchemy.org/trac/ticket/2162)
- en: '**[orm]**'
  id: totrans-3496
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fine tuning of Query clause adaptation when from_self(), union(), or other “select
    from myself” operation, such that plain SQL expression elements added to filter(),
    order_by() etc. which are present in the nested “from myself” query *will* be
    adapted in the same way an ORM expression element will, since these elements are
    otherwise not easily accessible.
  id: totrans-3497
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用from_self()，union()或其他“从自身选择”的操作时，对Query子句适应进行微调，以便对添加到filter()，order_by()等中的普通SQL表达式元素进行适应，这些元素存在于嵌套的“从自身”查询中，*将*以与ORM表达式元素相同的方式进行适应，因为否则这些元素不容易访问。
- en: 'References: [#2155](https://www.sqlalchemy.org/trac/ticket/2155)'
  id: totrans-3498
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2155](https://www.sqlalchemy.org/trac/ticket/2155)
- en: '**[orm]**'
  id: totrans-3499
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug where determination of “self referential” relationship would fail
    with no workaround for joined-inh subclass related to itself, or joined-inh subclass
    related to a subclass of that with no cols in the sub-sub class in the join condition.
    Also in 0.6.8.
  id: totrans-3500
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即“自引用”关系的确定会失败，没有解决方案，涉及到自身的joined-inh子类，或者与没有在join条件中的子子类的子类相关联。也适用于0.6.8版本。
- en: 'References: [#2149](https://www.sqlalchemy.org/trac/ticket/2149)'
  id: totrans-3501
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2149](https://www.sqlalchemy.org/trac/ticket/2149)
- en: '**[orm]**'
  id: totrans-3502
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: mapper() will ignore non-configured foreign keys to unrelated tables when determining
    inherit condition between parent and child class, but will raise as usual for
    unresolved columns and table names regarding the inherited table. This is an enhanced
    generalization of behavior that was already applied to declarative previously.
    0.6.8 has a more conservative version of this which doesn’t fundamentally alter
    how join conditions are determined.
  id: totrans-3503
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: mapper()将在确定父类和子类之间的继承条件时忽略未配置的与不相关表的外键，但对于关于继承表的未解析列和表名，将像往常一样引发异常。这是对先前应用于声明性的行为的增强泛化。0.6.8具有更保守的版本，不会从根本上改变确定连接条件的方式。
- en: 'References: [#2153](https://www.sqlalchemy.org/trac/ticket/2153)'
  id: totrans-3504
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2153](https://www.sqlalchemy.org/trac/ticket/2153)
- en: '**[orm]**'
  id: totrans-3505
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: It is an error to call query.get() when the given entity is not a single, full
    class entity or mapper (i.e. a column). This is a deprecation warning in 0.6.8.
  id: totrans-3506
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在给定实体不是单个完整类实体或映射器（即列）时调用query.get()是一个错误。这是0.6.8中的一个弃用警告。
- en: 'References: [#2144](https://www.sqlalchemy.org/trac/ticket/2144)'
  id: totrans-3507
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2144](https://www.sqlalchemy.org/trac/ticket/2144)
- en: '**[orm]**'
  id: totrans-3508
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed a potential KeyError which under some circumstances could occur with the
    identity map, part of
  id: totrans-3509
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在某些情况下可能发生的潜在KeyError，部分
- en: 'References: [#2148](https://www.sqlalchemy.org/trac/ticket/2148)'
  id: totrans-3510
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2148](https://www.sqlalchemy.org/trac/ticket/2148)
- en: '**[orm]**'
  id: totrans-3511
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added Query.with_session() method, switches Query to use a different session.
  id: totrans-3512
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了Query.with_session()方法，将Query切换到使用不同的会话。
- en: '**[orm]**'
  id: totrans-3513
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: horizontal shard query should use execution options per connection as per
  id: totrans-3514
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 水平分片查询应该根据每个连接使用执行选项
- en: 'References: [#2131](https://www.sqlalchemy.org/trac/ticket/2131)'
  id: totrans-3515
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2131](https://www.sqlalchemy.org/trac/ticket/2131)
- en: '**[orm]**'
  id: totrans-3516
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: a non_primary mapper will inherit the _identity_class of the primary mapper.
    This so that a non_primary established against a class that’s normally in an inheritance
    mapping will produce results that are identity-map compatible with that of the
    primary mapper (also in 0.6.8)
  id: totrans-3517
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 非主 mapper 将继承主 mapper 的 _identity_class。这样，对于通常处于继承映射中的类建立的非主 mapper，将产生与主 mapper
    兼容的 identity-map 结果（也在 0.6.8 中）
- en: 'References: [#2151](https://www.sqlalchemy.org/trac/ticket/2151)'
  id: totrans-3518
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2151](https://www.sqlalchemy.org/trac/ticket/2151)
- en: '**[orm]**'
  id: totrans-3519
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed the error message emitted for “can’t execute syncrule for destination
    column ‘q’; mapper ‘X’ does not map this column” to reference the correct mapper.
    . Also in 0.6.8.
  id: totrans-3520
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“无法为目标列‘q’执行 syncrule；mapper ‘X’ 不映射此列”的错误消息，以引用正确的 mapper。也在 0.6.8 中。
- en: 'References: [#2163](https://www.sqlalchemy.org/trac/ticket/2163)'
  id: totrans-3521
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2163](https://www.sqlalchemy.org/trac/ticket/2163)
- en: '**[orm]**'
  id: totrans-3522
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: polymorphic_union() gets a “cast_nulls” option, disables the usage of CAST when
    it renders the labeled NULL columns.
  id: totrans-3523
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: polymorphic_union() 得到一个 “cast_nulls” 选项，当它渲染标记为 NULL 的列时禁用 CAST 的使用。
- en: 'References: [#1502](https://www.sqlalchemy.org/trac/ticket/1502)'
  id: totrans-3524
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1502](https://www.sqlalchemy.org/trac/ticket/1502)
- en: '**[orm]**'
  id: totrans-3525
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: polymorphic_union() renders the columns in their original table order, as according
    to the first table/selectable in the list of polymorphic unions in which they
    appear. (which is itself an unordered mapping unless you pass an OrderedDict).
  id: totrans-3526
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: polymorphic_union() 将列按照它们在原始表中的顺序渲染，根据它们在出现的多态联合列表中的第一个表/可选择的表来排序。（除非你传递了一个
    OrderedDict，否则这本身就是一个无序映射）。
- en: '**[orm]**'
  id: totrans-3527
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby mapper mapped to an anonymous alias would fail if logging
    were used, due to unescaped % sign in the alias name. Also in 0.6.8.
  id: totrans-3528
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即如果将 mapper 映射到一个匿名别名，则在使用日志记录时会失败，因为别名中的 % 符号未经转义。也在 0.6.8 中。
- en: 'References: [#2171](https://www.sqlalchemy.org/trac/ticket/2171)'
  id: totrans-3529
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2171](https://www.sqlalchemy.org/trac/ticket/2171)
- en: examples
  id: totrans-3530
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples]**'
  id: totrans-3531
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[示例]**'
- en: removed the ancient “polymorphic association” examples and replaced with an
    updated set of examples that use declarative mixins, “generic_associations”. Each
    presents an alternative table layout.
  id: totrans-3532
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 删除了古老的“多态关联”示例，并用使用声明性 mixin、“通用关联”更新的示例集进行替换。每个示例都提供了一种替代的表布局。
- en: sql
  id: totrans-3533
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-3534
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed bug whereby nesting a label of a select() with another label in it would
    produce incorrect exported columns. Among other things this would break an ORM
    column_property() mapping against another column_property(). . Also in 0.6.8
  id: totrans-3535
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即将 select() 的一个标签嵌套到另一个标签中会产生错误的导出列。除其他事项外，这会破坏对另一个 column_property()
    的 ORM column_property() 映射。也在 0.6.8 中
- en: 'References: [#2167](https://www.sqlalchemy.org/trac/ticket/2167)'
  id: totrans-3536
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2167](https://www.sqlalchemy.org/trac/ticket/2167)
- en: '**[sql]**'
  id: totrans-3537
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Changed the handling in determination of join conditions such that foreign key
    errors are only considered between the two given tables. That is, t1.join(t2)
    will report FK errors that involve ‘t1’ or ‘t2’, but anything involving ‘t3’ will
    be skipped. This affects join(), as well as ORM relationship and inherit condition
    logic.
  id: totrans-3538
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更改了确定连接条件的处理方式，使得外键错误仅在两个给定的表之间考虑。也就是说，t1.join(t2) 将报告涉及‘t1’或‘t2’的 FK 错误，但任何涉及‘t3’的内容都将被跳过。这会影响
    join()，以及 ORM 关系和继承条件逻辑。
- en: '**[sql]**'
  id: totrans-3539
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Some improvements to error handling inside of the execute procedure to ensure
    auto-close connections are really closed when very unusual DBAPI errors occur.
  id: totrans-3540
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在执行过程中对错误处理进行了一些改进，以确保在出现非常不寻常的 DBAPI 错误时自动关闭的连接确实关闭。
- en: '**[sql]**'
  id: totrans-3541
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: metadata.reflect() and reflection.Inspector() had some reliance on GC to close
    connections which were internally procured, fixed this.
  id: totrans-3542
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: metadata.reflect() 和 reflection.Inspector() 对内部获取的连接有一些依赖关系，这些依赖关系已经被修复。
- en: '**[sql]**'
  id: totrans-3543
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added explicit check for when Column .name is assigned as blank string
  id: totrans-3544
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个显式检查，当列 .name 被赋予空字符串时
- en: 'References: [#2140](https://www.sqlalchemy.org/trac/ticket/2140)'
  id: totrans-3545
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2140](https://www.sqlalchemy.org/trac/ticket/2140)
- en: '**[sql]**'
  id: totrans-3546
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed bug whereby if FetchedValue was passed to column server_onupdate, it would
    not have its parent “column” assigned, added test coverage for all column default
    assignment patterns. also in 0.6.8
  id: totrans-3547
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即如果将 FetchedValue 传递给列 server_onupdate，则其父“列”将不会被赋值，为所有列默认赋值模式添加了测试覆盖。也在
    0.6.8 中。
- en: 'References: [#2147](https://www.sqlalchemy.org/trac/ticket/2147)'
  id: totrans-3548
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2147](https://www.sqlalchemy.org/trac/ticket/2147)
- en: postgresql
  id: totrans-3549
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql]**'
  id: totrans-3550
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Fixed the psycopg2_version parsing in the psycopg2 dialect.
  id: totrans-3551
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 psycopg2 方言中解析 psycopg2_version 的问题。
- en: '**[postgresql]**'
  id: totrans-3552
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Fixed bug affecting PG 9 whereby index reflection would fail if against a column
    whose name had changed. . Also in 0.6.8.
  id: totrans-3553
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了影响PG 9的bug，其中反射索引会失败，如果针对更改名称的列。也在0.6.8中。
- en: 'References: [#2141](https://www.sqlalchemy.org/trac/ticket/2141)'
  id: totrans-3554
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2141](https://www.sqlalchemy.org/trac/ticket/2141)
- en: mssql
  id: totrans-3555
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-3556
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Fixed bug in MSSQL dialect whereby the aliasing applied to a schema-qualified
    table would leak into enclosing select statements. Also in 0.6.8.
  id: totrans-3557
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了MSSQL方言中的bug，其中应用于模式限定表的别名会泄漏到封闭的select语句中。也在0.6.8中。
- en: 'References: [#2169](https://www.sqlalchemy.org/trac/ticket/2169)'
  id: totrans-3558
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2169](https://www.sqlalchemy.org/trac/ticket/2169)
- en: misc
  id: totrans-3559
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[no_tags]**'
  id: totrans-3560
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: This section documents those changes from 0.7b4 to 0.7.0\. For an overview of
    what’s new in SQLAlchemy 0.7, see [https://docs.sqlalchemy.org/en/latest/changelog/migration_07.html](https://docs.sqlalchemy.org/en/latest/changelog/migration_07.html)
  id: totrans-3561
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 本节记录了从0.7b4到0.7.0的更改。有关SQLAlchemy 0.7中的新功能概述，请参见[https://docs.sqlalchemy.org/en/latest/changelog/migration_07.html](https://docs.sqlalchemy.org/en/latest/changelog/migration_07.html)
- en: '**[documentation]**'
  id: totrans-3562
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[documentation]**'
- en: Removed the usage of the “collections.MutableMapping” abc from the ext.mutable
    docs as it was being used incorrectly and makes the example more difficult to
    understand in any case.
  id: totrans-3563
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从ext.mutable文档中删除了对“collections.MutableMapping” abc的使用，因为它被错误地使用，并且在任何情况下都使示例更难理解。
- en: 'References: [#2152](https://www.sqlalchemy.org/trac/ticket/2152)'
  id: totrans-3564
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2152](https://www.sqlalchemy.org/trac/ticket/2152)
- en: '**[ext]**'
  id: totrans-3565
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: Fixed bugs in sqlalchemy.ext.mutable extension where None was not appropriately
    handled, replacement events were not appropriately handled.
  id: totrans-3566
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了sqlalchemy.ext.mutable扩展中的bug，其中None没有得到适当处理，替换事件也没有得到适当处理。
- en: 'References: [#2143](https://www.sqlalchemy.org/trac/ticket/2143)'
  id: totrans-3567
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2143](https://www.sqlalchemy.org/trac/ticket/2143)
- en: orm
  id: totrans-3568
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-3569
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed regression introduced in 0.7b4 (!) whereby query.options(someoption(“nonexistent
    name”)) would fail to raise an error. Also added additional error catching for
    cases where the option would try to build off a column-based element, further
    fixed up some of the error messages tailored in
  id: totrans-3570
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在0.7b4中引入的回归（！），在那里查询选项（someoption(“不存在的名称”))将无法引发错误。还为尝试基于基于列的元素构建选项的情况添加了额外的错误捕获，进一步修复了一些定制的错误消息
- en: 'References: [#2069](https://www.sqlalchemy.org/trac/ticket/2069)'
  id: totrans-3571
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2069](https://www.sqlalchemy.org/trac/ticket/2069)
- en: '**[orm]**'
  id: totrans-3572
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: query.count() emits “count(*)” instead of “count(1)”.
  id: totrans-3573
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query.count() 发出“count(*)”而不是“count(1)”。
- en: 'References: [#2162](https://www.sqlalchemy.org/trac/ticket/2162)'
  id: totrans-3574
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2162](https://www.sqlalchemy.org/trac/ticket/2162)
- en: '**[orm]**'
  id: totrans-3575
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fine tuning of Query clause adaptation when from_self(), union(), or other “select
    from myself” operation, such that plain SQL expression elements added to filter(),
    order_by() etc. which are present in the nested “from myself” query *will* be
    adapted in the same way an ORM expression element will, since these elements are
    otherwise not easily accessible.
  id: totrans-3576
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在from_self()，union()或其他“从自己选择”的操作时，对Query子句适应进行微调，以便在嵌套的“from myself”查询中添加到filter()，order_by()等中的纯SQL表达式元素将以与ORM表达式元素相同的方式进行适应，因为否则这些元素不容易访问。
- en: 'References: [#2155](https://www.sqlalchemy.org/trac/ticket/2155)'
  id: totrans-3577
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2155](https://www.sqlalchemy.org/trac/ticket/2155)
- en: '**[orm]**'
  id: totrans-3578
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug where determination of “self referential” relationship would fail
    with no workaround for joined-inh subclass related to itself, or joined-inh subclass
    related to a subclass of that with no cols in the sub-sub class in the join condition.
    Also in 0.6.8.
  id: totrans-3579
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，当判断“自引用”关系失败时，没有解决方法，导致与自身相关的joined-inh子类或与没有在子子类中的列在连接条件中的子类相关的joined-inh子类。也在0.6.8中。
- en: 'References: [#2149](https://www.sqlalchemy.org/trac/ticket/2149)'
  id: totrans-3580
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2149](https://www.sqlalchemy.org/trac/ticket/2149)
- en: '**[orm]**'
  id: totrans-3581
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: mapper() will ignore non-configured foreign keys to unrelated tables when determining
    inherit condition between parent and child class, but will raise as usual for
    unresolved columns and table names regarding the inherited table. This is an enhanced
    generalization of behavior that was already applied to declarative previously.
    0.6.8 has a more conservative version of this which doesn’t fundamentally alter
    how join conditions are determined.
  id: totrans-3582
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: mapper()将在确定父类和子类之间的继承条件时忽略与无关表的非配置外键，但对于未解析的列和表名，关于继承表的继承条件将像往常一样引发异常。这是对以前已应用于声明的行为的增强泛化。0.6.8有一个更保守的版本，不会根本改变如何确定连接条件。
- en: 'References: [#2153](https://www.sqlalchemy.org/trac/ticket/2153)'
  id: totrans-3583
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2153](https://www.sqlalchemy.org/trac/ticket/2153)
- en: '**[orm]**'
  id: totrans-3584
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: It is an error to call query.get() when the given entity is not a single, full
    class entity or mapper (i.e. a column). This is a deprecation warning in 0.6.8.
  id: totrans-3585
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在给定实体不是单一的、完整的类实体或映射器（即一个列）时调用query.get()是一个错误。这在0.6.8中是一个废弃的警告。
- en: 'References: [#2144](https://www.sqlalchemy.org/trac/ticket/2144)'
  id: totrans-3586
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2144](https://www.sqlalchemy.org/trac/ticket/2144)
- en: '**[orm]**'
  id: totrans-3587
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed a potential KeyError which under some circumstances could occur with the
    identity map, part of
  id: totrans-3588
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在某些情况下可能会发生的潜在的KeyError，该错误可能会在标识映射中发生，这是的一部分
- en: 'References: [#2148](https://www.sqlalchemy.org/trac/ticket/2148)'
  id: totrans-3589
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2148](https://www.sqlalchemy.org/trac/ticket/2148)
- en: '**[orm]**'
  id: totrans-3590
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added Query.with_session() method, switches Query to use a different session.
  id: totrans-3591
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了Query.with_session()方法，将Query切换到使用不同的会话。
- en: '**[orm]**'
  id: totrans-3592
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: horizontal shard query should use execution options per connection as per
  id: totrans-3593
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 水平分片查询应该使用每个连接的执行选项，如
- en: 'References: [#2131](https://www.sqlalchemy.org/trac/ticket/2131)'
  id: totrans-3594
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2131](https://www.sqlalchemy.org/trac/ticket/2131)
- en: '**[orm]**'
  id: totrans-3595
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: a non_primary mapper will inherit the _identity_class of the primary mapper.
    This so that a non_primary established against a class that’s normally in an inheritance
    mapping will produce results that are identity-map compatible with that of the
    primary mapper (also in 0.6.8)
  id: totrans-3596
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 非主要映射器将继承主映射器的_identity_class。这样，对于通常处于继承映射中的类进行非主要建立的情况，将产生与主映射器的标识映射兼容的结果（也在0.6.8中）。
- en: 'References: [#2151](https://www.sqlalchemy.org/trac/ticket/2151)'
  id: totrans-3597
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2151](https://www.sqlalchemy.org/trac/ticket/2151)
- en: '**[orm]**'
  id: totrans-3598
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed the error message emitted for “can’t execute syncrule for destination
    column ‘q’; mapper ‘X’ does not map this column” to reference the correct mapper.
    . Also in 0.6.8.
  id: totrans-3599
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“无法为目标列‘q’执行syncrule；映射‘X’未映射此列”的错误消息，以引用正确的映射器。也在0.6.8中。
- en: 'References: [#2163](https://www.sqlalchemy.org/trac/ticket/2163)'
  id: totrans-3600
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2163](https://www.sqlalchemy.org/trac/ticket/2163)
- en: '**[orm]**'
  id: totrans-3601
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: polymorphic_union() gets a “cast_nulls” option, disables the usage of CAST when
    it renders the labeled NULL columns.
  id: totrans-3602
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: polymorphic_union()获得了一个“cast_nulls”选项，当它呈现标记的NULL列时，禁用了CAST的使用。
- en: 'References: [#1502](https://www.sqlalchemy.org/trac/ticket/1502)'
  id: totrans-3603
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1502](https://www.sqlalchemy.org/trac/ticket/1502)
- en: '**[orm]**'
  id: totrans-3604
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: polymorphic_union() renders the columns in their original table order, as according
    to the first table/selectable in the list of polymorphic unions in which they
    appear. (which is itself an unordered mapping unless you pass an OrderedDict).
  id: totrans-3605
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: polymorphic_union()以它们在原始表中的顺序呈现列，根据它们在多态联合列表中首次出现的第一个表/可选择表。 （除非您传递了一个OrderedDict，否则它本身是一个无序映射）。
- en: '**[orm]**'
  id: totrans-3606
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby mapper mapped to an anonymous alias would fail if logging
    were used, due to unescaped % sign in the alias name. Also in 0.6.8.
  id: totrans-3607
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即如果使用了日志记录，则映射到匿名别名的映射器将失败，因为别名名称中存在未转义的%符号。同样也在0.6.8中。
- en: 'References: [#2171](https://www.sqlalchemy.org/trac/ticket/2171)'
  id: totrans-3608
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2171](https://www.sqlalchemy.org/trac/ticket/2171)
- en: examples
  id: totrans-3609
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 例子
- en: '**[examples]**'
  id: totrans-3610
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples]**'
- en: removed the ancient “polymorphic association” examples and replaced with an
    updated set of examples that use declarative mixins, “generic_associations”. Each
    presents an alternative table layout.
  id: totrans-3611
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 删除了古老的“多态关联”示例，并用使用声明性混合项、“通用关联”替换了一组更新后的示例。每个示例呈现了一种替代的表布局。
- en: sql
  id: totrans-3612
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-3613
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed bug whereby nesting a label of a select() with another label in it would
    produce incorrect exported columns. Among other things this would break an ORM
    column_property() mapping against another column_property(). . Also in 0.6.8
  id: totrans-3614
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即将select()的标签嵌套在另一个标签中时，将产生不正确的导出列。除其他外，这会破坏针对另一个列属性()映射的ORM列属性()映射。也在0.6.8中
- en: 'References: [#2167](https://www.sqlalchemy.org/trac/ticket/2167)'
  id: totrans-3615
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2167](https://www.sqlalchemy.org/trac/ticket/2167)
- en: '**[sql]**'
  id: totrans-3616
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Changed the handling in determination of join conditions such that foreign key
    errors are only considered between the two given tables. That is, t1.join(t2)
    will report FK errors that involve ‘t1’ or ‘t2’, but anything involving ‘t3’ will
    be skipped. This affects join(), as well as ORM relationship and inherit condition
    logic.
  id: totrans-3617
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更改了决定连接条件的处理方式，使外键错误仅在两个给定的表之间考虑。也就是说，t1.join(t2)将报告涉及‘t1’或‘t2’的FK错误，但任何涉及‘t3’的都将被跳过。这影响join()，以及ORM关系和继承条件逻辑。
- en: '**[sql]**'
  id: totrans-3618
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Some improvements to error handling inside of the execute procedure to ensure
    auto-close connections are really closed when very unusual DBAPI errors occur.
  id: totrans-3619
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在execute过程内部的错误处理中进行了一些改进，以确保在发生非常不寻常的DBAPI错误时真正关闭自动关闭的连接。
- en: '**[sql]**'
  id: totrans-3620
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: metadata.reflect() and reflection.Inspector() had some reliance on GC to close
    connections which were internally procured, fixed this.
  id: totrans-3621
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: metadata.reflect() 和 reflection.Inspector() 在调用 GC 关闭内部获取的连接时存在一些依赖关系，已修复此问题。
- en: '**[sql]**'
  id: totrans-3622
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added explicit check for when Column .name is assigned as blank string
  id: totrans-3623
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 Column .name 被分配为空字符串时的显式检查
- en: 'References: [#2140](https://www.sqlalchemy.org/trac/ticket/2140)'
  id: totrans-3624
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2140](https://www.sqlalchemy.org/trac/ticket/2140)
- en: '**[sql]**'
  id: totrans-3625
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed bug whereby if FetchedValue was passed to column server_onupdate, it would
    not have its parent “column” assigned, added test coverage for all column default
    assignment patterns. also in 0.6.8
  id: totrans-3626
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即如果将 FetchedValue 传递给列 server_onupdate，则其父“列”将不会被分配，为所有列默认分配模式增加了测试覆盖。同时也在
    0.6.8 版中进行了修复。
- en: 'References: [#2147](https://www.sqlalchemy.org/trac/ticket/2147)'
  id: totrans-3627
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2147](https://www.sqlalchemy.org/trac/ticket/2147)
- en: postgresql
  id: totrans-3628
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql]**'
  id: totrans-3629
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Fixed the psycopg2_version parsing in the psycopg2 dialect.
  id: totrans-3630
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 psycopg2 方言中 psycopg2_version 解析的错误。
- en: '**[postgresql]**'
  id: totrans-3631
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Fixed bug affecting PG 9 whereby index reflection would fail if against a column
    whose name had changed. . Also in 0.6.8.
  id: totrans-3632
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了影响 PG 9 的错误，即索引反射将失败，如果针对更改了名称的列进行。同时也在 0.6.8 版中进行了修复。
- en: 'References: [#2141](https://www.sqlalchemy.org/trac/ticket/2141)'
  id: totrans-3633
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2141](https://www.sqlalchemy.org/trac/ticket/2141)
- en: mssql
  id: totrans-3634
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-3635
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Fixed bug in MSSQL dialect whereby the aliasing applied to a schema-qualified
    table would leak into enclosing select statements. Also in 0.6.8.
  id: totrans-3636
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 MSSQL 方言中的错误，其中应用于带模式限定的表的别名会泄漏到封闭的 select 语句中。同时也在 0.6.8 版中进行了修复。
- en: 'References: [#2169](https://www.sqlalchemy.org/trac/ticket/2169)'
  id: totrans-3637
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2169](https://www.sqlalchemy.org/trac/ticket/2169)
- en: misc
  id: totrans-3638
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[no_tags]**'
  id: totrans-3639
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: This section documents those changes from 0.7b4 to 0.7.0\. For an overview of
    what’s new in SQLAlchemy 0.7, see [https://docs.sqlalchemy.org/en/latest/changelog/migration_07.html](https://docs.sqlalchemy.org/en/latest/changelog/migration_07.html)
  id: totrans-3640
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此部分记录了从 0.7b4 到 0.7.0 的更改。有关 SQLAlchemy 0.7 中的新功能概述，请参阅 [https://docs.sqlalchemy.org/en/latest/changelog/migration_07.html](https://docs.sqlalchemy.org/en/latest/changelog/migration_07.html)
- en: '**[documentation]**'
  id: totrans-3641
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[文档]**'
- en: Removed the usage of the “collections.MutableMapping” abc from the ext.mutable
    docs as it was being used incorrectly and makes the example more difficult to
    understand in any case.
  id: totrans-3642
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从 ext.mutable 文档中删除了对“collections.MutableMapping” abc 的使用，因为它使用不正确，而且在任何情况下都使示例更难理解。
- en: 'References: [#2152](https://www.sqlalchemy.org/trac/ticket/2152)'
  id: totrans-3643
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2152](https://www.sqlalchemy.org/trac/ticket/2152)
- en: '**[ext]**'
  id: totrans-3644
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: Fixed bugs in sqlalchemy.ext.mutable extension where None was not appropriately
    handled, replacement events were not appropriately handled.
  id: totrans-3645
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 sqlalchemy.ext.mutable 扩展中修复了一些错误，其中 None 没有得到适当处理，替换事件也没有得到适当处理。
- en: 'References: [#2143](https://www.sqlalchemy.org/trac/ticket/2143)'
  id: totrans-3646
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2143](https://www.sqlalchemy.org/trac/ticket/2143)
- en: 0.7.0b4
  id: totrans-3647
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.7.0b4
- en: 'Released: Sun Apr 17 2011'
  id: totrans-3648
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2011 年 4 月 17 日
- en: general
  id: totrans-3649
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通用
- en: '**[general]**'
  id: totrans-3650
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[通用]**'
- en: Changes to the format of CHANGES, this file. The format changes have been applied
    to the 0.7 releases.
  id: totrans-3651
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更改了 CHANGES，即本文件的格式。格式更改已应用于 0.7 版本。
- en: '**[general]**'
  id: totrans-3652
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[通用]**'
- en: The “-declarative” changes will now be listed directly under the “-orm” section,
    as these are closely related.
  id: totrans-3653
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，“-declarative” 更改将直接列在“-orm”部分下面，因为这些更改是密切相关的。
- en: '**[general]**'
  id: totrans-3654
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[通用]**'
- en: The 0.5 series changes have been moved to the file CHANGES_PRE_06 which replaces
    CHANGES_PRE_05.
  id: totrans-3655
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 0.5 系列的更改已经移至文件 CHANGES_PRE_06，该文件替代了 CHANGES_PRE_05。
- en: '**[general]**'
  id: totrans-3656
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[通用]**'
- en: The changelog for 0.6.7 and subsequent within the 0.6 series is now listed only
    in the CHANGES file within the 0.6 branch. In the 0.7 CHANGES file (i.e. this
    file), all the 0.6 changes are listed inline within the 0.7 section in which they
    were also applied (since all 0.6 changes are in 0.7 as well). Changes that apply
    to an 0.6 version here are noted as are if any differences in implementation/behavior
    are present.
  id: totrans-3657
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 0.6.7 及其后续版本在 0.6 系列中现在只在 0.6 分支中的 CHANGES 文件中列出。在 0.7 CHANGES 文件中（即本文件），所有
    0.6 的更改都以行内方式列在它们被应用的 0.7 部分中（因为所有 0.6 更改也都在 0.7 中）。这里适用于 0.6 版本的更改被记录，以及如果存在任何实现/行为上的差异则予以注明。
- en: orm
  id: totrans-3658
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-3659
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Some fixes to “evaluate” and “fetch” evaluation when query.update(), query.delete()
    are called. The retrieval of records is done after autoflush in all cases, and
    before update/delete is emitted, guarding against unflushed data present as well
    as expired objects failing during the evaluation.
  id: totrans-3660
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当调用 query.update()、query.delete() 时，对“evaluate”和“fetch”评估进行了一些修复。在所有情况下，记录的检索都在自动提交之后进行，并且在发出更新/删除之前进行，以防止存在未提交的数据以及在评估期间失败的过期对象。
- en: 'References: [#2122](https://www.sqlalchemy.org/trac/ticket/2122)'
  id: totrans-3661
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2122](https://www.sqlalchemy.org/trac/ticket/2122)
- en: '**[orm]**'
  id: totrans-3662
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Reworded the exception raised when a flush is attempted of a subclass that is
    not polymorphic against the supertype.
  id: totrans-3663
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重新修订了当尝试刷新一个不是对超类型进行多态的子类时引发的异常。
- en: 'References: [#2063](https://www.sqlalchemy.org/trac/ticket/2063)'
  id: totrans-3664
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2063](https://www.sqlalchemy.org/trac/ticket/2063)
- en: '**[orm]**'
  id: totrans-3665
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Still more wording adjustments when a query option can’t find the target entity.
    Explain that the path must be from one of the root entities.
  id: totrans-3666
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当查询选项无法找到目标实体时，仍需进行更多的措辞调整。解释路径必须来自一个根实体。
- en: '**[orm]**'
  id: totrans-3667
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Some fixes to the state handling regarding backrefs, typically when autoflush=False,
    where the back-referenced collection wouldn’t properly handle add/removes with
    no net change. Thanks to Richard Murri for the test case + patch. (also in 0.6.7).
  id: totrans-3668
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关于反向引用的状态处理进行了一些修复，通常在autoflush=False时，反向引用的集合不会正确处理没有净变化的添加/删除。感谢Richard Murri提供的测试用例和补丁。（也在0.6.7中）。
- en: 'References: [#2123](https://www.sqlalchemy.org/trac/ticket/2123)'
  id: totrans-3669
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2123](https://www.sqlalchemy.org/trac/ticket/2123)
- en: '**[orm]**'
  id: totrans-3670
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added checks inside the UOW to detect the unusual condition of being asked to
    UPDATE or DELETE on a primary key value that contains NULL in it.
  id: totrans-3671
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在UOW内添加了检查，以检测在主键值中包含NULL时被要求进行UPDATE或DELETE的异常情况。
- en: 'References: [#2127](https://www.sqlalchemy.org/trac/ticket/2127)'
  id: totrans-3672
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2127](https://www.sqlalchemy.org/trac/ticket/2127)
- en: '**[orm]**'
  id: totrans-3673
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Some refinements to attribute history. More changes are pending possibly in
    0.8, but for now history has been modified such that scalar history doesn’t have
    a “side effect” of populating None for a non-present value. This allows a slightly
    better ability to distinguish between a None set and no actual change, affects
    as well.
  id: totrans-3674
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对属性历史进行了一些改进。更多的变化可能会在0.8版本中进行，但目前历史已经被修改，使得标量历史不会在非存在值时填充为None。这样稍微更好地区分了None设置和实际没有变化的能力，也会产生影响。
- en: 'References: [#2127](https://www.sqlalchemy.org/trac/ticket/2127)'
  id: totrans-3675
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2127](https://www.sqlalchemy.org/trac/ticket/2127)
- en: '**[orm]**'
  id: totrans-3676
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: a “having” clause would be copied from the inside to the outside query if from_self()
    were used; in particular this would break an 0.7 style count() query. (also in
    0.6.7)
  id: totrans-3677
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果使用from_self()，则“having��子句将从内部复制到外部查询；特别是这将破坏0.7风格的count()查询。（也在0.6.7中）
- en: 'References: [#2130](https://www.sqlalchemy.org/trac/ticket/2130)'
  id: totrans-3678
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2130](https://www.sqlalchemy.org/trac/ticket/2130)
- en: '**[orm]**'
  id: totrans-3679
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: the Query.execution_options() method now passes those options to the Connection
    rather than the SELECT statement, so that all available options including isolation
    level and compiled cache may be used.
  id: totrans-3680
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query.execution_options()方法现在将这些选项传递给Connection而不是SELECT语句，以便可以使用所有可用选项，包括隔离级别和编译缓存。
- en: 'References: [#2131](https://www.sqlalchemy.org/trac/ticket/2131)'
  id: totrans-3681
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2131](https://www.sqlalchemy.org/trac/ticket/2131)
- en: engine
  id: totrans-3682
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine]**'
  id: totrans-3683
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: The C extension is now enabled by default on CPython 2.x with a fallback to
    pure python if it fails to compile.
  id: totrans-3684
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: C扩展现在在CPython 2.x上默认启用，如果编译失败，则回退到纯Python。
- en: 'References: [#2129](https://www.sqlalchemy.org/trac/ticket/2129)'
  id: totrans-3685
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2129](https://www.sqlalchemy.org/trac/ticket/2129)
- en: sql
  id: totrans-3686
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-3687
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The “compiled_cache” execution option now raises an error when passed to a SELECT
    statement rather than a Connection. Previously it was being ignored entirely.
    We may look into having this option work on a per-statement level at some point.
  id: totrans-3688
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “compiled_cache”执行选项现在在传递给SELECT语句而不是Connection时会引发错误。之前它完全被忽略。我们可能会考虑在某个时候使这个选项在每个语句级别上工作。
- en: 'References: [#2131](https://www.sqlalchemy.org/trac/ticket/2131)'
  id: totrans-3689
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2131](https://www.sqlalchemy.org/trac/ticket/2131)
- en: '**[sql]**'
  id: totrans-3690
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Restored the “catchall” constructor on the base TypeEngine class, with a deprecation
    warning. This so that code which does something like Integer(11) still succeeds.
  id: totrans-3691
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 恢复了基本TypeEngine类上的“catchall”构造函数，并附带弃用警告。这样，像Integer(11)这样的代码仍然可以成功。
- en: '**[sql]**'
  id: totrans-3692
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed regression whereby MetaData() coming back from unpickling did not keep
    track of new things it keeps track of now, i.e. collection of Sequence objects,
    list of schema names.
  id: totrans-3693
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了回归，即从反序列化中返回的MetaData()没有跟踪现在跟踪的新内容，即Sequence对象的集合，模式名称列表。
- en: 'References: [#2104](https://www.sqlalchemy.org/trac/ticket/2104)'
  id: totrans-3694
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2104](https://www.sqlalchemy.org/trac/ticket/2104)
- en: '**[sql]**'
  id: totrans-3695
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The limit/offset keywords to select() as well as the value passed to select.limit()/offset()
    will be coerced to integer. (also in 0.6.7)
  id: totrans-3696
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: select()中的limit/offset关键字以及传递给select.limit()/offset()的值将被强制转换为整数。（也在0.6.7中）
- en: 'References: [#2116](https://www.sqlalchemy.org/trac/ticket/2116)'
  id: totrans-3697
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#2116](https://www.sqlalchemy.org/trac/ticket/2116)
- en: '**[sql]**'
  id: totrans-3698
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: fixed bug where “from” clause gathering from an over() clause would be an itertools.chain()
    and not a list, causing “can only concatenate list” TypeError when combined with
    other clauses.
  id: totrans-3699
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即从 over() 子句中收集的“from”子句将是一个 itertools.chain() 而不是一个列表，当与其他子句组合时会导致“can
    only concatenate list” TypeError。
- en: '**[sql]**'
  id: totrans-3700
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed incorrect usage of “,” in over() clause being placed between the “partition”
    and “order by” clauses.
  id: totrans-3701
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 over() 子句中不正确使用“,”的问题，该问题被放置在“partition”和“order by”子句之间。
- en: 'References: [#2134](https://www.sqlalchemy.org/trac/ticket/2134)'
  id: totrans-3702
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#2134](https://www.sqlalchemy.org/trac/ticket/2134)
- en: '**[sql]**'
  id: totrans-3703
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Before/after attach events for PrimaryKeyConstraint now function, tests added
    for before/after events on all constraint types.
  id: totrans-3704
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: PrimaryKeyConstraint 的 before/after attach 事件现在可以正常使用，为所有约束类型添加了 before/after
    事件的测试。
- en: 'References: [#2105](https://www.sqlalchemy.org/trac/ticket/2105)'
  id: totrans-3705
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#2105](https://www.sqlalchemy.org/trac/ticket/2105)
- en: '**[sql]**'
  id: totrans-3706
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added explicit true()/false() constructs to expression lib - coercion rules
    will intercept “False”/”True” into these constructs. In 0.6, the constructs were
    typically converted straight to string, which was no longer accepted in 0.7.
  id: totrans-3707
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了显式的 true()/false() 构造到表达式库 - 强制规则将“False”/“True”拦截到这些构造中。在 0.6 版本中，这些构造通常直接转换为字符串，但在
    0.7 版本中不再接受。
- en: 'References: [#2117](https://www.sqlalchemy.org/trac/ticket/2117)'
  id: totrans-3708
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#2117](https://www.sqlalchemy.org/trac/ticket/2117)
- en: schema
  id: totrans-3709
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: schema
- en: '**[schema]**'
  id: totrans-3710
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: The ‘useexisting’ flag on Table has been superseded by a new pair of flags ‘keep_existing’
    and ‘extend_existing’. ‘extend_existing’ is equivalent to ‘useexisting’ - the
    existing Table is returned, and additional constructor elements are added. With
    ‘keep_existing’, the existing Table is returned, but additional constructor elements
    are not added - these elements are only applied when the Table is newly created.
  id: totrans-3711
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Table 上的 ‘useexisting’ 标志已被一对新标志 ‘keep_existing’ 和 ‘extend_existing’ 所取代。‘extend_existing’
    等效于 ‘useexisting’ - 返回现有的 Table，并添加附加的构造元素。使用 ‘keep_existing’，返回现有的 Table，但不添加附加的构造元素
    - 这些元素仅在新创建 Table 时应用。
- en: 'References: [#2109](https://www.sqlalchemy.org/trac/ticket/2109)'
  id: totrans-3712
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#2109](https://www.sqlalchemy.org/trac/ticket/2109)
- en: postgresql
  id: totrans-3713
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql]**'
  id: totrans-3714
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Psycopg2 for Python 3 is now supported.
  id: totrans-3715
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 支持 Python 3 的 Psycopg2 现已支持。
- en: '**[postgresql]**'
  id: totrans-3716
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Fixed support for precision numerics when using pg8000.
  id: totrans-3717
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用 pg8000 时对精度数字的支持。
- en: 'References: [#2132](https://www.sqlalchemy.org/trac/ticket/2132)'
  id: totrans-3718
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#2132](https://www.sqlalchemy.org/trac/ticket/2132)
- en: sqlite
  id: totrans-3719
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite]**'
  id: totrans-3720
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: Fixed bug where reflection of foreign key created as “REFERENCES <tablename>”
    without col name would fail. (also in 0.6.7)
  id: totrans-3721
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了如果作为“REFERENCES <tablename>”创建的外键的反射没有列名，则会失败的 bug。 （也在 0.6.7 版本中）
- en: 'References: [#2115](https://www.sqlalchemy.org/trac/ticket/2115)'
  id: totrans-3722
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#2115](https://www.sqlalchemy.org/trac/ticket/2115)
- en: oracle
  id: totrans-3723
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-3724
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Using column names that would require quotes for the column itself or for a
    name-generated bind parameter, such as names with special characters, underscores,
    non-ascii characters, now properly translate bind parameter keys when talking
    to cx_oracle. (Also in 0.6.7)
  id: totrans-3725
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当与 cx_oracle 通信时，对于需要为列本身或名称生成的绑定参数，例如具有特殊字符、下划线、非 ASCII 字符的名称，现在正确地将绑定参数键翻译为列名。
    （也在 0.6.7 版本中）
- en: 'References: [#2100](https://www.sqlalchemy.org/trac/ticket/2100)'
  id: totrans-3726
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#2100](https://www.sqlalchemy.org/trac/ticket/2100)
- en: '**[oracle]**'
  id: totrans-3727
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Oracle dialect adds use_binds_for_limits=False create_engine() flag, will render
    the LIMIT/OFFSET values inline instead of as binds, reported to modify the execution
    plan used by Oracle. (Also in 0.6.7)
  id: totrans-3728
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Oracle 方言添加了 use_binds_for_limits=False create_engine() 标志，将在行内呈现 LIMIT/OFFSET
    值，而不是作为绑定，据报道修改了 Oracle 使用的执行计划。 （也在 0.6.7 版本中）
- en: 'References: [#2116](https://www.sqlalchemy.org/trac/ticket/2116)'
  id: totrans-3729
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#2116](https://www.sqlalchemy.org/trac/ticket/2116)
- en: misc
  id: totrans-3730
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[types]**'
  id: totrans-3731
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[types]**'
- en: REAL has been added to the core types. Supported by PostgreSQL, SQL Server,
    MySQL, SQLite. Note that the SQL Server and MySQL versions, which add extra arguments,
    are also still available from those dialects.
  id: totrans-3732
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: REAL 已添加到核心类型中。由 PostgreSQL、SQL Server、MySQL、SQLite 支持。请注意，SQL Server 和 MySQL
    版本添加了额外的参数，仍然可以从这些方言中获取。
- en: 'References: [#2081](https://www.sqlalchemy.org/trac/ticket/2081)'
  id: totrans-3733
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#2081](https://www.sqlalchemy.org/trac/ticket/2081)
- en: '**[types]**'
  id: totrans-3734
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[types]**'
- en: Added @event.listens_for() decorator, given target + event name, applies the
    decorated function as a listener.
  id: totrans-3735
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 @event.listens_for() 装饰器，给定目标 + 事件名称，将装饰函数应用为监听器。
- en: 'References: [#2106](https://www.sqlalchemy.org/trac/ticket/2106)'
  id: totrans-3736
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#2106](https://www.sqlalchemy.org/trac/ticket/2106)
- en: '**[pool]**'
  id: totrans-3737
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[pool]**'
- en: AssertionPool now stores the traceback indicating where the currently checked
    out connection was acquired; this traceback is reported within the assertion raised
    upon a second concurrent checkout; courtesy Gunnlaugur Briem
  id: totrans-3738
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: AssertionPool现在存储了指示当前检出连接获取位置的回溯信息；在第二次并发检出时，此回溯信息将在引发的断言中报告；感谢Gunnlaugur Briem
- en: 'References: [#2103](https://www.sqlalchemy.org/trac/ticket/2103)'
  id: totrans-3739
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2103](https://www.sqlalchemy.org/trac/ticket/2103)
- en: '**[pool]**'
  id: totrans-3740
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[池]**'
- en: The “pool.manage” feature doesn’t use pickle anymore to hash the arguments for
    each pool.
  id: totrans-3741
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “pool.manage”功能不再使用pickle来为每个池的参数进行哈希。
- en: '**[documentation]**'
  id: totrans-3742
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[文档]**'
- en: Documented SQLite DATE/TIME/DATETIME types. (also in 0.6.7)
  id: totrans-3743
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 记录了SQLite的DATE/TIME/DATETIME类型。（也在0.6.7中）
- en: 'References: [#2029](https://www.sqlalchemy.org/trac/ticket/2029)'
  id: totrans-3744
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2029](https://www.sqlalchemy.org/trac/ticket/2029)
- en: '**[documentation]**'
  id: totrans-3745
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[文档]**'
- en: Fixed mutable extension docs to show the correct type-association methods.
  id: totrans-3746
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复可变扩展文档，显示正确的类型关联方法。
- en: 'References: [#2118](https://www.sqlalchemy.org/trac/ticket/2118)'
  id: totrans-3747
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2118](https://www.sqlalchemy.org/trac/ticket/2118)
- en: general
  id: totrans-3748
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通用
- en: '**[general]**'
  id: totrans-3749
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[通用]**'
- en: Changes to the format of CHANGES, this file. The format changes have been applied
    to the 0.7 releases.
  id: totrans-3750
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对CHANGES文件的格式进行更改。这些格式更改已应用于0.7版本发布。
- en: '**[general]**'
  id: totrans-3751
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[通用]**'
- en: The “-declarative” changes will now be listed directly under the “-orm” section,
    as these are closely related.
  id: totrans-3752
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “-declarative”更改现在将直接列在“-orm”部分下面，因为它们密切相关。
- en: '**[general]**'
  id: totrans-3753
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[通用]**'
- en: The 0.5 series changes have been moved to the file CHANGES_PRE_06 which replaces
    CHANGES_PRE_05.
  id: totrans-3754
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 0.5系列的更改已移至CHANGES_PRE_06文件，取代了CHANGES_PRE_05文件。
- en: '**[general]**'
  id: totrans-3755
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[通用]**'
- en: The changelog for 0.6.7 and subsequent within the 0.6 series is now listed only
    in the CHANGES file within the 0.6 branch. In the 0.7 CHANGES file (i.e. this
    file), all the 0.6 changes are listed inline within the 0.7 section in which they
    were also applied (since all 0.6 changes are in 0.7 as well). Changes that apply
    to an 0.6 version here are noted as are if any differences in implementation/behavior
    are present.
  id: totrans-3756
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 0.6.7及其后续版本的更改现在仅在0.6分支内的CHANGES文件中列出。在0.7 CHANGES文件（即本文件）中，所有0.6更改都内联列在它们也应用的0.7部分中（因为所有0.6更改也在0.7中）。这里适用于0.6版本的更改被记录，如果存在实现/行为上的任何差异也会被注明。
- en: orm
  id: totrans-3757
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-3758
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Some fixes to “evaluate” and “fetch” evaluation when query.update(), query.delete()
    are called. The retrieval of records is done after autoflush in all cases, and
    before update/delete is emitted, guarding against unflushed data present as well
    as expired objects failing during the evaluation.
  id: totrans-3759
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当调用query.update()，query.delete()时，对“evaluate”和“fetch”评估进行一些修复。在所有情况下，记录的检索都是在自动刷新之后进行的，并且在发出update/delete之前进行，以防止未刷新的数据以及在评估过程中失败的过期对象。
- en: 'References: [#2122](https://www.sqlalchemy.org/trac/ticket/2122)'
  id: totrans-3760
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2122](https://www.sqlalchemy.org/trac/ticket/2122)
- en: '**[orm]**'
  id: totrans-3761
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Reworded the exception raised when a flush is attempted of a subclass that is
    not polymorphic against the supertype.
  id: totrans-3762
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重新措辞了当尝试刷新不是对超类型进行多态处理的子类时引发的异常。
- en: 'References: [#2063](https://www.sqlalchemy.org/trac/ticket/2063)'
  id: totrans-3763
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2063](https://www.sqlalchemy.org/trac/ticket/2063)
- en: '**[orm]**'
  id: totrans-3764
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Still more wording adjustments when a query option can’t find the target entity.
    Explain that the path must be from one of the root entities.
  id: totrans-3765
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当查询选项无法找到目标实体时，进一步调整措辞。解释路径必须从根实体之一开始。
- en: '**[orm]**'
  id: totrans-3766
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Some fixes to the state handling regarding backrefs, typically when autoflush=False,
    where the back-referenced collection wouldn’t properly handle add/removes with
    no net change. Thanks to Richard Murri for the test case + patch. (also in 0.6.7).
  id: totrans-3767
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关于反向引用(backrefs)的状态处理进行了一些修复，通常在autoflush=False时，当反向引用集合未正确处理没有净变化的add/remove时。感谢Richard
    Murri提供的测试用例+补丁。（也在0.6.7中）。
- en: 'References: [#2123](https://www.sqlalchemy.org/trac/ticket/2123)'
  id: totrans-3768
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2123](https://www.sqlalchemy.org/trac/ticket/2123)
- en: '**[orm]**'
  id: totrans-3769
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added checks inside the UOW to detect the unusual condition of being asked to
    UPDATE or DELETE on a primary key value that contains NULL in it.
  id: totrans-3770
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在UOW内添加检查，以检测在主键值中包含NULL的情况下被要求进行UPDATE或DELETE的异常条件。
- en: 'References: [#2127](https://www.sqlalchemy.org/trac/ticket/2127)'
  id: totrans-3771
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2127](https://www.sqlalchemy.org/trac/ticket/2127)
- en: '**[orm]**'
  id: totrans-3772
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Some refinements to attribute history. More changes are pending possibly in
    0.8, but for now history has been modified such that scalar history doesn’t have
    a “side effect” of populating None for a non-present value. This allows a slightly
    better ability to distinguish between a None set and no actual change, affects
    as well.
  id: totrans-3773
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对属性历史进行了一些细化。更多的更改可能在0.8中进行，但目前历史已被修改，使得标量历史不再具有为不存在的值填充None的“副作用”。这样可以稍微更好地区分None集和没有实际更改的能力，也会受到影响。
- en: 'References: [#2127](https://www.sqlalchemy.org/trac/ticket/2127)'
  id: totrans-3774
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2127](https://www.sqlalchemy.org/trac/ticket/2127)
- en: '**[orm]**'
  id: totrans-3775
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: a “having” clause would be copied from the inside to the outside query if from_self()
    were used; in particular this would break an 0.7 style count() query. (also in
    0.6.7)
  id: totrans-3776
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果使用from_self()，则“having”子句将从内部复制到外部查询；特别是这将破坏0.7风格的count()查询。（也适用于0.6.7）
- en: 'References: [#2130](https://www.sqlalchemy.org/trac/ticket/2130)'
  id: totrans-3777
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2130](https://www.sqlalchemy.org/trac/ticket/2130)
- en: '**[orm]**'
  id: totrans-3778
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: the Query.execution_options() method now passes those options to the Connection
    rather than the SELECT statement, so that all available options including isolation
    level and compiled cache may be used.
  id: totrans-3779
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query.execution_options()方法现在将这些选项传递给Connection而不是SELECT语句，因此可以使用所有可用选项，包括隔离级别和编译缓存。
- en: 'References: [#2131](https://www.sqlalchemy.org/trac/ticket/2131)'
  id: totrans-3780
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2131](https://www.sqlalchemy.org/trac/ticket/2131)
- en: engine
  id: totrans-3781
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine]**'
  id: totrans-3782
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: The C extension is now enabled by default on CPython 2.x with a fallback to
    pure python if it fails to compile.
  id: totrans-3783
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: C扩展现在在CPython 2.x上默认启用，如果编译失败，则回退到纯Python。
- en: 'References: [#2129](https://www.sqlalchemy.org/trac/ticket/2129)'
  id: totrans-3784
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2129](https://www.sqlalchemy.org/trac/ticket/2129)
- en: sql
  id: totrans-3785
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SQL
- en: '**[sql]**'
  id: totrans-3786
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL]**'
- en: The “compiled_cache” execution option now raises an error when passed to a SELECT
    statement rather than a Connection. Previously it was being ignored entirely.
    We may look into having this option work on a per-statement level at some point.
  id: totrans-3787
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “compiled_cache”执行选项现在在传递给SELECT语句而不是Connection时会引发错误。以前它完全被忽略。我们可能会考虑在某个时候使此选项在每个语句级别上工作。
- en: 'References: [#2131](https://www.sqlalchemy.org/trac/ticket/2131)'
  id: totrans-3788
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2131](https://www.sqlalchemy.org/trac/ticket/2131)
- en: '**[sql]**'
  id: totrans-3789
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL]**'
- en: Restored the “catchall” constructor on the base TypeEngine class, with a deprecation
    warning. This so that code which does something like Integer(11) still succeeds.
  id: totrans-3790
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 恢复了基本TypeEngine类上的“catchall”构造函数，并附带弃用警告。这样，像Integer(11)这样的代码仍然可以成功。
- en: '**[sql]**'
  id: totrans-3791
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL]**'
- en: Fixed regression whereby MetaData() coming back from unpickling did not keep
    track of new things it keeps track of now, i.e. collection of Sequence objects,
    list of schema names.
  id: totrans-3792
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了从反序列化中返回的MetaData()未能跟踪现在跟踪的新内容的回归，即Sequence对象的集合，模式名称列表。
- en: 'References: [#2104](https://www.sqlalchemy.org/trac/ticket/2104)'
  id: totrans-3793
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2104](https://www.sqlalchemy.org/trac/ticket/2104)
- en: '**[sql]**'
  id: totrans-3794
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL]**'
- en: The limit/offset keywords to select() as well as the value passed to select.limit()/offset()
    will be coerced to integer. (also in 0.6.7)
  id: totrans-3795
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 传递给select()的limit/offset关键字以及传递给select.limit()/offset()的值将被强制转换为整数。（也适��于0.6.7）
- en: 'References: [#2116](https://www.sqlalchemy.org/trac/ticket/2116)'
  id: totrans-3796
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2116](https://www.sqlalchemy.org/trac/ticket/2116)
- en: '**[sql]**'
  id: totrans-3797
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL]**'
- en: fixed bug where “from” clause gathering from an over() clause would be an itertools.chain()
    and not a list, causing “can only concatenate list” TypeError when combined with
    other clauses.
  id: totrans-3798
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即从over()子句中收集的“from”子句将是一个itertools.chain()而不是一个列表，导致与其他子句组合时出现“can
    only concatenate list” TypeError。
- en: '**[sql]**'
  id: totrans-3799
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL]**'
- en: Fixed incorrect usage of “,” in over() clause being placed between the “partition”
    and “order by” clauses.
  id: totrans-3800
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在over()子句中不正确使用“,”被放置在“partition”和“order by”子句之间的问题。
- en: 'References: [#2134](https://www.sqlalchemy.org/trac/ticket/2134)'
  id: totrans-3801
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2134](https://www.sqlalchemy.org/trac/ticket/2134)
- en: '**[sql]**'
  id: totrans-3802
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL]**'
- en: Before/after attach events for PrimaryKeyConstraint now function, tests added
    for before/after events on all constraint types.
  id: totrans-3803
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在PrimaryKeyConstraint的前/后附加事件现在起作用，对所有约束类型的前/后事件进行了测试。
- en: 'References: [#2105](https://www.sqlalchemy.org/trac/ticket/2105)'
  id: totrans-3804
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2105](https://www.sqlalchemy.org/trac/ticket/2105)
- en: '**[sql]**'
  id: totrans-3805
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL]**'
- en: Added explicit true()/false() constructs to expression lib - coercion rules
    will intercept “False”/”True” into these constructs. In 0.6, the constructs were
    typically converted straight to string, which was no longer accepted in 0.7.
  id: totrans-3806
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在表达式库中添加了显式的true()/false()构造 - 强制规则将“False”/“True”拦截到这些构造中。在0.6中，这些构造通常直接转换为字符串，而在0.7中不再接受。
- en: 'References: [#2117](https://www.sqlalchemy.org/trac/ticket/2117)'
  id: totrans-3807
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2117](https://www.sqlalchemy.org/trac/ticket/2117)
- en: schema
  id: totrans-3808
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: '**[schema]**'
  id: totrans-3809
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: The ‘useexisting’ flag on Table has been superseded by a new pair of flags ‘keep_existing’
    and ‘extend_existing’. ‘extend_existing’ is equivalent to ‘useexisting’ - the
    existing Table is returned, and additional constructor elements are added. With
    ‘keep_existing’, the existing Table is returned, but additional constructor elements
    are not added - these elements are only applied when the Table is newly created.
  id: totrans-3810
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Table上的‘useexisting’标志已被新的一对标志‘keep_existing’和‘extend_existing’取代。‘extend_existing’等同于‘useexisting’
    - 返回现有的Table，并添加额外的构造元素。使用‘keep_existing’时，返回现有的Table，但不添加额外的构造元素 - 这些元素仅在新创建Table时应用。
- en: 'References: [#2109](https://www.sqlalchemy.org/trac/ticket/2109)'
  id: totrans-3811
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2109](https://www.sqlalchemy.org/trac/ticket/2109)
- en: postgresql
  id: totrans-3812
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql]**'
  id: totrans-3813
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Psycopg2 for Python 3 is now supported.
  id: totrans-3814
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在支持Python 3的Psycopg2。
- en: '**[postgresql]**'
  id: totrans-3815
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Fixed support for precision numerics when using pg8000.
  id: totrans-3816
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用pg8000时支持精度数字的问题。
- en: 'References: [#2132](https://www.sqlalchemy.org/trac/ticket/2132)'
  id: totrans-3817
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2132](https://www.sqlalchemy.org/trac/ticket/2132)
- en: sqlite
  id: totrans-3818
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite]**'
  id: totrans-3819
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: Fixed bug where reflection of foreign key created as “REFERENCES <tablename>”
    without col name would fail. (also in 0.6.7)
  id: totrans-3820
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即反射创建的外键为“REFERENCES <tablename>”而没有列名时会失败。（也适用于0.6.7版本）
- en: 'References: [#2115](https://www.sqlalchemy.org/trac/ticket/2115)'
  id: totrans-3821
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2115](https://www.sqlalchemy.org/trac/ticket/2115)
- en: oracle
  id: totrans-3822
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-3823
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Using column names that would require quotes for the column itself or for a
    name-generated bind parameter, such as names with special characters, underscores,
    non-ascii characters, now properly translate bind parameter keys when talking
    to cx_oracle. (Also in 0.6.7)
  id: totrans-3824
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用需要为列本身或名称生成的绑定参数引号的列名，例如具有特殊字符、下划线、非ASCII字符的名称，现在在与cx_oracle通信���正确地转换绑定参数键。（也适用于0.6.7版本）
- en: 'References: [#2100](https://www.sqlalchemy.org/trac/ticket/2100)'
  id: totrans-3825
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2100](https://www.sqlalchemy.org/trac/ticket/2100)
- en: '**[oracle]**'
  id: totrans-3826
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Oracle dialect adds use_binds_for_limits=False create_engine() flag, will render
    the LIMIT/OFFSET values inline instead of as binds, reported to modify the execution
    plan used by Oracle. (Also in 0.6.7)
  id: totrans-3827
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Oracle方言添加了use_binds_for_limits=False create_engine()标志，将在行内呈现LIMIT/OFFSET值，而不是作为绑定，据报道会修改Oracle使用的执行计划。（也适用于0.6.7版本）
- en: 'References: [#2116](https://www.sqlalchemy.org/trac/ticket/2116)'
  id: totrans-3828
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2116](https://www.sqlalchemy.org/trac/ticket/2116)
- en: misc
  id: totrans-3829
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[types]**'
  id: totrans-3830
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型]**'
- en: REAL has been added to the core types. Supported by PostgreSQL, SQL Server,
    MySQL, SQLite. Note that the SQL Server and MySQL versions, which add extra arguments,
    are also still available from those dialects.
  id: totrans-3831
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: REAL已添加到核心类型中。由PostgreSQL、SQL Server、MySQL、SQLite支持。请注意，SQL Server和MySQL版本，添加了额外的参数，仍然可以从这些方言中使用。
- en: 'References: [#2081](https://www.sqlalchemy.org/trac/ticket/2081)'
  id: totrans-3832
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2081](https://www.sqlalchemy.org/trac/ticket/2081)
- en: '**[types]**'
  id: totrans-3833
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型]**'
- en: Added @event.listens_for() decorator, given target + event name, applies the
    decorated function as a listener.
  id: totrans-3834
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了@event.listens_for()装饰器，给定目标+事件名称，将装饰的函数应用为监听器。
- en: 'References: [#2106](https://www.sqlalchemy.org/trac/ticket/2106)'
  id: totrans-3835
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2106](https://www.sqlalchemy.org/trac/ticket/2106)
- en: '**[pool]**'
  id: totrans-3836
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[池]**'
- en: AssertionPool now stores the traceback indicating where the currently checked
    out connection was acquired; this traceback is reported within the assertion raised
    upon a second concurrent checkout; courtesy Gunnlaugur Briem
  id: totrans-3837
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: AssertionPool现在存储了当前检出连接获取的轨迹，这个轨迹在第二次并发检出时引发的断言中报告；感谢Gunnlaugur Briem
- en: 'References: [#2103](https://www.sqlalchemy.org/trac/ticket/2103)'
  id: totrans-3838
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2103](https://www.sqlalchemy.org/trac/ticket/2103)
- en: '**[pool]**'
  id: totrans-3839
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[池]**'
- en: The “pool.manage” feature doesn’t use pickle anymore to hash the arguments for
    each pool.
  id: totrans-3840
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “pool.manage”功能不再使用pickle来为每个池的参数进行哈希处理。
- en: '**[documentation]**'
  id: totrans-3841
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[文档]**'
- en: Documented SQLite DATE/TIME/DATETIME types. (also in 0.6.7)
  id: totrans-3842
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 记录了SQLite DATE/TIME/DATETIME类型。（也适用于0.6.7版本）
- en: 'References: [#2029](https://www.sqlalchemy.org/trac/ticket/2029)'
  id: totrans-3843
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2029](https://www.sqlalchemy.org/trac/ticket/2029)
- en: '**[documentation]**'
  id: totrans-3844
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[文档]**'
- en: Fixed mutable extension docs to show the correct type-association methods.
  id: totrans-3845
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了可变扩展文档以显示正确的类型关联方法。
- en: 'References: [#2118](https://www.sqlalchemy.org/trac/ticket/2118)'
  id: totrans-3846
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2118](https://www.sqlalchemy.org/trac/ticket/2118)
- en: 0.7.0b3
  id: totrans-3847
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.7.0b3
- en: 'Released: Sun Mar 20 2011'
  id: totrans-3848
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2011年3月20日
- en: general
  id: totrans-3849
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通用
- en: '**[general]**'
  id: totrans-3850
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[通用]**'
- en: Lots of fixes to unit tests when run under PyPy (courtesy Alex Gaynor).
  id: totrans-3851
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在PyPy下运行时，对单元测试进行了大量修复（感谢Alex Gaynor）。
- en: orm
  id: totrans-3852
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-3853
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Changed the underlying approach to query.count(). query.count() is now in all
    cases exactly:'
  id: totrans-3854
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改变了查询.count()的基本方法。现在query.count()在所有情况下都是确切的：
- en: query.
  id: totrans-3855
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 查询。
- en: ''
  id: totrans-3856
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: from_self(func.count(literal_column(‘1’))). scalar()
  id: totrans-3857
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: from_self(func.count(literal_column(‘1’))). scalar()
- en: That is, “select count(1) from (<full query>)”. This produces a subquery in
    all cases, but vastly simplifies all the guessing count() tried to do previously,
    which would still fail in many scenarios particularly when joined table inheritance
    and other joins were involved. If the subquery produced for an otherwise very
    simple count is really an issue, use query(func.count()) as an optimization.
  id: totrans-3858
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 也就是说，“select count(1) from (<full query>)”。这在所有情况下都会产生一个子查询，但大大简化了以前 count()
    尝试做的所有猜测，尤其是当涉及到联合表继承和其他连接时，仍然会在许多情况下失败。如果对于本来非常简单的计数而产生的子查询确实是个问题，请使用 query(func.count())
    作为优化。
- en: 'References: [#2093](https://www.sqlalchemy.org/trac/ticket/2093)'
  id: totrans-3859
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2093](https://www.sqlalchemy.org/trac/ticket/2093)
- en: '**[orm]**'
  id: totrans-3860
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: some changes to the identity map regarding rare weakref callbacks during iterations.
    The mutex has been removed as it apparently can cause a reentrant (i.e. in one
    thread) deadlock, perhaps when gc collects objects at the point of iteration in
    order to gain more memory. It is hoped that “dictionary changed during iteration”
    will be exceedingly rare as iteration methods internally acquire the full list
    of objects in a single values() call. Note 0.6.7 has a more conservative fix here
    which still keeps the mutex in place.
  id: totrans-3861
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于迭代过程中罕见的弱引用回调，对身份映射进行了一些更改。已经删除了互斥锁，因为它显然可能导致重新进入（即在一个线程中）死锁，可能是因为 gc 在迭代点收集对象以获得更多内存。希望“迭代过程中字典发生了变化”将会非常罕见，因为迭代方法在内部通过单个
    values() 调用获取完整的对象列表。请注意，0.6.7中的修复更加保守，仍然保持了互斥锁的位置。
- en: 'References: [#2087](https://www.sqlalchemy.org/trac/ticket/2087)'
  id: totrans-3862
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2087](https://www.sqlalchemy.org/trac/ticket/2087)
- en: '**[orm]**'
  id: totrans-3863
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: A tweak to the unit of work causes it to order the flush along relationship()
    dependencies even if the given objects don’t have any inter-attribute references
    in memory, which was the behavior in 0.5 and earlier, so a flush of Parent/Child
    with only foreign key/primary key set will succeed. This while still maintaining
    0.6 and above’s not generating a ton of useless internal dependency structures
    within the flush that don’t correspond to state actually within the current flush.
  id: totrans-3864
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对工作单元的微调导致按照关系依赖关系对刷新进行排序，即使给定的对象在内存中没有任何属性间的引用，这是0.5及更早版本的行为，因此仅设置外键/主键的 Parent/Child
    的刷新将成功。这样一来，仍然保持了0.6及以上版本不生成大量与当前刷新实际状态不符的无用内部依赖结构。
- en: 'References: [#2082](https://www.sqlalchemy.org/trac/ticket/2082)'
  id: totrans-3865
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2082](https://www.sqlalchemy.org/trac/ticket/2082)
- en: '**[orm]**'
  id: totrans-3866
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Improvements to the error messages emitted when querying against column-only
    entities in conjunction with (typically incorrectly) using loader options, where
    the parent entity is not fully present.
  id: totrans-3867
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在查询只针对列实体时与（通常不正确地）使用加载器选项一起使用时，错误消息的改进，其中父实体未完全存在。
- en: 'References: [#2069](https://www.sqlalchemy.org/trac/ticket/2069)'
  id: totrans-3868
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2069](https://www.sqlalchemy.org/trac/ticket/2069)
- en: '**[orm]**'
  id: totrans-3869
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug in query.options() whereby a path applied to a lazyload using string
    keys could overlap a same named attribute on the wrong entity. Note 0.6.7 has
    a more conservative fix to this.
  id: totrans-3870
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 query.options() 中的错误，该错误使得对使用字符串键的 lazyload 应用路径的属性可能与错误的实体上的同名属性重叠。请注意，0.6.7对此进行了更加保守的修复。
- en: 'References: [#2098](https://www.sqlalchemy.org/trac/ticket/2098)'
  id: totrans-3871
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2098](https://www.sqlalchemy.org/trac/ticket/2098)
- en: examples
  id: totrans-3872
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples]**'
  id: totrans-3873
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[示例]**'
- en: Updated the association, association proxy examples to use declarative, added
    a new example dict_of_sets_with_default.py, a “pushing the envelope” example of
    association proxy.
  id: totrans-3874
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新了关联、关联代理示例以使用声明式，添加了一个新的示例 dict_of_sets_with_default.py，这是一个关联代理的“挑战极限”的示例。
- en: '**[examples]**'
  id: totrans-3875
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[示例]**'
- en: The Beaker caching example allows a “query_cls” argument to the query_callable()
    function. (also in 0.6.7)
  id: totrans-3876
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Beaker 缓存示例允许在 query_callable() 函数中传递一个“query_cls”参数。（也在0.6.7中）
- en: 'References: [#2090](https://www.sqlalchemy.org/trac/ticket/2090)'
  id: totrans-3877
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2090](https://www.sqlalchemy.org/trac/ticket/2090)
- en: engine
  id: totrans-3878
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine]**'
  id: totrans-3879
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: Fixed AssertionPool regression bug.
  id: totrans-3880
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 AssertionPool 的回归 bug。
- en: 'References: [#2097](https://www.sqlalchemy.org/trac/ticket/2097)'
  id: totrans-3881
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2097](https://www.sqlalchemy.org/trac/ticket/2097)
- en: '**[engine]**'
  id: totrans-3882
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: Changed exception raised to ArgumentError when an invalid dialect is specified.
  id: totrans-3883
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当指定无效的方言时，将引发 ArgumentError 异常。
- en: 'References: [#2060](https://www.sqlalchemy.org/trac/ticket/2060)'
  id: totrans-3884
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2060](https://www.sqlalchemy.org/trac/ticket/2060)
- en: sql
  id: totrans-3885
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-3886
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added a fully descriptive error message for the case where Column is subclassed
    and _make_proxy() fails to make a copy due to TypeError on the constructor. The
    method _constructor should be implemented in this case.
  id: totrans-3887
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为Column被子类化且_make_proxy()由于构造函数的TypeError而无法复制时添加了完全描述性的错误消息。在这种情况下应该实现_method
    _constructor。
- en: '**[sql]**'
  id: totrans-3888
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added new event “column_reflect” for Table objects. Receives the info dictionary
    about a Column before the object is generated within reflection, and allows modification
    to the dictionary for control over most aspects of the resulting Column including
    key, name, type, info dictionary.
  id: totrans-3889
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为Table对象添加了新的事件“column_reflect”。在反射生成对象之前接收关于Column的信息字典，并允许修改字典以控制生成的Column的大多数方面，包括键、名称、类型、信息字典。
- en: 'References: [#2095](https://www.sqlalchemy.org/trac/ticket/2095)'
  id: totrans-3890
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考���[#2095](https://www.sqlalchemy.org/trac/ticket/2095)
- en: '**[sql]**'
  id: totrans-3891
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: To help with the “column_reflect” event being used with specific Table objects
    instead of all instances of Table, listeners can be added to a Table object inline
    with its construction using a new argument “listeners”, a list of tuples of the
    form (<eventname>, <fn>), which are applied to the Table before the reflection
    process begins.
  id: totrans-3892
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了帮助使用特定Table对象而不是所有Table实例的“column_reflect”事件，可以在Table对象的构造中使用一个新参数“listeners”添加监听器，一个形式为(<eventname>,
    <fn>)的元组列表，这些监听器在反射过程开始之前应用于Table。
- en: '**[sql]**'
  id: totrans-3893
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added new generic function “next_value()”, accepts a Sequence object as its
    argument and renders the appropriate “next value” generation string on the target
    platform, if supported. Also provides “.next_value()” method on Sequence itself.
  id: totrans-3894
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的通用函数“next_value()”，接受一个Sequence对象作为其参数，并在目标平台上呈现适当的“next value”生成字符串，如果支持的话。还在Sequence本身上提供“.next_value()”方法。
- en: 'References: [#2085](https://www.sqlalchemy.org/trac/ticket/2085)'
  id: totrans-3895
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2085](https://www.sqlalchemy.org/trac/ticket/2085)
- en: '**[sql]**'
  id: totrans-3896
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: func.next_value() or other SQL expression can be embedded directly into an insert()
    construct, and if implicit or explicit “returning” is used in conjunction with
    a primary key column, the newly generated value will be present in result.inserted_primary_key.
  id: totrans-3897
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: func.next_value()或其他SQL表达式可以直接嵌入到insert()构造中，如果与主键列一起使用隐式或显式的“returning”，则新生成的值将出现在result.inserted_primary_key中。
- en: 'References: [#2084](https://www.sqlalchemy.org/trac/ticket/2084)'
  id: totrans-3898
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2084](https://www.sqlalchemy.org/trac/ticket/2084)
- en: '**[sql]**'
  id: totrans-3899
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added accessors to ResultProxy “returns_rows”, “is_insert” (also in 0.6.7)
  id: totrans-3900
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为ResultProxy添加了访问器“returns_rows”、“is_insert”（也在0.6.7中）
- en: 'References: [#2089](https://www.sqlalchemy.org/trac/ticket/2089)'
  id: totrans-3901
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2089](https://www.sqlalchemy.org/trac/ticket/2089)
- en: postgresql
  id: totrans-3902
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql]**'
  id: totrans-3903
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Added RESERVED_WORDS for postgresql dialect. (also in 0.6.7)
  id: totrans-3904
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为postgresql方言添加了RESERVED_WORDS。（也在0.6.7中）
- en: 'References: [#2092](https://www.sqlalchemy.org/trac/ticket/2092)'
  id: totrans-3905
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2092](https://www.sqlalchemy.org/trac/ticket/2092)
- en: '**[postgresql]**'
  id: totrans-3906
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Fixed the BIT type to allow a “length” parameter, “varying” parameter. Reflection
    also fixed. (also in 0.6.7)
  id: totrans-3907
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了BIT类型以允许“length”参数、“varying”参数。反射也已修复。（也在0.6.7中）
- en: 'References: [#2073](https://www.sqlalchemy.org/trac/ticket/2073)'
  id: totrans-3908
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2073](https://www.sqlalchemy.org/trac/ticket/2073)
- en: mssql
  id: totrans-3909
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-3910
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Rewrote the query used to get the definition of a view, typically when using
    the Inspector interface, to use sys.sql_modules instead of the information schema,
    thereby allowing views definitions longer than 4000 characters to be fully returned.
    (also in 0.6.7)
  id: totrans-3911
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重写了用于获取视图定义的查询，通常在使用Inspector接口时，使用sys.sql_modules而不是信息模式，从而允许完全返回长于4000个字符的视图定义。（也在0.6.7中）
- en: 'References: [#2071](https://www.sqlalchemy.org/trac/ticket/2071)'
  id: totrans-3912
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2071](https://www.sqlalchemy.org/trac/ticket/2071)
- en: misc
  id: totrans-3913
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[declarative]**'
  id: totrans-3914
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative]**'
- en: Arguments in __mapper_args__ that aren’t “hashable” aren’t mistaken for always-hashable,
    possibly-column arguments. (also in 0.6.7)
  id: totrans-3915
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在__mapper_args__中不是“可哈希”的参数不会被误认为总是可哈希的，可能是列参数。（也在0.6.7中）
- en: 'References: [#2091](https://www.sqlalchemy.org/trac/ticket/2091)'
  id: totrans-3916
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2091](https://www.sqlalchemy.org/trac/ticket/2091)
- en: '**[firebird]**'
  id: totrans-3917
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: The “implicit_returning” flag on create_engine() is honored if set to False.
    (also in 0.6.7)
  id: totrans-3918
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果将“implicit_returning”标志设置为False，则create_engine()上的“implicit_returning”标志将被尊重。（也在0.6.7中）
- en: 'References: [#2083](https://www.sqlalchemy.org/trac/ticket/2083)'
  id: totrans-3919
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2083](https://www.sqlalchemy.org/trac/ticket/2083)
- en: '**[informix]**'
  id: totrans-3920
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[informix]**'
- en: Added RESERVED_WORDS informix dialect. (also in 0.6.7)
  id: totrans-3921
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了RESERVED_WORDS informix方言。（也在0.6.7中）
- en: 'References: [#2092](https://www.sqlalchemy.org/trac/ticket/2092)'
  id: totrans-3922
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2092](https://www.sqlalchemy.org/trac/ticket/2092)
- en: '**[ext]**'
  id: totrans-3923
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: The horizontal_shard ShardedSession class accepts the common Session argument
    “query_cls” as a constructor argument, to enable further subclassing of ShardedQuery.
    (also in 0.6.7)
  id: totrans-3924
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: horizontal_shard ShardedSession类接受常见的Session参数“query_cls”作为构造函数参数，以启用对ShardedQuery的进一步子类化。（也适用于0.6.7）
- en: 'References: [#2090](https://www.sqlalchemy.org/trac/ticket/2090)'
  id: totrans-3925
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2090](https://www.sqlalchemy.org/trac/ticket/2090)
- en: general
  id: totrans-3926
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一般
- en: '**[general]**'
  id: totrans-3927
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[一般]**'
- en: Lots of fixes to unit tests when run under PyPy (courtesy Alex Gaynor).
  id: totrans-3928
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在PyPy下运行时修复了许多单元测试（由Alex Gaynor提供）。
- en: orm
  id: totrans-3929
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM
- en: '**[orm]**'
  id: totrans-3930
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: 'Changed the underlying approach to query.count(). query.count() is now in all
    cases exactly:'
  id: totrans-3931
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更改了query.count()的基本方法。现在，在所有情况下，query.count()都是确切的：
- en: query.
  id: totrans-3932
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 查询。
- en: ''
  id: totrans-3933
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: from_self(func.count(literal_column(‘1’))). scalar()
  id: totrans-3934
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: from_self(func.count(literal_column(‘1’))). scalar()
- en: That is, “select count(1) from (<full query>)”. This produces a subquery in
    all cases, but vastly simplifies all the guessing count() tried to do previously,
    which would still fail in many scenarios particularly when joined table inheritance
    and other joins were involved. If the subquery produced for an otherwise very
    simple count is really an issue, use query(func.count()) as an optimization.
  id: totrans-3935
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 也就是说，“select count(1) from (<full query>)”。这在所有情况下都会产生一个子查询，但大大简化了以���count()尝试做的所有猜测，以前在许多情况下仍然会失败，特别是当涉及联接表继承和其他联接时。如果为否则非常简单的计数生成的子查询真的是一个问题，请使用query(func.count())作为优化。
- en: 'References: [#2093](https://www.sqlalchemy.org/trac/ticket/2093)'
  id: totrans-3936
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2093](https://www.sqlalchemy.org/trac/ticket/2093)
- en: '**[orm]**'
  id: totrans-3937
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: some changes to the identity map regarding rare weakref callbacks during iterations.
    The mutex has been removed as it apparently can cause a reentrant (i.e. in one
    thread) deadlock, perhaps when gc collects objects at the point of iteration in
    order to gain more memory. It is hoped that “dictionary changed during iteration”
    will be exceedingly rare as iteration methods internally acquire the full list
    of objects in a single values() call. Note 0.6.7 has a more conservative fix here
    which still keeps the mutex in place.
  id: totrans-3938
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关于迭代期间罕见的弱引用回调进行了一些对身份映射的更改。互斥锁已被移除，因为它显然会导致一个（即在一个线程中）可重入的死锁，也许是在迭代时gc在获取更多内存时收集对象的时候。希望“在迭代期间更改字典”会非常罕见，因为迭代方法在内部通过单个values()调用获取完整的对象列表。请注意，0.6.7在这里有一个更为保守的修复，仍然保留了互斥锁。
- en: 'References: [#2087](https://www.sqlalchemy.org/trac/ticket/2087)'
  id: totrans-3939
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2087](https://www.sqlalchemy.org/trac/ticket/2087)
- en: '**[orm]**'
  id: totrans-3940
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: A tweak to the unit of work causes it to order the flush along relationship()
    dependencies even if the given objects don’t have any inter-attribute references
    in memory, which was the behavior in 0.5 and earlier, so a flush of Parent/Child
    with only foreign key/primary key set will succeed. This while still maintaining
    0.6 and above’s not generating a ton of useless internal dependency structures
    within the flush that don’t correspond to state actually within the current flush.
  id: totrans-3941
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对工作单元进行微调，使其沿着relationship()依赖关系排序刷新，即使给定的对象在内存中没有任何属性间引用，这是0.5及更早版本的行为，因此只设置外键/主键的Parent/Child的刷新将成功。同时，仍然保持0.6及以上版本不会在刷新中生成大量无用的内部依赖结构，这些结构与当前刷新中实际状态不符。
- en: 'References: [#2082](https://www.sqlalchemy.org/trac/ticket/2082)'
  id: totrans-3942
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2082](https://www.sqlalchemy.org/trac/ticket/2082)
- en: '**[orm]**'
  id: totrans-3943
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Improvements to the error messages emitted when querying against column-only
    entities in conjunction with (typically incorrectly) using loader options, where
    the parent entity is not fully present.
  id: totrans-3944
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在与（通常是错误地）使用加载器选项一起查询仅列实体时，改进了发出的错误消息，其中父实体不完全存在。
- en: 'References: [#2069](https://www.sqlalchemy.org/trac/ticket/2069)'
  id: totrans-3945
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2069](https://www.sqlalchemy.org/trac/ticket/2069)
- en: '**[orm]**'
  id: totrans-3946
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Fixed bug in query.options() whereby a path applied to a lazyload using string
    keys could overlap a same named attribute on the wrong entity. Note 0.6.7 has
    a more conservative fix to this.
  id: totrans-3947
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了query.options()中的一个bug，其中应用于使用字符串键的延迟加载的路径可能会与错误实体上的同名属性重叠。请注意，0.6.7对此有一个更为保守的修复。
- en: 'References: [#2098](https://www.sqlalchemy.org/trac/ticket/2098)'
  id: totrans-3948
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2098](https://www.sqlalchemy.org/trac/ticket/2098)
- en: examples
  id: totrans-3949
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples]**'
  id: totrans-3950
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[示例]**'
- en: Updated the association, association proxy examples to use declarative, added
    a new example dict_of_sets_with_default.py, a “pushing the envelope” example of
    association proxy.
  id: totrans-3951
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新了关联、关联代理示例以使用声明性，并添加了一个新示例dict_of_sets_with_default.py，这是一个关联代理的“突破极限”示例。
- en: '**[examples]**'
  id: totrans-3952
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[示例]**'
- en: The Beaker caching example allows a “query_cls” argument to the query_callable()
    function. (also in 0.6.7)
  id: totrans-3953
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Beaker缓存示例允许在query_callable()函数中使用“query_cls”参数。（也适用于0.6.7）
- en: 'References: [#2090](https://www.sqlalchemy.org/trac/ticket/2090)'
  id: totrans-3954
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2090](https://www.sqlalchemy.org/trac/ticket/2090)
- en: engine
  id: totrans-3955
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine]**'
  id: totrans-3956
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: Fixed AssertionPool regression bug.
  id: totrans-3957
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了AssertionPool回归错误。
- en: 'References: [#2097](https://www.sqlalchemy.org/trac/ticket/2097)'
  id: totrans-3958
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2097](https://www.sqlalchemy.org/trac/ticket/2097)
- en: '**[engine]**'
  id: totrans-3959
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: Changed exception raised to ArgumentError when an invalid dialect is specified.
  id: totrans-3960
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当指定无效的方言时，将引发ArgumentError异常。
- en: 'References: [#2060](https://www.sqlalchemy.org/trac/ticket/2060)'
  id: totrans-3961
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2060](https://www.sqlalchemy.org/trac/ticket/2060)
- en: sql
  id: totrans-3962
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-3963
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added a fully descriptive error message for the case where Column is subclassed
    and _make_proxy() fails to make a copy due to TypeError on the constructor. The
    method _constructor should be implemented in this case.
  id: totrans-3964
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为Column子类化并由于构造函数的TypeError而使_make_proxy()无法复制时，添加了一个完全描述性的错误消息。在这种情况下应该实现_method
    _constructor。
- en: '**[sql]**'
  id: totrans-3965
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added new event “column_reflect” for Table objects. Receives the info dictionary
    about a Column before the object is generated within reflection, and allows modification
    to the dictionary for control over most aspects of the resulting Column including
    key, name, type, info dictionary.
  id: totrans-3966
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了Table对象的新事件“column_reflect”。在生成对象之前，接收有关Column的信息字典，并允许修改字典以控制生成的Column的大多数方面，包括键、名称、类型、信息字典。
- en: 'References: [#2095](https://www.sqlalchemy.org/trac/ticket/2095)'
  id: totrans-3967
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2095](https://www.sqlalchemy.org/trac/ticket/2095)
- en: '**[sql]**'
  id: totrans-3968
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: To help with the “column_reflect” event being used with specific Table objects
    instead of all instances of Table, listeners can be added to a Table object inline
    with its construction using a new argument “listeners”, a list of tuples of the
    form (<eventname>, <fn>), which are applied to the Table before the reflection
    process begins.
  id: totrans-3969
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了帮助“column_reflect”事件与特定Table对象一起使用，而不是所有Table实例，可以在Table对象的构造中内联添加监听器，使用一个新的参数“listeners”，一个形式为（<eventname>，<fn>）的元组列表，这些应用于Table在反射过程开始之前。
- en: '**[sql]**'
  id: totrans-3970
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added new generic function “next_value()”, accepts a Sequence object as its
    argument and renders the appropriate “next value” generation string on the target
    platform, if supported. Also provides “.next_value()” method on Sequence itself.
  id: totrans-3971
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的通用函数“next_value()”，接受一个Sequence对象作为其参数，并在目标平台上呈现适当的“下一个值”生成字符串，如果支持的话。还在Sequence本身上提供了“.next_value()”方法。
- en: 'References: [#2085](https://www.sqlalchemy.org/trac/ticket/2085)'
  id: totrans-3972
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2085](https://www.sqlalchemy.org/trac/ticket/2085)
- en: '**[sql]**'
  id: totrans-3973
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: func.next_value() or other SQL expression can be embedded directly into an insert()
    construct, and if implicit or explicit “returning” is used in conjunction with
    a primary key column, the newly generated value will be present in result.inserted_primary_key.
  id: totrans-3974
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: func.next_value()或其他SQL表达式可以直接嵌入到insert()构造中，如果与主键列一起使用隐式或显式的“returning”，则新生成的值将出现在result.inserted_primary_key中。
- en: 'References: [#2084](https://www.sqlalchemy.org/trac/ticket/2084)'
  id: totrans-3975
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2084](https://www.sqlalchemy.org/trac/ticket/2084)
- en: '**[sql]**'
  id: totrans-3976
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added accessors to ResultProxy “returns_rows”, “is_insert” (also in 0.6.7)
  id: totrans-3977
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为ResultProxy添加了访问器“returns_rows”、“is_insert”（也适用于0.6.7版本）
- en: 'References: [#2089](https://www.sqlalchemy.org/trac/ticket/2089)'
  id: totrans-3978
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2089](https://www.sqlalchemy.org/trac/ticket/2089)
- en: postgresql
  id: totrans-3979
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql]**'
  id: totrans-3980
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Added RESERVED_WORDS for postgresql dialect. (also in 0.6.7)
  id: totrans-3981
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为postgresql方言添加了RESERVED_WORDS。（也适用于0.6.7版本）
- en: 'References: [#2092](https://www.sqlalchemy.org/trac/ticket/2092)'
  id: totrans-3982
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2092](https://www.sqlalchemy.org/trac/ticket/2092)
- en: '**[postgresql]**'
  id: totrans-3983
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Fixed the BIT type to allow a “length” parameter, “varying” parameter. Reflection
    also fixed. (also in 0.6.7)
  id: totrans-3984
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了BIT类型以允许“length”参数，“varying”参数。反射也已修复。（也适用于0.6.7版本）
- en: 'References: [#2073](https://www.sqlalchemy.org/trac/ticket/2073)'
  id: totrans-3985
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2073](https://www.sqlalchemy.org/trac/ticket/2073)
- en: mssql
  id: totrans-3986
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-3987
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Rewrote the query used to get the definition of a view, typically when using
    the Inspector interface, to use sys.sql_modules instead of the information schema,
    thereby allowing views definitions longer than 4000 characters to be fully returned.
    (also in 0.6.7)
  id: totrans-3988
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重写了用于获取视图定义的查询，通常在使用Inspector接口时，使用sys.sql_modules而不是信息模式，从而允许完全返回超过4000个字符的视图定义。（也适用于0.6.7版本）
- en: 'References: [#2071](https://www.sqlalchemy.org/trac/ticket/2071)'
  id: totrans-3989
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2071](https://www.sqlalchemy.org/trac/ticket/2071)
- en: misc
  id: totrans-3990
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[declarative]**'
  id: totrans-3991
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative]**'
- en: Arguments in __mapper_args__ that aren’t “hashable” aren’t mistaken for always-hashable,
    possibly-column arguments. (also in 0.6.7)
  id: totrans-3992
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在__mapper_args__中不可“哈希化”的参数不会被误认为始终可哈希化，可能是列参数。（也适用于0.6.7版本）
- en: 'References: [#2091](https://www.sqlalchemy.org/trac/ticket/2091)'
  id: totrans-3993
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2091](https://www.sqlalchemy.org/trac/ticket/2091)
- en: '**[firebird]**'
  id: totrans-3994
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: The “implicit_returning” flag on create_engine() is honored if set to False.
    (also in 0.6.7)
  id: totrans-3995
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果将“implicit_returning”标志设置为False，则create_engine()上的标志将被遵守。（也适���于0.6.7版本）
- en: 'References: [#2083](https://www.sqlalchemy.org/trac/ticket/2083)'
  id: totrans-3996
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2083](https://www.sqlalchemy.org/trac/ticket/2083)
- en: '**[informix]**'
  id: totrans-3997
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[informix]**'
- en: Added RESERVED_WORDS informix dialect. (also in 0.6.7)
  id: totrans-3998
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了RESERVED_WORDS informix方言。（也适用于0.6.7版本）
- en: 'References: [#2092](https://www.sqlalchemy.org/trac/ticket/2092)'
  id: totrans-3999
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2092](https://www.sqlalchemy.org/trac/ticket/2092)
- en: '**[ext]**'
  id: totrans-4000
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: The horizontal_shard ShardedSession class accepts the common Session argument
    “query_cls” as a constructor argument, to enable further subclassing of ShardedQuery.
    (also in 0.6.7)
  id: totrans-4001
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: horizontal_shard ShardedSession类接受常见的Session参数“query_cls”作为构造函数参数，以便进一步对ShardedQuery进行子类化。（也适用于0.6.7版本）
- en: 'References: [#2090](https://www.sqlalchemy.org/trac/ticket/2090)'
  id: totrans-4002
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2090](https://www.sqlalchemy.org/trac/ticket/2090)
- en: 0.7.0b2
  id: totrans-4003
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.7.0b2
- en: 'Released: Sat Feb 19 2011'
  id: totrans-4004
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2011年2月19日
- en: orm
  id: totrans-4005
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-4006
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby Session.merge() would call the load() event with one too few
    arguments.
  id: totrans-4007
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Session.merge()调用load()事件时参数少一个的错误。
- en: 'References: [#2053](https://www.sqlalchemy.org/trac/ticket/2053)'
  id: totrans-4008
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2053](https://www.sqlalchemy.org/trac/ticket/2053)
- en: '**[orm]**'
  id: totrans-4009
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added logic which prevents the generation of events from a MapperExtension or
    SessionExtension from generating do-nothing events for all the methods not overridden.
  id: totrans-4010
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了逻辑，防止从MapperExtension或SessionExtension生成的事件为所有未重写的方法生成无效事件。
- en: 'References: [#2052](https://www.sqlalchemy.org/trac/ticket/2052)'
  id: totrans-4011
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2052](https://www.sqlalchemy.org/trac/ticket/2052)
- en: examples
  id: totrans-4012
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: examples
- en: '**[examples]**'
  id: totrans-4013
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples]**'
- en: Beaker example now takes into account ‘limit’ and ‘offset’, bind params within
    embedded FROM clauses (like when you use union() or from_self()) when generating
    a cache key.
  id: totrans-4014
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Beaker示例现在考虑了在生成缓存键时嵌入FROM子句内的‘limit’和‘offset’、绑定参数（比如当您使用union()或from_self()时）。
- en: sql
  id: totrans-4015
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-4016
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Renamed the EngineEvents event class to ConnectionEvents. As these classes are
    never accessed directly by end-user code, this strictly is a documentation change
    for end users. Also simplified how events get linked to engines and connections
    internally.
  id: totrans-4017
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将EngineEvents事件类重命名为ConnectionEvents。由于这些类从不直接被最终用户代码访问，因此这严格来说是一个面向最终用户的文档更改。还简化了内部如何将事件与引擎和连接关联起来的方式。
- en: 'References: [#2059](https://www.sqlalchemy.org/trac/ticket/2059)'
  id: totrans-4018
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2059](https://www.sqlalchemy.org/trac/ticket/2059)
- en: '**[sql]**'
  id: totrans-4019
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The Sequence() construct, when passed a MetaData() object via its ‘metadata’
    argument, will be included in CREATE/DROP statements within metadata.create_all()
    and metadata.drop_all(), including “checkfirst” logic.
  id: totrans-4020
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当通过其“metadata”参数传递一个MetaData()对象给Sequence()构造函数时，在metadata.create_all()和metadata.drop_all()中将包含在CREATE/DROP语句中，“checkfirst”逻辑也会被包括进去。
- en: 'References: [#2055](https://www.sqlalchemy.org/trac/ticket/2055)'
  id: totrans-4021
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2055](https://www.sqlalchemy.org/trac/ticket/2055)
- en: '**[sql]**'
  id: totrans-4022
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The Column.references() method now returns True if it has a foreign key referencing
    the given column exactly, not just its parent table.
  id: totrans-4023
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Column.references()方法现在在确切引用给定列的外键时返回True，而不仅仅是其父表。
- en: 'References: [#2064](https://www.sqlalchemy.org/trac/ticket/2064)'
  id: totrans-4024
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2064](https://www.sqlalchemy.org/trac/ticket/2064)
- en: postgresql
  id: totrans-4025
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql]**'
  id: totrans-4026
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Fixed regression from 0.6 where SMALLINT and BIGINT types would both generate
    SERIAL on an integer PK column, instead of SMALLINT and BIGSERIAL
  id: totrans-4027
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了从0.6版本开始的一个回归问题，即SMALLINT和BIGINT类型都会在整数主键列上生成SERIAL，而不是SMALLINT和BIGSERIAL。
- en: 'References: [#2065](https://www.sqlalchemy.org/trac/ticket/2065)'
  id: totrans-4028
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2065](https://www.sqlalchemy.org/trac/ticket/2065)
- en: misc
  id: totrans-4029
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[declarative]**'
  id: totrans-4030
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative]**'
- en: Fixed regression whereby composite() with Column objects placed inline would
    fail to initialize. The Column objects can now be inline with the composite()
    or external and pulled in via name or object ref.
  id: totrans-4031
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个回归问题，即将Column对象与composite()一起放置在内联位置时会导致初始化失败。现在Column对象可以与composite()内联或外部，并通过名称或对象引用引入。
- en: 'References: [#2058](https://www.sqlalchemy.org/trac/ticket/2058)'
  id: totrans-4032
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2058](https://www.sqlalchemy.org/trac/ticket/2058)
- en: '**[declarative]**'
  id: totrans-4033
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative]**'
- en: Fix error message referencing old @classproperty name to reference @declared_attr
    (also in 0.6.7)
  id: totrans-4034
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了错误消息引用旧的@classproperty名称以引用@declared_attr的问题（也适用于0.6.7版本）
- en: 'References: [#2061](https://www.sqlalchemy.org/trac/ticket/2061)'
  id: totrans-4035
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2061](https://www.sqlalchemy.org/trac/ticket/2061)
- en: '**[declarative]**'
  id: totrans-4036
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative]**'
- en: the dictionary at the end of the __table_args__ tuple is now optional.
  id: totrans-4037
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: __table_args__元组末尾的字典现在是可选的。
- en: 'References: [#1468](https://www.sqlalchemy.org/trac/ticket/1468)'
  id: totrans-4038
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1468](https://www.sqlalchemy.org/trac/ticket/1468)
- en: '**[ext]**'
  id: totrans-4039
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: Association proxy now has correct behavior for any(), has(), and contains()
    when proxying a many-to-one scalar attribute to a one-to-many collection (i.e.
    the reverse of the ‘typical’ association proxy use case)
  id: totrans-4040
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当代理一个多对一标量属性到一个一对多集合时，关联代理现在对 any()、has() 和 contains() 有了正确的行为（即“典型”关联代理用例的反向）
- en: 'References: [#2054](https://www.sqlalchemy.org/trac/ticket/2054)'
  id: totrans-4041
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2054](https://www.sqlalchemy.org/trac/ticket/2054)
- en: orm
  id: totrans-4042
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-4043
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby Session.merge() would call the load() event with one too few
    arguments.
  id: totrans-4044
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 Session.merge() 调用 load() 事件时参数少一个的错误。
- en: 'References: [#2053](https://www.sqlalchemy.org/trac/ticket/2053)'
  id: totrans-4045
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2053](https://www.sqlalchemy.org/trac/ticket/2053)
- en: '**[orm]**'
  id: totrans-4046
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added logic which prevents the generation of events from a MapperExtension or
    SessionExtension from generating do-nothing events for all the methods not overridden.
  id: totrans-4047
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了逻辑，防止从 MapperExtension 或 SessionExtension 生成事件，为所有未重写的方法生成无用事件。
- en: 'References: [#2052](https://www.sqlalchemy.org/trac/ticket/2052)'
  id: totrans-4048
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2052](https://www.sqlalchemy.org/trac/ticket/2052)
- en: examples
  id: totrans-4049
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples]**'
  id: totrans-4050
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[示例]**'
- en: Beaker example now takes into account ‘limit’ and ‘offset’, bind params within
    embedded FROM clauses (like when you use union() or from_self()) when generating
    a cache key.
  id: totrans-4051
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Beaker 示例现在考虑了在生成缓存键时嵌入 FROM 子句内的 'limit' 和 'offset'、绑定参数（比如当使用 union() 或 from_self()
    时）。
- en: sql
  id: totrans-4052
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-4053
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Renamed the EngineEvents event class to ConnectionEvents. As these classes are
    never accessed directly by end-user code, this strictly is a documentation change
    for end users. Also simplified how events get linked to engines and connections
    internally.
  id: totrans-4054
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 EngineEvents 事件类重命名为 ConnectionEvents。由于这些类从不直接被最终用户代码访问，因此这严格来说是最终用户的文档更改。还简化了内部如何将事件链接到引擎和连接的方式。
- en: 'References: [#2059](https://www.sqlalchemy.org/trac/ticket/2059)'
  id: totrans-4055
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2059](https://www.sqlalchemy.org/trac/ticket/2059)
- en: '**[sql]**'
  id: totrans-4056
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The Sequence() construct, when passed a MetaData() object via its ‘metadata’
    argument, will be included in CREATE/DROP statements within metadata.create_all()
    and metadata.drop_all(), including “checkfirst” logic.
  id: totrans-4057
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当通过其 'metadata' 参数传递一个 MetaData() 对象给 Sequence() 构造时，将在 metadata.create_all()
    和 metadata.drop_all() 中的 CREATE/DROP 语句中包含它，包括“checkfirst”逻辑。
- en: 'References: [#2055](https://www.sqlalchemy.org/trac/ticket/2055)'
  id: totrans-4058
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2055](https://www.sqlalchemy.org/trac/ticket/2055)
- en: '**[sql]**'
  id: totrans-4059
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The Column.references() method now returns True if it has a foreign key referencing
    the given column exactly, not just its parent table.
  id: totrans-4060
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Column.references() 方法现在如果有一个外键引用给定列的外���，而不仅仅是其父表，则返回 True。
- en: 'References: [#2064](https://www.sqlalchemy.org/trac/ticket/2064)'
  id: totrans-4061
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2064](https://www.sqlalchemy.org/trac/ticket/2064)
- en: postgresql
  id: totrans-4062
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql]**'
  id: totrans-4063
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Fixed regression from 0.6 where SMALLINT and BIGINT types would both generate
    SERIAL on an integer PK column, instead of SMALLINT and BIGSERIAL
  id: totrans-4064
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从 0.6 中的回归中修复了 SMALLINT 和 BIGINT 类型都会在整数 PK 列上生成 SERIAL，而不是 SMALLINT 和 BIGSERIAL
- en: 'References: [#2065](https://www.sqlalchemy.org/trac/ticket/2065)'
  id: totrans-4065
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2065](https://www.sqlalchemy.org/trac/ticket/2065)
- en: misc
  id: totrans-4066
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[declarative]**'
  id: totrans-4067
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[声明式]**'
- en: Fixed regression whereby composite() with Column objects placed inline would
    fail to initialize. The Column objects can now be inline with the composite()
    or external and pulled in via name or object ref.
  id: totrans-4068
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了复合() 与内联放置的 Column 对象会初始化失败的回归。现在，Column 对象可以与复合() 内联或外部，并通过名称或对象引用引入。
- en: 'References: [#2058](https://www.sqlalchemy.org/trac/ticket/2058)'
  id: totrans-4069
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2058](https://www.sqlalchemy.org/trac/ticket/2058)
- en: '**[declarative]**'
  id: totrans-4070
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[声明式]**'
- en: Fix error message referencing old @classproperty name to reference @declared_attr
    (also in 0.6.7)
  id: totrans-4071
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复错误消息引用旧的 @classproperty 名称以引用 @declared_attr（也在 0.6.7 中）
- en: 'References: [#2061](https://www.sqlalchemy.org/trac/ticket/2061)'
  id: totrans-4072
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2061](https://www.sqlalchemy.org/trac/ticket/2061)
- en: '**[declarative]**'
  id: totrans-4073
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[声明式]**'
- en: the dictionary at the end of the __table_args__ tuple is now optional.
  id: totrans-4074
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，在 __table_args__ 元组末尾的字典是可选的。
- en: 'References: [#1468](https://www.sqlalchemy.org/trac/ticket/1468)'
  id: totrans-4075
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1468](https://www.sqlalchemy.org/trac/ticket/1468)
- en: '**[ext]**'
  id: totrans-4076
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: Association proxy now has correct behavior for any(), has(), and contains()
    when proxying a many-to-one scalar attribute to a one-to-many collection (i.e.
    the reverse of the ‘typical’ association proxy use case)
  id: totrans-4077
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当代理一个多对一标量属性到一个一对多集合时，关联代理现在对 any()、has() 和 contains() 有了正确的行为（即“典型”关联代理用例的反向）
- en: 'References: [#2054](https://www.sqlalchemy.org/trac/ticket/2054)'
  id: totrans-4078
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2054](https://www.sqlalchemy.org/trac/ticket/2054)
- en: 0.7.0b1
  id: totrans-4079
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.7.0b1
- en: 'Released: Sat Feb 12 2011'
  id: totrans-4080
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2011年2月12日星期六
- en: general
  id: totrans-4081
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通用
- en: '**[general]**'
  id: totrans-4082
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[通用]**'
- en: New event system, supersedes all extensions, listeners, etc.
  id: totrans-4083
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新事件系统，取代所有扩展、监听器等。
- en: 'References: [#1902](https://www.sqlalchemy.org/trac/ticket/1902)'
  id: totrans-4084
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1902](https://www.sqlalchemy.org/trac/ticket/1902)
- en: '**[general]**'
  id: totrans-4085
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general]**'
- en: Logging enhancements
  id: totrans-4086
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 日志增强
- en: 'References: [#1926](https://www.sqlalchemy.org/trac/ticket/1926)'
  id: totrans-4087
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1926](https://www.sqlalchemy.org/trac/ticket/1926)
- en: '**[general]**'
  id: totrans-4088
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general]**'
- en: Setup no longer installs a Nose plugin
  id: totrans-4089
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 安装不再安装 Nose 插件
- en: 'References: [#1949](https://www.sqlalchemy.org/trac/ticket/1949)'
  id: totrans-4090
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1949](https://www.sqlalchemy.org/trac/ticket/1949)
- en: '**[general]**'
  id: totrans-4091
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general]**'
- en: The “sqlalchemy.exceptions” alias in sys.modules has been removed. Base SQLA
    exceptions are available via “from sqlalchemy import exc”. The “exceptions” alias
    for “exc” remains in “sqlalchemy” for now, it’s just not patched into sys.modules.
  id: totrans-4092
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 sys.modules 中已删除“sqlalchemy.exceptions”别名。基本 SQLA 异常可通过“from sqlalchemy import
    exc”获得。对于“exc”，“exceptions”别名目前仍在“sqlalchemy”中保留，只是没有被修补到 sys.modules 中。
- en: orm
  id: totrans-4093
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-4094
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: More succinct form of query.join(target, onclause)
  id: totrans-4095
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更简洁的 query.join(target, onclause) 形式
- en: 'References: [#1923](https://www.sqlalchemy.org/trac/ticket/1923)'
  id: totrans-4096
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1923](https://www.sqlalchemy.org/trac/ticket/1923)
- en: '**[orm]**'
  id: totrans-4097
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Hybrid Attributes, implements/supersedes synonym()
  id: totrans-4098
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 混合属性，实现/取代 synonym()
- en: 'References: [#1903](https://www.sqlalchemy.org/trac/ticket/1903)'
  id: totrans-4099
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1903](https://www.sqlalchemy.org/trac/ticket/1903)
- en: '**[orm]**'
  id: totrans-4100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Rewrite of composites
  id: totrans-4101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重写复合物
- en: 'References: [#2008](https://www.sqlalchemy.org/trac/ticket/2008)'
  id: totrans-4102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2008](https://www.sqlalchemy.org/trac/ticket/2008)
- en: '**[orm]**'
  id: totrans-4103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Mutation Event Extension, supersedes “mutable=True”
  id: totrans-4104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 变异事件扩展，取代“mutable=True”
- en: See also
  id: totrans-4105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[Mutation event extension, supersedes “mutable=True”](migration_07.html#migration-mutation-extension)'
  id: totrans-4106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[变异事件扩展，取代“mutable=True”](migration_07.html#migration-mutation-extension)'
- en: '**[orm]**'
  id: totrans-4107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: PickleType and ARRAY mutability turned off by default
  id: totrans-4108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: PickleType 和 ARRAY 的可变性默认关闭
- en: 'References: [#1980](https://www.sqlalchemy.org/trac/ticket/1980)'
  id: totrans-4109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1980](https://www.sqlalchemy.org/trac/ticket/1980)
- en: '**[orm]**'
  id: totrans-4110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Simplified polymorphic_on assignment
  id: totrans-4111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 简化的 polymorphic_on 赋值
- en: 'References: [#1895](https://www.sqlalchemy.org/trac/ticket/1895)'
  id: totrans-4112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1895](https://www.sqlalchemy.org/trac/ticket/1895)
- en: '**[orm]**'
  id: totrans-4113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Flushing of Orphans that have no parent is allowed
  id: totrans-4114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 允许刷新没有父��的孤立体
- en: 'References: [#1912](https://www.sqlalchemy.org/trac/ticket/1912)'
  id: totrans-4115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1912](https://www.sqlalchemy.org/trac/ticket/1912)
- en: '**[orm]**'
  id: totrans-4116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Adjusted flush accounting step to occur before the commit in the case of autocommit=True.
    This allows autocommit=True to work appropriately with expire_on_commit=True,
    and also allows post-flush session hooks to operate in the same transactional
    context as when autocommit=False.
  id: totrans-4117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整刷新记账步骤，以在 autocommit=True 的情况下在提交之前发生。这允许 autocommit=True 与 expire_on_commit=True
    正常工作，并且还允许后刷新会话钩子在与 autocommit=False 时相同的事务上下文中运行。
- en: 'References: [#2041](https://www.sqlalchemy.org/trac/ticket/2041)'
  id: totrans-4118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2041](https://www.sqlalchemy.org/trac/ticket/2041)
- en: '**[orm]**'
  id: totrans-4119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Warnings generated when collection members, scalar referents not part of the
    flush
  id: totrans-4120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在刷新时生成警告，集合成员，标量引用不是刷新的一部分
- en: 'References: [#1973](https://www.sqlalchemy.org/trac/ticket/1973)'
  id: totrans-4121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1973](https://www.sqlalchemy.org/trac/ticket/1973)
- en: '**[orm]**'
  id: totrans-4122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Non-Table-derived constructs can be mapped
  id: totrans-4123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 非 Table 派生结构可以映射
- en: 'References: [#1876](https://www.sqlalchemy.org/trac/ticket/1876)'
  id: totrans-4124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1876](https://www.sqlalchemy.org/trac/ticket/1876)
- en: '**[orm]**'
  id: totrans-4125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Tuple label names in Query Improved
  id: totrans-4126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 查询中的元组标签名称改进
- en: 'References: [#1942](https://www.sqlalchemy.org/trac/ticket/1942)'
  id: totrans-4127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1942](https://www.sqlalchemy.org/trac/ticket/1942)
- en: '**[orm]**'
  id: totrans-4128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Mapped column attributes reference the most specific column first
  id: totrans-4129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 映射列属性首先引用最具体的列
- en: 'References: [#1892](https://www.sqlalchemy.org/trac/ticket/1892)'
  id: totrans-4130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1892](https://www.sqlalchemy.org/trac/ticket/1892)
- en: '**[orm]**'
  id: totrans-4131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Mapping to joins with two or more same-named columns requires explicit declaration
  id: totrans-4132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 映射到具有两个或更多同名列的连接需要明确声明
- en: 'References: [#1896](https://www.sqlalchemy.org/trac/ticket/1896)'
  id: totrans-4133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1896](https://www.sqlalchemy.org/trac/ticket/1896)
- en: '**[orm]**'
  id: totrans-4134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Mapper requires that polymorphic_on column be present in the mapped selectable
  id: totrans-4135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 映射器要求 polymorphic_on 列存在于映射的可选择中
- en: 'References: [#1875](https://www.sqlalchemy.org/trac/ticket/1875)'
  id: totrans-4136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1875](https://www.sqlalchemy.org/trac/ticket/1875)
- en: '**[orm]**'
  id: totrans-4137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: compile_mappers() renamed configure_mappers(), simplified configuration internals
  id: totrans-4138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: compile_mappers() 重命名为 configure_mappers()，简化配置内部
- en: 'References: [#1966](https://www.sqlalchemy.org/trac/ticket/1966)'
  id: totrans-4139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1966](https://www.sqlalchemy.org/trac/ticket/1966)
- en: '**[orm]**'
  id: totrans-4140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: the aliased() function, if passed a SQL FromClause element (i.e. not a mapped
    class), will return element.alias() instead of raising an error on AliasedClass.
  id: totrans-4141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果传递了 SQL FromClause 元素（即非映射类）给 aliased() 函数，它将返回 element.alias() 而不是在 AliasedClass
    上引发错误。
- en: 'References: [#2018](https://www.sqlalchemy.org/trac/ticket/2018)'
  id: totrans-4142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2018](https://www.sqlalchemy.org/trac/ticket/2018)
- en: '**[orm]**'
  id: totrans-4143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Session.merge() will check the version id of the incoming state against that
    of the database, assuming the mapping uses version ids and incoming state has
    a version_id assigned, and raise StaleDataError if they don’t match.
  id: totrans-4144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Session.merge()将检查传入状态的版本id与数据库的版本id是否匹配，假设映射使用版本id并且传入状态已分配版本id，并在它们不匹配时引发StaleDataError。
- en: 'References: [#2027](https://www.sqlalchemy.org/trac/ticket/2027)'
  id: totrans-4145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2027](https://www.sqlalchemy.org/trac/ticket/2027)
- en: '**[orm]**'
  id: totrans-4146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Session.connection(), Session.execute() accept ‘bind’, to allow execute/connection
    operations to participate in the open transaction of an engine explicitly.
  id: totrans-4147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Session.connection()，Session.execute()接受‘bind’，以允许执行/连接操作显式参与引擎的开放事务。
- en: 'References: [#1996](https://www.sqlalchemy.org/trac/ticket/1996)'
  id: totrans-4148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1996](https://www.sqlalchemy.org/trac/ticket/1996)
- en: '**[orm]**'
  id: totrans-4149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query.join(), Query.outerjoin(), eagerload(), eagerload_all(), others no longer
    allow lists of attributes as arguments (i.e. option([x, y, z]) form, deprecated
    since 0.5)
  id: totrans-4150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query.join()，Query.outerjoin()，eagerload()，eagerload_all()等不再允许将属性列表作为参数（即option([x,
    y, z])形式，自0.5版本起已被弃用）。
- en: '**[orm]**'
  id: totrans-4151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: ScopedSession.mapper is removed (deprecated since 0.5).
  id: totrans-4152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ScopedSession.mapper已被移除（自0.5版本起已被弃用）。
- en: '**[orm]**'
  id: totrans-4153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Horizontal shard query places ‘shard_id’ in context.attributes where it’s accessible
    by the “load()” event.
  id: totrans-4154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 水平分片查询将“shard_id”放置在context.attributes中，可以通过“load()”事件访问。
- en: 'References: [#2031](https://www.sqlalchemy.org/trac/ticket/2031)'
  id: totrans-4155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2031](https://www.sqlalchemy.org/trac/ticket/2031)
- en: '**[orm]**'
  id: totrans-4156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: A single contains_eager() call across multiple entities will indicate all collections
    along that path should load, instead of requiring distinct contains_eager() calls
    for each endpoint (which was never correctly documented).
  id: totrans-4157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 跨多个实体进行单个contains_eager()调用将指示沿该路径的所有集合应该加载，而不需要为每个端点分别进行不同的contains_eager()调用（这从未被正确记录）。
- en: 'References: [#2032](https://www.sqlalchemy.org/trac/ticket/2032)'
  id: totrans-4158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2032](https://www.sqlalchemy.org/trac/ticket/2032)
- en: '**[orm]**'
  id: totrans-4159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The “name” field used in orm.aliased() now renders in the resulting SQL statement.
  id: totrans-4160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在orm.aliased()中使用的“name”字段现在会在生成的SQL语句中呈现。
- en: '**[orm]**'
  id: totrans-4161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Session weak_instance_dict=False is deprecated.
  id: totrans-4162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Session weak_instance_dict=False已被弃用。
- en: 'References: [#1473](https://www.sqlalchemy.org/trac/ticket/1473)'
  id: totrans-4163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1473](https://www.sqlalchemy.org/trac/ticket/1473)
- en: '**[orm]**'
  id: totrans-4164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: An exception is raised in the unusual case that an append or similar event on
    a collection occurs after the parent object has been dereferenced, which prevents
    the parent from being marked as “dirty” in the session. Was a warning in 0.6.6.
  id: totrans-4165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在罕见情况下，如果在父对象被取消引用后发生附加或类似事件的情况，将引发异常，这将阻止父对象在会话中被标记为“脏”。在0.6.6中是一个警告。
- en: 'References: [#2046](https://www.sqlalchemy.org/trac/ticket/2046)'
  id: totrans-4166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2046](https://www.sqlalchemy.org/trac/ticket/2046)
- en: '**[orm]**'
  id: totrans-4167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query.distinct() now accepts column expressions as *args, interpreted by the
    PostgreSQL dialect as DISTINCT ON (<expr>).
  id: totrans-4168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query.distinct()现在接受列表达式作为*args，由PostgreSQL方言解释为DISTINCT ON (<expr>)。
- en: 'References: [#1069](https://www.sqlalchemy.org/trac/ticket/1069)'
  id: totrans-4169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1069](https://www.sqlalchemy.org/trac/ticket/1069)
- en: '**[orm]**'
  id: totrans-4170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Additional tuning to “many-to-one” relationship loads during a flush(). A change
    in version 0.6.6 ([ticket:2002]) required that more “unnecessary” m2o loads during
    a flush could occur. Extra loading modes have been added so that the SQL emitted
    in this specific use case is trimmed back, while still retrieving the information
    the flush needs in order to not miss anything.
  id: totrans-4171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在flush()期间对“多对一”关系加载进行了额外调整。0.6.6版本的更改（[ticket:2002]）要求在flush期间可能会发生更多“不必要”的m2o加载。已添加额外的加载模式，以便在这种特定用例中发出的SQL被修剪回来，同时仍然检索flush所需的信息，以免遗漏任何内容。
- en: 'References: [#2049](https://www.sqlalchemy.org/trac/ticket/2049)'
  id: totrans-4172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2049](https://www.sqlalchemy.org/trac/ticket/2049)
- en: '**[orm]**'
  id: totrans-4173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: the value of “passive” as passed to attributes.get_history() should be one of
    the constants defined in the attributes package. Sending True or False is deprecated.
  id: totrans-4174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为传递给attributes.get_history()的“passive”值应该是attributes包中定义的常量之一。发送True或False已被弃用。
- en: '**[orm]**'
  id: totrans-4175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added a name argument to Query.subquery(), to allow a fixed name to be assigned
    to the alias object. (also in 0.6.7)
  id: totrans-4176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向Query.subquery()添加了一个name参数，以允许为别名对象分配固定名称。（也适用于0.6.7）
- en: 'References: [#2030](https://www.sqlalchemy.org/trac/ticket/2030)'
  id: totrans-4177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2030](https://www.sqlalchemy.org/trac/ticket/2030)
- en: '**[orm]**'
  id: totrans-4178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: A warning is emitted when a joined-table inheriting mapper has no primary keys
    on the locally mapped table (but has pks on the superclass table). (also in 0.6.7)
  id: totrans-4179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当一个联接表继承映射器在本地映射表上没有主键（但在超类表上有主键）时，会发出警告。（也适用于 0.6.7）
- en: 'References: [#2019](https://www.sqlalchemy.org/trac/ticket/2019)'
  id: totrans-4180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2019](https://www.sqlalchemy.org/trac/ticket/2019)
- en: '**[orm]**'
  id: totrans-4181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug where “middle” class in a polymorphic hierarchy would have no ‘polymorphic_on’
    column if it didn’t also specify a ‘polymorphic_identity’, leading to strange
    errors upon refresh, wrong class loaded when querying from that target. Also emits
    the correct WHERE criterion when using single table inheritance. (also in 0.6.7)
  id: totrans-4182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，当多态层次结构中的“中间”类没有指定 'polymorphic_identity' 时，将没有 'polymorphic_on' 列，导致刷新时出现奇怪的错误，从目标查询时加载错误的类。
    当使用单表继承时，也会发出正确的 WHERE 条件。 （也适用于 0.6.7）
- en: 'References: [#2038](https://www.sqlalchemy.org/trac/ticket/2038)'
  id: totrans-4183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2038](https://www.sqlalchemy.org/trac/ticket/2038)
- en: '**[orm]**'
  id: totrans-4184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug where a column with a SQL or server side default that was excluded
    from a mapping with include_properties or exclude_properties would result in UnmappedColumnError.
    (also in 0.6.7)
  id: totrans-4185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，当具有 SQL 或服务器端默认值的列被使用 include_properties 或 exclude_properties 排除时，会导致
    UnmappedColumnError。 （也适用于 0.6.7）
- en: 'References: [#1995](https://www.sqlalchemy.org/trac/ticket/1995)'
  id: totrans-4186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1995](https://www.sqlalchemy.org/trac/ticket/1995)
- en: '**[orm]**'
  id: totrans-4187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: A warning is emitted in the unusual case that an append or similar event on
    a collection occurs after the parent object has been dereferenced, which prevents
    the parent from being marked as “dirty” in the session. This will be an exception
    in 0.7\. (also in 0.6.7)
  id: totrans-4188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在罕见情况下，当在父对象被取消引用后发生附加或类似事件时，会发出警告，这会阻止父对象在会话中被标记为“脏”。 这在 0.7 中将是一个异常。（也适用于
    0.6.7）
- en: 'References: [#2046](https://www.sqlalchemy.org/trac/ticket/2046)'
  id: totrans-4189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2046](https://www.sqlalchemy.org/trac/ticket/2046)
- en: sql
  id: totrans-4190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-4191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added over() function, method to FunctionElement classes, produces the _Over()
    construct which in turn generates “window functions”, i.e. “<window function>
    OVER (PARTITION BY <partition by>, ORDER BY <order by>)”.
  id: totrans-4192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 over() 函数，FunctionElement 类的方法，生成 _Over() 结构，进而生成“窗口函数”，即“<窗口函数> OVER (PARTITION
    BY <按分区>, ORDER BY <按顺序>)”。
- en: 'References: [#1844](https://www.sqlalchemy.org/trac/ticket/1844)'
  id: totrans-4193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1844](https://www.sqlalchemy.org/trac/ticket/1844)
- en: '**[sql]**'
  id: totrans-4194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: LIMIT/OFFSET clauses now use bind parameters
  id: totrans-4195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: LIMIT/OFFSET 子句现在使用绑定参数
- en: 'References: [#805](https://www.sqlalchemy.org/trac/ticket/805)'
  id: totrans-4196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#805](https://www.sqlalchemy.org/trac/ticket/805)
- en: '**[sql]**'
  id: totrans-4197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: select.distinct() now accepts column expressions as *args, interpreted by the
    PostgreSQL dialect as DISTINCT ON (<expr>). Note this was already available via
    passing a list to the distinct keyword argument to select().
  id: totrans-4198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: select.distinct() 现在接受列表达式作为 *args，由 PostgreSQL 方言解释为 DISTINCT ON (<表达式>)。请注意，通过将列表传递给
    select() 的 distinct 关键字参数已经可用。
- en: 'References: [#1069](https://www.sqlalchemy.org/trac/ticket/1069)'
  id: totrans-4199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1069](https://www.sqlalchemy.org/trac/ticket/1069)
- en: '**[sql]**'
  id: totrans-4200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: select.prefix_with() accepts multiple expressions (i.e. *expr), ‘prefix’ keyword
    argument to select() accepts a list or tuple.
  id: totrans-4201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: select.prefix_with() 接受多个表达式（即 *表达式），select() 的 'prefix' 关键字参数接受列表或元组。
- en: '**[sql]**'
  id: totrans-4202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Passing a string to the distinct keyword argument of select() for the purpose
    of emitting special MySQL keywords (DISTINCTROW etc.) is deprecated - use prefix_with()
    for this.
  id: totrans-4203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将字符串传递给 select() 的 distinct 关键字参数以发出特殊的 MySQL 关键字（DISTINCTROW 等）已被弃用 - 为此使用
    prefix_with()。
- en: '**[sql]**'
  id: totrans-4204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: TypeDecorator works with primary key columns
  id: totrans-4205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: TypeDecorator 适用于主键列
- en: 'References: [#2005](https://www.sqlalchemy.org/trac/ticket/2005), [#2006](https://www.sqlalchemy.org/trac/ticket/2006)'
  id: totrans-4206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2005](https://www.sqlalchemy.org/trac/ticket/2005), [#2006](https://www.sqlalchemy.org/trac/ticket/2006)
- en: '**[sql]**'
  id: totrans-4207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: DDL() constructs now escape percent signs
  id: totrans-4208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: DDL() 构造现在转义百分号
- en: 'References: [#1897](https://www.sqlalchemy.org/trac/ticket/1897)'
  id: totrans-4209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1897](https://www.sqlalchemy.org/trac/ticket/1897)
- en: '**[sql]**'
  id: totrans-4210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Table.c / MetaData.tables refined a bit, don’t allow direct mutation
  id: totrans-4211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Table.c / MetaData.tables 稍微调整，不允许直接修改
- en: 'References: [#1893](https://www.sqlalchemy.org/trac/ticket/1893), [#1917](https://www.sqlalchemy.org/trac/ticket/1917)'
  id: totrans-4212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1893](https://www.sqlalchemy.org/trac/ticket/1893), [#1917](https://www.sqlalchemy.org/trac/ticket/1917)
- en: '**[sql]**'
  id: totrans-4213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Callables passed to bindparam() don’t get evaluated
  id: totrans-4214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 传递给 bindparam() 的可调用对象不会被评估
- en: 'References: [#1950](https://www.sqlalchemy.org/trac/ticket/1950)'
  id: totrans-4215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1950](https://www.sqlalchemy.org/trac/ticket/1950)
- en: '**[sql]**'
  id: totrans-4216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: types.type_map is now private, types._type_map
  id: totrans-4217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: types.type_map 现在是私有的，types._type_map
- en: 'References: [#1870](https://www.sqlalchemy.org/trac/ticket/1870)'
  id: totrans-4218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1870](https://www.sqlalchemy.org/trac/ticket/1870)
- en: '**[sql]**'
  id: totrans-4219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Non-public Pool methods underscored
  id: totrans-4220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 非公共 Pool 方法使用下划线标记
- en: 'References: [#1982](https://www.sqlalchemy.org/trac/ticket/1982)'
  id: totrans-4221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1982](https://www.sqlalchemy.org/trac/ticket/1982)
- en: '**[sql]**'
  id: totrans-4222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added NULLS FIRST and NULLS LAST support. It’s implemented as an extension to
    the asc() and desc() operators, called nullsfirst() and nullslast().
  id: totrans-4223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 NULLS FIRST 和 NULLS LAST 支持。它作为 asc() 和 desc() 操作符的扩展实现，称为 nullsfirst()
    和 nullslast()。
- en: 'References: [#723](https://www.sqlalchemy.org/trac/ticket/723)'
  id: totrans-4224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#723](https://www.sqlalchemy.org/trac/ticket/723)
- en: '**[sql]**'
  id: totrans-4225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The Index() construct can be created inline with a Table definition, using strings
    as column names, as an alternative to the creation of the index outside of the
    Table.
  id: totrans-4226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Index() 构造可以与 Table 定义内联创建，使用字符串作为列名，作为在 Table 外创建索引的替代方法。
- en: '**[sql]**'
  id: totrans-4227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: execution_options() on Connection accepts “isolation_level” argument, sets transaction
    isolation level for that connection only until returned to the connection pool,
    for those backends which support it (SQLite, PostgreSQL)
  id: totrans-4228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Connection 上的 execution_options() 接受“isolation_level”参数，仅为该连接设置事务隔离级别，直到返回到连接池，对于支持它的后端（SQLite，PostgreSQL）
- en: 'References: [#2001](https://www.sqlalchemy.org/trac/ticket/2001)'
  id: totrans-4229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2001](https://www.sqlalchemy.org/trac/ticket/2001)
- en: '**[sql]**'
  id: totrans-4230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: A TypeDecorator of Integer can be used with a primary key column, and the “autoincrement”
    feature of various dialects as well as the “sqlite_autoincrement” flag will honor
    the underlying database type as being Integer-based.
  id: totrans-4231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Integer 的 TypeDecorator 可以与主键列一起使用，并且各种方言的“autoincrement”特性以及“sqlite_autoincrement”标志将遵守底层数据库类型为
    Integer 的设定。
- en: 'References: [#2005](https://www.sqlalchemy.org/trac/ticket/2005)'
  id: totrans-4232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2005](https://www.sqlalchemy.org/trac/ticket/2005)
- en: '**[sql]**'
  id: totrans-4233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Established consistency when server_default is present on an Integer PK column.
    SQLA doesn’t pre-fetch these, nor do they come back in cursor.lastrowid (DBAPI).
    Ensured all backends consistently return None in result.inserted_primary_key for
    these. Regarding reflection for this case, reflection of an int PK col with a
    server_default sets the “autoincrement” flag to False, except in the case of a
    PG SERIAL col where we detected a sequence default.
  id: totrans-4234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当 Integer 主键列存在 server_default 时确立了一致性。SQLA 不会预取这些值，也不会在 cursor.lastrowid（DBAPI）中返回。确保所有后端在这种情况下一致地返回
    None 给 result.inserted_primary_key。关于这种情况的反射，具有 server_default 的 int 主键列的反射会将“autoincrement”标志设置为
    False，除非是 PG SERIAL 列，我们检测到一个序列默认值。
- en: 'References: [#2020](https://www.sqlalchemy.org/trac/ticket/2020), [#2021](https://www.sqlalchemy.org/trac/ticket/2021)'
  id: totrans-4235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2020](https://www.sqlalchemy.org/trac/ticket/2020)，[#2021](https://www.sqlalchemy.org/trac/ticket/2021)
- en: '**[sql]**'
  id: totrans-4236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Result-row processors are applied to pre-executed SQL defaults, as well as cursor.lastrowid,
    when determining the contents of result.inserted_primary_key.
  id: totrans-4237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 结果行处理器应用于预执行的 SQL 默认值，以及 cursor.lastrowid，在确定 result.inserted_primary_key 的内容时。
- en: 'References: [#2006](https://www.sqlalchemy.org/trac/ticket/2006)'
  id: totrans-4238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2006](https://www.sqlalchemy.org/trac/ticket/2006)
- en: '**[sql]**'
  id: totrans-4239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Bind parameters present in the “columns clause” of a select are now auto-labeled
    like other “anonymous” clauses, which among other things allows their “type” to
    be meaningful when the row is fetched, as in result row processors.
  id: totrans-4240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 select 的“columns clause”中存在的绑定参数现在像其��“匿名”子句一样自动标记，这样在获取行时它们的“类型”就有意义，就像结果行处理器一样。
- en: '**[sql]**'
  id: totrans-4241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: TypeDecorator is present in the “sqlalchemy” import space.
  id: totrans-4242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: TypeDecorator 存在于“sqlalchemy”导入空间中。
- en: '**[sql]**'
  id: totrans-4243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Non-DBAPI errors which occur in the scope of an execute() call are now wrapped
    in sqlalchemy.exc.StatementError, and the text of the SQL statement and repr()
    of params is included. This makes it easier to identify statement executions which
    fail before the DBAPI becomes involved.
  id: totrans-4244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 execute() 调用范围内发生的非 DBAPI 错误现在被包装在 sqlalchemy.exc.StatementError 中，并包含 SQL
    语句的文本和 params 的 repr()。这使得更容易识别在 DBAPI 参与之前失败的语句执行。
- en: 'References: [#2015](https://www.sqlalchemy.org/trac/ticket/2015)'
  id: totrans-4245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2015](https://www.sqlalchemy.org/trac/ticket/2015)
- en: '**[sql]**'
  id: totrans-4246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The concept of associating a “.bind” directly with a ClauseElement has been
    explicitly moved to Executable, i.e. the mixin that describes ClauseElements which
    represent engine-executable constructs. This change is an improvement to internal
    organization and is unlikely to affect any real-world usage.
  id: totrans-4247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将“.bind”直接与 ClauseElement 关联的概念明确地移动到 Executable，即描述表示引擎可执行构造的 ClauseElements
    的 mixin。这个改变是对内部组织的改进，不太可能影响任何真实世界的使用。
- en: 'References: [#2048](https://www.sqlalchemy.org/trac/ticket/2048)'
  id: totrans-4248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2048](https://www.sqlalchemy.org/trac/ticket/2048)
- en: '**[sql]**'
  id: totrans-4249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Column.copy(), as used in table.tometadata(), copies the ‘doc’ attribute. (also
    in 0.6.7)
  id: totrans-4250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Column.copy() 在 table.tometadata() 中使用，会复制 'doc' 属性。（也适用于 0.6.7）
- en: 'References: [#2028](https://www.sqlalchemy.org/trac/ticket/2028)'
  id: totrans-4251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2028](https://www.sqlalchemy.org/trac/ticket/2028)
- en: '**[sql]**'
  id: totrans-4252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added some defs to the resultproxy.c extension so that the extension compiles
    and runs on Python 2.4\. (also in 0.6.7)
  id: totrans-4253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 resultproxy.c 扩展添加了一些 defs，以便该扩展在 Python 2.4 上编译和运行。（也适用于 0.6.7）
- en: 'References: [#2023](https://www.sqlalchemy.org/trac/ticket/2023)'
  id: totrans-4254
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2023](https://www.sqlalchemy.org/trac/ticket/2023)
- en: '**[sql]**'
  id: totrans-4255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The compiler extension now supports overriding the default compilation of expression._BindParamClause
    including that the auto-generated binds within the VALUES/SET clause of an insert()/update()
    statement will also use the new compilation rules. (also in 0.6.7)
  id: totrans-4256
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 编译器扩展现在支持覆盖 expression._BindParamClause 的默认编译，包括 insert()/update() 语句的 VALUES/SET
    子句中的自动生成绑定也将使用新的编译规则。（也适用于 0.6.7）
- en: 'References: [#2042](https://www.sqlalchemy.org/trac/ticket/2042)'
  id: totrans-4257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2042](https://www.sqlalchemy.org/trac/ticket/2042)
- en: '**[sql]**'
  id: totrans-4258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: SQLite dialect now uses NullPool for file-based databases
  id: totrans-4259
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLite 方言现在对基于文件的数据库使用 NullPool
- en: 'References: [#1921](https://www.sqlalchemy.org/trac/ticket/1921)'
  id: totrans-4260
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1921](https://www.sqlalchemy.org/trac/ticket/1921)
- en: '**[sql]**'
  id: totrans-4261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The path given as the location of a sqlite database is now normalized via os.path.abspath(),
    so that directory changes within the process don’t affect the ultimate location
    of a relative file path.
  id: totrans-4262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过 os.path.abspath() 规范给定为 sqlite 数据库位置的路径，以便进程内的目录更改不会影响相对文件路径的最终位置。
- en: 'References: [#2036](https://www.sqlalchemy.org/trac/ticket/2036)'
  id: totrans-4263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2036](https://www.sqlalchemy.org/trac/ticket/2036)
- en: postgresql
  id: totrans-4264
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql]**'
  id: totrans-4265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: When explicit sequence execution derives the name of the auto-generated sequence
    of a SERIAL column, which currently only occurs if implicit_returning=False, now
    accommodates if the table + column name is greater than 63 characters using the
    same logic PostgreSQL uses. (also in 0.6.7)
  id: totrans-4266
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当显式序列执行导致自动生成序列的 SERIAL 列的名称时，目前仅在 implicit_returning=False 时发生，现在采用与 PostgreSQL
    相同的逻辑，如果表 + 列名称大于 63 个字符，则予以适应。（也适用于 0.6.7）
- en: 'References: [#1083](https://www.sqlalchemy.org/trac/ticket/1083)'
  id: totrans-4267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1083](https://www.sqlalchemy.org/trac/ticket/1083)
- en: '**[postgresql]**'
  id: totrans-4268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Added an additional libpq message to the list of “disconnect” exceptions, “could
    not receive data from server” (also in 0.6.7)
  id: totrans-4269
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一条额外的 libpq 消息到“断开”异常列表中，“无法从服务器接收数据”（也适用于 0.6.7）
- en: 'References: [#2044](https://www.sqlalchemy.org/trac/ticket/2044)'
  id: totrans-4270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2044](https://www.sqlalchemy.org/trac/ticket/2044)
- en: mysql
  id: totrans-4271
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-4272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: New DBAPI support for pymysql, a pure Python port of MySQL-python.
  id: totrans-4273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新增对 pymysql 的 DBAPI 支持，pymysql 是 MySQL-python 的纯 Python 移植版。
- en: 'References: [#1991](https://www.sqlalchemy.org/trac/ticket/1991)'
  id: totrans-4274
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1991](https://www.sqlalchemy.org/trac/ticket/1991)
- en: '**[mysql]**'
  id: totrans-4275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: oursql dialect accepts the same “ssl” arguments in create_engine() as that of
    MySQLdb. (also in 0.6.7)
  id: totrans-4276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: oursql 方言在 create_engine() 中接受与 MySQLdb 相同的“ssl”参数。（也适用于 0.6.7）
- en: 'References: [#2047](https://www.sqlalchemy.org/trac/ticket/2047)'
  id: totrans-4277
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2047](https://www.sqlalchemy.org/trac/ticket/2047)
- en: mssql
  id: totrans-4278
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-4279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: the String/Unicode types, and their counterparts VARCHAR/ NVARCHAR, emit “max”
    as the length when no length is specified, so that the default length, normally
    ‘1’ as per SQL server documentation, is instead ‘unbounded’. This also occurs
    for the VARBINARY type..
  id: totrans-4280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当未指定长度时，字符串/Unicode 类型及其对应的 VARCHAR/NVARCHAR 类型在不特定长度时发出 “max” 作为长度，因此默认长度，通常为
    SQL 服务器文档中的 ‘1’，改为 ‘无界’。对于 VARBINARY 类型也是如此。
- en: This behavior makes these types more closely compatible with PostgreSQL’s VARCHAR
    type which is similarly unbounded when no length is specified.
  id: totrans-4281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此行为使这些类型与 PostgreSQL 的 VARCHAR 类型更加兼容，当未指定长度时同样是无界的。
- en: 'References: [#1833](https://www.sqlalchemy.org/trac/ticket/1833)'
  id: totrans-4282
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1833](https://www.sqlalchemy.org/trac/ticket/1833)
- en: misc
  id: totrans-4283
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[no_tags]**'
  id: totrans-4284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: 'Detailed descriptions of each change below are described at: [https://docs.sqlalchemy.org/en/latest/changelog/migration_07.html](https://docs.sqlalchemy.org/en/latest/changelog/migration_07.html)'
  id: totrans-4285
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下面对每个变更的详细描述在这里描述：[https://docs.sqlalchemy.org/en/latest/changelog/migration_07.html](https://docs.sqlalchemy.org/en/latest/changelog/migration_07.html)
- en: '**[declarative]**'
  id: totrans-4286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative]**'
- en: Added an explicit check for the case that the name ‘metadata’ is used for a
    column attribute on a declarative class. (also in 0.6.7)
  id: totrans-4287
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对在声明类的列属性上使用名称 'metadata' 的情况的显式检查。（也适用于 0.6.7）
- en: 'References: [#2050](https://www.sqlalchemy.org/trac/ticket/2050)'
  id: totrans-4288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2050](https://www.sqlalchemy.org/trac/ticket/2050)
- en: '**[firebird]**'
  id: totrans-4289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: Some adjustments so that Interbase is supported as well. FB/Interbase version
    idents are parsed into a structure such as (8, 1, 1, ‘interbase’) or (2, 1, 588,
    ‘firebird’) so they can be distinguished.
  id: totrans-4290
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一些调整以支持Interbase。FB/Interbase版本标识被解析为结构，如(8, 1, 1, ‘interbase’)或(2, 1, 588,
    ‘firebird’)，以便区分它们。
- en: 'References: [#1885](https://www.sqlalchemy.org/trac/ticket/1885)'
  id: totrans-4291
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1885](https://www.sqlalchemy.org/trac/ticket/1885)
- en: general
  id: totrans-4292
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通用
- en: '**[general]**'
  id: totrans-4293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[通用]**'
- en: New event system, supersedes all extensions, listeners, etc.
  id: totrans-4294
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新事件系统，取代所有扩展、监听器等
- en: 'References: [#1902](https://www.sqlalchemy.org/trac/ticket/1902)'
  id: totrans-4295
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1902](https://www.sqlalchemy.org/trac/ticket/1902)
- en: '**[general]**'
  id: totrans-4296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[通用]**'
- en: Logging enhancements
  id: totrans-4297
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 日志增强
- en: 'References: [#1926](https://www.sqlalchemy.org/trac/ticket/1926)'
  id: totrans-4298
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1926](https://www.sqlalchemy.org/trac/ticket/1926)
- en: '**[general]**'
  id: totrans-4299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[通用]**'
- en: Setup no longer installs a Nose plugin
  id: totrans-4300
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 设置不再安装Nose插件
- en: 'References: [#1949](https://www.sqlalchemy.org/trac/ticket/1949)'
  id: totrans-4301
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1949](https://www.sqlalchemy.org/trac/ticket/1949)
- en: '**[general]**'
  id: totrans-4302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[通用]**'
- en: The “sqlalchemy.exceptions” alias in sys.modules has been removed. Base SQLA
    exceptions are available via “from sqlalchemy import exc”. The “exceptions” alias
    for “exc” remains in “sqlalchemy” for now, it’s just not patched into sys.modules.
  id: totrans-4303
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “sqlalchemy.exceptions”在sys.modules中的别名已被移除。基本SQLA异常可通过“from sqlalchemy import
    exc”获得。“exceptions”对于“exc”的别名目前仍在“sqlalchemy”中，只是没有被打补丁到sys.modules中。
- en: orm
  id: totrans-4304
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-4305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: More succinct form of query.join(target, onclause)
  id: totrans-4306
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更简洁的查询.join(target, onclause)形式
- en: 'References: [#1923](https://www.sqlalchemy.org/trac/ticket/1923)'
  id: totrans-4307
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1923](https://www.sqlalchemy.org/trac/ticket/1923)
- en: '**[orm]**'
  id: totrans-4308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Hybrid Attributes, implements/supersedes synonym()
  id: totrans-4309
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 混合属性，实现/取代synonym()
- en: 'References: [#1903](https://www.sqlalchemy.org/trac/ticket/1903)'
  id: totrans-4310
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1903](https://www.sqlalchemy.org/trac/ticket/1903)
- en: '**[orm]**'
  id: totrans-4311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Rewrite of composites
  id: totrans-4312
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重写复合体
- en: 'References: [#2008](https://www.sqlalchemy.org/trac/ticket/2008)'
  id: totrans-4313
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2008](https://www.sqlalchemy.org/trac/ticket/2008)
- en: '**[orm]**'
  id: totrans-4314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Mutation Event Extension, supersedes “mutable=True”
  id: totrans-4315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 变异事件扩展，取代“mutable=True”
- en: See also
  id: totrans-4316
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Mutation event extension, supersedes “mutable=True”](migration_07.html#migration-mutation-extension)'
  id: totrans-4317
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[变异事件扩展，取代“mutable=True”](migration_07.html#migration-mutation-extension)'
- en: '**[orm]**'
  id: totrans-4318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: PickleType and ARRAY mutability turned off by default
  id: totrans-4319
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: PickleType和ARRAY的可变性默认关闭
- en: 'References: [#1980](https://www.sqlalchemy.org/trac/ticket/1980)'
  id: totrans-4320
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1980](https://www.sqlalchemy.org/trac/ticket/1980)
- en: '**[orm]**'
  id: totrans-4321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Simplified polymorphic_on assignment
  id: totrans-4322
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 简化的多态性分配
- en: 'References: [#1895](https://www.sqlalchemy.org/trac/ticket/1895)'
  id: totrans-4323
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1895](https://www.sqlalchemy.org/trac/ticket/1895)
- en: '**[orm]**'
  id: totrans-4324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Flushing of Orphans that have no parent is allowed
  id: totrans-4325
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 允许刷新没有父级的孤立对象
- en: 'References: [#1912](https://www.sqlalchemy.org/trac/ticket/1912)'
  id: totrans-4326
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1912](https://www.sqlalchemy.org/trac/ticket/1912)
- en: '**[orm]**'
  id: totrans-4327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Adjusted flush accounting step to occur before the commit in the case of autocommit=True.
    This allows autocommit=True to work appropriately with expire_on_commit=True,
    and also allows post-flush session hooks to operate in the same transactional
    context as when autocommit=False.
  id: totrans-4328
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了在autocommit=True情况下在提交之前发生的刷新记账步骤。这使得autocommit=True能够与expire_on_commit=True正常工作，并且还允许后刷新会话钩子在与autocommit=False时相同的事务上下文中运行。
- en: 'References: [#2041](https://www.sqlalchemy.org/trac/ticket/2041)'
  id: totrans-4329
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2041](https://www.sqlalchemy.org/trac/ticket/2041)
- en: '**[orm]**'
  id: totrans-4330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Warnings generated when collection members, scalar referents not part of the
    flush
  id: totrans-4331
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在集合成员、标量引用不属于刷新时生成的警告
- en: 'References: [#1973](https://www.sqlalchemy.org/trac/ticket/1973)'
  id: totrans-4332
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1973](https://www.sqlalchemy.org/trac/ticket/1973)
- en: '**[orm]**'
  id: totrans-4333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Non-Table-derived constructs can be mapped
  id: totrans-4334
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 非Table派生构造可以映射
- en: 'References: [#1876](https://www.sqlalchemy.org/trac/ticket/1876)'
  id: totrans-4335
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1876](https://www.sqlalchemy.org/trac/ticket/1876)
- en: '**[orm]**'
  id: totrans-4336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Tuple label names in Query Improved
  id: totrans-4337
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 查询改进中的元组标签名称
- en: 'References: [#1942](https://www.sqlalchemy.org/trac/ticket/1942)'
  id: totrans-4338
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1942](https://www.sqlalchemy.org/trac/ticket/1942)
- en: '**[orm]**'
  id: totrans-4339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Mapped column attributes reference the most specific column first
  id: totrans-4340
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 映射列属性首先引用最具体的列
- en: 'References: [#1892](https://www.sqlalchemy.org/trac/ticket/1892)'
  id: totrans-4341
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1892](https://www.sqlalchemy.org/trac/ticket/1892)
- en: '**[orm]**'
  id: totrans-4342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Mapping to joins with two or more same-named columns requires explicit declaration
  id: totrans-4343
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 映射到具有两个或更多同名列的连接需要明确声明
- en: 'References: [#1896](https://www.sqlalchemy.org/trac/ticket/1896)'
  id: totrans-4344
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1896](https://www.sqlalchemy.org/trac/ticket/1896)
- en: '**[orm]**'
  id: totrans-4345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Mapper requires that polymorphic_on column be present in the mapped selectable
  id: totrans-4346
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 映射器要求在映射的可选择性中存在多态性列
- en: 'References: [#1875](https://www.sqlalchemy.org/trac/ticket/1875)'
  id: totrans-4347
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1875](https://www.sqlalchemy.org/trac/ticket/1875)
- en: '**[orm]**'
  id: totrans-4348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: compile_mappers() renamed configure_mappers(), simplified configuration internals
  id: totrans-4349
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: compile_mappers()重命名为configure_mappers()，简化了配置内部
- en: 'References: [#1966](https://www.sqlalchemy.org/trac/ticket/1966)'
  id: totrans-4350
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1966](https://www.sqlalchemy.org/trac/ticket/1966)
- en: '**[orm]**'
  id: totrans-4351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: the aliased() function, if passed a SQL FromClause element (i.e. not a mapped
    class), will return element.alias() instead of raising an error on AliasedClass.
  id: totrans-4352
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果传递了SQL FromClause元素（即非映射类），aliased()函数将返回element.alias()，而不会在AliasedClass上引发错误。
- en: 'References: [#2018](https://www.sqlalchemy.org/trac/ticket/2018)'
  id: totrans-4353
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2018](https://www.sqlalchemy.org/trac/ticket/2018)
- en: '**[orm]**'
  id: totrans-4354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Session.merge() will check the version id of the incoming state against that
    of the database, assuming the mapping uses version ids and incoming state has
    a version_id assigned, and raise StaleDataError if they don’t match.
  id: totrans-4355
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Session.merge()将检查传入状态的版本id与数据库的版本id是否匹配，假设映射使用版本id并且传入状态已分配了version_id，并且如果它们不匹配，则引发StaleDataError。
- en: 'References: [#2027](https://www.sqlalchemy.org/trac/ticket/2027)'
  id: totrans-4356
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2027](https://www.sqlalchemy.org/trac/ticket/2027)
- en: '**[orm]**'
  id: totrans-4357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Session.connection(), Session.execute() accept ‘bind’, to allow execute/connection
    operations to participate in the open transaction of an engine explicitly.
  id: totrans-4358
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Session.connection()，Session.execute()接受‘bind’，以允许执行/连接操作明确参与引擎的开放事务。
- en: 'References: [#1996](https://www.sqlalchemy.org/trac/ticket/1996)'
  id: totrans-4359
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1996](https://www.sqlalchemy.org/trac/ticket/1996)
- en: '**[orm]**'
  id: totrans-4360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query.join(), Query.outerjoin(), eagerload(), eagerload_all(), others no longer
    allow lists of attributes as arguments (i.e. option([x, y, z]) form, deprecated
    since 0.5)
  id: totrans-4361
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query.join()，Query.outerjoin()，eagerload()，eagerload_all()，其他不再接受属性列表作为参数（即option([x,
    y, z])形式，自0.5版本起已弃用）
- en: '**[orm]**'
  id: totrans-4362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: ScopedSession.mapper is removed (deprecated since 0.5).
  id: totrans-4363
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ScopedSession.mapper已移除（自0.5版起已弃用）。
- en: '**[orm]**'
  id: totrans-4364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Horizontal shard query places ‘shard_id’ in context.attributes where it’s accessible
    by the “load()” event.
  id: totrans-4365
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 水平分片查询将“shard_id”放置在context.attributes中，可以通过“load()”事件访问。
- en: 'References: [#2031](https://www.sqlalchemy.org/trac/ticket/2031)'
  id: totrans-4366
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2031](https://www.sqlalchemy.org/trac/ticket/2031)
- en: '**[orm]**'
  id: totrans-4367
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: A single contains_eager() call across multiple entities will indicate all collections
    along that path should load, instead of requiring distinct contains_eager() calls
    for each endpoint (which was never correctly documented).
  id: totrans-4368
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 跨多个实体进行单个contains_eager()调用将指示沿该路径加载所有集合，而不需要针对每个端点进行不同的contains_eager()调用（这从未被正确记录）。
- en: 'References: [#2032](https://www.sqlalchemy.org/trac/ticket/2032)'
  id: totrans-4369
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2032](https://www.sqlalchemy.org/trac/ticket/2032)
- en: '**[orm]**'
  id: totrans-4370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The “name” field used in orm.aliased() now renders in the resulting SQL statement.
  id: totrans-4371
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: orm.aliased()中使用的“name”字段现在在生成的SQL语句中呈现。
- en: '**[orm]**'
  id: totrans-4372
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Session weak_instance_dict=False is deprecated.
  id: totrans-4373
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Session weak_instance_dict=False已弃用。
- en: 'References: [#1473](https://www.sqlalchemy.org/trac/ticket/1473)'
  id: totrans-4374
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1473](https://www.sqlalchemy.org/trac/ticket/1473)
- en: '**[orm]**'
  id: totrans-4375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: An exception is raised in the unusual case that an append or similar event on
    a collection occurs after the parent object has been dereferenced, which prevents
    the parent from being marked as “dirty” in the session. Was a warning in 0.6.6.
  id: totrans-4376
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在罕见情况下，如果在父对象被取消引用后发生附加或类似事件，则会引发异常，这会阻止将父对象在会话中标记为“脏”。在0.6.6版中是一个警告。
- en: 'References: [#2046](https://www.sqlalchemy.org/trac/ticket/2046)'
  id: totrans-4377
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2046](https://www.sqlalchemy.org/trac/ticket/2046)
- en: '**[orm]**'
  id: totrans-4378
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query.distinct() now accepts column expressions as *args, interpreted by the
    PostgreSQL dialect as DISTINCT ON (<expr>).
  id: totrans-4379
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query.distinct()现在接受列表达式作为*args参数，由PostgreSQL方言解释为DISTINCT ON (<expr>)。
- en: 'References: [#1069](https://www.sqlalchemy.org/trac/ticket/1069)'
  id: totrans-4380
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1069](https://www.sqlalchemy.org/trac/ticket/1069)
- en: '**[orm]**'
  id: totrans-4381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Additional tuning to “many-to-one” relationship loads during a flush(). A change
    in version 0.6.6 ([ticket:2002]) required that more “unnecessary” m2o loads during
    a flush could occur. Extra loading modes have been added so that the SQL emitted
    in this specific use case is trimmed back, while still retrieving the information
    the flush needs in order to not miss anything.
  id: totrans-4382
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在flush()期间进一步调整“多对一”关系加载。0.6.6版本中的更改([ticket:2002])要求在flush期间可能发生更多“不必要的”m2o加载。已添加额外的加载模式，以便在这种特定用例中发出的SQL被修剪回来，同时仍然检索flush需要的信息，以免漏掉任何内容。
- en: 'References: [#2049](https://www.sqlalchemy.org/trac/ticket/2049)'
  id: totrans-4383
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2049](https://www.sqlalchemy.org/trac/ticket/2049)
- en: '**[orm]**'
  id: totrans-4384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: the value of “passive” as passed to attributes.get_history() should be one of
    the constants defined in the attributes package. Sending True or False is deprecated.
  id: totrans-4385
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为传递给 attributes.get_history() 的“被动”值应该是属性包中定义的常量之一。发送 True 或 False 已弃用。
- en: '**[orm]**'
  id: totrans-4386
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added a name argument to Query.subquery(), to allow a fixed name to be assigned
    to the alias object. (also in 0.6.7)
  id: totrans-4387
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 Query.subquery() 添加了一个 name 参数，以允许将固定名称分配给别名对象。（同时也适用于 0.6.7 版）
- en: 'References: [#2030](https://www.sqlalchemy.org/trac/ticket/2030)'
  id: totrans-4388
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2030](https://www.sqlalchemy.org/trac/ticket/2030)
- en: '**[orm]**'
  id: totrans-4389
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: A warning is emitted when a joined-table inheriting mapper has no primary keys
    on the locally mapped table (but has pks on the superclass table). (also in 0.6.7)
  id: totrans-4390
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当一个连接的表继承映射器在本地映射表上没有主键（但在超类表上有主键）时会发出警告。（同时也适用于 0.6.7 版）
- en: 'References: [#2019](https://www.sqlalchemy.org/trac/ticket/2019)'
  id: totrans-4391
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2019](https://www.sqlalchemy.org/trac/ticket/2019)
- en: '**[orm]**'
  id: totrans-4392
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug where “middle” class in a polymorphic hierarchy would have no ‘polymorphic_on’
    column if it didn’t also specify a ‘polymorphic_identity’, leading to strange
    errors upon refresh, wrong class loaded when querying from that target. Also emits
    the correct WHERE criterion when using single table inheritance. (also in 0.6.7)
  id: totrans-4393
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了多态层次结构中的“中间”类如果没有指定“多态标识”则不会有“多态标识”列的错误，导致刷新时出现奇怪的错误，从该目标查询时加载错误的类。还在单表继承时发出正确的
    WHERE 条件。（同时也适用于 0.6.7 版）
- en: 'References: [#2038](https://www.sqlalchemy.org/trac/ticket/2038)'
  id: totrans-4394
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2038](https://www.sqlalchemy.org/trac/ticket/2038)
- en: '**[orm]**'
  id: totrans-4395
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug where a column with a SQL or server side default that was excluded
    from a mapping with include_properties or exclude_properties would result in UnmappedColumnError.
    (also in 0.6.7)
  id: totrans-4396
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了将具有 SQL 或服务器端默认值的列从映射中排除（使用 include_properties 或 exclude_properties）会导致 UnmappedColumnError
    的错误。（同时也适用于 0.6.7 版）
- en: 'References: [#1995](https://www.sqlalchemy.org/trac/ticket/1995)'
  id: totrans-4397
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1995](https://www.sqlalchemy.org/trac/ticket/1995)
- en: '**[orm]**'
  id: totrans-4398
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: A warning is emitted in the unusual case that an append or similar event on
    a collection occurs after the parent object has been dereferenced, which prevents
    the parent from being marked as “dirty” in the session. This will be an exception
    in 0.7\. (also in 0.6.7)
  id: totrans-4399
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在罕见情况下，在父对象被取消引用后发生集合的追加或类似事件时会发出警告，这会阻止将父对象标记为会话中的“脏”对象。这将在 0.7 版中成为异常。（同时也适用于
    0.6.7 版）
- en: 'References: [#2046](https://www.sqlalchemy.org/trac/ticket/2046)'
  id: totrans-4400
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2046](https://www.sqlalchemy.org/trac/ticket/2046)
- en: sql
  id: totrans-4401
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-4402
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added over() function, method to FunctionElement classes, produces the _Over()
    construct which in turn generates “window functions”, i.e. “<window function>
    OVER (PARTITION BY <partition by>, ORDER BY <order by>)”.
  id: totrans-4403
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 over() 函数，作为 FunctionElement 类的方法，生成 _Over() 结构，进而生成“窗口函数”，即“<window function>
    OVER (PARTITION BY <partition by>, ORDER BY <order by>)”。
- en: 'References: [#1844](https://www.sqlalchemy.org/trac/ticket/1844)'
  id: totrans-4404
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1844](https://www.sqlalchemy.org/trac/ticket/1844)
- en: '**[sql]**'
  id: totrans-4405
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: LIMIT/OFFSET clauses now use bind parameters
  id: totrans-4406
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: LIMIT/OFFSET 子句现在使用绑定参数
- en: 'References: [#805](https://www.sqlalchemy.org/trac/ticket/805)'
  id: totrans-4407
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#805](https://www.sqlalchemy.org/trac/ticket/805)
- en: '**[sql]**'
  id: totrans-4408
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: select.distinct() now accepts column expressions as *args, interpreted by the
    PostgreSQL dialect as DISTINCT ON (<expr>). Note this was already available via
    passing a list to the distinct keyword argument to select().
  id: totrans-4409
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: select.distinct() 现在接受列表达式作为 *args，由 PostgreSQL 方言解释为 DISTINCT ON (<expr>)。请注意，通过将列表传递给
    select() 的 distinct 关键字参数已经可以实现这一点。
- en: 'References: [#1069](https://www.sqlalchemy.org/trac/ticket/1069)'
  id: totrans-4410
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1069](https://www.sqlalchemy.org/trac/ticket/1069)
- en: '**[sql]**'
  id: totrans-4411
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: select.prefix_with() accepts multiple expressions (i.e. *expr), ‘prefix’ keyword
    argument to select() accepts a list or tuple.
  id: totrans-4412
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: select.prefix_with() 接受多个表达式（即 *expr），select() 的 ‘prefix’ 关键字参数接受列表或元组。
- en: '**[sql]**'
  id: totrans-4413
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Passing a string to the distinct keyword argument of select() for the purpose
    of emitting special MySQL keywords (DISTINCTROW etc.) is deprecated - use prefix_with()
    for this.
  id: totrans-4414
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将字符串传递给 select() 的 distinct 关键字参数以发出特殊的 MySQL 关键字（DISTINCTROW 等）已弃用 - 为此使用 prefix_with()。
- en: '**[sql]**'
  id: totrans-4415
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: TypeDecorator works with primary key columns
  id: totrans-4416
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: TypeDecorator 与主键列一起使用
- en: 'References: [#2005](https://www.sqlalchemy.org/trac/ticket/2005), [#2006](https://www.sqlalchemy.org/trac/ticket/2006)'
  id: totrans-4417
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2005](https://www.sqlalchemy.org/trac/ticket/2005), [#2006](https://www.sqlalchemy.org/trac/ticket/2006)
- en: '**[sql]**'
  id: totrans-4418
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: DDL() constructs now escape percent signs
  id: totrans-4419
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: DDL() 构造现在转义百分号
- en: 'References: [#1897](https://www.sqlalchemy.org/trac/ticket/1897)'
  id: totrans-4420
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1897](https://www.sqlalchemy.org/trac/ticket/1897)
- en: '**[sql]**'
  id: totrans-4421
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Table.c / MetaData.tables refined a bit, don’t allow direct mutation
  id: totrans-4422
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Table.c / MetaData.tables稍作调整，不允许直接变异
- en: 'References: [#1893](https://www.sqlalchemy.org/trac/ticket/1893), [#1917](https://www.sqlalchemy.org/trac/ticket/1917)'
  id: totrans-4423
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1893](https://www.sqlalchemy.org/trac/ticket/1893), [#1917](https://www.sqlalchemy.org/trac/ticket/1917)
- en: '**[sql]**'
  id: totrans-4424
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Callables passed to bindparam() don’t get evaluated
  id: totrans-4425
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 传递给bindparam()的可调用对象不会被评估
- en: 'References: [#1950](https://www.sqlalchemy.org/trac/ticket/1950)'
  id: totrans-4426
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1950](https://www.sqlalchemy.org/trac/ticket/1950)
- en: '**[sql]**'
  id: totrans-4427
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: types.type_map is now private, types._type_map
  id: totrans-4428
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: types.type_map现在是私有的，types._type_map
- en: 'References: [#1870](https://www.sqlalchemy.org/trac/ticket/1870)'
  id: totrans-4429
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1870](https://www.sqlalchemy.org/trac/ticket/1870)
- en: '**[sql]**'
  id: totrans-4430
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Non-public Pool methods underscored
  id: totrans-4431
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下划线表示非公共Pool方法
- en: 'References: [#1982](https://www.sqlalchemy.org/trac/ticket/1982)'
  id: totrans-4432
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1982](https://www.sqlalchemy.org/trac/ticket/1982)
- en: '**[sql]**'
  id: totrans-4433
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added NULLS FIRST and NULLS LAST support. It’s implemented as an extension to
    the asc() and desc() operators, called nullsfirst() and nullslast().
  id: totrans-4434
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了NULLS FIRST和NULLS LAST支持。它被实现为asc()和desc()运算符的扩展，称为nullsfirst()和nullslast()。
- en: 'References: [#723](https://www.sqlalchemy.org/trac/ticket/723)'
  id: totrans-4435
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#723](https://www.sqlalchemy.org/trac/ticket/723)
- en: '**[sql]**'
  id: totrans-4436
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The Index() construct can be created inline with a Table definition, using strings
    as column names, as an alternative to the creation of the index outside of the
    Table.
  id: totrans-4437
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Index()构造可以与Table定义内联创建，使用字符串作为列名，作为在Table之外创建索引的替代方法。
- en: '**[sql]**'
  id: totrans-4438
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: execution_options() on Connection accepts “isolation_level” argument, sets transaction
    isolation level for that connection only until returned to the connection pool,
    for those backends which support it (SQLite, PostgreSQL)
  id: totrans-4439
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Connection上的execution_options()接受“isolation_level”参数，仅为该连接设置事务隔离级别，直到返回到连接池，对于支持它的后端（SQLite，PostgreSQL）
- en: 'References: [#2001](https://www.sqlalchemy.org/trac/ticket/2001)'
  id: totrans-4440
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2001](https://www.sqlalchemy.org/trac/ticket/2001)
- en: '**[sql]**'
  id: totrans-4441
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: A TypeDecorator of Integer can be used with a primary key column, and the “autoincrement”
    feature of various dialects as well as the “sqlite_autoincrement” flag will honor
    the underlying database type as being Integer-based.
  id: totrans-4442
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以使用Integer的TypeDecorator与主键列一起使用，并且各种方言的“autoincrement”特性以及“sqlite_autoincrement”标志将尊重底层数据库类型为基于Integer的情况。
- en: 'References: [#2005](https://www.sqlalchemy.org/trac/ticket/2005)'
  id: totrans-4443
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2005](https://www.sqlalchemy.org/trac/ticket/2005)
- en: '**[sql]**'
  id: totrans-4444
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Established consistency when server_default is present on an Integer PK column.
    SQLA doesn’t pre-fetch these, nor do they come back in cursor.lastrowid (DBAPI).
    Ensured all backends consistently return None in result.inserted_primary_key for
    these. Regarding reflection for this case, reflection of an int PK col with a
    server_default sets the “autoincrement” flag to False, except in the case of a
    PG SERIAL col where we detected a sequence default.
  id: totrans-4445
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当Integer PK列上存在server_default时确立了一致性。SQLA不会预取这些，它们也不会在cursor.lastrowid（DBAPI）中返回。确保所有后端在这种情况下一致地在result.inserted_primary_key中返回None。关于此情况的反射，具有server_default的int
    PK列的反射将“autoincrement”标志设置为False，除了在检测到序列默认值的PG SERIAL列的情况下。
- en: 'References: [#2020](https://www.sqlalchemy.org/trac/ticket/2020), [#2021](https://www.sqlalchemy.org/trac/ticket/2021)'
  id: totrans-4446
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2020](https://www.sqlalchemy.org/trac/ticket/2020), [#2021](https://www.sqlalchemy.org/trac/ticket/2021)
- en: '**[sql]**'
  id: totrans-4447
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Result-row processors are applied to pre-executed SQL defaults, as well as cursor.lastrowid,
    when determining the contents of result.inserted_primary_key.
  id: totrans-4448
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在确定result.inserted_primary_key的内容时，结果行处理器应用于预执行的SQL默认值，以及cursor.lastrowid。
- en: 'References: [#2006](https://www.sqlalchemy.org/trac/ticket/2006)'
  id: totrans-4449
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2006](https://www.sqlalchemy.org/trac/ticket/2006)
- en: '**[sql]**'
  id: totrans-4450
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Bind parameters present in the “columns clause” of a select are now auto-labeled
    like other “anonymous” clauses, which among other things allows their “type” to
    be meaningful when the row is fetched, as in result row processors.
  id: totrans-4451
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在select的“columns clause”中存在的绑定参数现在像其他“匿名”子句一样自动标记，这样在获取行时它们的“type”就有意义，就像结果行处理器一样。
- en: '**[sql]**'
  id: totrans-4452
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: TypeDecorator is present in the “sqlalchemy” import space.
  id: totrans-4453
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: TypeDecorator存在于“sqlalchemy”导入空间中。
- en: '**[sql]**'
  id: totrans-4454
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Non-DBAPI errors which occur in the scope of an execute() call are now wrapped
    in sqlalchemy.exc.StatementError, and the text of the SQL statement and repr()
    of params is included. This makes it easier to identify statement executions which
    fail before the DBAPI becomes involved.
  id: totrans-4455
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在执行（execute()）调用范围内发生的非DBAPI错误现在被包装在sqlalchemy.exc.StatementError中，并包含SQL语句的文本和params的repr()。这样可以更容易地识别在DBAPI介入之前失败的语句执行。
- en: 'References: [#2015](https://www.sqlalchemy.org/trac/ticket/2015)'
  id: totrans-4456
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2015](https://www.sqlalchemy.org/trac/ticket/2015)
- en: '**[sql]**'
  id: totrans-4457
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The concept of associating a “.bind” directly with a ClauseElement has been
    explicitly moved to Executable, i.e. the mixin that describes ClauseElements which
    represent engine-executable constructs. This change is an improvement to internal
    organization and is unlikely to affect any real-world usage.
  id: totrans-4458
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将“.bind”直接与ClauseElement关联的概念明确地移动到Executable，即描述表示引擎可执行构造的ClauseElement的mixin。这一变化是对内部组织的改进，不太可能影响任何实际使用。
- en: 'References: [#2048](https://www.sqlalchemy.org/trac/ticket/2048)'
  id: totrans-4459
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2048](https://www.sqlalchemy.org/trac/ticket/2048)
- en: '**[sql]**'
  id: totrans-4460
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Column.copy(), as used in table.tometadata(), copies the ‘doc’ attribute. (also
    in 0.6.7)
  id: totrans-4461
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Column.copy()，在table.tometadata()中使用，复制了‘doc’属性。（也适用于0.6.7版本）
- en: 'References: [#2028](https://www.sqlalchemy.org/trac/ticket/2028)'
  id: totrans-4462
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2028](https://www.sqlalchemy.org/trac/ticket/2028)
- en: '**[sql]**'
  id: totrans-4463
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added some defs to the resultproxy.c extension so that the extension compiles
    and runs on Python 2.4\. (also in 0.6.7)
  id: totrans-4464
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向resultproxy.c扩展添加了一些defs，以便该扩展在Python 2.4上编译和运行。（也适用于0.6.7版本）
- en: 'References: [#2023](https://www.sqlalchemy.org/trac/ticket/2023)'
  id: totrans-4465
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2023](https://www.sqlalchemy.org/trac/ticket/2023)
- en: '**[sql]**'
  id: totrans-4466
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The compiler extension now supports overriding the default compilation of expression._BindParamClause
    including that the auto-generated binds within the VALUES/SET clause of an insert()/update()
    statement will also use the new compilation rules. (also in 0.6.7)
  id: totrans-4467
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 编译器扩展现在支持覆盖默认的表达式编译。_BindParamClause，包括在insert()/update()语句的VALUES/SET子句中自动生成的绑定也将使用新的编译规则。（也适用于0.6.7版本）
- en: 'References: [#2042](https://www.sqlalchemy.org/trac/ticket/2042)'
  id: totrans-4468
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2042](https://www.sqlalchemy.org/trac/ticket/2042)
- en: '**[sql]**'
  id: totrans-4469
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: SQLite dialect now uses NullPool for file-based databases
  id: totrans-4470
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLite方言现在对基于文件的数据库使用NullPool
- en: 'References: [#1921](https://www.sqlalchemy.org/trac/ticket/1921)'
  id: totrans-4471
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1921](https://www.sqlalchemy.org/trac/ticket/1921)
- en: '**[sql]**'
  id: totrans-4472
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The path given as the location of a sqlite database is now normalized via os.path.abspath(),
    so that directory changes within the process don’t affect the ultimate location
    of a relative file path.
  id: totrans-4473
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在通过os.path.abspath()对作为sqlite数据库位置的路径进行规范化，以便进程内的目录更改不会影响相对文件路径的最终位置。
- en: 'References: [#2036](https://www.sqlalchemy.org/trac/ticket/2036)'
  id: totrans-4474
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2036](https://www.sqlalchemy.org/trac/ticket/2036)
- en: postgresql
  id: totrans-4475
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql]**'
  id: totrans-4476
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: When explicit sequence execution derives the name of the auto-generated sequence
    of a SERIAL column, which currently only occurs if implicit_returning=False, now
    accommodates if the table + column name is greater than 63 characters using the
    same logic PostgreSQL uses. (also in 0.6.7)
  id: totrans-4477
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当显式序列执行推导出SERIAL列的自动生成序列的名称时，当前仅在implicit_returning=False时发生，现在使用与PostgreSQL相同的逻辑，如果表名+列名大于63个字符。
    （也适用于0.6.7版本）
- en: 'References: [#1083](https://www.sqlalchemy.org/trac/ticket/1083)'
  id: totrans-4478
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1083](https://www.sqlalchemy.org/trac/ticket/1083)
- en: '**[postgresql]**'
  id: totrans-4479
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Added an additional libpq message to the list of “disconnect” exceptions, “could
    not receive data from server” (also in 0.6.7)
  id: totrans-4480
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将“从服务器接收数据失败”添加到“断开连接”异常列表中的其他libpq消息（也适用于0.6.7版本）
- en: 'References: [#2044](https://www.sqlalchemy.org/trac/ticket/2044)'
  id: totrans-4481
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2044](https://www.sqlalchemy.org/trac/ticket/2044)
- en: mysql
  id: totrans-4482
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-4483
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: New DBAPI support for pymysql, a pure Python port of MySQL-python.
  id: totrans-4484
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新的DBAPI支持pymysql，这是MySQL-python的纯Python移植。
- en: 'References: [#1991](https://www.sqlalchemy.org/trac/ticket/1991)'
  id: totrans-4485
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1991](https://www.sqlalchemy.org/trac/ticket/1991)
- en: '**[mysql]**'
  id: totrans-4486
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: oursql dialect accepts the same “ssl” arguments in create_engine() as that of
    MySQLdb. (also in 0.6.7)
  id: totrans-4487
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: oursql方言在create_engine()中接受与MySQLdb相同的“ssl”参数。（也适用于0.6.7版本）
- en: 'References: [#2047](https://www.sqlalchemy.org/trac/ticket/2047)'
  id: totrans-4488
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2047](https://www.sqlalchemy.org/trac/ticket/2047)
- en: mssql
  id: totrans-4489
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-4490
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: the String/Unicode types, and their counterparts VARCHAR/ NVARCHAR, emit “max”
    as the length when no length is specified, so that the default length, normally
    ‘1’ as per SQL server documentation, is instead ‘unbounded’. This also occurs
    for the VARBINARY type..
  id: totrans-4491
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: String/Unicode类型及其对应的VARCHAR/NVARCHAR类型在未指定长度时会将“max”作为长度发出，因此默认长度，通常根据SQL服务器文档为‘1’，现在改为‘无限制’。对于VARBINARY类型也是如此。
- en: This behavior makes these types more closely compatible with PostgreSQL’s VARCHAR
    type which is similarly unbounded when no length is specified.
  id: totrans-4492
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这种行为使这些类型更加与PostgreSQL的VARCHAR类型兼容，当未指定长度时也是无限制的。
- en: 'References: [#1833](https://www.sqlalchemy.org/trac/ticket/1833)'
  id: totrans-4493
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1833](https://www.sqlalchemy.org/trac/ticket/1833)
- en: misc
  id: totrans-4494
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[no_tags]**'
  id: totrans-4495
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: 'Detailed descriptions of each change below are described at: [https://docs.sqlalchemy.org/en/latest/changelog/migration_07.html](https://docs.sqlalchemy.org/en/latest/changelog/migration_07.html)'
  id: totrans-4496
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下是每个更改的详细描述：[https://docs.sqlalchemy.org/en/latest/changelog/migration_07.html](https://docs.sqlalchemy.org/en/latest/changelog/migration_07.html)
- en: '**[declarative]**'
  id: totrans-4497
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[声明性]**'
- en: Added an explicit check for the case that the name ‘metadata’ is used for a
    column attribute on a declarative class. (also in 0.6.7)
  id: totrans-4498
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个显式检查，以防止在声明性类上使用名称‘metadata’作为列属性的情况。（也在0.6.7中）
- en: 'References: [#2050](https://www.sqlalchemy.org/trac/ticket/2050)'
  id: totrans-4499
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2050](https://www.sqlalchemy.org/trac/ticket/2050)
- en: '**[firebird]**'
  id: totrans-4500
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[火鸟]**'
- en: Some adjustments so that Interbase is supported as well. FB/Interbase version
    idents are parsed into a structure such as (8, 1, 1, ‘interbase’) or (2, 1, 588,
    ‘firebird’) so they can be distinguished.
  id: totrans-4501
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 进行了一些调整，以支持Interbase。 FB/Interbase版本标识被解析成一个结构，如（8, 1, 1, ‘interbase’）或（2, 1,
    588, ‘firebird’），以便它们可以被区分。
- en: 'References: [#1885](https://www.sqlalchemy.org/trac/ticket/1885)'
  id: totrans-4502
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1885](https://www.sqlalchemy.org/trac/ticket/1885)
