- en: Reflecting Database Objects
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 反射数据库对象
- en: 原文：[https://docs.sqlalchemy.org/en/20/core/reflection.html](https://docs.sqlalchemy.org/en/20/core/reflection.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/core/reflection.html](https://docs.sqlalchemy.org/en/20/core/reflection.html)
- en: 'A [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object can be instructed to load information about itself from the corresponding
    database schema object already existing within the database. This process is called
    *reflection*. In the most simple case you need only specify the table name, a
    [`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    object, and the `autoload_with` argument:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 可以命令[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象从数据库中已经存在的相应数据库架构对象中加载关于自身的信息。这个过程称为*反射*。在最简单的情况下，您只需要指定表名、一个[`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")对象和`autoload_with`参数：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The above operation will use the given engine to query the database for information
    about the `messages` table, and will then generate [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"), [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey"), and other objects corresponding to this information
    as though the [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object were hand-constructed in Python.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 上述操作将使用给定的引擎来查询有关`messages`表格的数据库信息，然后将生成[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")、[`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey")和其他对象，这些对象对应于此信息，就像[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象在Python中手工构造一样。
- en: 'When tables are reflected, if a given table references another one via foreign
    key, a second [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object is created within the [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object representing the connection. Below, assume
    the table `shopping_cart_items` references a table named `shopping_carts`. Reflecting
    the `shopping_cart_items` table has the effect such that the `shopping_carts`
    table will also be loaded:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 当表格被反射时，如果给定的表格通过外键引用另一个表格，那么在表示连接的[`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")对象中将创建第二个 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象。下面假设表格`shopping_cart_items`引用了一个名为`shopping_carts`的表格。反射`shopping_cart_items`表格的效果是`shopping_carts`表格也将被加载：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The [`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    has an interesting “singleton-like” behavior such that if you requested both tables
    individually, [`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    will ensure that exactly one [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object is created for each distinct table name. The [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") constructor actually returns to you the already-existing
    [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table") object
    if one already exists with the given name. Such as below, we can access the already
    generated `shopping_carts` table just by naming it:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")具有一种有趣的“类单例”行为，即如果您单独请求了两个表格，[`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")将确保为每个不同的表名创建一个 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象。如果具有给定名称的表格已经存在，则[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")构造函数实际上会将已经存在的[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象返回给您。例如，我们可以通过以下方式访问已经生成的`shopping_carts`表格：'
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Of course, it’s a good idea to use `autoload_with=engine` with the above table
    regardless. This is so that the table’s attributes will be loaded if they have
    not been already. The autoload operation only occurs for the table if it hasn’t
    already been loaded; once loaded, new calls to [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") with the same name will not re-issue any reflection
    queries.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，无论如何，最好在上述表格中使用`autoload_with=engine`。这样，如果尚未加载表格的属性，它们将被加载。只有在尚未加载表格的情况下才会自动加载表格；一旦加载，对于具有相同名称的新调用[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")将不会重新发出任何反射查询。
- en: '## Overriding Reflected Columns'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '## 覆盖反射的列'
- en: 'Individual columns can be overridden with explicit values when reflecting tables;
    this is handy for specifying custom datatypes, constraints such as primary keys
    that may not be configured within the database, etc.:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当反映表格时，可以通过显式值覆盖单个列；这对于指定自定义数据类型、数据库中可能未配置的主键等约束非常方便：
- en: '[PRE3]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: See also
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Working with Custom Types and Reflection](custom_types.html#custom-and-decorated-types-reflection)
    - illustrates how the above column override technique applies to the use of custom
    datatypes with table reflection.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用自定义类型和反射](custom_types.html#custom-and-decorated-types-reflection) - 说明了上述列覆盖技术如何应用于使用自定义数据类型进行表反射。'
- en: Reflecting Views
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 反射视图
- en: 'The reflection system can also reflect views. Basic usage is the same as that
    of a table:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 反射系统也可以反射视图。基本用法与表的用法相同：
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Above, `my_view` is a [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object with [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    objects representing the names and types of each column within the view “some_view”.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面，`my_view` 是一个具有 [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    对象的 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    对象，表示视图“some_view”中每列的名称和类型。
- en: Usually, it’s desired to have at least a primary key constraint when reflecting
    a view, if not foreign keys as well. View reflection doesn’t extrapolate these
    constraints.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在反映视图时，至少希望有一个主键约束，如果可能的话，也有外键。视图反射不会推断这些约束。
- en: 'Use the “override” technique for this, specifying explicitly those columns
    which are part of the primary key or have foreign key constraints:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 使用“覆盖”技术，明确指定那些是主键的列或具有外键约束的列：
- en: '[PRE5]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Reflecting All Tables at Once
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一次性反射所有表格
- en: 'The [`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    object can also get a listing of tables and reflect the full set. This is achieved
    by using the [`reflect()`](metadata.html#sqlalchemy.schema.MetaData.reflect "sqlalchemy.schema.MetaData.reflect")
    method. After calling it, all located tables are present within the [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object’s dictionary of tables:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    对象还可以获取表的列表并反映全部。这通过使用 [`reflect()`](metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") 方法实现。调用后，所有定位的表格都存在于 [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") 对象的表字典中：'
- en: '[PRE6]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`metadata.reflect()` also provides a handy way to clear or delete all the rows
    in a database:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`metadata.reflect()` 还提供了一种方便的方式来清除或删除数据库中的所有行：'
- en: '[PRE7]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '## Reflecting Tables from Other Schemas'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '## 从其他架构中反射表格'
- en: The section [Specifying the Schema Name](metadata.html#schema-table-schema-name)
    introduces the concept of table schemas, which are namespaces within a database
    that contain tables and other objects, and which can be specified explicitly.
    The “schema” for a [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object, as well as for other objects like views, indexes and sequences, can be
    set up using the [`Table.schema`](metadata.html#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table") parameter, and also as the default schema for a [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object using the [`MetaData.schema`](metadata.html#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData") parameter.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 章节 [指定架构名称](metadata.html#schema-table-schema-name) 介绍了表架构的概念，这是数据库中包含表和其他对象的命名空间，可以明确指定。[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 对象的“架构”，以及视图、索引和序列等其他对象的“架构”，可以使用 [`Table.schema`](metadata.html#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table") 参数进行设置，也可以使用 [`MetaData.schema`](metadata.html#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData") 参数作为 [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") 对象的默认架构。
- en: 'The use of this schema parameter directly affects where the table reflection
    feature will look when it is asked to reflect objects. For example, given a [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object configured with a default schema name “project”
    via its [`MetaData.schema`](metadata.html#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData") parameter:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 此架构参数的使用直接影响表反射功能在被要求反射对象时的搜索位置。例如，给定通过其 [`MetaData.schema`](metadata.html#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData") 参数配置了默认架构名称“project”的 [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") 对象：
- en: '[PRE8]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The [`MetaData.reflect()`](metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") will then utilize that configured `.schema`
    for reflection:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，[`MetaData.reflect()`](metadata.html#sqlalchemy.schema.MetaData.reflect "sqlalchemy.schema.MetaData.reflect")将利用配置的`.schema`进行反射：
- en: '[PRE9]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The end result is that [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects from the “project” schema will be reflected, and they will be populated
    as schema-qualified with that name:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 最终结果是，来自“project”模式的[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象将被反映出来，并且它们将以该名称作为模式限定进行填充：
- en: '[PRE10]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Similarly, an individual [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object that includes the [`Table.schema`](metadata.html#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table") parameter will also be reflected from that database
    schema, overriding any default schema that may have been configured on the owning
    [`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    collection:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，包括[`Table.schema`](metadata.html#sqlalchemy.schema.Table.params.schema "sqlalchemy.schema.Table")参数的单个[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象也将从该数据库模式反映出来，覆盖可能已经在拥有的[`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")集合上配置的任何默认模式：
- en: '[PRE11]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Finally, the [`MetaData.reflect()`](metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") method itself also allows a [`MetaData.reflect.schema`](metadata.html#sqlalchemy.schema.MetaData.reflect.params.schema
    "sqlalchemy.schema.MetaData.reflect") parameter to be passed, so we could also
    load tables from the “project” schema for a default configured [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，[`MetaData.reflect()`](metadata.html#sqlalchemy.schema.MetaData.reflect "sqlalchemy.schema.MetaData.reflect")方法本身也允许传递一个[`MetaData.reflect.schema`](metadata.html#sqlalchemy.schema.MetaData.reflect.params.schema
    "sqlalchemy.schema.MetaData.reflect")参数，因此我们也可以为默认配置的[`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")对象从“project”模式加载表：
- en: '[PRE12]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We can call [`MetaData.reflect()`](metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") any number of times with different [`MetaData.schema`](metadata.html#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData") arguments (or none at all) to continue populating
    the [`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    object with more objects:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用不同的[`MetaData.schema`](metadata.html#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData")参数（或者完全不使用）任意多次调用[`MetaData.reflect()`](metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect")，以继续用更多对象填充[`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")对象：
- en: '[PRE13]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '### Interaction of Schema-qualified Reflection with the Default Schema'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '### 与默认模式交互的模式限定反射'
- en: Section Best Practices Summarized
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 最佳实践总结部分
- en: In this section, we discuss SQLAlchemy’s reflection behavior regarding tables
    that are visible in the “default schema” of a database session, and how these
    interact with SQLAlchemy directives that include the schema explicitly. As a best
    practice, ensure the “default” schema for a database is just a single name, and
    not a list of names; for tables that are part of this “default” schema and can
    be named without schema qualification in DDL and SQL, leave corresponding [`Table.schema`](metadata.html#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table") and similar schema parameters set to their default
    of `None`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们讨论了SQLAlchemy关于数据库会话中“默认模式”可见的表的反射行为，以及这些如何与明确包含模式的SQLAlchemy指令相互作用。作为最佳实践，请确保数据库的“默认”模式只是一个单一名称，而不是名称列表；对于属于此“默认”模式并且可以在DDL和SQL中不带模式限定命名的表，请将相应的[`Table.schema`](metadata.html#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table")和类似的模式参数设置为它们的默认值`None`。
- en: As described at [Specifying a Default Schema Name with MetaData](metadata.html#schema-metadata-schema-name),
    databases that have the concept of schemas usually also include the concept of
    a “default” schema. The reason for this is naturally that when one refers to table
    objects without a schema as is common, a schema-capable database will still consider
    that table to be in a “schema” somewhere. Some databases such as PostgreSQL take
    this concept further into the notion of a [schema search path](https://www.postgresql.org/docs/current/static/ddl-schemas.html#DDL-SCHEMAS-PATH)
    where *multiple* schema names can be considered in a particular database session
    to be “implicit”; referring to a table name that it’s any of those schemas will
    not require that the schema name be present (while at the same time it’s also
    perfectly fine if the schema name *is* present).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如 [在 MetaData 中指定默认模式名称](metadata.html#schema-metadata-schema-name) 中所述，具有模式概念的数据库通常还包括“默认”模式的概念。这自然是因为当引用没有模式的表对象时（这是常见的情况），支持模式的数据库仍然会认为该表在某处存在“模式”。一些数据库，如
    PostgreSQL，将这个概念进一步扩展为 [模式搜索路径](https://www.postgresql.org/docs/current/static/ddl-schemas.html#DDL-SCHEMAS-PATH)，在特定数据库会话中可以考虑多个模式名称为“隐式”；引用其中任何一个模式中的表名都不需要存在模式名称（与此同时，如果模式名称存在，则也是完全可以的）。
- en: Since most relational databases therefore have the concept of a particular table
    object which can be referenced both in a schema-qualified way, as well as an “implicit”
    way where no schema is present, this presents a complexity for SQLAlchemy’s reflection
    feature. Reflecting a table in a schema-qualified manner will always populate
    its [`Table.schema`](metadata.html#sqlalchemy.schema.Table.schema "sqlalchemy.schema.Table.schema")
    attribute and additionally affect how this [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") is organized into the [`MetaData.tables`](metadata.html#sqlalchemy.schema.MetaData.tables
    "sqlalchemy.schema.MetaData.tables") collection, that is, in a schema qualified
    manner. Conversely, reflecting the **same** table in a non-schema qualified manner
    will organize it into the [`MetaData.tables`](metadata.html#sqlalchemy.schema.MetaData.tables
    "sqlalchemy.schema.MetaData.tables") collection **without** being schema qualified.
    The end result is that there would be two separate [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects in the single [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") collection representing the same table in the actual
    database.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 由于大多数关系型数据库都有特定的表对象概念，可以以模式限定的方式引用，也可以以“隐式”方式引用，即没有模式存在，这给 SQLAlchemy 的反射特性带来了复杂性。以模式限定方式反射表将始终填充其
    [`Table.schema`](metadata.html#sqlalchemy.schema.Table.schema "sqlalchemy.schema.Table.schema")
    属性，并且会影响此 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    如何组织到 [`MetaData.tables`](metadata.html#sqlalchemy.schema.MetaData.tables "sqlalchemy.schema.MetaData.tables")
    集合中，也就是以模式限定方式。相反，以非模式限定方式反射 **同样的** 表将使其以非模式限定方式组织到 [`MetaData.tables`](metadata.html#sqlalchemy.schema.MetaData.tables
    "sqlalchemy.schema.MetaData.tables") 集合中。最终的结果是，单个 [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") 集合中将存在两个独立的表示实际数据库中同一表的 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 对象。
- en: 'To illustrate the ramifications of this issue, consider tables from the “project”
    schema in the previous example, and suppose also that the “project” schema is
    the default schema of our database connection, or if using a database such as
    PostgreSQL suppose the “project” schema is set up in the PostgreSQL `search_path`.
    This would mean that the database accepts the following two SQL statements as
    equivalent:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明这个问题的影响，考虑前面示例中“project”模式中的表，并假设“project”模式也是我们数据库连接的默认模式，或者如果使用 PostgreSQL
    等数据库，则假设“project”模式设置在 PostgreSQL 的 `search_path` 中。这意味着数据库接受以下两个 SQL 语句作为等价：
- en: '[PRE14]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This is not a problem as the table can be found in both ways. However in SQLAlchemy,
    it’s the **identity** of the [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object that determines its semantic role within a SQL statement. Based on the
    current decisions within SQLAlchemy, this means that if we reflect the same “messages”
    table in both a schema-qualified as well as a non-schema qualified manner, we
    get **two** [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects that will **not** be treated as semantically equivalent:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在SQLAlchemy中，这并不是一个问题，因为可以以两种方式找到表。但是，在SQLAlchemy中，是[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象的**标识**决定了它在SQL语句中的语义角色。基于SQLAlchemy当前的决策，这意味着如果我们以模式限定的方式和非模式限定的方式反射相同的“messages”表，我们将得到**两个**不会被视为语义等同的[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象：
- en: '[PRE15]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The above issue becomes more complicated when the tables being reflected contain
    foreign key references to other tables. Suppose “messages” has a “project_id”
    column which refers to rows in another schema-local table “projects”, meaning
    there is a [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") object that is part of the definition
    of the “messages” table.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当被反映的表包含对其他表的外键引用时，上述问题变得更加复杂。假设“messages”有一个“project_id”列，它引用另一个模式本地表“projects”的行，这意味着“messages”表的定义中有一个[`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")对象。
- en: We can find ourselves in a situation where one [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") collection may contain as many as four [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects representing these two database tables, where
    one or two of the additional tables were generated by the reflection process;
    this is because when the reflection process encounters a foreign key constraint
    on a table being reflected, it branches out to reflect that referenced table as
    well. The decision making it uses to assign the schema to this referenced table
    is that SQLAlchemy will **omit a default schema** from the reflected [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") object if the owning [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") also omits its schema name and also that these two
    objects are in the same schema, but will **include** it if it were not omitted.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能会发现自己处于一个情况下，其中一个[`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")集合可能包含表示这两个数据库表的四个[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象，其中一个或两个附加表是由反射过程生成的；这是因为当反射过程遇到要反射的表上的外键约束时，它会分支出去反射该引用表。它用于为这个引用表分配模式的决策是，如果拥有的[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")也省略了其模式名称，并且这两个对象位于相同的模式中，则SQLAlchemy将**省略默认模式**从反射的[`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")对象中，但如果没有省略，则**包括**它。
- en: 'The common scenario is when the reflection of a table in a schema qualified
    fashion then loads a related table that will also be performed in a schema qualified
    fashion:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 常见的情况是以模式限定的方式反射表，然后以模式限定的方式加载一个相关表：
- en: '[PRE16]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The above `messages_table_1` will refer to `projects` also in a schema qualified
    fashion. This “projects” table will be reflected automatically by the fact that
    “messages” refers to it:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 上述`messages_table_1`也将以模式限定的方式引用`projects`。这个“projects”表将自动反映出“messages”引用它的事实：
- en: '[PRE17]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'if some other part of the code reflects “projects” in a non-schema qualified
    fashion, there are now two projects tables that are not the same:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果代码的其他部分以非模式限定的方式反映“projects”，那么现在有两个不同的项目表：
- en: '[PRE18]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The above confusion can cause problems within applications that use table reflection
    to load up application-level [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects, as well as within migration scenarios, in particular such as when using
    Alembic Migrations to detect new tables and foreign key constraints.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 上述混淆可能会在使用表反射加载应用程序级[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象的应用程序中以及在迁移场景中（尤其是使用Alembic
    Migrations检测新表和外键约束时）引起问题。
- en: 'The above behavior can be remedied by sticking to one simple practice:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 以上行为可以通过坚持一项简单的做法来纠正：
- en: Don’t include the [`Table.schema`](metadata.html#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table") parameter for any [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") that expects to be located in the **default** schema
    of the database.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于期望位于数据库**默认**模式中的任何[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")，不要包含[`Table.schema`](metadata.html#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table")参数。
- en: 'For PostgreSQL and other databases that support a “search” path for schemas,
    add the following additional practice:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 对于支持模式“搜索”路径的 PostgreSQL 和其他数据库，添加以下额外做法：
- en: Keep the “search path” narrowed down to **one schema only, which is the default
    schema**.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将“搜索路径”限定为**仅一个模式，即默认模式**。
- en: See also
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Remote-Schema Table Introspection and PostgreSQL search_path](../dialects/postgresql.html#postgresql-schema-reflection)
    - additional details of this behavior as regards the PostgreSQL database.  ##
    Fine Grained Reflection with Inspector'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '[远程模式表反射和 PostgreSQL 搜索路径](../dialects/postgresql.html#postgresql-schema-reflection)
    - 关于 PostgreSQL 数据库的此行为的附加细节。## 使用检查器进行精细化反射'
- en: 'A low level interface which provides a backend-agnostic system of loading lists
    of schema, table, column, and constraint descriptions from a given database is
    also available. This is known as the “Inspector”:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 还提供了一个低级接口，它提供了一种与后端无关的从给定数据库加载模式、表、列和约束描述列表的系统。这被称为“检查器”：
- en: '[PRE22]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '| Object Name | Description |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [Inspector](#sqlalchemy.engine.reflection.Inspector) | Performs database
    schema inspection. |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| [Inspector](#sqlalchemy.engine.reflection.Inspector) | 执行数据库模式检查。 |'
- en: '| [ReflectedCheckConstraint](#sqlalchemy.engine.interfaces.ReflectedCheckConstraint)
    | Dictionary representing the reflected elements corresponding to [`CheckConstraint`](constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint"). |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| [ReflectedCheckConstraint](#sqlalchemy.engine.interfaces.ReflectedCheckConstraint)
    | 表示与[`CheckConstraint`](constraints.html#sqlalchemy.schema.CheckConstraint "sqlalchemy.schema.CheckConstraint")对应的反射元素的字典。
    |'
- en: '| [ReflectedColumn](#sqlalchemy.engine.interfaces.ReflectedColumn) | Dictionary
    representing the reflected elements corresponding to a [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") object. |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| [ReflectedColumn](#sqlalchemy.engine.interfaces.ReflectedColumn) | 表示与[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象对应的反射元素的字典。 |'
- en: '| [ReflectedComputed](#sqlalchemy.engine.interfaces.ReflectedComputed) | Represent
    the reflected elements of a computed column, corresponding to the [`Computed`](defaults.html#sqlalchemy.schema.Computed
    "sqlalchemy.schema.Computed") construct. |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| [ReflectedComputed](#sqlalchemy.engine.interfaces.ReflectedComputed) | 表示计算列的反射元素，对应于[`Computed`](defaults.html#sqlalchemy.schema.Computed
    "sqlalchemy.schema.Computed")构造。 |'
- en: '| [ReflectedForeignKeyConstraint](#sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint)
    | Dictionary representing the reflected elements corresponding to [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint"). |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| [ReflectedForeignKeyConstraint](#sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint)
    | 表示与[`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")对应的反射元素的字典。 |'
- en: '| [ReflectedIdentity](#sqlalchemy.engine.interfaces.ReflectedIdentity) | represent
    the reflected IDENTITY structure of a column, corresponding to the [`Identity`](defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity") construct. |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| [ReflectedIdentity](#sqlalchemy.engine.interfaces.ReflectedIdentity) | 表示列的反射
    IDENTITY 结构，对应于[`Identity`](defaults.html#sqlalchemy.schema.Identity "sqlalchemy.schema.Identity")构造。
    |'
- en: '| [ReflectedIndex](#sqlalchemy.engine.interfaces.ReflectedIndex) | Dictionary
    representing the reflected elements corresponding to [`Index`](constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index"). |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| [ReflectedIndex](#sqlalchemy.engine.interfaces.ReflectedIndex) | 表示与[`Index`](constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")对应的反射元素的字典。 |'
- en: '| [ReflectedPrimaryKeyConstraint](#sqlalchemy.engine.interfaces.ReflectedPrimaryKeyConstraint)
    | Dictionary representing the reflected elements corresponding to [`PrimaryKeyConstraint`](constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint"). |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| [ReflectedPrimaryKeyConstraint](#sqlalchemy.engine.interfaces.ReflectedPrimaryKeyConstraint)
    | 表示与[`PrimaryKeyConstraint`](constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint")对应的反射元素的字典。 |'
- en: '| [ReflectedTableComment](#sqlalchemy.engine.interfaces.ReflectedTableComment)
    | Dictionary representing the reflected comment corresponding to the `Table.comment`
    attribute. |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| [ReflectedTableComment](#sqlalchemy.engine.interfaces.ReflectedTableComment)
    | 表示对应于`Table.comment`属性的反射注释的字典。 |'
- en: '| [ReflectedUniqueConstraint](#sqlalchemy.engine.interfaces.ReflectedUniqueConstraint)
    | Dictionary representing the reflected elements corresponding to [`UniqueConstraint`](constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint"). |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| [ReflectedUniqueConstraint](#sqlalchemy.engine.interfaces.ReflectedUniqueConstraint)
    | 表示对应于[`UniqueConstraint`](constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint")的反射元素的字典。 |'
- en: '[PRE23]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Performs database schema inspection.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 执行数据库模式检查。
- en: The Inspector acts as a proxy to the reflection methods of the [`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect"), providing a consistent interface as well
    as caching support for previously fetched metadata.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Inspector 充当[`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.interfaces.Dialect")的反射方法的代理，提供一致的接口以及对先前获取的元数据的缓存支持。
- en: 'A [`Inspector`](#sqlalchemy.engine.reflection.Inspector "sqlalchemy.engine.reflection.Inspector")
    object is usually created via the [`inspect()`](inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect") function, which may be passed an [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") or a [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"):'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Inspector`](#sqlalchemy.engine.reflection.Inspector "sqlalchemy.engine.reflection.Inspector")
    对象通常通过[`inspect()`](inspection.html#sqlalchemy.inspect "sqlalchemy.inspect")函数创建，该函数可以传递一个[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")或一个[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")：'
- en: '[PRE24]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Where above, the [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.interfaces.Dialect")
    associated with the engine may opt to return an [`Inspector`](#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector") subclass that provides additional methods
    specific to the dialect’s target database.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述情况中，与引擎关联的[`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.interfaces.Dialect")可能选择返回一个提供了特定于方言目标数据库的额外方法的[`Inspector`](#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector")子类。
- en: '**Members**'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.engine.reflection.Inspector.__init__), [bind](#sqlalchemy.engine.reflection.Inspector.bind),
    [clear_cache()](#sqlalchemy.engine.reflection.Inspector.clear_cache), [default_schema_name](#sqlalchemy.engine.reflection.Inspector.default_schema_name),
    [dialect](#sqlalchemy.engine.reflection.Inspector.dialect), [engine](#sqlalchemy.engine.reflection.Inspector.engine),
    [from_engine()](#sqlalchemy.engine.reflection.Inspector.from_engine), [get_check_constraints()](#sqlalchemy.engine.reflection.Inspector.get_check_constraints),
    [get_columns()](#sqlalchemy.engine.reflection.Inspector.get_columns), [get_foreign_keys()](#sqlalchemy.engine.reflection.Inspector.get_foreign_keys),
    [get_indexes()](#sqlalchemy.engine.reflection.Inspector.get_indexes), [get_materialized_view_names()](#sqlalchemy.engine.reflection.Inspector.get_materialized_view_names),
    [get_multi_check_constraints()](#sqlalchemy.engine.reflection.Inspector.get_multi_check_constraints),
    [get_multi_columns()](#sqlalchemy.engine.reflection.Inspector.get_multi_columns),
    [get_multi_foreign_keys()](#sqlalchemy.engine.reflection.Inspector.get_multi_foreign_keys),
    [get_multi_indexes()](#sqlalchemy.engine.reflection.Inspector.get_multi_indexes),
    [get_multi_pk_constraint()](#sqlalchemy.engine.reflection.Inspector.get_multi_pk_constraint),
    [get_multi_table_comment()](#sqlalchemy.engine.reflection.Inspector.get_multi_table_comment),
    [get_multi_table_options()](#sqlalchemy.engine.reflection.Inspector.get_multi_table_options),
    [get_multi_unique_constraints()](#sqlalchemy.engine.reflection.Inspector.get_multi_unique_constraints),
    [get_pk_constraint()](#sqlalchemy.engine.reflection.Inspector.get_pk_constraint),
    [get_schema_names()](#sqlalchemy.engine.reflection.Inspector.get_schema_names),
    [get_sequence_names()](#sqlalchemy.engine.reflection.Inspector.get_sequence_names),
    [get_sorted_table_and_fkc_names()](#sqlalchemy.engine.reflection.Inspector.get_sorted_table_and_fkc_names),
    [get_table_comment()](#sqlalchemy.engine.reflection.Inspector.get_table_comment),
    [get_table_names()](#sqlalchemy.engine.reflection.Inspector.get_table_names),
    [get_table_options()](#sqlalchemy.engine.reflection.Inspector.get_table_options),
    [get_temp_table_names()](#sqlalchemy.engine.reflection.Inspector.get_temp_table_names),
    [get_temp_view_names()](#sqlalchemy.engine.reflection.Inspector.get_temp_view_names),
    [get_unique_constraints()](#sqlalchemy.engine.reflection.Inspector.get_unique_constraints),
    [get_view_definition()](#sqlalchemy.engine.reflection.Inspector.get_view_definition),
    [get_view_names()](#sqlalchemy.engine.reflection.Inspector.get_view_names), [has_index()](#sqlalchemy.engine.reflection.Inspector.has_index),
    [has_schema()](#sqlalchemy.engine.reflection.Inspector.has_schema), [has_sequence()](#sqlalchemy.engine.reflection.Inspector.has_sequence),
    [has_table()](#sqlalchemy.engine.reflection.Inspector.has_table), [info_cache](#sqlalchemy.engine.reflection.Inspector.info_cache),
    [reflect_table()](#sqlalchemy.engine.reflection.Inspector.reflect_table), [sort_tables_on_foreign_key_dependency()](#sqlalchemy.engine.reflection.Inspector.sort_tables_on_foreign_key_dependency)'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.engine.reflection.Inspector.__init__), [bind](#sqlalchemy.engine.reflection.Inspector.bind),
    [clear_cache()](#sqlalchemy.engine.reflection.Inspector.clear_cache), [default_schema_name](#sqlalchemy.engine.reflection.Inspector.default_schema_name),
    [dialect](#sqlalchemy.engine.reflection.Inspector.dialect), [engine](#sqlalchemy.engine.reflection.Inspector.engine),
    [from_engine()](#sqlalchemy.engine.reflection.Inspector.from_engine), [get_check_constraints()](#sqlalchemy.engine.reflection.Inspector.get_check_constraints),
    [get_columns()](#sqlalchemy.engine.reflection.Inspector.get_columns), [get_foreign_keys()](#sqlalchemy.engine.reflection.Inspector.get_foreign_keys),
    [get_indexes()](#sqlalchemy.engine.reflection.Inspector.get_indexes), [get_materialized_view_names()](#sqlalchemy.engine.reflection.Inspector.get_materialized_view_names),
    [get_multi_check_constraints()](#sqlalchemy.engine.reflection.Inspector.get_multi_check_constraints),
    [get_multi_columns()](#sqlalchemy.engine.reflection.Inspector.get_multi_columns),
    [get_multi_foreign_keys()](#sqlalchemy.engine.reflection.Inspector.get_multi_foreign_keys),
    [get_multi_indexes()](#sqlalchemy.engine.reflection.Inspector.get_multi_indexes),
    [get_multi_pk_constraint()](#sqlalchemy.engine.reflection.Inspector.get_multi_pk_constraint),
    [get_multi_table_comment()](#sqlalchemy.engine.reflection.Inspector.get_multi_table_comment),
    [get_multi_table_options()](#sqlalchemy.engine.reflection.Inspector.get_multi_table_options),
    [get_multi_unique_constraints()](#sqlalchemy.engine.reflection.Inspector.get_multi_unique_constraints),
    [get_pk_constraint()](#sqlalchemy.engine.reflection.Inspector.get_pk_constraint),
    [get_schema_names()](#sqlalchemy.engine.reflection.Inspector.get_schema_names),
    [get_sequence_names()](#sqlalchemy.engine.reflection.Inspector.get_sequence_names),
    [get_sorted_table_and_fkc_names()](#sqlalchemy.engine.reflection.Inspector.get_sorted_table_and_fkc_names),
    [get_table_comment()](#sqlalchemy.engine.reflection.Inspector.get_table_comment),
    [get_table_names()](#sqlalchemy.engine.reflection.Inspector.get_table_names),
    [get_table_options()](#sqlalchemy.engine.reflection.Inspector.get_table_options),
    [get_temp_table_names()](#sqlalchemy.engine.reflection.Inspector.get_temp_table_names),
    [get_temp_view_names()](#sqlalchemy.engine.reflection.Inspector.get_temp_view_names),
    [get_unique_constraints()](#sqlalchemy.engine.reflection.Inspector.get_unique_constraints),
    [get_view_definition()](#sqlalchemy.engine.reflection.Inspector.get_view_definition),
    [get_view_names()](#sqlalchemy.engine.reflection.Inspector.get_view_names), [has_index()](#sqlalchemy.engine.reflection.Inspector.has_index),
    [has_schema()](#sqlalchemy.engine.reflection.Inspector.has_schema), [has_sequence()](#sqlalchemy.engine.reflection.Inspector.has_sequence),
    [has_table()](#sqlalchemy.engine.reflection.Inspector.has_table), [info_cache](#sqlalchemy.engine.reflection.Inspector.info_cache),
    [reflect_table()](#sqlalchemy.engine.reflection.Inspector.reflect_table), [sort_tables_on_foreign_key_dependency()](#sqlalchemy.engine.reflection.Inspector.sort_tables_on_foreign_key_dependency)'
- en: '**Class signature**'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.engine.reflection.Inspector`](#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector") (`sqlalchemy.inspection.Inspectable`)
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.engine.reflection.Inspector`](#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector")（`sqlalchemy.inspection.Inspectable`）
- en: '[PRE25]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Initialize a new [`Inspector`](#sqlalchemy.engine.reflection.Inspector "sqlalchemy.engine.reflection.Inspector").
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化一个新的[`Inspector`](#sqlalchemy.engine.reflection.Inspector "sqlalchemy.engine.reflection.Inspector")。
- en: 'Deprecated since version 1.4: The __init__() method on [`Inspector`](#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector") is deprecated and will be removed in
    a future release. Please use the [`inspect()`](inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect") function on an [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") or [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") in order to acquire an [`Inspector`](#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector").'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.4起已弃用：[`Inspector`](#sqlalchemy.engine.reflection.Inspector "sqlalchemy.engine.reflection.Inspector")上的__init__()方法已弃用，并将在将来的版本中删除。请使用[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")或[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")上的[`inspect()`](inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect")函数来获取[`Inspector`](#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector")。
- en: 'Parameters:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**bind** – a [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    which is typically an instance of [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") or [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**bind** – 一个[`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")，通常是[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")或[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")的实例。'
- en: For a dialect-specific instance of [`Inspector`](#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector"), see [`Inspector.from_engine()`](#sqlalchemy.engine.reflection.Inspector.from_engine
    "sqlalchemy.engine.reflection.Inspector.from_engine")
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 对于[`Inspector`](#sqlalchemy.engine.reflection.Inspector "sqlalchemy.engine.reflection.Inspector")的方言特定实例，请参阅[`Inspector.from_engine()`](#sqlalchemy.engine.reflection.Inspector.from_engine
    "sqlalchemy.engine.reflection.Inspector.from_engine")。
- en: '[PRE26]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: reset the cache for this [`Inspector`](#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector").
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 重置此[`Inspector`](#sqlalchemy.engine.reflection.Inspector "sqlalchemy.engine.reflection.Inspector")的缓存。
- en: Inspection methods that have data cached will emit SQL queries when next called
    to get new data.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 具有数据缓存的检查方法在下次调用以获取新数据时将发出SQL查询。
- en: New in version 2.0.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 版本2.0中的新功能。
- en: '[PRE28]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Return the default schema name presented by the dialect for the current engine’s
    database user.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 返回当前引擎数据库用户的方言呈现的默认模式名称。
- en: E.g. this is typically `public` for PostgreSQL and `dbo` for SQL Server.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，对于PostgreSQL通常为`public`，对于SQL Server为`dbo`。
- en: '[PRE29]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Construct a new dialect-specific Inspector object from the given engine or connection.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 从给定的引擎或连接构造一个新的特定于方言的Inspector对象。
- en: 'Deprecated since version 1.4: The from_engine() method on [`Inspector`](#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector") is deprecated and will be removed in
    a future release. Please use the [`inspect()`](inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect") function on an [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") or [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") in order to acquire an [`Inspector`](#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector").'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.4起已弃用：[`Inspector`](#sqlalchemy.engine.reflection.Inspector "sqlalchemy.engine.reflection.Inspector")上的from_engine()方法已弃用，并将在将来的版本中删除。请使用[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")或[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")上的[`inspect()`](inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect")函数来获取[`Inspector`](#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector")。
- en: 'Parameters:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**bind** – a [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    or [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine").'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '**bind** – 一个[`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")或[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")。'
- en: This method differs from direct a direct constructor call of [`Inspector`](#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector") in that the [`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect") is given a chance to provide a dialect-specific
    [`Inspector`](#sqlalchemy.engine.reflection.Inspector "sqlalchemy.engine.reflection.Inspector")
    instance, which may provide additional methods.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法与直接构造函数调用[`Inspector`](#sqlalchemy.engine.reflection.Inspector "sqlalchemy.engine.reflection.Inspector")不同，因为[`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")有机会提供特定于方言的[`Inspector`](#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector")实例，该实例可能提供其他方法。
- en: See the example at [`Inspector`](#sqlalchemy.engine.reflection.Inspector "sqlalchemy.engine.reflection.Inspector").
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[`Inspector`](#sqlalchemy.engine.reflection.Inspector "sqlalchemy.engine.reflection.Inspector")的示例。
- en: '[PRE32]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Return information about check constraints in `table_name`.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 返回`table_name`中关于检查约束的信息。
- en: Given a string `table_name` and an optional string schema, return check constraint
    information as a list of [`ReflectedCheckConstraint`](#sqlalchemy.engine.interfaces.ReflectedCheckConstraint
    "sqlalchemy.engine.interfaces.ReflectedCheckConstraint").
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个字符串`table_name`和一个可选的字符串模式，将检查约束信息作为[`ReflectedCheckConstraint`](#sqlalchemy.engine.interfaces.ReflectedCheckConstraint
    "sqlalchemy.engine.interfaces.ReflectedCheckConstraint")的列表返回。
- en: 'Parameters:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`table_name` – string name of the table. For special quoting, use [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name").'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`table_name` – 表的名称字符串。对于特殊引用，请使用[`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")。'
- en: '`schema` – string schema name; if omitted, uses the default schema of the database
    connection. For special quoting, use [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name").'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` – 字符串模式名称；如果省略，则使用数据库连接的默认模式。对于特殊引用，请使用[`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")。'
- en: '`**kw` – Additional keyword argument to pass to the dialect specific implementation.
    See the documentation of the dialect in use for more information.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` – 传递给特定方言实现的其他关键字参数。有关更多信息，请参阅正在使用的方言的文档。'
- en: 'Returns:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a list of dictionaries, each representing the definition of a check constraints.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 一个字典列表，每个字典代表检查约束的定义。
- en: See also
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`Inspector.get_multi_check_constraints()`](#sqlalchemy.engine.reflection.Inspector.get_multi_check_constraints
    "sqlalchemy.engine.reflection.Inspector.get_multi_check_constraints")'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Inspector.get_multi_check_constraints()`](#sqlalchemy.engine.reflection.Inspector.get_multi_check_constraints
    "sqlalchemy.engine.reflection.Inspector.get_multi_check_constraints")'
- en: '[PRE33]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Return information about columns in `table_name`.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 返回`table_name`中关于列的信息。
- en: Given a string `table_name` and an optional string `schema`, return column information
    as a list of [`ReflectedColumn`](#sqlalchemy.engine.interfaces.ReflectedColumn
    "sqlalchemy.engine.interfaces.ReflectedColumn").
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个字符串`table_name`和一个可选的字符串`schema`，返回列信息作为[`ReflectedColumn`](#sqlalchemy.engine.interfaces.ReflectedColumn
    "sqlalchemy.engine.interfaces.ReflectedColumn")的列表。
- en: 'Parameters:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`table_name` – string name of the table. For special quoting, use [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name").'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`table_name` – 表的名称字符串。对于特殊引用，请使用[`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")。'
- en: '`schema` – string schema name; if omitted, uses the default schema of the database
    connection. For special quoting, use [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name").'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` – 字符串模式名称；如果省略，则使用数据库连接的默认模式。对于特殊引用，请使用[`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")。'
- en: '`**kw` – Additional keyword argument to pass to the dialect specific implementation.
    See the documentation of the dialect in use for more information.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` – 传递给特定方言实现的其他关键字参数。有关更多信息，请参阅正在使用的方言的文档。'
- en: 'Returns:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: list of dictionaries, each representing the definition of a database column.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 一个字典列表，每个字典代表数据库列的定义。
- en: See also
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`Inspector.get_multi_columns()`](#sqlalchemy.engine.reflection.Inspector.get_multi_columns
    "sqlalchemy.engine.reflection.Inspector.get_multi_columns").'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Inspector.get_multi_columns()`](#sqlalchemy.engine.reflection.Inspector.get_multi_columns
    "sqlalchemy.engine.reflection.Inspector.get_multi_columns").'
- en: '[PRE34]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Return information about foreign_keys in `table_name`.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 返回`table_name`中的外键信息。
- en: Given a string `table_name`, and an optional string schema, return foreign key
    information as a list of [`ReflectedForeignKeyConstraint`](#sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint
    "sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint").
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个字符串`table_name`和一个可选的字符串模式，返回外键信息作为[`ReflectedForeignKeyConstraint`](#sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint
    "sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint")的列表。
- en: 'Parameters:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`table_name` – string name of the table. For special quoting, use [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name").'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`table_name` – 表的字符串名称。对于特殊引用，请使用[`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")。'
- en: '`schema` – string schema name; if omitted, uses the default schema of the database
    connection. For special quoting, use [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name").'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` – 字符串模式名称；如果省略，则使用数据库连接的默认模式。对于特殊引用，请使用[`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")。'
- en: '`**kw` – Additional keyword argument to pass to the dialect specific implementation.
    See the documentation of the dialect in use for more information.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` – 传递给特定方言实现的额外关键字参数。有关更多信息，请参阅正在使用的方言的文档。'
- en: 'Returns:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a list of dictionaries, each representing the a foreign key definition.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 一个字典列表，每个代表一个外键定义。
- en: See also
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Inspector.get_multi_foreign_keys()`](#sqlalchemy.engine.reflection.Inspector.get_multi_foreign_keys
    "sqlalchemy.engine.reflection.Inspector.get_multi_foreign_keys")'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Inspector.get_multi_foreign_keys()`](#sqlalchemy.engine.reflection.Inspector.get_multi_foreign_keys
    "sqlalchemy.engine.reflection.Inspector.get_multi_foreign_keys")'
- en: '[PRE35]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Return information about indexes in `table_name`.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 返回表`table_name`中索引的信息。
- en: Given a string `table_name` and an optional string schema, return index information
    as a list of [`ReflectedIndex`](#sqlalchemy.engine.interfaces.ReflectedIndex "sqlalchemy.engine.interfaces.ReflectedIndex").
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个字符串`table_name`和一个可选的字符串模式，返回索引信息作为[`ReflectedIndex`](#sqlalchemy.engine.interfaces.ReflectedIndex
    "sqlalchemy.engine.interfaces.ReflectedIndex")的列表。
- en: 'Parameters:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`table_name` – string name of the table. For special quoting, use [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name").'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`table_name` – 表的字符串名称。对于特殊引用，请使用[`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")。'
- en: '`schema` – string schema name; if omitted, uses the default schema of the database
    connection. For special quoting, use [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name").'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` – 字符串模式名称；如果省略，则使用数据库连接的默认模式。对于特殊引用，请使用[`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")。'
- en: '`**kw` – Additional keyword argument to pass to the dialect specific implementation.
    See the documentation of the dialect in use for more information.'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` – 传递给特定方言实现的额外关键字参数。有关更多信息，请参阅正在使用的方言的文档。'
- en: 'Returns:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a list of dictionaries, each representing the definition of an index.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 一个字典列表，每个代表一个索引的定义。
- en: See also
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Inspector.get_multi_indexes()`](#sqlalchemy.engine.reflection.Inspector.get_multi_indexes
    "sqlalchemy.engine.reflection.Inspector.get_multi_indexes")'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Inspector.get_multi_indexes()`](#sqlalchemy.engine.reflection.Inspector.get_multi_indexes
    "sqlalchemy.engine.reflection.Inspector.get_multi_indexes")'
- en: '[PRE36]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Return all materialized view names in schema.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 返回模式中所有物化视图的名称。
- en: 'Parameters:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`schema` – Optional, retrieve names from a non-default schema. For special
    quoting, use [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name").'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` – 可选，从非默认模式中检索名称。对于特殊引用，请���用[`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")。'
- en: '`**kw` – Additional keyword argument to pass to the dialect specific implementation.
    See the documentation of the dialect in use for more information.'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` – 传递给特定方言实现的额外关键字参数。有关更多信息，请参阅正在使用的方言的文档。'
- en: New in version 2.0.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0版本中的新功能。
- en: See also
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Inspector.get_view_names()`](#sqlalchemy.engine.reflection.Inspector.get_view_names
    "sqlalchemy.engine.reflection.Inspector.get_view_names")'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Inspector.get_view_names()`](#sqlalchemy.engine.reflection.Inspector.get_view_names
    "sqlalchemy.engine.reflection.Inspector.get_view_names")'
- en: '[PRE37]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Return information about check constraints in all tables in the given schema.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定模式中所有表中检查约束的信息。
- en: The tables can be filtered by passing the names to use to `filter_names`.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 可通过将要用于`filter_names`的名称传递来过滤表。
- en: For each table the value is a list of [`ReflectedCheckConstraint`](#sqlalchemy.engine.interfaces.ReflectedCheckConstraint
    "sqlalchemy.engine.interfaces.ReflectedCheckConstraint").
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个表，值是一个[`ReflectedCheckConstraint`](#sqlalchemy.engine.interfaces.ReflectedCheckConstraint
    "sqlalchemy.engine.interfaces.ReflectedCheckConstraint")列表。
- en: 'Parameters:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`schema` – string schema name; if omitted, uses the default schema of the database
    connection. For special quoting, use [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name").'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` – 字符串模式名称；如果省略，则使用数据库连接的默认模式。要进行特殊引用，请使用[`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")。'
- en: '`filter_names` – optionally return information only for the objects listed
    here.'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`filter_names` – 可选择性地仅返回列出的对象的信息。'
- en: '`kind` – a `ObjectKind` that specifies the type of objects to reflect. Defaults
    to `ObjectKind.TABLE`.'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kind` – 指定要反映的对象类型的`ObjectKind`。默认为`ObjectKind.TABLE`。'
- en: '`scope` – a `ObjectScope` that specifies if constraints of default, temporary
    or any tables should be reflected. Defaults to `ObjectScope.DEFAULT`.'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scope` – 指定要反映默认、临时或任何表的约束的`ObjectScope`。默认为`ObjectScope.DEFAULT`。'
- en: '`**kw` – Additional keyword argument to pass to the dialect specific implementation.
    See the documentation of the dialect in use for more information.'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` – 传递给特定方言实现的额外关键字参数。有关更多信息，请参阅正在使用的方言的文档。'
- en: 'Returns:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a dictionary where the keys are two-tuple schema,table-name and the values are
    list of dictionaries, each representing the definition of a check constraints.
    The schema is `None` if no schema is provided.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 一个字典，其中键是两元组模式、表名，值是字典列表，每个字典表示检查约束的定义。如果未提供模式，则模式为`None`。
- en: New in version 2.0.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本2.0中新增。
- en: See also
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Inspector.get_check_constraints()`](#sqlalchemy.engine.reflection.Inspector.get_check_constraints
    "sqlalchemy.engine.reflection.Inspector.get_check_constraints")'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Inspector.get_check_constraints()`](#sqlalchemy.engine.reflection.Inspector.get_check_constraints
    "sqlalchemy.engine.reflection.Inspector.get_check_constraints")'
- en: '[PRE38]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Return information about columns in all objects in the given schema.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定模式中所有对象中列的信息。
- en: The objects can be filtered by passing the names to use to `filter_names`.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 可通过将要使用的名称传递给`filter_names`来过滤对象。
- en: For each table the value is a list of [`ReflectedColumn`](#sqlalchemy.engine.interfaces.ReflectedColumn
    "sqlalchemy.engine.interfaces.ReflectedColumn").
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个表，值是一个[`ReflectedColumn`](#sqlalchemy.engine.interfaces.ReflectedColumn
    "sqlalchemy.engine.interfaces.ReflectedColumn")列表。
- en: 'Parameters:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`schema` – string schema name; if omitted, uses the default schema of the database
    connection. For special quoting, use [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name").'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` – 字符串模式名称；如果省略，则使用数据库连接的默认模式。要进行特殊引用，请使用[`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")。'
- en: '`filter_names` – optionally return information only for the objects listed
    here.'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`filter_names` – 可选择性地仅返回列出的对象的信息。'
- en: '`kind` – a `ObjectKind` that specifies the type of objects to reflect. Defaults
    to `ObjectKind.TABLE`.'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kind` – 指定要反映的对象类型的`ObjectKind`。默认为`ObjectKind.TABLE`。'
- en: '`scope` – a `ObjectScope` that specifies if columns of default, temporary or
    any tables should be reflected. Defaults to `ObjectScope.DEFAULT`.'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scope` – 指定要反映默认、临时或任何表的列的`ObjectScope`。默认为`ObjectScope.DEFAULT`。'
- en: '`**kw` – Additional keyword argument to pass to the dialect specific implementation.
    See the documentation of the dialect in use for more information.'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` – 传递给特定方言实现的额外关键字参数。有关更多信息，请参阅正在使用的方言的文档。'
- en: 'Returns:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a dictionary where the keys are two-tuple schema,table-name and the values are
    list of dictionaries, each representing the definition of a database column. The
    schema is `None` if no schema is provided.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 一个字典，其中键是两元组模式、表名，值是字典列表，每个字典表示数据库列的定义。如果未提供模式，则模式为`None`。
- en: New in version 2.0.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本2.0中新增。
- en: See also
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Inspector.get_columns()`](#sqlalchemy.engine.reflection.Inspector.get_columns
    "sqlalchemy.engine.reflection.Inspector.get_columns")'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Inspector.get_columns()`](#sqlalchemy.engine.reflection.Inspector.get_columns
    "sqlalchemy.engine.reflection.Inspector.get_columns")'
- en: '[PRE39]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Return information about foreign_keys in all tables in the given schema.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定模式中所有表中外键的信息。
- en: The tables can be filtered by passing the names to use to `filter_names`.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 可通过将要使用的名称传递给`filter_names`来过滤表。
- en: For each table the value is a list of [`ReflectedForeignKeyConstraint`](#sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint
    "sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint").
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个表，该值是一个 [`ReflectedForeignKeyConstraint`](#sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint
    "sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint") 列表。
- en: 'Parameters:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`schema` – string schema name; if omitted, uses the default schema of the database
    connection. For special quoting, use [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name").'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` – 字符串模式名称；如果省略，将使用数据库连接的默认模式。对于特殊引用，请使用 [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")。'
- en: '`filter_names` – optionally return information only for the objects listed
    here.'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`filter_names` – 可选择仅返回此处列出的对象信息。'
- en: '`kind` – a `ObjectKind` that specifies the type of objects to reflect. Defaults
    to `ObjectKind.TABLE`.'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kind` – 一个指定要反映的对象类型的 `ObjectKind`。默认为 `ObjectKind.TABLE`。'
- en: '`scope` – a `ObjectScope` that specifies if foreign keys of default, temporary
    or any tables should be reflected. Defaults to `ObjectScope.DEFAULT`.'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scope` – 一个指定是否应反映默认、临时或任何表的外键的 `ObjectScope`。默认为 `ObjectScope.DEFAULT`。'
- en: '`**kw` – Additional keyword argument to pass to the dialect specific implementation.
    See the documentation of the dialect in use for more information.'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` – 传递给特定方言实现的其他关键字参数。有关更多信息，请参阅正在使用的方言的文档。'
- en: 'Returns:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a dictionary where the keys are two-tuple schema,table-name and the values are
    list of dictionaries, each representing a foreign key definition. The schema is
    `None` if no schema is provided.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 一个字典，其中键是两元组模式、表名，值是字典列表，每个表示外键定义。如果未提供模式，则模式为 `None`。
- en: New in version 2.0.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0 版中的新功能。
- en: See also
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Inspector.get_foreign_keys()`](#sqlalchemy.engine.reflection.Inspector.get_foreign_keys
    "sqlalchemy.engine.reflection.Inspector.get_foreign_keys")'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Inspector.get_foreign_keys()`](#sqlalchemy.engine.reflection.Inspector.get_foreign_keys
    "sqlalchemy.engine.reflection.Inspector.get_foreign_keys")'
- en: '[PRE40]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Return information about indexes in in all objects in the given schema.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定模式中所有对象中索引的信息。
- en: The objects can be filtered by passing the names to use to `filter_names`.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将要使用的名称传递给 `filter_names` 来过滤对象。
- en: For each table the value is a list of [`ReflectedIndex`](#sqlalchemy.engine.interfaces.ReflectedIndex
    "sqlalchemy.engine.interfaces.ReflectedIndex").
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个表，该值是一个 [`ReflectedIndex`](#sqlalchemy.engine.interfaces.ReflectedIndex
    "sqlalchemy.engine.interfaces.ReflectedIndex") 列表。
- en: 'Parameters:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`schema` – string schema name; if omitted, uses the default schema of the database
    connection. For special quoting, use [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name").'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` – 字符串模式名称；如果省略，将使用数据库连接的默认模式。对于特殊引用，请使用 [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")。'
- en: '`filter_names` – optionally return information only for the objects listed
    here.'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`filter_names` – 可选择仅返回此处列出的对象信息。'
- en: '`kind` – a `ObjectKind` that specifies the type of objects to reflect. Defaults
    to `ObjectKind.TABLE`.'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kind` – 一个指定要反映的对象类型的 `ObjectKind`。默认为 `ObjectKind.TABLE`。'
- en: '`scope` – a `ObjectScope` that specifies if indexes of default, temporary or
    any tables should be reflected. Defaults to `ObjectScope.DEFAULT`.'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scope` – 一个指定是否应反映默认、临时或任何表的索引的 `ObjectScope`。默认为 `ObjectScope.DEFAULT`。'
- en: '`**kw` – Additional keyword argument to pass to the dialect specific implementation.
    See the documentation of the dialect in use for more information.'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` – 传递给特定方言实现的其他关键字参数。有关更多信息，请参阅正在使用的方言的文档。'
- en: 'Returns:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a dictionary where the keys are two-tuple schema,table-name and the values are
    list of dictionaries, each representing the definition of an index. The schema
    is `None` if no schema is provided.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 一个字典，其中键是两元组模式、表名，值是字典列表，每个表示索引的定义。如果未提供模式，则模式为 `None`。
- en: New in version 2.0.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0 版中的新功能。
- en: See also
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Inspector.get_indexes()`](#sqlalchemy.engine.reflection.Inspector.get_indexes
    "sqlalchemy.engine.reflection.Inspector.get_indexes")'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Inspector.get_indexes()`](#sqlalchemy.engine.reflection.Inspector.get_indexes
    "sqlalchemy.engine.reflection.Inspector.get_indexes")'
- en: '[PRE41]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Return information about primary key constraints in all tables in the given
    schema.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定模式中所有表的主键约束的信息。
- en: The tables can be filtered by passing the names to use to `filter_names`.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将要使用的名称传递给 `filter_names` 来过滤表格。
- en: For each table the value is a [`ReflectedPrimaryKeyConstraint`](#sqlalchemy.engine.interfaces.ReflectedPrimaryKeyConstraint
    "sqlalchemy.engine.interfaces.ReflectedPrimaryKeyConstraint").
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个表，该值为 [`ReflectedPrimaryKeyConstraint`](#sqlalchemy.engine.interfaces.ReflectedPrimaryKeyConstraint
    "sqlalchemy.engine.interfaces.ReflectedPrimaryKeyConstraint")。
- en: 'Parameters:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`schema` – string schema name; if omitted, uses the default schema of the database
    connection. For special quoting, use [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name").'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` – 字符串模式名称；如果省略，则使用数据库连接的默认模式。要进行特殊引用，请使用 [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")。'
- en: '`filter_names` – optionally return information only for the objects listed
    here.'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`filter_names` – 可选择仅返回此处列出的对象的信息。'
- en: '`kind` – a `ObjectKind` that specifies the type of objects to reflect. Defaults
    to `ObjectKind.TABLE`.'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kind` – 一个指定要反映的对象类型的 `ObjectKind`。默认为 `ObjectKind.TABLE`。'
- en: '`scope` – a `ObjectScope` that specifies if primary keys of default, temporary
    or any tables should be reflected. Defaults to `ObjectScope.DEFAULT`.'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scope` – 一个指定应反映默认、临时或任何表的主键的 `ObjectScope`。默认为 `ObjectScope.DEFAULT`。'
- en: '`**kw` – Additional keyword argument to pass to the dialect specific implementation.
    See the documentation of the dialect in use for more information.'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` – 要传递给特定方言实现的其他关键字参数。有关更多信息，请参阅正在使用的方言的文档。'
- en: 'Returns:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a dictionary where the keys are two-tuple schema,table-name and the values are
    dictionaries, each representing the definition of a primary key constraint. The
    schema is `None` if no schema is provided.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 一个字典，其键为二元组模式、表名，值为每个表示主键约束的定义的字典。如果未提供模式，则模式为 `None`。
- en: New in version 2.0.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0 版中的新内容。
- en: See also
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Inspector.get_pk_constraint()`](#sqlalchemy.engine.reflection.Inspector.get_pk_constraint
    "sqlalchemy.engine.reflection.Inspector.get_pk_constraint")'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Inspector.get_pk_constraint()`](#sqlalchemy.engine.reflection.Inspector.get_pk_constraint
    "sqlalchemy.engine.reflection.Inspector.get_pk_constraint")'
- en: '[PRE42]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Return information about the table comment in all objects in the given schema.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定模式中所有对象中表注释的信息。
- en: The objects can be filtered by passing the names to use to `filter_names`.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 可通过传递用于 `filter_names` 的名称来过滤对象。
- en: For each table the value is a [`ReflectedTableComment`](#sqlalchemy.engine.interfaces.ReflectedTableComment
    "sqlalchemy.engine.interfaces.ReflectedTableComment").
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个表，该值为 [`ReflectedTableComment`](#sqlalchemy.engine.interfaces.ReflectedTableComment
    "sqlalchemy.engine.interfaces.ReflectedTableComment")。
- en: Raises `NotImplementedError` for a dialect that does not support comments.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 对不支持注释的方言引发 `NotImplementedError`。
- en: 'Parameters:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`schema` – string schema name; if omitted, uses the default schema of the database
    connection. For special quoting, use [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name").'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` – 字符串模式名称；如果省略，则使用数据库连接的默认模式。要进行特殊引用，请使用 [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")。'
- en: '`filter_names` – optionally return information only for the objects listed
    here.'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`filter_names` – 可选择仅返回此处列出的对象的信息。'
- en: '`kind` – a `ObjectKind` that specifies the type of objects to reflect. Defaults
    to `ObjectKind.TABLE`.'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kind` – 一个指定要反映的对象类型的 `ObjectKind`。默认为 `ObjectKind.TABLE`。'
- en: '`scope` – a `ObjectScope` that specifies if comments of default, temporary
    or any tables should be reflected. Defaults to `ObjectScope.DEFAULT`.'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scope` – 一个指定应反映默认、临时或任何表的注释的 `ObjectScope`。默认为 `ObjectScope.DEFAULT`。'
- en: '`**kw` – Additional keyword argument to pass to the dialect specific implementation.
    See the documentation of the dialect in use for more information.'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` – 要传递给特定方言实现的其他关键字参数。有关更多信息，请参阅正在使用的方言的文档。'
- en: 'Returns:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a dictionary where the keys are two-tuple schema,table-name and the values are
    dictionaries, representing the table comments. The schema is `None` if no schema
    is provided.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 一个字典，其键为二元组模式、表名，值为表示表注释的字典。如果未提供模式，则模式为 `None`。
- en: New in version 2.0.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0 版中的新内容。
- en: See also
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Inspector.get_table_comment()`](#sqlalchemy.engine.reflection.Inspector.get_table_comment
    "sqlalchemy.engine.reflection.Inspector.get_table_comment")'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Inspector.get_table_comment()`](#sqlalchemy.engine.reflection.Inspector.get_table_comment
    "sqlalchemy.engine.reflection.Inspector.get_table_comment")'
- en: '[PRE43]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Return a dictionary of options specified when the tables in the given schema
    were created.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 返回指定了在给定模式中创建表时指定的选项的字典。
- en: The tables can be filtered by passing the names to use to `filter_names`.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 可通过传递用于 `filter_names` 的名称来过滤表。
- en: This currently includes some options that apply to MySQL and Oracle tables.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 目前包括适用于MySQL和Oracle表的一些选项。
- en: 'Parameters:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`schema` – string schema name; if omitted, uses the default schema of the database
    connection. For special quoting, use [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name").'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` – 字符串模式名称；如果省略，使用数据库连接的默认模式。对于特殊引用，请使用[`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")。'
- en: '`filter_names` – optionally return information only for the objects listed
    here.'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`filter_names` – 可选择仅返回列出的对象的信息。'
- en: '`kind` – a `ObjectKind` that specifies the type of objects to reflect. Defaults
    to `ObjectKind.TABLE`.'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kind` – 一个`ObjectKind`，指定要反映的对象类型。默认为`ObjectKind.TABLE`。'
- en: '`scope` – a `ObjectScope` that specifies if options of default, temporary or
    any tables should be reflected. Defaults to `ObjectScope.DEFAULT`.'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scope` – 一个`ObjectScope`，指定是否应反映默认、临时或任何表的选项。默认为`ObjectScope.DEFAULT`。'
- en: '`**kw` – Additional keyword argument to pass to the dialect specific implementation.
    See the documentation of the dialect in use for more information.'
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` – 传递给特定方言实现的额外关键字参数。有关更多信息，请参阅正在使用的方言的文档。'
- en: 'Returns:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a dictionary where the keys are two-tuple schema,table-name and the values are
    dictionaries with the table options. The returned keys in each dict depend on
    the dialect in use. Each one is prefixed with the dialect name. The schema is
    `None` if no schema is provided.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 一个字典，其中键是两元组模式、表名，值是具有表选项的字典。每个字典中返回的键取决于正在使用的方言。每个键都以方言名称为前缀。如果未提供模式，则模式为`None`。
- en: New in version 2.0.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 版本2.0中的新功能。
- en: See also
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Inspector.get_table_options()`](#sqlalchemy.engine.reflection.Inspector.get_table_options
    "sqlalchemy.engine.reflection.Inspector.get_table_options")'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Inspector.get_table_options()`](#sqlalchemy.engine.reflection.Inspector.get_table_options
    "sqlalchemy.engine.reflection.Inspector.get_table_options")'
- en: '[PRE44]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Return information about unique constraints in all tables in the given schema.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定模式中所有表中唯一约束的信息。
- en: The tables can be filtered by passing the names to use to `filter_names`.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 可通过传递要用于`filter_names`的名称来过滤表。
- en: For each table the value is a list of [`ReflectedUniqueConstraint`](#sqlalchemy.engine.interfaces.ReflectedUniqueConstraint
    "sqlalchemy.engine.interfaces.ReflectedUniqueConstraint").
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个表，值是一个[`ReflectedUniqueConstraint`](#sqlalchemy.engine.interfaces.ReflectedUniqueConstraint
    "sqlalchemy.engine.interfaces.ReflectedUniqueConstraint")列表。
- en: 'Parameters:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`schema` – string schema name; if omitted, uses the default schema of the database
    connection. For special quoting, use [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name").'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` – 字符串模式名称；如果省略，使用数据库连接的默认模式。对于特殊引用，请使用[`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")。'
- en: '`filter_names` – optionally return information only for the objects listed
    here.'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`filter_names` – 可选择仅返回列出的对象的信息。'
- en: '`kind` – a `ObjectKind` that specifies the type of objects to reflect. Defaults
    to `ObjectKind.TABLE`.'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kind` – 一个`ObjectKind`，指定要反映的对象类型。默认为`ObjectKind.TABLE`。'
- en: '`scope` – a `ObjectScope` that specifies if constraints of default, temporary
    or any tables should be reflected. Defaults to `ObjectScope.DEFAULT`.'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scope` – 一个`ObjectScope`，指定是否应反映默认、临时或任何表的约束。默认为`ObjectScope.DEFAULT`。'
- en: '`**kw` – Additional keyword argument to pass to the dialect specific implementation.
    See the documentation of the dialect in use for more information.'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` – 传递给特定方言实现的额外关键字参数。有关更多信息，请参阅正在使用的方言的文档。'
- en: 'Returns:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a dictionary where the keys are two-tuple schema,table-name and the values are
    list of dictionaries, each representing the definition of an unique constraint.
    The schema is `None` if no schema is provided.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 一个字典，其中键是两元组模式、表名，值是字典列表，每个表示唯一约束的定义。如果未提供模式，则模式为`None`。
- en: New in version 2.0.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 版本2.0中的新功能。
- en: See also
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Inspector.get_unique_constraints()`](#sqlalchemy.engine.reflection.Inspector.get_unique_constraints
    "sqlalchemy.engine.reflection.Inspector.get_unique_constraints")'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Inspector.get_unique_constraints()`](#sqlalchemy.engine.reflection.Inspector.get_unique_constraints
    "sqlalchemy.engine.reflection.Inspector.get_unique_constraints")'
- en: '[PRE45]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Return information about primary key constraint in `table_name`.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 返回有关`table_name`中主键约束的信息。
- en: Given a string `table_name`, and an optional string schema, return primary key
    information as a [`ReflectedPrimaryKeyConstraint`](#sqlalchemy.engine.interfaces.ReflectedPrimaryKeyConstraint
    "sqlalchemy.engine.interfaces.ReflectedPrimaryKeyConstraint").
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 给定字符串 `table_name`，和可选的字符串模式，作为 [`ReflectedPrimaryKeyConstraint`](#sqlalchemy.engine.interfaces.ReflectedPrimaryKeyConstraint
    "sqlalchemy.engine.interfaces.ReflectedPrimaryKeyConstraint") 返回主键信息。
- en: 'Parameters:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`table_name` – string name of the table. For special quoting, use [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name").'
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`table_name` – 表的字符串名称。对于特殊引用，请使用[`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")。'
- en: '`schema` – string schema name; if omitted, uses the default schema of the database
    connection. For special quoting, use [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name").'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` – 字符串模式名称；如果省略，则使用数据库连接的默认模式。对于特殊引用，请使用[`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")。'
- en: '`**kw` – Additional keyword argument to pass to the dialect specific implementation.
    See the documentation of the dialect in use for more information.'
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` – 传递给特定方言实现的附加关键字参数。有关更多信息，请参阅使用的方言的文档。'
- en: 'Returns:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a dictionary representing the definition of a primary key constraint.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 代表主键约束定义的字典。
- en: See also
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Inspector.get_multi_pk_constraint()`](#sqlalchemy.engine.reflection.Inspector.get_multi_pk_constraint
    "sqlalchemy.engine.reflection.Inspector.get_multi_pk_constraint")'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Inspector.get_multi_pk_constraint()`](#sqlalchemy.engine.reflection.Inspector.get_multi_pk_constraint
    "sqlalchemy.engine.reflection.Inspector.get_multi_pk_constraint")'
- en: '[PRE46]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Return all schema names.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 返回所有模式名称。
- en: 'Parameters:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '****kw** – Additional keyword argument to pass to the dialect specific implementation.
    See the documentation of the dialect in use for more information.'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '****kw** – 传递给特定方言实现的附加关键字参数。有关更多信息，请参阅使用的方言的文档。'
- en: '[PRE47]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Return all sequence names in schema.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 返回模式中的所有序列名称。
- en: 'Parameters:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`schema` – Optional, retrieve names from a non-default schema. For special
    quoting, use [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name").'
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` – 可选，从非默认模式检索名称。对于特殊引用，请使用[`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")。'
- en: '`**kw` – Additional keyword argument to pass to the dialect specific implementation.
    See the documentation of the dialect in use for more information.'
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` – 传递给特定方言实现的附加关键字参数。有关更多信息，请参阅使用的方言的文档。'
- en: '[PRE48]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Return dependency-sorted table and foreign key constraint names in referred
    to within a particular schema.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 返回特定模式中引用的表和外键约束名称的依赖排序。
- en: This will yield 2-tuples of `(tablename, [(tname, fkname), (tname, fkname),
    ...])` consisting of table names in CREATE order grouped with the foreign key
    constraint names that are not detected as belonging to a cycle. The final element
    will be `(None, [(tname, fkname), (tname, fkname), ..])` which will consist of
    remaining foreign key constraint names that would require a separate CREATE step
    after-the-fact, based on dependencies between tables.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成 `(tablename, [(tname, fkname), (tname, fkname), ...])` 的 2 元组，其中包含按创建顺序分组的表名和未被检测为属于循环的外键约束名称。最后一个元素将是
    `(None, [(tname, fkname), (tname, fkname), ..])`，其中包含剩余的外键约束名称，这些名称需要根据表之间的依赖关系在事后进行单独的创建步骤。
- en: 'Parameters:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`schema` – schema name to query, if not the default schema.'
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` – 要查询的模式名称，如果不是默认模式。'
- en: '`**kw` – Additional keyword argument to pass to the dialect specific implementation.
    See the documentation of the dialect in use for more information.'
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` – 传递给特定方言实现的附加关键字参数。有关更多信息，请参阅使用的方言的文档。'
- en: See also
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Inspector.get_table_names()`](#sqlalchemy.engine.reflection.Inspector.get_table_names
    "sqlalchemy.engine.reflection.Inspector.get_table_names")'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Inspector.get_table_names()`](#sqlalchemy.engine.reflection.Inspector.get_table_names
    "sqlalchemy.engine.reflection.Inspector.get_table_names")'
- en: '[`sort_tables_and_constraints()`](ddl.html#sqlalchemy.schema.sort_tables_and_constraints
    "sqlalchemy.schema.sort_tables_and_constraints") - similar method which works
    with an already-given [`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData").'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sort_tables_and_constraints()`](ddl.html#sqlalchemy.schema.sort_tables_and_constraints
    "sqlalchemy.schema.sort_tables_and_constraints") - 与已给定的 [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") 类似的方法。'
- en: '[PRE49]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Return information about the table comment for `table_name`.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 返回 `table_name` 的表注释信息。
- en: Given a string `table_name` and an optional string `schema`, return table comment
    information as a [`ReflectedTableComment`](#sqlalchemy.engine.interfaces.ReflectedTableComment
    "sqlalchemy.engine.interfaces.ReflectedTableComment").
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 给定字符串`table_name`和可选字符串`schema`，将表注释信息作为[`ReflectedTableComment`](#sqlalchemy.engine.interfaces.ReflectedTableComment
    "sqlalchemy.engine.interfaces.ReflectedTableComment")返回。
- en: Raises `NotImplementedError` for a dialect that does not support comments.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '对于不支持注释的方言，引发`NotImplementedError`。 '
- en: 'Parameters:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`table_name` – string name of the table. For special quoting, use [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name").'
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`table_name` – 表的字符串名称。对于特殊引用，请使用[`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")。'
- en: '`schema` – string schema name; if omitted, uses the default schema of the database
    connection. For special quoting, use [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name").'
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` – 字符串模式名称；如果省略，则使用数据库连接的默认模式。对于特殊引用，请使用[`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")。'
- en: '`**kw` – Additional keyword argument to pass to the dialect specific implementation.
    See the documentation of the dialect in use for more information.'
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` – 传递给特定方言实现的额外关键字参数。有关更多信息，请参阅正在使用的方言的文档。'
- en: 'Returns:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a dictionary, with the table comment.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 一个字典，带有表注释。
- en: New in version 1.2.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.2新增。
- en: See also
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Inspector.get_multi_table_comment()`](#sqlalchemy.engine.reflection.Inspector.get_multi_table_comment
    "sqlalchemy.engine.reflection.Inspector.get_multi_table_comment")'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Inspector.get_multi_table_comment()`](#sqlalchemy.engine.reflection.Inspector.get_multi_table_comment
    "sqlalchemy.engine.reflection.Inspector.get_multi_table_comment")'
- en: '[PRE50]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Return all table names within a particular schema.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 返回特定模式内的所有表名。
- en: The names are expected to be real tables only, not views. Views are instead
    returned using the [`Inspector.get_view_names()`](#sqlalchemy.engine.reflection.Inspector.get_view_names
    "sqlalchemy.engine.reflection.Inspector.get_view_names") and/or [`Inspector.get_materialized_view_names()`](#sqlalchemy.engine.reflection.Inspector.get_materialized_view_names
    "sqlalchemy.engine.reflection.Inspector.get_materialized_view_names") methods.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 名称预期仅为实际表，而不是视图。视图使用[`Inspector.get_view_names()`](#sqlalchemy.engine.reflection.Inspector.get_view_names
    "sqlalchemy.engine.reflection.Inspector.get_view_names")和/或[`Inspector.get_materialized_view_names()`](#sqlalchemy.engine.reflection.Inspector.get_materialized_view_names
    "sqlalchemy.engine.reflection.Inspector.get_materialized_view_names")方法返回。
- en: 'Parameters:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`schema` – Schema name. If `schema` is left at `None`, the database’s default
    schema is used, else the named schema is searched. If the database does not support
    named schemas, behavior is undefined if `schema` is not passed as `None`. For
    special quoting, use [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name").'
  id: totrans-334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` – 模式名称。如果`schema`为`None`，则使用数据库的默认模式，否则搜索命名模式。如果数据库不支持命名模式，则如果未将`schema`作为`None`传递，则行为未定义。对于特殊引用，请使用[`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")。'
- en: '`**kw` – Additional keyword argument to pass to the dialect specific implementation.
    See the documentation of the dialect in use for more information.'
  id: totrans-335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` – 传递给特定方言实现的额外关键字参数。有关更多信息，请参阅正在使用的方言的文档。'
- en: See also
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Inspector.get_sorted_table_and_fkc_names()`](#sqlalchemy.engine.reflection.Inspector.get_sorted_table_and_fkc_names
    "sqlalchemy.engine.reflection.Inspector.get_sorted_table_and_fkc_names")'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Inspector.get_sorted_table_and_fkc_names()`](#sqlalchemy.engine.reflection.Inspector.get_sorted_table_and_fkc_names
    "sqlalchemy.engine.reflection.Inspector.get_sorted_table_and_fkc_names")'
- en: '[`MetaData.sorted_tables`](metadata.html#sqlalchemy.schema.MetaData.sorted_tables
    "sqlalchemy.schema.MetaData.sorted_tables")'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MetaData.sorted_tables`](metadata.html#sqlalchemy.schema.MetaData.sorted_tables
    "sqlalchemy.schema.MetaData.sorted_tables")'
- en: '[PRE51]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Return a dictionary of options specified when the table of the given name was
    created.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定名称的表创建时指定的选项的字典。
- en: This currently includes some options that apply to MySQL and Oracle tables.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 目前包括适用于MySQL和Oracle表的某些选项。
- en: 'Parameters:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`table_name` – string name of the table. For special quoting, use [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name").'
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`table_name` – 表的字符串名称。对于特殊引用，请使用[`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")。'
- en: '`schema` – string schema name; if omitted, uses the default schema of the database
    connection. For special quoting, use [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name").'
  id: totrans-344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` – 字符串模式名称；如果省略，则使用数据库连接的默认模式。要进行特殊引用，请使用[`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")。'
- en: '`**kw` – Additional keyword argument to pass to the dialect specific implementation.
    See the documentation of the dialect in use for more information.'
  id: totrans-345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` – 传递给方言特定实现的附加关键字参数。有关更多信息，请参阅正在使用的方言的文档。'
- en: 'Returns:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a dict with the table options. The returned keys depend on the dialect in use.
    Each one is prefixed with the dialect name.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 一个包含表选项的字典。返回的键取决于使用的方言。每个键都以方言名称为前缀。
- en: See also
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Inspector.get_multi_table_options()`](#sqlalchemy.engine.reflection.Inspector.get_multi_table_options
    "sqlalchemy.engine.reflection.Inspector.get_multi_table_options")'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Inspector.get_multi_table_options()`](#sqlalchemy.engine.reflection.Inspector.get_multi_table_options
    "sqlalchemy.engine.reflection.Inspector.get_multi_table_options")'
- en: '[PRE52]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Return a list of temporary table names for the current bind.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 返回当前绑定的临时表名称列表。
- en: This method is unsupported by most dialects; currently only Oracle, PostgreSQL
    and SQLite implements it.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数方言都不支持此方法；目前只有 Oracle、PostgreSQL 和 SQLite 实现了它。
- en: 'Parameters:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '****kw** – Additional keyword argument to pass to the dialect specific implementation.
    See the documentation of the dialect in use for more information.'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: '****kw** – 传递给方言特定实现的附加关键字参数。有关更多信息，请参阅正在使用的方言的文档。'
- en: '[PRE53]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Return a list of temporary view names for the current bind.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 返回当前绑定的临时视图名称列表。
- en: This method is unsupported by most dialects; currently only PostgreSQL and SQLite
    implements it.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数方言都不支持此方法；目前只有 PostgreSQL 和 SQLite 实现了它。
- en: 'Parameters:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '****kw** – Additional keyword argument to pass to the dialect specific implementation.
    See the documentation of the dialect in use for more information.'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: '****kw** – 传递给方言特定实现的附加关键字参数。有关更多信息，请参阅正在使用的方言的文档。'
- en: '[PRE54]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Return information about unique constraints in `table_name`.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 返回`table_name`中唯一约束的信息。
- en: Given a string `table_name` and an optional string schema, return unique constraint
    information as a list of [`ReflectedUniqueConstraint`](#sqlalchemy.engine.interfaces.ReflectedUniqueConstraint
    "sqlalchemy.engine.interfaces.ReflectedUniqueConstraint").
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个字符串`table_name`和一个可选的字符串模式，将唯一约束信息返回为一个[`ReflectedUniqueConstraint`](#sqlalchemy.engine.interfaces.ReflectedUniqueConstraint
    "sqlalchemy.engine.interfaces.ReflectedUniqueConstraint")的列表。
- en: 'Parameters:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`table_name` – string name of the table. For special quoting, use [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name").'
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`table_name` – 表名称字符串。要进行特殊引用，请使用[`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")。'
- en: '`schema` – string schema name; if omitted, uses the default schema of the database
    connection. For special quoting, use [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name").'
  id: totrans-365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` – 字符串模式名称；如果省略，则使用数据库连接的默认模式。要进行特殊引用，请使用[`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")。'
- en: '`**kw` – Additional keyword argument to pass to the dialect specific implementation.
    See the documentation of the dialect in use for more information.'
  id: totrans-366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` – 传递给方言特定实现的附加关键字参数。有关更多信息，请参阅正在使用的方言的文档。'
- en: 'Returns:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a list of dictionaries, each representing the definition of an unique constraint.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 一个字典列表，每个都代表唯一约束的定义。
- en: See also
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Inspector.get_multi_unique_constraints()`](#sqlalchemy.engine.reflection.Inspector.get_multi_unique_constraints
    "sqlalchemy.engine.reflection.Inspector.get_multi_unique_constraints")'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Inspector.get_multi_unique_constraints()`](#sqlalchemy.engine.reflection.Inspector.get_multi_unique_constraints
    "sqlalchemy.engine.reflection.Inspector.get_multi_unique_constraints")'
- en: '[PRE55]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Return definition for the plain or materialized view called `view_name`.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 返回名为`view_name`的普通或物化视图的定义。
- en: 'Parameters:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`view_name` – Name of the view.'
  id: totrans-374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`view_name` – 视图的名称。'
- en: '`schema` – Optional, retrieve names from a non-default schema. For special
    quoting, use [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name").'
  id: totrans-375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` – 可选，从非默认模式检索名称。要进行特殊引用，请使用[`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")。'
- en: '`**kw` – Additional keyword argument to pass to the dialect specific implementation.
    See the documentation of the dialect in use for more information.'
  id: totrans-376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` – 传递给方言特定实现的附加关键字参数。有关更多信息，请参阅正在使用的方言的文档。'
- en: '[PRE56]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Return all non-materialized view names in schema.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 返回模式中的所有非材料化视图名称。
- en: 'Parameters:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`schema` – Optional, retrieve names from a non-default schema. For special
    quoting, use [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name").'
  id: totrans-380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` – 可选，从非默认模式中检索名称。对于特殊引用，请使用 [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")。'
- en: '`**kw` – Additional keyword argument to pass to the dialect specific implementation.
    See the documentation of the dialect in use for more information.'
  id: totrans-381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` – 传递给方言特定实现的其他关键字参数。有关更多信息，请参阅正在使用的方言的文档。'
- en: 'Changed in version 2.0: For those dialects that previously included the names
    of materialized views in this list (currently PostgreSQL), this method no longer
    returns the names of materialized views. the [`Inspector.get_materialized_view_names()`](#sqlalchemy.engine.reflection.Inspector.get_materialized_view_names
    "sqlalchemy.engine.reflection.Inspector.get_materialized_view_names") method should
    be used instead.'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 2.0 开始更改：对于以前在此列表中包括材料化视图名称的方言（当前为 PostgreSQL），此方法不再返回材料化视图的名称。应改为使用 [`Inspector.get_materialized_view_names()`](#sqlalchemy.engine.reflection.Inspector.get_materialized_view_names
    "sqlalchemy.engine.reflection.Inspector.get_materialized_view_names") 方法。
- en: See also
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Inspector.get_materialized_view_names()`](#sqlalchemy.engine.reflection.Inspector.get_materialized_view_names
    "sqlalchemy.engine.reflection.Inspector.get_materialized_view_names")'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Inspector.get_materialized_view_names()`](#sqlalchemy.engine.reflection.Inspector.get_materialized_view_names
    "sqlalchemy.engine.reflection.Inspector.get_materialized_view_names")'
- en: '[PRE57]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Check the existence of a particular index name in the database.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 检查数据库中特定索引名称的存在。
- en: 'Parameters:'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`table_name` – the name of the table the index belongs to'
  id: totrans-388
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`table_name` – 索引所属表的名称'
- en: '`index_name` – the name of the index to check'
  id: totrans-389
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index_name` – 要检查的索引名称'
- en: '`schema` – schema name to query, if not the default schema.'
  id: totrans-390
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` – 查询的模式名称，如果不是默认模式。'
- en: '`**kw` – Additional keyword argument to pass to the dialect specific implementation.
    See the documentation of the dialect in use for more information.'
  id: totrans-391
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` – 传递给方言特定实现的其他关键字参数。有关更多信息，请参阅正在使用的方言的文档。'
- en: New in version 2.0.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0 中的新功能。
- en: '[PRE58]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Return True if the backend has a schema with the given name.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 如果后端具有给定名称的模式，则返回 True。
- en: 'Parameters:'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`schema_name` – name of the schema to check'
  id: totrans-396
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema_name` – 要检查的模式名称'
- en: '`**kw` – Additional keyword argument to pass to the dialect specific implementation.
    See the documentation of the dialect in use for more information.'
  id: totrans-397
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` – 传递给方言特定实现的其他关键字参数。有关更多信息，请参阅正在使用的方言的文档。'
- en: New in version 2.0.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0 中的新功能。
- en: '[PRE59]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Return True if the backend has a sequence with the given name.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 如果后端具有给定名称的序列，则返回 True。
- en: 'Parameters:'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`sequence_name` – name of the sequence to check'
  id: totrans-402
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sequence_name` – 要检查的序列名称'
- en: '`schema` – schema name to query, if not the default schema.'
  id: totrans-403
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` – 查询的模式名称，如果不是默认模式。'
- en: '`**kw` – Additional keyword argument to pass to the dialect specific implementation.
    See the documentation of the dialect in use for more information.'
  id: totrans-404
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` – 传递给方言特定实现的其他关键字参数。有关更多信息，请参阅正在使用的方言的文档。'
- en: New in version 1.4.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中的新功能。
- en: '[PRE60]'
  id: totrans-406
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Return True if the backend has a table, view, or temporary table of the given
    name.
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 如果后端具有给定名称的表、视图或临时表，则返回 True。
- en: 'Parameters:'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`table_name` – name of the table to check'
  id: totrans-409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`table_name` – 要检查的表名称'
- en: '`schema` – schema name to query, if not the default schema.'
  id: totrans-410
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` – 查询的模式名称，如果不是默认模式。'
- en: '`**kw` – Additional keyword argument to pass to the dialect specific implementation.
    See the documentation of the dialect in use for more information.'
  id: totrans-411
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` – 传递给方言特定实现的其他关键字参数。有关更多信息，请参阅正在使用的方言的文档。'
- en: 'New in version 1.4: - the [`Inspector.has_table()`](#sqlalchemy.engine.reflection.Inspector.has_table
    "sqlalchemy.engine.reflection.Inspector.has_table") method replaces the `Engine.has_table()`
    method.'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4 开始：- [`Inspector.has_table()`](#sqlalchemy.engine.reflection.Inspector.has_table
    "sqlalchemy.engine.reflection.Inspector.has_table") 方法替换了 `Engine.has_table()`
    方法。
- en: 'Changed in version 2.0::: [`Inspector.has_table()`](#sqlalchemy.engine.reflection.Inspector.has_table
    "sqlalchemy.engine.reflection.Inspector.has_table") now formally supports checking
    for additional table-like objects:'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 2.0 开始更改：[`Inspector.has_table()`](#sqlalchemy.engine.reflection.Inspector.has_table
    "sqlalchemy.engine.reflection.Inspector.has_table") 现在正式支持检查额外的类似表的对象：
- en: any type of views (plain or materialized)
  id: totrans-414
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何类型的视图（普通或材料化）
- en: temporary tables of any kind
  id: totrans-415
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何类型的临时表
- en: Previously, these two checks were not formally specified and different dialects
    would vary in their behavior. The dialect testing suite now includes tests for
    all of these object types and should be supported by all SQLAlchemy-included dialects.
    Support among third party dialects may be lagging, however.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，这两个检查没有正式指定，并且不同的方言在行为上会有所不同。方言测试套件现在包括所有这些对象类型的测试，并且应该由所有包含 SQLAlchemy 的方言支持。但是，第三方方言中的支持可能滞后。
- en: '[PRE61]'
  id: totrans-417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Given a [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object, load its internal constructs based on introspection.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    对象，根据内省加载其内部构造。
- en: 'This is the underlying method used by most dialects to produce table reflection.
    Direct usage is like:'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 这是大多数方言用于生成表反射的底层方法。直接用法如下：
- en: '[PRE63]'
  id: totrans-421
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Changed in version 1.4: Renamed from `reflecttable` to `reflect_table`'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4 开始更改：从 `reflecttable` 更名为 `reflect_table`
- en: 'Parameters:'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`table` – a [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    instance.'
  id: totrans-424
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`table` – 一个 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    实例。'
- en: '`include_columns` – a list of string column names to include in the reflection
    process. If `None`, all columns are reflected.'
  id: totrans-425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`include_columns` – 要包含在反射过程中的字符串列名列表。如果为 `None`，则反射所有列。'
- en: '[PRE64]'
  id: totrans-426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Return dependency-sorted table and foreign key constraint names referred to
    within multiple schemas.
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 返回在多个模式中引用的依赖项排序的表和外键约束名称。
- en: This method may be compared to [`Inspector.get_sorted_table_and_fkc_names()`](#sqlalchemy.engine.reflection.Inspector.get_sorted_table_and_fkc_names
    "sqlalchemy.engine.reflection.Inspector.get_sorted_table_and_fkc_names"), which
    works on one schema at a time; here, the method is a generalization that will
    consider multiple schemas at once including that it will resolve for cross-schema
    foreign keys.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法可以与 [`Inspector.get_sorted_table_and_fkc_names()`](#sqlalchemy.engine.reflection.Inspector.get_sorted_table_and_fkc_names
    "sqlalchemy.engine.reflection.Inspector.get_sorted_table_and_fkc_names") 进行比较，后者一次只能处理一个模式；在这里，该方法是一个通用化的方法，一次可以考虑多个模式，包括解决跨模式外键的问题。
- en: New in version 2.0.
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0 中新增。
- en: '[PRE65]'
  id: totrans-430
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Dictionary representing the reflected elements corresponding to a [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") object.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 表示与 [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    对象对应的反射元素的字典。
- en: The [`ReflectedColumn`](#sqlalchemy.engine.interfaces.ReflectedColumn "sqlalchemy.engine.interfaces.ReflectedColumn")
    structure is returned by the `get_columns` method.
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ReflectedColumn`](#sqlalchemy.engine.interfaces.ReflectedColumn "sqlalchemy.engine.interfaces.ReflectedColumn")
    结构是由 `get_columns` 方法返回的。'
- en: '**Members**'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[autoincrement](#sqlalchemy.engine.interfaces.ReflectedColumn.autoincrement),
    [comment](#sqlalchemy.engine.interfaces.ReflectedColumn.comment), [computed](#sqlalchemy.engine.interfaces.ReflectedColumn.computed),
    [default](#sqlalchemy.engine.interfaces.ReflectedColumn.default), [dialect_options](#sqlalchemy.engine.interfaces.ReflectedColumn.dialect_options),
    [identity](#sqlalchemy.engine.interfaces.ReflectedColumn.identity), [name](#sqlalchemy.engine.interfaces.ReflectedColumn.name),
    [nullable](#sqlalchemy.engine.interfaces.ReflectedColumn.nullable), [type](#sqlalchemy.engine.interfaces.ReflectedColumn.type)'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: '[autoincrement](#sqlalchemy.engine.interfaces.ReflectedColumn.autoincrement),
    [comment](#sqlalchemy.engine.interfaces.ReflectedColumn.comment), [computed](#sqlalchemy.engine.interfaces.ReflectedColumn.computed),
    [default](#sqlalchemy.engine.interfaces.ReflectedColumn.default), [dialect_options](#sqlalchemy.engine.interfaces.ReflectedColumn.dialect_options),
    [identity](#sqlalchemy.engine.interfaces.ReflectedColumn.identity), [name](#sqlalchemy.engine.interfaces.ReflectedColumn.name),
    [nullable](#sqlalchemy.engine.interfaces.ReflectedColumn.nullable), [type](#sqlalchemy.engine.interfaces.ReflectedColumn.type)'
- en: '**Class signature**'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.engine.interfaces.ReflectedColumn`](#sqlalchemy.engine.interfaces.ReflectedColumn
    "sqlalchemy.engine.interfaces.ReflectedColumn") (`builtins.dict`)
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.engine.interfaces.ReflectedColumn`](#sqlalchemy.engine.interfaces.ReflectedColumn
    "sqlalchemy.engine.interfaces.ReflectedColumn") (`builtins.dict`)
- en: '[PRE66]'
  id: totrans-437
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: database-dependent autoincrement flag.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库相关的自增标志。
- en: This flag indicates if the column has a database-side “autoincrement” flag of
    some kind. Within SQLAlchemy, other kinds of columns may also act as an “autoincrement”
    column without necessarily having such a flag on them.
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 此标志指示列是否具有某种数据库端的 “autoincrement” 标志。在 SQLAlchemy 中，其他类型的列也可以充当 “autoincrement”
    列，而不一定在它们身上具有这样的标志。
- en: See [`Column.autoincrement`](metadata.html#sqlalchemy.schema.Column.params.autoincrement
    "sqlalchemy.schema.Column") for more background on “autoincrement”.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 “autoincrement” 的更多背景信息，请参阅 [`Column.autoincrement`](metadata.html#sqlalchemy.schema.Column.params.autoincrement
    "sqlalchemy.schema.Column")。
- en: '[PRE67]'
  id: totrans-441
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: comment for the column, if present. Only some dialects return this key
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 如果存在，为列添加注释。只有一些方言会返回此键。
- en: '[PRE68]'
  id: totrans-443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: indicates that this column is computed by the database. Only some dialects return
    this key.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 指示此列由数据库计算。只有一些方言会返回此键。
- en: 'New in version 1.3.16: - added support for computed reflection.'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.3.16 中新增：- 增加对计算反射的支持。
- en: '[PRE69]'
  id: totrans-446
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: column default expression as a SQL string
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 列默认表达式作为 SQL 字符串
- en: '[PRE70]'
  id: totrans-448
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Additional dialect-specific options detected for this reflected object
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 检测到此反射对象的附加方言特定选项
- en: '[PRE71]'
  id: totrans-450
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: indicates this column is an IDENTITY column. Only some dialects return this
    key.
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 指示此列为 IDENTITY 列。只有一些方言会返回此键。
- en: 'New in version 1.4: - added support for identity column reflection.'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中新增：- 增加对标识列反射的支持。
- en: '[PRE72]'
  id: totrans-453
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: column name
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 列名
- en: '[PRE73]'
  id: totrans-455
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: boolean flag if the column is NULL or NOT NULL
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 如果列为 NULL 或 NOT NULL，则为布尔标志
- en: '[PRE74]'
  id: totrans-457
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: column type represented as a [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") instance.
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 列类型表示为[`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine")
    实例。
- en: '[PRE75]'
  id: totrans-459
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: Represent the reflected elements of a computed column, corresponding to the
    [`Computed`](defaults.html#sqlalchemy.schema.Computed "sqlalchemy.schema.Computed")
    construct.
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 表示计算列的反射元素，对应于[`Computed`](defaults.html#sqlalchemy.schema.Computed "sqlalchemy.schema.Computed")
    结构。
- en: The [`ReflectedComputed`](#sqlalchemy.engine.interfaces.ReflectedComputed "sqlalchemy.engine.interfaces.ReflectedComputed")
    structure is part of the [`ReflectedColumn`](#sqlalchemy.engine.interfaces.ReflectedColumn
    "sqlalchemy.engine.interfaces.ReflectedColumn") structure, which is returned by
    the [`Inspector.get_columns()`](#sqlalchemy.engine.reflection.Inspector.get_columns
    "sqlalchemy.engine.reflection.Inspector.get_columns") method.
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ReflectedComputed`](#sqlalchemy.engine.interfaces.ReflectedComputed "sqlalchemy.engine.interfaces.ReflectedComputed")
    结构是 [`ReflectedColumn`](#sqlalchemy.engine.interfaces.ReflectedColumn "sqlalchemy.engine.interfaces.ReflectedColumn")
    结构的一部分，由 [`Inspector.get_columns()`](#sqlalchemy.engine.reflection.Inspector.get_columns
    "sqlalchemy.engine.reflection.Inspector.get_columns") 方法返回。'
- en: '**Members**'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[persisted](#sqlalchemy.engine.interfaces.ReflectedComputed.persisted), [sqltext](#sqlalchemy.engine.interfaces.ReflectedComputed.sqltext)'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: '[persisted](#sqlalchemy.engine.interfaces.ReflectedComputed.persisted)，[sqltext](#sqlalchemy.engine.interfaces.ReflectedComputed.sqltext)'
- en: '**Class signature**'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.engine.interfaces.ReflectedComputed`](#sqlalchemy.engine.interfaces.ReflectedComputed
    "sqlalchemy.engine.interfaces.ReflectedComputed") (`builtins.dict`)
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.engine.interfaces.ReflectedComputed`](#sqlalchemy.engine.interfaces.ReflectedComputed
    "sqlalchemy.engine.interfaces.ReflectedComputed") (`builtins.dict`)
- en: '[PRE76]'
  id: totrans-466
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: indicates if the value is stored in the table or computed on demand
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 指示值是存储在表中还是按需计算
- en: '[PRE77]'
  id: totrans-468
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: the expression used to generate this column returned as a string SQL expression
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 用于生成此列的表达式，返回为字符串 SQL 表达式
- en: '[PRE78]'
  id: totrans-470
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: Dictionary representing the reflected elements corresponding to [`CheckConstraint`](constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint").
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 字典表示反射元素，对应于[`CheckConstraint`](constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint")。
- en: The [`ReflectedCheckConstraint`](#sqlalchemy.engine.interfaces.ReflectedCheckConstraint
    "sqlalchemy.engine.interfaces.ReflectedCheckConstraint") structure is returned
    by the [`Inspector.get_check_constraints()`](#sqlalchemy.engine.reflection.Inspector.get_check_constraints
    "sqlalchemy.engine.reflection.Inspector.get_check_constraints") method.
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ReflectedCheckConstraint`](#sqlalchemy.engine.interfaces.ReflectedCheckConstraint
    "sqlalchemy.engine.interfaces.ReflectedCheckConstraint") 结构由 [`Inspector.get_check_constraints()`](#sqlalchemy.engine.reflection.Inspector.get_check_constraints
    "sqlalchemy.engine.reflection.Inspector.get_check_constraints") 方法返回。'
- en: '**Members**'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[dialect_options](#sqlalchemy.engine.interfaces.ReflectedCheckConstraint.dialect_options),
    [sqltext](#sqlalchemy.engine.interfaces.ReflectedCheckConstraint.sqltext)'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: '[dialect_options](#sqlalchemy.engine.interfaces.ReflectedCheckConstraint.dialect_options)，[sqltext](#sqlalchemy.engine.interfaces.ReflectedCheckConstraint.sqltext)'
- en: '**Class signature**'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.engine.interfaces.ReflectedCheckConstraint`](#sqlalchemy.engine.interfaces.ReflectedCheckConstraint
    "sqlalchemy.engine.interfaces.ReflectedCheckConstraint") (`builtins.dict`)
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.engine.interfaces.ReflectedCheckConstraint`](#sqlalchemy.engine.interfaces.ReflectedCheckConstraint
    "sqlalchemy.engine.interfaces.ReflectedCheckConstraint") (`builtins.dict`)
- en: '[PRE79]'
  id: totrans-477
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: Additional dialect-specific options detected for this check constraint
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 检测到此检查约束的附加方言特定选项
- en: New in version 1.3.8.
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.3.8 中新增。
- en: '[PRE80]'
  id: totrans-480
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: the check constraint’s SQL expression
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 检查约束的 SQL 表达式
- en: '[PRE81]'
  id: totrans-482
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: Dictionary representing the reflected elements corresponding to [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint").
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 字典表示对应于 [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") 的反射元素。
- en: The [`ReflectedForeignKeyConstraint`](#sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint
    "sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint") structure is returned
    by the [`Inspector.get_foreign_keys()`](#sqlalchemy.engine.reflection.Inspector.get_foreign_keys
    "sqlalchemy.engine.reflection.Inspector.get_foreign_keys") method.
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ReflectedForeignKeyConstraint`](#sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint
    "sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint") 结构是由 [`Inspector.get_foreign_keys()`](#sqlalchemy.engine.reflection.Inspector.get_foreign_keys
    "sqlalchemy.engine.reflection.Inspector.get_foreign_keys") 方法返回的。'
- en: '**Members**'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[constrained_columns](#sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint.constrained_columns),
    [options](#sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint.options),
    [referred_columns](#sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint.referred_columns),
    [referred_schema](#sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint.referred_schema),
    [referred_table](#sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint.referred_table)'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: '[constrained_columns](#sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint.constrained_columns),
    [options](#sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint.options),
    [referred_columns](#sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint.referred_columns),
    [referred_schema](#sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint.referred_schema),
    [referred_table](#sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint.referred_table)'
- en: '**Class signature**'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint`](#sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint
    "sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint") (`builtins.dict`)
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint`](#sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint
    "sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint") (`builtins.dict`)
- en: '[PRE82]'
  id: totrans-489
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: local column names which comprise the foreign key
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: 构成外键的本地列名称
- en: '[PRE83]'
  id: totrans-491
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Additional options detected for this foreign key constraint
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 这个外键约束检测到了额外的选项
- en: '[PRE84]'
  id: totrans-493
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: referred column names that correspond to `constrained_columns`
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 对应于 `constrained_columns` 的被引用列名称
- en: '[PRE85]'
  id: totrans-495
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: schema name of the table being referred
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 被引用表的架构名称
- en: '[PRE86]'
  id: totrans-497
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: name of the table being referred
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 被引用表的名称
- en: '[PRE87]'
  id: totrans-499
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: represent the reflected IDENTITY structure of a column, corresponding to the
    [`Identity`](defaults.html#sqlalchemy.schema.Identity "sqlalchemy.schema.Identity")
    construct.
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 表示列的反射 IDENTITY 结构，对应于 [`Identity`](defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity") 结构。
- en: The [`ReflectedIdentity`](#sqlalchemy.engine.interfaces.ReflectedIdentity "sqlalchemy.engine.interfaces.ReflectedIdentity")
    structure is part of the [`ReflectedColumn`](#sqlalchemy.engine.interfaces.ReflectedColumn
    "sqlalchemy.engine.interfaces.ReflectedColumn") structure, which is returned by
    the [`Inspector.get_columns()`](#sqlalchemy.engine.reflection.Inspector.get_columns
    "sqlalchemy.engine.reflection.Inspector.get_columns") method.
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ReflectedIdentity`](#sqlalchemy.engine.interfaces.ReflectedIdentity "sqlalchemy.engine.interfaces.ReflectedIdentity")
    结构是 [`ReflectedColumn`](#sqlalchemy.engine.interfaces.ReflectedColumn "sqlalchemy.engine.interfaces.ReflectedColumn")
    结构的一部分，由 [`Inspector.get_columns()`](#sqlalchemy.engine.reflection.Inspector.get_columns
    "sqlalchemy.engine.reflection.Inspector.get_columns") 方法返回。'
- en: '**Members**'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[always](#sqlalchemy.engine.interfaces.ReflectedIdentity.always), [cache](#sqlalchemy.engine.interfaces.ReflectedIdentity.cache),
    [cycle](#sqlalchemy.engine.interfaces.ReflectedIdentity.cycle), [increment](#sqlalchemy.engine.interfaces.ReflectedIdentity.increment),
    [maxvalue](#sqlalchemy.engine.interfaces.ReflectedIdentity.maxvalue), [minvalue](#sqlalchemy.engine.interfaces.ReflectedIdentity.minvalue),
    [nomaxvalue](#sqlalchemy.engine.interfaces.ReflectedIdentity.nomaxvalue), [nominvalue](#sqlalchemy.engine.interfaces.ReflectedIdentity.nominvalue),
    [on_null](#sqlalchemy.engine.interfaces.ReflectedIdentity.on_null), [order](#sqlalchemy.engine.interfaces.ReflectedIdentity.order),
    [start](#sqlalchemy.engine.interfaces.ReflectedIdentity.start)'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: '[always](#sqlalchemy.engine.interfaces.ReflectedIdentity.always), [cache](#sqlalchemy.engine.interfaces.ReflectedIdentity.cache),
    [cycle](#sqlalchemy.engine.interfaces.ReflectedIdentity.cycle), [increment](#sqlalchemy.engine.interfaces.ReflectedIdentity.increment),
    [maxvalue](#sqlalchemy.engine.interfaces.ReflectedIdentity.maxvalue), [minvalue](#sqlalchemy.engine.interfaces.ReflectedIdentity.minvalue),
    [nomaxvalue](#sqlalchemy.engine.interfaces.ReflectedIdentity.nomaxvalue), [nominvalue](#sqlalchemy.engine.interfaces.ReflectedIdentity.nominvalue),
    [on_null](#sqlalchemy.engine.interfaces.ReflectedIdentity.on_null), [order](#sqlalchemy.engine.interfaces.ReflectedIdentity.order),
    [start](#sqlalchemy.engine.interfaces.ReflectedIdentity.start)'
- en: '**Class signature**'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.engine.interfaces.ReflectedIdentity`](#sqlalchemy.engine.interfaces.ReflectedIdentity
    "sqlalchemy.engine.interfaces.ReflectedIdentity") (`builtins.dict`)
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.engine.interfaces.ReflectedIdentity`](#sqlalchemy.engine.interfaces.ReflectedIdentity
    "sqlalchemy.engine.interfaces.ReflectedIdentity")（`builtins.dict`）
- en: '[PRE88]'
  id: totrans-506
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: type of identity column
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 身份列的类型
- en: '[PRE89]'
  id: totrans-508
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: number of future values in the sequence which are calculated in advance.
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 预先计算的序列中的未来值的数量。
- en: '[PRE90]'
  id: totrans-510
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: allows the sequence to wrap around when the maxvalue or minvalue has been reached.
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: 允许序列在达到最大值或最小值时环绕。
- en: '[PRE91]'
  id: totrans-512
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: increment value of the sequence
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 序列的增量值
- en: '[PRE92]'
  id: totrans-514
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: the maximum value of the sequence.
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 序列的最大值。
- en: '[PRE93]'
  id: totrans-516
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: the minimum value of the sequence.
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: 序列的最小值。
- en: '[PRE94]'
  id: totrans-518
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: no maximum value of the sequence.
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: 没有序列的最大值。
- en: '[PRE95]'
  id: totrans-520
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: no minimum value of the sequence.
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 没有序列的最小值。
- en: '[PRE96]'
  id: totrans-522
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: indicates ON NULL
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 表示 ON NULL
- en: '[PRE97]'
  id: totrans-524
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: if true, renders the ORDER keyword.
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为真，则渲染 ORDER 关键字。
- en: '[PRE98]'
  id: totrans-526
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: starting index of the sequence
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 序列的起始索引
- en: '[PRE99]'
  id: totrans-528
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: Dictionary representing the reflected elements corresponding to [`Index`](constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index").
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: 表示与[`Index`](constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")对应的反射元素的字典。
- en: The [`ReflectedIndex`](#sqlalchemy.engine.interfaces.ReflectedIndex "sqlalchemy.engine.interfaces.ReflectedIndex")
    structure is returned by the [`Inspector.get_indexes()`](#sqlalchemy.engine.reflection.Inspector.get_indexes
    "sqlalchemy.engine.reflection.Inspector.get_indexes") method.
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ReflectedIndex`](#sqlalchemy.engine.interfaces.ReflectedIndex "sqlalchemy.engine.interfaces.ReflectedIndex")
    结构由 [`Inspector.get_indexes()`](#sqlalchemy.engine.reflection.Inspector.get_indexes
    "sqlalchemy.engine.reflection.Inspector.get_indexes") 方法返回。'
- en: '**Members**'
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[column_names](#sqlalchemy.engine.interfaces.ReflectedIndex.column_names),
    [column_sorting](#sqlalchemy.engine.interfaces.ReflectedIndex.column_sorting),
    [dialect_options](#sqlalchemy.engine.interfaces.ReflectedIndex.dialect_options),
    [duplicates_constraint](#sqlalchemy.engine.interfaces.ReflectedIndex.duplicates_constraint),
    [expressions](#sqlalchemy.engine.interfaces.ReflectedIndex.expressions), [include_columns](#sqlalchemy.engine.interfaces.ReflectedIndex.include_columns),
    [name](#sqlalchemy.engine.interfaces.ReflectedIndex.name), [unique](#sqlalchemy.engine.interfaces.ReflectedIndex.unique)'
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: '[column_names](#sqlalchemy.engine.interfaces.ReflectedIndex.column_names)、[column_sorting](#sqlalchemy.engine.interfaces.ReflectedIndex.column_sorting)、[dialect_options](#sqlalchemy.engine.interfaces.ReflectedIndex.dialect_options)、[duplicates_constraint](#sqlalchemy.engine.interfaces.ReflectedIndex.duplicates_constraint)、[expressions](#sqlalchemy.engine.interfaces.ReflectedIndex.expressions)、[include_columns](#sqlalchemy.engine.interfaces.ReflectedIndex.include_columns)、[name](#sqlalchemy.engine.interfaces.ReflectedIndex.name)、[unique](#sqlalchemy.engine.interfaces.ReflectedIndex.unique)'
- en: '**Class signature**'
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.engine.interfaces.ReflectedIndex`](#sqlalchemy.engine.interfaces.ReflectedIndex
    "sqlalchemy.engine.interfaces.ReflectedIndex") (`builtins.dict`)
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.engine.interfaces.ReflectedIndex`](#sqlalchemy.engine.interfaces.ReflectedIndex
    "sqlalchemy.engine.interfaces.ReflectedIndex")（`builtins.dict`）
- en: '[PRE100]'
  id: totrans-535
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: column names which the index references. An element of this list is `None` if
    it’s an expression and is returned in the `expressions` list.
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: 索引引用的列名。如果列表中的元素是表达式，则为`None`，并在`expressions`列表中返回。
- en: '[PRE101]'
  id: totrans-537
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: optional dict mapping column names or expressions to tuple of sort keywords,
    which may include `asc`, `desc`, `nulls_first`, `nulls_last`.
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: 可选字典，将列名或表达式映射到排序关键字元组，可能包括`asc`、`desc`、`nulls_first`、`nulls_last`。
- en: New in version 1.3.5.
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.3.5 中的内容。
- en: '[PRE102]'
  id: totrans-540
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: Additional dialect-specific options detected for this index
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: 检测到的此索引的附加方言特定选项
- en: '[PRE103]'
  id: totrans-542
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: Indicates if this index mirrors a constraint with this name
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: 指示此索引是否反映了具有此名称的约束
- en: '[PRE104]'
  id: totrans-544
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: Expressions that compose the index. This list, when present, contains both plain
    column names (that are also in `column_names`) and expressions (that are `None`
    in `column_names`).
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: 组成索引的表达式。当存在时，此列表包含普通列名（也在`column_names`中）和表达式（在`column_names`中为`None`）。
- en: '[PRE105]'
  id: totrans-546
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: columns to include in the INCLUDE clause for supporting databases.
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: 在支持的数据库中包含在 INCLUDE 子句中的列。
- en: 'Deprecated since version 2.0: Legacy value, will be replaced with `index_dict["dialect_options"]["<dialect
    name>_include"]`'
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 2.0 起已弃用：遗留值，将被替换为`index_dict["dialect_options"]["<dialect name>_include"]`
- en: '[PRE106]'
  id: totrans-549
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: index name
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: 索引名称
- en: '[PRE107]'
  id: totrans-551
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: whether or not the index has a unique flag
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: 索引是否具有唯一标志
- en: '[PRE108]'
  id: totrans-553
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: Dictionary representing the reflected elements corresponding to [`PrimaryKeyConstraint`](constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint").
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: 表示与[`PrimaryKeyConstraint`](constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint")对应的反射元素的字典。
- en: The [`ReflectedPrimaryKeyConstraint`](#sqlalchemy.engine.interfaces.ReflectedPrimaryKeyConstraint
    "sqlalchemy.engine.interfaces.ReflectedPrimaryKeyConstraint") structure is returned
    by the [`Inspector.get_pk_constraint()`](#sqlalchemy.engine.reflection.Inspector.get_pk_constraint
    "sqlalchemy.engine.reflection.Inspector.get_pk_constraint") method.
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ReflectedPrimaryKeyConstraint`](#sqlalchemy.engine.interfaces.ReflectedPrimaryKeyConstraint
    "sqlalchemy.engine.interfaces.ReflectedPrimaryKeyConstraint") 结构由 [`Inspector.get_pk_constraint()`](#sqlalchemy.engine.reflection.Inspector.get_pk_constraint
    "sqlalchemy.engine.reflection.Inspector.get_pk_constraint") 方法返回。'
- en: '**Members**'
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[constrained_columns](#sqlalchemy.engine.interfaces.ReflectedPrimaryKeyConstraint.constrained_columns),
    [dialect_options](#sqlalchemy.engine.interfaces.ReflectedPrimaryKeyConstraint.dialect_options)'
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: '[constrained_columns](#sqlalchemy.engine.interfaces.ReflectedPrimaryKeyConstraint.constrained_columns),
    [dialect_options](#sqlalchemy.engine.interfaces.ReflectedPrimaryKeyConstraint.dialect_options)'
- en: '**Class signature**'
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.engine.interfaces.ReflectedPrimaryKeyConstraint`](#sqlalchemy.engine.interfaces.ReflectedPrimaryKeyConstraint
    "sqlalchemy.engine.interfaces.ReflectedPrimaryKeyConstraint") (`builtins.dict`)
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.engine.interfaces.ReflectedPrimaryKeyConstraint`](#sqlalchemy.engine.interfaces.ReflectedPrimaryKeyConstraint
    "sqlalchemy.engine.interfaces.ReflectedPrimaryKeyConstraint") (`builtins.dict`)
- en: '[PRE109]'
  id: totrans-560
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: column names which comprise the primary key
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: 组成主键的列名
- en: '[PRE110]'
  id: totrans-562
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: Additional dialect-specific options detected for this primary key
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: 检测到针对此主键的其他方言特定选项
- en: '[PRE111]'
  id: totrans-564
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: Dictionary representing the reflected elements corresponding to [`UniqueConstraint`](constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint").
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: 表示与 [`UniqueConstraint`](constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") 对应的反映元素的字典。
- en: The [`ReflectedUniqueConstraint`](#sqlalchemy.engine.interfaces.ReflectedUniqueConstraint
    "sqlalchemy.engine.interfaces.ReflectedUniqueConstraint") structure is returned
    by the [`Inspector.get_unique_constraints()`](#sqlalchemy.engine.reflection.Inspector.get_unique_constraints
    "sqlalchemy.engine.reflection.Inspector.get_unique_constraints") method.
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ReflectedUniqueConstraint`](#sqlalchemy.engine.interfaces.ReflectedUniqueConstraint
    "sqlalchemy.engine.interfaces.ReflectedUniqueConstraint") 结构由 [`Inspector.get_unique_constraints()`](#sqlalchemy.engine.reflection.Inspector.get_unique_constraints
    "sqlalchemy.engine.reflection.Inspector.get_unique_constraints") 方法返回。'
- en: '**Members**'
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[column_names](#sqlalchemy.engine.interfaces.ReflectedUniqueConstraint.column_names),
    [dialect_options](#sqlalchemy.engine.interfaces.ReflectedUniqueConstraint.dialect_options),
    [duplicates_index](#sqlalchemy.engine.interfaces.ReflectedUniqueConstraint.duplicates_index)'
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: '[column_names](#sqlalchemy.engine.interfaces.ReflectedUniqueConstraint.column_names),
    [dialect_options](#sqlalchemy.engine.interfaces.ReflectedUniqueConstraint.dialect_options),
    [duplicates_index](#sqlalchemy.engine.interfaces.ReflectedUniqueConstraint.duplicates_index)'
- en: '**Class signature**'
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.engine.interfaces.ReflectedUniqueConstraint`](#sqlalchemy.engine.interfaces.ReflectedUniqueConstraint
    "sqlalchemy.engine.interfaces.ReflectedUniqueConstraint") (`builtins.dict`)
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.engine.interfaces.ReflectedUniqueConstraint`](#sqlalchemy.engine.interfaces.ReflectedUniqueConstraint
    "sqlalchemy.engine.interfaces.ReflectedUniqueConstraint") (`builtins.dict`)
- en: '[PRE112]'
  id: totrans-571
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: column names which comprise the unique constraint
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: 组成唯一约束的列名
- en: '[PRE113]'
  id: totrans-573
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: Additional dialect-specific options detected for this unique constraint
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: 检测到针对此唯一约束的其他方言特定选项
- en: '[PRE114]'
  id: totrans-575
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: Indicates if this unique constraint duplicates an index with this name
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: 指示此唯一约束是否重复了具有此名称的索引
- en: '[PRE115]'
  id: totrans-577
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: Dictionary representing the reflected comment corresponding to the `Table.comment`
    attribute.
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: 表示与 `Table.comment` 属性对应的反映注释的字典。
- en: The [`ReflectedTableComment`](#sqlalchemy.engine.interfaces.ReflectedTableComment
    "sqlalchemy.engine.interfaces.ReflectedTableComment") structure is returned by
    the [`Inspector.get_table_comment()`](#sqlalchemy.engine.reflection.Inspector.get_table_comment
    "sqlalchemy.engine.reflection.Inspector.get_table_comment") method.
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ReflectedTableComment`](#sqlalchemy.engine.interfaces.ReflectedTableComment
    "sqlalchemy.engine.interfaces.ReflectedTableComment") 结构由 [`Inspector.get_table_comment()`](#sqlalchemy.engine.reflection.Inspector.get_table_comment
    "sqlalchemy.engine.reflection.Inspector.get_table_comment") 方法返回。'
- en: '**Members**'
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[text](#sqlalchemy.engine.interfaces.ReflectedTableComment.text)'
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: '[text](#sqlalchemy.engine.interfaces.ReflectedTableComment.text)'
- en: '**Class signature**'
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.engine.interfaces.ReflectedTableComment`](#sqlalchemy.engine.interfaces.ReflectedTableComment
    "sqlalchemy.engine.interfaces.ReflectedTableComment") (`builtins.dict`)
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.engine.interfaces.ReflectedTableComment`](#sqlalchemy.engine.interfaces.ReflectedTableComment
    "sqlalchemy.engine.interfaces.ReflectedTableComment") (`builtins.dict`)
- en: '[PRE116]'
  id: totrans-584
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: 'text of the comment  ## Reflecting with Database-Agnostic Types'
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: '注释的文本  ## 使用与数据库无关的类型反射'
- en: When the columns of a table are reflected, using either the [`Table.autoload_with`](metadata.html#sqlalchemy.schema.Table.params.autoload_with
    "sqlalchemy.schema.Table") parameter of [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") or the [`Inspector.get_columns()`](#sqlalchemy.engine.reflection.Inspector.get_columns
    "sqlalchemy.engine.reflection.Inspector.get_columns") method of [`Inspector`](#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector"), the datatypes will be as specific as
    possible to the target database. This means that if an “integer” datatype is reflected
    from a MySQL database, the type will be represented by the [`sqlalchemy.dialects.mysql.INTEGER`](../dialects/mysql.html#sqlalchemy.dialects.mysql.INTEGER
    "sqlalchemy.dialects.mysql.INTEGER") class, which includes MySQL-specific attributes
    such as “display_width”. Or on PostgreSQL, a PostgreSQL-specific datatype such
    as [`sqlalchemy.dialects.postgresql.INTERVAL`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.INTERVAL
    "sqlalchemy.dialects.postgresql.INTERVAL") or [`sqlalchemy.dialects.postgresql.ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM") may be returned.
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: 当表的列被反映时，可以使用 [`Table.autoload_with`](metadata.html#sqlalchemy.schema.Table.params.autoload_with
    "sqlalchemy.schema.Table") 参数或 [`Inspector.get_columns()`](#sqlalchemy.engine.reflection.Inspector.get_columns
    "sqlalchemy.engine.reflection.Inspector.get_columns") 方法，通过 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 或 [`Inspector`](#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector")，数据类型将尽可能与目标数据库特定。这意味着，如果从 MySQL 数据库反映出一个“integer”数据类型，则该类型将由
    [`sqlalchemy.dialects.mysql.INTEGER`](../dialects/mysql.html#sqlalchemy.dialects.mysql.INTEGER
    "sqlalchemy.dialects.mysql.INTEGER") 类表示，其中包括 MySQL 特定属性，如“display_width”。或者在
    PostgreSQL 上，可能返回 PostgreSQL 特定的数据类型，如 [`sqlalchemy.dialects.postgresql.INTERVAL`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.INTERVAL
    "sqlalchemy.dialects.postgresql.INTERVAL") 或 [`sqlalchemy.dialects.postgresql.ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM")。
- en: There is a use case for reflection which is that a given [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") is to be transferred to a different vendor database.
    To suit this use case, there is a technique by which these vendor-specific datatypes
    can be converted on the fly to be instance of SQLAlchemy backend-agnostic datatypes,
    for the examples above types such as [`Integer`](type_basics.html#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer"), [`Interval`](type_basics.html#sqlalchemy.types.Interval
    "sqlalchemy.types.Interval") and [`Enum`](type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum"). This may be achieved by intercepting the column reflection
    using the [`DDLEvents.column_reflect()`](events.html#sqlalchemy.events.DDLEvents.column_reflect
    "sqlalchemy.events.DDLEvents.column_reflect") event in conjunction with the [`TypeEngine.as_generic()`](type_api.html#sqlalchemy.types.TypeEngine.as_generic
    "sqlalchemy.types.TypeEngine.as_generic") method.
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: 反映的一个使用案例是将给定的 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    转移到不同的供应商数据库。为了适应这种使用情况，有一种技术，可以将这些供应商特定的数据类型即时转换为 SQLAlchemy 后端不可知数据类型的实例，例如上面的类型，如
    [`Integer`](type_basics.html#sqlalchemy.types.Integer "sqlalchemy.types.Integer")、[`Interval`](type_basics.html#sqlalchemy.types.Interval
    "sqlalchemy.types.Interval") 和 [`Enum`](type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum")。这可以通过拦截列反映并使用 [`DDLEvents.column_reflect()`](events.html#sqlalchemy.events.DDLEvents.column_reflect
    "sqlalchemy.events.DDLEvents.column_reflect") 事件与 [`TypeEngine.as_generic()`](type_api.html#sqlalchemy.types.TypeEngine.as_generic
    "sqlalchemy.types.TypeEngine.as_generic") 方法来实现。
- en: 'Given a table in MySQL (chosen because MySQL has a lot of vendor-specific datatypes
    and options):'
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: 给定 MySQL 中的一个表（选择 MySQL 是因为 MySQL 有很多特定于供应商的数据类型和选项）：
- en: '[PRE117]'
  id: totrans-589
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: 'The above table includes MySQL-only integer types `MEDIUMINT` and `TINYINT`
    as well as a `VARCHAR` that includes the MySQL-only `CHARACTER SET` option. If
    we reflect this table normally, it produces a [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object that will contain those MySQL-specific datatypes
    and options:'
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: 上述表包括仅限于 MySQL 的整数类型 `MEDIUMINT` 和 `TINYINT`，以及一个包含 MySQL 专有 `CHARACTER SET`
    选项的 `VARCHAR`。如果我们正常反映这个表，它将生成一个包含那些 MySQL 特定数据类型和选项的 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 对象。
- en: '[PRE118]'
  id: totrans-591
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: 'The above example reflects the above table schema into a new [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object. We can then, for demonstration purposes, print
    out the MySQL-specific “CREATE TABLE” statement using the [`CreateTable`](ddl.html#sqlalchemy.schema.CreateTable
    "sqlalchemy.schema.CreateTable") construct:'
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示例将上述表模式反映到一个新的 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    对象中。然后，我们可以出于演示目的，使用 [`CreateTable`](ddl.html#sqlalchemy.schema.CreateTable "sqlalchemy.schema.CreateTable")
    构造打印出特定于 MySQL 的“CREATE TABLE”语句：
- en: '[PRE119]'
  id: totrans-593
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: 'Above, the MySQL-specific datatypes and options were maintained. If we wanted
    a [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table") that
    we could instead transfer cleanly to another database vendor, replacing the special
    datatypes [`sqlalchemy.dialects.mysql.MEDIUMINT`](../dialects/mysql.html#sqlalchemy.dialects.mysql.MEDIUMINT
    "sqlalchemy.dialects.mysql.MEDIUMINT") and [`sqlalchemy.dialects.mysql.TINYINT`](../dialects/mysql.html#sqlalchemy.dialects.mysql.TINYINT
    "sqlalchemy.dialects.mysql.TINYINT") with [`Integer`](type_basics.html#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer"), we can choose instead to “genericize” the datatypes
    on this table, or otherwise change them in any way we’d like, by establishing
    a handler using the [`DDLEvents.column_reflect()`](events.html#sqlalchemy.events.DDLEvents.column_reflect
    "sqlalchemy.events.DDLEvents.column_reflect") event. The custom handler will make
    use of the [`TypeEngine.as_generic()`](type_api.html#sqlalchemy.types.TypeEngine.as_generic
    "sqlalchemy.types.TypeEngine.as_generic") method to convert the above MySQL-specific
    type objects into generic ones, by replacing the `"type"` entry within the column
    dictionary entry that is passed to the event handler. The format of this dictionary
    is described at [`Inspector.get_columns()`](#sqlalchemy.engine.reflection.Inspector.get_columns
    "sqlalchemy.engine.reflection.Inspector.get_columns"):'
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，保留了特定于 MySQL 的数据类型和选项。如果我们想要一个能够干净地转移到另一个数据库供应商的 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")，并且用 [`Integer`](type_basics.html#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer") 替换特殊数据类型 [`sqlalchemy.dialects.mysql.MEDIUMINT`](../dialects/mysql.html#sqlalchemy.dialects.mysql.MEDIUMINT
    "sqlalchemy.dialects.mysql.MEDIUMINT") 和 [`sqlalchemy.dialects.mysql.TINYINT`](../dialects/mysql.html#sqlalchemy.dialects.mysql.TINYINT
    "sqlalchemy.dialects.mysql.TINYINT")，我们可以选择在此表上“泛型化”数据类型，或以任何我们喜欢的方式进行更改，通过使用
    [`DDLEvents.column_reflect()`](events.html#sqlalchemy.events.DDLEvents.column_reflect
    "sqlalchemy.events.DDLEvents.column_reflect") 事件建立一个处理程序。自定义处理程序将使用 [`TypeEngine.as_generic()`](type_api.html#sqlalchemy.types.TypeEngine.as_generic
    "sqlalchemy.types.TypeEngine.as_generic") 方法将上述 MySQL 特定类型对象转换为通用类型，方法是通过将传递给事件处理程序的列字典条目中的
    `"type"` 条目替换为泛型。此字典的格式在 [`Inspector.get_columns()`](#sqlalchemy.engine.reflection.Inspector.get_columns
    "sqlalchemy.engine.reflection.Inspector.get_columns") 中描述：
- en: '[PRE120]'
  id: totrans-595
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: 'We now get a new [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    that is generic and uses [`Integer`](type_basics.html#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer") for those datatypes. We can now emit a “CREATE TABLE”
    statement for example on a PostgreSQL database:'
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们得到了一个新的通用 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    并使用 [`Integer`](type_basics.html#sqlalchemy.types.Integer "sqlalchemy.types.Integer")
    作为那些数据类型。我们现在可以在 PostgreSQL 数据库上发出一个“CREATE TABLE”语句，例如：
- en: '[PRE121]'
  id: totrans-597
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: Noting above also that SQLAlchemy will usually make a decent guess for other
    behaviors, such as that the MySQL `AUTO_INCREMENT` directive is represented in
    PostgreSQL most closely using the `SERIAL` auto-incrementing datatype.
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: 还需要注意的是，SQLAlchemy 通常会对其他行为做出合理的猜测，例如，MySQL 的 `AUTO_INCREMENT` 指令在 PostgreSQL
    中最接近地使用 `SERIAL` 自增数据类型表示。
- en: 'New in version 1.4: Added the [`TypeEngine.as_generic()`](type_api.html#sqlalchemy.types.TypeEngine.as_generic
    "sqlalchemy.types.TypeEngine.as_generic") method and additionally improved the
    use of the [`DDLEvents.column_reflect()`](events.html#sqlalchemy.events.DDLEvents.column_reflect
    "sqlalchemy.events.DDLEvents.column_reflect") event such that it may be applied
    to a [`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    object for convenience.'
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 新增了 [`TypeEngine.as_generic()`](type_api.html#sqlalchemy.types.TypeEngine.as_generic
    "sqlalchemy.types.TypeEngine.as_generic") 方法，并进一步改进了 [`DDLEvents.column_reflect()`](events.html#sqlalchemy.events.DDLEvents.column_reflect
    "sqlalchemy.events.DDLEvents.column_reflect") 事件的使用，以便方便地应用于 [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") 对象。
- en: Limitations of Reflection
  id: totrans-600
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 反射的局限性
- en: 'It’s important to note that the reflection process recreates [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") metadata using only information which is represented
    in the relational database. This process by definition cannot restore aspects
    of a schema that aren’t actually stored in the database. State which is not available
    from reflection includes but is not limited to:'
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，反射过程仅使用在关系数据库中表示的信息重新创建 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 元数据。根据定义，这个过程无法恢复数据库中实际未存储的模式方面。反射无法获取的状态包括但不限于：
- en: Client side defaults, either Python functions or SQL expressions defined using
    the `default` keyword of [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    (note this is separate from `server_default`, which specifically is what’s available
    via reflection).
  id: totrans-602
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端默认值，即使用 [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    的 `default` 关键字定义的 Python 函数或 SQL 表达式（请注意，这与通过反射获得的 `server_default` 是分开的）。
- en: Column information, e.g. data that might have been placed into the [`Column.info`](metadata.html#sqlalchemy.schema.Column.info
    "sqlalchemy.schema.Column.info") dictionary
  id: totrans-603
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列信息，例如可能放入 [`Column.info`](metadata.html#sqlalchemy.schema.Column.info "sqlalchemy.schema.Column.info")
    字典中的数据
- en: The value of the `.quote` setting for [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") or [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")
  id: totrans-604
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.quote` 设置对于 [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    或 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table") 的价值。'
- en: The association of a particular [`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") with a given [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")
  id: totrans-605
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特定 [`Sequence`](defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    与给定 [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    的关联
- en: The relational database also in many cases reports on table metadata in a different
    format than what was specified in SQLAlchemy. The [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects returned from reflection cannot be always relied
    upon to produce the identical DDL as the original Python-defined [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects. Areas where this occurs includes server defaults,
    column-associated sequences and various idiosyncrasies regarding constraints and
    datatypes. Server side defaults may be returned with cast directives (typically
    PostgreSQL will include a `::<type>` cast) or different quoting patterns than
    originally specified.
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，关系数据库报告的表元数据格式与 SQLAlchemy 中指定的格式不同。从反射返回的 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 对象不能始终依赖于生成与原始 Python 定义的 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 对象相同的 DDL。发生这种情况的地方包括服务器默认值、与列关联的序列以及有关约束和数据类型的各种特殊情况。服务器端默认值可能会带有转换指令（通常
    PostgreSQL 将包括一个 `::<type>` 转换）或不同于最初指定的引号模式。
- en: Another category of limitation includes schema structures for which reflection
    is only partially or not yet defined. Recent improvements to reflection allow
    things like views, indexes and foreign key options to be reflected. As of this
    writing, structures like CHECK constraints, table comments, and triggers are not
    reflected.
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: 另一类限制包括反射仅部分或尚未定义的模式结构。最近对反射的改进允许反映视图、索引和外键选项等内容。截至本文撰写时，像 CHECK 约束、表注释和触发器等结构并未反映。
- en: '## Overriding Reflected Columns'
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: '## 覆盖反射列'
- en: 'Individual columns can be overridden with explicit values when reflecting tables;
    this is handy for specifying custom datatypes, constraints such as primary keys
    that may not be configured within the database, etc.:'
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: 在反射表时，可以使用显式值覆盖单个列；这对于指定自定义数据类型、在数据库中未配置的主键等约束非常方便：
- en: '[PRE122]'
  id: totrans-610
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: See also
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Working with Custom Types and Reflection](custom_types.html#custom-and-decorated-types-reflection)
    - illustrates how the above column override technique applies to the use of custom
    datatypes with table reflection.'
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用自定义类型和反射](custom_types.html#custom-and-decorated-types-reflection) - 演示了上述列覆盖技术如何应用于使用自定义数据类型进行表反射。'
- en: Reflecting Views
  id: totrans-613
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 反射视图
- en: 'The reflection system can also reflect views. Basic usage is the same as that
    of a table:'
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: 反射系统也可以反映视图。基本用法与表相同：
- en: '[PRE123]'
  id: totrans-615
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: Above, `my_view` is a [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object with [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    objects representing the names and types of each column within the view “some_view”.
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面，`my_view`是一个[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象，其中包含代表视图“some_view”中每个列的名称和类型的[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象。
- en: Usually, it’s desired to have at least a primary key constraint when reflecting
    a view, if not foreign keys as well. View reflection doesn’t extrapolate these
    constraints.
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在反射视图时，至少希望有一个主键约束，如果可能的话还有外键。视图反射不会推断这些约束。
- en: 'Use the “override” technique for this, specifying explicitly those columns
    which are part of the primary key or have foreign key constraints:'
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
  zh: 使用“override”技术，明确指定那些是主键或具有外键约束的列：
- en: '[PRE124]'
  id: totrans-619
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: Reflecting All Tables at Once
  id: totrans-620
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一次性反射所有表
- en: 'The [`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    object can also get a listing of tables and reflect the full set. This is achieved
    by using the [`reflect()`](metadata.html#sqlalchemy.schema.MetaData.reflect "sqlalchemy.schema.MetaData.reflect")
    method. After calling it, all located tables are present within the [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object’s dictionary of tables:'
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")对象还可以获取表列表并反射完整集合。通过使用[`reflect()`](metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect")方法实现。调用后，所有定位的表都存在于[`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")对象的表字典中：'
- en: '[PRE125]'
  id: totrans-622
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '`metadata.reflect()` also provides a handy way to clear or delete all the rows
    in a database:'
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: '`metadata.reflect()`还提供了一种方便的方法来清除或删除数据库中的所有行：'
- en: '[PRE126]'
  id: totrans-624
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '## Reflecting Tables from Other Schemas'
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: '## 从其他模式反射表'
- en: The section [Specifying the Schema Name](metadata.html#schema-table-schema-name)
    introduces the concept of table schemas, which are namespaces within a database
    that contain tables and other objects, and which can be specified explicitly.
    The “schema” for a [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object, as well as for other objects like views, indexes and sequences, can be
    set up using the [`Table.schema`](metadata.html#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table") parameter, and also as the default schema for a [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object using the [`MetaData.schema`](metadata.html#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData") parameter.
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
  zh: 章节[指定模式名称](metadata.html#schema-table-schema-name)介绍了表模式的概念，这是数据库中包含表和其他对象的命名空间，并且可以明确指定。可以使用[`Table.schema`](metadata.html#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table")参数为[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象以及其他对象如视图、索引和序列设置“模式”，还可以使用[`MetaData.schema`](metadata.html#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData")参数为[`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")对象设置默认模式。
- en: 'The use of this schema parameter directly affects where the table reflection
    feature will look when it is asked to reflect objects. For example, given a [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object configured with a default schema name “project”
    via its [`MetaData.schema`](metadata.html#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData") parameter:'
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
  zh: 此模式参数的使用直接影响表反射功能在被要求反射对象时查找的位置。例如，给定一个通过其[`MetaData.schema`](metadata.html#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData")参数配置了默认模式名称“project”的[`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")对象：
- en: '[PRE127]'
  id: totrans-628
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: 'The [`MetaData.reflect()`](metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") will then utilize that configured `.schema`
    for reflection:'
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MetaData.reflect()`](metadata.html#sqlalchemy.schema.MetaData.reflect "sqlalchemy.schema.MetaData.reflect")然后将利用配置的`.schema`进行反射：'
- en: '[PRE128]'
  id: totrans-630
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: 'The end result is that [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects from the “project” schema will be reflected, and they will be populated
    as schema-qualified with that name:'
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
  zh: 最终结果是，“project”模式中的[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象将被反射，并且它们将以该名称的模式限定形式填充：
- en: '[PRE129]'
  id: totrans-632
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: 'Similarly, an individual [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object that includes the [`Table.schema`](metadata.html#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table") parameter will also be reflected from that database
    schema, overriding any default schema that may have been configured on the owning
    [`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    collection:'
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，如果 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    对象中包含了 [`Table.schema`](metadata.html#sqlalchemy.schema.Table.params.schema "sqlalchemy.schema.Table")
    参数，那么该表也将从该数据库模式中反映出来，覆盖了可能已在拥有的 [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") 集合上配置的任何默认模式：
- en: '[PRE130]'
  id: totrans-634
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: 'Finally, the [`MetaData.reflect()`](metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") method itself also allows a [`MetaData.reflect.schema`](metadata.html#sqlalchemy.schema.MetaData.reflect.params.schema
    "sqlalchemy.schema.MetaData.reflect") parameter to be passed, so we could also
    load tables from the “project” schema for a default configured [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object:'
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，[`MetaData.reflect()`](metadata.html#sqlalchemy.schema.MetaData.reflect "sqlalchemy.schema.MetaData.reflect")
    方法本身也允许传递一个 [`MetaData.reflect.schema`](metadata.html#sqlalchemy.schema.MetaData.reflect.params.schema
    "sqlalchemy.schema.MetaData.reflect") 参数，因此我们也可以为默认配置的 [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") 对象从“project”模式加载表：
- en: '[PRE131]'
  id: totrans-636
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: 'We can call [`MetaData.reflect()`](metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") any number of times with different [`MetaData.schema`](metadata.html#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData") arguments (or none at all) to continue populating
    the [`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    object with more objects:'
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用不同的 [`MetaData.schema`](metadata.html#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData") 参数（或者不使用任何参数）多次调用 [`MetaData.reflect()`](metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") 方法，以便继续向 [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") 对象中添加更多对象：
- en: '[PRE132]'
  id: totrans-638
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '### Interaction of Schema-qualified Reflection with the Default Schema'
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: '### 带有默认模式的模式限定反射的交互'
- en: Section Best Practices Summarized
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: 最佳实践总结部分
- en: In this section, we discuss SQLAlchemy’s reflection behavior regarding tables
    that are visible in the “default schema” of a database session, and how these
    interact with SQLAlchemy directives that include the schema explicitly. As a best
    practice, ensure the “default” schema for a database is just a single name, and
    not a list of names; for tables that are part of this “default” schema and can
    be named without schema qualification in DDL and SQL, leave corresponding [`Table.schema`](metadata.html#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table") and similar schema parameters set to their default
    of `None`.
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
  zh: '在本节中，我们讨论了 SQLAlchemy 关于数据库会话中“默认模式”中可见表的反射行为，以及这些与显式包含模式的 SQLAlchemy 指令的交互方式。
    作为最佳实践，请确保数据库的“默认”模式只是一个单一名称，而不是名称列表; 对于属于此“默认”模式并且可以在 DDL 和 SQL 中无需模式限定名称的表，将相应的
    [`Table.schema`](metadata.html#sqlalchemy.schema.Table.params.schema "sqlalchemy.schema.Table")
    和类似的模式参数设置为其默认值 `None`。 '
- en: As described at [Specifying a Default Schema Name with MetaData](metadata.html#schema-metadata-schema-name),
    databases that have the concept of schemas usually also include the concept of
    a “default” schema. The reason for this is naturally that when one refers to table
    objects without a schema as is common, a schema-capable database will still consider
    that table to be in a “schema” somewhere. Some databases such as PostgreSQL take
    this concept further into the notion of a [schema search path](https://www.postgresql.org/docs/current/static/ddl-schemas.html#DDL-SCHEMAS-PATH)
    where *multiple* schema names can be considered in a particular database session
    to be “implicit”; referring to a table name that it’s any of those schemas will
    not require that the schema name be present (while at the same time it’s also
    perfectly fine if the schema name *is* present).
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: 如 [使用 MetaData 指定默认模式名称](metadata.html#schema-metadata-schema-name) 中所述，具有模式概念的数据库通常也包括“默认”模式的概念。
    这自然是因为，当一个通常的表对象没有模式时，具有模式的数据库仍然会认为该表在某处的“模式”中。 一些数据库（如 PostgreSQL）进一步将此概念扩展为“模式搜索路径”的概念，其中可以在特定数据库会话中将
    *多个* 模式名称视为“隐式”; 指的是任何这些模式中的表名称将不需要模式名称存在（同时，如果模式名称存在，也是完全可以的）。
- en: Since most relational databases therefore have the concept of a particular table
    object which can be referenced both in a schema-qualified way, as well as an “implicit”
    way where no schema is present, this presents a complexity for SQLAlchemy’s reflection
    feature. Reflecting a table in a schema-qualified manner will always populate
    its [`Table.schema`](metadata.html#sqlalchemy.schema.Table.schema "sqlalchemy.schema.Table.schema")
    attribute and additionally affect how this [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") is organized into the [`MetaData.tables`](metadata.html#sqlalchemy.schema.MetaData.tables
    "sqlalchemy.schema.MetaData.tables") collection, that is, in a schema qualified
    manner. Conversely, reflecting the **same** table in a non-schema qualified manner
    will organize it into the [`MetaData.tables`](metadata.html#sqlalchemy.schema.MetaData.tables
    "sqlalchemy.schema.MetaData.tables") collection **without** being schema qualified.
    The end result is that there would be two separate [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects in the single [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") collection representing the same table in the actual
    database.
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
  zh: 由于大多数关系数据库都有一个特定的表对象的概念，可以以模式限定的方式引用它，以及一个“隐式”的方式，其中没有模式存在，这为SQLAlchemy的反射特性带来了复杂性。以模式限定的方式反映表将始终填充其[`Table.schema`](metadata.html#sqlalchemy.schema.Table.schema
    "sqlalchemy.schema.Table.schema")属性，并且还会影响如何将此[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")组织到[`MetaData.tables`](metadata.html#sqlalchemy.schema.MetaData.tables
    "sqlalchemy.schema.MetaData.tables")集合中，即以模式限定的方式。相反，以非模式限定的方式反映**相同的**表将在不模式限定的情况下将其组织到[`MetaData.tables`](metadata.html#sqlalchemy.schema.MetaData.tables
    "sqlalchemy.schema.MetaData.tables")集合中。最终的结果是，在实际数据库中，单一的[`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")集合中会有两个单独的[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象，表示相同的表。
- en: 'To illustrate the ramifications of this issue, consider tables from the “project”
    schema in the previous example, and suppose also that the “project” schema is
    the default schema of our database connection, or if using a database such as
    PostgreSQL suppose the “project” schema is set up in the PostgreSQL `search_path`.
    This would mean that the database accepts the following two SQL statements as
    equivalent:'
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明这个问题的影响，考虑上一个示例中来自“project”模式的表，并假设“project”模式是我们数据库连接的默认模式，或者如果使用诸如PostgreSQL之类的数据库，则假设“project”模式在PostgreSQL中设置了`search_path`。这意味着数据库接受以下两个SQL语句是等价的：
- en: '[PRE133]'
  id: totrans-645
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: 'This is not a problem as the table can be found in both ways. However in SQLAlchemy,
    it’s the **identity** of the [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object that determines its semantic role within a SQL statement. Based on the
    current decisions within SQLAlchemy, this means that if we reflect the same “messages”
    table in both a schema-qualified as well as a non-schema qualified manner, we
    get **two** [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects that will **not** be treated as semantically equivalent:'
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是一个问题，因为可以双向找到表。但是在SQLAlchemy中，是[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象的**标识**决定了它在SQL语句中的语义角色。根据SQLAlchemy当前的决定，这意味着如果我们以模式限定和非模式限定的方式同时反映同一个“messages”表，我们会得到**两个**[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象，它们**不会**被视为语义上等价：
- en: '[PRE134]'
  id: totrans-647
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: The above issue becomes more complicated when the tables being reflected contain
    foreign key references to other tables. Suppose “messages” has a “project_id”
    column which refers to rows in another schema-local table “projects”, meaning
    there is a [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") object that is part of the definition
    of the “messages” table.
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
  zh: 上述问题在反映的表包含对其他表的外键引用时变得更加复杂。假设“messages”有一个“project_id”列，它引用另一个模式本地表“projects”的行，这意味着“messages”表定义的一部分是一个[`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")对象。
- en: We can find ourselves in a situation where one [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") collection may contain as many as four [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects representing these two database tables, where
    one or two of the additional tables were generated by the reflection process;
    this is because when the reflection process encounters a foreign key constraint
    on a table being reflected, it branches out to reflect that referenced table as
    well. The decision making it uses to assign the schema to this referenced table
    is that SQLAlchemy will **omit a default schema** from the reflected [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") object if the owning [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") also omits its schema name and also that these two
    objects are in the same schema, but will **include** it if it were not omitted.
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能会发现自己处于这样一种情况：一个[`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")集合可能包含多达四个[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象，代表这两个数据库表，其中一个或两个附加表是由反射过程生成的；这是因为当反射过程遇到一个正在被反射的表上的外键约束时，它会分支出去反射那个被引用的表。它用于为这个被引用的表分配模式的决策是，如果拥有的[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")也省略了其模式名称，并且这两个对象位于同一模式中，那么 SQLAlchemy 将**省略默认模式**的反射[`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")对象，但如果没有省略，则**包括**它。
- en: 'The common scenario is when the reflection of a table in a schema qualified
    fashion then loads a related table that will also be performed in a schema qualified
    fashion:'
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
  zh: 常见情况是以模式合格的方式反映表，然后以同样的方式加载相关表：
- en: '[PRE135]'
  id: totrans-651
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: 'The above `messages_table_1` will refer to `projects` also in a schema qualified
    fashion. This “projects” table will be reflected automatically by the fact that
    “messages” refers to it:'
  id: totrans-652
  prefs: []
  type: TYPE_NORMAL
  zh: 上述的 `messages_table_1` 也会以模式合格的方式引用 `projects`。这个 “projects” 表会自动反射，因为 “messages”
    引用了它：
- en: '[PRE136]'
  id: totrans-653
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: 'if some other part of the code reflects “projects” in a non-schema qualified
    fashion, there are now two projects tables that are not the same:'
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
  zh: 如果代码的其他部分以非模式合格的方式反映“projects”，现在就有了两个不同的 projects 表：
- en: '[PRE137]'
  id: totrans-655
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '[PRE138]'
  id: totrans-656
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '[PRE139]'
  id: totrans-657
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '[PRE140]'
  id: totrans-658
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: The above confusion can cause problems within applications that use table reflection
    to load up application-level [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects, as well as within migration scenarios, in particular such as when using
    Alembic Migrations to detect new tables and foreign key constraints.
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
  zh: 上述混淆可能会在使用表反射加载应用程序级别[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象的应用程序中造成问题，以及在迁移场景中，特别是在使用
    Alembic 迁移检测新表和外键约束时。
- en: 'The above behavior can be remedied by sticking to one simple practice:'
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过坚持一个简单的做法来纠正上述行为：
- en: Don’t include the [`Table.schema`](metadata.html#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table") parameter for any [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") that expects to be located in the **default** schema
    of the database.
  id: totrans-661
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于任何期望位于数据库的**默认**模式中的[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")，不要包含[`Table.schema`](metadata.html#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table")参数。
- en: 'For PostgreSQL and other databases that support a “search” path for schemas,
    add the following additional practice:'
  id: totrans-662
  prefs: []
  type: TYPE_NORMAL
  zh: 对于支持模式的“搜索”路径的 PostgreSQL 和其他数据库，请添加以下附加做法：
- en: Keep the “search path” narrowed down to **one schema only, which is the default
    schema**.
  id: totrans-663
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将“搜索路径”限制为**一个模式，即默认模式**。
- en: See also
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Remote-Schema Table Introspection and PostgreSQL search_path](../dialects/postgresql.html#postgresql-schema-reflection)
    - additional details of this behavior as regards the PostgreSQL database.  ###
    Interaction of Schema-qualified Reflection with the Default Schema'
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
  zh: '[远程模式表反射和 PostgreSQL search_path](../dialects/postgresql.html#postgresql-schema-reflection)
    - 关于 PostgreSQL 数据库的此行为的附加详细信息。### 模式合格反射与默认模式的交互'
- en: Section Best Practices Summarized
  id: totrans-666
  prefs: []
  type: TYPE_NORMAL
  zh: 最佳实践概述部分
- en: In this section, we discuss SQLAlchemy’s reflection behavior regarding tables
    that are visible in the “default schema” of a database session, and how these
    interact with SQLAlchemy directives that include the schema explicitly. As a best
    practice, ensure the “default” schema for a database is just a single name, and
    not a list of names; for tables that are part of this “default” schema and can
    be named without schema qualification in DDL and SQL, leave corresponding [`Table.schema`](metadata.html#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table") and similar schema parameters set to their default
    of `None`.
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论 SQLAlchemy 在数据库会话的“默认模式”中可见的表的反射行为，以及这些表如何与显式包含模式的 SQLAlchemy 指令进行交互。作为最佳实践，请确保数据库的“默认”模式只是一个单一的名称，而不是名称列表；对于属于此“默认”模式且可以在
    DDL 和 SQL 中不带模式限定命名的表，将相应的 [`Table.schema`](metadata.html#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table") 和类似的模式参数设置为它们的默认值 `None`。
- en: As described at [Specifying a Default Schema Name with MetaData](metadata.html#schema-metadata-schema-name),
    databases that have the concept of schemas usually also include the concept of
    a “default” schema. The reason for this is naturally that when one refers to table
    objects without a schema as is common, a schema-capable database will still consider
    that table to be in a “schema” somewhere. Some databases such as PostgreSQL take
    this concept further into the notion of a [schema search path](https://www.postgresql.org/docs/current/static/ddl-schemas.html#DDL-SCHEMAS-PATH)
    where *multiple* schema names can be considered in a particular database session
    to be “implicit”; referring to a table name that it’s any of those schemas will
    not require that the schema name be present (while at the same time it’s also
    perfectly fine if the schema name *is* present).
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
  zh: 如在[使用 MetaData 指定默认模式名称](metadata.html#schema-metadata-schema-name)中描述的那样，具有模式概念的数据库通常还包括“默认”模式的概念。这自然是因为当人们引用常见的无模式表对象时，具有模式功能的数据库仍会认为该表位于某个“模式”中。一些数据库，如
    PostgreSQL，将这个概念进一步发展成为[模式搜索路径](https://www.postgresql.org/docs/current/static/ddl-schemas.html#DDL-SCHEMAS-PATH)的概念，其中一个特定数据库会话中可以考虑*多个*模式名称为“隐式”；引用任何这些模式中的表名都不需要模式名（同时如果模式名*存在*也完全可以）。
- en: Since most relational databases therefore have the concept of a particular table
    object which can be referenced both in a schema-qualified way, as well as an “implicit”
    way where no schema is present, this presents a complexity for SQLAlchemy’s reflection
    feature. Reflecting a table in a schema-qualified manner will always populate
    its [`Table.schema`](metadata.html#sqlalchemy.schema.Table.schema "sqlalchemy.schema.Table.schema")
    attribute and additionally affect how this [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") is organized into the [`MetaData.tables`](metadata.html#sqlalchemy.schema.MetaData.tables
    "sqlalchemy.schema.MetaData.tables") collection, that is, in a schema qualified
    manner. Conversely, reflecting the **same** table in a non-schema qualified manner
    will organize it into the [`MetaData.tables`](metadata.html#sqlalchemy.schema.MetaData.tables
    "sqlalchemy.schema.MetaData.tables") collection **without** being schema qualified.
    The end result is that there would be two separate [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects in the single [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") collection representing the same table in the actual
    database.
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，由于大多数关系数据库都有一种特定的表对象的概念，既可以以模式限定的方式引用，也可以以“隐式”方式引用，其中不需要模式，这给 SQLAlchemy
    的反射特性带来了复杂性。以模式限定的方式反映表将始终填充其 [`Table.schema`](metadata.html#sqlalchemy.schema.Table.schema
    "sqlalchemy.schema.Table.schema") 属性，并且另外影响到这个 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 如何以模式限定的方式组织到 [`MetaData.tables`](metadata.html#sqlalchemy.schema.MetaData.tables
    "sqlalchemy.schema.MetaData.tables") 集合中。相反，以非模式限定的方式反映**相同的**表将以不带模式的方式组织到 [`MetaData.tables`](metadata.html#sqlalchemy.schema.MetaData.tables
    "sqlalchemy.schema.MetaData.tables") 集合中。最终结果是，在实际数据库中表示同一张表的单个 [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") 集合中将有两个单独的 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 对象。
- en: 'To illustrate the ramifications of this issue, consider tables from the “project”
    schema in the previous example, and suppose also that the “project” schema is
    the default schema of our database connection, or if using a database such as
    PostgreSQL suppose the “project” schema is set up in the PostgreSQL `search_path`.
    This would mean that the database accepts the following two SQL statements as
    equivalent:'
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明这个问题的后果，考虑前面示例中“project”模式中的表，并假设“project”模式是我们数据库连接的默认模式，或者如果使用像PostgreSQL这样的数据库，假设“project”模式设置在PostgreSQL的`search_path`中。这意味着数据库接受以下两个SQL语句作为等价：
- en: '[PRE141]'
  id: totrans-671
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: 'This is not a problem as the table can be found in both ways. However in SQLAlchemy,
    it’s the **identity** of the [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object that determines its semantic role within a SQL statement. Based on the
    current decisions within SQLAlchemy, this means that if we reflect the same “messages”
    table in both a schema-qualified as well as a non-schema qualified manner, we
    get **two** [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects that will **not** be treated as semantically equivalent:'
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不是一个问题，因为表可以以两种方式找到。然而，在SQLAlchemy中，是[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象的**标识**决定了它在SQL语句中的语义角色。根据SQLAlchemy当前的决策，这意味着如果我们以模式限定和非模式限定的方式反射相同的“messages”表，我们会得到**两个**不会被视为语义等价的[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象：
- en: '[PRE142]'
  id: totrans-673
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: The above issue becomes more complicated when the tables being reflected contain
    foreign key references to other tables. Suppose “messages” has a “project_id”
    column which refers to rows in another schema-local table “projects”, meaning
    there is a [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") object that is part of the definition
    of the “messages” table.
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
  zh: 当被反射的表包含对其他表的外键引用时，上述问题变得更加复杂。假设“messages”有一个“project_id”列，它引用另一个模式本地表“projects”，这意味着“messages”表的定义中包含一个[`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")对象。
- en: We can find ourselves in a situation where one [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") collection may contain as many as four [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects representing these two database tables, where
    one or two of the additional tables were generated by the reflection process;
    this is because when the reflection process encounters a foreign key constraint
    on a table being reflected, it branches out to reflect that referenced table as
    well. The decision making it uses to assign the schema to this referenced table
    is that SQLAlchemy will **omit a default schema** from the reflected [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") object if the owning [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") also omits its schema name and also that these two
    objects are in the same schema, but will **include** it if it were not omitted.
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能会发现自己处于这样一种情况，一个[`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")集合可能包含代表这两个数据库表的四个[`Table`](metadata.html#sql#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象，其中一个或两个额外的表是由反射过程生成的；这是因为当反射过程遇到被反射表上的外键约束时，它会分支出去反射该引用表。它用于为这个引用表分配模式的决策是，如果拥有的[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")也省略了它的模式名称，那么SQLAlchemy将**省略默认模式**从反射的[`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")对象中，如果这两个对象在同一个模式中，则**包括**它，但如果没有被省略的话。
- en: 'The common scenario is when the reflection of a table in a schema qualified
    fashion then loads a related table that will also be performed in a schema qualified
    fashion:'
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
  zh: 常见情况是以模式限定方式反射表，然后以模式限定方式加载相关表：
- en: '[PRE143]'
  id: totrans-677
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: 'The above `messages_table_1` will refer to `projects` also in a schema qualified
    fashion. This “projects” table will be reflected automatically by the fact that
    “messages” refers to it:'
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
  zh: 上述`messages_table_1`也将以模式限定方式引用`projects`。这个“projects”表将被自动反射，因为“messages”引用了它：
- en: '[PRE144]'
  id: totrans-679
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: 'if some other part of the code reflects “projects” in a non-schema qualified
    fashion, there are now two projects tables that are not the same:'
  id: totrans-680
  prefs: []
  type: TYPE_NORMAL
  zh: 如果代码的其他部分以非模式限定方式反射“projects”，那么现在有两个不同的projects表：
- en: '[PRE145]'
  id: totrans-681
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '[PRE146]'
  id: totrans-682
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '[PRE147]'
  id: totrans-683
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '[PRE148]'
  id: totrans-684
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: The above confusion can cause problems within applications that use table reflection
    to load up application-level [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects, as well as within migration scenarios, in particular such as when using
    Alembic Migrations to detect new tables and foreign key constraints.
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
  zh: 上述混淆可能会在使用表反射加载应用级别[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象的应用程序内以及在迁移方案中引起问题，特别是在使用Alembic
    Migrations检测新表和外键约束时。
- en: 'The above behavior can be remedied by sticking to one simple practice:'
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
  zh: 以上行为可以通过坚持一个简单的做法来纠正：
- en: Don’t include the [`Table.schema`](metadata.html#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table") parameter for any [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") that expects to be located in the **default** schema
    of the database.
  id: totrans-687
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要为任何期望位于数据库**默认模式**中的[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")包括[`Table.schema`](metadata.html#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table")参数。
- en: 'For PostgreSQL and other databases that support a “search” path for schemas,
    add the following additional practice:'
  id: totrans-688
  prefs: []
  type: TYPE_NORMAL
  zh: 对于支持“搜索”模式的PostgreSQL和其他数据库，添加以下额外的做法：
- en: Keep the “search path” narrowed down to **one schema only, which is the default
    schema**.
  id: totrans-689
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将“搜索路径”限制为**仅一个模式，即默认模式**。
- en: See also
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Remote-Schema Table Introspection and PostgreSQL search_path](../dialects/postgresql.html#postgresql-schema-reflection)
    - additional details of this behavior as regards the PostgreSQL database.'
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
  zh: '[远程模式表内省和PostgreSQL search_path](../dialects/postgresql.html#postgresql-schema-reflection)
    - 关于PostgreSQL数据库的此行为的附加细节。'
- en: '## Fine Grained Reflection with Inspector'
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
  zh: '## 使用检查员进行细粒度反射'
- en: 'A low level interface which provides a backend-agnostic system of loading lists
    of schema, table, column, and constraint descriptions from a given database is
    also available. This is known as the “Inspector”:'
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
  zh: 也提供了低级接口，它提供了一个与后端无关的系统，用于从给定数据库加载模式、表、列和约束描述的列表。这被称为“检查员”：
- en: '[PRE149]'
  id: totrans-694
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: '| Object Name | Description |'
  id: totrans-695
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-696
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [Inspector](#sqlalchemy.engine.reflection.Inspector) | Performs database
    schema inspection. |'
  id: totrans-697
  prefs: []
  type: TYPE_TB
  zh: '| [检查员](#sqlalchemy.engine.reflection.Inspector) | 执行数据库模式检查。 |'
- en: '| [ReflectedCheckConstraint](#sqlalchemy.engine.interfaces.ReflectedCheckConstraint)
    | Dictionary representing the reflected elements corresponding to [`CheckConstraint`](constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint"). |'
  id: totrans-698
  prefs: []
  type: TYPE_TB
  zh: '| [ReflectedCheckConstraint](#sqlalchemy.engine.interfaces.ReflectedCheckConstraint)
    | 表示反射元素的字典，对应于[`CheckConstraint`](constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint")。 |'
- en: '| [ReflectedColumn](#sqlalchemy.engine.interfaces.ReflectedColumn) | Dictionary
    representing the reflected elements corresponding to a [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") object. |'
  id: totrans-699
  prefs: []
  type: TYPE_TB
  zh: '| [ReflectedColumn](#sqlalchemy.engine.interfaces.ReflectedColumn) | 表示反射元素的字典，对应于[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象。 |'
- en: '| [ReflectedComputed](#sqlalchemy.engine.interfaces.ReflectedComputed) | Represent
    the reflected elements of a computed column, corresponding to the [`Computed`](defaults.html#sqlalchemy.schema.Computed
    "sqlalchemy.schema.Computed") construct. |'
  id: totrans-700
  prefs: []
  type: TYPE_TB
  zh: '| [ReflectedComputed](#sqlalchemy.engine.interfaces.ReflectedComputed) | 表示计算列的反射元素，对应于[`Computed`](defaults.html#sqlalchemy.schema.Computed
    "sqlalchemy.schema.Computed")构造。 |'
- en: '| [ReflectedForeignKeyConstraint](#sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint)
    | Dictionary representing the reflected elements corresponding to [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint"). |'
  id: totrans-701
  prefs: []
  type: TYPE_TB
  zh: '| [ReflectedForeignKeyConstraint](#sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint)
    | 表示反射元素的字典，对应于[`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")。 |'
- en: '| [ReflectedIdentity](#sqlalchemy.engine.interfaces.ReflectedIdentity) | represent
    the reflected IDENTITY structure of a column, corresponding to the [`Identity`](defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity") construct. |'
  id: totrans-702
  prefs: []
  type: TYPE_TB
  zh: '| [ReflectedIdentity](#sqlalchemy.engine.interfaces.ReflectedIdentity) | 表示列的反射身份结构，对应于[`Identity`](defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity")构造。 |'
- en: '| [ReflectedIndex](#sqlalchemy.engine.interfaces.ReflectedIndex) | Dictionary
    representing the reflected elements corresponding to [`Index`](constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index"). |'
  id: totrans-703
  prefs: []
  type: TYPE_TB
  zh: '| [ReflectedIndex](#sqlalchemy.engine.interfaces.ReflectedIndex) | 表示反射元素的字典，对应于[`Index`](constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")。 |'
- en: '| [ReflectedPrimaryKeyConstraint](#sqlalchemy.engine.interfaces.ReflectedPrimaryKeyConstraint)
    | Dictionary representing the reflected elements corresponding to [`PrimaryKeyConstraint`](constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint"). |'
  id: totrans-704
  prefs: []
  type: TYPE_TB
  zh: '| [反射主键约束](#sqlalchemy.engine.interfaces.ReflectedPrimaryKeyConstraint) | 表示对应于[`PrimaryKeyConstraint`](constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint")的反射元素的字典。 |'
- en: '| [ReflectedTableComment](#sqlalchemy.engine.interfaces.ReflectedTableComment)
    | Dictionary representing the reflected comment corresponding to the `Table.comment`
    attribute. |'
  id: totrans-705
  prefs: []
  type: TYPE_TB
  zh: '| [反射表注释](#sqlalchemy.engine.interfaces.ReflectedTableComment) | 表示对应于`Table.comment`属性的反射注释的字典。
    |'
- en: '| [ReflectedUniqueConstraint](#sqlalchemy.engine.interfaces.ReflectedUniqueConstraint)
    | Dictionary representing the reflected elements corresponding to [`UniqueConstraint`](constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint"). |'
  id: totrans-706
  prefs: []
  type: TYPE_TB
  zh: '| [反射唯一约束](#sqlalchemy.engine.interfaces.ReflectedUniqueConstraint) | 表示对应于[`UniqueConstraint`](constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint")的反射元素的字典。 |'
- en: '[PRE150]'
  id: totrans-707
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: Performs database schema inspection.
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
  zh: 执行数据库模式检查。
- en: The Inspector acts as a proxy to the reflection methods of the [`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect"), providing a consistent interface as well
    as caching support for previously fetched metadata.
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
  zh: Inspector充当[`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.interfaces.Dialect")的反射方法的代理，提供一致的接口以及对先前获取的元数据的缓存支持。
- en: 'A [`Inspector`](#sqlalchemy.engine.reflection.Inspector "sqlalchemy.engine.reflection.Inspector")
    object is usually created via the [`inspect()`](inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect") function, which may be passed an [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") or a [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"):'
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
  zh: 通常通过[`inspect()`](inspection.html#sqlalchemy.inspect "sqlalchemy.inspect")函数创建[`Inspector`](#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector")对象，可以传递一个[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")或一个[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")：
- en: '[PRE151]'
  id: totrans-711
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: Where above, the [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.interfaces.Dialect")
    associated with the engine may opt to return an [`Inspector`](#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector") subclass that provides additional methods
    specific to the dialect’s target database.
  id: totrans-712
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述情况下，与引擎相关联的[`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.interfaces.Dialect")可能选择返回一个提供了特定于该方言目标数据库的附加方法的[`Inspector`](#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector")子类。
- en: '**Members**'
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.engine.reflection.Inspector.__init__), [bind](#sqlalchemy.engine.reflection.Inspector.bind),
    [clear_cache()](#sqlalchemy.engine.reflection.Inspector.clear_cache), [default_schema_name](#sqlalchemy.engine.reflection.Inspector.default_schema_name),
    [dialect](#sqlalchemy.engine.reflection.Inspector.dialect), [engine](#sqlalchemy.engine.reflection.Inspector.engine),
    [from_engine()](#sqlalchemy.engine.reflection.Inspector.from_engine), [get_check_constraints()](#sqlalchemy.engine.reflection.Inspector.get_check_constraints),
    [get_columns()](#sqlalchemy.engine.reflection.Inspector.get_columns), [get_foreign_keys()](#sqlalchemy.engine.reflection.Inspector.get_foreign_keys),
    [get_indexes()](#sqlalchemy.engine.reflection.Inspector.get_indexes), [get_materialized_view_names()](#sqlalchemy.engine.reflection.Inspector.get_materialized_view_names),
    [get_multi_check_constraints()](#sqlalchemy.engine.reflection.Inspector.get_multi_check_constraints),
    [get_multi_columns()](#sqlalchemy.engine.reflection.Inspector.get_multi_columns),
    [get_multi_foreign_keys()](#sqlalchemy.engine.reflection.Inspector.get_multi_foreign_keys),
    [get_multi_indexes()](#sqlalchemy.engine.reflection.Inspector.get_multi_indexes),
    [get_multi_pk_constraint()](#sqlalchemy.engine.reflection.Inspector.get_multi_pk_constraint),
    [get_multi_table_comment()](#sqlalchemy.engine.reflection.Inspector.get_multi_table_comment),
    [get_multi_table_options()](#sqlalchemy.engine.reflection.Inspector.get_multi_table_options),
    [get_multi_unique_constraints()](#sqlalchemy.engine.reflection.Inspector.get_multi_unique_constraints),
    [get_pk_constraint()](#sqlalchemy.engine.reflection.Inspector.get_pk_constraint),
    [get_schema_names()](#sqlalchemy.engine.reflection.Inspector.get_schema_names),
    [get_sequence_names()](#sqlalchemy.engine.reflection.Inspector.get_sequence_names),
    [get_sorted_table_and_fkc_names()](#sqlalchemy.engine.reflection.Inspector.get_sorted_table_and_fkc_names),
    [get_table_comment()](#sqlalchemy.engine.reflection.Inspector.get_table_comment),
    [get_table_names()](#sqlalchemy.engine.reflection.Inspector.get_table_names),
    [get_table_options()](#sqlalchemy.engine.reflection.Inspector.get_table_options),
    [get_temp_table_names()](#sqlalchemy.engine.reflection.Inspector.get_temp_table_names),
    [get_temp_view_names()](#sqlalchemy.engine.reflection.Inspector.get_temp_view_names),
    [get_unique_constraints()](#sqlalchemy.engine.reflection.Inspector.get_unique_constraints),
    [get_view_definition()](#sqlalchemy.engine.reflection.Inspector.get_view_definition),
    [get_view_names()](#sqlalchemy.engine.reflection.Inspector.get_view_names), [has_index()](#sqlalchemy.engine.reflection.Inspector.has_index),
    [has_schema()](#sqlalchemy.engine.reflection.Inspector.has_schema), [has_sequence()](#sqlalchemy.engine.reflection.Inspector.has_sequence),
    [has_table()](#sqlalchemy.engine.reflection.Inspector.has_table), [info_cache](#sqlalchemy.engine.reflection.Inspector.info_cache),
    [reflect_table()](#sqlalchemy.engine.reflection.Inspector.reflect_table), [sort_tables_on_foreign_key_dependency()](#sqlalchemy.engine.reflection.Inspector.sort_tables_on_foreign_key_dependency)'
  id: totrans-714
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.engine.reflection.Inspector.__init__), [bind](#sqlalchemy.engine.reflection.Inspector.bind),
    [clear_cache()](#sqlalchemy.engine.reflection.Inspector.clear_cache), [default_schema_name](#sqlalchemy.engine.reflection.Inspector.default_schema_name),
    [dialect](#sqlalchemy.engine.reflection.Inspector.dialect), [engine](#sqlalchemy.engine.reflection.Inspector.engine),
    [from_engine()](#sqlalchemy.engine.reflection.Inspector.from_engine), [get_check_constraints()](#sqlalchemy.engine.reflection.Inspector.get_check_constraints),
    [get_columns()](#sqlalchemy.engine.reflection.Inspector.get_columns), [get_foreign_keys()](#sqlalchemy.engine.reflection.Inspector.get_foreign_keys),
    [get_indexes()](#sqlalchemy.engine.reflection.Inspector.get_indexes), [get_materialized_view_names()](#sqlalchemy.engine.reflection.Inspector.get_materialized_view_names),
    [get_multi_check_constraints()](#sqlalchemy.engine.reflection.Inspector.get_multi_check_constraints),
    [get_multi_columns()](#sqlalchemy.engine.reflection.Inspector.get_multi_columns),
    [get_multi_foreign_keys()](#sqlalchemy.engine.reflection.Inspector.get_multi_foreign_keys),
    [get_multi_indexes()](#sqlalchemy.engine.reflection.Inspector.get_multi_indexes),
    [get_multi_pk_constraint()](#sqlalchemy.engine.reflection.Inspector.get_multi_pk_constraint),
    [get_multi_table_comment()](#sqlalchemy.engine.reflection.Inspector.get_multi_table_comment),
    [get_multi_table_options()](#sqlalchemy.engine.reflection.Inspector.get_multi_table_options),
    [get_multi_unique_constraints()](#sqlalchemy.engine.reflection.Inspector.get_multi_unique_constraints),
    [get_pk_constraint()](#sqlalchemy.engine.reflection.Inspector.get_pk_constraint),
    [get_schema_names()](#sqlalchemy.engine.reflection.Inspector.get_schema_names),
    [get_sequence_names()](#sqlalchemy.engine.reflection.Inspector.get_sequence_names),
    [get_sorted_table_and_fkc_names()](#sqlalchemy.engine.reflection.Inspector.get_sorted_table_and_fkc_names),
    [get_table_comment()](#sqlalchemy.engine.reflection.Inspector.get_table_comment),
    [get_table_names()](#sqlalchemy.engine.reflection.Inspector.get_table_names),
    [get_table_options()](#sqlalchemy.engine.reflection.Inspector.get_table_options),
    [get_temp_table_names()](#sqlalchemy.engine.reflection.Inspector.get_temp_table_names),
    [get_temp_view_names()](#sqlalchemy.engine.reflection.Inspector.get_temp_view_names),
    [get_unique_constraints()](#sqlalchemy.engine.reflection.Inspector.get_unique_constraints),
    [get_view_definition()](#sqlalchemy.engine.reflection.Inspector.get_view_definition),
    [get_view_names()](#sqlalchemy.engine.reflection.Inspector.get_view_names), [has_index()](#sqlalchemy.engine.reflection.Inspector.has_index),
    [has_schema()](#sqlalchemy.engine.reflection.Inspector.has_schema), [has_sequence()](#sqlalchemy.engine.reflection.Inspector.has_sequence),
    [has_table()](#sqlalchemy.engine.reflection.Inspector.has_table), [info_cache](#sqlalchemy.engine.reflection.Inspector.info_cache),
    [reflect_table()](#sqlalchemy.engine.reflection.Inspector.reflect_table), [sort_tables_on_foreign_key_dependency()](#sqlalchemy.engine.reflection.Inspector.sort_tables_on_foreign_key_dependency)'
- en: '**Class signature**'
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.engine.reflection.Inspector`](#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector") (`sqlalchemy.inspection.Inspectable`)
  id: totrans-716
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.engine.reflection.Inspector`](#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector")（`sqlalchemy.inspection.Inspectable`）
- en: '[PRE152]'
  id: totrans-717
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: Initialize a new [`Inspector`](#sqlalchemy.engine.reflection.Inspector "sqlalchemy.engine.reflection.Inspector").
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化一个新的[`Inspector`](#sqlalchemy.engine.reflection.Inspector "sqlalchemy.engine.reflection.Inspector")。
- en: 'Deprecated since version 1.4: The __init__() method on [`Inspector`](#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector") is deprecated and will be removed in
    a future release. Please use the [`inspect()`](inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect") function on an [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") or [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") in order to acquire an [`Inspector`](#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector").'
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.4 弃用：[`Inspector`](#sqlalchemy.engine.reflection.Inspector "sqlalchemy.engine.reflection.Inspector")
    上的 __init__() 方法已弃用，并将在将来的版本中移除。请使用 [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 或 [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 上的 [`inspect()`](inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect") 函数以获取 [`Inspector`](#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector")。
- en: 'Parameters:'
  id: totrans-720
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**bind** – a [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    which is typically an instance of [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") or [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").'
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
  zh: '**bind** – 一个[`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")，通常是[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")或[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")的实例。'
- en: For a dialect-specific instance of [`Inspector`](#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector"), see [`Inspector.from_engine()`](#sqlalchemy.engine.reflection.Inspector.from_engine
    "sqlalchemy.engine.reflection.Inspector.from_engine")
  id: totrans-722
  prefs: []
  type: TYPE_NORMAL
  zh: 对于特定于方言的 [`Inspector`](#sqlalchemy.engine.reflection.Inspector "sqlalchemy.engine.reflection.Inspector")
    实例，请参阅 [`Inspector.from_engine()`](#sqlalchemy.engine.reflection.Inspector.from_engine
    "sqlalchemy.engine.reflection.Inspector.from_engine")。
- en: '[PRE153]'
  id: totrans-723
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: '[PRE154]'
  id: totrans-724
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: reset the cache for this [`Inspector`](#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector").
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
  zh: 重置此[`Inspector`](#sqlalchemy.engine.reflection.Inspector "sqlalchemy.engine.reflection.Inspector")的缓存。
- en: Inspection methods that have data cached will emit SQL queries when next called
    to get new data.
  id: totrans-726
  prefs: []
  type: TYPE_NORMAL
  zh: 当检查方法有缓存数据时，在下次调用以获取新数据时会发出 SQL 查询。
- en: New in version 2.0.
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 2.0 开始。
- en: '[PRE155]'
  id: totrans-728
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: Return the default schema name presented by the dialect for the current engine’s
    database user.
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
  zh: 返回当前引擎的数据库用户的方言提供的默认模式名称。
- en: E.g. this is typically `public` for PostgreSQL and `dbo` for SQL Server.
  id: totrans-730
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，对于 PostgreSQL 通常是 `public`，对于 SQL Server 是 `dbo`。
- en: '[PRE156]'
  id: totrans-731
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: '[PRE157]'
  id: totrans-732
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: '[PRE158]'
  id: totrans-733
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: Construct a new dialect-specific Inspector object from the given engine or connection.
  id: totrans-734
  prefs: []
  type: TYPE_NORMAL
  zh: 从给定的引擎或连接构造一个新的特定于方言的 Inspector 对象。
- en: 'Deprecated since version 1.4: The from_engine() method on [`Inspector`](#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector") is deprecated and will be removed in
    a future release. Please use the [`inspect()`](inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect") function on an [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") or [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") in order to acquire an [`Inspector`](#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector").'
  id: totrans-735
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.4 弃用：[`Inspector`](#sqlalchemy.engine.reflection.Inspector "sqlalchemy.engine.reflection.Inspector")
    上的 from_engine() 方法已弃用，并将在将来的版本中移除。请使用 [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 或 [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 上的 [`inspect()`](inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect") 函数以获取 [`Inspector`](#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector")。
- en: 'Parameters:'
  id: totrans-736
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**bind** – a [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    or [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine").'
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
  zh: '**bind** – 一个[`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")或者[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")。'
- en: This method differs from direct a direct constructor call of [`Inspector`](#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector") in that the [`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect") is given a chance to provide a dialect-specific
    [`Inspector`](#sqlalchemy.engine.reflection.Inspector "sqlalchemy.engine.reflection.Inspector")
    instance, which may provide additional methods.
  id: totrans-738
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法与直接构造函数调用[`Inspector`](#sqlalchemy.engine.reflection.Inspector "sqlalchemy.engine.reflection.Inspector")不同，在此，[`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")有机会提供特定于方言的[`Inspector`](#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector")实例，该实例可能提供附加方法。
- en: See the example at [`Inspector`](#sqlalchemy.engine.reflection.Inspector "sqlalchemy.engine.reflection.Inspector").
  id: totrans-739
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[`Inspector`](#sqlalchemy.engine.reflection.Inspector "sqlalchemy.engine.reflection.Inspector")的示例。
- en: '[PRE159]'
  id: totrans-740
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: Return information about check constraints in `table_name`.
  id: totrans-741
  prefs: []
  type: TYPE_NORMAL
  zh: 返回`table_name`中的检查约束信息。
- en: Given a string `table_name` and an optional string schema, return check constraint
    information as a list of [`ReflectedCheckConstraint`](#sqlalchemy.engine.interfaces.ReflectedCheckConstraint
    "sqlalchemy.engine.interfaces.ReflectedCheckConstraint").
  id: totrans-742
  prefs: []
  type: TYPE_NORMAL
  zh: 给定字符串`table_name`和可选字符串模式，将检查约束信息作为[`ReflectedCheckConstraint`](#sqlalchemy.engine.interfaces.ReflectedCheckConstraint
    "sqlalchemy.engine.interfaces.ReflectedCheckConstraint")列表返回。
- en: 'Parameters:'
  id: totrans-743
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`table_name` – string name of the table. For special quoting, use [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name").'
  id: totrans-744
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`table_name` – 表的字符串名称。对于特殊引用，请使用[`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")。'
- en: '`schema` – string schema name; if omitted, uses the default schema of the database
    connection. For special quoting, use [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name").'
  id: totrans-745
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` – 字符串模式名称；如果省略，则使用数据库连接的默认模式。对于特殊引用，请使用[`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")。'
- en: '`**kw` – Additional keyword argument to pass to the dialect specific implementation.
    See the documentation of the dialect in use for more information.'
  id: totrans-746
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` – 要传递给特定方言实现的附加关键字参数。有关更多信息，请参阅使用中的方言的文档。'
- en: 'Returns:'
  id: totrans-747
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a list of dictionaries, each representing the definition of a check constraints.
  id: totrans-748
  prefs: []
  type: TYPE_NORMAL
  zh: 字典列表，每个表示检查约束的定义。
- en: See also
  id: totrans-749
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Inspector.get_multi_check_constraints()`](#sqlalchemy.engine.reflection.Inspector.get_multi_check_constraints
    "sqlalchemy.engine.reflection.Inspector.get_multi_check_constraints")'
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Inspector.get_multi_check_constraints()`](#sqlalchemy.engine.reflection.Inspector.get_multi_check_constraints
    "sqlalchemy.engine.reflection.Inspector.get_multi_check_constraints")'
- en: '[PRE160]'
  id: totrans-751
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: Return information about columns in `table_name`.
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
  zh: 返回`table_name`中的列信息。
- en: Given a string `table_name` and an optional string `schema`, return column information
    as a list of [`ReflectedColumn`](#sqlalchemy.engine.interfaces.ReflectedColumn
    "sqlalchemy.engine.interfaces.ReflectedColumn").
  id: totrans-753
  prefs: []
  type: TYPE_NORMAL
  zh: 给定字符串`table_name`和可选字符串`schema`，将列信息作为[`ReflectedColumn`](#sqlalchemy.engine.interfaces.ReflectedColumn
    "sqlalchemy.engine.interfaces.ReflectedColumn")列表返回。
- en: 'Parameters:'
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`table_name` – string name of the table. For special quoting, use [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name").'
  id: totrans-755
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`table_name` – 表的字符串名称。对于特殊引用，请使用[`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")。'
- en: '`schema` – string schema name; if omitted, uses the default schema of the database
    connection. For special quoting, use [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name").'
  id: totrans-756
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` – 字符串模式名称；如果省略，则使用数据库连接的默认模式。对于特殊引用，请使用[`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")。'
- en: '`**kw` – Additional keyword argument to pass to the dialect specific implementation.
    See the documentation of the dialect in use for more information.'
  id: totrans-757
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` – 要传递给特定方言实现的附加关键字参数。有关更多信息，请参阅使用中的方言的文档。'
- en: 'Returns:'
  id: totrans-758
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: list of dictionaries, each representing the definition of a database column.
  id: totrans-759
  prefs: []
  type: TYPE_NORMAL
  zh: 字典列表，每个表示数据库列的定义。
- en: See also
  id: totrans-760
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Inspector.get_multi_columns()`](#sqlalchemy.engine.reflection.Inspector.get_multi_columns
    "sqlalchemy.engine.reflection.Inspector.get_multi_columns").'
  id: totrans-761
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Inspector.get_multi_columns()`](#sqlalchemy.engine.reflection.Inspector.get_multi_columns
    "sqlalchemy.engine.reflection.Inspector.get_multi_columns")。'
- en: '[PRE161]'
  id: totrans-762
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: Return information about foreign_keys in `table_name`.
  id: totrans-763
  prefs: []
  type: TYPE_NORMAL
  zh: 返回`table_name`中的外键信息。
- en: Given a string `table_name`, and an optional string schema, return foreign key
    information as a list of [`ReflectedForeignKeyConstraint`](#sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint
    "sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint").
  id: totrans-764
  prefs: []
  type: TYPE_NORMAL
  zh: 给定字符串`table_name`，以及可选的字符串模式，将外键信息作为[`ReflectedForeignKeyConstraint`](#sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint
    "sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint")的列表返回。
- en: 'Parameters:'
  id: totrans-765
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`table_name` – string name of the table. For special quoting, use [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name").'
  id: totrans-766
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`table_name` – 表格的字符串名称。对于特殊引用，请使用[`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")。'
- en: '`schema` – string schema name; if omitted, uses the default schema of the database
    connection. For special quoting, use [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name").'
  id: totrans-767
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` – 字符串模式名称；如果省略，则使用数据库连接的默认模式。对于特殊引用，请使用[`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")。'
- en: '`**kw` – Additional keyword argument to pass to the dialect specific implementation.
    See the documentation of the dialect in use for more information.'
  id: totrans-768
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` – 附加的关键字参数，传递给特定方言的实现。有关更多信息，请参阅正在使用的方言的文档。'
- en: 'Returns:'
  id: totrans-769
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a list of dictionaries, each representing the a foreign key definition.
  id: totrans-770
  prefs: []
  type: TYPE_NORMAL
  zh: 一个字典列表，每个字典表示一个外键定义。
- en: See also
  id: totrans-771
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Inspector.get_multi_foreign_keys()`](#sqlalchemy.engine.reflection.Inspector.get_multi_foreign_keys
    "sqlalchemy.engine.reflection.Inspector.get_multi_foreign_keys")'
  id: totrans-772
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Inspector.get_multi_foreign_keys()`](#sqlalchemy.engine.reflection.Inspector.get_multi_foreign_keys
    "sqlalchemy.engine.reflection.Inspector.get_multi_foreign_keys")'
- en: '[PRE162]'
  id: totrans-773
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: Return information about indexes in `table_name`.
  id: totrans-774
  prefs: []
  type: TYPE_NORMAL
  zh: 返回有关`table_name`中索引的信息。
- en: Given a string `table_name` and an optional string schema, return index information
    as a list of [`ReflectedIndex`](#sqlalchemy.engine.interfaces.ReflectedIndex "sqlalchemy.engine.interfaces.ReflectedIndex").
  id: totrans-775
  prefs: []
  type: TYPE_NORMAL
  zh: 给定字符串`table_name`和可选的字符串模式，将索引信息作为[`ReflectedIndex`](#sqlalchemy.engine.interfaces.ReflectedIndex
    "sqlalchemy.engine.interfaces.ReflectedIndex")的列表返回。
- en: 'Parameters:'
  id: totrans-776
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`table_name` – string name of the table. For special quoting, use [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name").'
  id: totrans-777
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`table_name` – 表格的字符串名称。对于特殊引用，请使用[`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")。'
- en: '`schema` – string schema name; if omitted, uses the default schema of the database
    connection. For special quoting, use [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name").'
  id: totrans-778
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` – 字符串模式名称；如果省略，则使用数据库连接的默认模式。对于特殊引用，请使用[`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")。'
- en: '`**kw` – Additional keyword argument to pass to the dialect specific implementation.
    See the documentation of the dialect in use for more information.'
  id: totrans-779
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` – 附加的关键字参数，传递给特定方言的实现。有关更多信息，请参阅正在使用的方言的文档。'
- en: 'Returns:'
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a list of dictionaries, each representing the definition of an index.
  id: totrans-781
  prefs: []
  type: TYPE_NORMAL
  zh: 一个字典列表，每个字典表示一个索引的定义。
- en: See also
  id: totrans-782
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Inspector.get_multi_indexes()`](#sqlalchemy.engine.reflection.Inspector.get_multi_indexes
    "sqlalchemy.engine.reflection.Inspector.get_multi_indexes")'
  id: totrans-783
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Inspector.get_multi_indexes()`](#sqlalchemy.engine.reflection.Inspector.get_multi_indexes
    "sqlalchemy.engine.reflection.Inspector.get_multi_indexes")'
- en: '[PRE163]'
  id: totrans-784
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: Return all materialized view names in schema.
  id: totrans-785
  prefs: []
  type: TYPE_NORMAL
  zh: 返回模式中的所有物化视图名称。
- en: 'Parameters:'
  id: totrans-786
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`schema` – Optional, retrieve names from a non-default schema. For special
    quoting, use [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name").'
  id: totrans-787
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` – 可选，从非默认模式中检索名称。对于特殊引用，请使用[`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")。'
- en: '`**kw` – Additional keyword argument to pass to the dialect specific implementation.
    See the documentation of the dialect in use for more information.'
  id: totrans-788
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` – 附加的关键字参数，传递给特定方言的实现。有关更多信息，请参阅正在使用的方言的文档。'
- en: New in version 2.0.
  id: totrans-789
  prefs: []
  type: TYPE_NORMAL
  zh: 版本2.0中的新功能。
- en: See also
  id: totrans-790
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Inspector.get_view_names()`](#sqlalchemy.engine.reflection.Inspector.get_view_names
    "sqlalchemy.engine.reflection.Inspector.get_view_names")'
  id: totrans-791
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Inspector.get_view_names()`](#sqlalchemy.engine.reflection.Inspector.get_view_names
    "sqlalchemy.engine.reflection.Inspector.get_view_names")'
- en: '[PRE164]'
  id: totrans-792
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: Return information about check constraints in all tables in the given schema.
  id: totrans-793
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定模式中所有表格中检查约束的信息。
- en: The tables can be filtered by passing the names to use to `filter_names`.
  id: totrans-794
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过将要使用的名称传递给`filter_names`来过滤表格。
- en: For each table the value is a list of [`ReflectedCheckConstraint`](#sqlalchemy.engine.interfaces.ReflectedCheckConstraint
    "sqlalchemy.engine.interfaces.ReflectedCheckConstraint").
  id: totrans-795
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个表，值是[`ReflectedCheckConstraint`](#sqlalchemy.engine.interfaces.ReflectedCheckConstraint
    "sqlalchemy.engine.interfaces.ReflectedCheckConstraint")的列表。
- en: 'Parameters:'
  id: totrans-796
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`schema` – string schema name; if omitted, uses the default schema of the database
    connection. For special quoting, use [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name").'
  id: totrans-797
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` – 字符串模式名称；如果省略，则使用数据库连接的默认模式。对于特殊引用，请使用[`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")。'
- en: '`filter_names` – optionally return information only for the objects listed
    here.'
  id: totrans-798
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`filter_names` – 可选地仅返回此处列出的对象的信息。'
- en: '`kind` – a `ObjectKind` that specifies the type of objects to reflect. Defaults
    to `ObjectKind.TABLE`.'
  id: totrans-799
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kind` – 指定要反映的对象类型的`ObjectKind`。默认为`ObjectKind.TABLE`。'
- en: '`scope` – a `ObjectScope` that specifies if constraints of default, temporary
    or any tables should be reflected. Defaults to `ObjectScope.DEFAULT`.'
  id: totrans-800
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scope` – 指定应反映默认、临时或任何表的约束的`ObjectScope`。默认为`ObjectScope.DEFAULT`。'
- en: '`**kw` – Additional keyword argument to pass to the dialect specific implementation.
    See the documentation of the dialect in use for more information.'
  id: totrans-801
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` – 传递给特定方言实现的额外关键字参数。有关更多信息，请参阅正在使用的方言的文档。'
- en: 'Returns:'
  id: totrans-802
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a dictionary where the keys are two-tuple schema,table-name and the values are
    list of dictionaries, each representing the definition of a check constraints.
    The schema is `None` if no schema is provided.
  id: totrans-803
  prefs: []
  type: TYPE_NORMAL
  zh: 一个字典，其中键是两元组模式、表名，值是字典列表，每个表示检查约束的定义。如果未提供模式，则模式为`None`。
- en: New in version 2.0.
  id: totrans-804
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0 中新增。
- en: See also
  id: totrans-805
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Inspector.get_check_constraints()`](#sqlalchemy.engine.reflection.Inspector.get_check_constraints
    "sqlalchemy.engine.reflection.Inspector.get_check_constraints")'
  id: totrans-806
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Inspector.get_check_constraints()`](#sqlalchemy.engine.reflection.Inspector.get_check_constraints
    "sqlalchemy.engine.reflection.Inspector.get_check_constraints")'
- en: '[PRE165]'
  id: totrans-807
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: Return information about columns in all objects in the given schema.
  id: totrans-808
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定模式中所有对象中列的信息。
- en: The objects can be filtered by passing the names to use to `filter_names`.
  id: totrans-809
  prefs: []
  type: TYPE_NORMAL
  zh: 可通过将要用于`filter_names`的名称传递来过滤对象。
- en: For each table the value is a list of [`ReflectedColumn`](#sqlalchemy.engine.interfaces.ReflectedColumn
    "sqlalchemy.engine.interfaces.ReflectedColumn").
  id: totrans-810
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个表，值是[`ReflectedColumn`](#sqlalchemy.engine.interfaces.ReflectedColumn "sqlalchemy.engine.interfaces.ReflectedColumn")的列表。
- en: 'Parameters:'
  id: totrans-811
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`schema` – string schema name; if omitted, uses the default schema of the database
    connection. For special quoting, use [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name").'
  id: totrans-812
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` – 字符串模式名称；如果省略，则使用数据库连接的默认模式。对于特殊引用，请使用[`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")。'
- en: '`filter_names` – optionally return information only for the objects listed
    here.'
  id: totrans-813
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`filter_names` – 可选地仅返回此处列出的对象的信息。'
- en: '`kind` – a `ObjectKind` that specifies the type of objects to reflect. Defaults
    to `ObjectKind.TABLE`.'
  id: totrans-814
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kind` – 指定要反映的对象类型的`ObjectKind`。默认为`ObjectKind.TABLE`。'
- en: '`scope` – a `ObjectScope` that specifies if columns of default, temporary or
    any tables should be reflected. Defaults to `ObjectScope.DEFAULT`.'
  id: totrans-815
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scope` – 指定应反映默认、临时或任何表的列的`ObjectScope`。默认为`ObjectScope.DEFAULT`。'
- en: '`**kw` – Additional keyword argument to pass to the dialect specific implementation.
    See the documentation of the dialect in use for more information.'
  id: totrans-816
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` – 传递给特定方言实现的额外关键字参数。有关更多信息，请参阅正在使用的方言的文档。'
- en: 'Returns:'
  id: totrans-817
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a dictionary where the keys are two-tuple schema,table-name and the values are
    list of dictionaries, each representing the definition of a database column. The
    schema is `None` if no schema is provided.
  id: totrans-818
  prefs: []
  type: TYPE_NORMAL
  zh: 一个字典，其中键是两元组模式、表名，值是字典列表，每个表示数据库列的定义。如果未提供模式，则模式为`None`。
- en: New in version 2.0.
  id: totrans-819
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0 中新增。
- en: See also
  id: totrans-820
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Inspector.get_columns()`](#sqlalchemy.engine.reflection.Inspector.get_columns
    "sqlalchemy.engine.reflection.Inspector.get_columns")'
  id: totrans-821
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Inspector.get_columns()`](#sqlalchemy.engine.reflection.Inspector.get_columns
    "sqlalchemy.engine.reflection.Inspector.get_columns")'
- en: '[PRE166]'
  id: totrans-822
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: Return information about foreign_keys in all tables in the given schema.
  id: totrans-823
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定模式中所有表中外键的信息。
- en: The tables can be filtered by passing the names to use to `filter_names`.
  id: totrans-824
  prefs: []
  type: TYPE_NORMAL
  zh: 可通过将要用于`filter_names`的名称传递来过滤表。
- en: For each table the value is a list of [`ReflectedForeignKeyConstraint`](#sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint
    "sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint").
  id: totrans-825
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个表，值是一个 [`ReflectedForeignKeyConstraint`](#sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint
    "sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint") 列表。
- en: 'Parameters:'
  id: totrans-826
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`schema` – string schema name; if omitted, uses the default schema of the database
    connection. For special quoting, use [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name").'
  id: totrans-827
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` – 字符串模式名称；如果省略，则使用数据库连接的默认模式。要进行特殊引用，请使用 [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")。'
- en: '`filter_names` – optionally return information only for the objects listed
    here.'
  id: totrans-828
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`filter_names` – 可选择仅返回此处列出的对象的信息。'
- en: '`kind` – a `ObjectKind` that specifies the type of objects to reflect. Defaults
    to `ObjectKind.TABLE`.'
  id: totrans-829
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kind` – 一个指定要反射的对象类型的 `ObjectKind`。默认为 `ObjectKind.TABLE`。'
- en: '`scope` – a `ObjectScope` that specifies if foreign keys of default, temporary
    or any tables should be reflected. Defaults to `ObjectScope.DEFAULT`.'
  id: totrans-830
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scope` – 一个指定要反射的默认、临时或任何表的外键的 `ObjectScope`。默认为 `ObjectScope.DEFAULT`。'
- en: '`**kw` – Additional keyword argument to pass to the dialect specific implementation.
    See the documentation of the dialect in use for more information.'
  id: totrans-831
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` – 传递给特定方言实现的额外关键字参数。有关更多信息，请参阅正在使用的方言的文档。'
- en: 'Returns:'
  id: totrans-832
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a dictionary where the keys are two-tuple schema,table-name and the values are
    list of dictionaries, each representing a foreign key definition. The schema is
    `None` if no schema is provided.
  id: totrans-833
  prefs: []
  type: TYPE_NORMAL
  zh: 一个字典，其中键是二元组模式、表名，值是字典列表，每个表示外键定义。如果未提供模式，则模式为 `None`。
- en: New in version 2.0.
  id: totrans-834
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0 中新增。
- en: See also
  id: totrans-835
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Inspector.get_foreign_keys()`](#sqlalchemy.engine.reflection.Inspector.get_foreign_keys
    "sqlalchemy.engine.reflection.Inspector.get_foreign_keys")'
  id: totrans-836
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Inspector.get_foreign_keys()`](#sqlalchemy.engine.reflection.Inspector.get_foreign_keys
    "sqlalchemy.engine.reflection.Inspector.get_foreign_keys")'
- en: '[PRE167]'
  id: totrans-837
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: Return information about indexes in in all objects in the given schema.
  id: totrans-838
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定模式中所有对象中的索引的信息。
- en: The objects can be filtered by passing the names to use to `filter_names`.
  id: totrans-839
  prefs: []
  type: TYPE_NORMAL
  zh: 可通过将名称传递给 `filter_names` 来过滤对象。
- en: For each table the value is a list of [`ReflectedIndex`](#sqlalchemy.engine.interfaces.ReflectedIndex
    "sqlalchemy.engine.interfaces.ReflectedIndex").
  id: totrans-840
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个表，值是一个 [`ReflectedIndex`](#sqlalchemy.engine.interfaces.ReflectedIndex "sqlalchemy.engine.interfaces.ReflectedIndex")
    列表。
- en: 'Parameters:'
  id: totrans-841
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`schema` – string schema name; if omitted, uses the default schema of the database
    connection. For special quoting, use [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name").'
  id: totrans-842
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` – 字符串模式名称；如果省略，则使用数据库连接的默认模式。要进行特殊引用，请使用 [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")。'
- en: '`filter_names` – optionally return information only for the objects listed
    here.'
  id: totrans-843
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`filter_names` – 可选择仅返回此处列出的对象的信息。'
- en: '`kind` – a `ObjectKind` that specifies the type of objects to reflect. Defaults
    to `ObjectKind.TABLE`.'
  id: totrans-844
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kind` – 一个指定要反射的对象类型的 `ObjectKind`。默认为 `ObjectKind.TABLE`。'
- en: '`scope` – a `ObjectScope` that specifies if indexes of default, temporary or
    any tables should be reflected. Defaults to `ObjectScope.DEFAULT`.'
  id: totrans-845
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scope` – 一个指定要反射的默认、临时或任何表的索引的 `ObjectScope`。默认为 `ObjectScope.DEFAULT`。'
- en: '`**kw` – Additional keyword argument to pass to the dialect specific implementation.
    See the documentation of the dialect in use for more information.'
  id: totrans-846
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` – 传递给特定方言实现的额外关键字参数。有关更多信息，请参阅正在使用的方言的文档。'
- en: 'Returns:'
  id: totrans-847
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a dictionary where the keys are two-tuple schema,table-name and the values are
    list of dictionaries, each representing the definition of an index. The schema
    is `None` if no schema is provided.
  id: totrans-848
  prefs: []
  type: TYPE_NORMAL
  zh: 一个字典，其中键是二元组模式、表名，值是字典列表，每个表示索引的定义。如果未提供模式，则模式为 `None`。
- en: New in version 2.0.
  id: totrans-849
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0 中新增。
- en: See also
  id: totrans-850
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Inspector.get_indexes()`](#sqlalchemy.engine.reflection.Inspector.get_indexes
    "sqlalchemy.engine.reflection.Inspector.get_indexes")'
  id: totrans-851
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Inspector.get_indexes()`](#sqlalchemy.engine.reflection.Inspector.get_indexes
    "sqlalchemy.engine.reflection.Inspector.get_indexes")'
- en: '[PRE168]'
  id: totrans-852
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: Return information about primary key constraints in all tables in the given
    schema.
  id: totrans-853
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定模式中所有表中主键约束的信息。
- en: The tables can be filtered by passing the names to use to `filter_names`.
  id: totrans-854
  prefs: []
  type: TYPE_NORMAL
  zh: 可通过将名称传递给 `filter_names` 来过滤表。
- en: For each table the value is a [`ReflectedPrimaryKeyConstraint`](#sqlalchemy.engine.interfaces.ReflectedPrimaryKeyConstraint
    "sqlalchemy.engine.interfaces.ReflectedPrimaryKeyConstraint").
  id: totrans-855
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个表，值是 [`ReflectedPrimaryKeyConstraint`](#sqlalchemy.engine.interfaces.ReflectedPrimaryKeyConstraint
    "sqlalchemy.engine.interfaces.ReflectedPrimaryKeyConstraint")。
- en: 'Parameters:'
  id: totrans-856
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`schema` – string schema name; if omitted, uses the default schema of the database
    connection. For special quoting, use [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name").'
  id: totrans-857
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` – 字符串模式名称；如果省略，则使用数据库连接的默认模式。要进行特殊引用，请使用 [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")。'
- en: '`filter_names` – optionally return information only for the objects listed
    here.'
  id: totrans-858
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`filter_names` – 可选地仅返回此处列出的对象的信息。'
- en: '`kind` – a `ObjectKind` that specifies the type of objects to reflect. Defaults
    to `ObjectKind.TABLE`.'
  id: totrans-859
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kind` – 一个 `ObjectKind`，指定要反映的对象类型。默认为 `ObjectKind.TABLE`。'
- en: '`scope` – a `ObjectScope` that specifies if primary keys of default, temporary
    or any tables should be reflected. Defaults to `ObjectScope.DEFAULT`.'
  id: totrans-860
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scope` – 一个 `ObjectScope`，指定应反映默认、临时或任何表的主键。默认为 `ObjectScope.DEFAULT`。'
- en: '`**kw` – Additional keyword argument to pass to the dialect specific implementation.
    See the documentation of the dialect in use for more information.'
  id: totrans-861
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` – 传递给方言特定实现的额外关键字参数。有关更多信息，请参阅所使用的方言的文档。'
- en: 'Returns:'
  id: totrans-862
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a dictionary where the keys are two-tuple schema,table-name and the values are
    dictionaries, each representing the definition of a primary key constraint. The
    schema is `None` if no schema is provided.
  id: totrans-863
  prefs: []
  type: TYPE_NORMAL
  zh: 一个字典，其中键是二元组 schema,table-name，值是字典，每个表示主键约束的定义。如果未提供模式，则模式为 `None`。
- en: New in version 2.0.
  id: totrans-864
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0 版新功能。
- en: See also
  id: totrans-865
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Inspector.get_pk_constraint()`](#sqlalchemy.engine.reflection.Inspector.get_pk_constraint
    "sqlalchemy.engine.reflection.Inspector.get_pk_constraint")'
  id: totrans-866
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Inspector.get_pk_constraint()`](#sqlalchemy.engine.reflection.Inspector.get_pk_constraint
    "sqlalchemy.engine.reflection.Inspector.get_pk_constraint")'
- en: '[PRE169]'
  id: totrans-867
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: Return information about the table comment in all objects in the given schema.
  id: totrans-868
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定模式中所有对象的表注释信息。
- en: The objects can be filtered by passing the names to use to `filter_names`.
  id: totrans-869
  prefs: []
  type: TYPE_NORMAL
  zh: 可通过将要使用的名称传递给 `filter_names` 进行过滤对象。
- en: For each table the value is a [`ReflectedTableComment`](#sqlalchemy.engine.interfaces.ReflectedTableComment
    "sqlalchemy.engine.interfaces.ReflectedTableComment").
  id: totrans-870
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个表，值是 [`ReflectedTableComment`](#sqlalchemy.engine.interfaces.ReflectedTableComment
    "sqlalchemy.engine.interfaces.ReflectedTableComment")。
- en: Raises `NotImplementedError` for a dialect that does not support comments.
  id: totrans-871
  prefs: []
  type: TYPE_NORMAL
  zh: 对于不支持注释的方言，引发 `NotImplementedError` 异常。
- en: 'Parameters:'
  id: totrans-872
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`schema` – string schema name; if omitted, uses the default schema of the database
    connection. For special quoting, use [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name").'
  id: totrans-873
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` – 字符串模式名称；如果省略，则使用数据库连接的默认模式。要进行特殊引用，请使用 [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")。'
- en: '`filter_names` – optionally return information only for the objects listed
    here.'
  id: totrans-874
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`filter_names` – 可选地仅返回此处列出的对象的信息。'
- en: '`kind` – a `ObjectKind` that specifies the type of objects to reflect. Defaults
    to `ObjectKind.TABLE`.'
  id: totrans-875
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kind` – 一个 `ObjectKind`，指定要反映的对象类型。默认为 `ObjectKind.TABLE`。'
- en: '`scope` – a `ObjectScope` that specifies if comments of default, temporary
    or any tables should be reflected. Defaults to `ObjectScope.DEFAULT`.'
  id: totrans-876
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scope` – 一个 `ObjectScope`，指定应反映默认、临时或任何表的注释。默认为 `ObjectScope.DEFAULT`。'
- en: '`**kw` – Additional keyword argument to pass to the dialect specific implementation.
    See the documentation of the dialect in use for more information.'
  id: totrans-877
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` – 传递给方言特定实现的额外关键字参数。有关更多信息，请参阅所使用的方言的文档。'
- en: 'Returns:'
  id: totrans-878
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a dictionary where the keys are two-tuple schema,table-name and the values are
    dictionaries, representing the table comments. The schema is `None` if no schema
    is provided.
  id: totrans-879
  prefs: []
  type: TYPE_NORMAL
  zh: 一个字典，其中键是二元组 schema,table-name，值是字典，表示表注释。如果未提供模式，则模式为 `None`。
- en: New in version 2.0.
  id: totrans-880
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0 版新功能。
- en: See also
  id: totrans-881
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Inspector.get_table_comment()`](#sqlalchemy.engine.reflection.Inspector.get_table_comment
    "sqlalchemy.engine.reflection.Inspector.get_table_comment")'
  id: totrans-882
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Inspector.get_table_comment()`](#sqlalchemy.engine.reflection.Inspector.get_table_comment
    "sqlalchemy.engine.reflection.Inspector.get_table_comment")'
- en: '[PRE170]'
  id: totrans-883
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: Return a dictionary of options specified when the tables in the given schema
    were created.
  id: totrans-884
  prefs: []
  type: TYPE_NORMAL
  zh: 返回指定模式中的表创建时指定的选项的字典。
- en: The tables can be filtered by passing the names to use to `filter_names`.
  id: totrans-885
  prefs: []
  type: TYPE_NORMAL
  zh: 表格可以通过将要使用的名称传递给 `filter_names` 进行过滤。
- en: This currently includes some options that apply to MySQL and Oracle tables.
  id: totrans-886
  prefs: []
  type: TYPE_NORMAL
  zh: 目前包括一些适用于MySQL和Oracle表的选项。
- en: 'Parameters:'
  id: totrans-887
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`schema` – string schema name; if omitted, uses the default schema of the database
    connection. For special quoting, use [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name").'
  id: totrans-888
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` – 字符串模式名称；如果省略，则使用数据库连接的默认模式。对于特殊引用，请使用[`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")。'
- en: '`filter_names` – optionally return information only for the objects listed
    here.'
  id: totrans-889
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`filter_names` – 可选择仅返回此处列出的对象的信息。'
- en: '`kind` – a `ObjectKind` that specifies the type of objects to reflect. Defaults
    to `ObjectKind.TABLE`.'
  id: totrans-890
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kind` – 一个`ObjectKind`，指定要反映的对象类型。默认为`ObjectKind.TABLE`。'
- en: '`scope` – a `ObjectScope` that specifies if options of default, temporary or
    any tables should be reflected. Defaults to `ObjectScope.DEFAULT`.'
  id: totrans-891
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scope` – 一个`ObjectScope`，指定应该反映哪些选项的范围，默认为`ObjectScope.DEFAULT`。'
- en: '`**kw` – Additional keyword argument to pass to the dialect specific implementation.
    See the documentation of the dialect in use for more information.'
  id: totrans-892
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` – 传递给方言特定实现的附加关键字参数。有关更多信息，请参阅所使用方言的文档。'
- en: 'Returns:'
  id: totrans-893
  prefs: []
  type: TYPE_NORMAL
  zh: 返回值：
- en: a dictionary where the keys are two-tuple schema,table-name and the values are
    dictionaries with the table options. The returned keys in each dict depend on
    the dialect in use. Each one is prefixed with the dialect name. The schema is
    `None` if no schema is provided.
  id: totrans-894
  prefs: []
  type: TYPE_NORMAL
  zh: 一个字典，其中键是两元组schema,table-name，值是具有表选项的字典。每个字典中返回的键取决于所使用的方言。每个键都以方言名称为前缀。如果未提供模式，则模式为`None`。
- en: New in version 2.0.
  id: totrans-895
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本功能2.0。
- en: See also
  id: totrans-896
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Inspector.get_table_options()`](#sqlalchemy.engine.reflection.Inspector.get_table_options
    "sqlalchemy.engine.reflection.Inspector.get_table_options")'
  id: totrans-897
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Inspector.get_table_options()`](#sqlalchemy.engine.reflection.Inspector.get_table_options
    "sqlalchemy.engine.reflection.Inspector.get_table_options")'
- en: '[PRE171]'
  id: totrans-898
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: Return information about unique constraints in all tables in the given schema.
  id: totrans-899
  prefs: []
  type: TYPE_NORMAL
  zh: 返回有关给定模式中所有表的唯一约束的信息。
- en: The tables can be filtered by passing the names to use to `filter_names`.
  id: totrans-900
  prefs: []
  type: TYPE_NORMAL
  zh: 表格可以通过将要使用的名称传递给`filter_names`来进行过滤。
- en: For each table the value is a list of [`ReflectedUniqueConstraint`](#sqlalchemy.engine.interfaces.ReflectedUniqueConstraint
    "sqlalchemy.engine.interfaces.ReflectedUniqueConstraint").
  id: totrans-901
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个表，值是一个[`ReflectedUniqueConstraint`](#sqlalchemy.engine.interfaces.ReflectedUniqueConstraint
    "sqlalchemy.engine.interfaces.ReflectedUniqueConstraint")的列表。
- en: 'Parameters:'
  id: totrans-902
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`schema` – string schema name; if omitted, uses the default schema of the database
    connection. For special quoting, use [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name").'
  id: totrans-903
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` – 字符串模式名称；如果省略，则使用数据库连接的默认模式。对于特殊引用，请使用[`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")。'
- en: '`filter_names` – optionally return information only for the objects listed
    here.'
  id: totrans-904
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`filter_names` – 可选择仅返回此处列出的对象的信息。'
- en: '`kind` – a `ObjectKind` that specifies the type of objects to reflect. Defaults
    to `ObjectKind.TABLE`.'
  id: totrans-905
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kind` – 一个`ObjectKind`，指定要反映的对象类型。默认为`ObjectKind.TABLE`。'
- en: '`scope` – a `ObjectScope` that specifies if constraints of default, temporary
    or any tables should be reflected. Defaults to `ObjectScope.DEFAULT`.'
  id: totrans-906
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scope` – 一个`ObjectScope`，指定应该反映哪些约束的范围，默认为`ObjectScope.DEFAULT`。'
- en: '`**kw` – Additional keyword argument to pass to the dialect specific implementation.
    See the documentation of the dialect in use for more information.'
  id: totrans-907
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` – 传递给方言特定实现的附加关键字参数。有关更多信息，请参阅所使用方言的文档。'
- en: 'Returns:'
  id: totrans-908
  prefs: []
  type: TYPE_NORMAL
  zh: 返回值：
- en: a dictionary where the keys are two-tuple schema,table-name and the values are
    list of dictionaries, each representing the definition of an unique constraint.
    The schema is `None` if no schema is provided.
  id: totrans-909
  prefs: []
  type: TYPE_NORMAL
  zh: 一个字典，其中键是两元组schema,table-name，值是表示唯一约束定义的字典列表。如果未提供模式，则模式为`None`。
- en: New in version 2.0.
  id: totrans-910
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本功能2.0。
- en: See also
  id: totrans-911
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Inspector.get_unique_constraints()`](#sqlalchemy.engine.reflection.Inspector.get_unique_constraints
    "sqlalchemy.engine.reflection.Inspector.get_unique_constraints")'
  id: totrans-912
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Inspector.get_unique_constraints()`](#sqlalchemy.engine.reflection.Inspector.get_unique_constraints
    "sqlalchemy.engine.reflection.Inspector.get_unique_constraints")'
- en: '[PRE172]'
  id: totrans-913
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: Return information about primary key constraint in `table_name`.
  id: totrans-914
  prefs: []
  type: TYPE_NORMAL
  zh: 返回有关`table_name`中主键约束的信息。
- en: Given a string `table_name`, and an optional string schema, return primary key
    information as a [`ReflectedPrimaryKeyConstraint`](#sqlalchemy.engine.interfaces.ReflectedPrimaryKeyConstraint
    "sqlalchemy.engine.interfaces.ReflectedPrimaryKeyConstraint").
  id: totrans-915
  prefs: []
  type: TYPE_NORMAL
  zh: 给定字符串`table_name`，以及一个可选的字符串模式，返回主键信息作为[`ReflectedPrimaryKeyConstraint`](#sqlalchemy.engine.interfaces.ReflectedPrimaryKeyConstraint
    "sqlalchemy.engine.interfaces.ReflectedPrimaryKeyConstraint")。
- en: 'Parameters:'
  id: totrans-916
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`table_name` – string name of the table. For special quoting, use [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name").'
  id: totrans-917
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`table_name` - 表的字符串名称。要进行特殊引用，请使用[`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")。'
- en: '`schema` – string schema name; if omitted, uses the default schema of the database
    connection. For special quoting, use [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name").'
  id: totrans-918
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` - 字符串模式名称；如果省略，则使用数据库连接的默认模式。要进行特殊引用，请使用[`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")。'
- en: '`**kw` – Additional keyword argument to pass to the dialect specific implementation.
    See the documentation of the dialect in use for more information.'
  id: totrans-919
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` - 传递给特定方言实现的附加关键字参数。有关更多信息，请参阅正在使用的方言的文档。'
- en: 'Returns:'
  id: totrans-920
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a dictionary representing the definition of a primary key constraint.
  id: totrans-921
  prefs: []
  type: TYPE_NORMAL
  zh: 一个表示主键约束定义的字典。
- en: See also
  id: totrans-922
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Inspector.get_multi_pk_constraint()`](#sqlalchemy.engine.reflection.Inspector.get_multi_pk_constraint
    "sqlalchemy.engine.reflection.Inspector.get_multi_pk_constraint")'
  id: totrans-923
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Inspector.get_multi_pk_constraint()`](#sqlalchemy.engine.reflection.Inspector.get_multi_pk_constraint
    "sqlalchemy.engine.reflection.Inspector.get_multi_pk_constraint")'
- en: '[PRE173]'
  id: totrans-924
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: Return all schema names.
  id: totrans-925
  prefs: []
  type: TYPE_NORMAL
  zh: 返回所有模式名称。
- en: 'Parameters:'
  id: totrans-926
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '****kw** – Additional keyword argument to pass to the dialect specific implementation.
    See the documentation of the dialect in use for more information.'
  id: totrans-927
  prefs: []
  type: TYPE_NORMAL
  zh: '****kw** - 传递给特定方言实现的附加关键字参数。有关更多信息，请参阅正在使用的方言的文档。'
- en: '[PRE174]'
  id: totrans-928
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: Return all sequence names in schema.
  id: totrans-929
  prefs: []
  type: TYPE_NORMAL
  zh: 返回模式中所有序列名称。
- en: 'Parameters:'
  id: totrans-930
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`schema` – Optional, retrieve names from a non-default schema. For special
    quoting, use [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name").'
  id: totrans-931
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` - 可选，从非默认模式中检索名称。要进行特殊引用，请使用[`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")。'
- en: '`**kw` – Additional keyword argument to pass to the dialect specific implementation.
    See the documentation of the dialect in use for more information.'
  id: totrans-932
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` - 传递给特定方言实现的附加关键字参数。有关更多信息，请参阅正在使用的方言的文档。'
- en: '[PRE175]'
  id: totrans-933
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: Return dependency-sorted table and foreign key constraint names in referred
    to within a particular schema.
  id: totrans-934
  prefs: []
  type: TYPE_NORMAL
  zh: 返回特定模式中所引用的表和外键约束名的依赖排序。
- en: This will yield 2-tuples of `(tablename, [(tname, fkname), (tname, fkname),
    ...])` consisting of table names in CREATE order grouped with the foreign key
    constraint names that are not detected as belonging to a cycle. The final element
    will be `(None, [(tname, fkname), (tname, fkname), ..])` which will consist of
    remaining foreign key constraint names that would require a separate CREATE step
    after-the-fact, based on dependencies between tables.
  id: totrans-935
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生2元组`(tablename, [(tname, fkname), (tname, fkname), ...])`，其中包含按CREATE顺序分组的表名与未被检测为属于循环的外键约束名。最后一个元素将是`(None,
    [(tname, fkname), (tname, fkname), ..])`，其中包含剩余的外键约束名，这些名字需要在事后单独进行CREATE步骤，基于表之间的依赖关系。
- en: 'Parameters:'
  id: totrans-936
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`schema` – schema name to query, if not the default schema.'
  id: totrans-937
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` - 要查询的模式名称，如果不是默认模式。'
- en: '`**kw` – Additional keyword argument to pass to the dialect specific implementation.
    See the documentation of the dialect in use for more information.'
  id: totrans-938
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` - 传递给特定方言实现的附加关键字参数。有关更多信息，请参阅正在使用的方言的文档。'
- en: See also
  id: totrans-939
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Inspector.get_table_names()`](#sqlalchemy.engine.reflection.Inspector.get_table_names
    "sqlalchemy.engine.reflection.Inspector.get_table_names")'
  id: totrans-940
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Inspector.get_table_names()`](#sqlalchemy.engine.reflection.Inspector.get_table_names
    "sqlalchemy.engine.reflection.Inspector.get_table_names")'
- en: '[`sort_tables_and_constraints()`](ddl.html#sqlalchemy.schema.sort_tables_and_constraints
    "sqlalchemy.schema.sort_tables_and_constraints") - similar method which works
    with an already-given [`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData").'
  id: totrans-941
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sort_tables_and_constraints()`](ddl.html#sqlalchemy.schema.sort_tables_and_constraints
    "sqlalchemy.schema.sort_tables_and_constraints") - 与已给定的[`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")类似的方法。'
- en: '[PRE176]'
  id: totrans-942
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: Return information about the table comment for `table_name`.
  id: totrans-943
  prefs: []
  type: TYPE_NORMAL
  zh: 返回关于`table_name`的表注释的信息。
- en: Given a string `table_name` and an optional string `schema`, return table comment
    information as a [`ReflectedTableComment`](#sqlalchemy.engine.interfaces.ReflectedTableComment
    "sqlalchemy.engine.interfaces.ReflectedTableComment").
  id: totrans-944
  prefs: []
  type: TYPE_NORMAL
  zh: 给定字符串 `table_name` 和可选字符串 `schema`，将表注释信息返回为 [`ReflectedTableComment`](#sqlalchemy.engine.interfaces.ReflectedTableComment
    "sqlalchemy.engine.interfaces.ReflectedTableComment")。
- en: Raises `NotImplementedError` for a dialect that does not support comments.
  id: totrans-945
  prefs: []
  type: TYPE_NORMAL
  zh: 对于不支持注释的方言，引发 `NotImplementedError`。
- en: 'Parameters:'
  id: totrans-946
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`table_name` – string name of the table. For special quoting, use [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name").'
  id: totrans-947
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`table_name` – 表的字符串名称。要进行特殊引用，请使用 [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")。'
- en: '`schema` – string schema name; if omitted, uses the default schema of the database
    connection. For special quoting, use [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name").'
  id: totrans-948
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` – 模式名称的字符串；如果省略，将使用数据库连接的默认模式。要进行特殊引用，请使用 [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")。'
- en: '`**kw` – Additional keyword argument to pass to the dialect specific implementation.
    See the documentation of the dialect in use for more information.'
  id: totrans-949
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` – 传递给特定方言实现的额外关键字参数。有关更多信息，请参阅正在使用的方言的文档。'
- en: 'Returns:'
  id: totrans-950
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a dictionary, with the table comment.
  id: totrans-951
  prefs: []
  type: TYPE_NORMAL
  zh: 一个字典，包含表的注释。
- en: New in version 1.2.
  id: totrans-952
  prefs: []
  type: TYPE_NORMAL
  zh: 自 1.2 版开始新增。
- en: See also
  id: totrans-953
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Inspector.get_multi_table_comment()`](#sqlalchemy.engine.reflection.Inspector.get_multi_table_comment
    "sqlalchemy.engine.reflection.Inspector.get_multi_table_comment")'
  id: totrans-954
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Inspector.get_multi_table_comment()`](#sqlalchemy.engine.reflection.Inspector.get_multi_table_comment
    "sqlalchemy.engine.reflection.Inspector.get_multi_table_comment")'
- en: '[PRE177]'
  id: totrans-955
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: Return all table names within a particular schema.
  id: totrans-956
  prefs: []
  type: TYPE_NORMAL
  zh: 返回特定模式内的所有表名称。
- en: The names are expected to be real tables only, not views. Views are instead
    returned using the [`Inspector.get_view_names()`](#sqlalchemy.engine.reflection.Inspector.get_view_names
    "sqlalchemy.engine.reflection.Inspector.get_view_names") and/or [`Inspector.get_materialized_view_names()`](#sqlalchemy.engine.reflection.Inspector.get_materialized_view_names
    "sqlalchemy.engine.reflection.Inspector.get_materialized_view_names") methods.
  id: totrans-957
  prefs: []
  type: TYPE_NORMAL
  zh: '名称预期只是实际表，而不是视图。视图使用 [`Inspector.get_view_names()`](#sqlalchemy.engine.reflection.Inspector.get_view_names
    "sqlalchemy.engine.reflection.Inspector.get_view_names") 和/或 [`Inspector.get_materialized_view_names()`](#sqlalchemy.engine.reflection.Inspector.get_materialized_view_names
    "sqlalchemy.engine.reflection.Inspector.get_materialized_view_names") 方法返回。 '
- en: 'Parameters:'
  id: totrans-958
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`schema` – Schema name. If `schema` is left at `None`, the database’s default
    schema is used, else the named schema is searched. If the database does not support
    named schemas, behavior is undefined if `schema` is not passed as `None`. For
    special quoting, use [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name").'
  id: totrans-959
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` – 模式名称。如果将 `schema` 留在 `None`，则使用数据库的默认模式，否则搜索命名模式。如果数据库不支持命名模式，则如果不将
    `schema` 传递为 `None`，则行为未定义。要进行特殊引用，请使用 [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")。'
- en: '`**kw` – Additional keyword argument to pass to the dialect specific implementation.
    See the documentation of the dialect in use for more information.'
  id: totrans-960
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` – 传递给特定方言实现的额外关键字参数。有关更多信息，请参阅正在使用的方言的文档。'
- en: See also
  id: totrans-961
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Inspector.get_sorted_table_and_fkc_names()`](#sqlalchemy.engine.reflection.Inspector.get_sorted_table_and_fkc_names
    "sqlalchemy.engine.reflection.Inspector.get_sorted_table_and_fkc_names")'
  id: totrans-962
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Inspector.get_sorted_table_and_fkc_names()`](#sqlalchemy.engine.reflection.Inspector.get_sorted_table_and_fkc_names
    "sqlalchemy.engine.reflection.Inspector.get_sorted_table_and_fkc_names")'
- en: '[`MetaData.sorted_tables`](metadata.html#sqlalchemy.schema.MetaData.sorted_tables
    "sqlalchemy.schema.MetaData.sorted_tables")'
  id: totrans-963
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MetaData.sorted_tables`](metadata.html#sqlalchemy.schema.MetaData.sorted_tables
    "sqlalchemy.schema.MetaData.sorted_tables")'
- en: '[PRE178]'
  id: totrans-964
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: Return a dictionary of options specified when the table of the given name was
    created.
  id: totrans-965
  prefs: []
  type: TYPE_NORMAL
  zh: 返回在创建给定名称的表时指定的选项字典。
- en: This currently includes some options that apply to MySQL and Oracle tables.
  id: totrans-966
  prefs: []
  type: TYPE_NORMAL
  zh: 目前包括一些适用于 MySQL 和 Oracle 表的选项。
- en: 'Parameters:'
  id: totrans-967
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`table_name` – string name of the table. For special quoting, use [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name").'
  id: totrans-968
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`table_name` – 表的字符串名称。要进行特殊引用，请使用 [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")。'
- en: '`schema` – string schema name; if omitted, uses the default schema of the database
    connection. For special quoting, use [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name").'
  id: totrans-969
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` – 字符串模式名称；如果省略，则使用数据库连接的默认模式。对于特殊引用，请使用[`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")。'
- en: '`**kw` – Additional keyword argument to pass to the dialect specific implementation.
    See the documentation of the dialect in use for more information.'
  id: totrans-970
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` – 传递给方言特定实现的额外关键字参数。有关更多信息，请参阅正在使用的方言的文档。'
- en: 'Returns:'
  id: totrans-971
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a dict with the table options. The returned keys depend on the dialect in use.
    Each one is prefixed with the dialect name.
  id: totrans-972
  prefs: []
  type: TYPE_NORMAL
  zh: 一个带有表选项的字典。返回的键取决于正在使用的方言。每个键都以方言名称为前缀。
- en: See also
  id: totrans-973
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Inspector.get_multi_table_options()`](#sqlalchemy.engine.reflection.Inspector.get_multi_table_options
    "sqlalchemy.engine.reflection.Inspector.get_multi_table_options")'
  id: totrans-974
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Inspector.get_multi_table_options()`](#sqlalchemy.engine.reflection.Inspector.get_multi_table_options
    "sqlalchemy.engine.reflection.Inspector.get_multi_table_options")'
- en: '[PRE179]'
  id: totrans-975
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: Return a list of temporary table names for the current bind.
  id: totrans-976
  prefs: []
  type: TYPE_NORMAL
  zh: 返回当前绑定的临时表名称列表。
- en: This method is unsupported by most dialects; currently only Oracle, PostgreSQL
    and SQLite implements it.
  id: totrans-977
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数方言不支持此方法；目前只有 Oracle、PostgreSQL 和 SQLite 实现了它。
- en: 'Parameters:'
  id: totrans-978
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '****kw** – Additional keyword argument to pass to the dialect specific implementation.
    See the documentation of the dialect in use for more information.'
  id: totrans-979
  prefs: []
  type: TYPE_NORMAL
  zh: '****kw** – 传递给方言特定实现的额外关键字参数。有关更多信息，请参阅正在使用的方言的文档。'
- en: '[PRE180]'
  id: totrans-980
  prefs: []
  type: TYPE_PRE
  zh: '[PRE180]'
- en: Return a list of temporary view names for the current bind.
  id: totrans-981
  prefs: []
  type: TYPE_NORMAL
  zh: 返回当前绑定的临时视图名称列表。
- en: This method is unsupported by most dialects; currently only PostgreSQL and SQLite
    implements it.
  id: totrans-982
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数方言不支持此方法；目前只有 PostgreSQL 和 SQLite 实现了它。
- en: 'Parameters:'
  id: totrans-983
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '****kw** – Additional keyword argument to pass to the dialect specific implementation.
    See the documentation of the dialect in use for more information.'
  id: totrans-984
  prefs: []
  type: TYPE_NORMAL
  zh: '****kw** – 传递给方言特定实现的额外关键字参数。有关更多信息，请参阅正在使用的方言的文档。'
- en: '[PRE181]'
  id: totrans-985
  prefs: []
  type: TYPE_PRE
  zh: '[PRE181]'
- en: Return information about unique constraints in `table_name`.
  id: totrans-986
  prefs: []
  type: TYPE_NORMAL
  zh: 返回`table_name`中唯一约束的信息。
- en: Given a string `table_name` and an optional string schema, return unique constraint
    information as a list of [`ReflectedUniqueConstraint`](#sqlalchemy.engine.interfaces.ReflectedUniqueConstraint
    "sqlalchemy.engine.interfaces.ReflectedUniqueConstraint").
  id: totrans-987
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个字符串`table_name`和一个可选的字符串模式，返回[`ReflectedUniqueConstraint`](#sqlalchemy.engine.interfaces.ReflectedUniqueConstraint
    "sqlalchemy.engine.interfaces.ReflectedUniqueConstraint")的唯一约束信息列表。
- en: 'Parameters:'
  id: totrans-988
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`table_name` – string name of the table. For special quoting, use [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name").'
  id: totrans-989
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`table_name` – 表的字符串名称。对于特殊引用，请使用[`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")。'
- en: '`schema` – string schema name; if omitted, uses the default schema of the database
    connection. For special quoting, use [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name").'
  id: totrans-990
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` – 字符串模式名称；如果省略，则使用数据库连接的默认模式。对于特殊引用，请使用[`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")。'
- en: '`**kw` – Additional keyword argument to pass to the dialect specific implementation.
    See the documentation of the dialect in use for more information.'
  id: totrans-991
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` – 传递给方言特定实现的额外关键字参数。有关更多信息，请参阅正在使用的方言的文档。'
- en: 'Returns:'
  id: totrans-992
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a list of dictionaries, each representing the definition of an unique constraint.
  id: totrans-993
  prefs: []
  type: TYPE_NORMAL
  zh: 一个字典列表，每个代表一个唯一约束的定义。
- en: See also
  id: totrans-994
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Inspector.get_multi_unique_constraints()`](#sqlalchemy.engine.reflection.Inspector.get_multi_unique_constraints
    "sqlalchemy.engine.reflection.Inspector.get_multi_unique_constraints")'
  id: totrans-995
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Inspector.get_multi_unique_constraints()`](#sqlalchemy.engine.reflection.Inspector.get_multi_unique_constraints
    "sqlalchemy.engine.reflection.Inspector.get_multi_unique_constraints")'
- en: '[PRE182]'
  id: totrans-996
  prefs: []
  type: TYPE_PRE
  zh: '[PRE182]'
- en: Return definition for the plain or materialized view called `view_name`.
  id: totrans-997
  prefs: []
  type: TYPE_NORMAL
  zh: 返回名为`view_name`的普通或材料化视图的定义。
- en: 'Parameters:'
  id: totrans-998
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`view_name` – Name of the view.'
  id: totrans-999
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`view_name` – 视图的名称。'
- en: '`schema` – Optional, retrieve names from a non-default schema. For special
    quoting, use [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name").'
  id: totrans-1000
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` – 可选，从非默认模式中检索名称。对于特殊引用，请使用[`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")。'
- en: '`**kw` – Additional keyword argument to pass to the dialect specific implementation.
    See the documentation of the dialect in use for more information.'
  id: totrans-1001
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` – 传递给方言特定实现的额外关键字参数。有关更多信息，请参阅正在使用的方言的文档。'
- en: '[PRE183]'
  id: totrans-1002
  prefs: []
  type: TYPE_PRE
  zh: '[PRE183]'
- en: Return all non-materialized view names in schema.
  id: totrans-1003
  prefs: []
  type: TYPE_NORMAL
  zh: 返回模式中所有非材料化视图名称。
- en: 'Parameters:'
  id: totrans-1004
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`schema` – Optional, retrieve names from a non-default schema. For special
    quoting, use [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name").'
  id: totrans-1005
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` – 可选，从非默认模式中检索名称。要进行特殊引用，请使用[`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")。'
- en: '`**kw` – Additional keyword argument to pass to the dialect specific implementation.
    See the documentation of the dialect in use for more information.'
  id: totrans-1006
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` – 额外的关键字参数，传递给特定方言实现。有关更多信息，请参阅正在使用的方言的文档。'
- en: 'Changed in version 2.0: For those dialects that previously included the names
    of materialized views in this list (currently PostgreSQL), this method no longer
    returns the names of materialized views. the [`Inspector.get_materialized_view_names()`](#sqlalchemy.engine.reflection.Inspector.get_materialized_view_names
    "sqlalchemy.engine.reflection.Inspector.get_materialized_view_names") method should
    be used instead.'
  id: totrans-1007
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 2.0 起更改：对于以前在此列表中包括材料化视图名称的方言（目前为 PostgreSQL），此方法不再返回材料化视图的名称。应改用[`Inspector.get_materialized_view_names()`](#sqlalchemy.engine.reflection.Inspector.get_materialized_view_names
    "sqlalchemy.engine.reflection.Inspector.get_materialized_view_names")方法。
- en: See also
  id: totrans-1008
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Inspector.get_materialized_view_names()`](#sqlalchemy.engine.reflection.Inspector.get_materialized_view_names
    "sqlalchemy.engine.reflection.Inspector.get_materialized_view_names")'
  id: totrans-1009
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Inspector.get_materialized_view_names()`](#sqlalchemy.engine.reflection.Inspector.get_materialized_view_names
    "sqlalchemy.engine.reflection.Inspector.get_materialized_view_names")'
- en: '[PRE184]'
  id: totrans-1010
  prefs: []
  type: TYPE_PRE
  zh: '[PRE184]'
- en: Check the existence of a particular index name in the database.
  id: totrans-1011
  prefs: []
  type: TYPE_NORMAL
  zh: 检查数据库中特定索引名称的存在。
- en: 'Parameters:'
  id: totrans-1012
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`table_name` – the name of the table the index belongs to'
  id: totrans-1013
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`table_name` – 索引所属的表的名称。'
- en: '`index_name` – the name of the index to check'
  id: totrans-1014
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index_name` – 要检查的索引的名称。'
- en: '`schema` – schema name to query, if not the default schema.'
  id: totrans-1015
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` – 如果不是默认模式，则要查询的模式名称。'
- en: '`**kw` – Additional keyword argument to pass to the dialect specific implementation.
    See the documentation of the dialect in use for more information.'
  id: totrans-1016
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` – 额外的关键字参数，传递给特定方言实现。有关更多信息，请参阅正在使用的方言的文档。'
- en: New in version 2.0.
  id: totrans-1017
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 2.0 起新增。
- en: '[PRE185]'
  id: totrans-1018
  prefs: []
  type: TYPE_PRE
  zh: '[PRE185]'
- en: Return True if the backend has a schema with the given name.
  id: totrans-1019
  prefs: []
  type: TYPE_NORMAL
  zh: 如果后端具有给定名称的模式，则返回 True。
- en: 'Parameters:'
  id: totrans-1020
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`schema_name` – name of the schema to check'
  id: totrans-1021
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema_name` – 要检查的模式的名称。'
- en: '`**kw` – Additional keyword argument to pass to the dialect specific implementation.
    See the documentation of the dialect in use for more information.'
  id: totrans-1022
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` – 额外的关键字参数，传递给特定方言实现。有关更多信息，请参阅正在使用的方言的文档。'
- en: New in version 2.0.
  id: totrans-1023
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 2.0 起新增。
- en: '[PRE186]'
  id: totrans-1024
  prefs: []
  type: TYPE_PRE
  zh: '[PRE186]'
- en: Return True if the backend has a sequence with the given name.
  id: totrans-1025
  prefs: []
  type: TYPE_NORMAL
  zh: 如果后端具有给定名称的序列，则返回 True。
- en: 'Parameters:'
  id: totrans-1026
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`sequence_name` – name of the sequence to check'
  id: totrans-1027
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sequence_name` – 序列的名称。'
- en: '`schema` – schema name to query, if not the default schema.'
  id: totrans-1028
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` – 如果不是默认模式，则要查询的模式名称。'
- en: '`**kw` – Additional keyword argument to pass to the dialect specific implementation.
    See the documentation of the dialect in use for more information.'
  id: totrans-1029
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` – 额外的关键字参数，传递给特定方言实现。有关更多信息，请参阅正在使用的方言的文档。'
- en: New in version 1.4.
  id: totrans-1030
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.4 起新增。
- en: '[PRE187]'
  id: totrans-1031
  prefs: []
  type: TYPE_PRE
  zh: '[PRE187]'
- en: Return True if the backend has a table, view, or temporary table of the given
    name.
  id: totrans-1032
  prefs: []
  type: TYPE_NORMAL
  zh: 如果后端具有给定名称的表、视图或临时表，则返回 True。
- en: 'Parameters:'
  id: totrans-1033
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`table_name` – name of the table to check'
  id: totrans-1034
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`table_name` – 要检查的表的名称。'
- en: '`schema` – schema name to query, if not the default schema.'
  id: totrans-1035
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` – 如果不是默认模式，则要查询的模式名称。'
- en: '`**kw` – Additional keyword argument to pass to the dialect specific implementation.
    See the documentation of the dialect in use for more information.'
  id: totrans-1036
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` – 额外的关键字参数，传递给特定方言实现。有关更多信息，请参阅正在使用的方言的文档。'
- en: 'New in version 1.4: - the [`Inspector.has_table()`](#sqlalchemy.engine.reflection.Inspector.has_table
    "sqlalchemy.engine.reflection.Inspector.has_table") method replaces the `Engine.has_table()`
    method.'
  id: totrans-1037
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.4 起新增：- [`Inspector.has_table()`](#sqlalchemy.engine.reflection.Inspector.has_table
    "sqlalchemy.engine.reflection.Inspector.has_table") 方法替换了 `Engine.has_table()`
    方法。
- en: 'Changed in version 2.0::: [`Inspector.has_table()`](#sqlalchemy.engine.reflection.Inspector.has_table
    "sqlalchemy.engine.reflection.Inspector.has_table") now formally supports checking
    for additional table-like objects:'
  id: totrans-1038
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 2.0 起更改：[`Inspector.has_table()`](#sqlalchemy.engine.reflection.Inspector.has_table
    "sqlalchemy.engine.reflection.Inspector.has_table") 现在正式支持检查额外的类似表的对象：
- en: any type of views (plain or materialized)
  id: totrans-1039
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何类型的视图（普通或材料化）
- en: temporary tables of any kind
  id: totrans-1040
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何类型的临时表
- en: Previously, these two checks were not formally specified and different dialects
    would vary in their behavior. The dialect testing suite now includes tests for
    all of these object types and should be supported by all SQLAlchemy-included dialects.
    Support among third party dialects may be lagging, however.
  id: totrans-1041
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，这两个检查没有正式指定，不同的方言在行为上会有所不同。方言测试套件现在包括所有这些对象类型的测试，并应该受到所有包含在SQLAlchemy中的方言的支持。然而，第三方方言中的支持可能滞后。
- en: '[PRE188]'
  id: totrans-1042
  prefs: []
  type: TYPE_PRE
  zh: '[PRE188]'
- en: '[PRE189]'
  id: totrans-1043
  prefs: []
  type: TYPE_PRE
  zh: '[PRE189]'
- en: Given a [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object, load its internal constructs based on introspection.
  id: totrans-1044
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象，根据内省加载其内部结构。
- en: 'This is the underlying method used by most dialects to produce table reflection.
    Direct usage is like:'
  id: totrans-1045
  prefs: []
  type: TYPE_NORMAL
  zh: 这是大多数方言用于生成表反射的基础方法。直接使用方式如下：
- en: '[PRE190]'
  id: totrans-1046
  prefs: []
  type: TYPE_PRE
  zh: '[PRE190]'
- en: 'Changed in version 1.4: Renamed from `reflecttable` to `reflect_table`'
  id: totrans-1047
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改：从`reflecttable`改名为`reflect_table`
- en: 'Parameters:'
  id: totrans-1048
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`table` – a [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    instance.'
  id: totrans-1049
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`table` – 一个[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")实例。'
- en: '`include_columns` – a list of string column names to include in the reflection
    process. If `None`, all columns are reflected.'
  id: totrans-1050
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`include_columns` – 一个包含在反射过程中的字符串列名列表。如果为`None`，则反射所有列。'
- en: '[PRE191]'
  id: totrans-1051
  prefs: []
  type: TYPE_PRE
  zh: '[PRE191]'
- en: Return dependency-sorted table and foreign key constraint names referred to
    within multiple schemas.
  id: totrans-1052
  prefs: []
  type: TYPE_NORMAL
  zh: 返回在多个模式中引用的表和外键约束名称的依赖排序。
- en: This method may be compared to [`Inspector.get_sorted_table_and_fkc_names()`](#sqlalchemy.engine.reflection.Inspector.get_sorted_table_and_fkc_names
    "sqlalchemy.engine.reflection.Inspector.get_sorted_table_and_fkc_names"), which
    works on one schema at a time; here, the method is a generalization that will
    consider multiple schemas at once including that it will resolve for cross-schema
    foreign keys.
  id: totrans-1053
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法可以与[`Inspector.get_sorted_table_and_fkc_names()`](#sqlalchemy.engine.reflection.Inspector.get_sorted_table_and_fkc_names
    "sqlalchemy.engine.reflection.Inspector.get_sorted_table_and_fkc_names")进行比较，后者一次只处理一个模式；在这里，该方法是一个通用方法，将同时考虑多个模式，包括解决跨模式外键。
- en: New in version 2.0.
  id: totrans-1054
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0版本中的新功能。
- en: '[PRE192]'
  id: totrans-1055
  prefs: []
  type: TYPE_PRE
  zh: '[PRE192]'
- en: Dictionary representing the reflected elements corresponding to a [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") object.
  id: totrans-1056
  prefs: []
  type: TYPE_NORMAL
  zh: 表示与[`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")对象对应的反射元素的字典。
- en: The [`ReflectedColumn`](#sqlalchemy.engine.interfaces.ReflectedColumn "sqlalchemy.engine.interfaces.ReflectedColumn")
    structure is returned by the `get_columns` method.
  id: totrans-1057
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ReflectedColumn`](#sqlalchemy.engine.interfaces.ReflectedColumn "sqlalchemy.engine.interfaces.ReflectedColumn")结构由`get_columns`方法返回。'
- en: '**Members**'
  id: totrans-1058
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[autoincrement](#sqlalchemy.engine.interfaces.ReflectedColumn.autoincrement),
    [comment](#sqlalchemy.engine.interfaces.ReflectedColumn.comment), [computed](#sqlalchemy.engine.interfaces.ReflectedColumn.computed),
    [default](#sqlalchemy.engine.interfaces.ReflectedColumn.default), [dialect_options](#sqlalchemy.engine.interfaces.ReflectedColumn.dialect_options),
    [identity](#sqlalchemy.engine.interfaces.ReflectedColumn.identity), [name](#sqlalchemy.engine.interfaces.ReflectedColumn.name),
    [nullable](#sqlalchemy.engine.interfaces.ReflectedColumn.nullable), [type](#sqlalchemy.engine.interfaces.ReflectedColumn.type)'
  id: totrans-1059
  prefs: []
  type: TYPE_NORMAL
  zh: '[autoincrement](#sqlalchemy.engine.interfaces.ReflectedColumn.autoincrement),
    [comment](#sqlalchemy.engine.interfaces.ReflectedColumn.comment), [computed](#sqlalchemy.engine.interfaces.ReflectedColumn.computed),
    [default](#sqlalchemy.engine.interfaces.ReflectedColumn.default), [dialect_options](#sqlalchemy.engine.interfaces.ReflectedColumn.dialect_options),
    [identity](#sqlalchemy.engine.interfaces.ReflectedColumn.identity), [name](#sqlalchemy.engine.interfaces.ReflectedColumn.name),
    [nullable](#sqlalchemy.engine.interfaces.ReflectedColumn.nullable), [type](#sqlalchemy.engine.interfaces.ReflectedColumn.type)'
- en: '**Class signature**'
  id: totrans-1060
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.engine.interfaces.ReflectedColumn`](#sqlalchemy.engine.interfaces.ReflectedColumn
    "sqlalchemy.engine.interfaces.ReflectedColumn") (`builtins.dict`)
  id: totrans-1061
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.engine.interfaces.ReflectedColumn`](#sqlalchemy.engine.interfaces.ReflectedColumn
    "sqlalchemy.engine.interfaces.ReflectedColumn") (`builtins.dict`)
- en: '[PRE193]'
  id: totrans-1062
  prefs: []
  type: TYPE_PRE
  zh: '[PRE193]'
- en: database-dependent autoincrement flag.
  id: totrans-1063
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖于数据库的自动增量标志。
- en: This flag indicates if the column has a database-side “autoincrement” flag of
    some kind. Within SQLAlchemy, other kinds of columns may also act as an “autoincrement”
    column without necessarily having such a flag on them.
  id: totrans-1064
  prefs: []
  type: TYPE_NORMAL
  zh: 此标志指示列是否具有某种数据库端的“自动增量”标志。在SQLAlchemy中，其他类型的列也可能充当“自动增量”列，而不一定在其上具有这样的标志。
- en: See [`Column.autoincrement`](metadata.html#sqlalchemy.schema.Column.params.autoincrement
    "sqlalchemy.schema.Column") for more background on “autoincrement”.
  id: totrans-1065
  prefs: []
  type: TYPE_NORMAL
  zh: 有关“自动增量”的更多背景信息，请参见[`Column.autoincrement`](metadata.html#sqlalchemy.schema.Column.params.autoincrement
    "sqlalchemy.schema.Column")。
- en: '[PRE194]'
  id: totrans-1066
  prefs: []
  type: TYPE_PRE
  zh: '[PRE194]'
- en: comment for the column, if present. Only some dialects return this key
  id: totrans-1067
  prefs: []
  type: TYPE_NORMAL
  zh: 如果存在，则为列的注释。只有一些方言返回此键
- en: '[PRE195]'
  id: totrans-1068
  prefs: []
  type: TYPE_PRE
  zh: '[PRE195]'
- en: indicates that this column is computed by the database. Only some dialects return
    this key.
  id: totrans-1069
  prefs: []
  type: TYPE_NORMAL
  zh: 指示此列是由数据库计算的。只有一些方言返回此键。
- en: 'New in version 1.3.16: - added support for computed reflection.'
  id: totrans-1070
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.3.16中的新功能：- 添加了对计算反射的支持。
- en: '[PRE196]'
  id: totrans-1071
  prefs: []
  type: TYPE_PRE
  zh: '[PRE196]'
- en: column default expression as a SQL string
  id: totrans-1072
  prefs: []
  type: TYPE_NORMAL
  zh: 列的默认表达式作为SQL字符串
- en: '[PRE197]'
  id: totrans-1073
  prefs: []
  type: TYPE_PRE
  zh: '[PRE197]'
- en: Additional dialect-specific options detected for this reflected object
  id: totrans-1074
  prefs: []
  type: TYPE_NORMAL
  zh: 检测到的此反射对象的额外方言特定选项
- en: '[PRE198]'
  id: totrans-1075
  prefs: []
  type: TYPE_PRE
  zh: '[PRE198]'
- en: indicates this column is an IDENTITY column. Only some dialects return this
    key.
  id: totrans-1076
  prefs: []
  type: TYPE_NORMAL
  zh: 表示此列是一个IDENTITY列。只有一些方言返回此键。
- en: 'New in version 1.4: - added support for identity column reflection.'
  id: totrans-1077
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4中的新功能：- 添加了对标识列反射的支持。
- en: '[PRE199]'
  id: totrans-1078
  prefs: []
  type: TYPE_PRE
  zh: '[PRE199]'
- en: column name
  id: totrans-1079
  prefs: []
  type: TYPE_NORMAL
  zh: 列名
- en: '[PRE200]'
  id: totrans-1080
  prefs: []
  type: TYPE_PRE
  zh: '[PRE200]'
- en: boolean flag if the column is NULL or NOT NULL
  id: totrans-1081
  prefs: []
  type: TYPE_NORMAL
  zh: 列的布尔标志，如果列是NULL或NOT NULL。
- en: '[PRE201]'
  id: totrans-1082
  prefs: []
  type: TYPE_PRE
  zh: '[PRE201]'
- en: column type represented as a [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") instance.
  id: totrans-1083
  prefs: []
  type: TYPE_NORMAL
  zh: 作为[`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine")实例表示的列类型。
- en: '[PRE202]'
  id: totrans-1084
  prefs: []
  type: TYPE_PRE
  zh: '[PRE202]'
- en: Represent the reflected elements of a computed column, corresponding to the
    [`Computed`](defaults.html#sqlalchemy.schema.Computed "sqlalchemy.schema.Computed")
    construct.
  id: totrans-1085
  prefs: []
  type: TYPE_NORMAL
  zh: 表示计算列的反射元素，对应于[`Computed`](defaults.html#sqlalchemy.schema.Computed "sqlalchemy.schema.Computed")构造。
- en: The [`ReflectedComputed`](#sqlalchemy.engine.interfaces.ReflectedComputed "sqlalchemy.engine.interfaces.ReflectedComputed")
    structure is part of the [`ReflectedColumn`](#sqlalchemy.engine.interfaces.ReflectedColumn
    "sqlalchemy.engine.interfaces.ReflectedColumn") structure, which is returned by
    the [`Inspector.get_columns()`](#sqlalchemy.engine.reflection.Inspector.get_columns
    "sqlalchemy.engine.reflection.Inspector.get_columns") method.
  id: totrans-1086
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ReflectedComputed`](#sqlalchemy.engine.interfaces.ReflectedComputed "sqlalchemy.engine.interfaces.ReflectedComputed")结构是[`ReflectedColumn`](#sqlalchemy.engine.interfaces.ReflectedColumn
    "sqlalchemy.engine.interfaces.ReflectedColumn")结构的一部分，由[`Inspector.get_columns()`](#sqlalchemy.engine.reflection.Inspector.get_columns
    "sqlalchemy.engine.reflection.Inspector.get_columns")方法返回。'
- en: '**Members**'
  id: totrans-1087
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[persisted](#sqlalchemy.engine.interfaces.ReflectedComputed.persisted), [sqltext](#sqlalchemy.engine.interfaces.ReflectedComputed.sqltext)'
  id: totrans-1088
  prefs: []
  type: TYPE_NORMAL
  zh: '[持久化](#sqlalchemy.engine.interfaces.ReflectedComputed.persisted)，[sqltext](#sqlalchemy.engine.interfaces.ReflectedComputed.sqltext)'
- en: '**Class signature**'
  id: totrans-1089
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.engine.interfaces.ReflectedComputed`](#sqlalchemy.engine.interfaces.ReflectedComputed
    "sqlalchemy.engine.interfaces.ReflectedComputed") (`builtins.dict`)
  id: totrans-1090
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.engine.interfaces.ReflectedComputed`](#sqlalchemy.engine.interfaces.ReflectedComputed
    "sqlalchemy.engine.interfaces.ReflectedComputed") (`builtins.dict`)
- en: '[PRE203]'
  id: totrans-1091
  prefs: []
  type: TYPE_PRE
  zh: '[PRE203]'
- en: indicates if the value is stored in the table or computed on demand
  id: totrans-1092
  prefs: []
  type: TYPE_NORMAL
  zh: 指示值是存储在表中还是按需计算的
- en: '[PRE204]'
  id: totrans-1093
  prefs: []
  type: TYPE_PRE
  zh: '[PRE204]'
- en: the expression used to generate this column returned as a string SQL expression
  id: totrans-1094
  prefs: []
  type: TYPE_NORMAL
  zh: 用于生成此列的表达式，以字符串SQL表达式返回
- en: '[PRE205]'
  id: totrans-1095
  prefs: []
  type: TYPE_PRE
  zh: '[PRE205]'
- en: Dictionary representing the reflected elements corresponding to [`CheckConstraint`](constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint").
  id: totrans-1096
  prefs: []
  type: TYPE_NORMAL
  zh: 表示反映与[`CheckConstraint`](constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint")对应的元素的字典。
- en: The [`ReflectedCheckConstraint`](#sqlalchemy.engine.interfaces.ReflectedCheckConstraint
    "sqlalchemy.engine.interfaces.ReflectedCheckConstraint") structure is returned
    by the [`Inspector.get_check_constraints()`](#sqlalchemy.engine.reflection.Inspector.get_check_constraints
    "sqlalchemy.engine.reflection.Inspector.get_check_constraints") method.
  id: totrans-1097
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ReflectedCheckConstraint`](#sqlalchemy.engine.interfaces.ReflectedCheckConstraint
    "sqlalchemy.engine.interfaces.ReflectedCheckConstraint")结构由[`Inspector.get_check_constraints()`](#sqlalchemy.engine.reflection.Inspector.get_check_constraints
    "sqlalchemy.engine.reflection.Inspector.get_check_constraints")方法返回。'
- en: '**Members**'
  id: totrans-1098
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[dialect_options](#sqlalchemy.engine.interfaces.ReflectedCheckConstraint.dialect_options),
    [sqltext](#sqlalchemy.engine.interfaces.ReflectedCheckConstraint.sqltext)'
  id: totrans-1099
  prefs: []
  type: TYPE_NORMAL
  zh: '[方言选项](#sqlalchemy.engine.interfaces.ReflectedCheckConstraint.dialect_options)，[sqltext](#sqlalchemy.engine.interfaces.ReflectedCheckConstraint.sqltext)'
- en: '**Class signature**'
  id: totrans-1100
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.engine.interfaces.ReflectedCheckConstraint`](#sqlalchemy.engine.interfaces.ReflectedCheckConstraint
    "sqlalchemy.engine.interfaces.ReflectedCheckConstraint") (`builtins.dict`)
  id: totrans-1101
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.engine.interfaces.ReflectedCheckConstraint`](#sqlalchemy.engine.interfaces.ReflectedCheckConstraint
    "sqlalchemy.engine.interfaces.ReflectedCheckConstraint") (`builtins.dict`)
- en: '[PRE206]'
  id: totrans-1102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE206]'
- en: Additional dialect-specific options detected for this check constraint
  id: totrans-1103
  prefs: []
  type: TYPE_NORMAL
  zh: 检测到的此检查约束的额外方言特定选项
- en: New in version 1.3.8.
  id: totrans-1104
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.3.8中的新功能。
- en: '[PRE207]'
  id: totrans-1105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE207]'
- en: the check constraint’s SQL expression
  id: totrans-1106
  prefs: []
  type: TYPE_NORMAL
  zh: 检查约束的SQL表达式
- en: '[PRE208]'
  id: totrans-1107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE208]'
- en: Dictionary representing the reflected elements corresponding to [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint").
  id: totrans-1108
  prefs: []
  type: TYPE_NORMAL
  zh: 表示反映的元素的字典，对应于[`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")。
- en: The [`ReflectedForeignKeyConstraint`](#sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint
    "sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint") structure is returned
    by the [`Inspector.get_foreign_keys()`](#sqlalchemy.engine.reflection.Inspector.get_foreign_keys
    "sqlalchemy.engine.reflection.Inspector.get_foreign_keys") method.
  id: totrans-1109
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ReflectedForeignKeyConstraint`](#sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint
    "sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint") 结构由 [`Inspector.get_foreign_keys()`](#sqlalchemy.engine.reflection.Inspector.get_foreign_keys
    "sqlalchemy.engine.reflection.Inspector.get_foreign_keys") 方法返回。'
- en: '**Members**'
  id: totrans-1110
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[constrained_columns](#sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint.constrained_columns),
    [options](#sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint.options),
    [referred_columns](#sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint.referred_columns),
    [referred_schema](#sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint.referred_schema),
    [referred_table](#sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint.referred_table)'
  id: totrans-1111
  prefs: []
  type: TYPE_NORMAL
  zh: '[constrained_columns](#sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint.constrained_columns)，[options](#sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint.options)，[referred_columns](#sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint.referred_columns)，[referred_schema](#sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint.referred_schema)，[referred_table](#sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint.referred_table)'
- en: '**Class signature**'
  id: totrans-1112
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint`](#sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint
    "sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint") (`builtins.dict`)
  id: totrans-1113
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint`](#sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint
    "sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint") (`builtins.dict`)
- en: '[PRE209]'
  id: totrans-1114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE209]'
- en: local column names which comprise the foreign key
  id: totrans-1115
  prefs: []
  type: TYPE_NORMAL
  zh: 组成外键的本地列名
- en: '[PRE210]'
  id: totrans-1116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE210]'
- en: Additional options detected for this foreign key constraint
  id: totrans-1117
  prefs: []
  type: TYPE_NORMAL
  zh: 检测到此外键约束的附加选项
- en: '[PRE211]'
  id: totrans-1118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE211]'
- en: referred column names that correspond to `constrained_columns`
  id: totrans-1119
  prefs: []
  type: TYPE_NORMAL
  zh: 引用的列名对应于`constrained_columns`。
- en: '[PRE212]'
  id: totrans-1120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE212]'
- en: schema name of the table being referred
  id: totrans-1121
  prefs: []
  type: TYPE_NORMAL
  zh: 被引用的表的架构名称
- en: '[PRE213]'
  id: totrans-1122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE213]'
- en: name of the table being referred
  id: totrans-1123
  prefs: []
  type: TYPE_NORMAL
  zh: 被引用的表的名称
- en: '[PRE214]'
  id: totrans-1124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE214]'
- en: represent the reflected IDENTITY structure of a column, corresponding to the
    [`Identity`](defaults.html#sqlalchemy.schema.Identity "sqlalchemy.schema.Identity")
    construct.
  id: totrans-1125
  prefs: []
  type: TYPE_NORMAL
  zh: 表示对应于 [`Identity`](defaults.html#sqlalchemy.schema.Identity "sqlalchemy.schema.Identity")
    构造的反映的 IDENTITY 结构的列。
- en: The [`ReflectedIdentity`](#sqlalchemy.engine.interfaces.ReflectedIdentity "sqlalchemy.engine.interfaces.ReflectedIdentity")
    structure is part of the [`ReflectedColumn`](#sqlalchemy.engine.interfaces.ReflectedColumn
    "sqlalchemy.engine.interfaces.ReflectedColumn") structure, which is returned by
    the [`Inspector.get_columns()`](#sqlalchemy.engine.reflection.Inspector.get_columns
    "sqlalchemy.engine.reflection.Inspector.get_columns") method.
  id: totrans-1126
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ReflectedIdentity`](#sqlalchemy.engine.interfaces.ReflectedIdentity "sqlalchemy.engine.interfaces.ReflectedIdentity")
    结构是 [`ReflectedColumn`](#sqlalchemy.engine.interfaces.ReflectedColumn "sqlalchemy.engine.interfaces.ReflectedColumn")
    结构的一部分，由 [`Inspector.get_columns()`](#sqlalchemy.engine.reflection.Inspector.get_columns
    "sqlalchemy.engine.reflection.Inspector.get_columns") 方法返回。'
- en: '**Members**'
  id: totrans-1127
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[always](#sqlalchemy.engine.interfaces.ReflectedIdentity.always), [cache](#sqlalchemy.engine.interfaces.ReflectedIdentity.cache),
    [cycle](#sqlalchemy.engine.interfaces.ReflectedIdentity.cycle), [increment](#sqlalchemy.engine.interfaces.ReflectedIdentity.increment),
    [maxvalue](#sqlalchemy.engine.interfaces.ReflectedIdentity.maxvalue), [minvalue](#sqlalchemy.engine.interfaces.ReflectedIdentity.minvalue),
    [nomaxvalue](#sqlalchemy.engine.interfaces.ReflectedIdentity.nomaxvalue), [nominvalue](#sqlalchemy.engine.interfaces.ReflectedIdentity.nominvalue),
    [on_null](#sqlalchemy.engine.interfaces.ReflectedIdentity.on_null), [order](#sqlalchemy.engine.interfaces.ReflectedIdentity.order),
    [start](#sqlalchemy.engine.interfaces.ReflectedIdentity.start)'
  id: totrans-1128
  prefs: []
  type: TYPE_NORMAL
  zh: '[always](#sqlalchemy.engine.interfaces.ReflectedIdentity.always)，[cache](#sqlalchemy.engine.interfaces.ReflectedIdentity.cache)，[cycle](#sqlalchemy.engine.interfaces.ReflectedIdentity.cycle)，[increment](#sqlalchemy.engine.interfaces.ReflectedIdentity.increment)，[maxvalue](#sqlalchemy.engine.interfaces.ReflectedIdentity.maxvalue)，[minvalue](#sqlalchemy.engine.interfaces.ReflectedIdentity.minvalue)，[nomaxvalue](#sqlalchemy.engine.interfaces.ReflectedIdentity.nomaxvalue)，[nominvalue](#sqlalchemy.engine.interfaces.ReflectedIdentity.nominvalue)，[on_null](#sqlalchemy.engine.interfaces.ReflectedIdentity.on_null)，[order](#sqlalchemy.engine.interfaces.ReflectedIdentity.order)，[start](#sqlalchemy.engine.interfaces.ReflectedIdentity.start)'
- en: '**Class signature**'
  id: totrans-1129
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.engine.interfaces.ReflectedIdentity`](#sqlalchemy.engine.interfaces.ReflectedIdentity
    "sqlalchemy.engine.interfaces.ReflectedIdentity") (`builtins.dict`)
  id: totrans-1130
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.engine.interfaces.ReflectedIdentity`](#sqlalchemy.engine.interfaces.ReflectedIdentity
    "sqlalchemy.engine.interfaces.ReflectedIdentity")（`builtins.dict`）
- en: '[PRE215]'
  id: totrans-1131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE215]'
- en: type of identity column
  id: totrans-1132
  prefs: []
  type: TYPE_NORMAL
  zh: 标识列的类型
- en: '[PRE216]'
  id: totrans-1133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE216]'
- en: number of future values in the sequence which are calculated in advance.
  id: totrans-1134
  prefs: []
  type: TYPE_NORMAL
  zh: 提前计算的序列中的未来值的数量。
- en: '[PRE217]'
  id: totrans-1135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE217]'
- en: allows the sequence to wrap around when the maxvalue or minvalue has been reached.
  id: totrans-1136
  prefs: []
  type: TYPE_NORMAL
  zh: 允许在达到最大值或最小值时循环。
- en: '[PRE218]'
  id: totrans-1137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE218]'
- en: increment value of the sequence
  id: totrans-1138
  prefs: []
  type: TYPE_NORMAL
  zh: 序列的增量值
- en: '[PRE219]'
  id: totrans-1139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE219]'
- en: the maximum value of the sequence.
  id: totrans-1140
  prefs: []
  type: TYPE_NORMAL
  zh: 序列的最大值。
- en: '[PRE220]'
  id: totrans-1141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE220]'
- en: the minimum value of the sequence.
  id: totrans-1142
  prefs: []
  type: TYPE_NORMAL
  zh: 序列的最小值。
- en: '[PRE221]'
  id: totrans-1143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE221]'
- en: no maximum value of the sequence.
  id: totrans-1144
  prefs: []
  type: TYPE_NORMAL
  zh: 序列的最大值。
- en: '[PRE222]'
  id: totrans-1145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE222]'
- en: no minimum value of the sequence.
  id: totrans-1146
  prefs: []
  type: TYPE_NORMAL
  zh: 序列的最小值。
- en: '[PRE223]'
  id: totrans-1147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE223]'
- en: indicates ON NULL
  id: totrans-1148
  prefs: []
  type: TYPE_NORMAL
  zh: 指示ON NULL
- en: '[PRE224]'
  id: totrans-1149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE224]'
- en: if true, renders the ORDER keyword.
  id: totrans-1150
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为true，则呈现ORDER关键字。
- en: '[PRE225]'
  id: totrans-1151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE225]'
- en: starting index of the sequence
  id: totrans-1152
  prefs: []
  type: TYPE_NORMAL
  zh: 序列的起始索引
- en: '[PRE226]'
  id: totrans-1153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE226]'
- en: Dictionary representing the reflected elements corresponding to [`Index`](constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index").
  id: totrans-1154
  prefs: []
  type: TYPE_NORMAL
  zh: 表示与[`Index`](constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")相对应的反射元素的字典。
- en: The [`ReflectedIndex`](#sqlalchemy.engine.interfaces.ReflectedIndex "sqlalchemy.engine.interfaces.ReflectedIndex")
    structure is returned by the [`Inspector.get_indexes()`](#sqlalchemy.engine.reflection.Inspector.get_indexes
    "sqlalchemy.engine.reflection.Inspector.get_indexes") method.
  id: totrans-1155
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ReflectedIndex`](#sqlalchemy.engine.interfaces.ReflectedIndex "sqlalchemy.engine.interfaces.ReflectedIndex")结构由[`Inspector.get_indexes()`](#sqlalchemy.engine.reflection.Inspector.get_indexes
    "sqlalchemy.engine.reflection.Inspector.get_indexes")方法返回。'
- en: '**Members**'
  id: totrans-1156
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[column_names](#sqlalchemy.engine.interfaces.ReflectedIndex.column_names),
    [column_sorting](#sqlalchemy.engine.interfaces.ReflectedIndex.column_sorting),
    [dialect_options](#sqlalchemy.engine.interfaces.ReflectedIndex.dialect_options),
    [duplicates_constraint](#sqlalchemy.engine.interfaces.ReflectedIndex.duplicates_constraint),
    [expressions](#sqlalchemy.engine.interfaces.ReflectedIndex.expressions), [include_columns](#sqlalchemy.engine.interfaces.ReflectedIndex.include_columns),
    [name](#sqlalchemy.engine.interfaces.ReflectedIndex.name), [unique](#sqlalchemy.engine.interfaces.ReflectedIndex.unique)'
  id: totrans-1157
  prefs: []
  type: TYPE_NORMAL
  zh: '[列名](#sqlalchemy.engine.interfaces.ReflectedIndex.column_names)、[列排序](#sqlalchemy.engine.interfaces.ReflectedIndex.column_sorting)、[方言选项](#sqlalchemy.engine.interfaces.ReflectedIndex.dialect_options)、[重复约束](#sqlalchemy.engine.interfaces.ReflectedIndex.duplicates_constraint)、[表达式](#sqlalchemy.engine.interfaces.ReflectedIndex.expressions)、[包含列](#sqlalchemy.engine.interfaces.ReflectedIndex.include_columns)、[名称](#sqlalchemy.engine.interfaces.ReflectedIndex.name)、[唯一](#sqlalchemy.engine.interfaces.ReflectedIndex.unique)'
- en: '**Class signature**'
  id: totrans-1158
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.engine.interfaces.ReflectedIndex`](#sqlalchemy.engine.interfaces.ReflectedIndex
    "sqlalchemy.engine.interfaces.ReflectedIndex") (`builtins.dict`)
  id: totrans-1159
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.engine.interfaces.ReflectedIndex`](#sqlalchemy.engine.interfaces.ReflectedIndex
    "sqlalchemy.engine.interfaces.ReflectedIndex")（`builtins.dict`）
- en: '[PRE227]'
  id: totrans-1160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE227]'
- en: column names which the index references. An element of this list is `None` if
    it’s an expression and is returned in the `expressions` list.
  id: totrans-1161
  prefs: []
  type: TYPE_NORMAL
  zh: 索引引用的列名。此列表的元素如果是表达式，则为`None`，并在`expressions`列表中返回。
- en: '[PRE228]'
  id: totrans-1162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE228]'
- en: optional dict mapping column names or expressions to tuple of sort keywords,
    which may include `asc`, `desc`, `nulls_first`, `nulls_last`.
  id: totrans-1163
  prefs: []
  type: TYPE_NORMAL
  zh: 可选字典，将列名或表达式映射到排序关键字元组，其中可能包括`asc`、`desc`、`nulls_first`、`nulls_last`。
- en: New in version 1.3.5.
  id: totrans-1164
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本1.3.5中新增。
- en: '[PRE229]'
  id: totrans-1165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE229]'
- en: Additional dialect-specific options detected for this index
  id: totrans-1166
  prefs: []
  type: TYPE_NORMAL
  zh: 此索引的附加特定方言选项
- en: '[PRE230]'
  id: totrans-1167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE230]'
- en: Indicates if this index mirrors a constraint with this name
  id: totrans-1168
  prefs: []
  type: TYPE_NORMAL
  zh: 表示此索引是否镜像了此名称的约束
- en: '[PRE231]'
  id: totrans-1169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE231]'
- en: Expressions that compose the index. This list, when present, contains both plain
    column names (that are also in `column_names`) and expressions (that are `None`
    in `column_names`).
  id: totrans-1170
  prefs: []
  type: TYPE_NORMAL
  zh: 构成索引的表达式。此列表（当存在时）包含普通列名（也在`column_names`中）和表达式（在`column_names`中为`None`）。
- en: '[PRE232]'
  id: totrans-1171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE232]'
- en: columns to include in the INCLUDE clause for supporting databases.
  id: totrans-1172
  prefs: []
  type: TYPE_NORMAL
  zh: 包含在支持数据库的INCLUDE子句中的列。
- en: 'Deprecated since version 2.0: Legacy value, will be replaced with `index_dict["dialect_options"]["<dialect
    name>_include"]`'
  id: totrans-1173
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本2.0开始弃用：遗留值，将被`index_dict["dialect_options"]["<dialect name>_include"]`替换。
- en: '[PRE233]'
  id: totrans-1174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE233]'
- en: index name
  id: totrans-1175
  prefs: []
  type: TYPE_NORMAL
  zh: 索引名称
- en: '[PRE234]'
  id: totrans-1176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE234]'
- en: whether or not the index has a unique flag
  id: totrans-1177
  prefs: []
  type: TYPE_NORMAL
  zh: 索引是否具有唯一标志
- en: '[PRE235]'
  id: totrans-1178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE235]'
- en: Dictionary representing the reflected elements corresponding to [`PrimaryKeyConstraint`](constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint").
  id: totrans-1179
  prefs: []
  type: TYPE_NORMAL
  zh: 表示与[`PrimaryKeyConstraint`](constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint")相对应的反射元素的字典。
- en: The [`ReflectedPrimaryKeyConstraint`](#sqlalchemy.engine.interfaces.ReflectedPrimaryKeyConstraint
    "sqlalchemy.engine.interfaces.ReflectedPrimaryKeyConstraint") structure is returned
    by the [`Inspector.get_pk_constraint()`](#sqlalchemy.engine.reflection.Inspector.get_pk_constraint
    "sqlalchemy.engine.reflection.Inspector.get_pk_constraint") method.
  id: totrans-1180
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ReflectedPrimaryKeyConstraint`](#sqlalchemy.engine.interfaces.ReflectedPrimaryKeyConstraint
    "sqlalchemy.engine.interfaces.ReflectedPrimaryKeyConstraint") 结构由 [`Inspector.get_pk_constraint()`](#sqlalchemy.engine.reflection.Inspector.get_pk_constraint
    "sqlalchemy.engine.reflection.Inspector.get_pk_constraint") 方法返回。'
- en: '**Members**'
  id: totrans-1181
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[constrained_columns](#sqlalchemy.engine.interfaces.ReflectedPrimaryKeyConstraint.constrained_columns),
    [dialect_options](#sqlalchemy.engine.interfaces.ReflectedPrimaryKeyConstraint.dialect_options)'
  id: totrans-1182
  prefs: []
  type: TYPE_NORMAL
  zh: '[constrained_columns](#sqlalchemy.engine.interfaces.ReflectedPrimaryKeyConstraint.constrained_columns),
    [dialect_options](#sqlalchemy.engine.interfaces.ReflectedPrimaryKeyConstraint.dialect_options)'
- en: '**Class signature**'
  id: totrans-1183
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.engine.interfaces.ReflectedPrimaryKeyConstraint`](#sqlalchemy.engine.interfaces.ReflectedPrimaryKeyConstraint
    "sqlalchemy.engine.interfaces.ReflectedPrimaryKeyConstraint") (`builtins.dict`)
  id: totrans-1184
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.engine.interfaces.ReflectedPrimaryKeyConstraint`](#sqlalchemy.engine.interfaces.ReflectedPrimaryKeyConstraint
    "sqlalchemy.engine.interfaces.ReflectedPrimaryKeyConstraint") (`builtins.dict`)
- en: '[PRE236]'
  id: totrans-1185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE236]'
- en: column names which comprise the primary key
  id: totrans-1186
  prefs: []
  type: TYPE_NORMAL
  zh: 组成主键的列名
- en: '[PRE237]'
  id: totrans-1187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE237]'
- en: Additional dialect-specific options detected for this primary key
  id: totrans-1188
  prefs: []
  type: TYPE_NORMAL
  zh: 检测到的此主键的附加特定方言选项
- en: '[PRE238]'
  id: totrans-1189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE238]'
- en: Dictionary representing the reflected elements corresponding to [`UniqueConstraint`](constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint").
  id: totrans-1190
  prefs: []
  type: TYPE_NORMAL
  zh: 字典表示对应于 [`UniqueConstraint`](constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") 的反射元素。
- en: The [`ReflectedUniqueConstraint`](#sqlalchemy.engine.interfaces.ReflectedUniqueConstraint
    "sqlalchemy.engine.interfaces.ReflectedUniqueConstraint") structure is returned
    by the [`Inspector.get_unique_constraints()`](#sqlalchemy.engine.reflection.Inspector.get_unique_constraints
    "sqlalchemy.engine.reflection.Inspector.get_unique_constraints") method.
  id: totrans-1191
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ReflectedUniqueConstraint`](#sqlalchemy.engine.interfaces.ReflectedUniqueConstraint
    "sqlalchemy.engine.interfaces.ReflectedUniqueConstraint") 结构由 [`Inspector.get_unique_constraints()`](#sqlalchemy.engine.reflection.Inspector.get_unique_constraints
    "sqlalchemy.engine.reflection.Inspector.get_unique_constraints") 方法返回。'
- en: '**Members**'
  id: totrans-1192
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[column_names](#sqlalchemy.engine.interfaces.ReflectedUniqueConstraint.column_names),
    [dialect_options](#sqlalchemy.engine.interfaces.ReflectedUniqueConstraint.dialect_options),
    [duplicates_index](#sqlalchemy.engine.interfaces.ReflectedUniqueConstraint.duplicates_index)'
  id: totrans-1193
  prefs: []
  type: TYPE_NORMAL
  zh: '[column_names](#sqlalchemy.engine.interfaces.ReflectedUniqueConstraint.column_names),
    [dialect_options](#sqlalchemy.engine.interfaces.ReflectedUniqueConstraint.dialect_options),
    [duplicates_index](#sqlalchemy.engine.interfaces.ReflectedUniqueConstraint.duplicates_index)'
- en: '**Class signature**'
  id: totrans-1194
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.engine.interfaces.ReflectedUniqueConstraint`](#sqlalchemy.engine.interfaces.ReflectedUniqueConstraint
    "sqlalchemy.engine.interfaces.ReflectedUniqueConstraint") (`builtins.dict`)
  id: totrans-1195
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.engine.interfaces.ReflectedUniqueConstraint`](#sqlalchemy.engine.interfaces.ReflectedUniqueConstraint
    "sqlalchemy.engine.interfaces.ReflectedUniqueConstraint") (`builtins.dict`)
- en: '[PRE239]'
  id: totrans-1196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE239]'
- en: column names which comprise the unique constraint
  id: totrans-1197
  prefs: []
  type: TYPE_NORMAL
  zh: 组成唯一约束的列名
- en: '[PRE240]'
  id: totrans-1198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE240]'
- en: Additional dialect-specific options detected for this unique constraint
  id: totrans-1199
  prefs: []
  type: TYPE_NORMAL
  zh: 检测到的此唯一约束的附加特定方言选项
- en: '[PRE241]'
  id: totrans-1200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE241]'
- en: Indicates if this unique constraint duplicates an index with this name
  id: totrans-1201
  prefs: []
  type: TYPE_NORMAL
  zh: 指示此唯一约束是否重复使用此名称的索引
- en: '[PRE242]'
  id: totrans-1202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE242]'
- en: Dictionary representing the reflected comment corresponding to the `Table.comment`
    attribute.
  id: totrans-1203
  prefs: []
  type: TYPE_NORMAL
  zh: 字典表示对应于 `Table.comment` 属性的反射注释。
- en: The [`ReflectedTableComment`](#sqlalchemy.engine.interfaces.ReflectedTableComment
    "sqlalchemy.engine.interfaces.ReflectedTableComment") structure is returned by
    the [`Inspector.get_table_comment()`](#sqlalchemy.engine.reflection.Inspector.get_table_comment
    "sqlalchemy.engine.reflection.Inspector.get_table_comment") method.
  id: totrans-1204
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ReflectedTableComment`](#sqlalchemy.engine.interfaces.ReflectedTableComment
    "sqlalchemy.engine.interfaces.ReflectedTableComment") 结构由 [`Inspector.get_table_comment()`](#sqlalchemy.engine.reflection.Inspector.get_table_comment
    "sqlalchemy.engine.reflection.Inspector.get_table_comment") 方法返回。'
- en: '**Members**'
  id: totrans-1205
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[text](#sqlalchemy.engine.interfaces.ReflectedTableComment.text)'
  id: totrans-1206
  prefs: []
  type: TYPE_NORMAL
  zh: '[text](#sqlalchemy.engine.interfaces.ReflectedTableComment.text)'
- en: '**Class signature**'
  id: totrans-1207
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.engine.interfaces.ReflectedTableComment`](#sqlalchemy.engine.interfaces.ReflectedTableComment
    "sqlalchemy.engine.interfaces.ReflectedTableComment") (`builtins.dict`)
  id: totrans-1208
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.engine.interfaces.ReflectedTableComment`](#sqlalchemy.engine.interfaces.ReflectedTableComment
    "sqlalchemy.engine.interfaces.ReflectedTableComment") (`builtins.dict`)
- en: '[PRE243]'
  id: totrans-1209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE243]'
- en: text of the comment
  id: totrans-1210
  prefs: []
  type: TYPE_NORMAL
  zh: 注释文本
- en: '## Reflecting with Database-Agnostic Types'
  id: totrans-1211
  prefs: []
  type: TYPE_NORMAL
  zh: '## 使用数据库通用类型反射'
- en: When the columns of a table are reflected, using either the [`Table.autoload_with`](metadata.html#sqlalchemy.schema.Table.params.autoload_with
    "sqlalchemy.schema.Table") parameter of [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") or the [`Inspector.get_columns()`](#sqlalchemy.engine.reflection.Inspector.get_columns
    "sqlalchemy.engine.reflection.Inspector.get_columns") method of [`Inspector`](#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector"), the datatypes will be as specific as
    possible to the target database. This means that if an “integer” datatype is reflected
    from a MySQL database, the type will be represented by the [`sqlalchemy.dialects.mysql.INTEGER`](../dialects/mysql.html#sqlalchemy.dialects.mysql.INTEGER
    "sqlalchemy.dialects.mysql.INTEGER") class, which includes MySQL-specific attributes
    such as “display_width”. Or on PostgreSQL, a PostgreSQL-specific datatype such
    as [`sqlalchemy.dialects.postgresql.INTERVAL`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.INTERVAL
    "sqlalchemy.dialects.postgresql.INTERVAL") or [`sqlalchemy.dialects.postgresql.ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM") may be returned.
  id: totrans-1212
  prefs: []
  type: TYPE_NORMAL
  zh: 当反射表的列时，无论是使用[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")的[`Table.autoload_with`](metadata.html#sqlalchemy.schema.Table.params.autoload_with
    "sqlalchemy.schema.Table.params.autoload_with")参数，还是使用[`Inspector`](#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector")的[`Inspector.get_columns()`](#sqlalchemy.engine.reflection.Inspector.get_columns
    "sqlalchemy.engine.reflection.Inspector.get_columns")方法，数据类型都将尽可能地特定于目标数据库。这意味着，如果从MySQL数据库中反射出一个“整数”数据类型，该类型将由[`sqlalchemy.dialects.mysql.INTEGER`](../dialects/mysql.html#sqlalchemy.dialects.mysql.INTEGER
    "sqlalchemy.dialects.mysql.INTEGER")类表示，其中包括MySQL特定的属性，如“display_width”。或者在PostgreSQL上，可能会返回PostgreSQL特定的数据类型，如[`sqlalchemy.dialects.postgresql.INTERVAL`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.INTERVAL
    "sqlalchemy.dialects.postgresql.INTERVAL")或[`sqlalchemy.dialects.postgresql.ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM")。
- en: There is a use case for reflection which is that a given [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") is to be transferred to a different vendor database.
    To suit this use case, there is a technique by which these vendor-specific datatypes
    can be converted on the fly to be instance of SQLAlchemy backend-agnostic datatypes,
    for the examples above types such as [`Integer`](type_basics.html#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer"), [`Interval`](type_basics.html#sqlalchemy.types.Interval
    "sqlalchemy.types.Interval") and [`Enum`](type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum"). This may be achieved by intercepting the column reflection
    using the [`DDLEvents.column_reflect()`](events.html#sqlalchemy.events.DDLEvents.column_reflect
    "sqlalchemy.events.DDLEvents.column_reflect") event in conjunction with the [`TypeEngine.as_generic()`](type_api.html#sqlalchemy.types.TypeEngine.as_generic
    "sqlalchemy.types.TypeEngine.as_generic") method.
  id: totrans-1213
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个反射的用例，即给定一个[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")要转移到另一个供应商数据库。为了适应这个用例，有一种技术，可以将这些供应商特定的数据类型即时转换为SQLAlchemy后端不可知的数据类型，例如上面的示例中的[`Integer`](type_basics.html#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer")、[`Interval`](type_basics.html#sqlalchemy.types.Interval
    "sqlalchemy.types.Interval")和[`Enum`](type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")。这可以通过拦截列反射并结合[`DDLEvents.column_reflect()`](events.html#sqlalchemy.events.DDLEvents.column_reflect
    "sqlalchemy.events.DDLEvents.column_reflect")事件和[`TypeEngine.as_generic()`](type_api.html#sqlalchemy.types.TypeEngine.as_generic
    "sqlalchemy.types.TypeEngine.as_generic")方法来实现。
- en: 'Given a table in MySQL (chosen because MySQL has a lot of vendor-specific datatypes
    and options):'
  id: totrans-1214
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个MySQL表（选择MySQL是因为MySQL具有许多供应商特定的数据类型和选项）：
- en: '[PRE244]'
  id: totrans-1215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE244]'
- en: 'The above table includes MySQL-only integer types `MEDIUMINT` and `TINYINT`
    as well as a `VARCHAR` that includes the MySQL-only `CHARACTER SET` option. If
    we reflect this table normally, it produces a [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object that will contain those MySQL-specific datatypes
    and options:'
  id: totrans-1216
  prefs: []
  type: TYPE_NORMAL
  zh: 上述表包括MySQL专用的整数类型`MEDIUMINT`和`TINYINT`，以及一个包含MySQL专用`CHARACTER SET`选项的`VARCHAR`。如果我们正常地反映这个表，它将产生一个包含这些MySQL特定数据类型和选项的[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象：
- en: '[PRE245]'
  id: totrans-1217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE245]'
- en: 'The above example reflects the above table schema into a new [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object. We can then, for demonstration purposes, print
    out the MySQL-specific “CREATE TABLE” statement using the [`CreateTable`](ddl.html#sqlalchemy.schema.CreateTable
    "sqlalchemy.schema.CreateTable") construct:'
  id: totrans-1218
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的示例将上述表模式反映到一个新的 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    对象中。然后，为了演示目的，我们可以使用 [`CreateTable`](ddl.html#sqlalchemy.schema.CreateTable "sqlalchemy.schema.CreateTable")
    构造打印出特定于 MySQL 的“CREATE TABLE”语句：
- en: '[PRE246]'
  id: totrans-1219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE246]'
- en: 'Above, the MySQL-specific datatypes and options were maintained. If we wanted
    a [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table") that
    we could instead transfer cleanly to another database vendor, replacing the special
    datatypes [`sqlalchemy.dialects.mysql.MEDIUMINT`](../dialects/mysql.html#sqlalchemy.dialects.mysql.MEDIUMINT
    "sqlalchemy.dialects.mysql.MEDIUMINT") and [`sqlalchemy.dialects.mysql.TINYINT`](../dialects/mysql.html#sqlalchemy.dialects.mysql.TINYINT
    "sqlalchemy.dialects.mysql.TINYINT") with [`Integer`](type_basics.html#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer"), we can choose instead to “genericize” the datatypes
    on this table, or otherwise change them in any way we’d like, by establishing
    a handler using the [`DDLEvents.column_reflect()`](events.html#sqlalchemy.events.DDLEvents.column_reflect
    "sqlalchemy.events.DDLEvents.column_reflect") event. The custom handler will make
    use of the [`TypeEngine.as_generic()`](type_api.html#sqlalchemy.types.TypeEngine.as_generic
    "sqlalchemy.types.TypeEngine.as_generic") method to convert the above MySQL-specific
    type objects into generic ones, by replacing the `"type"` entry within the column
    dictionary entry that is passed to the event handler. The format of this dictionary
    is described at [`Inspector.get_columns()`](#sqlalchemy.engine.reflection.Inspector.get_columns
    "sqlalchemy.engine.reflection.Inspector.get_columns"):'
  id: totrans-1220
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，保留了特定于 MySQL 的数据类型和选项。如果我们想要一个可以干净地转移到另一个数据库供应商的 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")，并用 [`sqlalchemy.dialects.mysql.MEDIUMINT`](../dialects/mysql.html#sqlalchemy.dialects.mysql.MEDIUMINT
    "sqlalchemy.dialects.mysql.MEDIUMINT") 和 [`sqlalchemy.dialects.mysql.TINYINT`](../dialects/mysql.html#sqlalchemy.dialects.mysql.TINYINT
    "sqlalchemy.dialects.mysql.TINYINT") 替换特殊数据类型，则可以选择在此表上“泛型化”数据类型，或以任何我们喜欢的方式更改它们，方法是使用
    [`DDLEvents.column_reflect()`](events.html#sqlalchemy.events.DDLEvents.column_reflect
    "sqlalchemy.events.DDLEvents.column_reflect") 事件建立一个处理程序。自定义处理程序将使用 [`TypeEngine.as_generic()`](type_api.html#sqlalchemy.types.TypeEngine.as_generic
    "sqlalchemy.types.TypeEngine.as_generic") 方法，通过替换传递给事件处理程序的列字典条目中的 `"type"` 条目来将上述特定于
    MySQL 的类型对象转换为通用类型。此字典的格式在 [`Inspector.get_columns()`](#sqlalchemy.engine.reflection.Inspector.get_columns
    "sqlalchemy.engine.reflection.Inspector.get_columns") 中描述：
- en: '[PRE247]'
  id: totrans-1221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE247]'
- en: 'We now get a new [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    that is generic and uses [`Integer`](type_basics.html#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer") for those datatypes. We can now emit a “CREATE TABLE”
    statement for example on a PostgreSQL database:'
  id: totrans-1222
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们得到了一个新的泛型 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    并且使用 [`Integer`](type_basics.html#sqlalchemy.types.Integer "sqlalchemy.types.Integer")
    作为这些数据类型。例如，我们现在可以在 PostgreSQL 数据库上发出“CREATE TABLE”语句：
- en: '[PRE248]'
  id: totrans-1223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE248]'
- en: Noting above also that SQLAlchemy will usually make a decent guess for other
    behaviors, such as that the MySQL `AUTO_INCREMENT` directive is represented in
    PostgreSQL most closely using the `SERIAL` auto-incrementing datatype.
  id: totrans-1224
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意，SQLAlchemy 通常会对其他行为做出合理的猜测，例如，MySQL 的 `AUTO_INCREMENT` 指令在 PostgreSQL 中最接近地表示为
    `SERIAL` 自动增量数据类型。
- en: 'New in version 1.4: Added the [`TypeEngine.as_generic()`](type_api.html#sqlalchemy.types.TypeEngine.as_generic
    "sqlalchemy.types.TypeEngine.as_generic") method and additionally improved the
    use of the [`DDLEvents.column_reflect()`](events.html#sqlalchemy.events.DDLEvents.column_reflect
    "sqlalchemy.events.DDLEvents.column_reflect") event such that it may be applied
    to a [`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    object for convenience.'
  id: totrans-1225
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4 版本新增了 [`TypeEngine.as_generic()`](type_api.html#sqlalchemy.types.TypeEngine.as_generic
    "sqlalchemy.types.TypeEngine.as_generic") 方法，并进一步改进了 [`DDLEvents.column_reflect()`](events.html#sqlalchemy.events.DDLEvents.column_reflect
    "sqlalchemy.events.DDLEvents.column_reflect") 事件的使用，以便可以方便地将其应用于 [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") 对象。
- en: Limitations of Reflection
  id: totrans-1226
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 反射的局限性
- en: 'It’s important to note that the reflection process recreates [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") metadata using only information which is represented
    in the relational database. This process by definition cannot restore aspects
    of a schema that aren’t actually stored in the database. State which is not available
    from reflection includes but is not limited to:'
  id: totrans-1227
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，反射过程仅使用在关系数据库中表示的信息重建[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")元数据。按照定义，此过程无法恢复数据库中实际未存储的模式的方面。无法从反射中获得的状态包括但不限于：
- en: Client side defaults, either Python functions or SQL expressions defined using
    the `default` keyword of [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    (note this is separate from `server_default`, which specifically is what’s available
    via reflection).
  id: totrans-1228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端默认值，可以是使用[`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")的`default`关键字定义的Python函数或SQL表达式（注意，这与`server_default`是分开的，后者是通过反射获得的）。
- en: Column information, e.g. data that might have been placed into the [`Column.info`](metadata.html#sqlalchemy.schema.Column.info
    "sqlalchemy.schema.Column.info") dictionary
  id: totrans-1229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列信息，例如可能已放置在[`Column.info`](metadata.html#sqlalchemy.schema.Column.info "sqlalchemy.schema.Column.info")字典中的数据。
- en: The value of the `.quote` setting for [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") or [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")
  id: totrans-1230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于[`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")或[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")的`.quote`设置的值。
- en: The association of a particular [`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") with a given [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")
  id: totrans-1231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将特定的[`Sequence`](defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")与给定的[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")相关联。
- en: The relational database also in many cases reports on table metadata in a different
    format than what was specified in SQLAlchemy. The [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects returned from reflection cannot be always relied
    upon to produce the identical DDL as the original Python-defined [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects. Areas where this occurs includes server defaults,
    column-associated sequences and various idiosyncrasies regarding constraints and
    datatypes. Server side defaults may be returned with cast directives (typically
    PostgreSQL will include a `::<type>` cast) or different quoting patterns than
    originally specified.
  id: totrans-1232
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，关系数据库报告的表元数据格式与SQLAlchemy中指定的格式不同。从反射返回的[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象不能始终依赖于产生与原始Python定义的[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象相同的DDL。发生这种情况的领域包括服务器默认值、与列相关联的序列以及关于约束和数据类型的各种特殊情况。服务器端默认值可能会以转换指令返回（通常情况下，PostgreSQL会包含一个`::<type>`转换）或与最初指定的不同的引用模式。
- en: Another category of limitation includes schema structures for which reflection
    is only partially or not yet defined. Recent improvements to reflection allow
    things like views, indexes and foreign key options to be reflected. As of this
    writing, structures like CHECK constraints, table comments, and triggers are not
    reflected.
  id: totrans-1233
  prefs: []
  type: TYPE_NORMAL
  zh: 另一类限制包括仅部分或尚未定义反射的模式结构。最近对反射进行的改进允许反射诸如视图、索引和外键选项之类的内容。截至撰写本文时，像检查约束、表注释和触发器之类的结构并未反射。
