- en: Base Type API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sqlalchemy.org/en/20/core/type_api.html](https://docs.sqlalchemy.org/en/20/core/type_api.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [Concatenable](#sqlalchemy.types.Concatenable) | A mixin that marks a type
    as supporting ‘concatenation’, typically strings. |'
  prefs: []
  type: TYPE_TB
- en: '| [ExternalType](#sqlalchemy.types.ExternalType) | mixin that defines attributes
    and behaviors specific to third-party datatypes. |'
  prefs: []
  type: TYPE_TB
- en: '| [Indexable](#sqlalchemy.types.Indexable) | A mixin that marks a type as supporting
    indexing operations, such as array or JSON structures. |'
  prefs: []
  type: TYPE_TB
- en: '| [NullType](#sqlalchemy.types.NullType) | An unknown type. |'
  prefs: []
  type: TYPE_TB
- en: '| [TypeEngine](#sqlalchemy.types.TypeEngine) | The ultimate base class for
    all SQL datatypes. |'
  prefs: []
  type: TYPE_TB
- en: '| [Variant](#sqlalchemy.types.Variant) | deprecated. symbol is present for
    backwards-compatibility with workaround recipes, however this actual type should
    not be used. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The ultimate base class for all SQL datatypes.
  prefs: []
  type: TYPE_NORMAL
- en: Common subclasses of [`TypeEngine`](#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine")
    include [`String`](type_basics.html#sqlalchemy.types.String "sqlalchemy.types.String"),
    [`Integer`](type_basics.html#sqlalchemy.types.Integer "sqlalchemy.types.Integer"),
    and [`Boolean`](type_basics.html#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean").
  prefs: []
  type: TYPE_NORMAL
- en: For an overview of the SQLAlchemy typing system, see [SQL Datatype Objects](types.html).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[SQL Datatype Objects](types.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[operate()](#sqlalchemy.types.TypeEngine.Comparator.operate), [reverse_operate()](#sqlalchemy.types.TypeEngine.Comparator.reverse_operate),
    [adapt()](#sqlalchemy.types.TypeEngine.adapt), [as_generic()](#sqlalchemy.types.TypeEngine.as_generic),
    [bind_expression()](#sqlalchemy.types.TypeEngine.bind_expression), [bind_processor()](#sqlalchemy.types.TypeEngine.bind_processor),
    [coerce_compared_value()](#sqlalchemy.types.TypeEngine.coerce_compared_value),
    [column_expression()](#sqlalchemy.types.TypeEngine.column_expression), [comparator_factory](#sqlalchemy.types.TypeEngine.comparator_factory),
    [compare_values()](#sqlalchemy.types.TypeEngine.compare_values), [compile()](#sqlalchemy.types.TypeEngine.compile),
    [dialect_impl()](#sqlalchemy.types.TypeEngine.dialect_impl), [evaluates_none()](#sqlalchemy.types.TypeEngine.evaluates_none),
    [get_dbapi_type()](#sqlalchemy.types.TypeEngine.get_dbapi_type), [hashable](#sqlalchemy.types.TypeEngine.hashable),
    [literal_processor()](#sqlalchemy.types.TypeEngine.literal_processor), [python_type](#sqlalchemy.types.TypeEngine.python_type),
    [render_bind_cast](#sqlalchemy.types.TypeEngine.render_bind_cast), [render_literal_cast](#sqlalchemy.types.TypeEngine.render_literal_cast),
    [result_processor()](#sqlalchemy.types.TypeEngine.result_processor), [should_evaluate_none](#sqlalchemy.types.TypeEngine.should_evaluate_none),
    [sort_key_function](#sqlalchemy.types.TypeEngine.sort_key_function), [with_variant()](#sqlalchemy.types.TypeEngine.with_variant)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.types.TypeEngine`](#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine")
    ([`sqlalchemy.sql.visitors.Visitable`](visitors.html#sqlalchemy.sql.visitors.Visitable
    "sqlalchemy.sql.visitors.Visitable"), `typing.Generic`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Base class for custom comparison operations defined at the type level. See [`TypeEngine.comparator_factory`](#sqlalchemy.types.TypeEngine.comparator_factory
    "sqlalchemy.types.TypeEngine.comparator_factory").
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.types.TypeEngine.Comparator`](#sqlalchemy.types.TypeEngine.Comparator
    "sqlalchemy.types.TypeEngine.Comparator") ([`sqlalchemy.sql.expression.ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators"), `typing.Generic`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Operate on an argument.
  prefs: []
  type: TYPE_NORMAL
- en: This is the lowest level of operation, raises `NotImplementedError` by default.
  prefs: []
  type: TYPE_NORMAL
- en: 'Overriding this on a subclass can allow common behavior to be applied to all
    operations. For example, overriding [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") to apply `func.lower()` to the left
    and right side:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`op` – Operator callable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`*other` – the ‘other’ side of the operation. Will be a single scalar for most
    operations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**kwargs` – modifiers. These may be passed by special operators such as `ColumnOperators.contains()`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Reverse operate on an argument.
  prefs: []
  type: TYPE_NORMAL
- en: Usage is the same as [`operate()`](#sqlalchemy.types.TypeEngine.Comparator.operate
    "sqlalchemy.types.TypeEngine.Comparator.operate").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Produce an “adapted” form of this type, given an “impl” class to work with.
  prefs: []
  type: TYPE_NORMAL
- en: This method is used internally to associate generic types with “implementation”
    types that are specific to a particular dialect.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Return an instance of the generic type corresponding to this type using heuristic
    rule. The method may be overridden if this heuristic rule is not sufficient.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.4.0b2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Reflecting with Database-Agnostic Types](reflection.html#metadata-reflection-dbagnostic-types)
    - describes the use of [`TypeEngine.as_generic()`](#sqlalchemy.types.TypeEngine.as_generic
    "sqlalchemy.types.TypeEngine.as_generic") in conjunction with the `DDLEvents.column_reflect()`
    event, which is its intended use.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Given a bind value (i.e. a [`BindParameter`](sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") instance), return a SQL expression
    in its place.
  prefs: []
  type: TYPE_NORMAL
- en: This is typically a SQL function that wraps the existing bound parameter within
    the statement. It is used for special data types that require literals being wrapped
    in some special database function in order to coerce an application-level value
    into a database-specific format. It is the SQL analogue of the [`TypeEngine.bind_processor()`](#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor") method.
  prefs: []
  type: TYPE_NORMAL
- en: This method is called during the **SQL compilation** phase of a statement, when
    rendering a SQL string. It is **not** called against specific values.
  prefs: []
  type: TYPE_NORMAL
- en: Note that this method, when implemented, should always return the exact same
    structure, without any conditional logic, as it may be used in an executemany()
    call against an arbitrary number of bound parameter sets.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This method is only called relative to a **dialect specific type object**, which
    is often **private to a dialect in use** and is not the same type object as the
    public facing one, which means it’s not feasible to subclass a [`TypeEngine`](#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class in order to provide an alternate [`TypeEngine.bind_expression()`](#sqlalchemy.types.TypeEngine.bind_expression
    "sqlalchemy.types.TypeEngine.bind_expression") method, unless subclassing the
    [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType "sqlalchemy.types.UserDefinedType")
    class explicitly.
  prefs: []
  type: TYPE_NORMAL
- en: To provide alternate behavior for [`TypeEngine.bind_expression()`](#sqlalchemy.types.TypeEngine.bind_expression
    "sqlalchemy.types.TypeEngine.bind_expression"), implement a [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") class and provide an implementation of [`TypeDecorator.bind_expression()`](custom_types.html#sqlalchemy.types.TypeDecorator.bind_expression
    "sqlalchemy.types.TypeDecorator.bind_expression").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Augmenting Existing Types](custom_types.html#types-typedecorator)'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Applying SQL-level Bind/Result Processing](custom_types.html#types-sql-value-processing)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Return a conversion function for processing bind values.
  prefs: []
  type: TYPE_NORMAL
- en: Returns a callable which will receive a bind parameter value as the sole positional
    argument and will return a value to send to the DB-API.
  prefs: []
  type: TYPE_NORMAL
- en: If processing is not necessary, the method should return `None`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This method is only called relative to a **dialect specific type object**, which
    is often **private to a dialect in use** and is not the same type object as the
    public facing one, which means it’s not feasible to subclass a [`TypeEngine`](#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class in order to provide an alternate [`TypeEngine.bind_processor()`](#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor") method, unless subclassing the [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType") class explicitly.
  prefs: []
  type: TYPE_NORMAL
- en: To provide alternate behavior for [`TypeEngine.bind_processor()`](#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor"), implement a [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") class and provide an implementation of [`TypeDecorator.process_bind_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_bind_param
    "sqlalchemy.types.TypeDecorator.process_bind_param").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Augmenting Existing Types](custom_types.html#types-typedecorator)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**dialect** – Dialect instance in use.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Suggest a type for a ‘coerced’ Python value in an expression.
  prefs: []
  type: TYPE_NORMAL
- en: Given an operator and value, gives the type a chance to return a type which
    the value should be coerced into.
  prefs: []
  type: TYPE_NORMAL
- en: The default behavior here is conservative; if the right-hand side is already
    coerced into a SQL type based on its Python type, it is usually left alone.
  prefs: []
  type: TYPE_NORMAL
- en: End-user functionality extension here should generally be via [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator"), which provides more liberal behavior in that
    it defaults to coercing the other side of the expression into this type, thus
    applying special Python conversions above and beyond those needed by the DBAPI
    to both ides. It also provides the public method [`TypeDecorator.coerce_compared_value()`](custom_types.html#sqlalchemy.types.TypeDecorator.coerce_compared_value
    "sqlalchemy.types.TypeDecorator.coerce_compared_value") which is intended for
    end-user customization of this behavior.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Given a SELECT column expression, return a wrapping SQL expression.
  prefs: []
  type: TYPE_NORMAL
- en: This is typically a SQL function that wraps a column expression as rendered
    in the columns clause of a SELECT statement. It is used for special data types
    that require columns to be wrapped in some special database function in order
    to coerce the value before being sent back to the application. It is the SQL analogue
    of the [`TypeEngine.result_processor()`](#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor") method.
  prefs: []
  type: TYPE_NORMAL
- en: This method is called during the **SQL compilation** phase of a statement, when
    rendering a SQL string. It is **not** called against specific values.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This method is only called relative to a **dialect specific type object**, which
    is often **private to a dialect in use** and is not the same type object as the
    public facing one, which means it’s not feasible to subclass a [`TypeEngine`](#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class in order to provide an alternate [`TypeEngine.column_expression()`](#sqlalchemy.types.TypeEngine.column_expression
    "sqlalchemy.types.TypeEngine.column_expression") method, unless subclassing the
    [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType "sqlalchemy.types.UserDefinedType")
    class explicitly.
  prefs: []
  type: TYPE_NORMAL
- en: To provide alternate behavior for [`TypeEngine.column_expression()`](#sqlalchemy.types.TypeEngine.column_expression
    "sqlalchemy.types.TypeEngine.column_expression"), implement a [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") class and provide an implementation of [`TypeDecorator.column_expression()`](custom_types.html#sqlalchemy.types.TypeDecorator.column_expression
    "sqlalchemy.types.TypeDecorator.column_expression").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Augmenting Existing Types](custom_types.html#types-typedecorator)'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Applying SQL-level Bind/Result Processing](custom_types.html#types-sql-value-processing)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: alias of [`Comparator`](#sqlalchemy.types.TypeEngine.Comparator "sqlalchemy.sql.type_api.TypeEngine.Comparator")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Compare two values for equality.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Produce a string-compiled form of this [`TypeEngine`](#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine").
  prefs: []
  type: TYPE_NORMAL
- en: When called with no arguments, uses a “default” dialect to produce a string
    result.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**dialect** – a [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    instance.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Return a dialect-specific implementation for this [`TypeEngine`](#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Return a copy of this type which has the [`should_evaluate_none`](#sqlalchemy.types.TypeEngine.should_evaluate_none
    "sqlalchemy.types.TypeEngine.should_evaluate_none") flag set to True.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The ORM uses this flag to indicate that a positive value of `None` is passed
    to the column in an INSERT statement, rather than omitting the column from the
    INSERT statement which has the effect of firing off column-level defaults. It
    also allows for types which have special behavior associated with the Python None
    value to indicate that the value doesn’t necessarily translate into SQL NULL;
    a prime example of this is a JSON type which may wish to persist the JSON value
    `'null'`.
  prefs: []
  type: TYPE_NORMAL
- en: In all cases, the actual NULL SQL value can be always be persisted in any column
    by using the [`null`](sqlelement.html#sqlalchemy.sql.expression.null "sqlalchemy.sql.expression.null")
    SQL construct in an INSERT statement or associated with an ORM-mapped attribute.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The “evaluates none” flag does **not** apply to a value of `None` passed to
    [`Column.default`](metadata.html#sqlalchemy.schema.Column.params.default "sqlalchemy.schema.Column")
    or [`Column.server_default`](metadata.html#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column"); in these cases, `None` still means “no default”.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Forcing NULL on a column with a default](../orm/persistence_techniques.html#session-forcing-null)
    - in the ORM documentation'
  prefs: []
  type: TYPE_NORMAL
- en: '[`JSON.none_as_null`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON.params.none_as_null
    "sqlalchemy.dialects.postgresql.JSON") - PostgreSQL JSON interaction with this
    flag.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`TypeEngine.should_evaluate_none`](#sqlalchemy.types.TypeEngine.should_evaluate_none
    "sqlalchemy.types.TypeEngine.should_evaluate_none") - class-level flag'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Return the corresponding type object from the underlying DB-API, if any.
  prefs: []
  type: TYPE_NORMAL
- en: This can be useful for calling `setinputsizes()`, for example.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Flag, if False, means values from this type aren’t hashable.
  prefs: []
  type: TYPE_NORMAL
- en: Used by the ORM when uniquing result lists.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Return a conversion function for processing literal values that are to be rendered
    directly without using binds.
  prefs: []
  type: TYPE_NORMAL
- en: This function is used when the compiler makes use of the “literal_binds” flag,
    typically used in DDL generation as well as in certain scenarios where backends
    don’t accept bound parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Returns a callable which will receive a literal Python value as the sole positional
    argument and will return a string representation to be rendered in a SQL statement.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This method is only called relative to a **dialect specific type object**, which
    is often **private to a dialect in use** and is not the same type object as the
    public facing one, which means it’s not feasible to subclass a [`TypeEngine`](#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class in order to provide an alternate [`TypeEngine.literal_processor()`](#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor") method, unless subclassing the
    [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType "sqlalchemy.types.UserDefinedType")
    class explicitly.
  prefs: []
  type: TYPE_NORMAL
- en: To provide alternate behavior for [`TypeEngine.literal_processor()`](#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor"), implement a [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") class and provide an implementation of [`TypeDecorator.process_literal_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_literal_param
    "sqlalchemy.types.TypeDecorator.process_literal_param").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Augmenting Existing Types](custom_types.html#types-typedecorator)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Return the Python type object expected to be returned by instances of this type,
    if known.
  prefs: []
  type: TYPE_NORMAL
- en: Basically, for those types which enforce a return type, or are known across
    the board to do such for all common DBAPIs (like `int` for example), will return
    that type.
  prefs: []
  type: TYPE_NORMAL
- en: If a return type is not defined, raises `NotImplementedError`.
  prefs: []
  type: TYPE_NORMAL
- en: Note that any type also accommodates NULL in SQL which means you can also get
    back `None` from any type in practice.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Render bind casts for [`BindTyping.RENDER_CASTS`](internals.html#sqlalchemy.engine.BindTyping.RENDER_CASTS
    "sqlalchemy.engine.BindTyping.RENDER_CASTS") mode.
  prefs: []
  type: TYPE_NORMAL
- en: If True, this type (usually a dialect level impl type) signals to the compiler
    that a cast should be rendered around a bound parameter for this type.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`BindTyping`](internals.html#sqlalchemy.engine.BindTyping "sqlalchemy.engine.BindTyping")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: render casts when rendering a value as an inline literal, e.g. with [`TypeEngine.literal_processor()`](#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor").
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Return a conversion function for processing result row values.
  prefs: []
  type: TYPE_NORMAL
- en: Returns a callable which will receive a result row column value as the sole
    positional argument and will return a value to return to the user.
  prefs: []
  type: TYPE_NORMAL
- en: If processing is not necessary, the method should return `None`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This method is only called relative to a **dialect specific type object**, which
    is often **private to a dialect in use** and is not the same type object as the
    public facing one, which means it’s not feasible to subclass a [`TypeEngine`](#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class in order to provide an alternate [`TypeEngine.result_processor()`](#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor") method, unless subclassing the
    [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType "sqlalchemy.types.UserDefinedType")
    class explicitly.
  prefs: []
  type: TYPE_NORMAL
- en: To provide alternate behavior for [`TypeEngine.result_processor()`](#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor"), implement a [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") class and provide an implementation of [`TypeDecorator.process_result_value()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_result_value
    "sqlalchemy.types.TypeDecorator.process_result_value").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Augmenting Existing Types](custom_types.html#types-typedecorator)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`dialect` – Dialect instance in use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`coltype` – DBAPI coltype argument received in cursor.description.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: If True, the Python constant `None` is considered to be handled explicitly by
    this type.
  prefs: []
  type: TYPE_NORMAL
- en: The ORM uses this flag to indicate that a positive value of `None` is passed
    to the column in an INSERT statement, rather than omitting the column from the
    INSERT statement which has the effect of firing off column-level defaults. It
    also allows types which have special behavior for Python None, such as a JSON
    type, to indicate that they’d like to handle the None value explicitly.
  prefs: []
  type: TYPE_NORMAL
- en: To set this flag on an existing type, use the [`TypeEngine.evaluates_none()`](#sqlalchemy.types.TypeEngine.evaluates_none
    "sqlalchemy.types.TypeEngine.evaluates_none") method.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`TypeEngine.evaluates_none()`](#sqlalchemy.types.TypeEngine.evaluates_none
    "sqlalchemy.types.TypeEngine.evaluates_none")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: A sorting function that can be passed as the key to sorted.
  prefs: []
  type: TYPE_NORMAL
- en: The default value of `None` indicates that the values stored by this type are
    self-sorting.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.3.8.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Produce a copy of this type object that will utilize the given type when applied
    to the dialect of the given name.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The variant mapping indicates that when this type is interpreted by a specific
    dialect, it will instead be transmuted into the given type, rather than using
    the primary type.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 2.0: the [`TypeEngine.with_variant()`](#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") method now works with a [`TypeEngine`](#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") object “in place”, returning a copy of the original
    type rather than returning a wrapping object; the `Variant` class is no longer
    used.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`type_` – a [`TypeEngine`](#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine")
    that will be selected as a variant from the originating type, when a dialect of
    the given name is in use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`*dialect_names` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: one or more base names of the dialect which uses this type. (i.e. `'postgresql'`,
    `'mysql'`, etc.)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Changed in version 2.0: multiple dialect names can be specified for one variant.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Using “UPPERCASE” and Backend-specific types for multiple backends](type_basics.html#types-with-variant)
    - illustrates the use of [`TypeEngine.with_variant()`](#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: A mixin that marks a type as supporting ‘concatenation’, typically strings.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[comparator_factory](#sqlalchemy.types.Concatenable.comparator_factory)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.types.Concatenable`](#sqlalchemy.types.Concatenable "sqlalchemy.types.Concatenable")
    (`sqlalchemy.types.TypeEngineMixin`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.types.Concatenable.Comparator`](#sqlalchemy.types.Concatenable.Comparator
    "sqlalchemy.types.Concatenable.Comparator") (`sqlalchemy.types.Comparator`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: alias of [`Comparator`](#sqlalchemy.types.Concatenable.Comparator "sqlalchemy.sql.sqltypes.Concatenable.Comparator")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: A mixin that marks a type as supporting indexing operations, such as array or
    JSON structures.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[comparator_factory](#sqlalchemy.types.Indexable.comparator_factory)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.types.Indexable`](#sqlalchemy.types.Indexable "sqlalchemy.types.Indexable")
    (`sqlalchemy.types.TypeEngineMixin`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.types.Indexable.Comparator`](#sqlalchemy.types.Indexable.Comparator
    "sqlalchemy.types.Indexable.Comparator") (`sqlalchemy.types.Comparator`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: alias of [`Comparator`](#sqlalchemy.types.Indexable.Comparator "sqlalchemy.sql.sqltypes.Indexable.Comparator")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: An unknown type.
  prefs: []
  type: TYPE_NORMAL
- en: '[`NullType`](#sqlalchemy.types.NullType "sqlalchemy.types.NullType") is used
    as a default type for those cases where a type cannot be determined, including:'
  prefs: []
  type: TYPE_NORMAL
- en: During table reflection, when the type of a column is not recognized by the
    [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When constructing SQL expressions using plain Python objects of unknown types
    (e.g. `somecolumn == my_special_object`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When a new [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    is created, and the given type is passed as `None` or is not passed at all.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The [`NullType`](#sqlalchemy.types.NullType "sqlalchemy.types.NullType") can
    be used within SQL expression invocation without issue, it just has no behavior
    either at the expression construction level or at the bind-parameter/result processing
    level. [`NullType`](#sqlalchemy.types.NullType "sqlalchemy.types.NullType") will
    result in a [`CompileError`](exceptions.html#sqlalchemy.exc.CompileError "sqlalchemy.exc.CompileError")
    if the compiler is asked to render the type itself, such as if it is used in a
    [`cast()`](sqlelement.html#sqlalchemy.sql.expression.cast "sqlalchemy.sql.expression.cast")
    operation or within a schema creation operation such as that invoked by [`MetaData.create_all()`](metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") or the [`CreateTable`](ddl.html#sqlalchemy.schema.CreateTable
    "sqlalchemy.schema.CreateTable") construct.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.types.NullType`](#sqlalchemy.types.NullType "sqlalchemy.types.NullType")
    ([`sqlalchemy.types.TypeEngine`](#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: mixin that defines attributes and behaviors specific to third-party datatypes.
  prefs: []
  type: TYPE_NORMAL
- en: “Third party” refers to datatypes that are defined outside the scope of SQLAlchemy
    within either end-user application code or within external extensions to SQLAlchemy.
  prefs: []
  type: TYPE_NORMAL
- en: Subclasses currently include [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") and [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType").
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.28.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[cache_ok](#sqlalchemy.types.ExternalType.cache_ok)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.types.ExternalType`](#sqlalchemy.types.ExternalType "sqlalchemy.types.ExternalType")
    (`sqlalchemy.types.TypeEngineMixin`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Indicate if statements using this [`ExternalType`](#sqlalchemy.types.ExternalType
    "sqlalchemy.types.ExternalType") are “safe to cache”.
  prefs: []
  type: TYPE_NORMAL
- en: 'The default value `None` will emit a warning and then not allow caching of
    a statement which includes this type. Set to `False` to disable statements using
    this type from being cached at all without a warning. When set to `True`, the
    object’s class and selected elements from its state will be used as part of the
    cache key. For example, using a [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'The cache key for the above type would be equivalent to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: The caching scheme will extract attributes from the type that correspond to
    the names of parameters in the `__init__()` method. Above, the “choices” attribute
    becomes part of the cache key but “internal_only” does not, because there is no
    parameter named “internal_only”.
  prefs: []
  type: TYPE_NORMAL
- en: The requirements for cacheable elements is that they are hashable and also that
    they indicate the same SQL rendered for expressions using this type every time
    for a given cache value.
  prefs: []
  type: TYPE_NORMAL
- en: 'To accommodate for datatypes that refer to unhashable structures such as dictionaries,
    sets and lists, these objects can be made “cacheable” by assigning hashable structures
    to the attributes whose names correspond with the names of the arguments. For
    example, a datatype which accepts a dictionary of lookup values may publish this
    as a sorted series of tuples. Given a previously un-cacheable type as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Where “lookup” is a dictionary. The type will not be able to generate a cache
    key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'If we **did** set up such a cache key, it wouldn’t be usable. We would get
    a tuple structure that contains a dictionary inside of it, which cannot itself
    be used as a key in a “cache dictionary” such as SQLAlchemy’s statement cache,
    since Python dictionaries aren’t hashable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'The type may be made cacheable by assigning a sorted tuple of tuples to the
    “.lookup” attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Where above, the cache key for `LookupType({"a": 10, "b": 20})` will be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'New in version 1.4.14: - added the `cache_ok` flag to allow some configurability
    of caching for [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") classes.'
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4.28: - added the [`ExternalType`](#sqlalchemy.types.ExternalType
    "sqlalchemy.types.ExternalType") mixin which generalizes the `cache_ok` flag to
    both the [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator "sqlalchemy.types.TypeDecorator")
    and [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType "sqlalchemy.types.UserDefinedType")
    classes.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[SQL Compilation Caching](connections.html#sql-caching)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: deprecated. symbol is present for backwards-compatibility with workaround recipes,
    however this actual type should not be used.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[with_variant()](#sqlalchemy.types.Variant.with_variant)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.types.Variant`](#sqlalchemy.types.Variant "sqlalchemy.types.Variant")
    ([`sqlalchemy.types.TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`TypeEngine.with_variant()`](#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") *method of* [`TypeEngine`](#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a copy of this type object that will utilize the given type when applied
    to the dialect of the given name.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: The variant mapping indicates that when this type is interpreted by a specific
    dialect, it will instead be transmuted into the given type, rather than using
    the primary type.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 2.0: the [`TypeEngine.with_variant()`](#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") method now works with a [`TypeEngine`](#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") object “in place”, returning a copy of the original
    type rather than returning a wrapping object; the `Variant` class is no longer
    used.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`type_` – a [`TypeEngine`](#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine")
    that will be selected as a variant from the originating type, when a dialect of
    the given name is in use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`*dialect_names` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: one or more base names of the dialect which uses this type. (i.e. `'postgresql'`,
    `'mysql'`, etc.)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Changed in version 2.0: multiple dialect names can be specified for one variant.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Using “UPPERCASE” and Backend-specific types for multiple backends](type_basics.html#types-with-variant)
    - illustrates the use of [`TypeEngine.with_variant()`](#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant").'
  prefs: []
  type: TYPE_NORMAL
