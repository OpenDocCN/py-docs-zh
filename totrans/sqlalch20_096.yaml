- en: Base Type API
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本类型 API
- en: 原文：[https://docs.sqlalchemy.org/en/20/core/type_api.html](https://docs.sqlalchemy.org/en/20/core/type_api.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/core/type_api.html](https://docs.sqlalchemy.org/en/20/core/type_api.html)
- en: '| Object Name | Description |'
  id: totrans-2
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-3
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [Concatenable](#sqlalchemy.types.Concatenable) | A mixin that marks a type
    as supporting ‘concatenation’, typically strings. |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '| [Concatenable](#sqlalchemy.types.Concatenable) | 标记类型支持“串联”的混合类型，通常用于字符串。
    |'
- en: '| [ExternalType](#sqlalchemy.types.ExternalType) | mixin that defines attributes
    and behaviors specific to third-party datatypes. |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| [ExternalType](#sqlalchemy.types.ExternalType) | 定义特定于第三方数据类型的属性和行为的混合类型。
    |'
- en: '| [Indexable](#sqlalchemy.types.Indexable) | A mixin that marks a type as supporting
    indexing operations, such as array or JSON structures. |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| [Indexable](#sqlalchemy.types.Indexable) | 标记类型支持索引操作的混合类型，例如数组或 JSON 结构。
    |'
- en: '| [NullType](#sqlalchemy.types.NullType) | An unknown type. |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| [NullType](#sqlalchemy.types.NullType) | 未知类型。 |'
- en: '| [TypeEngine](#sqlalchemy.types.TypeEngine) | The ultimate base class for
    all SQL datatypes. |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| [TypeEngine](#sqlalchemy.types.TypeEngine) | 所有 SQL 数据类型的最终基类。 |'
- en: '| [Variant](#sqlalchemy.types.Variant) | deprecated. symbol is present for
    backwards-compatibility with workaround recipes, however this actual type should
    not be used. |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| [Variant](#sqlalchemy.types.Variant) | 不推荐使用。此符号用于向后兼容性，但实际上不应使用此类型。 |'
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The ultimate base class for all SQL datatypes.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 SQL 数据类型的最终基类。
- en: Common subclasses of [`TypeEngine`](#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine")
    include [`String`](type_basics.html#sqlalchemy.types.String "sqlalchemy.types.String"),
    [`Integer`](type_basics.html#sqlalchemy.types.Integer "sqlalchemy.types.Integer"),
    and [`Boolean`](type_basics.html#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean").
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TypeEngine`](#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine")
    的常见子类包括 [`String`](type_basics.html#sqlalchemy.types.String "sqlalchemy.types.String")、[`Integer`](type_basics.html#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer") 和 [`Boolean`](type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean")。'
- en: For an overview of the SQLAlchemy typing system, see [SQL Datatype Objects](types.html).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 SQLAlchemy 类型系统的概述，请参见 [SQL 数据类型对象](types.html)。
- en: See also
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[SQL Datatype Objects](types.html)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[SQL 数据类型对象](types.html)'
- en: '**Members**'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[operate()](#sqlalchemy.types.TypeEngine.Comparator.operate), [reverse_operate()](#sqlalchemy.types.TypeEngine.Comparator.reverse_operate),
    [adapt()](#sqlalchemy.types.TypeEngine.adapt), [as_generic()](#sqlalchemy.types.TypeEngine.as_generic),
    [bind_expression()](#sqlalchemy.types.TypeEngine.bind_expression), [bind_processor()](#sqlalchemy.types.TypeEngine.bind_processor),
    [coerce_compared_value()](#sqlalchemy.types.TypeEngine.coerce_compared_value),
    [column_expression()](#sqlalchemy.types.TypeEngine.column_expression), [comparator_factory](#sqlalchemy.types.TypeEngine.comparator_factory),
    [compare_values()](#sqlalchemy.types.TypeEngine.compare_values), [compile()](#sqlalchemy.types.TypeEngine.compile),
    [dialect_impl()](#sqlalchemy.types.TypeEngine.dialect_impl), [evaluates_none()](#sqlalchemy.types.TypeEngine.evaluates_none),
    [get_dbapi_type()](#sqlalchemy.types.TypeEngine.get_dbapi_type), [hashable](#sqlalchemy.types.TypeEngine.hashable),
    [literal_processor()](#sqlalchemy.types.TypeEngine.literal_processor), [python_type](#sqlalchemy.types.TypeEngine.python_type),
    [render_bind_cast](#sqlalchemy.types.TypeEngine.render_bind_cast), [render_literal_cast](#sqlalchemy.types.TypeEngine.render_literal_cast),
    [result_processor()](#sqlalchemy.types.TypeEngine.result_processor), [should_evaluate_none](#sqlalchemy.types.TypeEngine.should_evaluate_none),
    [sort_key_function](#sqlalchemy.types.TypeEngine.sort_key_function), [with_variant()](#sqlalchemy.types.TypeEngine.with_variant)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[operate()](#sqlalchemy.types.TypeEngine.Comparator.operate), [reverse_operate()](#sqlalchemy.types.TypeEngine.Comparator.reverse_operate),
    [adapt()](#sqlalchemy.types.TypeEngine.adapt), [as_generic()](#sqlalchemy.types.TypeEngine.as_generic),
    [bind_expression()](#sqlalchemy.types.TypeEngine.bind_expression), [bind_processor()](#sqlalchemy.types.TypeEngine.bind_processor),
    [coerce_compared_value()](#sqlalchemy.types.TypeEngine.coerce_compared_value),
    [column_expression()](#sqlalchemy.types.TypeEngine.column_expression), [comparator_factory](#sqlalchemy.types.TypeEngine.comparator_factory),
    [compare_values()](#sqlalchemy.types.TypeEngine.compare_values), [compile()](#sqlalchemy.types.TypeEngine.compile),
    [dialect_impl()](#sqlalchemy.types.TypeEngine.dialect_impl), [evaluates_none()](#sqlalchemy.types.TypeEngine.evaluates_none),
    [get_dbapi_type()](#sqlalchemy.types.TypeEngine.get_dbapi_type), [hashable](#sqlalchemy.types.TypeEngine.hashable),
    [literal_processor()](#sqlalchemy.types.TypeEngine.literal_processor), [python_type](#sqlalchemy.types.TypeEngine.python_type),
    [render_bind_cast](#sqlalchemy.types.TypeEngine.render_bind_cast), [render_literal_cast](#sqlalchemy.types.TypeEngine.render_literal_cast),
    [result_processor()](#sqlalchemy.types.TypeEngine.result_processor), [should_evaluate_none](#sqlalchemy.types.TypeEngine.should_evaluate_none),
    [sort_key_function](#sqlalchemy.types.TypeEngine.sort_key_function), [with_variant()](#sqlalchemy.types.TypeEngine.with_variant)'
- en: '**Class signature**'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.TypeEngine`](#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine")
    ([`sqlalchemy.sql.visitors.Visitable`](visitors.html#sqlalchemy.sql.visitors.Visitable
    "sqlalchemy.sql.visitors.Visitable"), `typing.Generic`)
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.types.TypeEngine`](#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine")
    ([`sqlalchemy.sql.visitors.Visitable`](visitors.html#sqlalchemy.sql.visitors.Visitable
    "sqlalchemy.sql.visitors.Visitable"), `typing.Generic`)
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Base class for custom comparison operations defined at the type level. See [`TypeEngine.comparator_factory`](#sqlalchemy.types.TypeEngine.comparator_factory
    "sqlalchemy.types.TypeEngine.comparator_factory").
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义比较操作在类型级别定义的基类。请参见[`TypeEngine.comparator_factory`](#sqlalchemy.types.TypeEngine.comparator_factory
    "sqlalchemy.types.TypeEngine.comparator_factory")。
- en: '**Class signature**'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.TypeEngine.Comparator`](#sqlalchemy.types.TypeEngine.Comparator
    "sqlalchemy.types.TypeEngine.Comparator") ([`sqlalchemy.sql.expression.ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators"), `typing.Generic`)
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.types.TypeEngine.Comparator`](#sqlalchemy.types.TypeEngine.Comparator
    "sqlalchemy.types.TypeEngine.Comparator") ([`sqlalchemy.sql.expression.ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators"), `typing.Generic`)
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Operate on an argument.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 对参数进行操作。
- en: This is the lowest level of operation, raises `NotImplementedError` by default.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这是操作的最低级别，默认情况下引发`NotImplementedError`。
- en: 'Overriding this on a subclass can allow common behavior to be applied to all
    operations. For example, overriding [`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") to apply `func.lower()` to the left
    and right side:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在子类上重写此方法可以使常见行为适用于所有操作。例如，重写[`ColumnOperators`](sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")以对左侧和右侧应用`func.lower()`：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Parameters:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`op` – Operator callable.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`op` – 运算符可调用。'
- en: '`*other` – the ‘other’ side of the operation. Will be a single scalar for most
    operations.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*other` – 操作的“其他”一侧。对于大多数操作，它将是一个单一的标量。'
- en: '`**kwargs` – modifiers. These may be passed by special operators such as `ColumnOperators.contains()`.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kwargs` – 修饰符。这些可能由特殊运算符传递，如`ColumnOperators.contains()`。'
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Reverse operate on an argument.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 对参数进行反向操作。
- en: Usage is the same as [`operate()`](#sqlalchemy.types.TypeEngine.Comparator.operate
    "sqlalchemy.types.TypeEngine.Comparator.operate").
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 使用方法与[`operate()`](#sqlalchemy.types.TypeEngine.Comparator.operate "sqlalchemy.types.TypeEngine.Comparator.operate")相同。
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Produce an “adapted” form of this type, given an “impl” class to work with.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个“impl”类来处理，产生此类型的“适配”形式。
- en: This method is used internally to associate generic types with “implementation”
    types that are specific to a particular dialect.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法在内部用于将通用类型与特定于特定方言的“实现”类型关联起来。
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Return an instance of the generic type corresponding to this type using heuristic
    rule. The method may be overridden if this heuristic rule is not sufficient.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 使用启发式规则返回此类型对应的通用类型的实例。如果此启发式规则不足以满足需求，则可以重写此方法。
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: New in version 1.4.0b2.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.4.0b2版本中新增。
- en: See also
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Reflecting with Database-Agnostic Types](reflection.html#metadata-reflection-dbagnostic-types)
    - describes the use of [`TypeEngine.as_generic()`](#sqlalchemy.types.TypeEngine.as_generic
    "sqlalchemy.types.TypeEngine.as_generic") in conjunction with the `DDLEvents.column_reflect()`
    event, which is its intended use.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用与数据库无关的类型反射](reflection.html#metadata-reflection-dbagnostic-types) - 描述了[`TypeEngine.as_generic()`](#sqlalchemy.types.TypeEngine.as_generic
    "sqlalchemy.types.TypeEngine.as_generic")与`DDLEvents.column_reflect()`事件结合使用的情况，这是其预期的用法。'
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Given a bind value (i.e. a [`BindParameter`](sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") instance), return a SQL expression
    in its place.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个绑定值（即一个[`BindParameter`](sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter")实例），返回其位置的SQL表达式。
- en: This is typically a SQL function that wraps the existing bound parameter within
    the statement. It is used for special data types that require literals being wrapped
    in some special database function in order to coerce an application-level value
    into a database-specific format. It is the SQL analogue of the [`TypeEngine.bind_processor()`](#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor") method.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '这通常是一个SQL函数，用于在语句中包装现有的绑定参数。它用于特殊的数据类型，这些类型需要将文本在某些特殊数据库函数中包装，以便将应用程序级值强制转换为数据库特定格式。它是[`TypeEngine.bind_processor()`](#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor")方法的SQL模拟。 '
- en: This method is called during the **SQL compilation** phase of a statement, when
    rendering a SQL string. It is **not** called against specific values.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法在语句的**SQL编译**阶段调用，用于呈现SQL字符串。它**不**针对特定值调用。
- en: Note that this method, when implemented, should always return the exact same
    structure, without any conditional logic, as it may be used in an executemany()
    call against an arbitrary number of bound parameter sets.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当实现此方法时，应始终返回完全相同的结构，不带任何条件逻辑，因为它可能在针对任意数量的绑定参数集的executemany()调用中使用。
- en: Note
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method is only called relative to a **dialect specific type object**, which
    is often **private to a dialect in use** and is not the same type object as the
    public facing one, which means it’s not feasible to subclass a [`TypeEngine`](#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class in order to provide an alternate [`TypeEngine.bind_expression()`](#sqlalchemy.types.TypeEngine.bind_expression
    "sqlalchemy.types.TypeEngine.bind_expression") method, unless subclassing the
    [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType "sqlalchemy.types.UserDefinedType")
    class explicitly.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法仅针对**特定方言类型对象**，通常**私有于正在使用的方言**，并且不是公共类型对象，这意味着无法通过子类化[`TypeEngine`](#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")类来提供替代的[`TypeEngine.bind_expression()`](#sqlalchemy.types.TypeEngine.bind_expression
    "sqlalchemy.types.TypeEngine.bind_expression")方法，除非明确地子类化[`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType")类。
- en: To provide alternate behavior for [`TypeEngine.bind_expression()`](#sqlalchemy.types.TypeEngine.bind_expression
    "sqlalchemy.types.TypeEngine.bind_expression"), implement a [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") class and provide an implementation of [`TypeDecorator.bind_expression()`](custom_types.html#sqlalchemy.types.TypeDecorator.bind_expression
    "sqlalchemy.types.TypeDecorator.bind_expression").
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 要为[`TypeEngine.bind_expression()`](#sqlalchemy.types.TypeEngine.bind_expression
    "sqlalchemy.types.TypeEngine.bind_expression")提供替代行为，请实现一个[`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")类，并提供一个[`TypeDecorator.bind_expression()`](custom_types.html#sqlalchemy.types.TypeDecorator.bind_expression
    "sqlalchemy.types.TypeDecorator.bind_expression")的实现。
- en: See also
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Augmenting Existing Types](custom_types.html#types-typedecorator)'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[增强现有类型](custom_types.html#types-typedecorator)'
- en: See also
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Applying SQL-level Bind/Result Processing](custom_types.html#types-sql-value-processing)'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '[应用SQL级别的绑定/结果处理](custom_types.html#types-sql-value-processing)'
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Return a conversion function for processing bind values.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个转换函数以处理绑定值。
- en: Returns a callable which will receive a bind parameter value as the sole positional
    argument and will return a value to send to the DB-API.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可调用对象，该对象将接收一个绑定参数值作为唯一的位置参数，并返回一个要发送到DB-API的值。
- en: If processing is not necessary, the method should return `None`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不需要处理，则该方法应返回`None`。
- en: Note
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method is only called relative to a **dialect specific type object**, which
    is often **private to a dialect in use** and is not the same type object as the
    public facing one, which means it’s not feasible to subclass a [`TypeEngine`](#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class in order to provide an alternate [`TypeEngine.bind_processor()`](#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor") method, unless subclassing the [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType") class explicitly.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法仅针对**特定方言类型对象**，通常**私有于正在使用的方言**，并且不是公共类型对象，这意味着无法通过子类化[`TypeEngine`](#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")类来提供替代的[`TypeEngine.bind_processor()`](#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor")方法，除非明确地子类化[`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType")类。
- en: To provide alternate behavior for [`TypeEngine.bind_processor()`](#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor"), implement a [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") class and provide an implementation of [`TypeDecorator.process_bind_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_bind_param
    "sqlalchemy.types.TypeDecorator.process_bind_param").
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 要为[`TypeEngine.bind_processor()`](#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor")提供替代行为，请实现一个[`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")类，并提供一个[`TypeDecorator.process_bind_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_bind_param
    "sqlalchemy.types.TypeDecorator.process_bind_param")的实现。
- en: See also
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Augmenting Existing Types](custom_types.html#types-typedecorator)'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '[增强现有类型](custom_types.html#types-typedecorator)'
- en: 'Parameters:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**dialect** – Dialect instance in use.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**方言** – 正在使用的方言实例。'
- en: '[PRE11]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Suggest a type for a ‘coerced’ Python value in an expression.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 建议为表达式中的‘强制’Python值提供一种类型。
- en: Given an operator and value, gives the type a chance to return a type which
    the value should be coerced into.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 给定运算符和值，让类型有机会返回一个应该将值强制转换为的类型。
- en: The default behavior here is conservative; if the right-hand side is already
    coerced into a SQL type based on its Python type, it is usually left alone.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的默认行为是保守的；如果右侧已经根据其Python类型被强制转换为SQL类型，则通常会被保留。
- en: End-user functionality extension here should generally be via [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator"), which provides more liberal behavior in that
    it defaults to coercing the other side of the expression into this type, thus
    applying special Python conversions above and beyond those needed by the DBAPI
    to both ides. It also provides the public method [`TypeDecorator.coerce_compared_value()`](custom_types.html#sqlalchemy.types.TypeDecorator.coerce_compared_value
    "sqlalchemy.types.TypeDecorator.coerce_compared_value") which is intended for
    end-user customization of this behavior.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的最终用户功能扩展通常应通过[`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")完成，它提供更自由的行为，因为它默认将表达式的另一侧强制转换为此类型，从而应用特殊的Python转换，超出了DBAPI所需的范围。它还提供了公共方法[`TypeDecorator.coerce_compared_value()`](custom_types.html#sqlalchemy.types.TypeDecorator.coerce_compared_value
    "sqlalchemy.types.TypeDecorator.coerce_compared_value")，用于最终用户定制此行为。
- en: '[PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Given a SELECT column expression, return a wrapping SQL expression.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 给定SELECT列表达式，返回包装的SQL表达式。
- en: This is typically a SQL function that wraps a column expression as rendered
    in the columns clause of a SELECT statement. It is used for special data types
    that require columns to be wrapped in some special database function in order
    to coerce the value before being sent back to the application. It is the SQL analogue
    of the [`TypeEngine.result_processor()`](#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor") method.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这通常是一个SQL函数，它将列表达式包装为在SELECT语句的columns子句中呈现的形式。它用于特殊数据类型，这些数据类型要求列在发送回应用程序之前必须被包装在某些特殊的数据库函数中以强制转换值。它是SQL中[`TypeEngine.result_processor()`](#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor")方法的类比。
- en: This method is called during the **SQL compilation** phase of a statement, when
    rendering a SQL string. It is **not** called against specific values.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法在语句的**SQL编译**阶段调用，当呈现SQL字符串时。它**不会**针对特定值调用。
- en: Note
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method is only called relative to a **dialect specific type object**, which
    is often **private to a dialect in use** and is not the same type object as the
    public facing one, which means it’s not feasible to subclass a [`TypeEngine`](#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class in order to provide an alternate [`TypeEngine.column_expression()`](#sqlalchemy.types.TypeEngine.column_expression
    "sqlalchemy.types.TypeEngine.column_expression") method, unless subclassing the
    [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType "sqlalchemy.types.UserDefinedType")
    class explicitly.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法仅相对于**特定方言类型对象**调用，该对象通常是当前正在使用的方言的**私有类型**，并且不是公共类型对象，这意味着不可行通过子类化[`TypeEngine`](#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")类来提供替代[`TypeEngine.column_expression()`](#sqlalchemy.types.TypeEngine.column_expression
    "sqlalchemy.types.TypeEngine.column_expression")方法，除非显式子类化[`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType")类。
- en: To provide alternate behavior for [`TypeEngine.column_expression()`](#sqlalchemy.types.TypeEngine.column_expression
    "sqlalchemy.types.TypeEngine.column_expression"), implement a [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") class and provide an implementation of [`TypeDecorator.column_expression()`](custom_types.html#sqlalchemy.types.TypeDecorator.column_expression
    "sqlalchemy.types.TypeDecorator.column_expression").
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 要为[`TypeEngine.column_expression()`](#sqlalchemy.types.TypeEngine.column_expression
    "sqlalchemy.types.TypeEngine.column_expression")提供替代行为，请实现一个[`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")类，并提供一个[`TypeDecorator.column_expression()`](custom_types.html#sqlalchemy.types.TypeDecorator.column_expression
    "sqlalchemy.types.TypeDecorator.column_expression")的实现。
- en: See also
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[Augmenting Existing Types](custom_types.html#types-typedecorator)'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '[增强现有类型](custom_types.html#types-typedecorator)'
- en: See also
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[Applying SQL-level Bind/Result Processing](custom_types.html#types-sql-value-processing)'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '[应用 SQL 级别的绑定/结果处理](custom_types.html#types-sql-value-processing)'
- en: '[PRE13]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: alias of [`Comparator`](#sqlalchemy.types.TypeEngine.Comparator "sqlalchemy.sql.type_api.TypeEngine.Comparator")
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Comparator`](#sqlalchemy.types.TypeEngine.Comparator "sqlalchemy.sql.type_api.TypeEngine.Comparator")
    的别名'
- en: '[PRE14]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Compare two values for equality.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 比较两个值是否相等。
- en: '[PRE15]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Produce a string-compiled form of this [`TypeEngine`](#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine").
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 生成此 [`TypeEngine`](#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine")
    的字符串编译形式。
- en: When called with no arguments, uses a “default” dialect to produce a string
    result.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 当不带参数调用时，使用“默认”方言来生成字符串结果。
- en: 'Parameters:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**dialect** – a [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    instance.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**dialect** – 一个 [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    实例。'
- en: '[PRE16]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Return a dialect-specific implementation for this [`TypeEngine`](#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine").
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此 [`TypeEngine`](#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine")
    的特定于方言的实现。
- en: '[PRE17]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Return a copy of this type which has the [`should_evaluate_none`](#sqlalchemy.types.TypeEngine.should_evaluate_none
    "sqlalchemy.types.TypeEngine.should_evaluate_none") flag set to True.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 返回具有 [`should_evaluate_none`](#sqlalchemy.types.TypeEngine.should_evaluate_none
    "sqlalchemy.types.TypeEngine.should_evaluate_none") 标志设置为 True 的此类型的副本。
- en: 'E.g.:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE18]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The ORM uses this flag to indicate that a positive value of `None` is passed
    to the column in an INSERT statement, rather than omitting the column from the
    INSERT statement which has the effect of firing off column-level defaults. It
    also allows for types which have special behavior associated with the Python None
    value to indicate that the value doesn’t necessarily translate into SQL NULL;
    a prime example of this is a JSON type which may wish to persist the JSON value
    `'null'`.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: ORM 使用此标志来指示在 INSERT 语句中传递 `None` 的正值到列中，而不是省略列从 INSERT 语句中，这将触发列级默认值的效果。它还允许具有与
    Python None 值关联的特殊行为的类型来指示该值不一定转换为 SQL NULL；一个典型的例子是可能希望持久化 JSON 值 `'null'` 的
    JSON 类型。
- en: In all cases, the actual NULL SQL value can be always be persisted in any column
    by using the [`null`](sqlelement.html#sqlalchemy.sql.expression.null "sqlalchemy.sql.expression.null")
    SQL construct in an INSERT statement or associated with an ORM-mapped attribute.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有情况下，实际的 NULL SQL 值都可以通过在 INSERT 语句中使用 [`null`](sqlelement.html#sqlalchemy.sql.expression.null
    "sqlalchemy.sql.expression.null") SQL 构造或与 ORM 映射的属性相关联来始终持久化在任何列中。
- en: Note
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 注
- en: The “evaluates none” flag does **not** apply to a value of `None` passed to
    [`Column.default`](metadata.html#sqlalchemy.schema.Column.params.default "sqlalchemy.schema.Column")
    or [`Column.server_default`](metadata.html#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column"); in these cases, `None` still means “no default”.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: “evaluates none” 标志 **不** 适用于传递给 [`Column.default`](metadata.html#sqlalchemy.schema.Column.params.default
    "sqlalchemy.schema.Column") 或 [`Column.server_default`](metadata.html#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column") 的 `None` 值；在这些情况下，`None` 仍然表示“无默认值”。
- en: See also
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Forcing NULL on a column with a default](../orm/persistence_techniques.html#session-forcing-null)
    - in the ORM documentation'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '[强制具有默认值的列为 NULL](../orm/persistence_techniques.html#session-forcing-null)
    - 在 ORM 文档中'
- en: '[`JSON.none_as_null`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON.params.none_as_null
    "sqlalchemy.dialects.postgresql.JSON") - PostgreSQL JSON interaction with this
    flag.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '[`JSON.none_as_null`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON.params.none_as_null
    "sqlalchemy.dialects.postgresql.JSON") - 具有此标志的 PostgreSQL JSON 交互。'
- en: '[`TypeEngine.should_evaluate_none`](#sqlalchemy.types.TypeEngine.should_evaluate_none
    "sqlalchemy.types.TypeEngine.should_evaluate_none") - class-level flag'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TypeEngine.should_evaluate_none`](#sqlalchemy.types.TypeEngine.should_evaluate_none
    "sqlalchemy.types.TypeEngine.should_evaluate_none") - 类级标志'
- en: '[PRE19]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Return the corresponding type object from the underlying DB-API, if any.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 返回底层 DB-API 的相应类型对象，如果有的话。
- en: This can be useful for calling `setinputsizes()`, for example.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这对于调用 `setinputsizes()` 可能很有用。
- en: '[PRE20]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Flag, if False, means values from this type aren’t hashable.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 False，则表示来自此类型的值不可哈希。
- en: Used by the ORM when uniquing result lists.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ORM 列表结果去重时使用。
- en: '[PRE21]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Return a conversion function for processing literal values that are to be rendered
    directly without using binds.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个转换函数，用于处理直接渲染而不使用绑定的文字值。
- en: This function is used when the compiler makes use of the “literal_binds” flag,
    typically used in DDL generation as well as in certain scenarios where backends
    don’t accept bound parameters.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 当编译器使用“literal_binds”标志时使用此函数，通常用于 DDL 生成以及在某些后端不接受绑定参数的情况下。
- en: Returns a callable which will receive a literal Python value as the sole positional
    argument and will return a string representation to be rendered in a SQL statement.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可调用对象，该对象将接收一个字面的 Python 值作为唯一的位置参数，并返回一个字符串表示以在 SQL 语句中呈现。
- en: Note
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method is only called relative to a **dialect specific type object**, which
    is often **private to a dialect in use** and is not the same type object as the
    public facing one, which means it’s not feasible to subclass a [`TypeEngine`](#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class in order to provide an alternate [`TypeEngine.literal_processor()`](#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor") method, unless subclassing the
    [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType "sqlalchemy.types.UserDefinedType")
    class explicitly.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法仅相对于**特定方言类型对象**调用，该对象通常是**正在使用的方言的私有对象**，并不是公共类型对象，这意味着不太可能为了提供替代的[`TypeEngine.literal_processor()`](#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor")方法而对[`TypeEngine`](#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")类进行子类化，除非显式地对[`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType")类进行子类化。
- en: To provide alternate behavior for [`TypeEngine.literal_processor()`](#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor"), implement a [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") class and provide an implementation of [`TypeDecorator.process_literal_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_literal_param
    "sqlalchemy.types.TypeDecorator.process_literal_param").
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 要为[`TypeEngine.literal_processor()`](#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor")提供替代行为，请实现一个[`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")类，并提供一个[`TypeDecorator.process_literal_param()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_literal_param
    "sqlalchemy.types.TypeDecorator.process_literal_param")的实现。
- en: See also
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Augmenting Existing Types](custom_types.html#types-typedecorator)'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '[增强现有类型](custom_types.html#types-typedecorator)'
- en: '[PRE22]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Return the Python type object expected to be returned by instances of this type,
    if known.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此类型实例预计返回的 Python 类型对象，如果已知的话。
- en: Basically, for those types which enforce a return type, or are known across
    the board to do such for all common DBAPIs (like `int` for example), will return
    that type.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，对于那些强制指定返回类型的类型，或者已知在所有常见的 DBAPI 中都会对所有类型进行这样的操作的类型（例如`int`），将返回该类型。
- en: If a return type is not defined, raises `NotImplementedError`.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如果未定义返回类型，则引发`NotImplementedError`。
- en: Note that any type also accommodates NULL in SQL which means you can also get
    back `None` from any type in practice.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在 SQL 中，任何类型也可以容纳 NULL，这意味着你在实践中也可以从任何类型中获得`None`。
- en: '[PRE23]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Render bind casts for [`BindTyping.RENDER_CASTS`](internals.html#sqlalchemy.engine.BindTyping.RENDER_CASTS
    "sqlalchemy.engine.BindTyping.RENDER_CASTS") mode.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染绑定转换以适应[`BindTyping.RENDER_CASTS`](internals.html#sqlalchemy.engine.BindTyping.RENDER_CASTS
    "sqlalchemy.engine.BindTyping.RENDER_CASTS")模式。
- en: If True, this type (usually a dialect level impl type) signals to the compiler
    that a cast should be rendered around a bound parameter for this type.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为 True，则此类型（通常是一个方言级别的实现类型）向编译器发出信号，表示应该在此类型的绑定参数周围呈现一个转换。
- en: New in version 2.0.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0 版本中的新功能。
- en: See also
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`BindTyping`](internals.html#sqlalchemy.engine.BindTyping "sqlalchemy.engine.BindTyping")'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '[`BindTyping`](internals.html#sqlalchemy.engine.BindTyping "sqlalchemy.engine.BindTyping")'
- en: '[PRE24]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: render casts when rendering a value as an inline literal, e.g. with [`TypeEngine.literal_processor()`](#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor").
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染转换当渲染一个值作为内联字面值时，例如通过[`TypeEngine.literal_processor()`](#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor")。
- en: New in version 2.0.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0 版本中的新功能。
- en: '[PRE25]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Return a conversion function for processing result row values.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个用于处理结果行值的转换函数。
- en: Returns a callable which will receive a result row column value as the sole
    positional argument and will return a value to return to the user.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可调用对象，该对象将接收一个结果行列值作为唯一的位置参数，并返回一个要返回给用户的值。
- en: If processing is not necessary, the method should return `None`.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不需要处理，则方法应返回`None`。
- en: Note
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method is only called relative to a **dialect specific type object**, which
    is often **private to a dialect in use** and is not the same type object as the
    public facing one, which means it’s not feasible to subclass a [`TypeEngine`](#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class in order to provide an alternate [`TypeEngine.result_processor()`](#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor") method, unless subclassing the
    [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType "sqlalchemy.types.UserDefinedType")
    class explicitly.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法仅相对于**特定方言类型对象**调用，该对象通常是**正在使用的方言私有的**，并且不是与公共类型对象相同的类型对象，这意味着无法通过子类化[`TypeEngine`](#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")类来提供替代的[`TypeEngine.result_processor()`](#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor")方法，除非明确子类化[`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType")类。
- en: To provide alternate behavior for [`TypeEngine.result_processor()`](#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor"), implement a [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") class and provide an implementation of [`TypeDecorator.process_result_value()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_result_value
    "sqlalchemy.types.TypeDecorator.process_result_value").
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 要为[`TypeEngine.result_processor()`](#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor")提供替代行为，请实现一个[`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")类，并提供一个[`TypeDecorator.process_result_value()`](custom_types.html#sqlalchemy.types.TypeDecorator.process_result_value
    "sqlalchemy.types.TypeDecorator.process_result_value")的实现。
- en: See also
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Augmenting Existing Types](custom_types.html#types-typedecorator)'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '[增强现有类型](custom_types.html#types-typedecorator)'
- en: 'Parameters:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dialect` – Dialect instance in use.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect` – 正在使用的方言实例。'
- en: '`coltype` – DBAPI coltype argument received in cursor.description.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`coltype` – 在`cursor.description`中接收到的DBAPI coltype参数。'
- en: '[PRE26]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: If True, the Python constant `None` is considered to be handled explicitly by
    this type.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为True，则Python常量`None`被认为是此类型明确处理的。
- en: The ORM uses this flag to indicate that a positive value of `None` is passed
    to the column in an INSERT statement, rather than omitting the column from the
    INSERT statement which has the effect of firing off column-level defaults. It
    also allows types which have special behavior for Python None, such as a JSON
    type, to indicate that they’d like to handle the None value explicitly.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: ORM使用此标志表示在INSERT语句中将正值的`None`传递给列，而不是从INSERT语句中省略列，这会触发列级默认值。它还允许具有Python None的特殊行为的类型（例如JSON类型）明确指示它们希望显式处理None值。
- en: To set this flag on an existing type, use the [`TypeEngine.evaluates_none()`](#sqlalchemy.types.TypeEngine.evaluates_none
    "sqlalchemy.types.TypeEngine.evaluates_none") method.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 要在现有类型上设置此标志，请使用[`TypeEngine.evaluates_none()`](#sqlalchemy.types.TypeEngine.evaluates_none
    "sqlalchemy.types.TypeEngine.evaluates_none")方法。
- en: See also
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`TypeEngine.evaluates_none()`](#sqlalchemy.types.TypeEngine.evaluates_none
    "sqlalchemy.types.TypeEngine.evaluates_none")'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TypeEngine.evaluates_none()`](#sqlalchemy.types.TypeEngine.evaluates_none
    "sqlalchemy.types.TypeEngine.evaluates_none")'
- en: '[PRE27]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: A sorting function that can be passed as the key to sorted.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 作为传递给sorted的键的排序函数。
- en: The default value of `None` indicates that the values stored by this type are
    self-sorting.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 默认值为`None`表示此类型存储的值是自动排序的。
- en: New in version 1.3.8.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 1.3.8版中的新功能。
- en: '[PRE28]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Produce a copy of this type object that will utilize the given type when applied
    to the dialect of the given name.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 生成此类型对象的副本，该副本将在应用于给定名称的方言时使用给定的类型。
- en: 'e.g.:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE29]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The variant mapping indicates that when this type is interpreted by a specific
    dialect, it will instead be transmuted into the given type, rather than using
    the primary type.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 变体映射表示当特定方言解释此类型时，它将被转换为给定类型，而不是使用主类型。
- en: 'Changed in version 2.0: the [`TypeEngine.with_variant()`](#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") method now works with a [`TypeEngine`](#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") object “in place”, returning a copy of the original
    type rather than returning a wrapping object; the `Variant` class is no longer
    used.'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本2.0开始更改：[`TypeEngine.with_variant()`](#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant")方法现在在“就地”操作[`TypeEngine`](#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")对象时工作，返回原始类型的副本，而不是返回包装对象；不再使用`Variant`类。
- en: 'Parameters:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`type_` – a [`TypeEngine`](#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine")
    that will be selected as a variant from the originating type, when a dialect of
    the given name is in use.'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type_` – 一个[`TypeEngine`](#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine")，当使用给定名称的方言时，将从原始类型中选择作为变体。'
- en: '`*dialect_names` –'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*dialect_names` –'
- en: one or more base names of the dialect which uses this type. (i.e. `'postgresql'`,
    `'mysql'`, etc.)
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用此类型的方言的一个或多个基本名称（即`'postgresql'`，`'mysql'`等）
- en: 'Changed in version 2.0: multiple dialect names can be specified for one variant.'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从2.0版本开始更改：可以为一个变体指定多个方言名称。
- en: See also
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Using “UPPERCASE” and Backend-specific types for multiple backends](type_basics.html#types-with-variant)
    - illustrates the use of [`TypeEngine.with_variant()`](#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant").'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用“大写字母”和后端特定类型的多后端](type_basics.html#types-with-variant) - 演示了[`TypeEngine.with_variant()`](#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant")的使用。'
- en: '[PRE30]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: A mixin that marks a type as supporting ‘concatenation’, typically strings.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 一个将类型标记为支持“连接”的mixin，通常是字符串。
- en: '**Members**'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[comparator_factory](#sqlalchemy.types.Concatenable.comparator_factory)'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '[comparator_factory](#sqlalchemy.types.Concatenable.comparator_factory)'
- en: '**Class signature**'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.Concatenable`](#sqlalchemy.types.Concatenable "sqlalchemy.types.Concatenable")
    (`sqlalchemy.types.TypeEngineMixin`)
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.types.Concatenable`](#sqlalchemy.types.Concatenable "sqlalchemy.types.Concatenable")（`sqlalchemy.types.TypeEngineMixin`）
- en: '[PRE31]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '**Class signature**'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.Concatenable.Comparator`](#sqlalchemy.types.Concatenable.Comparator
    "sqlalchemy.types.Concatenable.Comparator") (`sqlalchemy.types.Comparator`)
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.types.Concatenable.Comparator`](#sqlalchemy.types.Concatenable.Comparator
    "sqlalchemy.types.Concatenable.Comparator")（`sqlalchemy.types.Comparator`）
- en: '[PRE32]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: alias of [`Comparator`](#sqlalchemy.types.Concatenable.Comparator "sqlalchemy.sql.sqltypes.Concatenable.Comparator")
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Comparator`](#sqlalchemy.types.Concatenable.Comparator "sqlalchemy.sql.sqltypes.Concatenable.Comparator")的别名'
- en: '[PRE33]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: A mixin that marks a type as supporting indexing operations, such as array or
    JSON structures.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 一个将类型标记为支持索引操作的mixin，例如数组或JSON结构。
- en: '**Members**'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[comparator_factory](#sqlalchemy.types.Indexable.comparator_factory)'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '[comparator_factory](#sqlalchemy.types.Indexable.comparator_factory)'
- en: '**Class signature**'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.Indexable`](#sqlalchemy.types.Indexable "sqlalchemy.types.Indexable")
    (`sqlalchemy.types.TypeEngineMixin`)
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.types.Indexable`](#sqlalchemy.types.Indexable "sqlalchemy.types.Indexable")（`sqlalchemy.types.TypeEngineMixin`）
- en: '[PRE34]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '**Class signature**'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.Indexable.Comparator`](#sqlalchemy.types.Indexable.Comparator
    "sqlalchemy.types.Indexable.Comparator") (`sqlalchemy.types.Comparator`)
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.types.Indexable.Comparator`](#sqlalchemy.types.Indexable.Comparator
    "sqlalchemy.types.Indexable.Comparator")（`sqlalchemy.types.Comparator`）
- en: '[PRE35]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: alias of [`Comparator`](#sqlalchemy.types.Indexable.Comparator "sqlalchemy.sql.sqltypes.Indexable.Comparator")
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Comparator`](#sqlalchemy.types.Indexable.Comparator "sqlalchemy.sql.sqltypes.Indexable.Comparator")的别名'
- en: '[PRE36]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: An unknown type.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 一个未知类型。
- en: '[`NullType`](#sqlalchemy.types.NullType "sqlalchemy.types.NullType") is used
    as a default type for those cases where a type cannot be determined, including:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '[`NullType`](#sqlalchemy.types.NullType "sqlalchemy.types.NullType")用作那些无法确定类型的情况的默认类型，包括：'
- en: During table reflection, when the type of a column is not recognized by the
    [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在表反射期间，当列的类型未被[`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")识别时
- en: When constructing SQL expressions using plain Python objects of unknown types
    (e.g. `somecolumn == my_special_object`)
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当使用未知类型的纯Python对象构建SQL表达式时（例如`somecolumn == my_special_object`）
- en: When a new [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    is created, and the given type is passed as `None` or is not passed at all.
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当创建新的[`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")时，并且给定类型传递为`None`或根本不传递时。
- en: The [`NullType`](#sqlalchemy.types.NullType "sqlalchemy.types.NullType") can
    be used within SQL expression invocation without issue, it just has no behavior
    either at the expression construction level or at the bind-parameter/result processing
    level. [`NullType`](#sqlalchemy.types.NullType "sqlalchemy.types.NullType") will
    result in a [`CompileError`](exceptions.html#sqlalchemy.exc.CompileError "sqlalchemy.exc.CompileError")
    if the compiler is asked to render the type itself, such as if it is used in a
    [`cast()`](sqlelement.html#sqlalchemy.sql.expression.cast "sqlalchemy.sql.expression.cast")
    operation or within a schema creation operation such as that invoked by [`MetaData.create_all()`](metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") or the [`CreateTable`](ddl.html#sqlalchemy.schema.CreateTable
    "sqlalchemy.schema.CreateTable") construct.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '[`NullType`](#sqlalchemy.types.NullType "sqlalchemy.types.NullType") 可以在 SQL
    表达式调用中使用，没有问题，只是在表达式构造级别或绑定参数/结果处理级别上没有行为。'
- en: '**Class signature**'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.NullType`](#sqlalchemy.types.NullType "sqlalchemy.types.NullType")
    ([`sqlalchemy.types.TypeEngine`](#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine"))
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.types.NullType`](#sqlalchemy.types.NullType "sqlalchemy.types.NullType")
    ([`sqlalchemy.types.TypeEngine`](#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine"))
- en: '[PRE37]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: mixin that defines attributes and behaviors specific to third-party datatypes.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 定义特定于第三方数据类型的属性和行为的混合项。
- en: “Third party” refers to datatypes that are defined outside the scope of SQLAlchemy
    within either end-user application code or within external extensions to SQLAlchemy.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: “第三方”指的是在 SQLAlchemy 范围之外定义的数据类型，在最终用户应用代码中或在 SQLAlchemy 的外部扩展中定义。
- en: Subclasses currently include [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") and [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType").
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 当前的子类包括 [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator "sqlalchemy.types.TypeDecorator")
    和 [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType "sqlalchemy.types.UserDefinedType")。
- en: New in version 1.4.28.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4.28 中的新功能。
- en: '**Members**'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[cache_ok](#sqlalchemy.types.ExternalType.cache_ok)'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '[cache_ok](#sqlalchemy.types.ExternalType.cache_ok)'
- en: '**Class signature**'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.ExternalType`](#sqlalchemy.types.ExternalType "sqlalchemy.types.ExternalType")
    (`sqlalchemy.types.TypeEngineMixin`)
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.types.ExternalType`](#sqlalchemy.types.ExternalType "sqlalchemy.types.ExternalType")
    (`sqlalchemy.types.TypeEngineMixin`)
- en: '[PRE38]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Indicate if statements using this [`ExternalType`](#sqlalchemy.types.ExternalType
    "sqlalchemy.types.ExternalType") are “safe to cache”.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 表示使用此 [`ExternalType`](#sqlalchemy.types.ExternalType "sqlalchemy.types.ExternalType")
    的语句是否“可缓存”。
- en: 'The default value `None` will emit a warning and then not allow caching of
    a statement which includes this type. Set to `False` to disable statements using
    this type from being cached at all without a warning. When set to `True`, the
    object’s class and selected elements from its state will be used as part of the
    cache key. For example, using a [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator"):'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 默认值 `None` 将发出警告，然后不允许包含此类型的语句进行缓存。设置为 `False` 以完全禁用使用此类型的语句的缓存而不发出警告。当设置为 `True`
    时，对象的类和其状态的选定元素将用作缓存键的一部分。例如，使用 [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")：
- en: '[PRE39]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The cache key for the above type would be equivalent to:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 上述类型的缓存键将等效于：
- en: '[PRE40]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: The caching scheme will extract attributes from the type that correspond to
    the names of parameters in the `__init__()` method. Above, the “choices” attribute
    becomes part of the cache key but “internal_only” does not, because there is no
    parameter named “internal_only”.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存方案将从与 `__init__()` 方法中的参数名称对应的类型中提取属性。上面的 “choices” 属性成为缓存键的一部分，但 “internal_only”
    不是，因为没有名为 “internal_only” 的参数。
- en: The requirements for cacheable elements is that they are hashable and also that
    they indicate the same SQL rendered for expressions using this type every time
    for a given cache value.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 可缓存元素的要求是它们是可哈希的，并且它们指示对于给定缓存值的表达式每次使用相同的 SQL 渲染。
- en: 'To accommodate for datatypes that refer to unhashable structures such as dictionaries,
    sets and lists, these objects can be made “cacheable” by assigning hashable structures
    to the attributes whose names correspond with the names of the arguments. For
    example, a datatype which accepts a dictionary of lookup values may publish this
    as a sorted series of tuples. Given a previously un-cacheable type as:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 为了适应引用不可哈希结构（如字典、集合和列表）的数据类型，可以通过将可哈希结构分配给其属性来使这些对象“可缓存”，其名称与参数的名称对应。例如，接受查找值字典的数据类型可以将其发布为排序的元组序列。给定先前不可缓��的类型为：
- en: '[PRE41]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Where “lookup” is a dictionary. The type will not be able to generate a cache
    key:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 其中“lookup”是一个字典。该类型将无法生成缓存键：
- en: '[PRE42]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'If we **did** set up such a cache key, it wouldn’t be usable. We would get
    a tuple structure that contains a dictionary inside of it, which cannot itself
    be used as a key in a “cache dictionary” such as SQLAlchemy’s statement cache,
    since Python dictionaries aren’t hashable:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们**设置**了这样一个缓存键，它将无法使用。我们将得到一个包含字典的元组结构，该字典本身不能作为“缓存字典”中的键使用，因为Python字典不可哈希：
- en: '[PRE43]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The type may be made cacheable by assigning a sorted tuple of tuples to the
    “.lookup” attribute:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将排序的元组元组分配给“.lookup”属性，可以使类型可缓存：
- en: '[PRE44]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Where above, the cache key for `LookupType({"a": 10, "b": 20})` will be:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '在上述情况下，`LookupType({"a": 10, "b": 20})`的缓存键将是：'
- en: '[PRE45]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'New in version 1.4.14: - added the `cache_ok` flag to allow some configurability
    of caching for [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") classes.'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本1.4.14中：- 添加了`cache_ok`标志，允许对[`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")类进行一些缓存配置。
- en: 'New in version 1.4.28: - added the [`ExternalType`](#sqlalchemy.types.ExternalType
    "sqlalchemy.types.ExternalType") mixin which generalizes the `cache_ok` flag to
    both the [`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator "sqlalchemy.types.TypeDecorator")
    and [`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType "sqlalchemy.types.UserDefinedType")
    classes.'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本1.4.28中：- 添加了[`ExternalType`](#sqlalchemy.types.ExternalType "sqlalchemy.types.ExternalType")混合类型，将`cache_ok`标志泛化到[`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")和[`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType")类。
- en: See also
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[SQL Compilation Caching](connections.html#sql-caching)'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '[SQL编译缓存](connections.html#sql-caching)'
- en: '[PRE46]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: deprecated. symbol is present for backwards-compatibility with workaround recipes,
    however this actual type should not be used.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 已弃用。符号用于向后兼容解决方案配方，但不应使用此实际类型。
- en: '**Members**'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[with_variant()](#sqlalchemy.types.Variant.with_variant)'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '[with_variant()](#sqlalchemy.types.Variant.with_variant)'
- en: '**Class signature**'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.types.Variant`](#sqlalchemy.types.Variant "sqlalchemy.types.Variant")
    ([`sqlalchemy.types.TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator"))
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.types.Variant`](#sqlalchemy.types.Variant "sqlalchemy.types.Variant")（[`sqlalchemy.types.TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")）
- en: '[PRE47]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '*inherited from the* [`TypeEngine.with_variant()`](#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") *method of* [`TypeEngine`](#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`TypeEngine.with_variant()`](#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") *方法的* [`TypeEngine`](#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")'
- en: Produce a copy of this type object that will utilize the given type when applied
    to the dialect of the given name.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 生成将在应用于给定名称的方言时利用给定类型的此类型对象的副本。
- en: 'e.g.:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE48]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: The variant mapping indicates that when this type is interpreted by a specific
    dialect, it will instead be transmuted into the given type, rather than using
    the primary type.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 变体映射表示，当特定方言解释此类型时，它将被转换为给定类型，而不是使用主要类型。
- en: 'Changed in version 2.0: the [`TypeEngine.with_variant()`](#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") method now works with a [`TypeEngine`](#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") object “in place”, returning a copy of the original
    type rather than returning a wrapping object; the `Variant` class is no longer
    used.'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 版本2.0中更改：[`TypeEngine.with_variant()`](#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant")方法现在与[`TypeEngine`](#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")对象“原地”工作，返回原始类型的副本，而不是返回包装对象；不再使用`Variant`类。
- en: 'Parameters:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`type_` – a [`TypeEngine`](#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine")
    that will be selected as a variant from the originating type, when a dialect of
    the given name is in use.'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type_` – 一个 [`TypeEngine`](#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine")，当使用给定名称的方言时，将从原始类型中选择作为变体的类型。'
- en: '`*dialect_names` –'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*dialect_names*` –'
- en: one or more base names of the dialect which uses this type. (i.e. `'postgresql'`,
    `'mysql'`, etc.)
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用此类型的方言的一个或多个基本名称。（即 `'postgresql'`，`'mysql'` 等）
- en: 'Changed in version 2.0: multiple dialect names can be specified for one variant.'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本 2.0 中的变更：一个变体可以指定多个方言名称。
- en: See also
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using “UPPERCASE” and Backend-specific types for multiple backends](type_basics.html#types-with-variant)
    - illustrates the use of [`TypeEngine.with_variant()`](#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant").'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用“大写”和后端特定类型进行多后端处理](type_basics.html#types-with-variant) - 演示了 [`TypeEngine.with_variant()`](#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") 的使用。'
