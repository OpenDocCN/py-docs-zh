- en: Column INSERT/UPDATE Defaults
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列的插入/更新默认值
- en: 原文：[https://docs.sqlalchemy.org/en/20/core/defaults.html](https://docs.sqlalchemy.org/en/20/core/defaults.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/core/defaults.html](https://docs.sqlalchemy.org/en/20/core/defaults.html)
- en: Column INSERT and UPDATE defaults refer to functions that create a **default
    value** for a particular column in a row as an INSERT or UPDATE statement is proceeding
    against that row, in the case where **no value was provided to the INSERT or UPDATE
    statement for that column**. That is, if a table has a column called “timestamp”,
    and an INSERT statement proceeds which does not include a value for this column,
    an INSERT default would create a new value, such as the current time, that is
    used as the value to be INSERTed into the “timestamp” column. If the statement
    *does* include a value for this column, then the default does *not* take place.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 列的插入和更新默认值是指在针对该行进行插入或更新语句时，为该列创建**默认值**的函数，前提是对该列的插入或更新语句未提供任何值。也就是说，如果一个表有一个名为“timestamp”的列，并且进行了不包含该列值的插入语句，那么插入默认值将创建一个新值，例如当前时间，该值将用作要插入到“timestamp”列的值。如果语句*包含*该列的值，则默认值*不*会发生。
- en: Column defaults can be server-side functions or constant values which are defined
    in the database along with the schema in [DDL](../glossary.html#term-DDL), or
    as SQL expressions which are rendered directly within an INSERT or UPDATE statement
    emitted by SQLAlchemy; they may also be client-side Python functions or constant
    values which are invoked by SQLAlchemy before data is passed to the database.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 列默认值可以是服务器端函数或与数据库中的架构一起定义的常量值，在[DDL](../glossary.html#term-DDL)中，或者作为SQLAlchemy直接在INSERT或UPDATE语句中呈现的SQL表达式；它们也可以是由SQLAlchemy在将数据传递到数据库之前调用的客户端
    Python 函数或常量值。
- en: Note
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: A column default handler should not be confused with a construct that intercepts
    and modifies incoming values for INSERT and UPDATE statements which *are* provided
    to the statement as it is invoked. This is known as [data marshalling](../glossary.html#term-data-marshalling),
    where a column value is modified in some way by the application before being sent
    to the database. SQLAlchemy provides a few means of achieving this which include
    using [custom datatypes](custom_types.html#types-typedecorator), [SQL execution
    events](events.html#core-sql-events) and in the ORM [custom validators](../orm/mapped_attributes.html#simple-validators)
    as well as [attribute events](../orm/events.html#orm-attribute-events). Column
    defaults are only invoked when there is **no value present** for a column in a
    SQL [DML](../glossary.html#term-DML) statement.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 列默认处理程序不应与拦截和修改传递给语句的插入和更新语句中的值的构造混淆。这称为[数据编组](../glossary.html#term-data-marshalling)，在这里，在将列值发送到数据库之前，应用程序以某种方式修改列值。SQLAlchemy
    提供了几种实现这一点的方法，包括使用[自定义数据类型](custom_types.html#types-typedecorator)、[SQL 执行事件](events.html#core-sql-events)以及
    ORM 中的[自定义验证器](../orm/mapped_attributes.html#simple-validators)以及[属性事件](../orm/events.html#orm-attribute-events)。列默认值仅在
    SQL [DML](../glossary.html#term-DML) 语句中的某一列没有**值时**调用。
- en: 'SQLAlchemy provides an array of features regarding default generation functions
    which take place for non-present values during INSERT and UPDATE statements. Options
    include:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 提供了一系列关于在插入和更新语句中针对不存在的值进行默认生成函数的特性。选项包括：
- en: Scalar values used as defaults during INSERT and UPDATE operations
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插入和更新操作中用作默认值的标量值
- en: Python functions which execute upon INSERT and UPDATE operations
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在插入和更新操作中执行的 Python 函数
- en: SQL expressions which are embedded in INSERT statements (or in some cases execute
    beforehand)
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 嵌入到插入语句中的 SQL 表达式（或在某些情况下提前执行的表达式）
- en: SQL expressions which are embedded in UPDATE statements
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 嵌入到更新语句中的 SQL 表达式
- en: Server side default values used during INSERT
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插入时使用的服务器端默认值
- en: Markers for server-side triggers used during UPDATE
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于更新时的服务器端触发器的标记
- en: The general rule for all insert/update defaults is that they only take effect
    if no value for a particular column is passed as an `execute()` parameter; otherwise,
    the given value is used.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 所有插入/更新默认值的一般规则是，只有当某一列的值未作为`execute()`参数传递时，它们才会生效；否则，将使用给定的值。
- en: Scalar Defaults
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标量默认值
- en: 'The simplest kind of default is a scalar value used as the default value of
    a column:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的默认值是用作列的默认值的标量值：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Above, the value “12” will be bound as the column value during an INSERT if
    no other value is supplied.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述情况下，如果没有提供其他值，则“12”将绑定为插入时的列值。
- en: 'A scalar value may also be associated with an UPDATE statement, though this
    is not very common (as UPDATE statements are usually looking for dynamic defaults):'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 标量值也可以与 UPDATE 语句关联，但这不是很常见（因为 UPDATE 语句通常正在寻找动态默认值）：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Python-Executed Functions
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python 执行的函数
- en: 'The [`Column.default`](metadata.html#sqlalchemy.schema.Column.params.default
    "sqlalchemy.schema.Column") and [`Column.onupdate`](metadata.html#sqlalchemy.schema.Column.params.onupdate
    "sqlalchemy.schema.Column") keyword arguments also accept Python functions. These
    functions are invoked at the time of insert or update if no other value for that
    column is supplied, and the value returned is used for the column’s value. Below
    illustrates a crude “sequence” that assigns an incrementing counter to a primary
    key column:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Column.default`](metadata.html#sqlalchemy.schema.Column.params.default "sqlalchemy.schema.Column")
    和 [`Column.onupdate`](metadata.html#sqlalchemy.schema.Column.params.onupdate "sqlalchemy.schema.Column")
    关键字参数也接受 Python 函数。如果没有为该列提供其他值，则在插入或更新时调用这些函数，并且返回的值将用于列的值。下面说明了一个简单的“序列”，它将递增的计数器分配给主键列：'
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: It should be noted that for real “incrementing sequence” behavior, the built-in
    capabilities of the database should normally be used, which may include sequence
    objects or other autoincrementing capabilities. For primary key columns, SQLAlchemy
    will in most cases use these capabilities automatically. See the API documentation
    for [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    including the [`Column.autoincrement`](metadata.html#sqlalchemy.schema.Column.params.autoincrement
    "sqlalchemy.schema.Column") flag, as well as the section on [`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") later in this chapter for background on standard
    primary key generation techniques.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 应该注意，对于真正的“递增序列”行为，通常应使用数据库的内置功能，这可能包括序列对象或其他自动增量功能。对于主键列，SQLAlchemy 在大多数情况下将自动使用这些功能。请参阅关于
    [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    的 API 文档，包括 [`Column.autoincrement`](metadata.html#sqlalchemy.schema.Column.params.autoincrement
    "sqlalchemy.schema.Column") 标志，以及本章后面关于 [`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") 的部分，了解标准主键生成技术的背景。
- en: 'To illustrate onupdate, we assign the Python `datetime` function `now` to the
    [`Column.onupdate`](metadata.html#sqlalchemy.schema.Column.params.onupdate "sqlalchemy.schema.Column")
    attribute:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明 `onupdate`，我们将 Python 的 `datetime` 函数 `now` 赋值给 [`Column.onupdate`](metadata.html#sqlalchemy.schema.Column.params.onupdate
    "sqlalchemy.schema.Column") 属性：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: When an update statement executes and no value is passed for `last_updated`,
    the `datetime.datetime.now()` Python function is executed and its return value
    used as the value for `last_updated`. Notice that we provide `now` as the function
    itself without calling it (i.e. there are no parenthesis following) - SQLAlchemy
    will execute the function at the time the statement executes.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当执行更新语句并且没有为 `last_updated` 传递值时，将执行 `datetime.datetime.now()` Python 函数，并将其返回值用作
    `last_updated` 的值。请注意，我们将 `now` 提供为函数本身而不是调用它（即后面没有括号） - SQLAlchemy 将在语句执行时执行该函数。
- en: '### Context-Sensitive Default Functions'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '### 上下文敏感的默认函数'
- en: 'The Python functions used by [`Column.default`](metadata.html#sqlalchemy.schema.Column.params.default
    "sqlalchemy.schema.Column") and [`Column.onupdate`](metadata.html#sqlalchemy.schema.Column.params.onupdate
    "sqlalchemy.schema.Column") may also make use of the current statement’s context
    in order to determine a value. The context of a statement is an internal SQLAlchemy
    object which contains all information about the statement being executed, including
    its source expression, the parameters associated with it and the cursor. The typical
    use case for this context with regards to default generation is to have access
    to the other values being inserted or updated on the row. To access the context,
    provide a function that accepts a single `context` argument:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Column.default`](metadata.html#sqlalchemy.schema.Column.params.default "sqlalchemy.schema.Column")
    和 [`Column.onupdate`](metadata.html#sqlalchemy.schema.Column.params.onupdate "sqlalchemy.schema.Column")
    使用的 Python 函数也可以利用当前语句的上下文来确定一个值。语句的上下文是一个内部的 SQLAlchemy 对象，它包含有关正在执行的语句的所有信息，包括其源表达式、与之关联的参数和游标。与默认生成相关的上下文的典型用例是访问正在插入或更新的行上的其他值。要访问上下文，请提供一个接受单个
    `context` 参数的函数：'
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The above default generation function is applied so that it will execute for
    all INSERT and UPDATE statements where a value for `counter_plus_twelve` was otherwise
    not provided, and the value will be that of whatever value is present in the execution
    for the `counter` column, plus the number 12.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 上述默认生成函数适用于所有 INSERT 和 UPDATE 语句，其中未提供 `counter_plus_twelve` 的值，其值将是执行 `counter`
    列的值加上数字 12。
- en: For a single statement that is being executed using “executemany” style, e.g.
    with multiple parameter sets passed to [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute"), the user-defined function is called once
    for each set of parameters. For the use case of a multi-valued [`Insert`](dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") construct (e.g. with more than one VALUES
    clause set up via the [`Insert.values()`](dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") method), the user-defined function
    is also called once for each set of parameters.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 对于使用“executemany”样式执行的单个语句，例如传递给 [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") 的多个参数集，用户定义的函数将为每组参数集调用一次。对于多值 [`Insert`](dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") 构造的用例（例如通过 [`Insert.values()`](dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") 方法设置了多个 VALUES 子句），用户定义的函数也将为每组参数集调用一次。
- en: When the function is invoked, the special method [`DefaultExecutionContext.get_current_parameters()`](internals.html#sqlalchemy.engine.default.DefaultExecutionContext.get_current_parameters
    "sqlalchemy.engine.default.DefaultExecutionContext.get_current_parameters") is
    available from the context object (an subclass of [`DefaultExecutionContext`](internals.html#sqlalchemy.engine.default.DefaultExecutionContext
    "sqlalchemy.engine.default.DefaultExecutionContext")). This method returns a dictionary
    of column-key to values that represents the full set of values for the INSERT
    or UPDATE statement. In the case of a multi-valued INSERT construct, the subset
    of parameters that corresponds to the individual VALUES clause is isolated from
    the full parameter dictionary and returned alone.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用该函数时，上下文对象（[`DefaultExecutionContext`](internals.html#sqlalchemy.engine.default.DefaultExecutionContext
    "sqlalchemy.engine.default.DefaultExecutionContext") 的子类）中可用特殊方法 [`DefaultExecutionContext.get_current_parameters()`](internals.html#sqlalchemy.engine.default.DefaultExecutionContext.get_current_parameters
    "sqlalchemy.engine.default.DefaultExecutionContext.get_current_parameters")。该方法返回一个列键到值的字典，表示
    INSERT 或 UPDATE 语句的完整值集。在多值 INSERT 构造的情况下，与单个 VALUES 子句对应的参数子集被从完整参数字典中隔离并单独返回。
- en: 'New in version 1.2: Added [`DefaultExecutionContext.get_current_parameters()`](internals.html#sqlalchemy.engine.default.DefaultExecutionContext.get_current_parameters
    "sqlalchemy.engine.default.DefaultExecutionContext.get_current_parameters") method,
    which improves upon the still-present [`DefaultExecutionContext.current_parameters`](internals.html#sqlalchemy.engine.default.DefaultExecutionContext.current_parameters
    "sqlalchemy.engine.default.DefaultExecutionContext.current_parameters") attribute
    by offering the service of organizing multiple VALUES clauses into individual
    parameter dictionaries.  ## Client-Invoked SQL Expressions'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.2 中：添加了 [`DefaultExecutionContext.get_current_parameters()`](internals.html#sqlalchemy.engine.default.DefaultExecutionContext.get_current_parameters
    "sqlalchemy.engine.default.DefaultExecutionContext.get_current_parameters") 方法，它通过提供将多个
    VALUES 子句组织成单独参数字典的服务，改进了仍然存在的 [`DefaultExecutionContext.current_parameters`](internals.html#sqlalchemy.engine.default.DefaultExecutionContext.current_parameters
    "sqlalchemy.engine.default.DefaultExecutionContext.current_parameters") 属性。##
    客户端调用的 SQL 表达式
- en: 'The [`Column.default`](metadata.html#sqlalchemy.schema.Column.params.default
    "sqlalchemy.schema.Column") and [`Column.onupdate`](metadata.html#sqlalchemy.schema.Column.params.onupdate
    "sqlalchemy.schema.Column") keywords may also be passed SQL expressions, which
    are in most cases rendered inline within the INSERT or UPDATE statement:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Column.default`](metadata.html#sqlalchemy.schema.Column.params.default "sqlalchemy.schema.Column")
    和 [`Column.onupdate`](metadata.html#sqlalchemy.schema.Column.params.onupdate "sqlalchemy.schema.Column")
    关键字还可以传递 SQL 表达式，大多数情况下，这些表达式将在 INSERT 或 UPDATE 语句中直接呈现。'
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Above, the `create_date` column will be populated with the result of the `now()`
    SQL function (which, depending on backend, compiles into `NOW()` or `CURRENT_TIMESTAMP`
    in most cases) during an INSERT statement, and the `key` column with the result
    of a SELECT subquery from another table. The `last_modified` column will be populated
    with the value of the SQL `UTC_TIMESTAMP()` MySQL function when an UPDATE statement
    is emitted for this table.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，`create_date` 列将在插入语句中使用 `now()` SQL 函数的结果填充（根据后端的不同，在大多数情况下编译为 `NOW()`
    或 `CURRENT_TIMESTAMP`），而 `key` 列将使用另一个表的 SELECT 子查询的结果填充。当为该表发出更新语句时，`last_modified`
    列将填充为 SQL `UTC_TIMESTAMP()` MySQL 函数的值。
- en: Note
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: When using SQL functions with the `func` construct, we “call” the named function,
    e.g. with parenthesis as in `func.now()`. This differs from when we specify a
    Python callable as a default such as `datetime.datetime`, where we pass the function
    itself, but we don’t invoke it ourselves. In the case of a SQL function, invoking
    `func.now()` returns the SQL expression object that will render the “NOW” function
    into the SQL being emitted.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 `func` 构造与 SQL 函数时，我们“调用”命名函数，例如在 `func.now()` 中使用括号。这与当我们将 Python 可调用对象指定为默认值时不同，例如
    `datetime.datetime`，在这种情况下，我们传递函数本身，但我们自己不调用它。对于 SQL 函数，调用 `func.now()` 返回将“NOW”函数渲染到正在发射的
    SQL 中的 SQL 表达式对象。
- en: Default and update SQL expressions specified by [`Column.default`](metadata.html#sqlalchemy.schema.Column.params.default
    "sqlalchemy.schema.Column") and [`Column.onupdate`](metadata.html#sqlalchemy.schema.Column.params.onupdate
    "sqlalchemy.schema.Column") are invoked explicitly by SQLAlchemy when an INSERT
    or UPDATE statement occurs, typically rendered inline within the DML statement
    except in certain cases listed below. This is different than a “server side” default,
    which is part of the table’s DDL definition, e.g. as part of the “CREATE TABLE”
    statement, which are likely more common. For server side defaults, see the next
    section [Server-invoked DDL-Explicit Default Expressions](#server-defaults).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Column.default`](metadata.html#sqlalchemy.schema.Column.params.default "sqlalchemy.schema.Column")
    和 [`Column.onupdate`](metadata.html#sqlalchemy.schema.Column.params.onupdate "sqlalchemy.schema.Column")
    指定的默认值和更新 SQL 表达式在插入或更新语句发生时由 SQLAlchemy 明确调用，通常在 DML 语句中内联渲染，除了下面列出的特定情况。这与“服务器端”默认值不同，后者是表的
    DDL 定义的一部分，例如作为“CREATE TABLE”语句的一部分，这种情况可能更常见。对于服务器端默认值，请参阅下一节 [Server-invoked
    DDL-Explicit Default Expressions](#server-defaults)。'
- en: When a SQL expression indicated by [`Column.default`](metadata.html#sqlalchemy.schema.Column.params.default
    "sqlalchemy.schema.Column") is used with primary key columns, there are some cases
    where SQLAlchemy must “pre-execute” the default generation SQL function, meaning
    it is invoked in a separate SELECT statement, and the resulting value is passed
    as a parameter to the INSERT. This only occurs for primary key columns for an
    INSERT statement that is being asked to return this primary key value, where RETURNING
    or `cursor.lastrowid` may not be used. An [`Insert`](dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") construct that specifies the [`insert.inline`](dml.html#sqlalchemy.sql.expression.insert.params.inline
    "sqlalchemy.sql.expression.insert") flag will always render default expressions
    inline.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当通过 [`Column.default`](metadata.html#sqlalchemy.schema.Column.params.default
    "sqlalchemy.schema.Column") 指示的 SQL 表达式与主键列一起使用时，存在一些情况下，SQLAlchemy 必须“预执行”默认生成
    SQL 函数，这意味着它在单独的 SELECT 语句中被调用，并且生成的值作为参数传递给 INSERT。这仅发生在要求返回此主键值的 INSERT 语句的主键列上，其中不能使用
    RETURNING 或 `cursor.lastrowid`。指定了 [`insert.inline`](dml.html#sqlalchemy.sql.expression.insert.params.inline
    "sqlalchemy.sql.expression.insert") 标志的 [`Insert`](dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") 构造将始终内联渲染默认表达式。
- en: 'When the statement is executed with a single set of parameters (that is, it
    is not an “executemany” style execution), the returned [`CursorResult`](connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") will contain a collection accessible via [`CursorResult.postfetch_cols()`](connections.html#sqlalchemy.engine.CursorResult.postfetch_cols
    "sqlalchemy.engine.CursorResult.postfetch_cols") which contains a list of all
    [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    objects which had an inline-executed default. Similarly, all parameters which
    were bound to the statement, including all Python and SQL expressions which were
    pre-executed, are present in the [`CursorResult.last_inserted_params()`](connections.html#sqlalchemy.engine.CursorResult.last_inserted_params
    "sqlalchemy.engine.CursorResult.last_inserted_params") or [`CursorResult.last_updated_params()`](connections.html#sqlalchemy.engine.CursorResult.last_updated_params
    "sqlalchemy.engine.CursorResult.last_updated_params") collections on [`CursorResult`](connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult"). The [`CursorResult.inserted_primary_key`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key") collection contains a list
    of primary key values for the row inserted (a list so that single-column and composite-column
    primary keys are represented in the same format).  ## Server-invoked DDL-Explicit
    Default Expressions'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '当语句使用单个参数集执行时（即不是“executemany”样式的执行），返回的[`CursorResult`](connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult")将包含通过[`CursorResult.postfetch_cols()`](connections.html#sqlalchemy.engine.CursorResult.postfetch_cols
    "sqlalchemy.engine.CursorResult.postfetch_cols")可访问的集合，该集合包含所有具有内联执行默认值的[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象的列表。同样，语句绑定的所有参数，包括预先执行的所有Python和SQL表达式，都存在于[`CursorResult.last_inserted_params()`](connections.html#sqlalchemy.engine.CursorResult.last_inserted_params
    "sqlalchemy.engine.CursorResult.last_inserted_params")或[`CursorResult.last_updated_params()`](connections.html#sqlalchemy.engine.CursorResult.last_updated_params
    "sqlalchemy.engine.CursorResult.last_updated_params")集合中的[`CursorResult`](connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult")上。[`CursorResult.inserted_primary_key`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key")集合包含插入行的主键值列表（列表格式，以便单列和复合列主键以相同的格式表示）。  ##
    服务器调用的DDL-显式默认表达式'
- en: 'A variant on the SQL expression default is the [`Column.server_default`](metadata.html#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column"), which gets placed in the CREATE TABLE statement during
    a [`Table.create()`](metadata.html#sqlalchemy.schema.Table.create "sqlalchemy.schema.Table.create")
    operation:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: SQL表达式默认值的变体是[`Column.server_default`](metadata.html#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column")，在[`Table.create()`](metadata.html#sqlalchemy.schema.Table.create
    "sqlalchemy.schema.Table.create")操作期间会放置在CREATE TABLE语句中：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'A create call for the above table will produce:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 对于上述表格的创建调用将产生：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The above example illustrates the two typical use cases for [`Column.server_default`](metadata.html#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column"), that of the SQL function (SYSDATE in the above example)
    as well as a server-side constant value (the integer “0” in the above example).
    It is advisable to use the [`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct for any literal SQL values as opposed
    to passing the raw value, as SQLAlchemy does not typically perform any quoting
    or escaping on these values.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的示例说明了[`Column.server_default`](metadata.html#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column")的两种典型用例，即SQL函数（在上面的示例中为SYSDATE）以及服务器端常量值（在上面的示例中为整数“0”）。建议对任何文字SQL值使用[`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")构造，而不是传递原始值，因为SQLAlchemy通常不会对这些值执行任何引号添加或转义。
- en: 'Like client-generated expressions, [`Column.server_default`](metadata.html#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column") can accommodate SQL expressions in general, however
    it is expected that these will usually be simple functions and expressions, and
    not the more complex cases like an embedded SELECT.  ## Marking Implicitly Generated
    Values, timestamps, and Triggered Columns'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '与客户端生成的表达式类似，[`Column.server_default`](metadata.html#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column")可以适应一般的SQL表达式，但通常预期这些将是简单的函数和表达式，而不是像嵌入式SELECT这样更复杂的情况。  ##
    标记隐式生成的值、时间戳和触发列'
- en: 'Columns which generate a new value on INSERT or UPDATE based on other server-side
    database mechanisms, such as database-specific auto-generating behaviors such
    as seen with TIMESTAMP columns on some platforms, as well as custom triggers that
    invoke upon INSERT or UPDATE to generate a new value, may be called out using
    [`FetchedValue`](#sqlalchemy.schema.FetchedValue "sqlalchemy.schema.FetchedValue")
    as a marker:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 列在插入或更新时基于其他服务器端数据库机制生成新值，例如某些平台上的时间戳列所见的数据库特定的自动生成行为，以及在插入或更新时调用的自定义触发器生成新值，可以使用[`FetchedValue`](#sqlalchemy.schema.FetchedValue
    "sqlalchemy.schema.FetchedValue")作为标记：
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The [`FetchedValue`](#sqlalchemy.schema.FetchedValue "sqlalchemy.schema.FetchedValue")
    indicator does not affect the rendered DDL for the CREATE TABLE. Instead, it marks
    the column as one that will have a new value populated by the database during
    the process of an INSERT or UPDATE statement, and for supporting databases may
    be used to indicate that the column should be part of a RETURNING or OUTPUT clause
    for the statement. Tools such as the SQLAlchemy ORM then make use of this marker
    in order to know how to get at the value of the column after such an operation.
    In particular, the `ValuesBase.return_defaults()` method can be used with an [`Insert`](dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") or [`Update`](dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") construct to indicate that these values should
    be returned.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FetchedValue`](#sqlalchemy.schema.FetchedValue "sqlalchemy.schema.FetchedValue")
    指示符不会影响 CREATE TABLE 的渲染 DDL。相反，它标记列将在 INSERT 或 UPDATE 语句的过程中由数据库填充新值，并且对于支持的数据库，可以用于指示该列应该是
    RETURNING 或 OUTPUT 子句的一部分。诸如 SQLAlchemy ORM 之类的工具随后利用此标记以了解如何在此类操作之后获取列的值。特别是，`ValuesBase.return_defaults()`
    方法可与[`Insert`](dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    或[`Update`](dml.html#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    构造一起使用，以指示应返回这些值。'
- en: For details on using [`FetchedValue`](#sqlalchemy.schema.FetchedValue "sqlalchemy.schema.FetchedValue")
    with the ORM, see [Fetching Server-Generated Defaults](../orm/persistence_techniques.html#orm-server-defaults).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 有关在 ORM 中使用[`FetchedValue`](#sqlalchemy.schema.FetchedValue "sqlalchemy.schema.FetchedValue")
    的详细信息，请参阅[获取服务器生成的默认值](../orm/persistence_techniques.html#orm-server-defaults)。
- en: Warning
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: The [`Column.server_onupdate`](metadata.html#sqlalchemy.schema.Column.params.server_onupdate
    "sqlalchemy.schema.Column") directive **does not** currently produce MySQL’s “ON
    UPDATE CURRENT_TIMESTAMP()” clause. See [Rendering ON UPDATE CURRENT TIMESTAMP
    for MySQL / MariaDB’s explicit_defaults_for_timestamp](../dialects/mysql.html#mysql-timestamp-onupdate)
    for background on how to produce this clause.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Column.server_onupdate`](metadata.html#sqlalchemy.schema.Column.params.server_onupdate
    "sqlalchemy.schema.Column") 指令**目前不会**生成 MySQL 的“ON UPDATE CURRENT_TIMESTAMP()”子句。请参阅[为
    MySQL / MariaDB 的 explicit_defaults_for_timestamp 渲染 ON UPDATE CURRENT TIMESTAMP](../dialects/mysql.html#mysql-timestamp-onupdate)
    了解如何生成此子句的背景信息。'
- en: See also
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Fetching Server-Generated Defaults](../orm/persistence_techniques.html#orm-server-defaults)  ##
    Defining Sequences'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[获取服务器生成的默认值](../orm/persistence_techniques.html#orm-server-defaults)  ## 定义序列'
- en: SQLAlchemy represents database sequences using the [`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") object, which is considered to be a special case
    of “column default”. It only has an effect on databases which have explicit support
    for sequences, which among SQLAlchemy’s included dialects includes PostgreSQL,
    Oracle, MS SQL Server, and MariaDB. The [`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") object is otherwise ignored.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 使用[`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    对象表示数据库序列，被视为“列默认值”的特例。它仅对显式支持序列的数据库产生影响，其中包括 PostgreSQL、Oracle、MS SQL Server
    和 MariaDB 在内的 SQLAlchemy 包含的方言。否则，[`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    对象将被忽略。
- en: Tip
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: In newer database engines, the [`Identity`](#sqlalchemy.schema.Identity "sqlalchemy.schema.Identity")
    construct should likely be preferred vs. [`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") for generation of integer primary key values. See
    the section [Identity Columns (GENERATED { ALWAYS | BY DEFAULT } AS IDENTITY)](#identity-ddl)
    for background on this construct.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在较新的数据库引擎中，应该优先使用[`Identity`](#sqlalchemy.schema.Identity "sqlalchemy.schema.Identity")
    构造而不是[`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence") 生成整数主键值。请参阅[Identity
    Columns (GENERATED { ALWAYS | BY DEFAULT } AS IDENTITY)](#identity-ddl) 了解此构造的背景信息。
- en: 'The [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    may be placed on any column as a “default” generator to be used during INSERT
    operations, and can also be configured to fire off during UPDATE operations if
    desired. It is most commonly used in conjunction with a single integer primary
    key column:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")可以放置在任何列上作为“默认”生成器，在INSERT操作期间使用，并且如果需要，还可以配置为在UPDATE操作期间触发。它最常与单个整数主键列一起使用：'
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Where above, the table `cartitems` is associated with a sequence named `cart_id_seq`.
    Emitting [`MetaData.create_all()`](metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") for the above table will include:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述情况中，表`cartitems`与名为`cart_id_seq`的序列相关联。对上述表执行[`MetaData.create_all()`](metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all")将包括：
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Tip
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: 'When using tables with explicit schema names (detailed at [Specifying the Schema
    Name](metadata.html#schema-table-schema-name)), the configured schema of the [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") is **not** automatically shared by an embedded [`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence"), instead, specify [`Sequence.schema`](#sqlalchemy.schema.Sequence.params.schema
    "sqlalchemy.schema.Sequence"):'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用具有显式模式名称的表时（详见[指定模式名称](metadata.html#schema-table-schema-name)），[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")的配置模式**不会**自动与嵌入的[`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")共享，而是需要指定[`Sequence.schema`](#sqlalchemy.schema.Sequence.params.schema
    "sqlalchemy.schema.Sequence")：
- en: '[PRE11]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence") may
    also be made to automatically make use of the [`MetaData.schema`](metadata.html#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData") setting on the [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") in use; see [Associating a Sequence with the MetaData](#sequence-metadata)
    for background.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")还可以自动使用正在使用的[`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")中的[`MetaData.schema`](metadata.html#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData")设置；有关背景，请参阅[将序列与 MetaData 关联](#sequence-metadata)。'
- en: 'When [`Insert`](dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    DML constructs are invoked against the `cartitems` table, without an explicit
    value passed for the `cart_id` column, the `cart_id_seq` sequence will be used
    to generate a value on participating backends. Typically, the sequence function
    is embedded in the INSERT statement, which is combined with RETURNING so that
    the newly generated value can be returned to the Python process:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 当针对`cartitems`表调用[`Insert`](dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    DML 构造时，如果未传递`cart_id`列的显式值，则将使用`cart_id_seq`序列在参与的后端生成值。通常，序列函数被嵌入到INSERT语句中，与RETURNING结合使用，以便将新生成的值返回给Python进程：
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: When using [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") to invoke an [`Insert`](dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") construct, newly generated primary key identifiers,
    including but not limited to those generated using [`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence"), are available from the [`CursorResult`](connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") construct using the [`CursorResult.inserted_primary_key`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key") attribute.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用[`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")调用[`Insert`](dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert")构造时，包括但不限于使用[`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")生成的新生成的主键标识符，可通过[`CursorResult`](connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult")构造的[`CursorResult.inserted_primary_key`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key")属性获取。
- en: When the [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    is associated with a [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    as its **Python-side** default generator, the [`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") will also be subject to “CREATE SEQUENCE” and “DROP
    SEQUENCE” DDL when similar DDL is emitted for the owning [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), such as when using [`MetaData.create_all()`](metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") to generate DDL for a series of tables.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当[`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")与[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")作为其**Python端**默认生成器关联时，[`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")也将受到“CREATE SEQUENCE”和“DROP SEQUENCE” DDL的影响，当为拥有的[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")发出类似DDL时，比如使用[`MetaData.create_all()`](metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all")为一系列表生成DDL时。
- en: The [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence") may
    also be associated with a [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") construct directly. This allows the [`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") to be used in more than one [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") at a time and also allows the [`MetaData.schema`](metadata.html#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData") parameter to be inherited. See the section [Associating
    a Sequence with the MetaData](#sequence-metadata) for background.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")也可以直接与[`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")构造关联。这允许[`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")同时用于多个[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")，并且还允许继承[`MetaData.schema`](metadata.html#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData")参数。请参见[将序列与MetaData关联](#sequence-metadata)部分了解背景信息。'
- en: Associating a Sequence on a SERIAL column
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在SERIAL列上关联序列
- en: 'PostgreSQL’s SERIAL datatype is an auto-incrementing type that implies the
    implicit creation of a PostgreSQL sequence when CREATE TABLE is emitted. The [`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") construct, when indicated for a [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"), may indicate that it should not be used in this specific
    case by specifying a value of `True` for the [`Sequence.optional`](#sqlalchemy.schema.Sequence.params.optional
    "sqlalchemy.schema.Sequence") parameter. This allows the given [`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") to be used for backends that have no alternative
    primary key generation system but to ignore it for backends such as PostgreSQL
    which will automatically generate a sequence for a particular column:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL的SERIAL数据类型是一个自增类型，意味着在发出CREATE TABLE时隐式创建一个PostgreSQL序列。当为[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")指定[`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")构造时，可以通过为[`Sequence.optional`](#sqlalchemy.schema.Sequence.params.optional
    "sqlalchemy.schema.Sequence")参数指定`True`的值来指示在这种特定情况下不应使用它。这允许给定的[`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")用于没有其他主键生成系统的后端，但在后端（如PostgreSQL）中会自动生成特定列的序列时忽略它：
- en: '[PRE13]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In the above example, `CREATE TABLE` for PostgreSQL will make use of the `SERIAL`
    datatype for the `cart_id` column, and the `cart_id_seq` sequence will be ignored.
    However on Oracle, the `cart_id_seq` sequence will be created explicitly.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，对于PostgreSQL的`CREATE TABLE`将使用`SERIAL`数据类型来创建`cart_id`列，而`cart_id_seq`序列将被忽略。然而在Oracle上，`cart_id_seq`序列将被显式创建。
- en: Tip
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: This particular interaction of SERIAL and SEQUENCE is fairly legacy, and as
    in other cases, using [`Identity`](#sqlalchemy.schema.Identity "sqlalchemy.schema.Identity")
    instead will simplify the operation to simply use `IDENTITY` on all supported
    backends.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: SERIAL和SEQUENCE的这种特定交互相当传统，就像其他情况一样，使用[`Identity`](#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity")将简化操作，只需在所有支持的后端上使用`IDENTITY`即可。
- en: Executing a Sequence Standalone
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 单独执行序列
- en: 'A SEQUENCE is a first class schema object in SQL and can be used to generate
    values independently in the database. If you have a [`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") object, it can be invoked with its “next value”
    instruction by passing it directly to a SQL execution method:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: SEQUENCE是SQL中的一类一流模式对象，可用于独立生成数据库中的值。如果有一个[`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")对象，可以通过直接将其传递给SQL执行方法来调用其“next value”指令：
- en: '[PRE14]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In order to embed the “next value” function of a [`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") inside of a SQL statement like a SELECT or INSERT,
    use the [`Sequence.next_value()`](#sqlalchemy.schema.Sequence.next_value "sqlalchemy.schema.Sequence.next_value")
    method, which will render at statement compilation time a SQL function that is
    appropriate for the target backend:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将[`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")的“next
    value”函数嵌入SQL语句（如SELECT或INSERT）中，使用[`Sequence.next_value()`](#sqlalchemy.schema.Sequence.next_value
    "sqlalchemy.schema.Sequence.next_value")方法，在语句编译时会生成适用于目标后端的SQL函数：
- en: '[PRE15]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '### Associating a Sequence with the MetaData'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '### 将序列与 MetaData 关联'
- en: 'For a [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    that is to be associated with arbitrary [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects, the [`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") may be associated with a particular [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData"), using the [`Sequence.metadata`](#sqlalchemy.schema.Sequence.params.metadata
    "sqlalchemy.schema.Sequence") parameter:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 对于要与任意[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象关联的[`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")，可以使用[`Sequence.metadata`](#sqlalchemy.schema.Sequence.params.metadata
    "sqlalchemy.schema.Sequence")参数将[`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")与特定的[`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")关联：
- en: '[PRE16]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Such a sequence can then be associated with columns in the usual way:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这样的序列可以按照通常的方式与列关联：
- en: '[PRE17]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In the above example, the [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    object is treated as an independent schema construct that can exist on its own
    or be shared among tables.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，[`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")对象被视为独立的模式构造，可以独立存在或在表之间共享。
- en: 'Explicitly associating the [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    with [`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    allows for the following behaviors:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 明确将[`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")与[`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")关联允许以下行为：
- en: The [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence") will
    inherit the [`MetaData.schema`](metadata.html#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData") parameter specified to the target [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData"), which affects the production of CREATE / DROP DDL
    as well as how the [`Sequence.next_value()`](#sqlalchemy.schema.Sequence.next_value
    "sqlalchemy.schema.Sequence.next_value") function is rendered in SQL statements.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")将继承目标[`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")指定的[`MetaData.schema`](metadata.html#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData")参数，这会影响CREATE / DROP DDL的生成以及[`Sequence.next_value()`](#sqlalchemy.schema.Sequence.next_value
    "sqlalchemy.schema.Sequence.next_value")函数在SQL语句中的呈现方式。'
- en: The [`MetaData.create_all()`](metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") and [`MetaData.drop_all()`](metadata.html#sqlalchemy.schema.MetaData.drop_all
    "sqlalchemy.schema.MetaData.drop_all") methods will emit CREATE / DROP for this
    [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence"), even if
    the [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence") is
    not associated with any [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    / [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    that’s a member of this [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData").
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`MetaData.create_all()`](metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") 和 [`MetaData.drop_all()`](metadata.html#sqlalchemy.schema.MetaData.drop_all
    "sqlalchemy.schema.MetaData.drop_all") 方法将发出 CREATE / DROP 命令，即使此 [`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") 没有与任何属于此 [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") 的 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") / [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 关联。'
- en: Associating a Sequence as the Server Side Default
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将序列关联为服务器端默认值
- en: Note
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The following technique is known to work only with the PostgreSQL database.
    It does not work with Oracle.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 以下技术仅已知适用于 PostgreSQL 数据库。它不适用于 Oracle。
- en: 'The preceding sections illustrate how to associate a [`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") with a [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") as the **Python side default generator**:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 上文说明了如何将 [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    关联到 [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    作为 **Python 端的默认生成器**：
- en: '[PRE18]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In the above case, the [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    will automatically be subject to CREATE SEQUENCE / DROP SEQUENCE DDL when the
    related [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    is subject to CREATE / DROP. However, the sequence will **not** be present as
    the server-side default for the column when CREATE TABLE is emitted.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述情况下，当相关的 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    被创建 / 删除时，[`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    将自动受到 CREATE SEQUENCE / DROP SEQUENCE DDL 的影响。然而，当发出 CREATE TABLE 时，该序列不会作为列的服务器端默认值存在。
- en: 'If we want the sequence to be used as a server-side default, meaning it takes
    place even if we emit INSERT commands to the table from the SQL command line,
    we can use the [`Column.server_default`](metadata.html#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column") parameter in conjunction with the value-generation
    function of the sequence, available from the [`Sequence.next_value()`](#sqlalchemy.schema.Sequence.next_value
    "sqlalchemy.schema.Sequence.next_value") method. Below we illustrate the same
    [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence") being associated
    with the [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    both as the Python-side default generator as well as the server-side default generator:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们希望序列被用作服务器端默认值，即使我们从 SQL 命令行向表发出 INSERT 命令，它也会生效，我们可以使用 [`Column.server_default`](metadata.html#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column") 参数与序列的值生成函数一起使用，该函数可从 [`Sequence.next_value()`](#sqlalchemy.schema.Sequence.next_value
    "sqlalchemy.schema.Sequence.next_value") 方法中获得。下面我们展示了相同的 [`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") 与 [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 关联，既作为 Python 端的默认生成器，也作为服务器端的默认生成器：
- en: '[PRE19]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'or with the ORM:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 或者使用 ORM：
- en: '[PRE20]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'When the “CREATE TABLE” statement is emitted, on PostgreSQL it would be emitted
    as:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 当发出“CREATE TABLE”语句时，在 PostgreSQL 上，它将被表述为：
- en: '[PRE21]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Placement of the [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    in both the Python-side and server-side default generation contexts ensures that
    the “primary key fetch” logic works in all cases. Typically, sequence-enabled
    databases also support RETURNING for INSERT statements, which is used automatically
    by SQLAlchemy when emitting this statement. However if RETURNING is not used for
    a particular insert, then SQLAlchemy would prefer to “pre-execute” the sequence
    outside of the INSERT statement itself, which only works if the sequence is included
    as the Python-side default generator function.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 端和服务器端默认生成上下文中放置[`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")可确保“主键获取”逻辑在所有情况下都能正常工作。通常，支持序列的数据库也支持
    INSERT 语句的 RETURNING，当发出此语句时，SQLAlchemy 会自动使用。但是，如果对于特定的插入操作不使用 RETURNING，则 SQLAlchemy
    更倾向于在 INSERT 语句之外“预执行”序列，这仅在将序列包含为 Python 端默认生成函数时才有效。
- en: The example also associates the [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    with the enclosing [`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    directly, which again ensures that the [`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") is fully associated with the parameters of the [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") collection including the default schema, if any.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 该示例还直接将[`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")与封闭的[`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")关联，这再次确保[`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")与[`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")集合的参数完全关联，包括默认模式（如果有）。
- en: See also
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Sequences/SERIAL/IDENTITY](../dialects/postgresql.html#postgresql-sequences)
    - in the PostgreSQL dialect documentation'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '[Sequences/SERIAL/IDENTITY](../dialects/postgresql.html#postgresql-sequences)
    - 在 PostgreSQL 方言文档中'
- en: '[RETURNING Support](../dialects/oracle.html#oracle-returning) - in the Oracle
    dialect documentation  ## Computed Columns (GENERATED ALWAYS AS)'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '[RETURNING 支持](../dialects/oracle.html#oracle-returning) - 在 Oracle 方言文档中 ##
    计算列 (GENERATED ALWAYS AS)'
- en: New in version 1.3.11.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.3.11 中的新功能。
- en: The [`Computed`](#sqlalchemy.schema.Computed "sqlalchemy.schema.Computed") construct
    allows a [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    to be declared in DDL as a “GENERATED ALWAYS AS” column, that is, one which has
    a value that is computed by the database server. The construct accepts a SQL expression
    typically declared textually using a string or the [`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct, in a similar manner as that of [`CheckConstraint`](constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint"). The SQL expression is then interpreted by
    the database server in order to determine the value for the column within a row.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Computed`](#sqlalchemy.schema.Computed "sqlalchemy.schema.Computed") 构造允许在
    DDL 中声明一个“GENERATED ALWAYS AS”列的[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")，即一个由数据库服务器计算值的列。该构造接受一个 SQL 表达式，通常使用字符串或[`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")构造进行文本声明，类似于[`CheckConstraint`](constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint")的方式。然后数据库服务器解释 SQL 表达式以确定行内列的值。'
- en: 'Example:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE22]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The DDL for the `square` table when run on a PostgreSQL 12 backend will look
    like:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在 PostgreSQL 12 后端运行时，`square` 表的 DDL 如下所示：
- en: '[PRE23]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Whether the value is persisted upon INSERT and UPDATE, or if it is calculated
    on fetch, is an implementation detail of the database; the former is known as
    “stored” and the latter is known as “virtual”. Some database implementations support
    both, but some only support one or the other. The optional [`Computed.persisted`](#sqlalchemy.schema.Computed.params.persisted
    "sqlalchemy.schema.Computed") flag may be specified as `True` or `False` to indicate
    if the “STORED” or “VIRTUAL” keyword should be rendered in DDL, however this will
    raise an error if the keyword is not supported by the target backend; leaving
    it unset will use a working default for the target backend.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 值在 INSERT 和 UPDATE 时是否持久化，或者在获取时是否计算，是数据库的实现细节；前者称为“stored”，后者称为“virtual”。一些数据库实现支持两者，但有些只支持其中一个。可以指定可选的[`Computed.persisted`](#sqlalchemy.schema.Computed.params.persisted
    "sqlalchemy.schema.Computed")标志为 `True` 或 `False`，以指示在 DDL 中是否应该呈现“STORED”或“VIRTUAL”关键字，但是如果目标后端不支持该关键字，则会引发错误；如果不设置，将为目标后端使用一个有效的默认值。
- en: The [`Computed`](#sqlalchemy.schema.Computed "sqlalchemy.schema.Computed") construct
    is a subclass of the [`FetchedValue`](#sqlalchemy.schema.FetchedValue "sqlalchemy.schema.FetchedValue")
    object, and will set itself up as both the “server default” and “server onupdate”
    generator for the target [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column"),
    meaning it will be treated as a default generating column when INSERT and UPDATE
    statements are generated, as well as that it will be fetched as a generating column
    when using the ORM. This includes that it will be part of the RETURNING clause
    of the database for databases which support RETURNING and the generated values
    are to be eagerly fetched.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Computed`](#sqlalchemy.schema.Computed "sqlalchemy.schema.Computed") 构造是
    [`FetchedValue`](#sqlalchemy.schema.FetchedValue "sqlalchemy.schema.FetchedValue")
    对象的子类，将自己设置为目标 [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    的“服务器默认值”和“服务器更新”生成器，这意味着在生成 INSERT 和 UPDATE 语句时，它将被视为默认生成列，并且在使用 ORM 时将被作为生成列获取。这包括在数据库支持
    RETURNING 且要急切地获取生成值时，它将成为数据库的 RETURNING 子句的一部分。'
- en: Note
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: A [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    that is defined with the [`Computed`](#sqlalchemy.schema.Computed "sqlalchemy.schema.Computed")
    construct may not store any value outside of that which the server applies to
    it; SQLAlchemy’s behavior when a value is passed for such a column to be written
    in INSERT or UPDATE is currently that the value will be ignored.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [`Computed`](#sqlalchemy.schema.Computed "sqlalchemy.schema.Computed") 构造定义的
    [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    可能不会存储除服务器应用于其外的任何值； 当为此类列传递值以在 INSERT 或 UPDATE 中写入时，SQLAlchemy 的行为目前是忽略该值。
- en: '“GENERATED ALWAYS AS” is currently known to be supported by:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: “GENERATED ALWAYS AS” 目前已知受到支持的数据库有：
- en: MySQL version 5.7 and onwards
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL 版本 5.7 及更高版本
- en: MariaDB 10.x series and onwards
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MariaDB 10.x 系列及更高版本
- en: PostgreSQL as of version 12
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PostgreSQL 版本 12 及更高版本
- en: Oracle - with the caveat that RETURNING does not work correctly with UPDATE
    (a warning will be emitted to this effect when the UPDATE..RETURNING that includes
    a computed column is rendered)
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Oracle - 值得注意的是，RETURNING 在 UPDATE 中不正确地工作（当包含计算列的 UPDATE..RETURNING 被渲染时，会发出此警告）
- en: Microsoft SQL Server
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Microsoft SQL Server
- en: SQLite as of version 3.31
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQLite 版本 3.31
- en: When [`Computed`](#sqlalchemy.schema.Computed "sqlalchemy.schema.Computed")
    is used with an unsupported backend, if the target dialect does not support it,
    a [`CompileError`](exceptions.html#sqlalchemy.exc.CompileError "sqlalchemy.exc.CompileError")
    is raised when attempting to render the construct. Otherwise, if the dialect supports
    it but the particular database server version in use does not, then a subclass
    of [`DBAPIError`](exceptions.html#sqlalchemy.exc.DBAPIError "sqlalchemy.exc.DBAPIError"),
    usually [`OperationalError`](exceptions.html#sqlalchemy.exc.OperationalError "sqlalchemy.exc.OperationalError"),
    is raised when the DDL is emitted to the database.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 当 [`Computed`](#sqlalchemy.schema.Computed "sqlalchemy.schema.Computed") 与不受支持的后端一起使用时，如果目标方言不支持它，则在尝试渲染构造时会引发
    [`CompileError`](exceptions.html#sqlalchemy.exc.CompileError "sqlalchemy.exc.CompileError")。否则，如果方言支持它但正在使用的特定数据库服务器版本不支持它，则在将
    DDL 发送到数据库时会引发 [`DBAPIError`](exceptions.html#sqlalchemy.exc.DBAPIError "sqlalchemy.exc.DBAPIError")
    的子类，通常是 [`OperationalError`](exceptions.html#sqlalchemy.exc.OperationalError "sqlalchemy.exc.OperationalError")。
- en: See also
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Computed`](#sqlalchemy.schema.Computed "sqlalchemy.schema.Computed")  ##
    Identity Columns (GENERATED { ALWAYS | BY DEFAULT } AS IDENTITY)'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Computed`](#sqlalchemy.schema.Computed "sqlalchemy.schema.Computed")  ##
    标识列（GENERATED { ALWAYS | BY DEFAULT } AS IDENTITY）'
- en: New in version 1.4.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中新增。
- en: The [`Identity`](#sqlalchemy.schema.Identity "sqlalchemy.schema.Identity") construct
    allows a [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    to be declared as an identity column and rendered in DDL as “GENERATED { ALWAYS
    | BY DEFAULT } AS IDENTITY”. An identity column has its value automatically generated
    by the database server using an incrementing (or decrementing) sequence. The construct
    shares most of its option to control the database behaviour with [`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence").
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Identity`](#sqlalchemy.schema.Identity "sqlalchemy.schema.Identity") 构造允许将
    [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    声明为标识列，并在 DDL 中渲染为 “GENERATED { ALWAYS | BY DEFAULT } AS IDENTITY”。标识列的值是由数据库服务器自动使用递增（或递减）序列生成的。该构造与
    [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence") 共享控制数据库行为的大多数选项。'
- en: 'Example:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE24]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The DDL for the `data` table when run on a PostgreSQL 12 backend will look
    like:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在 PostgreSQL 12 后端运行时，`data` 表的 DDL 如下所示：
- en: '[PRE25]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The database will generate a value for the `id` column upon insert, starting
    from `42`, if the statement did not already contain a value for the `id` column.
    An identity column can also require that the database generates the value of the
    column, ignoring the value passed with the statement or raising an error, depending
    on the backend. To activate this mode, set the parameter [`Identity.always`](#sqlalchemy.schema.Identity.params.always
    "sqlalchemy.schema.Identity") to `True` in the [`Identity`](#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity") construct. Updating the previous example to include
    this parameter will generate the following DDL:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库将在插入时为 `id` 列生成值，从 `42` 开始，如果语句中尚未包含 `id` 列的值。标识列还可以要求数据库生成列的值，忽略语句中传递的值或引发错误，具体取决于后端。要激活此模式，请在
    [`Identity`](#sqlalchemy.schema.Identity "sqlalchemy.schema.Identity") 构造中将参数
    [`Identity.always`](#sqlalchemy.schema.Identity.params.always "sqlalchemy.schema.Identity")
    设置为 `True`。更新前面的示例以包含此参数将生成以下 DDL：
- en: '[PRE26]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The [`Identity`](#sqlalchemy.schema.Identity "sqlalchemy.schema.Identity") construct
    is a subclass of the [`FetchedValue`](#sqlalchemy.schema.FetchedValue "sqlalchemy.schema.FetchedValue")
    object, and will set itself up as the “server default” generator for the target
    [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column"),
    meaning it will be treated as a default generating column when INSERT statements
    are generated, as well as that it will be fetched as a generating column when
    using the ORM. This includes that it will be part of the RETURNING clause of the
    database for databases which support RETURNING and the generated values are to
    be eagerly fetched.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Identity`](#sqlalchemy.schema.Identity "sqlalchemy.schema.Identity") 构造是
    [`FetchedValue`](#sqlalchemy.schema.FetchedValue "sqlalchemy.schema.FetchedValue")
    对象的子类，并且将自身设置为目标 [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    的“服务器默认”生成器，这意味着当生成 INSERT 语句时，它将被视为默认生成列，以及在使用 ORM 时，它将被作为生成列提取。这包括对于支持 RETURNING
    的数据库，它将成为 RETURNING 子句的一部分，并且生成的值将被急切地提取。'
- en: 'The [`Identity`](#sqlalchemy.schema.Identity "sqlalchemy.schema.Identity")
    construct is currently known to be supported by:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 目前已知支持 [`Identity`](#sqlalchemy.schema.Identity "sqlalchemy.schema.Identity")
    构造的数据库有：
- en: PostgreSQL as of version 10.
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PostgreSQL 版本为 10。
- en: Oracle as of version 12\. It also supports passing `always=None` to enable the
    default generated mode and the parameter `on_null=True` to specify “ON NULL” in
    conjunction with a “BY DEFAULT” identity column.
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Oracle 版本为 12。 还支持传递 `always=None` 以启用默认生成模式，并传递参数 `on_null=True` 以指定在使用 “BY
    DEFAULT” 标识列时“ON NULL”。
- en: Microsoft SQL Server. MSSQL uses a custom syntax that only supports the `start`
    and `increment` parameters, and ignores all other.
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Microsoft SQL Server。 MSSQL 使用自定义语法，仅支持 `start` 和 `increment` 参数，并忽略所有其他参数。
- en: When [`Identity`](#sqlalchemy.schema.Identity "sqlalchemy.schema.Identity")
    is used with an unsupported backend, it is ignored, and the default SQLAlchemy
    logic for autoincrementing columns is used.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 当与不受支持的后端一起使用时，[`Identity`](#sqlalchemy.schema.Identity "sqlalchemy.schema.Identity")
    将被忽略，并且将使用默认的 SQLAlchemy 逻辑自动递增列。
- en: An error is raised when a [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") specifies both an [`Identity`](#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity") and also sets [`Column.autoincrement`](metadata.html#sqlalchemy.schema.Column.params.autoincrement
    "sqlalchemy.schema.Column") to `False`.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 当 [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    同时指定 [`Identity`](#sqlalchemy.schema.Identity "sqlalchemy.schema.Identity") 并将
    [`Column.autoincrement`](metadata.html#sqlalchemy.schema.Column.params.autoincrement
    "sqlalchemy.schema.Column") 设置为 `False` 时，会引发错误。
- en: See also
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Identity`](#sqlalchemy.schema.Identity "sqlalchemy.schema.Identity")'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Identity`](#sqlalchemy.schema.Identity "sqlalchemy.schema.Identity")'
- en: Default Objects API
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 默认对象 API
- en: '| Object Name | Description |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [ColumnDefault](#sqlalchemy.schema.ColumnDefault) | A plain default value
    on a column. |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| [ColumnDefault](#sqlalchemy.schema.ColumnDefault) | 列的普通默认值。 |'
- en: '| [Computed](#sqlalchemy.schema.Computed) | Defines a generated column, i.e.
    “GENERATED ALWAYS AS” syntax. |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| [Computed](#sqlalchemy.schema.Computed) | 定义生成列，即“GENERATED ALWAYS AS”语法。
    |'
- en: '| [DefaultClause](#sqlalchemy.schema.DefaultClause) | A DDL-specified DEFAULT
    column value. |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| [DefaultClause](#sqlalchemy.schema.DefaultClause) | 由 DDL 指定的默认列值。 |'
- en: '| [DefaultGenerator](#sqlalchemy.schema.DefaultGenerator) | Base class for
    column *default* values. |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| [DefaultGenerator](#sqlalchemy.schema.DefaultGenerator) | 列 *默认* 值的基类。 |'
- en: '| [FetchedValue](#sqlalchemy.schema.FetchedValue) | A marker for a transparent
    database-side default. |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| [FetchedValue](#sqlalchemy.schema.FetchedValue) | 用于透明数据库端默认值的标记。 |'
- en: '| [Identity](#sqlalchemy.schema.Identity) | Defines an identity column, i.e.
    “GENERATED { ALWAYS &#124; BY DEFAULT } AS IDENTITY” syntax. |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| [Identity](#sqlalchemy.schema.Identity) | 定义标识列，即“GENERATED { ALWAYS &#124;
    BY DEFAULT } AS IDENTITY”语法。 |'
- en: '| [Sequence](#sqlalchemy.schema.Sequence) | Represents a named database sequence.
    |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| [Sequence](#sqlalchemy.schema.Sequence) | 表示命名的数据库序列。 |'
- en: '[PRE27]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Defines a generated column, i.e. “GENERATED ALWAYS AS” syntax.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 定义一个生成列，即“GENERATED ALWAYS AS”语法。
- en: 'The [`Computed`](#sqlalchemy.schema.Computed "sqlalchemy.schema.Computed")
    construct is an inline construct added to the argument list of a [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") object:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Computed`](#sqlalchemy.schema.Computed "sqlalchemy.schema.Computed") 构造是一个内联构造，添加到
    [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    对象的参数列表中：'
- en: '[PRE28]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: See the linked documentation below for complete details.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 详细信息请参阅下面链接的文档。
- en: New in version 1.3.11.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 新于版本1.3.11。
- en: See also
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[Computed Columns (GENERATED ALWAYS AS)](#computed-ddl)'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '[计算列（GENERATED ALWAYS AS）](#computed-ddl)'
- en: '**Members**'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.schema.Computed.__init__), [copy()](#sqlalchemy.schema.Computed.copy)'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.schema.Computed.__init__), [copy()](#sqlalchemy.schema.Computed.copy)'
- en: '**Class signature**'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.Computed`](#sqlalchemy.schema.Computed "sqlalchemy.schema.Computed")
    ([`sqlalchemy.schema.FetchedValue`](#sqlalchemy.schema.FetchedValue "sqlalchemy.schema.FetchedValue"),
    [`sqlalchemy.schema.SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem"))
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.schema.Computed`](#sqlalchemy.schema.Computed "sqlalchemy.schema.Computed")（[`sqlalchemy.schema.FetchedValue`](#sqlalchemy.schema.FetchedValue
    "sqlalchemy.schema.FetchedValue")，[`sqlalchemy.schema.SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem")）
- en: '[PRE29]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Construct a GENERATED ALWAYS AS DDL construct to accompany a [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column").
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 GENERATED ALWAYS AS DDL 构造，以配合 [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")。
- en: 'Parameters:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`sqltext` –'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sqltext` –'
- en: A string containing the column generation expression, which will be used verbatim,
    or a SQL expression construct, such as a [`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") object. If given as a string, the object is
    converted to a [`text()`](sqlelement.html#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")
    object.
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 包含列生成表达式的字符串，该表达式将直接使用，或者是一个SQL表达式构造，比如[`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")对象。如果以字符串形式给出，则将该对象转换为[`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")对象。
- en: Warning
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 警告
- en: The [`Computed.sqltext`](#sqlalchemy.schema.Computed.params.sqltext "sqlalchemy.schema.Computed")
    argument to [`Computed`](#sqlalchemy.schema.Computed "sqlalchemy.schema.Computed")
    can be passed as a Python string argument, which will be treated as **trusted
    SQL text** and rendered as given. **DO NOT PASS UNTRUSTED INPUT TO THIS PARAMETER**.
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 传递给[`Computed`](#sqlalchemy.schema.Computed "sqlalchemy.schema.Computed")的[`Computed.sqltext`](#sqlalchemy.schema.Computed.params.sqltext
    "sqlalchemy.schema.Computed")参数可以作为Python字符串参数传递，它将被视为**受信任的SQL文本**并按给定方式呈现。**请勿将不受信任的输入传递给此参数**。
- en: '`persisted` –'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`persisted` –'
- en: 'Optional, controls how this column should be persisted by the database. Possible
    values are:'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选，控制该列在数据库中的持久化方式。可能的值包括：
- en: '`None`, the default, it will use the default persistence defined by the database.'
  id: totrans-177
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`None`，默认值，它将使用数据库定义的默认持久化方式。'
- en: '`True`, will render `GENERATED ALWAYS AS ... STORED`, or the equivalent for
    the target database if supported.'
  id: totrans-178
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`True`，将呈现 `GENERATED ALWAYS AS ... STORED`，或者如果目标数据库支持的话，将呈现等效值。'
- en: '`False`, will render `GENERATED ALWAYS AS ... VIRTUAL`, or the equivalent for
    the target database if supported.'
  id: totrans-179
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`False`，将呈现 `GENERATED ALWAYS AS ... VIRTUAL`，或者如果目标数据库支持的话，将呈现等效值。'
- en: Specifying `True` or `False` may raise an error when the DDL is emitted to the
    target database if the database does not support that persistence option. Leaving
    this parameter at its default of `None` is guaranteed to succeed for all databases
    that support `GENERATED ALWAYS AS`.
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果数据库不支持该持久化选项，则指定 `True` 或 `False` 可能会在将DDL发出到目标数据库时引发错误。将此参数保留为其默认值`None`
    保证在所有支持 `GENERATED ALWAYS AS` 的数据库上都可以成功。
- en: '[PRE30]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Deprecated since version 1.4: The [`Computed.copy()`](#sqlalchemy.schema.Computed.copy
    "sqlalchemy.schema.Computed.copy") method is deprecated and will be removed in
    a future release.'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.4起已弃用：[`Computed.copy()`](#sqlalchemy.schema.Computed.copy "sqlalchemy.schema.Computed.copy")
    方法已弃用，并将在将来的版本中删除。
- en: '[PRE31]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: A plain default value on a column.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 列上的纯默认值。
- en: This could correspond to a constant, a callable function, or a SQL clause.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能对应于一个常量、一个可调用函数或一个 SQL 子句。
- en: '[`ColumnDefault`](#sqlalchemy.schema.ColumnDefault "sqlalchemy.schema.ColumnDefault")
    is generated automatically whenever the `default`, `onupdate` arguments of [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") are used. A [`ColumnDefault`](#sqlalchemy.schema.ColumnDefault
    "sqlalchemy.schema.ColumnDefault") can be passed positionally as well.'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnDefault`](#sqlalchemy.schema.ColumnDefault "sqlalchemy.schema.ColumnDefault")
    在 [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    的 `default`、`onupdate` 参数被使用时会自动生成。一个 [`ColumnDefault`](#sqlalchemy.schema.ColumnDefault
    "sqlalchemy.schema.ColumnDefault") 也可以作为位置参数传递。'
- en: 'For example, the following:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下内容：
- en: '[PRE32]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Is equivalent to:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 等价于：
- en: '[PRE33]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '**Class signature**'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.ColumnDefault`](#sqlalchemy.schema.ColumnDefault "sqlalchemy.schema.ColumnDefault")
    ([`sqlalchemy.schema.DefaultGenerator`](#sqlalchemy.schema.DefaultGenerator "sqlalchemy.schema.DefaultGenerator"),
    `abc.ABC`)
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.schema.ColumnDefault`](#sqlalchemy.schema.ColumnDefault "sqlalchemy.schema.ColumnDefault")（[`sqlalchemy.schema.DefaultGenerator`](#sqlalchemy.schema.DefaultGenerator
    "sqlalchemy.schema.DefaultGenerator")，`abc.ABC`）
- en: '[PRE34]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: A DDL-specified DEFAULT column value.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: DDL 指定的 DEFAULT 列值。
- en: '[`DefaultClause`](#sqlalchemy.schema.DefaultClause "sqlalchemy.schema.DefaultClause")
    is a [`FetchedValue`](#sqlalchemy.schema.FetchedValue "sqlalchemy.schema.FetchedValue")
    that also generates a “DEFAULT” clause when “CREATE TABLE” is emitted.'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DefaultClause`](#sqlalchemy.schema.DefaultClause "sqlalchemy.schema.DefaultClause")
    是一个 [`FetchedValue`](#sqlalchemy.schema.FetchedValue "sqlalchemy.schema.FetchedValue")，当发出
    “CREATE TABLE” 时也会生成一个“DEFAULT”子句。'
- en: '[`DefaultClause`](#sqlalchemy.schema.DefaultClause "sqlalchemy.schema.DefaultClause")
    is generated automatically whenever the `server_default`, `server_onupdate` arguments
    of [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    are used. A [`DefaultClause`](#sqlalchemy.schema.DefaultClause "sqlalchemy.schema.DefaultClause")
    can be passed positionally as well.'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 当 [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    的 `server_default`、`server_onupdate` 参数被使用时，[`DefaultClause`](#sqlalchemy.schema.DefaultClause
    "sqlalchemy.schema.DefaultClause") 会自动生成。一个 [`DefaultClause`](#sqlalchemy.schema.DefaultClause
    "sqlalchemy.schema.DefaultClause") 也可以作为位置参数传递。
- en: 'For example, the following:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下内容：
- en: '[PRE35]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Is equivalent to:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 等价于：
- en: '[PRE36]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '**Class signature**'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.DefaultClause`](#sqlalchemy.schema.DefaultClause "sqlalchemy.schema.DefaultClause")
    ([`sqlalchemy.schema.FetchedValue`](#sqlalchemy.schema.FetchedValue "sqlalchemy.schema.FetchedValue"))
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.schema.DefaultClause`](#sqlalchemy.schema.DefaultClause "sqlalchemy.schema.DefaultClause")（[`sqlalchemy.schema.FetchedValue`](#sqlalchemy.schema.FetchedValue
    "sqlalchemy.schema.FetchedValue")）
- en: '[PRE37]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Base class for column *default* values.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 列默认值的基类。
- en: This object is only present on column.default or column.onupdate. It’s not valid
    as a server default.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 此对象仅出现在 column.default 或 column.onupdate。它不能作为服务器默认值有效。
- en: '**Class signature**'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.DefaultGenerator`](#sqlalchemy.schema.DefaultGenerator
    "sqlalchemy.schema.DefaultGenerator") ([`sqlalchemy.sql.expression.Executable`](selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable"), [`sqlalchemy.schema.SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem"))
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.schema.DefaultGenerator`](#sqlalchemy.schema.DefaultGenerator
    "sqlalchemy.schema.DefaultGenerator")（[`sqlalchemy.sql.expression.Executable`](selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")，[`sqlalchemy.schema.SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem")）
- en: '[PRE38]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: A marker for a transparent database-side default.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 用于透明数据库端默认值的标记。
- en: Use [`FetchedValue`](#sqlalchemy.schema.FetchedValue "sqlalchemy.schema.FetchedValue")
    when the database is configured to provide some automatic default for a column.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 当数据库配置为为列提供一些自动默认值时，请使用 [`FetchedValue`](#sqlalchemy.schema.FetchedValue "sqlalchemy.schema.FetchedValue")。
- en: 'E.g.:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE39]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Would indicate that some trigger or default generator will create a new value
    for the `foo` column during an INSERT.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 将指示某个触发器或默认生成器在 INSERT 期间为 `foo` 列创建一个新值。
- en: See also
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Marking Implicitly Generated Values, timestamps, and Triggered Columns](#triggered-columns)'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '[标记隐式生成的值、时间戳和触发列](#triggered-columns)'
- en: '**Class signature**'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.FetchedValue`](#sqlalchemy.schema.FetchedValue "sqlalchemy.schema.FetchedValue")
    (`sqlalchemy.sql.expression.SchemaEventTarget`)
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.schema.FetchedValue`](#sqlalchemy.schema.FetchedValue "sqlalchemy.schema.FetchedValue")（`sqlalchemy.sql.expression.SchemaEventTarget`）
- en: '[PRE40]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Represents a named database sequence.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一个命名的数据库序列。
- en: The [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence") object
    represents the name and configurational parameters of a database sequence. It
    also represents a construct that can be “executed” by a SQLAlchemy [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") or [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"), rendering the appropriate “next value” function
    for the target database and returning a result.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence") 对象表示数据库序列的名称和配置参数。它还表示一个可以被
    SQLAlchemy [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    或 [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    “执行”的结构，为目标数据库渲染适当的“下一个值”函数并返回结果。'
- en: 'The [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    is typically associated with a primary key column:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence") 通常与主键列关联：'
- en: '[PRE41]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: When CREATE TABLE is emitted for the above [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), if the target platform supports sequences, a CREATE
    SEQUENCE statement will be emitted as well. For platforms that don’t support sequences,
    the [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence") construct
    is ignored.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 当为上述 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    发射 CREATE TABLE 时，如果目标平台支持序列，则也会发射 CREATE SEQUENCE 语句。对于不支持序列的平台，将忽略 [`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") 构造。
- en: See also
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Defining Sequences](#defaults-sequences)'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '[定义序列](#defaults-sequences)'
- en: '[`CreateSequence`](ddl.html#sqlalchemy.schema.CreateSequence "sqlalchemy.schema.CreateSequence")'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '[`CreateSequence`](ddl.html#sqlalchemy.schema.CreateSequence "sqlalchemy.schema.CreateSequence")'
- en: '[`DropSequence`](ddl.html#sqlalchemy.schema.DropSequence "sqlalchemy.schema.DropSequence")'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DropSequence`](ddl.html#sqlalchemy.schema.DropSequence "sqlalchemy.schema.DropSequence")'
- en: '**Members**'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.schema.Sequence.__init__), [create()](#sqlalchemy.schema.Sequence.create),
    [drop()](#sqlalchemy.schema.Sequence.drop), [next_value()](#sqlalchemy.schema.Sequence.next_value)'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.schema.Sequence.__init__), [create()](#sqlalchemy.schema.Sequence.create),
    [drop()](#sqlalchemy.schema.Sequence.drop), [next_value()](#sqlalchemy.schema.Sequence.next_value)'
- en: '**Class signature**'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    (`sqlalchemy.schema.HasSchemaAttr`, `sqlalchemy.schema.IdentityOptions`, [`sqlalchemy.schema.DefaultGenerator`](#sqlalchemy.schema.DefaultGenerator
    "sqlalchemy.schema.DefaultGenerator"))
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.schema.Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    (`sqlalchemy.schema.HasSchemaAttr`, `sqlalchemy.schema.IdentityOptions`, [`sqlalchemy.schema.DefaultGenerator`](#sqlalchemy.schema.DefaultGenerator
    "sqlalchemy.schema.DefaultGenerator"))
- en: '[PRE42]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Construct a [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    object.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个 [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    对象。
- en: 'Parameters:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`name` – the name of the sequence.'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 序列的名称。'
- en: '`start` –'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`start` – 开始索引。'
- en: the starting index of the sequence. This value is used when the CREATE SEQUENCE
    command is emitted to the database as the value of the “START WITH” clause. If
    `None`, the clause is omitted, which on most platforms indicates a starting value
    of 1.
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 序列的起始索引。在将 CREATE SEQUENCE 命令发射到数据库时，此值被用作“START WITH”子句的值。如果为 `None`，则省略该子句，大多数平台上表示起始值为
    1。
- en: 'Changed in version 2.0: The [`Sequence.start`](#sqlalchemy.schema.Sequence.params.start
    "sqlalchemy.schema.Sequence") parameter is required in order to have DDL emit
    “START WITH”. This is a reversal of a change made in version 1.4 which would implicitly
    render “START WITH 1” if the [`Sequence.start`](#sqlalchemy.schema.Sequence.params.start
    "sqlalchemy.schema.Sequence") were not included. See [The Sequence construct reverts
    to not having any explicit default “start” value; impacts MS SQL Server](../changelog/whatsnew_20.html#change-7211)
    for more detail.'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本 2.0 开始更改：要求 [`Sequence.start`](#sqlalchemy.schema.Sequence.params.start
    "sqlalchemy.schema.Sequence") 参数以发射 DDL “START WITH”。这是在版本 1.4 中进行的一项更改的反转，该更改如果未包括
    [`Sequence.start`](#sqlalchemy.schema.Sequence.params.start "sqlalchemy.schema.Sequence")
    将隐式渲染“START WITH 1”。有关更多详细信息，请参阅 [序列结构还原为没有任何显式默认“开始”值；影响 MS SQL Server](../changelog/whatsnew_20.html#change-7211)。
- en: '`increment` – the increment value of the sequence. This value is used when
    the CREATE SEQUENCE command is emitted to the database as the value of the “INCREMENT
    BY” clause. If `None`, the clause is omitted, which on most platforms indicates
    an increment of 1.'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`increment` – 序列的增量值。在将 CREATE SEQUENCE 命令发射到数据库时，此值被用作“INCREMENT BY”子句的值。如果为
    `None`，则省略该子句，大多数平台上表示增量为 1。'
- en: '`minvalue` – the minimum value of the sequence. This value is used when the
    CREATE SEQUENCE command is emitted to the database as the value of the “MINVALUE”
    clause. If `None`, the clause is omitted, which on most platforms indicates a
    minvalue of 1 and -2^63-1 for ascending and descending sequences, respectively.'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`minvalue` – 序列的最小值。当向数据库发出 CREATE SEQUENCE 命令时，此值用作“MINVALUE”子句的值。如果为 `None`，则省略该子句，在大多数平台上表示升序和降序序列的最小值分别为
    1 和 -2^63-1。'
- en: '`maxvalue` – the maximum value of the sequence. This value is used when the
    CREATE SEQUENCE command is emitted to the database as the value of the “MAXVALUE”
    clause. If `None`, the clause is omitted, which on most platforms indicates a
    maxvalue of 2^63-1 and -1 for ascending and descending sequences, respectively.'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`maxvalue` – 序列的最大值。当向数据库发出 CREATE SEQUENCE 命令时，此值用作“MAXVALUE”子句的值。如果为 `None`，则省略该子句，在大多数平台上表示升序和降序序列的最大值分别为
    2^63-1 和 -1。'
- en: '`nominvalue` – no minimum value of the sequence. This value is used when the
    CREATE SEQUENCE command is emitted to the database as the value of the “NO MINVALUE”
    clause. If `None`, the clause is omitted, which on most platforms indicates a
    minvalue of 1 and -2^63-1 for ascending and descending sequences, respectively.'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nominvalue` – 序列没有最小值。当向数据库发出 CREATE SEQUENCE 命令时，此值用作“NO MINVALUE”子句的值。如果为
    `None`，则省略该子句，在大多数平台上表示升序和降序序列的最小值分别为 1 和 -2^63-1。'
- en: '`nomaxvalue` – no maximum value of the sequence. This value is used when the
    CREATE SEQUENCE command is emitted to the database as the value of the “NO MAXVALUE”
    clause. If `None`, the clause is omitted, which on most platforms indicates a
    maxvalue of 2^63-1 and -1 for ascending and descending sequences, respectively.'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nomaxvalue` – 序列没有最大值。当向数据库发出 CREATE SEQUENCE 命令时，此值用作“NO MAXVALUE”子句的值。如果为
    `None`，则省略该子句，在大多数平台上表示升序和降序序列的最大值分别为 2^63-1 和 -1。'
- en: '`cycle` – allows the sequence to wrap around when the maxvalue or minvalue
    has been reached by an ascending or descending sequence respectively. This value
    is used when the CREATE SEQUENCE command is emitted to the database as the “CYCLE”
    clause. If the limit is reached, the next number generated will be the minvalue
    or maxvalue, respectively. If cycle=False (the default) any calls to nextval after
    the sequence has reached its maximum value will return an error.'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cycle` – 当升序或降序序列达到最大值或最小值时，允许序列环绕。当向数据库发出 CREATE SEQUENCE 命令时，此值用作“CYCLE”子句。如果达到限制，则下一个生成的数字将是最小值或最大值，分别是升序或降序。如果
    cycle=False（默认值），在序列达到其最大值后，任何对 nextval 的调用都将返回错误。'
- en: '`schema` – optional schema name for the sequence, if located in a schema other
    than the default. The rules for selecting the schema name when a [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") is also present are the same as that of [`Table.schema`](metadata.html#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table").'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` – 序列的可选模式名称，如果位于默认模式之外的模式中。当 [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") 也存在时，选择模式名称的规则与 [`Table.schema`](metadata.html#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table") 相同。'
- en: '`cache` – optional integer value; number of future values in the sequence which
    are calculated in advance. Renders the CACHE keyword understood by Oracle and
    PostgreSQL.'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cache` – 可选整数值；提前计算序列中的未来值的数量。呈现 Oracle 和 PostgreSQL 可理解的 CACHE 关键字。'
- en: '`order` – optional boolean value; if `True`, renders the ORDER keyword, understood
    by Oracle, indicating the sequence is definitively ordered. May be necessary to
    provide deterministic ordering using Oracle RAC.'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`order` – 可选布尔值；如果为 `True`，则呈现 ORDER 关键字，Oracle 可理解，表示序列是有序的。可能需要使用 Oracle
    RAC 提供确定性排序。'
- en: '`data_type` –'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data_type` –'
- en: The type to be returned by the sequence, for dialects that allow us to choose
    between INTEGER, BIGINT, etc. (e.g., mssql).
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 序列返回的类型，适用于允许我们在 INTEGER、BIGINT 等之间进行选择的方言（例如，mssql）。
- en: New in version 1.4.0.
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版本 1.4.0 中新增。
- en: '`optional` – boolean value, when `True`, indicates that this [`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") object only needs to be explicitly generated on
    backends that don’t provide another way to generate primary key identifiers. Currently,
    it essentially means, “don’t create this sequence on the PostgreSQL backend, where
    the SERIAL keyword creates a sequence for us automatically”.'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`optional` – 布尔值，当为 `True` 时，表示此 [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    对象只需在没有其他方法生成主键标识符的后端上显式生成。目前，这实际上意味着，“在 PostgreSQL 后端上不要创建此序列，因为 SERIAL 关键字会自动为我们创建序列”。'
- en: '`quote` – boolean value, when `True` or `False`, explicitly forces quoting
    of the [`Sequence.name`](#sqlalchemy.schema.Sequence.params.name "sqlalchemy.schema.Sequence")
    on or off. When left at its default of `None`, normal quoting rules based on casing
    and reserved words take place.'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`quote` – 布尔值，当为 `True` 或 `False` 时，明确地强制引用 [`Sequence.name`](#sqlalchemy.schema.Sequence.params.name
    "sqlalchemy.schema.Sequence") 的名称，打开或关闭。当保留其默认值 `None` 时，基于大小写和保留字的常规引用规则生效。'
- en: '`quote_schema` – Set the quoting preferences for the `schema` name.'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`quote_schema` – 设置对 `schema` 名称的引用首选项。'
- en: '`metadata` –'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`metadata` –'
- en: 'optional [`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    object which this [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    will be associated with. A [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    that is associated with a [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") gains the following capabilities:'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的 [`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    对象，此 [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence") 将与之关联。与
    [`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    关联的 [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence") 具有以下功能：
- en: The [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence") will
    inherit the [`MetaData.schema`](metadata.html#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData") parameter specified to the target [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData"), which affects the production of CREATE / DROP DDL,
    if any.
  id: totrans-256
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence") 将继承指定给目标
    [`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    的 [`MetaData.schema`](metadata.html#sqlalchemy.schema.MetaData.params.schema "sqlalchemy.schema.MetaData")
    参数，这会影响 CREATE / DROP DDL 的生成（如果有）。'
- en: The [`Sequence.create()`](#sqlalchemy.schema.Sequence.create "sqlalchemy.schema.Sequence.create")
    and [`Sequence.drop()`](#sqlalchemy.schema.Sequence.drop "sqlalchemy.schema.Sequence.drop")
    methods automatically use the engine bound to the [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object, if any.
  id: totrans-257
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Sequence.create()`](#sqlalchemy.schema.Sequence.create "sqlalchemy.schema.Sequence.create")
    和 [`Sequence.drop()`](#sqlalchemy.schema.Sequence.drop "sqlalchemy.schema.Sequence.drop")
    方法会自动使用绑定到 [`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    对象的引擎（如果有）。'
- en: The [`MetaData.create_all()`](metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") and [`MetaData.drop_all()`](metadata.html#sqlalchemy.schema.MetaData.drop_all
    "sqlalchemy.schema.MetaData.drop_all") methods will emit CREATE / DROP for this
    [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence"), even if
    the [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence") is
    not associated with any [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    / [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    that’s a member of this [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData").
  id: totrans-258
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`MetaData.create_all()`](metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") 和 [`MetaData.drop_all()`](metadata.html#sqlalchemy.schema.MetaData.drop_all
    "sqlalchemy.schema.MetaData.drop_all") 方法将为此 [`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") 发出 CREATE / DROP，即使此 [`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") 未与此 [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") 的任何成员 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") / [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 关联。'
- en: The above behaviors can only occur if the [`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") is explicitly associated with the [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") via this parameter.
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述行为只有在通过此参数将 [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    明确关联到 [`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    时才会发生。
- en: See also
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Associating a Sequence with the MetaData](#sequence-metadata) - full discussion
    of the [`Sequence.metadata`](#sqlalchemy.schema.Sequence.params.metadata "sqlalchemy.schema.Sequence")
    parameter.'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[将序列与MetaData关联](#sequence-metadata) - 关于[`Sequence.metadata`](#sqlalchemy.schema.Sequence.params.metadata
    "sqlalchemy.schema.Sequence")参数的详细讨论。'
- en: '`for_update` – Indicates this [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence"),
    when associated with a [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column"),
    should be invoked for UPDATE statements on that column’s table, rather than for
    INSERT statements, when no value is otherwise present for that column in the statement.'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`for_update` – 表示当与[`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")关联时，此[`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")应在该列的表上进行UPDATE语句调用，而不是在该语句中否则在该列中没有值。'
- en: '[PRE43]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Creates this sequence in the database.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据库中创建此序列。
- en: '[PRE44]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Drops this sequence from the database.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 从数据库中删除此序列。
- en: '[PRE45]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Return a [`next_value`](functions.html#sqlalchemy.sql.functions.next_value "sqlalchemy.sql.functions.next_value")
    function element which will render the appropriate increment function for this
    [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence") within
    any SQL expression.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个[`next_value`](functions.html#sqlalchemy.sql.functions.next_value "sqlalchemy.sql.functions.next_value")函数元素，该函数将为此[`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")在任何SQL表达式中呈现适当的增量函数。
- en: '[PRE46]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Defines an identity column, i.e. “GENERATED { ALWAYS | BY DEFAULT } AS IDENTITY”
    syntax.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 定义一个标识列，即“GENERATED { ALWAYS | BY DEFAULT } AS IDENTITY”语法。
- en: 'The [`Identity`](#sqlalchemy.schema.Identity "sqlalchemy.schema.Identity")
    construct is an inline construct added to the argument list of a [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") object:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Identity`](#sqlalchemy.schema.Identity "sqlalchemy.schema.Identity")结构是添加到[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象的参数列表中的内联结构：'
- en: '[PRE47]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: See the linked documentation below for complete details.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅下面链接的文档以获取完整详情。
- en: New in version 1.4.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始新增。
- en: See also
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Identity Columns (GENERATED { ALWAYS | BY DEFAULT } AS IDENTITY)](#identity-ddl)'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '[标识列（GENERATED { ALWAYS | BY DEFAULT } AS IDENTITY）](#identity-ddl)'
- en: '**Members**'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.schema.Identity.__init__), [copy()](#sqlalchemy.schema.Identity.copy)'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.schema.Identity.__init__), [copy()](#sqlalchemy.schema.Identity.copy)'
- en: '**Class signature**'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.Identity`](#sqlalchemy.schema.Identity "sqlalchemy.schema.Identity")
    (`sqlalchemy.schema.IdentityOptions`, [`sqlalchemy.schema.FetchedValue`](#sqlalchemy.schema.FetchedValue
    "sqlalchemy.schema.FetchedValue"), [`sqlalchemy.schema.SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem"))
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.schema.Identity`](#sqlalchemy.schema.Identity "sqlalchemy.schema.Identity")（`sqlalchemy.schema.IdentityOptions`，[`sqlalchemy.schema.FetchedValue`](#sqlalchemy.schema.FetchedValue
    "sqlalchemy.schema.FetchedValue")，[`sqlalchemy.schema.SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem")）
- en: '[PRE48]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Construct a GENERATED { ALWAYS | BY DEFAULT } AS IDENTITY DDL construct to accompany
    a [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column").
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个DDL结构`GENERATED { ALWAYS | BY DEFAULT } AS IDENTITY`，用于配合[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")。
- en: See the [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    documentation for a complete description of most parameters.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")文档，了解大多数参数的完整描述。
- en: Note
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: MSSQL supports this construct as the preferred alternative to generate an IDENTITY
    on a column, but it uses non standard syntax that only support [`Identity.start`](#sqlalchemy.schema.Identity.params.start
    "sqlalchemy.schema.Identity") and [`Identity.increment`](#sqlalchemy.schema.Identity.params.increment
    "sqlalchemy.schema.Identity"). All other parameters are ignored.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: MSSQL支持此结构作为在列上生成IDENTITY的首选替代方案，但它使用的非标准语法仅支持[`Identity.start`](#sqlalchemy.schema.Identity.params.start
    "sqlalchemy.schema.Identity")和[`Identity.increment`](#sqlalchemy.schema.Identity.params.increment
    "sqlalchemy.schema.Identity")。所有其他参数都会被忽略。
- en: 'Parameters:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`always` – A boolean, that indicates the type of identity column. If `False`
    is specified, the default, then the user-specified value takes precedence. If
    `True` is specified, a user-specified value is not accepted ( on some backends,
    like PostgreSQL, OVERRIDING SYSTEM VALUE, or similar, may be specified in an INSERT
    to override the sequence value). Some backends also have a default value for this
    parameter, `None` can be used to omit rendering this part in the DDL. It will
    be treated as `False` if a backend does not have a default value.'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`always` – 一个布尔值，表示标识列的类型。如果指定了`False`，则默认情况下用户指定的值优先。如果指定了`True`，则不接受用户指定的值（在某些后端，如
    PostgreSQL，可以在插入时指定 OVERRIDING SYSTEM VALUE 或类似语句以覆盖序列值）。某些后端也对此参数有默认值，`None`可以用于在DDL中省略渲染此部分。如果后端没有默认值，则将其视为`False`。'
- en: '`on_null` – Set to `True` to specify ON NULL in conjunction with a `always=False`
    identity column. This option is only supported on some backends, like Oracle.'
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`on_null` – 设置为`True`以与`always=False`标识列一起指定ON NULL。此选项仅在某些后端（如Oracle）上受支持。'
- en: '`start` – the starting index of the sequence.'
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`start` – 序列的起始索引。'
- en: '`increment` – the increment value of the sequence.'
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`increment` – 序列的增量值。'
- en: '`minvalue` – the minimum value of the sequence.'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`minvalue` – 序列的最小值。'
- en: '`maxvalue` – the maximum value of the sequence.'
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`maxvalue` – 序列的最大值。'
- en: '`nominvalue` – no minimum value of the sequence.'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nominvalue` – 序列的最小值不存在。'
- en: '`nomaxvalue` – no maximum value of the sequence.'
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nomaxvalue` – 序列的最大值不存在。'
- en: '`cycle` – allows the sequence to wrap around when the maxvalue or minvalue
    has been reached.'
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cycle` – 当达到最大值或最小值时允许序列循环。'
- en: '`cache` – optional integer value; number of future values in the sequence which
    are calculated in advance.'
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cache` – 可选的整数值；提前计算的序列中未来值的数量。'
- en: '`order` – optional boolean value; if true, renders the ORDER keyword.'
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`order` – 可选的布尔值；如果为true，则呈现ORDER关键字。'
- en: '[PRE49]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Deprecated since version 1.4: The [`Identity.copy()`](#sqlalchemy.schema.Identity.copy
    "sqlalchemy.schema.Identity.copy") method is deprecated and will be removed in
    a future release.'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.4起已弃用：[`Identity.copy()`](#sqlalchemy.schema.Identity.copy "sqlalchemy.schema.Identity.copy")方法已弃用，将在将来的版本中移除。
- en: Scalar Defaults
  id: totrans-300
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标量默认值
- en: 'The simplest kind of default is a scalar value used as the default value of
    a column:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的默认值是作为列默认值使用的标量值：
- en: '[PRE50]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Above, the value “12” will be bound as the column value during an INSERT if
    no other value is supplied.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 上述，如果未提供其他值，则值“12”将在插入时绑定为列值。
- en: 'A scalar value may also be associated with an UPDATE statement, though this
    is not very common (as UPDATE statements are usually looking for dynamic defaults):'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 标量值也可能与UPDATE语句关联，尽管这不是很常见（因为UPDATE语句通常寻找动态默认值）：
- en: '[PRE51]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Python-Executed Functions
  id: totrans-306
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python执行的函数
- en: 'The [`Column.default`](metadata.html#sqlalchemy.schema.Column.params.default
    "sqlalchemy.schema.Column") and [`Column.onupdate`](metadata.html#sqlalchemy.schema.Column.params.onupdate
    "sqlalchemy.schema.Column") keyword arguments also accept Python functions. These
    functions are invoked at the time of insert or update if no other value for that
    column is supplied, and the value returned is used for the column’s value. Below
    illustrates a crude “sequence” that assigns an incrementing counter to a primary
    key column:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Column.default`](metadata.html#sqlalchemy.schema.Column.params.default "sqlalchemy.schema.Column")和[`Column.onupdate`](metadata.html#sqlalchemy.schema.Column.params.onupdate
    "sqlalchemy.schema.Column")关键字参数也接受Python函数。如果未提供该列的其他值，则在插入或更新时调用这些函数，并使用返回的值作为列的值。以下示例说明了一个粗糙的“序列”，将递增计数器分配给主键列：'
- en: '[PRE52]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: It should be noted that for real “incrementing sequence” behavior, the built-in
    capabilities of the database should normally be used, which may include sequence
    objects or other autoincrementing capabilities. For primary key columns, SQLAlchemy
    will in most cases use these capabilities automatically. See the API documentation
    for [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    including the [`Column.autoincrement`](metadata.html#sqlalchemy.schema.Column.params.autoincrement
    "sqlalchemy.schema.Column") flag, as well as the section on [`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") later in this chapter for background on standard
    primary key generation techniques.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 应该注意，对于真正的“增量序列”行为，通常应该使用数据库的内置功能，这可能包括序列对象或其他自增能力。对于主键列，SQLAlchemy在大多数情况下将自动使用这些功能。请参阅[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")的API文档，包括[`Column.autoincrement`](metadata.html#sqlalchemy.schema.Column.params.autoincrement
    "sqlalchemy.schema.Column")标志，以及本章后面关于[`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")的部分，了解标准主键生成技术的背景。
- en: 'To illustrate onupdate, we assign the Python `datetime` function `now` to the
    [`Column.onupdate`](metadata.html#sqlalchemy.schema.Column.params.onupdate "sqlalchemy.schema.Column")
    attribute:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明onupdate，我们将Python的`datetime`函数`now`赋值给[`Column.onupdate`](metadata.html#sqlalchemy.schema.Column.params.onupdate
    "sqlalchemy.schema.Column")属性：
- en: '[PRE53]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: When an update statement executes and no value is passed for `last_updated`,
    the `datetime.datetime.now()` Python function is executed and its return value
    used as the value for `last_updated`. Notice that we provide `now` as the function
    itself without calling it (i.e. there are no parenthesis following) - SQLAlchemy
    will execute the function at the time the statement executes.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 当执行更新语句并且未传递`last_updated`值时，将执行`datetime.datetime.now()` Python函数，并将其返回值用作`last_updated`的值。请注意，我们将`now`作为函数本身提供，而不调用它（即后面没有括号）-
    SQLAlchemy将在执行语句时执行该函数。
- en: '### Context-Sensitive Default Functions'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '### 上下文敏感的默认函数'
- en: 'The Python functions used by [`Column.default`](metadata.html#sqlalchemy.schema.Column.params.default
    "sqlalchemy.schema.Column") and [`Column.onupdate`](metadata.html#sqlalchemy.schema.Column.params.onupdate
    "sqlalchemy.schema.Column") may also make use of the current statement’s context
    in order to determine a value. The context of a statement is an internal SQLAlchemy
    object which contains all information about the statement being executed, including
    its source expression, the parameters associated with it and the cursor. The typical
    use case for this context with regards to default generation is to have access
    to the other values being inserted or updated on the row. To access the context,
    provide a function that accepts a single `context` argument:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Column.default`](metadata.html#sqlalchemy.schema.Column.params.default "sqlalchemy.schema.Column")和[`Column.onupdate`](metadata.html#sqlalchemy.schema.Column.params.onupdate
    "sqlalchemy.schema.Column")使用的Python函数也可以利用当前语句上下文来确定值。语句的上下文是一个内部的SQLAlchemy对象，包含有关正在执行的语句的所有信息，包括其源表达式、与之关联的参数和游标。在默认生成的上下文中，典型的用例是访问正在插入或更新的行上的其他值。要访问上下文，请提供一个接受单个`context`参数的函数：'
- en: '[PRE54]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: The above default generation function is applied so that it will execute for
    all INSERT and UPDATE statements where a value for `counter_plus_twelve` was otherwise
    not provided, and the value will be that of whatever value is present in the execution
    for the `counter` column, plus the number 12.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 上述默认生成函数是这样应用的：它将用于所有未提供`counter_plus_twelve`值的INSERT和UPDATE语句，并且该值将是执行`counter`列时的任何值加上12的值。
- en: For a single statement that is being executed using “executemany” style, e.g.
    with multiple parameter sets passed to [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute"), the user-defined function is called once
    for each set of parameters. For the use case of a multi-valued [`Insert`](dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") construct (e.g. with more than one VALUES
    clause set up via the [`Insert.values()`](dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") method), the user-defined function
    is also called once for each set of parameters.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 对于使用“executemany”样式执行的单个语句，例如通过[`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")传递多个参数集的情况，用户定义的函数将为每组参数集调用一次。对于多值[`Insert`](dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert")结构的用例（例如通过[`Insert.values()`](dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values")方法设置了多个VALUES子句），用户定义的函数也将为每组参数集调用一次。
- en: When the function is invoked, the special method [`DefaultExecutionContext.get_current_parameters()`](internals.html#sqlalchemy.engine.default.DefaultExecutionContext.get_current_parameters
    "sqlalchemy.engine.default.DefaultExecutionContext.get_current_parameters") is
    available from the context object (an subclass of [`DefaultExecutionContext`](internals.html#sqlalchemy.engine.default.DefaultExecutionContext
    "sqlalchemy.engine.default.DefaultExecutionContext")). This method returns a dictionary
    of column-key to values that represents the full set of values for the INSERT
    or UPDATE statement. In the case of a multi-valued INSERT construct, the subset
    of parameters that corresponds to the individual VALUES clause is isolated from
    the full parameter dictionary and returned alone.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 当函数被调用时，上下文对象（[`DefaultExecutionContext`](internals.html#sqlalchemy.engine.default.DefaultExecutionContext
    "sqlalchemy.engine.default.DefaultExecutionContext")的一个子类）中可用的特殊方法[`DefaultExecutionContext.get_current_parameters()`](internals.html#sqlalchemy.engine.default.DefaultExecutionContext.get_current_parameters
    "sqlalchemy.engine.default.DefaultExecutionContext.get_current_parameters")。此方法返回一个字典，其中键-值对表示INSERT或UPDATE语句的完整值集。在多值INSERT结构的情况下，与单个VALUES子句对应的参数子集将从完整参数字典中隔离并单独返回。
- en: 'New in version 1.2: Added [`DefaultExecutionContext.get_current_parameters()`](internals.html#sqlalchemy.engine.default.DefaultExecutionContext.get_current_parameters
    "sqlalchemy.engine.default.DefaultExecutionContext.get_current_parameters") method,
    which improves upon the still-present [`DefaultExecutionContext.current_parameters`](internals.html#sqlalchemy.engine.default.DefaultExecutionContext.current_parameters
    "sqlalchemy.engine.default.DefaultExecutionContext.current_parameters") attribute
    by offering the service of organizing multiple VALUES clauses into individual
    parameter dictionaries.  ### Context-Sensitive Default Functions'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 1.2版中的新功能：增加了[`DefaultExecutionContext.get_current_parameters()`](internals.html#sqlalchemy.engine.default.DefaultExecutionContext.get_current_parameters
    "sqlalchemy.engine.default.DefaultExecutionContext.get_current_parameters")方法，它改进了仍然存在的[`DefaultExecutionContext.current_parameters`](internals.html#sqlalchemy.engine.default.DefaultExecutionContext.current_parameters
    "sqlalchemy.engine.default.DefaultExecutionContext.current_parameters")属性，通过提供将多个VALUES子句组织成单独参数字典的服务。###
    上下文敏感的默认函数
- en: 'The Python functions used by [`Column.default`](metadata.html#sqlalchemy.schema.Column.params.default
    "sqlalchemy.schema.Column") and [`Column.onupdate`](metadata.html#sqlalchemy.schema.Column.params.onupdate
    "sqlalchemy.schema.Column") may also make use of the current statement’s context
    in order to determine a value. The context of a statement is an internal SQLAlchemy
    object which contains all information about the statement being executed, including
    its source expression, the parameters associated with it and the cursor. The typical
    use case for this context with regards to default generation is to have access
    to the other values being inserted or updated on the row. To access the context,
    provide a function that accepts a single `context` argument:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 由[`Column.default`](metadata.html#sqlalchemy.schema.Column.params.default "sqlalchemy.schema.Column")和[`Column.onupdate`](metadata.html#sqlalchemy.schema.Column.params.onupdate
    "sqlalchemy.schema.Column")使用的Python函数还可以利用当前语句的上下文来确定一个值。语句的上下文是一个内部的SQLAlchemy对象，其中包含关于正在执行的语句的所有信息，包括其源表达式、与之关联的参数和游标。与默认生成相关的此上下文的典型用例是访问要插入或更新的行上的其他值。要访问上下文，请提供一个接受单个`context`参数的函数：
- en: '[PRE55]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: The above default generation function is applied so that it will execute for
    all INSERT and UPDATE statements where a value for `counter_plus_twelve` was otherwise
    not provided, and the value will be that of whatever value is present in the execution
    for the `counter` column, plus the number 12.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 上述默认生成函数被应用于所有 INSERT 和 UPDATE 语句，其中未提供`counter_plus_twelve`的值，并且该值将为执行`counter`列时存在的任何值加上
    12。
- en: For a single statement that is being executed using “executemany” style, e.g.
    with multiple parameter sets passed to [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute"), the user-defined function is called once
    for each set of parameters. For the use case of a multi-valued [`Insert`](dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") construct (e.g. with more than one VALUES
    clause set up via the [`Insert.values()`](dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") method), the user-defined function
    is also called once for each set of parameters.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 对于使用“executemany”风格执行的单个语句，例如向 [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") 传递多个参数集的情况，用户定义的函数会为每个参数集调用一次。对于多值 [`Insert`](dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") 结构的用例（例如通过 [`Insert.values()`](dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") 方法设置了多个 VALUES 子句），用户定义的函数也会为每个参数集调用一次。
- en: When the function is invoked, the special method [`DefaultExecutionContext.get_current_parameters()`](internals.html#sqlalchemy.engine.default.DefaultExecutionContext.get_current_parameters
    "sqlalchemy.engine.default.DefaultExecutionContext.get_current_parameters") is
    available from the context object (an subclass of [`DefaultExecutionContext`](internals.html#sqlalchemy.engine.default.DefaultExecutionContext
    "sqlalchemy.engine.default.DefaultExecutionContext")). This method returns a dictionary
    of column-key to values that represents the full set of values for the INSERT
    or UPDATE statement. In the case of a multi-valued INSERT construct, the subset
    of parameters that corresponds to the individual VALUES clause is isolated from
    the full parameter dictionary and returned alone.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 当函数被调用时，上下文对象（[`DefaultExecutionContext`](internals.html#sqlalchemy.engine.default.DefaultExecutionContext
    "sqlalchemy.engine.default.DefaultExecutionContext")的子类）中可用特殊方法[`DefaultExecutionContext.get_current_parameters()`](internals.html#sqlalchemy.engine.default.DefaultExecutionContext.get_current_parameters
    "sqlalchemy.engine.default.DefaultExecutionContext.get_current_parameters")。该方法返回一个字典，列键到值的映射，表示
    INSERT 或 UPDATE 语句的完整值集。对于多值 INSERT 结构的情况，与单个 VALUES 子句对应的参数子集被从完整参数字典中隔离并单独返回。
- en: 'New in version 1.2: Added [`DefaultExecutionContext.get_current_parameters()`](internals.html#sqlalchemy.engine.default.DefaultExecutionContext.get_current_parameters
    "sqlalchemy.engine.default.DefaultExecutionContext.get_current_parameters") method,
    which improves upon the still-present [`DefaultExecutionContext.current_parameters`](internals.html#sqlalchemy.engine.default.DefaultExecutionContext.current_parameters
    "sqlalchemy.engine.default.DefaultExecutionContext.current_parameters") attribute
    by offering the service of organizing multiple VALUES clauses into individual
    parameter dictionaries.'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 1.2 版本中新增：增加了 [`DefaultExecutionContext.get_current_parameters()`](internals.html#sqlalchemy.engine.default.DefaultExecutionContext.get_current_parameters
    "sqlalchemy.engine.default.DefaultExecutionContext.get_current_parameters") 方法，它改进了仍然存在的
    [`DefaultExecutionContext.current_parameters`](internals.html#sqlalchemy.engine.default.DefaultExecutionContext.current_parameters
    "sqlalchemy.engine.default.DefaultExecutionContext.current_parameters") 属性，提供了将多个
    VALUES 子句组织成单独参数字典的服务。
- en: '## Client-Invoked SQL Expressions'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '## 客户端调用的 SQL 表达式'
- en: 'The [`Column.default`](metadata.html#sqlalchemy.schema.Column.params.default
    "sqlalchemy.schema.Column") and [`Column.onupdate`](metadata.html#sqlalchemy.schema.Column.params.onupdate
    "sqlalchemy.schema.Column") keywords may also be passed SQL expressions, which
    are in most cases rendered inline within the INSERT or UPDATE statement:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以传递 SQL 表达式给 [`Column.default`](metadata.html#sqlalchemy.schema.Column.params.default
    "sqlalchemy.schema.Column") 和 [`Column.onupdate`](metadata.html#sqlalchemy.schema.Column.params.onupdate
    "sqlalchemy.schema.Column") 关键字，这在大多数情况下会在 INSERT 或 UPDATE 语句中内联呈现：
- en: '[PRE56]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Above, the `create_date` column will be populated with the result of the `now()`
    SQL function (which, depending on backend, compiles into `NOW()` or `CURRENT_TIMESTAMP`
    in most cases) during an INSERT statement, and the `key` column with the result
    of a SELECT subquery from another table. The `last_modified` column will be populated
    with the value of the SQL `UTC_TIMESTAMP()` MySQL function when an UPDATE statement
    is emitted for this table.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述情况中，`create_date`列将在 INSERT 语句期间填充 `now()` SQL 函数的结果（在大多数情况下，根据后端编译为 `NOW()`
    或 `CURRENT_TIMESTAMP`），而 `key` 列将填充另一张表的 SELECT 子查询的结果。当为此表发出 UPDATE 语句时，`last_modified`
    列将填充 SQL `UTC_TIMESTAMP()` MySQL 函数的值。
- en: Note
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: When using SQL functions with the `func` construct, we “call” the named function,
    e.g. with parenthesis as in `func.now()`. This differs from when we specify a
    Python callable as a default such as `datetime.datetime`, where we pass the function
    itself, but we don’t invoke it ourselves. In the case of a SQL function, invoking
    `func.now()` returns the SQL expression object that will render the “NOW” function
    into the SQL being emitted.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`func`构造和 SQL 函数时，我们会“调用”命名函数，例如在 `func.now()` 中使用括号。这与当我们将 Python 可调用对象（例如
    `datetime.datetime`）指定为默认值时不同，其中我们传递函数本身，但我们不自己调用它。对于 SQL 函数，调用`func.now()`将返回将“NOW”函数呈现为正在发出的
    SQL 中的 SQL 表达式对象。
- en: Default and update SQL expressions specified by [`Column.default`](metadata.html#sqlalchemy.schema.Column.params.default
    "sqlalchemy.schema.Column") and [`Column.onupdate`](metadata.html#sqlalchemy.schema.Column.params.onupdate
    "sqlalchemy.schema.Column") are invoked explicitly by SQLAlchemy when an INSERT
    or UPDATE statement occurs, typically rendered inline within the DML statement
    except in certain cases listed below. This is different than a “server side” default,
    which is part of the table’s DDL definition, e.g. as part of the “CREATE TABLE”
    statement, which are likely more common. For server side defaults, see the next
    section [Server-invoked DDL-Explicit Default Expressions](#server-defaults).
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 当发生 INSERT 或 UPDATE 语句时，SQLAlchemy 在 [`Column.default`](metadata.html#sqlalchemy.schema.Column.params.default
    "sqlalchemy.schema.Column") 和 [`Column.onupdate`](metadata.html#sqlalchemy.schema.Column.params.onupdate
    "sqlalchemy.schema.Column") 指定的默认和更新 SQL 表达式明确调用它们，通常在 DML 语句中内联渲染，除了下面列出的某些情况。这与“服务器端”默认值不同，后者是表的
    DDL 定义的一部分，例如作为“CREATE TABLE”语句的一部分，这可能更常见。有关服务器端默认值，请参阅下一节[服务器调用 DDL-显式默认表达式](#server-defaults)。
- en: When a SQL expression indicated by [`Column.default`](metadata.html#sqlalchemy.schema.Column.params.default
    "sqlalchemy.schema.Column") is used with primary key columns, there are some cases
    where SQLAlchemy must “pre-execute” the default generation SQL function, meaning
    it is invoked in a separate SELECT statement, and the resulting value is passed
    as a parameter to the INSERT. This only occurs for primary key columns for an
    INSERT statement that is being asked to return this primary key value, where RETURNING
    or `cursor.lastrowid` may not be used. An [`Insert`](dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") construct that specifies the [`insert.inline`](dml.html#sqlalchemy.sql.expression.insert.params.inline
    "sqlalchemy.sql.expression.insert") flag will always render default expressions
    inline.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 当由[`Column.default`](metadata.html#sqlalchemy.schema.Column.params.default "sqlalchemy.schema.Column")指示的
    SQL 表达式与主键列一起使用时，有些情况下 SQLAlchemy 必须“预先执行”默认生成的 SQL 函数，这意味着它在单独的 SELECT 语句中被调用，并且生成的值作为参数传递给
    INSERT。这仅发生在主键列为 INSERT 语句被要求返回该主键值的情况下，其中不能使用 RETURNING 或 `cursor.lastrowid`。指定了[`insert.inline`](dml.html#sqlalchemy.sql.expression.insert.params.inline
    "sqlalchemy.sql.expression.insert")标志的 [`Insert`](dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") 构造将始终将默认表达式呈现为内联。
- en: When the statement is executed with a single set of parameters (that is, it
    is not an “executemany” style execution), the returned [`CursorResult`](connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") will contain a collection accessible via [`CursorResult.postfetch_cols()`](connections.html#sqlalchemy.engine.CursorResult.postfetch_cols
    "sqlalchemy.engine.CursorResult.postfetch_cols") which contains a list of all
    [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    objects which had an inline-executed default. Similarly, all parameters which
    were bound to the statement, including all Python and SQL expressions which were
    pre-executed, are present in the [`CursorResult.last_inserted_params()`](connections.html#sqlalchemy.engine.CursorResult.last_inserted_params
    "sqlalchemy.engine.CursorResult.last_inserted_params") or [`CursorResult.last_updated_params()`](connections.html#sqlalchemy.engine.CursorResult.last_updated_params
    "sqlalchemy.engine.CursorResult.last_updated_params") collections on [`CursorResult`](connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult"). The [`CursorResult.inserted_primary_key`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key") collection contains a list
    of primary key values for the row inserted (a list so that single-column and composite-column
    primary keys are represented in the same format).
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 当执行语句使用单一参数集合（即不是“executemany”风格执行）时，返回的[`CursorResult`](connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult")将包含一个可通过[`CursorResult.postfetch_cols()`](connections.html#sqlalchemy.engine.CursorResult.postfetch_cols
    "sqlalchemy.engine.CursorResult.postfetch_cols")访问的集合，其中包含所有具有内联执行默认值的[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象的列表。同样，绑定到语句的所有参数，包括所有预先执行的Python和SQL表达式，都存在于[`CursorResult.last_inserted_params()`](connections.html#sqlalchemy.engine.CursorResult.last_inserted_params
    "sqlalchemy.engine.CursorResult.last_inserted_params")或[`CursorResult.last_updated_params()`](connections.html#sqlalchemy.engine.CursorResult.last_updated_params
    "sqlalchemy.engine.CursorResult.last_updated_params")集合中的[`CursorResult`](connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult")。[`CursorResult.inserted_primary_key`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key")集合包含插入的行的主键值列表（列表使得单列和复合列主键以相同格式表示）。
- en: '## Server-invoked DDL-Explicit Default Expressions'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '## 服务器调用的DDL显式默认表达式'
- en: 'A variant on the SQL expression default is the [`Column.server_default`](metadata.html#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column"), which gets placed in the CREATE TABLE statement during
    a [`Table.create()`](metadata.html#sqlalchemy.schema.Table.create "sqlalchemy.schema.Table.create")
    operation:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: SQL表达式默认的一种变体是[`Column.server_default`](metadata.html#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column")，在[`Table.create()`](metadata.html#sqlalchemy.schema.Table.create
    "sqlalchemy.schema.Table.create")操作期间会被放置在CREATE TABLE语句中：
- en: '[PRE57]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'A create call for the above table will produce:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 对上述表的创建调用将产生：
- en: '[PRE58]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: The above example illustrates the two typical use cases for [`Column.server_default`](metadata.html#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column"), that of the SQL function (SYSDATE in the above example)
    as well as a server-side constant value (the integer “0” in the above example).
    It is advisable to use the [`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct for any literal SQL values as opposed
    to passing the raw value, as SQLAlchemy does not typically perform any quoting
    or escaping on these values.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示例说明了[`Column.server_default`](metadata.html#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column")的两种典型用法，即SQL函数（上述示例中的SYSDATE）以及服务器端常量值（上述示例中的整数“0”）。建议对任何文字SQL值使用[`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")构造，而不是传递原始值，因为SQLAlchemy通常不对这些值执行任何引用或转义。
- en: Like client-generated expressions, [`Column.server_default`](metadata.html#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column") can accommodate SQL expressions in general, however
    it is expected that these will usually be simple functions and expressions, and
    not the more complex cases like an embedded SELECT.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 与客户端生成的表达式类似，[`Column.server_default`](metadata.html#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column")可以容纳一般的SQL表达式，但是预期这些通常会是简单的函数和表达式，而不是更复杂的情况，比如嵌套的SELECT。
- en: '## Marking Implicitly Generated Values, timestamps, and Triggered Columns'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '## 标记隐式生成的值、时间戳和触发列'
- en: 'Columns which generate a new value on INSERT or UPDATE based on other server-side
    database mechanisms, such as database-specific auto-generating behaviors such
    as seen with TIMESTAMP columns on some platforms, as well as custom triggers that
    invoke upon INSERT or UPDATE to generate a new value, may be called out using
    [`FetchedValue`](#sqlalchemy.schema.FetchedValue "sqlalchemy.schema.FetchedValue")
    as a marker:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 当插入或更新时，基于其他服务器端数据库机制生成新值的列，例如在某些平台上与时间戳列一起看到的数据库特定的自动生成行为，以及在插入或更新时调用的自定义触发器以生成新值，可以使用[`FetchedValue`](#sqlalchemy.schema.FetchedValue
    "sqlalchemy.schema.FetchedValue")作为标记：
- en: '[PRE59]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: The [`FetchedValue`](#sqlalchemy.schema.FetchedValue "sqlalchemy.schema.FetchedValue")
    indicator does not affect the rendered DDL for the CREATE TABLE. Instead, it marks
    the column as one that will have a new value populated by the database during
    the process of an INSERT or UPDATE statement, and for supporting databases may
    be used to indicate that the column should be part of a RETURNING or OUTPUT clause
    for the statement. Tools such as the SQLAlchemy ORM then make use of this marker
    in order to know how to get at the value of the column after such an operation.
    In particular, the `ValuesBase.return_defaults()` method can be used with an [`Insert`](dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") or [`Update`](dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") construct to indicate that these values should
    be returned.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FetchedValue`](#sqlalchemy.schema.FetchedValue "sqlalchemy.schema.FetchedValue")
    指示器不会影响CREATE TABLE的渲染DDL。相反，它标记了在INSERT或UPDATE语句的过程中由数据库填充新值的列，并且对于支持的数据库，可能会用于指示该列应该是RETURNING或OUTPUT子句的一部分。然后，诸如SQLAlchemy
    ORM之类的工具使用此标记来了解如何获取此类操作后列的值。特别是，可以使用`ValuesBase.return_defaults()`方法与[`Insert`](dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert")或[`Update`](dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update")构造来指示应返回这些值。'
- en: For details on using [`FetchedValue`](#sqlalchemy.schema.FetchedValue "sqlalchemy.schema.FetchedValue")
    with the ORM, see [Fetching Server-Generated Defaults](../orm/persistence_techniques.html#orm-server-defaults).
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 有关使用ORM中的[`FetchedValue`](#sqlalchemy.schema.FetchedValue "sqlalchemy.schema.FetchedValue")的详细信息，请参阅[获取服务器生成的默认值](../orm/persistence_techniques.html#orm-server-defaults)。
- en: Warning
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: The [`Column.server_onupdate`](metadata.html#sqlalchemy.schema.Column.params.server_onupdate
    "sqlalchemy.schema.Column") directive **does not** currently produce MySQL’s “ON
    UPDATE CURRENT_TIMESTAMP()” clause. See [Rendering ON UPDATE CURRENT TIMESTAMP
    for MySQL / MariaDB’s explicit_defaults_for_timestamp](../dialects/mysql.html#mysql-timestamp-onupdate)
    for background on how to produce this clause.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Column.server_onupdate`](metadata.html#sqlalchemy.schema.Column.params.server_onupdate
    "sqlalchemy.schema.Column") 指令目前**不会**生成 MySQL 的“ON UPDATE CURRENT_TIMESTAMP()”子句。有关如何生成此子句的背景信息，请参阅[为
    MySQL / MariaDB 的 explicit_defaults_for_timestamp 渲染 ON UPDATE CURRENT TIMESTAMP](../dialects/mysql.html#mysql-timestamp-onupdate)。'
- en: See also
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Fetching Server-Generated Defaults](../orm/persistence_techniques.html#orm-server-defaults)'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '[获取服务器生成的默认值](../orm/persistence_techniques.html#orm-server-defaults)'
- en: '## Defining Sequences'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '## 定义序列'
- en: SQLAlchemy represents database sequences using the [`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") object, which is considered to be a special case
    of “column default”. It only has an effect on databases which have explicit support
    for sequences, which among SQLAlchemy’s included dialects includes PostgreSQL,
    Oracle, MS SQL Server, and MariaDB. The [`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") object is otherwise ignored.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy使用[`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")对象表示数据库序列，这被认为是“列默认值”的特殊情况。它仅对具有对序列的明确支持的数据库产生影响，其中包括SQLAlchemy包含的方言中的PostgreSQL、Oracle、MS
    SQL Server和MariaDB。否则，[`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")对象将被忽略。
- en: Tip
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: In newer database engines, the [`Identity`](#sqlalchemy.schema.Identity "sqlalchemy.schema.Identity")
    construct should likely be preferred vs. [`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") for generation of integer primary key values. See
    the section [Identity Columns (GENERATED { ALWAYS | BY DEFAULT } AS IDENTITY)](#identity-ddl)
    for background on this construct.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 在较新的数据库引擎中，应该优先使用[`Identity`](#sqlalchemy.schema.Identity "sqlalchemy.schema.Identity")构造生成整数主键值，而不是[`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")。有关此构造的背景信息，请参阅[Identity Columns (GENERATED { ALWAYS
    | BY DEFAULT } AS IDENTITY)](#identity-ddl)。
- en: 'The [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    may be placed on any column as a “default” generator to be used during INSERT
    operations, and can also be configured to fire off during UPDATE operations if
    desired. It is most commonly used in conjunction with a single integer primary
    key column:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")可以放置在任何列上作为“默认”生成器，在INSERT操作期间使用，并且如果需要，还可以配置在UPDATE操作期间触发。它通常与单个整数主键列一起使用：'
- en: '[PRE60]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Where above, the table `cartitems` is associated with a sequence named `cart_id_seq`.
    Emitting [`MetaData.create_all()`](metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") for the above table will include:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述情况下，表`cartitems`与名为`cart_id_seq`的序列相关联。发出上述表的[`MetaData.create_all()`](metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all")将包括：
- en: '[PRE61]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Tip
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: 'When using tables with explicit schema names (detailed at [Specifying the Schema
    Name](metadata.html#schema-table-schema-name)), the configured schema of the [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") is **not** automatically shared by an embedded [`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence"), instead, specify [`Sequence.schema`](#sqlalchemy.schema.Sequence.params.schema
    "sqlalchemy.schema.Sequence"):'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: '当使用具有显式模式名称的表（详细信息请参阅[指定模式名称](metadata.html#schema-table-schema-name)）时，[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")的配置模式**不会**自动由嵌入的[`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")共享，而是需要指定[`Sequence.schema`](#sqlalchemy.schema.Sequence.params.schema
    "sqlalchemy.schema.Sequence"):'
- en: '[PRE62]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: The [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence") may
    also be made to automatically make use of the [`MetaData.schema`](metadata.html#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData") setting on the [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") in use; see [Associating a Sequence with the MetaData](#sequence-metadata)
    for background.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")也可以自动使用正在使用的[`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")的设置中的[`MetaData.schema`](metadata.html#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData")；有关背景信息，请参阅[将序列与MetaData关联](#sequence-metadata)。'
- en: 'When [`Insert`](dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    DML constructs are invoked against the `cartitems` table, without an explicit
    value passed for the `cart_id` column, the `cart_id_seq` sequence will be used
    to generate a value on participating backends. Typically, the sequence function
    is embedded in the INSERT statement, which is combined with RETURNING so that
    the newly generated value can be returned to the Python process:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 当针对`cartitems`表调用[`Insert`](dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    DML构造时，如果没有为`cart_id`列传递显式值，则`cart_id_seq`序列将用于在参与的后端生成一个值。通常，序列函数嵌入在INSERT语句中，与RETURNING结合在一起，以便新生成的值可以返回给Python进程：
- en: '[PRE63]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: When using [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") to invoke an [`Insert`](dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") construct, newly generated primary key identifiers,
    including but not limited to those generated using [`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence"), are available from the [`CursorResult`](connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") construct using the [`CursorResult.inserted_primary_key`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key") attribute.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用[`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")来调用[`Insert`](dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert")构造时，包括但不限于使用[`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")生成的新生成的主键标识符，可以通过[`CursorResult`](connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult")构造使用[`CursorResult.inserted_primary_key`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key")属性获得。
- en: When the [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    is associated with a [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    as its **Python-side** default generator, the [`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") will also be subject to “CREATE SEQUENCE” and “DROP
    SEQUENCE” DDL when similar DDL is emitted for the owning [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), such as when using [`MetaData.create_all()`](metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") to generate DDL for a series of tables.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 当将 [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence") 关联到
    [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    作为其 **Python-side** 默认生成器时，当为拥有 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 发出类似 DDL 的情况下，例如使用 [`MetaData.create_all()`](metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") 为一系列表生成 DDL 时，该 [`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") 也将受到 “CREATE SEQUENCE” 和 “DROP SEQUENCE” DDL 的约束。
- en: The [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence") may
    also be associated with a [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") construct directly. This allows the [`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") to be used in more than one [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") at a time and also allows the [`MetaData.schema`](metadata.html#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData") parameter to be inherited. See the section [Associating
    a Sequence with the MetaData](#sequence-metadata) for background.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence") 也可以直接与
    [`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    构造关联。这允许 [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    在多个 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    中同时使用，并且还允许继承 [`MetaData.schema`](metadata.html#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData") 参数。有关详情，请参见 [将序列与元数据关联](#sequence-metadata) 部分。'
- en: Associating a Sequence on a SERIAL column
  id: totrans-368
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 SERIAL 列上关联一个序列
- en: 'PostgreSQL’s SERIAL datatype is an auto-incrementing type that implies the
    implicit creation of a PostgreSQL sequence when CREATE TABLE is emitted. The [`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") construct, when indicated for a [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"), may indicate that it should not be used in this specific
    case by specifying a value of `True` for the [`Sequence.optional`](#sqlalchemy.schema.Sequence.params.optional
    "sqlalchemy.schema.Sequence") parameter. This allows the given [`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") to be used for backends that have no alternative
    primary key generation system but to ignore it for backends such as PostgreSQL
    which will automatically generate a sequence for a particular column:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL 的 SERIAL 数据类型是一种自增类型，意味着在发出 CREATE TABLE 命令时隐式创建了一个 PostgreSQL 序列。当为
    [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    指定了 [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence") 构造时，可以通过将
    [`Sequence.optional`](#sqlalchemy.schema.Sequence.params.optional "sqlalchemy.schema.Sequence")
    参数的值设置为 `True` 来指示在这种特定情况下不应使用它。这允许给定的 [`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") 用于没有其他替代主键生成系统的后端，但对于自动为特定列生成序列的后端（例如 PostgreSQL），可以忽略它：
- en: '[PRE64]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: In the above example, `CREATE TABLE` for PostgreSQL will make use of the `SERIAL`
    datatype for the `cart_id` column, and the `cart_id_seq` sequence will be ignored.
    However on Oracle, the `cart_id_seq` sequence will be created explicitly.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，对于 PostgreSQL，`CREATE TABLE` 将使用 `SERIAL` 数据类型来创建 `cart_id` 列，并且 `cart_id_seq`
    序列将被忽略。然而在 Oracle 中，`cart_id_seq` 序列将被显式创建。
- en: Tip
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: This particular interaction of SERIAL and SEQUENCE is fairly legacy, and as
    in other cases, using [`Identity`](#sqlalchemy.schema.Identity "sqlalchemy.schema.Identity")
    instead will simplify the operation to simply use `IDENTITY` on all supported
    backends.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: SERIAL 和 SEQUENCE 的这种特定交互在相当程度上是遗留的，在其他情况下，使用 [`Identity`](#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity") 将简化操作，只需在所有支持的后端上使用 `IDENTITY` 即可。
- en: Executing a Sequence Standalone
  id: totrans-374
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 执行一个独立的序列
- en: 'A SEQUENCE is a first class schema object in SQL and can be used to generate
    values independently in the database. If you have a [`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") object, it can be invoked with its “next value”
    instruction by passing it directly to a SQL execution method:'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: SEQUENCE 是 SQL 中的一种一流模式对象，可用于在数据库中独立生成值。如果有 [`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") 对象，可以通过直接将其传递给 SQL 执行方法来调用其“next value”指令：
- en: '[PRE65]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'In order to embed the “next value” function of a [`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") inside of a SQL statement like a SELECT or INSERT,
    use the [`Sequence.next_value()`](#sqlalchemy.schema.Sequence.next_value "sqlalchemy.schema.Sequence.next_value")
    method, which will render at statement compilation time a SQL function that is
    appropriate for the target backend:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将 [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence") 的“next
    value”函数嵌入到类似于 SELECT 或 INSERT 的 SQL 语句中，可以使用 [`Sequence.next_value()`](#sqlalchemy.schema.Sequence.next_value
    "sqlalchemy.schema.Sequence.next_value") 方法，该方法将在语句编译时生成适用于目标后端的 SQL 函数：
- en: '[PRE66]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '### Associating a Sequence with the MetaData'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: '### 将序列与 MetaData 关联'
- en: 'For a [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    that is to be associated with arbitrary [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects, the [`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") may be associated with a particular [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData"), using the [`Sequence.metadata`](#sqlalchemy.schema.Sequence.params.metadata
    "sqlalchemy.schema.Sequence") parameter:'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 对于将与任意 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    对象关联的 [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")，可以使用
    [`Sequence.metadata`](#sqlalchemy.schema.Sequence.params.metadata "sqlalchemy.schema.Sequence.metadata")
    参数将 [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence") 关联到特定的
    [`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")：
- en: '[PRE67]'
  id: totrans-381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Such a sequence can then be associated with columns in the usual way:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 然后可以以通常的方式将这样的序列与列关联起来：
- en: '[PRE68]'
  id: totrans-383
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: In the above example, the [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    object is treated as an independent schema construct that can exist on its own
    or be shared among tables.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，[`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    对象被视为独立的模式构造，可以独立存在或在表之间共享。
- en: 'Explicitly associating the [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    with [`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    allows for the following behaviors:'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 明确将 [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence") 与
    [`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    关联允许以下行为：
- en: The [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence") will
    inherit the [`MetaData.schema`](metadata.html#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData") parameter specified to the target [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData"), which affects the production of CREATE / DROP DDL
    as well as how the [`Sequence.next_value()`](#sqlalchemy.schema.Sequence.next_value
    "sqlalchemy.schema.Sequence.next_value") function is rendered in SQL statements.
  id: totrans-386
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence") 将继承指定给目标
    [`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    的 [`MetaData.schema`](metadata.html#sqlalchemy.schema.MetaData.params.schema "sqlalchemy.schema.MetaData")
    参数，这影响了 CREATE / DROP DDL 的生成以及 SQL 语句中 [`Sequence.next_value()`](#sqlalchemy.schema.Sequence.next_value
    "sqlalchemy.schema.Sequence.next_value") 函数的呈现方式。'
- en: The [`MetaData.create_all()`](metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") and [`MetaData.drop_all()`](metadata.html#sqlalchemy.schema.MetaData.drop_all
    "sqlalchemy.schema.MetaData.drop_all") methods will emit CREATE / DROP for this
    [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence"), even if
    the [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence") is
    not associated with any [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    / [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    that’s a member of this [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData").
  id: totrans-387
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`MetaData.create_all()`](metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") 和 [`MetaData.drop_all()`](metadata.html#sqlalchemy.schema.MetaData.drop_all
    "sqlalchemy.schema.MetaData.drop_all") 方法将发出 CREATE / DROP 用于此 [`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")，即使该 [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    未与任何此 [`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    的成员 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    / [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    相关联。'
- en: Associating a Sequence as the Server Side Default
  id: totrans-388
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将序列关联为服务器端默认值
- en: Note
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The following technique is known to work only with the PostgreSQL database.
    It does not work with Oracle.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 以下技术仅在 PostgreSQL 数据库中有效，不适用于 Oracle。
- en: 'The preceding sections illustrate how to associate a [`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") with a [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") as the **Python side default generator**:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的部分说明了如何将 [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    与 [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    关联为**Python 端默认生成器**：
- en: '[PRE69]'
  id: totrans-392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: In the above case, the [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    will automatically be subject to CREATE SEQUENCE / DROP SEQUENCE DDL when the
    related [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    is subject to CREATE / DROP. However, the sequence will **not** be present as
    the server-side default for the column when CREATE TABLE is emitted.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述情况下，当相关的 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    被 CREATE / DROP 时，[`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    将自动受到 CREATE SEQUENCE / DROP SEQUENCE DDL 的影响。但是，当发出 CREATE TABLE 时，该序列不会作为列的服务器端默认值存在。
- en: 'If we want the sequence to be used as a server-side default, meaning it takes
    place even if we emit INSERT commands to the table from the SQL command line,
    we can use the [`Column.server_default`](metadata.html#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column") parameter in conjunction with the value-generation
    function of the sequence, available from the [`Sequence.next_value()`](#sqlalchemy.schema.Sequence.next_value
    "sqlalchemy.schema.Sequence.next_value") method. Below we illustrate the same
    [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence") being associated
    with the [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    both as the Python-side default generator as well as the server-side default generator:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们希望序列被用作服务器端默认值，即使我们从 SQL 命令行向表中发出 INSERT 命令，我们可以使用 [`Column.server_default`](metadata.html#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column") 参数与序列的值生成函数一起使用，该函数可以从 [`Sequence.next_value()`](#sqlalchemy.schema.Sequence.next_value
    "sqlalchemy.schema.Sequence.next_value") 方法中获取。下面我们将演示相同的 [`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") 作为 Python 端默认生成器以及服务器端默认生成器与 [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 相关联的情况：
- en: '[PRE70]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'or with the ORM:'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 或者使用 ORM：
- en: '[PRE71]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'When the “CREATE TABLE” statement is emitted, on PostgreSQL it would be emitted
    as:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 当发出“CREATE TABLE”语句时，在 PostgreSQL 上，它将被生成为：
- en: '[PRE72]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Placement of the [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    in both the Python-side and server-side default generation contexts ensures that
    the “primary key fetch” logic works in all cases. Typically, sequence-enabled
    databases also support RETURNING for INSERT statements, which is used automatically
    by SQLAlchemy when emitting this statement. However if RETURNING is not used for
    a particular insert, then SQLAlchemy would prefer to “pre-execute” the sequence
    outside of the INSERT statement itself, which only works if the sequence is included
    as the Python-side default generator function.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 端和服务器端默认生成上下文中放置 [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    确保“主键获取”逻辑在所有情况下都能正常工作。通常，启用序列的数据库还支持 INSERT 语句的 RETURNING，当发出此语句时，SQLAlchemy
    会自动使用它。但是，如果对于特定的插入未使用 RETURNING，则 SQLAlchemy 更愿意在 INSERT 语句本身之外“预先执行”序列，只有在将序列作为
    Python 端默认生成函数包含时才能正常工作。
- en: The example also associates the [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    with the enclosing [`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    directly, which again ensures that the [`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") is fully associated with the parameters of the [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") collection including the default schema, if any.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 该示例还将 [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    直接与封闭的 [`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    关联起来，这再次确保 [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    完全与 [`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    集合的参数相关联，包括默认模式（如果有）。
- en: See also
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Sequences/SERIAL/IDENTITY](../dialects/postgresql.html#postgresql-sequences)
    - in the PostgreSQL dialect documentation'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: '[序列/SERIAL/IDENTITY](../dialects/postgresql.html#postgresql-sequences) - 在
    PostgreSQL 方言文档中'
- en: '[RETURNING Support](../dialects/oracle.html#oracle-returning) - in the Oracle
    dialect documentation'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: '[返回支持](../dialects/oracle.html#oracle-returning) - 在 Oracle 方言文档中'
- en: Associating a Sequence on a SERIAL column
  id: totrans-405
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将序列关联到 SERIAL 列
- en: 'PostgreSQL’s SERIAL datatype is an auto-incrementing type that implies the
    implicit creation of a PostgreSQL sequence when CREATE TABLE is emitted. The [`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") construct, when indicated for a [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"), may indicate that it should not be used in this specific
    case by specifying a value of `True` for the [`Sequence.optional`](#sqlalchemy.schema.Sequence.params.optional
    "sqlalchemy.schema.Sequence") parameter. This allows the given [`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") to be used for backends that have no alternative
    primary key generation system but to ignore it for backends such as PostgreSQL
    which will automatically generate a sequence for a particular column:'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL 的 SERIAL 数据类型是一种自增类型，它意味着在发出 CREATE TABLE 时会隐式创建一个 PostgreSQL 序列。当为
    [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    指定 [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence") 构造时，可以通过为
    [`Sequence.optional`](#sqlalchemy.schema.Sequence.params.optional "sqlalchemy.schema.Sequence")
    参数指定 `True` 值来表明在这种特定情况下不应使用它。这允许给定的 [`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") 用于没有其他替代主键生成系统的后端，但对于诸如 PostgreSQL 之类的后端，它会自动生成一个特定列的序列：
- en: '[PRE73]'
  id: totrans-407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: In the above example, `CREATE TABLE` for PostgreSQL will make use of the `SERIAL`
    datatype for the `cart_id` column, and the `cart_id_seq` sequence will be ignored.
    However on Oracle, the `cart_id_seq` sequence will be created explicitly.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，对于 PostgreSQL 的 `CREATE TABLE` 将使用 `SERIAL` 数据类型来创建 `cart_id` 列，而 `cart_id_seq`
    序列将被忽略。然而，在 Oracle 中，`cart_id_seq` 序列将被显式创建。
- en: Tip
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: This particular interaction of SERIAL and SEQUENCE is fairly legacy, and as
    in other cases, using [`Identity`](#sqlalchemy.schema.Identity "sqlalchemy.schema.Identity")
    instead will simplify the operation to simply use `IDENTITY` on all supported
    backends.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: SERIAL 和 SEQUENCE 的这种特定交互相当古老，与其他情况一样，改用 [`Identity`](#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity") 将简化操作，只需在所有支持的后端上使用 `IDENTITY` 即可。
- en: Executing a Sequence Standalone
  id: totrans-411
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 单独执行序列
- en: 'A SEQUENCE is a first class schema object in SQL and can be used to generate
    values independently in the database. If you have a [`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") object, it can be invoked with its “next value”
    instruction by passing it directly to a SQL execution method:'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: SEQUENCE 是 SQL 中的一级模式对象，并且可以在数据库中独立生成值。如果你有一个 [`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") 对象，可以直接将其传递给 SQL 执行方法，通过其“next value”指令来调用它：
- en: '[PRE74]'
  id: totrans-413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'In order to embed the “next value” function of a [`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") inside of a SQL statement like a SELECT or INSERT,
    use the [`Sequence.next_value()`](#sqlalchemy.schema.Sequence.next_value "sqlalchemy.schema.Sequence.next_value")
    method, which will render at statement compilation time a SQL function that is
    appropriate for the target backend:'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将 [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence") 的“next
    value”函数嵌入到类似 SELECT 或 INSERT 的 SQL 语句中，可以使用 [`Sequence.next_value()`](#sqlalchemy.schema.Sequence.next_value
    "sqlalchemy.schema.Sequence.next_value") 方法，该方法将在语句编译时生成适合目标后端的 SQL 函数：
- en: '[PRE75]'
  id: totrans-415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '### Associating a Sequence with the MetaData'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: '### 将 Sequence 与 MetaData 关联起来'
- en: 'For a [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    that is to be associated with arbitrary [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects, the [`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") may be associated with a particular [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData"), using the [`Sequence.metadata`](#sqlalchemy.schema.Sequence.params.metadata
    "sqlalchemy.schema.Sequence") parameter:'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 对于要与任意 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    对象关联的 [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")，可以使用
    [`Sequence.metadata`](#sqlalchemy.schema.Sequence.params.metadata "sqlalchemy.schema.Sequence")
    参数将 [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence") 关联到特定的
    [`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")：
- en: '[PRE76]'
  id: totrans-418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Such a sequence can then be associated with columns in the usual way:'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 这样的序列可以按照通常的方式与列关联起来：
- en: '[PRE77]'
  id: totrans-420
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: In the above example, the [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    object is treated as an independent schema construct that can exist on its own
    or be shared among tables.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，[`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    对象被视为一个独立的模式构造，可以独立存在或在表之间共享。
- en: 'Explicitly associating the [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    with [`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    allows for the following behaviors:'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 显式地将 [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    与 [`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    关联起来，可以实现以下行为：
- en: The [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence") will
    inherit the [`MetaData.schema`](metadata.html#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData") parameter specified to the target [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData"), which affects the production of CREATE / DROP DDL
    as well as how the [`Sequence.next_value()`](#sqlalchemy.schema.Sequence.next_value
    "sqlalchemy.schema.Sequence.next_value") function is rendered in SQL statements.
  id: totrans-423
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence") 会继承指定给目标
    [`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    的 [`MetaData.schema`](metadata.html#sqlalchemy.schema.MetaData.params.schema "sqlalchemy.schema.MetaData")
    参数，这会影响 CREATE / DROP DDL 的生成，以及 [`Sequence.next_value()`](#sqlalchemy.schema.Sequence.next_value
    "sqlalchemy.schema.Sequence.next_value") 函数在 SQL 语句中的呈现方式。'
- en: The [`MetaData.create_all()`](metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") and [`MetaData.drop_all()`](metadata.html#sqlalchemy.schema.MetaData.drop_all
    "sqlalchemy.schema.MetaData.drop_all") methods will emit CREATE / DROP for this
    [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence"), even if
    the [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence") is
    not associated with any [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    / [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    that’s a member of this [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData").
  id: totrans-424
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`MetaData.create_all()`](metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") 和 [`MetaData.drop_all()`](metadata.html#sqlalchemy.schema.MetaData.drop_all
    "sqlalchemy.schema.MetaData.drop_all") 方法将为此 [`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") 发出 CREATE / DROP，即使该 [`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") 未与此 [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") 的任何成员 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") / [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 关联。'
- en: Associating a Sequence as the Server Side Default
  id: totrans-425
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将 Sequence 关联为服务器端默认
- en: Note
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The following technique is known to work only with the PostgreSQL database.
    It does not work with Oracle.
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 以下技术仅在 PostgreSQL 数据库中可用。它在 Oracle 中不起作用。
- en: 'The preceding sections illustrate how to associate a [`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") with a [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") as the **Python side default generator**:'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的部分演示了如何将 [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    关联到 [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    作为**Python端默认生成器**：
- en: '[PRE78]'
  id: totrans-429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: In the above case, the [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    will automatically be subject to CREATE SEQUENCE / DROP SEQUENCE DDL when the
    related [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    is subject to CREATE / DROP. However, the sequence will **not** be present as
    the server-side default for the column when CREATE TABLE is emitted.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述情况下，当相关的 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    要被创建 / 删除时，[`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    将自动受到 CREATE SEQUENCE / DROP SEQUENCE DDL 的影响。但是，在发出 CREATE TABLE 时，该序列不会出现为该列的服务器端默认。
- en: 'If we want the sequence to be used as a server-side default, meaning it takes
    place even if we emit INSERT commands to the table from the SQL command line,
    we can use the [`Column.server_default`](metadata.html#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column") parameter in conjunction with the value-generation
    function of the sequence, available from the [`Sequence.next_value()`](#sqlalchemy.schema.Sequence.next_value
    "sqlalchemy.schema.Sequence.next_value") method. Below we illustrate the same
    [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence") being associated
    with the [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    both as the Python-side default generator as well as the server-side default generator:'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们希望序列被用作服务器端默认，即使我们从 SQL 命令行向表中发出 INSERT 命令，我们可以使用 [`Column.server_default`](metadata.html#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column") 参数，与序列的值生成函数一起使用，该函数可以从 [`Sequence.next_value()`](#sqlalchemy.schema.Sequence.next_value
    "sqlalchemy.schema.Sequence.next_value") 方法获得。下面我们演示了相同的 [`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") 同时关联到 [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")，既作为 Python 端的默认生成器，又作为服务器端的默认生成器：
- en: '[PRE79]'
  id: totrans-432
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'or with the ORM:'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 或使用 ORM：
- en: '[PRE80]'
  id: totrans-434
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'When the “CREATE TABLE” statement is emitted, on PostgreSQL it would be emitted
    as:'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 在发出“CREATE TABLE”语句时，在 PostgreSQL 上会发出：
- en: '[PRE81]'
  id: totrans-436
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: Placement of the [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    in both the Python-side and server-side default generation contexts ensures that
    the “primary key fetch” logic works in all cases. Typically, sequence-enabled
    databases also support RETURNING for INSERT statements, which is used automatically
    by SQLAlchemy when emitting this statement. However if RETURNING is not used for
    a particular insert, then SQLAlchemy would prefer to “pre-execute” the sequence
    outside of the INSERT statement itself, which only works if the sequence is included
    as the Python-side default generator function.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 端和服务器端默认生成上下文中放置[`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")可以确保“主键提取”逻辑在所有情况下都有效。
    通常，启用序列的数据库也支持对 INSERT 语句使用 RETURNING，当发出此语句时，SQLAlchemy 会自动使用它。 但是，如果对特定插入未使用
    RETURNING，则 SQLAlchemy 更愿意在 INSERT 语句本身之外“预执行”序列，这仅在序列作为 Python 端默认生成器函数时有效。
- en: The example also associates the [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    with the enclosing [`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    directly, which again ensures that the [`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") is fully associated with the parameters of the [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") collection including the default schema, if any.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 该示例还将[`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")直接与封闭的[`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")关联起来，这再次确保了[`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")与[`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")集合的参数完全关联，包括默认模式（如果有）。
- en: See also
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Sequences/SERIAL/IDENTITY](../dialects/postgresql.html#postgresql-sequences)
    - in the PostgreSQL dialect documentation'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: '[序列/SERIAL/IDENTITY](../dialects/postgresql.html#postgresql-sequences) - 在
    PostgreSQL 方言文档中'
- en: '[RETURNING Support](../dialects/oracle.html#oracle-returning) - in the Oracle
    dialect documentation'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: '[RETURNING 支持](../dialects/oracle.html#oracle-returning) - 在 Oracle 方言文档中'
- en: '## Computed Columns (GENERATED ALWAYS AS)'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: '## 计算列（GENERATED ALWAYS AS）'
- en: New in version 1.3.11.
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 1.3.11 版中新增。
- en: The [`Computed`](#sqlalchemy.schema.Computed "sqlalchemy.schema.Computed") construct
    allows a [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    to be declared in DDL as a “GENERATED ALWAYS AS” column, that is, one which has
    a value that is computed by the database server. The construct accepts a SQL expression
    typically declared textually using a string or the [`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct, in a similar manner as that of [`CheckConstraint`](constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint"). The SQL expression is then interpreted by
    the database server in order to determine the value for the column within a row.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Computed`](#sqlalchemy.schema.Computed "sqlalchemy.schema.Computed") 构造允许将
    [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    声明为“GENERATED ALWAYS AS”列，在 DDL 中，即由数据库服务器计算值的列。 该构造接受一个 SQL 表达式，通常使用字符串或 [`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") 构造进行文本声明，类似于 [`CheckConstraint`](constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") 的方式。 然后，数据库服务器会解释该 SQL 表达式，以确定行内列的值。'
- en: 'Example:'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: '示例:'
- en: '[PRE82]'
  id: totrans-446
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'The DDL for the `square` table when run on a PostgreSQL 12 backend will look
    like:'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 在 PostgreSQL 12 后端上运行 `square` 表的 DDL 如下所示：
- en: '[PRE83]'
  id: totrans-448
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Whether the value is persisted upon INSERT and UPDATE, or if it is calculated
    on fetch, is an implementation detail of the database; the former is known as
    “stored” and the latter is known as “virtual”. Some database implementations support
    both, but some only support one or the other. The optional [`Computed.persisted`](#sqlalchemy.schema.Computed.params.persisted
    "sqlalchemy.schema.Computed") flag may be specified as `True` or `False` to indicate
    if the “STORED” or “VIRTUAL” keyword should be rendered in DDL, however this will
    raise an error if the keyword is not supported by the target backend; leaving
    it unset will use a working default for the target backend.
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 值是在 INSERT 和 UPDATE 时持久化，还是在获取时计算，是数据库的实现细节；前者称为“存储”，后者称为“虚拟”。 一些数据库实现支持两者，但有些只支持其中一个。
    可以指定可选的 [`Computed.persisted`](#sqlalchemy.schema.Computed.params.persisted "sqlalchemy.schema.Computed")
    标志为 `True` 或 `False`，以指示是否在 DDL 中渲染“STORED”或“VIRTUAL”关键字，但是如果目标后端不支持该关键字，则会引发错误；
    如果将其设置为未设置，则将使用目标后端的有效默认值。
- en: The [`Computed`](#sqlalchemy.schema.Computed "sqlalchemy.schema.Computed") construct
    is a subclass of the [`FetchedValue`](#sqlalchemy.schema.FetchedValue "sqlalchemy.schema.FetchedValue")
    object, and will set itself up as both the “server default” and “server onupdate”
    generator for the target [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column"),
    meaning it will be treated as a default generating column when INSERT and UPDATE
    statements are generated, as well as that it will be fetched as a generating column
    when using the ORM. This includes that it will be part of the RETURNING clause
    of the database for databases which support RETURNING and the generated values
    are to be eagerly fetched.
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: '[`计算列`](#sqlalchemy.schema.Computed "sqlalchemy.schema.Computed") 构造是 [`FetchedValue`](#sqlalchemy.schema.FetchedValue
    "sqlalchemy.schema.FetchedValue") 对象的子类，并且会自行设置为目标 [`列`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 的“服务器默认值”和“服务器更新时生成器”，这意味着当生成 INSERT 和 UPDATE 语句时，它将被视为默认生成的列，以及当使用
    ORM 时，它将被视为生成的列被获取。这包括它将作为数据库的 RETURNING 子句的一部分，对于支持 RETURNING 并且生成的值需要被急切地获取的数据库。'
- en: Note
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 注
- en: A [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    that is defined with the [`Computed`](#sqlalchemy.schema.Computed "sqlalchemy.schema.Computed")
    construct may not store any value outside of that which the server applies to
    it; SQLAlchemy’s behavior when a value is passed for such a column to be written
    in INSERT or UPDATE is currently that the value will be ignored.
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [`计算列`](#sqlalchemy.schema.Computed "sqlalchemy.schema.Computed") 构造定义的 [`列`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 可能不会存储除服务器应用之外的任何值；当尝试写入 INSERT 或 UPDATE 时，SQLAlchemy
    目前的行为是将忽略该值。
- en: '“GENERATED ALWAYS AS” is currently known to be supported by:'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: “GENERATED ALWAYS AS” 目前已知受支持的数据库有：
- en: MySQL version 5.7 and onwards
  id: totrans-454
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL 版本 5.7 及以上
- en: MariaDB 10.x series and onwards
  id: totrans-455
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MariaDB 10.x 系列及以上
- en: PostgreSQL as of version 12
  id: totrans-456
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PostgreSQL 版本 12 及以上
- en: Oracle - with the caveat that RETURNING does not work correctly with UPDATE
    (a warning will be emitted to this effect when the UPDATE..RETURNING that includes
    a computed column is rendered)
  id: totrans-457
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Oracle - 注意 RETURNING 在 UPDATE 中无法正常工作（在包含计算列的 UPDATE..RETURNING 被呈现时会发出警告）
- en: Microsoft SQL Server
  id: totrans-458
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Microsoft SQL Server
- en: SQLite as of version 3.31
  id: totrans-459
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQLite 版本 3.31 及以上
- en: When [`Computed`](#sqlalchemy.schema.Computed "sqlalchemy.schema.Computed")
    is used with an unsupported backend, if the target dialect does not support it,
    a [`CompileError`](exceptions.html#sqlalchemy.exc.CompileError "sqlalchemy.exc.CompileError")
    is raised when attempting to render the construct. Otherwise, if the dialect supports
    it but the particular database server version in use does not, then a subclass
    of [`DBAPIError`](exceptions.html#sqlalchemy.exc.DBAPIError "sqlalchemy.exc.DBAPIError"),
    usually [`OperationalError`](exceptions.html#sqlalchemy.exc.OperationalError "sqlalchemy.exc.OperationalError"),
    is raised when the DDL is emitted to the database.
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 当 [`计算列`](#sqlalchemy.schema.Computed "sqlalchemy.schema.Computed") 与不受支持的后端一起使用时，如果目标方言不支持它，则在尝试呈现构造时会引发
    [`CompileError`](exceptions.html#sqlalchemy.exc.CompileError "sqlalchemy.exc.CompileError")。否则，如果方言支持它但使用的特定数据库服务器版本不支持它，则在将
    DDL 发送到数据库时会引发 [`DBAPIError`](exceptions.html#sqlalchemy.exc.DBAPIError "sqlalchemy.exc.DBAPIError")
    的子类，通常是 [`OperationalError`](exceptions.html#sqlalchemy.exc.OperationalError "sqlalchemy.exc.OperationalError")。
- en: See also
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见
- en: '[`Computed`](#sqlalchemy.schema.Computed "sqlalchemy.schema.Computed")'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: '[`计算列`](#sqlalchemy.schema.Computed "sqlalchemy.schema.Computed")'
- en: '## Identity Columns (GENERATED { ALWAYS | BY DEFAULT } AS IDENTITY)'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: '## 自增列（GENERATED { ALWAYS | BY DEFAULT } AS IDENTITY）'
- en: New in version 1.4.
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4 版本中新增。
- en: The [`Identity`](#sqlalchemy.schema.Identity "sqlalchemy.schema.Identity") construct
    allows a [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    to be declared as an identity column and rendered in DDL as “GENERATED { ALWAYS
    | BY DEFAULT } AS IDENTITY”. An identity column has its value automatically generated
    by the database server using an incrementing (or decrementing) sequence. The construct
    shares most of its option to control the database behaviour with [`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence").
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Identity`](#sqlalchemy.schema.Identity "sqlalchemy.schema.Identity") 构造允许将
    [`列`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column") 声明为自增列，并在
    DDL 中呈现为“GENERATED { ALWAYS | BY DEFAULT } AS IDENTITY”。自增列的值由数据库服务器自动生成，使用增量（或减量）序列。该构造与
    [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence") 共享大部分用于控制数据库行为的选项。'
- en: 'Example:'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE84]'
  id: totrans-467
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'The DDL for the `data` table when run on a PostgreSQL 12 backend will look
    like:'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 在 PostgreSQL 12 后端上运行时，`data` 表的DDL如下所示：
- en: '[PRE85]'
  id: totrans-469
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'The database will generate a value for the `id` column upon insert, starting
    from `42`, if the statement did not already contain a value for the `id` column.
    An identity column can also require that the database generates the value of the
    column, ignoring the value passed with the statement or raising an error, depending
    on the backend. To activate this mode, set the parameter [`Identity.always`](#sqlalchemy.schema.Identity.params.always
    "sqlalchemy.schema.Identity") to `True` in the [`Identity`](#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity") construct. Updating the previous example to include
    this parameter will generate the following DDL:'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库将在插入时为 `id` 列生成一个值，从 `42` 开始，如果语句尚未包含 `id` 列的值。身份列也可以要求数据库生成列的值，忽略语句中传递的值或者根据后端引发错误。要激活此模式，请在
    [`Identity`](#sqlalchemy.schema.Identity "sqlalchemy.schema.Identity") 构造函数中将参数
    [`Identity.always`](#sqlalchemy.schema.Identity.params.always "sqlalchemy.schema.Identity")
    设置为 `True`。将上一个示例更新以包含此参数将生成以下DDL：
- en: '[PRE86]'
  id: totrans-471
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: The [`Identity`](#sqlalchemy.schema.Identity "sqlalchemy.schema.Identity") construct
    is a subclass of the [`FetchedValue`](#sqlalchemy.schema.FetchedValue "sqlalchemy.schema.FetchedValue")
    object, and will set itself up as the “server default” generator for the target
    [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column"),
    meaning it will be treated as a default generating column when INSERT statements
    are generated, as well as that it will be fetched as a generating column when
    using the ORM. This includes that it will be part of the RETURNING clause of the
    database for databases which support RETURNING and the generated values are to
    be eagerly fetched.
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Identity`](#sqlalchemy.schema.Identity "sqlalchemy.schema.Identity") 构造函数是
    [`FetchedValue`](#sqlalchemy.schema.FetchedValue "sqlalchemy.schema.FetchedValue")
    对象的子类，并将自己设置为目标 [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    的“服务器默认”生成器，这意味着当生成 INSERT 语句时，它将被视为默认生成列，以及在使用ORM时，它将被视为生成列。这包括它将作为数据库的 RETURNING
    子句的一部分，对于支持 RETURNING 并且要急切获取生成的值的数据库来说，它将被提前获取。'
- en: 'The [`Identity`](#sqlalchemy.schema.Identity "sqlalchemy.schema.Identity")
    construct is currently known to be supported by:'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 当前已知支持 [`Identity`](#sqlalchemy.schema.Identity "sqlalchemy.schema.Identity")
    构造函数的包括：
- en: PostgreSQL as of version 10.
  id: totrans-474
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PostgreSQL 版本为 10。
- en: Oracle as of version 12\. It also supports passing `always=None` to enable the
    default generated mode and the parameter `on_null=True` to specify “ON NULL” in
    conjunction with a “BY DEFAULT” identity column.
  id: totrans-475
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Oracle 版本为 12\. 还支持传递 `always=None` 以启用默认生成模式，以及传递参数 `on_null=True` 以指定“ON NULL”与“BY
    DEFAULT”身份列一起使用。
- en: Microsoft SQL Server. MSSQL uses a custom syntax that only supports the `start`
    and `increment` parameters, and ignores all other.
  id: totrans-476
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Microsoft SQL Server. MSSQL 使用一种自定义语法，仅支持 `start` 和 `increment` 参数，而忽略所有其他参数。
- en: When [`Identity`](#sqlalchemy.schema.Identity "sqlalchemy.schema.Identity")
    is used with an unsupported backend, it is ignored, and the default SQLAlchemy
    logic for autoincrementing columns is used.
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 当 [`Identity`](#sqlalchemy.schema.Identity "sqlalchemy.schema.Identity") 与不受支持的后端一起使用时，它会被忽略，并且会使用默认的SQLAlchemy自增列逻辑。
- en: An error is raised when a [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") specifies both an [`Identity`](#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity") and also sets [`Column.autoincrement`](metadata.html#sqlalchemy.schema.Column.params.autoincrement
    "sqlalchemy.schema.Column") to `False`.
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 当 [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    同时指定 [`Identity`](#sqlalchemy.schema.Identity "sqlalchemy.schema.Identity") 并将
    [`Column.autoincrement`](metadata.html#sqlalchemy.schema.Column.params.autoincrement
    "sqlalchemy.schema.Column") 设置为 `False` 时，将引发错误。
- en: See also
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Identity`](#sqlalchemy.schema.Identity "sqlalchemy.schema.Identity")'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Identity`](#sqlalchemy.schema.Identity "sqlalchemy.schema.Identity")'
- en: Default Objects API
  id: totrans-481
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 默认对象API
- en: '| Object Name | Description |'
  id: totrans-482
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-483
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [ColumnDefault](#sqlalchemy.schema.ColumnDefault) | A plain default value
    on a column. |'
  id: totrans-484
  prefs: []
  type: TYPE_TB
  zh: '| [ColumnDefault](#sqlalchemy.schema.ColumnDefault) | 列的普通默认值。 |'
- en: '| [Computed](#sqlalchemy.schema.Computed) | Defines a generated column, i.e.
    “GENERATED ALWAYS AS” syntax. |'
  id: totrans-485
  prefs: []
  type: TYPE_TB
  zh: '| [Computed](#sqlalchemy.schema.Computed) | 定义了一个生成的列，即“GENERATED ALWAYS AS”语法。
    |'
- en: '| [DefaultClause](#sqlalchemy.schema.DefaultClause) | A DDL-specified DEFAULT
    column value. |'
  id: totrans-486
  prefs: []
  type: TYPE_TB
  zh: '| [DefaultClause](#sqlalchemy.schema.DefaultClause) | 由DDL指定的DEFAULT列值。 |'
- en: '| [DefaultGenerator](#sqlalchemy.schema.DefaultGenerator) | Base class for
    column *default* values. |'
  id: totrans-487
  prefs: []
  type: TYPE_TB
  zh: '| [DefaultGenerator](#sqlalchemy.schema.DefaultGenerator) | 用于列默认值的基类。 |'
- en: '| [FetchedValue](#sqlalchemy.schema.FetchedValue) | A marker for a transparent
    database-side default. |'
  id: totrans-488
  prefs: []
  type: TYPE_TB
  zh: '| [FetchedValue](#sqlalchemy.schema.FetchedValue) | 透明数据库端默认值的标记。 |'
- en: '| [Identity](#sqlalchemy.schema.Identity) | Defines an identity column, i.e.
    “GENERATED { ALWAYS &#124; BY DEFAULT } AS IDENTITY” syntax. |'
  id: totrans-489
  prefs: []
  type: TYPE_TB
  zh: '| [Identity](#sqlalchemy.schema.Identity) | 定义标识列，即“GENERATED { ALWAYS &#124;
    BY DEFAULT } AS IDENTITY”语法。 |'
- en: '| [Sequence](#sqlalchemy.schema.Sequence) | Represents a named database sequence.
    |'
  id: totrans-490
  prefs: []
  type: TYPE_TB
  zh: '| [Sequence](#sqlalchemy.schema.Sequence) | 表示命名的数据库序列。 |'
- en: '[PRE87]'
  id: totrans-491
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: Defines a generated column, i.e. “GENERATED ALWAYS AS” syntax.
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 定义一个生成列，即“GENERATED ALWAYS AS”语法。
- en: 'The [`Computed`](#sqlalchemy.schema.Computed "sqlalchemy.schema.Computed")
    construct is an inline construct added to the argument list of a [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") object:'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Computed`](#sqlalchemy.schema.Computed "sqlalchemy.schema.Computed")构造是添加到[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象的参数列表中的内联构造：'
- en: '[PRE88]'
  id: totrans-494
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: See the linked documentation below for complete details.
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅下面链接的文档以获取完整详细信息。
- en: New in version 1.3.11.
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.3.11中的新功能。
- en: See also
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Computed Columns (GENERATED ALWAYS AS)](#computed-ddl)'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: '[计算列（GENERATED ALWAYS AS）](#computed-ddl)'
- en: '**Members**'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.schema.Computed.__init__), [copy()](#sqlalchemy.schema.Computed.copy)'
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.schema.Computed.__init__), [copy()](#sqlalchemy.schema.Computed.copy)'
- en: '**Class signature**'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.Computed`](#sqlalchemy.schema.Computed "sqlalchemy.schema.Computed")
    ([`sqlalchemy.schema.FetchedValue`](#sqlalchemy.schema.FetchedValue "sqlalchemy.schema.FetchedValue"),
    [`sqlalchemy.schema.SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem"))
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.schema.Computed`](#sqlalchemy.schema.Computed "sqlalchemy.schema.Computed")（[`sqlalchemy.schema.FetchedValue`](#sqlalchemy.schema.FetchedValue
    "sqlalchemy.schema.FetchedValue")，[`sqlalchemy.schema.SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem"))
- en: '[PRE89]'
  id: totrans-503
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: Construct a GENERATED ALWAYS AS DDL construct to accompany a [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column").
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个生成的DDL构造，以配合[`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")。
- en: 'Parameters:'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`sqltext` –'
  id: totrans-506
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sqltext` –'
- en: A string containing the column generation expression, which will be used verbatim,
    or a SQL expression construct, such as a [`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") object. If given as a string, the object is
    converted to a [`text()`](sqlelement.html#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")
    object.
  id: totrans-507
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 包含列生成表达式的字符串，该表达式将逐字使用，或者SQL表达式构造，例如[`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")对象。 如果以字符串形式给出，则将对象转换为[`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")对象。
- en: Warning
  id: totrans-508
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 警告
- en: The [`Computed.sqltext`](#sqlalchemy.schema.Computed.params.sqltext "sqlalchemy.schema.Computed")
    argument to [`Computed`](#sqlalchemy.schema.Computed "sqlalchemy.schema.Computed")
    can be passed as a Python string argument, which will be treated as **trusted
    SQL text** and rendered as given. **DO NOT PASS UNTRUSTED INPUT TO THIS PARAMETER**.
  id: totrans-509
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Computed.sqltext`](#sqlalchemy.schema.Computed.params.sqltext "sqlalchemy.schema.Computed")参数可以作为Python字符串参数传递给[`Computed`](#sqlalchemy.schema.Computed
    "sqlalchemy.schema.Computed")，它将被视为**受信任的SQL文本**并按照给定的方式呈现。 **不要将不受信任的输入传递给此参数**。'
- en: '`persisted` –'
  id: totrans-510
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`persisted` –'
- en: 'Optional, controls how this column should be persisted by the database. Possible
    values are:'
  id: totrans-511
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选，控制数据库如何持久化此列。 可能的值为：
- en: '`None`, the default, it will use the default persistence defined by the database.'
  id: totrans-512
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`None`，默认值，将使用数据库定义的默认持久性。'
- en: '`True`, will render `GENERATED ALWAYS AS ... STORED`, or the equivalent for
    the target database if supported.'
  id: totrans-513
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`True`，将呈现`GENERATED ALWAYS AS ... STORED`，或者如果支持的话，将呈现目标数据库的等效值。'
- en: '`False`, will render `GENERATED ALWAYS AS ... VIRTUAL`, or the equivalent for
    the target database if supported.'
  id: totrans-514
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`False`，将呈现`GENERATED ALWAYS AS ... VIRTUAL`，或者如果支持的话，将呈现目标数据库的等效值。'
- en: Specifying `True` or `False` may raise an error when the DDL is emitted to the
    target database if the database does not support that persistence option. Leaving
    this parameter at its default of `None` is guaranteed to succeed for all databases
    that support `GENERATED ALWAYS AS`.
  id: totrans-515
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当DDL发出到目标数据库时，如果数据库不支持持久性选项，则指定`True`或`False`可能会引发错误。 将此参数保留在其默认值`None`上可确保对所有支持`GENERATED
    ALWAYS AS`的数据库都能成功。
- en: '[PRE90]'
  id: totrans-516
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'Deprecated since version 1.4: The [`Computed.copy()`](#sqlalchemy.schema.Computed.copy
    "sqlalchemy.schema.Computed.copy") method is deprecated and will be removed in
    a future release.'
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.4起已弃用：[`Computed.copy()`](#sqlalchemy.schema.Computed.copy "sqlalchemy.schema.Computed.copy")方法已弃用，并将在将来的版本中删除。
- en: '[PRE91]'
  id: totrans-518
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: A plain default value on a column.
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: 列上的普通默认值。
- en: This could correspond to a constant, a callable function, or a SQL clause.
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能对应于一个常量，一个可调用函数，或者一个 SQL 子句。
- en: '[`ColumnDefault`](#sqlalchemy.schema.ColumnDefault "sqlalchemy.schema.ColumnDefault")
    is generated automatically whenever the `default`, `onupdate` arguments of [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") are used. A [`ColumnDefault`](#sqlalchemy.schema.ColumnDefault
    "sqlalchemy.schema.ColumnDefault") can be passed positionally as well.'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 每当使用 [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    的 `default`、`onupdate` 参数时，都会自动生成 [`ColumnDefault`](#sqlalchemy.schema.ColumnDefault
    "sqlalchemy.schema.ColumnDefault")。[`ColumnDefault`](#sqlalchemy.schema.ColumnDefault
    "sqlalchemy.schema.ColumnDefault") 也可以按位置传递。
- en: 'For example, the following:'
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下内容：
- en: '[PRE92]'
  id: totrans-523
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'Is equivalent to:'
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于：
- en: '[PRE93]'
  id: totrans-525
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '**Class signature**'
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.ColumnDefault`](#sqlalchemy.schema.ColumnDefault "sqlalchemy.schema.ColumnDefault")
    ([`sqlalchemy.schema.DefaultGenerator`](#sqlalchemy.schema.DefaultGenerator "sqlalchemy.schema.DefaultGenerator"),
    `abc.ABC`)
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.schema.ColumnDefault`](#sqlalchemy.schema.ColumnDefault "sqlalchemy.schema.ColumnDefault")
    ([`sqlalchemy.schema.DefaultGenerator`](#sqlalchemy.schema.DefaultGenerator "sqlalchemy.schema.DefaultGenerator"),
    `abc.ABC`)
- en: '[PRE94]'
  id: totrans-528
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: A DDL-specified DEFAULT column value.
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: 由 DDL 指定的 DEFAULT 列值。
- en: '[`DefaultClause`](#sqlalchemy.schema.DefaultClause "sqlalchemy.schema.DefaultClause")
    is a [`FetchedValue`](#sqlalchemy.schema.FetchedValue "sqlalchemy.schema.FetchedValue")
    that also generates a “DEFAULT” clause when “CREATE TABLE” is emitted.'
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DefaultClause`](#sqlalchemy.schema.DefaultClause "sqlalchemy.schema.DefaultClause")
    是一个 [`FetchedValue`](#sqlalchemy.schema.FetchedValue "sqlalchemy.schema.FetchedValue")，在发出“CREATE
    TABLE”时也会生成一个“DEFAULT”子句。'
- en: '[`DefaultClause`](#sqlalchemy.schema.DefaultClause "sqlalchemy.schema.DefaultClause")
    is generated automatically whenever the `server_default`, `server_onupdate` arguments
    of [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    are used. A [`DefaultClause`](#sqlalchemy.schema.DefaultClause "sqlalchemy.schema.DefaultClause")
    can be passed positionally as well.'
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: 每当使用 [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    的 `server_default`、`server_onupdate` 参数时，都会自动生成 [`DefaultClause`](#sqlalchemy.schema.DefaultClause
    "sqlalchemy.schema.DefaultClause")。[`DefaultClause`](#sqlalchemy.schema.DefaultClause
    "sqlalchemy.schema.DefaultClause") 也可以按位置传递。
- en: 'For example, the following:'
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下内容：
- en: '[PRE95]'
  id: totrans-533
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'Is equivalent to:'
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于：
- en: '[PRE96]'
  id: totrans-535
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '**Class signature**'
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.DefaultClause`](#sqlalchemy.schema.DefaultClause "sqlalchemy.schema.DefaultClause")
    ([`sqlalchemy.schema.FetchedValue`](#sqlalchemy.schema.FetchedValue "sqlalchemy.schema.FetchedValue"))
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.schema.DefaultClause`](#sqlalchemy.schema.DefaultClause "sqlalchemy.schema.DefaultClause")
    ([`sqlalchemy.schema.FetchedValue`](#sqlalchemy.schema.FetchedValue "sqlalchemy.schema.FetchedValue"))
- en: '[PRE97]'
  id: totrans-538
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: Base class for column *default* values.
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: 列默认值的基类。
- en: This object is only present on column.default or column.onupdate. It’s not valid
    as a server default.
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: 此对象仅存在于 column.default 或 column.onupdate。它不作为服务器默认值有效。
- en: '**Class signature**'
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.DefaultGenerator`](#sqlalchemy.schema.DefaultGenerator
    "sqlalchemy.schema.DefaultGenerator") ([`sqlalchemy.sql.expression.Executable`](selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable"), [`sqlalchemy.schema.SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem"))
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.schema.DefaultGenerator`](#sqlalchemy.schema.DefaultGenerator
    "sqlalchemy.schema.DefaultGenerator") ([`sqlalchemy.sql.expression.Executable`](selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable"), [`sqlalchemy.schema.SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem"))
- en: '[PRE98]'
  id: totrans-543
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: A marker for a transparent database-side default.
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: 一个用于透明数据库端默认值的标记。
- en: Use [`FetchedValue`](#sqlalchemy.schema.FetchedValue "sqlalchemy.schema.FetchedValue")
    when the database is configured to provide some automatic default for a column.
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: 当数据库配置为为列提供一些自动默认值时，请使用 [`FetchedValue`](#sqlalchemy.schema.FetchedValue "sqlalchemy.schema.FetchedValue")。
- en: 'E.g.:'
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE99]'
  id: totrans-547
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: Would indicate that some trigger or default generator will create a new value
    for the `foo` column during an INSERT.
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: 将指示某个触发器或默认生成器在插入期间为 `foo` 列创建一个新值。
- en: See also
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Marking Implicitly Generated Values, timestamps, and Triggered Columns](#triggered-columns)'
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: '[标记隐式生成的值、时间戳和触发列](#triggered-columns)'
- en: '**Class signature**'
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.FetchedValue`](#sqlalchemy.schema.FetchedValue "sqlalchemy.schema.FetchedValue")
    (`sqlalchemy.sql.expression.SchemaEventTarget`)
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.schema.FetchedValue`](#sqlalchemy.schema.FetchedValue "sqlalchemy.schema.FetchedValue")
    (`sqlalchemy.sql.expression.SchemaEventTarget`)
- en: '[PRE100]'
  id: totrans-553
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: Represents a named database sequence.
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一个命名的数据库序列。
- en: The [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence") object
    represents the name and configurational parameters of a database sequence. It
    also represents a construct that can be “executed” by a SQLAlchemy [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") or [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"), rendering the appropriate “next value” function
    for the target database and returning a result.
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence") 对象表示数据库序列的名称和配置参数。它还表示可以由
    SQLAlchemy [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    或 [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    “执行”的构造，为目标数据库渲染适当的 “下一个值” 函数并返回结果。'
- en: 'The [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    is typically associated with a primary key column:'
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence") 通常与主键列相关联：'
- en: '[PRE101]'
  id: totrans-557
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: When CREATE TABLE is emitted for the above [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), if the target platform supports sequences, a CREATE
    SEQUENCE statement will be emitted as well. For platforms that don’t support sequences,
    the [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence") construct
    is ignored.
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: 当为上述 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    发出 CREATE TABLE 时，如果目标平台支持序列，则还将发出 CREATE SEQUENCE 语句。对于不支持序列的平台，将忽略 [`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") 构造。
- en: See also
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Defining Sequences](#defaults-sequences)'
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: '[定义序列](#defaults-sequences)'
- en: '[`CreateSequence`](ddl.html#sqlalchemy.schema.CreateSequence "sqlalchemy.schema.CreateSequence")'
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: '[`CreateSequence`](ddl.html#sqlalchemy.schema.CreateSequence "sqlalchemy.schema.CreateSequence")'
- en: '[`DropSequence`](ddl.html#sqlalchemy.schema.DropSequence "sqlalchemy.schema.DropSequence")'
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DropSequence`](ddl.html#sqlalchemy.schema.DropSequence "sqlalchemy.schema.DropSequence")'
- en: '**Members**'
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.schema.Sequence.__init__), [create()](#sqlalchemy.schema.Sequence.create),
    [drop()](#sqlalchemy.schema.Sequence.drop), [next_value()](#sqlalchemy.schema.Sequence.next_value)'
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.schema.Sequence.__init__), [create()](#sqlalchemy.schema.Sequence.create),
    [drop()](#sqlalchemy.schema.Sequence.drop), [next_value()](#sqlalchemy.schema.Sequence.next_value)'
- en: '**Class signature**'
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    (`sqlalchemy.schema.HasSchemaAttr`, `sqlalchemy.schema.IdentityOptions`, [`sqlalchemy.schema.DefaultGenerator`](#sqlalchemy.schema.DefaultGenerator
    "sqlalchemy.schema.DefaultGenerator"))
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.schema.Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    (`sqlalchemy.schema.HasSchemaAttr`, `sqlalchemy.schema.IdentityOptions`, [`sqlalchemy.schema.DefaultGenerator`](#sqlalchemy.schema.DefaultGenerator
    "sqlalchemy.schema.DefaultGenerator"))
- en: '[PRE102]'
  id: totrans-567
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: Construct a [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    object.
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    对象。
- en: 'Parameters:'
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`name` – the name of the sequence.'
  id: totrans-570
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 序列的名称。'
- en: '`start` –'
  id: totrans-571
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`start` –'
- en: the starting index of the sequence. This value is used when the CREATE SEQUENCE
    command is emitted to the database as the value of the “START WITH” clause. If
    `None`, the clause is omitted, which on most platforms indicates a starting value
    of 1.
  id: totrans-572
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 序列的起始索引。当向数据库发出 CREATE SEQUENCE 命令时，此值用作 “START WITH” 子句的值。如果为 `None`，则省略子句，大多数平台上表示起始值为
    1。
- en: 'Changed in version 2.0: The [`Sequence.start`](#sqlalchemy.schema.Sequence.params.start
    "sqlalchemy.schema.Sequence") parameter is required in order to have DDL emit
    “START WITH”. This is a reversal of a change made in version 1.4 which would implicitly
    render “START WITH 1” if the [`Sequence.start`](#sqlalchemy.schema.Sequence.params.start
    "sqlalchemy.schema.Sequence") were not included. See [The Sequence construct reverts
    to not having any explicit default “start” value; impacts MS SQL Server](../changelog/whatsnew_20.html#change-7211)
    for more detail.'
  id: totrans-573
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本 2.0 开始：要使 DDL 发出 “START WITH” 命令，[`Sequence.start`](#sqlalchemy.schema.Sequence.params.start
    "sqlalchemy.schema.Sequence") 参数是必需的。这是对版本 1.4 中所做更改的逆转，该更改如果未包括 [`Sequence.start`](#sqlalchemy.schema.Sequence.params.start
    "sqlalchemy.schema.Sequence") 将隐式地渲染 “START WITH 1”。有关更多详细信息，请参见[序列构造将恢复为没有任何显式默认的“start”值；影响
    MS SQL Server](../changelog/whatsnew_20.html#change-7211)。
- en: '`increment` – the increment value of the sequence. This value is used when
    the CREATE SEQUENCE command is emitted to the database as the value of the “INCREMENT
    BY” clause. If `None`, the clause is omitted, which on most platforms indicates
    an increment of 1.'
  id: totrans-574
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`increment` – 序列的增量值。当向数据库发出 CREATE SEQUENCE 命令时，此值用作 “INCREMENT BY” 子句的值。如果为
    `None`，则省略子句，大多数平台上表示增量为 1。'
- en: '`minvalue` – the minimum value of the sequence. This value is used when the
    CREATE SEQUENCE command is emitted to the database as the value of the “MINVALUE”
    clause. If `None`, the clause is omitted, which on most platforms indicates a
    minvalue of 1 and -2^63-1 for ascending and descending sequences, respectively.'
  id: totrans-575
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`minvalue` – 序列的最小值。当将 CREATE SEQUENCE 命令发送到数据库时，此值用作“MINVALUE”子句的值。如果为`None`，则省略该子句，在大多数平台上表示升序和降序序列的最小值分别为1和-2^63-1。'
- en: '`maxvalue` – the maximum value of the sequence. This value is used when the
    CREATE SEQUENCE command is emitted to the database as the value of the “MAXVALUE”
    clause. If `None`, the clause is omitted, which on most platforms indicates a
    maxvalue of 2^63-1 and -1 for ascending and descending sequences, respectively.'
  id: totrans-576
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`maxvalue` – 序列的最大值。当将 CREATE SEQUENCE 命令发送到数据库时，此值用作“MAXVALUE”子句的值。如果为`None`，则省略该子句，在大多数平台上表示升序和降序序列的最大值分别为2^63-1和-1。'
- en: '`nominvalue` – no minimum value of the sequence. This value is used when the
    CREATE SEQUENCE command is emitted to the database as the value of the “NO MINVALUE”
    clause. If `None`, the clause is omitted, which on most platforms indicates a
    minvalue of 1 and -2^63-1 for ascending and descending sequences, respectively.'
  id: totrans-577
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nominvalue` – 序列的无最小值。当将 CREATE SEQUENCE 命令发送到数据库时，此值用作“NO MINVALUE”子句的值。如果为`None`，则省略该子句，在大多数平台上表示升序和降序序列的最小值分别为1和-2^63-1。'
- en: '`nomaxvalue` – no maximum value of the sequence. This value is used when the
    CREATE SEQUENCE command is emitted to the database as the value of the “NO MAXVALUE”
    clause. If `None`, the clause is omitted, which on most platforms indicates a
    maxvalue of 2^63-1 and -1 for ascending and descending sequences, respectively.'
  id: totrans-578
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nomaxvalue` – 序列的无最大值。当将 CREATE SEQUENCE 命令发送到数据库时，此值用作“NO MAXVALUE”子句的值。如果为`None`，则省略该子句，在大多数平台上表示升序和降序序列的最大值分别为2^63-1和-1。'
- en: '`cycle` – allows the sequence to wrap around when the maxvalue or minvalue
    has been reached by an ascending or descending sequence respectively. This value
    is used when the CREATE SEQUENCE command is emitted to the database as the “CYCLE”
    clause. If the limit is reached, the next number generated will be the minvalue
    or maxvalue, respectively. If cycle=False (the default) any calls to nextval after
    the sequence has reached its maximum value will return an error.'
  id: totrans-579
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cycle` – 允许序列在达到最大值或最小值时循环。当升序或降序序列分别达到最大值或最小值时，此值用于在将 CREATE SEQUENCE 命令发送到数据库时作为“CYCLE”子句。如果达到限制，则生成的下一个数字将分别是最小值或最大值。如果
    cycle=False（默认值），则在序列达到其最大值后调用 nextval 将返回错误。'
- en: '`schema` – optional schema name for the sequence, if located in a schema other
    than the default. The rules for selecting the schema name when a [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") is also present are the same as that of [`Table.schema`](metadata.html#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table").'
  id: totrans-580
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` – 序列的可选模式名称，如果位于除默认模式之外的模式中。当[`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")也存在时，选择模式名称的规则与[`Table.schema`](metadata.html#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table")的规则相同。'
- en: '`cache` – optional integer value; number of future values in the sequence which
    are calculated in advance. Renders the CACHE keyword understood by Oracle and
    PostgreSQL.'
  id: totrans-581
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cache` – 可选的整数值；提前计算序列中未来值的数量。渲染 Oracle 和 PostgreSQL 理解的 CACHE 关键字。'
- en: '`order` – optional boolean value; if `True`, renders the ORDER keyword, understood
    by Oracle, indicating the sequence is definitively ordered. May be necessary to
    provide deterministic ordering using Oracle RAC.'
  id: totrans-582
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`order` – 可选的布尔值；如果为`True`，则渲染 ORDER 关键字，Oracle可理解此关键字，表示序列是有确定顺序的。可能需要使用 Oracle
    RAC 提供确定性排序。'
- en: '`data_type` –'
  id: totrans-583
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data_type` –'
- en: The type to be returned by the sequence, for dialects that allow us to choose
    between INTEGER, BIGINT, etc. (e.g., mssql).
  id: totrans-584
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 序列要返回的类型，对于允许我们在 INTEGER、BIGINT 等之间选择的方言（例如 mssql）。
- en: New in version 1.4.0.
  id: totrans-585
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自1.4.0版本新增。
- en: '`optional` – boolean value, when `True`, indicates that this [`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") object only needs to be explicitly generated on
    backends that don’t provide another way to generate primary key identifiers. Currently,
    it essentially means, “don’t create this sequence on the PostgreSQL backend, where
    the SERIAL keyword creates a sequence for us automatically”.'
  id: totrans-586
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`optional` – 布尔值，当为`True`时，表示这个[`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")对象只需在不提供其他方法生成主键标识符的后端上显式生成。目前，它基本上意味着“在
    PostgreSQL 后端上不要创建这个序列，在那里，SERIAL 关键字会自动为我们创建一个序列”。'
- en: '`quote` – boolean value, when `True` or `False`, explicitly forces quoting
    of the [`Sequence.name`](#sqlalchemy.schema.Sequence.params.name "sqlalchemy.schema.Sequence")
    on or off. When left at its default of `None`, normal quoting rules based on casing
    and reserved words take place.'
  id: totrans-587
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`quote` – 布尔值，当为`True`或`False`时，显式地强制对 [`Sequence.name`](#sqlalchemy.schema.Sequence.params.name
    "sqlalchemy.schema.Sequence") 进行引用或取消引用。当保持其默认值`None`时，将根据大小写和保留字规则进行正常的引用。'
- en: '`quote_schema` – Set the quoting preferences for the `schema` name.'
  id: totrans-588
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`quote_schema` – 设置对`schema`名称的引用偏好。'
- en: '`metadata` –'
  id: totrans-589
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`metadata` –'
- en: 'optional [`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    object which this [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    will be associated with. A [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    that is associated with a [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") gains the following capabilities:'
  id: totrans-590
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的 [`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    对象，这个[`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")将与之关联。与
    [`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    关联的 [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence") 将获得以下功能：
- en: The [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence") will
    inherit the [`MetaData.schema`](metadata.html#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData") parameter specified to the target [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData"), which affects the production of CREATE / DROP DDL,
    if any.
  id: totrans-591
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")将继承指定给目标[`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")的[`MetaData.schema`](metadata.html#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData")参数，这会影响创建/删除DDL的生成，如果有的话。'
- en: The [`Sequence.create()`](#sqlalchemy.schema.Sequence.create "sqlalchemy.schema.Sequence.create")
    and [`Sequence.drop()`](#sqlalchemy.schema.Sequence.drop "sqlalchemy.schema.Sequence.drop")
    methods automatically use the engine bound to the [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object, if any.
  id: totrans-592
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Sequence.create()`](#sqlalchemy.schema.Sequence.create "sqlalchemy.schema.Sequence.create")
    和 [`Sequence.drop()`](#sqlalchemy.schema.Sequence.drop "sqlalchemy.schema.Sequence.drop")
    方法会自动使用绑定到 [`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    对象的引擎（如果有的话）。'
- en: The [`MetaData.create_all()`](metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") and [`MetaData.drop_all()`](metadata.html#sqlalchemy.schema.MetaData.drop_all
    "sqlalchemy.schema.MetaData.drop_all") methods will emit CREATE / DROP for this
    [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence"), even if
    the [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence") is
    not associated with any [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    / [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    that’s a member of this [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData").
  id: totrans-593
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`MetaData.create_all()`](metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") 和 [`MetaData.drop_all()`](metadata.html#sqlalchemy.schema.MetaData.drop_all
    "sqlalchemy.schema.MetaData.drop_all") 方法将为这个[`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")发出CREATE / DROP，即使这个[`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")没有与任何属于这个[`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")的[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") / [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")相关联也是如此。'
- en: The above behaviors can only occur if the [`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") is explicitly associated with the [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") via this parameter.
  id: totrans-594
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述行为只有在通过此参数将 [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    显式关联到 [`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    时才会发生。
- en: See also
  id: totrans-595
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Associating a Sequence with the MetaData](#sequence-metadata) - full discussion
    of the [`Sequence.metadata`](#sqlalchemy.schema.Sequence.params.metadata "sqlalchemy.schema.Sequence")
    parameter.'
  id: totrans-596
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[将Sequence与MetaData关联](#sequence-metadata) - 对[`Sequence.metadata`](#sqlalchemy.schema.Sequence.params.metadata
    "sqlalchemy.schema.Sequence")参数的完整讨论。'
- en: '`for_update` – Indicates this [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence"),
    when associated with a [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column"),
    should be invoked for UPDATE statements on that column’s table, rather than for
    INSERT statements, when no value is otherwise present for that column in the statement.'
  id: totrans-597
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`for_update` – 当与[`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")相关联时，表示应该在该列的表上对UPDATE语句调用此[`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")，而不是在INSERT语句中，当该列在语句中没有其他值时。'
- en: '[PRE103]'
  id: totrans-598
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: Creates this sequence in the database.
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据库中创建此序列。
- en: '[PRE104]'
  id: totrans-600
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: Drops this sequence from the database.
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: 从数据库中删除此序列。
- en: '[PRE105]'
  id: totrans-602
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: Return a [`next_value`](functions.html#sqlalchemy.sql.functions.next_value "sqlalchemy.sql.functions.next_value")
    function element which will render the appropriate increment function for this
    [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence") within
    any SQL expression.
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个[`next_value`](functions.html#sqlalchemy.sql.functions.next_value "sqlalchemy.sql.functions.next_value")函数元素，该函数将在任何SQL表达式中为此[`Sequence`](#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")呈现适当的增量函数。
- en: '[PRE106]'
  id: totrans-604
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: Defines an identity column, i.e. “GENERATED { ALWAYS | BY DEFAULT } AS IDENTITY”
    syntax.
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: 定义一个identity列，即“GENERATED { ALWAYS | BY DEFAULT } AS IDENTITY”语法。
- en: 'The [`Identity`](#sqlalchemy.schema.Identity "sqlalchemy.schema.Identity")
    construct is an inline construct added to the argument list of a [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") object:'
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Identity`](#sqlalchemy.schema.Identity "sqlalchemy.schema.Identity") 构造是一个内联构造，添加到[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象的参数列表中：'
- en: '[PRE107]'
  id: totrans-607
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: See the linked documentation below for complete details.
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: 详细信息请参见下面的链接文档。
- en: New in version 1.4.
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4中新增。
- en: See also
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Identity Columns (GENERATED { ALWAYS | BY DEFAULT } AS IDENTITY)](#identity-ddl)'
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
  zh: '[Identity列（GENERATED { ALWAYS | BY DEFAULT } AS IDENTITY）](#identity-ddl)'
- en: '**Members**'
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.schema.Identity.__init__), [copy()](#sqlalchemy.schema.Identity.copy)'
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.schema.Identity.__init__), [copy()](#sqlalchemy.schema.Identity.copy)'
- en: '**Class signature**'
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.Identity`](#sqlalchemy.schema.Identity "sqlalchemy.schema.Identity")
    (`sqlalchemy.schema.IdentityOptions`, [`sqlalchemy.schema.FetchedValue`](#sqlalchemy.schema.FetchedValue
    "sqlalchemy.schema.FetchedValue"), [`sqlalchemy.schema.SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem"))
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.schema.Identity`](#sqlalchemy.schema.Identity "sqlalchemy.schema.Identity")
    (`sqlalchemy.schema.IdentityOptions`, [`sqlalchemy.schema.FetchedValue`](#sqlalchemy.schema.FetchedValue
    "sqlalchemy.schema.FetchedValue"), [`sqlalchemy.schema.SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem"))
- en: '[PRE108]'
  id: totrans-616
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: Construct a GENERATED { ALWAYS | BY DEFAULT } AS IDENTITY DDL construct to accompany
    a [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column").
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个GENERATED { ALWAYS | BY DEFAULT } AS IDENTITY的DDL构造，以配合一个[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")。
- en: See the [`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    documentation for a complete description of most parameters.
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
  zh: 有关大多数参数的完整描述，请参阅[`Sequence`](#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")文档。
- en: Note
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: MSSQL supports this construct as the preferred alternative to generate an IDENTITY
    on a column, but it uses non standard syntax that only support [`Identity.start`](#sqlalchemy.schema.Identity.params.start
    "sqlalchemy.schema.Identity") and [`Identity.increment`](#sqlalchemy.schema.Identity.params.increment
    "sqlalchemy.schema.Identity"). All other parameters are ignored.
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
  zh: MSSQL支持此构造作为在列上生成IDENTITY的首选替代方法，但它使用的非标准语法仅支持[`Identity.start`](#sqlalchemy.schema.Identity.params.start
    "sqlalchemy.schema.Identity")和[`Identity.increment`](#sqlalchemy.schema.Identity.params.increment
    "sqlalchemy.schema.Identity")。所有其他参数都将被忽略。
- en: 'Parameters:'
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`always` – A boolean, that indicates the type of identity column. If `False`
    is specified, the default, then the user-specified value takes precedence. If
    `True` is specified, a user-specified value is not accepted ( on some backends,
    like PostgreSQL, OVERRIDING SYSTEM VALUE, or similar, may be specified in an INSERT
    to override the sequence value). Some backends also have a default value for this
    parameter, `None` can be used to omit rendering this part in the DDL. It will
    be treated as `False` if a backend does not have a default value.'
  id: totrans-622
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`always` – 一个布尔值，表示身份列的类型。如果指定为`False`，则用户指定的值优先。如果指定为`True`，则不接受用户指定的值（在某些后端，如
    PostgreSQL，可以在 INSERT 中指定 OVERRIDING SYSTEM VALUE 或类似的内容来覆盖序列值）。一些后端也对此参数有一个默认值，`None`
    可以用来省略在 DDL 中呈现这部分。如果后端没有默认值，则将其视为`False`。'
- en: '`on_null` – Set to `True` to specify ON NULL in conjunction with a `always=False`
    identity column. This option is only supported on some backends, like Oracle.'
  id: totrans-623
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`on_null` – 设置为`True` 以指定在`always=False`身份列中与`ON NULL`一起使用。此选项仅在某些后端（如 Oracle）上受支持。'
- en: '`start` – the starting index of the sequence.'
  id: totrans-624
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`start` – 序列的起始索引。'
- en: '`increment` – the increment value of the sequence.'
  id: totrans-625
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`increment` – 序列的增量值。'
- en: '`minvalue` – the minimum value of the sequence.'
  id: totrans-626
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`minvalue` – 序列的最小值。'
- en: '`maxvalue` – the maximum value of the sequence.'
  id: totrans-627
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`maxvalue` – 序列的最大值。'
- en: '`nominvalue` – no minimum value of the sequence.'
  id: totrans-628
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nominvalue` – 序列没有最小值。'
- en: '`nomaxvalue` – no maximum value of the sequence.'
  id: totrans-629
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nomaxvalue` – 序列没有最大值。'
- en: '`cycle` – allows the sequence to wrap around when the maxvalue or minvalue
    has been reached.'
  id: totrans-630
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cycle` – 允许序列在达到`maxvalue`或`minvalue`时循环。'
- en: '`cache` – optional integer value; number of future values in the sequence which
    are calculated in advance.'
  id: totrans-631
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cache` – 可选整数值；提前计算的序列中未来值的数量。'
- en: '`order` – optional boolean value; if true, renders the ORDER keyword.'
  id: totrans-632
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`order` – 可选布尔值；如果为真，则呈现 ORDER 关键字。'
- en: '[PRE109]'
  id: totrans-633
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: 'Deprecated since version 1.4: The [`Identity.copy()`](#sqlalchemy.schema.Identity.copy
    "sqlalchemy.schema.Identity.copy") method is deprecated and will be removed in
    a future release.'
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.4 弃用：[`Identity.copy()`](#sqlalchemy.schema.Identity.copy "sqlalchemy.schema.Identity.copy")
    方法已弃用，并将在将来的版本中移除。
