- en: jax.typing module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[`jax.readthedocs.io/en/latest/jax.typing.html`](https://jax.readthedocs.io/en/latest/jax.typing.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The JAX typing module is where JAX-specific static type annotations live. This
    submodule is a work in progress; to see the proposal behind the types exported
    here, see [`jax.readthedocs.io/en/latest/jep/12049-type-annotations.html`](https://jax.readthedocs.io/en/latest/jep/12049-type-annotations.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'The currently-available types are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`jax.Array`: annotation for any JAX array or tracer (i.e. representations of
    arrays within JAX transforms).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.typing.ArrayLike`: annotation for any value that is safe to implicitly
    cast to a JAX array; this includes `jax.Array`, [`numpy.ndarray`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(in NumPy v2.0)"), as well as Python builtin numeric values (e.g. [`int`](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.12)"), [`float`](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.12)"), etc.) and numpy scalar values (e.g. `numpy.int32`, `numpy.flota64`,
    etc.)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.typing.DTypeLike`: annotation for any value that can be cast to a JAX-compatible
    dtype; this includes strings (e.g. ‘float32’, ‘int32’), scalar types (e.g. float,
    np.float32), dtypes (e.g. np.dtype(‘float32’)), or objects with a dtype attribute
    (e.g. jnp.float32, jnp.int32).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We may add additional types here in future releases.
  prefs: []
  type: TYPE_NORMAL
- en: JAX Typing Best Practices
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When annotating JAX arrays in public API functions, we recommend using `ArrayLike`
    for array inputs, and `Array` for array outputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, your function might look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Most of JAX’s public APIs follow this pattern. Note in particular that we recommend
    JAX functions to not accept sequences such as [`list`](https://docs.python.org/3/library/stdtypes.html#list
    "(in Python v3.12)") or [`tuple`](https://docs.python.org/3/library/stdtypes.html#tuple
    "(in Python v3.12)") in place of arrays, as this can cause extra overhead in JAX
    transforms like `jit()` and can behave in unexpected ways with batch-wise transforms
    like `vmap()` or `jax.pmap()`. For more information on this, see [Non-array inputs
    NumPy vs JAX](https://jax.readthedocs.io/en/latest/notebooks/Common_Gotchas_in_JAX.html#non-array-inputs-numpy-vs-jax)
  prefs: []
  type: TYPE_NORMAL
- en: List of Members
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| `ArrayLike` | Type annotation for JAX array-like objects. |'
  prefs: []
  type: TYPE_TB
- en: '| `DTypeLike` | alias of [`str`](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)") &#124; [`type`](https://docs.python.org/3/library/functions.html#type
    "(in Python v3.12)")[[`Any`](https://docs.python.org/3/library/typing.html#typing.Any
    "(in Python v3.12)")] &#124; `dtype` &#124; `SupportsDType` |'
  prefs: []
  type: TYPE_TB
