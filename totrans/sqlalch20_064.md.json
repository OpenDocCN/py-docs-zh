["```py\nfrom __future__ import annotations\n\nfrom typing import Final\nfrom typing import List\n\nfrom sqlalchemy import Column\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import Integer\nfrom sqlalchemy import String\nfrom sqlalchemy import Table\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import relationship\nfrom sqlalchemy.ext.associationproxy import association_proxy\nfrom sqlalchemy.ext.associationproxy import AssociationProxy\n\nclass Base(DeclarativeBase):\n    pass\n\nclass User(Base):\n    __tablename__ = \"user\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str] = mapped_column(String(64))\n    kw: Mapped[List[Keyword]] = relationship(secondary=lambda: user_keyword_table)\n\n    def __init__(self, name: str):\n        self.name = name\n\n    # proxy the 'keyword' attribute from the 'kw' relationship\n    keywords: AssociationProxy[List[str]] = association_proxy(\"kw\", \"keyword\")\n\nclass Keyword(Base):\n    __tablename__ = \"keyword\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    keyword: Mapped[str] = mapped_column(String(64))\n\n    def __init__(self, keyword: str):\n        self.keyword = keyword\n\nuser_keyword_table: Final[Table] = Table(\n    \"user_keyword\",\n    Base.metadata,\n    Column(\"user_id\", Integer, ForeignKey(\"user.id\"), primary_key=True),\n    Column(\"keyword_id\", Integer, ForeignKey(\"keyword.id\"), primary_key=True),\n)\n```", "```py\n>>> user = User(\"jek\")\n>>> user.keywords.append(\"cheese-inspector\")\n>>> user.keywords.append(\"snack-ninja\")\n>>> print(user.keywords)\n['cheese-inspector', 'snack-ninja']\n```", "```py\n>>> # identical operations without using the association proxy\n>>> user = User(\"jek\")\n>>> user.kw.append(Keyword(\"cheese-inspector\"))\n>>> user.kw.append(Keyword(\"snack-ninja\"))\n>>> print([keyword.keyword for keyword in user.kw])\n['cheese-inspector', 'snack-ninja']\n```", "```py\nuser.keywords.append(\"cheese-inspector\")\n```", "```py\nuser.kw.append(Keyword(\"cheese-inspector\"))\n```", "```py\nclass User(Base):\n    ...\n\n    # use Keyword(keyword=kw) on append() events\n    keywords: AssociationProxy[List[str]] = association_proxy(\n        \"kw\", \"keyword\", creator=lambda kw: Keyword(keyword=kw)\n    )\n```", "```py\nfrom __future__ import annotations\n\nfrom typing import List\nfrom typing import Optional\n\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import String\nfrom sqlalchemy.ext.associationproxy import association_proxy\nfrom sqlalchemy.ext.associationproxy import AssociationProxy\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import relationship\n\nclass Base(DeclarativeBase):\n    pass\n\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str] = mapped_column(String(64))\n\n    user_keyword_associations: Mapped[List[UserKeywordAssociation]] = relationship(\n        back_populates=\"user\",\n        cascade=\"all, delete-orphan\",\n    )\n\n    # association proxy of \"user_keyword_associations\" collection\n    # to \"keyword\" attribute\n    keywords: AssociationProxy[List[Keyword]] = association_proxy(\n        \"user_keyword_associations\",\n        \"keyword\",\n        creator=lambda keyword_obj: UserKeywordAssociation(keyword=keyword_obj),\n    )\n\n    def __init__(self, name: str):\n        self.name = name\n\nclass UserKeywordAssociation(Base):\n    __tablename__ = \"user_keyword\"\n    user_id: Mapped[int] = mapped_column(ForeignKey(\"user.id\"), primary_key=True)\n    keyword_id: Mapped[int] = mapped_column(ForeignKey(\"keyword.id\"), primary_key=True)\n    special_key: Mapped[Optional[str]] = mapped_column(String(50))\n\n    user: Mapped[User] = relationship(back_populates=\"user_keyword_associations\")\n\n    keyword: Mapped[Keyword] = relationship()\n\nclass Keyword(Base):\n    __tablename__ = \"keyword\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    keyword: Mapped[str] = mapped_column(\"keyword\", String(64))\n\n    def __init__(self, keyword: str):\n        self.keyword = keyword\n\n    def __repr__(self) -> str:\n        return f\"Keyword({self.keyword!r})\"\n```", "```py\n>>> user = User(\"log\")\n>>> for kw in (Keyword(\"new_from_blammo\"), Keyword(\"its_big\")):\n...     user.keywords.append(kw)\n>>> print(user.keywords)\n[Keyword('new_from_blammo'), Keyword('its_big')]\n```", "```py\n>>> user.user_keyword_associations.append(\n...     UserKeywordAssociation(keyword=Keyword(\"its_heavy\"))\n... )\n```", "```py\n>>> UserKeywordAssociation(\n...     keyword=Keyword(\"its_wood\"), user=user, special_key=\"my special key\"\n... )\n```", "```py\n>>> print(user.keywords)\n[Keyword('new_from_blammo'), Keyword('its_big'), Keyword('its_heavy'), Keyword('its_wood')]\n```", "```py\nfrom __future__ import annotations\nfrom typing import Dict\n\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import String\nfrom sqlalchemy.ext.associationproxy import association_proxy\nfrom sqlalchemy.ext.associationproxy import AssociationProxy\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import relationship\nfrom sqlalchemy.orm.collections import attribute_keyed_dict\n\nclass Base(DeclarativeBase):\n    pass\n\nclass User(Base):\n    __tablename__ = \"user\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str] = mapped_column(String(64))\n\n    # user/user_keyword_associations relationship, mapping\n    # user_keyword_associations with a dictionary against \"special_key\" as key.\n    user_keyword_associations: Mapped[Dict[str, UserKeywordAssociation]] = relationship(\n        back_populates=\"user\",\n        collection_class=attribute_keyed_dict(\"special_key\"),\n        cascade=\"all, delete-orphan\",\n    )\n    # proxy to 'user_keyword_associations', instantiating\n    # UserKeywordAssociation assigning the new key to 'special_key',\n    # values to 'keyword'.\n    keywords: AssociationProxy[Dict[str, Keyword]] = association_proxy(\n        \"user_keyword_associations\",\n        \"keyword\",\n        creator=lambda k, v: UserKeywordAssociation(special_key=k, keyword=v),\n    )\n\n    def __init__(self, name: str):\n        self.name = name\n\nclass UserKeywordAssociation(Base):\n    __tablename__ = \"user_keyword\"\n    user_id: Mapped[int] = mapped_column(ForeignKey(\"user.id\"), primary_key=True)\n    keyword_id: Mapped[int] = mapped_column(ForeignKey(\"keyword.id\"), primary_key=True)\n    special_key: Mapped[str]\n\n    user: Mapped[User] = relationship(\n        back_populates=\"user_keyword_associations\",\n    )\n    keyword: Mapped[Keyword] = relationship()\n\nclass Keyword(Base):\n    __tablename__ = \"keyword\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    keyword: Mapped[str] = mapped_column(String(64))\n\n    def __init__(self, keyword: str):\n        self.keyword = keyword\n\n    def __repr__(self) -> str:\n        return f\"Keyword({self.keyword!r})\"\n```", "```py\n>>> user = User(\"log\")\n\n>>> user.keywords[\"sk1\"] = Keyword(\"kw1\")\n>>> user.keywords[\"sk2\"] = Keyword(\"kw2\")\n\n>>> print(user.keywords)\n{'sk1': Keyword('kw1'), 'sk2': Keyword('kw2')}\n```", "```py\nfrom __future__ import annotations\n\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import String\nfrom sqlalchemy.ext.associationproxy import association_proxy\nfrom sqlalchemy.ext.associationproxy import AssociationProxy\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import relationship\nfrom sqlalchemy.orm.collections import attribute_keyed_dict\n\nclass Base(DeclarativeBase):\n    pass\n\nclass User(Base):\n    __tablename__ = \"user\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str] = mapped_column(String(64))\n\n    user_keyword_associations: Mapped[Dict[str, UserKeywordAssociation]] = relationship(\n        back_populates=\"user\",\n        collection_class=attribute_keyed_dict(\"special_key\"),\n        cascade=\"all, delete-orphan\",\n    )\n    # the same 'user_keyword_associations'->'keyword' proxy as in\n    # the basic dictionary example.\n    keywords: AssociationProxy[Dict[str, str]] = association_proxy(\n        \"user_keyword_associations\",\n        \"keyword\",\n        creator=lambda k, v: UserKeywordAssociation(special_key=k, keyword=v),\n    )\n\n    def __init__(self, name: str):\n        self.name = name\n\nclass UserKeywordAssociation(Base):\n    __tablename__ = \"user_keyword\"\n    user_id: Mapped[int] = mapped_column(ForeignKey(\"user.id\"), primary_key=True)\n    keyword_id: Mapped[int] = mapped_column(ForeignKey(\"keyword.id\"), primary_key=True)\n    special_key: Mapped[str] = mapped_column(String(64))\n    user: Mapped[User] = relationship(\n        back_populates=\"user_keyword_associations\",\n    )\n\n    # the relationship to Keyword is now called\n    # 'kw'\n    kw: Mapped[Keyword] = relationship()\n\n    # 'keyword' is changed to be a proxy to the\n    # 'keyword' attribute of 'Keyword'\n    keyword: AssociationProxy[Dict[str, str]] = association_proxy(\"kw\", \"keyword\")\n\nclass Keyword(Base):\n    __tablename__ = \"keyword\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    keyword: Mapped[str] = mapped_column(String(64))\n\n    def __init__(self, keyword: str):\n        self.keyword = keyword\n```", "```py\n>>> user = User(\"log\")\n>>> user.keywords = {\"sk1\": \"kw1\", \"sk2\": \"kw2\"}\n>>> print(user.keywords)\n{'sk1': 'kw1', 'sk2': 'kw2'}\n\n>>> user.keywords[\"sk3\"] = \"kw3\"\n>>> del user.keywords[\"sk2\"]\n>>> print(user.keywords)\n{'sk1': 'kw1', 'sk3': 'kw3'}\n\n>>> # illustrate un-proxied usage\n... print(user.user_keyword_associations[\"sk3\"].kw)\n<__main__.Keyword object at 0x12ceb90>\n```", "```py\nfrom __future__ import annotations\nfrom sqlalchemy import Column, ForeignKey, Integer, String\nfrom sqlalchemy.ext.associationproxy import association_proxy, AssociationProxy\nfrom sqlalchemy.orm import DeclarativeBase, relationship\nfrom sqlalchemy.orm.collections import attribute_keyed_dict\nfrom sqlalchemy.orm.collections import Mapped\n\nclass Base(DeclarativeBase):\n    pass\n\nclass User(Base):\n    __tablename__ = \"user\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str] = mapped_column(String(64))\n\n    user_keyword_associations: Mapped[UserKeywordAssociation] = relationship(\n        cascade=\"all, delete-orphan\",\n    )\n\n    # object-targeted association proxy\n    keywords: AssociationProxy[List[Keyword]] = association_proxy(\n        \"user_keyword_associations\",\n        \"keyword\",\n    )\n\n    # column-targeted association proxy\n    special_keys: AssociationProxy[List[str]] = association_proxy(\n        \"user_keyword_associations\", \"special_key\"\n    )\n\nclass UserKeywordAssociation(Base):\n    __tablename__ = \"user_keyword\"\n    user_id: Mapped[int] = mapped_column(ForeignKey(\"user.id\"), primary_key=True)\n    keyword_id: Mapped[int] = mapped_column(ForeignKey(\"keyword.id\"), primary_key=True)\n    special_key: Mapped[str] = mapped_column(String(64))\n    keyword: Mapped[Keyword] = relationship()\n\nclass Keyword(Base):\n    __tablename__ = \"keyword\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    keyword: Mapped[str] = mapped_column(String(64))\n```", "```py\n>>> print(session.scalars(select(User).where(User.special_keys == \"jek\")))\nSELECT  \"user\".id  AS  user_id,  \"user\".name  AS  user_name\nFROM  \"user\"\nWHERE  EXISTS  (SELECT  1\nFROM  user_keyword\nWHERE  \"user\".id  =  user_keyword.user_id  AND  user_keyword.special_key  =  :special_key_1) \n```", "```py\n>>> print(session.scalars(select(User).where(User.special_keys.like(\"%jek\"))))\nSELECT  \"user\".id  AS  user_id,  \"user\".name  AS  user_name\nFROM  \"user\"\nWHERE  EXISTS  (SELECT  1\nFROM  user_keyword\nWHERE  \"user\".id  =  user_keyword.user_id  AND  user_keyword.special_key  LIKE  :special_key_1) \n```", "```py\n>>> print(session.scalars(select(User).where(User.keywords.any(Keyword.keyword == \"jek\"))))\nSELECT  \"user\".id  AS  user_id,  \"user\".name  AS  user_name\nFROM  \"user\"\nWHERE  EXISTS  (SELECT  1\nFROM  user_keyword\nWHERE  \"user\".id  =  user_keyword.user_id  AND  (EXISTS  (SELECT  1\nFROM  keyword\nWHERE  keyword.id  =  user_keyword.keyword_id  AND  keyword.keyword  =  :keyword_1))) \n```", "```py\nfrom __future__ import annotations\nfrom sqlalchemy import Column, ForeignKey, Integer, String\nfrom sqlalchemy.ext.associationproxy import association_proxy, AssociationProxy\nfrom sqlalchemy.orm import DeclarativeBase, relationship\nfrom sqlalchemy.orm.collections import attribute_keyed_dict\nfrom sqlalchemy.orm.collections import Mapped\n\nclass Base(DeclarativeBase):\n    pass\n\nclass A(Base):\n    __tablename__ = \"test_a\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    ab: Mapped[AB] = relationship(uselist=False)\n    b: AssociationProxy[B] = association_proxy(\n        \"ab\", \"b\", creator=lambda b: AB(b=b), cascade_scalar_deletes=True\n    )\n\nclass B(Base):\n    __tablename__ = \"test_b\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n\nclass AB(Base):\n    __tablename__ = \"test_ab\"\n    a_id: Mapped[int] = mapped_column(ForeignKey(A.id), primary_key=True)\n    b_id: Mapped[int] = mapped_column(ForeignKey(B.id), primary_key=True)\n\n    b: Mapped[B] = relationship()\n```", "```py\na.b = B()\n```", "```py\na.b = None\nassert a.ab is None\n```", "```py\nfrom __future__ import annotations\n\nfrom typing import List\n\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import String\nfrom sqlalchemy.ext.associationproxy import association_proxy\nfrom sqlalchemy.ext.associationproxy import AssociationProxy\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import relationship\n\nclass Base(DeclarativeBase):\n    pass\n\nclass Recipe(Base):\n    __tablename__ = \"recipe\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str] = mapped_column(String(64))\n\n    steps: Mapped[List[Step]] = relationship(back_populates=\"recipe\")\n    step_descriptions: AssociationProxy[List[str]] = association_proxy(\n        \"steps\", \"description\"\n    )\n\nclass Step(Base):\n    __tablename__ = \"step\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    description: Mapped[str]\n    recipe_id: Mapped[int] = mapped_column(ForeignKey(\"recipe.id\"))\n    recipe: Mapped[Recipe] = relationship(back_populates=\"steps\")\n\n    recipe_name: AssociationProxy[str] = association_proxy(\"recipe\", \"name\")\n\n    def __init__(self, description: str) -> None:\n        self.description = description\n\nmy_snack = Recipe(\n    name=\"afternoon snack\",\n    step_descriptions=[\n        \"slice bread\",\n        \"spread peanut butted\",\n        \"eat sandwich\",\n    ],\n)\n```", "```py\n>>> for i, step in enumerate(my_snack.steps, 1):\n...     print(f\"Step {i} of {step.recipe_name!r}: {step.description}\")\nStep 1 of 'afternoon snack': slice bread\nStep 2 of 'afternoon snack': spread peanut butted\nStep 3 of 'afternoon snack': eat sandwich\n```", "```py\nfunction sqlalchemy.ext.associationproxy.association_proxy(target_collection: str, attr: str, *, creator: _CreatorProtocol | None = None, getset_factory: _GetSetFactoryProtocol | None = None, proxy_factory: _ProxyFactoryProtocol | None = None, proxy_bulk_set: _ProxyBulkSetProtocol | None = None, info: _InfoType | None = None, cascade_scalar_deletes: bool = False, create_on_none_assignment: bool = False, init: _NoArg | bool = _NoArg.NO_ARG, repr: _NoArg | bool = _NoArg.NO_ARG, default: Any | None = _NoArg.NO_ARG, default_factory: _NoArg | Callable[[], _T] = _NoArg.NO_ARG, compare: _NoArg | bool = _NoArg.NO_ARG, kw_only: _NoArg | bool = _NoArg.NO_ARG) \u2192 AssociationProxy[Any]\n```", "```py\nclass sqlalchemy.ext.associationproxy.AssociationProxy\n```", "```py\nmethod __init__(target_collection: str, attr: str, *, creator: _CreatorProtocol | None = None, getset_factory: _GetSetFactoryProtocol | None = None, proxy_factory: _ProxyFactoryProtocol | None = None, proxy_bulk_set: _ProxyBulkSetProtocol | None = None, info: _InfoType | None = None, cascade_scalar_deletes: bool = False, create_on_none_assignment: bool = False, attribute_options: _AttributeOptions | None = None)\n```", "```py\nattribute cascade_scalar_deletes: bool\n```", "```py\nattribute create_on_none_assignment: bool\n```", "```py\nattribute creator: _CreatorProtocol | None\n```", "```py\nattribute extension_type: InspectionAttrExtensionType = 'ASSOCIATION_PROXY'\n```", "```py\nmethod for_class(class_: Type[Any], obj: object | None = None) \u2192 AssociationProxyInstance[_T]\n```", "```py\nclass User(Base):\n    # ...\n\n    keywords = association_proxy('kws', 'keyword')\n```", "```py\ninspect(User).all_orm_descriptors[\"keywords\"].for_class(User).target_class\n```", "```py\nattribute getset_factory: _GetSetFactoryProtocol | None\n```", "```py\nattribute info\n```", "```py\nattribute is_aliased_class = False\n```", "```py\nattribute is_attribute = True\n```", "```py\nattribute is_bundle = False\n```", "```py\nattribute is_clause_element = False\n```", "```py\nattribute is_instance = False\n```", "```py\nattribute is_mapper = False\n```", "```py\nattribute is_property = False\n```", "```py\nattribute is_selectable = False\n```", "```py\nattribute key: str\n```", "```py\nattribute proxy_bulk_set: _ProxyBulkSetProtocol | None\n```", "```py\nattribute proxy_factory: _ProxyFactoryProtocol | None\n```", "```py\nattribute target_collection: str\n```", "```py\nattribute value_attr: str\n```", "```py\nclass sqlalchemy.ext.associationproxy.AssociationProxyInstance\n```", "```py\n>>> User.keywords.scalar\nFalse\n```", "```py\nproxy_state = inspect(User).all_orm_descriptors[\"keywords\"].for_class(User)\n\n# view if proxy object is scalar or not\n>>> proxy_state.scalar\nFalse\n```", "```py\nmethod __eq__(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod __le__(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod __lt__(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod __ne__(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod all_() \u2192 ColumnOperators\n```", "```py\nmethod any(criterion: _ColumnExpressionArgument[bool] | None = None, **kwargs: Any) \u2192 ColumnElement[bool]\n```", "```py\nmethod any_() \u2192 ColumnOperators\n```", "```py\nmethod asc() \u2192 ColumnOperators\n```", "```py\nattribute attr\n```", "```py\nstmt = (\n    select(Parent).\n    join(Parent.proxied.local_attr).\n    join(Parent.proxied.remote_attr)\n)\n```", "```py\nmethod between(cleft: Any, cright: Any, symmetric: bool = False) \u2192 ColumnOperators\n```", "```py\nmethod bitwise_and(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod bitwise_lshift(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod bitwise_not() \u2192 ColumnOperators\n```", "```py\nmethod bitwise_or(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod bitwise_rshift(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod bitwise_xor(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod bool_op(opstring: str, precedence: int = 0, python_impl: Callable[[...], Any] | None = None) \u2192 Callable[[Any], Operators]\n```", "```py\nmethod collate(collation: str) \u2192 ColumnOperators\n```", "```py\nattribute collection_class: Type[Any] | None\n```", "```py\nmethod concat(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod contains(other: Any, **kw: Any) \u2192 ColumnOperators\n```", "```py\ncolumn LIKE '%' || <other> || '%'\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.contains(\"foobar\"))\n```", "```py\n    somecolumn.contains(\"foo%bar\", autoescape=True)\n    ```", "```py\n    somecolumn LIKE '%' || :param || '%' ESCAPE '/'\n    ```", "```py\n    somecolumn.contains(\"foo/%bar\", escape=\"^\")\n    ```", "```py\n    somecolumn LIKE '%' || :param || '%' ESCAPE '^'\n    ```", "```py\n    somecolumn.contains(\"foo%bar^bat\", escape=\"^\", autoescape=True)\n    ```", "```py\nmethod delete(obj: Any) \u2192 None\n```", "```py\nmethod desc() \u2192 ColumnOperators\n```", "```py\nmethod distinct() \u2192 ColumnOperators\n```", "```py\nmethod endswith(other: Any, escape: str | None = None, autoescape: bool = False) \u2192 ColumnOperators\n```", "```py\ncolumn LIKE '%' || <other>\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.endswith(\"foobar\"))\n```", "```py\n    somecolumn.endswith(\"foo%bar\", autoescape=True)\n    ```", "```py\n    somecolumn LIKE '%' || :param ESCAPE '/'\n    ```", "```py\n    somecolumn.endswith(\"foo/%bar\", escape=\"^\")\n    ```", "```py\n    somecolumn LIKE '%' || :param ESCAPE '^'\n    ```", "```py\n    somecolumn.endswith(\"foo%bar^bat\", escape=\"^\", autoescape=True)\n    ```", "```py\nclassmethod for_proxy(parent: AssociationProxy[_T], owning_class: Type[Any], parent_instance: Any) \u2192 AssociationProxyInstance[_T]\n```", "```py\nmethod get(obj: Any) \u2192 _T | None | AssociationProxyInstance[_T]\n```", "```py\nmethod has(criterion: _ColumnExpressionArgument[bool] | None = None, **kwargs: Any) \u2192 ColumnElement[bool]\n```", "```py\nmethod icontains(other: Any, **kw: Any) \u2192 ColumnOperators\n```", "```py\nlower(column) LIKE '%' || lower(<other>) || '%'\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.icontains(\"foobar\"))\n```", "```py\n    somecolumn.icontains(\"foo%bar\", autoescape=True)\n    ```", "```py\n    lower(somecolumn) LIKE '%' || lower(:param) || '%' ESCAPE '/'\n    ```", "```py\n    somecolumn.icontains(\"foo/%bar\", escape=\"^\")\n    ```", "```py\n    lower(somecolumn) LIKE '%' || lower(:param) || '%' ESCAPE '^'\n    ```", "```py\n    somecolumn.icontains(\"foo%bar^bat\", escape=\"^\", autoescape=True)\n    ```", "```py\nmethod iendswith(other: Any, escape: str | None = None, autoescape: bool = False) \u2192 ColumnOperators\n```", "```py\nlower(column) LIKE '%' || lower(<other>)\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.iendswith(\"foobar\"))\n```", "```py\n    somecolumn.iendswith(\"foo%bar\", autoescape=True)\n    ```", "```py\n    lower(somecolumn) LIKE '%' || lower(:param) ESCAPE '/'\n    ```", "```py\n    somecolumn.iendswith(\"foo/%bar\", escape=\"^\")\n    ```", "```py\n    lower(somecolumn) LIKE '%' || lower(:param) ESCAPE '^'\n    ```", "```py\n    somecolumn.endswith(\"foo%bar^bat\", escape=\"^\", autoescape=True)\n    ```", "```py\nmethod ilike(other: Any, escape: str | None = None) \u2192 ColumnOperators\n```", "```py\nlower(a) LIKE lower(other)\n```", "```py\na ILIKE other\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.ilike(\"%foobar%\"))\n```", "```py\n    somecolumn.ilike(\"foo/%bar\", escape=\"/\")\n    ```", "```py\nmethod in_(other: Any) \u2192 ColumnOperators\n```", "```py\n    stmt.where(column.in_([1, 2, 3]))\n    ```", "```py\n    WHERE COL IN (?, ?, ?)\n    ```", "```py\n    from sqlalchemy import tuple_\n    stmt.where(tuple_(col1, col2).in_([(1, 10), (2, 20), (3, 30)]))\n    ```", "```py\n    stmt.where(column.in_([]))\n    ```", "```py\n    WHERE col IN (SELECT 1 FROM (SELECT 1) WHERE 1!=1)\n    ```", "```py\n    stmt.where(column.in_(bindparam('value', expanding=True)))\n    ```", "```py\n    WHERE COL IN ([EXPANDING_value])\n    ```", "```py\n    connection.execute(stmt, {\"value\": [1, 2, 3]})\n    ```", "```py\n    WHERE COL IN (?, ?, ?)\n    ```", "```py\n    WHERE COL IN (SELECT 1 FROM (SELECT 1) WHERE 1!=1)\n    ```", "```py\n    stmt.where(\n        column.in_(\n            select(othertable.c.y).\n            where(table.c.x == othertable.c.x)\n        )\n    )\n    ```", "```py\n    WHERE COL IN (SELECT othertable.y\n    FROM othertable WHERE othertable.x = table.x)\n    ```", "```py\nattribute info\n```", "```py\nmethod is_(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod is_distinct_from(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod is_not(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod is_not_distinct_from(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod isnot(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod isnot_distinct_from(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod istartswith(other: Any, escape: str | None = None, autoescape: bool = False) \u2192 ColumnOperators\n```", "```py\nlower(column) LIKE lower(<other>) || '%'\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.istartswith(\"foobar\"))\n```", "```py\n    somecolumn.istartswith(\"foo%bar\", autoescape=True)\n    ```", "```py\n    lower(somecolumn) LIKE lower(:param) || '%' ESCAPE '/'\n    ```", "```py\n    somecolumn.istartswith(\"foo/%bar\", escape=\"^\")\n    ```", "```py\n    lower(somecolumn) LIKE lower(:param) || '%' ESCAPE '^'\n    ```", "```py\n    somecolumn.istartswith(\"foo%bar^bat\", escape=\"^\", autoescape=True)\n    ```", "```py\nmethod like(other: Any, escape: str | None = None) \u2192 ColumnOperators\n```", "```py\na LIKE other\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.like(\"%foobar%\"))\n```", "```py\n    somecolumn.like(\"foo/%bar\", escape=\"/\")\n    ```", "```py\nattribute local_attr\n```", "```py\nmethod match(other: Any, **kwargs: Any) \u2192 ColumnOperators\n```", "```py\nmethod not_ilike(other: Any, escape: str | None = None) \u2192 ColumnOperators\n```", "```py\nmethod not_in(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod not_like(other: Any, escape: str | None = None) \u2192 ColumnOperators\n```", "```py\nmethod notilike(other: Any, escape: str | None = None) \u2192 ColumnOperators\n```", "```py\nmethod notin_(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod notlike(other: Any, escape: str | None = None) \u2192 ColumnOperators\n```", "```py\nmethod nulls_first() \u2192 ColumnOperators\n```", "```py\nmethod nulls_last() \u2192 ColumnOperators\n```", "```py\nmethod nullsfirst() \u2192 ColumnOperators\n```", "```py\nmethod nullslast() \u2192 ColumnOperators\n```", "```py\nmethod op(opstring: str, precedence: int = 0, is_comparison: bool = False, return_type: Type[TypeEngine[Any]] | TypeEngine[Any] | None = None, python_impl: Callable[..., Any] | None = None) \u2192 Callable[[Any], Operators]\n```", "```py\nsomecolumn.op(\"*\")(5)\n```", "```py\nsomecolumn * 5\n```", "```py\nsomecolumn.op('&')(0xff)\n```", "```py\n    >>> expr = column('x').op('+', python_impl=lambda a, b: a + b)('y')\n    ```", "```py\n    >>> expr.operator(5, 10)\n    15\n    ```", "```py\nmethod operate(op: OperatorType, *other: Any, **kwargs: Any) \u2192 Operators\n```", "```py\nclass MyComparator(ColumnOperators):\n    def operate(self, op, other, **kwargs):\n        return op(func.lower(self), func.lower(other), **kwargs)\n```", "```py\nattribute parent: _AssociationProxyProtocol[_T]\n```", "```py\nmethod regexp_match(pattern: Any, flags: str | None = None) \u2192 ColumnOperators\n```", "```py\nstmt = select(table.c.some_column).where(\n    table.c.some_column.regexp_match('^(b|c)')\n)\n```", "```py\nmethod regexp_replace(pattern: Any, replacement: Any, flags: str | None = None) \u2192 ColumnOperators\n```", "```py\nstmt = select(\n    table.c.some_column.regexp_replace(\n        'b(..)',\n        'XY',\n        flags='g'\n    )\n)\n```", "```py\nattribute remote_attr\n```", "```py\nmethod reverse_operate(op: OperatorType, other: Any, **kwargs: Any) \u2192 Operators\n```", "```py\nattribute scalar\n```", "```py\nmethod set(obj: Any, values: _T) \u2192 None\n```", "```py\nmethod startswith(other: Any, escape: str | None = None, autoescape: bool = False) \u2192 ColumnOperators\n```", "```py\ncolumn LIKE <other> || '%'\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.startswith(\"foobar\"))\n```", "```py\n    somecolumn.startswith(\"foo%bar\", autoescape=True)\n    ```", "```py\n    somecolumn LIKE :param || '%' ESCAPE '/'\n    ```", "```py\n    somecolumn.startswith(\"foo/%bar\", escape=\"^\")\n    ```", "```py\n    somecolumn LIKE :param || '%' ESCAPE '^'\n    ```", "```py\n    somecolumn.startswith(\"foo%bar^bat\", escape=\"^\", autoescape=True)\n    ```", "```py\nattribute target_class: Type[Any]\n```", "```py\nattribute timetuple: Literal[None] = None\n```", "```py\nclass sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance\n```", "```py\nmethod __le__(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod __lt__(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod all_() \u2192 ColumnOperators\n```", "```py\nmethod any(criterion: _ColumnExpressionArgument[bool] | None = None, **kwargs: Any) \u2192 ColumnElement[bool]\n```", "```py\nmethod any_() \u2192 ColumnOperators\n```", "```py\nmethod asc() \u2192 ColumnOperators\n```", "```py\nattribute attr\n```", "```py\nstmt = (\n    select(Parent).\n    join(Parent.proxied.local_attr).\n    join(Parent.proxied.remote_attr)\n)\n```", "```py\nmethod between(cleft: Any, cright: Any, symmetric: bool = False) \u2192 ColumnOperators\n```", "```py\nmethod bitwise_and(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod bitwise_lshift(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod bitwise_not() \u2192 ColumnOperators\n```", "```py\nmethod bitwise_or(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod bitwise_rshift(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod bitwise_xor(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod bool_op(opstring: str, precedence: int = 0, python_impl: Callable[[...], Any] | None = None) \u2192 Callable[[Any], Operators]\n```", "```py\nmethod collate(collation: str) \u2192 ColumnOperators\n```", "```py\nmethod concat(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod contains(other: Any, **kw: Any) \u2192 ColumnElement[bool]\n```", "```py\nmethod desc() \u2192 ColumnOperators\n```", "```py\nmethod distinct() \u2192 ColumnOperators\n```", "```py\nmethod endswith(other: Any, escape: str | None = None, autoescape: bool = False) \u2192 ColumnOperators\n```", "```py\ncolumn LIKE '%' || <other>\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.endswith(\"foobar\"))\n```", "```py\n    somecolumn.endswith(\"foo%bar\", autoescape=True)\n    ```", "```py\n    somecolumn LIKE '%' || :param ESCAPE '/'\n    ```", "```py\n    somecolumn.endswith(\"foo/%bar\", escape=\"^\")\n    ```", "```py\n    somecolumn LIKE '%' || :param ESCAPE '^'\n    ```", "```py\n    somecolumn.endswith(\"foo%bar^bat\", escape=\"^\", autoescape=True)\n    ```", "```py\nmethod has(criterion: _ColumnExpressionArgument[bool] | None = None, **kwargs: Any) \u2192 ColumnElement[bool]\n```", "```py\nmethod icontains(other: Any, **kw: Any) \u2192 ColumnOperators\n```", "```py\nlower(column) LIKE '%' || lower(<other>) || '%'\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.icontains(\"foobar\"))\n```", "```py\n    somecolumn.icontains(\"foo%bar\", autoescape=True)\n    ```", "```py\n    lower(somecolumn) LIKE '%' || lower(:param) || '%' ESCAPE '/'\n    ```", "```py\n    somecolumn.icontains(\"foo/%bar\", escape=\"^\")\n    ```", "```py\n    lower(somecolumn) LIKE '%' || lower(:param) || '%' ESCAPE '^'\n    ```", "```py\n    somecolumn.icontains(\"foo%bar^bat\", escape=\"^\", autoescape=True)\n    ```", "```py\nmethod iendswith(other: Any, escape: str | None = None, autoescape: bool = False) \u2192 ColumnOperators\n```", "```py\nlower(column) LIKE '%' || lower(<other>)\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.iendswith(\"foobar\"))\n```", "```py\n    somecolumn.iendswith(\"foo%bar\", autoescape=True)\n    ```", "```py\n    lower(somecolumn) LIKE '%' || lower(:param) ESCAPE '/'\n    ```", "```py\n    somecolumn.iendswith(\"foo/%bar\", escape=\"^\")\n    ```", "```py\n    lower(somecolumn) LIKE '%' || lower(:param) ESCAPE '^'\n    ```", "```py\n    somecolumn.endswith(\"foo%bar^bat\", escape=\"^\", autoescape=True)\n    ```", "```py\nmethod ilike(other: Any, escape: str | None = None) \u2192 ColumnOperators\n```", "```py\nlower(a) LIKE lower(other)\n```", "```py\na ILIKE other\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.ilike(\"%foobar%\"))\n```", "```py\n    somecolumn.ilike(\"foo/%bar\", escape=\"/\")\n    ```", "```py\nmethod in_(other: Any) \u2192 ColumnOperators\n```", "```py\n    stmt.where(column.in_([1, 2, 3]))\n    ```", "```py\n    WHERE COL IN (?, ?, ?)\n    ```", "```py\n    from sqlalchemy import tuple_\n    stmt.where(tuple_(col1, col2).in_([(1, 10), (2, 20), (3, 30)]))\n    ```", "```py\n    stmt.where(column.in_([]))\n    ```", "```py\n    WHERE col IN (SELECT 1 FROM (SELECT 1) WHERE 1!=1)\n    ```", "```py\n    stmt.where(column.in_(bindparam('value', expanding=True)))\n    ```", "```py\n    WHERE COL IN ([EXPANDING_value])\n    ```", "```py\n    connection.execute(stmt, {\"value\": [1, 2, 3]})\n    ```", "```py\n    WHERE COL IN (?, ?, ?)\n    ```", "```py\n    WHERE COL IN (SELECT 1 FROM (SELECT 1) WHERE 1!=1)\n    ```", "```py\n    stmt.where(\n        column.in_(\n            select(othertable.c.y).\n            where(table.c.x == othertable.c.x)\n        )\n    )\n    ```", "```py\n    WHERE COL IN (SELECT othertable.y\n    FROM othertable WHERE othertable.x = table.x)\n    ```", "```py\nmethod is_(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod is_distinct_from(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod is_not(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod is_not_distinct_from(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod isnot(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod isnot_distinct_from(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod istartswith(other: Any, escape: str | None = None, autoescape: bool = False) \u2192 ColumnOperators\n```", "```py\nlower(column) LIKE lower(<other>) || '%'\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.istartswith(\"foobar\"))\n```", "```py\n    somecolumn.istartswith(\"foo%bar\", autoescape=True)\n    ```", "```py\n    lower(somecolumn) LIKE lower(:param) || '%' ESCAPE '/'\n    ```", "```py\n    somecolumn.istartswith(\"foo/%bar\", escape=\"^\")\n    ```", "```py\n    lower(somecolumn) LIKE lower(:param) || '%' ESCAPE '^'\n    ```", "```py\n    somecolumn.istartswith(\"foo%bar^bat\", escape=\"^\", autoescape=True)\n    ```", "```py\nmethod like(other: Any, escape: str | None = None) \u2192 ColumnOperators\n```", "```py\na LIKE other\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.like(\"%foobar%\"))\n```", "```py\n    somecolumn.like(\"foo/%bar\", escape=\"/\")\n    ```", "```py\nattribute local_attr\n```", "```py\nmethod match(other: Any, **kwargs: Any) \u2192 ColumnOperators\n```", "```py\nmethod not_ilike(other: Any, escape: str | None = None) \u2192 ColumnOperators\n```", "```py\nmethod not_in(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod not_like(other: Any, escape: str | None = None) \u2192 ColumnOperators\n```", "```py\nmethod notilike(other: Any, escape: str | None = None) \u2192 ColumnOperators\n```", "```py\nmethod notin_(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod notlike(other: Any, escape: str | None = None) \u2192 ColumnOperators\n```", "```py\nmethod nulls_first() \u2192 ColumnOperators\n```", "```py\nmethod nulls_last() \u2192 ColumnOperators\n```", "```py\nmethod nullsfirst() \u2192 ColumnOperators\n```", "```py\nmethod nullslast() \u2192 ColumnOperators\n```", "```py\nmethod op(opstring: str, precedence: int = 0, is_comparison: bool = False, return_type: Type[TypeEngine[Any]] | TypeEngine[Any] | None = None, python_impl: Callable[..., Any] | None = None) \u2192 Callable[[Any], Operators]\n```", "```py\nsomecolumn.op(\"*\")(5)\n```", "```py\nsomecolumn * 5\n```", "```py\nsomecolumn.op('&')(0xff)\n```", "```py\n    >>> expr = column('x').op('+', python_impl=lambda a, b: a + b)('y')\n    ```", "```py\n    >>> expr.operator(5, 10)\n    15\n    ```", "```py\nmethod operate(op: OperatorType, *other: Any, **kwargs: Any) \u2192 Operators\n```", "```py\nclass MyComparator(ColumnOperators):\n    def operate(self, op, other, **kwargs):\n        return op(func.lower(self), func.lower(other), **kwargs)\n```", "```py\nmethod regexp_match(pattern: Any, flags: str | None = None) \u2192 ColumnOperators\n```", "```py\nstmt = select(table.c.some_column).where(\n    table.c.some_column.regexp_match('^(b|c)')\n)\n```", "```py\nmethod regexp_replace(pattern: Any, replacement: Any, flags: str | None = None) \u2192 ColumnOperators\n```", "```py\nstmt = select(\n    table.c.some_column.regexp_replace(\n        'b(..)',\n        'XY',\n        flags='g'\n    )\n)\n```", "```py\nattribute remote_attr\n```", "```py\nmethod reverse_operate(op: OperatorType, other: Any, **kwargs: Any) \u2192 Operators\n```", "```py\nattribute scalar\n```", "```py\nmethod startswith(other: Any, escape: str | None = None, autoescape: bool = False) \u2192 ColumnOperators\n```", "```py\ncolumn LIKE <other> || '%'\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.startswith(\"foobar\"))\n```", "```py\n    somecolumn.startswith(\"foo%bar\", autoescape=True)\n    ```", "```py\n    somecolumn LIKE :param || '%' ESCAPE '/'\n    ```", "```py\n    somecolumn.startswith(\"foo/%bar\", escape=\"^\")\n    ```", "```py\n    somecolumn LIKE :param || '%' ESCAPE '^'\n    ```", "```py\n    somecolumn.startswith(\"foo%bar^bat\", escape=\"^\", autoescape=True)\n    ```", "```py\nattribute target_class: Type[Any]\n```", "```py\nattribute timetuple: Literal[None] = None\n```", "```py\nclass sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance\n```", "```py\nmethod __le__(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod __lt__(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod __ne__(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod all_() \u2192 ColumnOperators\n```", "```py\nmethod any(criterion: _ColumnExpressionArgument[bool] | None = None, **kwargs: Any) \u2192 ColumnElement[bool]\n```", "```py\nmethod any_() \u2192 ColumnOperators\n```", "```py\nmethod asc() \u2192 ColumnOperators\n```", "```py\nattribute attr\n```", "```py\nstmt = (\n    select(Parent).\n    join(Parent.proxied.local_attr).\n    join(Parent.proxied.remote_attr)\n)\n```", "```py\nmethod between(cleft: Any, cright: Any, symmetric: bool = False) \u2192 ColumnOperators\n```", "```py\nmethod bitwise_and(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod bitwise_lshift(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod bitwise_not() \u2192 ColumnOperators\n```", "```py\nmethod bitwise_or(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod bitwise_rshift(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod bitwise_xor(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod bool_op(opstring: str, precedence: int = 0, python_impl: Callable[[...], Any] | None = None) \u2192 Callable[[Any], Operators]\n```", "```py\nmethod collate(collation: str) \u2192 ColumnOperators\n```", "```py\nmethod concat(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod contains(other: Any, **kw: Any) \u2192 ColumnOperators\n```", "```py\ncolumn LIKE '%' || <other> || '%'\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.contains(\"foobar\"))\n```", "```py\n    somecolumn.contains(\"foo%bar\", autoescape=True)\n    ```", "```py\n    somecolumn LIKE '%' || :param || '%' ESCAPE '/'\n    ```", "```py\n    somecolumn.contains(\"foo/%bar\", escape=\"^\")\n    ```", "```py\n    somecolumn LIKE '%' || :param || '%' ESCAPE '^'\n    ```", "```py\n    somecolumn.contains(\"foo%bar^bat\", escape=\"^\", autoescape=True)\n    ```", "```py\nmethod desc() \u2192 ColumnOperators\n```", "```py\nmethod distinct() \u2192 ColumnOperators\n```", "```py\nmethod endswith(other: Any, escape: str | None = None, autoescape: bool = False) \u2192 ColumnOperators\n```", "```py\ncolumn LIKE '%' || <other>\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.endswith(\"foobar\"))\n```", "```py\n    somecolumn.endswith(\"foo%bar\", autoescape=True)\n    ```", "```py\n    somecolumn LIKE '%' || :param ESCAPE '/'\n    ```", "```py\n    somecolumn.endswith(\"foo/%bar\", escape=\"^\")\n    ```", "```py\n    somecolumn LIKE '%' || :param ESCAPE '^'\n    ```", "```py\n    somecolumn.endswith(\"foo%bar^bat\", escape=\"^\", autoescape=True)\n    ```", "```py\nmethod has(criterion: _ColumnExpressionArgument[bool] | None = None, **kwargs: Any) \u2192 ColumnElement[bool]\n```", "```py\nmethod icontains(other: Any, **kw: Any) \u2192 ColumnOperators\n```", "```py\nlower(column) LIKE '%' || lower(<other>) || '%'\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.icontains(\"foobar\"))\n```", "```py\n    somecolumn.icontains(\"foo%bar\", autoescape=True)\n    ```", "```py\n    lower(somecolumn) LIKE '%' || lower(:param) || '%' ESCAPE '/'\n    ```", "```py\n    somecolumn.icontains(\"foo/%bar\", escape=\"^\")\n    ```", "```py\n    lower(somecolumn) LIKE '%' || lower(:param) || '%' ESCAPE '^'\n    ```", "```py\n    somecolumn.icontains(\"foo%bar^bat\", escape=\"^\", autoescape=True)\n    ```", "```py\nmethod iendswith(other: Any, escape: str | None = None, autoescape: bool = False) \u2192 ColumnOperators\n```", "```py\nlower(column) LIKE '%' || lower(<other>)\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.iendswith(\"foobar\"))\n```", "```py\n    somecolumn.iendswith(\"foo%bar\", autoescape=True)\n    ```", "```py\n    lower(somecolumn) LIKE '%' || lower(:param) ESCAPE '/'\n    ```", "```py\n    somecolumn.iendswith(\"foo/%bar\", escape=\"^\")\n    ```", "```py\n    lower(somecolumn) LIKE '%' || lower(:param) ESCAPE '^'\n    ```", "```py\n    somecolumn.endswith(\"foo%bar^bat\", escape=\"^\", autoescape=True)\n    ```", "```py\nmethod ilike(other: Any, escape: str | None = None) \u2192 ColumnOperators\n```", "```py\nlower(a) LIKE lower(other)\n```", "```py\na ILIKE other\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.ilike(\"%foobar%\"))\n```", "```py\n    somecolumn.ilike(\"foo/%bar\", escape=\"/\")\n    ```", "```py\nmethod in_(other: Any) \u2192 ColumnOperators\n```", "```py\n    stmt.where(column.in_([1, 2, 3]))\n    ```", "```py\n    WHERE COL IN (?, ?, ?)\n    ```", "```py\n    from sqlalchemy import tuple_\n    stmt.where(tuple_(col1, col2).in_([(1, 10), (2, 20), (3, 30)]))\n    ```", "```py\n    stmt.where(column.in_([]))\n    ```", "```py\n    WHERE col IN (SELECT 1 FROM (SELECT 1) WHERE 1!=1)\n    ```", "```py\n    stmt.where(column.in_(bindparam('value', expanding=True)))\n    ```", "```py\n    WHERE COL IN ([EXPANDING_value])\n    ```", "```py\n    connection.execute(stmt, {\"value\": [1, 2, 3]})\n    ```", "```py\n    WHERE COL IN (?, ?, ?)\n    ```", "```py\n    WHERE COL IN (SELECT 1 FROM (SELECT 1) WHERE 1!=1)\n    ```", "```py\n    stmt.where(\n        column.in_(\n            select(othertable.c.y).\n            where(table.c.x == othertable.c.x)\n        )\n    )\n    ```", "```py\n    WHERE COL IN (SELECT othertable.y\n    FROM othertable WHERE othertable.x = table.x)\n    ```", "```py\nmethod is_(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod is_distinct_from(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod is_not(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod is_not_distinct_from(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod isnot(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod isnot_distinct_from(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod istartswith(other: Any, escape: str | None = None, autoescape: bool = False) \u2192 ColumnOperators\n```", "```py\nlower(column) LIKE lower(<other>) || '%'\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.istartswith(\"foobar\"))\n```", "```py\n    somecolumn.istartswith(\"foo%bar\", autoescape=True)\n    ```", "```py\n    lower(somecolumn) LIKE lower(:param) || '%' ESCAPE '/'\n    ```", "```py\n    somecolumn.istartswith(\"foo/%bar\", escape=\"^\")\n    ```", "```py\n    lower(somecolumn) LIKE lower(:param) || '%' ESCAPE '^'\n    ```", "```py\n    somecolumn.istartswith(\"foo%bar^bat\", escape=\"^\", autoescape=True)\n    ```", "```py\nmethod like(other: Any, escape: str | None = None) \u2192 ColumnOperators\n```", "```py\na LIKE other\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.like(\"%foobar%\"))\n```", "```py\n    somecolumn.like(\"foo/%bar\", escape=\"/\")\n    ```", "```py\nattribute local_attr\n```", "```py\nmethod match(other: Any, **kwargs: Any) \u2192 ColumnOperators\n```", "```py\nmethod not_ilike(other: Any, escape: str | None = None) \u2192 ColumnOperators\n```", "```py\nmethod not_in(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod not_like(other: Any, escape: str | None = None) \u2192 ColumnOperators\n```", "```py\nmethod notilike(other: Any, escape: str | None = None) \u2192 ColumnOperators\n```", "```py\nmethod notin_(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod notlike(other: Any, escape: str | None = None) \u2192 ColumnOperators\n```", "```py\nmethod nulls_first() \u2192 ColumnOperators\n```", "```py\nmethod nulls_last() \u2192 ColumnOperators\n```", "```py\nmethod nullsfirst() \u2192 ColumnOperators\n```", "```py\nmethod nullslast() \u2192 ColumnOperators\n```", "```py\nmethod op(opstring: str, precedence: int = 0, is_comparison: bool = False, return_type: Type[TypeEngine[Any]] | TypeEngine[Any] | None = None, python_impl: Callable[..., Any] | None = None) \u2192 Callable[[Any], Operators]\n```", "```py\nsomecolumn.op(\"*\")(5)\n```", "```py\nsomecolumn * 5\n```", "```py\nsomecolumn.op('&')(0xff)\n```", "```py\n    >>> expr = column('x').op('+', python_impl=lambda a, b: a + b)('y')\n    ```", "```py\n    >>> expr.operator(5, 10)\n    15\n    ```", "```py\nmethod operate(op: OperatorType, *other: Any, **kwargs: Any) \u2192 ColumnElement[Any]\n```", "```py\nclass MyComparator(ColumnOperators):\n    def operate(self, op, other, **kwargs):\n        return op(func.lower(self), func.lower(other), **kwargs)\n```", "```py\nmethod regexp_match(pattern: Any, flags: str | None = None) \u2192 ColumnOperators\n```", "```py\nstmt = select(table.c.some_column).where(\n    table.c.some_column.regexp_match('^(b|c)')\n)\n```", "```py\nmethod regexp_replace(pattern: Any, replacement: Any, flags: str | None = None) \u2192 ColumnOperators\n```", "```py\nstmt = select(\n    table.c.some_column.regexp_replace(\n        'b(..)',\n        'XY',\n        flags='g'\n    )\n)\n```", "```py\nattribute remote_attr\n```", "```py\nmethod reverse_operate(op: OperatorType, other: Any, **kwargs: Any) \u2192 Operators\n```", "```py\nattribute scalar\n```", "```py\nmethod startswith(other: Any, escape: str | None = None, autoescape: bool = False) \u2192 ColumnOperators\n```", "```py\ncolumn LIKE <other> || '%'\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.startswith(\"foobar\"))\n```", "```py\n    somecolumn.startswith(\"foo%bar\", autoescape=True)\n    ```", "```py\n    somecolumn LIKE :param || '%' ESCAPE '/'\n    ```", "```py\n    somecolumn.startswith(\"foo/%bar\", escape=\"^\")\n    ```", "```py\n    somecolumn LIKE :param || '%' ESCAPE '^'\n    ```", "```py\n    somecolumn.startswith(\"foo%bar^bat\", escape=\"^\", autoescape=True)\n    ```", "```py\nattribute target_class: Type[Any]\n```", "```py\nattribute timetuple: Literal[None] = None\n```", "```py\nclass sqlalchemy.ext.associationproxy.AssociationProxyExtensionType\n```", "```py\nattribute ASSOCIATION_PROXY = 'ASSOCIATION_PROXY'\n```", "```py\nfrom __future__ import annotations\n\nfrom typing import Final\nfrom typing import List\n\nfrom sqlalchemy import Column\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import Integer\nfrom sqlalchemy import String\nfrom sqlalchemy import Table\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import relationship\nfrom sqlalchemy.ext.associationproxy import association_proxy\nfrom sqlalchemy.ext.associationproxy import AssociationProxy\n\nclass Base(DeclarativeBase):\n    pass\n\nclass User(Base):\n    __tablename__ = \"user\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str] = mapped_column(String(64))\n    kw: Mapped[List[Keyword]] = relationship(secondary=lambda: user_keyword_table)\n\n    def __init__(self, name: str):\n        self.name = name\n\n    # proxy the 'keyword' attribute from the 'kw' relationship\n    keywords: AssociationProxy[List[str]] = association_proxy(\"kw\", \"keyword\")\n\nclass Keyword(Base):\n    __tablename__ = \"keyword\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    keyword: Mapped[str] = mapped_column(String(64))\n\n    def __init__(self, keyword: str):\n        self.keyword = keyword\n\nuser_keyword_table: Final[Table] = Table(\n    \"user_keyword\",\n    Base.metadata,\n    Column(\"user_id\", Integer, ForeignKey(\"user.id\"), primary_key=True),\n    Column(\"keyword_id\", Integer, ForeignKey(\"keyword.id\"), primary_key=True),\n)\n```", "```py\n>>> user = User(\"jek\")\n>>> user.keywords.append(\"cheese-inspector\")\n>>> user.keywords.append(\"snack-ninja\")\n>>> print(user.keywords)\n['cheese-inspector', 'snack-ninja']\n```", "```py\n>>> # identical operations without using the association proxy\n>>> user = User(\"jek\")\n>>> user.kw.append(Keyword(\"cheese-inspector\"))\n>>> user.kw.append(Keyword(\"snack-ninja\"))\n>>> print([keyword.keyword for keyword in user.kw])\n['cheese-inspector', 'snack-ninja']\n```", "```py\nuser.keywords.append(\"cheese-inspector\")\n```", "```py\nuser.kw.append(Keyword(\"cheese-inspector\"))\n```", "```py\nclass User(Base):\n    ...\n\n    # use Keyword(keyword=kw) on append() events\n    keywords: AssociationProxy[List[str]] = association_proxy(\n        \"kw\", \"keyword\", creator=lambda kw: Keyword(keyword=kw)\n    )\n```", "```py\nuser.keywords.append(\"cheese-inspector\")\n```", "```py\nuser.kw.append(Keyword(\"cheese-inspector\"))\n```", "```py\nclass User(Base):\n    ...\n\n    # use Keyword(keyword=kw) on append() events\n    keywords: AssociationProxy[List[str]] = association_proxy(\n        \"kw\", \"keyword\", creator=lambda kw: Keyword(keyword=kw)\n    )\n```", "```py\nfrom __future__ import annotations\n\nfrom typing import List\nfrom typing import Optional\n\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import String\nfrom sqlalchemy.ext.associationproxy import association_proxy\nfrom sqlalchemy.ext.associationproxy import AssociationProxy\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import relationship\n\nclass Base(DeclarativeBase):\n    pass\n\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str] = mapped_column(String(64))\n\n    user_keyword_associations: Mapped[List[UserKeywordAssociation]] = relationship(\n        back_populates=\"user\",\n        cascade=\"all, delete-orphan\",\n    )\n\n    # association proxy of \"user_keyword_associations\" collection\n    # to \"keyword\" attribute\n    keywords: AssociationProxy[List[Keyword]] = association_proxy(\n        \"user_keyword_associations\",\n        \"keyword\",\n        creator=lambda keyword_obj: UserKeywordAssociation(keyword=keyword_obj),\n    )\n\n    def __init__(self, name: str):\n        self.name = name\n\nclass UserKeywordAssociation(Base):\n    __tablename__ = \"user_keyword\"\n    user_id: Mapped[int] = mapped_column(ForeignKey(\"user.id\"), primary_key=True)\n    keyword_id: Mapped[int] = mapped_column(ForeignKey(\"keyword.id\"), primary_key=True)\n    special_key: Mapped[Optional[str]] = mapped_column(String(50))\n\n    user: Mapped[User] = relationship(back_populates=\"user_keyword_associations\")\n\n    keyword: Mapped[Keyword] = relationship()\n\nclass Keyword(Base):\n    __tablename__ = \"keyword\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    keyword: Mapped[str] = mapped_column(\"keyword\", String(64))\n\n    def __init__(self, keyword: str):\n        self.keyword = keyword\n\n    def __repr__(self) -> str:\n        return f\"Keyword({self.keyword!r})\"\n```", "```py\n>>> user = User(\"log\")\n>>> for kw in (Keyword(\"new_from_blammo\"), Keyword(\"its_big\")):\n...     user.keywords.append(kw)\n>>> print(user.keywords)\n[Keyword('new_from_blammo'), Keyword('its_big')]\n```", "```py\n>>> user.user_keyword_associations.append(\n...     UserKeywordAssociation(keyword=Keyword(\"its_heavy\"))\n... )\n```", "```py\n>>> UserKeywordAssociation(\n...     keyword=Keyword(\"its_wood\"), user=user, special_key=\"my special key\"\n... )\n```", "```py\n>>> print(user.keywords)\n[Keyword('new_from_blammo'), Keyword('its_big'), Keyword('its_heavy'), Keyword('its_wood')]\n```", "```py\nfrom __future__ import annotations\nfrom typing import Dict\n\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import String\nfrom sqlalchemy.ext.associationproxy import association_proxy\nfrom sqlalchemy.ext.associationproxy import AssociationProxy\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import relationship\nfrom sqlalchemy.orm.collections import attribute_keyed_dict\n\nclass Base(DeclarativeBase):\n    pass\n\nclass User(Base):\n    __tablename__ = \"user\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str] = mapped_column(String(64))\n\n    # user/user_keyword_associations relationship, mapping\n    # user_keyword_associations with a dictionary against \"special_key\" as key.\n    user_keyword_associations: Mapped[Dict[str, UserKeywordAssociation]] = relationship(\n        back_populates=\"user\",\n        collection_class=attribute_keyed_dict(\"special_key\"),\n        cascade=\"all, delete-orphan\",\n    )\n    # proxy to 'user_keyword_associations', instantiating\n    # UserKeywordAssociation assigning the new key to 'special_key',\n    # values to 'keyword'.\n    keywords: AssociationProxy[Dict[str, Keyword]] = association_proxy(\n        \"user_keyword_associations\",\n        \"keyword\",\n        creator=lambda k, v: UserKeywordAssociation(special_key=k, keyword=v),\n    )\n\n    def __init__(self, name: str):\n        self.name = name\n\nclass UserKeywordAssociation(Base):\n    __tablename__ = \"user_keyword\"\n    user_id: Mapped[int] = mapped_column(ForeignKey(\"user.id\"), primary_key=True)\n    keyword_id: Mapped[int] = mapped_column(ForeignKey(\"keyword.id\"), primary_key=True)\n    special_key: Mapped[str]\n\n    user: Mapped[User] = relationship(\n        back_populates=\"user_keyword_associations\",\n    )\n    keyword: Mapped[Keyword] = relationship()\n\nclass Keyword(Base):\n    __tablename__ = \"keyword\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    keyword: Mapped[str] = mapped_column(String(64))\n\n    def __init__(self, keyword: str):\n        self.keyword = keyword\n\n    def __repr__(self) -> str:\n        return f\"Keyword({self.keyword!r})\"\n```", "```py\n>>> user = User(\"log\")\n\n>>> user.keywords[\"sk1\"] = Keyword(\"kw1\")\n>>> user.keywords[\"sk2\"] = Keyword(\"kw2\")\n\n>>> print(user.keywords)\n{'sk1': Keyword('kw1'), 'sk2': Keyword('kw2')}\n```", "```py\nfrom __future__ import annotations\n\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import String\nfrom sqlalchemy.ext.associationproxy import association_proxy\nfrom sqlalchemy.ext.associationproxy import AssociationProxy\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import relationship\nfrom sqlalchemy.orm.collections import attribute_keyed_dict\n\nclass Base(DeclarativeBase):\n    pass\n\nclass User(Base):\n    __tablename__ = \"user\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str] = mapped_column(String(64))\n\n    user_keyword_associations: Mapped[Dict[str, UserKeywordAssociation]] = relationship(\n        back_populates=\"user\",\n        collection_class=attribute_keyed_dict(\"special_key\"),\n        cascade=\"all, delete-orphan\",\n    )\n    # the same 'user_keyword_associations'->'keyword' proxy as in\n    # the basic dictionary example.\n    keywords: AssociationProxy[Dict[str, str]] = association_proxy(\n        \"user_keyword_associations\",\n        \"keyword\",\n        creator=lambda k, v: UserKeywordAssociation(special_key=k, keyword=v),\n    )\n\n    def __init__(self, name: str):\n        self.name = name\n\nclass UserKeywordAssociation(Base):\n    __tablename__ = \"user_keyword\"\n    user_id: Mapped[int] = mapped_column(ForeignKey(\"user.id\"), primary_key=True)\n    keyword_id: Mapped[int] = mapped_column(ForeignKey(\"keyword.id\"), primary_key=True)\n    special_key: Mapped[str] = mapped_column(String(64))\n    user: Mapped[User] = relationship(\n        back_populates=\"user_keyword_associations\",\n    )\n\n    # the relationship to Keyword is now called\n    # 'kw'\n    kw: Mapped[Keyword] = relationship()\n\n    # 'keyword' is changed to be a proxy to the\n    # 'keyword' attribute of 'Keyword'\n    keyword: AssociationProxy[Dict[str, str]] = association_proxy(\"kw\", \"keyword\")\n\nclass Keyword(Base):\n    __tablename__ = \"keyword\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    keyword: Mapped[str] = mapped_column(String(64))\n\n    def __init__(self, keyword: str):\n        self.keyword = keyword\n```", "```py\n>>> user = User(\"log\")\n>>> user.keywords = {\"sk1\": \"kw1\", \"sk2\": \"kw2\"}\n>>> print(user.keywords)\n{'sk1': 'kw1', 'sk2': 'kw2'}\n\n>>> user.keywords[\"sk3\"] = \"kw3\"\n>>> del user.keywords[\"sk2\"]\n>>> print(user.keywords)\n{'sk1': 'kw1', 'sk3': 'kw3'}\n\n>>> # illustrate un-proxied usage\n... print(user.user_keyword_associations[\"sk3\"].kw)\n<__main__.Keyword object at 0x12ceb90>\n```", "```py\nfrom __future__ import annotations\nfrom sqlalchemy import Column, ForeignKey, Integer, String\nfrom sqlalchemy.ext.associationproxy import association_proxy, AssociationProxy\nfrom sqlalchemy.orm import DeclarativeBase, relationship\nfrom sqlalchemy.orm.collections import attribute_keyed_dict\nfrom sqlalchemy.orm.collections import Mapped\n\nclass Base(DeclarativeBase):\n    pass\n\nclass User(Base):\n    __tablename__ = \"user\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str] = mapped_column(String(64))\n\n    user_keyword_associations: Mapped[UserKeywordAssociation] = relationship(\n        cascade=\"all, delete-orphan\",\n    )\n\n    # object-targeted association proxy\n    keywords: AssociationProxy[List[Keyword]] = association_proxy(\n        \"user_keyword_associations\",\n        \"keyword\",\n    )\n\n    # column-targeted association proxy\n    special_keys: AssociationProxy[List[str]] = association_proxy(\n        \"user_keyword_associations\", \"special_key\"\n    )\n\nclass UserKeywordAssociation(Base):\n    __tablename__ = \"user_keyword\"\n    user_id: Mapped[int] = mapped_column(ForeignKey(\"user.id\"), primary_key=True)\n    keyword_id: Mapped[int] = mapped_column(ForeignKey(\"keyword.id\"), primary_key=True)\n    special_key: Mapped[str] = mapped_column(String(64))\n    keyword: Mapped[Keyword] = relationship()\n\nclass Keyword(Base):\n    __tablename__ = \"keyword\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    keyword: Mapped[str] = mapped_column(String(64))\n```", "```py\n>>> print(session.scalars(select(User).where(User.special_keys == \"jek\")))\nSELECT  \"user\".id  AS  user_id,  \"user\".name  AS  user_name\nFROM  \"user\"\nWHERE  EXISTS  (SELECT  1\nFROM  user_keyword\nWHERE  \"user\".id  =  user_keyword.user_id  AND  user_keyword.special_key  =  :special_key_1) \n```", "```py\n>>> print(session.scalars(select(User).where(User.special_keys.like(\"%jek\"))))\nSELECT  \"user\".id  AS  user_id,  \"user\".name  AS  user_name\nFROM  \"user\"\nWHERE  EXISTS  (SELECT  1\nFROM  user_keyword\nWHERE  \"user\".id  =  user_keyword.user_id  AND  user_keyword.special_key  LIKE  :special_key_1) \n```", "```py\n>>> print(session.scalars(select(User).where(User.keywords.any(Keyword.keyword == \"jek\"))))\nSELECT  \"user\".id  AS  user_id,  \"user\".name  AS  user_name\nFROM  \"user\"\nWHERE  EXISTS  (SELECT  1\nFROM  user_keyword\nWHERE  \"user\".id  =  user_keyword.user_id  AND  (EXISTS  (SELECT  1\nFROM  keyword\nWHERE  keyword.id  =  user_keyword.keyword_id  AND  keyword.keyword  =  :keyword_1))) \n```", "```py\nfrom __future__ import annotations\nfrom sqlalchemy import Column, ForeignKey, Integer, String\nfrom sqlalchemy.ext.associationproxy import association_proxy, AssociationProxy\nfrom sqlalchemy.orm import DeclarativeBase, relationship\nfrom sqlalchemy.orm.collections import attribute_keyed_dict\nfrom sqlalchemy.orm.collections import Mapped\n\nclass Base(DeclarativeBase):\n    pass\n\nclass A(Base):\n    __tablename__ = \"test_a\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    ab: Mapped[AB] = relationship(uselist=False)\n    b: AssociationProxy[B] = association_proxy(\n        \"ab\", \"b\", creator=lambda b: AB(b=b), cascade_scalar_deletes=True\n    )\n\nclass B(Base):\n    __tablename__ = \"test_b\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n\nclass AB(Base):\n    __tablename__ = \"test_ab\"\n    a_id: Mapped[int] = mapped_column(ForeignKey(A.id), primary_key=True)\n    b_id: Mapped[int] = mapped_column(ForeignKey(B.id), primary_key=True)\n\n    b: Mapped[B] = relationship()\n```", "```py\na.b = B()\n```", "```py\na.b = None\nassert a.ab is None\n```", "```py\nfrom __future__ import annotations\n\nfrom typing import List\n\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import String\nfrom sqlalchemy.ext.associationproxy import association_proxy\nfrom sqlalchemy.ext.associationproxy import AssociationProxy\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import relationship\n\nclass Base(DeclarativeBase):\n    pass\n\nclass Recipe(Base):\n    __tablename__ = \"recipe\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str] = mapped_column(String(64))\n\n    steps: Mapped[List[Step]] = relationship(back_populates=\"recipe\")\n    step_descriptions: AssociationProxy[List[str]] = association_proxy(\n        \"steps\", \"description\"\n    )\n\nclass Step(Base):\n    __tablename__ = \"step\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    description: Mapped[str]\n    recipe_id: Mapped[int] = mapped_column(ForeignKey(\"recipe.id\"))\n    recipe: Mapped[Recipe] = relationship(back_populates=\"steps\")\n\n    recipe_name: AssociationProxy[str] = association_proxy(\"recipe\", \"name\")\n\n    def __init__(self, description: str) -> None:\n        self.description = description\n\nmy_snack = Recipe(\n    name=\"afternoon snack\",\n    step_descriptions=[\n        \"slice bread\",\n        \"spread peanut butted\",\n        \"eat sandwich\",\n    ],\n)\n```", "```py\n>>> for i, step in enumerate(my_snack.steps, 1):\n...     print(f\"Step {i} of {step.recipe_name!r}: {step.description}\")\nStep 1 of 'afternoon snack': slice bread\nStep 2 of 'afternoon snack': spread peanut butted\nStep 3 of 'afternoon snack': eat sandwich\n```", "```py\nfunction sqlalchemy.ext.associationproxy.association_proxy(target_collection: str, attr: str, *, creator: _CreatorProtocol | None = None, getset_factory: _GetSetFactoryProtocol | None = None, proxy_factory: _ProxyFactoryProtocol | None = None, proxy_bulk_set: _ProxyBulkSetProtocol | None = None, info: _InfoType | None = None, cascade_scalar_deletes: bool = False, create_on_none_assignment: bool = False, init: _NoArg | bool = _NoArg.NO_ARG, repr: _NoArg | bool = _NoArg.NO_ARG, default: Any | None = _NoArg.NO_ARG, default_factory: _NoArg | Callable[[], _T] = _NoArg.NO_ARG, compare: _NoArg | bool = _NoArg.NO_ARG, kw_only: _NoArg | bool = _NoArg.NO_ARG) \u2192 AssociationProxy[Any]\n```", "```py\nclass sqlalchemy.ext.associationproxy.AssociationProxy\n```", "```py\nmethod __init__(target_collection: str, attr: str, *, creator: _CreatorProtocol | None = None, getset_factory: _GetSetFactoryProtocol | None = None, proxy_factory: _ProxyFactoryProtocol | None = None, proxy_bulk_set: _ProxyBulkSetProtocol | None = None, info: _InfoType | None = None, cascade_scalar_deletes: bool = False, create_on_none_assignment: bool = False, attribute_options: _AttributeOptions | None = None)\n```", "```py\nattribute cascade_scalar_deletes: bool\n```", "```py\nattribute create_on_none_assignment: bool\n```", "```py\nattribute creator: _CreatorProtocol | None\n```", "```py\nattribute extension_type: InspectionAttrExtensionType = 'ASSOCIATION_PROXY'\n```", "```py\nmethod for_class(class_: Type[Any], obj: object | None = None) \u2192 AssociationProxyInstance[_T]\n```", "```py\nclass User(Base):\n    # ...\n\n    keywords = association_proxy('kws', 'keyword')\n```", "```py\ninspect(User).all_orm_descriptors[\"keywords\"].for_class(User).target_class\n```", "```py\nattribute getset_factory: _GetSetFactoryProtocol | None\n```", "```py\nattribute info\n```", "```py\nattribute is_aliased_class = False\n```", "```py\nattribute is_attribute = True\n```", "```py\nattribute is_bundle = False\n```", "```py\nattribute is_clause_element = False\n```", "```py\nattribute is_instance = False\n```", "```py\nattribute is_mapper = False\n```", "```py\nattribute is_property = False\n```", "```py\nattribute is_selectable = False\n```", "```py\nattribute key: str\n```", "```py\nattribute proxy_bulk_set: _ProxyBulkSetProtocol | None\n```", "```py\nattribute proxy_factory: _ProxyFactoryProtocol | None\n```", "```py\nattribute target_collection: str\n```", "```py\nattribute value_attr: str\n```", "```py\nclass sqlalchemy.ext.associationproxy.AssociationProxyInstance\n```", "```py\n>>> User.keywords.scalar\nFalse\n```", "```py\nproxy_state = inspect(User).all_orm_descriptors[\"keywords\"].for_class(User)\n\n# view if proxy object is scalar or not\n>>> proxy_state.scalar\nFalse\n```", "```py\nmethod __eq__(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod __le__(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod __lt__(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod __ne__(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod all_() \u2192 ColumnOperators\n```", "```py\nmethod any(criterion: _ColumnExpressionArgument[bool] | None = None, **kwargs: Any) \u2192 ColumnElement[bool]\n```", "```py\nmethod any_() \u2192 ColumnOperators\n```", "```py\nmethod asc() \u2192 ColumnOperators\n```", "```py\nattribute attr\n```", "```py\nstmt = (\n    select(Parent).\n    join(Parent.proxied.local_attr).\n    join(Parent.proxied.remote_attr)\n)\n```", "```py\nmethod between(cleft: Any, cright: Any, symmetric: bool = False) \u2192 ColumnOperators\n```", "```py\nmethod bitwise_and(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod bitwise_lshift(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod bitwise_not() \u2192 ColumnOperators\n```", "```py\nmethod bitwise_or(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod bitwise_rshift(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod bitwise_xor(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod bool_op(opstring: str, precedence: int = 0, python_impl: Callable[[...], Any] | None = None) \u2192 Callable[[Any], Operators]\n```", "```py\nmethod collate(collation: str) \u2192 ColumnOperators\n```", "```py\nattribute collection_class: Type[Any] | None\n```", "```py\nmethod concat(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod contains(other: Any, **kw: Any) \u2192 ColumnOperators\n```", "```py\ncolumn LIKE '%' || <other> || '%'\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.contains(\"foobar\"))\n```", "```py\n    somecolumn.contains(\"foo%bar\", autoescape=True)\n    ```", "```py\n    somecolumn LIKE '%' || :param || '%' ESCAPE '/'\n    ```", "```py\n    somecolumn.contains(\"foo/%bar\", escape=\"^\")\n    ```", "```py\n    somecolumn LIKE '%' || :param || '%' ESCAPE '^'\n    ```", "```py\n    somecolumn.contains(\"foo%bar^bat\", escape=\"^\", autoescape=True)\n    ```", "```py\nmethod delete(obj: Any) \u2192 None\n```", "```py\nmethod desc() \u2192 ColumnOperators\n```", "```py\nmethod distinct() \u2192 ColumnOperators\n```", "```py\nmethod endswith(other: Any, escape: str | None = None, autoescape: bool = False) \u2192 ColumnOperators\n```", "```py\ncolumn LIKE '%' || <other>\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.endswith(\"foobar\"))\n```", "```py\n    somecolumn.endswith(\"foo%bar\", autoescape=True)\n    ```", "```py\n    somecolumn LIKE '%' || :param ESCAPE '/'\n    ```", "```py\n    somecolumn.endswith(\"foo/%bar\", escape=\"^\")\n    ```", "```py\n    somecolumn LIKE '%' || :param ESCAPE '^'\n    ```", "```py\n    somecolumn.endswith(\"foo%bar^bat\", escape=\"^\", autoescape=True)\n    ```", "```py\nclassmethod for_proxy(parent: AssociationProxy[_T], owning_class: Type[Any], parent_instance: Any) \u2192 AssociationProxyInstance[_T]\n```", "```py\nmethod get(obj: Any) \u2192 _T | None | AssociationProxyInstance[_T]\n```", "```py\nmethod has(criterion: _ColumnExpressionArgument[bool] | None = None, **kwargs: Any) \u2192 ColumnElement[bool]\n```", "```py\nmethod icontains(other: Any, **kw: Any) \u2192 ColumnOperators\n```", "```py\nlower(column) LIKE '%' || lower(<other>) || '%'\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.icontains(\"foobar\"))\n```", "```py\n    somecolumn.icontains(\"foo%bar\", autoescape=True)\n    ```", "```py\n    lower(somecolumn) LIKE '%' || lower(:param) || '%' ESCAPE '/'\n    ```", "```py\n    somecolumn.icontains(\"foo/%bar\", escape=\"^\")\n    ```", "```py\n    lower(somecolumn) LIKE '%' || lower(:param) || '%' ESCAPE '^'\n    ```", "```py\n    somecolumn.icontains(\"foo%bar^bat\", escape=\"^\", autoescape=True)\n    ```", "```py\nmethod iendswith(other: Any, escape: str | None = None, autoescape: bool = False) \u2192 ColumnOperators\n```", "```py\nlower(column) LIKE '%' || lower(<other>)\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.iendswith(\"foobar\"))\n```", "```py\n    somecolumn.iendswith(\"foo%bar\", autoescape=True)\n    ```", "```py\n    lower(somecolumn) LIKE '%' || lower(:param) ESCAPE '/'\n    ```", "```py\n    somecolumn.iendswith(\"foo/%bar\", escape=\"^\")\n    ```", "```py\n    lower(somecolumn) LIKE '%' || lower(:param) ESCAPE '^'\n    ```", "```py\n    somecolumn.endswith(\"foo%bar^bat\", escape=\"^\", autoescape=True)\n    ```", "```py\nmethod ilike(other: Any, escape: str | None = None) \u2192 ColumnOperators\n```", "```py\nlower(a) LIKE lower(other)\n```", "```py\na ILIKE other\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.ilike(\"%foobar%\"))\n```", "```py\n    somecolumn.ilike(\"foo/%bar\", escape=\"/\")\n    ```", "```py\nmethod in_(other: Any) \u2192 ColumnOperators\n```", "```py\n    stmt.where(column.in_([1, 2, 3]))\n    ```", "```py\n    WHERE COL IN (?, ?, ?)\n    ```", "```py\n    from sqlalchemy import tuple_\n    stmt.where(tuple_(col1, col2).in_([(1, 10), (2, 20), (3, 30)]))\n    ```", "```py\n    stmt.where(column.in_([]))\n    ```", "```py\n    WHERE col IN (SELECT 1 FROM (SELECT 1) WHERE 1!=1)\n    ```", "```py\n    stmt.where(column.in_(bindparam('value', expanding=True)))\n    ```", "```py\n    WHERE COL IN ([EXPANDING_value])\n    ```", "```py\n    connection.execute(stmt, {\"value\": [1, 2, 3]})\n    ```", "```py\n    WHERE COL IN (?, ?, ?)\n    ```", "```py\n    WHERE COL IN (SELECT 1 FROM (SELECT 1) WHERE 1!=1)\n    ```", "```py\n    stmt.where(\n        column.in_(\n            select(othertable.c.y).\n            where(table.c.x == othertable.c.x)\n        )\n    )\n    ```", "```py\n    WHERE COL IN (SELECT othertable.y\n    FROM othertable WHERE othertable.x = table.x)\n    ```", "```py\nattribute info\n```", "```py\nmethod is_(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod is_distinct_from(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod is_not(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod is_not_distinct_from(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod isnot(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod isnot_distinct_from(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod istartswith(other: Any, escape: str | None = None, autoescape: bool = False) \u2192 ColumnOperators\n```", "```py\nlower(column) LIKE lower(<other>) || '%'\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.istartswith(\"foobar\"))\n```", "```py\n    somecolumn.istartswith(\"foo%bar\", autoescape=True)\n    ```", "```py\n    lower(somecolumn) LIKE lower(:param) || '%' ESCAPE '/'\n    ```", "```py\n    somecolumn.istartswith(\"foo/%bar\", escape=\"^\")\n    ```", "```py\n    lower(somecolumn) LIKE lower(:param) || '%' ESCAPE '^'\n    ```", "```py\n    somecolumn.istartswith(\"foo%bar^bat\", escape=\"^\", autoescape=True)\n    ```", "```py\nmethod like(other: Any, escape: str | None = None) \u2192 ColumnOperators\n```", "```py\na LIKE other\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.like(\"%foobar%\"))\n```", "```py\n    somecolumn.like(\"foo/%bar\", escape=\"/\")\n    ```", "```py\nattribute local_attr\n```", "```py\nmethod match(other: Any, **kwargs: Any) \u2192 ColumnOperators\n```", "```py\nmethod not_ilike(other: Any, escape: str | None = None) \u2192 ColumnOperators\n```", "```py\nmethod not_in(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod not_like(other: Any, escape: str | None = None) \u2192 ColumnOperators\n```", "```py\nmethod notilike(other: Any, escape: str | None = None) \u2192 ColumnOperators\n```", "```py\nmethod notin_(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod notlike(other: Any, escape: str | None = None) \u2192 ColumnOperators\n```", "```py\nmethod nulls_first() \u2192 ColumnOperators\n```", "```py\nmethod nulls_last() \u2192 ColumnOperators\n```", "```py\nmethod nullsfirst() \u2192 ColumnOperators\n```", "```py\nmethod nullslast() \u2192 ColumnOperators\n```", "```py\nmethod op(opstring: str, precedence: int = 0, is_comparison: bool = False, return_type: Type[TypeEngine[Any]] | TypeEngine[Any] | None = None, python_impl: Callable[..., Any] | None = None) \u2192 Callable[[Any], Operators]\n```", "```py\nsomecolumn.op(\"*\")(5)\n```", "```py\nsomecolumn * 5\n```", "```py\nsomecolumn.op('&')(0xff)\n```", "```py\n    >>> expr = column('x').op('+', python_impl=lambda a, b: a + b)('y')\n    ```", "```py\n    >>> expr.operator(5, 10)\n    15\n    ```", "```py\nmethod operate(op: OperatorType, *other: Any, **kwargs: Any) \u2192 Operators\n```", "```py\nclass MyComparator(ColumnOperators):\n    def operate(self, op, other, **kwargs):\n        return op(func.lower(self), func.lower(other), **kwargs)\n```", "```py\nattribute parent: _AssociationProxyProtocol[_T]\n```", "```py\nmethod regexp_match(pattern: Any, flags: str | None = None) \u2192 ColumnOperators\n```", "```py\nstmt = select(table.c.some_column).where(\n    table.c.some_column.regexp_match('^(b|c)')\n)\n```", "```py\nmethod regexp_replace(pattern: Any, replacement: Any, flags: str | None = None) \u2192 ColumnOperators\n```", "```py\nstmt = select(\n    table.c.some_column.regexp_replace(\n        'b(..)',\n        'XY',\n        flags='g'\n    )\n)\n```", "```py\nattribute remote_attr\n```", "```py\nmethod reverse_operate(op: OperatorType, other: Any, **kwargs: Any) \u2192 Operators\n```", "```py\nattribute scalar\n```", "```py\nmethod set(obj: Any, values: _T) \u2192 None\n```", "```py\nmethod startswith(other: Any, escape: str | None = None, autoescape: bool = False) \u2192 ColumnOperators\n```", "```py\ncolumn LIKE <other> || '%'\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.startswith(\"foobar\"))\n```", "```py\n    somecolumn.startswith(\"foo%bar\", autoescape=True)\n    ```", "```py\n    somecolumn LIKE :param || '%' ESCAPE '/'\n    ```", "```py\n    somecolumn.startswith(\"foo/%bar\", escape=\"^\")\n    ```", "```py\n    somecolumn LIKE :param || '%' ESCAPE '^'\n    ```", "```py\n    somecolumn.startswith(\"foo%bar^bat\", escape=\"^\", autoescape=True)\n    ```", "```py\nattribute target_class: Type[Any]\n```", "```py\nattribute timetuple: Literal[None] = None\n```", "```py\nclass sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance\n```", "```py\nmethod __le__(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod __lt__(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod all_() \u2192 ColumnOperators\n```", "```py\nmethod any(criterion: _ColumnExpressionArgument[bool] | None = None, **kwargs: Any) \u2192 ColumnElement[bool]\n```", "```py\nmethod any_() \u2192 ColumnOperators\n```", "```py\nmethod asc() \u2192 ColumnOperators\n```", "```py\nattribute attr\n```", "```py\nstmt = (\n    select(Parent).\n    join(Parent.proxied.local_attr).\n    join(Parent.proxied.remote_attr)\n)\n```", "```py\nmethod between(cleft: Any, cright: Any, symmetric: bool = False) \u2192 ColumnOperators\n```", "```py\nmethod bitwise_and(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod bitwise_lshift(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod bitwise_not() \u2192 ColumnOperators\n```", "```py\nmethod bitwise_or(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod bitwise_rshift(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod bitwise_xor(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod bool_op(opstring: str, precedence: int = 0, python_impl: Callable[[...], Any] | None = None) \u2192 Callable[[Any], Operators]\n```", "```py\nmethod collate(collation: str) \u2192 ColumnOperators\n```", "```py\nmethod concat(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod contains(other: Any, **kw: Any) \u2192 ColumnElement[bool]\n```", "```py\nmethod desc() \u2192 ColumnOperators\n```", "```py\nmethod distinct() \u2192 ColumnOperators\n```", "```py\nmethod endswith(other: Any, escape: str | None = None, autoescape: bool = False) \u2192 ColumnOperators\n```", "```py\ncolumn LIKE '%' || <other>\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.endswith(\"foobar\"))\n```", "```py\n    somecolumn.endswith(\"foo%bar\", autoescape=True)\n    ```", "```py\n    somecolumn LIKE '%' || :param ESCAPE '/'\n    ```", "```py\n    somecolumn.endswith(\"foo/%bar\", escape=\"^\")\n    ```", "```py\n    somecolumn LIKE '%' || :param ESCAPE '^'\n    ```", "```py\n    somecolumn.endswith(\"foo%bar^bat\", escape=\"^\", autoescape=True)\n    ```", "```py\nmethod has(criterion: _ColumnExpressionArgument[bool] | None = None, **kwargs: Any) \u2192 ColumnElement[bool]\n```", "```py\nmethod icontains(other: Any, **kw: Any) \u2192 ColumnOperators\n```", "```py\nlower(column) LIKE '%' || lower(<other>) || '%'\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.icontains(\"foobar\"))\n```", "```py\n    somecolumn.icontains(\"foo%bar\", autoescape=True)\n    ```", "```py\n    lower(somecolumn) LIKE '%' || lower(:param) || '%' ESCAPE '/'\n    ```", "```py\n    somecolumn.icontains(\"foo/%bar\", escape=\"^\")\n    ```", "```py\n    lower(somecolumn) LIKE '%' || lower(:param) || '%' ESCAPE '^'\n    ```", "```py\n    somecolumn.icontains(\"foo%bar^bat\", escape=\"^\", autoescape=True)\n    ```", "```py\nmethod iendswith(other: Any, escape: str | None = None, autoescape: bool = False) \u2192 ColumnOperators\n```", "```py\nlower(column) LIKE '%' || lower(<other>)\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.iendswith(\"foobar\"))\n```", "```py\n    somecolumn.iendswith(\"foo%bar\", autoescape=True)\n    ```", "```py\n    lower(somecolumn) LIKE '%' || lower(:param) ESCAPE '/'\n    ```", "```py\n    somecolumn.iendswith(\"foo/%bar\", escape=\"^\")\n    ```", "```py\n    lower(somecolumn) LIKE '%' || lower(:param) ESCAPE '^'\n    ```", "```py\n    somecolumn.endswith(\"foo%bar^bat\", escape=\"^\", autoescape=True)\n    ```", "```py\nmethod ilike(other: Any, escape: str | None = None) \u2192 ColumnOperators\n```", "```py\nlower(a) LIKE lower(other)\n```", "```py\na ILIKE other\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.ilike(\"%foobar%\"))\n```", "```py\n    somecolumn.ilike(\"foo/%bar\", escape=\"/\")\n    ```", "```py\nmethod in_(other: Any) \u2192 ColumnOperators\n```", "```py\n    stmt.where(column.in_([1, 2, 3]))\n    ```", "```py\n    WHERE COL IN (?, ?, ?)\n    ```", "```py\n    from sqlalchemy import tuple_\n    stmt.where(tuple_(col1, col2).in_([(1, 10), (2, 20), (3, 30)]))\n    ```", "```py\n    stmt.where(column.in_([]))\n    ```", "```py\n    WHERE col IN (SELECT 1 FROM (SELECT 1) WHERE 1!=1)\n    ```", "```py\n    stmt.where(column.in_(bindparam('value', expanding=True)))\n    ```", "```py\n    WHERE COL IN ([EXPANDING_value])\n    ```", "```py\n    connection.execute(stmt, {\"value\": [1, 2, 3]})\n    ```", "```py\n    WHERE COL IN (?, ?, ?)\n    ```", "```py\n    WHERE COL IN (SELECT 1 FROM (SELECT 1) WHERE 1!=1)\n    ```", "```py\n    stmt.where(\n        column.in_(\n            select(othertable.c.y).\n            where(table.c.x == othertable.c.x)\n        )\n    )\n    ```", "```py\n    WHERE COL IN (SELECT othertable.y\n    FROM othertable WHERE othertable.x = table.x)\n    ```", "```py\nmethod is_(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod is_distinct_from(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod is_not(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod is_not_distinct_from(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod isnot(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod isnot_distinct_from(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod istartswith(other: Any, escape: str | None = None, autoescape: bool = False) \u2192 ColumnOperators\n```", "```py\nlower(column) LIKE lower(<other>) || '%'\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.istartswith(\"foobar\"))\n```", "```py\n    somecolumn.istartswith(\"foo%bar\", autoescape=True)\n    ```", "```py\n    lower(somecolumn) LIKE lower(:param) || '%' ESCAPE '/'\n    ```", "```py\n    somecolumn.istartswith(\"foo/%bar\", escape=\"^\")\n    ```", "```py\n    lower(somecolumn) LIKE lower(:param) || '%' ESCAPE '^'\n    ```", "```py\n    somecolumn.istartswith(\"foo%bar^bat\", escape=\"^\", autoescape=True)\n    ```", "```py\nmethod like(other: Any, escape: str | None = None) \u2192 ColumnOperators\n```", "```py\na LIKE other\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.like(\"%foobar%\"))\n```", "```py\n    somecolumn.like(\"foo/%bar\", escape=\"/\")\n    ```", "```py\nattribute local_attr\n```", "```py\nmethod match(other: Any, **kwargs: Any) \u2192 ColumnOperators\n```", "```py\nmethod not_ilike(other: Any, escape: str | None = None) \u2192 ColumnOperators\n```", "```py\nmethod not_in(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod not_like(other: Any, escape: str | None = None) \u2192 ColumnOperators\n```", "```py\nmethod notilike(other: Any, escape: str | None = None) \u2192 ColumnOperators\n```", "```py\nmethod notin_(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod notlike(other: Any, escape: str | None = None) \u2192 ColumnOperators\n```", "```py\nmethod nulls_first() \u2192 ColumnOperators\n```", "```py\nmethod nulls_last() \u2192 ColumnOperators\n```", "```py\nmethod nullsfirst() \u2192 ColumnOperators\n```", "```py\nmethod nullslast() \u2192 ColumnOperators\n```", "```py\nmethod op(opstring: str, precedence: int = 0, is_comparison: bool = False, return_type: Type[TypeEngine[Any]] | TypeEngine[Any] | None = None, python_impl: Callable[..., Any] | None = None) \u2192 Callable[[Any], Operators]\n```", "```py\nsomecolumn.op(\"*\")(5)\n```", "```py\nsomecolumn * 5\n```", "```py\nsomecolumn.op('&')(0xff)\n```", "```py\n    >>> expr = column('x').op('+', python_impl=lambda a, b: a + b)('y')\n    ```", "```py\n    >>> expr.operator(5, 10)\n    15\n    ```", "```py\nmethod operate(op: OperatorType, *other: Any, **kwargs: Any) \u2192 Operators\n```", "```py\nclass MyComparator(ColumnOperators):\n    def operate(self, op, other, **kwargs):\n        return op(func.lower(self), func.lower(other), **kwargs)\n```", "```py\nmethod regexp_match(pattern: Any, flags: str | None = None) \u2192 ColumnOperators\n```", "```py\nstmt = select(table.c.some_column).where(\n    table.c.some_column.regexp_match('^(b|c)')\n)\n```", "```py\nmethod regexp_replace(pattern: Any, replacement: Any, flags: str | None = None) \u2192 ColumnOperators\n```", "```py\nstmt = select(\n    table.c.some_column.regexp_replace(\n        'b(..)',\n        'XY',\n        flags='g'\n    )\n)\n```", "```py\nattribute remote_attr\n```", "```py\nmethod reverse_operate(op: OperatorType, other: Any, **kwargs: Any) \u2192 Operators\n```", "```py\nattribute scalar\n```", "```py\nmethod startswith(other: Any, escape: str | None = None, autoescape: bool = False) \u2192 ColumnOperators\n```", "```py\ncolumn LIKE <other> || '%'\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.startswith(\"foobar\"))\n```", "```py\n    somecolumn.startswith(\"foo%bar\", autoescape=True)\n    ```", "```py\n    somecolumn LIKE :param || '%' ESCAPE '/'\n    ```", "```py\n    somecolumn.startswith(\"foo/%bar\", escape=\"^\")\n    ```", "```py\n    somecolumn LIKE :param || '%' ESCAPE '^'\n    ```", "```py\n    somecolumn.startswith(\"foo%bar^bat\", escape=\"^\", autoescape=True)\n    ```", "```py\nattribute target_class: Type[Any]\n```", "```py\nattribute timetuple: Literal[None] = None\n```", "```py\nclass sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance\n```", "```py\nmethod __le__(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod __lt__(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod __ne__(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod all_() \u2192 ColumnOperators\n```", "```py\nmethod any(criterion: _ColumnExpressionArgument[bool] | None = None, **kwargs: Any) \u2192 ColumnElement[bool]\n```", "```py\nmethod any_() \u2192 ColumnOperators\n```", "```py\nmethod asc() \u2192 ColumnOperators\n```", "```py\nattribute attr\n```", "```py\nstmt = (\n    select(Parent).\n    join(Parent.proxied.local_attr).\n    join(Parent.proxied.remote_attr)\n)\n```", "```py\nmethod between(cleft: Any, cright: Any, symmetric: bool = False) \u2192 ColumnOperators\n```", "```py\nmethod bitwise_and(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod bitwise_lshift(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod bitwise_not() \u2192 ColumnOperators\n```", "```py\nmethod bitwise_or(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod bitwise_rshift(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod bitwise_xor(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod bool_op(opstring: str, precedence: int = 0, python_impl: Callable[[...], Any] | None = None) \u2192 Callable[[Any], Operators]\n```", "```py\nmethod collate(collation: str) \u2192 ColumnOperators\n```", "```py\nmethod concat(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod contains(other: Any, **kw: Any) \u2192 ColumnOperators\n```", "```py\ncolumn LIKE '%' || <other> || '%'\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.contains(\"foobar\"))\n```", "```py\n    somecolumn.contains(\"foo%bar\", autoescape=True)\n    ```", "```py\n    somecolumn LIKE '%' || :param || '%' ESCAPE '/'\n    ```", "```py\n    somecolumn.contains(\"foo/%bar\", escape=\"^\")\n    ```", "```py\n    somecolumn LIKE '%' || :param || '%' ESCAPE '^'\n    ```", "```py\n    somecolumn.contains(\"foo%bar^bat\", escape=\"^\", autoescape=True)\n    ```", "```py\nmethod desc() \u2192 ColumnOperators\n```", "```py\nmethod distinct() \u2192 ColumnOperators\n```", "```py\nmethod endswith(other: Any, escape: str | None = None, autoescape: bool = False) \u2192 ColumnOperators\n```", "```py\ncolumn LIKE '%' || <other>\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.endswith(\"foobar\"))\n```", "```py\n    somecolumn.endswith(\"foo%bar\", autoescape=True)\n    ```", "```py\n    somecolumn LIKE '%' || :param ESCAPE '/'\n    ```", "```py\n    somecolumn.endswith(\"foo/%bar\", escape=\"^\")\n    ```", "```py\n    somecolumn LIKE '%' || :param ESCAPE '^'\n    ```", "```py\n    somecolumn.endswith(\"foo%bar^bat\", escape=\"^\", autoescape=True)\n    ```", "```py\nmethod has(criterion: _ColumnExpressionArgument[bool] | None = None, **kwargs: Any) \u2192 ColumnElement[bool]\n```", "```py\nmethod icontains(other: Any, **kw: Any) \u2192 ColumnOperators\n```", "```py\nlower(column) LIKE '%' || lower(<other>) || '%'\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.icontains(\"foobar\"))\n```", "```py\n    somecolumn.icontains(\"foo%bar\", autoescape=True)\n    ```", "```py\n    lower(somecolumn) LIKE '%' || lower(:param) || '%' ESCAPE '/'\n    ```", "```py\n    somecolumn.icontains(\"foo/%bar\", escape=\"^\")\n    ```", "```py\n    lower(somecolumn) LIKE '%' || lower(:param) || '%' ESCAPE '^'\n    ```", "```py\n    somecolumn.icontains(\"foo%bar^bat\", escape=\"^\", autoescape=True)\n    ```", "```py\nmethod iendswith(other: Any, escape: str | None = None, autoescape: bool = False) \u2192 ColumnOperators\n```", "```py\nlower(column) LIKE '%' || lower(<other>)\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.iendswith(\"foobar\"))\n```", "```py\n    somecolumn.iendswith(\"foo%bar\", autoescape=True)\n    ```", "```py\n    lower(somecolumn) LIKE '%' || lower(:param) ESCAPE '/'\n    ```", "```py\n    somecolumn.iendswith(\"foo/%bar\", escape=\"^\")\n    ```", "```py\n    lower(somecolumn) LIKE '%' || lower(:param) ESCAPE '^'\n    ```", "```py\n    somecolumn.endswith(\"foo%bar^bat\", escape=\"^\", autoescape=True)\n    ```", "```py\nmethod ilike(other: Any, escape: str | None = None) \u2192 ColumnOperators\n```", "```py\nlower(a) LIKE lower(other)\n```", "```py\na ILIKE other\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.ilike(\"%foobar%\"))\n```", "```py\n    somecolumn.ilike(\"foo/%bar\", escape=\"/\")\n    ```", "```py\nmethod in_(other: Any) \u2192 ColumnOperators\n```", "```py\n    stmt.where(column.in_([1, 2, 3]))\n    ```", "```py\n    WHERE COL IN (?, ?, ?)\n    ```", "```py\n    from sqlalchemy import tuple_\n    stmt.where(tuple_(col1, col2).in_([(1, 10), (2, 20), (3, 30)]))\n    ```", "```py\n    stmt.where(column.in_([]))\n    ```", "```py\n    WHERE col IN (SELECT 1 FROM (SELECT 1) WHERE 1!=1)\n    ```", "```py\n    stmt.where(column.in_(bindparam('value', expanding=True)))\n    ```", "```py\n    WHERE COL IN ([EXPANDING_value])\n    ```", "```py\n    connection.execute(stmt, {\"value\": [1, 2, 3]})\n    ```", "```py\n    WHERE COL IN (?, ?, ?)\n    ```", "```py\n    WHERE COL IN (SELECT 1 FROM (SELECT 1) WHERE 1!=1)\n    ```", "```py\n    stmt.where(\n        column.in_(\n            select(othertable.c.y).\n            where(table.c.x == othertable.c.x)\n        )\n    )\n    ```", "```py\n    WHERE COL IN (SELECT othertable.y\n    FROM othertable WHERE othertable.x = table.x)\n    ```", "```py\nmethod is_(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod is_distinct_from(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod is_not(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod is_not_distinct_from(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod isnot(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod isnot_distinct_from(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod istartswith(other: Any, escape: str | None = None, autoescape: bool = False) \u2192 ColumnOperators\n```", "```py\nlower(column) LIKE lower(<other>) || '%'\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.istartswith(\"foobar\"))\n```", "```py\n    somecolumn.istartswith(\"foo%bar\", autoescape=True)\n    ```", "```py\n    lower(somecolumn) LIKE lower(:param) || '%' ESCAPE '/'\n    ```", "```py\n    somecolumn.istartswith(\"foo/%bar\", escape=\"^\")\n    ```", "```py\n    lower(somecolumn) LIKE lower(:param) || '%' ESCAPE '^'\n    ```", "```py\n    somecolumn.istartswith(\"foo%bar^bat\", escape=\"^\", autoescape=True)\n    ```", "```py\nmethod like(other: Any, escape: str | None = None) \u2192 ColumnOperators\n```", "```py\na LIKE other\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.like(\"%foobar%\"))\n```", "```py\n    somecolumn.like(\"foo/%bar\", escape=\"/\")\n    ```", "```py\nattribute local_attr\n```", "```py\nmethod match(other: Any, **kwargs: Any) \u2192 ColumnOperators\n```", "```py\nmethod not_ilike(other: Any, escape: str | None = None) \u2192 ColumnOperators\n```", "```py\nmethod not_in(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod not_like(other: Any, escape: str | None = None) \u2192 ColumnOperators\n```", "```py\nmethod notilike(other: Any, escape: str | None = None) \u2192 ColumnOperators\n```", "```py\nmethod notin_(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod notlike(other: Any, escape: str | None = None) \u2192 ColumnOperators\n```", "```py\nmethod nulls_first() \u2192 ColumnOperators\n```", "```py\nmethod nulls_last() \u2192 ColumnOperators\n```", "```py\nmethod nullsfirst() \u2192 ColumnOperators\n```", "```py\nmethod nullslast() \u2192 ColumnOperators\n```", "```py\nmethod op(opstring: str, precedence: int = 0, is_comparison: bool = False, return_type: Type[TypeEngine[Any]] | TypeEngine[Any] | None = None, python_impl: Callable[..., Any] | None = None) \u2192 Callable[[Any], Operators]\n```", "```py\nsomecolumn.op(\"*\")(5)\n```", "```py\nsomecolumn * 5\n```", "```py\nsomecolumn.op('&')(0xff)\n```", "```py\n    >>> expr = column('x').op('+', python_impl=lambda a, b: a + b)('y')\n    ```", "```py\n    >>> expr.operator(5, 10)\n    15\n    ```", "```py\nmethod operate(op: OperatorType, *other: Any, **kwargs: Any) \u2192 ColumnElement[Any]\n```", "```py\nclass MyComparator(ColumnOperators):\n    def operate(self, op, other, **kwargs):\n        return op(func.lower(self), func.lower(other), **kwargs)\n```", "```py\nmethod regexp_match(pattern: Any, flags: str | None = None) \u2192 ColumnOperators\n```", "```py\nstmt = select(table.c.some_column).where(\n    table.c.some_column.regexp_match('^(b|c)')\n)\n```", "```py\nmethod regexp_replace(pattern: Any, replacement: Any, flags: str | None = None) \u2192 ColumnOperators\n```", "```py\nstmt = select(\n    table.c.some_column.regexp_replace(\n        'b(..)',\n        'XY',\n        flags='g'\n    )\n)\n```", "```py\nattribute remote_attr\n```", "```py\nmethod reverse_operate(op: OperatorType, other: Any, **kwargs: Any) \u2192 Operators\n```", "```py\nattribute scalar\n```", "```py\nmethod startswith(other: Any, escape: str | None = None, autoescape: bool = False) \u2192 ColumnOperators\n```", "```py\ncolumn LIKE <other> || '%'\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.startswith(\"foobar\"))\n```", "```py\n    somecolumn.startswith(\"foo%bar\", autoescape=True)\n    ```", "```py\n    somecolumn LIKE :param || '%' ESCAPE '/'\n    ```", "```py\n    somecolumn.startswith(\"foo/%bar\", escape=\"^\")\n    ```", "```py\n    somecolumn LIKE :param || '%' ESCAPE '^'\n    ```", "```py\n    somecolumn.startswith(\"foo%bar^bat\", escape=\"^\", autoescape=True)\n    ```", "```py\nattribute target_class: Type[Any]\n```", "```py\nattribute timetuple: Literal[None] = None\n```", "```py\nclass sqlalchemy.ext.associationproxy.AssociationProxyExtensionType\n```", "```py\nattribute ASSOCIATION_PROXY = 'ASSOCIATION_PROXY'\n```"]