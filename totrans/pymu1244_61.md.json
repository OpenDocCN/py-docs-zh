["```py\n    imgrect = pymupdf.Rect(0, 0, width, height)\n    shrink = pymupdf.Matrix(1/width, 0, 0, 1/height, 0, 0)\n    bbox = imgrect * shrink * transform \n    ```", "```py\n    >>> imginfo = page.get_images()[0]  # get an image item on a page\n    >>> imginfo\n    (5, 0, 439, 501, 8, 'DeviceRGB', '', 'fzImg0', 'DCTDecode')\n    >>> #------------------------------------------------\n    >>> # define image shrink matrix and rectangle\n    >>> #------------------------------------------------\n    >>> shrink = pymupdf.Matrix(1 / 439, 0, 0, 1 / 501, 0, 0)\n    >>> imgrect = pymupdf.Rect(0, 0, 439, 501)\n    >>> #------------------------------------------------\n    >>> # determine image bbox and transformation matrix:\n    >>> #------------------------------------------------\n    >>> bbox, transform = page.get_image_bbox(\"fzImg0\", transform=True)\n    >>> #------------------------------------------------\n    >>> # confirm equality - permitting rounding errors\n    >>> #------------------------------------------------\n    >>> bbox\n    Rect(100.0, 112.37525939941406, 300.0, 287.624755859375)\n    >>> imgrect * shrink * transform\n    Rect(100.0, 112.375244140625, 300.0, 287.6247253417969)\n    >>> #------------------------------------------------\n    >>> shrink * transform\n    Matrix(0.0, -0.39920157194137573, 0.3992016017436981, 0.0, 100.0, 287.6247253417969)\n    >>> #------------------------------------------------\n    >>> # the above shows:\n    >>> # image sides are scaled by same factor ~0.4,\n    >>> # and the image is rotated by 90 degrees clockwise\n    >>> # compare this with pymupdf.Matrix(-90) * 0.4\n    >>> #------------------------------------------------ \n    ```", "```py\nIn [2]: pymupdf.Base14_fontdict\nOut[2]:\n{'courier': 'Courier',\n'courier-oblique': 'Courier-Oblique',\n'courier-bold': 'Courier-Bold',\n'courier-boldoblique': 'Courier-BoldOblique',\n'helvetica': 'Helvetica',\n'helvetica-oblique': 'Helvetica-Oblique',\n'helvetica-bold': 'Helvetica-Bold',\n'helvetica-boldoblique': 'Helvetica-BoldOblique',\n'times-roman': 'Times-Roman',\n'times-italic': 'Times-Italic',\n'times-bold': 'Times-Bold',\n'times-bolditalic': 'Times-BoldItalic',\n'symbol': 'Symbol',\n'zapfdingbats': 'ZapfDingbats',\n'helv': 'Helvetica',\n'heit': 'Helvetica-Oblique',\n'hebo': 'Helvetica-Bold',\n'hebi': 'Helvetica-BoldOblique',\n'cour': 'Courier',\n'coit': 'Courier-Oblique',\n'cobo': 'Courier-Bold',\n'cobi': 'Courier-BoldOblique',\n'tiro': 'Times-Roman',\n'tibo': 'Times-Bold',\n'tiit': 'Times-Italic',\n'tibi': 'Times-BoldItalic',\n'symb': 'Symbol',\n'zadb': 'ZapfDingbats'} \n```", "```py\n>>> import pymupdf, array, numpy as np\n>>> m = pymupdf.Matrix(1, 2, 3, 4, 5, 6)\n>>>\n>>> list(m)\n[1.0, 2.0, 3.0, 4.0, 5.0, 6.0]\n>>>\n>>> tuple(m)\n(1.0, 2.0, 3.0, 4.0, 5.0, 6.0)\n>>>\n>>> array.array(\"f\", m)\narray('f', [1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n>>>\n>>> np.array(m)\narray([1., 2., 3., 4., 5., 6.]) \n```", "```py\n>>> page = doc[n]\n>>> annot = page.first_annot\n>>> annot.type                    # everything works fine\n[5, 'Circle']\n>>> page = None                   # this turns 'annot' into an orphan\n>>> annot.type\n<... omitted lines ...>\nRuntimeError: orphaned object: parent is None\n>>>\n>>> # same happens, if you do this:\n>>> annot = doc[n].first_annot     # deletes the page again immediately!\n>>> annot.type                    # so, 'annot' is 'born' orphaned\n<... omitted lines ...>\nRuntimeError: orphaned object: parent is None \n```", "```py\n>>> doc = pymupdf.open(\"some.pdf\")\n>>> page = doc[n]\n>>> annot = page.first_annot\n>>> page.rect\npymupdf.Rect(0.0, 0.0, 595.0, 842.0)\n>>> annot.type\n[5, 'Circle']\n>>> del doc                       # or doc = None or doc.close()\n>>> page.rect\n<... omitted lines ...>\nRuntimeError: orphaned object: parent is None\n>>> annot.type\n<... omitted lines ...>\nRuntimeError: orphaned object: parent is None \n```", "```py\n    >>> page = doc.new_page(width=612, height=792)  # make new Letter page\n    >>> ptm = page.transformation_matrix\n    >>> # the inverse matrix of ptm is ~ptm\n    >>> pymupdf.Rect(0, 0, 100, 100) * ~ptm\n    Rect(0.0, 692.0, 100.0, 792.0) \n    ```", "```py\n    imgrect = pymupdf.Rect(0, 0, width, height)\n    shrink = pymupdf.Matrix(1/width, 0, 0, 1/height, 0, 0)\n    bbox = imgrect * shrink * transform \n    ```", "```py\n    >>> imginfo = page.get_images()[0]  # get an image item on a page\n    >>> imginfo\n    (5, 0, 439, 501, 8, 'DeviceRGB', '', 'fzImg0', 'DCTDecode')\n    >>> #------------------------------------------------\n    >>> # define image shrink matrix and rectangle\n    >>> #------------------------------------------------\n    >>> shrink = pymupdf.Matrix(1 / 439, 0, 0, 1 / 501, 0, 0)\n    >>> imgrect = pymupdf.Rect(0, 0, 439, 501)\n    >>> #------------------------------------------------\n    >>> # determine image bbox and transformation matrix:\n    >>> #------------------------------------------------\n    >>> bbox, transform = page.get_image_bbox(\"fzImg0\", transform=True)\n    >>> #------------------------------------------------\n    >>> # confirm equality - permitting rounding errors\n    >>> #------------------------------------------------\n    >>> bbox\n    Rect(100.0, 112.37525939941406, 300.0, 287.624755859375)\n    >>> imgrect * shrink * transform\n    Rect(100.0, 112.375244140625, 300.0, 287.6247253417969)\n    >>> #------------------------------------------------\n    >>> shrink * transform\n    Matrix(0.0, -0.39920157194137573, 0.3992016017436981, 0.0, 100.0, 287.6247253417969)\n    >>> #------------------------------------------------\n    >>> # the above shows:\n    >>> # image sides are scaled by same factor ~0.4,\n    >>> # and the image is rotated by 90 degrees clockwise\n    >>> # compare this with pymupdf.Matrix(-90) * 0.4\n    >>> #------------------------------------------------ \n    ```", "```py\nIn [2]: pymupdf.Base14_fontdict\nOut[2]:\n{'courier': 'Courier',\n'courier-oblique': 'Courier-Oblique',\n'courier-bold': 'Courier-Bold',\n'courier-boldoblique': 'Courier-BoldOblique',\n'helvetica': 'Helvetica',\n'helvetica-oblique': 'Helvetica-Oblique',\n'helvetica-bold': 'Helvetica-Bold',\n'helvetica-boldoblique': 'Helvetica-BoldOblique',\n'times-roman': 'Times-Roman',\n'times-italic': 'Times-Italic',\n'times-bold': 'Times-Bold',\n'times-bolditalic': 'Times-BoldItalic',\n'symbol': 'Symbol',\n'zapfdingbats': 'ZapfDingbats',\n'helv': 'Helvetica',\n'heit': 'Helvetica-Oblique',\n'hebo': 'Helvetica-Bold',\n'hebi': 'Helvetica-BoldOblique',\n'cour': 'Courier',\n'coit': 'Courier-Oblique',\n'cobo': 'Courier-Bold',\n'cobi': 'Courier-BoldOblique',\n'tiro': 'Times-Roman',\n'tibo': 'Times-Bold',\n'tiit': 'Times-Italic',\n'tibi': 'Times-BoldItalic',\n'symb': 'Symbol',\n'zadb': 'ZapfDingbats'} \n```", "```py\n>>> import pymupdf, array, numpy as np\n>>> m = pymupdf.Matrix(1, 2, 3, 4, 5, 6)\n>>>\n>>> list(m)\n[1.0, 2.0, 3.0, 4.0, 5.0, 6.0]\n>>>\n>>> tuple(m)\n(1.0, 2.0, 3.0, 4.0, 5.0, 6.0)\n>>>\n>>> array.array(\"f\", m)\narray('f', [1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n>>>\n>>> np.array(m)\narray([1., 2., 3., 4., 5., 6.]) \n```", "```py\n>>> page = doc[n]\n>>> annot = page.first_annot\n>>> annot.type                    # everything works fine\n[5, 'Circle']\n>>> page = None                   # this turns 'annot' into an orphan\n>>> annot.type\n<... omitted lines ...>\nRuntimeError: orphaned object: parent is None\n>>>\n>>> # same happens, if you do this:\n>>> annot = doc[n].first_annot     # deletes the page again immediately!\n>>> annot.type                    # so, 'annot' is 'born' orphaned\n<... omitted lines ...>\nRuntimeError: orphaned object: parent is None \n```", "```py\n>>> doc = pymupdf.open(\"some.pdf\")\n>>> page = doc[n]\n>>> annot = page.first_annot\n>>> page.rect\npymupdf.Rect(0.0, 0.0, 595.0, 842.0)\n>>> annot.type\n[5, 'Circle']\n>>> del doc                       # or doc = None or doc.close()\n>>> page.rect\n<... omitted lines ...>\nRuntimeError: orphaned object: parent is None\n>>> annot.type\n<... omitted lines ...>\nRuntimeError: orphaned object: parent is None \n```", "```py\n    >>> page = doc.new_page(width=612, height=792)  # make new Letter page\n    >>> ptm = page.transformation_matrix\n    >>> # the inverse matrix of ptm is ~ptm\n    >>> pymupdf.Rect(0, 0, 100, 100) * ~ptm\n    Rect(0.0, 692.0, 100.0, 792.0) \n    ```", "```py\n    >>> page = doc.new_page(width=612, height=792)  # make new Letter page\n    >>> ptm = page.transformation_matrix\n    >>> # the inverse matrix of ptm is ~ptm\n    >>> pymupdf.Rect(0, 0, 100, 100) * ~ptm\n    Rect(0.0, 692.0, 100.0, 792.0) \n    ```"]