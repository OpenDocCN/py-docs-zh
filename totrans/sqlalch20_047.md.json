["```py\n>>> stmt = select(User).execution_options(populate_existing=True)\n>>> result = session.execute(stmt)\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account\n... \n```", "```py\nstmt = (\n    select(User)\n    .where(User.name.in_(names))\n    .execution_options(populate_existing=True)\n    .options(selectinload(User.addresses))\n)\n# will refresh all matching User objects as well as the related\n# Address objects\nusers = session.execute(stmt).scalars().all()\n```", "```py\n>>> stmt = select(User).execution_options(autoflush=False)\n>>> session.execute(stmt)\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account\n... \n```", "```py\n>>> stmt = select(User).execution_options(yield_per=10)\n>>> for user_obj in session.scalars(stmt):\n...     print(user_obj)\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account\n[...]  ()\nUser(id=1, name='spongebob', fullname='Spongebob Squarepants')\nUser(id=2, name='sandy', fullname='Sandy Cheeks')\n...\n>>> # ... rows continue ...\n```", "```py\n# equivalent code\n>>> stmt = select(User).execution_options(stream_results=True, max_row_buffer=10)\n>>> for user_obj in session.scalars(stmt).yield_per(10):\n...     print(user_obj)\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account\n[...]  ()\nUser(id=1, name='spongebob', fullname='Spongebob Squarepants')\nUser(id=2, name='sandy', fullname='Sandy Cheeks')\n...\n>>> # ... rows continue ...\n```", "```py\n>>> stmt = select(User).execution_options(yield_per=10)\n>>> for partition in session.scalars(stmt).partitions():\n...     for user_obj in partition:\n...         print(user_obj)\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account\n[...]  ()\nUser(id=1, name='spongebob', fullname='Spongebob Squarepants')\nUser(id=2, name='sandy', fullname='Sandy Cheeks')\n...\n>>> # ... rows continue ...\n```", "```py\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\n\nclass Base(DeclarativeBase):\n    pass\n\nclass MyTable(Base):\n    __tablename__ = \"my_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n```", "```py\nengine = create_engine(\n    \"postgresql+psycopg://scott:tiger@localhost/test\",\n)\n\nwith Session(\n    engine.execution_options(schema_translate_map={None: \"test_schema\"})\n) as sess:\n    sess.add(MyTable(name=\"this is schema one\"))\n    sess.commit()\n\nwith Session(\n    engine.execution_options(schema_translate_map={None: \"test_schema_2\"})\n) as sess:\n    sess.add(MyTable(name=\"this is schema two\"))\n    sess.commit()\n```", "```py\nwith Session(engine) as sess:\n    obj1 = sess.scalar(\n        select(MyTable)\n        .where(MyTable.id == 1)\n        .execution_options(\n            schema_translate_map={None: \"test_schema\"},\n            identity_token=\"test_schema\",\n        )\n    )\n    obj2 = sess.scalar(\n        select(MyTable)\n        .where(MyTable.id == 1)\n        .execution_options(\n            schema_translate_map={None: \"test_schema_2\"},\n            identity_token=\"test_schema_2\",\n        )\n    )\n```", "```py\n>>> from sqlalchemy import inspect\n>>> inspect(obj1).key\n(<class '__main__.MyTable'>, (1,), 'test_schema')\n>>> inspect(obj2).key\n(<class '__main__.MyTable'>, (1,), 'test_schema_2')\n```", "```py\n>>> from pprint import pprint\n>>> user_alias = aliased(User, name=\"user2\")\n>>> stmt = select(User, User.id, user_alias)\n>>> pprint(stmt.column_descriptions)\n[{'aliased': False,\n 'entity': <class 'User'>,\n 'expr': <class 'User'>,\n 'name': 'User',\n 'type': <class 'User'>},\n {'aliased': False,\n 'entity': <class 'User'>,\n 'expr': <....InstrumentedAttribute object at ...>,\n 'name': 'id',\n 'type': Integer()},\n {'aliased': True,\n 'entity': <AliasedClass ...; User>,\n 'expr': <AliasedClass ...; User>,\n 'name': 'user2',\n 'type': <class 'User'>}]\n```", "```py\n>>> stmt = select(user_table, address_table.c.id)\n>>> pprint(stmt.column_descriptions)\n[{'expr': Column('id', Integer(), table=<user_account>, primary_key=True, nullable=False),\n 'name': 'id',\n 'type': Integer()},\n {'expr': Column('name', String(), table=<user_account>, nullable=False),\n 'name': 'name',\n 'type': String()},\n {'expr': Column('fullname', String(), table=<user_account>),\n 'name': 'fullname',\n 'type': String()},\n {'expr': Column('id', Integer(), table=<address>, primary_key=True, nullable=False),\n 'name': 'id_1',\n 'type': Integer()}]\n```", "```py\n>>> from sqlalchemy import update\n>>> stmt = update(User).values(name=\"somename\").returning(User.id)\n>>> pprint(stmt.entity_description)\n{'entity': <class 'User'>,\n 'expr': <class 'User'>,\n 'name': 'User',\n 'table': Table('user_account', ...),\n 'type': <class 'User'>}\n```", "```py\n>>> pprint(stmt.returning_column_descriptions)\n[{'aliased': False,\n 'entity': <class 'User'>,\n 'expr': <sqlalchemy.orm.attributes.InstrumentedAttribute ...>,\n 'name': 'id',\n 'type': Integer()}]\n```", "```py\nfunction sqlalchemy.orm.aliased(element: _EntityType[_O] | FromClause, alias: FromClause | None = None, name: str | None = None, flat: bool = False, adapt_on_names: bool = False) \u2192 AliasedClass[_O] | FromClause | AliasedType[_O]\n```", "```py\nmy_alias = aliased(MyClass)\n\nstmt = select(MyClass, my_alias).filter(MyClass.id > my_alias.id)\nresult = session.execute(stmt)\n```", "```py\n    class UnitPrice(Base):\n     __tablename__ = 'unit_price'\n     ...\n     unit_id = Column(Integer)\n     price = Column(Numeric)\n\n    aggregated_unit_price = Session.query(\n     func.sum(UnitPrice.price).label('price')\n     ).group_by(UnitPrice.unit_id).subquery()\n\n    aggregated_unit_price = aliased(UnitPrice,\n     alias=aggregated_unit_price, adapt_on_names=True)\n    ```", "```py\nclass sqlalchemy.orm.util.AliasedClass\n```", "```py\n# find all pairs of users with the same name\nuser_alias = aliased(User)\nsession.query(User, user_alias).\\\n join((user_alias, User.id > user_alias.id)).\\\n filter(User.name == user_alias.name)\n```", "```py\nfrom sqlalchemy import inspect\nmy_alias = aliased(MyClass)\ninsp = inspect(my_alias)\n```", "```py\nclass sqlalchemy.orm.util.AliasedInsp\n```", "```py\nfrom sqlalchemy import inspect\nfrom sqlalchemy.orm import aliased\n\nmy_alias = aliased(MyMappedClass)\ninsp = inspect(my_alias)\n```", "```py\nclass sqlalchemy.orm.Bundle\n```", "```py\nmethod __init__(name: str, *exprs: _ColumnExpressionArgument[Any], **kw: Any)\n```", "```py\nbn = Bundle(\"mybundle\", MyClass.x, MyClass.y)\n\nfor row in session.query(bn).filter(\n bn.c.x == 5).filter(bn.c.y == 4):\n print(row.mybundle.x, row.mybundle.y)\n```", "```py\nattribute c: ReadOnlyColumnCollection[str, KeyedColumnElement[Any]]\n```", "```py\nattribute columns: ReadOnlyColumnCollection[str, KeyedColumnElement[Any]]\n```", "```py\n> bn = Bundle(\"mybundle\", MyClass.x, MyClass.y)\n> \n> q = sess.query(bn).filter(bn.c.x == 5)\n> ```", "```py\n> b1 = Bundle(\"b1\",\n>  Bundle('b2', MyClass.a, MyClass.b),\n>  Bundle('b3', MyClass.x, MyClass.y)\n>  )\n> \n> q = sess.query(b1).filter(\n>  b1.c.b2.c.a == 5).filter(b1.c.b3.c.y == 9)\n> ```", "```py\nmethod create_row_processor(query: Select[Any], procs: Sequence[Callable[[Row[Any]], Any]], labels: Sequence[str]) \u2192 Callable[[Row[Any]], Any]\n```", "```py\nfrom sqlalchemy.orm import Bundle\n\nclass DictBundle(Bundle):\n def create_row_processor(self, query, procs, labels):\n 'Override create_row_processor to return values as\n dictionaries'\n\n def proc(row):\n return dict(\n zip(labels, (proc(row) for proc in procs))\n )\n return proc\n```", "```py\nbn = DictBundle('mybundle', MyClass.data1, MyClass.data2)\nfor row in session.execute(select(bn)).where(bn.c.data1 == 'd1'):\n print(row.mybundle['data1'], row.mybundle['data2'])\n```", "```py\nattribute is_aliased_class = False\n```", "```py\nattribute is_bundle = True\n```", "```py\nattribute is_clause_element = False\n```", "```py\nattribute is_mapper = False\n```", "```py\nmethod label(name)\n```", "```py\nattribute single_entity = False\n```", "```py\nfunction sqlalchemy.orm.with_loader_criteria(entity_or_base: _EntityType[Any], where_criteria: _ColumnExpressionArgument[bool] | Callable[[Any], _ColumnExpressionArgument[bool]], loader_only: bool = False, include_aliases: bool = False, propagate_to_loaders: bool = True, track_closure_variables: bool = True) \u2192 LoaderCriteriaOption\n```", "```py\nfrom sqlalchemy.orm import with_loader_criteria\n\nstmt = select(User).options(\n selectinload(User.addresses),\n with_loader_criteria(Address, Address.email_address != 'foo'))\n)\n```", "```py\nq = session.query(User).outerjoin(User.addresses).options(\n with_loader_criteria(Address, Address.email_address != 'foo'))\n)\n```", "```py\nsession = Session(bind=engine)\n\n@event.listens_for(\"do_orm_execute\", session)\ndef _add_filtering_criteria(execute_state):\n\n if (\n execute_state.is_select\n and not execute_state.is_column_load\n and not execute_state.is_relationship_load\n ):\n execute_state.statement = execute_state.statement.options(\n with_loader_criteria(\n SecurityRole,\n lambda cls: cls.role.in_(['some_role']),\n include_aliases=True\n )\n )\n```", "```py\nstmt = select(A).join(A.bs).options(\n contains_eager(A.bs),\n with_loader_criteria(B, B.flag == 1)\n)\n```", "```py\nSELECT\n b.id, b.a_id, b.data, b.flag,\n a.id AS id_1,\n a.data AS data_1\nFROM a JOIN b ON a.id = b.a_id AND b.flag = :flag_1\n```", "```py\nfunction sqlalchemy.orm.join(left: _FromClauseArgument, right: _FromClauseArgument, onclause: _OnClauseArgument | None = None, isouter: bool = False, full: bool = False) \u2192 _ORMJoin\n```", "```py\nfrom sqlalchemy.orm import join\nstmt = select(User).\\\n select_from(join(User, Address, User.addresses)).\\\n filter(Address.email_address=='foo@bar.com')\n```", "```py\nstmt = select(User).\\\n join(User.addresses).\\\n filter(Address.email_address=='foo@bar.com')\n```", "```py\nfunction sqlalchemy.orm.outerjoin(left: _FromClauseArgument, right: _FromClauseArgument, onclause: _OnClauseArgument | None = None, full: bool = False) \u2192 _ORMJoin\n```", "```py\nfunction sqlalchemy.orm.with_parent(instance: object, prop: attributes.QueryableAttribute[Any], from_entity: _EntityType[Any] | None = None) \u2192 ColumnElement[bool]\n```", "```py\nstmt = select(Address).where(with_parent(some_user, User.addresses))\n```", "```py\na1 = aliased(Address)\na2 = aliased(Address)\nstmt = select(a1, a2).where(\n with_parent(u1, User.addresses.of_type(a2))\n)\n```", "```py\na1 = aliased(Address)\na2 = aliased(Address)\nstmt = select(a1, a2).where(\n with_parent(u1, User.addresses, from_entity=a2)\n)\n```", "```py\n>>> stmt = select(User).execution_options(populate_existing=True)\n>>> result = session.execute(stmt)\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account\n... \n```", "```py\nstmt = (\n    select(User)\n    .where(User.name.in_(names))\n    .execution_options(populate_existing=True)\n    .options(selectinload(User.addresses))\n)\n# will refresh all matching User objects as well as the related\n# Address objects\nusers = session.execute(stmt).scalars().all()\n```", "```py\n>>> stmt = select(User).execution_options(autoflush=False)\n>>> session.execute(stmt)\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account\n... \n```", "```py\n>>> stmt = select(User).execution_options(yield_per=10)\n>>> for user_obj in session.scalars(stmt):\n...     print(user_obj)\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account\n[...]  ()\nUser(id=1, name='spongebob', fullname='Spongebob Squarepants')\nUser(id=2, name='sandy', fullname='Sandy Cheeks')\n...\n>>> # ... rows continue ...\n```", "```py\n# equivalent code\n>>> stmt = select(User).execution_options(stream_results=True, max_row_buffer=10)\n>>> for user_obj in session.scalars(stmt).yield_per(10):\n...     print(user_obj)\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account\n[...]  ()\nUser(id=1, name='spongebob', fullname='Spongebob Squarepants')\nUser(id=2, name='sandy', fullname='Sandy Cheeks')\n...\n>>> # ... rows continue ...\n```", "```py\n>>> stmt = select(User).execution_options(yield_per=10)\n>>> for partition in session.scalars(stmt).partitions():\n...     for user_obj in partition:\n...         print(user_obj)\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account\n[...]  ()\nUser(id=1, name='spongebob', fullname='Spongebob Squarepants')\nUser(id=2, name='sandy', fullname='Sandy Cheeks')\n...\n>>> # ... rows continue ...\n```", "```py\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\n\nclass Base(DeclarativeBase):\n    pass\n\nclass MyTable(Base):\n    __tablename__ = \"my_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n```", "```py\nengine = create_engine(\n    \"postgresql+psycopg://scott:tiger@localhost/test\",\n)\n\nwith Session(\n    engine.execution_options(schema_translate_map={None: \"test_schema\"})\n) as sess:\n    sess.add(MyTable(name=\"this is schema one\"))\n    sess.commit()\n\nwith Session(\n    engine.execution_options(schema_translate_map={None: \"test_schema_2\"})\n) as sess:\n    sess.add(MyTable(name=\"this is schema two\"))\n    sess.commit()\n```", "```py\nwith Session(engine) as sess:\n    obj1 = sess.scalar(\n        select(MyTable)\n        .where(MyTable.id == 1)\n        .execution_options(\n            schema_translate_map={None: \"test_schema\"},\n            identity_token=\"test_schema\",\n        )\n    )\n    obj2 = sess.scalar(\n        select(MyTable)\n        .where(MyTable.id == 1)\n        .execution_options(\n            schema_translate_map={None: \"test_schema_2\"},\n            identity_token=\"test_schema_2\",\n        )\n    )\n```", "```py\n>>> from sqlalchemy import inspect\n>>> inspect(obj1).key\n(<class '__main__.MyTable'>, (1,), 'test_schema')\n>>> inspect(obj2).key\n(<class '__main__.MyTable'>, (1,), 'test_schema_2')\n```", "```py\n>>> from pprint import pprint\n>>> user_alias = aliased(User, name=\"user2\")\n>>> stmt = select(User, User.id, user_alias)\n>>> pprint(stmt.column_descriptions)\n[{'aliased': False,\n 'entity': <class 'User'>,\n 'expr': <class 'User'>,\n 'name': 'User',\n 'type': <class 'User'>},\n {'aliased': False,\n 'entity': <class 'User'>,\n 'expr': <....InstrumentedAttribute object at ...>,\n 'name': 'id',\n 'type': Integer()},\n {'aliased': True,\n 'entity': <AliasedClass ...; User>,\n 'expr': <AliasedClass ...; User>,\n 'name': 'user2',\n 'type': <class 'User'>}]\n```", "```py\n>>> stmt = select(user_table, address_table.c.id)\n>>> pprint(stmt.column_descriptions)\n[{'expr': Column('id', Integer(), table=<user_account>, primary_key=True, nullable=False),\n 'name': 'id',\n 'type': Integer()},\n {'expr': Column('name', String(), table=<user_account>, nullable=False),\n 'name': 'name',\n 'type': String()},\n {'expr': Column('fullname', String(), table=<user_account>),\n 'name': 'fullname',\n 'type': String()},\n {'expr': Column('id', Integer(), table=<address>, primary_key=True, nullable=False),\n 'name': 'id_1',\n 'type': Integer()}]\n```", "```py\n>>> from sqlalchemy import update\n>>> stmt = update(User).values(name=\"somename\").returning(User.id)\n>>> pprint(stmt.entity_description)\n{'entity': <class 'User'>,\n 'expr': <class 'User'>,\n 'name': 'User',\n 'table': Table('user_account', ...),\n 'type': <class 'User'>}\n```", "```py\n>>> pprint(stmt.returning_column_descriptions)\n[{'aliased': False,\n 'entity': <class 'User'>,\n 'expr': <sqlalchemy.orm.attributes.InstrumentedAttribute ...>,\n 'name': 'id',\n 'type': Integer()}]\n```", "```py\nfunction sqlalchemy.orm.aliased(element: _EntityType[_O] | FromClause, alias: FromClause | None = None, name: str | None = None, flat: bool = False, adapt_on_names: bool = False) \u2192 AliasedClass[_O] | FromClause | AliasedType[_O]\n```", "```py\nmy_alias = aliased(MyClass)\n\nstmt = select(MyClass, my_alias).filter(MyClass.id > my_alias.id)\nresult = session.execute(stmt)\n```", "```py\n    class UnitPrice(Base):\n     __tablename__ = 'unit_price'\n     ...\n     unit_id = Column(Integer)\n     price = Column(Numeric)\n\n    aggregated_unit_price = Session.query(\n     func.sum(UnitPrice.price).label('price')\n     ).group_by(UnitPrice.unit_id).subquery()\n\n    aggregated_unit_price = aliased(UnitPrice,\n     alias=aggregated_unit_price, adapt_on_names=True)\n    ```", "```py\nclass sqlalchemy.orm.util.AliasedClass\n```", "```py\n# find all pairs of users with the same name\nuser_alias = aliased(User)\nsession.query(User, user_alias).\\\n join((user_alias, User.id > user_alias.id)).\\\n filter(User.name == user_alias.name)\n```", "```py\nfrom sqlalchemy import inspect\nmy_alias = aliased(MyClass)\ninsp = inspect(my_alias)\n```", "```py\nclass sqlalchemy.orm.util.AliasedInsp\n```", "```py\nfrom sqlalchemy import inspect\nfrom sqlalchemy.orm import aliased\n\nmy_alias = aliased(MyMappedClass)\ninsp = inspect(my_alias)\n```", "```py\nclass sqlalchemy.orm.Bundle\n```", "```py\nmethod __init__(name: str, *exprs: _ColumnExpressionArgument[Any], **kw: Any)\n```", "```py\nbn = Bundle(\"mybundle\", MyClass.x, MyClass.y)\n\nfor row in session.query(bn).filter(\n bn.c.x == 5).filter(bn.c.y == 4):\n print(row.mybundle.x, row.mybundle.y)\n```", "```py\nattribute c: ReadOnlyColumnCollection[str, KeyedColumnElement[Any]]\n```", "```py\nattribute columns: ReadOnlyColumnCollection[str, KeyedColumnElement[Any]]\n```", "```py\n> bn = Bundle(\"mybundle\", MyClass.x, MyClass.y)\n> \n> q = sess.query(bn).filter(bn.c.x == 5)\n> ```", "```py\n> b1 = Bundle(\"b1\",\n>  Bundle('b2', MyClass.a, MyClass.b),\n>  Bundle('b3', MyClass.x, MyClass.y)\n>  )\n> \n> q = sess.query(b1).filter(\n>  b1.c.b2.c.a == 5).filter(b1.c.b3.c.y == 9)\n> ```", "```py\nmethod create_row_processor(query: Select[Any], procs: Sequence[Callable[[Row[Any]], Any]], labels: Sequence[str]) \u2192 Callable[[Row[Any]], Any]\n```", "```py\nfrom sqlalchemy.orm import Bundle\n\nclass DictBundle(Bundle):\n def create_row_processor(self, query, procs, labels):\n 'Override create_row_processor to return values as\n dictionaries'\n\n def proc(row):\n return dict(\n zip(labels, (proc(row) for proc in procs))\n )\n return proc\n```", "```py\nbn = DictBundle('mybundle', MyClass.data1, MyClass.data2)\nfor row in session.execute(select(bn)).where(bn.c.data1 == 'd1'):\n print(row.mybundle['data1'], row.mybundle['data2'])\n```", "```py\nattribute is_aliased_class = False\n```", "```py\nattribute is_bundle = True\n```", "```py\nattribute is_clause_element = False\n```", "```py\nattribute is_mapper = False\n```", "```py\nmethod label(name)\n```", "```py\nattribute single_entity = False\n```", "```py\nfunction sqlalchemy.orm.with_loader_criteria(entity_or_base: _EntityType[Any], where_criteria: _ColumnExpressionArgument[bool] | Callable[[Any], _ColumnExpressionArgument[bool]], loader_only: bool = False, include_aliases: bool = False, propagate_to_loaders: bool = True, track_closure_variables: bool = True) \u2192 LoaderCriteriaOption\n```", "```py\nfrom sqlalchemy.orm import with_loader_criteria\n\nstmt = select(User).options(\n selectinload(User.addresses),\n with_loader_criteria(Address, Address.email_address != 'foo'))\n)\n```", "```py\nq = session.query(User).outerjoin(User.addresses).options(\n with_loader_criteria(Address, Address.email_address != 'foo'))\n)\n```", "```py\nsession = Session(bind=engine)\n\n@event.listens_for(\"do_orm_execute\", session)\ndef _add_filtering_criteria(execute_state):\n\n if (\n execute_state.is_select\n and not execute_state.is_column_load\n and not execute_state.is_relationship_load\n ):\n execute_state.statement = execute_state.statement.options(\n with_loader_criteria(\n SecurityRole,\n lambda cls: cls.role.in_(['some_role']),\n include_aliases=True\n )\n )\n```", "```py\nstmt = select(A).join(A.bs).options(\n contains_eager(A.bs),\n with_loader_criteria(B, B.flag == 1)\n)\n```", "```py\nSELECT\n b.id, b.a_id, b.data, b.flag,\n a.id AS id_1,\n a.data AS data_1\nFROM a JOIN b ON a.id = b.a_id AND b.flag = :flag_1\n```", "```py\nfunction sqlalchemy.orm.join(left: _FromClauseArgument, right: _FromClauseArgument, onclause: _OnClauseArgument | None = None, isouter: bool = False, full: bool = False) \u2192 _ORMJoin\n```", "```py\nfrom sqlalchemy.orm import join\nstmt = select(User).\\\n select_from(join(User, Address, User.addresses)).\\\n filter(Address.email_address=='foo@bar.com')\n```", "```py\nstmt = select(User).\\\n join(User.addresses).\\\n filter(Address.email_address=='foo@bar.com')\n```", "```py\nfunction sqlalchemy.orm.outerjoin(left: _FromClauseArgument, right: _FromClauseArgument, onclause: _OnClauseArgument | None = None, full: bool = False) \u2192 _ORMJoin\n```", "```py\nfunction sqlalchemy.orm.with_parent(instance: object, prop: attributes.QueryableAttribute[Any], from_entity: _EntityType[Any] | None = None) \u2192 ColumnElement[bool]\n```", "```py\nstmt = select(Address).where(with_parent(some_user, User.addresses))\n```", "```py\na1 = aliased(Address)\na2 = aliased(Address)\nstmt = select(a1, a2).where(\n with_parent(u1, User.addresses.of_type(a2))\n)\n```", "```py\na1 = aliased(Address)\na2 = aliased(Address)\nstmt = select(a1, a2).where(\n with_parent(u1, User.addresses, from_entity=a2)\n)\n```", "```py\n>>> stmt = select(User).execution_options(populate_existing=True)\n>>> result = session.execute(stmt)\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account\n... \n```", "```py\nstmt = (\n    select(User)\n    .where(User.name.in_(names))\n    .execution_options(populate_existing=True)\n    .options(selectinload(User.addresses))\n)\n# will refresh all matching User objects as well as the related\n# Address objects\nusers = session.execute(stmt).scalars().all()\n```", "```py\n>>> stmt = select(User).execution_options(autoflush=False)\n>>> session.execute(stmt)\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account\n... \n```", "```py\n>>> stmt = select(User).execution_options(yield_per=10)\n>>> for user_obj in session.scalars(stmt):\n...     print(user_obj)\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account\n[...]  ()\nUser(id=1, name='spongebob', fullname='Spongebob Squarepants')\nUser(id=2, name='sandy', fullname='Sandy Cheeks')\n...\n>>> # ... rows continue ...\n```", "```py\n# equivalent code\n>>> stmt = select(User).execution_options(stream_results=True, max_row_buffer=10)\n>>> for user_obj in session.scalars(stmt).yield_per(10):\n...     print(user_obj)\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account\n[...]  ()\nUser(id=1, name='spongebob', fullname='Spongebob Squarepants')\nUser(id=2, name='sandy', fullname='Sandy Cheeks')\n...\n>>> # ... rows continue ...\n```", "```py\n>>> stmt = select(User).execution_options(yield_per=10)\n>>> for partition in session.scalars(stmt).partitions():\n...     for user_obj in partition:\n...         print(user_obj)\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account\n[...]  ()\nUser(id=1, name='spongebob', fullname='Spongebob Squarepants')\nUser(id=2, name='sandy', fullname='Sandy Cheeks')\n...\n>>> # ... rows continue ...\n```", "```py\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\n\nclass Base(DeclarativeBase):\n    pass\n\nclass MyTable(Base):\n    __tablename__ = \"my_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n```", "```py\nengine = create_engine(\n    \"postgresql+psycopg://scott:tiger@localhost/test\",\n)\n\nwith Session(\n    engine.execution_options(schema_translate_map={None: \"test_schema\"})\n) as sess:\n    sess.add(MyTable(name=\"this is schema one\"))\n    sess.commit()\n\nwith Session(\n    engine.execution_options(schema_translate_map={None: \"test_schema_2\"})\n) as sess:\n    sess.add(MyTable(name=\"this is schema two\"))\n    sess.commit()\n```", "```py\nwith Session(engine) as sess:\n    obj1 = sess.scalar(\n        select(MyTable)\n        .where(MyTable.id == 1)\n        .execution_options(\n            schema_translate_map={None: \"test_schema\"},\n            identity_token=\"test_schema\",\n        )\n    )\n    obj2 = sess.scalar(\n        select(MyTable)\n        .where(MyTable.id == 1)\n        .execution_options(\n            schema_translate_map={None: \"test_schema_2\"},\n            identity_token=\"test_schema_2\",\n        )\n    )\n```", "```py\n>>> from sqlalchemy import inspect\n>>> inspect(obj1).key\n(<class '__main__.MyTable'>, (1,), 'test_schema')\n>>> inspect(obj2).key\n(<class '__main__.MyTable'>, (1,), 'test_schema_2')\n```", "```py\n>>> from pprint import pprint\n>>> user_alias = aliased(User, name=\"user2\")\n>>> stmt = select(User, User.id, user_alias)\n>>> pprint(stmt.column_descriptions)\n[{'aliased': False,\n 'entity': <class 'User'>,\n 'expr': <class 'User'>,\n 'name': 'User',\n 'type': <class 'User'>},\n {'aliased': False,\n 'entity': <class 'User'>,\n 'expr': <....InstrumentedAttribute object at ...>,\n 'name': 'id',\n 'type': Integer()},\n {'aliased': True,\n 'entity': <AliasedClass ...; User>,\n 'expr': <AliasedClass ...; User>,\n 'name': 'user2',\n 'type': <class 'User'>}]\n```", "```py\n>>> stmt = select(user_table, address_table.c.id)\n>>> pprint(stmt.column_descriptions)\n[{'expr': Column('id', Integer(), table=<user_account>, primary_key=True, nullable=False),\n 'name': 'id',\n 'type': Integer()},\n {'expr': Column('name', String(), table=<user_account>, nullable=False),\n 'name': 'name',\n 'type': String()},\n {'expr': Column('fullname', String(), table=<user_account>),\n 'name': 'fullname',\n 'type': String()},\n {'expr': Column('id', Integer(), table=<address>, primary_key=True, nullable=False),\n 'name': 'id_1',\n 'type': Integer()}]\n```", "```py\n>>> from sqlalchemy import update\n>>> stmt = update(User).values(name=\"somename\").returning(User.id)\n>>> pprint(stmt.entity_description)\n{'entity': <class 'User'>,\n 'expr': <class 'User'>,\n 'name': 'User',\n 'table': Table('user_account', ...),\n 'type': <class 'User'>}\n```", "```py\n>>> pprint(stmt.returning_column_descriptions)\n[{'aliased': False,\n 'entity': <class 'User'>,\n 'expr': <sqlalchemy.orm.attributes.InstrumentedAttribute ...>,\n 'name': 'id',\n 'type': Integer()}]\n```", "```py\nfunction sqlalchemy.orm.aliased(element: _EntityType[_O] | FromClause, alias: FromClause | None = None, name: str | None = None, flat: bool = False, adapt_on_names: bool = False) \u2192 AliasedClass[_O] | FromClause | AliasedType[_O]\n```", "```py\nmy_alias = aliased(MyClass)\n\nstmt = select(MyClass, my_alias).filter(MyClass.id > my_alias.id)\nresult = session.execute(stmt)\n```", "```py\n    class UnitPrice(Base):\n     __tablename__ = 'unit_price'\n     ...\n     unit_id = Column(Integer)\n     price = Column(Numeric)\n\n    aggregated_unit_price = Session.query(\n     func.sum(UnitPrice.price).label('price')\n     ).group_by(UnitPrice.unit_id).subquery()\n\n    aggregated_unit_price = aliased(UnitPrice,\n     alias=aggregated_unit_price, adapt_on_names=True)\n    ```", "```py\nclass sqlalchemy.orm.util.AliasedClass\n```", "```py\n# find all pairs of users with the same name\nuser_alias = aliased(User)\nsession.query(User, user_alias).\\\n join((user_alias, User.id > user_alias.id)).\\\n filter(User.name == user_alias.name)\n```", "```py\nfrom sqlalchemy import inspect\nmy_alias = aliased(MyClass)\ninsp = inspect(my_alias)\n```", "```py\nclass sqlalchemy.orm.util.AliasedInsp\n```", "```py\nfrom sqlalchemy import inspect\nfrom sqlalchemy.orm import aliased\n\nmy_alias = aliased(MyMappedClass)\ninsp = inspect(my_alias)\n```", "```py\nclass sqlalchemy.orm.Bundle\n```", "```py\nmethod __init__(name: str, *exprs: _ColumnExpressionArgument[Any], **kw: Any)\n```", "```py\nbn = Bundle(\"mybundle\", MyClass.x, MyClass.y)\n\nfor row in session.query(bn).filter(\n bn.c.x == 5).filter(bn.c.y == 4):\n print(row.mybundle.x, row.mybundle.y)\n```", "```py\nattribute c: ReadOnlyColumnCollection[str, KeyedColumnElement[Any]]\n```", "```py\nattribute columns: ReadOnlyColumnCollection[str, KeyedColumnElement[Any]]\n```", "```py\n> bn = Bundle(\"mybundle\", MyClass.x, MyClass.y)\n> \n> q = sess.query(bn).filter(bn.c.x == 5)\n> ```", "```py\n> b1 = Bundle(\"b1\",\n>  Bundle('b2', MyClass.a, MyClass.b),\n>  Bundle('b3', MyClass.x, MyClass.y)\n>  )\n> \n> q = sess.query(b1).filter(\n>  b1.c.b2.c.a == 5).filter(b1.c.b3.c.y == 9)\n> ```", "```py\nmethod create_row_processor(query: Select[Any], procs: Sequence[Callable[[Row[Any]], Any]], labels: Sequence[str]) \u2192 Callable[[Row[Any]], Any]\n```", "```py\nfrom sqlalchemy.orm import Bundle\n\nclass DictBundle(Bundle):\n def create_row_processor(self, query, procs, labels):\n 'Override create_row_processor to return values as\n dictionaries'\n\n def proc(row):\n return dict(\n zip(labels, (proc(row) for proc in procs))\n )\n return proc\n```", "```py\nbn = DictBundle('mybundle', MyClass.data1, MyClass.data2)\nfor row in session.execute(select(bn)).where(bn.c.data1 == 'd1'):\n print(row.mybundle['data1'], row.mybundle['data2'])\n```", "```py\nattribute is_aliased_class = False\n```", "```py\nattribute is_bundle = True\n```", "```py\nattribute is_clause_element = False\n```", "```py\nattribute is_mapper = False\n```", "```py\nmethod label(name)\n```", "```py\nattribute single_entity = False\n```", "```py\nfunction sqlalchemy.orm.with_loader_criteria(entity_or_base: _EntityType[Any], where_criteria: _ColumnExpressionArgument[bool] | Callable[[Any], _ColumnExpressionArgument[bool]], loader_only: bool = False, include_aliases: bool = False, propagate_to_loaders: bool = True, track_closure_variables: bool = True) \u2192 LoaderCriteriaOption\n```", "```py\nfrom sqlalchemy.orm import with_loader_criteria\n\nstmt = select(User).options(\n selectinload(User.addresses),\n with_loader_criteria(Address, Address.email_address != 'foo'))\n)\n```", "```py\nq = session.query(User).outerjoin(User.addresses).options(\n with_loader_criteria(Address, Address.email_address != 'foo'))\n)\n```", "```py\nsession = Session(bind=engine)\n\n@event.listens_for(\"do_orm_execute\", session)\ndef _add_filtering_criteria(execute_state):\n\n if (\n execute_state.is_select\n and not execute_state.is_column_load\n and not execute_state.is_relationship_load\n ):\n execute_state.statement = execute_state.statement.options(\n with_loader_criteria(\n SecurityRole,\n lambda cls: cls.role.in_(['some_role']),\n include_aliases=True\n )\n )\n```", "```py\nstmt = select(A).join(A.bs).options(\n contains_eager(A.bs),\n with_loader_criteria(B, B.flag == 1)\n)\n```", "```py\nSELECT\n b.id, b.a_id, b.data, b.flag,\n a.id AS id_1,\n a.data AS data_1\nFROM a JOIN b ON a.id = b.a_id AND b.flag = :flag_1\n```", "```py\nfunction sqlalchemy.orm.join(left: _FromClauseArgument, right: _FromClauseArgument, onclause: _OnClauseArgument | None = None, isouter: bool = False, full: bool = False) \u2192 _ORMJoin\n```", "```py\nfrom sqlalchemy.orm import join\nstmt = select(User).\\\n select_from(join(User, Address, User.addresses)).\\\n filter(Address.email_address=='foo@bar.com')\n```", "```py\nstmt = select(User).\\\n join(User.addresses).\\\n filter(Address.email_address=='foo@bar.com')\n```", "```py\nfunction sqlalchemy.orm.outerjoin(left: _FromClauseArgument, right: _FromClauseArgument, onclause: _OnClauseArgument | None = None, full: bool = False) \u2192 _ORMJoin\n```", "```py\nfunction sqlalchemy.orm.with_parent(instance: object, prop: attributes.QueryableAttribute[Any], from_entity: _EntityType[Any] | None = None) \u2192 ColumnElement[bool]\n```", "```py\nstmt = select(Address).where(with_parent(some_user, User.addresses))\n```", "```py\na1 = aliased(Address)\na2 = aliased(Address)\nstmt = select(a1, a2).where(\n with_parent(u1, User.addresses.of_type(a2))\n)\n```", "```py\na1 = aliased(Address)\na2 = aliased(Address)\nstmt = select(a1, a2).where(\n with_parent(u1, User.addresses, from_entity=a2)\n)\n```", "```py\n>>> from pprint import pprint\n>>> user_alias = aliased(User, name=\"user2\")\n>>> stmt = select(User, User.id, user_alias)\n>>> pprint(stmt.column_descriptions)\n[{'aliased': False,\n 'entity': <class 'User'>,\n 'expr': <class 'User'>,\n 'name': 'User',\n 'type': <class 'User'>},\n {'aliased': False,\n 'entity': <class 'User'>,\n 'expr': <....InstrumentedAttribute object at ...>,\n 'name': 'id',\n 'type': Integer()},\n {'aliased': True,\n 'entity': <AliasedClass ...; User>,\n 'expr': <AliasedClass ...; User>,\n 'name': 'user2',\n 'type': <class 'User'>}]\n```", "```py\n>>> stmt = select(user_table, address_table.c.id)\n>>> pprint(stmt.column_descriptions)\n[{'expr': Column('id', Integer(), table=<user_account>, primary_key=True, nullable=False),\n 'name': 'id',\n 'type': Integer()},\n {'expr': Column('name', String(), table=<user_account>, nullable=False),\n 'name': 'name',\n 'type': String()},\n {'expr': Column('fullname', String(), table=<user_account>),\n 'name': 'fullname',\n 'type': String()},\n {'expr': Column('id', Integer(), table=<address>, primary_key=True, nullable=False),\n 'name': 'id_1',\n 'type': Integer()}]\n```", "```py\n>>> from sqlalchemy import update\n>>> stmt = update(User).values(name=\"somename\").returning(User.id)\n>>> pprint(stmt.entity_description)\n{'entity': <class 'User'>,\n 'expr': <class 'User'>,\n 'name': 'User',\n 'table': Table('user_account', ...),\n 'type': <class 'User'>}\n```", "```py\n>>> pprint(stmt.returning_column_descriptions)\n[{'aliased': False,\n 'entity': <class 'User'>,\n 'expr': <sqlalchemy.orm.attributes.InstrumentedAttribute ...>,\n 'name': 'id',\n 'type': Integer()}]\n```", "```py\nfunction sqlalchemy.orm.aliased(element: _EntityType[_O] | FromClause, alias: FromClause | None = None, name: str | None = None, flat: bool = False, adapt_on_names: bool = False) \u2192 AliasedClass[_O] | FromClause | AliasedType[_O]\n```", "```py\nmy_alias = aliased(MyClass)\n\nstmt = select(MyClass, my_alias).filter(MyClass.id > my_alias.id)\nresult = session.execute(stmt)\n```", "```py\n    class UnitPrice(Base):\n     __tablename__ = 'unit_price'\n     ...\n     unit_id = Column(Integer)\n     price = Column(Numeric)\n\n    aggregated_unit_price = Session.query(\n     func.sum(UnitPrice.price).label('price')\n     ).group_by(UnitPrice.unit_id).subquery()\n\n    aggregated_unit_price = aliased(UnitPrice,\n     alias=aggregated_unit_price, adapt_on_names=True)\n    ```", "```py\nclass sqlalchemy.orm.util.AliasedClass\n```", "```py\n# find all pairs of users with the same name\nuser_alias = aliased(User)\nsession.query(User, user_alias).\\\n join((user_alias, User.id > user_alias.id)).\\\n filter(User.name == user_alias.name)\n```", "```py\nfrom sqlalchemy import inspect\nmy_alias = aliased(MyClass)\ninsp = inspect(my_alias)\n```", "```py\nclass sqlalchemy.orm.util.AliasedInsp\n```", "```py\nfrom sqlalchemy import inspect\nfrom sqlalchemy.orm import aliased\n\nmy_alias = aliased(MyMappedClass)\ninsp = inspect(my_alias)\n```", "```py\nclass sqlalchemy.orm.Bundle\n```", "```py\nmethod __init__(name: str, *exprs: _ColumnExpressionArgument[Any], **kw: Any)\n```", "```py\nbn = Bundle(\"mybundle\", MyClass.x, MyClass.y)\n\nfor row in session.query(bn).filter(\n bn.c.x == 5).filter(bn.c.y == 4):\n print(row.mybundle.x, row.mybundle.y)\n```", "```py\nattribute c: ReadOnlyColumnCollection[str, KeyedColumnElement[Any]]\n```", "```py\nattribute columns: ReadOnlyColumnCollection[str, KeyedColumnElement[Any]]\n```", "```py\n> bn = Bundle(\"mybundle\", MyClass.x, MyClass.y)\n> \n> q = sess.query(bn).filter(bn.c.x == 5)\n> ```", "```py\n> b1 = Bundle(\"b1\",\n>  Bundle('b2', MyClass.a, MyClass.b),\n>  Bundle('b3', MyClass.x, MyClass.y)\n>  )\n> \n> q = sess.query(b1).filter(\n>  b1.c.b2.c.a == 5).filter(b1.c.b3.c.y == 9)\n> ```", "```py\nmethod create_row_processor(query: Select[Any], procs: Sequence[Callable[[Row[Any]], Any]], labels: Sequence[str]) \u2192 Callable[[Row[Any]], Any]\n```", "```py\nfrom sqlalchemy.orm import Bundle\n\nclass DictBundle(Bundle):\n def create_row_processor(self, query, procs, labels):\n 'Override create_row_processor to return values as\n dictionaries'\n\n def proc(row):\n return dict(\n zip(labels, (proc(row) for proc in procs))\n )\n return proc\n```", "```py\nbn = DictBundle('mybundle', MyClass.data1, MyClass.data2)\nfor row in session.execute(select(bn)).where(bn.c.data1 == 'd1'):\n print(row.mybundle['data1'], row.mybundle['data2'])\n```", "```py\nattribute is_aliased_class = False\n```", "```py\nattribute is_bundle = True\n```", "```py\nattribute is_clause_element = False\n```", "```py\nattribute is_mapper = False\n```", "```py\nmethod label(name)\n```", "```py\nattribute single_entity = False\n```", "```py\nfunction sqlalchemy.orm.with_loader_criteria(entity_or_base: _EntityType[Any], where_criteria: _ColumnExpressionArgument[bool] | Callable[[Any], _ColumnExpressionArgument[bool]], loader_only: bool = False, include_aliases: bool = False, propagate_to_loaders: bool = True, track_closure_variables: bool = True) \u2192 LoaderCriteriaOption\n```", "```py\nfrom sqlalchemy.orm import with_loader_criteria\n\nstmt = select(User).options(\n selectinload(User.addresses),\n with_loader_criteria(Address, Address.email_address != 'foo'))\n)\n```", "```py\nq = session.query(User).outerjoin(User.addresses).options(\n with_loader_criteria(Address, Address.email_address != 'foo'))\n)\n```", "```py\nsession = Session(bind=engine)\n\n@event.listens_for(\"do_orm_execute\", session)\ndef _add_filtering_criteria(execute_state):\n\n if (\n execute_state.is_select\n and not execute_state.is_column_load\n and not execute_state.is_relationship_load\n ):\n execute_state.statement = execute_state.statement.options(\n with_loader_criteria(\n SecurityRole,\n lambda cls: cls.role.in_(['some_role']),\n include_aliases=True\n )\n )\n```", "```py\nstmt = select(A).join(A.bs).options(\n contains_eager(A.bs),\n with_loader_criteria(B, B.flag == 1)\n)\n```", "```py\nSELECT\n b.id, b.a_id, b.data, b.flag,\n a.id AS id_1,\n a.data AS data_1\nFROM a JOIN b ON a.id = b.a_id AND b.flag = :flag_1\n```", "```py\nfunction sqlalchemy.orm.join(left: _FromClauseArgument, right: _FromClauseArgument, onclause: _OnClauseArgument | None = None, isouter: bool = False, full: bool = False) \u2192 _ORMJoin\n```", "```py\nfrom sqlalchemy.orm import join\nstmt = select(User).\\\n select_from(join(User, Address, User.addresses)).\\\n filter(Address.email_address=='foo@bar.com')\n```", "```py\nstmt = select(User).\\\n join(User.addresses).\\\n filter(Address.email_address=='foo@bar.com')\n```", "```py\nfunction sqlalchemy.orm.outerjoin(left: _FromClauseArgument, right: _FromClauseArgument, onclause: _OnClauseArgument | None = None, full: bool = False) \u2192 _ORMJoin\n```", "```py\nfunction sqlalchemy.orm.with_parent(instance: object, prop: attributes.QueryableAttribute[Any], from_entity: _EntityType[Any] | None = None) \u2192 ColumnElement[bool]\n```", "```py\nstmt = select(Address).where(with_parent(some_user, User.addresses))\n```", "```py\na1 = aliased(Address)\na2 = aliased(Address)\nstmt = select(a1, a2).where(\n with_parent(u1, User.addresses.of_type(a2))\n)\n```", "```py\na1 = aliased(Address)\na2 = aliased(Address)\nstmt = select(a1, a2).where(\n with_parent(u1, User.addresses, from_entity=a2)\n)\n```"]