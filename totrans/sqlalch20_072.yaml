- en: Hybrid Attributes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 混合属性
- en: 原文：[https://docs.sqlalchemy.org/en/20/orm/extensions/hybrid.html](https://docs.sqlalchemy.org/en/20/orm/extensions/hybrid.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/orm/extensions/hybrid.html](https://docs.sqlalchemy.org/en/20/orm/extensions/hybrid.html)
- en: Define attributes on ORM-mapped classes that have “hybrid” behavior.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 定义在 ORM 映射类上具有“混合”行为的属性。
- en: “hybrid” means the attribute has distinct behaviors defined at the class level
    and at the instance level.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: “混合”意味着属性在类级别和实例级别具有不同的行为。
- en: The [`hybrid`](#module-sqlalchemy.ext.hybrid "sqlalchemy.ext.hybrid") extension
    provides a special form of method decorator and has minimal dependencies on the
    rest of SQLAlchemy. Its basic theory of operation can work with any descriptor-based
    expression system.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[`hybrid`](#module-sqlalchemy.ext.hybrid "sqlalchemy.ext.hybrid") 扩展提供了一种特殊形式的方法装饰器，并且对
    SQLAlchemy 的其余部分具有最小的依赖性。 它的基本操作理论可以与任何基于描述符的表达式系统一起使用。'
- en: 'Consider a mapping `Interval`, representing integer `start` and `end` values.
    We can define higher level functions on mapped classes that produce SQL expressions
    at the class level, and Python expression evaluation at the instance level. Below,
    each function decorated with [`hybrid_method`](#sqlalchemy.ext.hybrid.hybrid_method
    "sqlalchemy.ext.hybrid.hybrid_method") or [`hybrid_property`](#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property") may receive `self` as an instance of
    the class, or may receive the class directly, depending on context:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个映射 `Interval`，表示整数 `start` 和 `end` 值。 我们可以在映射类上定义更高级别的函数，这些函数在类级别生成 SQL
    表达式，并在实例级别进行 Python 表达式评估。 下面，每个使用 [`hybrid_method`](#sqlalchemy.ext.hybrid.hybrid_method
    "sqlalchemy.ext.hybrid.hybrid_method") 或 [`hybrid_property`](#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property") 装饰的函数可能会接收 `self` 作为类的实例，或者直接接收类，具体取决于上下文：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Above, the `length` property returns the difference between the `end` and `start`
    attributes. With an instance of `Interval`, this subtraction occurs in Python,
    using normal Python descriptor mechanics:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 上面，`length` 属性返回 `end` 和 `start` 属性之间的差异。 对于 `Interval` 的实例，这个减法在 Python 中发生，使用正常的
    Python 描述符机制：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'When dealing with the `Interval` class itself, the [`hybrid_property`](#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property") descriptor evaluates the function body
    given the `Interval` class as the argument, which when evaluated with SQLAlchemy
    expression mechanics returns a new SQL expression:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 处理 `Interval` 类本身时，[`hybrid_property`](#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property") 描述符将函数体评估为给定 `Interval` 类作为参数，当使用 SQLAlchemy
    表达式机制评估时，将返回新的 SQL 表达式：
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Filtering methods such as [`Select.filter_by()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.filter_by
    "sqlalchemy.sql.expression.Select.filter_by") are supported with hybrid attributes
    as well:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 过滤方法如 [`Select.filter_by()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.filter_by
    "sqlalchemy.sql.expression.Select.filter_by") 也支持混合属性：
- en: '[PRE3]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The `Interval` class example also illustrates two methods, `contains()` and
    `intersects()`, decorated with [`hybrid_method`](#sqlalchemy.ext.hybrid.hybrid_method
    "sqlalchemy.ext.hybrid.hybrid_method"). This decorator applies the same idea to
    methods that [`hybrid_property`](#sqlalchemy.ext.hybrid.hybrid_property "sqlalchemy.ext.hybrid.hybrid_property")
    applies to attributes. The methods return boolean values, and take advantage of
    the Python `|` and `&` bitwise operators to produce equivalent instance-level
    and SQL expression-level boolean behavior:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`Interval` 类示例还说明了两种方法，`contains()` 和 `intersects()`，使用 [`hybrid_method`](#sqlalchemy.ext.hybrid.hybrid_method
    "sqlalchemy.ext.hybrid.hybrid_method") 装饰。 这个装饰器将相同的思想应用于方法，就像 [`hybrid_property`](#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property") 将其应用于属性一样。 这些方法返回布尔值，并利用 Python 的 `|`
    和 `&` 位运算符产生等效的实例级和 SQL 表达式级布尔行为：'
- en: '[PRE4]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '## Defining Expression Behavior Distinct from Attribute Behavior'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '## 定义与属性行为不同的表达行为'
- en: 'In the previous section, our usage of the `&` and `|` bitwise operators within
    the `Interval.contains` and `Interval.intersects` methods was fortunate, considering
    our functions operated on two boolean values to return a new one. In many cases,
    the construction of an in-Python function and a SQLAlchemy SQL expression have
    enough differences that two separate Python expressions should be defined. The
    [`hybrid`](#module-sqlalchemy.ext.hybrid "sqlalchemy.ext.hybrid") decorator defines
    a **modifier** [`hybrid_property.expression()`](#sqlalchemy.ext.hybrid.hybrid_property.expression
    "sqlalchemy.ext.hybrid.hybrid_property.expression") for this purpose. As an example
    we’ll define the radius of the interval, which requires the usage of the absolute
    value function:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一节中，我们在 `Interval.contains` 和 `Interval.intersects` 方法中使用 `&` 和 `|` 按位运算符是幸运的，考虑到我们的函数操作两个布尔值以返回一个新值。在许多情况下，Python
    函数的构建和 SQLAlchemy SQL 表达式有足够的差异，因此应该定义两个独立的 Python 表达式。[`hybrid`](#module-sqlalchemy.ext.hybrid
    "sqlalchemy.ext.hybrid") 装饰器为此目的定义了一个 **修饰符** [`hybrid_property.expression()`](#sqlalchemy.ext.hybrid.hybrid_property.expression
    "sqlalchemy.ext.hybrid.hybrid_property.expression")。作为示例，我们将定义区间的半径，这需要使用绝对值函数：
- en: '[PRE5]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the above example, the [`hybrid_property`](#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property") first assigned to the name `Interval.radius`
    is amended by a subsequent method called `Interval._radius_expression`, using
    the decorator `@radius.inplace.expression`, which chains together two modifiers
    [`hybrid_property.inplace`](#sqlalchemy.ext.hybrid.hybrid_property.inplace "sqlalchemy.ext.hybrid.hybrid_property.inplace")
    and [`hybrid_property.expression`](#sqlalchemy.ext.hybrid.hybrid_property.expression
    "sqlalchemy.ext.hybrid.hybrid_property.expression"). The use of [`hybrid_property.inplace`](#sqlalchemy.ext.hybrid.hybrid_property.inplace
    "sqlalchemy.ext.hybrid.hybrid_property.inplace") indicates that the [`hybrid_property.expression()`](#sqlalchemy.ext.hybrid.hybrid_property.expression
    "sqlalchemy.ext.hybrid.hybrid_property.expression") modifier should mutate the
    existing hybrid object at `Interval.radius` in place, without creating a new object.
    Notes on this modifier and its rationale are discussed in the next section [Using
    inplace to create pep-484 compliant hybrid properties](#hybrid-pep484-naming).
    The use of `@classmethod` is optional, and is strictly to give typing tools a
    hint that `cls` in this case is expected to be the `Interval` class, and not an
    instance of `Interval`.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述示例中，首先分配给名称 `Interval.radius` 的 [`hybrid_property`](#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property") 在后续使用 `Interval._radius_expression` 方法进行修改，使用装饰器
    `@radius.inplace.expression`，将两个修饰符 [`hybrid_property.inplace`](#sqlalchemy.ext.hybrid.hybrid_property.inplace
    "sqlalchemy.ext.hybrid.hybrid_property.inplace") 和 [`hybrid_property.expression`](#sqlalchemy.ext.hybrid.hybrid_property.expression
    "sqlalchemy.ext.hybrid.hybrid_property.expression") 连接在一起。使用 [`hybrid_property.inplace`](#sqlalchemy.ext.hybrid.hybrid_property.inplace
    "sqlalchemy.ext.hybrid.hybrid_property.inplace") 指示 [`hybrid_property.expression()`](#sqlalchemy.ext.hybrid.hybrid_property.expression
    "sqlalchemy.ext.hybrid.hybrid_property.expression") 修饰符应在原地突变现有的混合对象 `Interval.radius`，而不是创建一个新对象。有关此修饰符及其基本原理的注释将在下一节
    [使用 inplace 创建符合 pep-484 的混合属性](#hybrid-pep484-naming) 中讨论。使用 `@classmethod` 是可选的，严格来说是为了给类型提示工具一个提示，即这种情况下
    `cls` 应该是 `Interval` 类，而不是 `Interval` 的实例。
- en: Note
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '[`hybrid_property.inplace`](#sqlalchemy.ext.hybrid.hybrid_property.inplace
    "sqlalchemy.ext.hybrid.hybrid_property.inplace") as well as the use of `@classmethod`
    for proper typing support are available as of SQLAlchemy 2.0.4, and will not work
    in earlier versions.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[`hybrid_property.inplace`](#sqlalchemy.ext.hybrid.hybrid_property.inplace
    "sqlalchemy.ext.hybrid.hybrid_property.inplace") 以及使用 `@classmethod` 进行正确类型支持的功能在
    SQLAlchemy 2.0.4 中可用，之前的版本不支持。'
- en: 'With `Interval.radius` now including an expression element, the SQL function
    `ABS()` is returned when accessing `Interval.radius` at the class level:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`Interval.radius` 现在包含一个表达式元素，当在类级别访问 `Interval.radius` 时，会返回 SQL 函数 `ABS()`：'
- en: '[PRE6]  ## Using `inplace` to create pep-484 compliant hybrid properties'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE6]  ## 使用 `inplace` 创建符合 pep-484 的混合属性'
- en: In the previous section, a [`hybrid_property`](#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property") decorator is illustrated which includes
    two separate method-level functions being decorated, both to produce a single
    object attribute referenced as `Interval.radius`. There are actually several different
    modifiers we can use for [`hybrid_property`](#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property") including [`hybrid_property.expression()`](#sqlalchemy.ext.hybrid.hybrid_property.expression
    "sqlalchemy.ext.hybrid.hybrid_property.expression"), [`hybrid_property.setter()`](#sqlalchemy.ext.hybrid.hybrid_property.setter
    "sqlalchemy.ext.hybrid.hybrid_property.setter") and [`hybrid_property.update_expression()`](#sqlalchemy.ext.hybrid.hybrid_property.update_expression
    "sqlalchemy.ext.hybrid.hybrid_property.update_expression").
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一节中，说明了一个[`hybrid_property`](#sqlalchemy.ext.hybrid.hybrid_property "sqlalchemy.ext.hybrid.hybrid_property")装饰器，其中包含两个独立的方法级函数被装饰，都用于生成一个称为`Interval.radius`的单个对象属性。实际上，我们可以使用几种不同的修饰符来修饰[`hybrid_property`](#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property")，包括[`hybrid_property.expression()`](#sqlalchemy.ext.hybrid.hybrid_property.expression
    "sqlalchemy.ext.hybrid.hybrid_property.expression")、[`hybrid_property.setter()`](#sqlalchemy.ext.hybrid.hybrid_property.setter
    "sqlalchemy.ext.hybrid.hybrid_property.setter")和[`hybrid_property.update_expression()`](#sqlalchemy.ext.hybrid.hybrid_property.update_expression
    "sqlalchemy.ext.hybrid.hybrid_property.update_expression")。
- en: 'SQLAlchemy’s [`hybrid_property`](#sqlalchemy.ext.hybrid.hybrid_property "sqlalchemy.ext.hybrid.hybrid_property")
    decorator intends that adding on these methods may be done in the identical manner
    as Python’s built-in `@property` decorator, where idiomatic use is to continue
    to redefine the attribute repeatedly, using the **same attribute name** each time,
    as in the example below that illustrates the use of [`hybrid_property.setter()`](#sqlalchemy.ext.hybrid.hybrid_property.setter
    "sqlalchemy.ext.hybrid.hybrid_property.setter") and [`hybrid_property.expression()`](#sqlalchemy.ext.hybrid.hybrid_property.expression
    "sqlalchemy.ext.hybrid.hybrid_property.expression") for the `Interval.radius`
    descriptor:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy的[`hybrid_property`](#sqlalchemy.ext.hybrid.hybrid_property "sqlalchemy.ext.hybrid.hybrid_property")装饰器意味着可以以与Python内置的`@property`装饰器相同的方式添加这些方法，其中惯用的用法是继续重定义属性，每次都使用**相同的属性名称**，就像下面的示例中演示的那样，说明了使用[`hybrid_property.setter()`](#sqlalchemy.ext.hybrid.hybrid_property.setter
    "sqlalchemy.ext.hybrid.hybrid_property.setter")和[`hybrid_property.expression()`](#sqlalchemy.ext.hybrid.hybrid_property.expression
    "sqlalchemy.ext.hybrid.hybrid_property.expression")来描述`Interval.radius`的用法：
- en: '[PRE7]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Above, there are three `Interval.radius` methods, but as each are decorated,
    first by the [`hybrid_property`](#sqlalchemy.ext.hybrid.hybrid_property "sqlalchemy.ext.hybrid.hybrid_property")
    decorator and then by the `@radius` name itself, the end effect is that `Interval.radius`
    is a single attribute with three different functions contained within it. This
    style of use is taken from [Python’s documented use of @property](https://docs.python.org/3/library/functions.html#property).
    It is important to note that the way both `@property` as well as [`hybrid_property`](#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property") work, a **copy of the descriptor is made
    each time**. That is, each call to `@radius.expression`, `@radius.setter` etc.
    make a new object entirely. This allows the attribute to be re-defined in subclasses
    without issue (see [Reusing Hybrid Properties across Subclasses](#hybrid-reuse-subclass)
    later in this section for how this is used).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所述，有三个`Interval.radius`方法，但由于每个都被[`hybrid_property`](#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property")装饰器和`@radius`名称本身装饰，因此最终效果是`Interval.radius`是一个具有三个不同功能的单个属性。这种使用方式取自于[Python文档中对@property的使用](https://docs.python.org/3/library/functions.html#property)。值得注意的是，`@property`以及[`hybrid_property`](#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property")的工作方式，每次都会**复制描述符**。也就是说，每次调用`@radius.expression`、`@radius.setter`等都会完全创建一个新对象。这允许在子类中重新定义属性而无需问题（请参阅本节稍后的[在子类中重用混合属性](#hybrid-reuse-subclass)的使用方式）。
- en: However, the above approach is not compatible with typing tools such as mypy
    and pyright. Python’s own `@property` decorator does not have this limitation
    only because [these tools hardcode the behavior of @property](https://github.com/python/typing/discussions/1102),
    meaning this syntax is not available to SQLAlchemy under [**PEP 484**](https://peps.python.org/pep-0484/)
    compliance.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，上述方法与mypy和pyright等类型工具不兼容。 Python自己的`@property`装饰器之所以没有此限制，只是因为[这些工具硬编码了@property的行为](https://github.com/python/typing/discussions/1102)，这意味着此语法不符合[**PEP
    484**](https://peps.python.org/pep-0484/)的要求。
- en: 'In order to produce a reasonable syntax while remaining typing compliant, the
    [`hybrid_property.inplace`](#sqlalchemy.ext.hybrid.hybrid_property.inplace "sqlalchemy.ext.hybrid.hybrid_property.inplace")
    decorator allows the same decorator to be re-used with different method names,
    while still producing a single decorator under one name:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 为了产生合理的语法，同时保持类型兼容性，[`hybrid_property.inplace`](#sqlalchemy.ext.hybrid.hybrid_property.inplace
    "sqlalchemy.ext.hybrid.hybrid_property.inplace")装饰器允许使用不同的方法名重复使用相同的装饰器，同时仍然在一个名称下生成一个装饰器：
- en: '[PRE8]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Using [`hybrid_property.inplace`](#sqlalchemy.ext.hybrid.hybrid_property.inplace
    "sqlalchemy.ext.hybrid.hybrid_property.inplace") further qualifies the use of
    the decorator that a new copy should not be made, thereby maintaining the `Interval.radius`
    name while allowing additional methods `Interval._radius_setter` and `Interval._radius_expression`
    to be differently named.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[`hybrid_property.inplace`](#sqlalchemy.ext.hybrid.hybrid_property.inplace
    "sqlalchemy.ext.hybrid.hybrid_property.inplace")进一步限定了应该不制作新副本的装饰器的使用，从而保持了`Interval.radius`名称，同时允许其他方法`Interval._radius_setter`和`Interval._radius_expression`命名不同。
- en: 'New in version 2.0.4: Added [`hybrid_property.inplace`](#sqlalchemy.ext.hybrid.hybrid_property.inplace
    "sqlalchemy.ext.hybrid.hybrid_property.inplace") to allow less verbose construction
    of composite [`hybrid_property`](#sqlalchemy.ext.hybrid.hybrid_property "sqlalchemy.ext.hybrid.hybrid_property")
    objects while not having to use repeated method names. Additionally allowed the
    use of `@classmethod` within [`hybrid_property.expression`](#sqlalchemy.ext.hybrid.hybrid_property.expression
    "sqlalchemy.ext.hybrid.hybrid_property.expression"), [`hybrid_property.update_expression`](#sqlalchemy.ext.hybrid.hybrid_property.update_expression
    "sqlalchemy.ext.hybrid.hybrid_property.update_expression"), and [`hybrid_property.comparator`](#sqlalchemy.ext.hybrid.hybrid_property.comparator
    "sqlalchemy.ext.hybrid.hybrid_property.comparator") to allow typing tools to identify
    `cls` as a class and not an instance in the method signature.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0.4版中的新功能：添加了[`hybrid_property.inplace`](#sqlalchemy.ext.hybrid.hybrid_property.inplace
    "sqlalchemy.ext.hybrid.hybrid_property.inplace")，以允许更少冗长的构造复合[`hybrid_property`](#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property")对象，同时无需使用重复的方法名称。此外，允许在[`hybrid_property.expression`](#sqlalchemy.ext.hybrid.hybrid_property.expression
    "sqlalchemy.ext.hybrid.hybrid_property.expression")、[`hybrid_property.update_expression`](#sqlalchemy.ext.hybrid.hybrid_property.update_expression
    "sqlalchemy.ext.hybrid.hybrid_property.update_expression")和[`hybrid_property.comparator`](#sqlalchemy.ext.hybrid.hybrid_property.comparator
    "sqlalchemy.ext.hybrid.hybrid_property.comparator")内使用`@classmethod`，以允许类型工具将`cls`识别为类而不是方法签名中的实例。
- en: Defining Setters
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义设置器
- en: 'The [`hybrid_property.setter()`](#sqlalchemy.ext.hybrid.hybrid_property.setter
    "sqlalchemy.ext.hybrid.hybrid_property.setter") modifier allows the construction
    of a custom setter method, that can modify values on the object:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[`hybrid_property.setter()`](#sqlalchemy.ext.hybrid.hybrid_property.setter
    "sqlalchemy.ext.hybrid.hybrid_property.setter")修饰符允许构造自定义的设置器方法，可以修改对象上的值：'
- en: '[PRE9]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The `length(self, value)` method is now called upon set:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在设置时调用`length(self, value)`方法：
- en: '[PRE10]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '## Allowing Bulk ORM Update'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '## 允许批量ORM更新'
- en: A hybrid can define a custom “UPDATE” handler for when using ORM-enabled updates,
    allowing the hybrid to be used in the SET clause of the update.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 一个混合可以为启用ORM的更新定义自定义的“UPDATE”处理程序，从而允许混合用于更新的SET子句中。
- en: 'Normally, when using a hybrid with [`update()`](../../core/dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update"), the SQL expression is used as the column
    that’s the target of the SET. If our `Interval` class had a hybrid `start_point`
    that linked to `Interval.start`, this could be substituted directly:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在使用带有[`update()`](../../core/dml.html#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update")的混合时，SQL表达式被用作作为SET目标的列。如果我们的`Interval`类有一个混合`start_point`，它链接到`Interval.start`，这可以直接替换：
- en: '[PRE11]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'However, when using a composite hybrid like `Interval.length`, this hybrid
    represents more than one column. We can set up a handler that will accommodate
    a value passed in the VALUES expression which can affect this, using the [`hybrid_property.update_expression()`](#sqlalchemy.ext.hybrid.hybrid_property.update_expression
    "sqlalchemy.ext.hybrid.hybrid_property.update_expression") decorator. A handler
    that works similarly to our setter would be:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，当使用类似`Interval.length`的复合混合类型时，此混合类型表示不止一个列。我们可以设置一个处理程序，该处理程序将适应传递给VALUES表达式的值，这可能会影响到这一点，使用[`hybrid_property.update_expression()`](#sqlalchemy.ext.hybrid.hybrid_property.update_expression
    "sqlalchemy.ext.hybrid.hybrid_property.update_expression")装饰器。一个类似于我们的设置器的处理程序将是：
- en: '[PRE12]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Above, if we use `Interval.length` in an UPDATE expression, we get a hybrid
    SET expression:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 以上，如果我们在UPDATE表达式中使用`Interval.length`，我们将得到一个混合SET表达式：
- en: '[PRE13]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This SET expression is accommodated by the ORM automatically.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 SET 表达式会被 ORM 自动处理。
- en: See also
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[ORM-Enabled INSERT, UPDATE, and DELETE statements](../queryguide/dml.html#orm-expression-update-delete)
    - includes background on ORM-enabled UPDATE statements'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[ORM-启用的 INSERT、UPDATE 和 DELETE 语句](../queryguide/dml.html#orm-expression-update-delete)
    - 包括 ORM 启用的 UPDATE 语句的背景信息'
- en: Working with Relationships
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理关系
- en: There’s no essential difference when creating hybrids that work with related
    objects as opposed to column-based data. The need for distinct expressions tends
    to be greater. The two variants we’ll illustrate are the “join-dependent” hybrid,
    and the “correlated subquery” hybrid.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 创建与基于列的数据不同的混合对象时，本质上没有区别。对于不同的表达式的需求往往更大。我们将展示的两种变体是“连接依赖”混合和“相关子查询”混合。
- en: Join-Dependent Relationship Hybrid
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接依赖关系混合
- en: 'Consider the following declarative mapping which relates a `User` to a `SavingsAccount`:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下将 `User` 与 `SavingsAccount` 关联的声明性映射：
- en: '[PRE14]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The above hybrid property `balance` works with the first `SavingsAccount` entry
    in the list of accounts for this user. The in-Python getter/setter methods can
    treat `accounts` as a Python list available on `self`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的混合属性 `balance` 与此用户的账户列表中的第一个 `SavingsAccount` 条目一起工作。在 Python 中的 getter/setter
    方法可以将 `accounts` 视为可在 `self` 上使用的 Python 列表。
- en: Tip
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The `User.balance` getter in the above example accesses the `self.acccounts`
    collection, which will normally be loaded via the [`selectinload()`](../queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload") loader strategy configured on the `User.balance`
    [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship").
    The default loader strategy when not otherwise stated on [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") is [`lazyload()`](../queryguide/relationships.html#sqlalchemy.orm.lazyload
    "sqlalchemy.orm.lazyload"), which emits SQL on demand. When using asyncio, on-demand
    loaders such as [`lazyload()`](../queryguide/relationships.html#sqlalchemy.orm.lazyload
    "sqlalchemy.orm.lazyload") are not supported, so care should be taken to ensure
    the `self.accounts` collection is accessible to this hybrid accessor when using
    asyncio.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，`User.balance` 的 getter 方法访问了 `self.accounts` 集合，通常会通过配置在 `User.balance`
    的 [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    上的 [`selectinload()`](../queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload") 加载策略来加载。当在 [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 上没有另外指定时，默认的加载策略是 [`lazyload()`](../queryguide/relationships.html#sqlalchemy.orm.lazyload
    "sqlalchemy.orm.lazyload")，它会按需发出 SQL。在使用 asyncio 时，像 [`lazyload()`](../queryguide/relationships.html#sqlalchemy.orm.lazyload
    "sqlalchemy.orm.lazyload") 这样的按需加载器不受支持，因此在使用 asyncio 时，应确保 `self.accounts` 集合对这个混合访问器是可访问的。
- en: 'At the expression level, it’s expected that the `User` class will be used in
    an appropriate context such that an appropriate join to `SavingsAccount` will
    be present:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在表达式级别，预期 `User` 类将在适当的上下文中使用，以便存在与 `SavingsAccount` 的适当连接：
- en: '[PRE15]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Note however, that while the instance level accessors need to worry about whether
    `self.accounts` is even present, this issue expresses itself differently at the
    SQL expression level, where we basically would use an outer join:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 但需要注意的是，尽管实例级别的访问器需要担心 `self.accounts` 是否存在，但在 SQL 表达式级别，这个问题表现得不同，我们基本上会使用外连接：
- en: '[PRE16]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Correlated Subquery Relationship Hybrid
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 相关子查询关系混合
- en: 'We can, of course, forego being dependent on the enclosing query’s usage of
    joins in favor of the correlated subquery, which can portably be packed into a
    single column expression. A correlated subquery is more portable, but often performs
    more poorly at the SQL level. Using the same technique illustrated at [Using column_property](../mapped_sql_expr.html#mapper-column-property-sql-expressions),
    we can adjust our `SavingsAccount` example to aggregate the balances for *all*
    accounts, and use a correlated subquery for the column expression:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们可以放弃依赖于包含查询中连接的使用，而选择相关子查询，它可以被打包成一个单列表达式。相关子查询更具可移植性，但在 SQL 层面通常性能较差。使用在
    [使用 column_property](../mapped_sql_expr.html#mapper-column-property-sql-expressions)
    中展示的相同技术，我们可以调整我们的 `SavingsAccount` 示例来聚合*所有*账户的余额，并使用相关子查询作为列表达式：
- en: '[PRE17]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The above recipe will give us the `balance` column which renders a correlated
    SELECT:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的示例将给我们一个 `balance` 列，它呈现一个相关的 SELECT：
- en: '[PRE18]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '## Building Custom Comparators'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '## 构建自定义比较器'
- en: The hybrid property also includes a helper that allows construction of custom
    comparators. A comparator object allows one to customize the behavior of each
    SQLAlchemy expression operator individually. They are useful when creating custom
    types that have some highly idiosyncratic behavior on the SQL side.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 混合属性还包括一个辅助程序，允许构建自定义比较器。比较器对象允许单独定制每个 SQLAlchemy 表达式操作符的行为。在创建在 SQL 方面具有某些高度特殊行为的自定义类型时很有用。
- en: Note
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The [`hybrid_property.comparator()`](#sqlalchemy.ext.hybrid.hybrid_property.comparator
    "sqlalchemy.ext.hybrid.hybrid_property.comparator") decorator introduced in this
    section **replaces** the use of the [`hybrid_property.expression()`](#sqlalchemy.ext.hybrid.hybrid_property.expression
    "sqlalchemy.ext.hybrid.hybrid_property.expression") decorator. They cannot be
    used together.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中引入的[`hybrid_property.comparator()`](#sqlalchemy.ext.hybrid.hybrid_property.comparator
    "sqlalchemy.ext.hybrid.hybrid_property.comparator")装饰器**替换**了[`hybrid_property.expression()`](#sqlalchemy.ext.hybrid.hybrid_property.expression
    "sqlalchemy.ext.hybrid.hybrid_property.expression")装饰器的使用。它们不能一起使用。
- en: 'The example class below allows case-insensitive comparisons on the attribute
    named `word_insensitive`:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的示例类允许在名为`word_insensitive`的属性上进行不区分大小写的比较：
- en: '[PRE19]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Above, SQL expressions against `word_insensitive` will apply the `LOWER()`
    SQL function to both sides:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述情况下，针对`word_insensitive`的 SQL 表达式将对两侧应用`LOWER()` SQL 函数：
- en: '[PRE20]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The `CaseInsensitiveComparator` above implements part of the [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") interface. A “coercion” operation
    like lowercasing can be applied to all comparison operations (i.e. `eq`, `lt`,
    `gt`, etc.) using [`Operators.operate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.operate
    "sqlalchemy.sql.expression.Operators.operate"):'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 上述的`CaseInsensitiveComparator`实现了[`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")接口的部分内容。可以使用[`Operators.operate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.operate
    "sqlalchemy.sql.expression.Operators.operate")对所有比较操作（即`eq`、`lt`、`gt`等）应用“强制转换”操作，如转换为小写：
- en: '[PRE21]  ## Reusing Hybrid Properties across Subclasses'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE21]  ## 在子类之间重用混合属性'
- en: 'A hybrid can be referred to from a superclass, to allow modifying methods like
    [`hybrid_property.getter()`](#sqlalchemy.ext.hybrid.hybrid_property.getter "sqlalchemy.ext.hybrid.hybrid_property.getter"),
    [`hybrid_property.setter()`](#sqlalchemy.ext.hybrid.hybrid_property.setter "sqlalchemy.ext.hybrid.hybrid_property.setter")
    to be used to redefine those methods on a subclass. This is similar to how the
    standard Python `@property` object works:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 可以从超类中引用混合体，以允许修改方法，如[`hybrid_property.getter()`](#sqlalchemy.ext.hybrid.hybrid_property.getter
    "sqlalchemy.ext.hybrid.hybrid_property.getter")，[`hybrid_property.setter()`](#sqlalchemy.ext.hybrid.hybrid_property.setter
    "sqlalchemy.ext.hybrid.hybrid_property.setter")，以便在子类中重新定义这些方法。这类似于标准 Python 的`@property`对象的工作原理：
- en: '[PRE22]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Above, the `FirstNameLastName` class refers to the hybrid from `FirstNameOnly.name`
    to repurpose its getter and setter for the subclass.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述情况下，`FirstNameLastName`类引用了从`FirstNameOnly.name`到子类的混合体，以重新利用其 getter 和 setter。
- en: 'When overriding [`hybrid_property.expression()`](#sqlalchemy.ext.hybrid.hybrid_property.expression
    "sqlalchemy.ext.hybrid.hybrid_property.expression") and [`hybrid_property.comparator()`](#sqlalchemy.ext.hybrid.hybrid_property.comparator
    "sqlalchemy.ext.hybrid.hybrid_property.comparator") alone as the first reference
    to the superclass, these names conflict with the same-named accessors on the class-
    level [`QueryableAttribute`](../internals.html#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute") object returned at the class level. To override
    these methods when referring directly to the parent class descriptor, add the
    special qualifier [`hybrid_property.overrides`](#sqlalchemy.ext.hybrid.hybrid_property.overrides
    "sqlalchemy.ext.hybrid.hybrid_property.overrides"), which will de- reference the
    instrumented attribute back to the hybrid object:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 当仅在首次引用超类时覆盖[`hybrid_property.expression()`](#sqlalchemy.ext.hybrid.hybrid_property.expression
    "sqlalchemy.ext.hybrid.hybrid_property.expression")和[`hybrid_property.comparator()`](#sqlalchemy.ext.hybrid.hybrid_property.comparator
    "sqlalchemy.ext.hybrid.hybrid_property.comparator")作为类级别的第一个引用时，这些名称会与返回类级别的[`QueryableAttribute`](../internals.html#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute")对象上的同名访问器发生冲突。要在直接引用父类描述符时覆盖这些方法，请添加特殊限定词[`hybrid_property.overrides`](#sqlalchemy.ext.hybrid.hybrid_property.overrides
    "sqlalchemy.ext.hybrid.hybrid_property.overrides")，该限定词将仪表化的属性引用回混合对象：
- en: '[PRE23]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Hybrid Value Objects
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 混合值对象
- en: Note in our previous example, if we were to compare the `word_insensitive` attribute
    of a `SearchWord` instance to a plain Python string, the plain Python string would
    not be coerced to lower case - the `CaseInsensitiveComparator` we built, being
    returned by `@word_insensitive.comparator`, only applies to the SQL side.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在我们之前的例子中，如果我们将`SearchWord`实例的`word_insensitive`属性与普通的Python字符串进行比较，普通的Python字符串不会被强制转换为小写
    - 我们构建的`CaseInsensitiveComparator`，由`@word_insensitive.comparator`返回，仅适用于SQL端。
- en: 'A more comprehensive form of the custom comparator is to construct a *Hybrid
    Value Object*. This technique applies the target value or expression to a value
    object which is then returned by the accessor in all cases. The value object allows
    control of all operations upon the value as well as how compared values are treated,
    both on the SQL expression side as well as the Python value side. Replacing the
    previous `CaseInsensitiveComparator` class with a new `CaseInsensitiveWord` class:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义比较器的更全面形式是构建一个*混合值对象*。这种技术将目标值或表达式应用于一个值对象，然后由访问器在所有情况下返回。值对象允许控制对值的所有操作，以及如何处理比较的值，无论是在SQL表达式方面还是在Python值方面。用新的`CaseInsensitiveWord`类替换以前的`CaseInsensitiveComparator`类：
- en: '[PRE24]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Above, the `CaseInsensitiveWord` object represents `self.word`, which may be
    a SQL function, or may be a Python native. By overriding `operate()` and `__clause_element__()`
    to work in terms of `self.word`, all comparison operations will work against the
    “converted” form of `word`, whether it be SQL side or Python side. Our `SearchWord`
    class can now deliver the `CaseInsensitiveWord` object unconditionally from a
    single hybrid call:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，`CaseInsensitiveWord`对象表示`self.word`，它可能是一个SQL函数，也可能是一个Python本机对象。通过重写`operate()`和`__clause_element__()`以使用`self.word`，所有比较操作将针对“转换”形式的`word`进行，无论是在SQL端还是在Python端。我们的`SearchWord`类现在可以无条件地从单个混合调用中交付`CaseInsensitiveWord`对象：
- en: '[PRE25]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The `word_insensitive` attribute now has case-insensitive comparison behavior
    universally, including SQL expression vs. Python expression (note the Python value
    is converted to lower case on the Python side here):'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`word_insensitive`属性现在在所有情况下都具有不区分大小写的比较行为，包括SQL表达式与Python表达式（请注意，此处Python值在Python端转换为小写）：'
- en: '[PRE26]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'SQL expression versus SQL expression:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: SQL表达式与SQL表达式：
- en: '[PRE27]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Python only expression:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 仅Python表达式：
- en: '[PRE28]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The Hybrid Value pattern is very useful for any kind of value that may have
    multiple representations, such as timestamps, time deltas, units of measurement,
    currencies and encrypted passwords.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 混合值模式非常适用于可能具有多种表示形式的任何类型的值，例如时间戳、时间差、测量单位、货币和加密密码。
- en: See also
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Hybrids and Value Agnostic Types](https://techspot.zzzeek.org/2011/10/21/hybrids-and-value-agnostic-types/)
    - on the techspot.zzzeek.org blog'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '[混合和值不可知类型](https://techspot.zzzeek.org/2011/10/21/hybrids-and-value-agnostic-types/)
    - 在techspot.zzzeek.org博客上'
- en: '[Value Agnostic Types, Part II](https://techspot.zzzeek.org/2011/10/29/value-agnostic-types-part-ii/)
    - on the techspot.zzzeek.org blog'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '[值不可知类型，第二部分](https://techspot.zzzeek.org/2011/10/29/value-agnostic-types-part-ii/)
    - 在techspot.zzzeek.org博客上'
- en: API Reference
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: API 参考
- en: '| Object Name | Description |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [Comparator](#sqlalchemy.ext.hybrid.Comparator) | A helper class that allows
    easy construction of custom [`PropComparator`](../internals.html#sqlalchemy.orm.PropComparator
    "sqlalchemy.orm.interfaces.PropComparator") classes for usage with hybrids. |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| [比较器](#sqlalchemy.ext.hybrid.Comparator) | 一个帮助类，允许轻松构建用于混合使用的自定义[`PropComparator`](../internals.html#sqlalchemy.orm.PropComparator
    "sqlalchemy.orm.interfaces.PropComparator")类。|'
- en: '| [hybrid_method](#sqlalchemy.ext.hybrid.hybrid_method) | A decorator which
    allows definition of a Python object method with both instance-level and class-level
    behavior. |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| [hybrid_method](#sqlalchemy.ext.hybrid.hybrid_method) | 一个装饰器，允许定义具有实例级和类级行为的Python对象方法。|'
- en: '| [hybrid_property](#sqlalchemy.ext.hybrid.hybrid_property) | A decorator which
    allows definition of a Python descriptor with both instance-level and class-level
    behavior. |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| [hybrid_property](#sqlalchemy.ext.hybrid.hybrid_property) | 一个装饰器，允许定义具有实例级和类级行为的Python描述符。|'
- en: '| [HybridExtensionType](#sqlalchemy.ext.hybrid.HybridExtensionType) | An enumeration.
    |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| [混合扩展类型](#sqlalchemy.ext.hybrid.HybridExtensionType) | 一个枚举类型。|'
- en: '[PRE29]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: A decorator which allows definition of a Python object method with both instance-level
    and class-level behavior.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 一个装饰器，允许定义具有实例级和类级行为的Python对象方法。
- en: '**Members**'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.ext.hybrid.hybrid_method.__init__), [expression()](#sqlalchemy.ext.hybrid.hybrid_method.expression),
    [extension_type](#sqlalchemy.ext.hybrid.hybrid_method.extension_type), [inplace](#sqlalchemy.ext.hybrid.hybrid_method.inplace),
    [is_attribute](#sqlalchemy.ext.hybrid.hybrid_method.is_attribute)'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.ext.hybrid.hybrid_method.__init__), [expression()](#sqlalchemy.ext.hybrid.hybrid_method.expression),
    [extension_type](#sqlalchemy.ext.hybrid.hybrid_method.extension_type), [inplace](#sqlalchemy.ext.hybrid.hybrid_method.inplace),
    [is_attribute](#sqlalchemy.ext.hybrid.hybrid_method.is_attribute)'
- en: '**Class signature**'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.ext.hybrid.hybrid_method`](#sqlalchemy.ext.hybrid.hybrid_method
    "sqlalchemy.ext.hybrid.hybrid_method") ([`sqlalchemy.orm.base.InspectionAttrInfo`](../internals.html#sqlalchemy.orm.InspectionAttrInfo
    "sqlalchemy.orm.base.InspectionAttrInfo"), `typing.Generic`)
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.ext.hybrid.hybrid_method`](#sqlalchemy.ext.hybrid.hybrid_method
    "sqlalchemy.ext.hybrid.hybrid_method")（[`sqlalchemy.orm.base.InspectionAttrInfo`](../internals.html#sqlalchemy.orm.InspectionAttrInfo
    "sqlalchemy.orm.base.InspectionAttrInfo"), `typing.Generic`)
- en: '[PRE30]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Create a new [`hybrid_method`](#sqlalchemy.ext.hybrid.hybrid_method "sqlalchemy.ext.hybrid.hybrid_method").
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的[`hybrid_method`](#sqlalchemy.ext.hybrid.hybrid_method "sqlalchemy.ext.hybrid.hybrid_method")。
- en: 'Usage is typically via decorator:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 通常使用装饰器：
- en: '[PRE31]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Provide a modifying decorator that defines a SQL-expression producing method.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 提供一个修改装饰器，定义一个生成SQL表达式的方法。
- en: '[PRE33]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The extension type, if any. Defaults to `NotExtension.NOT_EXTENSION`
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展类型，如果有的话。默认为`NotExtension.NOT_EXTENSION`
- en: See also
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`HybridExtensionType`](#sqlalchemy.ext.hybrid.HybridExtensionType "sqlalchemy.ext.hybrid.HybridExtensionType")'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '[`HybridExtensionType`](#sqlalchemy.ext.hybrid.HybridExtensionType "sqlalchemy.ext.hybrid.HybridExtensionType")'
- en: '[`AssociationProxyExtensionType`](associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxyExtensionType
    "sqlalchemy.ext.associationproxy.AssociationProxyExtensionType")'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AssociationProxyExtensionType`](associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxyExtensionType
    "sqlalchemy.ext.associationproxy.AssociationProxyExtensionType")'
- en: '[PRE34]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Return the inplace mutator for this [`hybrid_method`](#sqlalchemy.ext.hybrid.hybrid_method
    "sqlalchemy.ext.hybrid.hybrid_method").
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此[`hybrid_method`](#sqlalchemy.ext.hybrid.hybrid_method "sqlalchemy.ext.hybrid.hybrid_method")的原地变异器。
- en: The [`hybrid_method`](#sqlalchemy.ext.hybrid.hybrid_method "sqlalchemy.ext.hybrid.hybrid_method")
    class already performs “in place” mutation when the [`hybrid_method.expression()`](#sqlalchemy.ext.hybrid.hybrid_method.expression
    "sqlalchemy.ext.hybrid.hybrid_method.expression") decorator is called, so this
    attribute returns Self.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用[`hybrid_method.expression()`](#sqlalchemy.ext.hybrid.hybrid_method.expression
    "sqlalchemy.ext.hybrid.hybrid_method.expression")装饰器时，[`hybrid_method`](#sqlalchemy.ext.hybrid.hybrid_method
    "sqlalchemy.ext.hybrid.hybrid_method")类已经执行“原地”变异，因此此属性返回Self。
- en: New in version 2.0.4.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 版本2.0.4中的新功能。
- en: See also
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using inplace to create pep-484 compliant hybrid properties](#hybrid-pep484-naming)'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用inplace创建符合pep-484的混合属性](#hybrid-pep484-naming)'
- en: '[PRE35]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: True if this object is a Python [descriptor](../../glossary.html#term-descriptor).
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这个对象是一个Python [描述符](../../glossary.html#term-descriptor)，则为True。
- en: This can refer to one of many types. Usually a [`QueryableAttribute`](../internals.html#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute") which handles attributes events on behalf
    of a [`MapperProperty`](../internals.html#sqlalchemy.orm.MapperProperty "sqlalchemy.orm.MapperProperty").
    But can also be an extension type such as [`AssociationProxy`](associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") or [`hybrid_property`](#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property"). The [`InspectionAttr.extension_type`](../internals.html#sqlalchemy.orm.InspectionAttr.extension_type
    "sqlalchemy.orm.InspectionAttr.extension_type") will refer to a constant identifying
    the specific subtype.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以指代许多类型之一。通常是一个处理属性事件的[`QueryableAttribute`](../internals.html#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute")，代表一个[`MapperProperty`](../internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty")。但也可以是一个扩展类型，如[`AssociationProxy`](associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy")或[`hybrid_property`](#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property")。[`InspectionAttr.extension_type`](../internals.html#sqlalchemy.orm.InspectionAttr.extension_type
    "sqlalchemy.orm.InspectionAttr.extension_type")将指代一个标识特定子类型的常量。
- en: See also
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Mapper.all_orm_descriptors`](../mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors")'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Mapper.all_orm_descriptors`](../mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors")'
- en: '[PRE36]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: A decorator which allows definition of a Python descriptor with both instance-level
    and class-level behavior.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 一个允许定义具有实例级和类级行为的Python描述符的装饰器。
- en: '**Members**'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.ext.hybrid.hybrid_property.__init__), [comparator()](#sqlalchemy.ext.hybrid.hybrid_property.comparator),
    [deleter()](#sqlalchemy.ext.hybrid.hybrid_property.deleter), [expression()](#sqlalchemy.ext.hybrid.hybrid_property.expression),
    [extension_type](#sqlalchemy.ext.hybrid.hybrid_property.extension_type), [getter()](#sqlalchemy.ext.hybrid.hybrid_property.getter),
    [inplace](#sqlalchemy.ext.hybrid.hybrid_property.inplace), [is_attribute](#sqlalchemy.ext.hybrid.hybrid_property.is_attribute),
    [overrides](#sqlalchemy.ext.hybrid.hybrid_property.overrides), [setter()](#sqlalchemy.ext.hybrid.hybrid_property.setter),
    [update_expression()](#sqlalchemy.ext.hybrid.hybrid_property.update_expression)'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.ext.hybrid.hybrid_property.__init__), [comparator()](#sqlalchemy.ext.hybrid.hybrid_property.comparator),
    [deleter()](#sqlalchemy.ext.hybrid.hybrid_property.deleter), [expression()](#sqlalchemy.ext.hybrid.hybrid_property.expression),
    [extension_type](#sqlalchemy.ext.hybrid.hybrid_property.extension_type), [getter()](#sqlalchemy.ext.hybrid.hybrid_property.getter),
    [inplace](#sqlalchemy.ext.hybrid.hybrid_property.inplace), [is_attribute](#sqlalchemy.ext.hybrid.hybrid_property.is_attribute),
    [overrides](#sqlalchemy.ext.hybrid.hybrid_property.overrides), [setter()](#sqlalchemy.ext.hybrid.hybrid_property.setter),
    [update_expression()](#sqlalchemy.ext.hybrid.hybrid_property.update_expression)'
- en: '**Class signature**'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.ext.hybrid.hybrid_property`](#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property") ([`sqlalchemy.orm.base.InspectionAttrInfo`](../internals.html#sqlalchemy.orm.InspectionAttrInfo
    "sqlalchemy.orm.base.InspectionAttrInfo"), `sqlalchemy.orm.base.ORMDescriptor`)
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.ext.hybrid.hybrid_property`](#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property")（[`sqlalchemy.orm.base.InspectionAttrInfo`](../internals.html#sqlalchemy.orm.InspectionAttrInfo
    "sqlalchemy.orm.base.InspectionAttrInfo"), `sqlalchemy.orm.base.ORMDescriptor`)
- en: '[PRE37]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Create a new [`hybrid_property`](#sqlalchemy.ext.hybrid.hybrid_property "sqlalchemy.ext.hybrid.hybrid_property").
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的[`hybrid_property`](#sqlalchemy.ext.hybrid.hybrid_property "sqlalchemy.ext.hybrid.hybrid_property")。
- en: 'Usage is typically via decorator:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 通常使用修饰器：
- en: '[PRE38]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Provide a modifying decorator that defines a custom comparator producing method.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 提供一个修饰器，定义一个自定义比较器生成方法。
- en: The return value of the decorated method should be an instance of [`Comparator`](#sqlalchemy.ext.hybrid.Comparator
    "sqlalchemy.ext.hybrid.Comparator").
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 被修饰方法的返回值应该是[`Comparator`](#sqlalchemy.ext.hybrid.Comparator "sqlalchemy.ext.hybrid.Comparator")的一个实例。
- en: Note
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The [`hybrid_property.comparator()`](#sqlalchemy.ext.hybrid.hybrid_property.comparator
    "sqlalchemy.ext.hybrid.hybrid_property.comparator") decorator **replaces** the
    use of the [`hybrid_property.expression()`](#sqlalchemy.ext.hybrid.hybrid_property.expression
    "sqlalchemy.ext.hybrid.hybrid_property.expression") decorator. They cannot be
    used together.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '[`hybrid_property.comparator()`](#sqlalchemy.ext.hybrid.hybrid_property.comparator
    "sqlalchemy.ext.hybrid.hybrid_property.comparator")修饰器**替代**了[`hybrid_property.expression()`](#sqlalchemy.ext.hybrid.hybrid_property.expression
    "sqlalchemy.ext.hybrid.hybrid_property.expression")修饰器的使用。它们不能同时使用。'
- en: When a hybrid is invoked at the class level, the [`Comparator`](#sqlalchemy.ext.hybrid.Comparator
    "sqlalchemy.ext.hybrid.Comparator") object given here is wrapped inside of a specialized
    [`QueryableAttribute`](../internals.html#sqlalchemy.orm.QueryableAttribute "sqlalchemy.orm.QueryableAttribute"),
    which is the same kind of object used by the ORM to represent other mapped attributes.
    The reason for this is so that other class-level attributes such as docstrings
    and a reference to the hybrid itself may be maintained within the structure that’s
    returned, without any modifications to the original comparator object passed in.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 当在类级别调用混合属性时，这里给出的[`Comparator`](#sqlalchemy.ext.hybrid.Comparator "sqlalchemy.ext.hybrid.Comparator")对象被包装在一个专门的[`QueryableAttribute`](../internals.html#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute")中，这是ORM用来表示其他映射属性的对象。这样做的原因是为了在返回的结构中保留其他类级别属性，如文档字符串和对混合属性本身的引用，而不对传入的原始比较器对象进行任何修改。
- en: Note
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: When referring to a hybrid property from an owning class (e.g. `SomeClass.some_hybrid`),
    an instance of [`QueryableAttribute`](../internals.html#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute") is returned, representing the expression
    or comparator object as this hybrid object. However, that object itself has accessors
    called `expression` and `comparator`; so when attempting to override these decorators
    on a subclass, it may be necessary to qualify it using the [`hybrid_property.overrides`](#sqlalchemy.ext.hybrid.hybrid_property.overrides
    "sqlalchemy.ext.hybrid.hybrid_property.overrides") modifier first. See that modifier
    for details.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 当引用拥有类（例如 `SomeClass.some_hybrid`）的混合属性时，会返回一个[`QueryableAttribute`](../internals.html#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute")的实例，表示此混合对象的表达式或比较器对象。但是，该对象本身具有名为 `expression`
    和 `comparator` 的访问器；因此，在尝试在子类上覆盖这些装饰器时，可能需要首先使用 [`hybrid_property.overrides`](#sqlalchemy.ext.hybrid.hybrid_property.overrides
    "sqlalchemy.ext.hybrid.hybrid_property.overrides") 修饰符进行限定。有关详细信息，请参阅该修饰符。
- en: '[PRE40]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Provide a modifying decorator that defines a deletion method.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 提供一个修改装饰器，定义一个删除方法。
- en: '[PRE41]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Provide a modifying decorator that defines a SQL-expression producing method.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 提供一个修改装饰器，定义一个生成 SQL 表达式的方法。
- en: When a hybrid is invoked at the class level, the SQL expression given here is
    wrapped inside of a specialized [`QueryableAttribute`](../internals.html#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute"), which is the same kind of object used by
    the ORM to represent other mapped attributes. The reason for this is so that other
    class-level attributes such as docstrings and a reference to the hybrid itself
    may be maintained within the structure that’s returned, without any modifications
    to the original SQL expression passed in.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 当在类级别调用混合时，此处给出的 SQL 表达式将包装在一个专门的 [`QueryableAttribute`](../internals.html#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute") 内，这是 ORM 用于表示其他映射属性的相同类型的对象。这样做的原因是为了在返回的结构中维护其他类级别属性，例如文档字符串和混合本身的引用，而不对传入的原始
    SQL 表达式进行任何修改。
- en: Note
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: When referring to a hybrid property from an owning class (e.g. `SomeClass.some_hybrid`),
    an instance of [`QueryableAttribute`](../internals.html#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute") is returned, representing the expression
    or comparator object as well as this hybrid object. However, that object itself
    has accessors called `expression` and `comparator`; so when attempting to override
    these decorators on a subclass, it may be necessary to qualify it using the [`hybrid_property.overrides`](#sqlalchemy.ext.hybrid.hybrid_property.overrides
    "sqlalchemy.ext.hybrid.hybrid_property.overrides") modifier first. See that modifier
    for details.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 当引用拥有类（例如 `SomeClass.some_hybrid`）的混合属性时，会返回一个[`QueryableAttribute`](../internals.html#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute")的实例，表示表达式或比较器对象以及此混合对象。但是，该对象本身具有名为 `expression`
    和 `comparator` 的访问器；因此，在尝试在子类上覆盖这些装饰器时，可能需要首先使用 [`hybrid_property.overrides`](#sqlalchemy.ext.hybrid.hybrid_property.overrides
    "sqlalchemy.ext.hybrid.hybrid_property.overrides") 修饰符进行限定。有关详细信息，请参阅该修饰符。
- en: See also
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见
- en: '[Defining Expression Behavior Distinct from Attribute Behavior](#hybrid-distinct-expression)'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '[定义与属性行为不同的表达行为](#hybrid-distinct-expression)'
- en: '[PRE42]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The extension type, if any. Defaults to `NotExtension.NOT_EXTENSION`
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展类型，如果有的话。默认为 `NotExtension.NOT_EXTENSION`
- en: See also
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见
- en: '[`HybridExtensionType`](#sqlalchemy.ext.hybrid.HybridExtensionType "sqlalchemy.ext.hybrid.HybridExtensionType")'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '[`HybridExtensionType`](#sqlalchemy.ext.hybrid.HybridExtensionType "sqlalchemy.ext.hybrid.HybridExtensionType")'
- en: '[`AssociationProxyExtensionType`](associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxyExtensionType
    "sqlalchemy.ext.associationproxy.AssociationProxyExtensionType")'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AssociationProxyExtensionType`](associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxyExtensionType
    "sqlalchemy.ext.associationproxy.AssociationProxyExtensionType")'
- en: '[PRE43]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Provide a modifying decorator that defines a getter method.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 提供一个修改装饰器，定义一个获取器方法。
- en: New in version 1.2.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 自 1.2 版开始新添加。
- en: '[PRE44]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Return the inplace mutator for this [`hybrid_property`](#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property").
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此 [`hybrid_property`](#sqlalchemy.ext.hybrid.hybrid_property "sqlalchemy.ext.hybrid.hybrid_property")
    的原地变异器。
- en: 'This is to allow in-place mutation of the hybrid, allowing the first hybrid
    method of a certain name to be re-used in order to add more methods without having
    to name those methods the same, e.g.:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 这是为了允许对混合进行就地变异，允许重用特定名称的第一个混合方法以添加更多方法，而不必将这些方法命名为相同的名称，例如：
- en: '[PRE45]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: New in version 2.0.4.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 自 2.0.4 版开始新添加。
- en: See also
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见
- en: '[Using inplace to create pep-484 compliant hybrid properties](#hybrid-pep484-naming)'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 inplace 创建符合 pep-484 的混合属性](#hybrid-pep484-naming)'
- en: '[PRE46]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: True if this object is a Python [descriptor](../../glossary.html#term-descriptor).
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此对象是 Python 的 [描述符](../../glossary.html#term-descriptor)，则为 True。
- en: This can refer to one of many types. Usually a [`QueryableAttribute`](../internals.html#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute") which handles attributes events on behalf
    of a [`MapperProperty`](../internals.html#sqlalchemy.orm.MapperProperty "sqlalchemy.orm.MapperProperty").
    But can also be an extension type such as [`AssociationProxy`](associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") or [`hybrid_property`](#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property"). The [`InspectionAttr.extension_type`](../internals.html#sqlalchemy.orm.InspectionAttr.extension_type
    "sqlalchemy.orm.InspectionAttr.extension_type") will refer to a constant identifying
    the specific subtype.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能是多种类型之一。通常是一个[`QueryableAttribute`](../internals.html#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute")，它代表一个[`MapperProperty`](../internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty")上的属性事件。但也可以是诸如[`AssociationProxy`](associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy")或[`hybrid_property`](#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property")之类的扩展类型。[`InspectionAttr.extension_type`](../internals.html#sqlalchemy.orm.InspectionAttr.extension_type
    "sqlalchemy.orm.InspectionAttr.extension_type") 将引用一个常量，以识别特定的子类型。
- en: See also
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Mapper.all_orm_descriptors`](../mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors")'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Mapper.all_orm_descriptors`](../mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors")'
- en: '[PRE47]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Prefix for a method that is overriding an existing attribute.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 重写现有属性的方法的前缀。
- en: 'The [`hybrid_property.overrides`](#sqlalchemy.ext.hybrid.hybrid_property.overrides
    "sqlalchemy.ext.hybrid.hybrid_property.overrides") accessor just returns this
    hybrid object, which when called at the class level from a parent class, will
    de-reference the “instrumented attribute” normally returned at this level, and
    allow modifying decorators like [`hybrid_property.expression()`](#sqlalchemy.ext.hybrid.hybrid_property.expression
    "sqlalchemy.ext.hybrid.hybrid_property.expression") and [`hybrid_property.comparator()`](#sqlalchemy.ext.hybrid.hybrid_property.comparator
    "sqlalchemy.ext.hybrid.hybrid_property.comparator") to be used without conflicting
    with the same-named attributes normally present on the [`QueryableAttribute`](../internals.html#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute"):'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '[`hybrid_property.overrides`](#sqlalchemy.ext.hybrid.hybrid_property.overrides
    "sqlalchemy.ext.hybrid.hybrid_property.overrides") 访问器只是返回这个混合对象，当在父类的类级别从父类调用时，它将取消引用通常在此级别返回的“instrumented
    attribute”，并允许修改装饰器，例如 [`hybrid_property.expression()`](#sqlalchemy.ext.hybrid.hybrid_property.expression
    "sqlalchemy.ext.hybrid.hybrid_property.expression") 和 [`hybrid_property.comparator()`](#sqlalchemy.ext.hybrid.hybrid_property.comparator
    "sqlalchemy.ext.hybrid.hybrid_property.comparator") 被使用而不与通常存在于[`QueryableAttribute`](../internals.html#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute")上的同名属性冲突：'
- en: '[PRE48]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: New in version 1.2.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 1.2 版的新功能。
- en: See also
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Reusing Hybrid Properties across Subclasses](#hybrid-reuse-subclass)'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '[在子类中重用混合属性](#hybrid-reuse-subclass)'
- en: '[PRE49]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Provide a modifying decorator that defines a setter method.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 提供一个定义 setter 方法的修改装饰器。
- en: '[PRE50]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Provide a modifying decorator that defines an UPDATE tuple producing method.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 提供一个定义产生 UPDATE 元组的修改装饰器方法。
- en: The method accepts a single value, which is the value to be rendered into the
    SET clause of an UPDATE statement. The method should then process this value into
    individual column expressions that fit into the ultimate SET clause, and return
    them as a sequence of 2-tuples. Each tuple contains a column expression as the
    key and a value to be rendered.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法接受一个值，该值将被渲染到 UPDATE 语句的 SET 子句中。然后，该方法应将此值处理为适合最终 SET 子句的单个列表达式，并将它们作为 2
    元组的序列返回。每个元组包含一个列表达式作为键和要渲染的值。
- en: 'E.g.:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE51]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: New in version 1.2.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 1.2 版的新功能。
- en: '[PRE52]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: A helper class that allows easy construction of custom [`PropComparator`](../internals.html#sqlalchemy.orm.PropComparator
    "sqlalchemy.orm.interfaces.PropComparator") classes for usage with hybrids.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 一个辅助类，允许轻松构建自定义[`PropComparator`](../internals.html#sqlalchemy.orm.PropComparator
    "sqlalchemy.orm.interfaces.PropComparator")类以与混合一起使用。
- en: '**Class signature**'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.ext.hybrid.Comparator`](#sqlalchemy.ext.hybrid.Comparator
    "sqlalchemy.ext.hybrid.Comparator") ([`sqlalchemy.orm.PropComparator`](../internals.html#sqlalchemy.orm.PropComparator
    "sqlalchemy.orm.PropComparator"))
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.ext.hybrid.Comparator`](#sqlalchemy.ext.hybrid.Comparator "sqlalchemy.ext.hybrid.Comparator")
    ([`sqlalchemy.orm.PropComparator`](../internals.html#sqlalchemy.orm.PropComparator
    "sqlalchemy.orm.PropComparator"))
- en: '[PRE53]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: An enumeration.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 一个枚举。
- en: '**Members**'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[HYBRID_METHOD](#sqlalchemy.ext.hybrid.HybridExtensionType.HYBRID_METHOD),
    [HYBRID_PROPERTY](#sqlalchemy.ext.hybrid.HybridExtensionType.HYBRID_PROPERTY)'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '[HYBRID_METHOD](#sqlalchemy.ext.hybrid.HybridExtensionType.HYBRID_METHOD),
    [HYBRID_PROPERTY](#sqlalchemy.ext.hybrid.HybridExtensionType.HYBRID_PROPERTY)'
- en: '**Class signature**'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.ext.hybrid.HybridExtensionType`](#sqlalchemy.ext.hybrid.HybridExtensionType
    "sqlalchemy.ext.hybrid.HybridExtensionType") ([`sqlalchemy.orm.base.InspectionAttrExtensionType`](../internals.html#sqlalchemy.orm.InspectionAttrExtensionType
    "sqlalchemy.orm.base.InspectionAttrExtensionType"))
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.ext.hybrid.HybridExtensionType`](#sqlalchemy.ext.hybrid.HybridExtensionType
    "sqlalchemy.ext.hybrid.HybridExtensionType") ([`sqlalchemy.orm.base.InspectionAttrExtensionType`](../internals.html#sqlalchemy.orm.InspectionAttrExtensionType
    "sqlalchemy.orm.base.InspectionAttrExtensionType"))
- en: '[PRE54]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Symbol indicating an `InspectionAttr` that’s of type [`hybrid_method`](#sqlalchemy.ext.hybrid.hybrid_method
    "sqlalchemy.ext.hybrid.hybrid_method").
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一个`InspectionAttr`的符号，其类型为[`hybrid_method`](#sqlalchemy.ext.hybrid.hybrid_method
    "sqlalchemy.ext.hybrid.hybrid_method")。
- en: Is assigned to the [`InspectionAttr.extension_type`](../internals.html#sqlalchemy.orm.InspectionAttr.extension_type
    "sqlalchemy.orm.InspectionAttr.extension_type") attribute.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 被赋予[`InspectionAttr.extension_type`](../internals.html#sqlalchemy.orm.InspectionAttr.extension_type
    "sqlalchemy.orm.InspectionAttr.extension_type")属性。
- en: See also
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '`Mapper.all_orm_attributes`'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '`Mapper.all_orm_attributes`'
- en: '[PRE55]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Symbol indicating an `InspectionAttr` that’s
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一个`InspectionAttr`的符号
- en: of type [`hybrid_method`](#sqlalchemy.ext.hybrid.hybrid_method "sqlalchemy.ext.hybrid.hybrid_method").
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 类型为[`hybrid_method`](#sqlalchemy.ext.hybrid.hybrid_method "sqlalchemy.ext.hybrid.hybrid_method")。
- en: Is assigned to the [`InspectionAttr.extension_type`](../internals.html#sqlalchemy.orm.InspectionAttr.extension_type
    "sqlalchemy.orm.InspectionAttr.extension_type") attribute.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 被赋予[`InspectionAttr.extension_type`](../internals.html#sqlalchemy.orm.InspectionAttr.extension_type
    "sqlalchemy.orm.InspectionAttr.extension_type")属性。
- en: See also
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '`Mapper.all_orm_attributes`'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '`Mapper.all_orm_attributes`'
- en: '## Defining Expression Behavior Distinct from Attribute Behavior'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '## 定义与属性行为不同的表达行为'
- en: 'In the previous section, our usage of the `&` and `|` bitwise operators within
    the `Interval.contains` and `Interval.intersects` methods was fortunate, considering
    our functions operated on two boolean values to return a new one. In many cases,
    the construction of an in-Python function and a SQLAlchemy SQL expression have
    enough differences that two separate Python expressions should be defined. The
    [`hybrid`](#module-sqlalchemy.ext.hybrid "sqlalchemy.ext.hybrid") decorator defines
    a **modifier** [`hybrid_property.expression()`](#sqlalchemy.ext.hybrid.hybrid_property.expression
    "sqlalchemy.ext.hybrid.hybrid_property.expression") for this purpose. As an example
    we’ll define the radius of the interval, which requires the usage of the absolute
    value function:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一节中，我们在`Interval.contains`和`Interval.intersects`方法中使用`&`和`|`位运算符是幸运的，考虑到我们的函数操作两个布尔值以返回一个新值。在许多情况下，一个在Python函数和SQLAlchemy
    SQL表达式之间有足够差异的情况下，应该定义两个单独的Python表达式。[`hybrid`](#module-sqlalchemy.ext.hybrid
    "sqlalchemy.ext.hybrid")装饰器为此目的定义了一个**修饰符**[`hybrid_property.expression()`](#sqlalchemy.ext.hybrid.hybrid_property.expression
    "sqlalchemy.ext.hybrid.hybrid_property.expression")。作为示例，我们将定义间隔的半径，这需要使用绝对值函数：
- en: '[PRE56]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: In the above example, the [`hybrid_property`](#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property") first assigned to the name `Interval.radius`
    is amended by a subsequent method called `Interval._radius_expression`, using
    the decorator `@radius.inplace.expression`, which chains together two modifiers
    [`hybrid_property.inplace`](#sqlalchemy.ext.hybrid.hybrid_property.inplace "sqlalchemy.ext.hybrid.hybrid_property.inplace")
    and [`hybrid_property.expression`](#sqlalchemy.ext.hybrid.hybrid_property.expression
    "sqlalchemy.ext.hybrid.hybrid_property.expression"). The use of [`hybrid_property.inplace`](#sqlalchemy.ext.hybrid.hybrid_property.inplace
    "sqlalchemy.ext.hybrid.hybrid_property.inplace") indicates that the [`hybrid_property.expression()`](#sqlalchemy.ext.hybrid.hybrid_property.expression
    "sqlalchemy.ext.hybrid.hybrid_property.expression") modifier should mutate the
    existing hybrid object at `Interval.radius` in place, without creating a new object.
    Notes on this modifier and its rationale are discussed in the next section [Using
    inplace to create pep-484 compliant hybrid properties](#hybrid-pep484-naming).
    The use of `@classmethod` is optional, and is strictly to give typing tools a
    hint that `cls` in this case is expected to be the `Interval` class, and not an
    instance of `Interval`.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，首先将 [`hybrid_property`](#sqlalchemy.ext.hybrid.hybrid_property "sqlalchemy.ext.hybrid.hybrid_property")
    分配给名称 `Interval.radius`，然后通过后续调用名为 `Interval._radius_expression` 的方法，使用装饰器 `@radius.inplace.expression`
    对其进行修改，该装饰器链接了两个修饰符 [`hybrid_property.inplace`](#sqlalchemy.ext.hybrid.hybrid_property.inplace
    "sqlalchemy.ext.hybrid.hybrid_property.inplace") 和 [`hybrid_property.expression`](#sqlalchemy.ext.hybrid.hybrid_property.expression
    "sqlalchemy.ext.hybrid.hybrid_property.expression")。使用 [`hybrid_property.inplace`](#sqlalchemy.ext.hybrid.hybrid_property.inplace
    "sqlalchemy.ext.hybrid.hybrid_property.inplace") 表示 [`hybrid_property.expression()`](#sqlalchemy.ext.hybrid.hybrid_property.expression
    "sqlalchemy.ext.hybrid.hybrid_property.expression") 修饰符应在原地改变 `Interval.radius`
    中的现有混合对象，而不创建新对象。关于此修饰符及其基本原理的说明在下一节中讨论 [使用 inplace 创建符合 pep-484 的混合属性](#hybrid-pep484-naming)。使用
    `@classmethod` 是可选的，并且严格来说是为了给出类型提示，以表明在这种情况下，`cls` 预期是 `Interval` 类，而不是 `Interval`
    的实例。
- en: Note
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '[`hybrid_property.inplace`](#sqlalchemy.ext.hybrid.hybrid_property.inplace
    "sqlalchemy.ext.hybrid.hybrid_property.inplace") as well as the use of `@classmethod`
    for proper typing support are available as of SQLAlchemy 2.0.4, and will not work
    in earlier versions.'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '[`hybrid_property.inplace`](#sqlalchemy.ext.hybrid.hybrid_property.inplace
    "sqlalchemy.ext.hybrid.hybrid_property.inplace") 以及使用 `@classmethod` 以获得正确的类型支持在
    SQLAlchemy 2.0.4 中可用，并且在早期版本中不起作用。'
- en: 'With `Interval.radius` now including an expression element, the SQL function
    `ABS()` is returned when accessing `Interval.radius` at the class level:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，由于 `Interval.radius` 现在包含表达式元素，因此在访问类级别的 `Interval.radius` 时会返回 SQL 函数 `ABS()`：
- en: '[PRE57]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '## Using `inplace` to create pep-484 compliant hybrid properties'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '## 使用 `inplace` 创建符合 pep-484 的混合属性'
- en: In the previous section, a [`hybrid_property`](#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property") decorator is illustrated which includes
    two separate method-level functions being decorated, both to produce a single
    object attribute referenced as `Interval.radius`. There are actually several different
    modifiers we can use for [`hybrid_property`](#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property") including [`hybrid_property.expression()`](#sqlalchemy.ext.hybrid.hybrid_property.expression
    "sqlalchemy.ext.hybrid.hybrid_property.expression"), [`hybrid_property.setter()`](#sqlalchemy.ext.hybrid.hybrid_property.setter
    "sqlalchemy.ext.hybrid.hybrid_property.setter") and [`hybrid_property.update_expression()`](#sqlalchemy.ext.hybrid.hybrid_property.update_expression
    "sqlalchemy.ext.hybrid.hybrid_property.update_expression").
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一节中，演示了一个 [`hybrid_property`](#sqlalchemy.ext.hybrid.hybrid_property "sqlalchemy.ext.hybrid.hybrid_property")
    装饰器，其中包括两个单独的方法级函数被装饰，都用于生成一个名为 `Interval.radius` 的单个对象属性。实际上，我们可以使用几种不同的修饰符来使用
    [`hybrid_property`](#sqlalchemy.ext.hybrid.hybrid_property "sqlalchemy.ext.hybrid.hybrid_property")，包括
    [`hybrid_property.expression()`](#sqlalchemy.ext.hybrid.hybrid_property.expression
    "sqlalchemy.ext.hybrid.hybrid_property.expression")、[`hybrid_property.setter()`](#sqlalchemy.ext.hybrid.hybrid_property.setter
    "sqlalchemy.ext.hybrid.hybrid_property.setter") 和 [`hybrid_property.update_expression()`](#sqlalchemy.ext.hybrid.hybrid_property.update_expression
    "sqlalchemy.ext.hybrid.hybrid_property.update_expression")。
- en: 'SQLAlchemy’s [`hybrid_property`](#sqlalchemy.ext.hybrid.hybrid_property "sqlalchemy.ext.hybrid.hybrid_property")
    decorator intends that adding on these methods may be done in the identical manner
    as Python’s built-in `@property` decorator, where idiomatic use is to continue
    to redefine the attribute repeatedly, using the **same attribute name** each time,
    as in the example below that illustrates the use of [`hybrid_property.setter()`](#sqlalchemy.ext.hybrid.hybrid_property.setter
    "sqlalchemy.ext.hybrid.hybrid_property.setter") and [`hybrid_property.expression()`](#sqlalchemy.ext.hybrid.hybrid_property.expression
    "sqlalchemy.ext.hybrid.hybrid_property.expression") for the `Interval.radius`
    descriptor:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy的 [`hybrid_property`](#sqlalchemy.ext.hybrid.hybrid_property "sqlalchemy.ext.hybrid.hybrid_property")
    装饰器打算通过与Python内置的 `@property` 装饰器相同的方式添加这些方法，其中惯用法是重复重新定义属性，每次使用相同的属性名称，如下面的示例所示，演示了使用
    [`hybrid_property.setter()`](#sqlalchemy.ext.hybrid.hybrid_property.setter "sqlalchemy.ext.hybrid.hybrid_property.setter")
    和 [`hybrid_property.expression()`](#sqlalchemy.ext.hybrid.hybrid_property.expression
    "sqlalchemy.ext.hybrid.hybrid_property.expression") 为 `Interval.radius` 描述符的用法：
- en: '[PRE58]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Above, there are three `Interval.radius` methods, but as each are decorated,
    first by the [`hybrid_property`](#sqlalchemy.ext.hybrid.hybrid_property "sqlalchemy.ext.hybrid.hybrid_property")
    decorator and then by the `@radius` name itself, the end effect is that `Interval.radius`
    is a single attribute with three different functions contained within it. This
    style of use is taken from [Python’s documented use of @property](https://docs.python.org/3/library/functions.html#property).
    It is important to note that the way both `@property` as well as [`hybrid_property`](#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property") work, a **copy of the descriptor is made
    each time**. That is, each call to `@radius.expression`, `@radius.setter` etc.
    make a new object entirely. This allows the attribute to be re-defined in subclasses
    without issue (see [Reusing Hybrid Properties across Subclasses](#hybrid-reuse-subclass)
    later in this section for how this is used).
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 如上，有三个 `Interval.radius` 方法，但是由于每个都被 [`hybrid_property`](#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property") 装饰器和 `@radius` 名称本身装饰，最终的效果是 `Interval.radius`
    是一个包含三个不同函数的单个属性。这种用法风格来自于 [Python的@property的文档用法](https://docs.python.org/3/library/functions.html#property)。需要注意的是，无论是
    `@property` 还是 [`hybrid_property`](#sqlalchemy.ext.hybrid.hybrid_property "sqlalchemy.ext.hybrid.hybrid_property")
    的工作方式，每次都会 **复制描述符**。也就是说，每次调用 `@radius.expression`、`@radius.setter` 等都会完全创建一个新的对象。这使得属性在子类中重新定义时不会出现问题（请参阅本节稍后的
    [在子类之间重用混合属性](#hybrid-reuse-subclass) 来了解如何使用）。
- en: However, the above approach is not compatible with typing tools such as mypy
    and pyright. Python’s own `@property` decorator does not have this limitation
    only because [these tools hardcode the behavior of @property](https://github.com/python/typing/discussions/1102),
    meaning this syntax is not available to SQLAlchemy under [**PEP 484**](https://peps.python.org/pep-0484/)
    compliance.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，上述方法不兼容于诸如 mypy 和 pyright 等类型工具。Python自己的 `@property` 装饰器之所以没有这个限制，仅仅是因为
    [这些工具硬编码了@property的行为](https://github.com/python/typing/discussions/1102)，这意味着这种语法在
    SQLAlchemy 下不符合 [**PEP 484**](https://peps.python.org/pep-0484/) 的规范。
- en: 'In order to produce a reasonable syntax while remaining typing compliant, the
    [`hybrid_property.inplace`](#sqlalchemy.ext.hybrid.hybrid_property.inplace "sqlalchemy.ext.hybrid.hybrid_property.inplace")
    decorator allows the same decorator to be re-used with different method names,
    while still producing a single decorator under one name:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在保持打字兼容的同时产生合理的语法，[`hybrid_property.inplace`](#sqlalchemy.ext.hybrid.hybrid_property.inplace
    "sqlalchemy.ext.hybrid.hybrid_property.inplace") 装饰器允许同一装饰器以不同的方法名称被重复使用，同时仍然产生一个单一的装饰器在一个名称下：
- en: '[PRE59]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Using [`hybrid_property.inplace`](#sqlalchemy.ext.hybrid.hybrid_property.inplace
    "sqlalchemy.ext.hybrid.hybrid_property.inplace") further qualifies the use of
    the decorator that a new copy should not be made, thereby maintaining the `Interval.radius`
    name while allowing additional methods `Interval._radius_setter` and `Interval._radius_expression`
    to be differently named.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [`hybrid_property.inplace`](#sqlalchemy.ext.hybrid.hybrid_property.inplace
    "sqlalchemy.ext.hybrid.hybrid_property.inplace") 进一步限定了装饰器的使用，不应该创建一个新的副本，从而保持了
    `Interval.radius` 名称，同时允许额外的方法 `Interval._radius_setter` 和 `Interval._radius_expression`
    使用不同的名称。
- en: 'New in version 2.0.4: Added [`hybrid_property.inplace`](#sqlalchemy.ext.hybrid.hybrid_property.inplace
    "sqlalchemy.ext.hybrid.hybrid_property.inplace") to allow less verbose construction
    of composite [`hybrid_property`](#sqlalchemy.ext.hybrid.hybrid_property "sqlalchemy.ext.hybrid.hybrid_property")
    objects while not having to use repeated method names. Additionally allowed the
    use of `@classmethod` within [`hybrid_property.expression`](#sqlalchemy.ext.hybrid.hybrid_property.expression
    "sqlalchemy.ext.hybrid.hybrid_property.expression"), [`hybrid_property.update_expression`](#sqlalchemy.ext.hybrid.hybrid_property.update_expression
    "sqlalchemy.ext.hybrid.hybrid_property.update_expression"), and [`hybrid_property.comparator`](#sqlalchemy.ext.hybrid.hybrid_property.comparator
    "sqlalchemy.ext.hybrid.hybrid_property.comparator") to allow typing tools to identify
    `cls` as a class and not an instance in the method signature.'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 版本2.0.4中的新功能：添加[`hybrid_property.inplace`](#sqlalchemy.ext.hybrid.hybrid_property.inplace
    "sqlalchemy.ext.hybrid.hybrid_property.inplace")，以允许更简洁地构建复合[`hybrid_property`](#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property")对象，同时不必重复使用方法名称。此外，允许在[`hybrid_property.expression`](#sqlalchemy.ext.hybrid.hybrid_property.expression
    "sqlalchemy.ext.hybrid.hybrid_property.expression")、[`hybrid_property.update_expression`](#sqlalchemy.ext.hybrid.hybrid_property.update_expression
    "sqlalchemy.ext.hybrid.hybrid_property.update_expression")和[`hybrid_property.comparator`](#sqlalchemy.ext.hybrid.hybrid_property.comparator
    "sqlalchemy.ext.hybrid.hybrid_property.comparator")中使用`@classmethod`，以便允许类型工具将`cls`识别为类而不是方法签名中的实例。
- en: Defining Setters
  id: totrans-232
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义Setter
- en: 'The [`hybrid_property.setter()`](#sqlalchemy.ext.hybrid.hybrid_property.setter
    "sqlalchemy.ext.hybrid.hybrid_property.setter") modifier allows the construction
    of a custom setter method, that can modify values on the object:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '[`hybrid_property.setter()`](#sqlalchemy.ext.hybrid.hybrid_property.setter
    "sqlalchemy.ext.hybrid.hybrid_property.setter")修饰符允许构建自定义setter方法，可以修改对象上的值：'
- en: '[PRE60]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'The `length(self, value)` method is now called upon set:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在设置时调用`length(self, value)`方法：
- en: '[PRE61]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '## Allowing Bulk ORM Update'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '## 允许批量ORM更新'
- en: A hybrid can define a custom “UPDATE” handler for when using ORM-enabled updates,
    allowing the hybrid to be used in the SET clause of the update.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用ORM启用的更新时，混合类型可以为自定义的“UPDATE”处理程序定义处理程序，允许将混合类型用于更新的SET子句中。
- en: 'Normally, when using a hybrid with [`update()`](../../core/dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update"), the SQL expression is used as the column
    that’s the target of the SET. If our `Interval` class had a hybrid `start_point`
    that linked to `Interval.start`, this could be substituted directly:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '通常，当使用[`update()`](../../core/dml.html#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update")与混合类型时，SQL表达式将用作SET的目标列。如果我们的`Interval`类具有链接到`Interval.start`的混合类型`start_point`，则可以直接替换： '
- en: '[PRE62]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'However, when using a composite hybrid like `Interval.length`, this hybrid
    represents more than one column. We can set up a handler that will accommodate
    a value passed in the VALUES expression which can affect this, using the [`hybrid_property.update_expression()`](#sqlalchemy.ext.hybrid.hybrid_property.update_expression
    "sqlalchemy.ext.hybrid.hybrid_property.update_expression") decorator. A handler
    that works similarly to our setter would be:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当使用像`Interval.length`这样的复合混合类型时，这个混合类型代表多于一个列。我们可以设置一个处理程序，该处理程序将适应传递到VALUES表达式中的值，这可能会影响此处理程序，使用[`hybrid_property.update_expression()`](#sqlalchemy.ext.hybrid.hybrid_property.update_expression
    "sqlalchemy.ext.hybrid.hybrid_property.update_expression")装饰器。一个与我们的setter类似的处理程序将是：
- en: '[PRE63]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Above, if we use `Interval.length` in an UPDATE expression, we get a hybrid
    SET expression:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在UPDATE表达式中使用`Interval.length`，我们将获得一个混合类型的SET表达式：
- en: '[PRE64]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: This SET expression is accommodated by the ORM automatically.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 此SET表达式将由ORM自动处理。
- en: See also
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[ORM-Enabled INSERT, UPDATE, and DELETE statements](../queryguide/dml.html#orm-expression-update-delete)
    - includes background on ORM-enabled UPDATE statements'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '[ORM启用的INSERT、UPDATE和DELETE语句](../queryguide/dml.html#orm-expression-update-delete)
    - 包括ORM启用的UPDATE语句的背景信息'
- en: Working with Relationships
  id: totrans-248
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与关系一起工作
- en: There’s no essential difference when creating hybrids that work with related
    objects as opposed to column-based data. The need for distinct expressions tends
    to be greater. The two variants we’ll illustrate are the “join-dependent” hybrid,
    and the “correlated subquery” hybrid.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 创建与基于列的数据相反的与相关对象一起工作的混合类型时，没有本质区别。对于不同的表达式的需求往往更大。我们将说明的两种变体是“join-dependent”混合类型和“correlated
    subquery”混合类型。
- en: Join-Dependent Relationship Hybrid
  id: totrans-250
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Join-Dependent Relationship Hybrid
- en: 'Consider the following declarative mapping which relates a `User` to a `SavingsAccount`:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下将`User`与`SavingsAccount`相关联的声明性映射：
- en: '[PRE65]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: The above hybrid property `balance` works with the first `SavingsAccount` entry
    in the list of accounts for this user. The in-Python getter/setter methods can
    treat `accounts` as a Python list available on `self`.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 上述混合属性`balance`与此用户的账户列表中的第一个`SavingsAccount`条目配合使用。在Python中，getter/setter方法可以将`accounts`视为`self`上可用的Python列表。
- en: Tip
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The `User.balance` getter in the above example accesses the `self.acccounts`
    collection, which will normally be loaded via the [`selectinload()`](../queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload") loader strategy configured on the `User.balance`
    [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship").
    The default loader strategy when not otherwise stated on [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") is [`lazyload()`](../queryguide/relationships.html#sqlalchemy.orm.lazyload
    "sqlalchemy.orm.lazyload"), which emits SQL on demand. When using asyncio, on-demand
    loaders such as [`lazyload()`](../queryguide/relationships.html#sqlalchemy.orm.lazyload
    "sqlalchemy.orm.lazyload") are not supported, so care should be taken to ensure
    the `self.accounts` collection is accessible to this hybrid accessor when using
    asyncio.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示例中的`User.balance` getter访问`self.acccounts`集合，通常会通过配置在`User.balance` [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")上的[`selectinload()`](../queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload")加载策略加载。当未在[`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")上另行说明时，默认加载策略是[`lazyload()`](../queryguide/relationships.html#sqlalchemy.orm.lazyload
    "sqlalchemy.orm.lazyload")，它会按需发出SQL。在使用asyncio时，不支持按需加载程序，因此在使用asyncio时，应确保`self.accounts`集合对此混合访问器可访问。
- en: 'At the expression level, it’s expected that the `User` class will be used in
    an appropriate context such that an appropriate join to `SavingsAccount` will
    be present:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 在表达式级别，预期`User`类将在适当的上下文中使用，以便存在适当的连接到`SavingsAccount`：
- en: '[PRE66]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Note however, that while the instance level accessors need to worry about whether
    `self.accounts` is even present, this issue expresses itself differently at the
    SQL expression level, where we basically would use an outer join:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 但请注意，尽管实例级访问器需要担心`self.accounts`是否存在，但在SQL表达式级别，这个问题表现得不同，基本上我们会使用外连接：
- en: '[PRE67]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Correlated Subquery Relationship Hybrid
  id: totrans-260
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 相关子查询关系混合
- en: 'We can, of course, forego being dependent on the enclosing query’s usage of
    joins in favor of the correlated subquery, which can portably be packed into a
    single column expression. A correlated subquery is more portable, but often performs
    more poorly at the SQL level. Using the same technique illustrated at [Using column_property](../mapped_sql_expr.html#mapper-column-property-sql-expressions),
    we can adjust our `SavingsAccount` example to aggregate the balances for *all*
    accounts, and use a correlated subquery for the column expression:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们可以放弃依赖于连接的查询使用，转而使用相关子查询，这可以方便地打包到单个列表达式中。相关子查询更具可移植性，但在SQL级别通常性能较差。使用与[使用column_property](../mapped_sql_expr.html#mapper-column-property-sql-expressions)中所示技术相同的技术，我们可以调整我们的`SavingsAccount`示例以聚合*所有*账户的余额，并使用相关子查询作为列表达式：
- en: '[PRE68]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'The above recipe will give us the `balance` column which renders a correlated
    SELECT:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 上述配方将为我们提供呈现相关SELECT的`balance`列：
- en: '[PRE69]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Join-Dependent Relationship Hybrid
  id: totrans-265
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接依赖关系混合
- en: 'Consider the following declarative mapping which relates a `User` to a `SavingsAccount`:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下声明性映射，将`User`与`SavingsAccount`相关联：
- en: '[PRE70]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: The above hybrid property `balance` works with the first `SavingsAccount` entry
    in the list of accounts for this user. The in-Python getter/setter methods can
    treat `accounts` as a Python list available on `self`.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 上述混合属性`balance`与此用户的账户列表中的第一个`SavingsAccount`条目配合使用。在Python中，getter/setter方法可以将`accounts`视为`self`上可用的Python列表。
- en: Tip
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The `User.balance` getter in the above example accesses the `self.acccounts`
    collection, which will normally be loaded via the [`selectinload()`](../queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload") loader strategy configured on the `User.balance`
    [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship").
    The default loader strategy when not otherwise stated on [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") is [`lazyload()`](../queryguide/relationships.html#sqlalchemy.orm.lazyload
    "sqlalchemy.orm.lazyload"), which emits SQL on demand. When using asyncio, on-demand
    loaders such as [`lazyload()`](../queryguide/relationships.html#sqlalchemy.orm.lazyload
    "sqlalchemy.orm.lazyload") are not supported, so care should be taken to ensure
    the `self.accounts` collection is accessible to this hybrid accessor when using
    asyncio.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 上面示例中的`User.balance` getter访问了`self.acccounts`集合，这通常会通过在`User.balance` [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")上配置的[`selectinload()`](../queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload")加载器策略进行加载。当没有在其他地方声明[`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")时，默认的加载器策略是[`lazyload()`](../queryguide/relationships.html#sqlalchemy.orm.lazyload
    "sqlalchemy.orm.lazyload")，它按需发出SQL。当使用asyncio时，不支持按需加载器，如[`lazyload()`](../queryguide/relationships.html#sqlalchemy.orm.lazyload
    "sqlalchemy.orm.lazyload")，因此在使用asyncio时应注意确保`self.accounts`集合对此混合访问器是可访问的。
- en: 'At the expression level, it’s expected that the `User` class will be used in
    an appropriate context such that an appropriate join to `SavingsAccount` will
    be present:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 在表达式级别，预计`User`类将在适当的上下文中使用，以便存在适当的连接到`SavingsAccount`：
- en: '[PRE71]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Note however, that while the instance level accessors need to worry about whether
    `self.accounts` is even present, this issue expresses itself differently at the
    SQL expression level, where we basically would use an outer join:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 但请注意，尽管实例级别的访问器需要担心`self.accounts`是否存在，但这个问题在SQL表达式级别上表现得不同，我们基本上会使用外连接：
- en: '[PRE72]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Correlated Subquery Relationship Hybrid
  id: totrans-275
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关联子查询关系混合
- en: 'We can, of course, forego being dependent on the enclosing query’s usage of
    joins in favor of the correlated subquery, which can portably be packed into a
    single column expression. A correlated subquery is more portable, but often performs
    more poorly at the SQL level. Using the same technique illustrated at [Using column_property](../mapped_sql_expr.html#mapper-column-property-sql-expressions),
    we can adjust our `SavingsAccount` example to aggregate the balances for *all*
    accounts, and use a correlated subquery for the column expression:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们可以放弃依赖包含查询中的连接，而倾向于关联子查询，这可以被封装成一个单列表达式。关联子查询更具可移植性，但在SQL级别上通常性能较差。使用在[使用column_property](../mapped_sql_expr.html#mapper-column-property-sql-expressions)中说明的相同技术，我们可以调整我们的`SavingsAccount`示例来聚合*所有*账户的余额，并为列表达式使用关联子查询：
- en: '[PRE73]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'The above recipe will give us the `balance` column which renders a correlated
    SELECT:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的配方将为我们提供一个渲染关联SELECT的`balance`列：
- en: '[PRE74]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '## Building Custom Comparators'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '## 构建自定义比较器'
- en: The hybrid property also includes a helper that allows construction of custom
    comparators. A comparator object allows one to customize the behavior of each
    SQLAlchemy expression operator individually. They are useful when creating custom
    types that have some highly idiosyncratic behavior on the SQL side.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 混合属性还包括一个助手，允许构建自定义比较器。比较器对象允许用户单独定制每个SQLAlchemy表达式操作符的行为。当创建具有一些高度特殊的SQL端行为的自定义类型时，它们非常有用。
- en: Note
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The [`hybrid_property.comparator()`](#sqlalchemy.ext.hybrid.hybrid_property.comparator
    "sqlalchemy.ext.hybrid.hybrid_property.comparator") decorator introduced in this
    section **replaces** the use of the [`hybrid_property.expression()`](#sqlalchemy.ext.hybrid.hybrid_property.expression
    "sqlalchemy.ext.hybrid.hybrid_property.expression") decorator. They cannot be
    used together.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 此部分介绍的[`hybrid_property.comparator()`](#sqlalchemy.ext.hybrid.hybrid_property.comparator
    "sqlalchemy.ext.hybrid.hybrid_property.comparator")装饰器**替换了**[`hybrid_property.expression()`](#sqlalchemy.ext.hybrid.hybrid_property.expression
    "sqlalchemy.ext.hybrid.hybrid_property.expression")装饰器的使用。它们不能一起使用。
- en: 'The example class below allows case-insensitive comparisons on the attribute
    named `word_insensitive`:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的示例类允许在名为`word_insensitive`的属性上进行不区分大小写的比较：
- en: '[PRE75]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Above, SQL expressions against `word_insensitive` will apply the `LOWER()`
    SQL function to both sides:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 上面，针对`word_insensitive`的SQL表达式将对双方都应用`LOWER()` SQL函数：
- en: '[PRE76]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'The `CaseInsensitiveComparator` above implements part of the [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") interface. A “coercion” operation
    like lowercasing can be applied to all comparison operations (i.e. `eq`, `lt`,
    `gt`, etc.) using [`Operators.operate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.operate
    "sqlalchemy.sql.expression.Operators.operate"):'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的`CaseInsensitiveComparator`实现了[`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")接口的一部分。像小写化这样的“强制转换”操作可以应用于所有比较操作（即`eq`、`lt`、`gt`等）使用[`Operators.operate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.operate
    "sqlalchemy.sql.expression.Operators.operate")：
- en: '[PRE77]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '## Reusing Hybrid Properties across Subclasses'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '## 在子类之间重用混合属性'
- en: 'A hybrid can be referred to from a superclass, to allow modifying methods like
    [`hybrid_property.getter()`](#sqlalchemy.ext.hybrid.hybrid_property.getter "sqlalchemy.ext.hybrid.hybrid_property.getter"),
    [`hybrid_property.setter()`](#sqlalchemy.ext.hybrid.hybrid_property.setter "sqlalchemy.ext.hybrid.hybrid_property.setter")
    to be used to redefine those methods on a subclass. This is similar to how the
    standard Python `@property` object works:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 可以从超类中引用混合，以允许修改方法，如[`hybrid_property.getter()`](#sqlalchemy.ext.hybrid.hybrid_property.getter
    "sqlalchemy.ext.hybrid.hybrid_property.getter")、[`hybrid_property.setter()`](#sqlalchemy.ext.hybrid.hybrid_property.setter
    "sqlalchemy.ext.hybrid.hybrid_property.setter")等，用于在子类上重新定义这些方法。这类似于标准的Python
    `@property`对象的工作方式：
- en: '[PRE78]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: Above, the `FirstNameLastName` class refers to the hybrid from `FirstNameOnly.name`
    to repurpose its getter and setter for the subclass.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 上面，`FirstNameLastName`类引用了从`FirstNameOnly.name`到混合的混合，以重新用于子类的getter和setter。
- en: 'When overriding [`hybrid_property.expression()`](#sqlalchemy.ext.hybrid.hybrid_property.expression
    "sqlalchemy.ext.hybrid.hybrid_property.expression") and [`hybrid_property.comparator()`](#sqlalchemy.ext.hybrid.hybrid_property.comparator
    "sqlalchemy.ext.hybrid.hybrid_property.comparator") alone as the first reference
    to the superclass, these names conflict with the same-named accessors on the class-
    level [`QueryableAttribute`](../internals.html#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute") object returned at the class level. To override
    these methods when referring directly to the parent class descriptor, add the
    special qualifier [`hybrid_property.overrides`](#sqlalchemy.ext.hybrid.hybrid_property.overrides
    "sqlalchemy.ext.hybrid.hybrid_property.overrides"), which will de- reference the
    instrumented attribute back to the hybrid object:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 当仅覆盖[`hybrid_property.expression()`](#sqlalchemy.ext.hybrid.hybrid_property.expression
    "sqlalchemy.ext.hybrid.hybrid_property.expression")和[`hybrid_property.comparator()`](#sqlalchemy.ext.hybrid.hybrid_property.comparator
    "sqlalchemy.ext.hybrid.hybrid_property.comparator")作为对超类的第一引用时，这些名称与在类级别返回的类级别[`QueryableAttribute`](../internals.html#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute")对象上的同名访问器发生冲突。要在直接引用父类描述符时覆盖这些方法，请添加特殊限定符[`hybrid_property.overrides`](#sqlalchemy.ext.hybrid.hybrid_property.overrides
    "sqlalchemy.ext.hybrid.hybrid_property.overrides")，它将将被仪器化的属性反向引用回混合对象：
- en: '[PRE79]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: Hybrid Value Objects
  id: totrans-296
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 混合值对象
- en: Note in our previous example, if we were to compare the `word_insensitive` attribute
    of a `SearchWord` instance to a plain Python string, the plain Python string would
    not be coerced to lower case - the `CaseInsensitiveComparator` we built, being
    returned by `@word_insensitive.comparator`, only applies to the SQL side.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在我们之前的示例中，如果我们将`SearchWord`实例的`word_insensitive`属性与普通的Python字符串进行比较，普通的Python字符串不会被强制转换为小写
    - 我们构建的`CaseInsensitiveComparator`，由`@word_insensitive.comparator`返回，仅适用于SQL端。
- en: 'A more comprehensive form of the custom comparator is to construct a *Hybrid
    Value Object*. This technique applies the target value or expression to a value
    object which is then returned by the accessor in all cases. The value object allows
    control of all operations upon the value as well as how compared values are treated,
    both on the SQL expression side as well as the Python value side. Replacing the
    previous `CaseInsensitiveComparator` class with a new `CaseInsensitiveWord` class:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义比较器的更全面形式是构建一个*混合值对象*。这种技术将目标值或表达式应用于一个值对象，然后该值对象在所有情况下由访问器返回。值对象允许控制对值的所有操作以及如何处理比较值，无论是在SQL表达式端还是Python值端。用新的`CaseInsensitiveWord`类替换之前的`CaseInsensitiveComparator`类：
- en: '[PRE80]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'Above, the `CaseInsensitiveWord` object represents `self.word`, which may be
    a SQL function, or may be a Python native. By overriding `operate()` and `__clause_element__()`
    to work in terms of `self.word`, all comparison operations will work against the
    “converted” form of `word`, whether it be SQL side or Python side. Our `SearchWord`
    class can now deliver the `CaseInsensitiveWord` object unconditionally from a
    single hybrid call:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 在上文中，`CaseInsensitiveWord` 对象表示 `self.word`，它可能是一个 SQL 函数，也可能是一个 Python 本地函数。通过重写
    `operate()` 和 `__clause_element__()` 方法，以 `self.word` 为基础进行操作，所有比较操作都将针对 `word`
    的“转换”形式进行，无论是在 SQL 还是 Python 方面。我们的 `SearchWord` 类现在可以通过单一的混合调用无条件地提供 `CaseInsensitiveWord`
    对象：
- en: '[PRE81]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'The `word_insensitive` attribute now has case-insensitive comparison behavior
    universally, including SQL expression vs. Python expression (note the Python value
    is converted to lower case on the Python side here):'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '`word_insensitive` 属性现在具有普遍的不区分大小写的比较行为，包括 SQL 表达式与 Python 表达式（请注意此处的 Python
    值在 Python 侧被转换为小写）：'
- en: '[PRE82]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'SQL expression versus SQL expression:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 表达式与 SQL 表达式：
- en: '[PRE83]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'Python only expression:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: Python 只有表达式：
- en: '[PRE84]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: The Hybrid Value pattern is very useful for any kind of value that may have
    multiple representations, such as timestamps, time deltas, units of measurement,
    currencies and encrypted passwords.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 混合值模式对于任何可能具有多个表示形式的值非常有用，例如时间戳、时间间隔、测量单位、货币和加密密码等。
- en: See also
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Hybrids and Value Agnostic Types](https://techspot.zzzeek.org/2011/10/21/hybrids-and-value-agnostic-types/)
    - on the techspot.zzzeek.org blog'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '[混合类型和值无关类型](https://techspot.zzzeek.org/2011/10/21/hybrids-and-value-agnostic-types/)
    - 在 techspot.zzzeek.org 博客上'
- en: '[Value Agnostic Types, Part II](https://techspot.zzzeek.org/2011/10/29/value-agnostic-types-part-ii/)
    - on the techspot.zzzeek.org blog'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: '[值无关类型，第二部分](https://techspot.zzzeek.org/2011/10/29/value-agnostic-types-part-ii/)
    - 在 techspot.zzzeek.org 博客上'
- en: API Reference
  id: totrans-312
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: API 参考
- en: '| Object Name | Description |'
  id: totrans-313
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-314
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [Comparator](#sqlalchemy.ext.hybrid.Comparator) | A helper class that allows
    easy construction of custom [`PropComparator`](../internals.html#sqlalchemy.orm.PropComparator
    "sqlalchemy.orm.interfaces.PropComparator") classes for usage with hybrids. |'
  id: totrans-315
  prefs: []
  type: TYPE_TB
  zh: '| [Comparator](#sqlalchemy.ext.hybrid.Comparator) | 一个辅助类，允许轻松构建用于混合类型的自定义
    [`PropComparator`](../internals.html#sqlalchemy.orm.PropComparator "sqlalchemy.orm.interfaces.PropComparator")
    类。 |'
- en: '| [hybrid_method](#sqlalchemy.ext.hybrid.hybrid_method) | A decorator which
    allows definition of a Python object method with both instance-level and class-level
    behavior. |'
  id: totrans-316
  prefs: []
  type: TYPE_TB
  zh: '| [hybrid_method](#sqlalchemy.ext.hybrid.hybrid_method) | 允许定义具有实例级和类级行为的 Python
    对象方法的装饰器。 |'
- en: '| [hybrid_property](#sqlalchemy.ext.hybrid.hybrid_property) | A decorator which
    allows definition of a Python descriptor with both instance-level and class-level
    behavior. |'
  id: totrans-317
  prefs: []
  type: TYPE_TB
  zh: '| [hybrid_property](#sqlalchemy.ext.hybrid.hybrid_property) | 允许定义具有实例级和类级行为的
    Python 描述符的装饰器。 |'
- en: '| [HybridExtensionType](#sqlalchemy.ext.hybrid.HybridExtensionType) | An enumeration.
    |'
  id: totrans-318
  prefs: []
  type: TYPE_TB
  zh: '| [HybridExtensionType](#sqlalchemy.ext.hybrid.HybridExtensionType) | 枚举类型。
    |'
- en: '[PRE85]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: A decorator which allows definition of a Python object method with both instance-level
    and class-level behavior.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 允许定义具有实例级和类级行为的 Python 对象方法的装饰器。
- en: '**Members**'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.ext.hybrid.hybrid_method.__init__), [expression()](#sqlalchemy.ext.hybrid.hybrid_method.expression),
    [extension_type](#sqlalchemy.ext.hybrid.hybrid_method.extension_type), [inplace](#sqlalchemy.ext.hybrid.hybrid_method.inplace),
    [is_attribute](#sqlalchemy.ext.hybrid.hybrid_method.is_attribute)'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.ext.hybrid.hybrid_method.__init__), [expression()](#sqlalchemy.ext.hybrid.hybrid_method.expression),
    [extension_type](#sqlalchemy.ext.hybrid.hybrid_method.extension_type), [inplace](#sqlalchemy.ext.hybrid.hybrid_method.inplace),
    [is_attribute](#sqlalchemy.ext.hybrid.hybrid_method.is_attribute)'
- en: '**Class signature**'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.ext.hybrid.hybrid_method`](#sqlalchemy.ext.hybrid.hybrid_method
    "sqlalchemy.ext.hybrid.hybrid_method") ([`sqlalchemy.orm.base.InspectionAttrInfo`](../internals.html#sqlalchemy.orm.InspectionAttrInfo
    "sqlalchemy.orm.base.InspectionAttrInfo"), `typing.Generic`)
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.ext.hybrid.hybrid_method`](#sqlalchemy.ext.hybrid.hybrid_method
    "sqlalchemy.ext.hybrid.hybrid_method") ([`sqlalchemy.orm.base.InspectionAttrInfo`](../internals.html#sqlalchemy.orm.InspectionAttrInfo
    "sqlalchemy.orm.base.InspectionAttrInfo"), `typing.Generic`)
- en: '[PRE86]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: Create a new [`hybrid_method`](#sqlalchemy.ext.hybrid.hybrid_method "sqlalchemy.ext.hybrid.hybrid_method").
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的 [`hybrid_method`](#sqlalchemy.ext.hybrid.hybrid_method "sqlalchemy.ext.hybrid.hybrid_method")。
- en: 'Usage is typically via decorator:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 通常使用装饰器：
- en: '[PRE87]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[PRE88]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: Provide a modifying decorator that defines a SQL-expression producing method.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 提供一个修改装饰器，定义一个生成 SQL 表达式的方法。
- en: '[PRE89]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: The extension type, if any. Defaults to `NotExtension.NOT_EXTENSION`
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展类型（如果有）。默认为 `NotExtension.NOT_EXTENSION`
- en: See also
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`HybridExtensionType`](#sqlalchemy.ext.hybrid.HybridExtensionType "sqlalchemy.ext.hybrid.HybridExtensionType")'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '[`HybridExtensionType`](#sqlalchemy.ext.hybrid.HybridExtensionType "sqlalchemy.ext.hybrid.HybridExtensionType")'
- en: '[`AssociationProxyExtensionType`](associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxyExtensionType
    "sqlalchemy.ext.associationproxy.AssociationProxyExtensionType")'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AssociationProxyExtensionType`](associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxyExtensionType
    "sqlalchemy.ext.associationproxy.AssociationProxyExtensionType")'
- en: '[PRE90]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: Return the inplace mutator for this [`hybrid_method`](#sqlalchemy.ext.hybrid.hybrid_method
    "sqlalchemy.ext.hybrid.hybrid_method").
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此 [`hybrid_method`](#sqlalchemy.ext.hybrid.hybrid_method "sqlalchemy.ext.hybrid.hybrid_method")
    的 inplace mutator。
- en: The [`hybrid_method`](#sqlalchemy.ext.hybrid.hybrid_method "sqlalchemy.ext.hybrid.hybrid_method")
    class already performs “in place” mutation when the [`hybrid_method.expression()`](#sqlalchemy.ext.hybrid.hybrid_method.expression
    "sqlalchemy.ext.hybrid.hybrid_method.expression") decorator is called, so this
    attribute returns Self.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用 [`hybrid_method.expression()`](#sqlalchemy.ext.hybrid.hybrid_method.expression
    "sqlalchemy.ext.hybrid.hybrid_method.expression") 装饰器时，[`hybrid_method`](#sqlalchemy.ext.hybrid.hybrid_method
    "sqlalchemy.ext.hybrid.hybrid_method") 类已经执行“in place”变异，因此此属性返回 Self。
- en: New in version 2.0.4.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0.4 版中的新功能。
- en: See also
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using inplace to create pep-484 compliant hybrid properties](#hybrid-pep484-naming)'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 inplace 创建符合 pep-484 标准的混合属性（#hybrid-pep484-naming）
- en: '[PRE91]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: True if this object is a Python [descriptor](../../glossary.html#term-descriptor).
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此对象是 Python [描述符](../../glossary.html#term-descriptor)，则为 True。
- en: This can refer to one of many types. Usually a [`QueryableAttribute`](../internals.html#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute") which handles attributes events on behalf
    of a [`MapperProperty`](../internals.html#sqlalchemy.orm.MapperProperty "sqlalchemy.orm.MapperProperty").
    But can also be an extension type such as [`AssociationProxy`](associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") or [`hybrid_property`](#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property"). The [`InspectionAttr.extension_type`](../internals.html#sqlalchemy.orm.InspectionAttr.extension_type
    "sqlalchemy.orm.InspectionAttr.extension_type") will refer to a constant identifying
    the specific subtype.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能是许多类型之一。通常是一个 [`QueryableAttribute`](../internals.html#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute")，它代表一个 [`MapperProperty`](../internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty") 上的属性事件。但也可以是一个扩展类型，例如 [`AssociationProxy`](associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") 或 [`hybrid_property`](#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property")。[`InspectionAttr.extension_type`](../internals.html#sqlalchemy.orm.InspectionAttr.extension_type
    "sqlalchemy.orm.InspectionAttr.extension_type") 将指示一个常量，用于标识特定的子类型。
- en: See also
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Mapper.all_orm_descriptors`](../mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors")'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Mapper.all_orm_descriptors`](../mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors")'
- en: '[PRE92]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: A decorator which allows definition of a Python descriptor with both instance-level
    and class-level behavior.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 一个装饰器，允许定义既有实例级别又有类级别行为的 Python 描述符。
- en: '**Members**'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.ext.hybrid.hybrid_property.__init__), [comparator()](#sqlalchemy.ext.hybrid.hybrid_property.comparator),
    [deleter()](#sqlalchemy.ext.hybrid.hybrid_property.deleter), [expression()](#sqlalchemy.ext.hybrid.hybrid_property.expression),
    [extension_type](#sqlalchemy.ext.hybrid.hybrid_property.extension_type), [getter()](#sqlalchemy.ext.hybrid.hybrid_property.getter),
    [inplace](#sqlalchemy.ext.hybrid.hybrid_property.inplace), [is_attribute](#sqlalchemy.ext.hybrid.hybrid_property.is_attribute),
    [overrides](#sqlalchemy.ext.hybrid.hybrid_property.overrides), [setter()](#sqlalchemy.ext.hybrid.hybrid_property.setter),
    [update_expression()](#sqlalchemy.ext.hybrid.hybrid_property.update_expression)'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.ext.hybrid.hybrid_property.__init__), [comparator()](#sqlalchemy.ext.hybrid.hybrid_property.comparator),
    [deleter()](#sqlalchemy.ext.hybrid.hybrid_property.deleter), [expression()](#sqlalchemy.ext.hybrid.hybrid_property.expression),
    [extension_type](#sqlalchemy.ext.hybrid.hybrid_property.extension_type), [getter()](#sqlalchemy.ext.hybrid.hybrid_property.getter),
    [inplace](#sqlalchemy.ext.hybrid.hybrid_property.inplace), [is_attribute](#sqlalchemy.ext.hybrid.hybrid_property.is_attribute),
    [overrides](#sqlalchemy.ext.hybrid.hybrid_property.overrides), [setter()](#sqlalchemy.ext.hybrid.hybrid_property.setter),
    [update_expression()](#sqlalchemy.ext.hybrid.hybrid_property.update_expression)'
- en: '**Class signature**'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.ext.hybrid.hybrid_property`](#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property") ([`sqlalchemy.orm.base.InspectionAttrInfo`](../internals.html#sqlalchemy.orm.InspectionAttrInfo
    "sqlalchemy.orm.base.InspectionAttrInfo"), `sqlalchemy.orm.base.ORMDescriptor`)
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.ext.hybrid.hybrid_property`](#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property")（[`sqlalchemy.orm.base.InspectionAttrInfo`](../internals.html#sqlalchemy.orm.InspectionAttrInfo
    "sqlalchemy.orm.base.InspectionAttrInfo"), `sqlalchemy.orm.base.ORMDescriptor`)
- en: '[PRE93]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: Create a new [`hybrid_property`](#sqlalchemy.ext.hybrid.hybrid_property "sqlalchemy.ext.hybrid.hybrid_property").
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的[`hybrid_property`](#sqlalchemy.ext.hybrid.hybrid_property "sqlalchemy.ext.hybrid.hybrid_property")。
- en: 'Usage is typically via decorator:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 通常通过装饰器来使用：
- en: '[PRE94]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: Provide a modifying decorator that defines a custom comparator producing method.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 提供一个修改装饰器，定义一个自定义比较器生成方法。
- en: The return value of the decorated method should be an instance of [`Comparator`](#sqlalchemy.ext.hybrid.Comparator
    "sqlalchemy.ext.hybrid.Comparator").
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 被装饰方法的返回值应该是[`Comparator`](#sqlalchemy.ext.hybrid.Comparator "sqlalchemy.ext.hybrid.Comparator")的一个实例。
- en: Note
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The [`hybrid_property.comparator()`](#sqlalchemy.ext.hybrid.hybrid_property.comparator
    "sqlalchemy.ext.hybrid.hybrid_property.comparator") decorator **replaces** the
    use of the [`hybrid_property.expression()`](#sqlalchemy.ext.hybrid.hybrid_property.expression
    "sqlalchemy.ext.hybrid.hybrid_property.expression") decorator. They cannot be
    used together.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: '[`hybrid_property.comparator()`](#sqlalchemy.ext.hybrid.hybrid_property.comparator
    "sqlalchemy.ext.hybrid.hybrid_property.comparator")装饰器**替换**了[`hybrid_property.expression()`](#sqlalchemy.ext.hybrid.hybrid_property.expression
    "sqlalchemy.ext.hybrid.hybrid_property.expression")装饰器的使用。它们不能同时使用。'
- en: When a hybrid is invoked at the class level, the [`Comparator`](#sqlalchemy.ext.hybrid.Comparator
    "sqlalchemy.ext.hybrid.Comparator") object given here is wrapped inside of a specialized
    [`QueryableAttribute`](../internals.html#sqlalchemy.orm.QueryableAttribute "sqlalchemy.orm.QueryableAttribute"),
    which is the same kind of object used by the ORM to represent other mapped attributes.
    The reason for this is so that other class-level attributes such as docstrings
    and a reference to the hybrid itself may be maintained within the structure that’s
    returned, without any modifications to the original comparator object passed in.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 当在类级别调用混合属性时，此处给出的[`Comparator`](#sqlalchemy.ext.hybrid.Comparator "sqlalchemy.ext.hybrid.Comparator")对象被包装在一个专门的[`QueryableAttribute`](../internals.html#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute")中，这是ORM用来表示其他映射属性的相同类型的对象。这样做的原因是为了在返回的结构中保留其他类级别属性，如文档字符串和对混合属性本身的引用，而不对传入的原始比较器对象进行任何修改。
- en: Note
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: When referring to a hybrid property from an owning class (e.g. `SomeClass.some_hybrid`),
    an instance of [`QueryableAttribute`](../internals.html#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute") is returned, representing the expression
    or comparator object as this hybrid object. However, that object itself has accessors
    called `expression` and `comparator`; so when attempting to override these decorators
    on a subclass, it may be necessary to qualify it using the [`hybrid_property.overrides`](#sqlalchemy.ext.hybrid.hybrid_property.overrides
    "sqlalchemy.ext.hybrid.hybrid_property.overrides") modifier first. See that modifier
    for details.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 当从拥有类引用混合属性时（例如`SomeClass.some_hybrid`），返回一个[`QueryableAttribute`](../internals.html#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute")的实例，表示表达式或比较器对象作为这个混合对象。然而，该对象本身有名为`expression`和`comparator`的访问器；因此，在子类中尝试覆盖这些装饰器时，可能需要首先使用[`hybrid_property.overrides`](#sqlalchemy.ext.hybrid.hybrid_property.overrides
    "sqlalchemy.ext.hybrid.hybrid_property.overrides")修饰符进行限定。有关详细信息，请参阅该修饰符。
- en: '[PRE96]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: Provide a modifying decorator that defines a deletion method.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 提供一个修改装饰器，定义一个删除方法。
- en: '[PRE97]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: Provide a modifying decorator that defines a SQL-expression producing method.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 提供一个修改装饰器，定义一个生成SQL表达式的方法。
- en: When a hybrid is invoked at the class level, the SQL expression given here is
    wrapped inside of a specialized [`QueryableAttribute`](../internals.html#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute"), which is the same kind of object used by
    the ORM to represent other mapped attributes. The reason for this is so that other
    class-level attributes such as docstrings and a reference to the hybrid itself
    may be maintained within the structure that’s returned, without any modifications
    to the original SQL expression passed in.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 当在类级别调用混合时，此处给出的 SQL 表达式将包装在一个专门的 [`QueryableAttribute`](../internals.html#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute") 中，该对象与 ORM 用于表示其他映射属性的对象相同。这样做的原因是为了在返回的结构中保持其他类级别属性（如文档字符串和对混合本身的引用），而不对传入的原始
    SQL 表达式进行任何修改。
- en: Note
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: When referring to a hybrid property from an owning class (e.g. `SomeClass.some_hybrid`),
    an instance of [`QueryableAttribute`](../internals.html#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute") is returned, representing the expression
    or comparator object as well as this hybrid object. However, that object itself
    has accessors called `expression` and `comparator`; so when attempting to override
    these decorators on a subclass, it may be necessary to qualify it using the [`hybrid_property.overrides`](#sqlalchemy.ext.hybrid.hybrid_property.overrides
    "sqlalchemy.ext.hybrid.hybrid_property.overrides") modifier first. See that modifier
    for details.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 当从拥有类引用混合属性时（例如 `SomeClass.some_hybrid`），会返回一个 [`QueryableAttribute`](../internals.html#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute") 的实例，表示表达式或比较器对象以及此混合对象。然而，该对象本身有名为 `expression`
    和 `comparator` 的访问器；因此，在尝试在子类上覆盖这些装饰器时，可能需要首先使用 [`hybrid_property.overrides`](#sqlalchemy.ext.hybrid.hybrid_property.overrides
    "sqlalchemy.ext.hybrid.hybrid_property.overrides") 修饰符进行限定。详情请参阅该修饰符。
- en: See also
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[Defining Expression Behavior Distinct from Attribute Behavior](#hybrid-distinct-expression)'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: '[定义与属性行为不同的表达式行为](#hybrid-distinct-expression)'
- en: '[PRE98]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: The extension type, if any. Defaults to `NotExtension.NOT_EXTENSION`
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展类型，如果有的话。默认为 `NotExtension.NOT_EXTENSION`
- en: See also
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`HybridExtensionType`](#sqlalchemy.ext.hybrid.HybridExtensionType "sqlalchemy.ext.hybrid.HybridExtensionType")'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: '[`HybridExtensionType`](#sqlalchemy.ext.hybrid.HybridExtensionType "sqlalchemy.ext.hybrid.HybridExtensionType")'
- en: '[`AssociationProxyExtensionType`](associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxyExtensionType
    "sqlalchemy.ext.associationproxy.AssociationProxyExtensionType")'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AssociationProxyExtensionType`](associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxyExtensionType
    "sqlalchemy.ext.associationproxy.AssociationProxyExtensionType")'
- en: '[PRE99]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: Provide a modifying decorator that defines a getter method.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 提供一个修改装饰器，定义一个 getter 方法。
- en: New in version 1.2.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 自 1.2 版新功能。
- en: '[PRE100]'
  id: totrans-382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: Return the inplace mutator for this [`hybrid_property`](#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property").
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此 [`hybrid_property`](#sqlalchemy.ext.hybrid.hybrid_property "sqlalchemy.ext.hybrid.hybrid_property")
    的 inplace mutator。
- en: 'This is to allow in-place mutation of the hybrid, allowing the first hybrid
    method of a certain name to be re-used in order to add more methods without having
    to name those methods the same, e.g.:'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 这是为了允许对混合进行原地变异，从而允许重用某个特定名称的第一个混合方法以添加更多方法，而无需将这些方法命名为相同的名称，例如：
- en: '[PRE101]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: New in version 2.0.4.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 自 2.0.4 版新功能。
- en: See also
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[Using inplace to create pep-484 compliant hybrid properties](#hybrid-pep484-naming)'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 inplace 创建符合 pep-484 的混合属性](#hybrid-pep484-naming)'
- en: '[PRE102]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: True if this object is a Python [descriptor](../../glossary.html#term-descriptor).
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此对象是 Python [描述符](../../glossary.html#term-descriptor)，则为 True。
- en: This can refer to one of many types. Usually a [`QueryableAttribute`](../internals.html#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute") which handles attributes events on behalf
    of a [`MapperProperty`](../internals.html#sqlalchemy.orm.MapperProperty "sqlalchemy.orm.MapperProperty").
    But can also be an extension type such as [`AssociationProxy`](associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") or [`hybrid_property`](#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property"). The [`InspectionAttr.extension_type`](../internals.html#sqlalchemy.orm.InspectionAttr.extension_type
    "sqlalchemy.orm.InspectionAttr.extension_type") will refer to a constant identifying
    the specific subtype.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以指代许多类型之一。通常是一个 [`QueryableAttribute`](../internals.html#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute")，它代表一个 [`MapperProperty`](../internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty") 的属性事件。但也可以是一个扩展类型，如 [`AssociationProxy`](associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") 或 [`hybrid_property`](#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property")。[`InspectionAttr.extension_type`](../internals.html#sqlalchemy.orm.InspectionAttr.extension_type
    "sqlalchemy.orm.InspectionAttr.extension_type") 将引用一个常量，用于标识特定的子类型。
- en: See also
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Mapper.all_orm_descriptors`](../mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors")'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Mapper.all_orm_descriptors`](../mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors")'
- en: '[PRE103]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: Prefix for a method that is overriding an existing attribute.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 用于覆盖现有属性的方法的前缀。
- en: 'The [`hybrid_property.overrides`](#sqlalchemy.ext.hybrid.hybrid_property.overrides
    "sqlalchemy.ext.hybrid.hybrid_property.overrides") accessor just returns this
    hybrid object, which when called at the class level from a parent class, will
    de-reference the “instrumented attribute” normally returned at this level, and
    allow modifying decorators like [`hybrid_property.expression()`](#sqlalchemy.ext.hybrid.hybrid_property.expression
    "sqlalchemy.ext.hybrid.hybrid_property.expression") and [`hybrid_property.comparator()`](#sqlalchemy.ext.hybrid.hybrid_property.comparator
    "sqlalchemy.ext.hybrid.hybrid_property.comparator") to be used without conflicting
    with the same-named attributes normally present on the [`QueryableAttribute`](../internals.html#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute"):'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: '[`hybrid_property.overrides`](#sqlalchemy.ext.hybrid.hybrid_property.overrides
    "sqlalchemy.ext.hybrid.hybrid_property.overrides") 访问器只是返回这个混合对象，当在父类的类级别调用时，将取消引用通常在此级别返回的“instrumented
    attribute”，并允许修改装饰器，如 [`hybrid_property.expression()`](#sqlalchemy.ext.hybrid.hybrid_property.expression
    "sqlalchemy.ext.hybrid.hybrid_property.expression") 和 [`hybrid_property.comparator()`](#sqlalchemy.ext.hybrid.hybrid_property.comparator
    "sqlalchemy.ext.hybrid.hybrid_property.comparator") 被使用，而不会与通常存在于 [`QueryableAttribute`](../internals.html#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute") 上的同名属性发生冲突：'
- en: '[PRE104]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: New in version 1.2.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.2 中新增。
- en: See also
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Reusing Hybrid Properties across Subclasses](#hybrid-reuse-subclass)'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: '[在子类中重用混合属性](#hybrid-reuse-subclass)'
- en: '[PRE105]'
  id: totrans-401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: Provide a modifying decorator that defines a setter method.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 提供一个定义 setter 方法的修改装饰器。
- en: '[PRE106]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: Provide a modifying decorator that defines an UPDATE tuple producing method.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 提供一个定义 UPDATE 元组生成方法的修改装饰器。
- en: The method accepts a single value, which is the value to be rendered into the
    SET clause of an UPDATE statement. The method should then process this value into
    individual column expressions that fit into the ultimate SET clause, and return
    them as a sequence of 2-tuples. Each tuple contains a column expression as the
    key and a value to be rendered.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法接受一个值，该值将被渲染到 UPDATE 语句的 SET 子句中。然后该方法应将此值处理为适合最终 SET 子句的单独列表达式，并将它们作为 2
    元组序列返回。每个元组包含一个列表达式作为键和要渲染的值。
- en: 'E.g.:'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE107]'
  id: totrans-407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: New in version 1.2.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.2 中新增。
- en: '[PRE108]'
  id: totrans-409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: A helper class that allows easy construction of custom [`PropComparator`](../internals.html#sqlalchemy.orm.PropComparator
    "sqlalchemy.orm.interfaces.PropComparator") classes for usage with hybrids.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 一个辅助类，允许轻松构建用于混合使用的自定义 [`PropComparator`](../internals.html#sqlalchemy.orm.PropComparator
    "sqlalchemy.orm.interfaces.PropComparator") 类。
- en: '**Class signature**'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.ext.hybrid.Comparator`](#sqlalchemy.ext.hybrid.Comparator
    "sqlalchemy.ext.hybrid.Comparator") ([`sqlalchemy.orm.PropComparator`](../internals.html#sqlalchemy.orm.PropComparator
    "sqlalchemy.orm.PropComparator"))
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.ext.hybrid.Comparator`](#sqlalchemy.ext.hybrid.Comparator
    "sqlalchemy.ext.hybrid.Comparator") ([`sqlalchemy.orm.PropComparator`](../internals.html#sqlalchemy.orm.PropComparator
    "sqlalchemy.orm.PropComparator"))
- en: '[PRE109]'
  id: totrans-413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: An enumeration.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 一个枚举。
- en: '**Members**'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[HYBRID_METHOD](#sqlalchemy.ext.hybrid.HybridExtensionType.HYBRID_METHOD),
    [HYBRID_PROPERTY](#sqlalchemy.ext.hybrid.HybridExtensionType.HYBRID_PROPERTY)'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: '[HYBRID_METHOD](#sqlalchemy.ext.hybrid.HybridExtensionType.HYBRID_METHOD),
    [HYBRID_PROPERTY](#sqlalchemy.ext.hybrid.HybridExtensionType.HYBRID_PROPERTY)'
- en: '**Class signature**'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.ext.hybrid.HybridExtensionType`](#sqlalchemy.ext.hybrid.HybridExtensionType
    "sqlalchemy.ext.hybrid.HybridExtensionType") ([`sqlalchemy.orm.base.InspectionAttrExtensionType`](../internals.html#sqlalchemy.orm.InspectionAttrExtensionType
    "sqlalchemy.orm.base.InspectionAttrExtensionType"))
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.ext.hybrid.HybridExtensionType`](#sqlalchemy.ext.hybrid.HybridExtensionType
    "sqlalchemy.ext.hybrid.HybridExtensionType")（[`sqlalchemy.orm.base.InspectionAttrExtensionType`](../internals.html#sqlalchemy.orm.InspectionAttrExtensionType
    "sqlalchemy.orm.base.InspectionAttrExtensionType")）
- en: '[PRE110]'
  id: totrans-419
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: Symbol indicating an `InspectionAttr` that’s of type [`hybrid_method`](#sqlalchemy.ext.hybrid.hybrid_method
    "sqlalchemy.ext.hybrid.hybrid_method").
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一个`InspectionAttr`的符号，类型为[`hybrid_method`](#sqlalchemy.ext.hybrid.hybrid_method
    "sqlalchemy.ext.hybrid.hybrid_method")
- en: Is assigned to the [`InspectionAttr.extension_type`](../internals.html#sqlalchemy.orm.InspectionAttr.extension_type
    "sqlalchemy.orm.InspectionAttr.extension_type") attribute.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 赋予[`InspectionAttr.extension_type`](../internals.html#sqlalchemy.orm.InspectionAttr.extension_type
    "sqlalchemy.orm.InspectionAttr.extension_type")属性。
- en: See also
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '`Mapper.all_orm_attributes`'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: '`Mapper.all_orm_attributes`'
- en: '[PRE111]'
  id: totrans-424
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: Symbol indicating an `InspectionAttr` that’s
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一个`InspectionAttr`的符号
- en: of type [`hybrid_method`](#sqlalchemy.ext.hybrid.hybrid_method "sqlalchemy.ext.hybrid.hybrid_method").
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 类型为[`hybrid_method`](#sqlalchemy.ext.hybrid.hybrid_method "sqlalchemy.ext.hybrid.hybrid_method")。
- en: Is assigned to the [`InspectionAttr.extension_type`](../internals.html#sqlalchemy.orm.InspectionAttr.extension_type
    "sqlalchemy.orm.InspectionAttr.extension_type") attribute.
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 赋予[`InspectionAttr.extension_type`](../internals.html#sqlalchemy.orm.InspectionAttr.extension_type
    "sqlalchemy.orm.InspectionAttr.extension_type")属性。
- en: See also
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '`Mapper.all_orm_attributes`'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: '`Mapper.all_orm_attributes`'
