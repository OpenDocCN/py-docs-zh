- en: 1.2 Changelog
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1.2 更新日志
- en: 原文：[https://docs.sqlalchemy.org/en/20/changelog/changelog_12.html](https://docs.sqlalchemy.org/en/20/changelog/changelog_12.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/changelog/changelog_12.html](https://docs.sqlalchemy.org/en/20/changelog/changelog_12.html)
- en: 1.2.19
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.2.19
- en: 'Released: April 15, 2019'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2019年4月15日
- en: orm
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a regression in 1.2 due to the introduction of baked queries for relationship
    lazy loaders, where a race condition is created during the generation of the “lazy
    clause” which occurs within a memoized attribute. If two threads initialize the
    memoized attribute concurrently, the baked query could be generated with bind
    parameter keys that are then replaced with new keys by the next run, leading to
    a lazy load query that specifies the related criteria as `None`. The fix establishes
    that the parameter names are fixed before the new clause and parameter objects
    are generated, so that the names are the same every time.
  id: totrans-6
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了1.2版本中由于为关系懒加载器引入烘焙查询而导致的回归，其中在生成“懒惰子句”时创建了竞争条件，该条件发生在一个被记忆的属性内。如果两个线程同时初始化被记忆的属性，则烘焙查询可能会生成带有绑定参数键的查询，然后在下一次运行时用新键替换，导致懒加载查询将相关条件指定为`None`。修复确保在生成新子句和参数对象之前固定参数名称，以便每次名称都相同。
- en: 'References: [#4507](https://www.sqlalchemy.org/trac/ticket/4507)'
  id: totrans-7
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4507](https://www.sqlalchemy.org/trac/ticket/4507)
- en: examples
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples] [bug]**'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[示例] [bug]**'
- en: Fixed bug in large_resultsets example case where a re-named “id” variable due
    to code reformatting caused the test to fail. Pull request courtesy Matt Schuchhardt.
  id: totrans-10
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了大结果集示例中的bug，由于代码重排导致“id”变量重新命名，导致测试失败。感谢Matt Schuchhardt提供的拉取请求。
- en: 'References: [#4528](https://www.sqlalchemy.org/trac/ticket/4528)'
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4528](https://www.sqlalchemy.org/trac/ticket/4528)
- en: engine
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Comparing two objects of [`URL`](../core/engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL") using `__eq__()` did not take port number into consideration,
    two objects differing only by port number were considered equal. Port comparison
    is now added in `__eq__()` method of [`URL`](../core/engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL"), objects differing by port number are now not equal.
    Additionally, `__ne__()` was not implemented for [`URL`](../core/engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL") which caused unexpected result when `!=` was used in
    Python2, since there are no implied relationships among the comparison operators
    in Python2.
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用`__eq__()`比较两个[`URL`](../core/engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")对象时未考虑端口号，只有端口号不同的两个对象被视为相等。现在在[`URL`](../core/engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL")的`__eq__()`方法中添加了端口比较，端口号不同的对象现在不相等。此外，[`URL`](../core/engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL")未实现`__ne__()`，导致在Python2中使用`!=`时出现意外结果，因为在Python2中比较运算符之间没有暗示的关系。
- en: 'References: [#4406](https://www.sqlalchemy.org/trac/ticket/4406)'
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4406](https://www.sqlalchemy.org/trac/ticket/4406)
- en: mssql
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: A commit() is emitted after an isolation level change to SNAPSHOT, as both pyodbc
    and pymssql open an implicit transaction which blocks subsequent SQL from being
    emitted in the current transaction.
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在将隔离级别更改为SNAPSHOT后会发出一个commit()，因为pyodbc和pymssql都会打开一个隐式事务，这会阻止当前事务中发出后续的SQL。
- en: 'References: [#4536](https://www.sqlalchemy.org/trac/ticket/4536)'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4536](https://www.sqlalchemy.org/trac/ticket/4536)
- en: oracle
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Added support for reflection of the [`NCHAR`](../core/type_basics.html#sqlalchemy.types.NCHAR
    "sqlalchemy.types.NCHAR") datatype to the Oracle dialect, and added [`NCHAR`](../core/type_basics.html#sqlalchemy.types.NCHAR
    "sqlalchemy.types.NCHAR") to the list of types exported by the Oracle dialect.
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对Oracle方言反射[`NCHAR`](../core/type_basics.html#sqlalchemy.types.NCHAR "sqlalchemy.types.NCHAR")数据类型的支持，并将[`NCHAR`](../core/type_basics.html#sqlalchemy.types.NCHAR
    "sqlalchemy.types.NCHAR")添加到Oracle方言导出的类型列表中。
- en: 'References: [#4506](https://www.sqlalchemy.org/trac/ticket/4506)'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4506](https://www.sqlalchemy.org/trac/ticket/4506)
- en: 1.2.18
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.2.18
- en: 'Released: February 15, 2019'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2019年2月15日
- en: orm
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a regression in 1.2 where a wildcard/load_only loader option would not
    work correctly against a loader path where of_type() were used to limit to a particular
    subclass. The fix only works for of_type() of a simple subclass so far, not a
    with_polymorphic entity which will be addressed in a separate issue; it is unlikely
    this latter case was working previously.
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 1.2 版本中的一个回归问题，即通配符/load_only加载器选项在加载路径中使用of_type()限制到特定子类时无法正常工作。修复目前仅适用于简单子类的of_type()，而不适用于将在单独问题中解决的with_polymorphic实体；这种后一种情况以前可能不起作用。
- en: 'References: [#4468](https://www.sqlalchemy.org/trac/ticket/4468)'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4468](https://www.sqlalchemy.org/trac/ticket/4468)
- en: '**[orm] [bug]**'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed fairly simple but critical issue where the [`SessionEvents.pending_to_persistent()`](../orm/events.html#sqlalchemy.orm.SessionEvents.pending_to_persistent
    "sqlalchemy.orm.SessionEvents.pending_to_persistent") event would be invoked for
    objects not just when they move from pending to persistent, but when they were
    also already persistent and just being updated, thus causing the event to be invoked
    for all objects on every update.
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个相当简单但关键的问题，即[`SessionEvents.pending_to_persistent()`](../orm/events.html#sqlalchemy.orm.SessionEvents.pending_to_persistent
    "sqlalchemy.orm.SessionEvents.pending_to_persistent")事件不仅在对象从待定转为持久时被调用，而且在它们已经是持久的并且正在更新时也被调用，从而导致事件在每次更新时为所有对象调用。
- en: 'References: [#4489](https://www.sqlalchemy.org/trac/ticket/4489)'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4489](https://www.sqlalchemy.org/trac/ticket/4489)
- en: sql
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where the [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON") type had a read-only [`JSON.should_evaluate_none`](../core/type_basics.html#sqlalchemy.types.JSON.should_evaluate_none
    "sqlalchemy.types.JSON.should_evaluate_none") attribute, which would cause failures
    when making use of the [`TypeEngine.evaluates_none()`](../core/type_api.html#sqlalchemy.types.TypeEngine.evaluates_none
    "sqlalchemy.types.TypeEngine.evaluates_none") method in conjunction with this
    type. Pull request courtesy Sanjana S.
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")类型具有只读[`JSON.should_evaluate_none`](../core/type_basics.html#sqlalchemy.types.JSON.should_evaluate_none
    "sqlalchemy.types.JSON.should_evaluate_none")属性的问题，这会导致在与此类型一起使用[`TypeEngine.evaluates_none()`](../core/type_api.html#sqlalchemy.types.TypeEngine.evaluates_none
    "sqlalchemy.types.TypeEngine.evaluates_none")方法时出现故障。感谢 Sanjana S 提交的拉取请求。
- en: 'References: [#4485](https://www.sqlalchemy.org/trac/ticket/4485)'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4485](https://www.sqlalchemy.org/trac/ticket/4485)
- en: mysql
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed a second regression caused by [#4344](https://www.sqlalchemy.org/trac/ticket/4344)
    (the first was [#4361](https://www.sqlalchemy.org/trac/ticket/4361)), which works
    around MySQL issue 88718, where the lower casing function used was not correct
    for Python 2 with OSX/Windows casing conventions, which would then raise `TypeError`.
    Full coverage has been added to this logic so that every codepath is exercised
    in a mock style for all three casing conventions on all versions of Python. MySQL
    8.0 has meanwhile fixed issue 88718 so the workaround is only applies to a particular
    span of MySQL 8.0 versions.
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由[#4344](https://www.sqlalchemy.org/trac/ticket/4344)引起的第二个回归问题（第一个是[#4361](https://www.sqlalchemy.org/trac/ticket/4361)），这是针对
    MySQL 问题 88718 的解决方案，其中使用的小写函数对于具有 Python 2 的 OSX/Windows 大小写约定不正确，这将引发`TypeError`。已对此逻辑添加了完整覆盖，以便以模拟样式在所有
    Python 版本的所有三种大小写约定上执行每个代码路径。与此同时，MySQL 8.0已经修复了问题 88718，因此这个解决方案仅适用于特定范围的 MySQL
    8.0 版本。
- en: 'References: [#4492](https://www.sqlalchemy.org/trac/ticket/4492)'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4492](https://www.sqlalchemy.org/trac/ticket/4492)
- en: sqlite
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Fixed bug in SQLite DDL where using an expression as a server side default required
    that it be contained within parenthesis to be accepted by the sqlite parser. Pull
    request courtesy Bartlomiej Biernacki.
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 SQLite DDL 中的一个 bug，其中将表达式用作服务器端默认值需要将其包含在括号中才能被 sqlite 解析器接受。感谢 Bartlomiej
    Biernacki 提交的拉取请求。
- en: 'References: [#4474](https://www.sqlalchemy.org/trac/ticket/4474)'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4474](https://www.sqlalchemy.org/trac/ticket/4474)
- en: mssql
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed bug where the SQL Server “IDENTITY_INSERT” logic that allows an INSERT
    to proceed with an explicit value on an IDENTITY column was not detecting the
    case where [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") were used with a dictionary that contained
    a [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    as key and a SQL expression as a value.
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即 SQL Server 中允许在 IDENTITY 列上使用明确值进行插入的“IDENTITY_INSERT”逻辑未检测到使用字典的情况，该字典包含[`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values")作为键和 SQL 表达式作为值的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")。
- en: 'References: [#4499](https://www.sqlalchemy.org/trac/ticket/4499)'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4499](https://www.sqlalchemy.org/trac/ticket/4499)
- en: 1.2.17
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.2.17
- en: 'Released: January 25, 2019'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2019年1月25日
- en: orm
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new event hooks [`QueryEvents.before_compile_update()`](../orm/events.html#sqlalchemy.orm.QueryEvents.before_compile_update
    "sqlalchemy.orm.QueryEvents.before_compile_update") and [`QueryEvents.before_compile_delete()`](../orm/events.html#sqlalchemy.orm.QueryEvents.before_compile_delete
    "sqlalchemy.orm.QueryEvents.before_compile_delete") which complement [`QueryEvents.before_compile()`](../orm/events.html#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile") in the case of the [`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update") and [`Query.delete()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.delete
    "sqlalchemy.orm.Query.delete") methods.
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的事件钩子[`QueryEvents.before_compile_update()`](../orm/events.html#sqlalchemy.orm.QueryEvents.before_compile_update
    "sqlalchemy.orm.QueryEvents.before_compile_update")和[`QueryEvents.before_compile_delete()`](../orm/events.html#sqlalchemy.orm.QueryEvents.before_compile_delete
    "sqlalchemy.orm.QueryEvents.before_compile_delete")，它们在[`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update")和[`Query.delete()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.delete
    "sqlalchemy.orm.Query.delete")方法的情况下补充了[`QueryEvents.before_compile()`](../orm/events.html#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile")。
- en: 'References: [#4461](https://www.sqlalchemy.org/trac/ticket/4461)'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4461](https://www.sqlalchemy.org/trac/ticket/4461)
- en: '**[orm] [bug]**'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where when using single-table inheritance in conjunction with a
    joined inheritance hierarchy that uses “with polymorphic” loading, the “single
    table criteria” for that single-table entity could get confused for that of other
    entities from the same hierarchy used in the same query.The adaption of the “single
    table criteria” is made more specific to the target entity to avoid it accidentally
    getting adapted to other tables in the query.
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了单表继承与使用“with polymorphic”加载的连接继承层次结构一起使用时，“单表条件”可能会被混淆为同一查询中使用的同一层次结构的其他实体的问题。将“单表条件”的适应性更具体地改为目标实体，以避免它意外地适应为查询中的其他表。
- en: 'References: [#4454](https://www.sqlalchemy.org/trac/ticket/4454)'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4454](https://www.sqlalchemy.org/trac/ticket/4454)
- en: postgresql
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Revised the query used when reflecting CHECK constraints to make use of the
    `pg_get_constraintdef` function, as the `consrc` column is being deprecated in
    PG 12\. Thanks to John A Stevenson for the tip.
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修订了在反射 CHECK 约束时使用的查询，以利用`pg_get_constraintdef`函数，因为`consrc`列在 PG 12 中已被弃用。感谢约翰·A·斯蒂文森的提示。
- en: 'References: [#4463](https://www.sqlalchemy.org/trac/ticket/4463)'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4463](https://www.sqlalchemy.org/trac/ticket/4463)
- en: oracle
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed regression in integer precision logic due to the refactor of the cx_Oracle
    dialect in 1.2\. We now no longer apply the cx_Oracle.NATIVE_INT type to result
    columns sending integer values (detected as positive precision with scale ==0)
    which encounters integer overflow issues with values that go beyond the 32 bit
    boundary. Instead, the output variable is left untyped so that cx_Oracle can choose
    the best option.
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于 1.2 版本中 cx_Oracle 方言的重构导致整数精度逻辑的回归。现在我们不再将 cx_Oracle.NATIVE_INT 类型应用于发送整数值的结果列（检测到为正精度且比例为
    0），这会导致超出 32 位边界的值发生整数溢出问题。相反，输出变量保持未分类，以便 cx_Oracle 可以选择最佳选项。
- en: 'References: [#4457](https://www.sqlalchemy.org/trac/ticket/4457)'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4457](https://www.sqlalchemy.org/trac/ticket/4457)
- en: 1.2.16
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.2.16
- en: 'Released: January 11, 2019'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2019年1月11日
- en: engine
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [bug]**'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed a regression introduced in version 1.2 where a refactor of the [`SQLAlchemyError`](../core/exceptions.html#sqlalchemy.exc.SQLAlchemyError
    "sqlalchemy.exc.SQLAlchemyError") base exception class introduced an inappropriate
    coercion of a plain string message into Unicode under python 2k, which is not
    handled by the Python interpreter for characters outside of the platform’s encoding
    (typically ascii). The [`SQLAlchemyError`](../core/exceptions.html#sqlalchemy.exc.SQLAlchemyError
    "sqlalchemy.exc.SQLAlchemyError") class now passes a bytestring through under
    Py2K for `__str__()` as is the behavior of exception objects in general under
    Py2K, does a safe coercion to unicode utf-8 with backslash fallback for `__unicode__()`.
    For Py3K the message is typically unicode already, but if not is again safe-coerced
    with utf-8 with backslash fallback for the `__str__()` method.
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在版本1.2中引入的回归，其中对[`SQLAlchemyError`](../core/exceptions.html#sqlalchemy.exc.SQLAlchemyError
    "sqlalchemy.exc.SQLAlchemyError")基本异常类的重构引入了一个不当的强制转换，将纯字符串消息转换为Unicode在python
    2k下，这不被Python解释器处理，因为平台的编码（通常是ascii）之外的字符。[`SQLAlchemyError`](../core/exceptions.html#sqlalchemy.exc.SQLAlchemyError
    "sqlalchemy.exc.SQLAlchemyError")类现在在Py2K下通过`__str__()`传递一个字节串，这是Py2K下异常对象的一般行为，对于`__unicode__()`进行安全的utf-8强制转换。对于Py3K，消息通常已经是unicode，但如果不是，`__str__()`方法会再次进行安全的utf-8强制转换。
- en: 'References: [#4429](https://www.sqlalchemy.org/trac/ticket/4429)'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4429](https://www.sqlalchemy.org/trac/ticket/4429)
- en: sql
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug] [mysql] [oracle]**'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [mysql] [oracle]**'
- en: Fixed issue where the DDL emitted for `DropTableComment`, which will be used
    by an upcoming version of Alembic, was incorrect for the MySQL and Oracle databases.
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了为`DropTableComment`发出的DDL对于即将用于Alembic的新版本的MySQL和Oracle数据库是不正确的问题。
- en: 'References: [#4436](https://www.sqlalchemy.org/trac/ticket/4436)'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4436](https://www.sqlalchemy.org/trac/ticket/4436)
- en: postgresql
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed issue where a [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM") or a custom domain present in a remote
    schema would not be recognized within column reflection if the name of the enum/domain
    or the name of the schema required quoting. A new parsing scheme now fully parses
    out quoted or non-quoted tokens including support for SQL-escaped quotes.
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在远程模式中存在的[`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM")或自定义域在列反射中无法识别的问题，如果枚举/域的名称或模式的名称需要引号。现在，新的解析方案完全解析带引号或不带引号的标记，包括支持SQL转义引号。
- en: 'References: [#4416](https://www.sqlalchemy.org/trac/ticket/4416)'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4416](https://www.sqlalchemy.org/trac/ticket/4416)
- en: '**[postgresql] [bug]**'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed issue where multiple [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM") objects referred to by the same [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object would fail to be created if multiple objects
    had the same name under different schema names. The internal memoization the PostgreSQL
    dialect uses to track if it has created a particular [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM") in the database during a DDL creation sequence
    now takes schema name into account.
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了同一[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")对象引用的多个[`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM")对象在具有相同名称但不同模式名称的情况下无法创建的问题。PostgreSQL方言在DDL创建序列期间用于跟踪是否在数据库中创建了特定[`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM")的内部记忆现在考虑了模式名称。
- en: sqlite
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Reflection of an index based on SQL expressions are now skipped with a warning,
    in the same way as that of the Postgresql dialect, where we currently do not support
    reflecting indexes that have SQL expressions within them. Previously, an index
    with columns of None were produced which would break tools like Alembic.
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 基于SQL表达式的索引的反射现在会跳过并发出警告，与Postgresql方言的方式相同，我们目前不支持反映其中包含SQL表达式的索引。以前，会生成具有None列的索引，这会破坏像Alembic这样的工具。
- en: 'References: [#4431](https://www.sqlalchemy.org/trac/ticket/4431)'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4431](https://www.sqlalchemy.org/trac/ticket/4431)
- en: misc
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[no_tags]**'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: Fixed issue in “expanding IN” feature where using the same bound parameter name
    more than once in a query would lead to a KeyError within the process of rewriting
    the parameters in the query.
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“扩展IN”功能中的问题，即在查询中多次使用相同的绑定参数名称会导致在重写查询中的参数时出现KeyError的问题。
- en: 'References: [#4394](https://www.sqlalchemy.org/trac/ticket/4394)'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4394](https://www.sqlalchemy.org/trac/ticket/4394)
- en: 1.2.15
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.2.15
- en: 'Released: December 11, 2018'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2018年12月11日
- en: orm
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where the ORM annotations could be incorrect for the primaryjoin/secondaryjoin
    a relationship if one used the pattern `ForeignKey(SomeClass.id)` in the declarative
    mappings. This pattern would leak undesired annotations into the join conditions
    which can break aliasing operations done within [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") that are not supposed to impact elements in that join
    condition. These annotations are now removed up front if present.
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当在声明映射中使用`ForeignKey(SomeClass.id)`模式时，ORM注释可能不正确的bug。这种模式会将不需要的注释泄漏到加入条件中，这可能会破坏[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")中进行的别名操作，这些操作不应影响该加入条件中的元素。如果存在这些注释，现在会立即将其删除。
- en: 'References: [#4367](https://www.sqlalchemy.org/trac/ticket/4367)'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4367](https://www.sqlalchemy.org/trac/ticket/4367)
- en: '**[orm] [bug]**'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: In continuing with a similar theme as that of very recent [#4349](https://www.sqlalchemy.org/trac/ticket/4349),
    repaired issue with [`Comparator.any()`](../orm/internals.html#sqlalchemy.orm.RelationshipProperty.Comparator.any
    "sqlalchemy.orm.RelationshipProperty.Comparator.any") and [`Comparator.has()`](../orm/internals.html#sqlalchemy.orm.RelationshipProperty.Comparator.has
    "sqlalchemy.orm.RelationshipProperty.Comparator.has") where the “secondary” selectable
    needs to be explicitly part of the FROM clause in the EXISTS subquery to suit
    the case where this “secondary” is a [`Join`](../core/selectable.html#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") object.
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 继续解决与最近[#4349](https://www.sqlalchemy.org/trac/ticket/4349)类似主题的问题，修复了[`Comparator.any()`](../orm/internals.html#sqlalchemy.orm.RelationshipProperty.Comparator.any
    "sqlalchemy.orm.RelationshipProperty.Comparator.any")和[`Comparator.has()`](../orm/internals.html#sqlalchemy.orm.RelationshipProperty.Comparator.has
    "sqlalchemy.orm.RelationshipProperty.Comparator.has")中的问题，其中“secondary”可选择需要明确作为FROM子查询的一部分，以适应“secondary”是[`Join`](../core/selectable.html#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join")对象的情况。
- en: 'References: [#4366](https://www.sqlalchemy.org/trac/ticket/4366)'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4366](https://www.sqlalchemy.org/trac/ticket/4366)
- en: '**[orm] [bug]**'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression caused by [#4349](https://www.sqlalchemy.org/trac/ticket/4349)
    where adding the “secondary” table to the FROM clause for a dynamic loader would
    affect the ability of the [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") to make a subsequent join to another entity. The fix adds
    the primary entity as the first element of the FROM list since [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") wants to jump from that. Version 1.3 will have a
    more comprehensive solution to this problem as well ([#4365](https://www.sqlalchemy.org/trac/ticket/4365)).
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由[#4349](https://www.sqlalchemy.org/trac/ticket/4349)引起的回归问题，即将“secondary”表添加到动态加载器的FROM子句中会影响[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对另一个实体进行后续连接的能力。修复方法是将主实体添加为FROM列表的第一个元素，因为[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")希望从那里跳转。版本1.3还将对此问题提供更全面的解决方案（[#4365](https://www.sqlalchemy.org/trac/ticket/4365)）。
- en: 'References: [#4363](https://www.sqlalchemy.org/trac/ticket/4363)'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4363](https://www.sqlalchemy.org/trac/ticket/4363)
- en: '**[orm] [bug]**'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where chaining of mapper options using `RelationshipProperty.of_type()`
    in conjunction with a chained option that refers to an attribute name by string
    only would fail to locate the attribute.
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即在使用`RelationshipProperty.of_type()`链接映射器选项时，与仅通过字符串引用属性名称的链接选项一起使用时，会无法定位属性的问题。
- en: 'References: [#4400](https://www.sqlalchemy.org/trac/ticket/4400)'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4400](https://www.sqlalchemy.org/trac/ticket/4400)
- en: orm declarative
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm declarative
- en: '**[orm] [declarative] [bug]**'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: A warning is emitted in the case that a [`column()`](../core/sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column") object is applied to a declarative class,
    as it seems likely this intended to be a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") object.
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在将[`column()`](../core/sqlelement.html#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column")对象应用于声明类的情况下，会发出警告，因为这似乎是打算将其作为[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象。
- en: 'References: [#4374](https://www.sqlalchemy.org/trac/ticket/4374)'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4374](https://www.sqlalchemy.org/trac/ticket/4374)
- en: misc
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[no_tags]**'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: Added support for the `write_timeout` flag accepted by mysqlclient and pymysql
    to be passed in the URL string.
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对`write_timeout`标志的支持，该标志被mysqlclient和pymysql接受并传递到URL字符串中。
- en: 'References: [#4381](https://www.sqlalchemy.org/trac/ticket/4381)'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4381](https://www.sqlalchemy.org/trac/ticket/4381)
- en: '**[no_tags]**'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: Fixed issue where reflection of a PostgreSQL domain that is expressed as an
    array would fail to be recognized. Pull request courtesy Jakub Synowiec.
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即无法识别表示为数组的PostgreSQL域的反射。感谢Jakub Synowiec提供的拉取请求。
- en: 'References: [#4377](https://www.sqlalchemy.org/trac/ticket/4377), [#4380](https://www.sqlalchemy.org/trac/ticket/4380)'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4377](https://www.sqlalchemy.org/trac/ticket/4377), [#4380](https://www.sqlalchemy.org/trac/ticket/4380)
- en: 1.2.14
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.2.14
- en: 'Released: November 10, 2018'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2018年11月10日
- en: orm
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in [`Session.bulk_update_mappings()`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_update_mappings
    "sqlalchemy.orm.Session.bulk_update_mappings") where alternate mapped attribute
    names would result in the primary key column of the UPDATE statement being included
    in the SET clause, as well as the WHERE clause; while usually harmless, for SQL
    Server this can raise an error due to the IDENTITY column. This is a continuation
    of the same bug that was fixed in [#3849](https://www.sqlalchemy.org/trac/ticket/3849),
    where testing was insufficient to catch this additional flaw.
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Session.bulk_update_mappings()`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_update_mappings
    "sqlalchemy.orm.Session.bulk_update_mappings")中的bug，其中替代映射属性名称会导致UPDATE语句的主键列包含在SET子句中，以及WHERE子句中；虽然通常无害，但对于SQL
    Server，这可能会由于IDENTITY列而引发错误。这是在[#3849](https://www.sqlalchemy.org/trac/ticket/3849)中修复的相同bug的延续，测试不足以捕捉到这个额外的缺陷。
- en: 'References: [#4357](https://www.sqlalchemy.org/trac/ticket/4357)'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4357](https://www.sqlalchemy.org/trac/ticket/4357)
- en: '**[orm] [bug]**'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a minor performance issue which could in some cases add unnecessary overhead
    to result fetching, involving the use of ORM columns and entities that include
    those same columns at the same time within a query. The issue has to do with hash
    / eq overhead when referring to the column in different ways.
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个轻微的性能问题，可能会在某些情况下增加不必要的开销，涉及在查询中同时使用ORM列和包含这些列的实体时。问题涉及在不同方式引用列时的哈希/相等开销。
- en: 'References: [#4347](https://www.sqlalchemy.org/trac/ticket/4347)'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4347](https://www.sqlalchemy.org/trac/ticket/4347)
- en: mysql
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed regression caused by [#4344](https://www.sqlalchemy.org/trac/ticket/4344)
    released in 1.2.13, where the fix for MySQL 8.0’s case sensitivity problem with
    referenced column names when reflecting foreign key referents is worked around
    using the `information_schema.columns` view. The workaround was failing on OSX
    / `lower_case_table_names=2` which produces non-matching casing for the `information_schema.columns`
    vs. that of `SHOW CREATE TABLE`, so in case-insensitive SQL modes case-insensitive
    matching is now used.
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了1.2.13中发布的[#4344](https://www.sqlalchemy.org/trac/ticket/4344)引起的回归问题，其中解决了MySQL
    8.0在反射外键引用列名称时的大小写敏感性问题，使用`information_schema.columns`视图绕过。在OSX / `lower_case_table_names=2`上，这种解决方法会失败，因为`information_schema.columns`的大小写与`SHOW
    CREATE TABLE`不匹配，因此在不区分大小写的SQL模式下现在使用不区分大小写的匹配。
- en: 'References: [#4361](https://www.sqlalchemy.org/trac/ticket/4361)'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4361](https://www.sqlalchemy.org/trac/ticket/4361)
- en: 1.2.13
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.2.13
- en: 'Released: October 31, 2018'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2018年10月31日
- en: orm
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where “dynamic” loader needs to explicitly set the “secondary” table
    in the FROM clause of the query, to suit the case where the secondary is a join
    object that is otherwise not pulled into the query from its columns alone.
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“动态”加载器需要在查询的FROM子句中显式设置“secondary”表的bug，以适应次要表是一个联接对象，否则仅从其列中提取无法将其拉入查询的情况。
- en: 'References: [#4349](https://www.sqlalchemy.org/trac/ticket/4349)'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4349](https://www.sqlalchemy.org/trac/ticket/4349)
- en: orm declarative
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm声明式
- en: '**[orm] [declarative] [bug]**'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Fixed regression caused by [#4326](https://www.sqlalchemy.org/trac/ticket/4326)
    in version 1.2.12 where using [`declared_attr`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr") with a mixin in conjunction with [`synonym()`](../orm/mapped_attributes.html#sqlalchemy.orm.synonym
    "sqlalchemy.orm.synonym") would fail to map the synonym properly to an inherited
    subclass.
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了版本1.2.12中由[#4326](https://www.sqlalchemy.org/trac/ticket/4326)引起的回归，其中在使用[`declared_attr`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr")与[`synonym()`](../orm/mapped_attributes.html#sqlalchemy.orm.synonym
    "sqlalchemy.orm.synonym")混合使用时，会导致无法正确将同义词映射到继承的子类。
- en: 'References: [#4350](https://www.sqlalchemy.org/trac/ticket/4350)'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4350](https://www.sqlalchemy.org/trac/ticket/4350)
- en: '**[orm] [declarative] [bug]**'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: The column conflict resolution technique discussed at [Resolving Column Conflicts
    with use_existing_column](../orm/inheritance.html#orm-inheritance-column-conflicts)
    is now functional for a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") that is also a primary key column. Previously, a check
    for primary key columns declared on a single-inheritance subclass would occur
    before the column copy were allowed to pass.
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，讨论的列冲突解决技术[使用`use_existing_column`解决列冲突](../orm/inheritance.html#orm-inheritance-column-conflicts)对于同时是主键列的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")现在可用。以前，在允许列复制通过之前，会先检查单一继承子类上声明的主键列。
- en: 'References: [#4352](https://www.sqlalchemy.org/trac/ticket/4352)'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4352](https://www.sqlalchemy.org/trac/ticket/4352)
- en: sql
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Refactored [`SQLCompiler`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler
    "sqlalchemy.sql.compiler.SQLCompiler") to expose a [`SQLCompiler.group_by_clause()`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler.group_by_clause
    "sqlalchemy.sql.compiler.SQLCompiler.group_by_clause") method similar to the [`SQLCompiler.order_by_clause()`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler.order_by_clause
    "sqlalchemy.sql.compiler.SQLCompiler.order_by_clause") and `SQLCompiler.limit_clause()`
    methods, which can be overridden by dialects to customize how GROUP BY renders.
    Pull request courtesy Samuel Chou.
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重构[`SQLCompiler`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler
    "sqlalchemy.sql.compiler.SQLCompiler")以公开类似于[`SQLCompiler.order_by_clause()`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler.order_by_clause
    "sqlalchemy.sql.compiler.SQLCompiler.order_by_clause")和`SQLCompiler.limit_clause()`方法的[`SQLCompiler.group_by_clause()`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler.group_by_clause
    "sqlalchemy.sql.compiler.SQLCompiler.group_by_clause")方法，可以被方言重写以自定义GROUP BY的呈现方式。感谢Samuel
    Chou的拉取请求。
- en: '**[sql] [bug]**'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where the [`Enum.create_constraint`](../core/type_basics.html#sqlalchemy.types.Enum.params.create_constraint
    "sqlalchemy.types.Enum") flag on the [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") datatype would not be propagated to copies of the type,
    which affects use cases such as declarative mixins and abstract bases.
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")数据类型上的[`Enum.create_constraint`](../core/type_basics.html#sqlalchemy.types.Enum.params.create_constraint
    "sqlalchemy.types.Enum")标志不会传播到类型的副本的错误，这会影响到声明性混合和抽象基类等用例。
- en: 'References: [#4341](https://www.sqlalchemy.org/trac/ticket/4341)'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4341](https://www.sqlalchemy.org/trac/ticket/4341)
- en: postgresql
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added support for the [`aggregate_order_by`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.aggregate_order_by
    "sqlalchemy.dialects.postgresql.aggregate_order_by") function to receive multiple
    ORDER BY elements, previously only a single element was accepted.
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对[`aggregate_order_by`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.aggregate_order_by
    "sqlalchemy.dialects.postgresql.aggregate_order_by")函数接收多个ORDER BY元素的支持，之前只接受单个元素。
- en: 'References: [#4337](https://www.sqlalchemy.org/trac/ticket/4337)'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4337](https://www.sqlalchemy.org/trac/ticket/4337)
- en: mysql
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Added word `function` to the list of reserved words for MySQL, which is now
    a keyword in MySQL 8.0
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将`function`一词添加到MySQL的保留字列表中，现在在MySQL 8.0中是一个关键字。
- en: 'References: [#4348](https://www.sqlalchemy.org/trac/ticket/4348)'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4348](https://www.sqlalchemy.org/trac/ticket/4348)
- en: '**[mysql] [bug]**'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: 'Added a workaround for a MySQL bug #88718 introduced in the 8.0 series, where
    the reflection of a foreign key constraint is not reporting the correct case sensitivity
    for the referred column, leading to errors during use of the reflected constraint
    such as when using the automap extension. The workaround emits an additional query
    to the information_schema tables in order to retrieve the correct case sensitive
    name.'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '为MySQL 8.0系列中引入的一个bug #88718添加了一个解决方法，其中外键约束的反射未报告所引用列的正确大小写敏感性，导致在使用反射约束时出现错误，例如在使用automap扩展时。解决方法通过向information_schema表发出额外查询以检索正确的大小写敏感名称。'
- en: 'References: [#4344](https://www.sqlalchemy.org/trac/ticket/4344)'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4344](https://www.sqlalchemy.org/trac/ticket/4344)
- en: misc
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[misc] [bug]**'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[杂项] [错误]**'
- en: Fixed issue where part of the utility language helper internals was passing
    the wrong kind of argument to the Python `__import__` builtin as the list of modules
    to be imported. The issue produced no symptoms within the core library but could
    cause issues with external applications that redefine the `__import__` builtin
    or otherwise instrument it. Pull request courtesy Joe Urciuoli.
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了实用语言助手内部的一部分错误，该错误将错误类型的参数传递给Python `__import__`内置函数作为要导入的模块列表。该问题在核心库中没有产生任何症状，但可能会导致重新定义`__import__`内置函数或以其他方式对其进行调整的外部应用程序出现问题。感谢Joe
    Urciuoli的拉取请求。
- en: '**[misc] [bug] [py3k]**'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[杂项] [错误] [py3k]**'
- en: Fixed additional warnings generated by Python 3.7 due to changes in the organization
    of the Python `collections` and `collections.abc` packages. Previous `collections`
    warnings were fixed in version 1.2.11\. Pull request courtesy xtreak.
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由于Python 3.7中Python `collections`和`collections.abc`包组织变化而产生的额外警告。之前版本1.2.11中已修复了`collections`的警告。感谢xtreak的拉取请求。
- en: 'References: [#4339](https://www.sqlalchemy.org/trac/ticket/4339)'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4339](https://www.sqlalchemy.org/trac/ticket/4339)
- en: '**[bug] [ext]**'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [扩展]**'
- en: Added missing `.index()` method to list-based association collections in the
    association proxy extension.
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在关联代理扩展中的基于列表的关联集合中添加了缺失的`.index()`方法。
- en: 1.2.12
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.2.12
- en: 'Released: September 19, 2018'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2018年9月19日
- en: orm
  id: totrans-169
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM
- en: '**[orm] [bug]**'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [错误]**'
- en: Added a check within the weakref cleanup for the [`InstanceState`](../orm/internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") object to check for the presence of the `dict`
    builtin, in an effort to reduce error messages generated when these cleanups occur
    during interpreter shutdown. Pull request courtesy Romuald Brunet.
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在弱引用清理中添加了一个检查，用于检查[`InstanceState`](../orm/internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")对象中是否存在`dict`内置对象，以减少在解释器关闭时发生这些清理时生成的错误消息。感谢Romuald
    Brunet的拉取请求。
- en: '**[orm] [bug]**'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [错误]**'
- en: Fixed bug where use of [`Lateral`](../core/selectable.html#sqlalchemy.sql.expression.Lateral
    "sqlalchemy.sql.expression.Lateral") construct in conjunction with [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") as well as `Query.select_entity_from()` would not
    apply clause adaption to the right side of the join. “lateral” introduces the
    use case of the right side of a join being correlatable. Previously, adaptation
    of this clause wasn’t considered. Note that in 1.2 only, a selectable introduced
    by [`Query.subquery()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.subquery
    "sqlalchemy.orm.Query.subquery") is still not adapted due to [#4304](https://www.sqlalchemy.org/trac/ticket/4304);
    the selectable needs to be produced by the [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") function to be the right side of the “lateral”
    join.
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在与[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")以及`Query.select_entity_from()`一起使用[`Lateral`](../core/selectable.html#sqlalchemy.sql.expression.Lateral
    "sqlalchemy.sql.expression.Lateral")构造时，不会将子句适应到连接的右侧的bug。 “lateral”引入了连接的右侧可以相关的用例。以前，未考虑适应此子句。请注意，在1.2版本中，由[`Query.subquery()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.subquery
    "sqlalchemy.orm.Query.subquery")引入的可选择项仍未适应，原因是[#4304](https://www.sqlalchemy.org/trac/ticket/4304)；可选择项需要由[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")函数生成，以成为“lateral”连接的右侧。
- en: 'References: [#4334](https://www.sqlalchemy.org/trac/ticket/4334)'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4334](https://www.sqlalchemy.org/trac/ticket/4334)
- en: '**[orm] [bug]**'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [错误]**'
- en: Fixed 1.2 regression caused by [#3472](https://www.sqlalchemy.org/trac/ticket/3472)
    where the handling of an “updated_at” style column within the context of a post-update
    operation would also occur for a row that is to be deleted following the update,
    meaning both that a column with a Python-side value generator would show the now-deleted
    value that was emitted for the UPDATE before the DELETE (which was not the previous
    behavior), as well as that a SQL- emitted value generator would have the attribute
    expired, meaning the previous value would be unreachable due to the row having
    been deleted and the object detached from the session.The “postfetch” logic that
    was added as part of [#3472](https://www.sqlalchemy.org/trac/ticket/3472) is now
    skipped entirely for an object that ultimately is to be deleted.
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 1.2 版本中由 [#3472](https://www.sqlalchemy.org/trac/ticket/3472) 引起的回归问题，其中在后续更新操作的上下文中处理“updated_at”样式列也会发生在更新后要删除的行上，这意味着具有
    Python 端值生成器的列将显示在更新之前发出的现已删除值（这不是以前的行为），以及 SQL 发出的值生成器将使属性过期，这意味着由于行已被删除并且对象已从会话中分离，无法访问以前的值。作为
    [#3472](https://www.sqlalchemy.org/trac/ticket/3472) 的一部分添加的“postfetch”逻辑现在完全跳过将最终被删除的对象。
- en: 'References: [#4327](https://www.sqlalchemy.org/trac/ticket/4327)'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4327](https://www.sqlalchemy.org/trac/ticket/4327)
- en: orm declarative
  id: totrans-178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm 声明式
- en: '**[orm] [declarative] [bug]**'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Fixed bug where the declarative scan for attributes would receive the expression
    proxy delivered by a hybrid attribute at the class level, and not the hybrid attribute
    itself, when receiving the descriptor via the `@declared_attr` callable on a subclass
    of an already-mapped class. This would lead to an attribute that did not report
    itself as a hybrid when viewed within [`Mapper.all_orm_descriptors`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors").
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，其中对已映射类的子类上使用 `@declared_attr` 可调用时，属性的声明性扫描会收到由混合属性在类级别传递的表达式代理，而不是混合属性本身。这将导致在
    [`Mapper.all_orm_descriptors`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors") 中查看时，未报告自身为混合的属性。
- en: 'References: [#4326](https://www.sqlalchemy.org/trac/ticket/4326)'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4326](https://www.sqlalchemy.org/trac/ticket/4326)
- en: postgresql
  id: totrans-182
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug in PostgreSQL dialect where compiler keyword arguments such as `literal_binds=True`
    were not being propagated to a DISTINCT ON expression.
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 PostgreSQL 方言中的一个 bug，其中编译器关键字参数（如 `literal_binds=True`）未被传播到 DISTINCT ON
    表达式。
- en: 'References: [#4325](https://www.sqlalchemy.org/trac/ticket/4325)'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4325](https://www.sqlalchemy.org/trac/ticket/4325)
- en: '**[postgresql] [bug]**'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed the [`array_agg()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.array_agg
    "sqlalchemy.dialects.postgresql.array_agg") function, which is a slightly altered
    version of the usual [`array_agg()`](../core/functions.html#sqlalchemy.sql.functions.array_agg
    "sqlalchemy.sql.functions.array_agg") function, to also accept an incoming “type”
    argument without forcing an ARRAY around it, essentially the same thing that was
    fixed for the generic function in 1.1 in [#4107](https://www.sqlalchemy.org/trac/ticket/4107).
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`array_agg()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.array_agg
    "sqlalchemy.dialects.postgresql.array_agg") 函数，这是通常 [`array_agg()`](../core/functions.html#sqlalchemy.sql.functions.array_agg
    "sqlalchemy.sql.functions.array_agg") 函数的略微改变版本，也接受一个传入的“type”参数，而不需要强制在其周围使用
    ARRAY，本质上与 1.1 版本中修复的通用函数相同 [#4107](https://www.sqlalchemy.org/trac/ticket/4107)。
- en: 'References: [#4324](https://www.sqlalchemy.org/trac/ticket/4324)'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4324](https://www.sqlalchemy.org/trac/ticket/4324)
- en: '**[postgresql] [bug]**'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug in PostgreSQL ENUM reflection where a case-sensitive, quoted name
    would be reported by the query including quotes, which would not match a target
    column during table reflection as the quotes needed to be stripped off.
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 PostgreSQL 枚举反射中的 bug，其中包含引号的区分大小写名称将由查询报告，这些引号在表反射期间不会与目标列匹配，因为需要去除引号。
- en: 'References: [#4323](https://www.sqlalchemy.org/trac/ticket/4323)'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4323](https://www.sqlalchemy.org/trac/ticket/4323)
- en: oracle
  id: totrans-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed issue for cx_Oracle 7.0 where the behavior of Oracle param.getvalue()
    now returns a list, rather than a single scalar value, breaking autoincrement
    logic throughout the Core and ORM. The dml_ret_array_val compatibility flag is
    used for cx_Oracle 6.3 and 6.4 to establish compatible behavior with 7.0 and forward,
    for cx_Oracle 6.2.1 and prior a version number check falls back to the old logic.
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 cx_Oracle 7.0 修复了一个问题，其中 Oracle param.getvalue() 的行为现在返回一个列表，而不是单个标量值，从而在
    Core 和 ORM 中破坏了自增逻辑。 dml_ret_array_val 兼容性标志用于 cx_Oracle 6.3 和 6.4，以建立与 7.0 及更高版本的兼容性行为，对于
    cx_Oracle 6.2.1 及之前的版本号检查，将退回到旧逻辑。
- en: 'References: [#4335](https://www.sqlalchemy.org/trac/ticket/4335)'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4335](https://www.sqlalchemy.org/trac/ticket/4335)
- en: misc
  id: totrans-196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他
- en: '**[bug] [ext]**'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed issue where [`BakedQuery`](../orm/extensions/baked.html#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery") did not include the specific query class used
    by the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    as part of the cache key, leading to incompatibilities when using custom query
    classes, in particular the [`ShardedQuery`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedQuery
    "sqlalchemy.ext.horizontal_shard.ShardedQuery") which has some different argument
    signatures.
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`BakedQuery`](../orm/extensions/baked.html#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery") 没有将 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 使用的具体查询类作为缓存键的一部分，导致在使用自定义查询类时出现不兼容性，特别是 [`ShardedQuery`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedQuery
    "sqlalchemy.ext.horizontal_shard.ShardedQuery") 其具有一些不同的参数签名。
- en: 'References: [#4328](https://www.sqlalchemy.org/trac/ticket/4328)'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4328](https://www.sqlalchemy.org/trac/ticket/4328)
- en: 1.2.11
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.2.11
- en: 'Released: August 20, 2018'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2018年8月20日
- en: orm declarative
  id: totrans-202
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm 声明式
- en: '**[orm] [declarative] [bug]**'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Fixed issue in previously untested use case, allowing a declarative mapped class
    to inherit from a classically-mapped class outside of the declarative base, including
    that it accommodates for unmapped intermediate classes. An unmapped intermediate
    class may specify `__abstract__`, which is now interpreted correctly, or the intermediate
    class can remain unmarked, and the classically mapped base class will be detected
    within the hierarchy regardless. In order to anticipate existing scenarios which
    may be mixing in classical mappings into existing declarative hierarchies, an
    error is now raised if multiple mapped bases are detected for a given class.
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了先前未经测试的用例中的问题，允许声明式映射的类继承自声明式基类之外的经典映射类，包括它适应于未映射的中间类的情况。 未映射的中间类可以指定 `__abstract__`，现在将正确解释，或者中间类可以保持未标记状态，并且基类将在层次结构中被正确检测到。
    为了预期可能将经典映射混合到现有声明式层次结构中的现有场景，如果检测到给定类的多个映射基类，现在将引发错误。
- en: 'References: [#4321](https://www.sqlalchemy.org/trac/ticket/4321)'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4321](https://www.sqlalchemy.org/trac/ticket/4321)
- en: sql
  id: totrans-206
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue that is closely related to [#3639](https://www.sqlalchemy.org/trac/ticket/3639)
    where an expression rendered in a boolean context on a non-native boolean backend
    would be compared to 1/0 even though it is already an implicitly boolean expression,
    when [`ColumnElement.self_group()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.self_group
    "sqlalchemy.sql.expression.ColumnElement.self_group") were used. While this does
    not affect the user-friendly backends (MySQL, SQLite) it was not handled by Oracle
    (and possibly SQL Server). Whether or not the expression is implicitly boolean
    on any database is now determined up front as an additional check to not generate
    the integer comparison within the compilation of the statement.
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个与 [#3639](https://www.sqlalchemy.org/trac/ticket/3639) 密切相关的问题，即在非原生布尔后端的布尔上下文中呈现的表达式将与
    1/0 进行比较，即使它已经是一个隐式布尔表达式，当使用 [`ColumnElement.self_group()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.self_group
    "sqlalchemy.sql.expression.ColumnElement.self_group") 时。虽然这不影响用户友好的后端（MySQL，SQLite），但
    Oracle（可能还包括 SQL Server）没有处理它。现在，任何数据库上的表达式是否隐式布尔都将被提前确定为附加检查，以在语句的编译中不生成整数比较。
- en: 'References: [#4320](https://www.sqlalchemy.org/trac/ticket/4320)'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4320](https://www.sqlalchemy.org/trac/ticket/4320)
- en: '**[sql] [bug]**'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Added missing window function parameters [`WithinGroup.over.range_`](../core/sqlelement.html#sqlalchemy.sql.expression.WithinGroup.over.params.range_
    "sqlalchemy.sql.expression.WithinGroup.over") and [`WithinGroup.over.rows`](../core/sqlelement.html#sqlalchemy.sql.expression.WithinGroup.over.params.rows
    "sqlalchemy.sql.expression.WithinGroup.over") parameters to the [`WithinGroup.over()`](../core/sqlelement.html#sqlalchemy.sql.expression.WithinGroup.over
    "sqlalchemy.sql.expression.WithinGroup.over") and [`FunctionFilter.over()`](../core/sqlelement.html#sqlalchemy.sql.expression.FunctionFilter.over
    "sqlalchemy.sql.expression.FunctionFilter.over") methods, to correspond to the
    range/rows feature added to the “over” method of SQL functions as part of [#3049](https://www.sqlalchemy.org/trac/ticket/3049)
    in version 1.1.
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了缺失的窗口函数参数[`WithinGroup.over.range_`](../core/sqlelement.html#sqlalchemy.sql.expression.WithinGroup.over.params.range_
    "sqlalchemy.sql.expression.WithinGroup.over")和[`WithinGroup.over.rows`](../core/sqlelement.html#sqlalchemy.sql.expression.WithinGroup.over.params.rows
    "sqlalchemy.sql.expression.WithinGroup.over")参数到[`WithinGroup.over()`](../core/sqlelement.html#sqlalchemy.sql.expression.WithinGroup.over
    "sqlalchemy.sql.expression.WithinGroup.over")和[`FunctionFilter.over()`](../core/sqlelement.html#sqlalchemy.sql.expression.FunctionFilter.over
    "sqlalchemy.sql.expression.FunctionFilter.over")方法，以对应于版本 1.1 中作为 SQL 函数“over”方法的一部分添加的
    range/rows 功能。
- en: 'References: [#4322](https://www.sqlalchemy.org/trac/ticket/4322)'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4322](https://www.sqlalchemy.org/trac/ticket/4322)
- en: '**[sql] [bug]**'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where the multi-table support for UPDATE and DELETE statements did
    not consider the additional FROM elements as targets for correlation, when a correlated
    SELECT were also combined with the statement. This change now includes that a
    SELECT statement in the WHERE clause for such a statement will try to auto-correlate
    back to these additional tables in the parent UPDATE/DELETE or unconditionally
    correlate if [`Select.correlate()`](../core/selectable.html#sqlalchemy.sql.expression.Select.correlate
    "sqlalchemy.sql.expression.Select.correlate") is used. Note that auto-correlation
    raises an error if the SELECT statement would have no FROM clauses as a result,
    which can now occur if the parent UPDATE/DELETE specifies the same tables in its
    additional set of tables; specify [`Select.correlate()`](../core/selectable.html#sqlalchemy.sql.expression.Select.correlate
    "sqlalchemy.sql.expression.Select.correlate") explicitly to resolve.
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 UPDATE 和 DELETE 语句的多表支持未将额外的 FROM 元素视为相关目标的 bug，当相关的 SELECT 也与语句组合时。此更改现在包括了
    WHERE 子句中的 SELECT 语句将尝试自动关联回这些额外的表到父 UPDATE/DELETE 中，或者如果使用了[`Select.correlate()`](../core/selectable.html#sqlalchemy.sql.expression.Select.correlate
    "sqlalchemy.sql.expression.Select.correlate")，则无条件关联。请注意，如果 SELECT 语句由于父 UPDATE/DELETE
    在其额外的表集中指定相同的表而没有 FROM 子句，则自动关联会引发错误；请显式指定[`Select.correlate()`](../core/selectable.html#sqlalchemy.sql.expression.Select.correlate
    "sqlalchemy.sql.expression.Select.correlate")以解决。
- en: 'References: [#4313](https://www.sqlalchemy.org/trac/ticket/4313)'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4313](https://www.sqlalchemy.org/trac/ticket/4313)
- en: oracle
  id: totrans-216
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: For cx_Oracle, Integer datatypes will now be bound to “int”, per advice from
    the cx_Oracle developers. Previously, using cx_Oracle.NUMBER caused a loss in
    precision within the cx_Oracle 6.x series.
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 cx_Oracle，整数数据类型现在将绑定到“int”，根据 cx_Oracle 开发人员的建议。以前，在 cx_Oracle 6.x 系列中使用
    cx_Oracle.NUMBER 会导致精度丢失。
- en: 'References: [#4309](https://www.sqlalchemy.org/trac/ticket/4309)'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4309](https://www.sqlalchemy.org/trac/ticket/4309)
- en: misc
  id: totrans-220
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [py3k]**'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [py3k]**'
- en: Started importing “collections” from “collections.abc” under Python 3.3 and
    greater for Python 3.8 compatibility. Pull request courtesy Nathaniel Knight.
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 开始在 Python 3.3 及更高版本中从“collections.abc”导入“collections”，以实现 Python 3.8 的兼容性。感谢
    Nathaniel Knight 的拉取请求。
- en: '**[no_tags]**'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: Fixed issue where the “schema” name used for a SQLite database within table
    reflection would not quote the schema name correctly. Pull request courtesy Phillip
    Cloud.
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在表反射中用于 SQLite 数据库的“schema”名称不会正确引用模式名称的问题。感谢 Phillip Cloud 的拉取请求。
- en: 1.2.10
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.2.10
- en: 'Released: July 13, 2018'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2018年7月13日
- en: orm
  id: totrans-227
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in [`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")
    construct where placing two columns of the same name would be de-duplicated, when
    the [`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")
    were used as part of the rendered SQL, such as in the ORDER BY or GROUP BY of
    the statement.
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")构造中的错误，当放置两个同名列时会被去重，当[`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle")被用作渲染的 SQL 的一部分，比如在语句的 ORDER BY 或 GROUP BY 中。
- en: 'References: [#4295](https://www.sqlalchemy.org/trac/ticket/4295)'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4295](https://www.sqlalchemy.org/trac/ticket/4295)
- en: '**[orm] [bug]**'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression in 1.2.9 due to [#4287](https://www.sqlalchemy.org/trac/ticket/4287)
    where using a [`Load`](../orm/queryguide/relationships.html#sqlalchemy.orm.Load
    "sqlalchemy.orm.Load") option in conjunction with a string wildcard would result
    in a TypeError.
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于[#4287](https://www.sqlalchemy.org/trac/ticket/4287)导致1.2.9中的回归，使用[`Load`](../orm/queryguide/relationships.html#sqlalchemy.orm.Load
    "sqlalchemy.orm.Load")选项与字符串通配符结合使用会导致TypeError。
- en: 'References: [#4298](https://www.sqlalchemy.org/trac/ticket/4298)'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4298](https://www.sqlalchemy.org/trac/ticket/4298)
- en: sql
  id: totrans-234
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where a [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") would be dropped explicitly before any [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") that refers to it, which breaks in the case when the
    sequence is also involved in a server-side default for that table, when using
    [`MetaData.drop_all()`](../core/metadata.html#sqlalchemy.schema.MetaData.drop_all
    "sqlalchemy.schema.MetaData.drop_all"). The step which processes sequences to
    be dropped via non server-side column default functions is now invoked after the
    table itself is dropped.
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在任何引用它的[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")之前显式删除[`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")的错误，当序列还涉及到该表的服务器端默认值时，当使用[`MetaData.drop_all()`](../core/metadata.html#sqlalchemy.schema.MetaData.drop_all
    "sqlalchemy.schema.MetaData.drop_all")时会中断。现在，在删除表本身之后调用处理要通过非服务器端列默认函数删除的序列的步骤。
- en: 'References: [#4300](https://www.sqlalchemy.org/trac/ticket/4300)'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4300](https://www.sqlalchemy.org/trac/ticket/4300)
- en: 1.2.9
  id: totrans-238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.2.9
- en: 'Released: June 29, 2018'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2018年6月29日
- en: orm
  id: totrans-240
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where chaining multiple join elements inside of [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") might not correctly adapt to the previous left-hand
    side, when chaining joined inheritance classes that share the same base class.
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")中链接多个连接元素可能无法正确适应先前的左侧的问题，当链接共享相同基类的连接继承类时。
- en: 'References: [#3505](https://www.sqlalchemy.org/trac/ticket/3505)'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3505](https://www.sqlalchemy.org/trac/ticket/3505)
- en: '**[orm] [bug]**'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in cache key generation for baked queries which could cause a too-short
    cache key to be generated for the case of eager loads across subclasses. This
    could in turn cause the eagerload query to be cached in place of a non-eagerload
    query, or vice versa, for a polymorphic “selectin” load, or possibly for lazy
    loads or selectin loads as well.
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了为烘焙查询生成缓存键时的错误，可能导致生成的缓存键过短，对于跨子类的急加载情况。这可能会导致急加载查询被缓存，而不是非急加载查询，或者反之，对于多态的“selectin”加载，或者可能也适用于延迟加载或selectin加载。
- en: 'References: [#4287](https://www.sqlalchemy.org/trac/ticket/4287)'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4287](https://www.sqlalchemy.org/trac/ticket/4287)
- en: '**[orm] [bug]**'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in new polymorphic selectin loading where the BakedQuery used internally
    would be mutated by the given loader options, which would both inappropriately
    mutate the subclass query as well as carry over the effect to subsequent queries.
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新的多态selectin加载中的错误，其中内部使用的BakedQuery会被给定的加载器选项改变，这既会不适当地改变子类查询，也会将效果传递给后续查询。
- en: 'References: [#4286](https://www.sqlalchemy.org/trac/ticket/4286)'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4286](https://www.sqlalchemy.org/trac/ticket/4286)
- en: '**[orm] [bug]**'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression caused by [#4256](https://www.sqlalchemy.org/trac/ticket/4256)
    (itself a regression fix for [#4228](https://www.sqlalchemy.org/trac/ticket/4228))
    which breaks an undocumented behavior which converted for a non-sequence of entities
    passed directly to the [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") constructor into a single-element sequence. While this
    behavior was never supported or documented, it’s already in use so has been added
    as a behavioral contract to [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query").
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由[#4256](https://www.sqlalchemy.org/trac/ticket/4256)引起的回归（本身是对[#4228](https://www.sqlalchemy.org/trac/ticket/4228)的回归修复），它破坏了一个未记录的行为，将直接传递给[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")构造函数的实体的非序列转换为单个元素序列。虽然这种行为从未得到支持或记录，但已经在使用中，因此已被添加为[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")的行为契约。
- en: 'References: [#4269](https://www.sqlalchemy.org/trac/ticket/4269)'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4269](https://www.sqlalchemy.org/trac/ticket/4269)
- en: '**[orm] [bug]**'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed an issue that was both a performance regression in 1.2 as well as an incorrect
    result regarding the “baked” lazy loader, involving the generation of cache keys
    from the original [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object’s loader options. If the loader options were built
    up in a “branched” style using common base elements for multiple options, the
    same options would be rendered into the cache key repeatedly, causing both a performance
    issue as well as generating the wrong cache key. This is fixed, along with a performance
    improvement when such “branched” options are applied via [`Query.options()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.options
    "sqlalchemy.orm.Query.options") to prevent the same option objects from being
    applied repeatedly.
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个性能回归问题，1.2版本中的一个不正确结果涉及“baked”懒惰加载器，涉及从原始[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象的加载器选项生成缓存键的问题。如果加载器选项是以“分支”样式构建的，其中使用了多个选项的公共基本元素，那么相同的选项将被重复渲染到缓存键中，这将导致性能问题以及生成错误的缓存键。修复了此问题，同时通过[`Query.options()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.options
    "sqlalchemy.orm.Query.options")应用这种“分支”选项时进行了性能改进，以防止重复应用相同的选项对象。
- en: 'References: [#4270](https://www.sqlalchemy.org/trac/ticket/4270)'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4270](https://www.sqlalchemy.org/trac/ticket/4270)
- en: sql
  id: totrans-256
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed regression in 1.2 due to [#4147](https://www.sqlalchemy.org/trac/ticket/4147)
    where a [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    that has had some of its indexed columns redefined with new ones, as would occur
    when overriding columns during reflection or when using [`Table.extend_existing`](../core/metadata.html#sqlalchemy.schema.Table.params.extend_existing
    "sqlalchemy.schema.Table"), such that the [`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata") method would fail when attempting to copy
    those indexes as they still referred to the replaced column. The copy logic now
    accommodates for this condition.
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了1.2版本中的回归问题，该问题是由于[#4147](https://www.sqlalchemy.org/trac/ticket/4147)导致的，其中一个[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")的部分索引列被重新定义为新列，这会在反射期间覆盖列或使用[`Table.extend_existing`](../core/metadata.html#sqlalchemy.schema.Table.params.extend_existing
    "sqlalchemy.schema.Table")时发生，因此当尝试复制这些索引时，[`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata")方法会失败，因为它们仍然指向被替换的列。现在的复制逻辑已经适应了这种情况。
- en: 'References: [#4279](https://www.sqlalchemy.org/trac/ticket/4279)'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4279](https://www.sqlalchemy.org/trac/ticket/4279)
- en: mysql
  id: totrans-260
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed percent-sign doubling in mysql-connector-python dialect, which does not
    require de-doubling of percent signs. Additionally, the mysql- connector-python
    driver is inconsistent in how it passes the column names in cursor.description,
    so a workaround decoder has been added to conditionally decode these randomly-sometimes-bytes
    values to unicode only if needed. Also improved test support for mysql-connector-python,
    however it should be noted that this driver still has issues with unicode that
    continue to be unresolved as of yet.
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了mysql-connector-python方言中的百分号双倍问题，该问题不需要去除百分号的双倍。此外，mysql-connector-python驱动程序在传递列名到cursor.description时是不一致的，因此已添加了一个解码器的解决方法，条件地将这些随机-有时是字节的值解码为Unicode，仅在需要时解码。还改进了mysql-connector-python的测试支持，但应注意，该驱动程序仍然存在与Unicode相关的问题，目前尚未解决。
- en: '**[mysql] [bug]**'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed bug in index reflection where on MySQL 8.0 an index that includes ASC
    or DESC in an indexed column specification would not be correctly reflected, as
    MySQL 8.0 introduces support for returning this information in a table definition
    string.
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了索引反射中的bug，在MySQL 8.0上，包含ASC或DESC的索引列规范的索引将不会被正确反映，因为MySQL 8.0引入了在表定义字符串中返回此信息的支持。
- en: 'References: [#4293](https://www.sqlalchemy.org/trac/ticket/4293)'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4293](https://www.sqlalchemy.org/trac/ticket/4293)
- en: '**[mysql] [bug]**'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed bug in MySQLdb dialect and variants such as PyMySQL where an additional
    “unicode returns” check upon connection makes explicit use of the “utf8” character
    set, which in MySQL 8.0 emits a warning that utf8mb4 should be used. This is now
    replaced with a utf8mb4 equivalent. Documentation is also updated for the MySQL
    dialect to specify utf8mb4 in all examples. Additional changes have been made
    to the test suite to use utf8mb3 charsets and databases (there seem to be collation
    issues in some edge cases with utf8mb4), and to support configuration default
    changes made in MySQL 8.0 such as explicit_defaults_for_timestamp as well as new
    errors raised for invalid MyISAM indexes.
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 MySQLdb 方言和 PyMySQL 等变体中的 bug，其中连接时对“unicode 返回”进行额外检查，明确使用“utf8”字符集，而在
    MySQL 8.0 中会发出警告，建议使用 utf8mb4。现在已经用 utf8mb4 替换了这个。MySQL 方言的文档也已更新，以在所有示例中指定 utf8mb4。还对测试套件进行了其他更改，以使用
    utf8mb3 字符集和数据库（在某些极端情况下，utf8mb4 存在排序问题），以及支持 MySQL 8.0 中的配置默认更改，例如 explicit_defaults_for_timestamp
    以及为无效 MyISAM 索引引发的新错误。
- en: 'References: [#4283](https://www.sqlalchemy.org/trac/ticket/4283)'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4283](https://www.sqlalchemy.org/trac/ticket/4283)
- en: '**[mysql] [bug]**'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: The [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    construct now accommodates a [`Join`](../core/selectable.html#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") object as supported by MySQL for UPDATE..FROM.
    As the construct already accepted an alias object for a similar purpose, the feature
    of UPDATE against a non-table was already implied so this has been added.
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Update`](../core/dml.html#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    结构现在支持 [`Join`](../core/selectable.html#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    对象，这是 MySQL 对 UPDATE..FROM 支持的方式。由于该结构已经接受了一个别名对象用于类似的目的，因此已经隐含了对非表进行 UPDATE 的功能，因此现在已经添加了此功能。'
- en: 'References: [#3645](https://www.sqlalchemy.org/trac/ticket/3645)'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3645](https://www.sqlalchemy.org/trac/ticket/3645)
- en: sqlite
  id: totrans-272
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Fixed issue in test suite where SQLite 3.24 added a new reserved word that conflicted
    with a usage in TypeReflectionTest. Pull request courtesy Nils Philippsen.
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了测试套件中的问题，在 SQLite 3.24 中添加了一个新的保留字，与 TypeReflectionTest 中的使用冲突。Pull request
    由 Nils Philippsen 提供。
- en: mssql
  id: totrans-275
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed bug in MSSQL reflection where when two same-named tables in different
    schemas had same-named primary key constraints, foreign key constraints referring
    to one of the tables would have their columns doubled, causing errors. Pull request
    courtesy Sean Dunn.
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 MSSQL 反射中的 bug，在不同模式中具有相同名称的两个表具有相同名称的主键约束时，引用其中一个表的外键约束的列将会重复，导致错误。Pull
    request 由 Sean Dunn 提供。
- en: 'References: [#4288](https://www.sqlalchemy.org/trac/ticket/4288)'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4288](https://www.sqlalchemy.org/trac/ticket/4288)
- en: '**[mssql] [bug] [py3k]**'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug] [py3k]**'
- en: Fixed issue within the SQL Server dialect under Python 3 where when running
    against a non-standard SQL server database that does not contain either the “sys.dm_exec_sessions”
    or “sys.dm_pdw_nodes_exec_sessions” views, leading to a failure to fetch the isolation
    level, the error raise would fail due to an UnboundLocalError.
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 Python 3 下运行时针对非标准 SQL Server 数据库的问题，在这种数据库中不包含“sys.dm_exec_sessions”或“sys.dm_pdw_nodes_exec_sessions”视图，导致无法获取隔离级别时，由于
    UnboundLocalError 而失败。
- en: 'References: [#4273](https://www.sqlalchemy.org/trac/ticket/4273)'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4273](https://www.sqlalchemy.org/trac/ticket/4273)
- en: oracle
  id: totrans-282
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [feature]**'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [feature]**'
- en: Added a new event currently used only by the cx_Oracle dialect, `DialectEvents.setiputsizes()`.
    The event passes a dictionary of [`BindParameter`](../core/sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") objects to DBAPI-specific type objects
    that will be passed, after conversion to parameter names, to the cx_Oracle `cursor.setinputsizes()`
    method. This allows both visibility into the setinputsizes process as well as
    the ability to alter the behavior of what datatypes are passed to this method.
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的事件，目前只有 cx_Oracle 方言使用，`DialectEvents.setiputsizes()`。该事件将 [`BindParameter`](../core/sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") 对象的字典传递给特定于 DBAPI 的类型对象，这些对象将被传递到 cx_Oracle
    `cursor.setinputsizes()` 方法中。这允许对 setinputsizes 过程进行可见性，并能够修改传递给此方法的数据类型的行为。
- en: See also
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Fine grained control over cx_Oracle data binding performance with setinputsizes](../dialects/oracle.html#cx-oracle-setinputsizes)'
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[使用 setinputsizes 对 cx_Oracle 数据绑定性能进行精细控制](../dialects/oracle.html#cx-oracle-setinputsizes)'
- en: 'References: [#4290](https://www.sqlalchemy.org/trac/ticket/4290)'
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4290](https://www.sqlalchemy.org/trac/ticket/4290)
- en: '**[oracle] [bug] [mysql]**'
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [错误] [mysql]**'
- en: Fixed INSERT FROM SELECT with CTEs for the Oracle and MySQL dialects, where
    the CTE was being placed above the entire statement as is typical with other databases,
    however Oracle and MariaDB 10.2 wants the CTE underneath the “INSERT” segment.
    Note that the Oracle and MySQL dialects don’t yet work when a CTE is applied to
    a subquery inside of an UPDATE or DELETE statement, as the CTE is still applied
    to the top rather than inside the subquery.
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Oracle和MySQL方言的INSERT FROM SELECT与CTEs一起使用时的问题，其中CTE被放置在整个语句的上方，这与其他数据库的典型做法相同，但是Oracle和MariaDB
    10.2希望CTE位于“INSERT”段的下方。请注意，当将CTE应用于UPDATE或DELETE语句内部的子查询时，Oracle和MySQL方言尚不起作用，因为CTE仍然应用于顶部而不是内部子查询。
- en: 'References: [#4275](https://www.sqlalchemy.org/trac/ticket/4275)'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4275](https://www.sqlalchemy.org/trac/ticket/4275)
- en: misc
  id: totrans-291
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[feature] [ext]**'
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[功能] [扩展]**'
- en: Added new attribute [`Query.lazy_loaded_from`](../orm/queryguide/query.html#sqlalchemy.orm.Query.lazy_loaded_from
    "sqlalchemy.orm.Query.lazy_loaded_from") which is populated with an [`InstanceState`](../orm/internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") that is using this [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") in order to lazy load a relationship. The rationale for
    this is that it serves as a hint for the horizontal sharding feature to use, such
    that the identity token of the state can be used as the default identity token
    to use for the query within id_chooser().
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新属性[`Query.lazy_loaded_from`](../orm/queryguide/query.html#sqlalchemy.orm.Query.lazy_loaded_from
    "sqlalchemy.orm.Query.lazy_loaded_from")，其中填充了一个使用此[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")来延迟加载关系的[`InstanceState`](../orm/internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")。这样做的理由是它作为水平分片功能的提示，使得状态的标识令牌可以作为查询中id_chooser()的默认标识令牌使用。
- en: 'References: [#4243](https://www.sqlalchemy.org/trac/ticket/4243)'
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4243](https://www.sqlalchemy.org/trac/ticket/4243)
- en: '**[bug] [py3k]**'
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [py3k]**'
- en: Replaced the usage of inspect.formatargspec() with a vendored version copied
    from the Python standard library, as inspect.formatargspec() is deprecated and
    as of Python 3.7.0 is emitting a warning.
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用从Python标准库复制的一个供应版本替换了inspect.formatargspec()的使用，因为inspect.formatargspec()已被弃用，并且从Python
    3.7.0开始发出警告。
- en: 'References: [#4291](https://www.sqlalchemy.org/trac/ticket/4291)'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4291](https://www.sqlalchemy.org/trac/ticket/4291)
- en: 1.2.8
  id: totrans-298
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.2.8
- en: 'Released: May 28, 2018'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2018年5月28日
- en: orm
  id: totrans-300
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed regression in 1.2.7 caused by [#4228](https://www.sqlalchemy.org/trac/ticket/4228),
    which itself was fixing a 1.2-level regression, where the `query_cls` callable
    passed to a [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    was assumed to be a subclass of [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") with class method availability, as opposed to an arbitrary
    callable. In particular, the dogpile caching example illustrates `query_cls` as
    a function and not a [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") subclass.
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于[#4228](https://www.sqlalchemy.org/trac/ticket/4228)引起的1.2.7中的回归已修复，该回归本身是修复1.2级别回归的，其中假定传递给[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")的`query_cls`可调用对象是[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")的子类，并具有类方法可用性，而不是任意可调用对象。特别是，dogpile缓存示例说明了`query_cls`作为函数而不是[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")子类。
- en: 'References: [#4256](https://www.sqlalchemy.org/trac/ticket/4256)'
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4256](https://www.sqlalchemy.org/trac/ticket/4256)
- en: '**[orm] [bug]**'
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed a long-standing regression that occurred in version 1.0, which prevented
    the use of a custom `MapperOption` that alters the _params of a [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object for a lazy load, since the lazy loader itself would
    overwrite those parameters. This applies to the “temporal range” example on the
    wiki. Note however that the [`Query.populate_existing()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing") method is now required in order to rewrite
    the mapper options associated with an object already loaded in the identity map.
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了1.0版本中长期存在的回归问题，该问题阻止了使用自定义`MapperOption`来改变[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象的_params以进行延迟加载，因为延迟加载器本身会覆盖这些参数。这适用于维基上的“时间范围”示例。但请注意，现在需要使用[`Query.populate_existing()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing")方法来重写与已加载到标识映射中的对象相关联的映射器选项。
- en: As part of this change, a custom defined `MapperOption` will now cause lazy
    loaders related to the target object to use a non-baked query by default unless
    the `MapperOption._generate_cache_key()` method is implemented. In particular,
    this repairs one regression which occurred when using the dogpile.cache “advanced”
    example, which was not returning cached results and instead emitting SQL due to
    an incompatibility with the baked query loader; with the change, the `RelationshipCache`
    option included for many releases in the dogpile example will disable the “baked”
    query altogether. Note that the dogpile example is also modernized to avoid both
    of these issues as part of issue [#4258](https://www.sqlalchemy.org/trac/ticket/4258).
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为这一变更的一部分，现在自定义定义的`MapperOption`将导致与目标对象相关的延迟加载器默认使用非烘焙查询，除非实现了`MapperOption._generate_cache_key()`方法。特别是，这修复了一个回归，当使用dogpile.cache的“高级”示例时发生了问题，该示例由于与烘焙查询加载器不兼容而未返回缓存结果，而是发出SQL；通过这一变更，dogpile示例中包含的多个版本的`RelationshipCache`选项将完全禁用“烘焙”查询。请注意，dogpile示例也经过现代化处理，以避免这些问题，作为问题[#4258](https://www.sqlalchemy.org/trac/ticket/4258)的一部分。
- en: 'References: [#4128](https://www.sqlalchemy.org/trac/ticket/4128)'
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4128](https://www.sqlalchemy.org/trac/ticket/4128)
- en: '**[orm] [bug]**'
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where the new `Result.with_post_criteria()` method would not interact
    with a subquery-eager loader correctly, in that the “post criteria” would not
    be applied to embedded subquery eager loaders. This is related to [#4128](https://www.sqlalchemy.org/trac/ticket/4128)
    in that the post criteria feature is now used by the lazy loader.
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新的`Result.with_post_criteria()`方法与子查询急切加载器无法正确交互的错误，即“后置条件”不会应用于嵌入式子查询急切加载器。这与[#4128](https://www.sqlalchemy.org/trac/ticket/4128)相关，因为现在延迟加载器使用了后置条件功能。
- en: '**[orm] [bug]**'
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Updated the dogpile.caching example to include new structures that accommodate
    for the “baked” query system, which is used by default within lazy loaders and
    some eager relationship loaders. The dogpile.caching “relationship_caching” and
    “advanced” examples were also broken due to [#4256](https://www.sqlalchemy.org/trac/ticket/4256).
    The issue here is also worked-around by the fix in [#4128](https://www.sqlalchemy.org/trac/ticket/4128).
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新了dogpile.caching示例，包括适应“烘焙”查询系统的新结构，该系统默认在延迟加载器和一些急切关系加载器中使用。dogpile.caching的“relationship_caching”和“advanced”示例也由于[#4256](https://www.sqlalchemy.org/trac/ticket/4256)而中断。这里的问题也通过[#4128](https://www.sqlalchemy.org/trac/ticket/4128)中的修复来解决。
- en: 'References: [#4258](https://www.sqlalchemy.org/trac/ticket/4258)'
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4258](https://www.sqlalchemy.org/trac/ticket/4258)
- en: engine
  id: totrans-313
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [bug]**'
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [bug]**'
- en: Fixed connection pool issue whereby if a disconnection error were raised during
    the connection pool’s “reset on return” sequence in conjunction with an explicit
    transaction opened against the enclosing [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object (such as from calling [`Session.close()`](../orm/session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") without a rollback or commit, or calling [`Connection.close()`](../core/connections.html#sqlalchemy.engine.Connection.close
    "sqlalchemy.engine.Connection.close") without first closing a transaction declared
    with [`Connection.begin()`](../core/connections.html#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin")), a double-checkin would result, which could
    then lead towards concurrent checkouts of the same connection. The double-checkin
    condition is now prevented overall by an assertion, as well as the specific double-checkin
    scenario has been fixed.
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了连接池问题，即如果在连接池的“返回时重置”序列中引发了断开连接错误，并且针对封闭的[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象打开了显式事务（例如从调用[`Session.close()`](../orm/session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close")而没有回滚或提交，或者在没有首先关闭使用[`Connection.begin()`](../core/connections.html#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin")声明的事务的情况下调用[`Connection.close()`](../core/connections.html#sqlalchemy.engine.Connection.close
    "sqlalchemy.engine.Connection.close")），将导致双重签入，这可能会导致对同一连接的并发签出。现在通过断言总体上防止了双重签入条件，同时还修复了特定的双重签入场景。
- en: 'References: [#4252](https://www.sqlalchemy.org/trac/ticket/4252)'
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4252](https://www.sqlalchemy.org/trac/ticket/4252)
- en: '**[engine] [bug]**'
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed a reference leak issue where the values of the parameter dictionary used
    in a statement execution would remain referenced by the “compiled cache”, as a
    result of storing the key view used by Python 3 dictionary keys(). Pull request
    courtesy Olivier Grisel.
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了引用泄漏问题，即在语句执行中使用的参数字典的值仍然被“编译缓存”引用，因为存储了 Python 3 字典 keys() 使用的键视图。感谢 Olivier
    Grisel 提交的拉取请求。
- en: sql
  id: totrans-319
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where the “ambiguous literal” error message used when interpreting
    literal values as SQL expression values would encounter a tuple value, and fail
    to format the message properly. Pull request courtesy Miguel Ventura.
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在将文字值解释为 SQL 表达式值时遇到元组值时使用的“模棱两可的文字”错误消息，并且未能正确格式化消息的问题。感谢 Miguel Ventura
    提交的拉取请求。
- en: mssql
  id: totrans-322
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed a 1.2 regression caused by [#4061](https://www.sqlalchemy.org/trac/ticket/4061)
    where the SQL Server “BIT” type would be considered to be “native boolean”. The
    goal here was to avoid creating a CHECK constraint on the column, however the
    bigger issue is that the BIT value does not behave like a true/false constant
    and cannot be interpreted as a standalone expression, e.g. “WHERE <column>”. The
    SQL Server dialect now goes back to being non-native boolean, but with an extra
    flag that still avoids creating the CHECK constraint.
  id: totrans-324
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由[#4061](https://www.sqlalchemy.org/trac/ticket/4061)引起的 1.2 版本回归问题，其中 SQL
    Server 的“BIT”类型被认为是“本地布尔”。这里的目标是避免在列上创建 CHECK 约束，然而更大的问题是 BIT 值不像真/假常量那样行为，并且不能被解释为独立表达式，例如“WHERE
    <column>”。SQL Server 方言现在回到非本地布尔，但增加了一个额外的标志，仍然避免创建 CHECK 约束。
- en: 'References: [#4250](https://www.sqlalchemy.org/trac/ticket/4250)'
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4250](https://www.sqlalchemy.org/trac/ticket/4250)
- en: oracle
  id: totrans-326
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: The Oracle BINARY_FLOAT and BINARY_DOUBLE datatypes now participate within cx_Oracle.setinputsizes(),
    passing along NATIVE_FLOAT, so as to support the NaN value. Additionally, [`BINARY_FLOAT`](../dialects/oracle.html#sqlalchemy.dialects.oracle.BINARY_FLOAT
    "sqlalchemy.dialects.oracle.BINARY_FLOAT"), [`BINARY_DOUBLE`](../dialects/oracle.html#sqlalchemy.dialects.oracle.BINARY_DOUBLE
    "sqlalchemy.dialects.oracle.BINARY_DOUBLE") and `DOUBLE_PRECISION` now subclass
    [`Float`](../core/type_basics.html#sqlalchemy.types.Float "sqlalchemy.types.Float"),
    since these are floating point datatypes, not decimal. These datatypes were already
    defaulting the [`Float.asdecimal`](../core/type_basics.html#sqlalchemy.types.Float.params.asdecimal
    "sqlalchemy.types.Float") flag to False in line with what [`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float") already does.
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Oracle的BINARY_FLOAT和BINARY_DOUBLE数据类型现在在cx_Oracle.setinputsizes()中参与，传递NATIVE_FLOAT，以支持NaN值。此外，[`BINARY_FLOAT`](../dialects/oracle.html#sqlalchemy.dialects.oracle.BINARY_FLOAT
    "sqlalchemy.dialects.oracle.BINARY_FLOAT")、[`BINARY_DOUBLE`](../dialects/oracle.html#sqlalchemy.dialects.oracle.BINARY_DOUBLE
    "sqlalchemy.dialects.oracle.BINARY_DOUBLE")和`DOUBLE_PRECISION`现在是[`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float")的子类，因为这些是浮点数据类型，而不是十进制数据类型。这些数据类型已经默认将[`Float.asdecimal`](../core/type_basics.html#sqlalchemy.types.Float.params.asdecimal
    "sqlalchemy.types.Float")标志设置为False，以与[`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float")的行为保持一致。
- en: 'References: [#4264](https://www.sqlalchemy.org/trac/ticket/4264)'
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4264](https://www.sqlalchemy.org/trac/ticket/4264)
- en: '**[oracle] [bug]**'
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Added reflection capabilities for the [`BINARY_FLOAT`](../dialects/oracle.html#sqlalchemy.dialects.oracle.BINARY_FLOAT
    "sqlalchemy.dialects.oracle.BINARY_FLOAT"), [`BINARY_DOUBLE`](../dialects/oracle.html#sqlalchemy.dialects.oracle.BINARY_DOUBLE
    "sqlalchemy.dialects.oracle.BINARY_DOUBLE") datatypes.
  id: totrans-331
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为[`BINARY_FLOAT`](../dialects/oracle.html#sqlalchemy.dialects.oracle.BINARY_FLOAT
    "sqlalchemy.dialects.oracle.BINARY_FLOAT")、[`BINARY_DOUBLE`](../dialects/oracle.html#sqlalchemy.dialects.oracle.BINARY_DOUBLE
    "sqlalchemy.dialects.oracle.BINARY_DOUBLE")数据类型添加了反射功能。
- en: '**[oracle] [bug]**'
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Altered the Oracle dialect such that when an [`Integer`](../core/type_basics.html#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer") type is in use, the cx_Oracle.NUMERIC type is set
    up for setinputsizes(). In SQLAlchemy 1.1 and earlier, cx_Oracle.NUMERIC was passed
    for all numeric types unconditionally, and in 1.2 this was removed to allow for
    better numeric precision. However, for integers, some database/client setups will
    fail to coerce boolean values True/False into integers which introduces regressive
    behavior when using SQLAlchemy 1.2\. Overall, the setinputsizes logic seems like
    it will need a lot more flexibility going forward so this is a start for that.
  id: totrans-333
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更改了Oracle方言，以便在使用[`Integer`](../core/type_basics.html#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer")类型时，设置cx_Oracle.NUMERIC类型的setinputsizes()。在SQLAlchemy
    1.1及更早版本中，cx_Oracle.NUMERIC无条件地传递给所有数值类型，并且在1.2中已删除，以允许更好的数值精度。但是，对于整数，一些数据库/客户端设置将无法将布尔值True/False强制转换为整数，这在使用SQLAlchemy
    1.2时引入了回归行为。总的来说，setinputsizes逻辑似乎需要更多的灵活性，这是一个开始。
- en: 'References: [#4259](https://www.sqlalchemy.org/trac/ticket/4259)'
  id: totrans-334
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4259](https://www.sqlalchemy.org/trac/ticket/4259)
- en: tests
  id: totrans-335
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [bug]**'
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[tests] [bug]**'
- en: Fixed a bug in the test suite where if an external dialect returned `None` for
    `server_version_info`, the exclusion logic would raise an `AttributeError`.
  id: totrans-337
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了测试套件中的一个bug，如果外部方言返回`None`作为`server_version_info`，排除逻辑将引发`AttributeError`。
- en: 'References: [#4249](https://www.sqlalchemy.org/trac/ticket/4249)'
  id: totrans-338
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4249](https://www.sqlalchemy.org/trac/ticket/4249)
- en: misc
  id: totrans-339
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [ext]**'
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: The horizontal sharding extension now makes use of the identity token added
    to ORM identity keys as part of [#4137](https://www.sqlalchemy.org/trac/ticket/4137),
    when an object refresh or column-based deferred load or unexpiration operation
    occurs. Since we know the “shard” that the object originated from, we make use
    of this value when refreshing, thereby avoiding queries against other shards that
    don’t match this object’s identity in any case.
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 水平分片扩展现在利用了作为[#4137](https://www.sqlalchemy.org/trac/ticket/4137)的一部分添加到ORM身份密钥中的身份令牌，当对象刷新或基于列的延迟加载或取消过期操作发生时。由于我们知道对象的“分片”来自哪里，所以在刷新时我们利用了这个值，从而避免针对其他不匹配此对象身份的分片的查询。
- en: 'References: [#4247](https://www.sqlalchemy.org/trac/ticket/4247)'
  id: totrans-342
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4247](https://www.sqlalchemy.org/trac/ticket/4247)
- en: '**[bug] [ext]**'
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed a race condition which could occur if automap [`AutomapBase.prepare()`](../orm/extensions/automap.html#sqlalchemy.ext.automap.AutomapBase.prepare
    "sqlalchemy.ext.automap.AutomapBase.prepare") were used within a multi-threaded
    context against other threads which may call [`configure_mappers()`](../orm/mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") as a result of use of other mappers. The unfinished
    mapping work of automap is particularly sensitive to being pulled in by a [`configure_mappers()`](../orm/mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") step leading to errors.
  id: totrans-344
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个竞争条件，可能会在多线程环境中使用automap [`AutomapBase.prepare()`](../orm/extensions/automap.html#sqlalchemy.ext.automap.AutomapBase.prepare
    "sqlalchemy.ext.automap.AutomapBase.prepare") 与其他可能调用 [`configure_mappers()`](../orm/mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") 的线程同时进行时发生。 automap的未完成映射工作特别容易被 [`configure_mappers()`](../orm/mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") 步骤所引入，导致错误。
- en: 'References: [#4266](https://www.sqlalchemy.org/trac/ticket/4266)'
  id: totrans-345
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4266](https://www.sqlalchemy.org/trac/ticket/4266)
- en: 1.2.7
  id: totrans-346
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.2.7
- en: 'Released: April 20, 2018'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2018年4月20日
- en: orm
  id: totrans-348
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression in 1.2 within sharded query feature where the new “identity_token”
    element was not being correctly considered within the scope of a lazy load operation,
    when searching the identity map for a related many-to-one element. The new behavior
    will allow for making use of the “id_chooser” in order to determine the best identity
    key to retrieve from the identity map. In order to achieve this, some refactoring
    of 1.2’s “identity_token” approach has made some slight changes to the implementation
    of `ShardedQuery` which should be noted for other derivations of this class.
  id: totrans-350
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了1.2版本中分片查询功能中的回归问题，其中新的“identity_token”元素在搜索相关的多对一元素时，在延迟加载操作的范围内未被正确考虑。新的行为将允许利用“id_chooser”来确定从身份映射中检索的最佳身份键。为了实现这一点，对1.2的“identity_token”方法进行了一些重构，对`ShardedQuery`的实现进行了一些细微更改，其他派生类应该注意这些更改。
- en: 'References: [#4228](https://www.sqlalchemy.org/trac/ticket/4228)'
  id: totrans-351
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4228](https://www.sqlalchemy.org/trac/ticket/4228)
- en: '**[orm] [bug]**'
  id: totrans-352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue in single-inheritance loading where the use of an aliased entity
    against a single-inheritance subclass in conjunction with the [`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from") method would cause the SQL to be rendered
    with the unaliased table mixed in to the query, causing a cartesian product. In
    particular this was affecting the new “selectin” loader when used against a single-inheritance
    subclass.
  id: totrans-353
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了单继承加载中的问题，其中在使用[`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from")方法针对单继承子类使用别名实体时，会导致SQL呈现为未别名化的表混入查询，导致笛卡尔积。特别是当针对单继承子类使用新的“selectin”加载器时，会受到影响。
- en: 'References: [#4241](https://www.sqlalchemy.org/trac/ticket/4241)'
  id: totrans-354
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4241](https://www.sqlalchemy.org/trac/ticket/4241)
- en: sql
  id: totrans-355
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where the compilation of an INSERT statement with the “literal_binds”
    option that also uses an explicit sequence and “inline” generation, as on PostgreSQL
    and Oracle, would fail to accommodate the extra keyword argument within the sequence
    processing routine.
  id: totrans-357
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用“literal_binds”选项编译带有显式序列和“inline”生成的INSERT语句时，例如在PostgreSQL和Oracle上，会在序列处理过程中无法容纳额外关键字参数的问题。
- en: 'References: [#4231](https://www.sqlalchemy.org/trac/ticket/4231)'
  id: totrans-358
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4231](https://www.sqlalchemy.org/trac/ticket/4231)
- en: postgresql
  id: totrans-359
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added new PG type [`REGCLASS`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.REGCLASS
    "sqlalchemy.dialects.postgresql.REGCLASS") which assists in casting table names
    to OID values. Pull request courtesy Sebastian Bank.
  id: totrans-361
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的PG类型[`REGCLASS`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.REGCLASS
    "sqlalchemy.dialects.postgresql.REGCLASS")，有助于将表名转换为OID值。感谢Sebastian Bank的拉取请求。
- en: 'References: [#4160](https://www.sqlalchemy.org/trac/ticket/4160)'
  id: totrans-362
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4160](https://www.sqlalchemy.org/trac/ticket/4160)
- en: '**[postgresql] [bug]**'
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug where the special “not equals” operator for the PostgreSQL “range”
    datatypes such as DATERANGE would fail to render “IS NOT NULL” when compared to
    the Python `None` value.
  id: totrans-364
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了对于PostgreSQL“range”数据类型（如DATERANGE）的特殊“不等于”运算符与Python的`None`值进行比较时，无法呈现“IS
    NOT NULL”的错误。
- en: 'References: [#4229](https://www.sqlalchemy.org/trac/ticket/4229)'
  id: totrans-365
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4229](https://www.sqlalchemy.org/trac/ticket/4229)
- en: mssql
  id: totrans-366
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-367
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed 1.2 regression caused by [#4060](https://www.sqlalchemy.org/trac/ticket/4060)
    where the query used to reflect SQL Server cross-schema foreign keys was limiting
    the criteria incorrectly.
  id: totrans-368
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由 [#4060](https://www.sqlalchemy.org/trac/ticket/4060) 引起的 1.2 版本回归，其中用于反映
    SQL Server 跨模式外键的查询错误地限制了条件。
- en: 'References: [#4234](https://www.sqlalchemy.org/trac/ticket/4234)'
  id: totrans-369
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4234](https://www.sqlalchemy.org/trac/ticket/4234)
- en: oracle
  id: totrans-370
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [错误]**'
- en: The Oracle NUMBER datatype is reflected as INTEGER if the precision is NULL
    and the scale is zero, as this is how INTEGER values come back when reflected
    from Oracle’s tables. Pull request courtesy Kent Bower.
  id: totrans-372
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果精度为 NULL 并且比例为零，则 Oracle NUMBER 数据类型将反映为 INTEGER，因为这是从 Oracle 表中反映 INTEGER
    值时的方式。感谢 Kent Bower 的拉取请求。
- en: 1.2.6
  id: totrans-373
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.2.6
- en: 'Released: March 30, 2018'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2018年3月30日
- en: orm
  id: totrans-375
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM
- en: '**[orm] [bug]**'
  id: totrans-376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [错误]**'
- en: Fixed bug where using [`Mutable.associate_with()`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.Mutable.associate_with
    "sqlalchemy.ext.mutable.Mutable.associate_with") or [`Mutable.as_mutable()`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.Mutable.as_mutable
    "sqlalchemy.ext.mutable.Mutable.as_mutable") in conjunction with a class that
    has non- primary mappers set up with alternatively-named attributes would produce
    an attribute error. Since non-primary mappers are not used for persistence, the
    mutable extension now excludes non-primary mappers from its instrumentation steps.
  id: totrans-377
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，当与具有用不同名称属性设置的非主映射器的类一起使用 [`Mutable.associate_with()`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.Mutable.associate_with
    "sqlalchemy.ext.mutable.Mutable.associate_with") 或 [`Mutable.as_mutable()`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.Mutable.as_mutable
    "sqlalchemy.ext.mutable.Mutable.as_mutable") 时，会产生属性错误。由于非主映射器不用于持久性，mutable 扩展现在将非主映射器排除在其仪器化步骤之外。
- en: 'References: [#4215](https://www.sqlalchemy.org/trac/ticket/4215)'
  id: totrans-378
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4215](https://www.sqlalchemy.org/trac/ticket/4215)
- en: engine
  id: totrans-379
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [bug]**'
  id: totrans-380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误]**'
- en: Fixed bug in connection pool where a connection could be present in the pool
    without all of its “connect” event handlers called, if a previous “connect” handler
    threw an exception; note that the dialects themselves have connect handlers that
    emit SQL, such as those which set transaction isolation, which can fail if the
    database is in a non-available state, but still allows a connection. The connection
    is now invalidated first if any of the connect handlers fail.
  id: totrans-381
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了连接池中的 bug，如果先前的“connect”处理程序抛出异常，则连接可能存在于池中，而没有调用所有“connect”事件处理程序；请注意，方言本身具有发出
    SQL 的 connect 处理程序，例如设置事务隔离的处理程序，如果数据库处于不可用状态，则可能失败，但仍允许连接。如果任何连接处理程序失败，首先使连接无效。
- en: 'References: [#4225](https://www.sqlalchemy.org/trac/ticket/4225)'
  id: totrans-382
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4225](https://www.sqlalchemy.org/trac/ticket/4225)
- en: sql
  id: totrans-383
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SQL
- en: '**[sql] [bug]**'
  id: totrans-384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL] [错误]**'
- en: Fixed a regression that occurred from the previous fix to [#4204](https://www.sqlalchemy.org/trac/ticket/4204)
    in version 1.2.5, where a CTE that refers to itself after the [`CTE.alias()`](../core/selectable.html#sqlalchemy.sql.expression.CTE.alias
    "sqlalchemy.sql.expression.CTE.alias") method has been called would not refer
    to itself correctly.
  id: totrans-385
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 1.2.5 版本中从先前对 [#4204](https://www.sqlalchemy.org/trac/ticket/4204) 的修复中发生的回归，其中在调用
    [`CTE.alias()`](../core/selectable.html#sqlalchemy.sql.expression.CTE.alias "sqlalchemy.sql.expression.CTE.alias")
    方法后引用自身的 CTE 将无法正确引用自身。
- en: 'References: [#4204](https://www.sqlalchemy.org/trac/ticket/4204)'
  id: totrans-386
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4204](https://www.sqlalchemy.org/trac/ticket/4204)
- en: postgresql
  id: totrans-387
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PostgreSQL
- en: '**[postgresql] [feature]**'
  id: totrans-388
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [特性]**'
- en: Added support for “PARTITION BY” in PostgreSQL table definitions, using “postgresql_partition_by”.
    Pull request courtesy Vsevolod Solovyov.
  id: totrans-389
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 PostgreSQL 表定义中“PARTITION BY”的支持，使用“postgresql_partition_by”。感谢 Vsevolod
    Solovyov 的拉取请求。
- en: mssql
  id: totrans-390
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: MSSQL
- en: '**[mssql] [bug]**'
  id: totrans-391
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [错误]**'
- en: Adjusted the SQL Server version detection for pyodbc to only allow for numeric
    tokens, filtering out non-integers, since the dialect does tuple- numeric comparisons
    with this value. This is normally true for all known SQL Server / pyodbc drivers
    in any case.
  id: totrans-392
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了对于 pyodbc 的 SQL Server 版本检测，只允许数字标记，过滤掉非整数，因为该方言使用元组-数字比较这个值。这在所有已知的 SQL
    Server / pyodbc 驱动程序中通常都是正确的。
- en: 'References: [#4227](https://www.sqlalchemy.org/trac/ticket/4227)'
  id: totrans-393
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4227](https://www.sqlalchemy.org/trac/ticket/4227)
- en: oracle
  id: totrans-394
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-395
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [错误]**'
- en: The minimum cx_Oracle version supported is 5.2 (June 2015). Previously, the
    dialect asserted against version 5.0 but as of 1.2.2 we are using some symbols
    that did not appear until 5.2.
  id: totrans-396
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 支持的最低 cx_Oracle 版本为 5.2（2015年6月）。以前，该方言对版本 5.0 进行了断言，但从 1.2.2 开始，我们使用了一些直到 5.2
    才出现的符号。
- en: 'References: [#4211](https://www.sqlalchemy.org/trac/ticket/4211)'
  id: totrans-397
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4211](https://www.sqlalchemy.org/trac/ticket/4211)
- en: misc
  id: totrans-398
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [declarative]**'
  id: totrans-399
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [declarative]**'
- en: Removed a warning that would be emitted when calling upon `__table_args__`,
    `__mapper_args__` as named with a `@declared_attr` method, when called from a
    non-mapped declarative mixin. Calling these directly is documented as the approach
    to use when one is overriding one of these methods on a mapped class. The warning
    still emits for regular attribute names.
  id: totrans-400
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了在调用`__table_args__`、`__mapper_args__`时会发出警告的问题，这些方法是通过`@declared_attr`方法命名的，在非映射的声明性混合类中调用时。在映射类上重写这些方法时，直接调用它们是文档中记录的方法。对于常规属性名称，警告仍会发出。
- en: 'References: [#4221](https://www.sqlalchemy.org/trac/ticket/4221)'
  id: totrans-401
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4221](https://www.sqlalchemy.org/trac/ticket/4221)
- en: 1.2.5
  id: totrans-402
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.2.5
- en: 'Released: March 6, 2018'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2018年3月6日
- en: orm
  id: totrans-404
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-405
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new feature [`Query.only_return_tuples()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.only_return_tuples
    "sqlalchemy.orm.Query.only_return_tuples"). Causes the [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object to return keyed tuple objects unconditionally even
    if the query is against a single entity. Pull request courtesy Eric Atkin.
  id: totrans-406
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新功能[`Query.only_return_tuples()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.only_return_tuples
    "sqlalchemy.orm.Query.only_return_tuples")。导致[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象无条件地返回键值元组对象，即使查询针对单个实体。感谢Eric Atkin的Pull请求。
- en: '**[orm] [bug]**'
  id: totrans-407
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in new “polymorphic selectin” loading when a selection of polymorphic
    objects were to be partially loaded from a relationship lazy loader, leading to
    an “empty IN” condition within the load that raises an error for the “inline”
    form of “IN”.
  id: totrans-408
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新的“多态selectin”加载中的错误，当从关系懒加载器部分加载多态对象的选择时，会导致加载中出现“空IN”条件，在“IN”的“内联”形式中引发错误。
- en: 'References: [#4199](https://www.sqlalchemy.org/trac/ticket/4199)'
  id: totrans-409
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4199](https://www.sqlalchemy.org/trac/ticket/4199)
- en: '**[orm] [bug]**'
  id: totrans-410
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed 1.2 regression where a mapper option that contains an [`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") object, as is typical when using the [`QueryableAttribute.of_type()`](../orm/internals.html#sqlalchemy.orm.QueryableAttribute.of_type
    "sqlalchemy.orm.QueryableAttribute.of_type") method, could not be pickled. 1.1’s
    behavior was to omit the aliased class objects from the path, so this behavior
    is restored.
  id: totrans-411
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了1.2版本中的一个回归问题，其中包含一个[`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass")对象的映射选项，在使用[`QueryableAttribute.of_type()`](../orm/internals.html#sqlalchemy.orm.QueryableAttribute.of_type
    "sqlalchemy.orm.QueryableAttribute.of_type")方法时，无法被pickle化。1.1版本的行为是从路径中省略别名类对象，因此恢复了这种行为。
- en: 'References: [#4209](https://www.sqlalchemy.org/trac/ticket/4209)'
  id: totrans-412
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4209](https://www.sqlalchemy.org/trac/ticket/4209)
- en: sql
  id: totrans-413
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-414
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in :class:.`CTE` construct along the same lines as that of [#4204](https://www.sqlalchemy.org/trac/ticket/4204)
    where a [`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    that was aliased would not copy itself correctly during a “clone” operation as
    is frequent within the ORM as well as when using the [`ClauseElement.params()`](../core/foundation.html#sqlalchemy.sql.expression.ClauseElement.params
    "sqlalchemy.sql.expression.ClauseElement.params") method.
  id: totrans-415
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了:class:.`CTE`构造中的错误，与[#4204](https://www.sqlalchemy.org/trac/ticket/4204)中的问题类似，其中一个被别名的[`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE")在“克隆”操作期间无法正确复制自身，这在ORM中经常发生，也在使用[`ClauseElement.params()`](../core/foundation.html#sqlalchemy.sql.expression.ClauseElement.params
    "sqlalchemy.sql.expression.ClauseElement.params")方法时发生。
- en: 'References: [#4210](https://www.sqlalchemy.org/trac/ticket/4210)'
  id: totrans-416
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4210](https://www.sqlalchemy.org/trac/ticket/4210)
- en: '**[sql] [bug]**'
  id: totrans-417
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in CTE rendering where a [`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE") that was also turned into an [`Alias`](../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") would not render its “ctename AS aliasname”
    clause appropriately if there were more than one reference to the CTE in a FROM
    clause.
  id: totrans-418
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了CTE渲染中的一个错误，当一个[`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE")也被转换为一个[`Alias`](../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias")时，如果在FROM子句中有多个对CTE的引用，则其“ctename AS aliasname”子句不会被适当地渲染。
- en: 'References: [#4204](https://www.sqlalchemy.org/trac/ticket/4204)'
  id: totrans-419
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4204](https://www.sqlalchemy.org/trac/ticket/4204)
- en: '**[sql] [bug]**'
  id: totrans-420
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in new “expanding IN parameter” feature where the bind parameter processors
    for values wasn’t working at all, tests failed to cover this pretty basic case
    which includes that ENUM values weren’t working.
  id: totrans-421
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新“扩展IN参数”功能中绑定参数处理器的错误，其中值根本无法工作，测试未覆盖这个非常基本的情况，其中包括ENUM值无法工作。
- en: 'References: [#4198](https://www.sqlalchemy.org/trac/ticket/4198)'
  id: totrans-422
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4198](https://www.sqlalchemy.org/trac/ticket/4198)
- en: postgresql
  id: totrans-423
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug] [py3k]**'
  id: totrans-424
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [错误] [py3k]**'
- en: Fixed bug in PostgreSQL COLLATE / ARRAY adjustment first introduced in [#4006](https://www.sqlalchemy.org/trac/ticket/4006)
    where new behaviors in Python 3.7 regular expressions caused the fix to fail.
  id: totrans-425
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在PostgreSQL COLLATE / ARRAY调整中首次引入的错误，最初在[#4006](https://www.sqlalchemy.org/trac/ticket/4006)中，Python
    3.7正则表达式的新行为导致修复失败。
- en: 'This change is also **backported** to: 1.1.18'
  id: totrans-426
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.1.18
- en: 'References: [#4208](https://www.sqlalchemy.org/trac/ticket/4208)'
  id: totrans-427
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4208](https://www.sqlalchemy.org/trac/ticket/4208)
- en: mysql
  id: totrans-428
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-429
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [错误]**'
- en: MySQL dialects now query the server version using `SELECT @@version` explicitly
    to the server to ensure we are getting the correct version information back. Proxy
    servers like MaxScale interfere with the value that is passed to the DBAPI’s connection.server_version
    value so this is no longer reliable.
  id: totrans-430
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL方言现在明确使用`SELECT @@version`查询服务器版本，以确保我们获得正确的版本信息。代理服务器如MaxScale会干扰传递给DBAPI的connection.server_version值，因此这不再可靠。
- en: 'This change is also **backported** to: 1.1.18'
  id: totrans-431
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.1.18
- en: 'References: [#4205](https://www.sqlalchemy.org/trac/ticket/4205)'
  id: totrans-432
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4205](https://www.sqlalchemy.org/trac/ticket/4205)
- en: 1.2.4
  id: totrans-433
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.2.4
- en: 'Released: February 22, 2018'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2018年2月22日
- en: orm
  id: totrans-435
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-436
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed 1.2 regression in ORM versioning feature where a mapping against a [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") or [`alias()`](../core/selectable.html#sqlalchemy.sql.expression.alias
    "sqlalchemy.sql.expression.alias") that also used a versioning column against
    the underlying table would fail due to the check added as part of [#3673](https://www.sqlalchemy.org/trac/ticket/3673).
  id: totrans-437
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了ORM版本控制功能中的1.2回归错误，其中针对[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")或[`alias()`](../core/selectable.html#sqlalchemy.sql.expression.alias
    "sqlalchemy.sql.expression.alias")的映射，还使用了对基础表的版本控制列，由于添加的检查部分[#3673](https://www.sqlalchemy.org/trac/ticket/3673)而失败。
- en: 'References: [#4193](https://www.sqlalchemy.org/trac/ticket/4193)'
  id: totrans-438
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4193](https://www.sqlalchemy.org/trac/ticket/4193)
- en: engine
  id: totrans-439
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [bug]**'
  id: totrans-440
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误]**'
- en: Fixed regression caused in 1.2.3 due to fix from [#4181](https://www.sqlalchemy.org/trac/ticket/4181)
    where the changes to the event system involving [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") and `OptionEngine` did not accommodate for event removals,
    which would raise an `AttributeError` when invoked at the class level.
  id: totrans-441
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于从[#4181](https://www.sqlalchemy.org/trac/ticket/4181)修复引起的1.2.3版本的回归错误，事件系统中涉及[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")和`OptionEngine`的更改未考虑到事件的移除，当在类级别调用时会引发`AttributeError`。
- en: 'References: [#4190](https://www.sqlalchemy.org/trac/ticket/4190)'
  id: totrans-442
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4190](https://www.sqlalchemy.org/trac/ticket/4190)
- en: sql
  id: totrans-443
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-444
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误]**'
- en: Fixed bug where CTE expressions would not have their name or alias name quoted
    when the given name is case sensitive or otherwise requires quoting. Pull request
    courtesy Eric Atkin.
  id: totrans-445
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了CTE表达式在给定名称区分大小写或以其他方式需要引号时，其名称或别名未被引用的错误。感谢Eric Atkin提供的拉取请求。
- en: 'References: [#4197](https://www.sqlalchemy.org/trac/ticket/4197)'
  id: totrans-446
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4197](https://www.sqlalchemy.org/trac/ticket/4197)
- en: 1.2.3
  id: totrans-447
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.2.3
- en: 'Released: February 16, 2018'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2018年2月16日
- en: orm
  id: totrans-449
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-450
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Added new argument [`set_attribute.inititator`](../orm/session_api.html#sqlalchemy.orm.attributes.set_attribute.params.inititator
    "sqlalchemy.orm.attributes.set_attribute") to the [`set_attribute()`](../orm/session_api.html#sqlalchemy.orm.attributes.set_attribute
    "sqlalchemy.orm.attributes.set_attribute") function, allowing an event token received
    from a listener function to be propagated to subsequent set events.
  id: totrans-451
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向[`set_attribute()`](../orm/session_api.html#sqlalchemy.orm.attributes.set_attribute
    "sqlalchemy.orm.attributes.set_attribute")函数添加了新参数[`set_attribute.inititator`](../orm/session_api.html#sqlalchemy.orm.attributes.set_attribute.params.inititator
    "sqlalchemy.orm.attributes.set_attribute")，允许从监听器函数接收的事件令牌传播到后续设置事件。
- en: '**[orm] [bug]**'
  id: totrans-452
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed issue in post_update feature where an UPDATE is emitted when the parent
    object has been deleted but the dependent object is not. This issue has existed
    for a long time however since 1.2 now asserts rows matched for post_update, this
    was raising an error.
  id: totrans-453
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 post_update 功能中的问题，在父对象已删除但相关对象尚未删除时，会发出 UPDATE。这个问题已经存在很长时间，然而自从 1.2 版本现在为
    post_update 断言匹配的行，这会引发错误。
- en: 'This change is also **backported** to: 1.1.16'
  id: totrans-454
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个改变也 **回溯** 到：1.1.16
- en: 'References: [#4187](https://www.sqlalchemy.org/trac/ticket/4187)'
  id: totrans-455
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4187](https://www.sqlalchemy.org/trac/ticket/4187)
- en: '**[orm] [bug]**'
  id: totrans-456
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression caused by fix for issue [#4116](https://www.sqlalchemy.org/trac/ticket/4116)
    affecting versions 1.2.2 as well as 1.1.15, which had the effect of mis-calculation
    of the “owning class” of an [`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") as the `NoneType` class in
    some declarative mixin/inheritance situations as well as if the association proxy
    were accessed off of an un-mapped class. The “figure out the owner” logic has
    been replaced by an in-depth routine that searches through the complete mapper
    hierarchy assigned to the class or subclass to determine the correct (we hope)
    match; will not assign the owner if no match is found. An exception is now raised
    if the proxy is used against an un-mapped instance.
  id: totrans-457
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于针对版本 1.2.2 以及 1.1.15 的问题 [#4116](https://www.sqlalchemy.org/trac/ticket/4116)
    的修复导致的回归已经修复，该问题导致在一些声明混合/继承情况下以及如果访问未映射类的关联代理时，误计算 [`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") 的 “拥有类” 为 `NoneType` 类。现在，“找出所有者”的逻辑已被一个深度程序替换，该程序搜索分配给类或子类的完整映射器层次结构，以确定正确（我们希望）的匹配；如果找不到匹配项，则不会分配所有者。如果代理针对未映射实例使用，现在会引发异常。
- en: 'This change is also **backported** to: 1.1.16'
  id: totrans-458
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个改变也 **回溯** 到：1.1.16
- en: 'References: [#4185](https://www.sqlalchemy.org/trac/ticket/4185)'
  id: totrans-459
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4185](https://www.sqlalchemy.org/trac/ticket/4185)
- en: '**[orm] [bug]**'
  id: totrans-460
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where the [`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle") object did not correctly report upon the primary [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") object represented by the bundle, if any. An immediate
    side effect of this issue was that the new selectinload loader strategy wouldn’t
    work with the horizontal sharding extension.
  id: totrans-461
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即 [`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")
    对象没有正确报告由 bundle 表示的主 [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") 对象，如果有的话。这个问题的直接副作用是新的 selectinload 加载策略无法与水平分片扩展一起工作。
- en: 'References: [#4175](https://www.sqlalchemy.org/trac/ticket/4175)'
  id: totrans-462
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4175](https://www.sqlalchemy.org/trac/ticket/4175)
- en: '**[orm] [bug]**'
  id: totrans-463
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in concrete inheritance mapping where user-defined attributes such
    as hybrid properties that mirror the names of mapped attributes from sibling classes
    would be overwritten by the mapper as non-accessible at the instance level. Additionally
    ensured that user-bound descriptors are not implicitly invoked at the class level
    during the mapper configuration stage.
  id: totrans-464
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了具体继承映射中的 bug，即用户定义的属性（例如与兄弟类的映射属性同名的混合属性）将被映射器覆盖为在实例级别不可访问。此外，确保在映射器配置阶段不会隐式调用用户绑定的描述符。
- en: 'References: [#4188](https://www.sqlalchemy.org/trac/ticket/4188)'
  id: totrans-465
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4188](https://www.sqlalchemy.org/trac/ticket/4188)
- en: '**[orm] [bug]**'
  id: totrans-466
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where the [`reconstructor()`](../orm/mapping_api.html#sqlalchemy.orm.reconstructor
    "sqlalchemy.orm.reconstructor") event helper would not be recognized if it were
    applied to the `__init__()` method of the mapped class.
  id: totrans-467
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即 [`reconstructor()`](../orm/mapping_api.html#sqlalchemy.orm.reconstructor
    "sqlalchemy.orm.reconstructor") 事件助手如果应用于映射类的 `__init__()` 方法，则不会被识别。
- en: 'References: [#4178](https://www.sqlalchemy.org/trac/ticket/4178)'
  id: totrans-468
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4178](https://www.sqlalchemy.org/trac/ticket/4178)
- en: engine
  id: totrans-469
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-470
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed bug where events associated with an `Engine` at the class level would
    be doubled when the [`Engine.execution_options()`](../core/connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options") method were used. To achieve this,
    the semi-private class `OptionEngine` no longer accepts events directly at the
    class level and will raise an error; the class only propagates class-level events
    from its parent [`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine").
    Instance-level events continue to work as before.
  id: totrans-471
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了与类级别的 `Engine` 关联的事件在使用 [`Engine.execution_options()`](../core/connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options") 方法时会重复的 bug。为了实现这一点，半私有类 `OptionEngine`
    不再直接在类级别接受事件，并将引发错误；该类仅从其父 [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 传播类级别事件。实例级别事件继续像以前一样工作。
- en: 'References: [#4181](https://www.sqlalchemy.org/trac/ticket/4181)'
  id: totrans-472
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4181](https://www.sqlalchemy.org/trac/ticket/4181)
- en: '**[engine] [bug]**'
  id: totrans-473
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: The [`URL`](../core/engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    object now allows query keys to be specified multiple times where their values
    will be joined into a list. This is to support the plugins feature documented
    at [`CreateEnginePlugin`](../core/connections.html#sqlalchemy.engine.CreateEnginePlugin
    "sqlalchemy.engine.CreateEnginePlugin") which documents that “plugin” can be passed
    multiple times. Additionally, the plugin names can be passed to [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") outside of the URL using the new [`create_engine.plugins`](../core/engines.html#sqlalchemy.create_engine.params.plugins
    "sqlalchemy.create_engine") parameter.
  id: totrans-474
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`URL`](../core/engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    对象现在允许多次指定查询键，其值将被连接成列表。这是为了支持插件功能，文档记录在 [`CreateEnginePlugin`](../core/connections.html#sqlalchemy.engine.CreateEnginePlugin
    "sqlalchemy.engine.CreateEnginePlugin") 中，文档指出“plugin”可以多次传递。此外，插件名称可以通过新的 [`create_engine.plugins`](../core/engines.html#sqlalchemy.create_engine.params.plugins
    "sqlalchemy.create_engine") 参数在 URL 之外传递给 [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")。'
- en: 'References: [#4170](https://www.sqlalchemy.org/trac/ticket/4170)'
  id: totrans-475
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4170](https://www.sqlalchemy.org/trac/ticket/4170)
- en: sql
  id: totrans-476
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-477
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added support for [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    to persist the values of the enumeration, rather than the keys, when using a Python
    pep-435 style enumerated object. The user supplies a callable function that will
    return the string values to be persisted. This allows enumerations against non-string
    values to be value-persistable as well. Pull request courtesy Jon Snyder.
  id: totrans-478
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    的支持，以持久化枚举的值，而不是键，当使用 Python pep-435 风格的枚举对象时。用户提供一个可调用函数，该函数将返回要持久化的字符串值。这允许对非字符串值的枚举也可以进行值持久化。感谢
    Jon Snyder 提交的拉取请求。
- en: 'References: [#3906](https://www.sqlalchemy.org/trac/ticket/3906)'
  id: totrans-479
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3906](https://www.sqlalchemy.org/trac/ticket/3906)
- en: '**[sql] [bug]**'
  id: totrans-480
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where the [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") type wouldn’t handle enum “aliases” correctly, when more
    than one key refers to the same value. Pull request courtesy Daniel Knell.
  id: totrans-481
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")类型无法正确处理枚举“别名”的
    bug，当多个键引用相同值时。感谢 Daniel Knell 提交的拉取请求。
- en: 'References: [#4180](https://www.sqlalchemy.org/trac/ticket/4180)'
  id: totrans-482
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4180](https://www.sqlalchemy.org/trac/ticket/4180)
- en: postgresql
  id: totrans-483
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-484
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: 'Added “SSL SYSCALL error: Operation timed out” to the list of messages that
    trigger a “disconnect” scenario for the psycopg2 driver. Pull request courtesy
    André Cruz.'
  id: totrans-485
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '将“SSL SYSCALL error: Operation timed out”添加到触发 psycopg2 驱动程序“断开连接”场景的消息列表中。感谢
    André Cruz 提交的���取请求。'
- en: 'This change is also **backported** to: 1.1.16'
  id: totrans-486
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**至：1.1.16
- en: '**[postgresql] [bug]**'
  id: totrans-487
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added “TRUNCATE” to the list of keywords accepted by the PostgreSQL dialect
    as an “autocommit”-triggering keyword. Pull request courtesy Jacob Hayes.
  id: totrans-488
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将“TRUNCATE”添加到 PostgreSQL 方言接受的关键字列表中，作为“autocommit”触发关键字。感谢 Jacob Hayes 提交的拉取请求。
- en: 'This change is also **backported** to: 1.1.16'
  id: totrans-489
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**至：1.1.16
- en: sqlite
  id: totrans-490
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-491
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Fixed the import error raised when a platform has neither pysqlite2 nor sqlite3
    installed, such that the sqlite3-related import error is raised, not the pysqlite2
    one which is not the actual failure mode. Pull request courtesy Robin.
  id: totrans-492
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当平台既没有安装 pysqlite2 也没有安装 sqlite3 时引发的导入错误，使得引发与 sqlite3 相关的导入错误，而不是实际的失败模式
    pysqlite2。感谢 Robin 的拉取请求。
- en: oracle
  id: totrans-493
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [feature]**'
  id: totrans-494
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [feature]**'
- en: The ON DELETE options for foreign keys are now part of Oracle reflection. Oracle
    does not support ON UPDATE cascades. Pull request courtesy Miroslav Shubernetskiy.
  id: totrans-495
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 外键的 ON DELETE 选项现在是 Oracle 反射的一部分。Oracle 不支持 ON UPDATE 级联。感谢 Miroslav Shubernetskiy
    的拉取请求。
- en: '**[oracle] [bug]**'
  id: totrans-496
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed bug in cx_Oracle disconnect detection, used by pre_ping and other features,
    where an error could be raised as DatabaseError which includes a numeric error
    code; previously we weren’t checking in this case for a disconnect code.
  id: totrans-497
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 cx_Oracle 断开连接检测中的 bug，该 bug 用于 pre_ping 和其他功能，之前可能会引发一个包含数字错误代码的 DatabaseError；之前我们没有在这种情况下检查断开连接代码。
- en: 'References: [#4182](https://www.sqlalchemy.org/trac/ticket/4182)'
  id: totrans-498
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4182](https://www.sqlalchemy.org/trac/ticket/4182)
- en: tests
  id: totrans-499
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: tests
- en: '**[tests] [bug]**'
  id: totrans-500
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[tests] [bug]**'
- en: 'A test added in 1.2 thought to confirm a Python 2.7 behavior turns out to be
    confirming the behavior only as of Python 2.7.8\. Python bug #8743 still impacts
    set comparison in Python 2.7.7 and earlier, so the test in question involving
    AssociationSet no longer runs for these older Python 2.7 versions.'
  id: totrans-501
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '在 1.2 版本中添加的一个测试，旨在确认 Python 2.7 行为，结果只确认了 Python 2.7.8 的行为。Python bug #8743
    仍然影响 Python 2.7.7 及更早版本中的集合比较，因此涉及 AssociationSet 的测试不再适用于这些较旧的 Python 2.7 版本。'
- en: 'References: [#3265](https://www.sqlalchemy.org/trac/ticket/3265)'
  id: totrans-502
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3265](https://www.sqlalchemy.org/trac/ticket/3265)
- en: misc
  id: totrans-503
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[bug] [pool]**'
  id: totrans-504
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [pool]**'
- en: Fixed a fairly serious connection pool bug where a connection that is acquired
    after being refreshed as a result of a user-defined [`DisconnectionError`](../core/exceptions.html#sqlalchemy.exc.DisconnectionError
    "sqlalchemy.exc.DisconnectionError") or due to the 1.2-released “pre_ping” feature
    would not be correctly reset if the connection were returned to the pool by weakref
    cleanup (e.g. the front-facing object is garbage collected); the weakref would
    still refer to the previously invalidated DBAPI connection which would have the
    reset operation erroneously called upon it instead. This would lead to stack traces
    in the logs and a connection being checked into the pool without being reset,
    which can cause locking issues.
  id: totrans-505
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个相当严重的连接池 bug，当一个连接在由用户定义的 [`DisconnectionError`](../core/exceptions.html#sqlalchemy.exc.DisconnectionError
    "sqlalchemy.exc.DisconnectionError") 或由 1.2 版本发布的“pre_ping”功能刷新后被获取时，如果连接由 weakref
    清理返回到池中（例如前端对象被垃圾回收），则如果 weakref 仍然指向先前失效的 DBAPI 连接，那么将不会正确重置连接；这将导致日志中的堆栈跟踪和一个连接被检入池中而未被重置，这可能导致锁定问题。
- en: 'This change is also **backported** to: 1.1.16'
  id: totrans-506
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.1.16
- en: 'References: [#4184](https://www.sqlalchemy.org/trac/ticket/4184)'
  id: totrans-507
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4184](https://www.sqlalchemy.org/trac/ticket/4184)
- en: 1.2.2
  id: totrans-508
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.2.2
- en: 'Released: January 24, 2018'
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2018年1月24日
- en: orm
  id: totrans-510
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-511
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed 1.2 regression regarding new bulk_replace event where a backref would
    fail to remove an object from the previous owner when a bulk-assignment assigned
    the object to a new owner.
  id: totrans-512
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 1.2 版本中关于新 bulk_replace 事件的回归，其中一个反向引用在批量赋值将对象分配给新所有者时，未能从先前所有者中删除对象。
- en: 'References: [#4171](https://www.sqlalchemy.org/trac/ticket/4171)'
  id: totrans-513
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4171](https://www.sqlalchemy.org/trac/ticket/4171)
- en: mysql
  id: totrans-514
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-515
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Added more MySQL 8.0 reserved words to the MySQL dialect for quoting purposes.
    Pull request courtesy Riccardo Magliocchetti.
  id: totrans-516
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了引用目的，向 MySQL 方言添加了更多 MySQL 8.0 保留字。感谢 Riccardo Magliocchetti 的拉取请求。
- en: mssql
  id: totrans-517
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-518
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Added ODBC error code 10054 to the list of error codes that count as a disconnect
    for ODBC / MSSQL server.
  id: totrans-519
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 ODBC 错误代码 10054 添加到作为 ODBC / MSSQL 服务器断开连接的错误代码列表中。
- en: 'References: [#4164](https://www.sqlalchemy.org/trac/ticket/4164)'
  id: totrans-520
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4164](https://www.sqlalchemy.org/trac/ticket/4164)
- en: oracle
  id: totrans-521
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-522
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: The cx_Oracle dialect now calls setinputsizes() with cx_Oracle.NCHAR unconditionally
    when the NVARCHAR2 datatype, in SQLAlchemy corresponding to sqltypes.Unicode(),
    is in use. Per cx_Oracle’s author this allows the correct conversions to occur
    within the Oracle client regardless of the setting for NLS_NCHAR_CHARACTERSET.
  id: totrans-523
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: cx_Oracle 方言现在在使用 NVARCHAR2 数据类型时，无条件地调用 setinputsizes()，其中 SQLAlchemy 中对应的是
    sqltypes.Unicode()。根据 cx_Oracle 的作者，这样可以在 Oracle 客户端内正确进行转换，而不受 NLS_NCHAR_CHARACTERSET
    设置的影响。
- en: 'References: [#4163](https://www.sqlalchemy.org/trac/ticket/4163)'
  id: totrans-524
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4163](https://www.sqlalchemy.org/trac/ticket/4163)
- en: 1.2.1
  id: totrans-525
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.2.1
- en: 'Released: January 15, 2018'
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2018年1月15日
- en: orm
  id: totrans-527
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-528
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where an object that is expunged during a rollback of a nested or
    subtransaction which also had its primary key mutated would not be correctly removed
    from the session, causing subsequent issues in using the session.
  id: totrans-529
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在嵌套或子事务回滚期间从会话中正确移除的对象的回归，该对象的主键也已发生突变，从而导致使用会话时出现后续问题的错误。
- en: 'This change is also **backported** to: 1.1.16'
  id: totrans-530
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**被回溯**到：1.1.16
- en: 'References: [#4151](https://www.sqlalchemy.org/trac/ticket/4151)'
  id: totrans-531
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4151](https://www.sqlalchemy.org/trac/ticket/4151)
- en: '**[orm] [bug]**'
  id: totrans-532
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression where pickle format of a Load / _UnboundLoad object (e.g. loader
    options) changed and `__setstate__()` was raising an UnboundLocalError for an
    object received from the legacy format, even though an attempt was made to do
    so. tests are now added to ensure this works.
  id: totrans-533
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了pickle格式的Load / _UnboundLoad对象（例如加载器选项）的回归，即使尝试这样做，从旧格式接收到的对象`__setstate__()`也会因为UnboundLocalError而引发异常。现在添加了测试以确保此功能正常工作。
- en: 'References: [#4159](https://www.sqlalchemy.org/trac/ticket/4159)'
  id: totrans-534
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4159](https://www.sqlalchemy.org/trac/ticket/4159)
- en: '**[orm] [bug]**'
  id: totrans-535
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression caused by new lazyload caching scheme in [#3954](https://www.sqlalchemy.org/trac/ticket/3954)
    where a query that makes use of loader options with of_type would cause lazy loads
    of unrelated paths to fail with a TypeError.
  id: totrans-536
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[#3954](https://www.sqlalchemy.org/trac/ticket/3954)中引入的回归，新的lazyload缓存方案导致具有of_type的加载器选项的查询会导致无关路径的惰性加载失败，从而导致TypeError。
- en: 'References: [#4153](https://www.sqlalchemy.org/trac/ticket/4153)'
  id: totrans-537
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4153](https://www.sqlalchemy.org/trac/ticket/4153)
- en: '**[orm] [bug]**'
  id: totrans-538
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in new “selectin” relationship loader where the loader could try to
    load a non-existent relationship when loading a collection of polymorphic objects,
    where only some of the mappers include that relationship, typically when [`PropComparator.of_type()`](../orm/internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type") is being used.
  id: totrans-539
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新的“selectin”关系加载器中的错误，当加载多态对象的集合时，加载器可能会尝试加载不存在的关系，其中只有一些映射器包括该关系，通常在使用[`PropComparator.of_type()`](../orm/internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type")时。
- en: 'References: [#4156](https://www.sqlalchemy.org/trac/ticket/4156)'
  id: totrans-540
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4156](https://www.sqlalchemy.org/trac/ticket/4156)
- en: sql
  id: totrans-541
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-542
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") where using the “multi-values” format
    in combination with [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects as keys rather than strings would fail. Pull
    request courtesy Aubrey Stark-Toller.
  id: totrans-543
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values")中的错误，其中使用“多值”格式与[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象作为键而不是字符串会失败。拉请求由Aubrey Stark-Toller提供。
- en: 'This change is also **backported** to: 1.1.16'
  id: totrans-544
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**被回溯**到：1.1.16
- en: 'References: [#4162](https://www.sqlalchemy.org/trac/ticket/4162)'
  id: totrans-545
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4162](https://www.sqlalchemy.org/trac/ticket/4162)
- en: mssql
  id: totrans-546
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-547
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed regression in 1.2 where newly repaired quoting of collation names in [#3785](https://www.sqlalchemy.org/trac/ticket/3785)
    breaks SQL Server, which explicitly does not understand a quoted collation name.
    Whether or not mixed-case collation names are quoted or not is now deferred down
    to a dialect-level decision so that each dialect can prepare these identifiers
    directly.
  id: totrans-548
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了1.2中新修复的引用中对排序名称的引用在[#3785](https://www.sqlalchemy.org/trac/ticket/3785)中破坏了SQL
    Server的问题，SQL Server明确不理解排序名称的引用。现在，是否引用混合大小写排序名称已延迟到方言级别的决定，以便每个方言可以直接准备这些标识符。
- en: 'References: [#4154](https://www.sqlalchemy.org/trac/ticket/4154)'
  id: totrans-549
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4154](https://www.sqlalchemy.org/trac/ticket/4154)
- en: oracle
  id: totrans-550
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-551
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed regression where the removal of most setinputsizes rules from cx_Oracle
    dialect impacted the TIMESTAMP datatype’s ability to retrieve fractional seconds.
  id: totrans-552
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了从cx_Oracle方言中删除大多数setinputsizes规则导致TIMESTAMP数据类型无法检索小数秒的问题。
- en: 'References: [#4157](https://www.sqlalchemy.org/trac/ticket/4157)'
  id: totrans-553
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4157](https://www.sqlalchemy.org/trac/ticket/4157)
- en: '**[oracle] [bug]**'
  id: totrans-554
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed regression in Oracle imports where a missing comma caused an undefined
    symbol to be present. Pull request courtesy Miroslav Shubernetskiy.
  id: totrans-555
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Oracle导入中的回归，其中缺少逗号导致出现未定义的符号。拉请求由Miroslav Shubernetskiy提供。
- en: tests
  id: totrans-556
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [bug]**'
  id: totrans-557
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[测试] [bug]**'
- en: Removed an oracle-specific requirements rule from the public test suite that
    was interfering with third party dialect suites.
  id: totrans-558
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从公共测试套件中删除了一个特定于 Oracle 的要求规则，该规则干扰了第三方方言套件。
- en: '**[tests] [bug]**'
  id: totrans-559
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[测试] [bug]**'
- en: Added a new exclusion rule group_by_complex_expression which disables tests
    that use “GROUP BY <expr>”, which seems to be not viable for at least two third
    party dialects.
  id: totrans-560
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的排除规则组 `group_by_complex_expression`，禁用了使用“GROUP BY <expr>”的测试，这似乎对至少两个第三方方言不可行。
- en: misc
  id: totrans-561
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [ext]**'
  id: totrans-562
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [扩展]**'
- en: Fixed regression in association proxy due to [#3769](https://www.sqlalchemy.org/trac/ticket/3769)
    (allow for chained any() / has()) where contains() against an association proxy
    chained in the form (o2m relationship, associationproxy(m2o relationship, m2o
    relationship)) would raise an error regarding the re-application of contains()
    on the final link of the chain.
  id: totrans-563
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了联合代理中的回归问题，原因是 [#3769](https://www.sqlalchemy.org/trac/ticket/3769)（允许链式的
    any() / has()）其中一个调用了一个针对联合代理的 contains() 错误链接形式（o2m 关系，联合代理（m2o 关系，m2o 关系）），将在链的最终链接上重新应用
    contains() 时会引发错误。
- en: 'References: [#4150](https://www.sqlalchemy.org/trac/ticket/4150)'
  id: totrans-564
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4150](https://www.sqlalchemy.org/trac/ticket/4150)
- en: 1.2.0
  id: totrans-565
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.2.0
- en: 'Released: December 27, 2017'
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2017年12月27日
- en: orm
  id: totrans-567
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-568
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Added a new data member to the identity key tuple used by the ORM’s identity
    map, known as the “identity_token”. This token defaults to None but may be used
    by database sharding schemes to differentiate objects in memory with the same
    primary key that come from different databases. The horizontal sharding extension
    integrates this token applying the shard identifier to it, thus allowing primary
    keys to be duplicated across horizontally sharded backends.
  id: totrans-569
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 ORM 的标识映射中添加了一个新的数据成员，称为“identity_token”。此标记默认为 None，但可以被数据库分片方案用来区分来自不同数据库的具有相同主键的内存对象。水平分片扩展将此标记应用到
    shard 标识符上，从而允许主键在水平分片后端之间重复。
- en: See also
  id: totrans-570
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另见
- en: '[Identity key enhancements to support sharding](migration_12.html#change-4137)'
  id: totrans-571
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[标识键增强以支持分片](migration_12.html#change-4137)'
- en: 'References: [#4137](https://www.sqlalchemy.org/trac/ticket/4137)'
  id: totrans-572
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4137](https://www.sqlalchemy.org/trac/ticket/4137)
- en: '**[orm] [bug] [ext]**'
  id: totrans-573
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [扩展]**'
- en: Fixed bug where the association proxy would inadvertently link itself to an
    [`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    object if it were called first with the [`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") as a parent, causing errors upon subsequent
    usage.
  id: totrans-574
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了联合代理中的错误，如果先使用 [`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") 作为父类调用联合代理，那么联合代理会意外地将自身链接到 [`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") 对象上，在后续使用时会引发错误。
- en: 'This change is also **backported** to: 1.1.15'
  id: totrans-575
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被 **回溯** 至：1.1.15
- en: 'References: [#4116](https://www.sqlalchemy.org/trac/ticket/4116)'
  id: totrans-576
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4116](https://www.sqlalchemy.org/trac/ticket/4116)
- en: '**[orm] [bug]**'
  id: totrans-577
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in [`contains_eager()`](../orm/queryguide/relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") query option where making use of a path that
    used [`PropComparator.of_type()`](../orm/internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type") to refer to a subclass across more than
    one level of joins would also require that the “alias” argument were provided
    with the same subtype in order to avoid adding unwanted FROM clauses to the query;
    additionally, using [`contains_eager()`](../orm/queryguide/relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") across subclasses that use [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") objects of subclasses as the [`PropComparator.of_type()`](../orm/internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type") argument will also render correctly.
  id: totrans-578
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`contains_eager()`](../orm/queryguide/relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") 查询选项中的错误，使用跨越多个连接级别引用子类的路径会要求“别名”参数也提供相同的子类型，以避免向查询添加不必要的
    FROM 子句；另外，使用 [`contains_eager()`](../orm/queryguide/relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") 跨越使用子类的 [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") 对象作为 [`PropComparator.of_type()`](../orm/internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type") 参数的子类也会正确渲染。
- en: 'References: [#4130](https://www.sqlalchemy.org/trac/ticket/4130)'
  id: totrans-579
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4130](https://www.sqlalchemy.org/trac/ticket/4130)
- en: '**[orm] [bug]**'
  id: totrans-580
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The [`Query.exists()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.exists
    "sqlalchemy.orm.Query.exists") method will now disable eager loaders for when
    the query is rendered. Previously, joined-eager load joins would be rendered unnecessarily
    as well as subquery eager load queries would be needlessly generated. The new
    behavior matches that of the [`Query.subquery()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.subquery
    "sqlalchemy.orm.Query.subquery") method.
  id: totrans-581
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Query.exists()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.exists
    "sqlalchemy.orm.Query.exists")方法现在将在查询呈现时禁用急加载器。以前，连接急加载连接将被不必要地呈现，以及子查询急加载查询将被不必要地生成。新行为与[`Query.subquery()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.subquery
    "sqlalchemy.orm.Query.subquery")方法相匹配。'
- en: 'References: [#4032](https://www.sqlalchemy.org/trac/ticket/4032)'
  id: totrans-582
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4032](https://www.sqlalchemy.org/trac/ticket/4032)
- en: orm declarative
  id: totrans-583
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm声明
- en: '**[orm] [declarative] [bug]**'
  id: totrans-584
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Fixed a bug where a descriptor, which is a mapped column or a relationship elsewhere
    in a hierarchy based on [`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase"), would be referenced during
    a refresh operation, leading to an error since the attribute is not mapped as
    a mapper property. A similar issue can arise for other attributes like the “type”
    column added by [`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase") if the class fails to include
    “concrete=True” in its mapper, however the check here should also prevent that
    scenario from causing a problem.
  id: totrans-585
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，其中描述符（即基于[`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase")的层次结构中的映射列或关系）在刷新操作期间被引用，导致错误，因为该属性未映射为映射器属性。如果类未在其映射器中包含“concrete=True”，则其他属性（如[`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase")添加的“type”列）可能出现类似问题，但此处的检查也应防止该情况引起问题。
- en: 'This change is also **backported** to: 1.1.15'
  id: totrans-586
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.1.15
- en: 'References: [#4124](https://www.sqlalchemy.org/trac/ticket/4124)'
  id: totrans-587
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4124](https://www.sqlalchemy.org/trac/ticket/4124)
- en: engine
  id: totrans-588
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [feature]**'
  id: totrans-589
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: The “password” attribute of the [`URL`](../core/engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.url.URL") object can now be any user-defined or user-subclassed
    string object that responds to the Python `str()` builtin. The object passed will
    be maintained as the datamember `URL.password_original` and will be consulted
    when the `URL.password` attribute is read to produce the string value.
  id: totrans-590
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`URL`](../core/engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.url.URL")对象的“password”属性现在可以是任何用户定义或用户子类化的字符串对象，该对象响应Python的`str()`内置函数。传递的对象将保持为数据成员`URL.password_original`，并且在读取`URL.password`属性以生成字符串值时将进行查询。'
- en: 'References: [#4089](https://www.sqlalchemy.org/trac/ticket/4089)'
  id: totrans-591
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4089](https://www.sqlalchemy.org/trac/ticket/4089)
- en: sql
  id: totrans-592
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-593
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where `__repr__` of [`ColumnDefault`](../core/defaults.html#sqlalchemy.schema.ColumnDefault
    "sqlalchemy.schema.ColumnDefault") would fail if the argument were a tuple. Pull
    request courtesy Nicolas Caniart.
  id: totrans-594
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，其中[`ColumnDefault`](../core/defaults.html#sqlalchemy.schema.ColumnDefault
    "sqlalchemy.schema.ColumnDefault")的`__repr__`如果参数是元组，则会失败。感谢Nicolas Caniart的拉取请求。
- en: 'This change is also **backported** to: 1.1.15'
  id: totrans-595
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.1.15
- en: 'References: [#4126](https://www.sqlalchemy.org/trac/ticket/4126)'
  id: totrans-596
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4126](https://www.sqlalchemy.org/trac/ticket/4126)
- en: '**[sql] [bug]**'
  id: totrans-597
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Reworked the new “autoescape” feature introduced in [New “autoescape” option
    for startswith(), endswith()](migration_12.html#change-2694) in 1.2.0b2 to be
    fully automatic; the escape character now defaults to a forwards slash `"/"` and
    is applied to percent, underscore, as well as the escape character itself, for
    fully automatic escaping. The character can also be changed using the “escape”
    parameter.
  id: totrans-598
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重新设计了在1.2.0b2中引入的[新的“autoescape”选项用于startswith()，endswith()](migration_12.html#change-2694)的“autoescape”功能，使其完全自动化；转义字符现在默认为斜杠`"/"`，并应用于百分号、下划线以及转义字符本身，以实现完全自动转义。也可以使用“escape”参数更改字符。
- en: See also
  id: totrans-599
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[New “autoescape” option for startswith(), endswith()](migration_12.html#change-2694)'
  id: totrans-600
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[新的“autoescape”选项用于startswith()，endswith()](migration_12.html#change-2694)'
- en: 'References: [#2694](https://www.sqlalchemy.org/trac/ticket/2694)'
  id: totrans-601
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2694](https://www.sqlalchemy.org/trac/ticket/2694)
- en: '**[sql] [bug]**'
  id: totrans-602
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where the [`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata") method would not properly accommodate [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") objects that didn’t consist of simple column expressions,
    such as indexes against a [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct, indexes that used SQL expressions
    or `func`, etc. The routine now copies expressions fully to a new [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") object while substituting all table-bound [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects for those of the target table.
  id: totrans-603
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata")方法无法正确适应不仅由简单列表达式组成的[`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")对象的问题，例如针对[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")构造的索引，使用SQL表达式或`func`的索引等。现在该例程会完全复制表达式到一个新的[`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")对象，同时将所有与目标表的列绑定的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象替换为目标表的列。
- en: 'References: [#4147](https://www.sqlalchemy.org/trac/ticket/4147)'
  id: totrans-604
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4147](https://www.sqlalchemy.org/trac/ticket/4147)
- en: '**[sql] [bug]**'
  id: totrans-605
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误]**'
- en: Changed the “visit name” of [`ColumnElement`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") from “column” to “column_element”,
    so that when this element is used as the basis for a user-defined SQL element,
    it is not assumed to behave like a table-bound [`ColumnClause`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause") when processed by various SQL traversal
    utilities, as are commonly used by the ORM.
  id: totrans-606
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将[`ColumnElement`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")的“访问名称”从“column”更改为“column_element”，这样当此元素被用作用户定义的SQL元素的基础时，它不会被假定为在被ORM常用的各种SQL遍历工具处理时表现得像一个绑定到表的[`ColumnClause`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause")。
- en: 'References: [#4142](https://www.sqlalchemy.org/trac/ticket/4142)'
  id: totrans-607
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4142](https://www.sqlalchemy.org/trac/ticket/4142)
- en: '**[sql] [bug] [ext]**'
  id: totrans-608
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误] [扩展]**'
- en: Fixed issue in [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")
    datatype which is essentially the same issue as that of [#3832](https://www.sqlalchemy.org/trac/ticket/3832),
    except not a regression, where column attachment events on top of [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") would not fire correctly, thus interfering with systems
    which rely upon this. A key use case that was broken by this is the use of mixins
    to declare columns that make use of `MutableList.as_mutable()`.
  id: totrans-609
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")数据类型中的问题，本质上与[#3832](https://www.sqlalchemy.org/trac/ticket/3832)的问题相同，只是不是一个回归问题，[`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY")上的列附加事件不会正确触发，从而干扰依赖于此的系统。这个问题破坏的一个关键用例是使用混入来声明使用`MutableList.as_mutable()`的列。
- en: 'References: [#4141](https://www.sqlalchemy.org/trac/ticket/4141)'
  id: totrans-610
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4141](https://www.sqlalchemy.org/trac/ticket/4141)
- en: '**[sql] [bug]**'
  id: totrans-611
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误]**'
- en: Fixed bug in new “expanding bind parameter” feature whereby if multiple params
    were used in one statement, the regular expression would not match the parameter
    name correctly.
  id: totrans-612
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新的“扩展绑定参数”功能中的错误，即如果一个语句中使用了多个参数，则正则表达式将无法正确匹配参数名。
- en: 'References: [#4140](https://www.sqlalchemy.org/trac/ticket/4140)'
  id: totrans-613
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4140](https://www.sqlalchemy.org/trac/ticket/4140)
- en: '**[sql] [enhancement]**'
  id: totrans-614
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [增强]**'
- en: Implemented “DELETE..FROM” syntax for PostgreSQL, MySQL, MS SQL Server (as well
    as within the unsupported Sybase dialect) in a manner similar to how “UPDATE..FROM”
    works. A DELETE statement that refers to more than one table will switch into
    “multi-table” mode and render the appropriate “USING” or multi-table “FROM” clause
    as understood by the database. Pull request courtesy Pieter Mulder.
  id: totrans-615
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为PostgreSQL、MySQL、MS SQL Server（以及不支持的Sybase方言）实现了“DELETE..FROM”语法，类似于“UPDATE..FROM”的工作方式。引用了Pieter
    Mulder的拉取请求。
- en: See also
  id: totrans-616
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Multiple-table criteria support for DELETE](migration_12.html#change-959)'
  id: totrans-617
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[支持多表条件的DELETE](migration_12.html#change-959)'
- en: 'References: [#959](https://www.sqlalchemy.org/trac/ticket/959)'
  id: totrans-618
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#959](https://www.sqlalchemy.org/trac/ticket/959)
- en: postgresql
  id: totrans-619
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-620
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [特性]**'
- en: Added new [`MONEY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.MONEY
    "sqlalchemy.dialects.postgresql.MONEY") datatype. Pull request courtesy Cleber
    J Santos.
  id: totrans-621
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的[`MONEY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.MONEY
    "sqlalchemy.dialects.postgresql.MONEY")数据类型。感谢Cleber J Santos的拉取请求。
- en: mysql
  id: totrans-622
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-623
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: MySQL 5.7.20 now warns for use of the @tx_isolation variable; a version check
    is now performed and uses @transaction_isolation instead to prevent this warning.
  id: totrans-624
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL 5.7.20现在警告使用@tx_isolation变量；现在执行版本检查并使用@transaction_isolation来代替以防止此警告。
- en: 'This change is also **backported** to: 1.1.15'
  id: totrans-625
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.1.15
- en: 'References: [#4120](https://www.sqlalchemy.org/trac/ticket/4120)'
  id: totrans-626
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4120](https://www.sqlalchemy.org/trac/ticket/4120)
- en: '**[mysql] [bug]**'
  id: totrans-627
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed regression from issue 1.2.0b3 where “MariaDB” version comparison can fail
    for some particular MariaDB version strings under Python 3.
  id: totrans-628
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了从问题1.2.0b3中的回归，其中“MariaDB”版本比较在Python 3下可能会失败，对于某些特定的MariaDB版本字符串。
- en: 'References: [#4115](https://www.sqlalchemy.org/trac/ticket/4115)'
  id: totrans-629
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4115](https://www.sqlalchemy.org/trac/ticket/4115)
- en: mssql
  id: totrans-630
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-631
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed bug where sqltypes.BINARY and sqltypes.VARBINARY datatypes would not include
    correct bound-value handlers for pyodbc, which allows the pyodbc.NullParam value
    to be passed that helps with FreeTDS.
  id: totrans-632
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了sqltypes.BINARY和sqltypes.VARBINARY数据类型不包含正确的绑定值处理程序以用于pyodbc的错误，这允许传递帮助FreeTDS的pyodbc.NullParam值。
- en: 'References: [#4121](https://www.sqlalchemy.org/trac/ticket/4121)'
  id: totrans-633
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4121](https://www.sqlalchemy.org/trac/ticket/4121)
- en: oracle
  id: totrans-634
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-635
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Added some additional rules to fully handle `Decimal('Infinity')`, `Decimal('-Infinity')`
    values with cx_Oracle numerics when using `asdecimal=True`.
  id: totrans-636
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一些额外规则，以完全处理`Decimal('Infinity')`，`Decimal('-Infinity')`值与cx_Oracle数字时使用`asdecimal=True`。
- en: 'References: [#4064](https://www.sqlalchemy.org/trac/ticket/4064)'
  id: totrans-637
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4064](https://www.sqlalchemy.org/trac/ticket/4064)
- en: misc
  id: totrans-638
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[misc] [feature]**'
  id: totrans-639
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[misc] [feature]**'
- en: Added a new errors section to the documentation with background about common
    error messages. Selected exceptions within SQLAlchemy will include a link in their
    string output to the relevant section within this page.
  id: totrans-640
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在文档中添加了一个新的错误部分，介绍常见错误消息的背景。SQLAlchemy中的选定异常将在其字符串输出中包含指向此页面相关部分的链接。
- en: '**[enhancement] [ext]**'
  id: totrans-641
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[enhancement] [ext]**'
- en: Added new method `Result.with_post_criteria()` to baked query system, allowing
    non-SQL-modifying transformations to take place after the query has been pulled
    from the cache. Among other things, this method can be used with [`ShardedQuery`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedQuery
    "sqlalchemy.ext.horizontal_shard.ShardedQuery") to set the shard identifier. [`ShardedQuery`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedQuery
    "sqlalchemy.ext.horizontal_shard.ShardedQuery") has also been modified such that
    its `ShardedQuery.get()` method interacts correctly with that of `Result`.
  id: totrans-642
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在烘焙查询系统中添加了新方法`Result.with_post_criteria()`，允许在查询从缓存中拉取后进行非SQL修改转换。此方法可以与[`ShardedQuery`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedQuery
    "sqlalchemy.ext.horizontal_shard.ShardedQuery")一起使用，以设置分片标识符。[`ShardedQuery`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedQuery
    "sqlalchemy.ext.horizontal_shard.ShardedQuery")也已经修改，使其`ShardedQuery.get()`方法与`Result`的方法正确交互。
- en: 'References: [#4135](https://www.sqlalchemy.org/trac/ticket/4135)'
  id: totrans-643
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4135](https://www.sqlalchemy.org/trac/ticket/4135)
- en: 1.2.0b3
  id: totrans-644
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.2.0b3
- en: 'Released: October 13, 2017'
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2017年10月13日
- en: orm
  id: totrans-646
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-647
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where ORM relationship would warn against conflicting sync targets
    (e.g. two relationships would both write to the same column) for sibling classes
    in an inheritance hierarchy, where the two relationships would never actually
    conflict during writes.
  id: totrans-648
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了ORM关系会警告针对在继承层次结构中的兄弟类中的冲突同步目标（例如，两个关系都将写入同一列）的错误，其中两个关系实际上永远不会在写入时发生冲突。
- en: 'This change is also **backported** to: 1.1.15'
  id: totrans-649
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.1.15
- en: 'References: [#4078](https://www.sqlalchemy.org/trac/ticket/4078)'
  id: totrans-650
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4078](https://www.sqlalchemy.org/trac/ticket/4078)
- en: '**[orm] [bug]**'
  id: totrans-651
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where correlated select used against single-table inheritance entity
    would fail to render correctly in the outer query, due to adjustment for single
    inheritance discriminator criteria inappropriately re-applying the criteria to
    the outer query.
  id: totrans-652
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了针对单表继承实体使用相关选择时，在外部查询中无法正确呈现的错误，因为单一继承鉴别器标准的调整不当地重新应用于外部查询。
- en: 'This change is also **backported** to: 1.1.15'
  id: totrans-653
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.1.15
- en: 'References: [#4103](https://www.sqlalchemy.org/trac/ticket/4103)'
  id: totrans-654
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4103](https://www.sqlalchemy.org/trac/ticket/4103)
- en: '**[orm] [bug]**'
  id: totrans-655
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in [`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge") following along similar lines as that of [#4030](https://www.sqlalchemy.org/trac/ticket/4030),
    where an internal check for a target object in the identity map could lead to
    an error if it were to be garbage collected immediately before the merge routine
    actually retrieves the object.
  id: totrans-656
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge")中的错误，遵循与[#4030](https://www.sqlalchemy.org/trac/ticket/4030)类似的线路，其中对于标识映射中的目标对象的内部检查可能会导致错误，如果在合并程序实际检索对象之前立即对其进行垃圾回收。
- en: 'This change is also **backported** to: 1.1.14'
  id: totrans-657
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.1.14
- en: 'References: [#4069](https://www.sqlalchemy.org/trac/ticket/4069)'
  id: totrans-658
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4069](https://www.sqlalchemy.org/trac/ticket/4069)
- en: '**[orm] [bug]**'
  id: totrans-659
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where an [`undefer_group()`](../orm/queryguide/columns.html#sqlalchemy.orm.undefer_group
    "sqlalchemy.orm.undefer_group") option would not be recognized if it extended
    from a relationship that was loading using joined eager loading. Additionally,
    as the bug led to excess work being performed, Python function call counts are
    also improved by 20% within the initial calculation of result set columns, complementing
    the joined eager load improvements of [#3915](https://www.sqlalchemy.org/trac/ticket/3915).
  id: totrans-660
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即如果从使用连接式急加载加载的关系扩展，则不会识别[`undefer_group()`](../orm/queryguide/columns.html#sqlalchemy.orm.undefer_group
    "sqlalchemy.orm.undefer_group")选项。此外，由于该错误导致执行过多的工作，因此在结果集列的初始计算中，Python函数调用次数也提高了20%，这与[#3915](https://www.sqlalchemy.org/trac/ticket/3915)的连接急加载改进相辅相成。
- en: 'This change is also **backported** to: 1.1.14'
  id: totrans-661
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.1.14
- en: 'References: [#4048](https://www.sqlalchemy.org/trac/ticket/4048)'
  id: totrans-662
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4048](https://www.sqlalchemy.org/trac/ticket/4048)
- en: '**[orm] [bug]**'
  id: totrans-663
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in [`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge") where objects in a collection that had the primary
    key attribute set to `None` for a key that is typically autoincrementing would
    be considered to be a database-persisted key for part of the internal deduplication
    process, causing only one object to actually be inserted in the database.
  id: totrans-664
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge")中的错误，其中集合中的对象的主键属性设置为`None`，对于通常是自动递增的键，将被视为数据库持久化键的一部分，导致在内部去重过程中实际上只插入一个对象到数据库中。
- en: 'This change is also **backported** to: 1.1.14'
  id: totrans-665
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.1.14
- en: 'References: [#4056](https://www.sqlalchemy.org/trac/ticket/4056)'
  id: totrans-666
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4056](https://www.sqlalchemy.org/trac/ticket/4056)
- en: '**[orm] [bug]**'
  id: totrans-667
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: An [`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError") is raised when a [`synonym()`](../orm/mapped_attributes.html#sqlalchemy.orm.synonym
    "sqlalchemy.orm.synonym") is used against an attribute that is not against a [`MapperProperty`](../orm/internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty"), such as an association proxy. Previously, a
    recursion overflow would occur trying to locate non-existent attributes.
  id: totrans-668
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当针对不是针对[`MapperProperty`](../orm/internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty")的属性（例如关联代理）使用[`synonym()`](../orm/mapped_attributes.html#sqlalchemy.orm.synonym
    "sqlalchemy.orm.synonym")时，会引发[`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError")。以前，尝试定位不存在的属性会导致递归溢出。
- en: 'This change is also **backported** to: 1.1.14'
  id: totrans-669
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.1.14
- en: 'References: [#4067](https://www.sqlalchemy.org/trac/ticket/4067)'
  id: totrans-670
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4067](https://www.sqlalchemy.org/trac/ticket/4067)
- en: '**[orm] [bug]**'
  id: totrans-671
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression introduced in 1.2.0b1 due to [#3934](https://www.sqlalchemy.org/trac/ticket/3934)
    where the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    would fail to “deactivate” the transaction, if a rollback failed (the target issue
    is when MySQL loses track of a SAVEPOINT). This would cause a subsequent call
    to [`Session.rollback()`](../orm/session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") to raise an error a second time, rather than
    completing and bringing the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") back to ACTIVE.
  id: totrans-672
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于[#3934](https://www.sqlalchemy.org/trac/ticket/3934)引入的1.2.0b1版本中的回归问题已修复，[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")在回滚失败时未能“停用”事务（目标问题是当MySQL丢失SAVEPOINT时）。 这将导致随后调用[`Session.rollback()`](../orm/session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback")再次引发错误，而不是完成并将[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")恢复为活动状态。
- en: 'References: [#4050](https://www.sqlalchemy.org/trac/ticket/4050)'
  id: totrans-673
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4050](https://www.sqlalchemy.org/trac/ticket/4050)
- en: '**[orm] [bug]**'
  id: totrans-674
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where the [`make_transient_to_detached()`](../orm/session_api.html#sqlalchemy.orm.make_transient_to_detached
    "sqlalchemy.orm.make_transient_to_detached") function would expire all attributes
    on the target object, including “deferred” attributes, which has the effect of
    the attribute being undeferred for the next refresh, causing an unexpected load
    of the attribute.
  id: totrans-675
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`make_transient_to_detached()`](../orm/session_api.html#sqlalchemy.orm.make_transient_to_detached
    "sqlalchemy.orm.make_transient_to_detached")函数会使目标对象上的所有属性过期的问题，包括“延迟加载”属性，这会导致属性在下一次刷新时被取消延迟加载，从而导致属性意外加载。
- en: 'References: [#4084](https://www.sqlalchemy.org/trac/ticket/4084)'
  id: totrans-676
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4084](https://www.sqlalchemy.org/trac/ticket/4084)
- en: '**[orm] [bug]**'
  id: totrans-677
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug involving delete-orphan cascade where a related item that becomes
    an orphan before the parent object is part of a session is still tracked as moving
    into orphan status, which results in it being expunged from the session rather
    than being flushed.
  id: totrans-678
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了涉及删除孤立级联的错误，其中在父对象成为会话的一部分之前成为孤立项的相关项仍被跟踪为移动到孤立状态，这导致它被从会话中删除而不是被刷新。
- en: Note
  id: totrans-679
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: This fix was inadvertently merged during the 1.2.0b3 release and was **not added
    to the changelog** at that time. This changelog note was added to the release
    retroactively as of version 1.2.13.
  id: totrans-680
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个修复在1.2.0b3版本发布期间被错误地合并，并且**未被添加到更改日志**中。此更改日志注释已作为1.2.13版本的一部分追加到发布中。
- en: 'References: [#4040](https://www.sqlalchemy.org/trac/ticket/4040)'
  id: totrans-681
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4040](https://www.sqlalchemy.org/trac/ticket/4040)
- en: '**[orm] [bug]**'
  id: totrans-682
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in [“selectin” polymorphic loading, loads subclasses using separate
    IN queries](migration_12.html#change-3948) which prevented “selectin” and “inline”
    settings in a multi-level class hierarchy from interacting together as expected.
  id: totrans-683
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[“selectin”多态加载，使用单独的IN查询加载子类](migration_12.html#change-3948)中的错误，该错误阻止了多级类层次结构中“selectin”和“inline”设置按预期交互。
- en: 'References: [#4026](https://www.sqlalchemy.org/trac/ticket/4026)'
  id: totrans-684
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4026](https://www.sqlalchemy.org/trac/ticket/4026)
- en: '**[orm] [bug]**'
  id: totrans-685
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Removed the warnings that are emitted when the LRU caches employed by the mapper
    as well as loader strategies reach their threshold; the purpose of this warning
    was at first a guard against excess cache keys being generated but became basically
    a check on the “creating many engines” antipattern. While this is still an antipattern,
    the presence of test suites which both create an engine per test as well as raise
    on all warnings will be an inconvenience; it should not be critical that such
    test suites change their architecture just for this warning (though engine-per-test
    suite is always better).
  id: totrans-686
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了当映射器和加载策略使用的LRU缓存达到阈值时发出的警告；最初这个警告的目的是防止生成过多的缓存键，但后来基本上成为“创建许多引擎”反模式的检查。虽然这仍然是一个反模式，但测试套件既为每个测试创建一个引擎又在所有警告上引发的存在将是一个不便；对于这个警告，这样的测试套件改变其架构并不是必要的（尽管每个测试一个引擎的套件总是更好）。
- en: 'References: [#4071](https://www.sqlalchemy.org/trac/ticket/4071)'
  id: totrans-687
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4071](https://www.sqlalchemy.org/trac/ticket/4071)
- en: '**[orm] [bug]**'
  id: totrans-688
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression where the use of a [`undefer_group()`](../orm/queryguide/columns.html#sqlalchemy.orm.undefer_group
    "sqlalchemy.orm.undefer_group") option in conjunction with a lazy loaded relationship
    option would cause an attribute error, due to a bug in the SQL cache key generation
    added in 1.2 as part of [#3954](https://www.sqlalchemy.org/trac/ticket/3954).
  id: totrans-689
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在1.2版本中作为[#3954](https://www.sqlalchemy.org/trac/ticket/3954)的一部分添加的SQL缓存键生成中的错误，导致在与延迟加载关系选项一起使用[`undefer_group()`](../orm/queryguide/columns.html#sqlalchemy.orm.undefer_group
    "sqlalchemy.orm.undefer_group")选项���会导致属性错误。
- en: 'References: [#4049](https://www.sqlalchemy.org/trac/ticket/4049)'
  id: totrans-690
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4049](https://www.sqlalchemy.org/trac/ticket/4049)
- en: '**[orm] [bug]**'
  id: totrans-691
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Modified the change made to the ORM update/delete evaluator in [#3366](https://www.sqlalchemy.org/trac/ticket/3366)
    such that if an unmapped column expression is present in the update or delete,
    if the evaluator can match its name to the mapped columns of the target class,
    a warning is emitted, rather than raising UnevaluatableError. This is essentially
    the pre-1.2 behavior, and is to allow migration for applications that are currently
    relying upon this pattern. However, if the given attribute name cannot be matched
    to the columns of the mapper, the UnevaluatableError is still raised, which is
    what was fixed in [#3366](https://www.sqlalchemy.org/trac/ticket/3366).
  id: totrans-692
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了在[#3366](https://www.sqlalchemy.org/trac/ticket/3366)中对ORM更新/删除评估器所做的更改，如果更新或删除中存在未映射的列表达式，并且评估器可以将其名称与目标类的映射列匹配，将发出警告，而不是引发UnevaluatableError。这本质上是1.2版本之前的行为，目的是允许依赖于此模式的应用程序进行迁移。但是，如果给定的属性名称无法与映射器的列匹配，仍会引发UnevaluatableError，这是在[#3366](https://www.sqlalchemy.org/trac/ticket/3366)中修复的问题。
- en: 'References: [#4073](https://www.sqlalchemy.org/trac/ticket/4073)'
  id: totrans-693
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4073](https://www.sqlalchemy.org/trac/ticket/4073)
- en: orm declarative
  id: totrans-694
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm declarative
- en: '**[orm] [declarative] [bug]**'
  id: totrans-695
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: A warning is emitted if a subclass attempts to override an attribute that was
    declared on a superclass using `@declared_attr.cascading` that the overridden
    attribute will be ignored. This use case cannot be fully supported down to further
    subclasses without more complex development efforts, so for consistency the “cascading”
    is honored all the way down regardless of overriding attributes.
  id: totrans-696
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果子类尝试覆盖在父类上使用`@declared_attr.cascading`声明的属性，则会发出警告，覆盖的属性将被忽略。这种用例无法在更复杂的开发工作下完全支持到更进一步的子类，因此为了一致性，“级联”将一直被遵守，无论覆盖属性如何。
- en: 'References: [#4091](https://www.sqlalchemy.org/trac/ticket/4091)'
  id: totrans-697
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4091](https://www.sqlalchemy.org/trac/ticket/4091)
- en: '**[orm] [declarative] [bug]**'
  id: totrans-698
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: A warning is emitted if the `@declared_attr.cascading` attribute is used with
    a special declarative name such as `__tablename__`, as this has no effect.
  id: totrans-699
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果使用`@declared_attr.cascading`属性与特殊的声明名称（如`__tablename__`）一起使用，将发出警告，因为这没有任何效果。
- en: 'References: [#4092](https://www.sqlalchemy.org/trac/ticket/4092)'
  id: totrans-700
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4092](https://www.sqlalchemy.org/trac/ticket/4092)
- en: engine
  id: totrans-701
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [feature]**'
  id: totrans-702
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: Added `__next__()` and `next()` methods to `ResultProxy`, so that the `next()`
    builtin function works on the object directly. `ResultProxy` has long had an `__iter__()`
    method which already allows it to respond to the `iter()` builtin. The implementation
    for `__iter__()` is unchanged, as performance testing has indicated that iteration
    using a `__next__()` method with `StopIteration` is about 20% slower in both Python
    2.7 and 3.6.
  id: totrans-703
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向`ResultProxy`添加了`__next__()`和`next()`方法，以便`next()`内置函数直接在对象上起作用。`ResultProxy`长期以来已经有一个`__iter__()`方法，允许它响应`iter()`内置函数。`__iter__()`的实现保持不变，因为性能测试表明，使用带有`StopIteration`的`__next__()`方法进行迭代在Python
    2.7和3.6中都要慢大约20%。
- en: 'References: [#4077](https://www.sqlalchemy.org/trac/ticket/4077)'
  id: totrans-704
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4077](https://www.sqlalchemy.org/trac/ticket/4077)
- en: '**[engine] [bug]**'
  id: totrans-705
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Made some adjustments to [`Pool`](../core/pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") and [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") such that recovery logic is not run underneath
    exception catches for `pool.Empty`, `AttributeError`, since when the recovery
    operation itself fails, Python 3 creates a misleading stack trace referring to
    the `Empty` / `AttributeError` as the cause, when in fact these exception catches
    are part of control flow.
  id: totrans-706
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对[`Pool`](../core/pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")和[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")进行了一些调整，使得在`pool.Empty`、`AttributeError`异常捕获中不再运行恢复逻辑，因为当恢复操作本身失败时，Python
    3会创建一个误导性的堆栈跟踪，将`Empty` / `AttributeError`误认为是原因，而实际上这些异常捕获是控制流的一部分。
- en: 'References: [#4028](https://www.sqlalchemy.org/trac/ticket/4028)'
  id: totrans-707
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4028](https://www.sqlalchemy.org/trac/ticket/4028)
- en: sql
  id: totrans-708
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-709
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where the recently added [`ColumnOperators.any_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") and [`ColumnOperators.all_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") methods didn’t work when called
    as methods, as opposed to using the standalone functions [`any_()`](../core/sqlelement.html#sqlalchemy.sql.expression.any_
    "sqlalchemy.sql.expression.any_") and [`all_()`](../core/sqlelement.html#sqlalchemy.sql.expression.all_
    "sqlalchemy.sql.expression.all_"). Also added documentation examples for these
    relatively unintuitive SQL operators.
  id: totrans-710
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了最近添加的 [`ColumnOperators.any_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") 和 [`ColumnOperators.all_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") 方法在作为方法调用时无法正常工作的 bug，而不是使用独立函数
    [`any_()`](../core/sqlelement.html#sqlalchemy.sql.expression.any_ "sqlalchemy.sql.expression.any_")
    和 [`all_()`](../core/sqlelement.html#sqlalchemy.sql.expression.all_ "sqlalchemy.sql.expression.all_")。还为这些相对晦涩的
    SQL 操作符添加了文档示例。
- en: 'This change is also **backported** to: 1.1.15'
  id: totrans-711
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：1.1.15
- en: 'References: [#4093](https://www.sqlalchemy.org/trac/ticket/4093)'
  id: totrans-712
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4093](https://www.sqlalchemy.org/trac/ticket/4093)
- en: '**[sql] [bug]**'
  id: totrans-713
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Added a new method [`DefaultExecutionContext.get_current_parameters()`](../core/internals.html#sqlalchemy.engine.default.DefaultExecutionContext.get_current_parameters
    "sqlalchemy.engine.default.DefaultExecutionContext.get_current_parameters") which
    is used within a function-based default value generator in order to retrieve the
    current parameters being passed to the statement. The new function differs from
    the [`DefaultExecutionContext.current_parameters`](../core/internals.html#sqlalchemy.engine.default.DefaultExecutionContext.current_parameters
    "sqlalchemy.engine.default.DefaultExecutionContext.current_parameters") attribute
    in that it also provides for optional grouping of parameters that correspond to
    a multi-valued “insert” construct. Previously it was not possible to identify
    the subset of parameters that were relevant to the function call.
  id: totrans-714
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新方法 [`DefaultExecutionContext.get_current_parameters()`](../core/internals.html#sqlalchemy.engine.default.DefaultExecutionContext.get_current_parameters
    "sqlalchemy.engine.default.DefaultExecutionContext.get_current_parameters")，该方法在基于函数的默认值生成器中使用，以检索传递给语句的当前参数。这个新函数与
    [`DefaultExecutionContext.current_parameters`](../core/internals.html#sqlalchemy.engine.default.DefaultExecutionContext.current_parameters
    "sqlalchemy.engine.default.DefaultExecutionContext.current_parameters") 属性不同，它还提供了对应于多值“插入”结构的参数的可选分组。以前无法识别与函数调用相关的参数子集。
- en: See also
  id: totrans-715
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Parameter helper for multi-valued INSERT with contextual default generator](migration_12.html#change-4075)'
  id: totrans-716
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[用于具有上下文默认生成器的多值插入的参数助手](migration_12.html#change-4075)'
- en: '[Context-Sensitive Default Functions](../core/defaults.html#context-default-functions)'
  id: totrans-717
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[上下文敏感的默认函数](../core/defaults.html#context-default-functions)'
- en: 'References: [#4075](https://www.sqlalchemy.org/trac/ticket/4075)'
  id: totrans-718
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4075](https://www.sqlalchemy.org/trac/ticket/4075)
- en: '**[sql] [bug]**'
  id: totrans-719
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in new SQL comments feature where table and column comment would not
    be copied when using [`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata").
  id: totrans-720
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新的 SQL 注释功能中的 bug，使用 [`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata") 时，表和列的注释不会被复制。
- en: 'References: [#4087](https://www.sqlalchemy.org/trac/ticket/4087)'
  id: totrans-721
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4087](https://www.sqlalchemy.org/trac/ticket/4087)
- en: '**[sql] [bug]**'
  id: totrans-722
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: In release 1.1, the [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean") type was broken in that boolean coercion via `bool()`
    would occur for backends that did not feature “native boolean”, but would not
    occur for native boolean backends, meaning the string `"0"` now behaved inconsistently.
    After a poll, a consensus was reached that non-boolean values should be raising
    an error, especially in the ambiguous case of string `"0"`; so the [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean") datatype will now raise `ValueError` if an incoming
    value is not within the range `None, True, False, 1, 0`.
  id: totrans-723
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在版本1.1中，[`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean")
    类型存在问题，即通过 `bool()` 进行布尔强制转换会发生在不支持“本地布尔”功能的后端，但不会发生在本地布尔后端，这意味着字符串 `"0"` 现在表现不一致。经过一次投票，达成共识，即非布尔值应该引发错误，特别是���字符串
    `"0"` 的模棱两可情况下；因此，如果传入值不在范围 `None, True, False, 1, 0` 内，[`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean") 数据类型现在将引发 `ValueError`。
- en: See also
  id: totrans-724
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Boolean datatype now enforces strict True/False/None values](migration_12.html#change-4102)'
  id: totrans-725
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[布尔数据类型现在强制True/False/None值](migration_12.html#change-4102)'
- en: 'References: [#4102](https://www.sqlalchemy.org/trac/ticket/4102)'
  id: totrans-726
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4102](https://www.sqlalchemy.org/trac/ticket/4102)
- en: '**[sql] [bug]**'
  id: totrans-727
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Refined the behavior of [`Operators.op()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") such that in all cases, if the [`Operators.op.is_comparison`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op") flag is set to True, the return type
    of the resulting expression will be [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean"), and if the flag is False, the return type of the
    resulting expression will be the same type as that of the left-hand expression,
    which is the typical default behavior of other operators. Also added a new parameter
    [`Operators.op.return_type`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.return_type
    "sqlalchemy.sql.expression.Operators.op") as well as a helper method [`Operators.bool_op()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op").
  id: totrans-728
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 优化了[`Operators.op()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op")的行为，使得在所有情况下，如果[`Operators.op.is_comparison`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op")标志设置为True，则结果表达式的返回类型将是[`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean")，如果标志为False，则结果表达式的返回类型将与左侧表达式的类型相同，这是其他运算符的典型默认行为。还添加了一个新参数[`Operators.op.return_type`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.return_type
    "sqlalchemy.sql.expression.Operators.op")以及一个辅助方法[`Operators.bool_op()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op")。
- en: See also
  id: totrans-729
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[The typing behavior of custom operators has been made consistent](migration_12.html#change-4063)'
  id: totrans-730
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[自定义运算符的类型行为已经保持一致](migration_12.html#change-4063)'
- en: 'References: [#4063](https://www.sqlalchemy.org/trac/ticket/4063)'
  id: totrans-731
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4063](https://www.sqlalchemy.org/trac/ticket/4063)
- en: '**[sql] [bug]**'
  id: totrans-732
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Internal refinements to the [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum"), [`Interval`](../core/type_basics.html#sqlalchemy.types.Interval
    "sqlalchemy.types.Interval"), and [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean") types, which now extend a common mixin `Emulated`
    that indicates a type that provides Python-side emulation of a DB native type,
    switching out to the DB native type when a supporting backend is in use. The PostgreSQL
    [`INTERVAL`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.INTERVAL
    "sqlalchemy.dialects.postgresql.INTERVAL") type when used directly will now include
    the correct type coercion rules for SQL expressions that also take effect for
    [`Interval`](../core/type_basics.html#sqlalchemy.types.Interval "sqlalchemy.types.Interval")
    (such as adding a date to an interval yields a datetime).
  id: totrans-733
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")、[`Interval`](../core/type_basics.html#sqlalchemy.types.Interval
    "sqlalchemy.types.Interval")和[`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean")类型进行了内部优化，现在这些类型都扩展了一个通用的mixin `Emulated`，表示提供了对数据库本地类型的Python端模拟，在使用支持的后端时切换到数据库本地类型。直接使用
    PostgreSQL [`INTERVAL`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.INTERVAL
    "sqlalchemy.dialects.postgresql.INTERVAL") 类型现在将包括正确的类型强制转换规则，这些规则也适用于 [`Interval`](../core/type_basics.html#sqlalchemy.types.Interval
    "sqlalchemy.types.Interval") 的 SQL 表达式（例如，将日期添加到间隔会产生日期时间）。
- en: 'References: [#4088](https://www.sqlalchemy.org/trac/ticket/4088)'
  id: totrans-734
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#4088](https://www.sqlalchemy.org/trac/ticket/4088)
- en: postgresql
  id: totrans-735
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-736
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added a new flag `use_batch_mode` to the psycopg2 dialect. This flag enables
    the use of psycopg2’s `psycopg2.extras.execute_batch` extension when the [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") calls upon `cursor.executemany()`. This extension
    provides a critical performance increase by over an order of magnitude when running
    INSERT statements in batch. The flag is False by default as it is considered to
    be experimental for now.
  id: totrans-737
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 psycopg2 方言添加了一个新的标志 `use_batch_mode`。当 [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 调用 `cursor.executemany()` 时，此标志允许使用 psycopg2 的 `psycopg2.extras.execute_batch`
    扩展。这个扩展在批量运行 INSERT 语句时提供了至关重要的性能提升，增加了一个数量级。该标志默认为 False，因为目前被认为是实验性的。
- en: See also
  id: totrans-738
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参见
- en: '[Support for Batch Mode / Fast Execution Helpers](migration_12.html#change-4109)'
  id: totrans-739
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[支持批处理模式 / 快速执行助手](migration_12.html#change-4109)'
- en: 'References: [#4109](https://www.sqlalchemy.org/trac/ticket/4109)'
  id: totrans-740
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#4109](https://www.sqlalchemy.org/trac/ticket/4109)
- en: '**[postgresql] [bug]**'
  id: totrans-741
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Made further fixes to the [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") class in conjunction with COLLATE, as the fix made in
    [#4006](https://www.sqlalchemy.org/trac/ticket/4006) failed to accommodate for
    a multidimensional array.
  id: totrans-742
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与 COLLATE 结合使用进一步修复了 [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") 类，因为在 [#4006](https://www.sqlalchemy.org/trac/ticket/4006)
    中进行的修复未能适应多维数组。
- en: 'This change is also **backported** to: 1.1.15'
  id: totrans-743
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个变更也被**回溯到**：1.1.15
- en: 'References: [#4006](https://www.sqlalchemy.org/trac/ticket/4006)'
  id: totrans-744
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#4006](https://www.sqlalchemy.org/trac/ticket/4006)
- en: '**[postgresql] [bug]**'
  id: totrans-745
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug in [`array_agg`](../core/functions.html#sqlalchemy.sql.functions.array_agg
    "sqlalchemy.sql.functions.array_agg") function where passing an argument that
    is already of type [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY"),
    such as a PostgreSQL [`array`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.array
    "sqlalchemy.dialects.postgresql.array") construct, would produce a `ValueError`,
    due to the function attempting to nest the arrays.
  id: totrans-746
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`array_agg`](../core/functions.html#sqlalchemy.sql.functions.array_agg
    "sqlalchemy.sql.functions.array_agg") 函数中的错误，当传递一个已经是 [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") 类型的参数时，比如 PostgreSQL 的 [`array`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.array
    "sqlalchemy.dialects.postgresql.array") 结构，会产生一个 `ValueError`，因为该函数试图嵌套数组。
- en: 'This change is also **backported** to: 1.1.15'
  id: totrans-747
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个变更也被**回溯到**：1.1.15
- en: 'References: [#4107](https://www.sqlalchemy.org/trac/ticket/4107)'
  id: totrans-748
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#4107](https://www.sqlalchemy.org/trac/ticket/4107)
- en: '**[postgresql] [bug]**'
  id: totrans-749
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug in PostgreSQL `Insert.on_conflict_do_update()` which would prevent
    the insert statement from being used as a CTE, e.g. via `Insert.cte()`, within
    another statement.
  id: totrans-750
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 PostgreSQL 中 `Insert.on_conflict_do_update()` 的错误，该错误将阻止将插入语句用作 CTE，例如通过
    `Insert.cte()` 在另一个语句中。
- en: 'This change is also **backported** to: 1.1.15'
  id: totrans-751
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个变更也被**回溯到**：1.1.15
- en: 'References: [#4074](https://www.sqlalchemy.org/trac/ticket/4074)'
  id: totrans-752
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#4074](https://www.sqlalchemy.org/trac/ticket/4074)
- en: '**[postgresql] [bug]**'
  id: totrans-753
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug where the pg8000 driver would fail if using [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") with a schema name, since the schema name
    would be sent as a “quoted_name” object that’s a string subclass, which pg8000
    doesn’t recognize. The quoted_name type is added to pg8000’s py_types collection
    on connect.
  id: totrans-754
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 pg8000 驱动器的错误，如果使用带有模式名称的 [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect")，则会失败，因为模式名称将作为一个“quoted_name”对象发送，这是一个字符串子类，pg8000
    不认识。连接时将 quoted_name 类型添加到 pg8000 的 py_types 集合中。
- en: 'References: [#4041](https://www.sqlalchemy.org/trac/ticket/4041)'
  id: totrans-755
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#4041](https://www.sqlalchemy.org/trac/ticket/4041)
- en: '**[postgresql] [bug]**'
  id: totrans-756
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Enabled UUID support for the pg8000 driver, which supports native Python uuid
    round trips for this datatype. Arrays of UUID are still not supported, however.
  id: totrans-757
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 pg8000 驱动器启用了 UUID 支持，这支持本机 Python uuid 往返于此数据类型。然而，仍然不支持 UUID 数组。
- en: 'References: [#4016](https://www.sqlalchemy.org/trac/ticket/4016)'
  id: totrans-758
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#4016](https://www.sqlalchemy.org/trac/ticket/4016)
- en: mysql
  id: totrans-759
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-760
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Warning emitted when MariaDB 10.2.8 or earlier in the 10.2 series is detected
    as there are major issues with CHECK constraints within these versions that were
    resolved as of 10.2.9.
  id: totrans-761
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当检测到MariaDB 10.2.8或更早版本的10.2系列时，会发出警告，因为这些版本中的CHECK约束存在重大问题，这些问题已在10.2.9解决。
- en: Note that this changelog message was NOT released with SQLAlchemy 1.2.0b3 and
    was added retroactively.
  id: totrans-762
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，此更改日志消息未随SQLAlchemy 1.2.0b3一起发布，而是事后添加的。
- en: 'This change is also **backported** to: 1.1.15'
  id: totrans-763
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.1.15
- en: 'References: [#4097](https://www.sqlalchemy.org/trac/ticket/4097)'
  id: totrans-764
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4097](https://www.sqlalchemy.org/trac/ticket/4097)
- en: '**[mysql] [bug]**'
  id: totrans-765
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed issue where CURRENT_TIMESTAMP would not reflect correctly in the MariaDB
    10.2 series due to a syntax change, where the function is now represented as `current_timestamp()`.
  id: totrans-766
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在MariaDB 10.2系列中`CURRENT_TIMESTAMP`由于语法更改而无法正确反映的问题，现在该函数表示为`current_timestamp()`。
- en: 'This change is also **backported** to: 1.1.15'
  id: totrans-767
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.1.15
- en: 'References: [#4096](https://www.sqlalchemy.org/trac/ticket/4096)'
  id: totrans-768
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4096](https://www.sqlalchemy.org/trac/ticket/4096)
- en: '**[mysql] [bug]**'
  id: totrans-769
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: 'MariaDB 10.2 now supports CHECK constraints (warning: use version 10.2.9 or
    greater due to upstream issues noted in [#4097](https://www.sqlalchemy.org/trac/ticket/4097)).
    Reflection now takes these CHECK constraints into account when they are present
    in the `SHOW CREATE TABLE` output.'
  id: totrans-770
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MariaDB 10.2现在支持CHECK约束（警告：由于[#4097](https://www.sqlalchemy.org/trac/ticket/4097)中指出的上游问题，请��用10.2.9或更高版本）。反射现在在`SHOW
    CREATE TABLE`输出中考虑这些CHECK约束。
- en: 'This change is also **backported** to: 1.1.15'
  id: totrans-771
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.1.15
- en: 'References: [#4098](https://www.sqlalchemy.org/trac/ticket/4098)'
  id: totrans-772
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4098](https://www.sqlalchemy.org/trac/ticket/4098)
- en: '**[mysql] [bug]**'
  id: totrans-773
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Changed the name of the `.values` attribute of the new MySQL INSERT..ON DUPLICATE
    KEY UPDATE construct to `.inserted`, as [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") already has a method called [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values"). The `.inserted` attribute ultimately
    renders the MySQL `VALUES()` function.
  id: totrans-774
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将新的MySQL INSERT..ON DUPLICATE KEY UPDATE结构的`.values`属性更名为`.inserted`，因为[`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert")已经有一个名为[`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values")的方法。`.inserted`属性最终呈现了MySQL的`VALUES()`函数。
- en: 'References: [#4072](https://www.sqlalchemy.org/trac/ticket/4072)'
  id: totrans-775
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4072](https://www.sqlalchemy.org/trac/ticket/4072)
- en: sqlite
  id: totrans-776
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-777
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Fixed bug where SQLite CHECK constraint reflection would fail if the referenced
    table were in a remote schema, e.g. on SQLite a remote database referred to by
    ATTACH.
  id: totrans-778
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了SQLite CHECK约束反射失败的bug，如果引用的表在远程模式下，例如在SQLite中由ATTACH引用的远程数据库。
- en: 'This change is also **backported** to: 1.1.15'
  id: totrans-779
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.1.15
- en: 'References: [#4099](https://www.sqlalchemy.org/trac/ticket/4099)'
  id: totrans-780
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4099](https://www.sqlalchemy.org/trac/ticket/4099)
- en: mssql
  id: totrans-781
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [feature]**'
  id: totrans-782
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [feature]**'
- en: Added a new [`TIMESTAMP`](../dialects/mssql.html#sqlalchemy.dialects.mssql.TIMESTAMP
    "sqlalchemy.dialects.mssql.TIMESTAMP") datatype, that correctly acts like a binary
    datatype for SQL Server rather than a datetime type, as SQL Server breaks the
    SQL standard here. Also added [`ROWVERSION`](../dialects/mssql.html#sqlalchemy.dialects.mssql.ROWVERSION
    "sqlalchemy.dialects.mssql.ROWVERSION"), as the “TIMESTAMP” type in SQL Server
    is deprecated in favor of ROWVERSION.
  id: totrans-783
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的[`TIMESTAMP`](../dialects/mssql.html#sqlalchemy.dialects.mssql.TIMESTAMP
    "sqlalchemy.dialects.mssql.TIMESTAMP")数据类型，它在SQL Server中正确地像二进制数据类型一样工作，而不是datetime类型，因为SQL
    Server在这里违反了SQL标准。还添加了[`ROWVERSION`](../dialects/mssql.html#sqlalchemy.dialects.mssql.ROWVERSION
    "sqlalchemy.dialects.mssql.ROWVERSION")，因为SQL Server中的“TIMESTAMP”类型已被弃用，改用ROWVERSION。
- en: 'References: [#4086](https://www.sqlalchemy.org/trac/ticket/4086)'
  id: totrans-784
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4086](https://www.sqlalchemy.org/trac/ticket/4086)
- en: '**[mssql] [feature]**'
  id: totrans-785
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [feature]**'
- en: Added support for “AUTOCOMMIT” isolation level, as established via [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options"), to the PyODBC and pymssql dialects.
    This isolation level sets the appropriate DBAPI-specific flags on the underlying
    connection object.
  id: totrans-786
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为PyODBC和pymssql方言添加了对“AUTOCOMMIT”隔离级别的支持，通过[`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")来建立，这个隔离级别在底层连接对象上设置了适当的DBAPI特定标志。
- en: 'References: [#4058](https://www.sqlalchemy.org/trac/ticket/4058)'
  id: totrans-787
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4058](https://www.sqlalchemy.org/trac/ticket/4058)
- en: '**[mssql] [bug]**'
  id: totrans-788
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Added a full range of “connection closed” exception codes to the PyODBC dialect
    for SQL Server, including ‘08S01’, ‘01002’, ‘08003’, ‘08007’, ‘08S02’, ‘08001’,
    ‘HYT00’, ‘HY010’. Previously, only ‘08S01’ was covered.
  id: totrans-789
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 PyODBC 方言中为 SQL Server 添加了一整套“连接关闭”异常代码，包括‘08S01’、‘01002’、‘08003’、‘08007’、‘08S02’、‘08001’、‘HYT00’、‘HY010’。之前只覆盖了‘08S01’。
- en: 'This change is also **backported** to: 1.1.15'
  id: totrans-790
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：1.1.15
- en: 'References: [#4095](https://www.sqlalchemy.org/trac/ticket/4095)'
  id: totrans-791
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4095](https://www.sqlalchemy.org/trac/ticket/4095)
- en: '**[mssql] [bug]**'
  id: totrans-792
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: SQL Server supports what SQLAlchemy calls “native boolean” with its BIT type,
    as this type only accepts 0 or 1 and the DBAPIs return its value as True/False.
    So the SQL Server dialects now enable “native boolean” support, in that a CHECK
    constraint is not generated for a [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean") datatype. The only difference vs. other native boolean
    is that there are no “true” / “false” constants so “1” and “0” are still rendered
    here.
  id: totrans-793
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQL Server 支持 SQLAlchemy 所称的“本地布尔”与其 BIT 类型，因为该类型只接受 0 或 1，而 DBAPI 返回其值为 True/False。因此，SQL
    Server 方言现在启用了“本地布尔”支持，即 [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean") 数据类型不会生成 CHECK 约束。与其他本地布尔的唯一区别在于这里仍然不生成“true” / “false”常量，因此“1”和“0”仍然在这里呈现。
- en: 'References: [#4061](https://www.sqlalchemy.org/trac/ticket/4061)'
  id: totrans-794
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4061](https://www.sqlalchemy.org/trac/ticket/4061)
- en: '**[mssql] [bug]**'
  id: totrans-795
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed the pymssql dialect so that percent signs in SQL text, such as used in
    modulus expressions or literal textual values, are **not** doubled up, as seems
    to be what pymssql expects. This is despite the fact that the pymssql DBAPI uses
    the “pyformat” parameter style which itself considers the percent sign to be significant.
  id: totrans-796
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 pymssql 方言中 SQL 文本中的百分号，例如在模数表达式或文字值中使用的百分号，不会被加倍，这似乎是 pymssql 期望的。尽管 pymssql
    DBAPI 使用“pyformat”参数样式，它认为百分号本身是重要的。
- en: 'References: [#4057](https://www.sqlalchemy.org/trac/ticket/4057)'
  id: totrans-797
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4057](https://www.sqlalchemy.org/trac/ticket/4057)
- en: '**[mssql] [bug]**'
  id: totrans-798
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed bug where the SQL Server dialect could pull columns from multiple schemas
    when reflecting a self-referential foreign key constraint, if multiple schemas
    contained a constraint of the same name against a table of the same name.
  id: totrans-799
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 SQL Server 方言在反射自引用外键约束时可能从多个模式中提取列的错误，如果多个模式包含相同名称的约束针对相同名称的表。
- en: 'References: [#4060](https://www.sqlalchemy.org/trac/ticket/4060)'
  id: totrans-800
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4060](https://www.sqlalchemy.org/trac/ticket/4060)
- en: '**[mssql] [bug] [orm]**'
  id: totrans-801
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug] [orm]**'
- en: Added a new class of “rowcount support” for dialects that is specific to when
    “RETURNING”, which on SQL Server looks like “OUTPUT inserted”, is in use, as the
    PyODBC backend isn’t able to give us rowcount on an UPDATE or DELETE statement
    when OUTPUT is in effect. This primarily affects the ORM when a flush is updating
    a row that contains server-calculated values, raising an error if the backend
    does not return the expected row count. PyODBC now states that it supports rowcount
    except if OUTPUT.inserted is present, which is taken into account by the ORM during
    a flush as to whether it will look for a rowcount.
  id: totrans-802
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为方言添加了一个新的“行计数支持”类，用于在“RETURNING”时特定于方言的情况下，对于 SQL Server 看起来像“OUTPUT inserted”的情况，因为
    PyODBC 后端在 OUTPUT 生效时无法给我们 UPDATE 或 DELETE 语句的行计数。这主要影响 ORM，当刷新正在更新包含服务器计算值的行时，如果后端没有返回预期的行数，将会引发错误。PyODBC
    现在声明它支持行数计数，除非存在 OUTPUT.inserted，ORM 在刷新时会考虑到这一点，以确定是否查找行数计数。
- en: 'References: [#4062](https://www.sqlalchemy.org/trac/ticket/4062)'
  id: totrans-803
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4062](https://www.sqlalchemy.org/trac/ticket/4062)
- en: '**[mssql] [bug] [orm]**'
  id: totrans-804
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug] [orm]**'
- en: Enabled the “sane_rowcount” flag for the pymssql dialect, indicating that the
    DBAPI now reports the correct number of rows affected from an UPDATE or DELETE
    statement. This impacts mostly the ORM versioning feature in that it now can verify
    the number of rows affected on a target version.
  id: totrans-805
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 启用了 pymssql 方言的“sane_rowcount”标志，指示 DBAPI 现在报告了 UPDATE 或 DELETE 语句受影响的正确行数。这主要影响
    ORM 版本功能，因为现在它可以验证目标版本上受影响的行数。
- en: '**[mssql] [bug]**'
  id: totrans-806
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Added a rule to SQL Server index reflection to ignore the so-called “heap” index
    that is implicitly present on a table that does not specify a clustered index.
  id: totrans-807
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个规则到 SQL Server 索引反射中，忽略所谓的隐式存在于未指定聚集索引的表上的“堆”索引。
- en: 'References: [#4059](https://www.sqlalchemy.org/trac/ticket/4059)'
  id: totrans-808
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4059](https://www.sqlalchemy.org/trac/ticket/4059)
- en: oracle
  id: totrans-809
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [performance] [bug] [py2k]**'
  id: totrans-810
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [performance] [bug] [py2k]**'
- en: Fixed performance regression caused by the fix for [#3937](https://www.sqlalchemy.org/trac/ticket/3937)
    where cx_Oracle as of version 5.3 dropped the `.UNICODE` symbol from its namespace,
    which was interpreted as cx_Oracle’s “WITH_UNICODE” mode being turned on unconditionally,
    which invokes functions on the SQLAlchemy side which convert all strings to unicode
    unconditionally and causing a performance impact. In fact, per cx_Oracle’s author
    the “WITH_UNICODE” mode has been removed entirely as of 5.1, so the expensive
    unicode conversion functions are no longer necessary and are disabled if cx_Oracle
    5.1 or greater is detected under Python 2\. The warning against “WITH_UNICODE”
    mode that was removed under [#3937](https://www.sqlalchemy.org/trac/ticket/3937)
    is also restored.
  id: totrans-811
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由于对 [#3937](https://www.sqlalchemy.org/trac/ticket/3937) 的修复引起的性能回退，其中 cx_Oracle
    版本 5.3 删除了其命名空间中的 `.UNICODE` 符号，这被解释为 cx_Oracle 的“WITH_UNICODE”模式被无条件地打开，从而在 SQLAlchemy
    侧调用函数时无条件地将所有字符串转换为 unicode 并引起性能影响。实际上，根据 cx_Oracle 的作者，自 5.1 版本以来，“WITH_UNICODE”模式已经完全删除，因此不再需要昂贵的
    unicode 转换函数，并且如果在 Python 2 下检测到 cx_Oracle 5.1 或更高版本，则会被禁用。还恢复了在 [#3937](https://www.sqlalchemy.org/trac/ticket/3937)
    中删除的针对“WITH_UNICODE”模式的警告。
- en: 'This change is also **backported** to: 1.1.13, 1.0.19'
  id: totrans-812
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**已回溯**至：1.1.13、1.0.19
- en: 'References: [#4035](https://www.sqlalchemy.org/trac/ticket/4035)'
  id: totrans-813
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4035](https://www.sqlalchemy.org/trac/ticket/4035)
- en: '**[oracle] [bug]**'
  id: totrans-814
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Partial support for persisting and retrieving the Oracle value “infinity” is
    implemented with cx_Oracle, using Python float values only, e.g. `float("inf")`.
    Decimal support is not yet fulfilled by the cx_Oracle DBAPI driver.
  id: totrans-815
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 cx_Oracle 部分支持持久化和检索 Oracle 值“infinity”，只使用 Python 浮点值，例如 `float("inf")`。目前
    cx_Oracle DBAPI 驱动程序尚未实现对十进制的支持。
- en: 'References: [#4064](https://www.sqlalchemy.org/trac/ticket/4064)'
  id: totrans-816
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4064](https://www.sqlalchemy.org/trac/ticket/4064)
- en: '**[oracle] [bug]**'
  id: totrans-817
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: The cx_Oracle dialect has been reworked and modernized to take advantage of
    new patterns that weren’t present in the old 4.x series of cx_Oracle. This includes
    that the minimum cx_Oracle version is the 5.x series and that cx_Oracle 6.x is
    now fully tested. The most significant change involves type conversions, primarily
    regarding the numeric / floating point and LOB datatypes, making more effective
    use of cx_Oracle type handling hooks to simplify how bind parameter and result
    data is processed.
  id: totrans-818
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: cx_Oracle 方言已经进行了重组和现代化，以利用在旧的 4.x 系列 cx_Oracle 中不存在的新模式。这包括 cx_Oracle 的最低版本是
    5.x 系列，而且 cx_Oracle 6.x 现在已经完全测试过了。最重要的变化涉及类型转换，主要是关于数值 / 浮点和 LOB 数据类型，更有效地利用了
    cx_Oracle 类型处理钩子，简化了绑定参数和结果数据的处理方式。
- en: See also
  id: totrans-819
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Major Refactor to cx_Oracle Dialect, Typing System](migration_12.html#change-cxoracle-12)'
  id: totrans-820
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[cx_Oracle 方言，类型系统主要重构](migration_12.html#change-cxoracle-12)'
- en: '**[oracle] [bug]**'
  id: totrans-821
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: two phase support for cx_Oracle has been completely removed for all versions
    of cx_Oracle, whereas in 1.2.0b1 this change only took effect for the 6.x series
    of cx_Oracle. This feature never worked correctly in any version of cx_Oracle
    and in cx_Oracle 6.x, the API which SQLAlchemy relied upon was removed.
  id: totrans-822
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于所有版本的 cx_Oracle，两阶段支持已完全移除，而在 1.2.0b1 中，这个变化仅对 cx_Oracle 6.x 系列生效。这个特性在任何版本的
    cx_Oracle 中从未正常工作过，并且在 cx_Oracle 6.x 中，SQLAlchemy 依赖的 API 已被移除。
- en: See also
  id: totrans-823
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Major Refactor to cx_Oracle Dialect, Typing System](migration_12.html#change-cxoracle-12)'
  id: totrans-824
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[cx_Oracle 方言，类型系统主要重构](migration_12.html#change-cxoracle-12)'
- en: 'References: [#3997](https://www.sqlalchemy.org/trac/ticket/3997)'
  id: totrans-825
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3997](https://www.sqlalchemy.org/trac/ticket/3997)
- en: '**[oracle] [bug]**'
  id: totrans-826
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: The column keys present in a result set when using [`Insert.returning()`](../core/dml.html#sqlalchemy.sql.expression.Insert.returning
    "sqlalchemy.sql.expression.Insert.returning") with the cx_Oracle backend now use
    the correct column / label names like that of all other dialects. Previously,
    these came out as `ret_nnn`.
  id: totrans-827
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用 cx_Oracle 后端的 [`Insert.returning()`](../core/dml.html#sqlalchemy.sql.expression.Insert.returning
    "sqlalchemy.sql.expression.Insert.returning") 返回结果集时，现在使用正确的列 / 标签名称，就像其他所有方言一样。以前，这些结果会出现为
    `ret_nnn`。
- en: See also
  id: totrans-828
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Major Refactor to cx_Oracle Dialect, Typing System](migration_12.html#change-cxoracle-12)'
  id: totrans-829
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[cx_Oracle 方言，类型系统主要重构](migration_12.html#change-cxoracle-12)'
- en: '**[oracle] [bug]**'
  id: totrans-830
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: 'Several parameters to the cx_Oracle dialect are now deprecated and will have
    no effect: `auto_setinputsizes`, `exclude_setinputsizes`, `allow_twophase`.'
  id: totrans-831
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对 cx_Oracle 方言的几个参数现在已经不推荐使用，并且不会产生任何效果：`auto_setinputsizes`、`exclude_setinputsizes`、`allow_twophase`。
- en: See also
  id: totrans-832
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Major Refactor to cx_Oracle Dialect, Typing System](migration_12.html#change-cxoracle-12)'
  id: totrans-833
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[cx_Oracle 方言、类型系统的重大重构](migration_12.html#change-cxoracle-12)'
- en: '**[oracle] [bug]**'
  id: totrans-834
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed bug where an index reflected under Oracle with an expression like “column
    DESC” would not be returned, if the table also had no primary key, as a result
    of logic that attempts to filter out the index implicitly added by Oracle onto
    the primary key columns.
  id: totrans-835
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，其中在 Oracle 下反映出的索引，例如“column DESC”，如果表也没有主键，则不会返回，这是由于尝试将 Oracle 隐式添加到主键列上的索引的逻辑导致的。
- en: 'References: [#4042](https://www.sqlalchemy.org/trac/ticket/4042)'
  id: totrans-836
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4042](https://www.sqlalchemy.org/trac/ticket/4042)
- en: '**[oracle] [bug]**'
  id: totrans-837
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed more regressions caused by cx_Oracle 6.0; at the moment, the only behavioral
    change for users is disconnect detection now detects for cx_Oracle.DatabaseError
    in addition to cx_Oracle.InterfaceError, as this behavior seems to have changed.
    Other issues regarding numeric precision and uncloseable connections are pending
    with the upstream cx_Oracle issue tracker.
  id: totrans-838
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于 cx_Oracle 6.0 引起的更多回归已修复；目前，用户的唯一行为变化是断开检测现在除了 cx_Oracle.InterfaceError 外还检测
    cx_Oracle.DatabaseError，因为这种行为似乎已经改变。 关于数字精度和无法关闭连接的其他问题仍在上游 cx_Oracle 问题跟踪器中挂起。
- en: 'References: [#4045](https://www.sqlalchemy.org/trac/ticket/4045)'
  id: totrans-839
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4045](https://www.sqlalchemy.org/trac/ticket/4045)
- en: '**[oracle] [bug]**'
  id: totrans-840
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed bug where Oracle 8 “non ansi” join mode would not add the `(+)` operator
    to expressions that used an operator other than the `=` operator. The `(+)` needs
    to be on all columns that are part of the right-hand side.
  id: totrans-841
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 Oracle 8 的“非 ansi”连接模式不会向使用其他运算符而不是`=`运算符的表达式添加`(+)`运算符的错误。 `(+)`需要出现在右侧的所有列上。
- en: 'References: [#4076](https://www.sqlalchemy.org/trac/ticket/4076)'
  id: totrans-842
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4076](https://www.sqlalchemy.org/trac/ticket/4076)
- en: 1.2.0b2
  id: totrans-843
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.2.0b2
- en: 'Released: July 24, 2017'
  id: totrans-844
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2017年7月24日
- en: orm
  id: totrans-845
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-846
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression from 1.1.11 where adding additional non-entity columns to a
    query that includes an entity with subqueryload relationships would fail, due
    to an inspection added in 1.1.11 as a result of [#4011](https://www.sqlalchemy.org/trac/ticket/4011).
  id: totrans-847
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了从 1.1.11 中添加附加非实体列到包含子查询加载关系的实体的查询失败的回归，由于在 1.1.11 中添加了的检查作为[#4011](https://www.sqlalchemy.org/trac/ticket/4011)的结果。
- en: 'This change is also **backported** to: 1.1.12'
  id: totrans-848
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯到**：1.1.12
- en: 'References: [#4033](https://www.sqlalchemy.org/trac/ticket/4033)'
  id: totrans-849
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4033](https://www.sqlalchemy.org/trac/ticket/4033)
- en: '**[orm] [bug]**'
  id: totrans-850
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug involving JSON NULL evaluation logic added in 1.1 as part of [#3514](https://www.sqlalchemy.org/trac/ticket/3514)
    where the logic would not accommodate ORM mapped attributes named differently
    from the [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    that was mapped.
  id: totrans-851
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 1.1 中作为 [#3514](https://www.sqlalchemy.org/trac/ticket/3514) 的一部分添加的 JSON
    NULL 评估逻辑中的错误，其中逻辑不会适应 ORM 映射的属性与[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")不同的名称。
- en: 'This change is also **backported** to: 1.1.12'
  id: totrans-852
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯到**：1.1.12
- en: 'References: [#4031](https://www.sqlalchemy.org/trac/ticket/4031)'
  id: totrans-853
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4031](https://www.sqlalchemy.org/trac/ticket/4031)
- en: '**[orm] [bug]**'
  id: totrans-854
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Added `KeyError` checks to all methods within `WeakInstanceDict` where a check
    for `key in dict` is followed by indexed access to that key, to guard against
    a race against garbage collection that under load can remove the key from the
    dict after the code assumes its present, leading to very infrequent `KeyError`
    raises.
  id: totrans-855
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 `WeakInstanceDict` 内的所有方法中添加了 `KeyError` 检查，其中 `key in dict` 的检查后跟着对该键的索引访问，以防止在负载下垃圾收集可能会将该键从字典中移除的情况下，代码假设其存在，导致非常不频繁的
    `KeyError` 引发。
- en: 'This change is also **backported** to: 1.1.12'
  id: totrans-856
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯到**：1.1.12
- en: 'References: [#4030](https://www.sqlalchemy.org/trac/ticket/4030)'
  id: totrans-857
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4030](https://www.sqlalchemy.org/trac/ticket/4030)
- en: tests
  id: totrans-858
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [bug] [py3k]**'
  id: totrans-859
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[tests] [bug] [py3k]**'
- en: Fixed issue in testing fixtures which was incompatible with a change made as
    of Python 3.6.2 involving context managers.
  id: totrans-860
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了与 Python 3.6.2 作为不兼容的更改的测试夹具中的问题，涉及上下文管理器。
- en: 'This change is also **backported** to: 1.1.12, 1.0.18'
  id: totrans-861
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯到**：1.1.12, 1.0.18
- en: 'References: [#4034](https://www.sqlalchemy.org/trac/ticket/4034)'
  id: totrans-862
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4034](https://www.sqlalchemy.org/trac/ticket/4034)
- en: 1.2.0b1
  id: totrans-863
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.2.0b1
- en: 'Released: July 10, 2017'
  id: totrans-864
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2017年7月10日
- en: orm
  id: totrans-865
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-866
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: An [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")
    construct can now be passed to the `Query.select_entity_from()` method. Entities
    will be pulled from the selectable represented by the [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") construct. This allows special options for [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") such as [`aliased.adapt_on_names`](../orm/queryguide/api.html#sqlalchemy.orm.aliased.params.adapt_on_names
    "sqlalchemy.orm.aliased") to be used in conjunction with `Query.select_entity_from()`.
  id: totrans-867
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以将一个[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")构造传递给`Query.select_entity_from()`方法。实体将从由[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased")构造表示的可选择项中提取。这允许与`Query.select_entity_from()`一起使用[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased")的特殊选项，如[`aliased.adapt_on_names`](../orm/queryguide/api.html#sqlalchemy.orm.aliased.params.adapt_on_names
    "sqlalchemy.orm.aliased")。
- en: 'This change is also **backported** to: 1.1.7'
  id: totrans-868
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.1.7
- en: 'References: [#3933](https://www.sqlalchemy.org/trac/ticket/3933)'
  id: totrans-869
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3933](https://www.sqlalchemy.org/trac/ticket/3933)
- en: '**[orm] [feature]**'
  id: totrans-870
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added `.autocommit` attribute to [`scoped_session`](../orm/contextual.html#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session"), proxying the `.autocommit` attribute of the
    underling [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    currently assigned to the thread. Pull request courtesy Ben Fagin.
  id: totrans-871
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向[`scoped_session`](../orm/contextual.html#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")添加了`.autocommit`属性，代理了当前分配给线程的底层[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")的`.autocommit`属性。感谢Ben Fagin的拉取请求。
- en: '**[orm] [feature]**'
  id: totrans-872
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added a new feature [`with_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.with_expression
    "sqlalchemy.orm.with_expression") that allows an ad-hoc SQL expression to be added
    to a specific entity in a query at result time. This is an alternative to the
    SQL expression being delivered as a separate element in the result tuple.
  id: totrans-873
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新功能[`with_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.with_expression
    "sqlalchemy.orm.with_expression")，允许在结果时间将一个临时SQL表达式添加到查询中的特定实体。这是SQL表达式作为结果元组中的一个单独元素传递的替代方法。
- en: See also
  id: totrans-874
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[ORM attributes that can receive ad-hoc SQL expressions](migration_12.html#change-3058)'
  id: totrans-875
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[可以接收临时SQL表达式的ORM属性](migration_12.html#change-3058)'
- en: 'References: [#3058](https://www.sqlalchemy.org/trac/ticket/3058)'
  id: totrans-876
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3058](https://www.sqlalchemy.org/trac/ticket/3058)
- en: '**[orm] [feature]**'
  id: totrans-877
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added a new style of mapper-level inheritance loading “polymorphic selectin”.
    This style of loading emits queries for each subclass in an inheritance hierarchy
    subsequent to the load of the base object type, using IN to specify the desired
    primary key values.
  id: totrans-878
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一种新的映射器级继承加载样式“多态selectin”。这种加载方式在加载基本对象类型后，为继承层次结构中的每个子类发出查询，使用IN来指定所需的主键值。
- en: See also
  id: totrans-879
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[“selectin” polymorphic loading, loads subclasses using separate IN queries](migration_12.html#change-3948)'
  id: totrans-880
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[“selectin”多态加载，使用单独的IN查询加载子类](migration_12.html#change-3948)'
- en: 'References: [#3948](https://www.sqlalchemy.org/trac/ticket/3948)'
  id: totrans-881
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3948](https://www.sqlalchemy.org/trac/ticket/3948)
- en: '**[orm] [feature]**'
  id: totrans-882
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added a new kind of eager loading called “selectin” loading. This style of loading
    is very similar to “subquery” eager loading, except that it uses an IN expression
    given a list of primary key values from the loaded parent objects, rather than
    re-stating the original query. This produces a more efficient query that is “baked”
    (e.g. the SQL string is cached) and also works in the context of [`Query.yield_per()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.yield_per
    "sqlalchemy.orm.Query.yield_per").
  id: totrans-883
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一种新的急切加载方式称为“selectin”加载。这种加载方式与“subquery”急切加载非常相似，只是它使用了一个IN表达式，给出了加载的父对象的主键值列表，而不是重新陈述原始查询。这产生了一个更有效的查询，是“烘烤的”（例如，SQL字符串被缓存），并且也适用于[`Query.yield_per()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.yield_per
    "sqlalchemy.orm.Query.yield_per")的上下文中。
- en: See also
  id: totrans-884
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New “selectin” eager loading, loads all collections at once using IN](migration_12.html#change-3944)'
  id: totrans-885
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[新的“selectin”急切加载，使用IN一次加载所有集合](migration_12.html#change-3944)'
- en: 'References: [#3944](https://www.sqlalchemy.org/trac/ticket/3944)'
  id: totrans-886
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3944](https://www.sqlalchemy.org/trac/ticket/3944)
- en: '**[orm] [feature]**'
  id: totrans-887
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: The `lazy="select"` loader strategy now makes used of the [`BakedQuery`](../orm/extensions/baked.html#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery") query caching system in all cases. This removes
    most overhead of generating a [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object and running it into a [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") and then string SQL statement from the process
    of lazy-loading related collections and objects. The “baked” lazy loader has also
    been improved such that it can now cache in most cases where query load options
    are used.
  id: totrans-888
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`lazy="select"` 加载策略现在在所有情况下都使用 [`BakedQuery`](../orm/extensions/baked.html#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery") 查询缓存系统。这消除了生成 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 对象并将其运行到 [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 中，然后从懒加载相关集合和对象的过程中生成字符串 SQL 语句的大部分开销。 “烘焙”懒加载器也已经改进，现在在大多数情况下可以缓存使用查询加载选项的情况。'
- en: See also
  id: totrans-889
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[“Baked” loading now the default for lazy loads](migration_12.html#change-3954)'
  id: totrans-890
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[“烘焙”加载现在是懒加载的默认值](migration_12.html#change-3954)'
- en: 'References: [#3954](https://www.sqlalchemy.org/trac/ticket/3954)'
  id: totrans-891
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3954](https://www.sqlalchemy.org/trac/ticket/3954)
- en: '**[orm] [feature] [ext]**'
  id: totrans-892
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature] [ext]**'
- en: The [`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update") method can now accommodate both hybrid attributes
    as well as composite attributes as a source of the key to be placed in the SET
    clause. For hybrids, an additional decorator [`hybrid_property.update_expression()`](../orm/extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_property.update_expression
    "sqlalchemy.ext.hybrid.hybrid_property.update_expression") is supplied for which
    the user supplies a tuple-returning function.
  id: totrans-893
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update") 方法现在可以同时适应混合属性和复合属性作为放置在 SET 子句中的键的来源。对于混合属性，用户提供一个返回元组的函数，还提供了额外的装饰器
    [`hybrid_property.update_expression()`](../orm/extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_property.update_expression
    "sqlalchemy.ext.hybrid.hybrid_property.update_expression")。'
- en: See also
  id: totrans-894
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Support for bulk updates of hybrids, composites](migration_12.html#change-3229)'
  id: totrans-895
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[支持混合属性、复合属性的批量更新](migration_12.html#change-3229)'
- en: 'References: [#3229](https://www.sqlalchemy.org/trac/ticket/3229)'
  id: totrans-896
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3229](https://www.sqlalchemy.org/trac/ticket/3229)
- en: '**[orm] [feature]**'
  id: totrans-897
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new attribute event [`AttributeEvents.bulk_replace()`](../orm/events.html#sqlalchemy.orm.AttributeEvents.bulk_replace
    "sqlalchemy.orm.AttributeEvents.bulk_replace"). This event is triggered when a
    collection is assigned to a relationship, before the incoming collection is compared
    with the existing one. This early event allows for conversion of incoming non-ORM
    objects as well. The event is integrated with the `@validates` decorator.
  id: totrans-898
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的属性事件 [`AttributeEvents.bulk_replace()`](../orm/events.html#sqlalchemy.orm.AttributeEvents.bulk_replace
    "sqlalchemy.orm.AttributeEvents.bulk_replace")。当将集合分配给关系时，触发此事件，在将传入集合与现有集合进行比较之前。这个早期事件还允许转换传入的非
    ORM 对象。该事件与 `@validates` 装饰器集成。
- en: See also
  id: totrans-899
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New bulk_replace event](migration_12.html#change-3896-event)'
  id: totrans-900
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[新的 bulk_replace 事件](migration_12.html#change-3896-event)'
- en: 'References: [#3896](https://www.sqlalchemy.org/trac/ticket/3896)'
  id: totrans-901
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3896](https://www.sqlalchemy.org/trac/ticket/3896)
- en: '**[orm] [feature]**'
  id: totrans-902
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new event handler [`AttributeEvents.modified()`](../orm/events.html#sqlalchemy.orm.AttributeEvents.modified
    "sqlalchemy.orm.AttributeEvents.modified") which is triggered when the func:.attributes.flag_modified
    function is invoked, which is common when using the [`sqlalchemy.ext.mutable`](../orm/extensions/mutable.html#module-sqlalchemy.ext.mutable
    "sqlalchemy.ext.mutable") extension module.
  id: totrans-903
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的事件处理程序 [`AttributeEvents.modified()`](../orm/events.html#sqlalchemy.orm.AttributeEvents.modified
    "sqlalchemy.orm.AttributeEvents.modified")，当调用 func:.attributes.flag_modified
    函数时触发，这在使用 [`sqlalchemy.ext.mutable`](../orm/extensions/mutable.html#module-sqlalchemy.ext.mutable
    "sqlalchemy.ext.mutable") 扩展模块时很常见。
- en: See also
  id: totrans-904
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New “modified” event handler for sqlalchemy.ext.mutable](migration_12.html#change-3303)'
  id: totrans-905
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[sqlalchemy.ext.mutable 的新“modified”事件处理程序](migration_12.html#change-3303)'
- en: 'References: [#3303](https://www.sqlalchemy.org/trac/ticket/3303)'
  id: totrans-906
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3303](https://www.sqlalchemy.org/trac/ticket/3303)
- en: '**[orm] [bug]**'
  id: totrans-907
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue with subquery eagerloading which continues on from the series of
    issues fixed in [#2699](https://www.sqlalchemy.org/trac/ticket/2699), [#3106](https://www.sqlalchemy.org/trac/ticket/3106),
    [#3893](https://www.sqlalchemy.org/trac/ticket/3893) involving that the “subquery”
    contains the correct FROM clause when beginning from a joined inheritance subclass
    and then subquery eager loading onto a relationship from the base class, while
    the query also includes criteria against the subclass. The fix in the previous
    tickets did not accommodate for additional subqueryload operations loading more
    deeply from the first level, so the fix has been further generalized.
  id: totrans-908
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了与子查询急切加载相关的问题，这是从[#2699](https://www.sqlalchemy.org/trac/ticket/2699)、[#3106](https://www.sqlalchemy.org/trac/ticket/3106)、[#3893](https://www.sqlalchemy.org/trac/ticket/3893)修复的一系列问题中继续的。涉及到“子查询”包含正确的FROM子句，当从一个连接的继承子类开始，然后对基类的关系进行子查询急切加载时，同时查询还包括针对子类的条件。之前票据中的修复没有考虑到加载更深层次的额外子查询加载操作，因此修复已进一步泛化。
- en: 'This change is also **backported** to: 1.1.11'
  id: totrans-909
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.1.11
- en: 'References: [#4011](https://www.sqlalchemy.org/trac/ticket/4011)'
  id: totrans-910
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4011](https://www.sqlalchemy.org/trac/ticket/4011)
- en: '**[orm] [bug]**'
  id: totrans-911
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where a cascade such as “delete-orphan” (but others as well) would
    fail to locate an object linked to a relationship that itself is local to a subclass
    in an inheritance relationship, thus causing the operation to not take place.
  id: totrans-912
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即像“delete-orphan”（以及其他一些）这样的级联操作将无法定位到与继承关系中的子类本地关系相链接的对象，从而导致操作无法执行。
- en: 'This change is also **backported** to: 1.1.10'
  id: totrans-913
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.1.10
- en: 'References: [#3986](https://www.sqlalchemy.org/trac/ticket/3986)'
  id: totrans-914
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3986](https://www.sqlalchemy.org/trac/ticket/3986)
- en: '**[orm] [bug]**'
  id: totrans-915
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a race condition which could occur under threaded environments as a result
    of the caching added via [#3915](https://www.sqlalchemy.org/trac/ticket/3915).
    An internal collection of `Column` objects could be regenerated on an alias object
    inappropriately, confusing a joined eager loader when it attempts to render SQL
    and collect results and resulting in an attribute error. The collection is now
    generated up front before the alias object is cached and shared among threads.
  id: totrans-916
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在多线程环境下可能发生的竞争条件，这是通过[#3915](https://www.sqlalchemy.org/trac/ticket/3915)添加的缓存导致的。内部的`Column`对象集合可能会在别名对象上不当地重新生成，使得连接的急切加载器在尝试渲染SQL并收集结果时混淆，并导致属性错误。现在在别名对象被缓存和在线程之间共享之前，集合会提前生成。
- en: 'This change is also **backported** to: 1.1.7'
  id: totrans-917
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.1.7
- en: 'References: [#3947](https://www.sqlalchemy.org/trac/ticket/3947)'
  id: totrans-918
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3947](https://www.sqlalchemy.org/trac/ticket/3947)
- en: '**[orm] [bug]**'
  id: totrans-919
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: An UPDATE emitted as a result of the [`relationship.post_update`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.post_update
    "sqlalchemy.orm.relationship") feature will now integrate with the versioning
    feature to both bump the version id of the row as well as assert that the existing
    version number was matched.
  id: totrans-920
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为[`relationship.post_update`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.post_update
    "sqlalchemy.orm.relationship")功能的结果发出的UPDATE现在将与版本控制功能集成，以提升行的版本ID，并断言现有版本号已匹配。
- en: See also
  id: totrans-921
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[post_update integrates with ORM versioning](migration_12.html#change-3496)'
  id: totrans-922
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[post_update 与 ORM 版本控制集成](migration_12.html#change-3496)'
- en: 'References: [#3496](https://www.sqlalchemy.org/trac/ticket/3496)'
  id: totrans-923
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3496](https://www.sqlalchemy.org/trac/ticket/3496)
- en: '**[orm] [bug]**'
  id: totrans-924
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Repaired several use cases involving the [`relationship.post_update`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.post_update
    "sqlalchemy.orm.relationship") feature when used in conjunction with a column
    that has an “onupdate” value. When the UPDATE emits, the corresponding object
    attribute is now expired or refreshed so that the newly generated “onupdate” value
    can populate on the object; previously the stale value would remain. Additionally,
    if the target attribute is set in Python for the INSERT of the object, the value
    is now re-sent during the UPDATE so that the “onupdate” does not overwrite it
    (note this works just as well for server-generated onupdates). Finally, the `SessionEvents.refresh_flush()`
    event is now emitted for these attributes when refreshed within the flush.
  id: totrans-925
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了几个情况，这些情况涉及到与具有“onupdate”值的列一起使用时的[`relationship.post_update`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.post_update
    "sqlalchemy.orm.relationship")功能。当UPDATE发出时，相应的对象属性现在会过期或刷新，以便新生成的“onupdate”值可以填充到对象中；以前的陈旧值将保留。另外，如果Python中设置了对象的INSERT的目标属性，则该值现在将在UPDATE期间重新发送，以便“onupdate”不会覆盖它（请注意，这对于服务器生成的onupdates同样有效）。最后，在刷新时，这些属性现在会发出`SessionEvents.refresh_flush()`事件。
- en: See also
  id: totrans-926
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Refinements to post_update in conjunction with onupdate](migration_12.html#change-3471)'
  id: totrans-927
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[改进与onupdate结合使用的post_update](migration_12.html#change-3471)'
- en: 'References: [#3471](https://www.sqlalchemy.org/trac/ticket/3471), [#3472](https://www.sqlalchemy.org/trac/ticket/3472)'
  id: totrans-928
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3471](https://www.sqlalchemy.org/trac/ticket/3471)，[#3472](https://www.sqlalchemy.org/trac/ticket/3472)
- en: '**[orm] [bug]**'
  id: totrans-929
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where programmatic version_id counter in conjunction with joined table
    inheritance would fail if the version_id counter were not actually incremented
    and no other values on the base table were modified, as the UPDATE would have
    an empty SET clause. Since programmatic version_id where version counter is not
    incremented is a documented use case, this specific condition is now detected
    and the UPDATE now sets the version_id value to itself, so that concurrency checks
    still take place.
  id: totrans-930
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即在程序化版本ID计数器与连接表继承结合使用时，如果版本ID计数器实际上未增加，并且基表上没有修改其他值，则UPDATE将具有空的SET子句时会失败。由于程序化版本ID在版本计数器未增加时是一个记录的用例，因此现在会检测到这种特定条件，并且UPDATE现在将版本ID值设置为自身，以便仍然进行并发检查。
- en: 'References: [#3996](https://www.sqlalchemy.org/trac/ticket/3996)'
  id: totrans-931
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3996](https://www.sqlalchemy.org/trac/ticket/3996)
- en: '**[orm] [bug]**'
  id: totrans-932
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The versioning feature does not support NULL for the version counter. An exception
    is now raised if the version id is programmatic and was set to NULL for an UPDATE.
    Pull request courtesy Diana Clarke.
  id: totrans-933
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本功能不支持版本计数器为NULL。如果版本ID是程序化的，并且在UPDATE中将其设置为NULL，则现在会引发异常。拉取请求由Diana Clarke提供。
- en: 'References: [#3673](https://www.sqlalchemy.org/trac/ticket/3673)'
  id: totrans-934
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3673](https://www.sqlalchemy.org/trac/ticket/3673)
- en: '**[orm] [bug]**'
  id: totrans-935
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Removed a very old keyword argument from [`scoped_session`](../orm/contextual.html#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session") called `scope`. This keyword was never documented
    and was an early attempt at allowing for variable scopes.
  id: totrans-936
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从[`scoped_session`](../orm/contextual.html#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")中删除了一个非常古老的关键字参数，称为`scope`。这个关键字从未被记录，并且是早期尝试允许变量范围的一种尝试。
- en: See also
  id: totrans-937
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[“scope” keyword removed from scoped_session](migration_12.html#change-3796)'
  id: totrans-938
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[从scoped_session中删除“scope”关键字](migration_12.html#change-3796)'
- en: 'References: [#3796](https://www.sqlalchemy.org/trac/ticket/3796)'
  id: totrans-939
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3796](https://www.sqlalchemy.org/trac/ticket/3796)
- en: '**[orm] [bug]**'
  id: totrans-940
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where combining a “with_polymorphic” load in conjunction with subclass-linked
    relationships that specify joinedload with innerjoin=True, would fail to demote
    those “innerjoins” to “outerjoins” to suit the other polymorphic classes that
    don’t support that relationship. This applies to both a single and a joined inheritance
    polymorphic load.
  id: totrans-941
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即将“with_polymorphic”加载与指定了innerjoin=True的子类链接关系结合使用时，将无法将这些“innerjoins”降级为“outerjoins”以适应不支持该关系的其他多态类。这适用于单个和连接继承多态加载。
- en: 'References: [#3988](https://www.sqlalchemy.org/trac/ticket/3988)'
  id: totrans-942
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3988](https://www.sqlalchemy.org/trac/ticket/3988)
- en: '**[orm] [bug]**'
  id: totrans-943
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Added new argument `with_for_update` to the [`Session.refresh()`](../orm/session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") method. When the `Query.with_lockmode()` method
    were deprecated in favor of [`Query.with_for_update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.with_for_update
    "sqlalchemy.orm.Query.with_for_update"), the [`Session.refresh()`](../orm/session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") method was never updated to reflect the new
    option.
  id: totrans-944
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为[`Session.refresh()`](../orm/session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh")方法添加了新参数`with_for_update`。当`Query.with_lockmode()`方法被弃用，改用[`Query.with_for_update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.with_for_update
    "sqlalchemy.orm.Query.with_for_update")时，[`Session.refresh()`](../orm/session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh")方法从未更新以反映新选项。
- en: See also
  id: totrans-945
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[Added “for update” arguments to Session.refresh](migration_12.html#change-3991)'
  id: totrans-946
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[为`Session.refresh`添加了“for update”参数](migration_12.html#change-3991)'
- en: 'References: [#3991](https://www.sqlalchemy.org/trac/ticket/3991)'
  id: totrans-947
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3991](https://www.sqlalchemy.org/trac/ticket/3991)
- en: '**[orm] [bug]**'
  id: totrans-948
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where a [`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property") that is also marked as “deferred” would be marked
    as “expired” during a flush, causing it to be loaded along with the unexpiry of
    regular attributes even though this attribute was never accessed.
  id: totrans-949
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即一个同时标记为“延迟加载”的[`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property")在刷新时会被标记为“过期”，导致它与常规属性一起加载，即使从未访问过该属性。
- en: 'References: [#3984](https://www.sqlalchemy.org/trac/ticket/3984)'
  id: totrans-950
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3984](https://www.sqlalchemy.org/trac/ticket/3984)
- en: '**[orm] [bug]**'
  id: totrans-951
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in subquery eager loading where the “join_depth” parameter for self-referential
    relationships would not be correctly honored, loading all available levels deep
    rather than correctly counting the specified number of levels for eager loading.
  id: totrans-952
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了子查询急加载中的错误，其中自引用关系的“join_depth”参数不会被正确遵守，而是加载所有可用的深度，而不是正确计算急加载的指定级别数。
- en: 'References: [#3967](https://www.sqlalchemy.org/trac/ticket/3967)'
  id: totrans-953
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3967](https://www.sqlalchemy.org/trac/ticket/3967)
- en: '**[orm] [bug]**'
  id: totrans-954
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Added warnings to the LRU “compiled cache” used by the [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") (and ultimately will be for other ORM-based LRU caches)
    such that when the cache starts hitting its size limits, the application will
    emit a warning that this is a performance-degrading situation that may require
    attention. The LRU caches can reach their size limits primarily if an application
    is making use of an unbounded number of [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") objects, which is an antipattern. Otherwise, this
    may suggest an issue that should be brought to the SQLAlchemy developer’s attention.
  id: totrans-955
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")中添加了对LRU“编译缓存”的警告（最终也会用于其他基于ORM的LRU缓存），当缓存开始达到大小限制时，应用程序将发出警告，指出这是一个可能需要关注的性能下降情况。LRU缓存主要会达到大小限制，如果应用程序使用了无限数量的[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")对象，这是一个反模式。否则，这可能表明存在一个问题，应该引起SQLAlchemy开发人员的注意。
- en: '**[orm] [bug]**'
  id: totrans-956
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug to improve upon the specificity of loader options that take effect
    subsequent to the lazy load of a related entity, so that the loader options will
    match to an aliased or non-aliased entity more specifically if those options include
    entity information.
  id: totrans-957
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，以提高在延迟加载相关实体后生效的加载器选项的特异性，使得加载器选项将更具体地匹配到一个别名或非别名实体，如果这些选项包括实体信息。
- en: 'References: [#3963](https://www.sqlalchemy.org/trac/ticket/3963)'
  id: totrans-958
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3963](https://www.sqlalchemy.org/trac/ticket/3963)
- en: '**[orm] [bug]**'
  id: totrans-959
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The [`flag_modified()`](../orm/session_api.html#sqlalchemy.orm.attributes.flag_modified
    "sqlalchemy.orm.attributes.flag_modified") function now raises [`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError") if the named attribute key is not present
    within the object, as this is assumed to be present in the flush process. To mark
    an object “dirty” for a flush without referring to any specific attribute, the
    [`flag_dirty()`](../orm/session_api.html#sqlalchemy.orm.attributes.flag_dirty
    "sqlalchemy.orm.attributes.flag_dirty") function may be used.
  id: totrans-960
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`flag_modified()`](../orm/session_api.html#sqlalchemy.orm.attributes.flag_modified
    "sqlalchemy.orm.attributes.flag_modified") 函数现在在对象中未找到指定属性键时会引发 [`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError")，因为在刷新过程中假定该属性键是存在的。要在不涉及任何特定属性的情况下标记对象为“脏”以进行刷新，可以使用
    [`flag_dirty()`](../orm/session_api.html#sqlalchemy.orm.attributes.flag_dirty
    "sqlalchemy.orm.attributes.flag_dirty") 函数。'
- en: See also
  id: totrans-961
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Use flag_dirty() to mark an object as “dirty” without any attribute changing](migration_12.html#change-3753)'
  id: totrans-962
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[使用 flag_dirty() 将对象标记为“脏”而不更改任何属性](migration_12.html#change-3753)'
- en: 'References: [#3753](https://www.sqlalchemy.org/trac/ticket/3753)'
  id: totrans-963
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3753](https://www.sqlalchemy.org/trac/ticket/3753)
- en: '**[orm] [bug]**'
  id: totrans-964
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The “evaluate” strategy used by [`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update") and [`Query.delete()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.delete
    "sqlalchemy.orm.Query.delete") can now accommodate a simple object comparison
    from a many-to-one relationship to an instance, when the attribute names of the
    primary key / foreign key columns don’t match the actual names of the columns.
    Previously this would do a simple name-based match and fail with an AttributeError.
  id: totrans-965
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update") 和 [`Query.delete()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.delete
    "sqlalchemy.orm.Query.delete") 使用的“evaluate”策略现在可以在主键/外键列的属性名称与实际列名称不匹配时，从多对一关系到实例进行简单对象比较。以前，这将进行简单的基于名称的匹配，并因
    AttributeError 失败。'
- en: 'References: [#3366](https://www.sqlalchemy.org/trac/ticket/3366)'
  id: totrans-966
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3366](https://www.sqlalchemy.org/trac/ticket/3366)
- en: '**[orm] [bug]**'
  id: totrans-967
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The `@validates` decorator now allows the decorated method to receive objects
    from a “bulk collection set” operation that have not yet been compared to the
    existing collection. This allows incoming values to be converted to compatible
    ORM objects as is already allowed from an “append” event. Note that this means
    that the `@validates` method is called for **all** values during a collection
    assignment, rather than just the ones that are new.
  id: totrans-968
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`@validates` 装饰器现在允许装饰的方法接收尚未与现有集合进行比较的“批量集合设置”操作中的对象。这允许传入值转换为兼容的 ORM 对象，就像从“追加”事件中已经允许的那样。请注意，这意味着在集合分配期间
    **所有** 值都会调用 `@validates` 方法，而不仅仅是新值。'
- en: See also
  id: totrans-969
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[A @validates method receives all values on bulk-collection set before comparison](migration_12.html#change-3896-validates)'
  id: totrans-970
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[在比较之前，@validates 方法在批量集合设置上接收所有值](migration_12.html#change-3896-validates)'
- en: 'References: [#3896](https://www.sqlalchemy.org/trac/ticket/3896)'
  id: totrans-971
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3896](https://www.sqlalchemy.org/trac/ticket/3896)
- en: '**[orm] [bug]**'
  id: totrans-972
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in single-table inheritance where the select_from() argument would
    not be taken into account when limiting rows to a subclass. Previously, only expressions
    in the columns requested would be taken into account.
  id: totrans-973
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了单表继承中 select_from() 参数在限制行到子类时不会被考虑的 bug。以前，只有请求的列中的表达式会被考虑。
- en: See also
  id: totrans-974
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Fixed issue involving single-table inheritance with select_from()](migration_12.html#change-3891)'
  id: totrans-975
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[修复了与 select_from() 一起使用的单表继承的问题](migration_12.html#change-3891)'
- en: 'References: [#3891](https://www.sqlalchemy.org/trac/ticket/3891)'
  id: totrans-976
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3891](https://www.sqlalchemy.org/trac/ticket/3891)
- en: '**[orm] [bug]**'
  id: totrans-977
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: When assigning a collection to an attribute mapped by a relationship, the previous
    collection is no longer mutated. Previously, the old collection would be emptied
    out in conjunction with the “item remove” events that fire off; the events now
    fire off without affecting the old collection.
  id: totrans-978
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当将集合分配给由关系映射的属性时，以前的集合不再发生变化。以前，旧集合会随着触发的“项删除”事件而清空；现在事件会触发，但不会影响旧集合。
- en: See also
  id: totrans-979
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Previous collection is no longer mutated upon replacement](migration_12.html#change-3913)'
  id: totrans-980
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[替换时不再改变先前的集合](migration_12.html#change-3913)'
- en: 'References: [#3913](https://www.sqlalchemy.org/trac/ticket/3913)'
  id: totrans-981
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3913](https://www.sqlalchemy.org/trac/ticket/3913)
- en: '**[orm] [bug]**'
  id: totrans-982
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The state of the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is now present when the [`SessionEvents.after_rollback()`](../orm/events.html#sqlalchemy.orm.SessionEvents.after_rollback
    "sqlalchemy.orm.SessionEvents.after_rollback") event is emitted, that is, the
    attribute state of objects prior to their being expired. This is now consistent
    with the behavior of the [`SessionEvents.after_commit()`](../orm/events.html#sqlalchemy.orm.SessionEvents.after_commit
    "sqlalchemy.orm.SessionEvents.after_commit") event which also emits before the
    attribute state of objects is expired.
  id: totrans-983
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当[`SessionEvents.after_rollback()`](../orm/events.html#sqlalchemy.orm.SessionEvents.after_rollback
    "sqlalchemy.orm.SessionEvents.after_rollback")事件被触发时，[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")的状态现在是存在的，即对象在过期之前的属性状态。这与[`SessionEvents.after_commit()`](../orm/events.html#sqlalchemy.orm.SessionEvents.after_commit
    "sqlalchemy.orm.SessionEvents.after_commit")事件的行为一致，该事件在对象的属性状态过期之前也会被触发。
- en: See also
  id: totrans-984
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[The after_rollback() Session event now emits before the expiration of objects](migration_12.html#change-3934)'
  id: totrans-985
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[在对象过期之前，after_rollback() Session事件现在会被触发](migration_12.html#change-3934)'
- en: 'References: [#3934](https://www.sqlalchemy.org/trac/ticket/3934)'
  id: totrans-986
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3934](https://www.sqlalchemy.org/trac/ticket/3934)
- en: '**[orm] [bug]**'
  id: totrans-987
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed bug where [`Query.with_parent()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.with_parent
    "sqlalchemy.orm.Query.with_parent") would not work if the [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") were against an [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") construct rather than a regular mapped class. Also adds
    a new parameter `with_parent.from_entity` to the standalone `with_parent()` function
    as well as [`Query.with_parent()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.with_parent
    "sqlalchemy.orm.Query.with_parent").
  id: totrans-988
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，[`Query.with_parent()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.with_parent
    "sqlalchemy.orm.Query.with_parent")在针对[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased")构造而不是常规映射类时无法正常工作。还为独立的`with_parent()`函数以及[`Query.with_parent()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.with_parent
    "sqlalchemy.orm.Query.with_parent")添加了一个新参数`with_parent.from_entity`。
- en: 'References: [#3607](https://www.sqlalchemy.org/trac/ticket/3607)'
  id: totrans-989
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3607](https://www.sqlalchemy.org/trac/ticket/3607)
- en: orm declarative
  id: totrans-990
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 声明式 orm
- en: '**[orm] [declarative] [bug]**'
  id: totrans-991
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [声明式] [错误]**'
- en: Fixed bug where using [`declared_attr`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr") on an [`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase") where a particular return value
    were some non-mapped symbol, including `None`, would cause the attribute to hard-evaluate
    just once and store the value to the object dictionary, not allowing it to invoke
    for subclasses. This behavior is normal when [`declared_attr`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr") is on a mapped class, and does not occur on a
    mixin or abstract class. Since [`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase") is both “abstract” and actually
    “mapped”, a special exception case is made here so that the “abstract” behavior
    takes precedence for [`declared_attr`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr").
  id: totrans-992
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，在[`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase")上使用[`declared_attr`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr")时，如果特定返回值是一些非映射符号，包括`None`，会导致属性只被硬评估一次并将值存储到对象字典中，不允许它为子类调用。当[`declared_attr`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr")在映射类上时，这种行为是正常的，在混合类或抽象类上不会发生。由于[`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase")既是“抽象”的又是实际“映射”的，因此在这里做了一个特殊的例外情况，以便“抽象”行为优先于[`declared_attr`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr")。
- en: 'References: [#3848](https://www.sqlalchemy.org/trac/ticket/3848)'
  id: totrans-993
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3848](https://www.sqlalchemy.org/trac/ticket/3848)
- en: engine
  id: totrans-994
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [feature]**'
  id: totrans-995
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [特性]**'
- en: Added native “pessimistic disconnection” handling to the [`Pool`](../core/pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") object. The new parameter [`Pool.pre_ping`](../core/pooling.html#sqlalchemy.pool.Pool.params.pre_ping
    "sqlalchemy.pool.Pool"), available from the engine as [`create_engine.pool_pre_ping`](../core/engines.html#sqlalchemy.create_engine.params.pool_pre_ping
    "sqlalchemy.create_engine"), applies an efficient form of the “pre-ping” recipe
    featured in the pooling documentation, which upon each connection check out, emits
    a simple statement, typically “SELECT 1”, to test the connection for liveness.
    If the existing connection is no longer able to respond to commands, the connection
    is transparently recycled, and all other connections made prior to the current
    timestamp are invalidated.
  id: totrans-996
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[`Pool`](../core/pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")对象中添加了本机“悲观断开”处理。新参数[`Pool.pre_ping`](../core/pooling.html#sqlalchemy.pool.Pool.params.pre_ping
    "sqlalchemy.pool.Pool")，可从引擎中作为[`create_engine.pool_pre_ping`](../core/engines.html#sqlalchemy.create_engine.params.pool_pre_ping
    "sqlalchemy.create_engine")使用，应用了池文档中特色的“预检测”配方的高效形式，每次连接检出时，发出一个简单的语句，通常是“SELECT
    1”，以测试连接的活动性。如果现有连接不再能响应命令，则连接将被透明地回收，并且在当前时间戳之前进行的所有其他连接将被作废。
- en: See also
  id: totrans-997
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Disconnect Handling - Pessimistic](../core/pooling.html#pool-disconnects-pessimistic)'
  id: totrans-998
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[断开处理 - 悲观](../core/pooling.html#pool-disconnects-pessimistic)'
- en: '[Pessimistic disconnection detection added to the connection pool](migration_12.html#change-3919)'
  id: totrans-999
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[连接池中添加了悲观断开检测](migration_12.html#change-3919)'
- en: 'References: [#3919](https://www.sqlalchemy.org/trac/ticket/3919)'
  id: totrans-1000
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3919](https://www.sqlalchemy.org/trac/ticket/3919)
- en: '**[engine] [bug]**'
  id: totrans-1001
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Added an exception handler that will warn for the “cause” exception on Py2K
    when the “autorollback” feature of [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") itself raises an exception. In Py3K, the two exceptions
    are naturally reported by the interpreter as one occurring during the handling
    of the other. This is continuing with the series of changes for rollback failure
    handling that were last visited as part of [#2696](https://www.sqlalchemy.org/trac/ticket/2696)
    in 1.0.12.
  id: totrans-1002
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个异常处理程序，当[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")的“autorollback”功能本身引发异常时，将对Py2K上的“cause”异常发出警告。在Py3K中，两个异常自然地由解释器报告为一个发生在处理另一个时。这是继续处理回滚失败处理的一系列更改的一部分，上次在1.0.12中作为[#2696](https://www.sqlalchemy.org/trac/ticket/2696)的一部分访问。
- en: 'This change is also **backported** to: 1.1.7'
  id: totrans-1003
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.1.7
- en: 'References: [#3946](https://www.sqlalchemy.org/trac/ticket/3946)'
  id: totrans-1004
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3946](https://www.sqlalchemy.org/trac/ticket/3946)
- en: '**[engine] [bug]**'
  id: totrans-1005
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed bug where in the unusual case of passing a [`Compiled`](../core/internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object directly to [`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute"), the dialect with which the [`Compiled`](../core/internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object were generated was not consulted for the
    paramstyle of the string statement, instead assuming it would match the dialect-level
    paramstyle, causing mismatches to occur.
  id: totrans-1006
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即在将[`Compiled`](../core/internals.html#sqlalchemy.engine.Compiled "sqlalchemy.engine.Compiled")对象直接传递给[`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection")的不寻常情况下，生成[`Compiled`](../core/internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled")对象的方言未被咨询以获取字符串语句的paramstyle，而是假定它将匹配方言级别的paramstyle，导致不匹配发生。
- en: 'References: [#3938](https://www.sqlalchemy.org/trac/ticket/3938)'
  id: totrans-1007
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3938](https://www.sqlalchemy.org/trac/ticket/3938)
- en: sql
  id: totrans-1008
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-1009
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added a new kind of [`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") called “expanding”. This is for use in
    `IN` expressions where the list of elements is rendered into individual bound
    parameters at statement execution time, rather than at statement compilation time.
    This allows both a single bound parameter name to be linked to an IN expression
    of multiple elements, as well as allows query caching to be used with IN expressions.
    The new feature allows the related features of “select in” loading and “polymorphic
    in” loading to make use of the baked query extension to reduce call overhead.
    This feature should be considered to be **experimental** for 1.2.
  id: totrans-1010
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一种名为“expanding”的新类型[`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")。这用于在`IN`表达式中，元素列表在语句执行时被渲染为单独的绑定参数，而不是在语句编译时。这允许将单个绑定参数名称链接到包含多个元素的IN表达式，同时还允许在IN表达式中使用查询缓存。这一新功能允许“select
    in”加载和“polymorphic in”加载使用烘焙查询扩展来减少调用开销。这一功能应被视为**实验性**的1.2版本。
- en: See also
  id: totrans-1011
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Late-expanded IN parameter sets allow IN expressions with cached statements](migration_12.html#change-3953)'
  id: totrans-1012
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[延迟扩展的IN参数集允许使用缓存语句的IN表达式](migration_12.html#change-3953)'
- en: 'References: [#3953](https://www.sqlalchemy.org/trac/ticket/3953)'
  id: totrans-1013
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3953](https://www.sqlalchemy.org/trac/ticket/3953)
- en: '**[sql] [feature] [mysql] [oracle] [postgresql]**'
  id: totrans-1014
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature] [mysql] [oracle] [postgresql]**'
- en: Added support for SQL comments on [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") and [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects, via the new [`Table.comment`](../core/metadata.html#sqlalchemy.schema.Table.params.comment
    "sqlalchemy.schema.Table") and [`Column.comment`](../core/metadata.html#sqlalchemy.schema.Column.params.comment
    "sqlalchemy.schema.Column") arguments. The comments are included as part of DDL
    on table creation, either inline or via an appropriate ALTER statement, and are
    also reflected back within table reflection, as well as via the [`Inspector`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector"). Supported backends currently include
    MySQL, PostgreSQL, and Oracle. Many thanks to Frazer McLean for a large amount
    of effort on this.
  id: totrans-1015
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")和[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象添加了对SQL注释的支持，通过新的[`Table.comment`](../core/metadata.html#sqlalchemy.schema.Table.params.comment
    "sqlalchemy.schema.Table")和[`Column.comment`](../core/metadata.html#sqlalchemy.schema.Column.params.comment
    "sqlalchemy.schema.Column")参数。这些注释将作为表创建时的DDL的一部分包含在内，可以通过内联或适当的ALTER语句进行反映，并且也会在表反射中反映出来，以及通过[`Inspector`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector")进行反映。目前支持的后端包括MySQL、PostgreSQL和Oracle。非常感谢Frazer
    McLean在这方面付出的大量努力。
- en: See also
  id: totrans-1016
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Support for SQL Comments on Table, Column, includes DDL, reflection](migration_12.html#change-1546)'
  id: totrans-1017
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[对Table、Column支持SQL注释，包括DDL、反射](migration_12.html#change-1546)'
- en: 'References: [#1546](https://www.sqlalchemy.org/trac/ticket/1546)'
  id: totrans-1018
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1546](https://www.sqlalchemy.org/trac/ticket/1546)
- en: '**[sql] [feature]**'
  id: totrans-1019
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: The longstanding behavior of the [`ColumnOperators.in_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") and [`ColumnOperators.notin_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notin_
    "sqlalchemy.sql.expression.ColumnOperators.notin_") operators emitting a warning
    when the right-hand condition is an empty sequence has been revised; a simple
    “static” expression of “1 != 1” or “1 = 1” is now rendered by default, rather
    than pulling in the original left-hand expression. This causes the result for
    a NULL column comparison against an empty set to change from NULL to true/false.
    The behavior is configurable, and the old behavior can be enabled using the [`create_engine.empty_in_strategy`](../core/engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine") parameter to [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine").
  id: totrans-1020
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.in_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") 和 [`ColumnOperators.notin_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notin_
    "sqlalchemy.sql.expression.ColumnOperators.notin_") 操作符的长期行为已经修订，当右侧条件为空序列时，会发出警告；现在默认情况下会呈现一个简单的“静态”表达式“1
    != 1”或“1 = 1”，而不是引入原始的左侧表达式。这导致对空集合进行 NULL 列比较的结果从 NULL 更改为 true/false。此行为是可配置的，旧行为可以通过
    [`create_engine()`](../core/engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")
    的 `create_engine.empty_in_strategy` 参数启用。'
- en: See also
  id: totrans-1021
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[The IN / NOT IN operator’s empty collection behavior is now configurable;
    default expression simplified](migration_12.html#change-3907)'
  id: totrans-1022
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[IN / NOT IN 运算符的空集合行为现在可配置；默认表达式简化](migration_12.html#change-3907)'
- en: 'References: [#3907](https://www.sqlalchemy.org/trac/ticket/3907)'
  id: totrans-1023
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3907](https://www.sqlalchemy.org/trac/ticket/3907)
- en: '**[sql] [feature]**'
  id: totrans-1024
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added a new option `autoescape` to the “startswith” and “endswith” classes of
    comparators; this supplies an escape character also applies it to all occurrences
    of the wildcard characters “%” and “_” automatically. Pull request courtesy Diana
    Clarke.
  id: totrans-1025
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为比较器的“startswith”和“endswith”类添加了一个新选项`autoescape`；这个选项提供了一个转义字符，并自动将其应用于所有通配符“%”和“_”的出现。感谢
    Diana Clarke 的拉取请求。
- en: Note
  id: totrans-1026
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: This feature has been changed as of 1.2.0 from its initial implementation in
    1.2.0b2 such that autoescape is now passed as a boolean value, rather than a specific
    character to use as the escape character.
  id: totrans-1027
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该功能已于 1.2.0 版本中从其在 1.2.0b2 中的初始实现中更改，现在 autoescape 被传递为布尔值，而不是用作转义字符的特定字符。
- en: See also
  id: totrans-1028
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New “autoescape” option for startswith(), endswith()](migration_12.html#change-2694)'
  id: totrans-1029
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[新的“autoescape”选项用于 startswith()，endswith()](migration_12.html#change-2694)'
- en: 'References: [#2694](https://www.sqlalchemy.org/trac/ticket/2694)'
  id: totrans-1030
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2694](https://www.sqlalchemy.org/trac/ticket/2694)
- en: '**[sql] [bug]**'
  id: totrans-1031
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed AttributeError which would occur in [`WithinGroup`](../core/sqlelement.html#sqlalchemy.sql.expression.WithinGroup
    "sqlalchemy.sql.expression.WithinGroup") construct during an iteration of the
    structure.
  id: totrans-1032
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在结构迭代期间可能发生的 [`WithinGroup`](../core/sqlelement.html#sqlalchemy.sql.expression.WithinGroup
    "sqlalchemy.sql.expression.WithinGroup") 构造中的 AttributeError。
- en: 'This change is also **backported** to: 1.1.11'
  id: totrans-1033
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.1.11
- en: 'References: [#4012](https://www.sqlalchemy.org/trac/ticket/4012)'
  id: totrans-1034
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4012](https://www.sqlalchemy.org/trac/ticket/4012)
- en: '**[sql] [bug]**'
  id: totrans-1035
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed regression released in 1.1.5 due to [#3859](https://www.sqlalchemy.org/trac/ticket/3859)
    where adjustments to the “right-hand-side” evaluation of an expression based on
    [`Variant`](../core/type_api.html#sqlalchemy.types.Variant "sqlalchemy.types.Variant")
    to honor the underlying type’s “right-hand-side” rules caused the [`Variant`](../core/type_api.html#sqlalchemy.types.Variant
    "sqlalchemy.types.Variant") type to be inappropriately lost, in those cases when
    we *do* want the left-hand side type to be transferred directly to the right hand
    side so that bind-level rules can be applied to the expression’s argument.
  id: totrans-1036
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 1.1.5 版本中由于 [#3859](https://www.sqlalchemy.org/trac/ticket/3859) 导致的回归问题，其中基于
    [`Variant`](../core/type_api.html#sqlalchemy.types.Variant "sqlalchemy.types.Variant")
    的“右侧”表达式评估的调整，以遵守底层类型的“右侧”规则，导致在那些我们*确实*希望左侧类型直接传递到右侧，以便将绑定级规则应用于表达式参数时，[`Variant`](../core/type_api.html#sqlalchemy.types.Variant
    "sqlalchemy.types.Variant") 类型被不适当地丢失。
- en: 'This change is also **backported** to: 1.1.9'
  id: totrans-1037
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.1.9
- en: 'References: [#3952](https://www.sqlalchemy.org/trac/ticket/3952)'
  id: totrans-1038
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3952](https://www.sqlalchemy.org/trac/ticket/3952)
- en: '**[sql] [bug] [postgresql]**'
  id: totrans-1039
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [postgresql]**'
- en: Changed the mechanics of `ResultProxy` to unconditionally delay the “autoclose”
    step until the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") is done with the object; in the case where PostgreSQL
    ON CONFLICT with RETURNING returns no rows, autoclose was occurring in this previously
    non-existent use case, causing the usual autocommit behavior that occurs unconditionally
    upon INSERT/UPDATE/DELETE to fail.
  id: totrans-1040
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更改了`ResultProxy`的机制，无条件延迟“autoclose”步骤，直到[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")完成对象的使用；在PostgreSQL ON CONFLICT与RETURNING返回零行的情况下，autoclose会发生在这种以前不存在的用例中，导致在INSERT/UPDATE/DELETE上无条件发生的通常自动提交行为失败。
- en: 'This change is also **backported** to: 1.1.9'
  id: totrans-1041
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.1.9
- en: 'References: [#3955](https://www.sqlalchemy.org/trac/ticket/3955)'
  id: totrans-1042
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3955](https://www.sqlalchemy.org/trac/ticket/3955)
- en: '**[sql] [bug]**'
  id: totrans-1043
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The rules for type coercion between [`Numeric`](../core/type_basics.html#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric"), [`Integer`](../core/type_basics.html#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer"), and date-related types now include additional logic
    that will attempt to preserve the settings of the incoming type on the “resolved”
    type. Currently the target for this is the `asdecimal` flag, so that a math operation
    between [`Numeric`](../core/type_basics.html#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric")
    or [`Float`](../core/type_basics.html#sqlalchemy.types.Float "sqlalchemy.types.Float")
    and [`Integer`](../core/type_basics.html#sqlalchemy.types.Integer "sqlalchemy.types.Integer")
    will preserve the “asdecimal” flag as well as if the type should be the [`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float") subclass.
  id: totrans-1044
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，[`Numeric`](../core/type_basics.html#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric")、[`Integer`](../core/type_basics.html#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer")和与日期相关的类型之间的类型强制转换规则现在包括额外的逻辑，将尝试保留“resolved”类型的传入类型的设置。目前，这个目标是`asdecimal`标志，因此在[`Numeric`](../core/type_basics.html#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric")或[`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float")与[`Integer`](../core/type_basics.html#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer")之间的数学操作将保留“asdecimal”标志，以及类型是否应该是[`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float")子类。
- en: See also
  id: totrans-1045
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Stronger typing added to “float” datatypes](migration_12.html#change-floats-12)'
  id: totrans-1046
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[对“float”数据类型进行更强的类型转换](migration_12.html#change-floats-12)'
- en: 'References: [#4018](https://www.sqlalchemy.org/trac/ticket/4018)'
  id: totrans-1047
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4018](https://www.sqlalchemy.org/trac/ticket/4018)
- en: '**[sql] [bug] [mysql]**'
  id: totrans-1048
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [mysql]**'
- en: The result processor for the [`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float") type now unconditionally runs values through the `float()`
    processor if the dialect specifies that it also supports “native decimal” mode.
    While most backends will deliver Python `float` objects for a floating point datatype,
    the MySQL backends in some cases lack the typing information in order to provide
    this and return `Decimal` unless the float conversion is done.
  id: totrans-1049
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，[`Float`](../core/type_basics.html#sqlalchemy.types.Float "sqlalchemy.types.Float")类型的结果处理器现在无条件地通过`float()`处理器运行值，如果方言指定它也支持“本地十进制”模式。虽然大多数后端将为浮点数据类型提供Python
    `float`对象，但MySQL后端在某些情况下缺乏类型信息以提供此功能，并且除非进行浮点转换，否则将返回`Decimal`。
- en: See also
  id: totrans-1050
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Stronger typing added to “float” datatypes](migration_12.html#change-floats-12)'
  id: totrans-1051
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[对“float”数据类型进行更强的类型转换](migration_12.html#change-floats-12)'
- en: 'References: [#4020](https://www.sqlalchemy.org/trac/ticket/4020)'
  id: totrans-1052
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4020](https://www.sqlalchemy.org/trac/ticket/4020)
- en: '**[sql] [bug]**'
  id: totrans-1053
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Added some extra strictness to the handling of Python “float” values passed
    to SQL statements. A “float” value will be associated with the [`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float") datatype and not the Decimal-coercing [`Numeric`](../core/type_basics.html#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric") datatype as was the case before, eliminating a confusing
    warning emitted on SQLite as well as unnecessary coercion to Decimal.
  id: totrans-1054
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于传递给SQL语句的Python“float”值，增加了一些额外的严格性。现在，“float”值将与[`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float")数据类型相关联，而不是以前的Decimal强制转换[`Numeric`](../core/type_basics.html#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric")数据类型，消除了在SQLite上发出的令人困惑的警告以及对Decimal的不必要强制转换。
- en: See also
  id: totrans-1055
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Stronger typing added to “float” datatypes](migration_12.html#change-floats-12)'
  id: totrans-1056
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[对“float”数据类型进行更强的类型转换](migration_12.html#change-floats-12)'
- en: 'References: [#4017](https://www.sqlalchemy.org/trac/ticket/4017)'
  id: totrans-1057
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4017](https://www.sqlalchemy.org/trac/ticket/4017)
- en: '**[sql] [bug]**'
  id: totrans-1058
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The operator precedence for all comparison operators such as LIKE, IS, IN, MATCH,
    equals, greater than, less than, etc. has all been merged into one level, so that
    expressions which make use of these against each other will produce parentheses
    between them. This suits the stated operator precedence of databases like Oracle,
    MySQL and others which place all of these operators as equal precedence, as well
    as PostgreSQL as of 9.5 which has also flattened its operator precedence.
  id: totrans-1059
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 所有比较运算符（如LIKE、IS、IN、MATCH、等于、大于、小于等）的操作优先级已经合并为一个级别，因此对这些运算符进行相互比较的表达式将在它们之间产生括号。这适用于像Oracle、MySQL等数据库的操作符优先级，这些数据库将所有这些运算符视为相等优先级，以及PostgreSQL
    9.5版本之后也已经扁平化了其操作符优先级。
- en: See also
  id: totrans-1060
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Flattened operator precedence for comparison operators](migration_12.html#change-3999)'
  id: totrans-1061
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[比较运算符的扁平化操作优先级](migration_12.html#change-3999)'
- en: 'References: [#3999](https://www.sqlalchemy.org/trac/ticket/3999)'
  id: totrans-1062
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3999](https://www.sqlalchemy.org/trac/ticket/3999)
- en: '**[sql] [bug]**'
  id: totrans-1063
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Repaired issue where the type of an expression that used [`ColumnOperators.is_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_") or similar would not be a “boolean”
    type, instead the type would be “nulltype”, as well as when using custom comparison
    operators against an untyped expression. This typing can impact how the expression
    behaves in larger contexts as well as in result-row-handling.
  id: totrans-1064
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用[`ColumnOperators.is_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_")或类似操作符的表达式类型不会是“boolean”类型的问题，而是类型将是“nulltype”，以及当使用自定义比较运算符对未类型化表达式进行比较时。这种类型化可能会影响表达式在更大上下文中以及在结果行处理中的行为。
- en: 'References: [#3873](https://www.sqlalchemy.org/trac/ticket/3873)'
  id: totrans-1065
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3873](https://www.sqlalchemy.org/trac/ticket/3873)
- en: '**[sql] [bug]**'
  id: totrans-1066
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed the negation of a [`Label`](../core/sqlelement.html#sqlalchemy.sql.expression.Label
    "sqlalchemy.sql.expression.Label") construct so that the inner element is negated
    correctly, when the [`not_()`](../core/sqlelement.html#sqlalchemy.sql.expression.not_
    "sqlalchemy.sql.expression.not_") modifier is applied to the labeled expression.
  id: totrans-1067
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了对[`Label`](../core/sqlelement.html#sqlalchemy.sql.expression.Label "sqlalchemy.sql.expression.Label")构造的否定，使得当应用[`not_()`](../core/sqlelement.html#sqlalchemy.sql.expression.not_
    "sqlalchemy.sql.expression.not_")修饰符到标记表达式时，内部元素被正确否定。
- en: 'References: [#3969](https://www.sqlalchemy.org/trac/ticket/3969)'
  id: totrans-1068
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3969](https://www.sqlalchemy.org/trac/ticket/3969)
- en: '**[sql] [bug]**'
  id: totrans-1069
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The system by which percent signs in SQL statements are “doubled” for escaping
    purposes has been refined. The “doubling” of percent signs mostly associated with
    the [`literal_column`](../core/sqlelement.html#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column") construct as well as operators like
    [`ColumnOperators.contains()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains") now occurs based on the
    stated paramstyle of the DBAPI in use; for percent-sensitive paramstyles as are
    common with the PostgreSQL and MySQL drivers the doubling will occur, for others
    like that of SQLite it will not. This allows more database-agnostic use of the
    [`literal_column`](../core/sqlelement.html#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column") construct to be possible.
  id: totrans-1070
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQL语句中百分号“双倍”用于转义目的的系统已经得到改进。与[`literal_column`](../core/sqlelement.html#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column")构造以及[`ColumnOperators.contains()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")等操作符相关的百分号“双倍”现在基于正在使用的DBAPI的声明的参数样式而发生；对于像PostgreSQL和MySQL驱动程序常见的百分号敏感参数样式，将会发生双倍，对于SQLite等其他参数样式则不会。这使得更多数据库通用的使用[`literal_column`](../core/sqlelement.html#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column")构造成为可能。
- en: See also
  id: totrans-1071
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Percent signs in literal_column() now conditionally escaped](migration_12.html#change-3740)'
  id: totrans-1072
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[literal_column()中的百分号现在有条件转义](migration_12.html#change-3740)'
- en: 'References: [#3740](https://www.sqlalchemy.org/trac/ticket/3740)'
  id: totrans-1073
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3740](https://www.sqlalchemy.org/trac/ticket/3740)
- en: '**[sql] [bug]**'
  id: totrans-1074
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where a column-level [`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") would fail to compile the SQL expression
    using the underlying dialect compiler as well as apply proper flags to generate
    literal values as inline, in the case that the sqltext is a Core expression and
    not just a plain string. This was long-ago fixed for table-level check constraints
    in 0.9 as part of [#2742](https://www.sqlalchemy.org/trac/ticket/2742), which
    more commonly feature Core SQL expressions as opposed to plain string expressions.
  id: totrans-1075
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，在这个 bug 中，列级[`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint")在编译使用底层方言编译器的 SQL 表达式时会失败，并且无法应用正确的标志以生成内联的字面值，如果
    sqltext 是一个 Core 表达式而不仅仅是一个普通字符串。这在 0.9 版本中作为[#2742](https://www.sqlalchemy.org/trac/ticket/2742)的一部分长时间以来已经修复，更常见的是在表级别的检查约束中使用
    Core SQL 表达式而不是普通字符串表达式。
- en: 'References: [#3957](https://www.sqlalchemy.org/trac/ticket/3957)'
  id: totrans-1076
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3957](https://www.sqlalchemy.org/trac/ticket/3957)
- en: '**[sql] [bug]**'
  id: totrans-1077
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where a SQL-oriented Python-side column default could fail to be executed
    properly upon INSERT in the “pre-execute” codepath, if the SQL itself were an
    untyped expression, such as plain text. The “pre- execute” codepath is fairly
    uncommon however can apply to non-integer primary key columns with SQL defaults
    when RETURNING is not used.
  id: totrans-1078
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，在这个 bug 中，SQL 导向的 Python 端列默认值在“pre-execute”代码路径中可能无法在 INSERT 时正确执行，如果
    SQL 本身是一个未类型化的表达式，比如纯文本。然而，“pre-execute”代码路径相当不常见，但当不使用 RETURNING 时，它可以应用于具有 SQL
    默认值的非整数主键列。
- en: 'References: [#3923](https://www.sqlalchemy.org/trac/ticket/3923)'
  id: totrans-1079
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3923](https://www.sqlalchemy.org/trac/ticket/3923)
- en: '**[sql] [bug]**'
  id: totrans-1080
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The expression used for COLLATE as rendered by the column-level [`collate()`](../core/sqlelement.html#sqlalchemy.sql.expression.collate
    "sqlalchemy.sql.expression.collate") and [`ColumnOperators.collate()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.collate
    "sqlalchemy.sql.expression.ColumnOperators.collate") is now quoted as an identifier
    when the name is case sensitive, e.g. has uppercase characters. Note that this
    does not impact type-level collation, which is already quoted.
  id: totrans-1081
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过列级[`collate()`](../core/sqlelement.html#sqlalchemy.sql.expression.collate
    "sqlalchemy.sql.expression.collate")和[`ColumnOperators.collate()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.collate
    "sqlalchemy.sql.expression.ColumnOperators.collate")渲染的用于 COLLATE 的表达式现在在名称区分大小写时被引用为标识符。请注意，这不会影响类型级别的排序规则，因为它已经被引用。
- en: See also
  id: totrans-1082
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[The column-level COLLATE keyword now quotes the collation name](migration_12.html#change-3785)'
  id: totrans-1083
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[列级 COLLATE 关键字现在引用排序规则名称](migration_12.html#change-3785)'
- en: 'References: [#3785](https://www.sqlalchemy.org/trac/ticket/3785)'
  id: totrans-1084
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3785](https://www.sqlalchemy.org/trac/ticket/3785)
- en: '**[sql] [bug]**'
  id: totrans-1085
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where the use of an [`Alias`](../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") object in a column context would raise an argument
    error when it tried to group itself into a parenthesized expression. Using [`Alias`](../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") in this way is not yet a fully supported API,
    however it applies to some end-user recipes and may have a more prominent role
    in support of some future PostgreSQL features.
  id: totrans-1086
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在列上下文中使用[`Alias`](../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias")对象会在尝试将自身分组到括号表达式中时引发参数错误的 bug。目前还不完全支持以这种方式使用[`Alias`](../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias")的 API，但它适用于一些最终用户的示例，并且可能在支持某些未来 PostgreSQL
    功能时发挥更重要的作用。
- en: 'References: [#3939](https://www.sqlalchemy.org/trac/ticket/3939)'
  id: totrans-1087
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3939](https://www.sqlalchemy.org/trac/ticket/3939)
- en: schema
  id: totrans-1088
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: '**[schema] [bug]**'
  id: totrans-1089
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema] [bug]**'
- en: An [`ArgumentError`](../core/exceptions.html#sqlalchemy.exc.ArgumentError "sqlalchemy.exc.ArgumentError")
    is now raised if a [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") object is created with a mismatched
    number of “local” and “remote” columns, which otherwise causes the internal state
    of the constraint to be incorrect. Note that this also impacts the condition where
    a dialect’s reflection process produces a mismatched set of columns for a foreign
    key constraint.
  id: totrans-1090
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果创建一个具有不匹配的“本地”和“远程”列数量的[`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")对象，则现在会引发一个[`ArgumentError`](../core/exceptions.html#sqlalchemy.exc.ArgumentError
    "sqlalchemy.exc.ArgumentError")，否则会导致约束的内部状态不正确。请注意，这也会影响方言的反射过程产生不匹配的列集合用于外键约束的情况。
- en: 'This change is also **backported** to: 1.1.10'
  id: totrans-1091
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.1.10
- en: 'References: [#3949](https://www.sqlalchemy.org/trac/ticket/3949)'
  id: totrans-1092
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3949](https://www.sqlalchemy.org/trac/ticket/3949)
- en: postgresql
  id: totrans-1093
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-1094
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Continuing with the fix that correctly handles PostgreSQL version string “10devel”
    released in 1.1.8, an additional regexp bump to handle version strings of the
    form “10beta1”. While PostgreSQL now offers better ways to get this information,
    we are sticking w/ the regexp at least through 1.1.x for the least amount of risk
    to compatibility w/ older or alternate PostgreSQL databases.
  id: totrans-1095
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 继续修复正确处理 PostgreSQL 版本字符串“10devel”的问题，该问题在 1.1.8 中发布，另外增加了一个正则表达式版本以处理形式为“10beta1”的版本字符串。虽然
    PostgreSQL 现在提供了更好的获取此信息的方法，但我们至少在 1.1.x 中仍然坚持使用正则表达式，以减少与旧版或替代 PostgreSQL 数据库的兼容性风险。
- en: 'This change is also **backported** to: 1.1.11'
  id: totrans-1096
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.1.11
- en: 'References: [#4005](https://www.sqlalchemy.org/trac/ticket/4005)'
  id: totrans-1097
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4005](https://www.sqlalchemy.org/trac/ticket/4005)
- en: '**[postgresql] [bug]**'
  id: totrans-1098
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug where using [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") with a string type that features a collation would fail
    to produce the correct syntax within CREATE TABLE.
  id: totrans-1099
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用带有排序规则的字符串类型的 [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") 会在 CREATE TABLE 中产生正确语法的错误。
- en: 'This change is also **backported** to: 1.1.11'
  id: totrans-1100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.1.11
- en: 'References: [#4006](https://www.sqlalchemy.org/trac/ticket/4006)'
  id: totrans-1101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4006](https://www.sqlalchemy.org/trac/ticket/4006)
- en: '**[postgresql] [bug]**'
  id: totrans-1102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added “autocommit” support for GRANT, REVOKE keywords. Pull request courtesy
    Jacob Hayes.
  id: totrans-1103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 GRANT、REVOKE 关键字增加了“autocommit”支持。感谢 Jacob Hayes 提交的拉取请求。
- en: 'This change is also **backported** to: 1.1.10'
  id: totrans-1104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.1.10
- en: '**[postgresql] [bug]**'
  id: totrans-1105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added support for parsing the PostgreSQL version string for a development version
    like “PostgreSQL 10devel”. Pull request courtesy Sean McCully.
  id: totrans-1106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了解析 PostgreSQL 版本字符串的支持，例如“PostgreSQL 10devel”。感谢 Sean McCully 提交的拉取请求。
- en: 'This change is also **backported** to: 1.1.8'
  id: totrans-1107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.1.8
- en: '**[postgresql] [bug]**'
  id: totrans-1108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug where the base [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") datatype would not invoke the bind/result processors
    of [`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY").
  id: totrans-1109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了基本 [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")
    数据类型不会调用 [`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY") 的绑定/结果处理器的错误。
- en: 'References: [#3964](https://www.sqlalchemy.org/trac/ticket/3964)'
  id: totrans-1110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3964](https://www.sqlalchemy.org/trac/ticket/3964)
- en: '**[postgresql] [bug]**'
  id: totrans-1111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added support for all possible “fields” identifiers when reflecting the PostgreSQL
    `INTERVAL` datatype, e.g. “YEAR”, “MONTH”, “DAY TO MINUTE”, etc.. In addition,
    the [`INTERVAL`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.INTERVAL
    "sqlalchemy.dialects.postgresql.INTERVAL") datatype itself now includes a new
    parameter [`INTERVAL.fields`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.INTERVAL.params.fields
    "sqlalchemy.dialects.postgresql.INTERVAL") where these qualifiers can be specified;
    the qualifier is also reflected back into the resulting datatype upon reflection
    / inspection.
  id: totrans-1112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在反射 PostgreSQL `INTERVAL` 数据类型时，现在支持所有可能的“fields”标识符，例如“YEAR”、“MONTH”、“DAY TO
    MINUTE”等。此外，[`INTERVAL`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.INTERVAL
    "sqlalchemy.dialects.postgresql.INTERVAL") 数据类型本身现在包括一个新参数 [`INTERVAL.fields`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.INTERVAL.params.fields
    "sqlalchemy.dialects.postgresql.INTERVAL")，可以在其中指定这些限定符；在反射/检查时，限定符也会反映到生成的数据类型中。
- en: See also
  id: totrans-1113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Support for fields specification in INTERVAL, including full reflection](migration_12.html#change-3959)'
  id: totrans-1114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[支持 INTERVAL 中的字段规范，包括完整反射](migration_12.html#change-3959)'
- en: 'References: [#3959](https://www.sqlalchemy.org/trac/ticket/3959)'
  id: totrans-1115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3959](https://www.sqlalchemy.org/trac/ticket/3959)
- en: mysql
  id: totrans-1116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [feature]**'
  id: totrans-1117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [feature]**'
- en: Added support for MySQL’s ON DUPLICATE KEY UPDATE MySQL-specific [`Insert`](../dialects/mysql.html#sqlalchemy.dialects.mysql.Insert
    "sqlalchemy.dialects.mysql.dml.Insert") object. Pull request courtesy Michael
    Doronin.
  id: totrans-1118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对 MySQL 的 ON DUPLICATE KEY UPDATE MySQL特定 [`Insert`](../dialects/mysql.html#sqlalchemy.dialects.mysql.Insert
    "sqlalchemy.dialects.mysql.dml.Insert") 对象的支持。感谢 Michael Doronin 提交的拉取请求。
- en: See also
  id: totrans-1119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Support for INSERT..ON DUPLICATE KEY UPDATE](migration_12.html#change-4009)'
  id: totrans-1120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[支持 INSERT..ON DUPLICATE KEY UPDATE](migration_12.html#change-4009)'
- en: 'References: [#4009](https://www.sqlalchemy.org/trac/ticket/4009)'
  id: totrans-1121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4009](https://www.sqlalchemy.org/trac/ticket/4009)
- en: '**[mysql] [bug]**'
  id: totrans-1122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: MySQL 5.7 has introduced permission limiting for the “SHOW VARIABLES” command;
    the MySQL dialect will now handle when SHOW returns no row, in particular for
    the initial fetch of SQL_MODE, and will emit a warning that user permissions should
    be modified to allow the row to be present.
  id: totrans-1123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL 5.7 引入了对“SHOW VARIABLES”命令的权限限制；MySQL 方言现在将处理 SHOW 返回没有行的情况，特别是对于 SQL_MODE
    的初始获取，并发出警告，指出用户权限应该被修改以允许行存在。
- en: 'This change is also **backported** to: 1.1.11'
  id: totrans-1124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也**回溯**到：1.1.11
- en: 'References: [#4007](https://www.sqlalchemy.org/trac/ticket/4007)'
  id: totrans-1125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4007](https://www.sqlalchemy.org/trac/ticket/4007)
- en: '**[mysql] [bug]**'
  id: totrans-1126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Removed an ancient and unnecessary intercept of the UTC_TIMESTAMP MySQL function,
    which was getting in the way of using it with a parameter.
  id: totrans-1127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了对 UTC_TIMESTAMP MySQL 函数的古老且不必要的拦截，这个拦截影响了使用带参数的情况。
- en: 'This change is also **backported** to: 1.1.10'
  id: totrans-1128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也**回溯**到：1.1.10
- en: 'References: [#3966](https://www.sqlalchemy.org/trac/ticket/3966)'
  id: totrans-1129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3966](https://www.sqlalchemy.org/trac/ticket/3966)
- en: '**[mysql] [bug]**'
  id: totrans-1130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed bug in MySQL dialect regarding rendering of table options in conjunction
    with PARTITION options when rendering CREATE TABLE. The PARTITION related options
    need to follow the table options, whereas previously this ordering was not enforced.
  id: totrans-1131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 MySQL 方言中关于在渲染 CREATE TABLE 时渲染表选项与 PARTITION 选项同时出现时表选项的渲染问题。PARTITION
    相关的选项需要跟在表选项后面，而以前没有强制执行这个顺序。
- en: 'This change is also **backported** to: 1.1.10'
  id: totrans-1132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也**回溯**到：1.1.10
- en: 'References: [#3961](https://www.sqlalchemy.org/trac/ticket/3961)'
  id: totrans-1133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3961](https://www.sqlalchemy.org/trac/ticket/3961)
- en: '**[mysql] [bug]**'
  id: totrans-1134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Added support for views that are unreflectable due to stale table definitions,
    when calling [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect"); a warning is emitted for the table that
    cannot respond to `DESCRIBE`, but the operation succeeds.
  id: totrans-1135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对由于陈旧的表定义而无法反射的视图的支持，在调用[`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect")时，对于无法响应`DESCRIBE`的表，会发出警告，但操作会成功。
- en: 'References: [#3871](https://www.sqlalchemy.org/trac/ticket/3871)'
  id: totrans-1136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3871](https://www.sqlalchemy.org/trac/ticket/3871)
- en: mssql
  id: totrans-1137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-1138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed bug where SQL Server transaction isolation must be fetched from a different
    view when using Azure data warehouse, the query is now attempted against both
    views and then a NotImplemented is raised unconditionally if failure continues
    to provide the best resiliency against future arbitrary API changes in new SQL
    Server versions.
  id: totrans-1139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用 Azure 数据仓库时必须从不同视图中获取 SQL Server 事务隔离的错误，现在会尝试针对两个视图执行查询，然后如果持续失败将无条件地引发一个
    NotImplemented，以提供对未来新的 SQL Server 版本中任意 API 更改的最佳恢复能力。
- en: 'This change is also **backported** to: 1.1.11'
  id: totrans-1140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也**回溯**到：1.1.11
- en: 'References: [#3994](https://www.sqlalchemy.org/trac/ticket/3994)'
  id: totrans-1141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3994](https://www.sqlalchemy.org/trac/ticket/3994)
- en: '**[mssql] [bug]**'
  id: totrans-1142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Added a placeholder type [`XML`](../dialects/mssql.html#sqlalchemy.dialects.mssql.XML
    "sqlalchemy.dialects.mssql.XML") to the SQL Server dialect, so that a reflected
    table which includes this type can be re-rendered as a CREATE TABLE. The type
    has no special round-trip behavior nor does it currently support additional qualifying
    arguments.
  id: totrans-1143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个占位符类型[`XML`](../dialects/mssql.html#sqlalchemy.dialects.mssql.XML "sqlalchemy.dialects.mssql.XML")到
    SQL Server 方言中，以便包含此类型的反射表可以重新渲染为 CREATE TABLE。该类型没有特殊的往返行为，也不支持额外的限定参数。
- en: 'This change is also **backported** to: 1.1.11'
  id: totrans-1144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也**回溯**到：1.1.11
- en: 'References: [#3973](https://www.sqlalchemy.org/trac/ticket/3973)'
  id: totrans-1145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3973](https://www.sqlalchemy.org/trac/ticket/3973)
- en: '**[mssql] [bug]**'
  id: totrans-1146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: The SQL Server dialect now allows for a database and/or owner name with a dot
    inside of it, using brackets explicitly in the string around the owner and optionally
    the database name as well. In addition, sending the [`quoted_name`](../core/sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name") construct for the schema name will not
    split on the dot and will deliver the full string as the “owner”. [`quoted_name`](../core/sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name") is also now available from the `sqlalchemy.sql`
    import space.
  id: totrans-1147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，SQL Server方言允许在字符串中明确使用括号来表示带有点的数据库和/或所有者名称，围绕所有者和可选的数据库名称。此外，发送[`quoted_name`](../core/sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")构造用于模式名称将不会在点上拆分，并将提供完整字符串作为“所有者”。[`quoted_name`](../core/sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")现在也可以从`sqlalchemy.sql`导入空间中使用。
- en: See also
  id: totrans-1148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[SQL Server schema names with embedded dots supported](migration_12.html#change-2626)'
  id: totrans-1149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[支持带有嵌入点的SQL Server模式名称](migration_12.html#change-2626)'
- en: 'References: [#2626](https://www.sqlalchemy.org/trac/ticket/2626)'
  id: totrans-1150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2626](https://www.sqlalchemy.org/trac/ticket/2626)
- en: oracle
  id: totrans-1151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [feature] [postgresql]**'
  id: totrans-1152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [feature] [postgresql]**'
- en: Added new keywords [`Sequence.cache`](../core/defaults.html#sqlalchemy.schema.Sequence.params.cache
    "sqlalchemy.schema.Sequence") and [`Sequence.order`](../core/defaults.html#sqlalchemy.schema.Sequence.params.order
    "sqlalchemy.schema.Sequence") to [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence"), to allow rendering of the CACHE parameter understood
    by Oracle and PostgreSQL, and the ORDER parameter understood by Oracle. Pull request
    courtesy David Moore.
  id: totrans-1153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向[`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")添加了新关键字[`Sequence.cache`](../core/defaults.html#sqlalchemy.schema.Sequence.params.cache
    "sqlalchemy.schema.Sequence")和[`Sequence.order`](../core/defaults.html#sqlalchemy.schema.Sequence.params.order
    "sqlalchemy.schema.Sequence")，以允许渲染Oracle和PostgreSQL理解的CACHE参数以及Oracle理解的ORDER参数。拉取请求由David
    Moore提供。
- en: 'This change is also **backported** to: 1.1.12'
  id: totrans-1154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.1.12
- en: '**[oracle] [feature]**'
  id: totrans-1155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [feature]**'
- en: The Oracle dialect now inspects unique and check constraints when using [`Inspector.get_unique_constraints()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_unique_constraints
    "sqlalchemy.engine.reflection.Inspector.get_unique_constraints"), [`Inspector.get_check_constraints()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_check_constraints
    "sqlalchemy.engine.reflection.Inspector.get_check_constraints"). As Oracle does
    not have unique constraints that are separate from a unique [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index"), a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") that’s reflected will still continue to not have [`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") objects associated with it. Pull requests
    courtesy Eloy Felix.
  id: totrans-1156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用[`Inspector.get_unique_constraints()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_unique_constraints
    "sqlalchemy.engine.reflection.Inspector.get_unique_constraints")、[`Inspector.get_check_constraints()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_check_constraints
    "sqlalchemy.engine.reflection.Inspector.get_check_constraints")时，Oracle方言现在会检查唯一约束和检查约束。由于Oracle没有与唯一[`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")分开的唯一约束，因此反射的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")仍将继续不具有与之关联的[`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint")对象。拉取请求由Eloy Felix提供。
- en: See also
  id: totrans-1157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Oracle Unique, Check constraints now reflected](migration_12.html#change-4003)'
  id: totrans-1158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Oracle唯一约束，检查约束现在反映](migration_12.html#change-4003)'
- en: 'References: [#4003](https://www.sqlalchemy.org/trac/ticket/4003)'
  id: totrans-1159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4003](https://www.sqlalchemy.org/trac/ticket/4003)
- en: '**[oracle] [bug]**'
  id: totrans-1160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Support for two-phase transactions has been removed entirely for cx_Oracle when
    version 6.0b1 or later of the DBAPI is in use. The two- phase feature historically
    has never been usable under cx_Oracle 5.x in any case, and cx_Oracle 6.x has removed
    the connection-level “twophase” flag upon which this feature relied.
  id: totrans-1161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用版本为6.0b1或更高版本的DBAPI时，cx_Oracle完全删除了对两阶段事务的支持。在任何情况下，cx_Oracle 5.x历史上从未能够使用两阶段功能，而cx_Oracle
    6.x已经删除了此功能所依赖的连接级“twophase”标志。
- en: 'This change is also **backported** to: 1.1.11'
  id: totrans-1162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.1.11
- en: 'References: [#3997](https://www.sqlalchemy.org/trac/ticket/3997)'
  id: totrans-1163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3997](https://www.sqlalchemy.org/trac/ticket/3997)
- en: '**[oracle] [bug]**'
  id: totrans-1164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed bug in cx_Oracle dialect where version string parsing would fail for cx_Oracle
    version 6.0b1 due to the “b” character. Version string parsing is now via a regexp
    rather than a simple split.
  id: totrans-1165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 cx_Oracle 方言中版本字符串解析失败的 bug，因为 cx_Oracle 版本 6.0b1 中的“b”字符。现在版本字符串解析使用正则表达式而不是简单的分割。
- en: 'This change is also **backported** to: 1.1.10'
  id: totrans-1166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯到**：1.1.10
- en: 'References: [#3975](https://www.sqlalchemy.org/trac/ticket/3975)'
  id: totrans-1167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3975](https://www.sqlalchemy.org/trac/ticket/3975)
- en: '**[oracle] [bug]**'
  id: totrans-1168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [错误]**'
- en: The cx_Oracle dialect now supports “sane multi rowcount”, that is, when a series
    of parameter sets are executed via DBAPI `cursor.executemany()`, we can make use
    of `cursor.rowcount` to verify the number of rows matched. This has an impact
    within the ORM when detecting concurrent modification scenarios, in that some
    simple conditions can now be detected even when the ORM is batching statements,
    as well as when the more strict versioning feature is used, the ORM can still
    use statement batching. The flag is enabled for cx_Oracle assuming at least version
    5.0, which is now commonplace.
  id: totrans-1169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: cx_Oracle 方言现在支持“合理的多行数”，即，当通过 DBAPI `cursor.executemany()` 执行一系列参数集时，我们可以利用
    `cursor.rowcount` 来验证匹配的行数。这在 ORM 中检测并发修改场景时产生影响，即使 ORM 正在批量处理语句时，也可以检测到一些简单条件，以及在使用更严格的版本功能时，ORM
    仍然可以使用语句批处理。该标志针对 cx_Oracle 默认为至少版本 5.0，这在现在已经很普遍。
- en: 'References: [#3932](https://www.sqlalchemy.org/trac/ticket/3932)'
  id: totrans-1170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3932](https://www.sqlalchemy.org/trac/ticket/3932)
- en: '**[oracle] [bug]**'
  id: totrans-1171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [错误]** '
- en: Oracle reflection now “normalizes” the name given to a foreign key constraint,
    that is, returns it as all lower case for a case insensitive name. This was already
    the behavior for indexes and primary key constraints as well as all table and
    column names. This will allow Alembic autogenerate scripts to compare and render
    foreign key constraint names correctly when initially specified as case insensitive.
  id: totrans-1172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Oracle 反射现在“标准化”了外键约束的名称，即，返回不区分大小写的名称。这已经是对索引和主键约束以及所有表和列名称的行为。当 Alembic 自动生成脚本比较和渲染外键约束名称时，初始指定为不区分大小写时，这将允许正确地进行比较。
- en: See also
  id: totrans-1173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Oracle foreign key constraint names are now “name normalized”](migration_12.html#change-3276)'
  id: totrans-1174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Oracle 外键约束名称现在“名字标准化”了](migration_12.html#change-3276)'
- en: 'References: [#3276](https://www.sqlalchemy.org/trac/ticket/3276)'
  id: totrans-1175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3276](https://www.sqlalchemy.org/trac/ticket/3276)
- en: misc
  id: totrans-1176
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[feature] [ext]**'
  id: totrans-1177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[特性] [扩展]**'
- en: Added new flag [`Session.enable_baked_queries`](../orm/session_api.html#sqlalchemy.orm.Session.params.enable_baked_queries
    "sqlalchemy.orm.Session") to the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") to allow baked queries to be disabled session-wide,
    reducing memory use. Also added new [`Bakery`](../orm/extensions/baked.html#sqlalchemy.ext.baked.Bakery
    "sqlalchemy.ext.baked.Bakery") wrapper so that the bakery returned by [`BakedQuery.bakery`](../orm/extensions/baked.html#sqlalchemy.ext.baked.BakedQuery.params.bakery
    "sqlalchemy.ext.baked.BakedQuery") can be inspected.
  id: totrans-1178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新标志[`Session.enable_baked_queries`](../orm/session_api.html#sqlalchemy.orm.Session.params.enable_baked_queries
    "sqlalchemy.orm.Session")到[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")，允许全局禁用烘焙查询，从而减少内存使用。还添加了新的[`Bakery`](../orm/extensions/baked.html#sqlalchemy.ext.baked.Bakery
    "sqlalchemy.ext.baked.Bakery")包装器，以便检查由[`BakedQuery.bakery`](../orm/extensions/baked.html#sqlalchemy.ext.baked.BakedQuery.params.bakery
    "sqlalchemy.ext.baked.BakedQuery")返回的烘焙。
- en: '**[bug] [ext]**'
  id: totrans-1179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [扩展]**'
- en: Protected against testing “None” as a class in the case where declarative classes
    are being garbage collected and new automap prepare() operations are taking place
    concurrently, very infrequently hitting a weakref that has not been fully acted
    upon after gc.
  id: totrans-1180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在自动映射准备()操作同时进行的情况下，保护了测试“None”作为一个类的情况，非常少数情况下可能会在垃圾回收时清除声明性类，并且新的 automap
    准备()操作正在进行。
- en: 'This change is also **backported** to: 1.1.10'
  id: totrans-1181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯到**：1.1.10
- en: 'References: [#3980](https://www.sqlalchemy.org/trac/ticket/3980)'
  id: totrans-1182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3980](https://www.sqlalchemy.org/trac/ticket/3980)
- en: '**[bug] [ext]**'
  id: totrans-1183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [扩展]**'
- en: Fixed bug in [`sqlalchemy.ext.mutable`](../orm/extensions/mutable.html#module-sqlalchemy.ext.mutable
    "sqlalchemy.ext.mutable") where the [`Mutable.as_mutable()`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.Mutable.as_mutable
    "sqlalchemy.ext.mutable.Mutable.as_mutable") method would not track a type that
    had been copied using `TypeEngine.copy()`. This became more of a regression in
    1.1 compared to 1.0 because the [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") class is now a subclass of [`SchemaEventTarget`](../core/events.html#sqlalchemy.events.SchemaEventTarget
    "sqlalchemy.events.SchemaEventTarget"), which among other things indicates to
    the parent [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    that the type should be copied when the [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") is. These copies are common when using declarative
    with mixins or abstract classes.
  id: totrans-1184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`sqlalchemy.ext.mutable`](../orm/extensions/mutable.html#module-sqlalchemy.ext.mutable
    "sqlalchemy.ext.mutable") 中的错误，在使用 `TypeEngine.copy()` 复制类型后，[`Mutable.as_mutable()`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.Mutable.as_mutable
    "sqlalchemy.ext.mutable.Mutable.as_mutable") 方法将不会跟踪已复制的类型。这在 1.1 版本相对于 1.0 变得更加退化，因为
    [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator "sqlalchemy.types.TypeDecorator")
    类现在是 [`SchemaEventTarget`](../core/events.html#sqlalchemy.events.SchemaEventTarget
    "sqlalchemy.events.SchemaEventTarget") 的子类，其中之一的功能是指示父 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 在 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 被复制时应该被复制。在使用具有混合类或抽象类的声明时，这些复制是常见的。
- en: 'This change is also **backported** to: 1.1.8'
  id: totrans-1185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.1.8
- en: 'References: [#3950](https://www.sqlalchemy.org/trac/ticket/3950)'
  id: totrans-1186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3950](https://www.sqlalchemy.org/trac/ticket/3950)
- en: '**[bug] [ext]**'
  id: totrans-1187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [扩展]**'
- en: Added support for bound parameters, e.g. those normally set up via [`Query.params()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.params
    "sqlalchemy.orm.Query.params"), to the `Result.count()` method. Previously, support
    for parameters were omitted. Pull request courtesy Pat Deegan.
  id: totrans-1188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对绑定参数的支持，例如通常通过 [`Query.params()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.params
    "sqlalchemy.orm.Query.params") 设置的参数，到 `Result.count()` 方法。之前省略了对参数的支持。感谢 Pat
    Deegan 提供的拉取请求。
- en: 'This change is also **backported** to: 1.1.8'
  id: totrans-1189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.1.8
- en: '**[bug] [ext]**'
  id: totrans-1190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [扩展]**'
- en: The `AssociationProxy.any()`, `AssociationProxy.has()` and `AssociationProxy.contains()`
    comparison methods now support linkage to an attribute that is itself also an
    [`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy"), recursively.
  id: totrans-1191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在 `AssociationProxy.any()`, `AssociationProxy.has()` 和 `AssociationProxy.contains()`
    比较方法支持链接到一个属性，该属性本身也是一个[`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy")，递归地。
- en: See also
  id: totrans-1192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[AssociationProxy any(), has(), contains() work with chained association proxies](migration_12.html#change-3769)'
  id: totrans-1193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[关联代理 any(), has(), contains() 可与链式关联代理一起使用](migration_12.html#change-3769)'
- en: 'References: [#3769](https://www.sqlalchemy.org/trac/ticket/3769)'
  id: totrans-1194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3769](https://www.sqlalchemy.org/trac/ticket/3769)
- en: '**[bug] [ext]**'
  id: totrans-1195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [扩展]**'
- en: Implemented in-place mutation operators `__ior__`, `__iand__`, `__ixor__` and
    `__isub__` for [`MutableSet`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableSet
    "sqlalchemy.ext.mutable.MutableSet") and `__iadd__` for [`MutableList`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableList
    "sqlalchemy.ext.mutable.MutableList") so that change events are fired off when
    these mutator methods are used to alter the collection.
  id: totrans-1196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 实现了原地变异操作符 `__ior__`, `__iand__`, `__ixor__` 和 `__isub__`，用于 [`MutableSet`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableSet
    "sqlalchemy.ext.mutable.MutableSet")，以及 `__iadd__` 用于 [`MutableList`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableList
    "sqlalchemy.ext.mutable.MutableList")，这样当使用这些变异方法修改集合时会触发变更事件。
- en: See also
  id: totrans-1197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[In-place mutation operators work for MutableSet, MutableList](migration_12.html#change-3853)'
  id: totrans-1198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[原地变异操作符对 MutableSet, MutableList 有效](migration_12.html#change-3853)'
- en: 'References: [#3853](https://www.sqlalchemy.org/trac/ticket/3853)'
  id: totrans-1199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3853](https://www.sqlalchemy.org/trac/ticket/3853)
- en: '**[bug] [declarative]**'
  id: totrans-1200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [声明]**'
- en: A warning is emitted if the [`declared_attr.cascading`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr.cascading
    "sqlalchemy.orm.declared_attr.cascading") modifier is used with a declarative
    attribute that is itself declared on a class that is to be mapped, as opposed
    to a declarative mixin class or `__abstract__` class. The [`declared_attr.cascading`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr.cascading
    "sqlalchemy.orm.declared_attr.cascading") modifier currently only applies to mixin/abstract
    classes.
  id: totrans-1201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果使用[`declared_attr.cascading`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr.cascading
    "sqlalchemy.orm.declared_attr.cascading")修饰符与一个声明属性，而该属性本身是在要映射的类上声明的，而不是在混合类或`__abstract__`类上声明，则会发出警告。[`declared_attr.cascading`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr.cascading
    "sqlalchemy.orm.declared_attr.cascading")修饰符目前仅适用于混合/抽象类。
- en: 'References: [#3847](https://www.sqlalchemy.org/trac/ticket/3847)'
  id: totrans-1202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3847](https://www.sqlalchemy.org/trac/ticket/3847)
- en: '**[bug] [ext]**'
  id: totrans-1203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Improved the association proxy list collection so that premature autoflush against
    a newly created association object can be prevented in the case where `list.append()`
    is being used, and a lazy load would be invoked when the association proxy accesses
    the endpoint collection. The endpoint collection is now accessed first before
    the creator is invoked to produce the association object.
  id: totrans-1204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了关联代理列表集合，以防止针对新创建的关联对象进行过早的自动刷新，如果使用`list.append()`，并且当关联代理访问端点集合时会调用惰性加载。现在首先访问端点集合，然后调用创建者以生成关联对象。
- en: 'References: [#3941](https://www.sqlalchemy.org/trac/ticket/3941)'
  id: totrans-1205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3941](https://www.sqlalchemy.org/trac/ticket/3941)
- en: '**[bug] [ext]**'
  id: totrans-1206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: The [`sqlalchemy.ext.hybrid.hybrid_property`](../orm/extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property") class now supports calling mutators like
    `@setter`, `@expression` etc. multiple times across subclasses, and now provides
    a `@getter` mutator, so that a particular hybrid can be repurposed across subclasses
    or other classes. This now matches the behavior of `@property` in standard Python.
  id: totrans-1207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`sqlalchemy.ext.hybrid.hybrid_property`](../orm/extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property")类现在支持在子类中多次调用诸如`@setter`、`@expression`等的mutators，并且现在提供了一个`@getter`
    mutator，以便特定的混合可以在子类或其他类中重新使用。这现在与标准Python中的`@property`的行为相匹配。'
- en: See also
  id: totrans-1208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Hybrid attributes support reuse among subclasses, redefinition of @getter](migration_12.html#change-3911-3912)'
  id: totrans-1209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[混合属性支持在子类之间重用，重新定义@getter](migration_12.html#change-3911-3912)'
- en: 'References: [#3911](https://www.sqlalchemy.org/trac/ticket/3911), [#3912](https://www.sqlalchemy.org/trac/ticket/3912)'
  id: totrans-1210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3911](https://www.sqlalchemy.org/trac/ticket/3911), [#3912](https://www.sqlalchemy.org/trac/ticket/3912)
- en: '**[bug] [ext]**'
  id: totrans-1211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed a bug in the `sqlalchemy.ext.serializer` extension whereby an “annotated”
    SQL element (as produced by the ORM for many types of SQL expressions) could not
    be reliably serialized. Also bumped the default pickle level for the serializer
    to “HIGHEST_PROTOCOL”.
  id: totrans-1212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了`sqlalchemy.ext.serializer`扩展中的一个bug，即“注释”SQL元素（由ORM为许多类型的SQL表达式生成）无法可靠地序列化。还将序列化器的默认pickle级别提升到“HIGHEST_PROTOCOL”。
- en: 'References: [#3918](https://www.sqlalchemy.org/trac/ticket/3918)'
  id: totrans-1213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3918](https://www.sqlalchemy.org/trac/ticket/3918)
- en: 1.2.19
  id: totrans-1214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.2.19
- en: 'Released: April 15, 2019'
  id: totrans-1215
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2019年4月15日
- en: orm
  id: totrans-1216
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a regression in 1.2 due to the introduction of baked queries for relationship
    lazy loaders, where a race condition is created during the generation of the “lazy
    clause” which occurs within a memoized attribute. If two threads initialize the
    memoized attribute concurrently, the baked query could be generated with bind
    parameter keys that are then replaced with new keys by the next run, leading to
    a lazy load query that specifies the related criteria as `None`. The fix establishes
    that the parameter names are fixed before the new clause and parameter objects
    are generated, so that the names are the same every time.
  id: totrans-1218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于引入了用于关系惰性加载器的烘焙查询，导致1.2版本中的一个回归，生成“惰性子句”时会出现竞争条件，该条件发生在一个被记忆的属性内。如果两个线程同时初始化被记忆的属性，则烘焙查询可能会生成带有绑定参数键的查询，然后在下一次运行时用新键替换，导致惰性加载查询将相关条件指定为`None`。修复确保在生成新子句和参数对象之前固定参数名称，以便每次名称都相同。
- en: 'References: [#4507](https://www.sqlalchemy.org/trac/ticket/4507)'
  id: totrans-1219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4507](https://www.sqlalchemy.org/trac/ticket/4507)
- en: examples
  id: totrans-1220
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples] [bug]**'
  id: totrans-1221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[示例] [bug]**'
- en: Fixed bug in large_resultsets example case where a re-named “id” variable due
    to code reformatting caused the test to fail. Pull request courtesy Matt Schuchhardt.
  id: totrans-1222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了大结果集示例中的一个bug，由于代码重排导致“id”变量被重新命名，导致测试失败。感谢Matt Schuchhardt提供的拉取请求。
- en: 'References: [#4528](https://www.sqlalchemy.org/trac/ticket/4528)'
  id: totrans-1223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4528](https://www.sqlalchemy.org/trac/ticket/4528)
- en: engine
  id: totrans-1224
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-1225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Comparing two objects of [`URL`](../core/engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL") using `__eq__()` did not take port number into consideration,
    two objects differing only by port number were considered equal. Port comparison
    is now added in `__eq__()` method of [`URL`](../core/engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL"), objects differing by port number are now not equal.
    Additionally, `__ne__()` was not implemented for [`URL`](../core/engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL") which caused unexpected result when `!=` was used in
    Python2, since there are no implied relationships among the comparison operators
    in Python2.
  id: totrans-1226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用`__eq__()`比较两个[`URL`](../core/engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")对象时没有考虑端口号，只有端口号不同的两个对象被认为是相等的。现在在[`URL`](../core/engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL")的`__eq__()`方法中添加了端口比较，端口号不同的对象现在不相等。此外，在Python2中使用`!=`时，[`URL`](../core/engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL")没有实现`__ne__()`，这导致了意外的结果，因为在Python2中比较运算符之间没有暗示的关系。
- en: 'References: [#4406](https://www.sqlalchemy.org/trac/ticket/4406)'
  id: totrans-1227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4406](https://www.sqlalchemy.org/trac/ticket/4406)
- en: mssql
  id: totrans-1228
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-1229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: A commit() is emitted after an isolation level change to SNAPSHOT, as both pyodbc
    and pymssql open an implicit transaction which blocks subsequent SQL from being
    emitted in the current transaction.
  id: totrans-1230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在将隔离级别更改为SNAPSHOT后会发出一个commit()，因为pyodbc和pymssql都会打开一个隐式事务，这会阻止当前事务中的后续SQL被发出。
- en: 'References: [#4536](https://www.sqlalchemy.org/trac/ticket/4536)'
  id: totrans-1231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4536](https://www.sqlalchemy.org/trac/ticket/4536)
- en: oracle
  id: totrans-1232
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-1233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Added support for reflection of the [`NCHAR`](../core/type_basics.html#sqlalchemy.types.NCHAR
    "sqlalchemy.types.NCHAR") datatype to the Oracle dialect, and added [`NCHAR`](../core/type_basics.html#sqlalchemy.types.NCHAR
    "sqlalchemy.types.NCHAR") to the list of types exported by the Oracle dialect.
  id: totrans-1234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为Oracle方言添加了对[`NCHAR`](../core/type_basics.html#sqlalchemy.types.NCHAR "sqlalchemy.types.NCHAR")数据类型的反射支持，并将[`NCHAR`](../core/type_basics.html#sqlalchemy.types.NCHAR
    "sqlalchemy.types.NCHAR")添加到Oracle方言导出的类型列表中。
- en: 'References: [#4506](https://www.sqlalchemy.org/trac/ticket/4506)'
  id: totrans-1235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4506](https://www.sqlalchemy.org/trac/ticket/4506)
- en: orm
  id: totrans-1236
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a regression in 1.2 due to the introduction of baked queries for relationship
    lazy loaders, where a race condition is created during the generation of the “lazy
    clause” which occurs within a memoized attribute. If two threads initialize the
    memoized attribute concurrently, the baked query could be generated with bind
    parameter keys that are then replaced with new keys by the next run, leading to
    a lazy load query that specifies the related criteria as `None`. The fix establishes
    that the parameter names are fixed before the new clause and parameter objects
    are generated, so that the names are the same every time.
  id: totrans-1238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于为关系惰性加载器引入了烘焙查询，导致1.2中出现了一个回归问题，其中在生成“惰性子句”期间创建了一个竞争条件，该条件发生在一个被备忘的属性内。如果两个线程同时初始化备忘属性，则烘焙查询可能会生成带有绑定参数键的查询，然后在下一次运行时用新键替换，导致惰性加载查询将相关条件指定为`None`。修复确保在生成新子句和参数对象之前固定参数名称，以便每次名称都相同。
- en: 'References: [#4507](https://www.sqlalchemy.org/trac/ticket/4507)'
  id: totrans-1239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4507](https://www.sqlalchemy.org/trac/ticket/4507)
- en: examples
  id: totrans-1240
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples] [bug]**'
  id: totrans-1241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples] [bug]**'
- en: Fixed bug in large_resultsets example case where a re-named “id” variable due
    to code reformatting caused the test to fail. Pull request courtesy Matt Schuchhardt.
  id: totrans-1242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了大结果集示例中的一个bug，由于代码重排导致“id”变量被重新命名，导致测试失败。感谢Matt Schuchhardt提供的拉取请求。
- en: 'References: [#4528](https://www.sqlalchemy.org/trac/ticket/4528)'
  id: totrans-1243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4528](https://www.sqlalchemy.org/trac/ticket/4528)
- en: engine
  id: totrans-1244
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-1245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Comparing two objects of [`URL`](../core/engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL") using `__eq__()` did not take port number into consideration,
    two objects differing only by port number were considered equal. Port comparison
    is now added in `__eq__()` method of [`URL`](../core/engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL"), objects differing by port number are now not equal.
    Additionally, `__ne__()` was not implemented for [`URL`](../core/engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL") which caused unexpected result when `!=` was used in
    Python2, since there are no implied relationships among the comparison operators
    in Python2.
  id: totrans-1246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 `__eq__()` 比较两个[`URL`](../core/engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")对象时没有考虑端口号，仅通过端口号不同的两个对象被视为相等。现在，在[`URL`](../core/engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL")的 `__eq__()` 方法中添加了端口比较，端口号不同的对象现在不相等。另外，[`URL`](../core/engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL")中也没有实现 `__ne__()`，这导致在 Python2 中使用 `!=` 时出现意外结果，因为在 Python2
    中比较运算符之间没有暗含的关系。
- en: 'References: [#4406](https://www.sqlalchemy.org/trac/ticket/4406)'
  id: totrans-1247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#4406](https://www.sqlalchemy.org/trac/ticket/4406)
- en: mssql
  id: totrans-1248
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-1249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: A commit() is emitted after an isolation level change to SNAPSHOT, as both pyodbc
    and pymssql open an implicit transaction which blocks subsequent SQL from being
    emitted in the current transaction.
  id: totrans-1250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在将隔离级别更改为 SNAPSHOT 时发出 commit()，因为 pyodbc 和 pymssql 都会打开一个隐式事务，这会阻止当前事务中发出后续的
    SQL。
- en: 'References: [#4536](https://www.sqlalchemy.org/trac/ticket/4536)'
  id: totrans-1251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#4536](https://www.sqlalchemy.org/trac/ticket/4536)
- en: oracle
  id: totrans-1252
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-1253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Added support for reflection of the [`NCHAR`](../core/type_basics.html#sqlalchemy.types.NCHAR
    "sqlalchemy.types.NCHAR") datatype to the Oracle dialect, and added [`NCHAR`](../core/type_basics.html#sqlalchemy.types.NCHAR
    "sqlalchemy.types.NCHAR") to the list of types exported by the Oracle dialect.
  id: totrans-1254
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对 Oracle 方言的[`NCHAR`](../core/type_basics.html#sqlalchemy.types.NCHAR "sqlalchemy.types.NCHAR")数据类型的反射支持，并将[`NCHAR`](../core/type_basics.html#sqlalchemy.types.NCHAR
    "sqlalchemy.types.NCHAR")添加到 Oracle 方言导出的类型列表中。
- en: 'References: [#4506](https://www.sqlalchemy.org/trac/ticket/4506)'
  id: totrans-1255
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#4506](https://www.sqlalchemy.org/trac/ticket/4506)
- en: 1.2.18
  id: totrans-1256
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.2.18
- en: 'Released: February 15, 2019'
  id: totrans-1257
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2019年2月15日
- en: orm
  id: totrans-1258
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a regression in 1.2 where a wildcard/load_only loader option would not
    work correctly against a loader path where of_type() were used to limit to a particular
    subclass. The fix only works for of_type() of a simple subclass so far, not a
    with_polymorphic entity which will be addressed in a separate issue; it is unlikely
    this latter case was working previously.
  id: totrans-1260
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 1.2 版本中的一个回归问题，其中通配符/load_only 加载器选项对使用 of_type() 限制到特定子类的加载器路径不起作用。修复目前仅适用于简单子类的
    of_type()，而不是使用多态实体的 with_polymorphic，后者将在单独的问题中处理；以前很可能不起作用。
- en: 'References: [#4468](https://www.sqlalchemy.org/trac/ticket/4468)'
  id: totrans-1261
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#4468](https://www.sqlalchemy.org/trac/ticket/4468)
- en: '**[orm] [bug]**'
  id: totrans-1262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed fairly simple but critical issue where the [`SessionEvents.pending_to_persistent()`](../orm/events.html#sqlalchemy.orm.SessionEvents.pending_to_persistent
    "sqlalchemy.orm.SessionEvents.pending_to_persistent") event would be invoked for
    objects not just when they move from pending to persistent, but when they were
    also already persistent and just being updated, thus causing the event to be invoked
    for all objects on every update.
  id: totrans-1263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个相当简单但关键的问题，即当[`SessionEvents.pending_to_persistent()`](../orm/events.html#sqlalchemy.orm.SessionEvents.pending_to_persistent
    "sqlalchemy.orm.SessionEvents.pending_to_persistent")事件不仅在对象从挂起转为持久时触发时，而且在对象已经是持久的并且仅在更新时触发时，导致该事件被触发用于每次更新的所有对象。
- en: 'References: [#4489](https://www.sqlalchemy.org/trac/ticket/4489)'
  id: totrans-1264
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#4489](https://www.sqlalchemy.org/trac/ticket/4489)
- en: sql
  id: totrans-1265
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where the [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON") type had a read-only [`JSON.should_evaluate_none`](../core/type_basics.html#sqlalchemy.types.JSON.should_evaluate_none
    "sqlalchemy.types.JSON.should_evaluate_none") attribute, which would cause failures
    when making use of the [`TypeEngine.evaluates_none()`](../core/type_api.html#sqlalchemy.types.TypeEngine.evaluates_none
    "sqlalchemy.types.TypeEngine.evaluates_none") method in conjunction with this
    type. Pull request courtesy Sanjana S.
  id: totrans-1267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")类型具有只读的[`JSON.should_evaluate_none`](../core/type_basics.html#sqlalchemy.types.JSON.should_evaluate_none
    "sqlalchemy.types.JSON.should_evaluate_none")属性的问题，当与此类型一起使用[`TypeEngine.evaluates_none()`](../core/type_api.html#sqlalchemy.types.TypeEngine.evaluates_none
    "sqlalchemy.types.TypeEngine.evaluates_none")方法时会导致失败。拉取请求感谢 Sanjana S。
- en: 'References: [#4485](https://www.sqlalchemy.org/trac/ticket/4485)'
  id: totrans-1268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4485](https://www.sqlalchemy.org/trac/ticket/4485)
- en: mysql
  id: totrans-1269
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-1270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed a second regression caused by [#4344](https://www.sqlalchemy.org/trac/ticket/4344)
    (the first was [#4361](https://www.sqlalchemy.org/trac/ticket/4361)), which works
    around MySQL issue 88718, where the lower casing function used was not correct
    for Python 2 with OSX/Windows casing conventions, which would then raise `TypeError`.
    Full coverage has been added to this logic so that every codepath is exercised
    in a mock style for all three casing conventions on all versions of Python. MySQL
    8.0 has meanwhile fixed issue 88718 so the workaround is only applies to a particular
    span of MySQL 8.0 versions.
  id: totrans-1271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由[#4344](https://www.sqlalchemy.org/trac/ticket/4344)引起的第二个回归问题（第一个是[#4361](https://www.sqlalchemy.org/trac/ticket/4361)），该问题解决了MySQL问题88718，其中使用的小写函数对于Python
    2与OSX/Windows大小写约定不正确，然后会引发`TypeError`。现在已经为此逻辑添加了完整的覆盖，以便以模拟样式执行所有三种大小写约定在所有Python版本上的所有代码路径。与此同时，MySQL
    8.0已经修复了问题88718，因此这个解决方法仅适用于特定范围的MySQL 8.0版本。
- en: 'References: [#4492](https://www.sqlalchemy.org/trac/ticket/4492)'
  id: totrans-1272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4492](https://www.sqlalchemy.org/trac/ticket/4492)
- en: sqlite
  id: totrans-1273
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-1274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Fixed bug in SQLite DDL where using an expression as a server side default required
    that it be contained within parenthesis to be accepted by the sqlite parser. Pull
    request courtesy Bartlomiej Biernacki.
  id: totrans-1275
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在SQLite DDL中的一个bug，其中在服务器端默认值使用表达式时需要将其包含在括号中才能被SQLite解析器接受。感谢Bartlomiej
    Biernacki提供的拉取请求。
- en: 'References: [#4474](https://www.sqlalchemy.org/trac/ticket/4474)'
  id: totrans-1276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4474](https://www.sqlalchemy.org/trac/ticket/4474)
- en: mssql
  id: totrans-1277
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-1278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed bug where the SQL Server “IDENTITY_INSERT” logic that allows an INSERT
    to proceed with an explicit value on an IDENTITY column was not detecting the
    case where [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") were used with a dictionary that contained
    a [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    as key and a SQL expression as a value.
  id: totrans-1279
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即SQL Server的“IDENTITY_INSERT”逻辑允许在IDENTITY列上使用显式值进行INSERT时未检测到[`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values")与包含[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")作为键和SQL表达式作为值的字典一起使用的情况。
- en: 'References: [#4499](https://www.sqlalchemy.org/trac/ticket/4499)'
  id: totrans-1280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4499](https://www.sqlalchemy.org/trac/ticket/4499)
- en: orm
  id: totrans-1281
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a regression in 1.2 where a wildcard/load_only loader option would not
    work correctly against a loader path where of_type() were used to limit to a particular
    subclass. The fix only works for of_type() of a simple subclass so far, not a
    with_polymorphic entity which will be addressed in a separate issue; it is unlikely
    this latter case was working previously.
  id: totrans-1283
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了1.2版本中的一个回归问题，其中通配符/load_only加载器选项对于使用of_type()限制到特定子类的加载器路径不会正确工作。修复目前仅适用于简单子类的of_type()，而不适用于将在单独的问题中解决的with_polymorphic实体；这后一种情况以前可能不起作用。
- en: 'References: [#4468](https://www.sqlalchemy.org/trac/ticket/4468)'
  id: totrans-1284
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4468](https://www.sqlalchemy.org/trac/ticket/4468)
- en: '**[orm] [bug]**'
  id: totrans-1285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed fairly simple but critical issue where the [`SessionEvents.pending_to_persistent()`](../orm/events.html#sqlalchemy.orm.SessionEvents.pending_to_persistent
    "sqlalchemy.orm.SessionEvents.pending_to_persistent") event would be invoked for
    objects not just when they move from pending to persistent, but when they were
    also already persistent and just being updated, thus causing the event to be invoked
    for all objects on every update.
  id: totrans-1286
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个相当简单但关键的问题，即[`SessionEvents.pending_to_persistent()`](../orm/events.html#sqlalchemy.orm.SessionEvents.pending_to_persistent
    "sqlalchemy.orm.SessionEvents.pending_to_persistent")事件不仅在对象从挂起状态转为持久状态时被调用，而且在对象已经是持久状态并且只是被更新时也会被调用，从而导致事件在每次更新时为所有对象被调用。
- en: 'References: [#4489](https://www.sqlalchemy.org/trac/ticket/4489)'
  id: totrans-1287
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4489](https://www.sqlalchemy.org/trac/ticket/4489)
- en: sql
  id: totrans-1288
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where the [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON") type had a read-only [`JSON.should_evaluate_none`](../core/type_basics.html#sqlalchemy.types.JSON.should_evaluate_none
    "sqlalchemy.types.JSON.should_evaluate_none") attribute, which would cause failures
    when making use of the [`TypeEngine.evaluates_none()`](../core/type_api.html#sqlalchemy.types.TypeEngine.evaluates_none
    "sqlalchemy.types.TypeEngine.evaluates_none") method in conjunction with this
    type. Pull request courtesy Sanjana S.
  id: totrans-1290
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")类型具有只读[`JSON.should_evaluate_none`](../core/type_basics.html#sqlalchemy.types.JSON.should_evaluate_none
    "sqlalchemy.types.JSON.should_evaluate_none")属性的问题，这会导致在使用[`TypeEngine.evaluates_none()`](../core/type_api.html#sqlalchemy.types.TypeEngine.evaluates_none
    "sqlalchemy.types.TypeEngine.evaluates_none")方法与此类型一起使用时出现故障。感谢Sanjana S提供的拉取请求。
- en: 'References: [#4485](https://www.sqlalchemy.org/trac/ticket/4485)'
  id: totrans-1291
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4485](https://www.sqlalchemy.org/trac/ticket/4485)
- en: mysql
  id: totrans-1292
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-1293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed a second regression caused by [#4344](https://www.sqlalchemy.org/trac/ticket/4344)
    (the first was [#4361](https://www.sqlalchemy.org/trac/ticket/4361)), which works
    around MySQL issue 88718, where the lower casing function used was not correct
    for Python 2 with OSX/Windows casing conventions, which would then raise `TypeError`.
    Full coverage has been added to this logic so that every codepath is exercised
    in a mock style for all three casing conventions on all versions of Python. MySQL
    8.0 has meanwhile fixed issue 88718 so the workaround is only applies to a particular
    span of MySQL 8.0 versions.
  id: totrans-1294
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由[#4344](https://www.sqlalchemy.org/trac/ticket/4344)引起的第二个回归（第一个是[#4361](https://www.sqlalchemy.org/trac/ticket/4361)），该回归解决了MySQL问题88718，其中使用的小写函数对于具有OSX/Windows大小写约定的Python
    2来说不正确，然后会引发`TypeError`。已对此逻辑进行了全面覆盖，以便在所有Python版本的所有三种大小写约定上以模拟样式执行每个代码路径。与此同时，MySQL
    8.0已经修复了问题88718，因此这个解决方法仅适用于特定范围的MySQL 8.0版本。
- en: 'References: [#4492](https://www.sqlalchemy.org/trac/ticket/4492)'
  id: totrans-1295
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4492](https://www.sqlalchemy.org/trac/ticket/4492)
- en: sqlite
  id: totrans-1296
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-1297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Fixed bug in SQLite DDL where using an expression as a server side default required
    that it be contained within parenthesis to be accepted by the sqlite parser. Pull
    request courtesy Bartlomiej Biernacki.
  id: totrans-1298
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了SQLite DDL中的一个bug，即在将表达式作为服务器端默认值时，必须将其包含在括号中才能被sqlite解析器接受。感谢Bartlomiej
    Biernacki提供的拉取请求。
- en: 'References: [#4474](https://www.sqlalchemy.org/trac/ticket/4474)'
  id: totrans-1299
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4474](https://www.sqlalchemy.org/trac/ticket/4474)
- en: mssql
  id: totrans-1300
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-1301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed bug where the SQL Server “IDENTITY_INSERT” logic that allows an INSERT
    to proceed with an explicit value on an IDENTITY column was not detecting the
    case where [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") were used with a dictionary that contained
    a [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    as key and a SQL expression as a value.
  id: totrans-1302
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即SQL Server的“IDENTITY_INSERT”逻辑允许在IDENTITY列上使用显式值进行INSERT时，未检测到使用字典的情况，该字典将[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")作为键，SQL表达式作为值。
- en: 'References: [#4499](https://www.sqlalchemy.org/trac/ticket/4499)'
  id: totrans-1303
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4499](https://www.sqlalchemy.org/trac/ticket/4499)
- en: 1.2.17
  id: totrans-1304
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.2.17
- en: 'Released: January 25, 2019'
  id: totrans-1305
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2019年1月25日
- en: orm
  id: totrans-1306
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-1307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Added new event hooks [`QueryEvents.before_compile_update()`](../orm/events.html#sqlalchemy.orm.QueryEvents.before_compile_update
    "sqlalchemy.orm.QueryEvents.before_compile_update") and [`QueryEvents.before_compile_delete()`](../orm/events.html#sqlalchemy.orm.QueryEvents.before_compile_delete
    "sqlalchemy.orm.QueryEvents.before_compile_delete") which complement [`QueryEvents.before_compile()`](../orm/events.html#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile") in the case of the [`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update") and [`Query.delete()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.delete
    "sqlalchemy.orm.Query.delete") methods.
  id: totrans-1308
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的事件钩子[`QueryEvents.before_compile_update()`](../orm/events.html#sqlalchemy.orm.QueryEvents.before_compile_update
    "sqlalchemy.orm.QueryEvents.before_compile_update")和[`QueryEvents.before_compile_delete()`](../orm/events.html#sqlalchemy.orm.QueryEvents.before_compile_delete
    "sqlalchemy.orm.QueryEvents.before_compile_delete")，这些事件钩子在[`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update")和[`Query.delete()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.delete
    "sqlalchemy.orm.Query.delete")方法的情况下补充了[`QueryEvents.before_compile()`](../orm/events.html#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile")。
- en: 'References: [#4461](https://www.sqlalchemy.org/trac/ticket/4461)'
  id: totrans-1309
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4461](https://www.sqlalchemy.org/trac/ticket/4461)
- en: '**[orm] [bug]**'
  id: totrans-1310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where when using single-table inheritance in conjunction with a
    joined inheritance hierarchy that uses “with polymorphic” loading, the “single
    table criteria” for that single-table entity could get confused for that of other
    entities from the same hierarchy used in the same query.The adaption of the “single
    table criteria” is made more specific to the target entity to avoid it accidentally
    getting adapted to other tables in the query.
  id: totrans-1311
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用单表继承与使用“with polymorphic”加载的连接继承层次结构时，该单表实体的“单表条件”可能会与在同一查询中使用的同一层次结构的其他实体的条件混淆的问题。对“单表条件”的调整更具体地针对目标实体，以避免它意外地适应查询中的其他表。
- en: 'References: [#4454](https://www.sqlalchemy.org/trac/ticket/4454)'
  id: totrans-1312
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4454](https://www.sqlalchemy.org/trac/ticket/4454)
- en: postgresql
  id: totrans-1313
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**postgresql**'
- en: '**[postgresql] [bug]**'
  id: totrans-1314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Revised the query used when reflecting CHECK constraints to make use of the
    `pg_get_constraintdef` function, as the `consrc` column is being deprecated in
    PG 12\. Thanks to John A Stevenson for the tip.
  id: totrans-1315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修订了在反射CHECK约束时使用的查询，以利用`pg_get_constraintdef`函数，因为`consrc`列在PG 12中已被弃用。感谢John
    A Stevenson的提示。
- en: 'References: [#4463](https://www.sqlalchemy.org/trac/ticket/4463)'
  id: totrans-1316
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4463](https://www.sqlalchemy.org/trac/ticket/4463)
- en: oracle
  id: totrans-1317
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**oracle**'
- en: '**[oracle] [bug]**'
  id: totrans-1318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed regression in integer precision logic due to the refactor of the cx_Oracle
    dialect in 1.2\. We now no longer apply the cx_Oracle.NATIVE_INT type to result
    columns sending integer values (detected as positive precision with scale ==0)
    which encounters integer overflow issues with values that go beyond the 32 bit
    boundary. Instead, the output variable is left untyped so that cx_Oracle can choose
    the best option.
  id: totrans-1319
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于在1.2版本中重构了cx_Oracle方言，修复了整数精度逻辑的回归。我们现在不再将cx_Oracle.NATIVE_INT类型应用于发送整数值的结果列（检测为具有正精度和scale
    == 0的值），这会导致超出32位边界的值发生整数溢出问题。相反，输出变量保持未命名，以便cx_Oracle可以选择最佳选项。
- en: 'References: [#4457](https://www.sqlalchemy.org/trac/ticket/4457)'
  id: totrans-1320
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4457](https://www.sqlalchemy.org/trac/ticket/4457)
- en: orm
  id: totrans-1321
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**orm**'
- en: '**[orm] [feature]**'
  id: totrans-1322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new event hooks [`QueryEvents.before_compile_update()`](../orm/events.html#sqlalchemy.orm.QueryEvents.before_compile_update
    "sqlalchemy.orm.QueryEvents.before_compile_update") and [`QueryEvents.before_compile_delete()`](../orm/events.html#sqlalchemy.orm.QueryEvents.before_compile_delete
    "sqlalchemy.orm.QueryEvents.before_compile_delete") which complement [`QueryEvents.before_compile()`](../orm/events.html#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile") in the case of the [`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update") and [`Query.delete()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.delete
    "sqlalchemy.orm.Query.delete") methods.
  id: totrans-1323
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的事件钩子[`QueryEvents.before_compile_update()`](../orm/events.html#sqlalchemy.orm.QueryEvents.before_compile_update
    "sqlalchemy.orm.QueryEvents.before_compile_update")和[`QueryEvents.before_compile_delete()`](../orm/events.html#sqlalchemy.orm.QueryEvents.before_compile_delete
    "sqlalchemy.orm.QueryEvents.before_compile_delete")，这与[`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update")和[`Query.delete()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.delete
    "sqlalchemy.orm.Query.delete")方法相辅相成。
- en: 'References: [#4461](https://www.sqlalchemy.org/trac/ticket/4461)'
  id: totrans-1324
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4461](https://www.sqlalchemy.org/trac/ticket/4461)
- en: '**[orm] [bug]**'
  id: totrans-1325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where when using single-table inheritance in conjunction with a
    joined inheritance hierarchy that uses “with polymorphic” loading, the “single
    table criteria” for that single-table entity could get confused for that of other
    entities from the same hierarchy used in the same query.The adaption of the “single
    table criteria” is made more specific to the target entity to avoid it accidentally
    getting adapted to other tables in the query.
  id: totrans-1326
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用单表继承与使用“with polymorphic”加载的连接继承层次结构时，该单表实体的“单表条件”可能会与在同一查询中使用的同一层次结构的其他实体的条件混淆的问题。对“单表条件”的调整更具体地针对目标实体，以避免它意外地适应查询中的其他表。
- en: 'References: [#4454](https://www.sqlalchemy.org/trac/ticket/4454)'
  id: totrans-1327
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4454](https://www.sqlalchemy.org/trac/ticket/4454)
- en: postgresql
  id: totrans-1328
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**postgresql**'
- en: '**[postgresql] [bug]**'
  id: totrans-1329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Revised the query used when reflecting CHECK constraints to make use of the
    `pg_get_constraintdef` function, as the `consrc` column is being deprecated in
    PG 12\. Thanks to John A Stevenson for the tip.
  id: totrans-1330
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于反射 CHECK 约束时使用的查询进行了修订，利用了 `pg_get_constraintdef` 函数，因为 `consrc` 列在 PG 12
    中被弃用。感谢 John A Stevenson 的建议。
- en: 'References: [#4463](https://www.sqlalchemy.org/trac/ticket/4463)'
  id: totrans-1331
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4463](https://www.sqlalchemy.org/trac/ticket/4463)
- en: oracle
  id: totrans-1332
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-1333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed regression in integer precision logic due to the refactor of the cx_Oracle
    dialect in 1.2\. We now no longer apply the cx_Oracle.NATIVE_INT type to result
    columns sending integer values (detected as positive precision with scale ==0)
    which encounters integer overflow issues with values that go beyond the 32 bit
    boundary. Instead, the output variable is left untyped so that cx_Oracle can choose
    the best option.
  id: totrans-1334
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于在 1.2 版中重构了 cx_Oracle 方言，导致整数精度逻辑出现回归。我们现在不再将 cx_Oracle.NATIVE_INT 类型应用于发送整数值的结果列（检测为具有正精度和
    scale == 0 的值），因为这会导致超出 32 位边界的值发生整数溢出问题。相反，输出变量保持未命名，以便 cx_Oracle 可以选择最佳选项。
- en: 'References: [#4457](https://www.sqlalchemy.org/trac/ticket/4457)'
  id: totrans-1335
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4457](https://www.sqlalchemy.org/trac/ticket/4457)
- en: 1.2.16
  id: totrans-1336
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.2.16
- en: 'Released: January 11, 2019'
  id: totrans-1337
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2019 年 1 月 11 日
- en: engine
  id: totrans-1338
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-1339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed a regression introduced in version 1.2 where a refactor of the [`SQLAlchemyError`](../core/exceptions.html#sqlalchemy.exc.SQLAlchemyError
    "sqlalchemy.exc.SQLAlchemyError") base exception class introduced an inappropriate
    coercion of a plain string message into Unicode under python 2k, which is not
    handled by the Python interpreter for characters outside of the platform’s encoding
    (typically ascii). The [`SQLAlchemyError`](../core/exceptions.html#sqlalchemy.exc.SQLAlchemyError
    "sqlalchemy.exc.SQLAlchemyError") class now passes a bytestring through under
    Py2K for `__str__()` as is the behavior of exception objects in general under
    Py2K, does a safe coercion to unicode utf-8 with backslash fallback for `__unicode__()`.
    For Py3K the message is typically unicode already, but if not is again safe-coerced
    with utf-8 with backslash fallback for the `__str__()` method.
  id: totrans-1340
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在版本 1.2 中引入的回归已修复，该版本中对 [`SQLAlchemyError`](../core/exceptions.html#sqlalchemy.exc.SQLAlchemyError
    "sqlalchemy.exc.SQLAlchemyError") 基本异常类进行了重构，将纯字符串消息不适当地强制转换为 Unicode（在 Python
    2k 下，这由 Python 解释器处理，不处理平台编码之外的字符（通常是 ascii）。 [`SQLAlchemyError`](../core/exceptions.html#sqlalchemy.exc.SQLAlchemyError
    "sqlalchemy.exc.SQLAlchemyError") 类现在在 Py2K 下通过 `__str__()` 传递字节串，这是 Py2K 下异常对象的一般行为，对于
    `__unicode__()` 进行安全的 utf-8 强制转换。对于 Py3K，消息通常已经是 Unicode，但如果不是，则再次进行安全的 utf-8
    强制转换以备用于 `__str__()` 方法。
- en: 'References: [#4429](https://www.sqlalchemy.org/trac/ticket/4429)'
  id: totrans-1341
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4429](https://www.sqlalchemy.org/trac/ticket/4429)
- en: sql
  id: totrans-1342
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug] [mysql] [oracle]**'
  id: totrans-1343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [mysql] [oracle]**'
- en: Fixed issue where the DDL emitted for `DropTableComment`, which will be used
    by an upcoming version of Alembic, was incorrect for the MySQL and Oracle databases.
  id: totrans-1344
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即针对 MySQL 和 Oracle 数据库，将用于即将推出的 Alembic 版本的 `DropTableComment` 发出的 DDL
    不正确。
- en: 'References: [#4436](https://www.sqlalchemy.org/trac/ticket/4436)'
  id: totrans-1345
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4436](https://www.sqlalchemy.org/trac/ticket/4436)
- en: postgresql
  id: totrans-1346
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-1347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed issue where a [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM") or a custom domain present in a remote
    schema would not be recognized within column reflection if the name of the enum/domain
    or the name of the schema required quoting. A new parsing scheme now fully parses
    out quoted or non-quoted tokens including support for SQL-escaped quotes.
  id: totrans-1348
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即在远程模式下存在的 [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM") 或自定义域，如果枚举/域的名称或模式的名称需要引用，则在列反射中将无法识别。现在，一个新的解析方案完全解析出带引号或不带引号的标记，包括支持
    SQL 转义引号。
- en: 'References: [#4416](https://www.sqlalchemy.org/trac/ticket/4416)'
  id: totrans-1349
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4416](https://www.sqlalchemy.org/trac/ticket/4416)
- en: '**[postgresql] [bug]**'
  id: totrans-1350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed issue where multiple [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM") objects referred to by the same [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object would fail to be created if multiple objects
    had the same name under different schema names. The internal memoization the PostgreSQL
    dialect uses to track if it has created a particular [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM") in the database during a DDL creation sequence
    now takes schema name into account.
  id: totrans-1351
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即如果多个由相同的 [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") 对象引用的多个 [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM") 对象在不同的模式名称下具有相同的名称，则在创建期间将无法创建。PostgreSQL
    方言使用的内部记忆化现在会考虑模式名称，在 DDL 创建序列期间跟踪它是否已在数据库中创建了特定的 [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM")。
- en: sqlite
  id: totrans-1352
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-1353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Reflection of an index based on SQL expressions are now skipped with a warning,
    in the same way as that of the Postgresql dialect, where we currently do not support
    reflecting indexes that have SQL expressions within them. Previously, an index
    with columns of None were produced which would break tools like Alembic.
  id: totrans-1354
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 基于SQL表达式的索引反射现在会跳过，并显示警告，方式与Postgresql方言相同，在那里我们目前不支持反映具有其中的SQL表达式的索引。以前，会生成具有列为
    None 的索引，这会破坏像 Alembic 这样的工具。
- en: 'References: [#4431](https://www.sqlalchemy.org/trac/ticket/4431)'
  id: totrans-1355
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#4431](https://www.sqlalchemy.org/trac/ticket/4431)
- en: misc
  id: totrans-1356
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[no_tags]**'
  id: totrans-1357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: Fixed issue in “expanding IN” feature where using the same bound parameter name
    more than once in a query would lead to a KeyError within the process of rewriting
    the parameters in the query.
  id: totrans-1358
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在“expanding IN”功能中修复了问题，其中在查询中多次使用相同的绑定参数名称会导致查询中的参数重写过程中出现 KeyError。
- en: 'References: [#4394](https://www.sqlalchemy.org/trac/ticket/4394)'
  id: totrans-1359
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#4394](https://www.sqlalchemy.org/trac/ticket/4394)
- en: engine
  id: totrans-1360
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-1361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed a regression introduced in version 1.2 where a refactor of the [`SQLAlchemyError`](../core/exceptions.html#sqlalchemy.exc.SQLAlchemyError
    "sqlalchemy.exc.SQLAlchemyError") base exception class introduced an inappropriate
    coercion of a plain string message into Unicode under python 2k, which is not
    handled by the Python interpreter for characters outside of the platform’s encoding
    (typically ascii). The [`SQLAlchemyError`](../core/exceptions.html#sqlalchemy.exc.SQLAlchemyError
    "sqlalchemy.exc.SQLAlchemyError") class now passes a bytestring through under
    Py2K for `__str__()` as is the behavior of exception objects in general under
    Py2K, does a safe coercion to unicode utf-8 with backslash fallback for `__unicode__()`.
    For Py3K the message is typically unicode already, but if not is again safe-coerced
    with utf-8 with backslash fallback for the `__str__()` method.
  id: totrans-1362
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 1.2 版本中引入的退化问题，其中 [`SQLAlchemyError`](../core/exceptions.html#sqlalchemy.exc.SQLAlchemyError
    "sqlalchemy.exc.SQLAlchemyError") 基本异常类的重构引入了对纯字符串消息的不适当强制转换为 Unicode 在 python
    2k 下，在平台的编码之外（通常是 ascii）不由 Python 解释器处理的字符。[`SQLAlchemyError`](../core/exceptions.html#sqlalchemy.exc.SQLAlchemyError
    "sqlalchemy.exc.SQLAlchemyError") 类现在在 Py2K 下将字节串通过 `__str__()` 传递，这是 Py2K 下异常对象的一般行为，对于
    `__unicode__()` 进行了安全的 utf-8 强制转换并回退到反斜杠。对于 Py3K，消息通常已经是 unicode，但如果不是，则再次进行 utf-8
    的安全强制转换，并为 `__str__()` 方法进行反斜杠回退。
- en: 'References: [#4429](https://www.sqlalchemy.org/trac/ticket/4429)'
  id: totrans-1363
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#4429](https://www.sqlalchemy.org/trac/ticket/4429)
- en: sql
  id: totrans-1364
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug] [mysql] [oracle]**'
  id: totrans-1365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [mysql] [oracle]**'
- en: Fixed issue where the DDL emitted for `DropTableComment`, which will be used
    by an upcoming version of Alembic, was incorrect for the MySQL and Oracle databases.
  id: totrans-1366
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了为 MySQL 和 Oracle 数据库准备的将用于即将推出的版本的 Alembic 的 `DropTableComment` 发出的 DDL 错误的问题。
- en: 'References: [#4436](https://www.sqlalchemy.org/trac/ticket/4436)'
  id: totrans-1367
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#4436](https://www.sqlalchemy.org/trac/ticket/4436)
- en: postgresql
  id: totrans-1368
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-1369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed issue where a [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM") or a custom domain present in a remote
    schema would not be recognized within column reflection if the name of the enum/domain
    or the name of the schema required quoting. A new parsing scheme now fully parses
    out quoted or non-quoted tokens including support for SQL-escaped quotes.
  id: totrans-1370
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在列反射中无法识别远程模式中存在的[`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM")或自定义域的问题，如果枚举/域的名称或模式的名称需要引号。现在的新解析方案完全解析出带引号或不带引号的标记，包括对SQL转义引号的支持。
- en: 'References: [#4416](https://www.sqlalchemy.org/trac/ticket/4416)'
  id: totrans-1371
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4416](https://www.sqlalchemy.org/trac/ticket/4416)
- en: '**[postgresql] [bug]**'
  id: totrans-1372
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed issue where multiple [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM") objects referred to by the same [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object would fail to be created if multiple objects
    had the same name under different schema names. The internal memoization the PostgreSQL
    dialect uses to track if it has created a particular [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM") in the database during a DDL creation sequence
    now takes schema name into account.
  id: totrans-1373
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了多个由相同[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")对象引用的[`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM")对象在具有不同模式名称的相同名称的多个对象时无法创建的问题。PostgreSQL方言在DDL创建序列期间用于跟踪是否在数据库中创建了特定[`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM")的内部记忆现在考虑模式名称。
- en: sqlite
  id: totrans-1374
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-1375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Reflection of an index based on SQL expressions are now skipped with a warning,
    in the same way as that of the Postgresql dialect, where we currently do not support
    reflecting indexes that have SQL expressions within them. Previously, an index
    with columns of None were produced which would break tools like Alembic.
  id: totrans-1376
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 基于SQL表达式的索引的反射现在会跳过并发出警告，与Postgresql方言的方式相同，我们目前不支持反射具有SQL表达式的索引。以前，会生成具有None列的索引，这会破坏像Alembic这样的工具。
- en: 'References: [#4431](https://www.sqlalchemy.org/trac/ticket/4431)'
  id: totrans-1377
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4431](https://www.sqlalchemy.org/trac/ticket/4431)
- en: misc
  id: totrans-1378
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[no_tags]**'
  id: totrans-1379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: Fixed issue in “expanding IN” feature where using the same bound parameter name
    more than once in a query would lead to a KeyError within the process of rewriting
    the parameters in the query.
  id: totrans-1380
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“扩展IN”功能中在查询中多次使用相同绑定参数名称会导致在重写查询中的参数时出现KeyError的问题。
- en: 'References: [#4394](https://www.sqlalchemy.org/trac/ticket/4394)'
  id: totrans-1381
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4394](https://www.sqlalchemy.org/trac/ticket/4394)
- en: 1.2.15
  id: totrans-1382
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.2.15
- en: 'Released: December 11, 2018'
  id: totrans-1383
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2018年12月11日
- en: orm
  id: totrans-1384
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1385
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where the ORM annotations could be incorrect for the primaryjoin/secondaryjoin
    a relationship if one used the pattern `ForeignKey(SomeClass.id)` in the declarative
    mappings. This pattern would leak undesired annotations into the join conditions
    which can break aliasing operations done within [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") that are not supposed to impact elements in that join
    condition. These annotations are now removed up front if present.
  id: totrans-1386
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在声明性映射中使用模式`ForeignKey(SomeClass.id)`时，ORM注释可能不正确的bug，这种模式会将不需要的注释泄漏到连接条件中，这可能会破坏[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")中进行的不应影响该连接条件中的元素的别名操作。如果存在这些注释，现在会提前将其删除。
- en: 'References: [#4367](https://www.sqlalchemy.org/trac/ticket/4367)'
  id: totrans-1387
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4367](https://www.sqlalchemy.org/trac/ticket/4367)
- en: '**[orm] [bug]**'
  id: totrans-1388
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: In continuing with a similar theme as that of very recent [#4349](https://www.sqlalchemy.org/trac/ticket/4349),
    repaired issue with [`Comparator.any()`](../orm/internals.html#sqlalchemy.orm.RelationshipProperty.Comparator.any
    "sqlalchemy.orm.RelationshipProperty.Comparator.any") and [`Comparator.has()`](../orm/internals.html#sqlalchemy.orm.RelationshipProperty.Comparator.has
    "sqlalchemy.orm.RelationshipProperty.Comparator.has") where the “secondary” selectable
    needs to be explicitly part of the FROM clause in the EXISTS subquery to suit
    the case where this “secondary” is a [`Join`](../core/selectable.html#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") object.
  id: totrans-1389
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 继续与最近的[#4349](https://www.sqlalchemy.org/trac/ticket/4349)类似的主题，修复了[`Comparator.any()`](../orm/internals.html#sqlalchemy.orm.RelationshipProperty.Comparator.any
    "sqlalchemy.orm.RelationshipProperty.Comparator.any")和[`Comparator.has()`](../orm/internals.html#sqlalchemy.orm.RelationshipProperty.Comparator.has
    "sqlalchemy.orm.RelationshipProperty.Comparator.has")的问题，其中“secondary”可选择性地需要明确作为FROM子句的一部分存在于EXISTS子查询中，以适应“secondary”是[`Join`](../core/selectable.html#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join")对象的情况。
- en: 'References: [#4366](https://www.sqlalchemy.org/trac/ticket/4366)'
  id: totrans-1390
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4366](https://www.sqlalchemy.org/trac/ticket/4366)
- en: '**[orm] [bug]**'
  id: totrans-1391
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression caused by [#4349](https://www.sqlalchemy.org/trac/ticket/4349)
    where adding the “secondary” table to the FROM clause for a dynamic loader would
    affect the ability of the [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") to make a subsequent join to another entity. The fix adds
    the primary entity as the first element of the FROM list since [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") wants to jump from that. Version 1.3 will have a
    more comprehensive solution to this problem as well ([#4365](https://www.sqlalchemy.org/trac/ticket/4365)).
  id: totrans-1392
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由[#4349](https://www.sqlalchemy.org/trac/ticket/4349)引起的回归，其中将“secondary”表添加到动态加载器的FROM子句会影响[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")后续连接到另一个实体的能力。修复将主实体添加为FROM列表的第一个元素，因为[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")希望从那里跳转。版本1.3也将对这个问题有一个更全面的解决方案（[#4365](https://www.sqlalchemy.org/trac/ticket/4365)）。
- en: 'References: [#4363](https://www.sqlalchemy.org/trac/ticket/4363)'
  id: totrans-1393
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4363](https://www.sqlalchemy.org/trac/ticket/4363)
- en: '**[orm] [bug]**'
  id: totrans-1394
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where chaining of mapper options using `RelationshipProperty.of_type()`
    in conjunction with a chained option that refers to an attribute name by string
    only would fail to locate the attribute.
  id: totrans-1395
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用`RelationshipProperty.of_type()`链式映射选项的bug，与仅通过字符串引用属性名称的链式选项一起使用时，无法定位属性的问题。
- en: 'References: [#4400](https://www.sqlalchemy.org/trac/ticket/4400)'
  id: totrans-1396
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4400](https://www.sqlalchemy.org/trac/ticket/4400)
- en: orm declarative
  id: totrans-1397
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm declarative
- en: '**[orm] [declarative] [bug]**'
  id: totrans-1398
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: A warning is emitted in the case that a [`column()`](../core/sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column") object is applied to a declarative class,
    as it seems likely this intended to be a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") object.
  id: totrans-1399
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在将[`column()`](../core/sqlelement.html#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column")对象应用于声明类的情况下，会发出警告，因为这似乎是想要一个[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象。
- en: 'References: [#4374](https://www.sqlalchemy.org/trac/ticket/4374)'
  id: totrans-1400
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4374](https://www.sqlalchemy.org/trac/ticket/4374)
- en: misc
  id: totrans-1401
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[no_tags]**'
  id: totrans-1402
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: Added support for the `write_timeout` flag accepted by mysqlclient and pymysql
    to be passed in the URL string.
  id: totrans-1403
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对mysqlclient和pymysql接受的`write_timeout`标志在URL字符串中传递的支持。
- en: 'References: [#4381](https://www.sqlalchemy.org/trac/ticket/4381)'
  id: totrans-1404
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4381](https://www.sqlalchemy.org/trac/ticket/4381)
- en: '**[no_tags]**'
  id: totrans-1405
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: Fixed issue where reflection of a PostgreSQL domain that is expressed as an
    array would fail to be recognized. Pull request courtesy Jakub Synowiec.
  id: totrans-1406
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了无法识别表达为数组的PostgreSQL域的反射问题。感谢Jakub Synowiec的拉取请求。
- en: 'References: [#4377](https://www.sqlalchemy.org/trac/ticket/4377), [#4380](https://www.sqlalchemy.org/trac/ticket/4380)'
  id: totrans-1407
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4377](https://www.sqlalchemy.org/trac/ticket/4377)，[#4380](https://www.sqlalchemy.org/trac/ticket/4380)
- en: orm
  id: totrans-1408
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where the ORM annotations could be incorrect for the primaryjoin/secondaryjoin
    a relationship if one used the pattern `ForeignKey(SomeClass.id)` in the declarative
    mappings. This pattern would leak undesired annotations into the join conditions
    which can break aliasing operations done within [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") that are not supposed to impact elements in that join
    condition. These annotations are now removed up front if present.
  id: totrans-1410
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即如果在声明映射中使用模式`ForeignKey(SomeClass.id)`，则关系的primaryjoin/secondaryjoin的ORM注释可能不正确。这种模式会将不需要的注释泄漏到加入条件中，这可能会破坏[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")中进行的别名操作，这些别名操作不应影响该加入条件中的元素。如果存在这些注释，现在会立即删除。
- en: 'References: [#4367](https://www.sqlalchemy.org/trac/ticket/4367)'
  id: totrans-1411
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4367](https://www.sqlalchemy.org/trac/ticket/4367)
- en: '**[orm] [bug]**'
  id: totrans-1412
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: In continuing with a similar theme as that of very recent [#4349](https://www.sqlalchemy.org/trac/ticket/4349),
    repaired issue with [`Comparator.any()`](../orm/internals.html#sqlalchemy.orm.RelationshipProperty.Comparator.any
    "sqlalchemy.orm.RelationshipProperty.Comparator.any") and [`Comparator.has()`](../orm/internals.html#sqlalchemy.orm.RelationshipProperty.Comparator.has
    "sqlalchemy.orm.RelationshipProperty.Comparator.has") where the “secondary” selectable
    needs to be explicitly part of the FROM clause in the EXISTS subquery to suit
    the case where this “secondary” is a [`Join`](../core/selectable.html#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") object.
  id: totrans-1413
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 继续与最近的[#4349](https://www.sqlalchemy.org/trac/ticket/4349)类似的主题，修复了[`Comparator.any()`](../orm/internals.html#sqlalchemy.orm.RelationshipProperty.Comparator.any
    "sqlalchemy.orm.RelationshipProperty.Comparator.any")和[`Comparator.has()`](../orm/internals.html#sqlalchemy.orm.RelationshipProperty.Comparator.has
    "sqlalchemy.orm.RelationshipProperty.Comparator.has")的问题，其中“secondary”可选择性地需要明确作为FROM子句的一部分存在于EXISTS子查询中，以适应“secondary”是[`Join`](../core/selectable.html#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join")对象的情况。
- en: 'References: [#4366](https://www.sqlalchemy.org/trac/ticket/4366)'
  id: totrans-1414
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4366](https://www.sqlalchemy.org/trac/ticket/4366)
- en: '**[orm] [bug]**'
  id: totrans-1415
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression caused by [#4349](https://www.sqlalchemy.org/trac/ticket/4349)
    where adding the “secondary” table to the FROM clause for a dynamic loader would
    affect the ability of the [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") to make a subsequent join to another entity. The fix adds
    the primary entity as the first element of the FROM list since [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") wants to jump from that. Version 1.3 will have a
    more comprehensive solution to this problem as well ([#4365](https://www.sqlalchemy.org/trac/ticket/4365)).
  id: totrans-1416
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由[#4349](https://www.sqlalchemy.org/trac/ticket/4349)引起的回归错误已修复，其中将“secondary”表添加到动态加载器的FROM子句会影响[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")后续加入到另一个实体的能力。修复方法是将主实体作为FROM列表的第一个元素，因为[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")希望从那里跳转。版本1.3还将���此问题提供更全面的解决方案（[#4365](https://www.sqlalchemy.org/trac/ticket/4365))。
- en: 'References: [#4363](https://www.sqlalchemy.org/trac/ticket/4363)'
  id: totrans-1417
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4363](https://www.sqlalchemy.org/trac/ticket/4363)
- en: '**[orm] [bug]**'
  id: totrans-1418
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where chaining of mapper options using `RelationshipProperty.of_type()`
    in conjunction with a chained option that refers to an attribute name by string
    only would fail to locate the attribute.
  id: totrans-1419
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用`RelationshipProperty.of_type()`链式映射器选项与仅通过字符串引用属性名称的链式选项进行链接时无法定位属性的错误。
- en: 'References: [#4400](https://www.sqlalchemy.org/trac/ticket/4400)'
  id: totrans-1420
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4400](https://www.sqlalchemy.org/trac/ticket/4400)
- en: orm declarative
  id: totrans-1421
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm声明式
- en: '**[orm] [declarative] [bug]**'
  id: totrans-1422
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: A warning is emitted in the case that a [`column()`](../core/sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column") object is applied to a declarative class,
    as it seems likely this intended to be a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") object.
  id: totrans-1423
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当将[`column()`](../core/sqlelement.html#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column")对象应用于声明类时，会发出警告，因为这似乎是打算将其作为[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象。
- en: 'References: [#4374](https://www.sqlalchemy.org/trac/ticket/4374)'
  id: totrans-1424
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4374](https://www.sqlalchemy.org/trac/ticket/4374)
- en: misc
  id: totrans-1425
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[no_tags]**'
  id: totrans-1426
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: Added support for the `write_timeout` flag accepted by mysqlclient and pymysql
    to be passed in the URL string.
  id: totrans-1427
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对`write_timeout`标志的支持，该标志被mysqlclient和pymysql接受并传递到URL字符串中。
- en: 'References: [#4381](https://www.sqlalchemy.org/trac/ticket/4381)'
  id: totrans-1428
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4381](https://www.sqlalchemy.org/trac/ticket/4381)
- en: '**[no_tags]**'
  id: totrans-1429
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: Fixed issue where reflection of a PostgreSQL domain that is expressed as an
    array would fail to be recognized. Pull request courtesy Jakub Synowiec.
  id: totrans-1430
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即将表示为数组的 PostgreSQL 域的反射会失败无法被识别。感谢 Jakub Synowiec 提交的拉取请求。
- en: 'References: [#4377](https://www.sqlalchemy.org/trac/ticket/4377), [#4380](https://www.sqlalchemy.org/trac/ticket/4380)'
  id: totrans-1431
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4377](https://www.sqlalchemy.org/trac/ticket/4377), [#4380](https://www.sqlalchemy.org/trac/ticket/4380)
- en: 1.2.14
  id: totrans-1432
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.2.14
- en: 'Released: November 10, 2018'
  id: totrans-1433
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2018年11月10日
- en: orm
  id: totrans-1434
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1435
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in [`Session.bulk_update_mappings()`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_update_mappings
    "sqlalchemy.orm.Session.bulk_update_mappings") where alternate mapped attribute
    names would result in the primary key column of the UPDATE statement being included
    in the SET clause, as well as the WHERE clause; while usually harmless, for SQL
    Server this can raise an error due to the IDENTITY column. This is a continuation
    of the same bug that was fixed in [#3849](https://www.sqlalchemy.org/trac/ticket/3849),
    where testing was insufficient to catch this additional flaw.
  id: totrans-1436
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`Session.bulk_update_mappings()`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_update_mappings
    "sqlalchemy.orm.Session.bulk_update_mappings") 中的错误，在其中，备用映射属性名称会导致 UPDATE 语句的主键列包含在
    SET 子句中，以及在 WHERE 子句中；虽然通常是无害的，但对于 SQL Server，这可能由于 IDENTITY 列而引发错误。这是与 [#3849](https://www.sqlalchemy.org/trac/ticket/3849)
    中修复的同一错误的延续，其中测试不足以捕捉到这个额外的缺陷。
- en: 'References: [#4357](https://www.sqlalchemy.org/trac/ticket/4357)'
  id: totrans-1437
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4357](https://www.sqlalchemy.org/trac/ticket/4357)
- en: '**[orm] [bug]**'
  id: totrans-1438
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a minor performance issue which could in some cases add unnecessary overhead
    to result fetching, involving the use of ORM columns and entities that include
    those same columns at the same time within a query. The issue has to do with hash
    / eq overhead when referring to the column in different ways.
  id: totrans-1439
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个小的性能问题，可能会在某些情况下给结果获取增加不必要的开销，这涉及到在查询中同时使用 ORM 列和包含这些相同列的实体。这个问题与在不同方式中引用列时的哈希
    / 相等性开销有关。
- en: 'References: [#4347](https://www.sqlalchemy.org/trac/ticket/4347)'
  id: totrans-1440
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4347](https://www.sqlalchemy.org/trac/ticket/4347)
- en: mysql
  id: totrans-1441
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-1442
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed regression caused by [#4344](https://www.sqlalchemy.org/trac/ticket/4344)
    released in 1.2.13, where the fix for MySQL 8.0’s case sensitivity problem with
    referenced column names when reflecting foreign key referents is worked around
    using the `information_schema.columns` view. The workaround was failing on OSX
    / `lower_case_table_names=2` which produces non-matching casing for the `information_schema.columns`
    vs. that of `SHOW CREATE TABLE`, so in case-insensitive SQL modes case-insensitive
    matching is now used.
  id: totrans-1443
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 1.2.13 中发布的 [#4344](https://www.sqlalchemy.org/trac/ticket/4344) 引起的回归问题，在此版本中，对于
    MySQL 8.0 在反射外键引用时处理列名大小写敏感性问题的修复是通过使用 `information_schema.columns` 视图来解决的。这个解决方法在
    OSX / `lower_case_table_names=2` 上失败了，这会导致 `information_schema.columns` 与 `SHOW
    CREATE TABLE` 的大小写不匹配，因此在不区分大小写的 SQL 模式下，现在使用不区分大小写的匹配。
- en: 'References: [#4361](https://www.sqlalchemy.org/trac/ticket/4361)'
  id: totrans-1444
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4361](https://www.sqlalchemy.org/trac/ticket/4361)
- en: orm
  id: totrans-1445
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1446
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in [`Session.bulk_update_mappings()`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_update_mappings
    "sqlalchemy.orm.Session.bulk_update_mappings") where alternate mapped attribute
    names would result in the primary key column of the UPDATE statement being included
    in the SET clause, as well as the WHERE clause; while usually harmless, for SQL
    Server this can raise an error due to the IDENTITY column. This is a continuation
    of the same bug that was fixed in [#3849](https://www.sqlalchemy.org/trac/ticket/3849),
    where testing was insufficient to catch this additional flaw.
  id: totrans-1447
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`Session.bulk_update_mappings()`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_update_mappings
    "sqlalchemy.orm.Session.bulk_update_mappings") 中的错误，在其中，备用映射属性名称会导致 UPDATE 语句的主键列包含在
    SET 子句中，以及在 WHERE 子句中；虽然通常是无害的，但对于 SQL Server，这可能由于 IDENTITY 列而引发错误。这是与 [#3849](https://www.sqlalchemy.org/trac/ticket/3849)
    中修复的同一错误的延续，其中测试不足以捕捉到这个额外的缺陷。
- en: 'References: [#4357](https://www.sqlalchemy.org/trac/ticket/4357)'
  id: totrans-1448
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4357](https://www.sqlalchemy.org/trac/ticket/4357)
- en: '**[orm] [bug]**'
  id: totrans-1449
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a minor performance issue which could in some cases add unnecessary overhead
    to result fetching, involving the use of ORM columns and entities that include
    those same columns at the same time within a query. The issue has to do with hash
    / eq overhead when referring to the column in different ways.
  id: totrans-1450
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个小的性能问题，可能会在某些情况下给结果获取增加不必要的开销，这涉及到在查询中同时使用 ORM 列和包含这些相同列的实体。这个问题与在不同方式中引用列时的哈希
    / 相等性开销有关。
- en: 'References: [#4347](https://www.sqlalchemy.org/trac/ticket/4347)'
  id: totrans-1451
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4347](https://www.sqlalchemy.org/trac/ticket/4347)
- en: mysql
  id: totrans-1452
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-1453
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed regression caused by [#4344](https://www.sqlalchemy.org/trac/ticket/4344)
    released in 1.2.13, where the fix for MySQL 8.0’s case sensitivity problem with
    referenced column names when reflecting foreign key referents is worked around
    using the `information_schema.columns` view. The workaround was failing on OSX
    / `lower_case_table_names=2` which produces non-matching casing for the `information_schema.columns`
    vs. that of `SHOW CREATE TABLE`, so in case-insensitive SQL modes case-insensitive
    matching is now used.
  id: totrans-1454
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了1.2.13中由[#4344](https://www.sqlalchemy.org/trac/ticket/4344)引起的回归问题，其中针对MySQL
    8.0在反射外键引用列名称时的大小写敏感性问题的修复是通过使用`information_schema.columns`视图来解决的。这种解决方法在OSX /
    `lower_case_table_names=2`上失败，因为`information_schema.columns`与`SHOW CREATE TABLE`的大小写不匹配，因此在不区分大小写的SQL模式下现在使用不区分大小写的匹配。
- en: 'References: [#4361](https://www.sqlalchemy.org/trac/ticket/4361)'
  id: totrans-1455
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4361](https://www.sqlalchemy.org/trac/ticket/4361)
- en: 1.2.13
  id: totrans-1456
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.2.13
- en: 'Released: October 31, 2018'
  id: totrans-1457
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2018年10月31日
- en: orm
  id: totrans-1458
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1459
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where “dynamic” loader needs to explicitly set the “secondary” table
    in the FROM clause of the query, to suit the case where the secondary is a join
    object that is otherwise not pulled into the query from its columns alone.
  id: totrans-1460
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“动态”加载器需要在查询的FROM子句中显式设置“secondary”表的bug，以适应次要表是连接对象的情况，否则仅从其列中提取的查询中不会包含该表。
- en: 'References: [#4349](https://www.sqlalchemy.org/trac/ticket/4349)'
  id: totrans-1461
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4349](https://www.sqlalchemy.org/trac/ticket/4349)
- en: orm declarative
  id: totrans-1462
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm declarative
- en: '**[orm] [declarative] [bug]**'
  id: totrans-1463
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Fixed regression caused by [#4326](https://www.sqlalchemy.org/trac/ticket/4326)
    in version 1.2.12 where using [`declared_attr`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr") with a mixin in conjunction with [`synonym()`](../orm/mapped_attributes.html#sqlalchemy.orm.synonym
    "sqlalchemy.orm.synonym") would fail to map the synonym properly to an inherited
    subclass.
  id: totrans-1464
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了1.2.12版本中由[#4326](https://www.sqlalchemy.org/trac/ticket/4326)引起的回归问题，当与[`synonym()`](../orm/mapped_attributes.html#sqlalchemy.orm.synonym
    "sqlalchemy.orm.synonym")一起在mixin中使用[`declared_attr`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr")时，无法正确将同义词映射到继承的子类。
- en: 'References: [#4350](https://www.sqlalchemy.org/trac/ticket/4350)'
  id: totrans-1465
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4350](https://www.sqlalchemy.org/trac/ticket/4350)
- en: '**[orm] [declarative] [bug]**'
  id: totrans-1466
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: The column conflict resolution technique discussed at [Resolving Column Conflicts
    with use_existing_column](../orm/inheritance.html#orm-inheritance-column-conflicts)
    is now functional for a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") that is also a primary key column. Previously, a check
    for primary key columns declared on a single-inheritance subclass would occur
    before the column copy were allowed to pass.
  id: totrans-1467
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[使用 use_existing_column 解决列冲突](../orm/inheritance.html#orm-inheritance-column-conflicts)中讨论的列冲突解决技术现在对于[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")也是主键列的情况下可用。以前，在单继承子类上声明主键列时，会在允许列复制通过之前进行主键列检查。
- en: 'References: [#4352](https://www.sqlalchemy.org/trac/ticket/4352)'
  id: totrans-1468
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4352](https://www.sqlalchemy.org/trac/ticket/4352)
- en: sql
  id: totrans-1469
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-1470
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Refactored [`SQLCompiler`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler
    "sqlalchemy.sql.compiler.SQLCompiler") to expose a [`SQLCompiler.group_by_clause()`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler.group_by_clause
    "sqlalchemy.sql.compiler.SQLCompiler.group_by_clause") method similar to the [`SQLCompiler.order_by_clause()`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler.order_by_clause
    "sqlalchemy.sql.compiler.SQLCompiler.order_by_clause") and `SQLCompiler.limit_clause()`
    methods, which can be overridden by dialects to customize how GROUP BY renders.
    Pull request courtesy Samuel Chou.
  id: totrans-1471
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重构了[`SQLCompiler`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler
    "sqlalchemy.sql.compiler.SQLCompiler")以公开类似于[`SQLCompiler.order_by_clause()`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler.order_by_clause
    "sqlalchemy.sql.compiler.SQLCompiler.order_by_clause")和`SQLCompiler.limit_clause()`方法的[`SQLCompiler.group_by_clause()`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler.group_by_clause
    "sqlalchemy.sql.compiler.SQLCompiler.group_by_clause")方法，可以被方言重写以自定义GROUP BY的呈现方式。感谢
    Samuel Chou 的拉取请求。
- en: '**[sql] [bug]**'
  id: totrans-1472
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where the [`Enum.create_constraint`](../core/type_basics.html#sqlalchemy.types.Enum.params.create_constraint
    "sqlalchemy.types.Enum") flag on the [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") datatype would not be propagated to copies of the type,
    which affects use cases such as declarative mixins and abstract bases.
  id: totrans-1473
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Enum.create_constraint`](../core/type_basics.html#sqlalchemy.types.Enum.params.create_constraint
    "sqlalchemy.types.Enum") 标志在 [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") 数据类型的副本中未传播的 bug，这影响了声明性混合和抽象基类等用例。
- en: 'References: [#4341](https://www.sqlalchemy.org/trac/ticket/4341)'
  id: totrans-1474
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4341](https://www.sqlalchemy.org/trac/ticket/4341)
- en: postgresql
  id: totrans-1475
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-1476
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added support for the [`aggregate_order_by`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.aggregate_order_by
    "sqlalchemy.dialects.postgresql.aggregate_order_by") function to receive multiple
    ORDER BY elements, previously only a single element was accepted.
  id: totrans-1477
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对[`aggregate_order_by`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.aggregate_order_by
    "sqlalchemy.dialects.postgresql.aggregate_order_by") 函数的支持，以接收多个 ORDER BY 元素，先前只接受单个元素。
- en: 'References: [#4337](https://www.sqlalchemy.org/trac/ticket/4337)'
  id: totrans-1478
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4337](https://www.sqlalchemy.org/trac/ticket/4337)
- en: mysql
  id: totrans-1479
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-1480
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Added word `function` to the list of reserved words for MySQL, which is now
    a keyword in MySQL 8.0
  id: totrans-1481
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将单词 `function` 添加到 MySQL 的保留字列表中，现在是 MySQL 8.0 中的关键字。
- en: 'References: [#4348](https://www.sqlalchemy.org/trac/ticket/4348)'
  id: totrans-1482
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4348](https://www.sqlalchemy.org/trac/ticket/4348)
- en: '**[mysql] [bug]**'
  id: totrans-1483
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: 'Added a workaround for a MySQL bug #88718 introduced in the 8.0 series, where
    the reflection of a foreign key constraint is not reporting the correct case sensitivity
    for the referred column, leading to errors during use of the reflected constraint
    such as when using the automap extension. The workaround emits an additional query
    to the information_schema tables in order to retrieve the correct case sensitive
    name.'
  id: totrans-1484
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '为 MySQL 8.0 系列引入的一个 bug #88718 添加了一个解决方法，其中外键约束的反射未报告引用列的正确大小写敏感性，导致在使用反射约束时出现错误，例如在使用
    automap 扩展时。解决方法通过向 information_schema 表发出额外的查询来检索正确的大小写敏感名称。'
- en: 'References: [#4344](https://www.sqlalchemy.org/trac/ticket/4344)'
  id: totrans-1485
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4344](https://www.sqlalchemy.org/trac/ticket/4344)
- en: misc
  id: totrans-1486
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[misc] [bug]**'
  id: totrans-1487
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[杂项] [bug]**'
- en: Fixed issue where part of the utility language helper internals was passing
    the wrong kind of argument to the Python `__import__` builtin as the list of modules
    to be imported. The issue produced no symptoms within the core library but could
    cause issues with external applications that redefine the `__import__` builtin
    or otherwise instrument it. Pull request courtesy Joe Urciuoli.
  id: totrans-1488
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了实用语言助手内部的一部分错误，该错误将错误类型的参数传递给 Python `__import__` 内置函数作为要导入的模块列表。该问题在核心库中没有产生任何症状，但可能会导致重新定义
    `__import__` 内置函数或以其他方式对其进行检测的外部应用程序出现问题。感谢 Joe Urciuoli 提交的拉取请求。
- en: '**[misc] [bug] [py3k]**'
  id: totrans-1489
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[杂项] [bug] [py3k]**'
- en: Fixed additional warnings generated by Python 3.7 due to changes in the organization
    of the Python `collections` and `collections.abc` packages. Previous `collections`
    warnings were fixed in version 1.2.11\. Pull request courtesy xtreak.
  id: totrans-1490
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由于 Python 3.7 中 Python `collections` 和 `collections.abc` 包组织变化而生成的额外警告。之前的
    `collections` 警告在版本 1.2.11 中已修复。感谢 xtreak 提交的拉取请求。
- en: 'References: [#4339](https://www.sqlalchemy.org/trac/ticket/4339)'
  id: totrans-1491
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4339](https://www.sqlalchemy.org/trac/ticket/4339)
- en: '**[bug] [ext]**'
  id: totrans-1492
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Added missing `.index()` method to list-based association collections in the
    association proxy extension.
  id: totrans-1493
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在关联代理扩展的基于列表的关联集合中添加了缺失的`.index()`方法。
- en: orm
  id: totrans-1494
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1495
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where “dynamic” loader needs to explicitly set the “secondary” table
    in the FROM clause of the query, to suit the case where the secondary is a join
    object that is otherwise not pulled into the query from its columns alone.
  id: totrans-1496
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“动态”加载器需要显式设置查询的 FROM 子句中的“secondary”表的 bug，以适应次要表是一个联接对象，否则仅从其列中拉入查询会导致问题的情况。
- en: 'References: [#4349](https://www.sqlalchemy.org/trac/ticket/4349)'
  id: totrans-1497
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4349](https://www.sqlalchemy.org/trac/ticket/4349)
- en: orm declarative
  id: totrans-1498
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm 声明性
- en: '**[orm] [declarative] [bug]**'
  id: totrans-1499
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Fixed regression caused by [#4326](https://www.sqlalchemy.org/trac/ticket/4326)
    in version 1.2.12 where using [`declared_attr`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr") with a mixin in conjunction with [`synonym()`](../orm/mapped_attributes.html#sqlalchemy.orm.synonym
    "sqlalchemy.orm.synonym") would fail to map the synonym properly to an inherited
    subclass.
  id: totrans-1500
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了版本1.2.12中由[#4326](https://www.sqlalchemy.org/trac/ticket/4326)引起的回归，使用[`declared_attr`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr")与mixin结合使用[`synonym()`](../orm/mapped_attributes.html#sqlalchemy.orm.synonym
    "sqlalchemy.orm.synonym")会导致将同义词正确映射到继承子类失败。
- en: 'References: [#4350](https://www.sqlalchemy.org/trac/ticket/4350)'
  id: totrans-1501
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4350](https://www.sqlalchemy.org/trac/ticket/4350)
- en: '**[orm] [declarative] [bug]**'
  id: totrans-1502
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: The column conflict resolution technique discussed at [Resolving Column Conflicts
    with use_existing_column](../orm/inheritance.html#orm-inheritance-column-conflicts)
    is now functional for a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") that is also a primary key column. Previously, a check
    for primary key columns declared on a single-inheritance subclass would occur
    before the column copy were allowed to pass.
  id: totrans-1503
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，讨论的列冲突解决技术[使用`use_existing_column`解决列冲突](../orm/inheritance.html#orm-inheritance-column-conflicts)对于[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")也是主键列的功能正常运行。以前，在单继承子类上声明主键列之前，会发生主键列检查，然后才允许列复制通过。
- en: 'References: [#4352](https://www.sqlalchemy.org/trac/ticket/4352)'
  id: totrans-1504
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4352](https://www.sqlalchemy.org/trac/ticket/4352)
- en: sql
  id: totrans-1505
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-1506
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Refactored [`SQLCompiler`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler
    "sqlalchemy.sql.compiler.SQLCompiler") to expose a [`SQLCompiler.group_by_clause()`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler.group_by_clause
    "sqlalchemy.sql.compiler.SQLCompiler.group_by_clause") method similar to the [`SQLCompiler.order_by_clause()`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler.order_by_clause
    "sqlalchemy.sql.compiler.SQLCompiler.order_by_clause") and `SQLCompiler.limit_clause()`
    methods, which can be overridden by dialects to customize how GROUP BY renders.
    Pull request courtesy Samuel Chou.
  id: totrans-1507
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重构了[`SQLCompiler`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler
    "sqlalchemy.sql.compiler.SQLCompiler")以公开一个类似于[`SQLCompiler.order_by_clause()`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler.order_by_clause
    "sqlalchemy.sql.compiler.SQLCompiler.order_by_clause")和`SQLCompiler.limit_clause()`方法的[`SQLCompiler.group_by_clause()`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler.group_by_clause
    "sqlalchemy.sql.compiler.SQLCompiler.group_by_clause")方法，可以被方言重写以自定义GROUP BY的呈现方式。感谢Samuel
    Chou的拉取请求。
- en: '**[sql] [bug]**'
  id: totrans-1508
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where the [`Enum.create_constraint`](../core/type_basics.html#sqlalchemy.types.Enum.params.create_constraint
    "sqlalchemy.types.Enum") flag on the [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") datatype would not be propagated to copies of the type,
    which affects use cases such as declarative mixins and abstract bases.
  id: totrans-1509
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Enum.create_constraint`](../core/type_basics.html#sqlalchemy.types.Enum.params.create_constraint
    "sqlalchemy.types.Enum")标志在[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum")数据类型的副本中不会传播的错误，这会影响到声明性mixin和抽象基类等用例。
- en: 'References: [#4341](https://www.sqlalchemy.org/trac/ticket/4341)'
  id: totrans-1510
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4341](https://www.sqlalchemy.org/trac/ticket/4341)
- en: postgresql
  id: totrans-1511
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-1512
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added support for the [`aggregate_order_by`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.aggregate_order_by
    "sqlalchemy.dialects.postgresql.aggregate_order_by") function to receive multiple
    ORDER BY elements, previously only a single element was accepted.
  id: totrans-1513
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对[`aggregate_order_by`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.aggregate_order_by
    "sqlalchemy.dialects.postgresql.aggregate_order_by")函数接收多个ORDER BY元素的支持，以前只接受单个元素。
- en: 'References: [#4337](https://www.sqlalchemy.org/trac/ticket/4337)'
  id: totrans-1514
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4337](https://www.sqlalchemy.org/trac/ticket/4337)
- en: mysql
  id: totrans-1515
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-1516
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Added word `function` to the list of reserved words for MySQL, which is now
    a keyword in MySQL 8.0
  id: totrans-1517
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将`function`一词添加到MySQL的保留字列表中，现在在MySQL 8.0中是一个关键字。
- en: 'References: [#4348](https://www.sqlalchemy.org/trac/ticket/4348)'
  id: totrans-1518
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4348](https://www.sqlalchemy.org/trac/ticket/4348)
- en: '**[mysql] [bug]**'
  id: totrans-1519
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: 'Added a workaround for a MySQL bug #88718 introduced in the 8.0 series, where
    the reflection of a foreign key constraint is not reporting the correct case sensitivity
    for the referred column, leading to errors during use of the reflected constraint
    such as when using the automap extension. The workaround emits an additional query
    to the information_schema tables in order to retrieve the correct case sensitive
    name.'
  id: totrans-1520
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '添加了针对MySQL 8.0系列引入的bug #88718的解决方法，其中外键约束的反射未报告所引用列的正确大小写敏感性，导致在使用反射约束时出现错误，例如在使用automap扩展时。解决方法通过向information_schema表发出额外查询来检索正确的大小写敏感名称。'
- en: 'References: [#4344](https://www.sqlalchemy.org/trac/ticket/4344)'
  id: totrans-1521
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4344](https://www.sqlalchemy.org/trac/ticket/4344)
- en: misc
  id: totrans-1522
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[misc] [bug]**'
  id: totrans-1523
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[misc] [bug]**'
- en: Fixed issue where part of the utility language helper internals was passing
    the wrong kind of argument to the Python `__import__` builtin as the list of modules
    to be imported. The issue produced no symptoms within the core library but could
    cause issues with external applications that redefine the `__import__` builtin
    or otherwise instrument it. Pull request courtesy Joe Urciuoli.
  id: totrans-1524
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了实用语言助手内部的一部分问题，该问题将错误类型的参数传递给Python `__import__`内置函数作为要导入的模块列表。该问题在核心库中没有产生任何症状，但可能会导致重新定义`__import__`内置函数或以其他方式对其进行调试的外部应用程序出现问题。感谢Joe
    Urciuoli提供的拉取请求。
- en: '**[misc] [bug] [py3k]**'
  id: totrans-1525
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[misc] [bug] [py3k]**'
- en: Fixed additional warnings generated by Python 3.7 due to changes in the organization
    of the Python `collections` and `collections.abc` packages. Previous `collections`
    warnings were fixed in version 1.2.11\. Pull request courtesy xtreak.
  id: totrans-1526
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Python 3.7由于Python `collections`和`collections.abc`包组织结构变化而生成的额外警告。之前的`collections`警告在1.2.11版本中已修复。感谢xtreak提供的拉取请求。
- en: 'References: [#4339](https://www.sqlalchemy.org/trac/ticket/4339)'
  id: totrans-1527
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4339](https://www.sqlalchemy.org/trac/ticket/4339)
- en: '**[bug] [ext]**'
  id: totrans-1528
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Added missing `.index()` method to list-based association collections in the
    association proxy extension.
  id: totrans-1529
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在关联代理扩展中添加了缺失的`.index()`方法到基于列表的关联集合。
- en: 1.2.12
  id: totrans-1530
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 版本号：1.2.12
- en: 'Released: September 19, 2018'
  id: totrans-1531
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2018年9月19日
- en: orm
  id: totrans-1532
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1533
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Added a check within the weakref cleanup for the [`InstanceState`](../orm/internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") object to check for the presence of the `dict`
    builtin, in an effort to reduce error messages generated when these cleanups occur
    during interpreter shutdown. Pull request courtesy Romuald Brunet.
  id: totrans-1534
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在弱引用清理中添加了一个检查，用于检查[`InstanceState`](../orm/internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")对象是否存在`dict`内置对象，以减少在解释器关闭期间发生这些清理时生成的错误消息。感谢Romuald
    Brunet提供的拉取请求。
- en: '**[orm] [bug]**'
  id: totrans-1535
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where use of [`Lateral`](../core/selectable.html#sqlalchemy.sql.expression.Lateral
    "sqlalchemy.sql.expression.Lateral") construct in conjunction with [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") as well as `Query.select_entity_from()` would not
    apply clause adaption to the right side of the join. “lateral” introduces the
    use case of the right side of a join being correlatable. Previously, adaptation
    of this clause wasn’t considered. Note that in 1.2 only, a selectable introduced
    by [`Query.subquery()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.subquery
    "sqlalchemy.orm.Query.subquery") is still not adapted due to [#4304](https://www.sqlalchemy.org/trac/ticket/4304);
    the selectable needs to be produced by the [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") function to be the right side of the “lateral”
    join.
  id: totrans-1536
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即在与[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")以及`Query.select_entity_from()`结合使用[`Lateral`](../core/selectable.html#sqlalchemy.sql.expression.Lateral
    "sqlalchemy.sql.expression.Lateral")构造时，不会将适配器应用于连接的右侧。 “lateral”引入了连接右侧可关联的用例。先前，未考虑适配此子句。请注意，在1.2版本中，由[`Query.subquery()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.subquery
    "sqlalchemy.orm.Query.subquery")引入的可选择项仍未适配，原因是[#4304](https://www.sqlalchemy.org/trac/ticket/4304)；可选择项需要由[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")函数生成，以成为“lateral”连接的右侧。
- en: 'References: [#4334](https://www.sqlalchemy.org/trac/ticket/4334)'
  id: totrans-1537
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4334](https://www.sqlalchemy.org/trac/ticket/4334)
- en: '**[orm] [bug]**'
  id: totrans-1538
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed 1.2 regression caused by [#3472](https://www.sqlalchemy.org/trac/ticket/3472)
    where the handling of an “updated_at” style column within the context of a post-update
    operation would also occur for a row that is to be deleted following the update,
    meaning both that a column with a Python-side value generator would show the now-deleted
    value that was emitted for the UPDATE before the DELETE (which was not the previous
    behavior), as well as that a SQL- emitted value generator would have the attribute
    expired, meaning the previous value would be unreachable due to the row having
    been deleted and the object detached from the session.The “postfetch” logic that
    was added as part of [#3472](https://www.sqlalchemy.org/trac/ticket/3472) is now
    skipped entirely for an object that ultimately is to be deleted.
  id: totrans-1539
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 1.2 版本中由 [#3472](https://www.sqlalchemy.org/trac/ticket/3472) 引起的回归问题，即在后续更新操作的上下文中处理“updated_at”风格列时，也会发生在更新后要删除的行上，这意味着具有
    Python 端值生成器的列将显示在 UPDATE 之前发出的现在已删除的值（这不是以前的行为），以及 SQL 发出的值生成器将使属性过期，这意味着由于行已被删除且对象已从会话中分离，因此无法访问以前的值。对于最终将被删除的对象，完全跳过了作为
    [#3472](https://www.sqlalchemy.org/trac/ticket/3472) 的一部分添加的“postfetch”逻辑。
- en: 'References: [#4327](https://www.sqlalchemy.org/trac/ticket/4327)'
  id: totrans-1540
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4327](https://www.sqlalchemy.org/trac/ticket/4327)
- en: orm declarative
  id: totrans-1541
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm declarative
- en: '**[orm] [declarative] [bug]**'
  id: totrans-1542
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Fixed bug where the declarative scan for attributes would receive the expression
    proxy delivered by a hybrid attribute at the class level, and not the hybrid attribute
    itself, when receiving the descriptor via the `@declared_attr` callable on a subclass
    of an already-mapped class. This would lead to an attribute that did not report
    itself as a hybrid when viewed within [`Mapper.all_orm_descriptors`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors").
  id: totrans-1543
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即在已映射类的子类上通过 `@declared_attr` 可调用获取描述符时，声明性扫描属性会收到混合属性提供的表达式代理，而不是混合属性本身。这会导致在
    [`Mapper.all_orm_descriptors`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors") 中查看时，属性不会报告自身为混合属性。
- en: 'References: [#4326](https://www.sqlalchemy.org/trac/ticket/4326)'
  id: totrans-1544
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4326](https://www.sqlalchemy.org/trac/ticket/4326)
- en: postgresql
  id: totrans-1545
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-1546
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug in PostgreSQL dialect where compiler keyword arguments such as `literal_binds=True`
    were not being propagated to a DISTINCT ON expression.
  id: totrans-1547
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 PostgreSQL 方言中的一个 bug，即编译器关键字参数（如 `literal_binds=True`）未传播到 DISTINCT ON
    表达式。
- en: 'References: [#4325](https://www.sqlalchemy.org/trac/ticket/4325)'
  id: totrans-1548
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4325](https://www.sqlalchemy.org/trac/ticket/4325)
- en: '**[postgresql] [bug]**'
  id: totrans-1549
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed the [`array_agg()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.array_agg
    "sqlalchemy.dialects.postgresql.array_agg") function, which is a slightly altered
    version of the usual [`array_agg()`](../core/functions.html#sqlalchemy.sql.functions.array_agg
    "sqlalchemy.sql.functions.array_agg") function, to also accept an incoming “type”
    argument without forcing an ARRAY around it, essentially the same thing that was
    fixed for the generic function in 1.1 in [#4107](https://www.sqlalchemy.org/trac/ticket/4107).
  id: totrans-1550
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`array_agg()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.array_agg
    "sqlalchemy.dialects.postgresql.array_agg") 函数，这是通常 [`array_agg()`](../core/functions.html#sqlalchemy.sql.functions.array_agg
    "sqlalchemy.sql.functions.array_agg") 函数的略有改变版本，也接受传入的“type”参数，而不强制将其包装在 ARRAY
    中，本质上与 1.1 中为通用函数修复的相同问题 [#4107](https://www.sqlalchemy.org/trac/ticket/4107)。
- en: 'References: [#4324](https://www.sqlalchemy.org/trac/ticket/4324)'
  id: totrans-1551
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4324](https://www.sqlalchemy.org/trac/ticket/4324)
- en: '**[postgresql] [bug]**'
  id: totrans-1552
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug in PostgreSQL ENUM reflection where a case-sensitive, quoted name
    would be reported by the query including quotes, which would not match a target
    column during table reflection as the quotes needed to be stripped off.
  id: totrans-1553
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '修复了 PostgreSQL ENUM 反射中的 bug，即查询中会报告包含引号的区分大小写的名称，这在表反射期间不会与目标列匹配，因为需要去掉引号。 '
- en: 'References: [#4323](https://www.sqlalchemy.org/trac/ticket/4323)'
  id: totrans-1554
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4323](https://www.sqlalchemy.org/trac/ticket/4323)
- en: oracle
  id: totrans-1555
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-1556
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed issue for cx_Oracle 7.0 where the behavior of Oracle param.getvalue()
    now returns a list, rather than a single scalar value, breaking autoincrement
    logic throughout the Core and ORM. The dml_ret_array_val compatibility flag is
    used for cx_Oracle 6.3 and 6.4 to establish compatible behavior with 7.0 and forward,
    for cx_Oracle 6.2.1 and prior a version number check falls back to the old logic.
  id: totrans-1557
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了针对 cx_Oracle 7.0 的问题，其中 Oracle param.getvalue() 的行为现在返回一个列表，而不是单个标量值，这破坏了
    Core 和 ORM 中的自增逻辑。对于 cx_Oracle 6.3 和 6.4，使用了 dml_ret_array_val 兼容标志来建立与 7.0 及更高版本的兼容行为，对于
    cx_Oracle 6.2.1 及更早版本，版本号检查退回到旧逻辑。
- en: 'References: [#4335](https://www.sqlalchemy.org/trac/ticket/4335)'
  id: totrans-1558
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4335](https://www.sqlalchemy.org/trac/ticket/4335)
- en: misc
  id: totrans-1559
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [ext]**'
  id: totrans-1560
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed issue where [`BakedQuery`](../orm/extensions/baked.html#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery") did not include the specific query class used
    by the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    as part of the cache key, leading to incompatibilities when using custom query
    classes, in particular the [`ShardedQuery`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedQuery
    "sqlalchemy.ext.horizontal_shard.ShardedQuery") which has some different argument
    signatures.
  id: totrans-1561
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`BakedQuery`](../orm/extensions/baked.html#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery")未包含会话（[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")）使用的特定查询类作为缓存键的问题，导致在使用自定义查询类时不兼容，特别是[`ShardedQuery`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedQuery
    "sqlalchemy.ext.horizontal_shard.ShardedQuery")，它具有一些不同的参数签名。
- en: 'References: [#4328](https://www.sqlalchemy.org/trac/ticket/4328)'
  id: totrans-1562
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4328](https://www.sqlalchemy.org/trac/ticket/4328)
- en: orm
  id: totrans-1563
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1564
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Added a check within the weakref cleanup for the [`InstanceState`](../orm/internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") object to check for the presence of the `dict`
    builtin, in an effort to reduce error messages generated when these cleanups occur
    during interpreter shutdown. Pull request courtesy Romuald Brunet.
  id: totrans-1565
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在弱引用清理中增加了一个检查，检查[`InstanceState`](../orm/internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") 对象中是否存在 `dict` 内置对象，以减少在解释器关闭时发生清理时生成的错误消息。感谢
    Romuald Brunet 的拉取请求。
- en: '**[orm] [bug]**'
  id: totrans-1566
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where use of [`Lateral`](../core/selectable.html#sqlalchemy.sql.expression.Lateral
    "sqlalchemy.sql.expression.Lateral") construct in conjunction with [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") as well as `Query.select_entity_from()` would not
    apply clause adaption to the right side of the join. “lateral” introduces the
    use case of the right side of a join being correlatable. Previously, adaptation
    of this clause wasn’t considered. Note that in 1.2 only, a selectable introduced
    by [`Query.subquery()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.subquery
    "sqlalchemy.orm.Query.subquery") is still not adapted due to [#4304](https://www.sqlalchemy.org/trac/ticket/4304);
    the selectable needs to be produced by the [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") function to be the right side of the “lateral”
    join.
  id: totrans-1567
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")以及`Query.select_entity_from()`与[`Lateral`](../core/selectable.html#sqlalchemy.sql.expression.Lateral
    "sqlalchemy.sql.expression.Lateral")构造结合使用时，不会将子句适配应用于 join 的右侧的 bug。“lateral”引入了右侧
    join 可相关的用例。以前，没有考虑到适配此子句。请注意，在 1.2 版本中，由 [`Query.subquery()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.subquery
    "sqlalchemy.orm.Query.subquery") 引入的可选择项仍未适配，因为[#4304](https://www.sqlalchemy.org/trac/ticket/4304)；可选择项需要由
    [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    函数生成以成为“lateral”连接的右侧。
- en: 'References: [#4334](https://www.sqlalchemy.org/trac/ticket/4334)'
  id: totrans-1568
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4334](https://www.sqlalchemy.org/trac/ticket/4334)
- en: '**[orm] [bug]**'
  id: totrans-1569
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed 1.2 regression caused by [#3472](https://www.sqlalchemy.org/trac/ticket/3472)
    where the handling of an “updated_at” style column within the context of a post-update
    operation would also occur for a row that is to be deleted following the update,
    meaning both that a column with a Python-side value generator would show the now-deleted
    value that was emitted for the UPDATE before the DELETE (which was not the previous
    behavior), as well as that a SQL- emitted value generator would have the attribute
    expired, meaning the previous value would be unreachable due to the row having
    been deleted and the object detached from the session.The “postfetch” logic that
    was added as part of [#3472](https://www.sqlalchemy.org/trac/ticket/3472) is now
    skipped entirely for an object that ultimately is to be deleted.
  id: totrans-1570
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由[#3472](https://www.sqlalchemy.org/trac/ticket/3472)引起的1.2回归，即在后续更新操作的上下文中处理“updated_at”样式列时，也会发生对于随后将被删除的行的更新，这意味着具有Python端值生成器的列将显示在UPDATE之前发出的现在已删除的值（这不是以前的行为），以及SQL发出的值生成器将使属性过期，这意味着由于行已被删除且对象已从会话中分离，因此无法访问先前的值。对于最终将被删除的对象，完全跳过了作为[#3472](https://www.sqlalchemy.org/trac/ticket/3472)的一部分添加的“postfetch”逻辑。
- en: 'References: [#4327](https://www.sqlalchemy.org/trac/ticket/4327)'
  id: totrans-1571
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4327](https://www.sqlalchemy.org/trac/ticket/4327)
- en: orm declarative
  id: totrans-1572
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm声明式
- en: '**[orm] [declarative] [bug]**'
  id: totrans-1573
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Fixed bug where the declarative scan for attributes would receive the expression
    proxy delivered by a hybrid attribute at the class level, and not the hybrid attribute
    itself, when receiving the descriptor via the `@declared_attr` callable on a subclass
    of an already-mapped class. This would lead to an attribute that did not report
    itself as a hybrid when viewed within [`Mapper.all_orm_descriptors`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors").
  id: totrans-1574
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即在已映射类的子类上通过`@declared_attr`可调用获取描述符时，声明扫描属性会收到混合属性提供的表达式代理，而不是混合属性本身。这会导致在[`Mapper.all_orm_descriptors`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors")中查看时，该属性不会报告自身为混合属性。
- en: 'References: [#4326](https://www.sqlalchemy.org/trac/ticket/4326)'
  id: totrans-1575
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4326](https://www.sqlalchemy.org/trac/ticket/4326)
- en: postgresql
  id: totrans-1576
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-1577
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug in PostgreSQL dialect where compiler keyword arguments such as `literal_binds=True`
    were not being propagated to a DISTINCT ON expression.
  id: totrans-1578
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了PostgreSQL方言中的bug，即编译器关键字参数（如`literal_binds=True`）未传播到DISTINCT ON表达式。
- en: 'References: [#4325](https://www.sqlalchemy.org/trac/ticket/4325)'
  id: totrans-1579
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4325](https://www.sqlalchemy.org/trac/ticket/4325)
- en: '**[postgresql] [bug]**'
  id: totrans-1580
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed the [`array_agg()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.array_agg
    "sqlalchemy.dialects.postgresql.array_agg") function, which is a slightly altered
    version of the usual [`array_agg()`](../core/functions.html#sqlalchemy.sql.functions.array_agg
    "sqlalchemy.sql.functions.array_agg") function, to also accept an incoming “type”
    argument without forcing an ARRAY around it, essentially the same thing that was
    fixed for the generic function in 1.1 in [#4107](https://www.sqlalchemy.org/trac/ticket/4107).
  id: totrans-1581
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`array_agg()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.array_agg
    "sqlalchemy.dialects.postgresql.array_agg")函数，这是通常[`array_agg()`](../core/functions.html#sqlalchemy.sql.functions.array_agg
    "sqlalchemy.sql.functions.array_agg")函数的略有改变版本，也接受传入的“type”参数，而不强制在其周围添加一个ARRAY，这与1.1中为通用函数修复的内容相同，见[#4107](https://www.sqlalchemy.org/trac/ticket/4107)。
- en: 'References: [#4324](https://www.sqlalchemy.org/trac/ticket/4324)'
  id: totrans-1582
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4324](https://www.sqlalchemy.org/trac/ticket/4324)
- en: '**[postgresql] [bug]**'
  id: totrans-1583
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug in PostgreSQL ENUM reflection where a case-sensitive, quoted name
    would be reported by the query including quotes, which would not match a target
    column during table reflection as the quotes needed to be stripped off.
  id: totrans-1584
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了PostgreSQL ENUM反射中的bug，即查询中包含带引号的区分大小写名称，这些引号在表反射期间不会匹配目标列，因为需要去掉引号。
- en: 'References: [#4323](https://www.sqlalchemy.org/trac/ticket/4323)'
  id: totrans-1585
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4323](https://www.sqlalchemy.org/trac/ticket/4323)
- en: oracle
  id: totrans-1586
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-1587
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed issue for cx_Oracle 7.0 where the behavior of Oracle param.getvalue()
    now returns a list, rather than a single scalar value, breaking autoincrement
    logic throughout the Core and ORM. The dml_ret_array_val compatibility flag is
    used for cx_Oracle 6.3 and 6.4 to establish compatible behavior with 7.0 and forward,
    for cx_Oracle 6.2.1 and prior a version number check falls back to the old logic.
  id: totrans-1588
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 cx_Oracle 7.0 中 Oracle param.getvalue() 的行为，现在返回一个列表，而不是单个标量值，这会破坏 Core
    和 ORM 中的自增逻辑。对于 cx_Oracle 6.3 和 6.4，使用 dml_ret_array_val 兼容性标志来建立与 7.0 及以后版本的兼容性行为，对于
    cx_Oracle 6.2.1 及之前的版本，版本号检查会回退到旧逻辑。
- en: 'References: [#4335](https://www.sqlalchemy.org/trac/ticket/4335)'
  id: totrans-1589
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#4335](https://www.sqlalchemy.org/trac/ticket/4335)
- en: misc
  id: totrans-1590
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[bug] [ext]**'
  id: totrans-1591
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed issue where [`BakedQuery`](../orm/extensions/baked.html#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery") did not include the specific query class used
    by the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    as part of the cache key, leading to incompatibilities when using custom query
    classes, in particular the [`ShardedQuery`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedQuery
    "sqlalchemy.ext.horizontal_shard.ShardedQuery") which has some different argument
    signatures.
  id: totrans-1592
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`BakedQuery`](../orm/extensions/baked.html#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery") 不包含由 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 使用的特定查询类作为缓存键的一部分的问题，导致在使用自定义查询类时不兼容，特别是 [`ShardedQuery`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedQuery
    "sqlalchemy.ext.horizontal_shard.ShardedQuery") 具有一些不同的参数签名。
- en: 'References: [#4328](https://www.sqlalchemy.org/trac/ticket/4328)'
  id: totrans-1593
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#4328](https://www.sqlalchemy.org/trac/ticket/4328)
- en: 1.2.11
  id: totrans-1594
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.2.11
- en: 'Released: August 20, 2018'
  id: totrans-1595
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2018年8月20日
- en: orm declarative
  id: totrans-1596
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm declarative
- en: '**[orm] [declarative] [bug]**'
  id: totrans-1597
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Fixed issue in previously untested use case, allowing a declarative mapped class
    to inherit from a classically-mapped class outside of the declarative base, including
    that it accommodates for unmapped intermediate classes. An unmapped intermediate
    class may specify `__abstract__`, which is now interpreted correctly, or the intermediate
    class can remain unmarked, and the classically mapped base class will be detected
    within the hierarchy regardless. In order to anticipate existing scenarios which
    may be mixing in classical mappings into existing declarative hierarchies, an
    error is now raised if multiple mapped bases are detected for a given class.
  id: totrans-1598
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了先前未经测试的用例中的问题，允许声明式映射类继承自声明基类之外的经典映射类，其中包括它适应未映射的中间类。未映射的中间类可以指定 `__abstract__`，现在可以正确解释，或者中间类可以保持未标记状态，并且经典映射的基类将在层次结构中被检测到。为了预期可能正在将经典映射混合到现有声明层次结构中的现有情景，如果检测到给定类的多个映射基类，则现在会引发错误。
- en: 'References: [#4321](https://www.sqlalchemy.org/trac/ticket/4321)'
  id: totrans-1599
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#4321](https://www.sqlalchemy.org/trac/ticket/4321)
- en: sql
  id: totrans-1600
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1601
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue that is closely related to [#3639](https://www.sqlalchemy.org/trac/ticket/3639)
    where an expression rendered in a boolean context on a non-native boolean backend
    would be compared to 1/0 even though it is already an implicitly boolean expression,
    when [`ColumnElement.self_group()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.self_group
    "sqlalchemy.sql.expression.ColumnElement.self_group") were used. While this does
    not affect the user-friendly backends (MySQL, SQLite) it was not handled by Oracle
    (and possibly SQL Server). Whether or not the expression is implicitly boolean
    on any database is now determined up front as an additional check to not generate
    the integer comparison within the compilation of the statement.
  id: totrans-1602
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个与 [#3639](https://www.sqlalchemy.org/trac/ticket/3639) 密切相关的问题，即在非本地布尔后端的布尔上下文中呈现的表达式将与
    1/0 进行比较，即使它已经是隐式布尔表达式，当使用 [`ColumnElement.self_group()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.self_group
    "sqlalchemy.sql.expression.ColumnElement.self_group") 时也是如此。虽然这不影响用户友好的后端（MySQL、SQLite），但
    Oracle（可能还有 SQL Server）没有处理它。现在，任何数据库上是否隐式布尔表达式现在都会被事先确定为在语句的编译中不生成整数比较的附加检查。
- en: 'References: [#4320](https://www.sqlalchemy.org/trac/ticket/4320)'
  id: totrans-1603
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#4320](https://www.sqlalchemy.org/trac/ticket/4320)
- en: '**[sql] [bug]**'
  id: totrans-1604
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Added missing window function parameters [`WithinGroup.over.range_`](../core/sqlelement.html#sqlalchemy.sql.expression.WithinGroup.over.params.range_
    "sqlalchemy.sql.expression.WithinGroup.over") and [`WithinGroup.over.rows`](../core/sqlelement.html#sqlalchemy.sql.expression.WithinGroup.over.params.rows
    "sqlalchemy.sql.expression.WithinGroup.over") parameters to the [`WithinGroup.over()`](../core/sqlelement.html#sqlalchemy.sql.expression.WithinGroup.over
    "sqlalchemy.sql.expression.WithinGroup.over") and [`FunctionFilter.over()`](../core/sqlelement.html#sqlalchemy.sql.expression.FunctionFilter.over
    "sqlalchemy.sql.expression.FunctionFilter.over") methods, to correspond to the
    range/rows feature added to the “over” method of SQL functions as part of [#3049](https://www.sqlalchemy.org/trac/ticket/3049)
    in version 1.1.
  id: totrans-1605
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将缺失的窗口函数参数[`WithinGroup.over.range_`](../core/sqlelement.html#sqlalchemy.sql.expression.WithinGroup.over.params.range_
    "sqlalchemy.sql.expression.WithinGroup.over")和[`WithinGroup.over.rows`](../core/sqlelement.html#sqlalchemy.sql.expression.WithinGroup.over.params.rows
    "sqlalchemy.sql.expression.WithinGroup.over")参数添加到[`WithinGroup.over()`](../core/sqlelement.html#sqlalchemy.sql.expression.WithinGroup.over
    "sqlalchemy.sql.expression.WithinGroup.over")和[`FunctionFilter.over()`](../core/sqlelement.html#sqlalchemy.sql.expression.FunctionFilter.over
    "sqlalchemy.sql.expression.FunctionFilter.over")方法中，以对应于 SQL 函数的“over”方法中在版本 1.1
    中添加的 range/rows 功能。
- en: 'References: [#4322](https://www.sqlalchemy.org/trac/ticket/4322)'
  id: totrans-1606
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4322](https://www.sqlalchemy.org/trac/ticket/4322)
- en: '**[sql] [bug]**'
  id: totrans-1607
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where the multi-table support for UPDATE and DELETE statements did
    not consider the additional FROM elements as targets for correlation, when a correlated
    SELECT were also combined with the statement. This change now includes that a
    SELECT statement in the WHERE clause for such a statement will try to auto-correlate
    back to these additional tables in the parent UPDATE/DELETE or unconditionally
    correlate if [`Select.correlate()`](../core/selectable.html#sqlalchemy.sql.expression.Select.correlate
    "sqlalchemy.sql.expression.Select.correlate") is used. Note that auto-correlation
    raises an error if the SELECT statement would have no FROM clauses as a result,
    which can now occur if the parent UPDATE/DELETE specifies the same tables in its
    additional set of tables; specify [`Select.correlate()`](../core/selectable.html#sqlalchemy.sql.expression.Select.correlate
    "sqlalchemy.sql.expression.Select.correlate") explicitly to resolve.
  id: totrans-1608
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 UPDATE 和 DELETE 语句的多表支持未将额外的 FROM 元素视为与语句结合时的相关目标的 bug，当相关的 SELECT 也与语句结合时。此更改现在包括在
    WHERE 子句中的 SELECT 语句将尝试自动关联回父 UPDATE/DELETE 中的这些额外表，或者如果使用 [`Select.correlate()`](../core/selectable.html#sqlalchemy.sql.expression.Select.correlate
    "sqlalchemy.sql.expression.Select.correlate")，则无条件关联。请注意，如果 SELECT 语句的结果没有 FROM
    子句，则自动关联会引发错误，这种情况现在可能发生，如果父 UPDATE/DELETE 在其额外的表集中指定相同的表，请显式指定 [`Select.correlate()`](../core/selectable.html#sqlalchemy.sql.expression.Select.correlate
    "sqlalchemy.sql.expression.Select.correlate") 以解决。
- en: 'References: [#4313](https://www.sqlalchemy.org/trac/ticket/4313)'
  id: totrans-1609
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4313](https://www.sqlalchemy.org/trac/ticket/4313)
- en: oracle
  id: totrans-1610
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-1611
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: For cx_Oracle, Integer datatypes will now be bound to “int”, per advice from
    the cx_Oracle developers. Previously, using cx_Oracle.NUMBER caused a loss in
    precision within the cx_Oracle 6.x series.
  id: totrans-1612
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 cx_Oracle，整数数据类型现在将绑定到“int”，根据 cx_Oracle 开发人员的建议。在 cx_Oracle 6.x 系列中，以前使用
    cx_Oracle.NUMBER 会导致精度丢失。
- en: 'References: [#4309](https://www.sqlalchemy.org/trac/ticket/4309)'
  id: totrans-1613
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4309](https://www.sqlalchemy.org/trac/ticket/4309)
- en: misc
  id: totrans-1614
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [py3k]**'
  id: totrans-1615
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [py3k]**'
- en: Started importing “collections” from “collections.abc” under Python 3.3 and
    greater for Python 3.8 compatibility. Pull request courtesy Nathaniel Knight.
  id: totrans-1616
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 开始在 Python 3.3 及更高版本中从“collections.abc”导入“collections”以实现 Python 3.8 的兼容性。感谢
    Nathaniel Knight 的拉取请求。
- en: '**[no_tags]**'
  id: totrans-1617
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: Fixed issue where the “schema” name used for a SQLite database within table
    reflection would not quote the schema name correctly. Pull request courtesy Phillip
    Cloud.
  id: totrans-1618
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在表反射中用于 SQLite 数据库的“schema”名称未正确引用模式名称的问题。感谢 Phillip Cloud 的拉取请求。
- en: orm declarative
  id: totrans-1619
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm 声明式
- en: '**[orm] [declarative] [bug]**'
  id: totrans-1620
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Fixed issue in previously untested use case, allowing a declarative mapped class
    to inherit from a classically-mapped class outside of the declarative base, including
    that it accommodates for unmapped intermediate classes. An unmapped intermediate
    class may specify `__abstract__`, which is now interpreted correctly, or the intermediate
    class can remain unmarked, and the classically mapped base class will be detected
    within the hierarchy regardless. In order to anticipate existing scenarios which
    may be mixing in classical mappings into existing declarative hierarchies, an
    error is now raised if multiple mapped bases are detected for a given class.
  id: totrans-1621
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了以前未经测试的用例中的问题，允许声明映射类从声明基类之外的经典映射类继承，包括适应未映射的中间类。未映射的中间类可以指定`__abstract__`，现在将正确解释，或者中间类可以保持未标记，而经典映射的基类将在层次结构中被检测到。为了预期可能将经典映射混合到现有声明层次结构中的现有场景，如果检测到给定类的多个映射基类，则现在会引发错误。
- en: 'References: [#4321](https://www.sqlalchemy.org/trac/ticket/4321)'
  id: totrans-1622
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4321](https://www.sqlalchemy.org/trac/ticket/4321)
- en: sql
  id: totrans-1623
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1624
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue that is closely related to [#3639](https://www.sqlalchemy.org/trac/ticket/3639)
    where an expression rendered in a boolean context on a non-native boolean backend
    would be compared to 1/0 even though it is already an implicitly boolean expression,
    when [`ColumnElement.self_group()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.self_group
    "sqlalchemy.sql.expression.ColumnElement.self_group") were used. While this does
    not affect the user-friendly backends (MySQL, SQLite) it was not handled by Oracle
    (and possibly SQL Server). Whether or not the expression is implicitly boolean
    on any database is now determined up front as an additional check to not generate
    the integer comparison within the compilation of the statement.
  id: totrans-1625
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个与[#3639](https://www.sqlalchemy.org/trac/ticket/3639)密切相关的问题，即在非本地布尔后端上渲染为布尔上下文的表达式将与1/0进行比较，即使它已经是一个隐式布尔表达式，当使用[`ColumnElement.self_group()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.self_group
    "sqlalchemy.sql.expression.ColumnElement.self_group")时。虽然这不会影响用户友好的后端（MySQL，SQLite），但Oracle（可能还有SQL
    Server）没有处理。现在，无论在任何数据库上表达式是否隐式布尔都将在编译语句时提前确定，以避免生成整数比较。
- en: 'References: [#4320](https://www.sqlalchemy.org/trac/ticket/4320)'
  id: totrans-1626
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4320](https://www.sqlalchemy.org/trac/ticket/4320)
- en: '**[sql] [bug]**'
  id: totrans-1627
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Added missing window function parameters [`WithinGroup.over.range_`](../core/sqlelement.html#sqlalchemy.sql.expression.WithinGroup.over.params.range_
    "sqlalchemy.sql.expression.WithinGroup.over") and [`WithinGroup.over.rows`](../core/sqlelement.html#sqlalchemy.sql.expression.WithinGroup.over.params.rows
    "sqlalchemy.sql.expression.WithinGroup.over") parameters to the [`WithinGroup.over()`](../core/sqlelement.html#sqlalchemy.sql.expression.WithinGroup.over
    "sqlalchemy.sql.expression.WithinGroup.over") and [`FunctionFilter.over()`](../core/sqlelement.html#sqlalchemy.sql.expression.FunctionFilter.over
    "sqlalchemy.sql.expression.FunctionFilter.over") methods, to correspond to the
    range/rows feature added to the “over” method of SQL functions as part of [#3049](https://www.sqlalchemy.org/trac/ticket/3049)
    in version 1.1.
  id: totrans-1628
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将缺失的窗口函数参数[`WithinGroup.over.range_`](../core/sqlelement.html#sqlalchemy.sql.expression.WithinGroup.over.params.range_
    "sqlalchemy.sql.expression.WithinGroup.over")和[`WithinGroup.over.rows`](../core/sqlelement.html#sqlalchemy.sql.expression.WithinGroup.over.params.rows
    "sqlalchemy.sql.expression.WithinGroup.over")参数添加到[`WithinGroup.over()`](../core/sqlelement.html#sqlalchemy.sql.expression.WithinGroup.over
    "sqlalchemy.sql.expression.WithinGroup.over")和[`FunctionFilter.over()`](../core/sqlelement.html#sqlalchemy.sql.expression.FunctionFilter.over
    "sqlalchemy.sql.expression.FunctionFilter.over")方法中，以对应于版本1.1中作为SQL函数“over”方法的一部分添加的range/rows功能的特性[#3049](https://www.sqlalchemy.org/trac/ticket/3049)。
- en: 'References: [#4322](https://www.sqlalchemy.org/trac/ticket/4322)'
  id: totrans-1629
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4322](https://www.sqlalchemy.org/trac/ticket/4322)
- en: '**[sql] [bug]**'
  id: totrans-1630
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where the multi-table support for UPDATE and DELETE statements did
    not consider the additional FROM elements as targets for correlation, when a correlated
    SELECT were also combined with the statement. This change now includes that a
    SELECT statement in the WHERE clause for such a statement will try to auto-correlate
    back to these additional tables in the parent UPDATE/DELETE or unconditionally
    correlate if [`Select.correlate()`](../core/selectable.html#sqlalchemy.sql.expression.Select.correlate
    "sqlalchemy.sql.expression.Select.correlate") is used. Note that auto-correlation
    raises an error if the SELECT statement would have no FROM clauses as a result,
    which can now occur if the parent UPDATE/DELETE specifies the same tables in its
    additional set of tables; specify [`Select.correlate()`](../core/selectable.html#sqlalchemy.sql.expression.Select.correlate
    "sqlalchemy.sql.expression.Select.correlate") explicitly to resolve.
  id: totrans-1631
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，在联合 SELECT 与语句结合时，UPDATE 和 DELETE 语句的多表支持没有将额外的 FROM 元素视为相关目标，此时一个相关的
    SELECT 也与该语句结合。此更改现在包括了在这样一个语句的 WHERE 子句中的 SELECT 语句将尝试自动关联到父 UPDATE/DELETE 中的这些额外表，或者如果使用
    [`Select.correlate()`](../core/selectable.html#sqlalchemy.sql.expression.Select.correlate
    "sqlalchemy.sql.expression.Select.correlate") 则无条件关联。请注意，如果 SELECT 语句的结果没有 FROM
    子句，则自动关联会引发错误，这现在可能会发生，如果父 UPDATE/DELETE 指定了相同的表在其额外的表集中；请显式指定 [`Select.correlate()`](../core/selectable.html#sqlalchemy.sql.expression.Select.correlate
    "sqlalchemy.sql.expression.Select.correlate") 以解决此问题。
- en: 'References: [#4313](https://www.sqlalchemy.org/trac/ticket/4313)'
  id: totrans-1632
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4313](https://www.sqlalchemy.org/trac/ticket/4313)
- en: oracle
  id: totrans-1633
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-1634
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: For cx_Oracle, Integer datatypes will now be bound to “int”, per advice from
    the cx_Oracle developers. Previously, using cx_Oracle.NUMBER caused a loss in
    precision within the cx_Oracle 6.x series.
  id: totrans-1635
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 cx_Oracle，Integer 数据类型现在将绑定到“int”，根据 cx_Oracle 开发人员的建议。以前，在 cx_Oracle 6.x
    系列中使用 cx_Oracle.NUMBER 会导致精度丢失。
- en: 'References: [#4309](https://www.sqlalchemy.org/trac/ticket/4309)'
  id: totrans-1636
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4309](https://www.sqlalchemy.org/trac/ticket/4309)
- en: misc
  id: totrans-1637
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [py3k]**'
  id: totrans-1638
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [py3k]**'
- en: Started importing “collections” from “collections.abc” under Python 3.3 and
    greater for Python 3.8 compatibility. Pull request courtesy Nathaniel Knight.
  id: totrans-1639
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 开始在 Python 3.3 及更高版本中从“collections”导入“collections.abc”，以实现与 Python 3.8 的兼容性。由
    Nathaniel Knight 提供的 Pull 请求。
- en: '**[no_tags]**'
  id: totrans-1640
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: Fixed issue where the “schema” name used for a SQLite database within table
    reflection would not quote the schema name correctly. Pull request courtesy Phillip
    Cloud.
  id: totrans-1641
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在表反射中使用的 SQLite 数据库的“schema”名称无法正确引用模式名称的问题。由 Phillip Cloud 提供的 Pull 请求。
- en: 1.2.10
  id: totrans-1642
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.2.10
- en: 'Released: July 13, 2018'
  id: totrans-1643
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2018 年 7 月 13 日
- en: orm
  id: totrans-1644
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1645
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in [`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")
    construct where placing two columns of the same name would be de-duplicated, when
    the [`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")
    were used as part of the rendered SQL, such as in the ORDER BY or GROUP BY of
    the statement.
  id: totrans-1646
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")构造中修复了一个错误，当放置两个同名列时，它们会被去重，当[`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle")作为渲染的 SQL 的一部分使用时，比如在语句的 ORDER BY 或 GROUP BY 中。
- en: 'References: [#4295](https://www.sqlalchemy.org/trac/ticket/4295)'
  id: totrans-1647
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4295](https://www.sqlalchemy.org/trac/ticket/4295)
- en: '**[orm] [bug]**'
  id: totrans-1648
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression in 1.2.9 due to [#4287](https://www.sqlalchemy.org/trac/ticket/4287)
    where using a [`Load`](../orm/queryguide/relationships.html#sqlalchemy.orm.Load
    "sqlalchemy.orm.Load") option in conjunction with a string wildcard would result
    in a TypeError.
  id: totrans-1649
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于 [#4287](https://www.sqlalchemy.org/trac/ticket/4287) 导致 1.2.9 中的回归错误，使用 [`Load`](../orm/queryguide/relationships.html#sqlalchemy.orm.Load
    "sqlalchemy.orm.Load") 选项与字符串通配符结合使用会导致 TypeError。
- en: 'References: [#4298](https://www.sqlalchemy.org/trac/ticket/4298)'
  id: totrans-1650
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4298](https://www.sqlalchemy.org/trac/ticket/4298)
- en: sql
  id: totrans-1651
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1652
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where a [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") would be dropped explicitly before any [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") that refers to it, which breaks in the case when the
    sequence is also involved in a server-side default for that table, when using
    [`MetaData.drop_all()`](../core/metadata.html#sqlalchemy.schema.MetaData.drop_all
    "sqlalchemy.schema.MetaData.drop_all"). The step which processes sequences to
    be dropped via non server-side column default functions is now invoked after the
    table itself is dropped.
  id: totrans-1653
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，在任何引用它的[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")之前，会明确删除[`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")，这会在序列还涉及该表的服务器端默认值时出现问题，当使用[`MetaData.drop_all()`](../core/metadata.html#sqlalchemy.schema.MetaData.drop_all
    "sqlalchemy.schema.MetaData.drop_all")时。现在，在删除表本身之后，会调用处理要通过非服务器端列默认函数删除的序列的步骤。
- en: 'References: [#4300](https://www.sqlalchemy.org/trac/ticket/4300)'
  id: totrans-1654
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4300](https://www.sqlalchemy.org/trac/ticket/4300)
- en: orm
  id: totrans-1655
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1656
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in [`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")
    construct where placing two columns of the same name would be de-duplicated, when
    the [`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")
    were used as part of the rendered SQL, such as in the ORDER BY or GROUP BY of
    the statement.
  id: totrans-1657
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在[`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")构造中的bug，当将两个同名列放置在一起时，会被去重，当[`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle")作为渲染SQL的一部分使用时，例如在语句的ORDER BY或GROUP BY中。
- en: 'References: [#4295](https://www.sqlalchemy.org/trac/ticket/4295)'
  id: totrans-1658
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4295](https://www.sqlalchemy.org/trac/ticket/4295)
- en: '**[orm] [bug]**'
  id: totrans-1659
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression in 1.2.9 due to [#4287](https://www.sqlalchemy.org/trac/ticket/4287)
    where using a [`Load`](../orm/queryguide/relationships.html#sqlalchemy.orm.Load
    "sqlalchemy.orm.Load") option in conjunction with a string wildcard would result
    in a TypeError.
  id: totrans-1660
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于[#4287](https://www.sqlalchemy.org/trac/ticket/4287)，在1.2.9中出现了回归，使用[`Load`](../orm/queryguide/relationships.html#sqlalchemy.orm.Load
    "sqlalchemy.orm.Load")选项与��符串通配符一起使用会导致TypeError。
- en: 'References: [#4298](https://www.sqlalchemy.org/trac/ticket/4298)'
  id: totrans-1661
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4298](https://www.sqlalchemy.org/trac/ticket/4298)
- en: sql
  id: totrans-1662
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1663
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where a [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") would be dropped explicitly before any [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") that refers to it, which breaks in the case when the
    sequence is also involved in a server-side default for that table, when using
    [`MetaData.drop_all()`](../core/metadata.html#sqlalchemy.schema.MetaData.drop_all
    "sqlalchemy.schema.MetaData.drop_all"). The step which processes sequences to
    be dropped via non server-side column default functions is now invoked after the
    table itself is dropped.
  id: totrans-1664
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，在任何引用它的[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")之前，会明确删除[`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")，这会在序列还涉及该表的服务器端默认值时出现问题，当使用[`MetaData.drop_all()`](../core/metadata.html#sqlalchemy.schema.MetaData.drop_all
    "sqlalchemy.schema.MetaData.drop_all")时。现在，在删除表本身之后，会调用处理要通过非服务器端列默认函数删除的序列的步骤。
- en: 'References: [#4300](https://www.sqlalchemy.org/trac/ticket/4300)'
  id: totrans-1665
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4300](https://www.sqlalchemy.org/trac/ticket/4300)
- en: 1.2.9
  id: totrans-1666
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.2.9
- en: 'Released: June 29, 2018'
  id: totrans-1667
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2018年6月29日
- en: orm
  id: totrans-1668
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1669
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where chaining multiple join elements inside of [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") might not correctly adapt to the previous left-hand
    side, when chaining joined inheritance classes that share the same base class.
  id: totrans-1670
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")中链接多个连接元素可能无法正确适应先前左侧的问题，当链接共享相同基类的连接继承类时。
- en: 'References: [#3505](https://www.sqlalchemy.org/trac/ticket/3505)'
  id: totrans-1671
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3505](https://www.sqlalchemy.org/trac/ticket/3505)
- en: '**[orm] [bug]**'
  id: totrans-1672
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in cache key generation for baked queries which could cause a too-short
    cache key to be generated for the case of eager loads across subclasses. This
    could in turn cause the eagerload query to be cached in place of a non-eagerload
    query, or vice versa, for a polymorphic “selectin” load, or possibly for lazy
    loads or selectin loads as well.
  id: totrans-1673
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了为烘焙查询生成缓存键时的bug，这可能导致为跨子类的贪婪加载生成一个过短的缓存键。这反过来可能导致贪婪加载查询被缓存，而不是非贪婪加载查询，或者反之，对于多态“selectin”加载，或者可能对于延迟加载或selectin加载也是如此。
- en: 'References: [#4287](https://www.sqlalchemy.org/trac/ticket/4287)'
  id: totrans-1674
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#4287](https://www.sqlalchemy.org/trac/ticket/4287)
- en: '**[orm] [bug]**'
  id: totrans-1675
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in new polymorphic selectin loading where the BakedQuery used internally
    would be mutated by the given loader options, which would both inappropriately
    mutate the subclass query as well as carry over the effect to subsequent queries.
  id: totrans-1676
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新多态选择加载中的错误，其中内部使用的 BakedQuery 会被给定的加载器选项所改变，这既会不适当地改变子类查询，也会将效果带到后续查询中。
- en: 'References: [#4286](https://www.sqlalchemy.org/trac/ticket/4286)'
  id: totrans-1677
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#4286](https://www.sqlalchemy.org/trac/ticket/4286)
- en: '**[orm] [bug]**'
  id: totrans-1678
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression caused by [#4256](https://www.sqlalchemy.org/trac/ticket/4256)
    (itself a regression fix for [#4228](https://www.sqlalchemy.org/trac/ticket/4228))
    which breaks an undocumented behavior which converted for a non-sequence of entities
    passed directly to the [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") constructor into a single-element sequence. While this
    behavior was never supported or documented, it’s already in use so has been added
    as a behavioral contract to [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query").
  id: totrans-1679
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于 [#4256](https://www.sqlalchemy.org/trac/ticket/4256) 引起的回归问题已修复（本身是对 [#4228](https://www.sqlalchemy.org/trac/ticket/4228)
    的回归修复），它中断了一项未记录的行为，即将直接传递给 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 构造函数的非实体序列转换为单一元素序列。虽然这种行为从未得到支持或记录，但已经在使用中，因此已将其添加为 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 的行为约定。
- en: 'References: [#4269](https://www.sqlalchemy.org/trac/ticket/4269)'
  id: totrans-1680
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#4269](https://www.sqlalchemy.org/trac/ticket/4269)
- en: '**[orm] [bug]**'
  id: totrans-1681
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed an issue that was both a performance regression in 1.2 as well as an incorrect
    result regarding the “baked” lazy loader, involving the generation of cache keys
    from the original [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object’s loader options. If the loader options were built
    up in a “branched” style using common base elements for multiple options, the
    same options would be rendered into the cache key repeatedly, causing both a performance
    issue as well as generating the wrong cache key. This is fixed, along with a performance
    improvement when such “branched” options are applied via [`Query.options()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.options
    "sqlalchemy.orm.Query.options") to prevent the same option objects from being
    applied repeatedly.
  id: totrans-1682
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 1.2 版本中的性能回归和“烘焙”懒加载器中的错误结果，涉及从原始 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 对象的加载器选项生成缓存键。如果加载器选项是以“分支”样式构建的，使用相同的基本元素来构建多个选项，那么相同的选项将被重复渲染到缓存键中，导致性能问题以及生成错误的缓存键。已修复此问题，并通过在应用
    [`Query.options()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.options
    "sqlalchemy.orm.Query.options") 时防止重复应用相同选项对象来提高性能，以防止重复应用“分支”选项。
- en: 'References: [#4270](https://www.sqlalchemy.org/trac/ticket/4270)'
  id: totrans-1683
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#4270](https://www.sqlalchemy.org/trac/ticket/4270)
- en: sql
  id: totrans-1684
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1685
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed regression in 1.2 due to [#4147](https://www.sqlalchemy.org/trac/ticket/4147)
    where a [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    that has had some of its indexed columns redefined with new ones, as would occur
    when overriding columns during reflection or when using [`Table.extend_existing`](../core/metadata.html#sqlalchemy.schema.Table.params.extend_existing
    "sqlalchemy.schema.Table"), such that the [`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata") method would fail when attempting to copy
    those indexes as they still referred to the replaced column. The copy logic now
    accommodates for this condition.
  id: totrans-1686
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于 [#4147](https://www.sqlalchemy.org/trac/ticket/4147) 引起的 1.2 版本中的回归问题已修复，其中一个
    [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    在反射期间重写其部分索引列或在使用 [`Table.extend_existing`](../core/metadata.html#sqlalchemy.schema.Table.params.extend_existing
    "sqlalchemy.schema.Table") 时重新定义其部分索引列时，[`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata") 方法在尝试复制这些索引时将失败，因为它们仍然引用替换的列。现在的复制逻辑已适应了这种情况。
- en: 'References: [#4279](https://www.sqlalchemy.org/trac/ticket/4279)'
  id: totrans-1687
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#4279](https://www.sqlalchemy.org/trac/ticket/4279)
- en: mysql
  id: totrans-1688
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-1689
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed percent-sign doubling in mysql-connector-python dialect, which does not
    require de-doubling of percent signs. Additionally, the mysql- connector-python
    driver is inconsistent in how it passes the column names in cursor.description,
    so a workaround decoder has been added to conditionally decode these randomly-sometimes-bytes
    values to unicode only if needed. Also improved test support for mysql-connector-python,
    however it should be noted that this driver still has issues with unicode that
    continue to be unresolved as of yet.
  id: totrans-1690
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了mysql-connector-python方言中百分号重复的问题，不需要去除百分号的重复。此外，mysql-connector-python驱动在传递游标描述中的列名时不一致，因此添加了一个解码器来有条件地将这些随机的字节值解码为Unicode，仅在需要时进行解码。同时改进了mysql-connector-python的测试支持，但需要注意的是，该驱动程序仍然存在与Unicode相关的问题，目前尚未解决。
- en: '**[mysql] [bug]**'
  id: totrans-1691
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed bug in index reflection where on MySQL 8.0 an index that includes ASC
    or DESC in an indexed column specification would not be correctly reflected, as
    MySQL 8.0 introduces support for returning this information in a table definition
    string.
  id: totrans-1692
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了索引反射中的bug，在MySQL 8.0上，包含ASC或DESC在索引列规范中的索引将不会被正确反映，因为MySQL 8.0引入了在表定义字符串中返回此信息的支持。
- en: 'References: [#4293](https://www.sqlalchemy.org/trac/ticket/4293)'
  id: totrans-1693
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4293](https://www.sqlalchemy.org/trac/ticket/4293)
- en: '**[mysql] [bug]**'
  id: totrans-1694
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed bug in MySQLdb dialect and variants such as PyMySQL where an additional
    “unicode returns” check upon connection makes explicit use of the “utf8” character
    set, which in MySQL 8.0 emits a warning that utf8mb4 should be used. This is now
    replaced with a utf8mb4 equivalent. Documentation is also updated for the MySQL
    dialect to specify utf8mb4 in all examples. Additional changes have been made
    to the test suite to use utf8mb3 charsets and databases (there seem to be collation
    issues in some edge cases with utf8mb4), and to support configuration default
    changes made in MySQL 8.0 such as explicit_defaults_for_timestamp as well as new
    errors raised for invalid MyISAM indexes.
  id: totrans-1695
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了MySQLdb方言和PyMySQL等变体中的bug，在连接时对“unicode返回”进行额外检查，明确使用“utf8”字符集，在MySQL 8.0中会发出警告，建议使用utf8mb4。现在已经替换为utf8mb4等效。还更新了MySQL方言的文档，以在所有示例中指定utf8mb4。对测试套件进行了额外的更改，以使用utf8mb3字符集和数据库（在某些边缘情况下utf8mb4存在排序问题），并支持MySQL
    8.0中进行的配置默认更改，如explicit_defaults_for_timestamp以及为无效的MyISAM索引引发的新错误。
- en: 'References: [#4283](https://www.sqlalchemy.org/trac/ticket/4283)'
  id: totrans-1696
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4283](https://www.sqlalchemy.org/trac/ticket/4283)
- en: '**[mysql] [bug]**'
  id: totrans-1697
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: The [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    construct now accommodates a [`Join`](../core/selectable.html#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") object as supported by MySQL for UPDATE..FROM.
    As the construct already accepted an alias object for a similar purpose, the feature
    of UPDATE against a non-table was already implied so this has been added.
  id: totrans-1698
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Update`](../core/dml.html#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")构造现在支持[`Join`](../core/selectable.html#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join")对象，这是MySQL对UPDATE..FROM支持的一部分。由于该构造已经接受了一个别名对象用于类似的目的，因此已经暗示了针对非表的UPDATE功能，因此已经添加了这个功能。'
- en: 'References: [#3645](https://www.sqlalchemy.org/trac/ticket/3645)'
  id: totrans-1699
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3645](https://www.sqlalchemy.org/trac/ticket/3645)
- en: sqlite
  id: totrans-1700
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-1701
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Fixed issue in test suite where SQLite 3.24 added a new reserved word that conflicted
    with a usage in TypeReflectionTest. Pull request courtesy Nils Philippsen.
  id: totrans-1702
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了测试套件中的问题，SQLite 3.24添加了一个新的保留字，与TypeReflectionTest中的使用发生冲突。感谢Nils Philippsen提供的拉取请求。
- en: mssql
  id: totrans-1703
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-1704
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed bug in MSSQL reflection where when two same-named tables in different
    schemas had same-named primary key constraints, foreign key constraints referring
    to one of the tables would have their columns doubled, causing errors. Pull request
    courtesy Sean Dunn.
  id: totrans-1705
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了MSSQL反射中的bug，在不同模式中有两个同名表具有同名主键约束时，引用其中一个表的外键约束的列会被加倍，导致错误。感谢Sean Dunn提供的拉取请求。
- en: 'References: [#4288](https://www.sqlalchemy.org/trac/ticket/4288)'
  id: totrans-1706
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4288](https://www.sqlalchemy.org/trac/ticket/4288)
- en: '**[mssql] [bug] [py3k]**'
  id: totrans-1707
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug] [py3k]**'
- en: Fixed issue within the SQL Server dialect under Python 3 where when running
    against a non-standard SQL server database that does not contain either the “sys.dm_exec_sessions”
    or “sys.dm_pdw_nodes_exec_sessions” views, leading to a failure to fetch the isolation
    level, the error raise would fail due to an UnboundLocalError.
  id: totrans-1708
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 Python 3 下 SQL Server 方言中的问题，当针对不包含“sys.dm_exec_sessions”或“sys.dm_pdw_nodes_exec_sessions”视图的非标准
    SQL Server 数据库运行时，导致无法获取隔离级别，由于 UnboundLocalError 导致错误引发失败。
- en: 'References: [#4273](https://www.sqlalchemy.org/trac/ticket/4273)'
  id: totrans-1709
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4273](https://www.sqlalchemy.org/trac/ticket/4273)
- en: oracle
  id: totrans-1710
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [feature]**'
  id: totrans-1711
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [feature]**'
- en: Added a new event currently used only by the cx_Oracle dialect, `DialectEvents.setiputsizes()`.
    The event passes a dictionary of [`BindParameter`](../core/sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") objects to DBAPI-specific type objects
    that will be passed, after conversion to parameter names, to the cx_Oracle `cursor.setinputsizes()`
    method. This allows both visibility into the setinputsizes process as well as
    the ability to alter the behavior of what datatypes are passed to this method.
  id: totrans-1712
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新事件，目前仅由 cx_Oracle 方言使用，`DialectEvents.setiputsizes()`。该事件传递了一个包含 [`BindParameter`](../core/sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") 对象的字典，这些对象将被传递给 DBAPI 特定类型的对象，然后转换为参数名称，传递给
    cx_Oracle `cursor.setinputsizes()` 方法。这既允许查看 setinputsizes 过程，也允许更改传递给此方法的数据类型的行为。
- en: See also
  id: totrans-1713
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Fine grained control over cx_Oracle data binding performance with setinputsizes](../dialects/oracle.html#cx-oracle-setinputsizes)'
  id: totrans-1714
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[使用 setinputsizes 对 cx_Oracle 数据绑定性能进行细粒度控制](../dialects/oracle.html#cx-oracle-setinputsizes)'
- en: 'References: [#4290](https://www.sqlalchemy.org/trac/ticket/4290)'
  id: totrans-1715
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4290](https://www.sqlalchemy.org/trac/ticket/4290)
- en: '**[oracle] [bug] [mysql]**'
  id: totrans-1716
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug] [mysql]**'
- en: Fixed INSERT FROM SELECT with CTEs for the Oracle and MySQL dialects, where
    the CTE was being placed above the entire statement as is typical with other databases,
    however Oracle and MariaDB 10.2 wants the CTE underneath the “INSERT” segment.
    Note that the Oracle and MySQL dialects don’t yet work when a CTE is applied to
    a subquery inside of an UPDATE or DELETE statement, as the CTE is still applied
    to the top rather than inside the subquery.
  id: totrans-1717
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 Oracle 和 MySQL 方言中使用 CTEs 进行 INSERT FROM SELECT 时的问题，其中 CTE 被放置在整个语句之上，这在其他数据库中是典型的，但是
    Oracle 和 MariaDB 10.2 希望 CTE 出现在“INSERT”段的下方。请注意，当将 CTE 应用于 UPDATE 或 DELETE 语句内的子查询时，Oracle
    和 MySQL 方言尚不起作用，因为 CTE 仍然应用于顶部而不是子查询内部。
- en: 'References: [#4275](https://www.sqlalchemy.org/trac/ticket/4275)'
  id: totrans-1718
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4275](https://www.sqlalchemy.org/trac/ticket/4275)
- en: misc
  id: totrans-1719
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[feature] [ext]**'
  id: totrans-1720
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[feature] [ext]**'
- en: Added new attribute [`Query.lazy_loaded_from`](../orm/queryguide/query.html#sqlalchemy.orm.Query.lazy_loaded_from
    "sqlalchemy.orm.Query.lazy_loaded_from") which is populated with an [`InstanceState`](../orm/internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") that is using this [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") in order to lazy load a relationship. The rationale for
    this is that it serves as a hint for the horizontal sharding feature to use, such
    that the identity token of the state can be used as the default identity token
    to use for the query within id_chooser().
  id: totrans-1721
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新属性 [`Query.lazy_loaded_from`](../orm/queryguide/query.html#sqlalchemy.orm.Query.lazy_loaded_from
    "sqlalchemy.orm.Query.lazy_loaded_from")，其中填充了使用此 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 来延迟加载关系的 [`InstanceState`](../orm/internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")。这样做的理由是它作为水平分片功能的提示，以便使用状态的标识令牌作为查询中的默认标识令牌在 id_chooser()
    中使用。
- en: 'References: [#4243](https://www.sqlalchemy.org/trac/ticket/4243)'
  id: totrans-1722
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4243](https://www.sqlalchemy.org/trac/ticket/4243)
- en: '**[bug] [py3k]**'
  id: totrans-1723
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [py3k]**'
- en: Replaced the usage of inspect.formatargspec() with a vendored version copied
    from the Python standard library, as inspect.formatargspec() is deprecated and
    as of Python 3.7.0 is emitting a warning.
  id: totrans-1724
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用从 Python 标准库复制的 vendored 版本替换了 inspect.formatargspec() 的使用，因为 inspect.formatargspec()
    已被弃用，并且从 Python 3.7.0 开始发出警告。
- en: 'References: [#4291](https://www.sqlalchemy.org/trac/ticket/4291)'
  id: totrans-1725
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4291](https://www.sqlalchemy.org/trac/ticket/4291)
- en: orm
  id: totrans-1726
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1727
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where chaining multiple join elements inside of [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") might not correctly adapt to the previous left-hand
    side, when chaining joined inheritance classes that share the same base class.
  id: totrans-1728
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")中链接多个连接元素时可能无法正确适应先前左侧的问题，当链接共享相同基类的继承类时。
- en: 'References: [#3505](https://www.sqlalchemy.org/trac/ticket/3505)'
  id: totrans-1729
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3505](https://www.sqlalchemy.org/trac/ticket/3505)
- en: '**[orm] [bug]**'
  id: totrans-1730
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in cache key generation for baked queries which could cause a too-short
    cache key to be generated for the case of eager loads across subclasses. This
    could in turn cause the eagerload query to be cached in place of a non-eagerload
    query, or vice versa, for a polymorphic “selectin” load, or possibly for lazy
    loads or selectin loads as well.
  id: totrans-1731
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了为烘焙查询生成缓存键时可能导致生成的缓存键过短的问题，对于跨子类的急加载。这可能会导致急加载查询被缓存代替非急加载查询，反之亦然，对于多态“selectin”加载，或者可能对于延迟加载或selectin加载也是如此。
- en: 'References: [#4287](https://www.sqlalchemy.org/trac/ticket/4287)'
  id: totrans-1732
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4287](https://www.sqlalchemy.org/trac/ticket/4287)
- en: '**[orm] [bug]**'
  id: totrans-1733
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in new polymorphic selectin loading where the BakedQuery used internally
    would be mutated by the given loader options, which would both inappropriately
    mutate the subclass query as well as carry over the effect to subsequent queries.
  id: totrans-1734
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新多态selectin加载中的错误，其中内部使用的BakedQuery会被给定的加载器选项改变，这既会不当地改变子类查询，也会将效果传递给后续查询。
- en: 'References: [#4286](https://www.sqlalchemy.org/trac/ticket/4286)'
  id: totrans-1735
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4286](https://www.sqlalchemy.org/trac/ticket/4286)
- en: '**[orm] [bug]**'
  id: totrans-1736
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression caused by [#4256](https://www.sqlalchemy.org/trac/ticket/4256)
    (itself a regression fix for [#4228](https://www.sqlalchemy.org/trac/ticket/4228))
    which breaks an undocumented behavior which converted for a non-sequence of entities
    passed directly to the [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") constructor into a single-element sequence. While this
    behavior was never supported or documented, it’s already in use so has been added
    as a behavioral contract to [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query").
  id: totrans-1737
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由[#4256](https://www.sqlalchemy.org/trac/ticket/4256)引起的回归（本身是对[#4228](https://www.sqlalchemy.org/trac/ticket/4228)的回归修复），它破坏了一个未记录的行为，即将直接传递给[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")构造函数的非实体序列转换为单个元素序列。虽然这种行为从未得到支持或记录，但已经在使用中，因此已被添加为[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")的行为契约。
- en: 'References: [#4269](https://www.sqlalchemy.org/trac/ticket/4269)'
  id: totrans-1738
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4269](https://www.sqlalchemy.org/trac/ticket/4269)
- en: '**[orm] [bug]**'
  id: totrans-1739
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed an issue that was both a performance regression in 1.2 as well as an incorrect
    result regarding the “baked” lazy loader, involving the generation of cache keys
    from the original [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object’s loader options. If the loader options were built
    up in a “branched” style using common base elements for multiple options, the
    same options would be rendered into the cache key repeatedly, causing both a performance
    issue as well as generating the wrong cache key. This is fixed, along with a performance
    improvement when such “branched” options are applied via [`Query.options()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.options
    "sqlalchemy.orm.Query.options") to prevent the same option objects from being
    applied repeatedly.
  id: totrans-1740
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了1.2版本中的性能回归问题以及关于“烘焙”延迟加载器的错误结果，涉及从原始[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象的加载器选项生成缓存键。如果加载器选项是以“分支”样式构建的，使用共同的基本元素为多个选项，那么相同的选项将被重复渲染到缓存键中，导致性能问题以及生成错误的缓存键。通过[`Query.options()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.options
    "sqlalchemy.orm.Query.options")应用这种“分支”选项时，已修复此问题，并防止重复应用相同的选项对象以提高性能。
- en: 'References: [#4270](https://www.sqlalchemy.org/trac/ticket/4270)'
  id: totrans-1741
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4270](https://www.sqlalchemy.org/trac/ticket/4270)
- en: sql
  id: totrans-1742
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1743
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed regression in 1.2 due to [#4147](https://www.sqlalchemy.org/trac/ticket/4147)
    where a [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    that has had some of its indexed columns redefined with new ones, as would occur
    when overriding columns during reflection or when using [`Table.extend_existing`](../core/metadata.html#sqlalchemy.schema.Table.params.extend_existing
    "sqlalchemy.schema.Table"), such that the [`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata") method would fail when attempting to copy
    those indexes as they still referred to the replaced column. The copy logic now
    accommodates for this condition.
  id: totrans-1744
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 1.2 版本中的回归问题，由于 [#4147](https://www.sqlalchemy.org/trac/ticket/4147) 导致一个
    [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    的一些索引列被重新定义为新列，这种情况会在反射期间覆盖列或使用 [`Table.extend_existing`](../core/metadata.html#sqlalchemy.schema.Table.params.extend_existing
    "sqlalchemy.schema.Table") 时发生，因此当尝试复制这些索引时，[`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata") 方法会失败，因为它们仍然指向被替换的列。现在的复制逻辑已经适应了这种情况。
- en: 'References: [#4279](https://www.sqlalchemy.org/trac/ticket/4279)'
  id: totrans-1745
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4279](https://www.sqlalchemy.org/trac/ticket/4279)
- en: mysql
  id: totrans-1746
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-1747
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed percent-sign doubling in mysql-connector-python dialect, which does not
    require de-doubling of percent signs. Additionally, the mysql- connector-python
    driver is inconsistent in how it passes the column names in cursor.description,
    so a workaround decoder has been added to conditionally decode these randomly-sometimes-bytes
    values to unicode only if needed. Also improved test support for mysql-connector-python,
    however it should be noted that this driver still has issues with unicode that
    continue to be unresolved as of yet.
  id: totrans-1748
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 mysql-connector-python 方言中百分号双倍的问题，该方言不需要去除百分号的双倍。此外，mysql-connector-python
    驱动程序在传递列名时不一致，因此添加了一个解码器来有条件地将这些随机-有时是字节的值解码为 unicode，仅在需要时。还改进了对 mysql-connector-python
    的测试支持，但应注意该驱动程序仍存在与 unicode 相关的问题，目前尚未解决。
- en: '**[mysql] [bug]**'
  id: totrans-1749
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed bug in index reflection where on MySQL 8.0 an index that includes ASC
    or DESC in an indexed column specification would not be correctly reflected, as
    MySQL 8.0 introduces support for returning this information in a table definition
    string.
  id: totrans-1750
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 MySQL 8.0 中索引反射中的一个 bug，其中在索引列规范中包含 ASC 或 DESC 的索引不会被正确反映，因为 MySQL 8.0
    引入了在表定义字符串中返回此信息的支持。
- en: 'References: [#4293](https://www.sqlalchemy.org/trac/ticket/4293)'
  id: totrans-1751
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4293](https://www.sqlalchemy.org/trac/ticket/4293)
- en: '**[mysql] [bug]**'
  id: totrans-1752
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed bug in MySQLdb dialect and variants such as PyMySQL where an additional
    “unicode returns” check upon connection makes explicit use of the “utf8” character
    set, which in MySQL 8.0 emits a warning that utf8mb4 should be used. This is now
    replaced with a utf8mb4 equivalent. Documentation is also updated for the MySQL
    dialect to specify utf8mb4 in all examples. Additional changes have been made
    to the test suite to use utf8mb3 charsets and databases (there seem to be collation
    issues in some edge cases with utf8mb4), and to support configuration default
    changes made in MySQL 8.0 such as explicit_defaults_for_timestamp as well as new
    errors raised for invalid MyISAM indexes.
  id: totrans-1753
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 MySQLdb 方言和 PyMySQL 等变体中的一个 bug，在连接时对“unicode 返回”进行额外检查时，显式使用“utf8”字符集，而在
    MySQL 8.0 中会发出警告，建议使用 utf8mb4。现在已经用 utf8mb4 等效替换。还更新了 MySQL 方言的文档，以在所有示例中指定 utf8mb4。对测试套件进行了额外更改，以使用
    utf8mb3 字符集和数据库（在某些边缘情况下 utf8mb4 存在排序问题），并支持 MySQL 8.0 中进行的配置默认更改，如 explicit_defaults_for_timestamp
    以及对无效 MyISAM 索引引发的新错误。
- en: 'References: [#4283](https://www.sqlalchemy.org/trac/ticket/4283)'
  id: totrans-1754
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4283](https://www.sqlalchemy.org/trac/ticket/4283)
- en: '**[mysql] [bug]**'
  id: totrans-1755
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: The [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    construct now accommodates a [`Join`](../core/selectable.html#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") object as supported by MySQL for UPDATE..FROM.
    As the construct already accepted an alias object for a similar purpose, the feature
    of UPDATE against a non-table was already implied so this has been added.
  id: totrans-1756
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Update`](../core/dml.html#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    构造现在支持将 [`Join`](../core/selectable.html#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    对象作为 MySQL 中 UPDATE..FROM 支持的对象。由于该构造已经接受了一个别名对象用于类似的目的，因此已经暗示了针对非表的 UPDATE 功能，因此这一功能已经被添加。'
- en: 'References: [#3645](https://www.sqlalchemy.org/trac/ticket/3645)'
  id: totrans-1757
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3645](https://www.sqlalchemy.org/trac/ticket/3645)
- en: sqlite
  id: totrans-1758
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-1759
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Fixed issue in test suite where SQLite 3.24 added a new reserved word that conflicted
    with a usage in TypeReflectionTest. Pull request courtesy Nils Philippsen.
  id: totrans-1760
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了测试套件中的问题，SQLite 3.24 添加了一个新的保留字与 TypeReflectionTest 中的用法冲突。感谢 Nils Philippsen
    的拉取请求。
- en: mssql
  id: totrans-1761
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-1762
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed bug in MSSQL reflection where when two same-named tables in different
    schemas had same-named primary key constraints, foreign key constraints referring
    to one of the tables would have their columns doubled, causing errors. Pull request
    courtesy Sean Dunn.
  id: totrans-1763
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 MSSQL 反射中的错误，当不同模式中有两个同名表具有相同名字的主键约束时，引用其中一个表的外键约束的列会加倍，导致错误。感谢 Sean Dunn
    的拉取请求。
- en: 'References: [#4288](https://www.sqlalchemy.org/trac/ticket/4288)'
  id: totrans-1764
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4288](https://www.sqlalchemy.org/trac/ticket/4288)
- en: '**[mssql] [bug] [py3k]**'
  id: totrans-1765
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug] [py3k]**'
- en: Fixed issue within the SQL Server dialect under Python 3 where when running
    against a non-standard SQL server database that does not contain either the “sys.dm_exec_sessions”
    or “sys.dm_pdw_nodes_exec_sessions” views, leading to a failure to fetch the isolation
    level, the error raise would fail due to an UnboundLocalError.
  id: totrans-1766
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 Python 3 下的 SQL Server 方言中的问题，在运行针对不包含“sys.dm_exec_sessions”或“sys.dm_pdw_nodes_exec_sessions”视图的非标准
    SQL Server 数据库时，导致无法获取隔离级别，由于 UnboundLocalError 导致错误提出失败。
- en: 'References: [#4273](https://www.sqlalchemy.org/trac/ticket/4273)'
  id: totrans-1767
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4273](https://www.sqlalchemy.org/trac/ticket/4273)
- en: oracle
  id: totrans-1768
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [feature]**'
  id: totrans-1769
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [feature]**'
- en: Added a new event currently used only by the cx_Oracle dialect, `DialectEvents.setiputsizes()`.
    The event passes a dictionary of [`BindParameter`](../core/sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") objects to DBAPI-specific type objects
    that will be passed, after conversion to parameter names, to the cx_Oracle `cursor.setinputsizes()`
    method. This allows both visibility into the setinputsizes process as well as
    the ability to alter the behavior of what datatypes are passed to this method.
  id: totrans-1770
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的事件，目前仅由 cx_Oracle 方言使用，`DialectEvents.setiputsizes()`。该事件传递了一个 [`BindParameter`](../core/sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") 对象字典给将要传递给 cx_Oracle `cursor.setinputsizes()`
    方法的 DBAPI 特定类型对象。这允许查看 setinputsizes 过程并能够改变传递给此方法的数据类型的行为。
- en: See also
  id: totrans-1771
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另见
- en: '[Fine grained control over cx_Oracle data binding performance with setinputsizes](../dialects/oracle.html#cx-oracle-setinputsizes)'
  id: totrans-1772
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[通过 setinputsizes 实现对 cx_Oracle 数据绑定性能的细粒度控制](../dialects/oracle.html#cx-oracle-setinputsizes)'
- en: 'References: [#4290](https://www.sqlalchemy.org/trac/ticket/4290)'
  id: totrans-1773
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4290](https://www.sqlalchemy.org/trac/ticket/4290)
- en: '**[oracle] [bug] [mysql]**'
  id: totrans-1774
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug] [mysql]**'
- en: Fixed INSERT FROM SELECT with CTEs for the Oracle and MySQL dialects, where
    the CTE was being placed above the entire statement as is typical with other databases,
    however Oracle and MariaDB 10.2 wants the CTE underneath the “INSERT” segment.
    Note that the Oracle and MySQL dialects don’t yet work when a CTE is applied to
    a subquery inside of an UPDATE or DELETE statement, as the CTE is still applied
    to the top rather than inside the subquery.
  id: totrans-1775
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 Oracle 和 MySQL 方言中使用 CTE 进行 INSERT FROM SELECT 时的问题，其中 CTE 被放置在整个语句上方，与其他数据库一样，但是
    Oracle 和 MariaDB 10.2 要求 CTE 放在“INSERT”段下方。请注意，当将 CTE 应用于 UPDATE 或 DELETE 语句内部的子查询时，Oracle
    和 MySQL 方言尚不起作用，因为 CTE 仍然应用于顶部而不是内部子查询。
- en: 'References: [#4275](https://www.sqlalchemy.org/trac/ticket/4275)'
  id: totrans-1776
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4275](https://www.sqlalchemy.org/trac/ticket/4275)
- en: misc
  id: totrans-1777
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[feature] [ext]**'
  id: totrans-1778
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[feature] [ext]**'
- en: Added new attribute [`Query.lazy_loaded_from`](../orm/queryguide/query.html#sqlalchemy.orm.Query.lazy_loaded_from
    "sqlalchemy.orm.Query.lazy_loaded_from") which is populated with an [`InstanceState`](../orm/internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") that is using this [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") in order to lazy load a relationship. The rationale for
    this is that it serves as a hint for the horizontal sharding feature to use, such
    that the identity token of the state can be used as the default identity token
    to use for the query within id_chooser().
  id: totrans-1779
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新属性 [`Query.lazy_loaded_from`](../orm/queryguide/query.html#sqlalchemy.orm.Query.lazy_loaded_from
    "sqlalchemy.orm.Query.lazy_loaded_from") ，其中填充了一个使用此 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 来延迟加载关系的 [`InstanceState`](../orm/internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")。这样做的理由是它作为水平分片功能的提示，以便可以使用状态的标识令牌作为查询中要使用的默认标识令牌。
- en: 'References: [#4243](https://www.sqlalchemy.org/trac/ticket/4243)'
  id: totrans-1780
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4243](https://www.sqlalchemy.org/trac/ticket/4243)
- en: '**[bug] [py3k]**'
  id: totrans-1781
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [py3k]**'
- en: Replaced the usage of inspect.formatargspec() with a vendored version copied
    from the Python standard library, as inspect.formatargspec() is deprecated and
    as of Python 3.7.0 is emitting a warning.
  id: totrans-1782
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用从Python标准库复制的vendored版本替换了inspect.formatargspec()的使用，因为inspect.formatargspec()已被弃用，并且从Python
    3.7.0开始发出警告。
- en: 'References: [#4291](https://www.sqlalchemy.org/trac/ticket/4291)'
  id: totrans-1783
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4291](https://www.sqlalchemy.org/trac/ticket/4291)
- en: 1.2.8
  id: totrans-1784
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.2.8
- en: 'Released: May 28, 2018'
  id: totrans-1785
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2018年5月28日
- en: orm
  id: totrans-1786
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1787
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression in 1.2.7 caused by [#4228](https://www.sqlalchemy.org/trac/ticket/4228),
    which itself was fixing a 1.2-level regression, where the `query_cls` callable
    passed to a [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    was assumed to be a subclass of [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") with class method availability, as opposed to an arbitrary
    callable. In particular, the dogpile caching example illustrates `query_cls` as
    a function and not a [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") subclass.
  id: totrans-1788
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了1.2.7中由[#4228](https://www.sqlalchemy.org/trac/ticket/4228)引起的回归，该回归本身修复了一个1.2级别的回归，其中传递给[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")的`query_cls`可调用被假定为具有类方法可用性的[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")子类，而不是任意可调用对象。特别是，dogpile缓存示例说明了`query_cls`是一个函数而不是[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")子类。
- en: 'References: [#4256](https://www.sqlalchemy.org/trac/ticket/4256)'
  id: totrans-1789
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4256](https://www.sqlalchemy.org/trac/ticket/4256)
- en: '**[orm] [bug]**'
  id: totrans-1790
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a long-standing regression that occurred in version 1.0, which prevented
    the use of a custom `MapperOption` that alters the _params of a [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object for a lazy load, since the lazy loader itself would
    overwrite those parameters. This applies to the “temporal range” example on the
    wiki. Note however that the [`Query.populate_existing()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing") method is now required in order to rewrite
    the mapper options associated with an object already loaded in the identity map.
  id: totrans-1791
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了1.0版本中长期存在的回归，该回归阻止了使用自定义`MapperOption`来修改[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象的_params以进行延迟加载，因为延迟加载器本身会覆盖这些参数。这适用于维基上的“时间范围”示例。但请注意，现在需要使用[`Query.populate_existing()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing")方法来重写与已加载到标识映射中的对象相关联的映射器选项。
- en: As part of this change, a custom defined `MapperOption` will now cause lazy
    loaders related to the target object to use a non-baked query by default unless
    the `MapperOption._generate_cache_key()` method is implemented. In particular,
    this repairs one regression which occurred when using the dogpile.cache “advanced”
    example, which was not returning cached results and instead emitting SQL due to
    an incompatibility with the baked query loader; with the change, the `RelationshipCache`
    option included for many releases in the dogpile example will disable the “baked”
    query altogether. Note that the dogpile example is also modernized to avoid both
    of these issues as part of issue [#4258](https://www.sqlalchemy.org/trac/ticket/4258).
  id: totrans-1792
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为这一变更的一部分，现在自定义定义的`MapperOption`将导致与目标对象相关的延迟加载器默认使用非烘焙查询，除非实现了`MapperOption._generate_cache_key()`方法。特别是，修复了一个回归，该回归发生在使用dogpile.cache“高级”示例时，该示例由于与烘焙查询加载器不兼容而未返回缓存结果，而是发出SQL；通过这一变更，dogpile示例中包含的多个版本的`RelationshipCache`选项将完全禁用“烘焙”查询。请注意，dogpile示例也经过现代化处理，以避免这两个问题，作为问题[#4258](https://www.sqlalchemy.org/trac/ticket/4258)的一部分。
- en: 'References: [#4128](https://www.sqlalchemy.org/trac/ticket/4128)'
  id: totrans-1793
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4128](https://www.sqlalchemy.org/trac/ticket/4128)
- en: '**[orm] [bug]**'
  id: totrans-1794
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where the new `Result.with_post_criteria()` method would not interact
    with a subquery-eager loader correctly, in that the “post criteria” would not
    be applied to embedded subquery eager loaders. This is related to [#4128](https://www.sqlalchemy.org/trac/ticket/4128)
    in that the post criteria feature is now used by the lazy loader.
  id: totrans-1795
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新的`Result.with_post_criteria()`方法与子查询急加载器交互不正确的bug，即“后置条件”不会应用于嵌入式子查询急加载器。这与[#4128](https://www.sqlalchemy.org/trac/ticket/4128)有关，因为后置条件功能现在被延迟加载器使用。
- en: '**[orm] [bug]**'
  id: totrans-1796
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Updated the dogpile.caching example to include new structures that accommodate
    for the “baked” query system, which is used by default within lazy loaders and
    some eager relationship loaders. The dogpile.caching “relationship_caching” and
    “advanced” examples were also broken due to [#4256](https://www.sqlalchemy.org/trac/ticket/4256).
    The issue here is also worked-around by the fix in [#4128](https://www.sqlalchemy.org/trac/ticket/4128).
  id: totrans-1797
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新了 dogpile.caching 示例，包括适应 “baked” 查询系统的新结构，该系统默认在延迟加载器和一些急切关系加载器中使用。由于 [#4256](https://www.sqlalchemy.org/trac/ticket/4256)，dogpile.caching
    的 “relationship_caching” 和 “advanced” 示例也被破坏。这里的问题也通过 [#4128](https://www.sqlalchemy.org/trac/ticket/4128)
    中的修复解决了。
- en: 'References: [#4258](https://www.sqlalchemy.org/trac/ticket/4258)'
  id: totrans-1798
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#4258](https://www.sqlalchemy.org/trac/ticket/4258)
- en: engine
  id: totrans-1799
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-1800
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed connection pool issue whereby if a disconnection error were raised during
    the connection pool’s “reset on return” sequence in conjunction with an explicit
    transaction opened against the enclosing [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object (such as from calling [`Session.close()`](../orm/session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") without a rollback or commit, or calling [`Connection.close()`](../core/connections.html#sqlalchemy.engine.Connection.close
    "sqlalchemy.engine.Connection.close") without first closing a transaction declared
    with [`Connection.begin()`](../core/connections.html#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin")), a double-checkin would result, which could
    then lead towards concurrent checkouts of the same connection. The double-checkin
    condition is now prevented overall by an assertion, as well as the specific double-checkin
    scenario has been fixed.
  id: totrans-1801
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了连接池问题，即如果在连接池的 “返回时重置” 序列期间引发了断开连接错误，并且针对外部 [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 对象打开了显式事务（例如从调用 [`Session.close()`](../orm/session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") 而不是回滚或提交，或者在调用 [`Connection.close()`](../core/connections.html#sqlalchemy.engine.Connection.close
    "sqlalchemy.engine.Connection.close") 之前没有关闭使用 [`Connection.begin()`](../core/connections.html#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") 声明的事务），将导致二次签入，这可能会导致同一连接的并发签出。现在通过断言来防止整体的二次签入条件，以及特定的二次签入场景已被修复。
- en: 'References: [#4252](https://www.sqlalchemy.org/trac/ticket/4252)'
  id: totrans-1802
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#4252](https://www.sqlalchemy.org/trac/ticket/4252)
- en: '**[engine] [bug]**'
  id: totrans-1803
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed a reference leak issue where the values of the parameter dictionary used
    in a statement execution would remain referenced by the “compiled cache”, as a
    result of storing the key view used by Python 3 dictionary keys(). Pull request
    courtesy Olivier Grisel.
  id: totrans-1804
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个引用泄漏问题，其中在语句执行中使用的参数字典的值将继续被 “编译缓存” 引用，因为存储了 Python 3 字典 keys() 使用的键视图。感谢
    Olivier Grisel 提交的拉取请求。
- en: sql
  id: totrans-1805
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1806
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where the “ambiguous literal” error message used when interpreting
    literal values as SQL expression values would encounter a tuple value, and fail
    to format the message properly. Pull request courtesy Miguel Ventura.
  id: totrans-1807
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在将文本值解释为 SQL 表达式值时遇到元组值并且无法正确格式化消息的“模糊文本”错误消息问题。感谢 Miguel Ventura 提交的拉取请求。
- en: mssql
  id: totrans-1808
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-1809
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed a 1.2 regression caused by [#4061](https://www.sqlalchemy.org/trac/ticket/4061)
    where the SQL Server “BIT” type would be considered to be “native boolean”. The
    goal here was to avoid creating a CHECK constraint on the column, however the
    bigger issue is that the BIT value does not behave like a true/false constant
    and cannot be interpreted as a standalone expression, e.g. “WHERE <column>”. The
    SQL Server dialect now goes back to being non-native boolean, but with an extra
    flag that still avoids creating the CHECK constraint.
  id: totrans-1810
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由 [#4061](https://www.sqlalchemy.org/trac/ticket/4061) 引起的 1.2 版本回归，其中 SQL
    Server 的 “BIT” 类型将被视为 “本机布尔” 的问题。这里的目标是避免在列上创建 CHECK 约束，然而更大的问题是 BIT 值不像一个真/假常量那样工作，不能被解释为一个独立的表达式，例如
    “WHERE <column>”。SQL Server 方言现在回到了非本机布尔，但增加了一个额外的标志，仍然避免创建 CHECK 约束。
- en: 'References: [#4250](https://www.sqlalchemy.org/trac/ticket/4250)'
  id: totrans-1811
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#4250](https://www.sqlalchemy.org/trac/ticket/4250)
- en: oracle
  id: totrans-1812
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-1813
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: The Oracle BINARY_FLOAT and BINARY_DOUBLE datatypes now participate within cx_Oracle.setinputsizes(),
    passing along NATIVE_FLOAT, so as to support the NaN value. Additionally, [`BINARY_FLOAT`](../dialects/oracle.html#sqlalchemy.dialects.oracle.BINARY_FLOAT
    "sqlalchemy.dialects.oracle.BINARY_FLOAT"), [`BINARY_DOUBLE`](../dialects/oracle.html#sqlalchemy.dialects.oracle.BINARY_DOUBLE
    "sqlalchemy.dialects.oracle.BINARY_DOUBLE") and `DOUBLE_PRECISION` now subclass
    [`Float`](../core/type_basics.html#sqlalchemy.types.Float "sqlalchemy.types.Float"),
    since these are floating point datatypes, not decimal. These datatypes were already
    defaulting the [`Float.asdecimal`](../core/type_basics.html#sqlalchemy.types.Float.params.asdecimal
    "sqlalchemy.types.Float") flag to False in line with what [`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float") already does.
  id: totrans-1814
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Oracle 的 BINARY_FLOAT 和 BINARY_DOUBLE 数据类型现在参与 cx_Oracle.setinputsizes()，传递
    NATIVE_FLOAT，以支持 NaN 值。此外，[`BINARY_FLOAT`](../dialects/oracle.html#sqlalchemy.dialects.oracle.BINARY_FLOAT
    "sqlalchemy.dialects.oracle.BINARY_FLOAT")、[`BINARY_DOUBLE`](../dialects/oracle.html#sqlalchemy.dialects.oracle.BINARY_DOUBLE
    "sqlalchemy.dialects.oracle.BINARY_DOUBLE") 和 `DOUBLE_PRECISION` 现在都是 [`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float") 的子类，因为这些是浮点数据类型，而不是十进制。这些数据类型已经将 [`Float.asdecimal`](../core/type_basics.html#sqlalchemy.types.Float.params.asdecimal
    "sqlalchemy.types.Float") 标志默认设置为 False，与 [`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float") 的行为一致。
- en: 'References: [#4264](https://www.sqlalchemy.org/trac/ticket/4264)'
  id: totrans-1815
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4264](https://www.sqlalchemy.org/trac/ticket/4264)
- en: '**[oracle] [bug]**'
  id: totrans-1816
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Added reflection capabilities for the [`BINARY_FLOAT`](../dialects/oracle.html#sqlalchemy.dialects.oracle.BINARY_FLOAT
    "sqlalchemy.dialects.oracle.BINARY_FLOAT"), [`BINARY_DOUBLE`](../dialects/oracle.html#sqlalchemy.dialects.oracle.BINARY_DOUBLE
    "sqlalchemy.dialects.oracle.BINARY_DOUBLE") datatypes.
  id: totrans-1817
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 [`BINARY_FLOAT`](../dialects/oracle.html#sqlalchemy.dialects.oracle.BINARY_FLOAT
    "sqlalchemy.dialects.oracle.BINARY_FLOAT")、[`BINARY_DOUBLE`](../dialects/oracle.html#sqlalchemy.dialects.oracle.BINARY_DOUBLE
    "sqlalchemy.dialects.oracle.BINARY_DOUBLE") 数据类型添加了反��功能。
- en: '**[oracle] [bug]**'
  id: totrans-1818
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Altered the Oracle dialect such that when an [`Integer`](../core/type_basics.html#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer") type is in use, the cx_Oracle.NUMERIC type is set
    up for setinputsizes(). In SQLAlchemy 1.1 and earlier, cx_Oracle.NUMERIC was passed
    for all numeric types unconditionally, and in 1.2 this was removed to allow for
    better numeric precision. However, for integers, some database/client setups will
    fail to coerce boolean values True/False into integers which introduces regressive
    behavior when using SQLAlchemy 1.2\. Overall, the setinputsizes logic seems like
    it will need a lot more flexibility going forward so this is a start for that.
  id: totrans-1819
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了 Oracle 方言，当使用 [`Integer`](../core/type_basics.html#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer") 类型时，设置 cx_Oracle.NUMERIC 类型用于 setinputsizes()。在 SQLAlchemy
    1.1 及更早版本中，cx_Oracle.NUMERIC 无条件地传递给所有数值类型，而在 1.2 中，为了获得更好的数值精度，这一点被移除。然而，对于整数，一些数据库/客户端设置将无法将布尔值
    True/False 强制转换为整数，这在使用 SQLAlchemy 1.2 时引入了退化行为。总体而言，setinputsizes 逻辑似乎需要更多的灵活性，因此这是一个开始。
- en: 'References: [#4259](https://www.sqlalchemy.org/trac/ticket/4259)'
  id: totrans-1820
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4259](https://www.sqlalchemy.org/trac/ticket/4259)
- en: tests
  id: totrans-1821
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [bug]**'
  id: totrans-1822
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[tests] [bug]**'
- en: Fixed a bug in the test suite where if an external dialect returned `None` for
    `server_version_info`, the exclusion logic would raise an `AttributeError`.
  id: totrans-1823
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了测试套件中的一个 bug，如果外部方言对 `server_version_info` 返回 `None`，排除逻辑会引发 `AttributeError`。
- en: 'References: [#4249](https://www.sqlalchemy.org/trac/ticket/4249)'
  id: totrans-1824
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4249](https://www.sqlalchemy.org/trac/ticket/4249)
- en: misc
  id: totrans-1825
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [ext]**'
  id: totrans-1826
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: The horizontal sharding extension now makes use of the identity token added
    to ORM identity keys as part of [#4137](https://www.sqlalchemy.org/trac/ticket/4137),
    when an object refresh or column-based deferred load or unexpiration operation
    occurs. Since we know the “shard” that the object originated from, we make use
    of this value when refreshing, thereby avoiding queries against other shards that
    don’t match this object’s identity in any case.
  id: totrans-1827
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 水平分片扩展现在利用了作为 [#4137](https://www.sqlalchemy.org/trac/ticket/4137) 的一部分添加到 ORM
    身份键中的标识令牌，当对象刷新或基于列的延迟加载或取消过期操作发生时。由于我们知道对象的“分片”来自哪里，因此在刷新时利用这个值，从而避免针对与此对象身份不匹配的其他分片进行查询。
- en: 'References: [#4247](https://www.sqlalchemy.org/trac/ticket/4247)'
  id: totrans-1828
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4247](https://www.sqlalchemy.org/trac/ticket/4247)
- en: '**[bug] [ext]**'
  id: totrans-1829
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed a race condition which could occur if automap [`AutomapBase.prepare()`](../orm/extensions/automap.html#sqlalchemy.ext.automap.AutomapBase.prepare
    "sqlalchemy.ext.automap.AutomapBase.prepare") were used within a multi-threaded
    context against other threads which may call [`configure_mappers()`](../orm/mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") as a result of use of other mappers. The unfinished
    mapping work of automap is particularly sensitive to being pulled in by a [`configure_mappers()`](../orm/mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") step leading to errors.
  id: totrans-1830
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一种竞争条件，该条件可能会在多线程环境中使用automap [`AutomapBase.prepare()`](../orm/extensions/automap.html#sqlalchemy.ext.automap.AutomapBase.prepare
    "sqlalchemy.ext.automap.AutomapBase.prepare")与可能调用[`configure_mappers()`](../orm/mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers")的其他线程相互作用时发生，因为使用其他映射器会导致未完成的automap映射工作被[`configure_mappers()`](../orm/mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers")步骤拉入，从而导致错误。
- en: 'References: [#4266](https://www.sqlalchemy.org/trac/ticket/4266)'
  id: totrans-1831
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4266](https://www.sqlalchemy.org/trac/ticket/4266)
- en: orm
  id: totrans-1832
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1833
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression in 1.2.7 caused by [#4228](https://www.sqlalchemy.org/trac/ticket/4228),
    which itself was fixing a 1.2-level regression, where the `query_cls` callable
    passed to a [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    was assumed to be a subclass of [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") with class method availability, as opposed to an arbitrary
    callable. In particular, the dogpile caching example illustrates `query_cls` as
    a function and not a [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") subclass.
  id: totrans-1834
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了1.2.7版本中由[#4228](https://www.sqlalchemy.org/trac/ticket/4228)引起的回归问题，该问题本身修复了一个1.2级别的回归问题，即假定传递给[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")的`query_cls`可调用对象是[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")的子类，并具有类方法可用性，而不是任意可调用对象。特别是，dogpile缓存示例说明了`query_cls`是一个函数而不是[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")的子类。
- en: 'References: [#4256](https://www.sqlalchemy.org/trac/ticket/4256)'
  id: totrans-1835
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4256](https://www.sqlalchemy.org/trac/ticket/4256)
- en: '**[orm] [bug]**'
  id: totrans-1836
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a long-standing regression that occurred in version 1.0, which prevented
    the use of a custom `MapperOption` that alters the _params of a [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object for a lazy load, since the lazy loader itself would
    overwrite those parameters. This applies to the “temporal range” example on the
    wiki. Note however that the [`Query.populate_existing()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing") method is now required in order to rewrite
    the mapper options associated with an object already loaded in the identity map.
  id: totrans-1837
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了1.0版本中长期存在的回归问题，该问题阻止了自定义`MapperOption`用于更改[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象的_params以进行延迟加载，因为延迟加载器本身会覆盖这些参数。这适用于维基上的“时间范围”示例。但请注意，现在需要使用[`Query.populate_existing()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing")方法来重写与已加载到标识映射中的对象相关联的映射器选项。
- en: As part of this change, a custom defined `MapperOption` will now cause lazy
    loaders related to the target object to use a non-baked query by default unless
    the `MapperOption._generate_cache_key()` method is implemented. In particular,
    this repairs one regression which occurred when using the dogpile.cache “advanced”
    example, which was not returning cached results and instead emitting SQL due to
    an incompatibility with the baked query loader; with the change, the `RelationshipCache`
    option included for many releases in the dogpile example will disable the “baked”
    query altogether. Note that the dogpile example is also modernized to avoid both
    of these issues as part of issue [#4258](https://www.sqlalchemy.org/trac/ticket/4258).
  id: totrans-1838
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为这一变更的一部分，现在自定义定义的`MapperOption`将导致与目标对象相关的延迟加载器默认使用非烘焙查询，除非实现了`MapperOption._generate_cache_key()`方法。特别是，这修复了一个回归问题，即在使用dogpile.cache的“高级”示例时发生的问题，该问题未返回缓存结果，而是由于与烘焙查询加载器不兼容而发出SQL；通过更改，dogpile示例中包含的`RelationshipCache`选项将完全禁用“烘焙”查询。请注意，作为问题[#4258](https://www.sqlalchemy.org/trac/ticket/4258)的一部分，dogpile示例也现代化以避免这两个问题。
- en: 'References: [#4128](https://www.sqlalchemy.org/trac/ticket/4128)'
  id: totrans-1839
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4128](https://www.sqlalchemy.org/trac/ticket/4128)
- en: '**[orm] [bug]**'
  id: totrans-1840
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where the new `Result.with_post_criteria()` method would not interact
    with a subquery-eager loader correctly, in that the “post criteria” would not
    be applied to embedded subquery eager loaders. This is related to [#4128](https://www.sqlalchemy.org/trac/ticket/4128)
    in that the post criteria feature is now used by the lazy loader.
  id: totrans-1841
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新的`Result.with_post_criteria()`方法与子查询急加载器的交互不正确的错误，即“后置条件”不会应用于嵌入式子查询急加载器。这与[#4128](https://www.sqlalchemy.org/trac/ticket/4128)有关，因为现在懒加载器使用了后置条件功能。
- en: '**[orm] [bug]**'
  id: totrans-1842
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Updated the dogpile.caching example to include new structures that accommodate
    for the “baked” query system, which is used by default within lazy loaders and
    some eager relationship loaders. The dogpile.caching “relationship_caching” and
    “advanced” examples were also broken due to [#4256](https://www.sqlalchemy.org/trac/ticket/4256).
    The issue here is also worked-around by the fix in [#4128](https://www.sqlalchemy.org/trac/ticket/4128).
  id: totrans-1843
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新了dogpile.caching示例，包括适用于“baked”查询系统的新结构，默认情况下在懒加载器和一些急加载关系加载器中使用。dogpile.caching的“relationship_caching”和“advanced”示例也由于[#4256](https://www.sqlalchemy.org/trac/ticket/4256)而中断。这里的问题也通过[#4128](https://www.sqlalchemy.org/trac/ticket/4128)中的修复来解决。
- en: 'References: [#4258](https://www.sqlalchemy.org/trac/ticket/4258)'
  id: totrans-1844
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4258](https://www.sqlalchemy.org/trac/ticket/4258)
- en: engine
  id: totrans-1845
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-1846
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed connection pool issue whereby if a disconnection error were raised during
    the connection pool’s “reset on return” sequence in conjunction with an explicit
    transaction opened against the enclosing [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object (such as from calling [`Session.close()`](../orm/session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") without a rollback or commit, or calling [`Connection.close()`](../core/connections.html#sqlalchemy.engine.Connection.close
    "sqlalchemy.engine.Connection.close") without first closing a transaction declared
    with [`Connection.begin()`](../core/connections.html#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin")), a double-checkin would result, which could
    then lead towards concurrent checkouts of the same connection. The double-checkin
    condition is now prevented overall by an assertion, as well as the specific double-checkin
    scenario has been fixed.
  id: totrans-1847
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了连接池问题，即如果在连接池的“重置返回时”序列中引发了断开连接错误，并且同时针对封闭的[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象打开了显式事务（例如从调用[`Session.close()`](../orm/session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close")而没有回滚或提交，或者在调用[`Connection.close()`](../core/connections.html#sqlalchemy.engine.Connection.close
    "sqlalchemy.engine.Connection.close")之前没有关闭使用[`Connection.begin()`](../core/connections.html#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin")声明的事务），将导致双重签入，然后可能导致对同一连接的并发签出。通过断言来防止整体双重签入条件，以及特定的双重签入场景已得到修复。
- en: 'References: [#4252](https://www.sqlalchemy.org/trac/ticket/4252)'
  id: totrans-1848
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4252](https://www.sqlalchemy.org/trac/ticket/4252)
- en: '**[engine] [bug]**'
  id: totrans-1849
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed a reference leak issue where the values of the parameter dictionary used
    in a statement execution would remain referenced by the “compiled cache”, as a
    result of storing the key view used by Python 3 dictionary keys(). Pull request
    courtesy Olivier Grisel.
  id: totrans-1850
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了引用泄漏问题，即在语句执行中使用的参数字典的值将继续被“编译缓存”引用，因为存储了Python 3字典keys()使用的键视图。感谢Olivier
    Grisel的拉取请求。
- en: sql
  id: totrans-1851
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1852
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where the “ambiguous literal” error message used when interpreting
    literal values as SQL expression values would encounter a tuple value, and fail
    to format the message properly. Pull request courtesy Miguel Ventura.
  id: totrans-1853
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在将文字值解释为SQL表达式值时遇到元组值时使用的“模棱两可的文字”错误消息，并未正确格式化消息的问题。感谢Miguel Ventura的拉取请求。
- en: mssql
  id: totrans-1854
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-1855
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed a 1.2 regression caused by [#4061](https://www.sqlalchemy.org/trac/ticket/4061)
    where the SQL Server “BIT” type would be considered to be “native boolean”. The
    goal here was to avoid creating a CHECK constraint on the column, however the
    bigger issue is that the BIT value does not behave like a true/false constant
    and cannot be interpreted as a standalone expression, e.g. “WHERE <column>”. The
    SQL Server dialect now goes back to being non-native boolean, but with an extra
    flag that still avoids creating the CHECK constraint.
  id: totrans-1856
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由[#4061](https://www.sqlalchemy.org/trac/ticket/4061)引起的1.2版本回归问题，其中SQL Server的“BIT”类型被认为是“本地布尔”。这里的目标是避免在列上创建CHECK约束，但更大的问题是BIT值不像真/假常量那样行为，并且不能被解释为独立表达式，例如“WHERE
    <column>”。SQL Server方言现在回到了非本地布尔，但增加了一个额外的标志，仍然避免创建CHECK约束。
- en: 'References: [#4250](https://www.sqlalchemy.org/trac/ticket/4250)'
  id: totrans-1857
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4250](https://www.sqlalchemy.org/trac/ticket/4250)
- en: oracle
  id: totrans-1858
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Oracle
- en: '**[oracle] [bug]**'
  id: totrans-1859
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: The Oracle BINARY_FLOAT and BINARY_DOUBLE datatypes now participate within cx_Oracle.setinputsizes(),
    passing along NATIVE_FLOAT, so as to support the NaN value. Additionally, [`BINARY_FLOAT`](../dialects/oracle.html#sqlalchemy.dialects.oracle.BINARY_FLOAT
    "sqlalchemy.dialects.oracle.BINARY_FLOAT"), [`BINARY_DOUBLE`](../dialects/oracle.html#sqlalchemy.dialects.oracle.BINARY_DOUBLE
    "sqlalchemy.dialects.oracle.BINARY_DOUBLE") and `DOUBLE_PRECISION` now subclass
    [`Float`](../core/type_basics.html#sqlalchemy.types.Float "sqlalchemy.types.Float"),
    since these are floating point datatypes, not decimal. These datatypes were already
    defaulting the [`Float.asdecimal`](../core/type_basics.html#sqlalchemy.types.Float.params.asdecimal
    "sqlalchemy.types.Float") flag to False in line with what [`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float") already does.
  id: totrans-1860
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Oracle的BINARY_FLOAT和BINARY_DOUBLE数据类型现在参与cx_Oracle.setinputsizes()，传递NATIVE_FLOAT，以支持NaN值。此外，[`BINARY_FLOAT`](../dialects/oracle.html#sqlalchemy.dialects.oracle.BINARY_FLOAT
    "sqlalchemy.dialects.oracle.BINARY_FLOAT")、[`BINARY_DOUBLE`](../dialects/oracle.html#sqlalchemy.dialects.oracle.BINARY_DOUBLE
    "sqlalchemy.dialects.oracle.BINARY_DOUBLE")和`DOUBLE_PRECISION`现在都是[`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float")的子类，因为这些是浮点数据类型，而不是十进制。这些数据类型已经将[`Float.asdecimal`](../core/type_basics.html#sqlalchemy.types.Float.params.asdecimal
    "sqlalchemy.types.Float")标志默认设置为False，与[`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float")的行为一致。
- en: 'References: [#4264](https://www.sqlalchemy.org/trac/ticket/4264)'
  id: totrans-1861
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4264](https://www.sqlalchemy.org/trac/ticket/4264)
- en: '**[oracle] [bug]**'
  id: totrans-1862
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Added reflection capabilities for the [`BINARY_FLOAT`](../dialects/oracle.html#sqlalchemy.dialects.oracle.BINARY_FLOAT
    "sqlalchemy.dialects.oracle.BINARY_FLOAT"), [`BINARY_DOUBLE`](../dialects/oracle.html#sqlalchemy.dialects.oracle.BINARY_DOUBLE
    "sqlalchemy.dialects.oracle.BINARY_DOUBLE") datatypes.
  id: totrans-1863
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为[`BINARY_FLOAT`](../dialects/oracle.html#sqlalchemy.dialects.oracle.BINARY_FLOAT
    "sqlalchemy.dialects.oracle.BINARY_FLOAT")、[`BINARY_DOUBLE`](../dialects/oracle.html#sqlalchemy.dialects.oracle.BINARY_DOUBLE
    "sqlalchemy.dialects.oracle.BINARY_DOUBLE")数据类型添加了反射功能。
- en: '**[oracle] [bug]**'
  id: totrans-1864
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Altered the Oracle dialect such that when an [`Integer`](../core/type_basics.html#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer") type is in use, the cx_Oracle.NUMERIC type is set
    up for setinputsizes(). In SQLAlchemy 1.1 and earlier, cx_Oracle.NUMERIC was passed
    for all numeric types unconditionally, and in 1.2 this was removed to allow for
    better numeric precision. However, for integers, some database/client setups will
    fail to coerce boolean values True/False into integers which introduces regressive
    behavior when using SQLAlchemy 1.2\. Overall, the setinputsizes logic seems like
    it will need a lot more flexibility going forward so this is a start for that.
  id: totrans-1865
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了Oracle方言，当使用[`Integer`](../core/type_basics.html#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer")类型时，设置了cx_Oracle.NUMERIC类型用于setinputsizes()。在SQLAlchemy
    1.1及更早版本中，cx_Oracle.NUMERIC无条件地传递给所有数值类型，而在1.2中，这被移除以允许更好的数值精度。然而，对于整数，一些数据库/客户端设置将无法将布尔值True/False强制转换为整数，这在使用SQLAlchemy
    1.2时引入了回归行为。总体而言，setinputsizes逻辑似乎需要更多的灵活性，因此这是一个开始。
- en: 'References: [#4259](https://www.sqlalchemy.org/trac/ticket/4259)'
  id: totrans-1866
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4259](https://www.sqlalchemy.org/trac/ticket/4259)
- en: tests
  id: totrans-1867
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [bug]**'
  id: totrans-1868
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[测试] [bug]**'
- en: Fixed a bug in the test suite where if an external dialect returned `None` for
    `server_version_info`, the exclusion logic would raise an `AttributeError`.
  id: totrans-1869
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了测试套件中的一个错误，如果外部方言对`server_version_info`返回`None`，则排除逻辑将引发`AttributeError`。
- en: 'References: [#4249](https://www.sqlalchemy.org/trac/ticket/4249)'
  id: totrans-1870
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4249](https://www.sqlalchemy.org/trac/ticket/4249)
- en: misc
  id: totrans-1871
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [ext]**'
  id: totrans-1872
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: The horizontal sharding extension now makes use of the identity token added
    to ORM identity keys as part of [#4137](https://www.sqlalchemy.org/trac/ticket/4137),
    when an object refresh or column-based deferred load or unexpiration operation
    occurs. Since we know the “shard” that the object originated from, we make use
    of this value when refreshing, thereby avoiding queries against other shards that
    don’t match this object’s identity in any case.
  id: totrans-1873
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 水平分片扩展现在利用了作为[#4137](https://www.sqlalchemy.org/trac/ticket/4137)的一部分添加到ORM标识键中的标识令牌，当对象刷新或基于列的延迟加载或取消过期操作发生时。由于我们知道对象来自的“分片”，因此在刷新时我们利用此值，从而避免针对与此对象标识不匹配的其他分片进行查询。
- en: 'References: [#4247](https://www.sqlalchemy.org/trac/ticket/4247)'
  id: totrans-1874
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4247](https://www.sqlalchemy.org/trac/ticket/4247)
- en: '**[bug] [ext]**'
  id: totrans-1875
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed a race condition which could occur if automap [`AutomapBase.prepare()`](../orm/extensions/automap.html#sqlalchemy.ext.automap.AutomapBase.prepare
    "sqlalchemy.ext.automap.AutomapBase.prepare") were used within a multi-threaded
    context against other threads which may call [`configure_mappers()`](../orm/mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") as a result of use of other mappers. The unfinished
    mapping work of automap is particularly sensitive to being pulled in by a [`configure_mappers()`](../orm/mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") step leading to errors.
  id: totrans-1876
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了可能发生的竞争条件，如果在多线程上下文中使用automap [`AutomapBase.prepare()`](../orm/extensions/automap.html#sqlalchemy.ext.automap.AutomapBase.prepare
    "sqlalchemy.ext.automap.AutomapBase.prepare")与其他可能调用[`configure_mappers()`](../orm/mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers")的线程一起使用其他映射器。 automap的未完成映射工作对于被[`configure_mappers()`](../orm/mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers")步骤拉入尤为敏感，导致错误。
- en: 'References: [#4266](https://www.sqlalchemy.org/trac/ticket/4266)'
  id: totrans-1877
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4266](https://www.sqlalchemy.org/trac/ticket/4266)
- en: 1.2.7
  id: totrans-1878
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.2.7
- en: 'Released: April 20, 2018'
  id: totrans-1879
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2018年4月20日
- en: orm
  id: totrans-1880
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1881
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression in 1.2 within sharded query feature where the new “identity_token”
    element was not being correctly considered within the scope of a lazy load operation,
    when searching the identity map for a related many-to-one element. The new behavior
    will allow for making use of the “id_chooser” in order to determine the best identity
    key to retrieve from the identity map. In order to achieve this, some refactoring
    of 1.2’s “identity_token” approach has made some slight changes to the implementation
    of `ShardedQuery` which should be noted for other derivations of this class.
  id: totrans-1882
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了1.2版本中分片查询功能中的回归，其中新的“identity_token”元素在懒加载操作范围内未被正确考虑，当在身份映射中搜索相关的多对一元素时。新行为将允许利用“id_chooser”来确定从身份映射中检索的最佳标识键。为了实现这一点，对1.2的“identity_token”方法进行了一些重构，对`ShardedQuery`的实现进行了一些细微更改，其他派生类应该注意这些更改。
- en: 'References: [#4228](https://www.sqlalchemy.org/trac/ticket/4228)'
  id: totrans-1883
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4228](https://www.sqlalchemy.org/trac/ticket/4228)
- en: '**[orm] [bug]**'
  id: totrans-1884
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue in single-inheritance loading where the use of an aliased entity
    against a single-inheritance subclass in conjunction with the [`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from") method would cause the SQL to be rendered
    with the unaliased table mixed in to the query, causing a cartesian product. In
    particular this was affecting the new “selectin” loader when used against a single-inheritance
    subclass.
  id: totrans-1885
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了单继承加载中的问题，其中使用别名实体与单继承子类结合使用[`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from")方法会导致SQL呈现为未别名化的表混入查询中，导致笛卡尔积。特别是当针对单继承子类使用新的“selectin”加载器时，会受到影响。
- en: 'References: [#4241](https://www.sqlalchemy.org/trac/ticket/4241)'
  id: totrans-1886
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4241](https://www.sqlalchemy.org/trac/ticket/4241)
- en: sql
  id: totrans-1887
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1888
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where the compilation of an INSERT statement with the “literal_binds”
    option that also uses an explicit sequence and “inline” generation, as on PostgreSQL
    and Oracle, would fail to accommodate the extra keyword argument within the sequence
    processing routine.
  id: totrans-1889
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用“literal_binds”选项编译INSERT语句时的问题，该语句还使用了显式序列和“inline”生成，如在PostgreSQL和Oracle上，会导致序列处理程序无法容纳额外的关键字参数。
- en: 'References: [#4231](https://www.sqlalchemy.org/trac/ticket/4231)'
  id: totrans-1890
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4231](https://www.sqlalchemy.org/trac/ticket/4231)
- en: postgresql
  id: totrans-1891
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-1892
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added new PG type [`REGCLASS`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.REGCLASS
    "sqlalchemy.dialects.postgresql.REGCLASS") which assists in casting table names
    to OID values. Pull request courtesy Sebastian Bank.
  id: totrans-1893
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的 PG 类型 [`REGCLASS`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.REGCLASS
    "sqlalchemy.dialects.postgresql.REGCLASS")，有助于将表名转换为 OID 值。感谢 Sebastian Bank 的拉取请求。
- en: 'References: [#4160](https://www.sqlalchemy.org/trac/ticket/4160)'
  id: totrans-1894
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4160](https://www.sqlalchemy.org/trac/ticket/4160)
- en: '**[postgresql] [bug]**'
  id: totrans-1895
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug where the special “not equals” operator for the PostgreSQL “range”
    datatypes such as DATERANGE would fail to render “IS NOT NULL” when compared to
    the Python `None` value.
  id: totrans-1896
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 PostgreSQL “range” 数据类型（如 DATERANGE）的特殊“不等于”运算符与 Python `None` 值比较时无法渲染“IS
    NOT NULL”的 bug。
- en: 'References: [#4229](https://www.sqlalchemy.org/trac/ticket/4229)'
  id: totrans-1897
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4229](https://www.sqlalchemy.org/trac/ticket/4229)
- en: mssql
  id: totrans-1898
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-1899
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed 1.2 regression caused by [#4060](https://www.sqlalchemy.org/trac/ticket/4060)
    where the query used to reflect SQL Server cross-schema foreign keys was limiting
    the criteria incorrectly.
  id: totrans-1900
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由 [#4060](https://www.sqlalchemy.org/trac/ticket/4060) 引起的 1.2 版本回归 bug，导致用于反映
    SQL Server 跨模式外键的查询错误地限制了条件。
- en: 'References: [#4234](https://www.sqlalchemy.org/trac/ticket/4234)'
  id: totrans-1901
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4234](https://www.sqlalchemy.org/trac/ticket/4234)
- en: oracle
  id: totrans-1902
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-1903
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: The Oracle NUMBER datatype is reflected as INTEGER if the precision is NULL
    and the scale is zero, as this is how INTEGER values come back when reflected
    from Oracle’s tables. Pull request courtesy Kent Bower.
  id: totrans-1904
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果精度为 NULL 且比例为零，则 Oracle NUMBER 数据类型将反映为 INTEGER，因为这是从 Oracle 表反映出来的 INTEGER
    值。感谢 Kent Bower 的拉取请求。
- en: orm
  id: totrans-1905
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1906
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression in 1.2 within sharded query feature where the new “identity_token”
    element was not being correctly considered within the scope of a lazy load operation,
    when searching the identity map for a related many-to-one element. The new behavior
    will allow for making use of the “id_chooser” in order to determine the best identity
    key to retrieve from the identity map. In order to achieve this, some refactoring
    of 1.2’s “identity_token” approach has made some slight changes to the implementation
    of `ShardedQuery` which should be noted for other derivations of this class.
  id: totrans-1907
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 1.2 版本中分片查询功能中的回归 bug，其中新的“identity_token”元素在搜索相关的一对多元素时未被正确考虑在延迟加载操作范围内。新的行为将允许利用“id_chooser”来确定从身份映射中检索的最佳身份键。为了实现这一点，对
    1.2 版本的“identity_token”方法进行了一些重构，对于此类的其他派生应该注意到一些对 `ShardedQuery` 实现的轻微更改。
- en: 'References: [#4228](https://www.sqlalchemy.org/trac/ticket/4228)'
  id: totrans-1908
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4228](https://www.sqlalchemy.org/trac/ticket/4228)
- en: '**[orm] [bug]**'
  id: totrans-1909
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue in single-inheritance loading where the use of an aliased entity
    against a single-inheritance subclass in conjunction with the [`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from") method would cause the SQL to be rendered
    with the unaliased table mixed in to the query, causing a cartesian product. In
    particular this was affecting the new “selectin” loader when used against a single-inheritance
    subclass.
  id: totrans-1910
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了单继承加载中的问题，其中在使用 [`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from") 方法时，针对单继承子类使用别名实体会导致 SQL 渲染时未经别名处理的表混入查询，导致笛卡尔积。特别是当针对单继承子类使用新的“selectin”加载器时会受到影响。
- en: 'References: [#4241](https://www.sqlalchemy.org/trac/ticket/4241)'
  id: totrans-1911
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4241](https://www.sqlalchemy.org/trac/ticket/4241)
- en: sql
  id: totrans-1912
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1913
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where the compilation of an INSERT statement with the “literal_binds”
    option that also uses an explicit sequence and “inline” generation, as on PostgreSQL
    and Oracle, would fail to accommodate the extra keyword argument within the sequence
    processing routine.
  id: totrans-1914
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用“literal_binds”选项编译 INSERT 语句时，同时使用显式序列和“inline”生成（如在 PostgreSQL 和 Oracle
    上），无法在序列处理过程中适应额外关键字参数的问题。
- en: 'References: [#4231](https://www.sqlalchemy.org/trac/ticket/4231)'
  id: totrans-1915
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4231](https://www.sqlalchemy.org/trac/ticket/4231)
- en: postgresql
  id: totrans-1916
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-1917
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added new PG type [`REGCLASS`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.REGCLASS
    "sqlalchemy.dialects.postgresql.REGCLASS") which assists in casting table names
    to OID values. Pull request courtesy Sebastian Bank.
  id: totrans-1918
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的 PG 类型 [`REGCLASS`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.REGCLASS
    "sqlalchemy.dialects.postgresql.REGCLASS")，有助于将表名转换为 OID 值。感谢 Sebastian Bank 的拉取请求。
- en: 'References: [#4160](https://www.sqlalchemy.org/trac/ticket/4160)'
  id: totrans-1919
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4160](https://www.sqlalchemy.org/trac/ticket/4160)
- en: '**[postgresql] [bug]**'
  id: totrans-1920
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[PostgreSQL] [错误]**'
- en: Fixed bug where the special “not equals” operator for the PostgreSQL “range”
    datatypes such as DATERANGE would fail to render “IS NOT NULL” when compared to
    the Python `None` value.
  id: totrans-1921
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了针对PostgreSQL“range”数据类型（如DATERANGE）的特殊“不等于”运算符与Python `None`值比较时无法呈现“IS NOT
    NULL”的错误。
- en: 'References: [#4229](https://www.sqlalchemy.org/trac/ticket/4229)'
  id: totrans-1922
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4229](https://www.sqlalchemy.org/trac/ticket/4229)
- en: mssql
  id: totrans-1923
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: MSSQL
- en: '**[mssql] [bug]**'
  id: totrans-1924
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[MSSQL] [错误]**'
- en: Fixed 1.2 regression caused by [#4060](https://www.sqlalchemy.org/trac/ticket/4060)
    where the query used to reflect SQL Server cross-schema foreign keys was limiting
    the criteria incorrectly.
  id: totrans-1925
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由[#4060](https://www.sqlalchemy.org/trac/ticket/4060)引起的1.2回归，其中用于反映SQL Server跨模式外键的查询错误地限制了条件。
- en: 'References: [#4234](https://www.sqlalchemy.org/trac/ticket/4234)'
  id: totrans-1926
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4234](https://www.sqlalchemy.org/trac/ticket/4234)
- en: oracle
  id: totrans-1927
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Oracle
- en: '**[oracle] [bug]**'
  id: totrans-1928
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[Oracle] [错误]**'
- en: The Oracle NUMBER datatype is reflected as INTEGER if the precision is NULL
    and the scale is zero, as this is how INTEGER values come back when reflected
    from Oracle’s tables. Pull request courtesy Kent Bower.
  id: totrans-1929
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果精度为NULL且比例为零，则Oracle NUMBER数据类型将反映为INTEGER，因为这是从Oracle表反映出来的INTEGER值的方式。拉取请求由Kent
    Bower提供。
- en: 1.2.6
  id: totrans-1930
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.2.6
- en: 'Released: March 30, 2018'
  id: totrans-1931
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2018年3月30日
- en: orm
  id: totrans-1932
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM
- en: '**[orm] [bug]**'
  id: totrans-1933
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [错误]**'
- en: Fixed bug where using [`Mutable.associate_with()`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.Mutable.associate_with
    "sqlalchemy.ext.mutable.Mutable.associate_with") or [`Mutable.as_mutable()`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.Mutable.as_mutable
    "sqlalchemy.ext.mutable.Mutable.as_mutable") in conjunction with a class that
    has non- primary mappers set up with alternatively-named attributes would produce
    an attribute error. Since non-primary mappers are not used for persistence, the
    mutable extension now excludes non-primary mappers from its instrumentation steps.
  id: totrans-1934
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在与具有替代命名属性设置的非主映射器一起使用[`Mutable.associate_with()`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.Mutable.associate_with
    "sqlalchemy.ext.mutable.Mutable.associate_with")或[`Mutable.as_mutable()`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.Mutable.as_mutable
    "sqlalchemy.ext.mutable.Mutable.as_mutable")时会产生属性错误的错误。由于非主映射器不用于持久性，因此可变扩展现在将非主映射器排除在其仪器步骤之外。
- en: 'References: [#4215](https://www.sqlalchemy.org/trac/ticket/4215)'
  id: totrans-1935
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4215](https://www.sqlalchemy.org/trac/ticket/4215)
- en: engine
  id: totrans-1936
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [bug]**'
  id: totrans-1937
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误]**'
- en: Fixed bug in connection pool where a connection could be present in the pool
    without all of its “connect” event handlers called, if a previous “connect” handler
    threw an exception; note that the dialects themselves have connect handlers that
    emit SQL, such as those which set transaction isolation, which can fail if the
    database is in a non-available state, but still allows a connection. The connection
    is now invalidated first if any of the connect handlers fail.
  id: totrans-1938
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了连接池中可能存在连接但未调用所有“connect”事件处理程序的错误，如果先前的“connect”处理程序抛出异常；请注意，方言本身具有发出SQL的连接处理程序，例如设置事务隔离级别的处理程序，如果数据库处于不可用状态，则可能失败，但仍允许连接。如果任何连接处理程序失败，首先使连接无效。
- en: 'References: [#4225](https://www.sqlalchemy.org/trac/ticket/4225)'
  id: totrans-1939
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4225](https://www.sqlalchemy.org/trac/ticket/4225)
- en: sql
  id: totrans-1940
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SQL
- en: '**[sql] [bug]**'
  id: totrans-1941
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL] [错误]**'
- en: Fixed a regression that occurred from the previous fix to [#4204](https://www.sqlalchemy.org/trac/ticket/4204)
    in version 1.2.5, where a CTE that refers to itself after the [`CTE.alias()`](../core/selectable.html#sqlalchemy.sql.expression.CTE.alias
    "sqlalchemy.sql.expression.CTE.alias") method has been called would not refer
    to itself correctly.
  id: totrans-1942
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在版本1.2.5中从先前修复的[#4204](https://www.sqlalchemy.org/trac/ticket/4204)中发生的回归，调用[`CTE.alias()`](../core/selectable.html#sqlalchemy.sql.expression.CTE.alias
    "sqlalchemy.sql.expression.CTE.alias")方法后引用自身的CTE将无法正确引用自身的问题。
- en: 'References: [#4204](https://www.sqlalchemy.org/trac/ticket/4204)'
  id: totrans-1943
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4204](https://www.sqlalchemy.org/trac/ticket/4204)
- en: postgresql
  id: totrans-1944
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PostgreSQL
- en: '**[postgresql] [feature]**'
  id: totrans-1945
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[PostgreSQL] [功能]**'
- en: Added support for “PARTITION BY” in PostgreSQL table definitions, using “postgresql_partition_by”.
    Pull request courtesy Vsevolod Solovyov.
  id: totrans-1946
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对在PostgreSQL表定义中使用“PARTITION BY”的支持，使用“postgresql_partition_by”。拉取请求由Vsevolod
    Solovyov提供。
- en: mssql
  id: totrans-1947
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: MSSQL
- en: '**[mssql] [bug]**'
  id: totrans-1948
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[MSSQL] [错误]**'
- en: Adjusted the SQL Server version detection for pyodbc to only allow for numeric
    tokens, filtering out non-integers, since the dialect does tuple- numeric comparisons
    with this value. This is normally true for all known SQL Server / pyodbc drivers
    in any case.
  id: totrans-1949
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了对pyodbc的SQL Server版本检测，只允许数字标记，过滤掉非整数，因为该方言使用此值进行元组-数字比较。无论如何，这通常对所有已知的SQL
    Server/pyodbc驱动程序都是正确的。
- en: 'References: [#4227](https://www.sqlalchemy.org/trac/ticket/4227)'
  id: totrans-1950
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4227](https://www.sqlalchemy.org/trac/ticket/4227)
- en: oracle
  id: totrans-1951
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-1952
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: The minimum cx_Oracle version supported is 5.2 (June 2015). Previously, the
    dialect asserted against version 5.0 but as of 1.2.2 we are using some symbols
    that did not appear until 5.2.
  id: totrans-1953
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 支持的最低cx_Oracle版本为5.2（2015年6月）。以前，该方言对版本5.0进行了断言，但从1.2.2开始，我们使用了一些直到5.2才出现的符号。
- en: 'References: [#4211](https://www.sqlalchemy.org/trac/ticket/4211)'
  id: totrans-1954
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4211](https://www.sqlalchemy.org/trac/ticket/4211)
- en: misc
  id: totrans-1955
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[bug] [declarative]**'
  id: totrans-1956
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [declarative]**'
- en: Removed a warning that would be emitted when calling upon `__table_args__`,
    `__mapper_args__` as named with a `@declared_attr` method, when called from a
    non-mapped declarative mixin. Calling these directly is documented as the approach
    to use when one is overriding one of these methods on a mapped class. The warning
    still emits for regular attribute names.
  id: totrans-1957
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了在调用`__table_args__`、`__mapper_args__`时发出的警告，这些方法被命名为`@declared_attr`方法，当从非映射的声明性mixin中调用时。直接调用这些方法是文档中指定的在映射类上覆盖这些方法时要使用的方法。对于常规属性名称，警告仍会发出。
- en: 'References: [#4221](https://www.sqlalchemy.org/trac/ticket/4221)'
  id: totrans-1958
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4221](https://www.sqlalchemy.org/trac/ticket/4221)
- en: orm
  id: totrans-1959
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1960
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where using [`Mutable.associate_with()`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.Mutable.associate_with
    "sqlalchemy.ext.mutable.Mutable.associate_with") or [`Mutable.as_mutable()`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.Mutable.as_mutable
    "sqlalchemy.ext.mutable.Mutable.as_mutable") in conjunction with a class that
    has non- primary mappers set up with alternatively-named attributes would produce
    an attribute error. Since non-primary mappers are not used for persistence, the
    mutable extension now excludes non-primary mappers from its instrumentation steps.
  id: totrans-1961
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在与具有替代命名属性设置的非主要映射器一起使用[`Mutable.associate_with()`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.Mutable.associate_with
    "sqlalchemy.ext.mutable.Mutable.associate_with")或[`Mutable.as_mutable()`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.Mutable.as_mutable
    "sqlalchemy.ext.mutable.Mutable.as_mutable")时会产生属性错误的错误。由于非主要映射器不用于持久性，因此可变扩展现在将非主要映射器排除在其检测步骤之外。
- en: 'References: [#4215](https://www.sqlalchemy.org/trac/ticket/4215)'
  id: totrans-1962
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4215](https://www.sqlalchemy.org/trac/ticket/4215)
- en: engine
  id: totrans-1963
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-1964
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed bug in connection pool where a connection could be present in the pool
    without all of its “connect” event handlers called, if a previous “connect” handler
    threw an exception; note that the dialects themselves have connect handlers that
    emit SQL, such as those which set transaction isolation, which can fail if the
    database is in a non-available state, but still allows a connection. The connection
    is now invalidated first if any of the connect handlers fail.
  id: totrans-1965
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了连接池中的错误，其中如果先前的“connect”处理程序抛出异常，则可能存在连接而未调用所有“connect”事件处理程序；请注意，方言本身具有发出SQL的连接处理程序，例如设置事务隔离的处理程序，如果数据库处于不可用状态，则可能失败，但仍允许连接。如果任何连接处理程序失败，现在首先使连接无效。
- en: 'References: [#4225](https://www.sqlalchemy.org/trac/ticket/4225)'
  id: totrans-1966
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4225](https://www.sqlalchemy.org/trac/ticket/4225)
- en: sql
  id: totrans-1967
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1968
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed a regression that occurred from the previous fix to [#4204](https://www.sqlalchemy.org/trac/ticket/4204)
    in version 1.2.5, where a CTE that refers to itself after the [`CTE.alias()`](../core/selectable.html#sqlalchemy.sql.expression.CTE.alias
    "sqlalchemy.sql.expression.CTE.alias") method has been called would not refer
    to itself correctly.
  id: totrans-1969
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在1.2.5版本中从先前对[#4204](https://www.sqlalchemy.org/trac/ticket/4204)的修复中发生的回归，其中在调用[`CTE.alias()`](../core/selectable.html#sqlalchemy.sql.expression.CTE.alias
    "sqlalchemy.sql.expression.CTE.alias")方法后引用自身的CTE将无法正确引用自身。
- en: 'References: [#4204](https://www.sqlalchemy.org/trac/ticket/4204)'
  id: totrans-1970
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4204](https://www.sqlalchemy.org/trac/ticket/4204)
- en: postgresql
  id: totrans-1971
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-1972
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added support for “PARTITION BY” in PostgreSQL table definitions, using “postgresql_partition_by”.
    Pull request courtesy Vsevolod Solovyov.
  id: totrans-1973
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在PostgreSQL表定义中添加了对“PARTITION BY”的支持，使用“postgresql_partition_by”。感谢Vsevolod
    Solovyov的拉取请求。
- en: mssql
  id: totrans-1974
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-1975
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Adjusted the SQL Server version detection for pyodbc to only allow for numeric
    tokens, filtering out non-integers, since the dialect does tuple- numeric comparisons
    with this value. This is normally true for all known SQL Server / pyodbc drivers
    in any case.
  id: totrans-1976
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了对于pyodbc的SQL Server版本检测，只允许数字标记，过滤掉非整数，因为该方言对于此值进行元组数值比较。在任何情况下，这通常对所有已知的SQL
    Server/pyodbc驱动程序都是正确的。
- en: 'References: [#4227](https://www.sqlalchemy.org/trac/ticket/4227)'
  id: totrans-1977
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4227](https://www.sqlalchemy.org/trac/ticket/4227)
- en: oracle
  id: totrans-1978
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-1979
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: The minimum cx_Oracle version supported is 5.2 (June 2015). Previously, the
    dialect asserted against version 5.0 but as of 1.2.2 we are using some symbols
    that did not appear until 5.2.
  id: totrans-1980
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 支持的最低cx_Oracle版本是5.2（2015年6月）。之前，该方言对版本5.0进行了断言，但从1.2.2版本开始，我们使用了一些直到5.2版本才出现的符号。
- en: 'References: [#4211](https://www.sqlalchemy.org/trac/ticket/4211)'
  id: totrans-1981
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4211](https://www.sqlalchemy.org/trac/ticket/4211)
- en: misc
  id: totrans-1982
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[bug] [declarative]**'
  id: totrans-1983
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [declarative]**'
- en: Removed a warning that would be emitted when calling upon `__table_args__`,
    `__mapper_args__` as named with a `@declared_attr` method, when called from a
    non-mapped declarative mixin. Calling these directly is documented as the approach
    to use when one is overriding one of these methods on a mapped class. The warning
    still emits for regular attribute names.
  id: totrans-1984
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了一个警告，当调用`@declared_attr`方法命名为`__table_args__`，`__mapper_args__`时，当从非映射的声明性混合物中调用时会发出警告。直接调用这些方法是文档中建议的方法，当一个映射类覆盖其中一个这些方法时使用。对于常规属性名称仍然会发出警告。
- en: 'References: [#4221](https://www.sqlalchemy.org/trac/ticket/4221)'
  id: totrans-1985
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4221](https://www.sqlalchemy.org/trac/ticket/4221)
- en: 1.2.5
  id: totrans-1986
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.2.5
- en: 'Released: March 6, 2018'
  id: totrans-1987
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2018年3月6日
- en: orm
  id: totrans-1988
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-1989
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new feature [`Query.only_return_tuples()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.only_return_tuples
    "sqlalchemy.orm.Query.only_return_tuples"). Causes the [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object to return keyed tuple objects unconditionally even
    if the query is against a single entity. Pull request courtesy Eric Atkin.
  id: totrans-1990
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新功能[`Query.only_return_tuples()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.only_return_tuples
    "sqlalchemy.orm.Query.only_return_tuples")。导致[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象无条件地返回键控元组对象，即使查询针对的是单个实体。拉取请求由Eric Atkin提供。
- en: '**[orm] [bug]**'
  id: totrans-1991
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in new “polymorphic selectin” loading when a selection of polymorphic
    objects were to be partially loaded from a relationship lazy loader, leading to
    an “empty IN” condition within the load that raises an error for the “inline”
    form of “IN”.
  id: totrans-1992
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在新的“多态selectin”加载中修复了一个错误，当从关系延迟加载器部分加载多态对象的选择时，导致加载中出现“空IN”条件，在“IN”的“内联”形式中引发错误。
- en: 'References: [#4199](https://www.sqlalchemy.org/trac/ticket/4199)'
  id: totrans-1993
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4199](https://www.sqlalchemy.org/trac/ticket/4199)
- en: '**[orm] [bug]**'
  id: totrans-1994
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed 1.2 regression where a mapper option that contains an [`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") object, as is typical when using the [`QueryableAttribute.of_type()`](../orm/internals.html#sqlalchemy.orm.QueryableAttribute.of_type
    "sqlalchemy.orm.QueryableAttribute.of_type") method, could not be pickled. 1.1’s
    behavior was to omit the aliased class objects from the path, so this behavior
    is restored.
  id: totrans-1995
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了1.2版本的回归问题，当一个包含[`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass")对象的映射器选项，通常在使用[`QueryableAttribute.of_type()`](../orm/internals.html#sqlalchemy.orm.QueryableAttribute.of_type
    "sqlalchemy.orm.QueryableAttribute.of_type")方法时，无法被pickle。1.1版本的行为是从路径中省略别名类对象，因此恢复了这种行为。
- en: 'References: [#4209](https://www.sqlalchemy.org/trac/ticket/4209)'
  id: totrans-1996
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4209](https://www.sqlalchemy.org/trac/ticket/4209)
- en: sql
  id: totrans-1997
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1998
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in :class:.`CTE` construct along the same lines as that of [#4204](https://www.sqlalchemy.org/trac/ticket/4204)
    where a [`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    that was aliased would not copy itself correctly during a “clone” operation as
    is frequent within the ORM as well as when using the [`ClauseElement.params()`](../core/foundation.html#sqlalchemy.sql.expression.ClauseElement.params
    "sqlalchemy.sql.expression.ClauseElement.params") method.
  id: totrans-1999
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了:class:.`CTE`构造中的错误，与[#4204](https://www.sqlalchemy.org/trac/ticket/4204)类似，其中一个被别名化的[`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE")在“克隆”操作期间无法正确复制自身，这在ORM中经常发生，并且在使用[`ClauseElement.params()`](../core/foundation.html#sqlalchemy.sql.expression.ClauseElement.params
    "sqlalchemy.sql.expression.ClauseElement.params")方法时也会发生。
- en: 'References: [#4210](https://www.sqlalchemy.org/trac/ticket/4210)'
  id: totrans-2000
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4210](https://www.sqlalchemy.org/trac/ticket/4210)
- en: '**[sql] [bug]**'
  id: totrans-2001
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in CTE rendering where a [`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE") that was also turned into an [`Alias`](../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") would not render its “ctename AS aliasname”
    clause appropriately if there were more than one reference to the CTE in a FROM
    clause.
  id: totrans-2002
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 CTE 渲染中的一个 bug，即将[`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE")转换为[`Alias`](../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias")时，如果在 FROM 子句中多次引用 CTE，则其“ctename AS aliasname”子句不会适当地渲染。
- en: 'References: [#4204](https://www.sqlalchemy.org/trac/ticket/4204)'
  id: totrans-2003
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4204](https://www.sqlalchemy.org/trac/ticket/4204)
- en: '**[sql] [bug]**'
  id: totrans-2004
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in new “expanding IN parameter” feature where the bind parameter processors
    for values wasn’t working at all, tests failed to cover this pretty basic case
    which includes that ENUM values weren’t working.
  id: totrans-2005
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新的“扩展 IN 参数”功能中的一个 bug，即值的绑定参数处理器根本不起作用，测试未能覆盖这个相当基本的情况，其中包括 ENUM 值无法工作。
- en: 'References: [#4198](https://www.sqlalchemy.org/trac/ticket/4198)'
  id: totrans-2006
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4198](https://www.sqlalchemy.org/trac/ticket/4198)
- en: postgresql
  id: totrans-2007
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug] [py3k]**'
  id: totrans-2008
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug] [py3k]**'
- en: Fixed bug in PostgreSQL COLLATE / ARRAY adjustment first introduced in [#4006](https://www.sqlalchemy.org/trac/ticket/4006)
    where new behaviors in Python 3.7 regular expressions caused the fix to fail.
  id: totrans-2009
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 PostgreSQL COLLATE / ARRAY 调整中的一个 bug，首次引入于[#4006](https://www.sqlalchemy.org/trac/ticket/4006)，其中
    Python 3.7 正则表达式中的新行为导致修复失败。
- en: 'This change is also **backported** to: 1.1.18'
  id: totrans-2010
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：1.1.18
- en: 'References: [#4208](https://www.sqlalchemy.org/trac/ticket/4208)'
  id: totrans-2011
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4208](https://www.sqlalchemy.org/trac/ticket/4208)
- en: mysql
  id: totrans-2012
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-2013
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: MySQL dialects now query the server version using `SELECT @@version` explicitly
    to the server to ensure we are getting the correct version information back. Proxy
    servers like MaxScale interfere with the value that is passed to the DBAPI’s connection.server_version
    value so this is no longer reliable.
  id: totrans-2014
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL 方言现在明确使用`SELECT @@version`向服务器查询版本，以确保我们正确获取版本信息。代理服务器如 MaxScale 干扰了传递给
    DBAPI 的连接服务器版本值，因此这不再可靠。
- en: 'This change is also **backported** to: 1.1.18'
  id: totrans-2015
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：1.1.18
- en: 'References: [#4205](https://www.sqlalchemy.org/trac/ticket/4205)'
  id: totrans-2016
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4205](https://www.sqlalchemy.org/trac/ticket/4205)
- en: orm
  id: totrans-2017
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-2018
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new feature [`Query.only_return_tuples()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.only_return_tuples
    "sqlalchemy.orm.Query.only_return_tuples"). Causes the [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object to return keyed tuple objects unconditionally even
    if the query is against a single entity. Pull request courtesy Eric Atkin.
  id: totrans-2019
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新功能[`Query.only_return_tuples()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.only_return_tuples
    "sqlalchemy.orm.Query.only_return_tuples")。导致[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象无条件返回键值元组对象，即使查询针对单个实体。感谢 Eric Atkin 提交的拉取请求。
- en: '**[orm] [bug]**'
  id: totrans-2020
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in new “polymorphic selectin” loading when a selection of polymorphic
    objects were to be partially loaded from a relationship lazy loader, leading to
    an “empty IN” condition within the load that raises an error for the “inline”
    form of “IN”.
  id: totrans-2021
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新的“多态选择”加载中的一个 bug，当从关系懒加载器部分加载多态对象的选择时，导致加载中出现“空 IN”条件，在“IN”的“内联”形式中引发错误。
- en: 'References: [#4199](https://www.sqlalchemy.org/trac/ticket/4199)'
  id: totrans-2022
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4199](https://www.sqlalchemy.org/trac/ticket/4199)
- en: '**[orm] [bug]**'
  id: totrans-2023
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed 1.2 regression where a mapper option that contains an [`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") object, as is typical when using the [`QueryableAttribute.of_type()`](../orm/internals.html#sqlalchemy.orm.QueryableAttribute.of_type
    "sqlalchemy.orm.QueryableAttribute.of_type") method, could not be pickled. 1.1’s
    behavior was to omit the aliased class objects from the path, so this behavior
    is restored.
  id: totrans-2024
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 1.2 版本中的一个问题，即包含[`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass")对象的映射器选项无法被 pickle 化。1.1 版本的行为是从路径中省略别名类对象，因此恢复了这种行为。
- en: 'References: [#4209](https://www.sqlalchemy.org/trac/ticket/4209)'
  id: totrans-2025
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4209](https://www.sqlalchemy.org/trac/ticket/4209)
- en: sql
  id: totrans-2026
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-2027
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in :class:.`CTE` construct along the same lines as that of [#4204](https://www.sqlalchemy.org/trac/ticket/4204)
    where a [`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    that was aliased would not copy itself correctly during a “clone” operation as
    is frequent within the ORM as well as when using the [`ClauseElement.params()`](../core/foundation.html#sqlalchemy.sql.expression.ClauseElement.params
    "sqlalchemy.sql.expression.ClauseElement.params") method.
  id: totrans-2028
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了:class:.`CTE`构造中的错误，与[#4204](https://www.sqlalchemy.org/trac/ticket/4204)类似，其中一个被别名的[`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE")在“克隆”操作期间无法正确复制自身，这在ORM中经常发生，也在使用[`ClauseElement.params()`](../core/foundation.html#sqlalchemy.sql.expression.ClauseElement.params
    "sqlalchemy.sql.expression.ClauseElement.params")方法时发生。
- en: 'References: [#4210](https://www.sqlalchemy.org/trac/ticket/4210)'
  id: totrans-2029
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4210](https://www.sqlalchemy.org/trac/ticket/4210)
- en: '**[sql] [bug]**'
  id: totrans-2030
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in CTE rendering where a [`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE") that was also turned into an [`Alias`](../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") would not render its “ctename AS aliasname”
    clause appropriately if there were more than one reference to the CTE in a FROM
    clause.
  id: totrans-2031
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在CTE渲染中的一个错误，其中一个[`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE")也被转换为一个[`Alias`](../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias")，如果在FROM子句中对CTE有多个引用，则其“ctename AS aliasname”子句不会被正确渲染。
- en: 'References: [#4204](https://www.sqlalchemy.org/trac/ticket/4204)'
  id: totrans-2032
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4204](https://www.sqlalchemy.org/trac/ticket/4204)
- en: '**[sql] [bug]**'
  id: totrans-2033
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in new “expanding IN parameter” feature where the bind parameter processors
    for values wasn’t working at all, tests failed to cover this pretty basic case
    which includes that ENUM values weren’t working.
  id: totrans-2034
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新的“扩展IN参数”功能中的错误，其中值的绑定参数处理器根本不起作用，测试未能覆盖这个非常基本的情况，其中包括ENUM值无法工作。
- en: 'References: [#4198](https://www.sqlalchemy.org/trac/ticket/4198)'
  id: totrans-2035
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4198](https://www.sqlalchemy.org/trac/ticket/4198)
- en: postgresql
  id: totrans-2036
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug] [py3k]**'
  id: totrans-2037
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug] [py3k]**'
- en: Fixed bug in PostgreSQL COLLATE / ARRAY adjustment first introduced in [#4006](https://www.sqlalchemy.org/trac/ticket/4006)
    where new behaviors in Python 3.7 regular expressions caused the fix to fail.
  id: totrans-2038
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在PostgreSQL COLLATE / ARRAY调整中首次引入的错误，其中Python 3.7正则表达式中的新行为导致修复失败。
- en: 'This change is also **backported** to: 1.1.18'
  id: totrans-2039
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.1.18
- en: 'References: [#4208](https://www.sqlalchemy.org/trac/ticket/4208)'
  id: totrans-2040
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4208](https://www.sqlalchemy.org/trac/ticket/4208)
- en: mysql
  id: totrans-2041
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-2042
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: MySQL dialects now query the server version using `SELECT @@version` explicitly
    to the server to ensure we are getting the correct version information back. Proxy
    servers like MaxScale interfere with the value that is passed to the DBAPI’s connection.server_version
    value so this is no longer reliable.
  id: totrans-2043
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL方言现在明确使用`SELECT @@version`向服务器查询服务器版本，以确保我们获得正确的版本信息。代理服务器如MaxScale干扰传递给DBAPI的connection.server_version值，因此这不再可靠。
- en: 'This change is also **backported** to: 1.1.18'
  id: totrans-2044
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.1.18
- en: 'References: [#4205](https://www.sqlalchemy.org/trac/ticket/4205)'
  id: totrans-2045
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4205](https://www.sqlalchemy.org/trac/ticket/4205)
- en: 1.2.4
  id: totrans-2046
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.2.4
- en: 'Released: February 22, 2018'
  id: totrans-2047
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2018年2月22日
- en: orm
  id: totrans-2048
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-2049
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed 1.2 regression in ORM versioning feature where a mapping against a [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") or [`alias()`](../core/selectable.html#sqlalchemy.sql.expression.alias
    "sqlalchemy.sql.expression.alias") that also used a versioning column against
    the underlying table would fail due to the check added as part of [#3673](https://www.sqlalchemy.org/trac/ticket/3673).
  id: totrans-2050
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了ORM版本控制功能中的1.2回归错误，其中针对一个[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")或[`alias()`](../core/selectable.html#sqlalchemy.sql.expression.alias
    "sqlalchemy.sql.expression.alias")的映射，还使用了针对底层表的版本控制列，由于添加的检查导致失败，这是作为[#3673](https://www.sqlalchemy.org/trac/ticket/3673)的一部分。
- en: 'References: [#4193](https://www.sqlalchemy.org/trac/ticket/4193)'
  id: totrans-2051
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4193](https://www.sqlalchemy.org/trac/ticket/4193)
- en: engine
  id: totrans-2052
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-2053
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed regression caused in 1.2.3 due to fix from [#4181](https://www.sqlalchemy.org/trac/ticket/4181)
    where the changes to the event system involving [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") and `OptionEngine` did not accommodate for event removals,
    which would raise an `AttributeError` when invoked at the class level.
  id: totrans-2054
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于来自[#4181](https://www.sqlalchemy.org/trac/ticket/4181)的修复导致的1.2.3中的回归错误，涉及[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")和`OptionEngine`的事件系统的更改没有考虑到事件的移除，当在类级别调用时会引发`AttributeError`。
- en: 'References: [#4190](https://www.sqlalchemy.org/trac/ticket/4190)'
  id: totrans-2055
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4190](https://www.sqlalchemy.org/trac/ticket/4190)
- en: sql
  id: totrans-2056
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-2057
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where CTE expressions would not have their name or alias name quoted
    when the given name is case sensitive or otherwise requires quoting. Pull request
    courtesy Eric Atkin.
  id: totrans-2058
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了CTE表达式的bug，当给定名称区分大小写或需要引号时，它们的名称或别名名称不会被引用。感谢Eric Atkin的拉取请求。
- en: 'References: [#4197](https://www.sqlalchemy.org/trac/ticket/4197)'
  id: totrans-2059
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4197](https://www.sqlalchemy.org/trac/ticket/4197)
- en: orm
  id: totrans-2060
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-2061
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed 1.2 regression in ORM versioning feature where a mapping against a [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") or [`alias()`](../core/selectable.html#sqlalchemy.sql.expression.alias
    "sqlalchemy.sql.expression.alias") that also used a versioning column against
    the underlying table would fail due to the check added as part of [#3673](https://www.sqlalchemy.org/trac/ticket/3673).
  id: totrans-2062
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了1.2版本中ORM版本控制功能的回归错误，其中针对[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")或[`alias()`](../core/selectable.html#sqlalchemy.sql.expression.alias
    "sqlalchemy.sql.expression.alias")的映射，同时还使用了对基础表的版本控制列，由于[#3673](https://www.sqlalchemy.org/trac/ticket/3673)中添加的检查而失败。
- en: 'References: [#4193](https://www.sqlalchemy.org/trac/ticket/4193)'
  id: totrans-2063
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4193](https://www.sqlalchemy.org/trac/ticket/4193)
- en: engine
  id: totrans-2064
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-2065
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed regression caused in 1.2.3 due to fix from [#4181](https://www.sqlalchemy.org/trac/ticket/4181)
    where the changes to the event system involving [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") and `OptionEngine` did not accommodate for event removals,
    which would raise an `AttributeError` when invoked at the class level.
  id: totrans-2066
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于来自[#4181](https://www.sqlalchemy.org/trac/ticket/4181)的修复导致的1.2.3中的回归错误，涉及[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")和`OptionEngine`的事件系统的更改没有考虑到事件的移除，当在类级别调用时会引发`AttributeError`。
- en: 'References: [#4190](https://www.sqlalchemy.org/trac/ticket/4190)'
  id: totrans-2067
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4190](https://www.sqlalchemy.org/trac/ticket/4190)
- en: sql
  id: totrans-2068
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-2069
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where CTE expressions would not have their name or alias name quoted
    when the given name is case sensitive or otherwise requires quoting. Pull request
    courtesy Eric Atkin.
  id: totrans-2070
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了CTE表达式的bug，当给定名称区分大小写或需要引号时，它们的名称或别名名称不会被引用。感谢Eric Atkin的拉取请求。
- en: 'References: [#4197](https://www.sqlalchemy.org/trac/ticket/4197)'
  id: totrans-2071
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4197](https://www.sqlalchemy.org/trac/ticket/4197)
- en: 1.2.3
  id: totrans-2072
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.2.3
- en: 'Released: February 16, 2018'
  id: totrans-2073
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2018年2月16日
- en: orm
  id: totrans-2074
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-2075
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new argument [`set_attribute.inititator`](../orm/session_api.html#sqlalchemy.orm.attributes.set_attribute.params.inititator
    "sqlalchemy.orm.attributes.set_attribute") to the [`set_attribute()`](../orm/session_api.html#sqlalchemy.orm.attributes.set_attribute
    "sqlalchemy.orm.attributes.set_attribute") function, allowing an event token received
    from a listener function to be propagated to subsequent set events.
  id: totrans-2076
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向[`set_attribute()`](../orm/session_api.html#sqlalchemy.orm.attributes.set_attribute
    "sqlalchemy.orm.attributes.set_attribute")函数添加了新参数[`set_attribute.inititator`](../orm/session_api.html#sqlalchemy.orm.attributes.set_attribute.params.inititator
    "sqlalchemy.orm.attributes.set_attribute")，允许从监听器函数接收的事件令牌传播到后续的设置事件。
- en: '**[orm] [bug]**'
  id: totrans-2077
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue in post_update feature where an UPDATE is emitted when the parent
    object has been deleted but the dependent object is not. This issue has existed
    for a long time however since 1.2 now asserts rows matched for post_update, this
    was raising an error.
  id: totrans-2078
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了后更新功能中的问题，当父对象已被删除但相关对象尚未删除时会发出UPDATE。这个问题已经存在很长时间，但自1.2版本开始，现在对后更新断言匹配的行数，这会引发错误。
- en: 'This change is also **backported** to: 1.1.16'
  id: totrans-2079
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：1.1.16
- en: 'References: [#4187](https://www.sqlalchemy.org/trac/ticket/4187)'
  id: totrans-2080
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4187](https://www.sqlalchemy.org/trac/ticket/4187)
- en: '**[orm] [bug]**'
  id: totrans-2081
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression caused by fix for issue [#4116](https://www.sqlalchemy.org/trac/ticket/4116)
    affecting versions 1.2.2 as well as 1.1.15, which had the effect of mis-calculation
    of the “owning class” of an [`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") as the `NoneType` class in
    some declarative mixin/inheritance situations as well as if the association proxy
    were accessed off of an un-mapped class. The “figure out the owner” logic has
    been replaced by an in-depth routine that searches through the complete mapper
    hierarchy assigned to the class or subclass to determine the correct (we hope)
    match; will not assign the owner if no match is found. An exception is now raised
    if the proxy is used against an un-mapped instance.
  id: totrans-2082
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由于问题[#4116](https://www.sqlalchemy.org/trac/ticket/4116)修复引起的回归，影响版本1.2.2以及1.1.15，导致在某些声明性混合/继承情况下错误计算[`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy")的“拥有类”为`NoneType`类，以及如果关联代理从未映射的类中访问。“找到所有者”的逻辑已被替换为一个深入的例程，通过搜索分配给类或子类的完整映射器层次结构来确定正确（我们希望）的匹配；如果找不到匹配项，则不会分配所有者。如果对未映射的实例使用代理，则现在会引发异常。
- en: 'This change is also **backported** to: 1.1.16'
  id: totrans-2083
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.1.16
- en: 'References: [#4185](https://www.sqlalchemy.org/trac/ticket/4185)'
  id: totrans-2084
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4185](https://www.sqlalchemy.org/trac/ticket/4185)
- en: '**[orm] [bug]**'
  id: totrans-2085
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [错误]**'
- en: Fixed bug where the [`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle") object did not correctly report upon the primary [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") object represented by the bundle, if any. An immediate
    side effect of this issue was that the new selectinload loader strategy wouldn’t
    work with the horizontal sharding extension.
  id: totrans-2086
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")对象未正确报告由bundle表示的主要[`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")对象的bug，如果有的话。这个问题的一个直接副作用是，新的selectinload加载器策略无法与水平分片扩展一起工作。
- en: 'References: [#4175](https://www.sqlalchemy.org/trac/ticket/4175)'
  id: totrans-2087
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4175](https://www.sqlalchemy.org/trac/ticket/4175)
- en: '**[orm] [bug]**'
  id: totrans-2088
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [错误]**'
- en: Fixed bug in concrete inheritance mapping where user-defined attributes such
    as hybrid properties that mirror the names of mapped attributes from sibling classes
    would be overwritten by the mapper as non-accessible at the instance level. Additionally
    ensured that user-bound descriptors are not implicitly invoked at the class level
    during the mapper configuration stage.
  id: totrans-2089
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了具体继承映射中的bug，其中用户定义的属性（如镜像来自兄弟类的映射属性的混合属性）会被映射器在实例级别被覆盖为不可访问。此外，确保在映射器配置阶段不会在类级别隐式调用用户绑定的描述符。
- en: 'References: [#4188](https://www.sqlalchemy.org/trac/ticket/4188)'
  id: totrans-2090
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4188](https://www.sqlalchemy.org/trac/ticket/4188)
- en: '**[orm] [bug]**'
  id: totrans-2091
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [错误]**'
- en: Fixed bug where the [`reconstructor()`](../orm/mapping_api.html#sqlalchemy.orm.reconstructor
    "sqlalchemy.orm.reconstructor") event helper would not be recognized if it were
    applied to the `__init__()` method of the mapped class.
  id: totrans-2092
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`reconstructor()`](../orm/mapping_api.html#sqlalchemy.orm.reconstructor
    "sqlalchemy.orm.reconstructor")事件助手应用于映射类的`__init__()`方法时不会被识别的bug。
- en: 'References: [#4178](https://www.sqlalchemy.org/trac/ticket/4178)'
  id: totrans-2093
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4178](https://www.sqlalchemy.org/trac/ticket/4178)
- en: engine
  id: totrans-2094
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [bug]**'
  id: totrans-2095
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误]**'
- en: Fixed bug where events associated with an `Engine` at the class level would
    be doubled when the [`Engine.execution_options()`](../core/connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options") method were used. To achieve this,
    the semi-private class `OptionEngine` no longer accepts events directly at the
    class level and will raise an error; the class only propagates class-level events
    from its parent [`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine").
    Instance-level events continue to work as before.
  id: totrans-2096
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，当使用[`Engine.execution_options()`](../core/connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options")方法时，与类级别的`Engine`关联的事件会在类级别时被重复。为了实现这一点，半私有类`OptionEngine`不再直接接受类级别的事件，并将引发错误；该类仅从其父类[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")传播类级别的事件。实例级别的事件继续像以前一样工作。
- en: 'References: [#4181](https://www.sqlalchemy.org/trac/ticket/4181)'
  id: totrans-2097
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4181](https://www.sqlalchemy.org/trac/ticket/4181)
- en: '**[engine] [bug]**'
  id: totrans-2098
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误]**'
- en: The [`URL`](../core/engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    object now allows query keys to be specified multiple times where their values
    will be joined into a list. This is to support the plugins feature documented
    at [`CreateEnginePlugin`](../core/connections.html#sqlalchemy.engine.CreateEnginePlugin
    "sqlalchemy.engine.CreateEnginePlugin") which documents that “plugin” can be passed
    multiple times. Additionally, the plugin names can be passed to [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") outside of the URL using the new [`create_engine.plugins`](../core/engines.html#sqlalchemy.create_engine.params.plugins
    "sqlalchemy.create_engine") parameter.
  id: totrans-2099
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`URL`](../core/engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")对象现在允许多次指定查询键，它们的值将被连接成一个列表。这是为了支持插件功能的特性，该功能在[`CreateEnginePlugin`](../core/connections.html#sqlalchemy.engine.CreateEnginePlugin
    "sqlalchemy.engine.CreateEnginePlugin")中有文档记录，文档中指出“plugin”可以多次传递。此外，插件名称可以通过新的[`create_engine.plugins`](../core/engines.html#sqlalchemy.create_engine.params.plugins
    "sqlalchemy.create_engine")参数在URL之外传递给[`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")。'
- en: 'References: [#4170](https://www.sqlalchemy.org/trac/ticket/4170)'
  id: totrans-2100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4170](https://www.sqlalchemy.org/trac/ticket/4170)
- en: sql
  id: totrans-2101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-2102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added support for [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    to persist the values of the enumeration, rather than the keys, when using a Python
    pep-435 style enumerated object. The user supplies a callable function that will
    return the string values to be persisted. This allows enumerations against non-string
    values to be value-persistable as well. Pull request courtesy Jon Snyder.
  id: totrans-2103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")添加了对持久化枚举值的支持，而不是键，当使用Python
    pep-435风格的枚举对象时。用户提供一个可调用函数，该函数将返回要持久化的字符串值。这允许对非字符串值的枚举进行值持久化。感谢Jon Snyder提供的拉取请求。
- en: 'References: [#3906](https://www.sqlalchemy.org/trac/ticket/3906)'
  id: totrans-2104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3906](https://www.sqlalchemy.org/trac/ticket/3906)
- en: '**[sql] [bug]**'
  id: totrans-2105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where the [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") type wouldn’t handle enum “aliases” correctly, when more
    than one key refers to the same value. Pull request courtesy Daniel Knell.
  id: totrans-2106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")类型在多个键引用相同值时无法正确处理枚举“别名”的错误，感谢Daniel
    Knell提供的拉取请求。
- en: 'References: [#4180](https://www.sqlalchemy.org/trac/ticket/4180)'
  id: totrans-2107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4180](https://www.sqlalchemy.org/trac/ticket/4180)
- en: postgresql
  id: totrans-2108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-2109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: 'Added “SSL SYSCALL error: Operation timed out” to the list of messages that
    trigger a “disconnect” scenario for the psycopg2 driver. Pull request courtesy
    André Cruz.'
  id: totrans-2110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '将“SSL SYSCALL error: Operation timed out”添加到了触发psycopg2驱动程序“断开连接”场景的消息列表中。感谢André
    Cruz提供的拉取请求。'
- en: 'This change is also **backported** to: 1.1.16'
  id: totrans-2111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.1.16
- en: '**[postgresql] [bug]**'
  id: totrans-2112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added “TRUNCATE” to the list of keywords accepted by the PostgreSQL dialect
    as an “autocommit”-triggering keyword. Pull request courtesy Jacob Hayes.
  id: totrans-2113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将“TRUNCATE”添加到了PostgreSQL方言接受的关键字列表中，作为一个“autocommit”触发关键字。感谢Jacob Hayes提供的拉取请求。
- en: 'This change is also **backported** to: 1.1.16'
  id: totrans-2114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回��**到：1.1.16
- en: sqlite
  id: totrans-2115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-2116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Fixed the import error raised when a platform has neither pysqlite2 nor sqlite3
    installed, such that the sqlite3-related import error is raised, not the pysqlite2
    one which is not the actual failure mode. Pull request courtesy Robin.
  id: totrans-2117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当平台上既没有安装pysqlite2也没有安装sqlite3时引发的导入错误，使得引发sqlite3相关的导入错误，而不是实际的失败模式pysqlite2。感谢Robin提供的拉取请求。
- en: oracle
  id: totrans-2118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [feature]**'
  id: totrans-2119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [feature]**'
- en: The ON DELETE options for foreign keys are now part of Oracle reflection. Oracle
    does not support ON UPDATE cascades. Pull request courtesy Miroslav Shubernetskiy.
  id: totrans-2120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 外键的ON DELETE选项现在是Oracle反射的一部分。Oracle不支持ON UPDATE级联。感谢Miroslav Shubernetskiy提供的拉取请求。
- en: '**[oracle] [bug]**'
  id: totrans-2121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed bug in cx_Oracle disconnect detection, used by pre_ping and other features,
    where an error could be raised as DatabaseError which includes a numeric error
    code; previously we weren’t checking in this case for a disconnect code.
  id: totrans-2122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了cx_Oracle断开连接检测中的错误，用于pre_ping和其他功能，其中可能会引发一个包含数字错误代码的DatabaseError; 以前我们在这种情况下没有检查断开连接代码。
- en: 'References: [#4182](https://www.sqlalchemy.org/trac/ticket/4182)'
  id: totrans-2123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4182](https://www.sqlalchemy.org/trac/ticket/4182)
- en: tests
  id: totrans-2124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: tests
- en: '**[tests] [bug]**'
  id: totrans-2125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[tests] [bug]**'
- en: 'A test added in 1.2 thought to confirm a Python 2.7 behavior turns out to be
    confirming the behavior only as of Python 2.7.8\. Python bug #8743 still impacts
    set comparison in Python 2.7.7 and earlier, so the test in question involving
    AssociationSet no longer runs for these older Python 2.7 versions.'
  id: totrans-2126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在1.2版本中添加的一个测试，旨在确认Python 2.7的行为，结果只确认了Python 2.7.8的行为。Python bug＃8743仍然影响Python
    2.7.7及更早版本中的集合比较，因此涉及AssociationSet的相关测试不再适用于这些较旧的Python 2.7版本。
- en: 'References: [#3265](https://www.sqlalchemy.org/trac/ticket/3265)'
  id: totrans-2127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3265](https://www.sqlalchemy.org/trac/ticket/3265)
- en: misc
  id: totrans-2128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [pool]**'
  id: totrans-2129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [pool]**'
- en: Fixed a fairly serious connection pool bug where a connection that is acquired
    after being refreshed as a result of a user-defined [`DisconnectionError`](../core/exceptions.html#sqlalchemy.exc.DisconnectionError
    "sqlalchemy.exc.DisconnectionError") or due to the 1.2-released “pre_ping” feature
    would not be correctly reset if the connection were returned to the pool by weakref
    cleanup (e.g. the front-facing object is garbage collected); the weakref would
    still refer to the previously invalidated DBAPI connection which would have the
    reset operation erroneously called upon it instead. This would lead to stack traces
    in the logs and a connection being checked into the pool without being reset,
    which can cause locking issues.
  id: totrans-2130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个相当严重的连接池错误，即在由于用户定义的[`DisconnectionError`](../core/exceptions.html#sqlalchemy.exc.DisconnectionError
    "sqlalchemy.exc.DisconnectionError")或由于1.2版本发布的“pre_ping”功能导致刷新后获取的连接，如果连接通过弱引用清理（例如前端对象被垃圾回收）返回到池中，则不会正确重置；弱引用仍将指向先前失效的DBAPI连接，而将重置操作错误地调用。这将导致日志中的堆栈跟踪以及将连接检入池中而不进行重置，这可能会导致锁定问题。
- en: 'This change is also **backported** to: 1.1.16'
  id: totrans-2131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：1.1.16
- en: 'References: [#4184](https://www.sqlalchemy.org/trac/ticket/4184)'
  id: totrans-2132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4184](https://www.sqlalchemy.org/trac/ticket/4184)
- en: orm
  id: totrans-2133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-2134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new argument [`set_attribute.inititator`](../orm/session_api.html#sqlalchemy.orm.attributes.set_attribute.params.inititator
    "sqlalchemy.orm.attributes.set_attribute") to the [`set_attribute()`](../orm/session_api.html#sqlalchemy.orm.attributes.set_attribute
    "sqlalchemy.orm.attributes.set_attribute") function, allowing an event token received
    from a listener function to be propagated to subsequent set events.
  id: totrans-2135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[`set_attribute()`](../orm/session_api.html#sqlalchemy.orm.attributes.set_attribute
    "sqlalchemy.orm.attributes.set_attribute")函数中添加了新参数[`set_attribute.inititator`](../orm/session_api.html#sqlalchemy.orm.attributes.set_attribute.params.inititator
    "sqlalchemy.orm.attributes.set_attribute")，允许从监听器函数接收到的事件令牌传播到后续的设置事件。
- en: '**[orm] [bug]**'
  id: totrans-2136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue in post_update feature where an UPDATE is emitted when the parent
    object has been deleted but the dependent object is not. This issue has existed
    for a long time however since 1.2 now asserts rows matched for post_update, this
    was raising an error.
  id: totrans-2137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了后更新功能中的问题，当父对象已被删除但相关对象尚未删除时，会发出UPDATE。这个问题已经存在很长时间，但由于1.2现在断言后更新匹配的行数，因此会引发错误。
- en: 'This change is also **backported** to: 1.1.16'
  id: totrans-2138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：1.1.16
- en: 'References: [#4187](https://www.sqlalchemy.org/trac/ticket/4187)'
  id: totrans-2139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4187](https://www.sqlalchemy.org/trac/ticket/4187)
- en: '**[orm] [bug]**'
  id: totrans-2140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression caused by fix for issue [#4116](https://www.sqlalchemy.org/trac/ticket/4116)
    affecting versions 1.2.2 as well as 1.1.15, which had the effect of mis-calculation
    of the “owning class” of an [`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") as the `NoneType` class in
    some declarative mixin/inheritance situations as well as if the association proxy
    were accessed off of an un-mapped class. The “figure out the owner” logic has
    been replaced by an in-depth routine that searches through the complete mapper
    hierarchy assigned to the class or subclass to determine the correct (we hope)
    match; will not assign the owner if no match is found. An exception is now raised
    if the proxy is used against an un-mapped instance.
  id: totrans-2141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于修复问题[#4116](https://www.sqlalchemy.org/trac/ticket/4116)导致的回归，影响版本1.2.2以及1.1.15，导致在某些声明性混合/继承情况下以及如果关联代理从未映射的类中访问时，错误地计算[`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy")的“拥有类”为`NoneType`类。现在，“找到所有者”的逻辑已被一个深入的例程所取代，该例程通过搜索分配给类或子类的完整映射器层次结构来确定正确（我们希望）的匹配；如果找不到匹配项，则不会分配所有者。如果代理用于未映射的实例，则现在会引发异常。
- en: 'This change is also **backported** to: 1.1.16'
  id: totrans-2142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：1.1.16
- en: 'References: [#4185](https://www.sqlalchemy.org/trac/ticket/4185)'
  id: totrans-2143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4185](https://www.sqlalchemy.org/trac/ticket/4185)
- en: '**[orm] [bug]**'
  id: totrans-2144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where the [`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle") object did not correctly report upon the primary [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") object represented by the bundle, if any. An immediate
    side effect of this issue was that the new selectinload loader strategy wouldn’t
    work with the horizontal sharding extension.
  id: totrans-2145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")
    对象未正确报告由 bundle 表示的主要 [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") 对象（如果有）的 bug。此问题的直接副作用是新的 selectinload 加载器策略无法与水平分片扩展一起使用。
- en: 'References: [#4175](https://www.sqlalchemy.org/trac/ticket/4175)'
  id: totrans-2146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4175](https://www.sqlalchemy.org/trac/ticket/4175)
- en: '**[orm] [bug]**'
  id: totrans-2147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in concrete inheritance mapping where user-defined attributes such
    as hybrid properties that mirror the names of mapped attributes from sibling classes
    would be overwritten by the mapper as non-accessible at the instance level. Additionally
    ensured that user-bound descriptors are not implicitly invoked at the class level
    during the mapper configuration stage.
  id: totrans-2148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了具体继承映射中的 bug，其中用户定义的属性（例如反映与同级类的映射属性相同名称的混合属性）将被映射器覆盖为在实例级别不可访问。此外，确保在映射器配置阶段不会隐式调用用户绑定的描述符。
- en: 'References: [#4188](https://www.sqlalchemy.org/trac/ticket/4188)'
  id: totrans-2149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4188](https://www.sqlalchemy.org/trac/ticket/4188)
- en: '**[orm] [bug]**'
  id: totrans-2150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where the [`reconstructor()`](../orm/mapping_api.html#sqlalchemy.orm.reconstructor
    "sqlalchemy.orm.reconstructor") event helper would not be recognized if it were
    applied to the `__init__()` method of the mapped class.
  id: totrans-2151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当 [`reconstructor()`](../orm/mapping_api.html#sqlalchemy.orm.reconstructor
    "sqlalchemy.orm.reconstructor") 事件助手应用于映射类的 `__init__()` 方法时，它不会被识别的 bug。
- en: 'References: [#4178](https://www.sqlalchemy.org/trac/ticket/4178)'
  id: totrans-2152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4178](https://www.sqlalchemy.org/trac/ticket/4178)
- en: engine
  id: totrans-2153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-2154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed bug where events associated with an `Engine` at the class level would
    be doubled when the [`Engine.execution_options()`](../core/connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options") method were used. To achieve this,
    the semi-private class `OptionEngine` no longer accepts events directly at the
    class level and will raise an error; the class only propagates class-level events
    from its parent [`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine").
    Instance-level events continue to work as before.
  id: totrans-2155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当使用 [`Engine.execution_options()`](../core/connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options") 方法时与 `Engine` 关联的事件在类级别上会重复的 bug。为了实现这一点，半私有类
    `OptionEngine` 不再直接接受类级别的事件，并将引发错误；该类仅从其父类 [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 传播类级别的事件。实例级别的事件继续像以前一样工作。
- en: 'References: [#4181](https://www.sqlalchemy.org/trac/ticket/4181)'
  id: totrans-2156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4181](https://www.sqlalchemy.org/trac/ticket/4181)
- en: '**[engine] [bug]**'
  id: totrans-2157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: The [`URL`](../core/engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    object now allows query keys to be specified multiple times where their values
    will be joined into a list. This is to support the plugins feature documented
    at [`CreateEnginePlugin`](../core/connections.html#sqlalchemy.engine.CreateEnginePlugin
    "sqlalchemy.engine.CreateEnginePlugin") which documents that “plugin” can be passed
    multiple times. Additionally, the plugin names can be passed to [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") outside of the URL using the new [`create_engine.plugins`](../core/engines.html#sqlalchemy.create_engine.params.plugins
    "sqlalchemy.create_engine") parameter.
  id: totrans-2158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`URL`](../core/engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    对象现在允许指定查询键多次，其值将被连接成一个列表。这是为了支持插件功能的特性所做的修改，该特性在 [`CreateEnginePlugin`](../core/connections.html#sqlalchemy.engine.CreateEnginePlugin
    "sqlalchemy.engine.CreateEnginePlugin") 中有详细说明，该文档指出“plugin”可以多次传递。此外，插件名称可以在使用新的
    [`create_engine.plugins`](../core/engines.html#sqlalchemy.create_engine.params.plugins
    "sqlalchemy.create_engine") 参数之外通过 URL 传递给 [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")。'
- en: 'References: [#4170](https://www.sqlalchemy.org/trac/ticket/4170)'
  id: totrans-2159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4170](https://www.sqlalchemy.org/trac/ticket/4170)
- en: sql
  id: totrans-2160
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-2161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added support for [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    to persist the values of the enumeration, rather than the keys, when using a Python
    pep-435 style enumerated object. The user supplies a callable function that will
    return the string values to be persisted. This allows enumerations against non-string
    values to be value-persistable as well. Pull request courtesy Jon Snyder.
  id: totrans-2162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")添加了支持，以持久化枚举的值，而不是键，当使用Python
    pep-435风格的枚举对象时。用户提供一个可调用函数，该函数将返回要持久化的字符串值。这允许对非字符串值的枚举也可以进行值持久化。感谢Jon Snyder的拉取请求。
- en: 'References: [#3906](https://www.sqlalchemy.org/trac/ticket/3906)'
  id: totrans-2163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3906](https://www.sqlalchemy.org/trac/ticket/3906)
- en: '**[sql] [bug]**'
  id: totrans-2164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where the [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") type wouldn’t handle enum “aliases” correctly, when more
    than one key refers to the same value. Pull request courtesy Daniel Knell.
  id: totrans-2165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")类型无法正确处理枚举“别名”的bug，当多个键引用相同值时。感谢Daniel
    Knell的拉取请求。
- en: 'References: [#4180](https://www.sqlalchemy.org/trac/ticket/4180)'
  id: totrans-2166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4180](https://www.sqlalchemy.org/trac/ticket/4180)
- en: postgresql
  id: totrans-2167
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-2168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: 'Added “SSL SYSCALL error: Operation timed out” to the list of messages that
    trigger a “disconnect” scenario for the psycopg2 driver. Pull request courtesy
    André Cruz.'
  id: totrans-2169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '将“SSL SYSCALL error: Operation timed out”添加到触发psycopg2驱动程序“断开连接”场景的消息列表中。感谢André
    Cruz的拉取请求。'
- en: 'This change is also **backported** to: 1.1.16'
  id: totrans-2170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.1.16
- en: '**[postgresql] [bug]**'
  id: totrans-2171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added “TRUNCATE” to the list of keywords accepted by the PostgreSQL dialect
    as an “autocommit”-triggering keyword. Pull request courtesy Jacob Hayes.
  id: totrans-2172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将“TRUNCATE”添加到PostgreSQL方言接受的关键字列表中，作为“自动提交”触发关键字。感谢Jacob Hayes的拉取请求。
- en: 'This change is also **backported** to: 1.1.16'
  id: totrans-2173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.1.16
- en: sqlite
  id: totrans-2174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-2175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Fixed the import error raised when a platform has neither pysqlite2 nor sqlite3
    installed, such that the sqlite3-related import error is raised, not the pysqlite2
    one which is not the actual failure mode. Pull request courtesy Robin.
  id: totrans-2176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当平台既没有安装pysqlite2也没有安装sqlite3时引发的导入错误，使得引发与sqlite3相关的导入错误，而不是实际的失败模式pysqlite2。感谢Robin的拉取请求。
- en: oracle
  id: totrans-2177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [feature]**'
  id: totrans-2178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [feature]**'
- en: The ON DELETE options for foreign keys are now part of Oracle reflection. Oracle
    does not support ON UPDATE cascades. Pull request courtesy Miroslav Shubernetskiy.
  id: totrans-2179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 外键的ON DELETE选项现在是Oracle反射的一部分。Oracle不支持ON UPDATE级联。感谢Miroslav Shubernetskiy的拉取请求。
- en: '**[oracle] [bug]**'
  id: totrans-2180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed bug in cx_Oracle disconnect detection, used by pre_ping and other features,
    where an error could be raised as DatabaseError which includes a numeric error
    code; previously we weren’t checking in this case for a disconnect code.
  id: totrans-2181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了cx_Oracle断开连接检测中的错误，该错误由pre_ping和其他功能使用，可能会引发一个包含数字错误代码的DatabaseError；以前我们在这种情况下没有检查断开连接代码。
- en: 'References: [#4182](https://www.sqlalchemy.org/trac/ticket/4182)'
  id: totrans-2182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4182](https://www.sqlalchemy.org/trac/ticket/4182)
- en: tests
  id: totrans-2183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: tests
- en: '**[tests] [bug]**'
  id: totrans-2184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[tests] [bug]**'
- en: 'A test added in 1.2 thought to confirm a Python 2.7 behavior turns out to be
    confirming the behavior only as of Python 2.7.8\. Python bug #8743 still impacts
    set comparison in Python 2.7.7 and earlier, so the test in question involving
    AssociationSet no longer runs for these older Python 2.7 versions.'
  id: totrans-2185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '在1.2中添加的一个测试，旨在确认Python 2.7行为，结果只确认了Python 2.7.8的行为。Python bug #8743仍然影响Python
    2.7.7及更早版本中的集合比较，因此涉及AssociationSet的相关测试不再适用于这些较旧的Python 2.7版本。'
- en: 'References: [#3265](https://www.sqlalchemy.org/trac/ticket/3265)'
  id: totrans-2186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3265](https://www.sqlalchemy.org/trac/ticket/3265)
- en: misc
  id: totrans-2187
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[bug] [pool]**'
  id: totrans-2188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [pool]**'
- en: Fixed a fairly serious connection pool bug where a connection that is acquired
    after being refreshed as a result of a user-defined [`DisconnectionError`](../core/exceptions.html#sqlalchemy.exc.DisconnectionError
    "sqlalchemy.exc.DisconnectionError") or due to the 1.2-released “pre_ping” feature
    would not be correctly reset if the connection were returned to the pool by weakref
    cleanup (e.g. the front-facing object is garbage collected); the weakref would
    still refer to the previously invalidated DBAPI connection which would have the
    reset operation erroneously called upon it instead. This would lead to stack traces
    in the logs and a connection being checked into the pool without being reset,
    which can cause locking issues.
  id: totrans-2189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个相当严重的连接池错误，即在用户定义的[`DisconnectionError`](../core/exceptions.html#sqlalchemy.exc.DisconnectionError
    "sqlalchemy.exc.DisconnectionError")或由于1.2版本发布的“pre_ping”功能导致刷新后获取的连接，如果连接通过弱引用清理（例如，前端对象被垃圾回收）返回到池中，则不会正确重置；弱引用仍将指向先前失效的DBAPI连接，而将重置操作错误地调用在其上。这将导致日志中的堆栈跟踪和连接被检入池中而未被重置，这可能导致锁定问题。
- en: 'This change is also **backported** to: 1.1.16'
  id: totrans-2190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.1.16
- en: 'References: [#4184](https://www.sqlalchemy.org/trac/ticket/4184)'
  id: totrans-2191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4184](https://www.sqlalchemy.org/trac/ticket/4184)
- en: 1.2.2
  id: totrans-2192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.2.2
- en: 'Released: January 24, 2018'
  id: totrans-2193
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2018年1月24日
- en: orm
  id: totrans-2194
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-2195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed 1.2 regression regarding new bulk_replace event where a backref would
    fail to remove an object from the previous owner when a bulk-assignment assigned
    the object to a new owner.
  id: totrans-2196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了1.2版本关于新的bulk_replace事件的回归，其中当批量赋值将对象分配给新所有者时，反向引用将无法从先前所有者中删除对象。
- en: 'References: [#4171](https://www.sqlalchemy.org/trac/ticket/4171)'
  id: totrans-2197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4171](https://www.sqlalchemy.org/trac/ticket/4171)
- en: mysql
  id: totrans-2198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-2199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Added more MySQL 8.0 reserved words to the MySQL dialect for quoting purposes.
    Pull request courtesy Riccardo Magliocchetti.
  id: totrans-2200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为引用目的向MySQL方言添加了更多MySQL 8.0保留字。感谢Riccardo Magliocchetti的拉取请求。
- en: mssql
  id: totrans-2201
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-2202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Added ODBC error code 10054 to the list of error codes that count as a disconnect
    for ODBC / MSSQL server.
  id: totrans-2203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将ODBC错误代码10054添加到作为ODBC / MSSQL服务器断开连接的错误代码列表中。
- en: 'References: [#4164](https://www.sqlalchemy.org/trac/ticket/4164)'
  id: totrans-2204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4164](https://www.sqlalchemy.org/trac/ticket/4164)
- en: oracle
  id: totrans-2205
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-2206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: The cx_Oracle dialect now calls setinputsizes() with cx_Oracle.NCHAR unconditionally
    when the NVARCHAR2 datatype, in SQLAlchemy corresponding to sqltypes.Unicode(),
    is in use. Per cx_Oracle’s author this allows the correct conversions to occur
    within the Oracle client regardless of the setting for NLS_NCHAR_CHARACTERSET.
  id: totrans-2207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: cx_Oracle方言现在无条件地在使用NVARCHAR2数据类型时调用setinputsizes()，在SQLAlchemy中对应于sqltypes.Unicode()。根据cx_Oracle的作者，这允许在Oracle客户端中发生正确的转换，而不管NLS_NCHAR_CHARACTERSET的设置如何。
- en: 'References: [#4163](https://www.sqlalchemy.org/trac/ticket/4163)'
  id: totrans-2208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4163](https://www.sqlalchemy.org/trac/ticket/4163)
- en: orm
  id: totrans-2209
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-2210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed 1.2 regression regarding new bulk_replace event where a backref would
    fail to remove an object from the previous owner when a bulk-assignment assigned
    the object to a new owner.
  id: totrans-2211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了1.2版本关于新的bulk_replace事件的回归，其中当批量赋值将对象分配给新所有者时，反向引用将无法从先前所有者中删除对象。
- en: 'References: [#4171](https://www.sqlalchemy.org/trac/ticket/4171)'
  id: totrans-2212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4171](https://www.sqlalchemy.org/trac/ticket/4171)
- en: mysql
  id: totrans-2213
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-2214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Added more MySQL 8.0 reserved words to the MySQL dialect for quoting purposes.
    Pull request courtesy Riccardo Magliocchetti.
  id: totrans-2215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为引用目的向MySQL方言添加了更多MySQL 8.0保留字。感谢Riccardo Magliocchetti的拉取请求。
- en: mssql
  id: totrans-2216
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-2217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Added ODBC error code 10054 to the list of error codes that count as a disconnect
    for ODBC / MSSQL server.
  id: totrans-2218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将ODBC错误代码10054添加到作为ODBC / MSSQL服务器断开连接的错误代码列表中。
- en: 'References: [#4164](https://www.sqlalchemy.org/trac/ticket/4164)'
  id: totrans-2219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4164](https://www.sqlalchemy.org/trac/ticket/4164)
- en: oracle
  id: totrans-2220
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-2221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: The cx_Oracle dialect now calls setinputsizes() with cx_Oracle.NCHAR unconditionally
    when the NVARCHAR2 datatype, in SQLAlchemy corresponding to sqltypes.Unicode(),
    is in use. Per cx_Oracle’s author this allows the correct conversions to occur
    within the Oracle client regardless of the setting for NLS_NCHAR_CHARACTERSET.
  id: totrans-2222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: cx_Oracle方言现在无条件地在使用NVARCHAR2数据类型时调用setinputsizes()，在SQLAlchemy中对应于sqltypes.Unicode()。根据cx_Oracle的作者，这允许在Oracle客户端中发生正确的转换，而不管NLS_NCHAR_CHARACTERSET的设置如何。
- en: 'References: [#4163](https://www.sqlalchemy.org/trac/ticket/4163)'
  id: totrans-2223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4163](https://www.sqlalchemy.org/trac/ticket/4163)
- en: 1.2.1
  id: totrans-2224
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.2.1
- en: 'Released: January 15, 2018'
  id: totrans-2225
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2018年1月15日
- en: orm
  id: totrans-2226
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-2227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where an object that is expunged during a rollback of a nested or
    subtransaction which also had its primary key mutated would not be correctly removed
    from the session, causing subsequent issues in using the session.
  id: totrans-2228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在嵌套或子事务回滚期间被清除的对象，该对象还在其主键发生变化时不会被正确地从会话中移除的错误，导致在使用会话时出现后续问题。
- en: 'This change is also **backported** to: 1.1.16'
  id: totrans-2229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：1.1.16
- en: 'References: [#4151](https://www.sqlalchemy.org/trac/ticket/4151)'
  id: totrans-2230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4151](https://www.sqlalchemy.org/trac/ticket/4151)
- en: '**[orm] [bug]**'
  id: totrans-2231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression where pickle format of a Load / _UnboundLoad object (e.g. loader
    options) changed and `__setstate__()` was raising an UnboundLocalError for an
    object received from the legacy format, even though an attempt was made to do
    so. tests are now added to ensure this works.
  id: totrans-2232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了pickle格式的Load / _UnboundLoad对象（例如加载器选项）的回归，其中`__setstate__()`为从旧格式接收的对象引发UnboundLocalError，尽管尝试这样做。现在添加了测试以确保这样可以正常工作。
- en: 'References: [#4159](https://www.sqlalchemy.org/trac/ticket/4159)'
  id: totrans-2233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4159](https://www.sqlalchemy.org/trac/ticket/4159)
- en: '**[orm] [bug]**'
  id: totrans-2234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression caused by new lazyload caching scheme in [#3954](https://www.sqlalchemy.org/trac/ticket/3954)
    where a query that makes use of loader options with of_type would cause lazy loads
    of unrelated paths to fail with a TypeError.
  id: totrans-2235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于[#3954](https://www.sqlalchemy.org/trac/ticket/3954)中的新lazyload缓存方案引起的回归，使用of_type的加载器选项的查询将导致与TypeError一起失败的不相关路径的延迟加载。
- en: 'References: [#4153](https://www.sqlalchemy.org/trac/ticket/4153)'
  id: totrans-2236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4153](https://www.sqlalchemy.org/trac/ticket/4153)
- en: '**[orm] [bug]**'
  id: totrans-2237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in new “selectin” relationship loader where the loader could try to
    load a non-existent relationship when loading a collection of polymorphic objects,
    where only some of the mappers include that relationship, typically when [`PropComparator.of_type()`](../orm/internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type") is being used.
  id: totrans-2238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新的“selectin”关系加载程序中的错误，其中加载程序在加载多态对象集合时可能尝试加载不存在的关系，其中只有一些映射器包含该关系，通常在使用[`PropComparator.of_type()`](../orm/internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type")时。
- en: 'References: [#4156](https://www.sqlalchemy.org/trac/ticket/4156)'
  id: totrans-2239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4156](https://www.sqlalchemy.org/trac/ticket/4156)
- en: sql
  id: totrans-2240
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-2241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") where using the “multi-values” format
    in combination with [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects as keys rather than strings would fail. Pull
    request courtesy Aubrey Stark-Toller.
  id: totrans-2242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values")中的错误，其中在与[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象一起使用“多值”格式作为键而不是字符串时会失败。感谢Aubrey Stark-Toller提供的拉取请求。
- en: 'This change is also **backported** to: 1.1.16'
  id: totrans-2243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：1.1.16
- en: 'References: [#4162](https://www.sqlalchemy.org/trac/ticket/4162)'
  id: totrans-2244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4162](https://www.sqlalchemy.org/trac/ticket/4162)
- en: mssql
  id: totrans-2245
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-2246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed regression in 1.2 where newly repaired quoting of collation names in [#3785](https://www.sqlalchemy.org/trac/ticket/3785)
    breaks SQL Server, which explicitly does not understand a quoted collation name.
    Whether or not mixed-case collation names are quoted or not is now deferred down
    to a dialect-level decision so that each dialect can prepare these identifiers
    directly.
  id: totrans-2247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了1.2中修复的引用名称引用在[#3785](https://www.sqlalchemy.org/trac/ticket/3785)中破坏了SQL
    Server的回归，该引用明确不理解引号引用的排序名称。现在，混合大小写排序名称是否被引用或不被引用现在被推迟到方言级别的决定，以便每个方言可以直接准备这些标识符。
- en: 'References: [#4154](https://www.sqlalchemy.org/trac/ticket/4154)'
  id: totrans-2248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4154](https://www.sqlalchemy.org/trac/ticket/4154)
- en: oracle
  id: totrans-2249
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-2250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed regression where the removal of most setinputsizes rules from cx_Oracle
    dialect impacted the TIMESTAMP datatype’s ability to retrieve fractional seconds.
  id: totrans-2251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了从cx_Oracle方言中删除大多数setinputsizes规则对TIMESTAMP数据类型检索分数秒的影响的回归。
- en: 'References: [#4157](https://www.sqlalchemy.org/trac/ticket/4157)'
  id: totrans-2252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4157](https://www.sqlalchemy.org/trac/ticket/4157)
- en: '**[oracle] [bug]**'
  id: totrans-2253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed regression in Oracle imports where a missing comma caused an undefined
    symbol to be present. Pull request courtesy Miroslav Shubernetskiy.
  id: totrans-2254
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Oracle导入中的回归，其中缺少逗号导致未定义的符号存在。感谢Miroslav Shubernetskiy提供的拉取请求。
- en: tests
  id: totrans-2255
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [bug]**'
  id: totrans-2256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[tests] [bug]**'
- en: Removed an oracle-specific requirements rule from the public test suite that
    was interfering with third party dialect suites.
  id: totrans-2257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从公共测试套件中删除了一个干扰第三方方言套件的特定于 Oracle 的要求规则。
- en: '**[tests] [bug]**'
  id: totrans-2258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[tests] [bug]**'
- en: Added a new exclusion rule group_by_complex_expression which disables tests
    that use “GROUP BY <expr>”, which seems to be not viable for at least two third
    party dialects.
  id: totrans-2259
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的排除规则组 group_by_complex_expression，禁用使用“GROUP BY <expr>”的测试，这在至少两个第三方方言中似乎不可行。
- en: misc
  id: totrans-2260
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[bug] [ext]**'
  id: totrans-2261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed regression in association proxy due to [#3769](https://www.sqlalchemy.org/trac/ticket/3769)
    (allow for chained any() / has()) where contains() against an association proxy
    chained in the form (o2m relationship, associationproxy(m2o relationship, m2o
    relationship)) would raise an error regarding the re-application of contains()
    on the final link of the chain.
  id: totrans-2262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关联代理中的回归问题，原因是 [#3769](https://www.sqlalchemy.org/trac/ticket/3769)（允许链式
    any() / has()）导致的，其中针对关联代理进行 contains() 操作链式化的形式（o2m 关系，关联代理(m2o 关系，m2o 关系)）会导致在链的最后一环重新应用
    contains() 时引发错误。
- en: 'References: [#4150](https://www.sqlalchemy.org/trac/ticket/4150)'
  id: totrans-2263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4150](https://www.sqlalchemy.org/trac/ticket/4150)
- en: orm
  id: totrans-2264
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-2265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where an object that is expunged during a rollback of a nested or
    subtransaction which also had its primary key mutated would not be correctly removed
    from the session, causing subsequent issues in using the session.
  id: totrans-2266
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在嵌套或子事务回滚期间从会话中正确移除在其主键发生变化的对象时，对象不会被正确移除而导致后续使用会话时出现问题的错误。
- en: 'This change is also **backported** to: 1.1.16'
  id: totrans-2267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：1.1.16
- en: 'References: [#4151](https://www.sqlalchemy.org/trac/ticket/4151)'
  id: totrans-2268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4151](https://www.sqlalchemy.org/trac/ticket/4151)
- en: '**[orm] [bug]**'
  id: totrans-2269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression where pickle format of a Load / _UnboundLoad object (e.g. loader
    options) changed and `__setstate__()` was raising an UnboundLocalError for an
    object received from the legacy format, even though an attempt was made to do
    so. tests are now added to ensure this works.
  id: totrans-2270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 pickle 格式的 Load / _UnboundLoad 对象（例如加载器选项）的回归问题，其中 pickle 格式发生变化，而 `__setstate__()`
    对于从旧格式接收的对象引发 UnboundLocalError，尽管尝试这样做。现在添加了测试以确保其正常工作。
- en: 'References: [#4159](https://www.sqlalchemy.org/trac/ticket/4159)'
  id: totrans-2271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4159](https://www.sqlalchemy.org/trac/ticket/4159)
- en: '**[orm] [bug]**'
  id: totrans-2272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression caused by new lazyload caching scheme in [#3954](https://www.sqlalchemy.org/trac/ticket/3954)
    where a query that makes use of loader options with of_type would cause lazy loads
    of unrelated paths to fail with a TypeError.
  id: totrans-2273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由 [#3954](https://www.sqlalchemy.org/trac/ticket/3954) 中新的延迟加载缓存方案引起的回归问题，其中使用带有
    of_type 的 loader 选项的查询会导致与无关路径的延迟加载失败并引发 TypeError。
- en: 'References: [#4153](https://www.sqlalchemy.org/trac/ticket/4153)'
  id: totrans-2274
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4153](https://www.sqlalchemy.org/trac/ticket/4153)
- en: '**[orm] [bug]**'
  id: totrans-2275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in new “selectin” relationship loader where the loader could try to
    load a non-existent relationship when loading a collection of polymorphic objects,
    where only some of the mappers include that relationship, typically when [`PropComparator.of_type()`](../orm/internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type") is being used.
  id: totrans-2276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新的“selectin”关系加载器中的错误，其中加载器在加载多态对象集合时可能尝试加载不存在的关系，通常在使用[`PropComparator.of_type()`](../orm/internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type")时会出现这种情况。
- en: 'References: [#4156](https://www.sqlalchemy.org/trac/ticket/4156)'
  id: totrans-2277
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4156](https://www.sqlalchemy.org/trac/ticket/4156)
- en: sql
  id: totrans-2278
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-2279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") where using the “multi-values” format
    in combination with [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects as keys rather than strings would fail. Pull
    request courtesy Aubrey Stark-Toller.
  id: totrans-2280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values")中的错误，其中在使用“多值”格式与[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象作为键而不是字符串时会失败。感谢 Aubrey Stark-Toller 提交的拉取请求。
- en: 'This change is also **backported** to: 1.1.16'
  id: totrans-2281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：1.1.16
- en: 'References: [#4162](https://www.sqlalchemy.org/trac/ticket/4162)'
  id: totrans-2282
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4162](https://www.sqlalchemy.org/trac/ticket/4162)
- en: mssql
  id: totrans-2283
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-2284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed regression in 1.2 where newly repaired quoting of collation names in [#3785](https://www.sqlalchemy.org/trac/ticket/3785)
    breaks SQL Server, which explicitly does not understand a quoted collation name.
    Whether or not mixed-case collation names are quoted or not is now deferred down
    to a dialect-level decision so that each dialect can prepare these identifiers
    directly.
  id: totrans-2285
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了1.2版本中的回归问题，即在[#3785](https://www.sqlalchemy.org/trac/ticket/3785)中修复的排序名称引号在SQL
    Server中出现问题，因为SQL Server明确不理解带引号的排序名称。现在，混合大小写排序名称是否带引号取决于方言级别的决定，以便每个方言可以直接准备这些标识符。
- en: 'References: [#4154](https://www.sqlalchemy.org/trac/ticket/4154)'
  id: totrans-2286
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4154](https://www.sqlalchemy.org/trac/ticket/4154)
- en: oracle
  id: totrans-2287
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Oracle
- en: '**[oracle] [bug]**'
  id: totrans-2288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[Oracle] [错误]**'
- en: Fixed regression where the removal of most setinputsizes rules from cx_Oracle
    dialect impacted the TIMESTAMP datatype’s ability to retrieve fractional seconds.
  id: totrans-2289
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个回归问题，即从cx_Oracle方言中删除大多数setinputsizes规则影响了TIMESTAMP数据类型检索分数秒的能力。
- en: 'References: [#4157](https://www.sqlalchemy.org/trac/ticket/4157)'
  id: totrans-2290
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4157](https://www.sqlalchemy.org/trac/ticket/4157)
- en: '**[oracle] [bug]**'
  id: totrans-2291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[Oracle] [错误]**'
- en: Fixed regression in Oracle imports where a missing comma caused an undefined
    symbol to be present. Pull request courtesy Miroslav Shubernetskiy.
  id: totrans-2292
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Oracle导入中的回归问题，其中缺少逗号导致出现未定义的符号。感谢Miroslav Shubernetskiy的拉取请求。
- en: tests
  id: totrans-2293
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [bug]**'
  id: totrans-2294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[测试] [错误]**'
- en: Removed an oracle-specific requirements rule from the public test suite that
    was interfering with third party dialect suites.
  id: totrans-2295
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从公共测试套件中删除了一个特定于Oracle的要求规则，该规则干扰了第三方方言套件。
- en: '**[tests] [bug]**'
  id: totrans-2296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[测试] [错误]**'
- en: Added a new exclusion rule group_by_complex_expression which disables tests
    that use “GROUP BY <expr>”, which seems to be not viable for at least two third
    party dialects.
  id: totrans-2297
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的排除规则组group_by_complex_expression，禁用了使用“GROUP BY <expr>”的测试，这似乎对至少两个第三方方言不可行。
- en: misc
  id: totrans-2298
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [ext]**'
  id: totrans-2299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [扩展]**'
- en: Fixed regression in association proxy due to [#3769](https://www.sqlalchemy.org/trac/ticket/3769)
    (allow for chained any() / has()) where contains() against an association proxy
    chained in the form (o2m relationship, associationproxy(m2o relationship, m2o
    relationship)) would raise an error regarding the re-application of contains()
    on the final link of the chain.
  id: totrans-2300
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关联代理中的回归问题，由于[#3769](https://www.sqlalchemy.org/trac/ticket/3769)（允许链式any()
    / has()）导致的问题，其中对关联代理进行contains()操作链式调用形式（o2m关系，associationproxy(m2o关系，m2o关系)）会导致关于在链的最终链接上重新应用contains()的错误。
- en: 'References: [#4150](https://www.sqlalchemy.org/trac/ticket/4150)'
  id: totrans-2301
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4150](https://www.sqlalchemy.org/trac/ticket/4150)
- en: 1.2.0
  id: totrans-2302
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.2.0
- en: 'Released: December 27, 2017'
  id: totrans-2303
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2017年12月27日
- en: orm
  id: totrans-2304
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM
- en: '**[orm] [feature]**'
  id: totrans-2305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [特性]**'
- en: Added a new data member to the identity key tuple used by the ORM’s identity
    map, known as the “identity_token”. This token defaults to None but may be used
    by database sharding schemes to differentiate objects in memory with the same
    primary key that come from different databases. The horizontal sharding extension
    integrates this token applying the shard identifier to it, thus allowing primary
    keys to be duplicated across horizontally sharded backends.
  id: totrans-2306
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向ORM的标识键元组添加了一个新的数据成员，称为“identity_token”。此令牌默认为None，但可以被数据库分片方案用来区分内存中具有相同主键但来自不同数据库的对象。水平分片扩展将此令牌与分片标识符应用，从而允许主键在水平分片后端之间重复。
- en: See also
  id: totrans-2307
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Identity key enhancements to support sharding](migration_12.html#change-4137)'
  id: totrans-2308
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[支持分片的标识键增强](migration_12.html#change-4137)'
- en: 'References: [#4137](https://www.sqlalchemy.org/trac/ticket/4137)'
  id: totrans-2309
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4137](https://www.sqlalchemy.org/trac/ticket/4137)
- en: '**[orm] [bug] [ext]**'
  id: totrans-2310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [错误] [扩展]**'
- en: Fixed bug where the association proxy would inadvertently link itself to an
    [`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    object if it were called first with the [`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") as a parent, causing errors upon subsequent
    usage.
  id: totrans-2311
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关联代理无意中将自身链接到[`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass")对象的错误，如果首先使用[`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass")作为父级调用，会导致后续使用时出错。
- en: 'This change is also **backported** to: 1.1.15'
  id: totrans-2312
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到���1.1.15
- en: 'References: [#4116](https://www.sqlalchemy.org/trac/ticket/4116)'
  id: totrans-2313
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4116](https://www.sqlalchemy.org/trac/ticket/4116)
- en: '**[orm] [bug]**'
  id: totrans-2314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [错误]**'
- en: Fixed bug in [`contains_eager()`](../orm/queryguide/relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") query option where making use of a path that
    used [`PropComparator.of_type()`](../orm/internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type") to refer to a subclass across more than
    one level of joins would also require that the “alias” argument were provided
    with the same subtype in order to avoid adding unwanted FROM clauses to the query;
    additionally, using [`contains_eager()`](../orm/queryguide/relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") across subclasses that use [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") objects of subclasses as the [`PropComparator.of_type()`](../orm/internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type") argument will also render correctly.
  id: totrans-2315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在[`contains_eager()`](../orm/queryguide/relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager")查询选项中的错误，其中使用 [`PropComparator.of_type()`](../orm/internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type") 引用跨多个连接级别到子类的路径还需要提供“别名”参数，并且需要与同一子类型一起使用
    [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")
    对象；此外，对于使用 [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")
    对象作为 [`PropComparator.of_type()`](../orm/internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type") 参数的子类，使用 [`contains_eager()`](../orm/queryguide/relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") 也将正确渲染。
- en: 'References: [#4130](https://www.sqlalchemy.org/trac/ticket/4130)'
  id: totrans-2316
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4130](https://www.sqlalchemy.org/trac/ticket/4130)
- en: '**[orm] [bug]**'
  id: totrans-2317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The [`Query.exists()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.exists
    "sqlalchemy.orm.Query.exists") method will now disable eager loaders for when
    the query is rendered. Previously, joined-eager load joins would be rendered unnecessarily
    as well as subquery eager load queries would be needlessly generated. The new
    behavior matches that of the [`Query.subquery()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.subquery
    "sqlalchemy.orm.Query.subquery") method.
  id: totrans-2318
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Query.exists()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.exists
    "sqlalchemy.orm.Query.exists") 方法现在将在查询被渲染时禁用急加载器。先前，连接的急加载连接将被不必要地渲染，以及不必要地生成子查询急加载查询。新行为与
    [`Query.subquery()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.subquery
    "sqlalchemy.orm.Query.subquery") 方法相匹配。'
- en: 'References: [#4032](https://www.sqlalchemy.org/trac/ticket/4032)'
  id: totrans-2319
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4032](https://www.sqlalchemy.org/trac/ticket/4032)
- en: orm declarative
  id: totrans-2320
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm 声明式
- en: '**[orm] [declarative] [bug]**'
  id: totrans-2321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [声明式] [bug]**'
- en: Fixed a bug where a descriptor, which is a mapped column or a relationship elsewhere
    in a hierarchy based on [`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase"), would be referenced during
    a refresh operation, leading to an error since the attribute is not mapped as
    a mapper property. A similar issue can arise for other attributes like the “type”
    column added by [`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase") if the class fails to include
    “concrete=True” in its mapper, however the check here should also prevent that
    scenario from causing a problem.
  id: totrans-2322
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在刷新操作期间引用描述符时的错误，该描述符是基于 [`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase") 的层次结构中的映射列或其他位置的关系。由于该属性未映射为映射器属性，因此会导致错误。如果类未在其映射器中包含“concrete=True”，则还可能出现类似的问题，例如
    [`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase") 添加的“type”列，但是此处的检查也应防止该方案引起问题。
- en: 'This change is also **backported** to: 1.1.15'
  id: totrans-2323
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.1.15
- en: 'References: [#4124](https://www.sqlalchemy.org/trac/ticket/4124)'
  id: totrans-2324
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4124](https://www.sqlalchemy.org/trac/ticket/4124)
- en: engine
  id: totrans-2325
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [feature]**'
  id: totrans-2326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: The “password” attribute of the [`URL`](../core/engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.url.URL") object can now be any user-defined or user-subclassed
    string object that responds to the Python `str()` builtin. The object passed will
    be maintained as the datamember `URL.password_original` and will be consulted
    when the `URL.password` attribute is read to produce the string value.
  id: totrans-2327
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`URL`](../core/engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.url.URL")
    对象的“password”属性现在可以是任何用户定义或用户子类化的字符串对象，该对象对 Python `str()` 内置函数做出响应。传递的对象将作为数据成员
    `URL.password_original` 维护，并在读取 `URL.password` 属性以生成字符串值时进行查询。'
- en: 'References: [#4089](https://www.sqlalchemy.org/trac/ticket/4089)'
  id: totrans-2328
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4089](https://www.sqlalchemy.org/trac/ticket/4089)
- en: sql
  id: totrans-2329
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-2330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where `__repr__` of [`ColumnDefault`](../core/defaults.html#sqlalchemy.schema.ColumnDefault
    "sqlalchemy.schema.ColumnDefault") would fail if the argument were a tuple. Pull
    request courtesy Nicolas Caniart.
  id: totrans-2331
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了如果参数是元组，则[`ColumnDefault`](../core/defaults.html#sqlalchemy.schema.ColumnDefault
    "sqlalchemy.schema.ColumnDefault")的`__repr__`会失败的错误。感谢Nicolas Caniart提供的拉取请求。
- en: 'This change is also **backported** to: 1.1.15'
  id: totrans-2332
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.1.15
- en: 'References: [#4126](https://www.sqlalchemy.org/trac/ticket/4126)'
  id: totrans-2333
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4126](https://www.sqlalchemy.org/trac/ticket/4126)
- en: '**[sql] [bug]**'
  id: totrans-2334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Reworked the new “autoescape” feature introduced in [New “autoescape” option
    for startswith(), endswith()](migration_12.html#change-2694) in 1.2.0b2 to be
    fully automatic; the escape character now defaults to a forwards slash `"/"` and
    is applied to percent, underscore, as well as the escape character itself, for
    fully automatic escaping. The character can also be changed using the “escape”
    parameter.
  id: totrans-2335
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重新设计了在1.2.0b2中引入的[startswith()，endswith()的新“autoescape”选项](migration_12.html#change-2694)中的新“autoescape”功能，使其完全自动化；转义字符现在默认为斜杠`"/"`，并应用于百分号、下划线以及转义字符本身，以实现完全自动转义。也可以使用“escape”参数更改字符。
- en: See also
  id: totrans-2336
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New “autoescape” option for startswith(), endswith()](migration_12.html#change-2694)'
  id: totrans-2337
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[startswith()，endswith()的新“autoescape”选项](migration_12.html#change-2694)'
- en: 'References: [#2694](https://www.sqlalchemy.org/trac/ticket/2694)'
  id: totrans-2338
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2694](https://www.sqlalchemy.org/trac/ticket/2694)
- en: '**[sql] [bug]**'
  id: totrans-2339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where the [`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata") method would not properly accommodate [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") objects that didn’t consist of simple column expressions,
    such as indexes against a [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct, indexes that used SQL expressions
    or `func`, etc. The routine now copies expressions fully to a new [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") object while substituting all table-bound [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects for those of the target table.
  id: totrans-2340
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata")方法无法正确适应不由简单列表达式组成的[`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")对象的错误，例如针对[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")构造的索引，使用SQL表达式或`func`的索引等。现在该程序将表达式完全复制到新的[`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")对象中，同时将所有绑定到目标表的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象替换为目标表的对象。
- en: 'References: [#4147](https://www.sqlalchemy.org/trac/ticket/4147)'
  id: totrans-2341
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4147](https://www.sqlalchemy.org/trac/ticket/4147)
- en: '**[sql] [bug]**'
  id: totrans-2342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Changed the “visit name” of [`ColumnElement`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") from “column” to “column_element”,
    so that when this element is used as the basis for a user-defined SQL element,
    it is not assumed to behave like a table-bound [`ColumnClause`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause") when processed by various SQL traversal
    utilities, as are commonly used by the ORM.
  id: totrans-2343
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将[`ColumnElement`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")的“visit name”从“column”更改为“column_element”，这样当此元素被用作用户定义的SQL元素的基础时，不会被各种SQL遍历工具（通常由ORM使用）处理时假定其行为类似于绑定到表的[`ColumnClause`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause")。
- en: 'References: [#4142](https://www.sqlalchemy.org/trac/ticket/4142)'
  id: totrans-2344
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4142](https://www.sqlalchemy.org/trac/ticket/4142)
- en: '**[sql] [bug] [ext]**'
  id: totrans-2345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [ext]**'
- en: Fixed issue in [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")
    datatype which is essentially the same issue as that of [#3832](https://www.sqlalchemy.org/trac/ticket/3832),
    except not a regression, where column attachment events on top of [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") would not fire correctly, thus interfering with systems
    which rely upon this. A key use case that was broken by this is the use of mixins
    to declare columns that make use of `MutableList.as_mutable()`.
  id: totrans-2346
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")
    数据类型中的问题，本质上与 [#3832](https://www.sqlalchemy.org/trac/ticket/3832) 的问题相同，只是不是一个回归，即在
    [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")
    上的列附加事件不会正确触发，从而干扰依赖于此的系统。这个问题破坏的一个关键用例是使用 mixins 声明使用 `MutableList.as_mutable()`
    的列。
- en: 'References: [#4141](https://www.sqlalchemy.org/trac/ticket/4141)'
  id: totrans-2347
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4141](https://www.sqlalchemy.org/trac/ticket/4141)
- en: '**[sql] [bug]**'
  id: totrans-2348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in new “expanding bind parameter” feature whereby if multiple params
    were used in one statement, the regular expression would not match the parameter
    name correctly.
  id: totrans-2349
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新的“扩展绑定参数”功能中的 bug，即如果一个语句中使用了多个参数，则正则表达式将无法正确匹配参数名。
- en: 'References: [#4140](https://www.sqlalchemy.org/trac/ticket/4140)'
  id: totrans-2350
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4140](https://www.sqlalchemy.org/trac/ticket/4140)
- en: '**[sql] [enhancement]**'
  id: totrans-2351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [enhancement]**'
- en: Implemented “DELETE..FROM” syntax for PostgreSQL, MySQL, MS SQL Server (as well
    as within the unsupported Sybase dialect) in a manner similar to how “UPDATE..FROM”
    works. A DELETE statement that refers to more than one table will switch into
    “multi-table” mode and render the appropriate “USING” or multi-table “FROM” clause
    as understood by the database. Pull request courtesy Pieter Mulder.
  id: totrans-2352
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 PostgreSQL、MySQL、MS SQL Server（以及不支持的 Sybase 方言中）实现了“DELETE..FROM”语法，类似于“UPDATE..FROM”的工作方式。引用多个表的
    DELETE 语句将切换到“多表”模式，并呈现数据库理解的适当的“USING”或多表“FROM”子句。感谢 Pieter Mulder 的拉取请求。
- en: See also
  id: totrans-2353
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Multiple-table criteria support for DELETE](migration_12.html#change-959)'
  id: totrans-2354
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[DELETE 的多表条件支持](migration_12.html#change-959)'
- en: 'References: [#959](https://www.sqlalchemy.org/trac/ticket/959)'
  id: totrans-2355
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#959](https://www.sqlalchemy.org/trac/ticket/959)
- en: postgresql
  id: totrans-2356
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-2357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added new [`MONEY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.MONEY
    "sqlalchemy.dialects.postgresql.MONEY") datatype. Pull request courtesy Cleber
    J Santos.
  id: totrans-2358
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的[`MONEY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.MONEY
    "sqlalchemy.dialects.postgresql.MONEY") 数据类型。感谢 Cleber J Santos 的拉取请求。
- en: mysql
  id: totrans-2359
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-2360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: MySQL 5.7.20 now warns for use of the @tx_isolation variable; a version check
    is now performed and uses @transaction_isolation instead to prevent this warning.
  id: totrans-2361
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL 5.7.20 现在警告使用 @tx_isolation 变量；现在执行版本检查并使用 @transaction_isolation 代替以防止此警告。
- en: 'This change is also **backported** to: 1.1.15'
  id: totrans-2362
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.1.15
- en: 'References: [#4120](https://www.sqlalchemy.org/trac/ticket/4120)'
  id: totrans-2363
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4120](https://www.sqlalchemy.org/trac/ticket/4120)
- en: '**[mysql] [bug]**'
  id: totrans-2364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed regression from issue 1.2.0b3 where “MariaDB” version comparison can fail
    for some particular MariaDB version strings under Python 3.
  id: totrans-2365
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了从问题 1.2.0b3 中的回归，其中“MariaDB”版本比较可能在某些特定的 MariaDB 版本字符串下在 Python 3 中失败。
- en: 'References: [#4115](https://www.sqlalchemy.org/trac/ticket/4115)'
  id: totrans-2366
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4115](https://www.sqlalchemy.org/trac/ticket/4115)
- en: mssql
  id: totrans-2367
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-2368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed bug where sqltypes.BINARY and sqltypes.VARBINARY datatypes would not include
    correct bound-value handlers for pyodbc, which allows the pyodbc.NullParam value
    to be passed that helps with FreeTDS.
  id: totrans-2369
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 pyodbc 中 sqltypes.BINARY 和 sqltypes.VARBINARY 数据类型不包含正确的 bound-value 处理程序的
    bug，这允许传递 pyodbc.NullParam 值以帮助 FreeTDS。
- en: 'References: [#4121](https://www.sqlalchemy.org/trac/ticket/4121)'
  id: totrans-2370
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4121](https://www.sqlalchemy.org/trac/ticket/4121)
- en: oracle
  id: totrans-2371
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-2372
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Added some additional rules to fully handle `Decimal('Infinity')`, `Decimal('-Infinity')`
    values with cx_Oracle numerics when using `asdecimal=True`.
  id: totrans-2373
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一些额外规则，以完全处理使用 `asdecimal=True` 时，cx_Oracle 数值中的 `Decimal('Infinity')`、`Decimal('-Infinity')`
    值。
- en: 'References: [#4064](https://www.sqlalchemy.org/trac/ticket/4064)'
  id: totrans-2374
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4064](https://www.sqlalchemy.org/trac/ticket/4064)
- en: misc
  id: totrans-2375
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[misc] [feature]**'
  id: totrans-2376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[misc] [feature]**'
- en: Added a new errors section to the documentation with background about common
    error messages. Selected exceptions within SQLAlchemy will include a link in their
    string output to the relevant section within this page.
  id: totrans-2377
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在文档中添加了一个新的错误部分，其中包含关于常见错误消息的背景信息。SQLAlchemy 中的选定异常将在其字符串输出中包含指向此页面相关部分的链接。
- en: '**[enhancement] [ext]**'
  id: totrans-2378
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[enhancement] [ext]**'
- en: Added new method `Result.with_post_criteria()` to baked query system, allowing
    non-SQL-modifying transformations to take place after the query has been pulled
    from the cache. Among other things, this method can be used with [`ShardedQuery`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedQuery
    "sqlalchemy.ext.horizontal_shard.ShardedQuery") to set the shard identifier. [`ShardedQuery`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedQuery
    "sqlalchemy.ext.horizontal_shard.ShardedQuery") has also been modified such that
    its `ShardedQuery.get()` method interacts correctly with that of `Result`.
  id: totrans-2379
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新方法`Result.with_post_criteria()`到烘焙查询系统，允许在从缓存中提取查询后进行非SQL修改转换。此方法可以与[`ShardedQuery`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedQuery
    "sqlalchemy.ext.horizontal_shard.ShardedQuery")一起使用，以设置分片标识符。[`ShardedQuery`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedQuery
    "sqlalchemy.ext.horizontal_shard.ShardedQuery")也已经修改，使其`ShardedQuery.get()`方法与`Result`的方法正确交互。
- en: 'References: [#4135](https://www.sqlalchemy.org/trac/ticket/4135)'
  id: totrans-2380
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4135](https://www.sqlalchemy.org/trac/ticket/4135)
- en: orm
  id: totrans-2381
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-2382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Added a new data member to the identity key tuple used by the ORM’s identity
    map, known as the “identity_token”. This token defaults to None but may be used
    by database sharding schemes to differentiate objects in memory with the same
    primary key that come from different databases. The horizontal sharding extension
    integrates this token applying the shard identifier to it, thus allowing primary
    keys to be duplicated across horizontally sharded backends.
  id: totrans-2383
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向ORM的身份映射中使用的身份键元组添加了一个名为“identity_token”的新数据成员。此令牌默认为None，但可以被数据库分片方案用来区分来自不同数据库的具有相同主键的内存对象。水平分片扩展将此令牌与分片标识符结合起来，从而允许主键在水平分片后端之间重复。
- en: See also
  id: totrans-2384
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Identity key enhancements to support sharding](migration_12.html#change-4137)'
  id: totrans-2385
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[支持分片的身份键增强](migration_12.html#change-4137)'
- en: 'References: [#4137](https://www.sqlalchemy.org/trac/ticket/4137)'
  id: totrans-2386
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4137](https://www.sqlalchemy.org/trac/ticket/4137)
- en: '**[orm] [bug] [ext]**'
  id: totrans-2387
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误] [扩展]**'
- en: Fixed bug where the association proxy would inadvertently link itself to an
    [`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    object if it were called first with the [`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") as a parent, causing errors upon subsequent
    usage.
  id: totrans-2388
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关联代理在首次使用时会错误地将自身链接到[`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass")对象的错误，如果首先将[`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass")作为父级调用，将导致后续使用时出现错误。
- en: 'This change is also **backported** to: 1.1.15'
  id: totrans-2389
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**到：1.1.15
- en: 'References: [#4116](https://www.sqlalchemy.org/trac/ticket/4116)'
  id: totrans-2390
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4116](https://www.sqlalchemy.org/trac/ticket/4116)
- en: '**[orm] [bug]**'
  id: totrans-2391
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed bug in [`contains_eager()`](../orm/queryguide/relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") query option where making use of a path that
    used [`PropComparator.of_type()`](../orm/internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type") to refer to a subclass across more than
    one level of joins would also require that the “alias” argument were provided
    with the same subtype in order to avoid adding unwanted FROM clauses to the query;
    additionally, using [`contains_eager()`](../orm/queryguide/relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") across subclasses that use [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") objects of subclasses as the [`PropComparator.of_type()`](../orm/internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type") argument will also render correctly.
  id: totrans-2392
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`contains_eager()`](../orm/queryguide/relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager")查询选项中的错误，其中使用路径使用[`PropComparator.of_type()`](../orm/internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type")引用跨越多个级别的连接到子类的情况还需要提供“alias”参数，以避免向查询添加不需要的FROM子句；此外，跨子类使用[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased")对象作为[`PropComparator.of_type()`](../orm/internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type")参数使用[`contains_eager()`](../orm/queryguide/relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager")也将正确呈现。
- en: 'References: [#4130](https://www.sqlalchemy.org/trac/ticket/4130)'
  id: totrans-2393
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4130](https://www.sqlalchemy.org/trac/ticket/4130)
- en: '**[orm] [bug]**'
  id: totrans-2394
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: The [`Query.exists()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.exists
    "sqlalchemy.orm.Query.exists") method will now disable eager loaders for when
    the query is rendered. Previously, joined-eager load joins would be rendered unnecessarily
    as well as subquery eager load queries would be needlessly generated. The new
    behavior matches that of the [`Query.subquery()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.subquery
    "sqlalchemy.orm.Query.subquery") method.
  id: totrans-2395
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Query.exists()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.exists
    "sqlalchemy.orm.Query.exists") 方法现在在查询被渲染时会禁用急加载器。以前，连接急加载连接会被不必要地渲染，以及子查询急加载查询也会被不必要地生成。新行为与
    [`Query.subquery()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.subquery
    "sqlalchemy.orm.Query.subquery") 方法相匹配。'
- en: 'References: [#4032](https://www.sqlalchemy.org/trac/ticket/4032)'
  id: totrans-2396
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4032](https://www.sqlalchemy.org/trac/ticket/4032)
- en: orm declarative
  id: totrans-2397
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm declarative
- en: '**[orm] [declarative] [bug]**'
  id: totrans-2398
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Fixed a bug where a descriptor, which is a mapped column or a relationship elsewhere
    in a hierarchy based on [`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase"), would be referenced during
    a refresh operation, leading to an error since the attribute is not mapped as
    a mapper property. A similar issue can arise for other attributes like the “type”
    column added by [`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase") if the class fails to include
    “concrete=True” in its mapper, however the check here should also prevent that
    scenario from causing a problem.
  id: totrans-2399
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，其中描述符，在基于 [`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase") 的层次结构中的映射列或关系，在刷新操作期间会被引用，导致错误，因为该属性未映射为映射器属性。如果类未在其映射器中包含“concrete=True”，则类似问题也可能出现在其他属性上，比如
    [`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase") 添加的“type” 列，但此处的检查也应防止该场景引起问题。
- en: 'This change is also **backported** to: 1.1.15'
  id: totrans-2400
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被 **回溯** 至：1.1.15
- en: 'References: [#4124](https://www.sqlalchemy.org/trac/ticket/4124)'
  id: totrans-2401
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4124](https://www.sqlalchemy.org/trac/ticket/4124)
- en: engine
  id: totrans-2402
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [feature]**'
  id: totrans-2403
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: The “password” attribute of the [`URL`](../core/engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.url.URL") object can now be any user-defined or user-subclassed
    string object that responds to the Python `str()` builtin. The object passed will
    be maintained as the datamember `URL.password_original` and will be consulted
    when the `URL.password` attribute is read to produce the string value.
  id: totrans-2404
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`URL`](../core/engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.url.URL")
    对象的“password”属性现在可以是任何用户定义或用户子类化的字符串对象，该对象响应于 Python 的 `str()` 内置函数。传递的对象将保持为数据成员
    `URL.password_original`，并在读取 `URL.password` 属性时进行查询以生成字符串值。'
- en: 'References: [#4089](https://www.sqlalchemy.org/trac/ticket/4089)'
  id: totrans-2405
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4089](https://www.sqlalchemy.org/trac/ticket/4089)
- en: sql
  id: totrans-2406
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-2407
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where `__repr__` of [`ColumnDefault`](../core/defaults.html#sqlalchemy.schema.ColumnDefault
    "sqlalchemy.schema.ColumnDefault") would fail if the argument were a tuple. Pull
    request courtesy Nicolas Caniart.
  id: totrans-2408
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 `__repr__` 的 [`ColumnDefault`](../core/defaults.html#sqlalchemy.schema.ColumnDefault
    "sqlalchemy.schema.ColumnDefault") 在参数为元组时会失败的错误。感谢 Nicolas Caniart 提交的拉取请求。
- en: 'This change is also **backported** to: 1.1.15'
  id: totrans-2409
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被 **回溯** 至：1.1.15
- en: 'References: [#4126](https://www.sqlalchemy.org/trac/ticket/4126)'
  id: totrans-2410
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4126](https://www.sqlalchemy.org/trac/ticket/4126)
- en: '**[sql] [bug]**'
  id: totrans-2411
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Reworked the new “autoescape” feature introduced in [New “autoescape” option
    for startswith(), endswith()](migration_12.html#change-2694) in 1.2.0b2 to be
    fully automatic; the escape character now defaults to a forwards slash `"/"` and
    is applied to percent, underscore, as well as the escape character itself, for
    fully automatic escaping. The character can also be changed using the “escape”
    parameter.
  id: totrans-2412
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重新设计了在 1.2.0b2 中引入的 [New “autoescape” option for startswith(), endswith()](migration_12.html#change-2694)
    中的新“autoescape”功能，现在完全自动化；转义字符现在默认为正斜杠 `"/"`，并应用于百分号、下划线，以及转义字符本身，实现完全自动转义。该字符也可以使用“escape”参数进行更改。
- en: See also
  id: totrans-2413
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New “autoescape” option for startswith(), endswith()](migration_12.html#change-2694)'
  id: totrans-2414
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[New “autoescape” option for startswith(), endswith()](migration_12.html#change-2694)'
- en: 'References: [#2694](https://www.sqlalchemy.org/trac/ticket/2694)'
  id: totrans-2415
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2694](https://www.sqlalchemy.org/trac/ticket/2694)
- en: '**[sql] [bug]**'
  id: totrans-2416
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where the [`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata") method would not properly accommodate [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") objects that didn’t consist of simple column expressions,
    such as indexes against a [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct, indexes that used SQL expressions
    or `func`, etc. The routine now copies expressions fully to a new [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") object while substituting all table-bound [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects for those of the target table.
  id: totrans-2417
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata")方法无法正确适应不仅由简单列表达式组成的[`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")对象，例如针对[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")构造的索引，使用 SQL 表达式或 `func` 的索引等。现在，该例程将完全复制表达式到新的[`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")对象，同时将所有绑定到目标表的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象替换为目标表的对象。
- en: 'References: [#4147](https://www.sqlalchemy.org/trac/ticket/4147)'
  id: totrans-2418
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4147](https://www.sqlalchemy.org/trac/ticket/4147)
- en: '**[sql] [bug]**'
  id: totrans-2419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Changed the “visit name” of [`ColumnElement`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") from “column” to “column_element”,
    so that when this element is used as the basis for a user-defined SQL element,
    it is not assumed to behave like a table-bound [`ColumnClause`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause") when processed by various SQL traversal
    utilities, as are commonly used by the ORM.
  id: totrans-2420
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将[`ColumnElement`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")的“visit name”从“column”更改为“column_element”，这样当此元素用作用户定义的
    SQL 元素的基础时，不会被假定为在被各种 SQL 遍历工具处理时表现得像绑定到表的[`ColumnClause`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause")，这些工具通常被 ORM 使用。
- en: 'References: [#4142](https://www.sqlalchemy.org/trac/ticket/4142)'
  id: totrans-2421
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4142](https://www.sqlalchemy.org/trac/ticket/4142)
- en: '**[sql] [bug] [ext]**'
  id: totrans-2422
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [ext]**'
- en: Fixed issue in [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")
    datatype which is essentially the same issue as that of [#3832](https://www.sqlalchemy.org/trac/ticket/3832),
    except not a regression, where column attachment events on top of [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") would not fire correctly, thus interfering with systems
    which rely upon this. A key use case that was broken by this is the use of mixins
    to declare columns that make use of `MutableList.as_mutable()`.
  id: totrans-2423
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")
    数据类型中的问题，本质上与 [#3832](https://www.sqlalchemy.org/trac/ticket/3832) 的问题相同，只是不是一个回归，即在
    [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")
    上的列附加事件不会正确触发，从而干扰依赖此功能的系统。这一问题破坏的一个关键用例是使用 mixins 声明使用 `MutableList.as_mutable()`
    的列。
- en: 'References: [#4141](https://www.sqlalchemy.org/trac/ticket/4141)'
  id: totrans-2424
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4141](https://www.sqlalchemy.org/trac/ticket/4141)
- en: '**[sql] [bug]**'
  id: totrans-2425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in new “expanding bind parameter” feature whereby if multiple params
    were used in one statement, the regular expression would not match the parameter
    name correctly.
  id: totrans-2426
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新的“扩展绑定参数”功能中的 bug，即如果一个语句中使用了多个参数，则正则表达式将无法正确匹配参数名称。
- en: 'References: [#4140](https://www.sqlalchemy.org/trac/ticket/4140)'
  id: totrans-2427
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4140](https://www.sqlalchemy.org/trac/ticket/4140)
- en: '**[sql] [enhancement]**'
  id: totrans-2428
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [enhancement]**'
- en: Implemented “DELETE..FROM” syntax for PostgreSQL, MySQL, MS SQL Server (as well
    as within the unsupported Sybase dialect) in a manner similar to how “UPDATE..FROM”
    works. A DELETE statement that refers to more than one table will switch into
    “multi-table” mode and render the appropriate “USING” or multi-table “FROM” clause
    as understood by the database. Pull request courtesy Pieter Mulder.
  id: totrans-2429
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 实现了针对 PostgreSQL、MySQL、MS SQL Server（以及不支持的 Sybase 方言）的“DELETE..FROM”语法，类似于“UPDATE..FROM”工作方式。引用多个表的
    DELETE 语句将切换到“多表”模式，并根据数据库理解的方式生成适当的“USING”或多表“FROM”子句。感谢 Pieter Mulder 的拉取请求。
- en: See also
  id: totrans-2430
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Multiple-table criteria support for DELETE](migration_12.html#change-959)'
  id: totrans-2431
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[支持多表条件的 DELETE](migration_12.html#change-959)'
- en: 'References: [#959](https://www.sqlalchemy.org/trac/ticket/959)'
  id: totrans-2432
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#959](https://www.sqlalchemy.org/trac/ticket/959)
- en: postgresql
  id: totrans-2433
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-2434
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added new [`MONEY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.MONEY
    "sqlalchemy.dialects.postgresql.MONEY") datatype. Pull request courtesy Cleber
    J Santos.
  id: totrans-2435
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的[`MONEY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.MONEY
    "sqlalchemy.dialects.postgresql.MONEY")数据类型。感谢 Cleber J Santos 的拉取请求。
- en: mysql
  id: totrans-2436
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-2437
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: MySQL 5.7.20 now warns for use of the @tx_isolation variable; a version check
    is now performed and uses @transaction_isolation instead to prevent this warning.
  id: totrans-2438
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL 5.7.20现在警告使用@tx_isolation变量；现在执行版本检查并使用@transaction_isolation代替以防止此警告。
- en: 'This change is also **backported** to: 1.1.15'
  id: totrans-2439
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.1.15
- en: 'References: [#4120](https://www.sqlalchemy.org/trac/ticket/4120)'
  id: totrans-2440
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4120](https://www.sqlalchemy.org/trac/ticket/4120)
- en: '**[mysql] [bug]**'
  id: totrans-2441
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed regression from issue 1.2.0b3 where “MariaDB” version comparison can fail
    for some particular MariaDB version strings under Python 3.
  id: totrans-2442
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了从问题1.2.0b3中的回归，其中“MariaDB”版本比较可能在某些特定MariaDB版本字符串下在Python 3下失败。
- en: 'References: [#4115](https://www.sqlalchemy.org/trac/ticket/4115)'
  id: totrans-2443
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4115](https://www.sqlalchemy.org/trac/ticket/4115)
- en: mssql
  id: totrans-2444
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-2445
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed bug where sqltypes.BINARY and sqltypes.VARBINARY datatypes would not include
    correct bound-value handlers for pyodbc, which allows the pyodbc.NullParam value
    to be passed that helps with FreeTDS.
  id: totrans-2446
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，其中sqltypes.BINARY和sqltypes.VARBINARY数据类型不会为pyodbc包括正确的绑定值处理程序，这允许传递pyodbc.NullParam值，有助于FreeTDS。
- en: 'References: [#4121](https://www.sqlalchemy.org/trac/ticket/4121)'
  id: totrans-2447
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4121](https://www.sqlalchemy.org/trac/ticket/4121)
- en: oracle
  id: totrans-2448
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-2449
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Added some additional rules to fully handle `Decimal('Infinity')`, `Decimal('-Infinity')`
    values with cx_Oracle numerics when using `asdecimal=True`.
  id: totrans-2450
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一些额外规则，以完全处理`Decimal('Infinity')`，`Decimal('-Infinity')`值与使用`asdecimal=True`时的cx_Oracle数值。
- en: 'References: [#4064](https://www.sqlalchemy.org/trac/ticket/4064)'
  id: totrans-2451
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4064](https://www.sqlalchemy.org/trac/ticket/4064)
- en: misc
  id: totrans-2452
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[misc] [feature]**'
  id: totrans-2453
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[misc] [feature]**'
- en: Added a new errors section to the documentation with background about common
    error messages. Selected exceptions within SQLAlchemy will include a link in their
    string output to the relevant section within this page.
  id: totrans-2454
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在文档中添加了一个新的错误部分，介绍常见错误消息的背景。SQLAlchemy中的选定异常将在其字符串输出中包含指向此页面相关部分的链接。
- en: '**[enhancement] [ext]**'
  id: totrans-2455
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[enhancement] [ext]**'
- en: Added new method `Result.with_post_criteria()` to baked query system, allowing
    non-SQL-modifying transformations to take place after the query has been pulled
    from the cache. Among other things, this method can be used with [`ShardedQuery`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedQuery
    "sqlalchemy.ext.horizontal_shard.ShardedQuery") to set the shard identifier. [`ShardedQuery`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedQuery
    "sqlalchemy.ext.horizontal_shard.ShardedQuery") has also been modified such that
    its `ShardedQuery.get()` method interacts correctly with that of `Result`.
  id: totrans-2456
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新方法`Result.with_post_criteria()`到烘焙查询系统，允许在查询从缓存中拉取后进行非SQL修改转换。除其他外，此方法可与[`ShardedQuery`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedQuery
    "sqlalchemy.ext.horizontal_shard.ShardedQuery")一起使用以设置分片标识符。[`ShardedQuery`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedQuery
    "sqlalchemy.ext.horizontal_shard.ShardedQuery")也已修改，使其`ShardedQuery.get()`方法与`Result`的方法正确交互。
- en: 'References: [#4135](https://www.sqlalchemy.org/trac/ticket/4135)'
  id: totrans-2457
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4135](https://www.sqlalchemy.org/trac/ticket/4135)
- en: 1.2.0b3
  id: totrans-2458
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.2.0b3
- en: 'Released: October 13, 2017'
  id: totrans-2459
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2017年10月13日
- en: orm
  id: totrans-2460
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-2461
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where ORM relationship would warn against conflicting sync targets
    (e.g. two relationships would both write to the same column) for sibling classes
    in an inheritance hierarchy, where the two relationships would never actually
    conflict during writes.
  id: totrans-2462
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，其中ORM关系会警告存在冲突的同步目标（例如，两个关系都将写入同一列）对于继承层次结构中的兄弟类，在这种情况下，两个关系实际上永远不会在写入时发生冲突。
- en: 'This change is also **backported** to: 1.1.15'
  id: totrans-2463
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.1.15
- en: 'References: [#4078](https://www.sqlalchemy.org/trac/ticket/4078)'
  id: totrans-2464
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4078](https://www.sqlalchemy.org/trac/ticket/4078)
- en: '**[orm] [bug]**'
  id: totrans-2465
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where correlated select used against single-table inheritance entity
    would fail to render correctly in the outer query, due to adjustment for single
    inheritance discriminator criteria inappropriately re-applying the criteria to
    the outer query.
  id: totrans-2466
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，其中针对单表继承实体使用相关选择会导致外部查询无法正确呈现，因为调整单一继承鉴别器条件不适当地重新应用于外部查询。
- en: 'This change is also **backported** to: 1.1.15'
  id: totrans-2467
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此��改也**回溯**到：1.1.15
- en: 'References: [#4103](https://www.sqlalchemy.org/trac/ticket/4103)'
  id: totrans-2468
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4103](https://www.sqlalchemy.org/trac/ticket/4103)
- en: '**[orm] [bug]**'
  id: totrans-2469
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in [`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge") following along similar lines as that of [#4030](https://www.sqlalchemy.org/trac/ticket/4030),
    where an internal check for a target object in the identity map could lead to
    an error if it were to be garbage collected immediately before the merge routine
    actually retrieves the object.
  id: totrans-2470
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge "sqlalchemy.orm.Session.merge")中修复了一个错误，与[#4030](https://www.sqlalchemy.org/trac/ticket/4030)类似，其中对于标识映射中的目标对象的内部检查，如果在合并过程实际检索对象之前立即被垃圾回收，可能会导致错误。
- en: 'This change is also **backported** to: 1.1.14'
  id: totrans-2471
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.1.14
- en: 'References: [#4069](https://www.sqlalchemy.org/trac/ticket/4069)'
  id: totrans-2472
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4069](https://www.sqlalchemy.org/trac/ticket/4069)
- en: '**[orm] [bug]**'
  id: totrans-2473
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where an [`undefer_group()`](../orm/queryguide/columns.html#sqlalchemy.orm.undefer_group
    "sqlalchemy.orm.undefer_group") option would not be recognized if it extended
    from a relationship that was loading using joined eager loading. Additionally,
    as the bug led to excess work being performed, Python function call counts are
    also improved by 20% within the initial calculation of result set columns, complementing
    the joined eager load improvements of [#3915](https://www.sqlalchemy.org/trac/ticket/3915).
  id: totrans-2474
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即如果从使用连接式急加载加载的关系扩展，则不会识别[`undefer_group()`](../orm/queryguide/columns.html#sqlalchemy.orm.undefer_group
    "sqlalchemy.orm.undefer_group")选项。此外，由于该错误导致执行过多的工作，因此在结果集列的初始计算中，Python函数调用次数也提高了20%，这与[#3915](https://www.sqlalchemy.org/trac/ticket/3915)的连接急加载改进相辅相成。
- en: 'This change is also **backported** to: 1.1.14'
  id: totrans-2475
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.1.14
- en: 'References: [#4048](https://www.sqlalchemy.org/trac/ticket/4048)'
  id: totrans-2476
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4048](https://www.sqlalchemy.org/trac/ticket/4048)
- en: '**[orm] [bug]**'
  id: totrans-2477
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in [`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge") where objects in a collection that had the primary
    key attribute set to `None` for a key that is typically autoincrementing would
    be considered to be a database-persisted key for part of the internal deduplication
    process, causing only one object to actually be inserted in the database.
  id: totrans-2478
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，在[`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge")中，如果集合中的对象的主键属性设置为`None`，而该属性通常是自动递增的键，则在内部去重过程的一部分中，这些对象将被视为数据库持久化键，导致实际上只有一个对象被插入到数据库中。
- en: 'This change is also **backported** to: 1.1.14'
  id: totrans-2479
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.1.14
- en: 'References: [#4056](https://www.sqlalchemy.org/trac/ticket/4056)'
  id: totrans-2480
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4056](https://www.sqlalchemy.org/trac/ticket/4056)
- en: '**[orm] [bug]**'
  id: totrans-2481
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: An [`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError") is raised when a [`synonym()`](../orm/mapped_attributes.html#sqlalchemy.orm.synonym
    "sqlalchemy.orm.synonym") is used against an attribute that is not against a [`MapperProperty`](../orm/internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty"), such as an association proxy. Previously, a
    recursion overflow would occur trying to locate non-existent attributes.
  id: totrans-2482
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当针对不是针对[`MapperProperty`](../orm/internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty")的属性（如关联代理）使用[`synonym()`](../orm/mapped_attributes.html#sqlalchemy.orm.synonym
    "sqlalchemy.orm.synonym")时，会引发[`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError")。以前，尝试定位不存在的属性会导致递归溢出。
- en: 'This change is also **backported** to: 1.1.14'
  id: totrans-2483
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.1.14
- en: 'References: [#4067](https://www.sqlalchemy.org/trac/ticket/4067)'
  id: totrans-2484
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4067](https://www.sqlalchemy.org/trac/ticket/4067)
- en: '**[orm] [bug]**'
  id: totrans-2485
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression introduced in 1.2.0b1 due to [#3934](https://www.sqlalchemy.org/trac/ticket/3934)
    where the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    would fail to “deactivate” the transaction, if a rollback failed (the target issue
    is when MySQL loses track of a SAVEPOINT). This would cause a subsequent call
    to [`Session.rollback()`](../orm/session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") to raise an error a second time, rather than
    completing and bringing the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") back to ACTIVE.
  id: totrans-2486
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了1.2.0b1中引入的回归问题，由于[#3934](https://www.sqlalchemy.org/trac/ticket/3934)，如果回滚失败（目标问题是当MySQL丢失SAVEPOINT时），[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")将无法“停用”事务。这将导致随后对[`Session.rollback()`](../orm/session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback")的调用再次引发错误，而不是完成并将[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")恢复为活动状态。
- en: 'References: [#4050](https://www.sqlalchemy.org/trac/ticket/4050)'
  id: totrans-2487
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4050](https://www.sqlalchemy.org/trac/ticket/4050)
- en: '**[orm] [bug]**'
  id: totrans-2488
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where the [`make_transient_to_detached()`](../orm/session_api.html#sqlalchemy.orm.make_transient_to_detached
    "sqlalchemy.orm.make_transient_to_detached") function would expire all attributes
    on the target object, including “deferred” attributes, which has the effect of
    the attribute being undeferred for the next refresh, causing an unexpected load
    of the attribute.
  id: totrans-2489
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`make_transient_to_detached()`](../orm/session_api.html#sqlalchemy.orm.make_transient_to_detached
    "sqlalchemy.orm.make_transient_to_detached")函数会使目标对象上的所有属性过期的问题，包括“延迟加载”属性，这会导致下一次刷新时属性被取消延迟加载，从而导致属性意外加载。
- en: 'References: [#4084](https://www.sqlalchemy.org/trac/ticket/4084)'
  id: totrans-2490
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4084](https://www.sqlalchemy.org/trac/ticket/4084)
- en: '**[orm] [bug]**'
  id: totrans-2491
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug involving delete-orphan cascade where a related item that becomes
    an orphan before the parent object is part of a session is still tracked as moving
    into orphan status, which results in it being expunged from the session rather
    than being flushed.
  id: totrans-2492
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了涉及delete-orphan级联的bug，其中相关项目在父对象成为会话的一部分之前成为孤儿，仍然被跟踪为进入孤儿状态，导致其从会话中被清除而不是被刷新。
- en: Note
  id: totrans-2493
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: This fix was inadvertently merged during the 1.2.0b3 release and was **not added
    to the changelog** at that time. This changelog note was added to the release
    retroactively as of version 1.2.13.
  id: totrans-2494
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个修复在1.2.0b3发布期间被错误地合并，并且**没有被添加到更改日志**中。这个更改日志注释是作为版本1.2.13的一部分事后添加的。
- en: 'References: [#4040](https://www.sqlalchemy.org/trac/ticket/4040)'
  id: totrans-2495
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4040](https://www.sqlalchemy.org/trac/ticket/4040)
- en: '**[orm] [bug]**'
  id: totrans-2496
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in [“selectin” polymorphic loading, loads subclasses using separate
    IN queries](migration_12.html#change-3948) which prevented “selectin” and “inline”
    settings in a multi-level class hierarchy from interacting together as expected.
  id: totrans-2497
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[“selectin”多态加载，使用单独的IN查询加载子类](migration_12.html#change-3948)中的错误，该错误阻止了多级类层次结构中“selectin”和“inline”设置按预期交互。
- en: 'References: [#4026](https://www.sqlalchemy.org/trac/ticket/4026)'
  id: totrans-2498
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4026](https://www.sqlalchemy.org/trac/ticket/4026)
- en: '**[orm] [bug]**'
  id: totrans-2499
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Removed the warnings that are emitted when the LRU caches employed by the mapper
    as well as loader strategies reach their threshold; the purpose of this warning
    was at first a guard against excess cache keys being generated but became basically
    a check on the “creating many engines” antipattern. While this is still an antipattern,
    the presence of test suites which both create an engine per test as well as raise
    on all warnings will be an inconvenience; it should not be critical that such
    test suites change their architecture just for this warning (though engine-per-test
    suite is always better).
  id: totrans-2500
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了当映射器和加载策略使用的LRU缓存达到阈值时发出的警告；最初这个警告的目的是防止生成过多的缓存键，但后来基本上成为“创建许多引擎”反模式的检查。虽然这仍然是一个反模式，但测试套件中既为每个测试创建一个引擎又在所有警告上引发的存在将是一个不便；对于这个警告，这些测试套件改变其架构并不是必要的（尽管每个测试一个引擎的套件总是更好）。
- en: 'References: [#4071](https://www.sqlalchemy.org/trac/ticket/4071)'
  id: totrans-2501
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4071](https://www.sqlalchemy.org/trac/ticket/4071)
- en: '**[orm] [bug]**'
  id: totrans-2502
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression where the use of a [`undefer_group()`](../orm/queryguide/columns.html#sqlalchemy.orm.undefer_group
    "sqlalchemy.orm.undefer_group") option in conjunction with a lazy loaded relationship
    option would cause an attribute error, due to a bug in the SQL cache key generation
    added in 1.2 as part of [#3954](https://www.sqlalchemy.org/trac/ticket/3954).
  id: totrans-2503
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个回归问题，即在与延迟加载关系选项一起使用[`undefer_group()`](../orm/queryguide/columns.html#sqlalchemy.orm.undefer_group
    "sqlalchemy.orm.undefer_group")选项时，由于1.2版本中作为[#3954](https://www.sqlalchemy.org/trac/ticket/3954)的一部分添加的SQL缓存键生成中的错误，会导致属性错误。
- en: 'References: [#4049](https://www.sqlalchemy.org/trac/ticket/4049)'
  id: totrans-2504
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4049](https://www.sqlalchemy.org/trac/ticket/4049)
- en: '**[orm] [bug]**'
  id: totrans-2505
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Modified the change made to the ORM update/delete evaluator in [#3366](https://www.sqlalchemy.org/trac/ticket/3366)
    such that if an unmapped column expression is present in the update or delete,
    if the evaluator can match its name to the mapped columns of the target class,
    a warning is emitted, rather than raising UnevaluatableError. This is essentially
    the pre-1.2 behavior, and is to allow migration for applications that are currently
    relying upon this pattern. However, if the given attribute name cannot be matched
    to the columns of the mapper, the UnevaluatableError is still raised, which is
    what was fixed in [#3366](https://www.sqlalchemy.org/trac/ticket/3366).
  id: totrans-2506
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了在[#3366](https://www.sqlalchemy.org/trac/ticket/3366)中对ORM更新/删除评估器所做的更改，如果更新或删除中存在未映射的列表达式，并且评估器可以将其名称与目标类的映射列匹配，将发出警告，而不是引发UnevaluatableError。这本质上是1.2版本之前的行为，目的是允许正在依赖此模式的应用程序进行迁移。但是，如果给定的属性名称无法与映射器的列匹配，仍会引发UnevaluatableError，这是在[#3366](https://www.sqlalchemy.org/trac/ticket/3366)中修复的问题。
- en: 'References: [#4073](https://www.sqlalchemy.org/trac/ticket/4073)'
  id: totrans-2507
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4073](https://www.sqlalchemy.org/trac/ticket/4073)
- en: orm declarative
  id: totrans-2508
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm declarative
- en: '**[orm] [declarative] [bug]**'
  id: totrans-2509
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: A warning is emitted if a subclass attempts to override an attribute that was
    declared on a superclass using `@declared_attr.cascading` that the overridden
    attribute will be ignored. This use case cannot be fully supported down to further
    subclasses without more complex development efforts, so for consistency the “cascading”
    is honored all the way down regardless of overriding attributes.
  id: totrans-2510
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果子类尝试覆盖在父类上声明的属性，并使用`@declared_attr.cascading`，则会发出警告，指出覆盖的属性将被忽略。这种用例无法在更深层次的子类中得到完全支持，因此为了一致性，无论覆盖属性如何，“级联”都会一直被遵守。
- en: 'References: [#4091](https://www.sqlalchemy.org/trac/ticket/4091)'
  id: totrans-2511
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4091](https://www.sqlalchemy.org/trac/ticket/4091)
- en: '**[orm] [declarative] [bug]**'
  id: totrans-2512
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: A warning is emitted if the `@declared_attr.cascading` attribute is used with
    a special declarative name such as `__tablename__`, as this has no effect.
  id: totrans-2513
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果使用`@declared_attr.cascading`属性与特殊的声明名称（如`__tablename__`）一起使用，则会发出警告，因为这没有效果。
- en: 'References: [#4092](https://www.sqlalchemy.org/trac/ticket/4092)'
  id: totrans-2514
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4092](https://www.sqlalchemy.org/trac/ticket/4092)
- en: engine
  id: totrans-2515
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [feature]**'
  id: totrans-2516
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: Added `__next__()` and `next()` methods to `ResultProxy`, so that the `next()`
    builtin function works on the object directly. `ResultProxy` has long had an `__iter__()`
    method which already allows it to respond to the `iter()` builtin. The implementation
    for `__iter__()` is unchanged, as performance testing has indicated that iteration
    using a `__next__()` method with `StopIteration` is about 20% slower in both Python
    2.7 and 3.6.
  id: totrans-2517
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向`ResultProxy`添加了`__next__()`和`next()`方法，以便直接在对象上使用`next()`内置函数。`ResultProxy`长期以来已经有一个`__iter__()`方法，允许它响应`iter()`内置函数。`__iter__()`的实现未更改，因为性能测试表明，使用带有`StopIteration`的`__next__()`方法进行迭代在Python
    2.7和3.6中都要慢大约20%。
- en: 'References: [#4077](https://www.sqlalchemy.org/trac/ticket/4077)'
  id: totrans-2518
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4077](https://www.sqlalchemy.org/trac/ticket/4077)
- en: '**[engine] [bug]**'
  id: totrans-2519
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Made some adjustments to [`Pool`](../core/pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") and [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") such that recovery logic is not run underneath
    exception catches for `pool.Empty`, `AttributeError`, since when the recovery
    operation itself fails, Python 3 creates a misleading stack trace referring to
    the `Empty` / `AttributeError` as the cause, when in fact these exception catches
    are part of control flow.
  id: totrans-2520
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对[`Pool`](../core/pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")和[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")进行了一些调整，使得在`pool.Empty`、`AttributeError`异常捕获下不会运行恢复逻辑，因为当恢复操作本身失败时，Python
    3会创建一个误导性的堆栈跟踪，将`Empty` / `AttributeError`作为原因，而实际上这些异常捕获是控制流的一部分。
- en: 'References: [#4028](https://www.sqlalchemy.org/trac/ticket/4028)'
  id: totrans-2521
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#4028](https://www.sqlalchemy.org/trac/ticket/4028)
- en: sql
  id: totrans-2522
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-2523
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where the recently added [`ColumnOperators.any_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") and [`ColumnOperators.all_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") methods didn’t work when called
    as methods, as opposed to using the standalone functions [`any_()`](../core/sqlelement.html#sqlalchemy.sql.expression.any_
    "sqlalchemy.sql.expression.any_") and [`all_()`](../core/sqlelement.html#sqlalchemy.sql.expression.all_
    "sqlalchemy.sql.expression.all_"). Also added documentation examples for these
    relatively unintuitive SQL operators.
  id: totrans-2524
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了最近添加的 [`ColumnOperators.any_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") 和 [`ColumnOperators.all_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") 方法在作为方法调用时不起作用的错误，与使用独立函数 [`any_()`](../core/sqlelement.html#sqlalchemy.sql.expression.any_
    "sqlalchemy.sql.expression.any_") 和 [`all_()`](../core/sqlelement.html#sqlalchemy.sql.expression.all_
    "sqlalchemy.sql.expression.all_") 相对，还为这些相对不直观的 SQL 运算符添加了文档示例。
- en: 'This change is also **backported** to: 1.1.15'
  id: totrans-2525
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还 **反向移植** 至：1.1.15
- en: 'References: [#4093](https://www.sqlalchemy.org/trac/ticket/4093)'
  id: totrans-2526
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#4093](https://www.sqlalchemy.org/trac/ticket/4093)
- en: '**[sql] [bug]**'
  id: totrans-2527
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Added a new method [`DefaultExecutionContext.get_current_parameters()`](../core/internals.html#sqlalchemy.engine.default.DefaultExecutionContext.get_current_parameters
    "sqlalchemy.engine.default.DefaultExecutionContext.get_current_parameters") which
    is used within a function-based default value generator in order to retrieve the
    current parameters being passed to the statement. The new function differs from
    the [`DefaultExecutionContext.current_parameters`](../core/internals.html#sqlalchemy.engine.default.DefaultExecutionContext.current_parameters
    "sqlalchemy.engine.default.DefaultExecutionContext.current_parameters") attribute
    in that it also provides for optional grouping of parameters that correspond to
    a multi-valued “insert” construct. Previously it was not possible to identify
    the subset of parameters that were relevant to the function call.
  id: totrans-2528
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新方法 [`DefaultExecutionContext.get_current_parameters()`](../core/internals.html#sqlalchemy.engine.default.DefaultExecutionContext.get_current_parameters
    "sqlalchemy.engine.default.DefaultExecutionContext.get_current_parameters")，该方法在函数型默认值生成器中使用，以便检索传递给语句的当前参数。新函数与
    [`DefaultExecutionContext.current_parameters`](../core/internals.html#sqlalchemy.engine.default.DefaultExecutionContext.current_parameters
    "sqlalchemy.engine.default.DefaultExecutionContext.current_parameters") 属性不同之处在于，它还提供了参数的可选分组，这些参数对应于多值“插入”构造。以前无法识别与函数调用相关的参数子集。
- en: See also
  id: totrans-2529
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[Parameter helper for multi-valued INSERT with contextual default generator](migration_12.html#change-4075)'
  id: totrans-2530
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[用于具有上下文默认生成器的多值插入的参数辅助程序](migration_12.html#change-4075)'
- en: '[Context-Sensitive Default Functions](../core/defaults.html#context-default-functions)'
  id: totrans-2531
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[上下文敏感的默认函数](../core/defaults.html#context-default-functions)'
- en: 'References: [#4075](https://www.sqlalchemy.org/trac/ticket/4075)'
  id: totrans-2532
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#4075](https://www.sqlalchemy.org/trac/ticket/4075)
- en: '**[sql] [bug]**'
  id: totrans-2533
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in new SQL comments feature where table and column comment would not
    be copied when using [`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata").
  id: totrans-2534
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新的 SQL 注释功能中的错误，当使用 [`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata") 时，表和列注释不会被复制。
- en: 'References: [#4087](https://www.sqlalchemy.org/trac/ticket/4087)'
  id: totrans-2535
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#4087](https://www.sqlalchemy.org/trac/ticket/4087)
- en: '**[sql] [bug]**'
  id: totrans-2536
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: In release 1.1, the [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean") type was broken in that boolean coercion via `bool()`
    would occur for backends that did not feature “native boolean”, but would not
    occur for native boolean backends, meaning the string `"0"` now behaved inconsistently.
    After a poll, a consensus was reached that non-boolean values should be raising
    an error, especially in the ambiguous case of string `"0"`; so the [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean") datatype will now raise `ValueError` if an incoming
    value is not within the range `None, True, False, 1, 0`.
  id: totrans-2537
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在版本 1.1 中，[`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean")
    类型存在问题，即通过 `bool()` 进行布尔强制转换会发生在不支持“原生布尔”的后端，但不会发生在原生布尔后端，这意味着字符串 `"0"` 现在表现不一致。经过一次投票，达成共识，即非布尔值应该引发错误，特别是在字符串
    `"0"` 的模棱两可情况下；因此，如果传入值不在范围 `None, True, False, 1, 0` 内，[`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean") 数据类型现在将引发 `ValueError`。
- en: See also
  id: totrans-2538
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[Boolean datatype now enforces strict True/False/None values](migration_12.html#change-4102)'
  id: totrans-2539
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[布尔数据类型现在强制执行严格的True/False/None值](migration_12.html#change-4102)'
- en: 'References: [#4102](https://www.sqlalchemy.org/trac/ticket/4102)'
  id: totrans-2540
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4102](https://www.sqlalchemy.org/trac/ticket/4102)
- en: '**[sql] [bug]**'
  id: totrans-2541
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Refined the behavior of [`Operators.op()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") such that in all cases, if the [`Operators.op.is_comparison`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op") flag is set to True, the return type
    of the resulting expression will be [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean"), and if the flag is False, the return type of the
    resulting expression will be the same type as that of the left-hand expression,
    which is the typical default behavior of other operators. Also added a new parameter
    [`Operators.op.return_type`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.return_type
    "sqlalchemy.sql.expression.Operators.op") as well as a helper method [`Operators.bool_op()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op").
  id: totrans-2542
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 优化了[`Operators.op()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op")的行为，使得在所有情况下，如果[`Operators.op.is_comparison`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op")标志设置为True，则生成表达式的返回类型将是[`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean")，如果标志为False，则生成表达式的返回类型将与左侧表达式的类型相同，这是其他运算符的典型默认行为。还添加了一个新参数[`Operators.op.return_type`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.return_type
    "sqlalchemy.sql.expression.Operators.op")以及一个辅助方法[`Operators.bool_op()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op")。
- en: See also
  id: totrans-2543
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[The typing behavior of custom operators has been made consistent](migration_12.html#change-4063)'
  id: totrans-2544
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[自定义运算符的类型行为已经保持一致](migration_12.html#change-4063)'
- en: 'References: [#4063](https://www.sqlalchemy.org/trac/ticket/4063)'
  id: totrans-2545
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4063](https://www.sqlalchemy.org/trac/ticket/4063)
- en: '**[sql] [bug]**'
  id: totrans-2546
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Internal refinements to the [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum"), [`Interval`](../core/type_basics.html#sqlalchemy.types.Interval
    "sqlalchemy.types.Interval"), and [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean") types, which now extend a common mixin `Emulated`
    that indicates a type that provides Python-side emulation of a DB native type,
    switching out to the DB native type when a supporting backend is in use. The PostgreSQL
    [`INTERVAL`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.INTERVAL
    "sqlalchemy.dialects.postgresql.INTERVAL") type when used directly will now include
    the correct type coercion rules for SQL expressions that also take effect for
    [`Interval`](../core/type_basics.html#sqlalchemy.types.Interval "sqlalchemy.types.Interval")
    (such as adding a date to an interval yields a datetime).
  id: totrans-2547
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")、[`Interval`](../core/type_basics.html#sqlalchemy.types.Interval
    "sqlalchemy.types.Interval")和[`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean")类型进行了内部优化，现在它们都扩展了一个通用的mixin `Emulated`，表示提供了对数据库本地类型的Python端模拟，在使用支持的后端时切换到数据库本地类型。直接使用
    PostgreSQL [`INTERVAL`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.INTERVAL
    "sqlalchemy.dialects.postgresql.INTERVAL") 类型现在将包括正确的类型强制转换规则，对于也适用于 [`Interval`](../core/type_basics.html#sqlalchemy.types.Interval
    "sqlalchemy.types.Interval") 的 SQL 表达式（例如将日期添加到间隔会产生日期时间）。
- en: 'References: [#4088](https://www.sqlalchemy.org/trac/ticket/4088)'
  id: totrans-2548
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4088](https://www.sqlalchemy.org/trac/ticket/4088)
- en: postgresql
  id: totrans-2549
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-2550
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added a new flag `use_batch_mode` to the psycopg2 dialect. This flag enables
    the use of psycopg2’s `psycopg2.extras.execute_batch` extension when the [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") calls upon `cursor.executemany()`. This extension
    provides a critical performance increase by over an order of magnitude when running
    INSERT statements in batch. The flag is False by default as it is considered to
    be experimental for now.
  id: totrans-2551
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向psycopg2方言添加了一个新标志`use_batch_mode`。当[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")调用`cursor.executemany()`时，此标志启用了psycopg2的`psycopg2.extras.execute_batch`扩展。此扩展在批量运行INSERT语句时提供了关键的性能提升，性能提升超过一个数量级。该标志默认为False，因为目前被认为是实验性的。
- en: See also
  id: totrans-2552
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Support for Batch Mode / Fast Execution Helpers](migration_12.html#change-4109)'
  id: totrans-2553
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[批处理模式/快速执行助手的支持](migration_12.html#change-4109)'
- en: 'References: [#4109](https://www.sqlalchemy.org/trac/ticket/4109)'
  id: totrans-2554
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4109](https://www.sqlalchemy.org/trac/ticket/4109)
- en: '**[postgresql] [bug]**'
  id: totrans-2555
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Made further fixes to the [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") class in conjunction with COLLATE, as the fix made in
    [#4006](https://www.sqlalchemy.org/trac/ticket/4006) failed to accommodate for
    a multidimensional array.
  id: totrans-2556
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 针对与COLLATE一起的[`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")类进行了进一步修复，因为在[#4006](https://www.sqlalchemy.org/trac/ticket/4006)中进行的修复未能适应多维数组。
- en: 'This change is also **backported** to: 1.1.15'
  id: totrans-2557
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**至：1.1.15
- en: 'References: [#4006](https://www.sqlalchemy.org/trac/ticket/4006)'
  id: totrans-2558
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4006](https://www.sqlalchemy.org/trac/ticket/4006)
- en: '**[postgresql] [bug]**'
  id: totrans-2559
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug in [`array_agg`](../core/functions.html#sqlalchemy.sql.functions.array_agg
    "sqlalchemy.sql.functions.array_agg") function where passing an argument that
    is already of type [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY"),
    such as a PostgreSQL [`array`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.array
    "sqlalchemy.dialects.postgresql.array") construct, would produce a `ValueError`,
    due to the function attempting to nest the arrays.
  id: totrans-2560
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`array_agg`](../core/functions.html#sqlalchemy.sql.functions.array_agg "sqlalchemy.sql.functions.array_agg")函数中的错误，其中传递一个已经是[`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY")类型的参数，例如PostgreSQL [`array`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.array
    "sqlalchemy.dialects.postgresql.array")构造，将产生`ValueError`，因为函数尝试嵌套数组。
- en: 'This change is also **backported** to: 1.1.15'
  id: totrans-2561
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**至：1.1.15
- en: 'References: [#4107](https://www.sqlalchemy.org/trac/ticket/4107)'
  id: totrans-2562
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4107](https://www.sqlalchemy.org/trac/ticket/4107)
- en: '**[postgresql] [bug]**'
  id: totrans-2563
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug in PostgreSQL `Insert.on_conflict_do_update()` which would prevent
    the insert statement from being used as a CTE, e.g. via `Insert.cte()`, within
    another statement.
  id: totrans-2564
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了PostgreSQL `Insert.on_conflict_do_update()`中的错误，该错误将阻止将插入语句用作CTE，例如通过`Insert.cte()`在另一个语句中使用。
- en: 'This change is also **backported** to: 1.1.15'
  id: totrans-2565
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**至：1.1.15
- en: 'References: [#4074](https://www.sqlalchemy.org/trac/ticket/4074)'
  id: totrans-2566
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4074](https://www.sqlalchemy.org/trac/ticket/4074)
- en: '**[postgresql] [bug]**'
  id: totrans-2567
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug where the pg8000 driver would fail if using [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") with a schema name, since the schema name
    would be sent as a “quoted_name” object that’s a string subclass, which pg8000
    doesn’t recognize. The quoted_name type is added to pg8000’s py_types collection
    on connect.
  id: totrans-2568
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了pg8000驱动程序在使用带有模式名称的[`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect")时会失败的错误，因为模式名称将作为“quoted_name”对象发送，该对象是一个字符串子类，pg8000不识别。连接时将quoted_name类型添加到pg8000的py_types集合中。
- en: 'References: [#4041](https://www.sqlalchemy.org/trac/ticket/4041)'
  id: totrans-2569
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4041](https://www.sqlalchemy.org/trac/ticket/4041)
- en: '**[postgresql] [bug]**'
  id: totrans-2570
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Enabled UUID support for the pg8000 driver, which supports native Python uuid
    round trips for this datatype. Arrays of UUID are still not supported, however.
  id: totrans-2571
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为pg8000驱动程序启用了UUID支持，支持此数据类型的本机Python uuid往返。但是仍不���持UUID数组。
- en: 'References: [#4016](https://www.sqlalchemy.org/trac/ticket/4016)'
  id: totrans-2572
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4016](https://www.sqlalchemy.org/trac/ticket/4016)
- en: mysql
  id: totrans-2573
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-2574
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Warning emitted when MariaDB 10.2.8 or earlier in the 10.2 series is detected
    as there are major issues with CHECK constraints within these versions that were
    resolved as of 10.2.9.
  id: totrans-2575
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当检测到 MariaDB 10.2.8 或更早版本的 10.2 系列时，会发出警告，因为这些版本中的 CHECK 约束存在重大问题，这些问题在 10.2.9
    中已解决。
- en: Note that this changelog message was NOT released with SQLAlchemy 1.2.0b3 and
    was added retroactively.
  id: totrans-2576
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，此更改日志消息并未随 SQLAlchemy 1.2.0b3 发布，而是事后添加的。
- en: 'This change is also **backported** to: 1.1.15'
  id: totrans-2577
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.1.15
- en: 'References: [#4097](https://www.sqlalchemy.org/trac/ticket/4097)'
  id: totrans-2578
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4097](https://www.sqlalchemy.org/trac/ticket/4097)
- en: '**[mysql] [bug]**'
  id: totrans-2579
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed issue where CURRENT_TIMESTAMP would not reflect correctly in the MariaDB
    10.2 series due to a syntax change, where the function is now represented as `current_timestamp()`.
  id: totrans-2580
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 MariaDB 10.2 系列中，由于语法更改，导致 CURRENT_TIMESTAMP 无法正确反映的问题，现在该函数表示为 `current_timestamp()`。
- en: 'This change is also **backported** to: 1.1.15'
  id: totrans-2581
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.1.15
- en: 'References: [#4096](https://www.sqlalchemy.org/trac/ticket/4096)'
  id: totrans-2582
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4096](https://www.sqlalchemy.org/trac/ticket/4096)
- en: '**[mysql] [bug]**'
  id: totrans-2583
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: 'MariaDB 10.2 now supports CHECK constraints (warning: use version 10.2.9 or
    greater due to upstream issues noted in [#4097](https://www.sqlalchemy.org/trac/ticket/4097)).
    Reflection now takes these CHECK constraints into account when they are present
    in the `SHOW CREATE TABLE` output.'
  id: totrans-2584
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MariaDB 10.2 现在支持 CHECK 约束（警告：由于上游问题，请使用版本 10.2.9 或更高版本，详见 [#4097](https://www.sqlalchemy.org/trac/ticket/4097)）。反射现在在
    `SHOW CREATE TABLE` 输出中考虑这些 CHECK 约束。
- en: 'This change is also **backported** to: 1.1.15'
  id: totrans-2585
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.1.15
- en: 'References: [#4098](https://www.sqlalchemy.org/trac/ticket/4098)'
  id: totrans-2586
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4098](https://www.sqlalchemy.org/trac/ticket/4098)
- en: '**[mysql] [bug]**'
  id: totrans-2587
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Changed the name of the `.values` attribute of the new MySQL INSERT..ON DUPLICATE
    KEY UPDATE construct to `.inserted`, as [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") already has a method called [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values"). The `.inserted` attribute ultimately
    renders the MySQL `VALUES()` function.
  id: totrans-2588
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将新的 MySQL INSERT..ON DUPLICATE KEY UPDATE 结构的 `.values` 属性更名为 `.inserted`，因为
    [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    已经有一个名为 [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") 的方法。`.inserted` 属性最终呈现 MySQL 的 `VALUES()`
    函数。
- en: 'References: [#4072](https://www.sqlalchemy.org/trac/ticket/4072)'
  id: totrans-2589
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4072](https://www.sqlalchemy.org/trac/ticket/4072)
- en: sqlite
  id: totrans-2590
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-2591
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Fixed bug where SQLite CHECK constraint reflection would fail if the referenced
    table were in a remote schema, e.g. on SQLite a remote database referred to by
    ATTACH.
  id: totrans-2592
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 SQLite CHECK 约束反射失败的 bug，如果引用的表位于远程模式中，例如 SQLite 中由 ATTACH 引用的远程数据库。
- en: 'This change is also **backported** to: 1.1.15'
  id: totrans-2593
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.1.15
- en: 'References: [#4099](https://www.sqlalchemy.org/trac/ticket/4099)'
  id: totrans-2594
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4099](https://www.sqlalchemy.org/trac/ticket/4099)
- en: mssql
  id: totrans-2595
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [feature]**'
  id: totrans-2596
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [feature]**'
- en: Added a new [`TIMESTAMP`](../dialects/mssql.html#sqlalchemy.dialects.mssql.TIMESTAMP
    "sqlalchemy.dialects.mssql.TIMESTAMP") datatype, that correctly acts like a binary
    datatype for SQL Server rather than a datetime type, as SQL Server breaks the
    SQL standard here. Also added [`ROWVERSION`](../dialects/mssql.html#sqlalchemy.dialects.mssql.ROWVERSION
    "sqlalchemy.dialects.mssql.ROWVERSION"), as the “TIMESTAMP” type in SQL Server
    is deprecated in favor of ROWVERSION.
  id: totrans-2597
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的 [`TIMESTAMP`](../dialects/mssql.html#sqlalchemy.dialects.mssql.TIMESTAMP
    "sqlalchemy.dialects.mssql.TIMESTAMP") 数据类型，对 SQL Server 而言，它正确地像二进制数据类型而不是 datetime
    类型，因为 SQL Server 在这里违反了 SQL 标准。还添加了 [`ROWVERSION`](../dialects/mssql.html#sqlalchemy.dialects.mssql.ROWVERSION
    "sqlalchemy.dialects.mssql.ROWVERSION")，因为 SQL Server 中的“TIMESTAMP”类型已被弃用，改用 ROWVERSION。
- en: 'References: [#4086](https://www.sqlalchemy.org/trac/ticket/4086)'
  id: totrans-2598
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4086](https://www.sqlalchemy.org/trac/ticket/4086)
- en: '**[mssql] [feature]**'
  id: totrans-2599
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [feature]**'
- en: Added support for “AUTOCOMMIT” isolation level, as established via [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options"), to the PyODBC and pymssql dialects.
    This isolation level sets the appropriate DBAPI-specific flags on the underlying
    connection object.
  id: totrans-2600
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 PyODBC 和 pymssql 方言添加了对“AUTOCOMMIT”隔离级别的支持，通过 [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") 来建立，这个隔离级别在底层连接对象上设置适当的 DBAPI
    特定标志。
- en: 'References: [#4058](https://www.sqlalchemy.org/trac/ticket/4058)'
  id: totrans-2601
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4058](https://www.sqlalchemy.org/trac/ticket/4058)
- en: '**[mssql] [bug]**'
  id: totrans-2602
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Added a full range of “connection closed” exception codes to the PyODBC dialect
    for SQL Server, including ‘08S01’, ‘01002’, ‘08003’, ‘08007’, ‘08S02’, ‘08001’,
    ‘HYT00’, ‘HY010’. Previously, only ‘08S01’ was covered.
  id: totrans-2603
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为SQL Server的PyODBC方言添加了一整套“连接关闭”异常代码，包括‘08S01’、‘01002’、‘08003’、‘08007’、‘08S02’、‘08001’、‘HYT00’、‘HY010’。以前只覆盖了‘08S01’。
- en: 'This change is also **backported** to: 1.1.15'
  id: totrans-2604
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.1.15
- en: 'References: [#4095](https://www.sqlalchemy.org/trac/ticket/4095)'
  id: totrans-2605
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4095](https://www.sqlalchemy.org/trac/ticket/4095)
- en: '**[mssql] [bug]**'
  id: totrans-2606
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: SQL Server supports what SQLAlchemy calls “native boolean” with its BIT type,
    as this type only accepts 0 or 1 and the DBAPIs return its value as True/False.
    So the SQL Server dialects now enable “native boolean” support, in that a CHECK
    constraint is not generated for a [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean") datatype. The only difference vs. other native boolean
    is that there are no “true” / “false” constants so “1” and “0” are still rendered
    here.
  id: totrans-2607
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQL Server支持SQLAlchemy称之为“本地布尔”的BIT类型，因为此类型仅接受0或1，而DBAPI将其值返回为True/False。因此，SQL
    Server方言现在启用了“本地布尔”支持，即不为[`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean")数据类型生成CHECK约束。与其他本地布尔的唯一区别是没有“true” / “false”常量，因此这里仍然呈现为“1”和“0”。
- en: 'References: [#4061](https://www.sqlalchemy.org/trac/ticket/4061)'
  id: totrans-2608
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4061](https://www.sqlalchemy.org/trac/ticket/4061)
- en: '**[mssql] [bug]**'
  id: totrans-2609
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed the pymssql dialect so that percent signs in SQL text, such as used in
    modulus expressions or literal textual values, are **not** doubled up, as seems
    to be what pymssql expects. This is despite the fact that the pymssql DBAPI uses
    the “pyformat” parameter style which itself considers the percent sign to be significant.
  id: totrans-2610
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了pymssql方言中SQL文本中的百分号，例如在模数表达式或文字值中使用的情况，不会加倍，这似乎是pymssql所期望的。尽管pymssql DBAPI使用“pyformat”参数样式，该样式认为百分号是重要的。
- en: 'References: [#4057](https://www.sqlalchemy.org/trac/ticket/4057)'
  id: totrans-2611
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4057](https://www.sqlalchemy.org/trac/ticket/4057)
- en: '**[mssql] [bug]**'
  id: totrans-2612
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed bug where the SQL Server dialect could pull columns from multiple schemas
    when reflecting a self-referential foreign key constraint, if multiple schemas
    contained a constraint of the same name against a table of the same name.
  id: totrans-2613
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了SQL Server方言在反射自引用外键约束时可能从多个模式中提取列的错误，如果多个模式包含相同名称的约束针对相同名称的表。
- en: 'References: [#4060](https://www.sqlalchemy.org/trac/ticket/4060)'
  id: totrans-2614
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4060](https://www.sqlalchemy.org/trac/ticket/4060)
- en: '**[mssql] [bug] [orm]**'
  id: totrans-2615
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug] [orm]**'
- en: Added a new class of “rowcount support” for dialects that is specific to when
    “RETURNING”, which on SQL Server looks like “OUTPUT inserted”, is in use, as the
    PyODBC backend isn’t able to give us rowcount on an UPDATE or DELETE statement
    when OUTPUT is in effect. This primarily affects the ORM when a flush is updating
    a row that contains server-calculated values, raising an error if the backend
    does not return the expected row count. PyODBC now states that it supports rowcount
    except if OUTPUT.inserted is present, which is taken into account by the ORM during
    a flush as to whether it will look for a rowcount.
  id: totrans-2616
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于特定于“RETURNING”的方言的“rowcount支持”添加了一个新类，当在使用时，例如在SQL Server上看起来像“OUTPUT inserted”时，PyODBC后端无法在OUTPUT生效时给我们提供UPDATE或DELETE语句的rowcount。这主要影响ORM，当刷新正在更新包含服务器计算值的行时，如果后端未返回预期的行数，则会引发错误。PyODBC现在声明支持rowcount，除非存在OUTPUT.inserted，ORM在刷新期间会考虑是否寻找rowcount。
- en: 'References: [#4062](https://www.sqlalchemy.org/trac/ticket/4062)'
  id: totrans-2617
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4062](https://www.sqlalchemy.org/trac/ticket/4062)
- en: '**[mssql] [bug] [orm]**'
  id: totrans-2618
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug] [orm]**'
- en: Enabled the “sane_rowcount” flag for the pymssql dialect, indicating that the
    DBAPI now reports the correct number of rows affected from an UPDATE or DELETE
    statement. This impacts mostly the ORM versioning feature in that it now can verify
    the number of rows affected on a target version.
  id: totrans-2619
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为pymssql方言启用了“sane_rowcount”标志，表示DBAPI现在从UPDATE或DELETE语句中报告受影响的行数。这主要影响ORM版本功能，因为现在它可以验证目标版本上受影响的行数。
- en: '**[mssql] [bug]**'
  id: totrans-2620
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Added a rule to SQL Server index reflection to ignore the so-called “heap” index
    that is implicitly present on a table that does not specify a clustered index.
  id: totrans-2621
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个规则到SQL Server索引反射中，忽略所谓的在未指定聚集索引的表上隐式存在的“堆”索引。
- en: 'References: [#4059](https://www.sqlalchemy.org/trac/ticket/4059)'
  id: totrans-2622
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4059](https://www.sqlalchemy.org/trac/ticket/4059)
- en: oracle
  id: totrans-2623
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [performance] [bug] [py2k]**'
  id: totrans-2624
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [性能] [bug] [py2k]**'
- en: Fixed performance regression caused by the fix for [#3937](https://www.sqlalchemy.org/trac/ticket/3937)
    where cx_Oracle as of version 5.3 dropped the `.UNICODE` symbol from its namespace,
    which was interpreted as cx_Oracle’s “WITH_UNICODE” mode being turned on unconditionally,
    which invokes functions on the SQLAlchemy side which convert all strings to unicode
    unconditionally and causing a performance impact. In fact, per cx_Oracle’s author
    the “WITH_UNICODE” mode has been removed entirely as of 5.1, so the expensive
    unicode conversion functions are no longer necessary and are disabled if cx_Oracle
    5.1 or greater is detected under Python 2\. The warning against “WITH_UNICODE”
    mode that was removed under [#3937](https://www.sqlalchemy.org/trac/ticket/3937)
    is also restored.
  id: totrans-2625
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于修复[#3937](https://www.sqlalchemy.org/trac/ticket/3937)导致的性能回归已修复，因为cx_Oracle从版本5.3开始从其命名空间中删除了`.UNICODE`符号，这被解释为cx_Oracle的“WITH_UNICODE”模式被无条件打开，从而在SQLAlchemy端调用函数将所有字符串无条件转换为unicode并导致性能影响。实际上，根据cx_Oracle的作者，“WITH_UNICODE”模式自5.1起已被完全移除，因此如果在Python
    2下检测到cx_Oracle 5.1或更高版本，则不再需要昂贵的unicode转换函数，并且如果检测到cx_Oracle 5.1或更高版本，则会禁用这些函数。在[#3937](https://www.sqlalchemy.org/trac/ticket/3937)中删除的针对“WITH_UNICODE”模式的警告也已恢复。
- en: 'This change is also **backported** to: 1.1.13, 1.0.19'
  id: totrans-2626
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.1.13，1.0.19
- en: 'References: [#4035](https://www.sqlalchemy.org/trac/ticket/4035)'
  id: totrans-2627
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4035](https://www.sqlalchemy.org/trac/ticket/4035)
- en: '**[oracle] [bug]**'
  id: totrans-2628
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Partial support for persisting and retrieving the Oracle value “infinity” is
    implemented with cx_Oracle, using Python float values only, e.g. `float("inf")`.
    Decimal support is not yet fulfilled by the cx_Oracle DBAPI driver.
  id: totrans-2629
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用cx_Oracle实现了对Oracle值“无穷大”的部分支持，仅使用Python浮点值，例如`float("inf")`。目前，cx_Oracle
    DBAPI驱动程序尚未实现对Decimal的��持。
- en: 'References: [#4064](https://www.sqlalchemy.org/trac/ticket/4064)'
  id: totrans-2630
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4064](https://www.sqlalchemy.org/trac/ticket/4064)
- en: '**[oracle] [bug]**'
  id: totrans-2631
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: The cx_Oracle dialect has been reworked and modernized to take advantage of
    new patterns that weren’t present in the old 4.x series of cx_Oracle. This includes
    that the minimum cx_Oracle version is the 5.x series and that cx_Oracle 6.x is
    now fully tested. The most significant change involves type conversions, primarily
    regarding the numeric / floating point and LOB datatypes, making more effective
    use of cx_Oracle type handling hooks to simplify how bind parameter and result
    data is processed.
  id: totrans-2632
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: cx_Oracle方言已经重构和现代化，以利用在旧的4.x系列cx_Oracle中不存在的新模式。其中最重要的变化涉及类型转换，主要是关于数字/浮点和LOB数据类型，更有效地利用cx_Oracle类型处理挂钩简化了绑定参数和结果数据的处理方式。
- en: See also
  id: totrans-2633
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Major Refactor to cx_Oracle Dialect, Typing System](migration_12.html#change-cxoracle-12)'
  id: totrans-2634
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[cx_Oracle方言，类型系统的重大重构](migration_12.html#change-cxoracle-12)'
- en: '**[oracle] [bug]**'
  id: totrans-2635
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: two phase support for cx_Oracle has been completely removed for all versions
    of cx_Oracle, whereas in 1.2.0b1 this change only took effect for the 6.x series
    of cx_Oracle. This feature never worked correctly in any version of cx_Oracle
    and in cx_Oracle 6.x, the API which SQLAlchemy relied upon was removed.
  id: totrans-2636
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于所有版本的cx_Oracle，cx_Oracle的两阶段支持已完全移除，而在1.2.0b1中，此更改仅对cx_Oracle的6.x系列生效。这个功能在任何版本的cx_Oracle中都从未正常工作过，在cx_Oracle
    6.x中，SQLAlchemy依赖的API被移除。
- en: See also
  id: totrans-2637
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Major Refactor to cx_Oracle Dialect, Typing System](migration_12.html#change-cxoracle-12)'
  id: totrans-2638
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[cx_Oracle方言，类型系统的重大重构](migration_12.html#change-cxoracle-12)'
- en: 'References: [#3997](https://www.sqlalchemy.org/trac/ticket/3997)'
  id: totrans-2639
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3997](https://www.sqlalchemy.org/trac/ticket/3997)
- en: '**[oracle] [bug]**'
  id: totrans-2640
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: The column keys present in a result set when using [`Insert.returning()`](../core/dml.html#sqlalchemy.sql.expression.Insert.returning
    "sqlalchemy.sql.expression.Insert.returning") with the cx_Oracle backend now use
    the correct column / label names like that of all other dialects. Previously,
    these came out as `ret_nnn`.
  id: totrans-2641
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用[`Insert.returning()`](../core/dml.html#sqlalchemy.sql.expression.Insert.returning
    "sqlalchemy.sql.expression.Insert.returning")与cx_Oracle后端时，结果集中的列键现在使用正确的列名/标签，与所有其他方言一样。以前，这些列名为`ret_nnn`。
- en: See also
  id: totrans-2642
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Major Refactor to cx_Oracle Dialect, Typing System](migration_12.html#change-cxoracle-12)'
  id: totrans-2643
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[cx_Oracle方言，类型系统的重大重构](migration_12.html#change-cxoracle-12)'
- en: '**[oracle] [bug]**'
  id: totrans-2644
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: 'Several parameters to the cx_Oracle dialect are now deprecated and will have
    no effect: `auto_setinputsizes`, `exclude_setinputsizes`, `allow_twophase`.'
  id: totrans-2645
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: cx_Oracle方言的几个参数现在已被弃用且不会产生任何效果：`auto_setinputsizes`，`exclude_setinputsizes`，`allow_twophase`。
- en: See also
  id: totrans-2646
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Major Refactor to cx_Oracle Dialect, Typing System](migration_12.html#change-cxoracle-12)'
  id: totrans-2647
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[对 cx_Oracle 方言、类型系统进行了重大重构](migration_12.html#change-cxoracle-12)'
- en: '**[oracle] [bug]**'
  id: totrans-2648
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed bug where an index reflected under Oracle with an expression like “column
    DESC” would not be returned, if the table also had no primary key, as a result
    of logic that attempts to filter out the index implicitly added by Oracle onto
    the primary key columns.
  id: totrans-2649
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 Oracle 下反映出的带有“column DESC”表达式的索引不会返回的 bug，如果表也没有主键，这是由于逻辑尝试过滤掉 Oracle
    隐式添加到主键列上的索引所导致的。
- en: 'References: [#4042](https://www.sqlalchemy.org/trac/ticket/4042)'
  id: totrans-2650
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4042](https://www.sqlalchemy.org/trac/ticket/4042)
- en: '**[oracle] [bug]**'
  id: totrans-2651
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed more regressions caused by cx_Oracle 6.0; at the moment, the only behavioral
    change for users is disconnect detection now detects for cx_Oracle.DatabaseError
    in addition to cx_Oracle.InterfaceError, as this behavior seems to have changed.
    Other issues regarding numeric precision and uncloseable connections are pending
    with the upstream cx_Oracle issue tracker.
  id: totrans-2652
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由 cx_Oracle 6.0 引起的更多回归问题；目前，用户唯一的行为变化是断开连接检测现在除了检测 cx_Oracle.InterfaceError
    外还检测 cx_Oracle.DatabaseError，因为这种行为似乎已经改变。关于数值精度和无法关闭连接的其他问题仍在上游 cx_Oracle 问题跟踪器中等待处理。
- en: 'References: [#4045](https://www.sqlalchemy.org/trac/ticket/4045)'
  id: totrans-2653
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4045](https://www.sqlalchemy.org/trac/ticket/4045)
- en: '**[oracle] [bug]**'
  id: totrans-2654
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed bug where Oracle 8 “non ansi” join mode would not add the `(+)` operator
    to expressions that used an operator other than the `=` operator. The `(+)` needs
    to be on all columns that are part of the right-hand side.
  id: totrans-2655
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 Oracle 8 中“非 ANSI”连接模式不会向使用`=`运算符以外的运算符的表达式添加`(+)`运算符的 bug。`(+)`需要添加到右侧的所有列。
- en: 'References: [#4076](https://www.sqlalchemy.org/trac/ticket/4076)'
  id: totrans-2656
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4076](https://www.sqlalchemy.org/trac/ticket/4076)
- en: orm
  id: totrans-2657
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-2658
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where ORM relationship would warn against conflicting sync targets
    (e.g. two relationships would both write to the same column) for sibling classes
    in an inheritance hierarchy, where the two relationships would never actually
    conflict during writes.
  id: totrans-2659
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 ORM 关系在继承层次结构中的兄弟类中可能会发出警告，提示存在同步目标冲突的 bug（例如，两个关系都写入同一列），而这两个关系实际上在写入时永远不会发生冲突。
- en: 'This change is also **backported** to: 1.1.15'
  id: totrans-2660
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.1.15
- en: 'References: [#4078](https://www.sqlalchemy.org/trac/ticket/4078)'
  id: totrans-2661
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4078](https://www.sqlalchemy.org/trac/ticket/4078)
- en: '**[orm] [bug]**'
  id: totrans-2662
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where correlated select used against single-table inheritance entity
    would fail to render correctly in the outer query, due to adjustment for single
    inheritance discriminator criteria inappropriately re-applying the criteria to
    the outer query.
  id: totrans-2663
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了针对单表继承实体使用的相关查询在外部查询中无法正确呈现的 bug，因为单一继承鉴别器条件的调整不当地重新应用到外部查询中。
- en: 'This change is also **backported** to: 1.1.15'
  id: totrans-2664
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.1.15
- en: 'References: [#4103](https://www.sqlalchemy.org/trac/ticket/4103)'
  id: totrans-2665
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4103](https://www.sqlalchemy.org/trac/ticket/4103)
- en: '**[orm] [bug]**'
  id: totrans-2666
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in [`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge") following along similar lines as that of [#4030](https://www.sqlalchemy.org/trac/ticket/4030),
    where an internal check for a target object in the identity map could lead to
    an error if it were to be garbage collected immediately before the merge routine
    actually retrieves the object.
  id: totrans-2667
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge")中的 bug，与[#4030](https://www.sqlalchemy.org/trac/ticket/4030)类似，其中对于标识映射中的目标对象的内部检查，如果在合并过程实际检索对象之前立即被垃圾回收，可能会导致错误。
- en: 'This change is also **backported** to: 1.1.14'
  id: totrans-2668
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.1.14
- en: 'References: [#4069](https://www.sqlalchemy.org/trac/ticket/4069)'
  id: totrans-2669
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4069](https://www.sqlalchemy.org/trac/ticket/4069)
- en: '**[orm] [bug]**'
  id: totrans-2670
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where an [`undefer_group()`](../orm/queryguide/columns.html#sqlalchemy.orm.undefer_group
    "sqlalchemy.orm.undefer_group") option would not be recognized if it extended
    from a relationship that was loading using joined eager loading. Additionally,
    as the bug led to excess work being performed, Python function call counts are
    also improved by 20% within the initial calculation of result set columns, complementing
    the joined eager load improvements of [#3915](https://www.sqlalchemy.org/trac/ticket/3915).
  id: totrans-2671
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，当[`undefer_group()`](../orm/queryguide/columns.html#sqlalchemy.orm.undefer_group
    "sqlalchemy.orm.undefer_group")选项不被识别时，如果它是从使用联合急加载加载的关系扩展的。此外，由于该错误导致额外的工作被执行，Python函数调用计数也在结果集列的初始计算中提高了20%，这与[#3915](https://www.sqlalchemy.org/trac/ticket/3915)的联合急加载改进相辅相成。
- en: 'This change is also **backported** to: 1.1.14'
  id: totrans-2672
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个改变也被**回溯到**了：1.1.14
- en: 'References: [#4048](https://www.sqlalchemy.org/trac/ticket/4048)'
  id: totrans-2673
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#4048](https://www.sqlalchemy.org/trac/ticket/4048)
- en: '**[orm] [bug]**'
  id: totrans-2674
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in [`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge") where objects in a collection that had the primary
    key attribute set to `None` for a key that is typically autoincrementing would
    be considered to be a database-persisted key for part of the internal deduplication
    process, causing only one object to actually be inserted in the database.
  id: totrans-2675
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge")中的一个bug，当集合中的对象的主键属性设置为`None`时，通常是自动增量的键，则会将其视为数据库持久化键的一部分，用于内部去重处理过程，导致只有一个对象实际上被插入数据库。
- en: 'This change is also **backported** to: 1.1.14'
  id: totrans-2676
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个改变也被**回溯到**了：1.1.14
- en: 'References: [#4056](https://www.sqlalchemy.org/trac/ticket/4056)'
  id: totrans-2677
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#4056](https://www.sqlalchemy.org/trac/ticket/4056)
- en: '**[orm] [bug]**'
  id: totrans-2678
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: An [`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError") is raised when a [`synonym()`](../orm/mapped_attributes.html#sqlalchemy.orm.synonym
    "sqlalchemy.orm.synonym") is used against an attribute that is not against a [`MapperProperty`](../orm/internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty"), such as an association proxy. Previously, a
    recursion overflow would occur trying to locate non-existent attributes.
  id: totrans-2679
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当对一个不是针对[`MapperProperty`](../orm/internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty")的属性（例如关联代理）使用[`synonym()`](../orm/mapped_attributes.html#sqlalchemy.orm.synonym
    "sqlalchemy.orm.synonym")时，会引发[`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError")。以前，尝试定位不存在的属性时会导致递归溢出。
- en: 'This change is also **backported** to: 1.1.14'
  id: totrans-2680
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个改变也被**回溯到**了：1.1.14
- en: 'References: [#4067](https://www.sqlalchemy.org/trac/ticket/4067)'
  id: totrans-2681
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#4067](https://www.sqlalchemy.org/trac/ticket/4067)
- en: '**[orm] [bug]**'
  id: totrans-2682
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression introduced in 1.2.0b1 due to [#3934](https://www.sqlalchemy.org/trac/ticket/3934)
    where the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    would fail to “deactivate” the transaction, if a rollback failed (the target issue
    is when MySQL loses track of a SAVEPOINT). This would cause a subsequent call
    to [`Session.rollback()`](../orm/session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") to raise an error a second time, rather than
    completing and bringing the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") back to ACTIVE.
  id: totrans-2683
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于[#3934](https://www.sqlalchemy.org/trac/ticket/3934)引入的1.2.0b1中的回归已修复，即使回滚失败（目标问题是当MySQL丢失SAVEPOINT时），[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")也不会“停用”事务。这将导致对[`Session.rollback()`](../orm/session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback")的后续调用再次引发错误，而不是完成并将[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")带回ACTIVE状态。
- en: 'References: [#4050](https://www.sqlalchemy.org/trac/ticket/4050)'
  id: totrans-2684
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#4050](https://www.sqlalchemy.org/trac/ticket/4050)
- en: '**[orm] [bug]**'
  id: totrans-2685
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where the [`make_transient_to_detached()`](../orm/session_api.html#sqlalchemy.orm.make_transient_to_detached
    "sqlalchemy.orm.make_transient_to_detached") function would expire all attributes
    on the target object, including “deferred” attributes, which has the effect of
    the attribute being undeferred for the next refresh, causing an unexpected load
    of the attribute.
  id: totrans-2686
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`make_transient_to_detached()`](../orm/session_api.html#sqlalchemy.orm.make_transient_to_detached
    "sqlalchemy.orm.make_transient_to_detached")函数的问题，该函数会使目标对象上的所有属性过期，包括“延迟加载”属性，导致属性在下一次刷新时被取消延迟加载，从而导致属性意外加载。
- en: 'References: [#4084](https://www.sqlalchemy.org/trac/ticket/4084)'
  id: totrans-2687
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#4084](https://www.sqlalchemy.org/trac/ticket/4084)
- en: '**[orm] [bug]**'
  id: totrans-2688
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug involving delete-orphan cascade where a related item that becomes
    an orphan before the parent object is part of a session is still tracked as moving
    into orphan status, which results in it being expunged from the session rather
    than being flushed.
  id: totrans-2689
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了涉及删除孤立级联的错误，其中相关项目在父对象成为会话的一部分之前变为孤立状态，但仍然被跟踪为进入孤立状态，结果是它被从会话中删除而不是被刷新。
- en: Note
  id: totrans-2690
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: This fix was inadvertently merged during the 1.2.0b3 release and was **not added
    to the changelog** at that time. This changelog note was added to the release
    retroactively as of version 1.2.13.
  id: totrans-2691
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个修复在1.2.0b3版本中被无意中合并，并且在那个时候**没有被添加到更改日志**中。这个更改日志记录是作为1.2.13版本的一部分进行了补充的。
- en: 'References: [#4040](https://www.sqlalchemy.org/trac/ticket/4040)'
  id: totrans-2692
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4040](https://www.sqlalchemy.org/trac/ticket/4040)
- en: '**[orm] [bug]**'
  id: totrans-2693
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in [“selectin” polymorphic loading, loads subclasses using separate
    IN queries](migration_12.html#change-3948) which prevented “selectin” and “inline”
    settings in a multi-level class hierarchy from interacting together as expected.
  id: totrans-2694
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[“selectin”多态加载，使用单独的IN查询加载子类](migration_12.html#change-3948)中的错误，该错误阻止了多级类层次结构中的“selectin”和“inline”设置按预期进行交互。
- en: 'References: [#4026](https://www.sqlalchemy.org/trac/ticket/4026)'
  id: totrans-2695
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4026](https://www.sqlalchemy.org/trac/ticket/4026)
- en: '**[orm] [bug]**'
  id: totrans-2696
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Removed the warnings that are emitted when the LRU caches employed by the mapper
    as well as loader strategies reach their threshold; the purpose of this warning
    was at first a guard against excess cache keys being generated but became basically
    a check on the “creating many engines” antipattern. While this is still an antipattern,
    the presence of test suites which both create an engine per test as well as raise
    on all warnings will be an inconvenience; it should not be critical that such
    test suites change their architecture just for this warning (though engine-per-test
    suite is always better).
  id: totrans-2697
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了当映射器和加载器策略所使用的LRU缓存达到阈值时发出的警告；最初该警告的目的是防止生成过多的缓存键，但后来基本上成为了对“创建许多引擎”反模式的检查。尽管这仍然是一个反模式，但存在同时为每个测试创建一个引擎并且在所有警告上引发的测试套件将是一个不便；这种测试套件不应该因为这个警告而改变它们的架构（尽管每个测试一个引擎的套件总是更好）。
- en: 'References: [#4071](https://www.sqlalchemy.org/trac/ticket/4071)'
  id: totrans-2698
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4071](https://www.sqlalchemy.org/trac/ticket/4071)
- en: '**[orm] [bug]**'
  id: totrans-2699
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression where the use of a [`undefer_group()`](../orm/queryguide/columns.html#sqlalchemy.orm.undefer_group
    "sqlalchemy.orm.undefer_group") option in conjunction with a lazy loaded relationship
    option would cause an attribute error, due to a bug in the SQL cache key generation
    added in 1.2 as part of [#3954](https://www.sqlalchemy.org/trac/ticket/3954).
  id: totrans-2700
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个回归，其中在与延迟加载关系选项结合使用[`undefer_group()`](../orm/queryguide/columns.html#sqlalchemy.orm.undefer_group
    "sqlalchemy.orm.undefer_group")选项时，由于在1.2中作为[#3954](https://www.sqlalchemy.org/trac/ticket/3954)的一部分添加的SQL缓存键生成中存在错误，导致属性错误。
- en: 'References: [#4049](https://www.sqlalchemy.org/trac/ticket/4049)'
  id: totrans-2701
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4049](https://www.sqlalchemy.org/trac/ticket/4049)
- en: '**[orm] [bug]**'
  id: totrans-2702
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Modified the change made to the ORM update/delete evaluator in [#3366](https://www.sqlalchemy.org/trac/ticket/3366)
    such that if an unmapped column expression is present in the update or delete,
    if the evaluator can match its name to the mapped columns of the target class,
    a warning is emitted, rather than raising UnevaluatableError. This is essentially
    the pre-1.2 behavior, and is to allow migration for applications that are currently
    relying upon this pattern. However, if the given attribute name cannot be matched
    to the columns of the mapper, the UnevaluatableError is still raised, which is
    what was fixed in [#3366](https://www.sqlalchemy.org/trac/ticket/3366).
  id: totrans-2703
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了在[#3366](https://www.sqlalchemy.org/trac/ticket/3366)中对ORM更新/删除评估器所做的更改，以便如果更新或删除中存在未映射的列表达式，并且评估器可以将其名称与目标类的映射列相匹配，则发出警告，而不是引发UnevaluatableError。这基本上是1.2版本之前的行为，目的是允许正在依赖此模式的应用程序进行迁移。然而，如果给定的属性名称无法与映射器的列匹配，则仍然会引发UnevaluatableError，这是在[#3366](https://www.sqlalchemy.org/trac/ticket/3366)中修复的问题。
- en: 'References: [#4073](https://www.sqlalchemy.org/trac/ticket/4073)'
  id: totrans-2704
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4073](https://www.sqlalchemy.org/trac/ticket/4073)
- en: orm declarative
  id: totrans-2705
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm声明性
- en: '**[orm] [declarative] [bug]**'
  id: totrans-2706
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: A warning is emitted if a subclass attempts to override an attribute that was
    declared on a superclass using `@declared_attr.cascading` that the overridden
    attribute will be ignored. This use case cannot be fully supported down to further
    subclasses without more complex development efforts, so for consistency the “cascading”
    is honored all the way down regardless of overriding attributes.
  id: totrans-2707
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果子类试图覆盖在父类上使用 `@declared_attr.cascading` 声明的属性，则会发出警告，表明覆盖的属性将被忽略。这种用法不能完全支持到更进一步的子类，需要更复杂的开发工作，因此为了一致性，无论覆盖属性如何，都会一直遵循“级联”一直下去。
- en: 'References: [#4091](https://www.sqlalchemy.org/trac/ticket/4091)'
  id: totrans-2708
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4091](https://www.sqlalchemy.org/trac/ticket/4091)
- en: '**[orm] [declarative] [bug]**'
  id: totrans-2709
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: A warning is emitted if the `@declared_attr.cascading` attribute is used with
    a special declarative name such as `__tablename__`, as this has no effect.
  id: totrans-2710
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果 `@declared_attr.cascading` 属性与特殊的声明性名称（例如 `__tablename__`）一起使用，则会发出警告，因为这没有效果。
- en: 'References: [#4092](https://www.sqlalchemy.org/trac/ticket/4092)'
  id: totrans-2711
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4092](https://www.sqlalchemy.org/trac/ticket/4092)
- en: engine
  id: totrans-2712
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [feature]**'
  id: totrans-2713
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: Added `__next__()` and `next()` methods to `ResultProxy`, so that the `next()`
    builtin function works on the object directly. `ResultProxy` has long had an `__iter__()`
    method which already allows it to respond to the `iter()` builtin. The implementation
    for `__iter__()` is unchanged, as performance testing has indicated that iteration
    using a `__next__()` method with `StopIteration` is about 20% slower in both Python
    2.7 and 3.6.
  id: totrans-2714
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为`ResultProxy`添加了`__next__()`和`next()`方法，以便直接在对象上使用`next()`内置函数。`ResultProxy`长期以来已经有了`__iter__()`方法，它已经允许它响应`iter()`内置函数。`__iter__()`的实现没有改变，因为性能测试表明，使用带有`StopIteration`的`__next__()`方法进行迭代在
    Python 2.7 和 3.6 中都慢约 20%。
- en: 'References: [#4077](https://www.sqlalchemy.org/trac/ticket/4077)'
  id: totrans-2715
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4077](https://www.sqlalchemy.org/trac/ticket/4077)
- en: '**[engine] [bug]**'
  id: totrans-2716
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Made some adjustments to [`Pool`](../core/pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") and [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") such that recovery logic is not run underneath
    exception catches for `pool.Empty`, `AttributeError`, since when the recovery
    operation itself fails, Python 3 creates a misleading stack trace referring to
    the `Empty` / `AttributeError` as the cause, when in fact these exception catches
    are part of control flow.
  id: totrans-2717
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对[`Pool`](../core/pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")和[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")进行了一些调整，以便在 `pool.Empty`、`AttributeError` 的异常捕获下不运行恢复逻辑，因为当恢复操作本身失败时，Python
    3 会创建一个误导性的堆栈跟踪，将 `Empty` / `AttributeError` 误认为是原因，而实际上这些异常捕获是控制流的一部分。
- en: 'References: [#4028](https://www.sqlalchemy.org/trac/ticket/4028)'
  id: totrans-2718
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4028](https://www.sqlalchemy.org/trac/ticket/4028)
- en: sql
  id: totrans-2719
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-2720
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where the recently added [`ColumnOperators.any_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") and [`ColumnOperators.all_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") methods didn’t work when called
    as methods, as opposed to using the standalone functions [`any_()`](../core/sqlelement.html#sqlalchemy.sql.expression.any_
    "sqlalchemy.sql.expression.any_") and [`all_()`](../core/sqlelement.html#sqlalchemy.sql.expression.all_
    "sqlalchemy.sql.expression.all_"). Also added documentation examples for these
    relatively unintuitive SQL operators.
  id: totrans-2721
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了最近添加的[`ColumnOperators.any_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_")和[`ColumnOperators.all_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_")方法在被调用为方法时不起作用的错误，与使用独立函数[`any_()`](../core/sqlelement.html#sqlalchemy.sql.expression.any_
    "sqlalchemy.sql.expression.any_")和[`all_()`](../core/sqlelement.html#sqlalchemy.sql.expression.all_
    "sqlalchemy.sql.expression.all_")相反。还为这些相对不直观的 SQL 操作添加了文档示例。
- en: 'This change is also **backported** to: 1.1.15'
  id: totrans-2722
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也**回溯**到：1.1.15
- en: 'References: [#4093](https://www.sqlalchemy.org/trac/ticket/4093)'
  id: totrans-2723
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4093](https://www.sqlalchemy.org/trac/ticket/4093)
- en: '**[sql] [bug]**'
  id: totrans-2724
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Added a new method [`DefaultExecutionContext.get_current_parameters()`](../core/internals.html#sqlalchemy.engine.default.DefaultExecutionContext.get_current_parameters
    "sqlalchemy.engine.default.DefaultExecutionContext.get_current_parameters") which
    is used within a function-based default value generator in order to retrieve the
    current parameters being passed to the statement. The new function differs from
    the [`DefaultExecutionContext.current_parameters`](../core/internals.html#sqlalchemy.engine.default.DefaultExecutionContext.current_parameters
    "sqlalchemy.engine.default.DefaultExecutionContext.current_parameters") attribute
    in that it also provides for optional grouping of parameters that correspond to
    a multi-valued “insert” construct. Previously it was not possible to identify
    the subset of parameters that were relevant to the function call.
  id: totrans-2725
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的方法 [`DefaultExecutionContext.get_current_parameters()`](../core/internals.html#sqlalchemy.engine.default.DefaultExecutionContext.get_current_parameters
    "sqlalchemy.engine.default.DefaultExecutionContext.get_current_parameters")，用于在基于函数的默认值生成器中检索传递给语句的当前参数。新函数与
    [`DefaultExecutionContext.current_parameters`](../core/internals.html#sqlalchemy.engine.default.DefaultExecutionContext.current_parameters
    "sqlalchemy.engine.default.DefaultExecutionContext.current_parameters") 属性不同之处在于，它还提供了对与多值“插入”构造相对应的参数的可选分组。以前不可能确定与函数调用相关的参数子集。
- en: See also
  id: totrans-2726
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Parameter helper for multi-valued INSERT with contextual default generator](migration_12.html#change-4075)'
  id: totrans-2727
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 多值插入的参数辅助工具带有上下文默认生成器
- en: '[Context-Sensitive Default Functions](../core/defaults.html#context-default-functions)'
  id: totrans-2728
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上下文敏感的默认函数
- en: 'References: [#4075](https://www.sqlalchemy.org/trac/ticket/4075)'
  id: totrans-2729
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4075](https://www.sqlalchemy.org/trac/ticket/4075)
- en: '**[sql] [bug]**'
  id: totrans-2730
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in new SQL comments feature where table and column comment would not
    be copied when using [`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata").
  id: totrans-2731
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新 SQL 注释功能中的错误，其中在使用 [`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata") 时，表和列注释不会被复制。
- en: 'References: [#4087](https://www.sqlalchemy.org/trac/ticket/4087)'
  id: totrans-2732
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4087](https://www.sqlalchemy.org/trac/ticket/4087)
- en: '**[sql] [bug]**'
  id: totrans-2733
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: In release 1.1, the [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean") type was broken in that boolean coercion via `bool()`
    would occur for backends that did not feature “native boolean”, but would not
    occur for native boolean backends, meaning the string `"0"` now behaved inconsistently.
    After a poll, a consensus was reached that non-boolean values should be raising
    an error, especially in the ambiguous case of string `"0"`; so the [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean") datatype will now raise `ValueError` if an incoming
    value is not within the range `None, True, False, 1, 0`.
  id: totrans-2734
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 1.1 版本中，[`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean")
    类型存在问题，即在没有“本地布尔值”的后端中，通过 `bool()` 进行布尔强制转换，但在本地布尔后端中不会发生，这意味着字符串 `"0"` 现在的行为不一致。经过投票，达成共识，即非布尔值应该引发错误，特别是在字符串
    `"0"` 的模糊情况下；因此，如果传入值不在 `None, True, False, 1, 0` 范围内，[`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean") 数据类型现在会引发 `ValueError`。
- en: See also
  id: totrans-2735
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Boolean datatype now enforces strict True/False/None values](migration_12.html#change-4102)'
  id: totrans-2736
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔数据类型现在强制使用严格的 True/False/None 值
- en: 'References: [#4102](https://www.sqlalchemy.org/trac/ticket/4102)'
  id: totrans-2737
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4102](https://www.sqlalchemy.org/trac/ticket/4102)
- en: '**[sql] [bug]**'
  id: totrans-2738
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Refined the behavior of [`Operators.op()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") such that in all cases, if the [`Operators.op.is_comparison`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op") flag is set to True, the return type
    of the resulting expression will be [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean"), and if the flag is False, the return type of the
    resulting expression will be the same type as that of the left-hand expression,
    which is the typical default behavior of other operators. Also added a new parameter
    [`Operators.op.return_type`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.return_type
    "sqlalchemy.sql.expression.Operators.op") as well as a helper method [`Operators.bool_op()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op").
  id: totrans-2739
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 优化了[`Operators.op()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op")的行为，使得在所有情况下，如果[`Operators.op.is_comparison`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op")标志设置为True，则结果表达式的返回类型将是[`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean")，如果标志为False，则结果表达式的返回类型将与左侧表达式的类型相同，这是其他运算符的典型默认行为。还添加了一个新参数[`Operators.op.return_type`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.return_type
    "sqlalchemy.sql.expression.Operators.op")以及一个辅助方法[`Operators.bool_op()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op")。
- en: See also
  id: totrans-2740
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[The typing behavior of custom operators has been made consistent](migration_12.html#change-4063)'
  id: totrans-2741
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[自定义运算符的类型行为已经变得一致](migration_12.html#change-4063)'
- en: 'References: [#4063](https://www.sqlalchemy.org/trac/ticket/4063)'
  id: totrans-2742
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4063](https://www.sqlalchemy.org/trac/ticket/4063)
- en: '**[sql] [bug]**'
  id: totrans-2743
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误]**'
- en: Internal refinements to the [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum"), [`Interval`](../core/type_basics.html#sqlalchemy.types.Interval
    "sqlalchemy.types.Interval"), and [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean") types, which now extend a common mixin `Emulated`
    that indicates a type that provides Python-side emulation of a DB native type,
    switching out to the DB native type when a supporting backend is in use. The PostgreSQL
    [`INTERVAL`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.INTERVAL
    "sqlalchemy.dialects.postgresql.INTERVAL") type when used directly will now include
    the correct type coercion rules for SQL expressions that also take effect for
    [`Interval`](../core/type_basics.html#sqlalchemy.types.Interval "sqlalchemy.types.Interval")
    (such as adding a date to an interval yields a datetime).
  id: totrans-2744
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")、[`Interval`](../core/type_basics.html#sqlalchemy.types.Interval
    "sqlalchemy.types.Interval")和[`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean")类型进行内部优化，现在它们都扩展了一个名为`Emulated`的通用混合类型，表示提供了对数据库原生类型的Python端模拟，在使用支持的后端时切换到数据库原生类型。直接使用PostgreSQL的[`INTERVAL`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.INTERVAL
    "sqlalchemy.dialects.postgresql.INTERVAL")类型现在将包括正确的类型强制转换规则，这些规则也适用于[`Interval`](../core/type_basics.html#sqlalchemy.types.Interval
    "sqlalchemy.types.Interval")（例如将日期添加到间隔会产生日期时间）。
- en: 'References: [#4088](https://www.sqlalchemy.org/trac/ticket/4088)'
  id: totrans-2745
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4088](https://www.sqlalchemy.org/trac/ticket/4088)
- en: postgresql
  id: totrans-2746
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-2747
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [功能]**'
- en: Added a new flag `use_batch_mode` to the psycopg2 dialect. This flag enables
    the use of psycopg2’s `psycopg2.extras.execute_batch` extension when the [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") calls upon `cursor.executemany()`. This extension
    provides a critical performance increase by over an order of magnitude when running
    INSERT statements in batch. The flag is False by default as it is considered to
    be experimental for now.
  id: totrans-2748
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向psycopg2方言添加了一个新标志`use_batch_mode`。当[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")调用`cursor.executemany()`时，此标志启用了psycopg2的`psycopg2.extras.execute_batch`扩展。这个扩展在批量运行INSERT语句时提供了关键的性能提升，性能提升超过一个数量级。该标志默认为False，因为目前被认为是实验性的。
- en: See also
  id: totrans-2749
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[Support for Batch Mode / Fast Execution Helpers](migration_12.html#change-4109)'
  id: totrans-2750
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[批处理模式/快速执行助手的支持](migration_12.html#change-4109)'
- en: 'References: [#4109](https://www.sqlalchemy.org/trac/ticket/4109)'
  id: totrans-2751
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4109](https://www.sqlalchemy.org/trac/ticket/4109)
- en: '**[postgresql] [bug]**'
  id: totrans-2752
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [错误]**'
- en: Made further fixes to the [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") class in conjunction with COLLATE, as the fix made in
    [#4006](https://www.sqlalchemy.org/trac/ticket/4006) failed to accommodate for
    a multidimensional array.
  id: totrans-2753
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 进一步修复了与 COLLATE 结合使用的 [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") 类中的问题，因为在 [#4006](https://www.sqlalchemy.org/trac/ticket/4006)
    中进行的修复未能适应多维数组。
- en: 'This change is also **backported** to: 1.1.15'
  id: totrans-2754
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：1.1.15
- en: 'References: [#4006](https://www.sqlalchemy.org/trac/ticket/4006)'
  id: totrans-2755
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4006](https://www.sqlalchemy.org/trac/ticket/4006)
- en: '**[postgresql] [bug]**'
  id: totrans-2756
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug in [`array_agg`](../core/functions.html#sqlalchemy.sql.functions.array_agg
    "sqlalchemy.sql.functions.array_agg") function where passing an argument that
    is already of type [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY"),
    such as a PostgreSQL [`array`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.array
    "sqlalchemy.dialects.postgresql.array") construct, would produce a `ValueError`,
    due to the function attempting to nest the arrays.
  id: totrans-2757
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`array_agg`](../core/functions.html#sqlalchemy.sql.functions.array_agg "sqlalchemy.sql.functions.array_agg")函数中的错误，其中传递一个已经是[`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY")类型的参数，例如 PostgreSQL [`array`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.array
    "sqlalchemy.dialects.postgresql.array") 构造，会产生`ValueError`，因为函数尝试嵌套数组。
- en: 'This change is also **backported** to: 1.1.15'
  id: totrans-2758
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：1.1.15
- en: 'References: [#4107](https://www.sqlalchemy.org/trac/ticket/4107)'
  id: totrans-2759
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4107](https://www.sqlalchemy.org/trac/ticket/4107)
- en: '**[postgresql] [bug]**'
  id: totrans-2760
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug in PostgreSQL `Insert.on_conflict_do_update()` which would prevent
    the insert statement from being used as a CTE, e.g. via `Insert.cte()`, within
    another statement.
  id: totrans-2761
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 PostgreSQL `Insert.on_conflict_do_update()` 中的错误，该错误将阻止将插入语句用作 CTE，例如通过
    `Insert.cte()`，在另一个语句中。
- en: 'This change is also **backported** to: 1.1.15'
  id: totrans-2762
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：1.1.15
- en: 'References: [#4074](https://www.sqlalchemy.org/trac/ticket/4074)'
  id: totrans-2763
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4074](https://www.sqlalchemy.org/trac/ticket/4074)
- en: '**[postgresql] [bug]**'
  id: totrans-2764
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug where the pg8000 driver would fail if using [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") with a schema name, since the schema name
    would be sent as a “quoted_name” object that’s a string subclass, which pg8000
    doesn’t recognize. The quoted_name type is added to pg8000’s py_types collection
    on connect.
  id: totrans-2765
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 pg8000 驱动程序在使用带有模式名称的 [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") 时会失败的错误，因为模式名称将作为“quoted_name”对象发送，该对象是一个字符串子类，pg8000
    不识别。在连接时，quoted_name 类型被添加到 pg8000 的 py_types 集合中。
- en: 'References: [#4041](https://www.sqlalchemy.org/trac/ticket/4041)'
  id: totrans-2766
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4041](https://www.sqlalchemy.org/trac/ticket/4041)
- en: '**[postgresql] [bug]**'
  id: totrans-2767
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Enabled UUID support for the pg8000 driver, which supports native Python uuid
    round trips for this datatype. Arrays of UUID are still not supported, however.
  id: totrans-2768
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 pg8000 驱动程序启用了 UUID 支持，支持此数据类型的本机 Python uuid 往返。但是仍然不支持 UUID 数组。
- en: 'References: [#4016](https://www.sqlalchemy.org/trac/ticket/4016)'
  id: totrans-2769
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4016](https://www.sqlalchemy.org/trac/ticket/4016)
- en: mysql
  id: totrans-2770
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-2771
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Warning emitted when MariaDB 10.2.8 or earlier in the 10.2 series is detected
    as there are major issues with CHECK constraints within these versions that were
    resolved as of 10.2.9.
  id: totrans-2772
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当检测到 MariaDB 10.2.8 或更早版本的 10.2 系列时发出警告，因为这些版本中的 CHECK 约束存在重大问题，这些问题在 10.2.9
    中已解决。
- en: Note that this changelog message was NOT released with SQLAlchemy 1.2.0b3 and
    was added retroactively.
  id: totrans-2773
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，此更改日志消息未随 SQLAlchemy 1.2.0b3 一起发布，而是事后添加的。
- en: 'This change is also **backported** to: 1.1.15'
  id: totrans-2774
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：1.1.15
- en: 'References: [#4097](https://www.sqlalchemy.org/trac/ticket/4097)'
  id: totrans-2775
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4097](https://www.sqlalchemy.org/trac/ticket/4097)
- en: '**[mysql] [bug]**'
  id: totrans-2776
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed issue where CURRENT_TIMESTAMP would not reflect correctly in the MariaDB
    10.2 series due to a syntax change, where the function is now represented as `current_timestamp()`.
  id: totrans-2777
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 MariaDB 10.2 系列中 CURRENT_TIMESTAMP 由于语法更改而无法正确反映的问题，其中该函数现在表示为 `current_timestamp()`。
- en: 'This change is also **backported** to: 1.1.15'
  id: totrans-2778
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：1.1.15
- en: 'References: [#4096](https://www.sqlalchemy.org/trac/ticket/4096)'
  id: totrans-2779
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4096](https://www.sqlalchemy.org/trac/ticket/4096)
- en: '**[mysql] [bug]**'
  id: totrans-2780
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: 'MariaDB 10.2 now supports CHECK constraints (warning: use version 10.2.9 or
    greater due to upstream issues noted in [#4097](https://www.sqlalchemy.org/trac/ticket/4097)).
    Reflection now takes these CHECK constraints into account when they are present
    in the `SHOW CREATE TABLE` output.'
  id: totrans-2781
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MariaDB 10.2现在支持CHECK约束（警告：由于上游问题，请使用版本10.2.9或更高版本，详见[#4097](https://www.sqlalchemy.org/trac/ticket/4097)）。反射现在在存在时考虑这些CHECK约束，当它们出现在`SHOW
    CREATE TABLE`输出中时。
- en: 'This change is also **backported** to: 1.1.15'
  id: totrans-2782
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.1.15
- en: 'References: [#4098](https://www.sqlalchemy.org/trac/ticket/4098)'
  id: totrans-2783
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4098](https://www.sqlalchemy.org/trac/ticket/4098)
- en: '**[mysql] [bug]**'
  id: totrans-2784
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Changed the name of the `.values` attribute of the new MySQL INSERT..ON DUPLICATE
    KEY UPDATE construct to `.inserted`, as [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") already has a method called [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values"). The `.inserted` attribute ultimately
    renders the MySQL `VALUES()` function.
  id: totrans-2785
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将新的MySQL INSERT..ON DUPLICATE KEY UPDATE构造的`.values`属性的名称更改为`.inserted`，因为[`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert")已经有一个名为[`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values")的方法。`.inserted`属性最终呈现MySQL的`VALUES()`函数。
- en: 'References: [#4072](https://www.sqlalchemy.org/trac/ticket/4072)'
  id: totrans-2786
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4072](https://www.sqlalchemy.org/trac/ticket/4072)
- en: sqlite
  id: totrans-2787
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-2788
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Fixed bug where SQLite CHECK constraint reflection would fail if the referenced
    table were in a remote schema, e.g. on SQLite a remote database referred to by
    ATTACH.
  id: totrans-2789
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，当SQLite的CHECK约束反射失败时，如果引用的表在远程模式下，例如在SQLite中由ATTACH引用的远程数据库，则会失败。
- en: 'This change is also **backported** to: 1.1.15'
  id: totrans-2790
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.1.15
- en: 'References: [#4099](https://www.sqlalchemy.org/trac/ticket/4099)'
  id: totrans-2791
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4099](https://www.sqlalchemy.org/trac/ticket/4099)
- en: mssql
  id: totrans-2792
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [feature]**'
  id: totrans-2793
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [feature]**'
- en: Added a new [`TIMESTAMP`](../dialects/mssql.html#sqlalchemy.dialects.mssql.TIMESTAMP
    "sqlalchemy.dialects.mssql.TIMESTAMP") datatype, that correctly acts like a binary
    datatype for SQL Server rather than a datetime type, as SQL Server breaks the
    SQL standard here. Also added [`ROWVERSION`](../dialects/mssql.html#sqlalchemy.dialects.mssql.ROWVERSION
    "sqlalchemy.dialects.mssql.ROWVERSION"), as the “TIMESTAMP” type in SQL Server
    is deprecated in favor of ROWVERSION.
  id: totrans-2794
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的[`TIMESTAMP`](../dialects/mssql.html#sqlalchemy.dialects.mssql.TIMESTAMP
    "sqlalchemy.dialects.mssql.TIMESTAMP")数据类型，它在SQL Server中正确地像二进制数据类型一样工作，而不是一个datetime类型，因为SQL
    Server在这里违反了SQL标准。还添加了[`ROWVERSION`](../dialects/mssql.html#sqlalchemy.dialects.mssql.ROWVERSION
    "sqlalchemy.dialects.mssql.ROWVERSION")，因为SQL Server中的“TIMESTAMP”类型已被弃用，改用ROWVERSION。
- en: 'References: [#4086](https://www.sqlalchemy.org/trac/ticket/4086)'
  id: totrans-2795
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4086](https://www.sqlalchemy.org/trac/ticket/4086)
- en: '**[mssql] [feature]**'
  id: totrans-2796
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [feature]**'
- en: Added support for “AUTOCOMMIT” isolation level, as established via [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options"), to the PyODBC and pymssql dialects.
    This isolation level sets the appropriate DBAPI-specific flags on the underlying
    connection object.
  id: totrans-2797
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对“AUTOCOMMIT”隔离级别的支持，通过[`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")在PyODBC和pymssql方言中建立。此隔离级别在底层连接对象上设置适当的DBAPI特定标志。
- en: 'References: [#4058](https://www.sqlalchemy.org/trac/ticket/4058)'
  id: totrans-2798
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4058](https://www.sqlalchemy.org/trac/ticket/4058)
- en: '**[mssql] [bug]**'
  id: totrans-2799
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Added a full range of “connection closed” exception codes to the PyODBC dialect
    for SQL Server, including ‘08S01’, ‘01002’, ‘08003’, ‘08007’, ‘08S02’, ‘08001’,
    ‘HYT00’, ‘HY010’. Previously, only ‘08S01’ was covered.
  id: totrans-2800
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为SQL Server的PyODBC方言添加了完整的“连接关闭”异常代码范围，包括‘08S01’、‘01002’、‘08003’、‘08007’、‘08S02’、‘08001’、‘HYT00’、‘HY010’。以前只覆盖了‘08S01’。
- en: 'This change is also **backported** to: 1.1.15'
  id: totrans-2801
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.1.15
- en: 'References: [#4095](https://www.sqlalchemy.org/trac/ticket/4095)'
  id: totrans-2802
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4095](https://www.sqlalchemy.org/trac/ticket/4095)
- en: '**[mssql] [bug]**'
  id: totrans-2803
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: SQL Server supports what SQLAlchemy calls “native boolean” with its BIT type,
    as this type only accepts 0 or 1 and the DBAPIs return its value as True/False.
    So the SQL Server dialects now enable “native boolean” support, in that a CHECK
    constraint is not generated for a [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean") datatype. The only difference vs. other native boolean
    is that there are no “true” / “false” constants so “1” and “0” are still rendered
    here.
  id: totrans-2804
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQL Server支持SQLAlchemy称为“本地布尔”的BIT类型，因为该类型只接受0或1，而DBAPI将其值返回为True/False。因此，SQL
    Server方言现在启用了“本地布尔”支持，即不为[`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean")数据类型生成CHECK约束。与其他本地布尔的唯一区别是没有“true” / “false”常量，因此这里仍然呈现为“1”和“0”。
- en: 'References: [#4061](https://www.sqlalchemy.org/trac/ticket/4061)'
  id: totrans-2805
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4061](https://www.sqlalchemy.org/trac/ticket/4061)
- en: '**[mssql] [bug]**'
  id: totrans-2806
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed the pymssql dialect so that percent signs in SQL text, such as used in
    modulus expressions or literal textual values, are **not** doubled up, as seems
    to be what pymssql expects. This is despite the fact that the pymssql DBAPI uses
    the “pyformat” parameter style which itself considers the percent sign to be significant.
  id: totrans-2807
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了pymssql方言中SQL文本中的百分号，例如在模数表达式或文字值中使用的情况，不会加倍，这似乎是pymssql所期望的。尽管pymssql DBAPI使用“pyformat”参数样式，该样式认为百分号是重要的。
- en: 'References: [#4057](https://www.sqlalchemy.org/trac/ticket/4057)'
  id: totrans-2808
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4057](https://www.sqlalchemy.org/trac/ticket/4057)
- en: '**[mssql] [bug]**'
  id: totrans-2809
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed bug where the SQL Server dialect could pull columns from multiple schemas
    when reflecting a self-referential foreign key constraint, if multiple schemas
    contained a constraint of the same name against a table of the same name.
  id: totrans-2810
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了SQL Server方言在反射自引用外键约束时可能从多个模式中提取列的错误，如果多个模式包含相同名称的约束针对相同名称的表。
- en: 'References: [#4060](https://www.sqlalchemy.org/trac/ticket/4060)'
  id: totrans-2811
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4060](https://www.sqlalchemy.org/trac/ticket/4060)
- en: '**[mssql] [bug] [orm]**'
  id: totrans-2812
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug] [orm]**'
- en: Added a new class of “rowcount support” for dialects that is specific to when
    “RETURNING”, which on SQL Server looks like “OUTPUT inserted”, is in use, as the
    PyODBC backend isn’t able to give us rowcount on an UPDATE or DELETE statement
    when OUTPUT is in effect. This primarily affects the ORM when a flush is updating
    a row that contains server-calculated values, raising an error if the backend
    does not return the expected row count. PyODBC now states that it supports rowcount
    except if OUTPUT.inserted is present, which is taken into account by the ORM during
    a flush as to whether it will look for a rowcount.
  id: totrans-2813
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为特定于“RETURNING”的方言添加了一个新类别的“rowcount支持”，在SQL Server上看起来像“OUTPUT inserted”，因为PyODBC后端在OUTPUT生效时无法给我们UPDATE或DELETE语句的rowcount。这主要影响ORM，当flush更新包含服务器计算值的行时，如果后端没有返回预期的行数，会引发错误。PyODBC现在声明支持rowcount，除非存在OUTPUT.inserted，ORM在flush期间会考虑是否寻找rowcount。
- en: 'References: [#4062](https://www.sqlalchemy.org/trac/ticket/4062)'
  id: totrans-2814
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4062](https://www.sqlalchemy.org/trac/ticket/4062)
- en: '**[mssql] [bug] [orm]**'
  id: totrans-2815
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug] [orm]**'
- en: Enabled the “sane_rowcount” flag for the pymssql dialect, indicating that the
    DBAPI now reports the correct number of rows affected from an UPDATE or DELETE
    statement. This impacts mostly the ORM versioning feature in that it now can verify
    the number of rows affected on a target version.
  id: totrans-2816
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为pymssql方言启用了“sane_rowcount”标志，表示DBAPI现在报告UPDATE或DELETE语句受影响的正确行数。这主要影响ORM版本功能，因为它现在可以验证目标版本受影响的行数。
- en: '**[mssql] [bug]**'
  id: totrans-2817
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Added a rule to SQL Server index reflection to ignore the so-called “heap” index
    that is implicitly present on a table that does not specify a clustered index.
  id: totrans-2818
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个规则到SQL Server索引反射中，忽略了在未指定聚集索引的表上隐式存在的所谓“堆”索引。
- en: 'References: [#4059](https://www.sqlalchemy.org/trac/ticket/4059)'
  id: totrans-2819
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4059](https://www.sqlalchemy.org/trac/ticket/4059)
- en: oracle
  id: totrans-2820
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [performance] [bug] [py2k]**'
  id: totrans-2821
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [performance] [bug] [py2k]**'
- en: Fixed performance regression caused by the fix for [#3937](https://www.sqlalchemy.org/trac/ticket/3937)
    where cx_Oracle as of version 5.3 dropped the `.UNICODE` symbol from its namespace,
    which was interpreted as cx_Oracle’s “WITH_UNICODE” mode being turned on unconditionally,
    which invokes functions on the SQLAlchemy side which convert all strings to unicode
    unconditionally and causing a performance impact. In fact, per cx_Oracle’s author
    the “WITH_UNICODE” mode has been removed entirely as of 5.1, so the expensive
    unicode conversion functions are no longer necessary and are disabled if cx_Oracle
    5.1 or greater is detected under Python 2\. The warning against “WITH_UNICODE”
    mode that was removed under [#3937](https://www.sqlalchemy.org/trac/ticket/3937)
    is also restored.
  id: totrans-2822
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于修复[#3937](https://www.sqlalchemy.org/trac/ticket/3937)导致的性能回归已经修复，其中cx_Oracle自版本5.3起从其命名空间中删除了`.UNICODE`符号，这被解释为cx_Oracle的“WITH_UNICODE”模式被无条件地打开，从而在SQLAlchemy端调用函数将所有字符串无条件地转换为unicode并导致性能影响。实际上，根据cx_Oracle的作者，“WITH_UNICODE”模式自5.1起已被完全移除，因此昂贵的unicode转换函数不再必要，如果在Python
    2下检测到cx_Oracle 5.1或更高版本，则会被禁用。已恢复在[#3937](https://www.sqlalchemy.org/trac/ticket/3937)中删除的“WITH_UNICODE”模式警告。
- en: 'This change is also **backported** to: 1.1.13, 1.0.19'
  id: totrans-2823
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.1.13，1.0.19
- en: 'References: [#4035](https://www.sqlalchemy.org/trac/ticket/4035)'
  id: totrans-2824
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4035](https://www.sqlalchemy.org/trac/ticket/4035)
- en: '**[oracle] [bug]**'
  id: totrans-2825
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Partial support for persisting and retrieving the Oracle value “infinity” is
    implemented with cx_Oracle, using Python float values only, e.g. `float("inf")`.
    Decimal support is not yet fulfilled by the cx_Oracle DBAPI driver.
  id: totrans-2826
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用cx_Oracle实现对Oracle值“infinity”的部分支持，仅使用Python浮点值，例如`float("inf")`。cx_Oracle
    DBAPI驱动程序尚未实现十进制支持。
- en: 'References: [#4064](https://www.sqlalchemy.org/trac/ticket/4064)'
  id: totrans-2827
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4064](https://www.sqlalchemy.org/trac/ticket/4064)
- en: '**[oracle] [bug]**'
  id: totrans-2828
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: The cx_Oracle dialect has been reworked and modernized to take advantage of
    new patterns that weren’t present in the old 4.x series of cx_Oracle. This includes
    that the minimum cx_Oracle version is the 5.x series and that cx_Oracle 6.x is
    now fully tested. The most significant change involves type conversions, primarily
    regarding the numeric / floating point and LOB datatypes, making more effective
    use of cx_Oracle type handling hooks to simplify how bind parameter and result
    data is processed.
  id: totrans-2829
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: cx_Oracle方言已经重新设计和现代化，以利用旧的4.x系列cx_Oracle中不存在的新模式。其中包括最小的cx_Oracle版本是5.x系列，cx_Oracle
    6.x现在已经完全测试。最重要的变化涉及类型转换，主要是关于数字/浮点和LOB数据类型，更有效地利用cx_Oracle类型处理挂钩简化了绑定参数和结果数据的处理方式。
- en: See also
  id: totrans-2830
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[Major Refactor to cx_Oracle Dialect, Typing System](migration_12.html#change-cxoracle-12)'
  id: totrans-2831
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[cx_Oracle方言，类型系统的重大重构](migration_12.html#change-cxoracle-12)'
- en: '**[oracle] [bug]**'
  id: totrans-2832
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: two phase support for cx_Oracle has been completely removed for all versions
    of cx_Oracle, whereas in 1.2.0b1 this change only took effect for the 6.x series
    of cx_Oracle. This feature never worked correctly in any version of cx_Oracle
    and in cx_Oracle 6.x, the API which SQLAlchemy relied upon was removed.
  id: totrans-2833
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于所有版本的cx_Oracle，两阶段支持已完全移除，而在1.2.0b1中，此更改仅对cx_Oracle的6.x系列生效。这个功能在任何版本的cx_Oracle中都从未正确工作，在cx_Oracle
    6.x中，SQLAlchemy依赖的API已被移除。
- en: See also
  id: totrans-2834
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[Major Refactor to cx_Oracle Dialect, Typing System](migration_12.html#change-cxoracle-12)'
  id: totrans-2835
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[cx_Oracle方言，类型系统的重大重构](migration_12.html#change-cxoracle-12)'
- en: 'References: [#3997](https://www.sqlalchemy.org/trac/ticket/3997)'
  id: totrans-2836
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3997](https://www.sqlalchemy.org/trac/ticket/3997)
- en: '**[oracle] [bug]**'
  id: totrans-2837
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: The column keys present in a result set when using [`Insert.returning()`](../core/dml.html#sqlalchemy.sql.expression.Insert.returning
    "sqlalchemy.sql.expression.Insert.returning") with the cx_Oracle backend now use
    the correct column / label names like that of all other dialects. Previously,
    these came out as `ret_nnn`.
  id: totrans-2838
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用cx_Oracle后端的[`Insert.returning()`](../core/dml.html#sqlalchemy.sql.expression.Insert.returning
    "sqlalchemy.sql.expression.Insert.returning")时，结果集中的列键现在使用正确的列/标签名称，与所有其他方言一样。以前，这些列键会显示为`ret_nnn`。
- en: See also
  id: totrans-2839
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[Major Refactor to cx_Oracle Dialect, Typing System](migration_12.html#change-cxoracle-12)'
  id: totrans-2840
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[cx_Oracle方言，类型系统的重大重构](migration_12.html#change-cxoracle-12)'
- en: '**[oracle] [bug]**'
  id: totrans-2841
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: 'Several parameters to the cx_Oracle dialect are now deprecated and will have
    no effect: `auto_setinputsizes`, `exclude_setinputsizes`, `allow_twophase`.'
  id: totrans-2842
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: cx_Oracle方言的几个参数现在已被弃用且不再起作用：`auto_setinputsizes`，`exclude_setinputsizes`，`allow_twophase`。
- en: See also
  id: totrans-2843
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[Major Refactor to cx_Oracle Dialect, Typing System](migration_12.html#change-cxoracle-12)'
  id: totrans-2844
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[对cx_Oracle方言、类型系统的重大重构](migration_12.html#change-cxoracle-12)'
- en: '**[oracle] [bug]**'
  id: totrans-2845
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed bug where an index reflected under Oracle with an expression like “column
    DESC” would not be returned, if the table also had no primary key, as a result
    of logic that attempts to filter out the index implicitly added by Oracle onto
    the primary key columns.
  id: totrans-2846
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在Oracle下反映出一个类似“column DESC”的表达式的索引不会被返回的错误，如果表也没有主键，这是由于尝试过滤掉Oracle隐式添加到主键列上的索引的逻辑导致的。
- en: 'References: [#4042](https://www.sqlalchemy.org/trac/ticket/4042)'
  id: totrans-2847
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4042](https://www.sqlalchemy.org/trac/ticket/4042)
- en: '**[oracle] [bug]**'
  id: totrans-2848
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed more regressions caused by cx_Oracle 6.0; at the moment, the only behavioral
    change for users is disconnect detection now detects for cx_Oracle.DatabaseError
    in addition to cx_Oracle.InterfaceError, as this behavior seems to have changed.
    Other issues regarding numeric precision and uncloseable connections are pending
    with the upstream cx_Oracle issue tracker.
  id: totrans-2849
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由cx_Oracle 6.0引起的更多回归问题；目前，用户唯一的行为变化是断开检测现在除了cx_Oracle.InterfaceError外还检测cx_Oracle.DatabaseError，因为这种行为似乎已经改变。其他关于数字精度和无法关闭连接的问题仍在上游cx_Oracle问题跟踪器中挂起。
- en: 'References: [#4045](https://www.sqlalchemy.org/trac/ticket/4045)'
  id: totrans-2850
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4045](https://www.sqlalchemy.org/trac/ticket/4045)
- en: '**[oracle] [bug]**'
  id: totrans-2851
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed bug where Oracle 8 “non ansi” join mode would not add the `(+)` operator
    to expressions that used an operator other than the `=` operator. The `(+)` needs
    to be on all columns that are part of the right-hand side.
  id: totrans-2852
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Oracle 8“非ansi”连接模式不会向使用与`=`操作符不同的操作符的表达式添加`(+)`运算符的错误。`(+)`需要添加到右侧的所有列。
- en: 'References: [#4076](https://www.sqlalchemy.org/trac/ticket/4076)'
  id: totrans-2853
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4076](https://www.sqlalchemy.org/trac/ticket/4076)
- en: 1.2.0b2
  id: totrans-2854
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.2.0b2
- en: 'Released: July 24, 2017'
  id: totrans-2855
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2017年7月24日
- en: orm
  id: totrans-2856
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-2857
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression from 1.1.11 where adding additional non-entity columns to a
    query that includes an entity with subqueryload relationships would fail, due
    to an inspection added in 1.1.11 as a result of [#4011](https://www.sqlalchemy.org/trac/ticket/4011).
  id: totrans-2858
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了从1.1.11开始的回归，其中向包含具有子查询加载关系的实体的查询添加额外的非实体列会失败，这是由于1.1.11中添加的检查导致的，这是由于[#4011](https://www.sqlalchemy.org/trac/ticket/4011)。
- en: 'This change is also **backported** to: 1.1.12'
  id: totrans-2859
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：1.1.12
- en: 'References: [#4033](https://www.sqlalchemy.org/trac/ticket/4033)'
  id: totrans-2860
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4033](https://www.sqlalchemy.org/trac/ticket/4033)
- en: '**[orm] [bug]**'
  id: totrans-2861
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug involving JSON NULL evaluation logic added in 1.1 as part of [#3514](https://www.sqlalchemy.org/trac/ticket/3514)
    where the logic would not accommodate ORM mapped attributes named differently
    from the [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    that was mapped.
  id: totrans-2862
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在1.1中添加的涉及JSON NULL评估逻辑的错误，其中逻辑不会适应与[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")不同命名的ORM映射属性。
- en: 'This change is also **backported** to: 1.1.12'
  id: totrans-2863
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：1.1.12
- en: 'References: [#4031](https://www.sqlalchemy.org/trac/ticket/4031)'
  id: totrans-2864
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4031](https://www.sqlalchemy.org/trac/ticket/4031)
- en: '**[orm] [bug]**'
  id: totrans-2865
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Added `KeyError` checks to all methods within `WeakInstanceDict` where a check
    for `key in dict` is followed by indexed access to that key, to guard against
    a race against garbage collection that under load can remove the key from the
    dict after the code assumes its present, leading to very infrequent `KeyError`
    raises.
  id: totrans-2866
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在`WeakInstanceDict`中的所有方法中添加了`KeyError`检查，其中在检查`key in dict`后紧接着对该键进行索引访问，以防止在负载下垃圾收集导致的竞争中，代码假定键存在后，键从字典中被移除，导致非常罕见的`KeyError`引发。
- en: 'This change is also **backported** to: 1.1.12'
  id: totrans-2867
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：1.1.12
- en: 'References: [#4030](https://www.sqlalchemy.org/trac/ticket/4030)'
  id: totrans-2868
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4030](https://www.sqlalchemy.org/trac/ticket/4030)
- en: tests
  id: totrans-2869
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [bug] [py3k]**'
  id: totrans-2870
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[tests] [bug] [py3k]**'
- en: Fixed issue in testing fixtures which was incompatible with a change made as
    of Python 3.6.2 involving context managers.
  id: totrans-2871
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了与Python 3.6.2的更改不兼容的测试固定装置中的问题，涉及上下文管理器。
- en: 'This change is also **backported** to: 1.1.12, 1.0.18'
  id: totrans-2872
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：1.1.12, 1.0.18
- en: 'References: [#4034](https://www.sqlalchemy.org/trac/ticket/4034)'
  id: totrans-2873
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4034](https://www.sqlalchemy.org/trac/ticket/4034)
- en: orm
  id: totrans-2874
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-2875
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression from 1.1.11 where adding additional non-entity columns to a
    query that includes an entity with subqueryload relationships would fail, due
    to an inspection added in 1.1.11 as a result of [#4011](https://www.sqlalchemy.org/trac/ticket/4011).
  id: totrans-2876
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了从1.1.11开始的回归，其中向包含具有子查询加载关系的实体的查询添加额外的非实体列将失败，原因是1.1.11中添加的检查作为[#4011](https://www.sqlalchemy.org/trac/ticket/4011)的结果。
- en: 'This change is also **backported** to: 1.1.12'
  id: totrans-2877
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还**回溯**到：1.1.12
- en: 'References: [#4033](https://www.sqlalchemy.org/trac/ticket/4033)'
  id: totrans-2878
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4033](https://www.sqlalchemy.org/trac/ticket/4033)
- en: '**[orm] [bug]**'
  id: totrans-2879
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed bug involving JSON NULL evaluation logic added in 1.1 as part of [#3514](https://www.sqlalchemy.org/trac/ticket/3514)
    where the logic would not accommodate ORM mapped attributes named differently
    from the [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    that was mapped.
  id: totrans-2880
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在1.1中添加的涉及JSON NULL评估逻辑的错误，该逻辑不会适应与[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")不同命名的ORM映射属性的情况。
- en: 'This change is also **backported** to: 1.1.12'
  id: totrans-2881
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还**回溯**到：1.1.12
- en: 'References: [#4031](https://www.sqlalchemy.org/trac/ticket/4031)'
  id: totrans-2882
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4031](https://www.sqlalchemy.org/trac/ticket/4031)
- en: '**[orm] [bug]**'
  id: totrans-2883
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Added `KeyError` checks to all methods within `WeakInstanceDict` where a check
    for `key in dict` is followed by indexed access to that key, to guard against
    a race against garbage collection that under load can remove the key from the
    dict after the code assumes its present, leading to very infrequent `KeyError`
    raises.
  id: totrans-2884
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在`WeakInstanceDict`中的所有方法中添加了`KeyError`检查，其中检查`key in dict`后跟随对该键的索引访问，以防止在负载下垃圾收集导致的竞争中，代码假设其存在后，将键从字典中移除，导致非常罕见的`KeyError`引发。
- en: 'This change is also **backported** to: 1.1.12'
  id: totrans-2885
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还**回溯**到：1.1.12
- en: 'References: [#4030](https://www.sqlalchemy.org/trac/ticket/4030)'
  id: totrans-2886
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4030](https://www.sqlalchemy.org/trac/ticket/4030)
- en: tests
  id: totrans-2887
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [bug] [py3k]**'
  id: totrans-2888
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[测试] [错误] [py3k]**'
- en: Fixed issue in testing fixtures which was incompatible with a change made as
    of Python 3.6.2 involving context managers.
  id: totrans-2889
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了与Python 3.6.2的更改不兼容的测试固定装置中的问题，涉及上下文管理器的更改。
- en: 'This change is also **backported** to: 1.1.12, 1.0.18'
  id: totrans-2890
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还**回溯**到：1.1.12, 1.0.18
- en: 'References: [#4034](https://www.sqlalchemy.org/trac/ticket/4034)'
  id: totrans-2891
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4034](https://www.sqlalchemy.org/trac/ticket/4034)
- en: 1.2.0b1
  id: totrans-2892
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.2.0b1
- en: 'Released: July 10, 2017'
  id: totrans-2893
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2017年7月10日
- en: orm
  id: totrans-2894
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-2895
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: An [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")
    construct can now be passed to the `Query.select_entity_from()` method. Entities
    will be pulled from the selectable represented by the [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") construct. This allows special options for [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") such as [`aliased.adapt_on_names`](../orm/queryguide/api.html#sqlalchemy.orm.aliased.params.adapt_on_names
    "sqlalchemy.orm.aliased") to be used in conjunction with `Query.select_entity_from()`.
  id: totrans-2896
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")构造现在可以传递给`Query.select_entity_from()`方法。实体将从由[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased")构造表示的可选择项中提取。这允许与`Query.select_entity_from()`一起使用[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased")的特殊选项，例如[`aliased.adapt_on_names`](../orm/queryguide/api.html#sqlalchemy.orm.aliased.params.adapt_on_names
    "sqlalchemy.orm.aliased")。'
- en: 'This change is also **backported** to: 1.1.7'
  id: totrans-2897
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还**回溯**到：1.1.7
- en: 'References: [#3933](https://www.sqlalchemy.org/trac/ticket/3933)'
  id: totrans-2898
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3933](https://www.sqlalchemy.org/trac/ticket/3933)
- en: '**[orm] [feature]**'
  id: totrans-2899
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Added `.autocommit` attribute to [`scoped_session`](../orm/contextual.html#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session"), proxying the `.autocommit` attribute of the
    underling [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    currently assigned to the thread. Pull request courtesy Ben Fagin.
  id: totrans-2900
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向[`scoped_session`](../orm/contextual.html#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")添加了`.autocommit`属性，代理当前分配给线程的底层[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")的`.autocommit`属性。感谢Ben Fagin的拉取请求。
- en: '**[orm] [feature]**'
  id: totrans-2901
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Added a new feature [`with_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.with_expression
    "sqlalchemy.orm.with_expression") that allows an ad-hoc SQL expression to be added
    to a specific entity in a query at result time. This is an alternative to the
    SQL expression being delivered as a separate element in the result tuple.
  id: totrans-2902
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新特性[`with_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.with_expression
    "sqlalchemy.orm.with_expression")，允许在结果时间将一个临时SQL表达式添加到查询中的特定实体。这是SQL表达式作为结果元组中的一个单独元素传递的替代方法。
- en: See also
  id: totrans-2903
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[ORM attributes that can receive ad-hoc SQL expressions](migration_12.html#change-3058)'
  id: totrans-2904
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[ORM属性可以接收临时SQL表达式](migration_12.html#change-3058)'
- en: 'References: [#3058](https://www.sqlalchemy.org/trac/ticket/3058)'
  id: totrans-2905
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3058](https://www.sqlalchemy.org/trac/ticket/3058)
- en: '**[orm] [feature]**'
  id: totrans-2906
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added a new style of mapper-level inheritance loading “polymorphic selectin”.
    This style of loading emits queries for each subclass in an inheritance hierarchy
    subsequent to the load of the base object type, using IN to specify the desired
    primary key values.
  id: totrans-2907
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一种新的映射器级继承加载方式“多态selectin”。这种加载方式在加载基本对象类型后，为继承层次结构中的每个子类发出查询，使用IN来指定所需的主键值。
- en: See also
  id: totrans-2908
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[“selectin” polymorphic loading, loads subclasses using separate IN queries](migration_12.html#change-3948)'
  id: totrans-2909
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[“selectin”多态加载，使用单独的IN查询加载子类](migration_12.html#change-3948)'
- en: 'References: [#3948](https://www.sqlalchemy.org/trac/ticket/3948)'
  id: totrans-2910
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3948](https://www.sqlalchemy.org/trac/ticket/3948)
- en: '**[orm] [feature]**'
  id: totrans-2911
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added a new kind of eager loading called “selectin” loading. This style of loading
    is very similar to “subquery” eager loading, except that it uses an IN expression
    given a list of primary key values from the loaded parent objects, rather than
    re-stating the original query. This produces a more efficient query that is “baked”
    (e.g. the SQL string is cached) and also works in the context of [`Query.yield_per()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.yield_per
    "sqlalchemy.orm.Query.yield_per").
  id: totrans-2912
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一种新的急切加载方式称为“selectin”加载。这种加载方式与“subquery”急切加载非常相似，只是它使用了一个IN表达式，给出了加载的父对象的主键值列表，而不是重新陈述原始查询。这产生了一个更有效的查询，是“烘焙”（例如，SQL字符串被缓存），并且也适用于[`Query.yield_per()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.yield_per
    "sqlalchemy.orm.Query.yield_per")的上下文中。
- en: See also
  id: totrans-2913
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[New “selectin” eager loading, loads all collections at once using IN](migration_12.html#change-3944)'
  id: totrans-2914
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[新的“selectin”急切加载，使用IN一次加载所有集合](migration_12.html#change-3944)'
- en: 'References: [#3944](https://www.sqlalchemy.org/trac/ticket/3944)'
  id: totrans-2915
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3944](https://www.sqlalchemy.org/trac/ticket/3944)
- en: '**[orm] [feature]**'
  id: totrans-2916
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: The `lazy="select"` loader strategy now makes used of the [`BakedQuery`](../orm/extensions/baked.html#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery") query caching system in all cases. This removes
    most overhead of generating a [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object and running it into a [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") and then string SQL statement from the process
    of lazy-loading related collections and objects. The “baked” lazy loader has also
    been improved such that it can now cache in most cases where query load options
    are used.
  id: totrans-2917
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`lazy="select"`加载策略现在在所有情况下都使用[`BakedQuery`](../orm/extensions/baked.html#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery")查询缓存系统。这消除了生成[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象并将其运行到[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")和然后从懒加载相关集合和对象的过程中生成字符串SQL语句的大部分开销。 “烘焙”懒加载器也得到了改进，以便在大多数情况下可以缓存使用查询加载选项的情况。'
- en: See also
  id: totrans-2918
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[“Baked” loading now the default for lazy loads](migration_12.html#change-3954)'
  id: totrans-2919
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[“烘焙”加载现在是延迟加载的默认方式](migration_12.html#change-3954)'
- en: 'References: [#3954](https://www.sqlalchemy.org/trac/ticket/3954)'
  id: totrans-2920
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3954](https://www.sqlalchemy.org/trac/ticket/3954)
- en: '**[orm] [feature] [ext]**'
  id: totrans-2921
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature] [ext]**'
- en: The [`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update") method can now accommodate both hybrid attributes
    as well as composite attributes as a source of the key to be placed in the SET
    clause. For hybrids, an additional decorator [`hybrid_property.update_expression()`](../orm/extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_property.update_expression
    "sqlalchemy.ext.hybrid.hybrid_property.update_expression") is supplied for which
    the user supplies a tuple-returning function.
  id: totrans-2922
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update")方法现在可以容纳混合属性和复合属性作为放置在SET子句中的键的来源。对于混合属性，还提供了一个额外的装饰器[`hybrid_property.update_expression()`](../orm/extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_property.update_expression
    "sqlalchemy.ext.hybrid.hybrid_property.update_expression")，用户提供一个返回元组的函数。'
- en: See also
  id: totrans-2923
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Support for bulk updates of hybrids, composites](migration_12.html#change-3229)'
  id: totrans-2924
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[支持混合、复合的批量更新](migration_12.html#change-3229)'
- en: 'References: [#3229](https://www.sqlalchemy.org/trac/ticket/3229)'
  id: totrans-2925
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3229](https://www.sqlalchemy.org/trac/ticket/3229)
- en: '**[orm] [feature]**'
  id: totrans-2926
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new attribute event [`AttributeEvents.bulk_replace()`](../orm/events.html#sqlalchemy.orm.AttributeEvents.bulk_replace
    "sqlalchemy.orm.AttributeEvents.bulk_replace"). This event is triggered when a
    collection is assigned to a relationship, before the incoming collection is compared
    with the existing one. This early event allows for conversion of incoming non-ORM
    objects as well. The event is integrated with the `@validates` decorator.
  id: totrans-2927
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的属性事件[`AttributeEvents.bulk_replace()`](../orm/events.html#sqlalchemy.orm.AttributeEvents.bulk_replace
    "sqlalchemy.orm.AttributeEvents.bulk_replace")。当将集合分配给关系时触发此事件，在将传入集合与现有集合进行比较之前。这个早期事件还允许转换传入的非ORM对象。该事件与`@validates`装饰器集成。
- en: See also
  id: totrans-2928
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New bulk_replace event](migration_12.html#change-3896-event)'
  id: totrans-2929
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[新的bulk_replace事件](migration_12.html#change-3896-event)'
- en: 'References: [#3896](https://www.sqlalchemy.org/trac/ticket/3896)'
  id: totrans-2930
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3896](https://www.sqlalchemy.org/trac/ticket/3896)
- en: '**[orm] [feature]**'
  id: totrans-2931
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new event handler [`AttributeEvents.modified()`](../orm/events.html#sqlalchemy.orm.AttributeEvents.modified
    "sqlalchemy.orm.AttributeEvents.modified") which is triggered when the func:.attributes.flag_modified
    function is invoked, which is common when using the [`sqlalchemy.ext.mutable`](../orm/extensions/mutable.html#module-sqlalchemy.ext.mutable
    "sqlalchemy.ext.mutable") extension module.
  id: totrans-2932
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的事件处理程序[`AttributeEvents.modified()`](../orm/events.html#sqlalchemy.orm.AttributeEvents.modified
    "sqlalchemy.orm.AttributeEvents.modified")，当调用func:.attributes.flag_modified函数时触发，这在使用[`sqlalchemy.ext.mutable`](../orm/extensions/mutable.html#module-sqlalchemy.ext.mutable
    "sqlalchemy.ext.mutable")扩展模块时很常见。
- en: See also
  id: totrans-2933
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New “modified” event handler for sqlalchemy.ext.mutable](migration_12.html#change-3303)'
  id: totrans-2934
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[SQLAlchemy.ext.mutable中的新“修改”事件处理程序](migration_12.html#change-3303)'
- en: 'References: [#3303](https://www.sqlalchemy.org/trac/ticket/3303)'
  id: totrans-2935
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3303](https://www.sqlalchemy.org/trac/ticket/3303)
- en: '**[orm] [bug]**'
  id: totrans-2936
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue with subquery eagerloading which continues on from the series of
    issues fixed in [#2699](https://www.sqlalchemy.org/trac/ticket/2699), [#3106](https://www.sqlalchemy.org/trac/ticket/3106),
    [#3893](https://www.sqlalchemy.org/trac/ticket/3893) involving that the “subquery”
    contains the correct FROM clause when beginning from a joined inheritance subclass
    and then subquery eager loading onto a relationship from the base class, while
    the query also includes criteria against the subclass. The fix in the previous
    tickets did not accommodate for additional subqueryload operations loading more
    deeply from the first level, so the fix has been further generalized.
  id: totrans-2937
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了子查询急加载的问题，这个问题延续自[#2699](https://www.sqlalchemy.org/trac/ticket/2699)、[#3106](https://www.sqlalchemy.org/trac/ticket/3106)、[#3893](https://www.sqlalchemy.org/trac/ticket/3893)中修复的一系列问题，涉及到“子查询”在从连接的继承子类开始，然后对基类的关系进行子查询急加载时，包含正确的FROM子句，同时查询还包括对子类的条件。之前票证中的修复没有考虑到从第一级更深层次加载更多的subqueryload操作，因此修复进一步泛化。
- en: 'This change is also **backported** to: 1.1.11'
  id: totrans-2938
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.1.11
- en: 'References: [#4011](https://www.sqlalchemy.org/trac/ticket/4011)'
  id: totrans-2939
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4011](https://www.sqlalchemy.org/trac/ticket/4011)
- en: '**[orm] [bug]**'
  id: totrans-2940
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where a cascade such as “delete-orphan” (but others as well) would
    fail to locate an object linked to a relationship that itself is local to a subclass
    in an inheritance relationship, thus causing the operation to not take place.
  id: totrans-2941
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了级联操作（如“delete-orphan”等）无法定位与继承关系中本地关系相连的对象的bug，从而导致操作无法执行。
- en: 'This change is also **backported** to: 1.1.10'
  id: totrans-2942
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.1.10
- en: 'References: [#3986](https://www.sqlalchemy.org/trac/ticket/3986)'
  id: totrans-2943
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3986](https://www.sqlalchemy.org/trac/ticket/3986)
- en: '**[orm] [bug]**'
  id: totrans-2944
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a race condition which could occur under threaded environments as a result
    of the caching added via [#3915](https://www.sqlalchemy.org/trac/ticket/3915).
    An internal collection of `Column` objects could be regenerated on an alias object
    inappropriately, confusing a joined eager loader when it attempts to render SQL
    and collect results and resulting in an attribute error. The collection is now
    generated up front before the alias object is cached and shared among threads.
  id: totrans-2945
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个在多线程环境下可能发生的竞争条件，这是由于通过[#3915](https://www.sqlalchemy.org/trac/ticket/3915)添加的缓存引起的。一个`Column`对象的内部集合可能会在别名对象上不恰当地重新生成，当尝试渲染SQL并收集结果时，会混淆一个连接的急切加载器，导致属性错误。现在，在别名对象被缓存和在线程之间共享之前，集合会提前生成。
- en: 'This change is also **backported** to: 1.1.7'
  id: totrans-2946
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.1.7
- en: 'References: [#3947](https://www.sqlalchemy.org/trac/ticket/3947)'
  id: totrans-2947
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3947](https://www.sqlalchemy.org/trac/ticket/3947)
- en: '**[orm] [bug]**'
  id: totrans-2948
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: An UPDATE emitted as a result of the [`relationship.post_update`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.post_update
    "sqlalchemy.orm.relationship") feature will now integrate with the versioning
    feature to both bump the version id of the row as well as assert that the existing
    version number was matched.
  id: totrans-2949
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于[`relationship.post_update`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.post_update
    "sqlalchemy.orm.relationship")功能发出的UPDATE现在将与版本控制功能集成，以增加行的版本id并断言现有版本号是否匹配。
- en: See also
  id: totrans-2950
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[post_update integrates with ORM versioning](migration_12.html#change-3496)'
  id: totrans-2951
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[post_update与ORM版本控制集成](migration_12.html#change-3496)'
- en: 'References: [#3496](https://www.sqlalchemy.org/trac/ticket/3496)'
  id: totrans-2952
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3496](https://www.sqlalchemy.org/trac/ticket/3496)
- en: '**[orm] [bug]**'
  id: totrans-2953
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Repaired several use cases involving the [`relationship.post_update`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.post_update
    "sqlalchemy.orm.relationship") feature when used in conjunction with a column
    that has an “onupdate” value. When the UPDATE emits, the corresponding object
    attribute is now expired or refreshed so that the newly generated “onupdate” value
    can populate on the object; previously the stale value would remain. Additionally,
    if the target attribute is set in Python for the INSERT of the object, the value
    is now re-sent during the UPDATE so that the “onupdate” does not overwrite it
    (note this works just as well for server-generated onupdates). Finally, the `SessionEvents.refresh_flush()`
    event is now emitted for these attributes when refreshed within the flush.
  id: totrans-2954
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了几个使用[`relationship.post_update`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.post_update
    "sqlalchemy.orm.relationship")功能的用例，当与具有“onupdate”值的列一起使用时。当UPDATE发出时，相应的对象属性现在会过期或刷新，以便新生成的“onupdate”值可以填充到对象中；以前的过时值将保留。此外，如果目标属性在Python中设置为对象的INSERT，那么在UPDATE期间该值现在将被重新发送，以便“onupdate”不会覆盖它（请注意，这对于服务器生成的onupdates同样有效）。最后，在刷新时，当在flush中刷新这些属性时，现在会发出`SessionEvents.refresh_flush()`事件。
- en: See also
  id: totrans-2955
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Refinements to post_update in conjunction with onupdate](migration_12.html#change-3471)'
  id: totrans-2956
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[与onupdate一起的post_update的改进](migration_12.html#change-3471)'
- en: 'References: [#3471](https://www.sqlalchemy.org/trac/ticket/3471), [#3472](https://www.sqlalchemy.org/trac/ticket/3472)'
  id: totrans-2957
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3471](https://www.sqlalchemy.org/trac/ticket/3471), [#3472](https://www.sqlalchemy.org/trac/ticket/3472)
- en: '**[orm] [bug]**'
  id: totrans-2958
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where programmatic version_id counter in conjunction with joined table
    inheritance would fail if the version_id counter were not actually incremented
    and no other values on the base table were modified, as the UPDATE would have
    an empty SET clause. Since programmatic version_id where version counter is not
    incremented is a documented use case, this specific condition is now detected
    and the UPDATE now sets the version_id value to itself, so that concurrency checks
    still take place.
  id: totrans-2959
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即在程序化版本_id计数器与连接表继承结合使用时，如果版本_id计数器实际上没有增加，并且基表上没有修改其他值，那么UPDATE将具有一个空的SET子句，会失败。由于程序化版本_id在版本计数器未增加的情况下是一个已记录的用例，现在会检测到这种特定情况，并且UPDATE现在将版本_id值设置为自身，以便并发检查仍然进行。
- en: 'References: [#3996](https://www.sqlalchemy.org/trac/ticket/3996)'
  id: totrans-2960
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3996](https://www.sqlalchemy.org/trac/ticket/3996)
- en: '**[orm] [bug]**'
  id: totrans-2961
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The versioning feature does not support NULL for the version counter. An exception
    is now raised if the version id is programmatic and was set to NULL for an UPDATE.
    Pull request courtesy Diana Clarke.
  id: totrans-2962
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本控制功能不支持版本计数器的 NULL 值。如果版本 id 是程序化的，并且在 UPDATE 时设置为 NULL，则现在会引发异常。感谢 Diana
    Clarke 提交的拉取请求。
- en: 'References: [#3673](https://www.sqlalchemy.org/trac/ticket/3673)'
  id: totrans-2963
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#3673](https://www.sqlalchemy.org/trac/ticket/3673)
- en: '**[orm] [bug]**'
  id: totrans-2964
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Removed a very old keyword argument from [`scoped_session`](../orm/contextual.html#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session") called `scope`. This keyword was never documented
    and was an early attempt at allowing for variable scopes.
  id: totrans-2965
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从 [`scoped_session`](../orm/contextual.html#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    中移除了一个非常古老的关键字参数 `scope`。这个关键字从未被文档化，并且是早期尝试允许变量作用域的一部分。
- en: See also
  id: totrans-2966
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[“scope” keyword removed from scoped_session](migration_12.html#change-3796)'
  id: totrans-2967
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[从 scoped_session 中移除了“scope”关键字](migration_12.html#change-3796)'
- en: 'References: [#3796](https://www.sqlalchemy.org/trac/ticket/3796)'
  id: totrans-2968
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#3796](https://www.sqlalchemy.org/trac/ticket/3796)
- en: '**[orm] [bug]**'
  id: totrans-2969
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where combining a “with_polymorphic” load in conjunction with subclass-linked
    relationships that specify joinedload with innerjoin=True, would fail to demote
    those “innerjoins” to “outerjoins” to suit the other polymorphic classes that
    don’t support that relationship. This applies to both a single and a joined inheritance
    polymorphic load.
  id: totrans-2970
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，在其中结合“with_polymorphic”加载与指定了 innerjoin=True 的子类链接关系的 joinedload 结合使用时，会导致无法将这些“innerjoins”降级为“outerjoins”，以适应不支持该关系的其他多态类。这适用于单个继承和联合继承多态加载。
- en: 'References: [#3988](https://www.sqlalchemy.org/trac/ticket/3988)'
  id: totrans-2971
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#3988](https://www.sqlalchemy.org/trac/ticket/3988)
- en: '**[orm] [bug]**'
  id: totrans-2972
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Added new argument `with_for_update` to the [`Session.refresh()`](../orm/session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") method. When the `Query.with_lockmode()` method
    were deprecated in favor of [`Query.with_for_update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.with_for_update
    "sqlalchemy.orm.Query.with_for_update"), the [`Session.refresh()`](../orm/session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") method was never updated to reflect the new
    option.
  id: totrans-2973
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 [`Session.refresh()`](../orm/session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") 方法添加了新参数 `with_for_update`。当 `Query.with_lockmode()`
    方法被弃用，改用 [`Query.with_for_update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.with_for_update
    "sqlalchemy.orm.Query.with_for_update") 时，[`Session.refresh()`](../orm/session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") 方法从未被更新以反映新选项。
- en: See also
  id: totrans-2974
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Added “for update” arguments to Session.refresh](migration_12.html#change-3991)'
  id: totrans-2975
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[向 Session.refresh 添加了“for update”参数](migration_12.html#change-3991)'
- en: 'References: [#3991](https://www.sqlalchemy.org/trac/ticket/3991)'
  id: totrans-2976
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#3991](https://www.sqlalchemy.org/trac/ticket/3991)
- en: '**[orm] [bug]**'
  id: totrans-2977
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where a [`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property") that is also marked as “deferred” would be marked
    as “expired” during a flush, causing it to be loaded along with the unexpiry of
    regular attributes even though this attribute was never accessed.
  id: totrans-2978
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，在其中将 [`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property") 标记为“deferred”后，在 flush 期间会将其标记为“expired”，导致它与常规属性的未过期加载一起被加载，即使从未访问过该属性也是如此。
- en: 'References: [#3984](https://www.sqlalchemy.org/trac/ticket/3984)'
  id: totrans-2979
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#3984](https://www.sqlalchemy.org/trac/ticket/3984)
- en: '**[orm] [bug]**'
  id: totrans-2980
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in subquery eager loading where the “join_depth” parameter for self-referential
    relationships would not be correctly honored, loading all available levels deep
    rather than correctly counting the specified number of levels for eager loading.
  id: totrans-2981
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了子查询提前加载中的错误，其中自引用关系的“join_depth”参数不会被正确地识别，而是加载所有可用的深度，而不是正确地计算提前加载的指定级别数。
- en: 'References: [#3967](https://www.sqlalchemy.org/trac/ticket/3967)'
  id: totrans-2982
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#3967](https://www.sqlalchemy.org/trac/ticket/3967)
- en: '**[orm] [bug]**'
  id: totrans-2983
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Added warnings to the LRU “compiled cache” used by the [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") (and ultimately will be for other ORM-based LRU caches)
    such that when the cache starts hitting its size limits, the application will
    emit a warning that this is a performance-degrading situation that may require
    attention. The LRU caches can reach their size limits primarily if an application
    is making use of an unbounded number of [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") objects, which is an antipattern. Otherwise, this
    may suggest an issue that should be brought to the SQLAlchemy developer’s attention.
  id: totrans-2984
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")（最终也将用于其他基于
    ORM 的 LRU 缓存）的 LRU “编译缓存”添加了警告，以便当缓存开始达到其大小限制时，应用程序会发出警告，指出这是一个可能需要关注的性能下降情况。LRU
    缓存主要会达到其大小限制，如果应用程序使用了无限数量的 [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 对象，这是一个反模式。否则，这可能表明存在一个应该引起 SQLAlchemy 开发人员注意的问题。
- en: '**[orm] [bug]**'
  id: totrans-2985
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug to improve upon the specificity of loader options that take effect
    subsequent to the lazy load of a related entity, so that the loader options will
    match to an aliased or non-aliased entity more specifically if those options include
    entity information.
  id: totrans-2986
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，以改进在延迟加载相关实体后生效的加载器选项的特异性，以便如果这些选项包括实体信息，则加载器选项将更具体地匹配到别名或非别名实体。
- en: 'References: [#3963](https://www.sqlalchemy.org/trac/ticket/3963)'
  id: totrans-2987
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3963](https://www.sqlalchemy.org/trac/ticket/3963)
- en: '**[orm] [bug]**'
  id: totrans-2988
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The [`flag_modified()`](../orm/session_api.html#sqlalchemy.orm.attributes.flag_modified
    "sqlalchemy.orm.attributes.flag_modified") function now raises [`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError") if the named attribute key is not present
    within the object, as this is assumed to be present in the flush process. To mark
    an object “dirty” for a flush without referring to any specific attribute, the
    [`flag_dirty()`](../orm/session_api.html#sqlalchemy.orm.attributes.flag_dirty
    "sqlalchemy.orm.attributes.flag_dirty") function may be used.
  id: totrans-2989
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`flag_modified()`](../orm/session_api.html#sqlalchemy.orm.attributes.flag_modified
    "sqlalchemy.orm.attributes.flag_modified") 函数现在会在对象中未找到指定属性键时引发 [`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError")，因为这在刷新过程中被假定为存在。要在不涉及任何特定属性的情况下标记对象为“脏”以进行刷新，可以使用
    [`flag_dirty()`](../orm/session_api.html#sqlalchemy.orm.attributes.flag_dirty
    "sqlalchemy.orm.attributes.flag_dirty") 函数。'
- en: See also
  id: totrans-2990
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Use flag_dirty() to mark an object as “dirty” without any attribute changing](migration_12.html#change-3753)'
  id: totrans-2991
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[使用 flag_dirty() 将对象标记为“脏”，而不更改任何属性](migration_12.html#change-3753)'
- en: 'References: [#3753](https://www.sqlalchemy.org/trac/ticket/3753)'
  id: totrans-2992
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3753](https://www.sqlalchemy.org/trac/ticket/3753)
- en: '**[orm] [bug]**'
  id: totrans-2993
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The “evaluate” strategy used by [`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update") and [`Query.delete()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.delete
    "sqlalchemy.orm.Query.delete") can now accommodate a simple object comparison
    from a many-to-one relationship to an instance, when the attribute names of the
    primary key / foreign key columns don’t match the actual names of the columns.
    Previously this would do a simple name-based match and fail with an AttributeError.
  id: totrans-2994
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update") 和 [`Query.delete()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.delete
    "sqlalchemy.orm.Query.delete") 使用的“evaluate”策略现在可以在主键/外键列的属性名称与实际列名称不匹配时，从多对一关系到实例进行简单对象比较。以前，这将进行简单的基于名称的匹配，并在
    AttributeError 失败。'
- en: 'References: [#3366](https://www.sqlalchemy.org/trac/ticket/3366)'
  id: totrans-2995
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3366](https://www.sqlalchemy.org/trac/ticket/3366)
- en: '**[orm] [bug]**'
  id: totrans-2996
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The `@validates` decorator now allows the decorated method to receive objects
    from a “bulk collection set” operation that have not yet been compared to the
    existing collection. This allows incoming values to be converted to compatible
    ORM objects as is already allowed from an “append” event. Note that this means
    that the `@validates` method is called for **all** values during a collection
    assignment, rather than just the ones that are new.
  id: totrans-2997
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`@validates` 装饰器现在允许装饰的方法接收尚未与现有集合进行比较的“批量集合设置”操作中的对象。这允许传入值转换为兼容的 ORM 对象，就像从“追加”事件中已经允许的那样。请注意，这意味着
    `@validates` 方法在集合分配期间对**所有**值进行调用，而不仅仅是新值。'
- en: See also
  id: totrans-2998
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[A @validates method receives all values on bulk-collection set before comparison](migration_12.html#change-3896-validates)'
  id: totrans-2999
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[在比较之前，@validates方法在批量集合设置时接收所有值](migration_12.html#change-3896-validates)'
- en: 'References: [#3896](https://www.sqlalchemy.org/trac/ticket/3896)'
  id: totrans-3000
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3896](https://www.sqlalchemy.org/trac/ticket/3896)
- en: '**[orm] [bug]**'
  id: totrans-3001
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in single-table inheritance where the select_from() argument would
    not be taken into account when limiting rows to a subclass. Previously, only expressions
    in the columns requested would be taken into account.
  id: totrans-3002
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了单表继承中的bug，当将行限制为子类时，select_from()参数不会被考虑。以前，只有请求的列中的表达式会被考虑。
- en: See also
  id: totrans-3003
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Fixed issue involving single-table inheritance with select_from()](migration_12.html#change-3891)'
  id: totrans-3004
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[修复了与select_from()一起使用的单表继承的问题](migration_12.html#change-3891)'
- en: 'References: [#3891](https://www.sqlalchemy.org/trac/ticket/3891)'
  id: totrans-3005
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3891](https://www.sqlalchemy.org/trac/ticket/3891)
- en: '**[orm] [bug]**'
  id: totrans-3006
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: When assigning a collection to an attribute mapped by a relationship, the previous
    collection is no longer mutated. Previously, the old collection would be emptied
    out in conjunction with the “item remove” events that fire off; the events now
    fire off without affecting the old collection.
  id: totrans-3007
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当将集合分配给由关系映射的属性时，先前的集合不再被改变。以前，旧集合会在“项移除”事件触发时被清空；现在事件会触发而不影响旧集合。
- en: See also
  id: totrans-3008
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Previous collection is no longer mutated upon replacement](migration_12.html#change-3913)'
  id: totrans-3009
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[替换时不再改变先前的集合](migration_12.html#change-3913)'
- en: 'References: [#3913](https://www.sqlalchemy.org/trac/ticket/3913)'
  id: totrans-3010
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3913](https://www.sqlalchemy.org/trac/ticket/3913)
- en: '**[orm] [bug]**'
  id: totrans-3011
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The state of the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is now present when the [`SessionEvents.after_rollback()`](../orm/events.html#sqlalchemy.orm.SessionEvents.after_rollback
    "sqlalchemy.orm.SessionEvents.after_rollback") event is emitted, that is, the
    attribute state of objects prior to their being expired. This is now consistent
    with the behavior of the [`SessionEvents.after_commit()`](../orm/events.html#sqlalchemy.orm.SessionEvents.after_commit
    "sqlalchemy.orm.SessionEvents.after_commit") event which also emits before the
    attribute state of objects is expired.
  id: totrans-3012
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当[`SessionEvents.after_rollback()`](../orm/events.html#sqlalchemy.orm.SessionEvents.after_rollback
    "sqlalchemy.orm.SessionEvents.after_rollback")事件被触发时，[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")的状态现在是存在的，即对象在过期之前的属性状态。这与[`SessionEvents.after_commit()`](../orm/events.html#sqlalchemy.orm.SessionEvents.after_commit
    "sqlalchemy.orm.SessionEvents.after_commit")事件的行为一致，该事件在对象的属性状态过期之前也会被触发。
- en: See also
  id: totrans-3013
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[The after_rollback() Session event now emits before the expiration of objects](migration_12.html#change-3934)'
  id: totrans-3014
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[在对象过期之前，after_rollback() Session事件现在会被触发](migration_12.html#change-3934)'
- en: 'References: [#3934](https://www.sqlalchemy.org/trac/ticket/3934)'
  id: totrans-3015
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3934](https://www.sqlalchemy.org/trac/ticket/3934)
- en: '**[orm] [bug]**'
  id: totrans-3016
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where [`Query.with_parent()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.with_parent
    "sqlalchemy.orm.Query.with_parent") would not work if the [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") were against an [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") construct rather than a regular mapped class. Also adds
    a new parameter `with_parent.from_entity` to the standalone `with_parent()` function
    as well as [`Query.with_parent()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.with_parent
    "sqlalchemy.orm.Query.with_parent").
  id: totrans-3017
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，[`Query.with_parent()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.with_parent
    "sqlalchemy.orm.Query.with_parent")在针对[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased")构造而不是常规映射类时无法工作。还为独立的`with_parent()`函数以及[`Query.with_parent()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.with_parent
    "sqlalchemy.orm.Query.with_parent")添加了一个新参数`with_parent.from_entity`。
- en: 'References: [#3607](https://www.sqlalchemy.org/trac/ticket/3607)'
  id: totrans-3018
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3607](https://www.sqlalchemy.org/trac/ticket/3607)
- en: orm declarative
  id: totrans-3019
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm声明
- en: '**[orm] [declarative] [bug]**'
  id: totrans-3020
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Fixed bug where using [`declared_attr`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr") on an [`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase") where a particular return value
    were some non-mapped symbol, including `None`, would cause the attribute to hard-evaluate
    just once and store the value to the object dictionary, not allowing it to invoke
    for subclasses. This behavior is normal when [`declared_attr`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr") is on a mapped class, and does not occur on a
    mixin or abstract class. Since [`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase") is both “abstract” and actually
    “mapped”, a special exception case is made here so that the “abstract” behavior
    takes precedence for [`declared_attr`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr").
  id: totrans-3021
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在[`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase")上使用[`declared_attr`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr")时的错误，其中特定返回值为一些非映射符号，包括`None`，会导致属性只被强制评估一次并将值存储到对象字典中，不允许其为子类调用。当[`declared_attr`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr")在映射类上时，这种行为是正常的，并且不会发生在混入类或抽象类上。由于[`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase")既是“抽象”的又实际上是“映射”的，因此在这里特殊的例外情况是“抽象”行为优先于[`declared_attr`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr")。
- en: 'References: [#3848](https://www.sqlalchemy.org/trac/ticket/3848)'
  id: totrans-3022
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3848](https://www.sqlalchemy.org/trac/ticket/3848)
- en: engine
  id: totrans-3023
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [feature]**'
  id: totrans-3024
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [功能]**'
- en: Added native “pessimistic disconnection” handling to the [`Pool`](../core/pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") object. The new parameter [`Pool.pre_ping`](../core/pooling.html#sqlalchemy.pool.Pool.params.pre_ping
    "sqlalchemy.pool.Pool"), available from the engine as [`create_engine.pool_pre_ping`](../core/engines.html#sqlalchemy.create_engine.params.pool_pre_ping
    "sqlalchemy.create_engine"), applies an efficient form of the “pre-ping” recipe
    featured in the pooling documentation, which upon each connection check out, emits
    a simple statement, typically “SELECT 1”, to test the connection for liveness.
    If the existing connection is no longer able to respond to commands, the connection
    is transparently recycled, and all other connections made prior to the current
    timestamp are invalidated.
  id: totrans-3025
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向[`Pool`](../core/pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")对象添加了本机“悲观断开”处理。新参数[`Pool.pre_ping`](../core/pooling.html#sqlalchemy.pool.Pool.params.pre_ping
    "sqlalchemy.pool.Pool")，可从引擎中作为[`create_engine.pool_pre_ping`](../core/engines.html#sqlalchemy.create_engine.params.pool_pre_ping
    "sqlalchemy.create_engine")获得，应用了池文档中特色的“预先ping”配方的高效形式，每次连接检出时，发出一个简单的语句，通常是“SELECT
    1”，以测试连接的活动性。如果现有连接不再能响应命令，则连接将被透明地回收，并且在当前时间戳之前进行的所有其他连接将被作废。
- en: See also
  id: totrans-3026
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Disconnect Handling - Pessimistic](../core/pooling.html#pool-disconnects-pessimistic)'
  id: totrans-3027
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[断开处理 - 悲观](../core/pooling.html#pool-disconnects-pessimistic)'
- en: '[Pessimistic disconnection detection added to the connection pool](migration_12.html#change-3919)'
  id: totrans-3028
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[连接池中添加了悲观断开检测](migration_12.html#change-3919)'
- en: 'References: [#3919](https://www.sqlalchemy.org/trac/ticket/3919)'
  id: totrans-3029
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3919](https://www.sqlalchemy.org/trac/ticket/3919)
- en: '**[engine] [bug]**'
  id: totrans-3030
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误]**'
- en: Added an exception handler that will warn for the “cause” exception on Py2K
    when the “autorollback” feature of [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") itself raises an exception. In Py3K, the two exceptions
    are naturally reported by the interpreter as one occurring during the handling
    of the other. This is continuing with the series of changes for rollback failure
    handling that were last visited as part of [#2696](https://www.sqlalchemy.org/trac/ticket/2696)
    in 1.0.12.
  id: totrans-3031
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个异常处理程序，当[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")的“autorollback”功能本身引发异常时，将会警告“cause”异常在Py2K上。在Py3K中，这两个异常自然地由解释器报告为一个发生在处理另一个异常时。这是继续处理回滚失��处理的一系列更改的一部分，上次在1.0.12中作为[#2696](https://www.sqlalchemy.org/trac/ticket/2696)的一部分访问的。
- en: 'This change is also **backported** to: 1.1.7'
  id: totrans-3032
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.1.7
- en: 'References: [#3946](https://www.sqlalchemy.org/trac/ticket/3946)'
  id: totrans-3033
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3946](https://www.sqlalchemy.org/trac/ticket/3946)
- en: '**[engine] [bug]**'
  id: totrans-3034
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误]**'
- en: Fixed bug where in the unusual case of passing a [`Compiled`](../core/internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object directly to [`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute"), the dialect with which the [`Compiled`](../core/internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object were generated was not consulted for the
    paramstyle of the string statement, instead assuming it would match the dialect-level
    paramstyle, causing mismatches to occur.
  id: totrans-3035
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，在罕见情况下直接将[`Compiled`](../core/internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled")对象传递给[`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")时，生成[`Compiled`](../core/internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled")对象的方言未被咨询以获取字符串语句的paramstyle，而是假定它将匹配方言级别的paramstyle，导致不匹配发生。
- en: 'References: [#3938](https://www.sqlalchemy.org/trac/ticket/3938)'
  id: totrans-3036
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3938](https://www.sqlalchemy.org/trac/ticket/3938)
- en: sql
  id: totrans-3037
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-3038
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added a new kind of [`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") called “expanding”. This is for use in
    `IN` expressions where the list of elements is rendered into individual bound
    parameters at statement execution time, rather than at statement compilation time.
    This allows both a single bound parameter name to be linked to an IN expression
    of multiple elements, as well as allows query caching to be used with IN expressions.
    The new feature allows the related features of “select in” loading and “polymorphic
    in” loading to make use of the baked query extension to reduce call overhead.
    This feature should be considered to be **experimental** for 1.2.
  id: totrans-3039
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了一种名为“expanding”的新类型的[`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")。这用于在`IN`表达式中，元素列表在语句执行时被渲染为单独的绑定参数，而不是在语句编译时。这允许将单个绑定参数名称链接到多个元素的IN表达式，同时允许使用查询缓存与IN表达式。这一新功能允许“select
    in”加载和“polymorphic in”加载使用烘焙查询扩展以减少调用开销。这一功能应被视为**实验性**的1.2版本。
- en: See also
  id: totrans-3040
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Late-expanded IN parameter sets allow IN expressions with cached statements](migration_12.html#change-3953)'
  id: totrans-3041
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[延迟扩展的IN参数集允许具有缓存语句的IN表达式](migration_12.html#change-3953)'
- en: 'References: [#3953](https://www.sqlalchemy.org/trac/ticket/3953)'
  id: totrans-3042
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3953](https://www.sqlalchemy.org/trac/ticket/3953)
- en: '**[sql] [feature] [mysql] [oracle] [postgresql]**'
  id: totrans-3043
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature] [mysql] [oracle] [postgresql]**'
- en: Added support for SQL comments on [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") and [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects, via the new [`Table.comment`](../core/metadata.html#sqlalchemy.schema.Table.params.comment
    "sqlalchemy.schema.Table") and [`Column.comment`](../core/metadata.html#sqlalchemy.schema.Column.params.comment
    "sqlalchemy.schema.Column") arguments. The comments are included as part of DDL
    on table creation, either inline or via an appropriate ALTER statement, and are
    also reflected back within table reflection, as well as via the [`Inspector`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector"). Supported backends currently include
    MySQL, PostgreSQL, and Oracle. Many thanks to Frazer McLean for a large amount
    of effort on this.
  id: totrans-3044
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")和[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象上的SQL注释的支持，通过新的[`Table.comment`](../core/metadata.html#sqlalchemy.schema.Table.params.comment
    "sqlalchemy.schema.Table")和[`Column.comment`](../core/metadata.html#sqlalchemy.schema.Column.params.comment
    "sqlalchemy.schema.Column")参数。这些注释作为DDL的一部分包含在表创建中，可以内联或通过适当的ALTER语句反映回来，并且也通过表反射以及通过[`Inspector`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector")反映回来。目前支持的后端包括MySQL、PostgreSQL和Oracle。非常感谢Frazer
    McLean在这方面的大量努力。
- en: See also
  id: totrans-3045
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Support for SQL Comments on Table, Column, includes DDL, reflection](migration_12.html#change-1546)'
  id: totrans-3046
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[支持在Table、Column上的SQL注释，包括DDL、反射](migration_12.html#change-1546)'
- en: 'References: [#1546](https://www.sqlalchemy.org/trac/ticket/1546)'
  id: totrans-3047
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1546](https://www.sqlalchemy.org/trac/ticket/1546)
- en: '**[sql] [feature]**'
  id: totrans-3048
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: The longstanding behavior of the [`ColumnOperators.in_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") and [`ColumnOperators.notin_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notin_
    "sqlalchemy.sql.expression.ColumnOperators.notin_") operators emitting a warning
    when the right-hand condition is an empty sequence has been revised; a simple
    “static” expression of “1 != 1” or “1 = 1” is now rendered by default, rather
    than pulling in the original left-hand expression. This causes the result for
    a NULL column comparison against an empty set to change from NULL to true/false.
    The behavior is configurable, and the old behavior can be enabled using the [`create_engine.empty_in_strategy`](../core/engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine") parameter to [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine").
  id: totrans-3049
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.in_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")和[`ColumnOperators.notin_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notin_
    "sqlalchemy.sql.expression.ColumnOperators.notin_")操作符的长期行为已经修订，当右侧条件为空序列时，会发出警告；现在，默认情况下会呈现一个简单的“静态”表达式“1
    != 1”或“1 = 1”，而不是引入原始的左侧表达式。这导致对空集合进行NULL列比较的结果从NULL更改为true/false。该行为是可配置的，并且可以使用[`create_engine.empty_in_strategy`](../core/engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine")参数来启用[`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")中的旧行为。'
- en: See also
  id: totrans-3050
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[The IN / NOT IN operator’s empty collection behavior is now configurable;
    default expression simplified](migration_12.html#change-3907)'
  id: totrans-3051
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[IN / NOT IN操作符的空集合行为现在是可配置的；默认表达式已简化](migration_12.html#change-3907)'
- en: 'References: [#3907](https://www.sqlalchemy.org/trac/ticket/3907)'
  id: totrans-3052
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3907](https://www.sqlalchemy.org/trac/ticket/3907)
- en: '**[sql] [feature]**'
  id: totrans-3053
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added a new option `autoescape` to the “startswith” and “endswith” classes of
    comparators; this supplies an escape character also applies it to all occurrences
    of the wildcard characters “%” and “_” automatically. Pull request courtesy Diana
    Clarke.
  id: totrans-3054
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为“startswith”和“endswith”比较器类添加了一个新选项`autoescape`；这将提供一个转义���符，并自动将其应用于所有通配符字符“%”和“_”。感谢戴安娜·克拉克提供的拉取请求。
- en: Note
  id: totrans-3055
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: This feature has been changed as of 1.2.0 from its initial implementation in
    1.2.0b2 such that autoescape is now passed as a boolean value, rather than a specific
    character to use as the escape character.
  id: totrans-3056
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该功能已于1.2.0中更改，从其在1.2.0b2中的初始实现中，现在autoescape作为布尔值传递，而不是作为转义字符使用。
- en: See also
  id: totrans-3057
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New “autoescape” option for startswith(), endswith()](migration_12.html#change-2694)'
  id: totrans-3058
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[新的“autoescape”选项用于startswith()，endswith()](migration_12.html#change-2694)'
- en: 'References: [#2694](https://www.sqlalchemy.org/trac/ticket/2694)'
  id: totrans-3059
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2694](https://www.sqlalchemy.org/trac/ticket/2694)
- en: '**[sql] [bug]**'
  id: totrans-3060
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed AttributeError which would occur in [`WithinGroup`](../core/sqlelement.html#sqlalchemy.sql.expression.WithinGroup
    "sqlalchemy.sql.expression.WithinGroup") construct during an iteration of the
    structure.
  id: totrans-3061
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在对结构进行迭代期间可能发生的[`WithinGroup`](../core/sqlelement.html#sqlalchemy.sql.expression.WithinGroup
    "sqlalchemy.sql.expression.WithinGroup")构造中出现的AttributeError。
- en: 'This change is also **backported** to: 1.1.11'
  id: totrans-3062
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**到：1.1.11
- en: 'References: [#4012](https://www.sqlalchemy.org/trac/ticket/4012)'
  id: totrans-3063
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4012](https://www.sqlalchemy.org/trac/ticket/4012)
- en: '**[sql] [bug]**'
  id: totrans-3064
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed regression released in 1.1.5 due to [#3859](https://www.sqlalchemy.org/trac/ticket/3859)
    where adjustments to the “right-hand-side” evaluation of an expression based on
    [`Variant`](../core/type_api.html#sqlalchemy.types.Variant "sqlalchemy.types.Variant")
    to honor the underlying type’s “right-hand-side” rules caused the [`Variant`](../core/type_api.html#sqlalchemy.types.Variant
    "sqlalchemy.types.Variant") type to be inappropriately lost, in those cases when
    we *do* want the left-hand side type to be transferred directly to the right hand
    side so that bind-level rules can be applied to the expression’s argument.
  id: totrans-3065
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了1.1.5版本中由于[#3859](https://www.sqlalchemy.org/trac/ticket/3859)导致的回归问题，其中基于[`Variant`](../core/type_api.html#sqlalchemy.types.Variant
    "sqlalchemy.types.Variant")的“右侧”表达式评估的调整，以遵守基础类型的“右侧”规则，导致[`Variant`](../core/type_api.html#sqlalchemy.types.Variant
    "sqlalchemy.types.Variant")类型在那些情况下被不当地丢失，当我们确实希望左侧类型直接转移到右侧，以便将绑定级规则应用于表达式的参数时。
- en: 'This change is also **backported** to: 1.1.9'
  id: totrans-3066
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**到：1.1.9
- en: 'References: [#3952](https://www.sqlalchemy.org/trac/ticket/3952)'
  id: totrans-3067
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3952](https://www.sqlalchemy.org/trac/ticket/3952)
- en: '**[sql] [bug] [postgresql]**'
  id: totrans-3068
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [postgresql]**'
- en: Changed the mechanics of `ResultProxy` to unconditionally delay the “autoclose”
    step until the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") is done with the object; in the case where PostgreSQL
    ON CONFLICT with RETURNING returns no rows, autoclose was occurring in this previously
    non-existent use case, causing the usual autocommit behavior that occurs unconditionally
    upon INSERT/UPDATE/DELETE to fail.
  id: totrans-3069
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更改了 `ResultProxy` 的机制，无条件地延迟“自动关闭”步骤，直到 [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 完成对象的操作；在 PostgreSQL ON CONFLICT with RETURNING
    返回零行的情况下，之前不存在的用例中发生了自动关闭，导致在 INSERT/UPDATE/DELETE 时无条件发生的通常自动提交行为失败。
- en: 'This change is also **backported** to: 1.1.9'
  id: totrans-3070
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个���改也被**回溯**到：1.1.9
- en: 'References: [#3955](https://www.sqlalchemy.org/trac/ticket/3955)'
  id: totrans-3071
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3955](https://www.sqlalchemy.org/trac/ticket/3955)
- en: '**[sql] [bug]**'
  id: totrans-3072
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The rules for type coercion between [`Numeric`](../core/type_basics.html#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric"), [`Integer`](../core/type_basics.html#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer"), and date-related types now include additional logic
    that will attempt to preserve the settings of the incoming type on the “resolved”
    type. Currently the target for this is the `asdecimal` flag, so that a math operation
    between [`Numeric`](../core/type_basics.html#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric")
    or [`Float`](../core/type_basics.html#sqlalchemy.types.Float "sqlalchemy.types.Float")
    and [`Integer`](../core/type_basics.html#sqlalchemy.types.Integer "sqlalchemy.types.Integer")
    will preserve the “asdecimal” flag as well as if the type should be the [`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float") subclass.
  id: totrans-3073
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Numeric`](../core/type_basics.html#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric")、[`Integer`](../core/type_basics.html#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer") 和与日期相关的类型之间的类型强制转换规则现在包括额外的逻辑，将尝试保留“resolved”类型的传入类型的设置。目前，这个目标是
    `asdecimal` 标志，因此在 [`Numeric`](../core/type_basics.html#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric") 或 [`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float") 与 [`Integer`](../core/type_basics.html#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer") 之间的数学操作将保留“asdecimal”标志，以及类型是否应该是 [`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float") 子类。'
- en: See also
  id: totrans-3074
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Stronger typing added to “float” datatypes](migration_12.html#change-floats-12)'
  id: totrans-3075
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[“float” 数据类型增加了更强的类型检查](migration_12.html#change-floats-12)'
- en: 'References: [#4018](https://www.sqlalchemy.org/trac/ticket/4018)'
  id: totrans-3076
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4018](https://www.sqlalchemy.org/trac/ticket/4018)
- en: '**[sql] [bug] [mysql]**'
  id: totrans-3077
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [mysql]**'
- en: The result processor for the [`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float") type now unconditionally runs values through the `float()`
    processor if the dialect specifies that it also supports “native decimal” mode.
    While most backends will deliver Python `float` objects for a floating point datatype,
    the MySQL backends in some cases lack the typing information in order to provide
    this and return `Decimal` unless the float conversion is done.
  id: totrans-3078
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Float`](../core/type_basics.html#sqlalchemy.types.Float "sqlalchemy.types.Float")
    类型的结果处理器现在无条件地通过 `float()` 处理器运行值，如果方言指定它也支持“本地十进制”模式。虽然大多数后端会为浮点数据类型提供 Python
    `float` 对象，但在某些情况下，MySQL 后端缺乏类型信息，除非进行浮点转换，否则会返回 `Decimal`。'
- en: See also
  id: totrans-3079
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Stronger typing added to “float” datatypes](migration_12.html#change-floats-12)'
  id: totrans-3080
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[“float” 数据类型增加了更强的类型检查](migration_12.html#change-floats-12)'
- en: 'References: [#4020](https://www.sqlalchemy.org/trac/ticket/4020)'
  id: totrans-3081
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4020](https://www.sqlalchemy.org/trac/ticket/4020)
- en: '**[sql] [bug]**'
  id: totrans-3082
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Added some extra strictness to the handling of Python “float” values passed
    to SQL statements. A “float” value will be associated with the [`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float") datatype and not the Decimal-coercing [`Numeric`](../core/type_basics.html#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric") datatype as was the case before, eliminating a confusing
    warning emitted on SQLite as well as unnecessary coercion to Decimal.
  id: totrans-3083
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对传递给 SQL 语句的 Python “float” 值的处理增加了一些额外的严格性。一个“float” 值将与 [`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float") 数据类型关联，而不是以前的 Decimal-coercing [`Numeric`](../core/type_basics.html#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric") 数据类型，消除了在 SQLite 上发出的令人困惑的警告以及不必要的强制转换为 Decimal。
- en: See also
  id: totrans-3084
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Stronger typing added to “float” datatypes](migration_12.html#change-floats-12)'
  id: totrans-3085
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[“float” 数据类型增加了更强的类型检查](migration_12.html#change-floats-12)'
- en: 'References: [#4017](https://www.sqlalchemy.org/trac/ticket/4017)'
  id: totrans-3086
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4017](https://www.sqlalchemy.org/trac/ticket/4017)
- en: '**[sql] [bug]**'
  id: totrans-3087
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The operator precedence for all comparison operators such as LIKE, IS, IN, MATCH,
    equals, greater than, less than, etc. has all been merged into one level, so that
    expressions which make use of these against each other will produce parentheses
    between them. This suits the stated operator precedence of databases like Oracle,
    MySQL and others which place all of these operators as equal precedence, as well
    as PostgreSQL as of 9.5 which has also flattened its operator precedence.
  id: totrans-3088
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 所有比较运算符（如LIKE、IS、IN、MATCH、等于、大于、小于等）的操作符优先级已经合并为一个级别，因此使用这些运算符相互比较的表达式将在它们之间产生括号。这适用于像Oracle、MySQL等数据库的操作符优先级，这些数据库将所有这些运算符视为相等优先级，以及PostgreSQL
    9.5版本之后也已经将其操作符优先级展平。
- en: See also
  id: totrans-3089
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Flattened operator precedence for comparison operators](migration_12.html#change-3999)'
  id: totrans-3090
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[比较运算符的操作符优先级已展平](migration_12.html#change-3999)'
- en: 'References: [#3999](https://www.sqlalchemy.org/trac/ticket/3999)'
  id: totrans-3091
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3999](https://www.sqlalchemy.org/trac/ticket/3999)
- en: '**[sql] [bug]**'
  id: totrans-3092
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Repaired issue where the type of an expression that used [`ColumnOperators.is_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_") or similar would not be a “boolean”
    type, instead the type would be “nulltype”, as well as when using custom comparison
    operators against an untyped expression. This typing can impact how the expression
    behaves in larger contexts as well as in result-row-handling.
  id: totrans-3093
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用[`ColumnOperators.is_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_")或类似操作符的表达式的类型不是“boolean”类型的问题，而是“nulltype”类型，以及当使用自定义比较运算符与未类型化表达式相对比时也会出现这种情况。这种类型化可能会影响表达式在更大上下文中以及在结果行处理中的行为。
- en: 'References: [#3873](https://www.sqlalchemy.org/trac/ticket/3873)'
  id: totrans-3094
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3873](https://www.sqlalchemy.org/trac/ticket/3873)
- en: '**[sql] [bug]**'
  id: totrans-3095
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed the negation of a [`Label`](../core/sqlelement.html#sqlalchemy.sql.expression.Label
    "sqlalchemy.sql.expression.Label") construct so that the inner element is negated
    correctly, when the [`not_()`](../core/sqlelement.html#sqlalchemy.sql.expression.not_
    "sqlalchemy.sql.expression.not_") modifier is applied to the labeled expression.
  id: totrans-3096
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了对[`Label`](../core/sqlelement.html#sqlalchemy.sql.expression.Label "sqlalchemy.sql.expression.Label")构造的否定，以便在应用[`not_()`](../core/sqlelement.html#sqlalchemy.sql.expression.not_
    "sqlalchemy.sql.expression.not_")修饰符时正确否定内部元素。
- en: 'References: [#3969](https://www.sqlalchemy.org/trac/ticket/3969)'
  id: totrans-3097
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3969](https://www.sqlalchemy.org/trac/ticket/3969)
- en: '**[sql] [bug]**'
  id: totrans-3098
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The system by which percent signs in SQL statements are “doubled” for escaping
    purposes has been refined. The “doubling” of percent signs mostly associated with
    the [`literal_column`](../core/sqlelement.html#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column") construct as well as operators like
    [`ColumnOperators.contains()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains") now occurs based on the
    stated paramstyle of the DBAPI in use; for percent-sensitive paramstyles as are
    common with the PostgreSQL and MySQL drivers the doubling will occur, for others
    like that of SQLite it will not. This allows more database-agnostic use of the
    [`literal_column`](../core/sqlelement.html#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column") construct to be possible.
  id: totrans-3099
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQL语句中百分号“加倍”以进行转义目的的系统已经得到改进。与[`literal_column`](../core/sqlelement.html#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column")构造以及像[`ColumnOperators.contains()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")这样的操作符密切相关的百分号“加倍”现在基于正在使用的DBAPI的指定paramstyle进行；对于像PostgreSQL和MySQL驱动程序常见的百分号敏感paramstyles，将会发生加倍，对于SQLite等其他驱动程序则不会。这使得更多数据库无关的使用[`literal_column`](../core/sqlelement.html#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column")构造成为可能。
- en: See also
  id: totrans-3100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Percent signs in literal_column() now conditionally escaped](migration_12.html#change-3740)'
  id: totrans-3101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[在`literal_column()`中条件性转义百分号](migration_12.html#change-3740)'
- en: 'References: [#3740](https://www.sqlalchemy.org/trac/ticket/3740)'
  id: totrans-3102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3740](https://www.sqlalchemy.org/trac/ticket/3740)
- en: '**[sql] [bug]**'
  id: totrans-3103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where a column-level [`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") would fail to compile the SQL expression
    using the underlying dialect compiler as well as apply proper flags to generate
    literal values as inline, in the case that the sqltext is a Core expression and
    not just a plain string. This was long-ago fixed for table-level check constraints
    in 0.9 as part of [#2742](https://www.sqlalchemy.org/trac/ticket/2742), which
    more commonly feature Core SQL expressions as opposed to plain string expressions.
  id: totrans-3104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，其中列级 [`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") 无法使用基础方言编译器编译 SQL 表达式，并且在 sqltext 是 Core
    表达式而不仅仅是普通字符串的情况下应用正确的标志以生成内联字面值。长期以来，这在 0.9 中作为 [#2742](https://www.sqlalchemy.org/trac/ticket/2742)
    的一部分已经修复了，这更常见地使用 Core SQL 表达式而不是普通字符串表达式的表级检查约束。
- en: 'References: [#3957](https://www.sqlalchemy.org/trac/ticket/3957)'
  id: totrans-3105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3957](https://www.sqlalchemy.org/trac/ticket/3957)
- en: '**[sql] [bug]**'
  id: totrans-3106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where a SQL-oriented Python-side column default could fail to be executed
    properly upon INSERT in the “pre-execute” codepath, if the SQL itself were an
    untyped expression, such as plain text. The “pre- execute” codepath is fairly
    uncommon however can apply to non-integer primary key columns with SQL defaults
    when RETURNING is not used.
  id: totrans-3107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，在“预执行”代码路径中，如果 SQL 本身是一个未分类的表达式（比如纯文本），则 SQL 导向的 Python 侧列默认值可能在 INSERT
    时无法正确执行。然而，“预执行”代码路径相当不常见，但是在不使用 RETURNING 时，它可以应用于具有 SQL 默认值的非整数主键列。
- en: 'References: [#3923](https://www.sqlalchemy.org/trac/ticket/3923)'
  id: totrans-3108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3923](https://www.sqlalchemy.org/trac/ticket/3923)
- en: '**[sql] [bug]**'
  id: totrans-3109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The expression used for COLLATE as rendered by the column-level [`collate()`](../core/sqlelement.html#sqlalchemy.sql.expression.collate
    "sqlalchemy.sql.expression.collate") and [`ColumnOperators.collate()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.collate
    "sqlalchemy.sql.expression.ColumnOperators.collate") is now quoted as an identifier
    when the name is case sensitive, e.g. has uppercase characters. Note that this
    does not impact type-level collation, which is already quoted.
  id: totrans-3110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当列级 [`collate()`](../core/sqlelement.html#sqlalchemy.sql.expression.collate
    "sqlalchemy.sql.expression.collate") 和 [`ColumnOperators.collate()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.collate
    "sqlalchemy.sql.expression.ColumnOperators.collate") 用于 COLLATE 的表达式在名称区分大小写时，现在会被引用为标识符，例如包含大写字符。请注意，这不影响类型级排序，因为它已经被引用。
- en: See also
  id: totrans-3111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另见
- en: '[The column-level COLLATE keyword now quotes the collation name](migration_12.html#change-3785)'
  id: totrans-3112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[列级 COLLATE 关键字现在引用排序名称](migration_12.html#change-3785)'
- en: 'References: [#3785](https://www.sqlalchemy.org/trac/ticket/3785)'
  id: totrans-3113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3785](https://www.sqlalchemy.org/trac/ticket/3785)
- en: '**[sql] [bug]**'
  id: totrans-3114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where the use of an [`Alias`](../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") object in a column context would raise an argument
    error when it tried to group itself into a parenthesized expression. Using [`Alias`](../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") in this way is not yet a fully supported API,
    however it applies to some end-user recipes and may have a more prominent role
    in support of some future PostgreSQL features.
  id: totrans-3115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在列上下文中使用 [`Alias`](../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") 对象会在尝试将自身分组到括号表达式中时引发参数错误的 bug。然而，以这种方式使用 [`Alias`](../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") 还不是一个完全支持的 API，但它适用于一些最终用户的配方，并且可能在支持某些未来 PostgreSQL
    特性时扮演更重要的角色。
- en: 'References: [#3939](https://www.sqlalchemy.org/trac/ticket/3939)'
  id: totrans-3116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3939](https://www.sqlalchemy.org/trac/ticket/3939)
- en: schema
  id: totrans-3117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: '**[schema] [bug]**'
  id: totrans-3118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema] [bug]**'
- en: An [`ArgumentError`](../core/exceptions.html#sqlalchemy.exc.ArgumentError "sqlalchemy.exc.ArgumentError")
    is now raised if a [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") object is created with a mismatched
    number of “local” and “remote” columns, which otherwise causes the internal state
    of the constraint to be incorrect. Note that this also impacts the condition where
    a dialect’s reflection process produces a mismatched set of columns for a foreign
    key constraint.
  id: totrans-3119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果 [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") 对象创建时“本地”和“远程”列数量不匹配，则现在会引发 [`ArgumentError`](../core/exceptions.html#sqlalchemy.exc.ArgumentError
    "sqlalchemy.exc.ArgumentError")，否则会导致约束的内部状态不正确。请注意，这也影响方言的反射过程产生的外键约束的列集不匹配的情况。
- en: 'This change is also **backported** to: 1.1.10'
  id: totrans-3120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.1.10
- en: 'References: [#3949](https://www.sqlalchemy.org/trac/ticket/3949)'
  id: totrans-3121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3949](https://www.sqlalchemy.org/trac/ticket/3949)
- en: postgresql
  id: totrans-3122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-3123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [错误]**'
- en: Continuing with the fix that correctly handles PostgreSQL version string “10devel”
    released in 1.1.8, an additional regexp bump to handle version strings of the
    form “10beta1”. While PostgreSQL now offers better ways to get this information,
    we are sticking w/ the regexp at least through 1.1.x for the least amount of risk
    to compatibility w/ older or alternate PostgreSQL databases.
  id: totrans-3124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 继续修复正确处理 PostgreSQL 版本字符串“10devel”的问题，该问题在 1.1.8 中发布，另外增加了一个正则表达式来处理形式为“10beta1”的版本字符串。虽然
    PostgreSQL 现在提供了更好的获取此信息的方法，但我们至少在 1.1.x 中仍然坚持使用正则表达式，以减少与旧版或替代 PostgreSQL 数据库的兼容性风险。
- en: 'This change is also **backported** to: 1.1.11'
  id: totrans-3125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.1.11
- en: 'References: [#4005](https://www.sqlalchemy.org/trac/ticket/4005)'
  id: totrans-3126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4005](https://www.sqlalchemy.org/trac/ticket/4005)
- en: '**[postgresql] [bug]**'
  id: totrans-3127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [错误]**'
- en: Fixed bug where using [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") with a string type that features a collation would fail
    to produce the correct syntax within CREATE TABLE.
  id: totrans-3128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用带有排序规则的字符串类型的 [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") 时，在 CREATE TABLE 中无法生成正确语法的错误。
- en: 'This change is also **backported** to: 1.1.11'
  id: totrans-3129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.1.11
- en: 'References: [#4006](https://www.sqlalchemy.org/trac/ticket/4006)'
  id: totrans-3130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4006](https://www.sqlalchemy.org/trac/ticket/4006)
- en: '**[postgresql] [bug]**'
  id: totrans-3131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [错误]**'
- en: Added “autocommit” support for GRANT, REVOKE keywords. Pull request courtesy
    Jacob Hayes.
  id: totrans-3132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 GRANT、REVOKE 关键字添加了“autocommit”支持。感谢 Jacob Hayes 的拉取请求。
- en: 'This change is also **backported** to: 1.1.10'
  id: totrans-3133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.1.10
- en: '**[postgresql] [bug]**'
  id: totrans-3134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [错误]**'
- en: Added support for parsing the PostgreSQL version string for a development version
    like “PostgreSQL 10devel”. Pull request courtesy Sean McCully.
  id: totrans-3135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了解析 PostgreSQL 版本字符串的支持，例如“PostgreSQL 10devel”这样的开发版本。感谢 Sean McCully 的拉取请求。
- en: 'This change is also **backported** to: 1.1.8'
  id: totrans-3136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.1.8
- en: '**[postgresql] [bug]**'
  id: totrans-3137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [错误]**'
- en: Fixed bug where the base [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") datatype would not invoke the bind/result processors
    of [`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY").
  id: totrans-3138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了基本 [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")
    数据类型不会调用 [`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY") 的绑定/结果处理器的错误。
- en: 'References: [#3964](https://www.sqlalchemy.org/trac/ticket/3964)'
  id: totrans-3139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3964](https://www.sqlalchemy.org/trac/ticket/3964)
- en: '**[postgresql] [bug]**'
  id: totrans-3140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [错误]**'
- en: Added support for all possible “fields” identifiers when reflecting the PostgreSQL
    `INTERVAL` datatype, e.g. “YEAR”, “MONTH”, “DAY TO MINUTE”, etc.. In addition,
    the [`INTERVAL`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.INTERVAL
    "sqlalchemy.dialects.postgresql.INTERVAL") datatype itself now includes a new
    parameter [`INTERVAL.fields`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.INTERVAL.params.fields
    "sqlalchemy.dialects.postgresql.INTERVAL") where these qualifiers can be specified;
    the qualifier is also reflected back into the resulting datatype upon reflection
    / inspection.
  id: totrans-3141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在反射 PostgreSQL `INTERVAL` 数据类型时，增加了对所有可能的“字段”标识符的支持，例如“YEAR”、“MONTH”、“DAY TO
    MINUTE”等。此外，[`INTERVAL`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.INTERVAL
    "sqlalchemy.dialects.postgresql.INTERVAL") 数据类型本身现在包括一个新参数 [`INTERVAL.fields`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.INTERVAL.params.fields
    "sqlalchemy.dialects.postgresql.INTERVAL")，可以在其中指定这些限定符；在反射/检查时，限定符也会反映到结果数据类型中。
- en: See also
  id: totrans-3142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Support for fields specification in INTERVAL, including full reflection](migration_12.html#change-3959)'
  id: totrans-3143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[INTERVAL中字段规范的支持，包括完整反射](migration_12.html#change-3959)'
- en: 'References: [#3959](https://www.sqlalchemy.org/trac/ticket/3959)'
  id: totrans-3144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3959](https://www.sqlalchemy.org/trac/ticket/3959)
- en: mysql
  id: totrans-3145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [feature]**'
  id: totrans-3146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [功能]**'
- en: Added support for MySQL’s ON DUPLICATE KEY UPDATE MySQL-specific [`Insert`](../dialects/mysql.html#sqlalchemy.dialects.mysql.Insert
    "sqlalchemy.dialects.mysql.dml.Insert") object. Pull request courtesy Michael
    Doronin.
  id: totrans-3147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对 MySQL 的 ON DUPLICATE KEY UPDATE MySQL特定的 [`Insert`](../dialects/mysql.html#sqlalchemy.dialects.mysql.Insert
    "sqlalchemy.dialects.mysql.dml.Insert") 对象的支持。感谢 Michael Doronin 的拉取请求。
- en: See also
  id: totrans-3148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Support for INSERT..ON DUPLICATE KEY UPDATE](migration_12.html#change-4009)'
  id: totrans-3149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[INSERT..ON DUPLICATE KEY UPDATE的支持](migration_12.html#change-4009)'
- en: 'References: [#4009](https://www.sqlalchemy.org/trac/ticket/4009)'
  id: totrans-3150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4009](https://www.sqlalchemy.org/trac/ticket/4009)
- en: '**[mysql] [bug]**'
  id: totrans-3151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [错误]**'
- en: MySQL 5.7 has introduced permission limiting for the “SHOW VARIABLES” command;
    the MySQL dialect will now handle when SHOW returns no row, in particular for
    the initial fetch of SQL_MODE, and will emit a warning that user permissions should
    be modified to allow the row to be present.
  id: totrans-3152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL 5.7引入了对“SHOW VARIABLES”命令的权限限制；MySQL方言现在将处理当SHOW返回零行时，特别是对于SQL_MODE的初始获取，并将发出警告，指出用户权限应修改以允许该行存在。
- en: 'This change is also **backported** to: 1.1.11'
  id: totrans-3153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.1.11
- en: 'References: [#4007](https://www.sqlalchemy.org/trac/ticket/4007)'
  id: totrans-3154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4007](https://www.sqlalchemy.org/trac/ticket/4007)
- en: '**[mysql] [bug]**'
  id: totrans-3155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Removed an ancient and unnecessary intercept of the UTC_TIMESTAMP MySQL function,
    which was getting in the way of using it with a parameter.
  id: totrans-3156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了对UTC_TIMESTAMP MySQL函数的古老且不必要的拦截，这妨碍了使用带参数的函数。
- en: 'This change is also **backported** to: 1.1.10'
  id: totrans-3157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.1.10
- en: 'References: [#3966](https://www.sqlalchemy.org/trac/ticket/3966)'
  id: totrans-3158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3966](https://www.sqlalchemy.org/trac/ticket/3966)
- en: '**[mysql] [bug]**'
  id: totrans-3159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed bug in MySQL dialect regarding rendering of table options in conjunction
    with PARTITION options when rendering CREATE TABLE. The PARTITION related options
    need to follow the table options, whereas previously this ordering was not enforced.
  id: totrans-3160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了MySQL方言在渲染CREATE TABLE时与PARTITION选项一起渲染表选项时的错误。PARTITION相关选项需要遵循表选项，而以前未强制执行此顺序。
- en: 'This change is also **backported** to: 1.1.10'
  id: totrans-3161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.1.10
- en: 'References: [#3961](https://www.sqlalchemy.org/trac/ticket/3961)'
  id: totrans-3162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3961](https://www.sqlalchemy.org/trac/ticket/3961)
- en: '**[mysql] [bug]**'
  id: totrans-3163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Added support for views that are unreflectable due to stale table definitions,
    when calling [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect"); a warning is emitted for the table that
    cannot respond to `DESCRIBE`, but the operation succeeds.
  id: totrans-3164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对由于过时表定义而无法反射的视图的支持，当调用[`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect")时，对于无法响应`DESCRIBE`的表会发出警告，但操作成功。
- en: 'References: [#3871](https://www.sqlalchemy.org/trac/ticket/3871)'
  id: totrans-3165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3871](https://www.sqlalchemy.org/trac/ticket/3871)
- en: mssql
  id: totrans-3166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-3167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed bug where SQL Server transaction isolation must be fetched from a different
    view when using Azure data warehouse, the query is now attempted against both
    views and then a NotImplemented is raised unconditionally if failure continues
    to provide the best resiliency against future arbitrary API changes in new SQL
    Server versions.
  id: totrans-3168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用Azure数据仓库时必须从不同视图获取SQL Server事务隔离的错误，现在查询将尝试针对两个视图，如果失败继续提供最佳的抗未来任意API更改的弹性，将无条件引发NotImplemented。
- en: 'This change is also **backported** to: 1.1.11'
  id: totrans-3169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.1.11
- en: 'References: [#3994](https://www.sqlalchemy.org/trac/ticket/3994)'
  id: totrans-3170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3994](https://www.sqlalchemy.org/trac/ticket/3994)
- en: '**[mssql] [bug]**'
  id: totrans-3171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Added a placeholder type [`XML`](../dialects/mssql.html#sqlalchemy.dialects.mssql.XML
    "sqlalchemy.dialects.mssql.XML") to the SQL Server dialect, so that a reflected
    table which includes this type can be re-rendered as a CREATE TABLE. The type
    has no special round-trip behavior nor does it currently support additional qualifying
    arguments.
  id: totrans-3172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向SQL Server方言添加了一个占位符类型[`XML`](../dialects/mssql.html#sqlalchemy.dialects.mssql.XML
    "sqlalchemy.dialects.mssql.XML")，以便包含此类型的反射表可以重新渲染为CREATE TABLE。该类型没有特殊的往返行为，也不支持额外的限定参数。
- en: 'This change is also **backported** to: 1.1.11'
  id: totrans-3173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.1.11
- en: 'References: [#3973](https://www.sqlalchemy.org/trac/ticket/3973)'
  id: totrans-3174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3973](https://www.sqlalchemy.org/trac/ticket/3973)
- en: '**[mssql] [bug]**'
  id: totrans-3175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: The SQL Server dialect now allows for a database and/or owner name with a dot
    inside of it, using brackets explicitly in the string around the owner and optionally
    the database name as well. In addition, sending the [`quoted_name`](../core/sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name") construct for the schema name will not
    split on the dot and will deliver the full string as the “owner”. [`quoted_name`](../core/sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name") is also now available from the `sqlalchemy.sql`
    import space.
  id: totrans-3176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQL Server方言现在允许在其中带有点的数据库和/或所有者名称，使用字符串中明确在所有者周围以及可选地在数据库名称周围的括号。此外，将[`quoted_name`](../core/sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")构造发送到模式名称将不会在点上拆分，并将提供完整字符串作为“所有者”。[`quoted_name`](../core/sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")现在也可以从`sqlalchemy.sql`导入空间中使用。
- en: See also
  id: totrans-3177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[SQL Server schema names with embedded dots supported](migration_12.html#change-2626)'
  id: totrans-3178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[支持带有嵌入点的SQL Server模式名称](migration_12.html#change-2626)'
- en: 'References: [#2626](https://www.sqlalchemy.org/trac/ticket/2626)'
  id: totrans-3179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2626](https://www.sqlalchemy.org/trac/ticket/2626)
- en: oracle
  id: totrans-3180
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [feature] [postgresql]**'
  id: totrans-3181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [feature] [postgresql]**'
- en: Added new keywords [`Sequence.cache`](../core/defaults.html#sqlalchemy.schema.Sequence.params.cache
    "sqlalchemy.schema.Sequence") and [`Sequence.order`](../core/defaults.html#sqlalchemy.schema.Sequence.params.order
    "sqlalchemy.schema.Sequence") to [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence"), to allow rendering of the CACHE parameter understood
    by Oracle and PostgreSQL, and the ORDER parameter understood by Oracle. Pull request
    courtesy David Moore.
  id: totrans-3182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新关键字[`Sequence.cache`](../core/defaults.html#sqlalchemy.schema.Sequence.params.cache
    "sqlalchemy.schema.Sequence")和[`Sequence.order`](../core/defaults.html#sqlalchemy.schema.Sequence.params.order
    "sqlalchemy.schema.Sequence")到[`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")，以允许呈现Oracle和PostgreSQL理解的CACHE参数以及Oracle理解的ORDER参数。感谢David
    Moore的拉取请求。
- en: 'This change is also **backported** to: 1.1.12'
  id: totrans-3183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.1.12
- en: '**[oracle] [feature]**'
  id: totrans-3184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [feature]**'
- en: The Oracle dialect now inspects unique and check constraints when using [`Inspector.get_unique_constraints()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_unique_constraints
    "sqlalchemy.engine.reflection.Inspector.get_unique_constraints"), [`Inspector.get_check_constraints()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_check_constraints
    "sqlalchemy.engine.reflection.Inspector.get_check_constraints"). As Oracle does
    not have unique constraints that are separate from a unique [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index"), a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") that’s reflected will still continue to not have [`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") objects associated with it. Pull requests
    courtesy Eloy Felix.
  id: totrans-3185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用[`Inspector.get_unique_constraints()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_unique_constraints
    "sqlalchemy.engine.reflection.Inspector.get_unique_constraints")、[`Inspector.get_check_constraints()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_check_constraints
    "sqlalchemy.engine.reflection.Inspector.get_check_constraints")时，Oracle方言现在检查唯一和检查约束。由于Oracle没有与唯一[`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")分开的唯一约束，反映的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")仍将继续不具有与之关联的[`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint")对象。拉取请求由Eloy Felix提供。
- en: See also
  id: totrans-3186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Oracle Unique, Check constraints now reflected](migration_12.html#change-4003)'
  id: totrans-3187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Oracle唯一性、检查约束现已反映](migration_12.html#change-4003)'
- en: 'References: [#4003](https://www.sqlalchemy.org/trac/ticket/4003)'
  id: totrans-3188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4003](https://www.sqlalchemy.org/trac/ticket/4003)
- en: '**[oracle] [bug]**'
  id: totrans-3189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Support for two-phase transactions has been removed entirely for cx_Oracle when
    version 6.0b1 or later of the DBAPI is in use. The two- phase feature historically
    has never been usable under cx_Oracle 5.x in any case, and cx_Oracle 6.x has removed
    the connection-level “twophase” flag upon which this feature relied.
  id: totrans-3190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用版本6.0b1或更高版本的DBAPI时，cx_Oracle完全删除了对两阶段事务的支持。在任何情况下，cx_Oracle 5.x历史上从未能够使用两阶段功能，而cx_Oracle
    6.x已删除了此功能依赖的连接级“twophase”标志。
- en: 'This change is also **backported** to: 1.1.11'
  id: totrans-3191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.1.11
- en: 'References: [#3997](https://www.sqlalchemy.org/trac/ticket/3997)'
  id: totrans-3192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3997](https://www.sqlalchemy.org/trac/ticket/3997)
- en: '**[oracle] [bug]**'
  id: totrans-3193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed bug in cx_Oracle dialect where version string parsing would fail for cx_Oracle
    version 6.0b1 due to the “b” character. Version string parsing is now via a regexp
    rather than a simple split.
  id: totrans-3194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 cx_Oracle 方言中的错误，其中版本字符串解析会由于“b”字符而在 cx_Oracle 版本 6.0b1 中失败。现在版本字符串解析是通过正则表达式而不是简单的拆分。
- en: 'This change is also **backported** to: 1.1.10'
  id: totrans-3195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还**回溯**到：1.1.10
- en: 'References: [#3975](https://www.sqlalchemy.org/trac/ticket/3975)'
  id: totrans-3196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3975](https://www.sqlalchemy.org/trac/ticket/3975)
- en: '**[oracle] [bug]**'
  id: totrans-3197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[Oracle] [错误]**'
- en: The cx_Oracle dialect now supports “sane multi rowcount”, that is, when a series
    of parameter sets are executed via DBAPI `cursor.executemany()`, we can make use
    of `cursor.rowcount` to verify the number of rows matched. This has an impact
    within the ORM when detecting concurrent modification scenarios, in that some
    simple conditions can now be detected even when the ORM is batching statements,
    as well as when the more strict versioning feature is used, the ORM can still
    use statement batching. The flag is enabled for cx_Oracle assuming at least version
    5.0, which is now commonplace.
  id: totrans-3198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: cx_Oracle 方言现在支持“合理的多行计数”，即当通过 DBAPI `cursor.executemany()` 执行一系列参数集时，我们可以利用
    `cursor.rowcount` 来验证匹配的行数。这在 ORM 中检测并发修改场景时有影响，因为现在即使 ORM 批处理语句，一些简单条件也可以被检测到，而且当使用更严格的版本控制功能时，ORM
    仍然可以使用语句批处理。假定至少为版本 5.0，这个标志对 cx_Oracle 启用，这现在是很普遍的。
- en: 'References: [#3932](https://www.sqlalchemy.org/trac/ticket/3932)'
  id: totrans-3199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3932](https://www.sqlalchemy.org/trac/ticket/3932)
- en: '**[oracle] [bug]**'
  id: totrans-3200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[Oracle] [错误]**'
- en: Oracle reflection now “normalizes” the name given to a foreign key constraint,
    that is, returns it as all lower case for a case insensitive name. This was already
    the behavior for indexes and primary key constraints as well as all table and
    column names. This will allow Alembic autogenerate scripts to compare and render
    foreign key constraint names correctly when initially specified as case insensitive.
  id: totrans-3201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Oracle 反射现在“规范化”了外键约束的名称，即对于大小写不敏感的名称，将其全部转换为小写。对于索引和主键约束以及所有表和列名称，这已经是行为。这将允许
    Alembic 自动生成脚本在最初指定为大小写不敏感时正确比较和呈现外键约束名称。
- en: See also
  id: totrans-3202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另见
- en: '[Oracle foreign key constraint names are now “name normalized”](migration_12.html#change-3276)'
  id: totrans-3203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Oracle 外键约束名称现在是“名称规范化的”](migration_12.html#change-3276)'
- en: 'References: [#3276](https://www.sqlalchemy.org/trac/ticket/3276)'
  id: totrans-3204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3276](https://www.sqlalchemy.org/trac/ticket/3276)
- en: misc
  id: totrans-3205
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[feature] [ext]**'
  id: totrans-3206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[特性] [扩展]**'
- en: Added new flag [`Session.enable_baked_queries`](../orm/session_api.html#sqlalchemy.orm.Session.params.enable_baked_queries
    "sqlalchemy.orm.Session") to the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") to allow baked queries to be disabled session-wide,
    reducing memory use. Also added new [`Bakery`](../orm/extensions/baked.html#sqlalchemy.ext.baked.Bakery
    "sqlalchemy.ext.baked.Bakery") wrapper so that the bakery returned by [`BakedQuery.bakery`](../orm/extensions/baked.html#sqlalchemy.ext.baked.BakedQuery.params.bakery
    "sqlalchemy.ext.baked.BakedQuery") can be inspected.
  id: totrans-3207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新标志[`Session.enable_baked_queries`](../orm/session_api.html#sqlalchemy.orm.Session.params.enable_baked_queries
    "sqlalchemy.orm.Session")到[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")以允许在会话范围内禁用烘焙查询，减少内存使用。还添加了新的[`Bakery`](../orm/extensions/baked.html#sqlalchemy.ext.baked.Bakery
    "sqlalchemy.ext.baked.Bakery")包装器，以便通过[`BakedQuery.bakery`](../orm/extensions/baked.html#sqlalchemy.ext.baked.BakedQuery.params.bakery
    "sqlalchemy.ext.baked.BakedQuery")返回的烘焙可以进行检查。
- en: '**[bug] [ext]**'
  id: totrans-3208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [扩展]**'
- en: Protected against testing “None” as a class in the case where declarative classes
    are being garbage collected and new automap prepare() operations are taking place
    concurrently, very infrequently hitting a weakref that has not been fully acted
    upon after gc.
  id: totrans-3209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在声明类被垃圾回收并且新的 automap prepare() 操作同时发生的情况下，保护不会将“None”作为类进行测试，非常少地在 gc 后没有完全处理
    weakref，从而非常不频繁地命中。
- en: 'This change is also **backported** to: 1.1.10'
  id: totrans-3210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还**回溯**到：1.1.10
- en: 'References: [#3980](https://www.sqlalchemy.org/trac/ticket/3980)'
  id: totrans-3211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3980](https://www.sqlalchemy.org/trac/ticket/3980)
- en: '**[bug] [ext]**'
  id: totrans-3212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [扩展]**'
- en: Fixed bug in [`sqlalchemy.ext.mutable`](../orm/extensions/mutable.html#module-sqlalchemy.ext.mutable
    "sqlalchemy.ext.mutable") where the [`Mutable.as_mutable()`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.Mutable.as_mutable
    "sqlalchemy.ext.mutable.Mutable.as_mutable") method would not track a type that
    had been copied using `TypeEngine.copy()`. This became more of a regression in
    1.1 compared to 1.0 because the [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") class is now a subclass of [`SchemaEventTarget`](../core/events.html#sqlalchemy.events.SchemaEventTarget
    "sqlalchemy.events.SchemaEventTarget"), which among other things indicates to
    the parent [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    that the type should be copied when the [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") is. These copies are common when using declarative
    with mixins or abstract classes.
  id: totrans-3213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`sqlalchemy.ext.mutable`](../orm/extensions/mutable.html#module-sqlalchemy.ext.mutable
    "sqlalchemy.ext.mutable")中的一个错误，其中[`Mutable.as_mutable()`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.Mutable.as_mutable
    "sqlalchemy.ext.mutable.Mutable.as_mutable")方法不会跟踪使用`TypeEngine.copy()`复制的类型。这在1.1版本相对于1.0版本来说更像是一个回退，因为[`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")类现在是[`SchemaEventTarget`](../core/events.html#sqlalchemy.events.SchemaEventTarget
    "sqlalchemy.events.SchemaEventTarget")的子类之一，其中之一的功能是告诉父[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")当[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")被复制时，类型也应该被复制。在使用混入或抽象类的声明性时，这些副本很常见。
- en: 'This change is also **backported** to: 1.1.8'
  id: totrans-3214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**到：1.1.8
- en: 'References: [#3950](https://www.sqlalchemy.org/trac/ticket/3950)'
  id: totrans-3215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3950](https://www.sqlalchemy.org/trac/ticket/3950)
- en: '**[bug] [ext]**'
  id: totrans-3216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Added support for bound parameters, e.g. those normally set up via [`Query.params()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.params
    "sqlalchemy.orm.Query.params"), to the `Result.count()` method. Previously, support
    for parameters were omitted. Pull request courtesy Pat Deegan.
  id: totrans-3217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对`Result.count()`方法添加了对绑定参数的支持，例如通常通过[`Query.params()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.params
    "sqlalchemy.orm.Query.params")设置的参数。先前，对参数的支持被省略了。感谢 Pat Deegan 提交的拉取请求。
- en: 'This change is also **backported** to: 1.1.8'
  id: totrans-3218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**到：1.1.8
- en: '**[bug] [ext]**'
  id: totrans-3219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: The `AssociationProxy.any()`, `AssociationProxy.has()` and `AssociationProxy.contains()`
    comparison methods now support linkage to an attribute that is itself also an
    [`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy"), recursively.
  id: totrans-3220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`AssociationProxy.any()`，`AssociationProxy.has()`和`AssociationProxy.contains()`比较方法现在支持链接到一个属性，该属性本身也是[`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy")，递归地。'
- en: See also
  id: totrans-3221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[AssociationProxy any(), has(), contains() work with chained association proxies](migration_12.html#change-3769)'
  id: totrans-3222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[AssociationProxy any()，has()，contains()可与链式关联代理一起使用](migration_12.html#change-3769)'
- en: 'References: [#3769](https://www.sqlalchemy.org/trac/ticket/3769)'
  id: totrans-3223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3769](https://www.sqlalchemy.org/trac/ticket/3769)
- en: '**[bug] [ext]**'
  id: totrans-3224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Implemented in-place mutation operators `__ior__`, `__iand__`, `__ixor__` and
    `__isub__` for [`MutableSet`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableSet
    "sqlalchemy.ext.mutable.MutableSet") and `__iadd__` for [`MutableList`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableList
    "sqlalchemy.ext.mutable.MutableList") so that change events are fired off when
    these mutator methods are used to alter the collection.
  id: totrans-3225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为[`MutableSet`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableSet
    "sqlalchemy.ext.mutable.MutableSet")实现了就地突变运算符`__ior__`，`__iand__`，`__ixor__`和`__isub__`，以及为[`MutableList`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableList
    "sqlalchemy.ext.mutable.MutableList")实现了`__iadd__`，这样当使用这些变异器方法来改变集合时就会触发变更事件。
- en: See also
  id: totrans-3226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[In-place mutation operators work for MutableSet, MutableList](migration_12.html#change-3853)'
  id: totrans-3227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[就地突变运算符对MutableSet，MutableList起作用](migration_12.html#change-3853)'
- en: 'References: [#3853](https://www.sqlalchemy.org/trac/ticket/3853)'
  id: totrans-3228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3853](https://www.sqlalchemy.org/trac/ticket/3853)
- en: '**[bug] [declarative]**'
  id: totrans-3229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [declarative]**'
- en: A warning is emitted if the [`declared_attr.cascading`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr.cascading
    "sqlalchemy.orm.declared_attr.cascading") modifier is used with a declarative
    attribute that is itself declared on a class that is to be mapped, as opposed
    to a declarative mixin class or `__abstract__` class. The [`declared_attr.cascading`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr.cascading
    "sqlalchemy.orm.declared_attr.cascading") modifier currently only applies to mixin/abstract
    classes.
  id: totrans-3230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果在要映射的类上使用了 [`declared_attr.cascading`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr.cascading
    "sqlalchemy.orm.declared_attr.cascading") 修饰符，而不是在声明的 mixin 类或 `__abstract__`
    类上使用，则会发出警告。 [`declared_attr.cascading`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr.cascading
    "sqlalchemy.orm.declared_attr.cascading") 修饰符目前仅适用于 mixin/abstract 类。
- en: 'References: [#3847](https://www.sqlalchemy.org/trac/ticket/3847)'
  id: totrans-3231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3847](https://www.sqlalchemy.org/trac/ticket/3847)
- en: '**[bug] [ext]**'
  id: totrans-3232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Improved the association proxy list collection so that premature autoflush against
    a newly created association object can be prevented in the case where `list.append()`
    is being used, and a lazy load would be invoked when the association proxy accesses
    the endpoint collection. The endpoint collection is now accessed first before
    the creator is invoked to produce the association object.
  id: totrans-3233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了关联代理列表集合，以便在使用`list.append()`时防止对新创建的关联对象进行过早的自动刷新，并且在关联代理访问端点集合时将调用延迟加载。现在首先访问端点集合，然后再调用创建者以产生关联对象。
- en: 'References: [#3941](https://www.sqlalchemy.org/trac/ticket/3941)'
  id: totrans-3234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3941](https://www.sqlalchemy.org/trac/ticket/3941)
- en: '**[bug] [ext]**'
  id: totrans-3235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: The [`sqlalchemy.ext.hybrid.hybrid_property`](../orm/extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property") class now supports calling mutators like
    `@setter`, `@expression` etc. multiple times across subclasses, and now provides
    a `@getter` mutator, so that a particular hybrid can be repurposed across subclasses
    or other classes. This now matches the behavior of `@property` in standard Python.
  id: totrans-3236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`sqlalchemy.ext.hybrid.hybrid_property`](../orm/extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property") 类现在支持多次调用诸如 `@setter`、`@expression` 等
    mutator，并且现在提供了一个 `@getter` mutator，以便可以在子类或其他类中重新使用特定的混合属性。这现在与标准 Python 中的 `@property`
    的行为相匹配。'
- en: See also
  id: totrans-3237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Hybrid attributes support reuse among subclasses, redefinition of @getter](migration_12.html#change-3911-3912)'
  id: totrans-3238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[混合属性支持在子类之间重用，重新定义 @getter](migration_12.html#change-3911-3912)'
- en: 'References: [#3911](https://www.sqlalchemy.org/trac/ticket/3911), [#3912](https://www.sqlalchemy.org/trac/ticket/3912)'
  id: totrans-3239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3911](https://www.sqlalchemy.org/trac/ticket/3911), [#3912](https://www.sqlalchemy.org/trac/ticket/3912)
- en: '**[bug] [ext]**'
  id: totrans-3240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed a bug in the `sqlalchemy.ext.serializer` extension whereby an “annotated”
    SQL element (as produced by the ORM for many types of SQL expressions) could not
    be reliably serialized. Also bumped the default pickle level for the serializer
    to “HIGHEST_PROTOCOL”.
  id: totrans-3241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了`sqlalchemy.ext.serializer`扩展中的一个 bug，该 bug 导致“已注释”的 SQL 元素（由 ORM 为许多类型的
    SQL 表达式生成）无法可靠地序列化。还将序列化器的默认 pickle 级别提升为“HIGHEST_PROTOCOL”。
- en: 'References: [#3918](https://www.sqlalchemy.org/trac/ticket/3918)'
  id: totrans-3242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3918](https://www.sqlalchemy.org/trac/ticket/3918)
- en: orm
  id: totrans-3243
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-3244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: An [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")
    construct can now be passed to the `Query.select_entity_from()` method. Entities
    will be pulled from the selectable represented by the [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") construct. This allows special options for [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") such as [`aliased.adapt_on_names`](../orm/queryguide/api.html#sqlalchemy.orm.aliased.params.adapt_on_names
    "sqlalchemy.orm.aliased") to be used in conjunction with `Query.select_entity_from()`.
  id: totrans-3245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")
    构造现在可以传递给 `Query.select_entity_from()` 方法。实体将从由 [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") 构造表示的可选择项中提取。这允许与 `Query.select_entity_from()` 结合使用
    [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")
    的特殊选项，例如 [`aliased.adapt_on_names`](../orm/queryguide/api.html#sqlalchemy.orm.aliased.params.adapt_on_names
    "sqlalchemy.orm.aliased")。'
- en: 'This change is also **backported** to: 1.1.7'
  id: totrans-3246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也 **回溯** 到：1.1.7
- en: 'References: [#3933](https://www.sqlalchemy.org/trac/ticket/3933)'
  id: totrans-3247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3933](https://www.sqlalchemy.org/trac/ticket/3933)
- en: '**[orm] [feature]**'
  id: totrans-3248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Added `.autocommit` attribute to [`scoped_session`](../orm/contextual.html#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session"), proxying the `.autocommit` attribute of the
    underling [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    currently assigned to the thread. Pull request courtesy Ben Fagin.
  id: totrans-3249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向[`scoped_session`](../orm/contextual.html#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")添加了`.autocommit`属性，代理当前分配给线程的底层[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")的`.autocommit`属性。感谢Ben Fagin的Pull请求。
- en: '**[orm] [feature]**'
  id: totrans-3250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added a new feature [`with_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.with_expression
    "sqlalchemy.orm.with_expression") that allows an ad-hoc SQL expression to be added
    to a specific entity in a query at result time. This is an alternative to the
    SQL expression being delivered as a separate element in the result tuple.
  id: totrans-3251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新功能[`with_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.with_expression
    "sqlalchemy.orm.with_expression")，允许在查询结果时向特定实体添加一个临时SQL表达式。这是将SQL表达式作为结果元组中的单独元素传递的替代方法。
- en: See also
  id: totrans-3252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[ORM attributes that can receive ad-hoc SQL expressions](migration_12.html#change-3058)'
  id: totrans-3253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[可以接收临时SQL表达式的ORM属性](migration_12.html#change-3058)'
- en: 'References: [#3058](https://www.sqlalchemy.org/trac/ticket/3058)'
  id: totrans-3254
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3058](https://www.sqlalchemy.org/trac/ticket/3058)
- en: '**[orm] [feature]**'
  id: totrans-3255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added a new style of mapper-level inheritance loading “polymorphic selectin”.
    This style of loading emits queries for each subclass in an inheritance hierarchy
    subsequent to the load of the base object type, using IN to specify the desired
    primary key values.
  id: totrans-3256
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一种新的映射器级继承加载方式“多态selectin”。这种加载方式在加载基本对象类型后，为继承��次结构中的每个子类发出查询，使用IN指定所需的主键值。
- en: See also
  id: totrans-3257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[“selectin” polymorphic loading, loads subclasses using separate IN queries](migration_12.html#change-3948)'
  id: totrans-3258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[“selectin”多态加载，使用单独的IN查询加载子类](migration_12.html#change-3948)'
- en: 'References: [#3948](https://www.sqlalchemy.org/trac/ticket/3948)'
  id: totrans-3259
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3948](https://www.sqlalchemy.org/trac/ticket/3948)
- en: '**[orm] [feature]**'
  id: totrans-3260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added a new kind of eager loading called “selectin” loading. This style of loading
    is very similar to “subquery” eager loading, except that it uses an IN expression
    given a list of primary key values from the loaded parent objects, rather than
    re-stating the original query. This produces a more efficient query that is “baked”
    (e.g. the SQL string is cached) and also works in the context of [`Query.yield_per()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.yield_per
    "sqlalchemy.orm.Query.yield_per").
  id: totrans-3261
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一种新的急切加载方式，称为“selectin”加载。这种加载方式与“subquery”急切加载非常相似，只是它使用了一个IN表达式，给出了加载的父对象的主键值列表，而不是重新声明原始查询。这产生了一个更有效的查询，是“烘焙”（例如，SQL字符串被缓存），并且也适用于[`Query.yield_per()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.yield_per
    "sqlalchemy.orm.Query.yield_per")的上下文。
- en: See also
  id: totrans-3262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New “selectin” eager loading, loads all collections at once using IN](migration_12.html#change-3944)'
  id: totrans-3263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[新的“selectin”急切加载，使用IN一次加载所有集合](migration_12.html#change-3944)'
- en: 'References: [#3944](https://www.sqlalchemy.org/trac/ticket/3944)'
  id: totrans-3264
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3944](https://www.sqlalchemy.org/trac/ticket/3944)
- en: '**[orm] [feature]**'
  id: totrans-3265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: The `lazy="select"` loader strategy now makes used of the [`BakedQuery`](../orm/extensions/baked.html#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery") query caching system in all cases. This removes
    most overhead of generating a [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object and running it into a [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") and then string SQL statement from the process
    of lazy-loading related collections and objects. The “baked” lazy loader has also
    been improved such that it can now cache in most cases where query load options
    are used.
  id: totrans-3266
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`lazy="select"`加载策略现在在所有情况下都使用[`BakedQuery`](../orm/extensions/baked.html#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery")查询缓存系统。这消除了生成[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象并将其运行到[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")和然后从懒加载相关集合和对象的过程中生成字符串SQL语句的大部分开销。 “烘焙”懒加载器也已经改进，以便在大多数情况下可以缓存查询加载选项的情况。'
- en: See also
  id: totrans-3267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[“Baked” loading now the default for lazy loads](migration_12.html#change-3954)'
  id: totrans-3268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[“烘焙”加载现在是延迟加载的默认设置](migration_12.html#change-3954)'
- en: 'References: [#3954](https://www.sqlalchemy.org/trac/ticket/3954)'
  id: totrans-3269
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3954](https://www.sqlalchemy.org/trac/ticket/3954)
- en: '**[orm] [feature] [ext]**'
  id: totrans-3270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature] [ext]**'
- en: The [`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update") method can now accommodate both hybrid attributes
    as well as composite attributes as a source of the key to be placed in the SET
    clause. For hybrids, an additional decorator [`hybrid_property.update_expression()`](../orm/extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_property.update_expression
    "sqlalchemy.ext.hybrid.hybrid_property.update_expression") is supplied for which
    the user supplies a tuple-returning function.
  id: totrans-3271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update")方法现在可以同时处理混合属性和复合属性作为放置在SET子句中的键的来源。对于混合属性，还提供了额外的装饰器[`hybrid_property.update_expression()`](../orm/extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_property.update_expression
    "sqlalchemy.ext.hybrid.hybrid_property.update_expression")，用户提供一个返回元组的函数。'
- en: See also
  id: totrans-3272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Support for bulk updates of hybrids, composites](migration_12.html#change-3229)'
  id: totrans-3273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[支持混合、复合类型的批量更新](migration_12.html#change-3229)'
- en: 'References: [#3229](https://www.sqlalchemy.org/trac/ticket/3229)'
  id: totrans-3274
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3229](https://www.sqlalchemy.org/trac/ticket/3229)
- en: '**[orm] [feature]**'
  id: totrans-3275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new attribute event [`AttributeEvents.bulk_replace()`](../orm/events.html#sqlalchemy.orm.AttributeEvents.bulk_replace
    "sqlalchemy.orm.AttributeEvents.bulk_replace"). This event is triggered when a
    collection is assigned to a relationship, before the incoming collection is compared
    with the existing one. This early event allows for conversion of incoming non-ORM
    objects as well. The event is integrated with the `@validates` decorator.
  id: totrans-3276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的属性事件[`AttributeEvents.bulk_replace()`](../orm/events.html#sqlalchemy.orm.AttributeEvents.bulk_replace
    "sqlalchemy.orm.AttributeEvents.bulk_replace")。当将集合分配给关系时，触发此事件，在比较传入集合与现有集合之前触发。此早期事件还允许转换传入的非ORM对象。该事件与`@validates`装饰器集成。
- en: See also
  id: totrans-3277
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New bulk_replace event](migration_12.html#change-3896-event)'
  id: totrans-3278
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[新的bulk_replace事件](migration_12.html#change-3896-event)'
- en: 'References: [#3896](https://www.sqlalchemy.org/trac/ticket/3896)'
  id: totrans-3279
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3896](https://www.sqlalchemy.org/trac/ticket/3896)
- en: '**[orm] [feature]**'
  id: totrans-3280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new event handler [`AttributeEvents.modified()`](../orm/events.html#sqlalchemy.orm.AttributeEvents.modified
    "sqlalchemy.orm.AttributeEvents.modified") which is triggered when the func:.attributes.flag_modified
    function is invoked, which is common when using the [`sqlalchemy.ext.mutable`](../orm/extensions/mutable.html#module-sqlalchemy.ext.mutable
    "sqlalchemy.ext.mutable") extension module.
  id: totrans-3281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的事件处理程序[`AttributeEvents.modified()`](../orm/events.html#sqlalchemy.orm.AttributeEvents.modified
    "sqlalchemy.orm.AttributeEvents.modified")，当调用`func:.attributes.flag_modified`函数时触发，使用[`sqlalchemy.ext.mutable`](../orm/extensions/mutable.html#module-sqlalchemy.ext.mutable
    "sqlalchemy.ext.mutable")扩展模块时通常会触发。
- en: See also
  id: totrans-3282
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New “modified” event handler for sqlalchemy.ext.mutable](migration_12.html#change-3303)'
  id: totrans-3283
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[sqlalchemy.ext.mutable的新“modified”事件处理程序](migration_12.html#change-3303)'
- en: 'References: [#3303](https://www.sqlalchemy.org/trac/ticket/3303)'
  id: totrans-3284
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3303](https://www.sqlalchemy.org/trac/ticket/3303)
- en: '**[orm] [bug]**'
  id: totrans-3285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue with subquery eagerloading which continues on from the series of
    issues fixed in [#2699](https://www.sqlalchemy.org/trac/ticket/2699), [#3106](https://www.sqlalchemy.org/trac/ticket/3106),
    [#3893](https://www.sqlalchemy.org/trac/ticket/3893) involving that the “subquery”
    contains the correct FROM clause when beginning from a joined inheritance subclass
    and then subquery eager loading onto a relationship from the base class, while
    the query also includes criteria against the subclass. The fix in the previous
    tickets did not accommodate for additional subqueryload operations loading more
    deeply from the first level, so the fix has been further generalized.
  id: totrans-3286
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了子查询急加载的问题，该问题继续于[#2699](https://www.sqlalchemy.org/trac/ticket/2699)、[#3106](https://www.sqlalchemy.org/trac/ticket/3106)、[#3893](https://www.sqlalchemy.org/trac/ticket/3893)修复的系列问题中，涉及“子查询”包含正确的FROM子句，当从连接的继承子类开始，然后从基类的关系上进行子查询急加载，并且查询还包括对子类的条件。之前票据中的修复未适应从第一级更深层次加载更多的子查询操作，因此修复已进一步概括。
- en: 'This change is also **backported** to: 1.1.11'
  id: totrans-3287
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**被移植**到：1.1.11
- en: 'References: [#4011](https://www.sqlalchemy.org/trac/ticket/4011)'
  id: totrans-3288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4011](https://www.sqlalchemy.org/trac/ticket/4011)
- en: '**[orm] [bug]**'
  id: totrans-3289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where a cascade such as “delete-orphan” (but others as well) would
    fail to locate an object linked to a relationship that itself is local to a subclass
    in an inheritance relationship, thus causing the operation to not take place.
  id: totrans-3290
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了级联操作（例如“delete-orphan”等）无法定位到链接到继承关系中的子类的关系的对象的错误，从而导致操作未执行的错误。
- en: 'This change is also **backported** to: 1.1.10'
  id: totrans-3291
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**被移植**到：1.1.10
- en: 'References: [#3986](https://www.sqlalchemy.org/trac/ticket/3986)'
  id: totrans-3292
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#3986](https://www.sqlalchemy.org/trac/ticket/3986)
- en: '**[orm] [bug]**'
  id: totrans-3293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a race condition which could occur under threaded environments as a result
    of the caching added via [#3915](https://www.sqlalchemy.org/trac/ticket/3915).
    An internal collection of `Column` objects could be regenerated on an alias object
    inappropriately, confusing a joined eager loader when it attempts to render SQL
    and collect results and resulting in an attribute error. The collection is now
    generated up front before the alias object is cached and shared among threads.
  id: totrans-3294
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在由 [#3915](https://www.sqlalchemy.org/trac/ticket/3915) 添加的缓存造成的线程环境下可能发生的竞态条件。一个内部的
    `Column` 对象集合可能会在错误的时候在别名对象上重新生成，当尝试渲染 SQL 并收集结果时，会混淆连接的 eager loader，从而导致属性错误。现在，在别名对象被缓存和在线程之间共享之前，该集合现在会被提前生成。
- en: 'This change is also **backported** to: 1.1.7'
  id: totrans-3295
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**到：1.1.7
- en: 'References: [#3947](https://www.sqlalchemy.org/trac/ticket/3947)'
  id: totrans-3296
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#3947](https://www.sqlalchemy.org/trac/ticket/3947)
- en: '**[orm] [bug]**'
  id: totrans-3297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: An UPDATE emitted as a result of the [`relationship.post_update`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.post_update
    "sqlalchemy.orm.relationship") feature will now integrate with the versioning
    feature to both bump the version id of the row as well as assert that the existing
    version number was matched.
  id: totrans-3298
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为 [`relationship.post_update`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.post_update
    "sqlalchemy.orm.relationship") 功能的结果发出的 UPDATE 现在将与版本控制功能集成，既会提升行的版本号，也会断言现有版本号已匹配。
- en: See also
  id: totrans-3299
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另见
- en: '[post_update integrates with ORM versioning](migration_12.html#change-3496)'
  id: totrans-3300
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[post_update 与 ORM 版本控制集成](migration_12.html#change-3496)'
- en: 'References: [#3496](https://www.sqlalchemy.org/trac/ticket/3496)'
  id: totrans-3301
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#3496](https://www.sqlalchemy.org/trac/ticket/3496)
- en: '**[orm] [bug]**'
  id: totrans-3302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Repaired several use cases involving the [`relationship.post_update`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.post_update
    "sqlalchemy.orm.relationship") feature when used in conjunction with a column
    that has an “onupdate” value. When the UPDATE emits, the corresponding object
    attribute is now expired or refreshed so that the newly generated “onupdate” value
    can populate on the object; previously the stale value would remain. Additionally,
    if the target attribute is set in Python for the INSERT of the object, the value
    is now re-sent during the UPDATE so that the “onupdate” does not overwrite it
    (note this works just as well for server-generated onupdates). Finally, the `SessionEvents.refresh_flush()`
    event is now emitted for these attributes when refreshed within the flush.
  id: totrans-3303
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了几个用例，涉及 [`relationship.post_update`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.post_update
    "sqlalchemy.orm.relationship") 功能与具有“onupdate”值的列结合使用时。当 UPDATE 发出时，相应的对象属性现在将被过期或刷新，以便新生成的“onupdate”值可以填充到对象中；以前，旧值将保留。此外，如果在对象的
    INSERT 中设置了目标属性，则在 UPDATE 期间现在会重新发送该值，以便“onupdate”不会覆盖它（请注意，这对于服务器生成的 onupdates
    也同样有效）。最后，在刷新期间刷新这些属性时，现在会触发 `SessionEvents.refresh_flush()` 事件。
- en: See also
  id: totrans-3304
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另见
- en: '[Refinements to post_update in conjunction with onupdate](migration_12.html#change-3471)'
  id: totrans-3305
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[与 onupdate 结合使用的 post_update 的细化](migration_12.html#change-3471)'
- en: 'References: [#3471](https://www.sqlalchemy.org/trac/ticket/3471), [#3472](https://www.sqlalchemy.org/trac/ticket/3472)'
  id: totrans-3306
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#3471](https://www.sqlalchemy.org/trac/ticket/3471)，[#3472](https://www.sqlalchemy.org/trac/ticket/3472)
- en: '**[orm] [bug]**'
  id: totrans-3307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where programmatic version_id counter in conjunction with joined table
    inheritance would fail if the version_id counter were not actually incremented
    and no other values on the base table were modified, as the UPDATE would have
    an empty SET clause. Since programmatic version_id where version counter is not
    incremented is a documented use case, this specific condition is now detected
    and the UPDATE now sets the version_id value to itself, so that concurrency checks
    still take place.
  id: totrans-3308
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，在程序化版本_id 计数器与联合表继承结合使用时，如果版本_id 计数器实际上未递增且未修改基表上的任何其他值，则会失败，因为 UPDATE
    将具有一个空的 SET 子句。由于程序化版本_id 的版本计数器未递增是一个记录的用例，因此现在会检测到此特定条件，并且 UPDATE 现在将版本_id 值设置为自身，以便仍然进行并发检查。
- en: 'References: [#3996](https://www.sqlalchemy.org/trac/ticket/3996)'
  id: totrans-3309
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#3996](https://www.sqlalchemy.org/trac/ticket/3996)
- en: '**[orm] [bug]**'
  id: totrans-3310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The versioning feature does not support NULL for the version counter. An exception
    is now raised if the version id is programmatic and was set to NULL for an UPDATE.
    Pull request courtesy Diana Clarke.
  id: totrans-3311
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本功能不支持版本计数器为NULL。如果版本id是程序化的，并且在UPDATE时设置为NULL，则现在会引发异常。感谢Diana Clarke的Pull请求。
- en: 'References: [#3673](https://www.sqlalchemy.org/trac/ticket/3673)'
  id: totrans-3312
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3673](https://www.sqlalchemy.org/trac/ticket/3673)
- en: '**[orm] [bug]**'
  id: totrans-3313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Removed a very old keyword argument from [`scoped_session`](../orm/contextual.html#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session") called `scope`. This keyword was never documented
    and was an early attempt at allowing for variable scopes.
  id: totrans-3314
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从[`scoped_session`](../orm/contextual.html#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")中移除了一个非常古老的关键字参数`scope`。这个关键字从未被记录在文档中，是早期允许变量作用域的尝试。
- en: See also
  id: totrans-3315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[“scope” keyword removed from scoped_session](migration_12.html#change-3796)'
  id: totrans-3316
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[从scoped_session中移除“scope”关键字](migration_12.html#change-3796)'
- en: 'References: [#3796](https://www.sqlalchemy.org/trac/ticket/3796)'
  id: totrans-3317
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3796](https://www.sqlalchemy.org/trac/ticket/3796)
- en: '**[orm] [bug]**'
  id: totrans-3318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where combining a “with_polymorphic” load in conjunction with subclass-linked
    relationships that specify joinedload with innerjoin=True, would fail to demote
    those “innerjoins” to “outerjoins” to suit the other polymorphic classes that
    don’t support that relationship. This applies to both a single and a joined inheritance
    polymorphic load.
  id: totrans-3319
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即在与指定了innerjoin=True的subclass-linked关系一起组合“with_polymorphic”加载时，会失败将这些“innerjoins”降级为“outerjoins”以适应不支持该关系的其他多态类。这适用于单个和连接继承多态加载。
- en: 'References: [#3988](https://www.sqlalchemy.org/trac/ticket/3988)'
  id: totrans-3320
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3988](https://www.sqlalchemy.org/trac/ticket/3988)
- en: '**[orm] [bug]**'
  id: totrans-3321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Added new argument `with_for_update` to the [`Session.refresh()`](../orm/session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") method. When the `Query.with_lockmode()` method
    were deprecated in favor of [`Query.with_for_update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.with_for_update
    "sqlalchemy.orm.Query.with_for_update"), the [`Session.refresh()`](../orm/session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") method was never updated to reflect the new
    option.
  id: totrans-3322
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为[`Session.refresh()`](../orm/session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh")方法添加了新参数`with_for_update`。当`Query.with_lockmode()`方法被弃用，改用[`Query.with_for_update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.with_for_update
    "sqlalchemy.orm.Query.with_for_update")时，[`Session.refresh()`](../orm/session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh")方法从未更新以反映新选项。
- en: See also
  id: totrans-3323
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[Added “for update” arguments to Session.refresh](migration_12.html#change-3991)'
  id: totrans-3324
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[为Session.refresh添加“for update”参数](migration_12.html#change-3991)'
- en: 'References: [#3991](https://www.sqlalchemy.org/trac/ticket/3991)'
  id: totrans-3325
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3991](https://www.sqlalchemy.org/trac/ticket/3991)
- en: '**[orm] [bug]**'
  id: totrans-3326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where a [`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property") that is also marked as “deferred” would be marked
    as “expired” during a flush, causing it to be loaded along with the unexpiry of
    regular attributes even though this attribute was never accessed.
  id: totrans-3327
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即[`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property")同时标记为“deferred”时，在刷新期间会被标记为“expired”，导致它与常规属性一起加载，即使从未访问过该属性。
- en: 'References: [#3984](https://www.sqlalchemy.org/trac/ticket/3984)'
  id: totrans-3328
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3984](https://www.sqlalchemy.org/trac/ticket/3984)
- en: '**[orm] [bug]**'
  id: totrans-3329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in subquery eager loading where the “join_depth” parameter for self-referential
    relationships would not be correctly honored, loading all available levels deep
    rather than correctly counting the specified number of levels for eager loading.
  id: totrans-3330
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了子查询急加载中的一个bug，即对于自引用关系，“join_depth”参数不会被正确遵守，会加载所有可用的深度，而不是正确计算急加载的指定级别数。
- en: 'References: [#3967](https://www.sqlalchemy.org/trac/ticket/3967)'
  id: totrans-3331
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3967](https://www.sqlalchemy.org/trac/ticket/3967)
- en: '**[orm] [bug]**'
  id: totrans-3332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Added warnings to the LRU “compiled cache” used by the [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") (and ultimately will be for other ORM-based LRU caches)
    such that when the cache starts hitting its size limits, the application will
    emit a warning that this is a performance-degrading situation that may require
    attention. The LRU caches can reach their size limits primarily if an application
    is making use of an unbounded number of [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") objects, which is an antipattern. Otherwise, this
    may suggest an issue that should be brought to the SQLAlchemy developer’s attention.
  id: totrans-3333
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已向[`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")（最终也将用于其他基于ORM的LRU缓存）的LRU“编译缓存”添加了警告，以便当缓存开始达到其大小限制时，应用程序会发出警告，指出这是一种可能需要关注的降低性能的情况。如果应用程序正在使用无限数量的[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")对象，则LRU缓存主要可以达到其大小限制，这是一种反模式。否则，这可能表明存在应该引起SQLAlchemy开发人员注意的问题。
- en: '**[orm] [bug]**'
  id: totrans-3334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug to improve upon the specificity of loader options that take effect
    subsequent to the lazy load of a related entity, so that the loader options will
    match to an aliased or non-aliased entity more specifically if those options include
    entity information.
  id: totrans-3335
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了bug，以改善对在延迟加载相关实体后生效的加载器选项的特异性，以便如果这些选项包括实体信息，则加载器选项将更具体地匹配到别名或非别名实体。
- en: 'References: [#3963](https://www.sqlalchemy.org/trac/ticket/3963)'
  id: totrans-3336
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3963](https://www.sqlalchemy.org/trac/ticket/3963)
- en: '**[orm] [bug]**'
  id: totrans-3337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The [`flag_modified()`](../orm/session_api.html#sqlalchemy.orm.attributes.flag_modified
    "sqlalchemy.orm.attributes.flag_modified") function now raises [`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError") if the named attribute key is not present
    within the object, as this is assumed to be present in the flush process. To mark
    an object “dirty” for a flush without referring to any specific attribute, the
    [`flag_dirty()`](../orm/session_api.html#sqlalchemy.orm.attributes.flag_dirty
    "sqlalchemy.orm.attributes.flag_dirty") function may be used.
  id: totrans-3338
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 函数[`flag_modified()`](../orm/session_api.html#sqlalchemy.orm.attributes.flag_modified
    "sqlalchemy.orm.attributes.flag_modified")现在如果对象中不存在指定的属性键，则会引发[`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError")异常，因为在刷新过程中假定该键已存在。要在不引用任何特定属性的情况下标记对象为“脏”以进行刷新，可以使用函数[`flag_dirty()`](../orm/session_api.html#sqlalchemy.orm.attributes.flag_dirty
    "sqlalchemy.orm.attributes.flag_dirty")。
- en: See also
  id: totrans-3339
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参见
- en: '[Use flag_dirty() to mark an object as “dirty” without any attribute changing](migration_12.html#change-3753)'
  id: totrans-3340
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[使用flag_dirty()将对象标记为“脏”而不更改任何属性](migration_12.html#change-3753)'
- en: 'References: [#3753](https://www.sqlalchemy.org/trac/ticket/3753)'
  id: totrans-3341
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3753](https://www.sqlalchemy.org/trac/ticket/3753)
- en: '**[orm] [bug]**'
  id: totrans-3342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The “evaluate” strategy used by [`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update") and [`Query.delete()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.delete
    "sqlalchemy.orm.Query.delete") can now accommodate a simple object comparison
    from a many-to-one relationship to an instance, when the attribute names of the
    primary key / foreign key columns don’t match the actual names of the columns.
    Previously this would do a simple name-based match and fail with an AttributeError.
  id: totrans-3343
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由[`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update")和[`Query.delete()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.delete
    "sqlalchemy.orm.Query.delete")使用的“评估”策略现在可以容纳从多对一关系到实例的简单对象比较，当主键/外键列的属性名称与列的实际名称不匹配时。以前，这将进行简单的基于名称的匹配，并在AttributeError时失败。
- en: 'References: [#3366](https://www.sqlalchemy.org/trac/ticket/3366)'
  id: totrans-3344
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3366](https://www.sqlalchemy.org/trac/ticket/3366)
- en: '**[orm] [bug]**'
  id: totrans-3345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The `@validates` decorator now allows the decorated method to receive objects
    from a “bulk collection set” operation that have not yet been compared to the
    existing collection. This allows incoming values to be converted to compatible
    ORM objects as is already allowed from an “append” event. Note that this means
    that the `@validates` method is called for **all** values during a collection
    assignment, rather than just the ones that are new.
  id: totrans-3346
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`@validates`装饰器现在允许装饰的方法接收来自“批量集合设置”操作的对象，这些对象尚未与现有集合进行比较。这允许将传入的值转换为兼容的ORM对象，就像从“追加”事件中已经允许的那样。请注意，这意味着在集合分配期间，将调用**所有**值的`@validates`方法，而不仅仅是新的值。'
- en: See also
  id: totrans-3347
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参见
- en: '[A @validates method receives all values on bulk-collection set before comparison](migration_12.html#change-3896-validates)'
  id: totrans-3348
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[在比较之前，@validates 方法会在批量集合设置时接收所有值](migration_12.html#change-3896-validates)'
- en: 'References: [#3896](https://www.sqlalchemy.org/trac/ticket/3896)'
  id: totrans-3349
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3896](https://www.sqlalchemy.org/trac/ticket/3896)
- en: '**[orm] [bug]**'
  id: totrans-3350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in single-table inheritance where the select_from() argument would
    not be taken into account when limiting rows to a subclass. Previously, only expressions
    in the columns requested would be taken into account.
  id: totrans-3351
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了单表继承中的 bug，当限制行到子类时，`select_from()` 参数将不会被考虑。以前，只有请求的列中的表达式会被考虑。
- en: See also
  id: totrans-3352
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[Fixed issue involving single-table inheritance with select_from()](migration_12.html#change-3891)'
  id: totrans-3353
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[修复了与 select_from() 一起使用的单表继承问题](migration_12.html#change-3891)'
- en: 'References: [#3891](https://www.sqlalchemy.org/trac/ticket/3891)'
  id: totrans-3354
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3891](https://www.sqlalchemy.org/trac/ticket/3891)
- en: '**[orm] [bug]**'
  id: totrans-3355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: When assigning a collection to an attribute mapped by a relationship, the previous
    collection is no longer mutated. Previously, the old collection would be emptied
    out in conjunction with the “item remove” events that fire off; the events now
    fire off without affecting the old collection.
  id: totrans-3356
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当将集合分配给由关系映射的属性时，以前的集合不再发生变化。以前，旧集合会随着“项删除”事件的触发而清空；现在事件会在不影响旧集合的情况下触发。
- en: See also
  id: totrans-3357
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[Previous collection is no longer mutated upon replacement](migration_12.html#change-3913)'
  id: totrans-3358
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[替换时以前的集合不再发生变化](migration_12.html#change-3913)'
- en: 'References: [#3913](https://www.sqlalchemy.org/trac/ticket/3913)'
  id: totrans-3359
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3913](https://www.sqlalchemy.org/trac/ticket/3913)
- en: '**[orm] [bug]**'
  id: totrans-3360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The state of the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is now present when the [`SessionEvents.after_rollback()`](../orm/events.html#sqlalchemy.orm.SessionEvents.after_rollback
    "sqlalchemy.orm.SessionEvents.after_rollback") event is emitted, that is, the
    attribute state of objects prior to their being expired. This is now consistent
    with the behavior of the [`SessionEvents.after_commit()`](../orm/events.html#sqlalchemy.orm.SessionEvents.after_commit
    "sqlalchemy.orm.SessionEvents.after_commit") event which also emits before the
    attribute state of objects is expired.
  id: totrans-3361
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当[`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")的状态在发出[`SessionEvents.after_rollback()`](../orm/events.html#sqlalchemy.orm.SessionEvents.after_rollback
    "sqlalchemy.orm.SessionEvents.after_rollback")事件时现在存在，也就是说，在对象过期之前的属性状态。这与发出[`SessionEvents.after_commit()`](../orm/events.html#sqlalchemy.orm.SessionEvents.after_commit
    "sqlalchemy.orm.SessionEvents.after_commit")事件的行为一致，该事件也会在对象的属性状态过期之前发出。
- en: See also
  id: totrans-3362
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[The after_rollback() Session event now emits before the expiration of objects](migration_12.html#change-3934)'
  id: totrans-3363
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[在对象过期之前，`after_rollback()` 会话事件现在会发出](migration_12.html#change-3934)'
- en: 'References: [#3934](https://www.sqlalchemy.org/trac/ticket/3934)'
  id: totrans-3364
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3934](https://www.sqlalchemy.org/trac/ticket/3934)
- en: '**[orm] [bug]**'
  id: totrans-3365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where [`Query.with_parent()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.with_parent
    "sqlalchemy.orm.Query.with_parent") would not work if the [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") were against an [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") construct rather than a regular mapped class. Also adds
    a new parameter `with_parent.from_entity` to the standalone `with_parent()` function
    as well as [`Query.with_parent()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.with_parent
    "sqlalchemy.orm.Query.with_parent").
  id: totrans-3366
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Query.with_parent()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.with_parent
    "sqlalchemy.orm.Query.with_parent")在[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")针对[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased")构造而不是常规映射类时无法工作的 bug。还为独立的`with_parent()`函数以及[`Query.with_parent()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.with_parent
    "sqlalchemy.orm.Query.with_parent")添加了一个新参数`with_parent.from_entity`。
- en: 'References: [#3607](https://www.sqlalchemy.org/trac/ticket/3607)'
  id: totrans-3367
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3607](https://www.sqlalchemy.org/trac/ticket/3607)
- en: orm declarative
  id: totrans-3368
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm 声明
- en: '**[orm] [declarative] [bug]**'
  id: totrans-3369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Fixed bug where using [`declared_attr`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr") on an [`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase") where a particular return value
    were some non-mapped symbol, including `None`, would cause the attribute to hard-evaluate
    just once and store the value to the object dictionary, not allowing it to invoke
    for subclasses. This behavior is normal when [`declared_attr`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr") is on a mapped class, and does not occur on a
    mixin or abstract class. Since [`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase") is both “abstract” and actually
    “mapped”, a special exception case is made here so that the “abstract” behavior
    takes precedence for [`declared_attr`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr").
  id: totrans-3370
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，在 [`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase") 上使用 [`declared_attr`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr")，其中特定的返回值是一些非映射符号，包括 `None`，会导致属性只会硬评估一次并将值存储到对象字典中，不允许它为子类调用。当
    [`declared_attr`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr "sqlalchemy.orm.declared_attr")
    在一个映射类上时，这种行为是正常的，在混合类或抽象类上不会发生。由于 [`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase") 既是“抽象的”又实际上是“映射的”，所以这里特殊地做了一个异常情况，以便“抽象”的行为优先于
    [`declared_attr`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr "sqlalchemy.orm.declared_attr")。
- en: 'References: [#3848](https://www.sqlalchemy.org/trac/ticket/3848)'
  id: totrans-3371
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3848](https://www.sqlalchemy.org/trac/ticket/3848)
- en: engine
  id: totrans-3372
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [feature]**'
  id: totrans-3373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [功能]**'
- en: Added native “pessimistic disconnection” handling to the [`Pool`](../core/pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") object. The new parameter [`Pool.pre_ping`](../core/pooling.html#sqlalchemy.pool.Pool.params.pre_ping
    "sqlalchemy.pool.Pool"), available from the engine as [`create_engine.pool_pre_ping`](../core/engines.html#sqlalchemy.create_engine.params.pool_pre_ping
    "sqlalchemy.create_engine"), applies an efficient form of the “pre-ping” recipe
    featured in the pooling documentation, which upon each connection check out, emits
    a simple statement, typically “SELECT 1”, to test the connection for liveness.
    If the existing connection is no longer able to respond to commands, the connection
    is transparently recycled, and all other connections made prior to the current
    timestamp are invalidated.
  id: totrans-3374
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 [`Pool`](../core/pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    对象添加了本机“悲观断开连接”处理。新参数 [`Pool.pre_ping`](../core/pooling.html#sqlalchemy.pool.Pool.params.pre_ping
    "sqlalchemy.pool.Pool")，可从引擎中作为 [`create_engine.pool_pre_ping`](../core/engines.html#sqlalchemy.create_engine.params.pool_pre_ping
    "sqlalchemy.create_engine") 获得，应用了在连接池文档中特色的“预先 ping”配方的有效形式，每次连接检出时，都会发出一个简单的语句，通常是“SELECT
    1”，以测试连接的活动性。如果现有连接不再能够响应命令，则连接将被透明地回收，并且在当前时间戳之前进行的所有其他连接都将被作废。
- en: See also
  id: totrans-3375
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Disconnect Handling - Pessimistic](../core/pooling.html#pool-disconnects-pessimistic)'
  id: totrans-3376
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[断开连接处理 - 悲观](../core/pooling.html#pool-disconnects-pessimistic)'
- en: '[Pessimistic disconnection detection added to the connection pool](migration_12.html#change-3919)'
  id: totrans-3377
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[对连接池添加了悲观断开连接检测](migration_12.html#change-3919)'
- en: 'References: [#3919](https://www.sqlalchemy.org/trac/ticket/3919)'
  id: totrans-3378
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3919](https://www.sqlalchemy.org/trac/ticket/3919)
- en: '**[engine] [bug]**'
  id: totrans-3379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [bug]**'
- en: Added an exception handler that will warn for the “cause” exception on Py2K
    when the “autorollback” feature of [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") itself raises an exception. In Py3K, the two exceptions
    are naturally reported by the interpreter as one occurring during the handling
    of the other. This is continuing with the series of changes for rollback failure
    handling that were last visited as part of [#2696](https://www.sqlalchemy.org/trac/ticket/2696)
    in 1.0.12.
  id: totrans-3380
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个异常处理程序，当 [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 的“autorollback”功能本身引发异常时，将会警告“原因”异常。在 Py3K 中，两个异常自然由解释器报告为一个在处理另一个时发生。这是继续上次在
    1.0.12 中访问的回滚失败处理的系列更改的一部分。
- en: 'This change is also **backported** to: 1.1.7'
  id: totrans-3381
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.1.7
- en: 'References: [#3946](https://www.sqlalchemy.org/trac/ticket/3946)'
  id: totrans-3382
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3946](https://www.sqlalchemy.org/trac/ticket/3946)
- en: '**[engine] [bug]**'
  id: totrans-3383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [bug]**'
- en: Fixed bug where in the unusual case of passing a [`Compiled`](../core/internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object directly to [`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute"), the dialect with which the [`Compiled`](../core/internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object were generated was not consulted for the
    paramstyle of the string statement, instead assuming it would match the dialect-level
    paramstyle, causing mismatches to occur.
  id: totrans-3384
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，在罕见情况下，直接将[`Compiled`](../core/internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled")对象传递给[`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")时，生成[`Compiled`](../core/internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled")对象的方言未被咨询以获取字符串语句的paramstyle，而是假设它将匹配方言级别的paramstyle，导致不匹配发生。
- en: 'References: [#3938](https://www.sqlalchemy.org/trac/ticket/3938)'
  id: totrans-3385
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3938](https://www.sqlalchemy.org/trac/ticket/3938)
- en: sql
  id: totrans-3386
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-3387
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added a new kind of [`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") called “expanding”. This is for use in
    `IN` expressions where the list of elements is rendered into individual bound
    parameters at statement execution time, rather than at statement compilation time.
    This allows both a single bound parameter name to be linked to an IN expression
    of multiple elements, as well as allows query caching to be used with IN expressions.
    The new feature allows the related features of “select in” loading and “polymorphic
    in” loading to make use of the baked query extension to reduce call overhead.
    This feature should be considered to be **experimental** for 1.2.
  id: totrans-3388
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一种名为“expanding”的新类型的[`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")。这是用于`IN`表达式中的，其中元素列表在语句执行时被渲染为单独的绑定参数，而不是在语句编译时。这允许将单个绑定参数名称链接到多个元素的IN表达式，同时也允许在IN表达式中使用查询缓存。这一新功能允许“select
    in”加载和“polymorphic in”加载相关功能利用烘焙查询扩展以减少调用开销。这一功能应被视为**实验性**的1.2版本。
- en: See also
  id: totrans-3389
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Late-expanded IN parameter sets allow IN expressions with cached statements](migration_12.html#change-3953)'
  id: totrans-3390
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[延迟扩展的IN参数集允许具有缓存语句的IN表达式](migration_12.html#change-3953)'
- en: 'References: [#3953](https://www.sqlalchemy.org/trac/ticket/3953)'
  id: totrans-3391
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3953](https://www.sqlalchemy.org/trac/ticket/3953)
- en: '**[sql] [feature] [mysql] [oracle] [postgresql]**'
  id: totrans-3392
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature] [mysql] [oracle] [postgresql]**'
- en: Added support for SQL comments on [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") and [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects, via the new [`Table.comment`](../core/metadata.html#sqlalchemy.schema.Table.params.comment
    "sqlalchemy.schema.Table") and [`Column.comment`](../core/metadata.html#sqlalchemy.schema.Column.params.comment
    "sqlalchemy.schema.Column") arguments. The comments are included as part of DDL
    on table creation, either inline or via an appropriate ALTER statement, and are
    also reflected back within table reflection, as well as via the [`Inspector`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector"). Supported backends currently include
    MySQL, PostgreSQL, and Oracle. Many thanks to Frazer McLean for a large amount
    of effort on this.
  id: totrans-3393
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")和[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象上的SQL注释的支持，通过新的[`Table.comment`](../core/metadata.html#sqlalchemy.schema.Table.params.comment
    "sqlalchemy.schema.Table")和[`Column.comment`](../core/metadata.html#sqlalchemy.schema.Column.params.comment
    "sqlalchemy.schema.Column")参数。这些注释包含在表创建的DDL中，可以是内联的，也可以通过适当的ALTER语句，同时也会在表反射中反映回来，以及通过[`Inspector`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector")。当前支持的后端包括MySQL、PostgreSQL和Oracle。非常感谢Frazer
    McLean在这方面的大量努力。
- en: See also
  id: totrans-3394
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Support for SQL Comments on Table, Column, includes DDL, reflection](migration_12.html#change-1546)'
  id: totrans-3395
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[支持在表、列上添加SQL注释，包括DDL、反射](migration_12.html#change-1546)'
- en: 'References: [#1546](https://www.sqlalchemy.org/trac/ticket/1546)'
  id: totrans-3396
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1546](https://www.sqlalchemy.org/trac/ticket/1546)
- en: '**[sql] [feature]**'
  id: totrans-3397
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: The longstanding behavior of the [`ColumnOperators.in_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") and [`ColumnOperators.notin_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notin_
    "sqlalchemy.sql.expression.ColumnOperators.notin_") operators emitting a warning
    when the right-hand condition is an empty sequence has been revised; a simple
    “static” expression of “1 != 1” or “1 = 1” is now rendered by default, rather
    than pulling in the original left-hand expression. This causes the result for
    a NULL column comparison against an empty set to change from NULL to true/false.
    The behavior is configurable, and the old behavior can be enabled using the [`create_engine.empty_in_strategy`](../core/engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine") parameter to [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine").
  id: totrans-3398
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当右侧条件为空序列时，[`ColumnOperators.in_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")和[`ColumnOperators.notin_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notin_
    "sqlalchemy.sql.expression.ColumnOperators.notin_")操作符发出警告的长期行为已经修订；现在默认情况下会呈现一个简单的“静态”表达式“1
    != 1”或“1 = 1”，而不是引入原始的左侧表达式。这导致对空集合进行NULL列比较的结果从NULL更改为true/false。该行为是可配置的，并且可以使用[`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")的[`create_engine.empty_in_strategy`](../core/engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine")参数启用旧行为。
- en: See also
  id: totrans-3399
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[The IN / NOT IN operator’s empty collection behavior is now configurable;
    default expression simplified](migration_12.html#change-3907)'
  id: totrans-3400
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[IN / NOT IN运算符的空集合行为现在是可配置的；默认表达式简化](migration_12.html#change-3907)'
- en: 'References: [#3907](https://www.sqlalchemy.org/trac/ticket/3907)'
  id: totrans-3401
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3907](https://www.sqlalchemy.org/trac/ticket/3907)
- en: '**[sql] [feature]**'
  id: totrans-3402
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added a new option `autoescape` to the “startswith” and “endswith” classes of
    comparators; this supplies an escape character also applies it to all occurrences
    of the wildcard characters “%” and “_” automatically. Pull request courtesy Diana
    Clarke.
  id: totrans-3403
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为“startswith”和“endswith”比较器的类添加了一个新选项`autoescape`；这提供了一个转义字符，同时自动应用于所有通配符字符“%”和“_”的所有出现。感谢戴安娜·克拉克的拉取请求。
- en: Note
  id: totrans-3404
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: This feature has been changed as of 1.2.0 from its initial implementation in
    1.2.0b2 such that autoescape is now passed as a boolean value, rather than a specific
    character to use as the escape character.
  id: totrans-3405
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该功能已从其在1.2.0b2中的初始实现中更改为1.2.0，使得autoescape现在作为布尔值传递，而不是作为要用作转义字符的特定字符。
- en: See also
  id: totrans-3406
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[New “autoescape” option for startswith(), endswith()](migration_12.html#change-2694)'
  id: totrans-3407
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[新的“autoescape”选项用于startswith()，endswith()](migration_12.html#change-2694)'
- en: 'References: [#2694](https://www.sqlalchemy.org/trac/ticket/2694)'
  id: totrans-3408
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2694](https://www.sqlalchemy.org/trac/ticket/2694)
- en: '**[sql] [bug]**'
  id: totrans-3409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed AttributeError which would occur in [`WithinGroup`](../core/sqlelement.html#sqlalchemy.sql.expression.WithinGroup
    "sqlalchemy.sql.expression.WithinGroup") construct during an iteration of the
    structure.
  id: totrans-3410
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在[`WithinGroup`](../core/sqlelement.html#sqlalchemy.sql.expression.WithinGroup
    "sqlalchemy.sql.expression.WithinGroup")结构迭代期间可能发生的AttributeError。
- en: 'This change is also **backported** to: 1.1.11'
  id: totrans-3411
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.1.11
- en: 'References: [#4012](https://www.sqlalchemy.org/trac/ticket/4012)'
  id: totrans-3412
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4012](https://www.sqlalchemy.org/trac/ticket/4012)
- en: '**[sql] [bug]**'
  id: totrans-3413
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed regression released in 1.1.5 due to [#3859](https://www.sqlalchemy.org/trac/ticket/3859)
    where adjustments to the “right-hand-side” evaluation of an expression based on
    [`Variant`](../core/type_api.html#sqlalchemy.types.Variant "sqlalchemy.types.Variant")
    to honor the underlying type’s “right-hand-side” rules caused the [`Variant`](../core/type_api.html#sqlalchemy.types.Variant
    "sqlalchemy.types.Variant") type to be inappropriately lost, in those cases when
    we *do* want the left-hand side type to be transferred directly to the right hand
    side so that bind-level rules can be applied to the expression’s argument.
  id: totrans-3414
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于[#3859](https://www.sqlalchemy.org/trac/ticket/3859)导致的1.1.5中发布的回归已修复，根据[`Variant`](../core/type_api.html#sqlalchemy.types.Variant
    "sqlalchemy.types.Variant")对表达式的“右侧”评估进行调整，以遵守底层类型的“右侧”规则，导致[`Variant`](../core/type_api.html#sqlalchemy.types.Variant
    "sqlalchemy.types.Variant")类型在那些我们*确实*希望左侧类型直接传递到右侧以便将绑定级规则应用于表达式参数的情况下不当地丢失。
- en: 'This change is also **backported** to: 1.1.9'
  id: totrans-3415
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.1.9
- en: 'References: [#3952](https://www.sqlalchemy.org/trac/ticket/3952)'
  id: totrans-3416
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3952](https://www.sqlalchemy.org/trac/ticket/3952)
- en: '**[sql] [bug] [postgresql]**'
  id: totrans-3417
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [postgresql]**'
- en: Changed the mechanics of `ResultProxy` to unconditionally delay the “autoclose”
    step until the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") is done with the object; in the case where PostgreSQL
    ON CONFLICT with RETURNING returns no rows, autoclose was occurring in this previously
    non-existent use case, causing the usual autocommit behavior that occurs unconditionally
    upon INSERT/UPDATE/DELETE to fail.
  id: totrans-3418
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改变了`ResultProxy`的机制，无条件地推迟“autoclose”步骤，直到[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")完成对象处理；在PostgreSQL ON CONFLICT with RETURNING返回零行的情况下，以前不存在的使用情况中，会发生自动关闭，导致在以前不存在的情况下进行的INSERT/UPDATE/DELETE操作的通常自动提交行为失败。
- en: 'This change is also **backported** to: 1.1.9'
  id: totrans-3419
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯到**：1.1.9
- en: 'References: [#3955](https://www.sqlalchemy.org/trac/ticket/3955)'
  id: totrans-3420
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3955](https://www.sqlalchemy.org/trac/ticket/3955)
- en: '**[sql] [bug]**'
  id: totrans-3421
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The rules for type coercion between [`Numeric`](../core/type_basics.html#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric"), [`Integer`](../core/type_basics.html#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer"), and date-related types now include additional logic
    that will attempt to preserve the settings of the incoming type on the “resolved”
    type. Currently the target for this is the `asdecimal` flag, so that a math operation
    between [`Numeric`](../core/type_basics.html#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric")
    or [`Float`](../core/type_basics.html#sqlalchemy.types.Float "sqlalchemy.types.Float")
    and [`Integer`](../core/type_basics.html#sqlalchemy.types.Integer "sqlalchemy.types.Integer")
    will preserve the “asdecimal” flag as well as if the type should be the [`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float") subclass.
  id: totrans-3422
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在关于[`Numeric`](../core/type_basics.html#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric")、[`Integer`](../core/type_basics.html#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer")和与日期相关的类型之间的类型强制转换规则现在包括额外的逻辑，该逻辑将尝试保留“resolved”类型的传入类型的设置。当前，这个目标是`asdecimal`标志，因此，[`Numeric`](../core/type_basics.html#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric")或[`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float")与[`Integer`](../core/type_basics.html#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer")之间的数学运算将保留“asdecimal”标志以及类型是否应该是[`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float")子类。
- en: See also
  id: totrans-3423
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另见
- en: '[Stronger typing added to “float” datatypes](migration_12.html#change-floats-12)'
  id: totrans-3424
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[强化了“浮点数”数据类型的类型强度](migration_12.html#change-floats-12)'
- en: 'References: [#4018](https://www.sqlalchemy.org/trac/ticket/4018)'
  id: totrans-3425
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4018](https://www.sqlalchemy.org/trac/ticket/4018)
- en: '**[sql] [bug] [mysql]**'
  id: totrans-3426
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [mysql]**'
- en: The result processor for the [`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float") type now unconditionally runs values through the `float()`
    processor if the dialect specifies that it also supports “native decimal” mode.
    While most backends will deliver Python `float` objects for a floating point datatype,
    the MySQL backends in some cases lack the typing information in order to provide
    this and return `Decimal` unless the float conversion is done.
  id: totrans-3427
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，[`Float`](../core/type_basics.html#sqlalchemy.types.Float "sqlalchemy.types.Float")类型的结果处理器现在无条件地通过`float()`处理器运行值，如果方言还支持“本地十进制”模式的话。虽然大多数后端会为浮点数据类型提供Python
    `float`对象，但是MySQL后端在某些情况下缺少类型信息以提供此类信息，并且除非进行浮点转换，否则返回`Decimal`。
- en: See also
  id: totrans-3428
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另见
- en: '[Stronger typing added to “float” datatypes](migration_12.html#change-floats-12)'
  id: totrans-3429
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[强化了“浮点数”数据类型的类型强度](migration_12.html#change-floats-12)'
- en: 'References: [#4020](https://www.sqlalchemy.org/trac/ticket/4020)'
  id: totrans-3430
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4020](https://www.sqlalchemy.org/trac/ticket/4020)
- en: '**[sql] [bug]**'
  id: totrans-3431
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Added some extra strictness to the handling of Python “float” values passed
    to SQL statements. A “float” value will be associated with the [`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float") datatype and not the Decimal-coercing [`Numeric`](../core/type_basics.html#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric") datatype as was the case before, eliminating a confusing
    warning emitted on SQLite as well as unnecessary coercion to Decimal.
  id: totrans-3432
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对传递给SQL语句的Python“浮点数”值的处理增加了一些额外的严格性。一个“浮点数”值将与[`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float")数据类型关联，而不是以前的Decimal-coercing [`Numeric`](../core/type_basics.html#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric")数据类型，这消除了SQLite上发出的令人困惑的警告以及不必要的转换为Decimal的情况。
- en: See also
  id: totrans-3433
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另见
- en: '[Stronger typing added to “float” datatypes](migration_12.html#change-floats-12)'
  id: totrans-3434
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[强化了“浮点数”数据类型的类型强度](migration_12.html#change-floats-12)'
- en: 'References: [#4017](https://www.sqlalchemy.org/trac/ticket/4017)'
  id: totrans-3435
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4017](https://www.sqlalchemy.org/trac/ticket/4017)
- en: '**[sql] [bug]**'
  id: totrans-3436
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The operator precedence for all comparison operators such as LIKE, IS, IN, MATCH,
    equals, greater than, less than, etc. has all been merged into one level, so that
    expressions which make use of these against each other will produce parentheses
    between them. This suits the stated operator precedence of databases like Oracle,
    MySQL and others which place all of these operators as equal precedence, as well
    as PostgreSQL as of 9.5 which has also flattened its operator precedence.
  id: totrans-3437
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 所有比较操作符（如LIKE、IS、IN、MATCH、等于、大于、小于等）的运算符优先级已经合并为一个级别，因此使用这些操作符相互比较的表达式将在它们之间产生括号。这适用于像Oracle、MySQL等数据库的声明的运算符优先级，这些数据库将所有这些操作符视为相等优先级，以及PostgreSQL截至9.5版本也已经将其运算符优先级扁平化。
- en: See also
  id: totrans-3438
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Flattened operator precedence for comparison operators](migration_12.html#change-3999)'
  id: totrans-3439
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[比较操作符的扁平化运算符优先级](migration_12.html#change-3999)'
- en: 'References: [#3999](https://www.sqlalchemy.org/trac/ticket/3999)'
  id: totrans-3440
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3999](https://www.sqlalchemy.org/trac/ticket/3999)
- en: '**[sql] [bug]**'
  id: totrans-3441
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Repaired issue where the type of an expression that used [`ColumnOperators.is_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_") or similar would not be a “boolean”
    type, instead the type would be “nulltype”, as well as when using custom comparison
    operators against an untyped expression. This typing can impact how the expression
    behaves in larger contexts as well as in result-row-handling.
  id: totrans-3442
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用[`ColumnOperators.is_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_")或类似操作符的表达式的类型不会是“boolean”类型的问题，而是类型将是“nulltype”，以及当使用自定义比较操作符对未类型化表达式进行比较时。这种类型化可能会影响表达式在更大上下文中以及在结果行处理中的行为。
- en: 'References: [#3873](https://www.sqlalchemy.org/trac/ticket/3873)'
  id: totrans-3443
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3873](https://www.sqlalchemy.org/trac/ticket/3873)
- en: '**[sql] [bug]**'
  id: totrans-3444
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed the negation of a [`Label`](../core/sqlelement.html#sqlalchemy.sql.expression.Label
    "sqlalchemy.sql.expression.Label") construct so that the inner element is negated
    correctly, when the [`not_()`](../core/sqlelement.html#sqlalchemy.sql.expression.not_
    "sqlalchemy.sql.expression.not_") modifier is applied to the labeled expression.
  id: totrans-3445
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了对[`Label`](../core/sqlelement.html#sqlalchemy.sql.expression.Label "sqlalchemy.sql.expression.Label")构造的否定，使得当应用[`not_()`](../core/sqlelement.html#sqlalchemy.sql.expression.not_
    "sqlalchemy.sql.expression.not_")修饰符到标记表达式时，内部元素被正确否定。
- en: 'References: [#3969](https://www.sqlalchemy.org/trac/ticket/3969)'
  id: totrans-3446
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3969](https://www.sqlalchemy.org/trac/ticket/3969)
- en: '**[sql] [bug]**'
  id: totrans-3447
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The system by which percent signs in SQL statements are “doubled” for escaping
    purposes has been refined. The “doubling” of percent signs mostly associated with
    the [`literal_column`](../core/sqlelement.html#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column") construct as well as operators like
    [`ColumnOperators.contains()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains") now occurs based on the
    stated paramstyle of the DBAPI in use; for percent-sensitive paramstyles as are
    common with the PostgreSQL and MySQL drivers the doubling will occur, for others
    like that of SQLite it will not. This allows more database-agnostic use of the
    [`literal_column`](../core/sqlelement.html#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column") construct to be possible.
  id: totrans-3448
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQL语句中百分号“加倍”以进行转义目的的系统已经得到改进。百分号“加倍”主要与[`literal_column`](../core/sqlelement.html#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column")构造以及[`ColumnOperators.contains()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")等操作符相关联，现在根据正在使用的DBAPI的声明的paramstyle进行；对于像PostgreSQL和MySQL驱动程序常见的百分号敏感paramstyles，将会发生加倍，对于SQLite等其他驱动程序则不会。这使得更多与数据库无关的使用[`literal_column`](../core/sqlelement.html#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column")构造成为可能。
- en: See also
  id: totrans-3449
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Percent signs in literal_column() now conditionally escaped](migration_12.html#change-3740)'
  id: totrans-3450
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[在literal_column()中的百分号现在有条件地转义](migration_12.html#change-3740)'
- en: 'References: [#3740](https://www.sqlalchemy.org/trac/ticket/3740)'
  id: totrans-3451
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3740](https://www.sqlalchemy.org/trac/ticket/3740)
- en: '**[sql] [bug]**'
  id: totrans-3452
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where a column-level [`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") would fail to compile the SQL expression
    using the underlying dialect compiler as well as apply proper flags to generate
    literal values as inline, in the case that the sqltext is a Core expression and
    not just a plain string. This was long-ago fixed for table-level check constraints
    in 0.9 as part of [#2742](https://www.sqlalchemy.org/trac/ticket/2742), which
    more commonly feature Core SQL expressions as opposed to plain string expressions.
  id: totrans-3453
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，在列级[`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint")中，如果sqltext是一个Core表达式而不仅仅是一个普通字符串，将无法使用底层方言编译器编译SQL表达式并应用适当的标志以生成内联的字面值。这在0.9版本中已经很久以前修复了表级别的检查约束，作为[#2742](https://www.sqlalchemy.org/trac/ticket/2742)的一部分，更常见的是使用Core
    SQL表达式而不是普通字符串表达式。
- en: 'References: [#3957](https://www.sqlalchemy.org/trac/ticket/3957)'
  id: totrans-3454
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3957](https://www.sqlalchemy.org/trac/ticket/3957)
- en: '**[sql] [bug]**'
  id: totrans-3455
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL] [错误]**'
- en: Fixed bug where a SQL-oriented Python-side column default could fail to be executed
    properly upon INSERT in the “pre-execute” codepath, if the SQL itself were an
    untyped expression, such as plain text. The “pre- execute” codepath is fairly
    uncommon however can apply to non-integer primary key columns with SQL defaults
    when RETURNING is not used.
  id: totrans-3456
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，在“预执行”代码路径中，如果SQL本身是一个未分类的表达式，比如纯文本，那么SQL导向的Python端列默认值可能在INSERT时无法正确执行。然而，“预执行”代码路径相当罕见，但在不使用RETURNING时，可以应用于具有SQL默认值的非整数主键列。
- en: 'References: [#3923](https://www.sqlalchemy.org/trac/ticket/3923)'
  id: totrans-3457
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3923](https://www.sqlalchemy.org/trac/ticket/3923)
- en: '**[sql] [bug]**'
  id: totrans-3458
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL] [错误]**'
- en: The expression used for COLLATE as rendered by the column-level [`collate()`](../core/sqlelement.html#sqlalchemy.sql.expression.collate
    "sqlalchemy.sql.expression.collate") and [`ColumnOperators.collate()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.collate
    "sqlalchemy.sql.expression.ColumnOperators.collate") is now quoted as an identifier
    when the name is case sensitive, e.g. has uppercase characters. Note that this
    does not impact type-level collation, which is already quoted.
  id: totrans-3459
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由列级[`collate()`](../core/sqlelement.html#sqlalchemy.sql.expression.collate "sqlalchemy.sql.expression.collate")和[`ColumnOperators.collate()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.collate
    "sqlalchemy.sql.expression.ColumnOperators.collate")呈现的用于COLLATE的表达式现在在名称区分大小写时被引用为标识符，例如包含大写字符。请注意，这不会影响类型级别的排序，因为它已经被引用。
- en: See also
  id: totrans-3460
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[The column-level COLLATE keyword now quotes the collation name](migration_12.html#change-3785)'
  id: totrans-3461
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[列级别的COLLATE关键字现在引用排序名称](migration_12.html#change-3785)'
- en: 'References: [#3785](https://www.sqlalchemy.org/trac/ticket/3785)'
  id: totrans-3462
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3785](https://www.sqlalchemy.org/trac/ticket/3785)
- en: '**[sql] [bug]**'
  id: totrans-3463
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL] [错误]**'
- en: Fixed bug where the use of an [`Alias`](../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") object in a column context would raise an argument
    error when it tried to group itself into a parenthesized expression. Using [`Alias`](../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") in this way is not yet a fully supported API,
    however it applies to some end-user recipes and may have a more prominent role
    in support of some future PostgreSQL features.
  id: totrans-3464
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，在列上下文中使用[`Alias`](../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias")对象会在尝试将自身分组到括号表达式中时引发参数错误。目前还不是完全支持的API，但这种方式的使用适用于一些最终用户的示例，并且可能在支持一些未来的PostgreSQL功能时发挥更重要的作用。
- en: 'References: [#3939](https://www.sqlalchemy.org/trac/ticket/3939)'
  id: totrans-3465
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3939](https://www.sqlalchemy.org/trac/ticket/3939)
- en: schema
  id: totrans-3466
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: '**[schema] [bug]**'
  id: totrans-3467
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [错误]**'
- en: An [`ArgumentError`](../core/exceptions.html#sqlalchemy.exc.ArgumentError "sqlalchemy.exc.ArgumentError")
    is now raised if a [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") object is created with a mismatched
    number of “local” and “remote” columns, which otherwise causes the internal state
    of the constraint to be incorrect. Note that this also impacts the condition where
    a dialect’s reflection process produces a mismatched set of columns for a foreign
    key constraint.
  id: totrans-3468
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果使用不匹配的“本地”和“远程”列创建了一个[`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")对象，现在会引发一个[`ArgumentError`](../core/exceptions.html#sqlalchemy.exc.ArgumentError
    "sqlalchemy.exc.ArgumentError")，否则会导致约束的内部状态不正确。请注意，这也会影响方言的反射过程产生的外键约束的列集不匹配的情况。
- en: 'This change is also **backported** to: 1.1.10'
  id: totrans-3469
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还**回溯**到：1.1.10
- en: 'References: [#3949](https://www.sqlalchemy.org/trac/ticket/3949)'
  id: totrans-3470
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#3949](https://www.sqlalchemy.org/trac/ticket/3949)
- en: postgresql
  id: totrans-3471
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-3472
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Continuing with the fix that correctly handles PostgreSQL version string “10devel”
    released in 1.1.8, an additional regexp bump to handle version strings of the
    form “10beta1”. While PostgreSQL now offers better ways to get this information,
    we are sticking w/ the regexp at least through 1.1.x for the least amount of risk
    to compatibility w/ older or alternate PostgreSQL databases.
  id: totrans-3473
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 继续修复正确处理 PostgreSQL 版本字符串“10devel”，在 1.1.8 中发布，进一步提升正则表达式以处理形式为“10beta1”的版本字符串。虽然
    PostgreSQL 现在提供了更好的获取此信息的方法，但我们至少在 1.1.x 中仍然坚持使用正则表达式，以便与较旧或替代的 PostgreSQL 数据库的兼容性风险最小化。
- en: 'This change is also **backported** to: 1.1.11'
  id: totrans-3474
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还**回溯**到：1.1.11
- en: 'References: [#4005](https://www.sqlalchemy.org/trac/ticket/4005)'
  id: totrans-3475
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#4005](https://www.sqlalchemy.org/trac/ticket/4005)
- en: '**[postgresql] [bug]**'
  id: totrans-3476
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug where using [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") with a string type that features a collation would fail
    to produce the correct syntax within CREATE TABLE.
  id: totrans-3477
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用带有排序规则的字符串类型的 [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") 在 CREATE TABLE 中无法产生正确语法的错误。
- en: 'This change is also **backported** to: 1.1.11'
  id: totrans-3478
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还**回溯**到：1.1.11
- en: 'References: [#4006](https://www.sqlalchemy.org/trac/ticket/4006)'
  id: totrans-3479
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#4006](https://www.sqlalchemy.org/trac/ticket/4006)
- en: '**[postgresql] [bug]**'
  id: totrans-3480
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added “autocommit” support for GRANT, REVOKE keywords. Pull request courtesy
    Jacob Hayes.
  id: totrans-3481
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 GRANT、REVOKE 关键字添加“autocommit”支持。拉取请求由 Jacob Hayes 提供。
- en: 'This change is also **backported** to: 1.1.10'
  id: totrans-3482
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还**回溯**到：1.1.10
- en: '**[postgresql] [bug]**'
  id: totrans-3483
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added support for parsing the PostgreSQL version string for a development version
    like “PostgreSQL 10devel”. Pull request courtesy Sean McCully.
  id: totrans-3484
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了解析 PostgreSQL 版本字符串的支持，例如“PostgreSQL 10devel”这样的开发版本。拉取请求由 Sean McCully 提供。
- en: 'This change is also **backported** to: 1.1.8'
  id: totrans-3485
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还**回溯**到：1.1.8
- en: '**[postgresql] [bug]**'
  id: totrans-3486
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug where the base [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") datatype would not invoke the bind/result processors
    of [`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY").
  id: totrans-3487
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了基本 [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")
    数据类型不会调用 [`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY") 的绑定/结果处理器的错误。
- en: 'References: [#3964](https://www.sqlalchemy.org/trac/ticket/3964)'
  id: totrans-3488
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#3964](https://www.sqlalchemy.org/trac/ticket/3964)
- en: '**[postgresql] [bug]**'
  id: totrans-3489
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added support for all possible “fields” identifiers when reflecting the PostgreSQL
    `INTERVAL` datatype, e.g. “YEAR”, “MONTH”, “DAY TO MINUTE”, etc.. In addition,
    the [`INTERVAL`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.INTERVAL
    "sqlalchemy.dialects.postgresql.INTERVAL") datatype itself now includes a new
    parameter [`INTERVAL.fields`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.INTERVAL.params.fields
    "sqlalchemy.dialects.postgresql.INTERVAL") where these qualifiers can be specified;
    the qualifier is also reflected back into the resulting datatype upon reflection
    / inspection.
  id: totrans-3490
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加对 PostgreSQL `INTERVAL` 数据类型的所有可能“fields”标识符的支持，例如“YEAR”、“MONTH”、“DAY TO MINUTE”等。此外，[`INTERVAL`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.INTERVAL
    "sqlalchemy.dialects.postgresql.INTERVAL") 数据类型本身现在包含一个新参数 [`INTERVAL.fields`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.INTERVAL.params.fields
    "sqlalchemy.dialects.postgresql.INTERVAL")，可以在其中指定这些限定符；限定符也会在反射/检查后反映到结果数据类型中。
- en: See also
  id: totrans-3491
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[Support for fields specification in INTERVAL, including full reflection](migration_12.html#change-3959)'
  id: totrans-3492
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[对 INTERVAL 中字段规范的支持，包括完全反射](migration_12.html#change-3959)'
- en: 'References: [#3959](https://www.sqlalchemy.org/trac/ticket/3959)'
  id: totrans-3493
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#3959](https://www.sqlalchemy.org/trac/ticket/3959)
- en: mysql
  id: totrans-3494
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [feature]**'
  id: totrans-3495
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [feature]**'
- en: Added support for MySQL’s ON DUPLICATE KEY UPDATE MySQL-specific [`Insert`](../dialects/mysql.html#sqlalchemy.dialects.mysql.Insert
    "sqlalchemy.dialects.mysql.dml.Insert") object. Pull request courtesy Michael
    Doronin.
  id: totrans-3496
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 MySQL 的 ON DUPLICATE KEY UPDATE MySQL 特定的 [`Insert`](../dialects/mysql.html#sqlalchemy.dialects.mysql.Insert
    "sqlalchemy.dialects.mysql.dml.Insert") 对象的支持。拉取请求由 Michael Doronin 提供。
- en: See also
  id: totrans-3497
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[Support for INSERT..ON DUPLICATE KEY UPDATE](migration_12.html#change-4009)'
  id: totrans-3498
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[对 INSERT..ON DUPLICATE KEY UPDATE 的支持](migration_12.html#change-4009)'
- en: 'References: [#4009](https://www.sqlalchemy.org/trac/ticket/4009)'
  id: totrans-3499
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#4009](https://www.sqlalchemy.org/trac/ticket/4009)
- en: '**[mysql] [bug]**'
  id: totrans-3500
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: MySQL 5.7 has introduced permission limiting for the “SHOW VARIABLES” command;
    the MySQL dialect will now handle when SHOW returns no row, in particular for
    the initial fetch of SQL_MODE, and will emit a warning that user permissions should
    be modified to allow the row to be present.
  id: totrans-3501
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL 5.7引入了对“SHOW VARIABLES”命令的权限限制；MySQL方言现在将处理当SHOW返回没有行时的情况，特别是对于SQL_MODE的初始获取，并将发出警告，提示用户权限应该被修改以允许该行存在。
- en: 'This change is also **backported** to: 1.1.11'
  id: totrans-3502
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.1.11
- en: 'References: [#4007](https://www.sqlalchemy.org/trac/ticket/4007)'
  id: totrans-3503
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4007](https://www.sqlalchemy.org/trac/ticket/4007)
- en: '**[mysql] [bug]**'
  id: totrans-3504
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Removed an ancient and unnecessary intercept of the UTC_TIMESTAMP MySQL function,
    which was getting in the way of using it with a parameter.
  id: totrans-3505
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了对UTC_TIMESTAMP MySQL函数的古老且不必要的拦截，这妨碍了使用带参数的函数。
- en: 'This change is also **backported** to: 1.1.10'
  id: totrans-3506
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.1.10
- en: 'References: [#3966](https://www.sqlalchemy.org/trac/ticket/3966)'
  id: totrans-3507
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3966](https://www.sqlalchemy.org/trac/ticket/3966)
- en: '**[mysql] [bug]**'
  id: totrans-3508
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed bug in MySQL dialect regarding rendering of table options in conjunction
    with PARTITION options when rendering CREATE TABLE. The PARTITION related options
    need to follow the table options, whereas previously this ordering was not enforced.
  id: totrans-3509
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了MySQL方言中关于在渲染CREATE TABLE时与PARTITION选项一起渲染表选项的错误。PARTITION相关选项需要跟随表选项，而以前这种顺序没有被强制执行。
- en: 'This change is also **backported** to: 1.1.10'
  id: totrans-3510
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.1.10
- en: 'References: [#3961](https://www.sqlalchemy.org/trac/ticket/3961)'
  id: totrans-3511
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3961](https://www.sqlalchemy.org/trac/ticket/3961)
- en: '**[mysql] [bug]**'
  id: totrans-3512
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Added support for views that are unreflectable due to stale table definitions,
    when calling [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect"); a warning is emitted for the table that
    cannot respond to `DESCRIBE`, but the operation succeeds.
  id: totrans-3513
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对由于过时表定义而无法反射的视图的支持，当调用[`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect")时，对于无法响应`DESCRIBE`的表会发出警告，但操作成功。
- en: 'References: [#3871](https://www.sqlalchemy.org/trac/ticket/3871)'
  id: totrans-3514
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3871](https://www.sqlalchemy.org/trac/ticket/3871)
- en: mssql
  id: totrans-3515
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-3516
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed bug where SQL Server transaction isolation must be fetched from a different
    view when using Azure data warehouse, the query is now attempted against both
    views and then a NotImplemented is raised unconditionally if failure continues
    to provide the best resiliency against future arbitrary API changes in new SQL
    Server versions.
  id: totrans-3517
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用Azure数据仓库时必须从不同视图中获取SQL Server事务隔离的错误，现在尝试针对两个视图执行查询，如果失败继续提供对未来新SQL Server版本中任意API更改的最佳弹性，则无条件引发NotImplemented。
- en: 'This change is also **backported** to: 1.1.11'
  id: totrans-3518
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.1.11
- en: 'References: [#3994](https://www.sqlalchemy.org/trac/ticket/3994)'
  id: totrans-3519
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3994](https://www.sqlalchemy.org/trac/ticket/3994)
- en: '**[mssql] [bug]**'
  id: totrans-3520
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Added a placeholder type [`XML`](../dialects/mssql.html#sqlalchemy.dialects.mssql.XML
    "sqlalchemy.dialects.mssql.XML") to the SQL Server dialect, so that a reflected
    table which includes this type can be re-rendered as a CREATE TABLE. The type
    has no special round-trip behavior nor does it currently support additional qualifying
    arguments.
  id: totrans-3521
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在SQL Server方言中添加了一个占位符类型[`XML`](../dialects/mssql.html#sqlalchemy.dialects.mssql.XML
    "sqlalchemy.dialects.mssql.XML")，以便包含此类型的反射表可以重新呈现为CREATE TABLE。该类型没有特殊的往返行为，也不支持额外的限定参数。
- en: 'This change is also **backported** to: 1.1.11'
  id: totrans-3522
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.1.11
- en: 'References: [#3973](https://www.sqlalchemy.org/trac/ticket/3973)'
  id: totrans-3523
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3973](https://www.sqlalchemy.org/trac/ticket/3973)
- en: '**[mssql] [bug]**'
  id: totrans-3524
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: The SQL Server dialect now allows for a database and/or owner name with a dot
    inside of it, using brackets explicitly in the string around the owner and optionally
    the database name as well. In addition, sending the [`quoted_name`](../core/sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name") construct for the schema name will not
    split on the dot and will deliver the full string as the “owner”. [`quoted_name`](../core/sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name") is also now available from the `sqlalchemy.sql`
    import space.
  id: totrans-3525
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQL Server方言现在允许在其中使用点的数据库和/或所有者名称，使用字符串中明确的括号围绕所有者和可选的数据库名称。此外，将[`quoted_name`](../core/sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")构造发送到模式名称将不会在点上拆分，并将提供完整字符串作为“所有者”。[`quoted_name`](../core/sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")现在也可以从`sqlalchemy.sql`导入空间中使用。
- en: See also
  id: totrans-3526
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[SQL Server schema names with embedded dots supported](migration_12.html#change-2626)'
  id: totrans-3527
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[支持带有嵌入点的SQL Server模式名称](migration_12.html#change-2626)'
- en: 'References: [#2626](https://www.sqlalchemy.org/trac/ticket/2626)'
  id: totrans-3528
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2626](https://www.sqlalchemy.org/trac/ticket/2626)
- en: oracle
  id: totrans-3529
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [feature] [postgresql]**'
  id: totrans-3530
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [feature] [postgresql]**'
- en: Added new keywords [`Sequence.cache`](../core/defaults.html#sqlalchemy.schema.Sequence.params.cache
    "sqlalchemy.schema.Sequence") and [`Sequence.order`](../core/defaults.html#sqlalchemy.schema.Sequence.params.order
    "sqlalchemy.schema.Sequence") to [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence"), to allow rendering of the CACHE parameter understood
    by Oracle and PostgreSQL, and the ORDER parameter understood by Oracle. Pull request
    courtesy David Moore.
  id: totrans-3531
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向[`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")添加了新关键字[`Sequence.cache`](../core/defaults.html#sqlalchemy.schema.Sequence.params.cache
    "sqlalchemy.schema.Sequence.params.cache")和[`Sequence.order`](../core/defaults.html#sqlalchemy.schema.Sequence.params.order
    "sqlalchemy.schema.Sequence.params.order")，以允许渲染Oracle和PostgreSQL理解的CACHE参数，以及Oracle理解的ORDER参数。感谢David
    Moore的拉取请求。
- en: 'This change is also **backported** to: 1.1.12'
  id: totrans-3532
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.1.12
- en: '**[oracle] [feature]**'
  id: totrans-3533
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [feature]**'
- en: The Oracle dialect now inspects unique and check constraints when using [`Inspector.get_unique_constraints()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_unique_constraints
    "sqlalchemy.engine.reflection.Inspector.get_unique_constraints"), [`Inspector.get_check_constraints()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_check_constraints
    "sqlalchemy.engine.reflection.Inspector.get_check_constraints"). As Oracle does
    not have unique constraints that are separate from a unique [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index"), a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") that’s reflected will still continue to not have [`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") objects associated with it. Pull requests
    courtesy Eloy Felix.
  id: totrans-3534
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用[`Inspector.get_unique_constraints()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_unique_constraints
    "sqlalchemy.engine.reflection.Inspector.get_unique_constraints")、[`Inspector.get_check_constraints()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_check_constraints
    "sqlalchemy.engine.reflection.Inspector.get_check_constraints")时，Oracle方言现在会检查唯一约束和检查约束。由于Oracle没有与唯一[`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")分开的唯一约束，因此反射的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")仍将继续不与[`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint")对象关联。感谢Eloy Felix的拉取请求。
- en: See also
  id: totrans-3535
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Oracle Unique, Check constraints now reflected](migration_12.html#change-4003)'
  id: totrans-3536
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Oracle唯一约束，检查约束现在反映](migration_12.html#change-4003)'
- en: 'References: [#4003](https://www.sqlalchemy.org/trac/ticket/4003)'
  id: totrans-3537
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4003](https://www.sqlalchemy.org/trac/ticket/4003)
- en: '**[oracle] [bug]**'
  id: totrans-3538
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Support for two-phase transactions has been removed entirely for cx_Oracle when
    version 6.0b1 or later of the DBAPI is in use. The two- phase feature historically
    has never been usable under cx_Oracle 5.x in any case, and cx_Oracle 6.x has removed
    the connection-level “twophase” flag upon which this feature relied.
  id: totrans-3539
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用版本为6.0b1或更高的DBAPI时，cx_Oracle完全删除了对两阶段事务的支持。在任何情况下，cx_Oracle 5.x历史上从未能够使用两阶段功能，而cx_Oracle
    6.x已经删除了此功能所依赖的连接级“twophase”标志。
- en: 'This change is also **backported** to: 1.1.11'
  id: totrans-3540
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.1.11
- en: 'References: [#3997](https://www.sqlalchemy.org/trac/ticket/3997)'
  id: totrans-3541
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3997](https://www.sqlalchemy.org/trac/ticket/3997)
- en: '**[oracle] [bug]**'
  id: totrans-3542
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed bug in cx_Oracle dialect where version string parsing would fail for cx_Oracle
    version 6.0b1 due to the “b” character. Version string parsing is now via a regexp
    rather than a simple split.
  id: totrans-3543
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 cx_Oracle 方言中的错误，版本字符串解析会因为 cx_Oracle 版本 6.0b1 中的“b”字符而失败。现在版本字符串解析使用正则表达式而不是简单的分割。
- en: 'This change is also **backported** to: 1.1.10'
  id: totrans-3544
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.1.10
- en: 'References: [#3975](https://www.sqlalchemy.org/trac/ticket/3975)'
  id: totrans-3545
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#3975](https://www.sqlalchemy.org/trac/ticket/3975)
- en: '**[oracle] [bug]**'
  id: totrans-3546
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [错误]**'
- en: The cx_Oracle dialect now supports “sane multi rowcount”, that is, when a series
    of parameter sets are executed via DBAPI `cursor.executemany()`, we can make use
    of `cursor.rowcount` to verify the number of rows matched. This has an impact
    within the ORM when detecting concurrent modification scenarios, in that some
    simple conditions can now be detected even when the ORM is batching statements,
    as well as when the more strict versioning feature is used, the ORM can still
    use statement batching. The flag is enabled for cx_Oracle assuming at least version
    5.0, which is now commonplace.
  id: totrans-3547
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: cx_Oracle 方言现在支持“合理的多行计数”，即，当通过 DBAPI `cursor.executemany()` 执行一系列参数集时，我们可以利用
    `cursor.rowcount` 来验证匹配的行数。这在 ORM 中对于检测并发修改方案有影响，因为在批处理语句时，一些简单的条件现在可以被检测到，同时当使用更严格的版本功能时，ORM
    仍然可以使用语句批处理。假设至少版本 5.0，现在 cx_Oracle 默认启用该标志，这已经是司空见惯的了。
- en: 'References: [#3932](https://www.sqlalchemy.org/trac/ticket/3932)'
  id: totrans-3548
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#3932](https://www.sqlalchemy.org/trac/ticket/3932)
- en: '**[oracle] [bug]**'
  id: totrans-3549
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [错误]**'
- en: Oracle reflection now “normalizes” the name given to a foreign key constraint,
    that is, returns it as all lower case for a case insensitive name. This was already
    the behavior for indexes and primary key constraints as well as all table and
    column names. This will allow Alembic autogenerate scripts to compare and render
    foreign key constraint names correctly when initially specified as case insensitive.
  id: totrans-3550
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Oracle 反射现在“规范化”了给定的外键约束名称，即，对于大小写不敏感的名称，将其返回为全部小写。这已经是索引和主键约束以及所有表和列名称的行为了。这将允许
    Alembic 自动生成的脚本在最初指定为大小写不敏感时正确比较和渲染外键约束名称。
- en: See also
  id: totrans-3551
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参见
- en: '[Oracle foreign key constraint names are now “name normalized”](migration_12.html#change-3276)'
  id: totrans-3552
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Oracle 外键约束名称现在已“规范化”](migration_12.html#change-3276)'
- en: 'References: [#3276](https://www.sqlalchemy.org/trac/ticket/3276)'
  id: totrans-3553
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#3276](https://www.sqlalchemy.org/trac/ticket/3276)
- en: misc
  id: totrans-3554
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[feature] [ext]**'
  id: totrans-3555
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[特性] [扩展]**'
- en: Added new flag [`Session.enable_baked_queries`](../orm/session_api.html#sqlalchemy.orm.Session.params.enable_baked_queries
    "sqlalchemy.orm.Session") to the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") to allow baked queries to be disabled session-wide,
    reducing memory use. Also added new [`Bakery`](../orm/extensions/baked.html#sqlalchemy.ext.baked.Bakery
    "sqlalchemy.ext.baked.Bakery") wrapper so that the bakery returned by [`BakedQuery.bakery`](../orm/extensions/baked.html#sqlalchemy.ext.baked.BakedQuery.params.bakery
    "sqlalchemy.ext.baked.BakedQuery") can be inspected.
  id: totrans-3556
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新标志 [`Session.enable_baked_queries`](../orm/session_api.html#sqlalchemy.orm.Session.params.enable_baked_queries
    "sqlalchemy.orm.Session") 到 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 中，以允许全局禁用烘焙查询，减少内存使用。还添加了新的 [`Bakery`](../orm/extensions/baked.html#sqlalchemy.ext.baked.Bakery
    "sqlalchemy.ext.baked.Bakery") 包装器，以便可以检查由 [`BakedQuery.bakery`](../orm/extensions/baked.html#sqlalchemy.ext.baked.BakedQuery.params.bakery
    "sqlalchemy.ext.baked.BakedQuery") 返回的烘焙器。
- en: '**[bug] [ext]**'
  id: totrans-3557
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [扩展]**'
- en: Protected against testing “None” as a class in the case where declarative classes
    are being garbage collected and new automap prepare() operations are taking place
    concurrently, very infrequently hitting a weakref that has not been fully acted
    upon after gc.
  id: totrans-3558
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在声明性类被垃圾收集并且新的 automap prepare() 操作同时进行的情况下，防止测试“None”作为一个类，非常不经常地命中一个在垃圾回收后尚未完全处理的
    weakref。
- en: 'This change is also **backported** to: 1.1.10'
  id: totrans-3559
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.1.10
- en: 'References: [#3980](https://www.sqlalchemy.org/trac/ticket/3980)'
  id: totrans-3560
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#3980](https://www.sqlalchemy.org/trac/ticket/3980)
- en: '**[bug] [ext]**'
  id: totrans-3561
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [扩展]**'
- en: Fixed bug in [`sqlalchemy.ext.mutable`](../orm/extensions/mutable.html#module-sqlalchemy.ext.mutable
    "sqlalchemy.ext.mutable") where the [`Mutable.as_mutable()`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.Mutable.as_mutable
    "sqlalchemy.ext.mutable.Mutable.as_mutable") method would not track a type that
    had been copied using `TypeEngine.copy()`. This became more of a regression in
    1.1 compared to 1.0 because the [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") class is now a subclass of [`SchemaEventTarget`](../core/events.html#sqlalchemy.events.SchemaEventTarget
    "sqlalchemy.events.SchemaEventTarget"), which among other things indicates to
    the parent [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    that the type should be copied when the [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") is. These copies are common when using declarative
    with mixins or abstract classes.
  id: totrans-3562
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`sqlalchemy.ext.mutable`](../orm/extensions/mutable.html#module-sqlalchemy.ext.mutable
    "sqlalchemy.ext.mutable")中的错误，在使用`TypeEngine.copy()`复制类型时，[`Mutable.as_mutable()`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.Mutable.as_mutable
    "sqlalchemy.ext.mutable.Mutable.as_mutable")方法不会跟踪已复制的类型。在1.1中相比于1.0，这变得更加退化，因为[`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")类现在是[`SchemaEventTarget`](../core/events.html#sqlalchemy.events.SchemaEventTarget
    "sqlalchemy.events.SchemaEventTarget")的子类，其中之一是当[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")被复制时指示类型也应该被复制的内容。在使用混合或抽象类与声明式一起使用时，这些副本很常见。
- en: 'This change is also **backported** to: 1.1.8'
  id: totrans-3563
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：1.1.8
- en: 'References: [#3950](https://www.sqlalchemy.org/trac/ticket/3950)'
  id: totrans-3564
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3950](https://www.sqlalchemy.org/trac/ticket/3950)
- en: '**[bug] [ext]**'
  id: totrans-3565
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [扩展]**'
- en: Added support for bound parameters, e.g. those normally set up via [`Query.params()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.params
    "sqlalchemy.orm.Query.params"), to the `Result.count()` method. Previously, support
    for parameters were omitted. Pull request courtesy Pat Deegan.
  id: totrans-3566
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对绑定参数的支持，例如通常通过[`Query.params()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.params
    "sqlalchemy.orm.Query.params")设置的参数，到`Result.count()`方法中。先前，参数的支持被省略了。感谢Pat Deegan提供的拉取请求。
- en: 'This change is also **backported** to: 1.1.8'
  id: totrans-3567
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：1.1.8
- en: '**[bug] [ext]**'
  id: totrans-3568
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [扩展]**'
- en: The `AssociationProxy.any()`, `AssociationProxy.has()` and `AssociationProxy.contains()`
    comparison methods now support linkage to an attribute that is itself also an
    [`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy"), recursively.
  id: totrans-3569
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`AssociationProxy.any()`、`AssociationProxy.has()`和`AssociationProxy.contains()`比较方法现在支持链接到本身也是[`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy")的属性，递归地。'
- en: See also
  id: totrans-3570
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[AssociationProxy any(), has(), contains() work with chained association proxies](migration_12.html#change-3769)'
  id: totrans-3571
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`AssociationProxy.any()`、`has()`、`contains()`与链接的关联代理一起工作](migration_12.html#change-3769)'
- en: 'References: [#3769](https://www.sqlalchemy.org/trac/ticket/3769)'
  id: totrans-3572
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3769](https://www.sqlalchemy.org/trac/ticket/3769)
- en: '**[bug] [ext]**'
  id: totrans-3573
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [扩展]**'
- en: Implemented in-place mutation operators `__ior__`, `__iand__`, `__ixor__` and
    `__isub__` for [`MutableSet`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableSet
    "sqlalchemy.ext.mutable.MutableSet") and `__iadd__` for [`MutableList`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableList
    "sqlalchemy.ext.mutable.MutableList") so that change events are fired off when
    these mutator methods are used to alter the collection.
  id: totrans-3574
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于[`MutableSet`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableSet
    "sqlalchemy.ext.mutable.MutableSet")实施就地变异运算符`__ior__`、`__iand__`、`__ixor__`和`__isub__`，以及对[`MutableList`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableList
    "sqlalchemy.ext.mutable.MutableList")实施`__iadd__`，以便在使用这些变异器方法修改集合时触发更改事件。
- en: See also
  id: totrans-3575
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[In-place mutation operators work for MutableSet, MutableList](migration_12.html#change-3853)'
  id: totrans-3576
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[就地变异运算符对MutableSet、MutableList有效](migration_12.html#change-3853)'
- en: 'References: [#3853](https://www.sqlalchemy.org/trac/ticket/3853)'
  id: totrans-3577
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3853](https://www.sqlalchemy.org/trac/ticket/3853)
- en: '**[bug] [declarative]**'
  id: totrans-3578
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [声明式]**'
- en: A warning is emitted if the [`declared_attr.cascading`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr.cascading
    "sqlalchemy.orm.declared_attr.cascading") modifier is used with a declarative
    attribute that is itself declared on a class that is to be mapped, as opposed
    to a declarative mixin class or `__abstract__` class. The [`declared_attr.cascading`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr.cascading
    "sqlalchemy.orm.declared_attr.cascading") modifier currently only applies to mixin/abstract
    classes.
  id: totrans-3579
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用[`declared_attr.cascading`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr.cascading
    "sqlalchemy.orm.declared_attr.cascading")修饰符与一个在要映射的类上自身声明的声明性属性一起使用时，会发出警告，而不是在声明性混入类或`__abstract__`类上声明的属性。[`declared_attr.cascading`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr.cascading
    "sqlalchemy.orm.declared_attr.cascading")修饰符目前仅适用于混入/抽象类。
- en: 'References: [#3847](https://www.sqlalchemy.org/trac/ticket/3847)'
  id: totrans-3580
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3847](https://www.sqlalchemy.org/trac/ticket/3847)
- en: '**[bug] [ext]**'
  id: totrans-3581
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Improved the association proxy list collection so that premature autoflush against
    a newly created association object can be prevented in the case where `list.append()`
    is being used, and a lazy load would be invoked when the association proxy accesses
    the endpoint collection. The endpoint collection is now accessed first before
    the creator is invoked to produce the association object.
  id: totrans-3582
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了关联代理列表集合，以防止对新创建的关联对象进行过早的自动刷新，当使用`list.append()`时，当关联代理访问端点集合时会调用延迟加载。现在在调用创建者以生成关联对象之前首先访问端点集合。
- en: 'References: [#3941](https://www.sqlalchemy.org/trac/ticket/3941)'
  id: totrans-3583
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3941](https://www.sqlalchemy.org/trac/ticket/3941)
- en: '**[bug] [ext]**'
  id: totrans-3584
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: The [`sqlalchemy.ext.hybrid.hybrid_property`](../orm/extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property") class now supports calling mutators like
    `@setter`, `@expression` etc. multiple times across subclasses, and now provides
    a `@getter` mutator, so that a particular hybrid can be repurposed across subclasses
    or other classes. This now matches the behavior of `@property` in standard Python.
  id: totrans-3585
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`sqlalchemy.ext.hybrid.hybrid_property`](../orm/extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property")类现在支持多次调用像`@setter`，`@expression`等的变异器，以及现在提供了一个`@getter`变异器，这样一个特定的混合属性可以在子类或其他类之间重新使用。这现在与标准Python中`@property`的行为相匹配。'
- en: See also
  id: totrans-3586
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Hybrid attributes support reuse among subclasses, redefinition of @getter](migration_12.html#change-3911-3912)'
  id: totrans-3587
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[混合属性支持在子类之间重用，重新定义@getter](migration_12.html#change-3911-3912)'
- en: 'References: [#3911](https://www.sqlalchemy.org/trac/ticket/3911), [#3912](https://www.sqlalchemy.org/trac/ticket/3912)'
  id: totrans-3588
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3911](https://www.sqlalchemy.org/trac/ticket/3911)，[#3912](https://www.sqlalchemy.org/trac/ticket/3912)
- en: '**[bug] [ext]**'
  id: totrans-3589
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed a bug in the `sqlalchemy.ext.serializer` extension whereby an “annotated”
    SQL element (as produced by the ORM for many types of SQL expressions) could not
    be reliably serialized. Also bumped the default pickle level for the serializer
    to “HIGHEST_PROTOCOL”.
  id: totrans-3590
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了`sqlalchemy.ext.serializer`扩展中的一个bug，即“注释”SQL元素（由ORM为许多类型的SQL表达式生成）无法可靠地序列化。还将序列化器的默认pickle级别提升为“HIGHEST_PROTOCOL”。
- en: 'References: [#3918](https://www.sqlalchemy.org/trac/ticket/3918)'
  id: totrans-3591
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3918](https://www.sqlalchemy.org/trac/ticket/3918)
