["```py\nimport pymupdf\n\nHTML = \"\"\"\n<p style=\"font-family: sans-serif;color: blue\">Hello World!</p>\n\"\"\"\n\nMEDIABOX = pymupdf.paper_rect(\"letter\")  # output page format: Letter\nWHERE = MEDIABOX + (36, 36, -36, -36)  # leave borders of 0.5 inches\n\nstory = pymupdf.Story(html=HTML)  # create story from HTML\nwriter = pymupdf.DocumentWriter(\"output.pdf\")  # create the writer\n\nmore = 1  # will indicate end of input once it is set to 0\n\nwhile more:  # loop outputting the story\n    device = writer.begin_page(MEDIABOX)  # make new page\n    more, _ = story.place(WHERE)  # layout into allowed rectangle\n    story.draw(device)  # write on page\n    writer.end_page()  # finish page\n\nwriter.close()  # close output file \n```", "```py\nimport pymupdf\n\nCSS = \"\"\"\nbody {\n font-family: sans-serif;\n color: blue;\n}\n\"\"\"\n\nHTML = \"\"\"\n<p>Hello World!</p>\n\"\"\"\n\n# the story would then be created like this:\nstory = pymupdf.Story(html=HTML, user_css=CSS) \n```", "```py\nimport pymupdf\n\nMEDIABOX = pymupdf.paper_rect(\"letter\")\nWHERE = MEDIABOX + (36, 36, -36, -36)\n\nstory = pymupdf.Story()  # create an empty story\nbody = story.body  # access the body of its DOM\nwith body.add_paragraph() as para:  # store desired content\n    para.set_font(\"sans-serif\").set_color(\"blue\").add_text(\"Hello World!\")\n\nwriter = pymupdf.DocumentWriter(\"output.pdf\")\n\nmore = 1\n\nwhile more:\n    device = writer.begin_page(MEDIABOX)\n    more, _ = story.place(WHERE)\n    story.draw(device)\n    writer.end_page()\n\nwriter.close() \n```", "```py\nimport pymupdf\n\nMEDIABOX = pymupdf.paper_rect(\"letter\")\nWHERE = MEDIABOX + (36, 36, -36, -36)\n\n# create story, let it look at script folder for resources\nstory = pymupdf.Story(archive=\".\")\nbody = story.body  # access the body of its DOM\n\nwith body.add_paragraph() as para:\n    # store desired content\n    para.set_font(\"sans-serif\").set_color(\"blue\").add_text(\"Hello World!\")\n\n# another paragraph for our image:\nwith body.add_paragraph() as para:\n    # store image in another paragraph\n    para.add_image(\"world.jpg\")\n\nwriter = pymupdf.DocumentWriter(\"output.pdf\")\n\nmore = 1\n\nwhile more:\n    device = writer.begin_page(MEDIABOX)\n    more, _ = story.place(WHERE)\n    story.draw(device)\n    writer.end_page()\n\nwriter.close() \n```", "```py\nimport pathlib\nimport pymupdf\n\nhtmlpath = pathlib.Path(\"myhtml.html\")\ncsspath = pathlib.Path(\"mycss.css\")\n\nHTML = htmlpath.read_bytes().decode()\nCSS = csspath.read_bytes().decode()\n\nstory = pymupdf.Story(html=HTML, user_css=CSS) \n```", "```py\n\"\"\"\nThis is a demo script for using PyMuPDF with its \"Story\" feature.\n\nThe following aspects are being covered here:\n\n* The script produces a report of films that are stored in an SQL database\n* The report format is provided as a HTML template\n\nThe SQL database contains two tables:\n1\\. Table \"films\" which has the columns \"title\" (film title, str), \"director\"\n (str) and \"year\" (year of release, int).\n2\\. Table \"actors\" which has the columns \"name\" (actor name, str) and \"title\"\n (the film title where the actor had been casted, str).\n\nThe script reads all content of the \"films\" table. For each film title it\nreads all rows from table \"actors\" which took part in that film.\n\nComment 1\n---------\nTo keep things easy and free from pesky technical detail, the relevant file\nnames inherit the name of this script:\n- the database's filename is the script name with \".py\" extension replaced\n by \".db\".\n- the output PDF similarly has script file name with extension \".pdf\".\n\nComment 2\n---------\nThe SQLITE database has been created using https://sqlitebrowser.org/, a free\nmulti-platform tool to maintain or manipulate SQLITE databases.\n\"\"\"\nimport os\nimport sqlite3\n\nimport pymupdf\n\n# ----------------------------------------------------------------------\n# HTML template for the film report\n# There are four placeholders coded as \"id\" attributes.\n# One \"id\" allows locating the template part itself, the other three\n# indicate where database text should be inserted.\n# ----------------------------------------------------------------------\nfestival_template = (\n    \"<html><head><title>Just some arbitrary text</title></head>\"\n    '<body><h1 style=\"text-align:center\">Hook Norton Film Festival</h1>'\n    \"<ol>\"\n    '<li id=\"filmtemplate\">'\n    '<b id=\"filmtitle\"></b>'\n    \"<dl>\"\n    '<dt>Director<dd id=\"director\">'\n    '<dt>Release Year<dd id=\"filmyear\">'\n    '<dt>Cast<dd id=\"cast\">'\n    \"</dl>\"\n    \"</li>\"\n    \"</ol>\"\n    \"</body></html\"\n)\n\n# -------------------------------------------------------------------\n# define database access\n# -------------------------------------------------------------------\ndbfilename = __file__.replace(\".py\", \".db\")  # the SQLITE database file name\nassert os.path.isfile(dbfilename), f'{dbfilename}'\ndatabase = sqlite3.connect(dbfilename)  # open database\ncursor_films = database.cursor()  # cursor for selecting the films\ncursor_casts = database.cursor()  # cursor for selecting actors per film\n\n# select statement for the films - let SQL also sort it for us\nselect_films = \"\"\"SELECT title, director, year FROM films ORDER BY title\"\"\"\n\n# select stament for actors, a skeleton: sub-select by film title\nselect_casts = \"\"\"SELECT name FROM actors WHERE film = \"%s\" ORDER BY name\"\"\"\n\n# -------------------------------------------------------------------\n# define the HTML Story and fill it with database data\n# -------------------------------------------------------------------\nstory = pymupdf.Story(festival_template)\nbody = story.body  # access the HTML body detail\ntemplate = body.find(None, \"id\", \"filmtemplate\")  # find the template part\n\n# read the films from the database and put them all in one Python list\n# NOTE: instead we might fetch rows one by one (advisable for large volumes)\ncursor_films.execute(select_films)  # execute cursor, and ...\nfilms = cursor_films.fetchall()  # read out what was found\n\nfor title, director, year in films:  # iterate through the films\n    film = template.clone()  # clone template to report each film\n    film.find(None, \"id\", \"filmtitle\").add_text(title)  # put title in templ\n    film.find(None, \"id\", \"director\").add_text(director)  # put director\n    film.find(None, \"id\", \"filmyear\").add_text(str(year))  # put year\n\n    # the actors reside in their own table - find the ones for this film title\n    cursor_casts.execute(select_casts % title)  # execute cursor\n    casts = cursor_casts.fetchall()  # read actors for the film\n    # each actor name appears in its own tuple, so extract it from there\n    film.find(None, \"id\", \"cast\").add_text(\"\\n\".join([c[0] for c in casts]))\n    body.append_child(film)\n\ntemplate.remove()  # remove the template\n\n# -------------------------------------------------------------------\n# generate the PDF\n# -------------------------------------------------------------------\nwriter = pymupdf.DocumentWriter(__file__.replace(\".py\", \".pdf\"), \"compress\")\nmediabox = pymupdf.paper_rect(\"a4\")  # use pages in ISO-A4 format\nwhere = mediabox + (72, 36, -36, -72)  # leave page borders\n\nmore = 1  # end of output indicator\n\nwhile more:\n    dev = writer.begin_page(mediabox)  # make a new page\n    more, filled = story.place(where)  # arrange content for this page\n    story.draw(dev, None)  # write content to page\n    writer.end_page()  # finish the page\n\nwriter.close()  # close the PDF \n```", "```py\n\"\"\"\nDemo of Story class in PyMuPDF\n-------------------------------\n\nThis script demonstrates how to the results of a pymupdf.Story output can be\nplaced in a rectangle of an existing (!) PDF page.\n\n\"\"\"\nimport io\nimport os\n\nimport pymupdf\n\ndef make_pdf(fileptr, text, rect, font=\"sans-serif\", archive=None):\n  \"\"\"Make a memory DocumentWriter from HTML text and a rect.\n\n Args:\n fileptr: a Python file object. For example an io.BytesIO().\n text: the text to output (HTML format)\n rect: the target rectangle. Will use its width / height as mediabox\n font: (str) font family name, default sans-serif\n archive: pymupdf.Archive parameter. To be used if e.g. images or special\n fonts should be used.\n Returns:\n The matrix to convert page rectangles of the created PDF back\n to rectangle coordinates in the parameter \"rect\".\n Normal use will expect to fit all the text in the given rect.\n However, if an overflow occurs, this function will output multiple\n pages, and the caller may decide to either accept or retry with\n changed parameters.\n \"\"\"\n    # use input rectangle as the page dimension\n    mediabox = pymupdf.Rect(0, 0, rect.width, rect.height)\n    # this matrix converts mediabox back to input rect\n    matrix = mediabox.torect(rect)\n\n    story = pymupdf.Story(text, archive=archive)\n    body = story.body\n    body.set_properties(font=font)\n    writer = pymupdf.DocumentWriter(fileptr)\n    while True:\n        device = writer.begin_page(mediabox)\n        more, _ = story.place(mediabox)\n        story.draw(device)\n        writer.end_page()\n        if not more:\n            break\n    writer.close()\n    return matrix\n\n# -------------------------------------------------------------\n# We want to put this in a given rectangle of an existing page\n# -------------------------------------------------------------\nHTML = \"\"\"\n<p>PyMuPDF is a great package! And it still improves significantly from one version to the next one!</p>\n<p>It is a Python binding for <b>MuPDF</b>, a lightweight PDF, XPS, and E-book viewer, renderer, and toolkit.<br> Both are maintained and developed by Artifex Software, Inc.</p>\n<p>Via MuPDF it can access files in PDF, XPS, OpenXPS, CBZ, EPUB, MOBI and FB2 (e-books) formats,<br> and it is known for its top\n<b><i>performance</i></b> and <b><i>rendering quality.</p>\"\"\"\n\n# Make a PDF page for demo purposes\nroot = os.path.abspath( f\"{__file__}/..\")\ndoc = pymupdf.open(f\"{root}/mupdf-title.pdf\")\npage = doc[0]\n\nWHERE = pymupdf.Rect(50, 100, 250, 500)  # target rectangle on existing page\n\nfileptr = io.BytesIO()  # let DocumentWriter use this as its file\n\n# -------------------------------------------------------------------\n# call DocumentWriter and Story to fill our rectangle\nmatrix = make_pdf(fileptr, HTML, WHERE)\n# -------------------------------------------------------------------\nsrc = pymupdf.open(\"pdf\", fileptr)  # open DocumentWriter output PDF\nif src.page_count > 1:  # target rect was too small\n    raise ValueError(\"target WHERE too small\")\n\n# its page 0 contains our result\npage.show_pdf_page(WHERE, src, 0)\n\ndoc.ez_save(f\"{root}/mupdf-title-after.pdf\") \n```", "```py\n\"\"\"\nThis is a demo script using PyMuPDF's Story class to output text as a PDF with\na two-column page layout.\n\nThe script demonstrates the following features:\n* How to fill columns or table cells of complex page layouts\n* How to embed images\n* How to modify existing, given HTML sources for output (text indent, font size)\n* How to use fonts defined in package \"pymupdf-fonts\"\n* How to use ZIP files as Archive\n\n--------------\nThe example is taken from the somewhat modified Wikipedia article\nhttps://en.wikipedia.org/wiki/The_quick_brown_fox_jumps_over_the_lazy_dog.\n--------------\n\"\"\"\n\nimport io\nimport os\nimport zipfile\nimport pymupdf\n\nthisdir = os.path.dirname(os.path.abspath(__file__))\nmyzip = zipfile.ZipFile(os.path.join(thisdir, \"quickfox.zip\"))\narch = pymupdf.Archive(myzip)\n\nif pymupdf.fitz_fontdescriptors:\n    # we want to use the Ubuntu fonts for sans-serif and for monospace\n    CSS = pymupdf.css_for_pymupdf_font(\"ubuntu\", archive=arch, name=\"sans-serif\")\n    CSS = pymupdf.css_for_pymupdf_font(\"ubuntm\", CSS=CSS, archive=arch, name=\"monospace\")\nelse:\n    # No pymupdf-fonts available.\n    CSS=\"\"\n\ndocname = __file__.replace(\".py\", \".pdf\")  # output PDF file name\n\nHTML = myzip.read(\"quickfox.html\").decode()\n\n# make the Story object\nstory = pymupdf.Story(HTML, user_css=CSS, archive=arch)\n\n# --------------------------------------------------------------\n# modify the DOM somewhat\n# --------------------------------------------------------------\nbody = story.body  # access HTML body\nbody.set_properties(font=\"sans-serif\")  # and give it our font globally\n\n# modify certain nodes\npara = body.find(\"p\", None, None)  # find relevant nodes (here: paragraphs)\nwhile para != None:\n    para.set_properties(  # method MUST be used for existing nodes\n        indent=15,\n        fontsize=13,\n    )\n    para = para.find_next(\"p\", None, None)\n\n# choose PDF page size\nMEDIABOX = pymupdf.paper_rect(\"letter\")\n# text appears only within this subrectangle\nWHERE = MEDIABOX + (36, 36, -36, -36)\n\n# --------------------------------------------------------------\n# define page layout within the WHERE rectangle\n# --------------------------------------------------------------\nCOLS = 2  # layout: 2 cols 1 row\nROWS = 1\nTABLE = pymupdf.make_table(WHERE, cols=COLS, rows=ROWS)\n# fill the cells of each page in this sequence:\nCELLS = [TABLE[i][j] for i in range(ROWS) for j in range(COLS)]\n\nfileobject = io.BytesIO()  # let DocumentWriter write to memory\nwriter = pymupdf.DocumentWriter(fileobject)  # define the writer\n\nmore = 1\nwhile more:  # loop until all input text has been written out\n    dev = writer.begin_page(MEDIABOX)  # prepare a new output page\n    for cell in CELLS:\n        # content may be complete after any cell, ...\n        if more:  # so check this status first\n            more, _ = story.place(cell)\n            story.draw(dev)\n    writer.end_page()  # finish the PDF page\n\nwriter.close()  # close DocumentWriter output\n\n# for housekeeping work re-open from memory\ndoc = pymupdf.open(\"pdf\", fileobject)\ndoc.ez_save(docname) \n```", "```py\n\"\"\"\nThis is a demo script using PyMuPDF's Story class to output text as a PDF with\na two-column page layout.\n\nThe script demonstrates the following features:\n* Layout text around images of an existing (\"target\") PDF.\n* Based on a few global parameters, areas on each page are identified, that\n can be used to receive text layouted by a Story.\n* These global parameters are not stored anywhere in the target PDF and\n must therefore be provided in some way.\n - The width of the border(s) on each page.\n - The fontsize to use for text. This value determines whether the provided\n text will fit in the empty spaces of the (fixed) pages of target PDF. It\n cannot be predicted in any way. The script ends with an exception if\n target PDF has not enough pages, and prints a warning message if not all\n pages receive at least some text. In both cases, the FONTSIZE value\n can be changed (a float value).\n - Use of a 2-column page layout for the text.\n* The layout creates a temporary (memory) PDF. Its produced page content\n (the text) is used to overlay the corresponding target page. If text\n requires more pages than are available in target PDF, an exception is raised.\n If not all target pages receive at least some text, a warning is printed.\n* The script reads \"image-no-go.pdf\" in its own folder. This is the \"target\" PDF.\n It contains 2 pages with each 2 images (from the original article), which are\n positioned at places that create a broad overall test coverage. Otherwise the\n pages are empty.\n* The script produces \"quickfox-image-no-go.pdf\" which contains the original pages\n and image positions, but with the original article text laid out around them.\n\nNote:\n--------------\nThis script version uses just image positions to derive \"No-Go areas\" for\nlayouting the text. Other PDF objects types are detectable by PyMuPDF and may\nbe taken instead or in addition, without influencing the layouting.\nThe following are candidates for other such \"No-Go areas\". Each can be detected\nand located by PyMuPDF:\n* Annotations\n* Drawings\n* Existing text\n\n--------------\nThe text and images are taken from the somewhat modified Wikipedia article\nhttps://en.wikipedia.org/wiki/The_quick_brown_fox_jumps_over_the_lazy_dog.\n--------------\n\"\"\"\n\nimport io\nimport os\nimport zipfile\nimport pymupdf\n\nthisdir = os.path.dirname(os.path.abspath(__file__))\nmyzip = zipfile.ZipFile(os.path.join(thisdir, \"quickfox.zip\"))\n\ndocname = os.path.join(thisdir, \"image-no-go.pdf\")  # \"no go\" input PDF file name\noutname = os.path.join(thisdir, \"quickfox-image-no-go.pdf\")  # output PDF file name\nBORDER = 36  # global parameter\nFONTSIZE = 12.5  # global parameter\nCOLS = 2  # number of text columns, global parameter\n\ndef analyze_page(page):\n  \"\"\"Compute MediaBox and rectangles on page that are free to receive text.\n\n Notes:\n Assume a BORDER around the page, make 2 columns of the resulting\n sub-rectangle and extract the rectangles of all images on page.\n For demo purposes, the image rectangles are taken as \"NO-GO areas\"\n on the page when writing text with the Story.\n The function returns free areas for each of the columns.\n\n Returns:\n (page.number, mediabox, CELLS), where CELLS is a list of free cells.\n \"\"\"\n    prect = page.rect  # page rectangle - will be our MEDIABOX later\n    where = prect + (BORDER, BORDER, -BORDER, -BORDER)\n    TABLE = pymupdf.make_table(where, rows=1, cols=COLS)\n\n    # extract rectangles covered by images on this page\n    IMG_RECTS = sorted(  # image rects on page (sort top-left to bottom-right)\n        [pymupdf.Rect(item[\"bbox\"]) for item in page.get_image_info()],\n        key=lambda b: (b.y1, b.x0),\n    )\n\n    def free_cells(column):\n  \"\"\"Return free areas in this column.\"\"\"\n        free_stripes = []  # y-value pairs wrapping a free area stripe\n        # intersecting images: block complete intersecting column stripe\n        col_imgs = [(b.y0, b.y1) for b in IMG_RECTS if abs(b & column) > 0]\n        s_y0 = column.y0  # top y-value of column\n        for y0, y1 in col_imgs:  # an image stripe\n            if y0 > s_y0 + FONTSIZE:  # image starts below last free btm value\n                free_stripes.append((s_y0, y0))  # store as free stripe\n            s_y0 = y1  # start of next free stripe\n\n        if s_y0 + FONTSIZE < column.y1:  # enough room to column bottom\n            free_stripes.append((s_y0, column.y1))\n\n        if free_stripes == []:  # covers \"no image in this column\"\n            free_stripes.append((column.y0, column.y1))\n\n        # make available cells of this column\n        CELLS = [pymupdf.Rect(column.x0, y0, column.x1, y1) for (y0, y1) in free_stripes]\n        return CELLS\n\n    # collection of available Story rectangles on page\n    CELLS = []\n    for i in range(COLS):\n        CELLS.extend(free_cells(TABLE[0][i]))\n\n    return page.number, prect, CELLS\n\nHTML = myzip.read(\"quickfox.html\").decode()\n\n# --------------------------------------------------------------\n# Make the Story object\n# --------------------------------------------------------------\nstory = pymupdf.Story(HTML)\n\n# modify the DOM somewhat\nbody = story.body  # access HTML body\nbody.set_properties(font=\"sans-serif\")  # and give it our font globally\n\n# modify certain nodes\npara = body.find(\"p\", None, None)  # find relevant nodes (here: paragraphs)\nwhile para != None:\n    para.set_properties(  # method MUST be used for existing nodes\n        indent=15,\n        fontsize=FONTSIZE,\n    )\n    para = para.find_next(\"p\", None, None)\n\n# we remove all image references, because the target PDF already has them\nimg = body.find(\"img\", None, None)\nwhile img != None:\n    next_img = img.find_next(\"img\", None, None)\n    img.remove()\n    img = next_img\n\npage_info = {}  # contains MEDIABOX and free CELLS per page\ndoc = pymupdf.open(docname)\nfor page in doc:\n    pno, mediabox, cells = analyze_page(page)\n    page_info[pno] = (mediabox, cells)\ndoc.close()  # close target PDF for now - re-open later\n\nfileobject = io.BytesIO()  # let DocumentWriter write to memory\nwriter = pymupdf.DocumentWriter(fileobject)  # define output writer\n\nmore = 1  # stop if this ever becomes zero\npno = 0  # count output pages\nwhile more:  # loop until all HTML text has been written\n    try:\n        MEDIABOX, CELLS = page_info[pno]\n    except KeyError:  # too much text space required: reduce fontsize?\n        raise ValueError(\"text does not fit on target PDF\")\n    dev = writer.begin_page(MEDIABOX)  # prepare a new output page\n    for cell in CELLS:  # iterate over free cells on this page\n        if not more:  # need to check this for every cell\n            continue\n        more, _ = story.place(cell)\n        story.draw(dev)\n    writer.end_page()  # finish the PDF page\n    pno += 1\n\nwriter.close()  # close DocumentWriter output\n\n# Re-open writer output, read its pages and overlay target pages with them.\n# The generated pages have same dimension as their targets.\nsrc = pymupdf.open(\"pdf\", fileobject)\ndoc = pymupdf.open(doc.name)\nfor page in doc:  # overlay every target page with the prepared text\n    if page.number >= src.page_count:\n        print(f\"Text only uses {src.page_count} target pages!\")\n        continue  # story did not need all target pages?\n\n    # overlay target page\n    page.show_pdf_page(page.rect, src, page.number)\n\n    # DEBUG start --- draw the text rectangles\n    # mb, cells = page_info[page.number]\n    # for cell in cells:\n    #     page.draw_rect(cell, color=(1, 0, 0))\n    # DEBUG stop ---\n\ndoc.ez_save(outname) \n```", "```py\n\"\"\"\nDemo script for basic HTML table support in Story objects\n\nOutputs a table with three columns that fits on one Letter page.\nThe content of each row is filled via the Story's template mechanism.\nColumn widths and row heights are automatically computed by MuPDF.\nSome styling via a CSS source is also demonstrated:\n\n- The table header row has a gray background\n- Each cell shows a border at its top\n- The Story's body uses the sans-serif font family\n- The text of one of the columns is set to blue\n\nDependencies\n-------------\nPyMuPDF v1.22.0 or later\n\"\"\"\nimport pymupdf\n\ntable_text = (  # the content of each table row\n    (\n        \"Length\",\n        \"integer\",\n  \"\"\"(Required) The number of bytes from the beginning of the line following the keyword stream to the last byte just before the keyword endstream. (There may be an additional EOL marker, preceding endstream, that is not included in the count and is not logically part of the stream data.) See “Stream Extent,” above, for further discussion.\"\"\",\n    ),\n    (\n        \"Filter\",\n        \"name or array\",\n  \"\"\"(Optional) The name of a filter to be applied in processing the stream data found between the keywords stream and endstream, or an array of such names. Multiple filters should be specified in the order in which they are to be applied.\"\"\",\n    ),\n    (\n        \"FFilter\",\n        \"name or array\",\n  \"\"\"(Optional; PDF 1.2) The name of a filter to be applied in processing the data found in the stream's external file, or an array of such names. The same rules apply as for Filter.\"\"\",\n    ),\n    (\n        \"FDecodeParms\",\n        \"dictionary or array\",\n  \"\"\"(Optional; PDF 1.2) A parameter dictionary, or an array of such dictionaries, used by the filters specified by FFilter. The same rules apply as for DecodeParms.\"\"\",\n    ),\n    (\n        \"DecodeParms\",\n        \"dictionary or array\",\n  \"\"\"(Optional) A parameter dictionary or an array of such dictionaries, used by the filters specified by Filter. If there is only one filter and that filter has parameters, DecodeParms must be set to the filter's parameter dictionary unless all the filter's parameters have their default values, in which case the DecodeParms entry may be omitted. If there are multiple filters and any of the filters has parameters set to nondefault values, DecodeParms must be an array with one entry for each filter: either the parameter dictionary for that filter, or the null object if that filter has no parameters (or if all of its parameters have their default values). If none of the filters have parameters, or if all their parameters have default values, the DecodeParms entry may be omitted. (See implementation note 7 in Appendix H.)\"\"\",\n    ),\n    (\n        \"DL\",\n        \"integer\",\n  \"\"\"(Optional; PDF 1.5) A non-negative integer representing the number of bytes in the decoded (defiltered) stream. It can be used to determine, for example, whether enough disk space is available to write a stream to a file.\\nThis value should be considered a hint only; for some stream filters, it may not be possible to determine this value precisely.\"\"\",\n    ),\n    (\n        \"F\",\n        \"file specification\",\n  \"\"\"(Optional; PDF 1.2) The file containing the stream data. If this entry is present, the bytes between stream and endstream are ignored, the filters are specified by FFilter rather than Filter, and the filter parameters are specified by FDecodeParms rather than DecodeParms. However, the Length entry should still specify the number of those bytes. (Usually, there are no bytes and Length is 0.) (See implementation note 46 in Appendix H.)\"\"\",\n    ),\n)\n\n# Only a minimal HTML source is required to provide the Story's working\nHTML = \"\"\"\n<html>\n<body><h2>TABLE 3.4 Entries common to all stream dictionaries</h2>\n<table>\n <tr>\n <th>KEY</th><th>TYPE</th><th>VALUE</th>\n </tr>\n <tr id=\"row\">\n <td id=\"col0\"></td><td id=\"col1\"></td><td id=\"col2\"></td>\n </tr>\n\"\"\"\n\n\"\"\"\n---------------------------------------------------------------------\nJust for demo purposes, set:\n- header cell background to gray\n- text color in col1 to blue\n- a border line at the top of all table cells\n- all text to the sans-serif font\n---------------------------------------------------------------------\n\"\"\"\nCSS = \"\"\"th {\n background-color: #aaa;\n}\n\ntd[id=\"col1\"] {\n color: blue;\n}\n\ntd, tr {\n border: 1px solid black;\n border-right-width: 0px;\n border-left-width: 0px;\n border-bottom-width: 0px;\n}\nbody {\n font-family: sans-serif;\n}\n\"\"\"\n\nstory = pymupdf.Story(HTML, user_css=CSS)  # define the Story\nbody = story.body  # access the HTML <body> of it\ntemplate = body.find(None, \"id\", \"row\")  # find the template with name \"row\"\nparent = template.parent  # access its parent i.e., the <table>\n\nfor col0, col1, col2 in table_text:\n    row = template.clone()  # make a clone of the row template\n    # add text to each cell in the duplicated row\n    row.find(None, \"id\", \"col0\").add_text(col0)\n    row.find(None, \"id\", \"col1\").add_text(col1)\n    row.find(None, \"id\", \"col2\").add_text(col2)\n    parent.append_child(row)  # add new row to <table>\ntemplate.remove()  # remove the template\n\n# Story is ready - output it via a writer\nwriter = pymupdf.DocumentWriter(__file__.replace(\".py\", \".pdf\"), \"compress\")\nmediabox = pymupdf.paper_rect(\"letter\")  # size of one output page\nwhere = mediabox + (36, 36, -36, -36)  # use this sub-area for the content\n\nmore = True  # detects end of output\nwhile more:\n    dev = writer.begin_page(mediabox)  # start a page, returning a device\n    more, filled = story.place(where)  # compute content fitting into \"where\"\n    story.draw(dev)  # output it to the page\n    writer.end_page()  # finalize the page\nwriter.close()  # close the output \n```", "```py\n\"\"\"\nDemo script using (Py-) MuPDF \"Story\" feature.\n\nThe following features are implemented:\n\n* Use of Story \"template\" feature to provide row content\n* Use database access (SQLITE) to fetch row content\n* Use ElementPosition feature to locate cell positions on page\n* Simulate feature \"Table Header Repeat\"\n* Simulate feature \"Cell Grid Lines\"\n\n\"\"\"\nimport io\nimport sqlite3\nimport sys\n\nimport pymupdf\n\n\"\"\"\nTable data. Used to populate a temporary SQL database, which will be processed by the script.\nIts only purpose is to avoid carrying around a separate database file.\n\"\"\"\ntable_data = \"\"\"China;Beijing;21542000;1.5%;2018\nJapan;Tokyo;13921000;11.2%;2019\nDR Congo;Kinshasa;12691000;13.2%;2017\nRussia;Moscow;12655050;8.7%;2021\nIndonesia;Jakarta;10562088;3.9%;2020\nEgypt;Cairo;10107125;9.3%;2022\nSouth Korea;Seoul;9508451;18.3%;2022\nMexico;Mexico City;9209944;7.3%;2020\nUnited Kingdom;London;9002488;13.4%;2020\nBangladesh;Dhaka;8906039;5.3%;2011\nPeru;Lima;8852000;26.3%;2012\nIran;Tehran;8693706;9.9%;2016\nThailand;Bangkok;8305218;11.6%;2010\nVietnam;Hanoi;8053663;8.3%;2019\nIraq;Baghdad;7682136;17.6%;2021\nSaudi Arabia;Riyadh;7676654;21.4%;2018\nHong Kong;Hong Kong;7291600;100%;2022\nColombia;Bogotá;7181469;13.9%;2011\nChile;Santiago;6310000;32.4%;2012\nTurkey;Ankara;5747325;6.8%;2021\nSingapore;Singapore;5453600;91.8%;2021\nAfghanistan;Kabul;4601789;11.5%;2021\nKenya;Nairobi;4397073;8.3%;2019\nJordan;Amman;4061150;36.4%;2021\nAlgeria;Algiers;3915811;8.9%;2011\nGermany;Berlin;3677472;4.4%;2021\nSpain;Madrid;3305408;7.0%;2021\nEthiopia;Addis Ababa;3040740;2.5%;2012\nKuwait;Kuwait City;2989000;70.3%;2018\nGuatemala;Guatemala City;2934841;16.7%;2020\nSouth Africa;Pretoria;2921488;4.9%;2011\nUkraine;Kyiv;2920873;6.7%;2021\nArgentina;Buenos Aires;2891082;6.4%;2010\nNorth Korea;Pyongyang;2870000;11.1%;2016\nUzbekistan;Tashkent;2860600;8.4%;2022\nItaly;Rome;2761632;4.7%;2022\nEcuador;Quito;2800388;15.7%;2020\nCameroon;Yaoundé;2765568;10.2%;2015\nZambia;Lusaka;2731696;14.0%;2020\nSudan;Khartoum;2682431;5.9%;2012\nBrazil;Brasília;2648532;1.2%;2012\nTaiwan;Taipei (de facto);2608332;10.9%;2020\nYemen;Sanaa;2575347;7.8%;2012\nAngola;Luanda;2571861;7.5%;2020\nBurkina Faso;Ouagadougou;2453496;11.1%;2019\nGhana;Accra;2388000;7.3%;2017\nSomalia;Mogadishu;2388000;14.0%;2021\nAzerbaijan;Baku;2303100;22.3%;2022\nCambodia;Phnom Penh;2281951;13.8%;2019\nVenezuela;Caracas;2245744;8.0%;2016\nFrance;Paris;2139907;3.3%;2022\nCuba;Havana;2132183;18.9%;2020\nZimbabwe;Harare;2123132;13.3%;2012\nSyria;Damascus;2079000;9.7%;2019\nBelarus;Minsk;1996553;20.8%;2022\nAustria;Vienna;1962779;22.0%;2022\nPoland;Warsaw;1863056;4.9%;2021\nPhilippines;Manila;1846513;1.6%;2020\nMali;Bamako;1809106;8.3%;2009\nMalaysia;Kuala Lumpur;1782500;5.3%;2019\nRomania;Bucharest;1716983;8.9%;2021\nHungary;Budapest;1706851;17.6%;2022\nCongo;Brazzaville;1696392;29.1%;2015\nSerbia;Belgrade;1688667;23.1%;2021\nUganda;Kampala;1680600;3.7%;2019\nGuinea;Conakry;1660973;12.3%;2014\nMongolia;Ulaanbaatar;1466125;43.8%;2020\nHonduras;Tegucigalpa;1444085;14.0%;2021\nSenegal;Dakar;1438725;8.5%;2021\nNiger;Niamey;1334984;5.3%;2020\nUruguay;Montevideo;1319108;38.5%;2011\nBulgaria;Sofia;1307439;19.0%;2021\nOman;Muscat;1294101;28.6%;2021\nCzech Republic;Prague;1275406;12.1%;2022\nMadagascar;Antananarivo;1275207;4.4%;2018\nKazakhstan;Astana;1239900;6.5%;2022\nNigeria;Abuja;1235880;0.6%;2011\nGeorgia;Tbilisi;1201769;32.0%;2022\nMauritania;Nouakchott;1195600;25.9%;2019\nQatar;Doha;1186023;44.1%;2020\nLibya;Tripoli;1170000;17.4%;2019\nMyanmar;Naypyidaw;1160242;2.2%;2014\nRwanda;Kigali;1132686;8.4%;2012\nMozambique;Maputo;1124988;3.5%;2020\nDominican Republic;Santo Domingo;1111838;10.0%;2010\nArmenia;Yerevan;1096100;39.3%;2021\nKyrgyzstan;Bishkek;1074075;16.5%;2021\nSierra Leone;Freetown;1055964;12.5%;2015\nNicaragua;Managua;1055247;15.4%;2020\nCanada;Ottawa;1017449;2.7%;2021\nPakistan;Islamabad;1014825;0.4%;2017\nLiberia;Monrovia;1010970;19.5%;2008\nUnited Arab Emirates;Abu Dhabi;1010092;10.8%;2020\nMalawi;Lilongwe;989318;5.0%;2018\nHaiti;Port-au-Prince;987310;8.6%;2015\nSweden;Stockholm;978770;9.4%;2021\nEritrea;Asmara;963000;26.6%;2020\nIsrael;Jerusalem;936425;10.5%;2019\nLaos;Vientiane;927724;12.5%;2019\nChad;N'Djamena;916000;5.3%;2009\nNetherlands;Amsterdam;905234;5.2%;2022\nCentral African Republic;Bangui;889231;16.3%;2020\nPanama;Panama City;880691;20.2%;2013\nTajikistan;Dushanbe;863400;8.9%;2020\nNepal;Kathmandu;845767;2.8%;2021\nTogo;Lomé;837437;9.7%;2010\nTurkmenistan;Ashgabat;791000;12.5%;2017\nMoldova;Chişinău;779300;25.5%;2019\nCroatia;Zagreb;769944;19.0%;2021\nGabon;Libreville;703904;30.1%;2013\nNorway;Oslo;697010;12.9%;2021\nMacau;Macau;671900;97.9%;2022\nUnited States;Washington D.C.;670050;0.2%;2021\nJamaica;Kingston;662491;23.4%;2019\nFinland;Helsinki;658864;11.9%;2021\nTunisia;Tunis;638845;5.2%;2014\nDenmark;Copenhagen;638117;10.9%;2021\nGreece;Athens;637798;6.1%;2021\nLatvia;Riga;605802;32.3%;2021\nDjibouti;Djibouti (city);604013;54.6%;2012\nIreland;Dublin;588233;11.8%;2022\nMorocco;Rabat;577827;1.6%;2014\nLithuania;Vilnius;576195;20.7%;2022\nEl Salvador;San Salvador;570459;9.0%;2019\nAlbania;Tirana;557422;19.5%;2011\nNorth Macedonia;Skopje;544086;25.9%;2015\nSouth Sudan;Juba;525953;4.9%;2017\nParaguay;Asunción;521559;7.8%;2020\nPortugal;Lisbon;509614;5.0%;2020\nGuinea-Bissau;Bissau;492004;23.9%;2015\nSlovakia;Bratislava;440948;8.1%;2020\nEstonia;Tallinn;438341;33.0%;2021\nAustralia;Canberra;431380;1.7%;2020\nNamibia;Windhoek;431000;17.0%;2020\nTanzania;Dodoma;410956;0.6%;2012\nPapua New Guinea;Port Moresby;364145;3.7%;2011\nIvory Coast;Yamoussoukro;361893;1.3%;2020\nLebanon;Beirut;361366;6.5%;2014\nBolivia;Sucre;360544;3.0%;2022\nPuerto Rico (US);San Juan;342259;10.5%;2020\nCosta Rica;San José;342188;6.6%;2018\nLesotho;Maseru;330760;14.5%;2016\nCyprus;Nicosia;326739;26.3%;2016\nEquatorial Guinea;Malabo;297000;18.2%;2018\nSlovenia;Ljubljana;285604;13.5%;2021\nEast Timor;Dili;277279;21.0%;2015\nBosnia and Herzegovina;Sarajevo;275524;8.4%;2013\nBahamas;Nassau;274400;67.3%;2016\nBotswana;Gaborone;273602;10.6%;2020\nBenin;Porto-Novo;264320;2.0%;2013\nSuriname;Paramaribo;240924;39.3%;2012\nIndia;New Delhi;249998;0.0%;2011\nSahrawi Arab Democratic Republic;Laayoune (claimed) - Tifariti (de facto);217732 - 3000;—;2014\nNew Zealand;Wellington;217000;4.2%;2021\nBahrain;Manama;200000;13.7%;2020\nKosovo;Pristina;198897;12.0%;2011\nMontenegro;Podgorica;190488;30.3%;2020\nBelgium;Brussels;187686;1.6%;2022\nCape Verde;Praia;159050;27.1%;2017\nMauritius;Port Louis;147066;11.3%;2018\nCuraçao (Netherlands);Willemstad;136660;71.8%;2011\nBurundi;Gitega;135467;1.1%;2020\nSwitzerland;Bern (de facto);134591;1.5%;2020\nTransnistria;Tiraspol;133807;38.5%;2015\nMaldives;Malé;133412;25.6%;2014\nIceland;Reykjavík;133262;36.0%;2021\nLuxembourg;Luxembourg City;124509;19.5%;2021\nGuyana;Georgetown;118363;14.7%;2012\nBhutan;Thimphu;114551;14.7%;2017\nComoros;Moroni;111326;13.5%;2016\nBarbados;Bridgetown;110000;39.1%;2014\nSri Lanka;Sri Jayawardenepura Kotte;107925;0.5%;2012\nBrunei;Bandar Seri Begawan;100700;22.6%;2007\nEswatini;Mbabane;94874;8.0%;2010\nNew Caledonia (France);Nouméa;94285;32.8%;2019\nFiji;Suva;93970;10.2%;2017\nSolomon Islands;Honiara;92344;13.0%;2021\nRepublic of Artsakh;Stepanakert;75000;62.5%;2021\nGambia;Banjul;73000;2.8%;2013\nSão Tomé and Príncipe;São Tomé;71868;32.2%;2015\nKiribati;Tarawa;70480;54.7%;2020\nVanuatu;Port Vila;51437;16.1%;2016\nNorthern Mariana Islands (USA);Saipan;47565;96.1%;2017\nSamoa;Apia;41611;19.0%;2021\nPalestine;Ramallah (de facto);38998;0.8%;2017\nMonaco;Monaco;38350;104.5%;2020\nJersey (UK);Saint Helier;37540;34.2%;2018\nTrinidad and Tobago;Port of Spain;37074;2.4%;2011\nCayman Islands (UK);George Town;34399;50.5%;2021\nGibraltar (UK);Gibraltar;34003;104.1%;2020\nGrenada;St. George's;33734;27.1%;2012\nAruba (Netherlands);Oranjestad;28294;26.6%;2010\nIsle of Man (UK);Douglas;27938;33.2%;2011\nMarshall Islands;Majuro;27797;66.1%;2011\nTonga;Nukuʻalofa;27600;26.0%;2022\nSeychelles;Victoria;26450;24.8%;2010\nFrench Polynesia (France);Papeete;26926;8.9%;2017\nAndorra;Andorra la Vella;22873;28.9%;2022\nFaroe Islands (Denmark);Tórshavn;22738;43.0%;2022\nAntigua and Barbuda;St. John's;22219;23.8%;2011\nBelize;Belmopan;20621;5.2%;2016\nSaint Lucia;Castries;20000;11.1%;2013\nGuernsey (UK);Saint Peter Port;18958;30.1%;2019\nGreenland (Denmark);Nuuk;18800;33.4%;2021\nDominica;Roseau;14725;20.3%;2011\nSaint Kitts and Nevis;Basseterre;14000;29.4%;2018\nSaint Vincent and the Grenadines;Kingstown;12909;12.4%;2012\nBritish Virgin Islands (UK);Road Town;12603;40.5%;2012\nÅland (Finland);Mariehamn;11736;39.0%;2021\nU.S. Virgin Islands (US);Charlotte Amalie;14477;14.5%;2020\nMicronesia;Palikir;6647;5.9%;2010\nTuvalu;Funafuti;6320;56.4%;2017\nMalta;Valletta;5827;1.1%;2019\nLiechtenstein;Vaduz;5774;14.8%;2021\nSaint Pierre and Miquelon (France);Saint-Pierre;5394;91.7%;2019\nCook Islands (NZ);Avarua;4906;28.9%;2016\nSan Marino;City of San Marino;4061;12.0%;2021\nTurks and Caicos Islands (UK);Cockburn Town;3720;8.2%;2016\nAmerican Samoa (USA);Pago Pago;3656;8.1%;2010\nSaint Martin (France);Marigot;3229;10.1%;2017\nSaint Barthélemy (France);Gustavia;2615;24.1%;2010\nFalkland Islands (UK);Stanley;2460;65.4%;2016\nSvalbard (Norway);Longyearbyen;2417;82.2%;2020\nSint Maarten (Netherlands);Philipsburg;1894;4.3%;2011\nChristmas Island (Australia);Flying Fish Cove;1599;86.8%;2016\nAnguilla (UK);The Valley;1067;6.8%;2011\nGuam (US);Hagåtña;1051;0.6%;2010\nWallis and Futuna (France);Mata Utu;1029;8.9%;2018\nBermuda (UK);Hamilton;854;1.3%;2016\nNauru;Yaren (de facto);747;6.0%;2011\nSaint Helena (UK);Jamestown;629;11.6%;2016\nNiue (NZ);Alofi;597;30.8%;2017\nTokelau (NZ);Atafu;541;29.3%;2016\nVatican City;Vatican City (city-state);453;100%;2019\nMontserrat (UK);Brades (de facto) - Plymouth (de jure);449 - 0;-;2011\nNorfolk Island (Australia);Kingston;341;-;2015\nPalau;Ngerulmud;271;1.5%;2010\nCocos (Keeling) Islands (Australia);West Island;134;24.6%;2011\nPitcairn Islands (UK);Adamstown;40;100.0%;2021\nSouth Georgia and the South Sandwich Islands (UK);King Edward Point;22;73.3%;2018\"\"\"\n\n# -------------------------------------------------------------------\n# HTML template for the report. We define no table header <th> items\n# because this is done in post processing.\n# The actual template part is the table row, identified by id \"row\".\n# The content of each cell will be filled using the respective id.\n# -------------------------------------------------------------------\nHTML = \"\"\"\n <h1 style=\"text-align:center\">World Capital Cities</h1>\n <p><i>Percent \"%\" is city population as a percentage of the country, as of \"Year\".</i>\n </p><p></p>\n <table>\n <tr id=\"row\">\n <td id=\"country\"></td>\n <td id=\"capital\"></td>\n <td id=\"population\"></td>\n <td id=\"percent\"></td>\n <td id=\"year\"></td>\n </tr>\n </table>\n\"\"\"\n\n# -------------------------------------------------------------------\n# Sets font-family globally to sans-serif, and text-align to right\n# for the numerical table columns.\n# -------------------------------------------------------------------\nCSS = \"\"\"\nbody {\n font-family: sans-serif;\n}\ntd[id=\"population\"], td[id=\"percent\"], td[id=\"year\"] {\n text-align: right;\n padding-right: 2px;\n}\"\"\"\n\n# -------------------------------------------------------------------\n# recorder function for cell positions\n# -------------------------------------------------------------------\ncoords = {}  # stores cell gridline coordinates\n\ndef recorder(elpos):\n  \"\"\"We only record positions of table rows and cells.\n\n Information is stored in \"coords\" with page number as key.\n \"\"\"\n    global coords  # dictionary of row and cell coordinates per page\n    if elpos.open_close != 2:  # only consider coordinates provided at \"close\"\n        return\n    if elpos.id not in (\"row\", \"country\", \"capital\", \"population\", \"percent\", \"year\"):\n        return  # only look at row / cell content\n\n    rect = pymupdf.Rect(elpos.rect)  # cell rectangle\n    if rect.y1 > elpos.filled:  # ignore stuff below the filled rectangle\n        return\n\n    # per page, we store the floats top-most y, right-most x, column left\n    # and row bottom borders.\n    x, y, x1, y0 = coords.get(elpos.page, (set(), set(), 0, sys.maxsize))\n\n    if elpos.id != \"row\":\n        x.add(rect.x0)  # add cell left border coordinate\n        if rect.x1 > x1:  # store right-most cell border on page\n            x1 = rect.x1\n    else:\n        y.add(rect.y1)  # add row bottom border coordinate\n        if rect.y0 < y0:  # store top-most cell border per page\n            y0 = rect.y0\n\n    coords[elpos.page] = (x, y, x1, y0)  # write back info per page\n    return\n\n# -------------------------------------------------------------------\n# define database access: make an intermediate memory database for\n# our demo purposes.\n# -------------------------------------------------------------------\ndbfilename = \":memory:\"  # the SQLITE database file name\ndatabase = sqlite3.connect(dbfilename)  # open database\ncursor = database.cursor()  # multi-purpose database cursor\n\n# Define and fill the SQLITE database\ncursor.execute(\n  \"\"\"CREATE TABLE capitals (Country text, Capital text, Population text, Percent text, Year text)\"\"\"\n)\n\nfor value in table_data.splitlines():\n    cursor.execute(\"INSERT INTO capitals VALUES (?,?,?,?,?)\", value.split(\";\"))\n\n# select statement for the rows - let SQL also sort it for us\nselect = \"\"\"SELECT * FROM capitals ORDER BY \"Country\" \"\"\"\n\n# -------------------------------------------------------------------\n# define the HTML Story and fill it with database data\n# -------------------------------------------------------------------\nstory = pymupdf.Story(HTML, user_css=CSS)\nbody = story.body  # access the HTML body detail\n\ntemplate = body.find(None, \"id\", \"row\")  # find the template part\ntable = body.find(\"table\", None, None)  # find start of table\n\n# read the rows from the database and put them all in one Python list\n# NOTE: instead, we might fetch rows one by one (advisable for large volumes)\n\ncursor.execute(select)  # execute cursor, and ...\nrows = cursor.fetchall()  # read out what was found\ndatabase.close()  # no longer needed\n\nfor country, capital, population, percent, year in rows:  # iterate through the row\n    row = template.clone()  # clone the template to report each row\n    row.find(None, \"id\", \"country\").add_text(country)\n    row.find(None, \"id\", \"capital\").add_text(capital)\n    row.find(None, \"id\", \"population\").add_text(population)\n    row.find(None, \"id\", \"percent\").add_text(percent)\n    row.find(None, \"id\", \"year\").add_text(year)\n\n    table.append_child(row)\n\ntemplate.remove()  # remove the template\n\n# -------------------------------------------------------------------\n# generate the PDF and write it to memory\n# -------------------------------------------------------------------\nfp = io.BytesIO()\nwriter = pymupdf.DocumentWriter(fp)\nmediabox = pymupdf.paper_rect(\"letter\")  # use pages in Letter format\nwhere = mediabox + (36, 36, -36, -72)  # leave page borders\nmore = True\npage = 0\nwhile more:\n    dev = writer.begin_page(mediabox)  # make a new page\n    if page > 0:  # leave room above the cells for inserting header row\n        delta = (0, 20, 0, 0)\n    else:\n        delta = (0, 0, 0, 0)\n    more, filled = story.place(where + delta)  # arrange content on this rectangle\n    story.element_positions(recorder, {\"page\": page, \"filled\": where.y1})\n    story.draw(dev)  # write content to page\n    writer.end_page()  # finish the page\n    page += 1\nwriter.close()  # close the PDF\n\n# -------------------------------------------------------------------\n# re-open memory PDF for inserting gridlines and header rows\n# -------------------------------------------------------------------\ndoc = pymupdf.open(\"pdf\", fp)\nfor page in doc:\n    page.wrap_contents()  # ensure all \"cm\" commands are properly wrapped\n    x, y, x1, y0 = coords[page.number]  # read coordinates of the page\n    x = sorted(list(x)) + [x1]  # list of cell left-right borders\n    y = [y0] + sorted(list(y))  # list of cell top-bottom borders\n    shape = page.new_shape()  # make a canvas to draw upon\n\n    for item in y:  # draw horizontal lines (one under each row)\n        shape.draw_line((x[0] - 2, item), (x[-1] + 2, item))\n\n    for i in range(len(y)):  # alternating row coloring\n        if i % 2:\n            rect = (x[0] - 2, y[i - 1], x[-1] + 2, y[i])\n            shape.draw_rect(rect)\n\n    for i in range(len(x)):  # draw vertical lines\n        d = 2 if i == len(x) - 1 else -2\n        shape.draw_line((x[i] + d, y[0]), (x[i] + d, y[-1]))\n\n    # Write header row above table content\n    y0 -= 5  # bottom coord for header row text\n    shape.insert_text((x[0], y0), \"Country\", fontname=\"hebo\", fontsize=12)\n    shape.insert_text((x[1], y0), \"Capital\", fontname=\"hebo\", fontsize=12)\n    shape.insert_text((x[2], y0), \"Population\", fontname=\"hebo\", fontsize=12)\n    shape.insert_text((x[3], y0), \"  %\", fontname=\"hebo\", fontsize=12)\n    shape.insert_text((x[4], y0), \"Year\", fontname=\"hebo\", fontsize=12)\n\n    # Write page footer\n    y0 = page.rect.height - 50  # top coordinate of footer bbox\n    bbox = pymupdf.Rect(0, y0, page.rect.width, y0 + 20)  # footer bbox\n    page.insert_textbox(\n        bbox,\n        f\"World Capital Cities, Page {page.number+1} of {doc.page_count}\",\n        align=pymupdf.TEXT_ALIGN_CENTER,\n    )\n    shape.finish(width=0.3, color=0.5, fill=0.9)  # rectangles and gray lines\n    shape.commit(overlay=False)  # put the drawings in background\n\ndoc.subset_fonts()\ndoc.save(__file__.replace(\".py\", \".pdf\"), deflate=True, garbage=4, pretty=True)\ndoc.close() \n```", "```py\nimport pymupdf\n\nMEDIABOX = pymupdf.paper_rect(\"letter\")  # output page format: Letter\nGRIDSPACE = pymupdf.Rect(100, 100, 400, 400)\nGRID = pymupdf.make_table(GRIDSPACE, rows=2, cols=2)\nCELLS = [GRID[i][j] for i in range(2) for j in range(2)]\ntext_table = (\"A\", \"B\", \"C\", \"D\")\nwriter = pymupdf.DocumentWriter(__file__.replace(\".py\", \".pdf\"))  # create the writer\n\ndevice = writer.begin_page(MEDIABOX)  # make new page\nfor i, text in enumerate(text_table):\n    story = pymupdf.Story(em=1)\n    body = story.body\n    with body.add_paragraph() as para:\n        para.set_bgcolor(\"#ecc\")\n        para.set_pagebreak_after()  # fills whole cell with bgcolor\n        para.set_align(\"center\")\n        para.set_fontsize(16)\n        para.add_text(f\"\\n\\n\\n{text}\")\n    story.place(CELLS[i])\n    story.draw(device)\n    del story\n\nwriter.end_page()  # finish page\n\nwriter.close()  # close output file \n```", "```py\n\"\"\"\nDemo script PyMuPDF Story class\n-------------------------------\n\nRead the Python sources in the script directory and create a PDF of all their\nsource codes.\n\nThe following features are included as a specialty:\n1\\. HTML source for pymupdf.Story created via Python API exclusively\n2\\. Separate Story objects for page headers and footers\n3\\. Use of HTML \"id\" elements for identifying source start pages\n4\\. Generate a Table of Contents pointing to source file starts. This\n - uses the new Stoy callback feature\n - uses Story also for making the TOC page(s)\n\n\"\"\"\nimport io\nimport os\nimport time\n\nimport pymupdf\n\nTHISDIR = os.path.dirname(os.path.abspath(__file__))\nTOC = []  # this will contain the TOC list items\nCURRENT_ID = \"\"  # currently processed filename - stored by recorder func\nMEDIABOX = pymupdf.paper_rect(\"a4-l\")  # chosen page size\nWHERE = MEDIABOX + (36, 50, -36, -36)  # sub rectangle for source content\n# location of the header rectangle\nHDR_WHERE = (36, 5, MEDIABOX.width - 36, 40)\n# location of the footer rectangle\nFTR_WHERE = (36, MEDIABOX.height - 36, MEDIABOX.width - 36, MEDIABOX.height)\n\ndef recorder(elpos):\n  \"\"\"Callback function invoked during story.place().\n This function generates / collects all TOC items and updates the value of\n CURRENT_ID - which is used to update the footer line of each page.\n \"\"\"\n    global TOC, CURRENT_ID\n    if not elpos.open_close & 1:  # only consider \"open\" items\n        return\n    level = elpos.heading\n    y0 = elpos.rect[1]  # top of written rectangle (use for TOC)\n    if level > 0:  # this is a header (h1 - h6)\n        pno = elpos.page + 1  # the page number\n        TOC.append(\n            (\n                level,\n                elpos.text,\n                elpos.page + 1,\n                y0,\n            )\n        )\n        return\n\n    CURRENT_ID = elpos.id if elpos.id else \"\"  # update for footer line\n    return\n\ndef header_story(text):\n  \"\"\"Make the page header\"\"\"\n    header = pymupdf.Story()\n    hdr_body = header.body\n    hdr_body.add_paragraph().set_properties(\n        align=pymupdf.TEXT_ALIGN_CENTER,\n        bgcolor=\"#eee\",\n        font=\"sans-serif\",\n        bold=True,\n        fontsize=12,\n        color=\"green\",\n    ).add_text(text)\n    return header\n\ndef footer_story(text):\n  \"\"\"Make the page footer\"\"\"\n    footer = pymupdf.Story()\n    ftr_body = footer.body\n    ftr_body.add_paragraph().set_properties(\n        bgcolor=\"#eee\",\n        align=pymupdf.TEXT_ALIGN_CENTER,\n        color=\"blue\",\n        fontsize=10,\n        font=\"sans-serif\",\n    ).add_text(text)\n    return footer\n\ndef code_printer(outfile):\n  \"\"\"Output the generated PDF to outfile.\"\"\"\n    global MAX_TITLE_LEN\n    where = +WHERE\n    writer = pymupdf.DocumentWriter(outfile, \"\")\n    print_time = time.strftime(\"%Y-%m-%d %H:%M:%S (%z)\")\n    thispath = os.path.abspath(os.curdir)\n    basename = os.path.basename(thispath)\n\n    story = pymupdf.Story()\n    body = story.body\n    body.set_properties(font=\"sans-serif\")\n\n    text = f\"Python sources in folder '{THISDIR}'\"\n\n    body.add_header(1).add_text(text)  # the only h1 item in the story\n\n    files = os.listdir(THISDIR)  # list / select Python files in our directory\n    i = 1\n    for code_file in files:\n        if not code_file.endswith(\".py\"):\n            continue\n\n        # read Python file source\n        fileinput = open(os.path.join(THISDIR, code_file), \"rb\")\n        text = fileinput.read().decode()\n        fileinput.close()\n\n        # make level 2 header\n        hdr = body.add_header(2)\n        if i > 1:\n            hdr.set_pagebreak_before()\n        hdr.add_text(f\"{i}. Listing of file '{code_file}'\")\n\n        # Write the file code\n        body.add_codeblock().set_bgcolor((240, 255, 210)).set_color(\"blue\").set_id(\n            code_file\n        ).set_fontsize(10).add_text(text)\n\n        # Indicate end of a source file\n        body.add_paragraph().set_align(pymupdf.TEXT_ALIGN_CENTER).add_text(\n            f\"---------- End of File '{code_file}' ----------\"\n        )\n        i += 1  # update file counter\n\n    i = 0\n    while True:\n        i += 1\n        device = writer.begin_page(MEDIABOX)\n        # create Story objects for header, footer and the rest.\n        header = header_story(f\"Python Files in '{THISDIR}'\")\n        hdr_ok, _ = header.place(HDR_WHERE)\n        if hdr_ok != 0:\n            raise ValueError(\"header does not fit\")\n        header.draw(device, None)\n\n        # --------------------------------------------------------------\n        # Write the file content.\n        # --------------------------------------------------------------\n        more, filled = story.place(where)\n        # Inform the callback function\n        # Args:\n        #   recorder: the Python function to call\n        #   {}: dictionary containing anything - we pass the page number\n        story.element_positions(recorder, {\"page\": i - 1})\n        story.draw(device, None)\n\n        # --------------------------------------------------------------\n        # Make / write page footer.\n        # We MUST have a paragraph b/o background color / alignment\n        # --------------------------------------------------------------\n        if CURRENT_ID:\n            text = f\"File '{CURRENT_ID}' printed at {print_time}{chr(160)*5}{'-'*10}{chr(160)*5}Page {i}\"\n        else:\n            text = f\"Printed at {print_time}{chr(160)*5}{'-'*10}{chr(160)*5}Page {i}\"\n        footer = footer_story(text)\n        # write the page footer\n        ftr_ok, _ = footer.place(FTR_WHERE)\n        if ftr_ok != 0:\n            raise ValueError(\"footer does not fit\")\n        footer.draw(device, None)\n\n        writer.end_page()\n        if more == 0:\n            break\n    writer.close()\n\nif __name__ == \"__main__\" or os.environ.get('PYTEST_CURRENT_TEST'):\n    fileptr1 = io.BytesIO()\n    t0 = time.perf_counter()\n    code_printer(fileptr1)  # make the PDF\n    t1 = time.perf_counter()\n    doc = pymupdf.open(\"pdf\", fileptr1)\n    old_count = doc.page_count\n    # -----------------------------------------------------------------------------\n    # Post-processing step to make / insert the toc\n    # This also works using pymupdf.Story:\n    # - make a new PDF in memory which contains pages with the TOC text\n    # - add these TOC pages to the end of the original file\n    # - search item text on the inserted pages and cover each with a PDF link\n    # - move the TOC pages to the front of the document\n    # -----------------------------------------------------------------------------\n    story = pymupdf.Story()\n    body = story.body\n    body.add_header(1).set_font(\"sans-serif\").add_text(\"Table of Contents\")\n    # prefix TOC with an entry pointing to this page\n    TOC.insert(0, [1, \"Table of Contents\", old_count + 1, 36])\n\n    for item in TOC[1:]:  # write the file name headers as TOC lines\n        body.add_paragraph().set_font(\"sans-serif\").add_text(\n            item[1] + f\" - ({item[2]})\"\n        )\n    fileptr2 = io.BytesIO()  # put TOC pages to a separate PDF initially\n    writer = pymupdf.DocumentWriter(fileptr2)\n    i = 1\n    more = 1\n    while more:\n        device = writer.begin_page(MEDIABOX)\n        header = header_story(f\"Python Files in '{THISDIR}'\")\n        # write the page header\n        hdr_ok, _ = header.place(HDR_WHERE)\n        header.draw(device, None)\n\n        more, filled = story.place(WHERE)\n        story.draw(device, None)\n\n        footer = footer_story(f\"TOC-{i}\")  # separate page numbering scheme\n        # write the page footer\n        ftr_ok, _ = footer.place(FTR_WHERE)\n        footer.draw(device, None)\n        writer.end_page()\n        i += 1\n\n    writer.close()\n    doc2 = pymupdf.open(\"pdf\", fileptr2)  # open TOC pages as another PDF\n    doc.insert_pdf(doc2)  # and append to the main PDF\n    new_range = range(old_count, doc.page_count)  # the TOC page numbers\n    pages = [doc[i] for i in new_range]  # these are the TOC pages within main PDF\n    for item in TOC:  # search for TOC item text to get its rectangle\n        for page in pages:\n            rl = page.search_for(item[1], flags=~(pymupdf.TEXT_PRESERVE_LIGATURES | pymupdf.TEXT_PRESERVE_SPANS))\n            if rl != []:  # this text must be on next page\n                break\n        rect = rl[0]  # rectangle of TOC item text\n        link = {  # make a link from it\n            \"kind\": pymupdf.LINK_GOTO,\n            \"from\": rect,\n            \"to\": pymupdf.Point(0, item[3]),\n            \"page\": item[2] - 1,\n        }\n        page.insert_link(link)\n\n    # insert the TOC in the main PDF\n    doc.set_toc(TOC)\n    # move all the TOC pages to the desired place (1st page here)\n    for i in new_range:\n        doc.move_page(doc.page_count - 1, 0)\n    doc.ez_save(__file__.replace(\".py\", \".pdf\")) \n```", "```py\nimport pymupdf\nimport json\n\nmy_json =  \"\"\"\n[\n {\n \"name\" :           \"Five-storied Pagoda\",\n \"temple\" :         \"Rurikō-ji\",\n \"founded\" :        \"middle Muromachi period, 1442\",\n \"region\" :         \"Yamaguchi, Yamaguchi\",\n \"position\" :       \"34.190181,131.472917\"\n },\n {\n \"name\" :           \"Founder's Hall\",\n \"temple\" :         \"Eihō-ji\",\n \"founded\" :        \"early Muromachi period\",\n \"region\" :         \"Tajimi, Gifu\",\n \"position\" :       \"35.346144,137.129189\"\n },\n {\n \"name\" :           \"Fudōdō\",\n \"temple\" :         \"Kongōbu-ji\",\n \"founded\" :        \"early Kamakura period\",\n \"region\" :         \"Kōya, Wakayama\",\n \"position\" :       \"34.213103,135.580397\"\n },\n {\n \"name\" :           \"Goeidō\",\n \"temple\" :         \"Nishi Honganji\",\n \"founded\" :        \"Edo period, 1636\",\n \"region\" :         \"Kyoto\",\n \"position\" :       \"34.991394,135.751689\"\n },\n {\n \"name\" :           \"Golden Hall\",\n \"temple\" :         \"Murō-ji\",\n \"founded\" :        \"early Heian period\",\n \"region\" :         \"Uda, Nara\",\n \"position\" :       \"34.536586819357986,136.0395548452301\"\n },\n {\n \"name\" :           \"Golden Hall\",\n \"temple\" :         \"Fudō-in\",\n \"founded\" :        \"late Muromachi period, 1540\",\n \"region\" :         \"Hiroshima\",\n \"position\" :       \"34.427014,132.471117\"\n },\n {\n \"name\" :           \"Golden Hall\",\n \"temple\" :         \"Ninna-ji\",\n \"founded\" :        \"Momoyama period, 1613\",\n \"region\" :         \"Kyoto\",\n \"position\" :       \"35.031078,135.713811\"\n },\n {\n \"name\" :           \"Golden Hall\",\n \"temple\" :         \"Mii-dera\",\n \"founded\" :        \"Momoyama period, 1599\",\n \"region\" :         \"Ōtsu, Shiga\",\n \"position\" :       \"35.013403,135.852861\"\n },\n {\n \"name\" :           \"Golden Hall\",\n \"temple\" :         \"Tōshōdai-ji\",\n \"founded\" :        \"Nara period, 8th century\",\n \"region\" :         \"Nara, Nara\",\n \"position\" :       \"34.675619,135.784842\"\n },\n {\n \"name\" :           \"Golden Hall\",\n \"temple\" :         \"Tō-ji\",\n \"founded\" :        \"Momoyama period, 1603\",\n \"region\" :         \"Kyoto\",\n \"position\" :       \"34.980367,135.747686\"\n },\n {\n \"name\" :           \"Golden Hall\",\n \"temple\" :         \"Tōdai-ji\",\n \"founded\" :        \"middle Edo period, 1705\",\n \"region\" :         \"Nara, Nara\",\n \"position\" :       \"34.688992,135.839822\"\n },\n {\n \"name\" :           \"Golden Hall\",\n \"temple\" :         \"Hōryū-ji\",\n \"founded\" :        \"Asuka period, by 693\",\n \"region\" :         \"Ikaruga, Nara\",\n \"position\" :       \"34.614317,135.734458\"\n },\n {\n \"name\" :           \"Golden Hall\",\n \"temple\" :         \"Daigo-ji\",\n \"founded\" :        \"late Heian period\",\n \"region\" :         \"Kyoto\",\n \"position\" :       \"34.951481,135.821747\"\n },\n {\n \"name\" :           \"Keigū-in Main Hall\",\n \"temple\" :         \"Kōryū-ji\",\n \"founded\" :        \"early Kamakura period, before 1251\",\n \"region\" :         \"Kyoto\",\n \"position\" :       \"35.015028,135.705425\"\n },\n {\n \"name\" :           \"Konpon-chūdō\",\n \"temple\" :         \"Enryaku-ji\",\n \"founded\" :        \"early Edo period, 1640\",\n \"region\" :         \"Ōtsu, Shiga\",\n \"position\" :       \"35.070456,135.840942\"\n },\n {\n \"name\" :           \"Korō\",\n \"temple\" :         \"Tōshōdai-ji\",\n \"founded\" :        \"early Kamakura period, 1240\",\n \"region\" :         \"Nara, Nara\",\n \"position\" :       \"34.675847,135.785069\"\n },\n {\n \"name\" :           \"Kōfūzō\",\n \"temple\" :         \"Hōryū-ji\",\n \"founded\" :        \"early Heian period\",\n \"region\" :         \"Ikaruga, Nara\",\n \"position\" :       \"34.614439,135.735428\"\n },\n {\n \"name\" :           \"Large Lecture Hall\",\n \"temple\" :         \"Hōryū-ji\",\n \"founded\" :        \"middle Heian period, 990\",\n \"region\" :         \"Ikaruga, Nara\",\n \"position\" :       \"34.614783,135.734175\"\n },\n {\n \"name\" :           \"Lecture Hall\",\n \"temple\" :         \"Zuiryū-ji\",\n \"founded\" :        \"early Edo period, 1655\",\n \"region\" :         \"Takaoka, Toyama\",\n \"position\" :       \"36.735689,137.010019\"\n },\n {\n \"name\" :           \"Lecture Hall\",\n \"temple\" :         \"Tōshōdai-ji\",\n \"founded\" :        \"Nara period, 763\",\n \"region\" :         \"Nara, Nara\",\n \"position\" :       \"34.675933,135.784842\"\n },\n {\n \"name\" :           \"Lotus Flower Gate\",\n \"temple\" :         \"Tō-ji\",\n \"founded\" :        \"early Kamakura period\",\n \"region\" :         \"Kyoto\",\n \"position\" :       \"34.980678,135.746314\"\n },\n {\n \"name\" :           \"Main Hall\",\n \"temple\" :         \"Akishinodera\",\n \"founded\" :        \"early Kamakura period\",\n \"region\" :         \"Nara, Nara\",\n \"position\" :       \"34.703769,135.776189\"\n }\n]\n\n\"\"\"\n\n# the result is a Python dictionary:\nmy_dict = json.loads(my_json)\n\nMEDIABOX = pymupdf.paper_rect(\"letter\")  # output page format: Letter\nWHERE = MEDIABOX + (36, 36, -36, -36)\nwriter = pymupdf.DocumentWriter(\"json-example.pdf\")  # create the writer\n\nstory = pymupdf.Story()\nbody = story.body\n\nfor i, entry in enumerate(my_dict):\n\n    for attribute, value in entry.items():\n        para = body.add_paragraph()\n\n        if attribute == \"position\":\n            para.set_fontsize(10)\n            para.add_link(f\"www.google.com/maps/@{value},14z\")\n        else:\n            para.add_span()\n            para.set_color(\"#990000\")\n            para.set_fontsize(14)\n            para.set_bold()\n            para.add_text(f\"{attribute} \")\n            para.add_span()\n            para.set_fontsize(18)\n            para.add_text(f\"{value}\")\n\n    body.add_horizontal_line()\n\n# This while condition will check a value from the Story `place` method\n# for whether all content for the story has been written (0), otherwise\n# more content is waiting to be written (1)\nmore = 1\nwhile more:\n    device = writer.begin_page(MEDIABOX)  # make new page\n    more, _ = story.place(WHERE)\n    story.draw(device)\n    writer.end_page()  # finish page\n\nwriter.close()  # close output file\n\ndel story \n```", "```py\n\"\"\"\nDemo script for PyMuPDF's `Story.write()` method.\n\nThis is a way of laying out a story into a PDF document, that avoids the need\nto write a loop that calls `story.place()` and `story.draw()`.\n\nInstead just a single function call is required, albeit with a `rectfn()`\ncallback that returns the rectangles into which the story is placed.\n\"\"\"\n\nimport html\n\nimport pymupdf\n\n# Create html containing multiple copies of our own source code.\n#\nwith open(__file__) as f:\n    text = f.read()\ntext = html.escape(text)\nhtml = f'''\n<!DOCTYPE html>\n<body>\n\n<h1>Contents of {__file__}</h1>\n\n<h2>Normal</h2>\n<pre>\n{text}\n</pre>\n\n<h2>Strong</h2>\n<strong>\n<pre>\n{text}\n</pre>\n</strong>\n\n<h2>Em</h2>\n<em>\n<pre>\n{text}\n</pre>\n</em>\n\n</body>\n'''\n\ndef rectfn(rect_num, filled):\n  '''\n We return four rectangles per page in this order:\n\n 1 3\n 2 4\n '''\n    page_w = 800\n    page_h = 600\n    margin = 50\n    rect_w = (page_w - 3*margin) / 2\n    rect_h = (page_h - 3*margin) / 2\n\n    if rect_num % 4 == 0:\n        # New page.\n        mediabox = pymupdf.Rect(0, 0, page_w, page_h)\n    else:\n        mediabox = None\n    # Return one of four rects in turn.\n    rect_x = margin + (rect_w+margin) * ((rect_num // 2) % 2)\n    rect_y = margin + (rect_h+margin) * (rect_num % 2)\n    rect = pymupdf.Rect(rect_x, rect_y, rect_x + rect_w, rect_y + rect_h)\n    #print(f'rectfn(): rect_num={rect_num} filled={filled}. Returning: rect={rect}')\n    return mediabox, rect, None\n\nstory = pymupdf.Story(html, em=8)\n\nout_path = __file__.replace('.py', '.pdf')\nwriter = pymupdf.DocumentWriter(out_path)\n\nstory.write(writer, rectfn)\nwriter.close() \n```", "```py\n\"\"\"\nDemo script for PyMuPDF's `pymupdf.Story.write_stabilized()`.\n\n`pymupdf.Story.write_stabilized()` is similar to `pymupdf.Story.write()`,\nexcept instead of taking a fixed html document, it does iterative layout\nof dynamically-generated html content (provided by a callback) to a\n`pymupdf.DocumentWriter`.\n\nFor example this allows one to add a dynamically-generated table of contents\nsection while ensuring that page numbers are patched up until stable.\n\"\"\"\n\nimport textwrap\n\nimport pymupdf\n\ndef rectfn(rect_num, filled):\n  '''\n We return one rect per page.\n '''\n    rect = pymupdf.Rect(10, 20, 290, 380)\n    mediabox = pymupdf.Rect(0, 0, 300, 400)\n    #print(f'rectfn(): rect_num={rect_num} filled={filled}')\n    return mediabox, rect, None\n\ndef contentfn(positions):\n  '''\n Returns html content, with a table of contents derived from `positions`.\n '''\n    ret = ''\n    ret += textwrap.dedent('''\n <!DOCTYPE html>\n <body>\n <h2>Contents</h2>\n <ul>\n ''')\n\n    # Create table of contents with links to all <h1..6> sections in the\n    # document.\n    for position in positions:\n        if position.heading and (position.open_close & 1):\n            text = position.text if position.text else ''\n            if position.id:\n                ret += f\"    <li><a href=\\\"#{position.id}\\\">{text}</a>\\n\"\n            else:\n                ret += f\"    <li>{text}\\n\"\n            ret += f\"        <ul>\\n\"\n            ret += f\"        <li>page={position.page_num}\\n\"\n            ret += f\"        <li>depth={position.depth}\\n\"\n            ret += f\"        <li>heading={position.heading}\\n\"\n            ret += f\"        <li>id={position.id!r}\\n\"\n            ret += f\"        <li>href={position.href!r}\\n\"\n            ret += f\"        <li>rect={position.rect}\\n\"\n            ret += f\"        <li>text={text!r}\\n\"\n            ret += f\"        <li>open_close={position.open_close}\\n\"\n            ret += f\"        </ul>\\n\"\n\n    ret += '</ul>\\n'\n\n    # Main content.\n    ret += textwrap.dedent(f'''\n\n <h1>First section</h1>\n <p>Contents of first section.\n\n <h1>Second section</h1>\n <p>Contents of second section.\n <h2>Second section first subsection</h2>\n\n <p>Contents of second section first subsection.\n\n <h1>Third section</h1>\n <p>Contents of third section.\n\n </body>\n ''')\n    ret = ret.strip()\n    with open(__file__.replace('.py', '.html'), 'w') as f:\n        f.write(ret)\n    return ret;\n\nout_path = __file__.replace('.py', '.pdf')\nwriter = pymupdf.DocumentWriter(out_path)\npymupdf.Story.write_stabilized(writer, contentfn, rectfn)\nwriter.close() \n```", "```py\n\"\"\"\nDemo script for PyMuPDF's `pymupdf.Story.write_stabilized_with_links()`.\n\n`pymupdf.Story.write_stabilized_links()` is similar to\n`pymupdf.Story.write_stabilized()` except that it creates a PDF `pymupdf.Document`\nthat contains PDF links generated from all internal links in the original html.\n\"\"\"\n\nimport textwrap\n\nimport pymupdf\n\ndef rectfn(rect_num, filled):\n  '''\n We return one rect per page.\n '''\n    rect = pymupdf.Rect(10, 20, 290, 380)\n    mediabox = pymupdf.Rect(0, 0, 300, 400)\n    #print(f'rectfn(): rect_num={rect_num} filled={filled}')\n    return mediabox, rect, None\n\ndef contentfn(positions):\n  '''\n Returns html content, with a table of contents derived from `positions`.\n '''\n    ret = ''\n    ret += textwrap.dedent('''\n <!DOCTYPE html>\n <body>\n <h2>Contents</h2>\n <ul>\n ''')\n\n    # Create table of contents with links to all <h1..6> sections in the\n    # document.\n    for position in positions:\n        if position.heading and (position.open_close & 1):\n            text = position.text if position.text else ''\n            if position.id:\n                ret += f\"    <li><a href=\\\"#{position.id}\\\">{text}</a>\\n\"\n            else:\n                ret += f\"    <li>{text}\\n\"\n            ret += f\"        <ul>\\n\"\n            ret += f\"        <li>page={position.page_num}\\n\"\n            ret += f\"        <li>depth={position.depth}\\n\"\n            ret += f\"        <li>heading={position.heading}\\n\"\n            ret += f\"        <li>id={position.id!r}\\n\"\n            ret += f\"        <li>href={position.href!r}\\n\"\n            ret += f\"        <li>rect={position.rect}\\n\"\n            ret += f\"        <li>text={text!r}\\n\"\n            ret += f\"        <li>open_close={position.open_close}\\n\"\n            ret += f\"        </ul>\\n\"\n\n    ret += '</ul>\\n'\n\n    # Main content.\n    ret += textwrap.dedent(f'''\n\n <h1>First section</h1>\n <p>Contents of first section.\n <ul>\n <li>External <a href=\"https://artifex.com/\">link to https://artifex.com/</a>.\n <li><a href=\"#idtest\">Link to IDTEST</a>.\n <li><a href=\"#nametest\">Link to NAMETEST</a>.\n </ul>\n\n <h1>Second section</h1>\n <p>Contents of second section.\n <h2>Second section first subsection</h2>\n\n <p>Contents of second section first subsection.\n <p id=\"idtest\">IDTEST\n\n <h1>Third section</h1>\n <p>Contents of third section.\n <p><a name=\"nametest\">NAMETEST</a>.\n\n </body>\n ''')\n    ret = ret.strip()\n    with open(__file__.replace('.py', '.html'), 'w') as f:\n        f.write(ret)\n    return ret;\n\nout_path = __file__.replace('.py', '.pdf')\ndocument = pymupdf.Story.write_stabilized_with_links(contentfn, rectfn)\ndocument.save(out_path) \n```", "```py\nimport pymupdf\n\nHTML = \"\"\"\n<p style=\"font-family: sans-serif;color: blue\">Hello World!</p>\n\"\"\"\n\nMEDIABOX = pymupdf.paper_rect(\"letter\")  # output page format: Letter\nWHERE = MEDIABOX + (36, 36, -36, -36)  # leave borders of 0.5 inches\n\nstory = pymupdf.Story(html=HTML)  # create story from HTML\nwriter = pymupdf.DocumentWriter(\"output.pdf\")  # create the writer\n\nmore = 1  # will indicate end of input once it is set to 0\n\nwhile more:  # loop outputting the story\n    device = writer.begin_page(MEDIABOX)  # make new page\n    more, _ = story.place(WHERE)  # layout into allowed rectangle\n    story.draw(device)  # write on page\n    writer.end_page()  # finish page\n\nwriter.close()  # close output file \n```", "```py\nimport pymupdf\n\nCSS = \"\"\"\nbody {\n font-family: sans-serif;\n color: blue;\n}\n\"\"\"\n\nHTML = \"\"\"\n<p>Hello World!</p>\n\"\"\"\n\n# the story would then be created like this:\nstory = pymupdf.Story(html=HTML, user_css=CSS) \n```", "```py\nimport pymupdf\n\nMEDIABOX = pymupdf.paper_rect(\"letter\")\nWHERE = MEDIABOX + (36, 36, -36, -36)\n\nstory = pymupdf.Story()  # create an empty story\nbody = story.body  # access the body of its DOM\nwith body.add_paragraph() as para:  # store desired content\n    para.set_font(\"sans-serif\").set_color(\"blue\").add_text(\"Hello World!\")\n\nwriter = pymupdf.DocumentWriter(\"output.pdf\")\n\nmore = 1\n\nwhile more:\n    device = writer.begin_page(MEDIABOX)\n    more, _ = story.place(WHERE)\n    story.draw(device)\n    writer.end_page()\n\nwriter.close() \n```", "```py\nimport pymupdf\n\nMEDIABOX = pymupdf.paper_rect(\"letter\")\nWHERE = MEDIABOX + (36, 36, -36, -36)\n\n# create story, let it look at script folder for resources\nstory = pymupdf.Story(archive=\".\")\nbody = story.body  # access the body of its DOM\n\nwith body.add_paragraph() as para:\n    # store desired content\n    para.set_font(\"sans-serif\").set_color(\"blue\").add_text(\"Hello World!\")\n\n# another paragraph for our image:\nwith body.add_paragraph() as para:\n    # store image in another paragraph\n    para.add_image(\"world.jpg\")\n\nwriter = pymupdf.DocumentWriter(\"output.pdf\")\n\nmore = 1\n\nwhile more:\n    device = writer.begin_page(MEDIABOX)\n    more, _ = story.place(WHERE)\n    story.draw(device)\n    writer.end_page()\n\nwriter.close() \n```", "```py\nimport pathlib\nimport pymupdf\n\nhtmlpath = pathlib.Path(\"myhtml.html\")\ncsspath = pathlib.Path(\"mycss.css\")\n\nHTML = htmlpath.read_bytes().decode()\nCSS = csspath.read_bytes().decode()\n\nstory = pymupdf.Story(html=HTML, user_css=CSS) \n```", "```py\n\"\"\"\nThis is a demo script for using PyMuPDF with its \"Story\" feature.\n\nThe following aspects are being covered here:\n\n* The script produces a report of films that are stored in an SQL database\n* The report format is provided as a HTML template\n\nThe SQL database contains two tables:\n1\\. Table \"films\" which has the columns \"title\" (film title, str), \"director\"\n (str) and \"year\" (year of release, int).\n2\\. Table \"actors\" which has the columns \"name\" (actor name, str) and \"title\"\n (the film title where the actor had been casted, str).\n\nThe script reads all content of the \"films\" table. For each film title it\nreads all rows from table \"actors\" which took part in that film.\n\nComment 1\n---------\nTo keep things easy and free from pesky technical detail, the relevant file\nnames inherit the name of this script:\n- the database's filename is the script name with \".py\" extension replaced\n by \".db\".\n- the output PDF similarly has script file name with extension \".pdf\".\n\nComment 2\n---------\nThe SQLITE database has been created using https://sqlitebrowser.org/, a free\nmulti-platform tool to maintain or manipulate SQLITE databases.\n\"\"\"\nimport os\nimport sqlite3\n\nimport pymupdf\n\n# ----------------------------------------------------------------------\n# HTML template for the film report\n# There are four placeholders coded as \"id\" attributes.\n# One \"id\" allows locating the template part itself, the other three\n# indicate where database text should be inserted.\n# ----------------------------------------------------------------------\nfestival_template = (\n    \"<html><head><title>Just some arbitrary text</title></head>\"\n    '<body><h1 style=\"text-align:center\">Hook Norton Film Festival</h1>'\n    \"<ol>\"\n    '<li id=\"filmtemplate\">'\n    '<b id=\"filmtitle\"></b>'\n    \"<dl>\"\n    '<dt>Director<dd id=\"director\">'\n    '<dt>Release Year<dd id=\"filmyear\">'\n    '<dt>Cast<dd id=\"cast\">'\n    \"</dl>\"\n    \"</li>\"\n    \"</ol>\"\n    \"</body></html\"\n)\n\n# -------------------------------------------------------------------\n# define database access\n# -------------------------------------------------------------------\ndbfilename = __file__.replace(\".py\", \".db\")  # the SQLITE database file name\nassert os.path.isfile(dbfilename), f'{dbfilename}'\ndatabase = sqlite3.connect(dbfilename)  # open database\ncursor_films = database.cursor()  # cursor for selecting the films\ncursor_casts = database.cursor()  # cursor for selecting actors per film\n\n# select statement for the films - let SQL also sort it for us\nselect_films = \"\"\"SELECT title, director, year FROM films ORDER BY title\"\"\"\n\n# select stament for actors, a skeleton: sub-select by film title\nselect_casts = \"\"\"SELECT name FROM actors WHERE film = \"%s\" ORDER BY name\"\"\"\n\n# -------------------------------------------------------------------\n# define the HTML Story and fill it with database data\n# -------------------------------------------------------------------\nstory = pymupdf.Story(festival_template)\nbody = story.body  # access the HTML body detail\ntemplate = body.find(None, \"id\", \"filmtemplate\")  # find the template part\n\n# read the films from the database and put them all in one Python list\n# NOTE: instead we might fetch rows one by one (advisable for large volumes)\ncursor_films.execute(select_films)  # execute cursor, and ...\nfilms = cursor_films.fetchall()  # read out what was found\n\nfor title, director, year in films:  # iterate through the films\n    film = template.clone()  # clone template to report each film\n    film.find(None, \"id\", \"filmtitle\").add_text(title)  # put title in templ\n    film.find(None, \"id\", \"director\").add_text(director)  # put director\n    film.find(None, \"id\", \"filmyear\").add_text(str(year))  # put year\n\n    # the actors reside in their own table - find the ones for this film title\n    cursor_casts.execute(select_casts % title)  # execute cursor\n    casts = cursor_casts.fetchall()  # read actors for the film\n    # each actor name appears in its own tuple, so extract it from there\n    film.find(None, \"id\", \"cast\").add_text(\"\\n\".join([c[0] for c in casts]))\n    body.append_child(film)\n\ntemplate.remove()  # remove the template\n\n# -------------------------------------------------------------------\n# generate the PDF\n# -------------------------------------------------------------------\nwriter = pymupdf.DocumentWriter(__file__.replace(\".py\", \".pdf\"), \"compress\")\nmediabox = pymupdf.paper_rect(\"a4\")  # use pages in ISO-A4 format\nwhere = mediabox + (72, 36, -36, -72)  # leave page borders\n\nmore = 1  # end of output indicator\n\nwhile more:\n    dev = writer.begin_page(mediabox)  # make a new page\n    more, filled = story.place(where)  # arrange content for this page\n    story.draw(dev, None)  # write content to page\n    writer.end_page()  # finish the page\n\nwriter.close()  # close the PDF \n```", "```py\n\"\"\"\nDemo of Story class in PyMuPDF\n-------------------------------\n\nThis script demonstrates how to the results of a pymupdf.Story output can be\nplaced in a rectangle of an existing (!) PDF page.\n\n\"\"\"\nimport io\nimport os\n\nimport pymupdf\n\ndef make_pdf(fileptr, text, rect, font=\"sans-serif\", archive=None):\n  \"\"\"Make a memory DocumentWriter from HTML text and a rect.\n\n Args:\n fileptr: a Python file object. For example an io.BytesIO().\n text: the text to output (HTML format)\n rect: the target rectangle. Will use its width / height as mediabox\n font: (str) font family name, default sans-serif\n archive: pymupdf.Archive parameter. To be used if e.g. images or special\n fonts should be used.\n Returns:\n The matrix to convert page rectangles of the created PDF back\n to rectangle coordinates in the parameter \"rect\".\n Normal use will expect to fit all the text in the given rect.\n However, if an overflow occurs, this function will output multiple\n pages, and the caller may decide to either accept or retry with\n changed parameters.\n \"\"\"\n    # use input rectangle as the page dimension\n    mediabox = pymupdf.Rect(0, 0, rect.width, rect.height)\n    # this matrix converts mediabox back to input rect\n    matrix = mediabox.torect(rect)\n\n    story = pymupdf.Story(text, archive=archive)\n    body = story.body\n    body.set_properties(font=font)\n    writer = pymupdf.DocumentWriter(fileptr)\n    while True:\n        device = writer.begin_page(mediabox)\n        more, _ = story.place(mediabox)\n        story.draw(device)\n        writer.end_page()\n        if not more:\n            break\n    writer.close()\n    return matrix\n\n# -------------------------------------------------------------\n# We want to put this in a given rectangle of an existing page\n# -------------------------------------------------------------\nHTML = \"\"\"\n<p>PyMuPDF is a great package! And it still improves significantly from one version to the next one!</p>\n<p>It is a Python binding for <b>MuPDF</b>, a lightweight PDF, XPS, and E-book viewer, renderer, and toolkit.<br> Both are maintained and developed by Artifex Software, Inc.</p>\n<p>Via MuPDF it can access files in PDF, XPS, OpenXPS, CBZ, EPUB, MOBI and FB2 (e-books) formats,<br> and it is known for its top\n<b><i>performance</i></b> and <b><i>rendering quality.</p>\"\"\"\n\n# Make a PDF page for demo purposes\nroot = os.path.abspath( f\"{__file__}/..\")\ndoc = pymupdf.open(f\"{root}/mupdf-title.pdf\")\npage = doc[0]\n\nWHERE = pymupdf.Rect(50, 100, 250, 500)  # target rectangle on existing page\n\nfileptr = io.BytesIO()  # let DocumentWriter use this as its file\n\n# -------------------------------------------------------------------\n# call DocumentWriter and Story to fill our rectangle\nmatrix = make_pdf(fileptr, HTML, WHERE)\n# -------------------------------------------------------------------\nsrc = pymupdf.open(\"pdf\", fileptr)  # open DocumentWriter output PDF\nif src.page_count > 1:  # target rect was too small\n    raise ValueError(\"target WHERE too small\")\n\n# its page 0 contains our result\npage.show_pdf_page(WHERE, src, 0)\n\ndoc.ez_save(f\"{root}/mupdf-title-after.pdf\") \n```", "```py\n\"\"\"\nThis is a demo script using PyMuPDF's Story class to output text as a PDF with\na two-column page layout.\n\nThe script demonstrates the following features:\n* How to fill columns or table cells of complex page layouts\n* How to embed images\n* How to modify existing, given HTML sources for output (text indent, font size)\n* How to use fonts defined in package \"pymupdf-fonts\"\n* How to use ZIP files as Archive\n\n--------------\nThe example is taken from the somewhat modified Wikipedia article\nhttps://en.wikipedia.org/wiki/The_quick_brown_fox_jumps_over_the_lazy_dog.\n--------------\n\"\"\"\n\nimport io\nimport os\nimport zipfile\nimport pymupdf\n\nthisdir = os.path.dirname(os.path.abspath(__file__))\nmyzip = zipfile.ZipFile(os.path.join(thisdir, \"quickfox.zip\"))\narch = pymupdf.Archive(myzip)\n\nif pymupdf.fitz_fontdescriptors:\n    # we want to use the Ubuntu fonts for sans-serif and for monospace\n    CSS = pymupdf.css_for_pymupdf_font(\"ubuntu\", archive=arch, name=\"sans-serif\")\n    CSS = pymupdf.css_for_pymupdf_font(\"ubuntm\", CSS=CSS, archive=arch, name=\"monospace\")\nelse:\n    # No pymupdf-fonts available.\n    CSS=\"\"\n\ndocname = __file__.replace(\".py\", \".pdf\")  # output PDF file name\n\nHTML = myzip.read(\"quickfox.html\").decode()\n\n# make the Story object\nstory = pymupdf.Story(HTML, user_css=CSS, archive=arch)\n\n# --------------------------------------------------------------\n# modify the DOM somewhat\n# --------------------------------------------------------------\nbody = story.body  # access HTML body\nbody.set_properties(font=\"sans-serif\")  # and give it our font globally\n\n# modify certain nodes\npara = body.find(\"p\", None, None)  # find relevant nodes (here: paragraphs)\nwhile para != None:\n    para.set_properties(  # method MUST be used for existing nodes\n        indent=15,\n        fontsize=13,\n    )\n    para = para.find_next(\"p\", None, None)\n\n# choose PDF page size\nMEDIABOX = pymupdf.paper_rect(\"letter\")\n# text appears only within this subrectangle\nWHERE = MEDIABOX + (36, 36, -36, -36)\n\n# --------------------------------------------------------------\n# define page layout within the WHERE rectangle\n# --------------------------------------------------------------\nCOLS = 2  # layout: 2 cols 1 row\nROWS = 1\nTABLE = pymupdf.make_table(WHERE, cols=COLS, rows=ROWS)\n# fill the cells of each page in this sequence:\nCELLS = [TABLE[i][j] for i in range(ROWS) for j in range(COLS)]\n\nfileobject = io.BytesIO()  # let DocumentWriter write to memory\nwriter = pymupdf.DocumentWriter(fileobject)  # define the writer\n\nmore = 1\nwhile more:  # loop until all input text has been written out\n    dev = writer.begin_page(MEDIABOX)  # prepare a new output page\n    for cell in CELLS:\n        # content may be complete after any cell, ...\n        if more:  # so check this status first\n            more, _ = story.place(cell)\n            story.draw(dev)\n    writer.end_page()  # finish the PDF page\n\nwriter.close()  # close DocumentWriter output\n\n# for housekeeping work re-open from memory\ndoc = pymupdf.open(\"pdf\", fileobject)\ndoc.ez_save(docname) \n```", "```py\n\"\"\"\nThis is a demo script using PyMuPDF's Story class to output text as a PDF with\na two-column page layout.\n\nThe script demonstrates the following features:\n* Layout text around images of an existing (\"target\") PDF.\n* Based on a few global parameters, areas on each page are identified, that\n can be used to receive text layouted by a Story.\n* These global parameters are not stored anywhere in the target PDF and\n must therefore be provided in some way.\n - The width of the border(s) on each page.\n - The fontsize to use for text. This value determines whether the provided\n text will fit in the empty spaces of the (fixed) pages of target PDF. It\n cannot be predicted in any way. The script ends with an exception if\n target PDF has not enough pages, and prints a warning message if not all\n pages receive at least some text. In both cases, the FONTSIZE value\n can be changed (a float value).\n - Use of a 2-column page layout for the text.\n* The layout creates a temporary (memory) PDF. Its produced page content\n (the text) is used to overlay the corresponding target page. If text\n requires more pages than are available in target PDF, an exception is raised.\n If not all target pages receive at least some text, a warning is printed.\n* The script reads \"image-no-go.pdf\" in its own folder. This is the \"target\" PDF.\n It contains 2 pages with each 2 images (from the original article), which are\n positioned at places that create a broad overall test coverage. Otherwise the\n pages are empty.\n* The script produces \"quickfox-image-no-go.pdf\" which contains the original pages\n and image positions, but with the original article text laid out around them.\n\nNote:\n--------------\nThis script version uses just image positions to derive \"No-Go areas\" for\nlayouting the text. Other PDF objects types are detectable by PyMuPDF and may\nbe taken instead or in addition, without influencing the layouting.\nThe following are candidates for other such \"No-Go areas\". Each can be detected\nand located by PyMuPDF:\n* Annotations\n* Drawings\n* Existing text\n\n--------------\nThe text and images are taken from the somewhat modified Wikipedia article\nhttps://en.wikipedia.org/wiki/The_quick_brown_fox_jumps_over_the_lazy_dog.\n--------------\n\"\"\"\n\nimport io\nimport os\nimport zipfile\nimport pymupdf\n\nthisdir = os.path.dirname(os.path.abspath(__file__))\nmyzip = zipfile.ZipFile(os.path.join(thisdir, \"quickfox.zip\"))\n\ndocname = os.path.join(thisdir, \"image-no-go.pdf\")  # \"no go\" input PDF file name\noutname = os.path.join(thisdir, \"quickfox-image-no-go.pdf\")  # output PDF file name\nBORDER = 36  # global parameter\nFONTSIZE = 12.5  # global parameter\nCOLS = 2  # number of text columns, global parameter\n\ndef analyze_page(page):\n  \"\"\"Compute MediaBox and rectangles on page that are free to receive text.\n\n Notes:\n Assume a BORDER around the page, make 2 columns of the resulting\n sub-rectangle and extract the rectangles of all images on page.\n For demo purposes, the image rectangles are taken as \"NO-GO areas\"\n on the page when writing text with the Story.\n The function returns free areas for each of the columns.\n\n Returns:\n (page.number, mediabox, CELLS), where CELLS is a list of free cells.\n \"\"\"\n    prect = page.rect  # page rectangle - will be our MEDIABOX later\n    where = prect + (BORDER, BORDER, -BORDER, -BORDER)\n    TABLE = pymupdf.make_table(where, rows=1, cols=COLS)\n\n    # extract rectangles covered by images on this page\n    IMG_RECTS = sorted(  # image rects on page (sort top-left to bottom-right)\n        [pymupdf.Rect(item[\"bbox\"]) for item in page.get_image_info()],\n        key=lambda b: (b.y1, b.x0),\n    )\n\n    def free_cells(column):\n  \"\"\"Return free areas in this column.\"\"\"\n        free_stripes = []  # y-value pairs wrapping a free area stripe\n        # intersecting images: block complete intersecting column stripe\n        col_imgs = [(b.y0, b.y1) for b in IMG_RECTS if abs(b & column) > 0]\n        s_y0 = column.y0  # top y-value of column\n        for y0, y1 in col_imgs:  # an image stripe\n            if y0 > s_y0 + FONTSIZE:  # image starts below last free btm value\n                free_stripes.append((s_y0, y0))  # store as free stripe\n            s_y0 = y1  # start of next free stripe\n\n        if s_y0 + FONTSIZE < column.y1:  # enough room to column bottom\n            free_stripes.append((s_y0, column.y1))\n\n        if free_stripes == []:  # covers \"no image in this column\"\n            free_stripes.append((column.y0, column.y1))\n\n        # make available cells of this column\n        CELLS = [pymupdf.Rect(column.x0, y0, column.x1, y1) for (y0, y1) in free_stripes]\n        return CELLS\n\n    # collection of available Story rectangles on page\n    CELLS = []\n    for i in range(COLS):\n        CELLS.extend(free_cells(TABLE[0][i]))\n\n    return page.number, prect, CELLS\n\nHTML = myzip.read(\"quickfox.html\").decode()\n\n# --------------------------------------------------------------\n# Make the Story object\n# --------------------------------------------------------------\nstory = pymupdf.Story(HTML)\n\n# modify the DOM somewhat\nbody = story.body  # access HTML body\nbody.set_properties(font=\"sans-serif\")  # and give it our font globally\n\n# modify certain nodes\npara = body.find(\"p\", None, None)  # find relevant nodes (here: paragraphs)\nwhile para != None:\n    para.set_properties(  # method MUST be used for existing nodes\n        indent=15,\n        fontsize=FONTSIZE,\n    )\n    para = para.find_next(\"p\", None, None)\n\n# we remove all image references, because the target PDF already has them\nimg = body.find(\"img\", None, None)\nwhile img != None:\n    next_img = img.find_next(\"img\", None, None)\n    img.remove()\n    img = next_img\n\npage_info = {}  # contains MEDIABOX and free CELLS per page\ndoc = pymupdf.open(docname)\nfor page in doc:\n    pno, mediabox, cells = analyze_page(page)\n    page_info[pno] = (mediabox, cells)\ndoc.close()  # close target PDF for now - re-open later\n\nfileobject = io.BytesIO()  # let DocumentWriter write to memory\nwriter = pymupdf.DocumentWriter(fileobject)  # define output writer\n\nmore = 1  # stop if this ever becomes zero\npno = 0  # count output pages\nwhile more:  # loop until all HTML text has been written\n    try:\n        MEDIABOX, CELLS = page_info[pno]\n    except KeyError:  # too much text space required: reduce fontsize?\n        raise ValueError(\"text does not fit on target PDF\")\n    dev = writer.begin_page(MEDIABOX)  # prepare a new output page\n    for cell in CELLS:  # iterate over free cells on this page\n        if not more:  # need to check this for every cell\n            continue\n        more, _ = story.place(cell)\n        story.draw(dev)\n    writer.end_page()  # finish the PDF page\n    pno += 1\n\nwriter.close()  # close DocumentWriter output\n\n# Re-open writer output, read its pages and overlay target pages with them.\n# The generated pages have same dimension as their targets.\nsrc = pymupdf.open(\"pdf\", fileobject)\ndoc = pymupdf.open(doc.name)\nfor page in doc:  # overlay every target page with the prepared text\n    if page.number >= src.page_count:\n        print(f\"Text only uses {src.page_count} target pages!\")\n        continue  # story did not need all target pages?\n\n    # overlay target page\n    page.show_pdf_page(page.rect, src, page.number)\n\n    # DEBUG start --- draw the text rectangles\n    # mb, cells = page_info[page.number]\n    # for cell in cells:\n    #     page.draw_rect(cell, color=(1, 0, 0))\n    # DEBUG stop ---\n\ndoc.ez_save(outname) \n```", "```py\n\"\"\"\nDemo script for basic HTML table support in Story objects\n\nOutputs a table with three columns that fits on one Letter page.\nThe content of each row is filled via the Story's template mechanism.\nColumn widths and row heights are automatically computed by MuPDF.\nSome styling via a CSS source is also demonstrated:\n\n- The table header row has a gray background\n- Each cell shows a border at its top\n- The Story's body uses the sans-serif font family\n- The text of one of the columns is set to blue\n\nDependencies\n-------------\nPyMuPDF v1.22.0 or later\n\"\"\"\nimport pymupdf\n\ntable_text = (  # the content of each table row\n    (\n        \"Length\",\n        \"integer\",\n  \"\"\"(Required) The number of bytes from the beginning of the line following the keyword stream to the last byte just before the keyword endstream. (There may be an additional EOL marker, preceding endstream, that is not included in the count and is not logically part of the stream data.) See “Stream Extent,” above, for further discussion.\"\"\",\n    ),\n    (\n        \"Filter\",\n        \"name or array\",\n  \"\"\"(Optional) The name of a filter to be applied in processing the stream data found between the keywords stream and endstream, or an array of such names. Multiple filters should be specified in the order in which they are to be applied.\"\"\",\n    ),\n    (\n        \"FFilter\",\n        \"name or array\",\n  \"\"\"(Optional; PDF 1.2) The name of a filter to be applied in processing the data found in the stream's external file, or an array of such names. The same rules apply as for Filter.\"\"\",\n    ),\n    (\n        \"FDecodeParms\",\n        \"dictionary or array\",\n  \"\"\"(Optional; PDF 1.2) A parameter dictionary, or an array of such dictionaries, used by the filters specified by FFilter. The same rules apply as for DecodeParms.\"\"\",\n    ),\n    (\n        \"DecodeParms\",\n        \"dictionary or array\",\n  \"\"\"(Optional) A parameter dictionary or an array of such dictionaries, used by the filters specified by Filter. If there is only one filter and that filter has parameters, DecodeParms must be set to the filter's parameter dictionary unless all the filter's parameters have their default values, in which case the DecodeParms entry may be omitted. If there are multiple filters and any of the filters has parameters set to nondefault values, DecodeParms must be an array with one entry for each filter: either the parameter dictionary for that filter, or the null object if that filter has no parameters (or if all of its parameters have their default values). If none of the filters have parameters, or if all their parameters have default values, the DecodeParms entry may be omitted. (See implementation note 7 in Appendix H.)\"\"\",\n    ),\n    (\n        \"DL\",\n        \"integer\",\n  \"\"\"(Optional; PDF 1.5) A non-negative integer representing the number of bytes in the decoded (defiltered) stream. It can be used to determine, for example, whether enough disk space is available to write a stream to a file.\\nThis value should be considered a hint only; for some stream filters, it may not be possible to determine this value precisely.\"\"\",\n    ),\n    (\n        \"F\",\n        \"file specification\",\n  \"\"\"(Optional; PDF 1.2) The file containing the stream data. If this entry is present, the bytes between stream and endstream are ignored, the filters are specified by FFilter rather than Filter, and the filter parameters are specified by FDecodeParms rather than DecodeParms. However, the Length entry should still specify the number of those bytes. (Usually, there are no bytes and Length is 0.) (See implementation note 46 in Appendix H.)\"\"\",\n    ),\n)\n\n# Only a minimal HTML source is required to provide the Story's working\nHTML = \"\"\"\n<html>\n<body><h2>TABLE 3.4 Entries common to all stream dictionaries</h2>\n<table>\n <tr>\n <th>KEY</th><th>TYPE</th><th>VALUE</th>\n </tr>\n <tr id=\"row\">\n <td id=\"col0\"></td><td id=\"col1\"></td><td id=\"col2\"></td>\n </tr>\n\"\"\"\n\n\"\"\"\n---------------------------------------------------------------------\nJust for demo purposes, set:\n- header cell background to gray\n- text color in col1 to blue\n- a border line at the top of all table cells\n- all text to the sans-serif font\n---------------------------------------------------------------------\n\"\"\"\nCSS = \"\"\"th {\n background-color: #aaa;\n}\n\ntd[id=\"col1\"] {\n color: blue;\n}\n\ntd, tr {\n border: 1px solid black;\n border-right-width: 0px;\n border-left-width: 0px;\n border-bottom-width: 0px;\n}\nbody {\n font-family: sans-serif;\n}\n\"\"\"\n\nstory = pymupdf.Story(HTML, user_css=CSS)  # define the Story\nbody = story.body  # access the HTML <body> of it\ntemplate = body.find(None, \"id\", \"row\")  # find the template with name \"row\"\nparent = template.parent  # access its parent i.e., the <table>\n\nfor col0, col1, col2 in table_text:\n    row = template.clone()  # make a clone of the row template\n    # add text to each cell in the duplicated row\n    row.find(None, \"id\", \"col0\").add_text(col0)\n    row.find(None, \"id\", \"col1\").add_text(col1)\n    row.find(None, \"id\", \"col2\").add_text(col2)\n    parent.append_child(row)  # add new row to <table>\ntemplate.remove()  # remove the template\n\n# Story is ready - output it via a writer\nwriter = pymupdf.DocumentWriter(__file__.replace(\".py\", \".pdf\"), \"compress\")\nmediabox = pymupdf.paper_rect(\"letter\")  # size of one output page\nwhere = mediabox + (36, 36, -36, -36)  # use this sub-area for the content\n\nmore = True  # detects end of output\nwhile more:\n    dev = writer.begin_page(mediabox)  # start a page, returning a device\n    more, filled = story.place(where)  # compute content fitting into \"where\"\n    story.draw(dev)  # output it to the page\n    writer.end_page()  # finalize the page\nwriter.close()  # close the output \n```", "```py\n\"\"\"\nDemo script using (Py-) MuPDF \"Story\" feature.\n\nThe following features are implemented:\n\n* Use of Story \"template\" feature to provide row content\n* Use database access (SQLITE) to fetch row content\n* Use ElementPosition feature to locate cell positions on page\n* Simulate feature \"Table Header Repeat\"\n* Simulate feature \"Cell Grid Lines\"\n\n\"\"\"\nimport io\nimport sqlite3\nimport sys\n\nimport pymupdf\n\n\"\"\"\nTable data. Used to populate a temporary SQL database, which will be processed by the script.\nIts only purpose is to avoid carrying around a separate database file.\n\"\"\"\ntable_data = \"\"\"China;Beijing;21542000;1.5%;2018\nJapan;Tokyo;13921000;11.2%;2019\nDR Congo;Kinshasa;12691000;13.2%;2017\nRussia;Moscow;12655050;8.7%;2021\nIndonesia;Jakarta;10562088;3.9%;2020\nEgypt;Cairo;10107125;9.3%;2022\nSouth Korea;Seoul;9508451;18.3%;2022\nMexico;Mexico City;9209944;7.3%;2020\nUnited Kingdom;London;9002488;13.4%;2020\nBangladesh;Dhaka;8906039;5.3%;2011\nPeru;Lima;8852000;26.3%;2012\nIran;Tehran;8693706;9.9%;2016\nThailand;Bangkok;8305218;11.6%;2010\nVietnam;Hanoi;8053663;8.3%;2019\nIraq;Baghdad;7682136;17.6%;2021\nSaudi Arabia;Riyadh;7676654;21.4%;2018\nHong Kong;Hong Kong;7291600;100%;2022\nColombia;Bogotá;7181469;13.9%;2011\nChile;Santiago;6310000;32.4%;2012\nTurkey;Ankara;5747325;6.8%;2021\nSingapore;Singapore;5453600;91.8%;2021\nAfghanistan;Kabul;4601789;11.5%;2021\nKenya;Nairobi;4397073;8.3%;2019\nJordan;Amman;4061150;36.4%;2021\nAlgeria;Algiers;3915811;8.9%;2011\nGermany;Berlin;3677472;4.4%;2021\nSpain;Madrid;3305408;7.0%;2021\nEthiopia;Addis Ababa;3040740;2.5%;2012\nKuwait;Kuwait City;2989000;70.3%;2018\nGuatemala;Guatemala City;2934841;16.7%;2020\nSouth Africa;Pretoria;2921488;4.9%;2011\nUkraine;Kyiv;2920873;6.7%;2021\nArgentina;Buenos Aires;2891082;6.4%;2010\nNorth Korea;Pyongyang;2870000;11.1%;2016\nUzbekistan;Tashkent;2860600;8.4%;2022\nItaly;Rome;2761632;4.7%;2022\nEcuador;Quito;2800388;15.7%;2020\nCameroon;Yaoundé;2765568;10.2%;2015\nZambia;Lusaka;2731696;14.0%;2020\nSudan;Khartoum;2682431;5.9%;2012\nBrazil;Brasília;2648532;1.2%;2012\nTaiwan;Taipei (de facto);2608332;10.9%;2020\nYemen;Sanaa;2575347;7.8%;2012\nAngola;Luanda;2571861;7.5%;2020\nBurkina Faso;Ouagadougou;2453496;11.1%;2019\nGhana;Accra;2388000;7.3%;2017\nSomalia;Mogadishu;2388000;14.0%;2021\nAzerbaijan;Baku;2303100;22.3%;2022\nCambodia;Phnom Penh;2281951;13.8%;2019\nVenezuela;Caracas;2245744;8.0%;2016\nFrance;Paris;2139907;3.3%;2022\nCuba;Havana;2132183;18.9%;2020\nZimbabwe;Harare;2123132;13.3%;2012\nSyria;Damascus;2079000;9.7%;2019\nBelarus;Minsk;1996553;20.8%;2022\nAustria;Vienna;1962779;22.0%;2022\nPoland;Warsaw;1863056;4.9%;2021\nPhilippines;Manila;1846513;1.6%;2020\nMali;Bamako;1809106;8.3%;2009\nMalaysia;Kuala Lumpur;1782500;5.3%;2019\nRomania;Bucharest;1716983;8.9%;2021\nHungary;Budapest;1706851;17.6%;2022\nCongo;Brazzaville;1696392;29.1%;2015\nSerbia;Belgrade;1688667;23.1%;2021\nUganda;Kampala;1680600;3.7%;2019\nGuinea;Conakry;1660973;12.3%;2014\nMongolia;Ulaanbaatar;1466125;43.8%;2020\nHonduras;Tegucigalpa;1444085;14.0%;2021\nSenegal;Dakar;1438725;8.5%;2021\nNiger;Niamey;1334984;5.3%;2020\nUruguay;Montevideo;1319108;38.5%;2011\nBulgaria;Sofia;1307439;19.0%;2021\nOman;Muscat;1294101;28.6%;2021\nCzech Republic;Prague;1275406;12.1%;2022\nMadagascar;Antananarivo;1275207;4.4%;2018\nKazakhstan;Astana;1239900;6.5%;2022\nNigeria;Abuja;1235880;0.6%;2011\nGeorgia;Tbilisi;1201769;32.0%;2022\nMauritania;Nouakchott;1195600;25.9%;2019\nQatar;Doha;1186023;44.1%;2020\nLibya;Tripoli;1170000;17.4%;2019\nMyanmar;Naypyidaw;1160242;2.2%;2014\nRwanda;Kigali;1132686;8.4%;2012\nMozambique;Maputo;1124988;3.5%;2020\nDominican Republic;Santo Domingo;1111838;10.0%;2010\nArmenia;Yerevan;1096100;39.3%;2021\nKyrgyzstan;Bishkek;1074075;16.5%;2021\nSierra Leone;Freetown;1055964;12.5%;2015\nNicaragua;Managua;1055247;15.4%;2020\nCanada;Ottawa;1017449;2.7%;2021\nPakistan;Islamabad;1014825;0.4%;2017\nLiberia;Monrovia;1010970;19.5%;2008\nUnited Arab Emirates;Abu Dhabi;1010092;10.8%;2020\nMalawi;Lilongwe;989318;5.0%;2018\nHaiti;Port-au-Prince;987310;8.6%;2015\nSweden;Stockholm;978770;9.4%;2021\nEritrea;Asmara;963000;26.6%;2020\nIsrael;Jerusalem;936425;10.5%;2019\nLaos;Vientiane;927724;12.5%;2019\nChad;N'Djamena;916000;5.3%;2009\nNetherlands;Amsterdam;905234;5.2%;2022\nCentral African Republic;Bangui;889231;16.3%;2020\nPanama;Panama City;880691;20.2%;2013\nTajikistan;Dushanbe;863400;8.9%;2020\nNepal;Kathmandu;845767;2.8%;2021\nTogo;Lomé;837437;9.7%;2010\nTurkmenistan;Ashgabat;791000;12.5%;2017\nMoldova;Chişinău;779300;25.5%;2019\nCroatia;Zagreb;769944;19.0%;2021\nGabon;Libreville;703904;30.1%;2013\nNorway;Oslo;697010;12.9%;2021\nMacau;Macau;671900;97.9%;2022\nUnited States;Washington D.C.;670050;0.2%;2021\nJamaica;Kingston;662491;23.4%;2019\nFinland;Helsinki;658864;11.9%;2021\nTunisia;Tunis;638845;5.2%;2014\nDenmark;Copenhagen;638117;10.9%;2021\nGreece;Athens;637798;6.1%;2021\nLatvia;Riga;605802;32.3%;2021\nDjibouti;Djibouti (city);604013;54.6%;2012\nIreland;Dublin;588233;11.8%;2022\nMorocco;Rabat;577827;1.6%;2014\nLithuania;Vilnius;576195;20.7%;2022\nEl Salvador;San Salvador;570459;9.0%;2019\nAlbania;Tirana;557422;19.5%;2011\nNorth Macedonia;Skopje;544086;25.9%;2015\nSouth Sudan;Juba;525953;4.9%;2017\nParaguay;Asunción;521559;7.8%;2020\nPortugal;Lisbon;509614;5.0%;2020\nGuinea-Bissau;Bissau;492004;23.9%;2015\nSlovakia;Bratislava;440948;8.1%;2020\nEstonia;Tallinn;438341;33.0%;2021\nAustralia;Canberra;431380;1.7%;2020\nNamibia;Windhoek;431000;17.0%;2020\nTanzania;Dodoma;410956;0.6%;2012\nPapua New Guinea;Port Moresby;364145;3.7%;2011\nIvory Coast;Yamoussoukro;361893;1.3%;2020\nLebanon;Beirut;361366;6.5%;2014\nBolivia;Sucre;360544;3.0%;2022\nPuerto Rico (US);San Juan;342259;10.5%;2020\nCosta Rica;San José;342188;6.6%;2018\nLesotho;Maseru;330760;14.5%;2016\nCyprus;Nicosia;326739;26.3%;2016\nEquatorial Guinea;Malabo;297000;18.2%;2018\nSlovenia;Ljubljana;285604;13.5%;2021\nEast Timor;Dili;277279;21.0%;2015\nBosnia and Herzegovina;Sarajevo;275524;8.4%;2013\nBahamas;Nassau;274400;67.3%;2016\nBotswana;Gaborone;273602;10.6%;2020\nBenin;Porto-Novo;264320;2.0%;2013\nSuriname;Paramaribo;240924;39.3%;2012\nIndia;New Delhi;249998;0.0%;2011\nSahrawi Arab Democratic Republic;Laayoune (claimed) - Tifariti (de facto);217732 - 3000;—;2014\nNew Zealand;Wellington;217000;4.2%;2021\nBahrain;Manama;200000;13.7%;2020\nKosovo;Pristina;198897;12.0%;2011\nMontenegro;Podgorica;190488;30.3%;2020\nBelgium;Brussels;187686;1.6%;2022\nCape Verde;Praia;159050;27.1%;2017\nMauritius;Port Louis;147066;11.3%;2018\nCuraçao (Netherlands);Willemstad;136660;71.8%;2011\nBurundi;Gitega;135467;1.1%;2020\nSwitzerland;Bern (de facto);134591;1.5%;2020\nTransnistria;Tiraspol;133807;38.5%;2015\nMaldives;Malé;133412;25.6%;2014\nIceland;Reykjavík;133262;36.0%;2021\nLuxembourg;Luxembourg City;124509;19.5%;2021\nGuyana;Georgetown;118363;14.7%;2012\nBhutan;Thimphu;114551;14.7%;2017\nComoros;Moroni;111326;13.5%;2016\nBarbados;Bridgetown;110000;39.1%;2014\nSri Lanka;Sri Jayawardenepura Kotte;107925;0.5%;2012\nBrunei;Bandar Seri Begawan;100700;22.6%;2007\nEswatini;Mbabane;94874;8.0%;2010\nNew Caledonia (France);Nouméa;94285;32.8%;2019\nFiji;Suva;93970;10.2%;2017\nSolomon Islands;Honiara;92344;13.0%;2021\nRepublic of Artsakh;Stepanakert;75000;62.5%;2021\nGambia;Banjul;73000;2.8%;2013\nSão Tomé and Príncipe;São Tomé;71868;32.2%;2015\nKiribati;Tarawa;70480;54.7%;2020\nVanuatu;Port Vila;51437;16.1%;2016\nNorthern Mariana Islands (USA);Saipan;47565;96.1%;2017\nSamoa;Apia;41611;19.0%;2021\nPalestine;Ramallah (de facto);38998;0.8%;2017\nMonaco;Monaco;38350;104.5%;2020\nJersey (UK);Saint Helier;37540;34.2%;2018\nTrinidad and Tobago;Port of Spain;37074;2.4%;2011\nCayman Islands (UK);George Town;34399;50.5%;2021\nGibraltar (UK);Gibraltar;34003;104.1%;2020\nGrenada;St. George's;33734;27.1%;2012\nAruba (Netherlands);Oranjestad;28294;26.6%;2010\nIsle of Man (UK);Douglas;27938;33.2%;2011\nMarshall Islands;Majuro;27797;66.1%;2011\nTonga;Nukuʻalofa;27600;26.0%;2022\nSeychelles;Victoria;26450;24.8%;2010\nFrench Polynesia (France);Papeete;26926;8.9%;2017\nAndorra;Andorra la Vella;22873;28.9%;2022\nFaroe Islands (Denmark);Tórshavn;22738;43.0%;2022\nAntigua and Barbuda;St. John's;22219;23.8%;2011\nBelize;Belmopan;20621;5.2%;2016\nSaint Lucia;Castries;20000;11.1%;2013\nGuernsey (UK);Saint Peter Port;18958;30.1%;2019\nGreenland (Denmark);Nuuk;18800;33.4%;2021\nDominica;Roseau;14725;20.3%;2011\nSaint Kitts and Nevis;Basseterre;14000;29.4%;2018\nSaint Vincent and the Grenadines;Kingstown;12909;12.4%;2012\nBritish Virgin Islands (UK);Road Town;12603;40.5%;2012\nÅland (Finland);Mariehamn;11736;39.0%;2021\nU.S. Virgin Islands (US);Charlotte Amalie;14477;14.5%;2020\nMicronesia;Palikir;6647;5.9%;2010\nTuvalu;Funafuti;6320;56.4%;2017\nMalta;Valletta;5827;1.1%;2019\nLiechtenstein;Vaduz;5774;14.8%;2021\nSaint Pierre and Miquelon (France);Saint-Pierre;5394;91.7%;2019\nCook Islands (NZ);Avarua;4906;28.9%;2016\nSan Marino;City of San Marino;4061;12.0%;2021\nTurks and Caicos Islands (UK);Cockburn Town;3720;8.2%;2016\nAmerican Samoa (USA);Pago Pago;3656;8.1%;2010\nSaint Martin (France);Marigot;3229;10.1%;2017\nSaint Barthélemy (France);Gustavia;2615;24.1%;2010\nFalkland Islands (UK);Stanley;2460;65.4%;2016\nSvalbard (Norway);Longyearbyen;2417;82.2%;2020\nSint Maarten (Netherlands);Philipsburg;1894;4.3%;2011\nChristmas Island (Australia);Flying Fish Cove;1599;86.8%;2016\nAnguilla (UK);The Valley;1067;6.8%;2011\nGuam (US);Hagåtña;1051;0.6%;2010\nWallis and Futuna (France);Mata Utu;1029;8.9%;2018\nBermuda (UK);Hamilton;854;1.3%;2016\nNauru;Yaren (de facto);747;6.0%;2011\nSaint Helena (UK);Jamestown;629;11.6%;2016\nNiue (NZ);Alofi;597;30.8%;2017\nTokelau (NZ);Atafu;541;29.3%;2016\nVatican City;Vatican City (city-state);453;100%;2019\nMontserrat (UK);Brades (de facto) - Plymouth (de jure);449 - 0;-;2011\nNorfolk Island (Australia);Kingston;341;-;2015\nPalau;Ngerulmud;271;1.5%;2010\nCocos (Keeling) Islands (Australia);West Island;134;24.6%;2011\nPitcairn Islands (UK);Adamstown;40;100.0%;2021\nSouth Georgia and the South Sandwich Islands (UK);King Edward Point;22;73.3%;2018\"\"\"\n\n# -------------------------------------------------------------------\n# HTML template for the report. We define no table header <th> items\n# because this is done in post processing.\n# The actual template part is the table row, identified by id \"row\".\n# The content of each cell will be filled using the respective id.\n# -------------------------------------------------------------------\nHTML = \"\"\"\n <h1 style=\"text-align:center\">World Capital Cities</h1>\n <p><i>Percent \"%\" is city population as a percentage of the country, as of \"Year\".</i>\n </p><p></p>\n <table>\n <tr id=\"row\">\n <td id=\"country\"></td>\n <td id=\"capital\"></td>\n <td id=\"population\"></td>\n <td id=\"percent\"></td>\n <td id=\"year\"></td>\n </tr>\n </table>\n\"\"\"\n\n# -------------------------------------------------------------------\n# Sets font-family globally to sans-serif, and text-align to right\n# for the numerical table columns.\n# -------------------------------------------------------------------\nCSS = \"\"\"\nbody {\n font-family: sans-serif;\n}\ntd[id=\"population\"], td[id=\"percent\"], td[id=\"year\"] {\n text-align: right;\n padding-right: 2px;\n}\"\"\"\n\n# -------------------------------------------------------------------\n# recorder function for cell positions\n# -------------------------------------------------------------------\ncoords = {}  # stores cell gridline coordinates\n\ndef recorder(elpos):\n  \"\"\"We only record positions of table rows and cells.\n\n Information is stored in \"coords\" with page number as key.\n \"\"\"\n    global coords  # dictionary of row and cell coordinates per page\n    if elpos.open_close != 2:  # only consider coordinates provided at \"close\"\n        return\n    if elpos.id not in (\"row\", \"country\", \"capital\", \"population\", \"percent\", \"year\"):\n        return  # only look at row / cell content\n\n    rect = pymupdf.Rect(elpos.rect)  # cell rectangle\n    if rect.y1 > elpos.filled:  # ignore stuff below the filled rectangle\n        return\n\n    # per page, we store the floats top-most y, right-most x, column left\n    # and row bottom borders.\n    x, y, x1, y0 = coords.get(elpos.page, (set(), set(), 0, sys.maxsize))\n\n    if elpos.id != \"row\":\n        x.add(rect.x0)  # add cell left border coordinate\n        if rect.x1 > x1:  # store right-most cell border on page\n            x1 = rect.x1\n    else:\n        y.add(rect.y1)  # add row bottom border coordinate\n        if rect.y0 < y0:  # store top-most cell border per page\n            y0 = rect.y0\n\n    coords[elpos.page] = (x, y, x1, y0)  # write back info per page\n    return\n\n# -------------------------------------------------------------------\n# define database access: make an intermediate memory database for\n# our demo purposes.\n# -------------------------------------------------------------------\ndbfilename = \":memory:\"  # the SQLITE database file name\ndatabase = sqlite3.connect(dbfilename)  # open database\ncursor = database.cursor()  # multi-purpose database cursor\n\n# Define and fill the SQLITE database\ncursor.execute(\n  \"\"\"CREATE TABLE capitals (Country text, Capital text, Population text, Percent text, Year text)\"\"\"\n)\n\nfor value in table_data.splitlines():\n    cursor.execute(\"INSERT INTO capitals VALUES (?,?,?,?,?)\", value.split(\";\"))\n\n# select statement for the rows - let SQL also sort it for us\nselect = \"\"\"SELECT * FROM capitals ORDER BY \"Country\" \"\"\"\n\n# -------------------------------------------------------------------\n# define the HTML Story and fill it with database data\n# -------------------------------------------------------------------\nstory = pymupdf.Story(HTML, user_css=CSS)\nbody = story.body  # access the HTML body detail\n\ntemplate = body.find(None, \"id\", \"row\")  # find the template part\ntable = body.find(\"table\", None, None)  # find start of table\n\n# read the rows from the database and put them all in one Python list\n# NOTE: instead, we might fetch rows one by one (advisable for large volumes)\n\ncursor.execute(select)  # execute cursor, and ...\nrows = cursor.fetchall()  # read out what was found\ndatabase.close()  # no longer needed\n\nfor country, capital, population, percent, year in rows:  # iterate through the row\n    row = template.clone()  # clone the template to report each row\n    row.find(None, \"id\", \"country\").add_text(country)\n    row.find(None, \"id\", \"capital\").add_text(capital)\n    row.find(None, \"id\", \"population\").add_text(population)\n    row.find(None, \"id\", \"percent\").add_text(percent)\n    row.find(None, \"id\", \"year\").add_text(year)\n\n    table.append_child(row)\n\ntemplate.remove()  # remove the template\n\n# -------------------------------------------------------------------\n# generate the PDF and write it to memory\n# -------------------------------------------------------------------\nfp = io.BytesIO()\nwriter = pymupdf.DocumentWriter(fp)\nmediabox = pymupdf.paper_rect(\"letter\")  # use pages in Letter format\nwhere = mediabox + (36, 36, -36, -72)  # leave page borders\nmore = True\npage = 0\nwhile more:\n    dev = writer.begin_page(mediabox)  # make a new page\n    if page > 0:  # leave room above the cells for inserting header row\n        delta = (0, 20, 0, 0)\n    else:\n        delta = (0, 0, 0, 0)\n    more, filled = story.place(where + delta)  # arrange content on this rectangle\n    story.element_positions(recorder, {\"page\": page, \"filled\": where.y1})\n    story.draw(dev)  # write content to page\n    writer.end_page()  # finish the page\n    page += 1\nwriter.close()  # close the PDF\n\n# -------------------------------------------------------------------\n# re-open memory PDF for inserting gridlines and header rows\n# -------------------------------------------------------------------\ndoc = pymupdf.open(\"pdf\", fp)\nfor page in doc:\n    page.wrap_contents()  # ensure all \"cm\" commands are properly wrapped\n    x, y, x1, y0 = coords[page.number]  # read coordinates of the page\n    x = sorted(list(x)) + [x1]  # list of cell left-right borders\n    y = [y0] + sorted(list(y))  # list of cell top-bottom borders\n    shape = page.new_shape()  # make a canvas to draw upon\n\n    for item in y:  # draw horizontal lines (one under each row)\n        shape.draw_line((x[0] - 2, item), (x[-1] + 2, item))\n\n    for i in range(len(y)):  # alternating row coloring\n        if i % 2:\n            rect = (x[0] - 2, y[i - 1], x[-1] + 2, y[i])\n            shape.draw_rect(rect)\n\n    for i in range(len(x)):  # draw vertical lines\n        d = 2 if i == len(x) - 1 else -2\n        shape.draw_line((x[i] + d, y[0]), (x[i] + d, y[-1]))\n\n    # Write header row above table content\n    y0 -= 5  # bottom coord for header row text\n    shape.insert_text((x[0], y0), \"Country\", fontname=\"hebo\", fontsize=12)\n    shape.insert_text((x[1], y0), \"Capital\", fontname=\"hebo\", fontsize=12)\n    shape.insert_text((x[2], y0), \"Population\", fontname=\"hebo\", fontsize=12)\n    shape.insert_text((x[3], y0), \"  %\", fontname=\"hebo\", fontsize=12)\n    shape.insert_text((x[4], y0), \"Year\", fontname=\"hebo\", fontsize=12)\n\n    # Write page footer\n    y0 = page.rect.height - 50  # top coordinate of footer bbox\n    bbox = pymupdf.Rect(0, y0, page.rect.width, y0 + 20)  # footer bbox\n    page.insert_textbox(\n        bbox,\n        f\"World Capital Cities, Page {page.number+1} of {doc.page_count}\",\n        align=pymupdf.TEXT_ALIGN_CENTER,\n    )\n    shape.finish(width=0.3, color=0.5, fill=0.9)  # rectangles and gray lines\n    shape.commit(overlay=False)  # put the drawings in background\n\ndoc.subset_fonts()\ndoc.save(__file__.replace(\".py\", \".pdf\"), deflate=True, garbage=4, pretty=True)\ndoc.close() \n```", "```py\nimport pymupdf\n\nMEDIABOX = pymupdf.paper_rect(\"letter\")  # output page format: Letter\nGRIDSPACE = pymupdf.Rect(100, 100, 400, 400)\nGRID = pymupdf.make_table(GRIDSPACE, rows=2, cols=2)\nCELLS = [GRID[i][j] for i in range(2) for j in range(2)]\ntext_table = (\"A\", \"B\", \"C\", \"D\")\nwriter = pymupdf.DocumentWriter(__file__.replace(\".py\", \".pdf\"))  # create the writer\n\ndevice = writer.begin_page(MEDIABOX)  # make new page\nfor i, text in enumerate(text_table):\n    story = pymupdf.Story(em=1)\n    body = story.body\n    with body.add_paragraph() as para:\n        para.set_bgcolor(\"#ecc\")\n        para.set_pagebreak_after()  # fills whole cell with bgcolor\n        para.set_align(\"center\")\n        para.set_fontsize(16)\n        para.add_text(f\"\\n\\n\\n{text}\")\n    story.place(CELLS[i])\n    story.draw(device)\n    del story\n\nwriter.end_page()  # finish page\n\nwriter.close()  # close output file \n```", "```py\n\"\"\"\nDemo script PyMuPDF Story class\n-------------------------------\n\nRead the Python sources in the script directory and create a PDF of all their\nsource codes.\n\nThe following features are included as a specialty:\n1\\. HTML source for pymupdf.Story created via Python API exclusively\n2\\. Separate Story objects for page headers and footers\n3\\. Use of HTML \"id\" elements for identifying source start pages\n4\\. Generate a Table of Contents pointing to source file starts. This\n - uses the new Stoy callback feature\n - uses Story also for making the TOC page(s)\n\n\"\"\"\nimport io\nimport os\nimport time\n\nimport pymupdf\n\nTHISDIR = os.path.dirname(os.path.abspath(__file__))\nTOC = []  # this will contain the TOC list items\nCURRENT_ID = \"\"  # currently processed filename - stored by recorder func\nMEDIABOX = pymupdf.paper_rect(\"a4-l\")  # chosen page size\nWHERE = MEDIABOX + (36, 50, -36, -36)  # sub rectangle for source content\n# location of the header rectangle\nHDR_WHERE = (36, 5, MEDIABOX.width - 36, 40)\n# location of the footer rectangle\nFTR_WHERE = (36, MEDIABOX.height - 36, MEDIABOX.width - 36, MEDIABOX.height)\n\ndef recorder(elpos):\n  \"\"\"Callback function invoked during story.place().\n This function generates / collects all TOC items and updates the value of\n CURRENT_ID - which is used to update the footer line of each page.\n \"\"\"\n    global TOC, CURRENT_ID\n    if not elpos.open_close & 1:  # only consider \"open\" items\n        return\n    level = elpos.heading\n    y0 = elpos.rect[1]  # top of written rectangle (use for TOC)\n    if level > 0:  # this is a header (h1 - h6)\n        pno = elpos.page + 1  # the page number\n        TOC.append(\n            (\n                level,\n                elpos.text,\n                elpos.page + 1,\n                y0,\n            )\n        )\n        return\n\n    CURRENT_ID = elpos.id if elpos.id else \"\"  # update for footer line\n    return\n\ndef header_story(text):\n  \"\"\"Make the page header\"\"\"\n    header = pymupdf.Story()\n    hdr_body = header.body\n    hdr_body.add_paragraph().set_properties(\n        align=pymupdf.TEXT_ALIGN_CENTER,\n        bgcolor=\"#eee\",\n        font=\"sans-serif\",\n        bold=True,\n        fontsize=12,\n        color=\"green\",\n    ).add_text(text)\n    return header\n\ndef footer_story(text):\n  \"\"\"Make the page footer\"\"\"\n    footer = pymupdf.Story()\n    ftr_body = footer.body\n    ftr_body.add_paragraph().set_properties(\n        bgcolor=\"#eee\",\n        align=pymupdf.TEXT_ALIGN_CENTER,\n        color=\"blue\",\n        fontsize=10,\n        font=\"sans-serif\",\n    ).add_text(text)\n    return footer\n\ndef code_printer(outfile):\n  \"\"\"Output the generated PDF to outfile.\"\"\"\n    global MAX_TITLE_LEN\n    where = +WHERE\n    writer = pymupdf.DocumentWriter(outfile, \"\")\n    print_time = time.strftime(\"%Y-%m-%d %H:%M:%S (%z)\")\n    thispath = os.path.abspath(os.curdir)\n    basename = os.path.basename(thispath)\n\n    story = pymupdf.Story()\n    body = story.body\n    body.set_properties(font=\"sans-serif\")\n\n    text = f\"Python sources in folder '{THISDIR}'\"\n\n    body.add_header(1).add_text(text)  # the only h1 item in the story\n\n    files = os.listdir(THISDIR)  # list / select Python files in our directory\n    i = 1\n    for code_file in files:\n        if not code_file.endswith(\".py\"):\n            continue\n\n        # read Python file source\n        fileinput = open(os.path.join(THISDIR, code_file), \"rb\")\n        text = fileinput.read().decode()\n        fileinput.close()\n\n        # make level 2 header\n        hdr = body.add_header(2)\n        if i > 1:\n            hdr.set_pagebreak_before()\n        hdr.add_text(f\"{i}. Listing of file '{code_file}'\")\n\n        # Write the file code\n        body.add_codeblock().set_bgcolor((240, 255, 210)).set_color(\"blue\").set_id(\n            code_file\n        ).set_fontsize(10).add_text(text)\n\n        # Indicate end of a source file\n        body.add_paragraph().set_align(pymupdf.TEXT_ALIGN_CENTER).add_text(\n            f\"---------- End of File '{code_file}' ----------\"\n        )\n        i += 1  # update file counter\n\n    i = 0\n    while True:\n        i += 1\n        device = writer.begin_page(MEDIABOX)\n        # create Story objects for header, footer and the rest.\n        header = header_story(f\"Python Files in '{THISDIR}'\")\n        hdr_ok, _ = header.place(HDR_WHERE)\n        if hdr_ok != 0:\n            raise ValueError(\"header does not fit\")\n        header.draw(device, None)\n\n        # --------------------------------------------------------------\n        # Write the file content.\n        # --------------------------------------------------------------\n        more, filled = story.place(where)\n        # Inform the callback function\n        # Args:\n        #   recorder: the Python function to call\n        #   {}: dictionary containing anything - we pass the page number\n        story.element_positions(recorder, {\"page\": i - 1})\n        story.draw(device, None)\n\n        # --------------------------------------------------------------\n        # Make / write page footer.\n        # We MUST have a paragraph b/o background color / alignment\n        # --------------------------------------------------------------\n        if CURRENT_ID:\n            text = f\"File '{CURRENT_ID}' printed at {print_time}{chr(160)*5}{'-'*10}{chr(160)*5}Page {i}\"\n        else:\n            text = f\"Printed at {print_time}{chr(160)*5}{'-'*10}{chr(160)*5}Page {i}\"\n        footer = footer_story(text)\n        # write the page footer\n        ftr_ok, _ = footer.place(FTR_WHERE)\n        if ftr_ok != 0:\n            raise ValueError(\"footer does not fit\")\n        footer.draw(device, None)\n\n        writer.end_page()\n        if more == 0:\n            break\n    writer.close()\n\nif __name__ == \"__main__\" or os.environ.get('PYTEST_CURRENT_TEST'):\n    fileptr1 = io.BytesIO()\n    t0 = time.perf_counter()\n    code_printer(fileptr1)  # make the PDF\n    t1 = time.perf_counter()\n    doc = pymupdf.open(\"pdf\", fileptr1)\n    old_count = doc.page_count\n    # -----------------------------------------------------------------------------\n    # Post-processing step to make / insert the toc\n    # This also works using pymupdf.Story:\n    # - make a new PDF in memory which contains pages with the TOC text\n    # - add these TOC pages to the end of the original file\n    # - search item text on the inserted pages and cover each with a PDF link\n    # - move the TOC pages to the front of the document\n    # -----------------------------------------------------------------------------\n    story = pymupdf.Story()\n    body = story.body\n    body.add_header(1).set_font(\"sans-serif\").add_text(\"Table of Contents\")\n    # prefix TOC with an entry pointing to this page\n    TOC.insert(0, [1, \"Table of Contents\", old_count + 1, 36])\n\n    for item in TOC[1:]:  # write the file name headers as TOC lines\n        body.add_paragraph().set_font(\"sans-serif\").add_text(\n            item[1] + f\" - ({item[2]})\"\n        )\n    fileptr2 = io.BytesIO()  # put TOC pages to a separate PDF initially\n    writer = pymupdf.DocumentWriter(fileptr2)\n    i = 1\n    more = 1\n    while more:\n        device = writer.begin_page(MEDIABOX)\n        header = header_story(f\"Python Files in '{THISDIR}'\")\n        # write the page header\n        hdr_ok, _ = header.place(HDR_WHERE)\n        header.draw(device, None)\n\n        more, filled = story.place(WHERE)\n        story.draw(device, None)\n\n        footer = footer_story(f\"TOC-{i}\")  # separate page numbering scheme\n        # write the page footer\n        ftr_ok, _ = footer.place(FTR_WHERE)\n        footer.draw(device, None)\n        writer.end_page()\n        i += 1\n\n    writer.close()\n    doc2 = pymupdf.open(\"pdf\", fileptr2)  # open TOC pages as another PDF\n    doc.insert_pdf(doc2)  # and append to the main PDF\n    new_range = range(old_count, doc.page_count)  # the TOC page numbers\n    pages = [doc[i] for i in new_range]  # these are the TOC pages within main PDF\n    for item in TOC:  # search for TOC item text to get its rectangle\n        for page in pages:\n            rl = page.search_for(item[1], flags=~(pymupdf.TEXT_PRESERVE_LIGATURES | pymupdf.TEXT_PRESERVE_SPANS))\n            if rl != []:  # this text must be on next page\n                break\n        rect = rl[0]  # rectangle of TOC item text\n        link = {  # make a link from it\n            \"kind\": pymupdf.LINK_GOTO,\n            \"from\": rect,\n            \"to\": pymupdf.Point(0, item[3]),\n            \"page\": item[2] - 1,\n        }\n        page.insert_link(link)\n\n    # insert the TOC in the main PDF\n    doc.set_toc(TOC)\n    # move all the TOC pages to the desired place (1st page here)\n    for i in new_range:\n        doc.move_page(doc.page_count - 1, 0)\n    doc.ez_save(__file__.replace(\".py\", \".pdf\")) \n```", "```py\nimport pymupdf\nimport json\n\nmy_json =  \"\"\"\n[\n {\n \"name\" :           \"Five-storied Pagoda\",\n \"temple\" :         \"Rurikō-ji\",\n \"founded\" :        \"middle Muromachi period, 1442\",\n \"region\" :         \"Yamaguchi, Yamaguchi\",\n \"position\" :       \"34.190181,131.472917\"\n },\n {\n \"name\" :           \"Founder's Hall\",\n \"temple\" :         \"Eihō-ji\",\n \"founded\" :        \"early Muromachi period\",\n \"region\" :         \"Tajimi, Gifu\",\n \"position\" :       \"35.346144,137.129189\"\n },\n {\n \"name\" :           \"Fudōdō\",\n \"temple\" :         \"Kongōbu-ji\",\n \"founded\" :        \"early Kamakura period\",\n \"region\" :         \"Kōya, Wakayama\",\n \"position\" :       \"34.213103,135.580397\"\n },\n {\n \"name\" :           \"Goeidō\",\n \"temple\" :         \"Nishi Honganji\",\n \"founded\" :        \"Edo period, 1636\",\n \"region\" :         \"Kyoto\",\n \"position\" :       \"34.991394,135.751689\"\n },\n {\n \"name\" :           \"Golden Hall\",\n \"temple\" :         \"Murō-ji\",\n \"founded\" :        \"early Heian period\",\n \"region\" :         \"Uda, Nara\",\n \"position\" :       \"34.536586819357986,136.0395548452301\"\n },\n {\n \"name\" :           \"Golden Hall\",\n \"temple\" :         \"Fudō-in\",\n \"founded\" :        \"late Muromachi period, 1540\",\n \"region\" :         \"Hiroshima\",\n \"position\" :       \"34.427014,132.471117\"\n },\n {\n \"name\" :           \"Golden Hall\",\n \"temple\" :         \"Ninna-ji\",\n \"founded\" :        \"Momoyama period, 1613\",\n \"region\" :         \"Kyoto\",\n \"position\" :       \"35.031078,135.713811\"\n },\n {\n \"name\" :           \"Golden Hall\",\n \"temple\" :         \"Mii-dera\",\n \"founded\" :        \"Momoyama period, 1599\",\n \"region\" :         \"Ōtsu, Shiga\",\n \"position\" :       \"35.013403,135.852861\"\n },\n {\n \"name\" :           \"Golden Hall\",\n \"temple\" :         \"Tōshōdai-ji\",\n \"founded\" :        \"Nara period, 8th century\",\n \"region\" :         \"Nara, Nara\",\n \"position\" :       \"34.675619,135.784842\"\n },\n {\n \"name\" :           \"Golden Hall\",\n \"temple\" :         \"Tō-ji\",\n \"founded\" :        \"Momoyama period, 1603\",\n \"region\" :         \"Kyoto\",\n \"position\" :       \"34.980367,135.747686\"\n },\n {\n \"name\" :           \"Golden Hall\",\n \"temple\" :         \"Tōdai-ji\",\n \"founded\" :        \"middle Edo period, 1705\",\n \"region\" :         \"Nara, Nara\",\n \"position\" :       \"34.688992,135.839822\"\n },\n {\n \"name\" :           \"Golden Hall\",\n \"temple\" :         \"Hōryū-ji\",\n \"founded\" :        \"Asuka period, by 693\",\n \"region\" :         \"Ikaruga, Nara\",\n \"position\" :       \"34.614317,135.734458\"\n },\n {\n \"name\" :           \"Golden Hall\",\n \"temple\" :         \"Daigo-ji\",\n \"founded\" :        \"late Heian period\",\n \"region\" :         \"Kyoto\",\n \"position\" :       \"34.951481,135.821747\"\n },\n {\n \"name\" :           \"Keigū-in Main Hall\",\n \"temple\" :         \"Kōryū-ji\",\n \"founded\" :        \"early Kamakura period, before 1251\",\n \"region\" :         \"Kyoto\",\n \"position\" :       \"35.015028,135.705425\"\n },\n {\n \"name\" :           \"Konpon-chūdō\",\n \"temple\" :         \"Enryaku-ji\",\n \"founded\" :        \"early Edo period, 1640\",\n \"region\" :         \"Ōtsu, Shiga\",\n \"position\" :       \"35.070456,135.840942\"\n },\n {\n \"name\" :           \"Korō\",\n \"temple\" :         \"Tōshōdai-ji\",\n \"founded\" :        \"early Kamakura period, 1240\",\n \"region\" :         \"Nara, Nara\",\n \"position\" :       \"34.675847,135.785069\"\n },\n {\n \"name\" :           \"Kōfūzō\",\n \"temple\" :         \"Hōryū-ji\",\n \"founded\" :        \"early Heian period\",\n \"region\" :         \"Ikaruga, Nara\",\n \"position\" :       \"34.614439,135.735428\"\n },\n {\n \"name\" :           \"Large Lecture Hall\",\n \"temple\" :         \"Hōryū-ji\",\n \"founded\" :        \"middle Heian period, 990\",\n \"region\" :         \"Ikaruga, Nara\",\n \"position\" :       \"34.614783,135.734175\"\n },\n {\n \"name\" :           \"Lecture Hall\",\n \"temple\" :         \"Zuiryū-ji\",\n \"founded\" :        \"early Edo period, 1655\",\n \"region\" :         \"Takaoka, Toyama\",\n \"position\" :       \"36.735689,137.010019\"\n },\n {\n \"name\" :           \"Lecture Hall\",\n \"temple\" :         \"Tōshōdai-ji\",\n \"founded\" :        \"Nara period, 763\",\n \"region\" :         \"Nara, Nara\",\n \"position\" :       \"34.675933,135.784842\"\n },\n {\n \"name\" :           \"Lotus Flower Gate\",\n \"temple\" :         \"Tō-ji\",\n \"founded\" :        \"early Kamakura period\",\n \"region\" :         \"Kyoto\",\n \"position\" :       \"34.980678,135.746314\"\n },\n {\n \"name\" :           \"Main Hall\",\n \"temple\" :         \"Akishinodera\",\n \"founded\" :        \"early Kamakura period\",\n \"region\" :         \"Nara, Nara\",\n \"position\" :       \"34.703769,135.776189\"\n }\n]\n\n\"\"\"\n\n# the result is a Python dictionary:\nmy_dict = json.loads(my_json)\n\nMEDIABOX = pymupdf.paper_rect(\"letter\")  # output page format: Letter\nWHERE = MEDIABOX + (36, 36, -36, -36)\nwriter = pymupdf.DocumentWriter(\"json-example.pdf\")  # create the writer\n\nstory = pymupdf.Story()\nbody = story.body\n\nfor i, entry in enumerate(my_dict):\n\n    for attribute, value in entry.items():\n        para = body.add_paragraph()\n\n        if attribute == \"position\":\n            para.set_fontsize(10)\n            para.add_link(f\"www.google.com/maps/@{value},14z\")\n        else:\n            para.add_span()\n            para.set_color(\"#990000\")\n            para.set_fontsize(14)\n            para.set_bold()\n            para.add_text(f\"{attribute} \")\n            para.add_span()\n            para.set_fontsize(18)\n            para.add_text(f\"{value}\")\n\n    body.add_horizontal_line()\n\n# This while condition will check a value from the Story `place` method\n# for whether all content for the story has been written (0), otherwise\n# more content is waiting to be written (1)\nmore = 1\nwhile more:\n    device = writer.begin_page(MEDIABOX)  # make new page\n    more, _ = story.place(WHERE)\n    story.draw(device)\n    writer.end_page()  # finish page\n\nwriter.close()  # close output file\n\ndel story \n```", "```py\n\"\"\"\nDemo script for PyMuPDF's `Story.write()` method.\n\nThis is a way of laying out a story into a PDF document, that avoids the need\nto write a loop that calls `story.place()` and `story.draw()`.\n\nInstead just a single function call is required, albeit with a `rectfn()`\ncallback that returns the rectangles into which the story is placed.\n\"\"\"\n\nimport html\n\nimport pymupdf\n\n# Create html containing multiple copies of our own source code.\n#\nwith open(__file__) as f:\n    text = f.read()\ntext = html.escape(text)\nhtml = f'''\n<!DOCTYPE html>\n<body>\n\n<h1>Contents of {__file__}</h1>\n\n<h2>Normal</h2>\n<pre>\n{text}\n</pre>\n\n<h2>Strong</h2>\n<strong>\n<pre>\n{text}\n</pre>\n</strong>\n\n<h2>Em</h2>\n<em>\n<pre>\n{text}\n</pre>\n</em>\n\n</body>\n'''\n\ndef rectfn(rect_num, filled):\n  '''\n We return four rectangles per page in this order:\n\n 1 3\n 2 4\n '''\n    page_w = 800\n    page_h = 600\n    margin = 50\n    rect_w = (page_w - 3*margin) / 2\n    rect_h = (page_h - 3*margin) / 2\n\n    if rect_num % 4 == 0:\n        # New page.\n        mediabox = pymupdf.Rect(0, 0, page_w, page_h)\n    else:\n        mediabox = None\n    # Return one of four rects in turn.\n    rect_x = margin + (rect_w+margin) * ((rect_num // 2) % 2)\n    rect_y = margin + (rect_h+margin) * (rect_num % 2)\n    rect = pymupdf.Rect(rect_x, rect_y, rect_x + rect_w, rect_y + rect_h)\n    #print(f'rectfn(): rect_num={rect_num} filled={filled}. Returning: rect={rect}')\n    return mediabox, rect, None\n\nstory = pymupdf.Story(html, em=8)\n\nout_path = __file__.replace('.py', '.pdf')\nwriter = pymupdf.DocumentWriter(out_path)\n\nstory.write(writer, rectfn)\nwriter.close() \n```", "```py\n\"\"\"\nDemo script for PyMuPDF's `pymupdf.Story.write_stabilized()`.\n\n`pymupdf.Story.write_stabilized()` is similar to `pymupdf.Story.write()`,\nexcept instead of taking a fixed html document, it does iterative layout\nof dynamically-generated html content (provided by a callback) to a\n`pymupdf.DocumentWriter`.\n\nFor example this allows one to add a dynamically-generated table of contents\nsection while ensuring that page numbers are patched up until stable.\n\"\"\"\n\nimport textwrap\n\nimport pymupdf\n\ndef rectfn(rect_num, filled):\n  '''\n We return one rect per page.\n '''\n    rect = pymupdf.Rect(10, 20, 290, 380)\n    mediabox = pymupdf.Rect(0, 0, 300, 400)\n    #print(f'rectfn(): rect_num={rect_num} filled={filled}')\n    return mediabox, rect, None\n\ndef contentfn(positions):\n  '''\n Returns html content, with a table of contents derived from `positions`.\n '''\n    ret = ''\n    ret += textwrap.dedent('''\n <!DOCTYPE html>\n <body>\n <h2>Contents</h2>\n <ul>\n ''')\n\n    # Create table of contents with links to all <h1..6> sections in the\n    # document.\n    for position in positions:\n        if position.heading and (position.open_close & 1):\n            text = position.text if position.text else ''\n            if position.id:\n                ret += f\"    <li><a href=\\\"#{position.id}\\\">{text}</a>\\n\"\n            else:\n                ret += f\"    <li>{text}\\n\"\n            ret += f\"        <ul>\\n\"\n            ret += f\"        <li>page={position.page_num}\\n\"\n            ret += f\"        <li>depth={position.depth}\\n\"\n            ret += f\"        <li>heading={position.heading}\\n\"\n            ret += f\"        <li>id={position.id!r}\\n\"\n            ret += f\"        <li>href={position.href!r}\\n\"\n            ret += f\"        <li>rect={position.rect}\\n\"\n            ret += f\"        <li>text={text!r}\\n\"\n            ret += f\"        <li>open_close={position.open_close}\\n\"\n            ret += f\"        </ul>\\n\"\n\n    ret += '</ul>\\n'\n\n    # Main content.\n    ret += textwrap.dedent(f'''\n\n <h1>First section</h1>\n <p>Contents of first section.\n\n <h1>Second section</h1>\n <p>Contents of second section.\n <h2>Second section first subsection</h2>\n\n <p>Contents of second section first subsection.\n\n <h1>Third section</h1>\n <p>Contents of third section.\n\n </body>\n ''')\n    ret = ret.strip()\n    with open(__file__.replace('.py', '.html'), 'w') as f:\n        f.write(ret)\n    return ret;\n\nout_path = __file__.replace('.py', '.pdf')\nwriter = pymupdf.DocumentWriter(out_path)\npymupdf.Story.write_stabilized(writer, contentfn, rectfn)\nwriter.close() \n```", "```py\n\"\"\"\nDemo script for PyMuPDF's `pymupdf.Story.write_stabilized_with_links()`.\n\n`pymupdf.Story.write_stabilized_links()` is similar to\n`pymupdf.Story.write_stabilized()` except that it creates a PDF `pymupdf.Document`\nthat contains PDF links generated from all internal links in the original html.\n\"\"\"\n\nimport textwrap\n\nimport pymupdf\n\ndef rectfn(rect_num, filled):\n  '''\n We return one rect per page.\n '''\n    rect = pymupdf.Rect(10, 20, 290, 380)\n    mediabox = pymupdf.Rect(0, 0, 300, 400)\n    #print(f'rectfn(): rect_num={rect_num} filled={filled}')\n    return mediabox, rect, None\n\ndef contentfn(positions):\n  '''\n Returns html content, with a table of contents derived from `positions`.\n '''\n    ret = ''\n    ret += textwrap.dedent('''\n <!DOCTYPE html>\n <body>\n <h2>Contents</h2>\n <ul>\n ''')\n\n    # Create table of contents with links to all <h1..6> sections in the\n    # document.\n    for position in positions:\n        if position.heading and (position.open_close & 1):\n            text = position.text if position.text else ''\n            if position.id:\n                ret += f\"    <li><a href=\\\"#{position.id}\\\">{text}</a>\\n\"\n            else:\n                ret += f\"    <li>{text}\\n\"\n            ret += f\"        <ul>\\n\"\n            ret += f\"        <li>page={position.page_num}\\n\"\n            ret += f\"        <li>depth={position.depth}\\n\"\n            ret += f\"        <li>heading={position.heading}\\n\"\n            ret += f\"        <li>id={position.id!r}\\n\"\n            ret += f\"        <li>href={position.href!r}\\n\"\n            ret += f\"        <li>rect={position.rect}\\n\"\n            ret += f\"        <li>text={text!r}\\n\"\n            ret += f\"        <li>open_close={position.open_close}\\n\"\n            ret += f\"        </ul>\\n\"\n\n    ret += '</ul>\\n'\n\n    # Main content.\n    ret += textwrap.dedent(f'''\n\n <h1>First section</h1>\n <p>Contents of first section.\n <ul>\n <li>External <a href=\"https://artifex.com/\">link to https://artifex.com/</a>.\n <li><a href=\"#idtest\">Link to IDTEST</a>.\n <li><a href=\"#nametest\">Link to NAMETEST</a>.\n </ul>\n\n <h1>Second section</h1>\n <p>Contents of second section.\n <h2>Second section first subsection</h2>\n\n <p>Contents of second section first subsection.\n <p id=\"idtest\">IDTEST\n\n <h1>Third section</h1>\n <p>Contents of third section.\n <p><a name=\"nametest\">NAMETEST</a>.\n\n </body>\n ''')\n    ret = ret.strip()\n    with open(__file__.replace('.py', '.html'), 'w') as f:\n        f.write(ret)\n    return ret;\n\nout_path = __file__.replace('.py', '.pdf')\ndocument = pymupdf.Story.write_stabilized_with_links(contentfn, rectfn)\ndocument.save(out_path) \n```", "```py\n\"\"\"\nDemo script for PyMuPDF's `Story.write()` method.\n\nThis is a way of laying out a story into a PDF document, that avoids the need\nto write a loop that calls `story.place()` and `story.draw()`.\n\nInstead just a single function call is required, albeit with a `rectfn()`\ncallback that returns the rectangles into which the story is placed.\n\"\"\"\n\nimport html\n\nimport pymupdf\n\n# Create html containing multiple copies of our own source code.\n#\nwith open(__file__) as f:\n    text = f.read()\ntext = html.escape(text)\nhtml = f'''\n<!DOCTYPE html>\n<body>\n\n<h1>Contents of {__file__}</h1>\n\n<h2>Normal</h2>\n<pre>\n{text}\n</pre>\n\n<h2>Strong</h2>\n<strong>\n<pre>\n{text}\n</pre>\n</strong>\n\n<h2>Em</h2>\n<em>\n<pre>\n{text}\n</pre>\n</em>\n\n</body>\n'''\n\ndef rectfn(rect_num, filled):\n  '''\n We return four rectangles per page in this order:\n\n 1 3\n 2 4\n '''\n    page_w = 800\n    page_h = 600\n    margin = 50\n    rect_w = (page_w - 3*margin) / 2\n    rect_h = (page_h - 3*margin) / 2\n\n    if rect_num % 4 == 0:\n        # New page.\n        mediabox = pymupdf.Rect(0, 0, page_w, page_h)\n    else:\n        mediabox = None\n    # Return one of four rects in turn.\n    rect_x = margin + (rect_w+margin) * ((rect_num // 2) % 2)\n    rect_y = margin + (rect_h+margin) * (rect_num % 2)\n    rect = pymupdf.Rect(rect_x, rect_y, rect_x + rect_w, rect_y + rect_h)\n    #print(f'rectfn(): rect_num={rect_num} filled={filled}. Returning: rect={rect}')\n    return mediabox, rect, None\n\nstory = pymupdf.Story(html, em=8)\n\nout_path = __file__.replace('.py', '.pdf')\nwriter = pymupdf.DocumentWriter(out_path)\n\nstory.write(writer, rectfn)\nwriter.close() \n```", "```py\n\"\"\"\nDemo script for PyMuPDF's `pymupdf.Story.write_stabilized()`.\n\n`pymupdf.Story.write_stabilized()` is similar to `pymupdf.Story.write()`,\nexcept instead of taking a fixed html document, it does iterative layout\nof dynamically-generated html content (provided by a callback) to a\n`pymupdf.DocumentWriter`.\n\nFor example this allows one to add a dynamically-generated table of contents\nsection while ensuring that page numbers are patched up until stable.\n\"\"\"\n\nimport textwrap\n\nimport pymupdf\n\ndef rectfn(rect_num, filled):\n  '''\n We return one rect per page.\n '''\n    rect = pymupdf.Rect(10, 20, 290, 380)\n    mediabox = pymupdf.Rect(0, 0, 300, 400)\n    #print(f'rectfn(): rect_num={rect_num} filled={filled}')\n    return mediabox, rect, None\n\ndef contentfn(positions):\n  '''\n Returns html content, with a table of contents derived from `positions`.\n '''\n    ret = ''\n    ret += textwrap.dedent('''\n <!DOCTYPE html>\n <body>\n <h2>Contents</h2>\n <ul>\n ''')\n\n    # Create table of contents with links to all <h1..6> sections in the\n    # document.\n    for position in positions:\n        if position.heading and (position.open_close & 1):\n            text = position.text if position.text else ''\n            if position.id:\n                ret += f\"    <li><a href=\\\"#{position.id}\\\">{text}</a>\\n\"\n            else:\n                ret += f\"    <li>{text}\\n\"\n            ret += f\"        <ul>\\n\"\n            ret += f\"        <li>page={position.page_num}\\n\"\n            ret += f\"        <li>depth={position.depth}\\n\"\n            ret += f\"        <li>heading={position.heading}\\n\"\n            ret += f\"        <li>id={position.id!r}\\n\"\n            ret += f\"        <li>href={position.href!r}\\n\"\n            ret += f\"        <li>rect={position.rect}\\n\"\n            ret += f\"        <li>text={text!r}\\n\"\n            ret += f\"        <li>open_close={position.open_close}\\n\"\n            ret += f\"        </ul>\\n\"\n\n    ret += '</ul>\\n'\n\n    # Main content.\n    ret += textwrap.dedent(f'''\n\n <h1>First section</h1>\n <p>Contents of first section.\n\n <h1>Second section</h1>\n <p>Contents of second section.\n <h2>Second section first subsection</h2>\n\n <p>Contents of second section first subsection.\n\n <h1>Third section</h1>\n <p>Contents of third section.\n\n </body>\n ''')\n    ret = ret.strip()\n    with open(__file__.replace('.py', '.html'), 'w') as f:\n        f.write(ret)\n    return ret;\n\nout_path = __file__.replace('.py', '.pdf')\nwriter = pymupdf.DocumentWriter(out_path)\npymupdf.Story.write_stabilized(writer, contentfn, rectfn)\nwriter.close() \n```", "```py\n\"\"\"\nDemo script for PyMuPDF's `pymupdf.Story.write_stabilized_with_links()`.\n\n`pymupdf.Story.write_stabilized_links()` is similar to\n`pymupdf.Story.write_stabilized()` except that it creates a PDF `pymupdf.Document`\nthat contains PDF links generated from all internal links in the original html.\n\"\"\"\n\nimport textwrap\n\nimport pymupdf\n\ndef rectfn(rect_num, filled):\n  '''\n We return one rect per page.\n '''\n    rect = pymupdf.Rect(10, 20, 290, 380)\n    mediabox = pymupdf.Rect(0, 0, 300, 400)\n    #print(f'rectfn(): rect_num={rect_num} filled={filled}')\n    return mediabox, rect, None\n\ndef contentfn(positions):\n  '''\n Returns html content, with a table of contents derived from `positions`.\n '''\n    ret = ''\n    ret += textwrap.dedent('''\n <!DOCTYPE html>\n <body>\n <h2>Contents</h2>\n <ul>\n ''')\n\n    # Create table of contents with links to all <h1..6> sections in the\n    # document.\n    for position in positions:\n        if position.heading and (position.open_close & 1):\n            text = position.text if position.text else ''\n            if position.id:\n                ret += f\"    <li><a href=\\\"#{position.id}\\\">{text}</a>\\n\"\n            else:\n                ret += f\"    <li>{text}\\n\"\n            ret += f\"        <ul>\\n\"\n            ret += f\"        <li>page={position.page_num}\\n\"\n            ret += f\"        <li>depth={position.depth}\\n\"\n            ret += f\"        <li>heading={position.heading}\\n\"\n            ret += f\"        <li>id={position.id!r}\\n\"\n            ret += f\"        <li>href={position.href!r}\\n\"\n            ret += f\"        <li>rect={position.rect}\\n\"\n            ret += f\"        <li>text={text!r}\\n\"\n            ret += f\"        <li>open_close={position.open_close}\\n\"\n            ret += f\"        </ul>\\n\"\n\n    ret += '</ul>\\n'\n\n    # Main content.\n    ret += textwrap.dedent(f'''\n\n <h1>First section</h1>\n <p>Contents of first section.\n <ul>\n <li>External <a href=\"https://artifex.com/\">link to https://artifex.com/</a>.\n <li><a href=\"#idtest\">Link to IDTEST</a>.\n <li><a href=\"#nametest\">Link to NAMETEST</a>.\n </ul>\n\n <h1>Second section</h1>\n <p>Contents of second section.\n <h2>Second section first subsection</h2>\n\n <p>Contents of second section first subsection.\n <p id=\"idtest\">IDTEST\n\n <h1>Third section</h1>\n <p>Contents of third section.\n <p><a name=\"nametest\">NAMETEST</a>.\n\n </body>\n ''')\n    ret = ret.strip()\n    with open(__file__.replace('.py', '.html'), 'w') as f:\n        f.write(ret)\n    return ret;\n\nout_path = __file__.replace('.py', '.pdf')\ndocument = pymupdf.Story.write_stabilized_with_links(contentfn, rectfn)\ndocument.save(out_path) \n```"]