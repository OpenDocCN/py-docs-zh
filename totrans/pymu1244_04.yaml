- en: Installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pymupdf.readthedocs.io/en/latest/installation.html](https://pymupdf.readthedocs.io/en/latest/installation.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Requirements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'All the examples below assume that you are running inside a Python virtual
    environment. See: [https://docs.python.org/3/library/venv.html](https://docs.python.org/3/library/venv.html)
    for details. We also assume that `pip` is up to date.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Windows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Linux, MacOS:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PyMuPDF should be installed using pip with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This will install from a Python wheel if one is available for your platform.
  prefs: []
  type: TYPE_NORMAL
- en: Installation when a suitable wheel is not available
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If a suitable Python wheel is not available, pip will automatically build from
    source using a Python sdist.
  prefs: []
  type: TYPE_NORMAL
- en: '**This requires C/C++ development tools to be installed**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On Windows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install Visual Studio 2019\. If not installed in a standard location, set environmental
    variable `PYMUPDF_SETUP_DEVENV` to the location of the `devenv.com` binary.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Having other installed versions of Visual Studio, for example Visual Studio
    2022, can cause problems because one can end up with MuPDF and PyMuPDF code being
    compiled with different compiler versions.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The build will automatically download and build MuPDF.
  prefs: []
  type: TYPE_NORMAL
- en: Problems after installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'On Windows `ImportError: DLL load failed while importing _fitz`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This has been occasionally seen if `MSVCP140.dll` is missing, and appears to
    be caused by a bug in some versions (2015-2017) of `Microsoft Visual C++ Redistributables`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: It is recommended to search for `MSVCP140.dll` in [https://msdn.com](https://msdn.com)
    to find instructions for how to reinstall it. For example [https://learn.microsoft.com/cpp/windows/latest-supported-vc-redist](https://learn.microsoft.com/cpp/windows/latest-supported-vc-redist)
    has permalinks to the latest supported versions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See [https://github.com/pymupdf/PyMuPDF/issues/2678](https://github.com/pymupdf/PyMuPDF/issues/2678)
    for more details.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Notes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Wheels are available for Windows (32-bit Intel, 64-bit Intel), Linux (64-bit
    Intel, 64-bit ARM) and Mac OSX (64-bit Intel, 64-bit ARM), for Python versions
    marked as “Supported” on [https://devguide.python.org/versions/](https://devguide.python.org/versions/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Wheels are not available for Python installed with [Chocolatey](https://chocolatey.org/)
    on Windows. Instead install Python using the Windows installer from the python.org
    website, see: [http://www.python.org/downloads](http://www.python.org/downloads)'
  prefs: []
  type: TYPE_NORMAL
- en: PyMuPDF does not support Python versions prior to 3.8\. Older wheels can be
    found in [this](https://github.com/pymupdf/PyMuPDF-Optional-Material/tree/master/wheels-upto-Py3.5)
    repository and on [PyPI](https://pypi.org/project/PyMuPDF/). Please note that
    we generally follow the official Python release schedules. For Python versions
    dropping out of official support this means, that generation of wheels will also
    be ceased for them.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are no **mandatory** external dependencies. However, some optional feature
    are available only if additional components are installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Pillow](https://pypi.org/project/Pillow/) is required for [`Pixmap.pil_save()`](pixmap.html#Pixmap.pil_save
    "Pixmap.pil_save") and [`Pixmap.pil_tobytes()`](pixmap.html#Pixmap.pil_tobytes
    "Pixmap.pil_tobytes").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[fontTools](https://pypi.org/project/fonttools/) is required for [`Document.subset_fonts()`](document.html#Document.subset_fonts
    "Document.subset_fonts").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[pymupdf-fonts](https://pypi.org/project/pymupdf-fonts/) is a collection of
    nice fonts to be used for text output methods.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Tesseract-OCR](https://github.com/tesseract-ocr/tesseract) for optical character
    recognition in images and document pages. Tesseract is separate software, not
    a Python package. To enable OCR functions in PyMuPDF, the software must be installed
    and the system environment variable `"TESSDATA_PREFIX"` must be defined and contain
    the `tessdata` folder name of the Tesseract installation location. See below.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You can install these additional components at any time – before or after installing
    PyMuPDF. PyMuPDF will detect their presence during import or when the respective
    functions are being used.
  prefs: []
  type: TYPE_NORMAL
- en: Build and install from a local PyMuPDF source tree
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Initial setup:'
  prefs: []
  type: TYPE_NORMAL
- en: Install C/C++ development tools as described above.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enter a Python venv and update pip, as described above.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Get a PyMuPDF source tree:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Clone the PyMuPDF git repository:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Or download and extract a `.zip` or `.tar.gz` source release from [https://github.com/pymupdf/PyMuPDF/releases](https://github.com/pymupdf/PyMuPDF/releases).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Then one can build PyMuPDF in two ways:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Build and install PyMuPDF with default MuPDF version:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will automatically download a specific hard-coded MuPDF source release,
    and build it into PyMuPDF.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Or build and install PyMuPDF using a local MuPDF source tree:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Clone the MuPDF git repository:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Build PyMuPDF, specifying the location of the local MuPDF tree with the environmental
    variables `PYMUPDF_SETUP_MUPDF_BUILD`:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Also, one can build for different Python versions in the same PyMuPDF tree:'
  prefs: []
  type: TYPE_NORMAL
- en: PyMuPDF will build for the version of Python that is being used to run `pip`.
    To run `pip` with a specific Python version, use `python -m pip` instead of `pip`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'So for example on Windows one can build different versions with:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'or:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Running tests
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Having a PyMuPDF tree available allows one to run PyMuPDF’s `pytest` test suite:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Notes about using a non-default MuPDF
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Using a non-default build of MuPDF by setting environmental variable `PYMUPDF_SETUP_MUPDF_BUILD`
    can cause various things to go wrong and so is not generally supported:'
  prefs: []
  type: TYPE_NORMAL
- en: If MuPDF’s major version number differs from what PyMuPDF uses by default, PyMuPDF
    can fail to build, because MuPDF’s API can change between major versions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Runtime behaviour of PyMuPDF can change because MuPDF’s runtime behaviour changes
    between different minor releases. This can also break some PyMuPDF tests.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If MuPDF was built with its default config instead of PyMuPDF’s customised config
    (for example if MuPDF is a system install), it is possible that `tests/test_textbox.py:test_textbox3()`
    will fail. One can skip this particular test by adding `-k 'not test_textbox3'`
    to the `pytest` command line.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Packaging
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: See [Packaging for Linux distributions](packaging.html).
  prefs: []
  type: TYPE_NORMAL
- en: Using with Pyodide
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: See [Pyodide](pyodide.html).
  prefs: []
  type: TYPE_NORMAL
- en: Enabling Integrated OCR Support
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you do not intend to use this feature, skip this step. Otherwise, it is
    required for both installation paths: **from wheels and from sources.**'
  prefs: []
  type: TYPE_NORMAL
- en: PyMuPDF will already contain all the logic to support OCR functions. But it
    additionally does need [Tesseract’s language support data](https://github.com/tesseract-ocr/tessdata).
  prefs: []
  type: TYPE_NORMAL
- en: The language support folder location must be communicated either via storing
    it in the environment variable `"TESSDATA_PREFIX"`, or as a parameter in the applicable
    functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'So for a working OCR functionality, make sure to complete this checklist:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Locate Tesseract’s language support folder. Typically you will find it here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Windows: `C:/Program Files/Tesseract-OCR/tessdata`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Unix systems: `/usr/share/tesseract-ocr/4.00/tessdata`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Set the environment variable [`TESSDATA_PREFIX`](functions.html#TESSDATA_PREFIX
    "TESSDATA_PREFIX")
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Windows: `setx TESSDATA_PREFIX "C:/Program Files/Tesseract-OCR/tessdata"`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Unix systems: `declare -x TESSDATA_PREFIX=/usr/share/tesseract-ocr/4.00/tessdata`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: On Windows systems, this must happen outside Python – before starting your script.
    Just manipulating `os.environ` will not work!
  prefs: []
  type: TYPE_NORMAL
- en: Do you have any feedback on this page?
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: This software is provided AS-IS with no warranty, either express or implied.
    This software is distributed under license and may not be copied, modified or
    distributed except as expressly authorized under the terms of that license. Refer
    to licensing information at [artifex.com](https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link)
    or contact Artifex Software Inc., 39 Mesa Street, Suite 108A, San Francisco CA
    94129, United States for further information.
  prefs: []
  type: TYPE_NORMAL
- en: This documentation covers all versions up to 1.24.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[![Discord logo](../Images/66cbb5081103a580193aa66c87b90d9a.png)](https://discord.gg/TSpYGBW4eq)'
  prefs: []
  type: TYPE_NORMAL
- en: Requirements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'All the examples below assume that you are running inside a Python virtual
    environment. See: [https://docs.python.org/3/library/venv.html](https://docs.python.org/3/library/venv.html)
    for details. We also assume that `pip` is up to date.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Windows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Linux, MacOS:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PyMuPDF should be installed using pip with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This will install from a Python wheel if one is available for your platform.
  prefs: []
  type: TYPE_NORMAL
- en: Installation when a suitable wheel is not available
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If a suitable Python wheel is not available, pip will automatically build from
    source using a Python sdist.
  prefs: []
  type: TYPE_NORMAL
- en: '**This requires C/C++ development tools to be installed**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On Windows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install Visual Studio 2019\. If not installed in a standard location, set environmental
    variable `PYMUPDF_SETUP_DEVENV` to the location of the `devenv.com` binary.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Having other installed versions of Visual Studio, for example Visual Studio
    2022, can cause problems because one can end up with MuPDF and PyMuPDF code being
    compiled with different compiler versions.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The build will automatically download and build MuPDF.
  prefs: []
  type: TYPE_NORMAL
- en: Problems after installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'On Windows `ImportError: DLL load failed while importing _fitz`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This has been occasionally seen if `MSVCP140.dll` is missing, and appears to
    be caused by a bug in some versions (2015-2017) of `Microsoft Visual C++ Redistributables`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: It is recommended to search for `MSVCP140.dll` in [https://msdn.com](https://msdn.com)
    to find instructions for how to reinstall it. For example [https://learn.microsoft.com/cpp/windows/latest-supported-vc-redist](https://learn.microsoft.com/cpp/windows/latest-supported-vc-redist)
    has permalinks to the latest supported versions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See [https://github.com/pymupdf/PyMuPDF/issues/2678](https://github.com/pymupdf/PyMuPDF/issues/2678)
    for more details.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Notes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Wheels are available for Windows (32-bit Intel, 64-bit Intel), Linux (64-bit
    Intel, 64-bit ARM) and Mac OSX (64-bit Intel, 64-bit ARM), for Python versions
    marked as “Supported” on [https://devguide.python.org/versions/](https://devguide.python.org/versions/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Wheels are not available for Python installed with [Chocolatey](https://chocolatey.org/)
    on Windows. Instead install Python using the Windows installer from the python.org
    website, see: [http://www.python.org/downloads](http://www.python.org/downloads)'
  prefs: []
  type: TYPE_NORMAL
- en: PyMuPDF does not support Python versions prior to 3.8\. Older wheels can be
    found in [this](https://github.com/pymupdf/PyMuPDF-Optional-Material/tree/master/wheels-upto-Py3.5)
    repository and on [PyPI](https://pypi.org/project/PyMuPDF/). Please note that
    we generally follow the official Python release schedules. For Python versions
    dropping out of official support this means, that generation of wheels will also
    be ceased for them.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are no **mandatory** external dependencies. However, some optional feature
    are available only if additional components are installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Pillow](https://pypi.org/project/Pillow/) is required for [`Pixmap.pil_save()`](pixmap.html#Pixmap.pil_save
    "Pixmap.pil_save") and [`Pixmap.pil_tobytes()`](pixmap.html#Pixmap.pil_tobytes
    "Pixmap.pil_tobytes").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[fontTools](https://pypi.org/project/fonttools/) is required for [`Document.subset_fonts()`](document.html#Document.subset_fonts
    "Document.subset_fonts").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[pymupdf-fonts](https://pypi.org/project/pymupdf-fonts/) is a collection of
    nice fonts to be used for text output methods.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Tesseract-OCR](https://github.com/tesseract-ocr/tesseract) for optical character
    recognition in images and document pages. Tesseract is separate software, not
    a Python package. To enable OCR functions in PyMuPDF, the software must be installed
    and the system environment variable `"TESSDATA_PREFIX"` must be defined and contain
    the `tessdata` folder name of the Tesseract installation location. See below.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You can install these additional components at any time – before or after installing
    PyMuPDF. PyMuPDF will detect their presence during import or when the respective
    functions are being used.
  prefs: []
  type: TYPE_NORMAL
- en: Build and install from a local PyMuPDF source tree
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Initial setup:'
  prefs: []
  type: TYPE_NORMAL
- en: Install C/C++ development tools as described above.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enter a Python venv and update pip, as described above.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Get a PyMuPDF source tree:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Clone the PyMuPDF git repository:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Or download and extract a `.zip` or `.tar.gz` source release from [https://github.com/pymupdf/PyMuPDF/releases](https://github.com/pymupdf/PyMuPDF/releases).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Then one can build PyMuPDF in two ways:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Build and install PyMuPDF with default MuPDF version:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will automatically download a specific hard-coded MuPDF source release,
    and build it into PyMuPDF.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Or build and install PyMuPDF using a local MuPDF source tree:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Clone the MuPDF git repository:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Build PyMuPDF, specifying the location of the local MuPDF tree with the environmental
    variables `PYMUPDF_SETUP_MUPDF_BUILD`:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Also, one can build for different Python versions in the same PyMuPDF tree:'
  prefs: []
  type: TYPE_NORMAL
- en: PyMuPDF will build for the version of Python that is being used to run `pip`.
    To run `pip` with a specific Python version, use `python -m pip` instead of `pip`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'So for example on Windows one can build different versions with:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'or:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Running tests
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Having a PyMuPDF tree available allows one to run PyMuPDF’s `pytest` test suite:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Notes about using a non-default MuPDF
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Using a non-default build of MuPDF by setting environmental variable `PYMUPDF_SETUP_MUPDF_BUILD`
    can cause various things to go wrong and so is not generally supported:'
  prefs: []
  type: TYPE_NORMAL
- en: If MuPDF’s major version number differs from what PyMuPDF uses by default, PyMuPDF
    can fail to build, because MuPDF’s API can change between major versions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Runtime behaviour of PyMuPDF can change because MuPDF’s runtime behaviour changes
    between different minor releases. This can also break some PyMuPDF tests.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If MuPDF was built with its default config instead of PyMuPDF’s customised config
    (for example if MuPDF is a system install), it is possible that `tests/test_textbox.py:test_textbox3()`
    will fail. One can skip this particular test by adding `-k 'not test_textbox3'`
    to the `pytest` command line.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes about using a non-default MuPDF
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Using a non-default build of MuPDF by setting environmental variable `PYMUPDF_SETUP_MUPDF_BUILD`
    can cause various things to go wrong and so is not generally supported:'
  prefs: []
  type: TYPE_NORMAL
- en: If MuPDF’s major version number differs from what PyMuPDF uses by default, PyMuPDF
    can fail to build, because MuPDF’s API can change between major versions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Runtime behaviour of PyMuPDF can change because MuPDF’s runtime behaviour changes
    between different minor releases. This can also break some PyMuPDF tests.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If MuPDF was built with its default config instead of PyMuPDF’s customised config
    (for example if MuPDF is a system install), it is possible that `tests/test_textbox.py:test_textbox3()`
    will fail. One can skip this particular test by adding `-k 'not test_textbox3'`
    to the `pytest` command line.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Packaging
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: See [Packaging for Linux distributions](packaging.html).
  prefs: []
  type: TYPE_NORMAL
- en: Using with Pyodide
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: See [Pyodide](pyodide.html).
  prefs: []
  type: TYPE_NORMAL
- en: Enabling Integrated OCR Support
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you do not intend to use this feature, skip this step. Otherwise, it is
    required for both installation paths: **from wheels and from sources.**'
  prefs: []
  type: TYPE_NORMAL
- en: PyMuPDF will already contain all the logic to support OCR functions. But it
    additionally does need [Tesseract’s language support data](https://github.com/tesseract-ocr/tessdata).
  prefs: []
  type: TYPE_NORMAL
- en: The language support folder location must be communicated either via storing
    it in the environment variable `"TESSDATA_PREFIX"`, or as a parameter in the applicable
    functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'So for a working OCR functionality, make sure to complete this checklist:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Locate Tesseract’s language support folder. Typically you will find it here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Windows: `C:/Program Files/Tesseract-OCR/tessdata`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Unix systems: `/usr/share/tesseract-ocr/4.00/tessdata`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Set the environment variable [`TESSDATA_PREFIX`](functions.html#TESSDATA_PREFIX
    "TESSDATA_PREFIX")
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Windows: `setx TESSDATA_PREFIX "C:/Program Files/Tesseract-OCR/tessdata"`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Unix systems: `declare -x TESSDATA_PREFIX=/usr/share/tesseract-ocr/4.00/tessdata`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: On Windows systems, this must happen outside Python – before starting your script.
    Just manipulating `os.environ` will not work!
  prefs: []
  type: TYPE_NORMAL
- en: Do you have any feedback on this page?
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: This software is provided AS-IS with no warranty, either express or implied.
    This software is distributed under license and may not be copied, modified or
    distributed except as expressly authorized under the terms of that license. Refer
    to licensing information at [artifex.com](https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link)
    or contact Artifex Software Inc., 39 Mesa Street, Suite 108A, San Francisco CA
    94129, United States for further information.
  prefs: []
  type: TYPE_NORMAL
- en: This documentation covers all versions up to 1.24.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[![Discord logo](../Images/66cbb5081103a580193aa66c87b90d9a.png)](https://discord.gg/TSpYGBW4eq)'
  prefs: []
  type: TYPE_NORMAL
