["```py\nfunction sqlalchemy.orm.relationship(argument: _RelationshipArgumentType[Any] | None = None, secondary: _RelationshipSecondaryArgument | None = None, *, uselist: bool | None = None, collection_class: Type[Collection[Any]] | Callable[[], Collection[Any]] | None = None, primaryjoin: _RelationshipJoinConditionArgument | None = None, secondaryjoin: _RelationshipJoinConditionArgument | None = None, back_populates: str | None = None, order_by: _ORMOrderByArgument = False, backref: ORMBackrefArgument | None = None, overlaps: str | None = None, post_update: bool = False, cascade: str = 'save-update, merge', viewonly: bool = False, init: _NoArg | bool = _NoArg.NO_ARG, repr: _NoArg | bool = _NoArg.NO_ARG, default: _NoArg | _T = _NoArg.NO_ARG, default_factory: _NoArg | Callable[[], _T] = _NoArg.NO_ARG, compare: _NoArg | bool = _NoArg.NO_ARG, kw_only: _NoArg | bool = _NoArg.NO_ARG, lazy: _LazyLoadArgumentType = 'select', passive_deletes: Literal['all'] | bool = False, passive_updates: bool = True, active_history: bool = False, enable_typechecks: bool = True, foreign_keys: _ORMColCollectionArgument | None = None, remote_side: _ORMColCollectionArgument | None = None, join_depth: int | None = None, comparator_factory: Type[RelationshipProperty.Comparator[Any]] | None = None, single_parent: bool = False, innerjoin: bool = False, distinct_target_key: bool | None = None, load_on_pending: bool = False, query_class: Type[Query[Any]] | None = None, info: _InfoType | None = None, omit_join: Literal[None, False] = None, sync_backref: bool | None = None, **kw: Any) \u2192 _RelationshipDeclared[Any]\n```", "```py\n    class SomeClass(Base):\n        # ...\n\n        related = relationship(\"RelatedClass\")\n    ```", "```py\n    class SomeClass(Base):\n        # ...\n\n        related_items: Mapped[List[\"RelatedItem\"]] = relationship()\n    ```", "```py\n    class SomeClass(Base):\n        # ...\n\n        related_item: Mapped[\"RelatedItem\"] = relationship()\n    ```", "```py\n    >>> User.addresses.property.uselist\n    True\n    ```", "```py\nfunction sqlalchemy.orm.backref(name: str, **kwargs: Any) \u2192 ORMBackrefArgument\n```", "```py\n'items':relationship(\n    SomeItem, backref=backref('parent', lazy='subquery'))\n```", "```py\nfunction sqlalchemy.orm.dynamic_loader(argument: _RelationshipArgumentType[Any] | None = None, **kw: Any) \u2192 RelationshipProperty[Any]\n```", "```py\ndynamic_loader(SomeClass)\n\n# is the same as\n\nrelationship(SomeClass, lazy=\"dynamic\")\n```", "```py\nfunction sqlalchemy.orm.foreign(expr: _CEA) \u2192 _CEA\n```", "```py\nfunction sqlalchemy.orm.remote(expr: _CEA) \u2192 _CEA\n```"]