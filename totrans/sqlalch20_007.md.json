["```py\n>>> from sqlalchemy import insert\n>>> stmt = insert(user_table).values(name=\"spongebob\", fullname=\"Spongebob Squarepants\")\n```", "```py\n>>> print(stmt)\nINSERT  INTO  user_account  (name,  fullname)  VALUES  (:name,  :fullname) \n```", "```py\n>>> compiled = stmt.compile()\n```", "```py\n>>> compiled.params\n{'name': 'spongebob', 'fullname': 'Spongebob Squarepants'}\n```", "```py\n>>> with engine.connect() as conn:\n...     result = conn.execute(stmt)\n...     conn.commit()\nBEGIN  (implicit)\nINSERT  INTO  user_account  (name,  fullname)  VALUES  (?,  ?)\n[...]  ('spongebob',  'Spongebob Squarepants')\nCOMMIT \n```", "```py\n>>> result.inserted_primary_key\n(1,)\n```", "```py\n>>> print(insert(user_table))\nINSERT  INTO  user_account  (id,  name,  fullname)  VALUES  (:id,  :name,  :fullname) \n```", "```py\n>>> with engine.connect() as conn:\n...     result = conn.execute(\n...         insert(user_table),\n...         [\n...             {\"name\": \"sandy\", \"fullname\": \"Sandy Cheeks\"},\n...             {\"name\": \"patrick\", \"fullname\": \"Patrick Star\"},\n...         ],\n...     )\n...     conn.commit()\nBEGIN  (implicit)\nINSERT  INTO  user_account  (name,  fullname)  VALUES  (?,  ?)\n[...]  [('sandy',  'Sandy Cheeks'),  ('patrick',  'Patrick Star')]\nCOMMIT \n```", "```py\n>>> from sqlalchemy import select, bindparam\n>>> scalar_subq = (\n...     select(user_table.c.id)\n...     .where(user_table.c.name == bindparam(\"username\"))\n...     .scalar_subquery()\n... )\n\n>>> with engine.connect() as conn:\n...     result = conn.execute(\n...         insert(address_table).values(user_id=scalar_subq),\n...         [\n...             {\n...                 \"username\": \"spongebob\",\n...                 \"email_address\": \"spongebob@sqlalchemy.org\",\n...             },\n...             {\"username\": \"sandy\", \"email_address\": \"sandy@sqlalchemy.org\"},\n...             {\"username\": \"sandy\", \"email_address\": \"sandy@squirrelpower.org\"},\n...         ],\n...     )\n...     conn.commit()\nBEGIN  (implicit)\nINSERT  INTO  address  (user_id,  email_address)  VALUES  ((SELECT  user_account.id\nFROM  user_account\nWHERE  user_account.name  =  ?),  ?)\n[...]  [('spongebob',  'spongebob@sqlalchemy.org'),  ('sandy',  'sandy@sqlalchemy.org'),\n('sandy',  'sandy@squirrelpower.org')]\nCOMMIT \n```", "```py\n>>> print(insert(user_table).values().compile(engine))\nINSERT  INTO  user_account  DEFAULT  VALUES \n```", "```py\n>>> insert_stmt = insert(address_table).returning(\n...     address_table.c.id, address_table.c.email_address\n... )\n>>> print(insert_stmt)\nINSERT  INTO  address  (id,  user_id,  email_address)\nVALUES  (:id,  :user_id,  :email_address)\nRETURNING  address.id,  address.email_address \n```", "```py\n>>> select_stmt = select(user_table.c.id, user_table.c.name + \"@aol.com\")\n>>> insert_stmt = insert(address_table).from_select(\n...     [\"user_id\", \"email_address\"], select_stmt\n... )\n>>> print(insert_stmt.returning(address_table.c.id, address_table.c.email_address))\nINSERT  INTO  address  (user_id,  email_address)\nSELECT  user_account.id,  user_account.name  ||  :name_1  AS  anon_1\nFROM  user_account  RETURNING  address.id,  address.email_address \n```", "```py\n>>> select_stmt = select(user_table.c.id, user_table.c.name + \"@aol.com\")\n>>> insert_stmt = insert(address_table).from_select(\n...     [\"user_id\", \"email_address\"], select_stmt\n... )\n>>> print(insert_stmt)\nINSERT  INTO  address  (user_id,  email_address)\nSELECT  user_account.id,  user_account.name  ||  :name_1  AS  anon_1\nFROM  user_account \n```", "```py\n>>> from sqlalchemy import insert\n>>> stmt = insert(user_table).values(name=\"spongebob\", fullname=\"Spongebob Squarepants\")\n```", "```py\n>>> print(stmt)\nINSERT  INTO  user_account  (name,  fullname)  VALUES  (:name,  :fullname) \n```", "```py\n>>> compiled = stmt.compile()\n```", "```py\n>>> compiled.params\n{'name': 'spongebob', 'fullname': 'Spongebob Squarepants'}\n```", "```py\n>>> with engine.connect() as conn:\n...     result = conn.execute(stmt)\n...     conn.commit()\nBEGIN  (implicit)\nINSERT  INTO  user_account  (name,  fullname)  VALUES  (?,  ?)\n[...]  ('spongebob',  'Spongebob Squarepants')\nCOMMIT \n```", "```py\n>>> result.inserted_primary_key\n(1,)\n```", "```py\n>>> print(insert(user_table))\nINSERT  INTO  user_account  (id,  name,  fullname)  VALUES  (:id,  :name,  :fullname) \n```", "```py\n>>> with engine.connect() as conn:\n...     result = conn.execute(\n...         insert(user_table),\n...         [\n...             {\"name\": \"sandy\", \"fullname\": \"Sandy Cheeks\"},\n...             {\"name\": \"patrick\", \"fullname\": \"Patrick Star\"},\n...         ],\n...     )\n...     conn.commit()\nBEGIN  (implicit)\nINSERT  INTO  user_account  (name,  fullname)  VALUES  (?,  ?)\n[...]  [('sandy',  'Sandy Cheeks'),  ('patrick',  'Patrick Star')]\nCOMMIT \n```", "```py\n>>> from sqlalchemy import select, bindparam\n>>> scalar_subq = (\n...     select(user_table.c.id)\n...     .where(user_table.c.name == bindparam(\"username\"))\n...     .scalar_subquery()\n... )\n\n>>> with engine.connect() as conn:\n...     result = conn.execute(\n...         insert(address_table).values(user_id=scalar_subq),\n...         [\n...             {\n...                 \"username\": \"spongebob\",\n...                 \"email_address\": \"spongebob@sqlalchemy.org\",\n...             },\n...             {\"username\": \"sandy\", \"email_address\": \"sandy@sqlalchemy.org\"},\n...             {\"username\": \"sandy\", \"email_address\": \"sandy@squirrelpower.org\"},\n...         ],\n...     )\n...     conn.commit()\nBEGIN  (implicit)\nINSERT  INTO  address  (user_id,  email_address)  VALUES  ((SELECT  user_account.id\nFROM  user_account\nWHERE  user_account.name  =  ?),  ?)\n[...]  [('spongebob',  'spongebob@sqlalchemy.org'),  ('sandy',  'sandy@sqlalchemy.org'),\n('sandy',  'sandy@squirrelpower.org')]\nCOMMIT \n```", "```py\n>>> print(insert(user_table).values().compile(engine))\nINSERT  INTO  user_account  DEFAULT  VALUES \n```", "```py\n>>> insert_stmt = insert(address_table).returning(\n...     address_table.c.id, address_table.c.email_address\n... )\n>>> print(insert_stmt)\nINSERT  INTO  address  (id,  user_id,  email_address)\nVALUES  (:id,  :user_id,  :email_address)\nRETURNING  address.id,  address.email_address \n```", "```py\n>>> select_stmt = select(user_table.c.id, user_table.c.name + \"@aol.com\")\n>>> insert_stmt = insert(address_table).from_select(\n...     [\"user_id\", \"email_address\"], select_stmt\n... )\n>>> print(insert_stmt.returning(address_table.c.id, address_table.c.email_address))\nINSERT  INTO  address  (user_id,  email_address)\nSELECT  user_account.id,  user_account.name  ||  :name_1  AS  anon_1\nFROM  user_account  RETURNING  address.id,  address.email_address \n```", "```py\n>>> select_stmt = select(user_table.c.id, user_table.c.name + \"@aol.com\")\n>>> insert_stmt = insert(address_table).from_select(\n...     [\"user_id\", \"email_address\"], select_stmt\n... )\n>>> print(insert_stmt)\nINSERT  INTO  address  (user_id,  email_address)\nSELECT  user_account.id,  user_account.name  ||  :name_1  AS  anon_1\nFROM  user_account \n```"]