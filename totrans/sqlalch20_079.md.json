["```py\n    >>> print(column(\"x\") == 5)\n    x  =  :x_1 \n    ```", "```py\n    >>> print(column(\"x\") != 5)\n    x  !=  :x_1 \n    ```", "```py\n    >>> print(column(\"x\") > 5)\n    x  >  :x_1 \n    ```", "```py\n    >>> print(column(\"x\") < 5)\n    x  <  :x_1 \n    ```", "```py\n    >>> print(column(\"x\") >= 5)\n    x  >=  :x_1 \n    ```", "```py\n    >>> print(column(\"x\") <= 5)\n    x  <=  :x_1 \n    ```", "```py\n    >>> print(column(\"x\").between(5, 10))\n    x  BETWEEN  :x_1  AND  :x_2 \n    ```", "```py\n>>> print(column(\"x\").in_([1, 2, 3]))\nx  IN  (__[POSTCOMPILE_x_1]) \n```", "```py\n>>> stmt = select(User.id).where(User.id.in_([1, 2, 3]))\n>>> result = conn.execute(stmt)\nSELECT  user_account.id\nFROM  user_account\nWHERE  user_account.id  IN  (?,  ?,  ?)\n[...]  (1,  2,  3) \n```", "```py\n>>> stmt = select(User.id).where(User.id.in_([]))\n>>> result = conn.execute(stmt)\nSELECT  user_account.id\nFROM  user_account\nWHERE  user_account.id  IN  (SELECT  1  FROM  (SELECT  1)  WHERE  1!=1)\n[...]  () \n```", "```py\n>>> print(column(\"x\").not_in([1, 2, 3]))\n(x  NOT  IN  (__[POSTCOMPILE_x_1])) \n```", "```py\n>>> print(~column(\"x\").in_([1, 2, 3]))\n(x  NOT  IN  (__[POSTCOMPILE_x_1])) \n```", "```py\n>>> from sqlalchemy import tuple_\n>>> tup = tuple_(column(\"x\", Integer), column(\"y\", Integer))\n>>> expr = tup.in_([(1, 2), (3, 4)])\n>>> print(expr)\n(x,  y)  IN  (__[POSTCOMPILE_param_1]) \n```", "```py\n>>> tup = tuple_(User.id, Address.id)\n>>> stmt = select(User.name).join(Address).where(tup.in_([(1, 1), (2, 2)]))\n>>> conn.execute(stmt).all()\nSELECT  user_account.name\nFROM  user_account  JOIN  address  ON  user_account.id  =  address.user_id\nWHERE  (user_account.id,  address.id)  IN  (VALUES  (?,  ?),  (?,  ?))\n[...]  (1,  1,  2,  2)\n[('spongebob',), ('sandy',)]\n```", "```py\n>>> print(column(\"x\").in_(select(user_table.c.id)))\nx  IN  (SELECT  user_account.id\nFROM  user_account) \n```", "```py\n>>> print(\n...     tuple_(column(\"x\"), column(\"y\")).in_(\n...         select(user_table.c.id, address_table.c.id).join(address_table)\n...     )\n... )\n(x,  y)  IN  (SELECT  user_account.id,  address.id\nFROM  user_account  JOIN  address  ON  user_account.id  =  address.user_id) \n```", "```py\n    >>> print(column(\"x\").is_(None))\n    x  IS  NULL \n    ```", "```py\n    >>> from sqlalchemy import null\n    >>> print(column(\"x\").is_(null()))\n    x  IS  NULL \n    ```", "```py\n    >>> a = None\n    >>> print(column(\"x\") == a)\n    x  IS  NULL \n    ```", "```py\n    >>> print(column(\"x\").is_not(None))\n    x  IS  NOT  NULL \n    ```", "```py\n    >>> print(column(\"x\") != None)\n    x  IS  NOT  NULL \n    ```", "```py\n    >>> print(column(\"x\").is_distinct_from(\"some value\"))\n    x  IS  DISTINCT  FROM  :x_1 \n    ```", "```py\n    >>> print(column(\"x\").isnot_distinct_from(\"some value\"))\n    x  IS  NOT  DISTINCT  FROM  :x_1 \n    ```", "```py\n    >>> print(column(\"x\").like(\"word\"))\n    x  LIKE  :x_1 \n    ```", "```py\n    >>> print(column(\"x\").ilike(\"word\"))\n    lower(x)  LIKE  lower(:x_1) \n    ```", "```py\n    >>> print(column(\"x\").notlike(\"word\"))\n    x  NOT  LIKE  :x_1 \n    ```", "```py\n    >>> print(column(\"x\").notilike(\"word\"))\n    lower(x)  NOT  LIKE  lower(:x_1) \n    ```", "```py\n    >>> print(column(\"x\").startswith(\"word\"))\n    x  LIKE  :x_1  ||  '%' \n    ```", "```py\n    >>> print(column(\"x\").endswith(\"word\"))\n    x  LIKE  '%'  ||  :x_1 \n    ```", "```py\n    >>> print(column(\"x\").contains(\"word\"))\n    x  LIKE  '%'  ||  :x_1  ||  '%' \n    ```", "```py\n    >>> print(column(\"x\").match(\"word\"))\n    x  MATCH  :x_1 \n    ```", "```py\n    >>> from sqlalchemy.dialects import postgresql\n    >>> print(column(\"x\").regexp_match(\"word\").compile(dialect=postgresql.dialect()))\n    x  ~  %(x_1)s \n    ```", "```py\n    >>> from sqlalchemy.dialects import mysql\n    >>> print(column(\"x\").regexp_match(\"word\").compile(dialect=mysql.dialect()))\n    x  REGEXP  %s \n    ```", "```py\n    >>> print(column(\"x\").concat(\"some string\"))\n    x  ||  :x_1 \n    ```", "```py\n    >>> print(column(\"x\", String) + \"some string\")\n    x  ||  :x_1 \n    ```", "```py\n    >>> print((column(\"x\", String) + \"some string\").compile(dialect=mysql.dialect()))\n    concat(x,  %s) \n    ```", "```py\n    >>> print(column(\"x\").regexp_replace(\"foo\", \"bar\").compile(dialect=postgresql.dialect()))\n    REGEXP_REPLACE(x,  %(x_1)s,  %(x_2)s) \n    ```", "```py\n    >>> print(\n    ...     (column(\"x\").collate(\"latin1_german2_ci\") == \"M\u00fcller\").compile(\n    ...         dialect=mysql.dialect()\n    ...     )\n    ... )\n    (x  COLLATE  latin1_german2_ci)  =  %s \n    ```", "```py\n    >>> from sqlalchemy import literal\n    >>> print(\n    ...     (literal(\"M\u00fcller\").collate(\"latin1_german2_ci\") == column(\"x\")).compile(\n    ...         dialect=mysql.dialect()\n    ...     )\n    ... )\n    (%s  COLLATE  latin1_german2_ci)  =  x \n    ```", "```py\n    >>> print(column(\"x\") + 5)\n    x  +  :x_1\n    >>> print(5 + column(\"x\"))\n    :x_1  +  x \n    ```", "```py\n    >>> print(column(\"x\") - 5)\n    x  -  :x_1\n    >>> print(5 - column(\"x\"))\n    :x_1  -  x \n    ```", "```py\n    >>> print(column(\"x\") * 5)\n    x  *  :x_1\n    >>> print(5 * column(\"x\"))\n    :x_1  *  x \n    ```", "```py\n    >>> print(column(\"x\") / 5)\n    x  /  CAST(:x_1  AS  NUMERIC)\n    >>> print(5 / column(\"x\"))\n    :x_1  /  CAST(x  AS  NUMERIC) \n    ```", "```py\n    >>> print(column(\"x\") // 5)\n    x  /  :x_1\n    >>> print(5 // column(\"x\", Integer))\n    :x_1  /  x \n    ```", "```py\n    >>> print(column(\"x\") // 5.5)\n    FLOOR(x  /  :x_1)\n    >>> print(5 // column(\"x\", Numeric))\n    FLOOR(:x_1  /  x) \n    ```", "```py\n    >>> print(column(\"x\") % 5)\n    x  %  :x_1\n    >>> print(5 % column(\"x\"))\n    :x_1  %  x \n    ```", "```py\n    >>> print(column(\"x\").bitwise_not())\n    ~x\n    ```", "```py\n    >>> from sqlalchemy import bitwise_not\n    >>> print(bitwise_not(column(\"x\")))\n    ~x\n    ```", "```py\n    >>> print(column(\"x\").bitwise_and(5))\n    x & :x_1\n    ```", "```py\n    >>> print(column(\"x\").bitwise_or(5))\n    x | :x_1\n    ```", "```py\n    >>> print(column(\"x\").bitwise_xor(5))\n    x ^ :x_1\n    ```", "```py\n    >>> from sqlalchemy.dialects import postgresql\n    >>> print(column(\"x\").bitwise_xor(5).compile(dialect=postgresql.dialect()))\n    x # %(x_1)s\n    ```", "```py\n    >>> print(column(\"x\").bitwise_rshift(5))\n    x >> :x_1\n    >>> print(column(\"x\").bitwise_lshift(5))\n    x << :x_1\n    ```", "```py\n>>> print(\n...     select(address_table.c.email_address)\n...     .where(user_table.c.name == \"squidward\")\n...     .where(address_table.c.user_id == user_table.c.id)\n... )\nSELECT  address.email_address\nFROM  address,  user_account\nWHERE  user_account.name  =  :name_1  AND  address.user_id  =  user_account.id \n```", "```py\n>>> print(\n...     select(address_table.c.email_address).where(\n...         user_table.c.name == \"squidward\",\n...         address_table.c.user_id == user_table.c.id,\n...     )\n... )\nSELECT  address.email_address\nFROM  address,  user_account\nWHERE  user_account.name  =  :name_1  AND  address.user_id  =  user_account.id \n```", "```py\n>>> from sqlalchemy import and_, or_\n>>> print(\n...     select(address_table.c.email_address).where(\n...         and_(\n...             or_(user_table.c.name == \"squidward\", user_table.c.name == \"sandy\"),\n...             address_table.c.user_id == user_table.c.id,\n...         )\n...     )\n... )\nSELECT  address.email_address\nFROM  address,  user_account\nWHERE  (user_account.name  =  :name_1  OR  user_account.name  =  :name_2)\nAND  address.user_id  =  user_account.id \n```", "```py\n>>> from sqlalchemy import not_\n>>> print(not_(column(\"x\") == 5))\nx  !=  :x_1 \n```", "```py\n>>> from sqlalchemy import Boolean\n>>> print(not_(column(\"x\", Boolean)))\nNOT  x \n```", "```py\n    >>> print((column(\"x\") == 5) & (column(\"y\") == 10))\n    x  =  :x_1  AND  y  =  :y_1 \n    ```", "```py\n    >>> print((column(\"x\") == 5) | (column(\"y\") == 10))\n    x  =  :x_1  OR  y  =  :y_1 \n    ```", "```py\n    >>> print(~(column(\"x\") == 5))\n    x  !=  :x_1\n    >>> from sqlalchemy import Boolean\n    >>> print(~column(\"x\", Boolean))\n    NOT  x \n    ```", "```py\n    >>> print(column(\"x\") == 5)\n    x  =  :x_1 \n    ```", "```py\n    >>> print(column(\"x\") != 5)\n    x  !=  :x_1 \n    ```", "```py\n    >>> print(column(\"x\") > 5)\n    x  >  :x_1 \n    ```", "```py\n    >>> print(column(\"x\") < 5)\n    x  <  :x_1 \n    ```", "```py\n    >>> print(column(\"x\") >= 5)\n    x  >=  :x_1 \n    ```", "```py\n    >>> print(column(\"x\") <= 5)\n    x  <=  :x_1 \n    ```", "```py\n    >>> print(column(\"x\").between(5, 10))\n    x  BETWEEN  :x_1  AND  :x_2 \n    ```", "```py\n>>> print(column(\"x\").in_([1, 2, 3]))\nx  IN  (__[POSTCOMPILE_x_1]) \n```", "```py\n>>> stmt = select(User.id).where(User.id.in_([1, 2, 3]))\n>>> result = conn.execute(stmt)\nSELECT  user_account.id\nFROM  user_account\nWHERE  user_account.id  IN  (?,  ?,  ?)\n[...]  (1,  2,  3) \n```", "```py\n>>> stmt = select(User.id).where(User.id.in_([]))\n>>> result = conn.execute(stmt)\nSELECT  user_account.id\nFROM  user_account\nWHERE  user_account.id  IN  (SELECT  1  FROM  (SELECT  1)  WHERE  1!=1)\n[...]  () \n```", "```py\n>>> print(column(\"x\").not_in([1, 2, 3]))\n(x  NOT  IN  (__[POSTCOMPILE_x_1])) \n```", "```py\n>>> print(~column(\"x\").in_([1, 2, 3]))\n(x  NOT  IN  (__[POSTCOMPILE_x_1])) \n```", "```py\n>>> from sqlalchemy import tuple_\n>>> tup = tuple_(column(\"x\", Integer), column(\"y\", Integer))\n>>> expr = tup.in_([(1, 2), (3, 4)])\n>>> print(expr)\n(x,  y)  IN  (__[POSTCOMPILE_param_1]) \n```", "```py\n>>> tup = tuple_(User.id, Address.id)\n>>> stmt = select(User.name).join(Address).where(tup.in_([(1, 1), (2, 2)]))\n>>> conn.execute(stmt).all()\nSELECT  user_account.name\nFROM  user_account  JOIN  address  ON  user_account.id  =  address.user_id\nWHERE  (user_account.id,  address.id)  IN  (VALUES  (?,  ?),  (?,  ?))\n[...]  (1,  1,  2,  2)\n[('spongebob',), ('sandy',)]\n```", "```py\n>>> print(column(\"x\").in_(select(user_table.c.id)))\nx  IN  (SELECT  user_account.id\nFROM  user_account) \n```", "```py\n>>> print(\n...     tuple_(column(\"x\"), column(\"y\")).in_(\n...         select(user_table.c.id, address_table.c.id).join(address_table)\n...     )\n... )\n(x,  y)  IN  (SELECT  user_account.id,  address.id\nFROM  user_account  JOIN  address  ON  user_account.id  =  address.user_id) \n```", "```py\n>>> print(column(\"x\").in_([1, 2, 3]))\nx  IN  (__[POSTCOMPILE_x_1]) \n```", "```py\n>>> stmt = select(User.id).where(User.id.in_([1, 2, 3]))\n>>> result = conn.execute(stmt)\nSELECT  user_account.id\nFROM  user_account\nWHERE  user_account.id  IN  (?,  ?,  ?)\n[...]  (1,  2,  3) \n```", "```py\n>>> stmt = select(User.id).where(User.id.in_([]))\n>>> result = conn.execute(stmt)\nSELECT  user_account.id\nFROM  user_account\nWHERE  user_account.id  IN  (SELECT  1  FROM  (SELECT  1)  WHERE  1!=1)\n[...]  () \n```", "```py\n>>> print(column(\"x\").not_in([1, 2, 3]))\n(x  NOT  IN  (__[POSTCOMPILE_x_1])) \n```", "```py\n>>> print(~column(\"x\").in_([1, 2, 3]))\n(x  NOT  IN  (__[POSTCOMPILE_x_1])) \n```", "```py\n>>> from sqlalchemy import tuple_\n>>> tup = tuple_(column(\"x\", Integer), column(\"y\", Integer))\n>>> expr = tup.in_([(1, 2), (3, 4)])\n>>> print(expr)\n(x,  y)  IN  (__[POSTCOMPILE_param_1]) \n```", "```py\n>>> tup = tuple_(User.id, Address.id)\n>>> stmt = select(User.name).join(Address).where(tup.in_([(1, 1), (2, 2)]))\n>>> conn.execute(stmt).all()\nSELECT  user_account.name\nFROM  user_account  JOIN  address  ON  user_account.id  =  address.user_id\nWHERE  (user_account.id,  address.id)  IN  (VALUES  (?,  ?),  (?,  ?))\n[...]  (1,  1,  2,  2)\n[('spongebob',), ('sandy',)]\n```", "```py\n>>> print(column(\"x\").in_(select(user_table.c.id)))\nx  IN  (SELECT  user_account.id\nFROM  user_account) \n```", "```py\n>>> print(\n...     tuple_(column(\"x\"), column(\"y\")).in_(\n...         select(user_table.c.id, address_table.c.id).join(address_table)\n...     )\n... )\n(x,  y)  IN  (SELECT  user_account.id,  address.id\nFROM  user_account  JOIN  address  ON  user_account.id  =  address.user_id) \n```", "```py\n    >>> print(column(\"x\").is_(None))\n    x  IS  NULL \n    ```", "```py\n    >>> from sqlalchemy import null\n    >>> print(column(\"x\").is_(null()))\n    x  IS  NULL \n    ```", "```py\n    >>> a = None\n    >>> print(column(\"x\") == a)\n    x  IS  NULL \n    ```", "```py\n    >>> print(column(\"x\").is_not(None))\n    x  IS  NOT  NULL \n    ```", "```py\n    >>> print(column(\"x\") != None)\n    x  IS  NOT  NULL \n    ```", "```py\n    >>> print(column(\"x\").is_distinct_from(\"some value\"))\n    x  IS  DISTINCT  FROM  :x_1 \n    ```", "```py\n    >>> print(column(\"x\").isnot_distinct_from(\"some value\"))\n    x  IS  NOT  DISTINCT  FROM  :x_1 \n    ```", "```py\n    >>> print(column(\"x\").like(\"word\"))\n    x  LIKE  :x_1 \n    ```", "```py\n    >>> print(column(\"x\").ilike(\"word\"))\n    lower(x)  LIKE  lower(:x_1) \n    ```", "```py\n    >>> print(column(\"x\").notlike(\"word\"))\n    x  NOT  LIKE  :x_1 \n    ```", "```py\n    >>> print(column(\"x\").notilike(\"word\"))\n    lower(x)  NOT  LIKE  lower(:x_1) \n    ```", "```py\n    >>> print(column(\"x\").startswith(\"word\"))\n    x  LIKE  :x_1  ||  '%' \n    ```", "```py\n    >>> print(column(\"x\").endswith(\"word\"))\n    x  LIKE  '%'  ||  :x_1 \n    ```", "```py\n    >>> print(column(\"x\").contains(\"word\"))\n    x  LIKE  '%'  ||  :x_1  ||  '%' \n    ```", "```py\n    >>> print(column(\"x\").match(\"word\"))\n    x  MATCH  :x_1 \n    ```", "```py\n    >>> from sqlalchemy.dialects import postgresql\n    >>> print(column(\"x\").regexp_match(\"word\").compile(dialect=postgresql.dialect()))\n    x  ~  %(x_1)s \n    ```", "```py\n    >>> from sqlalchemy.dialects import mysql\n    >>> print(column(\"x\").regexp_match(\"word\").compile(dialect=mysql.dialect()))\n    x  REGEXP  %s \n    ```", "```py\n    >>> print(column(\"x\").concat(\"some string\"))\n    x  ||  :x_1 \n    ```", "```py\n    >>> print(column(\"x\", String) + \"some string\")\n    x  ||  :x_1 \n    ```", "```py\n    >>> print((column(\"x\", String) + \"some string\").compile(dialect=mysql.dialect()))\n    concat(x,  %s) \n    ```", "```py\n    >>> print(column(\"x\").regexp_replace(\"foo\", \"bar\").compile(dialect=postgresql.dialect()))\n    REGEXP_REPLACE(x,  %(x_1)s,  %(x_2)s) \n    ```", "```py\n    >>> print(\n    ...     (column(\"x\").collate(\"latin1_german2_ci\") == \"M\u00fcller\").compile(\n    ...         dialect=mysql.dialect()\n    ...     )\n    ... )\n    (x  COLLATE  latin1_german2_ci)  =  %s \n    ```", "```py\n    >>> from sqlalchemy import literal\n    >>> print(\n    ...     (literal(\"M\u00fcller\").collate(\"latin1_german2_ci\") == column(\"x\")).compile(\n    ...         dialect=mysql.dialect()\n    ...     )\n    ... )\n    (%s  COLLATE  latin1_german2_ci)  =  x \n    ```", "```py\n    >>> print(column(\"x\") + 5)\n    x  +  :x_1\n    >>> print(5 + column(\"x\"))\n    :x_1  +  x \n    ```", "```py\n    >>> print(column(\"x\") - 5)\n    x  -  :x_1\n    >>> print(5 - column(\"x\"))\n    :x_1  -  x \n    ```", "```py\n    >>> print(column(\"x\") * 5)\n    x  *  :x_1\n    >>> print(5 * column(\"x\"))\n    :x_1  *  x \n    ```", "```py\n    >>> print(column(\"x\") / 5)\n    x  /  CAST(:x_1  AS  NUMERIC)\n    >>> print(5 / column(\"x\"))\n    :x_1  /  CAST(x  AS  NUMERIC) \n    ```", "```py\n    >>> print(column(\"x\") // 5)\n    x  /  :x_1\n    >>> print(5 // column(\"x\", Integer))\n    :x_1  /  x \n    ```", "```py\n    >>> print(column(\"x\") // 5.5)\n    FLOOR(x  /  :x_1)\n    >>> print(5 // column(\"x\", Numeric))\n    FLOOR(:x_1  /  x) \n    ```", "```py\n    >>> print(column(\"x\") % 5)\n    x  %  :x_1\n    >>> print(5 % column(\"x\"))\n    :x_1  %  x \n    ```", "```py\n    >>> print(column(\"x\").bitwise_not())\n    ~x\n    ```", "```py\n    >>> from sqlalchemy import bitwise_not\n    >>> print(bitwise_not(column(\"x\")))\n    ~x\n    ```", "```py\n    >>> print(column(\"x\").bitwise_and(5))\n    x & :x_1\n    ```", "```py\n    >>> print(column(\"x\").bitwise_or(5))\n    x | :x_1\n    ```", "```py\n    >>> print(column(\"x\").bitwise_xor(5))\n    x ^ :x_1\n    ```", "```py\n    >>> from sqlalchemy.dialects import postgresql\n    >>> print(column(\"x\").bitwise_xor(5).compile(dialect=postgresql.dialect()))\n    x # %(x_1)s\n    ```", "```py\n    >>> print(column(\"x\").bitwise_rshift(5))\n    x >> :x_1\n    >>> print(column(\"x\").bitwise_lshift(5))\n    x << :x_1\n    ```", "```py\n>>> print(\n...     select(address_table.c.email_address)\n...     .where(user_table.c.name == \"squidward\")\n...     .where(address_table.c.user_id == user_table.c.id)\n... )\nSELECT  address.email_address\nFROM  address,  user_account\nWHERE  user_account.name  =  :name_1  AND  address.user_id  =  user_account.id \n```", "```py\n>>> print(\n...     select(address_table.c.email_address).where(\n...         user_table.c.name == \"squidward\",\n...         address_table.c.user_id == user_table.c.id,\n...     )\n... )\nSELECT  address.email_address\nFROM  address,  user_account\nWHERE  user_account.name  =  :name_1  AND  address.user_id  =  user_account.id \n```", "```py\n>>> from sqlalchemy import and_, or_\n>>> print(\n...     select(address_table.c.email_address).where(\n...         and_(\n...             or_(user_table.c.name == \"squidward\", user_table.c.name == \"sandy\"),\n...             address_table.c.user_id == user_table.c.id,\n...         )\n...     )\n... )\nSELECT  address.email_address\nFROM  address,  user_account\nWHERE  (user_account.name  =  :name_1  OR  user_account.name  =  :name_2)\nAND  address.user_id  =  user_account.id \n```", "```py\n>>> from sqlalchemy import not_\n>>> print(not_(column(\"x\") == 5))\nx  !=  :x_1 \n```", "```py\n>>> from sqlalchemy import Boolean\n>>> print(not_(column(\"x\", Boolean)))\nNOT  x \n```", "```py\n    >>> print((column(\"x\") == 5) & (column(\"y\") == 10))\n    x  =  :x_1  AND  y  =  :y_1 \n    ```", "```py\n    >>> print((column(\"x\") == 5) | (column(\"y\") == 10))\n    x  =  :x_1  OR  y  =  :y_1 \n    ```", "```py\n    >>> print(~(column(\"x\") == 5))\n    x  !=  :x_1\n    >>> from sqlalchemy import Boolean\n    >>> print(~column(\"x\", Boolean))\n    NOT  x \n    ```"]