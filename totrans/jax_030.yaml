- en: Pytrees
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Pytrees
- en: 原文：[`jax.readthedocs.io/en/latest/pytrees.html`](https://jax.readthedocs.io/en/latest/pytrees.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[`jax.readthedocs.io/en/latest/pytrees.html`](https://jax.readthedocs.io/en/latest/pytrees.html)
- en: '## What is a pytree?'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '## 什么是 pytree？'
- en: 'In JAX, we use the term *pytree* to refer to a tree-like structure built out
    of container-like Python objects. Classes are considered container-like if they
    are in the pytree registry, which by default includes lists, tuples, and dicts.
    That is:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JAX 中，我们使用术语*pytree*来指代由类似容器的 Python 对象构建的类似树的结构。如果它们在 pytree 注册中，则类被视为容器类，默认包括列表、元组和字典。也就是说：
- en: any object whose type is *not* in the pytree container registry is considered
    a *leaf* pytree;
  id: totrans-4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 任何类型*不*在 pytree 容器注册中的对象被视为*叶* pytree；
- en: any object whose type is in the pytree container registry, and which contains
    pytrees, is considered a pytree.
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 任何类型在 pytree 容器注册中的对象，并且包含 pytrees，被视为 pytree。
- en: For each entry in the pytree container registry, a container-like type is registered
    with a pair of functions that specify how to convert an instance of the container
    type to a `(children, metadata)` pair and how to convert such a pair back to an
    instance of the container type. Using these functions, JAX can canonicalize any
    tree of registered container objects into tuples.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 pytree 容器注册中的每个条目，注册了类似容器的类型，具有一对函数，用于指定如何将容器类型的实例转换为`(children, metadata)`对，以及如何将这样的对返回为容器类型的实例。使用这些函数，JAX
    可以将任何已注册容器对象的树规范化为元组。
- en: 'Example pytrees:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '示例 pytrees:'
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: JAX can be extended to consider other container types as pytrees; see Extending
    pytrees below.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: JAX 可以扩展以将其他容器类型视为 pytrees；请参见下面的扩展 pytrees。
- en: Pytrees and JAX functions
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Pytrees 和 JAX 函数
- en: Many JAX functions, like `jax.lax.scan()`, operate over pytrees of arrays. JAX
    function transformations can be applied to functions that accept as input and
    produce as output pytrees of arrays.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 许多 JAX 函数，比如 `jax.lax.scan()`，操作数组的 pytrees。JAX 函数变换可以应用于接受输入和产生输出为数组 pytrees
    的函数。
- en: Applying optional parameters to pytrees
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将可选参数应用于 pytrees
- en: Some JAX function transformations take optional parameters that specify how
    certain input or output values should be treated (e.g. the `in_axes` and `out_axes`
    arguments to `vmap()`). These parameters can also be pytrees, and their structure
    must correspond to the pytree structure of the corresponding arguments. In particular,
    to be able to “match up” leaves in these parameter pytrees with values in the
    argument pytrees, the parameter pytrees are often constrained to be tree prefixes
    of the argument pytrees.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 某些 JAX 函数变换接受可选参数，用于指定如何处理特定输入或输出值（例如 `vmap()` 的 `in_axes` 和 `out_axes` 参数）。这些参数也可以是
    pytrees，它们的结构必须与相应参数的 pytree 结构对应。特别地，在能够“匹配”这些参数 pytrees 中的叶子与参数 pytrees 中的值的情况下，通常限制参数
    pytrees 为参数 pytrees 的树前缀。
- en: 'For example, if we pass the following input to `vmap()` (note that the input
    arguments to a function are considered a tuple):'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们将以下输入传递给 `vmap()`（注意函数的输入参数被视为元组）：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We can use the following `in_axes` pytree to specify that only the `k2` argument
    is mapped (`axis=0`) and the rest aren’t mapped over (`axis=None`):'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下 `in_axes` pytree 指定仅映射`k2`参数（`axis=0`），其余参数不映射（`axis=None`）：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The optional parameter pytree structure must match that of the main input pytree.
    However, the optional parameters can optionally be specified as a “prefix” pytree,
    meaning that a single leaf value can be applied to an entire sub-pytree. For example,
    if we have the same `vmap()` input as above, but wish to only map over the dictionary
    argument, we can use:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 可选参数 pytree 结构必须与主输入 pytree 相匹配。但是，可选参数可以选择指定为“前缀” pytree，这意味着可以将单个叶值应用于整个子
    pytree。例如，如果我们有与上述相同的 `vmap()` 输入，但希望仅映射字典参数，我们可以使用：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Or, if we want every argument to be mapped, we can simply write a single leaf
    value that is applied over the entire argument tuple pytree:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果我们希望映射每个参数，可以简单地编写一个应用于整个参数元组 pytree 的单个叶值：
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This happens to be the default `in_axes` value for `vmap()`!
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这恰好是`vmap()`的默认`in_axes`值！
- en: The same logic applies to other optional parameters that refer to specific input
    or output values of a transformed function, e.g. `vmap`’s `out_axes`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 相同的逻辑适用于指定转换函数的其他可选参数，例如 `vmap` 的 `out_axes`。
- en: Viewing the pytree definition of an object
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看对象的 pytree 定义
- en: 'To view the pytree definition of an arbitrary `object` for debugging purposes,
    you can use:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 为了调试目的查看任意对象的 pytree 定义，可以使用：
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Developer information
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开发者信息
- en: '*This is primarily JAX internal documentation, end-users are not supposed to
    need to understand this to use JAX, except when registering new user-defined container
    types with JAX. Some of these details may change.*'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '*这主要是JAX内部文档，终端用户不应需要理解这一点来使用JAX，除非在向JAX注册新的用户定义容器类型时。某些细节可能会更改。*'
- en: Internal pytree handling
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 内部pytree处理
- en: 'JAX flattens pytrees into lists of leaves at the `api.py` boundary (and also
    in control flow primitives). This keeps downstream JAX internals simpler: transformations
    like `grad()`, `jit()`, and `vmap()` can handle user functions that accept and
    return the myriad different Python containers, while all the other parts of the
    system can operate on functions that only take (multiple) array arguments and
    always return a flat list of arrays.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: JAX在`api.py`边界（以及控制流原语中）将pytrees展平为叶子列表。这使得下游JAX内部更简单：像`grad()`、`jit()`和`vmap()`这样的转换可以处理接受并返回各种不同Python容器的用户函数，而系统的其他部分可以处理仅接受（多个）数组参数并始终返回扁平数组列表的函数。
- en: When JAX flattens a pytree it will produce a list of leaves and a `treedef`
    object that encodes the structure of the original value. The `treedef` can then
    be used to construct a matching structured value after transforming the leaves.
    Pytrees are tree-like, rather than DAG-like or graph-like, in that we handle them
    assuming referential transparency and that they can’t contain reference cycles.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当JAX展开pytree时，它将生成叶子列表和一个`treedef`对象，该对象编码原始值的结构。然后可以使用`treedef`来在转换叶子后构造匹配的结构化值。Pytrees类似于树，而不是DAG或图，我们处理它们时假设具有引用透明性并且不能包含引用循环。
- en: 'Here is a simple example:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个简单的例子：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'By default, pytree containers can be lists, tuples, dicts, namedtuple, None,
    OrderedDict. Other types of values, including numeric and ndarray values, are
    treated as leaves:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，pytree容器可以是列表、元组、字典、命名元组、None、OrderedDict。其他类型的值，包括数值和ndarray值，都被视为叶子节点：
- en: '[PRE8]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '### Extending pytrees'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '### 扩展pytrees'
- en: 'By default, any part of a structured value that is not recognized as an internal
    pytree node (i.e. container-like) is treated as a leaf:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，被视为结构化值的任何部分，如果未被识别为内部pytree节点（即类似容器的）则被视为叶子节点：
- en: '[PRE10]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The set of Python types that are considered internal pytree nodes is extensible,
    through a global registry of types, and values of registered types are traversed
    recursively. To register a new type, you can use `register_pytree_node()`:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 被视为内部pytree节点的Python类型集是可扩展的，通过全局类型注册表，注册类型的值被递归遍历。要注册新类型，可以使用`register_pytree_node()`：
- en: '[PRE12]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Alternatively, you can define appropriate `tree_flatten` and `tree_unflatten`
    methods on your class and decorate it with `register_pytree_node_class()`:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以在您的类上定义适当的`tree_flatten`和`tree_unflatten`方法，并使用`register_pytree_node_class()`进行装饰：
- en: '[PRE14]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: When defining unflattening functions, in general `children` should contain all
    the dynamic elements of the data structure (arrays, dynamic scalars, and pytrees),
    while `aux_data` should contain all the static elements that will be rolled into
    the `treedef` structure. JAX sometimes needs to compare `treedef` for equality,
    or compute its hash for use in the JIT cache, and so care must be taken to ensure
    that the auxiliary data specified in the flattening recipe supports meaningful
    hashing and equality comparisons.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义展开函数时，一般而言`children`应包含数据结构的所有动态元素（数组、动态标量和pytrees），而`aux_data`应包含将被滚入`treedef`结构的所有静态元素。有时JAX需要比较`treedef`以确保辅助数据在扁平化过程中支持有意义的哈希和相等比较，因此必须小心处理。
- en: The whole set of functions for operating on pytrees are in `jax.tree_util`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 操作pytree的所有函数都在`jax.tree_util`中。
- en: Custom PyTrees and Initialization
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自定义PyTrees和初始化
- en: 'One common gotcha with user-defined PyTree objects is that JAX transformations
    occasionally initialize them with unexpected values, so that any input validation
    done at initialization may fail. For example:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 用户定义的PyTree对象的一个常见问题是，JAX转换有时会使用意外的值初始化它们，因此初始化时进行的任何输入验证可能会失败。例如：
- en: '[PRE16]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In the first case, JAX’s internals use arrays of `object()` values to infer
    the structure of the tree; in the second case, the jacobian of a function mapping
    a tree to a tree is defined as a tree of trees.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一种情况下，JAX的内部使用`object()`值的数组来推断树的结构；在第二种情况下，将树映射到树的函数的雅可比矩阵定义为树的树。
- en: 'For this reason, the `__init__` and `__new__` methods of custom PyTree classes
    should generally avoid doing any array conversion or other input validation, or
    else anticipate and handle these special cases. For example:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，自定义 PyTree 类的 `__init__` 和 `__new__` 方法通常应避免进行任何数组转换或其他输入验证，或者预期并处理这些特殊情况。例如：
- en: '[PRE17]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Another possibility is to structure your `tree_unflatten` function so that
    it avoids calling `__init__`; for example:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个可能性是，结构化你的 `tree_unflatten` 函数，避免调用 `__init__`；例如：
- en: '[PRE18]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: If you go this route, make sure that your `tree_unflatten` function stays in-sync
    with `__init__` if and when the code is updated.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你选择这条路线，请确保你的 `tree_unflatten` 函数在代码更新时与 `__init__` 保持同步。
