- en: 0.2 Changelog
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sqlalchemy.org/en/20/changelog/changelog_02.html](https://docs.sqlalchemy.org/en/20/changelog/changelog_02.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 0.2.8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Tue Sep 05 2006'
  prefs: []
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: cleanup on connection methods + documentation. custom DBAPI arguments specified
    in query string, ‘connect_args’ argument to ‘create_engine’, or custom creation
    function via ‘creator’ function to ‘create_engine’.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added “recycle” argument to Pool, is “pool_recycle” on create_engine, defaults
    to 3600 seconds; connections after this age will be closed and replaced with a
    new one, to handle db’s that automatically close stale connections
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#274](https://www.sqlalchemy.org/trac/ticket/274)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: changed “invalidate” semantics with pooled connection; will instruct the underlying
    connection record to reconnect the next time its called. “invalidate” will also
    automatically be called if any error is thrown in the underlying call to connection.cursor().
    this will hopefully allow the connection pool to reconnect to a database that
    had been stopped and started without restarting the connecting application
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#121](https://www.sqlalchemy.org/trac/ticket/121)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: eesh ! the tutorial doctest was broken for quite some time.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: add_property() method on mapper does a “compile all mappers” step in case the
    given property references a non-compiled mapper (as it did in the case of the
    tutorial !)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: check for pg sequence already existing before create
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#277](https://www.sqlalchemy.org/trac/ticket/277)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: if a contextual session is established via MapperExtension.get_session (as it
    is using the sessioncontext plugin, etc), a lazy load operation will use that
    session by default if the parent object is not persistent with a session already.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: lazy loads will not fire off for an object that does not have a database identity
    (why? see [https://www.sqlalchemy.org/trac/wiki/WhyDontForeignKeysLoadData](https://www.sqlalchemy.org/trac/wiki/WhyDontForeignKeysLoadData))
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: unit-of-work does a better check for “orphaned” objects that are part of a “delete-orphan”
    cascade, for certain conditions where the parent isn’t available to cascade from.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: mappers can tell if one of their objects is an “orphan” based on interactions
    with the attribute package. this check is based on a status flag maintained for
    each relationship when objects are attached and detached from each other.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: it is now invalid to declare a self-referential relationship with “delete-orphan”
    (as the abovementioned check would make them impossible to save)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: improved the check for objects being part of a session when the unit of work
    seeks to flush() them as part of a relationship..
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: statement execution supports using the same BindParam object more than once
    in an expression; simplified handling of positional parameters. nice job by Bill
    Noon figuring out the basic idea.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#280](https://www.sqlalchemy.org/trac/ticket/280)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: postgres reflection moved to use pg_schema tables, can be overridden with use_information_schema=True
    argument to create_engine.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#60](https://www.sqlalchemy.org/trac/ticket/60), [#71](https://www.sqlalchemy.org/trac/ticket/71)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added case_sensitive argument to MetaData, Table, Column, determines itself
    automatically based on if a parent schemaitem has a non-None setting for the flag,
    or if not, then whether the identifier name is all lower case or not. when set
    to True, quoting is applied to identifiers with mixed or uppercase identifiers.
    quoting is also applied automatically in all cases to identifiers that are known
    to be reserved words or contain other non-standard characters. various database
    dialects can override all of this behavior, but currently they are all using the
    default behavior. tested with postgres, mysql, sqlite, oracle. needs more testing
    with firebird, ms-sql. part of the ongoing work with
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#155](https://www.sqlalchemy.org/trac/ticket/155)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: unit tests updated to run without any pysqlite installed; pool test uses a mock
    DBAPI
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: urls support escaped characters in passwords
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#281](https://www.sqlalchemy.org/trac/ticket/281)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added limit/offset to UNION queries (though not yet in oracle)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added “timezone=True” flag to DateTime and Time types. postgres so far will
    convert this to “TIME[STAMP] (WITH|WITHOUT) TIME ZONE”, so that control over timezone
    presence is more controllable (psycopg2 returns datetimes with tzinfo’s if available,
    which can create confusion against datetimes that don’t).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fix to using query.count() with distinct, **kwargs with SelectResults count()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#287](https://www.sqlalchemy.org/trac/ticket/287)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: deregister Table from MetaData when autoload fails;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#289](https://www.sqlalchemy.org/trac/ticket/289)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: import of py2.5s sqlite3
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#293](https://www.sqlalchemy.org/trac/ticket/293)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: unicode fix for startswith()/endswith()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#296](https://www.sqlalchemy.org/trac/ticket/296)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0.2.7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Sat Aug 12 2006'
  prefs: []
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: quoting facilities set up so that database-specific quoting can be turned on
    for individual table, schema, and column identifiers when used in all queries/creates/drops.
    Enabled via “quote=True” in Table or Column, as well as “quote_schema=True” in
    Table. Thanks to Aaron Spike for the excellent efforts.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: assignmapper was setting is_primary=True, causing all sorts of mayhem by not
    raising an error when redundant mappers were set up, fixed
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added allow_null_pks option to Mapper, allows rows where some primary key columns
    are null (i.e. when mapping to outer joins etc)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: modification to unitofwork to not maintain ordering within the “new” list or
    within the UOWTask “objects” list; instead, new objects are tagged with an ordering
    identifier as they are registered as new with the session, and the INSERT statements
    are then sorted within the mapper save_obj. the INSERT ordering has basically
    been pushed all the way to the end of the flush cycle. that way the various sorts
    and organizations occurring within UOWTask (particularly the circular task sort)
    don’t have to worry about maintaining order (which they weren’t anyway)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed reflection of foreign keys to autoload the referenced table if it was
    not loaded already
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pass URL query string arguments to connect() function
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'References: [#256](https://www.sqlalchemy.org/trac/ticket/256)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: oracle boolean type
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'References: [#257](https://www.sqlalchemy.org/trac/ticket/257)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: custom primary/secondary join conditions in a relation *will* be propagated
    to backrefs by default. specifying a backref() will override this behavior.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: better check for ambiguous join conditions in sql.Join; propagates to a better
    error message in PropertyLoader (i.e. relation()/backref()) for when the join
    condition can’t be reasonably determined.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: sqlite creates ForeignKeyConstraint objects properly upon table reflection.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: adjustments to pool stemming from changes made for. overflow counter should
    only be decremented if the connection actually succeeded. added a test script
    to attempt testing this.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#224](https://www.sqlalchemy.org/trac/ticket/224)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed mysql reflection of default values to be PassiveDefault
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added reflected ‘tinyint’, ‘mediumint’ type to MS-SQL.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#263](https://www.sqlalchemy.org/trac/ticket/263), [#264](https://www.sqlalchemy.org/trac/ticket/264)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SingletonThreadPool has a size and does a cleanup pass, so that only a given
    number of thread-local connections stay around (needed for sqlite applications
    that dispose of threads en masse)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed small pickle bug(s) with lazy loaders
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#265](https://www.sqlalchemy.org/trac/ticket/265), [#267](https://www.sqlalchemy.org/trac/ticket/267)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed possible error in mysql reflection where certain versions return an array
    instead of string for SHOW CREATE TABLE call
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fix to lazy loads when mapping to joins
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1770](https://www.sqlalchemy.org/trac/ticket/1770)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: all create()/drop() calls have a keyword argument of “connectable”. “engine”
    is deprecated.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed ms-sql connect() to work with adodbapi
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added “nowait” flag to Select()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: inheritance check uses issubclass() instead of direct __mro__ check to make
    sure class A inherits from B, allowing mapper inheritance to more flexibly correspond
    to class inheritance
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#271](https://www.sqlalchemy.org/trac/ticket/271)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SelectResults will use a subselect, when calling an aggregate (i.e. max, min,
    etc.) on a SelectResults that has an ORDER BY clause
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#252](https://www.sqlalchemy.org/trac/ticket/252)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixes to types so that database-specific types more easily used; fixes to mysql
    text types to work with this methodology
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#269](https://www.sqlalchemy.org/trac/ticket/269)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: some fixes to sqlite date type organization
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added MSTinyInteger to MS-SQL
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#263](https://www.sqlalchemy.org/trac/ticket/263)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0.2.6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Thu Jul 20 2006'
  prefs: []
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: big overhaul to schema to allow truly composite primary and foreign key constraints,
    via new ForeignKeyConstraint and PrimaryKeyConstraint objects. Existing methods
    of primary/foreign key creation have not been changed but use these new objects
    behind the scenes. table creation and reflection is now more table oriented rather
    than column oriented.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#76](https://www.sqlalchemy.org/trac/ticket/76)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: overhaul to MapperExtension calling scheme, wasn’t working very well previously
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: tweaks to ActiveMapper, supports self-referential relationships
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: slight rearrangement to objectstore (in activemapper/threadlocal) so that the
    SessionContext is referenced by ‘.context’ instead of subclassed directly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: activemapper will use threadlocal’s objectstore if the mod is activated when
    activemapper is imported
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: small fix to URL regexp to allow filenames with ‘@’ in them
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixes to Session expunge/update/etc…needs more cleanup.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: select_table mappers *still* weren’t always compiling
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed up Boolean datatype
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added count()/count_by() to list of methods proxied by assignmapper; this also
    adds them to activemapper
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: connection exceptions wrapped in DBAPIError
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ActiveMapper now supports autoloading column definitions from the database if
    you supply a __autoload__ = True attribute in your mapping inner-class. Currently
    this does not support reflecting any relationships.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: deferred column load could screw up the connection status in a flush() under
    some circumstances, this was fixed
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: expunge() was not working with cascade, fixed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: potential endless loop in cascading operations fixed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added “synonym()” function, applied to properties to have a propname the same
    as another, for the purposes of overriding props and allowing the original propname
    to be accessible in select_by().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fix to typing in clause construction which specifically helps type issues with
    polymorphic_union (CAST/ColumnClause propagates its type to proxy columns)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: mapper compilation work ongoing, someday it’ll work….moved around the initialization
    of MapperProperty objects to be after all mappers are created to better handle
    circular compilations. do_init() method is called on all properties now which
    are more aware of their “inherited” status if so.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: eager loads explicitly disallowed on self-referential relationships, or relationships
    to an inheriting mapper (which is also self-referential)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: reduced bind param size in query._get to appease the picky oracle
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#244](https://www.sqlalchemy.org/trac/ticket/244)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added ‘checkfirst’ argument to table.create()/table.drop(), as well as table.exists()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#234](https://www.sqlalchemy.org/trac/ticket/234)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: some other ongoing fixes to inheritance
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#245](https://www.sqlalchemy.org/trac/ticket/245)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: attribute/backref/orphan/history-tracking tweaks as usual…
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0.2.5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Sat Jul 08 2006'
  prefs: []
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed endless loop bug in select_by(), if the traversal hit two mappers that
    referenced each other
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: upgraded all unittests to insert ‘./lib/’ into sys.path, working around new
    setuptools PYTHONPATH-killing behavior
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: further fixes with attributes/dependencies/etc….
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: improved error handling for when DynamicMetaData is not connected
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MS-SQL support largely working (tested with pymssql)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ordering of UPDATE and DELETE statements within groups is now in order of primary
    key values, for more deterministic ordering
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: after_insert/delete/update mapper extensions now called per object, not per-object-per-table
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: further fixes/refactorings to mapper compilation
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0.2.4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Tue Jun 27 2006'
  prefs: []
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: try/except when the mapper sets init.__name__ on a mapped class, supports python
    2.3
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed bug where threadlocal engine would still autocommit despite a transaction
    in progress
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: lazy load and deferred load operations require the parent object to be in a
    Session to do the operation; whereas before the operation would just return a
    blank list or None, it now raises an exception.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Session.update() is slightly more lenient if the session to which the given
    object was formerly attached to was garbage collected; otherwise still requires
    you explicitly remove the instance from the previous Session.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixes to mapper compilation, checking for more error conditions
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: small fix to eager loading combined with ordering/limit/offset
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'utterly remarkable: added a single space between ‘CREATE TABLE’ and ‘(<the
    rest of it>’ since *that’s how MySQL indicates a non- reserved word tablename…..*'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#206](https://www.sqlalchemy.org/trac/ticket/206)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: more fixes to inheritance, related to many-to-many relations properly saving
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed bug when specifying explicit module to mysql dialect
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: when QueuePool times out it raises a TimeoutError instead of erroneously making
    another connection
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Queue.Queue usage in pool has been replaced with a locally modified version
    (works in py2.3/2.4!) that uses a threading.RLock for a mutex. this is to fix
    a reported case where a ConnectionFairy’s __del__() method got called within the
    Queue’s get() method, which then returns its connection to the Queue via the put()
    method, causing a reentrant hang unless threading.RLock is used.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: postgres will not place SERIAL keyword on a primary key column if it has a foreign
    key constraint
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: cursor() method on ConnectionFairy allows db-specific extension arguments to
    be propagated
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#221](https://www.sqlalchemy.org/trac/ticket/221)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: lazy load bind params properly propagate column type
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#225](https://www.sqlalchemy.org/trac/ticket/225)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'new MySQL types: MSEnum, MSTinyText, MSMediumText, MSLongText, etc. more support
    for MS-specific length/precision params in numeric types patch courtesy Mike Bernson'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: some fixes to connection pool invalidate()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#224](https://www.sqlalchemy.org/trac/ticket/224)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0.2.3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Sat Jun 17 2006'
  prefs: []
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: overhaul to mapper compilation to be deferred. this allows mappers to be constructed
    in any order, and their relationships to each other are compiled when the mappers
    are first used.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed a pretty big speed bottleneck in cascading behavior particularly when
    backrefs were in use
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the attribute instrumentation module has been completely rewritten; its now
    a large degree simpler and clearer, slightly faster. the “history” of an attribute
    is no longer micromanaged with each change and is instead part of a “CommittedState”
    object created when the instance is first loaded. HistoryArraySet is gone, the
    behavior of list attributes is now more open ended (i.e. they’re not sets anymore).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: py2.4 “set” construct used internally, falls back to sets.Set when “set” not
    available/ordering is needed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fix to transaction control, so that repeated rollback() calls don’t fail (was
    failing pretty badly when flush() would raise an exception in a larger try/except
    transaction block)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ”foreignkey” argument to relation() can also be a list. fixed auto-foreignkey
    detection
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#151](https://www.sqlalchemy.org/trac/ticket/151)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed bug where tables with schema names weren’t getting indexed in the MetaData
    object properly
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed bug where Column with redefined “key” property wasn’t getting type conversion
    happening in the ResultProxy
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#207](https://www.sqlalchemy.org/trac/ticket/207)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed ‘port’ attribute of URL to be an integer if present
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed old bug where if a many-to-many table mapped as “secondary” had extra
    columns, delete operations didn’t work
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: bugfixes for mapping against UNION queries
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed incorrect exception class thrown when no DB driver present
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added NonExistentTable exception thrown when reflecting a table that doesn’t
    exist
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#138](https://www.sqlalchemy.org/trac/ticket/138)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: small fix to ActiveMapper regarding one-to-one backrefs, other refactorings
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: overridden constructor in mapped classes gets __name__ and __doc__ from the
    original class
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed small bug in selectresult.py regarding mapper extension
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#200](https://www.sqlalchemy.org/trac/ticket/200)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: small tweak to cascade_mappers, not very strongly supported function at the
    moment
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: some fixes to between(), column.between() to propagate typing information better
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#202](https://www.sqlalchemy.org/trac/ticket/202)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: if an object fails to be constructed, is not added to the session
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#203](https://www.sqlalchemy.org/trac/ticket/203)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CAST function has been made into its own clause object with its own compilation
    function in ansicompiler; allows MySQL to silently ignore most CAST calls since
    MySQL seems to only support the standard CAST syntax with Date types. MySQL-compatible
    CAST support for strings, ints, etc. a TODO
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0.2.2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Mon Jun 05 2006'
  prefs: []
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: big improvements to polymorphic inheritance behavior, enabling it to work with
    adjacency list table structures
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#190](https://www.sqlalchemy.org/trac/ticket/190)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: major fixes and refactorings to inheritance relationships overall, more unit
    tests
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed “echo_pool” flag on create_engine()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fix to docs, removed incorrect info that close() is unsafe to use with threadlocal
    strategy (its totally safe !)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: create_engine() can take URLs as string or unicode
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#188](https://www.sqlalchemy.org/trac/ticket/188)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: firebird support partially completed; thanks to James Ralston and Brad Clements
    for their efforts.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Oracle url translation was broken, fixed, will feed host/port/sid into cx_oracle
    makedsn() if ‘database’ field is present, else uses straight TNS name from the
    ‘host’ field
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fix to using unicode criterion for query.get()/query.load()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: count() function on selectables now uses table primary key or first column instead
    of “1” for criterion, also uses label “rowcount” instead of “count”.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: got rudimental “mapping to multiple tables” functionality cleaned up, more correctly
    documented
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: restored global_connect() function, attaches to a DynamicMetaData instance called
    “default_metadata”. leaving MetaData arg to Table out will use the default metadata.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixes to session cascade behavior, entity_name propagation
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: reorganized unittests into subdirectories
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: more fixes to threadlocal connection nesting patterns
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0.2.1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Mon May 29 2006'
  prefs: []
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ”pool” argument to create_engine() properly propagates
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixes to URL, raises exception if not parsed, does not pass blank fields along
    to the DB connect string (a string such as user:host@/db was breaking on postgres)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: small fixes to Mapper when it inserts and tries to get new primary key values
    back
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: rewrote half of TLEngine, the ComposedSQLEngine used with ‘strategy=”threadlocal”’.
    it now properly implements engine.begin()/ engine.commit(), which nest fully with
    connection.begin()/trans.commit(). added about six unittests.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: major “duh” in pool.Pool, forgot to put back the WeakValueDictionary. unittest
    which was supposed to check for this was also silently missing it. fixed unittest
    to ensure that ConnectionFairy properly falls out of scope.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: placeholder dispose() method added to SingletonThreadPool, doesn’t do anything
    yet
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: rollback() is automatically called when an exception is raised, but only if
    there’s no transaction in process (i.e. works more like autocommit).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed exception raise in sqlite if no sqlite module present
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added extra example detail for association object doc
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connection adds checks for already being closed
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0.2.0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Sat May 27 2006'
  prefs: []
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: overhaul to Engine system so that what was formerly the SQLEngine is now a ComposedSQLEngine
    which consists of a variety of components, including a Dialect, ConnectionProvider,
    etc. This impacted all the db modules as well as Session and Mapper.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'create_engine now takes only RFC-1738-style strings: `driver://user:password@host:port/database`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**update** this format is generally but not exactly RFC-1738, including that
    underscores, not dashes or periods, are accepted in the “scheme” portion.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: total rewrite of connection-scoping methodology, Connection objects can now
    execute clause elements directly, added explicit “close” as well as support throughout
    Engine/ORM to handle closing properly, no longer relying upon __del__ internally
    to return connections to the pool.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#152](https://www.sqlalchemy.org/trac/ticket/152)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: overhaul to Session interface and scoping. uses hibernate-style methods, including
    query(class), save(), save_or_update(), etc. no threadlocal scope is installed
    by default. Provides a binding interface to specific Engines and/or Connections
    so that underlying Schema objects do not need to be bound to an Engine. Added
    a basic SessionTransaction object that can simplistically aggregate transactions
    across multiple engines.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: overhaul to mapper’s dependency and “cascade” behavior; dependency logic factored
    out of properties.py into a separate module “dependency.py”. “cascade” behavior
    is now explicitly controllable, proper implementation of “delete”, “delete-orphan”,
    etc. dependency system can now determine at flush time if a child object has a
    parent or not so that it makes better decisions on how that child should be updated
    in the DB with regards to deletes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: overhaul to Schema to build upon MetaData object instead of an Engine. Entire
    SQL/Schema system can be used with no Engines whatsoever, executed solely by an
    explicit Connection object. the “bound” methodology exists via the BoundMetaData
    for schema objects. ProxyEngine is generally not needed anymore and is replaced
    by DynamicMetaData.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: true polymorphic behavior implemented, fixes
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#167](https://www.sqlalchemy.org/trac/ticket/167)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ”oid” system has been totally moved into compile-time behavior; if they are
    used in an order_by where they are not available, the order_by doesn’t get compiled,
    fixes
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#147](https://www.sqlalchemy.org/trac/ticket/147)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: overhaul to packaging; “mapping” is now “orm”, “objectstore” is now “session”,
    the old “objectstore” namespace gets loaded in via the “threadlocal” mod if used
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: mods now called in via “import <modname>”. extensions favored over mods as mods
    are globally-monkeypatching
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fix to add_property so that it propagates properties to inheriting mappers
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#154](https://www.sqlalchemy.org/trac/ticket/154)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: backrefs create themselves against primary mapper of its originating property,
    primary/secondary join arguments can be specified to override. helps their usage
    with polymorphic mappers
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ”table exists” function has been implemented
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#31](https://www.sqlalchemy.org/trac/ticket/31)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ”create_all/drop_all” added to MetaData object
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#98](https://www.sqlalchemy.org/trac/ticket/98)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: improvements and fixes to topological sort algorithm, as well as more unit tests
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: tutorial page added to docs which also can be run with a custom doctest runner
    to ensure its properly working. docs generally overhauled to deal with new code
    patterns
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: many more fixes, refactorings.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: migration guide is available on the Wiki at [https://www.sqlalchemy.org/trac/wiki/02Migration](https://www.sqlalchemy.org/trac/wiki/02Migration)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0.2.8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Tue Sep 05 2006'
  prefs: []
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: cleanup on connection methods + documentation. custom DBAPI arguments specified
    in query string, ‘connect_args’ argument to ‘create_engine’, or custom creation
    function via ‘creator’ function to ‘create_engine’.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added “recycle” argument to Pool, is “pool_recycle” on create_engine, defaults
    to 3600 seconds; connections after this age will be closed and replaced with a
    new one, to handle db’s that automatically close stale connections
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#274](https://www.sqlalchemy.org/trac/ticket/274)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: changed “invalidate” semantics with pooled connection; will instruct the underlying
    connection record to reconnect the next time its called. “invalidate” will also
    automatically be called if any error is thrown in the underlying call to connection.cursor().
    this will hopefully allow the connection pool to reconnect to a database that
    had been stopped and started without restarting the connecting application
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#121](https://www.sqlalchemy.org/trac/ticket/121)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: eesh ! the tutorial doctest was broken for quite some time.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: add_property() method on mapper does a “compile all mappers” step in case the
    given property references a non-compiled mapper (as it did in the case of the
    tutorial !)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: check for pg sequence already existing before create
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#277](https://www.sqlalchemy.org/trac/ticket/277)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: if a contextual session is established via MapperExtension.get_session (as it
    is using the sessioncontext plugin, etc), a lazy load operation will use that
    session by default if the parent object is not persistent with a session already.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: lazy loads will not fire off for an object that does not have a database identity
    (why? see [https://www.sqlalchemy.org/trac/wiki/WhyDontForeignKeysLoadData](https://www.sqlalchemy.org/trac/wiki/WhyDontForeignKeysLoadData))
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: unit-of-work does a better check for “orphaned” objects that are part of a “delete-orphan”
    cascade, for certain conditions where the parent isn’t available to cascade from.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: mappers can tell if one of their objects is an “orphan” based on interactions
    with the attribute package. this check is based on a status flag maintained for
    each relationship when objects are attached and detached from each other.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: it is now invalid to declare a self-referential relationship with “delete-orphan”
    (as the abovementioned check would make them impossible to save)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: improved the check for objects being part of a session when the unit of work
    seeks to flush() them as part of a relationship..
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: statement execution supports using the same BindParam object more than once
    in an expression; simplified handling of positional parameters. nice job by Bill
    Noon figuring out the basic idea.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#280](https://www.sqlalchemy.org/trac/ticket/280)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: postgres reflection moved to use pg_schema tables, can be overridden with use_information_schema=True
    argument to create_engine.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#60](https://www.sqlalchemy.org/trac/ticket/60), [#71](https://www.sqlalchemy.org/trac/ticket/71)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added case_sensitive argument to MetaData, Table, Column, determines itself
    automatically based on if a parent schemaitem has a non-None setting for the flag,
    or if not, then whether the identifier name is all lower case or not. when set
    to True, quoting is applied to identifiers with mixed or uppercase identifiers.
    quoting is also applied automatically in all cases to identifiers that are known
    to be reserved words or contain other non-standard characters. various database
    dialects can override all of this behavior, but currently they are all using the
    default behavior. tested with postgres, mysql, sqlite, oracle. needs more testing
    with firebird, ms-sql. part of the ongoing work with
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#155](https://www.sqlalchemy.org/trac/ticket/155)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: unit tests updated to run without any pysqlite installed; pool test uses a mock
    DBAPI
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: urls support escaped characters in passwords
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#281](https://www.sqlalchemy.org/trac/ticket/281)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added limit/offset to UNION queries (though not yet in oracle)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added “timezone=True” flag to DateTime and Time types. postgres so far will
    convert this to “TIME[STAMP] (WITH|WITHOUT) TIME ZONE”, so that control over timezone
    presence is more controllable (psycopg2 returns datetimes with tzinfo’s if available,
    which can create confusion against datetimes that don’t).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fix to using query.count() with distinct, **kwargs with SelectResults count()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#287](https://www.sqlalchemy.org/trac/ticket/287)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: deregister Table from MetaData when autoload fails;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#289](https://www.sqlalchemy.org/trac/ticket/289)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: import of py2.5s sqlite3
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#293](https://www.sqlalchemy.org/trac/ticket/293)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: unicode fix for startswith()/endswith()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#296](https://www.sqlalchemy.org/trac/ticket/296)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0.2.7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Sat Aug 12 2006'
  prefs: []
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: quoting facilities set up so that database-specific quoting can be turned on
    for individual table, schema, and column identifiers when used in all queries/creates/drops.
    Enabled via “quote=True” in Table or Column, as well as “quote_schema=True” in
    Table. Thanks to Aaron Spike for the excellent efforts.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: assignmapper was setting is_primary=True, causing all sorts of mayhem by not
    raising an error when redundant mappers were set up, fixed
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added allow_null_pks option to Mapper, allows rows where some primary key columns
    are null (i.e. when mapping to outer joins etc)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: modification to unitofwork to not maintain ordering within the “new” list or
    within the UOWTask “objects” list; instead, new objects are tagged with an ordering
    identifier as they are registered as new with the session, and the INSERT statements
    are then sorted within the mapper save_obj. the INSERT ordering has basically
    been pushed all the way to the end of the flush cycle. that way the various sorts
    and organizations occurring within UOWTask (particularly the circular task sort)
    don’t have to worry about maintaining order (which they weren’t anyway)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed reflection of foreign keys to autoload the referenced table if it was
    not loaded already
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pass URL query string arguments to connect() function
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'References: [#256](https://www.sqlalchemy.org/trac/ticket/256)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: oracle boolean type
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'References: [#257](https://www.sqlalchemy.org/trac/ticket/257)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: custom primary/secondary join conditions in a relation *will* be propagated
    to backrefs by default. specifying a backref() will override this behavior.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: better check for ambiguous join conditions in sql.Join; propagates to a better
    error message in PropertyLoader (i.e. relation()/backref()) for when the join
    condition can’t be reasonably determined.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: sqlite creates ForeignKeyConstraint objects properly upon table reflection.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: adjustments to pool stemming from changes made for. overflow counter should
    only be decremented if the connection actually succeeded. added a test script
    to attempt testing this.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#224](https://www.sqlalchemy.org/trac/ticket/224)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed mysql reflection of default values to be PassiveDefault
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added reflected ‘tinyint’, ‘mediumint’ type to MS-SQL.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#263](https://www.sqlalchemy.org/trac/ticket/263), [#264](https://www.sqlalchemy.org/trac/ticket/264)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SingletonThreadPool has a size and does a cleanup pass, so that only a given
    number of thread-local connections stay around (needed for sqlite applications
    that dispose of threads en masse)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed small pickle bug(s) with lazy loaders
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#265](https://www.sqlalchemy.org/trac/ticket/265), [#267](https://www.sqlalchemy.org/trac/ticket/267)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed possible error in mysql reflection where certain versions return an array
    instead of string for SHOW CREATE TABLE call
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fix to lazy loads when mapping to joins
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1770](https://www.sqlalchemy.org/trac/ticket/1770)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: all create()/drop() calls have a keyword argument of “connectable”. “engine”
    is deprecated.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed ms-sql connect() to work with adodbapi
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added “nowait” flag to Select()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: inheritance check uses issubclass() instead of direct __mro__ check to make
    sure class A inherits from B, allowing mapper inheritance to more flexibly correspond
    to class inheritance
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#271](https://www.sqlalchemy.org/trac/ticket/271)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SelectResults will use a subselect, when calling an aggregate (i.e. max, min,
    etc.) on a SelectResults that has an ORDER BY clause
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#252](https://www.sqlalchemy.org/trac/ticket/252)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixes to types so that database-specific types more easily used; fixes to mysql
    text types to work with this methodology
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#269](https://www.sqlalchemy.org/trac/ticket/269)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: some fixes to sqlite date type organization
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added MSTinyInteger to MS-SQL
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#263](https://www.sqlalchemy.org/trac/ticket/263)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0.2.6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Thu Jul 20 2006'
  prefs: []
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: big overhaul to schema to allow truly composite primary and foreign key constraints,
    via new ForeignKeyConstraint and PrimaryKeyConstraint objects. Existing methods
    of primary/foreign key creation have not been changed but use these new objects
    behind the scenes. table creation and reflection is now more table oriented rather
    than column oriented.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#76](https://www.sqlalchemy.org/trac/ticket/76)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: overhaul to MapperExtension calling scheme, wasn’t working very well previously
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: tweaks to ActiveMapper, supports self-referential relationships
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: slight rearrangement to objectstore (in activemapper/threadlocal) so that the
    SessionContext is referenced by ‘.context’ instead of subclassed directly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: activemapper will use threadlocal’s objectstore if the mod is activated when
    activemapper is imported
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: small fix to URL regexp to allow filenames with ‘@’ in them
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixes to Session expunge/update/etc…needs more cleanup.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: select_table mappers *still* weren’t always compiling
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed up Boolean datatype
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added count()/count_by() to list of methods proxied by assignmapper; this also
    adds them to activemapper
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: connection exceptions wrapped in DBAPIError
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ActiveMapper now supports autoloading column definitions from the database if
    you supply a __autoload__ = True attribute in your mapping inner-class. Currently
    this does not support reflecting any relationships.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: deferred column load could screw up the connection status in a flush() under
    some circumstances, this was fixed
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: expunge() was not working with cascade, fixed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: potential endless loop in cascading operations fixed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added “synonym()” function, applied to properties to have a propname the same
    as another, for the purposes of overriding props and allowing the original propname
    to be accessible in select_by().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fix to typing in clause construction which specifically helps type issues with
    polymorphic_union (CAST/ColumnClause propagates its type to proxy columns)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: mapper compilation work ongoing, someday it’ll work….moved around the initialization
    of MapperProperty objects to be after all mappers are created to better handle
    circular compilations. do_init() method is called on all properties now which
    are more aware of their “inherited” status if so.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: eager loads explicitly disallowed on self-referential relationships, or relationships
    to an inheriting mapper (which is also self-referential)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: reduced bind param size in query._get to appease the picky oracle
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#244](https://www.sqlalchemy.org/trac/ticket/244)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added ‘checkfirst’ argument to table.create()/table.drop(), as well as table.exists()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#234](https://www.sqlalchemy.org/trac/ticket/234)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: some other ongoing fixes to inheritance
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#245](https://www.sqlalchemy.org/trac/ticket/245)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: attribute/backref/orphan/history-tracking tweaks as usual…
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0.2.5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Sat Jul 08 2006'
  prefs: []
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed endless loop bug in select_by(), if the traversal hit two mappers that
    referenced each other
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: upgraded all unittests to insert ‘./lib/’ into sys.path, working around new
    setuptools PYTHONPATH-killing behavior
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: further fixes with attributes/dependencies/etc….
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: improved error handling for when DynamicMetaData is not connected
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MS-SQL support largely working (tested with pymssql)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ordering of UPDATE and DELETE statements within groups is now in order of primary
    key values, for more deterministic ordering
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: after_insert/delete/update mapper extensions now called per object, not per-object-per-table
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: further fixes/refactorings to mapper compilation
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0.2.4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Tue Jun 27 2006'
  prefs: []
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: try/except when the mapper sets init.__name__ on a mapped class, supports python
    2.3
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed bug where threadlocal engine would still autocommit despite a transaction
    in progress
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: lazy load and deferred load operations require the parent object to be in a
    Session to do the operation; whereas before the operation would just return a
    blank list or None, it now raises an exception.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Session.update() is slightly more lenient if the session to which the given
    object was formerly attached to was garbage collected; otherwise still requires
    you explicitly remove the instance from the previous Session.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixes to mapper compilation, checking for more error conditions
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: small fix to eager loading combined with ordering/limit/offset
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'utterly remarkable: added a single space between ‘CREATE TABLE’ and ‘(<the
    rest of it>’ since *that’s how MySQL indicates a non- reserved word tablename…..*'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#206](https://www.sqlalchemy.org/trac/ticket/206)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: more fixes to inheritance, related to many-to-many relations properly saving
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed bug when specifying explicit module to mysql dialect
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: when QueuePool times out it raises a TimeoutError instead of erroneously making
    another connection
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Queue.Queue usage in pool has been replaced with a locally modified version
    (works in py2.3/2.4!) that uses a threading.RLock for a mutex. this is to fix
    a reported case where a ConnectionFairy’s __del__() method got called within the
    Queue’s get() method, which then returns its connection to the Queue via the put()
    method, causing a reentrant hang unless threading.RLock is used.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: postgres will not place SERIAL keyword on a primary key column if it has a foreign
    key constraint
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: cursor() method on ConnectionFairy allows db-specific extension arguments to
    be propagated
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#221](https://www.sqlalchemy.org/trac/ticket/221)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: lazy load bind params properly propagate column type
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#225](https://www.sqlalchemy.org/trac/ticket/225)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'new MySQL types: MSEnum, MSTinyText, MSMediumText, MSLongText, etc. more support
    for MS-specific length/precision params in numeric types patch courtesy Mike Bernson'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: some fixes to connection pool invalidate()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#224](https://www.sqlalchemy.org/trac/ticket/224)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0.2.3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Sat Jun 17 2006'
  prefs: []
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: overhaul to mapper compilation to be deferred. this allows mappers to be constructed
    in any order, and their relationships to each other are compiled when the mappers
    are first used.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed a pretty big speed bottleneck in cascading behavior particularly when
    backrefs were in use
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the attribute instrumentation module has been completely rewritten; its now
    a large degree simpler and clearer, slightly faster. the “history” of an attribute
    is no longer micromanaged with each change and is instead part of a “CommittedState”
    object created when the instance is first loaded. HistoryArraySet is gone, the
    behavior of list attributes is now more open ended (i.e. they’re not sets anymore).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: py2.4 “set” construct used internally, falls back to sets.Set when “set” not
    available/ordering is needed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fix to transaction control, so that repeated rollback() calls don’t fail (was
    failing pretty badly when flush() would raise an exception in a larger try/except
    transaction block)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ”foreignkey” argument to relation() can also be a list. fixed auto-foreignkey
    detection
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#151](https://www.sqlalchemy.org/trac/ticket/151)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed bug where tables with schema names weren’t getting indexed in the MetaData
    object properly
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed bug where Column with redefined “key” property wasn’t getting type conversion
    happening in the ResultProxy
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#207](https://www.sqlalchemy.org/trac/ticket/207)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed ‘port’ attribute of URL to be an integer if present
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed old bug where if a many-to-many table mapped as “secondary” had extra
    columns, delete operations didn’t work
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: bugfixes for mapping against UNION queries
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed incorrect exception class thrown when no DB driver present
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added NonExistentTable exception thrown when reflecting a table that doesn’t
    exist
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#138](https://www.sqlalchemy.org/trac/ticket/138)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: small fix to ActiveMapper regarding one-to-one backrefs, other refactorings
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: overridden constructor in mapped classes gets __name__ and __doc__ from the
    original class
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed small bug in selectresult.py regarding mapper extension
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#200](https://www.sqlalchemy.org/trac/ticket/200)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: small tweak to cascade_mappers, not very strongly supported function at the
    moment
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: some fixes to between(), column.between() to propagate typing information better
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#202](https://www.sqlalchemy.org/trac/ticket/202)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: if an object fails to be constructed, is not added to the session
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#203](https://www.sqlalchemy.org/trac/ticket/203)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CAST function has been made into its own clause object with its own compilation
    function in ansicompiler; allows MySQL to silently ignore most CAST calls since
    MySQL seems to only support the standard CAST syntax with Date types. MySQL-compatible
    CAST support for strings, ints, etc. a TODO
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0.2.2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Mon Jun 05 2006'
  prefs: []
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: big improvements to polymorphic inheritance behavior, enabling it to work with
    adjacency list table structures
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#190](https://www.sqlalchemy.org/trac/ticket/190)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: major fixes and refactorings to inheritance relationships overall, more unit
    tests
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed “echo_pool” flag on create_engine()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fix to docs, removed incorrect info that close() is unsafe to use with threadlocal
    strategy (its totally safe !)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: create_engine() can take URLs as string or unicode
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#188](https://www.sqlalchemy.org/trac/ticket/188)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: firebird support partially completed; thanks to James Ralston and Brad Clements
    for their efforts.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Oracle url translation was broken, fixed, will feed host/port/sid into cx_oracle
    makedsn() if ‘database’ field is present, else uses straight TNS name from the
    ‘host’ field
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fix to using unicode criterion for query.get()/query.load()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: count() function on selectables now uses table primary key or first column instead
    of “1” for criterion, also uses label “rowcount” instead of “count”.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: got rudimental “mapping to multiple tables” functionality cleaned up, more correctly
    documented
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: restored global_connect() function, attaches to a DynamicMetaData instance called
    “default_metadata”. leaving MetaData arg to Table out will use the default metadata.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixes to session cascade behavior, entity_name propagation
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: reorganized unittests into subdirectories
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: more fixes to threadlocal connection nesting patterns
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0.2.1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Mon May 29 2006'
  prefs: []
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ”pool” argument to create_engine() properly propagates
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixes to URL, raises exception if not parsed, does not pass blank fields along
    to the DB connect string (a string such as user:host@/db was breaking on postgres)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: small fixes to Mapper when it inserts and tries to get new primary key values
    back
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: rewrote half of TLEngine, the ComposedSQLEngine used with ‘strategy=”threadlocal”’.
    it now properly implements engine.begin()/ engine.commit(), which nest fully with
    connection.begin()/trans.commit(). added about six unittests.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: major “duh” in pool.Pool, forgot to put back the WeakValueDictionary. unittest
    which was supposed to check for this was also silently missing it. fixed unittest
    to ensure that ConnectionFairy properly falls out of scope.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: placeholder dispose() method added to SingletonThreadPool, doesn’t do anything
    yet
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: rollback() is automatically called when an exception is raised, but only if
    there’s no transaction in process (i.e. works more like autocommit).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed exception raise in sqlite if no sqlite module present
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added extra example detail for association object doc
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connection adds checks for already being closed
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0.2.0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Sat May 27 2006'
  prefs: []
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: overhaul to Engine system so that what was formerly the SQLEngine is now a ComposedSQLEngine
    which consists of a variety of components, including a Dialect, ConnectionProvider,
    etc. This impacted all the db modules as well as Session and Mapper.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'create_engine now takes only RFC-1738-style strings: `driver://user:password@host:port/database`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**update** this format is generally but not exactly RFC-1738, including that
    underscores, not dashes or periods, are accepted in the “scheme” portion.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: total rewrite of connection-scoping methodology, Connection objects can now
    execute clause elements directly, added explicit “close” as well as support throughout
    Engine/ORM to handle closing properly, no longer relying upon __del__ internally
    to return connections to the pool.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#152](https://www.sqlalchemy.org/trac/ticket/152)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: overhaul to Session interface and scoping. uses hibernate-style methods, including
    query(class), save(), save_or_update(), etc. no threadlocal scope is installed
    by default. Provides a binding interface to specific Engines and/or Connections
    so that underlying Schema objects do not need to be bound to an Engine. Added
    a basic SessionTransaction object that can simplistically aggregate transactions
    across multiple engines.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: overhaul to mapper’s dependency and “cascade” behavior; dependency logic factored
    out of properties.py into a separate module “dependency.py”. “cascade” behavior
    is now explicitly controllable, proper implementation of “delete”, “delete-orphan”,
    etc. dependency system can now determine at flush time if a child object has a
    parent or not so that it makes better decisions on how that child should be updated
    in the DB with regards to deletes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: overhaul to Schema to build upon MetaData object instead of an Engine. Entire
    SQL/Schema system can be used with no Engines whatsoever, executed solely by an
    explicit Connection object. the “bound” methodology exists via the BoundMetaData
    for schema objects. ProxyEngine is generally not needed anymore and is replaced
    by DynamicMetaData.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: true polymorphic behavior implemented, fixes
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#167](https://www.sqlalchemy.org/trac/ticket/167)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ”oid” system has been totally moved into compile-time behavior; if they are
    used in an order_by where they are not available, the order_by doesn’t get compiled,
    fixes
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#147](https://www.sqlalchemy.org/trac/ticket/147)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: overhaul to packaging; “mapping” is now “orm”, “objectstore” is now “session”,
    the old “objectstore” namespace gets loaded in via the “threadlocal” mod if used
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: mods now called in via “import <modname>”. extensions favored over mods as mods
    are globally-monkeypatching
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fix to add_property so that it propagates properties to inheriting mappers
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#154](https://www.sqlalchemy.org/trac/ticket/154)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: backrefs create themselves against primary mapper of its originating property,
    primary/secondary join arguments can be specified to override. helps their usage
    with polymorphic mappers
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ”table exists” function has been implemented
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#31](https://www.sqlalchemy.org/trac/ticket/31)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ”create_all/drop_all” added to MetaData object
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#98](https://www.sqlalchemy.org/trac/ticket/98)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: improvements and fixes to topological sort algorithm, as well as more unit tests
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: tutorial page added to docs which also can be run with a custom doctest runner
    to ensure its properly working. docs generally overhauled to deal with new code
    patterns
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: many more fixes, refactorings.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: migration guide is available on the Wiki at [https://www.sqlalchemy.org/trac/wiki/02Migration](https://www.sqlalchemy.org/trac/wiki/02Migration)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
