["```py\n    idx = Index(\"a\", \"b\")\n    idx.kwargs[\"mysql_someargument\"] = True\n    ```", "```py\n    Index.argument_for(\"mysql\", \"someargument\", False)\n\n    idx = Index(\"a\", \"b\", mysql_someargument=True)\n    ```", "```py\n    and_(x == y for x, y in tuples)\n    ```", "```py\n    from sqlalchemy import insert, update, delete\n\n    ins = insert(SomeMappedClass).values(x=5)\n\n    del_ = delete(SomeMappedClass).where(SomeMappedClass.id == 5)\n\n    upd = update(SomeMappedClass).where(SomeMappedClass.id == 5).values(name=\"ed\")\n    ```", "```py\n    idx = Index(\"a\", \"b\")\n    idx.kwargs[\"mysql_someargument\"] = True\n    ```", "```py\n    Index.argument_for(\"mysql\", \"someargument\", False)\n\n    idx = Index(\"a\", \"b\", mysql_someargument=True)\n    ```", "```py\n    idx = Index(\"a\", \"b\")\n    idx.kwargs[\"mysql_someargument\"] = True\n    ```", "```py\n    Index.argument_for(\"mysql\", \"someargument\", False)\n\n    idx = Index(\"a\", \"b\", mysql_someargument=True)\n    ```", "```py\n    and_(x == y for x, y in tuples)\n    ```", "```py\n    and_(x == y for x, y in tuples)\n    ```", "```py\n    from sqlalchemy import insert, update, delete\n\n    ins = insert(SomeMappedClass).values(x=5)\n\n    del_ = delete(SomeMappedClass).where(SomeMappedClass.id == 5)\n\n    upd = update(SomeMappedClass).where(SomeMappedClass.id == 5).values(name=\"ed\")\n    ```", "```py\n    from sqlalchemy import insert, update, delete\n\n    ins = insert(SomeMappedClass).values(x=5)\n\n    del_ = delete(SomeMappedClass).where(SomeMappedClass.id == 5)\n\n    upd = update(SomeMappedClass).where(SomeMappedClass.id == 5).values(name=\"ed\")\n    ```"]