- en: Stories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pymupdf.readthedocs.io/en/latest/recipes-stories.html](https://pymupdf.readthedocs.io/en/latest/recipes-stories.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This document showcases some typical use cases for [Stories](tutorial.html#workingwithstories).
  prefs: []
  type: TYPE_NORMAL
- en: 'As mentioned in the [tutorial](tutorial.html#workingwithstories), stories may
    be created using up to three input sources: HTML, CSS and Archives – all of which
    are optional and which, respectively, can be provided programmatically.'
  prefs: []
  type: TYPE_NORMAL
- en: The following examples will showcase combinations for using these inputs.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Many of these recipe’s source code are included as examples in the `docs` folder.
  prefs: []
  type: TYPE_NORMAL
- en: '## How to Add a Line of Text with Some Formatting'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the inevitable “Hello World” example. We will show two variants:'
  prefs: []
  type: TYPE_NORMAL
- en: Create using existing HTML source [[1]](#f1), that may come from anywhere.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create using the Python API.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'Variant using an existing HTML source [[1]](#f1) – which in this case is defined
    as a constant in the script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'The above effect (sans-serif and blue text) could have been achieved by using
    a separate CSS source like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Python API variant – everything is created programmatically:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Both variants will produce the same output PDF.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *  ## How to use Images'
  prefs: []
  type: TYPE_NORMAL
- en: Images can be referenced in the provided HTML source, or the reference to a
    desired image can also be stored via the Python API. In any case, this requires
    using an [Archive](archive-class.html#archive), which refers to the place where
    the image can be found.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Images with the binary content embedded in the HTML source are **not supported**
    by stories.
  prefs: []
  type: TYPE_NORMAL
- en: 'We extend our “Hello World” example from above and display an image of our
    planet right after the text. Assuming the image has the name “world.jpg” and is
    present in the script’s folder, then this is the modified version of the above
    Python API variant:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '* * *  ## How to Read External HTML and CSS for a Story'
  prefs: []
  type: TYPE_NORMAL
- en: These cases are fairly straightforward.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a general recommendation, HTML and CSS sources should be **read as binary
    files** and decoded before using them in a story. The Python `pathlib.Path` provides
    convenient ways to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '* * *  ## How to Output Database Content with Story Templates'
  prefs: []
  type: TYPE_NORMAL
- en: This script demonstrates how to report SQL database content using an **HTML
    template**.
  prefs: []
  type: TYPE_NORMAL
- en: 'The example SQL database contains two tables:'
  prefs: []
  type: TYPE_NORMAL
- en: Table “films” contains one row per film with the fields **“title”**, **“director”**
    and (release) **“year”**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Table “actors” contains one row per actor and film title (fields (actor) **“name”**
    and (film) **“title”**).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The story DOM consists of a template for one film, which reports film data together
    with a list of casted actors.
  prefs: []
  type: TYPE_NORMAL
- en: '**Files:**'
  prefs: []
  type: TYPE_NORMAL
- en: '`docs/samples/filmfestival-sql.py`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`docs/samples/filmfestival-sql.db`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <details><summary>See recipe</summary></details>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '* * *  ## How to Integrate with Existing PDFs'
  prefs: []
  type: TYPE_NORMAL
- en: Because a [DocumentWriter](document-writer-class.html#documentwriter) can only
    write to a new file, stories cannot be placed on existing pages. This script demonstrates
    a circumvention of this restriction.
  prefs: []
  type: TYPE_NORMAL
- en: The basic idea is letting [DocumentWriter](document-writer-class.html#documentwriter)
    output to a PDF in memory. Once the story has finished, we re-open this memory
    PDF and put its pages to desired locations on **existing** pages via method [`Page.show_pdf_page()`](page.html#Page.show_pdf_page
    "Page.show_pdf_page").
  prefs: []
  type: TYPE_NORMAL
- en: '**Files:**'
  prefs: []
  type: TYPE_NORMAL
- en: '`docs/samples/showpdf-page.py`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <details><summary>See recipe</summary></details>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '* * *  ## How to Make Multi-Columned Layouts and Access Fonts from Package
    [pymupdf-fonts](https://github.com/pymupdf/pymupdf-fonts)'
  prefs: []
  type: TYPE_NORMAL
- en: This script outputs an article (taken from Wikipedia) that contains text and
    multiple images and uses a 2-column page layout.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, two “Ubuntu” font families from package [pymupdf-fonts](https://github.com/pymupdf/pymupdf-fonts)
    are used instead of defaulting to Base-14 fonts.
  prefs: []
  type: TYPE_NORMAL
- en: Yet another feature used here is that all data – the images and the article
    HTML – are jointly stored in a ZIP file.
  prefs: []
  type: TYPE_NORMAL
- en: '**Files:**'
  prefs: []
  type: TYPE_NORMAL
- en: '`docs/samples/quickfox.py`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`docs/samples/quickfox.zip`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <details><summary>See recipe</summary></details>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '* * *  ## How to Make a Layout which Wraps Around a Predefined “no go area”
    Layout'
  prefs: []
  type: TYPE_NORMAL
- en: This is a demo script using PyMuPDF’s Story class to output text as a PDF with
    a two-column page layout.
  prefs: []
  type: TYPE_NORMAL
- en: 'The script demonstrates the following features:'
  prefs: []
  type: TYPE_NORMAL
- en: Layout text around images of an existing (“target”) PDF.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Based on a few global parameters, areas on each page are identified, that can
    be used to receive text layouted by a Story.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These global parameters are not stored anywhere in the target PDF and must
    therefore be provided in some way:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The width of the border(s) on each page.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The fontsize to use for text. This value determines whether the provided text
    will fit in the empty spaces of the (fixed) pages of target PDF. It cannot be
    predicted in any way. The script ends with an exception if target PDF has not
    enough pages, and prints a warning message if not all pages receive at least some
    text. In both cases, the FONTSIZE value can be changed (a float value).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Use of a 2-column page layout for the text.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The layout creates a temporary (memory) PDF. Its produced page content (the
    text) is used to overlay the corresponding target page. If text requires more
    pages than are available in target PDF, an exception is raised. If not all target
    pages receive at least some text, a warning is printed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The script reads “image-no-go.pdf” in its own folder. This is the “target” PDF.
    It contains 2 pages with each 2 images (from the original article), which are
    positioned at places that create a broad overall test coverage. Otherwise the
    pages are empty.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The script produces “quickfox-image-no-go.pdf” which contains the original pages
    and image positions, but with the original article text laid out around them.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Files:**'
  prefs: []
  type: TYPE_NORMAL
- en: '`docs/samples/quickfox-image-no-go.py`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`docs/samples/quickfox-image-no-go.pdf`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`docs/samples/quickfox.zip`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <details><summary>See recipe</summary></details>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '* * *  ## How to Output an HTML Table'
  prefs: []
  type: TYPE_NORMAL
- en: 'Outputting HTML tables is supported as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Flat table layouts are supported (“rows x columns”), no support of the “colspan”
    / “rowspan” attributes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Table header tag *th* supports attribute “scope” with values “row” or “col”.
    Applicable text will be bold by default.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Column widths are computed automatically based on column content. They cannot
    be directly set.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Table **cells may contain images** which will be considered in the column width
    calculation magic.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Row heights are computed automatically based on row content - leading to multi-line
    rows where needed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The potentially multiple lines of a table row will always be kept together on
    one page (respectively “where” rectangle) and not be splitted.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Table header rows are only **shown on the first page / “where” rectangle.**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The “style” attribute is ignored when given directly in HTML table elements.
    Styling for a table and its elements must happen separately, in CSS source or
    within the *style* tag.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Styling for *tr* elements is not supported and ignored. Therefore, a table-wide
    grid or alternating row background colors are not supported. One of the following
    example scripts however shows an easy way to deal with this limitation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Files:**'
  prefs: []
  type: TYPE_NORMAL
- en: '`docs/samples/table01.py` This script reflects basic features.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <details><summary>See recipe</summary></details>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '`docs/samples/national-capitals.py` Advanced script extending table output
    options using simple additional code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multi-page output simulating **repeating header rows**
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Alternating table row background colors
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Table rows and columns delimited by gridlines
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Table rows dynamically generated / filled with data from an SQL database
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: <details><summary>See recipe</summary></details>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '* * *  ## How to Create a Simple Grid Layout'
  prefs: []
  type: TYPE_NORMAL
- en: By creating a sequence of [Story](story-class.html#story) objects within a grid
    created via the [make_table](functions.html#functions-make-table) function a developer
    can create grid layouts as required.
  prefs: []
  type: TYPE_NORMAL
- en: '**Files:**'
  prefs: []
  type: TYPE_NORMAL
- en: '`docs/samples/simple-grid.py`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <details><summary>See recipe</summary></details>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '* * *  ## How to Generate a Table of Contents'
  prefs: []
  type: TYPE_NORMAL
- en: This script lists the source code of all Python scripts that live in the script’s
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: '**Files:**'
  prefs: []
  type: TYPE_NORMAL
- en: '`docs/samples/code-printer.py`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <details><summary>See recipe</summary></details>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'It features the following capabilities:'
  prefs: []
  type: TYPE_NORMAL
- en: Automatic generation of a Table of Contents (TOC) on separately numbered pages
    at the start of the document - using a specialized [Story](story-class.html#story).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Use of 3 separate [Story](story-class.html#story) objects per page: header
    story, footer story and the story for printing the Python sources.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The page **footer is automatically changed** to show the name of the current
    Python file.
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: Use of [`Story.element_positions()`](story-class.html#Story.element_positions
    "Story.element_positions") to collect the data for the TOC and for the dynamic
    adjustment of page footers. This is an example of a **bidirectional communication**
    between the story output process and the script.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The main PDF with the Python sources is being written to memory by its [DocumentWriter](document-writer-class.html#documentwriter).
    Another [Story](story-class.html#story) / [DocumentWriter](document-writer-class.html#documentwriter)
    pair is then used to create a (memory) PDF for the TOC pages. Finally, both these
    PDFs are joined and the result stored to disk.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *  ## How to Display a List from JSON Data'
  prefs: []
  type: TYPE_NORMAL
- en: This example takes some JSON data input which it uses to populate a [Story](story-class.html#story).
    It also contains some visual text formatting and shows how to add links.
  prefs: []
  type: TYPE_NORMAL
- en: '**Files:**'
  prefs: []
  type: TYPE_NORMAL
- en: '`docs/samples/json-example.py`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <details><summary>See recipe</summary></details>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '* * *  ## Using the Alternative `Story.write*()` functions'
  prefs: []
  type: TYPE_NORMAL
- en: The `Story.write*()` functions provide a different way to use the [Story](story-class.html#story)
    functionality, removing the need for calling code to implement a loop that calls
    [`Story.place()`](story-class.html#Story.place "Story.place") and [`Story.draw()`](story-class.html#Story.draw
    "Story.draw") etc, at the expense of having to provide at least a `rectfn()` callback.
  prefs: []
  type: TYPE_NORMAL
- en: '### How to do Basic Layout with [`Story.write()`](story-class.html#Story.write
    "Story.write")'
  prefs: []
  type: TYPE_NORMAL
- en: This script lays out multiple copies of its own source code, into four rectangles
    per page.
  prefs: []
  type: TYPE_NORMAL
- en: '**Files:**'
  prefs: []
  type: TYPE_NORMAL
- en: '`docs/samples/story-write.py`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <details><summary>See recipe</summary></details>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '* * *  ### How to do Iterative Layout for a Table of Contents with [`Story.write_stabilized()`](story-class.html#Story.write_stabilized
    "Story.write_stabilized")'
  prefs: []
  type: TYPE_NORMAL
- en: This script creates html content dynamically, adding a contents section based
    on ElementPosition items that have non-zero `.heading` values.
  prefs: []
  type: TYPE_NORMAL
- en: The contents section is at the start of the document, so modifications to the
    contents can change page numbers in the rest of the document, which in turn can
    cause page numbers in the contents section to be incorrect.
  prefs: []
  type: TYPE_NORMAL
- en: So the script uses [`Story.write_stabilized()`](story-class.html#Story.write_stabilized
    "Story.write_stabilized") to repeatedly lay things out until things are stable.
  prefs: []
  type: TYPE_NORMAL
- en: '**Files:**'
  prefs: []
  type: TYPE_NORMAL
- en: '`docs/samples/story-write-stabilized.py`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <details><summary>See recipe</summary></details>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '* * *  ### How to do Iterative Layout and Create PDF Links with `Story.write_stabilized_links()`'
  prefs: []
  type: TYPE_NORMAL
- en: This script is similar to the one described in “How to use [`Story.write_stabilized()`](story-class.html#Story.write_stabilized
    "Story.write_stabilized")” above, except that the generated PDF also contains
    links that correspond to the internal links in the original html.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is done by using `Story.write_stabilized_links()`; this is slightly different
    from [`Story.write_stabilized()`](story-class.html#Story.write_stabilized "Story.write_stabilized"):'
  prefs: []
  type: TYPE_NORMAL
- en: It does not take a [DocumentWriter](document-writer-class.html#documentwriter)
    `writer` arg.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It returns a PDF [Document](document.html#document) instance.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The reasons for this are a little involved; for example a [DocumentWriter](document-writer-class.html#documentwriter)
    is not necessarily a PDF writer, so doesn’t really work in a PDF-specific API.]'
  prefs: []
  type: TYPE_NORMAL
- en: '**Files:**'
  prefs: []
  type: TYPE_NORMAL
- en: '`docs/samples/story-write-stabilized-links.py`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <details><summary>See recipe</summary></details>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Footnotes
  prefs: []
  type: TYPE_NORMAL
- en: Do you have any feedback on this page?
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: This software is provided AS-IS with no warranty, either express or implied.
    This software is distributed under license and may not be copied, modified or
    distributed except as expressly authorized under the terms of that license. Refer
    to licensing information at [artifex.com](https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link)
    or contact Artifex Software Inc., 39 Mesa Street, Suite 108A, San Francisco CA
    94129, United States for further information.
  prefs: []
  type: TYPE_NORMAL
- en: This documentation covers all versions up to 1.24.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[![Discord logo](../Images/66cbb5081103a580193aa66c87b90d9a.png)](https://discord.gg/TSpYGBW4eq)
    ## How to Add a Line of Text with Some Formatting'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the inevitable “Hello World” example. We will show two variants:'
  prefs: []
  type: TYPE_NORMAL
- en: Create using existing HTML source [[1]](#f1), that may come from anywhere.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create using the Python API.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'Variant using an existing HTML source [[1]](#f1) – which in this case is defined
    as a constant in the script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'The above effect (sans-serif and blue text) could have been achieved by using
    a separate CSS source like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Python API variant – everything is created programmatically:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Both variants will produce the same output PDF.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '## How to use Images'
  prefs: []
  type: TYPE_NORMAL
- en: Images can be referenced in the provided HTML source, or the reference to a
    desired image can also be stored via the Python API. In any case, this requires
    using an [Archive](archive-class.html#archive), which refers to the place where
    the image can be found.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Images with the binary content embedded in the HTML source are **not supported**
    by stories.
  prefs: []
  type: TYPE_NORMAL
- en: 'We extend our “Hello World” example from above and display an image of our
    planet right after the text. Assuming the image has the name “world.jpg” and is
    present in the script’s folder, then this is the modified version of the above
    Python API variant:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '## How to Read External HTML and CSS for a Story'
  prefs: []
  type: TYPE_NORMAL
- en: These cases are fairly straightforward.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a general recommendation, HTML and CSS sources should be **read as binary
    files** and decoded before using them in a story. The Python `pathlib.Path` provides
    convenient ways to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '## How to Output Database Content with Story Templates'
  prefs: []
  type: TYPE_NORMAL
- en: This script demonstrates how to report SQL database content using an **HTML
    template**.
  prefs: []
  type: TYPE_NORMAL
- en: 'The example SQL database contains two tables:'
  prefs: []
  type: TYPE_NORMAL
- en: Table “films” contains one row per film with the fields **“title”**, **“director”**
    and (release) **“year”**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Table “actors” contains one row per actor and film title (fields (actor) **“name”**
    and (film) **“title”**).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The story DOM consists of a template for one film, which reports film data together
    with a list of casted actors.
  prefs: []
  type: TYPE_NORMAL
- en: '**Files:**'
  prefs: []
  type: TYPE_NORMAL
- en: '`docs/samples/filmfestival-sql.py`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`docs/samples/filmfestival-sql.db`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <details><summary>See recipe</summary></details>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '## How to Integrate with Existing PDFs'
  prefs: []
  type: TYPE_NORMAL
- en: Because a [DocumentWriter](document-writer-class.html#documentwriter) can only
    write to a new file, stories cannot be placed on existing pages. This script demonstrates
    a circumvention of this restriction.
  prefs: []
  type: TYPE_NORMAL
- en: The basic idea is letting [DocumentWriter](document-writer-class.html#documentwriter)
    output to a PDF in memory. Once the story has finished, we re-open this memory
    PDF and put its pages to desired locations on **existing** pages via method [`Page.show_pdf_page()`](page.html#Page.show_pdf_page
    "Page.show_pdf_page").
  prefs: []
  type: TYPE_NORMAL
- en: '**Files:**'
  prefs: []
  type: TYPE_NORMAL
- en: '`docs/samples/showpdf-page.py`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <details><summary>See recipe</summary></details>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '## How to Make Multi-Columned Layouts and Access Fonts from Package [pymupdf-fonts](https://github.com/pymupdf/pymupdf-fonts)'
  prefs: []
  type: TYPE_NORMAL
- en: This script outputs an article (taken from Wikipedia) that contains text and
    multiple images and uses a 2-column page layout.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, two “Ubuntu” font families from package [pymupdf-fonts](https://github.com/pymupdf/pymupdf-fonts)
    are used instead of defaulting to Base-14 fonts.
  prefs: []
  type: TYPE_NORMAL
- en: Yet another feature used here is that all data – the images and the article
    HTML – are jointly stored in a ZIP file.
  prefs: []
  type: TYPE_NORMAL
- en: '**Files:**'
  prefs: []
  type: TYPE_NORMAL
- en: '`docs/samples/quickfox.py`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`docs/samples/quickfox.zip`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <details><summary>See recipe</summary></details>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '## How to Make a Layout which Wraps Around a Predefined “no go area” Layout'
  prefs: []
  type: TYPE_NORMAL
- en: This is a demo script using PyMuPDF’s Story class to output text as a PDF with
    a two-column page layout.
  prefs: []
  type: TYPE_NORMAL
- en: 'The script demonstrates the following features:'
  prefs: []
  type: TYPE_NORMAL
- en: Layout text around images of an existing (“target”) PDF.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Based on a few global parameters, areas on each page are identified, that can
    be used to receive text layouted by a Story.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These global parameters are not stored anywhere in the target PDF and must
    therefore be provided in some way:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The width of the border(s) on each page.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The fontsize to use for text. This value determines whether the provided text
    will fit in the empty spaces of the (fixed) pages of target PDF. It cannot be
    predicted in any way. The script ends with an exception if target PDF has not
    enough pages, and prints a warning message if not all pages receive at least some
    text. In both cases, the FONTSIZE value can be changed (a float value).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Use of a 2-column page layout for the text.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The layout creates a temporary (memory) PDF. Its produced page content (the
    text) is used to overlay the corresponding target page. If text requires more
    pages than are available in target PDF, an exception is raised. If not all target
    pages receive at least some text, a warning is printed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The script reads “image-no-go.pdf” in its own folder. This is the “target” PDF.
    It contains 2 pages with each 2 images (from the original article), which are
    positioned at places that create a broad overall test coverage. Otherwise the
    pages are empty.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The script produces “quickfox-image-no-go.pdf” which contains the original pages
    and image positions, but with the original article text laid out around them.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Files:**'
  prefs: []
  type: TYPE_NORMAL
- en: '`docs/samples/quickfox-image-no-go.py`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`docs/samples/quickfox-image-no-go.pdf`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`docs/samples/quickfox.zip`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <details><summary>See recipe</summary></details>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '## How to Output an HTML Table'
  prefs: []
  type: TYPE_NORMAL
- en: 'Outputting HTML tables is supported as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Flat table layouts are supported (“rows x columns”), no support of the “colspan”
    / “rowspan” attributes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Table header tag *th* supports attribute “scope” with values “row” or “col”.
    Applicable text will be bold by default.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Column widths are computed automatically based on column content. They cannot
    be directly set.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Table **cells may contain images** which will be considered in the column width
    calculation magic.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Row heights are computed automatically based on row content - leading to multi-line
    rows where needed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The potentially multiple lines of a table row will always be kept together on
    one page (respectively “where” rectangle) and not be splitted.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Table header rows are only **shown on the first page / “where” rectangle.**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The “style” attribute is ignored when given directly in HTML table elements.
    Styling for a table and its elements must happen separately, in CSS source or
    within the *style* tag.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Styling for *tr* elements is not supported and ignored. Therefore, a table-wide
    grid or alternating row background colors are not supported. One of the following
    example scripts however shows an easy way to deal with this limitation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Files:**'
  prefs: []
  type: TYPE_NORMAL
- en: '`docs/samples/table01.py` This script reflects basic features.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <details><summary>See recipe</summary></details>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '`docs/samples/national-capitals.py` Advanced script extending table output
    options using simple additional code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multi-page output simulating **repeating header rows**
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Alternating table row background colors
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Table rows and columns delimited by gridlines
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Table rows dynamically generated / filled with data from an SQL database
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: <details><summary>See recipe</summary></details>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '## How to Create a Simple Grid Layout'
  prefs: []
  type: TYPE_NORMAL
- en: By creating a sequence of [Story](story-class.html#story) objects within a grid
    created via the [make_table](functions.html#functions-make-table) function a developer
    can create grid layouts as required.
  prefs: []
  type: TYPE_NORMAL
- en: '**Files:**'
  prefs: []
  type: TYPE_NORMAL
- en: '`docs/samples/simple-grid.py`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <details><summary>See recipe</summary></details>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '## How to Generate a Table of Contents'
  prefs: []
  type: TYPE_NORMAL
- en: This script lists the source code of all Python scripts that live in the script’s
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: '**Files:**'
  prefs: []
  type: TYPE_NORMAL
- en: '`docs/samples/code-printer.py`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <details><summary>See recipe</summary></details>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'It features the following capabilities:'
  prefs: []
  type: TYPE_NORMAL
- en: Automatic generation of a Table of Contents (TOC) on separately numbered pages
    at the start of the document - using a specialized [Story](story-class.html#story).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Use of 3 separate [Story](story-class.html#story) objects per page: header
    story, footer story and the story for printing the Python sources.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The page **footer is automatically changed** to show the name of the current
    Python file.
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: Use of [`Story.element_positions()`](story-class.html#Story.element_positions
    "Story.element_positions") to collect the data for the TOC and for the dynamic
    adjustment of page footers. This is an example of a **bidirectional communication**
    between the story output process and the script.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The main PDF with the Python sources is being written to memory by its [DocumentWriter](document-writer-class.html#documentwriter).
    Another [Story](story-class.html#story) / [DocumentWriter](document-writer-class.html#documentwriter)
    pair is then used to create a (memory) PDF for the TOC pages. Finally, both these
    PDFs are joined and the result stored to disk.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '## How to Display a List from JSON Data'
  prefs: []
  type: TYPE_NORMAL
- en: This example takes some JSON data input which it uses to populate a [Story](story-class.html#story).
    It also contains some visual text formatting and shows how to add links.
  prefs: []
  type: TYPE_NORMAL
- en: '**Files:**'
  prefs: []
  type: TYPE_NORMAL
- en: '`docs/samples/json-example.py`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <details><summary>See recipe</summary></details>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '## Using the Alternative `Story.write*()` functions'
  prefs: []
  type: TYPE_NORMAL
- en: The `Story.write*()` functions provide a different way to use the [Story](story-class.html#story)
    functionality, removing the need for calling code to implement a loop that calls
    [`Story.place()`](story-class.html#Story.place "Story.place") and [`Story.draw()`](story-class.html#Story.draw
    "Story.draw") etc, at the expense of having to provide at least a `rectfn()` callback.
  prefs: []
  type: TYPE_NORMAL
- en: '### How to do Basic Layout with [`Story.write()`](story-class.html#Story.write
    "Story.write")'
  prefs: []
  type: TYPE_NORMAL
- en: This script lays out multiple copies of its own source code, into four rectangles
    per page.
  prefs: []
  type: TYPE_NORMAL
- en: '**Files:**'
  prefs: []
  type: TYPE_NORMAL
- en: '`docs/samples/story-write.py`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <details><summary>See recipe</summary></details>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '* * *  ### How to do Iterative Layout for a Table of Contents with [`Story.write_stabilized()`](story-class.html#Story.write_stabilized
    "Story.write_stabilized")'
  prefs: []
  type: TYPE_NORMAL
- en: This script creates html content dynamically, adding a contents section based
    on ElementPosition items that have non-zero `.heading` values.
  prefs: []
  type: TYPE_NORMAL
- en: The contents section is at the start of the document, so modifications to the
    contents can change page numbers in the rest of the document, which in turn can
    cause page numbers in the contents section to be incorrect.
  prefs: []
  type: TYPE_NORMAL
- en: So the script uses [`Story.write_stabilized()`](story-class.html#Story.write_stabilized
    "Story.write_stabilized") to repeatedly lay things out until things are stable.
  prefs: []
  type: TYPE_NORMAL
- en: '**Files:**'
  prefs: []
  type: TYPE_NORMAL
- en: '`docs/samples/story-write-stabilized.py`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <details><summary>See recipe</summary></details>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '* * *  ### How to do Iterative Layout and Create PDF Links with `Story.write_stabilized_links()`'
  prefs: []
  type: TYPE_NORMAL
- en: This script is similar to the one described in “How to use [`Story.write_stabilized()`](story-class.html#Story.write_stabilized
    "Story.write_stabilized")” above, except that the generated PDF also contains
    links that correspond to the internal links in the original html.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is done by using `Story.write_stabilized_links()`; this is slightly different
    from [`Story.write_stabilized()`](story-class.html#Story.write_stabilized "Story.write_stabilized"):'
  prefs: []
  type: TYPE_NORMAL
- en: It does not take a [DocumentWriter](document-writer-class.html#documentwriter)
    `writer` arg.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It returns a PDF [Document](document.html#document) instance.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The reasons for this are a little involved; for example a [DocumentWriter](document-writer-class.html#documentwriter)
    is not necessarily a PDF writer, so doesn’t really work in a PDF-specific API.]'
  prefs: []
  type: TYPE_NORMAL
- en: '**Files:**'
  prefs: []
  type: TYPE_NORMAL
- en: '`docs/samples/story-write-stabilized-links.py`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <details><summary>See recipe</summary></details>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Footnotes
  prefs: []
  type: TYPE_NORMAL
- en: Do you have any feedback on this page?
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: This software is provided AS-IS with no warranty, either express or implied.
    This software is distributed under license and may not be copied, modified or
    distributed except as expressly authorized under the terms of that license. Refer
    to licensing information at [artifex.com](https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link)
    or contact Artifex Software Inc., 39 Mesa Street, Suite 108A, San Francisco CA
    94129, United States for further information.
  prefs: []
  type: TYPE_NORMAL
- en: This documentation covers all versions up to 1.24.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[![Discord logo](../Images/66cbb5081103a580193aa66c87b90d9a.png)](https://discord.gg/TSpYGBW4eq)
    ### How to do Basic Layout with [`Story.write()`](story-class.html#Story.write
    "Story.write")'
  prefs: []
  type: TYPE_NORMAL
- en: This script lays out multiple copies of its own source code, into four rectangles
    per page.
  prefs: []
  type: TYPE_NORMAL
- en: '**Files:**'
  prefs: []
  type: TYPE_NORMAL
- en: '`docs/samples/story-write.py`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <details><summary>See recipe</summary></details>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '### How to do Iterative Layout for a Table of Contents with [`Story.write_stabilized()`](story-class.html#Story.write_stabilized
    "Story.write_stabilized")'
  prefs: []
  type: TYPE_NORMAL
- en: This script creates html content dynamically, adding a contents section based
    on ElementPosition items that have non-zero `.heading` values.
  prefs: []
  type: TYPE_NORMAL
- en: The contents section is at the start of the document, so modifications to the
    contents can change page numbers in the rest of the document, which in turn can
    cause page numbers in the contents section to be incorrect.
  prefs: []
  type: TYPE_NORMAL
- en: So the script uses [`Story.write_stabilized()`](story-class.html#Story.write_stabilized
    "Story.write_stabilized") to repeatedly lay things out until things are stable.
  prefs: []
  type: TYPE_NORMAL
- en: '**Files:**'
  prefs: []
  type: TYPE_NORMAL
- en: '`docs/samples/story-write-stabilized.py`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <details><summary>See recipe</summary></details>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '### How to do Iterative Layout and Create PDF Links with `Story.write_stabilized_links()`'
  prefs: []
  type: TYPE_NORMAL
- en: This script is similar to the one described in “How to use [`Story.write_stabilized()`](story-class.html#Story.write_stabilized
    "Story.write_stabilized")” above, except that the generated PDF also contains
    links that correspond to the internal links in the original html.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is done by using `Story.write_stabilized_links()`; this is slightly different
    from [`Story.write_stabilized()`](story-class.html#Story.write_stabilized "Story.write_stabilized"):'
  prefs: []
  type: TYPE_NORMAL
- en: It does not take a [DocumentWriter](document-writer-class.html#documentwriter)
    `writer` arg.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It returns a PDF [Document](document.html#document) instance.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The reasons for this are a little involved; for example a [DocumentWriter](document-writer-class.html#documentwriter)
    is not necessarily a PDF writer, so doesn’t really work in a PDF-specific API.]'
  prefs: []
  type: TYPE_NORMAL
- en: '**Files:**'
  prefs: []
  type: TYPE_NORMAL
- en: '`docs/samples/story-write-stabilized-links.py`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <details><summary>See recipe</summary></details>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Footnotes
  prefs: []
  type: TYPE_NORMAL
- en: Do you have any feedback on this page?
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: This software is provided AS-IS with no warranty, either express or implied.
    This software is distributed under license and may not be copied, modified or
    distributed except as expressly authorized under the terms of that license. Refer
    to licensing information at [artifex.com](https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link)
    or contact Artifex Software Inc., 39 Mesa Street, Suite 108A, San Francisco CA
    94129, United States for further information.
  prefs: []
  type: TYPE_NORMAL
- en: This documentation covers all versions up to 1.24.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[![Discord logo](../Images/66cbb5081103a580193aa66c87b90d9a.png)](https://discord.gg/TSpYGBW4eq)'
  prefs: []
  type: TYPE_NORMAL
