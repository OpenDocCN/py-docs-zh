- en: SQL Datatype Objects
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL 数据类型对象
- en: 原文：[https://docs.sqlalchemy.org/en/20/core/types.html](https://docs.sqlalchemy.org/en/20/core/types.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/core/types.html](https://docs.sqlalchemy.org/en/20/core/types.html)
- en: '*   [The Type Hierarchy](type_basics.html)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*   [类型层次结构](type_basics.html)'
- en: '[The “CamelCase” datatypes](type_basics.html#the-camelcase-datatypes)'
  id: totrans-3
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“驼峰式”数据类型](type_basics.html#the-camelcase-datatypes)'
- en: '[The “UPPERCASE” datatypes](type_basics.html#the-uppercase-datatypes)'
  id: totrans-4
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“大写”数据类型](type_basics.html#the-uppercase-datatypes)'
- en: '[Backend-specific “UPPERCASE” datatypes](type_basics.html#backend-specific-uppercase-datatypes)'
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[特定后端的“大写”数据类型](type_basics.html#backend-specific-uppercase-datatypes)'
- en: '[Using “UPPERCASE” and Backend-specific types for multiple backends](type_basics.html#using-uppercase-and-backend-specific-types-for-multiple-backends)'
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在多个后端使用“大写”和特定后端类型](type_basics.html#using-uppercase-and-backend-specific-types-for-multiple-backends)'
- en: '[Generic “CamelCase” Types](type_basics.html#generic-camelcase-types)'
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[通用“驼峰式”类型](type_basics.html#generic-camelcase-types)'
- en: '[`BigInteger`](type_basics.html#sqlalchemy.types.BigInteger)'
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`BigInteger`](type_basics.html#sqlalchemy.types.BigInteger)'
- en: '[`Boolean`](type_basics.html#sqlalchemy.types.Boolean)'
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Boolean`](type_basics.html#sqlalchemy.types.Boolean)'
- en: '[`Date`](type_basics.html#sqlalchemy.types.Date)'
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Date`](type_basics.html#sqlalchemy.types.Date)'
- en: '[`DateTime`](type_basics.html#sqlalchemy.types.DateTime)'
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`DateTime`](type_basics.html#sqlalchemy.types.DateTime)'
- en: '[`Enum`](type_basics.html#sqlalchemy.types.Enum)'
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Enum`](type_basics.html#sqlalchemy.types.Enum)'
- en: '[`Double`](type_basics.html#sqlalchemy.types.Double)'
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Double`](type_basics.html#sqlalchemy.types.Double)'
- en: '[`Float`](type_basics.html#sqlalchemy.types.Float)'
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Float`](type_basics.html#sqlalchemy.types.Float)'
- en: '[`Integer`](type_basics.html#sqlalchemy.types.Integer)'
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Integer`](type_basics.html#sqlalchemy.types.Integer)'
- en: '[`Interval`](type_basics.html#sqlalchemy.types.Interval)'
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Interval`](type_basics.html#sqlalchemy.types.Interval)'
- en: '[`LargeBinary`](type_basics.html#sqlalchemy.types.LargeBinary)'
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`LargeBinary`](type_basics.html#sqlalchemy.types.LargeBinary)'
- en: '[`MatchType`](type_basics.html#sqlalchemy.types.MatchType)'
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`MatchType`](type_basics.html#sqlalchemy.types.MatchType)'
- en: '[`Numeric`](type_basics.html#sqlalchemy.types.Numeric)'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Numeric`](type_basics.html#sqlalchemy.types.Numeric)'
- en: '[`PickleType`](type_basics.html#sqlalchemy.types.PickleType)'
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`PickleType`](type_basics.html#sqlalchemy.types.PickleType)'
- en: '[`SchemaType`](type_basics.html#sqlalchemy.types.SchemaType)'
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`SchemaType`](type_basics.html#sqlalchemy.types.SchemaType)'
- en: '[`SmallInteger`](type_basics.html#sqlalchemy.types.SmallInteger)'
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`SmallInteger`](type_basics.html#sqlalchemy.types.SmallInteger)'
- en: '[`String`](type_basics.html#sqlalchemy.types.String)'
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`String`](type_basics.html#sqlalchemy.types.String)'
- en: '[`Text`](type_basics.html#sqlalchemy.types.Text)'
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Text`](type_basics.html#sqlalchemy.types.Text)'
- en: '[`Time`](type_basics.html#sqlalchemy.types.Time)'
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Time`](type_basics.html#sqlalchemy.types.Time)'
- en: '[`Unicode`](type_basics.html#sqlalchemy.types.Unicode)'
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Unicode`](type_basics.html#sqlalchemy.types.Unicode)'
- en: '[`UnicodeText`](type_basics.html#sqlalchemy.types.UnicodeText)'
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`UnicodeText`](type_basics.html#sqlalchemy.types.UnicodeText)'
- en: '[`Uuid`](type_basics.html#sqlalchemy.types.Uuid)'
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Uuid`](type_basics.html#sqlalchemy.types.Uuid)'
- en: '[SQL Standard and Multiple Vendor “UPPERCASE” Types](type_basics.html#sql-standard-and-multiple-vendor-uppercase-types)'
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SQL 标准和多厂商“大写”类型](type_basics.html#sql-standard-and-multiple-vendor-uppercase-types)'
- en: '[`ARRAY`](type_basics.html#sqlalchemy.types.ARRAY)'
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ARRAY`](type_basics.html#sqlalchemy.types.ARRAY)'
- en: '[`BIGINT`](type_basics.html#sqlalchemy.types.BIGINT)'
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`BIGINT`](type_basics.html#sqlalchemy.types.BIGINT)'
- en: '[`BINARY`](type_basics.html#sqlalchemy.types.BINARY)'
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`BINARY`](type_basics.html#sqlalchemy.types.BINARY)'
- en: '[`BLOB`](type_basics.html#sqlalchemy.types.BLOB)'
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`BLOB`](type_basics.html#sqlalchemy.types.BLOB)'
- en: '[`BOOLEAN`](type_basics.html#sqlalchemy.types.BOOLEAN)'
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`BOOLEAN`](type_basics.html#sqlalchemy.types.BOOLEAN)'
- en: '[`CHAR`](type_basics.html#sqlalchemy.types.CHAR)'
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`CHAR`](type_basics.html#sqlalchemy.types.CHAR)'
- en: '[`CLOB`](type_basics.html#sqlalchemy.types.CLOB)'
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`CLOB`](type_basics.html#sqlalchemy.types.CLOB)'
- en: '[`DATE`](type_basics.html#sqlalchemy.types.DATE)'
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`DATE`](type_basics.html#sqlalchemy.types.DATE)'
- en: '[`DATETIME`](type_basics.html#sqlalchemy.types.DATETIME)'
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`DATETIME`](type_basics.html#sqlalchemy.types.DATETIME)'
- en: '[`DECIMAL`](type_basics.html#sqlalchemy.types.DECIMAL)'
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`DECIMAL`](type_basics.html#sqlalchemy.types.DECIMAL)'
- en: '[`DOUBLE`](type_basics.html#sqlalchemy.types.DOUBLE)'
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`DOUBLE`](type_basics.html#sqlalchemy.types.DOUBLE)'
- en: '[`DOUBLE_PRECISION`](type_basics.html#sqlalchemy.types.DOUBLE_PRECISION)'
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`DOUBLE_PRECISION`](type_basics.html#sqlalchemy.types.DOUBLE_PRECISION)'
- en: '[`FLOAT`](type_basics.html#sqlalchemy.types.FLOAT)'
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`FLOAT`](type_basics.html#sqlalchemy.types.FLOAT)'
- en: '[`INT`](type_basics.html#sqlalchemy.types.INT)'
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`INT`](type_basics.html#sqlalchemy.types.INT)'
- en: '[`JSON`](type_basics.html#sqlalchemy.types.JSON)'
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`JSON`](type_basics.html#sqlalchemy.types.JSON)'
- en: '[`INTEGER`](type_basics.html#sqlalchemy.types.INTEGER)'
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`INTEGER`](type_basics.html#sqlalchemy.types.INTEGER)'
- en: '[`NCHAR`](type_basics.html#sqlalchemy.types.NCHAR)'
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`NCHAR`](type_basics.html#sqlalchemy.types.NCHAR)'
- en: '[`NVARCHAR`](type_basics.html#sqlalchemy.types.NVARCHAR)'
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`NVARCHAR`](type_basics.html#sqlalchemy.types.NVARCHAR)'
- en: '[`NUMERIC`](type_basics.html#sqlalchemy.types.NUMERIC)'
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`NUMERIC`](type_basics.html#sqlalchemy.types.NUMERIC)'
- en: '[`REAL`](type_basics.html#sqlalchemy.types.REAL)'
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`REAL`](type_basics.html#sqlalchemy.types.REAL)'
- en: '[`SMALLINT`](type_basics.html#sqlalchemy.types.SMALLINT)'
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`SMALLINT`](type_basics.html#sqlalchemy.types.SMALLINT)'
- en: '[`TEXT`](type_basics.html#sqlalchemy.types.TEXT)'
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`TEXT`](type_basics.html#sqlalchemy.types.TEXT)'
- en: '[`TIME`](type_basics.html#sqlalchemy.types.TIME)'
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`TIME`](type_basics.html#sqlalchemy.types.TIME)'
- en: '[`TIMESTAMP`](type_basics.html#sqlalchemy.types.TIMESTAMP)'
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`TIMESTAMP`](type_basics.html#sqlalchemy.types.TIMESTAMP)'
- en: '[`UUID`](type_basics.html#sqlalchemy.types.UUID)'
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`UUID`](type_basics.html#sqlalchemy.types.UUID)'
- en: '[`VARBINARY`](type_basics.html#sqlalchemy.types.VARBINARY)'
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`VARBINARY`](type_basics.html#sqlalchemy.types.VARBINARY)'
- en: '[`VARCHAR`](type_basics.html#sqlalchemy.types.VARCHAR)'
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`VARCHAR`](type_basics.html#sqlalchemy.types.VARCHAR)'
- en: '[Custom Types](custom_types.html)'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[自定义类型](custom_types.html)'
- en: '[Overriding Type Compilation](custom_types.html#overriding-type-compilation)'
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[覆盖类型编译](custom_types.html#overriding-type-compilation)'
- en: '[Augmenting Existing Types](custom_types.html#augmenting-existing-types)'
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[增强现有类型](custom_types.html#augmenting-existing-types)'
- en: '[`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator)'
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`TypeDecorator`](custom_types.html#sqlalchemy.types.TypeDecorator)'
- en: '[TypeDecorator Recipes](custom_types.html#typedecorator-recipes)'
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[类型修饰器示例](custom_types.html#typedecorator-recipes)'
- en: '[Coercing Encoded Strings to Unicode](custom_types.html#coercing-encoded-strings-to-unicode)'
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[将编码字符串强制转换为 Unicode](custom_types.html#coercing-encoded-strings-to-unicode)'
- en: '[Rounding Numerics](custom_types.html#rounding-numerics)'
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数值四舍五入](custom_types.html#rounding-numerics)'
- en: '[Store Timezone Aware Timestamps as Timezone Naive UTC](custom_types.html#store-timezone-aware-timestamps-as-timezone-naive-utc)'
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[将时区感知时间戳存储为时区无关的 UTC](custom_types.html#store-timezone-aware-timestamps-as-timezone-naive-utc)'
- en: '[Backend-agnostic GUID Type](custom_types.html#backend-agnostic-guid-type)'
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[与后端无关的 GUID 类型](custom_types.html#backend-agnostic-guid-type)'
- en: '[Marshal JSON Strings](custom_types.html#marshal-json-strings)'
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[编组 JSON 字符串](custom_types.html#marshal-json-strings)'
- en: '[Applying SQL-level Bind/Result Processing](custom_types.html#applying-sql-level-bind-result-processing)'
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[应用 SQL 级别的绑定/结果处理](custom_types.html#applying-sql-level-bind-result-processing)'
- en: '[Redefining and Creating New Operators](custom_types.html#redefining-and-creating-new-operators)'
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[重新定义和创建新操作符](custom_types.html#redefining-and-creating-new-operators)'
- en: '[Creating New Types](custom_types.html#creating-new-types)'
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[创建新类型](custom_types.html#creating-new-types)'
- en: '[`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType)'
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`UserDefinedType`](custom_types.html#sqlalchemy.types.UserDefinedType)'
- en: '[Working with Custom Types and Reflection](custom_types.html#working-with-custom-types-and-reflection)'
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用自定义类型和反射](custom_types.html#working-with-custom-types-and-reflection)'
- en: '[Base Type API](type_api.html)'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[基础类型 API](type_api.html)'
- en: '[`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine)'
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine)'
- en: '[`TypeEngine.Comparator`](type_api.html#sqlalchemy.types.TypeEngine.Comparator)'
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`TypeEngine.Comparator`](type_api.html#sqlalchemy.types.TypeEngine.Comparator)'
- en: '[`TypeEngine.adapt()`](type_api.html#sqlalchemy.types.TypeEngine.adapt)'
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`TypeEngine.adapt()`](type_api.html#sqlalchemy.types.TypeEngine.adapt)'
- en: '[`TypeEngine.as_generic()`](type_api.html#sqlalchemy.types.TypeEngine.as_generic)'
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`TypeEngine.as_generic()`](type_api.html#sqlalchemy.types.TypeEngine.as_generic)'
- en: '[`TypeEngine.bind_expression()`](type_api.html#sqlalchemy.types.TypeEngine.bind_expression)'
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`TypeEngine.bind_expression()`](type_api.html#sqlalchemy.types.TypeEngine.bind_expression)'
- en: '[`TypeEngine.bind_processor()`](type_api.html#sqlalchemy.types.TypeEngine.bind_processor)'
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`TypeEngine.bind_processor()`](type_api.html#sqlalchemy.types.TypeEngine.bind_processor)'
- en: '[`TypeEngine.coerce_compared_value()`](type_api.html#sqlalchemy.types.TypeEngine.coerce_compared_value)'
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`TypeEngine.coerce_compared_value()`](type_api.html#sqlalchemy.types.TypeEngine.coerce_compared_value)'
- en: '[`TypeEngine.column_expression()`](type_api.html#sqlalchemy.types.TypeEngine.column_expression)'
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`TypeEngine.column_expression()`](type_api.html#sqlalchemy.types.TypeEngine.column_expression)'
- en: '[`TypeEngine.comparator_factory`](type_api.html#sqlalchemy.types.TypeEngine.comparator_factory)'
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`TypeEngine.comparator_factory`](type_api.html#sqlalchemy.types.TypeEngine.comparator_factory)'
- en: '[`TypeEngine.compare_values()`](type_api.html#sqlalchemy.types.TypeEngine.compare_values)'
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`TypeEngine.compare_values()`](type_api.html#sqlalchemy.types.TypeEngine.compare_values)'
- en: '[`TypeEngine.compile()`](type_api.html#sqlalchemy.types.TypeEngine.compile)'
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`TypeEngine.compile()`](type_api.html#sqlalchemy.types.TypeEngine.compile)'
- en: '[`TypeEngine.dialect_impl()`](type_api.html#sqlalchemy.types.TypeEngine.dialect_impl)'
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`TypeEngine.dialect_impl()`](type_api.html#sqlalchemy.types.TypeEngine.dialect_impl)'
- en: '[`TypeEngine.evaluates_none()`](type_api.html#sqlalchemy.types.TypeEngine.evaluates_none)'
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`TypeEngine.evaluates_none()`](type_api.html#sqlalchemy.types.TypeEngine.evaluates_none)'
- en: '[`TypeEngine.get_dbapi_type()`](type_api.html#sqlalchemy.types.TypeEngine.get_dbapi_type)'
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`TypeEngine.get_dbapi_type()`](type_api.html#sqlalchemy.types.TypeEngine.get_dbapi_type)'
- en: '[`TypeEngine.hashable`](type_api.html#sqlalchemy.types.TypeEngine.hashable)'
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`TypeEngine.hashable`](type_api.html#sqlalchemy.types.TypeEngine.hashable)'
- en: '[`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor)'
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`TypeEngine.literal_processor()`](type_api.html#sqlalchemy.types.TypeEngine.literal_processor)'
- en: '[`TypeEngine.python_type`](type_api.html#sqlalchemy.types.TypeEngine.python_type)'
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`TypeEngine.python_type`](type_api.html#sqlalchemy.types.TypeEngine.python_type)'
- en: '[`TypeEngine.render_bind_cast`](type_api.html#sqlalchemy.types.TypeEngine.render_bind_cast)'
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`TypeEngine.render_bind_cast`](type_api.html#sqlalchemy.types.TypeEngine.render_bind_cast)'
- en: '[`TypeEngine.render_literal_cast`](type_api.html#sqlalchemy.types.TypeEngine.render_literal_cast)'
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`TypeEngine.render_literal_cast`](type_api.html#sqlalchemy.types.TypeEngine.render_literal_cast)'
- en: '[`TypeEngine.result_processor()`](type_api.html#sqlalchemy.types.TypeEngine.result_processor)'
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`TypeEngine.result_processor()`](type_api.html#sqlalchemy.types.TypeEngine.result_processor)'
- en: '[`TypeEngine.should_evaluate_none`](type_api.html#sqlalchemy.types.TypeEngine.should_evaluate_none)'
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`TypeEngine.should_evaluate_none`](type_api.html#sqlalchemy.types.TypeEngine.should_evaluate_none)'
- en: '[`TypeEngine.sort_key_function`](type_api.html#sqlalchemy.types.TypeEngine.sort_key_function)'
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`TypeEngine.sort_key_function`](type_api.html#sqlalchemy.types.TypeEngine.sort_key_function)'
- en: '[`TypeEngine.with_variant()`](type_api.html#sqlalchemy.types.TypeEngine.with_variant)'
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`TypeEngine.with_variant()`](type_api.html#sqlalchemy.types.TypeEngine.with_variant)'
- en: '[`Concatenable`](type_api.html#sqlalchemy.types.Concatenable)'
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Concatenable`](type_api.html#sqlalchemy.types.Concatenable)'
- en: '[`Concatenable.Comparator`](type_api.html#sqlalchemy.types.Concatenable.Comparator)'
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Concatenable.Comparator`](type_api.html#sqlalchemy.types.Concatenable.Comparator)'
- en: '[`Concatenable.comparator_factory`](type_api.html#sqlalchemy.types.Concatenable.comparator_factory)'
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Concatenable.comparator_factory`](type_api.html#sqlalchemy.types.Concatenable.comparator_factory)'
- en: '[`Indexable`](type_api.html#sqlalchemy.types.Indexable)'
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Indexable`](type_api.html#sqlalchemy.types.Indexable)'
- en: '[`Indexable.Comparator`](type_api.html#sqlalchemy.types.Indexable.Comparator)'
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Indexable.Comparator`](type_api.html#sqlalchemy.types.Indexable.Comparator)'
- en: '[`Indexable.comparator_factory`](type_api.html#sqlalchemy.types.Indexable.comparator_factory)'
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Indexable.comparator_factory`](type_api.html#sqlalchemy.types.Indexable.comparator_factory)'
- en: '[`NullType`](type_api.html#sqlalchemy.types.NullType)'
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`NullType`](type_api.html#sqlalchemy.types.NullType)'
- en: '[`ExternalType`](type_api.html#sqlalchemy.types.ExternalType)'
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ExternalType`](type_api.html#sqlalchemy.types.ExternalType)'
- en: '[`ExternalType.cache_ok`](type_api.html#sqlalchemy.types.ExternalType.cache_ok)'
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ExternalType.cache_ok`](type_api.html#sqlalchemy.types.ExternalType.cache_ok)'
- en: '[`Variant`](type_api.html#sqlalchemy.types.Variant)'
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Variant`](type_api.html#sqlalchemy.types.Variant)'
- en: '[`Variant.with_variant()`](type_api.html#sqlalchemy.types.Variant.with_variant)'
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Variant.with_variant()`](type_api.html#sqlalchemy.types.Variant.with_variant)'
