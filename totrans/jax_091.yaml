- en: jax.numpy module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[`jax.readthedocs.io/en/latest/jax.numpy.html`](https://jax.readthedocs.io/en/latest/jax.numpy.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Implements the NumPy API, using the primitives in `jax.lax`.
  prefs: []
  type: TYPE_NORMAL
- en: While JAX tries to follow the NumPy API as closely as possible, sometimes JAX
    cannot follow NumPy exactly.
  prefs: []
  type: TYPE_NORMAL
- en: Notably, since JAX arrays are immutable, NumPy APIs that mutate arrays in-place
    cannot be implemented in JAX. However, often JAX is able to provide an alternative
    API that is purely functional. For example, instead of in-place array updates
    (`x[i] = y`), JAX provides an alternative pure indexed update function `x.at[i].set(y)`
    (see `ndarray.at`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Relatedly, some NumPy functions often return views of arrays when possible (examples
    are `transpose()` and `reshape()`). JAX versions of such functions will return
    copies instead, although such are often optimized away by XLA when sequences of
    operations are compiled using `jax.jit()`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NumPy is very aggressive at promoting values to `float64` type. JAX sometimes
    is less aggressive about type promotion (See Type promotion semantics).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some NumPy routines have data-dependent output shapes (examples include `unique()`
    and `nonzero()`). Because the XLA compiler requires array shapes to be known at
    compile time, such operations are not compatible with JIT. For this reason, JAX
    adds an optional `size` argument to such functions which may be specified statically
    in order to use them with JIT.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nearly all applicable NumPy functions are implemented in the `jax.numpy` namespace;
    they are listed below.
  prefs: []
  type: TYPE_NORMAL
- en: '| `ndarray.at` | Helper property for index update functionality. |'
  prefs: []
  type: TYPE_TB
- en: '| `abs`(x, /) | Alias of `jax.numpy.absolute()`. |'
  prefs: []
  type: TYPE_TB
- en: '| `absolute`(x, /) | Calculate the absolute value element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| `acos`(x, /) | Trigonometric inverse cosine, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| `acosh`(x, /) | Inverse hyperbolic cosine, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| `add`(x1, x2, /) | Add arguments element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| `all`(a[, axis, out, keepdims, where]) | Test whether all array elements
    along a given axis evaluate to True. |'
  prefs: []
  type: TYPE_TB
- en: '| `allclose`(a, b[, rtol, atol, equal_nan]) | Returns True if two arrays are
    element-wise equal within a tolerance. |'
  prefs: []
  type: TYPE_TB
- en: '| `amax`(a[, axis, out, keepdims, initial, where]) | Return the maximum of
    an array or maximum along an axis. |'
  prefs: []
  type: TYPE_TB
- en: '| `amin`(a[, axis, out, keepdims, initial, where]) | Return the minimum of
    an array or minimum along an axis. |'
  prefs: []
  type: TYPE_TB
- en: '| `angle`(z[, deg]) | Return the angle of a complex valued number or array.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `any`(a[, axis, out, keepdims, where]) | Test whether any array element along
    a given axis evaluates to True. |'
  prefs: []
  type: TYPE_TB
- en: '| `append`(arr, values[, axis]) | Return a new array with values appended to
    the end of the original array. |'
  prefs: []
  type: TYPE_TB
- en: '| `apply_along_axis`(func1d, axis, arr, *args, ...) | Apply a function to 1-D
    slices along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| `apply_over_axes`(func, a, axes) | Apply a function repeatedly over multiple
    axes. |'
  prefs: []
  type: TYPE_TB
- en: '| `arange`(start[, stop, step, dtype]) | Return evenly spaced values within
    a given interval. |'
  prefs: []
  type: TYPE_TB
- en: '| `arccos`(x, /) | Trigonometric inverse cosine, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| `arccosh`(x, /) | Inverse hyperbolic cosine, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| `arcsin`(x, /) | Inverse sine, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| `arcsinh`(x, /) | Inverse hyperbolic sine element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| `arctan`(x, /) | Trigonometric inverse tangent, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| `arctan2`(x1, x2, /) | Element-wise arc tangent of `x1/x2` choosing the quadrant
    correctly. |'
  prefs: []
  type: TYPE_TB
- en: '| `arctanh`(x, /) | Inverse hyperbolic tangent element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| `argmax`(a[, axis, out, keepdims]) | Returns the indices of the maximum values
    along an axis. |'
  prefs: []
  type: TYPE_TB
- en: '| `argmin`(a[, axis, out, keepdims]) | Returns the indices of the minimum values
    along an axis. |'
  prefs: []
  type: TYPE_TB
- en: '| `argpartition`(a, kth[, axis]) | Returns indices that partially sort an array.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `argsort`(a[, axis, kind, order, stable, ...]) | Returns the indices that
    would sort an array. |'
  prefs: []
  type: TYPE_TB
- en: '| `argwhere`(a, *[, size, fill_value]) | Find the indices of nonzero array
    elements |'
  prefs: []
  type: TYPE_TB
- en: '| `around`(a[, decimals, out]) | Round an array to the given number of decimals.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `array`(object[, dtype, copy, order, ndmin]) | Create an array. |'
  prefs: []
  type: TYPE_TB
- en: '| `array_equal`(a1, a2[, equal_nan]) | True if two arrays have the same shape
    and elements, False otherwise. |'
  prefs: []
  type: TYPE_TB
- en: '| `array_equiv`(a1, a2) | Returns True if input arrays are shape consistent
    and all elements equal. |'
  prefs: []
  type: TYPE_TB
- en: '| `array_repr`(arr[, max_line_width, precision, ...]) | Return the string representation
    of an array. |'
  prefs: []
  type: TYPE_TB
- en: '| `array_split`(ary, indices_or_sections[, axis]) | Split an array into multiple
    sub-arrays. |'
  prefs: []
  type: TYPE_TB
- en: '| `array_str`(a[, max_line_width, precision, ...]) | Return a string representation
    of the data in an array. |'
  prefs: []
  type: TYPE_TB
- en: '| `asarray`(a[, dtype, order, copy]) | Convert the input to an array. |'
  prefs: []
  type: TYPE_TB
- en: '| `asin`(x, /) | Inverse sine, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| `asinh`(x, /) | Inverse hyperbolic sine element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| `astype`(x, dtype, /, *[, copy, device]) | Copies an array to a specified
    data type. |'
  prefs: []
  type: TYPE_TB
- en: '| `atan`(x, /) | Trigonometric inverse tangent, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| `atanh`(x, /) | Inverse hyperbolic tangent element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| `atan2`(x1, x2, /) | Element-wise arc tangent of `x1/x2` choosing the quadrant
    correctly. |'
  prefs: []
  type: TYPE_TB
- en: '| `atleast_1d`() | Convert inputs to arrays with at least one dimension. |'
  prefs: []
  type: TYPE_TB
- en: '| `atleast_2d`() | View inputs as arrays with at least two dimensions. |'
  prefs: []
  type: TYPE_TB
- en: '| `atleast_3d`() | View inputs as arrays with at least three dimensions. |'
  prefs: []
  type: TYPE_TB
- en: '| `average`() | Compute the weighted average along the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: '| `bartlett`(M) | Return the Bartlett window. |'
  prefs: []
  type: TYPE_TB
- en: '| `bincount`(x[, weights, minlength, length]) | Count the number of occurrences
    of each value in an integer array. |'
  prefs: []
  type: TYPE_TB
- en: '| `bitwise_and`(x1, x2, /) | Compute the bit-wise AND of two arrays element-wise.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `bitwise_count`(x, /) | Counts the number of 1 bits in the binary representation
    of the absolute value of each element of `x`. |'
  prefs: []
  type: TYPE_TB
- en: '| `bitwise_invert`(x, /) | Compute bit-wise inversion, or bit-wise NOT, element-wise.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `bitwise_left_shift`(x1, x2, /) | Shift the bits of an integer to the left.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `bitwise_not`(x, /) | Compute bit-wise inversion, or bit-wise NOT, element-wise.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `bitwise_or`(x1, x2, /) | Compute the bit-wise OR of two arrays element-wise.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `bitwise_right_shift`(x1, x2, /) | Shift the bits of an integer to the right.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `bitwise_xor`(x1, x2, /) | Compute the bit-wise XOR of two arrays element-wise.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `blackman`(M) | Return the Blackman window. |'
  prefs: []
  type: TYPE_TB
- en: '| `block`(arrays) | Assemble an nd-array from nested lists of blocks. |'
  prefs: []
  type: TYPE_TB
- en: '| `bool_` | alias of `bool` |'
  prefs: []
  type: TYPE_TB
- en: '| `broadcast_arrays`(*args) | Broadcast any number of arrays against each other.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `broadcast_shapes`() | Broadcast the input shapes into a single shape. |'
  prefs: []
  type: TYPE_TB
- en: '| `broadcast_to`(array, shape) | Broadcast an array to a new shape. |'
  prefs: []
  type: TYPE_TB
- en: '| `c_` | Concatenate slices, scalars and array-like objects along the last
    axis. |'
  prefs: []
  type: TYPE_TB
- en: '| `can_cast`(from_, to[, casting]) | Returns True if cast between data types
    can occur according to the casting rule. |'
  prefs: []
  type: TYPE_TB
- en: '| `cbrt`(x, /) | Return the cube-root of an array, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| `cdouble` | alias of `complex128` |'
  prefs: []
  type: TYPE_TB
- en: '| `ceil`(x, /) | Return the ceiling of the input, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| `character`() | Abstract base class of all character string scalar types.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `choose`(a, choices[, out, mode]) | Construct an array from an index array
    and a list of arrays to choose from. |'
  prefs: []
  type: TYPE_TB
- en: '| `clip`([x, min, max, a, a_min, a_max]) | Clip (limit) the values in an array.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `column_stack`(tup) | Stack 1-D arrays as columns into a 2-D array. |'
  prefs: []
  type: TYPE_TB
- en: '| `complex_` | alias of `complex128` |'
  prefs: []
  type: TYPE_TB
- en: '| `complex128`(x) |  |'
  prefs: []
  type: TYPE_TB
- en: '| `complex64`(x) |  |'
  prefs: []
  type: TYPE_TB
- en: '| `complexfloating`() | Abstract base class of all complex number scalar types
    that are made up of floating-point numbers. |'
  prefs: []
  type: TYPE_TB
- en: '| `ComplexWarning` | The warning raised when casting a complex dtype to a real
    dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| `compress`(condition, a[, axis, size, ...]) | Compress an array along a given
    axis using a boolean condition. |'
  prefs: []
  type: TYPE_TB
- en: '| `concat`(arrays, /, *[, axis]) | Join a sequence of arrays along an existing
    axis. |'
  prefs: []
  type: TYPE_TB
- en: '| `concatenate`(arrays[, axis, dtype]) | Join a sequence of arrays along an
    existing axis. |'
  prefs: []
  type: TYPE_TB
- en: '| `conj`(x, /) | Return the complex conjugate, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| `conjugate`(x, /) | Return the complex conjugate, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| `convolve`(a, v[, mode, precision, ...]) | Convolution of two one dimensional
    arrays. |'
  prefs: []
  type: TYPE_TB
- en: '| `copy`(a[, order]) | Return an array copy of the given object. |'
  prefs: []
  type: TYPE_TB
- en: '| `copysign`(x1, x2, /) | Change the sign of x1 to that of x2, element-wise.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `corrcoef`(x[, y, rowvar]) | Return Pearson product-moment correlation coefficients.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `correlate`(a, v[, mode, precision, ...]) | Correlation of two one dimensional
    arrays. |'
  prefs: []
  type: TYPE_TB
- en: '| `cos`(x, /) | Cosine element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| `cosh`(x, /) | Hyperbolic cosine, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| `count_nonzero`(a[, axis, keepdims]) | Counts the number of non-zero values
    in the array `a`. |'
  prefs: []
  type: TYPE_TB
- en: '| `cov`(m[, y, rowvar, bias, ddof, fweights, ...]) | Estimate a covariance
    matrix, given data and weights. |'
  prefs: []
  type: TYPE_TB
- en: '| `cross`(a, b[, axisa, axisb, axisc, axis]) | Return the cross product of
    two (arrays of) vectors. |'
  prefs: []
  type: TYPE_TB
- en: '| `csingle` | alias of `complex64` |'
  prefs: []
  type: TYPE_TB
- en: '| `cumprod`(a[, axis, dtype, out]) | Return the cumulative product of elements
    along a given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| `cumsum`(a[, axis, dtype, out]) | Return the cumulative sum of the elements
    along a given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| `cumulative_sum`(x, /, *[, axis, dtype, ...]) |  |'
  prefs: []
  type: TYPE_TB
- en: '| `deg2rad`(x, /) | Convert angles from degrees to radians. |'
  prefs: []
  type: TYPE_TB
- en: '| `degrees`(x, /) | Convert angles from radians to degrees. |'
  prefs: []
  type: TYPE_TB
- en: '| `delete`(arr, obj[, axis, assume_unique_indices]) | Delete entry or entries
    from an array. |'
  prefs: []
  type: TYPE_TB
- en: '| `diag`(v[, k]) | Extract a diagonal or construct a diagonal array. |'
  prefs: []
  type: TYPE_TB
- en: '| `diag_indices`(n[, ndim]) | Return the indices to access the main diagonal
    of an array. |'
  prefs: []
  type: TYPE_TB
- en: '| `diag_indices_from`(arr) | Return the indices to access the main diagonal
    of an n-dimensional array. |'
  prefs: []
  type: TYPE_TB
- en: '| `diagflat`(v[, k]) | Create a two-dimensional array with the flattened input
    as a diagonal. |'
  prefs: []
  type: TYPE_TB
- en: '| `diagonal`(a[, offset, axis1, axis2]) | Return specified diagonals. |'
  prefs: []
  type: TYPE_TB
- en: '| `diff`(a[, n, axis, prepend, append]) | Calculate the n-th discrete difference
    along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| `digitize`(x, bins[, right]) | Return the indices of the bins to which each
    value in input array belongs. |'
  prefs: []
  type: TYPE_TB
- en: '| `divide`(x1, x2, /) | Divide arguments element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| `divmod`(x1, x2, /) | Return element-wise quotient and remainder simultaneously.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `dot`(a, b, *[, precision, preferred_element_type]) | Compute the dot product
    of two arrays. |'
  prefs: []
  type: TYPE_TB
- en: '| `double` | alias of `float64` |'
  prefs: []
  type: TYPE_TB
- en: '| `dsplit`(ary, indices_or_sections) | Split array into multiple sub-arrays
    along the 3rd axis (depth). |'
  prefs: []
  type: TYPE_TB
- en: '| `dstack`(tup[, dtype]) | Stack arrays in sequence depth wise (along third
    axis). |'
  prefs: []
  type: TYPE_TB
- en: '| `dtype`(dtype[, align, copy]) | Create a data type object. |'
  prefs: []
  type: TYPE_TB
- en: '| `ediff1d`(ary[, to_end, to_begin]) | The differences between consecutive
    elements of an array. |'
  prefs: []
  type: TYPE_TB
- en: '| `einsum`() | Einstein summation |'
  prefs: []
  type: TYPE_TB
- en: '| `einsum_path`() | Evaluates the optimal contraction path without evaluating
    the einsum. |'
  prefs: []
  type: TYPE_TB
- en: '| `empty`(shape[, dtype, device]) | Return a new array of given shape and type,
    without initializing entries. |'
  prefs: []
  type: TYPE_TB
- en: '| `empty_like`(prototype[, dtype, shape, device]) | Return a new array with
    the same shape and type as a given array. |'
  prefs: []
  type: TYPE_TB
- en: '| `equal`(x1, x2, /) | Return (x1 == x2) element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| `exp`(x, /) | Calculate the exponential of all elements in the input array.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `exp2`(x, /) | Calculate 2**p for all p in the input array. |'
  prefs: []
  type: TYPE_TB
- en: '| `expand_dims`(a, axis) | Insert dimensions of length 1 into array |'
  prefs: []
  type: TYPE_TB
- en: '| `expm1`(x, /) | Calculate `exp(x) - 1` for all elements in the array. |'
  prefs: []
  type: TYPE_TB
- en: '| `extract`(condition, arr, *[, size, fill_value]) | Return the elements of
    an array that satisfy a condition. |'
  prefs: []
  type: TYPE_TB
- en: '| `eye`(N[, M, k, dtype]) | Return a 2-D array with ones on the diagonal and
    zeros elsewhere. |'
  prefs: []
  type: TYPE_TB
- en: '| `fabs`(x, /) | Compute the absolute values element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| `fill_diagonal`(a, val[, wrap, inplace]) | Fill the main diagonal of the
    given array of any dimensionality. |'
  prefs: []
  type: TYPE_TB
- en: '| `finfo`(dtype) | Machine limits for floating point types. |'
  prefs: []
  type: TYPE_TB
- en: '| `fix`(x[, out]) | Round to nearest integer towards zero. |'
  prefs: []
  type: TYPE_TB
- en: '| `flatnonzero`(a, *[, size, fill_value]) | Return indices of nonzero elements
    in a flattened array |'
  prefs: []
  type: TYPE_TB
- en: '| `flexible`() | Abstract base class of all scalar types without predefined
    length. |'
  prefs: []
  type: TYPE_TB
- en: '| `flip`(m[, axis]) | Reverse the order of elements of an array along the given
    axis. |'
  prefs: []
  type: TYPE_TB
- en: '| `fliplr`(m) | Reverse the order of elements of an array along axis 1. |'
  prefs: []
  type: TYPE_TB
- en: '| `flipud`(m) | Reverse the order of elements of an array along axis 0. |'
  prefs: []
  type: TYPE_TB
- en: '| `float_` | alias of `float64` |'
  prefs: []
  type: TYPE_TB
- en: '| `float_power`(x1, x2, /) | First array elements raised to powers from second
    array, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| `float16`(x) |  |'
  prefs: []
  type: TYPE_TB
- en: '| `float32`(x) |  |'
  prefs: []
  type: TYPE_TB
- en: '| `float64`(x) |  |'
  prefs: []
  type: TYPE_TB
- en: '| `floating`() | Abstract base class of all floating-point scalar types. |'
  prefs: []
  type: TYPE_TB
- en: '| `floor`(x, /) | Return the floor of the input, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| `floor_divide`(x1, x2, /) | Return the largest integer smaller or equal to
    the division of the inputs. |'
  prefs: []
  type: TYPE_TB
- en: '| `fmax`(x1, x2) | Element-wise maximum of array elements. |'
  prefs: []
  type: TYPE_TB
- en: '| `fmin`(x1, x2) | Element-wise minimum of array elements. |'
  prefs: []
  type: TYPE_TB
- en: '| `fmod`(x1, x2, /) | Returns the element-wise remainder of division. |'
  prefs: []
  type: TYPE_TB
- en: '| `frexp`(x, /) | Decompose the elements of x into mantissa and twos exponent.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `frombuffer`(buffer[, dtype, count, offset]) | Interpret a buffer as a 1-dimensional
    array. |'
  prefs: []
  type: TYPE_TB
- en: '| `fromfile`(*args, **kwargs) | Unimplemented JAX wrapper for jnp.fromfile.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `fromfunction`(function, shape, *[, dtype]) | Construct an array by executing
    a function over each coordinate. |'
  prefs: []
  type: TYPE_TB
- en: '| `fromiter`(*args, **kwargs) | Unimplemented JAX wrapper for jnp.fromiter.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `frompyfunc`(func, /, nin, nout, *[, identity]) | Create a JAX ufunc from
    an arbitrary JAX-compatible scalar function. |'
  prefs: []
  type: TYPE_TB
- en: '| `fromstring`(string[, dtype, count]) | A new 1-D array initialized from text
    data in a string. |'
  prefs: []
  type: TYPE_TB
- en: '| `from_dlpack`(x, /, *[, device, copy]) | Create a NumPy array from an object
    implementing the `__dlpack__` |'
  prefs: []
  type: TYPE_TB
- en: '| `full`(shape, fill_value[, dtype, device]) | Return a new array of given
    shape and type, filled with fill_value. |'
  prefs: []
  type: TYPE_TB
- en: '| `full_like`(a, fill_value[, dtype, shape, device]) | Return a full array
    with the same shape and type as a given array. |'
  prefs: []
  type: TYPE_TB
- en: '| `gcd`(x1, x2) | Returns the greatest common divisor of `&#124;x1&#124;` and
    `&#124;x2&#124;` |'
  prefs: []
  type: TYPE_TB
- en: '| `generic`() | Base class for numpy scalar types. |'
  prefs: []
  type: TYPE_TB
- en: '| `geomspace`(start, stop[, num, endpoint, ...]) | Return numbers spaced evenly
    on a log scale (a geometric progression). |'
  prefs: []
  type: TYPE_TB
- en: '| `get_printoptions`() | Return the current print options. |'
  prefs: []
  type: TYPE_TB
- en: '| `gradient`(f, *varargs[, axis, edge_order]) | Return the gradient of an N-dimensional
    array. |'
  prefs: []
  type: TYPE_TB
- en: '| `greater`(x1, x2, /) | Return the truth value of (x1 > x2) element-wise.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `greater_equal`(x1, x2, /) | Return the truth value of (x1 >= x2) element-wise.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `hamming`(M) | Return the Hamming window. |'
  prefs: []
  type: TYPE_TB
- en: '| `hanning`(M) | Return the Hanning window. |'
  prefs: []
  type: TYPE_TB
- en: '| `heaviside`(x1, x2, /) | Compute the Heaviside step function. |'
  prefs: []
  type: TYPE_TB
- en: '| `histogram`(a[, bins, range, weights, density]) | Compute the histogram of
    a dataset. |'
  prefs: []
  type: TYPE_TB
- en: '| `histogram_bin_edges`(a[, bins, range, weights]) | Function to calculate
    only the edges of the bins used by the histogram |'
  prefs: []
  type: TYPE_TB
- en: '| `histogram2d`(x, y[, bins, range, weights, ...]) | Compute the bi-dimensional
    histogram of two data samples. |'
  prefs: []
  type: TYPE_TB
- en: '| `histogramdd`(sample[, bins, range, weights, ...]) | Compute the multidimensional
    histogram of some data. |'
  prefs: []
  type: TYPE_TB
- en: '| `hsplit`(ary, indices_or_sections) | Split an array into multiple sub-arrays
    horizontally (column-wise). |'
  prefs: []
  type: TYPE_TB
- en: '| `hstack`(tup[, dtype]) | Stack arrays in sequence horizontally (column wise).
    |'
  prefs: []
  type: TYPE_TB
- en: '| `hypot`(x1, x2, /) | Given the "legs" of a right triangle, return its hypotenuse.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `i0` | Modified Bessel function of the first kind, order 0. |'
  prefs: []
  type: TYPE_TB
- en: '| `identity`(n[, dtype]) | Return the identity array. |'
  prefs: []
  type: TYPE_TB
- en: '| `iinfo`(int_type) |  |'
  prefs: []
  type: TYPE_TB
- en: '| `imag`(val, /) | Return the imaginary part of the complex argument. |'
  prefs: []
  type: TYPE_TB
- en: '| `index_exp` | A nicer way to build up index tuples for arrays. |'
  prefs: []
  type: TYPE_TB
- en: '| `indices`() | Return an array representing the indices of a grid. |'
  prefs: []
  type: TYPE_TB
- en: '| `inexact`() | Abstract base class of all numeric scalar types with a (potentially)
    inexact representation of the values in its range, such as floating-point numbers.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `inner`(a, b, *[, precision, ...]) | Compute the inner product of two arrays.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `insert`(arr, obj, values[, axis]) | Insert values along the given axis before
    the given indices. |'
  prefs: []
  type: TYPE_TB
- en: '| `int_` | alias of `int64` |'
  prefs: []
  type: TYPE_TB
- en: '| `int16`(x) |  |'
  prefs: []
  type: TYPE_TB
- en: '| `int32`(x) |  |'
  prefs: []
  type: TYPE_TB
- en: '| `int64`(x) |  |'
  prefs: []
  type: TYPE_TB
- en: '| `int8`(x) |  |'
  prefs: []
  type: TYPE_TB
- en: '| `integer`() | Abstract base class of all integer scalar types. |'
  prefs: []
  type: TYPE_TB
- en: '| `interp`(x, xp, fp[, left, right, period]) | One-dimensional linear interpolation
    for monotonically increasing sample points. |'
  prefs: []
  type: TYPE_TB
- en: '| `intersect1d`(ar1, ar2[, assume_unique, ...]) | Compute the set intersection
    of two 1D arrays. |'
  prefs: []
  type: TYPE_TB
- en: '| `invert`(x, /) | Compute bit-wise inversion, or bit-wise NOT, element-wise.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `isclose`(a, b[, rtol, atol, equal_nan]) | Returns a boolean array where
    two arrays are element-wise equal within a |'
  prefs: []
  type: TYPE_TB
- en: '| `iscomplex`(x) | Returns a bool array, where True if input element is complex.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `iscomplexobj`(x) | Check for a complex type or an array of complex numbers.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `isdtype`(dtype, kind) | Returns a boolean indicating whether a provided
    dtype is of a specified kind. |'
  prefs: []
  type: TYPE_TB
- en: '| `isfinite`(x, /) | Test element-wise for finiteness (not infinity and not
    Not a Number). |'
  prefs: []
  type: TYPE_TB
- en: '| `isin`(element, test_elements[, ...]) | Determine whether elements in `element`
    appear in `test_elements`. |'
  prefs: []
  type: TYPE_TB
- en: '| `isinf`(x, /) | Test element-wise for positive or negative infinity. |'
  prefs: []
  type: TYPE_TB
- en: '| `isnan`(x, /) | Test element-wise for NaN and return result as a boolean
    array. |'
  prefs: []
  type: TYPE_TB
- en: '| `isneginf`(x, /[, out]) | Test element-wise for negative infinity, return
    result as bool array. |'
  prefs: []
  type: TYPE_TB
- en: '| `isposinf`(x, /[, out]) | Test element-wise for positive infinity, return
    result as bool array. |'
  prefs: []
  type: TYPE_TB
- en: '| `isreal`(x) | Returns a bool array, where True if input element is real.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `isrealobj`(x) | Return True if x is a not complex type or an array of complex
    numbers. |'
  prefs: []
  type: TYPE_TB
- en: '| `isscalar`(element) | Returns True if the type of element is a scalar type.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `issubdtype`(arg1, arg2) | Returns True if first argument is a typecode lower/equal
    in type hierarchy. |'
  prefs: []
  type: TYPE_TB
- en: '| `iterable`(y) | Check whether or not an object can be iterated over. |'
  prefs: []
  type: TYPE_TB
- en: '| `ix_`(*args) | Return a multi-dimensional grid (open mesh) from N one-dimensional
    sequences. |'
  prefs: []
  type: TYPE_TB
- en: '| `kaiser`(M, beta) | Return the Kaiser window. |'
  prefs: []
  type: TYPE_TB
- en: '| `kron`(a, b) | Kronecker product of two arrays. |'
  prefs: []
  type: TYPE_TB
- en: '| `lcm`(x1, x2) | Returns the lowest common multiple of `&#124;x1&#124;` and
    `&#124;x2&#124;` |'
  prefs: []
  type: TYPE_TB
- en: '| `ldexp`(x1, x2, /) | Returns x1 * 2**x2, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| `left_shift`(x1, x2, /) | Shift the bits of an integer to the left. |'
  prefs: []
  type: TYPE_TB
- en: '| `less`(x1, x2, /) | Return the truth value of (x1 < x2) element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| `less_equal`(x1, x2, /) | Return the truth value of (x1 <= x2) element-wise.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `lexsort`(keys[, axis]) | Perform an indirect stable sort using a sequence
    of keys. |'
  prefs: []
  type: TYPE_TB
- en: '| `linspace`() | Return evenly spaced numbers over a specified interval. |'
  prefs: []
  type: TYPE_TB
- en: '| `load`(*args, **kwargs) | Load arrays or pickled objects from `.npy`, `.npz`
    or pickled files. |'
  prefs: []
  type: TYPE_TB
- en: '| `log`(x, /) | Natural logarithm, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| `log10`(x, /) | Return the base 10 logarithm of the input array, element-wise.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `log1p`(x, /) | Return the natural logarithm of one plus the input array,
    element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| `log2`(x, /) | Base-2 logarithm of x. |'
  prefs: []
  type: TYPE_TB
- en: '| `logaddexp` | Logarithm of the sum of exponentiations of the inputs. |'
  prefs: []
  type: TYPE_TB
- en: '| `logaddexp2` | Logarithm of the sum of exponentiations of the inputs in base-2.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `logical_and`(*args) | Compute the truth value of x1 AND x2 element-wise.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `logical_not`(*args) | Compute the truth value of NOT x element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| `logical_or`(*args) | Compute the truth value of x1 OR x2 element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| `logical_xor`(*args) | Compute the truth value of x1 XOR x2, element-wise.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `logspace`(start, stop[, num, endpoint, base, ...]) | Return numbers spaced
    evenly on a log scale. |'
  prefs: []
  type: TYPE_TB
- en: '| `mask_indices`(*args, **kwargs) | Return the indices to access (n, n) arrays,
    given a masking function. |'
  prefs: []
  type: TYPE_TB
- en: '| `matmul`(a, b, *[, precision, ...]) | Perform a matrix multiplication. |'
  prefs: []
  type: TYPE_TB
- en: '| `matrix_transpose`(x, /) | Transpose the last two dimensions of an array.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `max`(a[, axis, out, keepdims, initial, where]) | Return the maximum of an
    array or maximum along an axis. |'
  prefs: []
  type: TYPE_TB
- en: '| `maximum`(x1, x2, /) | Element-wise maximum of array elements. |'
  prefs: []
  type: TYPE_TB
- en: '| `mean`(a[, axis, dtype, out, keepdims, where]) | Compute the arithmetic mean
    along the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: '| `median`(a[, axis, out, overwrite_input, keepdims]) | Compute the median
    along the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: '| `meshgrid`(*xi[, copy, sparse, indexing]) | Return a tuple of coordinate
    matrices from coordinate vectors. |'
  prefs: []
  type: TYPE_TB
- en: '| `mgrid` | Return dense multi-dimensional "meshgrid". |'
  prefs: []
  type: TYPE_TB
- en: '| `min`(a[, axis, out, keepdims, initial, where]) | Return the minimum of an
    array or minimum along an axis. |'
  prefs: []
  type: TYPE_TB
- en: '| `minimum`(x1, x2, /) | Element-wise minimum of array elements. |'
  prefs: []
  type: TYPE_TB
- en: '| `mod`(x1, x2, /) | Returns the element-wise remainder of division. |'
  prefs: []
  type: TYPE_TB
- en: '| `modf`(x, /[, out]) | Return the fractional and integral parts of an array,
    element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| `moveaxis`(a, source, destination) | Move an array axis to a new position
    |'
  prefs: []
  type: TYPE_TB
- en: '| `multiply`(x1, x2, /) | Multiply arguments element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| `nan_to_num`(x[, copy, nan, posinf, neginf]) | Replace NaN with zero and
    infinity with large finite numbers (default |'
  prefs: []
  type: TYPE_TB
- en: '| `nanargmax`(a[, axis, out, keepdims]) | Return the indices of the maximum
    values in the specified axis ignoring |'
  prefs: []
  type: TYPE_TB
- en: '| `nanargmin`(a[, axis, out, keepdims]) | Return the indices of the minimum
    values in the specified axis ignoring |'
  prefs: []
  type: TYPE_TB
- en: '| `nancumprod`(a[, axis, dtype, out]) | Return the cumulative product of array
    elements over a given axis treating Not a |'
  prefs: []
  type: TYPE_TB
- en: '| `nancumsum`(a[, axis, dtype, out]) | Return the cumulative sum of array elements
    over a given axis treating Not a |'
  prefs: []
  type: TYPE_TB
- en: '| `nanmax`(a[, axis, out, keepdims, initial, where]) | Return the maximum of
    an array or maximum along an axis, ignoring any |'
  prefs: []
  type: TYPE_TB
- en: '| `nanmean`(a[, axis, dtype, out, keepdims, where]) | Compute the arithmetic
    mean along the specified axis, ignoring NaNs. |'
  prefs: []
  type: TYPE_TB
- en: '| `nanmedian`(a[, axis, out, overwrite_input, ...]) | Compute the median along
    the specified axis, while ignoring NaNs. |'
  prefs: []
  type: TYPE_TB
- en: '| `nanmin`(a[, axis, out, keepdims, initial, where]) | Return minimum of an
    array or minimum along an axis, ignoring any NaNs. |'
  prefs: []
  type: TYPE_TB
- en: '| `nanpercentile`(a, q[, axis, out, ...]) | Compute the qth percentile of the
    data along the specified axis, |'
  prefs: []
  type: TYPE_TB
- en: '| `nanprod`(a[, axis, dtype, out, keepdims, ...]) | Return the product of array
    elements over a given axis treating Not a |'
  prefs: []
  type: TYPE_TB
- en: '| `nanquantile`(a, q[, axis, out, ...]) | Compute the qth quantile of the data
    along the specified axis, |'
  prefs: []
  type: TYPE_TB
- en: '| `nanstd`(a[, axis, dtype, out, ddof, ...]) | Compute the standard deviation
    along the specified axis, while |'
  prefs: []
  type: TYPE_TB
- en: '| `nansum`(a[, axis, dtype, out, keepdims, ...]) | Return the sum of array
    elements over a given axis treating Not a |'
  prefs: []
  type: TYPE_TB
- en: '| `nanvar`(a[, axis, dtype, out, ddof, ...]) | Compute the variance along the
    specified axis, while ignoring NaNs. |'
  prefs: []
  type: TYPE_TB
- en: '| `ndarray` | alias of `Array` |'
  prefs: []
  type: TYPE_TB
- en: '| `ndim`(a) | Return the number of dimensions of an array. |'
  prefs: []
  type: TYPE_TB
- en: '| `negative`(x, /) | Numerical negative, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| `nextafter`(x1, x2, /) | Return the next floating-point value after x1 towards
    x2, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| `nonzero`(a, *[, size, fill_value]) | Return indices of nonzero elements
    of an array. |'
  prefs: []
  type: TYPE_TB
- en: '| `not_equal`(x1, x2, /) | Return (x1 != x2) element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| `number`() | Abstract base class of all numeric scalar types. |'
  prefs: []
  type: TYPE_TB
- en: '| `object_` | Any Python object. |'
  prefs: []
  type: TYPE_TB
- en: '| `ogrid` | Return open multi-dimensional "meshgrid". |'
  prefs: []
  type: TYPE_TB
- en: '| `ones`(shape[, dtype, device]) | Return a new array of given shape and type,
    filled with ones. |'
  prefs: []
  type: TYPE_TB
- en: '| `ones_like`(a[, dtype, shape, device]) | Return an array of ones with the
    same shape and type as a given array. |'
  prefs: []
  type: TYPE_TB
- en: '| `outer`(a, b[, out]) | Compute the outer product of two vectors. |'
  prefs: []
  type: TYPE_TB
- en: '| `packbits`(a[, axis, bitorder]) | Packs the elements of a binary-valued array
    into bits in a uint8 array. |'
  prefs: []
  type: TYPE_TB
- en: '| `pad`(array, pad_width[, mode]) | Pad an array. |'
  prefs: []
  type: TYPE_TB
- en: '| `partition`(a, kth[, axis]) | Returns a partially-sorted copy of an array.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `percentile`(a, q[, axis, out, ...]) | Compute the q-th percentile of the
    data along the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: '| `permute_dims`(a, /, axes) | Returns an array with axes transposed. |'
  prefs: []
  type: TYPE_TB
- en: '| `piecewise`(x, condlist, funclist, *args, **kw) | Evaluate a piecewise-defined
    function. |'
  prefs: []
  type: TYPE_TB
- en: '| `place`(arr, mask, vals, *[, inplace]) | Change elements of an array based
    on conditional and input values. |'
  prefs: []
  type: TYPE_TB
- en: '| `poly`(seq_of_zeros) | Find the coefficients of a polynomial with the given
    sequence of roots. |'
  prefs: []
  type: TYPE_TB
- en: '| `polyadd`(a1, a2) | Find the sum of two polynomials. |'
  prefs: []
  type: TYPE_TB
- en: '| `polyder`(p[, m]) | Return the derivative of the specified order of a polynomial.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `polydiv`(u, v, *[, trim_leading_zeros]) | Returns the quotient and remainder
    of polynomial division. |'
  prefs: []
  type: TYPE_TB
- en: '| `polyfit`(x, y, deg[, rcond, full, w, cov]) | Least squares polynomial fit.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `polyint`(p[, m, k]) | Return an antiderivative (indefinite integral) of
    a polynomial. |'
  prefs: []
  type: TYPE_TB
- en: '| `polymul`(a1, a2, *[, trim_leading_zeros]) | Find the product of two polynomials.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `polysub`(a1, a2) | Difference (subtraction) of two polynomials. |'
  prefs: []
  type: TYPE_TB
- en: '| `polyval`(p, x, *[, unroll]) | Evaluate a polynomial at specific values.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `positive`(x, /) | Numerical positive, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| `pow`(x1, x2, /) | First array elements raised to powers from second array,
    element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| `power`(x1, x2, /) | First array elements raised to powers from second array,
    element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| `printoptions`(*args, **kwargs) | Context manager for setting print options.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `prod`(a[, axis, dtype, out, keepdims, ...]) | Return the product of array
    elements over a given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| `promote_types`(a, b) | Returns the type to which a binary operation should
    cast its arguments. |'
  prefs: []
  type: TYPE_TB
- en: '| `ptp`(a[, axis, out, keepdims]) | Range of values (maximum - minimum) along
    an axis. |'
  prefs: []
  type: TYPE_TB
- en: '| `put`(a, ind, v[, mode, inplace]) | Replaces specified elements of an array
    with given values. |'
  prefs: []
  type: TYPE_TB
- en: '| `quantile`(a, q[, axis, out, overwrite_input, ...]) | Compute the q-th quantile
    of the data along the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: '| `r_` | Concatenate slices, scalars and array-like objects along the first
    axis. |'
  prefs: []
  type: TYPE_TB
- en: '| `rad2deg`(x, /) | Convert angles from radians to degrees. |'
  prefs: []
  type: TYPE_TB
- en: '| `radians`(x, /) | Convert angles from degrees to radians. |'
  prefs: []
  type: TYPE_TB
- en: '| `ravel`(a[, order]) | Flatten array into a 1-dimensional shape. |'
  prefs: []
  type: TYPE_TB
- en: '| `ravel_multi_index`(multi_index, dims[, mode, ...]) | Convert multi-dimensional
    indices into flat indices. |'
  prefs: []
  type: TYPE_TB
- en: '| `real`(val, /) | Return the real part of the complex argument. |'
  prefs: []
  type: TYPE_TB
- en: '| `reciprocal`(x, /) | Return the reciprocal of the argument, element-wise.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `remainder`(x1, x2, /) | Returns the element-wise remainder of division.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `repeat`(a, repeats[, axis, total_repeat_length]) | Repeat each element of
    an array after themselves |'
  prefs: []
  type: TYPE_TB
- en: '| `reshape`(a[, shape, order, newshape]) | Return a reshaped copy of an array.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `resize`(a, new_shape) | Return a new array with the specified shape. |'
  prefs: []
  type: TYPE_TB
- en: '| `result_type`(*args) | Returns the type that results from applying the NumPy
    |'
  prefs: []
  type: TYPE_TB
- en: '| `right_shift`(x1, x2, /) | Right shift the bits of `x1` to the amount specified
    in `x2`. |'
  prefs: []
  type: TYPE_TB
- en: '| `rint`(x, /) | Round elements of the array to the nearest integer. |'
  prefs: []
  type: TYPE_TB
- en: '| `roll`(a, shift[, axis]) | Roll array elements along a given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| `rollaxis`(a, axis[, start]) | Roll the specified axis to a given position.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `roots`(p, *[, strip_zeros]) | Return the roots of a polynomial with coefficients
    given in p. |'
  prefs: []
  type: TYPE_TB
- en: '| `rot90`(m[, k, axes]) | Rotate an array by 90 degrees in the plane specified
    by axes. |'
  prefs: []
  type: TYPE_TB
- en: '| `round`(a[, decimals, out]) | Round an array to the given number of decimals.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `round_`(a[, decimals, out]) | Round an array to the given number of decimals.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `s_` | A nicer way to build up index tuples for arrays. |'
  prefs: []
  type: TYPE_TB
- en: '| `save`(file, arr[, allow_pickle, fix_imports]) | Save an array to a binary
    file in NumPy `.npy` format. |'
  prefs: []
  type: TYPE_TB
- en: '| `savez`(file, *args, **kwds) | Save several arrays into a single file in
    uncompressed `.npz` format. |'
  prefs: []
  type: TYPE_TB
- en: '| `searchsorted`(a, v[, side, sorter, method]) | Perform a binary search within
    a sorted array. |'
  prefs: []
  type: TYPE_TB
- en: '| `select`(condlist, choicelist[, default]) | Return an array drawn from elements
    in choicelist, depending on conditions. |'
  prefs: []
  type: TYPE_TB
- en: '| `set_printoptions`([precision, threshold, ...]) | Set printing options. |'
  prefs: []
  type: TYPE_TB
- en: '| `setdiff1d`(ar1, ar2[, assume_unique, size, ...]) | Compute the set difference
    of two 1D arrays. |'
  prefs: []
  type: TYPE_TB
- en: '| `setxor1d`(ar1, ar2[, assume_unique]) | Compute the set-wise xor of elements
    in two arrays. |'
  prefs: []
  type: TYPE_TB
- en: '| `shape`(a) | Return the shape of an array. |'
  prefs: []
  type: TYPE_TB
- en: '| `sign`(x, /) | Returns an element-wise indication of the sign of a number.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `signbit`(x, /) | Returns element-wise True where signbit is set (less than
    zero). |'
  prefs: []
  type: TYPE_TB
- en: '| `signedinteger`() | Abstract base class of all signed integer scalar types.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `sin`(x, /) | Trigonometric sine, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| `sinc`(x, /) | Return the normalized sinc function. |'
  prefs: []
  type: TYPE_TB
- en: '| `single` | alias of `float32` |'
  prefs: []
  type: TYPE_TB
- en: '| `sinh`(x, /) | Hyperbolic sine, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| `size`(a[, axis]) | Return the number of elements along a given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| `sort`(a[, axis, kind, order, stable, descending]) | Return a sorted copy
    of an array. |'
  prefs: []
  type: TYPE_TB
- en: '| `sort_complex`(a) | Sort a complex array using the real part first, then
    the imaginary part. |'
  prefs: []
  type: TYPE_TB
- en: '| `split`(ary, indices_or_sections[, axis]) | Split an array into multiple
    sub-arrays as views into ary. |'
  prefs: []
  type: TYPE_TB
- en: '| `sqrt`(x, /) | Return the non-negative square-root of an array, element-wise.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `square`(x, /) | Return the element-wise square of the input. |'
  prefs: []
  type: TYPE_TB
- en: '| `squeeze`(a[, axis]) | Remove one or more length-1 axes from array |'
  prefs: []
  type: TYPE_TB
- en: '| `stack`(arrays[, axis, out, dtype]) | Join a sequence of arrays along a new
    axis. |'
  prefs: []
  type: TYPE_TB
- en: '| `std`(a[, axis, dtype, out, ddof, keepdims, ...]) | Compute the standard
    deviation along the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: '| `subtract`(x1, x2, /) | Subtract arguments, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| `sum`(a[, axis, dtype, out, keepdims, ...]) | Sum of array elements over
    a given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| `swapaxes`(a, axis1, axis2) | Swap two axes of an array. |'
  prefs: []
  type: TYPE_TB
- en: '| `take`(a, indices[, axis, out, mode, ...]) | Take elements from an array.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `take_along_axis`(arr, indices, axis[, mode, ...]) | Take elements from an
    array. |'
  prefs: []
  type: TYPE_TB
- en: '| `tan`(x, /) | Compute tangent element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| `tanh`(x, /) | Compute hyperbolic tangent element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| `tensordot`(a, b[, axes, precision, ...]) | Compute the tensor dot product
    of two N-dimensional arrays. |'
  prefs: []
  type: TYPE_TB
- en: '| `tile`(A, reps) | Construct an array by repeating A the number of times given
    by reps. |'
  prefs: []
  type: TYPE_TB
- en: '| `trace`(a[, offset, axis1, axis2, dtype, out]) | Return the sum along diagonals
    of the array. |'
  prefs: []
  type: TYPE_TB
- en: '| `trapezoid`(y[, x, dx, axis]) | Integrate along the given axis using the
    composite trapezoidal rule. |'
  prefs: []
  type: TYPE_TB
- en: '| `transpose`(a[, axes]) | Return a transposed version of an N-dimensional
    array. |'
  prefs: []
  type: TYPE_TB
- en: '| `tri`(N[, M, k, dtype]) | An array with ones at and below the given diagonal
    and zeros elsewhere. |'
  prefs: []
  type: TYPE_TB
- en: '| `tril`(m[, k]) | Lower triangle of an array. |'
  prefs: []
  type: TYPE_TB
- en: '| `tril_indices`(n[, k, m]) | Return the indices for the lower-triangle of
    an (n, m) array. |'
  prefs: []
  type: TYPE_TB
- en: '| `tril_indices_from`(arr[, k]) | Return the indices for the lower-triangle
    of arr. |'
  prefs: []
  type: TYPE_TB
- en: '| `trim_zeros`(filt[, trim]) | Trim the leading and/or trailing zeros from
    a 1-D array or sequence. |'
  prefs: []
  type: TYPE_TB
- en: '| `triu`(m[, k]) | Upper triangle of an array. |'
  prefs: []
  type: TYPE_TB
- en: '| `triu_indices`(n[, k, m]) | Return the indices for the upper-triangle of
    an (n, m) array. |'
  prefs: []
  type: TYPE_TB
- en: '| `triu_indices_from`(arr[, k]) | Return the indices for the upper-triangle
    of arr. |'
  prefs: []
  type: TYPE_TB
- en: '| `true_divide`(x1, x2, /) | Divide arguments element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| `trunc`(x) | Return the truncated value of the input, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| `ufunc`(func, /, nin, nout, *[, name, nargs, ...]) | Functions that operate
    element-by-element on whole arrays. |'
  prefs: []
  type: TYPE_TB
- en: '| `uint` | alias of `uint64` |'
  prefs: []
  type: TYPE_TB
- en: '| `uint16`(x) |  |'
  prefs: []
  type: TYPE_TB
- en: '| `uint32`(x) |  |'
  prefs: []
  type: TYPE_TB
- en: '| `uint64`(x) |  |'
  prefs: []
  type: TYPE_TB
- en: '| `uint8`(x) |  |'
  prefs: []
  type: TYPE_TB
- en: '| `union1d`(ar1, ar2, *[, size, fill_value]) | Compute the set union of two
    1D arrays. |'
  prefs: []
  type: TYPE_TB
- en: '| `unique`(ar[, return_index, return_inverse, ...]) | Return the unique values
    from an array. |'
  prefs: []
  type: TYPE_TB
- en: '| `unique_all`(x, /, *[, size, fill_value]) | Return unique values from x,
    along with indices, inverse indices, and counts. |'
  prefs: []
  type: TYPE_TB
- en: '| `unique_counts`(x, /, *[, size, fill_value]) | Return unique values from
    x, along with counts. |'
  prefs: []
  type: TYPE_TB
- en: '| `unique_inverse`(x, /, *[, size, fill_value]) | Return unique values from
    x, along with indices, inverse indices, and counts. |'
  prefs: []
  type: TYPE_TB
- en: '| `unique_values`(x, /, *[, size, fill_value]) | Return unique values from
    x, along with indices, inverse indices, and counts. |'
  prefs: []
  type: TYPE_TB
- en: '| `unpackbits`(a[, axis, count, bitorder]) | Unpacks elements of a uint8 array
    into a binary-valued output array. |'
  prefs: []
  type: TYPE_TB
- en: '| `unravel_index`(indices, shape) | Convert flat indices into multi-dimensional
    indices. |'
  prefs: []
  type: TYPE_TB
- en: '| `unstack`(x, /, *[, axis]) |  |'
  prefs: []
  type: TYPE_TB
- en: '| `unsignedinteger`() | Abstract base class of all unsigned integer scalar
    types. |'
  prefs: []
  type: TYPE_TB
- en: '| `unwrap`(p[, discont, axis, period]) | Unwrap by taking the complement of
    large deltas with respect to the period. |'
  prefs: []
  type: TYPE_TB
- en: '| `vander`(x[, N, increasing]) | Generate a Vandermonde matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| `var`(a[, axis, dtype, out, ddof, keepdims, ...]) | Compute the variance
    along the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: '| `vdot`(a, b, *[, precision, ...]) | Perform a conjugate multiplication of
    two 1D vectors. |'
  prefs: []
  type: TYPE_TB
- en: '| `vecdot`(x1, x2, /, *[, axis, precision, ...]) | Perform a conjugate multiplication
    of two batched vectors. |'
  prefs: []
  type: TYPE_TB
- en: '| `vectorize`(pyfunc, *[, excluded, signature]) | Define a vectorized function
    with broadcasting. |'
  prefs: []
  type: TYPE_TB
- en: '| `vsplit`(ary, indices_or_sections) | Split an array into multiple sub-arrays
    vertically (row-wise). |'
  prefs: []
  type: TYPE_TB
- en: '| `vstack`(tup[, dtype]) | Stack arrays in sequence vertically (row wise).
    |'
  prefs: []
  type: TYPE_TB
- en: '| `where`() | Select elements from two arrays based on a condition. |'
  prefs: []
  type: TYPE_TB
- en: '| `zeros`(shape[, dtype, device]) | Return a new array of given shape and type,
    filled with zeros. |'
  prefs: []
  type: TYPE_TB
- en: '| `zeros_like`(a[, dtype, shape, device]) | Return an array of zeros with the
    same shape and type as a given array. |'
  prefs: []
  type: TYPE_TB
- en: '## jax.numpy.fft'
  prefs: []
  type: TYPE_NORMAL
- en: '| `fft`(a[, n, axis, norm]) | Compute the one-dimensional discrete Fourier
    Transform. |'
  prefs: []
  type: TYPE_TB
- en: '| `fft2`(a[, s, axes, norm]) | Compute the 2-dimensional discrete Fourier Transform.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `fftfreq`(n[, d, dtype]) | Return the Discrete Fourier Transform sample frequencies.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `fftn`(a[, s, axes, norm]) | Compute the N-dimensional discrete Fourier Transform.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `fftshift`(x[, axes]) | Shift the zero-frequency component to the center
    of the spectrum. |'
  prefs: []
  type: TYPE_TB
- en: '| `hfft`(a[, n, axis, norm]) | Compute the FFT of a signal that has Hermitian
    symmetry, i.e., a real |'
  prefs: []
  type: TYPE_TB
- en: '| `ifft`(a[, n, axis, norm]) | Compute the one-dimensional inverse discrete
    Fourier Transform. |'
  prefs: []
  type: TYPE_TB
- en: '| `ifft2`(a[, s, axes, norm]) | Compute the 2-dimensional inverse discrete
    Fourier Transform. |'
  prefs: []
  type: TYPE_TB
- en: '| `ifftn`(a[, s, axes, norm]) | Compute the N-dimensional inverse discrete
    Fourier Transform. |'
  prefs: []
  type: TYPE_TB
- en: '| `ifftshift`(x[, axes]) | The inverse of fftshift. |'
  prefs: []
  type: TYPE_TB
- en: '| `ihfft`(a[, n, axis, norm]) | Compute the inverse FFT of a signal that has
    Hermitian symmetry. |'
  prefs: []
  type: TYPE_TB
- en: '| `irfft`(a[, n, axis, norm]) | Computes the inverse of rfft. |'
  prefs: []
  type: TYPE_TB
- en: '| `irfft2`(a[, s, axes, norm]) | Computes the inverse of rfft2. |'
  prefs: []
  type: TYPE_TB
- en: '| `irfftn`(a[, s, axes, norm]) | Computes the inverse of rfftn. |'
  prefs: []
  type: TYPE_TB
- en: '| `rfft`(a[, n, axis, norm]) | Compute the one-dimensional discrete Fourier
    Transform for real input. |'
  prefs: []
  type: TYPE_TB
- en: '| `rfft2`(a[, s, axes, norm]) | Compute the 2-dimensional FFT of a real array.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `rfftfreq`(n[, d, dtype]) | Return the Discrete Fourier Transform sample
    frequencies |'
  prefs: []
  type: TYPE_TB
- en: '| `rfftn`(a[, s, axes, norm]) | Compute the N-dimensional discrete Fourier
    Transform for real input. |  ## jax.numpy.linalg'
  prefs: []
  type: TYPE_NORMAL
- en: '| `cholesky`(a, *[, upper]) | Compute the Cholesky decomposition of a matrix.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `cond`(x[, p]) | Compute the condition number of a matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| `cross`(x1, x2, /, *[, axis]) | Compute the cross-product of two 3D vectors
    |'
  prefs: []
  type: TYPE_TB
- en: '| `det` | Compute the determinant of an array. |'
  prefs: []
  type: TYPE_TB
- en: '| `diagonal`(x, /, *[, offset]) | Extract the diagonal of an matrix or stack
    of matrices. |'
  prefs: []
  type: TYPE_TB
- en: '| `eig`(a) | Compute the eigenvalues and eigenvectors of a square array. |'
  prefs: []
  type: TYPE_TB
- en: '| `eigh`(a[, UPLO, symmetrize_input]) | Compute the eigenvalues and eigenvectors
    of a Hermitian matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| `eigvals`(a) | Compute the eigenvalues of a general matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| `eigvalsh`(a[, UPLO]) | Compute the eigenvalues of a Hermitian matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| `inv`(a) | Return the inverse of a square matrix |'
  prefs: []
  type: TYPE_TB
- en: '| `lstsq`(a, b[, rcond, numpy_resid]) | Return the least-squares solution to
    a linear equation. |'
  prefs: []
  type: TYPE_TB
- en: '| `matmul`(x1, x2, /, *[, precision, ...]) | Perform a matrix multiplication.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `matrix_norm`(x, /, *[, keepdims, ord]) | Compute the norm of a matrix or
    stack of matrices. |'
  prefs: []
  type: TYPE_TB
- en: '| `matrix_power`(a, n) | Raise a square matrix to an integer power. |'
  prefs: []
  type: TYPE_TB
- en: '| `matrix_rank`(M[, rtol, tol]) | Compute the rank of a matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| `matrix_transpose`(x, /) | Transpose a matrix or stack of matrices. |'
  prefs: []
  type: TYPE_TB
- en: '| `multi_dot`(arrays, *[, precision]) | Efficiently compute matrix products
    between a sequence of arrays. |'
  prefs: []
  type: TYPE_TB
- en: '| `norm`(x[, ord, axis, keepdims]) | Compute the norm of a matrix or vector.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `outer`(x1, x2, /) | Compute the outer product of two 1-dimensional arrays.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `pinv`(a[, rtol, hermitian, rcond]) | Compute the (Moore-Penrose) pseudo-inverse
    of a matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| `qr`() | Compute the QR decomposition of an array |'
  prefs: []
  type: TYPE_TB
- en: '| `slogdet`(a, *[, method]) | Compute the sign and (natural) logarithm of the
    determinant of an array. |'
  prefs: []
  type: TYPE_TB
- en: '| `solve`(a, b) | Solve a linear system of equations |'
  prefs: []
  type: TYPE_TB
- en: '| `svd`() | Compute the singular value decomposition. |'
  prefs: []
  type: TYPE_TB
- en: '| `svdvals`(x, /) | Compute the singular values of a matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| `tensordot`(x1, x2, /, *[, axes, precision, ...]) | Compute the tensor dot
    product of two N-dimensional arrays. |'
  prefs: []
  type: TYPE_TB
- en: '| `tensorinv`(a[, ind]) | Compute the tensor inverse of an array. |'
  prefs: []
  type: TYPE_TB
- en: '| `tensorsolve`(a, b[, axes]) | Solve the tensor equation a x = b for x. |'
  prefs: []
  type: TYPE_TB
- en: '| `trace`(x, /, *[, offset, dtype]) | Compute the trace of a matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| `vector_norm`(x, /, *[, axis, keepdims, ord]) | Compute the vector norm of
    a vector or batch of vectors. |'
  prefs: []
  type: TYPE_TB
- en: '| `vecdot`(x1, x2, /, *[, axis, precision, ...]) | Compute the (batched) vector
    conjugate dot product of two arrays. |'
  prefs: []
  type: TYPE_TB
- en: JAX Array
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The JAX `Array` (along with its alias, `jax.numpy.ndarray`) is the core array
    object in JAX: you can think of it as JAX’s equivalent of a [`numpy.ndarray`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(in NumPy v2.0)"). Like [`numpy.ndarray`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(in NumPy v2.0)"), most users will not need to instantiate `Array` objects manually,
    but rather will create them via `jax.numpy` functions like `array()`, `arange()`,
    `linspace()`, and others listed above.'
  prefs: []
  type: TYPE_NORMAL
- en: Copying and Serialization
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: JAX `Array` objects are designed to work seamlessly with Python standard library
    tools where appropriate.
  prefs: []
  type: TYPE_NORMAL
- en: With the built-in [`copy`](https://docs.python.org/3/library/copy.html#module-copy
    "(in Python v3.12)") module, when [`copy.copy()`](https://docs.python.org/3/library/copy.html#copy.copy
    "(in Python v3.12)") or [`copy.deepcopy()`](https://docs.python.org/3/library/copy.html#copy.deepcopy
    "(in Python v3.12)") encounder an `Array`, it is equivalent to calling the `copy()`
    method, which will create a copy of the buffer on the same device as the original
    array. This will work correctly within traced/JIT-compiled code, though copy operations
    may be elided by the compiler in this context.
  prefs: []
  type: TYPE_NORMAL
- en: When the built-in [`pickle`](https://docs.python.org/3/library/pickle.html#module-pickle
    "(in Python v3.12)") module encounters an `Array`, it will be serialized via a
    compact bit representation in a similar manner to pickled [`numpy.ndarray`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(in NumPy v2.0)") objects. When unpickled, the result will be a new `Array` object
    *on the default device.* This is because in general, pickling and unpickling may
    take place in different runtime environments, and there is no general way to map
    the device IDs of one runtime to the device IDs of another. If [`pickle`](https://docs.python.org/3/library/pickle.html#module-pickle
    "(in Python v3.12)") is used in traced/JIT-compiled code, it will result in a
    `ConcretizationTypeError`.
  prefs: []
  type: TYPE_NORMAL
