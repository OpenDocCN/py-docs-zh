["```py\n>>> from typing import List\n>>> from typing import Optional\n>>> from sqlalchemy import ForeignKey\n>>> from sqlalchemy import String\n>>> from sqlalchemy.orm import DeclarativeBase\n>>> from sqlalchemy.orm import Mapped\n>>> from sqlalchemy.orm import mapped_column\n>>> from sqlalchemy.orm import relationship\n\n>>> class Base(DeclarativeBase):\n...     pass\n\n>>> class User(Base):\n...     __tablename__ = \"user_account\"\n...\n...     id: Mapped[int] = mapped_column(primary_key=True)\n...     name: Mapped[str] = mapped_column(String(30))\n...     fullname: Mapped[Optional[str]]\n...\n...     addresses: Mapped[List[\"Address\"]] = relationship(\n...         back_populates=\"user\", cascade=\"all, delete-orphan\"\n...     )\n...\n...     def __repr__(self) -> str:\n...         return f\"User(id={self.id!r}, name={self.name!r}, fullname={self.fullname!r})\"\n\n>>> class Address(Base):\n...     __tablename__ = \"address\"\n...\n...     id: Mapped[int] = mapped_column(primary_key=True)\n...     email_address: Mapped[str]\n...     user_id: Mapped[int] = mapped_column(ForeignKey(\"user_account.id\"))\n...\n...     user: Mapped[\"User\"] = relationship(back_populates=\"addresses\")\n...\n...     def __repr__(self) -> str:\n...         return f\"Address(id={self.id!r}, email_address={self.email_address!r})\"\n```", "```py\n>>> from sqlalchemy import create_engine\n>>> engine = create_engine(\"sqlite://\", echo=True)\n```", "```py\n>>> Base.metadata.create_all(engine)\nBEGIN  (implicit)\nPRAGMA  main.table_...info(\"user_account\")\n...\nPRAGMA  main.table_...info(\"address\")\n...\nCREATE  TABLE  user_account  (\n  id  INTEGER  NOT  NULL,\n  name  VARCHAR(30)  NOT  NULL,\n  fullname  VARCHAR,\n  PRIMARY  KEY  (id)\n)\n...\nCREATE  TABLE  address  (\n  id  INTEGER  NOT  NULL,\n  email_address  VARCHAR  NOT  NULL,\n  user_id  INTEGER  NOT  NULL,\n  PRIMARY  KEY  (id),\n  FOREIGN  KEY(user_id)  REFERENCES  user_account  (id)\n)\n...\nCOMMIT \n```", "```py\n>>> from sqlalchemy.orm import Session\n\n>>> with Session(engine) as session:\n...     spongebob = User(\n...         name=\"spongebob\",\n...         fullname=\"Spongebob Squarepants\",\n...         addresses=[Address(email_address=\"spongebob@sqlalchemy.org\")],\n...     )\n...     sandy = User(\n...         name=\"sandy\",\n...         fullname=\"Sandy Cheeks\",\n...         addresses=[\n...             Address(email_address=\"sandy@sqlalchemy.org\"),\n...             Address(email_address=\"sandy@squirrelpower.org\"),\n...         ],\n...     )\n...     patrick = User(name=\"patrick\", fullname=\"Patrick Star\")\n...\n...     session.add_all([spongebob, sandy, patrick])\n...\n...     session.commit()\nBEGIN  (implicit)\nINSERT  INTO  user_account  (name,  fullname)  VALUES  (?,  ?)  RETURNING  id\n[...]  ('spongebob',  'Spongebob Squarepants')\nINSERT  INTO  user_account  (name,  fullname)  VALUES  (?,  ?)  RETURNING  id\n[...]  ('sandy',  'Sandy Cheeks')\nINSERT  INTO  user_account  (name,  fullname)  VALUES  (?,  ?)  RETURNING  id\n[...]  ('patrick',  'Patrick Star')\nINSERT  INTO  address  (email_address,  user_id)  VALUES  (?,  ?)  RETURNING  id\n[...]  ('spongebob@sqlalchemy.org',  1)\nINSERT  INTO  address  (email_address,  user_id)  VALUES  (?,  ?)  RETURNING  id\n[...]  ('sandy@sqlalchemy.org',  2)\nINSERT  INTO  address  (email_address,  user_id)  VALUES  (?,  ?)  RETURNING  id\n[...]  ('sandy@squirrelpower.org',  2)\nCOMMIT \n```", "```py\n>>> from sqlalchemy import select\n\n>>> session = Session(engine)\n\n>>> stmt = select(User).where(User.name.in_([\"spongebob\", \"sandy\"]))\n\n>>> for user in session.scalars(stmt):\n...     print(user)\nBEGIN  (implicit)\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account\nWHERE  user_account.name  IN  (?,  ?)\n[...]  ('spongebob',  'sandy')\nUser(id=1, name='spongebob', fullname='Spongebob Squarepants')\nUser(id=2, name='sandy', fullname='Sandy Cheeks')\n```", "```py\n>>> stmt = (\n...     select(Address)\n...     .join(Address.user)\n...     .where(User.name == \"sandy\")\n...     .where(Address.email_address == \"sandy@sqlalchemy.org\")\n... )\n>>> sandy_address = session.scalars(stmt).one()\nSELECT  address.id,  address.email_address,  address.user_id\nFROM  address  JOIN  user_account  ON  user_account.id  =  address.user_id\nWHERE  user_account.name  =  ?  AND  address.email_address  =  ?\n[...]  ('sandy',  'sandy@sqlalchemy.org')\n>>> sandy_address\nAddress(id=2, email_address='sandy@sqlalchemy.org')\n```", "```py\n>>> stmt = select(User).where(User.name == \"patrick\")\n>>> patrick = session.scalars(stmt).one()\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account\nWHERE  user_account.name  =  ?\n[...]  ('patrick',)\n>>> patrick.addresses.append(Address(email_address=\"patrickstar@sqlalchemy.org\"))\nSELECT  address.id  AS  address_id,  address.email_address  AS  address_email_address,  address.user_id  AS  address_user_id\nFROM  address\nWHERE  ?  =  address.user_id\n[...]  (3,)\n>>> sandy_address.email_address = \"sandy_cheeks@sqlalchemy.org\"\n\n>>> session.commit()\nUPDATE  address  SET  email_address=?  WHERE  address.id  =  ?\n[...]  ('sandy_cheeks@sqlalchemy.org',  2)\nINSERT  INTO  address  (email_address,  user_id)  VALUES  (?,  ?)\n[...]  ('patrickstar@sqlalchemy.org',  3)\nCOMMIT \n```", "```py\n>>> sandy = session.get(User, 2)\nBEGIN  (implicit)\nSELECT  user_account.id  AS  user_account_id,  user_account.name  AS  user_account_name,  user_account.fullname  AS  user_account_fullname\nFROM  user_account\nWHERE  user_account.id  =  ?\n[...]  (2,)\n>>> sandy.addresses.remove(sandy_address)\nSELECT  address.id  AS  address_id,  address.email_address  AS  address_email_address,  address.user_id  AS  address_user_id\nFROM  address\nWHERE  ?  =  address.user_id\n[...]  (2,) \n```", "```py\n>>> session.flush()\nDELETE  FROM  address  WHERE  address.id  =  ?\n[...]  (2,) \n```", "```py\n>>> session.delete(patrick)\nSELECT  user_account.id  AS  user_account_id,  user_account.name  AS  user_account_name,  user_account.fullname  AS  user_account_fullname\nFROM  user_account\nWHERE  user_account.id  =  ?\n[...]  (3,)\nSELECT  address.id  AS  address_id,  address.email_address  AS  address_email_address,  address.user_id  AS  address_user_id\nFROM  address\nWHERE  ?  =  address.user_id\n[...]  (3,) \n```", "```py\n>>> session.commit()\nDELETE  FROM  address  WHERE  address.id  =  ?\n[...]  (4,)\nDELETE  FROM  user_account  WHERE  user_account.id  =  ?\n[...]  (3,)\nCOMMIT \n```", "```py\n>>> from typing import List\n>>> from typing import Optional\n>>> from sqlalchemy import ForeignKey\n>>> from sqlalchemy import String\n>>> from sqlalchemy.orm import DeclarativeBase\n>>> from sqlalchemy.orm import Mapped\n>>> from sqlalchemy.orm import mapped_column\n>>> from sqlalchemy.orm import relationship\n\n>>> class Base(DeclarativeBase):\n...     pass\n\n>>> class User(Base):\n...     __tablename__ = \"user_account\"\n...\n...     id: Mapped[int] = mapped_column(primary_key=True)\n...     name: Mapped[str] = mapped_column(String(30))\n...     fullname: Mapped[Optional[str]]\n...\n...     addresses: Mapped[List[\"Address\"]] = relationship(\n...         back_populates=\"user\", cascade=\"all, delete-orphan\"\n...     )\n...\n...     def __repr__(self) -> str:\n...         return f\"User(id={self.id!r}, name={self.name!r}, fullname={self.fullname!r})\"\n\n>>> class Address(Base):\n...     __tablename__ = \"address\"\n...\n...     id: Mapped[int] = mapped_column(primary_key=True)\n...     email_address: Mapped[str]\n...     user_id: Mapped[int] = mapped_column(ForeignKey(\"user_account.id\"))\n...\n...     user: Mapped[\"User\"] = relationship(back_populates=\"addresses\")\n...\n...     def __repr__(self) -> str:\n...         return f\"Address(id={self.id!r}, email_address={self.email_address!r})\"\n```", "```py\n>>> from sqlalchemy import create_engine\n>>> engine = create_engine(\"sqlite://\", echo=True)\n```", "```py\n>>> Base.metadata.create_all(engine)\nBEGIN  (implicit)\nPRAGMA  main.table_...info(\"user_account\")\n...\nPRAGMA  main.table_...info(\"address\")\n...\nCREATE  TABLE  user_account  (\n  id  INTEGER  NOT  NULL,\n  name  VARCHAR(30)  NOT  NULL,\n  fullname  VARCHAR,\n  PRIMARY  KEY  (id)\n)\n...\nCREATE  TABLE  address  (\n  id  INTEGER  NOT  NULL,\n  email_address  VARCHAR  NOT  NULL,\n  user_id  INTEGER  NOT  NULL,\n  PRIMARY  KEY  (id),\n  FOREIGN  KEY(user_id)  REFERENCES  user_account  (id)\n)\n...\nCOMMIT \n```", "```py\n>>> from sqlalchemy.orm import Session\n\n>>> with Session(engine) as session:\n...     spongebob = User(\n...         name=\"spongebob\",\n...         fullname=\"Spongebob Squarepants\",\n...         addresses=[Address(email_address=\"spongebob@sqlalchemy.org\")],\n...     )\n...     sandy = User(\n...         name=\"sandy\",\n...         fullname=\"Sandy Cheeks\",\n...         addresses=[\n...             Address(email_address=\"sandy@sqlalchemy.org\"),\n...             Address(email_address=\"sandy@squirrelpower.org\"),\n...         ],\n...     )\n...     patrick = User(name=\"patrick\", fullname=\"Patrick Star\")\n...\n...     session.add_all([spongebob, sandy, patrick])\n...\n...     session.commit()\nBEGIN  (implicit)\nINSERT  INTO  user_account  (name,  fullname)  VALUES  (?,  ?)  RETURNING  id\n[...]  ('spongebob',  'Spongebob Squarepants')\nINSERT  INTO  user_account  (name,  fullname)  VALUES  (?,  ?)  RETURNING  id\n[...]  ('sandy',  'Sandy Cheeks')\nINSERT  INTO  user_account  (name,  fullname)  VALUES  (?,  ?)  RETURNING  id\n[...]  ('patrick',  'Patrick Star')\nINSERT  INTO  address  (email_address,  user_id)  VALUES  (?,  ?)  RETURNING  id\n[...]  ('spongebob@sqlalchemy.org',  1)\nINSERT  INTO  address  (email_address,  user_id)  VALUES  (?,  ?)  RETURNING  id\n[...]  ('sandy@sqlalchemy.org',  2)\nINSERT  INTO  address  (email_address,  user_id)  VALUES  (?,  ?)  RETURNING  id\n[...]  ('sandy@squirrelpower.org',  2)\nCOMMIT \n```", "```py\n>>> from sqlalchemy import select\n\n>>> session = Session(engine)\n\n>>> stmt = select(User).where(User.name.in_([\"spongebob\", \"sandy\"]))\n\n>>> for user in session.scalars(stmt):\n...     print(user)\nBEGIN  (implicit)\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account\nWHERE  user_account.name  IN  (?,  ?)\n[...]  ('spongebob',  'sandy')\nUser(id=1, name='spongebob', fullname='Spongebob Squarepants')\nUser(id=2, name='sandy', fullname='Sandy Cheeks')\n```", "```py\n>>> stmt = (\n...     select(Address)\n...     .join(Address.user)\n...     .where(User.name == \"sandy\")\n...     .where(Address.email_address == \"sandy@sqlalchemy.org\")\n... )\n>>> sandy_address = session.scalars(stmt).one()\nSELECT  address.id,  address.email_address,  address.user_id\nFROM  address  JOIN  user_account  ON  user_account.id  =  address.user_id\nWHERE  user_account.name  =  ?  AND  address.email_address  =  ?\n[...]  ('sandy',  'sandy@sqlalchemy.org')\n>>> sandy_address\nAddress(id=2, email_address='sandy@sqlalchemy.org')\n```", "```py\n>>> stmt = select(User).where(User.name == \"patrick\")\n>>> patrick = session.scalars(stmt).one()\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account\nWHERE  user_account.name  =  ?\n[...]  ('patrick',)\n>>> patrick.addresses.append(Address(email_address=\"patrickstar@sqlalchemy.org\"))\nSELECT  address.id  AS  address_id,  address.email_address  AS  address_email_address,  address.user_id  AS  address_user_id\nFROM  address\nWHERE  ?  =  address.user_id\n[...]  (3,)\n>>> sandy_address.email_address = \"sandy_cheeks@sqlalchemy.org\"\n\n>>> session.commit()\nUPDATE  address  SET  email_address=?  WHERE  address.id  =  ?\n[...]  ('sandy_cheeks@sqlalchemy.org',  2)\nINSERT  INTO  address  (email_address,  user_id)  VALUES  (?,  ?)\n[...]  ('patrickstar@sqlalchemy.org',  3)\nCOMMIT \n```", "```py\n>>> sandy = session.get(User, 2)\nBEGIN  (implicit)\nSELECT  user_account.id  AS  user_account_id,  user_account.name  AS  user_account_name,  user_account.fullname  AS  user_account_fullname\nFROM  user_account\nWHERE  user_account.id  =  ?\n[...]  (2,)\n>>> sandy.addresses.remove(sandy_address)\nSELECT  address.id  AS  address_id,  address.email_address  AS  address_email_address,  address.user_id  AS  address_user_id\nFROM  address\nWHERE  ?  =  address.user_id\n[...]  (2,) \n```", "```py\n>>> session.flush()\nDELETE  FROM  address  WHERE  address.id  =  ?\n[...]  (2,) \n```", "```py\n>>> session.delete(patrick)\nSELECT  user_account.id  AS  user_account_id,  user_account.name  AS  user_account_name,  user_account.fullname  AS  user_account_fullname\nFROM  user_account\nWHERE  user_account.id  =  ?\n[...]  (3,)\nSELECT  address.id  AS  address_id,  address.email_address  AS  address_email_address,  address.user_id  AS  address_user_id\nFROM  address\nWHERE  ?  =  address.user_id\n[...]  (3,) \n```", "```py\n>>> session.commit()\nDELETE  FROM  address  WHERE  address.id  =  ?\n[...]  (4,)\nDELETE  FROM  user_account  WHERE  user_account.id  =  ?\n[...]  (3,)\nCOMMIT \n```"]