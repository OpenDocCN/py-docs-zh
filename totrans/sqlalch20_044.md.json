["```py\n>>> from sqlalchemy import insert\n>>> session.execute(\n...     insert(User),\n...     [\n...         {\"name\": \"spongebob\", \"fullname\": \"Spongebob Squarepants\"},\n...         {\"name\": \"sandy\", \"fullname\": \"Sandy Cheeks\"},\n...         {\"name\": \"patrick\", \"fullname\": \"Patrick Star\"},\n...         {\"name\": \"squidward\", \"fullname\": \"Squidward Tentacles\"},\n...         {\"name\": \"ehkrabs\", \"fullname\": \"Eugene H. Krabs\"},\n...     ],\n... )\nINSERT  INTO  user_account  (name,  fullname)  VALUES  (?,  ?)\n[...]  [('spongebob',  'Spongebob Squarepants'),  ('sandy',  'Sandy Cheeks'),  ('patrick',  'Patrick Star'),\n('squidward',  'Squidward Tentacles'),  ('ehkrabs',  'Eugene H. Krabs')]\n<...>\n```", "```py\n>>> users = session.scalars(\n...     insert(User).returning(User),\n...     [\n...         {\"name\": \"spongebob\", \"fullname\": \"Spongebob Squarepants\"},\n...         {\"name\": \"sandy\", \"fullname\": \"Sandy Cheeks\"},\n...         {\"name\": \"patrick\", \"fullname\": \"Patrick Star\"},\n...         {\"name\": \"squidward\", \"fullname\": \"Squidward Tentacles\"},\n...         {\"name\": \"ehkrabs\", \"fullname\": \"Eugene H. Krabs\"},\n...     ],\n... )\nINSERT  INTO  user_account  (name,  fullname)\nVALUES  (?,  ?),  (?,  ?),  (?,  ?),  (?,  ?),  (?,  ?)\nRETURNING  id,  name,  fullname,  species\n[...]  ('spongebob',  'Spongebob Squarepants',  'sandy',  'Sandy Cheeks',\n'patrick',  'Patrick Star',  'squidward',  'Squidward Tentacles',\n'ehkrabs',  'Eugene H. Krabs')\n>>> print(users.all())\n[User(name='spongebob', fullname='Spongebob Squarepants'),\n User(name='sandy', fullname='Sandy Cheeks'),\n User(name='patrick', fullname='Patrick Star'),\n User(name='squidward', fullname='Squidward Tentacles'),\n User(name='ehkrabs', fullname='Eugene H. Krabs')]\n```", "```py\n>>> data = [\n...     {\"name\": \"pearl\", \"fullname\": \"Pearl Krabs\"},\n...     {\"name\": \"plankton\", \"fullname\": \"Plankton\"},\n...     {\"name\": \"gary\", \"fullname\": \"Gary\"},\n... ]\n>>> user_ids = session.scalars(\n...     insert(User).returning(User.id, sort_by_parameter_order=True), data\n... )\nINSERT  INTO  user_account  (name,  fullname)  VALUES  (?,  ?)  RETURNING  id\n[...  (insertmanyvalues)  1/3  (ordered;  batch  not  supported)]  ('pearl',  'Pearl Krabs')\nINSERT  INTO  user_account  (name,  fullname)  VALUES  (?,  ?)  RETURNING  id\n[insertmanyvalues  2/3  (ordered;  batch  not  supported)]  ('plankton',  'Plankton')\nINSERT  INTO  user_account  (name,  fullname)  VALUES  (?,  ?)  RETURNING  id\n[insertmanyvalues  3/3  (ordered;  batch  not  supported)]  ('gary',  'Gary')\n>>> for user_id, input_record in zip(user_ids, data):\n...     input_record[\"id\"] = user_id\n>>> print(data)\n[{'name': 'pearl', 'fullname': 'Pearl Krabs', 'id': 6},\n{'name': 'plankton', 'fullname': 'Plankton', 'id': 7},\n{'name': 'gary', 'fullname': 'Gary', 'id': 8}]\n```", "```py\n>>> users = session.scalars(\n...     insert(User).returning(User),\n...     [\n...         {\n...             \"name\": \"spongebob\",\n...             \"fullname\": \"Spongebob Squarepants\",\n...             \"species\": \"Sea Sponge\",\n...         },\n...         {\"name\": \"sandy\", \"fullname\": \"Sandy Cheeks\", \"species\": \"Squirrel\"},\n...         {\"name\": \"patrick\", \"species\": \"Starfish\"},\n...         {\n...             \"name\": \"squidward\",\n...             \"fullname\": \"Squidward Tentacles\",\n...             \"species\": \"Squid\",\n...         },\n...         {\"name\": \"ehkrabs\", \"fullname\": \"Eugene H. Krabs\", \"species\": \"Crab\"},\n...     ],\n... )\nINSERT  INTO  user_account  (name,  fullname,  species)\nVALUES  (?,  ?,  ?),  (?,  ?,  ?)  RETURNING  id,  name,  fullname,  species\n[...  (insertmanyvalues)  1/1  (unordered)]  ('spongebob',  'Spongebob Squarepants',  'Sea Sponge',\n'sandy',  'Sandy Cheeks',  'Squirrel')\nINSERT  INTO  user_account  (name,  species)\nVALUES  (?,  ?)  RETURNING  id,  name,  fullname,  species\n[...]  ('patrick',  'Starfish')\nINSERT  INTO  user_account  (name,  fullname,  species)\nVALUES  (?,  ?,  ?),  (?,  ?,  ?)  RETURNING  id,  name,  fullname,  species\n[...  (insertmanyvalues)  1/1  (unordered)]  ('squidward',  'Squidward Tentacles',\n'Squid',  'ehkrabs',  'Eugene H. Krabs',  'Crab') \n```", "```py\n>>> session.execute(\n...     insert(User),\n...     [\n...         {\n...             \"name\": \"name_a\",\n...             \"fullname\": \"Employee A\",\n...             \"species\": \"Squid\",\n...         },\n...         {\n...             \"name\": \"name_b\",\n...             \"fullname\": \"Employee B\",\n...             \"species\": \"Squirrel\",\n...         },\n...         {\n...             \"name\": \"name_c\",\n...             \"fullname\": \"Employee C\",\n...             \"species\": None,\n...         },\n...         {\n...             \"name\": \"name_d\",\n...             \"fullname\": \"Employee D\",\n...             \"species\": \"Bluefish\",\n...         },\n...     ],\n... )\nINSERT  INTO  user_account  (name,  fullname,  species)  VALUES  (?,  ?,  ?)\n[...]  [('name_a',  'Employee A',  'Squid'),  ('name_b',  'Employee B',  'Squirrel')]\nINSERT  INTO  user_account  (name,  fullname)  VALUES  (?,  ?)\n[...]  ('name_c',  'Employee C')\nINSERT  INTO  user_account  (name,  fullname,  species)  VALUES  (?,  ?,  ?)\n[...]  ('name_d',  'Employee D',  'Bluefish')\n... \n```", "```py\n>>> session.execute(\n...     insert(User).execution_options(render_nulls=True),\n...     [\n...         {\n...             \"name\": \"name_a\",\n...             \"fullname\": \"Employee A\",\n...             \"species\": \"Squid\",\n...         },\n...         {\n...             \"name\": \"name_b\",\n...             \"fullname\": \"Employee B\",\n...             \"species\": \"Squirrel\",\n...         },\n...         {\n...             \"name\": \"name_c\",\n...             \"fullname\": \"Employee C\",\n...             \"species\": None,\n...         },\n...         {\n...             \"name\": \"name_d\",\n...             \"fullname\": \"Employee D\",\n...             \"species\": \"Bluefish\",\n...         },\n...     ],\n... )\nINSERT  INTO  user_account  (name,  fullname,  species)  VALUES  (?,  ?,  ?)\n[...]  [('name_a',  'Employee A',  'Squid'),  ('name_b',  'Employee B',  'Squirrel'),  ('name_c',  'Employee C',  None),  ('name_d',  'Employee D',  'Bluefish')]\n... \n```", "```py\n>>> managers = session.scalars(\n...     insert(Manager).returning(Manager),\n...     [\n...         {\"name\": \"sandy\", \"manager_name\": \"Sandy Cheeks\"},\n...         {\"name\": \"ehkrabs\", \"manager_name\": \"Eugene H. Krabs\"},\n...     ],\n... )\nINSERT  INTO  employee  (name,  type)  VALUES  (?,  ?)  RETURNING  id,  name,  type\n[...  (insertmanyvalues)  1/2  (ordered;  batch  not  supported)]  ('sandy',  'manager')\nINSERT  INTO  employee  (name,  type)  VALUES  (?,  ?)  RETURNING  id,  name,  type\n[insertmanyvalues  2/2  (ordered;  batch  not  supported)]  ('ehkrabs',  'manager')\nINSERT  INTO  manager  (id,  manager_name)  VALUES  (?,  ?),  (?,  ?)  RETURNING  id,  manager_name,  id  AS  id__1\n[...  (insertmanyvalues)  1/1  (ordered)]  (1,  'Sandy Cheeks',  2,  'Eugene H. Krabs') \n```", "```py\nimport datetime\n\nclass LogRecord(Base):\n    __tablename__ = \"log_record\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    message: Mapped[str]\n    code: Mapped[str]\n    timestamp: Mapped[datetime.datetime]\n```", "```py\n>>> from sqlalchemy import func\n>>> log_record_result = session.scalars(\n...     insert(LogRecord).values(code=\"SQLA\", timestamp=func.now()).returning(LogRecord),\n...     [\n...         {\"message\": \"log message #1\"},\n...         {\"message\": \"log message #2\"},\n...         {\"message\": \"log message #3\"},\n...         {\"message\": \"log message #4\"},\n...     ],\n... )\nINSERT  INTO  log_record  (message,  code,  timestamp)\nVALUES  (?,  ?,  CURRENT_TIMESTAMP),  (?,  ?,  CURRENT_TIMESTAMP),\n(?,  ?,  CURRENT_TIMESTAMP),  (?,  ?,  CURRENT_TIMESTAMP)\nRETURNING  id,  message,  code,  timestamp\n[...  (insertmanyvalues)  1/1  (unordered)]  ('log message #1',  'SQLA',  'log message #2',\n'SQLA',  'log message #3',  'SQLA',  'log message #4',  'SQLA')\n>>> print(log_record_result.all())\n[LogRecord('log message #1', 'SQLA', datetime.datetime(...)),\n LogRecord('log message #2', 'SQLA', datetime.datetime(...)),\n LogRecord('log message #3', 'SQLA', datetime.datetime(...)),\n LogRecord('log message #4', 'SQLA', datetime.datetime(...))]\n```", "```py\n>>> from sqlalchemy import select\n>>> address_result = session.scalars(\n...     insert(Address)\n...     .values(\n...         [\n...             {\n...                 \"user_id\": select(User.id).where(User.name == \"sandy\"),\n...                 \"email_address\": \"sandy@company.com\",\n...             },\n...             {\n...                 \"user_id\": select(User.id).where(User.name == \"spongebob\"),\n...                 \"email_address\": \"spongebob@company.com\",\n...             },\n...             {\n...                 \"user_id\": select(User.id).where(User.name == \"patrick\"),\n...                 \"email_address\": \"patrick@company.com\",\n...             },\n...         ]\n...     )\n...     .returning(Address),\n... )\nINSERT  INTO  address  (user_id,  email_address)  VALUES\n((SELECT  user_account.id\nFROM  user_account\nWHERE  user_account.name  =  ?),  ?),  ((SELECT  user_account.id\nFROM  user_account\nWHERE  user_account.name  =  ?),  ?),  ((SELECT  user_account.id\nFROM  user_account\nWHERE  user_account.name  =  ?),  ?)  RETURNING  id,  user_id,  email_address\n[...]  ('sandy',  'sandy@company.com',  'spongebob',  'spongebob@company.com',\n'patrick',  'patrick@company.com')\n>>> print(address_result.all())\n[Address(email_address='sandy@company.com'),\n Address(email_address='spongebob@company.com'),\n Address(email_address='patrick@company.com')]\n```", "```py\nsession.bulk_insert_mappings(User, [{\"name\": \"u1\"}, {\"name\": \"u2\"}, {\"name\": \"u3\"}])\n```", "```py\nfrom sqlalchemy import insert\n\nsession.execute(insert(User), [{\"name\": \"u1\"}, {\"name\": \"u2\"}, {\"name\": \"u3\"}])\n```", "```py\n>>> from sqlalchemy.dialects.sqlite import insert as sqlite_upsert\n>>> stmt = sqlite_upsert(User).values(\n...     [\n...         {\"name\": \"spongebob\", \"fullname\": \"Spongebob Squarepants\"},\n...         {\"name\": \"sandy\", \"fullname\": \"Sandy Cheeks\"},\n...         {\"name\": \"patrick\", \"fullname\": \"Patrick Star\"},\n...         {\"name\": \"squidward\", \"fullname\": \"Squidward Tentacles\"},\n...         {\"name\": \"ehkrabs\", \"fullname\": \"Eugene H. Krabs\"},\n...     ]\n... )\n>>> stmt = stmt.on_conflict_do_update(\n...     index_elements=[User.name], set_=dict(fullname=stmt.excluded.fullname)\n... )\n>>> session.execute(stmt)\nINSERT  INTO  user_account  (name,  fullname)\nVALUES  (?,  ?),  (?,  ?),  (?,  ?),  (?,  ?),  (?,  ?)\nON  CONFLICT  (name)  DO  UPDATE  SET  fullname  =  excluded.fullname\n[...]  ('spongebob',  'Spongebob Squarepants',  'sandy',  'Sandy Cheeks',\n'patrick',  'Patrick Star',  'squidward',  'Squidward Tentacles',\n'ehkrabs',  'Eugene H. Krabs')\n<...>\n```", "```py\n>>> result = session.scalars(\n...     stmt.returning(User), execution_options={\"populate_existing\": True}\n... )\nINSERT  INTO  user_account  (name,  fullname)\nVALUES  (?,  ?),  (?,  ?),  (?,  ?),  (?,  ?),  (?,  ?)\nON  CONFLICT  (name)  DO  UPDATE  SET  fullname  =  excluded.fullname\nRETURNING  id,  name,  fullname,  species\n[...]  ('spongebob',  'Spongebob Squarepants',  'sandy',  'Sandy Cheeks',\n'patrick',  'Patrick Star',  'squidward',  'Squidward Tentacles',\n'ehkrabs',  'Eugene H. Krabs')\n>>> print(result.all())\n[User(name='spongebob', fullname='Spongebob Squarepants'),\n User(name='sandy', fullname='Sandy Cheeks'),\n User(name='patrick', fullname='Patrick Star'),\n User(name='squidward', fullname='Squidward Tentacles'),\n User(name='ehkrabs', fullname='Eugene H. Krabs')]\n```", "```py\n>>> from sqlalchemy import update\n>>> session.execute(\n...     update(User),\n...     [\n...         {\"id\": 1, \"fullname\": \"Spongebob Squarepants\"},\n...         {\"id\": 3, \"fullname\": \"Patrick Star\"},\n...         {\"id\": 5, \"fullname\": \"Eugene H. Krabs\"},\n...     ],\n... )\nUPDATE  user_account  SET  fullname=?  WHERE  user_account.id  =  ?\n[...]  [('Spongebob Squarepants',  1),  ('Patrick Star',  3),  ('Eugene H. Krabs',  5)]\n<...>\n```", "```py\n>>> from sqlalchemy import bindparam\n>>> session.connection().execute(\n...     update(User).where(User.name == bindparam(\"u_name\")),\n...     [\n...         {\"u_name\": \"spongebob\", \"fullname\": \"Spongebob Squarepants\"},\n...         {\"u_name\": \"patrick\", \"fullname\": \"Patrick Star\"},\n...     ],\n... )\nUPDATE  user_account  SET  fullname=?  WHERE  user_account.name  =  ?\n[...]  [('Spongebob Squarepants',  'spongebob'),  ('Patrick Star',  'patrick')]\n<...>\n```", "```py\n>>> session.execute(\n...     update(Manager),\n...     [\n...         {\n...             \"id\": 1,\n...             \"name\": \"scheeks\",\n...             \"manager_name\": \"Sandy Cheeks, President\",\n...         },\n...         {\n...             \"id\": 2,\n...             \"name\": \"eugene\",\n...             \"manager_name\": \"Eugene H. Krabs, VP Marketing\",\n...         },\n...     ],\n... )\nUPDATE  employee  SET  name=?  WHERE  employee.id  =  ?\n[...]  [('scheeks',  1),  ('eugene',  2)]\nUPDATE  manager  SET  manager_name=?  WHERE  manager.id  =  ?\n[...]  [('Sandy Cheeks, President',  1),  ('Eugene H. Krabs, VP Marketing',  2)]\n<...>\n```", "```py\nsession.bulk_update_mappings(\n User,\n [\n {\"id\": 1, \"name\": \"scheeks\", \"manager_name\": \"Sandy Cheeks, President\"},\n {\"id\": 2, \"name\": \"eugene\", \"manager_name\": \"Eugene H. Krabs, VP Marketing\"},\n ],\n)\n```", "```py\nfrom sqlalchemy import update\n\nsession.execute(\n update(User),\n [\n {\"id\": 1, \"name\": \"scheeks\", \"manager_name\": \"Sandy Cheeks, President\"},\n {\"id\": 2, \"name\": \"eugene\", \"manager_name\": \"Eugene H. Krabs, VP Marketing\"},\n ],\n)\n```", "```py\n>>> from sqlalchemy import update\n>>> stmt = (\n...     update(User)\n...     .where(User.name.in_([\"squidward\", \"sandy\"]))\n...     .values(fullname=\"Name starts with S\")\n... )\n>>> session.execute(stmt)\nUPDATE  user_account  SET  fullname=?  WHERE  user_account.name  IN  (?,  ?)\n[...]  ('Name starts with S',  'squidward',  'sandy')\n<...>\n```", "```py\n>>> from sqlalchemy import delete\n>>> stmt = delete(User).where(User.name.in_([\"squidward\", \"sandy\"]))\n>>> session.execute(stmt)\nDELETE  FROM  user_account  WHERE  user_account.name  IN  (?,  ?)\n[...]  ('squidward',  'sandy')\n<...>\n```", "```py\n>>> from sqlalchemy import update\n>>> stmt = (\n...     update(User).where(User.name == \"squidward\").values(fullname=\"Squidward Tentacles\")\n... )\n>>> session.execute(stmt, execution_options={\"synchronize_session\": False})\nUPDATE  user_account  SET  fullname=?  WHERE  user_account.name  =  ?\n[...]  ('Squidward Tentacles',  'squidward')\n<...>\n```", "```py\n>>> from sqlalchemy import update\n>>> stmt = (\n...     update(User)\n...     .where(User.name == \"squidward\")\n...     .values(fullname=\"Squidward Tentacles\")\n...     .execution_options(synchronize_session=False)\n... )\n>>> session.execute(stmt)\nUPDATE  user_account  SET  fullname=?  WHERE  user_account.name  =  ?\n[...]  ('Squidward Tentacles',  'squidward')\n<...>\n```", "```py\n>>> from sqlalchemy import update\n>>> stmt = (\n...     update(User)\n...     .where(User.name == \"squidward\")\n...     .values(fullname=\"Squidward Tentacles\")\n...     .returning(User)\n... )\n>>> result = session.scalars(stmt)\nUPDATE  user_account  SET  fullname=?  WHERE  user_account.name  =  ?\nRETURNING  id,  name,  fullname,  species\n[...]  ('Squidward Tentacles',  'squidward')\n>>> print(result.all())\n[User(name='squidward', fullname='Squidward Tentacles')]\n```", "```py\n>>> stmt = (\n...     update(Manager)\n...     .where(Manager.id == 1)\n...     .values(manager_name=\"Sandy Cheeks, President\")\n... )\n>>> session.execute(stmt)\nUPDATE  manager  SET  manager_name=?  WHERE  manager.id  =  ?\n[...]  ('Sandy Cheeks, President',  1)\n<...> \n```", "```py\n>>> stmt = (\n...     update(Manager)\n...     .where(\n...         Manager.id\n...         == select(Employee.id).where(Employee.name == \"sandy\").scalar_subquery()\n...     )\n...     .values(manager_name=\"Sandy Cheeks, President\")\n... )\n>>> session.execute(stmt)\nUPDATE  manager  SET  manager_name=?  WHERE  manager.id  =  (SELECT  employee.id\nFROM  employee\nWHERE  employee.name  =  ?)  RETURNING  id\n[...]  ('Sandy Cheeks, President',  'sandy')\n<...>\n```", "```py\n>>> stmt = (\n...     update(Manager)\n...     .where(Manager.id == Employee.id, Employee.name == \"sandy\")\n...     .values(manager_name=\"Sandy Cheeks, President\")\n... )\n>>> session.execute(stmt)\nUPDATE  manager  SET  manager_name=?  FROM  employee\nWHERE  manager.id  =  employee.id  AND  employee.name  =  ?\n[...]  ('Sandy Cheeks, President',  'sandy')\n<...>\n```", "```py\n>>> from sqlalchemy import delete\n>>> session.execute(delete(Manager).where(Manager.id == 1))\nDELETE  FROM  manager  WHERE  manager.id  =  ?\n[...]  (1,)\n<...>\n>>> session.execute(delete(Employee).where(Employee.id == 1))\nDELETE  FROM  employee  WHERE  employee.id  =  ?\n[...]  (1,)\n<...>\n```", "```py\n>>> from sqlalchemy import insert\n>>> session.execute(\n...     insert(User),\n...     [\n...         {\"name\": \"spongebob\", \"fullname\": \"Spongebob Squarepants\"},\n...         {\"name\": \"sandy\", \"fullname\": \"Sandy Cheeks\"},\n...         {\"name\": \"patrick\", \"fullname\": \"Patrick Star\"},\n...         {\"name\": \"squidward\", \"fullname\": \"Squidward Tentacles\"},\n...         {\"name\": \"ehkrabs\", \"fullname\": \"Eugene H. Krabs\"},\n...     ],\n... )\nINSERT  INTO  user_account  (name,  fullname)  VALUES  (?,  ?)\n[...]  [('spongebob',  'Spongebob Squarepants'),  ('sandy',  'Sandy Cheeks'),  ('patrick',  'Patrick Star'),\n('squidward',  'Squidward Tentacles'),  ('ehkrabs',  'Eugene H. Krabs')]\n<...>\n```", "```py\n>>> users = session.scalars(\n...     insert(User).returning(User),\n...     [\n...         {\"name\": \"spongebob\", \"fullname\": \"Spongebob Squarepants\"},\n...         {\"name\": \"sandy\", \"fullname\": \"Sandy Cheeks\"},\n...         {\"name\": \"patrick\", \"fullname\": \"Patrick Star\"},\n...         {\"name\": \"squidward\", \"fullname\": \"Squidward Tentacles\"},\n...         {\"name\": \"ehkrabs\", \"fullname\": \"Eugene H. Krabs\"},\n...     ],\n... )\nINSERT  INTO  user_account  (name,  fullname)\nVALUES  (?,  ?),  (?,  ?),  (?,  ?),  (?,  ?),  (?,  ?)\nRETURNING  id,  name,  fullname,  species\n[...]  ('spongebob',  'Spongebob Squarepants',  'sandy',  'Sandy Cheeks',\n'patrick',  'Patrick Star',  'squidward',  'Squidward Tentacles',\n'ehkrabs',  'Eugene H. Krabs')\n>>> print(users.all())\n[User(name='spongebob', fullname='Spongebob Squarepants'),\n User(name='sandy', fullname='Sandy Cheeks'),\n User(name='patrick', fullname='Patrick Star'),\n User(name='squidward', fullname='Squidward Tentacles'),\n User(name='ehkrabs', fullname='Eugene H. Krabs')]\n```", "```py\n>>> data = [\n...     {\"name\": \"pearl\", \"fullname\": \"Pearl Krabs\"},\n...     {\"name\": \"plankton\", \"fullname\": \"Plankton\"},\n...     {\"name\": \"gary\", \"fullname\": \"Gary\"},\n... ]\n>>> user_ids = session.scalars(\n...     insert(User).returning(User.id, sort_by_parameter_order=True), data\n... )\nINSERT  INTO  user_account  (name,  fullname)  VALUES  (?,  ?)  RETURNING  id\n[...  (insertmanyvalues)  1/3  (ordered;  batch  not  supported)]  ('pearl',  'Pearl Krabs')\nINSERT  INTO  user_account  (name,  fullname)  VALUES  (?,  ?)  RETURNING  id\n[insertmanyvalues  2/3  (ordered;  batch  not  supported)]  ('plankton',  'Plankton')\nINSERT  INTO  user_account  (name,  fullname)  VALUES  (?,  ?)  RETURNING  id\n[insertmanyvalues  3/3  (ordered;  batch  not  supported)]  ('gary',  'Gary')\n>>> for user_id, input_record in zip(user_ids, data):\n...     input_record[\"id\"] = user_id\n>>> print(data)\n[{'name': 'pearl', 'fullname': 'Pearl Krabs', 'id': 6},\n{'name': 'plankton', 'fullname': 'Plankton', 'id': 7},\n{'name': 'gary', 'fullname': 'Gary', 'id': 8}]\n```", "```py\n>>> users = session.scalars(\n...     insert(User).returning(User),\n...     [\n...         {\n...             \"name\": \"spongebob\",\n...             \"fullname\": \"Spongebob Squarepants\",\n...             \"species\": \"Sea Sponge\",\n...         },\n...         {\"name\": \"sandy\", \"fullname\": \"Sandy Cheeks\", \"species\": \"Squirrel\"},\n...         {\"name\": \"patrick\", \"species\": \"Starfish\"},\n...         {\n...             \"name\": \"squidward\",\n...             \"fullname\": \"Squidward Tentacles\",\n...             \"species\": \"Squid\",\n...         },\n...         {\"name\": \"ehkrabs\", \"fullname\": \"Eugene H. Krabs\", \"species\": \"Crab\"},\n...     ],\n... )\nINSERT  INTO  user_account  (name,  fullname,  species)\nVALUES  (?,  ?,  ?),  (?,  ?,  ?)  RETURNING  id,  name,  fullname,  species\n[...  (insertmanyvalues)  1/1  (unordered)]  ('spongebob',  'Spongebob Squarepants',  'Sea Sponge',\n'sandy',  'Sandy Cheeks',  'Squirrel')\nINSERT  INTO  user_account  (name,  species)\nVALUES  (?,  ?)  RETURNING  id,  name,  fullname,  species\n[...]  ('patrick',  'Starfish')\nINSERT  INTO  user_account  (name,  fullname,  species)\nVALUES  (?,  ?,  ?),  (?,  ?,  ?)  RETURNING  id,  name,  fullname,  species\n[...  (insertmanyvalues)  1/1  (unordered)]  ('squidward',  'Squidward Tentacles',\n'Squid',  'ehkrabs',  'Eugene H. Krabs',  'Crab') \n```", "```py\n>>> session.execute(\n...     insert(User),\n...     [\n...         {\n...             \"name\": \"name_a\",\n...             \"fullname\": \"Employee A\",\n...             \"species\": \"Squid\",\n...         },\n...         {\n...             \"name\": \"name_b\",\n...             \"fullname\": \"Employee B\",\n...             \"species\": \"Squirrel\",\n...         },\n...         {\n...             \"name\": \"name_c\",\n...             \"fullname\": \"Employee C\",\n...             \"species\": None,\n...         },\n...         {\n...             \"name\": \"name_d\",\n...             \"fullname\": \"Employee D\",\n...             \"species\": \"Bluefish\",\n...         },\n...     ],\n... )\nINSERT  INTO  user_account  (name,  fullname,  species)  VALUES  (?,  ?,  ?)\n[...]  [('name_a',  'Employee A',  'Squid'),  ('name_b',  'Employee B',  'Squirrel')]\nINSERT  INTO  user_account  (name,  fullname)  VALUES  (?,  ?)\n[...]  ('name_c',  'Employee C')\nINSERT  INTO  user_account  (name,  fullname,  species)  VALUES  (?,  ?,  ?)\n[...]  ('name_d',  'Employee D',  'Bluefish')\n... \n```", "```py\n>>> session.execute(\n...     insert(User).execution_options(render_nulls=True),\n...     [\n...         {\n...             \"name\": \"name_a\",\n...             \"fullname\": \"Employee A\",\n...             \"species\": \"Squid\",\n...         },\n...         {\n...             \"name\": \"name_b\",\n...             \"fullname\": \"Employee B\",\n...             \"species\": \"Squirrel\",\n...         },\n...         {\n...             \"name\": \"name_c\",\n...             \"fullname\": \"Employee C\",\n...             \"species\": None,\n...         },\n...         {\n...             \"name\": \"name_d\",\n...             \"fullname\": \"Employee D\",\n...             \"species\": \"Bluefish\",\n...         },\n...     ],\n... )\nINSERT  INTO  user_account  (name,  fullname,  species)  VALUES  (?,  ?,  ?)\n[...]  [('name_a',  'Employee A',  'Squid'),  ('name_b',  'Employee B',  'Squirrel'),  ('name_c',  'Employee C',  None),  ('name_d',  'Employee D',  'Bluefish')]\n... \n```", "```py\n>>> managers = session.scalars(\n...     insert(Manager).returning(Manager),\n...     [\n...         {\"name\": \"sandy\", \"manager_name\": \"Sandy Cheeks\"},\n...         {\"name\": \"ehkrabs\", \"manager_name\": \"Eugene H. Krabs\"},\n...     ],\n... )\nINSERT  INTO  employee  (name,  type)  VALUES  (?,  ?)  RETURNING  id,  name,  type\n[...  (insertmanyvalues)  1/2  (ordered;  batch  not  supported)]  ('sandy',  'manager')\nINSERT  INTO  employee  (name,  type)  VALUES  (?,  ?)  RETURNING  id,  name,  type\n[insertmanyvalues  2/2  (ordered;  batch  not  supported)]  ('ehkrabs',  'manager')\nINSERT  INTO  manager  (id,  manager_name)  VALUES  (?,  ?),  (?,  ?)  RETURNING  id,  manager_name,  id  AS  id__1\n[...  (insertmanyvalues)  1/1  (ordered)]  (1,  'Sandy Cheeks',  2,  'Eugene H. Krabs') \n```", "```py\nimport datetime\n\nclass LogRecord(Base):\n    __tablename__ = \"log_record\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    message: Mapped[str]\n    code: Mapped[str]\n    timestamp: Mapped[datetime.datetime]\n```", "```py\n>>> from sqlalchemy import func\n>>> log_record_result = session.scalars(\n...     insert(LogRecord).values(code=\"SQLA\", timestamp=func.now()).returning(LogRecord),\n...     [\n...         {\"message\": \"log message #1\"},\n...         {\"message\": \"log message #2\"},\n...         {\"message\": \"log message #3\"},\n...         {\"message\": \"log message #4\"},\n...     ],\n... )\nINSERT  INTO  log_record  (message,  code,  timestamp)\nVALUES  (?,  ?,  CURRENT_TIMESTAMP),  (?,  ?,  CURRENT_TIMESTAMP),\n(?,  ?,  CURRENT_TIMESTAMP),  (?,  ?,  CURRENT_TIMESTAMP)\nRETURNING  id,  message,  code,  timestamp\n[...  (insertmanyvalues)  1/1  (unordered)]  ('log message #1',  'SQLA',  'log message #2',\n'SQLA',  'log message #3',  'SQLA',  'log message #4',  'SQLA')\n>>> print(log_record_result.all())\n[LogRecord('log message #1', 'SQLA', datetime.datetime(...)),\n LogRecord('log message #2', 'SQLA', datetime.datetime(...)),\n LogRecord('log message #3', 'SQLA', datetime.datetime(...)),\n LogRecord('log message #4', 'SQLA', datetime.datetime(...))]\n```", "```py\n>>> from sqlalchemy import select\n>>> address_result = session.scalars(\n...     insert(Address)\n...     .values(\n...         [\n...             {\n...                 \"user_id\": select(User.id).where(User.name == \"sandy\"),\n...                 \"email_address\": \"sandy@company.com\",\n...             },\n...             {\n...                 \"user_id\": select(User.id).where(User.name == \"spongebob\"),\n...                 \"email_address\": \"spongebob@company.com\",\n...             },\n...             {\n...                 \"user_id\": select(User.id).where(User.name == \"patrick\"),\n...                 \"email_address\": \"patrick@company.com\",\n...             },\n...         ]\n...     )\n...     .returning(Address),\n... )\nINSERT  INTO  address  (user_id,  email_address)  VALUES\n((SELECT  user_account.id\nFROM  user_account\nWHERE  user_account.name  =  ?),  ?),  ((SELECT  user_account.id\nFROM  user_account\nWHERE  user_account.name  =  ?),  ?),  ((SELECT  user_account.id\nFROM  user_account\nWHERE  user_account.name  =  ?),  ?)  RETURNING  id,  user_id,  email_address\n[...]  ('sandy',  'sandy@company.com',  'spongebob',  'spongebob@company.com',\n'patrick',  'patrick@company.com')\n>>> print(address_result.all())\n[Address(email_address='sandy@company.com'),\n Address(email_address='spongebob@company.com'),\n Address(email_address='patrick@company.com')]\n```", "```py\nsession.bulk_insert_mappings(User, [{\"name\": \"u1\"}, {\"name\": \"u2\"}, {\"name\": \"u3\"}])\n```", "```py\nfrom sqlalchemy import insert\n\nsession.execute(insert(User), [{\"name\": \"u1\"}, {\"name\": \"u2\"}, {\"name\": \"u3\"}])\n```", "```py\n>>> from sqlalchemy.dialects.sqlite import insert as sqlite_upsert\n>>> stmt = sqlite_upsert(User).values(\n...     [\n...         {\"name\": \"spongebob\", \"fullname\": \"Spongebob Squarepants\"},\n...         {\"name\": \"sandy\", \"fullname\": \"Sandy Cheeks\"},\n...         {\"name\": \"patrick\", \"fullname\": \"Patrick Star\"},\n...         {\"name\": \"squidward\", \"fullname\": \"Squidward Tentacles\"},\n...         {\"name\": \"ehkrabs\", \"fullname\": \"Eugene H. Krabs\"},\n...     ]\n... )\n>>> stmt = stmt.on_conflict_do_update(\n...     index_elements=[User.name], set_=dict(fullname=stmt.excluded.fullname)\n... )\n>>> session.execute(stmt)\nINSERT  INTO  user_account  (name,  fullname)\nVALUES  (?,  ?),  (?,  ?),  (?,  ?),  (?,  ?),  (?,  ?)\nON  CONFLICT  (name)  DO  UPDATE  SET  fullname  =  excluded.fullname\n[...]  ('spongebob',  'Spongebob Squarepants',  'sandy',  'Sandy Cheeks',\n'patrick',  'Patrick Star',  'squidward',  'Squidward Tentacles',\n'ehkrabs',  'Eugene H. Krabs')\n<...>\n```", "```py\n>>> result = session.scalars(\n...     stmt.returning(User), execution_options={\"populate_existing\": True}\n... )\nINSERT  INTO  user_account  (name,  fullname)\nVALUES  (?,  ?),  (?,  ?),  (?,  ?),  (?,  ?),  (?,  ?)\nON  CONFLICT  (name)  DO  UPDATE  SET  fullname  =  excluded.fullname\nRETURNING  id,  name,  fullname,  species\n[...]  ('spongebob',  'Spongebob Squarepants',  'sandy',  'Sandy Cheeks',\n'patrick',  'Patrick Star',  'squidward',  'Squidward Tentacles',\n'ehkrabs',  'Eugene H. Krabs')\n>>> print(result.all())\n[User(name='spongebob', fullname='Spongebob Squarepants'),\n User(name='sandy', fullname='Sandy Cheeks'),\n User(name='patrick', fullname='Patrick Star'),\n User(name='squidward', fullname='Squidward Tentacles'),\n User(name='ehkrabs', fullname='Eugene H. Krabs')]\n```", "```py\n>>> users = session.scalars(\n...     insert(User).returning(User),\n...     [\n...         {\"name\": \"spongebob\", \"fullname\": \"Spongebob Squarepants\"},\n...         {\"name\": \"sandy\", \"fullname\": \"Sandy Cheeks\"},\n...         {\"name\": \"patrick\", \"fullname\": \"Patrick Star\"},\n...         {\"name\": \"squidward\", \"fullname\": \"Squidward Tentacles\"},\n...         {\"name\": \"ehkrabs\", \"fullname\": \"Eugene H. Krabs\"},\n...     ],\n... )\nINSERT  INTO  user_account  (name,  fullname)\nVALUES  (?,  ?),  (?,  ?),  (?,  ?),  (?,  ?),  (?,  ?)\nRETURNING  id,  name,  fullname,  species\n[...]  ('spongebob',  'Spongebob Squarepants',  'sandy',  'Sandy Cheeks',\n'patrick',  'Patrick Star',  'squidward',  'Squidward Tentacles',\n'ehkrabs',  'Eugene H. Krabs')\n>>> print(users.all())\n[User(name='spongebob', fullname='Spongebob Squarepants'),\n User(name='sandy', fullname='Sandy Cheeks'),\n User(name='patrick', fullname='Patrick Star'),\n User(name='squidward', fullname='Squidward Tentacles'),\n User(name='ehkrabs', fullname='Eugene H. Krabs')]\n```", "```py\n>>> data = [\n...     {\"name\": \"pearl\", \"fullname\": \"Pearl Krabs\"},\n...     {\"name\": \"plankton\", \"fullname\": \"Plankton\"},\n...     {\"name\": \"gary\", \"fullname\": \"Gary\"},\n... ]\n>>> user_ids = session.scalars(\n...     insert(User).returning(User.id, sort_by_parameter_order=True), data\n... )\nINSERT  INTO  user_account  (name,  fullname)  VALUES  (?,  ?)  RETURNING  id\n[...  (insertmanyvalues)  1/3  (ordered;  batch  not  supported)]  ('pearl',  'Pearl Krabs')\nINSERT  INTO  user_account  (name,  fullname)  VALUES  (?,  ?)  RETURNING  id\n[insertmanyvalues  2/3  (ordered;  batch  not  supported)]  ('plankton',  'Plankton')\nINSERT  INTO  user_account  (name,  fullname)  VALUES  (?,  ?)  RETURNING  id\n[insertmanyvalues  3/3  (ordered;  batch  not  supported)]  ('gary',  'Gary')\n>>> for user_id, input_record in zip(user_ids, data):\n...     input_record[\"id\"] = user_id\n>>> print(data)\n[{'name': 'pearl', 'fullname': 'Pearl Krabs', 'id': 6},\n{'name': 'plankton', 'fullname': 'Plankton', 'id': 7},\n{'name': 'gary', 'fullname': 'Gary', 'id': 8}]\n```", "```py\n>>> data = [\n...     {\"name\": \"pearl\", \"fullname\": \"Pearl Krabs\"},\n...     {\"name\": \"plankton\", \"fullname\": \"Plankton\"},\n...     {\"name\": \"gary\", \"fullname\": \"Gary\"},\n... ]\n>>> user_ids = session.scalars(\n...     insert(User).returning(User.id, sort_by_parameter_order=True), data\n... )\nINSERT  INTO  user_account  (name,  fullname)  VALUES  (?,  ?)  RETURNING  id\n[...  (insertmanyvalues)  1/3  (ordered;  batch  not  supported)]  ('pearl',  'Pearl Krabs')\nINSERT  INTO  user_account  (name,  fullname)  VALUES  (?,  ?)  RETURNING  id\n[insertmanyvalues  2/3  (ordered;  batch  not  supported)]  ('plankton',  'Plankton')\nINSERT  INTO  user_account  (name,  fullname)  VALUES  (?,  ?)  RETURNING  id\n[insertmanyvalues  3/3  (ordered;  batch  not  supported)]  ('gary',  'Gary')\n>>> for user_id, input_record in zip(user_ids, data):\n...     input_record[\"id\"] = user_id\n>>> print(data)\n[{'name': 'pearl', 'fullname': 'Pearl Krabs', 'id': 6},\n{'name': 'plankton', 'fullname': 'Plankton', 'id': 7},\n{'name': 'gary', 'fullname': 'Gary', 'id': 8}]\n```", "```py\n>>> users = session.scalars(\n...     insert(User).returning(User),\n...     [\n...         {\n...             \"name\": \"spongebob\",\n...             \"fullname\": \"Spongebob Squarepants\",\n...             \"species\": \"Sea Sponge\",\n...         },\n...         {\"name\": \"sandy\", \"fullname\": \"Sandy Cheeks\", \"species\": \"Squirrel\"},\n...         {\"name\": \"patrick\", \"species\": \"Starfish\"},\n...         {\n...             \"name\": \"squidward\",\n...             \"fullname\": \"Squidward Tentacles\",\n...             \"species\": \"Squid\",\n...         },\n...         {\"name\": \"ehkrabs\", \"fullname\": \"Eugene H. Krabs\", \"species\": \"Crab\"},\n...     ],\n... )\nINSERT  INTO  user_account  (name,  fullname,  species)\nVALUES  (?,  ?,  ?),  (?,  ?,  ?)  RETURNING  id,  name,  fullname,  species\n[...  (insertmanyvalues)  1/1  (unordered)]  ('spongebob',  'Spongebob Squarepants',  'Sea Sponge',\n'sandy',  'Sandy Cheeks',  'Squirrel')\nINSERT  INTO  user_account  (name,  species)\nVALUES  (?,  ?)  RETURNING  id,  name,  fullname,  species\n[...]  ('patrick',  'Starfish')\nINSERT  INTO  user_account  (name,  fullname,  species)\nVALUES  (?,  ?,  ?),  (?,  ?,  ?)  RETURNING  id,  name,  fullname,  species\n[...  (insertmanyvalues)  1/1  (unordered)]  ('squidward',  'Squidward Tentacles',\n'Squid',  'ehkrabs',  'Eugene H. Krabs',  'Crab') \n```", "```py\n>>> session.execute(\n...     insert(User),\n...     [\n...         {\n...             \"name\": \"name_a\",\n...             \"fullname\": \"Employee A\",\n...             \"species\": \"Squid\",\n...         },\n...         {\n...             \"name\": \"name_b\",\n...             \"fullname\": \"Employee B\",\n...             \"species\": \"Squirrel\",\n...         },\n...         {\n...             \"name\": \"name_c\",\n...             \"fullname\": \"Employee C\",\n...             \"species\": None,\n...         },\n...         {\n...             \"name\": \"name_d\",\n...             \"fullname\": \"Employee D\",\n...             \"species\": \"Bluefish\",\n...         },\n...     ],\n... )\nINSERT  INTO  user_account  (name,  fullname,  species)  VALUES  (?,  ?,  ?)\n[...]  [('name_a',  'Employee A',  'Squid'),  ('name_b',  'Employee B',  'Squirrel')]\nINSERT  INTO  user_account  (name,  fullname)  VALUES  (?,  ?)\n[...]  ('name_c',  'Employee C')\nINSERT  INTO  user_account  (name,  fullname,  species)  VALUES  (?,  ?,  ?)\n[...]  ('name_d',  'Employee D',  'Bluefish')\n... \n```", "```py\n>>> session.execute(\n...     insert(User).execution_options(render_nulls=True),\n...     [\n...         {\n...             \"name\": \"name_a\",\n...             \"fullname\": \"Employee A\",\n...             \"species\": \"Squid\",\n...         },\n...         {\n...             \"name\": \"name_b\",\n...             \"fullname\": \"Employee B\",\n...             \"species\": \"Squirrel\",\n...         },\n...         {\n...             \"name\": \"name_c\",\n...             \"fullname\": \"Employee C\",\n...             \"species\": None,\n...         },\n...         {\n...             \"name\": \"name_d\",\n...             \"fullname\": \"Employee D\",\n...             \"species\": \"Bluefish\",\n...         },\n...     ],\n... )\nINSERT  INTO  user_account  (name,  fullname,  species)  VALUES  (?,  ?,  ?)\n[...]  [('name_a',  'Employee A',  'Squid'),  ('name_b',  'Employee B',  'Squirrel'),  ('name_c',  'Employee C',  None),  ('name_d',  'Employee D',  'Bluefish')]\n... \n```", "```py\n>>> managers = session.scalars(\n...     insert(Manager).returning(Manager),\n...     [\n...         {\"name\": \"sandy\", \"manager_name\": \"Sandy Cheeks\"},\n...         {\"name\": \"ehkrabs\", \"manager_name\": \"Eugene H. Krabs\"},\n...     ],\n... )\nINSERT  INTO  employee  (name,  type)  VALUES  (?,  ?)  RETURNING  id,  name,  type\n[...  (insertmanyvalues)  1/2  (ordered;  batch  not  supported)]  ('sandy',  'manager')\nINSERT  INTO  employee  (name,  type)  VALUES  (?,  ?)  RETURNING  id,  name,  type\n[insertmanyvalues  2/2  (ordered;  batch  not  supported)]  ('ehkrabs',  'manager')\nINSERT  INTO  manager  (id,  manager_name)  VALUES  (?,  ?),  (?,  ?)  RETURNING  id,  manager_name,  id  AS  id__1\n[...  (insertmanyvalues)  1/1  (ordered)]  (1,  'Sandy Cheeks',  2,  'Eugene H. Krabs') \n```", "```py\nimport datetime\n\nclass LogRecord(Base):\n    __tablename__ = \"log_record\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    message: Mapped[str]\n    code: Mapped[str]\n    timestamp: Mapped[datetime.datetime]\n```", "```py\n>>> from sqlalchemy import func\n>>> log_record_result = session.scalars(\n...     insert(LogRecord).values(code=\"SQLA\", timestamp=func.now()).returning(LogRecord),\n...     [\n...         {\"message\": \"log message #1\"},\n...         {\"message\": \"log message #2\"},\n...         {\"message\": \"log message #3\"},\n...         {\"message\": \"log message #4\"},\n...     ],\n... )\nINSERT  INTO  log_record  (message,  code,  timestamp)\nVALUES  (?,  ?,  CURRENT_TIMESTAMP),  (?,  ?,  CURRENT_TIMESTAMP),\n(?,  ?,  CURRENT_TIMESTAMP),  (?,  ?,  CURRENT_TIMESTAMP)\nRETURNING  id,  message,  code,  timestamp\n[...  (insertmanyvalues)  1/1  (unordered)]  ('log message #1',  'SQLA',  'log message #2',\n'SQLA',  'log message #3',  'SQLA',  'log message #4',  'SQLA')\n>>> print(log_record_result.all())\n[LogRecord('log message #1', 'SQLA', datetime.datetime(...)),\n LogRecord('log message #2', 'SQLA', datetime.datetime(...)),\n LogRecord('log message #3', 'SQLA', datetime.datetime(...)),\n LogRecord('log message #4', 'SQLA', datetime.datetime(...))]\n```", "```py\n>>> from sqlalchemy import select\n>>> address_result = session.scalars(\n...     insert(Address)\n...     .values(\n...         [\n...             {\n...                 \"user_id\": select(User.id).where(User.name == \"sandy\"),\n...                 \"email_address\": \"sandy@company.com\",\n...             },\n...             {\n...                 \"user_id\": select(User.id).where(User.name == \"spongebob\"),\n...                 \"email_address\": \"spongebob@company.com\",\n...             },\n...             {\n...                 \"user_id\": select(User.id).where(User.name == \"patrick\"),\n...                 \"email_address\": \"patrick@company.com\",\n...             },\n...         ]\n...     )\n...     .returning(Address),\n... )\nINSERT  INTO  address  (user_id,  email_address)  VALUES\n((SELECT  user_account.id\nFROM  user_account\nWHERE  user_account.name  =  ?),  ?),  ((SELECT  user_account.id\nFROM  user_account\nWHERE  user_account.name  =  ?),  ?),  ((SELECT  user_account.id\nFROM  user_account\nWHERE  user_account.name  =  ?),  ?)  RETURNING  id,  user_id,  email_address\n[...]  ('sandy',  'sandy@company.com',  'spongebob',  'spongebob@company.com',\n'patrick',  'patrick@company.com')\n>>> print(address_result.all())\n[Address(email_address='sandy@company.com'),\n Address(email_address='spongebob@company.com'),\n Address(email_address='patrick@company.com')]\n```", "```py\n>>> from sqlalchemy import select\n>>> address_result = session.scalars(\n...     insert(Address)\n...     .values(\n...         [\n...             {\n...                 \"user_id\": select(User.id).where(User.name == \"sandy\"),\n...                 \"email_address\": \"sandy@company.com\",\n...             },\n...             {\n...                 \"user_id\": select(User.id).where(User.name == \"spongebob\"),\n...                 \"email_address\": \"spongebob@company.com\",\n...             },\n...             {\n...                 \"user_id\": select(User.id).where(User.name == \"patrick\"),\n...                 \"email_address\": \"patrick@company.com\",\n...             },\n...         ]\n...     )\n...     .returning(Address),\n... )\nINSERT  INTO  address  (user_id,  email_address)  VALUES\n((SELECT  user_account.id\nFROM  user_account\nWHERE  user_account.name  =  ?),  ?),  ((SELECT  user_account.id\nFROM  user_account\nWHERE  user_account.name  =  ?),  ?),  ((SELECT  user_account.id\nFROM  user_account\nWHERE  user_account.name  =  ?),  ?)  RETURNING  id,  user_id,  email_address\n[...]  ('sandy',  'sandy@company.com',  'spongebob',  'spongebob@company.com',\n'patrick',  'patrick@company.com')\n>>> print(address_result.all())\n[Address(email_address='sandy@company.com'),\n Address(email_address='spongebob@company.com'),\n Address(email_address='patrick@company.com')]\n```", "```py\nsession.bulk_insert_mappings(User, [{\"name\": \"u1\"}, {\"name\": \"u2\"}, {\"name\": \"u3\"}])\n```", "```py\nfrom sqlalchemy import insert\n\nsession.execute(insert(User), [{\"name\": \"u1\"}, {\"name\": \"u2\"}, {\"name\": \"u3\"}])\n```", "```py\n>>> from sqlalchemy.dialects.sqlite import insert as sqlite_upsert\n>>> stmt = sqlite_upsert(User).values(\n...     [\n...         {\"name\": \"spongebob\", \"fullname\": \"Spongebob Squarepants\"},\n...         {\"name\": \"sandy\", \"fullname\": \"Sandy Cheeks\"},\n...         {\"name\": \"patrick\", \"fullname\": \"Patrick Star\"},\n...         {\"name\": \"squidward\", \"fullname\": \"Squidward Tentacles\"},\n...         {\"name\": \"ehkrabs\", \"fullname\": \"Eugene H. Krabs\"},\n...     ]\n... )\n>>> stmt = stmt.on_conflict_do_update(\n...     index_elements=[User.name], set_=dict(fullname=stmt.excluded.fullname)\n... )\n>>> session.execute(stmt)\nINSERT  INTO  user_account  (name,  fullname)\nVALUES  (?,  ?),  (?,  ?),  (?,  ?),  (?,  ?),  (?,  ?)\nON  CONFLICT  (name)  DO  UPDATE  SET  fullname  =  excluded.fullname\n[...]  ('spongebob',  'Spongebob Squarepants',  'sandy',  'Sandy Cheeks',\n'patrick',  'Patrick Star',  'squidward',  'Squidward Tentacles',\n'ehkrabs',  'Eugene H. Krabs')\n<...>\n```", "```py\n>>> result = session.scalars(\n...     stmt.returning(User), execution_options={\"populate_existing\": True}\n... )\nINSERT  INTO  user_account  (name,  fullname)\nVALUES  (?,  ?),  (?,  ?),  (?,  ?),  (?,  ?),  (?,  ?)\nON  CONFLICT  (name)  DO  UPDATE  SET  fullname  =  excluded.fullname\nRETURNING  id,  name,  fullname,  species\n[...]  ('spongebob',  'Spongebob Squarepants',  'sandy',  'Sandy Cheeks',\n'patrick',  'Patrick Star',  'squidward',  'Squidward Tentacles',\n'ehkrabs',  'Eugene H. Krabs')\n>>> print(result.all())\n[User(name='spongebob', fullname='Spongebob Squarepants'),\n User(name='sandy', fullname='Sandy Cheeks'),\n User(name='patrick', fullname='Patrick Star'),\n User(name='squidward', fullname='Squidward Tentacles'),\n User(name='ehkrabs', fullname='Eugene H. Krabs')]\n```", "```py\n>>> result = session.scalars(\n...     stmt.returning(User), execution_options={\"populate_existing\": True}\n... )\nINSERT  INTO  user_account  (name,  fullname)\nVALUES  (?,  ?),  (?,  ?),  (?,  ?),  (?,  ?),  (?,  ?)\nON  CONFLICT  (name)  DO  UPDATE  SET  fullname  =  excluded.fullname\nRETURNING  id,  name,  fullname,  species\n[...]  ('spongebob',  'Spongebob Squarepants',  'sandy',  'Sandy Cheeks',\n'patrick',  'Patrick Star',  'squidward',  'Squidward Tentacles',\n'ehkrabs',  'Eugene H. Krabs')\n>>> print(result.all())\n[User(name='spongebob', fullname='Spongebob Squarepants'),\n User(name='sandy', fullname='Sandy Cheeks'),\n User(name='patrick', fullname='Patrick Star'),\n User(name='squidward', fullname='Squidward Tentacles'),\n User(name='ehkrabs', fullname='Eugene H. Krabs')]\n```", "```py\n>>> from sqlalchemy import update\n>>> session.execute(\n...     update(User),\n...     [\n...         {\"id\": 1, \"fullname\": \"Spongebob Squarepants\"},\n...         {\"id\": 3, \"fullname\": \"Patrick Star\"},\n...         {\"id\": 5, \"fullname\": \"Eugene H. Krabs\"},\n...     ],\n... )\nUPDATE  user_account  SET  fullname=?  WHERE  user_account.id  =  ?\n[...]  [('Spongebob Squarepants',  1),  ('Patrick Star',  3),  ('Eugene H. Krabs',  5)]\n<...>\n```", "```py\n>>> from sqlalchemy import bindparam\n>>> session.connection().execute(\n...     update(User).where(User.name == bindparam(\"u_name\")),\n...     [\n...         {\"u_name\": \"spongebob\", \"fullname\": \"Spongebob Squarepants\"},\n...         {\"u_name\": \"patrick\", \"fullname\": \"Patrick Star\"},\n...     ],\n... )\nUPDATE  user_account  SET  fullname=?  WHERE  user_account.name  =  ?\n[...]  [('Spongebob Squarepants',  'spongebob'),  ('Patrick Star',  'patrick')]\n<...>\n```", "```py\n>>> session.execute(\n...     update(Manager),\n...     [\n...         {\n...             \"id\": 1,\n...             \"name\": \"scheeks\",\n...             \"manager_name\": \"Sandy Cheeks, President\",\n...         },\n...         {\n...             \"id\": 2,\n...             \"name\": \"eugene\",\n...             \"manager_name\": \"Eugene H. Krabs, VP Marketing\",\n...         },\n...     ],\n... )\nUPDATE  employee  SET  name=?  WHERE  employee.id  =  ?\n[...]  [('scheeks',  1),  ('eugene',  2)]\nUPDATE  manager  SET  manager_name=?  WHERE  manager.id  =  ?\n[...]  [('Sandy Cheeks, President',  1),  ('Eugene H. Krabs, VP Marketing',  2)]\n<...>\n```", "```py\nsession.bulk_update_mappings(\n User,\n [\n {\"id\": 1, \"name\": \"scheeks\", \"manager_name\": \"Sandy Cheeks, President\"},\n {\"id\": 2, \"name\": \"eugene\", \"manager_name\": \"Eugene H. Krabs, VP Marketing\"},\n ],\n)\n```", "```py\nfrom sqlalchemy import update\n\nsession.execute(\n update(User),\n [\n {\"id\": 1, \"name\": \"scheeks\", \"manager_name\": \"Sandy Cheeks, President\"},\n {\"id\": 2, \"name\": \"eugene\", \"manager_name\": \"Eugene H. Krabs, VP Marketing\"},\n ],\n)\n```", "```py\n>>> from sqlalchemy import bindparam\n>>> session.connection().execute(\n...     update(User).where(User.name == bindparam(\"u_name\")),\n...     [\n...         {\"u_name\": \"spongebob\", \"fullname\": \"Spongebob Squarepants\"},\n...         {\"u_name\": \"patrick\", \"fullname\": \"Patrick Star\"},\n...     ],\n... )\nUPDATE  user_account  SET  fullname=?  WHERE  user_account.name  =  ?\n[...]  [('Spongebob Squarepants',  'spongebob'),  ('Patrick Star',  'patrick')]\n<...>\n```", "```py\n>>> session.execute(\n...     update(Manager),\n...     [\n...         {\n...             \"id\": 1,\n...             \"name\": \"scheeks\",\n...             \"manager_name\": \"Sandy Cheeks, President\",\n...         },\n...         {\n...             \"id\": 2,\n...             \"name\": \"eugene\",\n...             \"manager_name\": \"Eugene H. Krabs, VP Marketing\",\n...         },\n...     ],\n... )\nUPDATE  employee  SET  name=?  WHERE  employee.id  =  ?\n[...]  [('scheeks',  1),  ('eugene',  2)]\nUPDATE  manager  SET  manager_name=?  WHERE  manager.id  =  ?\n[...]  [('Sandy Cheeks, President',  1),  ('Eugene H. Krabs, VP Marketing',  2)]\n<...>\n```", "```py\nsession.bulk_update_mappings(\n User,\n [\n {\"id\": 1, \"name\": \"scheeks\", \"manager_name\": \"Sandy Cheeks, President\"},\n {\"id\": 2, \"name\": \"eugene\", \"manager_name\": \"Eugene H. Krabs, VP Marketing\"},\n ],\n)\n```", "```py\nfrom sqlalchemy import update\n\nsession.execute(\n update(User),\n [\n {\"id\": 1, \"name\": \"scheeks\", \"manager_name\": \"Sandy Cheeks, President\"},\n {\"id\": 2, \"name\": \"eugene\", \"manager_name\": \"Eugene H. Krabs, VP Marketing\"},\n ],\n)\n```", "```py\n>>> from sqlalchemy import update\n>>> stmt = (\n...     update(User)\n...     .where(User.name.in_([\"squidward\", \"sandy\"]))\n...     .values(fullname=\"Name starts with S\")\n... )\n>>> session.execute(stmt)\nUPDATE  user_account  SET  fullname=?  WHERE  user_account.name  IN  (?,  ?)\n[...]  ('Name starts with S',  'squidward',  'sandy')\n<...>\n```", "```py\n>>> from sqlalchemy import delete\n>>> stmt = delete(User).where(User.name.in_([\"squidward\", \"sandy\"]))\n>>> session.execute(stmt)\nDELETE  FROM  user_account  WHERE  user_account.name  IN  (?,  ?)\n[...]  ('squidward',  'sandy')\n<...>\n```", "```py\n>>> from sqlalchemy import update\n>>> stmt = (\n...     update(User).where(User.name == \"squidward\").values(fullname=\"Squidward Tentacles\")\n... )\n>>> session.execute(stmt, execution_options={\"synchronize_session\": False})\nUPDATE  user_account  SET  fullname=?  WHERE  user_account.name  =  ?\n[...]  ('Squidward Tentacles',  'squidward')\n<...>\n```", "```py\n>>> from sqlalchemy import update\n>>> stmt = (\n...     update(User)\n...     .where(User.name == \"squidward\")\n...     .values(fullname=\"Squidward Tentacles\")\n...     .execution_options(synchronize_session=False)\n... )\n>>> session.execute(stmt)\nUPDATE  user_account  SET  fullname=?  WHERE  user_account.name  =  ?\n[...]  ('Squidward Tentacles',  'squidward')\n<...>\n```", "```py\n>>> from sqlalchemy import update\n>>> stmt = (\n...     update(User)\n...     .where(User.name == \"squidward\")\n...     .values(fullname=\"Squidward Tentacles\")\n...     .returning(User)\n... )\n>>> result = session.scalars(stmt)\nUPDATE  user_account  SET  fullname=?  WHERE  user_account.name  =  ?\nRETURNING  id,  name,  fullname,  species\n[...]  ('Squidward Tentacles',  'squidward')\n>>> print(result.all())\n[User(name='squidward', fullname='Squidward Tentacles')]\n```", "```py\n>>> stmt = (\n...     update(Manager)\n...     .where(Manager.id == 1)\n...     .values(manager_name=\"Sandy Cheeks, President\")\n... )\n>>> session.execute(stmt)\nUPDATE  manager  SET  manager_name=?  WHERE  manager.id  =  ?\n[...]  ('Sandy Cheeks, President',  1)\n<...> \n```", "```py\n>>> stmt = (\n...     update(Manager)\n...     .where(\n...         Manager.id\n...         == select(Employee.id).where(Employee.name == \"sandy\").scalar_subquery()\n...     )\n...     .values(manager_name=\"Sandy Cheeks, President\")\n... )\n>>> session.execute(stmt)\nUPDATE  manager  SET  manager_name=?  WHERE  manager.id  =  (SELECT  employee.id\nFROM  employee\nWHERE  employee.name  =  ?)  RETURNING  id\n[...]  ('Sandy Cheeks, President',  'sandy')\n<...>\n```", "```py\n>>> stmt = (\n...     update(Manager)\n...     .where(Manager.id == Employee.id, Employee.name == \"sandy\")\n...     .values(manager_name=\"Sandy Cheeks, President\")\n... )\n>>> session.execute(stmt)\nUPDATE  manager  SET  manager_name=?  FROM  employee\nWHERE  manager.id  =  employee.id  AND  employee.name  =  ?\n[...]  ('Sandy Cheeks, President',  'sandy')\n<...>\n```", "```py\n>>> from sqlalchemy import delete\n>>> session.execute(delete(Manager).where(Manager.id == 1))\nDELETE  FROM  manager  WHERE  manager.id  =  ?\n[...]  (1,)\n<...>\n>>> session.execute(delete(Employee).where(Employee.id == 1))\nDELETE  FROM  employee  WHERE  employee.id  =  ?\n[...]  (1,)\n<...>\n```", "```py\n>>> from sqlalchemy import update\n>>> stmt = (\n...     update(User).where(User.name == \"squidward\").values(fullname=\"Squidward Tentacles\")\n... )\n>>> session.execute(stmt, execution_options={\"synchronize_session\": False})\nUPDATE  user_account  SET  fullname=?  WHERE  user_account.name  =  ?\n[...]  ('Squidward Tentacles',  'squidward')\n<...>\n```", "```py\n>>> from sqlalchemy import update\n>>> stmt = (\n...     update(User)\n...     .where(User.name == \"squidward\")\n...     .values(fullname=\"Squidward Tentacles\")\n...     .execution_options(synchronize_session=False)\n... )\n>>> session.execute(stmt)\nUPDATE  user_account  SET  fullname=?  WHERE  user_account.name  =  ?\n[...]  ('Squidward Tentacles',  'squidward')\n<...>\n```", "```py\n>>> from sqlalchemy import update\n>>> stmt = (\n...     update(User)\n...     .where(User.name == \"squidward\")\n...     .values(fullname=\"Squidward Tentacles\")\n...     .returning(User)\n... )\n>>> result = session.scalars(stmt)\nUPDATE  user_account  SET  fullname=?  WHERE  user_account.name  =  ?\nRETURNING  id,  name,  fullname,  species\n[...]  ('Squidward Tentacles',  'squidward')\n>>> print(result.all())\n[User(name='squidward', fullname='Squidward Tentacles')]\n```", "```py\n>>> stmt = (\n...     update(Manager)\n...     .where(Manager.id == 1)\n...     .values(manager_name=\"Sandy Cheeks, President\")\n... )\n>>> session.execute(stmt)\nUPDATE  manager  SET  manager_name=?  WHERE  manager.id  =  ?\n[...]  ('Sandy Cheeks, President',  1)\n<...> \n```", "```py\n>>> stmt = (\n...     update(Manager)\n...     .where(\n...         Manager.id\n...         == select(Employee.id).where(Employee.name == \"sandy\").scalar_subquery()\n...     )\n...     .values(manager_name=\"Sandy Cheeks, President\")\n... )\n>>> session.execute(stmt)\nUPDATE  manager  SET  manager_name=?  WHERE  manager.id  =  (SELECT  employee.id\nFROM  employee\nWHERE  employee.name  =  ?)  RETURNING  id\n[...]  ('Sandy Cheeks, President',  'sandy')\n<...>\n```", "```py\n>>> stmt = (\n...     update(Manager)\n...     .where(Manager.id == Employee.id, Employee.name == \"sandy\")\n...     .values(manager_name=\"Sandy Cheeks, President\")\n... )\n>>> session.execute(stmt)\nUPDATE  manager  SET  manager_name=?  FROM  employee\nWHERE  manager.id  =  employee.id  AND  employee.name  =  ?\n[...]  ('Sandy Cheeks, President',  'sandy')\n<...>\n```", "```py\n>>> from sqlalchemy import delete\n>>> session.execute(delete(Manager).where(Manager.id == 1))\nDELETE  FROM  manager  WHERE  manager.id  =  ?\n[...]  (1,)\n<...>\n>>> session.execute(delete(Employee).where(Employee.id == 1))\nDELETE  FROM  employee  WHERE  employee.id  =  ?\n[...]  (1,)\n<...>\n```"]