- en: JAX Glossary of Terms
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JAX 术语表
- en: 原文：[`jax.readthedocs.io/en/latest/glossary.html`](https://jax.readthedocs.io/en/latest/glossary.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[`jax.readthedocs.io/en/latest/glossary.html`](https://jax.readthedocs.io/en/latest/glossary.html)
- en: Array
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 数组
- en: JAX’s analog of [`numpy.ndarray`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(in NumPy v2.0)"). See `jax.Array`.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: JAX 的 [`numpy.ndarray`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(在 NumPy v2.0 中)") 的类比。见 `jax.Array`。
- en: CPU
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: CPU
- en: Short for *Central Processing Unit*, CPUs are the standard computational architecture
    available in most computers. JAX can run computations on CPUs, but often can achieve
    much better performance on GPU and TPU.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 缩写*Central Processing Unit*，CPU 是大多数计算机中可用的标准计算架构。JAX 可以在 CPU 上运行计算，但通常在 GPU
    和 TPU 上可以实现更好的性能。
- en: Device
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 设备
- en: The generic name used to refer to the CPU, GPU, or TPU used by JAX to perform
    computations.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 用于指代 JAX 用于执行计算的 CPU、GPU 或 TPU 的通用名称。
- en: forward-mode autodiff
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: forward-mode autodiff
- en: See JVP
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 见 JVP
- en: functional programming
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 函数式编程
- en: A programming paradigm in which programs are defined by applying and composing
    pure functions. JAX is designed for use with functional programs.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 一种编程范式，程序通过应用和组合纯函数定义。JAX 设计用于函数式程序。
- en: GPU
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: GPU
- en: Short for *Graphical Processing Unit*, GPUs were originally specialized for
    operations related to rendering of images on screen, but now are much more general-purpose.
    JAX is able to target GPUs for fast operations on arrays (see also CPU and TPU).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 缩写*Graphical Processing Unit*，GPU 最初专门用于图像渲染相关操作，但现在更通用。JAX 能够针对 GPU 进行快速数组操作（参见
    CPU 和 TPU）。
- en: jaxpr
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: jaxpr
- en: Short for *JAX Expression*, a jaxpr is an intermediate representation of a computation
    that is generated by JAX, and is forwarded to XLA for compilation and execution.
    See Understanding Jaxprs for more discussion and examples.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 缩写*JAX Expression*，jaxpr 是由 JAX 生成的计算的中间表示形式，转发到 XLA 进行编译和执行。详见 Understanding
    Jaxprs 以获取更多讨论和示例。
- en: JIT
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: JIT
- en: Short for *Just In Time* compilation, JIT in JAX generally refers to the compilation
    of array operations to XLA, most often accomplished using `jax.jit()`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 缩写*Just In Time* 编译，JIT 在 JAX 中通常指将数组操作编译为 XLA，通常使用 `jax.jit()` 完成。
- en: JVP
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: JVP
- en: Short for *Jacobian Vector Product*, also sometimes known as *forward-mode*
    automatic differentiation. For more details, see Jacobian-Vector products (JVPs,
    aka forward-mode autodiff). In JAX, JVP is a transformation that is implemented
    via `jax.jvp()`. See also VJP.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 缩写*Jacobian Vector Product*，有时也称为*forward-mode* 自动微分。有关详细信息，请参阅 Jacobian-Vector
    products (JVPs, aka forward-mode autodiff)。在 JAX 中，JVP 是通过 `jax.jvp()` 实现的转换。另见
    VJP。
- en: primitive
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: primitive
- en: A primitive is a fundamental unit of computation used in JAX programs. Most
    functions in `jax.lax` represent individual primitives. When representing a computation
    in a jaxpr, each operation in the jaxpr is a primitive.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: primitive 是 JAX 程序中使用的基本计算单位。`jax.lax` 中的大多数函数代表单个原语。在 jaxpr 中表示计算时，jaxpr 中的每个操作都是一个原语。
- en: pure function
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 纯函数
- en: A pure function is a function whose outputs are based only on its inputs, and
    which has no side-effects. JAX’s transformation model is designed to work with
    pure functions. See also functional programming.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 纯函数是仅基于其输入生成输出且没有副作用的函数。JAX 的转换模型设计用于处理纯函数。参见 functional programming。
- en: pytree
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: pytree
- en: A pytree is an abstraction that lets JAX handle tuples, lists, dicts, and other
    more general containers of array values in a uniform way. Refer to Working with
    pytrees for a more detailed discussion.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: pytree 是一个抽象，允许 JAX 以统一的方式处理元组、列表、字典和其他更一般的包含数组值的容器。请参阅 Working with pytrees
    以获取更详细的讨论。
- en: reverse-mode autodiff
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: reverse-mode autodiff
- en: See VJP.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 见 VJP。
- en: SPMD
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: SPMD
- en: Short for *Single Program Multi Data*, it refers to a parallel computation technique
    in which the same computation (e.g., the forward pass of a neural net) is run
    on different input data (e.g., different inputs in a batch) in parallel on different
    devices (e.g., several TPUs). `jax.pmap()` is a JAX transformation that implements
    SPMD parallelism.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 缩写*Single Program Multi Data*，指的是一种并行计算技术，即在不同设备（例如几个 TPU）上并行运行相同计算（例如神经网络的前向传播）对不同输入数据（例如批处理中的不同输入）的计算。`jax.pmap()`
    是实现 SPMD 并行性的 JAX 转换。
- en: static
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: static
- en: In a JIT compilation, a value that is not traced (see Tracer). Also sometimes
    refers to compile-time computations on static values.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JIT 编译中，未被追踪的值（参见 Tracer）。有时也指静态值的编译时计算。
- en: TPU
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: TPU
- en: Short for *Tensor Processing Unit*, TPUs are chips specifically engineered for
    fast operations on N-dimensional tensors used in deep learning applications. JAX
    is able to target TPUs for fast operations on arrays (see also CPU and GPU).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '*张量处理单元* 的缩写，TPUs 是专门为深度学习应用中的 N 维张量快速运算而设计的芯片。JAX 能够针对 TPUs 进行快速数组操作（另见 CPU
    和 GPU）。'
- en: Tracer
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 追踪器
- en: An object used as a standin for a JAX Array in order to determine the sequence
    of operations performed by a Python function. Internally, JAX implements this
    via the `jax.core.Tracer` class.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 一个用作 JAX 数组替身的对象，以确定 Python 函数执行的操作序列。在内部，JAX 通过 `jax.core.Tracer` 类实现此功能。
- en: transformation
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 转换
- en: 'A higher-order function: that is, a function that takes a function as input
    and outputs a transformed function. Examples in JAX include `jax.jit()`, `jax.vmap()`,
    and `jax.grad()`.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 高阶函数：即接受函数作为输入并输出转换后函数的函数。在 JAX 中的示例包括 `jax.jit()`、`jax.vmap()` 和 `jax.grad()`。
- en: VJP
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: VJP
- en: Short for *Vector Jacobian Product*, also sometimes known as *reverse-mode*
    automatic differentiation. For more details, see Vector-Jacobian products (VJPs,
    aka reverse-mode autodiff). In JAX, VJP is a transformation that is implemented
    via `jax.vjp()`. See also JVP.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '*向量雅可比积*，有时也称为*反向模式*自动微分。有关详细信息，请参阅向量雅可比积（VJPs，又称反向模式自动微分）。在 JAX 中，VJP 是通过
    `jax.vjp()` 实现的转换。还请参阅 JVP。'
- en: XLA
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: XLA
- en: Short for *Accelerated Linear Algebra*, XLA is a domain-specific compiler for
    linear algebra operations that is the primary backend for JIT-compiled JAX code.
    See [`www.tensorflow.org/xla/`](https://www.tensorflow.org/xla/).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '*加速线性代数* 的缩写，XLA 是一个专用于线性代数操作的编译器，是 JIT 编译 JAX 代码的主要后端。请参阅 [`www.tensorflow.org/xla/`](https://www.tensorflow.org/xla/)。'
- en: weak type
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 弱类型
- en: A JAX data type that has the same type promotion semantics as Python scalars;
    see Weakly-typed values in JAX.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: JAX 数据类型，其类型提升语义与 Python 标量相同；请参阅 JAX 中的弱类型值。
