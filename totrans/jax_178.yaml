- en: JAX Glossary of Terms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[`jax.readthedocs.io/en/latest/glossary.html`](https://jax.readthedocs.io/en/latest/glossary.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Array
  prefs: []
  type: TYPE_NORMAL
- en: JAX’s analog of [`numpy.ndarray`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(in NumPy v2.0)"). See `jax.Array`.
  prefs: []
  type: TYPE_NORMAL
- en: CPU
  prefs: []
  type: TYPE_NORMAL
- en: Short for *Central Processing Unit*, CPUs are the standard computational architecture
    available in most computers. JAX can run computations on CPUs, but often can achieve
    much better performance on GPU and TPU.
  prefs: []
  type: TYPE_NORMAL
- en: Device
  prefs: []
  type: TYPE_NORMAL
- en: The generic name used to refer to the CPU, GPU, or TPU used by JAX to perform
    computations.
  prefs: []
  type: TYPE_NORMAL
- en: forward-mode autodiff
  prefs: []
  type: TYPE_NORMAL
- en: See JVP
  prefs: []
  type: TYPE_NORMAL
- en: functional programming
  prefs: []
  type: TYPE_NORMAL
- en: A programming paradigm in which programs are defined by applying and composing
    pure functions. JAX is designed for use with functional programs.
  prefs: []
  type: TYPE_NORMAL
- en: GPU
  prefs: []
  type: TYPE_NORMAL
- en: Short for *Graphical Processing Unit*, GPUs were originally specialized for
    operations related to rendering of images on screen, but now are much more general-purpose.
    JAX is able to target GPUs for fast operations on arrays (see also CPU and TPU).
  prefs: []
  type: TYPE_NORMAL
- en: jaxpr
  prefs: []
  type: TYPE_NORMAL
- en: Short for *JAX Expression*, a jaxpr is an intermediate representation of a computation
    that is generated by JAX, and is forwarded to XLA for compilation and execution.
    See Understanding Jaxprs for more discussion and examples.
  prefs: []
  type: TYPE_NORMAL
- en: JIT
  prefs: []
  type: TYPE_NORMAL
- en: Short for *Just In Time* compilation, JIT in JAX generally refers to the compilation
    of array operations to XLA, most often accomplished using `jax.jit()`.
  prefs: []
  type: TYPE_NORMAL
- en: JVP
  prefs: []
  type: TYPE_NORMAL
- en: Short for *Jacobian Vector Product*, also sometimes known as *forward-mode*
    automatic differentiation. For more details, see Jacobian-Vector products (JVPs,
    aka forward-mode autodiff). In JAX, JVP is a transformation that is implemented
    via `jax.jvp()`. See also VJP.
  prefs: []
  type: TYPE_NORMAL
- en: primitive
  prefs: []
  type: TYPE_NORMAL
- en: A primitive is a fundamental unit of computation used in JAX programs. Most
    functions in `jax.lax` represent individual primitives. When representing a computation
    in a jaxpr, each operation in the jaxpr is a primitive.
  prefs: []
  type: TYPE_NORMAL
- en: pure function
  prefs: []
  type: TYPE_NORMAL
- en: A pure function is a function whose outputs are based only on its inputs, and
    which has no side-effects. JAX’s transformation model is designed to work with
    pure functions. See also functional programming.
  prefs: []
  type: TYPE_NORMAL
- en: pytree
  prefs: []
  type: TYPE_NORMAL
- en: A pytree is an abstraction that lets JAX handle tuples, lists, dicts, and other
    more general containers of array values in a uniform way. Refer to Working with
    pytrees for a more detailed discussion.
  prefs: []
  type: TYPE_NORMAL
- en: reverse-mode autodiff
  prefs: []
  type: TYPE_NORMAL
- en: See VJP.
  prefs: []
  type: TYPE_NORMAL
- en: SPMD
  prefs: []
  type: TYPE_NORMAL
- en: Short for *Single Program Multi Data*, it refers to a parallel computation technique
    in which the same computation (e.g., the forward pass of a neural net) is run
    on different input data (e.g., different inputs in a batch) in parallel on different
    devices (e.g., several TPUs). `jax.pmap()` is a JAX transformation that implements
    SPMD parallelism.
  prefs: []
  type: TYPE_NORMAL
- en: static
  prefs: []
  type: TYPE_NORMAL
- en: In a JIT compilation, a value that is not traced (see Tracer). Also sometimes
    refers to compile-time computations on static values.
  prefs: []
  type: TYPE_NORMAL
- en: TPU
  prefs: []
  type: TYPE_NORMAL
- en: Short for *Tensor Processing Unit*, TPUs are chips specifically engineered for
    fast operations on N-dimensional tensors used in deep learning applications. JAX
    is able to target TPUs for fast operations on arrays (see also CPU and GPU).
  prefs: []
  type: TYPE_NORMAL
- en: Tracer
  prefs: []
  type: TYPE_NORMAL
- en: An object used as a standin for a JAX Array in order to determine the sequence
    of operations performed by a Python function. Internally, JAX implements this
    via the `jax.core.Tracer` class.
  prefs: []
  type: TYPE_NORMAL
- en: transformation
  prefs: []
  type: TYPE_NORMAL
- en: 'A higher-order function: that is, a function that takes a function as input
    and outputs a transformed function. Examples in JAX include `jax.jit()`, `jax.vmap()`,
    and `jax.grad()`.'
  prefs: []
  type: TYPE_NORMAL
- en: VJP
  prefs: []
  type: TYPE_NORMAL
- en: Short for *Vector Jacobian Product*, also sometimes known as *reverse-mode*
    automatic differentiation. For more details, see Vector-Jacobian products (VJPs,
    aka reverse-mode autodiff). In JAX, VJP is a transformation that is implemented
    via `jax.vjp()`. See also JVP.
  prefs: []
  type: TYPE_NORMAL
- en: XLA
  prefs: []
  type: TYPE_NORMAL
- en: Short for *Accelerated Linear Algebra*, XLA is a domain-specific compiler for
    linear algebra operations that is the primary backend for JIT-compiled JAX code.
    See [`www.tensorflow.org/xla/`](https://www.tensorflow.org/xla/).
  prefs: []
  type: TYPE_NORMAL
- en: weak type
  prefs: []
  type: TYPE_NORMAL
- en: A JAX data type that has the same type promotion semantics as Python scalars;
    see Weakly-typed values in JAX.
  prefs: []
  type: TYPE_NORMAL
