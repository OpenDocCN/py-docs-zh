- en: jax.example_libraries.stax module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[`jax.readthedocs.io/en/latest/jax.example_libraries.stax.html`](https://jax.readthedocs.io/en/latest/jax.example_libraries.stax.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Stax is a small but flexible neural net specification library from scratch.
  prefs: []
  type: TYPE_NORMAL
- en: You likely do not mean to import this module! Stax is intended as an example
    library only. There are a number of other much more fully-featured neural network
    libraries for JAX, including [Flax](https://github.com/google/flax) from Google,
    and [Haiku](https://github.com/deepmind/dm-haiku) from DeepMind.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Layer construction function for a pooling layer.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Layer construction function for a batch normalization layer.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Layer construction function for a general convolution layer.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Layer construction function for a general transposed-convolution layer.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Layer construction function for a general transposed-convolution layer.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Layer constructor function for a dense (fully-connected) layer.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Layer construction function for a dropout layer with given rate.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Layer construction function for a fan-in concatenation layer.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Layer construction function for a fan-out layer.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Layer construction function for a general convolution layer.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Layer construction function for a general transposed-convolution layer.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Layer construction function for a pooling layer.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Layer construction function for a pooling layer.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Layer that applies a scalar function elementwise on its inputs.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Combinator for composing layers in parallel.
  prefs: []
  type: TYPE_NORMAL
- en: The layer resulting from this combinator is often used with the FanOut and FanInSum
    layers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***layers** – a sequence of layers, each an (init_fun, apply_fun) pair.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: A new layer, meaning an (init_fun, apply_fun) pair, representing the parallel
    composition of the given sequence of layers. In particular, the returned layer
    takes a sequence of inputs and returns a sequence of outputs with the same length
    as the argument layers.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Combinator for composing layers in serial.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***layers** – a sequence of layers, each an (init_fun, apply_fun) pair.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: A new layer, meaning an (init_fun, apply_fun) pair, representing the serial
    composition of the given sequence of layers.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Combinator to delay layer constructor pair until input shapes are known.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**make_layer** – a one-argument function that takes an input shape as an argument
    (a tuple of positive integers) and returns an (init_fun, apply_fun) pair.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: A new layer, meaning an (init_fun, apply_fun) pair, representing the same layer
    as returned by make_layer but with its construction delayed until input shapes
    are known.
  prefs: []
  type: TYPE_NORMAL
