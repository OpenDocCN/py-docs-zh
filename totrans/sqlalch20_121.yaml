- en: Third Party Integration Issues
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sqlalchemy.org/en/20/faq/thirdparty.html](https://docs.sqlalchemy.org/en/20/faq/thirdparty.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[I’m getting errors related to “`numpy.int64`”, “`numpy.bool_`”, etc.](#i-m-getting-errors-related-to-numpy-int64-numpy-bool-etc)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[SQL expression for WHERE/HAVING role expected, got True](#sql-expression-for-where-having-role-expected-got-true)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '## I’m getting errors related to “`numpy.int64`”, “`numpy.bool_`”, etc.'
  prefs: []
  type: TYPE_NORMAL
- en: The [numpy](https://numpy.org) package has its own numeric datatypes that extend
    from Python’s numeric types, but contain some behaviors that in some cases make
    them impossible to reconcile with some of SQLAlchemy’s behaviors, as well as in
    some cases with those of the underlying DBAPI driver in use.
  prefs: []
  type: TYPE_NORMAL
- en: 'Two errors which can occur are `ProgrammingError: can''t adapt type ''numpy.int64''`
    on a backend such as psycopg2, and `ArgumentError: SQL expression object expected,
    got object of type <class ''numpy.bool_''> instead`; in more recent versions of
    SQLAlchemy this may be `ArgumentError: SQL expression for WHERE/HAVING role expected,
    got True`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the first case, the issue is due to psycopg2 not having an appropriate lookup
    entry for the `int64` datatype such that it is not accepted directly by queries.
    This may be illustrated from code based on the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'In the latter case, the issue is due to the `numpy.int64` datatype overriding
    the `__eq__()` method and enforcing that the return type of an expression is `numpy.True`
    or `numpy.False`, which breaks SQLAlchemy’s expression language behavior that
    expects to return [`ColumnElement`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") expressions from Python equality comparisons:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'These errors are both solved in the same way, which is that special numpy datatypes
    need to be replaced with regular Python values. Examples include applying the
    Python `int()` function to types like `numpy.int32` and `numpy.int64` and the
    Python `float()` function to `numpy.float32`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: SQL expression for WHERE/HAVING role expected, got True
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: See [I’m getting errors related to “numpy.int64”, “numpy.bool_”, etc.](#numpy-int64).
  prefs: []
  type: TYPE_NORMAL
- en: '## I’m getting errors related to “`numpy.int64`”, “`numpy.bool_`”, etc.'
  prefs: []
  type: TYPE_NORMAL
- en: The [numpy](https://numpy.org) package has its own numeric datatypes that extend
    from Python’s numeric types, but contain some behaviors that in some cases make
    them impossible to reconcile with some of SQLAlchemy’s behaviors, as well as in
    some cases with those of the underlying DBAPI driver in use.
  prefs: []
  type: TYPE_NORMAL
- en: 'Two errors which can occur are `ProgrammingError: can''t adapt type ''numpy.int64''`
    on a backend such as psycopg2, and `ArgumentError: SQL expression object expected,
    got object of type <class ''numpy.bool_''> instead`; in more recent versions of
    SQLAlchemy this may be `ArgumentError: SQL expression for WHERE/HAVING role expected,
    got True`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the first case, the issue is due to psycopg2 not having an appropriate lookup
    entry for the `int64` datatype such that it is not accepted directly by queries.
    This may be illustrated from code based on the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In the latter case, the issue is due to the `numpy.int64` datatype overriding
    the `__eq__()` method and enforcing that the return type of an expression is `numpy.True`
    or `numpy.False`, which breaks SQLAlchemy’s expression language behavior that
    expects to return [`ColumnElement`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") expressions from Python equality comparisons:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'These errors are both solved in the same way, which is that special numpy datatypes
    need to be replaced with regular Python values. Examples include applying the
    Python `int()` function to types like `numpy.int32` and `numpy.int64` and the
    Python `float()` function to `numpy.float32`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: SQL expression for WHERE/HAVING role expected, got True
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: See [I’m getting errors related to “numpy.int64”, “numpy.bool_”, etc.](#numpy-int64).
  prefs: []
  type: TYPE_NORMAL
