["```py\nfrom sqlalchemy.orm import DeclarativeBase\n\n# declarative base class\nclass Base(DeclarativeBase):\n    pass\n```", "```py\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import registry\n\nreg = registry()\n\n# declarative base class\nclass Base(DeclarativeBase):\n    registry = reg\n```", "```py\nfrom datetime import datetime\nfrom typing import Optional\n\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import func\nfrom sqlalchemy import Integer\nfrom sqlalchemy import String\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import relationship\n\nclass Base(DeclarativeBase):\n    pass\n\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id = mapped_column(Integer, primary_key=True)\n    name: Mapped[str]\n    fullname: Mapped[Optional[str]]\n    nickname: Mapped[Optional[str]] = mapped_column(String(64))\n    create_date: Mapped[datetime] = mapped_column(insert_default=func.now())\n\n    addresses: Mapped[List[\"Address\"]] = relationship(back_populates=\"user\")\n\nclass Address(Base):\n    __tablename__ = \"address\"\n\n    id = mapped_column(Integer, primary_key=True)\n    user_id = mapped_column(ForeignKey(\"user.id\"))\n    email_address: Mapped[str]\n\n    user: Mapped[\"User\"] = relationship(back_populates=\"addresses\")\n```", "```py\nfrom datetime import datetime\nfrom typing import List\nfrom typing import Optional\n\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import func\nfrom sqlalchemy import Integer\nfrom sqlalchemy import String\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import registry\nfrom sqlalchemy.orm import relationship\n\nmapper_registry = registry()\n\n@mapper_registry.mapped\nclass User:\n    __tablename__ = \"user\"\n\n    id = mapped_column(Integer, primary_key=True)\n    name: Mapped[str]\n    fullname: Mapped[Optional[str]]\n    nickname: Mapped[Optional[str]] = mapped_column(String(64))\n    create_date: Mapped[datetime] = mapped_column(insert_default=func.now())\n\n    addresses: Mapped[List[\"Address\"]] = relationship(back_populates=\"user\")\n\n@mapper_registry.mapped\nclass Address:\n    __tablename__ = \"address\"\n\n    id = mapped_column(Integer, primary_key=True)\n    user_id = mapped_column(ForeignKey(\"user.id\"))\n    email_address: Mapped[str]\n\n    user: Mapped[\"User\"] = relationship(back_populates=\"addresses\")\n```", "```py\nfrom sqlalchemy.orm import registry\n\nmapper_registry = registry()\n\n@mapper_registry.mapped\nclass Person:\n    __tablename__ = \"person\"\n\n    person_id = mapped_column(Integer, primary_key=True)\n    type = mapped_column(String, nullable=False)\n\n    __mapper_args__ = {\n        \"polymorphic_on\": type,\n        \"polymorphic_identity\": \"person\",\n    }\n\n@mapper_registry.mapped\nclass Employee(Person):\n    __tablename__ = \"employee\"\n\n    person_id = mapped_column(ForeignKey(\"person.person_id\"), primary_key=True)\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"employee\",\n    }\n```", "```py\nfrom sqlalchemy.orm import DeclarativeBase\n\n# declarative base class\nclass Base(DeclarativeBase):\n    pass\n```", "```py\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import registry\n\nreg = registry()\n\n# declarative base class\nclass Base(DeclarativeBase):\n    registry = reg\n```", "```py\nfrom datetime import datetime\nfrom typing import Optional\n\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import func\nfrom sqlalchemy import Integer\nfrom sqlalchemy import String\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import relationship\n\nclass Base(DeclarativeBase):\n    pass\n\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id = mapped_column(Integer, primary_key=True)\n    name: Mapped[str]\n    fullname: Mapped[Optional[str]]\n    nickname: Mapped[Optional[str]] = mapped_column(String(64))\n    create_date: Mapped[datetime] = mapped_column(insert_default=func.now())\n\n    addresses: Mapped[List[\"Address\"]] = relationship(back_populates=\"user\")\n\nclass Address(Base):\n    __tablename__ = \"address\"\n\n    id = mapped_column(Integer, primary_key=True)\n    user_id = mapped_column(ForeignKey(\"user.id\"))\n    email_address: Mapped[str]\n\n    user: Mapped[\"User\"] = relationship(back_populates=\"addresses\")\n```", "```py\nfrom datetime import datetime\nfrom typing import List\nfrom typing import Optional\n\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import func\nfrom sqlalchemy import Integer\nfrom sqlalchemy import String\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import registry\nfrom sqlalchemy.orm import relationship\n\nmapper_registry = registry()\n\n@mapper_registry.mapped\nclass User:\n    __tablename__ = \"user\"\n\n    id = mapped_column(Integer, primary_key=True)\n    name: Mapped[str]\n    fullname: Mapped[Optional[str]]\n    nickname: Mapped[Optional[str]] = mapped_column(String(64))\n    create_date: Mapped[datetime] = mapped_column(insert_default=func.now())\n\n    addresses: Mapped[List[\"Address\"]] = relationship(back_populates=\"user\")\n\n@mapper_registry.mapped\nclass Address:\n    __tablename__ = \"address\"\n\n    id = mapped_column(Integer, primary_key=True)\n    user_id = mapped_column(ForeignKey(\"user.id\"))\n    email_address: Mapped[str]\n\n    user: Mapped[\"User\"] = relationship(back_populates=\"addresses\")\n```", "```py\nfrom sqlalchemy.orm import registry\n\nmapper_registry = registry()\n\n@mapper_registry.mapped\nclass Person:\n    __tablename__ = \"person\"\n\n    person_id = mapped_column(Integer, primary_key=True)\n    type = mapped_column(String, nullable=False)\n\n    __mapper_args__ = {\n        \"polymorphic_on\": type,\n        \"polymorphic_identity\": \"person\",\n    }\n\n@mapper_registry.mapped\nclass Employee(Person):\n    __tablename__ = \"employee\"\n\n    person_id = mapped_column(ForeignKey(\"person.person_id\"), primary_key=True)\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"employee\",\n    }\n```"]