["```py\nfrom __future__ import annotations\nfrom typing import List\n\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import Integer\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import relationship\n\nclass Base(DeclarativeBase):\n    pass\n```", "```py\nclass Parent(Base):\n    __tablename__ = \"parent_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    children: Mapped[List[\"Child\"]] = relationship(back_populates=\"parent\")\n\nclass Child(Base):\n    __tablename__ = \"child_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    parent_id: Mapped[int] = mapped_column(ForeignKey(\"parent_table.id\"))\n    parent: Mapped[\"Parent\"] = relationship(back_populates=\"children\")\n```", "```py\nclass Parent(Base):\n    __tablename__ = \"parent_table\"\n\n    id = mapped_column(Integer, primary_key=True)\n    children = relationship(\"Child\", back_populates=\"parent\")\n\nclass Child(Base):\n    __tablename__ = \"child_table\"\n\n    id = mapped_column(Integer, primary_key=True)\n    parent_id = mapped_column(ForeignKey(\"parent_table.id\"))\n    parent = relationship(\"Parent\", back_populates=\"children\")\n```", "```py\nregistry.map_imperatively(\n    Parent,\n    parent_table,\n    properties={\"children\": relationship(\"Child\", back_populates=\"parent\")},\n)\n\nregistry.map_imperatively(\n    Child,\n    child_table,\n    properties={\"parent\": relationship(\"Parent\", back_populates=\"children\")},\n)\n```", "```py\nclass Parent(Base):\n    __tablename__ = \"parent_table\"\n\n    id = mapped_column(Integer, primary_key=True)\n    children = relationship(\"Child\", collection_class=set, ...)\n```", "```py\nclass Parent(Base):\n    __tablename__ = \"parent_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    children: Mapped[List[\"Child\"]] = relationship()\n\nclass Child(Base):\n    __tablename__ = \"child_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    parent_id: Mapped[int] = mapped_column(ForeignKey(\"parent_table.id\"))\n```", "```py\nclass Parent(Base):\n    __tablename__ = \"parent_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    children: Mapped[List[\"Child\"]] = relationship(back_populates=\"parent\")\n\nclass Child(Base):\n    __tablename__ = \"child_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    parent_id: Mapped[int] = mapped_column(ForeignKey(\"parent_table.id\"))\n    parent: Mapped[\"Parent\"] = relationship(back_populates=\"children\")\n```", "```py\nclass Parent(Base):\n    __tablename__ = \"parent_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    children: Mapped[Set[\"Child\"]] = relationship(back_populates=\"parent\")\n```", "```py\nclass Parent(Base):\n    __tablename__ = \"parent_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    child_id: Mapped[int] = mapped_column(ForeignKey(\"child_table.id\"))\n    child: Mapped[\"Child\"] = relationship()\n\nclass Child(Base):\n    __tablename__ = \"child_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n```", "```py\nclass Parent(Base):\n    __tablename__ = \"parent_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    child_id: Mapped[int] = mapped_column(ForeignKey(\"child_table.id\"))\n    child: Mapped[\"Child\"] = relationship(back_populates=\"parents\")\n\nclass Child(Base):\n    __tablename__ = \"child_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    parents: Mapped[List[\"Parent\"]] = relationship(back_populates=\"child\")\n```", "```py\nfrom typing import Optional\n\nclass Parent(Base):\n    __tablename__ = \"parent_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    child_id: Mapped[Optional[int]] = mapped_column(ForeignKey(\"child_table.id\"))\n    child: Mapped[Optional[\"Child\"]] = relationship(back_populates=\"parents\")\n\nclass Child(Base):\n    __tablename__ = \"child_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    parents: Mapped[List[\"Parent\"]] = relationship(back_populates=\"child\")\n```", "```py\nfrom __future__ import annotations\n\nclass Parent(Base):\n    __tablename__ = \"parent_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    child_id: Mapped[int | None] = mapped_column(ForeignKey(\"child_table.id\"))\n    child: Mapped[Child | None] = relationship(back_populates=\"parents\")\n\nclass Child(Base):\n    __tablename__ = \"child_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    parents: Mapped[List[Parent]] = relationship(back_populates=\"child\")\n```", "```py\nclass Parent(Base):\n    __tablename__ = \"parent_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    child: Mapped[\"Child\"] = relationship(back_populates=\"parent\")\n\nclass Child(Base):\n    __tablename__ = \"child_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    parent_id: Mapped[int] = mapped_column(ForeignKey(\"parent_table.id\"))\n    parent: Mapped[\"Parent\"] = relationship(back_populates=\"child\")\n```", "```py\nclass Child(Base):\n    __tablename__ = \"child_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    parent_id: Mapped[int] = mapped_column(ForeignKey(\"parent_table.id\"))\n    parent: Mapped[\"Parent\"] = relationship(back_populates=\"child\", single_parent=True)\n```", "```py\nfrom sqlalchemy import UniqueConstraint\n\nclass Child(Base):\n    __tablename__ = \"child_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    parent_id: Mapped[int] = mapped_column(ForeignKey(\"parent_table.id\"))\n    parent: Mapped[\"Parent\"] = relationship(back_populates=\"child\")\n\n    __table_args__ = (UniqueConstraint(\"parent_id\"),)\n```", "```py\nclass Parent(Base):\n    __tablename__ = \"parent_table\"\n\n    id = mapped_column(Integer, primary_key=True)\n    child = relationship(\"Child\", uselist=False, back_populates=\"parent\")\n\nclass Child(Base):\n    __tablename__ = \"child_table\"\n\n    id = mapped_column(Integer, primary_key=True)\n    parent_id = mapped_column(ForeignKey(\"parent_table.id\"))\n    parent = relationship(\"Parent\", back_populates=\"child\")\n```", "```py\nfrom __future__ import annotations\n\nfrom sqlalchemy import Column\nfrom sqlalchemy import Table\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import Integer\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import relationship\n\nclass Base(DeclarativeBase):\n    pass\n\n# note for a Core table, we use the sqlalchemy.Column construct,\n# not sqlalchemy.orm.mapped_column\nassociation_table = Table(\n    \"association_table\",\n    Base.metadata,\n    Column(\"left_id\", ForeignKey(\"left_table.id\")),\n    Column(\"right_id\", ForeignKey(\"right_table.id\")),\n)\n\nclass Parent(Base):\n    __tablename__ = \"left_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    children: Mapped[List[Child]] = relationship(secondary=association_table)\n\nclass Child(Base):\n    __tablename__ = \"right_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n```", "```py\nassociation_table = Table(\n    \"association_table\",\n    Base.metadata,\n    Column(\"left_id\", ForeignKey(\"left_table.id\"), primary_key=True),\n    Column(\"right_id\", ForeignKey(\"right_table.id\"), primary_key=True),\n)\n```", "```py\nfrom __future__ import annotations\n\nfrom sqlalchemy import Column\nfrom sqlalchemy import Table\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import Integer\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import relationship\n\nclass Base(DeclarativeBase):\n    pass\n\nassociation_table = Table(\n    \"association_table\",\n    Base.metadata,\n    Column(\"left_id\", ForeignKey(\"left_table.id\"), primary_key=True),\n    Column(\"right_id\", ForeignKey(\"right_table.id\"), primary_key=True),\n)\n\nclass Parent(Base):\n    __tablename__ = \"left_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    children: Mapped[List[Child]] = relationship(\n        secondary=association_table, back_populates=\"parents\"\n    )\n\nclass Child(Base):\n    __tablename__ = \"right_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    parents: Mapped[List[Parent]] = relationship(\n        secondary=association_table, back_populates=\"children\"\n    )\n```", "```py\nclass Parent(Base):\n    __tablename__ = \"left_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    children: Mapped[Set[\"Child\"]] = relationship(secondary=association_table)\n```", "```py\n# row will be deleted from the \"secondary\" table\n# automatically\nmyparent.children.remove(somechild)\n```", "```py\nsession.delete(somechild)\n```", "```py\nfrom typing import Optional\n\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import Integer\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import relationship\n\nclass Base(DeclarativeBase):\n    pass\n\nclass Association(Base):\n    __tablename__ = \"association_table\"\n    left_id: Mapped[int] = mapped_column(ForeignKey(\"left_table.id\"), primary_key=True)\n    right_id: Mapped[int] = mapped_column(\n        ForeignKey(\"right_table.id\"), primary_key=True\n    )\n    extra_data: Mapped[Optional[str]]\n    child: Mapped[\"Child\"] = relationship()\n\nclass Parent(Base):\n    __tablename__ = \"left_table\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    children: Mapped[List[\"Association\"]] = relationship()\n\nclass Child(Base):\n    __tablename__ = \"right_table\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n```", "```py\nfrom typing import Optional\n\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import Integer\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import relationship\n\nclass Base(DeclarativeBase):\n    pass\n\nclass Association(Base):\n    __tablename__ = \"association_table\"\n    left_id: Mapped[int] = mapped_column(ForeignKey(\"left_table.id\"), primary_key=True)\n    right_id: Mapped[int] = mapped_column(\n        ForeignKey(\"right_table.id\"), primary_key=True\n    )\n    extra_data: Mapped[Optional[str]]\n    child: Mapped[\"Child\"] = relationship(back_populates=\"parents\")\n    parent: Mapped[\"Parent\"] = relationship(back_populates=\"children\")\n\nclass Parent(Base):\n    __tablename__ = \"left_table\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    children: Mapped[List[\"Association\"]] = relationship(back_populates=\"parent\")\n\nclass Child(Base):\n    __tablename__ = \"right_table\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    parents: Mapped[List[\"Association\"]] = relationship(back_populates=\"child\")\n```", "```py\n# create parent, append a child via association\np = Parent()\na = Association(extra_data=\"some data\")\na.child = Child()\np.children.append(a)\n\n# iterate through child objects via association, including association\n# attributes\nfor assoc in p.children:\n    print(assoc.extra_data)\n    print(assoc.child)\n```", "```py\nfrom typing import Optional\n\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import Integer\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import relationship\n\nclass Base(DeclarativeBase):\n    pass\n\nclass Association(Base):\n    __tablename__ = \"association_table\"\n\n    left_id: Mapped[int] = mapped_column(ForeignKey(\"left_table.id\"), primary_key=True)\n    right_id: Mapped[int] = mapped_column(\n        ForeignKey(\"right_table.id\"), primary_key=True\n    )\n    extra_data: Mapped[Optional[str]]\n\n    # association between Assocation -> Child\n    child: Mapped[\"Child\"] = relationship(back_populates=\"parent_associations\")\n\n    # association between Assocation -> Parent\n    parent: Mapped[\"Parent\"] = relationship(back_populates=\"child_associations\")\n\nclass Parent(Base):\n    __tablename__ = \"left_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n\n    # many-to-many relationship to Child, bypassing the `Association` class\n    children: Mapped[List[\"Child\"]] = relationship(\n        secondary=\"association_table\", back_populates=\"parents\"\n    )\n\n    # association between Parent -> Association -> Child\n    child_associations: Mapped[List[\"Association\"]] = relationship(\n        back_populates=\"parent\"\n    )\n\nclass Child(Base):\n    __tablename__ = \"right_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n\n    # many-to-many relationship to Parent, bypassing the `Association` class\n    parents: Mapped[List[\"Parent\"]] = relationship(\n        secondary=\"association_table\", back_populates=\"children\"\n    )\n\n    # association between Child -> Association -> Parent\n    parent_associations: Mapped[List[\"Association\"]] = relationship(\n        back_populates=\"child\"\n    )\n```", "```py\np1 = Parent()\nc1 = Child()\np1.children.append(c1)\n\n# redundant, will cause a duplicate INSERT on Association\np1.child_associations.append(Association(child=c1))\n```", "```py\nclass Parent(Base):\n    __tablename__ = \"left_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n\n    # many-to-many relationship to Child, bypassing the `Association` class\n    children: Mapped[List[\"Child\"]] = relationship(\n        secondary=\"association_table\", back_populates=\"parents\", viewonly=True\n    )\n\n    # association between Parent -> Association -> Child\n    child_associations: Mapped[List[\"Association\"]] = relationship(\n        back_populates=\"parent\"\n    )\n\nclass Child(Base):\n    __tablename__ = \"right_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n\n    # many-to-many relationship to Parent, bypassing the `Association` class\n    parents: Mapped[List[\"Parent\"]] = relationship(\n        secondary=\"association_table\", back_populates=\"children\", viewonly=True\n    )\n\n    # association between Child -> Association -> Parent\n    parent_associations: Mapped[List[\"Association\"]] = relationship(\n        back_populates=\"child\"\n    )\n```", "```py\nclass Parent(Base):\n    # ...\n\n    children: Mapped[List[\"Child\"]] = relationship(back_populates=\"parent\")\n\nclass Child(Base):\n    # ...\n\n    parent: Mapped[\"Parent\"] = relationship(back_populates=\"children\")\n```", "```py\nregistry.map_imperatively(\n    Parent,\n    parent_table,\n    properties={\"children\": relationship(\"Child\", back_populates=\"parent\")},\n)\n\nregistry.map_imperatively(\n    Child,\n    child_table,\n    properties={\"parent\": relationship(\"Parent\", back_populates=\"children\")},\n)\n```", "```py\nclass Parent(Base):\n    # ...\n\n    children: Mapped[List[\"Child\"]] = relationship(\n        order_by=\"desc(Child.email_address)\",\n        primaryjoin=\"Parent.id == Child.parent_id\",\n    )\n```", "```py\nclass Parent(Base):\n    # ...\n\n    children: Mapped[List[\"myapp.mymodel.Child\"]] = relationship(\n        order_by=\"desc(myapp.mymodel.Child.email_address)\",\n        primaryjoin=\"myapp.mymodel.Parent.id == myapp.mymodel.Child.parent_id\",\n    )\n```", "```py\nimport typing\n\nif typing.TYPE_CHECKING:\n    from myapp.mymodel import Child\n\nclass Parent(Base):\n    # ...\n\n    children: Mapped[List[\"Child\"]] = relationship(\n        \"myapp.mymodel.Child\",\n        order_by=\"desc(myapp.mymodel.Child.email_address)\",\n        primaryjoin=\"myapp.mymodel.Parent.id == myapp.mymodel.Child.parent_id\",\n    )\n```", "```py\nclass Parent(Base):\n    # ...\n\n    children: Mapped[List[\"Child\"]] = relationship(\n        \"model1.Child\",\n        order_by=\"desc(mymodel1.Child.email_address)\",\n        primaryjoin=\"Parent.id == model1.Child.parent_id\",\n    )\n```", "```py\nimport typing\n\nfrom sqlalchemy import desc\n\nif typing.TYPE_CHECKING:\n    from myapplication import Child\n\ndef _resolve_child_model():\n    from myapplication import Child\n\n    return Child\n\nclass Parent(Base):\n    # ...\n\n    children: Mapped[List[\"Child\"]] = relationship(\n        _resolve_child_model,\n        order_by=lambda: desc(_resolve_child_model().email_address),\n        primaryjoin=lambda: Parent.id == _resolve_child_model().parent_id,\n    )\n```", "```py\n# first, module A, where Child has not been created yet,\n# we create a Parent class which knows nothing about Child\n\nclass Parent(Base): ...\n\n# ... later, in Module B, which is imported after module A:\n\nclass Child(Base): ...\n\nfrom module_a import Parent\n\n# assign the User.addresses relationship as a class variable.  The\n# declarative base class will intercept this and map the relationship.\nParent.children = relationship(Child, primaryjoin=Child.parent_id == Parent.id)\n```", "```py\nclass Parent(Base):\n    __tablename__ = \"left_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    children: Mapped[List[\"Child\"]] = relationship(\n        \"Child\", secondary=lambda: association_table\n    )\n```", "```py\nclass Parent(Base):\n    __tablename__ = \"left_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    children: Mapped[List[\"Child\"]] = relationship(secondary=\"association_table\")\n```", "```py\nclass Parent(Base):\n    __tablename__ = \"parent_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    children: Mapped[List[\"Child\"]] = relationship(back_populates=\"parent\")\n\nclass Child(Base):\n    __tablename__ = \"child_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    parent_id: Mapped[int] = mapped_column(ForeignKey(\"parent_table.id\"))\n    parent: Mapped[\"Parent\"] = relationship(back_populates=\"children\")\n```", "```py\nclass Parent(Base):\n    __tablename__ = \"parent_table\"\n\n    id = mapped_column(Integer, primary_key=True)\n    children = relationship(\"Child\", back_populates=\"parent\")\n\nclass Child(Base):\n    __tablename__ = \"child_table\"\n\n    id = mapped_column(Integer, primary_key=True)\n    parent_id = mapped_column(ForeignKey(\"parent_table.id\"))\n    parent = relationship(\"Parent\", back_populates=\"children\")\n```", "```py\nregistry.map_imperatively(\n    Parent,\n    parent_table,\n    properties={\"children\": relationship(\"Child\", back_populates=\"parent\")},\n)\n\nregistry.map_imperatively(\n    Child,\n    child_table,\n    properties={\"parent\": relationship(\"Parent\", back_populates=\"children\")},\n)\n```", "```py\nclass Parent(Base):\n    __tablename__ = \"parent_table\"\n\n    id = mapped_column(Integer, primary_key=True)\n    children = relationship(\"Child\", collection_class=set, ...)\n```", "```py\nclass Parent(Base):\n    __tablename__ = \"parent_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    children: Mapped[List[\"Child\"]] = relationship()\n\nclass Child(Base):\n    __tablename__ = \"child_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    parent_id: Mapped[int] = mapped_column(ForeignKey(\"parent_table.id\"))\n```", "```py\nclass Parent(Base):\n    __tablename__ = \"parent_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    children: Mapped[List[\"Child\"]] = relationship(back_populates=\"parent\")\n\nclass Child(Base):\n    __tablename__ = \"child_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    parent_id: Mapped[int] = mapped_column(ForeignKey(\"parent_table.id\"))\n    parent: Mapped[\"Parent\"] = relationship(back_populates=\"children\")\n```", "```py\nclass Parent(Base):\n    __tablename__ = \"parent_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    children: Mapped[Set[\"Child\"]] = relationship(back_populates=\"parent\")\n```", "```py\nclass Parent(Base):\n    __tablename__ = \"parent_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    children: Mapped[Set[\"Child\"]] = relationship(back_populates=\"parent\")\n```", "```py\nclass Parent(Base):\n    __tablename__ = \"parent_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    child_id: Mapped[int] = mapped_column(ForeignKey(\"child_table.id\"))\n    child: Mapped[\"Child\"] = relationship()\n\nclass Child(Base):\n    __tablename__ = \"child_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n```", "```py\nclass Parent(Base):\n    __tablename__ = \"parent_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    child_id: Mapped[int] = mapped_column(ForeignKey(\"child_table.id\"))\n    child: Mapped[\"Child\"] = relationship(back_populates=\"parents\")\n\nclass Child(Base):\n    __tablename__ = \"child_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    parents: Mapped[List[\"Parent\"]] = relationship(back_populates=\"child\")\n```", "```py\nfrom typing import Optional\n\nclass Parent(Base):\n    __tablename__ = \"parent_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    child_id: Mapped[Optional[int]] = mapped_column(ForeignKey(\"child_table.id\"))\n    child: Mapped[Optional[\"Child\"]] = relationship(back_populates=\"parents\")\n\nclass Child(Base):\n    __tablename__ = \"child_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    parents: Mapped[List[\"Parent\"]] = relationship(back_populates=\"child\")\n```", "```py\nfrom __future__ import annotations\n\nclass Parent(Base):\n    __tablename__ = \"parent_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    child_id: Mapped[int | None] = mapped_column(ForeignKey(\"child_table.id\"))\n    child: Mapped[Child | None] = relationship(back_populates=\"parents\")\n\nclass Child(Base):\n    __tablename__ = \"child_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    parents: Mapped[List[Parent]] = relationship(back_populates=\"child\")\n```", "```py\nfrom typing import Optional\n\nclass Parent(Base):\n    __tablename__ = \"parent_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    child_id: Mapped[Optional[int]] = mapped_column(ForeignKey(\"child_table.id\"))\n    child: Mapped[Optional[\"Child\"]] = relationship(back_populates=\"parents\")\n\nclass Child(Base):\n    __tablename__ = \"child_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    parents: Mapped[List[\"Parent\"]] = relationship(back_populates=\"child\")\n```", "```py\nfrom __future__ import annotations\n\nclass Parent(Base):\n    __tablename__ = \"parent_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    child_id: Mapped[int | None] = mapped_column(ForeignKey(\"child_table.id\"))\n    child: Mapped[Child | None] = relationship(back_populates=\"parents\")\n\nclass Child(Base):\n    __tablename__ = \"child_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    parents: Mapped[List[Parent]] = relationship(back_populates=\"child\")\n```", "```py\nclass Parent(Base):\n    __tablename__ = \"parent_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    child: Mapped[\"Child\"] = relationship(back_populates=\"parent\")\n\nclass Child(Base):\n    __tablename__ = \"child_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    parent_id: Mapped[int] = mapped_column(ForeignKey(\"parent_table.id\"))\n    parent: Mapped[\"Parent\"] = relationship(back_populates=\"child\")\n```", "```py\nclass Child(Base):\n    __tablename__ = \"child_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    parent_id: Mapped[int] = mapped_column(ForeignKey(\"parent_table.id\"))\n    parent: Mapped[\"Parent\"] = relationship(back_populates=\"child\", single_parent=True)\n```", "```py\nfrom sqlalchemy import UniqueConstraint\n\nclass Child(Base):\n    __tablename__ = \"child_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    parent_id: Mapped[int] = mapped_column(ForeignKey(\"parent_table.id\"))\n    parent: Mapped[\"Parent\"] = relationship(back_populates=\"child\")\n\n    __table_args__ = (UniqueConstraint(\"parent_id\"),)\n```", "```py\nclass Parent(Base):\n    __tablename__ = \"parent_table\"\n\n    id = mapped_column(Integer, primary_key=True)\n    child = relationship(\"Child\", uselist=False, back_populates=\"parent\")\n\nclass Child(Base):\n    __tablename__ = \"child_table\"\n\n    id = mapped_column(Integer, primary_key=True)\n    parent_id = mapped_column(ForeignKey(\"parent_table.id\"))\n    parent = relationship(\"Parent\", back_populates=\"child\")\n```", "```py\nclass Parent(Base):\n    __tablename__ = \"parent_table\"\n\n    id = mapped_column(Integer, primary_key=True)\n    child = relationship(\"Child\", uselist=False, back_populates=\"parent\")\n\nclass Child(Base):\n    __tablename__ = \"child_table\"\n\n    id = mapped_column(Integer, primary_key=True)\n    parent_id = mapped_column(ForeignKey(\"parent_table.id\"))\n    parent = relationship(\"Parent\", back_populates=\"child\")\n```", "```py\nfrom __future__ import annotations\n\nfrom sqlalchemy import Column\nfrom sqlalchemy import Table\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import Integer\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import relationship\n\nclass Base(DeclarativeBase):\n    pass\n\n# note for a Core table, we use the sqlalchemy.Column construct,\n# not sqlalchemy.orm.mapped_column\nassociation_table = Table(\n    \"association_table\",\n    Base.metadata,\n    Column(\"left_id\", ForeignKey(\"left_table.id\")),\n    Column(\"right_id\", ForeignKey(\"right_table.id\")),\n)\n\nclass Parent(Base):\n    __tablename__ = \"left_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    children: Mapped[List[Child]] = relationship(secondary=association_table)\n\nclass Child(Base):\n    __tablename__ = \"right_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n```", "```py\nassociation_table = Table(\n    \"association_table\",\n    Base.metadata,\n    Column(\"left_id\", ForeignKey(\"left_table.id\"), primary_key=True),\n    Column(\"right_id\", ForeignKey(\"right_table.id\"), primary_key=True),\n)\n```", "```py\nfrom __future__ import annotations\n\nfrom sqlalchemy import Column\nfrom sqlalchemy import Table\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import Integer\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import relationship\n\nclass Base(DeclarativeBase):\n    pass\n\nassociation_table = Table(\n    \"association_table\",\n    Base.metadata,\n    Column(\"left_id\", ForeignKey(\"left_table.id\"), primary_key=True),\n    Column(\"right_id\", ForeignKey(\"right_table.id\"), primary_key=True),\n)\n\nclass Parent(Base):\n    __tablename__ = \"left_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    children: Mapped[List[Child]] = relationship(\n        secondary=association_table, back_populates=\"parents\"\n    )\n\nclass Child(Base):\n    __tablename__ = \"right_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    parents: Mapped[List[Parent]] = relationship(\n        secondary=association_table, back_populates=\"children\"\n    )\n```", "```py\nclass Parent(Base):\n    __tablename__ = \"left_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    children: Mapped[Set[\"Child\"]] = relationship(secondary=association_table)\n```", "```py\n# row will be deleted from the \"secondary\" table\n# automatically\nmyparent.children.remove(somechild)\n```", "```py\nsession.delete(somechild)\n```", "```py\nfrom __future__ import annotations\n\nfrom sqlalchemy import Column\nfrom sqlalchemy import Table\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import Integer\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import relationship\n\nclass Base(DeclarativeBase):\n    pass\n\nassociation_table = Table(\n    \"association_table\",\n    Base.metadata,\n    Column(\"left_id\", ForeignKey(\"left_table.id\"), primary_key=True),\n    Column(\"right_id\", ForeignKey(\"right_table.id\"), primary_key=True),\n)\n\nclass Parent(Base):\n    __tablename__ = \"left_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    children: Mapped[List[Child]] = relationship(\n        secondary=association_table, back_populates=\"parents\"\n    )\n\nclass Child(Base):\n    __tablename__ = \"right_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    parents: Mapped[List[Parent]] = relationship(\n        secondary=association_table, back_populates=\"children\"\n    )\n```", "```py\nclass Parent(Base):\n    __tablename__ = \"left_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    children: Mapped[Set[\"Child\"]] = relationship(secondary=association_table)\n```", "```py\n# row will be deleted from the \"secondary\" table\n# automatically\nmyparent.children.remove(somechild)\n```", "```py\nsession.delete(somechild)\n```", "```py\nfrom typing import Optional\n\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import Integer\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import relationship\n\nclass Base(DeclarativeBase):\n    pass\n\nclass Association(Base):\n    __tablename__ = \"association_table\"\n    left_id: Mapped[int] = mapped_column(ForeignKey(\"left_table.id\"), primary_key=True)\n    right_id: Mapped[int] = mapped_column(\n        ForeignKey(\"right_table.id\"), primary_key=True\n    )\n    extra_data: Mapped[Optional[str]]\n    child: Mapped[\"Child\"] = relationship()\n\nclass Parent(Base):\n    __tablename__ = \"left_table\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    children: Mapped[List[\"Association\"]] = relationship()\n\nclass Child(Base):\n    __tablename__ = \"right_table\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n```", "```py\nfrom typing import Optional\n\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import Integer\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import relationship\n\nclass Base(DeclarativeBase):\n    pass\n\nclass Association(Base):\n    __tablename__ = \"association_table\"\n    left_id: Mapped[int] = mapped_column(ForeignKey(\"left_table.id\"), primary_key=True)\n    right_id: Mapped[int] = mapped_column(\n        ForeignKey(\"right_table.id\"), primary_key=True\n    )\n    extra_data: Mapped[Optional[str]]\n    child: Mapped[\"Child\"] = relationship(back_populates=\"parents\")\n    parent: Mapped[\"Parent\"] = relationship(back_populates=\"children\")\n\nclass Parent(Base):\n    __tablename__ = \"left_table\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    children: Mapped[List[\"Association\"]] = relationship(back_populates=\"parent\")\n\nclass Child(Base):\n    __tablename__ = \"right_table\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    parents: Mapped[List[\"Association\"]] = relationship(back_populates=\"child\")\n```", "```py\n# create parent, append a child via association\np = Parent()\na = Association(extra_data=\"some data\")\na.child = Child()\np.children.append(a)\n\n# iterate through child objects via association, including association\n# attributes\nfor assoc in p.children:\n    print(assoc.extra_data)\n    print(assoc.child)\n```", "```py\nfrom typing import Optional\n\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import Integer\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import relationship\n\nclass Base(DeclarativeBase):\n    pass\n\nclass Association(Base):\n    __tablename__ = \"association_table\"\n\n    left_id: Mapped[int] = mapped_column(ForeignKey(\"left_table.id\"), primary_key=True)\n    right_id: Mapped[int] = mapped_column(\n        ForeignKey(\"right_table.id\"), primary_key=True\n    )\n    extra_data: Mapped[Optional[str]]\n\n    # association between Assocation -> Child\n    child: Mapped[\"Child\"] = relationship(back_populates=\"parent_associations\")\n\n    # association between Assocation -> Parent\n    parent: Mapped[\"Parent\"] = relationship(back_populates=\"child_associations\")\n\nclass Parent(Base):\n    __tablename__ = \"left_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n\n    # many-to-many relationship to Child, bypassing the `Association` class\n    children: Mapped[List[\"Child\"]] = relationship(\n        secondary=\"association_table\", back_populates=\"parents\"\n    )\n\n    # association between Parent -> Association -> Child\n    child_associations: Mapped[List[\"Association\"]] = relationship(\n        back_populates=\"parent\"\n    )\n\nclass Child(Base):\n    __tablename__ = \"right_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n\n    # many-to-many relationship to Parent, bypassing the `Association` class\n    parents: Mapped[List[\"Parent\"]] = relationship(\n        secondary=\"association_table\", back_populates=\"children\"\n    )\n\n    # association between Child -> Association -> Parent\n    parent_associations: Mapped[List[\"Association\"]] = relationship(\n        back_populates=\"child\"\n    )\n```", "```py\np1 = Parent()\nc1 = Child()\np1.children.append(c1)\n\n# redundant, will cause a duplicate INSERT on Association\np1.child_associations.append(Association(child=c1))\n```", "```py\nclass Parent(Base):\n    __tablename__ = \"left_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n\n    # many-to-many relationship to Child, bypassing the `Association` class\n    children: Mapped[List[\"Child\"]] = relationship(\n        secondary=\"association_table\", back_populates=\"parents\", viewonly=True\n    )\n\n    # association between Parent -> Association -> Child\n    child_associations: Mapped[List[\"Association\"]] = relationship(\n        back_populates=\"parent\"\n    )\n\nclass Child(Base):\n    __tablename__ = \"right_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n\n    # many-to-many relationship to Parent, bypassing the `Association` class\n    parents: Mapped[List[\"Parent\"]] = relationship(\n        secondary=\"association_table\", back_populates=\"children\", viewonly=True\n    )\n\n    # association between Child -> Association -> Parent\n    parent_associations: Mapped[List[\"Association\"]] = relationship(\n        back_populates=\"child\"\n    )\n```", "```py\nfrom typing import Optional\n\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import Integer\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import relationship\n\nclass Base(DeclarativeBase):\n    pass\n\nclass Association(Base):\n    __tablename__ = \"association_table\"\n\n    left_id: Mapped[int] = mapped_column(ForeignKey(\"left_table.id\"), primary_key=True)\n    right_id: Mapped[int] = mapped_column(\n        ForeignKey(\"right_table.id\"), primary_key=True\n    )\n    extra_data: Mapped[Optional[str]]\n\n    # association between Assocation -> Child\n    child: Mapped[\"Child\"] = relationship(back_populates=\"parent_associations\")\n\n    # association between Assocation -> Parent\n    parent: Mapped[\"Parent\"] = relationship(back_populates=\"child_associations\")\n\nclass Parent(Base):\n    __tablename__ = \"left_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n\n    # many-to-many relationship to Child, bypassing the `Association` class\n    children: Mapped[List[\"Child\"]] = relationship(\n        secondary=\"association_table\", back_populates=\"parents\"\n    )\n\n    # association between Parent -> Association -> Child\n    child_associations: Mapped[List[\"Association\"]] = relationship(\n        back_populates=\"parent\"\n    )\n\nclass Child(Base):\n    __tablename__ = \"right_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n\n    # many-to-many relationship to Parent, bypassing the `Association` class\n    parents: Mapped[List[\"Parent\"]] = relationship(\n        secondary=\"association_table\", back_populates=\"children\"\n    )\n\n    # association between Child -> Association -> Parent\n    parent_associations: Mapped[List[\"Association\"]] = relationship(\n        back_populates=\"child\"\n    )\n```", "```py\np1 = Parent()\nc1 = Child()\np1.children.append(c1)\n\n# redundant, will cause a duplicate INSERT on Association\np1.child_associations.append(Association(child=c1))\n```", "```py\nclass Parent(Base):\n    __tablename__ = \"left_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n\n    # many-to-many relationship to Child, bypassing the `Association` class\n    children: Mapped[List[\"Child\"]] = relationship(\n        secondary=\"association_table\", back_populates=\"parents\", viewonly=True\n    )\n\n    # association between Parent -> Association -> Child\n    child_associations: Mapped[List[\"Association\"]] = relationship(\n        back_populates=\"parent\"\n    )\n\nclass Child(Base):\n    __tablename__ = \"right_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n\n    # many-to-many relationship to Parent, bypassing the `Association` class\n    parents: Mapped[List[\"Parent\"]] = relationship(\n        secondary=\"association_table\", back_populates=\"children\", viewonly=True\n    )\n\n    # association between Child -> Association -> Parent\n    parent_associations: Mapped[List[\"Association\"]] = relationship(\n        back_populates=\"child\"\n    )\n```", "```py\nclass Parent(Base):\n    # ...\n\n    children: Mapped[List[\"Child\"]] = relationship(back_populates=\"parent\")\n\nclass Child(Base):\n    # ...\n\n    parent: Mapped[\"Parent\"] = relationship(back_populates=\"children\")\n```", "```py\nregistry.map_imperatively(\n    Parent,\n    parent_table,\n    properties={\"children\": relationship(\"Child\", back_populates=\"parent\")},\n)\n\nregistry.map_imperatively(\n    Child,\n    child_table,\n    properties={\"parent\": relationship(\"Parent\", back_populates=\"children\")},\n)\n```", "```py\nclass Parent(Base):\n    # ...\n\n    children: Mapped[List[\"Child\"]] = relationship(\n        order_by=\"desc(Child.email_address)\",\n        primaryjoin=\"Parent.id == Child.parent_id\",\n    )\n```", "```py\nclass Parent(Base):\n    # ...\n\n    children: Mapped[List[\"myapp.mymodel.Child\"]] = relationship(\n        order_by=\"desc(myapp.mymodel.Child.email_address)\",\n        primaryjoin=\"myapp.mymodel.Parent.id == myapp.mymodel.Child.parent_id\",\n    )\n```", "```py\nimport typing\n\nif typing.TYPE_CHECKING:\n    from myapp.mymodel import Child\n\nclass Parent(Base):\n    # ...\n\n    children: Mapped[List[\"Child\"]] = relationship(\n        \"myapp.mymodel.Child\",\n        order_by=\"desc(myapp.mymodel.Child.email_address)\",\n        primaryjoin=\"myapp.mymodel.Parent.id == myapp.mymodel.Child.parent_id\",\n    )\n```", "```py\nclass Parent(Base):\n    # ...\n\n    children: Mapped[List[\"Child\"]] = relationship(\n        \"model1.Child\",\n        order_by=\"desc(mymodel1.Child.email_address)\",\n        primaryjoin=\"Parent.id == model1.Child.parent_id\",\n    )\n```", "```py\nimport typing\n\nfrom sqlalchemy import desc\n\nif typing.TYPE_CHECKING:\n    from myapplication import Child\n\ndef _resolve_child_model():\n    from myapplication import Child\n\n    return Child\n\nclass Parent(Base):\n    # ...\n\n    children: Mapped[List[\"Child\"]] = relationship(\n        _resolve_child_model,\n        order_by=lambda: desc(_resolve_child_model().email_address),\n        primaryjoin=lambda: Parent.id == _resolve_child_model().parent_id,\n    )\n```", "```py\n# first, module A, where Child has not been created yet,\n# we create a Parent class which knows nothing about Child\n\nclass Parent(Base): ...\n\n# ... later, in Module B, which is imported after module A:\n\nclass Child(Base): ...\n\nfrom module_a import Parent\n\n# assign the User.addresses relationship as a class variable.  The\n# declarative base class will intercept this and map the relationship.\nParent.children = relationship(Child, primaryjoin=Child.parent_id == Parent.id)\n```", "```py\nclass Parent(Base):\n    __tablename__ = \"left_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    children: Mapped[List[\"Child\"]] = relationship(\n        \"Child\", secondary=lambda: association_table\n    )\n```", "```py\nclass Parent(Base):\n    __tablename__ = \"left_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    children: Mapped[List[\"Child\"]] = relationship(secondary=\"association_table\")\n```", "```py\n# first, module A, where Child has not been created yet,\n# we create a Parent class which knows nothing about Child\n\nclass Parent(Base): ...\n\n# ... later, in Module B, which is imported after module A:\n\nclass Child(Base): ...\n\nfrom module_a import Parent\n\n# assign the User.addresses relationship as a class variable.  The\n# declarative base class will intercept this and map the relationship.\nParent.children = relationship(Child, primaryjoin=Child.parent_id == Parent.id)\n```", "```py\nclass Parent(Base):\n    __tablename__ = \"left_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    children: Mapped[List[\"Child\"]] = relationship(\n        \"Child\", secondary=lambda: association_table\n    )\n```", "```py\nclass Parent(Base):\n    __tablename__ = \"left_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    children: Mapped[List[\"Child\"]] = relationship(secondary=\"association_table\")\n```"]