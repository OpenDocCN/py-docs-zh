["```py\nclass Document\n```", "```py\n__init__(self, filename=None, stream=None, *, filetype=None, rect=None, width=0, height=0, fontsize=11)\n```", "```py\n>>> # from a file\n>>> doc = pymupdf.open(\"some.xps\")\n>>> # handle wrong extension\n>>> doc = pymupdf.open(\"some.file\", filetype=\"xps\")\n>>>\n>>> # from memory, filetype is required if not a PDF\n>>> doc = pymupdf.open(\"xps\", mem_area)\n>>> doc = pymupdf.open(None, mem_area, \"xps\")\n>>> doc = pymupdf.open(stream=mem_area, filetype=\"xps\")\n>>>\n>>> # new empty PDF\n>>> doc = pymupdf.open()\n>>> doc = pymupdf.open(None)\n>>> doc = pymupdf.open(\"\") \n```", "```py\n>>> import pymupdf\n>>> with pymupdf.open(...) as doc:\n for page in doc: print(\"page %i\" % page.number)\npage 0\npage 1\npage 2\npage 3\n>>> doc.is_closed\nTrue\n>>> \n```", "```py\nget_oc(xref)\n```", "```py\nset_oc(xref, ocxref)\n```", "```py\nget_layers()\n```", "```py\n>>> for item in doc.get_layers(): print(item)\n{'number': 0, 'name': 'my-config', 'creator': ''}\n>>> # use 'number' as config identifier in add_ocg \n```", "```py\nadd_layer(name, creator=None, on=None)\n```", "```py\nswitch_layer(number, as_default=False)\n```", "```py\nadd_ocg(name, config=-1, on=True, intent='View', usage='Artwork')\n```", "```py\nset_ocmd(xref=0, ocgs=None, policy='AnyOn', ve=None)\n```", "```py\nget_ocmd(xref)\n```", "```py\nget_layer(config=-1)\n```", "```py\n>>> pprint(doc.get_layer())\n{'off': [8, 9, 10], 'on': [5, 6, 7], 'rbgroups': [[7, 10]]}\n>>> \n```", "```py\nset_layer(config, *, on=None, off=None, basestate=None, rbgroups=None, locked=None)\n```", "```py\n>>> doc.set_layer(-1, basestate=\"OFF\")  # only changes the base state\n>>> pprint(doc.get_layer())\n{'basestate': 'OFF', 'off': [8, 9, 10], 'on': [5, 6, 7], 'rbgroups': [[7, 10]]} \n```", "```py\nget_ocgs()\n```", "```py\n>>> pprint(doc.get_ocgs())\n{13: {'on': True,\n 'intent': ['View', 'Design'],\n 'name': 'Circle',\n 'usage': 'Artwork'},\n14: {'on': True,\n 'intent': ['View', 'Design'],\n 'name': 'Square',\n 'usage': 'Artwork'},\n15: {'on': False, 'intent': ['View'], 'name': 'Square', 'usage': 'Artwork'}}\n>>> \n```", "```py\nlayer_ui_configs()\n```", "```py\nset_layer_ui_config(number, action=0)\n```", "```py\nauthenticate(password)\n```", "```py\nget_page_numbers(label, only_one=False)\n```", "```py\nget_page_labels()\n```", "```py\nset_page_labels(labels)\n```", "```py\n[{'startpage': 6, 'prefix': 'A-', 'style': 'D', 'firstpagenum': 10},\n {'startpage': 10, 'prefix': '', 'style': 'D', 'firstpagenum': 1}] \n```", "```py\nmake_bookmark(loc)\n```", "```py\nfind_bookmark(bookmark)\n```", "```py\nchapter_page_count(chapter)\n```", "```py\nnext_location(page_id)\n```", "```py\nprev_location(page_id)\n```", "```py\nload_page(page_id=0)\n```", "```py\nreload_page(page)\n```", "```py\nresolve_names()\n```", "```py\n{\n    '__bookmark_1': {'page': 0, 'to': (0.0, 541.0), 'zoom': 0.0},\n    '__bookmark_2': {'page': 0, 'to': (0.0, 481.45), 'zoom': 0.0},\n} \n```", "```py\n{\n    '21154a7c20684ceb91f9c9adc3b677c40': {'page': -1, 'dest': '/XYZ 15.75 1486 0'},\n    ...\n} \n```", "```py\npage_cropbox(pno)\n```", "```py\npage_xref(pno)\n```", "```py\npages(start=None[, stop=None[, step=None]])\n```", "```py\nconvert_to_pdf(from_page=-1, to_page=-1, rotate=0)\n```", "```py\n>>> # convert an XPS file to PDF\n>>> xps = pymupdf.open(\"some.xps\")\n>>> pdfbytes = xps.convert_to_pdf()\n>>>\n>>> # either do this -->\n>>> pdf = pymupdf.open(\"pdf\", pdfbytes)\n>>> pdf.save(\"some.pdf\")\n>>>\n>>> # or this -->\n>>> pdfout = open(\"some.pdf\", \"wb\")\n>>> pdfout.tobytes(pdfbytes)\n>>> pdfout.close() \n```", "```py\n>>> # copy image files to PDF pages\n>>> # each page will have image dimensions\n>>> doc = pymupdf.open()                     # new PDF\n>>> imglist = [ ... image file names ...] # e.g. a directory listing\n>>> for img in imglist:\n imgdoc=pymupdf.open(img)           # open image as a document\n pdfbytes=imgdoc.convert_to_pdf()  # make a 1-page PDF of it\n imgpdf=pymupdf.open(\"pdf\", pdfbytes)\n doc.insert_pdf(imgpdf)             # insert the image PDF\n>>> doc.save(\"allmyimages.pdf\") \n```", "```py\nget_toc(simple=True)\n```", "```py\nxref_get_keys(xref)\n```", "```py\n>>> from pprint import pprint\n>>> import pymupdf\n>>> doc=pymupdf.open(\"pymupdf.pdf\")\n>>> xref = doc.page_xref(0)  # xref of page 0\n>>> pprint(doc.xref_get_keys(xref))  # primary level keys of a page\n('Type', 'Contents', 'Resources', 'MediaBox', 'Parent')\n>>> pprint(doc.xref_get_keys(-1))  # primary level keys of the trailer\n('Type', 'Index', 'Size', 'W', 'Root', 'Info', 'ID', 'Length', 'Filter')\n>>> \n```", "```py\nxref_get_key(xref, key)\n```", "```py\n    >>> for key in doc.xref_get_keys(xref):\n     print(key, \"=\" , doc.xref_get_key(xref, key))\n    Type = ('name', '/Page')\n    Contents = ('xref', '1297 0 R')\n    Resources = ('xref', '1296 0 R')\n    MediaBox = ('array', '[0 0 612 792]')\n    Parent = ('xref', '1301 0 R')\n    >>> #\n    >>> # Now same thing for the PDF trailer.\n    >>> # It has no xref, so -1 must be used instead.\n    >>> #\n    >>> for key in doc.xref_get_keys(-1):\n     print(key, \"=\", doc.xref_get_key(-1, key))\n    Type = ('name', '/XRef')\n    Index = ('array', '[0 8802]')\n    Size = ('int', '8802')\n    W = ('array', '[1 3 1]')\n    Root = ('xref', '8799 0 R')\n    Info = ('xref', '8800 0 R')\n    ID = ('array', '[<DC9D56A6277EFFD82084E64F9441E18C><DC9D56A6277EFFD82084E64F9441E18C>]')\n    Length = ('int', '21111')\n    Filter = ('name', '/FlateDecode')\n    >>> \n    ```", "```py\nxref_set_key(xref, key, value)\n```", "```py\n        >>> # because of the € symbol, the following yields UTF-16BE BOM\n        >>> pymupdf.get_pdf_str(\"Pay in $ or €.\")\n        '<feff00500061007900200069006e002000240020006f0072002020ac002e>'\n        >>> # escapes for brackets and non-ASCII\n        >>> pymupdf.get_pdf_str(\"Prices in EUR (USD also accepted). Areas are in m².\")\n        '(Prices in EUR \\\\(USD also accepted\\\\). Areas are in m\\\\262.)' \n        ```", "```py\nget_page_pixmap(pno: int, *, matrix: matrix_like = Identity, dpi=None, colorspace: Colorspace = csRGB, clip: rect_like = None, alpha: bool = False, annots: bool = True)\n```", "```py\nget_page_xobjects(pno)\n```", "```py\nget_page_images(pno, full=False)\n```", "```py\nget_page_fonts(pno, full=False)\n```", "```py\n>>> pprint(doc.get_page_fonts(0, full=False))\n[(12, 'ttf', 'TrueType', 'FNUUTH+Calibri-Bold', 'R8', ''),\n (13, 'ttf', 'TrueType', 'DOKBTG+Calibri', 'R10', ''),\n (14, 'ttf', 'TrueType', 'NOHSJV+Calibri-Light', 'R12', ''),\n (15, 'ttf', 'TrueType', 'NZNDCL+CourierNewPSMT', 'R14', ''),\n (16, 'ttf', 'Type0', 'MNCSJY+SymbolMT', 'R17', 'Identity-H'),\n (17, 'cff', 'Type1', 'UAEUYH+Helvetica', 'R20', 'WinAnsiEncoding'),\n (18, 'ttf', 'Type0', 'ECPLRU+Calibri', 'R23', 'Identity-H'),\n (19, 'ttf', 'Type0', 'TONAYT+CourierNewPSMT', 'R27', 'Identity-H')] \n```", "```py\nget_page_text(pno, output='text', flags=3, textpage=None, sort=False)\n```", "```py\nlayout(rect=None, width=0, height=0, fontsize=11)\n```", "```py\nselect(s)\n```", "```py\nset_metadata(m)\n```", "```py\nget_xml_metadata()\n```", "```py\nset_xml_metadata(xml)\n```", "```py\nset_pagelayout(value)\n```", "```py\nset_pagemode(value)\n```", "```py\nset_markinfo(value)\n```", "```py\nset_toc(toc, collapse=1)\n```", "```py\noutline_xref(idx)\n```", "```py\ndel_toc_item(idx)\n```", "```py\nset_toc_item(idx, dest_dict=None, kind=None, pno=None, uri=None, title=None, to=None, filename=None, zoom=0)\n```", "```py\n>>> import pymupdf\n>>> doc=pymupdf.open(\"SWIGDocumentation.pdf\")\n>>> toc = doc.get_toc(False)  # we need the detailed TOC\n>>> # list of level 1 indices and their titles\n>>> lvl1 = [(i, item[1]) for i, item in enumerate(toc) if item[0] == 1]\n>>> for i, title in lvl1:\n d = toc[i][3]  # get the destination dict\n d[\"collapse\"] = True  # collapse items underneath\n if \"Python\" in title:  # show the 'Python' chapter\n d[\"color\"] = (1, 0, 0)  # in red,\n d[\"bold\"] = True  # bold and\n d[\"italic\"] = True  # italic\n doc.set_toc_item(i, dest_dict=d)  # update this toc item\n>>> doc.save(\"NEWSWIG.pdf\",garbage=3,deflate=True) \n```", "```py\nbake(*, annots=True, widgets=True)\n```", "```py\ncan_save_incrementally()\n```", "```py\nscrub(attached_files=True, clean_pages=True, embedded_files=True, hidden_text=True, javascript=True, metadata=True, redactions=True, redact_images=0, remove_links=True, reset_fields=True, reset_responses=True, thumbnails=True, xml_metadata=True)\n```", "```py\nsave(outfile, garbage=0, clean=False, deflate=False, deflate_images=False, deflate_fonts=False, incremental=False, ascii=False, expand=0, linear=False, pretty=False, no_new_id=False, encryption=PDF_ENCRYPT_NONE, permissions=-1, owner_pw=None, user_pw=None, use_objstms=0)\n```", "```py\nez_save(*args, **kwargs)\n```", "```py\nsaveIncr()\n```", "```py\ntobytes(garbage=0, clean=False, deflate=False, deflate_images=False, deflate_fonts=False, ascii=False, expand=0, linear=False, pretty=False, no_new_id=False, encryption=PDF_ENCRYPT_NONE, permissions=-1, owner_pw=None, user_pw=None, use_objstms=0)\n```", "```py\nsearch_page_for(pno, text, quads=False)\n```", "```py\ninsert_pdf(docsrc, from_page=-1, to_page=-1, start_at=-1, rotate=-1, links=True, annots=True, show_progress=0, final=1)\n```", "```py\ninsert_file(infile, from_page=-1, to_page=-1, start_at=-1, rotate=-1, links=True, annots=True, show_progress=0, final=1)\n```", "```py\nnew_page(pno=-1, width=595, height=842)\n```", "```py\ninsert_page(pno, text=None, fontsize=11, width=595, height=842, fontname='helv', fontfile=None, color=None)\n```", "```py\ndelete_page(pno=-1)\n```", "```py\ndelete_pages(*args, **kwds)\n```", "```py\ncopy_page(pno, to=-1)\n```", "```py\nfullcopy_page(pno, to=-1)\n```", "```py\nmove_page(pno, to=-1)\n```", "```py\nneed_appearances(value=None)\n```", "```py\nget_sigflags()\n```", "```py\nembfile_add(name, buffer, filename=None, ufilename=None, desc=None)\n```", "```py\nembfile_count()\n```", "```py\nembfile_get(item)\n```", "```py\nembfile_del(item)\n```", "```py\nembfile_info(item)\n```", "```py\nembfile_names()\n```", "```py\nembfile_upd(item, buffer=None, filename=None, ufilename=None, desc=None)\n```", "```py\nclose()\n```", "```py\nxref_object(xref, compressed=False, ascii=False)\n```", "```py\npdf_catalog()\n```", "```py\npdf_trailer(compressed=False)\n```", "```py\nxref_stream(xref)\n```", "```py\nxref_stream_raw(xref)\n```", "```py\nupdate_object(xref, obj_str, page=None)\n```", "```py\nupdate_stream(xref, data, new=False, compress=True)\n```", "```py\nxref_copy(source, target, *, keep=None)\n```", "```py\nextract_image(xref)\n```", "```py\n>>> d = doc.extract_image(1373)\n>>> d\n{'ext': 'png', 'smask': 2934, 'width': 5, 'height': 629, 'colorspace': 3, 'xres': 96,\n'yres': 96, 'cs-name': 'DeviceRGB',\n'image': b'\\x89PNG\\r\\n\\x1a\\n\\x00\\x00\\x00\\rIHDR\\x00\\x00\\x00\\x05\\ ...'}\n>>> imgout = open(f\"image.{d['ext']}\", \"wb\")\n>>> imgout.write(d[\"image\"])\n102\n>>> imgout.close() \n```", "```py\n    In [23]: %timeit pix = pymupdf.Pixmap(doc, 1268);pix.tobytes()\n    10.8 ms ± 52.4 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\n    In [24]: len(pix.tobytes())\n    Out[24]: 21462\n\n    In [25]: %timeit img = doc.extract_image(1268)\n    10.8 ms ± 86 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\n    In [26]: len(img[\"image\"])\n    Out[26]: 21462 \n    ```", "```py\n    In [27]: %timeit pix = pymupdf.Pixmap(doc, 1186);pix.tobytes()\n    341 ms ± 2.86 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n    In [28]: len(pix.tobytes())\n    Out[28]: 2599433\n\n    In [29]: %timeit img = doc.extract_image(1186)\n    15.7 µs ± 116 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)\n    In [30]: len(img[\"image\"])\n    Out[30]: 371177 \n    ```", "```py\nextract_font(xref, info_only=False, named=None)\n```", "```py\n>>> # store font as an external file\n>>> name, ext, _, content = doc.extract_font(4711)\n>>> # assuming content is not None:\n>>> ofile = open(name + \".\" + ext, \"wb\")\n>>> ofile.write(content)\n>>> ofile.close() \n```", "```py\nxref_xml_metadata()\n```", "```py\nhas_links()\n```", "```py\nhas_annots()\n```", "```py\nsubset_fonts(verbose=False, fallback=False)\n```", "```py\njournal_enable()\n```", "```py\njournal_start_op(name)\n```", "```py\njournal_stop_op()\n```", "```py\njournal_position()\n```", "```py\njournal_op_name(step)\n```", "```py\njournal_can_do()\n```", "```py\njournal_undo()\n```", "```py\njournal_redo()\n```", "```py\njournal_save(filename)\n```", "```py\njournal_load(filename)\n```", "```py\nsave_snapshot()\n```", "```py\noutline\n```", "```py\nis_closed\n```", "```py\nis_dirty\n```", "```py\nis_pdf\n```", "```py\nis_form_pdf\n```", "```py\nis_reflowable\n```", "```py\nis_repaired\n```", "```py\nis_fast_webaccess\n```", "```py\nmarkinfo\n```", "```py\npagemode\n```", "```py\npagelayout\n```", "```py\nversion_count\n```", "```py\nneeds_pass\n```", "```py\nis_encrypted\n```", "```py\npermissions\n```", "```py\nmetadata\n```", "```py\nname\n```", "```py\npage_count\n```", "```py\nchapter_count\n```", "```py\nlast_location\n```", "```py\nFormFonts\n```", "```py\n>>> import pymupdf\n>>> doc=pymupdf.open(\"pymupdf.pdf\")\n>>> doc.metadata             # look at what we currently have\n{'producer': 'rst2pdf, reportlab', 'format': 'PDF 1.4', 'encryption': None, 'author':\n'Jorj X. McKie', 'modDate': \"D:20160611145816-04'00'\", 'keywords': 'PDF, XPS, EPUB, CBZ',\n'title': 'The PyMuPDF Documentation', 'creationDate': \"D:20160611145816-04'00'\",\n'creator': 'sphinx', 'subject': 'PyMuPDF 1.9.1'}\n>>> doc.set_metadata({})      # clear all fields\n>>> doc.metadata             # look again to show what happened\n{'producer': 'none', 'format': 'PDF 1.4', 'encryption': None, 'author': 'none',\n'modDate': 'none', 'keywords': 'none', 'title': 'none', 'creationDate': 'none',\n'creator': 'none', 'subject': 'none'}\n>>> doc._delXmlMetadata()    # clear any XML metadata\n>>> doc.save(\"anonymous.pdf\", garbage = 4)       # save anonymized doc \n```", "```py\n>>> import pymupdf\n>>> doc = pymupdf.open(\"test.pdf\")\n>>> toc = doc.get_toc()\n>>> for t in toc: print(t)                           # show what we have\n[1, 'The PyMuPDF Documentation', 1]\n[2, 'Introduction', 1]\n[3, 'Note on the Name fitz', 1]\n[3, 'License', 1]\n>>> toc[1][1] += \" modified by set_toc\"               # modify something\n>>> doc.set_toc(toc)                                  # replace outline tree\n3                                                    # number of bookmarks inserted\n>>> for t in doc.get_toc(): print(t)                  # demonstrate it worked\n[1, 'The PyMuPDF Documentation', 1]\n[2, 'Introduction modified by set_toc', 1]            # <<< this has changed\n[3, 'Note on the Name fitz', 1]\n[3, 'License', 1] \n```", "```py\n>>> doc1 = pymupdf.open(\"file1.pdf\")          # must be a PDF\n>>> doc2 = pymupdf.open(\"file2.pdf\")          # must be a PDF\n>>> pages1 = len(doc1)                     # save doc1's page count\n>>> toc1 = doc1.get_toc(False)     # save TOC 1\n>>> toc2 = doc2.get_toc(False)     # save TOC 2\n>>> doc1.insert_pdf(doc2)                   # doc2 at end of doc1\n>>> for t in toc2:                         # increase toc2 page numbers\n t[2] += pages1                     # by old len(doc1)\n>>> doc1.set_toc(toc1 + toc2)               # now result has total TOC \n```", "```py\n>>> # insert 5 pages of doc2, where its page 21 becomes page 15 in doc1\n>>> doc1.insert_pdf(doc2, from_page=21, to_page=25, start_at=15) \n```", "```py\n>>> # same example, but pages are rotated and copied in reverse order\n>>> doc1.insert_pdf(doc2, from_page=25, to_page=21, start_at=15, rotate=90) \n```", "```py\n>>> # put copied pages in front of doc1\n>>> doc1.insert_pdf(doc2, from_page=21, to_page=25, start_at=0) \n```", "```py\nfor i in range(doc.page_count):\n    imglist = doc.get_page_images(i)\n    for img in imglist:\n        xref = img[0]                  # xref number\n        pix = pymupdf.Pixmap(doc, xref)   # make pixmap from image\n        if pix.n - pix.alpha < 4:      # can be saved as PNG\n            pix.save(\"p%s-%s.png\" % (i, xref))\n        else:                          # CMYK: must convert first\n            pix0 = pymupdf.Pixmap(pymupdf.csRGB, pix)\n            pix0.save(\"p%s-%s.png\" % (i, xref))\n            pix0 = None                # free Pixmap resources\n        pix = None                     # free Pixmap resources \n```", "```py\n>>> for page in doc: page.set_rotation(90) \n```", "```py\n>>> import pymupdf\n>>> doc=pymupdf.open(\"pymupdf.pdf\")\n>>> doc.metadata             # look at what we currently have\n{'producer': 'rst2pdf, reportlab', 'format': 'PDF 1.4', 'encryption': None, 'author':\n'Jorj X. McKie', 'modDate': \"D:20160611145816-04'00'\", 'keywords': 'PDF, XPS, EPUB, CBZ',\n'title': 'The PyMuPDF Documentation', 'creationDate': \"D:20160611145816-04'00'\",\n'creator': 'sphinx', 'subject': 'PyMuPDF 1.9.1'}\n>>> doc.set_metadata({})      # clear all fields\n>>> doc.metadata             # look again to show what happened\n{'producer': 'none', 'format': 'PDF 1.4', 'encryption': None, 'author': 'none',\n'modDate': 'none', 'keywords': 'none', 'title': 'none', 'creationDate': 'none',\n'creator': 'none', 'subject': 'none'}\n>>> doc._delXmlMetadata()    # clear any XML metadata\n>>> doc.save(\"anonymous.pdf\", garbage = 4)       # save anonymized doc \n```", "```py\n>>> import pymupdf\n>>> doc = pymupdf.open(\"test.pdf\")\n>>> toc = doc.get_toc()\n>>> for t in toc: print(t)                           # show what we have\n[1, 'The PyMuPDF Documentation', 1]\n[2, 'Introduction', 1]\n[3, 'Note on the Name fitz', 1]\n[3, 'License', 1]\n>>> toc[1][1] += \" modified by set_toc\"               # modify something\n>>> doc.set_toc(toc)                                  # replace outline tree\n3                                                    # number of bookmarks inserted\n>>> for t in doc.get_toc(): print(t)                  # demonstrate it worked\n[1, 'The PyMuPDF Documentation', 1]\n[2, 'Introduction modified by set_toc', 1]            # <<< this has changed\n[3, 'Note on the Name fitz', 1]\n[3, 'License', 1] \n```", "```py\n>>> doc1 = pymupdf.open(\"file1.pdf\")          # must be a PDF\n>>> doc2 = pymupdf.open(\"file2.pdf\")          # must be a PDF\n>>> pages1 = len(doc1)                     # save doc1's page count\n>>> toc1 = doc1.get_toc(False)     # save TOC 1\n>>> toc2 = doc2.get_toc(False)     # save TOC 2\n>>> doc1.insert_pdf(doc2)                   # doc2 at end of doc1\n>>> for t in toc2:                         # increase toc2 page numbers\n t[2] += pages1                     # by old len(doc1)\n>>> doc1.set_toc(toc1 + toc2)               # now result has total TOC \n```", "```py\n>>> # insert 5 pages of doc2, where its page 21 becomes page 15 in doc1\n>>> doc1.insert_pdf(doc2, from_page=21, to_page=25, start_at=15) \n```", "```py\n>>> # same example, but pages are rotated and copied in reverse order\n>>> doc1.insert_pdf(doc2, from_page=25, to_page=21, start_at=15, rotate=90) \n```", "```py\n>>> # put copied pages in front of doc1\n>>> doc1.insert_pdf(doc2, from_page=21, to_page=25, start_at=0) \n```", "```py\nfor i in range(doc.page_count):\n    imglist = doc.get_page_images(i)\n    for img in imglist:\n        xref = img[0]                  # xref number\n        pix = pymupdf.Pixmap(doc, xref)   # make pixmap from image\n        if pix.n - pix.alpha < 4:      # can be saved as PNG\n            pix.save(\"p%s-%s.png\" % (i, xref))\n        else:                          # CMYK: must convert first\n            pix0 = pymupdf.Pixmap(pymupdf.csRGB, pix)\n            pix0.save(\"p%s-%s.png\" % (i, xref))\n            pix0 = None                # free Pixmap resources\n        pix = None                     # free Pixmap resources \n```", "```py\n>>> for page in doc: page.set_rotation(90) \n```"]