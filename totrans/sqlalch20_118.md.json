["```py\nclass SomeClass(Base):\n    __table__ = some_table_with_no_pk\n    __mapper_args__ = {\n        \"primary_key\": [some_table_with_no_pk.c.uid, some_table_with_no_pk.c.bar]\n    }\n```", "```py\nclass SomeClass(Base):\n    __tablename__ = \"some_table_with_no_pk\"\n\n    uid = Column(Integer, primary_key=True)\n    bar = Column(String, primary_key=True)\n```", "```py\nCREATE  TABLE  my_association  (\n  user_id  INTEGER  REFERENCES  user(id),\n  account_id  INTEGER  REFERENCES  account(id),\n  PRIMARY  KEY  (user_id,  account_id)\n)\n```", "```py\nfrom sqlalchemy import inspect\n\nmapper = inspect(MyClass)\n```", "```py\nfrom sqlalchemy import Integer, Column, ForeignKey\nfrom sqlalchemy.ext.declarative import declarative_base\n\nBase = declarative_base()\n\nclass A(Base):\n    __tablename__ = \"a\"\n\n    id = Column(Integer, primary_key=True)\n\nclass B(A):\n    __tablename__ = \"b\"\n\n    id = Column(Integer, primary_key=True)\n    a_id = Column(Integer, ForeignKey(\"a.id\"))\n```", "```py\nclass A(Base):\n    __tablename__ = \"a\"\n\n    id = Column(Integer, primary_key=True)\n\nclass B(A):\n    __tablename__ = \"b\"\n\n    b_id = Column(\"id\", Integer, primary_key=True)\n    a_id = Column(Integer, ForeignKey(\"a.id\"))\n```", "```py\nclass A(Base):\n    __tablename__ = \"a\"\n\n    id = Column(Integer, primary_key=True)\n\nclass B(A):\n    __tablename__ = \"b\"\n\n    # probably not what you want, but this is a demonstration\n    id = column_property(Column(Integer, primary_key=True), A.id)\n    a_id = Column(Integer, ForeignKey(\"a.id\"))\n```", "```py\nclass MyClass(Base):\n    # ....\n\n    foo = relationship(\n        \"Dest\", primaryjoin=and_(\"MyClass.id==Dest.foo_id\", \"MyClass.foo==Dest.bar\")\n    )\n```", "```py\nclass MyClass(Base):\n    # ....\n\n    foo = relationship(\n        \"Dest\", primaryjoin=\"and_(MyClass.id==Dest.foo_id, MyClass.foo==Dest.bar)\"\n    )\n```", "```py\nclass MyClass(Base):\n    # ....\n\n    foo = relationship(\n        Dest, primaryjoin=and_(MyClass.id == Dest.foo_id, MyClass.foo == Dest.bar)\n    )\n```", "```py\n# wrong !\nfoo = relationship(Dest, foreign_keys=[\"Dest.foo_id\", \"Dest.bar_id\"])\n\n# correct !\nfoo = relationship(Dest, foreign_keys=\"[Dest.foo_id, Dest.bar_id]\")\n\n# also correct !\nfoo = relationship(Dest, foreign_keys=[Dest.foo_id, Dest.bar_id])\n\n# if you're using columns from the class that you're inside of, just use the column objects !\nclass MyClass(Base):\n    foo_id = Column(...)\n    bar_id = Column(...)\n    # ...\n\n    foo = relationship(Dest, foreign_keys=[foo_id, bar_id])\n```", "```py\n>>> session.scalars(select(User).options(subqueryload(User.addresses))).all()\n-- the \"main\" query\nSELECT  users.id  AS  users_id\nFROM  users\n-- the \"load\" query issued by subqueryload\nSELECT  addresses.id  AS  addresses_id,\n  addresses.user_id  AS  addresses_user_id,\n  anon_1.users_id  AS  anon_1_users_id\nFROM  (SELECT  users.id  AS  users_id  FROM  users)  AS  anon_1\nJOIN  addresses  ON  anon_1.users_id  =  addresses.user_id\nORDER  BY  anon_1.users_id \n```", "```py\n>>> user = session.scalars(\n...     select(User).options(subqueryload(User.addresses)).limit(1)\n... ).first()\n-- the \"main\" query\nSELECT  users.id  AS  users_id\nFROM  users\n  LIMIT  1\n-- the \"load\" query issued by subqueryload\nSELECT  addresses.id  AS  addresses_id,\n  addresses.user_id  AS  addresses_user_id,\n  anon_1.users_id  AS  anon_1_users_id\nFROM  (SELECT  users.id  AS  users_id  FROM  users  LIMIT  1)  AS  anon_1\nJOIN  addresses  ON  anon_1.users_id  =  addresses.user_id\nORDER  BY  anon_1.users_id \n```", "```py\n-- query #1\n+--------+\n|users_id|\n+--------+\n|       1|\n+--------+\n\n-- query #2\n+------------+-----------------+---------------+\n|addresses_id|addresses_user_id|anon_1_users_id|\n+------------+-----------------+---------------+\n|           3|                2|              2|\n+------------+-----------------+---------------+\n|           4|                2|              2|\n+------------+-----------------+---------------+\n```", "```py\nsession.scalars(\n    select(User).options(subqueryload(User.addresses)).order_by(User.id).limit(1)\n).first()\n```", "```py\nclass SomeClass(Base):\n    __table__ = some_table_with_no_pk\n    __mapper_args__ = {\n        \"primary_key\": [some_table_with_no_pk.c.uid, some_table_with_no_pk.c.bar]\n    }\n```", "```py\nclass SomeClass(Base):\n    __tablename__ = \"some_table_with_no_pk\"\n\n    uid = Column(Integer, primary_key=True)\n    bar = Column(String, primary_key=True)\n```", "```py\nCREATE  TABLE  my_association  (\n  user_id  INTEGER  REFERENCES  user(id),\n  account_id  INTEGER  REFERENCES  account(id),\n  PRIMARY  KEY  (user_id,  account_id)\n)\n```", "```py\nfrom sqlalchemy import inspect\n\nmapper = inspect(MyClass)\n```", "```py\nfrom sqlalchemy import Integer, Column, ForeignKey\nfrom sqlalchemy.ext.declarative import declarative_base\n\nBase = declarative_base()\n\nclass A(Base):\n    __tablename__ = \"a\"\n\n    id = Column(Integer, primary_key=True)\n\nclass B(A):\n    __tablename__ = \"b\"\n\n    id = Column(Integer, primary_key=True)\n    a_id = Column(Integer, ForeignKey(\"a.id\"))\n```", "```py\nclass A(Base):\n    __tablename__ = \"a\"\n\n    id = Column(Integer, primary_key=True)\n\nclass B(A):\n    __tablename__ = \"b\"\n\n    b_id = Column(\"id\", Integer, primary_key=True)\n    a_id = Column(Integer, ForeignKey(\"a.id\"))\n```", "```py\nclass A(Base):\n    __tablename__ = \"a\"\n\n    id = Column(Integer, primary_key=True)\n\nclass B(A):\n    __tablename__ = \"b\"\n\n    # probably not what you want, but this is a demonstration\n    id = column_property(Column(Integer, primary_key=True), A.id)\n    a_id = Column(Integer, ForeignKey(\"a.id\"))\n```", "```py\nclass MyClass(Base):\n    # ....\n\n    foo = relationship(\n        \"Dest\", primaryjoin=and_(\"MyClass.id==Dest.foo_id\", \"MyClass.foo==Dest.bar\")\n    )\n```", "```py\nclass MyClass(Base):\n    # ....\n\n    foo = relationship(\n        \"Dest\", primaryjoin=\"and_(MyClass.id==Dest.foo_id, MyClass.foo==Dest.bar)\"\n    )\n```", "```py\nclass MyClass(Base):\n    # ....\n\n    foo = relationship(\n        Dest, primaryjoin=and_(MyClass.id == Dest.foo_id, MyClass.foo == Dest.bar)\n    )\n```", "```py\n# wrong !\nfoo = relationship(Dest, foreign_keys=[\"Dest.foo_id\", \"Dest.bar_id\"])\n\n# correct !\nfoo = relationship(Dest, foreign_keys=\"[Dest.foo_id, Dest.bar_id]\")\n\n# also correct !\nfoo = relationship(Dest, foreign_keys=[Dest.foo_id, Dest.bar_id])\n\n# if you're using columns from the class that you're inside of, just use the column objects !\nclass MyClass(Base):\n    foo_id = Column(...)\n    bar_id = Column(...)\n    # ...\n\n    foo = relationship(Dest, foreign_keys=[foo_id, bar_id])\n```", "```py\n>>> session.scalars(select(User).options(subqueryload(User.addresses))).all()\n-- the \"main\" query\nSELECT  users.id  AS  users_id\nFROM  users\n-- the \"load\" query issued by subqueryload\nSELECT  addresses.id  AS  addresses_id,\n  addresses.user_id  AS  addresses_user_id,\n  anon_1.users_id  AS  anon_1_users_id\nFROM  (SELECT  users.id  AS  users_id  FROM  users)  AS  anon_1\nJOIN  addresses  ON  anon_1.users_id  =  addresses.user_id\nORDER  BY  anon_1.users_id \n```", "```py\n>>> user = session.scalars(\n...     select(User).options(subqueryload(User.addresses)).limit(1)\n... ).first()\n-- the \"main\" query\nSELECT  users.id  AS  users_id\nFROM  users\n  LIMIT  1\n-- the \"load\" query issued by subqueryload\nSELECT  addresses.id  AS  addresses_id,\n  addresses.user_id  AS  addresses_user_id,\n  anon_1.users_id  AS  anon_1_users_id\nFROM  (SELECT  users.id  AS  users_id  FROM  users  LIMIT  1)  AS  anon_1\nJOIN  addresses  ON  anon_1.users_id  =  addresses.user_id\nORDER  BY  anon_1.users_id \n```", "```py\n-- query #1\n+--------+\n|users_id|\n+--------+\n|       1|\n+--------+\n\n-- query #2\n+------------+-----------------+---------------+\n|addresses_id|addresses_user_id|anon_1_users_id|\n+------------+-----------------+---------------+\n|           3|                2|              2|\n+------------+-----------------+---------------+\n|           4|                2|              2|\n+------------+-----------------+---------------+\n```", "```py\nsession.scalars(\n    select(User).options(subqueryload(User.addresses)).order_by(User.id).limit(1)\n).first()\n```"]